["```\n    frame.setSize(300,300);\n    frame.setVisible(true);\n    ```", "```\npublic void changeIt() {\n  button.setText(\"Iâ€™ve been clicked!\");\n}\n```", "```\nDog d = (Dog) a;\nd.bark();\n```", "```\nShortMessage msg1 = new ShortMessage();\nmsg1.setMessage(NOTE_ON, 1, 44, 100);\nMidiEvent noteOn = new MidiEvent(msg1, 1);\ntrack.add(noteOn);\n\nShortMessage msg2 = new ShortMessage();\nmsg2.setMessage(NOTE_OFF, 1, 44, 100);\nMidiEvent noteOff = new MidiEvent(msg2, 16);\ntrack.add(noteOff);\n```", "```\nimport javax.sound.midi.*;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.Random;\n\nimport static javax.sound.midi.ShortMessage.*;\n\npublic class MiniMusicPlayer3 {\n  private MyDrawPanel panel;\n  private Random random = new Random();\n\n  public static void main(String[] args) {\n    MiniMusicPlayer3 mini = new MiniMusicPlayer3();\n    mini.go();\n  }\n\n  public void setUpGui() {\n    JFrame frame = new JFrame(\"My First Music Video\");\n    panel = new MyDrawPanel();\n    frame.setContentPane(panel);\n    frame.setBounds(30, 30, 300, 300);\n    frame.setVisible(true);\n  }\n\n  public void go() {\n    setUpGui();\n\n    try {\n      Sequencer sequencer = MidiSystem.getSequencer();\n      sequencer.open();\n      sequencer.addControllerEventListener(panel, new int[]{127});\n      Sequence seq = new Sequence(Sequence.PPQ, 4);\n      Track track = seq.createTrack();\n\n      int note;\n      for (int i = 0; i < 60; i += 4) {\n        note = random.nextInt(50) + 1;\n        track.add(makeEvent(NOTE_ON, 1, note, 100, i));\n        track.add(makeEvent(CONTROL_CHANGE, 1, 127, 0, i));\n        track.add(makeEvent(NOTE_OFF, 1, note, 100, i + 2));\n      }\n\n      sequencer.setSequence(seq);\n      sequencer.start();\n      sequencer.setTempoInBPM(120);\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\npublic static MidiEvent makeEvent(int cmd, int chnl, int one, int two, int tick) {\n    MidiEvent event = null;\n    try {\n      ShortMessage msg = new ShortMessage();\n      msg.setMessage(cmd, chnl, one, two);\n      event = new MidiEvent(msg, tick);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return event;\n}\n\nclass MyDrawPanel extends JPanel implements ControllerEventListener {\n    private boolean msg = false;\n\n    public void controlChange(ShortMessage event) {\n      msg = true;\n      repaint();\n    }\n\n    public void paintComponent(Graphics g) {\n      if (msg) {\n        int r = random.nextInt(250);\n        int gr = random.nextInt(250);\n        int b = random.nextInt(250);\n\n        g.setColor(new Color(r, gr, b));\n\n        int height = random.nextInt(120) + 10;\n        int width = random.nextInt(120) + 10;\n\n        int xPos = random.nextInt(40) + 10;\n        int yPos = random.nextInt(40) + 10;\n\n        g.fillRect(xPos, yPos, width, height);\n        msg = false;\n      }\n    }\n  }\n\n}\n```", "```\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\nclass InnerButton {\n  private JButton button;\n\n  public static void main(String[] args) {\n    InnerButton gui = new InnerButton();\n    gui.go();\n  }\n\n  public void go() {\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(\n            JFrame.EXIT_ON_CLOSE);\n\n    button = new JButton(\"A\");\n    button.addActionListener();\n\n    frame.getContentPane().add(\n            BorderLayout.SOUTH, button);\n    frame.setSize(200, 100);\n    frame.setVisible(true);\n  }\n\n  class ButtonListener extends ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if (button.getText().equals(\"A\")) {\n        button.setText(\"B\");\n      } else {\n        button.setText(\"A\");\n      }\n    }\n  }\n}\n```", "```\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.concurrent.TimeUnit;\npublic class Animate {\n    int x = 1;\n    int y = 1;\n    public static void main(String[] args) {\n       Animate gui = new Animate ();\n       gui.go();\n   }\n   public void go() {\n       JFrame _________ = new JFrame();\n       frame.setDefaultCloseOperation(\n                     JFrame.EXIT_ON_CLOSE);\n       ______________________________________;      \n       _________.getContentPane().add(drawP);\n       __________________________;\n       _________.setVisible(true);\n       for (int i=0; i<124; _______________) {\n       _____________________;\n       _____________________;\n       try {\n        TimeUnit.MILLISECONDS.sleep(50);\n       } catch(Exception ex) { }\n       }\n   }\n   class MyDrawP extends JPanel {\n       public void paintComponent (Graphics\n                                  _________) {\n          __________________________________;\n          __________________________________;\n          __________________________________;\n          __________________________________;\n       }\n   }\n}\n```", "```\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.concurrent.TimeUnit;\n\npublic class Animate {\n  int x = 1;\n  int y = 1;\n  public static void main(String[] args) {\n    Animate gui = new Animate ();\n    gui.go();\n  }\n  public void go() {\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(\n            JFrame.EXIT_ON_CLOSE);\n    MyDrawP drawP = new MyDrawP();      \n    frame.getContentPane().add(drawP);\n    frame.setSize(500, 270);\n    frame.setVisible(true);\n    for (int i = 0; i < 124; i++,y++,x++ ) {\n      x++;\n      drawP.repaint();\n      try {\n        TimeUnit.MILLISECONDS.sleep(50);\n      } catch(Exception ex) { }\n    }\n  }\n  class MyDrawP extends JPanel {\n    public void paintComponent(Graphics g ) {\n      g.setColor(Color.white);\n      g.fillRect(0, 0, 500, 250);\n      g.setColor(Color.blue);\n      g.fillRect(x, y, 500-x*2, 250-y*2);\n    }\n  }\n}\n```"]