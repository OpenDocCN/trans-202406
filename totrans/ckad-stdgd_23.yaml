- en: Chapter 23\. Network Policies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 23 章 网络策略
- en: The uniqueness of the IP address assigned to a Pod is maintained across all
    nodes and namespaces. This is accomplished by allocating a dedicated subnet to
    each registered node during its creation. The Container Network Interface (CNI)
    plugin handles the leasing of IP addresses from the assigned subnet when a new
    Pod is created on a node. Consequently, Pods on a node can seamlessly communicate
    with all other Pods running on any node within the cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给 Pod 的 IP 地址的唯一性在所有节点和命名空间中保持不变。这是通过在其创建过程中为每个注册节点分配专用子网来实现的。当在节点上创建新的 Pod
    时，容器网络接口（CNI）插件会从分配的子网中分配 IP 地址。因此，节点上的 Pod 可以与集群中任何节点上运行的所有其他 Pod 无缝通信。
- en: Network policies in Kubernetes function similarly to firewall rules, specifically
    designed for governing Pod-to-Pod communication. These policies include rules
    specifying the direction of network traffic (ingress and/or egress) for one or
    multiple Pods within a namespace or across different namespaces. Additionally,
    these rules define the targeted ports for communication. This fine-grained control
    enhances security and governs the flow of traffic within the Kubernetes cluster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的网络策略与防火墙规则类似，专门设计用于管理 Pod 到 Pod 的通信。这些策略包括指定网络流量方向（入站和/或出站）的规则，适用于命名空间内或跨不同命名空间中一个或多个
    Pod。此外，这些规则定义了通信的目标端口。这种精细化的控制增强了 Kubernetes 集群内部流量的安全性和管理能力。
- en: Working with Network Policies
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网络策略
- en: Within a Kubernetes cluster, any Pod can talk to any other Pod without restrictions
    using its [IP address or DNS name](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pods),
    even across namespaces. Not only does unrestricted inter-Pod communication pose
    a potential security risk, it also makes it harder to understand the mental communication
    model of your architecture. A network policy defines the rules that control traffic
    from and to a Pod, as illustrated in [Figure 23-1](#network_policies_from_to_pods).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 集群中，任何 Pod 都可以使用其[IP地址或DNS名称](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pods)与任何其他
    Pod 自由通信，甚至跨命名空间。不仅不受限制的 Pod 间通信可能存在安全风险，还使得架构的心智通信模型难以理解。网络策略定义了控制从 Pod 到 Pod
    的流量的规则，如[图 23-1](#network_policies_from_to_pods)所示。
- en: '![ckd2 2301](Images/ckd2_2301.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 2301](Images/ckd2_2301.png)'
- en: Figure 23-1\. Network policies define traffic from and to a Pod
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 23-1\. 网络策略定义了从 Pod 到 Pod 的流量
- en: For example, there’s no good reason to allow a backend application running in
    a Pod to talk directly to the frontend application running in another Pod. The
    communication should be directed from the frontend Pod to the backend Pod.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，没有充分的理由允许运行在一个 Pod 中的后端应用直接与运行在另一个 Pod 中的前端应用进行通信。通信应该从前端 Pod 指向后端 Pod。
- en: Installing an Network Policy Controller
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装网络策略控制器
- en: A network policy cannot work without a network policy controller. The network
    policy controller evaluates the collection of rules defined by a network policy.
    You can find instructions for a wide range of network policy controllers in the
    [Kubernetes documentation](https://kubernetes.io/docs/tasks/administer-cluster/network-policy-provider/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没有网络策略控制器，网络策略是无法工作的。网络策略控制器评估由网络策略定义的规则集合。在[Kubernetes文档](https://kubernetes.io/docs/tasks/administer-cluster/network-policy-provider/)中可以找到各种网络策略控制器的说明。
- en: '[Cilium](https://cilium.io/) is a CNI that implements a network policy controller.
    You can install Cilium on cloud provider and on-prem Kubernetes clusters. Refer
    to the [installation instructions](https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/)
    for detailed information. Once it is installed, you should find at least two Pods
    running Cilium and the Cilium Operator in the `kube-system` namespace:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Cilium](https://cilium.io/)是一个实现网络策略控制器的CNI。您可以在云提供商和本地 Kubernetes 集群上安装 Cilium。详细信息请参阅[安装说明](https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/)。安装完成后，您应该能够在
    `kube-system` 命名空间中找到至少两个运行 Cilium 和 Cilium Operator 的 Pod：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can now assume that the rules defined by network policy objects will be
    evaluated. Additionally, you can use the Cilium command line tool to validate
    the proper installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以假设网络策略对象定义的规则将被评估。此外，您可以使用Cilium命令行工具验证正确的安装。
- en: Creating a Network Policy
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建网络策略
- en: Label selection plays a crucial role in defining which Pods a network policy
    applies to. We already saw the concept in action in other contexts (e.g., the
    [Deployment](ch10.xhtml#deployments) and the [Service](ch21.xhtml#services)).
    Furthermore, a network policy defines the direction of the traffic, to allow or
    disallow. In the context of a network policy, incoming traffic is called *ingress*,
    and outgoing traffic is called *egress*. For ingress and egress, you can whitelist
    the sources of traffic like Pods, IP addresses, or ports.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 标签选择在定义网络策略适用于哪些 Pod 方面起着至关重要的作用。我们已经在其他上下文中看到过这个概念（例如，[部署](ch10.xhtml#deployments)和[服务](ch21.xhtml#services)）。此外，网络策略定义了流量的方向，允许或禁止。在网络策略的上下文中，入站流量称为*入口*，出站流量称为*出口*。对于入口和出口，您可以像
    Pod、IP 地址或端口这样设置白名单。
- en: Network policies do not apply to Services
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络策略不适用于服务。
- en: In most cases, you’d set up Service objects to funnel network traffic to Pods
    based on label and port selection. Network policies do not involve Services at
    all. All rules are namespace- and Pod-specific.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您将设置服务对象来基于标签和端口选择将网络流量引导到 Pod。网络策略完全不涉及服务。所有规则都是命名空间和 Pod 特定的。
- en: 'The creation of network policies is best explained by example. Let’s say you’re
    dealing with the following scenario: you’re running a Pod that exposes an API
    to other consumers. For example, a Pod that processes payments for other applications.
    The company you’re working for is migrating applications from a legacy payment
    processor to a new one. Therefore, you’ll want to allow access only from the applications
    that are capable of properly communicating with it. Right now, you have two consumers—a
    grocery store and a coffee shop—each running their application in a separate Pod.
    The coffee shop is ready to consume the API of the payment processor, but the
    grocery store isn’t. [Figure 23-2](#network_policy_api_allow) shows the Pods and
    their assigned labels.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过示例最好解释了网络策略的创建。假设您正在处理以下场景：您正在运行一个 Pod，该 Pod 向其他消费者公开 API。例如，一个处理其他应用程序付款的
    Pod。您所在的公司正在将应用程序从旧的付款处理器迁移到新的付款处理器。因此，您只希望允许能够正确与其通信的应用程序访问。目前，您有两个消费者——一个杂货店和一个咖啡店——每个都在单独的
    Pod 中运行其应用程序。咖啡店已准备好消费付款处理器的 API，但杂货店尚未准备好。 [Figure 23-2](#network_policy_api_allow)
    显示了 Pod 及其分配的标签。
- en: '![ckd2 2302](Images/ckd2_2302.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 2302](Images/ckd2_2302.png)'
- en: Figure 23-2\. Limiting traffic to and from a Pod
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 23-2\. 限制与 Pod 之间的流量
- en: 'Before creating a network policy, we’ll stand up the Pods to represent the
    scenario:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建网络策略之前，我们将启动用于表示场景的 Pod：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Given Kubernetes’ default behavior of allowing unrestricted Pod-to-Pod communication,
    the three Pods will be able to talk to one another. The following commands verify
    the behavior. The grocery store and coffee shop Pods perform a `wget` call to
    the payment processor Pod’s IP address:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 Kubernetes 默认允许无限制的 Pod 对 Pod 通信，这三个 Pod 将能够相互通信。以下命令验证了这种行为。杂货店和咖啡店的 Pod
    对付款处理器 Pod 的 IP 地址执行 `wget` 调用：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You cannot create a new network policy with the imperative `create` command.
    Instead, you will have to use the declarative approach. The YAML manifest in [Example 23-1](#network_policy),
    stored in the file *networkpolicy-api-allow.yaml*, shows a network policy for
    the scenario described previously.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能使用命令式的 `create` 命令创建新的网络策略。而是必须使用声明式方法。存储在文件 *networkpolicy-api-allow.yaml*
    中的 [Example 23-1](#network_policy) 中的 YAML 清单显示了前面描述场景的网络策略。
- en: Example 23-1\. Declaring a NetworkPolicy with YAML
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 23-1\. 使用 YAML 声明 NetworkPolicy
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_network_policies_CO1-1)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_network_policies_CO1-1)'
- en: Selects the Pod the policy should apply to by label selection.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过标签选择来选择应用策略的 Pod。
- en: '[![2](Images/2.png)](#co_network_policies_CO1-2)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_network_policies_CO1-2)'
- en: Allows incoming traffic from the Pod with matching labels within the same namespace.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 允许来自同一命名空间中具有匹配标签的 Pod 的入站流量。
- en: A network policy defines a couple of important attributes, which together form
    its set of rules. [Table 23-1](#network_policy_spec_attributes) shows the attributes
    on the `spec` level.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 网络策略定义了几个重要属性，这些属性一起形成其规则集。 [Table 23-1](#network_policy_spec_attributes) 显示了
    `spec` 级别的属性。
- en: Table 23-1\. Spec attributes of a network policy
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表 23-1\. 网络策略的规范属性
- en: '| Attribute | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `podSelector` | Selects the Pods in the namespace to apply the network policy
    to. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `podSelector` | 选择在命名空间中应用网络策略的 Pod。 |'
- en: '| `policyTypes` | Defines the type of traffic (i.e., ingress and/or egress)
    the network policy applies to. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `policyTypes` | 定义网络策略适用的流量类型（即入口和/或出口）。 |'
- en: '| `ingress` | Lists the rules for incoming traffic. Each rule can define `from`
    and `ports` sections. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `ingress` | 列出了入站流量的规则。每个规则可以定义 `from` 和 `ports` 部分。 |'
- en: '| `egress` | Lists the rules for outgoing traffic. Each rule can define `to`
    and `ports` sections. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `egress` | 列出了出站流量的规则。每个规则可以定义 `to` 和 `ports` 部分。 |'
- en: You can specify ingress and egress rules independently using `spec.ingress.from[]`
    and `spec.egress.to[]`. Each rule consists of a Pod selector, an optional namespace
    selector, or a combination of both. [Table 23-2](#network_policy_to_from_selectors)
    lists the relevant attributes for the `to` and `from` selectors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `spec.ingress.from[]` 和 `spec.egress.to[]` 来独立指定入口和出口规则。每个规则由 Pod 选择器、可选的命名空间选择器或两者的组合组成。[表 23-2](#network_policy_to_from_selectors)
    列出了 `to` 和 `from` 选择器的相关属性。
- en: Table 23-2\. Attributes of a network policy `to` and `from` selectors
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 表 23-2\. 网络策略 `to` 和 `from` 选择器的属性
- en: '| Attribute | Description |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `podSelector` | Selects Pods by label(s) in the same namespace as the network
    policy that should be allowed as ingress sources or egress destinations. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `podSelector` | 通过标签在与网络策略相同的命名空间中选择 Pod，这些 Pod 应被允许作为入口源或出口目的地。 |'
- en: '| `namespaceSelector` | Selects namespaces by label(s) for which all Pods should
    be allowed as ingress sources or egress destinations. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `namespaceSelector` | 通过标签选择命名空间，所有 Pod 应被允许作为入口源或出口目的地。 |'
- en: '| `namespaceSelector` and `podSelector` | Selects Pods by label(s) within namespaces
    by label(s). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `namespaceSelector` 和 `podSelector` | 通过标签在命名空间中选择 Pod。 |'
- en: 'Let’s see the effect of the network policy in action. Create the network policy
    object from the manifest:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看网络策略在实际中的效果。从清单创建网络策略对象：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The network policy prevents calling the payment processor from the grocery
    store Pod. Accessing the payment processor from the coffee shop Pod works perfectly,
    as the network policy’s Pod selector matches the Pod’s assigned label `app=coffee-shop`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 网络策略阻止了从杂货店 Pod 调用支付处理器。从咖啡店 Pod 访问支付处理器完全正常，因为网络策略的 Pod 选择器与分配给 Pod 的标签 `app=coffee-shop`
    匹配：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As a developer, you may be dealing with network policies that have been set
    up for you by other team members or administrators. You need to know about the
    `kubectl` commands for listing and inspecting network policy objects to understand
    their effects on the directional network traffic between microservices.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，您可能需要处理由其他团队成员或管理员为您设置的网络策略。您需要了解 `kubectl` 命令来列出和检查网络策略对象，以了解它们对微服务之间方向性网络流量的影响。
- en: Listing Network Policies
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出网络策略
- en: 'Listing network policies works the same as any other Kubernetes primitive.
    Use the `get` command in combination with the resource type `networkpolicy`, or
    its short-form, `netpol`. For the previous network policy, you see a table that
    renders the name and Pod selector:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列出网络策略的操作与任何其他 Kubernetes 原语相同。使用 `get` 命令结合资源类型 `networkpolicy` 或其简写形式 `netpol`。对于先前的网络策略，您会看到一个表格，显示名称和
    Pod 选择器：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It’s unfortunate that the output of the command doesn’t give a lot of information
    about the ingress and egress rules. To retrieve more information, you have to
    dig into the details.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，该命令的输出并未提供关于入口和出口规则的大量信息。要获取更多信息，您需要深入了解详情。
- en: Rendering Network Policy Details
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染网络策略详细信息
- en: 'You can inspect the details of a network policy using the `describe` command.
    The output renders all the important information: Pod selector, and ingress and
    egress rules:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `describe` 命令检查网络策略的详细信息。输出会渲染所有重要信息：Pod 选择器，以及入口和出口规则：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The network policy details don’t draw a clear picture of the Pods that have
    been selected based on its rules. You can create Pods that match the rules and
    do not match the rules to verify the network policy’s desired behavior.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 网络策略的详细信息没有清晰地描述基于其规则选择的 Pod。您可以创建符合规则和不符合规则的 Pod，以验证网络策略的预期行为。
- en: Visualizing network policies
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化网络策略
- en: Defining the rules of network policies correctly can be challenging. The page
    [networkpolicy.io](https://networkpolicy.io) provides a visual editor for network
    policies that renders a graphical representation in the browser.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正确定义网络策略的规则可能具有挑战性。页面 [networkpolicy.io](https://networkpolicy.io) 提供了一个网络策略的可视化编辑器，在浏览器中呈现图形表示。
- en: As explained earlier, every Pod can talk to other Pods running on any node of
    the cluster, which exposes a potential security risk. An attacker able to gain
    access to a Pod theoretically can try to compromise another Pod by communicating
    with it by its virtual IP address.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个 Pod 可以与集群的任何节点上运行的其他 Pod 进行通信，这暴露了潜在的安全风险。攻击者如果能够访问一个 Pod，理论上可以通过其虚拟
    IP 地址与另一个 Pod 进行通信试图进行破坏。
- en: Applying Default Network Policies
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用默认网络策略
- en: The principle of least privilege is a fundamental security concept, and it’s
    highly recommended when it comes to restricting Pod-to-Pod network traffic in
    Kubernetes. The idea is to initially disallow all traffic and then selectively
    open up only the necessary connections based on the application’s architecture
    and communication requirements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最小权限原则是一个基本的安全概念，在 Kubernetes 中限制 Pod 与 Pod 之间的网络流量时非常推荐。其思想是最初禁止所有流量，然后根据应用程序的架构和通信需求选择性地打开必要的连接。
- en: You can lock down Pod-to-Pod communication with the help of a [default network
    policy](https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-policies).
    Default network policies are custom policies set up by administrators to enforce
    restrictive communication patterns by default.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[默认网络策略](https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-policies)，您可以锁定
    Pod 与 Pod 之间的通信。默认网络策略是管理员设置的自定义策略，用于默认强制执行限制性通信模式。
- en: 'To demonstrate the functionality of such a default network policy, we’ll set
    up two Pods in the namespace `internal-tools`. Within the namespace, all Pods
    will be able to communicate with each other:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这种默认网络策略的功能，我们将在命名空间 `internal-tools` 中设置两个 Pod。在命名空间内，所有 Pod 将能够彼此通信：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s create a default network policy that denies all ingress and egress network
    traffic in the namespace. We’ll store the network policy in the file *networkpolicy-deny-all.yaml*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个默认网络策略，在命名空间中拒绝所有入站和出站网络流量。我们将网络策略存储在名为 *networkpolicy-deny-all.yaml*
    的文件中。
- en: Example 23-2\. Disallowing all traffic with the default policy
  id: totrans-68
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 23-2\. 使用默认策略禁止所有流量
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_network_policies_CO2-1)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_network_policies_CO2-1)'
- en: The curly braces for `spec.podSelector` mean “apply to all Pods in the namespace.”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `spec.podSelector` 的大括号意味着“适用于命名空间中的所有 Pod”。
- en: '[![2](Images/2.png)](#co_network_policies_CO2-2)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_network_policies_CO2-2)'
- en: Defines the types of traffic the rule should apply to, in this case ingress
    and egress traffic.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 定义规则应适用的流量类型，在本例中为入站和出站流量。
- en: 'Create the network policy from the manifest:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从清单创建网络策略：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The network policy prevents any network communication between the Pods in the
    `internal-tools` namespace will, as shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 网络策略防止 `internal-tools` 命名空间中 Pod 之间的任何网络通信，如下所示：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With those default deny constraints in place, you can define more detailed rules
    and loosen restrictions gradually. Network policies are additive. It’s common
    practice to now set up additional network policies that will open up directional
    traffic, but only the ones that are really required.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些默认的拒绝限制，您可以逐步定义更详细的规则并逐渐放宽限制。网络策略是累加的。现在设置额外的网络策略来打开方向性流量是常见做法，但仅限于真正需要的那些。
- en: Restricting Access to Specific Ports
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制对特定端口的访问
- en: Controlling access at the port level is a critical aspect of network security
    in Kubernetes. If not explicitly defined by a network policy, all ports are accessible,
    which can pose security risks. For instance, if you have an application running
    in a Pod that exposes port 80 to the outside world, leaving all other ports open
    widens the attack vector unnecessarily. Port rules can be specified for ingress
    and egress as part of a network policy. The definition of a network policy in
    [Example 23-3](#network_policy_ports) allows access on port 80.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，控制端口级别的访问是网络安全的关键方面。如果没有网络策略明确定义，所有端口都是可访问的，这可能存在安全风险。例如，如果您在
    Pod 中运行一个将端口 80 暴露给外部世界的应用程序，则保持其他所有端口开放会不必要地扩大攻击面。端口规则可以作为网络策略的一部分指定为入站和出站。在[示例
    23-3](#network_policy_ports)中定义的网络策略允许访问端口 80。
- en: Example 23-3\. Definition of a network policy allowing ingress access on port
    8080
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 23-3\. 定义允许端口 8080 入站访问的网络策略
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](Images/1.png)](#co_network_policies_CO3-1)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_network_policies_CO3-1)'
- en: Only allows incoming traffic on port 80.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 仅允许端口 80 的入站流量。
- en: When defining network policies, only allow those ports that are required for
    implementing your architectural needs. All other ports should be locked down.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义网络策略时，只允许实施架构需求所需的端口。所有其他端口都应该被锁定。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Intra-Pod communication or communication between two containers of the same
    Pod is completely unrestricted in Kubernetes. Network policies instate rules to
    control the network traffic either from or to a Pod. You can think of network
    policies as firewall rules for Pods. It’s best practice to start with a “deny
    all traffic” rule to minimize the attack vector.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的容器内通信或同一 Pod 中两个容器之间的通信是完全不受限制的。网络策略规定了控制从 Pod 到 Pod 或从 Pod 到外部网络的流量的规则。你可以将网络策略视为
    Pod 的防火墙规则。最佳实践是从“拒绝所有流量”规则开始，以最小化攻击向量。
- en: From there, you can open access as needed. Learning about the intricacies of
    network policies requires a bit of hands-on practice, as it is not directly apparent
    if the rules work as expected.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，您可以根据需要开放访问。学习网络策略的复杂性需要一些实践经验，因为不直接明显规则是否按预期工作。
- en: Exam Essentials
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Understand the purpose and effects of network policies
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 理解网络策略的目的和影响
- en: By default, Pod-to-Pod communication is unrestricted. Instantiate a default
    deny rule to restrict Pod-to-Pod network traffic with the principle of least privilege.
    The attribute `spec.podSelector` of a network policy selects the target Pod the
    rules apply to based on label selection. The ingress and egress rules define Pods,
    namespaces, IP addresses, and ports for allowing incoming and outgoing traffic.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Pod 与 Pod 之间的通信是不受限制的。使用最小特权原则实例化默认拒绝规则，以限制 Pod 与 Pod 之间的网络流量。网络策略的 `spec.podSelector`
    属性根据标签选择来选择目标 Pod，规则适用于该 Pod。入口和出口规则定义了允许的入站和出站流量的 Pod、命名空间、IP 地址和端口。
- en: Know how to implement the principle of least privilege
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 知道如何实施最小特权原则
- en: Network policies can be aggregated. A default deny rule can disallow ingress
    and/or egress traffic. An additional network policy can open up those rules with
    a more fine-grained definition.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 网络策略可以进行聚合。默认拒绝规则可以禁止入口和/或出口流量。附加的网络策略可以通过更精细的定义打开这些规则。
- en: Explore common network policy scenarios
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 探索常见的网络策略场景
- en: To explore common scenarios, look at the GitHub repository named [“Kubernetes
    Network Policy Recipes”](https://github.com/ahmetb/kubernetes-network-policy-recipes).
    The repository comes with a visual representation for each scenario and walks
    you through the steps to set up the network policy and the involved Pods. This
    is a great practice resource.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索常见场景，请查看名为 [“Kubernetes Network Policy Recipes”](https://github.com/ahmetb/kubernetes-network-policy-recipes)
    的 GitHub 仓库。该仓库提供每个场景的可视化表示，并引导您设置网络策略及相关 Pod 的步骤。这是一个很好的实践资源。
- en: Sample Exercises
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_019.xhtml#appendix_a_network_policies).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可在 [附录 A](app01_split_019.xhtml#appendix_a_network_policies) 中找到。
- en: You have been tasked with setting up a network policy for an existing application
    stack that consists of a `frontend` Pod in the namespace `end-user` and a `backend`
    Pod in the namespace `internal`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已被委托为现有应用程序堆栈设置网络策略。该堆栈包含 `end-user` 命名空间中的 `frontend` Pod 和 `internal` 命名空间中的
    `backend` Pod。
- en: Navigate to the directory *app-a/ch23/app-stack* of the checked-out GitHub repository
    [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide). Create
    the objects from the YAML manifest *setup.yaml*. Inspect the objects in both namespaces.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转到已检出的 GitHub 仓库 [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide)
    中的 *app-a/ch23/app-stack* 目录。从 YAML 清单 *setup.yaml* 创建对象。检查两个命名空间中的对象。
- en: Create a network policy named `app-stack` in the `end-user` namespace. Allow
    egress traffic only from the `frontend` Pod to the `backend` Pod. The `backend`
    Pod should be reachable only on port 80.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `end-user` 命名空间中创建名为 `app-stack` 的网络策略。只允许 `frontend` Pod 到 `backend` Pod
    的出口流量。`backend` Pod 只能通过端口 80 访问。
- en: Navigate to the directory *app-a/ch23/troubleshooting* of the checked-out GitHub
    repository [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide).
    Create the objects from the YAML manifest *setup.yaml*. Inspect the objects in
    the namespace `k1` and `k2`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到已检出的 GitHub 仓库 [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide)
    中的 *app-a/ch23/troubleshooting* 目录。从 YAML 清单 *setup.yaml* 创建对象。检查命名空间 `k1` 和 `k2`
    中的对象。
- en: Determine the virtual IP address of Pod `nginx` in namespace `k2.` Try to make
    a wget call on port 80 from the Pod `busybox` in namespace `k1` to the Pod `nginx`
    in namespace `k2`. The call will fail with the current setup.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定在命名空间 `k2` 中 `nginx` Pod 的虚拟 IP 地址。尝试从命名空间 `k1` 中的 `busybox` Pod 到命名空间 `k2`
    中的 `nginx` Pod 在端口 80 上进行 wget 调用。当前的设置下，此调用将失败。
- en: Create a network policy that allows performing ingress calls for all Pods in
    namespace `k1` to the Pod `nginx` in namespace `k2`. Pods in all other namespaces
    should be denied to make ingress calls to Pods in namespace `k2`.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个网络策略，允许命名空间 `k1` 中所有 Pod 向命名空间 `k2` 中的 `nginx` Pod 执行入口调用。所有其他命名空间中的 Pod
    应被拒绝向命名空间 `k2` 中的 Pod 执行入口调用。
- en: Verify that a network connection can be established.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证是否可以建立网络连接。
