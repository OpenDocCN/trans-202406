- en: Chapter 1\. Why Kubernetes Adoption Is Complex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 Kubernetes 采用复杂性的原因
- en: Modern application design has moved from the creation of huge monoliths to a
    more flexible architecture based on microservices running in containers. *Containers*
    are small runtime environments that include the dependencies and configuration
    files the services need to run. Containers are the building blocks of the cloud
    native approach, enabling scalable applications in diverse environments, including
    public, private, and hybrid clouds, as well as bare metal and edge locations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用设计已从创建庞大的单体应用转向基于运行在容器中的微服务的更灵活架构。*容器*是包含服务运行所需依赖和配置文件的小型运行时环境。容器是云原生方法的构建块，支持在公共、私有和混合云，以及裸机和边缘位置等多样化环境中构建可扩展的应用。
- en: 'Beyond the significant advantage of empowering application development teams
    to work in parallel on different services without having to update the entirety
    of an application, the cloud native model offers a number of advantages over monolithic
    architecture from an infrastructure perspective. Containerized applications use
    resources more efficiently than virtual machines (VMs), can run in a broader variety
    of environments, and can be scaled more easily. These advantages have driven wide
    adoption of microservice-based architecture, containers, and the predominant container
    orchestration platform: Kubernetes.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在基础设施层面上相较于单体架构具有显著优势，使应用开发团队能够并行开发不同服务而无需更新整个应用之外，云原生模型还提供了许多优势。容器化应用比虚拟机（VM）更高效地利用资源，在更广泛的环境中运行，并且更容易扩展。这些优势推动了微服务架构、容器以及主流容器编排平台
    Kubernetes 的广泛采用。
- en: Kubernetes facilitates the management of these distributed applications, allowing
    you to scale dynamically both horizontally and vertically as needed. Containers
    bring consistency of management to different applications, simplifying operational
    and lifecycle tasks. By orchestrating containers, Kubernetes can operationalize
    the management of applications across an entire environment, controlling and balancing
    resource consumption, providing automatic failover, and simplifying deployment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 促进了这些分布式应用的管理，使您能够根据需要动态水平和垂直扩展。容器为不同的应用带来了管理一致性，简化了操作和生命周期任务。通过编排容器，Kubernetes
    可以使整个环境中的应用管理操作化，控制和平衡资源消耗，提供自动故障转移，并简化部署过程。
- en: Although Kubernetes provides a foundation for resilient and flexible cloud native
    application development, it introduces its own complexities to the organization.
    Running and managing Kubernetes at scale is no easy task, and the difficulties
    are compounded by the inconsistencies between different providers and environments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Kubernetes 为云原生应用开发提供了弹性和灵活性的基础，但它也给组织带来了自身的复杂性。在规模化运行和管理 Kubernetes 并不容易，不同提供商和环境之间的不一致性更增加了困难。
- en: Kubernetes Architecture
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 架构
- en: Kubernetes manages a cluster of physical or virtual servers, called *worker
    nodes*, each one of which hosts containers organized into *pods*. A separate,
    smaller number of servers are reserved as *control plane nodes* that make up the
    control plane for the cluster. To support multitenancy, a Kubernetes cluster offers
    logical separation between workloads using *namespaces*—a mechanism for separating
    resources based on ownership—to provide a virtual cluster for each team.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 管理一组物理或虚拟服务器，称为*工作节点*，每个节点托管着组织成*Pods*的容器。另外，还有一小部分服务器作为*控制平面节点*，构成集群的控制平面。为了支持多租户，Kubernetes
    集群通过*命名空间*提供逻辑分离，命名空间是一种基于所有权分离资源的机制，为每个团队提供了一个虚拟集群。
- en: The *control plane* is the main access point that lets administrators and others
    manage the cluster. The control plane also stores state and configuration data
    for the cluster, tells worker nodes when to create and destroy containers, and
    routes traffic in the cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*控制平面*是主要访问点，允许管理员和其他人员管理集群。控制平面还存储集群的状态和配置数据，在需要时告知工作节点何时创建和销毁容器，并在集群中路由流量。'
- en: 'The control plane consists mainly of the following components:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面主要由以下组件组成：
- en: API Server
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: API 服务器
- en: The access point through which the control plane, worker agents (kubelets),
    and users communicate with the cluster
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面、工作代理（kubelet）和用户与集群通信的访问点
- en: Controller manager
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器管理器
- en: A service that manages the cluster using the API server using *controllers**,*
    which bring the state of the cluster in line with specifications
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*控制器*管理集群的服务使用API服务器，这些控制器将集群的状态与规范一致
- en: etcd
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: etcd
- en: A distributed key-value store that contains cluster state and configuration
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 包含集群状态和配置的分布式键值存储
- en: Scheduler
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器
- en: A service that manages node resources, assigning work based on availability
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 管理节点资源的服务，根据可用性分配工作
- en: Kubelet
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kubelet
- en: The agent running on all worker nodes to run pods via a container runtime
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有工作节点上运行代理以通过容器运行时运行Pod的服务
- en: '[Figure 1-1](#fig_1_the_components_of_a_kubernetes_cluster) shows the basic
    components of a Kubernetes cluster.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1](#fig_1_the_components_of_a_kubernetes_cluster)展示了Kubernetes集群的基本组件。'
- en: For high availability, the control plane is often replicated by maintaining
    multiple copies of the essential services and data required to run the cluster
    (mainly the API server and etcd).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了高可用性，控制平面通常通过维护必要服务和数据的多个副本来进行复制运行（主要是API服务器和etcd）。
- en: '![The components of a Kubernetes cluster](assets/cdkm_0101.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes集群的组件](assets/cdkm_0101.png)'
- en: Figure 1-1\. The components of a Kubernetes cluster
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. Kubernetes集群的组件
- en: You manage every aspect of a Kubernetes cluster’s configuration *declaratively*
    (such as deployments, pods, StatefulSets, PersistentVolumeClaim, etc.), meaning
    that you declare the desired state of each component, leaving Kubernetes to ensure
    that reality matches your specification. Kubernetes maintains a controller for
    each object type to bring the state of every object in the cluster in line with
    the declared state. For example, if you declare a certain number of pods, Kubernetes
    ensures that when a node fails, its pods are moved to a healthy node.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您以*声明方式*管理Kubernetes集群配置的每个方面（如部署、Pod、StatefulSets、PersistentVolumeClaim等），这意味着您声明了每个组件的期望状态，由Kubernetes确保实际情况与您的规范相匹配。Kubernetes为每种对象类型维护一个控制器，以使集群中每个对象的状态与声明的状态一致。例如，如果声明了某个数量的Pod，Kubernetes会确保在节点故障时将其Pod移动到健康节点。
- en: Kubernetes Objects and Custom Resource Definitions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes对象和自定义资源定义
- en: Kubernetes represents the cluster as *objects*. You create an object declaratively
    by writing a *manifest* file—a YAML document that describes the intended state
    of the object—and running a command to create the object from the file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes将集群表示为*对象*。您通过编写*清单*文件——描述对象预期状态的YAML文档——并运行命令从文件创建对象来声明性地创建对象。
- en: A controller makes sure the object exists and matches the state declared in
    the manifest. A controller is essentially a control loop, similar to a voltage
    regulator or thermostat, that knows how to maintain the state of an object within
    specified parameters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器确保对象存在并与清单中声明的状态匹配。控制器本质上是一个控制循环，类似于电压调节器或恒温器，它知道如何在指定参数内维护对象的状态。
- en: A Kubernetes *resource* is an endpoint in the Kubernetes API that stores a certain
    type of object. You can create a custom resource using a *custom resource definition*
    (CRD) to represent a new kind of object. In fact, some core Kubernetes resources
    now use CRDs because they make it easier to extend and update the capabilities
    of the objects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的*资源*是Kubernetes API中存储特定类型对象的端点。您可以使用*自定义资源定义*（CRD）创建自定义资源来表示新类型的对象。实际上，一些核心Kubernetes资源现在使用CRDs，因为它们使得扩展和更新对象的功能变得更容易。
- en: The Kubernetes Adoption Journey
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes采纳之旅
- en: Many organizations follow a well-traveled path in their adoption of Kubernetes,
    starting with experimentation before they decide whether to rely on it. The journey
    nearly always leads from a single cluster to the complexity of managing many clusters
    in different environments. [Figure 1-2](#fig_2_the_journey_to_kubernetes_adoption)
    shows a typical journey to Kubernetes adoption, beginning with experimentation,
    moving to productization, and finally to developing a managed platform.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织在采用Kubernetes时都沿着一条经过深思熟虑的道路前行，从实验开始，然后决定是否依赖它。这一旅程几乎总是从单一集群开始，逐渐发展到在不同环境中管理多个集群的复杂性。[图 1-2](#fig_2_the_journey_to_kubernetes_adoption)展示了进入Kubernetes采纳之旅的典型路径，从实验开始，转向产品化，最终发展成为一个受管平台。
- en: '![The journey to Kubernetes adoption ](assets/cdkm_0102.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![进入Kubernetes采纳之旅](assets/cdkm_0102.png)'
- en: Figure 1-2\. The journey to Kubernetes adoption
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 进入Kubernetes采纳之旅
- en: Experimenting with Kubernetes
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes实验
- en: In the experimentation phase, developers drive investigation into the capabilities
    of Kubernetes by containerizing a few projects. The open nature of Kubernetes
    makes it easy to manage on a small scale, using the command-line interface and
    writing scripts to make changes to the cluster and to integrate other open source
    components. At this stage, the organization often has not yet engaged with security,
    upgrades, availability, and other concerns that become important later. As their
    needs change, the team makes configuration changes and integrates components gradually,
    often without documenting the evolution of the cluster. When the time comes to
    support a broader array of environments or expand access to more teams, it becomes
    apparent that the cluster is tailor-made for the small set of use cases it has
    been serving thus far.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在试验阶段，开发人员通过容器化几个项目来驱动对 Kubernetes 功能的调查。Kubernetes 的开放特性使得在小规模上使用命令行界面并编写脚本进行集群更改和集成其他开源组件变得容易。在这个阶段，组织通常尚未涉足安全、升级、可用性及其他后续重要问题。随着需求的变化，团队逐渐进行配置更改并逐步集成组件，通常不会记录集群演变的过程。当需要支持更广泛的环境或扩展对更多团队的访问时，显然集群是为迄今为止服务的少数用例量身定制的。
- en: Productizing Kubernetes for the Organization
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Kubernetes 产品化为组织的平台
- en: As the organization begins to recognize the value of Kubernetes, teams begin
    to investigate how to scale general-purpose clusters that can serve the needs
    of the entire company. Departments such as service reliability and IT operations
    begin looking for ways to make Kubernetes secure, supportable, and manageable.
    These teams begin advocating for prescriptive, off-the-shelf solutions that trade
    flexibility for reliability. As the organization prepares to scale Kubernetes
    to fit its needs, it might find that these solutions are rigid and tend to silo
    each cluster, making cross-team work more difficult.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织开始认识到 Kubernetes 的价值，团队开始研究如何扩展能够满足整个公司需求的通用集群。服务可靠性和 IT 运维等部门开始寻找使 Kubernetes
    安全、可支持和可管理的方法。这些团队开始倡导交换灵活性以换取可靠性的预设、现成解决方案。随着组织准备将 Kubernetes 扩展到符合其需求的规模，可能会发现这些解决方案过于死板，并倾向于将每个集群隔离开来，使跨团队工作变得更加困难。
- en: Developing Kubernetes as a Managed Platform
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发 Kubernetes 作为托管平台
- en: To make Kubernetes work for the business needs of the organization, it must
    be possible to easily deploy, maintain, and scale clusters that are highly available
    and can handle applications and workloads that dynamically meet changing demands.
    The goal of the organization must therefore be to make Kubernetes operate as a
    modern platform at scale, providing resources to multiple teams.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 Kubernetes 适应组织的业务需求，必须能够轻松部署、维护和扩展高可用集群，能够处理动态满足不断变化需求的应用程序和工作负载。因此，组织的目标必须是使
    Kubernetes 在规模上运作为现代平台，为多个团队提供资源。
- en: At this point, the investigation often focuses on commercial Kubernetes platforms
    that can solve the organization’s problems out of the box. The team likely has
    enough experience to look for features such as flexibility, repeatable deployment,
    and the ability to manage multiple clusters across different environments, including
    diverse cloud platforms, virtualized or bare metal data centers, and increasingly,
    edge locations. IT operations and platform engineering teams will especially be
    looking at securing cluster access, configuration management, and Day 2 concerns
    like scaling, upgrades, quota control, logging, monitoring, continuity, and others.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当前阶段，调查通常集中在商业化的 Kubernetes 平台上，这些平台可以直接解决组织的问题。团队很可能有足够的经验，寻找灵活性、可重复部署以及管理不同环境下多个集群的能力，包括各种云平台、虚拟化或裸金属数据中心，以及越来越多的边缘位置。特别是
    IT 运维和平台工程团队会关注集群访问安全、配置管理，以及像扩展、升级、配额控制、日志记录、监控、持续性等 Day 2 关注点。
- en: As the platform takes shape and evolves, the tendency is to break larger multitenant
    clusters into smaller special-purpose clusters. This approach allows more flexible
    management, more efficient use of resources, and a more tailored experience for
    the teams using the clusters within the organization. From a security standpoint,
    smaller clusters help make defense in depth policies easier to implement, reducing
    the “blast radius” in the case of a breach. Operating multiple clusters also makes
    it possible to deploy apps wherever needed, whether in the cloud or on premises,
    or even at the edge.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着平台的形成和发展，将更大的多租户集群分成更小的特定用途的集群的趋势逐渐增强。这种方法可以实现更灵活的管理，更有效地利用资源，并为组织内使用集群的团队提供更为量身定制的体验。从安全角度来看，较小的集群有助于更轻松地实施深度防御策略，在遭遇安全漏洞时减少"爆炸半径"。操作多个集群还使得可以在云端、本地或边缘等任何需要的地方部署应用程序。
- en: The Challenges of Kubernetes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的挑战
- en: Every environment deals with infrastructure differently, meaning different challenges
    for every type of Kubernetes deployment. Provisioning, upgrading, and maintaining
    the infrastructure to support the control plane can be difficult and time-consuming.
    Once the cluster is up, integrating basic components like storage, networking,
    and security presents significant hurdles. Finally, in a deployment of multiple
    clusters across a variety of environments, each cluster must be managed individually.
    There is no native tool in Kubernetes itself for managing the clusters as a group,
    and differences between environments introduce operational nuances to each cluster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个环境处理基础设施的方式都不同，这意味着每种类型的 Kubernetes 部署都面临不同的挑战。配置、升级和维护支持控制平面的基础设施可能会很困难且耗时。一旦集群启动，集成存储、网络和安全等基本组件将会面临重大障碍。最后，在跨多个环境部署多个集群时，每个集群必须单独管理。Kubernetes
    本身没有用于管理集群作为整体的原生工具，而环境之间的差异为每个集群引入了操作细微差别。
- en: 'Below the layer of Kubernetes are the resources that the cluster needs, mainly
    storage, networking, and the physical or virtual machines where the cluster runs.
    This means that running a cluster involves two separate lifecycles that must be
    managed concurrently: Kubernetes and the hardware and operating system supporting
    it. Because Kubernetes is quickly evolving, these two layers must be kept in sync.
    Many problems with node or cluster availability come from incompatibilities between
    the versions of the operating system and the Kubernetes components. These problems
    become exponentially more difficult in multicluster deployments because the problem
    of keeping Kubernetes and the operating system in sync is multiplied by the number
    of platforms, each with its own complexities, then multiplied again by any specific
    versions or flavors required by the teams using the clusters.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的下一层是集群所需的资源，主要包括存储、网络以及运行集群的物理或虚拟机器。这意味着运行集群涉及管理两个并行的生命周期：Kubernetes
    本身以及支持其的硬件和操作系统。由于 Kubernetes 迅速发展，这两个层面必须保持同步。节点或集群可用性的许多问题源于操作系统版本与 Kubernetes
    组件版本之间的不兼容性。在多集群部署中，这些问题变得更加困难，因为需要同步多个平台的 Kubernetes 和操作系统，每个平台都有其独特的复杂性，再加上团队使用集群时可能需要特定版本或配置的需求，问题将会指数级增加。
- en: Initially, Kubernetes didn’t include any tools for managing the cluster infrastructure.
    Bringing up machines and installing Kubernetes were manual procedures. Creating
    clusters outside of managed Kubernetes environments required a lot of effort and
    custom tooling. The Kubernetes community needed a way to provide common tools
    to bootstrap a cluster.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Kubernetes 并没有包含任何管理集群基础设施的工具。启动机器和安装 Kubernetes 都是手动操作。在非托管 Kubernetes 环境外创建集群需要大量的工作量和定制工具。Kubernetes
    社区需要一种方法来提供通用工具来引导一个集群。
- en: 'To meet this challenge, the Kubernetes community began developing tools to
    simplify provisioning and maintaining clusters. Here are some examples that were
    developed over the last few years:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这一挑战，Kubernetes 社区开始开发工具，简化集群的配置和维护。以下是过去几年中开发的一些示例：
- en: Kube-up
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kube-up
- en: The first tool to bring up a Kubernetes cluster (2015)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个用于启动 Kubernetes 集群的工具（2015）
- en: kubeadm
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: kubeadm
- en: A tool for initializing, configuring, and upgrading Kubernetes clusters (2016)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于初始化、配置和升级 Kubernetes 集群的工具（2016）
- en: Kops
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Kops
- en: A tool for Kubernetes lifecycle management, including infrastructure and dependencies
    (2016)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于 Kubernetes 生命周期管理的工具，包括基础设施和依赖项（2016）
- en: Kubicorn
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Kubicorn
- en: A cluster management framework with modular support for cloud providers (2018)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有模块化支持云提供商的集群管理框架（2018年）。
- en: These tools were a great step in the direction of integrated cluster management
    but fell short of a complete solution. More complex workloads began to require
    more sophisticated deployments, including multiple clusters. Managing these deployments,
    in turn, became more difficult. In particular, it was clear there was a need to
    be able to manage clusters consistently and declaratively using a cohesive API—the
    way that Kubernetes manages nodes, pods, and containers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具是朝着集成集群管理的方向迈出的重要一步，但未能提供完整的解决方案。更复杂的工作负载开始需要更复杂的部署，包括多个集群。管理这些部署也因此变得更加困难。特别是，很明显需要通过一个统一的API以一致和声明式的方式管理集群——就像Kubernetes管理节点、Pod和容器一样。
