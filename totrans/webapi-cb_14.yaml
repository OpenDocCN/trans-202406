- en: Chapter 14\. Device Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The modern web browser platform includes APIs to interact with all kinds of
    device information and capabilities, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Battery status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device clipboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tactile feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of writing, some of these APIs are not well supported yet. Some
    are still considered experimental, so you shouldn’t use them in a production application
    just yet.
  prefs: []
  type: TYPE_NORMAL
- en: Some of these APIs may be supported by a given browser, like Chrome, but still
    won’t work if the device is missing the required capabilities. For example, the
    Vibration API is well supported by Chrome, but won’t work on a laptop or other
    device without vibration support.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the Battery Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show the device’s battery charging status in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Battery Status API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/DWFvk)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: You can query the Battery Status API by calling `navigator.getBattery`. This
    method returns a `Promise` that resolves to an object containing battery information.
  prefs: []
  type: TYPE_NORMAL
- en: First, write some HTML placeholder elements to hold the battery status, as shown
    in [Example 14-1](#example14-1).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-1\. The battery status markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, you can query the Battery Status API to get the battery charge level and
    charging status, adding them to the corresponding DOM elements (see [Example 14-2](#example14-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-2\. Querying the Battery Status API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What if you unplug your laptop? The displayed charging status is no longer
    accurate. To handle this, there some events you can listen for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`levelchange`'
  prefs: []
  type: TYPE_NORMAL
- en: Triggered when the battery’s charge level changes
  prefs: []
  type: TYPE_NORMAL
- en: '`chargingchange`'
  prefs: []
  type: TYPE_NORMAL
- en: Triggered when the battery starts or stops charging
  prefs: []
  type: TYPE_NORMAL
- en: You can update the UI when these events occur. Make sure you have a reference
    to the `battery` object, then add event listeners (see [Example 14-3](#example14-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-3\. Listening for battery events
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now your battery status stays updated. If you unplug your laptop, the charging
    status changes from “Charging” to “Not charging.”
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, some browsers don’t support this API at all. You can
    use the code in [Example 14-4](#example14-4) to check if the Battery Status API
    is supported on the user’s browser.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-4\. Checking for Battery Status API support
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are some additional properties available in the `battery` object, too.
    These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chargingTime`'
  prefs: []
  type: TYPE_NORMAL
- en: The number of seconds remaining until the battery is fully charged, if the battery
    is charging. If the battery is not charging, this has the value `Infinity`.
  prefs: []
  type: TYPE_NORMAL
- en: '`dischargingTime`'
  prefs: []
  type: TYPE_NORMAL
- en: The number of seconds remaining until the battery is fully discharged, if the
    battery is not charging. If the battery is not discharging, this has the value
    `Infinity`.
  prefs: []
  type: TYPE_NORMAL
- en: These two properties also have their own `change` events that you can listen
    for, called `chargingtimechange` and `dischargingtimechange`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: There are many things you can do with the information provided by the Battery
    Status API. For example, if the battery level is low, you can disable background
    tasks or other power-intensive operations. Or, it could even be something as simple
    as letting the user know they should save their changes because the device’s battery
    level is low.
  prefs: []
  type: TYPE_NORMAL
- en: You could also use it to show a simple battery status indicator. If you have
    a series of icons representing different battery states (fully charged, not charging,
    charging, low charge) you could keep the displayed icon up to date by listening
    to the change events.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the Network Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know how fast the user’s network connection is.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Network Information API to get data about the user’s network connection
    (see [Example 14-5](#example14-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-5\. Checking the network capabilities
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/krDAV)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The network information is contained in the `navigator.connection` object.
    To get an approximation of the network connection capabilities, you can check
    the `navigator.connection.effectiveType` property. At the time of writing, the
    possible values for `navigator.connection.effectiveType` based on download speed
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`slow-2g`: Up to 50 Kbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2g`: Up to 70 Kbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3g`: Up to 700 Kbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4g`: 700 Kbps and above'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These values are calculated based on the measurement of real user data. The
    specification states that these values may be updated in the future. You can use
    these values to determine, approximately, the network capabilities of the device.
    For example, an `effectiveType` of `slow-2g` probably cannot handle high-bandwidth
    activities like HD video streaming.
  prefs: []
  type: TYPE_NORMAL
- en: Should the network connection change while the page is open, the `navigator.connection`
    object can trigger a `change` event. You can listen for this event and adjust
    your app based on the new network connection information that was received.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Device Location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to get the device’s location.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Geolocation API to get the position in latitude and longitude. The Geolocation
    API exposes the `navigator.geolocation` object, which is used to request the user’s
    location with the `getCurrentPosition` method. This is a callback-based API. `getCurrentPosition`
    takes two arguments. The first argument is the success callback, and the second
    is the error callback (see [Example 14-6](#code_requestLocation)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-6\. Requesting the device location
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This API requires permission from the user. The first time you call `getCurrentPosition`,
    the browser asks the user for permission to share their location. If the user
    does not grant permission, the geolocation request fails and the browser calls
    the error callback.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check for permission ahead of time, to avoid having to catch
    an error, you can use the Permissions API to check its status (see [Example 14-7](#example14-7)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-7\. Checking for geolocation permission
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The returned permission object has a `state` property that can have one of the
    values `granted`, `denied`, or `prompt`. If the state is `denied`, you know the
    user has already been prompted and they declined, so you shouldn’t bother trying
    to get their location because it will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few ways the browser can try to detect a user’s location. It can
    attempt to use the device’s GPS, or it may use information about the user’s WiFi
    connection or IP address. In some cases, such as when the user is using a VPN,
    IP-based geolocation may not return the correct location for the user’s device.
  prefs: []
  type: TYPE_NORMAL
- en: The Geolocation API has very good browser support, so you don’t need to check
    for feature support unless you are targeting old browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the coordinates, the `position` object contains some other interesting
    information that may not be available on all devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '`altitude`'
  prefs: []
  type: TYPE_NORMAL
- en: The device’s altitude above sea level, in meters
  prefs: []
  type: TYPE_NORMAL
- en: '`heading`'
  prefs: []
  type: TYPE_NORMAL
- en: The device’s compass heading, in degrees
  prefs: []
  type: TYPE_NORMAL
- en: '`speed`'
  prefs: []
  type: TYPE_NORMAL
- en: The velocity of the device, if it is moving, in meters per second
  prefs: []
  type: TYPE_NORMAL
- en: You can also watch for changes in the device’s location by calling `navigator.geolocation.watchCurrentPosition`.
    The browser calls the callback that you pass to this method periodically when
    the location changes, providing updated coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the Device Location on a Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a map of the device’s location.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a service like Google Maps API or OpenStreetMaps to generate a map, passing
    the latitude and longitude coordinates from the Geolocation API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For this recipe, you need to sign up for a Google Maps API key. You can find
    instructions to sign up for an API key [on the Google Developers website](https://oreil.ly/9Uujk).
  prefs: []
  type: TYPE_NORMAL
- en: 'This example shows how to embed a map with the Google Maps Embed API. You can
    use the Google Maps Embed API by embedding an `iframe` element with a specially
    crafted URL. The URL must contain:'
  prefs: []
  type: TYPE_NORMAL
- en: The type of map (for this example, you need a `place` map)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your API key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The geolocation coordinates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request the device location, and in the success callback you can create the
    `iframe` and add it to the document (see [Example 14-8](#example14-8).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-8\. Creating a map iframe
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [this article from Google](https://oreil.ly/WhO-r) to learn more about properly
    securing a Google Maps API key.
  prefs: []
  type: TYPE_NORMAL
- en: This is just one of many possible map integrations you can use once you have
    received the device’s location. Google Maps has other types of APIs, and there
    are other services such as Mapbox or OpenStreetMap. You can also integrate a geocoding
    API to show a map marker with the actual address.
  prefs: []
  type: TYPE_NORMAL
- en: Copying and Pasting Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within a text area, you want to add copy and paste functionality. The user should
    be able to highlight some text and copy it, and when pasting, it should replace
    whatever text is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Clipboard API to interact with the selected text within the text area.
    You can add Copy and Paste buttons to your UI that call the corresponding functionality
    in the Clipboard API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be fully supported by all browsers yet. See [CanIUse](https://oreil.ly/4i7sm)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: To copy the text, get the selection start and end indexes and take that substring
    of the text area’s value. Then, write that text to the system clipboard (see [Example 14-9](#example14-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-9\. Copying text from a selection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Pasting is similar, but there’s an extra step. If there is text selected within
    the text area, you need to remove the selected text and splice in the new text
    from the clipboard (see [Example 14-10](#example14-10)). The Clipboard API is
    asynchronous, so you’ll need to wait on a `Promise` to receive the value in the
    system clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-10\. Pasting text into a selection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This replaces the currently selected text with the text from the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that even though you aren’t doing anything with the return value of `navigator.clipboard.writeText`,
    you are still awaiting the `Promise`. This is because you need to handle the case
    when the `Promise` is rejected with an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, when pasting, there are two other scenarios to be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: If no text is selected but the text area has focus, the text is pasted at the
    cursor position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the text area does not have focus, the text is pasted at the end of the text
    area’s value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you might expect, reading from the system clipboard programmatically can
    be a privacy concern. As such, it requires user permission. The first time you
    try to read from the clipboard, the browser asks the user for permission. If they
    allow it, the clipboard operation completes. If they deny the permission, the
    `Promise` returned by the Clipboard API is rejected with an error.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to avoid permission errors, you can use the Permissions API to check
    if the user has granted permission to read from the system clipboard (see [Example 14-11](#example14-11)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-11\. Checking clipboard read permission
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The three possible values for `permission.state` are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`granted`'
  prefs: []
  type: TYPE_NORMAL
- en: The user has already explicitly granted permission.
  prefs: []
  type: TYPE_NORMAL
- en: '`denied`'
  prefs: []
  type: TYPE_NORMAL
- en: The user has already explicitly denied permission.
  prefs: []
  type: TYPE_NORMAL
- en: '`prompt`'
  prefs: []
  type: TYPE_NORMAL
- en: The user has not been asked for permission yet.
  prefs: []
  type: TYPE_NORMAL
- en: If `permission.state` has the value `prompt`, the browser automatically prompts
    the user the first time you attempt to perform a clipboard read operation.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing Content with the Web Share API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to give the user an easy way to share a link using the native sharing
    capabilities of their device.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Web Share API to share the content.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/1IwEq)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: Call `navigator.share` and pass an object containing the title and URL (see
    [Example 14-12](#example14-12)). On supported devices and browsers, this brings
    up a familiar sharing interface that allows them to share the link in various
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-12\. Sharing a link
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: From here, the user can create a text message, email, or other communication
    containing a link to the content.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sharing interface looks different depending on the device and operating
    system. For example, [Figure 14-1](#figure_share) is a screenshot of the sharing
    interface on my computer running macOS 14.
  prefs: []
  type: TYPE_NORMAL
- en: '![The share interface on macOS 14](assets/wacb_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. The share interface on macOS 14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Making the Device Vibrate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add some tactile feedback to your app, making the user’s device
    vibrate.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Vibration API to programmatically vibrate the device.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/G0d6m)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: To perform a single vibration, you can call `navigator.vibrate` with a single
    integer argument (the duration of the vibration), as shown in [Example 14-13](#example14-13).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-13\. Triggering a single vibration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can also trigger a sequence of vibrations by passing an array to `navigator.vibrate`
    (see [Example 14-14](#example14-14)). The elements of the array are interpreted
    as a sequence of vibrations and pauses.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-14\. Vibrating three times
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This API is supported on some devices that don’t vibrate, for example Chrome
    on a MacBook Pro. For these devices, calling `navigator.vibrate` has no effect,
    but it also won’t throw any error.
  prefs: []
  type: TYPE_NORMAL
- en: If a sequence of vibrations is running, you can call `navigator.vibrate(0)`
    to cancel any in-progress vibrations.
  prefs: []
  type: TYPE_NORMAL
- en: Like autoplaying videos, you can’t trigger vibration automatically when the
    page first loads. The user must have interacted with the page in some way before
    vibration can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Device Orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to determine if the device is in portrait or landscape orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `screen.orientation.type` property to get the device orientation, or
    use the `screen.orientation.angle` property to get the device’s orientation angle
    relative to its natural orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`screen.orientation.type` can have one of four values, depending on the device
    and its orientation (see [Figure 14-2](#figure_orientation)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`portrait-primary`: 0 degrees (the natural device position)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portrait-secondary`: 180 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`landscape-primary`: 90 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`landscape-secondary`: 270 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![The different orientation values](assets/wacb_1402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. The different orientation values
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The preceding values are for devices such as phones, whose natural orientation
    is portrait. For other devices whose natural orientation is landscape, like some
    tablets, the values are reversed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`landscape-primary`: 0 degrees (the natural device position)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`landscape-secondary`: 180 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portrait-primary`: 90 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portrait-secondary`: 270 degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `screen.orientation` object also has a `change` event you can listen for
    to be notified of changes in the device orientation.
  prefs: []
  type: TYPE_NORMAL
