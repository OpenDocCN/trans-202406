["```\n<button id=\"runTest\">Run Test</button>\n```", "```\n// Attach button event handler.\ndocument.getElementById('runTest').addEventListener(\"click\", buttonClicked);\n```", "```\n// Runs when a button is clicked\nfunction buttonClicked() {\n  // Trigger the function after 2000 milliseconds (2 seconds)\n  setTimeout(showMessage, 2000);\n}\n\n// Runs when setTimeout() triggers it\nfunction showMessage() {\n  alert('You clicked the button 2 seconds ago');\n}\n```", "```\nfunction buttonClicked() {\n  // Declare a function expression to use with setTimeout()\n  const timeoutCallback = function showMessage() {\n    alert('You clicked the button 2 seconds ago');\n  }\n\n  // Trigger the function after 2000 milliseconds (2 seconds)\n  setTimeout(timeoutCallback, 2000);\n}\n```", "```\nfunction buttonClicked() {\n  // Trigger the function after 2000 milliseconds (2 seconds)\n  setTimeout(function showMessage() {\n    alert('You clicked the button 2 seconds ago');\n  }, 2000);\n}\n```", "```\n  setTimeout(function() {\n    alert('You clicked the button 2 seconds ago');\n  }, 2000);\n```", "```\nfunction buttonClicked() {\n  // Create a function that will handle the callback\n  function logTime(time) {\n    console.log('Logging at: ' + time.toLocaleTimeString());\n  }\n\n  console.log('About to call callYouBack()');\n  callYouBack(logTime);\n  console.log('All finished');\n}\n\nfunction callYouBack(callbackFunction) {\n  console.log('Starting callYouBack()');\n\n  // Call the provided function and supply an argument\n  callbackFunction(new Date());\n\n  console.log('Ending callYouBack()');\n}\n```", "```\nAbout to call callYouBack()\nStarting callYouBack()\nLogging at: 2:20:59 PM\nEnding callYouBack()\nAll finished\n```", "```\nconst numbers = [1,2,3,4,5,6,7,8,9,10];\n\nfunction squareNumber(number) {\n  return number**2;\n}\nconst squares = numbers.map(squareNumber);\n\nconsole.log(squares);\n// Displays [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```", "```\nconst numbers = [1,2,3,4,5,6,7,8,9,10];\nconst squares = numbers.map( number => number**2 );\n\nconsole.log(squares);\n```", "```\n(number) =>\n```", "```\nnumber =>\n```", "```\nnumber => {\n  return number**2;\n}\n```", "```\nnumber => number**2;\n```", "```\nconst myFunc = number => number**2;\n\nconst squaredNumber = myFunc(10);\n// squaredNumber = 100\n```", "```\nfunction raiseToPower(number, power) {\n  return number**power;\n}\n```", "```\nconst myFunc = (number, power) => number**power;\n```", "```\nfunction applyTitleCase(inputString) {\n  // Split the string into an array of words\n  const wordArray = inputString.split(' ');\n\n  // Create a new array that will hold the processed words\n  const processedWordArray = [];\n\n  for (const word of wordArray) {\n    // Capitalize the first letter of this word\n    processedWordArray.push(word[0].toUpperCase() + word.slice(1));\n  }\n\n  // Join the words back into a single string\n  return processedWordArray.join(' ');\n}\n```", "```\nconst myFunc = inputString => {\n  // Split the string into an array of words\n  const wordArray = inputString.split(' ');\n\n  // Create a new array that will hold the processed words\n  const processedWordArray = [];\n\n  for (const word of wordArray) {\n    // Capitalize the first letter of this word\n    processedWordArray.push(word[0].toUpperCase() + word.slice(1));\n  }\n\n  // Join the words back into a single string\n  return processedWordArray.join(' ');\n}\n```", "```\nfunction addNumbers(firstNum, secondNum, thirdNum=0) {\n  return firstNum+secondNum+thirdNum;\n}\n```", "```\nconsole.log(addNumbers(42, 6, 10));  // displays 58\nconsole.log(addNumbers(42, 6));      // displays 48\n```", "```\nfunction addNumbers(firstNum=10, secondNum=20, thirdNum=30, multiplier=1) {\n  return multiplier*(firstNum+secondNum+thirdNum);\n}\n```", "```\nconst sum = addNumbers(42, 10, undefined, 1);\n// sum = 82\n```", "```\nconst sum = addNumbers(42, 10, null, 1);\n// sum = 52\n```", "```\nfunction sumRounds(...numbers) {\n  let sum = 0;\n  for(let i = 0; i < numbers.length; i+=1)  {\n    sum += Math.round(numbers[i]);\n  }\n  return sum;\n}\n\nconsole.log(sumRounds(2.3, 4, 5, 16, 18.1));  // 45\n```", "```\nsomeFunction(arg1, arg2, {optionalArg1: val1, optionalArg2: val2});\n```", "```\nfunction dateDifferenceInSeconds(\n newerDate, olderDate, {discardTime, discardYears, precision} = {}) {\n  if (discardTime) {\n    newerDate = newerDate.setHours(0,0,0,0);\n    olderDate = newerDate.setHours(0,0,0,0);\n  }\n  if (discardYears) {\n    newerDate.setYear(0);\n    olderDate.setYear(0);\n  }\n\n  const differenceInSeconds = (newerDate.getTime() - olderDate.getTime())/1000;\n  return differenceInSeconds.toFixed(precision);\n}\n```", "```\n// Compare the current date to an older date\nconst newDate = new Date();\nconst oldDate = new Date(2010, 1, 10);\n\n// Call the function without an object literal\nlet difference = dateDifferenceInSeconds(newDate, oldDate);\nconsole.log(difference);   // Shows something like 354378086\n\n// Call the function with an object literal, and specify two properties\ndifference = dateDifferenceInSeconds(\n newDate, oldDate, {discardYears:true, precision:2});\nconsole.log(difference);   // Shows something like 7226485.90\n```", "```\n// This works\ndateDifferenceInSeconds(newDate, oldDate, {precision:2});\n\n// This also works\ndateDifferenceInSeconds(newDate, oldDate, {discardYears:true, precision:2});\n\n// This works too\ndateDifferenceInSeconds(newDate, oldDate, {precision:2, discardYears:true});\n```", "```\nfunction dateDifferenceInSeconds(newerDate, olderDate, options) {\n  const precision = options.precision;\n```", "```\nfunction dateDifferenceInSeconds(newerDate, olderDate, options) {\n  const {discardTime, discardYears, precision} = options;\n```", "```\nfunction dateDifferenceInSeconds(\n newerDate, olderDate, {discardTime, discardYears, precision})\n```", "```\nfunction dateDifferenceInSeconds(\n newerDate, olderDate, {discardTime, discardYears, precision} `=` `{``}`)\n```", "```\n  if (discardTime != undefined || discardTime === true) {\n```", "```\n  if (discardTime) {\n```", "```\n// We want discardYears, but we accidentally set discardYear\ndateDifferenceInSeconds(newDate, oldDate, {discardYear:true});\n```", "```\nfunction outerFunction() {\n\n  function innerFunction() {\n    ...\n  }\n\n  return innerFunction;\n}\n```", "```\nfunction greetingMaker(greeting) {\n  function addName(name) {\n    return `${greeting} ${name}`;\n  }\n  return addName;\n}\n\n// Use the outer function to create two copies of the inner function,\n// each with a different value for greeting\nconst daytimeGreeting = greetingMaker('Good Day to you');\nconst nightGreeting = greetingMaker('Good Evening');\n\nconsole.log(daytimeGreeting('Peter'));   // Shows 'Good Day to you Peter'\nconsole.log(nightGreeting('Sally'));     // Shows 'Good Evening Sally'\n```", "```\nfunction createCounter() {\n  // This variable persists as long as the createCounter function reference\n  let count = 0;\n\n  function counter() {\n    count += 1;\n    console.log(count);\n  }\n  return counter;\n}\n\nconst counterFunction = createCounter();\ncounterFunction();  // displays 1\ncounterFunction();  // displays 2\ncounterFunction();  // displays 3\n```", "```\nfunction* generateValues() {\n}\n```", "```\nfunction* generateValues() {\n  yield 895498;\n  yield 'This is the second value';\n  yield 5;\n  return 'This is the end';\n}\n```", "```\nconst generator = generateValues();\n\n// Start the generator (it runs from the beginning to the first yield)\nconsole.log(generator.next().value);  // 895498\n\n// Resume the generator (until the next yield)\nconsole.log(generator.next().value);  // 'This is the second value'\n\n// Get the final two values\nconsole.log(generator.next().value);  // 5\nconsole.log(generator.next().value);  // 'This is the end'\n```", "```\n// Get all the values from the generator\nfor (const value of generateValues()) {\n  console.log(value);\n}\n\n// With spread syntax, you can dump everything into an array in one step\nconst values = [...generateValues()];\n```", "```\nfunction mulberry32(seed) {\n  return function random() {\n    let t = seed += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n}\n\n// Choose a seed\nconst seed = 98345;\n\n// Get a version of mulberry32() that uses this seed:\nconst randomFunction = mulberry32(seed);\n\n// Generate some random numbers\nconsole.log(randomFunction());  // 0.9057375795673579\nconsole.log(randomFunction());  // 0.44091642647981644\nconsole.log(randomFunction());  // 0.7662326360587031\n```", "```\nfunction* mulberry32(seed) {\n  let t = seed += 0x6D2B79F5;\n\n  // Generate numbers indefinitely\n  while(true) {\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    yield ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n}\n\n// Use the same seed to get the same sequence.\nconst seed = 98345;\n\nconst generator = mulberry32(seed);\nconsole.log(generator.next().value);  // 0.9057375795673579\nconsole.log(generator.next().value);  // 0.7620641703251749\nconsole.log(generator.next().value);  // 0.0211441791616380\n```", "```\nfunction makeString(prefix, str, suffix) {\n   return prefix + str + suffix;\n}\n```", "```\nfunction quoteString(str) {\n   return makeString('\"',str,'\"');\n}\n\nfunction barString(str) {\n   return makeString('-', str, '-');\n}\n\nfunction namedEntity(str) {\n   return makeString('&#', str, ';');\n}\n```", "```\nconsole.log(quoteString('apple')); // \"apple\"\nconsole.log(barString('apple'));   // -apple-\nconsole.log(namedEntity(169));     // \"&#169; (the copyright symbol in HTML)\n```", "```\nfunction partial(fn, ...argsToApply) {\n  return function(...restArgsToApply) {\n    return fn(...argsToApply, ...restArgsToApply);\n  }\n}\n```", "```\n// The function you want to partialize\nfunction raiseToPower(exponent, number) {\n  return number**exponent;\n}\n\n// Using partial(), make a customized function\nconst cubeIt = partial(raiseToPower, 3);\n\n// Calculate the cube of 9 (9**3)\nconsole.log(cubeIt(9));  // 729\n```", "```\nfunction partial(fn, ...argsToApply) {\n```", "```\n  // This returns a new anonymous function\n  return function(...restArgsToApply) {\n```", "```\n    // This calls the wrapped function\n    return fn(...argsToApply, ...restArgsToApply);\n```", "```\nfunction makeString(prefix, suffix, str) {\n  return prefix + str + suffix;\n}\n\nconst namedEntity = partial(makeString, \"&#\", \";\");\n\nconsole.log(namedEntity(169));\n```", "```\nfunction makeString(prefix, suffix, str) {\n  return prefix + str + suffix;\n}\n\nconst named = makeString.bind(undefined, \"&#\", \";\");\n\nconsole.log(named(169)); // \"&#169;\"\n```", "```\nwindow.onload = function() {\n  window.name = 'window';\n\n  const newObject = {\n    name: 'object',\n\n    sayGreeting: function() {\n      console.log(`Now this is easy, ${this.name}`);\n\n      const nestedGreeting = function(greeting) {\n        console.log(`${greeting} ${this.name}`);\n        }.bind(this);\n\n      nestedGreeting('hello');\n    }\n  };\n\n  newObject.sayGreeting();\n};\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Using Bind with Timers</title>\n  </head>\n  <body>\n    <div id=\"counterDiv\"></div>\n\n    <script>\n    // This is the constructor function for the Counter object.\n    function Counter(from, to, divElement) {\n      this.currentCount = from;\n      this.finishCount = to;\n      this.element = divElement;\n\n      // The incrementCounter() method updates the page\n      this.incrementCounter = function() {\n        this.currentCount -= 1;\n        this.element.textContent = this.currentCount;\n\n        if (this.currentCount > this.finishCount) {\n          // Schedule this function to run again after 1 second.\n          setTimeout(this.incrementCounter.bind(this), 1000);\n        }\n      };\n\n      this.startCounter = function() {\n        this.incrementCounter();\n      }\n    }\n\n    // Create the counter for this page.\n    const counter = new Counter(10, 0, document.getElementById('counterDiv'));\n\n    // When the page loads, start the counter.\n    window.onload = function() {\n      counter.startCounter();\n    }\n    </script>\n  </body>\n</html>\n```", "```\nsetTimeout(this.incrementCounter, 1000);\n```", "```\nwindow.onload = function() {\n  window.name = 'window';\n\n  const newObject = {\n    name: 'object',\n\n    sayGreeting: function() {\n      const self = this;\n      alert('Now this is easy, ' + this.name);\n      nestedGreeting = function(greeting) {\n        alert(greeting + ' ' + self.name);\n      };\n\n      nestedGreeting('hello');\n    }\n  };\n\n  newObject.sayGreeting('hello');\n};\n```", "```\nf(n)= f(n-1) + f(n-2),\n  for n= 2,3,4,...,n and\n  f(0) = 0 and f(1) = 1\n```", "```\n4! = 4 x 3 x 2 x 1 = 24\n```", "```\nfunction fibonacci(n) {\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n}\n```", "```\nfunction factorial(n) {\n  return n <= 1 ? 1 : n * factorial(n - 1);\n}\n```"]