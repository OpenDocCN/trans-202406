- en: Chapter 11\. User Preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allowing personalization of an app is a great way to help the user experience
    and provide a way for users to tailor an application to suit their needs. Android
    and iOS provide a set of frameworks, along with a set of patterns, in order to
    achieve this goal. There are, of course, heavy-handed and cumbersome technologies
    one could use—and often must—for more complex scenarios. However, most developers
    can get by with reading and writing user preferences in a simple and out-of-the-box
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Write user preferences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read user preferences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Work with user preferences in a multiple user application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, it’s possible to use the filesystem, or a database, to store user
    preferences if you prefer to roll your own, but Android does provide the `SharedPreferences`
    API out of the box. While this API is generally encouraged for constancy, it’s
    not rigorously required or even referenced, and if you find that your requirements
    make other approaches easier for you, feel free.
  prefs: []
  type: TYPE_NORMAL
- en: 'From [the Android developer docs](https://oreil.ly/Bw8Eq):'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t need to store a lot of data and it doesn’t require structure,
    you should use SharedPreferences. The SharedPreferences APIs allow you to read
    and write persistent key-value pairs of primitive data types: booleans, floats,
    ints, longs, and strings.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`SharedPreferences` is not secure by default—values are stored in an XML file
    in the application’s file directory. The framework-provided `KeyStore` API does
    provide some security, but there are issues on older operating systems that may
    complicate that statement. There are third-party libraries that (claim to) provide
    a similar API to that of `SharedPreferences`, with some level of security.'
  prefs: []
  type: TYPE_NORMAL
- en: Whatever its limitations, the `SharedPreferences` API is simple, easy to use,
    and provides built-in background threading, so give it a shot!
  prefs: []
  type: TYPE_NORMAL
- en: Write User Preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To write a key-value pair, we first need a `SharedPreference` object instance—Android
    provides a preconfigured one by calling the method `getSharedPreferences(String
    fileName, Context.MODE_PRIVATE);` from any `Context` instance. Alternatively,
    `Activity` instances have a `getPreferences` method that returns the default preferences
    file and allows you to omit the first parameter (`fileName`).
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, you’ll need an `Editor` instance, which is available by calling
    the `edit` method from that `SharedPreferences` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you can `put` key-value pairs using methods like `putBoolean(String
    key, boolean value)` and `putString(String key, String value)`. When you’re done,
    you can either call `commit` on the `Editor` instance to have the changes saved
    synchronously, or call `apply`, which saves them asynchronously:'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, `SharedPreferences` is meant for simple, primitive values, and
    can only accept basic data types like `boolean`, `int`, `long`, `float`, and `String`,
    although it also can manage a `Set<String>`.
  prefs: []
  type: TYPE_NORMAL
- en: Read User Preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reading a user preference from `SharedPreferences` is even easier than writing—and
    you don’t need the `Editor` instance or need to worry about threading since a
    copy is saved in memory (which also makes it fast).
  prefs: []
  type: TYPE_NORMAL
- en: 'To read back the `boolean` we saved in the preceding example, it’s as simple
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: That’s all there is to it!
  prefs: []
  type: TYPE_NORMAL
- en: Work with User Preferences in a Multiple User Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So this becomes a little trickier. Technically, `SharedPreferences` is meant
    for the entire application—one file, *shared* by anyone who uses the app. However,
    it’s become a relatively common practice to use different `SharedPreference` files
    for different users—you just need to supply unique file names to the getter. It’s
    entirely up to you how you determine that, but it’s conceivable that you might
    just grab a `sha` of their user ID:'
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple ways to store user data in iOS: user defaults, filesystem,
    Core Data, or the Keychain. Often, an application needs to persist bits of information
    that are unique to a particular user, but not necessarily private or secure information.
    The best place for data like this is user defaults—it’s a great place to store
    things like a user’s locale, UI styling preferences, or choices regarding unit
    of measurements a user wants used for displaying data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, iOS (and macOS) provide a battled-tested way to store this data
    at an app level: `UserDefaults`. Let’s dive in!'
  prefs: []
  type: TYPE_NORMAL
- en: Write User Preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can read data, it’s important that we learn to store data first.
    Persisting preferences for users through `UserDefaults` is fairly straightforward.
    Here’s a simple example of how to persist a basic string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, we’re grabbing the shared `UserDefaults` instance, and then we’re pairing
    a string that equals “some string value” to a key named `someKey`. This key is
    what we use for looking up that data, as shown later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What’s happening under the hood
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Within the app folder of every iOS application there is a `Library` folder that
    contains a `Preferences` folder. Under the hood, iOS is creating or updating a
    property list file whenever an application writes a value to `UserDefaults.standard`.
    The individual types stored conform to the `NSCoding` protocol, which allows them
    to be serialized and deserialized. It’s possible to make custom classes conform
    to this protocol as well—more on that later!
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This property list file is updated and managed by `UserDefaults`. It should
    be considered an implementation detail left up to the underlying subsystem as
    it’s possible it could change in a future version of iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Data types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UserDefaults` is capable of storing multiple types of data including booleans,
    numbers, strings, URLs, dictionaries, arrays, and custom objects. Here’s a more
    complex example that demonstrates a wider variety of usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Swift provides a number of convenience methods to pass specific data type values
    into `UserDefault`. Each value is mapped to a `String` key. Using standard Swift
    objects will provide sufficient functionality most of the time. But what about
    those times when you would like to persist a custom class?
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, there is a solution: `NSCoding`.'
  prefs: []
  type: TYPE_NORMAL
- en: NSCoding conformance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Objects that wish to be eligible for persistence with `UserDefault` need to
    conform to the `NSCoding` protocol. This protocol consists of two methods: `init(coder:)`
    and `encode(with:)`. Each of these methods plays a role in the encoding and decoding
    functionality of storing an object. Let’s take a look at a simple example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, we declare an explicit `@objc` name to a class. This is done because
    of the importance of the class name in unarchiving the object. We also declare
    that the class conforms to `NSCoding` conformance. Next, we have a string property
    named `someProperty` that is set in an initializer of the class. Further in the
    class, in the `encode(with:)` method, we use the given `NSCoder` passed into the
    method to encode the `someProperty` value for the key `someProperty`. This is
    the method that is called under the hood whenever we call `set(value:forKey:)`
    on `UserDefaults`.
  prefs: []
  type: TYPE_NORMAL
- en: Later, whenever we need to decode that object, `UserDefaults` instantiates the
    object by calling the `init?(coder:)` initializer. Inside that method, we attempt
    to set each property that’s encoded by first decoding the property for the given
    key and then passing that into our default object initializer. Because we are
    deciding what properties to encode and decode manually, it’s possible to exclude
    certain properties that are initialized based on different data or that get set
    by other objects.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This is a “stringly typed” example that is easy to break if the key names are
    mistyped, or change between versions of your app. There are ways around this using
    enums and some built-in `NSKeyedUnarchiver` functionality like `NSKeyedUnarchiver.setClass(SomeObject.self,
    forClassName: "SomeObject")`.'
  prefs: []
  type: TYPE_NORMAL
- en: Use Codable instead of NSCoding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s possible to skip `NSCoding` conformance for custom objects that need persisting
    in `UserDefaults` and just use `Codable` conformance to encode and decode the
    object as JSON. One of the benefits of using `Codable` over `NSCoding` is that
    you skip the entire Objective-C runtime. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For a given type that conforms to `Codable`, we can encode it using `JSONEncoder`
    and then set the `Data` generated directly to a key (`myObject` in our example).
  prefs: []
  type: TYPE_NORMAL
- en: 'Decoding the JSON is straightforward. It can be accomplished with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First, we grab the object from `UserDefaults` as `Data` (with a force unwrap
    to keep this example simple). Then, we decode it using `JSONDecoder` and explicitly
    declare it as a type of `SomeObject`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s possible that you might create a key and then decide in a future version
    of the app that you no longer want that key around. Deleting a key in `UserDefaults`
    is nothing more than a call like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve written (and deleted) data, let’s take a look at reading it so
    we can use it in our apps!
  prefs: []
  type: TYPE_NORMAL
- en: Read User Preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Reading data from `UserDefaults` can be done with a call like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates an object named `someValue` that holds our data. `UserDefaults`
    unfortunately doesn’t explicitly know what type our data is being decoded to,
    so it defaults to `Any?`. It’s possible, however, to change the method we’re calling
    to get our data slightly with some special-built methods for a set of common types.
    Here’s some code to show a few of these methods in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Iterating through the list of methods called here, we can see `bool(forKey:)`
    returns a `Boolean` type, `double(forKey:)` returns a `Double`, `string(forKey:)`
    returns a `String`, and `url(forKey:)` returns a URL instance. There are some
    other types available, namely, other number types like `Int` and `Float`. Check
    out the [Apple developer docs](https://oreil.ly/uIDX_) for more information on
    the types available for decoding for `UserDefaults`.
  prefs: []
  type: TYPE_NORMAL
- en: 'That being said, there is one type conspicuously missing: the `SomeObject`
    class type we declared earlier in the chapter! In order to get a `SomeObject`
    returned, we need to use the `object(forKey:)` method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we explicitly cast the object returned by `UserDefaults` to `SomeObject`.
    This can be skipped if there aren’t explicit type requirements and `Any?` will
    suffice.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve only talked about how to store data for a single user. Let’s talk
    about multiple users using your app and how we manage them in `UserDefaults`.
  prefs: []
  type: TYPE_NORMAL
- en: Work with User Preferences in a Multiple User Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unfortunately, this is not a piece of out-of-the-box functionality provided
    by iOS, despite some tantalizingly close functionality available for macOS. That
    being said, it’s possible to work through this by storing user preferences in
    a separate file and restoring whenever it’s necessary to switch users. Here’s
    an example of how this might be accomplished:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s walk through what’s happening.
  prefs: []
  type: TYPE_NORMAL
- en: First, we get a `Dictionary` representation of our `UserDefaults` data. This
    is used to back up our existing user’s data. Let’s call this user “User 1.” We
    take that dictionary and use `NSKeyedArchiver` to transform that dictionary into
    a `Data` instance that can then be written to a shared area of the app, most likely
    inside the app’s *Library/Preferences* folder, but that is an exercise left to
    the reader. In our example, we store it to a file path of *user1.plist*.
  prefs: []
  type: TYPE_NORMAL
- en: Going further in the code, we iterate through each key inside the dictionary
    and then call `removeObject(forKey:)` on `UserDefaults` to clear out all that
    data from `UserDefaults`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it’s time to start using the new user’s data; let’s call this user
    “User 2.” User 2 has a preferences file stored at *user2.plist*, so we take that
    file’s `Data` representation, pass it to `NSKeyedUnarchiver`, and decode it to
    a dictionary object as `[String: Any]`, which is the same type that it was originally
    written from. To add the data to `UserDefaults`, we iterate over each key in our
    new dictionary and manually set it to `UserDefaults` directly.'
  prefs: []
  type: TYPE_NORMAL
- en: This is not the cleanest, simplest process, but it works. Future versions of
    iOS could offer support for multiple user accounts. For now, this solution is
    workable. It’s possible that a large user preferences list could take some time
    to write. Thankfully, `UserDefaults` is thread-safe, so all this work could easily
    be done in a background thread.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are few things to take away from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an out-of-the-box technology provided by the operating system is a great
    way to get started storing user preferences. In fact, it’s possible to build powerful
    systems and processes that apps can follow just using this approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both Android and iOS have similar approaches to storing and reading back user
    preferences. Android uses `SharedPreferences`, and iOS uses `UserDefaults`. The
    both provide a key-value store in which to save data between sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve talked mostly about storing data on-device with regards to user preferences.
    There are other standard formats, such as XML and JSON, that both platforms have
    excellent support for as well. Let’s learn about more advanced serialization of
    data in the next chapter on serialization and transports.
  prefs: []
  type: TYPE_NORMAL
