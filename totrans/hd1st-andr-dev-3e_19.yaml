- en: 'Chapter 16\. Diffutil and Data Binding: *Life in the Fast Lane*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0671-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Your app needs to run as smoothly and efficiently as possible.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you’re not careful, large or complex data sets can cause your recycler
    view to glitch. In this chapter, we’ll introduce you to ***DiffUtil***: a utility
    class that **adds extra smarts to your recycler view**. You’ll find out how to
    use it to **make efficient updates** to your recycler view. You’ll discover how
    ***ListAdapters* make using *DiffUtil* a breeze**. And along the way, you’ll learn
    **how to get rid of *findViewById()* for good** by implementing **data binding
    in your recycler view code**.'
  prefs: []
  type: TYPE_NORMAL
- en: The recycler view displays task data correctly…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we added a recycler view to the Tasks app that displays
    its data exactly how we want it to. Each task is shown in a separate card, and
    each card displays the task name and whether it has been completed. The cards
    are then laid out in a two-column grid like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0672-01.png)'
  prefs: []
  type: TYPE_IMG
- en: …but when the data’s updated, the recycler view jumps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each time we add a new task, the recycler view gets redrawn so that it includes
    the new record and stays up-to-date. When it does this, however, the recycler
    view jumps and it’s not very smooth.
  prefs: []
  type: TYPE_NORMAL
- en: Each time the recycler view needs to be updated, *its entire list gets redrawn*.
    There are no smooth transitions to indicate what’s changed, and if the list is
    very long, the user might lose her place. It’s also inefficient for large data
    sets, and can lead to performance problems.
  prefs: []
  type: TYPE_NORMAL
- en: Before we solve these problems, let’s have a quick reminder of how the Tasks
    app is structured.
  prefs: []
  type: TYPE_NORMAL
- en: The Tasks app revisited
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’re sure you remember, the Tasks app lets the user enter task records,
    which are stored in a Room database. It includes a recycler view, which displays
    all of the records that have been entered.
  prefs: []
  type: TYPE_NORMAL
- en: The app’s main screen is defined by a fragment named `TasksFragment`, which
    uses a view model named `TasksViewModel`. Its layout—*fragment_tasks.xml*—includes
    a recycler view that displays a grid of tasks. The recycler view uses an adapter
    named `TaskItemAdapter`, and its items are arranged using the *task_item.xml*
    layout file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how these parts of the app fit together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0673-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to fix `TasksFragment`’s recycler view so that it no longer jumps when
    a new record gets added. In order to do this, let’s revisit how the recycler view’s
    data gets set.
  prefs: []
  type: TYPE_NORMAL
- en: How the recycler view gets its data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen each time the recycler view’s data needs to be
    updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TasksFragment is notified when a record is added to the database.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This happens because it observes `TasksViewModel`’s `tasks` property: a `LiveData<List<Task>>`
    that gets its data from the database.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0674-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment sets TaskItemAdapter’s data property, which holds the recycler
    view’s data.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It sets it to a new `List<Task>` (that it gets from the `tasks` property) that
    includes the latest record changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0674-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter tells the recycler view that the data has changed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The recycler view responds by redrawing and rebinding each item in the list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0674-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The data property’s setter calls notifyDataSetChanged()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recycler view redraws and rebinds its entire list because of the setter,
    which we added to `TaskItemAdapter`’s `data` property. Here’s a reminder of the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0675-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The setter gets called each time the `data` property needs to be updated. As
    you can see, it sets the `data` property to the new value, and then calls `notifyDataSetChanged()`.
    This method tells any observers—including the recycler view—that the data set
    has changed, so the recycler view is redrawn to include the latest changes.
  prefs: []
  type: TYPE_NORMAL
- en: notifyDataSetChanged() redraws the entire list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `notifyDataSetChanged()`, however, is problematic. Each time it’s called,
    it tells the recycler view that the `data` property is out of date in some way,
    *without specifying how*. As the recycler view doesn’t know what’s changed, it
    responds by **rebinding and redrawing every item in its list**.
  prefs: []
  type: TYPE_NORMAL
- en: When the entire recycler view rebinds and redraws its items in this way, it
    loses track of the user’s position in the list. If the list contains more than
    a few records, this can cause the list to jump.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also inefficient for large data sets. If the recycler view contains many
    items, rebinding and redrawing each item is a lot of unnecessary work and can
    lead to performance problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Each time notifyDataSetChanged() gets called, the recycler view rebinds and
    redraws its entire list. This is inefficient, particularly for large data sets.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tell the recycler view what needs to change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A more efficient alternative to calling `notifyDataSetChanged()` is to tell
    the recycler which items in the list have changed so that it only updates those
    items. If a new task record gets added to the database, for example, it’s more
    efficient for the recycler view to just add that item than it is to rebind and
    redraw the entire list.
  prefs: []
  type: TYPE_NORMAL
- en: Manually working out these differences can be tricky and require a lot of code.
    The good news, however, is that the recycler view library includes a utility class
    named `**DiffUtil**` that takes care of all this hard work for you.
  prefs: []
  type: TYPE_NORMAL
- en: DiffUtil works out differences between lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DiffUtil` class specializes in finding out what the differences are between
    two lists so that you don’t have to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each time an adapter is given a new version of the list its recycler view uses,
    `DiffUtil` compares it with the old version. It figures out what items have been
    added, removed, or updated, and it then tells the recycler view what needs to
    be changed in the most efficient way possible:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To be precise, it works out what the changes are using Eugene W. Myers’s clever
    difference algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0676-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As the recycler view no longer needs to redraw and rebind its entire list, using
    `DiffUtil` is a much more efficient way of updating a recycler view’s data. It
    also means that the user doesn’t lose her place in the list, and the recycler
    view can even provide smooth transition animations to make it clear what changes
    there have been.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0676-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’re going to make improvements to the Tasks app’s recycler
    view so that it uses `DiffUtil` and populates its views using data binding. These
    changes will make the recycler view more efficient, and improve the user’s experience
    of it too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps we’ll take:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Make the recycler view use DiffUtil.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll create a new class named `TaskDiffItemCallback` that uses `DiffUtil` to
    compare items in a list. We’ll then update the `TaskItemAdapter` code so that
    it uses this new class. These changes will make the recycler view more efficient,
    and give the user a smoother experience when they use it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0677-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Implement data binding in the recycler view’s layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll remove the calls to `findViewById()` in the `TaskItemAdapter` code, and
    populate each item’s views using data binding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0677-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We’ll begin by making the recycler view use `DiffUtil`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0677-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to implement DiffUtil.ItemCallback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0678-01.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to use `DiffUtil` with the Tasks app’s recycler view, we need to create
    a new class (which we’ll name `TaskDiffItemCallback`) that implements the `**DiffUtil.ItemCallback**`
    abstract class. This class is used to calculate the difference between two non-null
    items in a list, and will help make the recycler view more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you implement `DiffUtil.ItemCallback`, you first need to specify the type
    of objects it works with. This is done using generics like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0678-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You also need to override two methods: `areItemsTheSame()` and `areContentsTheSame()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**areItemsTheSame()**` is used to check whether two objects that are passed
    to it refer to the same *item*. We’ll implement it using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0678-03.png)'
  prefs: []
  type: TYPE_IMG
- en: so that if both objects have the same `taskId`, it means they refer to the same
    item, and the method returns *true*.
  prefs: []
  type: TYPE_NORMAL
- en: '`**areContentsTheSame()**` is used to check whether the two objects have the
    same *contents*, and it’s only called if `areItemsTheSame()` is *true*. As `Task`
    is a data class, we can implement this method using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0678-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Create TaskDiffItemCallback.kt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create the new class, highlight the *com.hfad.tasks* package in the *app/src/main/java*
    folder, then go to File→New→Kotlin Class/File. Name the file “TaskDiffItemCallback”
    and choose the Class option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created the file, update its code so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0678-05.png)'
  prefs: []
  type: TYPE_IMG
- en: A ListAdapter accepts a DiffUtil.ItemCallback argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve defined `TaskDiffItemCallback`, we need to use it in the adapter
    code. To do this, we’ll update `TaskItemAdapter` so that it extends the `**ListAdapter**`
    class instead of `RecyclerView.Adapter`.
  prefs: []
  type: TYPE_NORMAL
- en: '`ListAdapter` is a type of `RecyclerView.Adapter` that’s designed to work with
    lists. It provides its own backing list so that you don’t have to define your
    own, and it accepts a `DiffUtil.ItemCallback` in its constructor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to specify that `TaskItemAdapter` is a type of `ListAdapter` that
    provides its own `List<Task>`, and we’ll pass it an instance of `TaskDiffItemCallback`.
    Here’s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A ListAdapter is a type of RecyclerView.Adapter that provides its own backing
    list. It works well with DiffUtil.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](Images/f0679-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We can simplify the rest of TaskItemAdapter’s code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once `TaskItemAdapter` has been changed to extend `ListAdapter`, we can remove
    its `List<Task> data` property, along with its setter. This property is no longer
    needed because `ListAdapter`s come with their own backing list, so you don’t need
    to define your own.
  prefs: []
  type: TYPE_NORMAL
- en: We can also delete `TaskItemAdapter`’s `getItemCount()` method. This was needed
    when the adapter extended `RecyclerView.Adapter`, but `ListAdapter` provides its
    own implementation, so it’s no longer required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to update the adapter’s `onBindViewHolder()` method so that
    instead of using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'to get the item at a certain position from the `data` property, it uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This gets the item at the specified position from the adapter’s backing list.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll show you all of the code for this on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The updated code for TaskItemAdapter.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated `TaskItemAdapter` code; update the code in *TaskItemAdapter.kt*
    to include all the changes shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0680-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Populate the ListAdapter’s list…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final thing that we need to do is pass a list of `Task` records to `TaskItemAdapter`’s
    backing list.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we did this by making `TasksFragment` observe `TasksViewModel`’s
    `tasks` property. Each time the property changes, the fragment updates the `TaskItemAdapter`’s
    `data` property to the `tasks` property’s new value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of the code we used to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0681-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that the adapter uses a backing list instead of the `data` property, we
    need to use a slightly different approach.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0681-03.png)'
  prefs: []
  type: TYPE_IMG
- en: …using submitList()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To pass a list of tasks to `TaskItemAdapter`’s backing list, we’ll use a method
    called `submitList()`. This method is used to update a `ListAdapter`’s backing
    list with a new `List` object, so it’s perfect for this situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the new code that we need to add to `TasksFragment` (in bold), which
    we’ll add on the next page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0681-04.png)'
  prefs: []
  type: TYPE_IMG
- en: When the adapter receives the new list, it uses the `TaskDiffItemCallback` class
    to compare it with the old version. It then updates the recycler view with the
    differences instead of replacing the entire list. This approach is more efficient,
    and leads to a much smoother user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see what the updated `TasksFragment` code looks like.
  prefs: []
  type: TYPE_NORMAL
- en: The updated code for TasksFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated `TasksFragment` code; update the code in *TasksFragment.kt*
    to include all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0682-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s run through what happens when the app runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When the app launches, MainActivity displays TasksFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TasksFragment` uses `TasksViewModel` as its view model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0683-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0683-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment observes TasksViewModel’s tasks property.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This property is a `LiveData<List<Task>>` that holds an up-to-date list of records
    from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0683-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Each time the tasks property gets a new value, TasksFragment submits its
    List<Task> to the TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0684-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter uses TaskDiffItemCallback to compare its old data with the
    new.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses `TaskDiffItemCallback`’s `areItemsTheSame()` and `areContentsTheSame()`
    methods to figure out what’s changed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0684-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter tells the recycler view what’s changed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The recycler view rebinds and redraws the necessary items.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0684-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment` displays a grid of cards in the recycler
    view as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter a new task name and click on the button, a new task card is added
    to the recycler view, and the existing cards shuffle along to accommodate it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0685-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The recycler view behaves in this way because we’re using `DiffUtil` to submit
    changes to it, instead of replacing the entire list.
  prefs: []
  type: TYPE_NORMAL
- en: BE the ListAdapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A recycler view’s ListAdapter class has a backing list of Drinks. It uses
    the Drink class shown on the right. Your job is to play like you’re the ListAdapter,
    and say if the ItemCallback classes below will correctly spot any changes when
    the ListAdapter is given a new list. Why? Why not?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0686-01.png)![image](Images/f0686-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr.png) **Answers in [“BE the ListAdapter Solution”](#be_the_listadapter_solution).**'
  prefs: []
  type: TYPE_NORMAL
- en: Recycler views can use data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0687-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Another way in which we can improve the Tasks app’s recycler view is to make
    it use data binding.
  prefs: []
  type: TYPE_NORMAL
- en: As you may recall, `TaskItemAdapter`’s `TaskItemViewHolder` inner class uses
    `findViewById()` to get a reference to the views for each item in the recycler
    view. The view holder’s `bind()` method then uses these references to add data
    to each view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0687-02.png)'
  prefs: []
  type: TYPE_IMG
- en: If we change the recycler view to use data binding, we can remove the calls
    to `findViewById()`, and make each view fetch its own data.
  prefs: []
  type: TYPE_NORMAL
- en: How we’ll implement data binding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll make the recycler view use data binding in a similar way to how it’s
    implemented with fragments. We’ll go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add a data binding variable to task_item.xml.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll add a `<layout>` element to the layout’s root, and create a data binding
    variable named `task` whose type is `Task`. This will generate a binding class
    named `TaskItemBinding`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Set the data binding variable in TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll use `TaskItemBinding` to inflate each item’s layout, and set its data
    binding variable to the `Task` object for that item.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Use the data binding variable to set the views data.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we’ll update *task_item.xml* so that each view fetches its data from
    the layout’s `Task` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0687-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s begin by defining the data binding variable.
  prefs: []
  type: TYPE_NORMAL
- en: Add a data binding variable to task_item.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll begin by adding a `<layout>` element to *task_item.xml*’s root, and specifying
    a data binding variable. Instead of using it to bind views to a view model, however,
    we’ll specify that its type is `Task`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to do this: update *task_item.xml* to include these changes
    (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0688-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Making *task_item.xml*’s root element a `<layout>` tells Android that you want
    to use data binding with it, so it generates a new binding class named `TaskItemBinding`.
    We’ll use this class to inflate the above layout, and set its `task` data binding
    variable to a `Task` object.
  prefs: []
  type: TYPE_NORMAL
- en: The layout gets inflated in the adapter’s view holder code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we first created the recycler view, we inflated the layout file *task_item.xml*
    in `TaskItemAdapter`’s `TaskItemViewHolder` inner class. We now need to change
    this code so that it works with the binding class `TaskItemBinding`. Before we
    begin, here’s a reminder of the current code.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0689-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Use the binding class to inflate the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first change that we’ll make to `TaskItemViewHolder` is to inflate *task_item.xml*
    using the `TaskItemBinding` class. We’ll do this in the view holder’s `inflateFrom()`
    method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0690-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that we’re now passing the `binding` variable—a `TaskItemBinding` object—to
    `TaskItemViewHolder`’s constructor. This means that we also need to update `TaskItemViewHolder`’s
    class definition so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0690-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Set the layout’s data binding variable to a Task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve used the `TaskItemBinding` class to inflate *task_item.xml*,
    we can use it to set the `task` data binding variable. To do this, we’ll change
    `TaskItemViewHolder`’s `bind()` method so that it sets `task` to the recycler
    view’s current `Task` item like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0690-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve removed the lines that set the layout’s `task_name` and `task_done` views
    because with data binding, these are no longer needed. This means we can also
    remove the `taskName` and `taskDone` properties from the view holder.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0690-05.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you the full code for `TaskItemAdapter` (including its `TaskItemViewHolder`
    inner class) on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TaskItemAdapter.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated `TaskItemAdapter` code; make sure that the code in *TaskItemAdapter.kt*
    includes all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0691-02.png)![image](Images/f0692-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Use data binding to set the layout’s views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve set *task_item.xml*’s `task` data binding variable to the view
    holder’s `Task` item, we can use data binding to populate the layout’s views.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0692-03a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You’re already familiar with the code to do this. To set the `task_name` view’s
    text to the name of the task, for example, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0692-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and to set the `task_done` checkbox, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0692-05.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you the full code on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for task_item.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *task_item.xml*; update the code for this file
    so that it includes all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0693-02.png)![image](Images/f0694-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s go through what happens when the code runs, and take it for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**task_item.xml defines a Task data binding variable named task.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As *task_item.xml* has a `<layout>` element at its root, a binding class named
    `TaskItemBinding` is generated for this layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0695-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0695-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment submits a List<Task> to the TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `List<Task>` contains an up-to-date list of records from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0695-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onCreateViewHolder() method is called for each item that
    needs to be displayed in the recycler view.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`onCreateViewHolder()` calls `TaskItemViewHolder.inflateFrom()`, which creates
    a `TaskItemBinding` object. It inflates the object’s layout, and uses it to create
    a `TaskItemViewHolder`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0696-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onBindViewHolder() method is called for each TaskItemViewHolder.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This calls the `TaskItemViewHolder`’s `bind()` method, which uses the `TaskItemBinding`
    object to set the layout’s `task` variable to the item’s `Task`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0696-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Data binding code in task_item.xml uses the task property to set the views
    for each item.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `task_name` view’s `text` property is set to `task.taskName`, and the `task_done`
    view’s `checked` property is set to `task.taskDone`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0696-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment` displays a grid of cards in the recycler
    view. It behaves in the same way as before, but this time, we’re using data binding.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0697-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to implement data binding with a recycler
    view, as well as how to utilize `DiffUtil`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll build on this knowledge to make the recycler view
    navigate to individual records.
  prefs: []
  type: TYPE_NORMAL
- en: Adapter Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Bits and Pizzas app includes a recycler view that uses a layout named *pizza_item.xml*
    for its items. The layout defines a data binding variable (named `pizza`) like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The recycler view uses an adapter named `PizzaAdapter`, shown below. See if
    you can complete the code for this adapter so that it sets the layout’s `pizza`
    data binding variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0699-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Adapter Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Bits and Pizzas app includes a recycler view that uses a layout named *pizza_item.xml*
    for its items. The layout defines a data binding variable (named `pizza`) like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The recycler view uses an adapter named `PizzaAdapter`, shown below. See if
    you can complete the code for this adapter so that it sets the layout’s `pizza`
    data binding variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0700-01.png)![image](Images/f0701-01.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the ListAdapter Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A recycler view’s ListAdapter class has a backing list of Drinks. It uses
    the Drink class shown on the right. Your job is to play like you’re the ListAdapter,
    and say if the ItemCallback classes below will correctly spot any changes when
    the ListAdapter is given a new list. Why? Why not?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0702-01.png)![image](Images/f0702-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 16](#diffutil_and_data_bindingcolon_life_in_t) under
    your belt and now you’ve added DiffUtil and recycler view data binding to your
    toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0703-01.png)'
  prefs: []
  type: TYPE_IMG
