["```\nprocess.env.NODE_ENV\n```", "```\n$ NODE_ENV=development node index.js\n```", "```\n$ npm install dotenv --save\n```", "```\nrequire('dotenv').config();\n```", "```\nPORT=8080\nDB_URI=mongodb://mongodb0.example.com:27017\nKEY=12345\n\n```", "```\nconst port = process.env.PORT || 8080;\n```", "```\nrequire('dotenv').config();\n```", "```\nrequire('dotenv').config({ path: '/alternate/file/path/.env' })\n```", "```\nimport dotenv from 'dotenv'\n\ndotenv.config()\n```", "```\nif (process.env.NODE_ENV !== 'production') {\n  require('dotenv').config();\n}\n```", "```\nconst fs = require('fs');\nconst { promisify } = require('util');\n\nconst readFile = promisify(fs.readFile);\nconst appendFile = promisify(fs.appendFile);\n\nconst readAppend = async (originalFile, secondaryFile) => {\n  const fileData = await readFile(originalFile);\n  await appendFile(secondaryFile, fileData);\n  console.log(\n    `The data from ${originalFile} was appended to ${secondaryFile}!`\n  );\n};\n\nreadAppend('./files/main.txt', './files/secondary.txt');\n```", "```\nconst fsp = require('fs').promises;\n\nconst readAppend = async (originalFile, secondaryFile) => {\n  const fileData = await fsp.readFile(originalFile);\n  await fsp.appendFile(secondaryFile, fileData);\n  console.log(\n    `The data from ${originalFile} was appended to ${secondaryFile}!`\n  );\n};\n\nreadAppend('./files/main.txt', './files/tertiary.txt');\n```", "```\nfs.readFile(file, (error, data) => {\n  if (error) {\n    // handle error\n  } else {\n    // execute an operation after the file is read\n  }\n});\n```", "```\nconst waitOne = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log('It has been one second');\n      resolve();\n    }, 1000);\n  });\n};\n\nconst callWait = async () => {\n  await waitOne();\n};\n\ncallWait();\n```", "```\nconst fs = require('fs');\nconst { promisify } = require('util');\n\nconst writeFile = promisify(fs.writeFile);\n```", "```\ntry {\n  await writeFile(file, buf);\n} catch (error) {\n  console.log(error);\n  throw error;\n}\n```", "```\nconst fs = require('fs');\n\nconst callbackHell = file => {\n  const buf = Buffer.from('Callback hell first string\\n');\n  const buf2 = Buffer.from('Callback hell second string\\n');\n\n  // write or append the contents of the first buffer\n  fs.writeFile(file, buf, err => {\n    if (err) {\n      console.log(err);\n      throw err;\n    }\n    // append the contents of the second buffer\n    fs.appendFile(file, buf2, err2 => {\n      if (err2) {\n        console.log(err2);\n        throw err2;\n      }\n      // log the contents of the file\n      fs.readFile(file, 'utf-8', (err3, data) => {\n        if (err3) {\n          console.log(err3);\n          throw err3;\n        }\n        console.log(data);\n      });\n    });\n  });\n};\n\ncallbackHell('./files/callback.txt');\n```", "```\nconst fs = require('fs');\nconst { promisify } = require('util');\n\nconst writeFile = promisify(fs.writeFile);\nconst appendFile = promisify(fs.appendFile);\nconst readFile = promisify(fs.readFile);\n\nconst fileWriteRead2 = async file => {\n  const buf = Buffer.from('The first string\\n');\n  const buf2 = Buffer.from('The second string\\n');\n\n  // write or append the contents of the first buffer\n  try {\n    await writeFile(file, buf);\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n\n  // append the contents of the second buffer\n  try {\n    await appendFile(file, buf2);\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n\n  // log the contents of the file\n  console.log(await readFile(file, 'utf8'));\n};\n\nfileWriteRead2('./files/async.txt');\n```", "```\nconst { spawn } = require('child_process');\n\nconst identify = spawn('identify', ['-verbose', 'osprey.jpg']);\n\nidentify.stdout.on('data', data => {\n  console.log(`stdout: ${data}`);\n});\n\nidentify.stderr.on('data', data => {\n  console.log(`stderr: ${data}`);\n});\n\nidentify.on('exit', code => {\n  console.log(`child process exited with code ${code}`);\n});\n```", "```\nidentify.stdout.on('data', (data) => {\n    console.log(data.toString().split(\"\\n\"));\n});\n```", "```\nconst { spawn } = require('child_process');\n\nconst cmd = spawn('cmd', ['/c', 'dir\\n']);\n\ncmd.stdout.on('data', data => {\n  console.log(`stdout: ${data}`);\n});\n\ncmd.stderr.on('data', data => {\n  console.log(`stderr: ${data}`);\n});\n\ncmd.on('exit', code => {\n  console.log(`child process exited with code ${code}`);\n});\n```", "```\nprocess.argv.forEach((value, index) => {\n  console.log(`${index}: ${value}`);\n});\n```", "```\n$ node index.js --name=Adam --food=pizza\n```", "```\n0: /usr/local/bin/node\n1: /Users/ascott/Projects/command-line-args/index.js\n2: --name=Adam\n3: --food=pizza\n```", "```\nconst yargs = require('yargs/yargs');\nconst { hideBin } = require('yargs/helpers');\n\nconst {argv} = yargs(hideBin(process.argv));\n\nconsole.log(argv);\n```", "```\n$ node index.js --name=Adam --food=pizza\n# logs the following:\n{ _: [], name: 'Adam', food: 'pizza', '$0': 'yargs/index.js' }\n\n```", "```\nconst yargs = require('yargs/yargs');\nconst { hideBin } = require('yargs/helpers');\n\nconst {argv} = yargs(hideBin(process.argv));\n\nif (argv.food === 'pizza') {\n  console.log('mmm');\n}\n```", "```\n#!/usr/bin/env node\n```", "```\n#!/usr/bin/env node\nconst program = require('commander');\n\nprogram\n  .version('0.0.1')\n  .option('-n, --number <value>', 'A number to square')\n  .parse(process.argv);\n\nconst square = Math.pow(program.number, 2);\n\nconsole.log(`The square of ${program.number} is ${square}`);\n```", "```\n#!/usr/bin/env node\n```", "```\n$ chmod a+x square.js\n```", "```\n$ ./square.js -n 4\n```", "```\n#!/usr/bin/env node\nconst program = require('commander');\nconst puppeteer = require('puppeteer');\n\nprogram\n  .version('0.0.1')\n  .option('-s, --source [website]', 'Source website')\n  .option('-f, --file [filename]', 'Filename')\n  .parse(process.argv);\n\n(async () => {\n  console.log('capturing screenshot...');\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto(program.source);\n  await page.screenshot({ path: program.file });\n  await browser.close();\n  console.log(`captured screenshot at ${program.file}`);\n})();\n```", "```\n\"main\": \"snapshot.js\",\n\"preferGlobal\": true,\n\"bin\": {\n  \"snapshot\": \"snapshot.js\"\n},\n```", "```\n$ snapshot -s http://oreilly.com -f test.png\n```", "```\n$ snapshot --source http://oreilly.com --file test.png\n```", "```\n  Usage: snapshot [options]\n\n  Options:\n\n    -h, --help              output usage information\n    -V, --version           output the version number\n    -s, --source [website]  Source website\n    -f, --file [filename]   Filename\n```", "```\n$ snapshot -V\n```", "```\n$ npm publish\n```", "```\n$ pm2 start index.js\n```", "```\n$ sudo npm install pm2 -g\n```", "```\n$ pm2 start index.js\n```", "```\n$ pm2 start  -l forever.log -o out.log -e err.log -n app_name index.js --watch\n```", "```\n\"scripts\": {\n    \"start\": \"pm2 start index.js\",\n}\n```", "```\n$ npm install -g nodemon\n```", "```\n$ nodemon index.js\n```", "```\n$ nodemon index.js -- -param1 -param2\n```", "```\n[nodemon] 2.0.2\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching dir(s): *.*\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node index.js`\nListening on port 8124\n```", "```\n[nodemon] restarting due to changes...\n[nodemon] starting `node index.js`\nServer running on 8124/\n```", "```\n{\n  \"nodemonConfig\": {\n    \"verbose\": true,\n    \"ignore\": [\"__tests__/*\", \"docs/*\"],\n  }\n}\n```", "```\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Log to the console every minute');\n});\n```", "```\n$ npm install node-cron\n```", "```\nconst cron = require('node-cron');\n\ncron.schedule('5 0 1 * *', () => {\n  console.log('It is the first of the month!');\n});\n```", "```\nconst cron = require('node-cron');\n\ncron.schedule('0 0 * 6-9 1-5', () => {\n  console.log('Summer workdays');\n});\n```", "```\nvar cron = require('node-cron');\n\ncron.schedule('0 0 * * *', () => {\n  console.log('Running a job at midnight ');\n}, {\n  scheduled: true,\n  timezone: \"America/New_York\"\n});\n```", "```\n$ npm install -g loadtest\n```", "```\n$ loadtest -c 10 --rps 200 http://mysite.com/\n```", "```\n$ npm install -g thor\n$ thor --amount 5000 ws://shelleystoybox.com:8001\n```"]