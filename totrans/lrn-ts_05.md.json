["```\nconst poet = {\n    born: 1935,\n    name: \"Mary Oliver\",\n};\n\npoet['born']; // Type: number\npoet.name; // Type: string\n\npoet.end;\n//   ~~~\n// Error: Property 'end' does not exist on\n// type '{ name: string; start: number; }'.\n```", "```\nlet poetLater: {\n    born: number;\n    name: string;\n};\n\n// Ok\npoetLater = {\n    born: 1935,\n    name: \"Mary Oliver\",\n};\n\npoetLater = \"Sappho\";\n// Error: Type 'string' is not assignable to\n// type '{ born: number; name: string; }'\n```", "```\ntype Poet = {\n    born: number;\n    name: string;\n};\n\nlet poetLater: Poet;\n\n// Ok\npoetLater = {\n    born: 1935,\n    name: \"Sara Teasdale\",\n};\n\npoetLater = \"Emily Dickinson\";\n// Error: Type 'string' is not assignable to 'Poet'.\n```", "```\ntype WithFirstName = {\n  firstName: string;\n};\n\ntype WithLastName = {\n  lastName: string;\n};\n\nconst hasBoth = {\n  firstName: \"Lucille\",\n  lastName: \"Clifton\",\n};\n\n// Ok: `hasBoth` contains a `firstName` property of type `string`\nlet withFirstName: WithFirstName = hasBoth;\n\n// Ok: `hasBoth` contains a `lastName` property of type `string`\nlet withLastName: WithLastName = hasBoth;\n```", "```\ntype FirstAndLastNames = {\n  first: string;\n  last: string;\n};\n\n// Ok\nconst hasBoth: FirstAndLastNames = {\n  first: \"Sarojini\",\n  last: \"Naidu\",\n};\n\nconst hasOnlyOne: FirstAndLastNames = {\n  first: \"Sappho\"\n};\n// Property 'last' is missing in type '{ first: string; }'\n// but required in type 'FirstAndLastNames'.\n```", "```\ntype TimeRange = {\n  start: Date;\n};\n\nconst hasStartString: TimeRange = {\n  start: \"1879-02-13\",\n  // Error: Type 'string' is not assignable to type 'Date'.\n};\n```", "```\ntype Poet = {\n    born: number;\n    name: string;\n}\n\n// Ok: all fields match what's expected in Poet\nconst poetMatch: Poet = {\n  born: 1928,\n  name: \"Maya Angelou\"\n};\n\nconst extraProperty: Poet = {\n    activity: \"walking\",\n    born: 1935,\n    name: \"Mary Oliver\",\n};\n// Error: Type '{ activity: string; born: number; name: string; }'\n// is not assignable to type 'Poet'.\n//   Object literal may only specify known properties,\n//   and 'activity' does not exist in type 'Poet'.\n```", "```\nconst existingObject = {\n    activity: \"walking\",\n    born: 1935,\n    name: \"Mary Oliver\",\n};\n\nconst extraPropertyButOk: Poet = existingObject; // Ok\n```", "```\ntype Poem = {\n    author: {\n        firstName: string;\n        lastName: string;\n    };\n    name: string;\n};\n\n// Ok\nconst poemMatch: Poem = {\n    author: {\n        firstName: \"Sylvia\",\n        lastName: \"Plath\",\n    },\n    name: \"Lady Lazarus\",\n};\n\nconst poemMismatch: Poem = {\n    author: {\n        name: \"Sylvia Plath\",\n    },\n    // Error: Type '{ name: string; }' is not assignable\n    // to type '{ firstName: string; lastName: string; }'.\n    //   Object literal may only specify known properties, and 'name'\n    //   does not exist in type '{ firstName: string; lastName: string; }'.\n    name: \"Tulips\",\n};\n```", "```\ntype Author = {\n    firstName: string;\n    lastName: string;\n};\n\ntype Poem = {\n    author: Author;\n    name: string;\n};\n\nconst poemMismatch: Poem = {\n    author: {\n        name: \"Sylvia Plath\",\n    },\n    // Error: Type '{ name: string; }' is not assignable to type 'Author'.\n    //     Object literal may only specify known properties,\n    //     and 'name' does not exist in type 'Author'.\n    name: \"Tulips\",\n};\n```", "```\ntype Book = {\n  author?: string;\n  pages: number;\n};\n\n// Ok\nconst ok: Book = {\n    author: \"Rita Dove\",\n    pages: 80,\n};\n\nconst missing: Book = {\n    author: \"Rita Dove\",\n};\n// Error: Property 'pages' is missing in type\n// '{ author: string; }' but required in type 'Book'.\n```", "```\ntype Writers = {\n  author: string | undefined;\n  editor?: string;\n};\n\n// Ok: author is provided as undefined\nconst hasRequired: Writers = {\n  author: undefined,\n};\n\nconst missingRequired: Writers = {};\n//    ~~~~~~~~~~~~~~~\n// Error: Property 'author' is missing in type\n// '{}' but required in type 'Writers'.\n```", "```\nconst poem = Math.random() > 0.5\n  ? { name: \"The Double Image\", pages: 7 }\n  : { name: \"Her Kind\", rhymes: true };\n// Type:\n// {\n//   name: string;\n//   pages: number;\n//   rhymes?: undefined;\n// }\n// |\n// {\n//   name: string;\n//   pages?: undefined;\n//   rhymes: boolean;\n// }\n\npoem.name; // string\npoem.pages; // number | undefined\npoem.rhymes; // booleans | undefined\n```", "```\ntype PoemWithPages = {\n    name: string;\n    pages: number;\n};\n\ntype PoemWithRhymes = {\n    name: string;\n    rhymes: boolean;\n};\n\ntype Poem = PoemWithPages | PoemWithRhymes;\n\nconst poem: Poem = Math.random() > 0.5\n  ? { name: \"The Double Image\", pages: 7 }\n  : { name: \"Her Kind\", rhymes: true };\n\npoem.name; // Ok\n\npoem.pages;\n//   ~~~~~\n// Property 'pages' does not exist on type 'Poem'.\n//   Property 'pages' does not exist on type 'PoemWithRhymes'.\n\npoem.rhymes;\n//   ~~~~~~\n// Property 'rhymes' does not exist on type 'Poem'.\n//   Property 'rhymes' does not exist on type 'PoemWithPages'.\n```", "```\nif (\"pages\" in poem) {\n    poem.pages; // Ok: poem is narrowed to PoemWithPages\n} else {\n    poem.rhymes; // Ok: poem is narrowed to PoemWithRhymes\n}\n```", "```\nif (poem.pages) { /* ... */ }\n//       ~~~~~\n// Property 'pages' does not exist on type 'PoemWithPages | PoemWithRhymes'.\n//   Property 'pages' does not exist on type 'PoemWithRhymes'.\n```", "```\ntype PoemWithPages = {\n    name: string;\n    pages: number;\n    type: 'pages';\n};\n\ntype PoemWithRhymes = {\n    name: string;\n    rhymes: boolean;\n    type: 'rhymes';\n};\n\ntype Poem = PoemWithPages | PoemWithRhymes;\n\nconst poem: Poem = Math.random() > 0.5\n  ? { name: \"The Double Image\", pages: 7, type: \"pages\" }\n  : { name: \"Her Kind\", rhymes: true, type: \"rhymes\" };\n\nif (poem.type === \"pages\") {\n    console.log(`It's got pages: ${poem.pages}`); // Ok\n} else {\n    console.log(`It rhymes: ${poem.rhymes}`);\n}\n\npoem.type; // Type: 'pages' | 'rhymes'\n\npoem.pages;\n//   ~~~~~\n// Error: Property 'pages' does not exist on type 'Poem'.\n//   Property 'pages' does not exist on type 'PoemWithRhymes'.\n```", "```\ntype Artwork = {\n    genre: string;\n    name: string;\n};\n\ntype Writing = {\n    pages: number;\n    name: string;\n};\n\ntype WrittenArt = Artwork & Writing;\n// Equivalent to:\n// {\n//   genre: string;\n//   name: string;\n//   pages: number;\n// }\n```", "```\ntype ShortPoem = { author: string } & (\n    | { kigo: string; type: \"haiku\"; }\n    | { meter: number; type: \"villanelle\"; }\n);\n\n// Ok\nconst morningGlory: ShortPoem = {\n    author: \"Fukuda Chiyo-ni\",\n    kigo: \"Morning Glory\",\n    type: \"haiku\",\n};\n\nconst oneArt: ShortPoem = {\n    author: \"Elizabeth Bishop\",\n    type: \"villanelle\",\n};\n// Error: Type '{ author: string; type: \"villanelle\"; }'\n// is not assignable to type 'ShortPoem'.\n//   Type '{ author: string; type: \"villanelle\"; }' is not assignable to\n//   type '{ author: string; } & { meter: number; type: \"villanelle\"; }'.\n//     Property 'meter' is missing in type '{ author: string; type: \"villanelle\"; }'\n//     but required in type '{ meter: number; type: \"villanelle\"; }'.\n```", "```\ntype ShortPoemBase = { author: string };\ntype Haiku = ShortPoemBase & { kigo: string; type: \"haiku\" };\ntype Villanelle = ShortPoemBase & { meter: number; type: \"villanelle\" };\ntype ShortPoem = Haiku | Villanelle;\n\nconst oneArt: ShortPoem = {\n    author: \"Elizabeth Bishop\",\n    type: \"villanelle\",\n};\n// Type '{ author: string; type: \"villanelle\"; }'\n// is not assignable to type 'ShortPoem'.\n//   Type '{ author: string; type: \"villanelle\"; }'\n//   is not assignable to type 'Villanelle'.\n//     Property 'meter' is missing in type\n//     '{ author: string; type: \"villanelle\"; }'\n//     but required in type '{ meter: number; type: \"villanelle\"; }'.\n```", "```\ntype NotPossible = number & string;\n// Type: never\n```", "```\nlet notNumber: NotPossible = 0;\n//  ~~~~~~~~~\n// Error: Type 'number' is not assignable to type 'never'.\n\nlet notString: never = \"\";\n//  ~~~~~~~~~\n// Error: Type 'string' is not assignable to type 'never'.\n```"]