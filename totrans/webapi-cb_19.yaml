- en: Chapter 19\. Closing Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you’ve found the recipes and APIs covered in this book to be useful and
    interesting. Hopefully you’ve been able to apply what you’ve learned in this book
    to level up your JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: In Defense of Third-Party Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main themes of this book is the fact that you can do so much without
    needing third-party libraries. This is true, but don’t feel like you have to avoid
    third-party libraries at all costs. Sometimes using the built-in browser APIs
    saves you from needing a dependency, but you might have to write extra “glue”
    code to adapt it to what you’re trying to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: Some browser APIs can be awkward to work with. Take the IndexedDB API, for example.
    It’s a powerful data persistence and access layer, but its API is callback based
    and can be painful to work with. There are libraries available that wrap IndexedDB
    and provide a simpler—or, in some cases, more powerful—API. For example, Dexie.js
    wraps IndexedDB with a `Promise`-based API.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, everything is a trade-off. If you have room to spare in your JavaScript
    bundle to provide an easier developer experience, it’s probably worth it.
  prefs: []
  type: TYPE_NORMAL
- en: Detect Features, Not Browser Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to check if the user is running a browser that supports the API
    you want to use, you might think to look at the user agent string and figure out
    which browser version the user has. Try to avoid this. It is notoriously unreliable,
    plus it’s trivial to spoof the user agent string to masquerade as another browser.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, detect if a particular feature is available. For example, if you wanted
    to check if the browser supports IndexedDB, just check for the presence of the
    `indexedDB` property in the `window` object (see [Example 19-1](#example19-1)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 19-1\. Checking for IndexedDB support
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Polyfills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to support older browsers, you may be able to still use some of
    these APIs with a polyfill. This is a third-party JavaScript library that adds
    the missing functionality. These polyfills may not be as performant as the built-in
    APIs, but they allow you to use newer APIs in browsers that otherwise wouldn’t
    support them.
  prefs: []
  type: TYPE_NORMAL
- en: Some APIs can’t be polyfilled, of course, because they rely on integration with
    native device capabilities like the accelerometer or geolocation. If the browser
    has no way to communicate with these system services, no amount of third-party
    code can bridge that gap.
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead to the Future
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are even more exciting APIs on the horizon that will further expand what
    you can do in browser-based apps without needing plug-ins or third-party libraries.
    To close out the book, this section briefly looks at some upcoming experimental
    APIs that will enrich browser apps even more in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Web Bluetooth API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Soon you’ll be able to interact with Bluetooth devices natively in the browser
    using the Web Bluetooth API. It provides a `Promise`-based interface for discovering
    and reading information about connected Bluetooth devices. You can read data such
    as battery level, or listen for notifications from devices.
  prefs: []
  type: TYPE_NORMAL
- en: This works by interacting with the device’s GATT (Generic Attribute) Profile,
    which defines supported services and characteristics for a Bluetooth device. This
    keeps the API generic, allowing it the flexibility to work with any kind of device
    that supports GATT.
  prefs: []
  type: TYPE_NORMAL
- en: Web NFC API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Near-field communication (NFC) allows devices to exchange information when they
    are in close proximity to one another. The Web NFC API will allow devices to exchange
    messages and information with NFC hardware.
  prefs: []
  type: TYPE_NORMAL
- en: This API provides the ability to exchange messages using the NFC Data Exchange
    Format (NDEF). This is a standardized format published by the NFC Forum.
  prefs: []
  type: TYPE_NORMAL
- en: EyeDropper API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The EyeDropper API will allow you to select a color from pixels on the screen
    via an eye dropper tool. This tool will work both inside and outside the browser
    window, allowing you to pick a color from anywhere on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can construct an eye dropper by calling the `EyeDropper` constructor. The
    `EyeDropper` provides an `open` method that shows an eye dropper interface on
    the screen, and returns a `Promise`. Once you select a pixel with the eye dropper,
    the `Promise` resolves with the color of the selected pixel.
  prefs: []
  type: TYPE_NORMAL
- en: Barcode Detection API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This API will give your applications the ability to read barcodes and QR codes.
    It supports many types of standard barcode types. This will be a versatile API
    that can read barcodes from many different image sources: image and video elements,
    Blobs, canvas elements, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Barcodes are detected by passing image data to a `BarcodeDetector`’s `detect`
    method. This returns a `Promise` that resolves to data about any detected barcodes
    and their values.
  prefs: []
  type: TYPE_NORMAL
- en: Cookie Store API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The current mechanism for working with cookies in the browser is not very convenient.
    The `document.cookie` property is a single string that contains key/value pair
    mappings of cookie names and values for the current site.
  prefs: []
  type: TYPE_NORMAL
- en: The upcoming Cookie Store API provides an asynchronous, more robust interface
    for accessing cookie information. You can look up the details of a single cookie
    with the `CookieStore.get` method, which returns a `Promise` that resolves to
    information about the cookie with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: It also lets you listen to `change` events, which are fired whenever cookie
    data changes.
  prefs: []
  type: TYPE_NORMAL
- en: Payment APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Payment Request API provides a way for a website to initiate a payment in
    the browser. You can then use the Payment Handler API to process the payment without
    having to redirect to another website.
  prefs: []
  type: TYPE_NORMAL
- en: This will let you provide a more consistent experience when using an external
    payment processor.
  prefs: []
  type: TYPE_NORMAL
- en: Finding What’s Next
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The web is always changing. If you want to get a peek at what other web browser
    APIs are coming, some good resources are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[MDN Web Docs](https://oreil.ly/PqBPh) has a [Web APIs page](https://oreil.ly/YTWkO)
    that shows an overview of current and upcoming or experimental APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The W3C standards and drafts page](https://oreil.ly/Xu47E) contains a searchable
    directory of standards and draft specifications at all levels of development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
