["```\nconst { gql } = require('apollo-server-express');\n\nmodule.exports = gql`\n type Note {\n id: ID!\n content: String!\n author: String!\n }\n\n type Query {\n notes: [Note!]!\n note(id: ID!): Note!\n }\n\n type Mutation {\n newNote(content: String!): Note!\n }\n`;\n```", "```\nconst { ApolloServer } = require('apollo-server-express');\n\nconst typeDefs = require('./schema');\n```", "```\nconst Query = require('./query');\nconst Mutation = require('./mutation');\n\nmodule.exports = {\n  Query,\n  Mutation\n};\n```", "```\nmodule.exports = {\n  notes: async () => {\n    return await models.Note.find()\n  },\n  note: async (parent, args) => {\n    return await models.Note.findById(args.id);\n  }\n}\n```", "```\nmodule.exports = {\n  newNote: async (parent, args) => {\n    return await models.Note.create({\n      content: args.content,\n      author: 'Adam Scott'\n    });\n  }\n}\n```", "```\nconst resolvers = require('./resolvers');\n```", "```\n// Apollo Server setup\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: () => {\n    // Add the db models to the context\n    return { models };\n  }\n });\n```", "```\nmodule.exports = {\n  notes: async (parent, args, { models }) => {\n    return await models.Note.find()\n  },\n  note: async (parent, args, { models }) => {\n    return await models.Note.findById(args.id);\n  }\n}\n```", "```\nmodule.exports = {\n  newNote: async (parent, args, { models }) => {\n    return await models.Note.create({\n      content: args.content,\n      author: 'Adam Scott'\n    });\n  }\n}\n```", "```\nconst express = require('express');\nconst { ApolloServer } = require('apollo-server-express');\nrequire('dotenv').config();\n\n// Local module imports\nconst db = require('./db');\nconst models = require('./models');\nconst typeDefs = require('./schema');\nconst resolvers = require('./resolvers');\n\n// Run our server on a port specified in our .env file or port 4000\nconst port = process.env.PORT || 4000;\nconst DB_HOST = process.env.DB_HOST;\n\nconst app = express();\n\ndb.connect(DB_HOST);\n\n// Apollo Server setup\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: () => {\n    // Add the db models to the context\n    return { models };\n  }\n});\n\n// Apply the Apollo GraphQL middleware and set the path to /api\nserver.applyMiddleware({ app, path: '/api' });\n\napp.listen({ port }, () =>\n  console.log(\n    `GraphQL Server running at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```", "```\ntype Mutation {\n  newNote(content: String!): Note!\n  updateNote(id: ID!, content: String!): Note!\n  deleteNote(id: ID!): Boolean!\n}\n```", "```\ndeleteNote: async (parent, { id }, { models }) => {\n  try {\n    await models.Note.findOneAndRemove({ _id: id});\n    return true;\n  } catch (err) {\n    return false;\n  }\n},\n```", "```\nmutation {\n  deleteNote(id: \"5c7d1aacd960e03928804308\")\n}\n```", "```\n{\n  \"data\": {\n    \"deleteNote\": true\n  }\n}\n```", "```\nupdateNote: async (parent, { content, id }, { models }) => {\n  return await models.Note.findOneAndUpdate(\n    {\n      _id: id,\n    },\n    {\n      $set: {\n        content\n      }\n    },\n    {\n      new: true\n    }\n  );\n},\n```", "```\nmutation {\n  updateNote(\n    id: \"5c7d1f0a31191c4413edba9d\",\n    content: \"This is an updated note!\"\n  ){\n    id\n    content\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"updateNote\": {\n      \"id\": \"5c7d1f0a31191c4413edba9d\",\n      \"content\": \"This is an updated note!\"\n    }\n  }\n}\n```", "```\nmodule.exports = gql`\n scalar DateTime\n ...\n`;\n```", "```\ntype Note {\n  id: ID!\n  content: String!\n  author: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n```", "```\nconst Query = require('./query');\nconst Mutation = require('./mutation');\nconst { GraphQLDateTime } = require('graphql-iso-date');\n\nmodule.exports = {\n  Query,\n  Mutation,\n  DateTime: GraphQLDateTime\n};\n```", "```\nmutation {\n  newNote (content: \"This is a note with a custom type!\") {\n    content\n    author\n    id\n    createdAt\n    updatedAt\n  }\n}\n```"]