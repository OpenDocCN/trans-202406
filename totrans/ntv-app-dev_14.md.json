["```\nfun Any?.toString(): String {\n    if (this == null) {\n      return \"null\"\n    }\n    return toString()\n}\n```", "```\nfun String.from(start:String): String {\n  val index = indexOf(start) + start.length\n  return substring(index)\n}\n```", "```\nval original = \"Hello world!\"\nval modified = original.from(\"Hello\")\nLog.d(\"MyTag\", modified)\n```", "```\nclass ExtendableObect {\n    // ...\n}\n\nextension ExtendableObect {\n    func helloTacos() {\n        print(\"Hello, tacos!\")\n    }\n}\n```", "```\nlet object = ExtendableObject()\nobject.helloTacos()\n```", "```\nprotocol AwesomeProtocol {\n    func beAwesome()\n}\n\nclass ExtendableObect { /* ... */ }\nextension ExtendableObect: AwesomeProtocol {\n    func beAwesome() {\n        print(\"You are awesome!\")\n    }\n}\n```", "```\nclass ExtendableObject: AwesomeProtocol { /*  ... */}\n```", "```\nprotocol ExtandableProtocol {\n    func doSomething()\n}\nextension ExtendableProtocol {\n    func printSomething() {\n        print(\"Something :)\")\n    }\n}\n\nclass SomeObject: ExtendableProtocol {\n    func doSomething() {\n\t\t// ...\n    }\n}\n```", "```\nlet object = SomeObject()\nobject.doSomething()\nobject.printSomething()\n```", "```\nprotocol Typeable { /* ... */ }\nextension Typeable {\n    func printType() {\n        let objectType = String(describing: type(of: self))\n        print(\"This object is a type of \\(objectType)\")\n    }\n}\n\nclass BaseClassA { }\nclass BaseClassB { }\nclass BaseClassC { }\n\nclass TacoTruck: BaseClassA, Typeable { }\nclass Dog: BaseClassB, Typeable { }\nclass Cat: BaseClassC, Typeable { }\n\nlet tacoTruck = TacoTruck()\nlet dog = Dog()\nlet cat = Cat()\n\ntacoTruck.printType()\ndog.printType()\ncat.printType()\n```"]