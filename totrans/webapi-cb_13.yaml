- en: Chapter 13\. UI Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern browsers have a few powerful built-in UI elements that you can use in
    your app. These UI components previously required third-party libraries (or you
    could build your own).
  prefs: []
  type: TYPE_NORMAL
- en: Dialogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pop-up dialogs are a mainstay of many apps, providing feedback and prompting
    for input. There are countless dialog libraries out there, and it’s possible to
    build your own. Modern browsers have already done this for you with the `<dialog>`
    element. This is a pop-up dialog and includes a backdrop that covers the rest
    of the page. You can apply styles to both the backdrop and the dialog with a little
    CSS. By default, the dialog is just a box that pops up with the backdrop behind
    it. It’s up to you to add a title, buttons, and other content.
  prefs: []
  type: TYPE_NORMAL
- en: Some dialogs contain multiple buttons, and you want to run different code depending
    on which option they chose. For example, a confirmation modal might have Confirm
    and Cancel buttons. You’ll need to handle this yourself as well, adding click
    event listeners to the buttons. In each event listener, you can close the dialog
    by calling `close` on it. The `close` method is a built-in method on the dialog
    that takes an optional argument that lets you specify a “return value.” This can
    be checked later from the dialog’s `returnValue` property. This lets you pass
    data from the dialog back to the page that opened it.
  prefs: []
  type: TYPE_NORMAL
- en: Details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `<details>` element is a component whose content is collapsible. It has some
    summary content that is displayed in an interactive element. By clicking this
    element, you can show or hide the detailed content. Like with dialogs, you can
    style the component with CSS and toggle its visibility with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Popovers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A popover is similar to a dialog. This is another type of pop-up element. There
    are a few differences between a popover and a dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking outside of the popover will close it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can still interact with the rest of the page while a popover is visible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can turn any HTML element into a popover.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Smartphones use notifications extensively, and newer operating systems also
    support notifications. Modern browsers have an API for showing native operating
    system notifications, triggered from JavaScript. The user must grant permission
    before these notifications can be sent. These notifications are created in your
    JavaScript code, on demand, while the app is running.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Alert Dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a dialog with a simple message, with an OK button to close
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a `<dialog>` element with an OK button.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by older browsers. See [CanIUse](https://oreil.ly/tk52g)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: First, define the HTML for your dialog, as shown in [Example 13-1](#example13-1).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-1\. The dialog markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You need two snippets of JavaScript. First, you’ll need a function to trigger
    the dialog to be displayed, and then you’ll need an event listener for the OK
    button to close the dialog (see [Example 13-2](#example13-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-2\. JavaScript for the dialog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This results in the dialog shown in [Figure 13-1](#img_alertScreenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![The alert dialog](assets/wacb_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. The alert dialog
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dialog’s `showModal` method shows a *modal* dialog. A modal dialog blocks
    the rest of the page until it is closed. This means if you open a modal dialog,
    clicking on other elements on the page will have no effect. With a modal dialog,
    the focus is “trapped” inside the dialog. Using the Tab key will cycle focus through
    the focusable elements in the dialog only. If this isn’t what you want, you can
    also call the `show` method. This will show a *modeless* dialog, which still allows
    you to interact with the rest of the page while the dialog is open.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the OK button will close the dialog due to the click listener calling
    `dialog.close`, but you can also close the modal by pressing the Escape key. To
    capture this, you can listen for the dialog’s `cancel` event. Canceling the dialog
    with the Escape key will also trigger the dialog’s `close` event. Finally, closing
    the dialog manually by calling `close` on it will trigger the `close` event as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: The `dialog` element also has some nice keyboard accessibility features. When
    you click the Show Dialog button and the dialog opens, the first focusable element
    button automatically receives focus. In this case, it’s the OK button. You can
    change this behavior by adding the `autofocus` attribute to the element that you
    want to receive the initial focus when the dialog is opened.
  prefs: []
  type: TYPE_NORMAL
- en: When you close the dialog, either by pressing the Escape key or clicking the
    OK button, the keyboard focus will return to the Show Dialog button.
  prefs: []
  type: TYPE_NORMAL
- en: You can style both the dialog itself and its semitransparent backdrop with CSS.
    For the dialog, you can add a CSS rule targeting the `<dialog>` element itself.
    To style the backdrop—for example, you might want it to be a more opaque black—you
    can use the `::backdrop` pseudo-element (see [Example 13-3](#example13-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-3\. Styling the backdrop
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Confirmation Dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to prompt the user to confirm an operation. The prompt should show
    a question and have Confirm and Cancel buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another great use case for a `<dialog>`. First, create your dialog content
    with the prompt and buttons, as shown in [Example 13-4](#example13-4).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-4\. The confirmation dialog markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/tk52g)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: You want both buttons to close the dialog, but to take different actions. To
    do this, you can pass a string argument to `dialog.close`. This will set the `returnValue`
    property on the dialog itself, which you can examine when you receive the `close`
    event (see [Example 13-3](#example13-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-5\. Event listeners for the confirmation dialog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The resulting confirmation dialog looks like [Figure 13-2](#img_screenshotConfirm).
  prefs: []
  type: TYPE_NORMAL
- en: '![The confirmation dialog](assets/wacb_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. The confirmation dialog
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the user clicks one of the buttons, the dialog is closed with a return value
    that depends on which button was clicked. After the dialog closes, it will emit
    the `close` event where you can check the `returnValue` property. If the `returnValue`
    is `confirm`, you know the user clicked the Confirm button. Otherwise, the `returnValue`
    is `cancel` and you can cancel the operation.
  prefs: []
  type: TYPE_NORMAL
- en: This example also listens for the `cancel` event. This event is triggered if
    the dialog is closed by pressing the Escape key. When the dialog is closed in
    this way, the dialog’s `returnValue` is not updated and will retain whatever previous
    value it had. To make sure the `returnValue` is correct, the `cancel` event handler
    sets it. This works because the `close` event is triggered *after* the `cancel`
    event. Because the Escape key triggers this event, you don’t need to actually
    listen for the Escape key to be pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Why do you need to handle this case? Well, if you close the dialog, it is not
    destroyed. It still exists in the DOM, just hidden, and still has the same `returnValue`
    set. Suppose you opened the dialog previously, and you clicked Confirm. The return
    value is now set to `confirm`. If you open the confirmation dialog again and cancel
    by pressing Escape, the return value will still be `confirm` when the `close`
    event is handled. To avoid this potential bug, you can use the `cancel` event
    handler to explicitly set the `returnValue` to `cancel`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Confirmation Dialog Web Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a customizable confirmation dialog. When you show the dialog,
    you want to get a `Promise` that resolves to the return value rather than having
    to listen for multiple events.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wrap the dialog in a web component, using a slot for the confirmation message.
    The component exposes a `showConfirmation` method that uses a `Promise`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/tk52g)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: As with most web components, start by defining the template, as shown in [Example 13-6](#example13-6).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-6\. The template for the confirmation dialog component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The template contains a slot that will receive the component’s child content.
    Next, [Example 13-7](#example13-7) show the component implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-7\. The confirmation component implementation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Suppose you want to use this component to confirm a delete operation. You can
    add the element to your page with the confirmation prompt as the child content
    (see [Example 13-8](#example13-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-8\. The component markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To show the dialog, select the DOM element and call its `showConfirmation` method.
    Await the returned `Promise` to get the return value (see [Example 13-9](#example13-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-9\. Using the confirmation dialog component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As with [“Creating a Disclosure Component”](ch12.html#recipe_disclosure) from
    [Chapter 12](ch12.html#ch_webComponents), you need to add some CSS to hide the
    child content until it is placed within the slots to prevent a flicker of the
    dialog content (see [Example 13-10](#example13-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-10\. Fixing the flicker issue
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a good example of the usefulness of web components to encapsulate custom
    behavior. In this case, you also added a custom method to be called from the outside.
    This method shows the dialog and abstracts away having to listen for multiple
    events. You just show the dialog and wait for the result.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Disclosure Element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have some content you want to show or hide using a toggle button.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the built-in `<details>` element (see [Example 13-10](#example13-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-11\. Using the `details` element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the details are collapsed, you’ll just see the More Info trigger button,
    as shown in [Figure 13-3](#figure13-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![The collapsed details element](assets/wacb_1303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-3\. The collapsed details element
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When you click the summary, the details open and the arrow changes to indicate
    that the content is expanded, as shown in [Figure 13-4](#figure13-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![The expanded details element](assets/wacb_1304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-4\. The expanded details element
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the inner content is hidden, and you’ll just see a disclosure element
    with the contents of the `<summary>` element. In this case, the button will read
    More Info. When you click the More Info button, the hidden content will appear.
    If you click it again, the content again becomes hidden.
  prefs: []
  type: TYPE_NORMAL
- en: You can change this default behavior with the `open` attribute. If you add this
    attribute, the content will start out visible (see [Example 13-12](#example13-12)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-12\. Controlling the default state with the `open` attribute
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can also toggle the content with JavaScript. You can change the
    value of the element’s `open` attribute directly, as shown in [Example 13-13](#example13-13).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-13\. Toggling the visibility with JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Most browsers have good accessibility support for this element, identifying
    the trigger element to screen readers and indicating its expanded or collapsed
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a Popover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show pop-up content by clicking a button, but still allow the user
    to interact with the rest of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Give the element a `popover` attribute, and add the `popovertarget` attribute
    to the trigger button (see [Example 13-14](#example13-14)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-14\. Automatically wiring a popover
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A popover differs from a dialog in a few ways:'
  prefs: []
  type: TYPE_NORMAL
- en: You can open it without any JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no backdrop like there is with a dialog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike a dialog, you aren’t blocked from interacting with the underlying page
    while the popover is displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you click outside of a popover, it will close.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make an element into a popover, you give it the `popover` attribute. The
    popover element also needs an `id` attribute. To link a trigger button to the
    popover, the button is given a `popovertarget` attribute. The value of this attribute
    should correspond to the `id` of the popover.
  prefs: []
  type: TYPE_NORMAL
- en: One drawback of the popover API in its current state is that there is no mechanism
    to position the popover relative to its trigger. By default, the popover always
    appears centered on screen. If you want to change its position, you’ll need to
    manually do that with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, you will be able to use CSS anchor positioning to position the
    popover relative to its trigger. In the meantime, there are third-party libraries
    such as Floating UI that you can use to augment this solution in order to position
    the element.
  prefs: []
  type: TYPE_NORMAL
- en: Manually Controlling a Popover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the `popover` attribute but programmatically use JavaScript
    to have control over when the popover is shown and hidden.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set the `popover` attribute to `manual` and call its `showPopover`, `hidePopover`,
    or `togglePopover` methods (see [Example 13-15](#example13-15)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-15\. The popover and trigger markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: The `popover="manual"` attribute tells the browser that the popover will be
    manually controlled (see [Example 13-16](#example13-16)). To show the popover,
    select the popover element and call its `togglePopover` method. This will show
    the popover when it is hidden and hide the popover when it is shown.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-16\. The toggle button code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to manually control the popover’s visibility, make sure that you
    set the `popover` attribute to `manual`. When the popover element is set to manual
    control, clicking outside of the popover will *not* close it. To close the popover,
    you’ll need to call either its `hidePopover` or `togglePopover` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning a Popover Relative to an Element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a popover, but you don’t want it in the middle of the screen.
    You want to position it relative to another element, such as the button that triggered
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Calculate the bounding rectangle of the element, then adjust the popover’s position
    accordingly. This example will cover positioning the tooltip just below the element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll need to apply some styles to the popover element, as shown in
    [Example 13-17](#example13-17).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-17\. The popover styles
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the browser uses margin to center the popover within the viewport.
    To position the popover relative to another element, you need to remove this margin.
    Since you are positioning the tooltip below the other element, you can set a `margin-top`
    so that there’s a small amount of space between the element and the popover. Finally,
    to make the popover scroll along with the element, you need to set `position:
    fixed`.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can use the `popovertarget` attribute on the trigger to automatically
    show the popover on click (see [Example 13-18](#example13-18)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-18\. The popover and trigger markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The last step is to update the popover’s position whenever it is shown. You
    can listen for the popover element’s `toggle` event, which is triggered when the
    popover is either shown or hidden. When handling this event, you can calculate
    the trigger element’s position and use it to update the popover’s position (see
    [Example 13-19](#example13-19)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-19\. Setting the popover’s position
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are familiar with CSS positioning, you might be a little confused about
    the behavior of `position: absolute` here. Normally, `position: absolute` will
    position the element relative to its closest positioned ancestor element. In this
    case, though, the popover will always be positioned relative to the viewport.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because popovers are positioned inside the browser’s *top layer*. This
    is a special layer that is on top of all other layers in the document. Regardless
    of where in the DOM your popover element exists, the popover content is placed
    in the top layer. Since it’s in this special top layer, `position: absolute` will
    position the element relative to the viewport.'
  prefs: []
  type: TYPE_NORMAL
- en: The position of the popover is calculated by calling `getBoundingClientRect`
    on the trigger element. As you scroll the page, the top and bottom positions of
    this rectangle will change. To make sure the popover is positioned correctly underneath
    the trigger, you also need to include `window.scrollY` in the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few limitations to note of this implementation. First, if the trigger
    element is at the bottom of the document, there may not be enough room underneath
    the element to show the popover. You may want to check for this and, when there
    isn’t enough room, position the popover *above* the trigger instead.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing you might want to handle is if the window is resized while the
    popover is visible, the position may not be updated correctly. You could use a
    `ResizeObserver` or the window’s `resize` event to handle this case.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a Tooltip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a tooltip when hovering over, or focusing, an element.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a manually controlled popover, showing and hiding it with the corresponding
    mouse events. This will use the same positioning approach as in [“Positioning
    a Popover Relative to an Element”](#recipe_positioning), so first you’ll need
    to define the custom styles for the popover (see [Example 13-20](#example13-20)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-20\. The tooltip styles
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: Implement the tooltip as a popover with the `popover` attribute set to `manual`,
    as shown in [Example 13-21](#example13-21).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-21\. The tooltip markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When the mouse hovers over the trigger, calculate the position and show the
    popover element on the `mouseover` event. On the `mouseout` event, hide the popover
    element (see [Example 13-22](#example13-22)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-22\. Showing and hiding the tooltip
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since this uses the same positioning technique as [“Positioning a Popover Relative
    to an Element”](#recipe_positioning), it has the same limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn’t account for the case where there’s not enough room to show the tooltip
    below it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn’t account for resizing the window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a Notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to notify the user when something occurs in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a `Notification` object to show a native operating system notification.
  prefs: []
  type: TYPE_NORMAL
- en: In order to show notifications, you must first ask the user for permission.
    This is done with the `Notification.requestPermission` method. To check if the
    user has already given permission, you can check the `Notification.permission`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 13-23](#example13-23) shows a helper function that checks the permission,
    asks the user for permission if necessary, and returns a boolean indicating whether
    or not notifications can be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-23\. Checking notification permissions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once you have checked for permission, you can send a new notification by creating
    a new `Notification` instance. Use the `getPermission` helper to determine if
    a notification should be shown (see [Example 13-24](#example13-24)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-24\. Showing a notification
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you try to show a notification when permission hasn’t been granted, the `Notification`
    object will trigger an `error` event.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 13-5](#figure_notification) shows what this notification might look
    like on a desktop computer.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a notification rendered on macOS 14](assets/wacb_1305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-5\. A notification rendered on macOS 14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notifications can only be shown from apps running in a *secure context*. Typically,
    this means it must be served with HTTPS or from a `localhost` URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Notification.permission` property has one of three values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`granted`'
  prefs: []
  type: TYPE_NORMAL
- en: The user has expressly granted permissions to show notifications.
  prefs: []
  type: TYPE_NORMAL
- en: '`denied`'
  prefs: []
  type: TYPE_NORMAL
- en: The user has expressly denied permission to show notifications when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: '`default`'
  prefs: []
  type: TYPE_NORMAL
- en: The user hasn’t responded to a notification permission request. Browsers will
    treat this the same as the `denied` case.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Notification` can trigger some other events as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`show`'
  prefs: []
  type: TYPE_NORMAL
- en: Triggered when the notification is shown
  prefs: []
  type: TYPE_NORMAL
- en: '`close`'
  prefs: []
  type: TYPE_NORMAL
- en: Triggered when the notification closes
  prefs: []
  type: TYPE_NORMAL
- en: '`click`'
  prefs: []
  type: TYPE_NORMAL
- en: Triggered when the notification is clicked
  prefs: []
  type: TYPE_NORMAL
