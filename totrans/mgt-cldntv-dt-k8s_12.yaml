- en: Chapter 11\. Migrating Data Workloads to Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 迁移数据工作负载到Kubernetes
- en: 'In the first chapter, we presented a vision for combining all of the infrastructure
    needed for your cloud native applications into one place: Kubernetes. Our argument
    was simple: if you’re excluding data and its supporting infrastructure from your
    Kubernetes deployments, you haven’t fully embraced cloud native principles. We’ve
    covered a lot of ground since then, examining how various types of data infrastructure
    work on Kubernetes and demonstrating the art of the possible.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们提出了一个愿景，即将你的云原生应用所需的所有基础设施集成到一个地方：Kubernetes。我们的论点很简单：如果你在Kubernetes部署中排除了数据及其支持基础设施，那么你还没有完全接受云原生原则。自那时以来，我们已经涵盖了很多内容，探讨了不同类型的数据基础设施在Kubernetes上的工作方式，并展示了可能性的艺术。
- en: So, where do you go from here? What are the steps to fully realize this vision?
    At this point, you may already have some parts of your applications in Kubernetes.
    More than likely, you also have several previous generations of infrastructure
    such as containers, VMs, or bare-metal servers, whether running in your own datacenters
    or in the cloud. In this final chapter, we’ll leverage everything you’ve learned
    so far to help you create a plan to fully manage your cloud native data in Kubernetes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你接下来该怎么做呢？如何完全实现这一愿景？此时，你可能已经在Kubernetes中部署了应用的某些部分。很可能，你还有几代前的基础设施，比如容器、虚拟机或裸金属服务器，无论是在你自己的数据中心还是在云中运行。在本书的最后一章，我们将利用你迄今所学的一切，帮助你制定一个完整管理云原生数据在Kubernetes中的计划。
- en: 'The Vision: Application-Aware Platforms'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 愿景：应用感知平台
- en: Throughout the book, we’ve heard a diverse range of voices in the community
    present their wisdom about data in Kubernetes and practical advice for this monumental
    undertaking. No matter where you are in the process, whether you’re a Kubernetes
    beginner or a seasoned multiyear operator, we all have things to learn from their
    expertise. Now it’s time to zoom out and consider how the move to Kubernetes intersects
    with other trends in the software industry. Craig McLuckie was part of the team
    that created Kubernetes at Google and eventually shepherded it into open source.
    He’s been very active in the cloud native infrastructure community and shares
    some possibilities and challenges as we move toward data on Kubernetes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 整本书中，我们听到了社区中多样化的声音，他们分享了关于在Kubernetes中处理数据的智慧和实际建议，这对于这项重大工作至关重要。无论你处于哪个阶段，无论你是Kubernetes的初学者还是经验丰富的多年操作者，我们都可以从他们的专业知识中学到东西。现在是时候放大视角，考虑一下向Kubernetes的迁移如何与软件行业的其他趋势交汇。Craig
    McLuckie曾是谷歌团队中创建Kubernetes的一员，并最终将其引入开源。他在云原生基础设施社区中非常活跃，并分享了一些在我们向Kubernetes数据迁移过程中可能遇到的可能性和挑战。
- en: Craig offers an inspiring vision for a future where infrastructure conforms
    to the application instead of the infrastructure-coupled applications we have
    today. As you’ve seen in the technologies we’ve explored in this book, the idea
    of declarative infrastructure that reconciles via the Kubernetes control plane
    is everywhere. Now we can begin to flip the script by building applications from
    the top down instead of from the bottom up. This is an opportunity to change the
    way your organization leverages data technology. Are you ready to start? It’s
    time to map out your journey.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Craig提出了一个鼓舞人心的愿景，即未来的基础设施将适应应用，而不是像今天一样应用与基础设施耦合。正如你在本书中探索的技术所看到的，通过Kubernetes控制平面进行声明性基础设施的协调已经无处不在。现在我们可以开始改变方式，从顶向下构建应用，而不是从底向上。这是一个改变你的组织如何利用数据技术的机会。你准备好开始了吗？现在是时候规划你的旅程了。
- en: Charting Your Path to Success
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制通向成功的路径
- en: In preparing to migrate your stateful workloads to Kubernetes, you’ll probably
    have a few questions in mind, like “What technologies should we use?” and “How
    will we roll out the changes?” and “How do we make sure our team is ready?” Most
    of these questions will map nicely to the classic IT framework of people, process,
    and technology (PPT). Since every organization’s journey will be different, we’ll
    provide recommendations in each category instead of a detailed roadmap. An important
    part of your exercise is choosing what migrates into Kubernetes and what doesn’t.
    Every migration should have a strong case.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备将你的有状态工作负载迁移到Kubernetes之前，你可能心中会有一些问题，比如“我们应该使用什么技术？”和“我们如何推出这些变更？”以及“我们如何确保我们的团队准备好了？”大多数这些问题都可以很好地映射到经典的IT框架人员、流程和技术（PPT）。由于每个组织的旅程都会有所不同，我们将在每个类别中提供建议，而不是详细的路线图。你的一部分重要工作是选择迁移到Kubernetes的内容和不迁移到的内容。每次迁移都应有充分的理由。
- en: 'You will likely have some of these recommendations in place already, so the
    actual work needed is to ensure that your efforts in all three areas work together
    toward your desired outcome. One word of warning: this is not the time to “run
    fast and break things.” You’ll have plenty of time to do that after you have the
    core elements in place. With a strong foundation, you will achieve levels of agility
    and speed you haven’t seen before.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在实施一些这些建议，所以实际需要做的工作是确保你在所有三个领域的努力朝着你期望的结果共同发力。一个警告：现在不是“快速行动，破坏一切”的时候。在确保核心元素就位之后，你会有充分的时间来做这些事情。有了坚实的基础，你将达到以前从未见过的敏捷和速度水平。
- en: People
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人员
- en: 'The core of any IT organization is its people. Migrating any workload to Kubernetes
    represents a massive shift in mindset for your organization and requires proper
    training and preparation. You will need people who understand the technology already
    or are willing to learn. This requirement is even more true in preparing to migrate
    to stateful workloads. Beyond the apparent tasks of training up on Kubernetes
    and reading books like this one, we’d like to draw your attention to two areas:
    specific job roles that successful organizations execute well and leveraging open
    source communities as a force multiplier for your teams.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 任何IT组织的核心是它的人员。将任何工作负载迁移到Kubernetes代表了你的组织在思维方式上的巨大转变，并且需要适当的培训和准备工作。你需要理解这项技术的人员，或者愿意学习的人员。在准备迁移到有状态工作负载时，这一要求更为真实。除了明显的在Kubernetes上进行培训和阅读这类书籍的任务外，我们希望引起你对两个领域的关注：成功组织执行良好的特定工作角色以及利用开源社区作为你的团队的力量倍增器。
- en: Critical people roles for cloud native data
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云原生数据的关键人员角色
- en: 'We could list many roles that are key to a successful migration, but we’ll
    highlight three that are central to managing cloud native data and discuss how
    they relate:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以列出许多对成功迁移至关键的角色，但我们将重点介绍三个对于管理云原生数据至关重要的角色，并讨论它们的关系：
- en: Cloud architects
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云架构师
- en: Architects provide technical direction to the development of cloud applications,
    influencing everything from the clouds and regions where you’ll deploy your applications,
    to the data infrastructure you’ll use. This includes when to rely on self-managed
    open source projects versus managed services. An effective cloud architect carefully
    selects technology to meet current business needs while leaving room for future
    extensibility.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师为开发云应用程序的技术方向提供指导，影响你部署应用程序的云和区域选择，以及你将使用的数据基础设施。这包括何时依赖自管理的开源项目与托管服务。一名有效的云架构师精选技术以满足当前业务需求，同时留有未来扩展性的空间。
- en: Site reliability engineers
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 站点可靠性工程师
- en: In [Chapter 1](ch01.html#introduction_to_cloud_native_data_infra), we talked
    about adopting an SRE mindset. While this mindset is something that every engineer
    in your organization should be working toward, DBAs have an incredibly strategic
    opportunity to make the transition into an SRE role. Instead of just deploying
    a database and walking away, a data-focused SRE takes a holistic view of the data
    infrastructure and how it supports the system’s overall goals, with an eye toward
    the best performance for the cost.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html#introduction_to_cloud_native_data_infra)中，我们谈到了采纳SRE思维方式。虽然这种思维方式是你组织中每位工程师都应该朝向的方向，但DBA在成为SRE角色时具有极其战略性的机会。与仅仅部署数据库并离开不同，一个以数据为重点的SRE全面看待数据基础设施及其如何支持系统整体目标，以获取最佳性能和成本比。
- en: Data engineers
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程师
- en: Whereas data scientists are concerned about extracting the value from data,
    data engineers are responsible for operationalizing data. They build data processes,
    assemble systems, and think about the end-user consumption of data products. Data
    engineers should be versed not only in Kubernetes-based technology but also in
    what cloud services can be used in concert for an optimized outcome. Data engineers
    will play a significant role in selecting and deploying technology that supports
    the AI/ML workloads we discussed in [Chapter 10](ch10.html#machine_learning_and_other_emerging_use),
    composing multiple components to create flows that deliver real-time insights
    into your applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据科学家关注从数据中提取价值，数据工程师负责数据的操作化。他们构建数据处理流程，组装系统，并考虑数据产品的最终用户消费。数据工程师不仅应精通基于Kubernetes的技术，还应了解哪些云服务可以结合使用，以获得优化的结果。数据工程师将在选择和部署支持我们在[第10章](ch10.html#machine_learning_and_other_emerging_use)中讨论的AI/ML工作负载的技术方面发挥重要作用，组合多个组件以实现对应用程序实时洞察的流程。
- en: 'To think about how these roles work together in an organization, consider the
    analogy of a farming operation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑这些角色如何在组织中协同工作，请考虑农场操作的类比：
- en: The architect is like the planner who determines what crops to grow, and in
    what quantities in each season.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构师类似于规划者，决定在每个季节种植什么作物，以及每种作物的数量。
- en: The SRE is like the farmer who plants and cultivates the crops to ensure they
    are healthy and productive.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SRE类似于农民，他们种植和培育作物，以确保它们健康且富有生产力。
- en: The data engineer is like a distributor who harvests the crops and ensures they
    reach their proper destination.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据工程师类似于分销商，他们收获作物并确保其到达正确的目的地。
- en: If you don’t already have these roles defined within your organization, don’t
    worry. In many cases, it is possible to retrain engineers in your organization
    who are currently in a different role.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的组织尚未定义这些角色，请不要担心。在许多情况下，可以对目前从事其他角色的工程师进行再培训。
- en: Communities to fast-track your innovation
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速创新的社区
- en: 'To paraphrase the sword-wielding old man in *The Legend of Zelda*, it’s dangerous
    to go alone. Bring friends. Communities are a core part of working in technology,
    and we work together, learn together, and share successes and failures. When embarking
    on a new technology journey, look for the communities that form around that technology.
    The following are a few notable communities in cloud native data. You can seek
    them out for information, join the conversation, and hopefully contribute:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要解释《塞尔达传说》中持剑老人的话，单独前行是危险的。带上朋友。在科技领域，社区是工作的核心部分，我们一起工作，共同学习，分享成功和失败。在踏上新的技术旅程时，寻找围绕该技术形成的社区。以下是云原生数据领域的几个显著社区。您可以寻找这些信息，加入对话，并希望能贡献自己的一份力量：
- en: Cloud Native Computing Foundation
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生计算基金会
- en: Also known as the [CNCF](https://www.cncf.io), this organization is a part of
    the more extensive [Linux Foundation](https://www.linuxfoundation.org), a nonprofit
    organization devoted to open source advocacy. The CNCF is the home for Kubernetes
    and many projects that run in Kubernetes, including several featured in this book.
    You can see the amount of energy put into Kubernetes native projects from the
    graduated and incubating projects list. Members of CNCF pay a fee that goes to
    support the advocacy and administration of the foundation and its projects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为[CNCF](https://www.cncf.io)，这个组织是更广泛的[Linux基金会](https://www.linuxfoundation.org)的一部分，这是一个致力于开源倡导的非营利组织。CNCF是Kubernetes和许多在Kubernetes上运行的项目的家园，包括本书中介绍的几个特色项目。您可以从毕业和孵化项目列表中看到投入到Kubernetes原生项目中的能量。CNCF的成员支付会费，用于支持基金会及其项目的倡导和管理工作。
- en: The Technical Oversight Committee (TOC) approves and maintains the technical
    vision for CNCF projects. With so many projects to maintain, [Technical Advisory
    Groups (TAGs)](https://oreil.ly/KSxmL) have been formed to handle cross-project
    concerns. Each TAG maintains its autonomy within an initial charter to create
    a place for similarly grouped projects to maintain interoperability standards.
    Each maintains its own Slack workspace and mailing lists for community discussions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 技术监督委员会（TOC）负责批准和维护CNCF项目的技术愿景。随着如此多的项目需要维护，已经成立了技术咨询组（TAGs）来处理跨项目的关注点。每个TAG在最初的章程内保持自主性，为类似分组的项目创建一个维护互操作性标准的场所。每个TAG都维护自己的Slack工作空间和邮件列表，用于社区讨论。
- en: All development activity for a project is centered around its GitHub repository.
    To get involved in contributing code, search for the [“good first issue”](https://oreil.ly/xt2QR)
    tag in GitHub Issues for each project. If you have broader interests, you might
    consider joining the conversation happening in TAGs to help shape future direction.
    Twice a year, the [KubeCon + CloudNativeCon user conferences](https://oreil.ly/Ijlki)
    are held by the CNCF in North America, China, and Europe, with an enormous session
    list. Some of the best sessions are the user stories about deploying specific
    cloud native technologies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有项目的开发活动都集中在其 GitHub 仓库中。要参与贡献代码，请在每个项目的 GitHub Issues 中寻找 [“good first issue”](https://oreil.ly/xt2QR)
    标签。如果你有更广泛的兴趣，可以考虑加入 TAGs 中正在进行的讨论，以帮助塑造未来的方向。每年两次，CNCF 在北美、中国和欧洲举办 [KubeCon +
    CloudNativeCon 用户大会](https://oreil.ly/Ijlki)，拥有大量的会议议程。一些最佳的议程是关于部署特定云原生技术的用户故事。
- en: Apache Software Foundation
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 软件基金会
- en: The [ASF](https://www.apache.org) is a nonprofit organization for software conservancy.
    ASF members provide governance, services, and support for accepted projects. After
    going through an incubation process, projects graduate to become top-level projects
    where they earn the Apache name (e.g., Apache Cassandra, Apache Spark, and Apache
    Pulsar). Each project is run independently by a project management committee (PMC),
    and users with the right to make project changes are known as *committers*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASF](https://www.apache.org) 是一个非营利性的软件保护组织。ASF 成员为被接受的项目提供治理、服务和支持。经过孵化过程后，项目毕业成为顶级项目，获得
    Apache 名称（例如 Apache Cassandra、Apache Spark 和 Apache Pulsar）。每个项目都由一个项目管理委员会（PMC）独立运行，具有进行项目更改权限的用户被称为
    *committers*。'
- en: 'It’s important to note the distinction between the project and user communities
    around Apache projects. The project community is concerned with building the project,
    and the user community is downstream and primarily focuses on using the project
    in their applications. This separation of concerns is evident in the two mailing
    lists available for most projects: *dev@<project name>.apache.org* and *user@<project
    name>.apache.org*.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Apache 项目周围，重要的是要注意项目社区和用户社区之间的区别。项目社区关注于构建项目，而用户社区则是下游，主要专注于在其应用程序中使用项目。这种关注分离在大多数项目中都体现在两个邮件列表上：*dev@<project
    name>.apache.org* 和 *user@<project name>.apache.org*。
- en: If you are interested in contributing code, jumping right in is the best way
    to start. Apache projects use [Jira](https://oreil.ly/Odauf) to track changes
    and bugs. Look for “low hanging fruit” or “good first project” tags on the Jira
    issues. In the user community, participating in the mailing list or Stack Overflow
    is a great way to start contributing by helping others. Giving presentations about
    Apache projects is the lifeblood of awareness for each project and one of the
    best contributions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣贡献代码，直接跳进去是开始的最佳方式。Apache 项目使用 [Jira](https://oreil.ly/Odauf) 来跟踪变更和错误。在
    Jira 问题中寻找“低 hanging fruit”或“好的首个项目”标签。在用户社区中，通过参与邮件列表或 Stack Overflow 来帮助他人是开始贡献的好方法。为
    Apache 项目做演示是增加项目知名度的生命线，也是最佳贡献之一。
- en: Data on Kubernetes Community (DoKC)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 社区数据（DoKC）
- en: A different kind of organization than the CNCF and ASF, DoKC is a knowledge
    community composed of industry vendors and end users. DoKC isn’t a place for hosting
    software projects but a central gathering place for people in a growing field
    within infrastructure. Technology vendors sponsor the community, but the charter
    is to remain vendor neutral in all activities. Those activities include in-person
    and online meetups, blogs on the [*dok.community* website](https://dok.community),
    and a companion event to KubeCon, DoK Day.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CNCF 和 ASF 不同，DoKC 是一个由行业供应商和最终用户组成的知识社区。DoKC 不是托管软件项目的地方，而是基础设施领域中人们的中心聚会场所。技术供应商赞助这个社区，但它的宗旨是在所有活动中保持供应商中立。这些活动包括线下和线上聚会、[*dok.community*
    网站](https://dok.community) 上的博客以及与 KubeCon 的伴随活动 DoK Day。
- en: 'In addition to gathering the community, DoKC also produces useful resources
    to guide users as they make decisions about data technology on Kubernetes:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了聚集社区，DoKC 还制作有用的资源，帮助用户在 Kubernetes 上做出数据技术决策：
- en: Given the number of data technologies available, the [DoK Landscape](https://oreil.ly/HgYlL)
    has been created to help compare and evaluate the various options. You can search
    by attributes such as open source versus commercial licensing, or whether an operator
    or Helm chart is available.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鉴于可用的数据技术数量，已经创建了[DoK Landscape](https://oreil.ly/HgYlL)来帮助比较和评估各种选项。您可以按照开源与商业许可证之类的属性进行搜索，或者是否提供了操作员或Helm图表。
- en: An annual [DoK survey](https://oreil.ly/ZmaQu) is also conducted to gauge industry
    opinions and provide guidance on common problems. The report is free and can be
    used in your presentations.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年进行一次[DoK调查](https://oreil.ly/ZmaQu)，以评估行业观点并提供常见问题的指导。该报告免费，可用于您的演示文稿。
- en: As a knowledge community, the best way to participate in the DoKC is sharing
    knowledge. When the community was being formed, the amount of information about
    end users running stateful workloads in Kubernetes was scarce. Creating a space
    to focus on data topics has led to a growing set of common interests and concepts.
    Most of the interviews in this book came from people we met in the DoKC.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个知识社区，参与DoKC的最佳方式是共享知识。在社区形成之初，关于在Kubernetes中运行有状态工作负载的最终用户信息很少。创建一个专注于数据主题的空间已经促进了一组共同的兴趣和概念的增长。本书中大多数的访谈来自我们在DoKC中遇到的人们。
- en: 'Throughout the book, we’ve seen the benefits of contributions from each of
    these communities toward making data technologies run effectively on Kubernetes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们看到了每个社区对使数据技术在Kubernetes上有效运行的贡献的好处：
- en: The PersistentVolume subsystem we discussed in [Chapter 2](ch02.html#managing_data_storage_on_kubernetes)
    has provided a solid foundation for a wide variety of open source and commercial
    storage solutions on Kubernetes.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在[第2章](ch02.html#managing_data_storage_on_kubernetes)中讨论的PersistentVolume子系统为Kubernetes上的各种开源和商业存储解决方案提供了坚实的基础。
- en: Operator frameworks we discussed in [Chapter 5](ch05.html#automating_database_management_on_kuber),
    including Operator SDK, Kubebuilder, and KUDO have proven to be a great enabler
    toward developing operators for a variety of data infrastructure from the ASF
    and other open source projects.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在[第5章](ch05.html#automating_database_management_on_kuber)中讨论的操作员框架，包括Operator
    SDK、Kubebuilder和KUDO，已被证明是开发多种数据基础设施操作员的重要推动者，来自ASF和其他开源项目。
- en: Kubernetes StatefulSets (first introduced in [Chapter 3](ch03.html#databases_on_kubernetes_the_hard_way))
    are an interesting case. While they have proven quite valuable for managing distributed
    databases, the community has also identified some opportunities for improvement
    that we look forward to seeing addressed in the future.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes StatefulSets（首次在[第3章](ch03.html#databases_on_kubernetes_the_hard_way)中介绍）是一个有趣的案例。虽然它们已经证明在管理分布式数据库方面非常有价值，但社区也发现了一些改进的机会，我们期待未来能够解决这些问题。
- en: Similarly, Spark and other projects in the analytics community have identified
    challenges with the Kubernetes default scheduler, as you learned in [Chapter 9](ch09.html#data_analytics_on_kubernetes).
    Thankfully, Kubernetes provides APIs for extending the scheduler that projects
    like Apache YuniKorn and Volcano can leverage.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样地，Spark和其他分析社区中的项目已经确定了Kubernetes默认调度器的挑战，正如您在[第9章](ch09.html#data_analytics_on_kubernetes)中了解到的那样。幸运的是，Kubernetes提供了用于扩展调度器的API，例如Apache
    YuniKorn和Volcano等项目可以利用。
- en: 'As you can see, plenty of work remains to be done in this ecosystem of interconnected
    communities, and it will take contributions from all corners of the cloud native
    world to get us to the next stage of maturity as an industry. Remember, community
    participation isn’t limited to providing code to a project. One of the most important
    contributions to any community is sharing your story. Think about your experiences
    of learning new technologies, and you’ll likely recall good documentation, great
    examples, and the most valuable of all: “how we built this” stories. Please consider
    sharing your story any way you can. Your community needs you!'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个互联社区生态系统中仍然有大量工作要做，需要来自云原生世界各个角落的贡献，才能使我们作为一个行业达到下一个成熟阶段。请记住，社区参与不仅限于向项目提供代码。向任何社区最重要的贡献之一是分享您的故事。想想您学习新技术的经历，您可能会回忆起良好的文档、出色的示例，以及最有价值的：“我们是如何构建这一切”的故事。请尽可能以任何方式分享您的故事。您的社区需要您！
- en: Technology
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术
- en: 'For many of you, this is the most exciting part. Cool toys! As you consider
    your journey to cloud native data, you’ll have important decisions in terms of
    the technologies you choose to use and the way you integrate them into your applications.
    You’ll recall from [Chapter 1](ch01.html#introduction_to_cloud_native_data_infra)
    the critical guiding principles for deploying cloud native data in Kubernetes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你们许多人来说，这是最令人兴奋的部分。酷炫的玩具！在考虑迁移到云原生数据时，你们将在选择使用的技术和集成到应用程序中的方式上做出重要决策。你们会从[第一章](ch01.html#introduction_to_cloud_native_data_infra)中回忆起在
    Kubernetes 中部署云原生数据的关键指导原则：
- en: 'Principle 1: Leverage compute, network, and storage as commodity APIs.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一原则：利用计算、网络和存储作为通用 API。
- en: 'Principle 2: Separate the control and data planes.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二原则：分离控制平面和数据平面。
- en: 'Principle 3: Make observability easy.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三原则：简化可观察性。
- en: 'Principle 4: Make the default configuration secure.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四原则：确保默认配置的安全性。
- en: 'Principle 5: Prefer declarative configuration.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五原则：优先选择声明性配置。
- en: As it turns out, these principles are useful for technology selection and integration,
    which you’ll see next.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，这些原则对于技术选择和集成非常有用，接下来将会看到。
- en: Selecting cloud native data projects
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择云原生数据项目
- en: 'The years of building massive scale infrastructure, especially in data, have
    yielded an enormous supply of tooling to pick from, provided by various vendors
    and open source communities. For our examination here, we’ve made a deliberate
    choice to reason in terms of selecting projects instead of selecting technologies.
    Projects encapsulate the needed technology while integrating with the processes
    we need, created by the people who will drive the success. You’re here because
    you believe Kubernetes is one of these enabling projects, but how do you make
    your next set of choices? Here are some principles we recommend:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来在数据特别是大规模基础设施方面的构建，已经产生了大量供应商和开源社区提供的工具。在这里，我们有意选择以项目为理由而不是选择技术。项目包含所需的技术，同时与我们需要的流程集成，由将推动成功的人员创建。你们在这里是因为相信
    Kubernetes 是其中一个能够实现的项目，但你们如何做出下一步选择呢？以下是我们推荐的一些原则：
- en: Ready for Kubernetes
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Kubernetes 准备好
- en: '[Chapter 7](ch07.html#the_kubernetes_native_database), outlined requirements
    for a Kubernetes native database, including:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[第七章](ch07.html#the_kubernetes_native_database)概述了 Kubernetes 本地数据库的要求，包括：'
- en: Maximum leverage of Kubernetes APIs
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用 Kubernetes API
- en: Automated, declarative management via operators
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化、声明性管理通过操作者
- en: Observable through standard APIs (such as Prometheus)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可通过标准 API（如 Prometheus）进行观察。
- en: Secure by default
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下安全
- en: While not every project you use has to be Kubernetes native, the criterion for
    being Kubernetes-ready is a bit broader. At a minimum, projects you use should
    have an operator or Helm chart. The next level is a step toward the Kubernetes
    native idea of built-in awareness of Kubernetes for deeper integration. An example
    is Apache Spark, with the Kubernetes cluster deployment option that uses specialized
    containers. The highest level of maturity is populated by fully realized cloud
    native projects that can run only in Kubernetes because they depend on components
    in a Kubernetes cluster. An example of this type of project is KServe, which has
    no way of running outside of Kubernetes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你使用的每个项目都不必是 Kubernetes 本地的，但作为 Kubernetes 准备就绪的标准略宽。至少，你使用的项目应具有操作者或 Helm
    图表。下一个级别是朝着 Kubernetes 本地的概念迈出一步，即对 Kubernetes 有深度集成的内置意识。一个例子是 Apache Spark，它具有使用专用容器的
    Kubernetes 集群部署选项。最高级别的成熟度是由完全实现的云原生项目填充，因为它们依赖于 Kubernetes 集群中的组件，所以只能在 Kubernetes
    中运行。这类项目的例子是 KServe，它没有在 Kubernetes 之外运行的方式。
- en: Open source
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 开源
- en: Using an open source project in the age of cloud native is about choice. You
    can deploy what you need, where you need it. If you choose to use a managed service
    based on an open source project, it should be completely compatible with the open
    source version, with no restrictions in moving back to a self-managed solution.
    Choosing the right license gives you the confidence to use a project and maintain
    your choice. We recommend projects with the Apache License 2.0 (APLv2). All ASF
    and CNCF projects use this license, so projects from either source guarantee you
    a permissive license. [Many other licenses](https://oreil.ly/61pjy) offer differing
    levels of permissiveness and restrictions, and you should carefully consider how
    they will affect your deployment and requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在云原生时代使用开源项目是关于选择。你可以在需要的地方部署你需要的内容。如果你选择使用基于开源项目的托管服务，它应该与开源版本完全兼容，没有限制返回自我管理解决方案的能力。选择正确的许可证让你有信心使用一个项目并保持你的选择。我们推荐采用Apache许可证2.0（APLv2）的项目。所有ASF和CNCF项目都使用这个许可证，因此无论来自哪个来源的项目都保证了你获得一个宽松的许可证。[许多其他许可证](https://oreil.ly/61pjy)提供不同程度的宽松性和限制，你应该仔细考虑它们如何影响你的部署和要求。
- en: Of course, project selections aren’t something you can do in isolation. Upstream
    decisions influence each subsequent decision, and in turn can constrain what choices
    are available. This is why, in many cases, it makes sense to look at combinations
    of projects that work well together, either by deliberate design or by standard
    interfaces.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，项目选择并不是你可以独立完成的事情。上游决策影响每一个后续决策，并且反过来可能限制可用选择。这就是为什么在许多情况下，看起来合理的是考虑那些可以很好地配合使用的项目组合，不论是经过故意设计还是标准接口。
- en: New architectures for cloud native data
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云原生数据的新架构
- en: The future of cloud native data should focus less on new projects and more on
    new architectures. This means using the projects we have today in combinations
    that make the best use of each. As we’ve discussed previously, the software industry
    has a history of leveraging ideas from prior generations lasting a decade or more
    to innovate from a new point of view. In the cloud native world, the past decade
    has been spent building scale infrastructure, and the next 10 years will likely
    be about how we can combine these projects for our needs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生数据的未来应该更少关注新项目，而是更多关注新架构。这意味着使用我们今天拥有的项目组合，充分发挥每一个项目的优势。正如我们之前讨论过的，软件行业有利用持续一个或更长时间的前几代的思想来从新的角度进行创新的历史。在云原生世界中，过去的十年已经花费在建设规模基础设施上，接下来的十年可能将关注如何结合这些项目来满足我们的需求。
- en: The infrastructure community has historically demonstrated a fondness for integrated
    infrastructure stacks that solve a common set of problems. One example is the
    LAMP stack popularized for web applications in the early 2000s, consisting of
    the Linux operating system, the Apache HTTP Server, MySQL, and either PHP, Perl,
    or Python, depending on who you asked. The 2010s brought us the SMACK stack for
    big data applications, with the Spark engine, Mesos as the resource manager, Akka,
    Cassandra, and Kafka.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施社区在集成解决共同问题的基础设施堆栈方面有着历史上的偏爱。一个例子是LAMP堆栈，在2000年初为Web应用程序流行，包括Linux操作系统、Apache
    HTTP服务器、MySQL，以及根据询问者的不同选择的PHP、Perl或Python。2010年代带来了用于大数据应用的SMACK堆栈，具有Spark引擎、Mesos作为资源管理器、Akka、Cassandra和Kafka。
- en: While it’s tempting to describe such a stack for cloud native data, the reality
    is that the variety of use cases and available projects are simply too large to
    come up with a one-size-fits-all stack. Instead, let’s consider a candidate solution
    architecture for a simple weather application case, as shown in [Figure 11-1](#sample_architecture_for_a_weather_appli).
    This architecture demonstrates the principles and recommendations discussed throughout
    the book, leveraging our data infrastructure categories of persistence, streaming,
    and analytics. This is a conceptual vision that we can discuss, critique, and
    improve as a community. Each choice we’ve made here has alternatives and should
    be considered a starting point for the sake of discussion.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管描述云原生数据的这样一个技术栈很诱人，但现实是因为用例的多样性和可用项目的数量实在太多，无法提出一个一刀切的解决方案。相反，让我们考虑一个简单天气应用案例的候选解决方案架构，如[图 11-1](#sample_architecture_for_a_weather_appli)所示。该架构展示了本书中讨论的原则和建议，利用了我们数据基础设施的持久性、流式处理和分析类别。这是一个概念视角，我们可以作为社区讨论、批评和改进的起点。我们在这里做出的每个选择都有替代方案，应当被视为讨论的起点。
- en: '![Sample architecture for a weather application](assets/mcdk_1101.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![天气应用程序的示例架构](assets/mcdk_1101.png)'
- en: Figure 11-1\. Sample architecture for a weather application
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1\. 天气应用程序的示例架构
- en: Let’s walk through the flow of data to understand how this architecture satisfies
    the needs of a weather application with multiple data requirements. We’ll assume
    that the entire server-side infrastructure stack is contained in a single Kubernetes
    cluster. More advanced forms of this architecture could include multicluster deployments
    or inclusion of networking capabilities such as load balancing or Ingress. For
    now, this will serve to illustrate the data architecture.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们走一遍数据流，以了解这个架构如何满足具有多个数据需求的天气应用程序的需求。我们假设整个服务器端基础架构堆栈包含在单个 Kubernetes 集群中。这种架构的更高级形式可能包括多集群部署或包括负载均衡或
    Ingress 等网络能力。目前，这将用来说明数据架构。
- en: Weather data is collected from weather stations and posted to a waiting API
    with an Ingress port into your running Kubernetes cluster. The business logic
    and server-side application code are containerized and run as microservices in
    the `application` Namespace. Client-side web and mobile applications also use
    the microservices via API calls, so all external data communications pass through
    the microservices layer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 天气数据从气象站收集，并发布到等待 API 的 Ingress 端口，进入正在运行的 Kubernetes 集群。业务逻辑和服务器端应用程序代码被容器化，并作为微服务在
    `application` 命名空间中运行。客户端的 Web 和移动应用程序也通过 API 调用使用这些微服务，因此所有外部数据通信都通过微服务层。
- en: Real-time data is sent to Cassandra for immediate use in the `persistence` Namespace.
    Once the data is committed at the desired consistency level, change data capture
    (CDC) emits the fully committed data to a Pulsar topic in the `streaming` Namespace.
    A Pulsar sink exports the raw data into a Parquet file put in object storage.
    At the same time, a Flink consumer subscribed to the topic analyzes new data for
    user-defined limits such as high or low temperatures. If a boundary condition
    is triggered, the temperature and station data is sent back to the microservices,
    which will send push alerts to the user application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实时数据被发送到 Cassandra，用于在 `persistence` 命名空间中的即时使用。一旦数据以所需的一致性级别提交，变更数据捕获 (CDC)
    将完全提交的数据发送到 `streaming` 命名空间中的 Pulsar 主题。Pulsar sink 将原始数据导出到放置在对象存储中的 Parquet
    文件中。同时，订阅了主题的 Flink 消费者分析新数据，以查找用户定义的限制，如高温或低温。如果触发了边界条件，则将温度和站点数据发送回微服务，微服务将向用户应用发送推送警报。
- en: In the `analytics` Namespace, two separate processes will use the Parquet data
    in object storage. Spark Jobs are used to group temperature averages across geographic
    data. This application code needs a wide view of the data stored for multiple
    locations and times. Ray applies analysis code written in Python to accomplish
    the predictive analysis of weather forecasting. The following five-day forecast
    is built daily by looking at recent data and applying against models built over
    historical trends. Both the Spark and Ray jobs populate new tables of fast transactional
    data in Cassandra.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `analytics` 命名空间中，两个独立的进程将使用对象存储中的 Parquet 数据。Spark 作业用于跨地理数据组织温度平均值。Ray 应用于对天气预测的预测分析，其分析代码用
    Python 编写。每天都会构建以下五天的预测，通过查看最近的数据并应用建立在历史趋势上的模型。Spark 和 Ray 作业都在 Cassandra 中填充新的快速事务数据表。
- en: 'This candidate architecture also demonstrates some recommendations that aren’t
    specific to a weather application that you should consider for all your deployments:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个候选架构还展示了一些建议，这些建议并不特定于天气应用程序，但你应考虑在所有部署中使用：
- en: Use Namespaces to separate domains within applications
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名空间来分隔应用程序内的领域。
- en: 'Deploying hundreds of Pods into a Kubernetes cluster can create organizational
    issues you won’t encounter with a small cluster on your laptop. Our recommendation
    here is simple: use Namespaces liberally to create order in your complex deployments.
    In the weather application example, we used simple Namespaces for each functional
    area of infrastructure: `application`, `persistence`, `streaming`, `analytics`,
    `security`, and `observability`. This approach will provide clear boundaries and
    naming when addressing services or managing Pods.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 集群中部署数百个 Pod 可能会带来组织问题，这在笔记本上的小集群中是遇不到的。我们在这里的建议很简单：大量使用命名空间来在复杂部署中创建秩序。在天气应用程序示例中，我们为基础设施的每个功能区域使用简单的命名空间：`application`、`persistence`、`streaming`、`analytics`、`security`
    和 `observability`。这种方法将在处理服务或管理 Pod 时提供清晰的边界和命名。
- en: Automate certificate management
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化证书管理
- en: In [Chapter 8](ch08.html#streaming_data_on_kubernetes), we asserted that the
    best security solutions are the ones you don’t have to think about. Automating
    your certificate management with cert-manager is an excellent example of a solution
    that makes that a possibility. Use TLS for all inter-service communication. For
    Ingress routes, ensure all traffic is HTTPS. Both cases use ACME plug-ins to rotate
    and assign certificates and never suffer another outage due to an expired certificate.
    When a security audit comes around, you can check the box that says you enforce
    all policies and guidelines and that all network communication is adequately encrypted.
    Just do it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html#streaming_data_on_kubernetes)中，我们断言最佳的安全解决方案是您无需考虑的解决方案。使用
    cert-manager 自动化证书管理就是一个使这成为可能的优秀示例。对所有服务间通信使用 TLS。对于入口路由，确保所有流量均为 HTTPS。这两种情况使用
    ACME 插件来旋转和分配证书，再也不会因为过期证书而遭遇停机事件。当安全审计来临时，您可以勾选一个框，表明您执行了所有政策和指南，并且所有网络通信都得到了充分的加密。就这么做吧。
- en: Prefer object storage
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更倾向于使用对象存储
- en: When choosing storage for the stateful services in your Kubernetes cluster,
    you should prefer object storage where possible. As discussed in [Chapter 7](ch07.html#the_kubernetes_native_database),
    several reasons behind this recommendation will put you in a better place for
    deploying cloud native data. The primary one is the impact of immutability on
    separating storage from running processes. Block storage is generally tightly
    aligned with compute infrastructure and has a higher level of complexity. The
    tight coupling between compute and storage must be broken to build truly serverless
    data infrastructure. Object storage has proven to be a key enabler. You can choose
    to implement your own object storage inside Kubernetes or via a cloud service.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 Kubernetes 集群中有状态服务的存储时，应尽可能选择对象存储。正如在[第7章](ch07.html#the_kubernetes_native_database)中讨论的那样，这一推荐背后有几个原因，将使您在部署云原生数据时处于更好的位置。主要原因是不可变性对将存储与运行过程分离的影响。块存储通常与计算基础设施紧密对齐，并且具有较高的复杂性。必须打破计算和存储之间的紧密耦合，以构建真正的无服务器数据基础设施。对象存储已被证明是一个关键的支持者。您可以选择在
    Kubernetes 内部实现自己的对象存储，也可以通过云服务来实现。
- en: Standardize on Prometheus APIs for metrics
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化 Prometheus API 用于指标
- en: Observability is mandatory for the complex infrastructure being built and run
    in Kubernetes, and the Prometheus API is the most widely adopted for metrics.
    Ensure that all services expose metrics in Prometheus format and that you collect
    them in a single place. The Prometheus API is implemented on various backends
    such as VictoriaMetrics and InfluxDB, giving you options for managing your own
    Prometheus deployment or connecting to a cloud service. Finally, collecting metrics
    is only one part of the challenge, and using those metrics to build dashboards
    and alerting completes the package.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 Kubernetes 中构建和运行的复杂基础设施，可观测性是强制性的，而 Prometheus API 是最广泛采用的指标解决方案。确保所有服务以
    Prometheus 格式公开指标，并在一个地方收集它们。Prometheus API 在各种后端上实现，如 VictoriaMetrics 和 InfluxDB，为您管理自己的
    Prometheus 部署或连接云服务提供了选择。最后，收集指标只是挑战的一部分，利用这些指标构建仪表板和警报则完成了整个方案。
- en: 'As this architecture demonstrates, you can now deploy all of the infrastructure
    needed to support a complex application in a single deployment in Kubernetes.
    It’s a flexible architecture in which new components can be tried and rejected
    or replaced as your requirements change: are you using the database that best
    fits your application needs? Should data be analyzed in the stream or after it
    is at rest? Architecture represents a series of choices based on capabilities,
    limits, knowledge, and philosophy.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这一架构展示的，您现在可以在 Kubernetes 中的单个部署中部署支持复杂应用所需的所有基础设施。这是一个灵活的架构，可以根据需求的变化尝试和拒绝或替换新组件：您正在使用最适合您应用需求的数据库吗？数据应该在流中分析还是在静态时分析？架构代表了基于能力、限制、知识和哲学的一系列选择。
- en: We look forward to future conversations and conference talks sharing the patterns
    that work and the antipatterns to avoid.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期待未来的对话和会议演讲，分享奏效的模式以及应避免的反模式。
- en: Deploy services, not servers
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署服务，而不是服务器
- en: 'One pattern we recommend is to start delivering capabilities at a higher level
    of abstraction: as services instead of servers. To help frame this discussion,
    think about the architectural design of a building. An architect must understand
    a structure’s requirements and then apply knowledge of materials and style to
    create a plan for builders to implement. When an architect considers where to
    place a door, it must be in a useful location, but one that will not weaken the
    overall structure. At no point do they specify minute details such as whether
    the door has to have brass hinges.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐的一种模式是从更高的抽象级别开始交付能力：作为服务而不是服务器。为了帮助界定这个讨论，可以将其比作建筑的架构设计。建筑师必须理解结构的需求，然后应用材料和风格的知识，创建一个计划供建筑师实施。当建筑师考虑放置门的位置时，它必须位于一个有用的位置，但不能削弱整体结构。在任何时候，他们都没有详细规定门是否必须有黄铜铰链。
- en: In the software industry, we’ve historically required a lot of minute details
    about individual compute, network, and storage resources well before we get to
    the deployment stage. For example, in the days of bare-metal infrastructure, the
    idea of installing a server was a significant event. Each server represented a
    physical device with a network connection that needed a whole bill of software,
    including operating system and applications to fill its role in the system. Procuring,
    configuring, and deploying a web server or database server was a process that
    could take months.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件行业中，我们在到达部署阶段之前，历来要求大量关于个别计算、网络和存储资源的细节。例如，在裸金属基础设施时代，安装服务器是一件重要的事件。每台服务器代表一个物理设备，具有需要整套软件支持的网络连接，包括操作系统和应用程序以填补系统中的角色。采购、配置和部署
    Web 服务器或数据库服务器是一个可能需要几个月的过程。
- en: Along with the migration to cloud computing came the aphorism that we should
    treat servers as “cattle, not pets.” Despite this helpful emphasis, the care and
    feeding of individual servers persist in plenty of cases. Where a network server
    accepts requests and then responds with data, it still requires people installing
    these systems to get much further into the details needed for today’s cloud native
    applications. These details create friction.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随着向云计算的迁移，有一句格言是我们应该把服务器看作是“牛群而非宠物”。尽管这种强调是有帮助的，但在许多情况下，对个别服务器的关心和维护仍然存在。网络服务器接受请求然后响应数据，仍然需要人员安装这些系统，进入到为今天的云原生应用程序所需的详细细节。这些细节产生摩擦。
- en: Kubernetes has encouraged a lot of progress in this area, emphasizing managing
    fleets of both stateless and stateful services with Deployments and StatefulSets,
    instead of focusing on individual Pods. It’s time to take this kind of thinking
    to the next level, and Kubernetes gives us the tools to make it happen.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 在这一领域推动了很大进展，强调使用 Deployments 和 StatefulSets 管理无状态和有状态服务的群集，而不是专注于单个
    Pod。现在是将这种思维推向更高级别的时候了，而 Kubernetes 给了我们实现这一目标的工具。
- en: Consider how the architecture in the previous section can be described as a
    vertically integrated service—a weather service—consisting of an assembly of microservices
    and data infrastructure built from Kubernetes primitives for compute, network,
    and storage. Recalling the “virtual datacenter” concept from [Chapter 1](ch01.html#introduction_to_cloud_native_data_infra),
    [Figure 11-2](#vertically_integrated_service) depicts the contents of a vertically
    integrated service that exposes a simple API. While such a service could encompass
    a wide range of business logic and infrastructure, that complexity is hidden behind
    a simple API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑前一节中的架构如何可以描述为纵向集成服务——天气服务——由一组微服务和从 Kubernetes 原语构建的数据基础设施组成。回顾来自[第 1 章](ch01.html#introduction_to_cloud_native_data_infra)的“虚拟数据中心”概念，[图
    11-2](#vertically_integrated_service) 描绘了一个纵向集成服务的内容，它暴露了一个简单的 API。尽管这样的服务可能包含广泛的业务逻辑和基础设施，但这种复杂性隐藏在一个简单的
    API 背后。
- en: '![Vertically integrated Service](assets/mcdk_1102.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![纵向集成服务](assets/mcdk_1102.png)'
- en: Figure 11-2\. Vertically integrated Service
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 纵向集成服务
- en: Returning to the example of the preceding weather Service, let’s examine how
    this represents a lot of power behind a deceptively simple API. When you zoom
    out, the collection of deployed infrastructure looks like a function machine.
    Rather than a simple microservice that merely gets and puts data records, this
    function machine takes multiple inputs and produces multiple outputs, as shown
    in [Figure 11-3](#weather_service_as_a_function_machine).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 回到之前的天气服务示例，让我们看看这如何代表一个看似简单 API 背后的强大功能。当您放大视角时，部署基础设施的集合看起来像一个函数机。这个函数机不仅仅是一个简单的微服务，仅仅获取和放置数据记录，它接受多个输入并生成多个输出，如图
    [11-3](#weather_service_as_a_function_machine) 所示。
- en: '![Weather Service as a function machine](assets/mcdk_1103.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![作为函数机的天气服务](assets/mcdk_1103.png)'
- en: Figure 11-3\. Weather Service as a function machine
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-3\. 作为函数机的天气服务
- en: As a function machine, the weather Service takes a stream of temperature measurements
    and produces multiple outputs. Beyond the ability to retrieve the individual records
    originally inserted, it produces value-added information like statistics, alerts,
    and forecasts that help users make sense of the data and how it relates to them
    personally.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为函数机，天气服务接收一系列温度测量数据并生成多个输出。除了能够检索最初插入的个别记录外，它还生成增值信息，如统计数据、警报和预测，帮助用户理解数据及其如何与个人相关联。
- en: A single traditional server won’t service the variety required, which is why
    modern data infrastructure and architectures exist. It takes architectural work
    to assemble the right parts, connect them, and create new data from the single
    input value.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 单个传统服务器无法满足所需的各种需求，这就是现代数据基础设施和架构存在的原因。需要进行架构工作来组装合适的部件、连接它们，并从单一输入值创建新的数据。
- en: Users and other applications expect service endpoints that respond to the data
    they need. What happens inside the function machine is left to the implementation
    meeting the API contract. When thinking shifts to outcomes, it’s clear how deploying
    services replaces the focus on deploying individual servers. Data services that
    can operate at various scales, built with resilience, using automation to keep
    us from worrying about minute details of the tools deployed. Using Kubernetes,
    you can specify what the function machine will do by using compute, network, and
    storage the same way you use any other consumable resource.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和其他应用期望能够响应其所需数据的服务端点。函数机内部发生的情况由实现满足 API 合同的方式决定。当思维转向结果时，清楚地表明部署服务取代了部署单个服务器的焦点。数据服务可以在各种规模上运行，具备弹性，并使用自动化来处理工具部署的微小细节，从而使我们不必担心这些问题。利用
    Kubernetes，您可以像使用其他可消耗资源一样，通过使用计算、网络和存储来指定函数机将执行的操作。
- en: Process
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过程
- en: Now that we have discussed the people and technology aspects of moving stateful
    workloads to Kubernetes, let’s look at the practical process steps required to
    successfully execute this transition. To be clear, *process* doesn’t mean more
    meetings or people involved in decision making. The dictionary defines a process
    as “a series of actions or steps to achieve a particular end.” For a cloud native
    deployment process, let’s append the word “automated,” and that’s the right spirit.
    The goal is to define and codify an automated process that enables you to deploy
    constantly with confidence. You’ll know you’ve succeeded when you have not only
    a complete cloud native application stack managed in Kubernetes, but also a repeatable
    set of steps to reproduce that stack.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了将有状态工作负载移至 Kubernetes 的人员和技术方面，让我们来看看成功执行此转变所需的实际流程步骤。需要明确的是，“过程”并不意味着需要更多的会议或参与决策的人员。词典定义过程为“为达到特定目标而采取的一系列行动或步骤”。对于云原生部署过程，让我们加上“自动化”这个词，这才是正确的精神。目标是定义和编码一个自动化过程，使您能够自信地持续部署。当您不仅在
    Kubernetes 中管理完整的云原生应用程序堆栈，而且有一套可重复的步骤来复制该堆栈时，您就知道已经成功了。
- en: Where are you in your cloud native journey? You can be at the starting line
    or somewhere further along. For either starting point, we recommend the stages
    shown in [Figure 11-4](#stages_of_moving_data_workloads_to_kube) for adopting
    cloud native data in Kubernetes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的云原生旅程中，您可能处于起点或更进一步。无论起点在哪里，我们建议采用图 [11-4](#stages_of_moving_data_workloads_to_kube)
    中显示的阶段，以在 Kubernetes 中采纳云原生数据。
- en: '![Stages of moving data workloads to Kubernetes](assets/mcdk_1104.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![将数据工作负载移至 Kubernetes 的各个阶段](assets/mcdk_1104.png)'
- en: Figure 11-4\. Stages of moving data workloads to Kubernetes
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-4\. 将数据工作负载移至 Kubernetes 的各个阶段
- en: Each stage contains core competencies developed by organizations that successfully
    made this transition. You’ll want to adopt and stabilize these competencies before
    moving on. Take your time and use the many resources available to become proficient
    in each stage. We’ll explore each stage in greater detail next.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段都包含由成功进行过渡的组织开发的核心能力。在继续前进之前，你需要采纳并稳定这些能力。利用现有的许多资源花时间成为每个阶段的专家。我们接下来将更详细地探讨每个阶段。
- en: DevOps practices
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DevOps 实践
- en: 'Before you even begin the adoption of Kubernetes, you should completely embrace
    two areas of managing cloud native infrastructure:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在你甚至开始采用 Kubernetes 之前，你应该完全掌握两个管理云原生基础设施的领域：
- en: Continuous integration/continuous delivery (CI/CD)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成/持续交付（CI/CD）
- en: DevOps teams have already widely used CI/CD for years. Correctly implemented,
    the outcome is a system that gives you the agility to make changes multiple times
    in a day with high confidence. For cloud native infrastructure, this has also
    been described as [GitOps](https://oreil.ly/p20Gt). Using source control as the
    starting point for infrastructure changes that a system like [Argo CD](https://oreil.ly/fdj2s)
    will use to automate deployments. Made a mistake? Roll it back.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，DevOps 团队已广泛使用 CI/CD。正确实施后，这将使你拥有每天多次进行高信心更改的敏捷性系统。对于云原生基础设施，这也被描述为[GitOps](https://oreil.ly/p20Gt)。使用源代码控制作为基础设施更改的起点，系统如[Argo
    CD](https://oreil.ly/fdj2s)将用于自动化部署。犯了个错误？回滚它。
- en: Observability
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察性
- en: You may have heard the phrase “Trust but verify,” and nowhere is that more important
    than a highly complex cloud native deployment. You need to see what’s happening
    and make adjustments, especially when using CI/CD. In the process of building
    services that perform to meet SLAs, every step must be observed. This builds confidence
    that the changes you make are working; if not, you can roll back and try again.
    Every step is being watched and recorded.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听过“信任但验证”的说法，在高度复杂的云原生部署中尤为重要。你需要看到发生了什么并进行调整，特别是在使用 CI/CD 时。在构建符合 SLA 的服务过程中，每一步都必须被观察到。这建立了对你所做更改是否有效的信心；如果不行，你可以回滚并重试。每一步都在被监视和记录。
- en: While specific implementation details of your CI/CD and observability practices
    will inevitably change as you begin to adopt Kubernetes, having a firm foundation
    in these areas will set you up nicely for success.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然随着你开始采用 Kubernetes，你的 CI/CD 和可观察性实践的具体实施细节将不可避免地发生变化，但在这些领域建立坚实的基础将为你的成功打下良好的基础。
- en: Basic Kubernetes maturity
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本的 Kubernetes 成熟度
- en: 'If you are just starting with Kubernetes, this is a vital stage. Setting up
    a basic Kubernetes deployment on your laptop or cloud is an excellent way to learn,
    but your first production Kubernetes projects will stress the capability of your
    operations. It’s realistic to take several months in this phase to fully understand
    all of the potential issues and solutions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始接触 Kubernetes，这是一个至关重要的阶段。在你的笔记本电脑或云上设置基本的 Kubernetes 部署是学习的绝佳方式，但是你的第一个生产
    Kubernetes 项目将考验你的运维能力。在这个阶段完全理解所有潜在问题和解决方案可能需要几个月的时间：
- en: Deploying and managing clusters
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 部署和管理集群
- en: This is the most fundamentally important experience you can have. While there
    is great learning in building your own Kubernetes clusters and installing your
    own databases, as we noted in [Chapter 3](ch03.html#databases_on_kubernetes_the_hard_way),
    you can make progress toward production capability more quickly by using a managed
    Kubernetes service or tools like Terraform that can help automate Kubernetes cluster
    deployments. You’ll get the most value from learning how to deploy and connect
    services both inside and outside the cluster, tasks that many new users find surprisingly
    tricky. You’ll also want to understand the metrics collected for various elements
    of a cluster and what they can tell you about performance and capacity.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以获得的最重要的经验。尽管自己构建 Kubernetes 集群并安装自己的数据库可以获得很大的学习成果，正如我们在[第三章](ch03.html#databases_on_kubernetes_the_hard_way)中所提到的，通过使用托管
    Kubernetes 服务或像 Terraform 这样的工具可以更快地实现生产能力。学习如何部署和连接集群内外的服务将为你带来最大的价值，这些任务让许多新用户感到意外地棘手。你还需要理解集群各个元素收集的指标以及它们对性能和容量的意义。
- en: Moving stateless workloads
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移无状态工作负载
- en: Once you are proficient at working with Kubernetes and understand some of the
    complexities, you can begin moving stateless workloads. The resource requirements
    for these workloads tend to be more straightforward to understand, and the body
    of prior art of deploying stateless workloads is deep. You’ll likely need to manage
    external networking to stateful workloads and data infrastructure that you aren’t
    yet moving during this stage. After a few successful migrations, you should feel
    comfortable with managing production workloads in Kubernetes and begin to see
    improvements in your operational tempo.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你熟练掌握 Kubernetes 的工作并理解一些复杂性，你可以开始移动无状态工作负载。这些工作负载的资源需求往往更加简单明了，而且已有大量关于部署无状态工作负载的先前实践。在此阶段，您可能需要管理外部网络到尚未移动的有状态工作负载和数据基础设施。经过几次成功的迁移后，您应该能够在
    Kubernetes 中管理生产工作负载并开始看到运营节奏的改善。
- en: 'Here are a few competencies we recommend building as you start to move stateless
    workloads:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们建议在开始移动无状态工作负载时建立的几个能力：
- en: Leverage continuous delivery
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 利用持续交付
- en: Using `kubectl` on the command line is great for learning, but terrible for
    daily operations. Get used to managing groups of resources as services instead
    of individual Pods and let the Kubernetes Operators do the work of maintaining
    your systems.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上使用 `kubectl` 是学习的好方法，但在日常运营中却很糟糕。习惯于将资源组管理为服务，而不是单个 Pods，并让 Kubernetes
    Operators 来维护您的系统。
- en: Network routing and Ingress
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 网络路由和 Ingress
- en: Bad things happen when you fight the way Kubernetes works, and one place that
    people new to Kubernetes fail is with network communications. You should prefer
    service names over IP addresses and understand how the LoadBalancer and Ingress
    APIs work.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当您试图与 Kubernetes 的工作方式对抗时，会发生不好的事情，新手在网络通信方面的一个常见失败点。您应优先使用服务名称而不是 IP 地址，并了解
    LoadBalancer 和 Ingress API 的工作原理。
- en: Default security and observability
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认安全性和可观测性
- en: Deployed services should default to a secure state and expose observability
    interfaces such as metrics endpoints with no manual configuration required. Ensure
    that every new service is deployed with network-level encryption. To manage systems
    effectively, SREs must have the metrics available to diagnose problems without
    gaps in coverage.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的服务应默认处于安全状态，并公开可观测的接口，如无需手动配置的度量端点。确保每个新服务都使用网络级加密部署。为了有效管理系统，SRE 必须有可用的度量标准来诊断问题，确保覆盖没有间隙。
- en: These competencies will serve you well as you move into the following stages.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进入后续阶段时，这些能力将为您提供良好的服务。
- en: Deploy stateful workloads
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署有状态工作负载
- en: 'The next stage is to migrate stateful workloads to Kubernetes, including their
    supporting data infrastructure. In this case, we recommend a phased approach in
    roughly the following order:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的阶段是将有状态工作负载迁移到 Kubernetes，包括它们的支持数据基础设施。在这种情况下，我们建议采用分阶段的方法，大致按以下顺序进行：
- en: Persistence
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 持久性
- en: We recommend migrating databases as your first stateful workloads. Databases
    have been running in Kubernetes for far longer than other stateful workloads,
    with a higher level of maturity and documentation. Chapters [4](ch04.html#automating_database_deployment_on_kuber)
    and [5](ch05.html#automating_database_management_on_kuber) provide guidance on
    deploying with Helm and operators, respectively. Start with your development environment
    and parallel the same production traffic loads outside Kubernetes. Get proficient
    at backups and restore operations. Make sure your test cases include the loss
    of database compute and storage resources and move into staging and production
    when you feel your recovery response is sufficient.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议首先迁移数据库作为您的第一个有状态工作负载。数据库在 Kubernetes 中的运行时间比其他有状态工作负载长得多，并且有更高的成熟度和文档支持。第
    4 章和第 5 章分别提供了使用 Helm 和 operators 部署的指导。从您的开发环境开始，并模拟在 Kubernetes 外部的相同生产流量负载。熟练掌握备份和恢复操作。确保您的测试案例包括数据库计算和存储资源的丢失，并在感到恢复响应足够时进入分阶段和生产环境。
- en: Streaming
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 流式处理
- en: 'The Kubernetes readiness for streaming workloads is becoming much more mature,
    but we still recommend you migrate these workloads after persistence workloads.
    As we discussed in [Chapter 8](ch08.html#streaming_data_on_kubernetes), streaming
    workloads have some unique properties that can make them easier for migrations:
    most use cases don’t need long-term message storage, so switching from one streaming
    service to the other typically doesn’t require data migration. Since streaming
    is network intensive, proficiency with Kubernetes networking is a must.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 对流处理工作负载的准备性正在变得更加成熟，但我们仍建议在持久性工作负载之后迁移这些工作负载。正如我们在[第8章](ch08.html#streaming_data_on_kubernetes)中讨论的那样，流处理工作负载具有一些独特的特性，这些特性可以使它们更容易进行迁移：大多数用例不需要长期消息存储，因此从一个流处理服务切换到另一个通常不需要数据迁移。由于流处理对网络的需求很高，精通
    Kubernetes 网络是必要的。
- en: Analytics
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 分析
- en: The complex nature of analytic workloads makes them the next logical choice
    for migration into Kubernetes after persistence and streaming are in place. A
    good starting approach is to deploy analytic workloads into a dedicated Kubernetes
    cluster so that you can learn the Kubernetes deployment modes and special considerations
    for job management and data access. Ultimately you should consider using a different
    scheduler to support batch workloads such as YuniKorn or Volcano, as we discussed
    in [Chapter 9](ch09.html#data_analytics_on_kubernetes).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 分析工作负载的复杂性使其成为在持久性和流式处理之后迁移到 Kubernetes 的下一个逻辑选择。一个良好的起步方法是将分析工作负载部署到一个专用的 Kubernetes
    集群中，这样你就可以学习 Kubernetes 的部署模式以及作业管理和数据访问的特殊考虑因素。最终，你应该考虑使用不同的调度程序来支持批处理工作负载，比如
    YuniKorn 或 Volcano，正如我们在[第9章](ch09.html#data_analytics_on_kubernetes)中讨论的那样。
- en: AI/ML workloads
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: AI/ML 工作负载
- en: You may consider your AI/ML workloads for extra migration bonus points. As we
    discussed in [Chapter 10](ch10.html#machine_learning_and_other_emerging_use),
    this is one of the least mature areas organizations have concerning data infrastructure.
    Projects like KServe and Feast are well suited for Kubernetes, so this isn’t the
    concern. The real question is whether your organization is proficient in MLOps
    and data engineering. You may be ready, but as a general recommendation for most
    organizations, this is an area you should address after other analytic workloads.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以考虑为额外的迁移加分考虑你的 AI/ML 工作负载。正如我们在[第10章](ch10.html#machine_learning_and_other_emerging_use)中讨论的那样，这是组织在数据基础设施方面最不成熟的领域之一。像
    KServe 和 Feast 这样的项目非常适合 Kubernetes，因此这不是问题。真正的问题是你的组织是否精通 MLOps 和数据工程。你可能已经准备好了，但作为大多数组织的一般建议，这是你应该在处理其他分析工作负载之后考虑的一个领域。
- en: The details of your specific adoption plan will vary according to your Kubernetes
    readiness, the maturity of each workload, and the underlying data infrastructure
    on which it is built. The Kubernetes native definitions in [Chapter 7](ch07.html#the_kubernetes_native_database)
    provide a valuable way of assessing the readiness of your infrastructure and where
    you may encounter additional work to properly deploy and manage it on Kubernetes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你具体采用的采用计划的细节将根据你的 Kubernetes 准备情况、每个工作负载的成熟度以及其构建在其上的基础数据基础设施而有所不同。[第7章](ch07.html#the_kubernetes_native_database)中的
    Kubernetes 本地定义为评估你的基础设施准备性提供了一种有价值的方式，以及在 Kubernetes 上正确部署和管理它时可能会遇到的额外工作。
- en: Continually optimize your deployments
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续优化你的部署
- en: 'In the early days of the internet explosion, known as the “dot-com” years,
    startups were vying for venture capital and presenting plans. Almost every pitch
    deck would include a slide showing the planned datacenter build-out. It was there
    for a good reason: datacenters were a significant capital cost, and when asking
    for money, that had to be in the budget.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网爆炸初期，即所谓的“点com”年代，初创公司争相获得风险投资并提出计划。几乎每份推介文档都包含一张展示计划数据中心建设的幻灯片。这是有充分理由的：数据中心是一项重大的资本成本，而在筹集资金时，这一点必须考虑在预算内。
- en: 'Things are different today. Startups now rent what they need from a cloud provider,
    and larger enterprises that still manage datacenters are reducing their footprints
    quickly. In this cloud native world, we have a lot more flexibility over the infrastructure
    we use, which gives greater opportunity for managing elements like cost, quality,
    and the trade-offs between them:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如今情况已然不同。现在的初创公司从云服务提供商那里租用他们所需的资源，而仍在管理数据中心的大型企业正在迅速减少其占地面积。在这个云原生的世界里，我们对使用的基础设施有了更多的灵活性，这为管理成本、质量以及它们之间的权衡提供了更大的机会：
- en: Optimizing cost
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 优化成本
- en: In any business, you have things that add to the ledger and subtract. People
    in finance call that the *cost of goods sold* (*COGS*). If you are building cars,
    COGS may account for costs like steel, the factory, and labor. Selling cars covers
    COGS and brings profit to the company. Controlling costs and making them predictable
    is a way to create a sustainable business.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何业务中，你都有增加和减少的事项。金融人士称之为*销售成本*（*COGS*）。如果你在造汽车，COGS可能包括像钢铁、工厂和劳动力等成本。销售汽车可以覆盖COGS，并为公司带来利润。控制成本并使其可预测是创建可持续业务的一种方式。
- en: 'In application software technology today, there are four main components of
    COGS: human labor, compute, network, and storage. These metrics have been tracked
    for a long time, and a lot of progress has been made to reduce costs and make
    things more predictable. DevOps has reduced the amount of human interaction needed,
    and cloud has normalized infrastructure costs. As mentioned in [Chapter 1](ch01.html#introduction_to_cloud_native_data_infra),
    Kubernetes wasn’t a revolution. It was an evolution and a place to converge to
    help solve the problem of COGS with application software technology, a solution
    that doesn’t compromise on quality and creates predictability.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的应用软件技术中，COGS有四个主要组成部分：人力劳动、计算、网络和存储。这些指标已经被长时间追踪，已经取得了很多降低成本和增加可预测性的进展。DevOps已经减少了所需的人为交互量，云已经将基础设施成本正常化。如[第1章](ch01.html#introduction_to_cloud_native_data_infra)所述，Kubernetes并不是一场革命，它是一场进化，一个汇聚的地方，以帮助解决应用软件技术中COGS的问题，这是一个既不妥协质量又创造可预测性的解决方案。
- en: Elasticity is one aspect of cloud native data that can lead to significant cost
    savings. If services are initially deployed with fixed capacity, optimize your
    deployments with the ability to not only scale up but also scale down when needed.
    When possible, use automation such as [HorizontalPodAutoscaler](https://oreil.ly/AoiRm)
    for hands-off scaling with the added benefit of scaling under load to maintain
    performance. Choosing projects that can support elastic workload management is
    the most crucial way to be sure you are getting the best performance for the cost.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性是云原生数据的一个方面，可以带来显著的成本节约。如果服务最初部署时具有固定容量，请优化您的部署能力，不仅可以在需要时扩展，而且可以在需要时缩小。尽可能使用自动化，例如[HorizontalPodAutoscaler](https://oreil.ly/AoiRm)，以便在负载下进行自动扩展，以维持性能。选择能支持弹性工作负载管理的项目是确保您以最佳性能获取最低成本的关键方式。
- en: Optimizing quality (availability and performance)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 优化质量（可用性和性能）
- en: Reducing human toil reduces the number of people needed to run your Kubernetes
    deployments. Automated deployments and sane defaults go a long way to reducing
    labor, but self-healing infrastructure will reduce the number of people that need
    to be on hand for when things go bad. Optimize your self-healing deployments by
    testing the recovery of services by injecting failures into your cluster. Kill
    a Pod or a StatefulSet. What happens to the surrounding services? If that scenario
    makes you nervous, you need to optimize your Deployment until you are comfortable
    with failures.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 减少人力劳动可以减少运行Kubernetes部署所需的人数。自动化部署和合理的默认设置可以很大程度上减少劳动，但是自愈基础设施将减少需要随时待命的人数。通过在集群中注入故障来测试服务恢复，优化您的自愈部署。杀死一个Pod或StatefulSet。周围的服务会发生什么？如果这种情况让你感到紧张，你需要优化您的部署，直到对故障感到舒适。
- en: 'Reducing costs should never be optimized by sacrificing quality. Continuously
    optimize for price and performance. As you constantly look to optimize your Kubernetes
    deployments, you should ask yourself these questions:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 绝不能通过牺牲质量来优化成本。不断优化价格和性能。当您不断寻求优化您的Kubernetes部署时，您应该问自己以下问题：
- en: Are you maintaining SLAs?
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否在维护SLA？
- en: Is the need for human interaction reduced?
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否减少了人为交互的需求？
- en: Can you scale to zero with no traffic?
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有流量的情况下，你能否扩展到零？
- en: 'Given the current trends in operations, *AIOps* is a term that will soon enter
    your vocabulary, if it hasn’t already. AIOps doesn’t mean operations for AI/ML
    workloads; it refers to the use of AI/ML to manage infrastructure intelligently.
    With a strong baseline of observability, the metrics and other information you’re
    collecting can be analyzed and used to generate recommended adjustments to your
    infrastructure. Automated scaling up and scaling down of Deployments and StatefulSets
    is just the beginning. We hope to soon see advanced AIOps capabilities, for example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于运维领域当前的趋势，*AIOps* 是一个很快会进入你词汇表的术语，如果你还没有接触到的话。AIOps并不是指针对AI/ML工作负载的运维，它指的是利用AI/ML智能管理基础设施。在观测性的强基础上，你收集的度量和其他信息可以被分析，并用来生成对基础设施的推荐调整。自动扩展和缩减部署和StatefulSets只是一个开始。我们希望很快能看到更先进的AIOps能力，例如：
- en: A system that detects increased usage of a vertically integrated service in
    a given region and responds by deploying microservices and supporting infrastructure
    into that region, and proactively replicating data to optimize latency for client
    applications.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个系统检测到在特定区域使用率增加的垂直集成服务，并响应地部署微服务和支持基础设施到该区域，并主动复制数据以优化客户应用程序的延迟。
- en: A multitenant system that detects when a particular tenant is demonstrating
    increased usage and migrates traffic for that tenant to dedicated infrastructure.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个多租户系统，当特定租户展示出增加的使用情况时，检测到并将该租户的流量迁移到专用基础设施上。
- en: These are just a couple of examples of what we might be able to achieve. We
    already have the foundations in the controller-reconciler pattern implemented
    by the Kubernetes control plane. Today’s operators are heavily procedural, but
    what kind of decision flexibility could we build into future operators in order
    to achieve a desired quality of service? Stay tuned, because the cloud native
    world is constantly evolving.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们可能实现的一些例子。我们已经在Kubernetes控制平面实现的控制器-协调器模式上有了基础。今天的运维人员是高度程序化的，但我们可以在未来的操作员中建立什么样的决策灵活性，以实现所需的服务质量？请继续关注，因为云原生世界正在不断演变。
- en: The Future of Cloud Native Data
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生数据的未来
- en: Over the course of a career in information technology, you’re likely to see
    several generational shifts. A subtle evolution occurs over five- or ten-year
    periods as changes slowly build on a previous generation of technology, until
    the day you realize that the way you work is fundamentally new. Perhaps you’ve
    spent part of your career installing operating systems on physical servers. In
    a more recent generation, we’ve started using scripts to provision cloud instances
    with operating system images ready for software to be installed. Kubernetes represents
    the latest generation, where engineers define everything they need in a text file,
    and the control plane converges the state while performing all of the tasks every
    previous generation of engineers had to do manually.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息技术领域的职业生涯中，你可能会见证几次世代变革。在五到十年的时间里，技术会逐渐演进，改变会悄然积累，直到有一天你意识到自己的工作方式已经彻底不同了。也许你的职业生涯的一部分是在物理服务器上安装操作系统。在更近代的世代中，我们开始使用脚本为云实例提供操作系统镜像，并准备安装软件。Kubernetes代表了最新一代，工程师们可以在文本文件中定义所需的一切，控制平面在执行之时汇聚状态，并执行以前每一代工程师必须手动完成的所有任务。
- en: What kind of progress will we continue to see from generation to generation?
    The following is a fictional story about a very possible near future. This story
    provides an example of where we could go as a community of data infrastructure
    engineers. The changes will be subtle but profound.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 从世代到世代，我们会继续看到怎样的进步？以下是一个关于非常可能的近期未来的虚构故事。这个故事展示了作为数据基础设施工程师社区的我们可能会走向何方的一个例子。变化将是微妙而深刻的。
- en: This story aims to help you look beyond the drudgery of configuration files
    and the shiny distraction of hot new projects and focus on how embracing cloud
    native data opens the door for a more fantastic tomorrow. When the toil of infrastructure
    is reduced or even removed, think of the new abilities we have and how this could
    translate into tangible daily outcomes. This isn’t science fiction, and you don’t
    have to wait for the next generational breakthrough. All of this is feasible today
    with the correct application of existing technology.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事旨在帮助您超越配置文件的繁琐和新项目的诱惑，关注如何拥抱云原生数据为更美好的明天打开大门。当基础设施的劳动力减少甚至消失时，想象一下我们拥有的新能力，以及这如何能够转化为具体的日常成果。这不是科幻小说，并且您不必等待下一代突破。正确应用现有技术，今天就能实现所有这些。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You made it! We have taken quite a journey together and covered a lot of ground,
    not only in this chapter but in the entire book. At the outset, we presented an
    ambitious goal of putting stateful workloads on Kubernetes. As we learned from
    Craig McLuckie, this is very much in line with the original goals of the Kubernetes
    project. Ultimately, we will reverse the trend of infrastructure-aware applications
    and have application-aware platforms and building applications with speed, efficiency,
    and confidence.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您成功了！我们一起走了一段相当漫长的旅程，并且涵盖了很多内容，不仅仅是本章，而是整本书。一开始，我们提出了一个宏大的目标：在Kubernetes上运行有状态工作负载。正如我们从Craig
    McLuckie那里学到的，这与Kubernetes项目的最初目标非常一致。最终，我们将扭转应用程序对基础设施的感知趋势，并拥有应用程序感知的平台，并以速度、效率和信心构建应用程序。
- en: 'Hopefully, we’ve convinced you that this is achievable technically and extremely
    compelling from a cost and quality standpoint. In this chapter, we’ve focused
    on helping you chart the course to make this transition by focusing on the people,
    process, and technology changes you’ll need to make to be successful:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我们已经说服您，从技术上讲，这是可行的，并且从成本和质量的角度来看非常具有吸引力。在本章中，我们专注于帮助您规划过渡的路线，重点放在您需要成功进行的人员、流程和技术变更上：
- en: Help people in your organization skill up on Kubernetes and data technologies,
    including those we’ve covered here. If you are in leadership, help place people
    in roles that give them direct responsibility and accountability for infrastructure
    choices. Empower them to interact and contribute in open source communities and
    be the catalyst for change in your organization.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助您组织内的人们精通Kubernetes和数据技术，包括我们在这里涵盖的内容。如果您身居领导岗位，请帮助将人员安置到能够直接负责和承担基础设施选择的角色中。赋予他们参与和贡献开源社区的能力，并成为您组织中变革的催化剂。
- en: Select data infrastructure technologies that embody cloud native and Kubernetes
    native principles. Use Kubernetes custom resources and operators to raise the
    level of abstraction in your architecture to begin thinking about managing services
    that implement well-defined APIs instead of managing individual servers.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择体现云原生和Kubernetes原生原则的数据基础设施技术。使用Kubernetes自定义资源和操作符提升架构抽象级别，开始考虑管理实现了明确定义API的服务，而不是管理单个服务器。
- en: Update your processes to automate “all the things”—from integration and delivery
    (CI/CD) to observability and management (AIOps). Leverage these mature processes
    as you strategically migrate stateful workloads to Kubernetes. Carefully balance
    the trade-offs between cost and quality to sustainably deliver the best experiences
    for your end users.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新您的流程，将“一切”自动化——从集成和交付（CI/CD）到可观察性和管理（AIOps）。在您战略性地将有状态工作负载迁移到Kubernetes时，利用这些成熟的流程。在成本和质量之间谨慎平衡，以可持续地为最终用户提供最佳体验。
- en: Now, the narrative of this journey shifts to you and where you choose to take
    us next. While this book has provided a broad overview of the world of data infrastructure
    on Kubernetes, each chapter could easily fill a book on its own. We encourage
    you to continue learning where your specific interests take you and share what
    you learn to continue to fill the gaps in our collective knowledge. As you successfully
    manage your cloud native data on Kubernetes, we hope to hear your story.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这段旅程的叙述转向了您和您选择带领我们前进的地方。虽然本书为您提供了关于Kubernetes上数据基础设施世界的广泛概述，但每一章都可能轻易填满一本书。我们鼓励您继续学习，深入到您特别感兴趣的领域，并分享您的所学，以持续填补我们集体知识的空白。当您成功地管理您在Kubernetes上的云原生数据时，我们期待听到您的故事。
