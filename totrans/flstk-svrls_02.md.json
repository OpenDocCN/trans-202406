["```\n~ npx create-react-app amplify-react-app\n~ cd amplify-react-app\n```", "```\n~ npm install aws-amplify\n```", "```\n~ amplify init\n\n? Enter a name for the project: cryptoapp\n? Enter a name for the environment: local\n? Choose your default editor: <your-preferred-editor>\n? Choose the type of app that you're building: javascript\n? What javascript framework are you using: react\n? Source Directory Path: src\n? Distribution Directory Path: build\n? Build Command: npm run-script build\n? Start Command: npm run-script start\n? Do you want to use an AWS profile? Here, choose *Y* and pick the AWS\n  profile you created when you ran `amplify configure`.\n```", "```\n~ amplify add function\n\n? Select which capability you want to add: Lambda function\n? Provide a friendly name for your resource to be used as a label for\n  this category in the project: cryptofunction\n? Provide the AWS Lambda function name: cryptofunction\n? Choose the function runtime that you want to use: NodeJS\n? Choose the function template that you want to use: Serverless express\n  function (Integration with Amazon API Gateway)\n? Do you want to access other resources created in this project from\n  your Lambda function? No\n? Do you want to invoke this function on a recurring schedule? No\n? Do you want to configure Lambda layers for this function? No\n? Do you want to edit the local Lambda function now? No\n```", "```\nawsServerlessExpress.proxy(server, event, context);\n```", "```\n/* amplify/backend/function/cryptofunction/src/app.js /*\n\napp.get('/coins', function(req, res) {\n  const coins = [\n    { name: 'Bitcoin', symbol: 'BTC', price_usd: \"10000\" },\n    { name: 'Ethereum', symbol: 'ETH', price_usd: \"400\" },\n    { name: 'Litecoin', symbol: 'LTC', price_usd: \"150\" }\n  ]\n  res.json({\n    coins\n  })\n})\n```", "```\n~ amplify add api\n\n? Please select from one of the below mentioned services: REST\n? Provide a friendly name for your resource to be used as a label for\n  this category in the project: cryptoapi\n? Provide a path: /coins\n? Choose a Lambda source: Use a Lambda function already added in the\n  current Amplify project\n? Choose the Lambda function to invoke by this path: cryptofunction\n? Restrict API access: N\n? Do you want to add another path? N\n```", "```\n~ amplify push\n\n? Are you sure you want to continue? Y\n```", "```\n ~ amplify status\n\nCurrent Environment: local\n\n| Category | Resource name  | Operation | Provider plugin   |\n| -------- | -------------- | --------- | ----------------- |\n| Function | cryptofunction | No Change | awscloudformation |\n| Api      | cryptoapi      | No Change | awscloudformation |\n```", "```\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n```", "```\nAPI.get(apiName: String, path: String, data?: Object)\n```", "```\nAPI.get('cryptoapi', '/coins')\n```", "```\n// promise\nAPI.get('cryptoapi', '/coins')\n  .then(data => console.log(data))\n  .catch(error => console.log(error))\n\n// async await\nconst data = await API.get('cryptoapi', '/coins')\n```", "```\n// Import useState and useEffect hooks from React\nimport React, { useState, useEffect } from 'react'\n\n// Import the API category from AWS Amplify\nimport { API } from 'aws-amplify'\n\nimport './App.css';\n\nfunction App() {\n  // Create coins variable and set to empty array\n  const [coins, updateCoins] = useState([])\n\n  // Define function to all API\n  async function fetchCoins() {\n    const data = await API.get('cryptoapi', '/coins')\n    updateCoins(data.coins)\n  }\n\n  // Call fetchCoins function when component loads\n  useEffect(() => {\n    fetchCoins()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {\n        coins.map((coin, index) => (\n          <div key={index}>\n            <h2>{coin.name} - {coin.symbol}</h2>\n            <h5>${coin.price_usd}</h5>\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App\n```", "```\n~ npm start\n```", "```\n~ cd amplify/backend/function/cryptofunction/src\n~ npm install axios\n~ cd ../../../../../\n```", "```\n// Import axios\nconst axios = require('axios')\n\napp.get('/coins', function(req, res) {\n  // Define base url\n  let apiUrl = `https://api.coinlore.com/api/tickers?start=0&limit=10`\n\n  // Check if there are any query string parameters\n  // If so, reset the base url to include them\n  if (req.apiGateway && req.apiGateway.event.queryStringParameters) {\n   const { start = 0, limit = 10 } = req.apiGateway.event.queryStringParameters\n   apiUrl = `https://api.coinlore.com/api/tickers/?start=${start}&limit=${limit}`\n  }\n\n  // Call API and return response\n  axios.get(apiUrl)\n    .then(response => {\n      res.json({  coins: response.data.data })\n    })\n    .catch(err => res.json({ error: err }))\n})\n```", "```\n~ amplify push\n\nCurrent Environment: local\n\n| Category | Resource name  | Operation | Provider plugin   |\n| -------- | -------------- | --------- | ----------------- |\n| Function | cryptofunction | Update    | awscloudformation |\n| Api      | cryptoapi      | No Change | awscloudformation |\n\n? Are you sure you want to continue? Y\n```", "```\n// Create additional state to hold user input for limit and start properties\nconst [input, updateInput] = useState({ limit: 5, start: 0 })\n\n// Create a new function to allow users to update the input values\nfunction updateInputValues(type, value) {\n  updateInput({ ...input, [type]: value })\n}\n\n// Update fetchCoins function to use limit and start properties\nasync function fetchCoins() {\n  const { limit, start } = input\n  const data = await API.get('cryptoapi', `/coins?limit=${limit}&start=${start}`)\n  updateCoins(data.coins)\n}\n\n// Add input fields to the UI for user input\n<input\n  onChange={e => updateInputValues('limit', e.target.value)}\n  placeholder=\"limit\"\n/>\n<input\n  placeholder=\"start\"\n  onChange={e => updateInputValues('start', e.target.value)}\n/>\n\n// Add button to the UI to give user the option to call the API\n<button onClick={fetchCoins}>Fetch Coins</button>\n```", "```\n~ npm start\n```"]