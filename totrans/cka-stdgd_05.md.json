["```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-container\nspec:\n  containers:\n  - image: nginx\n    name: app\n    ports:\n    - containerPort: 80\n  - image: curlimages/curl:7.79.1\n    name: sidecar\n    args:\n    - /bin/sh\n    - -c\n    - 'while true; do curl localhost:80; sleep 5; done;'\n```", "```\n$ kubectl create -f pod.yaml\npod/multi-container created\n$ kubectl logs multi-container -c sidecar\n...\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n```", "```\n$ kubectl run nginx --image=nginx --port=80\npod/nginx created\n$ kubectl get pod nginx -o wide\nNAME    READY   STATUS    RESTARTS   AGE   IP           NODE       \\\nNOMINATED NODE   READINESS GATES\nnginx   1/1     Running   0          37s   172.17.0.4   minikube   \\\n<none>           <none>\n$ kubectl get pod nginx -o yaml\n...\nstatus:\n  podIP: 172.17.0.4\n...\n```", "```\n$ kubectl get nodes\nNAME       STATUS   ROLES                  AGE   VERSION\nminikube   Ready    control-plane,master   42d   v1.21.2\n$ kubectl get nodes minikube -o json | jq .spec.podCIDR\n\"172.17.0.0/24\"\n```", "```\n$ kubectl run busybox --image=busybox --rm -it --restart=Never \\\n  -- wget 172.17.0.4:80\nConnecting to 172.17.0.4:80 (172.17.0.4:80)\nsaving to 'index.html'\nindex.html           100% |********************************|   615  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n\n```", "```\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080\npod/echoserver created\n```", "```\n$ kubectl create service clusterip echoserver --tcp=80:8080\nservice/echoserver created\n```", "```\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 --expose\nservice/echoserver created\npod/echoserver created\n```", "```\n$ kubectl create deployment echoserver --image=k8s.gcr.io/echoserver:1.10 \\\n  --replicas=5\ndeployment.apps/echoserver created\n$ kubectl expose deployment echoserver --port=80 --target-port=8080\nservice/echoserver exposed\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: echoserver\nspec:\n  type: ClusterIP\n  selector:\n    app: echoserver\n  ports:\n  - port: 80\n    targetPort: 8080\n```", "```\n$ kubectl get services\nNAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\nechoserver   ClusterIP   10.109.241.68   <none>        80/TCP    6s\n```", "```\n$ kubectl describe service echoserver\nName:              echoserver\nNamespace:         default\nLabels:            app=echoserver\nAnnotations:       <none>\nSelector:          app=echoserver\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.109.241.68\nIPs:               10.109.241.68\nPort:              <unset>  80/TCP\nTargetPort:        8080/TCP\nEndpoints:         172.17.0.4:8080,172.17.0.5:8080,172.17.0.7:8080 + 2 more...\nSession Affinity:  None\nEvents:            <none>\n```", "```\n$ kubectl get endpoints echoserver\nNAME         ENDPOINTS                                                     AGE\nechoserver   172.17.0.4:8080,172.17.0.5:8080,172.17.0.7:8080 + 2 more...   8m5s\n```", "```\n$ kubectl describe endpoint echoserver\nName:         echoserver\nNamespace:    default\nLabels:       app=echoserver\nAnnotations:  endpoints.kubernetes.io/last-change-trigger-time: \\\n              2021-11-15T19:09:04Z\nSubsets:\n  Addresses:          172.17.0.4,172.17.0.5,172.17.0.7,172.17.0.8,172.17.0.9\n  NotReadyAddresses:  <none>\n  Ports:\n    Name     Port  Protocol\n    ----     ----  --------\n    <unset>  8080  TCP\n\nEvents:  <none>\n```", "```\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 -l app=echoserver\npod/echoserver created\n$ kubectl create service clusterip echoserver --tcp=5005:8080\nservice/echoserver created\n```", "```\n$ kubectl get pod,service\nNAME             READY   STATUS    RESTARTS   AGE\npod/echoserver   1/1     Running   0          23s\n\nNAME                 TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE\nservice/echoserver   ClusterIP   10.96.254.0   <none>        5005/TCP   8s\n```", "```\n$ wget 10.96.254.0:5005 --timeout=5 --tries=1\n--2021-11-15 15:45:36--  http://10.96.254.0:5005/\nConnecting to 10.96.254.0:5005... ]failed: Operation timed out.\nGiving up.\n```", "```\n$ kubectl run tmp --image=busybox --restart=Never -it --rm \\\n  -- wget 10.96.254.0:5005\nConnecting to 10.96.254.0:5005 (10.96.254.0:5005)\nsaving to 'index.html'\nindex.html           100% |********************************|   408  0:00:00 ETA\n'index.html' saved\npod \"tmp\" deleted\n\n```", "```\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 -l app=echoserver\npod/echoserver created\n$ kubectl create service nodeport echoserver --tcp=5005:8080\nservice/echoserver created\n```", "```\n$ kubectl get pod,service\nNAME             READY   STATUS    RESTARTS   AGE\npod/echoserver   1/1     Running   0          17s\n\nNAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        \\\nAGE\nservice/echoserver   NodePort    10.101.184.152   <none>        5005:30158/TCP \\\n5s\n```", "```\n$ kubectl run tmp --image=busybox --restart=Never -it --rm \\\n  -- wget 10.101.184.152:5005\nConnecting to 10.101.184.152:5005 (10.101.184.152:5005)\nsaving to 'index.html'\nindex.html           100% |********************************|   414  0:00:00 ETA\n'index.html' saved\npod \"tmp\" deleted\n\n```", "```\n$ kubectl get nodes -o \\\n  jsonpath='{ $.items[*].status.addresses[?(@.type==\"InternalIP\")].address }'\n192.168.64.15\n$ wget 192.168.64.15:30158\n--2021-11-16 14:10:16--  http://192.168.64.15:30158/\nConnecting to 192.168.64.15:30158... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/plain]\nSaving to: ‘index.html’\n...\n\n```", "```\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 -l app=echoserver\npod/echoserver created\n $ kubectl create service loadbalancer echoserver --tcp=5005:8080\nservice/echoserver created\n```", "```\n$ kubectl get pod,service\nNAME             READY   STATUS    RESTARTS   AGE\npod/echoserver   1/1     Running   0          9s\n\nNAME                 TYPE           CLUSTER-IP      EXTERNAL-IP   \\\nPORT(S)          AGE\nservice/echoserver   LoadBalancer   10.109.76.157   10.109.76.157 \\\n5005:30642/TCP   5s\n```", "```\n$ wget 10.109.76.157:5005\n--2021-11-17 11:30:44--  http://10.109.76.157:5005/\nConnecting to 10.109.76.157:5005... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/plain]\nSaving to: ‘index.html’\n...\n```", "```\n$ minikube addons enable ingress\n$ kubectl get pods -n ingress-nginx\nNAME                                        READY   STATUS      RESTARTS   AGE\ningress-nginx-controller-59b45fb494-xpfzn   0/1     Running     0          14s\n```", "```\n$ kubectl create ingress corellian \\\n  --rule=\"star-alliance.com/corellian/api=corellian:8080\"\ningress.networking.k8s.io/corellian created\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: corellian\nspec:\n  rules:\n  - host: star-alliance.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: corellian\n            port:\n              number: 8080\n        path: /corellian/api\n        pathType: Exact\n```", "```\n$ kubectl get ingress\nNAME        CLASS    HOSTS               ADDRESS         PORTS   AGE\ncorellian   <none>   star-alliance.com   192.168.64.15   80      10m\n```", "```\n$ kubectl describe ingress corellian\nName:             corellian\nNamespace:        default\nAddress:\nDefault backend:  default-http-backend:80 (<error: endpoints \\\n                  \"default-http-backend\" not found>)\nRules:\n  Host               Path  Backends\n  ----               ----  --------\n  star-alliance.com\n                     /corellian/api   corellian:8080 (<error: \\\n                     endpoints \"corellian\" not found>)\nAnnotations:         <none>\nEvents:\n  Type    Reason  Age   From                      Message\n  ----    ------  ----  ----                      -------\n  Normal  Sync    13s   nginx-ingress-controller  Scheduled for sync\n```", "```\n$ kubectl run corellian --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 -l app=corellian\npod/corellian created\n$ kubectl create service clusterip corellian --tcp=8080:8080\nservice/corellian created\n$ kubectl describe ingress corellian\nName:             corellian\nNamespace:        default\nAddress:          192.168.64.15\nDefault backend:  default-http-backend:80 (<error: \\\n                  endpoints \"default-http-backend\" not found>)\nRules:\n  Host               Path  Backends\n  ----               ----  --------\n  star-alliance.com\n                     /corellian/api   corellian:8080 (172.17.0.5:8080)\nAnnotations:         <none>\nEvents:              <none>\n```", "```\n$ kubectl get ingress corellian \\\n  --output=jsonpath=\"{.status.loadBalancer.ingress[0][*ip*]}\"\n192.168.64.15\n$ sudo vim /etc/hosts\n...\n192.168.64.15   star-alliance.com\n```", "```\n$ wget star-alliance.com/corellian/api --timeout=5 --tries=1\n--2021-11-30 19:34:57--  http://star-alliance.com/corellian/api\nResolving star-alliance.com (star-alliance.com)... 192.168.64.15\nConnecting to star-alliance.com (star-alliance.com)|192.168.64.15|:80... \\\nconnected.\nHTTP request sent, awaiting response... 200 OK\n...\n$ wget star-alliance.com/corellian/api/ --timeout=5 --tries=1\n--2021-11-30 15:36:26--  http://star-alliance.com/corellian/api/\nResolving star-alliance.com (star-alliance.com)... 192.168.64.15\nConnecting to star-alliance.com (star-alliance.com)|192.168.64.15|:80... \\\nconnected.\nHTTP request sent, awaiting response... 404 Not Found\n2021-11-30 15:36:26 ERROR 404: Not Found.\n```", "```\n$ kubectl get pods -n kube-system\nNAME                               READY   STATUS    RESTARTS   AGE\ncoredns-558bd4d5db-s89vn           1/1     Running   2          64d\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: coredns-558bd4d5db-s89vn\n  namespace: kube-system\n...\nspec:\n  containers:\n  - name: coredns\n    image: k8s.gcr.io/coredns/coredns:v1.8.0\n    volumeMounts:\n    - mountPath: /etc/coredns\n      name: config-volume\n      readOnly: true\n  volumes:\n  - configMap:\n      defaultMode: 420\n      items:\n      - key: Corefile\n        path: Corefile\n      name: coredns\n    name: config-volume\n...\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: kube-system\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health {\n           lameduck 5s\n        }\n        ready\n        kubernetes cluster.local in-addr.arpa ip6.arpa {\n           pods insecure\n           fallthrough in-addr.arpa ip6.arpa\n           ttl 30\n        }\n        prometheus :9153\n        hosts {\n           192.168.64.1 host.minikube.internal\n           fallthrough\n        }\n        forward . /etc/resolv.conf {\n           max_concurrent 1000\n        }\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\n...\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns-custom\n  namespace: kube-system\ndata:\n  ...\n```", "```\n$ kubectl apply -f coredsns-custom.yaml\n$ kubectl delete pod coredns -n kube-system\n```", "```\n$ kubectl create namespace dns\nnamespace/dns created\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 --expose -n dns\nservice/echoserver created\npod/echoserver created\n$ kubectl get services,pods -n dns\nNAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nservice/echoserver   ClusterIP   10.99.124.240   <none>        8080/TCP   17m\n\nNAME             READY   STATUS    RESTARTS   AGE\npod/echoserver   1/1     Running   0          17m\n```", "```\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n dns \\\n  -- wget echoserver:8080\nConnecting to echoserver:8080 (10.99.124.240:8080)\nsaving to 'index.html'\nindex.html           100% |********************************|   406  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n\n```", "```\n$ kubectl create namespace other\nnamespace/other created\n$ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 --expose -n other\nservice/echoserver created\npod/echoserver created\n$ kubectl get services,pods -n other\nNAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nservice/echoserver   ClusterIP   10.99.124.240   <none>        8080/TCP   17m\n\nNAME             READY   STATUS    RESTARTS   AGE\npod/echoserver   1/1     Running   0          17m\n```", "```\n$ kubectl create namespace business\nnamespace/business created\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n business \\\n  -- wget echoserver:8080\nwget: bad address 'echoserver:8080'\npod \"busybox\" deleted\npod other/busybox terminated (Error)\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n business \\\n  -- wget echoserver.other:8080\nConnecting to echoserver.other:8080 (10.99.32.59:8080)\nsaving to 'index.html'\nindex.html           100% |********************************|   418  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n\n```", "```\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n business \\\n  -- wget echoserver.other.svc:8080\nConnecting to echoserver.other.svc:8080 (10.99.32.59:8080)\nsaving to 'index.html'\nindex.html           100% |********************************|   426  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n business \\\n  -- wget echoserver.other.svc.cluster.local:8080\nConnecting to echoserver.other.svc.cluster.local:8080 (10.99.32.59:8080)\nsaving to 'index.html'\nindex.html           100% |********************************|   454  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n\n```", "```\n$ kubectl create namespace ns1\nnamespace/ns1 created\n$ kubectl create namespace ns2\nnamespace/ns2 created\n$ kubectl run echoserver1 --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 -n ns1\npod/echoserver1 created\n$ kubectl run echoserver2 --image=k8s.gcr.io/echoserver:1.10 --restart=Never \\\n  --port=8080 -n ns2\npod/echoserver2 created\n$ kubectl get pod echoserver1 -n ns1 --template={{.status.podIP}}\n172.17.0.8\n$ kubectl get pod echoserver2 -n ns2 --template={{.status.podIP}}\n172.17.0.9\n```", "```\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n ns1 \\\n  -- wget 172-17-0-8.ns1.pod:8080\nConnecting to 172-17-0-8.ns1.pod:8080 (172.17.0.8:8080)\nsaving to 'index.html'\nindex.html           100% |********************************|   424  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n$ kubectl run busybox --image=busybox --rm -it --restart=Never -n ns1 \\\n  -- wget 172-17-0-9.ns2.pod:8080\nConnecting to 172-17-0-9.ns2.pod:8080 (172.17.0.9:8080)\nsaving to 'index.html'\nindex.html           100% |********************************|   424  0:00:00 ETA\n'index.html' saved\npod \"busybox\" deleted\n\n```"]