- en: Chapter 12\. Jobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章\. 作业
- en: So far we have focused on long-running processes, such as databases and web
    applications. These types of workloads run until they are either upgraded or the
    service is no longer needed. While long-running processes make up the large majority
    of workloads that run on a Kubernetes cluster, there is often a need to run short-lived,
    one-off tasks. The Job object is made for handling these types of tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们专注于长时间运行的进程，例如数据库和Web应用程序。这些类型的工作负载运行直到升级或服务不再需要为止。虽然长时间运行的进程占Kubernetes集群中运行工作负载的绝大多数，但通常需要运行短暂的一次性任务。作业对象专门用于处理这些类型的任务。
- en: A Job creates Pods that run until successful termination (for instance, exit
    with 0). In contrast, a regular Pod will continually restart regardless of its
    exit code. Jobs are useful for things you only want to do once, such as database
    migrations or batch jobs. If run as a regular Pod, your database migration task
    would run in a loop, continually repopulating the database after every exit.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作业创建直到成功终止（例如，退出代码为0）的Pod。相比之下，常规Pod将会无论其退出代码如何都会持续重新启动。作业适用于仅需执行一次的任务，如数据库迁移或批处理作业。如果作为常规Pod运行，您的数据库迁移任务将会在循环中运行，每次退出后都会重新填充数据库。
- en: In this chapter, we’ll explore the most common job patterns Kubernetes affords.
    We will also show you how to leverage these patterns in real-life scenarios.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Kubernetes提供的最常见的作业模式。我们还将向您展示如何在实际场景中利用这些模式。
- en: The Job Object
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业对象
- en: The Job object is responsible for creating and managing Pods defined in a template
    in the job specification. These Pods generally run until successful completion.
    The Job object coordinates running a number of Pods in parallel.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作业对象负责根据作业规范中的模板创建和管理Pod。这些Pod通常运行直到成功完成。作业对象协调并行运行多个Pod的数量。
- en: If the Pod fails before a successful termination, the job controller will create
    a new Pod based on the Pod template in the job specification. Given that Pods
    have to be scheduled, there is a chance that your job will not execute if the
    scheduler does not find the required resources. Also, due to the nature of distributed
    systems, there is a small chance that duplicate Pods will be created for a specific
    task during certain failure scenarios.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Pod在成功终止之前失败，作业控制器将基于作业规范中的Pod模板创建一个新的Pod。由于Pod必须被调度，如果调度程序找不到所需资源，可能会导致作业无法执行。此外，由于分布式系统的特性，在某些故障场景下，可能会为特定任务创建重复的Pod的小概率存在。
- en: Job Patterns
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业模式
- en: 'Jobs are designed to manage batch-like workloads where work items are processed
    by one or more Pods. By default, each job runs a single Pod once until successful
    termination. This job pattern is defined by two primary attributes of a job: the
    number of job completions and the number of Pods to run in parallel. In the case
    of the “run once until completion” pattern, the `completions` and `parallelism`
    parameters are set to `1`. [Table 12-1](#Job-pattern-table) highlights job patterns
    based on the combination of `completions` and `parallelism` for a job configuration.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作业旨在管理类似批处理的工作负载，其中工作项由一个或多个Pod处理。默认情况下，每个作业运行一个Pod，直到成功终止为止。作业模式由作业的两个主要属性定义：作业完成数和并行运行的Pod数。在“运行一次直到完成”的模式下，`completions`和`parallelism`参数被设置为`1`。[表 12-1](#Job-pattern-table)
    根据作业配置中`completions`和`parallelism`的组合突出显示了作业模式。
- en: Table 12-1\. Job patterns
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-1\. 作业模式
- en: '| Type | Use case | Behavior | `completions` | `parallelism` |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 用例 | 行为 | `completions` | `parallelism` |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| One shot | Database migrations | A single Pod running once until successful
    termination | 1 | 1 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 一次性任务 | 数据库迁移 | 一个Pod运行一次直到成功终止 | 1 | 1 |'
- en: '| Parallel fixed completions | Multiple Pods processing a set of work in parallel
    | One or more Pods running one or more times until reaching a fixed completion
    count | 1+ | 1+ |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 并行固定完成 | 多个Pod并行处理一组工作 | 一个或多个Pod运行一次或多次直到达到固定完成数 | 1+ | 1+ |'
- en: '| Work queue: parallel jobs | Multiple Pods processing from a centralized work
    queue | One or more Pods running once until successful termination | 1 | 2+ |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 工作队列：并行作业 | 多个Pod从集中工作队列处理 | 一个或多个Pod运行一次直到成功终止 | 1 | 2+ |'
- en: One Shot
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性任务
- en: One-shot jobs provide a way to run a single Pod once until successful termination.
    While this may sound like an easy task, there is some work involved in pulling
    this off. First, a Pod must be created and submitted to the Kubernetes API. This
    is done using a Pod template defined in the job configuration. Once a job is up
    and running, the Pod backing the job must be monitored for successful termination.
    A job can fail for any number of reasons, including an application error, an uncaught
    exception during runtime, or a node failure before the job has a chance to complete.
    In all cases, the job controller is responsible for re-creating the Pod until
    a successful termination occurs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一次性作业提供了一种方法来运行一个单独的 Pod，直到成功终止。虽然这听起来像是一个简单的任务，但在执行时确实需要一些工作。首先，必须创建一个 Pod，并将其提交到
    Kubernetes API。这是使用作业配置中定义的 Pod 模板完成的。一旦作业运行起来，必须监视支持作业的 Pod 是否成功终止。作业可能由于多种原因失败，包括应用程序错误，在运行时未捕获的异常或在作业有机会完成之前节点故障。在所有情况下，作业控制器负责重新创建
    Pod，直到成功终止为止。
- en: 'There are multiple ways to create a one-shot job in Kubernetes. The easiest
    is to use the `kubectl` command-line tool:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中创建一次性作业的多种方法。最简单的方法是使用 `kubectl` 命令行工具：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are some things to note here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些需要注意的事项：
- en: The `-i` option to `kubectl` indicates that this is an interactive command.
    `kubectl` will wait until the job is running and then show the log output from
    the first (and in this case only) Pod in the job.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` 的 `-i` 选项表示这是一个交互式命令。`kubectl` 将等待作业运行，并显示作业中的第一个（在本例中是唯一的）Pod 的日志输出。'
- en: '`--restart=OnFailure` is the option that tells `kubectl` to create a Job object.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--restart=OnFailure` 是告诉 `kubectl` 创建 Job 对象的选项。'
- en: All of the options after `--` are command-line arguments to the container image.
    These instruct our test server (`kuard`) to generate ten 4,096-bit SSH keys and
    then exit.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--` 后面的所有选项都是容器映像的命令行参数。这些指令我们的测试服务器 (`kuard`) 生成十个 4,096 位的 SSH 密钥，然后退出。'
- en: Your output may not match this exactly. `kubectl` often misses the first couple
    of lines of output with the `-i` option.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的输出可能与此不完全匹配。`kubectl` 使用 `-i` 选项经常会错过输出的前几行。
- en: 'After the job has completed, the Job object and related Pod are retained so
    that you can inspect the log output. Note that this job won’t show up in `kubectl
    get jobs` unless you pass the `-a` flag. Without this flag, `kubectl` hides completed
    jobs. Delete the job before continuing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作业完成后，Job 对象和相关的 Pod 被保留，以便您可以检查日志输出。请注意，如果没有传递 `-a` 标志，此作业不会显示在 `kubectl get
    jobs` 中。没有此标志，`kubectl` 会隐藏已完成的作业。在继续之前删除作业：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The other option for creating a one-shot job is using a configuration file,
    as shown in [Example 12-1](#oneshot-yaml-ex).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一次性作业的另一种选项是使用配置文件，如 [示例 12-1](#oneshot-yaml-ex) 中所示。
- en: Example 12-1\. job-oneshot.yaml
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-1\. job-oneshot.yaml
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Submit the job using the `kubectl apply` command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl apply` 命令提交作业：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then `describe` the `oneshot` job:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后描述 `oneshot` 作业：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can view the results of the job by looking at the logs of the Pod that
    was created:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看所创建的 Pod 的日志来查看作业的结果：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Congratulations, your job has run successfully!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您的作业已成功运行！
- en: Note
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we didn’t specify any labels when creating the Job object. Like
    with other controllers (such as DaemonSets, ReplicaSets, and Deployments) that
    use labels to identify a set of Pods, unexpected behaviors can occur if a Pod
    is reused across objects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当创建 Job 对象时我们没有指定任何标签。与其他使用标签来识别一组 Pod 的控制器（例如 DaemonSet、ReplicaSet 和 Deployment）类似，如果一个
    Pod 被多个对象重用，可能会导致意外行为。
- en: Because jobs have a finite beginning and ending, users often create many of
    them. This makes picking unique labels more difficult and more critical. For this
    reason, the Job object will automatically pick a unique label and use it to identify
    the Pods it creates. In advanced scenarios (such as swapping out a running job
    without killing the Pods it is managing), users can choose to turn off this automatic
    behavior and manually specify labels and selectors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为作业有一个有限的开始和结束，用户通常会创建许多这样的作业。这使得选择唯一标签更加困难和更为关键。因此，Job 对象将自动选择一个唯一标签，并用它来标识它所创建的
    Pod。在高级场景中（例如在不杀死它管理的 Pod 的情况下替换运行中的作业），用户可以选择关闭此自动行为，并手动指定标签和选择器。
- en: We just saw how a job can complete successfully. But what happens if something
    fails? Let’s try that out and see what happens. Modify the arguments to `kuard`
    in our configuration file to cause it to fail with a nonzero exit code after generating
    three keys, as shown in [Example 12-2](#oneshot-failure-ex).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才看到一个作业可以成功完成。但如果出现故障会发生什么呢？让我们试试看。修改我们的配置文件中 `kuard` 的参数，使其在生成三个密钥后以非零的退出码失败，如
    [示例 12-2](#oneshot-failure-ex) 所示。
- en: Example 12-2\. job-oneshot-failure1.yaml
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-2\. job-oneshot-failure1.yaml
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now launch this with `kubectl apply -f job-oneshot-failure1.yaml`. Let it run
    for a bit and then look at the Pod status:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `kubectl apply -f job-oneshot-failure1.yaml` 启动这个。让它运行一段时间，然后查看 Pod 的状态：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we see that the same Pod has restarted four times. Kubernetes is in `CrashLoopBackOff`
    for this Pod. It is not uncommon to have a bug someplace that causes a program
    to crash as soon as it starts. In that case, Kubernetes will wait a bit before
    restarting the Pod to avoid a crash loop that would eat resources on the node.
    This is all handled local to the node by the `kubelet` without the job being involved
    at all.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们看到同一个 Pod 已经重新启动了四次。Kubernetes 的这个 Pod 处于 `CrashLoopBackOff` 状态。在某些情况下，可能会有某个地方的
    bug 导致程序在启动后立即崩溃。在这种情况下，Kubernetes 会等待一段时间再重新启动 Pod，以避免出现崩溃循环，这会消耗节点上的资源。所有这些都由
    `kubelet` 在节点本地处理，而不涉及作业本身。
- en: Kill the job (`kubectl delete jobs oneshot`), and let’s try something else.
    Modify the config file again and change the `restartPolicy` from `OnFailure` to
    `Never`. Launch this with `kubectl apply -f jobs-oneshot-failure2.yaml`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 终止该作业（`kubectl delete jobs oneshot`），让我们尝试其他方法。再次修改配置文件，并将 `restartPolicy` 从
    `OnFailure` 改为 `Never`。使用 `kubectl apply -f jobs-oneshot-failure2.yaml` 启动它。
- en: 'If we let this run for a bit and then look at related Pods, we’ll find something
    interesting:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们让这个运行一段时间，然后查看相关的 Pods，我们会发现一些有趣的事情：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What we see is that we have multiple Pods here that have errored out. By setting
    `restartPolicy: Never`, we are telling the `kubelet` not to restart the Pod on
    failure, but rather just declare the Pod as failed. The Job object then notices
    and creates a replacement Pod. If you aren’t careful, this’ll create a lot of
    “junk” in your cluster. For this reason, we suggest you use `restartPolicy: OnFailure`
    so failed Pods are rerun in place. Clean this up with `kubectl delete jobs oneshot`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以看到这里有多个 Pods 出现错误。通过设置 `restartPolicy: Never`，我们告诉 `kubelet` 在失败时不重新启动
    Pod，而只是声明 Pod 已失败。然后 Job 对象会察觉到并创建一个新的 Pod 替代它。如果不小心的话，这可能会在集群中产生大量的“垃圾”。因此，我们建议您使用
    `restartPolicy: OnFailure`，这样失败的 Pods 将在原地重新运行。您可以使用 `kubectl delete jobs oneshot`
    清理这些。'
- en: So far we’ve seen a program fail by exiting with a nonzero exit code. But workers
    can fail in other ways. Specifically, they can get stuck and not make any forward
    progress. To help cover this case, you can use liveness probes with jobs. If the
    liveness probe policy determines that a Pod is dead, it’ll be restarted or replaced
    for you.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到程序因为退出并返回非零的退出码而失败。但工作器可能以其他方式失败。具体来说，它们可能会卡住并且无法继续向前进展。为了帮助处理这种情况，您可以在作业中使用活跃性探针。如果活跃性探针策略确定一个
    Pod 已经死亡，它会为您重新启动或替换它。
- en: Parallelism
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并行性
- en: Generating keys can be slow. Let’s start a bunch of workers together to make
    key generation faster. We’re going to use a combination of the `completions` and
    `parallelism` parameters. Our goal is to generate 100 keys by having 10 runs of
    `kuard`, with each run generating 10 keys. But we don’t want to swamp our cluster,
    so we’ll limit ourselves to only five Pods at a time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 生成密钥可能会很慢。让我们一起启动一堆工作器，以加快密钥生成速度。我们将使用 `completions` 和 `parallelism` 参数的组合。我们的目标是通过运行
    10 次 `kuard`，每次运行生成 10 个密钥，共生成 100 个密钥。但我们不想淹没我们的集群，所以我们将一次限制在五个 Pods。
- en: This translates to setting `completions` to `10` and `parallelism` to `5`. The
    config is shown in [Example 12-3](#job-para-yaml).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着将 `completions` 设置为 `10`，`parallelism` 设置为 `5`。配置如 [示例 12-3](#job-para-yaml)
    所示。
- en: Example 12-3\. job-parallel.yaml
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-3\. job-parallel.yaml
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start it up:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 启动它：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now watch as the Pods come up, do their thing, and exit. New Pods are created
    until 10 have completed altogether. Here we use the `--watch` flag to have `kubectl`
    stay around and list changes as they happen:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在观察 Pods 的启动、执行和退出情况。直到总共有 10 个 Pods 完成为止。在这里，我们使用 `--watch` 标志让 `kubectl`
    保持运行，并实时列出变化：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Feel free to study the completed jobs and check out their logs to see the fingerprints
    of the keys they generated. Clean up by deleting the finished Job object with
    `kubectl delete job parallel`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 随意学习已完成的作业，并检查它们的日志，查看它们生成的密钥指纹。通过使用 `kubectl delete job parallel` 删除已完成的作业对象来清理。
- en: Work Queues
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作队列
- en: A common use case for jobs is to process work from a work queue. In this scenario,
    some task creates a number of work items and publishes them to a work queue. A
    worker job can be run to process each work item until the work queue is empty
    ([Figure 12-1](#fig1001)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作业的一个常见用例是从工作队列处理工作。在这种情况下，某些任务创建多个工作项并将它们发布到工作队列。可以运行工作者作业来处理每个工作项，直到工作队列为空（参见
    [图 12-1](#fig1001)）。
- en: '![kur3 1201](assets/kur3_1201.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![kur3 1201](assets/kur3_1201.png)'
- en: Figure 12-1\. Parallel jobs
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 并行作业
- en: Starting a work queue
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动工作队列
- en: We start by launching a centralized work queue service. `kuard` has a simple
    memory-based work queue system built in. We will start an instance of `kuard`
    to act as a coordinator for all the work.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先启动一个集中式工作队列服务。`kuard` 内置了一个简单的基于内存的工作队列系统。我们将启动一个 `kuard` 实例来充当所有工作的协调者。
- en: Next, we create a simple ReplicaSet to manage a singleton work queue daemon.
    We are using a ReplicaSet to ensure that a new Pod will get created in the face
    of machine failure, as shown in [Example 12-4](#rs.queue.yaml-ex).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个简单的 ReplicaSet 来管理一个单例工作队列守护程序。我们使用 ReplicaSet 来确保在机器故障时会创建一个新的 Pod，如
    [示例 12-4](#rs.queue.yaml-ex) 所示。
- en: Example 12-4\. rs-queue.yaml
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-4\. rs-queue.yaml
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the work queue with the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行工作队列：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At this point, the work queue daemon should be up and running. Let’s use port-forwarding
    to connect to it. Leave this command running in a terminal window:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，工作队列守护程序应该已经启动和运行。让我们使用端口转发连接到它。在终端窗口中保持此命令运行：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can open your browser to *http://localhost:8080* and see the `kuard` interface.
    Switch to the “MemQ Server” tab to keep an eye on what is going on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以打开浏览器访问 *http://localhost:8080* 并查看 `kuard` 接口。切换到“MemQ Server”选项卡以监视当前情况。
- en: With the work queue server in place, the next step is to expose it using a service.
    This will make it easy for producers and consumers to locate the work queue via
    DNS, as [Example 12-5](#serviceyaml_EX) shows.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将工作队列服务器放置好后，下一步是使用服务来暴露它。这将使生产者和消费者可以通过 DNS 找到工作队列，如 [示例 12-5](#serviceyaml_EX)
    所示。
- en: Example 12-5\. service-queue.yaml
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-5\. service-queue.yaml
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the queue service with `kubectl`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl` 创建队列服务：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Loading up the queue
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载队列
- en: We are now ready to put a bunch of work items in the queue. For the sake of
    simplicity, we’ll just use `curl` to drive the API for the work queue server and
    insert a bunch of work items. `curl` will communicate to the work queue through
    the `kubectl port-forward` we set up earlier, as shown in [Example 12-6](#load_ex).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好将一堆工作项放入队列中了。为了简单起见，我们将使用 `curl` 驱动工作队列服务器的 API 并插入一堆工作项。`curl` 将通过我们之前设置的
    `kubectl port-forward` 与工作队列通信，如 [示例 12-6](#load_ex) 所示。
- en: Example 12-6\. load-queue.sh
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-6\. load-queue.sh
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run these commands, and you should see 100 JSON objects output to your terminal
    with a unique message identifier for each work item. You can confirm the status
    of the queue by looking at the “MemQ Server” tab in the UI, or you can ask the
    work queue API directly:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令，你应该会在终端看到输出了 100 个 JSON 对象，并为每个工作项生成一个唯一的消息标识符。你可以通过 UI 中的“MemQ Server”选项卡确认队列的状态，或者直接通过工作队列
    API 查询：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now we are ready to kick off a job to consume the work queue until it’s empty.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好启动一个任务来消耗工作队列直到为空。
- en: Creating the consumer job
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建消费者任务
- en: This is where things get interesting! `kuard` can also act in consumer mode.
    We can set it up to draw work items from the work queue, create a key, and then
    exit once the queue is empty, as shown in [Example 12-7](#job-con-ex).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是事情变得有趣的地方！`kuard` 也可以作为消费者模式运行。我们可以设置它从工作队列中获取工作项，创建一个密钥，然后在队列为空时退出，如 [示例 12-7](#job-con-ex)
    所示。
- en: Example 12-7\. job-consumers.yaml
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-7\. job-consumers.yaml
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we are telling the job to start up five Pods in parallel. As the `completions`
    parameter is unset, we put the job into worker-pool mode. Once the first Pod exits
    with a zero exit code, the job will start winding down and will not start any
    new Pods. This means that none of the workers should exit until the work is done
    and they are all in the process of finishing up.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉作业并行启动五个 Pod。由于 `completions` 参数未设置，我们将作业放入工作池模式。一旦第一个 Pod 以零退出代码退出，作业将开始收尾，并且不会启动任何新的
    Pod。这意味着在工作完成之前，没有任何工作者应该退出，他们都在结束工作的过程中。
- en: 'Now, create the `consumers` job:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建 `consumers` 作业：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then you can view the Pods backing the job:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以查看支持作业的 Pod：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note there are five Pods running in parallel. These Pods will continue to run
    until the work queue is empty. You can watch as it happens in the UI on the work
    queue server. As the queue empties, the consumer Pods will exit cleanly and the
    `consumers` job will be considered complete.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有五个 Pod 并行运行。这些 Pod 将继续运行，直到工作队列为空。您可以在工作队列服务器的 UI 上观察到这一过程。随着队列变空，消费者 Pod
    将干净退出，`consumers` 作业将被视为完成。
- en: Cleanup
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理
- en: 'Using labels, we can clean up all of the stuff we created in this section:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标签，我们可以清理本节中创建的所有内容：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: CronJobs
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CronJobs
- en: 'Sometimes you want to schedule a job to be run at a certain interval. To achieve
    this, you can declare a CronJob in Kubernetes, which is responsible for creating
    a new Job object at a particular interval. [Example 12-8](#job-cronjob-ex) is
    an example CronJob declaration:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望安排作业在特定间隔运行。为实现此目的，您可以在 Kubernetes 中声明一个 CronJob，负责在特定间隔创建一个新的 Job 对象。[示例 12-8](#job-cronjob-ex)
    是一个 CronJob 声明的示例：
- en: Example 12-8\. job-cronjob.yaml
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-8\. job-cronjob.yaml
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note the `spec.schedule` field, which contains the interval for the CronJob
    in standard `cron` format.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 `spec.schedule` 字段，其中包含 CronJob 的间隔，采用标准的 `cron` 格式。
- en: You can save this file as *job-cronjob.yaml*, and create the CronJob with `kubectl
    create -f cron-job.yaml`. If you are interested in the current state of a CronJob,
    you can use `kubectl describe *<cron-job>*` to get the details.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此文件保存为 *job-cronjob.yaml*，并使用 `kubectl create -f cron-job.yaml` 创建 CronJob。如果您对
    CronJob 的当前状态感兴趣，可以使用 `kubectl describe *<cron-job>*` 获取详细信息。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: On a single cluster, Kubernetes can handle both long-running workloads such
    as web applications and short-lived workloads such as batch jobs. The job abstraction
    allows you to model batch job patterns ranging from simple, one-time tasks to
    parallel jobs that process many items until the work has been exhausted.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个集群上，Kubernetes 可以处理长时间运行的工作负载，如 Web 应用程序和短暂的工作负载，如批处理作业。作业抽象允许您对批处理作业模式进行建模，从简单的一次性任务到处理许多项目直到工作耗尽的并行作业。
- en: Jobs are a low-level primitive and can be used directly for simple workloads.
    However, Kubernetes is built from the ground up to be extensible by higher-level
    objects. Jobs are no exception; higher-level orchestration systems can easily
    use them to take on more complex tasks.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作业是一种低级原语，可直接用于简单的工作负载。但是，Kubernetes 是从头开始构建的，可以通过更高级别的对象进行扩展。作业也不例外；更高级别的编排系统可以轻松使用它们来承担更复杂的任务。
