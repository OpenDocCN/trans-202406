- en: Chapter 5\. Managed Lifecycle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章\. 托管生命周期
- en: Containerized applications managed by cloud native platforms have no control
    over their lifecycle, and to be good cloud native citizens, they have to listen
    to the events emitted by the managing platform and adapt their lifecycles accordingly.
    The *Managed Lifecycle* pattern describes how applications can and should react
    to these lifecycle events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由云原生平台管理的容器化应用程序无法控制其生命周期，为了成为良好的云原生公民，它们必须监听管理平台发出的事件，并相应地调整其生命周期。*托管生命周期*
    模式描述了应用程序如何以及应该如何响应这些生命周期事件。
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: In [Chapter 4, “Health Probe”](ch04.html#HealthProbe), we explained why containers
    have to provide APIs for the different health checks. Health-check APIs are read-only
    endpoints the platform is continually probing to get application insight. It is
    a mechanism for the platform to extract information from the application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 4 章，“健康探测”](ch04.html#HealthProbe) 中，我们解释了为什么容器必须为不同的健康检查提供 API。健康检查 API
    是平台持续探测以获取应用程序洞察的只读端点。这是平台从应用程序中提取信息的机制。
- en: In addition to monitoring the state of a container, the platform sometimes may
    issue commands and expect the application to react to them. Driven by policies
    and external factors, a cloud native platform may decide to start or stop the
    applications it is managing at any moment. It is up to the containerized application
    to determine which events are important to react to and how to react. But in effect,
    this is an API that the platform is using to communicate and send commands to
    the application. Also, applications are free to either benefit from lifecycle
    management or ignore it if they don’t need this service.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了监视容器的状态外，平台有时可能会发出命令，并期望应用程序对其做出反应。受政策和外部因素驱动，云原生平台可能会决定随时启动或停止其管理的应用程序。这取决于容器化应用程序确定哪些事件对其重要，并如何做出响应。实际上，这是平台用于与应用程序通信和发送命令的
    API。此外，应用程序可以选择从生命周期管理中受益，或者如果它们不需要此服务，则可以忽略它。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: We saw that checking only the process status is not a good enough indication
    of the health of an application. That is why there are different APIs for monitoring
    the health of a container. Similarly, using only the process model to run and
    stop a process is not good enough. Real-world applications require more fine-grained
    interactions and lifecycle management capabilities. Some applications need help
    to warm up, and some applications need a gentle and clean shutdown procedure.
    For this and other use cases, some events, as shown in [Figure 5-1](#img-events),
    are emitted by the platform that the container can listen to and react to if desired.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现仅检查进程状态并不足以判断应用程序的健康状况。这就是为什么存在用于监视容器健康的不同 API 的原因。同样地，仅使用进程模型来运行和停止进程也不够。现实世界的应用程序需要更精细的交互和生命周期管理能力。一些应用程序需要预热，一些应用程序需要温和且干净的关闭过程。出于这些以及其他用例的考虑，平台会发出一些事件，如
    [图 5-1](#img-events) 所示，容器可以选择监听并根据需要做出响应。
- en: '![Managed container lifecycle](assets/kup2_0501.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![托管容器生命周期](assets/kup2_0501.png)'
- en: Figure 5-1\. Managed container lifecycle
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 托管容器生命周期
- en: The deployment unit of an application is a Pod. As you already know, a Pod is
    composed of one or more containers. At the Pod level, there are other constructs
    such as init containers, which we cover in [Chapter 15, “Init Container”](ch15.html#InitContainer),
    that can help manage the container lifecycle. The events and hooks we describe
    in this chapter are all applied at an individual container level rather than the
    Pod level.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的部署单元是 Pod。正如您已经知道的那样，Pod 由一个或多个容器组成。在 Pod 级别，还有其他构造，比如我们在 [第 15 章，“Init
    容器”](ch15.html#InitContainer) 中介绍的 init 容器，它们可以帮助管理容器生命周期。本章描述的事件和钩子都应用于单个容器级别，而不是
    Pod 级别。
- en: SIGTERM Signal
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SIGTERM 信号
- en: Whenever Kubernetes decides to shut down a container, whether that is because
    the Pod it belongs to is shutting down or simply because a failed liveness probe
    causes the container to be restarted, the container receives a SIGTERM signal.
    SIGTERM is a gentle poke for the container to shut down cleanly before Kubernetes
    sends a more abrupt SIGKILL signal. Once a SIGTERM signal has been received, the
    application should shut down as quickly as possible. For some applications, this
    might be a quick termination, and some other applications may have to complete
    their in-flight requests, release open connections, and clean up temp files, which
    can take a slightly longer time. In all cases, reacting to SIGTERM is the right
    moment to shut down a container in a clean way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 Kubernetes 决定关闭一个容器，无论是因为其所属的 Pod 正在关闭，还是因为失败的存活探测导致容器重启，容器都会收到 SIGTERM 信号。SIGTERM
    是对容器进行轻微提示，要求其在 Kubernetes 发送更突然的 SIGKILL 信号之前进行干净的关闭。一旦收到 SIGTERM 信号，应用程序应尽快关闭。对于某些应用程序来说，这可能是快速终止，而对于其他应用程序可能需要完成正在进行的请求、释放打开的连接和清理临时文件，这可能需要更长的时间。在所有情况下，响应
    SIGTERM 是以干净的方式关闭容器的正确时机。
- en: SIGKILL Signal
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SIGKILL 信号
- en: If a container process has not shut down after a SIGTERM signal, it is shut
    down forcefully by the following SIGKILL signal. Kubernetes does not send the
    SIGKILL signal immediately but waits 30 seconds by default after it has issued
    a SIGTERM signal. This grace period can be defined per Pod via the `.spec.terminationGrace​Per⁠iodSeconds`
    field, but it cannot be guaranteed as it can be overridden while issuing commands
    to Kubernetes. The aim should be to design and implement containerized applications
    to be ephemeral with quick startup and shutdown processes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器进程在收到 SIGTERM 信号后没有关闭，将通过后续的 SIGKILL 信号强制关闭。Kubernetes 不会立即发送 SIGKILL 信号，而是在发出
    SIGTERM 信号后默认等待 30 秒。此优雅期可以通过 `.spec.terminationGracePer⁠iodSeconds` 字段在每个 Pod
    中定义，但无法保证，因为在向 Kubernetes 发送命令时可以覆盖它。设计和实现容器化应用程序的目标应该是短暂的，具有快速启动和关闭过程。
- en: PostStart Hook
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostStart 钩子
- en: Using only process signals for managing lifecycles is somewhat limited. That
    is why additional lifecycle hooks such as `postStart` and `preStop` are provided
    by Kubernetes. A Pod manifest containing a `postStart` hook looks like the one
    in [Example 5-1](#ex-post-start).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用进程信号管理生命周期有一定限制。这就是为什么 Kubernetes 提供了额外的生命周期钩子，如 `postStart` 和 `preStop`
    的原因。包含 `postStart` 钩子的 Pod 清单看起来像 [示例 5-1](#ex-post-start) 中的那样。
- en: Example 5-1\. A container with `postStart` hook
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-1\. 带有 `postStart` 钩子的容器
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_managed_lifecycle_CO1-1)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managed_lifecycle_CO1-1)'
- en: The `postStart` command waits 30 seconds. `sleep` is just a simulation for any
    lengthy startup code that might run at this point. Also, it uses a trigger file
    to sync with the main application, which starts in parallel.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`postStart` 命令等待 30 秒。`sleep` 仅是对任何可能在此时运行的长时间启动代码进行模拟。此外，它使用触发文件与主应用程序同步，后者并行启动。'
- en: The `postStart` command is executed after a container is created, asynchronously
    with the primary container’s process. Even if much of the application initialization
    and warm-up logic can be implemented as part of the container startup steps, `postStart`
    still covers some use cases. The `postStart` action is a blocking call, and the
    container status remains *Waiting* until the `postStart` handler completes, which
    in turn keeps the Pod status in the *Pending* state. This nature of `postStart`
    can be used to delay the startup state of the container while allowing time for
    the main container process to initialize.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`postStart` 命令在容器创建后执行，与主容器进程异步进行。即使应用程序初始化和预热逻辑的大部分可以作为容器启动步骤的一部分实现，`postStart`
    仍然涵盖了一些用例。`postStart` 操作是一个阻塞调用，容器状态保持 *Waiting* 直到 `postStart` 处理程序完成，从而保持 Pod
    状态为 *Pending*。`postStart` 的这种特性可以用来延迟容器的启动状态，同时允许主容器进程初始化的时间。'
- en: Another use of `postStart` is to prevent a container from starting when the
    Pod does not fulfill certain preconditions. For example, when the `postStart`
    hook indicates an error by returning a nonzero exit code, Kubernetes kills the
    main container process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用 `postStart` 的例子是在 Pod 不满足某些前提条件时阻止容器启动。例如，当 `postStart` 钩子通过返回非零退出码指示错误时，Kubernetes
    会终止主容器进程。
- en: 'The `postStart` and `preStop` hook invocation mechanisms are similar to the
    health probes described in [Chapter 4, “Health Probe”](ch04.html#HealthProbe),
    and support these handler types:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`postStart` 和 `preStop` 钩子调用机制类似于[第 4 章，“健康探针”](ch04.html#HealthProbe)中描述的健康探针，并支持这些处理程序类型：'
- en: exec
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: exec
- en: Runs a command directly in the container
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在容器中运行命令
- en: httpGet
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: httpGet
- en: Executes an HTTP GET request against a port opened by one Pod container
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个 Pod 容器打开的端口执行 HTTP GET 请求
- en: You have to be very careful what critical logic you execute in the `postStart`
    hook as there are no guarantees for its execution. Since the hook is running in
    parallel with the container process, it is possible that the hook may be executed
    before the container has started. Also, the hook is intended to have at-least-once
    semantics, so the implementation has to take care of duplicate executions. Another
    aspect to keep in mind is that the platform does not perform any retry attempts
    on failed HTTP requests that didn’t reach the handler.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `postStart` 钩子中执行的关键逻辑要非常小心，因为它的执行没有任何保证。由于钩子与容器进程并行运行，可能会在容器启动之前执行钩子。此外，钩子旨在具有至少一次语义，因此实现必须注意重复执行。另一个要记住的方面是平台不会对未到达处理程序的失败
    HTTP 请求进行任何重试尝试。
- en: PreStop Hook
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PreStop 钩子
- en: The `preStop` hook is a blocking call sent to a container before it is terminated.
    It has the same semantics as the SIGTERM signal and should be used to initiate
    a graceful shutdown of the container when reacting to SIGTERM is not possible.
    The `preStop` action in [Example 5-2](#ex-pre-stop) must complete before the call
    to delete the container is sent to the container runtime, which triggers the SIGTERM
    notification.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`preStop` 钩子是在容器终止之前发送到容器的阻塞调用。它具有与 SIGTERM 信号相同的语义，并且应该用于在无法响应 SIGTERM 时启动容器的优雅关闭。在发送删除容器的调用到容器运行时之前，`preStop`
    操作在[示例 5-2](#ex-pre-stop)中必须完成，这会触发 SIGTERM 通知。'
- en: Example 5-2\. A container with a `preStop` hook
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-2\. 带有 `preStop` 钩子的容器
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_managed_lifecycle_CO2-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managed_lifecycle_CO2-1)'
- en: Call out to a `/shutdown` endpoint running within the application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 调用运行在应用程序内部的 `/shutdown` 端点。
- en: Even though `preStop` is blocking, holding on it or returning an unsuccessful
    result does not prevent the container from being deleted and the process killed.
    The `preStop` hook is only a convenient alternative to a SIGTERM signal for graceful
    application shutdown and nothing more. It also offers the same handler types and
    guarantees as the `postStart` hook we covered previously.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 `preStop` 是阻塞的，但在其上保持或返回不成功的结果并不会阻止删除容器和终止进程。`preStop` 钩子只是优雅应用程序关闭的方便替代方法，没有其他作用。它还提供了与我们之前介绍的
    `postStart` 钩子相同的处理程序类型和保证。
- en: Other Lifecycle Controls
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他生命周期控制
- en: In this chapter, so far we have focused on the hooks that allow you to execute
    commands when a container lifecycle event occurs. But another mechanism that is
    not at the container level but at the Pod level allows you to execute initialization
    instructions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们专注于允许您在容器生命周期事件发生时执行命令的钩子。但是，另一种机制不是在容器级别而是在 Pod 级别，允许您执行初始化指令。
- en: We describe the *Init Container* pattern in [Chapter 15](ch15.html#InitContainer)
    in depth, but here we describe it briefly to compare it with lifecycle hooks.
    Unlike regular application containers, init containers run sequentially, run until
    completion, and run before any of the application containers in a Pod start up.
    These guarantees allow you to use init containers for Pod-level initialization
    tasks. Both lifecycle hooks and init containers operate at a different granularity
    (at the container level and Pod level, respectively) and can be used interchangeably
    in some instances, or complement one another in other cases. [Table 5-1](#table-lifecycle-hooks)
    summarizes the main differences between the two.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 15 章](ch15.html#InitContainer)中深入描述了*初始化容器*模式，但在这里我们简要描述它以与生命周期钩子进行比较。与常规应用容器不同，初始化容器按顺序运行，直到完成，并在
    Pod 中的任何应用容器启动之前运行。这些保证允许您使用初始化容器执行 Pod 级别的初始化任务。生命周期钩子和初始化容器在不同的粒度上运行（分别在容器级别和
    Pod 级别），有时可以互换使用，或在其他情况下互补使用。[表 5-1](#table-lifecycle-hooks)总结了两者之间的主要区别。
- en: Table 5-1\. Lifecycle hooks and init containers
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-1\. 生命周期钩子和初始化容器
- en: '| Aspect | Lifecycle hooks | Init containers |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 方面 | 生命周期钩子 | 初始化容器 |'
- en: '| --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Activates on | Container lifecycle phases. | Pod lifecycle phases. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 激活时间 | 容器生命周期阶段。 | Pod生命周期阶段。 |'
- en: '| Startup phase action | A `postStart` command. | A list of `initContainers`
    to execute. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 启动阶段操作 | 一个`postStart`命令。 | 执行一系列`initContainers`的列表。 |'
- en: '| Shutdown phase action | A `preStop` command. | No equivalent feature. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 关闭阶段操作 | 一个`preStop`命令。 | 没有等效特性。 |'
- en: '| Timing guarantees | A `postStart` command is executed at the same time as
    the container’s `ENTRYPOINT`. | All init containers must be completed successfully
    before any application container can start. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 时间保证 | `postStart`命令与容器的`ENTRYPOINT`同时执行。 | 所有初始化容器必须在任何应用程序容器启动之前成功完成。 |'
- en: '| Use cases | Perform noncritical startup/shutdown cleanups specific to a container.
    | Perform workflow-like sequential operations using containers; reuse containers
    for task executions. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 使用场景 | 执行特定于容器的非关键启动/关闭清理。 | 使用容器执行类似工作流的顺序操作；重复使用容器执行任务。 |'
- en: If even more control is required to manage the lifecycle of your application
    containers, there is an advanced technique for rewriting the container entrypoints,
    sometimes also referred to as the [*Commandlet* pattern](https://oreil.ly/CVZX6).
    This pattern is especially useful when the main containers within a Pod have to
    be started in a certain order and need an extra level of control. Kubernetes-based
    pipeline platforms like Tekton and Argo CD require the sequential execution of
    containers that share data and support the inclusion of additional sidecar containers
    running in parallel (we talk more about sidecars in [Chapter 16, “Sidecar”](ch16.html#Sidecar)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要更多控制来管理应用程序容器的生命周期，有一种高级技术可以重写容器的入口点，有时也称为[*Commandlet*模式](https://oreil.ly/CVZX6)。当Pod中的主要容器必须按特定顺序启动并且需要额外的控制级别时，此模式特别有用。基于Kubernetes的流水线平台如Tekton和Argo
    CD要求按顺序执行共享数据的容器，并支持并行运行的附加sidecar容器（我们在[第16章，“Sidecar”](ch16.html#Sidecar)中更详细地讨论了sidecars）。
- en: For these scenarios, a sequence of init containers is not good enough because
    init containers don’t allow sidecars. As an alternative, an advanced technique
    called *entrypoint* *rewriting* can be used to allow fine-grained lifecycle control
    for the Pod’s main containers. Every container image defines a command that is
    executed by default when the container starts. In a Pod specification, you can
    also define this command directly in the Pod spec. The idea of entrypoint rewriting
    is to replace this command with a generic wrapper command that calls the original
    command and takes care of lifecycle concerns. This generic command is injected
    from another container image before the application container starts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些场景，仅使用一系列初始化容器是不够的，因为初始化容器不允许sidecars。作为替代方案，可以使用一种称为*entrypoint重写*的高级技术，以允许对Pod主容器进行精细化的生命周期控制。每个容器镜像定义了一个默认在容器启动时执行的命令。在Pod规范中，您还可以直接在Pod规范中定义此命令。entrypoint重写的想法是用一个通用的包装命令替换这个命令，该命令调用原始命令并处理生命周期相关的问题。这个通用命令是从另一个容器镜像中注入的，然后再启动应用程序容器之前。
- en: This concept is best explained by an example. [Example 5-3](#ex-entrypoint-rewriting-before)
    shows a typical Pod declaration that starts a single container with the given
    arguments.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念最好通过一个例子来解释。 [示例 5-3](#ex-entrypoint-rewriting-before) 展示了一个典型的Pod声明，该声明启动了一个带有给定参数的单个容器。
- en: Example 5-3\. Simple Pod starting an image with a command and arguments
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-3\. 启动带有命令和参数的简单Pod
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_managed_lifecycle_CO3-1)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managed_lifecycle_CO3-1)'
- en: The command executed when the container starts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 容器启动时执行的命令。
- en: '[![2](assets/2.png)](#co_managed_lifecycle_CO3-2)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_managed_lifecycle_CO3-2)'
- en: Additional arguments provided to the entrypoint command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给入口点命令的额外参数。
- en: The trick is now to wrap the given command `random-generator-runner` with a
    generic supervisor program that takes care of lifecycle aspects, like reacting
    on `SIGTERM` or other external signals. [Example 5-4](#ex-entrypoint-rewriting)
    demonstrates a Pod declaration that includes an init container for installing
    a supervisor, which is then started to monitor the main application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的技巧是用一个通用的监管程序来包装给定的命令`random-generator-runner`，该监管程序负责处理生命周期方面的问题，如对`SIGTERM`或其他外部信号的反应。
    [示例 5-4](#ex-entrypoint-rewriting) 展示了一个包含初始化容器以安装监管程序的Pod声明，然后启动监管程序来监视主应用程序。
- en: Example 5-4\. Pod that wraps the original entrypoint with a supervisor
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-4\. 使用监管程序包装原始entrypoint的Pod
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_managed_lifecycle_CO4-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managed_lifecycle_CO4-1)'
- en: A fresh `emptyDir` volume is created to share the supervisor daemon.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的`emptyDir`卷来共享监控守护程序。
- en: '[![2](assets/2.png)](#co_managed_lifecycle_CO4-2)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_managed_lifecycle_CO4-2)'
- en: Init container used for copying the supervisor daemon to the application containers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将监控守护程序复制到应用容器的初始容器。
- en: '[![3](assets/3.png)](#co_managed_lifecycle_CO4-3)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_managed_lifecycle_CO4-3)'
- en: The original command `randomGenerator` as defined in [Example 5-3](#ex-entrypoint-rewriting-before)
    is replaced with supervisor daemon from the shared volume.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 5-3](#ex-entrypoint-rewriting-before)中定义的原始命令`randomGenerator`被来自共享卷的监控守护程序所取代。
- en: '[![4](assets/4.png)](#co_managed_lifecycle_CO4-4)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_managed_lifecycle_CO4-4)'
- en: The original command specification becomes the arguments for the supervisor
    commands.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 原始命令规范变为监控命令的参数。
- en: This entrypoint rewriting is especially useful for Kubernetes-based applications
    that create and manage Pods programmatically, like Tekton, which creates Pods
    when running a continuous integration (CI) pipeline. That way, they gain much
    better control of when to start, stop, or chain containers within a Pod.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Kubernetes 的应用程序而言，这种入口重写特别有用，它会以编程方式创建和管理 Pod，例如 Tekton，在运行持续集成（CI）流水线时创建
    Pod。这样，它们可以更好地控制何时启动、停止或在 Pod 中链式连接容器。
- en: There are no strict rules about which mechanism to use except when you require
    a specific timing guarantee. We could skip lifecycle hooks and init containers
    entirely and use a bash script to perform specific actions as part of a container’s
    startup or shutdown commands. That is possible, but it would tightly couple the
    container with the script and turn it into a maintenance nightmare. We could also
    use Kubernetes lifecycle hooks to perform some actions, as described in this chapter.
    Alternatively, we could go even further and run containers that perform individual
    actions using init containers or inject supervisor daemons for even more sophisticated
    control. In this sequence, the options require increasingly more effort, but at
    the same time offer stronger guarantees and enable reuse.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用哪种机制没有严格的规则，除非需要特定的定时保证。我们可以完全跳过生命周期钩子和初始容器，而使用一个 bash 脚本来执行容器启动或关闭命令中的特定操作。这是可能的，但它会将容器与脚本紧密耦合，并将其变成维护的噩梦。我们也可以使用
    Kubernetes 生命周期钩子执行一些操作，如本章所述。或者，我们甚至可以进一步运行执行单个操作的容器，使用初始容器或注入监控守护程序以实现更复杂的控制。在这一序列中，选项需要越来越多的努力，但同时提供更强的保证并支持重用。
- en: Understanding the stages and available hooks of containers and Pod lifecycles
    is crucial for creating applications that benefit from being managed by Kubernetes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 理解容器和 Pod 生命周期的各个阶段和可用钩子对于创建由 Kubernetes 管理的应用程序至关重要。
- en: Discussion
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: One of the main benefits the cloud native platform provides is the ability to
    run and scale applications reliably and predictably on top of potentially unreliable
    cloud infrastructure. These platforms provide a set of constraints and contracts
    for an application running on them. It is in the interest of the application to
    honor these contracts to benefit from all of the capabilities offered by the cloud
    native platform. Handling and reacting to these events ensures that your application
    can gracefully start up and shut down with minimal impact on the consuming services.
    At the moment, in its basic form, that means the containers should behave as any
    well-designed POSIX process should. In the future, there might be even more events
    giving hints to the application when it is about to be scaled up or asked to release
    resources to prevent being shut down. It is essential to understand that the application
    lifecycle is no longer in the control of a person but is fully automated by the
    platform.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生平台提供的主要好处之一是能够可靠和可预测地在可能不稳定的云基础设施上运行和扩展应用程序。这些平台为在其上运行的应用程序提供一组约束和合同。对应用程序而言，遵守这些合同以从云原生平台提供的所有功能中受益至关重要。处理和响应这些事件确保您的应用程序可以在最小影响消费服务的情况下优雅地启动和关闭。目前，在其基本形式中，这意味着容器应该像任何设计良好的
    POSIX 进程一样行为。未来，可能会有更多事件提供提示，告知应用程序何时将被扩展或要求释放资源以防止关闭。理解应用程序生命周期不再由个人控制，而是完全由平台自动化管理是至关重要的。
- en: Besides managing the application lifecycle, the other big duty of orchestration
    platforms like Kubernetes is to distribute containers over a fleet of nodes. The
    next pattern, *Automated Placement*, explains the options to influence the scheduling
    decisions from the outside.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了管理应用程序生命周期外，像 Kubernetes 这样的编排平台的另一个重要职责是在节点群中分发容器。下一个模式，*自动化放置*，解释了从外部影响调度决策的选项。
- en: More Information
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Managed Lifecycle Example](https://oreil.ly/2T2jc)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[托管生命周期示例](https://oreil.ly/2T2jc)'
- en: '[Container Lifecycle Hooks](https://oreil.ly/xzeMi)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[容器生命周期钩子](https://oreil.ly/xzeMi)'
- en: '[Attach Handlers to Container Lifecycle Events](https://oreil.ly/NTi1h)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将处理程序附加到容器生命周期事件](https://oreil.ly/NTi1h)'
- en: '[Kubernetes Best Practices: Terminating with Grace](https://oreil.ly/j-5yl)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 最佳实践：优雅终止](https://oreil.ly/j-5yl)'
- en: '[Graceful Shutdown of Pods with Kubernetes](https://oreil.ly/TgjCp)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Kubernetes 优雅关闭 Pod](https://oreil.ly/TgjCp)'
- en: '[Argo and Tekton: Pushing the Boundaries of the Possible on Kubernetes](https://oreil.ly/CVZX6)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Argo 和 Tekton：在 Kubernetes 上推动可能性的边界](https://oreil.ly/CVZX6)'
- en: '[Russian Doll: Extending Containers with Nested Processes](https://oreil.ly/iBhoQ)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[俄罗斯套娃：使用嵌套进程扩展容器](https://oreil.ly/iBhoQ)'
