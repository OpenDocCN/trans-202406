- en: Chapter 5\. Custom Authentication Strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be building and improving the app we completed in [Chapter 4](ch04.xhtml#ch4),
    where you learned how to use the `withAuthenticator` HOC to create a preconfigured
    authentication form. You also learned how to use React Router and the `Auth` class
    to create public and protected routes based on the user’s signed-in state.
  prefs: []
  type: TYPE_NORMAL
- en: While this lays the foundation for what can be done with Amplify and the basics
    around authentication and routing, we want to go one step further and build a
    completely custom authentication flow so we know exactly what is going on under
    the hood and understand the logic and state needed to manage a *custom authentication
    form*. This means that we need to update our app to have custom forms for signing
    up, signing in, and resetting our password instead of using the `withAuthenticator`
    HOC.
  prefs: []
  type: TYPE_NORMAL
- en: We will also take the idea of *protected routes* one step further by creating
    a hook that we can reuse to wrap any component we are wanting to protect with
    authentication (instead of rewriting the logic in each component).
  prefs: []
  type: TYPE_NORMAL
- en: The `Auth` class, with over 30 different methods, is very powerful and allows
    you to handle all of the authentication logic that most applications demand. By
    the end of this chapter, you will understand how to use the `Auth` class and React
    state to build and manage a custom authentication form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the protectedRoute Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we will do is to create the custom `protectedRoute` hook that
    we will be using to protect any routes that require authentication. This hook
    will check for the signed-in user information, and if the user is not signed in,
    will redirect them to the sign-in page or another specified route. If the user
    is signed in, the hook will return and render the component passed in as an argument.
    By using this hook, we can do away with any duplicate logic around authentication
    that we may need across multiple components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *src* directory, create a new file called *protectedRoute.js* and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This component uses the `useEffect` hook when the component loads to check if
    the user is signed in. If the user is signed in, nothing happens and the component
    that is passed in as an argument gets rendered. If the user is not signed in,
    we do a redirect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The redirect route can either be passed in as the second argument to the hook,
    or if no redirect route is passed in, we set the default to be `/profile`. Now,
    we can use the hook to protect any component like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the protected route hook has been created, we can begin the refactor
    of our app. The next thing we may want to do is update the `Protected` component
    in our app to use this new `protectedRoute` hook. To do so, open *Protected.js*
    and update the component with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now this component is protected and users will continue to be redirected when
    trying to access it if they are not authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing we will want to do is create the main `Form` component. This
    component will hold all of the logic and UI for the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Signing up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirming sign up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resetting password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.xhtml#ch4), we used the `withAuthenticator` component that
    encapsulated most of this logic for us, but we will now be rewriting our own version
    of this from scratch. It is important to understand how to create and handle custom
    forms because you might work with custom designs and business logic that may not
    be compatible with abstractions like the `withAuthenticator` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we’ll do is create the new component files that we will need.
    In the *src* directory, create the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have created these components, let’s continue by creating a reusable
    button that will serve the submit button across all of the forms. In *Button.js*,
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Button` component is a basic component that accepts two props: `title`
    and `onClick`. The `onClick` handler will call the function associated with the
    button and the `title` component will render the text for the button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open *Form.js* and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we’ve imported the individual form components (that we will be writing
    shortly) and created some initial *form state*. The items that we will be keeping
    up with in the form state are the input fields (`username`, `password`, `email`,
    and `confirmationCode`) for the authentication flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s another piece of component state that keeps up with the type of form
    to be rendered: `formType`. Because the form components will be displayed all
    in one route, we will need to check what the current form state is and then render
    the Sign Up form, Sign In form, or Reset Password form.'
  prefs: []
  type: TYPE_NORMAL
- en: '`updateFormType` will be the function that switches between different form
    types. Once a user has successfully signed up, for example, we will call `updateFormType(''signIn'')`
    to render the `SignIn` component so that they can then sign in.'
  prefs: []
  type: TYPE_NORMAL
- en: The `renderForm` function will be updated later with some custom logic, but
    for now, does not do anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following styles and default export to *Form.js*. The styles
    for some of the elements will be shared among the components, so we will be exporting
    the component as well as the styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s go ahead and create the individual form components.
  prefs: []
  type: TYPE_NORMAL
- en: SignIn Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `SignIn` component will render the sign-in form. This component will accept
    two props, one for updating the form state (`updateFormState`) and one for calling
    the `signIn` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: SignUp Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `SignUp` component will render the sign-up form. This component will accept
    two props, one for updating the form state (`updateFormState`) and one for calling
    the `signUp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: ConfirmSignUp Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once a user has signed up, they will receive a confirmation code for MFA. The
    `ConfirmSignUp` component holds the form that will handle and submit this MFA
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This component will accept two props (in React, *props* means “properties,”
    in regard to passing data among components), one for updating the form state (`updateFormState`)
    and one for calling the `confirmSignUp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The next two forms will be for handling the resetting of a forgotten password.
    The first form (`ForgotPassword`) will take the user’s username as an input and
    send them a confirmation code. They can then use that confirmation code along
    with a new password to reset the password in the second form (`ForgotPasswordSubmit`).
  prefs: []
  type: TYPE_NORMAL
- en: ForgotPassword Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ForgotPassword` component will accept two props, one for updating the
    form state (`updateFormState`) and one for calling the `forgotPassword` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: ForgotPasswordSubmit Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ForgotPasswordSubmit` component will accept two props, one for updating
    the form state (`updateFormState`) and one for calling the `forgotPassword` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Completing Form.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that all of the individual form components have been created, we can update
    *Form.js* to use these new components.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we will do is open *Form.js* and create the functions that will
    interact with the authentication service. These functions—`signIn`, `signUp`,
    `confirmSignUp`, `forgotPassword`, and `forgotPasswordSubmit`—will be passed as
    props to the individual form components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the last import, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `signUp`, `confirmSignUp`, `forgotPassword`, and `forgotPasswordSubmit`
    functions will all take the same arguments, the form state object, and the `updateFormType`
    function to update the type of form that is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The `signIn` function is different than the other functions in that it takes
    in a `setUser` function. This `setUser` function will be passed into the `Form`
    component as a prop from the `Profile` component. This `setUser` function will
    allow us to re-render the `Profile` component in order to show or hide the form
    once the user has successfully signed in.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.xhtml#ch4), the *Profile.js* component used the `withAuthenticator`
    component to render the form, so we did not need to render the proper UI ourselves.
    Now that we are handling our own form state, we will need to decide whether to
    render the `Profile` component or the `Form` component based on whether the user
    is authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that in these functions we are using different methods on the
    `Auth` class from AWS Amplify. These methods correspond with the naming of the
    functions we’ve created so that we know exactly what each of these functions is
    doing.
  prefs: []
  type: TYPE_NORMAL
- en: updateForm Helper Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let’s create a *helper function* for updating the form state. The initial
    form state variable that we created in *Form.js* looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This state is an object with values for each form that we will be using.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then used this `initialFormState` variable to create the component state
    (as well as a function to update the component state) using the `useState` hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The problem that we have now is that `updateFormState` is expecting a new object
    with all of these fields in order to update the form state, but a form handler
    only gives us the single form event that is being typed. How can we transform
    this input event into a new object for the state? We’ll do this by creating a
    helper function that we will use inside of the `Form` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Form.js*, add the following code below the `useState` hooks and inside
    the `Form` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `updateForm` function will create a new `state` object using the existing
    state as well as the new values coming in from the event and then call `updateFormState`
    with this new form object. We can then reuse this function across all of our components.
  prefs: []
  type: TYPE_NORMAL
- en: renderForm Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have all of the form components created, the form state setup,
    and the authentication functions created, let’s update the `renderForm` function
    to render the current form. In *Form.js*, update the `renderForm` function to
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `renderForm` function will check the current `formType` that is set in the
    state and render the proper form. As the `formType` changes, `renderForm` will
    be called and subsequently re-render the correct form based on the `formType`.
  prefs: []
  type: TYPE_NORMAL
- en: Form Type Toggles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last thing we will need to do in this component is render the buttons that
    will allow us to manually toggle between different form states. The three main
    form states that we will want to toggle between are `signIn`, `signUp`, and `forgotPassword`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, let’s update the return statement from the `Form` function to also
    return some buttons that allow the user to toggle the form type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `Form` component will now show different buttons based on the current form
    type and allow the user to toggle between signing in, signing up, and resetting
    their password.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Profile Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now need to update the `Profile` component to use the new `Form` component.
    The main changes are that we will be rendering either the `Form` component or
    the user profile information based on whether there is a currently signed-in user.
  prefs: []
  type: TYPE_NORMAL
- en: Amplify has a local eventing system called `Hub`. Amplify uses `Hub` for different
    categories to communicate with one another when specific events occur, such as
    authentication events like a user sign-in or notification of a file download.
  prefs: []
  type: TYPE_NORMAL
- en: In this component, we will also be setting a `Hub` listener to listen for the
    `signOut` authentication event so that we can remove the user from the state and
    re-render the `Profile` component to show the authentication form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update *Profile.js* with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this component, we check to see if there is a user, and if so we return the
    profile information of the user. If there is no user, then we return the authentication
    form (`Form`). We pass in `setUser` as a prop to the `Form` component so that
    when a user signs in we can update the form state to re-render the component and
    show the profile information for that user.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the app, we can now run the `start` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve built out a completely custom authentication flow!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Auth` class for handling direct API calls to the Amazon Cognito authentication
    service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, handling custom form state can become verbose. Try to understand
    the trade-offs between rolling your own authentication flow versus using something
    like the `withAuthenticator` HOC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication is complex. By using a managed-identity service like Amazon Cognito,
    we’ve abstracted away all of the backend code and logic. The only thing we have
    to know or understand is how to interact with the authentication APIs and then
    manage the local state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
