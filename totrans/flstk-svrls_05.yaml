- en: Chapter 5\. Custom Authentication Strategies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be building and improving the app we completed in [Chapter 4](ch04.xhtml#ch4),
    where you learned how to use the `withAuthenticator` HOC to create a preconfigured
    authentication form. You also learned how to use React Router and the `Auth` class
    to create public and protected routes based on the user’s signed-in state.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: While this lays the foundation for what can be done with Amplify and the basics
    around authentication and routing, we want to go one step further and build a
    completely custom authentication flow so we know exactly what is going on under
    the hood and understand the logic and state needed to manage a *custom authentication
    form*. This means that we need to update our app to have custom forms for signing
    up, signing in, and resetting our password instead of using the `withAuthenticator`
    HOC.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: We will also take the idea of *protected routes* one step further by creating
    a hook that we can reuse to wrap any component we are wanting to protect with
    authentication (instead of rewriting the logic in each component).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The `Auth` class, with over 30 different methods, is very powerful and allows
    you to handle all of the authentication logic that most applications demand. By
    the end of this chapter, you will understand how to use the `Auth` class and React
    state to build and manage a custom authentication form.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Creating the protectedRoute Hook
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we will do is to create the custom `protectedRoute` hook that
    we will be using to protect any routes that require authentication. This hook
    will check for the signed-in user information, and if the user is not signed in,
    will redirect them to the sign-in page or another specified route. If the user
    is signed in, the hook will return and render the component passed in as an argument.
    By using this hook, we can do away with any duplicate logic around authentication
    that we may need across multiple components.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *src* directory, create a new file called *protectedRoute.js* and add
    the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This component uses the `useEffect` hook when the component loads to check if
    the user is signed in. If the user is signed in, nothing happens and the component
    that is passed in as an argument gets rendered. If the user is not signed in,
    we do a redirect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'The redirect route can either be passed in as the second argument to the hook,
    or if no redirect route is passed in, we set the default to be `/profile`. Now,
    we can use the hook to protect any component like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that the protected route hook has been created, we can begin the refactor
    of our app. The next thing we may want to do is update the `Protected` component
    in our app to use this new `protectedRoute` hook. To do so, open *Protected.js*
    and update the component with this code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now this component is protected and users will continue to be redirected when
    trying to access it if they are not authenticated.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Form
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing we will want to do is create the main `Form` component. This
    component will hold all of the logic and UI for the following actions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的是创建主要的`Form`组件。该组件将包含以下操作的所有逻辑和 UI：
- en: Signing up
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册
- en: Confirming sign up
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认注册
- en: Signing in
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录
- en: Resetting password
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置密码
- en: In [Chapter 4](ch04.xhtml#ch4), we used the `withAuthenticator` component that
    encapsulated most of this logic for us, but we will now be rewriting our own version
    of this from scratch. It is important to understand how to create and handle custom
    forms because you might work with custom designs and business logic that may not
    be compatible with abstractions like the `withAuthenticator` component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](ch04.xhtml#ch4)中，我们使用了 `withAuthenticator` 组件，该组件为我们封装了大部分这些逻辑，但现在我们将从头开始重写我们自己的版本。了解如何创建和处理自定义表单非常重要，因为您可能会使用自定义设计和业务逻辑，这可能与
    `withAuthenticator` 组件等抽象不兼容。
- en: 'The first thing we’ll do is create the new component files that we will need.
    In the *src* directory, create the following files:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建我们需要的新组件文件。在 *src* 目录中创建以下文件：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that you have created these components, let’s continue by creating a reusable
    button that will serve the submit button across all of the forms. In *Button.js*,
    add the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了这些组件，让我们继续创建一个可重用的按钮，该按钮将在所有表单中用作提交按钮。在 *Button.js* 中，添加以下代码：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `Button` component is a basic component that accepts two props: `title`
    and `onClick`. The `onClick` handler will call the function associated with the
    button and the `title` component will render the text for the button.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Button` 组件是一个基本组件，接受两个 props：`title` 和 `onClick`。`onClick` 处理程序将调用与按钮关联的函数，而
    `title` 组件将渲染按钮的文本。'
- en: 'Next, open *Form.js* and add the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 *Form.js* 并添加以下代码：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we’ve imported the individual form components (that we will be writing
    shortly) and created some initial *form state*. The items that we will be keeping
    up with in the form state are the input fields (`username`, `password`, `email`,
    and `confirmationCode`) for the authentication flow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经导入了将要编写的单独表单组件，并创建了一些初始的*表单状态*。我们将在表单状态中跟踪的项目是认证流程中的输入字段（`username`、`password`、`email`
    和 `confirmationCode`）。
- en: 'There’s another piece of component state that keeps up with the type of form
    to be rendered: `formType`. Because the form components will be displayed all
    in one route, we will need to check what the current form state is and then render
    the Sign Up form, Sign In form, or Reset Password form.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个组件状态的部分，它跟踪要呈现的表单类型：`formType`。因为表单组件将在一个路由中全部显示，所以我们需要检查当前的表单状态，然后呈现注册表单、登录表单或重置密码表单。
- en: '`updateFormType` will be the function that switches between different form
    types. Once a user has successfully signed up, for example, we will call `updateFormType(''signIn'')`
    to render the `SignIn` component so that they can then sign in.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateFormType` 将是切换不同表单类型的函数。例如，一旦用户成功注册，我们将调用 `updateFormType(''signIn'')`
    来渲染 `SignIn` 组件，以便他们可以进行登录。'
- en: The `renderForm` function will be updated later with some custom logic, but
    for now, does not do anything.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderForm` 函数稍后将通过一些自定义逻辑进行更新，但目前什么也不做。'
- en: 'Next, add the following styles and default export to *Form.js*. The styles
    for some of the elements will be shared among the components, so we will be exporting
    the component as well as the styling:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 *Form.js* 中添加以下样式和默认导出。一些元素的样式将在多个组件之间共享，因此我们将导出组件以及样式：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, let’s go ahead and create the individual form components.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续创建各个表单组件。
- en: SignIn Component
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`SignIn` 组件'
- en: 'The `SignIn` component will render the sign-in form. This component will accept
    two props, one for updating the form state (`updateFormState`) and one for calling
    the `signIn` function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`SignIn` 组件将呈现登录表单。该组件将接受两个 props，一个用于更新表单状态 (`updateFormState`)，另一个用于调用 `signIn`
    函数：'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: SignUp Component
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册组件
- en: 'The `SignUp` component will render the sign-up form. This component will accept
    two props, one for updating the form state (`updateFormState`) and one for calling
    the `signUp` function:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`SignUp` 组件将呈现注册表单。该组件将接受两个 props，一个用于更新表单状态 (`updateFormState`)，另一个用于调用 `signUp`
    函数：'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ConfirmSignUp Component
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ConfirmSignUp` 组件'
- en: Once a user has signed up, they will receive a confirmation code for MFA. The
    `ConfirmSignUp` component holds the form that will handle and submit this MFA
    code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 用户注册后，他们将收到用于 MFA 的确认代码。`ConfirmSignUp` 组件包含将处理和提交此 MFA 代码的表单。
- en: 'This component will accept two props (in React, *props* means “properties,”
    in regard to passing data among components), one for updating the form state (`updateFormState`)
    and one for calling the `confirmSignUp` function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将接受两个 props（在 React 中，*props* 意味着“属性”，用于在组件之间传递数据），一个用于更新表单状态 (`updateFormState`)，另一个用于调用
    `confirmSignUp` 函数：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The next two forms will be for handling the resetting of a forgotten password.
    The first form (`ForgotPassword`) will take the user’s username as an input and
    send them a confirmation code. They can then use that confirmation code along
    with a new password to reset the password in the second form (`ForgotPasswordSubmit`).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个表单将用于处理忘记密码的重置。第一个表单 (`ForgotPassword`) 将接受用户的用户名作为输入并发送确认码。然后用户可以使用该确认码和新密码在第二个表单
    (`ForgotPasswordSubmit`) 中重置密码。
- en: ForgotPassword Component
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忘记密码组件
- en: 'The `ForgotPassword` component will accept two props, one for updating the
    form state (`updateFormState`) and one for calling the `forgotPassword` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForgotPassword` 组件将接受两个 props，一个用于更新表单状态 (`updateFormState`)，另一个用于调用 `forgotPassword`
    函数：'
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ForgotPasswordSubmit Component
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忘记密码提交组件
- en: 'The `ForgotPasswordSubmit` component will accept two props, one for updating
    the form state (`updateFormState`) and one for calling the `forgotPassword` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForgotPasswordSubmit` 组件将接受两个 props，一个用于更新表单状态 (`updateFormState`)，另一个用于调用
    `forgotPassword` 函数：'
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Completing Form.js
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成 Form.js
- en: Now that all of the individual form components have been created, we can update
    *Form.js* to use these new components.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有的单独表单组件都已创建，我们可以更新 *Form.js* 来使用这些新组件。
- en: The next thing we will do is open *Form.js* and create the functions that will
    interact with the authentication service. These functions—`signIn`, `signUp`,
    `confirmSignUp`, `forgotPassword`, and `forgotPasswordSubmit`—will be passed as
    props to the individual form components.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是打开 *Form.js* 并创建将与身份验证服务交互的函数。这些函数——`signIn`、`signUp`、`confirmSignUp`、`forgotPassword`
    和 `forgotPasswordSubmit`——将作为 props 传递给各个表单组件。
- en: 'Below the last import, add the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个 import 下面，添加以下代码：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `signUp`, `confirmSignUp`, `forgotPassword`, and `forgotPasswordSubmit`
    functions will all take the same arguments, the form state object, and the `updateFormType`
    function to update the type of form that is displayed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`signUp`、`confirmSignUp`、`forgotPassword` 和 `forgotPasswordSubmit` 函数将接受相同的参数，即表单状态对象和
    `updateFormType` 函数，以更新显示的表单类型。'
- en: The `signIn` function is different than the other functions in that it takes
    in a `setUser` function. This `setUser` function will be passed into the `Form`
    component as a prop from the `Profile` component. This `setUser` function will
    allow us to re-render the `Profile` component in order to show or hide the form
    once the user has successfully signed in.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`signIn` 函数与其他函数不同，它接受一个 `setUser` 函数作为参数。这个 `setUser` 函数将从 `Profile` 组件作为
    prop 传递给 `Form` 组件。这个 `setUser` 函数允许我们重新渲染 `Profile` 组件，以便在用户成功登录后显示或隐藏表单。'
- en: In [Chapter 4](ch04.xhtml#ch4), the *Profile.js* component used the `withAuthenticator`
    component to render the form, so we did not need to render the proper UI ourselves.
    Now that we are handling our own form state, we will need to decide whether to
    render the `Profile` component or the `Form` component based on whether the user
    is authenticated.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第四章](ch04.xhtml#ch4) 中，*Profile.js* 组件使用 `withAuthenticator` 组件来渲染表单，因此我们无需自己渲染适当的
    UI。现在我们正在处理自己的表单状态，我们需要根据用户是否已验证决定是渲染 `Profile` 组件还是 `Form` 组件。
- en: You’ll notice that in these functions we are using different methods on the
    `Auth` class from AWS Amplify. These methods correspond with the naming of the
    functions we’ve created so that we know exactly what each of these functions is
    doing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在这些函数中，我们使用了 AWS Amplify 的 `Auth` 类上的不同方法。这些方法与我们创建的函数命名相对应，以便我们确切地知道每个函数在做什么。
- en: updateForm Helper Function
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: updateForm 辅助函数
- en: 'Next, let’s create a *helper function* for updating the form state. The initial
    form state variable that we created in *Form.js* looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为更新表单状态创建一个 *辅助函数*。我们在 *Form.js* 中创建的初始表单状态变量如下：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This state is an object with values for each form that we will be using.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此状态是一个对象，包含我们将要使用的每个表单的值。
- en: 'We then used this `initialFormState` variable to create the component state
    (as well as a function to update the component state) using the `useState` hook:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `initialFormState` 变量来创建组件状态（以及用于更新组件状态的函数），使用 `useState` 钩子：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The problem that we have now is that `updateFormState` is expecting a new object
    with all of these fields in order to update the form state, but a form handler
    only gives us the single form event that is being typed. How can we transform
    this input event into a new object for the state? We’ll do this by creating a
    helper function that we will use inside of the `Form` function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在遇到的问题是`updateFormState`期望一个包含所有这些字段的新对象来更新表单状态，但表单处理程序只会给我们正在输入的单个表单事件。我们如何将这个输入事件转换为状态的新对象呢？我们将通过创建一个辅助函数来做到这一点，我们将在`Form`函数内部使用这个函数。
- en: 'In *Form.js*, add the following code below the `useState` hooks and inside
    the `Form` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Form.js*中，在`useState`钩子的下方和`Form`函数内部添加以下代码：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `updateForm` function will create a new `state` object using the existing
    state as well as the new values coming in from the event and then call `updateFormState`
    with this new form object. We can then reuse this function across all of our components.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateForm`函数将使用现有状态以及来自事件的新值创建一个新的`state`对象，然后使用这个新的表单对象调用`updateFormState`。我们随后可以在所有组件中重复使用这个函数。'
- en: renderForm Function
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: renderForm函数
- en: 'Now that we have all of the form components created, the form state setup,
    and the authentication functions created, let’s update the `renderForm` function
    to render the current form. In *Form.js*, update the `renderForm` function to
    use the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了所有的表单组件、设置了表单状态，并创建了认证功能，让我们更新`renderForm`函数以渲染当前的表单。在*Form.js*中，更新`renderForm`函数以使用以下代码：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `renderForm` function will check the current `formType` that is set in the
    state and render the proper form. As the `formType` changes, `renderForm` will
    be called and subsequently re-render the correct form based on the `formType`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderForm`函数将检查在状态中设置的当前`formType`并渲染适当的表单。随着`formType`的更改，将调用`renderForm`并据此重新渲染正确的表单。'
- en: Form Type Toggles
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单类型切换
- en: The last thing we will need to do in this component is render the buttons that
    will allow us to manually toggle between different form states. The three main
    form states that we will want to toggle between are `signIn`, `signUp`, and `forgotPassword`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，我们最后需要做的一件事是渲染按钮，允许我们手动在不同的表单状态之间切换。我们希望在登录、注册和忘记密码之间切换这三个主要的表单状态。
- en: 'To do this, let’s update the return statement from the `Form` function to also
    return some buttons that allow the user to toggle the form type:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，让我们更新`Form`函数的返回语句，以便还返回一些按钮，允许用户切换表单类型：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `Form` component will now show different buttons based on the current form
    type and allow the user to toggle between signing in, signing up, and resetting
    their password.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 根据当前的表单类型，`Form`组件现在将显示不同的按钮，允许用户在登录、注册和重置密码之间切换。
- en: Updating the Profile Component
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Profile组件
- en: We now need to update the `Profile` component to use the new `Form` component.
    The main changes are that we will be rendering either the `Form` component or
    the user profile information based on whether there is a currently signed-in user.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更新`Profile`组件以使用新的`Form`组件。主要更改是根据当前是否有已登录用户来渲染`Form`组件或用户配置文件信息。
- en: Amplify has a local eventing system called `Hub`. Amplify uses `Hub` for different
    categories to communicate with one another when specific events occur, such as
    authentication events like a user sign-in or notification of a file download.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify有一个称为`Hub`的本地事件系统。Amplify使用`Hub`来处理不同类别的事件，例如身份验证事件（如用户登录）或文件下载通知。
- en: In this component, we will also be setting a `Hub` listener to listen for the
    `signOut` authentication event so that we can remove the user from the state and
    re-render the `Profile` component to show the authentication form.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们还将设置一个`Hub`监听器来监听`signOut`认证事件，以便我们可以从状态中移除用户，并重新渲染`Profile`组件以显示认证表单。
- en: 'Update *Profile.js* with the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新*Profile.js*：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this component, we check to see if there is a user, and if so we return the
    profile information of the user. If there is no user, then we return the authentication
    form (`Form`). We pass in `setUser` as a prop to the `Form` component so that
    when a user signs in we can update the form state to re-render the component and
    show the profile information for that user.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们检查是否存在用户，如果存在用户，则返回用户的配置文件信息。如果没有用户，则返回认证表单（`Form`）。我们将`setUser`作为一个属性传递给`Form`组件，这样当用户登录时，我们可以更新表单状态以重新渲染组件，并显示该用户的配置文件信息。
- en: Testing the App
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试应用
- en: 'To test the app, we can now run the `start` command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，现在可以运行`start`命令：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations, you’ve built out a completely custom authentication flow!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺你，你已经完全构建了一个自定义的认证流程！
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章中需要记住的几件事：
- en: Use the `Auth` class for handling direct API calls to the Amazon Cognito authentication
    service.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Auth`类处理对Amazon Cognito认证服务的直接API调用。
- en: As you can see, handling custom form state can become verbose. Try to understand
    the trade-offs between rolling your own authentication flow versus using something
    like the `withAuthenticator` HOC.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如你所见，处理自定义表单状态可能会变得冗长。试着理解自己编写认证流程与使用像`withAuthenticator` HOC这样的东西之间的权衡。
- en: Authentication is complex. By using a managed-identity service like Amazon Cognito,
    we’ve abstracted away all of the backend code and logic. The only thing we have
    to know or understand is how to interact with the authentication APIs and then
    manage the local state.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证是复杂的。通过使用像Amazon Cognito这样的托管身份服务，我们已经抽象出所有后端代码和逻辑。我们唯一需要知道或理解的是如何与认证API进行交互，然后管理本地状态。
