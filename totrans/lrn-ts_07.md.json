["```\nfunction sing(song) {\n  console.log(`Singing: ${song}!`);\n}\n```", "```\nfunction sing(song: string) {\n  console.log(`Singing: ${song}!`);\n}\n```", "```\nfunction singTwo(first: string, second: string) {\n  console.log(`${first} / ${second}`);\n}\n\n// Logs: \"Ball and Chain / undefined\"\nsingTwo(\"Ball and Chain\");\n//      ~~~~~~~~~~~~~~~~\n// Error: Expected 2 arguments, but got 1.\n\n// Logs: \"I Will Survive / Higher Love\"\nsingTwo(\"I Will Survive\", \"Higher Love\"); // Ok\n\n// Logs: \"Go Your Own Way / The Chain\"\nsingTwo(\"Go Your Own Way\", \"The Chain\", \"Dreams\");\n//                                      ~~~~~~~~\n// Error: Expected 2 arguments, but got 3.\n```", "```\nfunction announceSong(song: string, singer?: string) {\n  console.log(`Song: ${song}`);\n\n  if (singer) {\n    console.log(`Singer: ${singer}`);\n  }\n}\n\nannounceSong(\"Greensleeves\"); // Ok\nannounceSong(\"Greensleeves\", undefined); // Ok\nannounceSong(\"Chandelier\", \"Sia\"); // Ok\n```", "```\nfunction announceSongBy(song: string, singer: string | undefined) { /* ... */ }\n\nannounceSongBy(\"Greensleeves\");\n// Error: Expected 2 arguments, but got 1.\n\nannounceSongBy(\"Greensleeves\", undefined); // Ok\nannounceSongBy(\"Chandelier\", \"Sia\"); // Ok\n```", "```\nfunction announceSinger(singer?: string, song: string) {}\n//                                       ~~~~\n// Error: A required parameter cannot follow an optional parameter.\n```", "```\nfunction rateSong(song: string, rating = 0) {\n  console.log(`${song} gets ${rating}/5 stars!`);\n}\n\nrateSong(\"Photograph\"); // Ok\nrateSong(\"Set Fire to the Rain\", 5); // Ok\nrateSong(\"Set Fire to the Rain\", undefined); // Ok\n\nrateSong(\"At Last!\", \"100\");\n//                   ~~~~~\n// Error: Argument of type '\"100\"' is not assignable\n// to parameter of type 'number | undefined'.\n```", "```\nfunction singAllTheSongs(singer: string, ...songs: string[]) {\n  for (const song of songs) {\n    console.log(`${song}, by ${singer}`);\n  }\n}\n\nsingAllTheSongs(\"Alicia Keys\"); // Ok\nsingAllTheSongs(\"Lady Gaga\", \"Bad Romance\", \"Just Dance\", \"Poker Face\"); // Ok\n\nsingAllTheSongs(\"Ella Fitzgerald\", 2000);\n//                                 ~~~~\n// Error: Argument of type 'number' is not\n// assignable to parameter of type 'string'.\n```", "```\n// Type: (songs: string[]) => number\nfunction singSongs(songs: string[]) {\n  for (const song of songs) {\n    console.log(`${song}`);\n  }\n\n  return songs.length;\n}\n```", "```\n// Type: (songs: string[], index: number) => string | undefined\nfunction getSongAt(songs: string[], index: number) {\n  return index < songs.length\n    ? songs[index]\n    : undefined;\n}\n```", "```\nfunction singSongsRecursive(songs: string[], count = 0): number {\n  return songs.length ? singSongsRecursive(songs.slice(1), count + 1) : count;\n}\n```", "```\nconst singSongsRecursive = (songs: string[], count = 0): number =>\n  songs.length ? singSongsRecursive(songs.slice(1), count + 1) : count;\n```", "```\nfunction getSongRecordingDate(song: string): Date | undefined {\n  switch (song) {\n    case \"Strange Fruit\":\n      return new Date('April 20, 1939'); // Ok\n\n    case \"Greensleeves\":\n      return \"unknown\";\n      // Error: Type 'string' is not assignable to type 'Date'.\n\n    default:\n      return undefined; // Ok\n  }\n}\n```", "```\nlet nothingInGivesString: () => string;\n```", "```\nlet inputAndOutput: (songs: string[], count?: number) => number;\n```", "```\nconst songs = [\"Juice\", \"Shake It Off\", \"What's Up\"];\n\nfunction runOnSongs(getSongAt: (index: number) => string) {\n  for (let i = 0; i < songs.length; i += 1) {\n    console.log(getSongAt(i));\n  }\n}\n\nfunction getSongAt(index: number) {\n  return `${songs[index]}`;\n}\n\nrunOnSongs(getSongAt); // Ok\n\nfunction logSong(song: string) {\n  return `${song}`;\n}\n\nrunOnSongs(logSong);\n//         ~~~~~~~\n// Error: Argument of type '(song: string) => string' is not\n// assignable to parameter of type '(index: number) => string'.\n//   Types of parameters 'song' and 'index' are incompatible.\n//     Type 'number' is not assignable to type 'string'.\n```", "```\n// Type is a function that returns a union: string | undefined\nlet returnsStringOrUndefined: () => string | undefined;\n\n// Type is either undefined or a function that returns a string\nlet maybeReturnsString: (() => string) | undefined;\n```", "```\nlet singer: (song: string) => string;\n\nsinger = function (song) {\n  // Type of song: string\n  return `Singing: ${song.toUpperCase()}!`; // Ok\n};\n```", "```\nconst songs = [\"Call Me\", \"Jolene\", \"The Chain\"];\n\n// song: string\n// index: number\nsongs.forEach((song, index) => {\n  console.log(`${song} is at index ${index}`);\n});\n```", "```\ntype StringToNumber = (input: string) => number;\n\nlet stringToNumber: StringToNumber;\n\nstringToNumber = (input) => input.length; // Ok\n\nstringToNumber = (input) => input.toUpperCase();\n//                          ~~~~~~~~~~~~~~~~~~~\n// Error: Type 'string' is not assignable to type 'number'.\n```", "```\ntype NumberToString = (input: number) => string;\n\nfunction usesNumberToString(numberToString: NumberToString) {\n  console.log(`The string is: ${numberToString(1234)}`);\n}\n\nusesNumberToString((input) => `${input}! Hooray!`); // Ok\n\nusesNumberToString((input) => input * 2);\n//                            ~~~~~~~~~\n// Error: Type 'number' is not assignable to type 'string'.\n```", "```\nfunction logSong(song: string | undefined): void {\n  if (!song) {\n    return; // Ok\n  }\n\n  console.log(`${song}`);\n\n  return true;\n  // Error: Type 'boolean' is not assignable to type 'void'.\n}\n```", "```\nlet songLogger: (song: string) => void;\n\nsongLogger = (song) => {\n  console.log(`${songs}`);\n};\n\nsongLogger(\"Heart of Glass\"); // Ok\n```", "```\nfunction returnsVoid() {\n  return;\n}\n\nlet lazyValue: string | undefined;\n\nlazyValue = returnsVoid();\n// Error: Type 'void' is not assignable to type 'string | undefined'.\n```", "```\nconst records: string[] = [];\n\nfunction saveRecords(newRecords: string[]) {\n  newRecords.forEach(record => records.push(record));\n}\n\nsaveRecords(['21', 'Come On Over', 'The Bodyguard'])\n```", "```\nfunction fail(message: string): never {\n    throw new Error(`Invariant failure: ${message}.`);\n}\n\nfunction workWithUnsafeParam(param: unknown) {\n    if (typeof param !== \"string\") {\n        fail(`param should be a string, not ${typeof param}`);\n    }\n\n    // Here, param is known to be type string\n    param.toUpperCase(); // Ok\n}\n```", "```\nfunction createDate(timestamp: number): Date;\nfunction createDate(month: number, day: number, year: number): Date;\nfunction createDate(monthOrTimestamp: number, day?: number, year?: number) {\n  return day === undefined || year === undefined\n    ? new Date(monthOrTimestamp)\n    : new Date(year, monthOrTimestamp, day);\n}\n\ncreateDate(554356800); // Ok\ncreateDate(7, 27, 1987); // Ok\n\ncreateDate(4, 1);\n// Error: No overload expects 2 arguments, but overloads\n// do exist that expect either 1 or 3 arguments.\n```", "```\nfunction createDate(monthOrTimestamp, day, year) {\n  return day === undefined || year === undefined\n    ? new Date(monthOrTimestamp)\n    : new Date(year, monthOrTimestamp, day);\n}\n```", "```\nfunction format(data: string): string; // Ok\nfunction format(data: string, needle: string, haystack: string): string; // Ok\n\nfunction format(getData: () => string): string;\n//       ~~~~~~\n// This overload signature is not compatible with its implementation signature.\n\nfunction format(data: string, needle?: string, haystack?: string) {\n  return needle && haystack ? data.replace(needle, haystack) : data;\n}\n```"]