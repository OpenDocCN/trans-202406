["```\nfun startRecording() {\n    val intent = Intent(app, LocationServices::class.java)\n    app.startService(intent)\n}\n```", "```\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun onGpxFileWriteEvent(\n   event: GpxFileWriteEvent\n) {\n    mStarted = false\n    sendStatus()\n    stopSelf()    // <--- fix will stop the service and release the reference at GC\n}\n```", "```\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.*'\n```", "```\nclass MapImportFragment: Fragment() {\n\n    private val viewModel: MapImportViewModel by viewModels()\n\n    /* removed for brevity */\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        /* removed for brevity */\n        recyclerViewMapImport.addOnItemTouchListener(\n            RecyclerItemClickListener(\n                this.context,                            ![1](assets/1.png)\n                recyclerViewMapImport,\n                object: RecyclerItemClickListener.onItemClickListener {\n                    override fun onItemClick(view: View, position: Int) {\n                        binding.fab.activate()\n                        single.fab(position)\n                    }\n            })\n        )\n    }\n\n    /* removed for brevity */\n\n    private fun FloatingActionButton.activate() {\n        /* removed for brevity */\n        fab.setOnClickListener {\n            itemSelected?.let { item ->\n                val inputStream = context.contentResolver.\n                    openInputStream(item.url)\n                inputStream?.let {\n                    viewModel.unarchiveAsync(it, item)   ![2](assets/2.png)\n                }\n            }\n        }\n    }\n}\n```", "```\nclass MapImportViewModel @ViewModelInject constructor(\n    private val settings: Settings\n) : ViewModel() {\n    /* removed for brevity */\n\n    fun unarchiveAsync(inputStream: InputStream, item: ItemData) {\n        viewModelScope.launch {\n            val rootFolder = settings.getAppDir() ?: return@launch\n            val outputFolder = File(rootFolder, \"imported\")\n            /* removed for brevity */\n        }\n    }\n}\n```", "```\nclass MapImportViewModel @ViewModelInject constructor(\n    private val settings: Settings,\n    private val app: Application\n): ViewModel() {\n    /* removed for brevity */\n\n    fun unarchiveAsync(item: ItemData) {\n        viewModelScope.launch {\n            val inputStream = app.contentResolve.\n                openInputStream(item.uri) ?: return@launch\n            val rootFolder = settings.getAppDir() ?: return@launch\n            val outputFolder = File(rootFolder, \"imported\")\n            /* removed for brevity */\n        }\n    }\n}\n```"]