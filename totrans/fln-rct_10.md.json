["```\nconst Component = () => <div>hi!</div>;\n```", "```\n{\n  $$typeOf: Symbol(\"react.element\"),\n  type: () => ({\n    $$typeOf: Symbol(\"react.element\"),\n    type: \"div\",\n    props: {\n      children: [\n        {\n          $$typeOf: Symbol(\"react.element\"),\n          props: {\n            children: \"hi!\"\n          },\n        },\n      ],\n    },\n  }),\n}\n```", "```\n    <div>\n      <h1>hi!</h1>\n      <p>I like React!</p>\n    </div>\n    ```", "```\n    {\n      $$typeOf: Symbol(\"react.element\"),\n      type: \"div\",\n      props: {\n        children: [\n          {\n            $$typeOf: Symbol(\"react.element\"),\n            type: \"h1\",\n            props: {\n              children: \"hi!\"\n            }\n          },\n          {\n            $$typeOf: Symbol(\"react.element\"),\n            type: \"p\",\n            props: {\n              children: \"I like React!\"\n            }\n          },\n        ],\n      },\n    }\n    ```", "```\n// server.js\nconst express = require(\"express\");\nconst path = require(\"path\");\nconst React = require(\"react\");\nconst ReactDOMServer = require(\"react-dom/server\");\nconst App = require(\"./src/App\");\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, \"build\")));\n\napp.get(\"*\", async (req, res) => {\n  // This is the secret sauce\n  const rscTree = await turnServerComponentsIntoTreeOfElements(<App />);\n  // This is the secret sauce\n\n  // Render the awaited server components to a string\n  const html = ReactDOMServer.renderToString(rscTree);\n\n  // Send it\n  res.send(`\n <!DOCTYPE html>\n <html>\n <head>\n <title>My React App</title>\n </head>\n <body>\n <div id=\"root\">${html}</div>\n <script src=\"/static/js/main.js\"></script>\n </body>\n </html>\n `);\n});\n\napp.listen(3000, () => {\n  console.log(\"Server listening on port 3000\");\n});\n```", "```\nasync function turnServerComponentsIntoTreeOfElements(jsx) {\n  if (\n    typeof jsx === \"string\" ||\n    typeof jsx === \"number\" ||\n    typeof jsx === \"boolean\" ||\n    jsx == null\n  ) {\n    // Don't need to do anything special with these types.\n    return jsx;\n  }\n  if (Array.isArray(jsx)) {\n    // Process each item in an array.\n    return await Promise.all(jsx.map(renderJSXToClientJSX(child)));\n  }\n\n  // If we're dealing with an object\n  if (jsx != null && typeof jsx === \"object\") {\n    // If the object is a React element,\n    if (jsx.$$typeof === Symbol.for(\"react.element\")) {\n      // `{ type } is a string for built-in components.\n      if (typeof jsx.type === \"string\") {\n        // This is a built-in component like <div />.\n        // Go over its props to make sure they can be turned into JSON.\n        return {\n          ...jsx,\n          props: await renderJSXToClientJSX(jsx.props),\n        };\n      }\n      if (typeof jsx.type === \"function\") {\n        // This is a custom React component (like <Footer />).\n        // Call its function, and repeat the procedure for the JSX it returns.\n        const Component = jsx.type;\n        const props = jsx.props;\n        const returnedJsx = await Component(props);\n        return await renderJSXToClientJSX(returnedJsx);\n      }\n      throw new Error(\"Not implemented.\");\n    } else {\n      // This is an arbitrary object (props, or something inside them).\n      // It's an object, but not a React element (we handled that case above).\n      // Go over every value and process any JSX in it.\n      return Object.fromEntries(\n        await Promise.all(\n          Object.entries(jsx).map(async ([propName, value]) => [\n            propName,\n            await renderJSXToClientJSX(value),\n          ])\n        )\n      );\n    }\n  }\n  throw new Error(\"Not implemented\");\n}\n```", "```\n<div>hi!</div>\n```", "```\n[\n  <div>hi</div>,\n  <h1>hello</h1>,\n  <span>love u</span>,\n  (props) => <p id={props.id}>lorem ipsum</p>,\n];\n```", "```\nif (jsx.$$typeof === Symbol.for(\"react.element\")) {\n  if (typeof jsx.type === \"string\") {\n    // This is a component like <div />.\n    // Go over its props to make sure they can be turned into JSON.\n    return {\n      ...jsx,\n      props: await renderJSXToClientJSX(jsx.props),\n    };\n  }\n  if (typeof jsx.type === \"function\") {\n    // This is a custom React component (like <Footer />).\n    // Call its function, and repeat the procedure for the JSX it returns.\n    const Component = jsx.type;\n    const props = jsx.props;\n    const returnedJsx = await Component(props);\n    return renderJSXToClientJSX(returnedJsx);\n  }\n  throw new Error(\"Not implemented.\");\n} else {\n  // This is an arbitrary object (props, or something inside of them).\n  // Go over every value and process any JSX in it.\n  return Object.fromEntries(\n    await Promise.all(\n      Object.entries(jsx).map(async ([propName, value]) => [\n        propName,\n        await renderJSXToClientJSX(value),\n      ])\n    )\n  );\n}\n```", "```\nconst element = <h1>Hello, world</h1>;\n```", "```\nconst htmlString = ReactDOMServer.renderToString(element);\n// htmlString will be '<h1>Hello, world</h1>'\n```", "```\nJSON.stringify(object, replacer);\nJSON.parse(object, replacer);\n```", "```\nJSON.stringify(jsxTree, (key, value) => {\n  if (key === \"$$typeof\") {\n    return \"react.element\"; // <- a string!!\n  }\n\n  return value; // <- return all other values as is\n});\n```", "```\nJSON.parse(serializedJsxTree, (key, value) => {\n  if (key === \"$$typeof\") {\n    return Symbol.for(\"react.element\"); // <- a symbol!!\n  }\n\n  return value; // <- return all other values as is\n});\n```", "```\n<a href=\"/blog\">Blog</a>\n```", "```\nwindow.addEventListener(\"click\", (event) => {\n  if (event.target.tagName !== \"A\") {\n    return;\n  }\n\n  event.preventDefault();\n  navigate(event.target.href);\n});\n```", "```\nasync function navigate(url) {\n  const response = await fetch(url, { headers: { \"jsx-only\": true } });\n  const jsxTree = await response.json();\n  const element = JSON.parse(jsxTree, (key, value) => {\n    if (key === \"$$typeof\") {\n      return Symbol.for(\"react.element\");\n    }\n\n    return value;\n  });\n  root.render(element);\n}\n```", "```\nimport { hydrateRoot } from \"react-dom/client\";\nimport { deserialize } from \"./serializer.js\";\nimport App from \"./App\";\n\nconst root = hydrateRoot(document, <App />); // <- this is root\n\nwindow.addEventListener(\"click\", (event) => {\n  if (event.target.tagName !== \"a\") {\n    return;\n  }\n\n  event.preventDefault();\n  navigate(event.target.href);\n});\n\nasync function navigate(url) {\n  const response = await fetch(url);\n  const jsxTree = await response.json();\n  const element = deserialize(jsxTree);\n  root.render(element);\n}\n```", "```\napp.get(\"*\", async (req, res) => {\n  const jsxTree = await turnServerComponentsIntoTreeOfElements(<App />);\n\n  // This is the secret sauce\n  if (req.headers[\"jsx-only\"]) {\n    res.end(\n      JSON.stringify(jsxTree, (key, value) => {\n        if (key === \"$$typeof\") {\n          return \"react.element\";\n        }\n\n        return value;\n      })\n    );\n  } else {\n    const html = ReactDOMServer.renderToString(jsxTree);\n\n    res.send(`\n <!DOCTYPE html>\n <html>\n <head>\n <title>My React App</title>\n </head>\n <body>\n <div id=\"root\">${html}</div>\n <script src=\"/static/js/main.js\"></script>\n </body>\n </html>\n `);\n  }\n});\n```", "```\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <h1>Hello friends, look at my nice counter!</h1>\n      <p>About me: I like pie! Sign my guest book!</p>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}\n```", "```\n// Server Component\nfunction ServerCounter() {\n  return (\n    <div>\n      <h1>Hello friends, look at my nice counter!</h1>\n      <p>\n        About me: I like to count things and I'm a counter and sometimes I count\n        things but other times I enjoy playing the Cello and one time at band\n        camp I counted to 1000 and a pirate appeared\n      </p>\n      <InteractiveClientPart />\n    </div>\n  );\n}\n```", "```\n// Client Component\n\"use client\";\nfunction InteractiveClientPart() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}\n```", "```\n{\n  $$typeof: Symbol(react.element),\n  type: \"div\",\n  props: {\n    children: [\n      {\n        $$typeof: Symbol(react.element),\n        type: \"h1\",\n        props: {\n          children: \"Hello friends, look at my nice counter!\"\n        }\n      },\n      {\n        $$typeof: Symbol(react.element),\n        type: \"p\",\n        props: {\n          children: \"About me: I like to count things\"\n        }\n      },\n      {\n        // The ClientPart element placeholder with a module reference\n        // Pay attention to this: it's a module reference!\n        $$typeof: Symbol(react.element),\n        type: {\n          $$typeof: Symbol(react.module.reference),\n          name: \"default\",\n          filename: \"./src/ClientPart.js\",\n          moduleId: \"client-part-1234\"\n        },\n        props: {\n          children: [\n            // ...other server components and client module references\n            {\n              $$typeof: Symbol(react.element),\n              type: {\n                $$typeof: Symbol(react.module.reference),\n                name: \"default\",\n                filename: \"./src/AnotherClientComponent.js\"\n              },\n              props: {\n                children: [],\n              }\n            },\n            {\n              $$typeof: Symbol(react.element),\n              type: \"div\",\n              props: {\n                children: \"I am a server component\"\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```", "```\nfunction MyComponent() {\n  return <div>hello world</div>;\n}\n```", "```\n{\n  $$typeof: Symbol(react.element),\n  type: \"div\",\n  props: {\n    children: \"hello world\"\n  }\n}\n```", "```\nfunction ServerComponent() {\n  return <ClientComponent onClick={() => alert(\"hi\")} />;\n}\n```", "```\n\"use client\";\nimport { ServerComponent } from \"./ServerComponent\";\n\nfunction ClientComponent() {\n  return (\n    <div>\n      <h1>Hey everyone, check out my great server component!</h1>\n      <ServerComponent />\n    </div>\n  );\n}\n```", "```\nimport { readFile } from \"node:fs/promises\";\n\nexport async function ServerComponent() {\n  const content = await readFile(\"./some-file.txt\", \"utf-8\");\n  return <div>{content}</div>;\n}\n```", "```\n\"use client\";\n\nfunction ClientComponent({ children }) {\n  return (\n    <div>\n      <h1>Hey everyone, check out my great server component!</h1>\n      {children}\n    </div>\n  );\n}\n```", "```\nimport { ServerComponent } from \"./ServerComponent\";\n\nasync function TheParentOfBothComponents() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  );\n}\n```", "```\n// App.js\n\nasync function requestUsername(formData) {\n  'use server';\n  const username = formData.get('username');\n  // ...\n}\n\nexport default App() {\n  <form action={requestUsername}>\n    <input type=\"text\" name=\"username\" />\n    <button type=\"submit\">Request</button>\n  </form>\n}\n```", "```\n\"use client\";\n\nimport incrementLike from \"./actions\";\nimport { useState, useTransition } from \"react\";\n\nfunction LikeButton() {\n  const [isPending, startTransition] = useTransition();\n  const [likeCount, setLikeCount] = useState(0);\n\n  const incrementLink = async () => {\n    \"use server\";\n    return likeCount + 1;\n  };\n\n  const onClick = () => {\n    startTransition(async () => {\n      // To read a server action return value, we await the promise returned.\n      const currentCount = await incrementLike();\n      setLikeCount(currentCount);\n    });\n  };\n\n  return (\n    <>\n      <p>Total Likes: {likeCount}</p>\n      <button onClick={onClick} disabled={isPending}>\n        Like\n      </button>;\n    </>\n  );\n}\n```"]