- en: Chapter 3\. URLs and Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most web pages and applications deal with URLs in some way. This could be an
    action like crafting a link with certain query parameters, or URL-based routing
    in a single-page application (SPA).
  prefs: []
  type: TYPE_NORMAL
- en: 'A URL is just a string that complies with some syntax rules as defined in [RFC
    3986, “Uniform Resource Identifier (URI): Generic Syntax”](https://oreil.ly/SUziR).
    There are several component parts of a URL that you may need to parse or manipulate.
    Doing so with techniques like regular expressions or string concatenation isn’t
    always reliable.'
  prefs: []
  type: TYPE_NORMAL
- en: Today, browsers support the URL API. This API provides a `URL` constructor that
    can create, derive, and manipulate URLs. This API was somewhat limited at first,
    but later updates added utilities like the `URLSearchParams` interface that simplified
    building and reading query strings.
  prefs: []
  type: TYPE_NORMAL
- en: Parts of a URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you call the `URL` constructor with a string representing a valid URL,
    the resulting object contains properties representing the URL’s different component
    parts. [Figure 3-1](#urlParts) shows the most commonly used of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`protocol` (1)'
  prefs: []
  type: TYPE_NORMAL
- en: For web URLs, this is typically `http:` or `https:` (note that the colon is
    included, but not the slashes). Other protocols are possible such as `file:` (for
    a local file not hosted on a server) or `ftp:` (a resource on an FTP server).
  prefs: []
  type: TYPE_NORMAL
- en: '`hostname` (2)'
  prefs: []
  type: TYPE_NORMAL
- en: The domain or host name (`example.com`).
  prefs: []
  type: TYPE_NORMAL
- en: '`pathname` (3)'
  prefs: []
  type: TYPE_NORMAL
- en: The path of the resource relative to the root, with leading slash (`/admin/login`).
  prefs: []
  type: TYPE_NORMAL
- en: '`search` (4)'
  prefs: []
  type: TYPE_NORMAL
- en: Any query parameters. The `?` character is included (`?username=sysadmin`).
  prefs: []
  type: TYPE_NORMAL
- en: '![An example URL with its component parts highlighted](assets/wacb_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. An example URL with its component parts highlighted
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Some other parts of the `URL` include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hash`'
  prefs: []
  type: TYPE_NORMAL
- en: If the URL contains a hash, returns the hash portion (including the hash symbol,
    `#`). This is sometimes used for internal navigation for older SPAs. For the URL
    *https://example.com/app#profile*, the value of `hash` would be `#profile`.
  prefs: []
  type: TYPE_NORMAL
- en: '`host`'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `hostname`, but also includes the port number (if specified), for
    example `localhost:8443`.
  prefs: []
  type: TYPE_NORMAL
- en: '`origin`'
  prefs: []
  type: TYPE_NORMAL
- en: The origin of the URL. This usually includes the protocol, hostname, and port
    (if specified).
  prefs: []
  type: TYPE_NORMAL
- en: You can get the entire URL string by calling `toString` on it, or by accessing
    its `href` property.
  prefs: []
  type: TYPE_NORMAL
- en: If an invalid URL string is passed to the `URL` constructor, it throws an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving a Relative URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have a partial or relative URL like `/api/users` that you want to resolve
    to a full, absolute URL like *https://example.com/api/users*.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a `URL` object, passing the relative URL and the desired base URL, as
    shown in [Example 3-1](#createRelativeUrl).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-1\. Creating relative URLs
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Without the second argument, the `URL` constructor would throw an error because
    `/api/users` is not a valid URL. The second argument is the base for constructing
    a new URL. It constructs the URL by assuming the given path is relative to the
    base URL.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second argument must be a valid URL. To construct the final URL, the typical
    rules for a valid relative URL are applied depending on the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the first argument starts with a leading slash, the pathname of the base
    URL is ignored and the new URL is relative to the root of the base URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, the URL is calculated relative to the base URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the first argument is a valid URL on its own, the base URL is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: If the constructor’s second argument is not a string, `toString` is called on
    it and the resulting string is used. This means you can pass other `URL` objects,
    or even other objects that are similar to `URL`. You can even pass `window.location`
    (a `Location` object, which has similar properties to a `URL`) to generate a new
    URL on the current origin (see [Example 3-2](#createRelativeUrl3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-2\. Creating a relative URL on the same origin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Removing Query Parameters From a URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to remove all query parameters from a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a `URL` object and set its `search` property to an empty string, as shown
    in [Example 3-3](#removeQueryParams).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-3\. Removing a URL’s query parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The query parameters in the URL are represented in two ways: with the `search`
    property and the `searchParams` property.'
  prefs: []
  type: TYPE_NORMAL
- en: The `search` property is a single string containing all of the query parameters
    along with the leading `?` character. If you want to delete the entire query string,
    you can set this to an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `search` property is set to an empty string. If you set it to
    `null`, you’ll get the literal string `null` in the query string (see [Example 3-4](#example3-4)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-4\. Incorrectly trying to remove all query parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `searchParams` property is a `URLSearchParams` object. It has methods to
    view, add, and remove query parameters. When adding query parameters, it automatically
    handles encoding characters. If you want to remove just a single query parameter,
    you can call `delete` on this object, as shown in [Example 3-5](#example3-5).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-5\. Removing a single query parameter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding Query Parameters to a URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have an existing URL that may already have some query parameters in it,
    and you want to add additional query parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `URLSearchParams` object, accessible via the `searchParams` property,
    to add the additional parameters (see [Example 3-6](#addQueryParams)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-6\. Adding additional query parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This URL already has a query parameter (`objectType=user`). The code uses the
    `searchParams` property of the parsed URL to append a few more query parameters.
    Two `userRole` parameters are added. When you use `append`, it adds new values
    and keeps existing values. To replace all parameters of that name with the new
    value, you can use `set` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the new parameters, the full URL now is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you call `append` with a parameter name but no value, you’ll get an exception,
    as shown in [Example 3-7](#example3-7).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-7\. Attempting to call `append` without a value
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This method gracefully handles other argument types. If it doesn’t receive a
    string value, it converts the value to a string (see [Example 3-8](#example3-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-8\. Appending nonstring parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using `URLSearchParams` to add query parameters automatically handles any potential
    encoding issues. If you’re adding a parameter with a reserved character (as defined
    in RFC 3986) such as `&` or `?`, `URLSearchParams` automatically encodes these
    to ensure a valid URL. It uses *percent encoding*, which adds a percent sign followed
    by the hexadecimal digits representing that character. For example, `&` becomes
    `%26` because `0x26` is the hex code for an ampersand.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see this encoding in action by appending a query parameter containing
    some reserved characters together, as shown in [Example 3-9](#example3-9):'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-9\. Encoding reserved characters in a query parameter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting URL becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The URL contains `%26` in place of `&`, and `%3F` in place of `?`. These characters
    have special meaning in a URL. `?` indicates the beginning of the query string,
    and `&` is a separator between parameters.
  prefs: []
  type: TYPE_NORMAL
- en: As [Example 3-6](#addQueryParams) shows, calling `append` multiple times with
    the same key adds a new query parameter with the given key. When you call `.append('userRole',
    'user')`, it adds the parameter `userRole=user` and keeps the previous `userRole=admin`.
    `URLSearchParams` also has a `set` method. `set` adds query parameters as well,
    but with different behavior. `set` replaces any existing parameters under the
    given key with the new one (see [Example 3-10](#setQueryParams)). If you constructed
    the same URL again using `set`, the result would be different.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-10\. Adding query parameters with `set`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When you use `set` instead of `append`, the second `userRole` parameter overwrites
    the first one, and the resulting URL is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that there is only one `userRole` parameter—the last one that was added.
  prefs: []
  type: TYPE_NORMAL
- en: Reading Query Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to parse and list the query parameters in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `forEach` method of `URLSearchParams` to list the keys and values (see
    [Example 3-11](#readQueryParams)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-11\. Reading query parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When listing the query parameters on a URL, any percent-encoded reserved characters
    are decoded back to their original values (see [Example 3-12](#example3-12)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-12\. Using the `getQueryParameters` function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_urls_and_routing_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The `name` parameter contains a percent-encoded ampersand character (`%26`).
  prefs: []
  type: TYPE_NORMAL
- en: 'This code prints the parameter `name=luke%26ben` with the original unencoded
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`forEach` iterates over each unique key/value pair combination. Even if the
    URL has multiple query parameters with the same key, this prints each unique key/value
    pair separately.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Simple Client-Side Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have a single-page application and want to add client-side routing. This
    lets the user navigate between different URLs without making a new network request
    and replacing the content on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `history.pushState` and the `popstate` event to implement a simple router.
    This simple router renders the contents of a template when the URL matches a known
    route (see [Example 3-13](#simpleRouter)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-13\. A simple client-side router
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With this router in place, you can add links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When you click these links, the browser attempts to navigate to a new page,
    making a request to the server. This likely results in a 404 error, which is not
    what you want. To use the client-side router, you need to intercept the click
    events and integrate with the router from [Example 3-13](#simpleRouter), as shown
    in [Example 3-14](#routeListeners).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-14\. Adding click handlers to route links
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When you click one of these links, the `preventDefault` call stops the browser’s
    default behavior (performing a full page navigation). Instead, it takes the `href`
    attribute and passes it to the client-side router. If it finds a matching route,
    it renders the content for that route.
  prefs: []
  type: TYPE_NORMAL
- en: To make this a full solution, there is one more necessary piece. If you click
    one of these client-side routes, then click the browser’s Back button, nothing
    happens. This is because the page isn’t actually navigating, but just popping
    the previous state from the router. To handle this scenario, you need to also
    listen for the browser’s `popstate` event and render the correct content, as shown
    in [Example 3-15](#popState).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-15\. Listening for the popstate event
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks the Back button, the browser fires the `popstate` event.
    This changes the page URL back, and you just need to look up the content for the
    route matching the URL. In this case, you don’t want to call `pushState` because
    that adds a new history state, which probably isn’t what you want since you just
    popped an old history state off of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This client-side router is working, but there’s one issue. If you click the
    About link, then click the Refresh button, the browser makes a new network request,
    which probably results in a 404 error. To fix this last problem, the server needs
    to be configured to return the main HTML and JavaScript content regardless of
    the URL’s pathname. This loads the router code, which is called with the value
    of `window.location.pathname`. If everything is configured right, the client-side
    route handler executes and renders the correct content.
  prefs: []
  type: TYPE_NORMAL
- en: When using client-side routing, navigating between pages can be faster since
    there is no round trip to the server. It makes navigation smoother and more responsive.
    There are disadvantages too. To support the quick page transition, you often have
    to load a lot of extra JavaScript up front, so the initial page load may be slower.
  prefs: []
  type: TYPE_NORMAL
- en: Matching URLs to Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to define a pattern of valid URLs that you can match URLs against.
    You may also want to extract part of a URL’s path. For example, given the URL
    *https://example.com/api/users/123/profile*, you want the user ID (`123`).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the URL Pattern API to define the expected pattern and extract the part
    you need.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/Eb-k2)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: With this API, you can create a `URLPattern` object that defines a pattern that
    you can use to match URLs (see [Example 3-16](#urlPattern)). It’s created with
    a string defining the pattern to match. The string can contain named groups that,
    when matching against a URL string, are extracted. You can access the extracted
    values by their index. These groups are similar to capturing groups in a regular
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-16\. Creating a `URLPattern`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 3-16](#urlPattern) shows a simple URL pattern with a single named
    group `userId`. The group name is preceded by a colon character. You can use this
    pattern object to match URLs and, if they match, extract the user ID from them.
    [Example 3-17](#urlMatching) explores some different URLs and how to test them
    against `profilePattern` using the `test` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-17\. Testing URLs against a pattern
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `profilePattern` specifies an exact pathname match, which is why the last
    example in [Example 3-17](#urlMatching) did not work. You can define a less strict
    version that uses a wildcard character (`*`) so it needn’t be exact. With this
    new pattern, you can match on partial pathnames.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-18\. Using a wildcard in the pattern
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can use the pattern’s `exec` method to get more data about the match. If
    the pattern matches the URL, `exec` returns an object containing any matches to
    parts of the URL. Each nested object has an `input` property indicating which
    part of the URL matched, and a `groups` property that has any named groups defined
    in the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: You can use `exec` to extract the user ID from matching URLs in [Example 3-19](#urlExec).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-19\. Extracting the user ID
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While it doesn’t have full browser support yet, this is a very flexible API.
    You can define patterns for any parts of the URL, matching inputs and extracting
    groups.
  prefs: []
  type: TYPE_NORMAL
