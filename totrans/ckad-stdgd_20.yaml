- en: Chapter 20\. Security Contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running a Pod in Kubernetes without implementing more restrictive security
    measures can pose a security risk. Without these measures, an attacker can potentially
    gain access to the host system or perform malicious activities, such as accessing
    files containing sensitive data. A security context defines privilege and access
    control settings for containers as part of a Pod specification. The following
    list provides some examples for security-related parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The user ID that should be used to run the Pod and/or container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The group ID that should be used for filesystem access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Granting a running process inside the container some privileges of the root
    user but not all of them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will give you an overview of defining security contexts and seeing
    their runtime effects in practice. Given the wide range of security settings,
    we won’t be able to discuss all of them. You will find additional use cases and
    configuration options in the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
  prefs: []
  type: TYPE_NORMAL
- en: Working with Security Contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The security context is not a Kubernetes primitive. It is modeled as a set of
    attributes under the directive `securityContext` within the Pod specification.
    Security settings defined on the Pod level apply to all containers running in
    the Pod. When applied to a single container, it will have no effects on other
    containers running in the same Pod.
  prefs: []
  type: TYPE_NORMAL
- en: You can apply security settings to all containers of a Pod with the attribute
    `spec.securityContext`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For individual containers, you can apply security settings with the attribute
    `spec.containers[].securityContext`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 20-1](#security_context_levels) shows the use of security settings
    `runAsUser` and `fsGroup` applied on the Pod and container level. A later section
    will describe the runtime effect of those settings by example.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 2001](Images/ckd2_2001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-1\. Applying security settings on the Pod and container level
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some security context attributes are available on the Pod *and* the container
    level. If you define the same security context on both levels then the value assigned
    on the container level will take precedence. [Figure 20-2](#security_context_override)
    shows an override of a container-level security context value for the container
    named `nginx`. For that container, the value 2000 will apply.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 2002](Images/ckd2_2002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-2\. Overriding a security context attribute on the container level
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more information on the specifics of Pod-level security attributes, see
    the [PodSecurityContext](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#podsecuritycontext-v1-core)
    API. Container-level security attributes can be found in the [SecurityContext](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#securitycontext-v1-core)
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a security context to a Deployment’s Pod template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The definition of a Deployment applies security context attributes in the same
    way as a vanilla Pod definition. You’d use the same Pod- and container-level attributes
    in the Pod template section of the Deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Defining security-related parameters with the security context is always limited
    to a container. The Kubernetes ecosystem offers other ways to improve or govern
    security for applications, some of which directly tie in with the security context
    concept. For example, you can use the [Pod Security Admission](https://kubernetes.io/docs/concepts/security/pod-security-admission/)
    to enforce desired security settings for all Pods within a namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Security Context on the Pod Level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Container images can define security-relevant instructions to reduce the attack
    vector for the running container. By default, containers run with root privileges,
    which provide supreme access to all processes and the container’s filesystem.
    As a best practice, you should craft the corresponding `Dockerfile` in a such
    a way that the container will be run with a user ID other than 0 with the help
    of the `USER` instruction. There are many other ways to secure a container on
    the container level, but we won’t go into any more detail here. Refer to [*Container
    Security*](https://learning.oreilly.com/library/view/container-security/9781492056690/)
    by Liz Rice (O’Reilly) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: To make the functionality of a security-context more transparent, let’s look
    at a use case. Some images, like the one for the open source reverse-proxy server
    [NGINX](https://hub.docker.com/_/nginx), must be run with the root user. Say you
    wanted to enforce that containers cannot be run as a root user as a sensible security
    strategy. The YAML manifest shown in [Example 20-1](#security_context_nginx_non_root)
    defines the security configuration on the Pod level as a direct child of the `spec`
    attribute. If you were to run other containers inside the Pod, then the `runAsNonRoot`
    setting apply to them as well.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-1\. Setting a security context on the container level for the NGINX
    image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_security_contexts_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Enforces the use of a non-root user to run the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating the Pod from this manifest will work as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, the image is not compatible. The container fails during the
    startup process with the status `CreateContainerConfigError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will find the root cause for this issue in the event logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are alternative NGINX images available that are not required to run with
    the root user. One example is [bitnami/nginx](https://hub.docker.com/r/bitnami/nginx).
    Upon a closer look at the `Dockerfile` that produced the image, you will see that
    the container runs with the user ID 1001\. [Example 20-2](#security_context_bitnami_nginx_non_root)
    shows the use of the Bitnami image.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-2\. Setting a security context on the container level for the Bitnami
    NGIX image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Starting the container with the `runAsNonRoot` directive will work just fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The container will indicate the “Running” status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The container could be executed with the user ID set by the container image
    that you easily surface by running the following command inside the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The output of the command renders the user ID 1001, a non-root user ID.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Security Context on the Container Level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can impose many other security restrictions on a container running in Kubernetes.
    For example, you may want to set the access control for files and directories.
    Say that, whenever a file is created on the filesystem, the owner of the file
    should be the arbitrary group ID 3500\. The YAML manifest shown in [Example 20-3](#security_context_fs_group)
    assigns the security context settings on the container level.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-3\. Setting a security context on the container level
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Pod object from the manifest file and inspect the status. The Pod
    should transition into the “Running” status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can easily verify the effect of setting the filesystem group ID. Open an
    interactive shell to the container, navigate to the mounted volume, and create
    a new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Inspecting the ownership of the file will show the group ID 3500 automatically
    assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Security Context on the Pod and Container Level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, let’s demonstrate the override behavior on the container level if you
    already defined the same attribute on the Pod level. [Example 20-4](#security_context_non_root_user_override)
    shows the definition of the `runAsNonRoot` on both levels.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-4\. Setting a security context on the Pod and container level
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_security_contexts_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Assign the default value `true` to all containers of the Pod.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_security_contexts_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The value `false` will take precedence even though `true` has been assigned
    on the Pod level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Pod object from the manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open an interactive shell to the container and execute the command for rendering
    the user ID that runs the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The container `root` returns the value 0, which is the user ID for the root
    user. The container `non-root` returns the user ID 1001, the ID set by the container
    image itself.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s important to enforce security best practices for Pods. This chapter covered
    the security context concept. With the help of a security context, you can control
    container permissions to access objects such as files, run a container in privileged
    and unprivileged mode, specify Linux capabilities, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: The security context can be declared on a Pod level and container level. The
    Pod level applies the provided security settings to all containers in the Pod.
    The container level applies only to individual containers. The container-level
    security settings override the Pod-level security settings if the same attribute
    value is specified on both levels.
  prefs: []
  type: TYPE_NORMAL
- en: Exam Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Experiment with options available to security contexts
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes user documentation and API documentation is a good starting point
    for exploring security context options. You will find that there’s an overlap
    in the options available via the PodSecurityContext and a SecurityContext APIs.
    While working through the different use cases solved by a security context option,
    verify their outcome by running an operation that should either be permitted or
    disallowed.
  prefs: []
  type: TYPE_NORMAL
- en: Understand the implications of defining a security context on the Pod and container
    level
  prefs: []
  type: TYPE_NORMAL
- en: You can define a security context on the Pod level with `spec.securityContext`,
    and on the container level with `spec.containers[].securityContext`. If defined
    on the Pod level, settings can be overridden by specifying them with a different
    value on the container level. The exam may confront you with existing Pods that
    set a security context on both levels. Understand which value will take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solutions to these exercises are available in [Appendix A](app01_split_016.xhtml#appendix_a_security_contexts).
  prefs: []
  type: TYPE_NORMAL
- en: Define a Pod named `busybox-security-context` that uses the image `busybox:1.36.1`
    for a single container running the command `sh -c sleep 1h`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an ephemeral Volume of type `emptyDir`. Mount the Volume to the container
    at */data/test*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Define a security context that runs the container with user ID 1000, with group
    ID 3000, and the filesystem group ID 2000\. Ensure that the container should not
    allow privilege escalation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the Pod object and ensure that it transitions into the “Running” status.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a shell to the running container and create a new file named *logs.txt*
    in the directory */data/test*. What’s the file’s user ID and group ID?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a Deployment named `nginx` in the namespace `h20` with the 3 replicas.
    The Pod template should use the the image `nginx:1.25.3-alpine`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the security context, assign the `drop` Linux capability for that Pod
    template. The attribute for the `drop` capabilities should use the value `all`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the Deployment object and inspect its replicas. Does NGINX work as expected?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
