- en: Chapter 20\. Security Contexts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 20 章\. 安全上下文
- en: 'Running a Pod in Kubernetes without implementing more restrictive security
    measures can pose a security risk. Without these measures, an attacker can potentially
    gain access to the host system or perform malicious activities, such as accessing
    files containing sensitive data. A security context defines privilege and access
    control settings for containers as part of a Pod specification. The following
    list provides some examples for security-related parameters:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中运行 Pod 如果没有实施更严格的安全措施可能会造成安全风险。没有这些措施，攻击者可能会访问主机系统或执行恶意活动，例如访问包含敏感数据的文件。安全上下文定义了容器作为
    Pod 规范的一部分的特权和访问控制设置。以下列表提供了一些与安全相关的参数示例：
- en: The user ID that should be used to run the Pod and/or container
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该用于运行 Pod 和/或容器的用户 ID
- en: The group ID that should be used for filesystem access
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于文件系统访问的组 ID
- en: Granting a running process inside the container some privileges of the root
    user but not all of them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器内运行的进程授予根用户的一些特权，但并非全部
- en: This chapter will give you an overview of defining security contexts and seeing
    their runtime effects in practice. Given the wide range of security settings,
    we won’t be able to discuss all of them. You will find additional use cases and
    configuration options in the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供定义安全上下文并在实践中查看其运行时效果的概述。考虑到安全设置的广泛范围，我们无法讨论所有设置。您可以在 [Kubernetes 文档](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
    中找到更多用例和配置选项。
- en: Working with Security Contexts
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用安全上下文
- en: The security context is not a Kubernetes primitive. It is modeled as a set of
    attributes under the directive `securityContext` within the Pod specification.
    Security settings defined on the Pod level apply to all containers running in
    the Pod. When applied to a single container, it will have no effects on other
    containers running in the same Pod.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 安全上下文不是 Kubernetes 的基本结构。它被建模为 Pod 规范中 `securityContext` 指令下的一组属性。在 Pod 级别定义的安全设置适用于运行在
    Pod 中的所有容器。当应用于单个容器时，它对其他在同一 Pod 中运行的容器没有影响。
- en: You can apply security settings to all containers of a Pod with the attribute
    `spec.securityContext`.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 `spec.securityContext` 属性将安全设置应用于 Pod 的所有容器。
- en: For individual containers, you can apply security settings with the attribute
    `spec.containers[].securityContext`.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于单个容器，您可以使用 `spec.containers[].securityContext` 属性应用安全设置。
- en: '[Figure 20-1](#security_context_levels) shows the use of security settings
    `runAsUser` and `fsGroup` applied on the Pod and container level. A later section
    will describe the runtime effect of those settings by example.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-1](#security_context_levels) 展示了在 Pod 和容器级别应用的 `runAsUser` 和 `fsGroup`
    安全设置的使用。稍后的部分将通过示例描述这些设置的运行时效果。'
- en: '![ckd2 2001](Images/ckd2_2001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 2001](Images/ckd2_2001.png)'
- en: Figure 20-1\. Applying security settings on the Pod and container level
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-1\. 在 Pod 和容器级别应用安全设置
- en: Some security context attributes are available on the Pod *and* the container
    level. If you define the same security context on both levels then the value assigned
    on the container level will take precedence. [Figure 20-2](#security_context_override)
    shows an override of a container-level security context value for the container
    named `nginx`. For that container, the value 2000 will apply.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些安全上下文属性可用于 Pod *和*容器级别。如果在两个级别上定义相同的安全上下文，则容器级别的值将优先。[图 20-2](#security_context_override)
    展示了对名为 `nginx` 的容器覆盖容器级安全上下文值的情况。对于该容器，将应用值 2000。
- en: '![ckd2 2002](Images/ckd2_2002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 2002](Images/ckd2_2002.png)'
- en: Figure 20-2\. Overriding a security context attribute on the container level
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-2\. 在容器级别覆盖安全上下文属性
- en: For more information on the specifics of Pod-level security attributes, see
    the [PodSecurityContext](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#podsecuritycontext-v1-core)
    API. Container-level security attributes can be found in the [SecurityContext](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#securitycontext-v1-core)
    API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Pod 级安全属性的具体信息，请参阅 [PodSecurityContext](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#podsecuritycontext-v1-core)
    API。容器级安全属性可以在 [SecurityContext](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#securitycontext-v1-core)
    API 中找到。
- en: Applying a security context to a Deployment’s Pod template
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将安全上下文应用于 Deployment 的 Pod 模板
- en: The definition of a Deployment applies security context attributes in the same
    way as a vanilla Pod definition. You’d use the same Pod- and container-level attributes
    in the Pod template section of the Deployment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Deployment 的定义以与普通 Pod 定义相同的方式应用安全上下文属性。您会在 Deployment 的 Pod 模板部分使用相同的 Pod 和容器级别属性。
- en: Defining security-related parameters with the security context is always limited
    to a container. The Kubernetes ecosystem offers other ways to improve or govern
    security for applications, some of which directly tie in with the security context
    concept. For example, you can use the [Pod Security Admission](https://kubernetes.io/docs/concepts/security/pod-security-admission/)
    to enforce desired security settings for all Pods within a namespace.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用安全上下文定义与容器相关的安全参数始终限于容器。Kubernetes 生态系统提供其他改进或管理应用程序安全性的方式，其中一些直接与安全上下文概念相关。例如，您可以使用
    [Pod 安全准入](https://kubernetes.io/docs/concepts/security/pod-security-admission/)
    来强制执行命名空间内所有 Pod 的所需安全设置。
- en: Defining a Security Context on the Pod Level
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Pod 级别定义安全上下文
- en: Container images can define security-relevant instructions to reduce the attack
    vector for the running container. By default, containers run with root privileges,
    which provide supreme access to all processes and the container’s filesystem.
    As a best practice, you should craft the corresponding `Dockerfile` in a such
    a way that the container will be run with a user ID other than 0 with the help
    of the `USER` instruction. There are many other ways to secure a container on
    the container level, but we won’t go into any more detail here. Refer to [*Container
    Security*](https://learning.oreilly.com/library/view/container-security/9781492056690/)
    by Liz Rice (O’Reilly) for more information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 容器镜像可以定义安全相关的指令，以减少运行容器的攻击向量。默认情况下，容器以 root 特权运行，这为所有进程和容器文件系统提供了最高权限访问。作为最佳实践，应以某种方式编写相应的
    `Dockerfile`，使容器将以用户 ID 0 以外的用户 ID 运行，通过 `USER` 指令的帮助。有许多其他方法可以在容器级别上保护容器，但我们在此不再详述。有关更多信息，请参考
    [*Container Security*](https://learning.oreilly.com/library/view/container-security/9781492056690/)（由
    Liz Rice 撰写，O’Reilly 出版）。
- en: To make the functionality of a security-context more transparent, let’s look
    at a use case. Some images, like the one for the open source reverse-proxy server
    [NGINX](https://hub.docker.com/_/nginx), must be run with the root user. Say you
    wanted to enforce that containers cannot be run as a root user as a sensible security
    strategy. The YAML manifest shown in [Example 20-1](#security_context_nginx_non_root)
    defines the security configuration on the Pod level as a direct child of the `spec`
    attribute. If you were to run other containers inside the Pod, then the `runAsNonRoot`
    setting apply to them as well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使安全上下文的功能更加透明，让我们看一个使用案例。某些镜像（例如用于开源反向代理服务器 [NGINX](https://hub.docker.com/_/nginx)
    的镜像）必须以 root 用户运行。假设您希望作为合理的安全策略强制要求容器不能以 root 用户运行。在 [例子 20-1](#security_context_nginx_non_root)
    中显示的 YAML 清单将安全配置定义为 `spec` 属性的直接子级。如果要在 Pod 内运行其他容器，则 `runAsNonRoot` 设置也会适用于它们。
- en: Example 20-1\. Setting a security context on the container level for the NGINX
    image
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 20-1\. 为 NGINX 镜像在容器级别设置安全上下文
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_security_contexts_CO1-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_security_contexts_CO1-1)'
- en: Enforces the use of a non-root user to run the container.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 强制使用非 root 用户来运行容器。
- en: 'Creating the Pod from this manifest will work as expected:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Pod 的清单将按预期工作：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Unfortunately, the image is not compatible. The container fails during the
    startup process with the status `CreateContainerConfigError`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，该镜像不兼容。在启动过程中，容器失败并显示状态为 `CreateContainerConfigError`：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will find the root cause for this issue in the event logs:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您会在事件日志中找到此问题的根本原因：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are alternative NGINX images available that are not required to run with
    the root user. One example is [bitnami/nginx](https://hub.docker.com/r/bitnami/nginx).
    Upon a closer look at the `Dockerfile` that produced the image, you will see that
    the container runs with the user ID 1001\. [Example 20-2](#security_context_bitnami_nginx_non_root)
    shows the use of the Bitnami image.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有可用的替代 NGINX 镜像，不需要以 root 用户运行。一个例子是 [bitnami/nginx](https://hub.docker.com/r/bitnami/nginx)。在生成镜像的
    `Dockerfile` 中仔细查看后，您会发现容器以用户 ID 1001 运行。[例子 20-2](#security_context_bitnami_nginx_non_root)
    展示了使用 Bitnami 镜像的情况。
- en: Example 20-2\. Setting a security context on the container level for the Bitnami
    NGIX image
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 20-2\. 为 Bitnami NGIX 镜像在容器级别设置安全上下文
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Starting the container with the `runAsNonRoot` directive will work just fine:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `runAsNonRoot` 指令启动容器将正常工作：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The container will indicate the “Running” status:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 容器将显示“运行”状态：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The container could be executed with the user ID set by the container image
    that you easily surface by running the following command inside the container:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以以容器镜像设置的用户 ID 执行，你可以通过容器内运行以下命令轻松查看：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The output of the command renders the user ID 1001, a non-root user ID.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出呈现了用户 ID 1001，即非 root 用户 ID。
- en: Defining a Security Context on the Container Level
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在容器级别定义安全上下文
- en: You can impose many other security restrictions on a container running in Kubernetes.
    For example, you may want to set the access control for files and directories.
    Say that, whenever a file is created on the filesystem, the owner of the file
    should be the arbitrary group ID 3500\. The YAML manifest shown in [Example 20-3](#security_context_fs_group)
    assigns the security context settings on the container level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，你可以对运行的容器施加许多其他安全限制。例如，你可能希望设置文件和目录的访问控制。假设在文件系统上创建文件时，文件的所有者应该是任意组
    ID 3500。示例 [20-3](#security_context_fs_group) 中的 YAML 清单在容器级别分配了安全上下文设置。
- en: Example 20-3\. Setting a security context on the container level
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-3\. 在容器级别设置安全上下文
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the Pod object from the manifest file and inspect the status. The Pod
    should transition into the “Running” status:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从清单文件创建 Pod 对象并检查状态。Pod 应该转换为“运行”状态：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can easily verify the effect of setting the filesystem group ID. Open an
    interactive shell to the container, navigate to the mounted volume, and create
    a new file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松验证设置文件系统组 ID 的效果。打开容器的交互式 shell，进入挂载的卷，并创建一个新文件：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Inspecting the ownership of the file will show the group ID 3500 automatically
    assigned to it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 检查文件所有权将显示自动分配的组 ID 3500。
- en: Defining a Security Context on the Pod and Container Level
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Pod 和容器级别定义安全上下文
- en: Finally, let’s demonstrate the override behavior on the container level if you
    already defined the same attribute on the Pod level. [Example 20-4](#security_context_non_root_user_override)
    shows the definition of the `runAsNonRoot` on both levels.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们演示在容器级别覆盖行为，如果已在 Pod 级别定义相同的属性。示例 [20-4](#security_context_non_root_user_override)
    展示了在两个级别上都定义 `runAsNonRoot` 的定义。
- en: Example 20-4\. Setting a security context on the Pod and container level
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-4\. 在 Pod 和容器级别设置安全上下文
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_security_contexts_CO2-1)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_security_contexts_CO2-1)'
- en: Assign the default value `true` to all containers of the Pod.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认值 `true` 分配给 Pod 的所有容器。
- en: '[![2](Images/2.png)](#co_security_contexts_CO2-2)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_security_contexts_CO2-2)'
- en: The value `false` will take precedence even though `true` has been assigned
    on the Pod level.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 Pod 级别分配了 `true`，值为 `false` 仍然优先。
- en: 'Create the Pod object from the manifest file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从清单文件创建 Pod 对象：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open an interactive shell to the container and execute the command for rendering
    the user ID that runs the container:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打开容器的交互式 shell 并执行命令来查看运行容器的用户 ID：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The container `root` returns the value 0, which is the user ID for the root
    user. The container `non-root` returns the user ID 1001, the ID set by the container
    image itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 容器 `root` 返回值 0，即 root 用户的用户 ID。容器 `non-root` 返回用户 ID 1001，这是容器镜像本身设置的 ID。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: It’s important to enforce security best practices for Pods. This chapter covered
    the security context concept. With the help of a security context, you can control
    container permissions to access objects such as files, run a container in privileged
    and unprivileged mode, specify Linux capabilities, and much more.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Pod 实施安全最佳实践非常重要。本章介绍了安全上下文概念。借助安全上下文，你可以控制容器访问对象（如文件）、在特权和非特权模式下运行容器、指定 Linux
    权限等。
- en: The security context can be declared on a Pod level and container level. The
    Pod level applies the provided security settings to all containers in the Pod.
    The container level applies only to individual containers. The container-level
    security settings override the Pod-level security settings if the same attribute
    value is specified on both levels.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 Pod 和容器级别声明安全上下文。Pod 级别将提供的安全设置应用于 Pod 中的所有容器。容器级别仅适用于各个容器。如果在两个级别上都指定了相同属性值，则容器级别的安全设置将覆盖
    Pod 级别的安全设置。
- en: Exam Essentials
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Experiment with options available to security contexts
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试安全上下文可用的选项
- en: The Kubernetes user documentation and API documentation is a good starting point
    for exploring security context options. You will find that there’s an overlap
    in the options available via the PodSecurityContext and a SecurityContext APIs.
    While working through the different use cases solved by a security context option,
    verify their outcome by running an operation that should either be permitted or
    disallowed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes用户文档和API文档是探索安全上下文选项的良好起点。您会发现通过PodSecurityContext和SecurityContext
    API可用的选项存在重叠。在解决由安全上下文选项解决的不同用例时，请通过运行应允许或不允许的操作来验证其结果。
- en: Understand the implications of defining a security context on the Pod and container
    level
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 理解在Pod和容器级别定义安全上下文的影响。
- en: You can define a security context on the Pod level with `spec.securityContext`,
    and on the container level with `spec.containers[].securityContext`. If defined
    on the Pod level, settings can be overridden by specifying them with a different
    value on the container level. The exam may confront you with existing Pods that
    set a security context on both levels. Understand which value will take effect.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Pod级别使用`spec.securityContext`定义安全上下文，在容器级别使用`spec.containers[].securityContext`定义。如果在Pod级别定义，设置可以通过在容器级别指定不同值来覆盖。考试可能会遇到在两个级别上都设置安全上下文的现有Pods。理解哪个值将生效。
- en: Sample Exercises
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_016.xhtml#appendix_a_security_contexts).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可以在[附录A](app01_split_016.xhtml#appendix_a_security_contexts)中找到。
- en: Define a Pod named `busybox-security-context` that uses the image `busybox:1.36.1`
    for a single container running the command `sh -c sleep 1h`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`busybox-security-context`的Pod，使用镜像`busybox:1.36.1`，其中单个容器运行命令`sh -c sleep
    1h`。
- en: Add an ephemeral Volume of type `emptyDir`. Mount the Volume to the container
    at */data/test*.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加一个类型为`emptyDir`的临时卷。将该卷挂载到容器的*/data/test*目录下。
- en: Define a security context that runs the container with user ID 1000, with group
    ID 3000, and the filesystem group ID 2000\. Ensure that the container should not
    allow privilege escalation.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义一个安全上下文，以1000用户ID、3000组ID运行容器，并且文件系统组ID为2000。确保容器不允许特权升级。
- en: Create the Pod object and ensure that it transitions into the “Running” status.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建Pod对象，并确保其转换为“运行”状态。
- en: Open a shell to the running container and create a new file named *logs.txt*
    in the directory */data/test*. What’s the file’s user ID and group ID?
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开运行中容器的shell，并在目录*/data/test*中创建一个名为*logs.txt*的新文件。文件的用户ID和组ID是多少？
- en: Create a Deployment named `nginx` in the namespace `h20` with the 3 replicas.
    The Pod template should use the the image `nginx:1.25.3-alpine`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命名空间`h20`中创建一个名为`nginx`的部署，包括3个副本。Pod模板应使用镜像`nginx:1.25.3-alpine`。
- en: Using the security context, assign the `drop` Linux capability for that Pod
    template. The attribute for the `drop` capabilities should use the value `all`.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用安全上下文，为该Pod模板分配`drop` Linux能力。`drop`能力的属性应使用值`all`。
- en: Create the Deployment object and inspect its replicas. Does NGINX work as expected?
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建部署对象并检查其副本。NGINX是否按预期工作？
