["```\n$ export CASE1=~/book/code/workflows/mystery-1\n```", "```\n$ mkdir ~/sandbox-9\n```", "```\n$ cat ~/sandbox-9/haplotypecaller-gvcf-gatk4.dot\n$ java -jar $BIN/womtool-48.jar graph $CASE1/haplotypecaller-gvcf-gatk4.wdl \\\n    > ~/sandbox-9/haplotypecaller-gvcf-gatk4.dot\n```", "```\ndigraph HaplotypeCallerGvcf_GATK4 {\n  #rankdir=LR;\n  compound=true;\n  # Links\n  CALL_HaplotypeCaller -> CALL_MergeGVCFs\n  SCATTER_1_VARIABLE_interval_file -> CALL_HaplotypeCaller\n  CALL_CramToBamTask -> CALL_HaplotypeCaller\n  # Nodes\n  subgraph cluster_0 {\n    style=\"filled,dashed\";\n    fillcolor=white;\n    CALL_CramToBamTask [label=\"call CramToBamTask\"]\n    CONDITIONAL_0_EXPRESSION [shape=\"hexagon\" label=\"if (is_cram)\" style=\"dashed\" ]\n  }\n  CALL_MergeGVCFs [label=\"call MergeGVCFs\"]\n  subgraph cluster_1 {\n    style=\"filled,solid\";\n    fillcolor=white;\n    CALL_HaplotypeCaller [label=\"call HaplotypeCaller\"]\n    SCATTER_1_VARIABLE_interval_file [shape=\"hexagon\" label=\"scatter over File as interval_file\"]\n  }\n}\n```", "```\n    CramToBamTask\n    HaplotypeCaller\n    MergeGVCFs\n    ```", "```\n    call CramToBamTask {          line 68\n    call HaplotypeCaller {        line 84 \n    call MergeGVCFs {             line 100\n    ```", "```\n        if ( is cram ) {\n          call CramToBamTask {\n            input:\n              input_cram = input_bam,\n              ...\n            }\n        }\n\n```", "```\n          scatter (interval_file in\n          scattered_calling_intercals\n          ) {\n            ...\n            call HaplotypeCaller {}\n              input:\n                input_am = \n          select_first([CramToBamTask.output_bam,\n          input_bam]),\n                ...\n              }\n          }\n\n```", "```\n          call MergeGVCFs {\n            input:\n              input_vcfs = \n          HaplotypeCalle.output_vcf,\n              ...\n          }\n\n```", "```\nif ( is_cram ) {\n    call CramToBamTask {\n          input:\n            input_cram = input_bam,\n            ...\n    }\n  }\n```", "```\n#is the input a cram file?\nBoolean is_cram = sub(basename(input_bam), \".*\\\\.\", \"\") == \"cram\"\n```", "```\nBoolean is_cram      \n```", "```\nsub(basename(input_bam), \".*\\\\.\", \"\") == \"cram\"\n```", "```\nsub(basename(input_bam), \".*\\\\.\", \"\")\n```", "```\nFile input_bam = \"gs://my-bucket/sample.bam\"\n```", "```\nsub(\"string to modify\", \"substring or pattern we want to replace\", \"replacement\")\n```", "```\n    basename(input_bam)     \"sample.bam\"\n    ```", "```\n    \".*\\\\.\"            \"sample.\"+\"bam\"\n    ```", "```\n    \"\"                \"\"+\"bam\"\n    ```", "```\n    \"bam\"\n    ```", "```\nString sample_basename = if is_cram then basename(input_bam, \".cram\") else\nbasename(input_bam, \".bam\")\n```", "```\nif is_cram then basename(input_bam, \".cram\") else basename(input_bam, \".bam\")\n```", "```\nscatter (...) {\n  ...\n  call HaplotypeCaller {\n      input:\n        input_bam = select_first([CramToBamTask.output_bam, input_bam]),\n        ...\n   }\n}\n```", "```\nString? gatk_docker_override\nString gatk_docker = select_first([gatk_docker_override, \n                                  \"us.gcr.io/broad-gatk/gatk:4.1.0.0\"])\n\n```", "```\n$ export CASE2=~/book/code/workflows/mystery-2\n```", "```\n$ java -jar $BIN/womtool-48.jar graph $CASE2/WholeGenomeGermlineSingleSample.wdl  \\\n    > ~/sandbox-9/WholeGenomeGermlineSingleSample.dot\n```", "```\n$ cat ~/sandbox-9/WholeGenomeGermlineSingleSample.dot\ndigraph WholeGenomeGermlineSingleSample {\n #rankdir=LR;\n compound=true;\n # Links\n CALL_UnmappedBamToAlignedBam -> CALL_BamToCram\n CALL_UnmappedBamToAlignedBam -> CALL_CollectRawWgsMetrics\n CALL_UnmappedBamToAlignedBam -> CALL_CollectWgsMetrics\n CALL_UnmappedBamToAlignedBam -> CALL_AggregatedBamQC\n CALL_UnmappedBamToAlignedBam -> CALL_BamToGvcf\n CALL_AggregatedBamQC -> CALL_BamToCram\n # Nodes\n CALL_AggregatedBamQC [label=\"call AggregatedBamQC\";shape=\"oval\";peripheries=2]\n CALL_BamToGvcf [label=\"call BamToGvcf\";shape=\"oval\";peripheries=2]\n CALL_UnmappedBamToAlignedBam [label=\"call\nUnmappedBamToAlignedBam\";shape=\"oval\";peripheries=2]\n CALL_BamToCram [label=\"call BamToCram\";shape=\"oval\";peripheries=2]\n CALL_CollectRawWgsMetrics [label=\"call CollectRawWgsMetrics\"]\n CALL_CollectWgsMetrics [label=\"call CollectWgsMetrics\"]\n}\n```", "```\n        call ToBam.UnmappedGamToAlignedBam {\n          input:\n            sample_and_unmapped_bams =\n        sample_and_unmapped_bams,\n            ...\n        }\n\n```", "```\n          call AggregatedQC.AggregatedBamQC {\n            input:\n              base_recalibrated_bam = \n          UnmappedBamToAlignedBam.output_bam,\n              ...\n          }\n\n```", "```\n          call ToCram.BamToCram as BamToCram {\n            input:\n              input_bam = \n          UnmappedBamToAlignedBam.output_bam,\n              ...\n          }\n\n```", "```\n          #QC the sample WGS metrics (stringent thresholds)\n          call QC.CollectWgsMetrics as \n          CollectWgsMetrics{\n            input:\n              input_bam =\n          UnmappedBamToAlignedBam.output_bam,\n          ...\n        }\n\n```", "```\n          #QC the sample WGS metrics (common thresholds)\n          call QC.CollectRawWgsMetrics as \n          CollectWgsMetrics{\n            input:\n              input_bam =\n          UnmappedBamToAlignedBam.output_bam,\n          ...\n        }\n\n```", "```\n          call ToGvcf.VariantCalling as BamToGvcf {\n            input:\n              ...\n              input_bam = \n          UnmappedBamToAlignedBam.output_bam,\n              ...\n          }\n\n```", "```\ncall ToBam.UnmappedBamToAlignedBam\n```", "```\nimport \"tasks/UnmappedBamToAlignedBam.wdl\" as ToBam\n```", "```\ncall ToBam.UnmappedBamToAlignedBam\n```", "```\n# WORKFLOW DEFINITION\nworkflow UnmappedBamToAlignedBam {\n```", "```\n$ java -jar $BIN/womtool-48.jar graph $CASE2/tasks/VariantCalling.wdl \\\n    > ~/sandbox-9/VariantCalling.dot\n```", "```\ncall Utils.ScatterIntervalList as ScatterIntervalList \n```", "```\nimport \"tasks/Utilities.wdl\" as Utils\n```", "```\nversion 1.0\n\n## Copyright Broad Institute, 2018\n##\n## This WDL defines utility tasks used for processing of sequencing data.\n##\n...\n\n# Generate sets of intervals for scatter-gathering over chromosomes\ntask CreateSequenceGroupingTSV {\n  input {\n    File ref_dict\n...\n```", "```\ntask ScatterIntervalList {\n  input {\n    File interval_list\n    Int scatter_count\n    Int break_bands_at_multiples_of\n  }\n\n  command <<<\n...\n```", "```\nimport \"tasks/VariantCalling.wdl\" as ToGvcf\n```", "```\ncall ToGvcf.VariantCalling as BamToGvcf {\n    input:\n      ...\n      input_bam = UnmappedBamToAlignedBam.output_bam,\n```", "```\ncall Utils.ScatterIntervalList as ScatterIntervalList \n```"]