- en: 'Chapter 3\. GitOps: Git as the Source of Truth'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll focus on GitOps, a critical part of Azure Arc enabled
    Kubernetes. GitOps may be a new concept, so we’ll take time to define and unpack
    what it is, how it works, and how you use it with Azure Arc enabled Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: What Is GitOps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitOps is a term coined by Weaveworks in an August 2017 [blog post](https://oreil.ly/eYIzF).
    It’s an operating model pattern for cloud-native applications storing application
    and declarative infrastructure code in Git as the source of truth. It’s used for
    automated continuous delivery. Weaveworks used the GitOps operating model pattern
    with their Kubernetes environments.
  prefs: []
  type: TYPE_NORMAL
- en: Within Git, there is code that describes the state of your system, including
    apps, config, dashboards, monitoring, etc. Within GitOps, there is also software
    (an operator) that ensures that the state of your cloud-native live environments
    matches the desired state described in Git. At the time of this writing, the majority
    of operators, such as Flux and ArgoCD, are designed for use with Kubernetes; GitOps
    is not limited to Kubernetes, however. For example, there is a [Terraform](https://oreil.ly/CzEP9)
    GitOps framework called Kubestack. The Git repository you plan to use with a Flux
    or ArgoCD operator can contain Kubernetes manifests in YAML format. These manifests
    should describe valid Kubernetes objects, such as namespaces, ConfigMaps, Secrets,
    Deployments, Pods, Services, Ingress, DaemonSets, and so on. The Git repository
    can also contain Helm Charts for applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The principles of GitOps include:'
  prefs: []
  type: TYPE_NORMAL
- en: Declarative configuration
  prefs: []
  type: TYPE_NORMAL
- en: System state is described declaratively.
  prefs: []
  type: TYPE_NORMAL
- en: Version controlled, immutable storage
  prefs: []
  type: TYPE_NORMAL
- en: Git is the source of truth; the desired system state is versioned in Git.
  prefs: []
  type: TYPE_NORMAL
- en: Automated delivery
  prefs: []
  type: TYPE_NORMAL
- en: Git is the single place for operations (`create`, `change`, `delete`) performed
    by autonomous agents.
  prefs: []
  type: TYPE_NORMAL
- en: Autonomous agents
  prefs: []
  type: TYPE_NORMAL
- en: Software known as operators enforce the desired state and alert on drift.
  prefs: []
  type: TYPE_NORMAL
- en: Closed loop
  prefs: []
  type: TYPE_NORMAL
- en: Delivery of approved system state changes is automated.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a deeper dive into GitOps, I recommend starting with the [“GitOps: Operations
    by Pull Request”](https://oreil.ly/NR62h) blog post.'
  prefs: []
  type: TYPE_NORMAL
- en: How Azure Arc Utilizes GitOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Arc enabled Kubernetes utilizes GitOps to cover two things: first, configuration
    of Kubernetes, and second, deployment of applications to Kubernetes. Configuration
    can include objects such as namespaces, ConfigMaps, Secrets, Ingress Controllers,
    Ingress, and more. Applications can be things such as Deployments, Pods, Services,
    and Helm Charts.'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Arc enabled Kubernetes leverages Flux, an open source GitOps operator.
    Flux was built by Weaveworks and is part of the CNCF Sandbox project.
  prefs: []
  type: TYPE_NORMAL
- en: GitOps in Azure Arc enabled Kubernetes is a connection between a Kubernetes
    cluster and a Git repository through a Flux operator running on the Kubernetes
    cluster as a Pod. This Flux operator is used to sync Kubernetes cluster configuration
    and configuration with the desired state in the Git repository with the goal of
    matching the two through `create`, `change`, and `delete` operations.
  prefs: []
  type: TYPE_NORMAL
- en: This sync is accomplished with the Flux operator via a pull-based approach where
    Flux will continuously poll the Git repository for anything new and enact any
    creation or updates to the Kubernetes cluster. The Flux operator also has the
    ability to continuously poll a container registry or Helm repository for additions
    or changes needed in the Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Azure Arc enabled Kubernetes cluster and Git repository connection lives
    in ARM as an extension resource named *Microsoft.KubernetesConfiguration/sourceControlConfigurations*.
    This is stored in an Azure Cosmos DB database encrypted at rest. We can either
    set up this configuration via the Azure portal or through Azure CLI. The `sourceControlConfiguration`
    properties consist of:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operator instance name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operator namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operator scope (namespace/cluster)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operator type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operator params
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm (enabled/disabled)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each Azure Arc enabled Kubernetes cluster, you can have multiple `sourceControlConfigurations`,
    which can be scoped to namespaces. This helps in multienvironment and multitenancy
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: GitOps can also be used with Azure Arc enabled Kubernetes to manage configuration
    of large amounts of Kubernetes clusters at scale. This is accomplished by using
    Azure Policy to apply required `sourceControlConfigurations` on projected Kubernetes
    clusters as soon as they’re onboarded into Azure Arc. You may use this if you
    want to apply the same configurations across multiple Kubernetes clusters, such
    as a Service Mesh, monitoring Agents, Ingress Controllers, etc.
  prefs: []
  type: TYPE_NORMAL
