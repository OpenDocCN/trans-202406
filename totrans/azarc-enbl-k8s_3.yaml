- en: 'Chapter 3\. GitOps: Git as the Source of Truth'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 GitOps：Git 作为事实的来源
- en: In this chapter, we’ll focus on GitOps, a critical part of Azure Arc enabled
    Kubernetes. GitOps may be a new concept, so we’ll take time to define and unpack
    what it is, how it works, and how you use it with Azure Arc enabled Kubernetes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于 GitOps，这是 Azure Arc 可用 Kubernetes 的重要组成部分。GitOps 可能是一个新概念，因此我们将花时间定义和解析它是什么，它是如何工作的，以及您如何在
    Azure Arc 可用 Kubernetes 中使用它。
- en: What Is GitOps?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 GitOps？
- en: GitOps is a term coined by Weaveworks in an August 2017 [blog post](https://oreil.ly/eYIzF).
    It’s an operating model pattern for cloud-native applications storing application
    and declarative infrastructure code in Git as the source of truth. It’s used for
    automated continuous delivery. Weaveworks used the GitOps operating model pattern
    with their Kubernetes environments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是 Weaveworks 在 2017 年 8 月的一篇[博客文章](https://oreil.ly/eYIzF)中首次提出的术语。它是云原生应用程序的操作模型模式，将应用程序和声明性基础设施代码存储在
    Git 中作为事实的来源。它用于自动化持续交付。Weaveworks 在其 Kubernetes 环境中使用了 GitOps 操作模型模式。
- en: Within Git, there is code that describes the state of your system, including
    apps, config, dashboards, monitoring, etc. Within GitOps, there is also software
    (an operator) that ensures that the state of your cloud-native live environments
    matches the desired state described in Git. At the time of this writing, the majority
    of operators, such as Flux and ArgoCD, are designed for use with Kubernetes; GitOps
    is not limited to Kubernetes, however. For example, there is a [Terraform](https://oreil.ly/CzEP9)
    GitOps framework called Kubestack. The Git repository you plan to use with a Flux
    or ArgoCD operator can contain Kubernetes manifests in YAML format. These manifests
    should describe valid Kubernetes objects, such as namespaces, ConfigMaps, Secrets,
    Deployments, Pods, Services, Ingress, DaemonSets, and so on. The Git repository
    can also contain Helm Charts for applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，存在描述系统状态的代码，包括应用程序、配置、仪表板、监控等。在 GitOps 中，还有一种软件（运算符），它确保云原生生活环境的状态与
    Git 中描述的所需状态相匹配。在撰写本文时，大多数运算符（如 Flux 和 ArgoCD）都设计用于与 Kubernetes 配合使用；但 GitOps
    并不限于 Kubernetes。例如，有一个名为 Kubestack 的[Terraform](https://oreil.ly/CzEP9) GitOps
    框架。您计划使用 Flux 或 ArgoCD 运算符的 Git 存储库可以包含 YAML 格式的 Kubernetes 清单。这些清单应描述有效的 Kubernetes
    对象，如命名空间、ConfigMaps、Secrets、Deployments、Pods、Services、Ingress、DaemonSets 等等。Git
    存储库还可以包含应用程序的 Helm Charts。
- en: 'The principles of GitOps include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 的原则包括：
- en: Declarative configuration
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性配置
- en: System state is described declaratively.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 系统状态以声明方式描述。
- en: Version controlled, immutable storage
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制的、不可变的存储
- en: Git is the source of truth; the desired system state is versioned in Git.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是事实的来源；所需的系统状态在 Git 中进行版本控制。
- en: Automated delivery
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化交付
- en: Git is the single place for operations (`create`, `change`, `delete`) performed
    by autonomous agents.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是由自主代理执行的操作（`创建`，`更改`，`删除`）的单一位置。
- en: Autonomous agents
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自主代理
- en: Software known as operators enforce the desired state and alert on drift.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 软件运算符强制执行所需状态并警示漂移。
- en: Closed loop
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 闭环
- en: Delivery of approved system state changes is automated.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化交付已批准的系统状态更改。
- en: 'For a deeper dive into GitOps, I recommend starting with the [“GitOps: Operations
    by Pull Request”](https://oreil.ly/NR62h) blog post.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解 GitOps，建议从 [“GitOps：通过拉取请求进行操作”](https://oreil.ly/NR62h) 博客文章开始。
- en: How Azure Arc Utilizes GitOps
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Arc 如何利用 GitOps
- en: 'Azure Arc enabled Kubernetes utilizes GitOps to cover two things: first, configuration
    of Kubernetes, and second, deployment of applications to Kubernetes. Configuration
    can include objects such as namespaces, ConfigMaps, Secrets, Ingress Controllers,
    Ingress, and more. Applications can be things such as Deployments, Pods, Services,
    and Helm Charts.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Arc 使用 GitOps 来覆盖两个方面：首先是 Kubernetes 的配置，其次是应用程序的部署到 Kubernetes。配置可以包括诸如命名空间、ConfigMaps、Secrets、Ingress
    Controllers、Ingress 等对象。应用程序可以是诸如部署、Pods、服务和 Helm Charts 等内容。
- en: Azure Arc enabled Kubernetes leverages Flux, an open source GitOps operator.
    Flux was built by Weaveworks and is part of the CNCF Sandbox project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Arc 利用 Flux，一个开源的 GitOps 运算符。Flux 由 Weaveworks 构建，并且是 CNCF Sandbox 项目的一部分。
- en: GitOps in Azure Arc enabled Kubernetes is a connection between a Kubernetes
    cluster and a Git repository through a Flux operator running on the Kubernetes
    cluster as a Pod. This Flux operator is used to sync Kubernetes cluster configuration
    and configuration with the desired state in the Git repository with the goal of
    matching the two through `create`, `change`, and `delete` operations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Arc 启用的 Kubernetes 中，GitOps 是通过运行在 Kubernetes 集群上的 Flux 操作员（作为 Pod）来连接
    Kubernetes 集群和 Git 仓库的一种方式。此 Flux 操作员用于同步 Kubernetes 集群配置和 Git 仓库中的期望状态配置，目标是通过
    `create`、`change` 和 `delete` 操作使两者保持一致。
- en: This sync is accomplished with the Flux operator via a pull-based approach where
    Flux will continuously poll the Git repository for anything new and enact any
    creation or updates to the Kubernetes cluster. The Flux operator also has the
    ability to continuously poll a container registry or Helm repository for additions
    or changes needed in the Kubernetes cluster.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种同步是通过 Flux 操作员的拉取方式实现的，Flux 将持续轮询 Git 仓库，查找任何新内容，并在 Kubernetes 集群中进行创建或更新。Flux
    操作员还具有持续轮询容器注册表或 Helm 仓库的能力，以获取 Kubernetes 集群中所需的添加或更改。
- en: 'The Azure Arc enabled Kubernetes cluster and Git repository connection lives
    in ARM as an extension resource named *Microsoft.KubernetesConfiguration/sourceControlConfigurations*.
    This is stored in an Azure Cosmos DB database encrypted at rest. We can either
    set up this configuration via the Azure portal or through Azure CLI. The `sourceControlConfiguration`
    properties consist of:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Arc 启用的 Kubernetes 集群和 Git 仓库连接存储在 ARM 中作为名为 *Microsoft.KubernetesConfiguration/sourceControlConfigurations*
    的扩展资源。此内容存储在 Azure Cosmos DB 数据库中，静态加密。我们可以通过 Azure 门户或 Azure CLI 配置此设置。`sourceControlConfiguration`
    属性包括：
- en: Configuration name
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置名称
- en: Operator instance name
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作员实例名称
- en: Operator namespace
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作员命名空间
- en: Repository URL
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库 URL
- en: Operator scope (namespace/cluster)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作员范围（命名空间/集群）
- en: Operator type
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作员类型
- en: Operator params
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作员参数
- en: Helm (enabled/disabled)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm（启用/禁用）
- en: For each Azure Arc enabled Kubernetes cluster, you can have multiple `sourceControlConfigurations`,
    which can be scoped to namespaces. This helps in multienvironment and multitenancy
    scenarios.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个 Azure Arc 启用的 Kubernetes 集群，您可以拥有多个 `sourceControlConfigurations`，这些配置可以针对命名空间进行范围设置。这有助于处理多环境和多租户场景。
- en: GitOps can also be used with Azure Arc enabled Kubernetes to manage configuration
    of large amounts of Kubernetes clusters at scale. This is accomplished by using
    Azure Policy to apply required `sourceControlConfigurations` on projected Kubernetes
    clusters as soon as they’re onboarded into Azure Arc. You may use this if you
    want to apply the same configurations across multiple Kubernetes clusters, such
    as a Service Mesh, monitoring Agents, Ingress Controllers, etc.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Arc 启用的 Kubernetes 还可以使用 GitOps 管理大量 Kubernetes 集群的配置。通过使用 Azure 策略，在
    Kubernetes 集群加入 Azure Arc 后立即应用所需的 `sourceControlConfigurations` 来实现这一目标。如果您希望跨多个
    Kubernetes 集群应用相同的配置（如服务网格、监控代理、入口控制器等），则可以使用此功能。
