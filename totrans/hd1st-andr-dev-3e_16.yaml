- en: 'Appendix A. Leftovers: *The Top Ten Things (we didn’t cover)*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0861-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Even after all that, there’s still a little more.**'
  prefs: []
  type: TYPE_NORMAL
- en: There are just a few more things we think you need to know. We wouldn’t feel
    right about ignoring them, and we really wanted to give you a book you’d be able
    to lift without extensive training at the local gym. Before you put down the book,
    **read through these tidbits**.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Sharing data with other apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to share simple data with another app, you can do so with an `**Intent**`.
    You can think of an `Intent` as an “intent to do something.” It’s a type of message
    that lets you send data to another object—such as an activity—at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing data with Android’s intent resolver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to pass text to another activity, you can do so using code like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code first creates an `Intent` named `sendIntent`. It uses the `type` property
    to specify the type of data that’s being sent (in this case plain text), and uses
    `putExtra()` to attach the data (here, it’s some text).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0862-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `action` property tells Android which types of activity can receive the
    intent. Here, it’s set using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: which means that only activities that can send messages can receive the intent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The intent is sent using the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Behind the scenes, Android looks for activities across all the device’s apps
    that can accept intents with the specified action and type. If it finds multiple
    such activities, it displays an **Intent Resolver** screen, which lets the user
    choose which app they want to share the data with.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0862-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Android then starts the activity, passing it the data.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing data with the Android Sharesheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most cases, you’ll want to share data using the Android Sharesheet instead.
    This lets you specify who you want to share data with and how, and the code looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0863-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the code includes an extra call to the `Intent`’s `createChooser()`
    method. When this runs, it displays the Android Sharesheet like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0863-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find out more about sharing data with other apps—and how to make your
    app receive data—here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/training/sharing](https://developer.android.com/training/sharing)*'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. WorkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times when you’ll want your app to process data in the background.
    This might be because it needs to access storage, for example, or it needs to
    download a large file.
  prefs: []
  type: TYPE_NORMAL
- en: As you learned in [Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view),
    you can use Kotlin coroutines for tasks that need to be executed immediately.
    But what if you want to defer the task, or have a long-running task that must
    continue to run, even if the device restarts?
  prefs: []
  type: TYPE_NORMAL
- en: Use WorkManager to schedule deferrable tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to schedule a task to run in the background, you can use Android’s
    **WorkManager** API. It’s part of Android Jetpack, and it’s designed for potentially
    long-running tasks that are guaranteed to run even if the user quits the app or
    restarts the device.
  prefs: []
  type: TYPE_NORMAL
- en: You can even use WorkManager to run tasks when certain constraints are met,
    such as when WiFi is available, or chain complex tasks together.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0864-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find out more about WorkManager—and how to use it—here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/topic/libraries/architecture/workmanager](https://developer.android.com/topic/libraries/architecture/workmanager)*'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Dialogs and notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 9](ch09.xhtml#material_viewscolon_a_material_world), you learned
    how to show the user a simple pop-up message using a toast and a snackbar. These
    are useful for low priority messages that appear in the app, and don’t require
    any user action.
  prefs: []
  type: TYPE_NORMAL
- en: There are times, however, when you need to display a message that prompts the
    user to make a decision, or that’s displayed outside the app’s UI. In these situations,
    you can use **dialogs** and **notifications**.
  prefs: []
  type: TYPE_NORMAL
- en: Use dialogs to prompt the user for a decision
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A dialog is a small window that appears in the middle of the screen. They’re
    normally used for situations where the user must make a decision before the app
    can proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0865-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find out how to create and use dialogs here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/guide/topics/ui/dialogs](https://developer.android.com/guide/topics/ui/dialogs)*'
  prefs: []
  type: TYPE_NORMAL
- en: Notifications appear outside the app’s UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to remind the user to do something, or tell them when they’ve received
    a message, you can use a notification. Notifications appear on the device status
    bar and the notification drawer, and may appear on the device lock screen as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0865-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find out how to create and use notifications here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/guide/topics/ui/notifiers/notifications](https://developer.android.com/guide/topics/ui/notifiers/notifications)*'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Automated testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you create an app that’s intended to be used by thousands or even millions
    of people, you will quickly lose users if it’s flaky or keeps crashing. You can
    prevent many of these problems, however, using automated testing.
  prefs: []
  type: TYPE_NORMAL
- en: Two popular testing frameworks are JUnit and Espresso. When you create a new
    Android project, Android Studio usually includes dependencies for these in the
    app’s *build.gradle* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Automated testing usually falls into two categories: **unit tests** and **instrumented
    tests**.'
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unit tests run on the development machine, and they check the individual pieces—or
    units—of your code. They live in the *app/src/test* folder of your project, and
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Instrumented tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instrumented—or on-device—tests run inside an emulator or physical device, and
    check the fully assembled app. They live in the *app/src/androidTest* folder of
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll show you an example of an instrumented test on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: An instrumented test example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s an instrumented test that checks whether a composable displays the correct
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Go here to find out more about using automated testing with Android apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/training/testing](https://developer.android.com/training/testing)*'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Supporting different screen sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android apps come in all sorts of shapes and sizes, and you want your apps to
    look good on all of them. There are several techniques you can use, including
    constraint layouts (which you learned about in [Chapter 4](ch04.xhtml#constraint_layoutscolon_draw_up_a_bluepr)),
    providing alternate layouts, and sliding pane layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Provide alternate layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android apps can have multiple versions of the same layout file that cater to
    different screen specs. This is done by creating multiple layout folders, each
    one with an appropriate name, and adding a separate layout file to each one.
  prefs: []
  type: TYPE_NORMAL
- en: To have one layout for devices with a width of 600dp or above (such as 7” tablets),
    and another for smaller devices, add an extra folder to the *app/src/main/res*
    folder named *layout-sw600dp*. Then put a layout for wider devices to use in the
    *layout-sw600dp* folder, and one for smaller devices in the *layout* folder.
  prefs: []
  type: TYPE_NORMAL
- en: When the app runs on a phone, it will use the layout in the *layout* folder
    as normal, and when it runs on a wider device, it will use the one in the *layout-sw600dp*
    folder instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0868-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find out more about using width qualifiers here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/training/multiscreen/screensizes#alternative-layouts](https://developer.android.com/training/multiscreen/screensizes#alternative-layouts)*'
  prefs: []
  type: TYPE_NORMAL
- en: Use a SlidingPaneLayout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some layouts include a navigable list of records, where clicking on an item
    displays its details. On small devices, you might want the details to appear in
    a separate screen, but on large devices, you might prefer to display the list
    and details side by side.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deal with this kind of situation, you can use a `SlidingPaneLayout` to define
    separate panes for the list and details. The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0869-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The layout uses the `layout-width` attributes of each pane to figure out whether
    they’ll fit side by side on the device. If the device is wide enough, the layout
    displays them next to one another, and if it’s not, it displays them on separate
    screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find out more here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/reference/androidx/slidingpanelayout/widget/SlidingPaneLayout](https://developer.android.com/reference/androidx/slidingpanelayout/widget/SlidingPaneLayout)*'
  prefs: []
  type: TYPE_NORMAL
- en: 6\. More Compose features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 18](ch18.xhtml#jetpack_composecolon_compose_yourself) and [Chapter 19](ch19.xhtml#integrating_compose_with_viewscolon_perf),
    we introduced you to building UIs with Compose. We think it has a bright future
    ahead of it, but it’s so new that at the time of writing, some of its libraries
    aren’t yet stable.
  prefs: []
  type: TYPE_NORMAL
- en: We didn’t want to leave without giving you a glimpse into the future, so here
    are some of the libraries and features we’re most excited about.
  prefs: []
  type: TYPE_NORMAL
- en: The Compose ViewModel library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 19](ch19.xhtml#integrating_compose_with_viewscolon_perf), we passed
    an existing view model to a composable so it could access the view model’s properties
    and methods. If you use the Compose view model library, this is no longer necessary;
    the composable can get the view model for itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to the app’s *build.gradle* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add code like this to the composable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0870-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Compose constraint layout library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 18](ch18.xhtml#jetpack_composecolon_compose_yourself), we showed
    you how to arrange composables in rows and columns. If you need something a little
    more flexible, however, there’s the Compose constraint layout library. As you
    might expect, this library lets you position composables using constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find out more about this library, and how to use it, here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/jetpack/compose/layouts/constraintlayout](https://developer.android.com/jetpack/compose/layouts/constraintlayout)*'
  prefs: []
  type: TYPE_NORMAL
- en: The Compose Navigation component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you already know, you navigate between screens in a `View`-based UI using
    the Navigation component. You define a separate fragment for each screen, and
    the Navigation component decides which fragment to display.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0871-01.png)'
  prefs: []
  type: TYPE_IMG
- en: When you use the Compose Navigation component, you no longer need to use fragments.
    Instead, you define a *composable* for each screen, and the Navigation component
    decides which one to display.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Compose Navigation component, add the following dependency to the
    app’s *build.gradle* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use code like this for your activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0871-02.png)![image](Images/f0872-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the app runs, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0872-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can keep up-to-date with Compose here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/jetpack/compose](https://developer.android.com/jetpack/compose)*'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Retrofit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view), you learned
    how to persist your data in a Room database held on the device. But what if your
    data is held remotely instead?
  prefs: []
  type: TYPE_NORMAL
- en: In this situation, you can use Retrofit. This is a third-party REST client for
    Android, Java, and Kotlin that lets you make network requests, interact with REST
    APIs, and download JSON or XML data.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find out more about Retrofit here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://square.github.io/retrofit/](https://square.github.io/retrofit/)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find out more about including Retrofit in your app’s architecture
    by going here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/jetpack/guide](https://developer.android.com/jetpack/guide)*'
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Android Game Development Kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re interested in developing games for Android apps, we suggest you check
    out the Android Game Development Kit (AGDK). This is a range of libraries and
    tools that let you develop, optimize, and deliver Android games.
  prefs: []
  type: TYPE_NORMAL
- en: The Android Game Development Kit includes game libraries for C/C++ game development.
    There’s a `GameActivity`, for example, which inherits from `AppCompatActivity`
    and uses a C API. There’s also a way of using the software keyboard in C, and
    handling input from game controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Note from Marketing: Make sure you mention your book Head First C.]'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the Android Game Development Kit here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/games/agdk](https://developer.android.com/games/agdk)*'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. CameraX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to use the device camera in your app, there’s a Jetpack library
    you can use called CameraX. This gives you a consistent API that works across
    most Android devices, and resolves device-compatibility issues. You can use it
    to preview, capture, and analyze images. There’s even an Extensions add-on that
    lets you access features used by the native camera app that ships with the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about CameraX here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/training/camerax](https://developer.android.com/training/camerax)*'
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Publishing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve developed your app, you’ll probably want to make it available to
    other users. You’ll likely want to do this by publishing your app through an app
    marketplace such as Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two stages to this process: preparing your app for release, and then
    releasing it.'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your app for release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can release your app, you need to configure, build, and test a release
    version of it. This includes tasks such as deciding on an icon for your app, removing
    any logging code, and modifying *AndroidManifest.xml* so that only devices you
    want to be able to run your app can download it.
  prefs: []
  type: TYPE_NORMAL
- en: Before you release your app, make sure that you test it on *at least* one tablet
    and one phone to check that it looks the way you expect and its performance is
    acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find further details of how to prepare your app for release here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[http://developer.android.com/tools/publishing/preparing.html](http://developer.android.com/tools/publishing/preparing.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Releasing your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This stage includes publishing your app, selling it, and publicizing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you publish your app we suggest you go here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/distribute/best-practices/launch](https://developer.android.com/distribute/best-practices/launch)*'
  prefs: []
  type: TYPE_NORMAL
- en: It includes checklists and tips to help you publish and manage your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'For ideas on how to best target your app to your users and build a buzz about
    it, we suggest you explore the documents here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/distribute/best-practices/engage](https://developer.android.com/distribute/best-practices/engage)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'and here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/distribute/best-practices/grow](https://developer.android.com/distribute/best-practices/grow)*'
  prefs: []
  type: TYPE_NORMAL
