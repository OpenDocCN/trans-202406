- en: Chapter 10\. Getting Involved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the components in the Operator Framework, including the Operator SDK,
    Operator Lifecycle Manager, and Operator Metering, are still in the early stages
    of their lifespans. There are a variety of ways to contribute to their development,
    ranging from something as simple as submitting a bug report to becoming an active
    developer.
  prefs: []
  type: TYPE_NORMAL
- en: One of the simplest ways of interacting with both users and developers of the
    Operator Framework is through its [Special Interest Group](https://groups.google.com/forum/#!forum/operator-framework),
    or SIG. The SIG uses a mailing list to discuss topics including upcoming release
    information, best practices, and user questions. The SIG is free to join from
    their website.
  prefs: []
  type: TYPE_NORMAL
- en: For more direct interaction, the [Kubernetes Slack team](https://kubernetes.slack.com/)
    is an active community of users and developers. The “kubernetes-operators” channel
    in particular covers topics related to this book.
  prefs: []
  type: TYPE_NORMAL
- en: The Operator Framework [GitHub organization](https://oreil.ly/8iDG1) contains
    the project repositories for each of its components. There are also a variety
    of supplemental repositories, such as the [Operator SDK Samples repository](https://oreil.ly/CYhac),
    that further help with Operator development and usage.
  prefs: []
  type: TYPE_NORMAL
- en: Feature Requests and Reporting Bugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the simplest ways, albeit an extremely valuable one, of getting involved
    with the Operator Framework is to submit bug reports. The framework project teams
    use GitHub’s built-in issue tracking to triage and fix outstanding issues. You
    can find the tracker for each specific project under the Issues tab on the GitHub
    project page. For example, the Operator SDK’s issue tracker can be found at the
    [Operator Framework GitHub repo](https://oreil.ly/l6eUM).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the project teams use the issue tracker to track feature requests.
    The New Issue button prompts submitters to select between bug reports and feature
    requests, which are then automatically tagged appropriately. Submitting feature
    requests provides a wide variety of uses cases and helps drive the project direction
    based on community needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few general principles^([1](ch10.html#idm45261327972168)) to keep
    in mind when submitting a new issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Be specific.* For bugs, provide as much information as possible about the
    running environment, including project versions and cluster details. When possible,
    include detailed reproduction steps. For feature requests, start by including
    the use case being addressed by the requested feature. This aids in the feature
    prioritization and helps the team decide if there is a better or existing way
    to fulfill the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Keep the scope limited to a single bug.* Multiple reports are easier to triage
    and track than a report of a single, multifaceted issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Try to select the applicable project.* For example, if the issue specifically
    applies to working with OLM, create the issue in that repository. For some bugs,
    it’s not always possible to determine where the problem is originating from. In
    those cases, you can choose the most applicable project repository and let the
    team triage it appropriately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Use an existing issue if one is found.* Use GitHub’s issue tracker’s search
    ability to see if a similar bug or feature request is found before creating a
    new report. Additionally, check the list of closed issues and reopen an existing
    bug if possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, if you’re comfortable working with code, contributions to the source
    code are appreciated. There are current instructions for setting up a development
    environment in the [developer guide](https://oreil.ly/Gi9mA). Be sure to review
    the latest [contributing guidelines](https://oreil.ly/syVVk) before submitting
    any pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, the repositories for the three primary Operator Framework components
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*https://github.com/operator-framework/operator-sdk*](https://github.com/operator-framework/operator-sdk)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://github.com/operator-framework/operator-lifecycle-manager*](https://github.com/operator-framework/operator-lifecycle-manager)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://github.com/operator-framework/operator-metering*](https://github.com/operator-framework/operator-metering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re not comfortable coding, you can still contribute by updating and fleshing
    out the project documentation. The “kind/documentation” label for issues identifies
    outstanding errors and enhancement requests.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[OperatorHub.io](https://operatorhub.io) is a hosting site for community-written
    Operators. The site contains Operators from a wide variety of categories, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The community provides automated testing and manual vetting for Operators featured
    on this site. They are packaged with the necessary metadata files to be installed
    and managed by OLM (see [Chapter 8](ch08.html#operator_lifecyle_manager) for more
    information).
  prefs: []
  type: TYPE_NORMAL
- en: You can submit Operators for inclusion in OperatorHub.io via pull requests to
    the [Community Operators repository](https://oreil.ly/j0rlN). Check out [this
    OperatorHub.io page](https://operatorhub.io/contribute) with the latest submission
    instructions, including packaging guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, OperatorHub.io provides a way to preview how your CSV file will
    appear once it has been accepted and is hosted on the site. This is a good way
    to ensure that you have entered the proper metadata fields. You can find out more
    on the [Operator Preview page](https://operatorhub.io/preview).
  prefs: []
  type: TYPE_NORMAL
- en: The [Awesome Operators repository](https://oreil.ly/OClO4) keeps an updated
    list of Operators that are not hosted on OperatorHub.io. While these Operators
    have not been vetted in the same way as those hosted on OperatorHub.io, they are
    all open source, with their corresponding GitHub repositories listed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an open source project, the Operator Framework thrives on community involvement.
    Every bit helps, from participating in the mailing list conversations to contributing
    code for bug fixes and new features. Contributing to OperatorHub.io also helps
    promote your Operators while growing the ecosystem of available functionality.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch10.html#idm45261327972168-marker)) See [example issues here](https://oreil.ly/sU3rW)
    and [here](https://oreil.ly/m81qp).
  prefs: []
  type: TYPE_NORMAL
