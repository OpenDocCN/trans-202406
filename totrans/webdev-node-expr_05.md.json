["```\nnpm install --save-dev jest\n```", "```\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n```", "```\nnpm test\n```", "```\nconst fortune = require('./fortune')\n\nexports.home = (req, res) => res.render('home')\n\nexports.about = (req, res) =>\n  res.render('about', { fortune: fortune.getFortune() })\n\nexports.notFound = (req, res) => res.render('404')\n\nexports.serverError = (err, req, res, next) => res.render('500')\n```", "```\n// typically at the top of the file\nconst handlers = require('./lib/handlers')\n\napp.get('/', handlers.home)\n\napp.get('/about', handlers.about)\n\n// custom 404 page\napp.use(handlers.notFound)\n\n// custom 500 page\napp.use(handlers.serverError)\n```", "```\nconst handlers = require('../handlers')\n\ntest('home page renders', () => {\n  const req = {}\n  const res = { render: jest.fn() }\n  handlers.home(req, res)\n  expect(res.render.mock.calls[0][0]).toBe('home')\n})\n```", "```\ntest('about page renders with fortune', () => {\n  const req = {}\n  const res = { render: jest.fn() }\n  handlers.about(req, res)\n  expect(res.render.mock.calls.length).toBe(1)\n  expect(res.render.mock.calls[0][0]).toBe('about')\n  expect(res.render.mock.calls[0][1])\n    .toEqual(expect.objectContaining({\n      fortune: expect.stringMatching(/\\W/),\n    }))\n})\n\ntest('404 handler renders', () => {\n  const req = {}\n  const res = { render: jest.fn() }\n  handlers.notFound(req, res)\n  expect(res.render.mock.calls.length).toBe(1)\n  expect(res.render.mock.calls[0][0]).toBe('404')\n})\n\ntest('500 handler renders', () => {\n  const err = new Error('some error')\n  const req = {}\n  const res = { render: jest.fn() }\n  const next = jest.fn()\n  handlers.serverError(err, req, res, next)\n  expect(res.render.mock.calls.length).toBe(1)\n  expect(res.render.mock.calls[0][0]).toBe('500')\n})\n```", "```\nnpm test -- --coverage\n```", "```\n<p>Questions?  Checkout out our\n<a href=\"/about\" data-test-id=\"about\">About Us</a> page!</p>\n```", "```\nif(require.main === module) {\n  app.listen(port, () => {\n    console.log( `Express started on http://localhost:${port}` +\n      '; press Ctrl-C to terminate.' )\n  })\n} else {\n  module.exports = app\n}\n```", "```\nnpm install --save-dev puppeteer\n```", "```\nnpm install --save-dev portfinder\n```", "```\nconst portfinder = require('portfinder')\nconst puppeteer = require('puppeteer')\n\nconst app = require('../meadowlark.js')\n\nlet server = null\nlet port = null\n\nbeforeEach(async () => {\n  port = await portfinder.getPortPromise()\n  server = app.listen(port)\n})\n\nafterEach(() => {\n  server.close()\n})\n\ntest('home page links to about page', async () => {\n  const browser = await puppeteer.launch()\n  const page = await browser.newPage()\n  await page.goto(`http://localhost:${port}`)\n  await Promise.all([\n    page.waitForNavigation(),\n    page.click('[data-test-id=\"about\"]'),\n  ])\n  expect(page.url()).toBe(`http://localhost:${port}/about`)\n  await browser.close()\n})\n```", "```\nnpm install --save-dev eslint\n```", "```\n./node_modules/.bin/eslint --init\n```", "```\n  \"lint\": \"eslint meadowlark.js lib\"\n```", "```\nnpm run lint\n```", "```\n   3:1   error  'test' is not defined    no-undef\n   5:25  error  'jest' is not defined    no-undef\n   7:3   error  'expect' is not defined  no-undef\n   8:3   error  'expect' is not defined  no-undef\n  11:1   error  'test' is not defined    no-undef\n  13:25  error  'jest' is not defined    no-undef\n  15:3   error  'expect' is not defined  no-undef\n```", "```\n\"jest\": true,\n```", "```\n/Users/ethan/wdne2e-companion/ch05/meadowlark.js\n  27:5  error  Unexpected console statement  no-console\n\n/Users/ethan/wdne2e-companion/ch05/lib/handlers.js\n  10:39  error  'next' is defined but never used  no-unused-vars\n```", "```\n  \"rules\": {\n    \"no-console\": \"off\",\n  },\n```", "```\nexports.serverError = (err, req, res, next) => res.render('500')\n```", "```\n// Express recognizes the error handler by way of its four\n// arguments, so we have to disable ESLint's no-unused-vars rule\n/* eslint-disable no-unused-vars */\nexports.serverError = (err, req, res, next) => res.render('500')\n/* eslint-enable no-unused-vars */\n```"]