["```\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: dev-mem-limits\nspec:\n  limits:\n  - type: Container\n    max:\n      memory: 2Gi\n```", "```\nkubectl -n dev apply -f dev-mem-limits.yaml\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted\n  annotations:\n    seccomp.security.alpha.kubernetes.io/allowedProfileNames:\n    'docker/default,runtime/default'\n    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'\n    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'\n    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'\nspec:\n# ...\n```", "```\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n  - level: Request\n    resources:\n    - group: \"\"\n      resources: [\"configmaps\"]\n```", "```\nsystem:serviceaccount:NAMESPACE:NAME\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: default ![1](Images/1.png)\n  namespace: kube-system ![2](Images/2.png)\nsecrets:\n- name: default-token-v9vsm ![3](Images/3.png)\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  annotations:\n    kubernetes.io/service-account.name: default\n  name: default-token-v9vsm\n  namespace: kube-system\ntype: kubernetes.io/service-account-token\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tL...==\n  namespace: a3ViZS1zeXN0ZW0=\n  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWk...==\n```", "```\n~ $ ls -al /var/run/secrets/kubernetes.io/serviceaccount/\ntotal 4\ndrwxrwxrwt 3 root root  140 Jun 16 11:31 .\ndrwxr-xr-x 3 root root 4096 Jun 16 11:31 ..\ndrwxr-xr-x 2 root root  100 Jun 16 11:31 ..2021_06_16_11_31_31.83035518\nlrwxrwxrwx 1 root root   31 Jun 16 11:31 ..data -> ..2021_06_16_11_31_31.83035518\nlrwxrwxrwx 1 root root   13 Jun 16 11:31 ca.crt -> ..data/ca.crt\nlrwxrwxrwx 1 root root   16 Jun 16 11:31 namespace -> ..data/namespace\nlrwxrwxrwx 1 root root   12 Jun 16 11:31 token -> ..data/token\n\n```", "```\n~ $ cat /var/run/secrets/kubernetes.io/serviceaccount/token\neyJhbGciOiJSUzI1NiIsImtpZCI6InJTT1E1VDlUX1ROZEpRMmZSWi1aVW0yNWVocEh.\n...\n```", "```\nspiffe://trust-domain/workload-identifier\n```", "```\n$ kubectl describe clusterrole edit\nName:         edit\nLabels:       kubernetes.io/bootstrapping=rbac-defaults\n              rbac.authorization.k8s.io/aggregate-to-admin=true\nAnnotations:  rbac.authorization.kubernetes.io/autoupdate: true\nPolicyRule:\n  Resources     Non-Resource URLs  Resource Names  Verbs\n  ---------     -----------------  --------------  -----\n  configmaps    []                 []              [create delete ... watch]\n  ...\n```", "```\n$ kubectl create clusterrole view-deploys \\\n  --verb=get --verb=list \\\n  --resource=deployments\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: view-deploys\nrules:\n- apiGroups:\n  - apps\n  resources: ![1](Images/1.png)\n  - deployments\n  verbs: ![2](Images/2.png)\n  - get\n  - list\n```", "```\n$ kubectl create rolebinding assign-perm-view-deploys \\\n  --role=view-deploys \\\n  --user=joey \\\n  --namespace=yolo\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: assign-perm-view-deploys\n  namespace: yolo ![1](Images/1.png)\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: view-deploys ![2](Images/2.png)\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: User\n  name: joey ![3](Images/3.png)\n```", "```\n$ awslogs get /aws/eks/example/cluster \\\n  \"kube-apiserver-audit*\" \\\n  --no-stream --no-group --watch \\\n  >> audit-log.json\n```", "```\n$ kubectl get all -A\n...\n```", "```\n$ audit2rbac --user kubernetes-admin \\   ![1](Images/1.png)\n  --filename audit-log.json \\ ![2](Images/2.png)\n  > list-all.yaml\nOpening audit source...\nLoading events....\nEvaluating API calls...\nGenerating roles...\nComplete!\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole ![1](Images/1.png)\nmetadata:\n  annotations:\n    audit2rbac.liggitt.net/version: v0.8.0\n  labels:\n    audit2rbac.liggitt.net/generated: \"true\"\n    audit2rbac.liggitt.net/user: kubernetes-admin\n  name: audit2rbac:kubernetes-admin\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - replicationcontrollers\n  - services\n  verbs:\n  - get\n  - list\n  - watch\n...\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding ![2](Images/2.png)\nmetadata:\n  annotations:\n    audit2rbac.liggitt.net/version: v0.8.0\n  labels:\n    audit2rbac.liggitt.net/generated: \"true\"\n    audit2rbac.liggitt.net/user: kubernetes-admin\n  name: audit2rbac:kubernetes-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: audit2rbac:kubernetes-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: User\n  name: kubernetes-admin\n```", "```\n$ kubectl rbac-view\nINFO[0000] Getting K8s client\nINFO[0000] serving RBAC View and http://localhost:8800\nINFO[0010] Building full matrix for json\nINFO[0010] Building Matrix for Roles\nINFO[0010] Retrieving RoleBindings\nINFO[0010] Building Matrix for ClusterRoles\n...\n```", "```\n$ kubectl get sa,roles,rolebindings,clusterroles,clusterrolebindings \\ ![1](Images/1.png)\n  --all-namespaces \\ ![2](Images/2.png)\n  -o json |\n  rback | ![3](Images/3.png)\n  dot -Tpng  > rback-output.png ![4](Images/4.png)\n```", "```\npackage prod.k8s.acme.org\n\ndeny[msg] { ![1](Images/1.png)\n  not input.request.object.metadata.labels.costcenter\n  msg := \"Every resource must have a costcenter label\"\n}\n\ndeny[msg] { ![2](Images/2.png)\n  value := input.request.object.metadata.labels.costcenter\n  not startswith(value, \"cccode-\")\n  msg := sprintf(\"Costcenter code must start with `cccode-`; found `%v`\", [value])\n}\n```", "```\n{\n    \"kind\": \"AdmissionReview\",\n    \"request\": {\n        \"kind\": {\n            \"kind\": \"Pod\",\n            \"version\": \"v1\"\n        },\n        \"object\": {\n            \"metadata\": {\n                \"name\": \"myapp\"\n            },\n            \"spec\": {\n                \"containers\": [\n                    {\n                        \"image\": \"nginx\",\n                        \"name\": \"nginx-frontend\"\n                    },\n                    {\n                        \"image\": \"mysql\",\n                        \"name\": \"mysql-backend\"\n                    }\n                ]\n            }\n        }\n    }\n}\n```", "```\n{\n    \"deny\": [\n        \"Every resource must have a costcenter label\"\n    ]\n}\n```", "```\n\"metadata\": {\n                \"name\": \"myapp\",\n                \"labels\": {\n                    \"costcenter\": \"cccode-HQ\"\n                 }\n            },\n```", "```\n$ opa eval \\\n  --input input.json \\ ![1](Images/1.png)\n  --data cc-policy.rego \\ ![2](Images/2.png)\n  --package prod.k8s.acme.org \\ ![3](Images/3.png)\n  --format pretty 'deny' ![4](Images/4.png)\n[\n  \"Every resource must have a costcenter label\"\n]\n```", "```\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: costcenterlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sCostcenterLabels\n      validation:\n        openAPIV3Schema: ![1](Images/1.png)\n          properties:\n            labels:\n              type: array\n              items: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n  package prod.k8s.acme.org\n\n  deny[msg] { ![2](Images/2.png)\n    not input.request.object.metadata.labels.costcenter ![3](Images/3.png)\n    msg := \"Every resource must have a costcenter label\"\n  }\n\n  deny[msg] { ![4](Images/4.png)\n    value := input.request.object.metadata.labels.costcenter\n    not startswith(value, \"cccode-\")\n    msg := sprintf(\"Costcenter code must start with `cccode-`; found `%v`\", [value])\n  }\n```", "```\n$ kubectl apply -f costcenter_template.yaml\n```", "```\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sCostcenterLabels\nmetadata:\n  name: ns-must-have-cc\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Namespace\"]\n```", "```\n$ kubectl apply -f req_cc.yaml\n```", "```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: costcenterlabels\nspec:\n  validationFailureAction: enforce\n  rules:\n  - name: check-for-labels\n    match: ![1](Images/1.png)\n      resources:\n        kinds:\n        - Namespace\n    validate:\n      message: \"label 'app.kubernetes.io/name' is required\"\n      pattern: ![2](Images/2.png)\n        metadata:\n          labels:\n            app.kubernetes.io/name: \"?cccode-*\"\n```"]