- en: Chapter 8\. Helm Plugins and Starters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章. Helm 插件和启动器
- en: As we’ve seen throughout this book, Helm has plenty of features and methods
    that aid in delivering applications on Kubernetes. However, it is also possible
    to customize and extend the functionality provided by Helm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书中所见，Helm 具有丰富的功能和方法，有助于在 Kubernetes 上交付应用程序。但是，还可以自定义和扩展 Helm 提供的功能。
- en: 'In this chapter we will discuss two ways to further enhance and customize your
    usage of Helm: *plugins* and *starters*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论两种进一步增强和自定义您使用 Helm 的方式：*插件*和*启动器*。
- en: Plugins allow you to add extra functionality to Helm and integrate seamlessly
    with the CLI, making them a popular choice for users with unique workflow requirements.
    There are a number of third-party plugins available online for common use cases,
    such as secrets management. In addition, plugins are incredibly easy to build
    on your own for unique, one-off tasks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 插件允许您为 Helm 添加额外功能，并与 CLI 无缝集成，因此对于具有独特工作流需求的用户而言，它们是一个受欢迎的选择。在线上有许多第三方插件可供常见用例使用，如秘密管理。此外，对于独特的一次性任务，构建自己的插件也非常容易。
- en: Starters expand the possibilities of using `helm create` to generate new Helm
    charts for different types of applications. For example, you might have a Helm
    chart built for an internal microservice that fits perfectly as an example for
    future microservices. You could convert the chart into a starter, which you can
    then use each time you begin a new project with similar requirements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器扩展了使用 `helm create` 生成新的 Helm 图表的可能性。例如，您可能已经为一个内部微服务构建了一个完全符合未来微服务需求的 Helm
    图表示例。您可以将该图表转换为一个启动器，然后在启动新项目时每次使用。
- en: By leveraging plugins and starters, we can build on top of Helm’s out-of-the-box
    functionality to simplify and automate everyday workflow tasks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用插件和启动器，我们可以构建在 Helm 的开箱即用功能之上，简化和自动化日常工作流任务。
- en: Plugins
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: Helm plugins are external tools that are accessible directly from the Helm CLI.
    They allow you to add custom subcommands to Helm without making any modifications
    to Helm’s Go source code. This is similar in design to how plugin systems are
    implemented in other tools, such as `kubectl` (the Kubernetes CLI).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 插件是可以直接从 Helm CLI 访问的外部工具。它们允许您向 Helm 添加自定义子命令，而无需对 Helm 的 Go 源代码进行任何修改。这在设计上类似于其他工具中实现插件系统的方式，比如
    `kubectl`（Kubernetes CLI）。
- en: Additionaly, downloader plugins allow you to specify a custom protocol for communicating
    with chart repositories. This can be useful if you have some custom authentication
    method, or if you need to somehow modify the method in which Helm fetches charts
    from repositories
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，下载器插件允许您指定用于与图表仓库通信的自定义协议。如果您有某种自定义身份验证方法，或者需要修改 Helm 从仓库获取图表的方法，这将非常有用。
- en: Installing Third-Party Plugins
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装第三方插件
- en: Many third-party plugins are made open source and publicly available on GitHub.
    Many of these plugins use the “helm-plugin” tag/topic to make them easy to find.
    Refer to the [documentation for Helm plugins on GitHub](https://oreil.ly/3KwNb).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多第三方插件是开源的，并且在 GitHub 上公开可用。其中许多插件使用“helm-plugin”标签/主题，使其易于查找。请参阅 [GitHub 上的
    Helm 插件文档](https://oreil.ly/3KwNb)。
- en: Once you have found a plugin to install, obtain its version control URL. This
    will be used as the means of obtaining the correct version of *plugin.yaml* and
    the rest of the plugin source code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装插件后，获取其版本控制 URL。这将用作获取 *plugin.yaml* 和插件源代码的正确版本的手段。
- en: Git, SVN, Bazaar (Bzr), and Mercurial (Hg) URLs are currently supported. For
    Git, the version control URL looks something like *`https://example.com/myorg/myrepo.git`*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 目前支持 Git、SVN、Bazaar (Bzr) 和 Mercurial (Hg) 的 URL。对于 Git，版本控制 URL 看起来像 *`https://example.com/myorg/myrepo.git`*。
- en: For example, there is a simple plugin for managing Helm starters located in
    a git repo at [*https://github.com/salesforce/helm-starter*](https://github.com/salesforce/helm-starter).
    The version control URL for this plugin is `https://github.com/salesforce/helm-starter.git`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有一个简单的插件用于管理位于 git 仓库中的 Helm 启动器，位于 [*https://github.com/salesforce/helm-starter*](https://github.com/salesforce/helm-starter)。此插件的版本控制
    URL 为 `https://github.com/salesforce/helm-starter.git`。
- en: 'To install this plugin, run `helm plugin install` passing the version control
    URL as the first argument:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此插件，请运行 `helm plugin install`，将版本控制 URL 作为第一个参数传递：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the installation succeeds, you can proceed to use the plugin:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，您可以继续使用该插件：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To list all installed plugins, use the `helm plugin list` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有安装的插件，请使用`helm plugin list`命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To attempt to update the plugin, use the `helm plugin update` command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试更新插件，请使用`helm plugin update`命令：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you wish to the uninstall the plugin from your system, use the `helm plugin
    remove` command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望卸载系统中的插件，请使用`helm plugin remove`命令：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Unless otherwise specified, Helm will use the *plugin.yaml* and source code
    located on the default branch of the Git repo when installing a plugin. If you
    wish to specify a Git tag to use, use the `--version` flag on install:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有规定，Helm将在安装插件时使用位于Git存储库默认分支上的*plugin.yaml*和源代码。如果您希望指定要使用的Git标签，请在安装时使用`--version`标志：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It is also possible to install plugins directly from a tarball URL. Helm will
    download the tarball and unpack it into the plugins directory:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以直接从tarball URL安装插件。Helm将下载tarball并解压到插件目录：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition, you can install a plugin from a local directory:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以从本地目录安装插件：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Instead of copying the files, Helm will create symlinks to the original files:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Helm不会复制文件，而是会创建到原始文件的符号链接：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This might be useful, for example, if you are actively developing a plugin.
    Making changes to *plugin.yaml* and other source files will be recognized immediately
    when invoking a symlinked plugin.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您正在积极开发插件，则可能会很有用。在调用符号链接插件时，对*plugin.yaml*和其他源文件进行更改将立即被识别。
- en: Custom Subcommands
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义子命令
- en: Plugins have a number of useful features that enable seemless integration with
    the existing Helm user experience. Probably the most notable feature of Helm plugins
    is that each plugin supplies Helm with a custom, top-level subcommand. These subcommands
    even have the ability to leverage shell completion (covered later in this chapter).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 插件具有许多有用的功能，可以与现有的Helm用户体验无缝集成。Helm插件最显著的特点可能是每个插件为Helm提供一个自定义的顶级子命令。这些子命令甚至可以利用Shell完成（本章后面讨论）。
- en: Once a plugin is installed, a new command will become available for you to use
    based on the plugin’s name. This new command integrates directly with Helm and
    will even show up in `helm help`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装插件后，将根据插件名称为您提供一个新的命令可供使用。这个新命令直接集成到Helm中，甚至会显示在`helm help`中。
- en: 'For example, let’s say we have a plugin installed called `inspect-templates`
    that gives us extra information about the YAML templates found within a chart.
    This plugin will provide you with an extra Helm command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们安装了一个名为`inspect-templates`的插件，它可以为我们提供关于图表中找到的YAML模板的额外信息。此插件将为您提供一个额外的Helm命令：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will execute the `inspect-templates` plugin, passing along any arguments
    or flags provided to the underlying tool that the plugin executes upon invocation.
    The author of the plugin specifies some command that Helm should run as a subprocess
    each time the plugin is invoked (more info on how to specify this in [“Building
    a Plugin”](#building_a_plugin)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行`inspect-templates`插件，将任何参数或标志传递给插件调用时执行的基础工具。插件的作者指定了一些命令，Helm应在每次调用插件时作为子进程运行（有关如何指定此内容的更多信息，请参阅[“构建插件”](#building_a_plugin)）。
- en: Plugins offer a happy alternative to augment Helm’s existing feature set without
    the need to make any modifications to Helm itself.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 插件为增强Helm现有功能集提供了一个令人满意的替代方案，而无需对Helm本身进行任何修改。
- en: Building a Plugin
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建插件
- en: Building a Helm plugin is a fairly straightforward process. Depending on the
    requirements and overall complexity of the plugin, it may require some programming
    knowledge; however, many plugins run just a basic shell command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Helm插件是一个非常简单的过程。根据插件的要求和整体复杂性，可能需要一些编程知识；但是，许多插件仅运行基本的Shell命令。
- en: The underlying implementation
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 底层实现
- en: 'Consider the following Bash script, *inspect-templates.sh*, the underlying
    implementation for our example `inspect-templates` plugin:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下Bash脚本，*inspect-templates.sh*，这是我们示例`inspect-templates`插件的底层实现：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This script is what Helm will execute behind the scenes when a user runs `helm
    inspect-templates`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户运行`helm inspect-templates`时，Helm将在幕后执行此脚本。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Underlying plugin implementations are not required to be written in Bash, Go,
    or any specific programming language. To the end-user of this plugin, it should
    appear to be just another part of the Helm CLI.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的底层实现并不需要使用Bash、Go或任何特定的编程语言编写。对于此插件的最终用户，它应该看起来只是Helm CLI的另一部分。
- en: The plugin manifest
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件清单
- en: Each plugin is defined by a YAML file called *plugin.yaml*. This file contains
    plugin metadata and information regarding what command to run when the plugin
    is invoked.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插件由一个名为*plugin.yaml*的YAML文件定义。此文件包含插件元数据和有关在调用插件时运行的命令的信息。
- en: 'Here’s a basic example of *plugin.yaml* for the `inspect-templates` plugin:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是*plugin.yaml*的基本示例，适用于`inspect-templates`插件：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO1-1)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO1-1)'
- en: The name of the plugin.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的名称。
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO1-2)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO1-2)'
- en: The version of the plugin.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的版本。
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO1-3)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO1-3)'
- en: A basic description of the plugin.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的基本描述。
- en: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO1-4)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO1-4)'
- en: The command to run when this plugin is invoked.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此插件时运行的命令。
- en: Manual installation
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动安装
- en: 'First check the configured path for the plugin storage root directory:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查插件存储根目录的配置路径：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using a Custom Root Directory for Plugins
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义根目录进行插件操作
- en: The root directory for plugins can be overridden by providing a custom path
    for the `HELM_PLUGINS` environment variable in the current environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的根目录可以通过在当前环境中提供`HELM_PLUGINS`环境变量的自定义路径进行覆盖。
- en: 'Create a directory matching the name of the plugin (`inspect-templates`) inside
    the plugin storage root directory:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件存储根目录内创建与插件名称（`inspect-templates`）匹配的目录：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, copy over *plugin.yaml* and *inspect-templates.sh* to the new directory,
    and make sure the script is executable:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将*plugin.yaml*和*inspect-templates.sh*复制到新目录，并确保脚本可执行：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The end result
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最终结果
- en: 'Here’s what our `inspect-templates` plugin looks like in action:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了我们的`inspect-templates`插件的工作示例：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice how the command-line arguments provided (i.e., `mychart/`) are passed
    directly to the script. This makes it easy for plugin authors to build standalone
    tools that accept any number of arguments or custom flags.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意提供的命令行参数（即`mychart/`）直接传递给脚本。这使得插件作者能够构建接受任意数量参数或自定义标志的独立工具变得容易。
- en: plugin.yaml
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plugin.yaml
- en: '*plugin.yaml* is the name of the plugin manifest file that describes a plugin,
    its invocation command, and other important details.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*plugin.yaml*是描述插件及其调用命令等重要细节的插件清单文件的名称。'
- en: 'Here is an example *plugin.yaml* that contains all possible options you can
    specify for your plugin:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个包含所有可为插件指定的选项的*plugin.yaml*示例：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO2-1)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO2-1)'
- en: The name of the plugin.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的名称。
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO2-2)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO2-2)'
- en: The plugin version.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的版本。
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO2-3)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO2-3)'
- en: The usage instructions for this plugin.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的使用说明。
- en: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO2-4)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO2-4)'
- en: A description of the plugin.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的描述。
- en: '[![5](Images/5.png)](#co_helm_plugins_and_starters_CO2-5)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_helm_plugins_and_starters_CO2-5)'
- en: Platform-specific commands. If a client matches an os/arch combo, run that command
    instead of the default one.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 特定平台的命令。如果客户端匹配特定的操作系统/架构组合，则运行该命令而不是默认命令。
- en: '[![6](Images/6.png)](#co_helm_plugins_and_starters_CO2-6)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_helm_plugins_and_starters_CO2-6)'
- en: Command to run when this plugin is invoked.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此插件时运行的命令。
- en: '[![7](Images/7.png)](#co_helm_plugins_and_starters_CO2-7)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](Images/7.png)](#co_helm_plugins_and_starters_CO2-7)'
- en: Whether or not to supress Helm global flags passed (such as `--debug`) when
    passed as arguments to the plugin.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为插件的参数传递时，是否抑制传递给插件的Helm全局标志（例如`--debug`）。
- en: '[![8](Images/8.png)](#co_helm_plugins_and_starters_CO2-8)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](Images/8.png)](#co_helm_plugins_and_starters_CO2-8)'
- en: Plugin hooks (see [“Hooks”](#hooks)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 插件钩子（参见[“Hooks”](#hooks)）。
- en: '[![9](Images/9.png)](#co_helm_plugins_and_starters_CO2-9)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](Images/9.png)](#co_helm_plugins_and_starters_CO2-9)'
- en: Downloaders and associated protocols (see [“Downloader Plugins”](#downloader_plugins)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下载器及其相关协议（参见[“Downloader Plugins”](#downloader_plugins)）。
- en: The `name` of the plugin will be the subcommand used to invoke this plugin from
    the Helm CLI (e.g., `helm myplugin`). Due to this, plugin names should not match
    any existing Helm subcommands (`install`, `repo`, etc.). The name can only contain
    the characters a–z, A–Z, 0–9, _, and -.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的`name`将作为从Helm CLI调用此插件的子命令（例如`helm myplugin`）。因此，插件名称不应与任何现有的Helm子命令（如`install`、`repo`等）匹配。名称只能包含字符a–z、A–Z、0–9、_和-。
- en: The plugin `version` should be a valid SemVer 2 version.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的`version`应该是一个有效的SemVer 2版本。
- en: The `usage` and `description` for the plugin will be displayed when you run
    `helm help` and `helm help myplugin`. However, the plugin itself must handle its
    own flag parsing for things like `helm myplugin --help`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的`usage`和`description`将在运行`helm help`和`helm help myplugin`时显示。但是，插件本身必须处理其自身的标志解析，例如`helm
    myplugin --help`。
- en: The `command` is what Helm will execute in a subprocess when this plugin is
    invoked. If a section for `platformCommands` is defined, Helm will first check
    if the system matches the provided `os` (operating system) and `arch` (architecture),
    and if so, Helm will instead use the `command` defined in the matching entry.
    The `arch` field is optional, and if missing, just the `os` will be checked.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用此插件时，`command`是Helm在子进程中执行的命令。如果定义了`platformCommands`部分，Helm首先会检查系统是否与提供的`os`（操作系统）和`arch`（架构）匹配，如果匹配，则Helm将使用匹配条目中定义的`command`。`arch`字段是可选的，如果缺失，则仅检查`os`。
- en: 'Here is the exact order in which Helm determines which command to run when
    a plugin is invoked, based on the contents of *plugin.yaml* and the runtime environment:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Helm确定在基于*plugin.yaml*内容和运行时环境时运行插件时要运行的命令的确切顺序：
- en: If `platformCommand` is present, it will be searched first.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在`platformCommand`，将首先搜索它。
- en: If both `os` and `arch` match the current platform, search will stop and the
    platform-specific command will be executed.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`os`和`arch`都与当前平台匹配，则搜索将停止并执行特定于平台的命令。
- en: If `os` matches and there is no more specific match, the platform-specific command
    will be executed.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`os`匹配并且没有更具体的匹配项，则将执行特定于平台的命令。
- en: If no `os`/`arch` match is found, the default top-level `command` will be executed.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有找到`os`/`arch`匹配项，则将执行顶层默认的`command`。
- en: Helm will exit with an error if no top-level `command` is present and no matches
    are found in `platformCommand`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果顶层没有`command`且`platformCommand`中没有匹配项，则Helm将以错误退出。
- en: Hooks
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钩子
- en: Plugin hooks allow you to take additional actions when the plugin is installed,
    updated, or deleted.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 插件钩子允许在安装、更新或删除插件时采取额外的操作。
- en: For example, the underlying implementation for your plugin may be a platform-specific
    binary that must be downloaded from the internet. The URL for the binary varies
    depending on the user’s operating system.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您的插件的底层实现可能是一个平台特定的二进制文件，必须从互联网下载。该二进制文件的URL根据用户的操作系统而变化。
- en: 'A script to handle this logic based on operating system might look something
    like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 根据操作系统处理此逻辑的脚本可能如下所示：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: By defining an install hook for our plugin, we can make it so that this script
    runs when a user installs this plugin.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为我们的插件定义安装钩子，我们可以使得此脚本在用户安装此插件时运行。
- en: 'To define a hook, add a `hooks` section to your *plugin.yaml*, defining commands
    for each event you want to respond to:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个钩子，请向您的*plugin.yaml*添加一个`hooks`部分，为您希望响应的每个事件定义命令：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO3-1)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO3-1)'
- en: Command to run on `helm plugin install`
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`helm plugin install`命令时执行。
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO3-2)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO3-2)'
- en: Command to run on `helm plugin update`
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`helm plugin update`命令时执行。
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO3-3)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO3-3)'
- en: Command to run on `helm plugin remove`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`helm plugin remove`命令时执行。
- en: Downloader Plugins
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载器插件
- en: Some plugins have special functionality that allows them to be used as an alternative
    for downloading charts.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件具有特殊功能，允许它们作为下载图表的替代方案使用。
- en: This is useful if you are storing charts in some way that is different than
    a pure chart repository, or if your chart repository implementation has extra
    requirements.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以与纯图表存储方式不同的方式存储图表，或者如果您的图表存储库实现具有额外的要求，则此方法很有用。
- en: A *downloader plugin* defines one (or more) protocols that, if detected on the
    command line, will instruct Helm to download *index.yaml* or chart *.tgz* packages
    using the plugin versus Helm’s internal download mechanism.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*下载器插件*定义了一个（或多个）协议，如果在命令行中检测到，则指示Helm使用插件而不是Helm的内部下载机制下载*index.yaml*或chart
    *.tgz*包。'
- en: 'Here is an example of a *plugin.yaml* for a downloader plugin called “super-secure,”
    which registers the `ss://` protocol:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个名为“super-secure”的下载器插件的*plugin.yaml*示例，它注册了`ss://`协议：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO4-1)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO4-1)'
- en: Command to run when this plugin is invoked as a downloader
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 插件作为下载器时调用的命令
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO4-2)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO4-2)'
- en: Custom protocols declared by this plugin
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件声明的自定义协议
- en: Note
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that all plugins, including downloader plugins, define a custom
    top-level command (i.e., `helm super-secure`). The command for the plugin downloader
    can be identical to the `command` field; just beware that if you wish to use the
    plugin as both a standard plugin and as a downloader, it might become challenging
    to determine how it’s being used. One way you could determine if the plugin is
    being used as a downloader is to check if the command is invoked with exactly
    four command-line arguments.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，包括下载器插件在内的所有插件都定义了一个自定义的顶级命令（即 `helm super-secure`）。插件下载器的命令可以与 `command`
    字段相同；但请注意，如果希望将插件同时用作标准插件和下载器，确定其用途可能会有一些挑战。您可以通过检查命令是否以四个命令行参数被调用来确定插件是否被用作下载器的一种方法。
- en: 'Downloader commands are always invoked with the following arguments:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下载器命令总是使用以下参数调用：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `certFile`, `keyFile`, and `caFile` arguments are derived from entries in
    a YAML configuration file, whose path is returned by `$(helm env HELM_REPOSITORY_CONFIG)`,
    and are set when a repository is added using `helm repo add` (see [Chapter 7](ch07.xhtml#chart_repositories)
    for more background). The `full-URL` argument is the full URL for the resource
    that is being downloaded, either an *index.yaml*, or chart *.tgz*/*.prov* file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`certFile`、`keyFile` 和 `caFile` 参数来自一个 YAML 配置文件中的条目，其路径由 `$(helm env HELM_REPOSITORY_CONFIG)`
    返回，并且在使用 `helm repo add` 添加仓库时设置（详见 [第 7 章](ch07.xhtml#chart_repositories) 了解更多背景）。`full-URL`
    参数是正在下载的资源的完整 URL，可以是一个 *index.yaml* 文件，或者是一个图表 *.tgz*/*.prov* 文件。'
- en: 'Let’s check out the implementation for the `ss://` protocol downloader defined
    by the `super-secure` plugin:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看由 `super-secure` 插件定义的 `ss://` 协议下载器的实现：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This downloader allows us to use a chart repository protected with token/bearer
    auth. It expects that the environment variable `SUPER_SECURE_TOKEN` is set, which
    will be used to formulate the header `Authorization: Bearer <token>` used when
    requesting a resource from a chart repository.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '此下载器允许我们使用使用令牌/承载者认证保护的图表仓库。它期望环境变量 `SUPER_SECURE_TOKEN` 被设置，该令牌将用于构造请求图表仓库资源时使用的
    `Authorization: Bearer <token>` 头部。'
- en: Note
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: While the `super-secure` plugin is a great example of a simple downloader plugin,
    future versions of Helm may actually support bearer token auth out of the box.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `super-secure` 插件是一个简单的下载器插件的很好示例，但是 Helm 的未来版本可能会直接支持 bearer token auth。
- en: Downloader plugins are expected to output the contents of the resource to `stdout`,
    so any extra logs etc. should be printed to `stderr`. This is why, in the line
    starting with `echo`, we redirect this message to `stderr` using `1>&2`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下载器插件期望将资源的内容输出到 `stdout`，因此任何额外的日志等应该打印到 `stderr`。这就是为什么在以 `echo` 开头的行中，我们使用
    `1>&2` 将此消息重定向到 `stderr`。
- en: 'Once this plugin is installed, here’s how we would add a chart repository protected
    by token auth:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 安装此插件后，这是我们如何添加一个使用令牌认证保护的图表仓库的方法：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This repository URL will now show up in the local list of repositories, containing
    the `ss://` protocol:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此仓库 URL 现在将显示在本地仓库列表中，包含 `ss://` 协议：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now the repository can be used just like any other repository, to download
    remote chart packages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该仓库可以像任何其他仓库一样使用，用于下载远程图表包：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Downloader plugins provide a way for Helm users to extend the transfer mechanism
    for working with chart repositories by defining custom protocols. When Helm detects
    a custom protocol being used, it will attempt to locate an installed plugin that
    can handle it, then defers the resource request to that plugin.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下载器插件为 Helm 用户提供了一种通过定义自定义协议来扩展与图表仓库工作的传输机制的方式。当 Helm 检测到使用自定义协议时，它将尝试定位一个安装的插件来处理它，然后将资源请求推迟给该插件。
- en: Execution Environment
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行环境
- en: Since plugins are meant to extend Helm’s functionality, they might need access
    to some of Helm’s internal configuration files, or global flags provided on the
    command line.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于插件旨在扩展 Helm 的功能，它们可能需要访问一些 Helm 的内部配置文件，或者在命令行上提供的全局标志。
- en: To provide plugins access to this type of information, a series of known environment
    variables are provided to the plugin at runtime.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让插件在运行时能够访问到这类信息，一系列已知的环境变量会被提供给插件。
- en: 'Here is a current list of all the environment variables available to plugins,
    in alphabetical order:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当前所有插件可用的环境变量列表，按字母顺序排列：
- en: '`HELM_BIN`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_BIN`'
- en: The path to the Helm command being executed
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 正在执行的 Helm 命令的路径
- en: '`HELM_DEBUG`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_DEBUG`'
- en: Value set for the global boolean `--debug` option (“true” or “false”)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 全局布尔 `--debug` 选项设置的值（“true” 或 “false”）
- en: '`HELM_KUBECONTEXT`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_KUBECONTEXT`'
- en: Value set for the global `--kube-context <context>` option
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 全局 `--kube-context <context>` 选项设置的值
- en: '`HELM_NAMESPACE`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_NAMESPACE`'
- en: Value set for the global `--namespace <namespace>` option
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 全局 `--namespace <namespace>` 选项设置的值
- en: '`HELM_PLUGIN_DIR`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_PLUGIN_DIR`'
- en: Root directory of the current plugin
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当前插件的根目录
- en: '`HELM_PLUGIN_NAME`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_PLUGIN_NAME`'
- en: Name of the current plugin
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当前插件的名称
- en: '`HELM_PLUGINS`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_PLUGINS`'
- en: Top-level directory containing all plugins
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有插件的顶层目录
- en: '`HELM_REGISTRY_CONFIG`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_REGISTRY_CONFIG`'
- en: Root directory for registry configuration
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库配置的根目录
- en: '`HELM_REPOSITORY_CACHE`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_REPOSITORY_CACHE`'
- en: Root directory for repository cache
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库缓存的根目录
- en: '`HELM_REPOSITORY_CONFIG`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_REPOSITORY_CONFIG`'
- en: Root directory for repository configuration
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库配置的根目录
- en: Shell Completion
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shell 自动完成
- en: Helm has built-in support for shell autocompletion for both Bash and Z shell
    (Zsh) (see `helm completion --help`). This is helpful in situations where you
    cannot remember the name of a subcommand or flag you are attempting to use.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 对于 Bash 和 Z shell（Zsh）都有内置的 shell 自动完成支持（参见 `helm completion --help`）。这在你无法记住正在尝试使用的子命令或标志名称时非常有帮助。
- en: 'Plugins also have the ability to supply their own custom shell completions
    by using one of two methods: static autocompletion and dynamic completion.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 插件还可以通过两种方法（静态自动完成和动态完成）提供自定义的 shell 自动完成。
- en: Static autocompletion
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态自动完成
- en: By including a file called *completion.yaml* in the root of the plugin directory,
    Helm plugins can specify all of the expected flags and commands available for
    the plugin statically.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在插件目录的根目录中包含名为 *completion.yaml* 的文件，Helm 插件可以静态指定插件可用的所有预期标志和命令。
- en: 'Here is an example *completion.yaml* for an imaginary `zoo` plugin:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个虚构的 `zoo` 插件的 *completion.yaml* 示例：
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO5-1)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO5-1)'
- en: The name of the plugin that this completion file is for
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此完成文件所属插件的名称
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO5-2)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO5-2)'
- en: 'A list of flags available (Note: these should not include a `-` or `--` prefix)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 可用标志的列表（注意：这些标志不应包含 `-` 或 `--` 前缀）
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO5-3)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO5-3)'
- en: A list of subcommands available
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 可用子命令的列表
- en: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO5-4)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO5-4)'
- en: Name of an individual subcommand
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 单个子命令的名称
- en: '[![5](Images/5.png)](#co_helm_plugins_and_starters_CO5-5)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_helm_plugins_and_starters_CO5-5)'
- en: A list of valid options for the first parameter following a subcommand
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个子命令后面参数的有效选项列表
- en: Underneath the top-level `commands` section, another `commands` section can
    be specified for nested subcommands (and recursively as many times as necessary).
    Each command in a `commands` section can contain its own list of `flags` and `validArgs`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶层 `commands` 部分下面，可以为嵌套子命令指定另一个 `commands` 部分（以及递归指定多次）。每个 `commands` 部分中的命令都可以包含自己的
    `flags` 和 `validArgs` 列表。
- en: Helm’s global flags, such as `--debug` or `--namespace`, are already handled
    by Helm’s built-in shell completion, so it is not necessary to list these under
    `flags`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 的全局标志，如 `--debug` 或 `--namespace`，已经由 Helm 内置的 shell 自动完成处理，因此不需要在 `flags`
    下列出这些。
- en: 'If we begin trying to run the example `zoo` plugin, then press the Tab key,
    it should show us all of the available subcommands:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开始尝试运行示例 `zoo` 插件，然后按 Tab 键，它应该显示所有可用的子命令：
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now if we do the same, but add a `--disable-s` suffix prior to pressing the
    Tab key, we should see our flags:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们做同样的操作，但在按下 Tab 键之前加上 `--disable-s` 后缀，我们应该能看到我们的标志：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Using static completion, we are able to achieve parity with Helm’s existing
    shell completions, making plugins feel even more tightly integrated with the Helm
    user experience.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用静态完成，我们能够与 Helm 现有的 shell 完成达到一致，使插件在 Helm 用户体验中感觉更加紧密集成。
- en: Tip
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you are in the process of developing a plugin, you must open a new terminal
    window for static shell completions to be refreshed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发一个插件，必须打开一个新的终端窗口以刷新静态 shell 自动完成。
- en: 'Alternatively, you can run one of the following to get the latest completions
    in the current terminal:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以运行以下命令之一，在当前终端获取最新的完成：
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Dynamic completion
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态完成
- en: In some cases, the valid arguments for a given command may not be known ahead
    of time. For example, you may want to provide a list of Helm release names in
    your cluster as valid arguments for your plugin. This can be achieved using dynamic
    completion.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，给定命令的有效参数可能事先不知道。例如，您可能希望为集群中的 Helm 发布名称提供作为插件有效参数的列表。这可以通过动态完成来实现。
- en: To enable dynamic completion, include an executable file named *plugin.complete*
    in the root of the plugin directory. This file can be any type of executable;
    for example, a shell script or binary.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用动态完成，请在插件目录的根目录中包含一个名为 *plugin.complete* 的可执行文件。此文件可以是任何类型的可执行文件，例如 Shell
    脚本或二进制文件。
- en: For plugins containing a *plugin.complete* file, when completion is requested
    (i.e., pressing the Tab key), Helm will run this executable, passing along the
    text that needs completion as the first argument. This program should then return
    a list of possible results, each separated by a new line, and exit successfully
    (i.e., return code 0).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含 *plugin.complete* 文件的插件，在请求完成时（例如按下 Tab 键），Helm 将运行此可执行文件，并将需要完成的文本作为第一个参数传递。该程序应返回一系列可能的结果，每个结果由新行分隔，并成功退出（即返回代码
    0）。
- en: 'You might even decide to supply this completion functionality as part of the
    primary plugin program, using a simple wrapper script to trigger it using a flag
    such as `--complete`. Here is an example of a basic *plugin.complete* executable
    that does just this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以决定将此完成功能作为主要插件程序的一部分提供，使用简单的包装脚本通过诸如 `--complete` 标志触发它。以下是执行此操作的基本 *plugin.complete*
    可执行文件示例：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Building on the `zoo` plugin example, let’s say the list of available animal
    categories is constantly changing and stored in a file called *animals.txt* in
    the user’s home directory. Here’s what *animals.txt* might look like:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 延续 `zoo` 插件示例，假设可用动物类别的列表不断变化，并存储在用户主目录中的名为 *animals.txt* 的文件中。以下是 *animals.txt*
    可能的样子：
- en: '[PRE30]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We want to be able to dynamically provide completion based on the contents
    of this file. Here is an example of a *plugin.complete* executable (Bash script)
    that could be used to provide dynamic completion:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够根据此文件的内容动态提供完成功能。以下是一个示例，展示了一个可用于提供动态完成的 *plugin.complete* 可执行文件（Bash
    脚本）：
- en: '[PRE31]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now if we run the plugin and type in `animals list`, then press the Tab key,
    it should show us a list of all the available animal categories for listing:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行插件并输入 `animals list`，然后按 Tab 键，它应该显示所有可用的动物类别列表：
- en: '[PRE32]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To ensure it’s dynamic, let’s add an extra category “monkeys” to *animals.txt*
    and try again:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保它是动态的，让我们在 *animals.txt* 中添加一个额外的类别“monkeys”，然后再试一次：
- en: '[PRE33]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: It works!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效！
- en: This is just a simple example of using dynamic completion, but keep in mind
    that you could also query something remote, such as resources in your Kubernetes
    cluster, making this a powerful feature for plugins.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是使用动态完成的简单示例，但请记住，您还可以查询一些远程资源，例如 Kubernetes 集群中的资源，使其成为插件的强大功能。
- en: Note
  id: totrans-215
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you are already using static completion using a *completion.yaml* file, then
    dynamic completion is not used, even if a `plugin.complete` executable is present
    in the plugin’s root directory.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经使用 *completion.yaml* 文件进行静态完成，则不使用动态完成，即使插件的根目录中存在 `plugin.complete` 可执行文件。
- en: Starters
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 起始程序
- en: Starters, or starter packs, are similar to Helm charts, except that they are
    meant to be used as templates for new charts.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 起始程序或起始包类似于 Helm 图表，不同之处在于它们被设计为新图表的模板。
- en: When you use the `helm create` command to create a new chart, this generates
    a new chart using Helm’s built-in starter, which is a general-purpose chart using
    best practices.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `helm create` 命令创建新图表时，它会生成一个使用 Helm 内置起始程序的新图表，这是一个使用最佳实践的通用图表。
- en: 'To specify a custom starter, you can use the `--starter` option when creating
    a new chart:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定自定义起始程序，可以在创建新图表时使用 `--starter` 选项：
- en: '[PRE34]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Using starters allows us to leverage a chart that has been previously built
    for an application with a similar purpose. This is useful for bootstrapping new
    projects with similar requirements to be instantly ready to deploy to your Kubernetes
    environment.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用起始程序可以利用先前为类似目的的应用构建的图表。这对于即时准备部署到您的 Kubernetes 环境中的新项目非常有用。
- en: Converting a Chart to a Starter
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图表转换为起始程序
- en: Any Helm chart can be converted into a starter. The only thing that separates
    a starter from a standard chart is the presence of dynamic references to the chart
    name in a starter’s templates.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Helm图表都可以转换为启动器。唯一区别标准图表和启动器之间的唯一事物是启动器模板中对图表名称的动态引用的存在。
- en: To convert a standard chart into a starter, replace any hardcoded references
    to the chart’s name with the string `<CHARTNAME>`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要将标准图表转换为启动器，请用字符串`<CHARTNAME>`替换对图表名称的任何硬编码引用。
- en: 'To demonstrate, let’s take this simple ConfigMap template from a chart called
    *mychart*:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，让我们从一个名为*mychart*的图表中获取这个简单的ConfigMap模板：
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here’s what that template would look like instead in a starter:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模板在启动器中的样子：
- en: '[PRE36]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-230
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This chart must still contain a *Chart.yaml* file to work; however, it will
    be overwritten by the generator.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此图表必须仍包含一个*Chart.yaml*文件才能工作；但是，它将被生成器覆盖。
- en: Making Starters Available to Helm
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使启动器可用于Helm
- en: Before using a starter, you must first decide on a unique name for it, for example
    “basic-webapp” for a starter containing boilerplate templates for deploying a
    basic web application.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用启动器之前，你必须首先为其决定一个唯一的名称，例如一个包含基本Web应用程序的启动器的“basic-webapp”。
- en: To make this starter a valid option to be used when the `--starter` flag is
    specified on the command line, it must exist as a directory under the filepath
    `$(helm env HELM_DATA_HOME)/starters`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此启动器在命令行上指定`--starter`标志时成为有效选项，它必须作为目录存在于文件路径`$(helm env HELM_DATA_HOME)/starters`中。
- en: 'If this is the first starter you are adding, ensure that the top-level *starters*
    directory first exists:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您添加的第一个启动器，请确保顶级*starters*目录首先存在：
- en: '[PRE37]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then just copy the entire *basic-webapp* directory into that top-level directory:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需将整个*basic-webapp*目录复制到该顶级目录中：
- en: '[PRE38]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Using Starters
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用启动器
- en: 'Once a starter is available, you can generate new charts based on it by referencing
    its name on the command line:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了一个启动器，你可以通过在命令行上引用其名称来基于它生成新的图表：
- en: '[PRE39]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The structure of the newly generated chart will be identical to that of the
    starter. All references to `<CHARTNAME>` in the starter’s templates will be replaced
    with the new chart’s name (i.e., *superapp*).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 新生成的图表的结构将与启动器完全相同。启动器模板中所有对`<CHARTNAME>`的引用都将替换为新图表的名称（即*superapp*）。
- en: 'Here’s an example directory structure for a generated chart based on a starter
    that has only two templates defined, *deployment.yaml* and *service.yaml*:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基于一个启动器生成的图表的示例目录结构：
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: From here, you could check this new chart into version control and start making
    changes to customize it for the given application.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以将这个新图表检入版本控制，并开始进行自定义以适应特定的应用程序。
- en: Extending Helm Further
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步扩展Helm
- en: 'In this chapter, we have discussed how Helm can be extended using plugins and
    starters. However, there is one other way in which you can extend Helm: via open
    source contributions.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何使用插件和启动器扩展Helm。然而，还有另一种方式可以扩展Helm：通过开源贡献。
- en: Everything in this book has been a reflection of thousands of open source contributions
    to the Helm project. While much of this work has been performed by maintainers
    (past and present), the majority of contributions have come from individuals around
    the world. This includes not only changes to the Go source code, but also testing
    and documentation updates.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有内容都是对Helm项目数千次开源贡献的反映。虽然大部分工作是由维护者（过去和现在）执行的，但大多数贡献来自全球各地的个人。这不仅包括对Go源代码的更改，还包括测试和文档更新。
- en: Do you have something to contribute to the Helm project? Navigate to the [Helm
    community landing page](https://oreil.ly/9TloH) to learn more!
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您有想为Helm项目做出贡献的吗？请转到[Helm社区登陆页面](https://oreil.ly/9TloH)了解更多信息！
