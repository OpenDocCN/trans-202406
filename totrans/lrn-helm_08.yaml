- en: Chapter 8\. Helm Plugins and Starters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’ve seen throughout this book, Helm has plenty of features and methods
    that aid in delivering applications on Kubernetes. However, it is also possible
    to customize and extend the functionality provided by Helm.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will discuss two ways to further enhance and customize your
    usage of Helm: *plugins* and *starters*.'
  prefs: []
  type: TYPE_NORMAL
- en: Plugins allow you to add extra functionality to Helm and integrate seamlessly
    with the CLI, making them a popular choice for users with unique workflow requirements.
    There are a number of third-party plugins available online for common use cases,
    such as secrets management. In addition, plugins are incredibly easy to build
    on your own for unique, one-off tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Starters expand the possibilities of using `helm create` to generate new Helm
    charts for different types of applications. For example, you might have a Helm
    chart built for an internal microservice that fits perfectly as an example for
    future microservices. You could convert the chart into a starter, which you can
    then use each time you begin a new project with similar requirements.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging plugins and starters, we can build on top of Helm’s out-of-the-box
    functionality to simplify and automate everyday workflow tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm plugins are external tools that are accessible directly from the Helm CLI.
    They allow you to add custom subcommands to Helm without making any modifications
    to Helm’s Go source code. This is similar in design to how plugin systems are
    implemented in other tools, such as `kubectl` (the Kubernetes CLI).
  prefs: []
  type: TYPE_NORMAL
- en: Additionaly, downloader plugins allow you to specify a custom protocol for communicating
    with chart repositories. This can be useful if you have some custom authentication
    method, or if you need to somehow modify the method in which Helm fetches charts
    from repositories
  prefs: []
  type: TYPE_NORMAL
- en: Installing Third-Party Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many third-party plugins are made open source and publicly available on GitHub.
    Many of these plugins use the “helm-plugin” tag/topic to make them easy to find.
    Refer to the [documentation for Helm plugins on GitHub](https://oreil.ly/3KwNb).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have found a plugin to install, obtain its version control URL. This
    will be used as the means of obtaining the correct version of *plugin.yaml* and
    the rest of the plugin source code.
  prefs: []
  type: TYPE_NORMAL
- en: Git, SVN, Bazaar (Bzr), and Mercurial (Hg) URLs are currently supported. For
    Git, the version control URL looks something like *`https://example.com/myorg/myrepo.git`*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, there is a simple plugin for managing Helm starters located in
    a git repo at [*https://github.com/salesforce/helm-starter*](https://github.com/salesforce/helm-starter).
    The version control URL for this plugin is `https://github.com/salesforce/helm-starter.git`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install this plugin, run `helm plugin install` passing the version control
    URL as the first argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the installation succeeds, you can proceed to use the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all installed plugins, use the `helm plugin list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To attempt to update the plugin, use the `helm plugin update` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wish to the uninstall the plugin from your system, use the `helm plugin
    remove` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Unless otherwise specified, Helm will use the *plugin.yaml* and source code
    located on the default branch of the Git repo when installing a plugin. If you
    wish to specify a Git tag to use, use the `--version` flag on install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to install plugins directly from a tarball URL. Helm will
    download the tarball and unpack it into the plugins directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, you can install a plugin from a local directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of copying the files, Helm will create symlinks to the original files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This might be useful, for example, if you are actively developing a plugin.
    Making changes to *plugin.yaml* and other source files will be recognized immediately
    when invoking a symlinked plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Subcommands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugins have a number of useful features that enable seemless integration with
    the existing Helm user experience. Probably the most notable feature of Helm plugins
    is that each plugin supplies Helm with a custom, top-level subcommand. These subcommands
    even have the ability to leverage shell completion (covered later in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Once a plugin is installed, a new command will become available for you to use
    based on the plugin’s name. This new command integrates directly with Helm and
    will even show up in `helm help`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say we have a plugin installed called `inspect-templates`
    that gives us extra information about the YAML templates found within a chart.
    This plugin will provide you with an extra Helm command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will execute the `inspect-templates` plugin, passing along any arguments
    or flags provided to the underlying tool that the plugin executes upon invocation.
    The author of the plugin specifies some command that Helm should run as a subprocess
    each time the plugin is invoked (more info on how to specify this in [“Building
    a Plugin”](#building_a_plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Plugins offer a happy alternative to augment Helm’s existing feature set without
    the need to make any modifications to Helm itself.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building a Helm plugin is a fairly straightforward process. Depending on the
    requirements and overall complexity of the plugin, it may require some programming
    knowledge; however, many plugins run just a basic shell command.
  prefs: []
  type: TYPE_NORMAL
- en: The underlying implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider the following Bash script, *inspect-templates.sh*, the underlying
    implementation for our example `inspect-templates` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This script is what Helm will execute behind the scenes when a user runs `helm
    inspect-templates`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Underlying plugin implementations are not required to be written in Bash, Go,
    or any specific programming language. To the end-user of this plugin, it should
    appear to be just another part of the Helm CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin manifest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each plugin is defined by a YAML file called *plugin.yaml*. This file contains
    plugin metadata and information regarding what command to run when the plugin
    is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a basic example of *plugin.yaml* for the `inspect-templates` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The version of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: A basic description of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The command to run when this plugin is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Manual installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First check the configured path for the plugin storage root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using a Custom Root Directory for Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The root directory for plugins can be overridden by providing a custom path
    for the `HELM_PLUGINS` environment variable in the current environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory matching the name of the plugin (`inspect-templates`) inside
    the plugin storage root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, copy over *plugin.yaml* and *inspect-templates.sh* to the new directory,
    and make sure the script is executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The end result
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what our `inspect-templates` plugin looks like in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the command-line arguments provided (i.e., `mychart/`) are passed
    directly to the script. This makes it easy for plugin authors to build standalone
    tools that accept any number of arguments or custom flags.
  prefs: []
  type: TYPE_NORMAL
- en: plugin.yaml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*plugin.yaml* is the name of the plugin manifest file that describes a plugin,
    its invocation command, and other important details.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example *plugin.yaml* that contains all possible options you can
    specify for your plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The plugin version.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The usage instructions for this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: A description of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_helm_plugins_and_starters_CO2-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Platform-specific commands. If a client matches an os/arch combo, run that command
    instead of the default one.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_helm_plugins_and_starters_CO2-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Command to run when this plugin is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](Images/7.png)](#co_helm_plugins_and_starters_CO2-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Whether or not to supress Helm global flags passed (such as `--debug`) when
    passed as arguments to the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](Images/8.png)](#co_helm_plugins_and_starters_CO2-8)'
  prefs: []
  type: TYPE_NORMAL
- en: Plugin hooks (see [“Hooks”](#hooks)).
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](Images/9.png)](#co_helm_plugins_and_starters_CO2-9)'
  prefs: []
  type: TYPE_NORMAL
- en: Downloaders and associated protocols (see [“Downloader Plugins”](#downloader_plugins)).
  prefs: []
  type: TYPE_NORMAL
- en: The `name` of the plugin will be the subcommand used to invoke this plugin from
    the Helm CLI (e.g., `helm myplugin`). Due to this, plugin names should not match
    any existing Helm subcommands (`install`, `repo`, etc.). The name can only contain
    the characters a–z, A–Z, 0–9, _, and -.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin `version` should be a valid SemVer 2 version.
  prefs: []
  type: TYPE_NORMAL
- en: The `usage` and `description` for the plugin will be displayed when you run
    `helm help` and `helm help myplugin`. However, the plugin itself must handle its
    own flag parsing for things like `helm myplugin --help`.
  prefs: []
  type: TYPE_NORMAL
- en: The `command` is what Helm will execute in a subprocess when this plugin is
    invoked. If a section for `platformCommands` is defined, Helm will first check
    if the system matches the provided `os` (operating system) and `arch` (architecture),
    and if so, Helm will instead use the `command` defined in the matching entry.
    The `arch` field is optional, and if missing, just the `os` will be checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the exact order in which Helm determines which command to run when
    a plugin is invoked, based on the contents of *plugin.yaml* and the runtime environment:'
  prefs: []
  type: TYPE_NORMAL
- en: If `platformCommand` is present, it will be searched first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If both `os` and `arch` match the current platform, search will stop and the
    platform-specific command will be executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `os` matches and there is no more specific match, the platform-specific command
    will be executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no `os`/`arch` match is found, the default top-level `command` will be executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Helm will exit with an error if no top-level `command` is present and no matches
    are found in `platformCommand`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugin hooks allow you to take additional actions when the plugin is installed,
    updated, or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the underlying implementation for your plugin may be a platform-specific
    binary that must be downloaded from the internet. The URL for the binary varies
    depending on the user’s operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'A script to handle this logic based on operating system might look something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: By defining an install hook for our plugin, we can make it so that this script
    runs when a user installs this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a hook, add a `hooks` section to your *plugin.yaml*, defining commands
    for each event you want to respond to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Command to run on `helm plugin install`
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Command to run on `helm plugin update`
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Command to run on `helm plugin remove`
  prefs: []
  type: TYPE_NORMAL
- en: Downloader Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some plugins have special functionality that allows them to be used as an alternative
    for downloading charts.
  prefs: []
  type: TYPE_NORMAL
- en: This is useful if you are storing charts in some way that is different than
    a pure chart repository, or if your chart repository implementation has extra
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: A *downloader plugin* defines one (or more) protocols that, if detected on the
    command line, will instruct Helm to download *index.yaml* or chart *.tgz* packages
    using the plugin versus Helm’s internal download mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a *plugin.yaml* for a downloader plugin called “super-secure,”
    which registers the `ss://` protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Command to run when this plugin is invoked as a downloader
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Custom protocols declared by this plugin
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Keep in mind that all plugins, including downloader plugins, define a custom
    top-level command (i.e., `helm super-secure`). The command for the plugin downloader
    can be identical to the `command` field; just beware that if you wish to use the
    plugin as both a standard plugin and as a downloader, it might become challenging
    to determine how it’s being used. One way you could determine if the plugin is
    being used as a downloader is to check if the command is invoked with exactly
    four command-line arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Downloader commands are always invoked with the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `certFile`, `keyFile`, and `caFile` arguments are derived from entries in
    a YAML configuration file, whose path is returned by `$(helm env HELM_REPOSITORY_CONFIG)`,
    and are set when a repository is added using `helm repo add` (see [Chapter 7](ch07.xhtml#chart_repositories)
    for more background). The `full-URL` argument is the full URL for the resource
    that is being downloaded, either an *index.yaml*, or chart *.tgz*/*.prov* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check out the implementation for the `ss://` protocol downloader defined
    by the `super-secure` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This downloader allows us to use a chart repository protected with token/bearer
    auth. It expects that the environment variable `SUPER_SECURE_TOKEN` is set, which
    will be used to formulate the header `Authorization: Bearer <token>` used when
    requesting a resource from a chart repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While the `super-secure` plugin is a great example of a simple downloader plugin,
    future versions of Helm may actually support bearer token auth out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Downloader plugins are expected to output the contents of the resource to `stdout`,
    so any extra logs etc. should be printed to `stderr`. This is why, in the line
    starting with `echo`, we redirect this message to `stderr` using `1>&2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this plugin is installed, here’s how we would add a chart repository protected
    by token auth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This repository URL will now show up in the local list of repositories, containing
    the `ss://` protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the repository can be used just like any other repository, to download
    remote chart packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Downloader plugins provide a way for Helm users to extend the transfer mechanism
    for working with chart repositories by defining custom protocols. When Helm detects
    a custom protocol being used, it will attempt to locate an installed plugin that
    can handle it, then defers the resource request to that plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Execution Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since plugins are meant to extend Helm’s functionality, they might need access
    to some of Helm’s internal configuration files, or global flags provided on the
    command line.
  prefs: []
  type: TYPE_NORMAL
- en: To provide plugins access to this type of information, a series of known environment
    variables are provided to the plugin at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a current list of all the environment variables available to plugins,
    in alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_BIN`'
  prefs: []
  type: TYPE_NORMAL
- en: The path to the Helm command being executed
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_DEBUG`'
  prefs: []
  type: TYPE_NORMAL
- en: Value set for the global boolean `--debug` option (“true” or “false”)
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_KUBECONTEXT`'
  prefs: []
  type: TYPE_NORMAL
- en: Value set for the global `--kube-context <context>` option
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_NAMESPACE`'
  prefs: []
  type: TYPE_NORMAL
- en: Value set for the global `--namespace <namespace>` option
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_PLUGIN_DIR`'
  prefs: []
  type: TYPE_NORMAL
- en: Root directory of the current plugin
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_PLUGIN_NAME`'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the current plugin
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_PLUGINS`'
  prefs: []
  type: TYPE_NORMAL
- en: Top-level directory containing all plugins
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_REGISTRY_CONFIG`'
  prefs: []
  type: TYPE_NORMAL
- en: Root directory for registry configuration
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_REPOSITORY_CACHE`'
  prefs: []
  type: TYPE_NORMAL
- en: Root directory for repository cache
  prefs: []
  type: TYPE_NORMAL
- en: '`HELM_REPOSITORY_CONFIG`'
  prefs: []
  type: TYPE_NORMAL
- en: Root directory for repository configuration
  prefs: []
  type: TYPE_NORMAL
- en: Shell Completion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helm has built-in support for shell autocompletion for both Bash and Z shell
    (Zsh) (see `helm completion --help`). This is helpful in situations where you
    cannot remember the name of a subcommand or flag you are attempting to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugins also have the ability to supply their own custom shell completions
    by using one of two methods: static autocompletion and dynamic completion.'
  prefs: []
  type: TYPE_NORMAL
- en: Static autocompletion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By including a file called *completion.yaml* in the root of the plugin directory,
    Helm plugins can specify all of the expected flags and commands available for
    the plugin statically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example *completion.yaml* for an imaginary `zoo` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helm_plugins_and_starters_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the plugin that this completion file is for
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_helm_plugins_and_starters_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of flags available (Note: these should not include a `-` or `--` prefix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_helm_plugins_and_starters_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: A list of subcommands available
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_helm_plugins_and_starters_CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Name of an individual subcommand
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_helm_plugins_and_starters_CO5-5)'
  prefs: []
  type: TYPE_NORMAL
- en: A list of valid options for the first parameter following a subcommand
  prefs: []
  type: TYPE_NORMAL
- en: Underneath the top-level `commands` section, another `commands` section can
    be specified for nested subcommands (and recursively as many times as necessary).
    Each command in a `commands` section can contain its own list of `flags` and `validArgs`.
  prefs: []
  type: TYPE_NORMAL
- en: Helm’s global flags, such as `--debug` or `--namespace`, are already handled
    by Helm’s built-in shell completion, so it is not necessary to list these under
    `flags`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we begin trying to run the example `zoo` plugin, then press the Tab key,
    it should show us all of the available subcommands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we do the same, but add a `--disable-s` suffix prior to pressing the
    Tab key, we should see our flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using static completion, we are able to achieve parity with Helm’s existing
    shell completions, making plugins feel even more tightly integrated with the Helm
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are in the process of developing a plugin, you must open a new terminal
    window for static shell completions to be refreshed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can run one of the following to get the latest completions
    in the current terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic completion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, the valid arguments for a given command may not be known ahead
    of time. For example, you may want to provide a list of Helm release names in
    your cluster as valid arguments for your plugin. This can be achieved using dynamic
    completion.
  prefs: []
  type: TYPE_NORMAL
- en: To enable dynamic completion, include an executable file named *plugin.complete*
    in the root of the plugin directory. This file can be any type of executable;
    for example, a shell script or binary.
  prefs: []
  type: TYPE_NORMAL
- en: For plugins containing a *plugin.complete* file, when completion is requested
    (i.e., pressing the Tab key), Helm will run this executable, passing along the
    text that needs completion as the first argument. This program should then return
    a list of possible results, each separated by a new line, and exit successfully
    (i.e., return code 0).
  prefs: []
  type: TYPE_NORMAL
- en: 'You might even decide to supply this completion functionality as part of the
    primary plugin program, using a simple wrapper script to trigger it using a flag
    such as `--complete`. Here is an example of a basic *plugin.complete* executable
    that does just this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Building on the `zoo` plugin example, let’s say the list of available animal
    categories is constantly changing and stored in a file called *animals.txt* in
    the user’s home directory. Here’s what *animals.txt* might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to be able to dynamically provide completion based on the contents
    of this file. Here is an example of a *plugin.complete* executable (Bash script)
    that could be used to provide dynamic completion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we run the plugin and type in `animals list`, then press the Tab key,
    it should show us a list of all the available animal categories for listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure it’s dynamic, let’s add an extra category “monkeys” to *animals.txt*
    and try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: It works!
  prefs: []
  type: TYPE_NORMAL
- en: This is just a simple example of using dynamic completion, but keep in mind
    that you could also query something remote, such as resources in your Kubernetes
    cluster, making this a powerful feature for plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are already using static completion using a *completion.yaml* file, then
    dynamic completion is not used, even if a `plugin.complete` executable is present
    in the plugin’s root directory.
  prefs: []
  type: TYPE_NORMAL
- en: Starters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starters, or starter packs, are similar to Helm charts, except that they are
    meant to be used as templates for new charts.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the `helm create` command to create a new chart, this generates
    a new chart using Helm’s built-in starter, which is a general-purpose chart using
    best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify a custom starter, you can use the `--starter` option when creating
    a new chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Using starters allows us to leverage a chart that has been previously built
    for an application with a similar purpose. This is useful for bootstrapping new
    projects with similar requirements to be instantly ready to deploy to your Kubernetes
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Converting a Chart to a Starter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any Helm chart can be converted into a starter. The only thing that separates
    a starter from a standard chart is the presence of dynamic references to the chart
    name in a starter’s templates.
  prefs: []
  type: TYPE_NORMAL
- en: To convert a standard chart into a starter, replace any hardcoded references
    to the chart’s name with the string `<CHARTNAME>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, let’s take this simple ConfigMap template from a chart called
    *mychart*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what that template would look like instead in a starter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This chart must still contain a *Chart.yaml* file to work; however, it will
    be overwritten by the generator.
  prefs: []
  type: TYPE_NORMAL
- en: Making Starters Available to Helm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before using a starter, you must first decide on a unique name for it, for example
    “basic-webapp” for a starter containing boilerplate templates for deploying a
    basic web application.
  prefs: []
  type: TYPE_NORMAL
- en: To make this starter a valid option to be used when the `--starter` flag is
    specified on the command line, it must exist as a directory under the filepath
    `$(helm env HELM_DATA_HOME)/starters`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is the first starter you are adding, ensure that the top-level *starters*
    directory first exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then just copy the entire *basic-webapp* directory into that top-level directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Using Starters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a starter is available, you can generate new charts based on it by referencing
    its name on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The structure of the newly generated chart will be identical to that of the
    starter. All references to `<CHARTNAME>` in the starter’s templates will be replaced
    with the new chart’s name (i.e., *superapp*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example directory structure for a generated chart based on a starter
    that has only two templates defined, *deployment.yaml* and *service.yaml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: From here, you could check this new chart into version control and start making
    changes to customize it for the given application.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Helm Further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have discussed how Helm can be extended using plugins and
    starters. However, there is one other way in which you can extend Helm: via open
    source contributions.'
  prefs: []
  type: TYPE_NORMAL
- en: Everything in this book has been a reflection of thousands of open source contributions
    to the Helm project. While much of this work has been performed by maintainers
    (past and present), the majority of contributions have come from individuals around
    the world. This includes not only changes to the Go source code, but also testing
    and documentation updates.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have something to contribute to the Helm project? Navigate to the [Helm
    community landing page](https://oreil.ly/9TloH) to learn more!
  prefs: []
  type: TYPE_NORMAL
