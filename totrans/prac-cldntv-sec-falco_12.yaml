- en: Chapter 9\. Installing Falco
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 安装Falco
- en: Welcome to [Part III](part03.xhtml#iii_running_falco_in_production) of this
    book, which will walk you through using Falco in the real world. Now that you
    know how Falco and its architecture work, the next step is to start using it to
    protect your applications and systems. In this chapter, you will learn what you
    need to know to install Falco in production. We will show you different scenarios
    and common best practices so that you can find the right instructions for your
    use case.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的[第三部分](part03.xhtml#iii_running_falco_in_production)，本部分将指导您如何在实际环境中使用Falco。现在您已了解Falco及其架构的工作原理，下一步是开始使用它来保护您的应用程序和系统。在本章中，您将学习在生产环境中安装Falco所需的知识。我们将展示不同的场景和常见的最佳实践，以便您找到适合您用例的正确指导。
- en: We’ll start by giving you an overview of common usage scenarios, then we’ll
    describe different installation methods for each of them. We strongly recommend
    reading about all of the installation methods, even if you need only some of them,
    to get a complete picture of the possibilities and choose which fits your needs
    best.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为您提供常见使用场景的概述，然后我们将为每种场景描述不同的安装方法。我们强烈建议您阅读所有安装方法的相关内容，即使您只需要其中的一部分，也能全面了解可能性并选择最适合您需求的方法。
- en: Choosing Your Setup
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的设置
- en: 'The Falco Project officially supports three ways to run Falco in production:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Falco项目正式支持三种在生产环境中运行Falco的方式：
- en: Running Falco directly on a host
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接在主机上运行Falco
- en: Running Falco in a container
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器中运行Falco
- en: Deploying Falco to a Kubernetes cluster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Falco部署到Kubernetes集群
- en: Each option has a different installation method, and there are a few important
    differences between the first option and the others. Installing Falco directly
    on the host is your *only* choice when your environment does not include a container
    runtime or Kubernetes. It is also the most secure way to run Falco, because it’s
    isolated from the container system (and thus difficult to breach in case of compromise).
    However, installing Falco directly on the host is usually the most difficult solution
    to maintain. It’s also not always possible (for example, when your applications
    live in a managed Kubernetes cluster and you don’t have full access to the host
    machines). The other options are usually more straightforward and easier to manage.
    Especially if your applications run on a Kubernetes cluster, deploying Falco to
    Kubernetes is a common choice. Consider the pros and cons of each and your requirements
    before making your choice.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选项都有不同的安装方法，第一个选项与其他选项之间有一些重要的区别。在您的环境中不包含容器运行时或Kubernetes时，直接在主机上安装Falco是*唯一*的选择。这也是运行Falco最安全的方式，因为它与容器系统隔离（因此在受损情况下难以侵入）。然而，直接在主机上安装Falco通常是最难维护的解决方案。它也不总是可能的（例如，当您的应用程序在托管的Kubernetes集群中运行且您无法完全访问主机时）。其他选项通常更直接且更易于管理。特别是如果您的应用程序在Kubernetes集群上运行，将Falco部署到Kubernetes是一个常见的选择。在做出选择之前，请考虑每种选择的利弊以及您的需求。
- en: Before installing Falco with any of these methods, you need to decide how you’re
    going to use Falco, which can have a significant impact on the installation process
    and configuration. The two most common scenarios are monitoring syscalls and working
    with data sources provided by plugins.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用任何这些方法安装Falco之前，您需要决定如何使用Falco，这会对安装过程和配置产生重要影响。最常见的两种场景是监控系统调用和使用插件提供的数据源。
- en: The default scenario is instrumenting the system to monitor syscalls. In this
    case you will need to deploy a Falco sensor on each machine or cluster node, as
    well as installing a driver on each underlying host.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况是在系统上部署Falco传感器以监控系统调用。在这种情况下，您将需要在每台机器或集群节点上部署一个Falco传感器，并在每个底层主机上安装驱动程序。
- en: When you work with data sources provided by plugins, you will likely need to
    install only one Falco sensor (or one for each event producer), and you won’t
    need a driver. Although there may be small differences in the actual setup of
    each data source, for simplicity we can treat this as a single installation scenario
    because the overall process is very similar. Generally, this latter scenario has
    fewer requirements and is simpler to implement.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用插件提供的数据源时，您可能只需要安装一个Falco传感器（或每个事件生成器一个），并且不需要驱动程序。虽然每个数据源的实际设置可能略有不同，但为简单起见，我们可以将其视为单一安装场景，因为整体过程非常相似。通常，后一种情况的要求较少，实施起来更简单。
- en: If you need to satisfy more than one scenario at the same time, you will need
    more Falco installations. You can then aggregate the notifications coming from
    each sensor by using other tools, like Falcosidekick (discussed in [Chapter 12](ch12.xhtml#consuming_falco_events)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要同时满足多个场景，则需要更多的 Falco 安装。然后，您可以通过使用其他工具（如 Falcosidekick，在 [第12章](ch12.xhtml#consuming_falco_events)
    中讨论）来汇总来自每个传感器的通知。
- en: Your final setup will depend on your needs and choices. The following sections
    provide instructions for each installation method in the two scenarios mentioned
    above (monitoring syscalls and working with data sources provided by plugins).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您的最终设置将取决于您的需求和选择。以下部分为上述两种情况（监视系统调用和使用插件提供的数据源）中的每种安装方法提供了说明。
- en: Installing Directly on the Host
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接在主机上安装
- en: Installing Falco directly on a host is a straightforward task—you learned the
    essential aspects in [Chapter 2](ch02.xhtml#getting_started_with_falco). This
    installation method is mainly intended for the default scenario where Falco uses
    system calls to secure and monitor a system, so it also installs the driver and
    configures Falco to use it. (In [Chapter 10](ch10.xhtml#configuring_and_running),
    we’ll discuss how to change the Falco configuration and set it up for other data
    sources.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在主机上安装 Falco 是一项简单的任务——您在 [第2章](ch02.xhtml#getting_started_with_falco) 中已了解了关键方面。此安装方法主要用于
    Falco 使用系统调用来安全监控系统的默认情况，因此它还会安装驱动程序并配置 Falco 以使用它。（在 [第10章](ch10.xhtml#configuring_and_running)
    中，我们将讨论如何更改 Falco 配置并为其他数据源设置它。）
- en: 'This method installs the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将安装以下内容：
- en: The user-space program *falco*
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户空间程序 *falco*
- en: The driver (the kernel module, by default)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 驱动程序（默认情况下的内核模块）
- en: The default configuration file and the default ruleset files in */etc/falco*
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认配置文件和位于 */etc/falco* 中的默认规则集文件
- en: The *falco-driver-loader* utility (you can use this to manage the driver)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*falco-driver-loader* 实用程序（您可以使用此工具来管理驱动程序）'
- en: A few bundled plugins (these may vary from version to version)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些捆绑插件（这些可能因版本而异）
- en: 'To install Falco, you will use one of the following artifacts provided by [Falco’s
    “Download” page](https://oreil.ly/sOLzu):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Falco，您将使用 [Falco 的“下载”页面提供的以下工件](https://oreil.ly/sOLzu) 之一：
- en: '*.rpm* package'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.rpm* 包'
- en: '*.deb* package'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.deb* 包'
- en: '*.tar.gz* (binary) package'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.tar.gz*（二进制）包'
- en: You should use one of the first two packages if you intend to install Falco
    via a compatible package manager; otherwise, use the binary package. Read on for
    more details.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算通过兼容的软件包管理器安装 Falco，则应使用前两个软件包之一；否则，请使用二进制软件包。继续阅读获取更多详细信息。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The following subsections include various commands that you need to run on your
    system. Ensure that you have sufficient privileges to execute them (for example,
    using `sudo`).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的小节包括您需要在系统上运行的各种命令。确保您有足够的权限来执行它们（例如，使用 `sudo`）。
- en: Using a Package Manager
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用软件包管理器
- en: This installation method is for Linux distributions with a package manager that
    supports *.deb* or *.rpm* packages. The setup process for a *.deb* or *.rpm* package
    will also install a systemd unit to use Falco as a service on your system, as
    well as the kernel module—the default driver—via Dynamic Kernel Module Support
    (dkms).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此安装方法适用于支持 *.deb* 或 *.rpm* 包的 Linux 发行版。*.deb* 或 *.rpm* 包的设置过程还将安装一个 systemd
    单元，以便在您的系统上将 Falco 作为服务使用，并通过动态内核模块支持（dkms）安装内核模块——默认驱动程序。
- en: '*apt* and *yum* are the most popular package managers that allow installing,
    respectively, *.deb* and *.rpm* packages. If you’re using a different package
    manager that supports *.deb* or *.rpm* packages, the installation procedure will
    be very similar, though the exact instructions may vary. Refer to its documentation
    for further details.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*apt* 和 *yum* 是最流行的软件包管理器，分别允许安装 *.deb* 和 *.rpm* 包。如果您使用支持 *.deb* 或 *.rpm*
    包的不同软件包管理器，安装过程将非常类似，尽管确切的说明可能会有所不同。请参阅其文档以获取更多详细信息。'
- en: Using apt (.deb package)
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 apt（.deb 包）
- en: 'apt is the default package manager for Debian and Debian-based distributions
    like Ubuntu. It allows you to install software applications distributed as *.deb*
    packages. To install Falco using apt, you first need to trust The Falco Project’s
    [GPG key](https://oreil.ly/Egkoo) and configure the apt repository that holds
    Falco packages:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: apt 是 Debian 及基于 Debian 的发行版（如 Ubuntu）的默认软件包管理器。它允许您安装分布为 *.deb* 包的软件应用程序。要使用
    apt 安装 Falco，您首先需要信任 [Falco 项目的 GPG 密钥](https://oreil.ly/Egkoo) 并配置包含 Falco 包的
    apt 仓库：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then update the apt package list:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更新 apt 软件包列表：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Since this installation method will also install Falco’s kernel module, you
    must install the Linux kernel headers as a precondition:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此安装方法还将安装 Falco 的内核模块，您必须首先安装 Linux 内核头文件：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, install Falco:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装 Falco：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using yum (.rpm package)
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 yum（.rpm 软件包）
- en: 'yum is a command-line utility for Linux distributions that use the RPM Package
    Manager, such as CentOS, RHEL, Fedora, and Amazon Linux. It allows you to install
    software applications distributed as *.rpm* packages. Before installing Falco
    with yum, you must ensure that the make package and the dkms package are present
    on your system. You can check that by running:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: yum 是用于使用 RPM 软件包管理器的 Linux 发行版的命令行实用程序，例如 CentOS、RHEL、Fedora 和 Amazon Linux。它允许您安装分布为
    *.rpm* 软件包的软件应用程序。在使用 yum 安装 Falco 之前，您必须确保系统上存在 make 包和 dkms 包。您可以通过运行以下命令检查：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If they are not present, install them:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在，请安装它们：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, trust The Falco Project’s [GPG key](https://oreil.ly/t5WaG) and configure
    the RPM repository that holds Falco packages:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，信任 Falco 项目的 [GPG 密钥](https://oreil.ly/t5WaG) 并配置保存 Falco 软件包的 RPM 仓库：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since this installation method will also install Falco’s kernel module, you
    must install the Linux kernel headers as a precondition:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此安装方法还将安装 Falco 的内核模块，您必须首先安装 Linux 内核头文件：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If `yum -y install kernel-devel-$(uname -r)` does not find the kernel headers
    package, run `yum distro-sync` and then reboot the system. After the reboot, try
    the preceding command again.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `yum -y install kernel-devel-$(uname -r)` 没有找到内核头文件包，请运行 `yum distro-sync`
    然后重启系统。重启后，再次尝试上述命令。
- en: 'Finally, install Falco:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装 Falco：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Completing the installation
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成安装
- en: You should now have the kernel module installed via dkms and a systemd unit
    installed to run Falco as a service.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该已经通过 dkms 安装了内核模块，并安装了一个 systemd 单元以将 Falco 作为服务运行。
- en: 'Before you start using Falco, you need to enable the Falco systemd service:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Falco 之前，您需要启用 Falco systemd 服务：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Your installation is now complete. The service will automatically start running
    at the next reboot. If you want to start it immediately, just run:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的安装已完成。服务将在下次重启时自动启动运行。如果您希望立即启动它，只需运行：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: From now on, you can manage the Falco service through the functions provided
    by systemd.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，您可以通过 systemd 提供的功能来管理 Falco 服务。
- en: Switching to the eBPF probe
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换到 eBPF 探针
- en: Falco packages use the kernel module by default, and this is usually the best
    choice when installing Falco directly on the host. However, if you have particular
    requirements or other reasons not to use the kernel module, you can easily switch
    to the eBPF probe.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 默认使用内核模块，这通常是直接在主机上安装 Falco 的最佳选择。但是，如果您有特定要求或其他原因不使用内核模块，则可以轻松切换到 eBPF
    探针。
- en: First, make sure you have an eBPF probe installed on your system. You can install
    it using the *falco-driver-loader* script, as explained in [“Managing the Driver”](#managing_the_driver).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保系统上已安装 eBPF 探针。您可以使用 *falco-driver-loader* 脚本安装它，如 [“管理驱动程序”](#managing_the_driver)
    中所述。
- en: 'Then you need to edit the systemd unit file, located at */usr/lib/systemd/user/falco­.ser⁠vice*
    (the path may vary depending on your distro). You can use `systemctl edit falco`
    to modify it. You need to add an option to set the `FALCO_BPF_PROBE` environment
    variable in the `[Service]` section of that file. Also, in the same section, comment
    (or remove) the `ExecStartPre` and `ExecStartPost` options, so the Falco service
    will not load the kernel module anymore. The changes are highlighted in the following
    excerpt from the *falco.service* file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后需要编辑 systemd 单元文件，位置位于 */usr/lib/systemd/user/falco­.ser⁠vice*（路径可能因您的发行版而异）。您可以使用
    `systemctl edit falco` 进行修改。您需要在该文件的 `[Service]` 部分添加一个选项来设置 `FALCO_BPF_PROBE`
    环境变量。此外，在相同部分，注释（或删除）`ExecStartPre` 和 `ExecStartPost` 选项，以便 Falco 服务不再加载内核模块。以下摘录自
    *falco.service* 文件中的更改已经突出显示：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once you’re done, don’t forget to restart the Falco service:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请不要忘记重新启动 Falco 服务：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Falco should now start using the eBPF probe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Falco 应该开始使用 eBPF 探针。
- en: Using a plugin
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用插件
- en: Falco packages come configured for the syscalls instrumentation scenario, so
    the included systemd unit loads the kernel module when Falco starts. However,
    if you’re not using syscalls, you don’t need to load the driver. As described
    in the previous section, to prevent the Falco service from loading the kernel
    module, edit the */usr/lib/systemd/user/falco.service* file and remove (or comment
    out) the `ExecStartPre` and `ExecStartPost` options. Optionally, you can also
    configure the service to run Falco with a less privileged user by modifying the
    value of the `User` option.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 软件包配置为支持系统调用检测场景，因此包含的 systemd 单元在 Falco 启动时加载内核模块。但是，如果您不使用系统调用，则无需加载驱动程序。如前一部分所述，为了防止
    Falco 服务加载内核模块，请编辑 */usr/lib/systemd/user/falco.service* 文件并删除（或注释掉）`ExecStartPre`
    和 `ExecStartPost` 选项。选择性地，您还可以通过修改 `User` 选项的值来配置服务以更少特权的用户运行 Falco。
- en: Next, you’ll need to configure Falco to use the plugin of your choice (we’ll
    explain how to do this in [Chapter 10](ch10.xhtml#configuring_and_running)) and
    restart the Falco service. Falco will then run using the new configuration.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要配置 Falco 来使用您选择的插件（我们将在[第10章](ch10.xhtml#configuring_and_running)中说明如何操作），并重新启动
    Falco 服务。Falco 将使用新配置运行。
- en: Without Using a Package Manager
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不使用软件包管理器的情况下
- en: Installing Falco without using a package manager is quick and easy. This installation
    method is intended for distributions that do not support a compatible package
    manager. We walked through the steps in detail in [Chapter 2](ch02.xhtml#getting_started_with_falco),
    but we’ll give you a short refresher here.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Falco 而不使用软件包管理器快捷简便。此安装方法适用于不支持兼容软件包管理器的发行版。我们在[第2章](ch02.xhtml#getting_started_with_falco)详细介绍了这些步骤，但在这里我们将为您提供简要复习。
- en: 'All you need to do is grab the link to the latest available version of the
    binary package from the [Falco “Download” page](https://oreil.ly/HEvdB), and download
    it into a local folder:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需获取最新可用版本的二进制软件包链接，从[Falco“下载”页面](https://oreil.ly/HEvdB)下载到本地文件夹中：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then extract the package and copy its content to your filesystem’s root:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后解压软件包并将其内容复制到文件系统的根目录：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, if you’re planning to use system calls as your data source, install
    the driver manually before using Falco (you’ll find instructions in the following
    section). You don’t need to install the driver if you want to use a plugin. Also
    note that the binary package does not provide a systemd unit or any other mechanism
    to run Falco when your system starts automatically, so whether to execute Falco
    or run it as a service is entirely up to you.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您计划将系统调用作为数据源，请在使用 Falco 之前手动安装驱动程序（您将在接下来的部分找到说明）。如果要使用插件，则不需要安装驱动程序。还请注意，二进制软件包不提供
    systemd 单元或任何其他机制以在系统启动时自动运行 Falco，因此是否执行 Falco 或将其作为服务运行完全取决于您。
- en: Managing the Driver
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理驱动程序
- en: If you use syscalls as a data source, you will likely need to manage the driver.
    If you installed Falco without a package manager, you’ll have to install the driver
    before using Falco manually. All the available packages provide a helpful script
    called *falco-driver-loader* (introduced in [Chapter 2](ch02.xhtml#getting_started_with_falco))
    that you can use for this purpose. If you followed the instructions earlier in
    this chapter, you should already have it installed on your system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将系统调用作为数据源，可能需要管理驱动程序。如果您未使用软件包管理器安装 Falco，则需要在手动使用 Falco 之前安装驱动程序。所有可用的软件包都提供一个有用的脚本称为*falco-driver-loader*（在[第2章](ch02.xhtml#getting_started_with_falco)介绍），您可以用此脚本来执行此操作。如果您在本章前面的说明中已经按照指示操作，您的系统上应该已经安装了它。
- en: 'Our suggestion is to familiarize yourself with the script by using `--help`
    to get its command-line usage. To do that, just run:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您通过使用 `--help` 来熟悉脚本的命令行用法。只需运行：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The script allows you to perform several actions, including installing a driver
    (either the kernel module or the eBPF probe) by compiling it or downloading it.
    It also allows you to remove a previously installed driver.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本允许您执行多种操作，包括通过编译或下载安装驱动程序（内核模块或eBPF探针）。它还允许您移除先前安装的驱动程序。
- en: 'If you run the script without any options:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行脚本而不带任何选项：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: by default it will try to install a kernel module via dkms. To be precise, it
    will first try to download a prebuilt driver, if one is available for your distribution
    and kernel version. Otherwise, it will try to compile the driver locally. The
    script will also inform you if any required dependencies are missing (for example,
    if dkms or make is not present on your system).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它会尝试通过 dkms 安装内核模块。准确地说，它首先尝试下载预构建的驱动程序，如果你的发行版和内核版本有可用的话。否则，它将尝试在本地编译驱动程序。脚本还会提示你是否缺少任何必需的依赖项（例如，如果系统上没有
    dkms 或 make）。
- en: 'If you want to install the eBPF probe instead, run:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想安装 eBPF 探针，请运行：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Running Falco in a Container
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在容器中运行 Falco
- en: The Falco Project provides several container images that you can use to run
    Falco in a container. Although the Falco container images described in this section
    will work with almost any container runtime, we’ll use Docker in our examples
    for simplicity. If you want to use a different tool, including Kubernetes, you
    can apply the same concepts. Even if you are only interested in deploying Falco
    on Kubernetes, we still advise you to read this section as it presents some essential
    concepts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 项目提供了几个容器镜像，可以用来在容器中运行 Falco。虽然本节描述的 Falco 容器镜像几乎适用于任何容器运行时，但我们在示例中简单地使用
    Docker。如果你想使用其他工具，包括 Kubernetes，可以应用相同的概念。即使你只对在 Kubernetes 上部署 Falco 感兴趣，我们仍建议你阅读本节，因为它介绍了一些重要的概念。
- en: '[Table 9-1](Images/#falco_container_images_hosted_by_the_do) lists the main
    available images, which you can get from the [Falco “Download” page](https://oreil.ly/rkZoV).
    These images contain all the necessary components to install the driver and run
    Falco. Later in this section, we’ll discuss how to use them to support some common
    use cases.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 9-1](Images/#falco_container_images_hosted_by_the_do) 列出了主要的可用镜像，你可以从 [Falco
    “下载”页面](https://oreil.ly/rkZoV) 获取这些镜像。这些镜像包含了安装驱动程序和运行 Falco 所需的所有组件。本节稍后将讨论如何使用它们来支持一些常见的用例。'
- en: Table 9-1\. Falco container images hosted by the docker.io registry
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-1\. docker.io 注册表中托管的 Falco 容器镜像
- en: '| Image name | Description |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 镜像名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *falcosecurity/falco* | This is the default Falco image. It contains Falco,
    the *falco-driver-loader* script, and the building toolchain (required to build
    the driver on the fly). The entry point of this image will call the *falco-driver-loader*
    script to automatically install the driver on the host before running Falco in
    the container. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| *falcosecurity/falco* | 这是默认的 Falco 镜像。它包含了 Falco、*falco-driver-loader* 脚本和构建工具链（用于即时构建驱动程序）。镜像的入口点将调用
    *falco-driver-loader* 脚本，在运行 Falco 之前自动安装驱动程序到主机。 |'
- en: '| *falcosecurity/falco-driver-loader* | This image is similar to the default
    one, but it will not run Falco. The image entry point will only run the *falco-driver-loader*
    script. You can use it when you want to install the driver at a different moment
    or when using the principle of least privilege (see [“Least privileged mode”](#least_privileged_mode)).
    Since this image alone cannot run Falco, use it in combination with another image,
    like *falcosecurity/falco-no-driver*. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| *falcosecurity/falco-driver-loader* | 这个镜像与默认镜像类似，但不会运行 Falco。镜像的入口点只会运行
    *falco-driver-loader* 脚本。当你想在不同的时机安装驱动程序或者使用最少权限原则（参见[“最少权限模式”](#least_privileged_mode)）时，可以使用这个镜像。由于这个镜像本身无法运行
    Falco，所以需要与其他镜像结合使用，比如 *falcosecurity/falco-no-driver*。 |'
- en: '| *falcosecurity/falco-no-driver* | This alternative to the default image only
    contains Falco, so it cannot install the driver. Use it when using the principle
    of least privilege or when your data source does not need a driver (for example,
    when using a plugin). |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| *falcosecurity/falco-no-driver* | 这是默认镜像的替代方案，只包含 Falco，因此无法安装驱动程序。当使用最少权限原则或者数据源不需要驱动程序时（例如使用插件时），可以使用它。
    |'
- en: 'Different tags are available for each distributed image. Tags allow you to
    choose a specific Falco version: for example, *falcosecurity/falco:0.32.0* contains
    Falco’s 0.32.0 release. The *:latest* tag points to the latest released version
    of Falco.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分发镜像都有不同的标签可供选择特定版本的 Falco。例如，*falcosecurity/falco:0.32.0* 包含了 Falco 的 0.32.0
    发布版本。*:latest* 标签指向最新发布的 Falco 版本。
- en: If you want to experiment with a not-yet-released version of Falco, the *:master*
    tag ships the latest available development version. An automatic process builds
    and publishes images with this tag every time new code changes are merged into
    the master branch of Falco’s GitHub repository. This means it is not a stable
    release—don’t use it in production unless you want to try an experimental feature
    or debug a particular issue. Generally, we suggest always using the *:latest*
    tag, since it ships the latest Falco version and ruleset updates.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试一个尚未发布的Falco版本，*:master*标签会发布最新的可用开发版本。自动流程会在每次将新代码合并到Falco GitHub存储库的主分支时构建和发布带有此标签的镜像。这意味着它不是一个稳定版本——除非您想尝试实验性功能或调试特定问题，否则不要在生产环境中使用它。通常，我们建议始终使用*:latest*标签，因为它包含最新的Falco版本和规则集更新。
- en: 'Next, we will describe how to use these images in the two common scenarios
    we’ve been discussing: syscall instrumentation, which requires a driver, and using
    a plugin as a data source, which does not.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将描述如何在我们讨论过的两种常见场景中使用这些镜像：系统调用检测，需要驱动程序；使用插件作为数据源则不需要。
- en: Syscall Instrumentation Scenario
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统调用检测场景
- en: A Falco driver (either a kernel module or an eBPF probe) installed directly
    on the host is required for syscall instrumentation. Falco needs to run with enough
    privileges to interact with the driver; of course, if you want to use a container
    image to install the driver, that image needs to run with full privileges.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用检测需要在主机上直接安装Falco驱动程序（可以是内核模块或eBPF探针）。Falco需要足够的权限来与驱动程序交互；当然，如果你想使用一个容器镜像来安装驱动程序，该镜像需要以完全权限运行。
- en: 'The Falco Project provides two modes for installing the driver on the fly and
    then running Falco in a container. The first and simplest mode uses just one container
    image with full privileges. The second uses two images: one image that temporarily
    runs with full privileges just to install the driver, and another image that then
    runs Falco with lesser privileges. The second approach allows enhanced security
    since the long-running container gets a restricted set of privileges, making life
    harder for a possible attacker. We recommend using least privileged mode to run
    Falco in a container.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Falco项目提供两种模式来在运行时安装驱动程序，然后在容器中运行Falco。第一种和最简单的模式只使用一个具有完全权限的容器镜像。第二种使用两个镜像：一个镜像临时以完全权限运行以安装驱动程序，另一个镜像然后以较低权限运行Falco。第二种方法允许增强安全性，因为长时间运行的容器只获得受限的权限集，使潜在攻击者的生活更加困难。我们建议在容器中运行Falco时使用最低权限模式。
- en: Fully privileged mode
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全权限模式
- en: 'Running Falco in Docker with full privileges is quite straightforward. You
    just have to pull the default image:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker中以完全权限运行Falco非常简单。您只需拉取默认镜像：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then run Falco with the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令运行Falco：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command will install the driver on the fly before running Falco. The container
    image uses the kernel module by default. If you want to use the eBPF probe instead,
    just add the `-e FALCO_BPF_PROBE=""` option and remove `-v /dev:/host/dev` (only
    the kernel module requires */dev*).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在运行Falco之前动态安装驱动程序。默认情况下，容器镜像使用内核模块。如果您想使用eBPF探针，请添加`-e FALCO_BPF_PROBE=""`选项并删除`-v
    /dev:/host/dev`（只有内核模块需要*/dev*）。
- en: As you can see, aside from the `--privileged` option, the preceding command
    mounts a set of paths from the host into the container (each `-v` option is a
    bind mount).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，除了`--privileged`选项外，上述命令还将一组路径从主机挂载到容器中（每个`-v`选项都是一个绑定挂载）。
- en: Specifically, the `-v /var/run/docker.sock:/host/var/run/docker.sock` option
    shares the Docker socket, so Falco can use Docker to obtain container metadata
    (as described in [Chapter 5](ch05.xhtml#data_enrichment), where we discussed Falco’s
    data enrichment techniques). You can add similar options for each container runtime
    available on your system. For example, if you also have containerd, include `-v
    /run/containerd/contain⁠erd​.sock:/host/run/containerd/containerd.sock`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，`-v /var/run/docker.sock:/host/var/run/docker.sock`选项共享了Docker套接字，因此Falco可以使用Docker获取容器元数据（如第5章中讨论的Falco数据丰富技术）。您可以为系统上可用的每个容器运行时添加类似的选项。例如，如果还有containerd，则包括`-v
    /run/containerd/containerd.sock:/host/run/containerd/containerd.sock`。
- en: Falco requires sharing */dev* and */proc* to interface with the driver and the
    system, respectively. Other shared paths are needed to install the driver.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Falco需要共享*/dev*和*/proc*以与驱动程序和系统接口，其他共享路径用于安装驱动程序。
- en: Least privileged mode
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最低权限模式
- en: This running mode follows the [principle of least privilege](https://oreil.ly/PKosx)
    for enhanced security. Although this mode is the recommended way to run Falco
    in a container, it might not necessarily work for all systems and configurations.
    We advise you to give it a try anyway and fall back to the fully privileged mode
    only if this does not fit your environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此运行模式遵循[最小权限原则](https://oreil.ly/PKosx)以增强安全性。虽然此模式是在容器中运行 Falco 的推荐方式，但并不一定适用于所有系统和配置。我们建议您尝试并根据实际情况回退到完全权限模式。
- en: As noted, this approach uses two different container images. The first step,
    which requires full privileges, is to install the driver using the *falcosecurity/falco-driver-loader*
    image. You’ll need to do this before running Falco for the first time, and if
    you want to upgrade the driver at any point. (Alternatively, as explained earlier,
    you can install the driver directly on the host using the *falco-driver-loader*
    script shipped with the binary package. If you did so, skip this step.)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如提到的，此方法使用两种不同的容器镜像。第一步，需要完全权限，是使用 *falcosecurity/falco-driver-loader* 镜像安装驱动程序。在首次运行
    Falco 之前，以及在任何时候想要升级驱动程序时，都需要这样做。（或者，如前所述，您可以直接在主机上使用随二进制软件包提供的 *falco-driver-loader*
    脚本安装驱动程序。如果已这样做，请跳过此步骤。）
- en: 'To install the driver using a container image, pull the image first:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用容器镜像安装驱动程序，请首先拉取该镜像：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then run the installation command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行安装命令：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This command installs the kernel module by default. If you want to use the eBPF
    probe instead, just add the `-e FALCO_BPF_PROBE=""` option.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令默认安装内核模块。如果想要使用 eBPF 探针，请添加 `-e FALCO_BPF_PROBE=""` 选项。
- en: 'The last step is to run Falco. Since the driver is already installed, you will
    just need to use the *falcosecurity/falco-no-driver* image. So, pull it first:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是运行 Falco。由于驱动程序已安装，您只需使用 *falcosecurity/falco-no-driver* 镜像即可。因此，首先拉取它：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then run Falco:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行 Falco：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you use another container runtime, customize this command by adding a `-v`
    option accordingly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用其他容器运行时，请根据需要添加 `-v` 选项来自定义此命令。
- en: 'Finally, there are some caveats when using the eBPF probe. You cannot use least
    privileged mode unless you have at least kernel version 5.8\. This is because,
    with previous kernel versions, loading the eBPF probe required the `--privileged`
    flag. If you are running a kernel version equal to or greater than 5.8, you can
    use the `SYS_BPF` capability to overcome this issue by customizing the command
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在使用 eBPF 探针时有一些注意事项。除非您的内核版本至少为 5.8，否则无法使用最低权限模式。这是因为在之前的内核版本中，加载 eBPF 探针需要
    `--privileged` 标志。如果您的内核版本等于或大于 5.8，您可以使用 `SYS_BPF` 权限来解决此问题，方法是按照以下方式自定义命令：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Note that on systems with the AppArmor Linux Security Module (LSM) enabled,
    you will also need to pass the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在启用了 AppArmor Linux 安全模块（LSM）的系统上，您还需要传递以下内容：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-130
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Depending on the Falco version you are using and your environment, you might
    need to customize the commands described in this section; refer to the [online
    documentation](https://oreil.ly/TXTge).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您使用的 Falco 版本和环境，可能需要自定义本节中描述的命令；请参考[在线文档](https://oreil.ly/TXTge)。
- en: Plugin Scenario
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件场景
- en: When you’re using a plugin as your data source, there’s no need to install a
    driver, nor will Falco need full privileges to run, so we recommend you use the
    *falcosecur⁠ity/​falco-no-driver* image for this scenario. Whatever container
    image you choose, the default Falco configuration it contains won’t work out of
    the box; you’ll have to give Falco the required configuration for the plugin.
    You can do that by using an external configuration file and mounting it in the
    container.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将插件用作数据源时，无需安装驱动程序，也不需要 Falco 具有完全权限运行，因此我们建议您在此场景中使用 *falcosecur⁠ity/​falco-no-driver*
    镜像。无论选择哪种容器镜像，它所包含的默认 Falco 配置都无法直接使用；您必须为插件提供所需的配置。您可以通过使用外部配置文件并将其挂载到容器中来完成这一操作。
- en: As a preparation step, you’ll have to create a local copy of [*falco.yaml*](https://oreil.ly/E31wy)
    and modify it according to your plugin configuration. We will explain how to do
    that in the next chapter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作为准备步骤，您需要创建一个本地副本的 [*falco.yaml*](https://oreil.ly/E31wy) 并根据您的插件配置进行修改。我们将在下一章节中说明如何操作。
- en: 'Once you’ve prepared your custom *falco.yaml*, to run Falco, use the following
    command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备好自定义的 *falco.yaml*，要运行 Falco，请使用以下命令：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you want to use a plugin not shipped in the default Falco distribution,
    you will have to mount the plugin file and its rules file in the container, too.
    For example, to mount *libmyplugin.so* and *myplugin_rules.yaml*, add the following
    options to the preceding command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用默认 Falco 发行版中未包含的插件，您将需要在容器中挂载插件文件和其规则文件。例如，要挂载 *libmyplugin.so* 和 *myplugin_rules.yaml*，请将以下选项添加到前述命令中：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Deploying to a Kubernetes Cluster
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 Kubernetes 集群
- en: 'One of the most common Falco use cases is securing clusters, so deploying Falco
    to Kubernetes is perhaps the most important installation method to be aware of.
    The Falco Project recommends two approaches for this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 最常见的用例之一是保护集群，因此将 Falco 部署到 Kubernetes 可能是您需要了解的最重要的安装方法。Falco 项目推荐了两种方法：
- en: Helm
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Helm
- en: The first installation method uses Helm, a very popular tool to install and
    manage software built for Kubernetes. The Falco community provides and maintains
    a Helm chart for Falco and other tools that integrate with Falco. Installing Falco
    using the provided chart is straightforward and mostly automatic.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种安装方法使用 Helm，这是一个非常流行的工具，用于在 Kubernetes 上安装和管理软件。Falco 社区提供并维护了一个 Helm 图表，用于
    Falco 及其与 Falco 集成的其他工具。使用提供的图表安装 Falco 很简单，而且大部分是自动化的。
- en: Kubernetes manifest files
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 清单文件
- en: The other installation method, geared toward flexibility, is based on a set
    of Kubernetes manifest files. These files provide default installation settings,
    which users can customize based on their needs. Although this approach requires
    a bit more effort, it permits the installation of Falco on virtually any Kubernetes
    cluster without the need for extra tools.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种安装方法，更加灵活，基于一组 Kubernetes 清单文件。这些文件提供了默认的安装设置，用户可以根据需要进行自定义。虽然这种方法需要更多的工作量，但它允许在几乎任何
    Kubernetes 集群上安装 Falco，而无需额外的工具。
- en: Both approaches are solid, and you should select the one that best suits your
    environment and your organization’s requirements. In the following subsections,
    we will walk you through each of them. The only requirement is having a Kubernetes
    cluster installed and running.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都很可靠，您应选择最适合您的环境和组织需求的方法。在接下来的子章节中，我们将为您详细介绍每种方法。唯一的要求是已安装并运行一个 Kubernetes
    集群。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Note
- en: The installation methods for Kubernetes described in this section use the default
    Falco container image discussed in [“Running Falco in a Container”](#running_falco_in_a_container).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述的 Kubernetes 安装方法使用了讨论中的默认 Falco 容器镜像 [“在容器中运行 Falco”](#running_falco_in_a_container)。
- en: Using Helm
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Helm
- en: If you prefer a fully automated installation process or are already using Helm
    in your environment, this installation method is for you. Having [Helm](https://helm.sh)
    installed is a prerequisite; for instructions, see the [online documentation](https://oreil.ly/YCiLB).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢完全自动化的安装过程或者已经在您的环境中使用 Helm，那么这种安装方法适合您。安装 [Helm](https://helm.sh) 是先决条件；有关说明，请参阅
    [在线文档](https://oreil.ly/YCiLB)。
- en: Falco’s Helm chart will add Falco to all nodes in your cluster using a DaemonSet.
    Then each deployed Falco Pod will try to install the driver on its own node. That
    is the default configuration that reflects the most common scenario, syscall instrumentation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 的 Helm 图表将通过 DaemonSet 将 Falco 添加到集群中的所有节点。然后，每个部署的 Falco Pod 将尝试在其自己的节点上安装驱动程序。这是反映最常见情况的默认配置，即系统调用仪器化。
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: Falco Pods internally use *falco-driver-loader*, which tries to download a prebuilt
    driver; failing that, it will build the driver on the fly. Usually, no action
    is required. If you notice that the Falco Pods are continuously restarting after
    being deployed, the process was probably unable to install the driver. This issue
    usually happens when a prebuilt driver is unavailable for your distribution or
    kernel and no kernel headers are available on the host. To build the driver, kernel
    headers must be installed on the host. You can fix the issue by manually installing
    the kernel headers and then deploying Falco again.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Falco Pod 内部使用 *falco-driver-loader*，它尝试下载预构建的驱动程序；如果失败，将动态构建驱动程序。通常情况下不需要任何操作。如果您注意到
    Falco Pod 在部署后不断重启，那么可能是无法安装驱动程序。这种问题通常发生在您的发行版或内核中无法获取预构建的驱动程序，并且主机上没有内核头文件的情况下。要构建驱动程序，必须在主机上安装内核头文件。您可以通过手动安装内核头文件，然后再次部署
    Falco 来解决此问题。
- en: 'Helm uses the Kubernetes context provided by [kubectl](https://oreil.ly/S7tqe)
    to access your cluster. Before installing Falco with Helm, ensure that your local
    configuration points to the proper context. You can check that by running:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Helm使用由[kubectl](https://oreil.ly/S7tqe)提供的Kubernetes上下文来访问您的集群。在使用Helm安装Falco之前，请确保您的本地配置指向正确的上下文。您可以通过运行以下命令来检查：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If the context is not pointing to your targeted cluster or kubectl cannot access
    your cluster, you will have to address this issue. Otherwise, you can proceed
    with the next step.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上下文未指向您的目标集群或kubectl无法访问您的集群，则必须解决此问题。否则，您可以继续进行下一步操作。
- en: 'Before installing the chart, add Falco’s Helm repository so that your local
    Helm installation can find the Falco chart:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装图表之前，请添加Falco的Helm存储库，以便您的本地Helm安装程序可以找到Falco图表：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Running this command is usually a one-time operation. To get the latest information
    about the Falco chart, use:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令通常是一次性操作。要获取关于Falco图表的最新信息，请使用：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Execute this command whenever you want to install and update Falco with Helm.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您想要使用Helm安装和更新Falco时，请执行此命令。
- en: 'The next and final step is actually to install the chart by running:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个也是最后一步是运行以下命令来安装图表：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The chart installs the kernel module by default. If you want to use the eBPF
    probe instead, just append `--set ebpf.enabled=true` to this command.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，该图表安装内核模块。如果您想改用eBPF探针，则只需在该命令后附加`--set ebpf.enabled=true`。
- en: 'And you’re done! After a while, Falco’s Pods will show up in your cluster.
    You can use the following command to check whether they are ready:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！过一段时间，Falco的Pod将出现在您的集群中。您可以使用以下命令检查它们是否准备就绪：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The chart installs Falco for the default scenario (syscall instrumentation),
    as per the default settings. The Helm installation process for other scenarios
    is very similar; just provide the appropriate configuration. We will discuss how
    to customize your Falco deployment in [Chapter 10](ch10.xhtml#configuring_and_running).
    You can find more information about Falco’s chart configuration in its [online
    documentation](https://oreil.ly/pcJWP).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表按照默认设置为默认场景（系统调用仪器化）安装Falco。其他场景的Helm安装过程非常类似；只需提供适当的配置即可。我们将在[第10章](ch10.xhtml#configuring_and_running)讨论如何自定义您的Falco部署。您可以在其[在线文档](https://oreil.ly/pcJWP)中找到有关Falco图表配置的更多信息。
- en: Using Manifests
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用清单
- en: Kubernetes manifests are JSON or YAML files (mainly YAML) that contain the specifications
    for one or more Kubernetes API objects and describe your application and its configurations.
    The kubectl command-line utility lets you deploy your workload in Kubernetes using
    these files. Projects often provide almost-ready-to-use example manifests, but
    you’ll usually need to adapt them to your needs.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes清单是JSON或YAML文件（主要是YAML），包含一个或多个Kubernetes API对象的规格，并描述您的应用程序及其配置。kubectl命令行实用程序允许您使用这些文件在Kubernetes中部署工作负载。项目通常提供几乎准备好使用的示例清单，但通常需要根据您的需求进行调整。
- en: Since Falco supports very different scenarios and environments, The Falco Project
    does not officially provide manifests for all use cases. However, for the syscall
    instrumentation scenario, you can use the [Falco example manifests](https://oreil.ly/qWW1w)
    (listed in [Table 9-2](#example_manifest_files_for_falco)) as a starting point
    to make your customized manifests.^([1](ch09.xhtml#ch01fn10))
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Falco支持非常不同的场景和环境，Falco项目并未为所有用例正式提供清单。但是，对于系统调用仪器化场景，您可以使用[Falco示例清单](https://oreil.ly/qWW1w)（列在[表 9-2](#example_manifest_files_for_falco)中）作为起点，以制作您的定制清单。^([1](ch09.xhtml#ch01fn10))
- en: Table 9-2\. Example manifest files for Falco
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-2\. Falco示例清单文件
- en: '| Filename | Description |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 文件名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *daemonset.yaml* | Specifies a [DaemonSet](https://oreil.ly/9YwAV) so that
    a copy of the Falco Pod will run on each node (required by the syscall instrumentation
    scenario). The [Pod specification](https://oreil.ly/WRtRb) uses the *falcosecurity/falco*
    container image. It also includes all settings needed to run the image in this
    scenario, similar to those described in [“Running Falco in a Container”](#running_falco_in_a_container).
    |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| *daemonset.yaml* | 指定[DaemonSet](https://oreil.ly/9YwAV)，以便每个节点上运行Falco Pod的副本（系统调用仪器化场景所需）。[Pod规范](https://oreil.ly/WRtRb)使用*falcosecurity/falco*容器映像。它还包括在此场景中运行映像所需的所有设置，类似于[“在容器中运行Falco”](#running_falco_in_a_container)中描述的设置。'
- en: '| *configmap.yaml* | Specifies a [ConfigMap](https://oreil.ly/vTAdd) containing
    the default *falco.yaml* file and rules files. Modify it according to your needs.
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| *configmap.yaml* | 指定了包含默认*falco.yaml*文件和规则文件的[ConfigMap](https://oreil.ly/vTAdd)。根据您的需求进行修改。'
- en: '| *serviceaccount.yaml* | Specifies a [ServiceAccount](https://oreil.ly/sXkl9)
    for running Falco’s Pods. Falco requires this to talk with the Kubernetes API.
    You usually don’t need to alter it, unless you want to change the service account
    name. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| *serviceaccount.yaml* | 指定了一个[ServiceAccount](https://oreil.ly/sXkl9)，用于运行Falco的Pod。Falco需要此账户与Kubernetes
    API通信。通常情况下，您不需要修改它，除非您想更改服务账户名称。'
- en: '| *clusterrole.yaml* | Specifies a [ClusterRole](https://oreil.ly/gWjN4), including
    the role-based access control (RBAC) authorizations required by Falco to talk
    with the Kubernetes API. Don’t change the list of permissions needed, or Falco
    will not enrich the Kubernetes metadata correctly. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| *clusterrole.yaml* | 指定了一个[ClusterRole](https://oreil.ly/gWjN4)，包括Falco与Kubernetes
    API通信所需的基于角色的访问控制（RBAC）授权。不要更改所需权限列表，否则Falco将无法正确丰富Kubernetes元数据。'
- en: '| *clusterrolebinding.yaml* | Specifies a [ClusterRoleBinding](https://oreil.ly/PTEcU)
    that grants the permissions defined in *clusterrole.yaml* to the service account
    defined in *serviceaccount.yaml*. You usually won’t need to change this, unless
    you’ve changed the service account or the cluster role name in the other files.
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| *clusterrolebinding.yaml* | 指定了一个[ClusterRoleBinding](https://oreil.ly/PTEcU)，将*clusterrole.yaml*中定义的权限授予*serviceaccount.yaml*中定义的服务账户。通常情况下，您不需要更改此项，除非您已更改了其他文件中的服务账户或集群角色名称。'
- en: 'Once you’ve modified the manifest files according to your needs, to apply them
    to Kubernetes (that is, to deploy Falco to Kubernetes) just run the following
    command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦根据您的需求修改了清单文件，要将它们应用到Kubernetes（即部署Falco到Kubernetes），只需运行以下命令：
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Falco’s Pods should show up in your cluster after a while. To check whether
    they are ready, use:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，Falco的Pod应该会出现在您的集群中。要检查它们是否准备就绪，请使用：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If everything went well, Falco is now up and running in your production cluster—and
    you have learned how to customize your Falco deployment. Congratulations!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，Falco现在已经在您的生产集群中运行起来了，并且您已经学会如何自定义您的Falco部署。恭喜！
- en: Conclusion
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter introduced the different installation methods available for Falco
    and explained the difference between the two most common installation scenarios.
    However, in some cases, your installation will need specific configurations or
    customizations. The next chapter gives you all the complementary information you
    need to finally run Falco in production and completely control your Falco installation.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Falco的不同安装方法，并解释了两种最常见安装场景之间的区别。然而，在某些情况下，您的安装将需要特定的配置或自定义。下一章将为您提供所有必要的补充信息，以便最终在生产环境中运行Falco并完全控制您的Falco安装。
- en: ^([1](ch09.xhtml#ch01fn10-marker)) The actual URLs of the Falco manifest example
    files for Kubernetes may change from time to time, but you can always find links
    to them in the [official documentation](https://oreil.ly/P5BUa). Falco’s Helm
    chart can generate those files, too. Surprisingly, The Falco Project uses this
    Helm functionality to automatically publish up-to-date manifest example files
    under the [Falcosecurity GitHub organization](https://oreil.ly/6QhH3).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.xhtml#ch01fn10-marker)) Kubernetes中Falco清单示例文件的实际URL可能会不时更改，但您始终可以在[官方文档](https://oreil.ly/P5BUa)中找到它们的链接。Falco的Helm图表也可以生成这些文件。令人惊讶的是，Falco项目使用此Helm功能自动发布最新的清单示例文件，位于[Falcosecurity
    GitHub组织](https://oreil.ly/6QhH3)下。
