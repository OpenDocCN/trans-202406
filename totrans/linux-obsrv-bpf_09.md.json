["```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc main() {\n    log.Fatalf(\"%v\", http.ListenAndServe(\":80\", nil))\n}\n```", "```\n$ go build -o capabilities main.go\n$ ./capabilities\n```", "```\n2019/04/25 23:17:06 listen tcp :80: bind: permission denied\nexit status 1\n```", "```\n# capsh --caps='cap_net_bind_service+eip cap_setpcap,cap_setuid,cap_setgid+ep' \\\n    --keep=1 --user=\"nobody\" \\\n    --addamb=cap_net_bind_service -- -c \"./capabilities\"\n```", "```\n# ss -tulpn -e -H | cut -d' ' -f17-\n128    *:80    *:*\nusers:((\"capabilities\",pid=30040,fd=3)) uid:65534 ino:11311579 sk:2c v6only:0\n```", "```\n /usr/share/bcc/tools/capable\nTIME      UID    PID    TID    COMM             CAP  NAME                 AUDIT\n10:12:53  0      424    424    systemd-udevd    12   CAP_NET_ADMIN        1\n10:12:57  0      1103   1101   timesync         25   CAP_SYS_TIME         1\n10:12:57  0      19545  19545  capabilities     10   CAP_NET_BIND_SERVICE 1\n```", "```\nbpftrace -e \\\n    'kprobe:cap_capable {\n time(\"%H:%M:%S  \");\n printf(\"%-6d %-6d %-16s %-4d %d\\n\", uid, pid, comm, arg2, arg3);\n }' \\\n    | grep -i capabilities\n```", "```\n12:01:56  1000   13524  capabilities     21   0\n12:01:56  1000   13524  capabilities     21   0\n12:01:56  1000   13524  capabilities     21   0\n12:01:56  1000   13524  capabilities     12   0\n12:01:56  1000   13524  capabilities     12   0\n12:01:56  1000   13524  capabilities     12   0\n12:01:56  1000   13524  capabilities     12   0\n12:01:56  1000   13524  capabilities     10   1\n```", "```\n/* Allows binding to TCP/UDP sockets below 1024 */\n/* Allows binding to ATM VCIs below 32 */\n\n#define CAP_NET_BIND_SERVICE 10\n```", "```\ndocker run -it --rm --cap-add=NET_ADMIN ubuntu ip link add dummy0 type dummy\n```", "```\nstruct seccomp_data {\n\tint nr;\n\t__u32 arch;\n\t__u64 instruction_pointer;\n\t__u64 args[6];\n};\n```", "```\n#include <errno.h>\n#include <linux/audit.h>\n#include <linux/bpf.h>\n#include <linux/filter.h>\n#include <linux/seccomp.h>\n#include <linux/unistd.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/prctl.h>\n#include <unistd.h>\n```", "```\ncat /proc/config.gz| zcat  | grep -i CONFIG_SECCOMP\n```", "```\nstatic int install_filter(int nr, int arch, int error) {\n  struct sock_filter filter[] = {\n    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, (offsetof(struct seccomp_data, arch))),\n    BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, arch, 0, 3),\n    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, (offsetof(struct seccomp_data, nr))),\n    BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, nr, 0, 1),\n    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)),\n    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),\n  };\n```", "```\nif (arch != AUDIT_ARCH_X86_64) {\n    return SECCOMP_RET_ALLOW;\n}\nif (nr == __NR_write) {\n    return SECCOMP_RET_ERRNO;\n}\nreturn SECCOMP_RET_ALLOW;\n```", "```\n  struct sock_fprog prog = {\n    .len = (unsigned short)(sizeof(filter) / sizeof(filter[0])),\n    .filter = filter,\n  };\n```", "```\n  if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog)) {\n    perror(\"prctl(PR_SET_SECCOMP)\");\n    return 1;\n  }\n  return 0;\n}\n```", "```\nint main(int argc, char const *argv[]) {\n  if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {\n    perror(\"prctl(NO_NEW_PRIVS)\");\n    return 1;\n  }\n  install_filter(__NR_write, AUDIT_ARCH_X86_64, EPERM);\n  return system(argv[1]);\n}\n```", "```\nclang main.c -o filter-write\n```", "```\nls -la\ntotal 36\ndrwxr-xr-x 2 fntlnz users  4096 Apr 28 21:09 .\ndrwxr-xr-x 4 fntlnz users  4096 Apr 26 13:01 ..\n-rwxr-xr-x 1 fntlnz users 16800 Apr 28 21:09 filter-write\n-rw-r--r-- 1 fntlnz users    19 Apr 28 21:09 .gitignore\n-rw-r--r-- 1 fntlnz users  1282 Apr 28 21:08 main.c\n```", "```\n./filter-write \"ls -la\"\n```", "```\nstrace -f ./filter-write \"ls -la\"\n```", "```\n[pid 25099] write(2, \"ls: \", 4)         = -1 EPERM (Operation not permitted)\n[pid 25099] write(2, \"write error\", 11) = -1 EPERM (Operation not permitted)\n[pid 25099] write(2, \"\\n\", 1)           = -1 EPERM (Operation not permitted)\n```", "```\nextern int security_bpf(int cmd, union bpf_attr *attr, unsigned int size);\nextern int security_bpf_map(struct bpf_map *map, fmode_t fmode);\nextern int security_bpf_prog(struct bpf_prog *prog);\nextern int security_bpf_map_alloc(struct bpf_map *map);\nextern void security_bpf_map_free(struct bpf_map *map);\nextern int security_bpf_prog_alloc(struct bpf_prog_aux *aux);\nextern void security_bpf_prog_free(struct bpf_prog_aux *aux);\n```"]