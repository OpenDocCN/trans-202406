- en: Chapter 16\. Lists and Generated Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of CSS layout, lists are an interesting case. The items in a list
    are simply block boxes, but with an extra bit that doesn’t really participate
    in the document layout hanging off to one side. With an ordered list, that extra
    bit contains a series of increasing numbers (or letters) that are calculated and
    mostly formatted by the user agent, not the author. Taking a cue from the document
    structure, the user agent generates the numbers and their basic presentation.
  prefs: []
  type: TYPE_NORMAL
- en: With CSS, you can define your own counting patterns and formats, and associate
    those counters with *any* element, not just ordered list items. Furthermore, this
    basic mechanism makes it possible to insert other kinds of content, including
    text strings, attribute values, or even external resources, into a document. Thus,
    it is possible to use CSS to insert link icons, editorial symbols, and more into
    a design without having to create extra markup.
  prefs: []
  type: TYPE_NORMAL
- en: To see how all these list options fit together, we’ll explore basic list styling
    before moving on to examine the generation of content and counters.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a sense, almost anything that isn’t narrative text can be considered a list.
    The US Census, the solar system, my family tree, a restaurant menu, and even all
    of the friends you’ve ever had can be represented as a list, or perhaps as a list
    of lists. These many variations make lists fairly important, which is why it’s
    a shame that list styling in CSS isn’t more sophisticated.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest (and best-supported) way to affect a list’s styles is to change
    its marker type. The *marker* of a list item is, for example, the bullet that
    appears next to each item in an unordered list. In an ordered list, the marker
    could be a letter, a number, or a symbol from some other counting system. You
    can even replace the markers with images. All of these are accomplished using
    the different list-style properties.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To change the type of marker used for a list’s items, use the `list-style-type`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a string of text as the marker, such as `list-style-type: "▷"`.
    In addition, <*`counter-style`*> stands in for a long list of possible keywords
    or a custom-defined counter style defined with `@counter-style` (see [“Defining
    Counting Patterns”](#counter-patterns)). A few examples of these list style types
    are shown in [Figure 16-1](#liststyletype).'
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1601](assets/css5_1601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-1\. A sampling of list style types
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The keywords (plus some browser-specific extras) are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `afar` † `amaric` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`amaric-abegede` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`arabic-indic`'
  prefs: []
  type: TYPE_NORMAL
- en: '`armenian`'
  prefs: []
  type: TYPE_NORMAL
- en: '`asterisks` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`bengali`'
  prefs: []
  type: TYPE_NORMAL
- en: '`binary` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`cambodian`'
  prefs: []
  type: TYPE_NORMAL
- en: '`circle`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cjk-decimal` *'
  prefs: []
  type: TYPE_NORMAL
- en: '`cjk-earthly-branch`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cjk-heavenly-stem`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cjk-ideographic`'
  prefs: []
  type: TYPE_NORMAL
- en: '`decimal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`decimal-leading-zero`'
  prefs: []
  type: TYPE_NORMAL
- en: '`devanagari`'
  prefs: []
  type: TYPE_NORMAL
- en: '`disc`'
  prefs: []
  type: TYPE_NORMAL
- en: '`disclosure-closed`'
  prefs: []
  type: TYPE_NORMAL
- en: '`disclosure-open`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-abegede` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-abegede-am-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-abegede-gez` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-abegede-ti-er` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-abegede-ti-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame` ‡, -'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-aa-er` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-aa-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-am` -'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-am-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-gez` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-om-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ethiopic-halehame-sid-et` † `ethiopic-halehame-so-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-ti-er` -'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-ti-et` -'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-halehame-tig` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`ethiopic-numeric`'
  prefs: []
  type: TYPE_NORMAL
- en: '`footnotes` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`georgian`'
  prefs: []
  type: TYPE_NORMAL
- en: '`gujarati`'
  prefs: []
  type: TYPE_NORMAL
- en: '`gurmukhi`'
  prefs: []
  type: TYPE_NORMAL
- en: '`hangul` -'
  prefs: []
  type: TYPE_NORMAL
- en: '`hangul-consonant` -'
  prefs: []
  type: TYPE_NORMAL
- en: '`hebrew`'
  prefs: []
  type: TYPE_NORMAL
- en: '`hiragana`'
  prefs: []
  type: TYPE_NORMAL
- en: '`hiragana-iroha`'
  prefs: []
  type: TYPE_NORMAL
- en: '`japanese-formal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`japanese-informal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`kannada`'
  prefs: []
  type: TYPE_NORMAL
- en: '`katakana`'
  prefs: []
  type: TYPE_NORMAL
- en: '`katakana-iroha`'
  prefs: []
  type: TYPE_NORMAL
- en: '`khmer`'
  prefs: []
  type: TYPE_NORMAL
- en: '`korean-hangul-formal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`korean-hanja-formal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`korean-hanja-informal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`lao`'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-alpha`'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-armenian`'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-greek`'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-hexadecimal` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-latin`'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-norwegian` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower-roman`'
  prefs: []
  type: TYPE_NORMAL
- en: '`malayalam`'
  prefs: []
  type: TYPE_NORMAL
- en: '| `mongolian` `myanmar`'
  prefs: []
  type: TYPE_NORMAL
- en: '`octal` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`oriya`'
  prefs: []
  type: TYPE_NORMAL
- en: '`oromo` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`persian`'
  prefs: []
  type: TYPE_NORMAL
- en: '`sidama`'
  prefs: []
  type: TYPE_NORMAL
- en: '`simp-chinese-formal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`simp-chinese-informal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`somali` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`square`'
  prefs: []
  type: TYPE_NORMAL
- en: '`symbols` *'
  prefs: []
  type: TYPE_NORMAL
- en: '`tamil` *'
  prefs: []
  type: TYPE_NORMAL
- en: '`telugu`'
  prefs: []
  type: TYPE_NORMAL
- en: '`thai`'
  prefs: []
  type: TYPE_NORMAL
- en: '`tibetan`'
  prefs: []
  type: TYPE_NORMAL
- en: '`tigre` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`tigrinya-er` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`tigrinya-er-abegede` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`tigrinya-et` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`tigrinya-et-abegede` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`trad-chinese-formal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`trad-chinese-informal`'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-alpha`'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-armenian`'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-greek`'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-hexadecimal` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-latin`'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-norwegian` †'
  prefs: []
  type: TYPE_NORMAL
- en: '`upper-roman`'
  prefs: []
  type: TYPE_NORMAL
- en: '`urdu` -'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| † WebKit only |'
  prefs: []
  type: TYPE_TB
- en: '| ‡ All engines *except* WebKit |'
  prefs: []
  type: TYPE_TB
- en: '| * Mozilla only |'
  prefs: []
  type: TYPE_TB
- en: '| - Requires `-moz-` prefix in Firefox |'
  prefs: []
  type: TYPE_TB
- en: 'If you provide a counter style that the browser does not recognize, such as
    declaring `list-style-type: lower-hexadecimal` and loading the page, some browsers,
    including Firefox, Edge, and Chrome, will assume `decimal` instead. Safari will
    ignore values it does not understand as invalid.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `list-style-type` property, as well as all other list-related properties,
    can be applied only to an element that has a `display` of `list-item`, but CSS
    doesn’t distinguish between ordered and unordered list items. Thus, you can set
    an ordered list to use discs instead of numbers. In fact, the default value of
    `list-style-type` is `disc`, so you might theorize that without explicit declarations
    to the contrary, all lists (ordered or unordered) will use discs as the marker
    for each item. This would be logical, but, as it turns out, it’s up to the user
    agent to decide. Even if the user agent doesn’t have a predefined rule such as
    `ol {list-style-type: decimal;}`, it may prohibit ordered markers from being applied
    to unordered lists, and vice versa. You can’t count on this, so be careful.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to suppress the display of markers altogether, you should use `none`.
    This value causes the user agent to refrain from putting anything where the marker
    would ordinarily be, although it does not interrupt the counting in ordered lists.
    Thus, the following markup would have the result shown in [Figure 16-2](#list-style-type-markersoff):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1602](assets/css5_1602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-2\. Switching off list-item markers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `list-style-type` property is inherited, so if you want to have different
    styles of markers in nested lists, you’ll likely need to define them individually.
    You may also have to explicitly declare styles for nested lists because the user
    agent’s stylesheet may have already defined them. For example, assume that a user
    agent has the following styles defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If this is the case—and it’s likely that this, or something like it, will be—you
    will have to declare your own styles to overcome the user agent’s styles. Inheritance
    won’t be enough.
  prefs: []
  type: TYPE_NORMAL
- en: String markers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CSS also allows authors to supply string values as list markers. This opens
    the field to anything you can input from the keyboard, as long as you don’t mind
    having the same string used for every marker in the list. [Figure 16-3](#liststyletype-strings)
    shows the results of the following styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1603](assets/css5_1603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-3\. A sampling of string markers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: List-Item Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes a regular text marker just won’t do. You might prefer to use an image
    for each marker, which is possible with the property `list-style-image`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Yes, it’s really that simple. One simple `url()` value, and you’re putting images
    in for markers, as you can see in [Figure 16-4](#list-style-image).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1604](assets/css5_1604.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-4\. Using images as markers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'List image markers are displayed at their full size, so exercise care in the
    images you use, as the example shown in [Figure 16-5](#list-style-image-bigmarkers)
    makes clear with its oversized markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1605](assets/css5_1605.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-5\. Using really big images as markers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It’s generally a good idea to provide a fallback marker type in case your image
    doesn’t load, gets corrupted, or is in a format that some user agents can’t display.
    Do this by defining a backup `list-style-type` for the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The other thing you can do with `list-style-image` is set it to the default
    value of `none`. This is good practice because `list-style-image` is inherited,
    so any nested lists will pick up the image as the marker, unless you prevent that
    from happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Since the nested list inherits the item type `square` but has been set to use
    no image for its markers, squares are used for the markers in the nested list,
    as shown in [Figure 16-6](#list-style-image-sublists).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1606](assets/css5_1606.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-6\. Switching off image markers in sublists
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Any image value is permitted for `list-style-image`, including gradient images.
    Thus, the following styles would have a result like that shown in [Figure 16-7](#list-style-image-gradients):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1607](assets/css5_1607.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-7\. Gradient list markers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Gradient markers have one drawback: they tend to be very small. This can be
    influenced by factors such as font size, because the marker size tends to scale
    with the list item’s content. If you need to have full control over how the markers
    are rendered, don’t use `::marker`; use `::before` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The way to style list markers directly is the `::marker` pseudo-element, discussed
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: List-Marker Positions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is another thing you can do to change the appearance of list items: decide
    whether the marker appears outside or inside the content of the list item. This
    is accomplished with `list-style-position`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a marker’s position is set to `outside` (the default), it will appear the
    way list items have since the beginning of the web. Should you desire a slightly
    different appearance, you can pull the marker in toward the content by setting
    the value of `list-style-position` to `inside`. This causes the marker to be placed
    “inside” the list item’s content. The exact way this happens is undefined, but
    [Figure 16-8](#list-style-position) shows one possibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1608](assets/css5_1608.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-8\. Placing the markers inside and outside list items
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In practice, markers given an `inside` placement are treated as if they’re an
    inline element inserted into the beginning of the list item’s content. This doesn’t
    mean the markers *are* inline elements. You can’t style them separately from the
    rest of the element’s content, unless you wrap all the other content in an element
    like `<span>`, or else address them directly (but with major limitations on what
    properties are allowed) by using `::marker`. It’s just that in layout terms, that’s
    what they act like.
  prefs: []
  type: TYPE_NORMAL
- en: List Styles in Shorthand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For brevity’s sake, you can combine the three list-style properties into a
    convenient single property: `list-style`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As shown in [Figure 16-9](#list-style), all three values can be applied to list
    items at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1609](assets/css5_1609.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-9\. Bringing it all together
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The values for `list-style` can be listed in any order, and any can be omitted.
    As long as one is present, the rest will fill in their default values. For instance,
    the following two rules will have the same visual effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'They will also override any previous rules in the same way. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The result will be the same as that in [Figure 16-9](#list-style) because the
    implied `list-style-type` value of `disc` will override the previous declared
    value of `square`, just as the explicit value of `disc` overrides it in the second
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: List Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve looked at the basics of styling list markers, let’s consider
    how lists are laid out in various browsers. We’ll start with a set of three list
    items devoid of any markers and not yet placed within a list, as shown in [Figure 16-10](#list-layout-threeitems).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1610](assets/css5_1610.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-10\. Three list items
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The border around the list items shows them to be, essentially, like block-level
    elements. Indeed, the value `list-item` is defined to generate a block box. Now
    let’s add markers, as illustrated in [Figure 16-11](#list-layout-threeitems-markers).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1611](assets/css5_1611.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-11\. Markers are added
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The distance between the marker and the list item’s content is not defined by
    CSS, and CSS does not as yet provide a way to directly affect that distance.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the markers outside the list items’ content, they don’t affect the layout
    of other elements, nor do they really even affect the layout of the list items
    themselves. They just hang a certain distance from the edge of the content, and
    wherever the content edge goes, the marker will follow. The behavior of the marker
    works much as though the marker were absolutely positioned in relation to the
    list-item content, something like `position: absolute; left: -1.5em;`. When the
    marker is inside, it acts like an inline element at the beginning of the content.'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have yet to add an actual list container; neither a `<ul>` nor an
    `<ol>` element is represented in the figures. We can add one to the mix, as shown
    in [Figure 16-12](#list-layout-threeitems-listborder) (it’s represented by a dashed
    border).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1612](assets/css5_1612.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-12\. Adding a list border
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As with the list items, the unordered-list element generates a block box, one
    that encompasses its descendant elements. As [Figure 16-12](#list-layout-threeitems-listborder)
    illustrates, the markers are placed not only outside the list item contents, but
    also outside the content area of the unordered-list element. The usual “indentation”
    you expect from lists has not yet been specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most browsers, as of this writing, indent list items by setting either padding
    or margins for the containing list element. For example, the user agent might
    apply a rule such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Most browsers use a rule that’s something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Neither is incorrect, but because browsers can, and have, changed the way they
    indent list content, we recommend including values for both properties when trying
    to eliminate the indentation of the list items. [Figure 16-13](#list-layout-padding-v-margin)
    compares the two approaches.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1613](assets/css5_1613.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-13\. Margins and padding as indentation devices
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The distance `40px` is a relic of early web browsers, which indented lists by
    a pixel amount. (Block quotes are indented by the same distance.) A good alternate
    value might be something like `2.5em`, which would scale the indentation along
    with changes in the text size and is also equal to `40px`, assuming a default
    font size of 16 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'For authors who want to change the indentation distance of lists, we strongly
    recommend specifying both padding and margins to ensure cross-browser compatibility.
    For example, if you want to use padding to indent a list, use this rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer margins, write something like this instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In either case, remember that the markers will be placed relative to the contents
    of the list items, and may therefore “hang” outside the main text of a document
    or even beyond the edge of the browser window. This is most easily observed if
    very large images, or long text strings, are used for the list markers, as shown
    in [Figure 16-14](#list-layout-big-markers).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1614](assets/css5_1614.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-14\. Large markers and list layout
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The ::marker Pseudo-Element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One feature many authors request is the ability to control the space between
    a marker and the content of a list item, or to change the size or color of a list
    marker independently of the contents of the list items.
  prefs: []
  type: TYPE_NORMAL
- en: 'List markers can be styled, to a limited extent, with the pseudo-element `::marker`.
    The properties allowed for `::marker` rules as of late 2022 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`content`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-combine-upright`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unicode-bidi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`white-space`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the `font-*` properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the transition and animation properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have noticed that no element-sizing or other box model properties such
    as margins are included, which puts a damper on a lot of authors’ desires for
    marker styling. More properties may be added in the future, but for now, that’s
    what we have.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few examples of marker styling, as declared here, are illustrated in [Figure 16-15](#marker-pseudo-examples):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1615](assets/css5_1615.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-15\. Examples of marker styling
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice that the result of doubling a marker’s font size differs between the
    ordered and unordered versions of this list. This comes down to the different
    default sizing and placement of the two marker types. As previously noted, the
    amount of control you have over markers is limited, even markers defined with
    `content`. So when you absolutely must have complete creative freedom with your
    markers, it’s usually better to build your own with generated content or marked-up
    inline content.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Generated Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS defines methods to create *generated content*. This is content inserted
    via CSS, but not represented by either markup or content.
  prefs: []
  type: TYPE_NORMAL
- en: For example, list markers are generated content. Nothing in the markup of a
    list item directly represents the markers, and you, the author, do not have to
    write the markers into your document’s content. The browser simply generates the
    appropriate marker automatically. For unordered lists, the marker will have a
    symbol of some kind, such as a circle, disc, or square. In ordered lists, the
    marker is by default a counter that increments by one for each successive list
    item. (Or, as you saw in previous sections, you may replace either kind with an
    image or symbol—and, as you’ll see in just a bit, anything supported by the `content`
    property.)
  prefs: []
  type: TYPE_NORMAL
- en: To understand how you can affect list markers and customize the counting of
    ordered lists (or anything else!), you must first look at more basic generated
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Generated Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To insert generated content into the document, use the `::before` and `::after`
    pseudo-elements. These place generated content before or after the content of
    an element by way of the `content` property (described in the next section).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you might want to precede every hyperlink with the text “(link)”
    to mark them when the page is printed out. This is accomplished with a media query
    and rule like the following, which has the effect shown in [Figure 16-16](#generated-content-text):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1616](assets/css5_1616.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-16\. Generating text content
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note that there isn’t a space between the generated content and the element
    content. This is because the value of `content` in the previous example doesn’t
    include a space. You could modify the declaration as follows to make sure there’s
    a space between generated and actual content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It’s a small difference but an important one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar manner, you might choose to insert a small icon at the end of
    links to PDF documents. The rule to accomplish this would look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose you want to further style such links by placing a border around them.
    This is done with a second rule, shown in [Figure 16-17](#generated-content-icons):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1617](assets/css5_1617.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-17\. Generating icons
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice that the link border extends around the generated content, just as the
    link underline extends under the “(link)” text in [Figure 16-16](#generated-content-text).
    This happens because by default, generated content is placed inside the element
    box of the element (unless the generated content is a list marker).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can float or position generated content outside its parent element’s box.
    All `display` values can be given to generated content; you can apply block formatting
    to the generated content of an inline box, and vice versa. For example, consider
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though `em` is an inline element, the generated content will generate
    a block box. Similarly, given the following code, the generated content is made
    block-level instead of remaining the default of `inline`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 16-18](#generated-content-block) shows the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1618](assets/css5_1618.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-18\. Generating block-level content
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'One interesting aspect of generated content is that it inherits values from
    the element to which it’s been attached. Thus, given the following rules, the
    generated text will be green, the same as the content of the paragraphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want the generated text to be purple instead, a simple declaration will
    suffice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Such value inheritance happens only with inherited properties, of course. This
    is worth noting because it influences the way certain effects must be approached.
    Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Since the generated content is placed inside the element box of the `<h1>`,
    it will be placed under the top border of the element. It would also be placed
    within any padding, as shown in [Figure 16-19](#generated-content-placement).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1619](assets/css5_1619.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-19\. Taking placement into account
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The bottom margin of the generated content, which has been made block-level,
    pushes the actual content of the element downward by half an em. In every sense,
    the effect of the generated content in this example is to break the `<h1>` element
    into two pieces: the generated-content box and the actual content box. This happens
    because the generated content has `display: block`. If you were to change it to
    `display: inline` (or remove the `display:block;` entirely), the effect would
    be as shown in [Figure 16-20](#generated-content-inline):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1620](assets/css5_1620.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-20\. Changing the generated content to be inline
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note how the borders are placed and how the top padding is still honored. So
    is the bottom margin on the generated content, but since the generated content
    is now inline and margins don’t affect line height, the margin has no visible
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: With the basics of generating content established, let’s take a closer look
    at the way the actual generated content is specified.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re going to generate content, you need a way to describe it. As you’ve
    already seen, this is handled with the `content` property, but there’s a great
    deal more to this property than you’ve seen thus far.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve already seen string and URI values in action, and counters are covered
    later in this chapter. Let’s talk about strings and URIs in a little more detail
    before we take a look at the `attr()` and quote values.
  prefs: []
  type: TYPE_NORMAL
- en: 'String values are presented literally, even if they contain what would otherwise
    be markup of some kind. Therefore, the following rule would be inserted verbatim
    into the document, as shown in [Figure 16-21](#generated-content-strings-verbatim):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1621](assets/css5_1621.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-21\. Strings are displayed verbatim
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This means that if you want a newline (return) as part of your generated content,
    you can’t use `<br>`. Instead, you use the string `\A`, or `\00000a`, which is
    the CSS way of representing a newline (based on the Unicode line-feed character,
    which is hexadecimal position `A`). Conversely, if you have a long string value
    and need to break it up over multiple lines, you escape out the line feeds with
    the `\` character. These are both demonstrated by the following rule and illustrated
    in [Figure 16-22](#generated-content-strings-newlines):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1622](assets/css5_1622.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-22\. Inserting and suppressing newlines
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can also use escapes to refer to hexadecimal Unicode values, such as `\00AB`.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of this writing, while inserting escaped content such as `\279c` is very
    well-supported, some browsers don’t support the escaped newline character `\A`
    or `\0000a`, and no browsers support `\A` unless you add a space after it.
  prefs: []
  type: TYPE_NORMAL
- en: With URI values, you point to an external resource (an image, movie, sound clip,
    or anything else the user agent supports), which is then inserted into the document
    in the appropriate place. If the user agent can’t support the resource you point
    it to for any reason—say, you try to insert a movie into a document when it’s
    being printed—then the user agent is required to ignore the resource completely,
    and nothing will be inserted.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting attribute values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes you might want to take the value of an element’s attribute and make
    it a part of the document display. To pick a simple example, you can place the
    value of every link’s `href` attribute immediately after the links, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, this leads to the problem of the generated content running smack into
    the actual content. To solve this, add some string values to the declaration,
    with the result shown in [Figure 16-23](#generated-content-strings-attr-urls):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1623](assets/css5_1623.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-23\. Inserting URLs
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This can be useful for print stylesheets, as an example. Any attribute value
    can be inserted as generated content: `alt` text, `class` or `id` values—anything.
    An author might choose to make the citation information explicit for a block quote,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For that matter, a more complicated rule might reveal the text- and link-color
    values for a legacy document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that if an attribute doesn’t exist, an empty string is put in its place.
    This is what happens in [Figure 16-24](#generated-content-attr-missing), in which
    the previous example is applied to a document whose `body` element has no `alink`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1624](assets/css5_1624.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-24\. Missing attributes are skipped
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The text “Active: ” (including the trailing space) is inserted into the document,
    as you can see, but nothing follows it. This is convenient when you want to insert
    the value of an attribute only when it exists.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: CSS defines the returned value of an attribute reference as an unparsed string.
    Therefore, if the value of an attribute contains markup or character entities,
    they will be displayed verbatim.
  prefs: []
  type: TYPE_NORMAL
- en: Using generated quotes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A specialized form of generated content is the quotation mark, and CSS provides
    a powerful way to manage both quotes and their nesting behavior. This is possible
    because of the pairing of content values like `open-quote` and the property `quotes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the keywords `none` and `inherit`, the only valid value is one or
    more *pairs* of strings, with the first in each pair being a value for `open-quote`
    and the second being a `close-quote` value. The first string of the pair defines
    the open-quote symbol, and the second defines the close-quote symbol. Therefore,
    of the following two declarations, only the first is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The first rule also illustrates one way to put string quotes around the strings
    themselves. The double quotation marks are surrounded by single quotation marks,
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at a simple example. Suppose you’re creating an XML format to store
    a list of favorite quotations. Here’s one entry in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To present the data in a useful way, you could employ the following rules,
    with the result shown in [Figure 16-25](#generated-content-quotes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1625](assets/css5_1625.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-25\. Inserting quotes and other content
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The values `open-quote` and `close-quote` are used to insert whatever quoting
    symbols are appropriate (since different languages have different quotation marks).
    They use the value of quotes to determine how they should work. Thus, the quotation
    begins and ends with a double quotation mark.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `quotes`, you can define quotation patterns to as many nesting levels
    as you like. In American English, for example, a common practice is to start out
    with a double quotation mark and then use single quotation marks for the quotation
    nested inside the first one. This can be re-created with *curly* quotation marks
    by using the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'When applied to the following XML, these rules will have the effect shown in
    [Figure 16-26](#generated-content-quotes-nested):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1626](assets/css5_1626.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-26\. Nested curly quotes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If the nested level of quotation marks is greater than the number of defined
    pairs, the last pair is reused for the deeper levels. Thus, if we had applied
    the following rule to the markup shown in [Figure 16-26](#generated-content-quotes-nested),
    the inner quote would have had double quotation marks, the same as the outer quote:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These particular rules use the hexadecimal Unicode positions for the curly quote
    symbols. If your CSS uses UTF-8 character encoding (and it really should), you
    can skip the escaped hexadecimal position approach and include just the curly
    quote characters directly, as in previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generated quotes make possible one other common typographic effect. When quoted
    text spans several paragraphs, the `close-quote` of each paragraph is often omitted;
    only the opening quote marks are shown, with the exception of the last paragraph.
    This can be re-created using the `no-close-quote` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This will start each paragraph with a double quotation mark but no closing mark.
    This is true of the last paragraph as well, so the fourth line in the previous
    code block inserts a close quote at the end of the last paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: This value is important because it decrements the quotation nesting level without
    generating a symbol. This is why each paragraph starts with a double quotation
    mark, instead of alternating between double and single marks, until the third
    paragraph is reached. The `no-close-quote` value closes the quotation nesting
    at the end of each paragraph, and thus every paragraph starts at the same nesting
    level.
  prefs: []
  type: TYPE_NORMAL
- en: This is significant because, as the CSS2.1 specification notes, “Quoting depth
    is independent of the nesting of the source document or the formatting structure.”
    In other words, when you start a quotation level, it persists across elements
    until a `close-quote` is encountered, and the quote nesting level is decremented.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of completeness, there is a `no-open-quote` keyword, which has
    a symmetrical effect to `no-close-quote`. This keyword increments the quotation
    nesting level by one but does not generate a symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Counters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Counters are probably familiar to you, even if you don’t realize it; for example,
    the markers of the list items in ordered lists are counters. Two properties and
    two `content` values make it possible to define almost any counting format, including
    subsection counters employing multiple styles, such as “VII.2.c.”
  prefs: []
  type: TYPE_NORMAL
- en: Resetting and incrementing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We create counters by setting the starting point for a counter and then incrementing
    it by a specified amount. The former is handled by the property `counter-reset`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A *counter identifier* is simply a label created by the author. For example,
    you might name your subsection counter `subsection`, `subsec`, `ss`, or `bob`.
    The simple act of resetting (or incrementing) an identifier is sufficient to call
    it into being. In the following rule, the counter `chapter` is defined as it is
    reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, a counter is reset to 0\. If you want to reset to a different number,
    you can declare that number following the identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also reset multiple identifiers all at once by listing space-separated
    identifier-integer pairs. If you leave out an integer, it defaults to 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the previous example, negative values are permitted. It
    would be perfectly legal to set a counter to `-32768` and count up from there.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: CSS does not define what user agents should do with negative counter values
    in nonnumeric counting styles. For example, there is no defined behavior for what
    to do if a counter’s value is `-5` but its display style is `upper-alpha`.
  prefs: []
  type: TYPE_NORMAL
- en: To count up or down, you’ll need a property to indicate that an element increments
    or decrements a counter. Otherwise, the counter would remain at whatever value
    it was given with a `counter-reset` declaration. The property in question is,
    not surprisingly, `counter-increment`.
  prefs: []
  type: TYPE_NORMAL
- en: Like `counter-reset`, `counter-increment` accepts identifier-integer pairs,
    and the integer portion of these pairs can be 0 or negative as well as positive.
    The difference is that if an integer is omitted from a pair in `counter-increment`,
    it defaults to 1, not 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here’s how a user agent might define counters to re-create the
    traditional 1, 2, 3 counting of ordered lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, an author might want to count backward from 0 so that the
    list items use a rising negative system. This would require only a small edit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The counting of lists would then be –1, –2, –3, and so on. If you replaced the
    integer `-1` with `-2`, lists would count –2, –4, –6, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying counters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To display the counters, you need to use the `content` property in conjunction
    with one of the counter-related values. To see how this works, let’s use an XML-based
    ordered list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'By applying the following rules to XML employing this structure, you would
    get the result shown in [Figure 16-27](#counters-counting-items):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1627](assets/css5_1627.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-27\. Counting the items
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The generated content is placed as inline content at the beginning of the associated
    element. Thus, the effect is similar to an HTML list with `list-style-position:
    inside;` declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<item>` elements are ordinary elements generating block-level boxes, which
    means that counters are not restricted only to elements with a `display` of `list-item`.
    In fact, any element can use a counter. Consider the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: These rules would have the effect shown in [Figure 16-28](#counters-counting-headings).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1628](assets/css5_1628.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-28\. Adding counters to headings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 16-28](#counters-counting-headings) illustrates some important points
    about counter resetting and incrementing. For instance, notice that the counters
    are reset on the elements, whereas the actual generated-content counters are inserted
    via the `::before` pseudo-elements. Attempting to reset counters in the pseudo-elements
    won’t work: you’ll get a lot of zeros.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also notice that the `<h1>` element uses the counter `chapter`, which defaults
    to 0 and has a “1.” before the element’s text. When a counter is incremented and
    used by the same element, the incrementation happens *before* the counter is displayed.
    Similarly, if a counter is reset and shown in the same element, the reset happens
    before the counter is displayed. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The first `<h1>` element in the document would be preceded by the text “1.0.0.”
    because the counters `section` and `subsec` were reset but not incremented. Thus,
    if you want the first displayed instance of an incremented counter to be 0, you
    need to reset that counter to `-1`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do some interesting things with counters. Consider the following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You can re-create the traditional format of a BASIC program listing with the
    following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s also possible to define a list style for each counter as part of the `counter()`
    format. You can do this by adding a comma-separated `list-style-type` keyword
    after the counter’s identifier. The following modification of the heading-counter
    example is illustrated in [Figure 16-29](#counters-counting-headings-changed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the counter `section` is not given a style keyword, so it defaults
    to the decimal counting style. You can even set counters to use the styles `disc`,
    `circle`, `square`, and `none` if you so desire, though every instance of those
    counters will be just a single copy of the symbol you specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'One interesting point to note is that elements with a `display` of `none` do
    not increment counters, even if the rule seems to indicate otherwise. In contrast,
    elements with a `visibility` of `hidden` *do* increment counters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1629](assets/css5_1629.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-29\. Changing counter styles
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Counters and scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So far, you’ve seen how to string multiple counters together to create section-and-subsection
    counting. Often, this is something authors desire for nested ordered lists as
    well, but trying to create enough counters to cover deep nesting levels would
    quickly become clumsy. Just to get counters to work for five-level-deep nested
    lists would require a bunch of rules like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Imagine writing enough rules to cover nesting up to 50 levels! (We’re not saying
    you should nest ordered lists 50 deep. Just follow along for the moment.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, CSS 2.1 described the concept of *scope* when it comes to counters.
    Stated simply, every level of nesting creates a new scope for any given counter.
    Scope is what makes it possible for the following rules to cover nested-list counting
    in the usual HTML way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: These rules will all make ordered lists, even those nested inside others, start
    counting from 1 and increment each item by one—exactly the way it’s been done
    in HTML from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: This works because a new instance of the counter `ordered` is created at each
    level of nesting. So, for the first ordered list, an instance of `ordered` is
    created. Then, for every list nested inside the first one, another new instance
    is created, and the counting starts anew with each list.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, suppose you want ordered lists to count so that each level of nesting
    creates a new counter appended to the old: 1, 1.1, 1.2, 1.2.1, 1.2.2, 1.3, 2,
    2.1, and so on. This can’t be done with `counter()`, but it *can* be done with
    `counters()`. What a difference an *s* makes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the nested-counter style shown in [Figure 16-30](#counters-scope-nested),
    you need these rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1630](assets/css5_1630.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-30\. Nested counters
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Basically, the keyword `counters(ordered,".")` displays the `ordered` counter
    from each scope with a period appended, and strings together all of the scoped
    counters for a given element. Thus, an item in a third-level nested list would
    be prefaced with the `ordered` value for the outermost list’s scope, the scope
    of the list between the outer and current list, and the current list’s scope,
    with each of those followed by a period. The rest of the `content` value causes
    a space, colon, and space to be added after all of those counters.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with `counter()`, you can define a list style for nested counters, but the
    same style applies to all of the counters. Thus, if you changed your previous
    CSS to read as follows, the list items in [Figure 16-30](#counters-scope-nested)
    would all use lowercase letters for the counters instead of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have noticed that `list-style: none` was applied to the `<ol>` elements
    in the previous examples. That’s because the counters being inserted were generated
    content, not replacement list markers. In other words, had the `list-style: none`
    been omitted, each list item would have had its user agent-supplied list counter,
    *plus* the generated-content counters we defined.'
  prefs: []
  type: TYPE_NORMAL
- en: That ability can be very useful, but sometimes you really just want to redefine
    the markers themselves. That’s where counting patterns come in.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Counting Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to get beyond simple nested counting, perhaps into defining base-60
    counting or using patterns of symbols, CSS provides a way to define almost any
    counting pattern you can imagine. You can use `@counter-style` blocks, with dedicated
    descriptors to manage the outcome. The general pattern is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `<*name*>` is an author-supplied name for the pattern in question. For
    example, to create a series of alternating triangle markers, the block might look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 16-31](#counter-patterns-triangles) shows the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1631](assets/css5_1631.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-31\. A simple counter pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Several descriptors are available, summarized here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start with simple systems and work our way up in complexity, but first,
    let’s see the precise definitions for the two most basic descriptors: `system`
    and `symbols`.'
  prefs: []
  type: TYPE_NORMAL
- en: For pretty much any `@counter-style` block, those are the minimum two descriptors.
    You can leave out `system` if you’re defining a `symbolic` system, but it’s generally
    better to include it so that you’re clear about the kind of system you’re setting
    up. Remember, the next person to work on the styles may not be as familiar with
    counter styling as you!
  prefs: []
  type: TYPE_NORMAL
- en: Fixed Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest kind of counter pattern is a `fixed` system. Fixed systems are
    used when you want to define an exact sequence of counter markers that doesn’t
    repeat after you’ve run out of markers. Consider this example, which has the result
    shown in [Figure 16-32](#counter-patterns-fixed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1632](assets/css5_1632.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-32\. A fixed counter pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once the list gets past the fifth list item, the counter system runs out of
    emoji, and since no fallback was defined (we’ll get to that shortly), the markers
    for subsequent list items fall back to the default for ordered lists.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the symbols in the `symbols` descriptor are separated by spaces.
    If they were all jammed together with no space separation, you’d get a result
    like that in [Figure 16-33](#counter-patterns-fixed-tooclose).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1633](assets/css5_1633.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-33\. When symbols get too close
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This does mean you can define a fixed sequence of markers in which each marker
    is composed of multiple symbols. (If you want to define a set of symbols that
    are combined in patterns to create a counting system, just wait: we’re getting
    to that soon.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use ASCII symbols in your markers, it’s generally advisable
    to quote them. This avoids problems like angle brackets being mistaken for pieces
    of HTML by the parser. Thus you might do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: It’s acceptable to quote all symbols, and it might be a good idea to get into
    that habit. That means more typing—the preceding value would become `"#" "$" "%"
    ">"`—but it’s less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fixed counter systems, you can define a starting value in the `system` descriptor
    itself. If you want to start the counting at 5, for example, you’d write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the first five symbols represent counters 5 through 9.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This ability to set a starting number is available in only fixed counter systems.
  prefs: []
  type: TYPE_NORMAL
- en: Cyclic Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step beyond fixed patterns is `cyclic` patterns, which are fixed patterns
    that repeat. Let’s take the fixed emoji pattern from the previous section and
    convert it to cyclic. This will have the result shown in [Figure 16-34](#counter-patterns-cyclic):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1634](assets/css5_1634.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-34\. A cyclic counter pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The defined symbols are used in order, over and over, until no more items remain
    left to count.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible to use `cyclic` to supply a single marker that’s used for the
    entire pattern, much like supplying a string for `list-style-type`. In this case,
    it would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: One thing you may have noticed is that so far, all our counters have been followed
    by a full stop (or a period, if you prefer). This is due to the default value
    of the `suffix` descriptor, which has a cousin descriptor, `prefix`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these descriptors, you can define symbols that are inserted before and
    after every marker in the pattern. Thus, we might give our thinker ASCII wings
    like so, as illustrated in [Figure 16-35](#counter-patterns-cyclic-wings):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1635](assets/css5_1635.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-35\. Putting “wings” on the thinker
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `suffix` descriptor is particularly useful if you want to remove the default
    suffix from your markers. Here’s one example of how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also extend the markers in creative ways by using `prefix` and `suffix`,
    as shown in [Figure 16-36](#counter-patterns-cyclic-thisisfine):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1636](assets/css5_1636.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-36\. This list is fine
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You might wonder why the `prefix` value is quoted in this example, while the
    `suffix` value is not. There is no reason other than to demonstrate that both
    approaches work. As stated before, quoting symbols is safer but is rarely required.
  prefs: []
  type: TYPE_NORMAL
- en: You may also see some differences between the Unicode glyphs in the CSS examples
    here and those shown in the figures. This is an unavoidable aspect of using emoji
    and other such characters—what appears on one person’s user agent may be different
    on someone else’s. Consider the differences in emoji rendering between macOS,
    iOS, Android, Samsung, Windows desktop, Windows mobile, Linux, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use images for your counters, at least in theory. As an example, suppose
    you want to use a series of Klingon glyphs, which have no Unicode equivalents.
    (It’s a long-standing industry myth that Klingon is in Unicode. It was proposed
    in 1997 and rejected in 2001\. A new proposal was made in 2016 and was once again
    rejected.) We won’t represent the entire set of symbols here, but it would start
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This would cycle from *A* through *GH* and then repeat, but still, you’d get
    some Klingon symbology, which might be enough. We’ll see ways to build up alphabetic
    and numeric systems later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of late 2022, browser support for any type of `<image>` as counting symbols
    is essentially nonexistent.
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `symbolic` counting system is similar to a cyclic system, except in symbolic
    systems, for each restart of the symbol sequence, the number of symbols increases
    by one. Each marker is made up of a single symbol that is repeated the number
    of times the symbol sequence has repeated. This may be familiar to you from footnote
    symbols, or some varieties of alphabetic systems. Examples of each are shown here,
    with the result in [Figure 16-37](#counter-patterns-symbolic):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1637](assets/css5_1637.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-37\. Two patterns of symbolic counting
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One thing to watch out for is that if you have only a few symbols applied to
    a very long list, the markers will quickly get quite long. Consider the letter
    counters shown in the previous example. [Figure 16-38](#counter-patterns-symbolic-long)
    shows what the 135th through 150th entries in a list using that system would look
    like.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1638](assets/css5_1638.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-38\. Very long symbolic markers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This sort of consideration will become more of an issue from here on out, because
    the counter styles are all additive in one sense or another. To limit your exposure
    to these kinds of problems, you can use the `range` descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `range`, you can supply one or more space-separated pairs of values, with
    each pair separated from the others by commas. Let’s suppose we want to stop the
    letter-doubling after three iterations. We have five symbols, so we can restrict
    their use to the first 15 list items like so, with the result shown in [Figure 16-39](#counter-patterns-symbolic-ranged)
    (which has been arranged in two columns to keep the figure size reasonable):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1639](assets/css5_1639.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-39\. Using `range` to limit a symbolic counter pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If we needed, for whatever reason, to supply a second range of counter usage,
    it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The symbolic letter system defined by `letters` would be applied in the range
    1–15 as well as 101–115 (which would be “AAAAAAAAAAAAAAAAAAAAA” through “EEEEEEEEEEEEEEEEEEEEEEE,”
    rather appropriately).
  prefs: []
  type: TYPE_NORMAL
- en: So what happens to the counters that fall outside of the range(s) defined by
    `range`? They fall back to a default marker style. You can leave that up to the
    user agent to handle, or you can provide some direction by means of the `fallback`
    descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, you might decide to handle any beyond-the-range counters with
    Hebrew counting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: You could just as easily use `lower-greek`, `upper-latin`, or even a noncounting
    style like `square`.
  prefs: []
  type: TYPE_NORMAL
- en: Alphabetic Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An `alphabetic` counting system is similar to a `symbolic` system, except the
    manner of repeating changes. Remember, with symbolic counting, the number of symbols
    goes up with each iteration through the cycle. In alphabetic systems, each symbol
    is treated as a digit in a numbering system. If you’ve spent any time in spreadsheets,
    this counting method may be familiar to you from the column labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, let’s reuse the letter symbols from the previous section,
    and change from a symbolic to an alphabetic system. The result is shown in [Figure 16-40](#counter-patterns-alphabetic)
    (once again formatted as two columns to fit):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1640](assets/css5_1640.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-40\. Alphabetic counting
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice the second iteration of the pattern, which runs from “AA” to “AE” before
    switching over to “BA” through “BE,” then on to “CA” and so on. In the symbolic
    version of this, we’d already be up to “EEEEEE” by the time “EE” was reached in
    the alphabetic system.
  prefs: []
  type: TYPE_NORMAL
- en: Note that to be valid, an alphabetic system must have a minimum of *two* symbols
    supplied in the `symbols` descriptor. If only one symbol is supplied, the entire
    `@counter-style` block is rendered invalid. Any two symbols are valid; they can
    be letters, numbers, or really anything in Unicode, as well as images (again,
    in theory).
  prefs: []
  type: TYPE_NORMAL
- en: Numeric Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you define a `numeric` system, you’re technically using the symbols you
    supply to define a *positional numbering* system—that is, the symbols are used
    as digits in a place-number counting system. Defining ordinary decimal counting,
    for example, would be done like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'This base is extensible to create hexadecimal counting, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'That counter style will count from 1 through F, roll over to 10 and count up
    to 1F, then 20 to 2F, 30 to 3F, etc. Much more simply, it’s a breeze to set up
    binary counting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Examples of these three counting patterns are shown in [Figure 16-41](#counter-patterns-numeric-three-systems).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1641](assets/css5_1641.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-41\. Three numeric counting patterns
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'An interesting question to consider is: what happens if a counter value is
    negative? In decimal counting, we generally expect negative numbers to be preceded
    by a minus sign (`–`), but what about in other systems, like symbolic? What if
    we define a letter-based numeric counting system? Or if we want to use accounting-style
    formatting, which puts negative values into parentheses? This is where the `negative`
    descriptor comes into play.'
  prefs: []
  type: TYPE_NORMAL
- en: The `negative` descriptor is like its own little self-contained combination
    of `prefix` and `suffix` that is applied only when the counter has a negative
    value. Its symbols are placed to the inside (that is, closer to the counter) of
    any prefix and suffix symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let’s say we want to use accounting-style formatting, and to add prefix
    and suffix symbols to all counters. That would be done as follows, with the result
    shown in [Figure 16-42](#counter-patterns-numeric-negative):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1642](assets/css5_1642.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-42\. Negative-value formatting
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Another common feature of numeric counting systems is the desire to pad out
    low values so that their length matches that of higher values. For example, rather
    than 1 and 100, a counting pattern might use leading zeros to create 001 and 100\.
    This can be accomplished with the `pad` descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pattern of this descriptor is interesting. The first part is an integer
    that defines the number of digits that every counter should have. The second part
    is a string that’s used to fill out any value containing fewer than the defined
    number of digits. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Given these styles, ordered lists will all used decimal counting by default:
    1, 2, 3, 4, 5… Those with a `class` of `padded` will use padded decimal counting:
    0001, 0002, 0003, 0004, 0005… [Figure 16-43](#counter-patterns-numeric-pad) shows
    an example.'
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1643](assets/css5_1643.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-43\. Padding values
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note that the padded counters use the `0` symbol to fill in any missing leading
    digits, in order to make every counter be at least four digits long. The “at least”
    part of that sentence is important: if a counter gets up to five digits, it won’t
    be padded. More importantly, if a counter reaches five digits, none of the other
    shorter counters will get additional zeros. They’ll stay four digits long, because
    of the `4` in `4 "0"`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any symbol can be used to pad values, not just `0`. You could use underlines,
    periods, emoji, arrow symbols, empty spaces, or anything else you like. In fact,
    you can have multiple characters in the <*`symbol`*> part of the value. The following
    is perfectly acceptable, if not necessarily desirable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Given a counter value of `1`, the result of that crazy counting system would
    be “![thinking face emoji](assets/thinking.png)![winking face emoji](assets/winking.png)![thinking
    face emoji](assets/thinking.png)![winking face emoji](assets/winking.png)![thinking
    face emoji](assets/thinking.png)![winking face emoji](assets/winking.png)1.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that negative symbols count toward symbol length and thus eat into padding.
    Also note that the negative sign will come *outside* any padding. Given the following
    styles, we’d get the result shown in [Figure 16-44](#counter-patterns-numeric-negativepad):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1644](assets/css5_1644.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-44\. Negative value formatting, with padding
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Additive Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have one more system type to explore, which is `additive-symbol` counting.
    In additive counting systems, different symbols are used to represent values.
    Putting multiple symbols together properly and then adding up the numbers that
    each represents yields the counter value.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s much easier to show this than explain it. Here’s an example adapted from
    [Kseso](https://escss.blogspot.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'This will count in classical Roman style. Another good example can be found
    in the specification for counting styles, which defines a dice-counting system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The results of both counting systems are shown in [Figure 16-45](#counter-patterns-additive-romandice);
    this time, each list has been formatted as three columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1645](assets/css5_1645.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-45\. Additive values
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Symbols can be quoted for clarity; e.g., `6 "⚅", 5 "⚄", 4 "⚃"`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing to keep in mind is that the order of the symbols and
    their equivalent values matters. Notice that both the Roman and dice-counting
    systems supply values from largest to smallest, not the other way around? That’s
    because if you put the values in any order other than descending, the entire block
    is rendered invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice the use of the `additive-symbols` descriptor instead of `symbols`.
    This is important to keep in mind, since defining an additive system and then
    trying to use the `symbols` descriptor will render the entire `counter-styles`
    block invalid. (Similarly, attempting to use the `additive-symbols` description
    in non-`additive` systems will render *those* blocks invalid.)
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing to note about additive systems is that, because of the way the
    additive-counter algorithm is defined, it’s possible to create additive systems
    in which some values can’t be represented even though it seems like they should
    be. Consider this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'This would yield the following counters for the first five numbers: 1, X, Y,
    4, YX. You might think 4 should be XX, and that may make intuitive sense, but
    the algorithm for additive symbols doesn’t permit it. To quote the specification:
    “While unfortunate, this is required to maintain the property that the algorithm
    runs in linear time relative to the size of the counter value.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'So how does Roman counting manage to get III for 3? Again, the answer is in
    the algorithm. It’s a little too complicated to get into here, so if you’re truly
    curious, we recommend you read the CSS Counter Styles Level 3 specification, which
    defines the additive counting algorithm. If that doesn’t interest you, just remember:
    make sure you have a symbol whose value equates to `1`, and you’ll avoid this
    problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Extending Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There may come a time when you just want to vary an existing counting system
    a bit. For example, suppose you want to change regular decimal counting to use
    close-parentheses symbols as suffixes, and pad up to two leading zeros. You could
    write it all out longhand, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'That works, but it’s clumsy. Well, worry not: `extends` is here to help.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `extends` option is sort of a system type, but only in the sense that it
    builds on an existing system type. The previous example would be rewritten with
    `extends` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: That takes the existing `decimal` system familiar from `list-style-type` and
    reformats it a bit. Thus, there’s no need to retype the whole symbol chain. You
    just adjust the options, as it were.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, you can *only* adjust the options: if you try to use either `symbols`
    or `additive-symbols` in an `extends` system, the entire `@counter-style` block
    will be invalid and ignored. In other words, symbols cannot be extended. As an
    example, you can’t define hexadecimal counting by extending decimal counting.'
  prefs: []
  type: TYPE_NORMAL
- en: However, you can vary the hexadecimal counting for different contexts. As an
    example, you could set up basic hex counting and then define variant display patterns,
    as shown in the following code and illustrated in [Figure 16-46](#counter-patterns-extends-fourhex).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Each list jumps from 19 to 253, thanks to a `value="253"` on one of the list
    items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 1646](assets/css5_1646.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-46\. Various hexadecimal counting patterns
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Notice that the last of the four counter styles, `hexcolonlimited`, extends
    the third, `hexcolon`, which itself extends the first, `hexadecimal`. In `hexcolonlimited`,
    the hexadecimal counting stops at `FF` (255), thanks to the `range: 1 255;` declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: Speaking Counting Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While it’s fun to build counters out of symbols, the result can be a real mess
    for spoken technologies such as Apple’s VoiceOver or the JAWS screen reader. Imagine,
    for example, a screen reader trying to read dice counters or phases of the moon.
    To help, the `speak-as` descriptor allows you to define an audible fallback.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of late 2022, `speak-as` is supported only by Mozilla-based browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take the values backward. With a <*`counter-style-name`*>, you’re able
    to define an alternate counting style that the user agent likely already recognizes.
    For example, you likely want to provide an audio fallback for dice counting to
    be `decimal`, one of the well-supported `list-style-type` values, when spoken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Given those styles, the counter ⚅⚅⚂ would be spoken as “fifteen.” Alternatively,
    if the `speak-as` value is changed to `lower-latin`, that counter will be spoken
    as “oh” (capital letter *O*).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `spell-out` value might seem fairly straightforward but it’s a little more
    complicated than it first appears. What is spelled out by the user agent is a
    “counter representation,” which is then spelled out letter by letter. It’s hard
    to predict what that will mean, since the method of generating a counter representation
    isn’t precisely defined: the specification says, “Counter representations are
    constructed by concatenating counter symbols together.” And that’s all.'
  prefs: []
  type: TYPE_NORMAL
- en: The `words` value is similar to `spell-out`, except the counter representation
    is spoken as words instead of spelling out each letter. Again, the exact process
    is not defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the value `numbers`, the counters are spoken as numbers in the document
    language. This is similar to the previous code sample, where ⚅⚅⚂ is spoken as
    “fifteen,” at least in English documents. If it’s another language, that language
    is used for counting: “quince” in Spanish, “fünfzehn” in German, “shíwǔ” in Chinese,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Given `bullets`, the user agent says whatever it says when reading a bullet
    (marker) in an unordered list. This may mean saying nothing at all, or producing
    an audio cue such as a chime or click.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, consider the default value of `auto`. We saved this for last because
    its effect depends on the counting system in use. If it’s an `alphabetic` system,
    `speak-as: auto` has the same effect as `speak-as: spell-out`. In `cyclic` systems,
    `auto` is the same as `bullets`. Otherwise, the effect is the same as `speak-as:
    numbers`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The exception to this rule arises if the system is an `extends` system, in
    which case `auto`’s effects are determined based on the system being extended.
    Therefore, given the following styles, the counters in an `emojibrackets` list
    will be spoken as if `speak-as` were set to `bullets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though list styling isn’t as sophisticated as we might like, the ability
    to style lists is still highly useful. One relatively common use is to take a
    list of links, remove the markers and indentation, and thus create a navigation
    sidebar. The combination of simple markup and flexible layout is difficult to
    resist.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, if a markup language doesn’t have intrinsic list elements, generated
    content can be an enormous help—say, for inserting content such as icons to point
    to certain types of links (PDF files, Word documents, or even just links to another
    website). Generated content also makes it easy to print out link URLs, and its
    ability to insert and format quotation marks leads to true typographic joy. It’s
    safe to say that the usefulness of generated content is limited only by your imagination.
    Even better, thanks to counters, you can now associate ordering information to
    elements that are not typically lists, such as headings or code blocks. If you
    want to support such features with design that mimics the appearance of the user’s
    operating system, read on. The next chapter discusses ways to change the placement,
    shape, and even perspective of your design.
  prefs: []
  type: TYPE_NORMAL
