- en: Chapter 16\. Lists and Generated Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章\. 列表和生成内容
- en: In the realm of CSS layout, lists are an interesting case. The items in a list
    are simply block boxes, but with an extra bit that doesn’t really participate
    in the document layout hanging off to one side. With an ordered list, that extra
    bit contains a series of increasing numbers (or letters) that are calculated and
    mostly formatted by the user agent, not the author. Taking a cue from the document
    structure, the user agent generates the numbers and their basic presentation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS布局领域中，列表是一个有趣的案例。列表中的项目只是块框，但有一个额外的位并不真正参与文档布局，悬挂在一侧。在有序列表中，这个额外的部分包含一系列递增的数字（或字母），由用户代理计算和大部分格式化，而不是作者。从文档结构中获取灵感，用户代理生成数字及其基本呈现方式。
- en: With CSS, you can define your own counting patterns and formats, and associate
    those counters with *any* element, not just ordered list items. Furthermore, this
    basic mechanism makes it possible to insert other kinds of content, including
    text strings, attribute values, or even external resources, into a document. Thus,
    it is possible to use CSS to insert link icons, editorial symbols, and more into
    a design without having to create extra markup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS，您可以定义自己的计数模式和格式，并将这些计数器与*任何*元素关联，而不仅仅是有序列表项。此外，这种基本机制使得可以插入其他类型的内容，包括文本字符串、属性值，甚至外部资源，到文档中。因此，可以使用CSS在设计中插入链接图标、编辑符号等，而无需创建额外的标记。
- en: To see how all these list options fit together, we’ll explore basic list styling
    before moving on to examine the generation of content and counters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解所有这些列表选项如何配合在一起，我们将先探讨基本的列表样式，然后再探讨内容和计数的生成。
- en: Working with Lists
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与列表一起工作
- en: In a sense, almost anything that isn’t narrative text can be considered a list.
    The US Census, the solar system, my family tree, a restaurant menu, and even all
    of the friends you’ve ever had can be represented as a list, or perhaps as a list
    of lists. These many variations make lists fairly important, which is why it’s
    a shame that list styling in CSS isn’t more sophisticated.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，几乎任何不是叙述性文本的东西都可以被视为列表。美国人口普查、太阳系、我的家庭树、餐厅菜单，甚至您曾经拥有的所有朋友都可以被表示为列表，或者可能作为列表的列表。这些多种变化使得列表相当重要，这也是为什么遗憾的是CSS中的列表样式不够复杂。
- en: The simplest (and best-supported) way to affect a list’s styles is to change
    its marker type. The *marker* of a list item is, for example, the bullet that
    appears next to each item in an unordered list. In an ordered list, the marker
    could be a letter, a number, or a symbol from some other counting system. You
    can even replace the markers with images. All of these are accomplished using
    the different list-style properties.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 影响列表样式的最简单（也是最好支持的）方法是更改其标记类型。列表项的*标记*是例如出现在无序列表中每个项目旁边的符号。在有序列表中，标记可以是字母、数字或来自某些其他计数系统的符号。您甚至可以用图像替换标记。所有这些都是通过不同的`list-style`属性实现的。
- en: Types of Lists
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表类型
- en: To change the type of marker used for a list’s items, use the `list-style-type`
    property.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改列表项使用的标记类型，请使用`list-style-type`属性。
- en: 'You can use a string of text as the marker, such as `list-style-type: "▷"`.
    In addition, <*`counter-style`*> stands in for a long list of possible keywords
    or a custom-defined counter style defined with `@counter-style` (see [“Defining
    Counting Patterns”](#counter-patterns)). A few examples of these list style types
    are shown in [Figure 16-1](#liststyletype).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以使用文本字符串作为标记，例如`list-style-type: "▷"`。此外，<*`counter-style`*>代表可能的关键字列表或使用`@counter-style`定义的自定义计数器样式（见[“定义计数模式”](#counter-patterns)）。这些列表样式类型的几个示例显示在[图16-1](#liststyletype)中。'
- en: '![css5 1601](assets/css5_1601.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1601](assets/css5_1601.png)'
- en: Figure 16-1\. A sampling of list style types
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-1\. 几种列表样式类型的示例
- en: 'The keywords (plus some browser-specific extras) are listed here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关键字（以及一些特定于浏览器的额外内容）在此列出：
- en: '| `afar` † `amaric` †'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '| `afar` † `amaric` †'
- en: '`amaric-abegede` †'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`amaric-abegede` †'
- en: '`arabic-indic`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`arabic-indic`'
- en: '`armenian`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`armenian`'
- en: '`asterisks` †'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`asterisks` †'
- en: '`bengali`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`bengali`'
- en: '`binary` †'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`binary` †'
- en: '`cambodian`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`cambodian`'
- en: '`circle`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`circle`'
- en: '`cjk-decimal` *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`cjk-decimal` *'
- en: '`cjk-earthly-branch`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`cjk-earthly-branch`'
- en: '`cjk-heavenly-stem`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`cjk-heavenly-stem`'
- en: '`cjk-ideographic`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`cjk-ideographic`'
- en: '`decimal`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`decimal`'
- en: '`decimal-leading-zero`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`decimal-leading-zero`'
- en: '`devanagari`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`devanagari`'
- en: '`disc`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`disc`'
- en: '`disclosure-closed`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`disclosure-closed`'
- en: '`disclosure-open`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`disclosure-open`'
- en: '`ethiopic` †'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`ethiopic` †'
- en: '`ethiopic-abegede` †'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ethiopic-abegede` †'
- en: '`ethiopic-abegede-am-et` †'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`ethiopic-abegede-am-et` †'
- en: '`ethiopic-abegede-gez` †'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`ethiopic-abegede-gez` †'
- en: '`ethiopic-abegede-ti-er` †'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`ethiopic-abegede-ti-er` †'
- en: '`ethiopic-abegede-ti-et` †'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`ethiopic-abegede-ti-et` †'
- en: '`ethiopic-halehame` ‡, -'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米` ‡， -'
- en: '`ethiopic-halehame-aa-er` †'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-阿姆哈拉-厄` †'
- en: '`ethiopic-halehame-aa-et` †'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-阿姆哈拉` †'
- en: '`ethiopic-halehame-am` -'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-阿姆哈拉` -'
- en: '`ethiopic-halehame-am-et` †'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-阿姆哈拉` †'
- en: '`ethiopic-halehame-gez` †'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-盖兹` †'
- en: '`ethiopic-halehame-om-et` †'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-奥姆哈拉` †'
- en: '| `ethiopic-halehame-sid-et` † `ethiopic-halehame-so-et` †'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '| `埃塞俄比亚语-哈勒哈米-西达马` † `埃塞俄比亚语-哈勒哈米-索马利` †'
- en: '`ethiopic-halehame-ti-er` -'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-提-厄` -'
- en: '`ethiopic-halehame-ti-et` -'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-提格` †'
- en: '`ethiopic-halehame-tig` †'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚语-哈勒哈米-提格` †'
- en: '`ethiopic-numeric`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`埃塞俄比亚-数字符号`'
- en: '`footnotes` †'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`脚注` †'
- en: '`georgian`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`格鲁吉亚`'
- en: '`gujarati`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`古吉拉特语`'
- en: '`gurmukhi`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`古尔穆克希`'
- en: '`hangul` -'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`朝鲜文` -'
- en: '`hangul-consonant` -'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`朝鲜文元音` -'
- en: '`hebrew`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`希伯来语`'
- en: '`hiragana`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`平假名`'
- en: '`hiragana-iroha`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`平假名-伊吕波`'
- en: '`japanese-formal`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`日语（正式）`'
- en: '`japanese-informal`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`日语（非正式）`'
- en: '`kannada`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`卡纳达语`'
- en: '`katakana`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`片假名`'
- en: '`katakana-iroha`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`katakana-iroha`'
- en: '`khmer`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`高棉语`'
- en: '`korean-hangul-formal`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`朝鲜语-汉字（正式）`'
- en: '`korean-hanja-formal`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`朝鲜语-汉字（正式）`'
- en: '`korean-hanja-informal`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`朝鲜语-汉字（非正式）`'
- en: '`lao`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`老挝语`'
- en: '`lower-alpha`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower-alpha`'
- en: '`lower-armenian`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`小写亚美尼亚字母`'
- en: '`lower-greek`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`小写希腊字母`'
- en: '`lower-hexadecimal` †'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`小写十六进制` †'
- en: '`lower-latin`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`小写拉丁字母`'
- en: '`lower-norwegian` †'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`小写挪威文` †'
- en: '`lower-roman`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`小写罗马字母`'
- en: '`malayalam`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`马拉雅拉姆`'
- en: '| `mongolian` `myanmar`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '| `蒙古文` `缅甸文`'
- en: '`octal` †'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`八进制` †'
- en: '`oriya`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`奥里亚`'
- en: '`oromo` †'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`奥罗莫` †'
- en: '`persian`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`波斯语`'
- en: '`sidama`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`希达马`'
- en: '`simp-chinese-formal`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`简体中文（正式）`'
- en: '`simp-chinese-informal`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`简体中文（非正式）`'
- en: '`somali` †'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`索马里` †'
- en: '`square`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`方形`'
- en: '`symbols` *'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`符号` *'
- en: '`tamil` *'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`泰米尔语` *'
- en: '`telugu`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`泰卢固语`'
- en: '`thai`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`泰语`'
- en: '`tibetan`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`藏文`'
- en: '`tigre` †'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`提格雷` †'
- en: '`tigrinya-er` †'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`提格利尼亚语-厄` †'
- en: '`tigrinya-er-abegede` †'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`提格利尼亚-厄利特阿贝吉德` †'
- en: '`tigrinya-et` †'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`提格利尼亚语-厄利特` †'
- en: '`tigrinya-et-abegede` †'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`提格利尼亚语-厄利特阿贝吉德` †'
- en: '`trad-chinese-formal`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`繁体中文（正式）`'
- en: '`trad-chinese-informal`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`繁体中文（非正式）`'
- en: '`upper-alpha`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`upper-alpha`'
- en: '`upper-armenian`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`upper-armenian`'
- en: '`upper-greek`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`大写希腊字母`'
- en: '`upper-hexadecimal` †'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`大写十六进制` †'
- en: '`upper-latin`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`大写拉丁字母`'
- en: '`upper-norwegian` †'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`大写挪威文` †'
- en: '`upper-roman`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`大写罗马字母`'
- en: '`urdu` -'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`乌尔都语` -'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| † WebKit only |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| † 仅限WebKit |'
- en: '| ‡ All engines *except* WebKit |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| ‡ 除了WebKit之外的所有引擎 * |'
- en: '| * Mozilla only |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| * 仅限Mozilla |'
- en: '| - Requires `-moz-` prefix in Firefox |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| - 在Firefox中需要 `-moz-` 前缀 |'
- en: 'If you provide a counter style that the browser does not recognize, such as
    declaring `list-style-type: lower-hexadecimal` and loading the page, some browsers,
    including Firefox, Edge, and Chrome, will assume `decimal` instead. Safari will
    ignore values it does not understand as invalid.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您提供浏览器不识别的计数样式，例如声明 `list-style-type: lower-hexadecimal` 并加载页面，则一些浏览器（包括Firefox、Edge和Chrome）将假定为
    `decimal`。Safari 将忽略它不理解的值作为无效。'
- en: 'The `list-style-type` property, as well as all other list-related properties,
    can be applied only to an element that has a `display` of `list-item`, but CSS
    doesn’t distinguish between ordered and unordered list items. Thus, you can set
    an ordered list to use discs instead of numbers. In fact, the default value of
    `list-style-type` is `disc`, so you might theorize that without explicit declarations
    to the contrary, all lists (ordered or unordered) will use discs as the marker
    for each item. This would be logical, but, as it turns out, it’s up to the user
    agent to decide. Even if the user agent doesn’t have a predefined rule such as
    `ol {list-style-type: decimal;}`, it may prohibit ordered markers from being applied
    to unordered lists, and vice versa. You can’t count on this, so be careful.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`list-style-type` 属性，以及所有其他与列表相关的属性，只能应用于具有 `display: list-item` 的元素，但CSS不区分有序和无序列表项。因此，您可以设置有序列表使用圆点而不是数字。实际上，`list-style-type`
    的默认值是 `disc`，所以您可能会推断，没有明确声明的情况下，所有列表（有序或无序）都将使用圆点作为每个项目的标记。这是合乎逻辑的，但事实证明，这取决于用户代理。即使用户代理没有预定义的规则，如
    `ol {list-style-type: decimal;}`，它可能会禁止有序标记应用于无序列表，反之亦然。您不能依赖于此，请小心。'
- en: 'If you want to suppress the display of markers altogether, you should use `none`.
    This value causes the user agent to refrain from putting anything where the marker
    would ordinarily be, although it does not interrupt the counting in ordered lists.
    Thus, the following markup would have the result shown in [Figure 16-2](#list-style-type-markersoff):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想完全隐藏标记的显示，应该使用 `none`。这个值会导致用户代理在标记通常出现的地方不放置任何东西，尽管它不会中断有序列表的计数。因此，以下标记会产生
    [图16-2](#list-style-type-markersoff) 中显示的结果：
- en: '[PRE0]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![css5 1602](assets/css5_1602.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1602](assets/css5_1602.png)'
- en: Figure 16-2\. Switching off list-item markers
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-2\. 关闭列表项标记
- en: 'The `list-style-type` property is inherited, so if you want to have different
    styles of markers in nested lists, you’ll likely need to define them individually.
    You may also have to explicitly declare styles for nested lists because the user
    agent’s stylesheet may have already defined them. For example, assume that a user
    agent has the following styles defined:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`list-style-type`属性是继承的，因此如果你想在嵌套列表中使用不同样式的标记，你可能需要单独定义它们。你可能还需要显式地为嵌套列表声明样式，因为用户代理的样式表可能已经定义了这些。例如，假设用户代理已定义以下样式：'
- en: '[PRE2]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If this is the case—and it’s likely that this, or something like it, will be—you
    will have to declare your own styles to overcome the user agent’s styles. Inheritance
    won’t be enough.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情况确实如此——这种情况或类似情况很可能会出现——你将不得不声明自己的样式以覆盖用户代理的样式。继承将不足以应对。
- en: String markers
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符标记
- en: 'CSS also allows authors to supply string values as list markers. This opens
    the field to anything you can input from the keyboard, as long as you don’t mind
    having the same string used for every marker in the list. [Figure 16-3](#liststyletype-strings)
    shows the results of the following styles:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: CSS还允许作者提供字符串值作为列表标记。这打开了从键盘输入的任何内容的可能性，只要你不介意在列表中的每个标记使用相同的字符串。[图 16-3](#liststyletype-strings)展示了以下样式的结果：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![css5 1603](assets/css5_1603.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1603](assets/css5_1603.png)'
- en: Figure 16-3\. A sampling of string markers
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-3。字符串标记的示例
- en: List-Item Images
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表项图像
- en: Sometimes a regular text marker just won’t do. You might prefer to use an image
    for each marker, which is possible with the property `list-style-image`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有时普通文本标记可能不够用。你可能更喜欢为每个标记使用图像，这可以通过`list-style-image`属性实现。
- en: 'Here’s how it works:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的：
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Yes, it’s really that simple. One simple `url()` value, and you’re putting images
    in for markers, as you can see in [Figure 16-4](#list-style-image).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这么简单。一个简单的`url()`值，你就可以将图像用作标记，正如你在[图 16-4](#list-style-image)中所看到的。
- en: '![css5 1604](assets/css5_1604.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1604](assets/css5_1604.png)'
- en: Figure 16-4\. Using images as markers
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-4。使用图像作为标记
- en: 'List image markers are displayed at their full size, so exercise care in the
    images you use, as the example shown in [Figure 16-5](#list-style-image-bigmarkers)
    makes clear with its oversized markers:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 列表图像标记以其完整尺寸显示，因此在选择图像时要小心，正如[图 16-5](#list-style-image-bigmarkers)所示的示例清楚地表明了其超大尺寸的标记：
- en: '[PRE5]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![css5 1605](assets/css5_1605.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1605](assets/css5_1605.png)'
- en: Figure 16-5\. Using really big images as markers
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-5。使用超大图像作为标记
- en: 'It’s generally a good idea to provide a fallback marker type in case your image
    doesn’t load, gets corrupted, or is in a format that some user agents can’t display.
    Do this by defining a backup `list-style-type` for the list:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好提供一个备用的标记类型，以防你的图像不加载、损坏或者是一些用户代理不能显示的格式。通过为列表定义一个备用的`list-style-type`来实现这一点：
- en: '[PRE6]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The other thing you can do with `list-style-image` is set it to the default
    value of `none`. This is good practice because `list-style-image` is inherited,
    so any nested lists will pick up the image as the marker, unless you prevent that
    from happening:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过将`list-style-image`设置为默认值`none`来使用它。这是一个好的做法，因为`list-style-image`是继承的，所以任何嵌套列表将会继承该图像作为标记，除非你阻止这种情况发生：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the nested list inherits the item type `square` but has been set to use
    no image for its markers, squares are used for the markers in the nested list,
    as shown in [Figure 16-6](#list-style-image-sublists).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于嵌套列表继承了项目类型为`square`，但已设置为不使用图像作为其标记，因此在嵌套列表中使用方块作为标记，正如[图 16-6](#list-style-image-sublists)中所示。
- en: '![css5 1606](assets/css5_1606.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1606](assets/css5_1606.png)'
- en: Figure 16-6\. Switching off image markers in sublists
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-6。关闭子列表中的图像标记
- en: 'Any image value is permitted for `list-style-image`, including gradient images.
    Thus, the following styles would have a result like that shown in [Figure 16-7](#list-style-image-gradients):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`list-style-image`允许任何图像值，包括渐变图像。因此，以下样式将产生类似于[图 16-7](#list-style-image-gradients)所示的结果：'
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![css5 1607](assets/css5_1607.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1607](assets/css5_1607.png)'
- en: Figure 16-7\. Gradient list markers
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-7。渐变列表标记
- en: 'Gradient markers have one drawback: they tend to be very small. This can be
    influenced by factors such as font size, because the marker size tends to scale
    with the list item’s content. If you need to have full control over how the markers
    are rendered, don’t use `::marker`; use `::before` instead.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 渐变标记有一个缺点：它们往往非常小。这可能受到诸如字体大小之类的因素的影响，因为标记的大小往往随列表项内容的缩放而变化。如果你需要完全控制标记的渲染方式，不要使用`::marker`；而是使用`::before`。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The way to style list markers directly is the `::marker` pseudo-element, discussed
    later in this chapter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 直接样式化列表标记的方法是使用伪元素`::marker`，本章稍后将详细讨论。
- en: List-Marker Positions
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表标记位置
- en: 'There is another thing you can do to change the appearance of list items: decide
    whether the marker appears outside or inside the content of the list item. This
    is accomplished with `list-style-position`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一件事可以改变列表项的外观：决定标记是出现在列表项内容的外部还是内部。这可以通过`list-style-position`来实现。
- en: 'If a marker’s position is set to `outside` (the default), it will appear the
    way list items have since the beginning of the web. Should you desire a slightly
    different appearance, you can pull the marker in toward the content by setting
    the value of `list-style-position` to `inside`. This causes the marker to be placed
    “inside” the list item’s content. The exact way this happens is undefined, but
    [Figure 16-8](#list-style-position) shows one possibility:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标记的位置设置为`outside`（默认值），它将以网页开始时列表项的方式显示。如果您希望外观略有不同，可以通过将`list-style-position`的值设置为`inside`来将标记拉向内容。这将导致标记位于列表项内容的“内部”。确切的方式未定义，但[图 16-8](#list-style-position)展示了一种可能性：
- en: '[PRE9]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![css5 1608](assets/css5_1608.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1608](assets/css5_1608.png)'
- en: Figure 16-8\. Placing the markers inside and outside list items
  id: totrans-157
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-8\. 将标记放置在列表项内部和外部
- en: In practice, markers given an `inside` placement are treated as if they’re an
    inline element inserted into the beginning of the list item’s content. This doesn’t
    mean the markers *are* inline elements. You can’t style them separately from the
    rest of the element’s content, unless you wrap all the other content in an element
    like `<span>`, or else address them directly (but with major limitations on what
    properties are allowed) by using `::marker`. It’s just that in layout terms, that’s
    what they act like.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，给定`inside`位置的标记被视为插入到列表项内容开头的内联元素。这并不意味着标记*是*内联元素。除非您将所有其他内容包装在像`<span>`这样的元素中，或者直接（但对允许的属性有严格限制）通过使用`::marker`直接处理它们，否则您无法与元素的其他内容单独样式化它们。只是在布局术语上，它们表现得像这样。
- en: List Styles in Shorthand
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩写的列表样式
- en: 'For brevity’s sake, you can combine the three list-style properties into a
    convenient single property: `list-style`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，您可以将这三个`list-style`属性合并为一个便捷的单一属性：`list-style`。
- en: 'For example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE10]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As shown in [Figure 16-9](#list-style), all three values can be applied to list
    items at the same time.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 16-9](#list-style)所示，所有三个值可以同时应用于列表项。
- en: '![css5 1609](assets/css5_1609.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1609](assets/css5_1609.png)'
- en: Figure 16-9\. Bringing it all together
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-9\. 将一切汇总
- en: 'The values for `list-style` can be listed in any order, and any can be omitted.
    As long as one is present, the rest will fill in their default values. For instance,
    the following two rules will have the same visual effect:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`list-style`的值可以按任意顺序列出，也可以省略任何一个。只要有一个存在，其余的将填充它们的默认值。例如，以下两条规则将有相同的视觉效果：'
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'They will also override any previous rules in the same way. For example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还将覆盖任何先前的规则。例如：
- en: '[PRE12]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The result will be the same as that in [Figure 16-9](#list-style) because the
    implied `list-style-type` value of `disc` will override the previous declared
    value of `square`, just as the explicit value of `disc` overrides it in the second
    rule.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将与[图 16-9](#list-style)中的结果相同，因为隐含的`list-style-type`值`disc`将覆盖先前声明的`square`值，就像显式值`disc`在第二条规则中覆盖它一样。
- en: List Layout
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表布局
- en: Now that we’ve looked at the basics of styling list markers, let’s consider
    how lists are laid out in various browsers. We’ll start with a set of three list
    items devoid of any markers and not yet placed within a list, as shown in [Figure 16-10](#list-layout-threeitems).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了样式化列表标记的基础知识，让我们来考虑在各种浏览器中如何布局列表。我们将从一组三个没有任何标记且尚未放置在列表中的列表项开始，如[图 16-10](#list-layout-threeitems)所示。
- en: '![css5 1610](assets/css5_1610.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1610](assets/css5_1610.png)'
- en: Figure 16-10\. Three list items
  id: totrans-174
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-10\. 三个列表项
- en: The border around the list items shows them to be, essentially, like block-level
    elements. Indeed, the value `list-item` is defined to generate a block box. Now
    let’s add markers, as illustrated in [Figure 16-11](#list-layout-threeitems-markers).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 列表项周围的边框显示它们本质上类似于块级元素。事实上，值`list-item`被定义为生成块级盒子。现在让我们添加标记，如[图 16-11](#list-layout-threeitems-markers)所示。
- en: '![css5 1611](assets/css5_1611.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1611](assets/css5_1611.png)'
- en: Figure 16-11\. Markers are added
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-11\. 添加了标记
- en: The distance between the marker and the list item’s content is not defined by
    CSS, and CSS does not as yet provide a way to directly affect that distance.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 标记与列表项内容之间的距离未由 CSS 定义，而 CSS 目前还没有提供直接影响该距离的方法。
- en: 'With the markers outside the list items’ content, they don’t affect the layout
    of other elements, nor do they really even affect the layout of the list items
    themselves. They just hang a certain distance from the edge of the content, and
    wherever the content edge goes, the marker will follow. The behavior of the marker
    works much as though the marker were absolutely positioned in relation to the
    list-item content, something like `position: absolute; left: -1.5em;`. When the
    marker is inside, it acts like an inline element at the beginning of the content.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '当标记位于列表项内容外部时，它们不会影响其他元素的布局，甚至不会真正影响列表项本身的布局。它们只是距离内容边缘一定距离悬挂，无论内容边缘去哪里，标记都会跟随。标记的行为很像标记在相对于列表项内容绝对定位的情况下，类似于`position:
    absolute; left: -1.5em;`。当标记在内部时，它就像一个内联元素位于内容开头。'
- en: So far, we have yet to add an actual list container; neither a `<ul>` nor an
    `<ol>` element is represented in the figures. We can add one to the mix, as shown
    in [Figure 16-12](#list-layout-threeitems-listborder) (it’s represented by a dashed
    border).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们尚未添加实际的列表容器；图示中既没有`<ul>`也没有`<ol>`元素。我们可以将它们加入到混合中，如[图16-12](#list-layout-threeitems-listborder)所示（用虚线边框表示）。
- en: '![css5 1612](assets/css5_1612.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1612](assets/css5_1612.png)'
- en: Figure 16-12\. Adding a list border
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-12\. 添加列表边框
- en: As with the list items, the unordered-list element generates a block box, one
    that encompasses its descendant elements. As [Figure 16-12](#list-layout-threeitems-listborder)
    illustrates, the markers are placed not only outside the list item contents, but
    also outside the content area of the unordered-list element. The usual “indentation”
    you expect from lists has not yet been specified.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表项一样，无序列表元素生成一个块级框，包含其后代元素。如[图16-12](#list-layout-threeitems-listborder)所示，标记不仅放置在列表项内容外部，也放置在无序列表元素的内容区域外。您期望从列表中看到的常规“缩进”尚未指定。
- en: 'Most browsers, as of this writing, indent list items by setting either padding
    or margins for the containing list element. For example, the user agent might
    apply a rule such as this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器，在本文写作时，通过设置包含列表元素的填充或边距来缩进列表项。例如，用户代理可能会应用如下规则：
- en: '[PRE13]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Most browsers use a rule that’s something like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器使用类似以下规则：
- en: '[PRE14]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Neither is incorrect, but because browsers can, and have, changed the way they
    indent list content, we recommend including values for both properties when trying
    to eliminate the indentation of the list items. [Figure 16-13](#list-layout-padding-v-margin)
    compares the two approaches.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都没有错，但由于浏览器可以且已经改变了它们缩进列表内容的方式，我们建议在试图消除列表项缩进时同时包含这两个属性的值。[图16-13](#list-layout-padding-v-margin)比较了这两种方法。
- en: '![css5 1613](assets/css5_1613.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1613](assets/css5_1613.png)'
- en: Figure 16-13\. Margins and padding as indentation devices
  id: totrans-190
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-13\. 边距和填充作为缩进设备
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The distance `40px` is a relic of early web browsers, which indented lists by
    a pixel amount. (Block quotes are indented by the same distance.) A good alternate
    value might be something like `2.5em`, which would scale the indentation along
    with changes in the text size and is also equal to `40px`, assuming a default
    font size of 16 pixels.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 距离`40px`是早期 Web 浏览器的遗留物，它们通过像素量来缩进列表（块引用也是以相同距离缩进的）。一个很好的替代值可能是`2.5em`，它会随文本大小的变化而缩放，并且在默认字体大小为16像素时也等于`40px`。
- en: 'For authors who want to change the indentation distance of lists, we strongly
    recommend specifying both padding and margins to ensure cross-browser compatibility.
    For example, if you want to use padding to indent a list, use this rule:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望更改列表缩进距离的作者，我们强烈建议同时指定填充和边距，以确保跨浏览器的兼容性。例如，如果您想使用填充来缩进列表，请使用以下规则：
- en: '[PRE15]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you prefer margins, write something like this instead:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用边距，可以这样写：
- en: '[PRE16]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In either case, remember that the markers will be placed relative to the contents
    of the list items, and may therefore “hang” outside the main text of a document
    or even beyond the edge of the browser window. This is most easily observed if
    very large images, or long text strings, are used for the list markers, as shown
    in [Figure 16-14](#list-layout-big-markers).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，记住标记将相对于列表项的内容放置，因此可能“悬挂”在文档的主文本之外，甚至超出浏览器窗口的边缘。如果使用非常大的图像或长文本字符串作为列表标记，这最容易观察，如在[图 16-14](#list-layout-big-markers)中所示。
- en: '![css5 1614](assets/css5_1614.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1614](assets/css5_1614.png)'
- en: Figure 16-14\. Large markers and list layout
  id: totrans-199
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-14\. 大标记和列表布局
- en: The ::marker Pseudo-Element
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`::marker`伪元素'
- en: One feature many authors request is the ability to control the space between
    a marker and the content of a list item, or to change the size or color of a list
    marker independently of the contents of the list items.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 许多作者要求的一个功能是能够控制标记和列表项内容之间的空间，或者独立于列表项内容更改列表标记的大小或颜色。
- en: 'List markers can be styled, to a limited extent, with the pseudo-element `::marker`.
    The properties allowed for `::marker` rules as of late 2022 are as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 列表标记可以在一定程度上用伪元素`::marker`进行样式设置。截至2022年底，`::marker`规则允许的属性如下：
- en: '`content`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`'
- en: '`color`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`'
- en: '`text-combine-upright`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text-combine-upright`'
- en: '`unicode-bidi`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode-bidi`'
- en: '`direction`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`direction`'
- en: '`white-space`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`white-space`'
- en: All the `font-*` properties
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的`font-*`属性
- en: All the transition and animation properties
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的过渡和动画属性
- en: You may have noticed that no element-sizing or other box model properties such
    as margins are included, which puts a damper on a lot of authors’ desires for
    marker styling. More properties may be added in the future, but for now, that’s
    what we have.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，没有包括任何元素大小或其他盒模型属性，例如边距，这对于许多作者希望的标记样式构成了阻碍。未来可能会添加更多属性，但目前只有这些。
- en: 'A few examples of marker styling, as declared here, are illustrated in [Figure 16-15](#marker-pseudo-examples):'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 几个标记样式的示例，如在[图 16-15](#marker-pseudo-examples)中声明的：
- en: '[PRE17]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![css5 1615](assets/css5_1615.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1615](assets/css5_1615.png)'
- en: Figure 16-15\. Examples of marker styling
  id: totrans-216
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-15\. 标记样式示例
- en: Notice that the result of doubling a marker’s font size differs between the
    ordered and unordered versions of this list. This comes down to the different
    default sizing and placement of the two marker types. As previously noted, the
    amount of control you have over markers is limited, even markers defined with
    `content`. So when you absolutely must have complete creative freedom with your
    markers, it’s usually better to build your own with generated content or marked-up
    inline content.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于本列表的有序和无序版本，倍增标记字体大小的结果不同。这归结于两种标记类型的不同默认大小和放置方式。正如前面所述，您对标记的控制程度有限，即使使用`content`定义了标记。因此，当您绝对需要完全创意自由时，通常最好使用生成内容或标记的内联内容来构建自己的标记。
- en: Creating Generated Content
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建生成的内容
- en: CSS defines methods to create *generated content*. This is content inserted
    via CSS, but not represented by either markup or content.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: CSS定义了创建*生成内容*的方法。这是通过CSS插入的内容，但不由标记或内容表示。
- en: For example, list markers are generated content. Nothing in the markup of a
    list item directly represents the markers, and you, the author, do not have to
    write the markers into your document’s content. The browser simply generates the
    appropriate marker automatically. For unordered lists, the marker will have a
    symbol of some kind, such as a circle, disc, or square. In ordered lists, the
    marker is by default a counter that increments by one for each successive list
    item. (Or, as you saw in previous sections, you may replace either kind with an
    image or symbol—and, as you’ll see in just a bit, anything supported by the `content`
    property.)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，列表标记是生成的内容。列表项的标记没有直接在标记中表示，作者无需将标记写入文档内容中。浏览器会自动生成适当的标记。对于无序列表，标记将具有某种符号，如圆圈、圆盘或方形。对于有序列表，默认情况下，标记是一个按顺序递增的计数器，每个连续的列表项递增一次。（或者，正如您在前几节中看到的那样，您可以用图像或符号替换任一种类—正如您稍后将看到的，任何由`content`属性支持的内容。）
- en: To understand how you can affect list markers and customize the counting of
    ordered lists (or anything else!), you must first look at more basic generated
    content.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何影响列表标记并自定义有序列表的计数（或其他任何内容！），您必须首先查看更基本的生成内容。
- en: Inserting Generated Content
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入生成的内容
- en: To insert generated content into the document, use the `::before` and `::after`
    pseudo-elements. These place generated content before or after the content of
    an element by way of the `content` property (described in the next section).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要将生成的内容插入文档中，请使用 `::before` 和 `::after` 伪元素。通过 `content` 属性（在下一节中描述），这些伪元素可以在元素的内容之前或之后放置生成的内容。
- en: 'For example, you might want to precede every hyperlink with the text “(link)”
    to mark them when the page is printed out. This is accomplished with a media query
    and rule like the following, which has the effect shown in [Figure 16-16](#generated-content-text):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能希望在每个超链接前面加上文本“(link)”以便在打印页面时标记它们。可以通过媒体查询和以下规则来实现这一效果，如 [图 16-16](#generated-content-text)
    所示：
- en: '[PRE19]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![css5 1616](assets/css5_1616.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1616](assets/css5_1616.png)'
- en: Figure 16-16\. Generating text content
  id: totrans-227
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-16\. 生成文本内容
- en: 'Note that there isn’t a space between the generated content and the element
    content. This is because the value of `content` in the previous example doesn’t
    include a space. You could modify the declaration as follows to make sure there’s
    a space between generated and actual content:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 注意生成的内容和元素内容之间没有空格。这是因为前面例子中的 `content` 的值不包括空格。可以修改声明如下以确保生成和实际内容之间有空格：
- en: '[PRE20]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It’s a small difference but an important one.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小差异，但是一个重要的差异。
- en: 'In a similar manner, you might choose to insert a small icon at the end of
    links to PDF documents. The rule to accomplish this would look something like
    this:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可能选择在 PDF 文档链接的末尾插入一个小图标。实现这一效果的规则会类似于这样：
- en: '[PRE21]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Suppose you want to further style such links by placing a border around them.
    This is done with a second rule, shown in [Figure 16-17](#generated-content-icons):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想通过给这些链接周围加上边框来进一步样式化它们。这可以通过第二条规则来完成，如 [图 16-17](#generated-content-icons)
    所示：
- en: '[PRE22]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![css5 1617](assets/css5_1617.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1617](assets/css5_1617.png)'
- en: Figure 16-17\. Generating icons
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-17\. 生成图标
- en: Notice that the link border extends around the generated content, just as the
    link underline extends under the “(link)” text in [Figure 16-16](#generated-content-text).
    This happens because by default, generated content is placed inside the element
    box of the element (unless the generated content is a list marker).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 注意链接边框围绕生成的内容扩展，就像链接下划线围绕 [图 16-16](#generated-content-text) 中的“(link)”文本一样。这是因为默认情况下，生成的内容被放置在元素的元素框内（除非生成的内容是列表标记）。
- en: 'You can float or position generated content outside its parent element’s box.
    All `display` values can be given to generated content; you can apply block formatting
    to the generated content of an inline box, and vice versa. For example, consider
    this:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以浮动或定位生成的内容到其父元素框之外。可以给生成的内容的所有 `display` 值，可以将块格式应用于内联框的生成内容，反之亦然。例如，考虑这个例子：
- en: '[PRE24]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Even though `em` is an inline element, the generated content will generate
    a block box. Similarly, given the following code, the generated content is made
    block-level instead of remaining the default of `inline`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 `em` 是内联元素，生成的内容也会生成一个块级盒子。同样地，给定以下代码，生成的内容将变成块级而不是保持默认的 `inline`：
- en: '[PRE25]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[Figure 16-18](#generated-content-block) shows the result.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-18](#generated-content-block) 展示了结果。'
- en: '![css5 1618](assets/css5_1618.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1618](assets/css5_1618.png)'
- en: Figure 16-18\. Generating block-level content
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-18\. 生成块级内容
- en: 'One interesting aspect of generated content is that it inherits values from
    the element to which it’s been attached. Thus, given the following rules, the
    generated text will be green, the same as the content of the paragraphs:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 生成内容的一个有趣的方面是它继承来自其附加到的元素的值。因此，给定以下规则，生成的文本将是绿色的，与段落内容相同：
- en: '[PRE26]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you want the generated text to be purple instead, a simple declaration will
    suffice:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想生成的文本是紫色的，只需一个简单的声明即可：
- en: '[PRE27]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Such value inheritance happens only with inherited properties, of course. This
    is worth noting because it influences the way certain effects must be approached.
    Consider the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种值的继承只发生在继承属性中。这点值得注意，因为它影响了处理某些效果的方式。考虑以下情况：
- en: '[PRE28]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Since the generated content is placed inside the element box of the `<h1>`,
    it will be placed under the top border of the element. It would also be placed
    within any padding, as shown in [Figure 16-19](#generated-content-placement).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成的内容被放置在 `<h1>` 元素的元素框内，它将被放置在元素顶部边框下方。它还会被放置在任何填充内，如 [图 16-19](#generated-content-placement)
    所示。
- en: '![css5 1619](assets/css5_1619.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1619](assets/css5_1619.png)'
- en: Figure 16-19\. Taking placement into account
  id: totrans-254
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-19\. 考虑放置位置
- en: 'The bottom margin of the generated content, which has been made block-level,
    pushes the actual content of the element downward by half an em. In every sense,
    the effect of the generated content in this example is to break the `<h1>` element
    into two pieces: the generated-content box and the actual content box. This happens
    because the generated content has `display: block`. If you were to change it to
    `display: inline` (or remove the `display:block;` entirely), the effect would
    be as shown in [Figure 16-20](#generated-content-inline):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '已被设置为块级的生成内容的底部边距将通过半个em向下推动元素的实际内容。在这个例子中，生成的内容的效果是将`<h1>`元素分成两部分：生成内容框和实际内容框。这是因为生成的内容具有`display:
    block`。如果您将其更改为`display: inline`（或完全删除`display:block;`），效果将如[图 16-20](#generated-content-inline)所示：'
- en: '[PRE29]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![css5 1620](assets/css5_1620.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1620](assets/css5_1620.png)'
- en: Figure 16-20\. Changing the generated content to be inline
  id: totrans-258
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-20\. 将生成内容更改为内联
- en: Note how the borders are placed and how the top padding is still honored. So
    is the bottom margin on the generated content, but since the generated content
    is now inline and margins don’t affect line height, the margin has no visible
    effect.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 注意边框的放置方式以及顶部填充仍然受到尊重。所生成内容的底部边距也受到尊重，但由于生成的内容现在是内联的，边距不影响行高，因此边距没有可见效果。
- en: With the basics of generating content established, let’s take a closer look
    at the way the actual generated content is specified.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 基本生成内容的介绍完成后，让我们更仔细地看一下如何指定实际生成的内容。
- en: Specifying Content
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定内容
- en: If you’re going to generate content, you need a way to describe it. As you’ve
    already seen, this is handled with the `content` property, but there’s a great
    deal more to this property than you’ve seen thus far.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要生成内容，您需要一种描述它的方法。正如您已经看到的，这是通过`content`属性处理的，但是这个属性比您迄今所见到的要复杂得多。
- en: You’ve already seen string and URI values in action, and counters are covered
    later in this chapter. Let’s talk about strings and URIs in a little more detail
    before we take a look at the `attr()` and quote values.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在操作中看到了字符串和URI值，本章稍后会涵盖计数器。在我们查看`attr()`和引号值之前，让我们稍微详细讨论一下字符串和URI。
- en: 'String values are presented literally, even if they contain what would otherwise
    be markup of some kind. Therefore, the following rule would be inserted verbatim
    into the document, as shown in [Figure 16-21](#generated-content-strings-verbatim):'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串值是按照字面方式呈现的，即使它们包含本质上应该是某种标记的内容。因此，下面的规则将被直接插入到文档中，如[图 16-21](#generated-content-strings-verbatim)所示：
- en: '[PRE30]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![css5 1621](assets/css5_1621.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1621](assets/css5_1621.png)'
- en: Figure 16-21\. Strings are displayed verbatim
  id: totrans-267
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-21\. 字符串会原样显示
- en: 'This means that if you want a newline (return) as part of your generated content,
    you can’t use `<br>`. Instead, you use the string `\A`, or `\00000a`, which is
    the CSS way of representing a newline (based on the Unicode line-feed character,
    which is hexadecimal position `A`). Conversely, if you have a long string value
    and need to break it up over multiple lines, you escape out the line feeds with
    the `\` character. These are both demonstrated by the following rule and illustrated
    in [Figure 16-22](#generated-content-strings-newlines):'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果您希望换行（回车）作为生成内容的一部分，您不能使用`<br>`。而是使用字符串`\A`或`\00000a`，这是表示换行的CSS方式（基于Unicode换行字符，其十六进制位置为`A`）。相反，如果您有一个长字符串值并需要将其分成多行，则使用`\`字符转义换行符。以下规则示例演示了这两者，并在[图
    16-22](#generated-content-strings-newlines)中进行了说明：
- en: '[PRE31]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![css5 1622](assets/css5_1622.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1622](assets/css5_1622.png)'
- en: Figure 16-22\. Inserting and suppressing newlines
  id: totrans-271
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-22\. 插入和抑制换行符
- en: You can also use escapes to refer to hexadecimal Unicode values, such as `\00AB`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用转义来引用十六进制Unicode值，例如`\00AB`。
- en: Warning
  id: totrans-273
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of this writing, while inserting escaped content such as `\279c` is very
    well-supported, some browsers don’t support the escaped newline character `\A`
    or `\0000a`, and no browsers support `\A` unless you add a space after it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在插入转义内容（如`\279c`）方面得到了很好的支持，但是某些浏览器不支持转义换行符`\A`或`\0000a`，且没有浏览器支持`\A`，除非在其后添加空格。
- en: With URI values, you point to an external resource (an image, movie, sound clip,
    or anything else the user agent supports), which is then inserted into the document
    in the appropriate place. If the user agent can’t support the resource you point
    it to for any reason—say, you try to insert a movie into a document when it’s
    being printed—then the user agent is required to ignore the resource completely,
    and nothing will be inserted.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 URI 值，可以指向外部资源（例如图像、电影、声音剪辑或用户代理支持的任何其他内容），然后将其插入到文档的适当位置。如果用户代理因任何原因无法支持您指向的资源（例如，尝试在打印文档时插入电影），则用户代理必须完全忽略该资源，不会插入任何内容。
- en: Inserting attribute values
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入属性值
- en: 'Sometimes you might want to take the value of an element’s attribute and make
    it a part of the document display. To pick a simple example, you can place the
    value of every link’s `href` attribute immediately after the links, like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能希望获取元素属性的值并使其成为文档显示的一部分。举个简单的例子，您可以将每个链接的 `href` 属性的值立即放在链接后面，如下所示：
- en: '[PRE32]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Again, this leads to the problem of the generated content running smack into
    the actual content. To solve this, add some string values to the declaration,
    with the result shown in [Figure 16-23](#generated-content-strings-attr-urls):'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作可能导致生成的内容直接与实际内容相撞。为解决此问题，可以在声明中添加一些字符串值，其结果如 [图 16-23](#generated-content-strings-attr-urls)
    所示：
- en: '[PRE33]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![css5 1623](assets/css5_1623.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1623](assets/css5_1623.png)'
- en: Figure 16-23\. Inserting URLs
  id: totrans-282
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-23\. 插入 URL
- en: 'This can be useful for print stylesheets, as an example. Any attribute value
    can be inserted as generated content: `alt` text, `class` or `id` values—anything.
    An author might choose to make the citation information explicit for a block quote,
    like this:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这对打印样式表非常有用。可以插入任何属性值作为生成的内容：`alt` 文本、`class` 或 `id` 值等。作者可以选择使引用信息对块引用明确化，如下所示：
- en: '[PRE34]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For that matter, a more complicated rule might reveal the text- and link-color
    values for a legacy document:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他复杂的规则，可能会显示传统文档的文本和链接颜色值：
- en: '[PRE35]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that if an attribute doesn’t exist, an empty string is put in its place.
    This is what happens in [Figure 16-24](#generated-content-attr-missing), in which
    the previous example is applied to a document whose `body` element has no `alink`
    attribute.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果属性不存在，则会放置一个空字符串。这在 [图 16-24](#generated-content-attr-missing) 中有所体现，该示例应用于一个
    `body` 元素没有 `alink` 属性的文档。
- en: '![css5 1624](assets/css5_1624.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1624](assets/css5_1624.png)'
- en: Figure 16-24\. Missing attributes are skipped
  id: totrans-289
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-24\. 跳过缺失的属性
- en: 'The text “Active: ” (including the trailing space) is inserted into the document,
    as you can see, but nothing follows it. This is convenient when you want to insert
    the value of an attribute only when it exists.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '文本 “Active: ”（包括尾随空格）被插入到文档中，正如您所见，但后面没有内容跟随。当您希望仅在存在属性时插入属性值时，这非常方便。'
- en: Warning
  id: totrans-291
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: CSS defines the returned value of an attribute reference as an unparsed string.
    Therefore, if the value of an attribute contains markup or character entities,
    they will be displayed verbatim.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 定义属性引用的返回值为未解析字符串。因此，如果属性值包含标记或字符实体，它们将按原样显示。
- en: Using generated quotes
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用生成的引号
- en: A specialized form of generated content is the quotation mark, and CSS provides
    a powerful way to manage both quotes and their nesting behavior. This is possible
    because of the pairing of content values like `open-quote` and the property `quotes`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 生成内容的一个专门形式是引号，CSS 提供了一种强大的方式来管理引号及其嵌套行为。这是可能的，因为可以像 `open-quote` 和 `quotes`
    属性一样对内容值进行配对。
- en: 'Other than the keywords `none` and `inherit`, the only valid value is one or
    more *pairs* of strings, with the first in each pair being a value for `open-quote`
    and the second being a `close-quote` value. The first string of the pair defines
    the open-quote symbol, and the second defines the close-quote symbol. Therefore,
    of the following two declarations, only the first is valid:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 除了关键字 `none` 和 `inherit` 外，唯一有效的值是一个或多个*字符串对*，每对中的第一个值是 `open-quote` 的值，第二个值是
    `close-quote` 的值。因此，在以下两个声明中，只有第一个是有效的：
- en: '[PRE36]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The first rule also illustrates one way to put string quotes around the strings
    themselves. The double quotation marks are surrounded by single quotation marks,
    and vice versa.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个规则还说明了在字符串周围放置字符串引号的一种方法。双引号由单引号包围，反之亦然。
- en: 'Let’s look at a simple example. Suppose you’re creating an XML format to store
    a list of favorite quotations. Here’s one entry in the list:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子。假设您正在创建一个用于存储喜爱引用的 XML 格式。以下是列表中的一个条目：
- en: '[PRE37]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To present the data in a useful way, you could employ the following rules,
    with the result shown in [Figure 16-25](#generated-content-quotes):'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以有用的方式呈现数据，您可以使用以下规则，并显示结果如 [图 16-25](#generated-content-quotes) 所示：
- en: '[PRE38]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![css5 1625](assets/css5_1625.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1625](assets/css5_1625.png)'
- en: Figure 16-25\. Inserting quotes and other content
  id: totrans-303
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-25\. 插入引号和其他内容
- en: The values `open-quote` and `close-quote` are used to insert whatever quoting
    symbols are appropriate (since different languages have different quotation marks).
    They use the value of quotes to determine how they should work. Thus, the quotation
    begins and ends with a double quotation mark.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 值`open-quote`和`close-quote`用于插入适当的引号符号（因为不同语言有不同的引号）。它们使用引用的值来确定它们应该如何工作。因此，引号以双引号开始和结束。
- en: 'With `quotes`, you can define quotation patterns to as many nesting levels
    as you like. In American English, for example, a common practice is to start out
    with a double quotation mark and then use single quotation marks for the quotation
    nested inside the first one. This can be re-created with *curly* quotation marks
    by using the following rules:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`引号`可以定义引号模式，可以嵌套到任意深度。例如，在美国英语中，一个常见的做法是从双引号开始，然后在第一个引号内部使用单引号。可以通过以下规则使用*花括号*引号重现此操作：
- en: '[PRE39]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When applied to the following XML, these rules will have the effect shown in
    [Figure 16-26](#generated-content-quotes-nested):'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于以下 XML 时，这些规则将产生 [图 16-26](#generated-content-quotes-nested) 所示的效果：
- en: '[PRE40]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![css5 1626](assets/css5_1626.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1626](assets/css5_1626.png)'
- en: Figure 16-26\. Nested curly quotes
  id: totrans-310
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-26\. 嵌套的花括号引号
- en: 'If the nested level of quotation marks is greater than the number of defined
    pairs, the last pair is reused for the deeper levels. Thus, if we had applied
    the following rule to the markup shown in [Figure 16-26](#generated-content-quotes-nested),
    the inner quote would have had double quotation marks, the same as the outer quote:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果引号的嵌套级别大于定义的配对数，则深层级别将重复使用最后一个配对。因此，如果我们将以下规则应用于 [图 16-26](#generated-content-quotes-nested)
    中显示的标记，则内部引号将使用双引号，与外部引号相同：
- en: '[PRE41]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tip
  id: totrans-313
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: These particular rules use the hexadecimal Unicode positions for the curly quote
    symbols. If your CSS uses UTF-8 character encoding (and it really should), you
    can skip the escaped hexadecimal position approach and include just the curly
    quote characters directly, as in previous examples.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特定规则使用花括号引号符号的十六进制 Unicode 位置。如果您的 CSS 使用 UTF-8 字符编码（实际上应该如此），则可以跳过转义的十六进制位置方法，直接包含花括号引号字符，就像前面的示例一样。
- en: 'Generated quotes make possible one other common typographic effect. When quoted
    text spans several paragraphs, the `close-quote` of each paragraph is often omitted;
    only the opening quote marks are shown, with the exception of the last paragraph.
    This can be re-created using the `no-close-quote` value:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的引号使得另一种常见的排版效果成为可能。当引用文本跨越多个段落时，通常省略每个段落的`close-quote`；仅显示开头的引号标记，除了最后一个段落。可以使用`no-close-quote`值重现此效果：
- en: '[PRE42]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This will start each paragraph with a double quotation mark but no closing mark.
    This is true of the last paragraph as well, so the fourth line in the previous
    code block inserts a close quote at the end of the last paragraph.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使每个段落以双引号开头，但没有结束标记。对于最后一个段落也是如此，因此前一个代码块的第四行在最后一个段落的末尾插入了闭合引号。
- en: This value is important because it decrements the quotation nesting level without
    generating a symbol. This is why each paragraph starts with a double quotation
    mark, instead of alternating between double and single marks, until the third
    paragraph is reached. The `no-close-quote` value closes the quotation nesting
    at the end of each paragraph, and thus every paragraph starts at the same nesting
    level.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 此值很重要，因为它减少了引号的嵌套级别而不生成符号。这就是为什么每个段落都以双引号开头，而不是在第三段落之前交替使用双引号和单引号。`no-close-quote`值在每个段落结束时关闭引用嵌套，因此每个段落都以相同的嵌套级别开头。
- en: This is significant because, as the CSS2.1 specification notes, “Quoting depth
    is independent of the nesting of the source document or the formatting structure.”
    In other words, when you start a quotation level, it persists across elements
    until a `close-quote` is encountered, and the quote nesting level is decremented.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为CSS2.1规范指出：“引用深度与源文档的嵌套或格式结构无关。”换句话说，当您开始一个引用级别时，它在元素之间保持，直到遇到`close-quote`，引用嵌套级别将递减。
- en: For the sake of completeness, there is a `no-open-quote` keyword, which has
    a symmetrical effect to `no-close-quote`. This keyword increments the quotation
    nesting level by one but does not generate a symbol.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，还有一个`no-open-quote`关键字，其对称地与`no-close-quote`具有相同的效果。此关键字将引用嵌套级别增加一级，但不生成符号。
- en: Defining Counters
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义计数器
- en: Counters are probably familiar to you, even if you don’t realize it; for example,
    the markers of the list items in ordered lists are counters. Two properties and
    two `content` values make it possible to define almost any counting format, including
    subsection counters employing multiple styles, such as “VII.2.c.”
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您没有意识到，您可能也熟悉计数器；例如，有序列表中的列表项标记即为计数器。两个属性和两个`content`值几乎可以定义任何计数格式，包括使用多种样式的子节计数器，例如“VII.2.c”。
- en: Resetting and incrementing
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重置和递增
- en: We create counters by setting the starting point for a counter and then incrementing
    it by a specified amount. The former is handled by the property `counter-reset`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设置计数器的起始点然后按指定数量增加来创建计数器。前者由属性`counter-reset`处理。
- en: 'A *counter identifier* is simply a label created by the author. For example,
    you might name your subsection counter `subsection`, `subsec`, `ss`, or `bob`.
    The simple act of resetting (or incrementing) an identifier is sufficient to call
    it into being. In the following rule, the counter `chapter` is defined as it is
    reset:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '*计数器标识符*只是作者创建的标签。例如，您可能会将子节计数器命名为`subsection`、`subsec`、`ss`或`bob`。仅仅通过重置（或增加）一个标识符就足以将其调用出来。在以下规则中，计数器`chapter`被定义为其被重置的方式：'
- en: '[PRE43]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'By default, a counter is reset to 0\. If you want to reset to a different number,
    you can declare that number following the identifier:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，计数器被重置为0。如果您想重置为不同的数字，可以在标识符后声明该数字：
- en: '[PRE44]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can also reset multiple identifiers all at once by listing space-separated
    identifier-integer pairs. If you leave out an integer, it defaults to 0:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过列出空格分隔的标识符-整数对一次性重置多个标识符。如果省略整数，则默认为0：
- en: '[PRE45]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As you can see from the previous example, negative values are permitted. It
    would be perfectly legal to set a counter to `-32768` and count up from there.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，可以使用负值。将计数器设置为`-32768`并从那里开始计数是完全合法的。
- en: Warning
  id: totrans-332
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: CSS does not define what user agents should do with negative counter values
    in nonnumeric counting styles. For example, there is no defined behavior for what
    to do if a counter’s value is `-5` but its display style is `upper-alpha`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: CSS未定义用户代理在非数字计数样式中处理负计数值的行为。例如，如果计数器的值为`-5`，但其显示样式为`upper-alpha`，则没有定义的行为。
- en: To count up or down, you’ll need a property to indicate that an element increments
    or decrements a counter. Otherwise, the counter would remain at whatever value
    it was given with a `counter-reset` declaration. The property in question is,
    not surprisingly, `counter-increment`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行计数，您需要一个属性来指示元素增加或减少计数器。否则，计数器将保持`counter-reset`声明给定的任何值。相关属性是`counter-increment`。
- en: Like `counter-reset`, `counter-increment` accepts identifier-integer pairs,
    and the integer portion of these pairs can be 0 or negative as well as positive.
    The difference is that if an integer is omitted from a pair in `counter-increment`,
    it defaults to 1, not 0.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 与`counter-reset`类似，`counter-increment`接受标识符-整数对，这些对中的整数部分可以是0或负数，也可以是正数。区别在于，如果从对中省略整数，它默认为1，而不是0。
- en: 'As an example, here’s how a user agent might define counters to re-create the
    traditional 1, 2, 3 counting of ordered lists:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，这是用户代理如何定义计数器以重新创建有序列表的传统计数方式1、2、3的方式：
- en: '[PRE46]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'On the other hand, an author might want to count backward from 0 so that the
    list items use a rising negative system. This would require only a small edit:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，作者可能希望从0开始倒数，以便列表项使用上升负数系统。这只需要进行小修改：
- en: '[PRE47]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The counting of lists would then be –1, –2, –3, and so on. If you replaced the
    integer `-1` with `-2`, lists would count –2, –4, –6, and so on.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的计数将会是 -1、-2、-3 等。如果用整数 `-1` 替换 `-2`，列表将会是 -2、-4、-6 等。
- en: Displaying counters
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示计数器
- en: 'To display the counters, you need to use the `content` property in conjunction
    with one of the counter-related values. To see how this works, let’s use an XML-based
    ordered list:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示计数器，你需要在`content`属性中与计数器相关的值结合使用。为了演示其工作原理，让我们使用基于 XML 的有序列表：
- en: '[PRE48]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'By applying the following rules to XML employing this structure, you would
    get the result shown in [Figure 16-27](#counters-counting-items):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将以下规则应用于使用此结构的 XML，你将获得[图 16-27](#counters-counting-items)中显示的结果：
- en: '[PRE49]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![css5 1627](assets/css5_1627.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1627](assets/css5_1627.png)'
- en: Figure 16-27\. Counting the items
  id: totrans-347
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-27\. 项目计数
- en: 'The generated content is placed as inline content at the beginning of the associated
    element. Thus, the effect is similar to an HTML list with `list-style-position:
    inside;` declared.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的内容被放置在关联元素的内联内容之前。因此，效果类似于声明了`list-style-position: inside;`的 HTML 列表。'
- en: 'The `<item>` elements are ordinary elements generating block-level boxes, which
    means that counters are not restricted only to elements with a `display` of `list-item`.
    In fact, any element can use a counter. Consider the following rules:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`<item>` 元素是生成块级框的普通元素，这意味着计数器不仅限于具有`display: list-item`的元素。事实上，任何元素都可以使用计数器。考虑以下规则：'
- en: '[PRE50]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: These rules would have the effect shown in [Figure 16-28](#counters-counting-headings).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则将产生[图 16-28](#counters-counting-headings)所示的效果。
- en: '![css5 1628](assets/css5_1628.png)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1628](assets/css5_1628.png)'
- en: Figure 16-28\. Adding counters to headings
  id: totrans-353
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-28\. 将计数器添加到标题
- en: '[Figure 16-28](#counters-counting-headings) illustrates some important points
    about counter resetting and incrementing. For instance, notice that the counters
    are reset on the elements, whereas the actual generated-content counters are inserted
    via the `::before` pseudo-elements. Attempting to reset counters in the pseudo-elements
    won’t work: you’ll get a lot of zeros.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-28](#counters-counting-headings)展示了关于计数器重置和增加的一些重要点。例如，请注意计数器在元素上重置，而实际生成内容的计数器是通过`::before`伪元素插入的。试图在伪元素中重置计数器是行不通的：你会得到很多零。'
- en: 'Also notice that the `<h1>` element uses the counter `chapter`, which defaults
    to 0 and has a “1.” before the element’s text. When a counter is incremented and
    used by the same element, the incrementation happens *before* the counter is displayed.
    Similarly, if a counter is reset and shown in the same element, the reset happens
    before the counter is displayed. Consider the following:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`<h1>` 元素使用了默认为 0 的计数器 `chapter`，并在元素文本之前加上了“1.”。当一个计数器被同一个元素递增并使用时，递增会在计数器显示之前发生。类似地，如果一个计数器被重置并在同一个元素中显示，则重置会在计数器显示之前发生。考虑以下内容：
- en: '[PRE51]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The first `<h1>` element in the document would be preceded by the text “1.0.0.”
    because the counters `section` and `subsec` were reset but not incremented. Thus,
    if you want the first displayed instance of an incremented counter to be 0, you
    need to reset that counter to `-1`, as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中第一个 `<h1>` 元素会在文本“1.0.0.”之前显示，因为计数器 `section` 和 `subsec` 被重置但没有被递增。因此，如果你希望递增计数器的第一个显示实例为
    0，你需要将该计数器重置为 `-1`，如下所示：
- en: '[PRE52]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You can do some interesting things with counters. Consider the following XML:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用计数器做一些有趣的事情。考虑以下 XML：
- en: '[PRE53]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can re-create the traditional format of a BASIC program listing with the
    following rules:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下规则重新创建 BASIC 程序列表的传统格式：
- en: '[PRE54]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'It’s also possible to define a list style for each counter as part of the `counter()`
    format. You can do this by adding a comma-separated `list-style-type` keyword
    after the counter’s identifier. The following modification of the heading-counter
    example is illustrated in [Figure 16-29](#counters-counting-headings-changed):'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`counter()`格式的一部分定义每个计数器的列表样式。你可以在计数器标识符后添加逗号分隔的`list-style-type`关键字来实现这一点。标题计数器示例的以下修改在[图 16-29](#counters-counting-headings-changed)中有所体现：
- en: '[PRE55]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Notice that the counter `section` is not given a style keyword, so it defaults
    to the decimal counting style. You can even set counters to use the styles `disc`,
    `circle`, `square`, and `none` if you so desire, though every instance of those
    counters will be just a single copy of the symbol you specified.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，计数器 `section` 没有给定样式关键字，因此默认为十进制计数样式。如果你希望，你甚至可以设置计数器使用`disc`、`circle`、`square`和`none`样式，尽管这些计数器的每个实例都将是你指定的符号的单一副本。
- en: 'One interesting point to note is that elements with a `display` of `none` do
    not increment counters, even if the rule seems to indicate otherwise. In contrast,
    elements with a `visibility` of `hidden` *do* increment counters:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个有趣的点需要注意，具有`display`为`none`的元素不会递增计数器，即使规则似乎表明了另外一种情况。相反，具有`visibility`为`hidden`的元素确实会递增计数器：
- en: '[PRE56]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '![css5 1629](assets/css5_1629.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1629](assets/css5_1629.png)'
- en: Figure 16-29\. Changing counter styles
  id: totrans-369
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-29\. 更改计数器样式
- en: Counters and scope
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计数器和作用域
- en: 'So far, you’ve seen how to string multiple counters together to create section-and-subsection
    counting. Often, this is something authors desire for nested ordered lists as
    well, but trying to create enough counters to cover deep nesting levels would
    quickly become clumsy. Just to get counters to work for five-level-deep nested
    lists would require a bunch of rules like this:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经看到如何将多个计数器串联在一起，以创建章节和子章节计数。通常，这也是作者希望对嵌套有序列表进行的操作，但是试图创建足够的计数器以涵盖深层嵌套级别会很快变得笨拙。仅仅是为了使计数器在五级深度嵌套列表中工作，就需要像这样的一堆规则：
- en: '[PRE57]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Imagine writing enough rules to cover nesting up to 50 levels! (We’re not saying
    you should nest ordered lists 50 deep. Just follow along for the moment.)
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，写足够的规则来涵盖最多 50 级嵌套！（我们并不是说您应该将有序列表嵌套到 50 层深。暂时跟随我们的思路。）
- en: 'Fortunately, CSS 2.1 described the concept of *scope* when it comes to counters.
    Stated simply, every level of nesting creates a new scope for any given counter.
    Scope is what makes it possible for the following rules to cover nested-list counting
    in the usual HTML way:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，CSS 2.1 在涉及计数器时描述了*作用域*的概念。简单来说，每个嵌套级别都为任何给定的计数器创建一个新的作用域。作用域是使以下规则能够以通常的
    HTML 方式覆盖嵌套列表计数的原因：
- en: '[PRE58]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: These rules will all make ordered lists, even those nested inside others, start
    counting from 1 and increment each item by one—exactly the way it’s been done
    in HTML from the beginning.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些规则将使有序列表（甚至是嵌套在其他列表中的列表）从 1 开始计数，并逐项递增—这正是从 HTML 开始就一直做的方式。
- en: This works because a new instance of the counter `ordered` is created at each
    level of nesting. So, for the first ordered list, an instance of `ordered` is
    created. Then, for every list nested inside the first one, another new instance
    is created, and the counting starts anew with each list.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效的原因是在每个嵌套级别都创建了`ordered`计数器的新实例。因此，对于第一个有序列表，创建了`ordered`的一个实例。然后，对于嵌套在第一个列表中的每个列表，都会创建另一个新实例，并且每个列表的计数从头开始。
- en: 'However, suppose you want ordered lists to count so that each level of nesting
    creates a new counter appended to the old: 1, 1.1, 1.2, 1.2.1, 1.2.2, 1.3, 2,
    2.1, and so on. This can’t be done with `counter()`, but it *can* be done with
    `counters()`. What a difference an *s* makes.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，假设您希望有序列表的计数方式是每个嵌套级别都创建一个新的计数器附加到旧的计数器上：1、1.1、1.2、1.2.1、1.2.2、1.3、2、2.1，等等。这不能通过`counter()`完成，但是可以通过`counters()`完成。一个“s”能带来多大的不同啊。
- en: 'To create the nested-counter style shown in [Figure 16-30](#counters-scope-nested),
    you need these rules:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建[图 16-30](#counters-scope-nested) 中显示的嵌套计数器样式，您需要这些规则：
- en: '[PRE59]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![css5 1630](assets/css5_1630.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1630](assets/css5_1630.png)'
- en: Figure 16-30\. Nested counters
  id: totrans-382
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-30\. 嵌套计数器
- en: Basically, the keyword `counters(ordered,".")` displays the `ordered` counter
    from each scope with a period appended, and strings together all of the scoped
    counters for a given element. Thus, an item in a third-level nested list would
    be prefaced with the `ordered` value for the outermost list’s scope, the scope
    of the list between the outer and current list, and the current list’s scope,
    with each of those followed by a period. The rest of the `content` value causes
    a space, colon, and space to be added after all of those counters.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，关键字`counters(ordered,".")`显示来自每个作用域的`ordered`计数器，并在其后附加一个句点，然后将给定元素的所有作用域计数器串在一起。因此，第三级嵌套列表中的项目将以最外层列表的`ordered`值作为前缀，外层和当前列表之间列表的作用域，以及当前列表的作用域，每个作用域后面都跟着一个句点。`content`值的其余部分导致所有这些计数器之后添加一个空格、冒号和空格。
- en: 'As with `counter()`, you can define a list style for nested counters, but the
    same style applies to all of the counters. Thus, if you changed your previous
    CSS to read as follows, the list items in [Figure 16-30](#counters-scope-nested)
    would all use lowercase letters for the counters instead of numbers:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 与`counter()`一样，您可以为嵌套计数器定义列表样式，但是相同的样式适用于所有计数器。因此，如果您将之前的 CSS 更改为以下内容，[图 16-30](#counters-scope-nested)
    中的列表项将使用小写字母而不是数字来进行计数：
- en: '[PRE60]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You may have noticed that `list-style: none` was applied to the `<ol>` elements
    in the previous examples. That’s because the counters being inserted were generated
    content, not replacement list markers. In other words, had the `list-style: none`
    been omitted, each list item would have had its user agent-supplied list counter,
    *plus* the generated-content counters we defined.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '您可能已经注意到，在前面的示例中，`<ol>` 元素上应用了 `list-style: none`。这是因为插入的计数器是生成的内容，而不是替换列表标记。换句话说，如果省略了
    `list-style: none`，每个列表项将具有其用户代理提供的列表计数器，*加上* 我们定义的生成内容计数器。'
- en: That ability can be very useful, but sometimes you really just want to redefine
    the markers themselves. That’s where counting patterns come in.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这种能力非常有用，但有时您确实只想重新定义标记本身。这就是计数模式的作用。
- en: Defining Counting Patterns
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义计数模式
- en: 'If you want to get beyond simple nested counting, perhaps into defining base-60
    counting or using patterns of symbols, CSS provides a way to define almost any
    counting pattern you can imagine. You can use `@counter-style` blocks, with dedicated
    descriptors to manage the outcome. The general pattern is as follows:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解简单的嵌套计数，也许是定义基于60进制计数或使用符号模式，CSS 提供了一种几乎可以想象的定义任何计数模式的方法。你可以使用 `@counter-style`
    块，并有专门的描述符来管理结果。一般的模式如下：
- en: '[PRE61]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here, `<*name*>` is an author-supplied name for the pattern in question. For
    example, to create a series of alternating triangle markers, the block might look
    something like this:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<*name*>` 是问题模式的作者提供的名称。例如，要创建一系列交替的三角形标记，块可能看起来像这样：
- en: '[PRE62]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[Figure 16-31](#counter-patterns-triangles) shows the result.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-31](#counter-patterns-triangles) 显示了结果。'
- en: '![css5 1631](assets/css5_1631.png)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1631](assets/css5_1631.png)'
- en: Figure 16-31\. A simple counter pattern
  id: totrans-395
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-31\. 一个简单的计数器模式
- en: Several descriptors are available, summarized here.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这里总结了几个可用的描述符。
- en: 'We’ll start with simple systems and work our way up in complexity, but first,
    let’s see the precise definitions for the two most basic descriptors: `system`
    and `symbols`.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从简单系统开始，逐步提升复杂度，但首先，让我们看看两个最基本描述符的精确定义：`system` 和 `symbols`。
- en: For pretty much any `@counter-style` block, those are the minimum two descriptors.
    You can leave out `system` if you’re defining a `symbolic` system, but it’s generally
    better to include it so that you’re clear about the kind of system you’re setting
    up. Remember, the next person to work on the styles may not be as familiar with
    counter styling as you!
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 对于几乎所有的`@counter-style`块，这些是最基本的两个描述符。如果你定义的是一个`symbolic`系统，可以省略`system`，但通常最好包含它，这样你就清楚地了解你正在设置的系统类型。记住，下一个工作在样式上的人可能不像你那么熟悉计数器样式！
- en: Fixed Counting Patterns
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定计数模式
- en: 'The simplest kind of counter pattern is a `fixed` system. Fixed systems are
    used when you want to define an exact sequence of counter markers that doesn’t
    repeat after you’ve run out of markers. Consider this example, which has the result
    shown in [Figure 16-32](#counter-patterns-fixed):'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的计数器模式是一个 `fixed` 系统。当你希望定义一个精确的计数器标记序列，当标记用完后不重复时，就使用固定系统。考虑以下示例，其结果显示在
    [图 16-32](#counter-patterns-fixed) 中：
- en: '[PRE63]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '![css5 1632](assets/css5_1632.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1632](assets/css5_1632.png)'
- en: Figure 16-32\. A fixed counter pattern
  id: totrans-403
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-32\. 一个固定的计数器模式
- en: Once the list gets past the fifth list item, the counter system runs out of
    emoji, and since no fallback was defined (we’ll get to that shortly), the markers
    for subsequent list items fall back to the default for ordered lists.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦列表超过第五个列表项，计数器系统就会用完表情符号，而且由于没有定义回退（我们马上会谈到这个），随后列表项的标记就会回退到有序列表的默认标记。
- en: Notice that the symbols in the `symbols` descriptor are separated by spaces.
    If they were all jammed together with no space separation, you’d get a result
    like that in [Figure 16-33](#counter-patterns-fixed-tooclose).
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`symbols` 描述符中的符号是用空格分隔的。如果它们都紧密排列在一起而没有空格分隔，你会得到类似于 [图 16-33](#counter-patterns-fixed-tooclose)
    中的结果。
- en: '![css5 1633](assets/css5_1633.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1633](assets/css5_1633.png)'
- en: Figure 16-33\. When symbols get too close
  id: totrans-407
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-33\. 当符号太接近时
- en: 'This does mean you can define a fixed sequence of markers in which each marker
    is composed of multiple symbols. (If you want to define a set of symbols that
    are combined in patterns to create a counting system, just wait: we’re getting
    to that soon.)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以定义一个固定序列的标记，在这个序列中每个标记由多个符号组成。（如果你想定义一组符号，这些符号结合起来形成计数系统的模式，稍等：我们很快会讲到。）
- en: 'If you want to use ASCII symbols in your markers, it’s generally advisable
    to quote them. This avoids problems like angle brackets being mistaken for pieces
    of HTML by the parser. Thus you might do something like this:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: It’s acceptable to quote all symbols, and it might be a good idea to get into
    that habit. That means more typing—the preceding value would become `"#" "$" "%"
    ">"`—but it’s less error-prone.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: 'In fixed counter systems, you can define a starting value in the `system` descriptor
    itself. If you want to start the counting at 5, for example, you’d write this:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In this case, the first five symbols represent counters 5 through 9.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-415
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This ability to set a starting number is available in only fixed counter systems.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Cyclic Counting Patterns
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step beyond fixed patterns is `cyclic` patterns, which are fixed patterns
    that repeat. Let’s take the fixed emoji pattern from the previous section and
    convert it to cyclic. This will have the result shown in [Figure 16-34](#counter-patterns-cyclic):'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '![css5 1634](assets/css5_1634.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
- en: Figure 16-34\. A cyclic counter pattern
  id: totrans-421
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The defined symbols are used in order, over and over, until no more items remain
    left to count.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible to use `cyclic` to supply a single marker that’s used for the
    entire pattern, much like supplying a string for `list-style-type`. In this case,
    it would look something like this:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: One thing you may have noticed is that so far, all our counters have been followed
    by a full stop (or a period, if you prefer). This is due to the default value
    of the `suffix` descriptor, which has a cousin descriptor, `prefix`.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'With these descriptors, you can define symbols that are inserted before and
    after every marker in the pattern. Thus, we might give our thinker ASCII wings
    like so, as illustrated in [Figure 16-35](#counter-patterns-cyclic-wings):'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '![css5 1635](assets/css5_1635.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
- en: Figure 16-35\. Putting “wings” on the thinker
  id: totrans-429
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `suffix` descriptor is particularly useful if you want to remove the default
    suffix from your markers. Here’s one example of how to do so:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'You can also extend the markers in creative ways by using `prefix` and `suffix`,
    as shown in [Figure 16-36](#counter-patterns-cyclic-thisisfine):'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '![css5 1636](assets/css5_1636.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
- en: Figure 16-36\. This list is fine
  id: totrans-435
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You might wonder why the `prefix` value is quoted in this example, while the
    `suffix` value is not. There is no reason other than to demonstrate that both
    approaches work. As stated before, quoting symbols is safer but is rarely required.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: You may also see some differences between the Unicode glyphs in the CSS examples
    here and those shown in the figures. This is an unavoidable aspect of using emoji
    and other such characters—what appears on one person’s user agent may be different
    on someone else’s. Consider the differences in emoji rendering between macOS,
    iOS, Android, Samsung, Windows desktop, Windows mobile, Linux, and so on.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use images for your counters, at least in theory. As an example, suppose
    you want to use a series of Klingon glyphs, which have no Unicode equivalents.
    (It’s a long-standing industry myth that Klingon is in Unicode. It was proposed
    in 1997 and rejected in 2001\. A new proposal was made in 2016 and was once again
    rejected.) We won’t represent the entire set of symbols here, but it would start
    something like this:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以理论上使用图像作为计数器。例如，假设您想使用一系列克林贡字形，这些字形没有Unicode等价物。（长期以来的行业传言称克林贡语已包含在Unicode中。该提案于1997年提出并于2001年被拒绝。2016年又提出了新的提案，再次被拒绝。）我们不会在这里代表整个符号集，但它会以以下方式开始：
- en: '[PRE71]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This would cycle from *A* through *GH* and then repeat, but still, you’d get
    some Klingon symbology, which might be enough. We’ll see ways to build up alphabetic
    and numeric systems later in the chapter.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 这将循环从*A*到*GH*，然后重复，但仍然会得到一些克林贡符号，这可能已经足够了。我们将在本章后面看到如何建立字母和数字系统。
- en: Warning
  id: totrans-441
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of late 2022, browser support for any type of `<image>` as counting symbols
    is essentially nonexistent.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年底，对于任何类型的`<image>`作为计数符号的浏览器支持基本上不存在。
- en: Symbolic Counting Patterns
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 象征性计数模式
- en: 'A `symbolic` counting system is similar to a cyclic system, except in symbolic
    systems, for each restart of the symbol sequence, the number of symbols increases
    by one. Each marker is made up of a single symbol that is repeated the number
    of times the symbol sequence has repeated. This may be familiar to you from footnote
    symbols, or some varieties of alphabetic systems. Examples of each are shown here,
    with the result in [Figure 16-37](#counter-patterns-symbolic):'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`象征性`计数系统类似于循环系统，但在象征性系统中，对于每次符号序列的重启，符号数量会增加一个。每个标记由一个重复出现的单个符号组成，该符号序列重复的次数。这可能与您熟悉的脚注符号或某些种类的字母系统类似。这里展示了每种类型的示例，结果显示在[图 16-37](#counter-patterns-symbolic)中：'
- en: '[PRE72]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '![css5 1637](assets/css5_1637.png)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1637](assets/css5_1637.png)'
- en: Figure 16-37\. Two patterns of symbolic counting
  id: totrans-447
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-37。两种象征性计数模式
- en: One thing to watch out for is that if you have only a few symbols applied to
    a very long list, the markers will quickly get quite long. Consider the letter
    counters shown in the previous example. [Figure 16-38](#counter-patterns-symbolic-long)
    shows what the 135th through 150th entries in a list using that system would look
    like.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意的一件事是，如果只有少数符号应用于非常长的列表，标记很快会变得非常长。请考虑前面示例中显示的字母计数器。[图 16-38](#counter-patterns-symbolic-long)显示了使用该系统的列表中第135至150个条目的样子。
- en: '![css5 1638](assets/css5_1638.png)'
  id: totrans-449
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1638](assets/css5_1638.png)'
- en: Figure 16-38\. Very long symbolic markers
  id: totrans-450
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-38。非常长的象征性标记
- en: This sort of consideration will become more of an issue from here on out, because
    the counter styles are all additive in one sense or another. To limit your exposure
    to these kinds of problems, you can use the `range` descriptor.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，这种考虑将变得更加重要，因为计数器样式在某种意义上都是累加的。为了限制您面临的这类问题，您可以使用`range`描述符。
- en: 'With `range`, you can supply one or more space-separated pairs of values, with
    each pair separated from the others by commas. Let’s suppose we want to stop the
    letter-doubling after three iterations. We have five symbols, so we can restrict
    their use to the first 15 list items like so, with the result shown in [Figure 16-39](#counter-patterns-symbolic-ranged)
    (which has been arranged in two columns to keep the figure size reasonable):'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`range`，您可以提供一个或多个用空格分隔的值对，每对值之间用逗号分隔。假设我们希望在三次迭代后停止字母加倍。我们有五个符号，因此我们可以将它们限制在前15个列表项中使用，如下所示，结果显示在[图 16-39](#counter-patterns-symbolic-ranged)中（为了保持图像的合理大小，已排列为两列）：
- en: '[PRE73]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '![css5 1639](assets/css5_1639.png)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1639](assets/css5_1639.png)'
- en: Figure 16-39\. Using `range` to limit a symbolic counter pattern
  id: totrans-455
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-39。使用`range`限制象征性计数器模式
- en: 'If we needed, for whatever reason, to supply a second range of counter usage,
    it would look like this:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有必要，无论出于什么原因，我们需要提供第二个计数器使用范围，它将如下所示：
- en: '[PRE74]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The symbolic letter system defined by `letters` would be applied in the range
    1–15 as well as 101–115 (which would be “AAAAAAAAAAAAAAAAAAAAA” through “EEEEEEEEEEEEEEEEEEEEEEE,”
    rather appropriately).
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 由`letters`定义的象征性字母系统将适用于1至15以及101至115范围内（这将是“AAAAAAAAAAAAAAAAAAAAA”到“EEEEEEEEEEEEEEEEEEEEEEE”，相当合适）。
- en: So what happens to the counters that fall outside of the range(s) defined by
    `range`? They fall back to a default marker style. You can leave that up to the
    user agent to handle, or you can provide some direction by means of the `fallback`
    descriptor.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，对于超出`range`定义范围的计数器会发生什么？它们将回退到默认的标记样式。您可以让用户代理处理，或者通过`fallback`描述符提供一些指示。
- en: 'As an example, you might decide to handle any beyond-the-range counters with
    Hebrew counting:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能决定用希伯来语计数来处理超出范围的计数器：
- en: '[PRE75]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: You could just as easily use `lower-greek`, `upper-latin`, or even a noncounting
    style like `square`.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地使用`lower-greek`、`upper-latin`或者像`square`这样的非计数样式。
- en: Alphabetic Counting Patterns
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字母计数模式
- en: An `alphabetic` counting system is similar to a `symbolic` system, except the
    manner of repeating changes. Remember, with symbolic counting, the number of symbols
    goes up with each iteration through the cycle. In alphabetic systems, each symbol
    is treated as a digit in a numbering system. If you’ve spent any time in spreadsheets,
    this counting method may be familiar to you from the column labels.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`alphabetic`计数系统类似于`symbolic`系统，不同之处在于重复方式的变化。请记住，在符号计数中，随着每次迭代，符号的数量会增加。在字母系统中，每个符号被视为编号系统中的一个数字。如果您在电子表格中花费了一些时间，这种计数方法可能会使您对列标签感到熟悉。
- en: 'To illustrate this, let’s reuse the letter symbols from the previous section,
    and change from a symbolic to an alphabetic system. The result is shown in [Figure 16-40](#counter-patterns-alphabetic)
    (once again formatted as two columns to fit):'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们重用前一节中的字母符号，并从符号系统更改为字母系统。结果显示在[图16-40](#counter-patterns-alphabetic)中（再次以两列的形式进行格式化）。
- en: '[PRE76]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '![css5 1640](assets/css5_1640.png)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1640](assets/css5_1640.png)'
- en: Figure 16-40\. Alphabetic counting
  id: totrans-468
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-40\. 字母计数
- en: Notice the second iteration of the pattern, which runs from “AA” to “AE” before
    switching over to “BA” through “BE,” then on to “CA” and so on. In the symbolic
    version of this, we’d already be up to “EEEEEE” by the time “EE” was reached in
    the alphabetic system.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 注意模式的第二次迭代，它从“AA”到“AE”，然后切换到“BA”到“BE”，然后到“CA”等等。在符号版本中，到达字母系统中的“EE”时，我们已经到了“EEEEEE”。
- en: Note that to be valid, an alphabetic system must have a minimum of *two* symbols
    supplied in the `symbols` descriptor. If only one symbol is supplied, the entire
    `@counter-style` block is rendered invalid. Any two symbols are valid; they can
    be letters, numbers, or really anything in Unicode, as well as images (again,
    in theory).
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了有效，字母系统必须在`symbols`描述符中提供至少*两*个符号。如果只提供一个符号，则整个`@counter-style`块将被视为无效。任何两个符号都是有效的；它们可以是字母、数字或者Unicode中的任何东西，以及（理论上）图像。
- en: Numeric Counting Patterns
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字计数模式
- en: 'When you define a `numeric` system, you’re technically using the symbols you
    supply to define a *positional numbering* system—that is, the symbols are used
    as digits in a place-number counting system. Defining ordinary decimal counting,
    for example, would be done like this:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 当您定义一个`numeric`系统时，实际上是在使用您提供的符号定义*位置计数*系统——也就是说，这些符号被用作位数计数系统中的数字。例如，定义普通的十进制计数将会像这样完成：
- en: '[PRE77]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This base is extensible to create hexadecimal counting, like so:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基数可以扩展为创建十六进制计数，如下所示：
- en: '[PRE78]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'That counter style will count from 1 through F, roll over to 10 and count up
    to 1F, then 20 to 2F, 30 to 3F, etc. Much more simply, it’s a breeze to set up
    binary counting:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 该计数样式将从1计数到F，然后滚动到10并继续计数到1F，然后20到2F，30到3F，等等。更简单地说，设置二进制计数非常简单：
- en: '[PRE79]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Examples of these three counting patterns are shown in [Figure 16-41](#counter-patterns-numeric-three-systems).
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 这些三种计数模式的示例显示在[图16-41](#counter-patterns-numeric-three-systems)中。
- en: '![css5 1641](assets/css5_1641.png)'
  id: totrans-479
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1641](assets/css5_1641.png)'
- en: Figure 16-41\. Three numeric counting patterns
  id: totrans-480
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-41\. 三种数字计数模式
- en: 'An interesting question to consider is: what happens if a counter value is
    negative? In decimal counting, we generally expect negative numbers to be preceded
    by a minus sign (`–`), but what about in other systems, like symbolic? What if
    we define a letter-based numeric counting system? Or if we want to use accounting-style
    formatting, which puts negative values into parentheses? This is where the `negative`
    descriptor comes into play.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑的一个有趣问题是：如果计数器值为负数会发生什么？在十进制计数中，我们通常期望负数前面带有减号（`–`），但在其他系统中呢，比如符号系统呢？如果我们定义一个基于字母的数字计数系统呢？或者如果我们想使用会计风格的格式，将负值放入括号中呢？这就是`negative`描述符发挥作用的地方。
- en: The `negative` descriptor is like its own little self-contained combination
    of `prefix` and `suffix` that is applied only when the counter has a negative
    value. Its symbols are placed to the inside (that is, closer to the counter) of
    any prefix and suffix symbols.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`negative` 描述符就像是其自身的小型自包含的 `prefix` 和 `suffix` 的组合，仅在计数器具有负值时应用。其符号放置在任何前缀和后缀符号的内部（即靠近计数器）。'
- en: 'So let’s say we want to use accounting-style formatting, and to add prefix
    and suffix symbols to all counters. That would be done as follows, with the result
    shown in [Figure 16-42](#counter-patterns-numeric-negative):'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，假设我们要使用会计风格的格式，并向所有计数器添加前缀和后缀符号。操作如下，结果显示在 [图 16-42](#counter-patterns-numeric-negative)
    中：
- en: '[PRE80]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '![css5 1642](assets/css5_1642.png)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1642](assets/css5_1642.png)'
- en: Figure 16-42\. Negative-value formatting
  id: totrans-487
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-42\. 负值格式化
- en: Another common feature of numeric counting systems is the desire to pad out
    low values so that their length matches that of higher values. For example, rather
    than 1 and 100, a counting pattern might use leading zeros to create 001 and 100\.
    This can be accomplished with the `pad` descriptor.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 数字计数系统的另一个常见特征是希望填充低值，使其长度与较高值相匹配。例如，计数模式可能使用前导零来创建 001 和 100，而不是 1 和 100。这可以通过
    `pad` 描述符来实现。
- en: 'The pattern of this descriptor is interesting. The first part is an integer
    that defines the number of digits that every counter should have. The second part
    is a string that’s used to fill out any value containing fewer than the defined
    number of digits. Consider this example:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 此描述符的模式非常有趣。第一部分是一个整数，定义了每个计数器应具有的位数。第二部分是一个字符串，用于填充少于定义位数的任何值。考虑以下示例：
- en: '[PRE82]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Given these styles, ordered lists will all used decimal counting by default:
    1, 2, 3, 4, 5… Those with a `class` of `padded` will use padded decimal counting:
    0001, 0002, 0003, 0004, 0005… [Figure 16-43](#counter-patterns-numeric-pad) shows
    an example.'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些样式下，有序列表默认使用十进制计数：1, 2, 3, 4, 5… 具有 `class` 为 `padded` 的列表将使用填充的十进制计数：0001,
    0002, 0003, 0004, 0005… [图 16-43](#counter-patterns-numeric-pad) 展示了一个示例。
- en: '![css5 1643](assets/css5_1643.png)'
  id: totrans-492
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1643](assets/css5_1643.png)'
- en: Figure 16-43\. Padding values
  id: totrans-493
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-43\. 填充值
- en: 'Note that the padded counters use the `0` symbol to fill in any missing leading
    digits, in order to make every counter be at least four digits long. The “at least”
    part of that sentence is important: if a counter gets up to five digits, it won’t
    be padded. More importantly, if a counter reaches five digits, none of the other
    shorter counters will get additional zeros. They’ll stay four digits long, because
    of the `4` in `4 "0"`.'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，填充计数器使用 `0` 符号来填补任何缺失的前导数字，以使每个计数器至少为四位数。该句中的“至少”部分很重要：如果计数器达到五位数，它将不会填充。更重要的是，如果计数器达到五位数，其他较短的计数器也不会获得额外的零。它们将保持四位数长，因为
    `4 "0"` 中的 `4`。
- en: 'Any symbol can be used to pad values, not just `0`. You could use underlines,
    periods, emoji, arrow symbols, empty spaces, or anything else you like. In fact,
    you can have multiple characters in the <*`symbol`*> part of the value. The following
    is perfectly acceptable, if not necessarily desirable:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 任何符号都可以用来填充值，不仅限于 `0`。您可以使用下划线、句点、表情符号、箭头符号、空格或其他任何喜欢的东西。事实上，在值的 `<*symbol*>`
    部分中可以有多个字符。以下内容是完全可以接受的，尽管不一定是理想的：
- en: '[PRE83]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Given a counter value of `1`, the result of that crazy counting system would
    be “![thinking face emoji](assets/thinking.png)![winking face emoji](assets/winking.png)![thinking
    face emoji](assets/thinking.png)![winking face emoji](assets/winking.png)![thinking
    face emoji](assets/thinking.png)![winking face emoji](assets/winking.png)1.”
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定计数器值为 `1`，那么该疯狂计数系统的结果将是“![thinking face emoji](assets/thinking.png)![winking
    face emoji](assets/winking.png)![thinking face emoji](assets/thinking.png)![winking
    face emoji](assets/winking.png)![thinking face emoji](assets/thinking.png)![winking
    face emoji](assets/winking.png)1。”
- en: 'Note that negative symbols count toward symbol length and thus eat into padding.
    Also note that the negative sign will come *outside* any padding. Given the following
    styles, we’d get the result shown in [Figure 16-44](#counter-patterns-numeric-negativepad):'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，负数符号计入符号长度，因此会影响填充。还要注意，负号将会在任何填充之外 *外侧* 出现。给定以下样式，我们将得到在 [图 16-44](#counter-patterns-numeric-negativepad)
    中显示的结果：
- en: '[PRE84]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '![css5 1644](assets/css5_1644.png)'
  id: totrans-500
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1644](assets/css5_1644.png)'
- en: Figure 16-44\. Negative value formatting, with padding
  id: totrans-501
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-44\. 带填充的负值格式化
- en: Additive Counting Patterns
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 累加计数模式
- en: We have one more system type to explore, which is `additive-symbol` counting.
    In additive counting systems, different symbols are used to represent values.
    Putting multiple symbols together properly and then adding up the numbers that
    each represents yields the counter value.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个系统类型要探索，即`additive-symbol`计数。在加法计数系统中，使用不同的符号来表示值。正确地将多个符号组合在一起，然后将每个符号代表的数字相加，就得到了计数器的值。
- en: 'It’s much easier to show this than explain it. Here’s an example adapted from
    [Kseso](https://escss.blogspot.com):'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 显示比解释更容易。以下是从[Kseso](https://escss.blogspot.com)改编的示例：
- en: '[PRE85]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This will count in classical Roman style. Another good example can be found
    in the specification for counting styles, which defines a dice-counting system:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以古典罗马风格计数。计数样式规范中还有一个很好的例子，它定义了一个骰子计数系统：
- en: '[PRE86]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The results of both counting systems are shown in [Figure 16-45](#counter-patterns-additive-romandice);
    this time, each list has been formatted as three columns.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 两种计数系统的结果如[图16-45](#counter-patterns-additive-romandice)所示；这次，每个列表都已格式化为三列。
- en: '![css5 1645](assets/css5_1645.png)'
  id: totrans-509
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1645](assets/css5_1645.png)'
- en: Figure 16-45\. Additive values
  id: totrans-510
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-45。加法值
- en: Symbols can be quoted for clarity; e.g., `6 "⚅", 5 "⚄", 4 "⚃"`, and so on.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，符号可以加引号；例如，`6 "⚅", 5 "⚄", 4 "⚃"`等等。
- en: The most important thing to keep in mind is that the order of the symbols and
    their equivalent values matters. Notice that both the Roman and dice-counting
    systems supply values from largest to smallest, not the other way around? That’s
    because if you put the values in any order other than descending, the entire block
    is rendered invalid.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一点是记住符号的顺序及其等值的重要性。请注意，无论是罗马还是骰子计数系统都是从最大到最小提供值，而不是反过来。这是因为如果你不按降序放置值，整个块都将无效。
- en: Also notice the use of the `additive-symbols` descriptor instead of `symbols`.
    This is important to keep in mind, since defining an additive system and then
    trying to use the `symbols` descriptor will render the entire `counter-styles`
    block invalid. (Similarly, attempting to use the `additive-symbols` description
    in non-`additive` systems will render *those* blocks invalid.)
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意使用`additive-symbols`描述符而不是`symbols`。这很重要要记住，因为定义了加法系统，然后尝试使用`symbols`描述符将使整个`counter-styles`块无效。（同样，尝试在非“additive”系统中使用`additive-symbols`描述符也会使那些块无效。）
- en: 'One last thing to note about additive systems is that, because of the way the
    additive-counter algorithm is defined, it’s possible to create additive systems
    in which some values can’t be represented even though it seems like they should
    be. Consider this definition:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 关于加法系统最后要注意的一点是，由于加法计数器算法的定义方式，有时候可能无法表示某些值，尽管看起来应该可以。考虑这个定义：
- en: '[PRE87]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'This would yield the following counters for the first five numbers: 1, X, Y,
    4, YX. You might think 4 should be XX, and that may make intuitive sense, but
    the algorithm for additive symbols doesn’t permit it. To quote the specification:
    “While unfortunate, this is required to maintain the property that the algorithm
    runs in linear time relative to the size of the counter value.”'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前五个数字，计数器的结果如下：1, X, Y, 4, YX。你可能会认为4应该是XX，这样直观上似乎是有道理的，但加法符号的算法不允许这样做。引用规范的话说：“虽然很不幸，但这是为了保持算法相对于计数器值大小的线性时间。”
- en: Tip
  id: totrans-517
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'So how does Roman counting manage to get III for 3? Again, the answer is in
    the algorithm. It’s a little too complicated to get into here, so if you’re truly
    curious, we recommend you read the CSS Counter Styles Level 3 specification, which
    defines the additive counting algorithm. If that doesn’t interest you, just remember:
    make sure you have a symbol whose value equates to `1`, and you’ll avoid this
    problem.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 那么罗马计数是如何获得III代表3的呢？答案还是在算法中。这里不太容易解释，如果你真的很好奇，我们建议你阅读CSS计数样式第3级规范，其中定义了加法计数算法。如果这不是你感兴趣的，那就记住：确保你有一个值等于`1`的符号，你就可以避免这个问题。
- en: Extending Counting Patterns
  id: totrans-519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展计数模式
- en: 'There may come a time when you just want to vary an existing counting system
    a bit. For example, suppose you want to change regular decimal counting to use
    close-parentheses symbols as suffixes, and pad up to two leading zeros. You could
    write it all out longhand, like so:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有时候你只是想稍微改变一个现有的计数系统。例如，假设你想要将常规的十进制计数改为使用闭括号符号作为后缀，并填充最多两个前导零。你可以像下面这样详细写出来：
- en: '[PRE88]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'That works, but it’s clumsy. Well, worry not: `extends` is here to help.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做虽然有效，但有些笨拙。不过，别担心：`extends`来帮忙了。
- en: 'The `extends` option is sort of a system type, but only in the sense that it
    builds on an existing system type. The previous example would be rewritten with
    `extends` as follows:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`extends`选项在某种程度上类似于系统类型，但只是在基于现有系统类型的基础上构建。前面的例子将用`extends`重写如下：'
- en: '[PRE89]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: That takes the existing `decimal` system familiar from `list-style-type` and
    reformats it a bit. Thus, there’s no need to retype the whole symbol chain. You
    just adjust the options, as it were.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用从`list-style-type`熟悉的`decimal`系统，并稍作调整。因此，无需重新输入整个符号链。你只需调整选项，如下所示。
- en: 'In fact, you can *only* adjust the options: if you try to use either `symbols`
    or `additive-symbols` in an `extends` system, the entire `@counter-style` block
    will be invalid and ignored. In other words, symbols cannot be extended. As an
    example, you can’t define hexadecimal counting by extending decimal counting.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你只能调整选项：如果你试图在`extends`系统中使用`symbols`或`additive-symbols`，整个`@counter-style`块将无效并被忽略。换句话说，符号无法被扩展。例如，你不能通过扩展十进制计数来定义十六进制计数。
- en: However, you can vary the hexadecimal counting for different contexts. As an
    example, you could set up basic hex counting and then define variant display patterns,
    as shown in the following code and illustrated in [Figure 16-46](#counter-patterns-extends-fourhex).
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以根据不同的上下文变化十六进制计数。例如，你可以设置基本的十六进制计数，然后定义不同的显示模式，如下面的代码所示，并在[图16-46](#counter-patterns-extends-fourhex)中进行说明。
- en: Note
  id: totrans-528
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Each list jumps from 19 to 253, thanks to a `value="253"` on one of the list
    items.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列表跳过19到253，多亏了一个列表项上的`value="253"`。
- en: '[PRE90]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '![css5 1646](assets/css5_1646.png)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1646](assets/css5_1646.png)'
- en: Figure 16-46\. Various hexadecimal counting patterns
  id: totrans-532
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-46\. 不同的十六进制计数模式
- en: 'Notice that the last of the four counter styles, `hexcolonlimited`, extends
    the third, `hexcolon`, which itself extends the first, `hexadecimal`. In `hexcolonlimited`,
    the hexadecimal counting stops at `FF` (255), thanks to the `range: 1 255;` declaration.'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，四种计数样式中的最后一种`hexcolonlimited`扩展了第三种`hexcolon`，而`hexcolon`本身扩展了第一种`hexadecimal`。在`hexcolonlimited`中，十六进制计数在`FF`（255）处停止，这要归功于`range:
    1 255;`声明。'
- en: Speaking Counting Patterns
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数模式的讲解
- en: While it’s fun to build counters out of symbols, the result can be a real mess
    for spoken technologies such as Apple’s VoiceOver or the JAWS screen reader. Imagine,
    for example, a screen reader trying to read dice counters or phases of the moon.
    To help, the `speak-as` descriptor allows you to define an audible fallback.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用符号构建计数器很有趣，但对于Apple的VoiceOver或JAWS屏幕阅读器等朗读技术来说，结果可能会变得一团糟。例如，想象一下屏幕阅读器试图读取骰子计数或月相。为了帮助，`speak-as`描述符允许你定义一个听觉回退。
- en: Warning
  id: totrans-536
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of late 2022, `speak-as` is supported only by Mozilla-based browsers.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年末，`speak-as`仅受Mozilla系浏览器支持。
- en: 'Let’s take the values backward. With a <*`counter-style-name`*>, you’re able
    to define an alternate counting style that the user agent likely already recognizes.
    For example, you likely want to provide an audio fallback for dice counting to
    be `decimal`, one of the well-supported `list-style-type` values, when spoken:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来反过来看值。使用`<counter-style-name>`，你可以定义一个备选的计数样式，用户代理很可能已经识别。例如，当被朗读时，你可能希望提供一个骰子计数的音频备用作为`decimal`，这是一个广受支持的`list-style-type`值之一：
- en: '[PRE91]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Given those styles, the counter ⚅⚅⚂ would be spoken as “fifteen.” Alternatively,
    if the `speak-as` value is changed to `lower-latin`, that counter will be spoken
    as “oh” (capital letter *O*).
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些样式，计数⚅⚅⚂会被朗读为“十五”。或者，如果`speak-as`值更改为`lower-latin`，该计数将被朗读为“oh”（大写字母*O*）。
- en: 'The `spell-out` value might seem fairly straightforward but it’s a little more
    complicated than it first appears. What is spelled out by the user agent is a
    “counter representation,” which is then spelled out letter by letter. It’s hard
    to predict what that will mean, since the method of generating a counter representation
    isn’t precisely defined: the specification says, “Counter representations are
    constructed by concatenating counter symbols together.” And that’s all.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`spell-out`值可能看起来相当简单，但比起初看起来要复杂一些。用户代理所拼写出来的是一个“计数表示”，然后逐字母拼写。很难预测这意味着什么，因为生成计数表示的方法并没有精确定义：规范中说，“计数表示是通过连接计数符号构造的”。就是这样。'
- en: The `words` value is similar to `spell-out`, except the counter representation
    is spoken as words instead of spelling out each letter. Again, the exact process
    is not defined.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`words` 值与 `spell-out` 类似，但计数的表示方式是以单词的形式而不是拼写出每个字母。再次强调，确切的过程未定义。'
- en: 'With the value `numbers`, the counters are spoken as numbers in the document
    language. This is similar to the previous code sample, where ⚅⚅⚂ is spoken as
    “fifteen,” at least in English documents. If it’s another language, that language
    is used for counting: “quince” in Spanish, “fünfzehn” in German, “shíwǔ” in Chinese,
    and so on.'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `numbers` 值时，计数器以文档语言的数字形式发音。这与前面的代码示例类似，在英文文档中，⚅⚅⚂会被朗读为“fifteen”。如果是其他语言，将使用该语言进行计数：例如西班牙语中是“quince”，德语中是“fünfzehn”，中文中是“十五”等。
- en: Given `bullets`, the user agent says whatever it says when reading a bullet
    (marker) in an unordered list. This may mean saying nothing at all, or producing
    an audio cue such as a chime or click.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `bullets`，用户代理在读取无序列表中的项目符号（标记）时会做出相应反应。这可能意味着根本不说话，或者产生如叮当声或点击声等音频提示。
- en: 'Finally, consider the default value of `auto`. We saved this for last because
    its effect depends on the counting system in use. If it’s an `alphabetic` system,
    `speak-as: auto` has the same effect as `speak-as: spell-out`. In `cyclic` systems,
    `auto` is the same as `bullets`. Otherwise, the effect is the same as `speak-as:
    numbers`.'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，考虑 `auto` 的默认值。我们将此作为最后一个问题，因为其效果取决于正在使用的计数系统。如果是字母系统，则 `speak-as: auto`
    的效果与 `speak-as: spell-out` 相同。在循环系统中，`auto` 与 `bullets` 相同。否则，效果与 `speak-as: numbers`
    相同。'
- en: 'The exception to this rule arises if the system is an `extends` system, in
    which case `auto`’s effects are determined based on the system being extended.
    Therefore, given the following styles, the counters in an `emojibrackets` list
    will be spoken as if `speak-as` were set to `bullets`:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则的例外情况是系统是 `extends` 系统的情况下，此时 `auto` 的效果基于系统的扩展情况而定。因此，根据以下样式，在 `emojibrackets`
    列表中，计数器将被朗读，就好像 `speak-as` 被设置为 `bullets` 一样：
- en: '[PRE92]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Summary
  id: totrans-548
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Even though list styling isn’t as sophisticated as we might like, the ability
    to style lists is still highly useful. One relatively common use is to take a
    list of links, remove the markers and indentation, and thus create a navigation
    sidebar. The combination of simple markup and flexible layout is difficult to
    resist.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 即使列表样式不如我们所希望的那样复杂，但样式化列表的能力仍然非常有用。一个相对常见的用法是将链接列表化，移除标记和缩进，从而创建一个导航侧边栏。简单的标记语言结合灵活的布局方式，难以抗拒。
- en: Remember, if a markup language doesn’t have intrinsic list elements, generated
    content can be an enormous help—say, for inserting content such as icons to point
    to certain types of links (PDF files, Word documents, or even just links to another
    website). Generated content also makes it easy to print out link URLs, and its
    ability to insert and format quotation marks leads to true typographic joy. It’s
    safe to say that the usefulness of generated content is limited only by your imagination.
    Even better, thanks to counters, you can now associate ordering information to
    elements that are not typically lists, such as headings or code blocks. If you
    want to support such features with design that mimics the appearance of the user’s
    operating system, read on. The next chapter discusses ways to change the placement,
    shape, and even perspective of your design.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果标记语言没有固有的列表元素，生成内容可以提供巨大的帮助，比如插入指向特定类型链接（如 PDF 文件、Word 文档，甚至只是链接到另一个网站）的图标等内容。生成内容还可以轻松打印链接
    URL，并且它插入和格式化引号的能力将带来真正的排版乐趣。可以肯定的是，生成内容的有用性仅限于您的想象力。更好的是，借助计数器，您现在可以将顺序信息关联到通常不是列表的元素，例如标题或代码块。如果您希望通过模仿用户操作系统外观来支持这些功能，请继续阅读。下一章将讨论如何更改设计的放置位置、形状甚至透视效果。
