- en: Chapter 3\. Custom Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While both Android and iOS provide a large number of widgets and components
    out of the box, there’s not always parity, and it’s very likely you’ll want to
    create your own at some point. You might want a date or color picker with custom
    look or behavior, a switch or toggle with a built-in label, data visualization
    components like charts and graphs, or something as simple as a configurable label
    and icon that’s suited just for your app.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever the need, there’s a pretty good chance you can create it in either
    framework—but the process is very different and can be surprisingly arcane.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a custom view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to use a custom view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since most layouts in Android apps are created with XML data, getting your custom
    component to accept and react appropriately to arbitrary properties is something
    you’ll probably want to offer. For example, if you were to create a custom color
    picker, you’d probably want to offer a default color to start with, or perhaps
    even a specific color space like HSL or RGB.
  prefs: []
  type: TYPE_NORMAL
- en: Since XML resources are compiled, you’ll need to make sure the system recognizes
    the extra properties you allow on your component and what values are valid. For
    example, if you add a `color` attribute, you wouldn’t want to accept a dimension
    value—you’d want only valid colors, or perhaps color resource IDs, to be accepted.
    If a user tries to enter an invalid value format, the program will fail to compile,
    and Android Studio will notify the user, as we’d expect.
  prefs: []
  type: TYPE_NORMAL
- en: How to Create a Custom View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic premise of a custom `View` class is probably pretty close to what
    you’d expect: subclass either `View` or `ViewGroup`, or an existing subclass,
    and offer your own functionality however you see fit. A custom `View` is somewhat
    limited—it can really only modify what it draws (text, colors, shapes) or how
    large it is reported. The former can be accomplished using the `onDraw` method
    of the `View`. The method accepts a single parameter, a `Canvas` instance that
    will always be populated for you and has the same dimensions of the `View` itself.
    Check out the dev docs on the `Canvas` object, but really you’re pretty free to
    do whatever you’d like here. There are methods for drawing text and shapes. You
    can use geometric classes like `Rect` or `Path` to draw more complicated structures,
    and `Paint` objects to customize the color, fill, or texture.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following simple `View` class will draw a red circle (or oval)
    that will fill the frame of the `View`:'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you could provide setters to customize color or provide a custom
    `Paint` to tile bitmaps, create shadow layers, or mix gradients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you could subclass `TextView` so that it always has a single border
    along the bottom edge, perhaps for use in a `LinearLayout` or `RecyclerView`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might add a new method to change the color of the border and redraw it:'
  prefs: []
  type: TYPE_NORMAL
- en: A custom `ViewGroup`, on the other hand, might represent a new layout strategy
    or encompass a set of child `View` and `ViewGroup` instances that make up a sophisticated
    component like a date picker or media player. Using `ViewGroup` in this fashion
    is generally referred to as creating a custom “component” and requires a much
    deeper dive. We’ll touch on it here, but be sure to check out [the documentation](https://oreil.ly/ugTKF)
    for a more dedicated and thorough write-up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main points to consider can be summed up in two methods: `onMeasure` and
    `onLayout`. `onMeasure` tells the parent how much space the custom component *wants*.
    Sometimes that’s all the available space; sometimes it’s only as much space as
    its contents require, or it might be a mix.'
  prefs: []
  type: TYPE_NORMAL
- en: '`onMeasure` is passed two `int` parameters: the `widthMeasureSpec` parameter
    and `heightMeasureSpec`. These values include bits that indicate a “mode” (like
    a flag to indicate the dimension should consume the same space as its parent,
    called `MATCH_PARENT`), as well as a pixel dimension, potentially.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use `MeasureSpec.getMode` and `MeasureSpec.getSize` to read those values
    from a masked measure spec.
  prefs: []
  type: TYPE_NORMAL
- en: The second method to know is `onLayout`. Various events trigger a request for
    a view tree to lay itself out, like the size of the parent or child changing,
    or when a child is added, removed, or reordered. In addition, as a developer you
    can explicitly request a new layout pass with `View.requestLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default implementation of `onLayout` does nothing (although concrete subclasses
    of `ViewGroup` like `FrameLayout` and `Linearlayout` do define this method). It’s
    up to you to define how a `ViewGroup` lays out its children. For example, a vertically
    oriented `LinearLayout` first measures all its children (in `onMeasure`); then
    in `onLayout`, it positions its first child at the top, the second child just
    beneath that, the third just beneath the second, and so on. The vertical space
    it reports as required will be the sum total of those heights. A `FrameLayout`
    is a simpler (and more efficient) mechanism: all children are laid out independent
    of one another, with explicit margin values being provided to each child’s `LayoutParams`
    that indicate the top and left values of the child’s position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code would use a `FrameLayout` as the content view
    for an `Activity`, and position a `TextView` at one hundred pixels from the top
    and left. Adding other child `View` instances to that container would have no
    bearing on the position of the `TextView`, since the `FrameLayout` only examines
    the margin values of the `LayoutParams` of children when performing its `onLayout`
    operation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an `onLayout` implementation that will position its children in order
    horizontally until there is no more available space, at which point it will wrap
    to the next line. This is sometimes known as a “FlowLayout”:'
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, feel free to add your own methods and properties to create
    whatever functionality your custom component requires.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use a Custom View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we’ve presented a lot of information about custom `Views` and components,
    but for the most part, that information has been orderly and reasonably logical.
    What follows is mostly framework-specific mechanics and might not make sense immediately.
    For the application layer to do its magic requires that we jump through some hoops—don’t
    feel bad if this doesn’t make sense to you right away (or ever, really); we still
    find ourselves looking this up occasionally.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s make some assumptions. We’ve got the `TextView` subclass from
    the preceding example: `BottomBorderTextView`. It’s going to be presented in XML
    just like any `TextView` would, with `android` namespace properties like `android:text`
    and `android:textSize`. But now we want to add a property: `borderColor`.'
  prefs: []
  type: TYPE_NORMAL
- en: This new attribute is not part of the `android` namespace but is rather part
    of your application’s XML namespace (`http://schemas.android.com/apk/res/com.yourapp`).
    Fortunately, in the previous chapter on `Views`, we saw that we could use the
    “auto” namespace `http://schemas.android.com/apk/res/auto` and have that mapped
    directly to the current app’s namespace.
  prefs: []
  type: TYPE_NORMAL
- en: First, we have to define this custom attribute as a compiled `values` value.
    This is traditionally put in *res/values/attrs.xml*, but it can really be in any
    *res/values* subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute must be within a `declare-styleable` node, which should have a
    `name` attribute equal to the simple name of your custom component within a `resource`
    node. Each attribute (in this example, just the single `borderColor` attribute)
    is represented as an `attr` node with the name equal to the property name, and
    a format representing acceptable data types (`color`, `boolean`, `dimension`,
    `integer`, and many more).
  prefs: []
  type: TYPE_NORMAL
- en: 'All together, our example would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You could then reference your custom attribute in the XML layout for your custom
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you have to pull the value of the custom attribute during the `View`’s
    construction. This requires some highly unintuitive code. Let’s let the code sample
    explain what English cannot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where did `R.styleable.BottomBorderTextView` come from? How about this mouthful:
    `R.styleable.BottomBorderTextView_borderColor`? The answer is: magic. The system
    does Magic Things behind the scenes, but you can be (roughly) assured that by
    creating that `resource` XML earlier, these values were added to the global `R`
    instance. The name of the `declare-styleable` node generates the name of the property
    with an underscore appended, and then appends the name of the `attr` node to that.
    The `TypedArray` is a bit magical itself, and we highly doubt you’ll ever use
    `context.getTheme().obtainStyledAttributes` in any other setting. As always, we
    encourage you to read the dev docs and even check out the source code, but in
    this case (as happens frequently with framework-level compilation operations),
    you might just want to trust us.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You will probably want to wrap that custom attribute logic in an `initialize`
    method and call it for every constructor signature for your custom view, or you
    can use the handy trick of each constructor calling the next level up with default
    or `null` values.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can configure a custom view on iOS and build in a scene within a storyboard
    or directly within a XIB file inside of Xcode. Unfortunately, that approach can
    quickly become unsustainable due to the complexity in reusing such a view. Typically,
    when “custom views” are referenced in iOS, a custom class that inherits from the
    root view class in iOS is what’s being implied. These views are often reusable
    and typically contain a great deal more functionality than what’s possible without
    violating single-responsibility principles and stuffing that functionality into
    a view controller directly. Let’s learn a bit more about some best practices in
    creating custom views within iOS and UIKit.
  prefs: []
  type: TYPE_NORMAL
- en: How to Create a Custom View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fundamentally, on iOS a view is a `UIView` instance. This can be either a direct
    instance of `UIView`, or a subclass of `UIView`. In order to create a custom view,
    it’s not much harder than subclassing `UIView` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are two initializers that need to be present if you plan on adding more
    properties and want the object to be ready to go whenever it’s initialized. These
    are `init(coder:)` and `init(frame:)`. You can add any setup code necessary to
    prepare the object for use inside these methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for example, we wanted a view with a red background that contained a button
    reading “Click Me!” we could set this up with an object like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `setupView` method is shared between both initializers and is called whenever
    the view is created. This allows a consistent setup process to happen. Inside
    `setupView`, the view’s `backgroundColor` is set to a `UIColor` instance of `.red`,
    and a new button instance is created and added as a subview.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also possible to add properties to our view. For example, let’s make the
    text inside the button configurable like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve added a new property, `buttonText`, to store our button’s title label
    text in a variable that we can use to populate it. That will allow us to initialize
    the button and pass in the correct text at the same time. In addition, we’ve transformed
    our `setupView` method a bit: we took the button initialization out of there and
    added it to a `lazy` property that’s stored so we can change it later and not
    have it added to the view again as a new button.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at how we can use our new custom view.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use a Custom View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It could be as simple as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code creates a new custom view controller and instantiates an instance
    of the view. Then, it adds it to the view controllers view. Pretty simple!
  prefs: []
  type: TYPE_NORMAL
- en: We can, however, use Interface Builder to add an instance of the button directly.
    In a storyboard or XIB file, add a new View object from the Library. Then, use
    the Identity inspector to set the object’s custom class to “SomeView” to change
    the class mapped to the view.
  prefs: []
  type: TYPE_NORMAL
- en: This is good, but we can do even better with a few custom flags relevant to
    Interface Builder called `@IBInspectable` and `@IBDesignable`. These flags enable
    Interface Builder to configure and display the view like it’ll be displayed inside
    a running app as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use them, decorate the custom view in code like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you go back to the storyboard or view, you can see in the Attributes
    inspector for the view there is now a new field called “Button Text” where you
    can set the text for the button. If you change it, Interface Builder will update
    the button text displayed on-screen (see [Figure 3-1](#topics_custom_views_some_view))!
  prefs: []
  type: TYPE_NORMAL
- en: Interface Builder, UIKit, and Xcode are a powerful combination. You can really
    create any number of different views and variations—the only limit is your imagination.
    The options available are vast and impossible to enumerate in a single chapter
    of a book. For more information, certainly check out Apple’s [developer documentation
    on `UIView`](https://oreil.ly/QtOVC).
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom view with editable fields in Interface Builder](assets/nmdv_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. Custom view with editable fields in Interface Builder
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter wraps up our coverage on UI controllers ([Chapter 1](ch01.html#topics_ui_controllers)),
    views ([Chapter 2](ch02.html#topics_views)), and custom views. We’ve covered a
    lot of ground.
  prefs: []
  type: TYPE_NORMAL
- en: We showed that creating a custom view requires some subclassing and customization
    in both Android and iOS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are differences in how to configure the views, set them up, and instantiate
    them for use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We discussed the approaches and ways in which custom views can be used to build
    custom interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both platforms have a vast and powerful set of tools to build interfaces that
    can delight and surprise users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
