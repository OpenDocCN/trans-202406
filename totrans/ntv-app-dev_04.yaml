- en: Chapter 3\. Custom Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。自定义组件
- en: While both Android and iOS provide a large number of widgets and components
    out of the box, there’s not always parity, and it’s very likely you’ll want to
    create your own at some point. You might want a date or color picker with custom
    look or behavior, a switch or toggle with a built-in label, data visualization
    components like charts and graphs, or something as simple as a configurable label
    and icon that’s suited just for your app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Android 和 iOS 都提供了大量开箱即用的小部件和组件，但并不总是一致，并且很可能您希望在某些时候创建自己的组件。您可能希望拥有具有自定义外观或行为的日期或颜色选择器，带有内置标签的开关或切换按钮，数据可视化组件如图表和图形，或者简单地适合您的应用程序的可配置标签和图标。
- en: Whatever the need, there’s a pretty good chance you can create it in either
    framework—but the process is very different and can be surprisingly arcane.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论需求如何，您很可能可以在任何一个框架中创建它——但这个过程非常不同，并且可能会出人意料地神秘。
- en: Tasks
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: 'In this chapter, you’ll learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: How to create a custom view.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建自定义视图。
- en: How to use a custom view.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用自定义视图。
- en: Android
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: Since most layouts in Android apps are created with XML data, getting your custom
    component to accept and react appropriately to arbitrary properties is something
    you’ll probably want to offer. For example, if you were to create a custom color
    picker, you’d probably want to offer a default color to start with, or perhaps
    even a specific color space like HSL or RGB.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数 Android 应用程序中的布局是使用 XML 数据创建的，使您的自定义组件能够接受和适当地对任意属性作出反应是您可能希望提供的功能。例如，如果您要创建一个自定义颜色选择器，您可能希望提供一个默认的起始颜色，或者甚至是特定的颜色空间，如
    HSL 或 RGB。
- en: Since XML resources are compiled, you’ll need to make sure the system recognizes
    the extra properties you allow on your component and what values are valid. For
    example, if you add a `color` attribute, you wouldn’t want to accept a dimension
    value—you’d want only valid colors, or perhaps color resource IDs, to be accepted.
    If a user tries to enter an invalid value format, the program will fail to compile,
    and Android Studio will notify the user, as we’d expect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 XML 资源是编译的，您需要确保系统识别出您的组件上允许的额外属性以及哪些值是有效的。例如，如果您添加了一个`color`属性，您不希望接受尺寸值——您只希望接受有效的颜色，或者可能是颜色资源
    ID。如果用户尝试输入无效的值格式，则程序将无法编译，Android Studio 将通知用户，正如我们所期望的那样。
- en: How to Create a Custom View
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建自定义视图
- en: 'The basic premise of a custom `View` class is probably pretty close to what
    you’d expect: subclass either `View` or `ViewGroup`, or an existing subclass,
    and offer your own functionality however you see fit. A custom `View` is somewhat
    limited—it can really only modify what it draws (text, colors, shapes) or how
    large it is reported. The former can be accomplished using the `onDraw` method
    of the `View`. The method accepts a single parameter, a `Canvas` instance that
    will always be populated for you and has the same dimensions of the `View` itself.
    Check out the dev docs on the `Canvas` object, but really you’re pretty free to
    do whatever you’d like here. There are methods for drawing text and shapes. You
    can use geometric classes like `Rect` or `Path` to draw more complicated structures,
    and `Paint` objects to customize the color, fill, or texture.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义`View`类的基本前提可能与您期望的非常接近：子类化`View`或`ViewGroup`，或现有的子类，并根据需要提供自己的功能。自定义`View`类有些受限——它实际上只能修改其绘制的内容（文本、颜色、形状）或其报告的大小。前者可以通过`View`的`onDraw`方法实现。该方法接受一个参数，一个`Canvas`实例，该实例将始终为您填充，并具有与`View`本身相同的尺寸。查看关于`Canvas`对象的开发文档，但实际上您在这里可以做任何您想做的事情。有用于绘制文本和形状的方法。您可以使用像`Rect`或`Path`这样的几何类来绘制更复杂的结构，以及`Paint`对象来自定义颜色、填充或纹理。
- en: 'For example, the following simple `View` class will draw a red circle (or oval)
    that will fill the frame of the `View`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下简单的`View`类将绘制一个红色的圆（或椭圆），填充`View`的框架：
- en: As you can see, you could provide setters to customize color or provide a custom
    `Paint` to tile bitmaps, create shadow layers, or mix gradients.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，您可以提供设置器来自定义颜色或提供一个自定义的`Paint`来平铺位图，创建阴影层或混合渐变。
- en: 'Similarly, you could subclass `TextView` so that it always has a single border
    along the bottom edge, perhaps for use in a `LinearLayout` or `RecyclerView`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，您可以对`TextView`进行子类化，以便它始终沿底部边缘具有单个边框，可能用于`LinearLayout`或`RecyclerView`中：
- en: 'You might add a new method to change the color of the border and redraw it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会添加一个新的方法来更改边框的颜色并重新绘制它：
- en: A custom `ViewGroup`, on the other hand, might represent a new layout strategy
    or encompass a set of child `View` and `ViewGroup` instances that make up a sophisticated
    component like a date picker or media player. Using `ViewGroup` in this fashion
    is generally referred to as creating a custom “component” and requires a much
    deeper dive. We’ll touch on it here, but be sure to check out [the documentation](https://oreil.ly/ugTKF)
    for a more dedicated and thorough write-up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，自定义的`ViewGroup`可能代表一种新的布局策略，或者涵盖一组子`View`和`ViewGroup`实例，组成类似日期选择器或媒体播放器的复杂组件。以这种方式使用`ViewGroup`通常称为创建自定义“组件”，需要更深入的了解。我们会在这里简单提及，但请务必查阅[文档](https://oreil.ly/ugTKF)以获取更详尽的介绍。
- en: 'The main points to consider can be summed up in two methods: `onMeasure` and
    `onLayout`. `onMeasure` tells the parent how much space the custom component *wants*.
    Sometimes that’s all the available space; sometimes it’s only as much space as
    its contents require, or it might be a mix.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑的主要要点可以总结为两个方法：`onMeasure`和`onLayout`。`onMeasure`告诉父组件自定义组件需要多少空间。有时这是所有可用空间；有时只是其内容所需的空间，或者可能是两者的组合。
- en: '`onMeasure` is passed two `int` parameters: the `widthMeasureSpec` parameter
    and `heightMeasureSpec`. These values include bits that indicate a “mode” (like
    a flag to indicate the dimension should consume the same space as its parent,
    called `MATCH_PARENT`), as well as a pixel dimension, potentially.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`onMeasure`方法传入两个`int`参数：`widthMeasureSpec`和`heightMeasureSpec`。这些值包括指示“模式”的位（如指示尺寸应与其父视图相同的标志，称为`MATCH_PARENT`），以及像素维度，可能还有其他的。'
- en: You can use `MeasureSpec.getMode` and `MeasureSpec.getSize` to read those values
    from a masked measure spec.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`MeasureSpec.getMode`和`MeasureSpec.getSize`从遮罩测量规范中读取这些值。
- en: The second method to know is `onLayout`. Various events trigger a request for
    a view tree to lay itself out, like the size of the parent or child changing,
    or when a child is added, removed, or reordered. In addition, as a developer you
    can explicitly request a new layout pass with `View.requestLayout`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个需要了解的方法是`onLayout`。各种事件会触发对视图树进行布局，比如父视图或子视图的大小改变，或者添加、删除或重新排序子视图时。此外，作为开发者，你可以使用`View.requestLayout`显式请求新的布局。
- en: 'The default implementation of `onLayout` does nothing (although concrete subclasses
    of `ViewGroup` like `FrameLayout` and `Linearlayout` do define this method). It’s
    up to you to define how a `ViewGroup` lays out its children. For example, a vertically
    oriented `LinearLayout` first measures all its children (in `onMeasure`); then
    in `onLayout`, it positions its first child at the top, the second child just
    beneath that, the third just beneath the second, and so on. The vertical space
    it reports as required will be the sum total of those heights. A `FrameLayout`
    is a simpler (and more efficient) mechanism: all children are laid out independent
    of one another, with explicit margin values being provided to each child’s `LayoutParams`
    that indicate the top and left values of the child’s position.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`onLayout`的默认实现什么也不做（尽管像`FrameLayout`和`LinearLayout`这样的具体`ViewGroup`子类确实定义了此方法）。你需要定义`ViewGroup`如何布局其子项。例如，纵向定向的`LinearLayout`首先测量其所有子项（在`onMeasure`中）；然后在`onLayout`中，它将第一个子项定位在顶部，第二个子项位于其下方，第三个子项位于第二个子项下方，依此类推。它报告所需的垂直空间将是这些高度的总和。`FrameLayout`是一个更简单（也更高效）的机制：所有子项都独立布局，每个子项的`LayoutParams`提供了明确的边距值，指示子项位置的顶部和左侧值。'
- en: 'For example, the following code would use a `FrameLayout` as the content view
    for an `Activity`, and position a `TextView` at one hundred pixels from the top
    and left. Adding other child `View` instances to that container would have no
    bearing on the position of the `TextView`, since the `FrameLayout` only examines
    the margin values of the `LayoutParams` of children when performing its `onLayout`
    operation:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码将使用`FrameLayout`作为`Activity`的内容视图，并将`TextView`定位在距离顶部和左侧一百像素处。将其他子`View`实例添加到该容器中不会影响`TextView`的位置，因为`FrameLayout`在执行其`onLayout`操作时仅检查子项的`LayoutParams`的边距值：
- en: 'Here’s an `onLayout` implementation that will position its children in order
    horizontally until there is no more available space, at which point it will wrap
    to the next line. This is sometimes known as a “FlowLayout”:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个`onLayout`的实现示例，它会水平按顺序定位其子项，直到没有更多的可用空间，此时会换行到下一行。有时这被称为“FlowLayout”：
- en: Other than that, feel free to add your own methods and properties to create
    whatever functionality your custom component requires.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，随意添加自己的方法和属性，以创建自定义组件所需的任何功能。
- en: How to Use a Custom View
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用自定义视图
- en: So far, we’ve presented a lot of information about custom `Views` and components,
    but for the most part, that information has been orderly and reasonably logical.
    What follows is mostly framework-specific mechanics and might not make sense immediately.
    For the application layer to do its magic requires that we jump through some hoops—don’t
    feel bad if this doesn’t make sense to you right away (or ever, really); we still
    find ourselves looking this up occasionally.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了很多关于自定义`Views`和组件的信息，但大部分情况下，这些信息都是有序且合乎逻辑的。接下来的内容大多是特定于框架的机制，可能不会立即让人理解。要让应用层发挥魔力，我们需要跳过一些障碍——如果你一时无法理解（或者永远无法理解），不要感到难过；我们有时也会发现自己需要查阅这些内容。
- en: 'First, let’s make some assumptions. We’ve got the `TextView` subclass from
    the preceding example: `BottomBorderTextView`. It’s going to be presented in XML
    just like any `TextView` would, with `android` namespace properties like `android:text`
    and `android:textSize`. But now we want to add a property: `borderColor`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们做一些假设。我们有了前面示例中的`TextView`子类：`BottomBorderTextView`。它将像任何`TextView`一样在
    XML 中呈现，具有`android`命名空间属性，如`android:text`和`android:textSize`。但现在我们想要添加一个属性：`borderColor`。
- en: This new attribute is not part of the `android` namespace but is rather part
    of your application’s XML namespace (`http://schemas.android.com/apk/res/com.yourapp`).
    Fortunately, in the previous chapter on `Views`, we saw that we could use the
    “auto” namespace `http://schemas.android.com/apk/res/auto` and have that mapped
    directly to the current app’s namespace.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新属性不是`android`命名空间的一部分，而是您的应用程序的 XML 命名空间（`http://schemas.android.com/apk/res/com.yourapp`）的一部分。幸运的是，在前一章关于`Views`中，我们看到我们可以使用“auto”命名空间`http://schemas.android.com/apk/res/auto`，并且可以直接映射到当前应用程序的命名空间。
- en: First, we have to define this custom attribute as a compiled `values` value.
    This is traditionally put in *res/values/attrs.xml*, but it can really be in any
    *res/values* subdirectory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将此自定义属性定义为已编译的`values`值。传统上，这会放在*res/values/attrs.xml*中，但实际上可以放在任何*res/values*子目录中。
- en: The attribute must be within a `declare-styleable` node, which should have a
    `name` attribute equal to the simple name of your custom component within a `resource`
    node. Each attribute (in this example, just the single `borderColor` attribute)
    is represented as an `attr` node with the name equal to the property name, and
    a format representing acceptable data types (`color`, `boolean`, `dimension`,
    `integer`, and many more).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 属性必须位于`declare-styleable`节点内，该节点应具有与资源节点内自定义组件的简单名称相等的`name`属性。每个属性（在本例中，只有单个`borderColor`属性）都表示为具有与属性名称相等的`attr`节点，并且具有表示可接受数据类型的格式（`color`、`boolean`、`dimension`、`integer`等等）。
- en: 'All together, our example would look something like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们的示例会是这样的：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You could then reference your custom attribute in the XML layout for your custom
    component:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在自定义组件的 XML 布局中引用自定义属性：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, you have to pull the value of the custom attribute during the `View`’s
    construction. This requires some highly unintuitive code. Let’s let the code sample
    explain what English cannot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您必须在`View`的构造过程中提取自定义属性的值。这需要一些非常不直观的代码。让我们让代码示例解释英语无法解释的内容：
- en: 'Where did `R.styleable.BottomBorderTextView` come from? How about this mouthful:
    `R.styleable.BottomBorderTextView_borderColor`? The answer is: magic. The system
    does Magic Things behind the scenes, but you can be (roughly) assured that by
    creating that `resource` XML earlier, these values were added to the global `R`
    instance. The name of the `declare-styleable` node generates the name of the property
    with an underscore appended, and then appends the name of the `attr` node to that.
    The `TypedArray` is a bit magical itself, and we highly doubt you’ll ever use
    `context.getTheme().obtainStyledAttributes` in any other setting. As always, we
    encourage you to read the dev docs and even check out the source code, but in
    this case (as happens frequently with framework-level compilation operations),
    you might just want to trust us.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.styleable.BottomBorderTextView` 是从哪里来的？`R.styleable.BottomBorderTextView_borderColor`
    又是什么？答案是：魔术。系统在幕后进行了一些神奇的事情，但可以大致保证，通过先前创建的 `resource` XML，这些值已添加到全局 `R` 实例中。`declare-styleable`
    节点的名称生成带有下划线附加的属性名称，然后将 `attr` 节点的名称附加到其后。`TypedArray` 本身也有些神奇，我们强烈怀疑你会在其他场景中使用
    `context.getTheme().obtainStyledAttributes`。一如既往，我们鼓励您阅读开发文档，甚至查看源代码，但在这种情况下（通常在框架级编译操作中频繁发生），您可能只想相信我们。'
- en: Warning
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: You will probably want to wrap that custom attribute logic in an `initialize`
    method and call it for every constructor signature for your custom view, or you
    can use the handy trick of each constructor calling the next level up with default
    or `null` values.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要在一个 `initialize` 方法中封装自定义属性逻辑，并为你自定义视图的每个构造函数签名调用它，或者你可以使用每个构造函数调用默认或 `null`
    值的便利技巧。
- en: iOS
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: You can configure a custom view on iOS and build in a scene within a storyboard
    or directly within a XIB file inside of Xcode. Unfortunately, that approach can
    quickly become unsustainable due to the complexity in reusing such a view. Typically,
    when “custom views” are referenced in iOS, a custom class that inherits from the
    root view class in iOS is what’s being implied. These views are often reusable
    and typically contain a great deal more functionality than what’s possible without
    violating single-responsibility principles and stuffing that functionality into
    a view controller directly. Let’s learn a bit more about some best practices in
    creating custom views within iOS and UIKit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，你可以配置一个自定义视图，并在Xcode中的故事板或直接在XIB文件中构建场景。不幸的是，由于重用这样的视图的复杂性，这种方法很快就会变得不可持续。通常，在iOS中提到“自定义视图”时，指的是一个从iOS根视图类继承的自定义类。这些视图通常可重复使用，并且通常包含比直接将功能塞入视图控制器中更多的功能。让我们更多地了解在iOS和UIKit中创建自定义视图的一些最佳实践。
- en: How to Create a Custom View
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建自定义视图
- en: 'Fundamentally, on iOS a view is a `UIView` instance. This can be either a direct
    instance of `UIView`, or a subclass of `UIView`. In order to create a custom view,
    it’s not much harder than subclassing `UIView` like so:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，视图基本上是一个 `UIView` 实例。这可以是直接的 `UIView` 实例，也可以是 `UIView` 的子类。为了创建一个自定义视图，仅需像这样子类化
    `UIView`：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are two initializers that need to be present if you plan on adding more
    properties and want the object to be ready to go whenever it’s initialized. These
    are `init(coder:)` and `init(frame:)`. You can add any setup code necessary to
    prepare the object for use inside these methods.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划添加更多属性并希望对象在初始化时准备就绪，那么需要存在两个初始化器：`init(coder:)` 和 `init(frame:)`。你可以在这些方法内部添加任何必要的设置代码，以准备对象供使用。
- en: 'If, for example, we wanted a view with a red background that contained a button
    reading “Click Me!” we could set this up with an object like so:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要一个红色背景的视图，其中包含一个标有“Click Me!”的按钮，我们可以像这样设置一个对象：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `setupView` method is shared between both initializers and is called whenever
    the view is created. This allows a consistent setup process to happen. Inside
    `setupView`, the view’s `backgroundColor` is set to a `UIColor` instance of `.red`,
    and a new button instance is created and added as a subview.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupView` 方法在两个初始化器之间共享，并且在创建视图时调用。这允许一个一致的设置过程发生。在 `setupView` 内部，视图的 `backgroundColor`
    被设置为 `.red` 的 `UIColor` 实例，并创建一个新的按钮实例并将其添加为子视图。'
- en: 'It’s also possible to add properties to our view. For example, let’s make the
    text inside the button configurable like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以向我们的视图添加属性。例如，让我们使按钮内部的文本可配置，如下所示：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We’ve added a new property, `buttonText`, to store our button’s title label
    text in a variable that we can use to populate it. That will allow us to initialize
    the button and pass in the correct text at the same time. In addition, we’ve transformed
    our `setupView` method a bit: we took the button initialization out of there and
    added it to a `lazy` property that’s stored so we can change it later and not
    have it added to the view again as a new button.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个新的属性`buttonText`，用于在变量中存储按钮的标题文本，以便我们可以使用它来填充按钮。这将允许我们初始化按钮并同时传递正确的文本。此外，我们稍微改进了我们的`setupView`方法：我们将按钮初始化从中删除，并添加到一个`lazy`属性中存储，这样我们可以稍后更改它，而不必将其作为新按钮再次添加到视图中。
- en: Let’s take a look at how we can use our new custom view.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用我们的新自定义视图。
- en: How to Use a Custom View
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用自定义视图
- en: 'It could be as simple as the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以简单到如下程度：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code creates a new custom view controller and instantiates an instance
    of the view. Then, it adds it to the view controllers view. Pretty simple!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建一个新的自定义视图控制器，并实例化视图的一个实例。然后，将其添加到视图控制器的视图中。非常简单！
- en: We can, however, use Interface Builder to add an instance of the button directly.
    In a storyboard or XIB file, add a new View object from the Library. Then, use
    the Identity inspector to set the object’s custom class to “SomeView” to change
    the class mapped to the view.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以使用界面生成器直接添加按钮的实例。在Storyboard或XIB文件中，从库中添加一个新的视图对象。然后，使用身份检查器将对象的自定义类设置为“SomeView”，以更改映射到视图的类。
- en: This is good, but we can do even better with a few custom flags relevant to
    Interface Builder called `@IBInspectable` and `@IBDesignable`. These flags enable
    Interface Builder to configure and display the view like it’ll be displayed inside
    a running app as much as possible.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但是我们可以通过一些与界面生成器相关的自定义标志`@IBInspectable`和`@IBDesignable`做得更好。这些标志使界面生成器尽可能地配置和显示视图，就像它将在运行的应用程序中显示的那样。
- en: 'To use them, decorate the custom view in code like so:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它们，请在代码中像这样装饰自定义视图：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, if you go back to the storyboard or view, you can see in the Attributes
    inspector for the view there is now a new field called “Button Text” where you
    can set the text for the button. If you change it, Interface Builder will update
    the button text displayed on-screen (see [Figure 3-1](#topics_custom_views_some_view))!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你回到Storyboard或视图中，在视图的属性检查器中，现在有一个名为“Button Text”的新字段，你可以在这里设置按钮的文本。如果你更改它，界面生成器将更新屏幕上显示的按钮文本（见[图 3-1](#topics_custom_views_some_view)）！
- en: Interface Builder, UIKit, and Xcode are a powerful combination. You can really
    create any number of different views and variations—the only limit is your imagination.
    The options available are vast and impossible to enumerate in a single chapter
    of a book. For more information, certainly check out Apple’s [developer documentation
    on `UIView`](https://oreil.ly/QtOVC).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 界面生成器、UIKit和Xcode是强大的组合。你可以真正创建任意数量的不同视图和变体——唯一的限制是你的想象力。可用的选项是广泛的，不可能在一本书的单一章节中逐一列出。有关更多信息，请务必查阅苹果的[UIView开发者文档](https://oreil.ly/QtOVC)。
- en: '![Custom view with editable fields in Interface Builder](assets/nmdv_0301.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![在界面生成器中具有可编辑字段的自定义视图](assets/nmdv_0301.png)'
- en: Figure 3-1\. Custom view with editable fields in Interface Builder
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 在界面生成器中具有可编辑字段的自定义视图
- en: What We’ve Learned
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们学到了什么
- en: This chapter wraps up our coverage on UI controllers ([Chapter 1](ch01.html#topics_ui_controllers)),
    views ([Chapter 2](ch02.html#topics_views)), and custom views. We’ve covered a
    lot of ground.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了我们对UI控制器（[第 1 章](ch01.html#topics_ui_controllers)）、视图（[第 2 章](ch02.html#topics_views)）和自定义视图的涵盖。我们已经涵盖了很多内容。
- en: We showed that creating a custom view requires some subclassing and customization
    in both Android and iOS.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们展示了在Android和iOS中创建自定义视图需要一些子类化和定制。
- en: There are differences in how to configure the views, set them up, and instantiate
    them for use.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置视图、设置和实例化它们以供使用时存在差异。
- en: We discussed the approaches and ways in which custom views can be used to build
    custom interfaces.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们讨论了使用自定义视图来构建自定义界面的方法和方式。
- en: Both platforms have a vast and powerful set of tools to build interfaces that
    can delight and surprise users.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个平台都有强大而广泛的工具集，用于构建可以让用户喜悦和惊讶的界面。
