- en: Chapter 15\. Working with Media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pretty pictures. Animations. Cool videos. Sound!
  prefs: []
  type: TYPE_NORMAL
- en: The web is a richer place through the availability of many media types. Our
    old friends SVG and Canvas can be used for complex animations, charts, and graphs.
    Added to them are the video and audio elements included in HTML5, and the near-future
    potential of 3D graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Best of all, none of these require any kind of proprietary plug-in—they’re all
    integrated with all your browser clients, including those on your smartphones,
    tablets, and computers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript to SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add JavaScript to an SVG file or element.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript in SVG is included in `script` elements, just as with HTML, except
    with the addition of CDATA markup surrounding the script ([Example 15-1](#demonstration_of_javascript_within_an_sv)).
    DOM methods are also available for working with the SVG elements.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-1\. Demonstration of JavaScript within an SVG file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the solution demonstrates, SVG is XML, and the rules for embedding script
    into XML must be adhered to. This means providing the script `type` within the
    `script` tag, as well as wrapping the script contents in a CDATA block. If you
    don’t have the CDATA section, and your script uses characters such as `<` or `&`,
    your page will have errors, because the XML parser treats them as XML characters,
    not script.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There is some drive to treat SVG as HTML, especially when the SVG is inline
    in HTML documents. That’s what Chrome does. Still, it’s better to be safe than
    sorry, and follow XML requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The DOM methods, such as `document.getElementById()`, aren’t HTML specific;
    they’re usable with any XML document, including SVG. What’s new is the SVG-specific
    `fill` attribute, an attribute unique to SVG elements, such as `rect`.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If namespaces were used with any of the elements in the file, then the namespace
    version of the DOM methods would have to be used.
  prefs: []
  type: TYPE_NORMAL
- en: The code in the solution is a standalone SVG file, with a *.svg* extension.
    If we were to embed the SVG within an HTML file, as shown in [Example 15-2](#svg_element_from_example_15-1comma_embed),
    the color-changing animation would work the same. The CDATA section is removed
    because all modern browsers understand the SVG is now in an HTML context. If the
    file is XHTML, though, add them back.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-2\. SVG element from [Example 15-1](#demonstration_of_javascript_within_an_sv),
    embedded into an HTML page
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The above example embeds the SVG directly into the HTML page. You can also
    embed a JavaScript-containing SVG file on the page by using the `<object>` tag
    with a fallback `<img>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All modern browsers support SVG, including SVG in HTML. IE supports SVG after
    version 9.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To learn more about SVG, I recommend [*SVG Animations*](https://www.oreilly.com/library/view/svg-animations/9781491939697/)
    by Sarah Drasner (O’Reilly).
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra: Using SVG Libraries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There aren’t quite as many libraries for working with SVG as there are for
    working with Canvas, but the ones that exist are very handy. One of the most popular
    is the D3 library, covered in [“Creating an SVG Bar Chart with D3”](#creating_svg_bar_chart_d3).
    A few other popular libraries include [Raphaël](http://raphaeljs.com), [GreenSock](https://greensock.com),
    [Snap.svg](http://snapsvg.io), and [SVG.js](https://svgjs.dev/docs/3.0). All of
    these can simplify SVG creation and animation. The following code snippet shows
    an example of using Raphaël:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Accessing SVG from a Web Page Script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to modify the contents of an SVG element from script within the web
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the SVG is embedded directly in the web page, access the element and its
    attributes using the same functionality you would use with any other web page
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the SVG is in an external SVG file embedded into the page via an
    `object` element, you have to get the document for the external SVG file in order
    to access the elements. The technique requires object detection because the process
    differs by browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first option listed in the solution accesses SVG embedded in an HTML file.
    You can access SVG elements using the same methods you’ve used to access HTML
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: The second option is a little more involved, and depends on retrieving the document
    object for the SVG document. The first approach tries to access the `contentDocument`
    property on the object. If this fails, the application then tries to access the
    SVG document using `getSVGDocument()`. Once you have access to the SVG document
    object, you can use the same DOM methods you would use with elements native to
    the web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 15-3](#accessing_svg_in_an_object_element_from) shows the second way
    to add SVG to a web page, and how to access the SVG element(s) from script in
    HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-3\. Accessing SVG in an object element from script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the example code, the object is accessed after it has loaded; the `object.onload`
    event handler is then accessed to get the SVG document and assign the function
    to the `onclick` event handler.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SVG Bar Chart with D3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a scalable bar chart, but you’re hoping to avoid having to
    create every last bit of the graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use D3 and SVG to create a chart bound to a set of data that your application
    provides. [Example 15-4](#bar_chart_svg_d3) shows a vertical bar chart created
    using D3 with a given set of data representing the height of each bar.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-4\. SVG bar chart created using D3
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: D3 isn’t a standard graphics tool that creates the shape based on the dimensions
    you provide. With D3, you give it a set of data, the objects used to visualize
    the data, and then stand back and let it do its thing. It sounds simple, but to
    get this data visualization goodness, you do have to properly set it up, and that
    can be challenging when you first start using the library.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, be aware that D3 makes use of *method chaining* to a maximum degree.
    Yes, you can invoke methods separately, but it’s clearer, cleaner, and more efficient
    to use the library’s chaining support.
  prefs: []
  type: TYPE_NORMAL
- en: In the solution, the first line is the creation of a data set as an array. D3
    expects data points to be in an array, though each element can be an object, as
    well as a simple value, as shown in the solution. Next, the maximum height of
    the bar chart is defined, as is the width of each bar. Next, we get into the first
    use of D3.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[D3](http://d3js.org), created by Mike Bostock, is a powerful data visualization
    tool that isn’t necessarily something you can pick up and master in a lazy afternoon.
    However, it is a tool well worth learning, so consider the example in this recipe
    more of a teaser to get you interested, rather than a definitive introduction.'
  prefs: []
  type: TYPE_NORMAL
- en: For a more in-depth primer, I recommend [*D3 for the Impatient*](http://shop.oreilly.com/product/0636920224341.do)
    by Philipp Janert (O’Reilly).
  prefs: []
  type: TYPE_NORMAL
- en: I could have added a static SVG element to the web page, but I wanted to demonstrate
    how D3 creates an element. By creating the SVG element, we’re also getting a reference
    to it for future work, though we could have used D3 to get a reference to an existing
    element. In the code, a reference to the `body` element is obtained using D3’s
    `select()` method. Once this happens, a new SVG element is appended to the `body`
    element via `append()`, and attributes are given to it via the `attr()` function.
    The height of the element is already predefined, but the width is equal to multiplying
    the number of data elements by the bar width (+1, to provide necessary spacing).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the SVG element is created, the code uses D3’s *scale* functionality to
    determine the necessary ratio between the element’s height and each bar’s height,
    in such a way that the bar chart fills the SVG element, but each bar’s height
    is proportional. It does this by using `scale.linear()` to create a linear scale.
    According to the D3 documentation, “The mapping is linear in that the output range
    value *y* can be expressed as a linear function of the input domain value *x*:
    *y* = *mx* + *b*.”'
  prefs: []
  type: TYPE_NORMAL
- en: The `domain()` function sets the input domain for the scale, while the `range()`
    sets the output range. In the solution, the value given for the domain is zero
    to the maximum value in the data set, determined via a call to `max()`. The value
    given for the range is zero to the height of the SVG element. A function is then
    returned to a variable that will normalize any data passed to it when called.
    If the function is given a value equal to the height of the largest data value,
    the returned value is equal to the height of the element (in this case, the largest
    data value of 100 returns a scaled value of 400).
  prefs: []
  type: TYPE_NORMAL
- en: The last portion of the code is the part that creates the bars. We need something
    to work with, so the code calls `selectAll()` with `rect`. There aren’t any `rect`
    elements in the SVG block yet, but we’ll be adding them. The data is passed to
    D3 via the `data()` method, and then the `enter()` function is called. What `enter()`
    does is process the data and return placeholders for all the missing elements.
    In the solution, placeholders for all 15 `rect` elements, one for each bar, are
    created.
  prefs: []
  type: TYPE_NORMAL
- en: A `rect` element is then appended to the SVG element with `append()`, and the
    attributes for each are set with `attr()`. In the solution, the `fill` and `stroke`
    are given, though these could have been defined in the page’s stylesheet. Following,
    the position for the `x` attribute, or the lower-left attribute for the bar, is
    provided as a function, where `d` is the current datum (data value) and `i` is
    the current index. For the `x` attribute, the index is multiplied by the `barWidth`,
    plus one (1), to account for spacing.
  prefs: []
  type: TYPE_NORMAL
- en: For the `y` attribute, we have to get a little tricky. SVG’s point of origin
    is the top-left corner, which means increasing values of `y` go down the chart,
    not up. To reverse this, we need to subtract the value of `y` from the height.
    However, we can’t just do this directly. If the code used the datum passed to
    it directly, then we’d have a proportional chart with very small, scrunched-down
    bars. Instead we need to use the newly created scale function, `x`, passing the
    datum to it.
  prefs: []
  type: TYPE_NORMAL
- en: The width of each bar is a constant value given in `barWidth`, and the height
    is just the scale function variable, which is equivalent to calling the scale
    function and passing in the datum. All of this creates the chart shown in [Figure 15-1](#example_with_normalization).
  prefs: []
  type: TYPE_NORMAL
- en: '![jsc3 1501](assets/jsc3_1501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-1\. Example of a bar chart with each bar’s height normalized to fill
    the given space
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Integrating SVG and the Canvas Element in HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the `canvas` element and SVG together within a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One option is to embed both the SVG and the `canvas` element directly into
    the HTML page, and then access the `canvas` element from script within SVG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can embed the `canvas` element as a foreign object directly in the SVG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the SVG element is embedded into the current web page, you can access HTML
    elements from within the SVG. However, you can also embed elements directly in
    SVG, using the SVG `foreignObject` element. This element allows us to embed XHTML,
    MathML, RDF, or any other XML-based syntax.
  prefs: []
  type: TYPE_NORMAL
- en: In both solutions, I was able to use `getElementById()`. However, if I want
    to manipulate the elements using other methods, such as `getElementsByTagName()`,
    I have to be careful about which version of the method I use. For instance, I
    can use `getElementsByTagName()` for the outer `canvas` element, but I would need
    to use the namespace version of the method, `getElementsByTagNameNS`, if the contained
    object is XML, such as RDF/XML. Because the embedded object in the solution is
    HTML5, a namespace wasn’t necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the canvas context, use the element like you would from script
    within HTML: add rectangles, draw paths, create arcs, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra: Canvas? Or SVG?'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why would you use Canvas over SVG, or SVG over Canvas? The `canvas` element
    is faster in frame-type animations. With each animation, the browser only needs
    to redraw the changed pixels, not recreate the entire scene. However, the advantage
    you get with the `canvas` element animation lessens when you have to support a
    variety of screen sizes, from smartphone to large monitor. SVG scales beautifully.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage to SVG is that it figures in rich data visualizations with
    the assistance of powerful libraries. But then, Canvas is used with 3D systems,
    such as WebGL.
  prefs: []
  type: TYPE_NORMAL
- en: 'One use of SVG and Canvas together is to provide a fallback for the canvas
    element: the SVG writes to the DOM and persists even if JavaScript is turned off,
    while the `canvas` element does not.'
  prefs: []
  type: TYPE_NORMAL
- en: Running a Routine When an Audio File Begins Playing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to provide an audio file and then share additional information when
    the audio file begins or ends playing.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the HTML5 `audio` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'and capture either its `play` event (playback has begun) or `ended` event (playback
    has finished):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'then display the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 added two media elements: `audio` and `video`. These simple-to-use controls
    provide a way to play audio and video files.'
  prefs: []
  type: TYPE_NORMAL
- en: In the solution, the `audio` element’s `controls` Boolean attribute is set,
    so the controls are displayed. The element has a `src` of a WAV audio file for
    in-browser playback. Additionally, a link to the WAV file is provided as a fallback,
    which means people using browsers that don’t support `audio` can still access
    the sound file. I could have also provided an `object` element, or other fallback
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: WAV is a widely supported audio format, but different browsers support various
    formats and filetypes. The Mozilla Developer Network has a comprehensive [table](http://mzl.la/1DS3rPL)
    with audio and video codec support for the various browsers, and Wikipedia maintains
    a [simple browser support table](https://oreil.ly/55EwV) for audio coding formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'The media elements come with a set of methods to control the playback, as well
    as events that can be triggered when the event occurs. In the solution, the `ended`
    event is captured and assigned the event handler `aboutAudio()`, which displays
    a message about the file after the playback is finished. Notice that though the
    code is using a DOM Level 0 event handler with the window load event, it’s using
    DOM Level 2 event handling with the `audio` element. Browser support is erratic
    with this event handler, so I strongly recommend you use `addEventListener()`.
    However, `onended` does seem to work without problems when used directly in the
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It’s interesting to see the appearance of the elements in all of the browsers
    that currently support them. There is no standard look, so each browser provides
    its own interpretation. You can control the appearance by providing your own playback
    controls and using your own elements/CSS/SVG/Canvas to supply the decoration.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling Video from JavaScript with the video Element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to embed video in your web page along with a consistent look for the
    video controls, regardless of browser and operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the HTML5 `video` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can provide controls for it via JavaScript, as shown in [Example 15-5](#providing_a_custom_control_for_the_html5).
    Buttons are used to provide the video control, and text in a `div` element is
    used to provide feedback on time during the playback.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-5\. Providing a custom control for the HTML5 video element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And in `video.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML5 `video` element, as with the HTML5 `audio` element, can be controlled
    with its own built-in controls, or you can provide your own. The media elements
    support the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`play`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts playing the video
  prefs: []
  type: TYPE_NORMAL
- en: '`pause`'
  prefs: []
  type: TYPE_NORMAL
- en: Pauses the video
  prefs: []
  type: TYPE_NORMAL
- en: '`load`'
  prefs: []
  type: TYPE_NORMAL
- en: Preloads the video without starting play
  prefs: []
  type: TYPE_NORMAL
- en: '`canPlayType`'
  prefs: []
  type: TYPE_NORMAL
- en: Tests if the user agent supports the video type
  prefs: []
  type: TYPE_NORMAL
- en: The media elements don’t support a stop method, so the code emulates one by
    pausing video play and then setting the video’s `currentTime` attribute to 0,
    which basically resets the play start time. I also used `currentTime` to print
    out the video time, using `Math.round` to round the time to the nearest second.
  prefs: []
  type: TYPE_NORMAL
- en: 'The video control is providing two different video codecs: H.264 (*.mp4*) and
    VP8 (*.webm*). Nearly all modern browsers support the WebM file format, but including
    the MP4 provides a fallback for older browsers that support the `video` element.'
  prefs: []
  type: TYPE_NORMAL
- en: The video and audio controls are inherently keyboard accessible. If you replace
    the controls, you’ll want to provide accessibility information with your replacements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The video playback functionality demonstrated in the solution works, as is,
    with video that isn’t encrypted. If the video (or audio) file is encrypted, considerably
    more effort is necessary so that the video plays, making use of the HTML 5.1 W3C
    Encrypted Media Extensions (EME).
  prefs: []
  type: TYPE_NORMAL
- en: The [W3C EME working draft](https://oreil.ly/mMu7q) has been implemented in
    [Internet Explorer 11](http://bit.ly/1DS5umQ), Chrome, Firefox, Microsoft Edge,
    and Safari.
  prefs: []
  type: TYPE_NORMAL
