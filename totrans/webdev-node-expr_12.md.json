["```\nconst port = process.env.PORT || 3000\napp.listen(port, () => console.log(`Express started in ` +\n  `${app.get('env')} mode at http://localhost:${port}` +\n  `; press Ctrl-C to terminate.`))\n```", "```\n$ export NODE_ENV=production\n$ node meadowlark.js\n```", "```\n$ NODE_ENV=production node meadowlark.js\n```", "```\nconst morgan = require('morgan')\nconst fs = require('fs')\n\nswitch(app.get('env')) {\n  case 'development':\n    app.use(morgan('dev'))\n    break\n  case 'production':\n    const stream = fs.createWriteStream(__dirname + '/access.log',\n      { flags: 'a' })\n    app.use(morgan('combined', { stream }))\n    break\n}\n```", "```\nnpm install -g forever\n```", "```\nforever start meadowlark.js\n```", "```\nfunction startServer(port) {\n  app.listen(port, function() {\n    console.log(`Express started in ${app.get('env')} ` +\n      `mode on http://localhost:${port}` +\n      `; press Ctrl-C to terminate.`)\n  })\n}\n\nif(require.main === module) {\n  // application run directly; start app server\n  startServer(process.env.PORT || 3000)\n} else {\n  // application imported as a module via \"require\": export\n  // function to create server\n  module.exports = startServer\n}\n```", "```\nconst cluster = require('cluster')\n\nfunction startWorker() {\n  const worker = cluster.fork()\n  console.log(`CLUSTER: Worker ${worker.id} started`)\n}\n\nif(cluster.isMaster){\n\n  require('os').cpus().forEach(startWorker)\n\n  // log any workers that disconnect; if a worker disconnects, it\n  // should then exit, so we'll wait for the exit event to spawn\n  // a new worker to replace it\n  cluster.on('disconnect', worker => console.log(\n    `CLUSTER: Worker ${worker.id} disconnected from the cluster.`\n  ))\n\n  // when a worker dies (exits), create a worker to replace it\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(\n      `CLUSTER: Worker ${worker.id} died with exit ` +\n      `code ${code} (${signal})`\n    )\n    startWorker()\n  })\n\n} else {\n\n    const port = process.env.PORT || 3000\n    // start our app on worker; see meadowlark.js\n    require('./meadowlark.js')(port)\n\n}\n```", "```\nnode meadowlark-cluster.js\n```", "```\nconst cluster = require('cluster')\n\napp.use((req, res, next) => {\n  if(cluster.isWorker)\n    console.log(`Worker ${cluster.worker.id} received request`)\n  next()\n})\n```", "```\napp.get('/fail', (req, res) => {\n  throw new Error('Nope!')\n})\n```", "```\napp.use((err, req, res, next) => {\n  console.error(err.message, err.stack)\n  app.status(500).render('500')\n})\n```", "```\napp.get('/epic-fail', (req, res) => {\n  process.nextTick(() =>\n    throw new Error('Kaboom!')\n  )\n})\n```", "```\nprocess.on('uncaughtException', err => {\n  console.error('UNCAUGHT EXCEPTION\\n', err.stack);\n  // do any cleanup you need to do here...close\n  // database connections, etc.\n  process.exit(1)\n})\n```", "```\nconst Sentry = require('@sentry/node')\nSentry.init({ dsn: '** YOUR DSN GOES HERE **' })\n\nprocess.on('uncaughtException', err => {\n  // do any cleanup you need to do here...close\n  // database connections, etc.\n  Sentry.captureException(err)\n  process.exit(1)\n})\n```", "```\napp.enable('trust proxy')\n```", "```\n  \"scripts\": {\n    \"stress\": \"artillery quick --count 10 -n 20 http://localhost:3000/\"\n  }\n```", "```\nStarted phase 0, duration: 1s @ 16:43:37(-0700) 2019-04-14\nReport @ 16:43:38(-0700) 2019-04-14\nElapsed time: 1 second\n  Scenarios launched:  10\n  Scenarios completed: 10\n  Requests completed:  200\n  RPS sent: 147.06\n  Request latency:\n    min: 1.8\n    max: 10.3\n    median: 2.5\n    p95: 4.2\n    p99: 5.4\n  Codes:\n    200: 200\n\nAll virtual users finished\nSummary report @ 16:43:38(-0700) 2019-04-14\n  Scenarios launched:  10\n  Scenarios completed: 10\n  Requests completed:  200\n  RPS sent: 145.99\n  Request latency:\n    min: 1.8\n    max: 10.3\n    median: 2.5\n    p95: 4.2\n    p99: 5.4\n  Scenario counts:\n    0: 10 (100%)\n  Codes:\n    200: 200\n```"]