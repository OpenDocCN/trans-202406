["```\nArrayList<String> songs = new ArrayList<String>();\n```", "```\n    new ArrayList<Song>()\n    ```", "```\n    List**<Song>**songList =\n           new ArrayList**<Song>()**\n    ```", "```\n    void foo(List**<Song>** list)\n\n    x.foo(songList)\n    ```", "```\n**public class ArrayList**<String> **extends AbstractList**<String>**... {**\n\n     **public boolean add(**String **o)**\n     **// more code**\n**}**\n```", "```\n**public**<T extends Animal> **void takeThing(ArrayList**<T> **list)**\n```", "```\n**public void takeThing(ArrayList**<Animal> **list)**\n```", "```\n**public final class** String\n    implements **java.io.Serializable,** Comparable<String>, **CharSequence {**\n```", "```\nComparator,\nComparable,\ncompareTo( ),\ncompare( ),\nyes,\nno\n```", "```\nCollections.sort(myArrayList);\n```", "```\nCollections.sort(myArrayList, myCompare);\nmyArrayList.sort(myCompare);\n```", "```\nsongList.sort(new Comparator<SongV3>() {\n  public int compare(SongV3 one, SongV3 two) {\n    return one.getTitle().compareTo(two.getTitle());\n  }\n});\n```", "```\nsongList.sort(titleCompare);\n```", "```\nimport __________________;\npublic class SortMountains {\n  public static void main(String [] args) {\n    new SortMountains().go();\n  }\n\n  public void go() {\n    List______________ mountains = new ArrayList<>();\n    mountains.add(new Mountain(\"Longs\", 14255));\n    mountains.add(new Mountain(\"Elbert\", 14433));\n    mountains.add(new Mountain(\"Maroon\", 14156));\n    mountains.add(new Mountain(\"Castle\", 14265));\n    System.out.println(\"as entered:\\n\" + mountains);\n\n    mountains._______(____->____________);\n    System.out.println(\"by name:\\n\" + mountains);\n\n    _________._______(____->____________);\n    System.out.println(\"by height:\\n\" + mountains);\n  }\n}\nclass Mountain {\n  __________________;\n  _________________;\n  ______________________ {\n    _________________;\n    _________________;\n  }\n  _________________________ {\n    ______________________________;\n  }\n}\n```", "```\nif (song1.equals(song2) && song1.hashCode() == song2.hashCode()) {\n    // both references are referring to either a\n    // a single object, or to two objects that are equal\n}\n```", "```\npublic class Jukebox10 {\n  public static void main(String[] args) {\n    new Jukebox10().go();\n  }\n\n  public void go() {\n    List<SongV4> songList = MockMoreSongs.getSongsV4();\n    System.out.println(songList);\n\n    songList.sort((one, two) -> one.getTitle().compareTo(two.getTitle()));\n    System.out.println(songList);\n\n    Set<SongV4> songSet = new TreeSet<>(songList);\n    System.out.println(songSet);\n  }\n}\n```", "```\nSet<SongV4> songSet = new TreeSet<>((o1, o2) -> o1.getBpm() - o2.getBpm());\nsongSet.addAll(songList);\n```", "```\nclass Book implements Comparable<Book> {\n  private String title;\n  public Book(String t) {\n    title = t;\n  }\n\n  public int compareTo(Book other) {\n    return title.compareTo(other.title);\n  }\n}\n```", "```\nList<String> songs = new ArrayList<>();\nsongs.add(\"somersault\");\nsongs.add(\"cassidy\");\nsongs.add(\"$10\");\n```", "```\n    List<String> strings = List.of(\"somersault\", \"cassidy\", \"$10\");\n    ```", "```\n    List<SongV4> songs = List.of(new SongV4(\"somersault\", \"zero 7\", 147),\n                                 new SongV4(\"cassidy\", \"grateful dead\", 158),\n                                 new SongV4(\"$10\", \"hitchhiker\", 140));\n    ```", "```\n    Set<Book> books = Set.of(new Book(\"How Cats Work\"),\n                             new Book(\"Remix your Body\"),\n                             new Book(\"Finding Emo\"));\n    ```", "```\n    Map<String, Integer> scores = Map.of(\"Kathy\", 42,\n                                         \"Bert\", 343,\n                                         \"Skyler\", 420);\n    ```", "```\n    Map<String, String> stores = Map.ofEntries(Map.entry(\"Riley\", \"Supersports\"),\n                                               Map.entry(\"Brooklyn\", \"Camera World\"),\n                                               Map.entry(\"Jay\", \"Homecase\"));\n    ```", "```\npublic void takeAnimals(List<Animal> animals) {\n  for (Animal a : animals) {\n    a.eat();\n  }\n}\n```", "```\npublic <T extends Animal> void takeAnimals(List<T> list) { }\n```", "```\npublic <T extends Animal> List<T> takeAnimals(List<T> list) { }\n```", "```\nList<Dog> dogs = List.of(new Dog(), new Dog());\nList<Dog> vaccinatedDogs = takeAnimals(dogs);\n\nList<Animal> animals = List.of(new Dog(), new Cat());\nList<Animal> vaccinatedAnimals = takeAnimals(animals);\n```", "```\npublic void go() {\n  List<Dog> dogs = List.of(new Dog(), new Dog());\n  List<? extends Animal> vaccinatedSomethings = takeAnimals(dogs);\n}\n\npublic List<? extends Animal> takeAnimals(List<? extends Animal> animals) { }\n```", "```\nComparator,\nComparable,\ncompareTo( ),\ncompare( ),\nyes,\nno\n```", "```\nCollections.sort(myArrayList);\n```", "```\nCollections.sort(myArrayList, myCompare);\n```", "```\nclass Mountain {\n  String name;\n  int height;\n\n  Mountain(String name, int height) {\n    this.name = name;\n    this.height = height;\n  }\n  public String toString( ) {\n    return name + \" \" + height;\n  }\n}\n```", "```\n    Exception in thread \"main\" java.lang.ClassCastException: class Book can-\n    not be cast to class java.lang.Comparable\n          at java.base/java.util.TreeMap.compare(TreeMap.java:1291)\n          at java.base/java.util.TreeMap.put(TreeMap.java:536)\n          at java.base/java.util.TreeSet.add(TreeSet.java:255)\n          at TestTree.go(TestTree.java:16)\n          at TestTree.main(TestTree.java:7)\n    ```"]