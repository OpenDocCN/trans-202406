["```\nimport React, { useState } from \"react\";\n\nfunction Checkbox() {\n  const [checked, setChecked] = useState(false);\n\n  alert(`checked: ${checked.toString()}`);\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        value={checked}\n        onChange={() => setChecked(checked => !checked)}\n      />\n      {checked ? \"checked\" : \"not checked\"}\n    </>\n  );\n};\n```", "```\nfunction Checkbox {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        value={checked}\n        onChange={() => setChecked(checked => !checked)}\n      />\n      {checked ? \"checked\" : \"not checked\"}\n    </>\n  );\n\n  alert(`checked: ${checked.toString()}`);\n};\n```", "```\nfunction Checkbox {\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    alert(`checked: ${checked.toString()}`);\n  });\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        value={checked}\n        onChange={() => setChecked(checked => !checked)}\n      />\n      {checked ? \"checked\" : \"not checked\"}\n    </>\n  );\n};\n```", "```\nuseEffect(() => {\n  console.log(checked ? \"Yes, checked\" : \"No, not checked\");\n});\n```", "```\nuseEffect(() => {\n  localStorage.setItem(\"checkbox-value\", checked);\n});\n```", "```\nuseEffect(() => {\n  txtInputRef.current.focus();\n});\n```", "```\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [val, set] = useState(\"\");\n  const [phrase, setPhrase] = useState(\"example phrase\");\n\n  const createPhrase = () => {\n    setPhrase(val);\n    set(\"\");\n  };\n\n  useEffect(() => {\n    console.log(`typing \"${val}\"`);\n  });\n\n  useEffect(() => {\n    console.log(`saved phrase: \"${phrase}\"`);\n  });\n\n  return (\n    <>\n      <label>Favorite phrase:</label>\n      <input\n        value={val}\n        placeholder={phrase}\n        onChange={e => set(e.target.value)}\n      />\n      <button onClick={createPhrase}>send</button>\n    </>\n  );\n}\n```", "```\ntyping \"\"                             // First Render\nsaved phrase: \"example phrase\"        // First Render\ntyping \"S\"                            // Second Render\nsaved phrase: \"example phrase\"        // Second Render\ntyping \"Sh\"                           // Third Render\nsaved phrase: \"example phrase\"        // Third Render\ntyping \"Shr\"                          // Fourth Render\nsaved phrase: \"example phrase\"        // Fourth Render\ntyping \"Shre\"                         // Fifth Render\nsaved phrase: \"example phrase\"        // Fifth Render\ntyping \"Shred\"                        // Sixth Render\nsaved phrase: \"example phrase\"        // Sixth Render\n```", "```\nuseEffect(() => {\n  console.log(`typing \"${val}\"`);\n}, [val]);\n\nuseEffect(() => {\n  console.log(`saved phrase: \"${phrase}\"`);\n}, [phrase]);\n```", "```\ntyping \"\"                              // First Render\nsaved phrase: \"example phrase\"         // First Render\ntyping \"S\"                             // Second Render\ntyping \"Sh\"                            // Third Render\ntyping \"Shr\"                           // Fourth Render\ntyping \"Shre\"                          // Fifth Render\ntyping \"Shred\"                         // Sixth Render\ntyping \"\"                              // Seventh Render\nsaved phrase: \"Shred\"                  // Seventh Render\n```", "```\nuseEffect(() => {\n  console.log(\"either val or phrase has changed\");\n}, [val, phrase]);\n```", "```\nuseEffect(() => {\n  console.log(\"only once after initial render\");\n}, []);\n```", "```\nuseEffect(() => {\n  welcomeChime.play();\n}, []);\n```", "```\nuseEffect(() => {\n  welcomeChime.play();\n  return () => goodbyeChime.play();\n}, []);\n```", "```\nconst [posts, setPosts] = useState([]);\nconst addPost = post => setPosts(allPosts => [post, ...allPosts]);\n\nuseEffect(() => {\n  newsFeed.subscribe(addPost);\n  welcomeChime.play();\n  return () => {\n    newsFeed.unsubscribe(addPost);\n    goodbyeChime.play();\n  };\n}, []);\n```", "```\nuseEffect(() => {\n  newsFeed.subscribe(addPost);\n  return () => newsFeed.unsubscribe(addPost);\n}, []);\n\nuseEffect(() => {\n  welcomeChime.play();\n  return () => goodbyeChime.play();\n}, []);\n```", "```\nconst useJazzyNews = () => {\n  const [posts, setPosts] = useState([]);\n  const addPost = post => setPosts(allPosts => [post, ...allPosts]);\n\n  useEffect(() => {\n    newsFeed.subscribe(addPost);\n    return () => newsFeed.unsubscribe(addPost);\n  }, []);\n\n  useEffect(() => {\n    welcomeChime.play();\n    return () => goodbyeChime.play();\n  }, []);\n\n  return posts;\n};\n```", "```\nfunction NewsFeed({ url }) {\n  const posts = useJazzyNews();\n\n  return (\n    <>\n      <h1>{posts.length} articles</h1>\n      {posts.map(post => (\n        <Post key={post.id} {...post} />\n      ))}\n    </>\n  );\n}\n```", "```\nif (\"gnar\" === \"gnar\") {\n  console.log(\"gnarly!!\");\n}\n```", "```\nif ([1, 2, 3] !== [1, 2, 3]) {\n  console.log(\"but they are the same\");\n}\n```", "```\nconst array = [1, 2, 3];\nif (array === array) {\n  console.log(\"because it's the exact same instance\");\n}\n```", "```\nconst useAnyKeyToRender = () => {\n  const [, forceRender] = useState();\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", forceRender);\n    return () => window.removeEventListener(\"keydown\", forceRender);\n  }, []);\n};\n```", "```\nfunction App() {\n  useAnyKeyToRender();\n\n  useEffect(() => {\n    console.log(\"fresh render\");\n  });\n\n  return <h1>Open the console</h1>;\n}\n```", "```\nconst word = \"gnar\";\nuseEffect(() => {\n  console.log(\"fresh render\");\n}, [word]);\n```", "```\nconst words = [\"sick\", \"powder\", \"day\"];\nuseEffect(() => {\n  console.log(\"fresh render\");\n}, [words]);\n```", "```\nconst words = [\"sick\", \"powder\", \"day\"];\n\nfunction App() {\n  useAnyKeyToRender();\n  useEffect(() => {\n    console.log(\"fresh render\");\n  }, [words]);\n\n  return <h1>component</h1>;\n}\n```", "```\nfunction WordCount({ children = \"\" }) {\n  useAnyKeyToRender();\n\n  const words = children.split(\" \");\n\n  useEffect(() => {\n    console.log(\"fresh render\");\n  }, [words]);\n\n  return (\n    <>\n      <p>{children}</p>\n      <p>\n        <strong>{words.length} - words</strong>\n      </p>\n    </>\n  );\n}\n\nfunction App() {\n  return <WordCount>You are not going to believe this but...</WordCount>;\n}\n```", "```\nimport React, { useEffect, useMemo } from \"react\";\n```", "```\nconst words = useMemo(() => {\n  const words = children.split(\" \");\n  return words;\n}, []);\n\nuseEffect(() => {\n  console.log(\"fresh render\");\n}, [words]);\n```", "```\nconst words = useMemo(() => children.split(\" \"));\n```", "```\nfunction WordCount({ children = \"\" }) {\n  useAnyKeyToRender();\n\n  const words = useMemo(() => children.split(\" \"), [children]);\n\n  useEffect(() => {\n    console.log(\"fresh render\");\n  }, [words]);\n\n  return (...);\n}\n```", "```\nconst fn = () => {\n  console.log(\"hello\");\n  console.log(\"world\");\n};\n\nuseEffect(() => {\n  console.log(\"fresh render\");\n  fn();\n}, [fn]);\n```", "```\nconst fn = useCallback(() => {\n  console.log(\"hello\");\n  console.log(\"world\");\n}, []);\n\nuseEffect(() => {\n  console.log(\"fresh render\");\n  fn();\n}, [fn]);\n```", "```\nconst useJazzyNews = () => {\n  const [_posts, setPosts] = useState([]);\n  const addPost = post => setPosts(allPosts => [post, ...allPosts]);\n\n  const posts = useMemo(() => _posts, [_posts]);\n\n  useEffect(() => {\n    newPostChime.play();\n  }, [posts]);\n\n  useEffect(() => {\n    newsFeed.subscribe(addPost);\n    return () => newsFeed.unsubscribe(addPost);\n  }, []);\n\n  useEffect(() => {\n    welcomeChime.play();\n    return () => goodbyeChime.play();\n  }, []);\n\n  return posts;\n};\n```", "```\nimport React, { useEffect, useLayoutEffect } from \"react\";\n\nfunction App() {\n  useEffect(() => console.log(\"useEffect\"));\n  useLayoutEffect(() => console.log(\"useLayoutEffect\"));\n  return <div>ready</div>;\n}\n```", "```\nuseLayoutEffect\nuseEffect\n```", "```\nfunction useWindowSize {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const resize = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"resize\", resize);\n    resize();\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n\n  return [width, height];\n};\n```", "```\nfunction useMousePosition {\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n\n  const setPosition = ({ x, y }) => {\n    setX(x);\n    setY(y);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"mousemove\", setPosition);\n    return () => window.removeEventListener(\"mousemove\", setPosition);\n  }, []);\n\n  return [x, y];\n};\n```", "```\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [checked, toggle] = useState(false);\n\n  useEffect(() => {\n    ...\n  }, [checked]);\n\n  useEffect(() => {\n    ...\n  }, []);\n\n  useEffect(() => {\n    ...\n  }, [count]);\n\n  return ( ... )\n}\n```", "```\n[count, checked, DependencyArray, DependencyArray, DependencyArray]\n```", "```\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  if (count > 5) {\n    const [checked, toggle] = useState(false);\n  }\n\n  useEffect(() => {\n    ...\n  });\n\n  if (count > 5) {\n    useEffect(() => {\n      ...\n    });\n  }\n\n  useEffect(() => {\n    ...\n  });\n\n  return ( ... )\n}\n```", "```\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [checked, toggle] =\n  useState(\n  count => (count < 5)\n  ? undefined\n  : !c,\n  (count < 5) ? undefined\n  );\n\n  useEffect(() => {\n    ...\n  });\n\n  useEffect(() => {\n    if (count < 5) return;\n    ...\n  });\n\n  useEffect(() => {\n    ...\n  });\n\n  return ( ... )\n}\n```", "```\nuseEffect(() => {\n  const fn = async () => {\n    await SomePromise();\n  };\n  fn();\n});\n```", "```\nuseEffect(() => {\n  (async () => {\n    await SomePromise();\n  })();\n});\n```", "```\nfunction Checkbox() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        value={checked}\n        onChange={() => setChecked(checked => !checked)}\n      />\n      {checked ? \"checked\" : \"not checked\"}\n    </>\n  );\n}\n```", "```\nonChange={() => setChecked(checked => !checked)}\n```", "```\nfunction Checkbox() {\n  const [checked, setChecked] = useState(false);\n\n  function toggle() {\n    setChecked(checked => !checked);\n  }\n\n  return (\n    <>\n      <input type=\"checkbox\" value={checked} onChange={toggle} />\n      {checked ? \"checked\" : \"not checked\"}\n    </>\n  );\n}\n```", "```\nsetChecked(checked => !checked);\n```", "```\nfunction Checkbox() {\n  const [checked, toggle] = useReducer(checked => !checked, false);\n\n  return (\n    <>\n      <input type=\"checkbox\" value={checked} onChange={toggle} />\n      {checked ? \"checked\" : \"not checked\"}\n    </>\n  );\n}\n```", "```\nconst numbers = [28, 34, 67, 68];\n\nnumbers.reduce((number, nextNumber) => number + nextNumber, 0); // 197\n```", "```\nfunction Numbers() {\n  const [number, setNumber] = useReducer(\n    (number, newNumber) => number + newNumber,\n    0\n  );\n\n  return <h1 onClick={() => setNumber(30)}>{number}</h1>;\n}\n```", "```\nconst firstUser = {\n  id: \"0391-3233-3201\",\n  firstName: \"Bill\",\n  lastName: \"Wilson\",\n  city: \"Missoula\",\n  state: \"Montana\",\n  email: \"bwilson@mtnwilsons.com\",\n  admin: false\n};\n```", "```\nfunction User() {\n  const [user, setUser] = useState(firstUser);\n\n  return (\n    <div>\n      <h1>\n        {user.firstName} {user.lastName} - {user.admin ? \"Admin\" : \"User\"}\n      </h1>\n      <p>Email: {user.email}</p>\n      <p>\n        Location: {user.city}, {user.state}\n      </p>\n      <button>Make Admin</button>\n    </div>\n  );\n}\n```", "```\n<button\n  onClick={() => {\n    setUser({ admin: true });\n  }}\n>\n  Make Admin\n</button>\n```", "```\n<button\n  onClick={() => {\n    setUser({ ...user, admin: true });\n  }}\n>\n  Make Admin\n</button>\n```", "```\nfunction User() {\n  const [user, setUser] = useReducer(\n    (user, newDetails) => ({ ...user, ...newDetails }),\n    firstUser\n  );\n  ...\n}\n```", "```\n<button\n  onClick={() => {\n    setUser({ admin: true });\n  }}\n>\n  Make Admin\n</button>\n```", "```\nconst Cat = ({ name }) => {\n  console.log(`rendering ${name}`);\n  return <p>{name}</p>;\n};\n```", "```\nfunction App() {\n  const [cats, setCats] = useState([\"Biscuit\", \"Jungle\", \"Outlaw\"]);\n  return (\n    <>\n      {cats.map((name, i) => (\n        <Cat key={i} name={name} />\n      ))}\n      <button onClick={() => setCats([...cats, prompt(\"Name a cat\")])}>\n        Add a Cat\n      </button>\n    </>\n  );\n}\n```", "```\nrendering Biscuit\nrendering Jungle\nrendering Outlaw\n```", "```\nrendering Biscuit\nrendering Jungle\nrendering Outlaw\nrendering Ripple\n```", "```\nimport React, { useState, memo } from \"react\";\n\nconst Cat = ({ name }) => {\n  console.log(`rendering ${name}`);\n  return <p>{name}</p>;\n};\n\nconst PureCat = memo(Cat);\n```", "```\ncats.map((name, i) => <PureCat key={i} name={name} />);\n```", "```\nrendering Pancake\n```", "```\nconst Cat = memo(({ name, meow = f => f }) => {\n  console.log(`rendering ${name}`);\n  return <p onClick={() => meow(name)}>{name}</p>;\n});\n```", "```\n<PureCat key={i} name={name} meow={name => console.log(`${name} has meowed`)} />\n```", "```\nconst RenderCatOnce = memo(Cat, () => true);\nconst AlwaysRenderCat = memo(Cat, () => false);\n```", "```\nconst PureCat = memo(\n  Cat,\n  (prevProps, nextProps) => prevProps.name === nextProps.name\n);\n```", "```\nclass Cat extends React.Component {\n  render() {\n    return (\n      {name} is a good cat!\n    )\n  }\n}\n```", "```\nclass Cat extends React.PureComponent {\n  render() {\n    return (\n      {name} is a good cat!\n    )\n  }\n}\n```", "```\nconst PureCat = memo(Cat);\nfunction App() {\n  const meow = useCallback(name => console.log(`${name} has meowed`, []);\n  return <PureCat name=\"Biscuit\" meow={meow} />\n}\n```"]