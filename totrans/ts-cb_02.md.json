["```\nlet a_number = 1000;\n```", "```\nlet a_number = 1000;\n\nif (Math.random() < 0.5) {\n  a_number = \"Hello, World!\";\n}\n\nconsole.log(a_number * 10);\n```", "```\n// @ts-check\nlet a_number = 1000;\n\nif (Math.random() < 0.5) {\n  a_number = \"Hello, World!\";\n// ^-- Type 'string' is not assignable to type 'number'.ts(2322)\n}\n\nconsole.log(a_number * 10);\n```", "```\nfunction addVAT(price, vat = 0.2) {\n  return price * (1 + vat);\n}\n```", "```\naddVAT(1000, \"a string\");\n//           ^-- Argument of type 'string' is not assignable\n//               to parameter of type 'number'.ts(2345)\n```", "```\naddVAT(1000).toUpperCase();\n//           ^-- Property 'toUpperCase' does not\n//               exist on type 'number'.ts(2339)\n```", "```\n/** @type {number} */\nlet amount;\n\namount = '12';\n//       ^-- Argument of type 'string' is not assignable\n//           to parameter of type 'number'.ts(2345)\n\n/**\n * Adds VAT to a price\n *\n * @param {number} price The price without VAT\n * @param {number} vat The VAT [0-1]\n *\n * @returns {number}\n */\nfunction addVAT(price, vat = 0.2) {\n  return price * (1 + vat);\n}\n```", "```\n/**\n * @typedef {Object} Article\n * @property {number} price\n * @property {number} vat\n * @property {string} string\n * @property {boolean=} sold\n */\n\n/**\n * Now we can use Article as a proper type\n * @param {[Article]} articles\n */\nfunction totalAmount(articles) {\n  return articles.reduce((total, article) => {\n    return total + addVAT(article);\n  }, 0);\n}\n```", "```\n$ npm init -y\n```", "```\n$ npm install -D typescript\n```", "```\n$ npx tsc --init\n```", "```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n```", "```\nimport { name } from \"./my-module\";\n\nconsole.log(name);\n//...\n```", "```\nconst my_module_1 = require(\"./my-module\");\nconsole.log(my_module_1.name);\n```", "```\n{\n  \"compilerOptions\": {\n    //...\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\"\n  }\n}\n```", "```\nconsole.log(\"Hello World\");\n```", "```\n$ npx tsc\n```", "```\n// @types/person.d.ts\n\n// An interface for objects of this shape\nexport interface Person {\n  name: string;\n  age: number;\n}\n\n// An interface that extends the original one\n// this is tough to write with JSDoc comments alone.\nexport interface Student extends Person {\n  semester: number;\n}\n```", "```\n// index.js\n/** @typedef { import (\"../@types/person\").Person } Person */\n```", "```\n// index.js, continued\n\n/**\n * @param {Person} person\n */\nfunction printPerson(person) {\n  console.log(person.name);\n}\n```", "```\n{\n  \"compilerOptions\": {\n    \"checkJs\": true,\n    \"noEmit\": true,\n  }\n}\n```", "```\n{\n  \"compilerOptions\": {\n    \"checkJs\": false,\n    \"allowJs\": true\n  }\n}\n```", "```\nimport _ from \"lodash\";\n//            ^- Could not find a declaration\n//               file for module 'lodash'.\n```", "```\n{\n  \"compilerOptions\": {\n    \"noEmitOnError\": false\n  }\n}\n```", "```\nfunction printPerson(person: any) {\n  // This doesn't make sense, but is ok with any\n  console.log(person.gobbleydegook);\n}\n\n// This also doesn't make sense, but any allows it\nprintPerson(123);\n```", "```\nfunction printPerson(person: Person) {\n  console.log(person.name);\n}\n\n// This error will be swallowed\n// @ts-expect-error\nprintPerson(123);\n\nfunction printNumber(nr: number) {\n  console.log(nr);\n}\n\n// v- Unused '@ts-expect-error' directive.ts(2578)\n// @ts-expect-error\nprintNumber(123);\n```", "```\n# Installing React\n$ npm install --save react\n\n# Installing Type Definitions\n$ npm install --save-dev @types/react\n```", "```\n{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./typings\", \"./node_modules/@types\"]\n  }\n}\n```", "```\n{\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"jest\"]\n  }\n}\n```", "```\n// If `@types/lodash` is installed, we get proper\n// type defintions for this NPM package\nimport _ from \"lodash\"\n\nconst result = _.flattenDeep([1, [2, [3, [4]], 5]]);\n```", "```\nconst http = require('http'); ![1](assets/1.png)\n\nconst hostname = '127.0.0.1';\nconst port = process.env.PORT || 3000; ![2](assets/2.png)\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`); ![3](assets/3.png)\n});\n```", "```\nimport { msg } from `./msg.js`; ![1](assets/1.png)\n\ndocument.querySelector('button')?.addEventListener(\"click\", () => { ![2](assets/2.png)\n  console.log(msg); ![3](assets/3.png)\n});\n```", "```\n$ npm install --save express\n```", "```\n$ npm install -D @types/express @types/node\n```", "```\n// server/tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"lib\": [\"ESNext\"],\n    \"module\": \"commonjs\",\n    \"rootDir\": \"./\",\n    \"moduleResolution\": \"node\",\n    \"types\": [\"node\"],\n    \"outDir\": \"../dist/server\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n```", "```\n$ npx tsc -p server/tsconfig.json\n```", "```\n// client/tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"lib\": [\"DOM\", \"ESNext\"],\n    \"module\": \"ESNext\",\n    \"rootDir\": \"./\",\n    \"moduleResolution\": \"node\",\n    \"types\": [],\n    \"outDir\": \"../dist/client\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n```", "```\n$ npx tsc -p client/tsconfig.json\n```", "```\n// shared/tsconfig.json\n{\n    \"compilerOptions\": {\n      \"composite\": true,\n      \"target\": \"ESNext\",\n      \"module\": \"ESNext\",\n      \"rootDir\": \"../shared/\",\n      \"moduleResolution\": \"Node\",\n      \"types\": [],\n      \"declaration\": true,\n      \"outDir\": \"../dist/shared\",\n      \"esModuleInterop\": true,\n      \"forceConsistentCasingInFileNames\": true,\n      \"strict\": true,\n      \"skipLibCheck\": true\n    },\n  }\n```", "```\n// server/tsconfig.json\n// client/tsconfig.json\n{\n  \"compilerOptions\": {\n    // Same as before\n  },\n  \"references\": [\n    { \"path\": \"../shared/tsconfig.json\" }\n  ]\n}\n```", "```\nimport assert from \"assert\";\nimport { add } from \"..\";\n\ndescribe(\"Adding numbers\", () => {\n  it(\"should add two numbers\", () => {\n    assert.equal(add(2, 3), 5);\n  });\n});\n```", "```\n$ npm install --save-dev mocha @types/mocha @types/node\n```", "```\n// tsconfig.base.json\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"outDir\": \"./dist\",\n    \"skipLibCheck\": true\n  }\n}\n```", "```\n// tsconfig.json\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"mocha\"],\n    \"rootDirs\": [\"test\", \"src\"]\n  }\n}\n```", "```\n$ npm install --save-dev ts-node\n$ npx mocha -r ts-node/register tests/*.ts\n```", "```\n// tsconfig.build.json\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"types\": [\"node\"],\n    \"rootDirs\": [\"src\"]\n  },\n  \"exclude\": [\"**/*.test.ts\", \"**/test/**\"]\n}\n```", "```\n$ npx tsc -p tsconfig.build.json\n```", "```\n$ npx tsc -p tsconfig.build.json\n\nsrc/index.ts:5:1 - error TS2593: Cannot find name 'describe'.\nDo you need to install type definitions for a test runner?\nTry `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`\nand then add 'jest' or 'mocha' to the types field in your tsconfig.\n\n5 describe(\"this does not work\", () => {})\n  ~~~~~~~~\n\nFound 1 error in src/index.ts:5\n```", "```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"esnext\",\n    \"paths\": {\n      \"https://esm.sh/lodash@4.17.21\": [\n        \"node_modules/@types/lodash/index.d.ts\"\n      ]\n    }\n  }\n}\n```", "```\n// File module.ts\nexport const obj = {\n  name: \"Stefan\",\n};\n\n// File index.ts\nimport { obj } from \"./module\";\n\nconsole.log(obj.name);\n```", "```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"esnext\"\n  }\n}\n```", "```\n// index.ts\n\n// This still loads types from 'module.ts', but keeps\n// the reference intact once we compile it.\nimport { obj } from './module.js';\n\nconsole.log(obj.name);\n```", "```\nimport _ from \"https://esm.sh/lodash@4.17.21\"\n//             ^- Error 2307\n\nconst result = _.flattenDeep([1, [2, [3, [4]], 5]]);\n\nconsole.log(result);\n```", "```\n$ npm install -D @types/lodash\n```", "```\n$ npm install -D preact\n```", "```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"https://esm.sh/lodash@4.17.21\": [\n        \"node_modules/@types/lodash/index.d.ts\"\n      ]\n    }\n  }\n}\n```", "```\n// @ts-ignore\nimport _ from \"https://esm.sh/lodash@4.17.21\"\n```", "```\n// person.js\nfunction printPerson(person) {\n  console.log(person.name);\n}\n\nexports = {\n  printPerson,\n};\n\n// index.js\nconst person = require(\"./person\");\nperson.printPerson({ name: \"Stefan\", age: 40 });\n```", "```\n// person.ts\ntype Person = {\n  name: string;\n  age: number;\n};\n\nexport function printPerson(person) {\n  console.log(person.name);\n}\n\n// index.ts\nimport * as person from \"./person\";\nperson.printPerson({ name: \"Stefan\", age: 40 });\n```", "```\n// package.json\n{\n  \"name\": \"dependency\",\n  \"type\": \"module\",\n  \"exports\": {\n     \".\": {\n        // Entry-point for `import \"dependency\"` in ES Modules\n        \"import\": \"./esm/index.js\",\n        // Entry-point for `require(\"dependency\") in CommonJS\n        \"require\": \"./commonjs/index.cjs\",\n     },\n  },\n  // CommonJS Fallback\n  \"main\": \"./commonjs/index.cjs\"\n}\n```", "```\n{\n  \"compilerOptions\": {\n    \"module\": \"NodeNext\"\n    // ...\n  }\n}\n```", "```\n// index.mts\nimport * as person from \"./person.js\"; // works in both\nperson.printPerson({ name: \"Stefan\", age: 40});\n```", "```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"module\": \"NodeNext\",\n    \"types\": [\"node\"],\n  }\n}\n```", "```\n// index.mts\nimport person = require(\"./person.cjs\");\n\nperson.printPerson({ name: \"Stefan\", age: 40 });\n```", "```\n// compiled index.mts\nimport { createRequire as _createRequire } from \"module\";\nconst __require = _createRequire(import.meta.url);\nconst person = __require(\"./person.cjs\");\nperson.printPerson({ name: \"Stefan\", age: 40 });\n```", "```\n// main.ts\nfunction sayHello(name: string) {\n  console.log(`Hello ${name}`);\n}\n\nsayHello(\"Stefan\");\n```", "```\n$ deno run main.ts\n```", "```\n{\n  \"compilerOptions\": {\n    // Your TSC compiler options\n  },\n  \"fmt\": {\n    // Options for the auto-formatter\n  },\n  \"lint\": {\n    // Options for the linter\n  }\n}\n```", "```\n// deno.json\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"dom.asynciterable\", \"deno.ns\"]\n  }\n}\n```", "```\n// @deno-types=\"./charting.d.ts\"\nimport * as charting from \"./charting.js\";\n```", "```\n// charting.js\n/// <reference types=\"./charting.d.ts\" />\n```", "```\n{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"display\": \"Node 18 + ESM + Strictest\",\n  \"compilerOptions\": {\n    \"lib\": [\n      \"es2022\"\n    ],\n    \"module\": \"es2022\",\n    \"target\": \"es2022\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"moduleResolution\": \"node\",\n    \"allowUnusedLabels\": false,\n    \"allowUnreachableCode\": false,\n    \"exactOptionalPropertyTypes\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitOverride\": true,\n    \"noImplicitReturns\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"importsNotUsedAsValues\": \"error\",\n    \"checkJs\": true\n  }\n}\n```", "```\n$ npm install --save-dev @tsconfig/node18-strictest-esm\n```", "```\n{\n  \"extends\": \"@tsconfig/node18-strictest-esm/tsconfig.json\",\n  \"compilerOptions\": {\n    // ...\n  }\n}\n```"]