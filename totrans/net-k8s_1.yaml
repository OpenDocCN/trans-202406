- en: Chapter 1\. Networking Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “Guilty until proven innocent.” That’s the mantra of networks and the engineers
    who supervise them. In this opening chapter, we will wade through the development
    of networking technologies and standards, give a brief overview of the dominant
    theory of networking, and introduce our Golang web server that will be the basis
    of the networking examples in Kubernetes and the cloud throughout the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin…at the beginning.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Networking History
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet we know today is vast, with cables spanning oceans and mountains
    and connecting cities with lower latency than ever before. Barrett Lyon’s “Mapping
    the Internet,” shown in [Figure 1-1](#img-internet-map), shows just how vast it
    truly is. That image illustrates all the connections between the networks of networks
    that make up the internet. The purpose of a network is to exchange information
    from one system to another system. That is an enormous ask of a distributed global
    system, but the internet was not always global; it started as a conceptual model
    and slowly was built up over time, to the behemoth in Lyon’s visually stunning
    artwork. There are many factors to consider when learning about networking, such
    as the last mile, the connectivity between a customer’s home and their internet
    service provider’s network—all the way to scaling up to the geopolitical landscape
    of the internet. The internet is integrated into the fabric of our society. In
    this book, we will discuss how networks operate and how Kubernetes abstracts them
    for us.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Art](Images/neku_0101.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. Barrett Lyon, “Mapping the Internet,” 2003
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Table 1-1](#a_brief_history_of_networking) briefly outlines the history of
    networking before we dive into a few of the important details.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-1\. A brief history of networking
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '| Year | Event |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
- en: '| 1969 | ARPANET’s first connection test |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| 1969 | Telnet 1969 Request for Comments (RFC) 15 drafted |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| 1971 | FTP RFC 114 drafted |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| 1973 | FTP RFC 354 drafted |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| 1974 | TCP RFC 675 by Vint Cerf, Yogen Dalal, and Carl Sunshine drafted |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| 1980 | Development of Open Systems Interconnection model begins |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| 1981 | IP RFC 760 drafted |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| 1982 | NORSAR and University College London left the ARPANET and began using
    TCP/IP over SATNET |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| 1984 | ISO 7498 Open Systems Interconnection (OSI) model published |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| 1991 | National Information Infrastructure (NII) Bill passed with Al Gore’s
    help |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| 1991 | First version of Linux released |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| 2015 | First version of Kubernetes released |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: In its earliest forms, networking was government run or sponsored; in the United
    States, the Department of Defense (DOD) sponsored the Advanced Research Projects
    Agency Network (ARPANET), well before Al Gore’s time in politics, which will be
    relevant in a moment. In 1969, ARPANET was deployed at the University of California–Los
    Angeles, the Augmentation Research Center at Stanford Research Institute, the
    University of California–Santa Barbara, and the University of Utah School of Computing.
    Communication between these nodes was not completed until 1970, when they began
    using the Network Control Protocol (NCP). NCP led to the development and use of
    the first computer-to-computer protocols like Telnet and File Transfer Protocol
    (FTP).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The success of ARPANET and NCP, the first protocol to power ARPANET, led to
    NCP’s downfall. It could not keep up with the demands of the network and the variety
    of networks connected. In 1974, Vint Cerf, Yogen Dalal, and Carl Sunshine began
    drafting RFC 675 for Transmission Control Protocol (TCP). (You’ll learn more about
    RFCs in a few paragraphs.) TCP would go on to become the standard for network
    connectivity. TCP allowed for exchanging packets across different types of networks.
    In 1981, the Internet Protocol (IP), defined in RFC 791, helped break out the
    responsibilities of TCP into a separate protocol, increasing the modularity of
    the network. In the following years, many organizations, including the DOD, adopted
    TCP as the standard. By January 1983, TCP/IP had become the only approved protocol
    on ARPANET, replacing the earlier NCP because of its versatility and modularity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: A competing standards organization, the International Organization for Standardization
    (ISO), developed and published ISO 7498, “Open Systems Interconnection Reference
    Model,” which detailed the OSI model. With its publication also came the protocols
    to support it. Unfortunately, the OSI model protocols never gained traction and
    lost out to the popularity of TCP/IP. The OSI model is still an excellent learning
    tool for understanding the layered approach to networking, however.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: In 1991, Al Gore invented the internet (well, really he helped pass the National
    Information Infrastructure [NII] Bill), which helped lead to the creation of the
    Internet Engineering Task Force (IETF). Nowadays standards for the internet are
    under the management of the IETF, an open consortium of leading experts and companies
    in the field of networking, like Cisco and Juniper. RFCs are published by the
    Internet Society and the Internet Engineering Task Force. RFCs are prominently
    authored by individuals or groups of engineers and computer scientists, and they
    detail their processes, operations, and applications for the internet’s functioning.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'An IETF RFC has two states:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Proposed Standard
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: A protocol specification has reached enough community support to be considered
    a standard. The designs are stable and well understood. A proposed standard can
    be deployed, implemented, and tested. It may be withdrawn from further consideration,
    however.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Internet Standard
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Per RFC 2026: “In general, an internet standard is a stable specification and
    well understood, technically competent, has multiple, independent, and interoperable
    implementations with substantial operational experience, enjoys significant public
    support, and is recognizably useful in some parts of the internet.”'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Draft standard is a third classification that was discontinued in 2011.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: There are thousands of internet standards defining how to implement protocols
    for all facets of networking, including wireless, encryption, and data formats,
    among others. Each one is implemented by contributors of open source projects
    and privately by large organizations like Cisco.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: A lot has happened in the nearly 50 years since those first connectivity tests.
    Networks have grown in complexity and abstractions, so let’s start with the OSI
    model.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: OSI Model
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OSI model is a conceptual framework for describing how two systems communicate
    over a network. The OSI model breaks down the responsibility of sending data across
    networks into layers. This works well for educational purposes to describe the
    relationships between each layer’s responsibility and how data gets sent over
    networks. Interestingly enough, it was meant to be a protocol suite to power networks
    but lost to TCP/IP.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the ISO standards that outline the OSI model and protocols:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: ISO/IEC 7498-1, “The Basic Model”
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISO/IEC 7498-2, “Security Architecture”
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISO/IEC 7498-3, “Naming and Addressing”
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISO/IEC 7498-4, “Management Framework”
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ISO/IEC 7498-1 describes what the OSI model attempts to convey:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 5.2.2.1 The basic structuring technique in the Reference Model of Open Systems
    Interconnection is layering. According to this technique, each open system is
    viewed as logically composed of an ordered set of (N)-subsystems…Adjacent (N)-subsystems
    communicate through their common boundary. (N)-subsystems of the same rank (N)
    collectively form the (N)-layer of the Reference Model of Open Systems Interconnection.
    There is one and only one (N)-subsystem in an open system for layer N. An (N)-subsystem
    consists of one or several (N)-entities. Entities exist in each (N)-layer. Entities
    in the same (N)-layer are termed peer-(N)-entities. Note that the highest layer
    does not have an (N+l)-layer above it, and the lowest layer does not have an (N-1)-layer
    below it.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The OSI model description is a complex and exact way of saying networks have
    layers like cakes or onions. The OSI model breaks the responsibilities of the
    network into seven distinct layers, each with different functions to aid in transmitting
    information from one system to another, as shown in [Figure 1-2](#osi-model).
    The layers encapsulate information from the layer below it; these layers are Application,
    Presentation, Session, Transport, Network, Data Link, and Physical. Over the next
    few pages, we will go over each layer’s functionality and how it sends data between
    two systems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![OSI Model](Images/neku_0102.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. OSI model layers
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Each layer takes data from the previous layer and encapsulates it to make its
    Protocol Data Unit (PDU). The PDU is used to describe the data at each layer.
    PDUs are also part of TCP/IP. The applications of the Session layer are considered
    “data” for the PDU, preparing the application information for communication. Transport
    uses ports to distinguish what process on the local system is responsible for
    the data. The Network layer PDU is the packet. Packets are distinct pieces of
    data routed between networks. The Data Link layer is the frame or segment. Each
    packet is broken up into frames, checked for errors, and sent out on the local
    network. The Physical layer transmits the frame in bits over the medium. Next
    we will outline each layer in detail:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Application
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The Application layer is the top layer of the OSI model and is the one the end
    user interacts with every day. This layer is not where actual applications live,
    but it provides the interface for applications that use it like a web browser
    or Office 365\. The single biggest interface is HTTP; you are probably reading
    this book on a web page hosted by an O’Reilly web server. Other examples of the
    Application layer that we use daily are DNS, SSH, and SMTP. Those applications
    are responsible for displaying and arranging data requested and sent over the
    network.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Presentation
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: This layer provides independence from data representation by translating between
    application and network formats. It can be referred to as the *syntax layer*.
    This layer allows two systems to use different encodings for data and still pass
    data between them. Encryption is also done at this layer, but that is a more complicated
    story we’ll save for [“TLS”](#tlssection).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Session
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: The Session layer is responsible for the duplex of the connection, in other
    words, whether sending and receiving data at the same time. It also establishes
    procedures for performing checkpointing, suspending, restarting, and terminating
    a session. It builds, manages, and terminates the connections between the local
    and remote applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Transport
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'The Transport layer transfers data between applications, providing reliable
    data transfer services to the upper layers. The Transport layer controls a given
    connection’s reliability through flow control, segmentation and desegmentation,
    and error control. Some protocols are state- and connection-oriented. This layer
    tracks the segments and retransmits those that fail. It also provides the acknowledgment
    of successful data transmission and sends the next data if no errors occurred.
    TCP/IP has two protocols at this layer: TCP and User Datagram Protocol (UDP).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The Network layer implements a means of transferring variable-length data flows
    from a host on one network to a host on another network while sustaining service
    quality. The Network layer performs routing functions and might also perform fragmentation
    and reassembly while reporting delivery errors. Routers operate at this layer,
    sending data throughout the neighboring networks. Several management  protocols 
    belong  to  the  Network  layer,  including  routing  protocols,  multicast  group 
    management,  network-layer information, error handling, and network-layer address
    assignment, which we will discuss further in [“TCP/IP”](#tcp_ip).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Data Link
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: This layer is responsible for the host-to-host transfers on the same network.
    It defines the protocols to create and terminate the connections between two devices.
    The Data Link layer transfers data between network hosts and provides the means
    to detect and possibly correct errors from the Physical layer. Data Link frames,
    the PDU for layer 2, do not cross the boundaries of a local network.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Physical
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: The Physical layer is represented visually by an Ethernet cord plugged into
    a switch. This layer converts data in the form of digital bits into electrical,
    radio, or optical signals. Think of this layer as the physical devices, like cables,
    switches, and wireless access points. The wire signaling protocols are also defined
    at this layer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are many mnemonics to remember the layers of the OSI model; our favorite
    is All People Seem To Need Data Processing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 1-2](#osi_layers_details) summarizes the OSI layers.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-2\. OSI layer details
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '| Layer number | Layer name | Protocol data unit | Function overview |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| 7 | Application | Data | High-level APIs and application protocols like HTTP,
    DNS, and SSH. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| 6 | Presentation | Data | Character encoding, data compression, and encryption/decryption.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| 5 | Session | Data | Continuous data exchanges between nodes are managed
    here: how much data to send, when to send more. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| 4 | Transport | Segment, datagram | Transmission of data segments between
    endpoints on a network, including segmentation, acknowledgment, and multiplexing.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| 3 | Network | Packet | Structuring and managing addressing, routing, and
    traffic control for all endpoints on the network. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| 2 | Data Link | Frame | Transmission of data frames between two nodes connected
    by a Physical layer. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| 1 | Physical | Bit | Sending and receiving of bitstreams over the medium.
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: The OSI model breaks down all the necessary functions to send a data packet
    over a network between two hosts. In the late 1980s and early 1990s, it lost out
    to TCP/IP as the standard adopted by the DOD and all other major players in networking.
    The standard defined in ISO 7498 gives a brief glimpse into the implementation
    details that were considered by most at the time to be complicated, inefficient,
    and to an extent unimplementable. The OSI model at a high level still allows those
    learning networking to comprehend the basic concepts and challenges in networking.
    In addition, these terms and functions are used in the TCP/IP model covered in
    the next section and ultimately in Kubernetes abstractions. Kubernetes services
    break out each function depending on the layer it is operating at, for example,
    a layer 3 IP address or a layer 4 port; you will learn more about that in [Chapter 4](ch04.xhtml#kubernetes_networking_introduction).
    Next, we will do a deep dive into the TCP/IP suite with an example walk-through.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: TCP/IP
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TCP/IP creates a heterogeneous network with open protocols that are independent
    of the operating system and architectural differences. Whether the hosts are running
    Windows, Linux, or another OS, TCP/IP allows them to communicate; TCP/IP does
    not care if you are running Apache or Nginx for your web server at the Application
    layer. The separation of responsibilities similar to the OSI model makes that
    possible. In [Figure 1-3](#img-osi-tcp), we compare the OSI model to TCP/IP.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![OSI Model](Images/neku_0103.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. OSI model compared to TCP/IP
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Here we expand on the differences between the OSI model and the TCP/IP:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Application
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In TCP/IP, the Application layer comprises the communications protocols used
    in process-to-process communications across an IP network. The Application layer
    standardizes communication and depends upon the underlying Transport layer protocols
    to establish the host-to-host data transfer. The lower Transport layer also manages
    the data exchange in network communications. Applications at this layer are defined
    in RFCs; in this book, we will continue to use HTTP, RFC 7231 as our example for
    the Application layer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Transport
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: TCP and UDP are the primary protocols of the Transport layer that provide host-to-host
    communication services for applications. Transport protocols are responsible for
    connection-oriented communication, reliability, flow control, and multiplexing.
    In TCP, the window size manages flow control, while UDP does not manage the congestion
    flow and is considered unreliable; you’ll learn more about that in [“UDP”](#udpsection).
    Each port identifies the host process responsible for processing the information
    from the network communication. HTTP uses the well-known port 80 for nonsecure
    communication and 443 for secure communication. Each port on the server identifies
    its traffic, and the sender generates a random port locally to identify itself.
    The governing body that manages port number assignments is the Internet Assigned
    Number Authority (IANA); there are 65,535 ports.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Internet
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: The Internet, or Network layer, is responsible for transmitting data between
    networks. For an outgoing packet, it selects the next-hop host and transmits it
    to that host by passing it to the appropriate link-layer. Once the packet is received
    by the destination, the Internet layer will pass the packet payload up to the
    appropriate Transport layer protocol.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: IP provides the fragmentation or defragmentation of packets based on the maximum
    transmission unit (MTU); this is the maximum size of the IP packet. IP makes no
    guarantees about packets’ proper arrival. Since packet delivery across diverse
    networks is inherently unreliable and failure-prone, that burden is with the endpoints
    of a communication path, rather than on the network. The function of providing
    service reliability is in the Transport layer. A checksum ensures that the information
    in a received packet is accurate, but this layer does not validate data integrity.
    The IP address identifies packets on the network.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Link
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The Link layer in the TCP/IP model comprises networking protocols that operate
    only on the local network that a host connects to. Packets are not routed to nonlocal
    networks; that is the Internet layer’s role. Ethernet is the dominant protocol
    at this layer, and hosts are identified by the link-layer address or commonly
    their Media Access Control addresses on their network interface cards. Once determined
    by the host using Address Resolution Protocol 9 (ARP), data sent off the local
    network is processed by the Internet layer. This layer also includes protocols
    for moving packets between two Internet layer hosts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Physical layer
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: The Physical layer defines the components of the hardware to use for the network.
    For example, the Physical network layer stipulates the physical characteristics
    of the communications media. The Physical layer of TCP/IP details hardware standards
    such as IEEE 802.3, the specification for Ethernet network media. Several interpretations
    of RFC 1122 for the Physical layer are included with the other layers; we have
    added this for completeness.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we will use the minimal Golang web server (also called
    Go) from [Example 1-1](#minmal_web_server_in_go) to show various levels of networking
    components from `tcpdump`, a Linux syscall, to show how Kubernetes abstracts the
    syscalls. This section will use it to demonstrate what is happening at the Application,
    Transport, Network, and Data Link layers.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Application
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, Application is the highest layer in the TCP/IP stack; it is where
    the user interacts with data before it gets sent over the network. In our example
    walk-through, we are going to use Hypertext Transfer Protocol (HTTP) and a simple
    HTTP transaction to demonstrate what happens at each layer in the TCP/IP stack.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: HTTP
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'HTTP is responsible for sending and receiving Hypertext Markup Language (HTML)
    documents—you know, a web page. A vast majority of what we see and do on the internet
    is over HTTP: Amazon purchases, Reddit posts, and tweets all use HTTP. A client
    will make an HTTP request to our minimal Golang web server from [Example 1-1](#minmal_web_server_in_go),
    and it will send an HTTP response with “Hello” text. The web server runs locally
    in an Ubuntu virtual machine to test the full TCP/IP stack.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: See the example code [repository](https://oreil.ly/Jan5M) for full instructions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-1\. Minimal web server in Go
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In our Ubuntu virtual machine we need to start our minimal web server, or if
    you have Golang installed locally, you can just run this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s break down the request for each layer of the TPC/IP stack.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: cURL is the requesting client for our HTTP request example. Generally, for a
    web page, the client would be a web browser, but we’re using cURL to simplify
    and show the command line.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[cURL](https://curl.haxx.se) is meant for uploading and downloading data specified
    with a URL. It is a client-side program (the *c*) to request data from a URL and
    return the response.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: In [Example 1-2](#client_request), we can see each part of the HTTP request
    that the cURL client is making and the response. Let’s review what all those options
    and outputs are.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-2\. Client request
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_networking_introduction_CO1-1)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '`curl` `localhost:8080` `-vvv`: This is the `curl` command that opens a connection
    to the locally running web server, `localhost` on TCP port 8080\. `-vvv` sets
    the verbosity of the output so we can see everything happening with the request.
    Also, `TCP_NODELAY` instructs the TCP connection to send the data without delay,
    one of many options available to the client to set.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_networking_introduction_CO1-2)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected` `to` `localhost` `(::1)` `port` `8080`: It worked! cURL connected
    to the web server on localhost and over port 8080.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_networking_introduction_CO1-3)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`Get` `/` `HTTP/1.1`: HTTP has several methods for retrieving or updating information.
    In our request, we are performing an HTTP GET to retrieve our “Hello” response.
    The forward slash is the next part, a Uniform Resource Locator (URL), which indicates
    where we are sending the client request to the server. The last section of this
    header is the version of HTTP the server is using, 1.1.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_networking_introduction_CO1-4)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`Host:` `localhost:8080`: HTTP has several options for sending information
    about the request. In our request, the cURL process has set the HTTP Host header.
    The client and server can transmit information with an HTTP request or response.
    An HTTP header contains its name followed by a colon (:) and then its value.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_networking_introduction_CO1-5)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '`User-Agent: cURL/7.64.1`: The user agent is a string that indicates the computer
    program making the HTTP request on behalf of the end user; it is cURL in our context.
    This string often identifies the browser, its version number, and its host operating
    system.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_networking_introduction_CO1-6)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`Accept:` `*/*`: This header instructs the web server what content types the
    client understands. [Table 1-3](#common_content_types_for_http_data) shows examples
    of common content types that can be sent.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](Images/7.png)](#co_networking_introduction_CO1-7)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTP/1.1` `200` `OK`: This is the server response to our request. The server
    responds with the HTTP version and the response status code. There are several
    possible responses from the server. A status code of 200 indicates the response
    was successful. 1XX means informational, 2XX means successful, 3XX means redirects,
    4XX responses indicate there are issues with the requests, and 5XX generally refers
    to issues from the server.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](Images/8.png)](#co_networking_introduction_CO1-8)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`Date: Sat, July 25, 2020, 14:57:46 GMT`: The `Date` header field represents
    the date and time at which the message originated. The sender generates the value
    as the approximate date and time of message generation.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](Images/9.png)](#co_networking_introduction_CO1-9)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`Content-Length: 5`: The `Content-Length` header indicates the size of the
    message body, in bytes, sent to the recipient; in our case, the message is 5 bytes.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[![10](Images/10.png)](#co_networking_introduction_CO1-10)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`Content-Type: text/plain; charset=utf-8`: The `Content-Type` entity header
    is used to indicate the resource’s media type. Our response is indicating that
    it is returning a plain-text file that is UTF-8 encoded.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[![11](Images/11.png)](#co_networking_introduction_CO1-11)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '`Hello* Closing connection 0`: This prints out the response from our web server
    and closes out the HTTP connection.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-3\. Common content types for HTTP data
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '| application | Any kind of binary data that doesn’t fall explicitly into one
    of the other types. Common examples include application/json, application/pdf,
    application/pkcs8, and application/zip. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| application | 任何不明确属于其他类型的二进制数据。常见示例包括 application/json、application/pdf、application/pkcs8
    和 application/zip。 |'
- en: '| audio | Audio or music data. Examples include audio/mpeg and audio/vorbis.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| audio | 音频或音乐数据。例如 audio/mpeg 和 audio/vorbis。 |'
- en: '| font | Font/typeface data. Common examples include font/woff, font/ttf, and
    font/otf. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| font | 字体/字型数据。常见示例包括 font/woff、font/ttf 和 font/otf。 |'
- en: '| image | Image or graphical data including both bitmap and vector such as
    animated GIF or APNG. Common examples are image/jpg, image/png, and image/svg+xml.
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| image | 包括位图和矢量图像的图像或图形数据，例如动画 GIF 或 APNG。常见示例包括 image/jpg、image/png 和 image/svg+xml。
    |'
- en: '| model | Model data for a 3D object or scene. Examples include model/3mf and
    model/vrml. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| model | 用于 3D 对象或场景的模型数据。示例包括 model/3mf 和 model/vrml。 |'
- en: '| text | Text-only data including human-readable content, source code, or text
    data. Examples include text/plain, text/csv, and text/html. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| text | 仅包含人类可读内容、源代码或文本数据的文本。例如 text/plain、text/csv 和 text/html。 |'
- en: '| video | Video data or files, such as video/mp4. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| video | 视频数据或文件，例如 video/mp4。 |'
- en: This is a simplistic view that happens with every HTTP request. Today, a single
    web page makes an exorbitant number of requests with one load of a page, and in
    just a matter of seconds! This is a brief example for cluster administrators of
    how HTTP (and for that matter, the other seven layers’ applications) operate.
    We will continue to build our knowledge of how this request is completed at each
    layer of the TCP/IP stack and then how Kubernetes completes those same requests.
    All this data is formatted and options are set at layer 7, but the real heavy
    lifting is done at the lower layers of the TCP/IP stack, which we will go over
    in the next sections.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个 HTTP 请求中发生的简单视图。今天，单个网页在短短几秒钟内进行大量请求！这是一个针对集群管理员的简要示例，说明 HTTP（以及其他七层应用程序）的操作方式。我们将继续建立对
    TCP/IP 协议栈各层如何完成这些请求的了解，然后介绍 Kubernetes 如何完成相同的请求。所有这些数据都在第 7 层格式化和设置选项，但真正的重活儿在
    TCP/IP 协议栈的更低层完成，我们将在接下来的部分讨论它们。
- en: Transport
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输
- en: The Transport layer protocols are responsible for connection-oriented communication,
    reliability, flow control, and multiplexing; this is mostly true of TCP. We’ll
    describe the differences in the following sections. Our Golang web server is a
    layer 7 application using HTTP; the Transport layer that HTTP relies on is TCP.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 传输层协议负责面向连接的通信、可靠性、流量控制和复用；这在 TCP 中是大部分正确的。我们将在以下部分描述差异。我们的 Golang Web 服务器是一个使用
    HTTP 的第 7 层应用程序；HTTP 依赖的传输层是 TCP。
- en: TCP
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TCP
- en: As already mentioned, TCP is a connection-oriented, reliable protocol, and it
    provides flow control and multiplexing. TCP is considered connection-oriented
    because it manages the connection state through the life cycle of the connection.
    In TCP, the window size manages flow control, unlike UDP, which does not manage
    the congestion flow. In addition, UDP is unreliable, and data may arrive out of
    sequence. Each port identifies the host process responsible for processing the
    information from the network communication. TCP is known as a host-to-host layer
    protocol. To identify the process on the host responsible for the connection,
    TCP identifies the segments with a 16-bit port number. HTTP servers use the well-known
    port of 80 for nonsecure communication and 443 for secure communication using
    Transport Layer Security (TLS). Clients requesting a new connection create a source
    port local in the range of 0–65534.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，TCP 是一种面向连接的可靠协议，它提供流量控制和复用。TCP 被认为是面向连接的，因为它通过连接的生命周期管理连接状态。在 TCP 中，窗口大小管理流量控制，不像
    UDP 那样管理拥塞流。此外，UDP 是不可靠的，数据可能无序到达。每个端口标识负责处理网络通信信息的主机进程。TCP 被称为主机到主机层协议。为了识别主机上负责连接的进程，TCP
    使用 16 位端口号标识段。HTTP 服务器使用非安全通信的众所周知端口 80 和使用传输层安全性（TLS）进行安全通信的端口 443。请求建立新连接的客户端在本地使用
    0–65534 范围内的源端口。
- en: 'To understand how TCP performs multiplexing, let’s review a simple HTML page
    retrieval:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 TCP 如何执行复用，请回顾一个简单的 HTML 页面检索：
- en: In a web browser, type in a web page address.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中键入网页地址。
- en: The browser opens a connection to transfer the page.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器打开连接以传输页面。
- en: The browser opens connections for each image on the page.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器为页面上的每个图像打开连接。
- en: The browser opens another connection for the external CSS.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of these connections uses a different set of virtual ports.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the page’s assets download simultaneously.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser reconstructs the page.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s walk through how TCP manages multiplexing with the information provided
    in the TCP segment headers:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '`Source port` (16 bits)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: This identifies the sending port.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '`Destination port` (16 bits)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: This identifies the receiving port.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '`Sequence number` (32 bits)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: If the SYN flag is set, this is the initial sequence number. The sequence number
    of the first data byte and the acknowledged number in the corresponding ACK is
    this sequence number plus 1\. It is also used to reassemble data if it arrives
    out of order.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`Acknowledgment number` (32 bits)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: If the ACK flag is set, then this field’s value is the next sequence number
    of the ACK the sender is expecting. This acknowledges receipt of all preceding
    bytes (if any). Each end’s first ACK acknowledges the other end’s initial sequence
    number itself, but no data has been sent.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '`Data offset` (4 bits)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: This specifies the size of the TCP header in 32-bit words.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`Reserved` (3 bits)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: This is for future use and should be set to zero.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`Flags` (9 bits)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'There are nine 1-bit fields defined for the TCP header:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'NS–ECN-nonce: Concealment protection.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CWR: Congestion Window Reduced; the sender reduced its sending rate.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECE: ECN Echo; the sender received an earlier congestion notification.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URG: Urgent; the Urgent Pointer field is valid, but this is rarely used.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ACK: Acknowledgment; the Acknowledgment Number field is valid and is always
    on after a connection is established.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PSH: Push; the receiver should pass this data to the application as soon as
    possible.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RST: Reset the connection or connection abort, usually because of an error.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SYN: Synchronize sequence numbers to initiate a connection.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FIN: The sender of the segment is finished sending data to its peer.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-180
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The NS bit field is further explained in RFC 3540, “Robust Explicit Congestion
    Notification (ECN) Signaling with Nonces.” This specification describes an optional
    addition to ECN improving robustness against malicious or accidental concealment
    of marked packets.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '`Window size` (16 bits)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: This is the size of the receive window.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '`Checksum` (16 bits)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The checksum field is used for error checking of the TCP header.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '`Urgent pointer` (16 bits)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: This is an offset from the sequence number indicating the last urgent data byte.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`Options`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Variable 0–320 bits, in units of 32 bits.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`Padding`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: The TCP header padding is used to ensure that the TCP header ends, and data
    begins on a 32-bit boundary.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '`Data`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: This is the piece of application data being sent in this segment.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 1-4](#img-tcp-data), we can see all the TCP segment headers that
    provide metadata about the TCP streams.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![TCP Segment Header](Images/neku_0104.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. TCP segment header
  id: totrans-196
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These fields help manage the flow of data between two systems. [Figure 1-5](#img-osi-model)
    shows how each step of the TCP/IP stack sends data from one application on one
    host, through a network communicating at layers 1 and 2, to get data to the destination
    host.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![neku 0105](Images/neku_0105.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: Figure 1-5\. tcp/ip data flow
  id: totrans-199
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the next section, we will show how TCP uses these fields to initiate a connection
    through the three-way handshake.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: TCP handshake
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'TCP uses a three-way handshake, pictured in [Figure 1-6](#three-way-tcp), to
    create a connection by exchanging information along the way with various options
    and flags:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: The requesting node sends a connection request via a SYN packet to get the transmission
    started.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the receiving node is listening on the port the sender requests, the receiving
    node replies with a SYN-ACK, acknowledging that it has heard the requesting node.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The requesting node returns an ACK packet, exchanging information and letting
    them know the nodes are good to send each other information.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![OSI Model](Images/neku_0106.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: Figure 1-6\. TCP three-way handshake
  id: totrans-207
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now the connection is established. Data can be transmitted over the physical
    medium, routed between networks, to find its way to the local destination—but
    how does the endpoint know how to handle the information? On the local and remote
    hosts, a socket gets created to track this connection. A socket is just a logical
    endpoint for communication. In [Chapter 2](ch02.xhtml#linux_networking), we will
    discuss how a Linux client and server handle sockets.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: TCP is a stateful protocol, tracking the connection’s state throughout its life
    cycle. The state of the connection depends on both the sender and the receiver
    agreeing where they are in the connection flow. The connection state is concerned
    about who is sending and receiving data in the TCP stream. TCP has a complex state
    transition for explaining when and where the connection is, using the 9-bit TCP
    flags in the TCP segment header, as you can see in [Figure 1-7](#tcp-state).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'The TCP connection states are:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`LISTEN` (server)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a connection request from any remote TCP and port
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '`SYN-SENT` (client)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a matching connection request after sending a connection
    request
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`SYN-RECEIVED` (server)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a confirming connection request acknowledgment after
    having both received and sent a connection request
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '`ESTABLISHED` (both server and client)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Represents an open connection; data received can be delivered to the user—the
    intermediate state for the data transfer phase of the connection
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '`FIN-WAIT-1` (both server and client)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a connection termination request from the remote host
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '`FIN-WAIT-2` (both server and client)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a connection termination request from the remote TCP
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '`CLOSE-WAIT` (both server and client)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a local user’s connection termination request
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '`CLOSING` (both server and client)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for a connection termination request acknowledgment from
    the remote TCP
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '`LAST-ACK` (both server and client)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for an acknowledgment of the connection termination request
    previously sent to the remote host
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`TIME-WAIT` (either server or client)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Represents waiting for enough time to pass to ensure the remote host received
    the acknowledgment of its connection termination request
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '`CLOSED` (both server and client)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Represents no connection state at all
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![TCP State Diagram](Images/neku_0107.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Figure 1-7\. TCP state transition diagram
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Example 1-3](#tcp_connection_states) is a sample of a Mac’s TCP connections,
    their state, and the addresses for both ends of the connection.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-3\. TCP connection states
  id: totrans-236
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we know more about how TCP constructs and tracks connections, let’s
    review the HTTP request for our web server at the Transport layer using TCP. To
    accomplish this, we use a command-line tool called `tcpdump`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`tcpdump` prints out a description of the contents of packets on a network
    interface that matches the boolean expression.'
  id: totrans-240
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: tcpdump man page
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tcpdump` allows administrators and users to display all the packets processed
    on the system and filter them out based on many TCP segment header details. In
    the request, we filter all packets with the destination port 8080 on the network
    interface labeled lo0; this is the local loopback interface on the Mac. Our web
    server is running on 0.0.0.0:8080\. [Figure 1-8](#img-curl) shows where `tcpdump`
    is collecting data in reference to the full TCP/IP stack, between the network
    interface card (NIC) driver and layer 2.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![neku 0108](Images/neku_0108.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
- en: Figure 1-8\. `tcpdump` packet capture
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-246
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A loopback interface is a logical, virtual interface on a device. A loopback
    interface is not a physical interface like Ethernet interface. Loopback interfaces
    are always up and running and always available, even if other interfaces are down
    on the host.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'The general format of a `tcpdump` output will contain the following fields:
    `tos`,`TTL`, `id`, `offset`, `flags`, `proto`, `length`, and `options`. Let’s
    review these:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '`tos`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: The type of service field.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`TTL`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: The time to live; it is not reported if it is zero.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '`id`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: The IP identification field.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '`offset`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The fragment offset field; it is printed whether this is part of a fragmented
    datagram or not.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`flags`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: The DF, Don’t Fragment, flag, which indicates that the packet cannot be fragmented
    for transmission. When unset, it indicates that the packet can be fragmented.
    The MF, More Fragments, flag indicates there are packets that contain more fragments
    and when unset, it indicates that no more fragments remain.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '`proto`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: The protocol ID field.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '`length`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: The total length field.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`options`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: The IP options.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Systems that support checksum offloading and IP, TCP, and UDP checksums are
    calculated on the NIC before being transmitted on the wire. Since we are running
    a `tcpdump` packet capture before the NIC, errors like `cksum 0xfe34 (incorrect
    -> 0xb4c1)` appear in the output of [Example 1-4](#tcp_dump).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: To produce the output for [Example 1-4](#tcp_dump), open another terminal and
    start a `tcpdump` trace on the loopback for only TCP and port 8080; otherwise,
    you will see a lot of other packets not relevant to our example. You’ll need to
    use escalated privileges to trace packets, so that means using `sudo` in this
    case.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-4\. `tcpdump`
  id: totrans-267
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_networking_introduction_CO2-1)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: This is the start of the `tcpdump` collection with its command and all of its
    options. The `sudo` packet captures the required escalated privileges. `tcpdump`
    is the `tcpdump` binary. `-i lo0` is the interface from which we want to capture
    packets. `dst port 8080` is the matching expression that the man page discussed;
    here we are matching on all packets destined for TCP port 8080, which is the port
    the web service is listening to for requests. `-v` is the verbose option, which
    allows us to see more details from the `tcpdump` capture.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_networking_introduction_CO2-2)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Feedback from `tcpdump` letting us know about the `tcpdump` filter running.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_networking_introduction_CO2-3)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: This is the first packet in the TCP handshake. We can tell it’s the SYN because
    the flags bit is set with `[S]`, and the sequence number is set to `2784345138`
    by cURL, with the localhost process number being `50399`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_networking_introduction_CO2-4)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: The SYN-ACK packet is the the one filtered by `tcpdump` from the `localhost.http-alt`
    process, the Golang web server. The flag is to `[S.]`, so it is a SYN-ACK. The
    packet sends `195606347` as the next sequence number, and ACK `2784345139` is
    set to acknowledge the previous packet.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_networking_introduction_CO2-5)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: The acknowledgment packet from cURL is now sent back to the server with the
    ACK flag set, `[.]`, with the ACK and SYN numbers set to 1, indicating it is ready
    to send data.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_networking_introduction_CO2-6)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: The acknowledgment number is set to 1 to indicate the client’s SYN flag’s receipt
    in the opening data push.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](Images/7.png)](#co_networking_introduction_CO2-7)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: The TCP connection is established; both the client and server are ready for
    data transmission. The next packets are our data transmissions of the HTTP request
    with the flag set to a data push and ACK, `[P.]`. The previous packets had a length
    of zero, but the HTTP request is 78 bytes long, with a sequence number of 1:79.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](Images/8.png)](#co_networking_introduction_CO2-8)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: The server acknowledges the receipt of the data transmission, with the ACK flag
    set, `[.]`, by sending the acknowledgment number of 79.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](Images/9.png)](#co_networking_introduction_CO2-9)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](Images/9.png)](#co_networking_introduction_CO2-9)'
- en: This packet is the HTTP server’s response to the cURL request. The data push
    flag is set, `[P.]`, and it acknowledges the previous packet with an ACK number
    of 79\. A new sequence number is set with the data transmission, 122, and the
    data length is 121 bytes.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包是 HTTP 服务器对 cURL 请求的响应。数据推送标志被设置，`[P.]`，并用 ACK 数字 79 确认了前一个包。设置数据传输的新序列号为
    122，数据长度为 121 字节。
- en: '[![10](Images/10.png)](#co_networking_introduction_CO2-10)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[![10](Images/10.png)](#co_networking_introduction_CO2-10)'
- en: The cURL client acknowledges the receipt of the packet with the ACK flag set,
    sets the acknowledgment number to 122, and sets the sequence number to 79.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: cURL 客户端用设置 ACK 标志的包确认接收该包，将确认号设置为 122，并将序列号设置为 79。
- en: '[![11](Images/11.png)](#co_networking_introduction_CO2-11)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![11](Images/11.png)](#co_networking_introduction_CO2-11)'
- en: The start of closing the TCP connection, with the client sending the FIN-ACK
    packet, the `[F.]`, acknowledging the receipt of the previous packet, number 122,
    and a new sequence number to 80.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 开始关闭 TCP 连接，客户端发送 FIN-ACK 包，`[F.]`，确认接收了前一个包，编号为 122，并将新的序列号设为 80。
- en: '[![12](Images/12.png)](#co_networking_introduction_CO2-12)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[![12](Images/12.png)](#co_networking_introduction_CO2-12)'
- en: The server increments the acknowledgment number to 80 and sets the ACK flag.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将确认号增加到 80 并设置 ACK 标志。
- en: '[![13](Images/13.png)](#co_networking_introduction_CO2-13)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[![13](Images/13.png)](#co_networking_introduction_CO2-13)'
- en: TCP requires that both the sender and the receiver set the FIN packet for closing
    the connection. This is the packet where the FIN and ACK flags are set.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 要求发送方和接收方都设置 FIN 包以关闭连接。这是 FIN 和 ACK 标志被设置的包。
- en: '[![14](Images/14.png)](#co_networking_introduction_CO2-14)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[![14](Images/14.png)](#co_networking_introduction_CO2-14)'
- en: This is the final ACK from the client, with acknowledgment number 123\. The
    connection is closed now.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这是客户端的最终 ACK，确认号为 123。连接现在已关闭。
- en: '[![15](Images/15.png)](#co_networking_introduction_CO2-15)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[![15](Images/15.png)](#co_networking_introduction_CO2-15)'
- en: '`tcpdump` on exit lets us know the number of packets in this capture, the total
    number of the packets captured during the `tcpdump`, and how many packets were
    dropped by the operating system.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`tcpdump` 在退出时会告诉我们此次捕获的包数、在 `tcpdump` 期间捕获的包的总数，以及操作系统丢弃了多少包。'
- en: '`tcpdump` is an excellent troubleshooting application for network engineers
    as well as cluster administrators. Being able to verify connectivity at many levels
    in the cluster and the network are valuable skills to have. You will see in [Chapter 6](ch06.xhtml#kubernetes_and_cloud_networking)
    how useful `tcpdump` can be.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`tcpdump` 是网络工程师和集群管理员的一个优秀故障排除工具。能够在集群和网络的多个层面验证连通性是非常有价值的技能。你将在 [第 6 章](ch06.xhtml#kubernetes_and_cloud_networking)
    中看到 `tcpdump` 的用处。'
- en: Our example was a simple HTTP application using TCP. All of this data was sent
    over the network in plain text. While this example was a simple Hello World, other
    requests like our bank logins need to have some security. The Transport layer
    does not offer any security protection for data transiting the network. TLS adds
    additional security on top of TCP. Let’s dive into that in our next section.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例是一个使用 TCP 的简单 HTTP 应用程序。所有这些数据都是以明文形式通过网络发送的。虽然这个示例是一个简单的 Hello World，但其他请求，如我们的银行登录，需要一些安全措施。传输层不会为通过网络传输的数据提供任何安全保护。TLS
    在 TCP 上添加了额外的安全保护。让我们在下一节中深入了解。
- en: TLS
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TLS
- en: 'TLS adds encryption to TCP. TLS is an add-on to the TCP/IP suite and is not
    considered to be part of the base operation for TCP. HTTP transactions can be
    completed without TLS but are not secure from eavesdroppers on the wire. TLS is
    a combination of protocols used to ensure traffic is seen between the sender and
    the intended recipient. TLS, much like TCP, uses a handshake to establish encryption
    capabilities and exchange keys for encryption. The following steps detail the
    TLS handshake between the client and the server, which can also be seen in [Figure 1-9](#img-tls-handshake):'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: TLS 为 TCP 添加了加密。TLS 是 TCP/IP 套件的一个附加组件，不被视为 TCP 基本操作的一部分。HTTP 事务可以在没有 TLS 的情况下完成，但在网络中不会受到窃听者的攻击。TLS
    是一种协议组合，用于确保发送者和接收者之间的流量安全。TLS 与 TCP 类似，使用握手建立加密能力并交换加密密钥。以下步骤详细介绍了客户端和服务器之间的
    TLS 握手，也可以在 [图 1-9](#img-tls-handshake) 中看到：
- en: 'ClientHello: This contains the cipher suites supported by the client and a
    random number.'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ClientHello：这包含客户端支持的密码套件和一个随机数。
- en: 'ServerHello: This message contains the cipher it supports and a random number.'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ServerCertificate: This contains the server’s certificate and its server public
    key.'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ServerHelloDone: This is the end of the ServerHello. If the client receives
    a request for its certificate, it sends a ClientCertificate message.'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ClientKeyExchange: Based on the server’s random number, our client generates
    a random premaster secret, encrypts it with the server’s public key certificate,
    and sends it to the server.'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Key Generation: The client and server generate a master secret from the premaster
    secret and exchange random values.'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ChangeCipherSpec: Now the client and server swap their ChangeCipherSpec to
    begin using the new keys for encryption.'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finished Client: The client sends the finished message to confirm that the
    key exchange and authentication were successful.'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finished Server: Now, the server sends the finished message to the client to
    end the handshake.'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes applications and components will manage TLS for developers, so a
    basic introduction is required; [Chapter 5](ch05.xhtml#kubernetes_networking_abstractions)
    reviews more about TLS and Kubernetes.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: As demonstrated with our web server, cURL, and `tcpdump`, TCP is a stateful
    and reliable protocol for sending data between hosts. Its use of flags, combined
    with the sequence and acknowledgment number dance it performs, delivers thousands
    of messages over unreliable networks across the globe. That reliability comes
    at a cost, however. Of the 12 packets we set, only two were real data transfers.
    For applications that do not need reliability such as voice, the overhead that
    comes with UDP offers an alternative. Now that we understand how TCP works as
    a reliable connection-oriented protocol, let’s review how UDP differs from TCP.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '![TLS Handshake](Images/neku_0109.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
- en: Figure 1-9\. TLS handshake
  id: totrans-315
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: UDP
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: UDP offers an alternative to applications that do not need the reliability that
    TCP provides. UDP is an excellent choice for applications that can withstand packet
    loss such as voice and DNS. UDP offers little overhead from a network perspective,
    only having four fields and no data acknowledgment, unlike its verbose brother
    TCP.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: It is transaction-oriented, suitable for simple query and response protocols
    like the Domain Name System (DNS) and Simple Network Management Protocol (SNMP).
    UDP slices a request into datagrams, making it capable for use with other protocols
    for tunneling like a virtual private network (VPN). It is lightweight and straightforward,
    making it great for bootstrapping application data in the case of DHCP. The stateless
    nature of data transfer makes UDP perfect for applications, such as voice, that
    can withstand packet loss—did you hear that? UDP’s lack of retransmit also makes
    it an apt choice for streaming video.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the small number of headers required in a UDP datagram (see [Figure 1-10](#udp-header)):'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '`Source port number` (2 bytes)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Identifies the sender’s port. The source host is the client; the port number
    is ephemeral. UDP ports have well-known numbers like DNS on 53 or DHCP 67/68.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '`Destination port number` (2 bytes)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Identifies the receiver’s port and is required.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '`Length` (2 bytes)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the length in bytes of the UDP header and UDP data. The minimum length
    is 8 bytes, the length of the header.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '`Checksum` (2 bytes)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Used for error checking of the header and data. It is optional in IPv4, but
    mandatory in IPv6, and is all zeros if unused.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: UDP and TCP are general transport protocols that help ship and receive data
    between hosts. Kubernetes supports both protocols on the network, and services
    allow users to load balance many pods using services. Also important to note is
    that in each service, developers must define the transport protocol; if they do
    not TCP is the default used.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '![udp header](Images/neku_0110.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
- en: Figure 1-10\. UDP header
  id: totrans-330
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The next layer in the TCP/IP stack is the Internetworking layer—these are packets
    that can get sent across the globe on the vast networks that make up the internet.
    Let’s review how that gets completed.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All TCP and UDP data gets transmitted as IP packets in TCP/IP in the Network
    layer. The Internet or Network layer is responsible for transferring data between
    networks. Outgoing packets select the next-hop host and send the data to that
    host by passing it the appropriate Link layer details; packets are received by
    a host, de-encapsulated, and sent up to the proper Transport layer protocol. In
    IPv4, both transmit and receive, IP provides fragmentation or defragmentation
    of packets based on the MTU; this is the maximum size of the IP packet.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: IP makes no guarantees about packets’ proper arrival; since packet delivery
    across diverse networks is inherently unreliable and failure-prone, that burden
    is with the endpoints of a communication path, rather than on the network. As
    discussed in the previous section, providing service reliability is a function
    of the Transport layer. Each packet has a checksum to ensure that the received
    packet’s information is accurate, but this layer does not validate data integrity.
    Source and destination IP addresses identify packets on the network, which we’ll
    address next.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Internet Protocol
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This almighty packet is defined in RFC 791 and is used for sending data across
    networks. [Figure 1-11](#img-ipv4-header) shows the IPv4 header format.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '![neku 0111](Images/neku_0111.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
- en: Figure 1-11\. IPv4 header format
  id: totrans-338
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s look at the header fields in more detail:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`Version`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: The first header field in the IP packet is the four-bit version field. For IPv4,
    this is always equal to four.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`Internet Header Length` (IHL)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: The IPv4 header has a variable size due to the optional 14th field option.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`Type of Service`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Originally defined as the type of service (ToS), now Differentiated Services
    Code Point (DSCP), this field specifies differentiated services. DSC Pallows for
    routers and networks to make decisions on packet priority during times of congestion.
    Technologies such as Voice over IP use DSCP to ensure calls take precedence over
    other traffic.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '`Total Length`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: This is the entire packet size in bytes.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`Identification`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: This is the identification field and is used for uniquely identifying the group
    of fragments of a single IP datagram.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '`Flags`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: 'This is used to control or identify fragments. In order from most significant
    to least:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 'bit 0: Reserved, set to zero'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bit 1: Do not Fragment'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bit 2: More Fragments'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fragment Offset`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: This specifies the offset of a distinct fragment relative to the first unfragmented
    IP packet. The first fragment always has an offset of zero.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`Time To Live (TTL)`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: An 8-bit time to live field helps prevent datagrams from going in circles on
    a network.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '`Protocol`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: This is used in the data section of the IP packet. IANA has a list of IP protocol
    numbers in RFC 790; some well-known protocols are also detailed in [Table 1-4](#ip_protocol_numbers).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-4\. IP protocol numbers
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '| Protocol number | Protocol name | Abbreviation |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
- en: '| 1 | Internet Control Message Protocol | ICMP |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
- en: '| 2 | Internet Group Management Protocol | IGMP |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: '| 6 | Transmission Control Protocol | TCP |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
- en: '| 17 | User Datagram Protocol | UDP |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
- en: '| 41 | IPv6 Encapsulation | ENCAP |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
- en: '| 89 | Open Shortest Path First | OSPF |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
- en: '| 132 | Stream Control Transmission Protocol | SCTP |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
- en: '`Header Checksum` (16-bit)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: The IPv4 header checksum field is used for error checking. When a packet arrives,
    a router computes the header’s checksum; the router drops the packet if the two
    values do not match. The encapsulated protocol must handle errors in the data
    field. Both UDP and TCP have checksum fields.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-373
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When the router receives a packet, it lowers the TTL field by one. As a consequence,
    the router must compute a new checksum.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '`Source address`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: This is the IPv4 address of the sender of the packet.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-377
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The source address may be changed in transit by a network address translation
    device; NAT will be discussed later in this chapter and extensively in [Chapter 3](ch03.xhtml#container_networking_basics).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '`Destination address`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: This is the IPv4 address of the receiver of the packet. As with the source address,
    a NAT device can change the destination IP address.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '`Options`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: The possible options in the header are Copied, Option Class, Option Number,
    Option Length, and Option Data.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: The crucial component here is the address; it’s how networks are identified.
    They simultaneously identify the host on the network and the whole network itself
    (more on that in [“Getting round the network”](#getround)). Understanding how
    to identify an IP address is critical for an engineer. First, we will review IPv4
    and then understand the drastic changes in IPv6.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: 'IPv4 addresses are in the dotted-decimal notation for us humans; computers
    read them out as binary strings. [Figure 1-12](#ipv-four-address) details the
    dotted-decimal notation and binary. Each section is 8 bits in length, with four
    sections, making the complete length 32 bits. IPv4 addresses have two sections:
    the first part is the network, and the second is the host’s unique identifier
    on the network.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '![IPv4 Address](Images/neku_0112.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
- en: Figure 1-12\. IPv4 address
  id: totrans-386
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In [Example 1-5](#ip_address), we have the output of a computer’s IP address
    for its network interface card and we can see its IPv4 address is `192.168.1.2`.
    The IP address also has a subnet mask or netmask associated with it to make out
    what network it is assigned. The example’s subnet is `netmask 0xffffff00` in dotted-decimal,
    which is `255.255.255.0`.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-5\. IP address
  id: totrans-388
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The subnet brings up the idea of classful addressing. Initially, when an IP
    address range was assigned, a range was considered to be the combination of an
    8-, 16-, or 24-bit network prefix along with a 24-, 16-, or 8-bit host identifier,
    respectively. Class A had 8 bits for the host, Class B 16, and Class C 24\. Following
    that, Class A had 2 to the power of 16 hosts available, 16,777,216; Class B had
    65,536; and Class C had 256\. Each class had a host address, the first one in
    its boundary, and the last one was designated as the broadcast address. [Figure 1-13](#ipv-four-class-address)
    demonstrates this for us.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-391
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are two other classes, but they are not generally used in IP addressing.
    Class D addresses are used for IP multicasting, and Class E addresses are reserved
    for experimental use.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '![IPv4 Class Address](Images/neku_0113.png)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
- en: Figure 1-13\. IP class
  id: totrans-394
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Classful addressing was not scalable on the internet, so to help alleviate that
    scale issue, we began breaking up the class boundaries using Classless Inter-Domain
    Routing (CIDR) ranges. Instead of having the full 16 million-plus addresses in
    a class address range, an internet entity gives only a subsection of that range.
    This effectively allows network engineers to move the subnet boundary to anywhere
    inside the class range, giving them more flexibility with CIDR ranges, and helping
    to scale IP address ranges.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 1-14](#cidr-example), we can see the breakdown of the `208.130.29.33`
    IPv4 address and the hierarchy that it creates. The `208.128.0.0/11` CIDR range
    is assigned to ARIN from IANA. ARIN further breaks down the subnet to smaller
    and smaller subnets for its purposes, leading to the single host on the network
    `208.130.29.33/32`.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '![CIDR example](Images/neku_0114.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
- en: Figure 1-14\. CIDR example
  id: totrans-398
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-399
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The global coordination of the DNS root, IP addressing, and other internet protocol
    resources is performed by IANA.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, though, even this practice of using CIDR to extend the range of
    an IPv4 address led to an exhaustion of address spaces that could be doled out,
    leading network engineers and IETF to develop the IPv6 standard.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 1-15](#ipv-six-address), we can see that IPv6, unlike IPv4, uses
    hexadecimal to shorten addresses for writing purposes. It has similar characteristics
    to IPv4 in that it has a host and network prefix.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'The most significant difference between IPv4 and IPv6 is the size of the address
    space. IPv4 has 32 bits, while IPv6 has 128 bits to produce its addresses. To
    put that size differential in perspective, here are those numbers:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: IPv4 has 4,294,967,296.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 has 340,282,366,920,938,463,463,374,607,431,768,211,456.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '![IPv4 Address](Images/neku_0115.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
- en: Figure 1-15\. IPv6 address
  id: totrans-407
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that we understand how an individual host on the network is identified and
    what network it belongs to, we will explore how those networks exchange information
    between themselves using routing protocols.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Getting round the network
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Packets are addressed, and data is ready to be sent, but how do our packets
    get from our host on our network to the intended hosted on another network halfway
    around the world? That is the job of routing. There are several routing protocols,
    but the internet relies on Border Gateway Protocol (BGP), a dynamic routing protocol
    used to manage how packets get routed between edge routers on the internet. It
    is relevant for us because some Kubernetes network implementations use BGP to
    route cluster network traffic between nodes. Between each node on separate networks
    is a series of routers.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: If we refer to the map of the internet in [Figure 1-1](#img-internet-map), each
    network on the internet is assigned a BGP autonomous system number (ASN) to designate
    a single administrative entity or corporation that represents a common and clearly
    defined routing policy on the internet. BGP and ASNs allows network administrators
    to maintain control of their internal network routing while announcing and summarizing
    their routes on the internet. [Table 1-5](#complete_table_of_asn_available) lists
    the available ASNs managed by IANA and other regional entities.^([1](ch01.xhtml#idm46219953252264))
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-5\. ASNs available
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Bits | Description | Reference |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
- en: '| 0 | 16 | Reserved | RFC 1930, RFC 7607 |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
- en: '| 1–23455 | 16 | Public ASNs |  |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
- en: '| 23456 | 16 | Reserved for AS Pool Transition | RFC 6793 |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
- en: '| 23457–64495 | 16 | Public ASNs |  |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
- en: '| 64496–64511 | 16 | Reserved for use in documentation/sample code | RFC 5398
    |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
- en: '| 64512–65534 | 16 | Reserved for private use | RFC 1930, RFC 6996 |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
- en: '| 65535 | 16 | Reserved | RFC 7300 |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
- en: '| 65536–65551 | 32 | Reserved for use in documentation and sample code | RFC
    4893, RFC 5398 |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
- en: '| 65552–131071 | 32 | Reserved |  |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
- en: '| 131072–4199999999 | 32 | Public 32-bit ASNs |  |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
- en: '| 4200000000–4294967294 | 32 | Reserved for private use | RFC 6996 |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
- en: '| 4294967295 | 32 | Reserved | RFC 7300 |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
- en: In [Figure 1-16](#bgp-routing) ,we have five ASNs, 100–500\. A host on `130.10.1.200`
    wants to reach a host destined on `150.10.2.300`. Once the local router or default
    gateway for the host `130.10.1.200` receives the packet, it will look for the
    interface and path for `150.10.2.300` that BGP has determined for that route.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '![BGP Routing](Images/neku_0116.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
- en: Figure 1-16\. BGP routing example
  id: totrans-429
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Based on the routing table in [Figure 1-17](#route-table), the router for AS
    100 determined the packet belongs to AS 300, and the preferred path is out interface
    `140.10.1.1`. Rinse and repeat on AS 200 until the local router for `150.10.2.300`
    on AS 300 receives that packet. The flow here is described in [Figure 1-6](#three-way-tcp),
    which shows the TCP/IP data flow between networks. A basic understanding of BGP
    is needed because some container networking projects, like Calico, use it for
    routing between nodes; you’ll learn more about this in [Chapter 3](ch03.xhtml#container_networking_basics).
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '![Route Table](Images/neku_0117.png)'
  id: totrans-431
  prefs: []
  type: TYPE_IMG
- en: Figure 1-17\. Local routing table
  id: totrans-432
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 1-17](#route-table) displays a local route table. In the route table,
    we can see the interface that a packet will be sent out is based on the destination
    IP address. For example, a packet destined for `192.168.1.153` will be sent out
    the `link#11` gateway, which is local to the network, and no routing is needed.
    `192.168.1.254` is the router on the network attached to our internet connection.
    If the destination network is unknown, it is sent out the default route.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-434
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Like all Linux and BSD OSs, you can find more information on `netstat`’s man
    page (`man netstat`). Apple’s `netstat` is derived from the BSD version. More
    information can be found in the [FreeBSD Handbook](https://oreil.ly/YM0eQ).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: Routers continuously communicate on the internet, exchanging route information
    and informing each other of changes on their respective networks. BGP takes care
    of a lot of that data exchange, but network engineers and system administrators
    can use the ICMP protocol and `ping` command line tools to test connectivity between
    hosts and routers.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: ICMP
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ping` is a network utility that uses ICMP for testing connectivity between
    hosts on the network. In [Example 1-6](#icmp_echo_request), we see a successful
    `ping` test to `192.168.1.2`, with five packets all returning an ICMP echo reply.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-6\. ICMP echo request
  id: totrans-439
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 1-7](#icmp_echo_request_failed) shows a failed ping attempt that times
    out trying to reach host `1.2.3.4`. Routers and administrators will use `ping`
    for testing connections, and it is useful in testing container connectivity as
    well. You’ll learn more about this in Chapters [2](ch02.xhtml#linux_networking)
    and [3](ch03.xhtml#container_networking_basics) as we deploy our minimal Golang
    web server into a container and a pod.'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-7\. ICMP echo request failed
  id: totrans-442
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As with TCP and UDP, there are headers, data, and options in ICMP packets;
    they are reviewed here and shown in [Figure 1-18](#ICMP-header):'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '`Type`'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: ICMP type.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '`Code`'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: ICMP subtype.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '`Checksum`'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: Internet checksum for error checking, calculated from the ICMP header and data
    with value 0 substitutes for this field.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '`Rest of Header` (4-byte field)'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Contents vary based on the ICMP type and code.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '`Data`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: ICMP error messages contain a data section that includes a copy of the entire
    IPv4 header.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '![icmp header](Images/neku_0118.png)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
- en: Figure 1-18\. ICMP header
  id: totrans-456
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-457
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some consider ICMP a Transport layer protocol since it does not use TCP or UDP.
    Per RFC 792, it defines ICMP, which provides routing, diagnostic, and error functionality
    for IP. Although ICMP messages are encapsulated within IP datagrams, ICMP processing
    is considered and is typically implemented as part of the IP layer. ICMP is IP
    protocol 1, while TCP is 6, and UDP is 17.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: The value identifies control messages in the `Type` field. The `code` field
    gives additional context information for the message. You can find some standard
    ICMP type numbers in [Table 1-6](#common_icmp_type_numbers).
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-6\. Common ICMP type numbers
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Name | Reference |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
- en: '| 0 | Echo reply | RFC 792 |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
- en: '| 3 | Destination unreachable | RFC 792 |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
- en: '| 5 | Redirect | RFC 792 |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
- en: '| 8 | Echo | RFC 792 |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
- en: Now that our packets know which networks they are being sourced and destined
    to, it is time to start physically sending this data request across the network;
    this is the responsibility of the Link layer.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: Link Layer
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTTP request has been broken up into segments, addressed for routing across
    the internet, and now all that is left is to send the data across the wire. The
    Link layer of the TCP/IP stack comprises two sublayers: the Media Access Control
    (MAC) sublayer and the Logical Link Control (LLC) sublayer. Together, they perform
    OSI layers 1 and 2, Data Link and Physical. The Link layer is responsible for
    connectivity to the local network. The first sublayer, MAC, is responsible for
    access to the physical medium. The LLC layer has the privilege of managing flow
    control and multiplexing protocols over the MAC layer to transmit and demultiplexing
    when receiving, as shown in [Figure 1-19](#net-demux). IEEE standard 802.3, Ethernet,
    defines the protocols for sending and receiving frames to encapsulate IP packets.
    IEEE 802 is the overarching standard for LLC (802.2), wireless (802.11), and Ethernet/MAC
    (802.3).'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '![ethernet-demux](Images/neku_0119.png)'
  id: totrans-470
  prefs: []
  type: TYPE_IMG
- en: Figure 1-19\. Ethernet demultiplexing example
  id: totrans-471
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As with the other PDUs, Ethernet has a header and footers, as shown in [Figure 1-20](#ethernet-header).
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '![ethernet header](Images/neku_0120.png)'
  id: totrans-473
  prefs: []
  type: TYPE_IMG
- en: Figure 1-20\. Ethernet header and footer
  id: totrans-474
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s review these in detail:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '`Preamble` (8 bytes)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Alternating string of ones and zeros indicate to the receiving host that a frame
    is incoming.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '`Destination MAC Address` (6 bytes)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: MAC destination address; the Ethernet frame recipient.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '`Source MAC Address` (6 bytes)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: MAC source address; the Ethernet frame source.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '`VLAN tag` (4 bytes)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Optional 802.1Q tag to differentiate traffic on the network segments.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '`Ether-type` (2 bytes)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Indicates which protocol is encapsulated in the payload of the frame.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '`Payload` (variable length)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: The encapsulated IP packet.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '`Frame Check Sequence (FCS)` or `Cycle Redundancy Check (CRC)` (4 bytes)'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: The frame check sequence (FCS) is a four-octet cyclic redundancy check (CRC)
    that allows the detection of corrupted data within the entire frame as received
    on the receiver side. The CRC is part of the Ethernet frame footer.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-21](#mac-address) shows that MAC addresses get assigned to network
    interface hardware at the time of manufacture. MAC addresses have two parts: the
    organization unit identifier (OUI) and the NIC-specific parts.'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '![Mac Address](Images/neku_0121.png)'
  id: totrans-491
  prefs: []
  type: TYPE_IMG
- en: Figure 1-21\. MAC address
  id: totrans-492
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The frame indicates to the recipient of the Network layer packet type. [Table 1-7](#common_ethertype_protocols)
    details the common protocols handled. In Kubernetes, we are mostly interested
    in IPv4 and ARP packets. IPv6 has recently been introduced to Kubernetes in the
    1.19 release.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-7\. Common EtherType protocols
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '| EtherType | Protocol |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
- en: '| 0x0800 | Internet Protocol version 4 (IPv4) |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
- en: '| 0x0806 | Address Resolution Protocol (ARP) |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
- en: '| 0x8035 | Reverse Address Resolution Protocol (RARP) |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
- en: '| 0x86DD | Internet Protocol version 6 (IPv6) |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
- en: '| 0x88E5 | MAC security (IEEE 802.1AE) |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
- en: '| 0x9100 | VLAN-tagged (IEEE 802.1Q) frame with double tagging |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
- en: When an IP packet reaches its destination network, the destination IP address
    is resolved with the Address Resolution Protocol for IPv4 (Neighbor Discovery
    Protocol in the case of IPv6) into the destination host’s MAC address. The Address
    Resolution Protocol must manage address translation from internet addresses to
    Link layer addresses on Ethernet networks. The ARP table is for fast lookups for
    those known hosts, so it does not have to send an ARP request for every frame
    the host wants to send out. [Example 1-8](#arp_table) shows the output of a local
    ARP table. All devices on the network keep a cache of ARP addresses for this purpose.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-8\. ARP table
  id: totrans-504
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Figure 1-22](#arp-request) shows the exchange between hosts on the local network.
    The browser makes an HTTP request for a website hosted by the target server. Through
    DNS, it determines that the server has the IP address `10.0.0.1`. To continue
    to send the HTTP request, it also requires the server’s MAC address. First, the
    requesting computer consults a cached ARP table to look up `10.0.0.1` for any
    existing records of the server’s MAC address. If the MAC address is found, it
    sends an Ethernet frame with the destination address of the server’s MAC address,
    containing the IP packet addressed to `10.0.0.1` onto the link. If the cache did
    not produce a hit for `10.0.0.2`, the requesting computer must send a broadcast
    ARP request message with a destination MAC address of `FF:FF:FF:FF:FF:FF`, which
    is accepted by all hosts on the local network, requesting an answer for `10.0.0.1`.
    The server responds with an ARP response message containing its MAC and IP address.
    As part of answering the request, the server may insert an entry for requesting
    the computer’s MAC address into its ARP table for future use. The requesting computer
    receives and caches the response information in its ARP table and can now send
    the HTTP packets.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-22](#arp-request)展示了本地网络上主机之间的交换。浏览器向目标服务器发出一个获取托管网站的HTTP请求。通过DNS，它确定服务器的IP地址为`10.0.0.1`。为了继续发送HTTP请求，还需要服务器的MAC地址。首先，请求计算机查询缓存的ARP表，查找`10.0.0.1`是否存在服务器MAC地址的记录。如果找到MAC地址，则发送一个以服务器MAC地址为目的地地址的以`10.0.0.1`寻址的IP数据包的以太网帧到链路上。如果缓存没有命中`10.0.0.2`的记录，则请求计算机必须发送一个以广播地址`FF:FF:FF:FF:FF:FF`为目的地MAC地址的ARP请求消息。该消息被本地网络上的所有主机接受，请求`10.0.0.1`的答复。服务器用包含其MAC和IP地址的ARP响应消息回应。作为响应请求的一部分，服务器可能会将请求计算机的MAC地址插入其ARP表以供将来使用。请求计算机接收并缓存响应信息到其ARP表中，现在可以发送HTTP数据包了。'
- en: This also brings up a crucial concept on the local networks, broadcast domains.
    All packets on the broadcast domain receive all the ARP messages from hosts. In
    addition, all frames are sent all nodes on the broadcast, and the host compares
    the destination MAC address to its own. It will discard frames not destined for
    itself. As hosts on the network grow, so too does the broadcast traffic.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 这也引出了本地网络上的一个关键概念，即广播域。广播域上的所有主机都接收来自主机的所有ARP消息。此外，所有帧都发送到广播上的所有节点，主机将目标MAC地址与自身的MAC地址进行比较。不属于自身的帧将被丢弃。随着网络上主机的增加，广播流量也随之增加。
- en: '![ARP Request](Images/neku_0122.png)'
  id: totrans-508
  prefs: []
  type: TYPE_IMG
  zh: '![ARP 请求](Images/neku_0122.png)'
- en: Figure 1-22\. ARP request
  id: totrans-509
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-22\. ARP 请求
- en: We can use `tcpdump` to view all the ARP requests happening on the local network
    as in [Example 1-9](#arp_tcpdump). The packet capture details the ARP packets;
    the Ethernet type used, `Ethernet (len 6)`; and the higher-level protocol, `IPv4`.
    It also includes who is requesting the MAC address of the IP address, `Request
    who-has 192.168.0.1 tell 192.168.0.12`.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`tcpdump`来查看在本地网络上发生的所有ARP请求，如[示例 1-9](#arp_tcpdump)所示。数据包捕获详细描述了ARP数据包，使用的以太网类型为`Ethernet
    (len 6)`；以及更高层协议为`IPv4`。它还包括谁在请求IP地址的MAC地址，`Request who-has 192.168.0.1 tell 192.168.0.12`。
- en: Example 1-9\. ARP `tcpdump`
  id: totrans-511
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-9\. ARP `tcpdump`
- en: '[PRE9]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To further segment the layer 2 network, network engineers can use virtual local
    area network (VLAN) tagging. Inside the Ethernet frame header is an optional VLAN
    tag that differentiates traffic on the LAN. It is useful to use VLANs to break
    up LANs and manage networks on the same switch or different ones across the network
    campus. Routers between VLANs filter broadcast traffic, enable network security,
    and alleviate network congestion. They are useful to the network administrator
    for those purposes, but Kubernetes network administrators can use the extended
    version of the VLAN technology known as a *virtual extensible LAN* (VXLAN).
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步分割第二层网络，网络工程师可以使用虚拟局域网（VLAN）标记。在以太网帧头部内有一个可选的VLAN标签，用于区分LAN上的流量。使用VLAN来分割LAN并管理网络在同一个交换机或跨网络校园内的不同交换机上是很有用的。VLAN之间的路由器过滤广播流量，启用网络安全性并减轻网络拥塞。它们对网络管理员来说在这些目的上是有用的，但是Kubernetes网络管理员可以使用VLAN技术的扩展版本，即*虚拟可扩展局域网*（VXLAN）。
- en: '[Figure 1-23](#vxlan) shows how a VXLAN is an extension of a VLAN that allows
    network engineers to encapsulate layer 2 frames into layer 4 UDP packets. A VXLAN
    increases scalability up to 16 million logical networks and allows for layer 2
    adjacency across IP networks. This technology is used in Kubernetes networks to
    produce overlay networks, which you’ll learn more about in later chapters.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '![VXLAN](Images/neku_0123.png)'
  id: totrans-515
  prefs: []
  type: TYPE_IMG
- en: Figure 1-23\. VXLAN packet
  id: totrans-516
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Ethernet also details the specifications for the medium to transmit frames on,
    such as twisted pair, coaxial cable, optical fiber, wireless, or other transmission
    media yet to be invented, such as the gamma-ray network that powers the Philotic
    Parallax Instantaneous Communicator.^([2](ch01.xhtml#idm46219944723976)) Ethernet
    even defines the encoding and signaling protocols used on the wire; this is out
    of scope for our proposes.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: The Link layer has multiple other protocols involved from a network perspective.
    Like the layers discussed previously, we have only touched the surface of the
    Link layer. We constrained this book to those details needed for a base understanding
    of the Link layer for the Kubernetes networking model.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting Our Web Server
  id: totrans-519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our journey through all the layers of TCP/IP is complete. [Figure 1-24](#all-headers)
    outlines all the headers and footers each layer of the TCP/IP model produces to
    send data across the internet.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '![Full view](Images/neku_0124.png)'
  id: totrans-521
  prefs: []
  type: TYPE_IMG
- en: Figure 1-24\. TCP/IP PDU full view
  id: totrans-522
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s review the journey and remind ourselves again what is going on now that
    we understand each layer in detail. [Example 1-10](#EX1) shows our web server
    again, and [Example 1-11](#EX0111) shows the cURL request for it from earlier
    in the chapter.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-10\. Minimal web server in Go
  id: totrans-524
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Example 1-11\. Client request
  id: totrans-526
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We begin with the web server waiting for a connection in [Example 1-10](#EX1).
    cURL requests the HTTP server at `0.0.0.0` on port 8080\. cURL determines the
    IP address and port number from the URL and proceeds to establish a TCP connection
    to the server. Once the connection is set up, via a TCP handshake, cURL sends
    the HTTP request. When the web server starts up, a socket of 8080 is created on
    the HTTP server, which matches TCP port 8080; the same is done on the cURL client
    side with a random port number. Next, this information is sent to the Network
    layer, where the source and destination IP addresses are attached to the packet’s
    IP header. At the client’s Data Link layer, the source MAC address of the NIC
    is added to the Ethernet frame. If the destination MAC address is unknown, an
    ARP request is made to find it. Next, the NIC is used to transmit the Ethernet
    frames to the web server.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: When the web server receives the request, it creates packets of data that contain
    the HTTP response. The packets are sent back to the cURL process by routing them
    through the internet using the source IP address on the request packet. Once received
    by the cURL process, the packet is sent from the device to the drivers. At the
    Data Link layer, the MAC address is removed. At the Network Protocol layer, the
    IP address is verified and then removed from the packet. For this reason, if an
    application requires access to the client IP, it needs to be stored at the Application
    layer; the best example here is in HTTP requests and the X-Forwarded-For header.
    Now the socket is determined from the TCP data and removed. The packet is then
    forwarded to the client application that creates that socket. The client reads
    it and processes the response data. In this case, the socket ID was random, corresponding
    to the cURL process. All packets are sent to cURL and pieced together into one
    HTTP response. If we were to use the `-O` output option, it would have been saved
    to a file; otherwise, cURL outputs the response to the terminal’s standard out.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 当Web服务器接收到请求时，它会创建包含HTTP响应的数据包。这些数据包通过使用请求数据包上的源IP地址经过互联网路由发送回cURL进程。一旦cURL进程接收到数据包，数据包就会从设备发送到驱动程序。在数据链路层，MAC地址被移除。在网络协议层，IP地址被验证，然后从数据包中移除。因此，如果应用程序需要访问客户端IP，则需要在应用程序层存储它；HTTP请求和X-Forwarded-For头部就是最好的例子。现在根据TCP数据确定套接字并移除它。然后将数据包转发到创建该套接字的客户端应用程序。客户端读取并处理响应数据。在本例中，套接字ID是随机的，对应于cURL进程。所有数据包都发送到cURL并组合成一个HTTP响应。如果我们使用了`-O`输出选项，响应将保存到文件中；否则，cURL将响应输出到终端的标准输出。
- en: Whew, that is a mouthful, 50 pages and 50 years of networking condensed into
    two paragraphs! The basics of networking we have reviewed are just the beginning
    but are required knowledge if you want to run Kubernetes clusters and networks
    at scale.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这真是一大口气，50页和50年的网络发展被压缩成了两段话！我们回顾的网络基础只是一个开始，但如果您想要运行规模化的Kubernetes集群和网络，这些知识是必不可少的。
- en: Conclusion
  id: totrans-531
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The HTTP transactions modeled in this chapter happen every millisecond, globally,
    all day on the internet and data center network. This is the type of scale that
    the Kubernetes networks’ APIs help developers abstract away into simple YAML.
    Understanding the scale of the problem is our first in step in mastering the management
    of a Kubernetes network. By taking our simple example of the Golang web server
    and learning the first principles of networking, you can begin to wrangle the
    packets flowing into and out of your clusters.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中建模的HTTP事务每毫秒在全球范围内的互联网和数据中心网络中发生。这种规模是Kubernetes网络API帮助开发人员将复杂问题抽象为简单YAML的类型。了解问题的规模是我们掌握Kubernetes网络管理的第一步。通过我们的简单示例——Golang
    Web服务器，并学习网络的第一原则，您可以开始处理流入和流出集群的数据包。
- en: 'So far, we have covered the following:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了以下内容：
- en: History of networking
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络的历史
- en: OSI model
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSI模型
- en: TCP/IP
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP/IP
- en: Throughout this chapter, we discussed many things related to networks but only
    those needed to learn about using the Kubernetes abstractions. There are several
    O’Reilly books about TCP/IP; [*TCP/IP Network Administration*](https://oreil.ly/UIP62)
    by Craig Hunt (O’Reilly) is a great in-depth read on all aspects of TCP.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了与网络相关的许多内容，但只涉及学习使用Kubernetes抽象所需的内容。关于TCP/IP有几本O’Reilly的书籍；[*TCP/IP网络管理*](https://oreil.ly/UIP62)
    由克雷格·亨特（O’Reilly）是关于TCP所有方面的深度阅读。
- en: We discussed how networking evolved, walked through the OSI model, translated
    it to the TCP/IP stack, and with that stack completed an example HTTP request.
    In the next chapter, we will walk through how this is implemented for the client
    and server with Linux networking.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了网络如何演变，走过了OSI模型，将其转化为TCP/IP协议栈，并通过该协议栈完成了一个示例HTTP请求。在下一章中，我们将详细讲解这是如何在Linux网络中为客户端和服务器实现的。
- en: ^([1](ch01.xhtml#idm46219953252264-marker)) [“Autonomous System (AS) Numbers”.](https://oreil.ly/Jgi2c)
    IANA.org. 2018-12-07\. Retrieved 2018-12-31.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm46219953252264-marker)) [“自治系统（AS）编号”。](https://oreil.ly/Jgi2c)
    IANA.org. 2018-12-07\. 检索于2018-12-31.
- en: ^([2](ch01.xhtml#idm46219944723976-marker)) In the movie *Ender’s Game*, they
    use the Ansible network to communicate across the galaxy instantly. Philotic Parallax
    Instantaneous Communicator is the official name of the Ansible network.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#idm46219944723976-marker)) 在电影《异星战场》中，他们使用“安西布尔”网络实现了跨银河瞬时通信。Philotic
    Parallax即时通信器是安西布尔网络的官方名称。
