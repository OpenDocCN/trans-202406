["```\nconst pathUtils = require('path')\nconst fs = require('fs')\n\n// create directory to store vacation photos (if it doesn't already exist)\nconst dataDir = pathUtils.resolve(__dirname, '..', 'data')\nconst vacationPhotosDir = pathUtils.join(dataDir, 'vacation-photos')\nif(!fs.existsSync(dataDir)) fs.mkdirSync(dataDir)\nif(!fs.existsSync(vacationPhotosDir)) fs.mkdirSync(vacationPhotosDir)\n\nfunction saveContestEntry(contestName, email, year, month, photoPath) {\n  // TODO...this will come later\n}\n\n// we'll want these promise-based versions of fs functions later\nconst { promisify } = require('util')\nconst mkdir = promisify(fs.mkdir)\nconst rename = promisify(fs.rename)\n\nexports.api.vacationPhotoContest = async (req, res, fields, files) => {\n  const photo = files.photo[0]\n  const dir = vacationPhotosDir + '/' + Date.now()\n  const path = dir + '/' + photo.originalFilename\n  await mkdir(dir)\n  await rename(photo.path, path)\n  saveContestEntry('vacation-photo', fields.email,\n    req.params.year, req.params.month, path)\n  res.send({ result: 'success' })\n}\n```", "```\nconst filename = 'customerUpload.jpg'\n\ns3.putObject({\n  Bucket: 'uploads',\n  Key: filename,\n  Body: fs.readFileSync(__dirname + '/tmp/ + filename),\n})\n```", "```\nconst filename = 'customerUpload.jpg'\n\nconst blobService = azure.createBlobService()\nblobService.createBlockBlobFromFile('uploads', filename, __dirname +\n  '/tmp/' + filename)\n```", "```\nmodule.exports = {\n  getVacations: async (options = {}) => {\n    // let's fake some vacation data:\n    const vacations = [\n      {\n        name: 'Hood River Day Trip',\n        slug: 'hood-river-day-trip',\n        category: 'Day Trip',\n        sku: 'HR199',\n        description: 'Spend a day sailing on the Columbia and ' +\n          'enjoying craft beers in Hood River!',\n        location: {\n          // we'll use this for geocoding later in the book\n          search: 'Hood River, Oregon, USA',\n        },\n        price: 99.95,\n        tags: ['day trip', 'hood river', 'sailing', 'windsurfing', 'breweries'],\n        inSeason: true,\n        maximumGuests: 16,\n        available: true,\n        packagesSold: 0,\n      }\n    ]\n    // if the \"available\" option is specified, return only vacations that match\n    if(options.available !== undefined)\n      return vacations.filter(({ available }) => available === options.available)\n    return vacations\n  },\n  addVacationInSeasonListener: async (email, sku) => {\n    // we'll just pretend we did this...since this is\n    // an async function, a new promise will automatically\n    // be returned that simply resolves to undefined\n  },\n}\n```", "```\nnpm install mongoose\n```", "```\n\"mongo\": {\n    \"connectionString\": \"your_dev_connection_string\"\n  }\n}\n```", "```\nconst mongoose = require('mongoose')\nconst { connectionString } = credentials.mongo\nif(!connectionString) {\n  console.error('MongoDB connection string missing!')\n  process.exit(1)\n}\nmongoose.connect(connectionString)\nconst db = mongoose.connection\ndb.on('error' err => {\n  console.error('MongoDB error: ' + err.message)\n  process.exit(1)\n})\ndb.once('open', () => console.log('MongoDB connection established'))\n\nmodule.exports = {\n  getVacations: async () => {\n    //...return fake vacation data\n  },\n  addVacationInSeasonListener: async (email, sku) => {\n    //...do nothing\n  },\n}\n```", "```\nrequire('./db')\n```", "```\nconst mongoose = require('mongoose')\n\nconst vacationSchema = mongoose.Schema({\n  name: String,\n  slug: String,\n  category: String,\n  sku: String,\n  description: String,\n  location: {\n    search: String,\n    coordinates: {\n      lat: Number,\n      lng: Number,\n    },\n  },\n  price: Number,\n  tags: [String],\n  inSeason: Boolean,\n  available: Boolean,\n  requiresWaiver: Boolean,\n  maximumGuests: Number,\n  notes: String,\n  packagesSold: Number,\n})\n\nconst Vacation = mongoose.model('Vacation', vacationSchema)\nmodule.exports = Vacation\n```", "```\nconst Vacation = require('./models/vacation')\n```", "```\nVacation.find((err, vacations) => {\n  if(err) return console.error(err)\n  if(vacations.length) return\n\n  new Vacation({\n    name: 'Hood River Day Trip',\n    slug: 'hood-river-day-trip',\n    category: 'Day Trip',\n    sku: 'HR199',\n    description: 'Spend a day sailing on the Columbia and ' +\n      'enjoying craft beers in Hood River!',\n    location: {\n      search: 'Hood River, Oregon, USA',\n    },\n    price: 99.95,\n    tags: ['day trip', 'hood river', 'sailing', 'windsurfing', 'breweries'],\n    inSeason: true,\n    maximumGuests: 16,\n    available: true,\n    packagesSold: 0,\n  }).save()\n\n  new Vacation({\n    name: 'Oregon Coast Getaway',\n    slug: 'oregon-coast-getaway',\n    category: 'Weekend Getaway',\n    sku: 'OC39',\n    description: 'Enjoy the ocean air and quaint coastal towns!',\n    location: {\n      search: 'Cannon Beach, Oregon, USA',\n    },\n    price: 269.95,\n    tags: ['weekend getaway', 'oregon coast', 'beachcombing'],\n    inSeason: false,\n    maximumGuests: 8,\n    available: true,\n    packagesSold: 0,\n  }).save()\n\n  new Vacation({\n      name: 'Rock Climbing in Bend',\n      slug: 'rock-climbing-in-bend',\n      category: 'Adventure',\n      sku: 'B99',\n      description: 'Experience the thrill of climbing in the high desert.',\n      location: {\n        search: 'Bend, Oregon, USA',\n      },\n      price: 289.95,\n      tags: ['weekend getaway', 'bend', 'high desert', 'rock climbing'],\n      inSeason: true,\n      requiresWaiver: true,\n      maximumGuests: 4,\n      available: false,\n      packagesSold: 0,\n      notes: 'The tour guide is currently recovering from a skiing accident.',\n  }).save()\n})\n```", "```\n<h1>Vacations</h1>\n{{#each vacations}}\n  <div class=\"vacation\">\n    <h3>{{name}}</h3>\n    <p>{{description}}</p>\n    {{#if inSeason}}\n      <span class=\"price\">{{price}}</span>\n      <a href=\"/cart/add?sku={{sku}}\" class=\"btn btn-default\">Buy Now!</a>\n    {{else}}\n      <span class=\"outOfSeason\">We're sorry, this vacation is currently\n      not in season.\n      {{! The \"notify me when this vacation is in season\"\n          page will be our next task. }}\n      <a href=\"/notify-me-when-in-season?sku={{sku}}\">Notify me when\n      this vacation is in season.</a>\n    {{/if}}\n  </div>\n{{/each}}\n```", "```\nexports.listVacations = async (req, res) => {\n  const vacations = await db.getVacations({ available: true })\n  const context = {\n    vacations: vacations.map(vacation => ({\n      sku: vacation.sku,\n      name: vacation.name,\n      description: vacation.description,\n      price: '$' + vacation.price.toFixed(2),\n      inSeason: vacation.inSeason,\n    }))\n  }\n  res.render('vacations', context)\n}\n```", "```\napp.get('/vacations', handlers.listVacations)\n```", "```\nmodule.exports = {\n  getVacations: async (options = {}) => Vacation.find(options),\n  addVacationInSeasonListener: async (email, sku) => {\n    //...\n  },\n}\n```", "```\nconst context = {\n  vacations: products.map(vacations => {\n    vacation.price = '$' + vacation.price.toFixed(2)\n    return vacation\n  })\n}\n```", "```\nconst mongoose = require('mongoose')\n\nconst vacationInSeasonListenerSchema = mongoose.Schema({\n  email: String,\n  skus: [String],\n})\nconst VacationInSeasonListener = mongoose.model('VacationInSeasonListener',\n  vacationInSeasonListenerSchema)\n\nmodule.exports = VacationInSeasonListener\n```", "```\n<div class=\"formContainer\">\n  <form class=\"form-horizontal newsletterForm\" role=\"form\"\n      action=\"/notify-me-when-in-season\" method=\"POST\">\n    <input type=\"hidden\" name=\"sku\" value=\"{{sku}}\">\n    <div class=\"form-group\">\n      <label for=\"fieldEmail\" class=\"col-sm-2 control-label\">Email</label>\n      <div class=\"col-sm-4\">\n        <input type=\"email\" class=\"form-control\" required\n          id=\"fieldEmail\" name=\"email\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-4\">\n        <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n      </div>\n    </div>\n  </form>\n</div>\n```", "```\nexports.notifyWhenInSeasonForm = (req, res) =>\n  res.render('notify-me-when-in-season', { sku: req.query.sku })\n\nexports.notifyWhenInSeasonProcess = (req, res) => {\n  const { email, sku } = req.body\n  await db.addVacationInSeasonListener(email, sku)\n  return res.redirect(303, '/vacations')\n}\n```", "```\nconst VacationInSeasonListener = require('./models/vacationInSeasonListener')\n\nmodule.exports = {\n  getVacations: async (options = {}) => Vacation.find(options),\n  addVacationInSeasonListener: async (email, sku) => {\n    await VacationInSeasonListener.updateOne(\n      { email },\n      { $push: { skus: sku } },\n      { upsert: true }\n    )\n  },\n}\n```", "```\n\"postgres\": {\n  \"connectionString\": \"your_dev_connection_string\"\n}\n```", "```\nconst { credentials } = require('./config')\n\nconst { Client } = require('pg')\nconst { connectionString } = credentials.postgres\nconst client = new Client({ connectionString })\n\nconst createScript = `\n CREATE TABLE IF NOT EXISTS vacations (\n name varchar(200) NOT NULL,\n slug varchar(200) NOT NULL UNIQUE,\n category varchar(50),\n sku varchar(20),\n description text,\n location_search varchar(100) NOT NULL,\n location_lat double precision,\n location_lng double precision,\n price money,\n tags jsonb,\n in_season boolean,\n available boolean,\n requires_waiver boolean,\n maximum_guests integer,\n notes text,\n packages_sold integer\n );\n`\n\nconst getVacationCount = async client => {\n  const { rows } = await client.query('SELECT COUNT(*) FROM VACATIONS')\n  return Number(rows[0].count)\n}\n\nconst seedVacations = async client => {\n  const sql = `\n INSERT INTO vacations(\n name,\n slug,\n category,\n sku,\n description,\n location_search,\n price,\n tags,\n in_season,\n available,\n requires_waiver,\n maximum_guests,\n notes,\n packages_sold\n ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n `\n  await client.query(sql, [\n    'Hood River Day Trip',\n    'hood-river-day-trip',\n    'Day Trip',\n    'HR199',\n    'Spend a day sailing on the Columbia and enjoying craft beers in Hood River!',\n    'Hood River, Oregon, USA',\n    99.95,\n    `[\"day trip\", \"hood river\", \"sailing\", \"windsurfing\", \"breweries\"]`,\n    true,\n    true,\n    false,\n    16,\n    null,\n    0,\n  ])\n  // we can use the same pattern to insert other vacation data here...\n}\n\nclient.connect().then(async () => {\n  try {\n    console.log('creating database schema')\n    await client.query(createScript)\n    const vacationCount = await getVacationCount(client)\n    if(vacationCount === 0) {\n      console.log('seeding vacations')\n      await seedVacations(client)\n    }\n  } catch(err) {\n    console.log('ERROR: could not initialize database')\n    console.log(err.message)\n  } finally {\n    client.end()\n  }\n})\n```", "```\n$ node db-init.js\n```", "```\nconst { Pool } = require('pg')\nconst _ = require('lodash')\n\nconst { credentials } = require('./config')\n\nconst { connectionString } = credentials.postgres\nconst pool = new Pool({ connectionString })\n\nmodule.exports = {\n  getVacations: async () => {\n    const { rows } = await pool.query('SELECT * FROM VACATIONS')\n    return rows.map(row => {\n      const vacation = _.mapKeys(row, (v, k) => _.camelCase(k))\n      vacation.price = parseFloat(vacation.price.replace(/^\\$/, ''))\n      vacation.location = {\n        search: vacation.locationSearch,\n        coordinates: {\n          lat: vacation.locationLat,\n          lng: vacation.locationLng,\n        },\n      }\n      return vacation\n    })\n  }\n}\n```", "```\nCREATE TABLE IF NOT EXISTS vacation_in_season_listeners (\n  email varchar(200) NOT NULL,\n  sku varchar(20) NOT NULL,\n  PRIMARY KEY (email, sku)\n);\n```", "```\nmodule.exports = {\n  //...\n  addVacationInSeasonListener: async (email, sku) => {\n    await pool.query(\n      'INSERT INTO vacation_in_season_listeners (email, sku) ' +\n      'VALUES ($1, $2) ' +\n      'ON CONFLICT DO NOTHING',\n      [email, sku]\n    )\n  },\n}\n```", "```\n\"redis\": {\n  \"url\": \"redis://:<YOUR PASSWORD>@<YOUR ENDPOINT>\"\n}\n```", "```\nconst expressSession = require('express-session')\nconst RedisStore = require('connect-redis')(expressSession)\n\napp.use(cookieParser(credentials.cookieSecret))\napp.use(expressSession({\n  resave: false,\n  saveUninitialized: false,\n  secret: credentials.cookieSecret,\n  store: new RedisStore({\n    url: credentials.redis.url,\n    logErrors: true,  // highly recommended!\n  }),\n}))\n```", "```\n<hr>\n<p>Currency:\n    <a href=\"/set-currency/USD\" class=\"currency {{currencyUSD}}\">USD</a> |\n    <a href=\"/set-currency/GBP\" class=\"currency {{currencyGBP}}\">GBP</a> |\n    <a href=\"/set-currency/BTC\" class=\"currency {{currencyBTC}}\">BTC</a>\n</p>\n```", "```\na.currency {\n  text-decoration: none;\n}\n.currency.selected {\n  font-weight: bold;\n  font-size: 150%;\n}\n```", "```\nexports.setCurrency = (req, res) => {\n  req.session.currency = req.params.currency\n  return res.redirect(303, '/vacations')\n}\n\nfunction convertFromUSD(value, currency) {\n  switch(currency) {\n    case 'USD': return value * 1\n    case 'GBP': return value * 0.79\n    case 'BTC': return value * 0.000078\n    default: return NaN\n  }\n}\n\nexports.listVacations = (req, res) => {\n  Vacation.find({ available: true }, (err, vacations) => {\n    const currency = req.session.currency || 'USD'\n    const context = {\n      currency: currency,\n      vacations: vacations.map(vacation => {\n        return {\n          sku: vacation.sku,\n          name: vacation.name,\n          description: vacation.description,\n          inSeason: vacation.inSeason,\n          price: convertFromUSD(vacation.price, currency),\n          qty: vacation.qty,\n        }\n      })\n    }\n    switch(currency){\n      case 'USD': context.currencyUSD = 'selected'; break\n      case 'GBP': context.currencyGBP = 'selected'; break\n      case 'BTC': context.currencyBTC = 'selected'; break\n    }\n    res.render('vacations', context)\n  })\n}\n```", "```\napp.get('/set-currency/:currency', handlers.setCurrency)\n```"]