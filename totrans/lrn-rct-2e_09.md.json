["```\nexport default function SiteLayout({\n  children,\n  menu = c => null\n}) {\n  return (\n    <div className=\"site-container\">\n      <div>{menu}</div>\n      <div>{children}</div>\n    </div>\n  );\n}\n```", "```\nexport default function App() {\n  return (\n    <SiteLayout menu={<p>Menu</p>}>\n      <>\n        <Callout>Callout</Callout>\n        <h1>Contents</h1>\n        <p>This is the main part of the example layout</p>\n      </>\n    </SiteLayout>\n  );\n}\n```", "```\nimport React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  state = { error: null };\n\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n\n  render() {\n    const { error } = this.state;\n    const { children, fallback } = this.props;\n\n    if (error) return <fallback error={error} />;\n    return children;\n  }\n}\n```", "```\nfunction ErrorScreen({ error }) {\n  //\n  // Here you can handle or track the error before rendering the message\n  //\n\n  return (\n    <div className=\"error\">\n      <h3>We are sorry... something went wrong</h3>\n      <p>We cannot process your request at this moment.</p>\n      <p>ERROR: {error.message}</p>\n    </div>\n  );\n}\n\n<ErrorBoundary fallback={ErrorScreen}>\n  <App />\n</ErrorBoundary>;\n```", "```\n.error {\n  background-color: #efacac;\n  border: double 4px darkred;\n  color: darkred;\n  padding: 1em;\n}\n```", "```\nconst BreakThings = () => {\n  throw new Error(\"We intentionally broke something\");\n};\n```", "```\n  return (\n    <SiteLayout\n      menu={\n        <ErrorBoundary fallback={ErrorScreen}>\n          <p>Site Layout Menu</p>\n          <BreakThings />\n        </ErrorBoundary>\n      }\n    >\n      <ErrorBoundary fallback={ErrorScreen}>\n        <Callout>Callout<BreakThings /></Callout>\n      </ErrorBoundary>\n      <ErrorBoundary fallback={ErrorScreen}>\n        <h1>Contents</h1>\n        <p>this is the main part of the example layout</p>\n      </ErrorBoundary>\n    </SiteLayout>\n```", "```\nrender() {\n  const { error } = this.state;\n  const { children } = this.props;\n\n  if (error && !fallback) return <ErrorScreen error={error} />;\n  if (error) return <fallback error={error} />;\n\n  return children;\n}\n```", "```\n<ErrorBoundary>\n  <h1>&lt;Contents /&gt;</h1>\n  <p>this is the main part of the example layout</p>\n  <BreakThings />\n</ErrorBoundary>\n```", "```\nexport default function Agreement({ onAgree = f => f }) {\n  return (\n    <div>\n      <p>Terms...</p>\n      <p>These are the terms and stuff. Do you agree?</p>\n      <button onClick={onAgree}>I agree</button>\n    </div>\n  );\n}\n```", "```\nimport React from \"react\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nconst SiteLayout = ({ children, menu = c => null }) => {\n  return (\n    <div className=\"site-container\">\n      <div>{menu}</div>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nconst Menu = () => (\n  <ErrorBoundary>\n    <p style={{ color: \"white\" }}>TODO: Build Menu</p>\n  </ErrorBoundary>\n);\n\nconst Callout = ({ children }) => (\n  <ErrorBoundary>\n    <div className=\"callout\">{children}</div>\n  </ErrorBoundary>\n);\n\nexport default function Main() {\n  return (\n    <SiteLayout menu={<Menu />}>\n      <Callout>Welcome to the site</Callout>\n      <ErrorBoundary>\n        <h1>TODO: Home Page</h1>\n        <p>Complete the main contents for this home page</p>\n      </ErrorBoundary>\n    </SiteLayout>\n  );\n}\n```", "```\nimport React, { useState } from \"react\";\nimport Agreement from \"./Agreement\";\nimport Main from \"./Main\";\nimport \"./SiteLayout.css\";\n\nexport default function App() {\n  const [agree, setAgree] = useState(false);\n\n  if (!agree)\n    return <Agreement onAgree={() => setAgree(true)} />;\n\n  return <Main />;\n}\n```", "```\nconst Main = React.lazy(() => import(\"./Main\"));\n```", "```\nimport React, { useState, Suspense, lazy } from \"react\";\nimport Agreement from \"./Agreement\";\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\n\nconst Main = lazy(() => import(\"./Main\"));\n\nexport default function App() {\n  const [agree, setAgree] = useState(false);\n\n  if (!agree)\n    return <Agreement onAgree={() => setAgree(true)} />;\n\n  return (\n    <Suspense fallback={<ClimbingBoxLoader />}>\n      <Main />\n    </Suspense>\n  );\n}\n```", "```\n<ErrorBoundary fallback={ErrorScreen}>\n  <Suspense fallback={<ClimbingBoxLoader />}>\n    <Main />\n  </Suspense>\n</ErrorBoundary>\n```", "```\nimport React from \"react\";\n\nconst loadStatus = () => \"success - ready\";\n\nfunction Status() {\n  const status = loadStatus();\n  return <h1>status: {status}</h1>;\n}\n```", "```\nexport default function App() {\n  return (\n    <ErrorBoundary>\n      <Status />\n    </ErrorBoundary>\n  );\n}\n```", "```\nconst loadStatus = () => {\n  throw new Error(\"something went wrong\");\n};\n```", "```\nconst loadStatus = () => {\n  throw new Promise(resolves => null);\n};\n```", "```\nexport default function App() {\n  return (\n    <Suspense fallback={<GridLoader />}>\n      <ErrorBoundary>\n        <Status />\n      </ErrorBoundary>\n    </Suspense>\n  );\n}\n```", "```\nthrow new Error(\"inspecting errors\");\n```", "```\nthrow \"inspecting errors\";\n```", "```\nthrow new Promise(resolves => null);\n```", "```\nconst loadStatus = () => {\n  console.log(\"load status\");\n  throw new Promise(resolves => setTimeout(resolves, 3000));\n};\n```", "```\nsafe(loadStatus);\n\nfunction safe(fn) {\n  try {\n    fn();\n  } catch (error) {\n    if (error instanceof Promise) {\n      error.then(() => safe(fn));\n    } else {\n      throw error;\n    }\n  }\n}\n```", "```\nconst loadStatus = () => {\n  console.log(\"load status\");\n  throw new Promise(resolves => setTimeout(resolves, 3000));\n};\n\nfunction Status() {\n  const status = loadStatus();\n  return <h1>status: {status}</h1>;\n}\n\nexport default function App() {\n  return (\n    <Suspense fallback={<GridLoader />}>\n      <ErrorBoundary>\n        <Status />\n      </ErrorBoundary>\n    </Suspense>\n  );\n}\n```", "```\nfunction loadStatus() {\n  if (error) throw error;\n  if (response) return response;\n  throw promise;\n}\n```", "```\nconst loadStatus = (function() {\n  let error, promise, response;\n\n  return function() {\n    if (error) throw error;\n    if (response) return response;\n    throw promise;\n  };\n})();\n```", "```\nconst loadStatus = (function() {\n  let error, response;\n  const promise = new Promise(resolves =>\n    setTimeout(resolves, 3000)\n  )\n    .then(() => (response = \"success\"))\n    .catch(e => (error = e));\n  return function() {\n    if (error) throw error;\n    if (response) return response;\n    throw pending;\n  };\n})();\n```", "```\nconst resource = createResource(promise);\nconst result = resource.read();\n```", "```\nfunction createResource(pending) {\n  let error, response;\n  pending.then(r => (response = r)).catch(e => (error = e));\n  return {\n    read() {\n      if (error) throw error;\n      if (response) return response;\n      throw pending;\n    }\n  };\n}\n```", "```\nconst threeSecondsToGnar = new Promise(resolves =>\n  setTimeout(() => resolves({ gnar: \"gnarly!\" }), 3000)\n);\n```", "```\nconst resource = createResource(threeSecondsToGnar);\n\nfunction Gnar() {\n  const result = resource.read();\n  return <h1>Gnar: {result.gnar}</h1>;\n}\n\nexport default function App() {\n  return (\n    <Suspense fallback={<GridLoader />}>\n      <ErrorBoundary>\n        <Gnar />\n      </ErrorBoundary>\n    </Suspense>\n  );\n}\n```", "```\n<ul>\n  <li>blue</li>\n  <li>purple</li>\n  <li>red</li>\n</ul>\n```"]