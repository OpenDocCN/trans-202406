["```\nimport UIKit\n\nclass ListDataSource: NSObject {\n\n}\nextension ListDataSource: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return Book.sampleData.count\n    }\n\n    func tableView(_ tableView: UITableView,\n        cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        // Dequeue a table view cell\n        let cell =\n          tableView.dequeueReusableCell(withIdentifier: \"CatalogTableViewCell\",\n          for: indexPath)\n\n        // Find the correct book based on the row being populated\n        let book = Book.sampleData[indexPath.row]\n\n        // Populate the table view cell title label with the book title\n        cell.textLabel?.text = book.title\n\n        return cell\n    }\n}\n```", "```\nclass CatalogViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Do any additional setup after loading the view\n    }\n}\n```", "```\nclass CatalogViewController: UIViewController {\n\n    // Drag the connection to this line\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Do any additional setup after loading the view\n    }\n}\n```", "```\nclass CatalogViewController: UIViewController {\n\n    @IBOutlet weak var tableView: UITableView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Do any additional setup after loading the view\n    }\n}\n```", "```\nclass CatalogViewController: UIViewController {\n\n    @IBOutlet weak var tableView: UITableView!\n    lazy var dataSource: ListDataSource = {\n        return ListDataSource()\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = dataSource\n    }\n}\n```", "```\n{\n    \"title\": \"...\",\n    \"authors\": [\"...\"],\n    \"isbn\": \"...\",\n    \"pageCount\": 0,\n    \"fiction\": true\n}\n```", "```\n[\n\t{\n\t\t\"title\": \"Fight Club\",\n\t\t\"authors\": [\"Chuck Palahniuk\"],\n\t\t\"isbn\": \"978-0393039764\",\n\t\t\"pageCount\": 208,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"2001: A Space Odyssey\",\n\t\t\"authors\": [\"Arthur C. Clarke\"],\n\t\t\"isbn\": \"978-0451457998\",\n\t\t\"pageCount\": 296,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"Ulysses\",\n\t\t\"authors\": [\"James Joyce\"],\n\t\t\"isbn\": \"978-1420953961\",\n\t\t\"pageCount\": 682,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"Catch-22\",\n\t\t\"authors\": [\"Joseph Heller\"],\n\t\t\"isbn\": \"978-1451626650\",\n\t\t\"pageCount\": 544,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"The Stand\",\n\t\t\"authors\": [\"Stephen King\"],\n\t\t\"isbn\": \"978-0307947307\",\n\t\t\"pageCount\": 1200,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"On The Road\",\n\t\t\"authors\": [\"Jack Kerouac\"],\n\t\t\"isbn\": \"978-0143105466\",\n\t\t\"pageCount\": 416,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"Heart of Darkness\",\n\t\t\"authors\": [\"Joseph Conrad\"],\n\t\t\"isbn\": \"978-1503275928\",\n\t\t\"pageCount\": 78,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"A Brief History of Time\",\n\t\t\"authors\": [\"Stephen Hawking\"],\n\t\t\"isbn\": \"978-0553380163\",\n\t\t\"pageCount\": 212,\n\t\t\"fiction\": false\n\t},\n\t{\n\t\t\"title\": \"Dispatches\",\n\t\t\"authors\": [\"Michael Herr\"],\n\t\t\"isbn\": \"978-0679735250\",\n\t\t\"pageCount\": 272,\n\t\t\"fiction\": false\n\t},\n\t{\n\t\t\"title\": \"Harry Potter and Prisoner of Azkaban\",\n\t\t\"authors\": [\"J.K. Rowling\"],\n\t\t\"isbn\": \"978-0439136365\",\n\t\t\"pageCount\": 448,\n\t\t\"fiction\": true\n\t},\n\t{\n\t\t\"title\": \"Dragons Love Tacos\",\n\t\t\"authors\": [\"Adam Rubin\", \"Daniel Salmieri\"],\n\t\t\"isbn\": \"978-0803736801\",\n\t\t\"pageCount\": 40,\n\t\t\"fiction\": true\n\t}\n]\n```", "```\npublic class Book {\n  private final String mTitle;\n  private final String[] mAuthors;\n  private final String mIsbn;\n  private final int mPageCount;\n  private final boolean mIsFiction;\n  ...\n}\n```", "```\npublic class Book {\n\n  public static final Book[] SAMPLE_DATA = {\n      new Book(\"Fight Club\", new String[]{\"Chuck Palahniuk\"}, \"978-0393039764\", 208, true),\n      new Book(\"2001: A Space Odyssey\", new String[]{\"Arthur C. Clarke\"}, \"978-0451457998\",\n        296, true),\n      new Book(\"Ulysses\", new String[]{\"James Joyce\"}, \"978-1420953961\", 682, true),\n      new Book(\"Catch-22\", new String[]{\"Joseph Heller\"}, \"978-1451626650\", 544, true),\n      new Book(\"The Stand\", new String[]{\"Stephen King\"}, \"978-0307947307\", 1200, true),\n      new Book(\"On The Road\", new String[]{\"Jack Kerouac\"}, \"978-0143105466\", 416, true),\n      new Book(\"Heart of Darkness\", new String[]{\"Joseph Conrad\"}, \"978-1503275928\", 78,\n      true),\n      new Book(\"A Brief History of Time\", new String[]{\"Stephen Hawking\"}, \"978-0553380163\",\n        212, false),\n      new Book(\"Dispatches\", new String[]{\"Michael Herr\"}, \"978-0679735250\", 272, false),\n      new Book(\"Harry Potter and Prisoner of Azkaban\", new String[]{\"J.K. Rowling\"},\n      \"978-0439136365\", 448, true),\n      new Book(\"Dragons Love Tacos\", new String[]{\"Adam Rubin\", \"Daniel Salmieri\"},\n      \"978-0803736801\", 40, true)\n  };\n\n  @SerializedName(\"title\")\n  private String mTitle;\n  @SerializedName(\"authors\")\n  private String[] mAuthors;\n  @SerializedName(\"isbn\")\n  private String mIsbn;\n  @SerializedName(\"pageCount\")\n  private int mPageCount;\n  @SerializedName(\"fiction\")\n  private boolean mIsFiction;\n\n  public Book(String title, String[] authors, String isbn, int pageCount,\n  boolean isFiction) {\n    mTitle = title;\n    mAuthors = authors;\n    mIsbn = isbn;\n    mPageCount = pageCount;\n    mIsFiction = isFiction;\n  }\n\n  public String getTitle() {\n    return mTitle;\n  }\n\n  public void setTitle(String title) {\n    mTitle = title;\n  }\n\n  public String[] getAuthors() {\n    return mAuthors;\n  }\n\n  public void setAuthors(String[] authors) {\n    mAuthors = authors;\n  }\n\n  public String getIsbn() {\n    return mIsbn;\n  }\n\n  public void setIsbn(String isbn) {\n    mIsbn = isbn;\n  }\n\n  public int getPageCount() {\n    return mPageCount;\n  }\n\n  public void setPageCount(int pageCount) {\n    mPageCount = pageCount;\n  }\n\n  public boolean isFiction() {\n    return mIsFiction;\n  }\n\n  public void setFiction(boolean fiction) {\n    mIsFiction = fiction;\n  }\n\n}\n```", "```\nString json = // ... some string represetning multiple Book JSON objects\nBooks books = new Gson().fromJson(json, Books.class);\n```", "```\nnew TypeToken<GENERICIZED_DATA_TYPE>() {\n  // no op\n}.getType();\n```", "```\nstruct Book: Codable {\n    let title: String\n    let authors: [String]\n    let isbn: String\n    let pageCount: Int\n    let fiction: Bool\n}\n```", "```\nclass ListDataSource: NSObject {\n    lazy var data: [Book] = {\n        do {\n            guard let rawCatalogData =\n                try? Data(contentsOf:\n                Bundle.main.bundleURL.appendingPathComponent(\"catalog.json\")) else {\n                return []\n            }\n            return try JSONDecoder().decode([Book].self, from: rawCatalogData)\n        } catch {\n            print(\"Catalog.json was not found or is not decodable.\")\n        }\n        return []\n    }()\n\n}\nextension ListDataSource: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func tableView(_ tableView: UITableView,\n        cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        // Dequeue a table view cell\n        let cell =\n          tableView.dequeueReusableCell(withIdentifier: \"CatalogTableViewCell\",\n          for: indexPath)\n\n        // Find the correct book based on the row being populated\n        let book = data[indexPath.row]\n\n        // Populate the table view cell title label with the book title\n        cell.textLabel?.text = book.title\n\n        return cell\n    }\n}\n```", "```\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n\treturn data.count\n}\n```"]