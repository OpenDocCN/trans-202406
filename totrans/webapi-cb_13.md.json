["```\n<dialog id=\"alert\">\n  <h2>Alert</h2>\n  <p>This is an alert dialog.</p>\n\n  <button type=\"button\" id=\"ok-button\">OK</button>\n</dialog>\n\n<button type=\"button\" id=\"show-dialog\">Show Dialog</button>\n```", "```\n// Select the dialog, its OK button, and the trigger button elements.\nconst dialog = document.querySelector('#alert');\nconst okButton = document.querySelector('#ok-button');\nconst trigger = document.querySelector('#show-dialog');\n\n// Close the dialog when the OK button is clicked.\nokButton.addEventListener('click', () => {\n  dialog.close();\n});\n\n// Show the dialog when the trigger button is clicked.\ntrigger.addEventListener('click', () => {\n  dialog.showModal();\n});\n```", "```\n#alert::backdrop {\n  background: rgba(0, 0, 0, 0.75);\n}\n```", "```\n<dialog id=\"confirm\">\n  <h2>Confirm</h2>\n  <p>Are you sure you want to do that?</p>\n\n  <button type=\"button\" class=\"confirm-button\">Confirm</button>\n  <button type=\"button\" class=\"cancel-button\">Cancel</button>\n</dialog>\n```", "```\nconst dialog = document.querySelector('#confirm');\n\nconfirmButton.addEventListener('click', () => {\n  // Close the dialog with a return value of 'confirm'\n  dialog.close('confirm');\n});\n\ncancelButton.addEventListener('click', () => {\n  // Close the dialog with a return value of 'cancel'\n  dialog.close('cancel');\n});\n\ndialog.addEventListener('cancel', () => {\n  // Canceling with the Escape key doesn't set a return value.\n  // Set it to 'cancel' here so the close event handler will get\n  // the proper value.\n  dialog.returnValue = 'cancel';\n});\n\ndialog.addEventListener('close', () => {\n  if (dialog.returnValue === 'confirm') {\n    // The user clicked the Confirm button.\n    // Perform the action, such as creating or deleting data.\n  } else {\n    // The user clicked the Cancel button or pressed the Escape key.\n    // Don't perform the action.\n  }\n});\n```", "```\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n <dialog id=\"confirm\">\n <h2>Confirm</h2>\n <p><slot></slot></p>\n\n <button type=\"button\" class=\"confirm-button\">Confirm</button>\n <button type=\"button\" class=\"cancel-button\">Cancel</button>\n </dialog>\n`;\n```", "```\nclass ConfirmDialog extends HTMLElement {\n  connectedCallback() {\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(template.content.cloneNode(true));\n\n    this.dialog = shadowRoot.querySelector('dialog');\n    this.dialog.addEventListener('cancel', () => {\n      this.dialog.returnValue = 'cancel';\n    });\n\n    shadowRoot.querySelector('.confirm-button')\n      .addEventListener('click', () => {\n        this.dialog.close('confirm');\n      });\n\n    shadowRoot.querySelector('.cancel-button')\n      .addEventListener('click', () => {\n        this.dialog.close('cancel');\n      });\n  }\n\n  showConfirmation() {\n    this.dialog.showModal();\n\n    return new Promise(resolve => {\n      // Listen for the next close event and resolve the Promise.\n      // Resolve the Promise with a boolean indicating whether or not the\n      // user confirmed.\n      this.dialog.addEventListener('close', () => {\n        resolve(this.dialog.returnValue === 'confirm');\n      }, {\n        // Only listen for the event once, then remove the listener.\n        once: true\n      });\n    });\n  }\n}\n\ncustomElements.define('confirm-dialog', ConfirmDialog);\n```", "```\n<confirm-dialog id=\"confirm-delete\">\n  Are you sure you want to delete this item?\n</confirm-dialog>\n```", "```\nconst confirmDialog = document.querySelector('#confirm-delete');\nif (await confirmDialog.showConfirmation()) {\n  // perform the delete operation\n}\n```", "```\nconfirm-dialog:not(:defined) {\n  display: none;\n}\n```", "```\n<details>\n  <summary>More Info</summary>\n  Here are some extra details that you can toggle.\n</details>\n```", "```\n<details open>\n  <summary>More Info</summary>\n  This content is visible by default.\n</details>\n```", "```\n// Show the content\ndocument.querySelector('details').open = true;\n```", "```\n<button type=\"button\" popovertarget=\"greeting\">Open Popover</button>\n<div popover id=\"greeting\">Hello world!</div>\n```", "```\n<button type=\"button\" id=\"trigger\">Show Popover</button>\n<div id=\"greeting\" popover=\"manual\">Hello World!</div>\n```", "```\nconst trigger = document.querySelector('#trigger');\nconst popover = document.querySelector('#greeting');\ntrigger.addEventListener('click', () => {\n  popover.togglePopover();\n});\n```", "```\n.popover {\n  margin: 0;\n  margin-top: 1em;\n  position: absolute;\n}\n```", "```\n<button type=\"button\" class=\"trigger\" popovertarget=\"popover\">Show Popover</button>\n<div class=\"popover\" popover>\n  This is popover content anchored to the trigger button.\n</div>\n```", "```\nconst popover = document.querySelector('.popover');\nconst trigger = document.querySelector('.trigger');\n\npopover.addEventListener('toggle', event => {\n  // Update the position if the popover is being opened.\n  if (event.newState === 'open') {\n    // Find the position of the trigger element.\n    const triggerRect = trigger.getBoundingClientRect();\n\n    // Since the popover is positioned relative to the viewport,\n    // you need to account for the scroll offset.\n    popover.style.top = `${triggerRect.bottom + window.scrollY}px`;\n    popover.style.left = `${triggerRect.left}px`;\n  }\n});\n```", "```\n#tooltip {\n  margin: 0;\n  margin-top: 1em;\n  position: absolute;\n}\n```", "```\n<button type=\"button\" id=\"trigger\">Hover Me</button>\n<div id=\"tooltip\" popover=\"manual\" role=\"tooltip\">Here is some tooltip content</div>\n```", "```\nconst button = document.querySelector('#trigger');\nconst tooltip = document.querySelector('#tooltip');\n\nfunction showTooltip() {\n  // Find the position of the trigger element.\n  const triggerRect = trigger.getBoundingClientRect();\n\n  // Since the popover is positioned relative to the viewport,\n  // you need to account for the scroll offset.\n  tooltip.style.top = `${triggerRect.bottom + window.scrollY}px`;\n  tooltip.style.left = `${triggerRect.left}px`;\n\n  tooltip.showPopover();\n}\n\n// Show and hide the tooltip in response to mouse events.\nbutton.addEventListener('mouseover', () => {\n  showTooltip();\n});\n\nbutton.addEventListener('mouseout', () => {\n  tooltip.hidePopover();\n});\n\n// For keyboard accessibility, also show and hide the tooltip\n// in response to focus events.\nbutton.addEventListener('focus', () => {\n  showTooltip();\n});\n\nbutton.addEventListener('blur', () => {\n  tooltip.hidePopover();\n});\n```", "```\nasync function getPermission() {\n  // If the user has already explicitly denied permission, don't ask again.\n  if (Notification.permission !== 'denied') {\n    // The result of this permission request will update the Notification.permission\n    // property.\n    // The permission request returns a Promise.\n    await Notification.requestPermission();\n  }\n\n  // Only show a notification if Notification.permission is 'granted'.\n  return Notification.permission === 'granted';\n}\n```", "```\nif (await getPermission()) {\n  new Notification('Hello!', {\n    body: 'This is a test notification'\n  });\n}\n```"]