["```\nawait Storage.put('test.txt', 'Hello')\n```", "```\n/* Private level access */\nawait Storage.put('test.txt', 'Private Content', {\n  level: 'private',\n  contentType: 'text/plain'\n})\n\n/* Protected level access */\nawait Storage.put('test.txt', 'Protected Content', {\n  level: 'protected',\n  contentType: 'text/plain'\n})\n```", "```\ntype Post @model {\n  id: ID!\n  title: String!\n  imageKey: String!\n}\n```", "```\n~ npx create-react-app photo-app\n~ cd photo-app\n```", "```\n~ npm install antd uuid aws-amplify @aws-amplify/ui-react\n```", "```\n~ amplify init\n\n# Follow the steps to give the project a name, environment name, and set the\n  default text editor.\n# Accept defaults for everything else and choose your AWS Profile.\n```", "```\n~ amplify add auth\n\n? Do you want to use the default authentication and security configuration?\n  Default configuration\n? How do you want users to be able to sign in? Username\n? Do you want to configure advanced settings? No, I am done.\n```", "```\n~ amplify add api\n\n? Please select from one of the below mentioned services: GraphQL\n? Provide API name: photoapp\n? Choose an authorization type for the API: Amazon Cognito User Pool\n? Do you want to configure advanced settings for the API? No\n? Do you have an annotated GraphQL schema? N\n? Do you want a guided schema creation? Y\n? What best describes your project: Single object with fields\n? Do you want to edit the schema now? Yes\n```", "```\ntype Post @model {\n  id: ID!\n  title: String!\n  imageKey: String!\n}\n```", "```\n~ amplify add storage\n\n? Please select from one of the below mentioned services: Content\n? Please provide a friendly name for your resource that will be used to label\n  this category in the project: photos\n? Please provide bucket name: <your_unique_bucket_name>\n? Who should have access: Auth users only\n? What kind of access do you want for Authenticated users? Choose all\n  (create / update, read, & delete)\n? Do you want to add a Lambda Trigger for your S3 Bucket? N\n```", "```\n~ amplify push\n```", "```\nimport 'antd/dist/antd.css'\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n```", "```\n~ cd src\n~ touch Posts.js CreatePost.js\n~ cd ..\n```", "```\n/* src/App.js */\nimport React, { useState } from 'react';\nimport { Radio } from 'antd'\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react'\nimport Posts from './Posts'\nimport CreatePost from './CreatePost'\n\nfunction App() {\n  const [viewState, updateViewState] = useState('viewPosts')\n\n  return (\n    <div style={container}>\n      <h1>Photo App</h1>\n      <Radio.Group\n        value={viewState}\n        onChange={e => updateViewState(e.target.value)}\n      >\n        <Radio.Button value=\"viewPosts\">View Posts</Radio.Button>\n        <Radio.Button value=\"addPost\">Add Post</Radio.Button>\n      </Radio.Group>\n      {\n        viewState === 'viewPosts' ? (\n          <Posts />\n        ) : (\n          <CreatePost updateViewState={updateViewState} />\n        )\n      }\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nconst container = { width: 500, margin: '0 auto', padding: 50 }\n\nexport default withAuthenticator(App);\n```", "```\n/* src/CreatePost.js */\nimport React, { useState } from 'react';\nimport { Button, Input } from 'antd'\nimport { v4 as uuid } from 'uuid'\nimport { createPost } from './graphql/mutations'\nimport { API, graphqlOperation, Storage } from 'aws-amplify'\n\nconst initialFormState = {\n  title: '',\n  image: {}\n}\n\nfunction CreatePost({ updateViewState }) {\n  const [formState, updateFormState] = useState(initialFormState)\n\n  function onChange(key, value) {\n    updateFormState({ ...formState, [key]: value })\n  }\n\n  function setPhoto(e) {\n    if (!e.target.files[0]) return\n    const file = e.target.files[0]\n    updateFormState({ ...formState, image: file })\n  }\n\n  async function savePhoto() {\n    const { title, image } = formState\n    if (!title || !image.name ) return\n\n    const imageKey =\n      uuid() + formState.image.name.replace(/\\s/g, '-').toLowerCase()\n    await Storage.put(imageKey, formState.image)\n    const post = { title, imageKey }\n    await API.graphql(graphqlOperation(createPost, { input: post }))\n    updateViewState('viewPosts')\n  }\n\n  return (\n    <div>\n      <h2 style={heading}>Add Photo</h2>\n      <Input\n        onChange={e => onChange('title', e.target.value)}\n        style={withMargin}\n        placeholder=\"Title\"\n      />\n      <input\n        type='file'\n        onChange={setPhoto}\n        style={button}\n      />\n      <Button\n       style={button}\n       type=\"primary\"\n       onClick={savePhoto}\n      >\n      Save Photo</Button>\n    </div>\n  );\n}\n\nconst heading = { margin: '20px 0px' }\nconst withMargin = { marginTop: 10 }\nconst button = { marginTop: 10 }\n\nexport default CreatePost\n```", "```\n/* src/Posts.js */\nimport React, { useReducer, useEffect } from 'react';\nimport { listPosts } from './graphql/queries'\nimport { onCreatePost } from './graphql/subscriptions'\nimport { API, graphqlOperation, Storage } from 'aws-amplify'\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'SET_POSTS':\n      return  action.posts\n    case 'ADD_POST':\n      return [action.post, ...state]\n    default:\n      return state\n  }\n}\n\nasync function getSignedPosts(posts) {\n  const signedPosts = await Promise.all(\n    posts.map(async item => {\n      const signedUrl = await Storage.get(item.imageKey)\n      item.imageUrl = signedUrl\n      return item\n    })\n  )\n  return signedPosts\n}\n\nfunction Posts() {\n  const [posts, dispatch] = useReducer(reducer, [])\n\n  useEffect(() => {\n    fetchPosts()\n\n    const subscription = API.graphql(graphqlOperation(onCreatePost)).subscribe({\n      next: async post => {\n        const newPost = post.value.data.onCreatePost\n        const signedUrl = await Storage.get(newPost.imageKey)\n        newPost.imageUrl = signedUrl\n        dispatch({ type: 'ADD_POST', post: newPost })\n      }\n    })\n    return () => subscription.unsubscribe()\n  }, [])\n\n  async function fetchPosts() {\n    const postData = await API.graphql(graphqlOperation(listPosts))\n    const { data: { listPosts: { items }}} = postData\n    const signedPosts = await getSignedPosts(items)\n    dispatch({ type: 'SET_POSTS', posts: signedPosts })\n  }\n\n  return (\n    <div>\n      <h2 style={heading}>Posts</h2>\n      {\n        posts.map(post => (\n          <div key={post.id} style={postContainer}>\n            <img style={postImage} src={post.imageUrl} />\n            <h3 style={postTitle}>{post.title}</h3>\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nconst postContainer = {\n  padding: '20px 0px 0px',\n  borderBottom: '1px solid #ddd'\n}\nconst heading = { margin: '20px 0px' }\nconst postImage = { width: 400 }\nconst postTitle = { marginTop: 4 }\n\nexport default Posts\n```", "```\n~ npm start\n```"]