["```\n/**\n * Starts listening for speech. When speech is recognized, it is appended\n * to the given text field's value.\n * Recognition continues until the returned recognition object is stopped.\n *\n * @param textField A text field to append to\n * @returns The recognition object\n */\nfunction startDictation(textField) {\n  // Only proceed if this browser supports speech recognition.\n  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n    const SpeechRecognition = window.SpeechRecognition\n    || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true;\n\n    recognition.addEventListener('result', event => {\n      const result = event.results[event.resultIndex];\n      textField.value += result[0].transcript;\n    });\n\n    recognition.addEventListener('error', event => {\n      console.log('error', event);\n    });\n\n    recognition.start();\n\n    // Return the recognition object so recognition\n    // can be stopped later (like when the user clicks a toggle button).\n    return recognition;\n  }\n}\n```", "```\n/**\n * Listens for speech and performs speech recognition.\n * Assumes that speech recognition is available in the current browser.\n * @returns a Promise that is resolved with the recognized transcript when speech\n * is recognized, and rejects on an error.\n */\nfunction captureSpeech() {\n  const speechPromise = new Promise((resolve, reject) => {\n    const SpeechRecognition = window.SpeechRecognition ||\n      window.webkitSpeechRecognition;\n\n    // If this browser doesn't support speech recognition, reject the Promise.\n    if (!SpeechRecognition) {\n      reject('Speech recognition is not supported on this browser.')\n    }\n\n    const recognition = new SpeechRecognition();\n\n    // Resolve the promise on successful speech recognition.\n    recognition.addEventListener('result', event => {\n      const result = event.results[event.resultIndex];\n      resolve(result[0].transcript);\n    });\n\n    recognition.addEventListener('error', event => {\n      // Reject the promise if there was a recognition error.\n      reject(event);\n    });\n\n    // Start listening for speech.\n    recognition.start();\n  });\n\n  // Whether there was successful speech recognition or an error, make sure\n  // the recognition engine has stopped listening.\n  return speechPromise.finally(() => {\n    recognition.stop();\n  });\n}\n```", "```\nconst spokenText = await captureSpeech();\n```", "```\nfunction showVoices() {\n  speechSynthesis.getVoices().forEach(voice => {\n    console.log('Voice:', voice.name);\n  });\n}\n\n// Some browsers load the voice list asynchronously. In these browsers,\n// the voices are available when the voiceschanged event is triggered.\nspeechSynthesis.addEventListener('voiceschanged', () => showVoices());\n\n// Show the voices immediately in those browsers that support it.\nshowVoices();\n```", "```\nfunction speakText(text) {\n  const utterance = new SpeechSynthesisUtterance(text);\n  speechSynthesis.speak(utterance);\n}\n```", "```\n// Assuming the voices are available now\nconst aliceVoice = speechSynthesis\n  .getVoices()\n  .find(voice => voice.name === 'Alice');\n\nfunction speakText(text) {\n  const utterance = new SpeechSynthesisUtterance(text);\n\n  // Make sure the \"Alice\" voice was found.\n  if (aliceVoice) {\n    utterance.voice = aliceVoice;\n  }\n\n  speechSynthesis.speak(utterance);\n}\n```", "```\nconst utteranceLow =\nnew SpeechSynthesisUtterance('This is spoken slowly in a low tone');\nutterance.pitch = 0.1;\nutterance.rate = 0.5;\nspeechSynthesis.speak(utterance);\n\nconst utteranceHigh =\nnew SpeechSynthesisUtterance('This is spoken quickly in a high tone');\nutterance.pitch = 2;\nutterance.rate = 2;\nspeechSynthesis.speak(utterance);\n```", "```\ndocument.addEventListener('visibilitychange', () => {\n  // speechSynthesis.speaking is true:\n  // (1) when speech is currently being spoken\n  // (2) when speech was being spoken, but is paused\n  if (speechSynthesis.speaking) {\n    if (document.visibilityState === 'hidden') {\n      speechSynthesis.pause();\n    } else if (document.visibilityState === 'visible') {\n      speechSynthesis.resume();\n    }\n  }\n});\n```"]