- en: Chapter 15\. Welcome and Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comparing Native Development to Cross-Platform Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s state some facts and draw some initial conclusions to be clear.
  prefs: []
  type: TYPE_NORMAL
- en: When we say “native development,” we mean programming for each platform in the
    language, framework, and IDE supported and promoted by the maintainers of the
    platform. The platforms are Android and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: For Android, the maintainer is Google. We say “maintainer” rather than “owner”
    because it is really open source—in fact, Amazon’s FireOS is a fork of the Android
    OS. Sometimes, we refer to the Android Open Source Project with the acronym AOSP.
    The language is Java, Kotlin, or a mix (Kotlin generates Java bytecode; as far
    as the runtime is concerned, there’s no difference). You could technically create
    an Android app in any language that produced Java byte code—in fact, one of our
    friends once wrote an Android app completely in Scala. That said, we’re only using
    Java and Kotlin in this book. The framework doesn’t have a specific name and is
    generally just referred to as “the Android framework.”
  prefs: []
  type: TYPE_NORMAL
- en: When we say “native development,” we do *not* mean native in the context you
    might see *within* a framework, which would indicate either the system-provided
    functionality like the system clock (surprisingly important), thread, or filesystem
    implementations, etc. We also do not mean “native” in the sense of the Android
    Native Development Kit (aka Android NDK), which allows you to invoke code written
    in C or C++ from within an `Activity` or `Service`.
  prefs: []
  type: TYPE_NORMAL
- en: So with that established, let’s compare some cross-platform tools. There are
    many different products available for cross-platform development, but really only
    a few approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Web-Based
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Products like PhoneGap allow a developer to write HTML, CSS, and JavaScript
    to create web pages that are rendered using web-based view components in each
    platform. We have found that while this is certainly simpler in the sense that
    there is only a single codebase (in theory) and these technologies and languages
    are well-known and well-supported, the reality is that very seldom can you actually
    get away with a single codebase—the idiosyncrasies of each platform often require
    a lot of conditional logic for each branch. It can also be difficult to keep up
    with updates or additions to each native development framework.
  prefs: []
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of other products that aim to simplify cross-platform development.
    Google has a tool called Flutter, which uses the Dart language and its own kernel
    to create both Android and iOS apps from the same codebase and, since it’s not
    relying on existing frameworks, is able to run apps at double the standard framerate,
    from 60 to 120 frames per second. On devices powerful enough to support this,
    scrolling can feel almost *physical*—as if you were actually dragging a piece
    of paper along a smooth surface. The downside of Flutter is that it’s almost impossible
    to really have a single uniform codebase for both platforms—Android users expect
    different widgets, reactions to input, transitions, etc., than iOS users, and
    vice versa. Similarly, by not taking advantage of the Android or Cocoa installations
    already on the device, the size a Flutter app requires is almost always going
    to be markedly larger than a natively developed app.
  prefs: []
  type: TYPE_NORMAL
- en: Another approach—this one pioneered by Facebook—is React Native. React Native
    uses Facebook’s proprietary flavor of JavaScript to create apps in both platforms
    from a single codebase. Besides some of the drawbacks mentioned earlier, you’re
    ceding a large portion of control of your app to an entirely unrelated third party
    (Facebook). If Facebook wants to start grabbing metrics completely transparently
    to you as the developer, there’s not much you could do about it. I’m in no way
    suggesting it does, or ever will, do something like this; it’s simply a heavy-handed
    example of one of the costs associated with cross-platform tools that might not
    be immediately available.
  prefs: []
  type: TYPE_NORMAL
- en: There are other tools, and we as the authors don’t want to waste our time or
    your criticizing some really amazing work done by others to fill this gap. We
    just want you to understand why we genuinely believe that side-by-side development
    in each platform—using each platform’s language and framework and toolsets, etc.,
    can not only provide tremendous benefit, but also does not in our opinion double
    the cost or time or even investment of attention. As we’ve tried to show throughout
    this book, there really is a lot of similarity between the two platforms, and
    writing a single application for each platform using native tools doesn’t have
    to be as onerous a task as you might think.
  prefs: []
  type: TYPE_NORMAL
- en: Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to work with Android and iOS, we first need to get our environments
    set up. Thankfully, nothing prevents both Android Studio and Xcode from being
    installed on a single machine. Android Studio can be installed on a number of
    platforms, but because we’re using Xcode, Apple’s IDE for iOS development, we’ll
    need to use a machine capable of running macOS for Xcode. Let’s get set up for
    Android development first.
  prefs: []
  type: TYPE_NORMAL
- en: Android Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point in Android development, we’ve managed to move almost all our
    processes to a single IDE: Android Studio. This is supported and recommended by
    Google, the Android maintainer. Technically, it’s certainly possible to do it
    without Android Studio, but that’s a fairly advanced topic and should probably
    be used only in very specific scenarios, but we have seen it done (it was messy).
    For now, let’s assume you’re going to go along, and start with Android Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to get rolling. For Android, installation runs directly into new
    project creation, so we’ll roll the whole process into a single set of instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Set up Android Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At one time, setting up an Android environment was pretty complicated and involved
    multiple moving parts. With the advent *and maturity* of Android Studio (the recommended
    IDE for Android development), it’s become almost trivial. It even comes with an
    embedded JDK (Java Development Kit), so it’s really just one download and initial
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, Android Studio could be downloaded at *[*https://developer.android.com/studio*](https://developer.android.com/studio)*,
    but feel free to just search the web for “Download Android Studio” if you’re a
    reader in some far-flung future where URLs have been replaced by robots.
  prefs: []
  type: TYPE_NORMAL
- en: Once Android Studio is downloaded, launch it! We’ll lay out the sequence between
    download and first run as it happened at the time of this writing, summer 2019\.
    This sequence may change in the future, but presumably the basic premise will
    remain the same and generally speaking will provide options that won’t directly
    affect development. Use your best judgment if what you see on your screen deviates
    from this walk-through.
  prefs: []
  type: TYPE_NORMAL
- en: The program may ask you to import settings from a previous installation; if
    this is your first time installing, skip the import step and continue to [Figure 15-1](#figures_android_setup_import_settings).
  prefs: []
  type: TYPE_NORMAL
- en: '![Import Settings Screen](assets/nmdv_1501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-1\. Import settings screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Android Studio should start the initialization process now. Watch the loading
    bar for progress. When that’s complete, you may see a welcome screen, as shown
    in [Figure 15-2](#figures_android_setup_welcome_screen).
  prefs: []
  type: TYPE_NORMAL
- en: '![Welcome Screen](assets/nmdv_1502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-2\. Welcome screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Then you can choose an install type, as shown in [Figure 15-3](#figures_android_setup_install_type).
  prefs: []
  type: TYPE_NORMAL
- en: '![Install Type](assets/nmdv_1503.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-3\. Install type
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Just pick Standard for now. You can make customizations later.
  prefs: []
  type: TYPE_NORMAL
- en: You may be prompted to select a light, or dark, theme for the IDE, as shown
    in [Figure 15-4](#figures_android_setup_select_theme).
  prefs: []
  type: TYPE_NORMAL
- en: '![Select Theme](assets/nmdv_1504.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-4\. Select theme
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Ideally, at this point you’ll just need to verify your previous choices, as
    shown in [Figure 15-5](#figures_android_setup_verify).
  prefs: []
  type: TYPE_NORMAL
- en: '![Verify Settings](assets/nmdv_1505.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-5\. Verify settings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click Finish if you’re satisfied, and you’ll see Android Studio contact various
    servers to update its components, as shown in [Figure 15-6](#figures_android_setup_download_components).
  prefs: []
  type: TYPE_NORMAL
- en: '![Install Components](assets/nmdv_1506.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15-6\. Install components
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To enable Java 8 features, which are used throughout this book, add the following
    to your module-level `build.gradle` file (code block from the Android developer
    docs):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once that’s complete, you’ll immediately be taken to the New Project flow. From
    here, this is the same process you’ll use when you create your next and subsequent
    projects in Android Studio, so we’ll do a deep dive into this workflow in [Chapter 16](ch16.html#app_project).
  prefs: []
  type: TYPE_NORMAL
- en: For now, you’ve got your development environment set up and ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: iOS Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode is the development environment created and maintained by Apple that’s
    used to build iOS (and macOS) applications, libraries, and projects. It’s a very
    full-featured application that’s been around for a long time in various forms.
    Xcode itself has been around through the transition from PowerPC desktops to Intel-based
    processers in the mid-2000s to ARM-based iOS devices starting with the launch
    of the iPhone; it was there in the days of Objective-C and in the nascent moments
    of Swift. It’s an amazing piece of software that will be delight and frustrate
    you to no end.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode is one of those delightful moments, thankfully.
  prefs: []
  type: TYPE_NORMAL
- en: Set up and install Xcode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install Xcode, go to the macOS App Store that’s installed by default on every
    macOS machine. Search for “Xcode,” and once you’ve found the right application
    by Apple, click Install to install it on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: This book was written with Xcode 11 and Swift 5 in mind. Xcode 11 was launched
    in September 2019\. Generally speaking, Xcode doesn’t change much between versions,
    so if you are on an older or newer version of Xcode, it’s possible you might have
    to hunt for commands that have changed names but are still, fundamentally, the
    same operation.
  prefs: []
  type: TYPE_NORMAL
- en: Once you open up Xcode for the first time, you’ll be prompted to install additional
    components that add command-line tools to your environment. We definitely recommend
    you install these tools to make life a little easier in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Apple Developer account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’d like, you can create an account and pay $99 to be part of the Apple
    Developer Program. However, this is necessary only if you’re planning on distributing
    your app. If you’re just looking to practice building apps, you don’t need to
    pay for that just yet. You can still build your app and install it on your own
    development device if you connect it to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this introductory chapter, we’ve covered a lot of ground. We learned
    about the reasons why we believe in true, native development over cross-platform
    apps. The amount of time saved in developing shared code is often lost due to
    the amount of extra time spent working around incomplete vendor functionality,
    the separate code necessary for different user interface behavior, and the opportunity
    cost in waiting for third-party library support for new platform functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We also spent some time getting each environment set up and ready for development.
    We installed Android Studio and Xcode on our machines. Now, it looks like we’re
    ready to get rolling and start building our first app. But first, let’s learn
    a little bit about what we’ll be building in the next chapter.
  prefs: []
  type: TYPE_NORMAL
