- en: Chapter 8\. Exploring Docker Compose
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。探索Docker Compose
- en: At this point, you should have a good feel for the `docker` command and how
    to use it to build, launch, monitor, and debug your applications. Once you are
    comfortable working with individual containers, it won’t be long before you’ll
    want to share your projects and start building more complex projects that require
    multiple containers to function properly. This is particularly the case in development
    environments, where running a whole stack of containers can easily simulate many
    production environments on your local machine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您应该已经对`docker`命令有了良好的掌握，并且知道如何使用它来构建、启动、监视和调试您的应用程序。一旦您熟悉了单个容器的工作方式，不久您将想要分享您的项目，并开始构建更复杂的项目，这些项目需要多个容器才能正常运行。特别是在开发环境中，运行一整套容器可以轻松地模拟许多生产环境在您的本地机器上。
- en: If you’re running a whole stack of containers, however, every container needs
    to be run with the proper setup to ensure that the underlying application is configured
    correctly and will run as expected. Getting these settings correct every time
    can be challenging, especially when you are not the person who originally wrote
    the application. To help with this during development, people often resort to
    trying to write shell scripts that can build and run multiple containers consistently.
    Although this works, it can become difficult to understand for a newcomer and
    hard to maintain as the project changes over time. It’s also not necessarily repeatable
    between projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您正在运行一整套容器，每个容器都需要使用正确的设置来确保底层应用程序被正确配置并按预期运行。每次都正确设置这些参数可能很具有挑战性，特别是当您不是最初编写应用程序的人时。为了在开发过程中提供帮助，人们通常会尝试编写可以一致构建和运行多个容器的shell脚本。尽管这样做是有效的，但对于新手来说可能难以理解，并且随着项目的变化难以维护。在不同项目之间也不一定可重复。
- en: To help address this problem, Docker, Inc., released a tool primarily aimed
    at developers called Docker Compose. This tool is included with Docker Desktop,
    but you can also install it by following the [online installation directions](https://docs.docker.com/compose/install).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Docker公司发布了一个主要面向开发人员的工具，称为Docker Compose。该工具包含在Docker Desktop中，但您也可以按照[在线安装说明](https://docs.docker.com/compose/install)安装它。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Compose was originally a separate application written in Python that
    was run using the command `docker-compose`. This command is referred to as Docker
    Compose version 1 and has recently been replaced with Docker Compose version 2\.
    Docker Compose v2 was completely rewritten in Go, as a Docker client plug-in.
    If `docker compose version` returns a result, then you have the plug-in installed.
    If not, we highly recommend that you take a little time to install it now.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose最初是一个用Python编写的独立应用程序，通过`docker-compose`命令运行。这个命令被称为Docker Compose版本1，并最近被Docker
    Compose版本2取代。Docker Compose v2完全重写为Go语言，作为Docker客户端插件。如果`docker compose version`返回结果，则表示您已安装了插件。如果没有，请务必立即安装。
- en: Docker Compose is an incredibly useful tool that can streamline all sorts of
    development tasks that have traditionally been very cumbersome and error prone.
    It can easily be leveraged to help developers quickly spin up complicated application
    stacks, compile applications without the need for setting up complex local development
    environments, and much more.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose是一个非常有用的工具，可以简化传统上非常繁琐和容易出错的各种开发任务。它可以轻松帮助开发人员快速启动复杂的应用程序堆栈，编译应用程序而无需设置复杂的本地开发环境，等等。
- en: 'In this chapter, we’ll do a run-through of how to use Compose to its best advantage.
    We’ll be using a GitHub repository in all of the following examples. If you want
    to run the examples as we go through them, you should run the following command
    to download the code, if you didn’t already do that in [Chapter 6](ch06.html#exploring_docker):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何最大限度地利用Compose。在所有后续示例中，我们将使用GitHub存储库。如果您想在我们进行示例时运行示例，请运行以下命令下载代码，如果您尚未在[第6章](ch06.html#exploring_docker)中执行此操作：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the example, shell script and *docker-compose.yaml* files below some lines
    have been truncated to fit in the margins. Make sure that you use the files from
    this Git repository if you plan to try these examples yourself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，下面的一些行被截断以适应页面边距的shell脚本和*docker-compose.yaml*文件。如果您打算自己尝试这些示例，请确保使用此Git存储库中的文件。
- en: This repository contains the configuration we’ll need to launch a complete web
    service that includes a MongoDB datastore, the open source Rocket.Chat communications
    server, a Hubot [ChatOps](https://goo.gl/hKT3QW) bot, and a `zmachine-api` instance
    for a little surprise entertainment value.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仓库包含我们启动完整 Web 服务所需的配置，包括一个 MongoDB 数据存储、开源的 Rocket.Chat 通讯服务器、一个 Hubot [ChatOps](https://goo.gl/hKT3QW)
    机器人，以及一个 `zmachine-api` 实例，提供一些令人惊喜的娱乐价值。
- en: Configuring Docker Compose
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Docker Compose
- en: Before we dive into using the `docker compose` command, it is useful to see
    the kind of ad hoc tooling it replaces. So let’s take a moment to look at a shell
    script that could be used to build and deploy a local copy of our service for
    development and local testing via Docker. This output is long and detailed, but
    it’s important to prove the point about why Docker Compose is a huge leap over
    shell scripting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入使用 `docker compose` 命令之前，看一下使用 shell 脚本构建和部署本地服务的即兴工具是很有用的。这个输出很长，也很详细，但重要的是要证明
    Docker Compose 为什么是对 shell 脚本的巨大飞跃。
- en: Warning
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: We do not recommend running this shell script. It is simply an example, and
    in your environment, it may not work or may leave things in an odd state.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不建议运行这个 shell 脚本。这只是一个示例，在你的环境中可能无法正常工作，或者会使事情变得很奇怪。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At this point, you can probably follow most of this script pretty easily. As
    you may already have noticed, this is a hassle to read, is not very flexible,
    will be a pain to edit, and might fail unexpectedly in several places. If we were
    to follow shell script best practices and handle all the possible errors here
    in an effort to guarantee that it was repeatable, it would also be two to three
    times as long as it already is. Without a lot of work extracting common functionality
    for error handling, you’d also have to rewrite much of that logic every time you
    have a new project like this. This is not a very good way to approach a process
    that you need to work every time you use it. This is where good tooling comes
    in. You can accomplish the same thing with Docker Compose while also making it
    significantly more repeatable and easier to read, understand, and maintain.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到了这一步，你可能可以轻松地跟随这个脚本的大部分内容。正如你可能已经注意到的，这读起来很麻烦，不太灵活，编辑起来也很痛苦，在几个地方可能会意外失败。如果我们遵循
    shell 脚本的最佳实践，并在此处理所有可能的错误，以确保它是可重复的，那么它的长度也会是现在的两到三倍。而且，如果不花费大量工作来提取常见功能进行错误处理，每次像这样有一个新项目时，你也需要重写大部分逻辑。这并不是处理你每次使用时都需要工作的流程的好方法。这就是好工具的作用所在。你可以通过
    Docker Compose 实现相同的效果，同时使其更加可重复，并且更易于阅读、理解和维护。
- en: 'In contrast to this messy shell script, which is very repetitive and prone
    to breaking, Docker Compose is typically configured with a single, declarative
    [YAML](https://yaml.org) file for each project, named *docker-compose.yaml*. This
    configuration file is very easy to read and will work in a very repeatable fashion
    so that each user has the same experience when they run it. Here you can see an
    example *docker-compose.yaml* file that could be used to replace the preceding
    brittle shell script:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与这个混乱的、很容易重复出错的 shell 脚本相比，Docker Compose 通常通过一个单一的、声明性的 [YAML](https://yaml.org)
    文件来配置每个项目，命名为 *docker-compose.yaml*。这个配置文件非常容易阅读，并且能够以非常可重复的方式工作，使得每个用户在运行时都有相同的体验。在这里，你可以看到一个示例
    *docker-compose.yaml* 文件，可以用来替换上述脆弱的 shell 脚本：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The *docker-compose.yaml* file makes it easy to describe all the important requirements
    for each of your services and how they need to communicate with one another. And
    we get a lot of validation and logic checking for free that we didn’t even have
    time to write into our shell script and that we’d probably get wrong on occasion,
    no matter how careful we are.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*docker-compose.yaml* 文件使得描述每个服务的所有重要需求及其彼此之间如何通信变得非常容易。而且，我们得到了很多验证和逻辑检查，这些甚至在我们的
    shell 脚本中也没有时间编写，而且我们可能会偶尔出错，无论我们多么小心。'
- en: 'So, what did we tell Compose to do in that YAML file? The first line of our
    file simply tells Docker Compose what version of the [Compose configuration language](https://docs.docker.com/compose/compose-file)
    this file was designed for:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们在那个 YAML 文件中告诉 Compose 做了什么呢？我们文件的第一行简单地告诉 Docker Compose 这个文件是为哪个版本的 [Compose
    配置语言](https://docs.docker.com/compose/compose-file) 设计的：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The rest of our document is divided into two sections: `services` and `networks`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的文档其余部分分为两个部分：`services` 和 `networks`。
- en: 'For starters, let’s take a quick look at the `networks` section. In this *docker-compose.yaml*
    file, we are defining a single, named Docker network:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们快速查看 `networks` 部分。在这个 *docker-compose.yaml* 文件中，我们定义了一个单一命名的 Docker 网络：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a very simple configuration that tells Docker Compose to create a single
    network, named `botnet`, using the (default) bridge driver, which will bridge
    the Docker network with the host’s networking stack.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的配置，告诉 Docker Compose 创建一个名为 `botnet` 的单一网络，使用（默认的）桥接驱动程序，它将 Docker
    网络与主机的网络堆栈桥接。
- en: 'The `services` section is the most important part of the configuration and
    tells Docker Compose what applications you want to launch. Here, the `services`
    section defines five services: `mongo`, `mongo-init-replica`, `rocketchat`, `zmachine`,
    and `hubot`. Each named service then contains sections that tell Docker how to
    build, configure, and launch that service.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`services` 部分是配置的最重要部分，告诉 Docker Compose 您要启动哪些应用程序。在这里，`services` 部分定义了五个服务：`mongo`、`mongo-init-replica`、`rocketchat`、`zmachine`
    和 `hubot`。然后，每个命名服务都包含部分，告诉 Docker 如何构建、配置和启动该服务。'
- en: 'If you take a look at the `mongo` service, you will see that the first subsection
    is called `build` and contains a `context` key. This informs Docker Compose that
    it can build this image and that the files required for the build are located
    in the *../../mongodb/docker* directory, which is two levels above the directory
    containing the *docker-compose.yaml* file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看 `mongo` 服务，您会发现第一个子节称为 `build`，其中包含一个 `context` 键。这告知 Docker Compose 可以构建此镜像，并且构建所需的文件位于
    *../../mongodb/docker* 目录中，这是比包含 *docker-compose.yaml* 文件的目录高两级的目录：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you look at the *Dockerfile* in the *mongodb/docker* directory, you will
    see this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看 *mongodb/docker* 目录中的 *Dockerfile*，您将看到这个：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Take a moment to look at the `HEALTHCHECK` line. This tells Docker what command
    should be run to check the health of the container. Docker will not take action
    based on this health check, but it will report the health so that other things
    can make use of this information. If you are curious, feel free to take a look
    at the `docker-healthcheck` script in the *mongodb/docker* directory.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下 `HEALTHCHECK` 行。这告诉 Docker 应运行哪个命令来检查容器的健康状况。Docker 不会根据此健康检查采取行动，但它会报告健康状况，以便其他组件可以利用这些信息。如果您感兴趣，请随时查看
    *mongodb/docker* 目录中的 `docker-healthcheck` 脚本。
- en: 'The next setting, `image`, defines the image tag that you want either to apply
    to your build or to download (if you’re not building an image) and then run:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的设置 `image` 定义了要应用于构建或下载（如果不构建镜像）并运行的镜像标签：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the `restart` option, you tell Docker when you want it to restart your
    containers. In most cases, you’ll want Docker to restart your containers any time
    that you have not specifically stopped them:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `restart` 选项，您告诉 Docker 您希望它何时重新启动您的容器。在大多数情况下，您希望 Docker 在您没有明确停止它们时重新启动您的容器：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, you will see an `environment` section. This is where you can define any
    environment variables that you want to pass into your container:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到一个 `environment` 部分。这是您可以定义要传递到容器中的任何环境变量的地方：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The final subsection for the `mongo` service, `networks`, tells Docker Compose
    which network this container should be attached to:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `mongo` 服务的最后一个子节 `networks`，告诉 Docker Compose 应将此容器附加到哪个网络：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At this point, let’s jump down to the `rocketchat` service. This service does
    not have a `build` subsection; instead, it only defines an image tag that tells
    Docker Compose that it cannot build this image and must instead try to pull and
    launch a preexisting Docker image with the defined tag.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到 `rocketchat` 服务。此服务没有 `build` 子节；相反，它只定义了一个镜像标签，告诉 Docker Compose 不能构建此镜像，必须尝试拉取并启动具有定义标签的现有
    Docker 镜像。
- en: The first new subsection that you will notice in this service is called `volumes`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在此服务中注意到的第一个新子节称为 `volumes`。
- en: 'A lot of services have at least some data that should be persisted during development,
    despite the ephemeral nature of containers. To accomplish this, it is easiest
    to mount a local directory into the containers. The `volumes` section allows you
    to list all the local directories that you would like to have mounted into a container,
    and define where they go. This command will bind-mount *../rocketchat/data/uploads*
    into */app/uploads* inside the container:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务至少有一些数据在开发过程中应该是持久的，尽管容器的临时性质。为了实现这一点，最简单的方法是将本地目录挂载到容器中。`volumes` 部分允许您列出所有想要挂载到容器中的本地目录，并定义它们的目标位置。此命令将把
    *../rocketchat/data/uploads* 绑定挂载到容器内部的 */app/uploads*：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Warning
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: You may have noticed that we do not define a `volume` for MongoDB, which might
    seem a bit counterintuitive. Although a bind-mounted volume would be useful to
    store the database files in, MongoDB will fail to write to the native Windows
    filesystem, so we leave this out to achieve the broadest compatibility and instead
    let the database write into the container for this development use case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们没有为 MongoDB 定义一个 `volume`，这可能看起来有点违反直觉。尽管绑定挂载的卷对于存储数据库文件很有用，但 MongoDB
    将无法写入到原生的 Windows 文件系统中，因此我们将其排除在外，以实现最广泛的兼容性，并让数据库在此开发用例中写入容器内部。
- en: The primary result of this is that when you delete the container using a command
    like `docker compose down`, all of the data in the MongoDB instance will be lost.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的主要结果是，当您使用像 `docker compose down` 这样的命令删除容器时，MongoDB 实例中的所有数据都将丢失。
- en: We could easily solve this MongoDB storage problem by using a [data volume container](https://docs.docker.com/storage/volumes/#create-and-manage-volumes),
    but this example is specifically using bind mounts for the volumes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 [数据卷容器](https://docs.docker.com/storage/volumes/#create-and-manage-volumes)
    轻松解决这个 MongoDB 存储问题，但这个示例特别使用绑定挂载来处理卷。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In almost all cases, you should not use host-based local storage for containers
    in production. This can be very convenient in development since you are using
    a single host, but in production, your containers will often be deployed to whatever
    node has space and resources, and will lose access to files stored on a single
    host’s filesystem. In production, if you need stateful storage, you have to leverage
    things like network-based storage, Kubernetes Persistent Volumes, etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在几乎所有情况下，您不应在生产环境中使用基于主机的本地存储来存储容器。这在开发中可能非常方便，因为您使用的是单个主机，但在生产环境中，您的容器通常会部署到有空间和资源的任何节点，并且无法访问存储在单个主机文件系统上的文件。在生产环境中，如果需要有状态存储，您必须利用网络存储、Kubernetes
    持久卷等。
- en: 'In the `environment` section for the `rocketchat` service, you will see that
    the value for the `MONGO_URL` does not use an IP address or fully qualified domain
    name. This is because all of these services are running on the same Docker network,
    and Docker Compose configures each container so that it can find the others via
    their service names. This means that we can easily configure URLs like this to
    simply point at the service name and internal port for the container we need to
    connect to. And, if we rearrange things, these names will continue to point to
    the right container in our stack. They are also nice because they make it quite
    explicit to the reader what the dependency is for that container:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `rocketchat` 服务的 `environment` 部分，您会看到 `MONGO_URL` 的值不使用 IP 地址或完全限定域名。这是因为所有这些服务都在同一个
    Docker 网络上运行，并且 Docker Compose 配置每个容器，使其可以通过其服务名称找到其他容器。这意味着我们可以轻松地配置像这样的 URL，只需简单地指向我们需要连接的容器的服务名称和内部端口。而且，如果重新排列这些内容，这些名称将继续指向我们堆栈中正确的容器。它们也很好，因为它们使读者非常明确地了解该容器的依赖关系是什么：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The *docker-compose.yaml* file can also refer to environment variables using
    the `${VARIABLE_NAME}` format, which makes it possible to pull in secrets without
    actually storing them in this file. Docker Compose also supports an [*.env*](https://docs.docker.com/compose/env-file)
    file, which can be very useful for handling secrets and environment variables
    that change between developers, for example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*docker-compose.yaml* 文件还可以使用 `${VARIABLE_NAME}` 格式引用环境变量，这样可以在不实际存储它们在此文件中的情况下引入秘密。Docker
    Compose 还支持一个 [*.env*](https://docs.docker.com/compose/env-file) 文件，这对于处理在开发者之间变化的秘密和环境变量非常有用。'
- en: 'The `depends_on` section defines a container that must be running before this
    container can be started. By default, `docker compose` only ensures that the container
    is running, not that it is healthy; however, you can leverage the `HEALTHCHECK`
    functionality in Docker, and the condition statement in Docker Compose, to require
    that the dependent service be healthy before Docker Compose brings the new service
    up. It is important to remember that this only impacts startup. Docker will report
    services that become unhealthy later on, but it does not take any action to correct
    the situation unless the container exits, in which case, Docker will restart the
    container if it is configured to do so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`depends_on` 部分定义了一个容器，必须在此容器启动之前才能启动。默认情况下，`docker compose` 仅确保容器正在运行，而不是健康运行；然而，您可以利用
    Docker 中的 `HEALTHCHECK` 功能以及 Docker Compose 中的条件语句，要求依赖的服务在 Docker Compose 启动新服务之前处于健康状态。重要的是要记住，这只影响启动阶段。Docker
    将报告稍后变得不健康的服务，但除非容器退出，否则不会采取任何措施来纠正情况，在这种情况下，如果配置为这样做，Docker 将重新启动容器：'
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We discuss Docker’s health-check functionality in more detail in [“Container
    Health Checks”](ch06.html#health_checks). You can also find more information in
    the documentation for [Docker](https://dockr.ly/2MYnLZL) and [Docker Compose](https://dockr.ly/2wt366J).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [“容器健康检查”](ch06.html#health_checks) 中详细讨论了 Docker 的健康检查功能。您还可以在 [Docker](https://dockr.ly/2MYnLZL)
    和 [Docker Compose](https://dockr.ly/2wt366J) 的文档中找到更多信息。
- en: 'The `ports` subsection allows you to define all the ports that you want to
    be mapped from the container to the host:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`ports` 子部分允许您定义要从容器映射到主机的所有端口：'
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `zmachine` service uses only one new subsection, called `expose`. This
    section allows us to tell Docker that we want to expose this port to the other
    containers on the Docker network but not to the underlying host. This is why you
    do not provide a host port to map this port to:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`zmachine` 服务仅使用了一个名为 `expose` 的新子部分。该部分允许我们告诉 Docker，我们希望将此端口暴露给 Docker 网络上的其他容器，而不暴露给底层主机。这就是为什么您不提供主机端口来映射此端口的原因：'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You might notice at this point that, while we expose a port for `zmachine`,
    we didn’t expose a port in the `mongo` service. It wouldn’t have hurt anything
    to expose the `mongo` port, but we didn’t need to because it is already exposed
    by the upstream [`mongo` *Dockerfile*](https://github.com/docker-library/mongo/blob/58bdba62b65b1d1e1ea5cbde54c1682f120e0676/3.2/Dockerfile#L95).
    This is sometimes a little opaque. `docker image history` on the built image can
    be helpful here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到，尽管我们为 `zmachine` 暴露了一个端口，但我们没有在 `mongo` 服务中暴露端口。暴露 `mongo` 端口不会有害，但我们不需要这样做，因为上游的
    [`mongo` *Dockerfile*](https://github.com/docker-library/mongo/blob/58bdba62b65b1d1e1ea5cbde54c1682f120e0676/3.2/Dockerfile#L95)
    已经暴露了它。这有时会有点难以理解。在构建的镜像上运行 `docker image history` 可以帮助理解这一点。
- en: Here we’ve used an example that is complex enough to expose you to some of the
    power of Docker Compose, but it is by no means exhaustive. There is a great deal
    else that you can configure in a *docker-compose.yaml* file, including security
    settings, resource quotas, and much more. You can find a lot of detailed information
    about configuration for Compose in the [official Docker Compose documentation](https://docs.docker.com/compose/compose-file).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用了一个足够复杂的示例，以便让您了解 Docker Compose 的一些强大功能，但这并不是详尽无遗的。在 *docker-compose.yaml*
    文件中，您可以配置很多其他内容，包括安全设置、资源配额等等。您可以在[官方 Docker Compose 文档](https://docs.docker.com/compose/compose-file)中找到关于
    Compose 配置的详细信息。
- en: Launching Services
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务
- en: 'We configured a set of services for our application in the YAML file. That
    tells Compose what we’re going to launch and how to configure it. So, let’s get
    it up and running! To run our first Docker Compose command, we need to be sure
    that we are in the same directory as the *docker-compose.yaml* file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 YAML 文件中为我们的应用程序配置了一组服务。这告诉 Compose 我们要启动什么以及如何配置它。因此，让我们开始运行它！要运行我们的第一个
    Docker Compose 命令，我们需要确保我们与 *docker-compose.yaml* 文件位于同一目录中：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you are in the correct directory, you can confirm that the configuration
    is correct by running the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入正确的目录，您可以通过运行以下命令确认配置是否正确：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If everything is fine, the command will print out your configuration file.
    If there is a problem, the command will print an error with details about the
    problem, like so:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，该命令将打印出您的配置文件。如果有问题，命令将打印出详细的错误信息，如下所示：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can build any containers that you need by using the `build` option. Any
    services that use images will be skipped:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `build` 选项构建所需的任何容器。将跳过使用镜像的任何服务：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can start up your web service in the background by running the following
    command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令在后台启动您的网络服务：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Docker Compose prefixes the network and container names with a project name.
    By default, this is the name of the directory that contains your *docker-compose.yaml*
    file. Since this command was run in a directory named *compose*, you can see that
    everything starts with `compose` as the project name.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 将网络和容器名称以项目名称作为前缀。默认情况下，这是包含您的 *docker-compose.yaml* 文件的目录名称。由于此命令在名为
    *compose* 的目录中运行，您可以看到所有内容以`compose`作为项目名称开头。
- en: Warning
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: '*Windows users*: when you first bring up the services, Windows may prompt you
    to authorize *vpnkit*, and Docker Desktop for Windows may also prompt you to share
    your disk. You must click both the “Allow access” and the “Share it” buttons for
    the network and volume shares to work and everything to come up properly.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*Windows 用户*：当您首次启动服务时，Windows 可能会提示您授权 *vpnkit*，而 Docker Desktop for Windows
    也可能会提示您分享磁盘。您必须点击“允许访问”和“分享”按钮，以确保网络和卷共享正常工作，并且一切正常启动。'
- en: 'Once everything comes up, we can take a quick look at the logs for all of the
    services ([Figure 8-1](#figure8-1)):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有服务启动完成，我们可以快速查看所有服务的日志（参见图 8-1）：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![docker compose logs output](assets/dur3_0801.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![docker compose logs 输出](assets/dur3_0801.png)'
- en: Figure 8-1\. `docker compose logs` output
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-1\. `docker compose logs` 输出
- en: You can’t see it well in print here, but if you’re following along, note that
    all of the logs are color coded by service and interlaced by the time Docker received
    the log lines. This makes it a lot easier to follow what’s happening, even though
    several services are logging messages at once.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处打印的日志不易看清，但如果您在跟随操作，请注意所有日志都按服务进行了颜色编码，并且按 Docker 接收日志行的时间进行了交织。这样可以更轻松地跟踪发生的事情，即使多个服务同时记录消息。
- en: 'It can take Rocket.Chat a little while to set up the database and be ready
    to accept connections. Once the Rocket.Chat logs print a line that contains `SERVER
    RUNNING`, things should be ready to go:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Rocket.Chat 可能需要一些时间来设置数据库并准备接受连接。一旦 Rocket.Chat 日志打印包含 `SERVER RUNNING` 的行，一切就准备就绪了：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: At this point, we have successfully launched a reasonably complex application
    that makes up a stack of containers. We’ll take a look at this simple application
    now so that you can see what we built and get a more complete understanding of
    the Compose tooling. While this next section does not strictly have anything to
    do with Docker itself, it is intended to show you how easy it is to use Docker
    Compose to set up complex and fully functioning web services.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已成功启动了一个相当复杂的应用程序，它由一堆容器堆栈组成。我们现在来看一下这个简单的应用程序，这样您就可以看到我们构建的内容，并更全面地了解
    Compose 工具。虽然下一部分与 Docker 本身没有直接关系，但旨在向您展示使用 Docker Compose 设置复杂且功能齐全的网络服务有多么容易。
- en: Exploring Rocket.Chat
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Rocket.Chat
- en: Note
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In this section, we’re going to diverge from Docker for a moment and take a
    look at Rocket.Chat. We’ll spend a few pages on it so that you know enough about
    it that you can hopefully start to appreciate how much easier it is to set up
    a complex environment using Docker Compose. Feel free to skip down to [“Exercising
    Docker Compose”](#exercise_dc), if you would like.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将暂时偏离 Docker，转而看一看 Rocket.Chat。我们将花几页时间介绍它，以便您了解足够多的信息，希望您能开始感受到使用 Docker
    Compose 设置复杂环境有多么容易。如果愿意，可以跳转到 [“使用 Docker Compose 进行练习”](#exercise_dc)。
- en: We’ll shortly dig further into what’s happening behind the scenes of our setup.
    But to do that effectively, we should now take a brief moment to explore the application
    stack we built. [Rocket.Chat](https://rocket.chat), the primary application we
    launched with Docker Compose, is an open source chat client/server application.
    To see how it works, let’s launch a web browser and navigate to [*http://127.0.0.1:3000*](http://127.0.0.1:3000).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快将深入探讨设置背后发生的情况。但为了有效地做到这一点，我们现在应该花一点时间探索我们构建的应用程序堆栈。[Rocket.Chat](https://rocket.chat)，我们使用
    Docker Compose 启动的主要应用程序，是一个开源的聊天客户端/服务器应用程序。要查看其工作原理，让我们启动一个网络浏览器，并导航至 [*http://127.0.0.1:3000*](http://127.0.0.1:3000)。
- en: When you get there, you see the Admin Info screen for Rocket.Chat ([Figure 8-2](#figure8-2)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当您到达目标时，您会看到 Rocket.Chat 的管理信息屏幕（参见图 8-2）。
- en: '![Rocket.Chat Admin Info screen](assets/dur3_0802.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 管理信息屏幕](assets/dur3_0802.png)'
- en: Figure 8-2\. Rocket.Chat Admin Info screen
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-2\. Rocket.Chat 管理信息界面
- en: 'Fill out the form like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表格如下：
- en: 'Full name: **`student`**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全名：**`student`**
- en: 'Username: **`student`**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：**`student`**
- en: 'Email: **`student@example.com`**'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件：**`student@example.com`**
- en: 'Password: **`student-pw!`**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：**`student-pw!`**
- en: Then click the blue Next button.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击蓝色的“下一步”按钮。
- en: You then see the Organization Info screen ([Figure 8-3](#figure8-3)).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会看到组织信息界面（参见[图 8-3](#figure8-3)）。
- en: '![Rocket.Chat Organization Info screen](assets/dur3_0803.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 组织信息界面](assets/dur3_0803.png)'
- en: Figure 8-3\. Rocket.Chat Organization Info screen
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-3\. Rocket.Chat 组织信息界面
- en: 'The specifics of this form are not critical, but you can fill it in something
    like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此表格的具体内容并不关键，但你可以填写类似以下的内容：
- en: 'Organization name: **`training`**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织名称：**`培训`**
- en: 'Organization type: **`Community`**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织类型：**`社区`**
- en: 'Organization industry: **`Education`**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织行业：**`教育`**
- en: 'Organization size: **`1-10 people`**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织规模：**`1-10 人`**
- en: 'Country: **`United States`**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家：**`美国`**
- en: Then click the blue Next button.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击蓝色的“下一步”按钮。
- en: At this point, you see the Register Your Server screen ([Figure 8-4](#figure8-4)).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您会看到注册您的服务器界面（参见[图 8-4](#figure8-4)）。
- en: '![Rocket.Chat Register Your Server screen](assets/dur3_0804.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 注册您的服务器界面](assets/dur3_0804.png)'
- en: Figure 8-4\. Rocket.Chat Register Your Server screen
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-4\. Rocket.Chat 注册您的服务器界面
- en: You can simply delete and uncheck everything and then click the small blue “Continue
    as standalone” link. You then see the Standalone Server Configuration screen ([Figure 8-5](#figure8-5)).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以简单地删除和取消所有选择，然后点击小蓝色的“继续作为独立站点”链接。接下来，你会看到独立服务器配置界面（参见[图 8-5](#figure8-5)）。
- en: '![Rocket.Chat Standalone Server Confirmation screen](assets/dur3_0805.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 独立服务器配置界面](assets/dur3_0805.png)'
- en: Figure 8-5\. Rocket.Chat Standalone Server Confirmation screen
  id: totrans-115
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-5\. Rocket.Chat 独立服务器配置界面
- en: Click the blue Confirm button.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 点击蓝色的“确认”按钮。
- en: Warning
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If you are using `localhost` or something other than 127.0.0.1 to reach Rocket.Chat
    in your browser, you may get a pop-up window asking if you would like to update
    the `SITE_URL`. In most cases, go ahead and let it update that value so that it
    matches what you are using.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 `localhost` 或者其他非 127.0.0.1 来访问 Rocket.Chat，可能会弹出一个窗口询问是否要更新 `SITE_URL`。在大多数情况下，可以允许它更新该值，以便与你使用的匹配。
- en: Congratulations—you are now logged in to a fully functional chat client, but
    you aren’t done yet. The Docker Compose configuration launched an instance of
    a [Hubot](https://hubot.github.com) chat assistant and the mysterious zmachine,
    so let’s take a look at those.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，现在你已经成功登录到一个完全功能的聊天客户端，但你的工作还没有完成。Docker Compose 配置启动了一个 [Hubot](https://hubot.github.com)
    聊天助手和神秘的 zmachine，让我们来看看它们。
- en: Since the Rocket.Chat server is brand new, it doesn’t yet have a user that our
    bot can use. Let’s remedy that.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Rocket.Chat 服务器是全新的，我们的机器人还没有可用的用户。让我们来解决这个问题。
- en: Start by clicking the top of the left sidebar, where you see a purple box with
    the letter *S* in it. Click Administration in the pop-up menu ([Figure 8-6](#figure8-6)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先点击左侧边栏顶部，那里有一个紫色盒子里面带有字母 *S*。点击弹出菜单中的管理（参见[图 8-6](#figure8-6)）。
- en: '![Rocket.Chat Administration sidebar](assets/dur3_0806.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 管理侧边栏](assets/dur3_0806.png)'
- en: Figure 8-6\. Rocket.Chat Administration sidebar
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-6\. Rocket.Chat 管理侧边栏
- en: In the Administration panel, click Users ([Figure 8-7](#figure8-7)).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理面板中，点击用户（参见[图 8-7](#figure8-7)）。
- en: '![Rocket.Chat User screen](assets/dur3_0807.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 用户界面](assets/dur3_0807.png)'
- en: Figure 8-7\. Rocket.Chat User screen
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-7\. Rocket.Chat 用户界面
- en: On the top-far-right side of the screen, click the New button to display the
    Add User screen ([Figure 8-8](#figure8-8)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕右上角，点击“新建”按钮以显示添加用户界面（参见[图 8-8](#figure8-8)）。
- en: '![Rocket.Chat Add User screen](assets/dur3_0808.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 添加用户界面](assets/dur3_0808.png)'
- en: Figure 8-8\. Rocket.Chat Add User screen
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-8\. Rocket.Chat 添加用户界面
- en: 'Fill out the form as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表格如下：
- en: 'Name: **`hubot`**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：**`hubot`**
- en: 'Username: **`hubot`**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：**`hubot`**
- en: 'Email: **`hubot@example.com`**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件：**`hubot@example.com`**
- en: 'Click: **`Verified` (Blue)**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击：**`已验证`（蓝色）**
- en: 'Password: **`bot-pw!`**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：**`bot-pw!`**
- en: 'Roles: **`bot`**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色：**`机器人`**
- en: 'Disable: **`Send welcome email` (Gray)**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用：**`发送欢迎电子邮件`（灰色）**
- en: Click Save to create the user.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存以创建用户。
- en: To ensure that the bot can log in, we also need to disable two-factor authentication,
    which is enabled by default. To do this, click Settings at the bottom of the Administration
    sidebar on the left side of your browser ([Figure 8-9](#figure8-9)).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保机器人能够登录，我们还需要禁用默认启用的双因素身份验证。为此，请在浏览器左侧的管理侧边栏底部单击“设置”（[图 8-9](#figure8-9)）。
- en: '![Rocket.Chat Administration settings](assets/dur3_0809.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 管理设置](assets/dur3_0809.png)'
- en: Figure 8-9\. Rocket.Chat Administration settings
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-9\. Rocket.Chat 管理设置
- en: The Settings screen is displayed ([Figure 8-10](#figure8-10)).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显示设置屏幕（[图 8-10](#figure8-10)）。
- en: '![Rocket.Chat Accounts settings](assets/dur3_0810.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 帐户设置](assets/dur3_0810.png)'
- en: Figure 8-10\. Rocket.Chat Accounts settings
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-10\. Rocket.Chat 帐户设置
- en: In the new text search bar, type `**totp**`, then click the Open button under
    Accounts.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的文本搜索栏中，输入 `**totp**`，然后在帐户下点击打开按钮。
- en: You should now see a long list of settings ([Figure 8-11](#figure8-11)).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到一个长长的设置列表（[图 8-11](#figure8-11)）。
- en: '![Rocket.Chat TOTP settings](assets/dur3_0811.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat TOTP 设置](assets/dur3_0811.png)'
- en: Figure 8-11\. Rocket.Chat TOTP settings
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-11\. Rocket.Chat TOTP 设置
- en: Scroll down to the Two Factor Authentication section, expand it, and then deselect
    the Enable Two Factor Authentication option.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到双因素身份验证部分，展开它，然后取消选择“启用双因素身份验证”选项。
- en: Once you have done this, click “Save changes.”
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，请单击“保存更改”。
- en: At the top of the left side of the Administration panel, click the X to close
    the panel ([Figure 8-12](#figure8-12)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理面板左侧顶部，单击 X 关闭面板（[图 8-12](#figure8-12)）。
- en: '![Rocket.Chat close Administration panel](assets/dur3_0812.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 关闭管理面板](assets/dur3_0812.png)'
- en: Figure 8-12\. Rocket.Chat close Administration panel
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-12\. Rocket.Chat 关闭管理面板
- en: In the left side panel under Channels, click “general” ([Figure 8-13](#figure8-13)).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧面板的“频道”下，点击“general”（[图 8-13](#figure8-13)）。
- en: '![Rocket.Chat General channel](assets/dur3_0813.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket.Chat 通用频道](assets/dur3_0813.png)'
- en: Figure 8-13\. Rocket.Chat general channel
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-13\. Rocket.Chat 通用频道
- en: 'And finally, if you don’t already see a message in the channel that “Hubot
    has joined the channel,” go ahead and tell Docker Compose to restart the Hubot
    container. This will force Hubot to try and log into the chat server again, now
    that there is a user for the service to use:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您在频道中尚未看到消息“Hubot 已加入频道”，请告诉 Docker Compose 重新启动 Hubot 容器。这将强制 Hubot 再次尝试登录聊天服务器，现在已经有一个用户可以使用该服务：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If everything went according to plan, you should now be able to navigate back
    to your web browser and send commands to Hubot in the chat window.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，您现在应该能够返回网页浏览器并在聊天窗口中发送命令给 Hubot。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Hubot should auto-join the General channel when it logs into the server, but
    just in case, you can send the following message in the General channel to explicitly
    invite Hubot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Hubot 登录服务器时，应自动加入“General”频道，但以防万一，您可以在“General”频道中发送以下消息，显式邀请 Hubot：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You may get a message from the internal admin `rocket.cat` that says “@hubot
    is already in here.” This is perfectly fine.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到来自内部管理员 `rocket.cat` 的消息，内容是“@hubot 已经在这里了。” 这完全正常。
- en: 'The environment variables used to configure Hubot defined its alias as a period.
    So you can now try typing `. help` to test that the bot is responding. If everything
    is working, you should get a list of commands that the bot understands and will
    respond to:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 用于配置 Hubot 的环境变量将其别名定义为一个句点。现在您可以尝试输入 `. help` 来测试机器人是否响应。如果一切正常，您应该会收到机器人理解并响应的命令列表：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, try typing the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请尝试输入以下内容：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Hubot should respond with `PONG`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Hubot 应该会回复 `PONG`。
- en: 'If you type:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您键入：
- en: '[PRE27]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: then Hubot will tell you what the time is set to on the server.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 Hubot 将告诉您服务器上的时间设置。
- en: So, for one last diversion, try creating a new chat channel by typing `/create
    zmachine` in the chat window. You should now be able to click on the new `zmachine`
    channel in the left sidebar and invite Hubot with the chat command `/invite @hubot`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，作为最后的转移，尝试通过在聊天窗口中键入 `/create zmachine` 创建一个新的聊天频道。现在，您应该能够在左侧边栏中点击新的 `zmachine`
    频道，并使用聊天命令 `/invite @hubot` 邀请 Hubot。
- en: Note
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'When you do this, Hubot might say:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当您这样做时，Hubot 可能会说：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is nothing to be concerned about.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有什么好担心的。
- en: 'Next, try typing the following commands into the chat window to play a chat-based
    version of the famous game [*Colossal Cave Adventure*](https://en.wikipedia.org/wiki/Interactive_fiction#Adventure):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，尝试在聊天窗口中输入以下命令，以玩一个基于聊天的著名游戏 [*巨洞探险*](https://en.wikipedia.org/wiki/Interactive_fiction#Adventure)
    的版本：
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Warning
  id: totrans-179
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'Interactive fiction can be addictive and a huge time sink. You have been warned.
    That being said, if you aren’t already familiar with it and are interested in
    learning more, take a look at some of these resources:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式小说可能会让人上瘾，是一个巨大的时间消耗。您已经被警告了。话虽如此，如果您对此感兴趣并希望了解更多信息，请查看以下一些资源：
- en: '[Definition of interactive fiction](https://en.wikipedia.org/wiki/Interactive_fiction)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[交互式小说的定义](https://en.wikipedia.org/wiki/Interactive_fiction)'
- en: '[Emulator](https://davidgriffith.gitlab.io/frotz)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模拟器](https://davidgriffith.gitlab.io/frotz)'
- en: '[Development](https://ganelson.github.io/inform-website)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开发](https://ganelson.github.io/inform-website)'
- en: '[Games](https://oreil.ly/IrOLh)^([1](ch08.html#idm46803138496976))'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[游戏](https://oreil.ly/IrOLh)^([1](ch08.html#idm46803138496976))'
- en: '[Competition](https://ifcomp.org)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[竞赛](https://ifcomp.org)'
- en: You’ve now seen how easy it can be to configure, launch, and manage complex
    web services that require multiple components to accomplish their jobs using Docker
    Compose. In the next section, we will explore a few more of the features that
    Docker Compose includes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了如何配置、启动和管理复杂的 Web 服务的简单方法，这些服务需要多个组件来完成其工作，使用 Docker Compose。在接下来的部分中，我们将探讨
    Docker Compose 包含的更多功能。
- en: Note
  id: totrans-187
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You could avoid much of the Rocket.Chat setup by providing MongoDB with a preconfigured
    Rocket.Chat database, but it felt important to remove any magic from this example
    to make it clearer how everything fits together.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供MongoDB与预配置的Rocket.Chat数据库，您可以避免大部分Rocket.Chat设置，但是去除此示例中的任何魔术是很重要的，以便更清楚地展示所有组件如何配合。
- en: Exercising Docker Compose
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Compose 进行练习
- en: 'Now that you have the full Rocket.Chat stack running and understand what the
    application is doing, we can dig in to get a little more insight into how the
    services are running. Some of the common Docker commands are also exposed as Compose
    commands, but for a specific stack rather than a single container or all of the
    containers on a host. You can run `docker compose top` to see an overview of your
    containers and the processes that are running in them:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经运行了完整的Rocket.Chat堆栈，并了解了应用程序的运行方式，我们可以深入挖掘一些服务运行的细节。一些常见的Docker命令也暴露为Compose命令，但是针对的是特定的堆栈，而不是主机上的单个容器或所有容器。您可以运行
    `docker compose top` 来查看您的容器及其内运行的进程的概述：
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Similar to how you would normally enter a running Linux container using the
    `docker container exec` command, you can run commands inside containers via the
    Docker Compose tooling using the `docker compose exec` command. Because `docker
    compose` is a newer tool, it provides some convenient shortcuts over the standard
    `docker` commands. In the case of `docker compose exec`, you do not need to pass
    in `-i -t`, and you can use the Docker Compose service name instead of trying
    to remember the container ID or name:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于您通常使用`docker container exec`命令进入运行中的Linux容器一样，您可以通过Docker Compose工具使用`docker
    compose exec`命令在容器内运行命令。由于`docker compose`是一个较新的工具，它提供了一些方便的快捷方式来替代标准的`docker`命令。对于`docker
    compose exec`来说，您不需要传入`-i -t`，而且可以使用Docker Compose服务名称，而不是记住容器的ID或名称：
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Tip
  id: totrans-194
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '`docker compose logs` and `docker compose exec` are probably the most useful
    commands for troubleshooting. If Docker Compose cannot build your image or start
    your container at all, you will need to fall back to the standard `docker` commands
    to debug your image and container, as we discussed in [“Troubleshooting Broken
    Builds”](ch04.html#broken_builds) and [“Getting Inside a Running Container”](ch06.html#inside_containers).'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker compose logs` 和 `docker compose exec` 可能是用于故障排除最有用的命令。如果 Docker Compose
    无法构建您的映像或根本无法启动您的容器，您将需要回退到标准的 `docker` 命令来调试您的映像和容器，正如我们在 [“故障排除破损的构建”](ch04.html#broken_builds)
    和 [“进入正在运行的容器”](ch06.html#inside_containers) 中讨论的那样。'
- en: 'You can also use Docker Compose to `start` and `stop` and, in most environments,
    `pause` and `unpause` either a single container or all of your containers, depending
    on what you need:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 Docker Compose `start` 和 `stop`，在大多数环境中，`pause` 和 `unpause` 一个单独的容器或所有容器，具体取决于您的需求：
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, when you want to tear everything down and delete all the containers
    created by Docker Compose, you can run the following command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当您想要清理并删除Docker Compose创建的所有容器时，可以运行以下命令：
- en: '[PRE33]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Warning
  id: totrans-200
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When you delete the MongoDB container using the `docker compose down` command,
    all data in the MongoDB instance will be lost.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`docker compose down`命令删除MongoDB容器时，MongoDB实例中的所有数据都将丢失。
- en: Managing Configuration
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理配置
- en: Docker Compose offers a few important capabilities that can help you significantly
    improve the flexibility of your *docker-compose.yaml* files. In this section,
    we will explore how you can avoid hardcoding many configuration values into your
    *docker-compose.yaml* files while still making them easy to use by default.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose提供了几个重要的功能，可以帮助您显著提高*docker-compose.yaml*文件的灵活性。在本节中，我们将探讨如何避免将许多配置值硬编码到您的*docker-compose.yaml*文件中，同时仍然使它们默认情况下易于使用。
- en: Default Values
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认值
- en: 'If we take a look at the *services:rocketchat:environment* section of the *docker-compose.yaml*
    file, we will see something like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看*docker-compose.yaml*文件中*services:rocketchat:environment*部分，我们将看到类似于以下内容：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, if we look at *docker-compose-defaults.yaml* inside the same directory,
    we will see that this same section looks like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查看同一目录中的*docker-compose-defaults.yaml*文件，我们将看到该部分看起来像这样：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is using a technique called [*variable interpolation*](https://docs.docker.com/compose/compose-file/#interpolation)
    that Docker Compose has borrowed directly from many common Unix shells, like `bash`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种称为[*变量插值*](https://docs.docker.com/compose/compose-file/#interpolation)的技术，Docker
    Compose直接从许多常见的Unix shell（如`bash`）中借用了它。
- en: 'In the original file, the environment variable `ROCKETCHAT_PASSWORD` is hardcoded
    to the value `"bot-pw!"`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始文件中，环境变量`ROCKETCHAT_PASSWORD`硬编码为值`"bot-pw!"`：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'By using this new approach, we are stating that we want `ROCKETCHAT_PASSWORD`
    to be set to the value of the `HUBOT_ROCKETCHAT_PASSWORD` variable if it is set
    in the user’s environment, and if it is not, then `ROCKETCHAT_PASSWORD` should
    be set to the default value of `bot-pw!`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这种新方法，我们声明希望将`ROCKETCHAT_PASSWORD`设置为用户环境中设置了`HUBOT_ROCKETCHAT_PASSWORD`变量的值，如果没有设置，则`ROCKETCHAT_PASSWORD`应该设置为默认值`bot-pw!`：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This provides us with a great deal of flexibility since we can now make almost
    everything configurable while still providing reasonable defaults for the most
    common use case. We can easily test this out by running `docker compose up` with
    the new file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了很大的灵活性，因为我们现在几乎可以使所有内容都可配置，同时为最常见的用例提供合理的默认值。我们可以通过使用新文件运行`docker compose
    up`来轻松测试这一点：
- en: '[PRE38]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'By default, this will result in the exact same stack that we spun up earlier.
    However, we could easily make changes to it now by simply setting one or more
    environment variables in our terminal before running our `docker compose` commands:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这将导致我们之前启动的完全相同的堆栈。但是，现在我们可以通过在运行我们的`docker compose`命令之前在终端中简单地设置一个或多个环境变量来轻松进行更改：
- en: '[PRE39]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tip
  id: totrans-218
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'In the examples here, Docker Compose will treat an empty environment variable
    exactly the same as one that is set to an empty string. If an empty string is
    a valid value in your use case, then you will want to modify the format of the
    variable substitution line so that it looks like this: `${VARIABLE_NAME-default-value}`.
    We recommend reading through [the documentation for this feature](https://docs.docker.com/compose/compose-file/#interpolation)
    so that you understand all the possibilities.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，Docker Compose将空环境变量与设置为空字符串的环境变量完全相同对待。如果空字符串是您用例中的有效值，则您将希望修改变量替换行的格式，使其看起来像这样：`${VARIABLE_NAME-default-value}`。我们建议阅读[此功能的文档](https://docs.docker.com/compose/compose-file/#interpolation)，以便了解所有可能性。
- en: This is pretty nice, but what if we don’t want to provide a default value at
    all and instead want to force the user to set something? We can do this pretty
    easily as well.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常好，但是如果我们不想提供任何默认值，而是想强制用户设置某些内容，该怎么办呢？我们也可以很容易地做到这一点。
- en: Warning
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Some readers might be uncomfortable with the fact that we are passing in the
    password as part of the command line, since those passwords might be viewable
    in the system process list, etc., but don’t worry—we will address that in just
    a few minutes.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有些读者可能对我们将密码作为命令行的一部分传递感到不适，因为这些密码可能在系统进程列表中可见等等，但不用担心——我们将在几分钟内解决这个问题。
- en: Mandatory Values
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制值
- en: To set a mandatory value, we simply need to alter the variable substitution
    line a bit. It seems like a bad idea to pass in a default password, so let’s go
    ahead and make that value required.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置一个必填值，我们只需稍微修改变量替换行。看起来将默认密码传递进去似乎是一个坏主意，所以让我们继续并要求该值为必填项。
- en: 'In the *docker-compose-defaults.yaml* file, `ROCKETCHAT_PASSWORD` is defined
    like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在*docker-compose-defaults.yaml*文件中，`ROCKETCHAT_PASSWORD`被定义为这样：
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the newer *docker-compose-env.yaml* file, we can see that it is defined
    like this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新的*docker-compose-env.yaml*文件中，我们可以看到它被定义为这样：
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Instead of containing a default value, this approach defines an error string
    if the variable is not set to a nonempty string in the environment. If we try
    to simply spin up these services now, we will get an error message:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是包含默认值，这种方法在变量未在环境中设置为非空字符串时定义了一个错误字符串。如果我们现在尝试简单地启动这些服务，将会收到错误消息：
- en: '[PRE42]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The output gives us a few hints about what might be wrong, but the last two
    lines are pretty clear, and the final message is the exact error message that
    we defined, so it can be set to whatever makes the most sense in the situation.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为我们提供了一些关于可能出错的提示，但最后两行非常清晰，最终消息正是我们定义的确切错误消息，因此可以根据情况设置为最有意义的内容。
- en: 'If we go ahead and pass in our own password, then everything spins up just
    fine:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续输入我们自己的密码，那么一切都会正常启动：
- en: '[PRE43]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The dotenv File
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dotenv文件
- en: Passing in a single environment variable is not that difficult, but if you need
    to pass in a lot of custom values, or even one real secret, then setting them
    in the local terminal isn’t ideal. This is where the *.env* (*dotenv*) file can
    be very useful.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 传递单个环境变量并不难，但如果您需要传递许多自定义值，甚至一个真正的秘密，那么在本地终端中设置它们并不理想。这就是*.env*（dotenv）文件非常有用的地方。
- en: The *.env* file is a [special file standard](https://www.dotenv.org/docs/security/env)
    that is intended to be parsed by programs that need additional configuration information
    that is specific to the local environment.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '*.env*文件是一个[特殊文件标准](https://www.dotenv.org/docs/security/env)，旨在被需要特定于本地环境的附加配置信息的程序解析。'
- en: In the preceding use case, we must set a password to spin up our Docker Compose
    environment. We can pass in the environment every time, but this isn’t ideal for
    at least a few reasons. It would be nice if we could set it in a way that is reasonably
    secure for a single-user environment and that will also make our lives a bit easier
    and less error prone.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述用例中，我们必须设置一个密码来启动我们的Docker Compose环境。我们可以每次传入环境变量，但至少有几个理由不是很理想。如果我们能以某种对单用户环境合理安全且使我们的生活更轻松且减少错误的方式设置它，那将是很好的。
- en: 'In essence, a *.env* file is simply a list of key/value pairs. Since this file
    is intended to be unique to the local environment and will often contain at least
    one secret, we should start by ensuring that we will never accidentally commit
    these files into our revision control system. To do this with `git`, we can simply
    make sure that our *.gitignore* file includes *.env*, which, in this case, it
    already does:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，*.env*文件只是一个键值对列表。由于这个文件是特定于本地环境的，通常至少包含一个秘密，因此我们应该首先确保永远不会意外地将这些文件提交到我们的版本控制系统中。要做到这一点，使用`git`，我们只需确保我们的*.gitignore*文件包含*.env*，在这种情况下，它已经包含了：
- en: '[PRE44]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Assuming that we are on a single-user system, we can now safely create a *.env*
    file in the same directory that contains our *docker-compose.yaml* file(s).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在单用户系统上，现在可以在包含我们的*docker-compose.yaml*文件的同一目录中安全地创建一个*.env*文件。
- en: 'For this example, let’s go ahead and make the contents of our *.env* file look
    like this:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，让我们继续并让我们的*.env*文件的内容看起来像这样：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We could add many more key/value pairs to this file, but to keep things simple,
    we are only focusing on this one password. If you run `git status` after creating
    this file, you should notice that `git` is completely ignoring the new file, which
    is exactly what we want:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这个文件中添加许多键值对，但为了保持简单，我们只关注这个密码。如果您在创建这个文件后运行`git status`，您应该注意到`git`完全忽略了新文件，这正是我们想要的：
- en: '[PRE46]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A *.env* file is not a Unix shell script. There are subtle but important differences
    between this format and how you might define variables in a standard shell script.
    The most important one is that, in most circumstances, you should not surround
    values with quotation marks.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '*.env*文件不是Unix shell脚本。在这种格式与您可能在标准shell脚本中定义变量的方式之间有微妙但重要的区别。最重要的区别是，在大多数情况下，您不应该用引号括起值。'
- en: 'In the previous section, when we ran `docker compose -f docker-compose-env.yaml
    up -d` without setting the `HUBOT_ROCKETCHAT_PASSWORD`, we got an error, but if
    we try this again after creating the *.env* file, things should work just fine:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，当我们运行`docker compose -f docker-compose-env.yaml up -d`时，没有设置`HUBOT_ROCKETCHAT_PASSWORD`，我们遇到了一个错误，但是如果我们在创建了*.env*文件后再试一次，一切应该都会正常工作：
- en: '[PRE47]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let’s confirm that the value that has been assigned to `ROCKETCHAT_PASSWORD`
    is what we set it to in the *.env* file:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认已经分配给`ROCKETCHAT_PASSWORD`的值是否与我们在*.env*文件中设置的值相同：
- en: '[PRE48]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We can see that the value is indeed set to what we defined in the *.env* file.
    This is because Docker Compose will always read in the key/value pairs that are
    defined in a *.env* file that lives in the same directory as the *docker-compose.yaml*
    file that we are using.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该值确实设置为我们在*.env*文件中定义的值。这是因为Docker Compose始终会读取位于与我们正在使用的*docker-compose.yaml*文件相同目录中的*.env*文件中定义的键/值对。
- en: It is important to understand the precedence that is in effect here. The very
    first thing that Docker Compose does is read all the defaults that are set in
    the *docker-compose.yaml* file. It then reads the *.env* file and overrides any
    of the defaults, which are values defined in the file. Then it finally looks at
    any environment variables that are set in the local environment and overwrites
    values previously defined with these.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处影响优先级的理解非常重要。Docker Compose首先会读取*docker-compose.yaml*文件中设置的所有默认值。然后它会读取*.env*文件，并覆盖文件中定义的任何默认值。最后，它会查看在本地环境中设置的任何环境变量，并使用这些变量覆盖先前定义的值。
- en: This means that the defaults in the file should be the most common settings,
    then each user can define their common changes in the local *.env* file, and finally,
    they can rely on local environment variables when they need to make an unusual
    change for a specific use case. Using these features with Docker Compose helps
    ensure that you can build a very repeatable process that still contains enough
    flexibility to cover most common workflows.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着文件中的默认设置应该是最常见的设置，然后每个用户可以在本地*.env*文件中定义他们的常见更改，并在需要对特定用例进行不寻常更改时依赖于本地环境变量。使用这些功能与Docker
    Compose一起可以确保您可以构建一个非常可重复的流程，同时仍具有足够的灵活性来涵盖大多数常见工作流程。
- en: Tip
  id: totrans-254
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: There are additional features of Docker Compose that we do not cover, like [override
    files](https://docs.docker.com/compose/extends). As you start to use Docker Compose
    more, it is worth your time to review the [documentation](https://docs.docker.com/compose)
    so that you are aware of any additional features that might be useful for your
    projects.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose还有一些我们没有涵盖的附加功能，比如[覆盖文件](https://docs.docker.com/compose/extends)。随着您对Docker
    Compose的使用越来越多，值得您花时间查阅[文档](https://docs.docker.com/compose)，以了解可能对项目有用的任何其他功能。
- en: Wrap-Up
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You should now have a very good feel for the types of things you can accomplish
    with Docker Compose and how you can use this tool to decrease the toil and increase
    the repeatability of your development environments.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该对使用Docker Compose可以实现的功能有了很好的了解，以及如何使用这个工具来减少重复操作并增加开发环境的可重复性。
- en: In the next chapter, we will explore some of the tools that are available to
    help you scale Docker inside your data center and in the cloud.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一些工具，这些工具可帮助您在数据中心内部和云中扩展Docker。
- en: '^([1](ch08.html#idm46803138496976-marker)) Full URL: [*https://ifarchive.org/indexes/if-archiveXgamesXzcode.html*](https://ifarchive.org/indexes/if-archiveXgamesXzcode.html)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.html#idm46803138496976-marker)) 完整URL：[*https://ifarchive.org/indexes/if-archiveXgamesXzcode.html*](https://ifarchive.org/indexes/if-archiveXgamesXzcode.html)
