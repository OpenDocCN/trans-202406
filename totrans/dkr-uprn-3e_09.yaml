- en: Chapter 8\. Exploring Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you should have a good feel for the `docker` command and how
    to use it to build, launch, monitor, and debug your applications. Once you are
    comfortable working with individual containers, it won’t be long before you’ll
    want to share your projects and start building more complex projects that require
    multiple containers to function properly. This is particularly the case in development
    environments, where running a whole stack of containers can easily simulate many
    production environments on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re running a whole stack of containers, however, every container needs
    to be run with the proper setup to ensure that the underlying application is configured
    correctly and will run as expected. Getting these settings correct every time
    can be challenging, especially when you are not the person who originally wrote
    the application. To help with this during development, people often resort to
    trying to write shell scripts that can build and run multiple containers consistently.
    Although this works, it can become difficult to understand for a newcomer and
    hard to maintain as the project changes over time. It’s also not necessarily repeatable
    between projects.
  prefs: []
  type: TYPE_NORMAL
- en: To help address this problem, Docker, Inc., released a tool primarily aimed
    at developers called Docker Compose. This tool is included with Docker Desktop,
    but you can also install it by following the [online installation directions](https://docs.docker.com/compose/install).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Docker Compose was originally a separate application written in Python that
    was run using the command `docker-compose`. This command is referred to as Docker
    Compose version 1 and has recently been replaced with Docker Compose version 2\.
    Docker Compose v2 was completely rewritten in Go, as a Docker client plug-in.
    If `docker compose version` returns a result, then you have the plug-in installed.
    If not, we highly recommend that you take a little time to install it now.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Compose is an incredibly useful tool that can streamline all sorts of
    development tasks that have traditionally been very cumbersome and error prone.
    It can easily be leveraged to help developers quickly spin up complicated application
    stacks, compile applications without the need for setting up complex local development
    environments, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll do a run-through of how to use Compose to its best advantage.
    We’ll be using a GitHub repository in all of the following examples. If you want
    to run the examples as we go through them, you should run the following command
    to download the code, if you didn’t already do that in [Chapter 6](ch06.html#exploring_docker):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the example, shell script and *docker-compose.yaml* files below some lines
    have been truncated to fit in the margins. Make sure that you use the files from
    this Git repository if you plan to try these examples yourself.
  prefs: []
  type: TYPE_NORMAL
- en: This repository contains the configuration we’ll need to launch a complete web
    service that includes a MongoDB datastore, the open source Rocket.Chat communications
    server, a Hubot [ChatOps](https://goo.gl/hKT3QW) bot, and a `zmachine-api` instance
    for a little surprise entertainment value.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into using the `docker compose` command, it is useful to see
    the kind of ad hoc tooling it replaces. So let’s take a moment to look at a shell
    script that could be used to build and deploy a local copy of our service for
    development and local testing via Docker. This output is long and detailed, but
    it’s important to prove the point about why Docker Compose is a huge leap over
    shell scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We do not recommend running this shell script. It is simply an example, and
    in your environment, it may not work or may leave things in an odd state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you can probably follow most of this script pretty easily. As
    you may already have noticed, this is a hassle to read, is not very flexible,
    will be a pain to edit, and might fail unexpectedly in several places. If we were
    to follow shell script best practices and handle all the possible errors here
    in an effort to guarantee that it was repeatable, it would also be two to three
    times as long as it already is. Without a lot of work extracting common functionality
    for error handling, you’d also have to rewrite much of that logic every time you
    have a new project like this. This is not a very good way to approach a process
    that you need to work every time you use it. This is where good tooling comes
    in. You can accomplish the same thing with Docker Compose while also making it
    significantly more repeatable and easier to read, understand, and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast to this messy shell script, which is very repetitive and prone
    to breaking, Docker Compose is typically configured with a single, declarative
    [YAML](https://yaml.org) file for each project, named *docker-compose.yaml*. This
    configuration file is very easy to read and will work in a very repeatable fashion
    so that each user has the same experience when they run it. Here you can see an
    example *docker-compose.yaml* file that could be used to replace the preceding
    brittle shell script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The *docker-compose.yaml* file makes it easy to describe all the important requirements
    for each of your services and how they need to communicate with one another. And
    we get a lot of validation and logic checking for free that we didn’t even have
    time to write into our shell script and that we’d probably get wrong on occasion,
    no matter how careful we are.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what did we tell Compose to do in that YAML file? The first line of our
    file simply tells Docker Compose what version of the [Compose configuration language](https://docs.docker.com/compose/compose-file)
    this file was designed for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of our document is divided into two sections: `services` and `networks`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For starters, let’s take a quick look at the `networks` section. In this *docker-compose.yaml*
    file, we are defining a single, named Docker network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple configuration that tells Docker Compose to create a single
    network, named `botnet`, using the (default) bridge driver, which will bridge
    the Docker network with the host’s networking stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `services` section is the most important part of the configuration and
    tells Docker Compose what applications you want to launch. Here, the `services`
    section defines five services: `mongo`, `mongo-init-replica`, `rocketchat`, `zmachine`,
    and `hubot`. Each named service then contains sections that tell Docker how to
    build, configure, and launch that service.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look at the `mongo` service, you will see that the first subsection
    is called `build` and contains a `context` key. This informs Docker Compose that
    it can build this image and that the files required for the build are located
    in the *../../mongodb/docker* directory, which is two levels above the directory
    containing the *docker-compose.yaml* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at the *Dockerfile* in the *mongodb/docker* directory, you will
    see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Take a moment to look at the `HEALTHCHECK` line. This tells Docker what command
    should be run to check the health of the container. Docker will not take action
    based on this health check, but it will report the health so that other things
    can make use of this information. If you are curious, feel free to take a look
    at the `docker-healthcheck` script in the *mongodb/docker* directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next setting, `image`, defines the image tag that you want either to apply
    to your build or to download (if you’re not building an image) and then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `restart` option, you tell Docker when you want it to restart your
    containers. In most cases, you’ll want Docker to restart your containers any time
    that you have not specifically stopped them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will see an `environment` section. This is where you can define any
    environment variables that you want to pass into your container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The final subsection for the `mongo` service, `networks`, tells Docker Compose
    which network this container should be attached to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: At this point, let’s jump down to the `rocketchat` service. This service does
    not have a `build` subsection; instead, it only defines an image tag that tells
    Docker Compose that it cannot build this image and must instead try to pull and
    launch a preexisting Docker image with the defined tag.
  prefs: []
  type: TYPE_NORMAL
- en: The first new subsection that you will notice in this service is called `volumes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A lot of services have at least some data that should be persisted during development,
    despite the ephemeral nature of containers. To accomplish this, it is easiest
    to mount a local directory into the containers. The `volumes` section allows you
    to list all the local directories that you would like to have mounted into a container,
    and define where they go. This command will bind-mount *../rocketchat/data/uploads*
    into */app/uploads* inside the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may have noticed that we do not define a `volume` for MongoDB, which might
    seem a bit counterintuitive. Although a bind-mounted volume would be useful to
    store the database files in, MongoDB will fail to write to the native Windows
    filesystem, so we leave this out to achieve the broadest compatibility and instead
    let the database write into the container for this development use case.
  prefs: []
  type: TYPE_NORMAL
- en: The primary result of this is that when you delete the container using a command
    like `docker compose down`, all of the data in the MongoDB instance will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: We could easily solve this MongoDB storage problem by using a [data volume container](https://docs.docker.com/storage/volumes/#create-and-manage-volumes),
    but this example is specifically using bind mounts for the volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In almost all cases, you should not use host-based local storage for containers
    in production. This can be very convenient in development since you are using
    a single host, but in production, your containers will often be deployed to whatever
    node has space and resources, and will lose access to files stored on a single
    host’s filesystem. In production, if you need stateful storage, you have to leverage
    things like network-based storage, Kubernetes Persistent Volumes, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `environment` section for the `rocketchat` service, you will see that
    the value for the `MONGO_URL` does not use an IP address or fully qualified domain
    name. This is because all of these services are running on the same Docker network,
    and Docker Compose configures each container so that it can find the others via
    their service names. This means that we can easily configure URLs like this to
    simply point at the service name and internal port for the container we need to
    connect to. And, if we rearrange things, these names will continue to point to
    the right container in our stack. They are also nice because they make it quite
    explicit to the reader what the dependency is for that container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The *docker-compose.yaml* file can also refer to environment variables using
    the `${VARIABLE_NAME}` format, which makes it possible to pull in secrets without
    actually storing them in this file. Docker Compose also supports an [*.env*](https://docs.docker.com/compose/env-file)
    file, which can be very useful for handling secrets and environment variables
    that change between developers, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `depends_on` section defines a container that must be running before this
    container can be started. By default, `docker compose` only ensures that the container
    is running, not that it is healthy; however, you can leverage the `HEALTHCHECK`
    functionality in Docker, and the condition statement in Docker Compose, to require
    that the dependent service be healthy before Docker Compose brings the new service
    up. It is important to remember that this only impacts startup. Docker will report
    services that become unhealthy later on, but it does not take any action to correct
    the situation unless the container exits, in which case, Docker will restart the
    container if it is configured to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We discuss Docker’s health-check functionality in more detail in [“Container
    Health Checks”](ch06.html#health_checks). You can also find more information in
    the documentation for [Docker](https://dockr.ly/2MYnLZL) and [Docker Compose](https://dockr.ly/2wt366J).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ports` subsection allows you to define all the ports that you want to
    be mapped from the container to the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `zmachine` service uses only one new subsection, called `expose`. This
    section allows us to tell Docker that we want to expose this port to the other
    containers on the Docker network but not to the underlying host. This is why you
    do not provide a host port to map this port to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You might notice at this point that, while we expose a port for `zmachine`,
    we didn’t expose a port in the `mongo` service. It wouldn’t have hurt anything
    to expose the `mongo` port, but we didn’t need to because it is already exposed
    by the upstream [`mongo` *Dockerfile*](https://github.com/docker-library/mongo/blob/58bdba62b65b1d1e1ea5cbde54c1682f120e0676/3.2/Dockerfile#L95).
    This is sometimes a little opaque. `docker image history` on the built image can
    be helpful here.
  prefs: []
  type: TYPE_NORMAL
- en: Here we’ve used an example that is complex enough to expose you to some of the
    power of Docker Compose, but it is by no means exhaustive. There is a great deal
    else that you can configure in a *docker-compose.yaml* file, including security
    settings, resource quotas, and much more. You can find a lot of detailed information
    about configuration for Compose in the [official Docker Compose documentation](https://docs.docker.com/compose/compose-file).
  prefs: []
  type: TYPE_NORMAL
- en: Launching Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We configured a set of services for our application in the YAML file. That
    tells Compose what we’re going to launch and how to configure it. So, let’s get
    it up and running! To run our first Docker Compose command, we need to be sure
    that we are in the same directory as the *docker-compose.yaml* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are in the correct directory, you can confirm that the configuration
    is correct by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is fine, the command will print out your configuration file.
    If there is a problem, the command will print an error with details about the
    problem, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can build any containers that you need by using the `build` option. Any
    services that use images will be skipped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can start up your web service in the background by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Docker Compose prefixes the network and container names with a project name.
    By default, this is the name of the directory that contains your *docker-compose.yaml*
    file. Since this command was run in a directory named *compose*, you can see that
    everything starts with `compose` as the project name.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*Windows users*: when you first bring up the services, Windows may prompt you
    to authorize *vpnkit*, and Docker Desktop for Windows may also prompt you to share
    your disk. You must click both the “Allow access” and the “Share it” buttons for
    the network and volume shares to work and everything to come up properly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once everything comes up, we can take a quick look at the logs for all of the
    services ([Figure 8-1](#figure8-1)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![docker compose logs output](assets/dur3_0801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. `docker compose logs` output
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can’t see it well in print here, but if you’re following along, note that
    all of the logs are color coded by service and interlaced by the time Docker received
    the log lines. This makes it a lot easier to follow what’s happening, even though
    several services are logging messages at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can take Rocket.Chat a little while to set up the database and be ready
    to accept connections. Once the Rocket.Chat logs print a line that contains `SERVER
    RUNNING`, things should be ready to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have successfully launched a reasonably complex application
    that makes up a stack of containers. We’ll take a look at this simple application
    now so that you can see what we built and get a more complete understanding of
    the Compose tooling. While this next section does not strictly have anything to
    do with Docker itself, it is intended to show you how easy it is to use Docker
    Compose to set up complex and fully functioning web services.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Rocket.Chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this section, we’re going to diverge from Docker for a moment and take a
    look at Rocket.Chat. We’ll spend a few pages on it so that you know enough about
    it that you can hopefully start to appreciate how much easier it is to set up
    a complex environment using Docker Compose. Feel free to skip down to [“Exercising
    Docker Compose”](#exercise_dc), if you would like.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll shortly dig further into what’s happening behind the scenes of our setup.
    But to do that effectively, we should now take a brief moment to explore the application
    stack we built. [Rocket.Chat](https://rocket.chat), the primary application we
    launched with Docker Compose, is an open source chat client/server application.
    To see how it works, let’s launch a web browser and navigate to [*http://127.0.0.1:3000*](http://127.0.0.1:3000).
  prefs: []
  type: TYPE_NORMAL
- en: When you get there, you see the Admin Info screen for Rocket.Chat ([Figure 8-2](#figure8-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Admin Info screen](assets/dur3_0802.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-2\. Rocket.Chat Admin Info screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Fill out the form like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full name: **`student`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: **`student`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Email: **`student@example.com`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: **`student-pw!`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then click the blue Next button.
  prefs: []
  type: TYPE_NORMAL
- en: You then see the Organization Info screen ([Figure 8-3](#figure8-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Organization Info screen](assets/dur3_0803.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-3\. Rocket.Chat Organization Info screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The specifics of this form are not critical, but you can fill it in something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Organization name: **`training`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Organization type: **`Community`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Organization industry: **`Education`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Organization size: **`1-10 people`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Country: **`United States`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then click the blue Next button.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you see the Register Your Server screen ([Figure 8-4](#figure8-4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Register Your Server screen](assets/dur3_0804.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-4\. Rocket.Chat Register Your Server screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can simply delete and uncheck everything and then click the small blue “Continue
    as standalone” link. You then see the Standalone Server Configuration screen ([Figure 8-5](#figure8-5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Standalone Server Confirmation screen](assets/dur3_0805.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-5\. Rocket.Chat Standalone Server Confirmation screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click the blue Confirm button.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are using `localhost` or something other than 127.0.0.1 to reach Rocket.Chat
    in your browser, you may get a pop-up window asking if you would like to update
    the `SITE_URL`. In most cases, go ahead and let it update that value so that it
    matches what you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you are now logged in to a fully functional chat client, but
    you aren’t done yet. The Docker Compose configuration launched an instance of
    a [Hubot](https://hubot.github.com) chat assistant and the mysterious zmachine,
    so let’s take a look at those.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Rocket.Chat server is brand new, it doesn’t yet have a user that our
    bot can use. Let’s remedy that.
  prefs: []
  type: TYPE_NORMAL
- en: Start by clicking the top of the left sidebar, where you see a purple box with
    the letter *S* in it. Click Administration in the pop-up menu ([Figure 8-6](#figure8-6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Administration sidebar](assets/dur3_0806.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-6\. Rocket.Chat Administration sidebar
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the Administration panel, click Users ([Figure 8-7](#figure8-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat User screen](assets/dur3_0807.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-7\. Rocket.Chat User screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On the top-far-right side of the screen, click the New button to display the
    Add User screen ([Figure 8-8](#figure8-8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Add User screen](assets/dur3_0808.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-8\. Rocket.Chat Add User screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Fill out the form as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: **`hubot`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: **`hubot`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Email: **`hubot@example.com`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click: **`Verified` (Blue)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: **`bot-pw!`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Roles: **`bot`**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disable: **`Send welcome email` (Gray)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Save to create the user.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the bot can log in, we also need to disable two-factor authentication,
    which is enabled by default. To do this, click Settings at the bottom of the Administration
    sidebar on the left side of your browser ([Figure 8-9](#figure8-9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Administration settings](assets/dur3_0809.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-9\. Rocket.Chat Administration settings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Settings screen is displayed ([Figure 8-10](#figure8-10)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat Accounts settings](assets/dur3_0810.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-10\. Rocket.Chat Accounts settings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the new text search bar, type `**totp**`, then click the Open button under
    Accounts.
  prefs: []
  type: TYPE_NORMAL
- en: You should now see a long list of settings ([Figure 8-11](#figure8-11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat TOTP settings](assets/dur3_0811.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-11\. Rocket.Chat TOTP settings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Scroll down to the Two Factor Authentication section, expand it, and then deselect
    the Enable Two Factor Authentication option.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have done this, click “Save changes.”
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the left side of the Administration panel, click the X to close
    the panel ([Figure 8-12](#figure8-12)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat close Administration panel](assets/dur3_0812.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-12\. Rocket.Chat close Administration panel
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the left side panel under Channels, click “general” ([Figure 8-13](#figure8-13)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Rocket.Chat General channel](assets/dur3_0813.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-13\. Rocket.Chat general channel
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'And finally, if you don’t already see a message in the channel that “Hubot
    has joined the channel,” go ahead and tell Docker Compose to restart the Hubot
    container. This will force Hubot to try and log into the chat server again, now
    that there is a user for the service to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If everything went according to plan, you should now be able to navigate back
    to your web browser and send commands to Hubot in the chat window.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Hubot should auto-join the General channel when it logs into the server, but
    just in case, you can send the following message in the General channel to explicitly
    invite Hubot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You may get a message from the internal admin `rocket.cat` that says “@hubot
    is already in here.” This is perfectly fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The environment variables used to configure Hubot defined its alias as a period.
    So you can now try typing `. help` to test that the bot is responding. If everything
    is working, you should get a list of commands that the bot understands and will
    respond to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, try typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Hubot should respond with `PONG`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: then Hubot will tell you what the time is set to on the server.
  prefs: []
  type: TYPE_NORMAL
- en: So, for one last diversion, try creating a new chat channel by typing `/create
    zmachine` in the chat window. You should now be able to click on the new `zmachine`
    channel in the left sidebar and invite Hubot with the chat command `/invite @hubot`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'When you do this, Hubot might say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This is nothing to be concerned about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, try typing the following commands into the chat window to play a chat-based
    version of the famous game [*Colossal Cave Adventure*](https://en.wikipedia.org/wiki/Interactive_fiction#Adventure):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Interactive fiction can be addictive and a huge time sink. You have been warned.
    That being said, if you aren’t already familiar with it and are interested in
    learning more, take a look at some of these resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Definition of interactive fiction](https://en.wikipedia.org/wiki/Interactive_fiction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Emulator](https://davidgriffith.gitlab.io/frotz)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Development](https://ganelson.github.io/inform-website)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Games](https://oreil.ly/IrOLh)^([1](ch08.html#idm46803138496976))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Competition](https://ifcomp.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ve now seen how easy it can be to configure, launch, and manage complex
    web services that require multiple components to accomplish their jobs using Docker
    Compose. In the next section, we will explore a few more of the features that
    Docker Compose includes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You could avoid much of the Rocket.Chat setup by providing MongoDB with a preconfigured
    Rocket.Chat database, but it felt important to remove any magic from this example
    to make it clearer how everything fits together.
  prefs: []
  type: TYPE_NORMAL
- en: Exercising Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have the full Rocket.Chat stack running and understand what the
    application is doing, we can dig in to get a little more insight into how the
    services are running. Some of the common Docker commands are also exposed as Compose
    commands, but for a specific stack rather than a single container or all of the
    containers on a host. You can run `docker compose top` to see an overview of your
    containers and the processes that are running in them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to how you would normally enter a running Linux container using the
    `docker container exec` command, you can run commands inside containers via the
    Docker Compose tooling using the `docker compose exec` command. Because `docker
    compose` is a newer tool, it provides some convenient shortcuts over the standard
    `docker` commands. In the case of `docker compose exec`, you do not need to pass
    in `-i -t`, and you can use the Docker Compose service name instead of trying
    to remember the container ID or name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`docker compose logs` and `docker compose exec` are probably the most useful
    commands for troubleshooting. If Docker Compose cannot build your image or start
    your container at all, you will need to fall back to the standard `docker` commands
    to debug your image and container, as we discussed in [“Troubleshooting Broken
    Builds”](ch04.html#broken_builds) and [“Getting Inside a Running Container”](ch06.html#inside_containers).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use Docker Compose to `start` and `stop` and, in most environments,
    `pause` and `unpause` either a single container or all of your containers, depending
    on what you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, when you want to tear everything down and delete all the containers
    created by Docker Compose, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When you delete the MongoDB container using the `docker compose down` command,
    all data in the MongoDB instance will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Compose offers a few important capabilities that can help you significantly
    improve the flexibility of your *docker-compose.yaml* files. In this section,
    we will explore how you can avoid hardcoding many configuration values into your
    *docker-compose.yaml* files while still making them easy to use by default.
  prefs: []
  type: TYPE_NORMAL
- en: Default Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we take a look at the *services:rocketchat:environment* section of the *docker-compose.yaml*
    file, we will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we look at *docker-compose-defaults.yaml* inside the same directory,
    we will see that this same section looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This is using a technique called [*variable interpolation*](https://docs.docker.com/compose/compose-file/#interpolation)
    that Docker Compose has borrowed directly from many common Unix shells, like `bash`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the original file, the environment variable `ROCKETCHAT_PASSWORD` is hardcoded
    to the value `"bot-pw!"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'By using this new approach, we are stating that we want `ROCKETCHAT_PASSWORD`
    to be set to the value of the `HUBOT_ROCKETCHAT_PASSWORD` variable if it is set
    in the user’s environment, and if it is not, then `ROCKETCHAT_PASSWORD` should
    be set to the default value of `bot-pw!`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This provides us with a great deal of flexibility since we can now make almost
    everything configurable while still providing reasonable defaults for the most
    common use case. We can easily test this out by running `docker compose up` with
    the new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, this will result in the exact same stack that we spun up earlier.
    However, we could easily make changes to it now by simply setting one or more
    environment variables in our terminal before running our `docker compose` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In the examples here, Docker Compose will treat an empty environment variable
    exactly the same as one that is set to an empty string. If an empty string is
    a valid value in your use case, then you will want to modify the format of the
    variable substitution line so that it looks like this: `${VARIABLE_NAME-default-value}`.
    We recommend reading through [the documentation for this feature](https://docs.docker.com/compose/compose-file/#interpolation)
    so that you understand all the possibilities.'
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty nice, but what if we don’t want to provide a default value at
    all and instead want to force the user to set something? We can do this pretty
    easily as well.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some readers might be uncomfortable with the fact that we are passing in the
    password as part of the command line, since those passwords might be viewable
    in the system process list, etc., but don’t worry—we will address that in just
    a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Mandatory Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set a mandatory value, we simply need to alter the variable substitution
    line a bit. It seems like a bad idea to pass in a default password, so let’s go
    ahead and make that value required.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *docker-compose-defaults.yaml* file, `ROCKETCHAT_PASSWORD` is defined
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the newer *docker-compose-env.yaml* file, we can see that it is defined
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of containing a default value, this approach defines an error string
    if the variable is not set to a nonempty string in the environment. If we try
    to simply spin up these services now, we will get an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The output gives us a few hints about what might be wrong, but the last two
    lines are pretty clear, and the final message is the exact error message that
    we defined, so it can be set to whatever makes the most sense in the situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go ahead and pass in our own password, then everything spins up just
    fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The dotenv File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Passing in a single environment variable is not that difficult, but if you need
    to pass in a lot of custom values, or even one real secret, then setting them
    in the local terminal isn’t ideal. This is where the *.env* (*dotenv*) file can
    be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: The *.env* file is a [special file standard](https://www.dotenv.org/docs/security/env)
    that is intended to be parsed by programs that need additional configuration information
    that is specific to the local environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding use case, we must set a password to spin up our Docker Compose
    environment. We can pass in the environment every time, but this isn’t ideal for
    at least a few reasons. It would be nice if we could set it in a way that is reasonably
    secure for a single-user environment and that will also make our lives a bit easier
    and less error prone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In essence, a *.env* file is simply a list of key/value pairs. Since this file
    is intended to be unique to the local environment and will often contain at least
    one secret, we should start by ensuring that we will never accidentally commit
    these files into our revision control system. To do this with `git`, we can simply
    make sure that our *.gitignore* file includes *.env*, which, in this case, it
    already does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that we are on a single-user system, we can now safely create a *.env*
    file in the same directory that contains our *docker-compose.yaml* file(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, let’s go ahead and make the contents of our *.env* file look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We could add many more key/value pairs to this file, but to keep things simple,
    we are only focusing on this one password. If you run `git status` after creating
    this file, you should notice that `git` is completely ignoring the new file, which
    is exactly what we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A *.env* file is not a Unix shell script. There are subtle but important differences
    between this format and how you might define variables in a standard shell script.
    The most important one is that, in most circumstances, you should not surround
    values with quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, when we ran `docker compose -f docker-compose-env.yaml
    up -d` without setting the `HUBOT_ROCKETCHAT_PASSWORD`, we got an error, but if
    we try this again after creating the *.env* file, things should work just fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s confirm that the value that has been assigned to `ROCKETCHAT_PASSWORD`
    is what we set it to in the *.env* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the value is indeed set to what we defined in the *.env* file.
    This is because Docker Compose will always read in the key/value pairs that are
    defined in a *.env* file that lives in the same directory as the *docker-compose.yaml*
    file that we are using.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand the precedence that is in effect here. The very
    first thing that Docker Compose does is read all the defaults that are set in
    the *docker-compose.yaml* file. It then reads the *.env* file and overrides any
    of the defaults, which are values defined in the file. Then it finally looks at
    any environment variables that are set in the local environment and overwrites
    values previously defined with these.
  prefs: []
  type: TYPE_NORMAL
- en: This means that the defaults in the file should be the most common settings,
    then each user can define their common changes in the local *.env* file, and finally,
    they can rely on local environment variables when they need to make an unusual
    change for a specific use case. Using these features with Docker Compose helps
    ensure that you can build a very repeatable process that still contains enough
    flexibility to cover most common workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are additional features of Docker Compose that we do not cover, like [override
    files](https://docs.docker.com/compose/extends). As you start to use Docker Compose
    more, it is worth your time to review the [documentation](https://docs.docker.com/compose)
    so that you are aware of any additional features that might be useful for your
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap-Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now have a very good feel for the types of things you can accomplish
    with Docker Compose and how you can use this tool to decrease the toil and increase
    the repeatability of your development environments.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore some of the tools that are available to
    help you scale Docker inside your data center and in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](ch08.html#idm46803138496976-marker)) Full URL: [*https://ifarchive.org/indexes/if-archiveXgamesXzcode.html*](https://ifarchive.org/indexes/if-archiveXgamesXzcode.html)'
  prefs: []
  type: TYPE_NORMAL
