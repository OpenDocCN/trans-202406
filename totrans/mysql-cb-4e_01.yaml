- en: Chapter 1\. Using the mysql Client Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1.0 Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL database system uses a client-server architecture. The server, *mysqld*,
    is the program that actually manipulates databases. To tell the server what to
    do, use a client program that communicates your intent by means of statements
    written in Structured Query Language (SQL). Client programs are written for diverse
    purposes, but each interacts with the server by connecting to it, sending SQL
    statements to have database operations performed, and receiving the results.
  prefs: []
  type: TYPE_NORMAL
- en: Clients are installed locally on the machine from which you want to access MySQL,
    but the server can be installed anywhere, as long as clients can connect to it.
    Because MySQL is an inherently networked database system, clients can communicate
    with a server running locally on your own machine or somewhere on the other side
    of the planet.
  prefs: []
  type: TYPE_NORMAL
- en: The *mysql* program is one of the clients included in MySQL distributions. When
    used interactively, *mysql* prompts you for a statement, sends it to the MySQL
    server for execution, and displays the results. *mysql* also can be used noninteractively
    in batch mode to read statements stored in files or produced by programs. This
    enables use of *mysql* from within scripts or *cron* jobs, or in conjunction with
    other applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter describes *mysql*’s capabilities so that you can use it more effectively:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a MySQL account for using the `cookbook` database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying connection parameters and using option files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing SQL statements interactively and in batch mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling *mysql* output format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using user-defined variables to save information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To try for yourself the examples shown in this book, you need a MySQL user
    account and a database. The first two recipes in this chapter describe how to
    use *mysql* to set those up, based on these assumptions:'
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL server is running locally on your own system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your MySQL username and password are `cbuser` and `cbpass`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your database is named `cookbook`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you like, you can violate any of the assumptions. Your server need not be
    running locally, and you need not use the username, password, or database name
    that are used in this book. Naturally, in such cases, you must modify the examples
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you choose not to use `cookbook` as your database name, we recommend
    that you use a database dedicated to the examples shown here, not one that you
    also use for other purposes. Otherwise, the names of existing tables may conflict
    with those used in the examples, and you’ll have to make modifications that would
    be unnecessary with a dedicated database.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts that create the tables used in this chapter are located in the *tables*
    directory of the `recipes` distribution that accompanies *MySQL Cookbook*. Other
    scripts are located in the *mysql* directory. To get the `recipes` distribution,
    see the [Preface](preface01.xhtml#nch-preface).
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Setting Up a MySQL User Account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an account for connecting to your MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `CREATE` `USER` and `GRANT` statements to set up the account. Then use the
    account name and password to make connections to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connecting to a MySQL server requires a username and password. You may also
    need to specify the name of the host on which the server is running. If you don’t
    specify connection parameters explicitly, *mysql* assumes default values. For
    example, given no explicit hostname, *mysql* assumes that the server is running
    on the local host.
  prefs: []
  type: TYPE_NORMAL
- en: 'If someone else has already set up an account for you and granted privileges,
    alloying to create and modify `cookbook` database, just use that account. Otherwise,
    the following example shows how to use the *mysql* program to connect to the server
    and issue the statements that set up a user account with privileges for accessing
    a database named `cookbook`. The arguments to *mysql* include `-h` `localhost`
    to connect to the MySQL server running on the local host, `-u` `root` to connect
    as the MySQL `root` user, and `-p` to tell *mysql* to prompt for a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`PROCESS` privilege is required if you need to generate a dump file of your
    MySQL data. See also [Recipe 1.4](#nch-mysql-mysql-options)'
  prefs: []
  type: TYPE_NORMAL
- en: If when you attempt to invoke *mysql* the result is an error message that it
    cannot be found or is an invalid command, that means your command interpreter
    doesn’t know where *mysql* is installed. See [Recipe 1.3](#nch-mysql-mysql-notfound)
    for information about setting the `PATH` environment variable that the interpreter
    uses to find commands.
  prefs: []
  type: TYPE_NORMAL
- en: In the commands shown, the `$` represents the prompt displayed by your shell
    or command interpreter, and `mysql>` is the prompt displayed by *mysql*. Text
    that you type is shown in bold. Nonbold text (including the prompts) is program
    output; don’t type any of that.
  prefs: []
  type: TYPE_NORMAL
- en: When *mysql* prints the password prompt, enter the MySQL `root` password where
    you see the `******`; if the MySQL `root` user has no password, just press the
    Enter (or Return) key at the password prompt. You will see MySQL welcome prompt
    that could be slightly different for the MySQL version you use. Then enter the
    `CREATE` `USER` and `GRANT` statements as shown.
  prefs: []
  type: TYPE_NORMAL
- en: The `quit` command terminates your *mysql* session. You can also terminate a
    session by using an `exit` command or (under Unix) by typing Ctrl-D.
  prefs: []
  type: TYPE_NORMAL
- en: To grant the `cbuser` account access to a database other than `cookbook`, substitute
    the database name where you see `cookbook` in the `GRANT` statement. To grant
    access for the `cookbook` database to an existing account, omit the `CREATE` `USER`
    statement and substitute that account for `'cbuser'@'localhost'` in the `GRANT`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'MySQL user account record contains of two parts: username and the host. Username
    is an identified or the user who is accessing MySQL server. You can specify anything
    for this part. Hostname is IP address or name of the host from which this user
    will connect to MySQL server to. We discuss MySQL security model and user accounts
    in [Recipe 24.0](ch24.xhtml#nch-security-security-intro).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The hostname part of `''cbuser''@''localhost''` indicates the host *from which*
    you’ll connect to the MySQL server. To set up an account that will connect to
    a server running on the local host, use `localhost`, as shown. If you plan to
    connect to the server from another host, substitute that host in the `CREATE`
    `USER` and `GRANT` statements. For example, if you’ll connect to the server from
    a host named *myhost.example.com*, the statements look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It may have occurred to you that there’s a paradox in the procedure just described:
    to set up a `cbuser` account that can connect to the MySQL server, you must first
    connect to the server so that you can execute the `CREATE` `USER` and `GRANT`
    statements. I’m assuming that you can already connect as the MySQL `root` user
    because `CREATE` `USER` and `GRANT` can be used only by a user such as `root`
    that has the administrative privileges needed to set up other user accounts. If
    you can’t connect to the server as `root`, ask your MySQL administrator to create
    the `cbuser` account for you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `cbuser` account, verify that you can use it to connect
    to the MySQL server. From the host that was named in the `CREATE` `USER` statement,
    run the following command to do this (the host named after `-h` should be the
    host where the MySQL server is running):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now you can proceed to create the `cookbook` database and tables within it,
    as described in [Recipe 1.2](#nch-mysql-mysql-db). To make it easier to invoke
    *mysql* without specifying connection parameters each time, put them in an option
    file (see [Recipe 1.4](#nch-mysql-mysql-options)).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For additional information about administering MySQL accounts, see [Chapter 24](ch24.xhtml#nch-security).
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Creating a Database and a Sample Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a database and set up tables within it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a `CREATE` `DATABASE` statement to create the database, a `CREATE` `TABLE`
    statement for each table, and `INSERT` statements to add rows to the tables.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `GRANT` statement shown in [Recipe 1.1](#nch-mysql-mysql-account) sets up
    privileges for accessing the `cookbook` database but does not create the database.
    This section shows how to do that, and also how to create a table and load it
    with the sample data used for examples in the following sections. Similar instructions
    apply for creating other tables used elsewhere in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the MySQL server as shown at the end of [Recipe 1.1](#nch-mysql-mysql-account),
    then create the database like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have a database, you can create tables in it. First, select `cookbook`
    as the default database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a simple table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And populate it with a few rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For entering the `INSERT` statements more easily: after entering the first
    one, press the up arrow to recall it, press Backspace (or Delete) a few times
    to erase characters back to the last open parenthesis, then type the data values
    for the next statement. Or, to avoid typing the `INSERT` statements altogether,
    skip ahead to [Recipe 1.6](#nch-mysql-mysql-batch).'
  prefs: []
  type: TYPE_NORMAL
- en: The table you just created is named `limbs` and contains three columns to record
    the number of legs and arms possessed by various life forms and objects. The physiology
    of the alien in the last row is such that the proper values for the `arms` and
    `legs` columns cannot be determined; `NULL` indicates <q>unknown value.</q>
  prefs: []
  type: TYPE_NORMAL
- en: The `PRIMARY KEY` clause defines primary key that uniquely identifies table
    row. This prevents inserting ambigious data into the table and also helps MySQL
    to perform queriesfaster. We discuss ambigious data in [Chapter 18](ch18.xhtml#nch-dups)
    and performance issues in [Chapter 21](ch21.xhtml#nch-queryperf).
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the rows were added to the `limbs` table by executing a `SELECT`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you’re all set up with a database and a table. For additional
    information about executing SQL statements, see [Recipe 1.5](#nch-mysql-mysql-interactive)
    and [Recipe 1.6](#nch-mysql-mysql-batch).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this book, statements show SQL keywords such as `SELECT` or `INSERT` in uppercase
    for distinctiveness. That’s only a typographical convention; keywords can be any
    lettercase.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Finding mysql Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you invoke *mysql* client from the command line, your command interpreter
    can’t find it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the directory where *mysql* is installed to your `PATH` setting. Then you
    can run *mysql* from any directory easily.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your shell or command interpreter can’t find *mysql* when you invoke it,
    you’ll see some sort of error message. It might look like this under Unix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Or like this under Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'One way to tell your command interpreter where to find *mysql* is to type its
    full pathname each time you run it. The command might look like this under Unix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Or like this under Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Typing long pathnames gets tiresome pretty quickly. You can avoid doing so by
    changing location into the directory where *mysql* is installed before you run
    it. But if you do that, you may be tempted to put all your datafiles and SQL batch
    files in the same directory as *mysql*, thus unnecessarily cluttering up a location
    intended only for programs.
  prefs: []
  type: TYPE_NORMAL
- en: A better solution is to modify your `PATH` search-path environment variable,
    which specifies directories where the command interpreter looks for commands.
    Add to the `PATH` value the directory where *mysql* is installed. Then you can
    invoke *mysql* from any location by entering only its name, which eliminates pathname
    typing. For instructions on setting your `PATH` variable, read <q>Executing Programs
    from the Command Line</q> on the companion website (see the [Preface](preface01.xhtml#nch-preface)).
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, another way to avoid typing the pathname or changing into the *mysql*
    directory is to create a shortcut and place it in a more convenient location such
    as the desktop. This makes it easy to start *mysql* simply by opening the shortcut.
    To specify command options or the startup directory, edit the shortcut’s properties.
    If you don’t always invoke *mysql* with the same options, it might be useful to
    create one shortcut for each set of options you need. For example, create one
    shortcut to connect as an ordinary user for general work and another to connect
    as the MySQL `root` user for administrative purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Specifying mysql Command Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you invoke the *mysql* program without command options, it exits immediately
    with an error message.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must specify connection parameters. Do this on the command line, in an option
    file, or using a mix of the two.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you invoke *mysql* with no command options, the result may be an <q>access
    denied</q> error. To avoid that, connect to the MySQL server as shown in [Recipe
    1.1](#nch-mysql-mysql-account), using *mysql* like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Each option is the single-dash <q>short</q> form: `-h` and `-u` to specify
    the hostname and username, and `-p` to be prompted for the password. There are
    also corresponding double-dash <q>long</q> forms: `--host`, `--user`, and `--password`.
    Use them like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To see all options that *mysql* supports, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The way you specify command options for *mysql* also applies to other MySQL
    programs such as *mysqldump* and *mysqladmin*. For example, to generate a dump
    file named *cookbook.sql* that contains a backup of the tables in the `cookbook`
    database, execute *mysqldump* like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Some operations require an administrative MySQL account. The *mysqladmin* program
    can perform operations that are available only to the MySQL `root` account. For
    example, to stop the server, invoke *mysqladmin* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If the value that you use for an option is the same as its default value, you
    can omit the option. However, there is no default password. If you like, you can
    specify the password directly on the command line by using `-p`*`password`* (with
    *no space* between the option and the password) or `--password``=`*`password`*.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We don’t recommend this because the password is visible to onlookers and, on
    multiple-user systems, may be discoverable to other users who run tools such as
    *ps* that report process information or can read content of your shell history
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the default host is `localhost`, the same value we’ve been specifying
    explicitly, you can omit the `-h` (or `--host`) option from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'But suppose that you’d really rather not specify *any* options. How can you
    get *mysql* to <q>just know</q> what values to use? That’s easy because MySQL
    programs support option files:'
  prefs: []
  type: TYPE_NORMAL
- en: If you put an option in an option file, you need not specify it on the command
    line each time you invoke a given program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can mix command-line and option-file options. This enables you to store
    the most commonly used option values in a file but override them as desired on
    the command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of this section describes these capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying connection parameters using option files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To avoid entering options on the command line each time you invoke *mysql*,
    put them in an option file for *mysql* to read automatically. Option files are
    plain-text files:'
  prefs: []
  type: TYPE_NORMAL
- en: Under Unix, your personal option file is named *.my.cnf* in your home directory.
    There are also site-wide option files that administrators can use to specify parameters
    that apply globally to all users. You can use the *my.cnf* file in the */etc*
    or */etc/mysql* directory, or in the *etc* directory under the MySQL installation
    directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under Windows, files you can use include the *my.ini* or *my.cnf* file in your
    MySQL installation directory (for example, *C:\Program Files\MySQL\MySQL Server
    8.0*), your Windows directory (likely *C:\WINDOWS*), or the *C:\* directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To see the exact list of permitted option-file locations, invoke *mysql* `--help`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates the format used in MySQL option files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With connection parameters listed in the `[client]` group as just shown, you
    can connect as `cbuser` by invoking *mysql* with no options on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The same holds for other MySQL client programs, such as *mysqldump*.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The option `password` is stored in the configuraiton file in plain text format
    and any user, who has access to this file, can read it. If you want to secure
    the connection credentials you should use *mysql_config_editor* to store them
    securely.
  prefs: []
  type: TYPE_NORMAL
- en: '*mysql_config_editor* stores connection credentials in a file, named *.mylogin.cnf*,
    located in your home directory under Unix and in the *%APPDATA%\MySQL* directory
    under Windows. It only supports connection parameters `host`, `user`, `password`
    and `socket`. Option `--login-path` specifies a group under which credentials
    are stored. Default is `[client]`'
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example on how to use *mysql_config_editor* to create encrypted login
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL option files have these characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Lines are written in groups (or sections). The first line of a group specifies
    the group name within square brackets, and the remaining lines specify options
    associated with the group. The example file just shown has a `[client]` group
    and a `[mysql]` group. To specify options for the server, *mysqld*, put them in
    a `[mysqld]` group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The usual option group for specifying client connection parameters is `[client]`.
    This group actually is used by all the standard MySQL clients. By listing an option
    in this group, you make it easier to invoke not only *mysql*, but also other programs
    such as *mysqldump* and *mysqladmin*. Just make sure that any option you put in
    this group is understood by *all* client programs. Otherwise, invoking any client
    that does not understand it results in an <q>unknown option</q> error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can define multiple groups in an option file. By convention, MySQL clients
    look for parameters in the `[client]` group and in the group named for the program
    itself. This provides a convenient way to list general client parameters that
    you want all client programs to use, but you can still specify options that apply
    only to a particular program. The preceding sample option file illustrates this
    convention for the *mysql* program, which gets general connection parameters from
    the `[client]` group and also picks up the `skip-auto-rehash` and `pager` options
    from the `[mysql]` group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within a group, write option lines in *`name=value`* format, where *`name`*
    corresponds to an option name (without leading dashes) and *`value`* is the option’s
    value. If an option takes no value (such as `skip-auto-rehash`), list the name
    by itself with no trailing *`=value`* part.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In option files, only the long form of an option is permitted, not the short
    form. For example, on the command line, the hostname can be given using either
    `-h` *`host_name`* or `--host``=`*`host_name`*. In an option file, only `host=`*`host_name`*
    is permitted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many programs, *mysql* and *mysqld* included, have program variables in addition
    to command options. (For the server, these are called *system variables*; see
    [Recipe 22.1](ch22.xhtml#nch-admin-server-config).) Program variables can be specified
    in option files, just like options. Internally, program variable names use underscores,
    but in option files, you can write options and variables using dashes or underscores
    interchangeably. For example, `skip-auto-rehash` and `skip_auto_rehash` are equivalent.
    To set the server’s `sql_mode` system variable in a `[mysqld]` option group, `sql_mode=`*`value`*
    and `sql-mode=`*`value`* are equivalent. (Interchangeability of dash and underscore
    also applies for options or variables specified on the command line.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In option files, spaces are permitted around the `=` that separates an option
    name and value. This contrasts with command lines, where no spaces around `=`
    are permitted. If an option value contains spaces or other special characters,
    you can quote it using single or double quotes. The `pager` option illustrates
    this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s common to use an option file to specify options for connection parameters
    (such as `host`, `user`, and `password`). However, the file can list options that
    have other purposes. The `pager` option shown for the `[mysql]` group specifies
    the paging program that *mysql* should use for displaying output in interactive
    mode. It has nothing to do with how the program connects to the server. We do
    not recommend to put `password` into the option file, because it is stored as
    plain text and could be discovered by users who have filesystem access to the
    configuration file while not necessary has access to the MySQL installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a parameter appears multiple times in an option file, the last value found
    takes precedence. Normally, you should list any program-specific groups following
    the `[client]` group so that if there is any overlap in the options set by the
    two groups, the more general options are overridden by the program-specific values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines beginning with `#` or `;` characters are ignored as comments. Blank lines
    are ignored, too. `#` can be used to write comments at the end of option lines,
    as shown for the `pager` option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options that specify file or directory pathnames should be written using `/`
    as the pathname separator character, even under Windows, which uses `\` as the
    pathname separator. Alternatively, write `\` by doubling it as `\\` (this is necessary
    because `\` is the MySQL escape character in strings).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To find out which options the *mysql* program will read from option files,
    use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the *my_print_defaults* utility, which takes as arguments
    the names of the option-file groups that it should read. For example, *mysqldump*
    looks in both the `[client]` and `[mysqldump]` groups for options. To check which
    option-file settings are in those groups, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Mixing command-line and option-file parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s possible to mix command-line options and options in option files. Perhaps
    you want to list your username and server host in an option file, but would rather
    not store your password there. That’s okay; MySQL programs first read your option
    file to see what connection parameters are listed there, then check the command
    line for additional parameters. This means you can specify some options one way,
    and some the other way. For example, you can list your username and hostname in
    an option file, but use a password option on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Command-line parameters take precedence over parameters found in your option
    file, so to override an option file parameter, just specify it on the command
    line. For example, you can list your regular MySQL username and password in the
    option-file for general-purpose use. Then, if you must connect on occasion as
    the MySQL `root` user, specify the user and password options on the command line
    to override the option-file values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To explicitly specify <q>no password</q> when there is a nonempty password
    in the option file, use `--skip-password` on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From this point on, I’ll usually show commands for MySQL programs with no connection-parameter
    options. I assume that you’ll supply any parameters that you need, either on the
    command line or in an option file.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting option files from other users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On a multiple-user operating system such as Unix, protect the option file located
    in your home directory to prevent other users from reading it and finding out
    how to connect to MySQL using your account. Use *chmod* to make the file private
    by setting its mode to enable access only by yourself. Either of the following
    commands do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, you can use Windows Explorer to set file permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Executing SQL Statements Interactively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve started *mysql*. Now you want to send SQL statements to the MySQL server
    to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just type them in, letting *mysql* know where each one ends. Alternatively,
    specify <q>one-liners</q> directly on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you invoke *mysql*, by default, it displays a `mysql>` prompt to tell
    you that it’s ready for input. To execute an SQL statement at the `mysql>` prompt,
    type it in, add a semicolon (`;`) at the end to signify the end of the statement,
    and press Enter. An explicit statement terminator is necessary; *mysql* doesn’t
    interpret Enter as a terminator because you can enter a statement using multiple
    input lines. The semicolon is the most common terminator, but you can also use
    `\g` (<q>go</q>) as a synonym for the semicolon. Thus, the following examples
    are equivalent ways of issuing the same statement, even though they are entered
    differently and terminated differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: For the second statement, *mysql* changes the prompt from `mysql>` to `->` to
    let you know that it’s still waiting to see the statement terminator.
  prefs: []
  type: TYPE_NORMAL
- en: The `;` and `\g` statement terminators are not part of the statement itself.
    They’re conventions used by the *mysql* program, which recognizes these terminators
    and strips them from the input before sending the statement to the MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some statements generate output lines that are so long they take up more than
    one line on your terminal, which can make query results difficult to read. To
    avoid this problem, generate <q>vertical</q> output by terminating the statement
    with `\G` rather than with `;` or `\g`. The output shows column values on separate
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To produce vertical output for all statements executed within a session, invoke
    *mysql* with the `-E` (or `--vertical`) option. To produce vertical output only
    for those results that exceed your terminal width, use `--auto-vertical-output`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a statement directly from the command line, specify it using the
    `-e` (or `--execute`) option. This is useful for <q>one-liners.</q> For example,
    to count the rows in the `limbs` table, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute multiple statements, separate them with semicolons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*mysql* can also read statements from a file or from another program (see [Recipe
    1.6](#nch-mysql-mysql-batch)).'
  prefs: []
  type: TYPE_NORMAL
- en: 1.6 Executing SQL Statements Read from a File or Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want *mysql* to read statements stored in a file so that you need not enter
    them manually. Or you want *mysql* to read the output from another program.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To read a file, redirect *mysql*’s input, or use the `source` command. To read
    from a program, use a pipe.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the *mysql* program reads input interactively from the terminal,
    but you can feed it statements using other input sources such as a file or program.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose MySQL supports batch mode that is convenient for executing
    a set of statements on repeated occasions without entering them manually each
    time. Batch mode makes it easy to set up *cron* jobs that run with no user intervention.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an SQL script for *mysql* to execute in batch mode, put your statements
    in a text file. Then invoke *mysql* and redirect its input to read from that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Statements read from an input file substitute for what you’d normally enter
    interactively by hand, so they must be terminated with `;`, `\g`, or `\G`, just
    as if you were entering them manually. Interactive and batch modes do differ in
    default output format. For interactive mode, the default is tabular (boxed) format.
    For batch mode, the default is tab-delimited format. To override the default,
    use the appropriate command option (see [Recipe 1.7](#nch-mysql-mysql-output)).
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL scripts also are useful for distributing sets of SQL statements to other
    people. That is, in fact, how we distribute SQL examples for this book. Many of
    the examples shown here can be run using script files available in the accompanying
    `recipes` distribution (see the [Preface](preface01.xhtml#nch-preface)). Feed
    these files to *mysql* in batch mode to avoid typing statements yourself. For
    example, when a recipe shows a `CREATE` `TABLE` statement that defines a table,
    you’ll usually find an SQL batch file in the `recipes` distribution that you can
    use to create (and perhaps load data into) the table. Recall that [Recipe 1.2](#nch-mysql-mysql-db)
    shows the statements for creating and populating the `limbs` table. Those statements
    were shown as you would enter them manually, but the *tables* directory of the
    `recipes` distribution includes a *limbs.sql* file that contains statements to
    do the same thing. The file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute the statements in this SQL script file, change location into the
    *tables* directory of the `recipes` distribution and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You’ll note that the script contains a statement to drop the table if it exists
    before creating the table anew and loading it with data. That enables you to experiment
    with the table, perhaps making changes to it, confident that you can easily restore
    it to its baseline state any time by running the script again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command just shown illustrates how to specify an input file for *mysql*
    on the command line. Alternatively, to read a file of SQL statements from within
    a *mysql* session, use a `source` *`filename`* command (or `\.` *`filename`*,
    which is synonymous):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: SQL scripts can themselves include `source` or `\.` commands to include other
    scripts. This gives you additional flexibility, but take care to avoid loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'A file to be read by *mysql* need not be written by hand; it could be program
    generated. For example, the *mysqldump* utility generates database backups by
    writing a set of SQL statements that re-create the database. To reload *mysqldump*
    output, feed it to *mysql*. For example, you can copy a database over the network
    to another MySQL server like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '*mysql* can also read a pipe, so it can take output from other programs as
    its input. *Any* command that produces output consisting of properly terminated
    SQL statements can be used as an input source for *mysql*. The dump-and-reload
    example can be rewritten to connect the two programs directly with a pipe, avoiding
    the need for an intermediary file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Program-generated SQL also can be useful for populating a table with test data
    without writing the `INSERT` statements by hand. Create a program that generates
    the statements, then send its output to *mysql* using a pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[Recipe 6.6](ch06.xhtml#nch-tblmgmt-tblmgmt-copy-mysqldump) discusses *mysqldump*
    further.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.7 Controlling mysql Output Destination and Format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want *mysql* output to go somewhere other than your screen. And you don’t
    necessarily want the default output format.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Redirect the output to a file, or use a pipe to send the output to a program.
    You can also control other aspects of *mysql* output to produce tabular, tab-delimited,
    HTML, or XML output; suppress column headers; or make *mysql* more or less verbose.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unless you send *mysql* output elsewhere, it goes to your screen. To save output
    from *mysql* in a file, use your shell’s redirection capability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run *mysql* interactively with the output redirected, you can’t see
    what you type, so in this case you usually also read the input from a file (or
    another program):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To send the output to another program (for example, parse the output of the
    query, use a pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The rest of this section shows how to control *mysql* output format.
  prefs: []
  type: TYPE_NORMAL
- en: Producing tabular or tab-delimited output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*mysql* chooses its default output format by whether it runs interactively
    or noninteractively. For interactive use, *mysql* writes output to the terminal
    using tabular (boxed) format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'For noninteractive use (when the input or output is redirected), *mysql* writes
    tab-delimited output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To override the default output format, use the appropriate command option.
    Consider a *sed* command shown earlier and change its parameters to obfuscate
    the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Because *mysql* runs noninteractively in that context, it produces tab-delimited
    output, which could be difficult to read than tabular output. Use the `-t` (or
    `--table`) option to produce more readable tabular output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The inverse operation is to produce batch (tab-delimited) output in interactive
    mode. To do this, use `-B` or `--batch`.
  prefs: []
  type: TYPE_NORMAL
- en: Producing HTML or XML output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*mysql* generates an HTML table from each query result set if you use the `-H`
    (or `--html`) option. This enables you to easily produce output for inclusion
    in a web page that shows a query result. Here’s an example (with line breaks added
    to make the output easier to read):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The first row of the table contains column headings. If you don’t want a header
    row, see the next section for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can save the output in a file, then view it with a web browser. For example,
    on Mac OS X, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To generate an XML document instead of HTML, use the `-X` (or `--xml`) option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You can reformat XML to suit a variety of purposes by running it through XSLT
    transforms. This enables you to use the same input to produce many output formats.
  prefs: []
  type: TYPE_NORMAL
- en: The `-H`, `--html` `-X`, and `--xml` options produce output only for statements
    that generate a result set, not for statements such as `INSERT` or `UPDATE`.
  prefs: []
  type: TYPE_NORMAL
- en: To write your own programs that generate XML from query results, see [Recipe
    13.15](ch13.xhtml#nch-xfer-xfer-xml-export).
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing column headings in query output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Tab-delimited format is convenient for generating datafiles for import into
    other programs. However, the first row of output for each query lists the column
    headings by default, which may not always be what you want. Suppose that a program
    named *summarize* produces descriptive statistics for a column of numbers. If
    you produce output from *mysql* to be used with this program, a column header
    row would throw off the results because *summarize* would treat it as data. To
    create output that contains only data values, suppress the header row with the
    `--skip-column-names` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying the <q>silent</q> option (`-s` or `--silent`) twice achieves the
    same effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Specifying the output column delimiter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In noninteractive mode, *mysql* separates output columns by tabs and there
    is no option for specifying the output delimiter. To produce output that uses
    a different delimiter, postprocess *mysql* output. Suppose that you want to create
    an output file for use by a program that expects values to be separated by colon
    characters (`:`) rather than tabs. Under Unix, you can convert tabs to arbitrary
    delimiters by using a utility such as *tr* or *sed*. Any of the following commands
    change tabs to colons (*`TAB`* indicates where you type a tab character):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The syntax differs among versions of *tr*; consult your local documentation.
    Also, some shells use the tab character for special purposes such as filename
    completion. For such shells, type a literal tab into the command by preceding
    it with Ctrl-V.
  prefs: []
  type: TYPE_NORMAL
- en: '*sed* is more powerful than *tr* because it understands regular expressions
    and permits multiple substitutions. This is useful for producing output in something
    like comma-separated values (CSV) format, which requires three substitutions:'
  prefs: []
  type: TYPE_NORMAL
- en: Escape any quote characters that appear in the data by doubling them, so that
    when you use the resulting CSV file, they won’t be interpreted as column delimiters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the tabs to commas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Surround column values with quotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*sed* permits all three substitutions to be performed in a single command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s cryptic, to say the least. You can achieve the same result with other
    languages that may be easier to read. Here’s a short Perl script that does the
    same thing as the *sed* command (it converts tab-delimited input to CSV output),
    and includes comments to document how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If you name the script *csv.pl*, use it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '*tr* and *sed* normally are unavailable under Windows. Perl may be more suitable
    as a cross-platform solution because it runs under both Unix and Windows. (On
    Unix systems, Perl is usually preinstalled. On Windows, it is freely available
    for you to install.)'
  prefs: []
  type: TYPE_NORMAL
- en: Another way to produce CSV output is to use the Perl Text::CSV_XS module, which
    was designed for that purpose. Utility *cvt_file.pl*, available in the recipes
    distribution, uses this module to construct a general-purpose file reformatter.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling mysql’s verbosity level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you run *mysql* noninteractively, not only does the default output format
    change, but it becomes more terse. For example, *mysql* doesn’t print row counts
    or indicate how long statements took to execute. To tell *mysql* to be more verbose,
    use `-v` or `--verbose`, specifying the option multiple times for increasing verbosity.
    Try the following commands to see how the output differs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The counterparts of `-v` and `--verbose` are `-s` and `--silent`, which also
    can be used multiple times for increased effect.
  prefs: []
  type: TYPE_NORMAL
- en: 1.8 Using User-Defined Variables in SQL Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use a value in one statement that is produced by an earlier statement.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Save the value in a user-defined variable to store it for later use.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To save a value returned by a `SELECT` statement, assign it to a user-defined
    variable. This enables you to refer to it in other statements later in the same
    session (but not *across* sessions). User variables are a MySQL-specific extension
    to standard SQL. They will not work with other database engines.
  prefs: []
  type: TYPE_NORMAL
- en: To assign a value to a user variable within a `SELECT` statement, use `@`*`var_name`*
    `:=` *`value`* syntax. The variable can be used in subsequent statements wherever
    an expression is permitted, such as in a `WHERE` clause or in an `INSERT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that assigns a value to a user variable, then refers to
    that variable later. This is a simple way to determine a value that characterizes
    some row in a table, then select that particular row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Another use for a variable is to save the result from `LAST_INSERT_ID()` after
    creating a new row in a table that has an `AUTO_INCREMENT` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`LAST_INSERT_ID()` returns the most recent `AUTO_INCREMENT` value. By saving
    it in a variable, you can refer to the value several times in subsequent statements,
    even if you issue other statements that create their own `AUTO_INCREMENT` values
    and thus change the value returned by `LAST_INSERT_ID()`. [Recipe 15.10](ch15.xhtml#nch-sequences-seq-simultaneous)
    discusses this technique further.'
  prefs: []
  type: TYPE_NORMAL
- en: 'User variables hold single values. If a statement returns multiple rows, the
    statement will fail with an error but the value from the first row is assigned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'If the statement returns no rows, no assignment takes place, and the variable
    retains its previous value. If the variable has not been used previously, its
    value is `NULL`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: SQL command `SHOW WARNINGS` returns informational messages about recoverable
    errors, such as assigning empty result to a variable or use of a deprecated feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set a variable explicitly to a particular value, use a `SET` statement.
    `SET` syntax can use either `:=` or `=` as the assignment operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You can assign a `SELECT` result to a variable, provided that you write it
    as a scalar subquery (a query within parentheses that returns a single value):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'User variable names are not case sensitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'User variables can appear only where expressions are permitted, not where constants
    or literal identifiers must be provided. It’s tempting to attempt to use variables
    for such things as table names, but it doesn’t work. For example, if you try to
    generate a temporary table name using a variable as follows, it fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: However, you *can* generate a prepared SQL statement that incorporates `@tbl_name`,
    then execute the result. [Recipe 6.4](ch06.xhtml#nch-tblmgmt-tblmgmt-unique-name)
    shows how.
  prefs: []
  type: TYPE_NORMAL
- en: '`SET` is also used to assign values to stored program parameters and local
    variables, and to system variables. For examples, see [Chapter 11](ch11.xhtml#nch-routines)
    and [Recipe 22.1](ch22.xhtml#nch-admin-server-config).'
  prefs: []
  type: TYPE_NORMAL
- en: 1.9 Customizing mysql Prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You opened several connections in different terminal windows and want to visually
    distinguish them.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set *mysql* prompt to custom value
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can customize *mysql* prompt by providing option `--prompt` on start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If the client already has been started you can use command *prompt* to change
    it interactively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Command *prompt*, like other *mysql* commands, supports short version: *\R*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify prompt value in the configuration file put option *prompt* under
    `[mysql]` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Quotes are optional and required only when you want to have special characters,
    such as a space in the end of the prompt string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can specify prompt using environment variable `MYSQL_PS1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'To reset prompt to its default value run command *prompt* without arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you used `MYSQL_PS1` environment variable the prompt default will be value
    of the `MYSQL_PS1` variable instead of `mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: '*mysql* prompt is highly customizable. You can set it to show current date,
    time, user account, default database, server host and other information about
    your database connection. You will find the full list of supported options in
    the [MySQL User Reference Manual](https://dev.mysql.com/doc/refman/8.0/en/mysql-commands.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To have a user account in the prompt use either special sequence `\u` to display
    just a user name or `\U` to show the full user account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If you connect to MySQL servers on different machines you may want to see the
    MySQL server host name in the prompt. A special sequence `\h` exists just for
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'To have the current default database in the prompt use the special sequence
    `\d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '*mysql* supports multiple options to include time into the prompt. You can
    have full date and time information or just part of it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You cannot specify current day of month unless you use full current date. This
    was reported at [MySQL Bug #72071](https://bugs.mysql.com/bug.php?id=72071) and
    still is not fixed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Special sequences can be combined together and with any other text. *mysql*
    uses UTF-8 character set and, if your terminal supports UTF-8 too, you can use
    smiley characters to make your prompt more impressive. For example, to have on
    hand information about connected user account, MySQL host, default database and
    current time you can set prompt to `\u@\h [ߓᜤ] (ߕᜒ:\m:\s)>` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 1.10 Using External Programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use external program without leaving *mysql* client command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use command *system* to call a program.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While MySQL allows to generate random passwords for itw own internal user accountes,
    it still does does not have an internal function which could be used to generate
    a safe user password for all other cases. Run command *system* to use one of the
    Operating System tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '*\!* is a short version of the *system* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '*pwgen* maybe not installed on your operating system. You need to install `pwgen`
    package before running this example.'
  prefs: []
  type: TYPE_NORMAL
- en: '*system* is a command of the *mysql* client and executed locally, using permissions
    belonging to the client. By default MySQL Server is running as user `mysql` though
    you can connect using any user account. In this case you will be able to access
    only those programs and files which are permitted for your operating system account.
    Thus regular user cannot access data directory, that belongs to the special user
    *mysqld* process is running as.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: For the same reason *system* does not execute any command on the remote server.
  prefs: []
  type: TYPE_NORMAL
- en: You may use any program, specify options, redirect output and pipe it to other
    commands. One useful insight which you can get from the operating system is how
    much physical resources are occupied by the *mysqld* process and compare it with
    data collected internally by the MySQL Server itself.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL stores information about memory usage in [`Performance Schema`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-memory-summary-tables.html).
    Its companion [`sys` schema](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-memory-summary-tables.html)
    contains views, allowing you to access this information easily. Particularly,
    you can find the total amount of allocated memory in human-readable format by
    querying view `sys.memory_global_total`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The chain of the operating system commands requests statistics about physical
    memory usage from the operating system and converts it into human-readable format.
    This example shows that not all allocated memory is instrumented inside MySQL
    Server.
  prefs: []
  type: TYPE_NORMAL
- en: Note, that you need to run *mysql* client on the same machine with your MySQL
    server for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: 1.11 Filtering and Processing Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This recipe works only on UNIX platforms!
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to change output format of the MySQL client beyond its built-in capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set *pager* to a chain of commands, filtering output in a way you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes formatting capabilities of the *mysql* client do not allow you to
    work with the result set easily. For example, the number of returned rows could
    be too big to fit the screen. Or the number of columns makes the result too wide
    to comfortably read it on the screen. Standard operating system pagers, such as
    *less* or *more*, allow you to work with long wide texts more comfortably.
  prefs: []
  type: TYPE_NORMAL
- en: You can specify which pager to use either by providing option `--pager` when
    you start *mysql* client or interactively, by using *pager* command and its shorter
    version *\P*. You can specify any argument for the pager.
  prefs: []
  type: TYPE_NORMAL
- en: To tell *mysql* to use *less* as a pager specify option `--pager=less` or assign
    this value interactively. Provide configuration parameters for the command similarly
    as when you are working in your favorite shell. In the example below I specified
    options `-F` and `-X` so *less* exits if result set is small enough to fit the
    screen and works normally when needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: You can use `pager` not only to beautify output, but to run any command which
    can process text. One common use is to search for a pattern in the data, printed
    by the diagnostic statement, using *grep*. For example, to watch only `History
    list length` in the long `SHOW ENGINE INNODB STATUS` output, use *\P grep “History
    list length”*. Once you are done with the search, reset pager with empty *pager*
    command or instruct *mysql* to disable `pager` and print to `STDOUT` using *nopager*
    or *\n*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Another useful option during diagnostic is sending output nowhere. For example,
    to measure effectiveness of a query you may want to examine session status variables
    `Handler_*`. In this case you are not interested in the result of the query, but
    only in the output of the following diagnostic command. Even more, you may want
    to send diagnostic data to professional database consultants, but do not want
    them to see actual query output due to security considerations. In this case instruct
    `pager` to use a hashing function or to send output to nowhere.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To redirect output of a query, information messages, and all commands you type
    into a file use *pager cat > FILENAME*. To redirect to a file and still see the
    output use redirect to *tee* or *mysql* own command *tee* and its short version
    *\T*. Built-in command *tee* works on both UNIX and Windows platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can chain together *pager* commands using pipes. For example, to print
    content of the `limbs` table in different font styles set *pager* to chain of
    calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '*tr -d '' ''* to remove extra spaces'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*awk -F''|'' ''{print “+"$2"+\033[3m"$3"\033[0m+\033[1m"$4"\033[0m"$5"+"}''*
    to add styles to the text'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*column -s ''+'' -t’* for nicely formatted output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
