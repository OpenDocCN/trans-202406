["```\n# base type\ntype Todo {\n  id: ID\n  name: String\n  completed: Boolean\n}\n\n# Query definitions\ntype Query {\n  getTodo(id: ID): Todo\n  listTodos: [Todo]\n}\n\n# Mutation definitions\ntype Mutation {\n  createTodo(input: Todo): Todo\n}\n\n# Subscription definitions\ntype Subscription {\n  onCreateTodo: Todo\n}\n```", "```\nGET -> Query\nPUT -> Mutation\nPOST -> Mutation\nDELETE -> Mutation\nPATCH -> Mutation\n```", "```\nquery {\n  listTodos {\n    id\n    name\n    completed\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"listTodos\": [\n      { \"id\": \"0\", \"name\": \"buy groceries\", \"completed\": false },\n      { \"id\": \"1\", \"name\": \"exercise\", \"completed\": true }\n    ]\n  }\n}\n```", "```\nquery {\n  getTodo(id: \"0\") {\n    name\n    completed\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"getTodo\": {\n      \"name\": \"buy groceries\"\n      \"completed\": false\n    }\n  }\n}\n```", "```\n~ npx create-react-app notesapp\n~ cd notesapp\n~ npm install aws-amplify antd uuid\n```", "```\n~ amplify init\n\n? Enter a name for the project: notesapp\n? Enter a name for the environment: dev\n? Choose your default editor: <your editor of choice>\n? Choose the type of app that you're building: javascript\n? What javascript framework are you using: react\n? Source Directory Path: src\n? Distribution Directory Path: build\n? Build Command: npm run-script build\n? Start Command: npm run-script start\n? Do you want to use an AWS profile? Y\n```", "```\n~ amplify add api\n\n? Please select from one of the below mentioned services: GraphQL\n? Provide API name: notesapi\n? Choose the default authorization type for the API: API Key\n? Enter a description for the API key: public (or some description)\n? After how many days from now the API key should expire: 365 (or your\n  preferred expiration)\n? Do you want to configure advanced settings for the GraphQL API: N\n? Do you have an annotated GraphQL schema? N\n? Do you want a guided schema creation? Y\n? What best describes your project: Single object with fields\n? Do you want to edit the schema now? Y\n```", "```\ntype Note @model {\n  id: ID!\n  clientId: ID\n  name: String!\n  description: String\n  completed: Boolean\n}\n```", "```\n~ amplify push\n\n? Are you sure you want to continue? Yes\n? Do you want to generate code for your newly created GraphQL API: Yes\n? Choose the code generation language target: javascript\n? Enter the file name pattern of graphql queries, mutations and\n  subscriptions: src/graphql/**/*.js\n? Do you want to generate/update all possible GraphQL operations -\n  queries, mutations and subscriptions: Y\n? Enter maximum statement depth [increase from default if your schema is\n  deeply nested]: 2\n```", "```\n- amplify console api\n\n> Choose GraphQL\n```", "```\nmutation createNote {\n  createNote(input: {\n    name: \"Book flight\"\n    description: \"Flying to Paris on June 1 returning June 10\"\n    completed: false\n  }) {\n    id name description completed\n  }\n}\n```", "```\nquery listNotes {\n  listNotes {\n    items {\n      id\n      name\n      description\n      completed\n    }\n  }\n}\n```", "```\nquery getNote {\n  getNote(id: \"<NOTE_ID>\") {\n    id\n    name\n    description\n    completed\n  }\n}\n```", "```\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n```", "```\nimport React, {useEffect, useReducer} from 'react'\nimport { API } from 'aws-amplify'\nimport { List } from 'antd'\nimport 'antd/dist/antd.css'\nimport { listNotes } from './graphql/queries'\n```", "```\nconst [state, dispatch] = useReducer(reducer <function>, initialState <any>)\n```", "```\n/* Example of some basic state */\nconst initialState = { notes: [] }\n\n/* Example of a basic reducer */\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'SET_NOTES':\n      return { ...state, notes: action.notes }\n    default:\n      return state\n  }\n}\n\n/* Implementing useReducer */\nconst [state, dispatch] = useReducer(reducer: <function>, initialState: <any>)\n\n/* Sending an update to the reducer */\nconst notes = [{ name: 'Hello World' }]\ndispatch({ type: 'SET_NOTES', notes: notes })\n\n/* Using the state in your app */\n{\n  state.notes.map(note => <p>{note.name}</p>)\n}\n```", "```\nconst initialState = {\n  notes: [],\n  loading: true,\n  error: false,\n  form: { name: '', description: '' }\n}\n```", "```\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'SET_NOTES':\n      return { ...state, notes: action.notes, loading: false }\n    case 'ERROR':\n      return { ...state, loading: false, error: true }\n    default:\n      return state\n  }\n}\n```", "```\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n}\n```", "```\nasync function fetchNotes() {\n  try {\n    const notesData = await API.graphql({\n      query: listNotes\n    })\n    dispatch({ type: 'SET_NOTES', notes: notesData.data.listNotes.items })\n  } catch (err) {\n    console.log('error: ', err)\n    dispatch({ type: 'ERROR' })\n  }\n}\n```", "```\nuseEffect(() => {\n  fetchNotes()\n}, [])\n```", "```\nreturn (\n  <div style={styles.container}>\n    <List\n      loading={state.loading}\n      dataSource={state.notes}\n      renderItem={renderItem}\n    />\n  </div>\n)\n```", "```\nfunction renderItem(item) {\n  return (\n    <List.Item style={styles.item}>\n      <List.Item.Meta\n        title={item.name}\n        description={item.description}\n      />\n    </List.Item>\n  )\n}\n```", "```\nconst styles = {\n  container: {padding: 20},\n  input: {marginBottom: 10},\n  item: { textAlign: 'left' },\n  p: { color: '#1890ff' }\n}\n```", "```\n~ npm start\n```", "```\nimport { v4 as uuid } from 'uuid'\nimport { List, Input, Button } from 'antd'\n```", "```\nimport { createNote as CreateNote } from './graphql/mutations'\n```", "```\nconst CLIENT_ID = uuid()\n```", "```\ncase 'ADD_NOTE':\n  return { ...state, notes: [action.note, ...state.notes]}\ncase 'RESET_FORM':\n  return { ...state, form: initialState.form }\ncase 'SET_INPUT':\n  return { ...state, form: { ...state.form, [action.name]: action.value } }\n```", "```\nasync function createNote() {\n  const { form } = state\n  if (!form.name || !form.description) {\n     return alert('please enter a name and description')\n  }\n  const note = { ...form, clientId: CLIENT_ID, completed: false, id: uuid() }\n  dispatch({ type: 'ADD_NOTE', note })\n  dispatch({ type: 'RESET_FORM' })\n  try {\n    await API.graphql({\n      query: CreateNote,\n      variables: { input: note }\n    })\n    console.log('successfully created note!')\n  } catch (err) {\n    console.log(\"error: \", err)\n  }\n}\n```", "```\nfunction onChange(e) {\n  dispatch({ type: 'SET_INPUT', name: e.target.name, value: e.target.value })\n}\n```", "```\n<Input\n  onChange={onChange}\n  value={state.form.name}\n  placeholder=\"Note Name\"\n  name='name'\n  style={styles.input}\n/>\n<Input\n  onChange={onChange}\n  value={state.form.description}\n  placeholder=\"Note description\"\n  name='description'\n  style={styles.input}\n/>\n<Button\n  onClick={createNote}\n  type=\"primary\"\n>Create Note</Button>\n```", "```\nimport {\n  createNote as CreateNote,\n  deleteNote as DeleteNote\n} from './graphql/mutations'\n```", "```\nasync function deleteNote({ id }) {\n  const index = state.notes.findIndex(n => n.id === id)\n  const notes = [\n    ...state.notes.slice(0, index),\n    ...state.notes.slice(index + 1)];\n  dispatch({ type: 'SET_NOTES', notes })\n  try {\n    await API.graphql({\n      query: DeleteNote,\n      variables: { input: { id } }\n    })\n    console.log('successfully deleted note!')\n    } catch (err) {\n      console.log({ err })\n  }\n}\n```", "```\n<List.Item\n  style={styles.item}\n  actions={[\n    <p style={styles.p} onClick={() => deleteNote(item)}>Delete</p>\n  ]}\n>\n  <List.Item.Meta\n   title={item.name}\n   description={item.description}\n  />\n</List.Item>\n```", "```\nimport {\n  updateNote as UpdateNote,\n  createNote as CreateNote,\n  deleteNote as DeleteNote\n} from './graphql/mutations'\n```", "```\nasync function updateNote(note) {\n  const index = state.notes.findIndex(n => n.id === note.id)\n  const notes = [...state.notes]\n  notes[index].completed = !note.completed\n  dispatch({ type: 'SET_NOTES', notes})\n  try {\n    await API.graphql({\n      query: UpdateNote,\n      variables: { input: { id: note.id, completed: notes[index].completed } }\n    })\n    console.log('note successfully updated!')\n  } catch (err) {\n    console.log('error: ', err)\n  }\n}\n```", "```\n<List.Item\n  style={styles.item}\n  actions={[\n    <p style={styles.p} onClick={() => deleteNote(item)}>Delete</p>,\n    <p style={styles.p} onClick={() => updateNote(item)}>\n      {item.completed ? 'completed' : 'mark completed'}\n    </p>\n  ]}\n>\n```", "```\nimport { onCreateNote } from './graphql/subscriptions'\n```", "```\nuseEffect(() => {\n  fetchNotes()\n  const subscription = API.graphql({\n    query: onCreateNote\n  })\n    .subscribe({\n      next: noteData => {\n        const note = noteData.value.data.onCreateNote\n        if (CLIENT_ID === note.clientId) return\n        dispatch({ type: 'ADD_NOTE', note })\n      }\n    })\n    return () => subscription.unsubscribe()\n}, [])\n```"]