- en: Chapter 2\. Kubernetes in a Nutshell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 Kubernetes 简介
- en: It’s helpful to get a quick rundown of what Kubernetes is and how it works if
    you are new to the space. Many tutorials and 101 courses are available on the
    web, but I would like to summarize the most important background information and
    concepts in this chapter. In the course of this book, we’ll reference cluster
    node components, so feel free to come back to this information at any time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是新手，快速了解 Kubernetes 是什么以及它的工作原理会很有帮助。网上有许多教程和101课程，但我想在本章节总结最重要的背景信息和概念。在本书的学习过程中，我们将引用集群节点组件，随时可以回顾这些信息。
- en: What Is Kubernetes?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 是什么？
- en: To understand what Kubernetes is, first let’s define microservices and containers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 Kubernetes 是什么，首先让我们定义微服务和容器。
- en: Microservice architectures call for developing and executing pieces of the application
    stack as individual services, and those services have to communicate with one
    another. If you decide to operate those services in containers, you will need
    to manage a lot of them while at the same time thinking about cross-cutting concerns
    like scalability, security, persistence, and load balancing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构要求将应用程序堆栈的各个部分作为单独的服务开发和执行，并且这些服务需要相互通信。如果决定在容器中操作这些服务，你需要管理大量的容器，同时考虑可扩展性、安全性、持久性和负载平衡等横切关注点。
- en: Tools like [buildkit](https://github.com/moby/buildkit) and [Podman](https://podman.io/)
    package software artifacts into a container image. Container runtime engines like
    [Docker Engine](https://docs.docker.com/engine/) and [containerd](https://containerd.io/)
    use the image to run a container. This works great on developer machines for testing
    purposes or for ad-hoc executions, e.g., as part of a Continuous Integration pipeline.
    For more information on containers, refer to [Chapter 4](ch04.xhtml#containers).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 像[buildkit](https://github.com/moby/buildkit)和[Podman](https://podman.io/)这样的工具将软件工件打包成容器镜像。像[Docker
    Engine](https://docs.docker.com/engine/)和[containerd](https://containerd.io/)这样的容器运行时引擎使用这些镜像来运行容器。这在开发者机器上用于测试或作为持续集成管道的一部分的临时执行中非常有效。有关容器的更多信息，请参阅[第四章](ch04.xhtml#containers)。
- en: Kubernetes is a container orchestration tool that helps with operating hundreds
    or even thousands of containers on physical machines, virtual machines, or in
    the cloud. Kubernetes can also fulfill those cross-cutting concerns mentioned
    earlier. The container runtime engine integrates with Kubernetes. Whenever a container
    creation is triggered, Kubernetes will delegate life cycle aspects to the container
    runtime engine.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个容器编排工具，可以帮助在物理机器、虚拟机器或云中操作数百甚至数千个容器。Kubernetes 还可以实现之前提到的横切关注点。容器运行时引擎与
    Kubernetes 集成。每当触发容器创建时，Kubernetes 将生命周期的方面委托给容器运行时引擎。
- en: The most essential primitive in a Kubernetes is a Pod. The Pod can run one or
    many containers while at the same time adding cross-cutting concerns like security
    requirements and resource consumption expectations. Have a look at [Chapter 5](ch05.xhtml#pods_namespaces)
    to learn about those aspects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中最基本的原语是 Pod。Pod 可以运行一个或多个容器，同时添加诸如安全需求和资源消耗预期等横切关注点。请查看[第五章](ch05.xhtml#pods_namespaces)了解这些方面。
- en: Features
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性
- en: 'The previous section touched on some features provided by Kubernetes. Here,
    we are going to dive a little deeper by explaining those features with more detail:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节涉及了 Kubernetes 提供的一些功能。在这里，我们将通过更详细地解释这些功能来深入探讨：
- en: Declarative model
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式模型
- en: You do not have to write imperative code using a programming language to tell
    Kubernetes how to operate an application. All you need to do as an end user is
    to declare a desired state. The desired state can be defined using a YAML or JSON
    manifest that conforms to an API schema. Kubernetes then maintains the state and
    recovers it in case of a failure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用编程语言编写命令式代码来告诉 Kubernetes 如何操作应用程序。作为最终用户，你只需要声明一个期望的状态。期望的状态可以使用符合 API
    架构的 YAML 或 JSON 清单定义。Kubernetes 然后维护这个状态，并在故障发生时恢复它。
- en: Autoscaling
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展
- en: You will want to scale up resources when your application load increases, and
    scale down when traffic to your application decreases. This can be achieved in
    Kubernetes by manual or automated scaling. The most practical, optimized option
    is to let Kubernetes automatically scale resources needed by a containerized application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序负载增加时，您将希望扩展资源，并在流量减少时进行缩减。在 Kubernetes 中，可以通过手动或自动缩放来实现这一点。最实用、最优化的选项是让
    Kubernetes 自动缩放容器化应用程序所需的资源。
- en: Application management
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序管理
- en: Changes to applications, e.g., new features and bug fixes, are usually baked
    into a container image with a new tag. You can easily roll out those changes across
    all containers running them using Kubernetes’ convenient replication feature.
    If needed, Kubernetes also allows for rolling back to a previous application version
    in case of a blocking bug or if a security vulnerability is detected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的更改，例如新功能和错误修复，通常会与新标签的容器映像一起打包。您可以使用 Kubernetes 的便捷复制功能轻松地在运行它们的所有容器上部署这些更改。如果需要，在出现阻塞性错误或检测到安全漏洞的情况下，Kubernetes
    还允许回滚到先前的应用程序版本。
- en: Persistent storage
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 持久存储
- en: Containers offer only a temporary filesystem. Upon restart of the container,
    all data written to the filesystem is lost. Depending on the nature of your application,
    you may need to persist data for longer, for example, if your application interacts
    with a database. Kubernetes offers the ability to mount storage required by application
    workloads.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 容器仅提供临时文件系统。在容器重新启动时，写入文件系统的所有数据都会丢失。根据应用程序的性质，您可能需要长期保留数据，例如，如果您的应用程序与数据库交互。Kubernetes
    提供了挂载应用程序工作负载所需的存储的能力。
- en: Networking
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 网络
- en: To support a microservices architecture, the container orchestrator needs to
    allow for communication between containers, and from end users to containers from
    outside of the cluster. Kubernetes employs internal and external load balancing
    for routing network traffic.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要支持微服务架构，容器编排器需要允许容器之间的通信，以及从集群外的最终用户到容器的通信。Kubernetes 使用内部和外部负载平衡来路由网络流量。
- en: High-Level Architecture
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级架构
- en: Architecturally, a Kubernetes cluster consists of control plane nodes and worker
    nodes, as shown in [Figure 2-1](#kubernetes-architecture). Each node runs on infrastructure
    provisioned on a physical or virtual machine, or in the cloud. The number of nodes
    you want to add to the cluster and their topology depends on the application resource
    needs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在架构上，一个 Kubernetes 集群由控制平面节点和工作节点组成，如 [图 2-1](#kubernetes-architecture) 所示。每个节点运行在物理机器、虚拟机器或云上提供的基础设施上。要添加到集群中的节点数及其拓扑结构取决于应用程序资源的需求。
- en: '![ckd2 0201](Images/ckd2_0201.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0201](Images/ckd2_0201.png)'
- en: Figure 2-1\. Kubernetes cluster nodes and components
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. Kubernetes 集群节点和组件
- en: 'Control plane nodes and worker nodes have specific responsibilities:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面节点和工作节点具有特定的责任：
- en: Control plane node
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面节点
- en: This node exposes the Kubernetes API through the API server and manages the
    nodes that make up the cluster. It also responds to cluster events, for example,
    when the end user requested to scale up the number of Pods to distribute the load
    for an application. Production clusters employ a [highly available (HA) architecture](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/)
    that usually involves three or more control plane nodes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此节点通过 API 服务器公开 Kubernetes API，并管理构成集群的节点。它还响应集群事件，例如，当最终用户请求扩展 Pod 数量以分配应用程序的负载时。生产集群采用
    [高可用 (HA) 架构](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/)，通常涉及三个或更多控制平面节点。
- en: Worker node
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点
- en: The worker node executes workload in containers managed by Pods. Every worker
    node needs a container runtime engine installed on the host machine to be able
    to manage containers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点执行由 Pod 管理的容器工作负载。每个工作节点需要在主机机器上安装容器运行时引擎，以便能够管理容器。
- en: In the next two sections, we’ll talk about the essential components embedded
    in those nodes to fulfill their tasks. Add-ons like cluster DNS are not discussed
    explicitly here. See the [Kubernetes documentation](https://kubernetes.io/docs/concepts/overview/components/)
    for more details.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个部分中，我们将讨论嵌入在这些节点中以完成其任务的关键组件。像集群 DNS 这样的附加组件在此处没有明确讨论。请参阅 [Kubernetes
    文档](https://kubernetes.io/docs/concepts/overview/components/) 以获取更多详细信息。
- en: Control Plane Node Components
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制平面节点组件
- en: 'The control plane node requires a specific set of components to perform its
    job. The following list of components will give you an overview:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面节点需要特定的组件来执行其工作。以下组件列表将为您提供一个概述：
- en: API server
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器
- en: The API server exposes the API endpoints clients use to communicate with the
    Kubernetes cluster. For example, if you execute the tool `kubectl`, a command-line
    based Kubernetes client, you will make a RESTful API call to an endpoint exposed
    by the API server as part of its implementation. The API processing procedure
    inside of the API server will ensure aspects like authentication, authorization,
    and admission control. For more information on that topic, see [Chapter 17](ch17.xhtml#authentication_authorization_admission_control).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器公开了API端点，客户端可以用来与Kubernetes集群通信。例如，如果您执行名为`kubectl`的命令行基础的Kubernetes客户端工具，您将向API服务器公开的端点发出RESTful
    API调用，这是其实现的一部分。 API服务器内部的API处理过程将确保诸如身份验证、授权和准入控制等方面。有关更多信息，请参见[第17章](ch17.xhtml#authentication_authorization_admission_control)。
- en: Scheduler
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器
- en: The scheduler is a background process that watches for new Kubernetes Pods with
    no assigned nodes and assigns them to a worker node for execution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器是一个后台进程，负责监视新的Kubernetes Pod，如果没有分配节点，则将其分配给工作节点以执行。
- en: Controller manager
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器管理器
- en: The controller manager watches the state of your cluster and implements changes
    where needed. For example, if you make a configuration change to an existing object,
    the controller manager will try to bring the object into the desired state.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器管理器监视集群状态并在需要时实施更改。例如，如果您对现有对象进行配置更改，则控制器管理器将尝试将对象带入所需状态。
- en: Etcd
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Etcd
- en: Cluster state data needs to be persisted over time so it can be reconstructed
    upon a node or even a full cluster restart. That’s the responsibility of [etcd](https://etcd.io/),
    an open source software Kubernetes integrates with. At its core, etcd is a key-value
    store used to persist all data related to the Kubernetes cluster.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 集群状态数据需要随时间持久化，以便在节点或整个集群重新启动时重建。这是[etcd](https://etcd.io/)的职责，它是Kubernetes集成的开源软件。在其核心，etcd是一个键值存储，用于持久化与Kubernetes集群相关的所有数据。
- en: Common Node Components
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见节点组件
- en: 'Kubernetes employs components that are leveraged by all nodes independent of
    their specialized responsibility:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes使用所有节点都可以利用的组件，而不考虑它们的专门责任：
- en: Kubelet
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Kubelet
- en: The kubelet runs on every node in the cluster; however, it makes the most sense
    to exist on a worker node. The reason is that the control plane node usually doesn’t
    execute workload, and the worker node’s primary responsibility is to run workload.
    The kubelet is an agent that makes sure that the necessary containers are running
    in a Pod. You could say that the kubelet is the glue between Kubernetes and the
    container runtime engine and ensures that containers are running and healthy.
    We’ll have a touch point with the kubelet in [Chapter 14](ch14.xhtml#container_probes).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Kubelet在集群中的每个节点上运行；然而，它最合理存在于工作节点上。原因在于控制平面节点通常不执行工作负载，而工作节点的主要责任是运行工作负载。 Kubelet是一个代理程序，确保Pod中运行必要的容器。可以说，Kubelet是Kubernetes与容器运行时引擎之间的粘合剂，并确保容器运行且健康。我们将在[第14章](ch14.xhtml#container_probes)与Kubelet进行交互。
- en: Kube proxy
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Kube代理
- en: The kube proxy is a network proxy that runs on each node in a cluster to maintain
    network rules and enable network communication. In part, this component is responsible
    for implementing the Service concept covered in [Chapter 21](ch21.xhtml#services).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kube代理是在集群中每个节点上运行的网络代理，用于维护网络规则并启用网络通信。部分责任是实现服务概念，这在[第21章](ch21.xhtml#services)中有所涵盖。
- en: Container runtime
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时
- en: As mentioned earlier, the container runtime is the software responsible for
    managing containers. Kubernetes can be configured to choose from a range of different
    container runtime engines. While you can install a container runtime engine on
    a control plane, it’s not necessary as the control plane node usually doesn’t
    handle workload. We’ll use a container runtime in [Chapter 4](ch04.xhtml#containers)
    to create a container image and run a container with the produced image.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，容器运行时是负责管理容器的软件。Kubernetes可以配置以选择不同的容器运行时引擎。虽然可以在控制平面上安装容器运行时引擎，但通常并非必需，因为控制平面节点通常不处理工作负载。我们将在[第四章](ch04.xhtml#containers)使用容器运行时来创建容器镜像并运行使用该镜像创建的容器。
- en: Advantages
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优势
- en: 'This chapter points out a couple of advantages of Kubernetes, which are summarized
    here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本章指出了Kubernetes的几个优点，总结如下：
- en: Portability
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可移植性
- en: A container runtime engine can manage a container independent of its runtime
    environment. The container image bundles everything it needs to work, including
    the application’s binary or code, its dependencies, and its configuration. Kubernetes
    can run applications in a container in on-premise and cloud environments. As an
    administrator, you can choose the platform you think is most suitable to your
    needs without having to rewrite the application. Many cloud offerings provide
    product-specific, opt-in features. While using product-specific features helps
    with operational aspects, be aware that they will diminish your ability to switch
    easily between platforms.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时引擎可以独立于其运行时环境管理容器。容器镜像包含使其工作所需的一切，包括应用程序的二进制文件或代码、其依赖项和配置。Kubernetes可以在本地和云环境中运行容器中的应用程序。作为管理员，您可以选择您认为最适合您需求的平台，而无需重写应用程序。许多云提供产品特定的、可选择的功能。虽然使用产品特定的功能有助于操作方面，但请注意，这将减弱您轻松切换平台的能力。
- en: Resilience
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性
- en: Kubernetes is designed as a declarative state machine. Controllers are reconciliation
    loops that watch the state of your cluster, then make or request changes where
    needed. The goal is to move the current cluster state closer to the desired state.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes设计为声明式状态机。控制器是协调循环，它们监视集群的状态，然后在需要时进行或请求更改，目标是将当前集群状态移向期望的状态。
- en: Scalability
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Enterprises run applications at scale. Just imagine how many software components
    retailers like Amazon, Walmart, or Target need to operate to run their businesses.
    Kubernetes can scale the number of Pods based on demand or automatically according
    to resource consumption or historical trends.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 企业以规模运行应用程序。想象一下像亚马逊、沃尔玛或Target这样的零售商需要运行业务所需的多少软件组件。Kubernetes可以根据需求扩展Pods的数量，或根据资源消耗或历史趋势自动扩展。
- en: API based
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基于API
- en: Kubernetes exposes its functionality through APIs. We learned that every client
    needs to interact with the API server to manage objects. It is easy to implement
    a new client that can make RESTful API calls to exposed endpoints.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通过API公开其功能。我们学到，每个客户端都需要与API服务器交互来管理对象。轻松实现一个新的客户端，可以对暴露的端点进行RESTful
    API调用。
- en: Extensibility
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性
- en: The API aspect stretches even further. Sometimes, the core functionality of
    Kubernetes doesn’t fulfill your custom needs, but you can implement your own extensions
    to Kubernetes. With the help of specific extension points, the Kubernetes community
    can build custom functionality according to their requirements, e.g., monitoring
    or logging solutions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: API方面的延伸更远。有时，Kubernetes的核心功能不满足您的定制需求，但您可以实现自己的Kubernetes扩展。借助特定的扩展点，Kubernetes社区可以根据其需求构建定制功能，例如监控或日志解决方案。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Kubernetes is software for managing containerized applications at scale. Every
    Kubernetes cluster consists of at least a single control plane node and a worker
    node. The control plane node is responsible for scheduling the workload and acts
    as the single entrypoint to manage its functionality. Worker nodes handle the
    workload assigned to them by the control plane node.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是用于管理规模化容器化应用程序的软件。每个Kubernetes集群至少包含一个控制平面节点和一个工作节点。控制平面节点负责调度工作负载，并充当管理其功能的单一入口点。工作节点处理由控制平面节点分配给它们的工作负载。
- en: Kubernetes is a production-ready runtime environment for companies wanting to
    operate microservice architectures while also supporting nonfunctional requirements
    like scalability, security, load balancing, and extensibility.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一种成熟的运行时环境，适用于希望运行微服务架构并支持可扩展性、安全性、负载平衡和可扩展性等非功能性需求的公司。
- en: The next chapter will explain how to interact with a Kubernetes cluster using
    the command-line tool `kubectl`. You will learn how run it to manage objects,
    an essential skill for acing the exam.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将解释如何使用命令行工具`kubectl`与Kubernetes集群进行交互。您将学习如何运行它来管理对象，这是通过考试的重要技能。
