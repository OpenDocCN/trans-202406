- en: Chapter 14\. Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章 结论
- en: At this point, you have had a solid tour through the Docker ecosystem and have
    seen many examples of how Docker and Linux containers can benefit you and your
    organization. We have tried to map out some of the common pitfalls and impart
    some of the wisdom that we have picked up over the many years that we’ve run Linux
    containers in production. Our experience has shown that the promise of Docker
    is quite achievable, and we’ve seen significant benefits in our organizations
    as a result. Like other powerful technologies, Docker is not without its compromises,
    but the net result has been a big positive for us, our teams, and our organizations.
    If you implement the Docker workflow and integrate it into the processes you already
    have in your organization, there is every reason to believe that you can significantly
    benefit from it as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经对 Docker 生态系统有了扎实的了解，并且看到了 Docker 和 Linux 容器如何能够使你和你的组织受益的许多示例。我们试图列出一些常见的陷阱，并传授多年来在生产中运行
    Linux 容器时积累的一些智慧。我们的经验表明，Docker 的承诺是完全可以实现的，作为结果，我们的组织也看到了显著的好处。像其他强大的技术一样，Docker
    也不是没有妥协的，但总体结果对我们、我们的团队和我们的组织都是极大的积极影响。如果你将 Docker 工作流程实施并整合到你组织已有的流程中，有充分的理由相信你也能从中获得显著的益处。
- en: In this chapter, we will take a moment to consider Docker’s evolving place in
    the technology landscape, and then quickly review the problems that Docker is
    designed to help you solve and some of the power it brings to the table.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将花一点时间考虑 Docker 在技术景观中不断演变的位置，然后快速回顾 Docker 设计帮助你解决的问题以及它带来的一些强大功能。
- en: The Road Ahead
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来之路
- en: There is no doubt that containers are here to stay for a very long time, but
    some people have predicted the ultimate demise of Docker on and off for a long
    time. Much of this is simply because the word *Docker* represents [so many things
    in so many people’s minds](https://oreil.ly/pvSEl).^([1](ch14.html#idm46803122954992))
    Are you talking about the company, which was sold to Mirantis in 2019 and reported
    $50 million USD in annual recurring revenue (ARR) two years after the restructuring?
    Or maybe the `docker` client tool, whose source code can be [downloaded](https://github.com/docker/cli),
    modified, and built by anyone who might need it? It is hard to know. People often
    like to try and predict the future, but reality often lies somewhere in the middle,
    hidden in the often-overlooked details.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，容器将长期存在，但有些人长期以来一直预测 Docker 的最终消亡。其中很大一部分原因只是因为 *Docker* 这个词在很多人心目中代表了
    [很多不同的东西](https://oreil.ly/pvSEl).^([1](ch14.html#idm46803122954992)) 你是在谈论那家在2019年被卖给Mirantis的公司，两年后重组后报告的每年5000万美元的营收吗？还是
    `docker` 客户端工具，其源代码可以被 [下载](https://github.com/docker/cli)，任何需要的人都可以修改并构建？这很难说。人们经常喜欢试图预测未来，但现实往往隐藏在中间，埋藏在常常被忽视的细节之中。
- en: In 2020, Kubernetes announced the [deprecation of dockershim](https://kubernetes.io/blog/2022/02/17/dockershim-faq),
    which went fully into effect with the release of Kubernetes v1.24\. At the time,
    lots of people took this to mean that Docker was dead, but the point many people
    were missing is that Docker has always primarily been a developer tool, not a
    production component. Sure it can be used on a production system for various reasons,
    but its true power lies in its ability to streamline much of the software packaging
    and testing workflow into a consolidated toolset. Kubernetes uses the [Container
    Runtime Interface (CRI)](https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes),
    which is not implemented by Docker and therefore required them to maintain another
    piece of wrapper software called `dockershim` to support using Docker Engine via
    the CRI. This announcement was not given to make some statement about Docker’s
    place in the ecosystem; it was simply given to make maintaining a large volunteer-driven
    open source project easier. Docker may not run on your Kubernetes servers, but
    in most cases, this will have no impact at all on the development and release
    cycle for your software. Unless you are a Kubernetes operator who used the `docker`
    CLI to directly query the containers running on a Kubernetes node, you are unlikely
    to notice any change as this transition occurs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年，Kubernetes宣布[废弃dockershim](https://kubernetes.io/blog/2022/02/17/dockershim-faq)，并且随着Kubernetes
    v1.24版本的发布完全生效。当时，许多人认为这意味着Docker已经死了，但许多人忽略的一点是，Docker始终主要是开发工具，而不是生产组件。当然，它可以出于各种原因在生产系统上使用，但其真正的力量在于能够将大部分软件打包和测试工作流程整合到一个统一的工具集中。Kubernetes使用[容器运行时接口（CRI）](https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes)，而Docker并未实现这一接口，因此需要他们维护另一个称为`dockershim`的包装软件来通过CRI支持使用Docker引擎。此公告并不意味着要表达Docker在生态系统中的位置，而只是为了简化维护一个大型志愿驱动的开源项目。Docker可能无法在您的Kubernetes服务器上运行，但在大多数情况下，这对软件的开发和发布周期没有任何影响。除非您是一个使用`docker`
    CLI直接查询运行在Kubernetes节点上的容器的Kubernetes操作员，否则在此过渡期间，您不太可能注意到任何变化。
- en: And as it turns out, Docker’s parent company has developed and continues to
    support a new shim, called [`cri-dockerd`](https://github.com/Mirantis/cri-dockerd),
    that allows Kubernetes to continue to interface with Docker for those who need
    that workflow to be supported.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如事实证明的那样，Docker的母公司已经开发并继续支持一个名为[`cri-dockerd`](https://github.com/Mirantis/cri-dockerd)的新的shim，允许那些需要支持此工作流程的人继续与Docker进行接口交互。
- en: Interestingly enough, Docker is also diversifying into noncontainer technologies,
    like [WebAssembly](https://docs.docker.com/desktop/wasm) (Wasm), that can complement
    containers while improving the developer experience.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Docker还在进入非容器技术领域多样化，比如[WebAssembly](https://docs.docker.com/desktop/wasm)（Wasm），这可以补充容器技术，同时改善开发者体验。
- en: So, Docker as a developer-friendly toolset is likely here to stay for a long
    while, but that doesn’t mean that there are not any other tools in the ecosystem
    that can complement or even replace it if that is something that you want or need.
    The beauty of the various standards that exist, like the OCI, and their broad
    adoption, is that many of these tools can interoperate with the same images and
    containers that other tools generate and manage.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，作为一款开发者友好的工具集，Docker很可能会长期存在，但这并不意味着生态系统中没有其他工具可以补充甚至取代它，如果这是你想要或需要的。像OCI这样存在的各种标准的美妙之处在于它们被广泛采纳，许多工具可以与其他工具生成和管理的相同镜像和容器进行互操作。
- en: The Challenges Docker Addresses
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker解决的挑战
- en: In traditional deployment workflows, there is often a multitude of required
    steps that significantly contribute to the overall pain felt by teams. Every step
    you add to the deployment process for an application increases the risk inherent
    in shipping it to production. Docker combines a workflow with a simple toolset
    that is directly targeted at addressing these concerns. Along the way, it squarely
    aims your development processes toward some of the industry’s best practices,
    and its opinionated approach often leads to better communication and more robustly
    crafted applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的部署工作流程中，通常需要大量步骤，这些步骤显著增加了团队的整体痛苦感。每增加一个应用程序部署过程中的步骤都会增加将其推向生产环境的风险。Docker将工作流程与简单的工具集结合在一起，直接针对这些问题进行了处理。在这过程中，它直接指向了行业最佳实践，其自主的方法往往会导致更好的沟通和更加健壮的应用程序设计。
- en: 'Some of the specific problems that Docker and Linux containers can help mitigate
    include the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 和 Linux 容器可以帮助缓解的一些具体问题包括以下几点：
- en: Avoiding significant divergence between deployment environments.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在部署环境之间出现显著的分歧。
- en: Requiring application developers to re-create configuration and logging logic
    in applications.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求应用开发人员在应用程序中重新创建配置和日志记录逻辑。
- en: Using outdated build and release processes that require multiple levels of handoff
    between development and operations teams.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过时的构建和发布流程，需要在开发和运维团队之间进行多层次交接。
- en: Requiring complex and fragile build and deploy processes.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要复杂且脆弱的构建和部署过程。
- en: Managing divergent dependency versions that are required by applications that
    need to share the same hardware.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理需要共享同一硬件的应用程序所需的不同依赖版本。
- en: Managing multiple Linux distributions in the same organization.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一组织中管理多个 Linux 发行版。
- en: Building one-off deployment processes for each application you put into production.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个投入生产的应用程序构建一次性部署流程。
- en: Needing to treat each application as a unique codebase when it comes to patching
    and auditing security vulnerabilities.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理补丁和审计安全漏洞时，需要将每个应用程序视为独特的代码库。
- en: And much more.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和更多。
- en: By using the registry as a handoff point, Docker eases and simplifies communication
    between operations and development teams, or between multiple development teams
    on the same project. By bundling all of the dependencies for an application into
    one shipping artifact, Docker eliminates concerns about which Linux distribution
    developers want to work on, which versions of libraries they need to use, and
    how they compile their assets or bundle their software. It isolates operations
    teams from the build process and puts developers in charge of their dependencies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将注册表用作交接点，Docker 简化了操作团队与开发团队之间，或同一项目中的多个开发团队之间的沟通。通过将一个应用程序的所有依赖项捆绑成一个交付物，Docker
    消除了开发人员想要在哪个 Linux 发行版上工作、他们需要使用哪些库的版本以及如何编译其资产或捆绑其软件的担忧。它将操作团队与构建过程隔离开来，并让开发人员负责他们的依赖关系。
- en: The Docker Workflow
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 工作流
- en: Docker’s workflow helps organizations tackle really hard problems—some of the
    same problems that DevOps processes are aimed at solving. A major problem in incorporating
    DevOps successfully into a company’s processes is that many people have no idea
    where to start. Tools are often incorrectly presented as the solution to what
    are fundamentally process problems. Adding virtualization, automated testing,
    deployment tools, or configuration management suites to the environment often
    just changes the nature of the problem without delivering a resolution.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的工作流帮助组织解决真正困难的问题——一些与 DevOps 过程旨在解决的相同问题。将 DevOps 成功地整合到公司的流程中的一个主要问题是，许多人不知道从何处开始。工具经常被错误地呈现为解决基本上是过程问题的方案。向环境中添加虚拟化、自动化测试、部署工具或配置管理套件通常只是改变了问题的性质，而没有提供解决方案。
- en: It would be easy to dismiss Docker as just another tool making unfulfillable
    promises about fixing your business processes, but that would be selling it short.
    Docker’s power is in the way that its natural workflow allows applications to
    travel through their whole lifecycle, from conception to retirement, within one
    ecosystem. Unlike other tools that often target only a single aspect of the DevOps
    pipeline, Docker significantly improves almost every step of the process. That
    workflow is often opinionated, but it simplifies the adoption of some of the core
    principles of DevOps. It encourages development teams to understand the whole
    lifecycle of their application and allows operations teams to support a much wider
    variety of applications on the same runtime environment. And that delivers value
    across the board.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Docker 只视为另一个工具，它做出了无法实现的承诺，这样的看法过于狭隘。Docker 的强大之处在于其自然的工作流程允许应用程序在一个生态系统内完成其整个生命周期，从概念到退役。与其他通常只针对
    DevOps 管道的单个方面的工具不同，Docker 几乎改进了流程的每一个步骤。该工作流程通常是有主张的，但它简化了采纳 DevOps 核心原则的过程。它鼓励开发团队理解其应用程序的整个生命周期，并允许操作团队在同一运行时环境上支持更多种类的应用程序。这为各方面带来了价值。
- en: Minimizing Deployment Artifacts
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小化部署工件
- en: Docker alleviates the pain that is often induced by sprawling deployment artifacts.
    It does this by defining the result of a build as a single artifact, the Docker
    image, which contains everything your Linux application requires to run, and it
    executes this within a protected runtime environment. Containers can then be easily
    deployed on modern Linux distributions. But because of the clean split between
    the Docker client and server, developers can build their applications on non-Linux
    systems and still participate in the Linux container environment remotely.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 减轻了常常由庞大的部署产物引发的痛苦。它通过将构建结果定义为单个构件，即 Docker 镜像来实现。镜像包含了您的 Linux 应用程序运行所需的一切，并在受保护的运行时环境中执行。容器可以轻松部署在现代
    Linux 发行版上。但由于 Docker 客户端和服务器之间的清晰分离，开发人员可以在非 Linux 系统上构建其应用程序，同时仍能远程参与 Linux
    容器环境。
- en: Leveraging Docker allows software developers to create Docker images that, starting
    with the very first proof of concept, can be run locally, tested with automated
    tools, and deployed into integration or production environments without ever having
    to be rebuilt. This ensures that the application that is launched in production
    is the same as what was tested. Nothing needs to be recompiled or repackaged during
    the deployment workflow, which significantly lowers the risks normally inherent
    in most deployment processes. It also means that a single build step replaces
    a typically error-prone process that involves compiling and packaging multiple
    complex components for distribution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 Docker，软件开发人员可以创建 Docker 镜像，从最初的概念验证开始，就可以在本地运行、通过自动化工具进行测试，并部署到集成或生产环境，而无需重新构建。这确保了在生产中启动的应用与经过测试的应用完全一致。在部署工作流程中不需要重新编译或重新打包任何内容，这显著降低了通常在大多数部署过程中固有的风险。同时，单一的构建步骤取代了通常涉及多个复杂组件编译和打包的容易出错的过程。
- en: Docker images also simplify the installation and configuration of an application.
    Every single piece of software that an application requires to run on a modern
    Linux kernel is contained in the image, and the dependency conflicts you might
    find in a traditional environment are eliminated. This makes it trivial to run
    multiple applications that rely on different versions of core system software
    on the same server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像还简化了应用程序的安装和配置。每个现代 Linux 内核上运行所需的软件都包含在镜像中，消除了传统环境中可能出现的依赖冲突。这使得在同一台服务器上运行依赖不同版本核心系统软件的多个应用程序变得轻而易举。
- en: Optimizing Storage and Retrieval
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化存储和检索
- en: Docker leverages filesystem layers to allow containers to be built from a composite
    of multiple images. This shaves a vast amount of time and effort off of many deployment
    processes by shipping only significant changes across the wire. It also saves
    considerable disk space by allowing multiple containers to be based on the same
    lower-level base image and then utilizing a copy-on-write process to write new
    or modified files into a top layer. This also helps in scaling an application
    by allowing more copies of an application to be started on the same servers without
    the need to push the binaries across the wire for each new instance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 利用文件系统层次结构允许容器由多个镜像组合而成。通过仅传输重要变更，大大节省了许多部署过程中的时间和精力。它还通过允许多个容器基于相同的底层基础镜像，然后利用写时复制过程将新文件或修改后的文件写入顶层，节省了大量的磁盘空间。这也有助于通过允许在同一台服务器上启动更多应用的副本来扩展应用。
- en: To support image retrieval, Docker leverages the image registry for hosting
    images. While not revolutionary on the face of it, the registry helps split team
    responsibilities clearly along the lines embraced by DevOps principles. Developers
    can build their application, test it, ship the final image to the registry, and
    deploy the image to the production environment, while the operations team can
    focus on building excellent deployment and cluster management tooling that pulls
    from the registry, runs reliably, and ensures environmental health. Operations
    teams can provide feedback to developers and see the results of all the test runs
    at build time rather than waiting to find problems when the application is shipped
    to production. This enables both teams to focus on what they do best without a
    multiphase handoff process.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持图像检索，Docker利用镜像注册表来托管镜像。尽管表面看并不革命性，但注册表有助于根据DevOps原则明确划分团队责任。开发人员可以构建他们的应用程序，测试它，将最终镜像发布到注册表，并将镜像部署到生产环境，而运维团队可以专注于构建优秀的部署和集群管理工具，从注册表中提取镜像，确保其可靠运行，并确保环境健康。运维团队可以在构建时提供反馈给开发人员，并查看所有测试运行的结果，而不是等到应用程序被部署到生产环境时才发现问题。这使得两个团队都可以专注于各自擅长的领域，而无需进行多阶段的交接流程。
- en: The Payoff
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优势
- en: As teams become more confident with Docker and its workflow, the realization
    often dawns that containers create a powerful abstraction layer between all of
    their software components and the underlying operating system. Organizations can
    begin to move away from having to create custom physical servers or VMs for most
    applications and instead deploy fleets of identical Docker hosts that can be used
    as a large pool of resources to dynamically deploy their applications to, with
    an ease that was previously unheard of.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着团队对Docker及其工作流的信心增强，他们往往会意识到容器在所有软件组件和底层操作系统之间创建了一个强大的抽象层。组织可以开始摆脱为大多数应用程序创建定制物理服务器或虚拟机的做法，而是部署一批相同的Docker主机作为资源池，动态地将他们的应用程序部署到其中，这是以前无法想象的便捷方式。
- en: When these process changes are successful, the cultural impact within a software
    engineering organization can be dramatic. Developers gain more ownership of their
    complete application stack, including many of the smallest details, which would
    typically be handled by a completely different group. Operations teams are simultaneously
    freed from trying to package and deploy complicated dependency trees with little
    or no detailed knowledge of the application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些流程变化成功时，对软件工程组织的文化影响可能是显著的。开发人员对完整的应用程序堆栈拥有更多的所有权，包括通常由完全不同的团队处理的最小细节。与此同时，运维团队同时摆脱了尝试打包和部署复杂依赖树的负担，而几乎没有关于应用程序的详细知识。
- en: In a well-designed Docker workflow, developers compile and package the application,
    which makes it much easier for them to focus on ensuring that the application
    is running properly in all environments, without worrying about significant changes
    introduced to the application environment by the operations teams. At the same
    time, operations teams are freed from spending most of their time supporting the
    application and can focus on creating a robust and stable platform for the application
    to run on. This dynamic creates a very healthy environment in which teams have
    clearer ownership and responsibilities in the application delivery process, and
    friction between them is significantly decreased.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在良好设计的Docker工作流中，开发人员编译和打包应用程序，这使得他们能够更轻松地确保应用程序在所有环境中正常运行，而不必担心运维团队引入的重大环境变化。与此同时，运维团队不再花费大部分时间支持应用程序，可以专注于为应用程序创建一个强大稳定的平台。这种动态创建了一个非常健康的环境，团队在应用交付过程中拥有更清晰的所有权和责任，团队之间的摩擦显著减少。
- en: Getting the process right has a huge benefit to both the company and the customers.
    With organizational friction removed, software quality is improved, processes
    are streamlined, and code ships to production faster. This all helps free the
    organization to spend more time providing a satisfying customer experience and
    delivering directly to the broader business objectives. A well-implemented Docker-based
    workflow can greatly help organizations achieve those goals.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正确处理流程对公司和客户都有巨大的好处。通过消除组织内部的摩擦，提高了软件质量，优化了流程，使代码更快地交付到生产环境。所有这些都有助于组织更多地投入提供令人满意的客户体验和直接交付更广泛的业务目标。一个良好实施的基于Docker的工作流程可以极大地帮助组织实现这些目标。
- en: The Final Word
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: You should now be equipped with the knowledge that can help you make the transition
    to a modern, container-based build and deployment process. We encourage you to
    experiment with Docker on a small scale on your laptop or in a VM to further your
    understanding of how all of the pieces fit together, and then consider how you
    might begin to implement it for your organization. Every company or individual
    developer will follow a different path determined by their own needs and competencies.
    If you’re looking for guidance on how to start, we’ve found success in tackling
    the deployment problem first with simpler tools and then moving on to tasks like
    service discovery and distributed scheduling. Docker can be made as complicated
    as you like, but as with anything, starting simple usually pays off.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经掌握了帮助你过渡到现代基于容器的构建和部署流程的知识。我们鼓励你在笔记本电脑或虚拟机上小规模地尝试使用 Docker，以进一步理解所有组件如何配合，然后考虑如何开始为你的组织实施。每家公司或个人开发者都会根据自己的需求和能力选择不同的路径。如果你想要关于如何开始的指导，我们发现先用简单的工具解决部署问题，然后再转向诸如服务发现和分布式调度等任务，通常会取得成功。Docker
    可以变得非常复杂，但像任何事物一样，从简单开始通常会更有回报。
- en: We hope you can now take all of this newfound knowledge and make good on some
    of Docker and Linux containers’ promises for yourself.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你现在可以运用这些新获得的知识，实现 Docker 和 Linux 容器为你自己带来的种种承诺。
- en: '^([1](ch14.html#idm46803122954992-marker)) Full URL: [*https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci*](https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch14.html#idm46803122954992-marker)) 完整网址：[*https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci*](https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci)
