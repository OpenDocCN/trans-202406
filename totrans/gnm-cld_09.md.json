["```\n$ java -version\nCommand ’java’ not found, but can be installed with:\napt install openjdk-11-jre-headless  # version 11.0.3+7-1ubuntu2~19.04.1, or\napt install default-jre              # version 2:1.11-71\napt install openjdk-8-jre-headless   # version 8u212-b03-0ubuntu1.19.04.2\napt install openjdk-12-jre-headless  # version 12.0.1+12-1\napt install openjdk-13-jre-headless  # version 13~13-0ubunt1\nAsk your administrator to install one of them.\n```", "```\n$ sudo apt install openjdk-8-jre-headless\nReading package lists... Done\nBuilding dependency tree      \nReading state information... Done\n[...]\ndone.\n```", "```\n$ java -version\nopenjdk version \"1.8.0_222\"\nOpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~19.04.1-b10)\nOpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)\n```", "```\n$ export BIN=~/book/bin\n```", "```\n$ java -jar $BIN/cromwell-48.jar --help\ncromwell 48\nUsage: java -jar /path/to/cromwell.jar [server|run|submit] [options] <args>...\n --help                   Cromwell - Workflow Execution Engine\n --version               \nCommand: server\nStarts a web server on port 8000\\.  See the web server documentation for more \ndetails about the API endpoints.\nCommand: run [options] workflow-source\nRun the workflow and print out the outputs in JSON format.\n workflow-source          Workflow source file or workflow url.\n --workflow-root <value>  Workflow root.\n -i, --inputs <value>     Workflow inputs file.\n -o, --options <value>    Workflow options file.\n -t, --type <value>       Workflow type.\n -v, --type-version <value>\n                          Workflow type version.\n -l, --labels <value>     Workflow labels file.\n -p, --imports <value>    A directory or zipfile to search for workflow imports.\n -m, --metadata-output <value>\n                          An optional directory path to output metadata.\nCommand: submit [options] workflow-source\nSubmit the workflow to a Cromwell server.\n workflow-source          Workflow source file or workflow url.\n --workflow-root <value>  Workflow root.\n -i, --inputs <value>     Workflow inputs file.\n -o, --options <value>    Workflow options file.\n -t, --type <value>       Workflow type.\n -v, --type-version <value>\n                          Workflow type version.\n -l, --labels <value>     Workflow labels file.\n -p, --imports <value>    A directory or zipfile to search for workflow imports.\n -h, --host <value>       Cromwell server URL.\n```", "```\n$ java -jar $BIN/womtool-48.jar --help\nWomtool 48\nUsage: java -jar Womtool.jar\n[validate|inputs|parse|highlight|graph|upgrade|womgraph] [options]\nworkflow-source\n workflow-source          Path to workflow file.\n -i, --inputs <value>     Workflow inputs file.\n -h, --highlight-mode <value>\n                          Highlighting mode, one of 'html', 'console'\n(used only with 'highlight' command)\n -o, --optional-inputs <value>\n                          If set, optional inputs are also included in the\ninputs set. Default is 'true' (used onl\ny with the inputs command)\n --help                  \n --version               \nCommand: validate\nValidate a workflow source file. If inputs are provided then 'validate'\nalso checks that the inputs file is a valid set of inputs for the\nworkflow.\nCommand: inputs\nGenerate and output a new inputs JSON for this workflow.\nCommand: parse\n(Deprecated; WDL draft 2 only) Print out the Hermes parser’s abstract\nsyntax tree for the source file.\nCommand: highlight\n(Deprecated; WDL draft 2 only) Print out the Hermes parser’s abstract\nsyntax tree for the source file. Requires at least one of 'html' or 'console'\nCommand: graph\nGenerate and output a graph visualization of the workflow in .dot format\nCommand: upgrade\nAutomatically upgrade the WDL to version 1.0 and output the result.\nCommand: womgraph\n(Advanced) Generate and output a graph visualization of Cromwell’s\ninternal Workflow Object Model structure for this workflow in .dot format\n```", "```\n$ export WF=~/book/code/workflows\n```", "```\n$ nano $WF/hello-world/hello-world.wdl\n```", "```\nversion 1.0\n\nworkflow HelloWorld {\n  call WriteGreeting\n}\n\ntask WriteGreeting {\n  command {\n     echo \"Hello World\"\n  }\n  output {\n     File output_greeting = stdout()\n  }\n}\n```", "```\n$ echo \"Hello World\"\nHello World\n```", "```\nworkflow HelloWorld {...}\n\ntask WriteGreeting {...}\n```", "```\ntask WriteGreeting {\n  command {\n     echo \"Hello World\"\n  }\n  output {\n     File output_greeting = stdout()\n  }\n}\n```", "```\nworkflow HelloWorld {\n  call WriteGreeting\n}\n```", "```\n$ java -jar $BIN/cromwell-48.jar run $WF/hello-world/hello-world.wdl\n```", "```\n[...]  \n[2018-09-08 10:40:34,69] [info] SingleWorkflowRunnerActor: Workflow submitted\nb6d224b0-ccee-468f-83fa-ab2ce7e62ab7  \n[...]  \nCall-to-Backend assignments: HelloWorld.WriteGreeting -> Local\n[2018-09-08 10:40:37,15] [info] WorkflowExecutionActor-b6d224b0-ccee-468f-83fa-\nab2ce7e62ab7 [b6d224b0]: Starting HelloWorld.WriteGreeting\n[2018-09-08 10:40:38,08] [info] BackgroundConfigAsyncJobExecutionActor\n[b6d224b0HelloWorld.WriteGreeting:NA:1]: echo \"Hello World\"\n[2018-09-08 10:40:38,14] [info] BackgroundConfigAsyncJobExecutionActor \n[...]  \n[2018-09-08 10:40:40,24] [info] WorkflowExecutionActor-b6d224b0-ccee-468f-83fa-\nab2ce7e62ab7 [b6d224b0]: Workflow HelloWorld complete. Final Outputs:\n{  \n  \"HelloWorld.WriteGreeting.output_greeting\": \"/home/username/cromwell-\nexecutions/HelloWorld/b6d224b0-ccee-468f-83fa-ab2ce7e62ab7/call-\nWriteGreeting/execution/stdout\"  \n}  \n[2018-09-08 10:40:40,28] [info] WorkflowManagerActor WorkflowActor-b6d224b0-ccee-\n468f-83fa-ab2ce7e62ab7 is in a terminal state: WorkflowSucceededState\n[2018-09-08 10:40:45,96] [info] SingleWorkflowRunnerActor workflow finished with\nstatus ’Succeeded’.\n[...]  \n[2018-09-08 10:40:48,85] [info] Shutdown finished.\n```", "```\nWorkflowExecutionActor-b6d224b0-ccee-468f-83fa-ab2ce7e62ab7 [b6d224b0]: Workflow\nHelloWorld complete. Final Outputs:\n{  \n  \"HelloWorld.WriteGreeting.output_greeting\": \"/home/username/cromwell-\nexecutions/HelloWorld/b6d224b0-ccee-468f-83fa-ab2ce7e62ab7/call-\nWriteGreeting/execution/stdout\"\n}  \n```", "```\n$ cat ~/cromwell-executions/HelloWorld/b6d224b0-ccee-468f-83fa-\nab2ce7e62ab7/call-WriteGreeting/execution/stdout\nHello World\n```", "```\nSingleWorkflowRunnerActor: Workflow submitted b6d224b0-ccee-468f-83fa-ab2ce7e62ab7\n```", "```\nCall-to-Backend assignments: HelloWorld.WriteGreeting -> Local \n```", "```\nStarting HelloWorld.WriteGreeting\n```", "```\n[b6d224b0HelloWorld.WriteGreeting:NA:1]: echo \"Hello World\"\n```", "```\n[b6d224b0]: Workflow HelloWorld complete. Final Outputs:\n{\n\"HelloWorld.WriteGreeting.output_greeting\": \"/home/username/cromwell-\nexecutions/HelloWorld/b6d224b0-ccee-468f-83fa-ab2ce7e62ab7/call-\nWriteGreeting/execution/stdout\"\n}\n```", "```\nHelloWorld.WriteGreeting.output_greeting \n```", "```\n~                                       (working directory)\ncromwell-executions/                    (Cromwell master directory)\n HelloWorld                             (name of our workflow)\n  b6d224b0-ccee-468f-83fa-ab2ce7e62ab7  (unique identifier of the run)\n   call-WriteGreeting                   (name of our task call)\n    execution                           (directory of execution files)\n```", "```\nSingleWorkflowRunnerActor workflow finished with status 'Succeeded'.\n```", "```\n[2018-09-08 10:40:48,85] [info] Shutdown finished.\n```", "```\n$ nano $WF/hello-world/hello-world-var.wdl\n```", "```\ntask WriteGreeting {\n\n  input {\n      String greeting\n  }\n\n  command {\n     echo \"${greeting}\"\n  }\n\n  output {\n     File output_greeting = stdout()\n  }\n}\n```", "```\n{\n \"HelloWorld.WriteGreeting.greeting\": \"Hello Variable World\"\n}\n```", "```\n$ java -jar $BIN/cromwell-48.jar run $WF/hello-world/hello-world-var.wdl \\\n-i $WF/hello-world/hello-world.inputs.json\n```", "```\n$ nano $WF/hello-world/hello-world-again.wdl\n```", "```\nversion 1.0\n\nworkflow HelloWorldAgain {\n\n  call WriteGreeting\n\n  call ReadItBackToMe {\n     input:\n        written_greeting = WriteGreeting.output_greeting\n  }\n\n  output {\n     File outfile = ReadItBackToMe.repeated_greeting\n  }\n}\n\ntask WriteGreeting {\n\n  input { \n     String greeting\n  }\n\n  command {\n     echo \"${greeting}\"\n  }\n  output {\n     File output_greeting = stdout()\n  }\n}\n\ntask ReadItBackToMe {\n\n  input {\n     String = read_string(written_greeting)\n  }\n\n  command {\n     echo \"${original_greeting} to you too\"\n  }\n  output {\n     File repeated_greeting = stdout()\n  }\n}\n```", "```\n  call ReadItBackToMe {\n     input:\n        written_greeting = WriteGreeting.output_greeting\n  }\n```", "```\ntask ReadItBackToMe {\n\n  input {\n    File written_greeting\n  }\n\n  String greeting = read_string(written_greeting)\n\n  command {\n     echo \"${greeting} to you too\"\n  }\n  output {\n     File repeated_greeting = stdout()\n  }\n```", "```\n  output {\n     File outfile = ReadItBackToMe.repeated_greeting\n  }\n```", "```\n$ nano $WF/hello-hc/hello-haplotypecaller.wdl\n```", "```\nversion 1.0\n\nworkflow HelloHaplotypeCaller {\n\n    call HaplotypeCallerGVCF\n}\n\ntask HaplotypeCallerGVCF {\n\n input {\n  \t\tString docker_image\n        String java_opt\n\n        File ref_fasta\n        File ref_index\n        File ref_dict\n        File input_bam\n        File input_bam_index\n        File intervals\n    }\n\n    String gvcf_name = basename(input_bam, \".bam\") + \".g.vcf\"\n\n    command {\n        gatk --java-options ${java_opt} HaplotypeCaller \\\n            -R ${ref_fasta} \\\n            -I ${input_bam} \\\n            -O ${gvcf_name} \\\n            -L ${intervals} \\\n            -ERC GVCF\n    }\n\n    output {\n        File output_gvcf = \"${gvcf_name}\"\n    }\n\n    runtime {\n        docker: docker_image\n    }\n\n}\n```", "```\nworkflow HelloHaplotypeCaller {\n\n    call HaplotypeCallerGVCF\n}\n\ntask HaplotypeCallerGVCF { … }\n```", "```\ncommand {\n        gatk --java-options ${java_opt} HaplotypeCaller \\\n            -R ${ref_fasta} \\\n            -I ${input_bam} \\\n            -O ${gvcf_name} \\\n            -L ${intervals} \\\n            -ERC GVCF\n    }\n```", "```\ninput {\n        String docker_image\n        String java_opt\n\n        File ref_fasta\n        File ref_index\n        File ref_dict\n        File input_bam\n        File input_bam_index\n        File intervals\n    }\n\n    String gvcf_name = basename(input_bam, \".bam\") + \".g.vcf\"\n```", "```\nString gvcf_name = basename(input_bam, \".bam\") + \".g.vcf\"\n```", "```\noutput {\n    File output_gvcf = \"${gvcf_name}\"\n}\n```", "```\nruntime {\n    docker: docker_image\n}\n```", "```\n$ mkdir ~/sandbox-8\n```", "```\n$ java -jar $BIN/womtool-48.jar \\\n    inputs $WF/hello-hc/hello-haplotypecaller.wdl \\\n    > ~/sandbox-8/hello-haplotypecaller.inputs.json\n```", "```\n$ cat ~/sandbox-8/hello-haplotypecaller.inputs.json\n\n```", "```\n{\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.input_bam_index\": \"File\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.input_bam\": \"File\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.ref_fasta\": \"File\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.ref_index\": \"File\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.ref_dict\": \"File\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.intervals\": \"File\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.docker_image\": \"String\",\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.java_opt\": \"String\"\n}\n```", "```\n$ cat $WF/hello-hc/hello-haplotypecaller.inputs.json\n```", "```\n{\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.input_bam_index\":\n\"book/data/germline/bams/mother.bai\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.input_bam\":\n\"book/data/germline/bams/mother.bam\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.ref_fasta\":\n\"book/data/germline/ref/ref.fasta\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.ref_index\":\n\"book/data/germline/ref/ref.fasta.fai\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.ref_dict\":\n\"book/data/germline/ref/ref.dict\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.intervals\":\n\"book/data/germline/intervals/snippet-intervals-min.list\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.docker_image\": \"us.gcr.io/broad-\ngatk/gatk:4.1.3.0\",\n\"HelloHaplotypeCaller.HaplotypeCallerGVCF.java_opt\": \"-Xmx8G\"\n}\n```", "```\n$ java -jar $BIN/cromwell-48.jar \\\n    run $WF/hello-hc/hello-haplotypecaller.wdl \\\n    -i $WF/hello-hc/hello-haplotypecaller.inputs.json\n```", "```\n[2019-08-14 06:27:14,15] [info] BackgroundConfigAsyncJobExecutionActor\n[9a6a9c97HelloHaplotypeCaller.HaplotypeCallerGVCF:NA:1]: Status change from\nWaitingForReturnCode to Done\n[2019-08-14 06:27:15,46] [info] WorkflowExecutionActor-9a6a9c97-7453-455c-8cd8-\nbe8af8cb6f7c [9a6a9c97]: Workflow HelloHaplotypeCaller complete. Final Outputs:\n{\n \"HelloHaplotypeCaller.HaplotypeCallerGVCF.output_gvcf\": \"/home/username/cromwell-\nexecutions/HelloHaplotypeCaller/9a6a9c97-7453-455c-8cd8-be8af8cb6f7c/call-\nHaplotypeCallerGVCF/execution/mother.g.vcf\"\n}\n[2019-08-14 06:27:15,51] [info] WorkflowManagerActor WorkflowActor-9a6a9c97-7453-\n455c-8cd8-be8af8cb6f7c is in a terminal state: WorkflowSucceededState\n[2019-08-14 06:27:21,31] [info] SingleWorkflowRunnerActor workflow \nstatus ’Succeeded’.\n{\n \"outputs\": {\n   \"HelloHaplotypeCaller.HaplotypeCallerGVCF.output_gvcf\":\n\"/home/username/cromwell-executions/HelloHaplotypeCaller/9a6a9c97-7453-455c-8cd8-\nbe8af8cb6f7c/call-HaplotypeCallerGVCF/execution/mother.g.vcf\"\nworkflow HelloHaplotypeCaller {\n },\n \"id\": \"9a6a9c97-7453-455c-8cd8-be8af8cb6f7c\"\n}\n```", "```\n$ head ~/cromwell-executions/HelloHaplotypeCaller/9a6a9c97-7453-455c\n-8cd8-be8af8cb6f7c/call-HaplotypeCallerGVCF/execution/mother.g.vcf\n##fileformat=VCFv4.2\n##ALT=<ID=NON_REF,Description=\"Represents any possible alternative allele at this\nlocation\">\n##FILTER=<ID=LowQual,Description=\"Low quality\">\n##FORMAT=<ID=AD,Number=R,Type=Integer,Description=\"Allelic depths for the ref and\nalt alleles in the order listed\">\n##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Approximate read depth (reads\nwith MQ=255 or with bad mates are filtered)\">\n##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=\"Genotype Quality\">\n##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n##FORMAT=<ID=MIN_DP,Number=1,Type=Integer,Description=\"Minimum DP observed within\nthe GVCF block\">\n##FORMAT=<ID=PGT,Number=1,Type=String,Description=\"Physical phasing haplotype\ninformation, describing how the alternate alleles are phased in relation to one\nanother\">\n##FORMAT=<ID=PID,Number=1,Type=String,Description=\"Physical phasing ID information,\nwhere each unique ID within a given sample (but not across samples) connects\nrecords\nwithin a phasing group\">\n```", "```\n$ cp $WF/hello-hc/hello-haplotypecaller.wdl ~/sandbox-8/hc-break1.wdl\n```", "```\n$ java -jar $BIN/cromwell-48.jar \\\n    run ~/sandbox-8/hc-break1.wdl \\\n    -i $WF/hello-hc/hello-haplotypecaller.inputs.json\n```", "```\n[2019-08-14 07:30:49,55] [error] WorkflowManagerActor Workflow 0891bf2c-4539-498c-\na082-bab457150baf failed (during MaterializingWorkflowDescriptorState):\ncromwell.engine.workflow.lifecycle.materialization.MaterializeWorkflowDescriptorAct\nor$$anon$1: Workflow input processing failed:\nERROR: Unexpected symbol (line 20, col 2) when parsing ’_gen18’.\n\nExpected rparen, got command .\n       command {\n^\n$e = :string\n\n[stack trace]\n[2019-08-14 07:30:49,57] [info] WorkflowManagerActor WorkflowActor-0891bf2c-4539-\n498c-a082-bab457150baf is in a terminal state: WorkflowFailedState\n```", "```\n$ java -jar $BIN/womtool-48.jar \\\n    validate ~/sandbox-8/hc-break1.wdl \n\nERROR: Unexpected symbol (line 20, col 2) when parsing '_gen18'.\nExpected rparen, got command .\n       command {\n^\n$e = :string\n```", "```\n       command {\n               gatk --java-options ${java_opt} HaploCaller \\\n                       -R ${refFasta} \\\n                       -I ${inputBam} \\\n                       -O ${gvcfName} \\\n                       -L ${intervals} \\\n                       -ERC GVCF\n       }\n```", "```\n$ java -jar $BIN/cromwell-48.jar \\\n    run ~/sandbox-8/hc-break2.wdl \\\n    -i $WF/hello-hc/hello-haplotypecaller.inputs.json\n```", "```\n[2019-08-14 07:09:52,12] [error] WorkflowManagerActor Workflow dd77316f-7c18-4eb1\n-aa86-e307113c1668 failed (during ExecutingWorkflowState): Job\nHelloHaplotypeCaller.HaplotypeCallerGVCF:NA:1 exited with return code 2 which has\nnot been declared as a valid return code. See ’continueOnReturnCode’ runtime\nattribute for more details.\nCheck the content of stderr for potential additional information:\n/home/username/cromwell-executions/HelloHaplotypeCaller/dd77316f-7c18-4eb1-aa86-\ne307113c1668/call-HaplotypeCallerGVCF/execution/stderr.\n[First 300 bytes]:Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell-\nexecutions/HelloHaplotypeCaller/dd77316f-7c18-4eb1-aa86-e307113c1668/call-\nHaplotypeCallerGVCF/tmp\n.e6f08f65\nUSAGE:  <program name> [-h]\nAvailable Programs:\n```", "```\n$ cat /home/username/cromwell-executions/HelloHaplotypeCaller/dd77316f-7c18-4eb1\n-aa86-e307113c1668/call-HaplotypeCallerGVCF/execution/stderr\n(...)\n***********************************************************************\nA USER ERROR has occurred: 'HaploCaller' is not a valid command.\nDid you mean this?\n       HaplotypeCaller\n***********************************************************************\n(...)\n```", "```\n$ nano $WF/scatter-hc/scatter-haplotypecaller.wdl\n```", "```\nversion 1.0\n\nworkflow ScatterHaplotypeCallerGVCF {\n\n input {\n        File input_bam\n        File input_bam_index\n        File intervals_list\n    }\n\n    String output_basename = basename(input_bam, \".bam\") \n\n    Array[String] calling_intervals = read_lines(intervals_list)\n\n    scatter(interval in calling_intervals) {\n        call HaplotypeCallerGVCF { \n            input: \n                input_bam = input_bam,\n                input_bam_index = input_bam_index,\n                intervals = interval, \n                gvcf_name = output_basename + \".scatter.g.vcf\"\n        }\n    }\n    call MergeVCFs { \n        input: \n            vcfs = HaplotypeCallerGVCF.output_gvcf, \n            merged_vcf_name = output_basename + \".merged.g.vcf\"\n    }\n\n    output {\n        File output_gvcf = MergeVCFs.mergedGVCF\n    }\n}\n\ntask HaplotypeCallerGVCF {\n\n input {\n        String docker_image\n        String java_opt\n\n        File ref_fasta\n        File ref_index\n        File ref_dict\n        File input_bam\n        File input_bam_index\n        String intervals\n        String gvcf_name\n    }\n\n    command {\n        gatk --java-options ${java_opt} HaplotypeCaller \\\n            -R ${ref_fasta} \\\n            -I ${input_bam} \\\n            -O ${gvcf_name} \\\n            -L ${intervals} \\\n            -ERC GVCF \n    }\n\n    output {\n        File output_gvcf = \"${gvcf_name}\"\n    }\n\n runtime {\n        docker: docker_image\n    }\n}\n\ntask MergeVCFs {\n\n    input {\n        String docker_image\n  String java_opt\n\n        Array[File] vcfs\n        String merged_vcf_name\n    }\n\n    command {\n        gatk --java-options ${java_opt} MergeVcfs \\\n            -I ${sep=’ -I’ vcfs} \\\n            -O ${merged_vcf_name}\n    }\n\n    output {\n        File merged_vcf = \"${merged_vcf_name}\"\n    }\n\n runtime {\n        docker: docker_image\n    }\n}\n```", "```\nscatter(intervals in calling_intervals) {\n        call HaplotypeCallerGVCF { ... }\n    }\n    call MergeVCFs { ... }\n```", "```\nscatter(intervals in calling_intervals) { \n```", "```\ncall HaplotypeCallerGVCF { \n            input: \n                input_bam = input_bam,\n                input_bam_index = input_bam_index,\n                intervals = intervals, \n                gvcf_name = output_basename + \".scatter.g.vcf\"\n        }\n```", "```\ncall MergeVCFs { ... }\n```", "```\ncommand {\n        gatk --java-options ${java_opt} MergeVcfs \\\n            -I ${sep=' -I' vcfs} \\\n            -O ${vcf_name}\n    }\n```", "```\ncall MergeVCFs { \n            input: \n            vcfs = HaplotypeCallerGVCF.output_gvcf, \n            merged_vcf_name = output_basename + \".merged.g.vcf\"\n    }\n```", "```\n$ java -jar $BIN/cromwell-48.jar \\\n       run $WF/scatter-hc/scatter-haplotypecaller.wdl \\\n       -i $WF/scatter-hc/scatter-haplotypecaller.local.inputs.json\n```", "```\n$ java -jar $BIN/womtool-48.jar \\\n       graph $WF/scatter-hc/scatter-haplotypecaller.wdl \\\n       > ~/sandbox-8/scatter-haplotypecaller.dot\n```", "```\n$ cat ~/sandbox-8/scatter-haplotypecaller.dot\ndigraph ScatterHaplotypeCallerGVCF {\n #rankdir=LR;\n compound=true;\n # Links\n CALL_HaplotypeCallerGVCF -> CALL_MergeVCFs\n SCATTER_0_VARIABLE_interval -> CALL_HaplotypeCallerGVCF\n # Nodes\n CALL_MergeVCFs [label=\"call MergeVCFs\"]\n subgraph cluster_0 {\n   style=\"filled,solid\";\n   fillcolor=white;\n   CALL_HaplotypeCallerGVCF [label=\"call HaplotypeCallerGVCF\"]\n   SCATTER_0_VARIABLE_interval [shape=\"hexagon\" label=\"scatter over String as interval\"]\n }\n}\n```"]