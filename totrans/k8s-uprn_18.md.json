["```\nconfig.load_kube_config()\n```", "```\nApiClient client = Config.defaultClient();\nConfiguration.setDefaultApiClient(client);\n```", "```\nvar config = KubernetesClientConfiguration.BuildDefaultConfig();\nvar client = new Kubernetes(config);\n```", "```\nconfig.load_incluster_config()\n```", "```\nApiClient client = ClientBuilder.cluster().build();\nConfiguration.setDefaultApiClient(client);\n```", "```\nvar config = KubernetesClientConfiguration.InClusterConfig()\nvar client = new Kubernetes(config);\n```", "```\nconfig.load_kube_config()\napi = client.CoreV1Api()\npod_list = api.list_namespaced_pod('default')\n```", "```\nApiClient client = Config.defaultClient();\nConfiguration.setDefaultApiClient(client);\nCoreV1Api api = new CoreV1Api();\nV1PodList list = api.listNamespacedPod(\"default\");\n```", "```\nvar config = KubernetesClientConfiguration.BuildDefaultConfig();\nvar client = new Kubernetes(config);\nvar list = client.ListNamespacedPod(\"default\");\n```", "```\ncontainer = client.V1Container(\n     name=\"myapp\",\n     image=\"my_cool_image:v1\",\n )\n\npod = client.V1Pod(\n    metadata = client.V1ObjectMeta(\n      name=\"myapp\",\n    ),\n    spec=client.V1PodSpec(containers=[container]),\n)\n```", "```\nV1Pod pod =\n    new V1PodBuilder()\n        .withNewMetadata().withName(\"myapp\").endMetadata()\n        .withNewSpec()\n          .addNewContainer()\n            .withName(\"myapp\")\n            .withImage(\"my_cool_image:v1\")\n          .endContainer()\n        .endSpec()\n        .build();\n```", "```\nvar pod = new V1Pod()\n{\n    Metadata = new V1ObjectMeta{ Name = \"myapp\", },\n    Spec = new V1PodSpec\n    {\n        Containers = new[] {\n          new V1Container() {\n            Name = \"myapp\", Image = \"my_cool_image:v1\",\n          },\n        },\n    }\n };\n```", "```\ndeployment.spec.replicas = 3\n\napi_response = api_instance.patch_namespaced_deployment(\n    name=\"my-deployment\",\n    namespace=\"some-namespace\",\n    body=deployment)\n```", "```\n// JSON-patch format\nstatic String jsonPatch =\n  \"[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"/spec/replicas\\\",\\\"value\\\":3}]\";\n\nV1Deployment patched =\n          PatchUtils.patch(\n              V1Deployment.class,\n              () ->\n                  api.patchNamespacedDeploymentCall(\n                      \"my-deployment\",\n                      \"some-namespace\",\n                      new V1Patch(jsonPatchStr),\n                      null,\n                      null,\n                      null,\n                      null,\n                      null),\n              V1Patch.PATCH_FORMAT_JSON_PATCH,\n              api.getApiClient());\n```", "```\nvar jsonPatch = @\"\n[{\n \"\"op\"\": \"\"replace\"\",\n \"\"path\"\": \"\"/spec/replicas\"\",\n \"\"value\"\": 3\n}]\";\n\nclient.PatchNamespacedPod(\n  new V1Patch(patchStr, V1Patch.PatchType.JsonPatch),\n  \"my-deployment\",\n  \"some-namespace\");\n```", "```\nconfig.load_kube_config()\napi = client.CoreV1Api()\nw = watch.Watch()\n\nfor event in w.stream(v1.list_namespaced_pods, \"some-namespace\"):\n  print(event)\n```", "```\n    ApiClient client = Config.defaultClient();\n    CoreV1Api api = new CoreV1Api();\n\n    Watch<V1Namespace> watch =\n        Watch.createWatch(\n            client,\n            api.listNamespacedPodCall(\n                \"some-namespace\",\n                null,\n                null,\n                null,\n                null,\n                null,\n                Integer.MAX_VALUE,\n                null,\n                null,\n                60,\n                Boolean.TRUE);\n            new TypeToken<Watch.Response<V1Pod>>() {}.getType());\n\n    try {\n      for (Watch.Response<V1Pod> item : watch) {\n        System.out.printf(\n          \"%s : %s%n\", item.type, item.object.getMetadata().getName());\n      }\n    } finally {\n      watch.close();\n    }\n```", "```\nvar config = KubernetesClientConfiguration.BuildConfigFromConfigFile();\nvar client = new Kubernetes(config);\n\nvar watch =\n  client.ListNamespacedPodWithHttpMessagesAsync(\"default\", watch: true);\nusing (watch.Watch<V1Pod, V1PodList>((type, item) =>\n{\n  Console.WriteLine(item);\n}\n```", "```\nconfig.load_kube_config()\napi = client.CoreV1Api()\nlog = api_instance.read_namespaced_pod_log(\n  name=\"my-pod\", namespace=\"some-namespace\")\n```", "```\nV1Pod pod = ...; // some code to define or get a Pod here\nPodLogs logs = new PodLogs();\nInputStream is = logs.streamNamespacedPodLog(pod);\n```", "```\nIKubernetes client = new Kubernetes(config);\nvar response = await client.ReadNamespacedPodLogWithHttpMessagesAsync(\n    \"my-pod\", \"my-namespace\", follow: true);\nvar stream = response.Body;\n```", "```\ncmd = [ 'ls', '/foo' ]\nresponse = stream(\n    api_instance.connect_get_namespaced_pod_exec,\n    \"my-pod\",\n    \"some-namespace\",\n    command=cmd,\n    stderr=True,\n    stdin=False,\n    stdout=True,\n    tty=False)\n```", "```\nApiClient client = Config.defaultClient();\nConfiguration.setDefaultApiClient(client);\nExec exec = new Exec();\nfinal Process proc =\n  exec.exec(\"some-namespace\",\n            \"my-pod\",\n            new String[] {\"ls\", \"/foo\"},\n            true,\n            true /*tty*/);\n```", "```\nvar config = KubernetesClientConfiguration.BuildConfigFromConfigFile();\nIKubernetes client = new Kubernetes(config);\nvar webSocket =\n    await client.WebSocketNamespacedPodExecAsync(\n      \"my-pod\", \"some-namespace\", \"ls /foo\", \"my-container-name\");\nvar demux = new StreamDemuxer(webSocket);\ndemux.Start();\nvar stream = demux.GetStream(1, 1);\n```", "```\npf = portforward(\n    api_instance.connect_get_namespaced_pod_portforward,\n    'my-pod', 'some-namespace',\n    ports='8080',\n)\n```", "```\nPortForward fwd = new PortForward();\n\nList<Integer> ports = new ArrayList<>();\nint localPort = 8080;\nint targetPort = 8080;\nports.add(targetPort);\nfinal PortForward.PortForwardResult result =\n    fwd.forward(\"some-namespace\", \"my-pod\", ports);\n```", "```\nvar config = KubernetesClientConfiguration.BuildConfigFromConfigFile();\nIKubernetes client = new Kubernetes(config);\nvar webSocket = await client.WebSocketNamespacedPodPortForwardAsync(\n  \"some-namespace\", \"my-pod\", new int[] {8080}, \"v4.channel.k8s.io\");\nvar demux = new StreamDemuxer(webSocket, StreamType.PortForward);\ndemux.Start();\nvar stream = demux.GetStream((byte?)0, (byte?)0);\n```"]