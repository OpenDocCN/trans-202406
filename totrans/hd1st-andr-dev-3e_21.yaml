- en: 'Chapter 18\. Jetpack Compose: *Compose Yourself*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0755-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**All the UIs you’ve built so far have used views and layout files.**'
  prefs: []
  type: TYPE_NORMAL
- en: But with **Jetpack Compose**, **that’s not the only option**. In this chapter,
    we’re going to take **a road trip to Composeville**, and find out how to build
    UIs using Compose components called **composables** instead of views. You’ll learn
    how to use built-in composables such as **Text**, **Image**, **TextField,** and
    **Button**. You’ll discover how to arrange them in **Rows** and **Columns**, and
    style them using **themes**. You’ll write and preview your own **composable functions**.
    You’ll even find out **how to manage a composable’s state** using ***MutableState***
    objects. Turn the page, and let’s get composing…
  prefs: []
  type: TYPE_NORMAL
- en: UI components don’t have to be Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, you’ve learned how to use layout files and views to build
    swish, interactive UIs. But while we’ve focused on this approach, it’s not your
    only option.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative is to build your UI using **Jetpack Compose**. Compose is part
    of Android Jetpack; it’s an entire toolkit of libraries, tools, and APIs designed
    to help you build native UIs with pure Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: The great news is that using Jetpack Compose builds on your existing Android
    knowledge. You can use view models and live data with Compose, for example, and
    even add Compose components to existing UIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll find out more about this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to build a Compose app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to introduce you to Compose by building a new
    Temperature Converter app that converts temperatures from Celsius to Fahrenheit.
    Here’s what the app will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0756-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the app uses several familiar looking components. The main difference
    is that it’s written using Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start building the app, see if you can tell what Compose code does
    by giving the following exercise a try.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve had a glimpse of some Compose code and seen what it does, let’s
    run through what we’ll do in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create an app that displays two text items in a column.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll create a new project that uses Compose to display some hardcoded text.
    You’ll then convert the code into a composable function, and learn how to preview
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0759-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Make the app convert a temperature from Celsius to Fahrenheit.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, you’ll build a UI that lets you enter a temperature in degrees
    Celsius. When you click a button, it converts the temperature to Fahrenheit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0759-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Modify the app’s appearance.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you’ll learn how to center components, use padding, and apply a theme.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0759-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s begin by creating a new project for the app.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Compose project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0760-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We’re going to create a new Android Studio project that will use Compose for
    its UI. Create this project now by selecting the **Empty Compose Activity** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0760-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing this option adds a bunch of Compose libraries and code to your project.
    It’s the best type of project to create if you want to build an Android app from
    scratch with a Compose UI.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve selected the Empty Compose Activity option, click on the Next button
    to configure the project.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next screen should look familiar to you, as it includes the same options
    that you’ve used to configure projects throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Enter a name of “Temperature Converter” and a package name of “com.hfad.temperatureconverter”
    and accept the default save location.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the language is set to Kotlin, and can’t be updated. Compose apps
    can *only* be created using Kotlin, so you can’t select a different language.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a minimum SDK of API 21 so that the app will run on most Android devices.
    This is the oldest SDK that’s available for this type of project, because Compose
    is only compatible with API 21 and above.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve selected these options, click on the Finish button.
  prefs: []
  type: TYPE_NORMAL
- en: '**Compose UIs can only be created using Kotlin.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](Images/f0761-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Compose projects have no layout files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create a project using the Empty Compose Activity option, Android
    Studio creates a folder structure for you, populated with all the files the new
    project needs. The folder structure looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0762-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Many of the files and folders should look familiar to you, as they’re the same
    ones that get generated for projects that don’t use Compose. It includes an activity
    file named *MainActivity.kt*, for example, and a `String` resource file named
    *strings.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: The big difference is that **Android Studio doesn’t generate any layout files
    for you**. This is because Compose projects use activity code to define the screen’s
    appearance instead of layouts.
  prefs: []
  type: TYPE_NORMAL
- en: What Compose activity code looks like
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use Compose, the activity code is responsible for the app’s behavior
    *and* its appearance. For this reason, it looks slightly different from the activity
    code you’re used to working with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what basic Compose activity code looks like. Open the package *com.hfad.temperatureconverter*
    in the *app/src/main/java* folder, and open the file *MainActivity.kt* (if it’s
    not already open). Then **replace the code** that Android Studio generated with
    the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0763-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Compose activities extend ComponentActivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, the above activity doesn’t extend `AppCompatActivity`: it uses
    `**ComponentActivity**` instead. `androidx.activity.ComponentActivity` is a subclass
    of `Activity`, and it’s used to define a basic activity that uses Compose for
    its UI instead of a layout file.'
  prefs: []
  type: TYPE_NORMAL
- en: Just like all the other activities you’ve seen, the activity overrides the `onCreate()`
    method. Instead of calling `setContentView()` to inflate the activity’s layout,
    however, it uses `**setContent()**`. This is an extension function that’s used
    to add Compose components—called **composables**—to an activity’s UI so they run
    when the activity gets created.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how this works by using Compose to add some text to the activity’s
    UI..
  prefs: []
  type: TYPE_NORMAL
- en: Use a Text composable to display text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to make `MainActivity` display some text by adding a `**Text**`
    composable to the call to `setContent()`. You can think of `Text` as being the
    Compose equivalent of a text view. Simply specify the text you want to show, and
    the activity displays it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to add some text to `MainActivity`; update the code for *MainActivity.kt*
    to include the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0764-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When this code runs, it displays the text at the top of the screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0764-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve learned how to display some hardcoded text with Compose, let’s
    make it more flexible by adding the `Text` to a **composable function**.
  prefs: []
  type: TYPE_NORMAL
- en: Use composables in composable functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A composable function is a function that uses one or more composables to define
    part of the UI.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, we’ll define a composable function named `Hello` that
    accepts a `String` argument for the user’s name. When the function runs—or is
    **composed**—it will add the `String` to a `Text` composable, which displays the
    text in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the new `Hello` function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0765-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the function is annotated with `**@Composable**`. This annotation
    is required for *all* composable functions. If you omit the annotation, the code
    won’t compile.
  prefs: []
  type: TYPE_NORMAL
- en: Call the Hello composable from setContent()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Marking the function with `@Composable` doesn’t just specify that it uses composables;
    **it makes the function itself a composable**, which you can use in your code
    like any other sort of composable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the app we’re building, we want to display the `Hello` text in `MainActivity`’s
    UI. We can do so by calling `Hello` from `setContent()` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0765-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When this code runs, it displays the text like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0765-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Most UIs have multiple composables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, you’ve seen how to run a single composable, but most of the time, you’ll
    want to use multiple composables in the UI, or call the same composable multiple
    times. If you wanted the app to say hello twice, for example, you could run the
    `Hello` composable function twice with different arguments like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have a UI that includes multiple composables, you need to specify
    how they should be arranged. If you don’t, Compose will stack the composables
    on top of one another like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0766-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So how do you arrange composables?
  prefs: []
  type: TYPE_NORMAL
- en: You can arrange composables using Row or Column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the time, you’ll probably want to arrange composables in rows or columns,
    and Compose includes `**Row**` and `**Column**` composables that let you do this.
    To arrange two `Hello` composables in a column, for example, you’d simply add
    them to a `Column` composable like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the code runs, the composables are arranged in a column like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0766-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s update `MainActivity` so that it produces this UI.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to add the `Hello` composable function to *MainActivity.kt*, run
    it twice, and arrange the results in a column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete code for the file; update *MainActivity.kt* to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0767-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive and see what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` is displayed. It includes two `Hello` composables
    arranged in a single column.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0768-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to use Compose to create `MainActivity`’s
    UI instead of adding views to a layout file.
  prefs: []
  type: TYPE_NORMAL
- en: You can preview composable functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another feature of using composable functions is that you can preview them within
    Android Studio without having to load the app onto a device. You can preview any
    composable function so long as it doesn’t have any arguments, and you can even
    use this technique to preview entire **compositions**—UIs made up of composables.
  prefs: []
  type: TYPE_NORMAL
- en: '**A composition is a UI made up of composables.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You say you want to preview a composable function by annotating it with `**@Preview**`.
    The following code, for example, specifies a composable function named `PreviewMainActivity`
    that lets you preview two `Hello` composables arranged in a column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0769-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add MainActivityPreview to MainActivity.kt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To see how previews work, let’s add the `MainActivityPreview` composable function
    to *MainActivity.kt*. Update the file so that it includes the changes shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0769-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you how to see the preview on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Preview composables with the Design or Split option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can preview any composable functions marked with `@Preview` by selecting
    the Split or Design view of the activity file. Choosing Split lets you see the
    code and preview side by side, and choosing Design just displays the preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what `MainActivityPreview` looks like when we select the Split option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0770-02.png)'
  prefs: []
  type: TYPE_IMG
- en: If you make changes to the composable function you’re previewing, you need to
    refresh the preview before you can see what it looks like. Simply click on the
    Build Refresh button in the preview’s top menu and you should see the effect of
    your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve learned how to preview composable functions, try the following
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '**You can preview any composable function that has no arguments.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your **job** is to take code snippets from the pool and place them into the
    blank lines in the code below. You may **not** use the same snippet more than
    once, and you won’t need to use all the snippets. Your **goal** is to create two
    composable functions: one named `TeamHello` that accepts a list of names and says
    hello to each person, and one named `HelloPreview` that previews `TeamHello` and
    arranges its text in a column.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0771-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0771-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: each thing from the pool can only be used once!**'
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your **job** is to take code snippets from the pool and place them into the
    blank lines in the code below. You may **not** use the same snippet more than
    once, and you won’t need to use all the snippets. Your **goal** is to create two
    composable functions: one named `TeamHello` that accepts a list of names and says
    hello to each person, and one named `HelloPreview` that previews `TeamHello` and
    arranges its text in a column.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0772-01.png)![image](Images/f0772-02.png)![image](Images/f0772-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s make the app convert temperatures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0773-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, you’ve used Compose to display text, written some composable functions,
    and learned how to preview them. But that’s not the end of the story.
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of this chapter, we’re going to take you deeper into Compose by
    changing the app we’ve just built into one that converts temperatures from Celsius
    to Fahrenheit. Instead of saying hello, it will ask the user for a temperature
    in Celsius, and convert it when she clicks on a button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the app will look like; as you can see, it includes an image, a
    text field that lets you enter data, a button, and some text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0773-02.png)'
  prefs: []
  type: TYPE_IMG
- en: What are you waiting for? Let’s get composing.
  prefs: []
  type: TYPE_NORMAL
- en: Add a MainActivityContent composable function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll begin by adding a new composable function to *MainActivity.kt* named `MainActivityContent`
    that we’ll use for the activity’s main content. We’ll add all the composables
    needed for `MainActivity`’s UI to this function, and call it from `setContent()`
    and `PreviewMainActivity`. This approach means that the activity’s composition
    will be displayed both when we run the app, and in the preview.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also remove the `Hello` composable function from the code as this is no
    longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *MainActivity.kt*; update the file to include these
    changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0774-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Display the header image…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first component we’ll add to `MainActivityContent` is an image that appears
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure that your project includes the folder *app/src/main/res/drawable*
    (you’ll need to create it if it’s not there). Then download the file *sunrise.webp*
    from *tinyurl.com/hfad3*, and add it to the *drawable* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0775-02.png)'
  prefs: []
  type: TYPE_IMG
- en: …with an Image composable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You display an image in Compose using an `**Image**` composable. The basic
    code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0775-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Image` composable requires two arguments: `painter` and `contentDescription`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `painter` argument specifies the image that should be displayed. Here, it
    uses `painterResource(R.drawable.sunrise)` to display the *sunrise.webp* drawable
    resource.
  prefs: []
  type: TYPE_NORMAL
- en: The `contentDescription` argument is a description of the image that’s used
    for accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many other optional arguments you can use to control the image appearance,
    and how it’s displayed. The following code, for example, sets the image height
    to 180dp, makes it fill the available width, and scales the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0775-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve seen how to add an image with Compose, let’s add one to `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: Add an Image to MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0776-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to add an image to `MainActivity` by defining a new composable function
    (named `Header`) to *MainActivity.kt* that creates one. We’ll run this from the
    `MainActivityContent` composable function so that the image is added to the UI
    and the preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *MainActivity.kt*; update this file to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0776-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything we need to display an image in the composition, so let’s move
    on to the next component.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s display the temperature text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0777-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we’ll include is a composable function (named `TemperatureText`)
    that converts a Celsius temperature to Fahrenheit, and displays the result. We’ll
    call this function from `MainActivityContent` so that it’s included in both the
    UI and the preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re already familiar with the code to do this, so update *MainActivity.kt*
    to include the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0777-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run (or preview) the app, it displays an `Image` and `Text` in a column.
    The `Text` correctly shows the value of 0° Celsius in Fahrenheit.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve made sure the `TemperatureText` function works with a hardcoded
    temperature, let’s update it to a new temperature when the user clicks a button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0777-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Use a Button composable to add a button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You add a button in Compose using a `**Button**` composable. `Button` code
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0778-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you use a `Button` composable, you need to specify two things: its click
    behavior, and what should be displayed on the button.'
  prefs: []
  type: TYPE_NORMAL
- en: You specify its click behavior using the `Button`’s `onClick` argument. This
    accepts a lambda that runs each time the user clicks the button.
  prefs: []
  type: TYPE_NORMAL
- en: You say what should be displayed on the `Button` using a separate lambda that
    includes a composable. When the code runs, it adds the composable to the `Button`.
    The above code, for example, passes the `Button` a `Text` composable, so it creates
    a button with text on it.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s write a ConvertButton composable function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re going to add a `Button` composable to the Temperature Converter app that,
    when clicked, changes the temperature that `TemperatureText` converts to Fahrenheit.
    To do this, we’ll write a new composable function (named `ConvertButton`) that
    displays a `Button`. We’ll also specify that it accepts a lambda argument that
    the function will use for the `Button`’s click behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code for the `ConvertButton` composable function looks like;
    we’ll add it to M*ainActivity.kt* a few pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0778-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve written the `ConvertButton` function, let’s add it to `MainActivityContent`
    so that the `Button` composable gets added to the UI.
  prefs: []
  type: TYPE_NORMAL
- en: We need to pass a lambda to ConvertButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0779-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run `ConvertButton` from `MainActivityContent`, we need to pass it a lambda
    that specifies what should happen when it’s clicked. The code needs to look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When `ConvertButton` is clicked, we want it to update the text displayed by
    `TemperatureText`. If `TemperatureText` was a *view*, we could update its text
    using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: While this approach works with views, however, it doesn’t work for *composables*.
    With composables, you need a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0779-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Composables and views work differently.**'
  prefs: []
  type: TYPE_NORMAL
- en: While views and composables let you display similar looking components (such
    as text and buttons), they do this in different ways. A composable isn’t a type
    of `View`, and a `View` isn’t a type of composable, so to interact with composables,
    you need to do things a little differently.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, let’s go through what happens when the UI is composed
    during composition.
  prefs: []
  type: TYPE_NORMAL
- en: We need to change the value of TemperatureText’s argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you’ve just seen, composables are recomposed when the values they depend
    on get updated. This means that if we want `TemperatureText` to display different
    text when the user clicks on `ConvertButton`’s button, the lambda we pass to `ConvertButton`
    needs to update the value of `TemperatureText`’s argument.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we’ll add a new `celsius` variable to `MainActivityContent`, and
    pass its value to `TemperatureText`. When the user clicks on the `ConvertButton`
    composable, we’ll get it to update the value of `celsius` so that `TemperatureText`
    is recomposed.
  prefs: []
  type: TYPE_NORMAL
- en: '**A composable is recomposed when any of its inputs change their value.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use remember to store celsius in memory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll define the `celsius` variable by adding the following code to `MainActivityContent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0781-02.png)'
  prefs: []
  type: TYPE_IMG
- en: This creates an object whose type is `**MutableState**`, sets its value to `0`,
    and stores it in memory. You can think of `celsius` as working a bit like a live
    data object. Each time it gets set to a new value, any composables that use it
    are notified, and recomposed.
  prefs: []
  type: TYPE_NORMAL
- en: The object is stored in memory using `**remember**`. `remember` stores an object
    when the composable that calls it—in this case `MainActivityContent`—is first
    composed, and forgets it when the composable is removed from the UI. This can
    happen when the user rotates the device, and the activity—including its UI—is
    destroyed and recreated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like a `MutableLiveData` object, you set a `MutableState` object’s value
    by updating its `**value**` property. To set the value of `celsius` to 20 when
    the user clicks on the `ConvertButton` composable, for example, you’d use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0781-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for `TemperatureText` to respond to this value change, its argument
    needs to be set to `celsius.value` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Each time `celsius.value` gets updated, `TemperatureText` is recomposed with
    the new value, which changes the text that’s displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll show you the full code over the next couple pages.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the complete code so far for *MainActivity.kt*; update the file to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0782-02.png)![image](Images/f0783-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s run through what happens when the code runs, and take the app for a test
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MainActivity launches, and its onCreate() method runs.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It calls `setContent()`, which runs the `MainActivityContent` composable function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0784-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivityContent creates a MutableState<Int> variable named celsius, sets
    its value to 0, and stores it in memory.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0784-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivityContent runs the Header, ConvertButton, and TemperatureText composable
    functions.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It passes the value of `celsius` to the `TemperatureText` composable function,
    which converts it to Fahrenheit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0784-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The Header, ConvertButton, and TemperatureText composable functions add an
    image, a button, and some text to the UI.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0785-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks on the ConvertButton composable in the UI.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This sets the value of `celsius` to 20.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0785-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TemperatureText is recomposed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It converts the new value of `celsius` to Fahrenheit, and displays the result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0785-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` is displayed. It includes an image, a button,
    and some text that gives the value of 0° Celsius in Fahrenheit.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Convert button, the text is updated to give the value of
    20° Celsius in Fahrenheit instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0786-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we need to do is let the user enter her own temperatures. We’ll
    do this after you’ve tried the exercise on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Compose Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Someone used fridge magnets to create a new composable function named `ChangeHello`.
    The function displays some text that says “Hello friend”, and a button that, when
    clicked, changes the text to “Hello everyone”.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately a stray cat ran into the kitchen and dislodged some of the magnets.
    Can you piece them back together again?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0787-01.png)![image](Images/f0787-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Compose Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Someone used fridge magnets to create a new composable function named `ChangeHello`.
    The function displays some text that says “Hello friend”, and a button that, when
    clicked, changes the text to “Hello everyone”.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately a stray cat ran into the kitchen and dislodged some of the magnets.
    Can you piece them back together again?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0788-01.png)![image](Images/f0788-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let the user enter a temperature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0789-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, you’ve built a version of the Temperature Converter app that converts
    a hardcoded temperature from Celsius to Fahrenheit. When the user clicks on a
    button, it changes the temperature that’s being converted to another value.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we *really* want to do is let the user convert her own temperatures, so
    the next thing we’ll do is add a text field to the UI. The user will enter a Celsius
    temperature into the text field, and when she clicks the button, the app will
    convert it to Fahrenheit and display the result:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a TextField composable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll add a text field to the UI using a `TextField` composable. You can think
    of this type of composable as the Compose equivalent of an `EditText`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You add a `TextField` using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0789-02.png)![image](Images/f0789-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The `value` attribute is used for the `TextField`’s value, and in this example,
    it uses a `MutableState` variable named `text` to store this value in memory.
  prefs: []
  type: TYPE_NORMAL
- en: The `onValueChange` attribute uses a lambda to update the value of the `text`
    variable when the user enters text.
  prefs: []
  type: TYPE_NORMAL
- en: The `label` attribute provides the `TextField`’s label. It’s displayed in the
    text area when the `TextField` is empty, and moves out of the way when the user
    enters text.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve seen what text field code looks like, let’s add one to the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0789-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a TextField to a composable function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll add a `TextField` to the UI by creating a new `EnterTemperature` composable
    function, which we’ll call from `MainActivityContent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code for the `EnterTemperature` function looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0790-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the function accepts two arguments: a `String` for the `TextField`’s
    value, and a lambda that specifies what should happen when the user enters a new
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: Call the function in MainActivityContent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MainActivityContent` needs to pass both arguments to `EnterTemperature` when
    it runs the function, so we’ll use a new `MutableState` object named `newCelsius`
    for its value, and update it when the user enters text.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also change the lambda that’s passed to `ConvertButton` so that it updates
    the value of `celsius` when the user enters a valid `Int`; this will recompose
    `TemperatureText` when the user enters a new temperature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code looks like; we’ll update *MainActivity.kt* on the next
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0790-03.png)![image](Images/f0790-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the code for *MainActivity.kt*; update the file to include the changes
    below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0791-02.png)![image](Images/f0792-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s see what happens when the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When MainActivityContent runs, it creates a MutableState<Int> variable named
    celsius, and a MutableState<String> named newCelsius.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It sets `celsius` to `0` and `newCelsius` to `""` and stores both in memory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0793-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivityContent runs the EnterTemperature, Header, ConvertButton, and
    TemperatureText composable functions.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It passes the value of `celsius` to the `TemperatureText` composable function,
    which converts it to Fahrenheit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0793-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The Header, EnterTemperature, ConvertButton, and TemperatureText composable
    functions add an image, a text field, a button, and some text to the UI.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0793-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user enters a new value into EnterTemperature (in this example “25”).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EnterTemperature` sets `newCelsius` to this value.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0794-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks on the ConvertButton composable.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It converts the value of `newCelsius` to an `Int`, and assigns it to `celsius.value`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0794-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TemperatureText is recomposed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It converts the new value of `celsius` to Fahrenheit, and displays the result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0794-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` includes a text field.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter a temperature and click on the Convert button, the app converts
    the temperature to Fahrenheit and updates the temperature text.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0795-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The app now works in exactly the way we want. All that’s left is for us to make
    some extra tweaks to its appearance.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll tweak the app’s appearance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0796-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to change the app so that there’s a gap between the edge of the
    screen and the UI components, and the button is centered horizontally. We’ll also
    style the composables so that they use the default Material theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the new version of the app will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0796-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll make these tweaks over the next few pages. We’ll start by adding some
    space around the edge of the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Add padding to the Column composable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to add a gap between the edge of the screen and the app’s components
    so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0797-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll do this by adding some **padding** to the `Column` composable. Applying
    padding to composables has a similar effect to when you apply it to views; it
    adds extra space around the component’s edges.
  prefs: []
  type: TYPE_NORMAL
- en: 'You add padding to a composable using a `**Modifier**`. `Modifier`s let you
    decorate or add extra behavior to composables. To add padding of 16dp to a `Column`
    composable, for example, you’d use the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`Modifier`s are extremely flexible. You may remember, for example, that when
    we wrote the `Header` composable function, we used a `Modifier` to set the `Image`
    height and width like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0797-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We’ll add padding to the app’s `Column` composable a few pages ahead. Before
    we do that, let’s find out how to center the `Button`.
  prefs: []
  type: TYPE_NORMAL
- en: You can center composables in Columns or Rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to center one or more composables, such as a `Button` or `Text`,
    you can do so using `Column`s and `Row`s. There are a couple approaches you can
    take, depending on what you want to do.
  prefs: []
  type: TYPE_NORMAL
- en: Center all of a Column’s content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to align the composables in a `Column` so they’re all centered horizontally,
    you can do so by making the `Column` as wide as possible, then setting its `**horizontalAlignment**`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'To horizontally center all the composables in the Temperature Converter app,
    for example, we’d add the code (in bold) to the `Column` composable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0798-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Doing so makes the app look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0798-04.png)'
  prefs: []
  type: TYPE_IMG
- en: But what if you want to center just one of the composables?
  prefs: []
  type: TYPE_NORMAL
- en: Center the content of a single Row
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to horizontally center a single composable, you can do so by placing
    it in a `Row`. Simply modify the `Row` to make it as wide as possible, then set
    its `**horizontalArrangement**` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'To horizontally center the `ConvertButton` composable, for example, we could
    put it in a `Row`, and center it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0799-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Doing so centers the button like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0799-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That’s how you use `Column`s and `Row`s to align and arrange composables. Before
    we update *MainActivity.kt*, there’s just one final thing we need to discuss:
    how to apply themes to composables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying themes: revisited'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in [Chapter 8](ch08.xhtml#navigation_uicolon_going_places), themes
    let you give your app a common look and feel. You can use one to remove the default
    app bar, for example, or change the app’s colors.
  prefs: []
  type: TYPE_NORMAL
- en: You already know that you can apply a theme by defining one in the app’s style
    resource files, which you then refer to in *AndroidManifest.xml*. Doing so applies
    the theme to the app, including any views. What this *doesn’t* do, however, is
    apply the theme to any *composables*. To style these, you need to use a different
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: How to apply a theme to composables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to apply a theme to a composition, you need to do so using Kotlin
    code. The following code, for example, uses `MaterialTheme` and `Surface` composables
    to apply a theme to `MainActivityContent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0800-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '`**MaterialTheme**` is used to apply the default Material theme to composables.
    In this case, it applies it to `MainActivityContent` and the composables this
    function calls, such as `TemperatureText` and `ConvertButton`.'
  prefs: []
  type: TYPE_NORMAL
- en: The above code also includes a `**Surface**` composable, which is used to style
    surfaces. It’s used to apply things like 3D effects and shadows.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to override the default `MaterialTheme`, you can do so be defining
    a new theme in Kotlin code. Android Studio usually adds extra theme code for you
    when you choose the option to create a new project with a Compose activity, so
    let’s take a look at this code and see what it does.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio includes extra theme code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we created the Temperature Converter project, Android Studio added extra
    Kotlin files to define a new theme. These files are named *Color.kt*, *Shape.kt*,
    *Theme.kt,* and *Type.kt*, and they’re located in the *app/src/main/java* folder
    in the *com.hfad.temperatureconverter.ui.theme* package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main file is *Theme.kt*, as it defines a new theme for the app. The theme’s
    name is `TemperatureConverterTheme`, and its code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0801-02.png)![image](Images/f0801-03.png)![image](Images/f0802-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the theme overrides the `MaterialTheme` colors, typography,
    and shapes. If you want to tweak any of these, you can do so by updating the files
    in the *.ui.theme* package.
  prefs: []
  type: TYPE_NORMAL
- en: How to apply the theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you’ve defined a theme, you can apply it to the app’s composables. To
    apply `TemperatureConverterTheme` to `MainActivityContent`, for example, you’d
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0802-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now know everything that you need to tweak the UI’s appearance and make
    it look exactly how we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete code for *MainActivity.kt*; update the file to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0803-02.png)![image](Images/f0804-02.png)![image](Images/f0805-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` is displayed, and the UI looks exactly how
    we want it to. There’s a gap between the UI and the edge of the screen, the button
    is centered horizontally, and it uses the default Material theme.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0806-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to build a UI using Jetpack Compose
    instead of views.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll take this knowledge even further by learning how
    to integrate composables into an existing `View`-based UI.
  prefs: []
  type: TYPE_NORMAL
- en: BE Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The composable function below includes a TextField, a Button, and a Text.
    When the user enters a name in the TextField and clicks the Button, the new name
    should be displayed in the Text. Your job is to play like you’re Compose, and
    say if the fiunction works as intended. If not, how would you change it?**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: BE Compose Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The composable function below includes a TextField, a Button, and a Text.
    When the user enters a name in the TextField and clicks the Button, the new name
    should be displayed in the Text. Your job is to play like you’re Compose, and
    say if the function works as intended. If not, how would you change it?**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Code changes are needed to make the function work as intended. We’ve added
    these to the code below.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0808-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 18](#jetpack_composecolon_compose_yourself) under your
    belt and now you’ve added Jetpack Compose to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0809-01.png)'
  prefs: []
  type: TYPE_IMG
