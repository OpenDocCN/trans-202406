- en: 'Chapter 18\. Jetpack Compose: *Compose Yourself*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '第18章. Jetpack Compose: *自我组合*'
- en: '![image](Images/f0755-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0755-01.png)'
- en: '**All the UIs you’ve built so far have used views and layout files.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**到目前为止，你构建的所有UI都使用了视图和布局文件。**'
- en: But with **Jetpack Compose**, **that’s not the only option**. In this chapter,
    we’re going to take **a road trip to Composeville**, and find out how to build
    UIs using Compose components called **composables** instead of views. You’ll learn
    how to use built-in composables such as **Text**, **Image**, **TextField,** and
    **Button**. You’ll discover how to arrange them in **Rows** and **Columns**, and
    style them using **themes**. You’ll write and preview your own **composable functions**.
    You’ll even find out **how to manage a composable’s state** using ***MutableState***
    objects. Turn the page, and let’s get composing…
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用**Jetpack Compose**，**这并不是唯一的选择**。在本章中，我们将前往**Composeville**，了解如何使用Compose组件（称为**composables**）构建UI。你将学习如何使用内置的composables，如**Text**、**Image**、**TextField**和**Button**。你将探索如何将它们排列在**Rows**和**Columns**中，并使用**主题**进行样式化。你将编写并预览自己的**composable函数**。甚至，你将了解如何使用***MutableState***对象来管理composable的状态。翻页，让我们开始Compose吧…
- en: UI components don’t have to be Views
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI组件不必是Views
- en: So far in this book, you’ve learned how to use layout files and views to build
    swish, interactive UIs. But while we’ve focused on this approach, it’s not your
    only option.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，你已经学会了如何使用布局文件和视图来构建时髦且交互式的UI。但是尽管我们专注于这种方法，这并不是你唯一的选择。
- en: An alternative is to build your UI using **Jetpack Compose**. Compose is part
    of Android Jetpack; it’s an entire toolkit of libraries, tools, and APIs designed
    to help you build native UIs with pure Kotlin code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用**Jetpack Compose**构建你的UI。Compose是Android Jetpack的一部分；它是一个完整的工具包，包含了库、工具和API，旨在帮助你使用纯Kotlin代码构建原生UI。
- en: The great news is that using Jetpack Compose builds on your existing Android
    knowledge. You can use view models and live data with Compose, for example, and
    even add Compose components to existing UIs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 令人兴奋的消息是，使用**Jetpack Compose**可以在现有的Android知识基础上构建应用。例如，你可以在Compose中使用视图模型和LiveData，甚至将Compose组件添加到现有的UI中。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll find out more about this in the next chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将进一步了解这一点。
- en: We’re going to build a Compose app
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将构建一个Compose应用
- en: 'In this chapter, we’re going to introduce you to Compose by building a new
    Temperature Converter app that converts temperatures from Celsius to Fahrenheit.
    Here’s what the app will look like:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过构建一个新的温度转换器应用来向你介绍Compose，该应用可以将摄氏度转换为华氏度。这是应用程序的预览：
- en: '![image](Images/f0756-02.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0756-02.png)'
- en: As you can see, the app uses several familiar looking components. The main difference
    is that it’s written using Compose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这个应用使用了几个看起来很熟悉的组件。主要区别在于它是使用Compose编写的。
- en: Before we start building the app, see if you can tell what Compose code does
    by giving the following exercise a try.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用之前，试试看能否通过尝试以下练习来理解Compose代码的作用。
- en: Here’s what we’re going to do
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是我们将要做的事情
- en: Now that you’ve had a glimpse of some Compose code and seen what it does, let’s
    run through what we’ll do in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经初步了解了一些Compose代码并了解了它的作用，让我们看看本章中我们将要做什么。
- en: '**Create an app that displays two text items in a column.**'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个在列中显示两个文本项的应用。**'
- en: You’ll create a new project that uses Compose to display some hardcoded text.
    You’ll then convert the code into a composable function, and learn how to preview
    it.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将创建一个新项目，使用Compose显示一些硬编码文本。然后将代码转换为composable函数，并学习如何预览它。
- en: '![image](Images/f0759-01.png)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0759-01.png)'
- en: '**Make the app convert a temperature from Celsius to Fahrenheit.**'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使应用程序能够将摄氏度转换为华氏度。**'
- en: In this step, you’ll build a UI that lets you enter a temperature in degrees
    Celsius. When you click a button, it converts the temperature to Fahrenheit.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，你将构建一个UI，允许你输入摄氏度温度。当你点击按钮时，它会将温度转换为华氏度。
- en: '![image](Images/f0759-02.png)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0759-02.png)'
- en: '**Modify the app’s appearance.**'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修改应用的外观。**'
- en: Finally, you’ll learn how to center components, use padding, and apply a theme.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，你将学习如何居中组件，使用填充并应用主题。
- en: '![image](Images/f0759-03.png)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0759-03.png)'
- en: Let’s begin by creating a new project for the app.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建这个应用的新项目。
- en: Create a new Compose project
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Compose项目
- en: '![image](Images/f0760-01.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0760-01.png)'
- en: 'We’re going to create a new Android Studio project that will use Compose for
    its UI. Create this project now by selecting the **Empty Compose Activity** option:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的Android Studio项目，该项目将使用Compose进行UI设计。现在通过选择**空Compose活动**选项创建此项目：
- en: '![image](Images/f0760-02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0760-02.png)'
- en: Choosing this option adds a bunch of Compose libraries and code to your project.
    It’s the best type of project to create if you want to build an Android app from
    scratch with a Compose UI.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项会向您的项目添加一堆Compose库和代码。如果您想要使用Compose UI从头开始构建Android应用程序，这是最好的项目类型。
- en: Once you’ve selected the Empty Compose Activity option, click on the Next button
    to configure the project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了“空Compose活动”选项，请点击“下一步”按钮配置项目。
- en: Configure the project
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置项目
- en: The next screen should look familiar to you, as it includes the same options
    that you’ve used to configure projects throughout this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕应该对您来说很熟悉，因为它包含您在本书中用来配置项目的相同选项。
- en: Enter a name of “Temperature Converter” and a package name of “com.hfad.temperatureconverter”
    and accept the default save location.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输入名称为“温度转换器”，包名称为“com.hfad.temperatureconverter”，并接受默认保存位置。
- en: Notice that the language is set to Kotlin, and can’t be updated. Compose apps
    can *only* be created using Kotlin, so you can’t select a different language.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，语言设置为Kotlin，不能更改。Compose应用*只能*使用Kotlin创建，因此无法选择其他语言。
- en: Choose a minimum SDK of API 21 so that the app will run on most Android devices.
    This is the oldest SDK that’s available for this type of project, because Compose
    is only compatible with API 21 and above.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选择API 21作为最低SDK，以便应用程序在大多数Android设备上运行。这是这种类型项目可用的最旧SDK，因为Compose仅与API 21及以上版本兼容。
- en: Once you’ve selected these options, click on the Finish button.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了这些选项，点击“完成”按钮。
- en: '**Compose UIs can only be created using Kotlin.**'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Compose UI 只能使用 Kotlin 创建。**'
- en: '![image](Images/f0761-02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0761-02.png)'
- en: Compose projects have no layout files
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Compose项目没有布局文件
- en: 'When you create a project using the Empty Compose Activity option, Android
    Studio creates a folder structure for you, populated with all the files the new
    project needs. The folder structure looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用“空Compose活动”选项创建项目时，Android Studio会为您创建文件夹结构，并填充新项目所需的所有文件。文件夹结构如下所示：
- en: '![image](Images/f0762-02.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0762-02.png)'
- en: Many of the files and folders should look familiar to you, as they’re the same
    ones that get generated for projects that don’t use Compose. It includes an activity
    file named *MainActivity.kt*, for example, and a `String` resource file named
    *strings.xml*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 许多文件和文件夹应该对您来说很熟悉，因为它们与不使用Compose的项目生成的相同。例如，它包括一个名为*MainActivity.kt*的活动文件，以及一个名为*strings.xml*的`String`资源文件。
- en: The big difference is that **Android Studio doesn’t generate any layout files
    for you**. This is because Compose projects use activity code to define the screen’s
    appearance instead of layouts.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的区别在于**Android Studio不会为您生成任何布局文件**。这是因为Compose项目使用活动代码来定义屏幕的外观，而不是布局。
- en: What Compose activity code looks like
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Compose活动代码的外观
- en: When you use Compose, the activity code is responsible for the app’s behavior
    *and* its appearance. For this reason, it looks slightly different from the activity
    code you’re used to working with.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Compose时，活动代码负责应用程序的行为*和*外观。因此，它看起来与您习惯的活动代码略有不同。
- en: 'Let’s see what basic Compose activity code looks like. Open the package *com.hfad.temperatureconverter*
    in the *app/src/main/java* folder, and open the file *MainActivity.kt* (if it’s
    not already open). Then **replace the code** that Android Studio generated with
    the code shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看基本的Compose活动代码是什么样的。在*app/src/main/java*文件夹中打开包*com.hfad.temperatureconverter*，并打开文件*MainActivity.kt*（如果尚未打开）。然后**用这里显示的代码替换**Android
    Studio生成的代码：
- en: '![image](Images/f0763-02.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0763-02.png)'
- en: Compose activities extend ComponentActivity
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Compose活动扩展ComponentActivity
- en: 'As you can see, the above activity doesn’t extend `AppCompatActivity`: it uses
    `**ComponentActivity**` instead. `androidx.activity.ComponentActivity` is a subclass
    of `Activity`, and it’s used to define a basic activity that uses Compose for
    its UI instead of a layout file.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，上述活动不是扩展`AppCompatActivity`，而是使用`**ComponentActivity**`。 `androidx.activity.ComponentActivity`是`Activity`的子类，用于定义一个基本活动，该活动使用Compose来进行UI设计，而不是使用布局文件。
- en: Just like all the other activities you’ve seen, the activity overrides the `onCreate()`
    method. Instead of calling `setContentView()` to inflate the activity’s layout,
    however, it uses `**setContent()**`. This is an extension function that’s used
    to add Compose components—called **composables**—to an activity’s UI so they run
    when the activity gets created.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您看到的所有其他活动一样，该活动重写了 `onCreate()` 方法。但是，与调用 `setContentView()` 来填充活动的布局不同，它使用了
    `**setContent()**`。这是一个扩展函数，用于向活动的 UI 添加 Compose 组件—称为**可组合**—以便它们在活动创建时运行。
- en: Let’s see how this works by using Compose to add some text to the activity’s
    UI..
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看通过使用 Compose 向活动的 UI 添加一些文本是如何工作的。
- en: Use a Text composable to display text
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Text 可组合显示文本
- en: We’re going to make `MainActivity` display some text by adding a `**Text**`
    composable to the call to `setContent()`. You can think of `Text` as being the
    Compose equivalent of a text view. Simply specify the text you want to show, and
    the activity displays it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过向 `setContent()` 调用添加一个 `**Text**` 可组合来使 `MainActivity` 显示一些文本。您可以将 `Text`
    视为文本视图的 Compose 等效项。只需指定要显示的文本，活动就会显示它。
- en: 'Here’s the code to add some text to `MainActivity`; update the code for *MainActivity.kt*
    to include the changes below (in bold):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是向 `MainActivity` 添加一些文本的代码；更新 *MainActivity.kt* 中的代码以包含以下更改（用粗体标出）：
- en: '![image](Images/f0764-02.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0764-02.png)'
- en: 'When this code runs, it displays the text at the top of the screen like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当此代码运行时，会在屏幕顶部显示文本，如下所示：
- en: '![image](Images/f0764-03.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0764-03.png)'
- en: Now that you’ve learned how to display some hardcoded text with Compose, let’s
    make it more flexible by adding the `Text` to a **composable function**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何使用 Compose 显示一些硬编码文本，让我们通过将 `Text` 添加到**可组合函数**中使其更加灵活。
- en: Use composables in composable functions
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在可组合函数中使用可组合
- en: A composable function is a function that uses one or more composables to define
    part of the UI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可组合函数是使用一个或多个可组合函数来定义 UI 的函数。
- en: To see how this works, we’ll define a composable function named `Hello` that
    accepts a `String` argument for the user’s name. When the function runs—or is
    **composed**—it will add the `String` to a `Text` composable, which displays the
    text in the UI.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这是如何工作的，我们将定义一个名为 `Hello` 的可组合函数，它接受一个 `String` 参数作为用户的姓名。当函数运行—或被**组合**—时，它将将
    `String` 添加到一个 `Text` 可组合中，该可组合在 UI 中显示文本。
- en: 'The code for the new `Hello` function looks like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `Hello` 函数的代码如下：
- en: '![image](Images/f0765-02.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0765-02.png)'
- en: As you can see, the function is annotated with `**@Composable**`. This annotation
    is required for *all* composable functions. If you omit the annotation, the code
    won’t compile.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该函数带有 `**@Composable**` 注释。此注释对于*所有*可组合函数都是必需的。如果省略注释，代码将无法编译。
- en: Call the Hello composable from setContent()
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 setContent() 调用 Hello 可组合
- en: Marking the function with `@Composable` doesn’t just specify that it uses composables;
    **it makes the function itself a composable**, which you can use in your code
    like any other sort of composable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@Composable` 标记函数不仅指定它使用可组合；**它使函数本身成为一个可组合**，您可以像任何其他类型的可组合一样在代码中使用它。
- en: 'In the app we’re building, we want to display the `Hello` text in `MainActivity`’s
    UI. We can do so by calling `Hello` from `setContent()` like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正在构建的应用程序中，我们希望在 `MainActivity` 的 UI 中显示 `Hello` 文本。我们可以通过像这样从 `setContent()`
    调用 `Hello` 来实现：
- en: '![image](Images/f0765-03.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0765-03.png)'
- en: 'When this code runs, it displays the text like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当此代码运行时，会显示如下文本：
- en: '![image](Images/f0765-04.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0765-04.png)'
- en: Most UIs have multiple composables
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大多数 UI 都有多个可组合
- en: 'So far, you’ve seen how to run a single composable, but most of the time, you’ll
    want to use multiple composables in the UI, or call the same composable multiple
    times. If you wanted the app to say hello twice, for example, you could run the
    `Hello` composable function twice with different arguments like so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经看到如何运行单个可组合，但大多数情况下，您将希望在 UI 中使用多个可组合，或多次调用相同的可组合。例如，如果您希望应用程序说两次 hello，您可以像这样两次运行
    `Hello` 可组合函数，使用不同的参数：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you have a UI that includes multiple composables, you need to specify
    how they should be arranged. If you don’t, Compose will stack the composables
    on top of one another like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的 UI 包含多个可组合时，您需要指定它们应该如何排列。如果不这样做，Compose 将像这样将可组合堆叠在一起：
- en: '![image](Images/f0766-02.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0766-02.png)'
- en: So how do you arrange composables?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何排列可组合？
- en: You can arrange composables using Row or Column
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可以使用 Row 或 Column 排列可组合。
- en: 'Most of the time, you’ll probably want to arrange composables in rows or columns,
    and Compose includes `**Row**` and `**Column**` composables that let you do this.
    To arrange two `Hello` composables in a column, for example, you’d simply add
    them to a `Column` composable like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，您可能希望将可组合项排列为行或列，Compose包括`**Row**`和`**Column**`可组合项，让您可以这样做。例如，要将两个`Hello`可组合项排列在列中，您只需将它们添加到`Column`可组合项中，如下所示：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the code runs, the composables are arranged in a column like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码运行时，可组合项按以下方式排列在列中：
- en: '![image](Images/f0766-03.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0766-03.png)'
- en: Let’s update `MainActivity` so that it produces this UI.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`MainActivity`，以便它生成这个用户界面。
- en: The full code for MainActivity.kt
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*MainActivity.kt*的完整代码'
- en: We’re going to add the `Hello` composable function to *MainActivity.kt*, run
    it twice, and arrange the results in a column.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向*MainActivity.kt*添加`Hello`可组合函数，运行它两次，并将结果排列在列中。
- en: 'Here’s the complete code for the file; update *MainActivity.kt* to include
    the changes below (in bold):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文件的完整代码；更新*MainActivity.kt*以包含以下更改（加粗部分）：
- en: '![image](Images/f0767-02.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0767-02.png)'
- en: Let’s take the app for a test drive and see what it looks like.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试驾这个应用程序，看看它的外观。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/car.png) 测试驾驶'
- en: When we run the app, `MainActivity` is displayed. It includes two `Hello` composables
    arranged in a single column.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，将显示`MainActivity`。它包括排列在单列中的两个`Hello`可组合项。
- en: '![image](Images/f0768-02.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0768-02.png)'
- en: Congratulations! You’ve now learned how to use Compose to create `MainActivity`’s
    UI instead of adding views to a layout file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已经学会了使用Compose创建`MainActivity`的用户界面，而不是将视图添加到布局文件中。
- en: You can preview composable functions
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可以预览可组合函数
- en: Another feature of using composable functions is that you can preview them within
    Android Studio without having to load the app onto a device. You can preview any
    composable function so long as it doesn’t have any arguments, and you can even
    use this technique to preview entire **compositions**—UIs made up of composables.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可组合函数的另一个功能是，您可以在Android Studio中预览它们，而无需将应用加载到设备上。只要可组合函数没有任何参数，您就可以预览任何可组合函数，并且甚至可以使用此技术来预览整个**组合**—由可组合项构成的用户界面。
- en: '**A composition is a UI made up of composables.**'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**组合是由可组合项构成的用户界面。**'
- en: 'You say you want to preview a composable function by annotating it with `**@Preview**`.
    The following code, for example, specifies a composable function named `PreviewMainActivity`
    that lets you preview two `Hello` composables arranged in a column:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`**@Preview**`对其进行注释，您可以预览可组合函数。例如，以下代码指定了一个名为`PreviewMainActivity`的可组合函数，允许您预览排列在列中的两个`Hello`可组合项：
- en: '![image](Images/f0769-02.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0769-02.png)'
- en: Add MainActivityPreview to MainActivity.kt
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在*MainActivity.kt*中添加MainActivityPreview
- en: 'To see how previews work, let’s add the `MainActivityPreview` composable function
    to *MainActivity.kt*. Update the file so that it includes the changes shown here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解预览的工作原理，请将`MainActivityPreview`可组合函数添加到*MainActivity.kt*中。更新文件，使其包含此处显示的更改：
- en: '![image](Images/f0769-03.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0769-03.png)'
- en: We’ll show you how to see the preview on the next page.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示如何在下一页上查看预览。
- en: Preview composables with the Design or Split option
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设计或拆分选项预览可组合项
- en: You can preview any composable functions marked with `@Preview` by selecting
    the Split or Design view of the activity file. Choosing Split lets you see the
    code and preview side by side, and choosing Design just displays the preview.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择活动文件的拆分或设计视图，您可以预览标有`@Preview`的任何可组合函数。选择拆分选项让您同时看到代码和预览，选择设计选项则仅显示预览。
- en: 'Here’s what `MainActivityPreview` looks like when we select the Split option:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择拆分选项时，`MainActivityPreview`的外观如下所示：
- en: '![image](Images/f0770-02.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0770-02.png)'
- en: If you make changes to the composable function you’re previewing, you need to
    refresh the preview before you can see what it looks like. Simply click on the
    Build Refresh button in the preview’s top menu and you should see the effect of
    your changes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更改正在预览的可组合函数，需要刷新预览才能看到其效果。只需单击预览顶部菜单中的“构建刷新”按钮，即可看到更改的效果。
- en: Now that you’ve learned how to preview composable functions, try the following
    exercise.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何预览可组合函数，请尝试以下练习。
- en: '**You can preview any composable function that has no arguments.**'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**您可以预览任何没有参数的可组合函数。**'
- en: Pool Puzzle
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池子难题
- en: '![image](Images/common01.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common01.png)'
- en: 'Your **job** is to take code snippets from the pool and place them into the
    blank lines in the code below. You may **not** use the same snippet more than
    once, and you won’t need to use all the snippets. Your **goal** is to create two
    composable functions: one named `TeamHello` that accepts a list of names and says
    hello to each person, and one named `HelloPreview` that previews `TeamHello` and
    arranges its text in a column.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您的**任务**是从池中提取代码片段，并将其放入下面代码中的空白行中。您不能多次使用同一个片段，也不需要使用所有片段。您的**目标**是创建两个可组合函数：一个名为
    `TeamHello`，接受一个姓名列表并向每个人打招呼；另一个名为 `HelloPreview`，预览 `TeamHello` 并将其文本排列在一列中。
- en: '![image](Images/f0771-01.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0771-01.png)'
- en: '[PRE2]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![image](Images/f0771-02.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0771-02.png)'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note: each thing from the pool can only be used once!**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：每个池子中的东西只能使用一次！**'
- en: Pool Puzzle Solution
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池子谜题解决方案
- en: '![image](Images/common01.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.png)'
- en: 'Your **job** is to take code snippets from the pool and place them into the
    blank lines in the code below. You may **not** use the same snippet more than
    once, and you won’t need to use all the snippets. Your **goal** is to create two
    composable functions: one named `TeamHello` that accepts a list of names and says
    hello to each person, and one named `HelloPreview` that previews `TeamHello` and
    arranges its text in a column.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您的**任务**是从池中提取代码片段，并将其放入下面代码中的空白行中。您不能多次使用同一个片段，也不需要使用所有片段。您的**目标**是创建两个可组合函数：一个名为
    `TeamHello`，接受一个姓名列表并向每个人打招呼；另一个名为 `HelloPreview`，预览 `TeamHello` 并将其文本排列在一列中。
- en: '![image](Images/f0772-01.png)![image](Images/f0772-02.png)![image](Images/f0772-03.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0772-01.png)![image](Images/f0772-02.png)![image](Images/f0772-03.png)'
- en: Let’s make the app convert temperatures
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始让应用程序转换温度
- en: '![image](Images/f0773-01.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0773-01.png)'
- en: So far, you’ve used Compose to display text, written some composable functions,
    and learned how to preview them. But that’s not the end of the story.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经使用 Compose 显示文本，编写了一些可组合函数，并学习了如何预览它们。但这还不是全部。
- en: For the rest of this chapter, we’re going to take you deeper into Compose by
    changing the app we’ve just built into one that converts temperatures from Celsius
    to Fahrenheit. Instead of saying hello, it will ask the user for a temperature
    in Celsius, and convert it when she clicks on a button.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分中，我们将通过将刚刚构建的应用程序改为一个将温度从摄氏度转换为华氏度的应用程序，来深入了解 Compose。它不再只是打招呼，而是在用户在按钮上点击时，询问用户摄氏度温度并进行转换。
- en: 'Here’s what the app will look like; as you can see, it includes an image, a
    text field that lets you enter data, a button, and some text:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的外观；如您所见，它包括一个图像、一个允许您输入数据的文本字段、一个按钮和一些文本：
- en: '![image](Images/f0773-02.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0773-02.png)'
- en: What are you waiting for? Let’s get composing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您还在等什么？让我们开始组合吧。
- en: Add a MainActivityContent composable function
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个 MainActivityContent 可组合函数
- en: We’ll begin by adding a new composable function to *MainActivity.kt* named `MainActivityContent`
    that we’ll use for the activity’s main content. We’ll add all the composables
    needed for `MainActivity`’s UI to this function, and call it from `setContent()`
    and `PreviewMainActivity`. This approach means that the activity’s composition
    will be displayed both when we run the app, and in the preview.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先向 *MainActivity.kt* 添加一个名为 `MainActivityContent` 的新可组合函数，该函数将用作活动的主要内容。我们将添加所有
    `MainActivity` UI 所需的可组合函数到这个函数中，并从 `setContent()` 和 `PreviewMainActivity` 中调用它。这种方法意味着当我们运行应用程序时，将显示活动的组合，同时也会在预览中显示。
- en: We’ll also remove the `Hello` composable function from the code as this is no
    longer needed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将从代码中删除 `Hello` 可组合函数，因为这不再需要。
- en: 'Here’s the updated code for *MainActivity.kt*; update the file to include these
    changes (in bold):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的 *MainActivity.kt* 代码；请更新文件以包含这些更改（用**粗体**标出）：
- en: '![image](Images/f0774-02.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0774-02.png)'
- en: Display the header image…
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示标题图像…
- en: The first component we’ll add to `MainActivityContent` is an image that appears
    at the top of the screen.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先向 `MainActivityContent` 添加的组件是出现在屏幕顶部的图像。
- en: First, make sure that your project includes the folder *app/src/main/res/drawable*
    (you’ll need to create it if it’s not there). Then download the file *sunrise.webp*
    from *tinyurl.com/hfad3*, and add it to the *drawable* folder.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保您的项目包含文件夹 *app/src/main/res/drawable*（如果不存在，您需要创建它）。然后从 *tinyurl.com/hfad3*
    下载 *sunrise.webp* 文件，并将其添加到 *drawable* 文件夹中。
- en: '![image](Images/f0775-02.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0775-02.png)'
- en: …with an Image composable
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: …与一个 Image 可组合
- en: 'You display an image in Compose using an `**Image**` composable. The basic
    code looks like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`**Image**`组合在 Compose 中显示图像。基本代码如下：
- en: '![image](Images/f0775-03.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0775-03.png)'
- en: 'The `Image` composable requires two arguments: `painter` and `contentDescription`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image`组合需要两个参数：`painter`和`contentDescription`。'
- en: The `painter` argument specifies the image that should be displayed. Here, it
    uses `painterResource(R.drawable.sunrise)` to display the *sunrise.webp* drawable
    resource.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter`参数指定应该显示的图像。这里，它使用`painterResource(R.drawable.sunrise)`来显示*sunrise.webp*可绘制资源。'
- en: The `contentDescription` argument is a description of the image that’s used
    for accessibility.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentDescription`参数是用于辅助功能的图像描述。'
- en: 'There are many other optional arguments you can use to control the image appearance,
    and how it’s displayed. The following code, for example, sets the image height
    to 180dp, makes it fill the available width, and scales the image:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用许多其他可选参数来控制图像的外观和显示方式。例如，以下代码将图像高度设置为180dp，使其填充可用宽度，并缩放图像：
- en: '![image](Images/f0775-04.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0775-04.png)'
- en: Now that you’ve seen how to add an image with Compose, let’s add one to `MainActivity`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到如何使用 Compose 添加图像，让我们在`MainActivity`中添加一个。
- en: Add an Image to MainActivity.kt
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 MainActivity.kt 中添加一个图像
- en: '![image](Images/f0776-01.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0776-01.png)'
- en: We’re going to add an image to `MainActivity` by defining a new composable function
    (named `Header`) to *MainActivity.kt* that creates one. We’ll run this from the
    `MainActivityContent` composable function so that the image is added to the UI
    and the preview.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在*MainActivity.kt*中定义一个新的组合函数（名为`Header`）来向`MainActivity`添加一个图像。我们将从`MainActivityContent`组合函数中运行这个函数，以便将图像添加到
    UI 和预览中。
- en: 'Here’s the updated code for *MainActivity.kt*; update this file to include
    the changes below (in bold):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*MainActivity.kt*的更新代码；更新这个文件以包含下面的更改（用粗体标出）：
- en: '![image](Images/f0776-02.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0776-02.png)'
- en: That’s everything we need to display an image in the composition, so let’s move
    on to the next component.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要在组合中显示图像的所有内容，让我们继续下一个组件。
- en: Let’s display the temperature text
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们显示温度文本
- en: '![image](Images/f0777-01.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0777-01.png)'
- en: The next thing we’ll include is a composable function (named `TemperatureText`)
    that converts a Celsius temperature to Fahrenheit, and displays the result. We’ll
    call this function from `MainActivityContent` so that it’s included in both the
    UI and the preview.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将包括一个组合函数（名为`TemperatureText`），它将摄氏温度转换为华氏温度，并显示结果。我们将从`MainActivityContent`中调用这个函数，以便它包含在
    UI 和预览中。
- en: 'You’re already familiar with the code to do this, so update *MainActivity.kt*
    to include the changes below (in bold):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经熟悉如何做到这一点了，所以更新*MainActivity.kt*以包含下面的更改（用粗体标出）：
- en: '![image](Images/f0777-02.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0777-02.png)'
- en: Let’s take the app for a test drive.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下这个应用程序。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/car.png) 测试驾驶'
- en: When we run (or preview) the app, it displays an `Image` and `Text` in a column.
    The `Text` correctly shows the value of 0° Celsius in Fahrenheit.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行（或预览）应用程序时，它会在列中显示一个`Image`和`Text`。`Text`正确显示了0°摄氏度对应的华氏度值。
- en: Now that we’ve made sure the `TemperatureText` function works with a hardcoded
    temperature, let’s update it to a new temperature when the user clicks a button.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确保`TemperatureText`函数可以使用一个硬编码的温度，让我们在用户点击按钮时将其更新为一个新的温度。
- en: '![image](Images/f0777-03.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0777-03.png)'
- en: Use a Button composable to add a button
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Button 组合添加一个按钮
- en: 'You add a button in Compose using a `**Button**` composable. `Button` code
    looks like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`**Button**`组合添加一个按钮到 Compose。`Button`的代码如下：
- en: '![image](Images/f0778-02.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0778-02.png)'
- en: 'When you use a `Button` composable, you need to specify two things: its click
    behavior, and what should be displayed on the button.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`Button`组合时，需要指定两件事：其点击行为和按钮上应该显示什么。
- en: You specify its click behavior using the `Button`’s `onClick` argument. This
    accepts a lambda that runs each time the user clicks the button.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Button`的`onClick`参数来指定其点击行为。这个参数接受一个 lambda，每次用户点击按钮时都会运行。
- en: You say what should be displayed on the `Button` using a separate lambda that
    includes a composable. When the code runs, it adds the composable to the `Button`.
    The above code, for example, passes the `Button` a `Text` composable, so it creates
    a button with text on it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个单独的 lambda 来指定`Button`上应该显示什么。当代码运行时，它会将组合添加到`Button`中。例如，上面的代码将一个`Text`组合传递给`Button`，因此它创建了一个带有文本的按钮。
- en: Let’s write a ConvertButton composable function
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们编写一个ConvertButton组合函数
- en: We’re going to add a `Button` composable to the Temperature Converter app that,
    when clicked, changes the temperature that `TemperatureText` converts to Fahrenheit.
    To do this, we’ll write a new composable function (named `ConvertButton`) that
    displays a `Button`. We’ll also specify that it accepts a lambda argument that
    the function will use for the `Button`’s click behavior.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在温度转换应用程序中添加一个`Button`组合，当点击时，将更改`TemperatureText`转换为华氏度的温度。为此，我们将编写一个新的组合函数（名为`ConvertButton`），用于显示一个`Button`。我们还会指定它接受一个lambda参数，该函数将用于`Button`的点击行为。
- en: 'Here’s what the code for the `ConvertButton` composable function looks like;
    we’ll add it to M*ainActivity.kt* a few pages ahead:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ConvertButton`组合函数的代码，我们将在稍后的几页中将其添加到*M*ainActivity.kt*：
- en: '![image](Images/f0778-03.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0778-03.png)'
- en: Now that we’ve written the `ConvertButton` function, let’s add it to `MainActivityContent`
    so that the `Button` composable gets added to the UI.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了`ConvertButton`函数，让我们将其添加到`MainActivityContent`中，以便将`Button`组合添加到UI中。
- en: We need to pass a lambda to ConvertButton
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们需要传递一个lambda给ConvertButton
- en: '![image](Images/f0779-01.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0779-01.png)'
- en: 'To run `ConvertButton` from `MainActivityContent`, we need to pass it a lambda
    that specifies what should happen when it’s clicked. The code needs to look like
    this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`MainActivityContent`中运行`ConvertButton`，我们需要传递一个lambda，指定点击时应该发生什么。代码应该如下所示：
- en: '[PRE3]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When `ConvertButton` is clicked, we want it to update the text displayed by
    `TemperatureText`. If `TemperatureText` was a *view*, we could update its text
    using code like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`ConvertButton`时，我们希望它更新`TemperatureText`显示的文本。如果`TemperatureText`是*视图*，我们可以使用如下代码更新其文本：
- en: '[PRE4]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this approach works with views, however, it doesn’t work for *composables*.
    With composables, you need a different approach.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此方法适用于视图，但对于*组合*则不适用。对于组合，您需要采用不同的方法。
- en: '![image](Images/f0779-02.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0779-02.png)'
- en: '**Composables and views work differently.**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**组合和视图的工作方式不同。**'
- en: While views and composables let you display similar looking components (such
    as text and buttons), they do this in different ways. A composable isn’t a type
    of `View`, and a `View` isn’t a type of composable, so to interact with composables,
    you need to do things a little differently.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然视图和组合允许您显示类似的组件（例如文本和按钮），但它们的实现方式不同。组合不是`View`的一种类型，而`View`也不是组合的一种类型，因此要与组合交互，您需要以稍有不同的方式进行操作。
- en: To see how this works, let’s go through what happens when the UI is composed
    during composition.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这是如何工作的，请让我们在合成期间逐步了解UI的组成过程。
- en: We need to change the value of TemperatureText’s argument
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们需要更改`TemperatureText`参数的值
- en: As you’ve just seen, composables are recomposed when the values they depend
    on get updated. This means that if we want `TemperatureText` to display different
    text when the user clicks on `ConvertButton`’s button, the lambda we pass to `ConvertButton`
    needs to update the value of `TemperatureText`’s argument.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您刚刚看到的那样，当它们依赖的值更新时，组合会重新组合。这意味着，如果我们希望`TemperatureText`在用户点击`ConvertButton`按钮时显示不同的文本，我们传递给`ConvertButton`的lambda需要更新`TemperatureText`参数的值。
- en: To do this, we’ll add a new `celsius` variable to `MainActivityContent`, and
    pass its value to `TemperatureText`. When the user clicks on the `ConvertButton`
    composable, we’ll get it to update the value of `celsius` so that `TemperatureText`
    is recomposed.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将在`MainActivityContent`中添加一个新的`celsius`变量，并将其值传递给`TemperatureText`。当用户点击`ConvertButton`组合时，我们将其更新为`celsius`的值，以便重新组合`TemperatureText`。
- en: '**A composable is recomposed when any of its inputs change their value.**'
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**当其任何输入值发生更改时，组合将重新组合。**'
- en: Use remember to store celsius in memory
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`remember`将`celsius`存储在内存中
- en: 'We’ll define the `celsius` variable by adding the following code to `MainActivityContent`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将以下代码添加到`MainActivityContent`来定义`celsius`变量：
- en: '![image](Images/f0781-02.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0781-02.png)'
- en: This creates an object whose type is `**MutableState**`, sets its value to `0`,
    and stores it in memory. You can think of `celsius` as working a bit like a live
    data object. Each time it gets set to a new value, any composables that use it
    are notified, and recomposed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个类型为`**MutableState**`的对象，将其值设置为`0`，并将其存储在内存中。您可以将`celsius`看作是类似实时数据对象的工作方式。每次设置为新值时，使用它的任何组合都会收到通知并重新组合。
- en: The object is stored in memory using `**remember**`. `remember` stores an object
    when the composable that calls it—in this case `MainActivityContent`—is first
    composed, and forgets it when the composable is removed from the UI. This can
    happen when the user rotates the device, and the activity—including its UI—is
    destroyed and recreated.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`**remember**`将对象存储在内存中。`remember`在首次组合调用它的组合内容（在本例中为`MainActivityContent`）时存储对象，并在从UI中移除组合内容时将其删除。这可能发生在用户旋转设备时，活动（包括其UI）被销毁和重新创建。
- en: 'Just like a `MutableLiveData` object, you set a `MutableState` object’s value
    by updating its `**value**` property. To set the value of `celsius` to 20 when
    the user clicks on the `ConvertButton` composable, for example, you’d use the
    following code:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`MutableLiveData`对象一样，您通过更新其`**value**`属性来设置`MutableState`对象的值。例如，要在用户点击`ConvertButton`组合时将`celsius`的值设置为20，您可以使用以下代码：
- en: '![image](Images/f0781-03.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0781-03.png)'
- en: '[PRE5]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In order for `TemperatureText` to respond to this value change, its argument
    needs to be set to `celsius.value` like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`TemperatureText`响应此值的更改，其参数需要设置为`celsius.value`，如下所示：
- en: '[PRE6]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each time `celsius.value` gets updated, `TemperatureText` is recomposed with
    the new value, which changes the text that’s displayed.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 每次更新`celsius.value`时，`TemperatureText`都会重新组合以新值，这会改变显示的文本。
- en: We’ll show you the full code over the next couple pages.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几页中展示完整的代码。
- en: The full code for MainActivity.kt
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MainActivity.kt的完整代码
- en: 'Here’s the complete code so far for *MainActivity.kt*; update the file to include
    the changes below (in bold):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，*MainActivity.kt* 的完整代码如下；请更新文件以包含以下更改（用粗体标记）：
- en: '![image](Images/f0782-02.png)![image](Images/f0783-02.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0782-02.png)![image](Images/f0783-02.png)'
- en: Let’s run through what happens when the code runs, and take the app for a test
    drive.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码运行时会发生什么，并且让应用程序试运行一下。
- en: What happens when the app runs
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序运行时会发生什么
- en: 'The following things happen when the app runs:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时会发生以下事情：
- en: '**MainActivity launches, and its onCreate() method runs.**'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MainActivity启动，并运行其onCreate()方法。**'
- en: It calls `setContent()`, which runs the `MainActivityContent` composable function.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它调用`setContent()`，运行`MainActivityContent`组合函数。
- en: '![image](Images/f0784-02.png)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0784-02.png)'
- en: '**MainActivityContent creates a MutableState<Int> variable named celsius, sets
    its value to 0, and stores it in memory.**'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MainActivityContent创建一个名为celsius的MutableState<Int>变量，将其值设为0，并将其存储在内存中。**'
- en: '![image](Images/f0784-03.png)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0784-03.png)'
- en: '**MainActivityContent runs the Header, ConvertButton, and TemperatureText composable
    functions.**'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MainActivityContent运行Header、ConvertButton和TemperatureText组合函数。**'
- en: It passes the value of `celsius` to the `TemperatureText` composable function,
    which converts it to Fahrenheit.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将`celsius`的值传递给`TemperatureText`组合函数，该函数将其转换为华氏度。
- en: '![image](Images/f0784-04.png)'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0784-04.png)'
- en: '**The Header, ConvertButton, and TemperatureText composable functions add an
    image, a button, and some text to the UI.**'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Header、ConvertButton和TemperatureText组合函数向UI添加了一个图像、一个按钮和一些文本。**'
- en: '![image](Images/f0785-02.png)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0785-02.png)'
- en: '**The user clicks on the ConvertButton composable in the UI.**'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户在UI中点击ConvertButton组合。**'
- en: This sets the value of `celsius` to 20.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将`celsius`的值设置为20。
- en: '![image](Images/f0785-03.png)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0785-03.png)'
- en: '**TemperatureText is recomposed.**'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TemperatureText重新组合。**'
- en: It converts the new value of `celsius` to Fahrenheit, and displays the result.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将`celsius`的新值转换为华氏度，并显示结果。
- en: '![image](Images/f0785-04.png)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0785-04.png)'
- en: Let’s take the app for a test drive.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来试运行应用程序。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) 试驾'
- en: When we run the app, `MainActivity` is displayed. It includes an image, a button,
    and some text that gives the value of 0° Celsius in Fahrenheit.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，会显示`MainActivity`。它包括一个图像、一个按钮和一些文本，显示了0°摄氏度对应的华氏度值。
- en: When we click on the Convert button, the text is updated to give the value of
    20° Celsius in Fahrenheit instead.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击Convert按钮时，文本会更新，显示20°摄氏度对应的华氏度值。
- en: '![image](Images/f0786-02.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0786-02.png)'
- en: The next thing we need to do is let the user enter her own temperatures. We’ll
    do this after you’ve tried the exercise on the next page.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是让用户输入自己的温度。我们将在下一页的练习后进行此操作。
- en: Compose Magnets
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合磁铁
- en: '![image](Images/common02.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common02.png)'
- en: Someone used fridge magnets to create a new composable function named `ChangeHello`.
    The function displays some text that says “Hello friend”, and a button that, when
    clicked, changes the text to “Hello everyone”.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 有人使用冰箱磁铁创建了一个名为`ChangeHello`的新组合函数。该函数显示一些文本，上面写着“Hello friend”，还有一个按钮，当点击时，将文本更改为“Hello
    everyone”。
- en: Unfortunately a stray cat ran into the kitchen and dislodged some of the magnets.
    Can you piece them back together again?
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，一只流浪猫跑进了厨房，弄掉了一些磁铁。你能把它们重新组合起来吗？
- en: '![image](Images/f0787-01.png)![image](Images/f0787-02.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0787-01.png)![image](Images/f0787-02.png)'
- en: Compose Magnets Solution
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合磁铁解决方案
- en: '![image](Images/common02.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common02.png)'
- en: Someone used fridge magnets to create a new composable function named `ChangeHello`.
    The function displays some text that says “Hello friend”, and a button that, when
    clicked, changes the text to “Hello everyone”.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 有人使用冰箱磁铁创建了一个名为`ChangeHello`的新组合函数。该函数显示一些文本，上面写着“Hello friend”，还有一个按钮，当点击时，将文本更改为“Hello
    everyone”。
- en: Unfortunately a stray cat ran into the kitchen and dislodged some of the magnets.
    Can you piece them back together again?
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，一只流浪猫跑进了厨房，弄掉了一些磁铁。你能把它们重新组合起来吗？
- en: '![image](Images/f0788-01.png)![image](Images/f0788-02.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0788-01.png)![image](Images/f0788-02.png)'
- en: Let the user enter a temperature
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让用户输入温度
- en: '![image](Images/f0789-01.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0789-01.png)'
- en: So far, you’ve built a version of the Temperature Converter app that converts
    a hardcoded temperature from Celsius to Fahrenheit. When the user clicks on a
    button, it changes the temperature that’s being converted to another value.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经构建了一个将硬编码的摄氏温度转换为华氏温度的版本的温度转换器应用程序。当用户点击按钮时，它会更改正在转换的温度为另一个值。
- en: 'What we *really* want to do is let the user convert her own temperatures, so
    the next thing we’ll do is add a text field to the UI. The user will enter a Celsius
    temperature into the text field, and when she clicks the button, the app will
    convert it to Fahrenheit and display the result:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们*真正*想做的是让用户转换自己的温度，所以下一步是向UI添加一个文本字段。用户将把摄氏温度输入到文本字段中，当她点击按钮时，应用程序将其转换为华氏度并显示结果：
- en: We’ll use a TextField composable
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将使用一个`TextField`组合。
- en: We’ll add a text field to the UI using a `TextField` composable. You can think
    of this type of composable as the Compose equivalent of an `EditText`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`TextField`组合将文本字段添加到UI中。您可以将这种组合类型视为`EditText`的Compose等效物。
- en: 'You add a `TextField` using code like this:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下代码添加一个`TextField`：
- en: '![image](Images/f0789-02.png)![image](Images/f0789-03.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0789-02.png)![image](Images/f0789-03.png)'
- en: The `value` attribute is used for the `TextField`’s value, and in this example,
    it uses a `MutableState` variable named `text` to store this value in memory.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`属性用于`TextField`的值，在本例中，它使用一个名为`text`的`MutableState`变量将此值存储在内存中。'
- en: The `onValueChange` attribute uses a lambda to update the value of the `text`
    variable when the user enters text.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`onValueChange`属性使用一个lambda表达式来在用户输入文本时更新`text`变量的值。'
- en: The `label` attribute provides the `TextField`’s label. It’s displayed in the
    text area when the `TextField` is empty, and moves out of the way when the user
    enters text.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`label`属性提供了`TextField`的标签。当`TextField`为空时，它显示在文本区域中，并在用户输入文本时移开。'
- en: Now that you’ve seen what text field code looks like, let’s add one to the app.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到文本字段代码的样子了，让我们将其添加到应用程序中。
- en: '![image](Images/f0789-04.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0789-04.png)'
- en: Add a TextField to a composable function
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向组合函数添加一个TextField
- en: We’ll add a `TextField` to the UI by creating a new `EnterTemperature` composable
    function, which we’ll call from `MainActivityContent`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个名为`EnterTemperature`的新组合函数将`TextField`添加到UI中，并从`MainActivityContent`中调用它。
- en: 'Here’s what the code for the `EnterTemperature` function looks like:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`EnterTemperature`函数的代码：
- en: '![image](Images/f0790-02.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0790-02.png)'
- en: 'As you can see, the function accepts two arguments: a `String` for the `TextField`’s
    value, and a lambda that specifies what should happen when the user enters a new
    value.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该函数接受两个参数：用于`TextField`值的`String`和指定用户输入新值时应发生的操作的lambda表达式。
- en: Call the function in MainActivityContent
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在MainActivityContent中调用函数
- en: '`MainActivityContent` needs to pass both arguments to `EnterTemperature` when
    it runs the function, so we’ll use a new `MutableState` object named `newCelsius`
    for its value, and update it when the user enters text.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivityContent`在运行函数时需要向`EnterTemperature`传递这两个参数，因此我们将使用一个名为`newCelsius`的新`MutableState`对象来存储其值，并在用户输入文本时更新它。'
- en: We’ll also change the lambda that’s passed to `ConvertButton` so that it updates
    the value of `celsius` when the user enters a valid `Int`; this will recompose
    `TemperatureText` when the user enters a new temperature.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将更改传递给`ConvertButton`的lambda，以便在用户输入有效的`Int`时更新`celsius`的值；这将在用户输入新温度时重新组合`TemperatureText`。
- en: 'Here’s what the code looks like; we’ll update *MainActivity.kt* on the next
    page:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码的样子；我们将在下一页更新*MainActivity.kt*：
- en: '![image](Images/f0790-03.png)![image](Images/f0790-04.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0790-03.png)![image](Images/f0790-04.png)'
- en: The full code for MainActivity.kt
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MainActivity.kt 的完整代码
- en: 'Here’s the code for *MainActivity.kt*; update the file to include the changes
    below (in bold):'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*MainActivity.kt*的代码；更新文件以包含以下更改（用粗体标记）：
- en: '![image](Images/f0791-02.png)![image](Images/f0792-02.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0791-02.png)![image](Images/f0792-02.png)'
- en: Let’s see what happens when the code runs.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码运行时会发生什么。
- en: What happens when the app runs
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序运行时会发生什么
- en: 'The following things happen when the app runs:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时，发生了以下几件事情：
- en: '**When MainActivityContent runs, it creates a MutableState<Int> variable named
    celsius, and a MutableState<String> named newCelsius.**'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当 MainActivityContent 运行时，它创建了一个名为 celsius 的 MutableState<Int> 变量和一个名为 newCelsius
    的 MutableState<String> 变量。**'
- en: It sets `celsius` to `0` and `newCelsius` to `""` and stores both in memory.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将`celsius`设为`0`，将`newCelsius`设为`""`，并将两者存储在内存中。
- en: '![image](Images/f0793-02.png)'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0793-02.png)'
- en: '**MainActivityContent runs the EnterTemperature, Header, ConvertButton, and
    TemperatureText composable functions.**'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MainActivityContent 运行 EnterTemperature、Header、ConvertButton 和 TemperatureText
    可组合函数。**'
- en: It passes the value of `celsius` to the `TemperatureText` composable function,
    which converts it to Fahrenheit.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将`celsius`的值传递给`TemperatureText`可组合函数，后者将其转换为华氏度。
- en: '![image](Images/f0793-03.png)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0793-03.png)'
- en: '**The Header, EnterTemperature, ConvertButton, and TemperatureText composable
    functions add an image, a text field, a button, and some text to the UI.**'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Header、EnterTemperature、ConvertButton 和 TemperatureText 可组合函数向 UI 添加了图像、文本字段、按钮和一些文本。**'
- en: '![image](Images/f0793-04.png)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0793-04.png)'
- en: '**The user enters a new value into EnterTemperature (in this example “25”).**'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户在 EnterTemperature 中输入一个新值（在此示例中为“25”）。**'
- en: '`EnterTemperature` sets `newCelsius` to this value.'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`EnterTemperature` 将 `newCelsius` 设置为此值。'
- en: '![image](Images/f0794-02.png)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0794-02.png)'
- en: '**The user clicks on the ConvertButton composable.**'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户点击 ConvertButton 可组合函数。**'
- en: It converts the value of `newCelsius` to an `Int`, and assigns it to `celsius.value`.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将 `newCelsius` 的值转换为 `Int`，并将其赋给 `celsius.value`。
- en: '![image](Images/f0794-03.png)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0794-03.png)'
- en: '**TemperatureText is recomposed.**'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TemperatureText 被重新组合。**'
- en: It converts the new value of `celsius` to Fahrenheit, and displays the result.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将 `celsius` 的新值转换为华氏度，并显示结果。
- en: '![image](Images/f0794-04.png)'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0794-04.png)'
- en: Let’s take the app for a test drive.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下这个应用程序。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) Test Drive'
- en: When we run the app, `MainActivity` includes a text field.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，`MainActivity`包括一个文本字段。
- en: When we enter a temperature and click on the Convert button, the app converts
    the temperature to Fahrenheit and updates the temperature text.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入温度并点击转换按钮时，应用程序会将温度转换为华氏度并更新温度文本。
- en: '![image](Images/f0795-02.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0795-02.png)'
- en: The app now works in exactly the way we want. All that’s left is for us to make
    some extra tweaks to its appearance.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序的功能完全符合我们的预期。现在我们只需要对其外观进行一些额外的调整。
- en: We’ll tweak the app’s appearance
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将调整应用程序的外观
- en: '![image](Images/f0796-01.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0796-01.png)'
- en: We’re going to change the app so that there’s a gap between the edge of the
    screen and the UI components, and the button is centered horizontally. We’ll also
    style the composables so that they use the default Material theme.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改应用程序，以便在屏幕边缘和 UI 组件之间增加间隔，并使按钮水平居中。我们还将样式化可组合函数，以使用默认的 Material 主题。
- en: 'Here’s what the new version of the app will look like:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序新版本的外观：
- en: '![image](Images/f0796-02.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0796-02.png)'
- en: We’ll make these tweaks over the next few pages. We’ll start by adding some
    space around the edge of the UI.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几页中进行这些调整。首先我们将在 UI 的边缘添加一些空间。
- en: Add padding to the Column composable
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Column 可组合函数添加填充
- en: 'We want to add a gap between the edge of the screen and the app’s components
    so that it looks like this:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在屏幕边缘和应用程序组件之间添加一些间隔，使其看起来像这样：
- en: '![image](Images/f0797-02.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0797-02.png)'
- en: We’ll do this by adding some **padding** to the `Column` composable. Applying
    padding to composables has a similar effect to when you apply it to views; it
    adds extra space around the component’s edges.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过向`Column`组合件添加一些**padding**来实现这一点。向组合件应用填充效果类似于向视图应用填充效果；它会在组件的边缘周围添加额外的空间。
- en: 'You add padding to a composable using a `**Modifier**`. `Modifier`s let you
    decorate or add extra behavior to composables. To add padding of 16dp to a `Column`
    composable, for example, you’d use the code:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`**Modifier**`向组合件添加填充。`Modifier`允许您装饰或为组合件添加额外行为。例如，要向`Column`组合件添加16dp的填充，您可以使用以下代码：
- en: '[PRE7]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Modifier`s are extremely flexible. You may remember, for example, that when
    we wrote the `Header` composable function, we used a `Modifier` to set the `Image`
    height and width like so:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`Modifier`s 非常灵活。例如，当我们编写`Header`组合函数时，我们使用`Modifier`来设置`Image`的高度和宽度，如下所示：'
- en: '![image](Images/f0797-03.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0797-03.png)'
- en: '[PRE8]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We’ll add padding to the app’s `Column` composable a few pages ahead. Before
    we do that, let’s find out how to center the `Button`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在几页之后向应用的`Column`组合件添加填充。在这之前，让我们找出如何将`Button`居中。
- en: You can center composables in Columns or Rows
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可以在列或行中将组合件居中显示
- en: If you want to center one or more composables, such as a `Button` or `Text`,
    you can do so using `Column`s and `Row`s. There are a couple approaches you can
    take, depending on what you want to do.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要居中一个或多个组合件，例如`Button`或`Text`，可以使用`Column`和`Row`。根据您的需求，有几种方法可以采用。
- en: Center all of a Column’s content
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 居中列的所有内容
- en: If you want to align the composables in a `Column` so they’re all centered horizontally,
    you can do so by making the `Column` as wide as possible, then setting its `**horizontalAlignment**`
    argument.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要将`Column`中的组合件对齐，使它们水平居中，可以通过将`Column`设置为尽可能宽，然后设置其`**horizontalAlignment**`参数来实现。
- en: 'To horizontally center all the composables in the Temperature Converter app,
    for example, we’d add the code (in bold) to the `Column` composable:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使Temperature Converter应用程序中所有组合件水平居中，我们将在`Column`组合件中添加以下代码（加粗部分）：
- en: '![image](Images/f0798-02.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0798-02.png)'
- en: 'Doing so makes the app look like this:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以使应用程序看起来像这样：
- en: '![image](Images/f0798-04.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0798-04.png)'
- en: But what if you want to center just one of the composables?
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果您只想居中一个组合件怎么办？
- en: Center the content of a single Row
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将单个`Row`的内容居中显示
- en: If you want to horizontally center a single composable, you can do so by placing
    it in a `Row`. Simply modify the `Row` to make it as wide as possible, then set
    its `**horizontalArrangement**` attribute.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要水平居中单个组合件，可以将其放置在`Row`中。只需修改`Row`以使其尽可能宽，然后设置其`**horizontalArrangement**`属性。
- en: 'To horizontally center the `ConvertButton` composable, for example, we could
    put it in a `Row`, and center it like this:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要水平居中`ConvertButton`组合件，我们可以将其放置在`Row`中，并像这样居中：
- en: '![image](Images/f0799-02.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0799-02.png)'
- en: 'Doing so centers the button like this:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以将按钮居中显示：
- en: '![image](Images/f0799-03.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0799-03.png)'
- en: 'That’s how you use `Column`s and `Row`s to align and arrange composables. Before
    we update *MainActivity.kt*, there’s just one final thing we need to discuss:
    how to apply themes to composables.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您如何使用`Column`和`Row`来对齐和排列组合件。在我们更新*MainActivity.kt*之前，还有一件事情需要讨论：如何将主题应用到组合件。
- en: 'Applying themes: revisited'
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用主题：重新审视
- en: As you learned in [Chapter 8](ch08.xhtml#navigation_uicolon_going_places), themes
    let you give your app a common look and feel. You can use one to remove the default
    app bar, for example, or change the app’s colors.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[第8章](ch08.xhtml#navigation_uicolon_going_places)中学到的，主题可以让您的应用程序具有统一的外观和感觉。例如，您可以使用主题来删除默认的应用栏或更改应用程序的颜色。
- en: You already know that you can apply a theme by defining one in the app’s style
    resource files, which you then refer to in *AndroidManifest.xml*. Doing so applies
    the theme to the app, including any views. What this *doesn’t* do, however, is
    apply the theme to any *composables*. To style these, you need to use a different
    approach.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经知道可以通过在应用程序的样式资源文件中定义主题来应用主题，然后在*AndroidManifest.xml*中引用它。这样做会将主题应用于应用程序，包括任何视图。但是，这并不会将主题应用于任何组合件。要对这些组合件进行样式设置，您需要采用不同的方法。
- en: How to apply a theme to composables
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将主题应用到组合件
- en: 'If you want to apply a theme to a composition, you need to do so using Kotlin
    code. The following code, for example, uses `MaterialTheme` and `Surface` composables
    to apply a theme to `MainActivityContent`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将主题应用于组合项，需要使用Kotlin代码进行操作。例如，以下代码使用`MaterialTheme`和`Surface`组件将主题应用于`MainActivityContent`：
- en: '![image](Images/f0800-02.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0800-02.png)'
- en: '`**MaterialTheme**` is used to apply the default Material theme to composables.
    In this case, it applies it to `MainActivityContent` and the composables this
    function calls, such as `TemperatureText` and `ConvertButton`.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`**MaterialTheme**`用于将默认的Material主题应用于组合项。在这种情况下，它应用于`MainActivityContent`以及此函数调用的其他组合项，如`TemperatureText`和`ConvertButton`。'
- en: The above code also includes a `**Surface**` composable, which is used to style
    surfaces. It’s used to apply things like 3D effects and shadows.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码还包括一个`**Surface**`组合项，用于设置表面的样式。它用于应用3D效果和阴影等内容。
- en: If you want to override the default `MaterialTheme`, you can do so be defining
    a new theme in Kotlin code. Android Studio usually adds extra theme code for you
    when you choose the option to create a new project with a Compose activity, so
    let’s take a look at this code and see what it does.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要覆盖默认的`MaterialTheme`，可以通过在Kotlin代码中定义新主题来实现。当您选择使用Compose活动创建新项目时，Android
    Studio通常会为您添加额外的主题代码，因此让我们来看看这段代码并了解它的作用。
- en: Android Studio includes extra theme code
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio包含额外的主题代码
- en: When we created the Temperature Converter project, Android Studio added extra
    Kotlin files to define a new theme. These files are named *Color.kt*, *Shape.kt*,
    *Theme.kt,* and *Type.kt*, and they’re located in the *app/src/main/java* folder
    in the *com.hfad.temperatureconverter.ui.theme* package.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 创建**温度转换器**项目时，Android Studio添加了额外的Kotlin文件来定义新主题。这些文件分别为*Color.kt*、*Shape.kt*、*Theme.kt*和*Type.kt*，位于*app/src/main/java*文件夹中的*com.hfad.temperatureconverter.ui.theme*包内。
- en: 'The main file is *Theme.kt*, as it defines a new theme for the app. The theme’s
    name is `TemperatureConverterTheme`, and its code looks like this:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 主要文件是*Theme.kt*，它定义了应用程序的新主题。该主题名为`TemperatureConverterTheme`，其代码如下：
- en: '![image](Images/f0801-02.png)![image](Images/f0801-03.png)![image](Images/f0802-02.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0801-02.png)![image](Images/f0801-03.png)![image](Images/f0802-02.png)'
- en: As you can see, the theme overrides the `MaterialTheme` colors, typography,
    and shapes. If you want to tweak any of these, you can do so by updating the files
    in the *.ui.theme* package.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，主题覆盖了`MaterialTheme`的颜色、字体和形状。如果要微调其中任何内容，可以更新*.ui.theme*包中的文件。
- en: How to apply the theme
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何应用主题
- en: 'Once you’ve defined a theme, you can apply it to the app’s composables. To
    apply `TemperatureConverterTheme` to `MainActivityContent`, for example, you’d
    use the following code:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了主题，就可以将其应用于应用程序的组合项。例如，要将`TemperatureConverterTheme`应用于`MainActivityContent`，可以使用以下代码：
- en: '![image](Images/f0802-03.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0802-03.png)'
- en: The full code for MainActivity.kt
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MainActivity.kt的完整代码
- en: You now know everything that you need to tweak the UI’s appearance and make
    it look exactly how we want.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经掌握了调整UI外观所需的所有内容，并使其看起来正如我们所希望的那样。
- en: 'Here’s the complete code for *MainActivity.kt*; update the file to include
    the changes below (in bold):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是*MainActivity.kt*的完整代码；请更新文件以包括以下更改（用粗体标出）：
- en: '![image](Images/f0803-02.png)![image](Images/f0804-02.png)![image](Images/f0805-02.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0803-02.png)![image](Images/f0804-02.png)![image](Images/f0805-02.png)'
- en: Let’s take the app for a test drive.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下这款应用。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) 测试驾驶'
- en: When we run the app, `MainActivity` is displayed, and the UI looks exactly how
    we want it to. There’s a gap between the UI and the edge of the screen, the button
    is centered horizontally, and it uses the default Material theme.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，会显示`MainActivity`，用户界面看起来正是我们想要的样子。界面与屏幕边缘之间有间隙，按钮水平居中，并使用默认的Material主题。
- en: '![image](Images/f0806-02.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0806-02.png)'
- en: Congratulations! You’ve now learned how to build a UI using Jetpack Compose
    instead of views.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已经学会了如何使用Jetpack Compose构建用户界面，而不是使用视图。
- en: In the next chapter, you’ll take this knowledge even further by learning how
    to integrate composables into an existing `View`-based UI.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将进一步学习如何将组合项集成到现有的基于`View`的用户界面中。
- en: BE Compose
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BE Compose
- en: '![image](Images/common04.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**The composable function below includes a TextField, a Button, and a Text.
    When the user enters a name in the TextField and clicks the Button, the new name
    should be displayed in the Text. Your job is to play like you’re Compose, and
    say if the fiunction works as intended. If not, how would you change it?**'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '**下面的可组合函数包括一个TextField、一个Button和一个Text。当用户在TextField中输入一个名称并点击按钮时，新名称应该显示在Text中。你的任务是像使用Compose一样，看看这个函数是否按预期工作。如果不是，你会如何更改它？**'
- en: '[PRE9]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: BE Compose Solution
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BE 组合解决方案
- en: '![image](Images/common04.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**The composable function below includes a TextField, a Button, and a Text.
    When the user enters a name in the TextField and clicks the Button, the new name
    should be displayed in the Text. Your job is to play like you’re Compose, and
    say if the function works as intended. If not, how would you change it?**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**下面的可组合函数包括一个TextField、一个Button和一个Text。当用户在TextField中输入一个名称并点击按钮时，新名称应该显示在Text中。你的任务是像使用Compose一样，看看这个函数是否按预期工作。如果不是，你会如何更改它？**'
- en: Note
  id: totrans-357
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Code changes are needed to make the function work as intended. We’ve added
    these to the code below.**'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**需要更改代码才能使函数按预期工作。我们已将这些更改添加到下面的代码中。**'
- en: '![image](Images/f0808-01.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0808-01.png)'
- en: Your Android Toolbox
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的安卓工具箱
- en: '![image](Images/tools.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/tools.png)'
- en: '**You’ve got [Chapter 18](#jetpack_composecolon_compose_yourself) under your
    belt and now you’ve added Jetpack Compose to your toolbox.**'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经掌握了[第18章](#jetpack_composecolon_compose_yourself)，现在你已经将Jetpack Compose添加到了你的工具箱中。**'
- en: '![image](Images/f0809-01.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0809-01.png)'
