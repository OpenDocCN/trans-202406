- en: Chapter 11\. Threat Defense and Intrusion Detection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。威胁防御与入侵检测
- en: In this chapter we will explore how you can implement threat defense for your
    Kubernetes cluster. We have covered the stages of your Kubernetes deployment (build,
    deploy, runtime) in earlier chapters. This chapter focuses on threat defense,
    which is security for the runtime stage. We will cover the following concepts
    to help you understand threat defense in a Kubernetes cluster and why you need
    it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何为您的 Kubernetes 集群实施威胁防御。我们已经在前几章中涵盖了 Kubernetes 部署的各个阶段（构建、部署、运行时）。本章重点讨论威胁防御，即运行时阶段的安全性。我们将涵盖以下概念，帮助您理解
    Kubernetes 集群中的威胁防御以及其重要性。
- en: Threat defense for a Kubernetes cluster, including why you need it and how it
    differs from traditional security
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 集群的威胁防御，包括为什么需要它以及它与传统安全的不同之处。
- en: Intrusion detection for Kubernetes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的入侵检测
- en: Advanced threat defense techniques
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级威胁防御技术。
- en: Let’s explore each of these in detail. We start with threat defense and why
    it is important.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨每一个阶段。我们从威胁防御及其重要性开始。
- en: Threat Defense for Kubernetes (Stages of an Attack)
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的威胁防御（攻击阶段）
- en: 'To understand threat defense, a great place to start is to review the cybersecurity
    kill chain, which breaks down an attack into several stages. This is then used
    to build a strategy to defend against the attack. The cyber kill chain has the
    following stages:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解威胁防御，一个很好的起点是审查网络安全杀伤链，它将攻击分解为几个阶段。然后用这些阶段来制定防御策略。网络安全杀伤链包括以下阶段：
- en: Reconnaissance
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 侦察
- en: Adversaries probe the target and gather information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对手探测目标并收集信息。
- en: Weaponization
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 武器化
- en: The adversary creates a method to attack, which could be a new vulnerability,
    a variant of an existing vulnerability, or a simple exploit of an insecure configuration.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对手创建攻击方法，可以是新的漏洞，现有漏洞的变体或不安全配置的简单利用。
- en: Delivery
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 交付
- en: The adversary creates a method to deliver the vulnerability or exploit to the
    target or a location that can be used to attack the target.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对手创建一种方法，将漏洞或利用交付给目标或可用于攻击目标的位置。
- en: Exploitation
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 利用
- en: The adversary implements methods to trigger the attack.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对手实施触发攻击的方法。
- en: Installation
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装
- en: The adversary installs the malware and typically software to create a backdoor
    to communicate with the malware.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对手安装恶意软件，通常包括创建与恶意软件通信的后门软件。
- en: Command and Control
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 命令与控制
- en: The adversary establishes a communication channel with the malicious software
    to control the software.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对手建立与恶意软件的通信渠道以控制软件。
- en: Actions on Objective
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 目标动作
- en: The adversary achieves the intended outcome of the attack (e.g., stealing data,
    encryption of data, etc.).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对手实现攻击的预期结果（例如窃取数据，加密数据等）。
- en: 'Several organizations have adapted this framework to incorporate real-world
    attacks and more use cases. Microsoft has adapted it for Kubernetes as described
    in its blog post [“blog"Secure Containerized Environments with Updated Threat
    Matrix for Kubernetes”](https://oreil.ly/gebGs). Let’s review the kill-chain stages
    (threat matrix) that are specific to Kubernetes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 几个组织已经适应了这一框架，以包含实际攻击和更多用例。Microsoft 在其博客文章 [“在 Kubernetes 上使用更新的威胁矩阵保护容器化环境”](https://oreil.ly/gebGs)
    中描述了对 Kubernetes 的适应。让我们审视适用于 Kubernetes 的杀伤链阶段（威胁矩阵）：
- en: Initial access
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 初始访问
- en: The adversary uses various exposed interfaces in your Kubernetes deployments
    (for example, Kubeflow) via stolen credentials, compromised images, or other application
    vulnerabilities.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对手利用您的 Kubernetes 部署中的各种公开接口（例如 Kubeflow），通过窃取的凭据、被入侵的镜像或其他应用程序漏洞。
- en: Execution
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 执行
- en: The adversary executes a malicious command or software in your cluster. There
    are several ways this can happen; some known techniques are creating a new container
    in your cluster, running an additional container in any pod as a sidecar, and
    using a known application vulnerability to execute malicious commands.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对手在您的集群中执行恶意命令或软件。这可以通过多种方式实现；一些已知的技术包括在集群中创建新容器，在任何 Pod 中作为 sidecar 运行额外容器，以及利用已知的应用程序漏洞执行恶意命令。
- en: Persistence
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持久性
- en: The adversary will try to persist the malicious software in the Kubernetes cluster
    so it can be accessed at a later time. This is typically achieved by creating
    a writage storage path on the host, leveraging Kubernetes scheduled jobs (known
    as cron jobs) to periodically run malicious software, or in some cases, compromising
    the Kubernetes admission controller so requests to the API server can be tampered
    with to carry out an attack. In this stage adversaries will also try to establish
    a backdoor communication channel to their control server so they can control the
    malicious software. This is known as a command-and-control server (C&C server).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对手将努力将恶意软件持久化在Kubernetes集群中，以便以后访问。通常通过在主机上创建可写存储路径、利用定期运行恶意软件的Kubernetes定时作业（也称为cron作业），或在某些情况下，破坏Kubernetes准入控制器，以便篡改API服务器的请求来发动攻击。在此阶段，对手还将尝试建立与其控制服务器的后门通信渠道，以便控制恶意软件。这被称为命令与控制服务器（C&C服务器）。
- en: Privilege escalation
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 特权升级
- en: The adversary gains privileged access by leveraging a resource in your cluster
    that has privileged access. For example, they might run malicious software in
    a container with privileged access by exploiting a vulnerability in the privileged
    container.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对手通过利用集群中具有特权访问权限的资源来获得特权访问。例如，他们可能通过利用特权容器中的漏洞来运行恶意软件，从而获得特权访问。
- en: Defense evasion
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 防御逃避
- en: The adversary works to keep the attack undetected by using techniques like clearing
    logs or deleting events, so detection systems using logs and events do not detect
    the presence of malicious activity. Another technique that is used is to exploit
    a vulnerability in only one pod of a Kubernetes deployment backed by many pods,
    and use that to further the attack.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对手通过清除日志或删除事件等技术来保持攻击不被检测，以便监测系统不会检测到恶意活动的存在。另一种使用的技术是利用一个由许多Pod支持的Kubernetes部署中仅一个Pod中的漏洞，并利用它进一步发动攻击。
- en: Credential access
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 凭据访问
- en: The adversary works to get access to credentials (Kubernetes secrets) in your
    cluster. In case you are using managed services, the cloud provider offers a token
    to access cloud resources, and this token is accessible to certain privileged
    pods and service accounts. The adversary will use impersonation or privilege escalation
    to gain access to the credentials and then use access to cloud resources to further
    the attack.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对手致力于获取集群中的凭据（Kubernetes secrets）。如果您正在使用托管服务，云提供商将提供一个访问云资源的令牌，并且此令牌对某些特权的
    Pod 和服务账号可访问。对手将利用冒充或特权升级来获取凭据访问权限，然后利用云资源访问进一步发动攻击。
- en: Discovery
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 探测
- en: The adversary will work to do a reconnaissance of the cluster network to understand
    what is running in your cluster. This can be achieved by using tools for network
    mapping like [Nmap](https://nmap.org) on Linux systems, or access to the Kubenetes
    dashboard. This stage is the precursor to an important stage of the attack where
    adversaries can move around in your cluster to find what they are seeking.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对手将尝试对集群网络进行侦察，以了解集群中正在运行的内容。这可以通过在 Linux 系统上使用像[Nmap](https://nmap.org)这样的网络映射工具，或者访问Kubernetes仪表板来实现。此阶段是攻击的重要前期阶段，对手可以在集群中移动以寻找他们所需的内容。
- en: Lateral movement
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 横向移动
- en: By the time the attack reaches this stage, the attack is fairly advanced, and
    the adversary has an established presence; they now will use the installed malicious
    software to access other pods and resources in the network. A couple of common
    techniques are to spoof IP addresses or domain names of other pods and impersonate
    other pods to get past segmentation rules inside the cluster. The adversaries
    also look for other applications running inside the cluster, as they now have
    access to them. During this stage the malicious software is communicating with
    the command-and-control server to get instructions to further the attack. In this
    stage adversaries rely on overloading well-known protocols like DNS or HTTP to
    send command-and-control requests as a part of these protocols, which allows them
    to bypass perimeter security–based controls as the traffic looks like a normal
    DNS or HTTP request.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击达到这个阶段时，攻击已经相当先进，对手已经建立了存在；他们现在将利用安装的恶意软件访问网络中的其他 Pod 和资源。一些常见的技术包括欺骗其他 Pod
    的 IP 地址或域名，并冒充其他 Pod 以绕过集群内部的分段规则。攻击者还会寻找集群内运行的其他应用程序，因为他们现在可以访问这些应用程序。在这个阶段，恶意软件正在与命令与控制服务器通信，以获取进一步攻击的指令。在这个阶段，攻击者依靠过载
    DNS 或 HTTP 等众所周知的协议来发送命令与控制请求作为这些协议的一部分，这使得他们可以绕过基于周界的安全控制，因为流量看起来像是正常的 DNS 或
    HTTP 请求。
- en: Impact
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 影响
- en: This is the final stage of the attack, where the outcome is usually the stealing
    of sensitive data. This is achieved by a technique called data exfiltration, encryption
    of data for ransomware, or even using resources for cryptomining.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是攻击的最终阶段，通常的结果是窃取敏感数据。这是通过一种称为数据外泄、勒索软件数据加密，甚至使用资源进行加密货币挖掘的技术来实现的。
- en: Threat defense comprises a set of techniques that help you defend against each
    of these stages and enable you to defend against attacks. It can be overwhelming
    to think about all these stages and techniques adversaries can use. We want to
    mention that while adversaries need to succeed in most (if not all) of these stages
    to carry out a successful attack, you only need to block them in any one stage
    to thwart the attack. So the odds are in your favor. Understanding these stages
    and how they apply to Kubernetes is a first step in building an effective defense
    mechanism. Adversaries are always innovating, and therefore you should focus on
    all the stages and use tools and techniques relevant to each stage to give yourself
    the greatest chance to successfully thwart attacks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁防御包括一组技术，帮助您防御这些阶段并使您能够抵御攻击。考虑到对手可能使用的所有这些阶段和技术可能会让人感到不知所措。我们要提到的是，虽然对手需要在大多数（如果不是全部）阶段中取得成功才能执行成功的攻击，但您只需要在任何一个阶段阻止它们就可以挫败攻击。所以胜算在您这边。了解这些阶段及其在
    Kubernetes 中的应用是构建有效防御机制的第一步。对手始终在创新，因此您应关注所有阶段，并使用与每个阶段相关的工具和技术，以使自己有最大成功挫败攻击的机会。
- en: In [Chapter 2](ch02.xhtml#infrastructure_security), we covered infrastructure
    security, showing you how to create secure infrastructure for running your workloads.
    In [Chapter 3](ch03.xhtml#workload_deployment_controls), we covered best practices
    and techniques you can use to securely deploy workloads. [Chapter 4](ch04.xhtml#workload_runtime_security)
    covers security policies you can apply to your workloads to secure the workload
    runtime environment, and [Chapter 6](ch06.xhtml#observability_and_security) covers
    how you can apply network policy to implement network access control for your
    workloads. We recommend you review these chapters in the context of the kill-chain
    stages described here. You will find that these techniques are very effective
    with the initial access, privilege escalation, credential access, persistence,
    and execution stages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.xhtml#infrastructure_security)中，我们讨论了基础设施安全，向您展示了如何为运行工作负载创建安全的基础设施。在[第3章](ch03.xhtml#workload_deployment_controls)中，我们介绍了您可以使用的最佳实践和技术，以安全地部署工作负载。[第4章](ch04.xhtml#workload_runtime_security)涵盖了您可以应用于工作负载以保护工作负载运行环境的安全策略，而[第6章](ch06.xhtml#observability_and_security)涵盖了如何应用网络策略来实施工作负载的网络访问控制。我们建议您在这里描述的杀伤链阶段的背景下回顾这些章节。您会发现，这些技术在处理初始访问、特权提升、凭证访问、持久性和执行阶段时非常有效。
- en: We will now describe tools and techniques you can use to secure the other stages
    of the kill chain. It is important to note that Kubernetes is a distributed system
    and its cluster network is crucial to its operation; therefore, securing the network
    is a very effective technique. For example, a successful privilege escalation
    or a successful exploit of an application vulnerability is rendered ineffective
    if the adversary cannot further the attack due to an inability to use the cluster
    network for discovery, command and control, lateral movement, or data exfiltration.
    It is not enough to have network segmentation based on IP addresses/ports, as
    adversaries will find ways to further an attack even with techniques like network
    segmentation protecting your cluster. For example, you need to allow HTTP traffic
    to your service and pods backing the service, so the attack can be a part of the
    HTTP header that triggers a privilege escalation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将描述您可以使用的工具和技术来保护杀伤链的其他阶段。需要注意的是 Kubernetes 是一个分布式系统，其集群网络对其操作至关重要；因此，保护网络是一种非常有效的技术。例如，如果对手无法利用集群网络进行发现、命令与控制、横向移动或数据外泄，那么成功的特权升级或应用程序漏洞的利用将变得无效。仅仅基于
    IP 地址/端口的网络分割是不够的，因为对手会找到方法继续攻击，即使像网络分割这样的技术在保护您的集群时。例如，您需要允许 HTTP 流量到达您的服务和支持该服务的
    Pod，以便攻击可以作为触发特权升级的 HTTP 标头的一部分。
- en: Now that we have covered concepts for threat defense, let’s explore intrusion
    detection.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了威胁防御的概念，让我们来探讨入侵检测。
- en: Intrusion Detection
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入侵检测
- en: In this section we will cover intrusion detection and how it applies to Kubernetes
    clusters. To understand this, we will review the various methods of intrusion
    and the role of an intrusion detection system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍入侵检测及其在 Kubernetes 集群中的应用。为了理解这一点，我们将审查入侵的各种方法及入侵检测系统的角色。
- en: Intrusion Detection Systems
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入侵检测系统
- en: 'An intrusion detection system (IDS), as the name suggests, is a system that
    monitors network activity, detects anomalous patterns, and reports suspicious
    behavior. These systems also monitor violations to existing controls (like network
    policy, host hardening) and report these violations. The response actions for
    an IDS are the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵检测系统（IDS）顾名思义是一个监控网络活动、检测异常模式并报告可疑行为的系统。这些系统还监控违反现有控制措施（如网络策略、主机强化）并报告这些违规行为。IDS
    的响应操作包括以下内容：
- en: Alerting
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 警报
- en: Generate an alert and send it to a SIEM for further analysis and action.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 生成警报并发送到 SIEM 进行进一步分析和处理。
- en: Intrusion prevention
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵预防
- en: The system takes action to prevent the intrusion by leveraging existing controls
    (e.g., network policies, Kubernetes pod security policies, host hardening policies)
    and redirecting the attack to canary resources especially set up to analyze these
    types of attack. When an IDS is also able to prevent the intrusion, it is called
    an intrusion prevention system (IPS).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 系统通过利用现有的控制措施（例如网络策略、Kubernetes Pod 安全策略、主机强化策略）并重定向攻击至专门用于分析此类攻击的金丝雀资源来采取行动以防止入侵。当
    IDS 能够预防入侵时，它被称为入侵预防系统（IPS）。
- en: A good intrusion detection system should be able to associate a set of related
    anomalies by tracking the behavior of a system. We recommend you review user and
    entity behavior analytics (UEBA) and how it applies to security. [Microsoft Azure
    UEBA](https://oreil.ly/LqYWk) is an excellent resource for you to review. Please
    note that for Kubernetes, entity behavioral analytics is applicable. The details
    of how to implement it are outside the scope of this book, but UEBA helps in reducing
    the number of alerts and generating high-fidelity alerts. Please note that more
    alerts is not necessarily good; they cause downstream systems (e.g., SIEMs) to
    be immune to alerts. Later we will review how to leverage machine learning systems
    to generate high-fidelity alerts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好的入侵检测系统应能通过跟踪系统的行为来关联一组相关的异常。我们建议您了解用户和实体行为分析（UEBA）及其在安全领域的应用。[Microsoft
    Azure UEBA](https://oreil.ly/LqYWk) 是您审阅的一个优秀资源。请注意，对于 Kubernetes，实体行为分析是适用的。本书不涵盖其实施细节，但
    UEBA 有助于减少警报数量并生成高保真度警报。请注意，警报数目的增加未必是好事；它们会使下游系统（例如 SIEM）对警报免疫。稍后我们将讨论如何利用机器学习系统生成高保真度警报。
- en: We will now review intrusion detection methods and how they apply to Kubernetes
    clusters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将审查入侵检测方法及其在 Kubernetes 集群中的应用。
- en: IP Address and Domain Name Threat Feeds
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP 地址和域名威胁信息源
- en: As explained in the cybersecurity kill chain, adversaries will often use malicious
    software to contact a server that is controlled by them. These servers are used
    to remotely control the malicious software, get information about the system,
    download more software, and further the attack. Security research teams around
    the world review attacks and identify known C&C servers by IP address/domains.
    These are published as threat feeds and as a part of the indicators of compromise
    and are regularly updated. There are several well-known threat feeds both open
    source and commercial. [STIX](https://oreil.ly/6mw8s) is a well-known standard
    to describe threat intelligence, and [TAXII](https://oreil.ly/w9DSn) is the standard
    to deliver the intelligence. You can find several open source engines that parse
    the STIX and TAXII feeds and provide intelligence (e.g., AlienVault). [Feodo tracker](https://oreil.ly/c0ccW)
    and [Snort](https://oreil.ly/1isJX) are examples of open source feeds that provide
    IP address block lists.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如网络安全杀链中所述，对手通常会使用恶意软件联系一个由他们控制的服务器。这些服务器用于远程控制恶意软件，获取有关系统的信息，下载更多软件并进一步进行攻击。全球的安全研究团队审查攻击并通过IP地址/域名识别已知的C&C服务器。这些信息作为威胁信息源和妥协指标的一部分定期更新。有几个众所周知的威胁信息源，既有开源的也有商业的。[STIX](https://oreil.ly/6mw8s)
    是描述威胁情报的众所周知的标准，而[TAXII](https://oreil.ly/w9DSn) 是提供情报的标准。您可以找到几个解析STIX和TAXII信息源并提供情报的开源引擎（例如AlienVault）。[Feodo
    tracker](https://oreil.ly/c0ccW) 和[Snort](https://oreil.ly/1isJX) 是提供IP地址阻塞列表的开源信息源的例子。
- en: Sometimes adversaries will use VPNs (virtual private networks), which are overlay
    networks that run over physical networks and are useful to conceal a user’s location.
    Tor is another well-known overlay network that is used for this purpose. Similar
    to threat feeds for C&C servers, feeds are available for known [VPNs](https://oreil.ly/RGtxT)
    and [IPs from the Tor network](https://oreil.ly/VHGkZ).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时对手会使用VPN（虚拟专用网络），这些是运行在物理网络上的覆盖网络，用于隐藏用户的位置。Tor是另一个众所周知的用于此目的的覆盖网络。与用于C&C服务器的威胁信息源类似，已知的VPN（https://oreil.ly/RGtxT）和Tor网络中的IP（https://oreil.ly/VHGkZ）也有相关信息源。
- en: We will now cover how you can use these feeds in your Kubernetes cluster to
    implement IDS/IPS. [Figure 11-1](#implementing_idssolidusips_using_threat) shows
    a sample implementation of applying suspicious IP addresses and domains in your
    Kubernetes cluster.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将介绍如何在您的Kubernetes集群中使用这些信息源来实现IDS/IPS。[图 11-1](#implementing_idssolidusips_using_threat)
    展示了在您的Kubernetes集群中应用可疑IP地址和域名的示例实现。
- en: '![](Images/ksao_1101.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_1101.png)'
- en: Figure 11-1\. Implementing IDS/IPS using threat feeds
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1\. 使用威胁信息源实施IDS/IPS
- en: '[Figure 11-1](#implementing_idssolidusips_using_threat) shows what you need
    to implement support for threat feeds in your cluster and also describes the high-level
    workflow to achieve IDS/IPS capabilities. The figure shows the following components
    as a part of your Kubernetes cluster.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-1](#implementing_idssolidusips_using_threat) 展示了如何在您的集群中实现对威胁信息源的支持，并描述了实现IDS/IPS能力的高级工作流程。该图展示了以下组件作为您Kubernetes集群的一部分。'
- en: Threat feed controller
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 威胁信息源控制器
- en: 'This component is responsible for retrieving threat feeds from a configured
    source (typically a URL). This can be implemented in many ways. For the purposes
    of this discussion, we assume that is a pod that watches a configuration resource
    (example in a moment) and reaches out to the specified URL and stores the threat
    feed data in the Kubernetes datastore for other components. The following is an
    example of configuration for the threat feed controller:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件负责从配置的源（通常是一个URL）检索威胁信息源。这可以通过多种方式实现。在本讨论中，我们假设这是一个观察配置资源的pod（稍后的示例），并访问指定的URL，并将威胁信息源数据存储在Kubernetes数据存储中以供其他组件使用。以下是威胁信息源控制器的配置示例：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, the threat feed controller is configured to pull the threat
    feed from the specified URL and then stores the list of IP addresses as a custom
    Kubernetes resource named globalnetworkset. This is then used by the network policy
    implementation to enforce policies based on this resource. The following is an
    example of a policy that can be defined using the globalnetworkset resource:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，威胁信息源控制器被配置为从指定的URL拉取威胁信息，并将IP地址列表存储为名为globalnetworkset的自定义Kubernetes资源。这将由网络策略实施使用，以便基于此资源执行策略。以下是可以使用globalnetworkset资源定义的策略示例：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Network policy engine
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络策略引擎
- en: This is the component that implements network policies in your cluster and is
    used to define policies to block traffic to and from IP addresses that are a part
    of threat feeds. Please note that an IP address list can contain a large number
    of IP addresses and can change periodically. Therefore, the network policy implementation
    you choose should scale based on this requirement. As a hint, we recommend you
    pick an engine that supports the ipsets extension in an iptables-based dataplane,
    where matching sets of IP addresses is optimized. If you are using an eBPF-based
    dataplane, please ensure the implementation has support for eBPF maps to implement
    functionality equivalent to ipsets.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在您的集群中实施网络策略的组件，用于定义阻止与威胁情报中IP地址之间的流量的策略。请注意，IP地址列表可能包含大量IP地址，并且可能定期更改。因此，您选择的网络策略实施应基于此要求进行扩展。作为提示，我们建议您选择一个引擎，支持基于iptables数据平面的ipsets扩展，其中IP地址集的匹配被优化。如果您使用基于eBPF的数据平面，请确保实现支持eBPF映射，以实现与ipsets功能等效的功能。
- en: Log processing engine
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志处理引擎
- en: This component is responsible for reporting flow logs from your cluster that
    contain IP addresses that match any IP addresses that are part of the threat feed
    and generate an alert. Please note this can be a resource-intensive operation,
    given the large amount of flow data. One way to address this is to have the network
    policy engine add an annotation to the flow log to name the feed that contained
    the IP address in the flow log when the dataplane detects a match. It is very
    efficient to do this operation inline instead of doing a match after data is collected.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件负责报告来自您的集群的流日志，其中包含与威胁情报中任何IP地址匹配的IP地址，并生成警报。请注意，由于流数据量巨大，这可能是一个资源密集型操作。解决此问题的一种方法是，当数据平面检测到匹配时，使网络策略引擎向流日志添加一个注释，以命名包含流日志中IP地址的情报。在线执行此操作非常高效，而不是在收集数据后进行匹配。
- en: 'Now that we understand the various components of the IDS, let’s review the
    step-by-step operation:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了IDS的各个组件，让我们逐步审查其操作：
- en: The threat feed controller polls the threat feed periodically.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 威胁情报控制器定期轮询威胁情报。
- en: The threat feed controller processes the feed and creates the globalnetworkset
    resource in the Kubernetes datastore for the threat feed.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 威胁情报控制器处理该情报并在Kubernetes数据存储中为威胁情报创建globalnetworkset资源。
- en: The network policy engine and the log processing engine read the threat feed.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络策略引擎和日志处理引擎读取威胁情报。
- en: If a network policy is defined, the network policy engine implements the network
    policy for the threat feed.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果定义了网络策略，则网络策略引擎会为威胁情报实施网络策略。
- en: The log engine processes flow logs from the flow log datastore and generates
    alerts for flows matching IP addresses in the threat feed.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志引擎处理来自流日志数据存储的流日志，并为与威胁情报中IP地址匹配的流生成警报。
- en: In step 4, we are able to prevent an intrusion, and step 5 is where we can detect
    an intrusion.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，我们能够防止入侵，第5步是我们可以检测入侵的地方。
- en: Special Considerations for Domain Name Feeds
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域名情报的特殊考虑事项
- en: As mentioned before, threat feeds can be a list of IP addresses or domain names.
    In case of domain names, the network policy engine must support domain name–based
    policies, and the log processing engine must support capturing domain names in
    flow logs and matching domain names from feeds in a flow log.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，威胁情报可以是IP地址或域名列表。对于域名情报，网络策略引擎必须支持基于域名的策略，并且日志处理引擎必须支持在流日志中捕获域名，并匹配来自情报中的域名的流日志中的域名。
- en: Note that the technique described detects and enables controls to protect against
    malicious activity, so it makes the implementation an intrusion prevention system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所描述的技术能够检测并启用控制来防止恶意活动，因此使其实现成为入侵防护系统。
- en: Deep packet inspection
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深度数据包检查
- en: Deep packet inspection (DPI) is an intrusion detection technique where network
    traffic is inspected and matched against known malicious network traffic patterns.
    This requires inspection of the packet beyond Layer 3/Layer 4 and understanding
    of application protocols (e.g., HTTP, MySQL, etc.). Similar to threat feeds for
    IP and domains, signatures-based feeds are also available. [OWASP Top 10](https://oreil.ly/270Fw)
    and [SANs Top 25](https://oreil.ly/OmO85) are signatures for well-known application
    software risks and software vulnerabilities that can be used to detect malicious
    traffic in network and application layers of the packet. When you think about
    implementing DPI in your cluster, you need to consider a few factors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 深度数据包检查（DPI）是一种入侵检测技术，其中网络流量被检查并与已知的恶意网络流量模式进行匹配。这要求超过第3/第4层的数据包检查，并理解应用程序协议（例如，HTTP、MySQL等）。与IP和域名的威胁数据源类似，还提供基于签名的数据源。[OWASP
    Top 10](https://oreil.ly/270Fw)和[SANs Top 25](https://oreil.ly/OmO85)是用于检测数据包的网络和应用程序层中已知应用软件风险和软件漏洞的签名。当您考虑在您的集群中实施DPI时，您需要考虑一些因素。
- en: First, where should you implement DPI? One option is to implement it at the
    ingress, which is the point where traffic enters/exits the cluster. Ingress is
    a resource in Kubernetes that allows users to expose services to clients outside
    the cluster. This topic is covered in depth in [Chapter 8](ch08.xhtml#managing_trust_across_teams).
    For this discussion we assume that the services are exposed as URLs. So in this
    case you would implement DPI at the ingress (e.g., load balancers or on nodes
    for traffic going through node ports). This is a good option, but in this scenario
    the limitation is that you can detect a malicious network flow, but the information
    is not complete, as the detection is early in the cycle. You will not have visibility
    into which pod the malicious flow was destined to, and will have to review all
    possible destination pods and then co-relate the activity of each pod backing
    the service to understand the attack. Also, if the attack uses another mechanism
    to trigger the exploit (e.g., an API server, a kube-proxy vulnerability, or a
    node OS image vulnerability), the malicious flow originates inside the cluster
    and will not be detected at the ingress. Therefore, it is better to implement
    DPI for the service inside the cluster.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您应该在哪里实施DPI？一种选择是在入口处实施，这是流量进入/退出集群的地点。在Kubernetes中，入口是一种资源，允许用户将服务暴露给集群外的客户端。这个主题在[第8章](ch08.xhtml#managing_trust_across_teams)中有深入探讨。在这次讨论中，我们假设服务作为URL暴露。因此，在这种情况下，您将在入口处实施DPI（例如，负载均衡器或用于通过节点端口传输的节点）。这是一个不错的选择，但在这种情况下，限制在于您可以检测到恶意网络流量，但信息并不完整，因为检测早在周期的开始阶段。您将无法看到恶意流量的目标Pod是哪一个，并且必须查看所有可能的目标Pod，然后将每个支持服务的Pod的活动相关联以理解攻击。另外，如果攻击使用另一种机制触发漏洞（例如，API服务器、kube-proxy漏洞或节点操作系统映像漏洞），则恶意流量源自集群内部，并且不会在入口处被检测到。因此，最好在集群内部为服务实施DPI。
- en: So if you choose the option to implement DPI inside the cluster for each service,
    you need to consider that the amount of traffic inside the cluster is very large
    due to the distributed nature of Kubernetes. This presents a challenge as DPI
    involves packet parsing and can potentially impact latency for applications as
    well as increase the resource utilization. In order to address the application
    latency challenge, we recommend you consider DPI as a mechanism to detect malicious
    activity and not prevent the attack. This means the DPI engine does not need to
    be inline and can work with a copy of each packet in the flow; the original packet
    flow is not impacted by this, and hence there is no impact to latency-sensitive
    applications. There is still the concern about resource utilization due to packet
    parsing. In order to address this, we recommend you use context in the Kubernetes
    cluster to select traffic for services that need DPI. This could be as simple
    as labeling services that are critical and have compliance requirements and enabling
    DPI using label-based selectors, or you can use DPI as a response action to anomalous
    traffic that is identified by a SIEM or your logging and alerting engine.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您选择在每个服务内部实施 DPI 的选项，您需要考虑由于 Kubernetes 的分布式特性而产生的大量集群内流量。这带来了一个挑战，因为 DPI
    需要进行数据包解析，可能会影响应用程序的延迟，并增加资源利用率。为了解决应用程序延迟的挑战，我们建议您将 DPI 视为检测恶意活动的机制，而不是防止攻击。这意味着
    DPI 引擎不需要在线操作，可以处理流中每个数据包的副本；原始数据包流不受影响，因此对延迟敏感的应用程序没有影响。仍然存在由于数据包解析而引起的资源利用率问题。为了解决这个问题，我们建议您在
    Kubernetes 集群中使用上下文来选择需要 DPI 的服务流量。这可以简单地通过标记那些关键且具有合规要求的服务并使用基于标签的选择器启用 DPI，或者您可以使用
    DPI 作为对异常流量的响应动作，该异常流量由 SIEM 或您的日志和警报引擎识别。
- en: Another important consideration is that the DPI engine needs traffic to be unencrypted,
    so if you are using encryption for traffic inside the cluster (e.g., HTTPS), you
    need to implement decryption along with your DPI engine or choose an encryption
    technology like WireGuard, where you can implement DPI prior to encryption for
    egress traffic and after decryption for ingress traffic. You should consider a
    proxy like Envoy that allows traffic to be redirected to it, decrypted, inspected,
    encrypted, and sent to its destination.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的考虑因素是 DPI 引擎需要流量是未加密的，因此，如果您在集群内部使用加密流量（例如 HTTPS），您需要在 DPI 引擎中实施解密，或者选择像
    WireGuard 这样的加密技术，在出口流量之前实施 DPI，并在入口流量解密后实施 DPI。您应考虑像 Envoy 这样的代理，它允许流量被重定向至其进行解密、检查、加密，并发送至其目的地。
- en: Now that we have established that DPI needs to be implemented inside the cluster
    as an IDS mechanism and needs to be selectively enabled to limit resource consumption,
    let’s explore a sample reference architecture for a DPI implementation for your
    Kubernetes cluster. [Figure 11-2](#implementation_of_dpi_using_envoy) shows a
    reference implementation. Before we review the reference implementation, we want
    to introduce some well-known IDS engines that are available for you to integrate
    in your cluster. [Snort](https://oreil.ly/yDteh) and [Suricata](https://oreil.ly/1Ka1q)
    are a couple of open source IDS engines that are available; however, you can choose
    any IDS engine that is suitable for your use case, including implementing your
    own IDS engine.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确认 DPI 需要作为 IDS 机制实施在集群内部，并需要有选择地启用以限制资源消耗，让我们来探讨一个 DPI 实施的示例参考架构，适用于您的
    Kubernetes 集群。[图 11-2](#implementation_of_dpi_using_envoy) 展示了一个参考实施。在我们审查参考实施之前，我们想介绍一些可以集成到您的集群中的著名
    IDS 引擎。[Snort](https://oreil.ly/yDteh) 和 [Suricata](https://oreil.ly/1Ka1q) 是一些可用的开源
    IDS 引擎，但您可以根据您的用例选择任何适合的 IDS 引擎，包括实施您自己的 IDS 引擎。
- en: '![](Images/ksao_1102.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_1102.png)'
- en: Figure 11-2\. Implementation of DPI using Envoy
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 使用 Envoy 实现 DPI
- en: '[Figure 11-2](#implementation_of_dpi_using_envoy) shows a Kubernetes cluster
    namespace that has a few microservices that are part of an application. The figure
    shows Envoy is deployed as a daemonset on every node. Envoy is a well-known proxy
    that is used in Kubernetes clusters to proxy traffic for analysis and for additional
    controls. We recommend you use Envoy as a transparent proxy, where it terminates
    connections destined to a pod backing a service and after analysis sends the traffic
    to the pod backing a service. In this case for the second microservice, the DPI
    engine is implemented as an integration to Envoy, and Envoy is configured to redirect
    traffic destined for pods backing the service to itself. DPI is then performed,
    and Envoy takes care of completing the connection. The transparent mode for Envoy
    means that the application sees no difference in the packet (e.g., TCP/IP header).
    As discussed before, if a malicious flow is detected by the DPI engine, the resulting
    alert will show the pod that received the flow, and it is then trivial to examine
    activity by that pod and co-relate it to the malicious flow. In [Figure 11-2](#implementation_of_dpi_using_envoy),
    DPI is enabled for traffic destined to one service as an example. DPI can be enabled
    for any service or a combination of pods; the approach is similar, but the difference
    is in how Envoy is configured for traffic redirection.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-2](#implementation_of_dpi_using_envoy) 显示了一个 Kubernetes 集群命名空间，其中包含几个微服务，这些微服务是应用程序的一部分。该图显示
    Envoy 部署为每个节点的守护进程集。Envoy 是一个在 Kubernetes 集群中用于代理流量以进行分析和附加控制的众所周知的代理。我们建议您将 Envoy
    用作透明代理，在此模式下，它终止要发送到支持服务的 pod 的连接，并在分析后将流量发送到支持服务的 pod。在第二个微服务的情况下，DPI 引擎作为 Envoy
    的集成实施，Envoy 被配置为重定向发送到其自身的支持服务的流量。然后执行 DPI，Envoy 负责完成连接。Envoy 的透明模式意味着应用程序在数据包（例如
    TCP/IP 头）中看不到任何差异。正如之前讨论的那样，如果 DPI 引擎检测到恶意流量，生成的警报将显示接收流量的 pod，并且可以轻松地检查该 pod
    的活动并将其与恶意流量关联起来。在 [图 11-2](#implementation_of_dpi_using_envoy) 中，以一个服务作为示例启用了流向此服务的
    DPI。DPI 可以针对任何服务或一组 pod 启用；方法类似，但不同之处在于如何为流量重定向配置 Envoy。'
- en: We recommend that you use Envoy with your DPI engine, but there are other ways
    to integrate a DPI engine in your Kubernetes cluster. For example, if you have
    a cluster running an eBPF dataplane, you can get copies of the packet in the BPF
    program and send them to the IDS engine for analysis. Likewise, if you are using
    [VPP](https://fd.io) as the dataplane, it is also possible to integrate a DPI
    engine to inspect traffic.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您在 DPI 引擎中使用 Envoy，但也有其他集成 DPI 引擎到 Kubernetes 集群的方法。例如，如果您的集群运行 eBPF 数据平面，您可以在
    BPF 程序中获取数据包的副本，并将其发送到 IDS 引擎进行分析。同样，如果您使用 [VPP](https://fd.io) 作为数据平面，也可以集成 DPI
    引擎以检查流量。
- en: You can choose the option that works for you, but it is important that you consider
    integration of a DPI engine in your Kubernetes cluster for signature-based malware
    detection. Next, let’s examine logging and visibility and its role in the threat
    defense strategy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择适合您的选项，但重要的是考虑在您的 Kubernetes 集群中集成 DPI 引擎进行基于签名的恶意软件检测。接下来，让我们来审视日志记录和可见性及其在威胁防御策略中的作用。
- en: Logging and visibility
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志记录和可见性
- en: 'A very important part of security is visibility of the activity in your cluster
    (e.g., pod creation, Kubernetes resource access/changes, application activity,
    network activity). This is achieved by enabling logging in your cluster. We cover
    log collection and metrics collection in detail in [Chapter 5](ch05.xhtml#observability-id000002).
    For this section we want to reiterate the following as key aspects of logging
    and visibility:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性的一个非常重要的部分是查看集群中活动的可见性（例如，pod 创建、Kubernetes 资源访问/更改、应用程序活动、网络活动）。通过在集群中启用日志记录来实现这一点。我们在
    [第5章](ch05.xhtml#observability-id000002) 中详细介绍了日志收集和指标收集。在本节中，我们希望重申日志记录和可见性的以下关键方面：
- en: Traditional logging for network flows with the five-tuple is insufficient. You
    need to use a tool that supports Kubernetes context-rich logging where network
    flows between pods, deployments, replica sets, and services are part of the log
    collected.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用传统的五元组网络流量日志记录是不够的。您需要使用支持 Kubernetes 上下文丰富日志记录的工具，其中包括 pod、部署、副本集和服务之间的网络流量作为日志的一部分进行收集。
- en: Logs at collection time need to be annotated with Kubernetes metadata like labels,
    policies in use, node information, and even process information (processes running
    in the container). This is important due to the ephemeral nature of Kubernetes;
    all of these change, and it is difficult to associate a malicious network flow
    with Kubernetes metadata when the network flows and the Kubernetes metadata are
    collected independent of each other.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在收集时，日志需要带有 Kubernetes 元数据，如标签、使用的策略、节点信息，甚至进程信息（容器中运行的进程）。这一点非常重要，因为 Kubernetes
    的短暂性质，所有这些都在变化，当网络流量和 Kubernetes 元数据独立收集时，很难将恶意网络流量与 Kubernetes 元数据关联起来。
- en: DNS activity logs are critical and must also be annotated with Kubernetes metadata
    as described earlier for network flow logs.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 活动日志至关重要，并且必须像前面描述的网络流量日志一样带有 Kubernetes 元数据进行标注。
- en: Application protocol–based flow logs (e.g., HTTP header, MySQL) are also critical
    and again must be collected with Kubernetes metadata.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于应用协议的流量日志（例如 HTTP 头部、MySQL）同样至关重要，并且必须带有 Kubernetes 元数据进行收集。
- en: Finally, Kubernetes audit logs (activity logs) are very important and must be
    collected, as these will help detect abnormal activity by malicious users (e.g.,
    repeated denied access to a resource, creation of a service account, etc.).
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，Kubernetes 审计日志（活动日志）非常重要，必须进行收集，因为这些日志将帮助检测恶意用户的异常活动（例如重复被拒绝访问资源、创建服务账户等）。
- en: 'There are several tools and mechanisms available to you to implement log collection.
    The cloud providers have logging capabilities (e.g., Stackdriver in Google, CloudWatch
    in AWS); you can also choose to implement logging using tools like Sysdig, Datadog,
    and Calico Enterprise, which offer logging capabilities with Kubernetes context.
    In addition to the log collection described earlier, the tool you choose must
    support the following simple capabilities that are critical to your IDS strategy:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实施日志收集，您可以选择使用多种工具和机制。云提供商提供了日志记录功能（例如 Google 的 Stackdriver、AWS 的 CloudWatch）；您还可以选择使用诸如
    Sysdig、Datadog 和 Calico Enterprise 等工具实施日志记录，这些工具提供了与 Kubernetes 上下文相关的日志记录功能。除了前述的日志收集外，您选择的工具还必须支持以下几个关键的简单功能，这些功能对您的
    IDS 策略至关重要：
- en: The tool must support an alerting capability that allows you to query logs and
    set up alerts for rule-based anomalies (e.g., excessive NXDOMAIN requests, imbalance
    in network throughput for a given protocol like HTTP or DNS between inbound and
    outbound traffic, unexpected connections to certain pods from certain namespaces,
    excessive network policy denied logs).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具必须支持警报功能，允许您查询日志并针对基于规则的异常设置警报（例如对于异常的 NXDOMAIN 请求、HTTP 或 DNS 协议中入站和出站流量不平衡、从特定命名空间的特定
    Pod 到某些 Pod 的意外连接、过多的网络策略拒绝日志等）。
- en: The tools must support the baselining of various metrics (e.g., number of connections
    to a service, HTTP requests from a rare user-agent in the header) using basic
    machine learning techniques and report anomalies as alerts.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具必须支持使用基本机器学习技术对各种指标进行基线设定（例如对服务的连接数、HTTP 请求中的罕见用户代理进行检查），并将异常报告为警报。
- en: The tools must support forwarding logs and alerts to an external SIEM (like
    Splunk, QRadar, Sumo Logic) or the cloud provider’s security center (Azure Security
    Center).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具必须支持将日志和警报转发到外部 SIEM（如 Splunk、QRadar、Sumo Logic）或云提供商的安全中心（Azure Security
    Center）。
- en: The previous sections covered the collection and analysis of logs. While logging
    is available in most Kubernetes environments, you need to ensure that the tool
    you choose to implement logging is effective for your IDS strategy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分介绍了日志收集和分析。虽然大多数 Kubernetes 环境中都提供了日志记录功能，但您需要确保选择的实施日志记录工具对您的 IDS 策略有效。
- en: Advanced Threat Defense Techniques
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级威胁防御技术
- en: In this section we will cover some advanced threat defense techniques you can
    use in your cluster. These are techniques that are designed to be effective in
    a Kubernetes environment, especially for detecting the lateral movement and exfiltration
    stages of the attack life cycle.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些您可以在集群中使用的高级威胁防御技术。这些技术旨在在 Kubernetes 环境中发挥作用，特别是用于检测攻击生命周期中的横向移动和数据外流阶段。
- en: Canary Pods/Resources
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本化部署的 Pods/Resources
- en: The use of honeypots is a well-known technique to detect bad actors within your
    cluster and gain insight on what they are doing by exposing simulated or intentionally
    vulnerable applications in your cluster and monitoring access to these applications.
    These applications act as a canary to notify the blue team of the intrusion and
    stall the attacker’s progress from reaching actual sensitive applications and
    data. Once the blue team is aware of the situation, the attack can be traced back
    to the initial vector. The attack can then be contained and even removed from
    the cluster.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蜜罐是一种广为人知的技术，用于检测集群中的恶意行为者，并通过暴露在集群中的模拟或有意漏洞的应用程序来监视对这些应用程序的访问，从而了解他们的行动。这些应用程序充当金丝雀，通知蓝队入侵的发生，并阻止攻击者进一步访问实际敏感的应用程序和数据。一旦蓝队意识到情况，攻击可以追溯到初始向量，并且可以在集群中被隔离甚至删除。
- en: Applying this technique in a Kubernetes environment works exceedingly well due
    to the declarative nature of applying manifests to deploy workloads. Whether the
    cluster is standalone or part of a complex pipeline, workload communications are
    defined by the application’s code. Any communication that’s not defined can be
    deemed suspicious at a minimum, and the source resource may have been compromised.
    By introducing fake workloads and services around production workloads, when a
    workload gets compromised, the attacker cannot differentiate between other real
    and fake workloads. The asymmetric knowledge between the attacker and the cluster
    operator makes it easy to detect lateral movement from compromised workloads.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 环境中应用此技术非常有效，这是因为应用清单的声明性质负责部署工作负载。无论集群是独立的还是作为复杂管道的一部分，工作负载通信都由应用程序的代码定义。任何未定义的通信最少可能被视为可疑，并且源资源可能已被
    compromise。通过在生产工作负载周围引入虚假工作负载和服务，在工作负载被 compromise 时，攻击者无法区分其他真实和虚假工作负载。攻击者与集群操作员之间的不对称知识使得从被
    compromise 的工作负载侧移动容易检测出来。
- en: '[Figure 11-3](#sample_implementation_of_honeypots_in_a) shows an example of
    how this is achieved in a Kubernetes cluster.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-3](#sample_implementation_of_honeypots_in_a) 展示了在 Kubernetes 集群中实现这一目标的示例。'
- en: '![](Images/ksao_1103.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_1103.png)'
- en: Figure 11-3\. Sample implementation of honeypots in a Kubernetes cluster
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-3\. Kubernetes 集群中蜜罐的示例实现
- en: Calico Enterprise has a honeypots feature that provides a supplementary detection
    method when strict network policies or monitoring is not feasible. Calico Enterprise
    honeypots work by deploying canary workloads and services in sensitive namespaces
    and monitoring for access. By leveraging Calico Enterprise’s monitoring and alerting
    capabilities, any connections made to these canary workloads will generate an
    alert and can be traced back to the source. Canary traffic should be inspected
    using a DPI engine to provide signature-based detection to provide high-fidelity
    alerts and significantly reduce false positives.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Calico Enterprise 提供了蜜罐功能，当严格的网络策略或监控不可行时，提供了一种补充检测方法。 Calico Enterprise 蜜罐通过在敏感命名空间部署金丝雀工作负载和服务，并监视访问来运行。通过利用
    Calico Enterprise 的监控和警报功能，对这些金丝雀工作负载进行的任何连接都将生成警报，并可以追溯到源头。应使用 DPI 引擎检查金丝雀流量，以提供基于签名的高保真警报，并显著减少误报。
- en: DNS-Based Attacks and Defense
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 DNS 的攻击与防御
- en: When you look at activity in a Kubernetes cluster, DNS is critical to your applications
    that are running. Kubernetes supports DNS as an infrastructure, and DNS support
    is available for using DNS names for pods and services. CoreDNS is the recommended
    DNS server for your Kubernetes cluster. Since DNS is critical to cluster operation,
    DNS traffic needs to be allowed inside the cluster and even for external lookups.
    This makes DNS an attractive option for adversaries to target. In this section
    we will cover domain generation algorithm (DGA) attacks that are used by adversaries
    to establish a connection to their command-and-control center and then for exfiltration
    of data.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看 Kubernetes 集群中的活动时，DNS 对于正在运行的应用程序至关重要。 Kubernetes 支持 DNS 作为基础设施，并支持使用
    DNS 名称来命名 pod 和服务。 CoreDNS 是您 Kubernetes 集群的推荐 DNS 服务器。由于 DNS 对集群操作至关重要，因此需要允许集群内部和外部的
    DNS 流量。这使得 DNS 成为攻击者针对的有吸引力的选项。在本节中，我们将讨论攻击者使用的域生成算法（DGA）攻击，用于建立到其命令与控制中心的连接以及数据外泄。
- en: '[Figure 11-4](#dga_based_attack) shows how a domain generation attack works.
    The adversary first downloads an exploit inside the cluster that uses a known
    seed and an algorithm to generate domain names. The exploit then queries the algorithm-generated
    domain names. The same algorithm is run to spin up a DNS server that responds
    to DNS queries, and this cycle repeats till the client and the server domains
    match. Upon a successful match, the cluster has established a successful connection
    to the command-and-control server for the malware.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-4](#dga_based_attack) 显示了域生成攻击的工作原理。对手首先在集群内下载一个利用已知种子和算法生成域名的漏洞。然后漏洞会查询算法生成的域名。相同的算法运行起来，启动一个
    DNS 服务器来响应 DNS 查询，这个过程会重复，直到客户端和服务器的域名匹配。成功匹配后，集群已经与恶意软件的命令与控制服务器建立了成功的连接。'
- en: '![](Images/ksao_1104.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_1104.png)'
- en: Figure 11-4\. DGA-based attack
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-4\. 基于域生成算法的攻击
- en: Since domain names are generated randomly using an algorithm and the queries
    are legitimate DNS queries, it is not possible to detect these types of attacks
    using DNS threat feeds or at the perimeter using DPI. Also, the fact that there
    is a relatively large amount of DNS activity in the cluster means it is easy for
    the malware to hide its activity inside the cluster. The way to detect these types
    of attacks is to use a machine learning technique that can predict a malicious
    domain just by analyzing the domain name. Another mechanism that can be effective
    is to use machine learning to baseline the number of DNS responses that do not
    resolve to a valid server and report an anomaly if there is an increase in such
    failed DNS queries.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于域名是通过算法随机生成的，而查询是合法的 DNS 查询，因此使用 DNS 威胁源或在 DPI 边缘检测这些类型的攻击是不可能的。此外，集群中存在大量的
    DNS 活动意味着恶意软件可以轻松地隐藏其活动。检测这类攻击的方法是使用机器学习技术，通过分析域名就能预测恶意域。另一个有效的机制是使用机器学习来基线化那些没有解析到有效服务器的
    DNS 响应数量，并在这类失败的 DNS 查询增加时报告异常。
- en: You can implement a DGA detection mechanism by having the security research
    team collaborate with the data science team to build this mechanism. Calico Enterprise
    provides a DGA implementation integrated with its alerting engine.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过安全研究团队与数据科学团队合作来构建威胁防御机制，实施域生成算法的检测机制。Calico Enterprise 提供了一个集成了其警报引擎的域生成算法实现。
- en: Conclusion
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, we covered how you can implement threat defense in your Kubernetes
    cluster. The following are the key takeaways from the chapter:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何在您的 Kubernetes 集群中实施威胁防御。以下是本章的主要要点：
- en: The techniques presented are based on our current research, and this area is
    constantly evolving, with adversaries using newer techniques and security teams
    working on solutions to counter these threats. We recommend your security team
    focus on threats seen, analyze them to evaluate if they are applicable to Kubernetes,
    and work on mitigation techniques.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所介绍的技术基于我们目前的研究，这个领域在不断发展，对手使用更新的技术，安全团队正在研究解决这些威胁的方法。我们建议您的安全团队关注已发现的威胁，分析它们是否适用于
    Kubernetes，并努力开发缓解技术。
- en: Kubernetes is a new technology, and we are starting to see it become a focus
    area for adversaries, so an effective threat defense strategy is required.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是一项新技术，我们开始看到它成为对手的一个关注领域，因此需要一种有效的威胁防御策略。
- en: It’s very important to understand the cybersecurity kill chain and how it applies
    to Kubernetes in order to build an effective threat defense strategy.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解网络安全杀伤链及其在 Kubernetes 中的应用对于构建有效的威胁防御策略至关重要。
- en: It is important for you to apply threat feeds and DPI-based techniques to traffic
    inside your cluster to detect attacks that originate inside the cluster. It is
    not adequate to rely on these techniques being applied only at the perimeter,
    as traffic originating inside the cluster may not traverse through devices at
    the perimeter.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于您来说，重要的是在集群内部的流量上应用威胁源和基于 DPI 的技术，以便检测内部发起的攻击。仅依靠边缘的这些技术是不够的，因为源自集群内部的流量可能不会通过边缘设备。
- en: Honeypots and DGA-based attacks are examples of advanced threat defense techniques
    for your Kubernetes cluster that you should implement to thwart sophisticated
    attacks.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜜罐和基于域生成算法的攻击是您在 Kubernetes 集群中应实施的高级威胁防御技术的示例，以防范复杂的攻击。
