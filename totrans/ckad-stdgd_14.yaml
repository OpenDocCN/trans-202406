- en: Chapter 14\. Container Probes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications running in containers do not operate under the premise of “fire
    and forget.” Once Kubernetes starts the container, you’ll want to know if the
    application is ready for consumption and is still working as expected in an hour,
    a week, or a month. A health probe is a periodically running mini-process that
    asks the application for its status and takes action upon certain conditions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll discuss container health probes—more specifically, readiness,
    liveness, and startup probes. You’ll learn about the different health verification
    methods and how to define them for the proper use cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Working with Probes
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even with the best testing strategy, it’s nearly impossible to find all bugs
    before deploying software to a production environment. That’s especially true
    for failure situations that occur only after operating the software for an extended
    period of time. It’s not uncommon to see memory leaks, deadlocks, infinite loops,
    and similar conditions crop up once end users put the application under load.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Proper monitoring can help with identifying those issues; however, you still
    need to act to mitigate the situation. First, you’ll likely want to restart the
    application to prevent further outages. Second, the development team needs to
    identify the underlying root cause and fix the application’s code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Probe Types
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kubernetes provides a concept called *health probing* to automate the detection
    and correction of such issues. You can configure a container to execute a periodic
    mini-process that checks for certain conditions. These processes are defined as
    follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Readiness probe
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Even after an application has started up, it may still need to execute configuration
    procedures—for example, connecting to a database and preparing data. This probe
    checks if the application is ready to serve incoming requests. [Figure 14-1](#readiness_probe)
    shows the readiness probe.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 1401](Images/ckd2_1401.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. A readiness probe checks if the application is ready to accept
    traffic
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Liveness probe
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Once the application is running, you want to make sure that it still works as
    expected without issues. This probe periodically checks for the application’s
    responsiveness. Kubernetes restarts the container automatically if the probe considers
    the application be in an unhealthy state, as shown in [Figure 14-2](#liveness_probe).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 1402](Images/ckd2_1402.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. A liveness probe checks if the application is healthy
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Startup probe
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Legacy applications in particular can take a long time to start up—possibly
    several minutes. A startup probe can be instantiated to wait for a predefined
    amount of time before a liveness probe is allowed to start probing. By setting
    up a startup probe, you can prevent the application process from being overwhelmed
    with probing requests. Startup probes kill the container if the application can’t
    start within the set time frame. [Figure 14-3](#startup_probe) illustrates the
    behavior of a startup probe.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是旧应用程序可能需要很长时间才能启动 —— 可能会有几分钟。可以实例化启动探针来等待预定义的时间量，然后才允许启动存活探针进行探测。通过设置启动探针，可以防止应用程序进程被探测请求压倒。如果应用程序无法在设定的时间内启动，则启动探针会终止容器。[图
    14-3](#startup_probe) 展示了启动探针的行为。
- en: '![ckd2 1403](Images/ckd2_1403.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1403](Images/ckd2_1403.png)'
- en: Figure 14-3\. A startup probe holds off on starting the liveness probe
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-3\. 启动探针延迟启动存活探针的行为
- en: From an operational perspective, the most important probe to implement is the
    readiness probe. Without defining liveness and startup probes, the Kubernetes
    control plane components will handle the majority of the default behavior.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从运维的角度来看，最重要的探针是准备探针。如果不定义存活性和启动探针，Kubernetes 控制平面组件将处理大部分默认行为。
- en: Each probe offers distinct methods to verify the health of a container, discussed
    in the next section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个探针提供了一些独特的方法来验证容器的健康状态，详见下一节。
- en: Health Verification Methods
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 健康验证方法
- en: You can define one or many of the health verification methods for a container.
    [Table 14-1](#available_health_verification_methods) describes the available health
    verification methods, their corresponding YAML attribute, and their runtime behavior.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为容器定义一个或多个健康验证方法。[表 14-1](#available_health_verification_methods) 描述了可用的健康验证方法、它们对应的
    YAML 属性以及它们的运行时行为。
- en: Table 14-1\. Available health verification methods
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-1\. 可用的健康验证方法
- en: '| Method | Option | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 选项 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Custom command | `exec.command` | Executes a command inside the container
    (e.g., a `cat` command) and checks its exit code. Kubernetes considers a zero
    exit code to be successful. A non-zero exit code indicates an error. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 自定义命令 | `exec.command` | 在容器内执行命令（例如 `cat` 命令），并检查其退出代码。Kubernetes 认为零退出代码表示成功，非零退出代码表示错误。
    |'
- en: '| HTTP GET request | `httpGet` | Sends an HTTP GET request to an endpoint exposed
    by the application. An HTTP response code in the range of 200 to 399 indicates
    success. Any other response code is regarded as an error. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| HTTP GET 请求 | `httpGet` | 发送 HTTP GET 请求到应用程序公开的端点。在 200 到 399 范围内的 HTTP
    响应代码表示成功。任何其他响应代码被视为错误。 |'
- en: '| TCP socket connection | `tcpSocket` | Tries to open a TCP socket connection
    to a port. If the connection could be established, the probing attempt was successful.
    The inability to connect is accounted for as an error. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| TCP socket 连接 | `tcpSocket` | 尝试打开到端口的 TCP socket 连接。如果连接成功建立，则探测尝试成功。无法连接被视为错误。
    |'
- en: '| gRPC | `grpc` | The application implements the [GRPC Health Checking Protocol](https://github.com/grpc/grpc/blob/master/doc/health-checking.md),
    which verifies whether the server is able to handle a Remote Procedure Call (RPC).
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| gRPC | `grpc` | 应用程序实现了 [GRPC 健康检查协议](https://github.com/grpc/grpc/blob/master/doc/health-checking.md)，验证服务器是否能处理远程过程调用（RPC）。
    |'
- en: Remember that you can combine any probe with any health check method. The health
    verification method you choose highly depends on the type of application you are
    running in the container. For example, the obvious choice for a web-based application
    is to use the HTTP GET request verification method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以将任何探针与任何健康检查方法结合使用。您选择的健康验证方法高度依赖于容器中运行的应用程序类型。例如，Web 应用程序的明显选择是使用 HTTP
    GET 请求验证方法。
- en: Health Check Attributes
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 健康检查属性
- en: Every probe offers a set of attributes that can further configure the runtime
    behavior, as shown in [Table 14-2](#attributes_for_fine_tuning_the_health_check_runtime_behavior).
    For more information, see the API of the [Probe v1 core](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#probe-v1-core)
    object.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个探针都提供一组属性，可以进一步配置运行时行为，如 [表 14-2](#attributes_for_fine_tuning_the_health_check_runtime_behavior)
    所示。更多信息，请参阅 [探针 v1 核心](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#probe-v1-core)
    对象的 API。
- en: Table 14-2\. Attributes for fine-tuning the health check runtime behavior
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-2\. 用于微调健康检查运行时行为的属性
- en: '| Attribute | Default value | Description |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `initialDelaySeconds` | 0 | Delay in seconds until first check is executed.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `initialDelaySeconds` | 0 | 直到执行第一次检查之前的延迟秒数。 |'
- en: '| `periodSeconds` | 10 | Interval for executing a check (e.g., every 20 seconds).
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `periodSeconds` | 10 | 执行检查的间隔（例如，每 20 秒一次）。 |'
- en: '| `timeoutSeconds` | 1 | Maximum number of seconds until check operation times
    out. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `timeoutSeconds` | 1 | 检查操作超时的最大秒数。 |'
- en: '| `successThreshold` | 1 | Number of successful check attempts until probe
    is considered successful after a failure. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `successThreshold` | 1 | 在失败后多少次成功检查尝试后，探测被视为成功。 |'
- en: '| `failureThreshold` | 3 | Number of failures for check attempts before probe
    is marked failed and action taken. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `failureThreshold` | 3 | 在检查尝试失败之前的失败次数，探测将被标记为失败并采取行动。 |'
- en: '| `terminationGracePeriodSeconds` | 30 | Grace period before forcing a container
    to stop upon failure. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `terminationGracePeriodSeconds` | 30 | 在失败后强制停止容器之前的优雅期限。 |'
- en: The following sections will demonstrate the usage of most verification methods
    for different probe types.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节将演示不同探针类型的大多数验证方法的使用。
- en: The Readiness Probe
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 就绪探针
- en: In this scenario, we’ll want to define a readiness probe for a Node.js application.
    The Node.js application exposes an HTTP endpoint on the root context path and
    runs on port 3000\. Dealing with a web-based application makes an HTTP GET request
    a perfect fit for probing its readiness. You can find the source code of the application
    in the book’s GitHub repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望为 Node.js 应用程序定义一个就绪探针。Node.js 应用程序在根上下文路径上公开了一个 HTTP 端点，并运行在 3000
    端口上。处理基于 Web 的应用程序，使用 HTTP GET 请求非常适合探测其就绪状态。您可以在本书的 GitHub 代码库中找到该应用程序的源代码。
- en: In the YAML manifest shown in [Example 14-1](#readiness_probe_example), the
    readiness probe executes its first check after two seconds and repeats checking
    every eight seconds thereafter. All other attributes use the default values. A
    readiness probe will continue to periodically check, even after the application
    has been successfully started.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 14-1](#readiness_probe_example) 中显示的 YAML 清单中，就绪探针在两秒后执行其第一次检查，并在此后每八秒重复检查。所有其他属性使用默认值。即使应用程序成功启动后，就绪探针仍将定期检查。
- en: Example 14-1\. A readiness probe that uses an HTTP GET request
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-1\. 使用 HTTP GET 请求的就绪探针
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_container_probes_CO1-1)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_container_probes_CO1-1)'
- en: You can assign a name to a port so that it can be referenced in a probe.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为端口分配一个名称，以便在探测中引用。
- en: '[![2](Images/2.png)](#co_container_probes_CO1-2)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_container_probes_CO1-2)'
- en: Instead of assigning port 3000 again, we simply use the port name.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是再次分配 3000 端口，我们简单地使用端口名称。
- en: 'Create a Pod by pointing the `apply` command to the YAML manifest. During the
    Pod’s startup process, it’s possible that the status shows `Running` but the container
    isn’t ready to accept incoming requests, as indicated by `0/1` in the `READY`
    column:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `apply` 命令指向 YAML 清单来创建一个 Pod。在 Pod 的启动过程中，可能会显示状态为 `Running`，但容器尚未准备好接受传入请求，如
    `READY` 列中的 `0/1` 所示：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Liveness Probe
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存活探针
- en: A liveness probe checks if the application is still working as expected. To
    demonstrate a liveness probe, we’ll use a custom command. A custom command is
    the most flexible way to verify the health of a container, as it allows for calling
    any command available to the container. This can be either a command-line tool
    that comes with the base image or a tool that you install as part of the containerization
    process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃性探针检查应用程序是否按预期工作。为了演示活跃性探针，我们将使用一个自定义命令。自定义命令是验证容器健康状态最灵活的方式，因为它允许调用容器可用的任何命令。这可以是基础镜像中提供的命令行工具，也可以是您作为容器化过程的一部分安装的工具。
- en: In [Example 14-2](#liveness_probe_example), we’ll have the application create
    and update a file, */tmp/heartbeat.txt*, to show that it’s still alive. We’ll
    do this by making it run the Unix `touch` command every five seconds. The probe
    will periodically check if the modification timestamp of the file is older than
    one minute. If it is, then Kubernetes can assume that the application isn’t functioning
    as expected and will restart the container.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 14-2](#liveness_probe_example) 中，我们将使应用程序创建并更新一个文件，*/tmp/heartbeat.txt*，以显示其仍在运行。我们通过每五秒运行
    Unix 的 `touch` 命令来实现这一点。探针将定期检查文件的修改时间戳是否早于一分钟。如果是，则 Kubernetes 可以假定该应用程序未按预期运行，并将重新启动容器。
- en: Example 14-2\. A liveness probe that uses a custom command
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-2\. 使用自定义命令的活跃性探针
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next command uses the YAML manifest shown in [Example 14-2](#liveness_probe_example),
    stored in the file *liveness-probe.yaml*, to create the Pod. Describing the Pod
    renders information on the liveness probe. We can not only inspect the custom
    command and its configuration, but also see how many times the container has been
    restarted upon a probing failure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令使用存储在文件*liveness-probe.yaml*中的[YAML示例 14-2](#liveness_probe_example)清单来创建Pod。描述Pod会呈现有关存活探测的信息。我们不仅可以检查自定义命令及其配置，还可以看到在探测失败时容器已重启的次数：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Startup Probe
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动探测
- en: 'The purpose of a startup probe is to figure out when an application is fully
    started. Defining the probe is useful for an application that takes a long time
    to start up. The kubelet puts the readiness and liveness probes on hold while
    the startup probe is running. A startup probe finishes its operation under one
    of the following conditions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 启动探测的目的是找出应用程序何时完全启动。定义探测对于启动时间较长的应用程序很有用。kubelet在运行启动探测时将暂停就绪和存活探测。启动探测在以下情况下完成其操作：
- en: If it can verify that the application has been started
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果可以验证应用程序已启动
- en: If the application doesn’t respond within the timeout period
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用程序在超时期内没有响应
- en: To demonstrate the functionality of the startup probe, [Example 14-3](#startup_probe_example)
    defines a Pod that runs the [Apache HTTP server](https://hub.docker.com/_/httpd)
    in a container. By default, the image exposes the container port 80, and that’s
    what we’re probing for using a TCP socket connection.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示启动探测的功能，[示例 14-3](#startup_probe_example)定义了一个Pod，在容器中运行[Apache HTTP服务器](https://hub.docker.com/_/httpd)。默认情况下，该镜像公开容器端口80，我们使用TCP套接字连接来探测该端口。
- en: Example 14-3\. A startup probe that uses a TCP socket connection
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-3\. 使用TCP套接字连接的启动探测
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see in the following terminal output, the `describe` command can
    retrieve the configuration of a startup probe as well:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在以下终端输出中所看到的那样，`describe`命令可以检索启动探测的配置：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at all available health probe types you can define
    for a Pod. A health probe is a periodically running mini-process that asks the
    application running in a container for its status. Think of it as taking the pulse
    of your system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了您可以为Pod定义的所有可用健康探测类型。健康探测是定期运行的迷你进程，询问运行在容器中的应用程序的状态。可以将其视为系统的脉搏检测。
- en: The readiness probe ensures that the container accepts incoming traffic only
    if the application runs properly. The liveness probe makes sure that the application
    is functioning as expected and will restart the container if necessary. The startup
    probe pauses a liveness probe until application startup has been completed. In
    practice, you’ll often find that a container defines all three probes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪探测确保容器只接受传入流量，前提是应用程序正常运行。存活探测确保应用程序按预期运行，并在必要时重新启动容器。启动探测暂停存活探测，直到应用程序启动完成。实际上，您通常会发现一个容器定义了这三个探测。
- en: Exam Essentials
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Understand the purpose of all probes
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 理解所有探测的目的
- en: To prepare for this section of the exam, focus on understanding and using health
    probes. You should understand the purpose of startup, readiness, and liveness
    probes and practice how to configure them. In your Kubernetes cluster, try to
    emulate success and failure conditions to see the effects of probes and the actions
    they take.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备本节的考试，专注于理解和使用健康探测。您应理解启动、就绪和存活探测的目的，并练习如何配置它们。在您的Kubernetes集群中，尝试模拟成功和失败的条件，以查看探测的效果和它们采取的操作。
- en: Practice the use of different verification methods
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 练习使用不同的验证方法
- en: You can choose from a variety of verification methods applicable to probes.
    Gain a high-level understanding when to apply which verification method, and how
    to configure each one of them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择多种适用于探测的验证方法。高层次了解何时应用哪种验证方法，以及如何配置每种方法。
- en: Sample Exercises
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_010.xhtml#appendix_a_container_probes).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可在[附录A](app01_split_010.xhtml#appendix_a_container_probes)中找到。
- en: Define a new Pod named `web-server` with the image `nginx:1.23.0` in a YAML
    manifest. Expose the container port 80\. Do not create the Pod yet.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在YAML清单中定义名为`web-server`的新Pod，使用镜像`nginx:1.23.0`。公开容器端口80。暂时不要创建该Pod。
- en: For the container, declare a startup probe of type `httpGet`. Verify that the
    kubelet can make a request to the root context endpoint. Use the default configuration
    for the probe.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于容器，声明一个类型为`httpGet`的启动探针。验证 kubelet 能够请求到根上下文端点。使用探针的默认配置。
- en: For the container, declare a readiness probe of type `httpGet`.Verify that the
    kubelet can make a request to the root context endpoint. Wait five seconds before
    checking for the first time.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于容器，声明一个类型为`httpGet`的就绪探针。验证 kubelet 能够请求到根上下文端点。在首次检查之前等待五秒钟。
- en: For the container, declare a liveness probe of type `httpGet`. Verify that the
    kubelet can make a request to the root context endpoint. Wait 10 seconds before
    checking for the first time. The probe should run the check every 30 seconds.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于容器，声明一个类型为`httpGet`的存活探针。验证 kubelet 能够请求到根上下文端点。在首次检查之前等待十秒钟。探针应每30秒运行一次检查。
- en: Create the Pod and follow the life cycle phases of the Pod during the process.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建 Pod 并在过程中跟踪 Pod 的生命周期阶段。
- en: Inspect the runtime details of the Pod’s probes.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查 Pod 的探针的运行时详细信息。
