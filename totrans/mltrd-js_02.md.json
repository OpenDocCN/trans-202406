["```\nreadFile(filename, (data) => {\n  doSomethingWithData(data, (modifiedData) => {\n    writeFile(modifiedData, () => {\n      console.log('done');\n    });\n  });\n});\n\n// or\n\nconst data = await readFile(filename);\nconst modifiedData = await doSomethingWithData(data);\nawait writeFile(filename);\nconsole.log('done');\n```", "```\nconst worker = new Worker('worker.js');\nworker.postMessage('Hello, world');\n\n// worker.js\nself.onmessage = (msg) => console.log(msg.data);\n```", "```\nimport fs from 'fs/promises';\n\nasync function getNum(filename) {\n  return parseInt(await fs.readFile(filename, 'utf8'), 10);\n}\n\ntry {\n  const numberPromises = [1, 2, 3].map(i => getNum(`${i}.txt`));\n  const numbers = await Promise.all(numberPromises);\n  console.log(numbers[0] + numbers[1] + numbers[2]);\n} catch (err) {\n  console.error('Something went wrong:');\n  console.error(err);\n}\n```", "```\nconst iframe = document.createElement('iframe');\ndocument.body.appendChild(iframe);\nconst FrameObject = iframe.contentWindow.Object; ![1](Images/1.png)\n\nconsole.log(Object === FrameObject); ![2](Images/2.png)\nconsole.log(new Object() instanceof FrameObject); ![3](Images/3.png)\nconsole.log(FrameObject.name); ![4](Images/4.png)\n```", "```\nconst vm = require('vm');\nconst ContextObject = vm.runInNewContext('Object'); ![1](Images/1.png)\n\nconsole.log(Object === ContextObject); ![2](Images/2.png)\nconsole.log(new Object() instanceof ContextObject); ![3](Images/3.png)\nconsole.log(ContextObject.name); ![4](Images/4.png)\n```", "```\n$ top -H -p 81862\ntop - 14:18:49 up 1 day, 23:18,  1 user,  load average: 0.59, 0.82, 0.83\nThreads:   7 total,   0 running,   7 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  2.2 us,  0.0 sy,  0.0 ni, 97.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :  15455.1 total,   2727.9 free,   5520.4 used,   7206.8 buff/cache\nMiB Swap:   2048.0 total,   2048.0 free,      0.0 used.   8717.3 avail Mem\n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n  81862 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.03 node\n  81863 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.00 node\n  81864 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.00 node\n  81865 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.00 node\n  81866 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.00 node\n  81867 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.00 node\n  81868 bengl     20   0  577084  29272  25064 S   0.0   0.2   0:00.00 node\n```", "```\n#include <inttypes.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nuint64_t random64(uint32_t * seed) {\n  uint64_t result;\n  uint8_t * result8 = (uint8_t *)&result; ![1](Images/1.png)\n  for (size_t i = 0; i < sizeof(result); i++) {\n    result8[i] = rand_r(seed);\n  }\n  return result;\n}\n```", "```\nuint64_t sum_digits_squared(uint64_t num) {\n  uint64_t total = 0;\n  while (num > 0) {\n    uint64_t num_mod_base = num % 10;\n    total += num_mod_base * num_mod_base;\n    num = num / 10;\n  }\n  return total;\n}\n\nbool is_happy(uint64_t num) {\n  while (num != 1 && num != 4) {\n    num = sum_digits_squared(num);\n  }\n  return num == 1;\n}\n\nbool is_happycoin(uint64_t num) {\n  return is_happy(num) && num % 10000 == 0;\n}\n```", "```\nint main() {\n  uint32_t seed = time(NULL);\n  int count = 0;\n  for (int i = 1; i < 10000000; i++) {\n    uint64_t random_num = random64(&seed);\n    if (is_happycoin(random_num)) {\n      printf(\"%\" PRIu64 \" \", random_num);\n      count++;\n    }\n  }\n  printf(\"\\ncount %d\\n\", count);\n  return 0;\n}\n```", "```\n$ cc -o happycoin happycoin.c\n$ ./happycoin\n```", "```\n11023541197304510000 ...  [ 167 more entries ] ... 770541398378840000\ncount 169\n```", "```\n#include <pthread.h>\n\nstruct happy_result {\n  size_t count;\n  uint64_t * nums;\n};\n```", "```\nvoid * get_happycoins(void * arg) {\n  int attempts = *(int *)arg; ![1](Images/1.png)\n  int limit = attempts/10000;\n  uint32_t seed = time(NULL);\n  uint64_t * nums = malloc(limit * sizeof(uint64_t));\n  struct happy_result * result = malloc(sizeof(struct happy_result));\n  result->nums = nums;\n  result->count = 0;\n  for (int i = 1; i < attempts; i++) {\n    if (result->count == limit) {\n      break;\n    }\n    uint64_t random_num = random64(&seed);\n    if (is_happycoin(random_num)) {\n      result->nums[result->count++] = random_num;\n    }\n  }\n  return (void *)result;\n}\n```", "```\n#define THREAD_COUNT 4\n\nint main() {\n  pthread_t thread [THREAD_COUNT];\n\n  int attempts = 10000000/THREAD_COUNT;\n  int count = 0;\n  for (int i = 0; i < THREAD_COUNT; i++) {\n    pthread_create(&thread[i], NULL, get_happycoins, &attempts);\n  }\n  for (int j = 0; j < THREAD_COUNT; j++) {\n    struct happy_result * result;\n    pthread_join(thread[j], (void **)&result);\n    count += result->count;\n    for (int k = 0; k < result->count; k++) {\n      printf(\"%\" PRIu64 \" \", result->nums[k]);\n    }\n  }\n  printf(\"\\ncount %d\\n\", count);\n  return 0;\n}\n```", "```\n$ cc -pthread -o happycoin-threads happycoin-threads.c\n$ ./happycoin-threads\n```", "```\n2466431682927540000 ... [ 154 more entries ] ... 15764177621931310000\ncount 156\n```"]