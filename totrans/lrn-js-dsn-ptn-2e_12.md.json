["```\nfunction withStyles(Component) {\n  return props => {\n    const style = { padding: '0.2rem', margin: '1rem' }\n    return <Component style={style} {...props} />\n  }\n}\n\nconst Button = () = <button>Click me!</button>\nconst Text = () => <p>Hello World!</p>\n\nconst StyledButton = withStyles(Button)\nconst StyledText = withStyles(Text)\n```", "```\nfunction withLoader(Element, url) {\n  return props => {};\n}\n```", "```\nimport React, { useEffect, useState } from \"react\";\n\nexport default function withLoader(Element, url) {\n  return (props) => {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n      async function getData() {\n        const res = await fetch(url);\n        const data = await res.json();\n        setData(data);\n      }\n\n      getData();\n    }, []);\n\n    if (!data) {\n      return <div>Loading...</div>;\n    }\n\n    return <Element {...props} data={data} />;\n  };\n}\n```", "```\nimport React from \"react\";\nimport withLoader from \"./withLoader\";\n\nfunction DogImages(props) {\n  return props.data.message.map((dog, index) => (\n    <img src={dog} alt=\"Dog\" key={index} />\n  ));\n}\n\nexport default withLoader(\n  DogImages,\n  \"https://dog.ceo/api/breed/labrador/images/random/6\"\n);\n```", "```\nexport default withHover(\n  withLoader(DogImages, \"https://dog.ceo/api/breed/labrador/images/random/6\")\n);\n```", "```\nfunction withStyles(Component) {\n  return props => {\n    const style = { padding: '0.2rem', margin: '1rem' }\n    return <Component style={style} {...props} />\n  }\n}\n\nconst Button = () = <button style={{ color: 'red' }}>Click me!</button>\nconst StyledButton = withStyles(Button)\n```", "```\nfunction withStyles(Component) {\n  return props => {\n    const style = {\n      padding: '0.2rem',\n      margin: '1rem',\n      ...props.style\n    }\n\n    return <Component style={style} {...props} />\n  }\n}\n\nconst Button = () = <button style={{ color: 'red' }}>Click me!</button>\nconst StyledButton = withStyles(Button)\n```", "```\n<Title render={() => <h1>I am a render prop!</h1>} />\n```", "```\nconst Title = props => props.render();\n```", "```\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\nimport \"./styles.css\";\n\nconst Title = (props) => props.render();\n\nrender(\n  <div className=\"App\">\n    <Title\n      render={() => (\n        <h1>\n          <span role=\"img\" aria-label=\"emoji\">\n            ✨\n          </span>\n          I am a render prop!{\" \"}\n          <span role=\"img\" aria-label=\"emoji\">\n            ✨\n          </span>\n        </h1>\n      )}\n    />\n  </div>,\n  document.getElementById(\"root\")\n);\n```", "```\nconst Title = (props) => (\n  <>\n    {props.renderFirstComponent()}\n    {props.renderSecondComponent()}\n    {props.renderThirdComponent()}\n  </>\n);\n\nrender(\n  <div className=\"App\">\n    <Title\n      renderFirstComponent={() => <h1>First render prop!</h1>}\n      renderSecondComponent={() => <h2> Second render prop!</h2>}\n      renderThirdComponent={() => <h3>Third render prop!</h3>}\n    />\n  </div>,\n  document.getElementById(\"root\")\n);\n```", "```\nfunction Component(props) {\n  const data = { ... }\n\n  return props.render(data)\n}\n```", "```\n<Component render={data => <ChildComponent data={data} />}\n```", "```\nfunction Input({ value, handleChange }) {\n  return <input value={value} onChange={e => handleChange(e.target.value)} />;\n}\nfunction Kelvin({ value = 0 }) {\n  return <div className=\"temp\">{value + 273.15}K</div>;\n}\n\nfunction Fahrenheit({ value = 0 }) {\n  return <div className=\"temp\">{(value * 9) / 5 + 32}°F</div>;\n}\n\nexport default function App() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <h1>Temperature Converter</h1>\n      <Input value={value} handleChange={setValue} />\n      <Kelvin value={value} />\n      <Fahrenheit value={value} />\n    </div>\n  );\n}\n```", "```\nfunction Input(props) {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        placeholder=\"Temp in °C\"\n      />\n      {props.render(value)}\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Temperature Converter</h1>\n      <Input\n        render={value => (\n          <>\n            <Kelvin value={value} />\n            <Fahrenheit value={value} />\n          </>\n        )}\n      />\n    </div>\n  );\n}\n```", "```\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Temperature Converter</h1>\n      <Input>\n        {value => (\n          <>\n            <Kelvin value={value} />\n            <Fahrenheit value={value} />\n          </>\n        )}\n      </Input>\n    </div>\n  );\n}\n```", "```\nfunction Input(props) {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        placeholder=\"Temp in °C\"\n      />\n      {props.children(value)}\n    </>\n  );\n}\n```", "```\nclass MyComponent extends React.Component {\n  // Adding state and binding custom methods\n  constructor() {\n    super()\n    this.state = { ... }\n\n    this.customMethodOne = this.customMethodOne.bind(this)\n    this.customMethodTwo = this.customMethodTwo.bind(this)\n  }\n\n  // Lifecycle Methods\n  componentDidMount() { ...}\n  componentWillUnmount() { ... }\n\n  // Custom methods\n  customMethodOne() { ... }\n  customMethodTwo() { ... }\n\n  render() { return { ... }}\n}\n```", "```\nfunction Button() {\n  return <div className=\"btn\">disabled</div>;\n}\n```", "```\nexport default class Button extends React.Component {\n  constructor() {\n    super();\n    this.state = { enabled: false };\n  }\n\n  render() {\n    const { enabled } = this.state;\n    const btnText = enabled ? \"enabled\" : \"disabled\";\n\n    return (\n      <div\n        className={`btn enabled-${enabled}`}\n        onClick={() => this.setState({ enabled: !enabled })}\n      >\n        {btnText}\n      </div>\n    );\n  }\n}\n```", "```\n<WrapperOne>\n  <WrapperTwo>\n    <WrapperThree>\n      <WrapperFour>\n        <WrapperFive>\n          <Component>\n            <h1>Finally in the component!</h1>\n          </Component>\n        </WrapperFive>\n      </WrapperFour>\n    </WrapperThree>\n  </WrapperTwo>\n</WrapperOne>\n```", "```\nclass Input extends React.Component {\n  constructor() {\n    super();\n    this.state = { input: \"\" };\n\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleInput(e) {\n    this.setState({ input: e.target.value });\n  }\n\n  render() {\n    <input onChange={handleInput} value={this.state.input} />;\n  }\n}\n```", "```\nconst [value, setValue] = React.useState(initialValue);\n```", "```\nconst [input, setInput] = React.useState(\"\");\n```", "```\nfunction Input() {\n  const [input, setInput] = React.useState(\"\");\n\n  return <input onChange={(e) => setInput(e.target.value)} value={input} />;\n}\n```", "```\nimport React, { useState } from \"react\";\n\n  export default function Input() {\n    const [input, setInput] = useState(\"\");\n\n    return (\n      <input\n        onChange={e => setInput(e.target.value)}\n        value={input}\n        placeholder=\"Type something...\"\n      />\n    );\n  }\n```", "```\ncomponentDidMount() { ... }\nuseEffect(() => { ... }, [])\n\ncomponentWillUnmount() { ... }\nuseEffect(() => { return () => { ... } }, [])\n\ncomponentDidUpdate() { ... }\nuseEffect(() => { ... })\n```", "```\nimport React, { useState, useEffect } from \"react\";\n\nexport default function Input() {\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    console.log(`The user typed ${input}`);\n  }, [input]);\n\n  return (\n    <input\n      onChange={e => setInput(e.target.value)}\n      value={input}\n      placeholder=\"Type something...\"\n    />\n  );\n}\n```", "```\nfunction useKeyPress(targetKey) {\n  const [keyPressed, setKeyPressed] = React.useState(false);\n\n  function handleDown({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  function handleUp({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", handleDown);\n    window.addEventListener(\"keyup\", handleUp);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleDown);\n      window.removeEventListener(\"keyup\", handleUp);\n    };\n  }, []);\n\n  return keyPressed;\n}\n```", "```\nimport React from \"react\";\nimport useKeyPress from \"./useKeyPress\";\n\nexport default function Input() {\n  const [input, setInput] = React.useState(\"\");\n  const pressQ = useKeyPress(\"q\");\n  const pressW = useKeyPress(\"w\");\n  const pressL = useKeyPress(\"l\");\n\n  React.useEffect(() => {\n    console.log(`The user pressed Q!`);\n  }, [pressQ]);\n\n  React.useEffect(() => {\n    console.log(`The user pressed W!`);\n  }, [pressW]);\n\n  React.useEffect(() => {\n    console.log(`The user pressed L!`);\n  }, [pressL]);\n\n  return (\n    <input\n      onChange={e => setInput(e.target.value)}\n      value={input}\n      placeholder=\"Type something...\"\n    />\n  );\n}\n```", "```\nclass TweetSearchResults extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        filterText: '',\n        inThisLocation: false\n      };\n\n      this.handleFilterTextChange =\n                this.handleFilterTextChange.bind(this);\n      this.handleInThisLocationChange =\n                this.handleInThisLocationChange.bind(this);\n    }\n\n    handleFilterTextChange(filterText) {\n      this.setState({\n        filterText: filterText\n      });\n    }\n\n    handleInThisLocationChange(inThisLocation) {\n      this.setState({\n        inThisLocation: inThisLocation\n      })\n    }\n\n    render() {\n      return (\n        <div>\n          <SearchBar\n            filterText={this.state.filterText}\n            inThisLocation={this.state.inThisLocation}\n            onFilterTextChange={this.handleFilterTextChange}\n            onInThisLocationChange={this.handleInThisLocationChange}\n          />\n          <TweetList\n            tweets={this.props.tweets}\n            filterText={this.state.filterText}\n            inThisLocation={this.state.inThisLocation}\n          />\n        </div>\n      );\n    }\n  }\n```", "```\nconst TweetSearchResults = ({tweets}) => {\n  const [filterText, setFilterText] = useState('');\n  const [inThisLocation, setInThisLocation] = useState(false);\n  return (\n    <div>\n      <SearchBar\n        filterText={filterText}\n        inThisLocation={inThisLocation}\n        setFilterText={setFilterText}\n        setInThisLocation={setInThisLocation}\n      />\n      <TweetList\n        tweets={tweets}\n        filterText={filterText}\n        inThisLocation={inThisLocation}\n      />\n    </div>\n  );\n}\n```", "```\nimport React from \"react\";\n\n// Statically import Chatlist, ChatInput and UserInfo\nimport UserInfo from \"./components/UserInfo\";\nimport ChatList from \"./components/ChatList\";\nimport ChatInput from \"./components/ChatInput\";\n\nimport \"./styles.css\";\n\nconsole.log(\"App loading\", Date.now());\n\nconst App = () => (\n  <div className=\"App\">\n    <UserInfo />\n    <ChatList />\n    <ChatInput />\n  </div>\n);\n\nexport default App;\n```", "```\nimport React, { Suspense, lazy } from \"react\";\n  // import Send from \"./icons/Send\";\n  // import Emoji from \"./icons/Emoji\";\n  const Send = lazy(() =>\n    import(/*webpackChunkName: \"send-icon\" */ \"./icons/Send\")\n  );\n  const Emoji = lazy(() =>\n    import(/*webpackChunkName: \"emoji-icon\" */ \"./icons/Emoji\")\n  );\n  // Lazy load EmojiPicker  when <EmojiPicker /> renders\n  const Picker = lazy(() =>\n    import(/*webpackChunkName: \"emoji-picker\" */ \"./EmojiPicker\")\n  );\n\n  const ChatInput = () => {\n    const [pickerOpen, togglePicker] = React.useReducer(state => !state, false);\n\n    return (\n      <Suspense fallback={<p id=\"loading\">Loading...</p>}>\n        <div className=\"chat-input-container\">\n          <input type=\"text\" placeholder=\"Type a message...\" />\n          <Emoji onClick={togglePicker} />\n          {pickerOpen && <Picker />}\n          <Send />\n        </div>\n      </Suspense>\n    );\n  };\n\n  console.log(\"ChatInput loaded\", Date.now());\n\n  export default ChatInput;\n```", "```\nimport React from \"react\";\nimport loadable from \"@loadable/component\";\n\nimport Send from \"./icons/Send\";\nimport Emoji from \"./icons/Emoji\";\n\nconst EmojiPicker = loadable(() => import(\"./EmojiPicker\"), {\n  fallback: <div id=\"loading\">Loading...</div>\n});\n\nconst ChatInput = () => {\n  const [pickerOpen, togglePicker] = React.useReducer(state => !state, false);\n\n  return (\n    <div className=\"chat-input-container\">\n      <input type=\"text\" placeholder=\"Type a message...\" />\n      <Emoji onClick={togglePicker} />\n      {pickerOpen && <EmojiPicker />}\n      <Send />\n    </div>\n  );\n};\n\nexport default ChatInput;\n```", "```\nimport React from \"react\";\n  import Send from \"./icons/Send\";\n  import Emoji from \"./icons/Emoji\";\n  import loadable from \"@loadable/component\";\n\n  const EmojiPicker = loadable(() => import(\"./components/EmojiPicker\"), {\n    fallback: <p id=\"loading\">Loading...</p>\n  });\n\n  const ChatInput = () => {\n    const [pickerOpen, togglePicker] = React.useReducer(state => !state, false);\n\n    return (\n      <div className=\"chat-input-container\">\n        <input type=\"text\" placeholder=\"Type a message...\" />\n        <Emoji onClick={togglePicker} />\n        {pickerOpen && <EmojiPicker />}\n        <Send />\n      </div>\n    );\n  };\n\n  console.log(\"ChatInput loaded\", Date.now());\n\n  export default ChatInput;\n```", "```\nimport React from \"react\";\nimport Send from \"./icons/Send\";\nimport Emoji from \"./icons/Emoji\";\nimport LoadableVisibility from \"react-loadable-visibility/react-loadable\";\n\nconst EmojiPicker = LoadableVisibility({\n  loader: () => import(\"./EmojiPicker\"),\n  loading: <p id=\"loading\">Loading</p>\n});\n\nconst ChatInput = () => {\n  const [pickerOpen, togglePicker] = React.useReducer(state => !state, false);\n\n  return (\n    <div className=\"chat-input-container\">\n      <input type=\"text\" placeholder=\"Type a message...\" />\n      <Emoji onClick={togglePicker} />\n      {pickerOpen && <EmojiPicker />}\n      <Send />\n    </div>\n  );\n};\n\nconsole.log(\"ChatInput loading\", Date.now());\n\nexport default ChatInput;\n```", "```\nimport React, { lazy, Suspense } from \"react\";\nimport { render } from \"react-dom\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = lazy(() => import(/* webpackChunkName: \"home\" */ \"./App\"));\nconst Overview = lazy(() =>\n  import(/* webpackChunkName: \"overview\" */ \"./Overview\")\n);\nconst Settings = lazy(() =>\n  import(/* webpackChunkName: \"settings\" */ \"./Settings\")\n);\n\nrender(\n  <Router>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route path=\"/overview\">\n          <Overview />\n        </Route>\n        <Route path=\"/settings\">\n          <Settings />\n        </Route>\n      </Switch>\n    </Suspense>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nmodule.hot.accept();\n```", "```\n<link rel=\"preload\" href=\"emoji-picker.js\" as=\"script\">\n  ...\n  </head>\n  <body>\n    ...\n    <script src=\"stickers.js\" defer></script>\n    <script src=\"video-sharing.js\" defer></script>\n    <script src=\"emoji-picker.js\" defer></script>\n```", "```\nconst EmojiPicker = import(/* webpackPreload: true */ \"./EmojiPicker\");\n```", "```\n<link rel=\"prefetch\" href=\"emoji-picker.bundle.js\" as=\"script\" />\n<link rel=\"prefetch\" href=\"vendors~emoji-picker.bundle.js\" as=\"script\" />\n```", "```\n<link rel=\"preload\" href=\"emoji-picker.js\" as=\"script\" />\n\n<script src=\"emoji-picker.js\" async></script>\n```", "```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst itemsArray = [\n  { name: \"Drake\" },\n  { name: \"Halsey\" },\n  { name: \"Camila Cabello\" },\n  { name: \"Travis Scott\" },\n  { name: \"Bazzi\" },\n  { name: \"Flume\" },\n  { name: \"Nicki Minaj\" },\n  { name: \"Kodak Black\" },\n  { name: \"Tyga\" },\n  { name: \"Bruno Mars\" },\n  { name: \"Lil Wayne\" }, ...\n]; // our data\n\nconst Row = ({ index, style }) => (\n  <div className={index % 2 ? \"ListItemOdd\" : \"ListItemEven\"} style={style}>\n    {itemsArray[index].name}\n  </div>\n);\n\nconst Example = () => (\n  <div\n    style=\n    class=\"List\"\n  >\n    {itemsArray.map((item, index) => Row({ index }))}\n  </div>\n);\n\nReactDOM.render(<Example />, document.getElementById(\"root\"));\n```", "```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FixedSizeList as List } from \"react-window\";\n\nconst itemsArray = [...]; // our data\n\nconst Row = ({ index, style }) => (\n  <div className={index % 2 ? \"ListItemOdd\" : \"ListItemEven\"} style={style}>\n    {itemsArray[index].name}\n  </div>\n);\n\nconst Example = () => (\n  <List\n    className=\"List\"\n    height={150}\n    itemCount={itemsArray.length}\n    itemSize={35}\n    width={300}\n  >\n    {Row}\n  </List>\n);\n\nReactDOM.render(<Example />, document.getElementById(\"root\"));\n```", "```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FixedSizeGrid as Grid } from 'react-window';\n\nconst itemsArray = [\n  [{},{},{},...],\n  [{},{},{},...],\n  [{},{},{},...],\n  [{},{},{},...],\n];\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    className={\n      columnIndex % 2\n        ? rowIndex % 2 === 0\n          ? 'GridItemOdd'\n          : 'GridItemEven'\n        : rowIndex % 2\n          ? 'GridItemOdd'\n          : 'GridItemEven'\n    }\n    style={style}\n  >\n    {itemsArray[rowIndex][columnIndex].name}\n  </div>\n);\n\nconst Example = () => (\n  <Grid\n    className=\"Grid\"\n    columnCount={5}\n    columnWidth={100}\n    height={150}\n    rowCount={5}\n    rowHeight={35}\n    width={300}\n  >\n    {Cell}\n  </Grid>\n);\n\nReactDOM.render(<Example />, document.getElementById('root'));\n```"]