["```\n$ node ./server.js\n```", "```\n$ npm run start\n```", "```\nconst response = await fetch(`/messages/${forum}`)\nif (!response.ok) {\n  const text = await response.text()\n  throw new Error(`Unable to read messages for ${forum}: ${text}`)\n}\nconst body = await response.json()\n```", "```\nconst useMessages = (forum) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n  ....\n  return { data, loading, error }\n}\n```", "```\nconst {\n  data: messages,\n  loading: messagesLoading,\n  error: messagesError,\n} = useMessages('nasa')\n```", "```\nuseEffect(() => {\n  setError(null)\n  if (forum) {\n    ....\n  } else {\n    setData([])\n    setLoading(false)\n  }\n}, [forum])\n```", "```\nimport { useEffect, useState } from 'react'\n\nconst useMessages = (forum) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    let didCancel = false\n    setError(null)\n    if (forum) {\n      ;(async () => {\n        try {\n          setLoading(true)\n          const response = await fetch(`/messages/${forum}`)\n          if (!response.ok) {\n            const text = await response.text()\n            throw new Error(\n              `Unable to read messages for ${forum}: ${text}`\n            )\n          }\n          const body = await response.json()\n          if (!didCancel) {\n            setData(body)\n          }\n        } catch (err) {\n          setError(err)\n        } finally {\n          setLoading(false)\n        }\n      })()\n    } else {\n      setData([])\n      setLoading(false)\n    }\n    return () => {\n      didCancel = true\n    }\n  }, [forum])\n\n  return { data, loading, error }\n}\n\nexport default useMessages\n```", "```\nimport './App.css'\nimport { useState } from 'react'\nimport useMessages from './useMessages'\n\nfunction App() {\n  const [forum, setForum] = useState('nasa')\n  const {\n    data: messages,\n    loading: messagesLoading,\n    error: messagesError,\n  } = useMessages(forum)\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => setForum('nasa')}>NASA</button>\n      <button onClick={() => setForum('notNasa')}>Not NASA</button>\n      {messagesError ? (\n        <div className=\"error\">\n          Something went wrong:\n          <div className=\"error-contents\">\n            {messagesError.message}\n          </div>\n        </div>\n      ) : messagesLoading ? (\n        <div className=\"loading\">Loading...</div>\n      ) : messages && messages.length ? (\n        <dl>\n          {messages.map((m) => (\n            <>\n              <dt>{m.author}</dt>\n              <dd>{m.text}</dd>\n            </>\n          ))}\n        </dl>\n      ) : (\n        'No messages'\n      )}\n    </div>\n  )\n}\n\nexport default App\n```", "```\nconst {\n  data: messages,\n  loading: messagesLoading,\n  error: messagesError,\n} = useMessages('nasa')\nconst [text, setText] = useState()\nconst [author, setAuthor] = useState()\nconst [createMessageError, setCreateMessageError] = useState()\n// Other code here...\n<input\n  type=\"text\"\n  value={author}\n  placeholder=\"Author\"\n  onChange={(evt) => setAuthor(evt.target.value)}\n/>\n<textarea\n  value={text}\n  placeholder=\"Message\"\n  onChange={(evt) => setText(evt.target.value)}\n/>\n<button\n  onClick={async () => {\n    try {\n      await [code to post message here]\n      setText('')\n      setAuthor('')\n    } catch (err) {\n      setCreateMessageError(err)\n    }\n  }}\n>\n  Post\n</button>\n```", "```\nconst [stateVersion, setStateVersion] = useState(0)\n```", "```\n// code to post a new message here\nsetStateVersion((v) => v + 1)\n```", "```\nuseEffect(() => {\n  setError(null)\n  if (forum) {\n    // Code to read /messages/:forum\n  } else {\n    setData([])\n    setLoading(false)\n  }\n}, [forum, stateVersion])\n```", "```\nimport './App.css'\nimport { useState } from 'react'\nimport useMessages from './useMessages'\n\nfunction App() {\n  const [forum, setForum] = useState('nasa')\n  const {\n    data: messages,\n    loading: messagesLoading,\n    error: messagesError,\n  } = useMessages(forum)\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => setForum('nasa')}>NASA</button>\n      <button onClick={() => setForum('notNasa')}>Not NASA</button>\n      {messagesError ? (\n        <div className=\"error\">\n          Something went wrong:\n          <div className=\"error-contents\">\n            {messagesError.message}\n          </div>\n        </div>\n      ) : messagesLoading ? (\n        <div className=\"loading\">Loading...</div>\n      ) : messages && messages.length ? (\n        <dl>\n          {messages.map((m) => (\n            <>\n              <dt>{m.author}</dt>\n              <dd>{m.text}</dd>\n            </>\n          ))}\n        </dl>\n      ) : (\n        'No messages'\n      )}\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport { useCallback, useEffect, useState } from 'react'\n\nconst useForum = (forum) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n  const [creating, setCreating] = useState(false)\n  const [stateVersion, setStateVersion] = useState(0)\n\n  const create = useCallback(\n    async (message) => {\n      try {\n        setCreating(true)\n        const response = await fetch(`/messages/${forum}`, {\n          method: 'POST',\n          body: JSON.stringify(message),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n          },\n        })\n        if (!response.ok) {\n          const text = await response.text()\n          throw new Error(\n            `Unable to create a ${forum} message: ${text}`\n          )\n        }\n        setStateVersion((v) => v + 1)\n      } finally {\n        setCreating(false)\n      }\n    },\n    [forum]\n  )\n\n  useEffect(() => {\n    let didCancel = false\n    setError(null)\n    if (forum) {\n      ;(async () => {\n        try {\n          setLoading(true)\n          const response = await fetch(`/messages/${forum}`)\n          if (!response.ok) {\n            const text = await response.text()\n            throw new Error(\n              `Unable to read messages for ${forum}: ${text}`\n            )\n          }\n          const body = await response.json()\n          if (!didCancel) {\n            setData(body)\n          }\n        } catch (err) {\n          setError(err)\n        } finally {\n          setLoading(false)\n        }\n      })()\n    } else {\n      setData([])\n      setLoading(false)\n    }\n    return () => {\n      didCancel = true\n    }\n  }, [forum, stateVersion])\n\n  return { data, loading, error, create, creating }\n}\n\nexport default useForum\n```", "```\nimport './App.css'\nimport { useState } from 'react'\nimport useForum from './useForum'\n\nfunction App() {\n  const {\n    data: messages,\n    loading: messagesLoading,\n    error: messagesError,\n    create: createMessage,\n    creating: creatingMessage,\n  } = useForum('nasa')\n  const [text, setText] = useState()\n  const [author, setAuthor] = useState()\n  const [createMessageError, setCreateMessageError] = useState()\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        value={author}\n        placeholder=\"Author\"\n        onChange={(evt) => setAuthor(evt.target.value)}\n      />\n      <textarea\n        value={text}\n        placeholder=\"Message\"\n        onChange={(evt) => setText(evt.target.value)}\n      />\n      <button\n        onClick={async () => {\n          try {\n            await createMessage({ author, text })\n            setText('')\n            setAuthor('')\n          } catch (err) {\n            setCreateMessageError(err)\n          }\n        }}\n        disabled={creatingMessage}\n      >\n        Post\n      </button>\n      {createMessageError ? (\n        <div className=\"error\">\n          Unable to create message\n          <div className=\"error-contents\">\n            {createMessageError.message}\n          </div>\n        </div>\n      ) : null}\n      {messagesError ? (\n        <div className=\"error\">\n          Something went wrong:\n          <div className=\"error-contents\">\n            {messagesError.message}\n          </div>\n        </div>\n      ) : messagesLoading ? (\n        <div className=\"loading\">Loading...</div>\n      ) : messages && messages.length ? (\n        <dl>\n          {messages.map((m) => (\n            <>\n              <dt>{m.author}</dt>\n              <dd>{m.text}</dd>\n            </>\n          ))}\n        </dl>\n      ) : (\n        'No messages'\n      )}\n    </div>\n  )\n}\n\nexport default App\n```", "```\n$ npm install axios\n```", "```\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nconst useSearch = (terms) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    setError(null)\n    if (terms) {\n      ;(async () => {\n        try {\n          setLoading(true)\n          const response = await axios.get('/search', {\n            params: { terms },\n          })\n          setData(response.data)\n        } catch (err) {\n          setError(err)\n        } finally {\n          setLoading(false)\n        }\n      })()\n    } else {\n      setData([])\n      setLoading(false)\n    }\n  }, [terms])\n\n  return { data, loading, error }\n}\n\nexport default useSearch\n```", "```\nconst source = axios.CancelToken.source()\n```", "```\nconst response = await axios.get('/search', {\n  params: { terms },\n  cancelToken: source.token,\n})\n```", "```\nsource.cancel('axios request canceled')\n```", "```\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nconst useCancelableSearch = (terms) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    setError(null)\n    if (terms) {\n      const source = axios.CancelToken.source()\n      ;(async () => {\n        try {\n          setLoading(true)\n          const response = await axios.get('/search', {\n            params: { terms },\n            cancelToken: source.token,\n          })\n          setData(response.data)\n        } catch (err) {\n          setError(err)\n        } finally {\n          setLoading(false)\n        }\n      })()\n\n      return () => {\n        source.cancel('axios request cancelled')\n      }\n    } else {\n      setData([])\n      setLoading(false)\n    }\n  }, [terms])\n\n  return { data, loading, error }\n}\n\nexport default useCancelableSearch\n```", "```\n{\n  \"type\": \"SEARCH\",\n  \"payload\": \"Some search text\"\n}\n```", "```\nimport axios from 'axios'\n\nconst axiosMiddleware = (store) => (next) => (action) => {\n  if (action.type === 'SEARCH') {\n    const terms = action.payload\n    if (terms) {\n      ;(async () => {\n        try {\n          store.dispatch({\n            type: 'SEARCH_RESULTS',\n            payload: {\n              loading: true,\n              data: null,\n              error: null,\n            },\n          })\n          const response = await axios.get('/search', {\n            params: { terms },\n          })\n          store.dispatch({\n            type: 'SEARCH_RESULTS',\n            payload: {\n              loading: false,\n              error: null,\n              data: response.data,\n            },\n          })\n        } catch (err) {\n          store.dispatch({\n            type: 'SEARCH_RESULTS',\n            payload: {\n              loading: false,\n              error: err,\n              data: null,\n            },\n          })\n        }\n      })()\n    }\n  }\n  return next(action)\n}\nexport default axiosMiddleware\n```", "```\nstore.dispatch({\n  type: 'SEARCH_RESULTS',\n  payload: {\n    loading: ...,\n    error: ...,\n    data: ...\n  },\n})\n```", "```\nconst reducer = (state, action) => {\n  if (action.type === 'SEARCH_RESULTS') {\n    return {\n      ...state,\n      searchResults: { ...action.payload },\n    }\n  }\n  return { ...state }\n}\n\nexport default reducer\n```", "```\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport './App.css'\n\nimport reducer from './reducer'\nimport Search from './Search'\nimport axiosMiddleware from './axiosMiddleware'\n\nconst store = createStore(reducer, applyMiddleware(axiosMiddleware))\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Search />\n      </Provider>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport './App.css'\nimport { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst Search = () => {\n  const [terms, setTerms] = useState()\n  const {\n    data: results,\n    error,\n    loading,\n  } = useSelector((state) => state.searchResults || {})\n  const dispatch = useDispatch()\n\n  return (\n    <div className=\"App\">\n      <input\n        placeholder=\"Search...\"\n        type=\"text\"\n        value={terms}\n        onChange={(e) => {\n          setTerms(e.target.value)\n          dispatch({\n            type: 'SEARCH',\n            payload: e.target.value,\n          })\n        }}\n      />\n      {error ? (\n        <p>Error: {error.message}</p>\n      ) : loading ? (\n        <p>Loading...</p>\n      ) : results && results.length ? (\n        <table>\n          <thead>\n            <tr>\n              <th>City</th>\n              <th>State</th>\n            </tr>\n          </thead>\n          {results.map((r) => (\n            <tr>\n              <td>{r.name}</td>\n              <td>{r.state}</td>\n            </tr>\n          ))}\n        </table>\n      ) : (\n        <p>No results</p>\n      )}\n    </div>\n  )\n}\nexport default Search\n```", "```\ntype Query {\n    messages: [Message]\n}\n\ntype Message {\n    id: ID!\n    author: String!\n    text: String!\n}\n\ntype Mutation {\n    addMessage(\n        author: String!\n        text: String!\n    ): Message\n}\n```", "```\n$ npm install apollo-server\n$ npm install graphql\n$ npm install require-text\n```", "```\nconst { ApolloServer } = require('apollo-server')\nconst requireText = require('require-text')\n\nconst typeDefs = requireText('./schema.graphql', require)\n\nconst messages = [\n  {\n    id: 0,\n    author: 'SC',\n    text: 'Rolls complete and a pitch is program. One BRAVO.',\n  },\n  {\n    id: 1,\n    author: 'PAO',\n    text: 'One BRAVO is an abort control model. Altitude is 2 miles.',\n  },\n  {\n    id: 2,\n    author: 'CAPCOM',\n    text: 'All is well at Houston. You are good at 1 minute.',\n  },\n]\n\nconst resolvers = {\n  Query: {\n    messages: () => messages,\n  },\n  Mutation: {\n    addMessage: (parent, message) => {\n      const item = { id: messages.length + 1, ...message }\n      messages.push(item)\n      return item\n    },\n  },\n}\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n})\n\nserver.listen({ port: 5000 }).then(({ url }) => {\n  console.log(Launched at ${url}!)\n})\n```", "```\n$ node ./server.js\n```", "```\n$ npm install @apollo/client\n```", "```\nimport './App.css'\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n} from '@apollo/client'\nimport Forum from './Forum'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000',\n  cache: new InMemoryCache(),\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Forum />\n      </ApolloProvider>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nquery Messages {\n  messages {\n    author text\n  }\n}\n```", "```\nmutation AddMessage(\n  $author: String!\n  $text: String!\n) {\n  addMessage(\n    author: $author\n    text: $text\n  ) {\n    author\n    text\n  }\n}\n```", "```\nawait addMessage({\n  variables: { author, text },\n  refetchQueries: ['Messages'],\n})\n```", "```\nimport { gql, useMutation, useQuery } from '@apollo/client'\nimport { useState } from 'react'\n\nconst MESSAGES = gql`\n  query Messages {\n    messages {\n      author\n      text\n    }\n  }\n`\n\nconst ADD_MESSAGE = gql`\n  mutation AddMessage($author: String!, $text: String!) {\n    addMessage(author: $author, text: $text) {\n      author\n      text\n    }\n  }\n`\n\nconst Forum = () => {\n  const {\n    loading: messagesLoading,\n    error: messagesError,\n    data,\n  } = useQuery(MESSAGES)\n  const [addMessage] = useMutation(ADD_MESSAGE)\n  const [text, setText] = useState()\n  const [author, setAuthor] = useState()\n\n  const messages = data && data.messages\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        value={author}\n        placeholder=\"Author\"\n        onChange={(evt) => setAuthor(evt.target.value)}\n      />\n      <textarea\n        value={text}\n        placeholder=\"Message\"\n        onChange={(evt) => setText(evt.target.value)}\n      />\n      <button\n        onClick={async () => {\n          try {\n            await addMessage({\n              variables: { author, text },\n              refetchQueries: ['Messages'],\n            })\n            setText('')\n            setAuthor('')\n          } catch (err) {}\n        }}\n      >\n        Post\n      </button>\n      {messagesError ? (\n        <div className=\"error\">\n          Something went wrong:\n          <div className=\"error-contents\">\n            {messagesError.message}\n          </div>\n        </div>\n      ) : messagesLoading ? (\n        <div className=\"loading\">Loading...</div>\n      ) : messages && messages.length ? (\n        <dl>\n          {messages.map((m) => (\n            <>\n              <dt>{m.author}</dt>\n              <dd>{m.text}</dd>\n            </>\n          ))}\n        </dl>\n      ) : (\n        'No messages'\n      )}\n    </div>\n  )\n}\nexport default Forum\n```", "```\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nconst useSearch = (terms) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    let didCancel = false\n    setError(null)\n    if (terms) {\n      ;(async () => {\n        try {\n          setLoading(true)\n          const response = await axios.get('/search', {\n            params: { terms },\n          })\n          if (!didCancel) {\n            setData(response.data)\n          }\n        } catch (err) {\n          setError(err)\n        } finally {\n          setLoading(false)\n        }\n      })()\n    } else {\n      setData([])\n      setLoading(false)\n    }\n    return () => {\n      didCancel = true\n    }\n  }, [terms])\n\n  return { data, loading, error }\n}\nexport default useSearch\n```", "```\nconst newTimer = setTimeout(SOMEFUNCTION, 500)\n```", "```\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nconst useDebouncedSearch = (terms) => {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    setError(null)\n    if (terms) {\n      const newTimer = setTimeout(() => {\n        ;(async () => {\n          try {\n            setLoading(true)\n            const response = await axios.get('/search', {\n              params: { terms },\n            })\n            setData(response.data)\n          } catch (err) {\n            setError(err)\n          } finally {\n            setLoading(false)\n          }\n        })()\n      }, 500)\n      return () => clearTimeout(newTimer)\n    } else {\n      setData([])\n      setLoading(false)\n    }\n  }, [terms])\n\n  return { data, loading, error }\n}\n\nexport default useDebouncedSearch\n```", "```\n() => clearTimeout(newTimer)\n```"]