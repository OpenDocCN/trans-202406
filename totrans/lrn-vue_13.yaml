- en: Chapter 13\. Server-Side Rendering with Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to set up our Vue application’s complete
    CI/CD pipeline. We also learned how to deploy our application using Netlify for
    production. Our application is now ready for users to access via the web. With
    that, we have almost finished our journey with learning Vue. This chapter will
    explore the other aspect of using Vue, the server-side rendering and static site
    generation with Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Client-Side Rendering in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Vue applications are for client-side rendering, with a placeholder
    `index.html` file, JavaScript file (usually compiled in chunks by Vite for performance
    optimization), and other files like CSS, icons, images, etc., for a complete UI
    experience. In the initial load, the browser sends a request to the server for
    the `index.html` file. In return, the server will deliver the original placeholder
    file (often with a single element with a unique id selector `app` for the Vue
    engine to mount the app instance, and a `script` tag pointing to the required
    JavaScript file containing the main code. Once the browser receives the HTML file,
    it will start parsing and request additional resources, such as the desired `main.js`
    file, then execute it to render the rest of the content accordingly ([Figure 13-1](#figure_chap12_02)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of a HTML placeholder file containing a single div with id of
    app, and a script tag containing the main code](assets/lvue_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. Flow of rendering a client-side Vue application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From this point on, the application finishes initialization, and the user can
    start interacting with it. Vue will dynamically handle the view-changing requests
    by users with the built-in routing system. However, if you right-click the page
    and select *View page source*, you will see only the code of the original root
    `index.html` file but not the current UI view. This behavior can be problematic,
    especially when building a website or an app that requires good Search Engine
    Optimization^([1](ch13.html#id1755)) (SEO).
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the process of loading and executing JavaScript code before displaying
    any content to the user can cause a long waiting time for the user due to factors
    such as heavyweight JavaScript files to download, slow networks, the amount of
    time the browser takes to paint the content (First Paint), etc. As a result, the
    whole process can lead to a slow Time To Interactive^([2](ch13.html#id1756)) (TTI)
    and a slow First Contentful Paint^([3](ch13.html#id1757)) (FCP). All of these
    factors affect the overall app performance and user experience and often are challenging
    to fix.
  prefs: []
  type: TYPE_NORMAL
- en: In such scenarios, there may be better choices than client-side rendering applications,
    such as server-side rendering, which we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Server-Side Rendering (SSR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As its name indicates, server-side rendering (SSR) is an approach to compile
    everything on the server side into a fully working HTML page and then deliver
    to the client side (browser) on demand, instead of performing on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To develop a local SSR Vue application, we will need a local server to communicate
    with the browser and handle all the data requests. We can do this by installing
    Express.js^([4](ch13.html#id1766)) as our project’s dependency with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once this is installed, we can create a `server.js` file in our project’s root
    directly with the code in [Example 13-1](#server-js) to set up our local server.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-1\. The `server.js` file for the local server
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_server_side_rendering_with_vue_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `server` instance
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_server_side_rendering_with_vue_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Define the handler for any request for the entry URL *“/”*
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_server_side_rendering_with_vue_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The handler will return a string acting as an HTML page that displays *Vue SSR
    Demo* on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_server_side_rendering_with_vue_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We set up the local server to run and listen at port 3000.
  prefs: []
  type: TYPE_NORMAL
- en: Within the project’s root directory, we can start our local server using the
    `node server.js` command. Once our server is ready, we must create our application
    on the server with the method `createSSRApp` from the `vue` package. For example,
    let’s compose a Vue application that displays a digital clock with the current
    date and time in a dedicated file, `app.js`, with the code in [Example 13-2](#app-js).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-2\. The `app.js` file for the Digital Clock application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_server_side_rendering_with_vue_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We define the options for our main application’s component, App.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_server_side_rendering_with_vue_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use `createSSRApp()` to build the application on the server side with `App`
    options.
  prefs: []
  type: TYPE_NORMAL
- en: This file exposes a single method, `createApp()`, to use in both server and
    client, returning a Vue instance ready for mounting.
  prefs: []
  type: TYPE_NORMAL
- en: In our `server.js` file, we will use this `createApp()` from `app.js` to create
    the server-side app instance and render it into an HTML formatted string with
    the `renderToString()` method from the `vue/server-renderer` package. Once `renderToString()`
    resolves with a content string, we will replace the content in the returned response
    with it, as shown in [Example 13-3](#update-server-js).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-3\. Update `server.js` to render the app instance into an HTML string
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_server_side_rendering_with_vue_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: App instance creation with `createApp()`
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_server_side_rendering_with_vue_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Place the generated HTML string from `renderToString()` within a `div` of `#app`
    as its id.
  prefs: []
  type: TYPE_NORMAL
- en: When we head to *[*http://locahost:3000/*](http://locahost:3000/)*, we will
    see the browser displays only the title, *Digital Clock* ([Figure 13-2](#figure_ch12_clock_empty)),
    with the fields `date` and `time` empty.
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital Clock](assets/lvue_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. Empty Digital Clock
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This behavior happens because we only generate the HTML static code to return
    to the client side, but no Vue is available in the browser. The same goes for
    any interactive behavior, such as the `onClick` event handler. To solve this interactive
    problem, we need to mount our app in hydration mode, allowing Vue to take over
    the static HTML and make it interactive and dynamic once the HTML is available
    on the browser side. We can do this by defining an `entry-client.js`, which will
    use the `createApp()` from `app.js` to get the app instance. The browser will
    execute this file and mount the Vue instance to the correct element in the DOM
    ([Example 13-4](#entry-client-js)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-4\. The `entry-client.js` file for mounting the app instance in hydration
    mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We will also update the `server.js` file to load the `entry-client.js` file
    in the browser using the `<script>` tag, and enable serving client files in the
    browser ([Example 13-5](#update-server-js-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-5\. Update `server.js` to load `entry-client.js` in the browser
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_server_side_rendering_with_vue_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Load the source for the `vue` package using `importmap`
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_server_side_rendering_with_vue_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Load the `entry-client.js` file in the browser using a `<script>` tag
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_server_side_rendering_with_vue_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Enable serving client files in the browser
  prefs: []
  type: TYPE_NORMAL
- en: When we restart the server and refresh the browser, we will see the clock displayed
    with the updated date and time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital Clock](assets/lvue_1303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-3\. Digital Clock
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using DOM API and Node API in SSR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can’t use DOM APIs and web APIs in SSR, since those are browser-only APIs.
    You also can’t use Node API for client-side components only, such as `fs` for
    file reader.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to create a simple SSR Vue application. Nevertheless, when
    we need to handle a more complex application, such as using Vue SFC, code splitting,
    Vue Router, which may require `window` API, and so on, we may need to build an
    engine to handle application code bundling, rendering with the right bundled code,
    wrapping Vue Router to work, etc., which can be a tedious task.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can use a framework that already provides this engine, such as Nuxt.js,
    discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Server-Side Rendering with Nuxt.Js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nuxt.js (Nuxt) is an open source modular-based SSR framework built on Vue. It
    offers many features out of the box, such as file-based routing systems, performance
    optimization, different build mode, etc., while focusing on the developer’s experience
    ([Figure 13-4](#figure_ch12_nuxtjs)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Nuxt.js Official Website](assets/lvue_1304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-4\. Nuxt.js official website
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As a modular-based framework, the Nuxt package acts as the core, where we can
    plug other Nuxt-supported modules into the app to extend an application’s core
    functionality. You can find the list of available Nuxt modules at [Nuxt modules
    official documentation](https://oreil.ly/hkdnj), including modules for SEO, PWA,
    i18n, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Visit [Nuxt’s official documentation](https://oreil.ly/1B2vg) to learn more
    about its API documentation, installation, and primary use cases for reference.
    At the time of writing, Nuxt 3.4.2 is the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will create our Pizza House application featured in [Chapter 8](ch08.html#unique_chapter_id_07)
    using Nuxt. We will start with the following command to create a new Nuxt application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`pizza-house` is our project name, and `nuxi` is the Nuxt CLI that will scaffold
    a Nuxt application with the following main files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.vue`'
  prefs: []
  type: TYPE_NORMAL
- en: The root component for the application.
  prefs: []
  type: TYPE_NORMAL
- en: '`nuxt.config.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file for Nuxt, including setting up the plugins, CSS path,
    application metadata, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Nuxt will create the application with TypeScript support by default.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt will also create script commands for building and running the application
    locally in `package.json`, as seen in [Example 13-6](#package_json).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-6\. The `package.json` file for Nuxt application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After running the `yarn` command to install the dependencies, we can run the
    `yarn dev` command to start the application locally and visit *http://localhost:3000*
    to see the default Nuxt landing page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Nuxt supports file-based routing using the `pages` folder, we will now
    define our routing systems under this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: index.vue
  prefs: []
  type: TYPE_NORMAL
- en: The home page for the application. Nuxt will automatically map this page to
    the root path (*/*).
  prefs: []
  type: TYPE_NORMAL
- en: pizzas/index.vue
  prefs: []
  type: TYPE_NORMAL
- en: The page displaying the list of pizzas, with the path */pizzas*.
  prefs: []
  type: TYPE_NORMAL
- en: pizzas/[id].vue
  prefs: []
  type: TYPE_NORMAL
- en: This is a dynamic nested page, where `[id]` is the placeholder for the pizza’s
    id for displaying the pizza details. Nuxt will automatically map this page to
    the path */pizzas/:id*, such as */pizza/1*, */pizza/2*, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to replace the content of `app.vue` with the code in [Example 13-7](#update-app-vue)
    to have the routing system working.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-7\. Update `app.vue` to use Nuxt’s layout and page components
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`NuxtLayout` is the layout component for the application, and `NuxtPage` is
    the page component for the application. Nuxt will replace these components with
    the defined pages and layout components automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add the code from [Example 13-8](#ch12-example-pizzas-home) to `pages/index.vue`
    to display the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-8\. Home page for the Pizza House application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And the code from [Example 13-9](#ch12-example-pizzas-list) to `pages/pizzas/index.vue`
    to display the list of pizzas.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-9\. Pizzas page for the Pizza House application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This page uses the `PizzaCard` component from [Example 11-1](ch11.html#ch10_pizza_card)
    and the `usePizzas` composable from `composables/usePizzas.ts` to get a list of
    pizzas for displaying, with the code from [Example 13-10](#ch12-example-pizzas-composable).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-10\. Composable for the Pizza House application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When we run the application using `yarn dev`, we will see the home page ([Figure 13-5](#figure_ch12_nuxt_home))
    and the pizzas page ([Figure 13-6](#figure_ch12_nuxt_pizzas)), respectively, displayed
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Home page for the Pizza House application](assets/lvue_1305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-5\. Home page for the Pizza House application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Pizzas page for the Pizza House application](assets/lvue_1306.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-6\. Pizzas page for the Pizza House application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now we will implement the pizza details page by adding the code from [Example 13-11](#ch12-example-pizzas-details)
    to `pages/pizzas/[id].vue`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-11\. Pizza details component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_server_side_rendering_with_vue_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Use `useRoute`, the global composable from Vue Router, to get the current route’s
    information.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_server_side_rendering_with_vue_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`route.params.id` is the id of the pizza in the URL.'
  prefs: []
  type: TYPE_NORMAL
- en: When we go to */pizzas/1*, we will see the pizza details page displayed in the
    browser ([Figure 13-7](#figure_ch12_nuxt_pizza_details)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Details page for pizza of id 1](assets/lvue_1307.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-7\. The details page of pizza with id 1
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Unlike a regular Vue application, we can’t map the routing params `id` to the
    `id` props of the `PizzaDetails` component. Instead, we need to use the `useRoute`
    composable to get the current route’s information, including its parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement a default layout for our application with a navigation
    bar. We will create a new file, `layouts/default.vue`, with the code from [Example 13-12](#ch12-example-default-layout).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-12\. Default layout for the Pizza House application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_server_side_rendering_with_vue_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`NuxtLink` is the Nuxt component for rendering link elements, similar to `RouterLink`
    in Vue Router.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_server_side_rendering_with_vue_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`<slot />` is the slot element to render the page’s content.'
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt will replace `NuxtLayout` with the default layout, and we will see the
    navigation bar displayed in the browser ([Figure 13-8](#figure_ch12_nuxt_default_layout)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Default layout for the Pizza House application](assets/lvue_1308.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-8\. Default layout for the Pizza House application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can also create different layout files in `layouts` and pass the desired
    layout file name to the props `name` of `NuxtLayout`. Nuxt will pick up the suitable
    layout component to render based on its value. For example, we can create a new
    layout file, `layouts/pizzas.vue`, with the code from [Example 13-13](#ch12-example-pizzas-layout).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-13\. Pizzas layout for the Pizza House application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In `app.vue`, we will pass the layout name to the `name` props of `NuxtLayout`
    conditionally ([Example 13-14](#ch12-example-pizzas-layout-app)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-14\. Using pizzas layout for PizzaDetails component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When we head to */pizzas/1*, we will see the pizza details page rendered with
    the `layouts/pizzas` layout ([Figure 13-9](#figure_ch12_nuxt_pizza_details_pizzas_layout)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Apart from the `pages` structure, the rest of the application structure is the
    same as a regular Vue application. Hence, converting a Vue application to a Nuxt
    application is straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: With SSR, we can achieve a quicker initial page load and better SEO since the
    browser receives our app’s fully populated HTML file. However, a disadvantage
    of SSR is that with every browser refresh, the app requires complete reloading,
    compared to the client-side rendering with single-page application approach.^([5](ch13.html#id1798))
  prefs: []
  type: TYPE_NORMAL
- en: '![Pizza details page rendered with pizzas layout](assets/lvue_1309.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-9\. Pizza details page rendered with custom layout
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In addition, since SSR requires populating the page content dynamically on the
    server before returning the page content file to the browser, it can lead to a
    delay in rendering the page, and any interaction that requires page content changes
    can cause multiple server requests, affecting the app’s performance overall. We
    can use the static side generator (SSG) approach to address this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Static Side Generator (SSG)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The static side generator (SSG) is a type of server-side rendering. Unlike regular
    server-side rendering, SSG will generate and index all the pages in the application
    at build time, and serve those pages to the browser on demand. By doing so, it
    ensures the initial load and the performance on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This approach is suitable for applications that don’t require dynamic content,
    such as blogs, documentation, etc. However, if your application contains dynamic
    content such as user-generated content (authentication, etc.), consider using
    SSR or a [hybrid approach](https://oreil.ly/zqTn1) instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using SSG in Nuxt is straightforward. We can use the `yarn generate` command,
    in the same codebase. This command will generate the static files for the application
    in the `dist` directory, ready for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The `generate` command will generate the static files for the application in
    the `.output/public` directory, ready for deployment ([Figure 13-10](#figure_ch12_output_ssg)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the build result after running yarn generate](assets/lvue_1310.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-10\. The `.output` directory after running `yarn generate`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: That’s all it takes. The last step is to deploy the `dist` directory to a static
    hosting service, such as Netlify, Vercel, etc. These hosting platforms will deliver
    the static files to the browser on demand using a Content Delivery Network (CDN)
    with caches.
  prefs: []
  type: TYPE_NORMAL
- en: Last Words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build SSR and SSG applications with Nuxt.
    With that, we end our journey together in this book.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered all the basics of Vue, including the core concepts, the Options
    API, the lifecycle of a Vue component, and how to use the Composition API effectively
    to create a robust and reusable component system in a Vue application. We also
    learned how to integrate Vue Router and Pinia to create a fully working Vue application
    with routings and data state management. We explored different aspects of developing
    a flow for a Vue application, from unit testing with Vitest and E2E testing with
    Playwright to creating a deployment pipeline with GitHub workflows and hosting
    using Netlify.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to explore more advanced Vue topics, and you have the necessary
    skills to build your own Vue projects. So, where should you go from here? A variety
    of possibilities await you. Start building your Vue applications and explore the
    Vue ecosystem further. If you want to develop content-based sites, consider digging
    deeper into Nuxt. If you are into making a UI library for Vue, check out Vite
    and design systems concepts like atomic design.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of your choice, the skills you have learned in Vue will always be
    handy on your journey to becoming a great frontend engineer and Vue developer.
    Hopefully this book will be your companion as a reference and foundation along
    the way.
  prefs: []
  type: TYPE_NORMAL
- en: Developing web applications, especially with Vue, is fun and exciting. Start
    creating and share what you achieve!
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch13.html#id1755-marker)) SEO is the process of making your app better
    for search engines to index in the search results.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch13.html#id1756-marker)) The time when the user can interact with the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch13.html#id1757-marker)) The first time when content is visible to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch13.html#id1766-marker)) Express.js is a Node.js web application framework.
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch13.html#id1798-marker)) Single-page application is an approach to dynamically
    replace the current view with new data without the need to reload the entire page.
  prefs: []
  type: TYPE_NORMAL
