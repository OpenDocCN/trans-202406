["```\ntsc index.ts --noEmit\n```", "```\ntsc -p path/to/tsconfig.json\n```", "```\ntsc --init\n```", "```\n{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n    // ...\n  }\n}\n```", "```\n{\n  \"include\": [\"src\"]\n}\n```", "```\n{\n  \"include\": [\n    \"typings/**/*.d.ts\",\n    \"src/**/*??.*\"\n  ]\n}\n```", "```\n{\n  \"exclude\": [\"**/external\", \"node_modules\"],\n  \"include\": [\"src\"]\n}\n```", "```\nconst MyComponent = () => {\n  // Equivalent to:\n  //   return React.createElement(\"div\", null, \"Hello, world!\");\n  return <div>Hello, world!</div>;\n};\n```", "```\ntsc --jsx preserve\n```", "```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\"\n  }\n}\n```", "```\nconst identity = <T>(input: T) => input;\n//               ~~~\n// Error: JSX element 'T' has no corresponding closing tag.\n```", "```\nconst identity = <T = unknown>(input: T) => input; // Ok\n```", "```\n// activist.json\n{\n  \"activist\": \"Mary Astell\"\n}\n```", "```\n// usesActivist.ts\nimport { activist } from \"./activist.json\";\n\n// Logs: \"Mary Astell\"\nconsole.log(activist);\n```", "```\n// useActivist.ts\nimport data from \"./activist.json\";\n```", "```\n// activists.json\n[\n   \"Ida B. Wells\",\n   \"Sojourner Truth\",\n   \"Tawakkul Karmān\"\n]\n```", "```\n// useActivists.ts\nimport * as activists from \"./activists.json\";\n\n// Logs: \"3 activists\"\nconsole.log(`${activists.length} activists`);\n```", "```\nfruits/\n  apple.js\n  apple.ts\nvegetables/\n  zucchini.js\n  zucchini.ts\n```", "```\ndist/\n  fruits/\n    apple.js\n  vegetables/\n    zucchini.js\nfruits/\n  apple.ts\nvegetables/\n  zucchini.ts\n```", "```\nlib/\n  fruits/\n    apple.js\n  vegetables/\n    zucchini.js\nsrc/\n  fruits/\n    apple.ts\n  vegetables/\n    zucchini.ts\n```", "```\nfunction defaultNameAndLog(nameMaybe: string | undefined) {\n  const name = nameMaybe ?? \"anonymous\";\n  console.log(\"From\", nameMaybe, \"to\", name);\n  return name;\n}\n```", "```\nfunction defaultNameAndLog(nameMaybe) {\n  const name = nameMaybe ?? \"anonymous\";\n  console.log(\"From\", nameMaybe, \"to\", name);\n  return name;\n}\n```", "```\nfunction defaultNameAndLog(nameMaybe) {\n    const name = nameMaybe !== null && nameMaybe !== void 0\n      ? nameMaybe\n      : \"anonymous\";\n    console.log(\"From\", nameMaybe, \"to\", name);\n    return name;\n}\n```", "```\nfunction defaultNameAndLog(nameMaybe) {\n    var name = nameMaybe !== null && nameMaybe !== void 0\n      ? nameMaybe\n      : \"anonymous\";\n    console.log(\"From\", nameMaybe, \"to\", name);\n    return name;\n}\n```", "```\ntsc --declaration\n```", "```\n{\n  \"compilerOptions\": {\n    \"declaration\": true\n  }\n}\n```", "```\nfruits/\n  apple.d.ts\n  apple.js\n  apple.ts\nvegetables/\n  zucchini.d.ts\n  zucchini.js\n  zucchini.ts\n```", "```\ntsc --emitDeclarationOnly\n```", "```\n{\n  \"compilerOptions\": {\n    \"emitDeclarationOnly\": true\n  }\n}\n```", "```\nfruits/\n  apple.d.ts\n  apple.ts\nvegetables/\n  zucchini.d.ts\n  zucchini.ts\n```", "```\nfruits/\n  apple.js\n  apple.js.map\n  apple.ts\nvegetables/\n  zucchini.js\n  zucchini.js.map\n  zucchini.ts\n```", "```\nfruits/\n  apple.d.ts\n  apple.d.ts.map\n  apple.js\n  apple.ts\nvegetables/\n  zucchini.d.ts\n  zucchini.d.ts.map\n  zucchini.js\n  zucchini.ts\n```", "```\ntsc --lib es2020\n```", "```\n{\n  \"compilerOptions\": {\n    \"lib\": [\"es2020\"]\n  }\n}\n```", "```\ntsc --lib dom,es2021\n```", "```\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"es2021\"]\n  }\n}\n```", "```\nconst value = \"a b c\";\n\nvalue.replaceAll(\" \", \", \");\n// Uncaught TypeError: value.replaceAll is not a function\n```", "```\ntsc --skipLibCheck\n```", "```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n  }\n}\n```", "```\ntsc --strict\n```", "```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```", "```\ntsc --strict --noImplicitAny false\n```", "```\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"strict\": true\n  }\n}\n```", "```\nconst logMessage = (message) => {\n  //                ~~~~~~~\n  // Error: Parameter 'message' implicitly has an 'any' type.\n  console.log(`Message: ${message}!`);\n};\n```", "```\nconst logMessage = (message: string) => { // Ok\n  console.log(`Message: ${message}!`);\n}\n```", "```\ntype LogsMessage = (message: string) => void;\n\nconst logMessage: LogsMessage = (message) => { // Ok\n  console.log(`Message: ${message}!`);\n}\n```", "```\nfunction getLength(text: string, trim?: boolean) {\n  return trim ? text.trim().length : text.length;\n}\n\n// Function type: (thisArg: Function, argArray?: any) => any\ngetLength.apply;\n\n// Returned type: any\ngetLength.bind(undefined, \"abc123\");\n\n// Returned type: any\ngetLength.call(undefined, \"abc123\", true);\n```", "```\nfunction getLength(text: string, trim?: boolean) {\n  return trim ? text.trim().length : text;\n}\n\n// Function type:\n// (thisArg: typeof getLength, args: [text: string, trim?: boolean]) => number;\ngetLength.apply;\n\n// Returned type: (trim?: boolean) => number\ngetLength.bind(undefined, \"abc123\");\n\n// Returned type: number\ngetLength.call(undefined, \"abc123\", true);\n```", "```\nfunction checkOnNumber(containsA: (input: number | string) => boolean) {\n  return containsA(1337);\n}\n\nfunction stringContainsA(input: string) {\n  return !!input.match(/a/i);\n}\n\ncheckOnNumber(stringContainsA);\n```", "```\n// Argument of type '(input: string) => boolean' is not assignable\n// to parameter of type '(input: string | number) => boolean'.\n//   Types of parameters 'input' and 'input' are incompatible.\n//     Type 'string | number' is not assignable to type 'string'.\n//       Type 'number' is not assignable to type 'string'.\ncheckOnNumber(stringContainsA);\n```", "```\nlet value: string;\n\nvalue = \"abc123\"; // Always ok\n\nvalue = null;\n// With strictNullChecks enabled:\n// Error: Type 'null' is not assignable to type 'string'.\n```", "```\ntry {\n  someExternalFunction();\n} catch (error) {\n  error; // Default type: any\n}\n```", "```\ntry {\n  someExternalFunction();\n} catch (error: unknown) {\n  error; // Type: unknown\n}\n```", "```\nimport { value } from \"my-example-lib\";\n\nexport const logValue = () => console.log(value);\n```", "```\ntsc --module commonjs\n```", "```\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\"\n  }\n}\n```", "```\nconst my_example_lib = require(\"my-example-lib\");\nexports.logValue = () => console.log(my_example_lib.value);\n```", "```\ntsc --moduleResolution nodenext\n```", "```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"nodenext\"\n  }\n}\n```", "```\nimport React from \"react\";\n//     ~~~~~\n// Module '\"file:///node_modules/@types/react/index\"' can\n// only be default-imported using the 'esModuleInterop' flag.\n```", "```\nimport React from \"react\";\n// Module '\"file:///node_modules/@types/react/index\"' can only be\n// default-imported using the 'allowSyntheticDefaultImports' flag`.\n```", "```\n// index.ts\nimport { value } from \"./values\";\n\nconsole.log(`Quote: '${value.toUpperCase()}'`);\n```", "```\n// values.js\nexport const value = \"We cannot succeed when half of us are held back.\";\n```", "```\ntsc --allowJs\n```", "```\n{\n  \"compilerOptions\": {\n    \"allowJs\": true\n  }\n}\n```", "```\ntsc --checkJs\n```", "```\n{\n  \"compilerOptions\": {\n    \"checkJs\": true\n  }\n}\n```", "```\n// index.js\nlet myQuote = \"Each person must live their life as a model for others.\";\n\nconsole.log(quote);\n//          ~~~~~\n// Error: Cannot find name 'quote'. Did you mean 'myQuote'?\n```", "```\n// index.js\n// @ts-check\nlet myQuote = \"Each person must live their life as a model for others.\";\n\nconsole.log(quote);\n//          ~~~~~~~\n// Error: Cannot find name 'quote'. Did you mean 'myQuote'?\n```", "```\n// index.js\n\n/**\n * @param {string} text\n */\nfunction sentenceCase(text) {\n    return `${text[0].toUpperCase()} ${text.slice(1)}.`;\n}\n\nsentenceCase(\"hello world\");// Ok\n\nsentenceCase([\"hello\", \"world\"]);\n//           ~~~~~~~~~~~~~~~~~~\n// Error: Argument of type 'string[]' is not\n// assignable to parameter of type 'string'.\n```", "```\n// tsconfig.base.json\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```", "```\n// packages/core/tsconfig.json\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"includes\": [\"src\"]\n}\n```", "```\n// packages/js/tsconfig.json\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"allowJs\": true\n  },\n  \"includes\": [\"src\"]\n}\n```", "```\n// packages/tsconfig.json\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```", "```\n// packages/js/tsconfig.json\n{\n  \"extends\": \"@my-org/tsconfig\",\n  \"compilerOptions\": {\n    \"allowJs\": true\n  },\n  \"includes\": [\"src\"]\n}\n```", "```\n// packages/ts/tsconfig.json\n{\n  \"extends\": \"@my-org/tsconfig\",\n  \"includes\": [\"src\"]\n}\n```", "```\nnpm install --save-dev @tsconfig/deno\n# or\nyarn add --dev @tsconfig/deno\n```", "```\n{\n    \"extends\": \"@tsconfig/deno/tsconfig.json\"\n}\n```", "```\n// core/tsconfig.json\n{\n  \"compilerOptions\": {\n    \"declaration\": true\n  },\n  \"composite\": true\n}\n```", "```\n// shell/tsconfig.json\n{\n  \"references\": [\n    { \"path\": \"../core\" }\n  ]\n}\n```", "```\n// tsconfig.json\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./packages/core\" },\n    { \"path\": \"./packages/shell\" }\n  ]\n}\n```", "```\n// package.json\n{\n  \"scripts\": {\n    \"build\": \"tsc -b\"\n  }\n}\n```"]