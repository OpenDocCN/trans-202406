["```\nexport const name = 'Riley';\n```", "```\n<script type='module'>\n  import {name} from './mod.js';\n  console.log(name);\n</script>\n```", "```\n$ npm install webpack webpack-cli --save-dev\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```", "```\n\"scripts\": {\n  ...\n  \"build\": \"webpack\"\n}\n```", "```\nimport foo from './foo.js';\nimport bar from './bar.js';\n\nfoo();\nbar();\n```", "```\n$ npm install some-module --save\n```", "```\nimport some-code from 'some-module'\n```", "```\n$ npm install uglify-js\n```", "```\n\"scripts\": {\n  \"minify\": \"uglifyjs index.js --output index.min.js\"\n}\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    secondary: './src/secondary.js',\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n```", "```\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    index: './src/index.js',\n    secondary: './src/secondary.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  optimization: {\n    usedExports: true\n  }\n};\n```", "```\n\"sideEffects\": false\n```", "```\n\"sideEffects\": [\n  \"./src/file-with-side-effect.js\"\n]\n```", "```\nconst buttonElement = document.getElementById('button');\nbuttonElement.onclick = e =>\n  import(/* webpackChunkName: \"button\" */ './button').then(module => {\n    const button = module.default;\n    button();\n  });\n```", "```\n{\n  \"name\": \"JavaScript Everywhere\",\n  \"short_name\": \"JavaScript\",\n  \"start_url\": \"/index.html\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#ffc40d\",\n  \"theme_color\": \"#ffc40d\",\n  \"icons\": [\n    {\n      \"src\": \"/images/icons/icon-192x192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/images/icons/icon-512x512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n```", "```\n<!-- link to manifest.json file -->\n<link rel=\"manifest\" href=\"manifest.json\" />\n<!-- link to iOS icons -->\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"images/icons/apple-touch-icon.png\" />\n<!-- Microsoft application tile icons and color settings -->\n<meta name=\"msapplication-TileColor\" content=\"#ffc40d\" />\n<meta name=\"msapplication-TileImage\" content=\"/img/icons/mstile-310x310.png\" />\n<!-- set theme color -->\n<meta name=\"theme-color\" content=\"#ffc40d\" />\n```", "```\n<!-- initiate the service worker -->\n<script>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function() {\n      navigator.serviceWorker\n        .register('service-worker.js')\n        .then(reg => {\n          console.log('Service worker registered!', reg);\n        })\n        .catch(err => {\n          console.log('Service worker registration failed: ', err);\n        });\n    });\n  }\n</script>\n```", "```\nvar cacheVersion = 'v1';\n\nfilesToCache = [\n  'index.html',\n  '/styles/main.css',\n  '/js/main.js',\n  '/images/logo.svg'\n]\n```", "```\nconst cacheVersion = 'v1';\n\nconst filesToCache = ['index.html', '/styles/main.css', '/js/main.js'];\n\nself.addEventListener('install', event => {\n  console.log('Service worker install event fired');\n  event.waitUntil(\n    caches.open(cacheVersion).then(cache => {\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('fetch', event => {\n  console.log('Fetch intercepted for:', event.request.url);\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      if (cachedResponse) {\n        return cachedResponse;\n      }\n      return fetch(event.request);\n    })\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(keyList => {\n      return Promise.all(\n        keyList.map(key => {\n          if (key !== cacheVersion) {\n            return caches.delete(key);\n          }\n        })\n      );\n    })\n  );\n});\n```", "```\n{\n  \"lang\": \"en\",\n  \"dir\": \"ltr\",\n  \"name\": \"Super Racer 3000\",\n  \"description\": \"The ultimate futuristic racing game from the future!\",\n  \"short_name\": \"Racer3K\",\n  \"icons\": [{\n    \"src\": \"icon/lowres.webp\",\n    \"sizes\": \"64x64\",\n    \"type\": \"image/webp\"\n  },{\n    \"src\": \"icon/lowres.png\",\n    \"sizes\": \"64x64\"\n  }, {\n    \"src\": \"icon/hd_hi\",\n    \"sizes\": \"128x128\"\n  }],\n  \"scope\": \"/racer/\",\n  \"start_url\": \"/racer/start.html\",\n  \"display\": \"fullscreen\",\n  \"orientation\": \"landscape\",\n  \"theme_color\": \"aliceblue\",\n  \"background_color\": \"red\",\n  \"screenshots\": [{\n    \"src\": \"screenshots/in-game-1x.jpg\",\n    \"sizes\": \"640x480\",\n    \"type\": \"image/jpeg\"\n  },{\n    \"src\": \"screenshots/in-game-2x.jpg\",\n    \"sizes\": \"1280x920\",\n    \"type\": \"image/jpeg\"\n  }]\n}\n```", "```\n$ npm install -g lighthouse\n```", "```\n$ lighthouse https://www.oreilly.com/\n```", "```\n$ lighthouse https://www.oreilly.com/ --view\n```", "```\n$ lighthouse https://www.oreilly.com/ --view --output html --output-path ./report.html\n```", "```\n[\n  {\n    \"path\": \"/*\",\n    \"timings\": [\n      {\n        \"metric\": \"interactive\",\n        \"budget\": 3000\n      },\n      {\n        \"metric\": \"first-meaningful-paint\",\n        \"budget\": 1000\n      }\n    ],\n    \"resourceSizes\": [\n      {\n        \"resourceType\": \"script\",\n        \"budget\": 125\n      },\n      {\n        \"resourceType\": \"total\",\n        \"budget\": 300\n      }\n    ],\n    \"resourceCounts\": [\n      {\n        \"resourceType\": \"third-party\",\n        \"budget\": 10\n      }\n    ]\n  }\n]\n```", "```\nversion: 2.1\njobs:\n  build:\n    docker:\n      - image: circleci/node:10.16-browsers\n    working_directory: ~/your-project\n    steps:\n      - checkout\n      - run: npm install\n      - run: npm run build\n      - run: sudo npm install -g @lhci/cli@0.3.x\n      - run: lhci autorun\n```", "```\nconst URL = window.location.href;\n```", "```\nconst URL = window.location.href;\n// logs https://www.jseverywhere.io/example\nconsole.log(`The current URL is ${URL}`);\n```", "```\n// user is at https://www.jseverywhere.io/example?page=2\n\nconst PATH = window.location.pathname;\n// logs /example/\nconsole.log(`The current path is ${PATH}`);\n\nconst QUERY = window.location.search;\n// logs ?page=2\nconsole.log(`The current query parameter is ${QUERY}`)\n```", "```\n// route user to new page & preserve browser history\nwindow.location.assign('https://www.example.com');\n// route user to new page but do not preserve current page in history\nwindow.location.replace('https://www.example.com');\n```", "```\n<input type=\"text\" id=\"copy-text\" value=\"https://example.com/share/12345\">\n<button id=\"copy-button\">Copy To Clipboard</button>\n```", "```\nconst copyText = document.getElementById('copy-text');\nconst copyButton = document.getElementById('copy-button');\n\nconst copyToClipboard = () => {\n  copyText.select();\n  navigator.clipboard.writeText(copyText.value);\n};\n\ncopyButton.addEventListener('click', copyToClipboard);\n```", "```\n<p>Some example text<p>\n\n<textarea id=\"copy-text\" tabindex=\"-1\" aria-hidden=\"true\"></textarea>\n<button id=\"copy-button\">Copy the Highlighted Text</button>\n```", "```\n#copy-text {\n  position: absolute;\n  left: -9999px;\n  height: 0;\n  width: 0;\n}\n```", "```\nconst copyText = document.getElementById('copy-text');\nconst copyButton = document.getElementById('copy-button');\n\nconst copyToClipboard = () => {\n  const selection = document.getSelection();\n  copyText.value = `${selection} â€” Check out my highlight at https://example.com `;\n  copyText.select();\n  navigator.clipboard.writeText(copyText.value);\n}\n\ncopyButton.addEventListener('click', copyToClipboard);\n```", "```\nconst notificationButton = document.getElementById('notification-button');\n\nconst showNotification = permission => {\n  // if the user didn't grant permission, exit the function\n  if (permission !== 'granted') return;\n\n  // content of the notification\n  const notification = new Notification('Title', {\n    body: 'Check out this super cool thing'\n  });\n\n  // optional: action to take when a user clicks the notification\n  notification.onclick = () => {\n    window.open('https://example.com');\n  };\n};\n\nconst notificationCheck = () => {\n  // if notifications aren't supported return\n  // alternately you could perform a different action\n  // like redirect the user to email signup\n  if (!window.Notification) return;\n\n  // request permission from the user\n  Notification.requestPermission().then(showNotification);\n};\n\n// on click, call the `notificationCheck` function\nnotificationButton.addEventListener('click', notificationCheck);\n```", "```\nif (window.Notification) {\n  Notification.requestPermission(() => {\n    setTimeout(() => {\n      const notification = new Notification('hey wake up', {\n        body: 'your process is done',\n        tag: 'loader',\n        icon: 'favicon.ico'\n      });\n      notification();\n    }, 5000);\n  });\n}\n```", "```\nif (window.Notification) {\n  Notification.requestPermission(() => {\n    setTimeout(() => {\n      if (document.visibilityState === 'hidden') {\n        const notification = new Notification('hey wake up', {\n          body: 'your process is done',\n          icon: 'favicon.ico'\n        });\n        notification();\n      } else {\n        document.getElementById('result').innerHTML = 'your process is done';\n      }\n    }, 5000);\n  });\n}\n```", "```\nconst inputElement = document.getElementById('file');\n\nfunction handleFile() {\n  // read the contents of the file\n  const file = this.files[0];\n  const reader = new FileReader();\n  // add 'load' event listener\n  reader.addEventListener('load', event => {\n    // once loaded do something with the contents of the file\n  });\n  reader.readAsDataURL(file);\n}\n\ninputElement.addEventListener('change', handleFile, false);\n```", "```\n<!DOCTYPE html>\n<head>\n  <title>Image Reader</title>\n  <meta charset=\"utf-8\" />\n  <style>\n    #result {\n      width: 500px;\n      margin: 30px;\n    }\n  </style>\n</head>\n<body>\n  <h1>Image Reader</h1>\n  <form>\n    <label for=\"file\">File:</label> <br />\n    <input type=\"file\" id=\"file\" accept=\".jpg, .jpeg, .png\" />\n  </form>\n  <div id=\"result\">\n    <ul>\n      <li>Image name: <span id=\"name\"></span></li>\n      <li>Image type: <span id=\"type\"></span></li>\n    </ul>\n  </div>\n\n  <script>\n    const inputElement = document.getElementById('file');\n    const result = document.getElementById('result');\n    const nameEl = document.getElementById('name');\n    const typeEl = document.getElementById('type');\n\n    function handleFile() {\n      // read the contents of the file\n      const file = this.files[0];\n      const reader = new FileReader();\n      // add 'load' event listener\n      reader.addEventListener('load', event => {\n        // create the image element and display it within the result div\n        const img = document.createElement('img');\n        img.setAttribute('src', event.target.result);\n        img.setAttribute('width', '250');\n        result.appendChild(img);\n        // display the image name and file type\n        const name = document.createTextNode(file.name);\n        const type = document.createTextNode(file.type);\n        nameEl.appendChild(name);\n        typeEl.appendChild(type);\n      });\n      reader.readAsDataURL(file);\n    }\n\n    inputElement.addEventListener('change', handleFile, false);\n  </script>\n</body>\n```", "```\n<template id=\"hello-world\">\n  <p>Hello world!</p>\n</template>\n```", "```\nconst template = document.getElementById('hello-world');\nconst templateContent = template.content;\ndocument.body.appendChild(templateContent);\n```", "```\nclass CustomGreeting extends HTMLParagraphElement {\n  constructor() {\n    // always call super first in constructor\n    super();\n\n    // any additional element functionality can be written here\n  }\n}\n```", "```\ncustomElements.define(\"custom-greeting\", CustomGreeting);\n```", "```\n<custom-greeting>Hello world!</custom-greeting>\n```", "```\nconst shadow = element.attachShadow({mode: 'open'});\n```", "```\nclass CustomGreeting extends HTMLElement {\n  constructor() {\n    super();\n    const shadow = this.attachShadow({mode: 'open'});\n    const greeting = this.getAttribute('greeting') || 'world'\n    shadow.innerHTML = `<p>\n Hello, <span class=\"greeting\">${greeting}</span>\n </p>`;\n  }\n}\n```", "```\nclass CustomGreeting extends HTMLElement {\n  constructor() {\n    super();\n    const shadow = this.attachShadow({mode: 'open'});\n    const greeting = this.getAttribute('greeting') || 'world'\n    shadow.innerHTML = `<p class=\"wrapper\">\n Hello, <span class=\"greeting\">${greeting}</span>\n </p>`;\n\n    // add css styles\n    const style = document.createElement('style');\n\n    style.textContent = `\n .wrapper {\n color: pink;\n }\n\n .greeting {\n color: green;\n font-weight: bold;\n }\n `;\n  }\n}\n```"]