- en: Chapter 1\. Revolution in the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章\. 云中的革命
- en: There was never a time when the world began, because it goes round and round
    like a circle, and there is no place on a circle where it begins.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从未有过一个世界从何开始的时候，因为它像圆圈一样不断地旋转，而在圆圈上没有任何一个地方是它开始的地方。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Alan Watts
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 艾伦·沃茨
- en: There’s a revolution going on. Actually, three revolutions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正在发生一场革命。实际上，是三场革命。
- en: 'The first revolution is the creation of *the cloud*, and we’ll explain what
    that is and why it’s important. The second is the dawn of *DevOps*, and you’ll
    find out what that involves and how it’s changing operations. The third revolution
    is the wide adoption of *containers*. Together, these three waves of change are
    creating a new software world: the *cloud native* world. The operating system
    for this world is called *Kubernetes*.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第一场革命是*云*的诞生，我们将解释它是什么，以及为什么它如此重要。第二场是*DevOps*的黎明，您将了解它涉及的内容以及它如何改变运营。第三场革命是*容器*的广泛采用。这三波变革共同创建了一个新的软件世界：*云原生*世界。这个世界的操作系统被称为*Kubernetes*。
- en: In this chapter, we’ll briefly recount the history and significance of these
    revolutions, and explore how the changes are affecting the way we all deploy and
    operate software. We’ll outline what cloud native means, and what changes you
    can expect to see in this new world if you work in software development, operations,
    deployment, engineering, networking, or security.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要回顾这些革命的历史和意义，并探讨这些变化如何影响我们所有人部署和操作软件的方式。我们将概述云原生的含义，以及如果您从事软件开发、运维、部署、工程、网络或安全工作，您可以期待在这个新世界中看到的变化。
- en: Thanks to the effects of these interlinked revolutions, we think the future
    of computing lies in cloud-based, containerized, distributed systems, dynamically
    managed by automation, on the Kubernetes platform (or something very like it).
    The art of developing and running these applications—*cloud native DevOps*—is
    what we’ll explore in the rest of this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些相互关联革命的影响，我们认为计算的未来在于基于云的、容器化的、分布式系统，由自动化动态管理，在Kubernetes平台上（或类似的平台）运行。开发和运行这些应用程序的艺术
    —— *云原生DevOps* —— 将在本书的其余部分探讨。
- en: If you’re already familiar with all of this background material, and you just
    want to start having fun with Kubernetes, feel free to skip ahead to [Chapter 2](ch02.html#firststeps).
    If not, settle down comfortably, with a cup of your favorite beverage, and we’ll
    begin.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经熟悉所有这些背景资料，只想开始享受Kubernetes的乐趣，请随意跳到[第二章](ch02.html#firststeps)。如果没有，请舒服地坐下来，拿着您喜爱的饮料，我们开始吧。
- en: The Creation of the Cloud
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云的诞生
- en: In the beginning (well, the 1960s, anyway), computers filled rack after rack
    in vast, remote, air-conditioned datacenters, and users would never see them or
    interact with them directly. Instead, developers submitted their jobs to the machine
    remotely and waited for the results. Many hundreds or thousands of users would
    all share the same computing infrastructure, and each would simply receive a bill
    for the amount of processor time or resources they used.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 起初（好吧，无论如何是在1960年代），计算机填满了遥远、大规模、空调机房中的机架，用户从未直接看到它们或与其直接交互。开发者远程提交任务到机器上，并等待结果。成百上千的用户共享同一套计算基础设施，每个人只需支付他们使用的处理器时间或资源的费用。
- en: It wasn’t cost-effective for each company or organization to buy and maintain
    its own computing hardware, so a business model emerged where users would share
    the computing power of remote machines, owned and run by a third party.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个公司或组织来说，购买和维护自己的计算硬件是不划算的，因此出现了一种商业模式，用户共享第三方拥有和运行的远程机器的计算能力。
- en: If that sounds like right now, instead of last century, that’s no coincidence.
    The word *revolution* means “circular movement,” and computing has, in a way,
    come back to where it began. While computers have gotten a lot more powerful over
    the years—today’s Apple Watch is the equivalent of about three of the mainframe
    computers shown in [Figure 1-1](#img-system360)—shared, pay-per-use access to
    computing resources is a very old idea. Now we call it the cloud, and the revolution
    that began with timesharing mainframes has come full circle.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来像是现在，而不是上个世纪，那并非巧合。*革命*这个词意味着“循环运动”，而计算机在某种程度上回到了它的起点。虽然多年来计算机变得更加强大 ——
    今天的苹果手表相当于图[1-1](#img-system360)中展示的主机计算机的三倍 —— 对计算资源的共享、按使用量付费的访问却是一个非常古老的概念。现在我们称之为云，以及从分时共享主机开始的革命已经走了一整圈。
- en: '![IBM System/360 Model 91](assets/cnd2_0101.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![IBM System/360 Model 91](assets/cnd2_0101.png)'
- en: 'Figure 1-1\. Early cloud computer: the IBM System/360 Model 91, at NASA’s Goddard
    Space Flight Center'
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 早期云计算机：IBM System/360 Model 91，位于 NASA 的 Goddard 太空飞行中心
- en: Buying Time
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购买时间
- en: 'The central idea of the cloud is this: instead of buying a *computer*, you
    buy *compute*. That is, instead of sinking large amounts of capital into physical
    machinery, which is hard to scale, breaks down mechanically, and rapidly becomes
    obsolete, you simply buy time on someone else’s computer and let them take care
    of the scaling, maintenance, and upgrading. In the days of bare-metal machines—the
    “Iron Age,” if you like—computing power was a capital expense. Now it’s an operating
    expense, and that has made all the difference.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 云的核心理念是这样的：不再购买*计算机*，而是购买*计算*。也就是说，不再将大量资本投入到容易扩展、机械故障和迅速过时的物理设备中，而是简单地购买他人计算机上的时间，并让他们负责扩展、维护和升级。在裸金属机器时代——如果你喜欢的话，可以称之为“铁器时代”——计算能力是资本支出。现在它是运营支出，这造成了巨大的不同。
- en: 'The cloud is not just about remote, rented computing power. It is also about
    distributed systems. You may buy raw compute resources (such as a Google Compute
    *instance*, or an AWS Lambda *function*) and use it to run your own software,
    but increasingly you also rent *cloud services*: essentially, the use of someone
    else’s software. For example, if you use PagerDuty to monitor your systems and
    alert you when something is down, you’re using a cloud service (sometimes called
    *software as a service*, or SaaS). The success of these SaaS services is partly
    due to this recent revolution of the cloud. Now almost anyone can create a new
    app or website, host it on a public cloud provider, and scale it up to a global
    audience if they find some success.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 云不仅仅是关于远程租用的计算能力。它还涉及分布式系统。您可以购买原始计算资源（例如 Google Compute *实例* 或 AWS Lambda *函数*）并使用它来运行自己的软件，但您也越来越多地租用*云服务*：基本上是使用他人的软件。例如，如果您使用
    PagerDuty 监控系统并在某些情况下提醒您，您正在使用云服务（有时称为*软件即服务*或 SaaS）。这些 SaaS 服务的成功部分归功于云的这一最新革命。现在几乎任何人都可以创建新的应用程序或网站，在公共云提供商上托管它，并在找到一些成功时将其扩展到全球观众。
- en: Infrastructure as a Service
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施即服务
- en: When you use cloud infrastructure to run your own services, what you’re buying
    is *infrastructure as a service* (IaaS). You don’t have to expend capital to purchase
    it, you don’t have to build it, and you don’t have to upgrade it. It’s just a
    commodity, like electricity or water. Cloud computing is a revolution in the relationship
    between businesses and their IT infrastructure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用云基础架构来运行自己的服务时，您购买的是*基础设施即服务*（IaaS）。您不必消耗资本去购买它，也不必去建造它，也不必去升级它。它就像电力或水一样是一种商品。云计算是企业与其
    IT 基础设施之间关系的革命。
- en: 'Outsourcing the hardware is only part of the story; the cloud also allows you
    to outsource the *software* that you don’t write: operating systems, databases,
    clustering, replication, networking, monitoring, high availability, queue and
    stream processing, and all the myriad layers of software and configuration that
    span the gap between your code and the CPU. Managed services can take care of
    almost all of this *undifferentiated heavy lifting* for you (you’ll find out more
    about the benefits of managed services in [Chapter 3](ch03.html#gettingk8s)).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 外包硬件只是故事的一部分；云还允许您外包您没有编写的*软件*：操作系统、数据库、集群、复制、网络、监控、高可用性、队列和流处理，以及连接您的代码和 CPU
    之间的各种软件层和配置。托管服务可以为您处理几乎所有这些*无差别的重活*（您将在[第三章](ch03.html#gettingk8s)中了解到更多关于托管服务优势的内容）。
- en: 'The revolution in the cloud has also triggered another revolution in the people
    who use it: the DevOps movement.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 云革命还引发了使用它的人们的另一场革命：DevOps 运动。
- en: The Dawn of DevOps
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 的黎明
- en: Before DevOps, developing and operating software were essentially two separate
    jobs, performed by two different groups of people. *Developers* wrote software,
    and they passed it on to *operations* staff, who ran and maintained the software
    *in production* (that is to say, serving real users, instead of merely running
    internally for testing or feature development purposes). Like the massive mainframe
    computers that needed their own floor of the building, this separation had its
    roots in the middle of the last century. *Software development* was a very specialist
    job, and so was *computer operation*, and there was very little overlap between
    these two roles.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps出现之前，开发和操作软件基本上是两个由不同人群执行的独立工作。*开发人员*编写软件，然后将其传递给*运维*人员，在*生产环境*中运行和维护软件（也就是说，为真实用户提供服务，而不仅仅是内部测试或功能开发目的的运行）。就像大型主机计算机需要建筑物内自己的一层一样，这种分离根源于上个世纪中期。*软件开发*是一个非常专业的工作，*计算机操作*也是如此，这两种角色之间的重叠很少。
- en: The two departments had quite different goals and incentives, which often conflicted
    with each other. Developers tended to focus on shipping new features quickly,
    while operations teams cared mostly about making services stable and reliable
    over the long term. In some cases there would be security policies in place that
    prevented software developers from even having access to the logs or metrics for
    their own applications running in production. They would need to ask permission
    from the operations team to debug the application and deploy any fixes. And it
    was often the operations team who were blamed anytime there was an issue with
    an application, regardless of the cause.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个部门有着完全不同的目标和激励，经常彼此冲突。开发人员倾向于快速推出新功能，而运维团队则更关心在长期内使服务稳定可靠。在某些情况下，可能会制定安全政策，阻止软件开发人员甚至访问其应用程序在生产环境中的日志或指标。他们需要征得运维团队的许可才能调试应用程序并部署任何修复。无论原因如何，通常出现应用程序问题时都会责备运维团队。
- en: As cloud computing became more popular, the industry changed. Distributed systems
    are complex, and the internet is very big. The technicalities of these distributed
    systems—when it comes to recovering from failures, handling timeouts, smoothly
    upgrading versions—are not so easy to separate from the design, architecture,
    and implementation of the system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的普及，行业发生了变化。分布式系统复杂，互联网非常庞大。在处理这些分布式系统的技术细节时，如何从故障中恢复、处理超时、平滑升级版本等，与系统的设计、架构和实施密不可分。
- en: 'Further, “the system” is no longer just your software: it comprises in-house
    software, cloud services, network resources, load balancers, monitoring, content
    distribution networks, firewalls, DNS, and so on. All these things are intimately
    interconnected and interdependent. The people who write the software have to understand
    how it relates to the rest of the system, and the people who operate the system
    have to understand how the software works and fails.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，“系统”不再仅限于您的软件：它包括内部软件、云服务、网络资源、负载均衡器、监控、内容分发网络、防火墙、DNS等。所有这些东西都密切相连，相互依赖。编写软件的人必须了解其与系统其余部分的关系，而操作系统的人必须了解软件的工作方式和故障情况。
- en: Improving Feedback Loops
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进反馈循环
- en: 'The origins of the DevOps movement lie in attempts to bring these two groups
    together: to collaborate, to share understanding, to share responsibility for
    systems reliability and software correctness, and to improve the scalability of
    both the software systems and the teams of people who build them.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps运动的起源在于试图让这两个群体合作，共享理解，共同承担系统可靠性和软件正确性的责任，并改进构建这些系统和团队的可伸缩性。
- en: DevOps is about improving the feedback loops and handoff points that exist between
    various teams when writing code, building apps, running tests, and deploying changes
    to ensure that things are running smoothly and efficiently.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps旨在改进各团队在编写代码、构建应用程序、运行测试和部署更改时存在的反馈循环和交接点，以确保事物运行顺畅和高效。
- en: What Does DevOps Mean?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: '*DevOps* has occasionally been a controversial term to define, both with people
    who insist it’s nothing more than a modern label for existing good practice in
    software development, and with those who reject the need for greater collaboration
    between development and operations at all.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*DevOps*偶尔会被用来定义，这个术语有时会引起争议，一些人认为它不过是软件开发中现有良好实践的现代标签，还有人拒绝在开发和运营之间需要更多协作的必要性。'
- en: 'There is also widespread misunderstanding about what DevOps actually is: A
    job title? A team? A methodology? A skill set? The influential DevOps writer John
    Willis has identified four key pillars of DevOps, which he calls *culture, automation,
    measurement, and sharing* (CAMS). Organizations practicing DevOps have a culture
    that embraces collaboration, rejects siloing knowledge between teams, and comes
    up with ways of measuring how they can be constantly improving. Another way to
    break it down is what Brian Dawson has called the DevOps trinity: *people and
    culture*, *process and practice*, and *tools and technology*.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DevOps实际是什么也存在广泛的误解：一个职位？一个团队？一种方法论？一种技能？有影响力的DevOps作家约翰·威利斯确定了四个关键支柱，他称之为*文化、自动化、测量和共享*（CAMS）。实践DevOps的组织具有鼓励协作、拒绝将知识隔离在团队之间以及寻找持续改进方法的文化。另一种分解方法是布莱恩·道森所说的DevOps三位一体：*人与文化*、*过程与实践*、*工具与技术*。
- en: Some people think that cloud and containers mean that we no longer need DevOps—a
    point of view sometimes called *NoOps*. The idea is that since all IT operations
    are outsourced to a cloud provider, or another third-party service, businesses
    don’t need full-time operations staff.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人认为云和容器意味着我们不再需要DevOps——有时被称为*NoOps*。这种观点的核心是，由于所有IT运营都外包给云提供商或其他第三方服务，企业不再需要全职运营人员。
- en: 'The NoOps fallacy is based on a misapprehension of what DevOps work actually
    involves:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: NoOps的谬误基于对DevOps工作实际涉及的误解：
- en: With DevOps, much of the traditional IT operations work happens before code
    reaches production. Every release includes monitoring, logging, and A/B testing.
    CI/CD pipelines automatically run unit tests, security scanners, and policy checks
    on every commit. Deployments are automatic. Controls, tasks, and non-functional
    requirements are now implemented before release instead of during the frenzy and
    aftermath of a critical outage.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在DevOps中，大部分传统的IT运营工作发生在代码进入生产之前。每个发布都包括监控、日志记录和A/B测试。CI/CD管道会自动运行单元测试、安全扫描器和策略检查。部署是自动化的。控制、任务和非功能性需求现在在发布之前实施，而不是在关键故障的紧张和后果中进行。
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Jordan Bach ([AppDynamics](https://oreil.ly/HlKK3))
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Jordan Bach ([AppDynamics](https://oreil.ly/HlKK3))
- en: For now, you will find lots of job postings for the title of DevOps Engineer
    and a huge range of what is expected of that role, depending on the organization.
    Sometimes it will look more like a traditional “sysadmin” role and have little
    interaction with software engineers. Sometimes the role will be embedded alongside
    developers building and deploying their own applications. It is important to consider
    what DevOps means to you and what you want it to look like at an organization.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您会发现很多关于DevOps工程师职称的招聘信息，以及这种角色在不同组织中预期的广泛范围。有时它看起来更像是传统的“系统管理员”角色，与软件工程师的互动很少。有时，这种角色会与开发人员并肩工作，构建和部署他们自己的应用程序。重要的是考虑DevOps对您意味着什么，以及您希望在组织中如何实现它。
- en: 'The most important thing to understand about DevOps is that it is primarily
    an organizational, human issue, not a technical one. This accords with Jerry Weinberg’s
    Second Law of Consulting:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关于DevOps最重要的一点是，它主要是一个组织和人的问题，而不是技术问题。这符合杰瑞·温伯格的咨询第二定律：
- en: No matter how it looks at first, it’s always a people problem.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不管一开始看起来如何，它总是一个人的问题。
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gerald M. Weinberg, *The Secrets of Consulting*
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 杰拉尔德·M·温伯格，《咨询的秘密》
- en: 'And DevOps does really work. Studies regularly suggest that companies that
    adopt DevOps principles release better software faster, react better and faster
    to failures and problems, are more agile in the marketplace, and dramatically
    improve the quality of their products:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而DevOps确实有效。研究经常表明，采纳DevOps原则的公司发布更好的软件速度更快，对失败和问题的反应更好更快，在市场上更具敏捷性，并显著提高产品质量：
- en: DevOps is not a fad; rather it is the way successful organizations are industrializing
    the delivery of quality software today and will be the new baseline tomorrow and
    for years to come.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DevOps不是一时的风尚；相反，它是成功组织今天工业化交付质量软件的方式，也将成为未来和未来多年的新基线。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Brian Dawson, [*CloudBees*](https://oreil.ly/rzb3D)
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Brian Dawson，[*CloudBees*](https://oreil.ly/rzb3D)
- en: Infrastructure as Code
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: Once upon a time, developers dealt with software, while operations teams dealt
    with hardware and the operating systems that run on that hardware.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 曾几何时，开发人员处理软件，而运维团队则处理硬件及其运行的操作系统。
- en: 'Now that hardware is in the cloud, everything, in a sense, is software. The
    DevOps movement brings software development skills to operations: tools and workflows
    for rapid, agile, collaborative building of complex systems. This is often referred
    to as *infrastructure as code* (IaC).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在硬件在云中，从某种意义上说，一切都是软件。DevOps运动将软件开发技能引入运维：快速、敏捷、协作地构建复杂系统的工具和工作流程。这通常被称为*基础设施即代码*（IaC）。
- en: Instead of physically racking and cabling computers and switches, cloud infrastructure
    can be automatically provisioned by software. Instead of manually deploying and
    upgrading hardware, operations engineers have become the people who write the
    software that automates the cloud.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与其物理安装和连接计算机和交换机，云基础设施可以通过软件自动配置。运维工程师们不再手动部署和升级硬件，而是成为编写自动化云服务的软件的人。
- en: The traffic isn’t just one-way. Developers are learning from operations teams
    how to anticipate the failures and problems inherent in distributed, cloud-based
    systems, how to mitigate their consequences, and how to design software that degrades
    gracefully and fails safely.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 流量不仅仅是单向的。开发人员从运维团队那里学习如何预测分布式、基于云的系统中固有的故障和问题，如何减轻其后果，以及如何设计能够优雅降级和安全失败的软件。
- en: Learning Together
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共同学习
- en: Both development teams and operations teams are learning how to work together.
    They’re learning how to design and build systems, how to monitor and get feedback
    on systems in production, and how to use that information to improve the systems.
    Even more importantly, they’re learning to improve the experience for their users,
    and to deliver better value for the business that funds them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队和运维团队都在学习如何共同工作。他们学习如何设计和构建系统，如何在生产环境中监控和获得反馈，并如何利用这些信息改进系统。更重要的是，他们学习如何为用户提供更好的体验，为资助他们的业务提供更好的价值。
- en: 'The massive scale of the cloud and the collaborative, code-centric nature of
    the DevOps movement have turned operations into a software problem. At the same
    time, they have also turned software into an operations problem. All of which
    raises these questions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 云的大规模和DevOps运动中的协作、以代码为中心的性质，已将运维转变为一个软件问题。同时，它们也将软件转变为一个运维问题。所有这些都引发了以下问题：
- en: How do you deploy and upgrade software across large, diverse networks of different
    server architectures and operating systems?
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在不同服务器架构和操作系统的大型、多样化网络上部署和升级软件？
- en: How do you deploy to distributed environments, in a reliable and reproducible
    way, using largely standardized components?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在可靠且可重复的方式中部署到分布式环境中，使用大部分标准化的组件？
- en: 'Enter the third revolution: the *container*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 进入第三次革命：*容器*。
- en: The Coming of Containers
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器时代的到来
- en: To deploy a piece of software, you need not only the software itself, but its
    *dependencies*. That means libraries, interpreters, subpackages, compilers, extensions,
    and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署一段软件，你不仅需要软件本身，还需要其*依赖项*。这包括库、解释器、子包、编译器、扩展等等。
- en: 'You also need its *configuration*: settings, site-specific details, license
    keys, database passwords—everything that turns raw software into a usable service.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要它的*配置*：设置、特定于站点的详细信息、许可密钥、数据库密码——所有能使原始软件成为可用服务的东西。
- en: The State of the Art
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术的现状
- en: Earlier attempts to solve this problem include using *configuration management*
    systems, such as Puppet or Ansible, which consist of code to install, run, configure,
    and update the software.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 早期解决这个问题的尝试包括使用*配置管理*系统，比如Puppet或Ansible，这些系统由代码组成，用于安装、运行、配置和更新软件。
- en: Another solution is the *omnibus package*, which, as the name suggests, attempts
    to cram everything the application needs inside a single file. An omnibus package
    contains the software, its configuration, its dependent software components, *their*
    configuration, *their* dependencies, and so on. (For example, a Java omnibus package
    would contain the Java runtime as well as all the Java Archive [JAR] files for
    the application.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是*综合包*，顾名思义，试图将应用程序所需的一切都塞进一个文件中。综合包包含软件、其配置、其依赖的软件组件、*它们*的配置、*它们*的依赖等等。（例如，Java综合包将包含Java运行时以及应用程序的所有Java存档[JAR]文件。）
- en: Some vendors have even gone a step further and included the entire computer
    system required to run it, as a *virtual machine image* (VM image), but these
    are large and unwieldy, time-consuming to build and maintain, fragile to operate,
    slow to download and deploy, and vastly inefficient in performance and resource
    footprint.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些供应商甚至走得更远，将运行所需的整个计算机系统包括为*虚拟机镜像*（VM镜像），但这些镜像体积庞大、难以操作、构建和维护耗时，下载和部署速度慢，并在性能和资源占用效率上极为低效。
- en: From an operations point of view, not only do you need to manage these various
    kinds of packages, but you also need to manage a fleet of servers to run them
    on.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从运营角度来看，不仅需要管理这些不同类型的软件包，还需要管理一整群的服务器来运行它们。
- en: Servers need to be provisioned, networked, deployed, configured, kept up-to-date
    with security patches, monitored, managed, and so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器需要进行配置、网络连接、部署、配置、保持最新的安全补丁、监控、管理等。
- en: This all takes a significant amount of time, skill, and effort just to provide
    a platform to run software on. Isn’t there a better way?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切需要大量的时间、技能和努力，只是为了提供一个运行软件的平台。难道没有更好的方法吗？
- en: Thinking Inside the Box
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盒子内思考
- en: 'To solve these problems, the tech industry borrowed an idea from the shipping
    industry: the *container*. In the 1950s, a truck driver named [Malcolm McLean](https://oreil.ly/IEM1p)
    proposed that, instead of laboriously unloading goods individually from the truck
    trailers that brought them to the ports and loading them onto ships, the trucks
    themselves—or rather, the truck bodies—could be loaded onto the ship.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，技术行业从运输行业借鉴了一个想法：*集装箱*。在1950年代，一名名叫[马尔科姆·麦克莱恩](https://oreil.ly/IEM1p)的卡车司机提出，不必费力地从把货物单独从把它们带到港口的卡车拖车上卸下来，并装载到船上，可以直接将卡车本身——或者说卡车箱体——装上船。
- en: A truck trailer is essentially a big metal box on wheels. If you can separate
    the box—the container—from the wheels and chassis used to transport it, you have
    something that is very easy to lift, load, stack, and unload, and can go right
    onto a ship or another truck at the other end of the voyage. Containers also use
    standard dimensions, which allows the entire shipping industry including boats,
    trains, and trucks, to know what to expect when it comes to moving them from place
    to place.([Figure 1-2](#img-container)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个卡车拖车本质上是一个有轮子的大金属箱子。如果你能把箱子——也就是集装箱——与用来运输它的轮子和底盘分开，那么你就有了一个非常容易提升、装载、堆叠和卸载的东西，可以直接装上船或另一辆卡车，就在航行终点的另一头。集装箱还使用标准尺寸，这使得整个航运行业，包括船只、火车和卡车，在移动它们时知道可以期待什么。（[图 1-2](#img-container)）
- en: McLean’s container shipping firm, Sea-Land, became very successful by using
    this system to ship goods far more cheaply, and [containers quickly caught on](https://oreil.ly/or0Vm).
    Today, hundreds of millions of containers are shipped every year, carrying trillions
    of dollars’ worth of goods.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: McLean的集装箱运输公司Sea-Land通过使用这个系统更便宜地运输货物而变得非常成功，而且[集装箱迅速流行开来](https://oreil.ly/or0Vm)。今天，每年运输数亿个集装箱，携带价值数万亿美元的货物。
- en: '![A crane lifting a shipping container](assets/cnd2_0102.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![起重机吊起集装箱](assets/cnd2_0102.png)'
- en: Figure 1-2\. Standardized containers dramatically cut the cost of shipping bulk
    goods (photo by [Lucarelli](https://oreil.ly/cUnw0), licensed under Creative Commons)
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 标准化集装箱大大降低了批量货物运输成本（照片由[Lucarelli](https://oreil.ly/cUnw0)拍摄，根据知识共享许可证使用）
- en: Putting Software in Containers
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 把软件放入容器中
- en: 'The software container is exactly the same idea: a standard packaging and distribution
    format that is generic and widespread, enabling greatly increased carrying capacity,
    lower costs, economies of scale, and ease of handling. The container format contains
    everything the application needs to run, baked into an *image file* that can be
    executed by a *container runtime*.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 软件容器正是相同的理念：一个标准的打包和分发格式，通用且广泛，能够大大增加运载能力、降低成本、实现规模经济并便于处理。容器格式包含应用程序运行所需的一切，都融入到一个
    *镜像文件* 中，可以由 *容器运行时* 执行。
- en: How is this different from a virtual machine image? That, too, contains everything
    the application needs to run—but a lot more besides. A typical VM image is around
    1 GiB.^([1](ch01.html#idm45979401289376)) A well-designed container image, on
    the other hand, might be a hundred times smaller.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这与虚拟机镜像有何不同？虚拟机镜像也包含应用程序运行所需的一切，但还包括更多其他内容。一个典型的 VM 镜像大约为 1 GiB。[^1] 另一方面，设计良好的容器镜像可能小上百倍。
- en: Because the virtual machine contains lots of unrelated programs, libraries,
    and things that the application will never use, most of its space is wasted. Transferring
    VM images across the network is far slower than optimized containers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因为虚拟机包含许多无关的程序、库和应用程序永远不会使用的内容，它的大部分空间都被浪费了。通过网络传输 VM 镜像比优化的容器慢得多。
- en: 'Even worse, virtual machines are *virtual*: the underlying physical CPU effectively
    implements an *emulated* CPU, which the virtual machine runs on. The virtualization
    layer has a dramatic, negative effect on [performance](https://oreil.ly/OY0GB):
    in tests, virtualized workloads run about 30% slower than the equivalent containers.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，虚拟机是 *虚拟* 的：底层物理 CPU 实际上实现了一个 *仿真* CPU，虚拟机在其上运行。虚拟化层对 [性能](https://oreil.ly/OY0GB)
    有显著且负面的影响：在测试中，虚拟化的工作负载比等效的容器慢大约 30%。
- en: In comparison, containers run directly on the real CPU, with no virtualization
    overhead, just as ordinary binary executables do.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，容器直接在实际 CPU 上运行，没有虚拟化开销，就像普通的二进制可执行文件一样。
- en: And because containers only hold the files they need, they’re much smaller than
    VM images. They also use a clever technique of addressable filesystem *layers*,
    which can be shared and reused between containers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 并且由于容器只包含它们需要的文件，它们比 VM 镜像小得多。它们还使用可寻址的文件系统 *层* 的巧妙技术，这些层可以在容器之间共享和重用。
- en: For example, if you have two containers, each derived from the same Debian Linux
    base image, the base image only needs to be downloaded once, and each container
    can simply reference it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有两个容器，每个都是从相同的 Debian Linux 基础镜像派生的，那么基础镜像只需下载一次，每个容器可以简单地引用它。
- en: The container runtime will assemble all the necessary layers and only download
    a layer if it’s not already cached locally. This makes very efficient use of disk
    space and network bandwidth.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时将组装所有必要的层，并且仅在本地缓存中不存在时下载层。这使得磁盘空间和网络带宽的使用非常高效。
- en: Plug and Play Applications
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插拔式应用程序
- en: Not only is the container the unit of deployment and the unit of packaging;
    it is also the unit of *reuse* (the same container image can be used as a component
    of many different services), the unit of *scaling*, and the unit of *resource
    allocation* (a container can run anywhere sufficient resources are available for
    its own specific needs).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 容器不仅是部署的单位和打包的单位；它还是 *重用* 的单位（相同的容器镜像可以作为许多不同服务的组成部分使用）、*扩展* 的单位和 *资源分配* 的单位（容器可以在满足其特定需求的任何地方运行，只要有足够的资源可用）。
- en: Developers no longer have to worry about maintaining different versions of the
    software to run on different Linux distributions, against different library and
    language versions, and so on. The only thing the container depends on is the operating
    system kernel (Linux, for example).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者不再需要担心维护不同版本的软件以运行在不同的 Linux 发行版上，针对不同的库和语言版本等。容器唯一依赖的是操作系统内核（例如 Linux）。
- en: Simply supply your application in a container image, and it will run on any
    platform that supports the standard container format and has a compatible kernel.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 只需提供一个容器镜像中的应用程序，它就可以在支持标准容器格式并且有兼容内核的任何平台上运行。
- en: 'Kubernetes developers Brendan Burns and David Oppenheimer put it this way in
    their paper [“Design Patterns for Container-Based Distributed Systems”](https://oreil.ly/dAjqF):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 开发者 Brendan Burns 和 David Oppenheimer 在他们的论文 [“基于容器的分布式系统设计模式”](https://oreil.ly/dAjqF)
    中这样描述：
- en: By being hermetically sealed, carrying their dependencies with them, and providing
    an atomic deployment signal (“succeeded”/“failed”), [containers] dramatically
    improve on the previous state of the art in deploying software in the datacenter
    or cloud. But containers have the potential to be much more than just a better
    deployment vehicle—we believe they are destined to become analogous to objects
    in object-oriented software systems, and as such will enable the development of
    distributed system design patterns.
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过密封，携带它们的依赖关系，并提供原子部署信号（“成功”/“失败”），[容器]在数据中心或云中部署软件方面显著改进了以往的技术水平。但容器有可能不仅仅是一个更好的部署工具——我们相信它们注定将成为面向对象软件系统中的对象的类比，从而促进分布式系统设计模式的发展。
- en: Conducting the Container Orchestra
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行容器乐队
- en: 'Operations teams, too, find their workload greatly simplified by containers.
    Instead of having to maintain a sprawling estate of machines of various kinds,
    architectures, and operating systems, all they have to do is run a *container
    orchestrator*: a piece of software designed to join together many different machines
    into a *cluster*. A container orchestrator is a kind of unified compute substrate,
    which appears to the user as a single very powerful computer on which containers
    can run.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 运维团队也发现容器大大简化了他们的工作负载。他们不再需要维护各种类型、架构和操作系统的庞大机器群，他们只需运行一个*容器编排器*：一种软件，旨在将许多不同的机器集合成一个*集群*。容器编排器是一种统一的计算基础设施，对用户来说就像是一台非常强大的单一计算机，可以在上面运行容器。
- en: The terms *orchestration* and *scheduling* are often used loosely as synonyms.
    Strictly speaking, though, orchestration in this context means coordinating and
    sequencing different activities in service of a common goal (like the musicians
    in an orchestra). Scheduling means managing the resources available and assigning
    workloads where they can most efficiently be run. (Not to be confused with scheduling
    in the sense of *scheduled jobs*, which execute at preset times.)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “编排”和“调度”这两个术语常常被宽泛地作为同义词使用。严格来说，在这个背景下，“编排”意味着协调和安排不同的活动以达成共同的目标（就像管弦乐团中的音乐家们）。而“调度”意味着管理现有的资源，并将工作负载分配到最高效的地方运行。（不要与“预定作业”中的调度概念混淆，后者是在预设的时间执行。）
- en: 'A third important activity is *cluster management*: joining multiple physical
    or virtual servers into a unified, reliable, fault-tolerant, apparently seamless
    group.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个重要活动是*集群管理*：将多个物理或虚拟服务器连接成一个统一、可靠、容错的、表面上无缝的群组。
- en: The term *container orchestrator* usually refers to a single service that takes
    care of scheduling, orchestration, and cluster management.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “容器编排器”这个术语通常指的是一个单一的服务，负责调度、编排和集群管理。
- en: '*Containerization* (using containers as your standard method of deploying and
    running software) offered obvious advantages, and a de facto standard container
    format has made possible all kinds of economies of scale. But one problem still
    stood in the way of the widespread adoption of containers: the lack of a standard
    container orchestration system.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器化*（使用容器作为标准的软件部署和运行方法）提供了明显的优势，而事实上的标准容器格式使各种规模经济成为可能。但是，广泛采用容器还面临一个问题：缺乏标准的容器编排系统。'
- en: As long as several different tools for scheduling and orchestrating containers
    competed in the marketplace, businesses were reluctant to place expensive bets
    on which technology to use. But all that was about to change.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 只要市场上存在多种不同的调度和编排容器的工具，企业就不愿意押注于使用哪种技术。但这一切即将改变。
- en: Kubernetes
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes
- en: 'Google was running containers at scale for production workloads long before
    anyone else. Nearly all of Google’s services run in containers: Gmail, Google
    Search, Google Maps, Google App Engine, and so on. Because no suitable container
    orchestration system existed at the time, Google was compelled to invent one.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Google在其他人之前很长一段时间就已经开始大规模生产负载的容器化运行。几乎所有Google的服务都在容器中运行：Gmail、Google搜索、Google地图、Google应用引擎等等。由于当时没有合适的容器编排系统，Google被迫发明了一个。
- en: From Borg to Kubernetes
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Borg到Kubernetes
- en: To solve the problem of running a large number of services at global scale on
    millions of servers, Google developed a private, internal container orchestration
    system it called [Borg](https://oreil.ly/JT8iv).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决在数百万台服务器上全球范围内运行大量服务的问题，Google开发了一个名为[Borg](https://oreil.ly/JT8iv)的私有内部容器编排系统。
- en: Borg is essentially a centralized management system that allocates and schedules
    containers to run on a pool of servers. While very powerful, Borg is tightly coupled
    to Google’s own internal and proprietary technologies, difficult to extend, and
    impossible to release to the public.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Borg实质上是一个集中式管理系统，用于分配和调度容器在一组服务器上运行。虽然非常强大，但Borg紧密耦合于谷歌自有的内部专有技术，难以扩展且无法公开发布。
- en: In 2014, Google founded an open source project named Kubernetes (from the Greek
    word κυβερνήτης, meaning “helmsman, pilot”) that would develop a container orchestrator
    that everyone could use, based on the lessons learned from Borg and its successor,
    [Omega](https://oreil.ly/cQhjw).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，谷歌成立了一个名为Kubernetes的开源项目（来自希腊语单词κυβερνήτης，意为“舵手，领航员”），旨在开发一个容器编排器，供所有人使用，基于从Borg及其后继项目[Omega](https://oreil.ly/cQhjw)中汲取的经验教训。
- en: The rise of Kubernetes was meteoric. While other container orchestration systems
    existed before Kubernetes, none have had quite the same widespread adoption that
    Kubernetes has found. With the advent of a truly free and open source container
    orchestrator, adoption of both containers and Kubernetes grew at a phenomenal
    rate.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的崛起迅猛。虽然在Kubernetes之前存在其他容器编排系统，但没有一个像Kubernetes一样被广泛采用。随着一个真正自由开放源码的容器编排器的出现，容器和Kubernetes的采用率以惊人的速度增长。
- en: 'Kubernetes continues to grow in popularity and is becoming the norm for running
    containerized applications. According to a report published by [*Datadog*](https://www.datadoghq.com/container-report/):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes继续在流行中增长，并正在成为运行容器化应用程序的标准。根据[*Datadog*](https://www.datadoghq.com/container-report/)发布的一份报告：
- en: Kubernetes has become the de facto standard for container orchestration. Today,
    half of organizations running containers use Kubernetes, whether in self-managed
    clusters, or through a cloud provider service… Kubernetes adoption has more than
    doubled since 2017, and continues to grow steadily, without any signs of slowing
    down.
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Kubernetes已成为容器编排的事实标准。如今，一半的运行容器的组织使用Kubernetes，无论是在自管理的集群中，还是通过云服务提供商的服务……自2017年以来，Kubernetes的采用率已经翻了一番，并且稳步增长，没有任何放缓的迹象。
- en: Much like containers standardized the way software is packaged and deployed,
    Kubernetes is standardizing the platform on which to run those containers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 就像容器标准化了软件打包和部署的方式一样，Kubernetes正在标准化运行这些容器的平台。
- en: Why Kubernetes?
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择Kubernetes？
- en: 'Kelsey Hightower, a staff developer advocate at Google, coauthor of [*Kubernetes
    Up & Running*](https://learning.oreilly.com/library/view/kubernetes-up-and/9781492046523/)
    (O’Reilly), and all-around legend in the Kubernetes community, has put it this
    way:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Kelsey Hightower，谷歌的一名高级开发者倡导者，[*Kubernetes Up & Running*](https://learning.oreilly.com/library/view/kubernetes-up-and/9781492046523/)（O’Reilly）的合著者，以及Kubernetes社区的传奇人物，这样描述：
- en: 'Kubernetes does the things that the very best system administrator would do:
    automation, failover, centralized logging, monitoring. It takes what we’ve learned
    in the DevOps community and makes it the default, out of the box.'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Kubernetes实现了最优秀的系统管理员所能做的事情：自动化、故障转移、集中式日志记录、监控。它将我们在DevOps社区中学到的知识变成了默认设置。
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Kelsey Hightower
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Kelsey Hightower
- en: Many of the traditional sysadmin tasks like upgrading servers, installing security
    patches, configuring networks, and running backups are less of a concern in the
    cloud native world. Kubernetes can automate these things for you so that your
    team can concentrate on doing its core work.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生世界中，许多传统的系统管理员任务，如升级服务器、安装安全补丁、配置网络和运行备份，已不再成为问题。Kubernetes可以自动化这些任务，使您的团队可以集中精力做核心工作。
- en: Some of these features, like *load balancing* and *autoscaling*, are built into
    the Kubernetes core; others are provided by add-ons, extensions, and third-party
    tools that use the Kubernetes API. The Kubernetes ecosystem is large, and growing
    all the time.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能，如*负载均衡*和*自动扩展*，已经集成到Kubernetes的核心中；其他功能则由插件、扩展和使用Kubernetes API的第三方工具提供。Kubernetes生态系统庞大且不断增长。
- en: Kubernetes makes deployment easy
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes使部署变得简单
- en: Ops staff love Kubernetes for these reasons, but there are also some significant
    advantages for developers. Kubernetes greatly reduces the time and effort it takes
    to deploy. Zero-downtime deployments are common, because Kubernetes does rolling
    updates by default (starting containers with the new version, waiting until they
    become healthy, and then shutting down the old ones).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 运维人员喜爱Kubernetes的原因在于这些功能，但对开发人员来说也有一些显著优势。Kubernetes大大减少了部署所需的时间和精力。零停机部署很常见，因为Kubernetes默认执行滚动更新（启动带有新版本的容器，等待它们变为健康状态，然后关闭旧版本的容器）。
- en: 'Kubernetes also provides facilities to help you implement continuous deployment
    practices such as *canary deployments*: gradually rolling out updates one server
    at a time to catch problems early (see [“Canary Deployments”](ch13.html#canary)).
    Another common practice is *blue-green* deployments: spinning up a new version
    of the system in parallel, and switching traffic over to it once it’s fully up
    and running (see [“Blue/Green Deployments”](ch13.html#bluegreen)).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes还提供了帮助您实施持续部署实践的设施，例如*金丝雀部署*：逐步在每台服务器上发布更新以尽早发现问题（参见[“金丝雀部署”](ch13.html#canary)）。另一个常见的做法是*蓝绿部署*：在并行中启动系统的新版本，并在完全运行后将流量切换到它（参见[“蓝绿部署”](ch13.html#bluegreen)）。
- en: Demand spikes will no longer take down your service, because Kubernetes supports
    autoscaling. For example, if CPU utilization by a container reaches a certain
    level, Kubernetes can keep adding new replicas of the container until the utilization
    falls below the threshold. When demand falls, Kubernetes will scale down the replicas
    again, freeing up cluster capacity to run other workloads.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 需求峰值将不再导致服务崩溃，因为Kubernetes支持自动扩展。例如，如果容器的CPU利用率达到某个水平，Kubernetes可以持续添加新的容器副本，直到利用率降到阈值以下。需求下降时，Kubernetes会再次缩减副本，释放集群容量以运行其他工作负载。
- en: Because Kubernetes has redundancy and failover built in, your application will
    be more reliable and resilient. Some managed services can even scale the Kubernetes
    cluster itself up and down in response to demand so that you’re never paying for
    a larger cluster than you need at any given moment (see [“Autoscaling”](ch06.html#autoscaling)).
    That does mean that your applications need to be designed in a way to run in a
    dynamic environment, but Kubernetes gives you standard ways to leverage that sort
    of infrastructure.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Kubernetes内置了冗余和故障转移，所以您的应用程序将更加可靠和弹性。一些托管服务甚至可以根据需求调整Kubernetes集群的大小，这样您在任何时刻都不会为超出需要的更大的集群付费（参见[“自动扩展”](ch06.html#autoscaling)）。这确实意味着您的应用程序需要设计成能够在动态环境中运行，但Kubernetes提供了标准方式来利用这种基础设施。
- en: The business will love Kubernetes too, because it cuts infrastructure costs
    and makes much better use of a given set of resources. Traditional servers, even
    cloud servers, are mostly idle most of the time. The excess capacity that you
    need to handle demand spikes is essentially wasted under normal conditions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 企业也会喜欢Kubernetes，因为它降低了基础设施成本，并更好地利用给定资源。传统的服务器，甚至云服务器，大部分时间都处于空闲状态。在正常情况下，您需要处理需求峰值的多余容量基本上是浪费的。
- en: Kubernetes takes that wasted capacity and uses it to run workloads, so you can
    achieve much higher utilization of your machines—and you get scaling, load balancing,
    and failover for free too.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes利用这些浪费的容量来运行工作负载，因此您可以更高效地利用机器，而且您还可以免费获得扩展、负载平衡和故障转移。
- en: 'While some of these features, such as autoscaling, were available before Kubernetes,
    they were always tied to a particular cloud provider or service. Kubernetes is
    *provider-agnostic*: once you’ve defined the resources you use, you can run them
    on any Kubernetes cluster, regardless of the underlying cloud provider.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些功能，如自动扩展，在Kubernetes之前就已经存在，但它们总是与特定的云提供商或服务绑定在一起。Kubernetes是*供应商无关*的：一旦您定义了使用的资源，您可以在任何Kubernetes集群上运行它们，无论底层的云提供商是什么。
- en: 'That doesn’t mean that Kubernetes limits you to the lowest common denominator.
    Kubernetes maps your resources to the appropriate vendor-specific features: for
    example, a load-balanced Kubernetes service on Google Cloud will create a Google
    Cloud load balancer; on Amazon, it will create an Amazon Web Services (AWS) load
    balancer. Kubernetes abstracts away the cloud-specific details, letting you focus
    on defining the behavior of your application.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着 Kubernetes 会限制你到最低公分母。Kubernetes 将你的资源映射到适当的供应商特定功能上：例如，在谷歌云上的负载均衡 Kubernetes
    服务将创建一个谷歌云负载均衡器；在亚马逊上，它将创建一个亚马逊网络服务（AWS）负载均衡器。Kubernetes 抽象掉云特定的细节，让你专注于定义应用程序的行为。
- en: Just as containers are a portable way of defining software, Kubernetes resources
    provide a portable definition of how that software should run.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 就像容器是定义软件的便携方式一样，Kubernetes 资源提供了软件应该如何运行的便携定义。
- en: Will Kubernetes Disappear?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 会消失吗？
- en: 'Oddly enough, despite the current excitement around Kubernetes, we may not
    be talking much about it in years to come. Many things that once were new and
    revolutionary are now so much part of the fabric of computing that we don’t really
    think about them: microprocessors, the mouse, the internet.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 令人奇怪的是，尽管当前对 Kubernetes 的兴奋，我们在未来可能不会再多谈论它。许多曾经新颖革命的东西现在已经成为计算的一部分，我们并不真正去思考它们：微处理器、鼠标、互联网。
- en: Kubernetes, too, is likely to fade into the background and become part of the
    plumbing. It’s boring, in a good way! Once you learn what you need to know to
    deploy your application to Kubernetes, you can spend your time focusing on adding
    features to your application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 也可能会逐渐淡出视线，成为基础设施的一部分。这很无聊，但也很好！一旦你学会了在 Kubernetes 上部署应用程序所需的知识，你就可以把时间集中在为应用程序添加功能上了。
- en: Managed service offerings for Kubernetes will likely do more and more of the
    heavy lifting behind running Kubernetes itself. In 2021, Google Cloud Platform
    (GCP) released a new offering to their existing Kubernetes service called Autopilot
    that handles cluster upgrades, networking, and scaling the VMs up and down depending
    on the demand. Other cloud providers are also moving in that direction and offering
    Kubernetes-based platforms where developers only need to worry about running their
    application and not focus on the underlying infrastructure.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 Kubernetes 的托管服务很可能会在 Kubernetes 自身的运行背后做更多的重活。2021年，谷歌云平台（GCP）推出了名为 Autopilot
    的新服务，用于其现有的 Kubernetes 服务，它负责集群升级、网络以及根据需求自动缩放虚拟机。其他云服务提供商也朝着这个方向发展，并提供基于 Kubernetes
    的平台，开发人员只需关注应用程序的运行，而不用担心底层基础设施。
- en: Kubernetes Is Not a Panacea
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 不是万能药
- en: Will all software infrastructure of the future be entirely Kubernetes-based?
    Probably not. Is it incredibly easy and straightforward to run any and all types
    of workloads? Not quite.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所有未来的软件基础设施都会完全基于 Kubernetes 吗？可能不会。运行任何类型的工作负载是否非常简单明了？还不完全是。
- en: For example, running databases on distributed systems requires careful consideration
    as to what happens around restarts and how to ensure that data remains consistent.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在分布式系统上运行数据库需要仔细考虑重新启动时发生的事情，以及如何确保数据保持一致。
- en: Orchestrating software in containers involves spinning up new interchangeable
    instances without requiring coordination between them. But database replicas are
    not interchangeable; they each have a unique state, and deploying a database replica
    requires coordination with other nodes to ensure things like schema changes happen
    everywhere at the same time.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在容器中编排软件涉及启动新的可互换实例，而无需它们之间的协调。但是数据库副本并非可互换；它们各自具有唯一的状态，并且部署数据库副本需要与其他节点协调，以确保诸如模式更改同时发生在所有地方。
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sean Loiselle, Cockroach Labs](https://oreil.ly/ZY3qj)'
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[肯尼思·洛伊瑟尔，蟑螂实验室](https://oreil.ly/ZY3qj)'
- en: While it’s perfectly possible to run stateful workloads like databases in Kubernetes
    with enterprise-grade reliability, it requires a large investment of time and
    engineering that it may not make sense for your company to make (see [“Run Less
    Software”](ch03.html#runlesssoftware)). It’s usually more cost-effective to use
    a managed database service instead.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以在 Kubernetes 中运行像数据库这样的有状态工作负载，并具有企业级可靠性，但这需要大量的时间和工程投入，也许并不适合你的公司（见[“少运行软件”](ch03.html#runlesssoftware)）。通常来说，使用托管数据库服务更加经济高效。
- en: Secondly, some things may not actually need Kubernetes, and can run on what
    are sometimes called *serverless* platforms, better named *functions as a service*
    (FaaS) platforms.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，有些事物实际上可能并不需要 Kubernetes，并且可以在有时被称为*无服务器*平台，更好地称为*函数即服务*（FaaS）平台上运行。
- en: Cloud functions
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云函数
- en: AWS Lambda, for example, is a FaaS platform that allows you to run code written
    in Go, Python, Java, Node.js, C#, and other languages without you having to compile
    or deploy your application at all. Amazon does all that for you. Google Cloud
    has similar offerings with Cloud Run and Functions, and Microsoft also offers
    Azure Functions.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，AWS Lambda 是一个 FaaS 平台，允许你运行用 Go、Python、Java、Node.js、C# 和其他语言编写的代码，而你根本不需要编译或部署你的应用程序。亚马逊会为你完成所有这些工作。Google
    Cloud 的 Cloud Run 和 Functions 也提供类似的服务，微软也提供 Azure Functions。
- en: Because you’re billed for the execution time in increments of milliseconds,
    the FaaS model is perfect for computations that only run when you need them to,
    instead of paying for a cloud server, which runs all the time whether you’re using
    it or not.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你按毫秒执行时间计费，FaaS 模型非常适合仅在需要时运行的计算，而不是为了一个云服务器付费，不管你是否在使用它。
- en: These cloud functions are more convenient than containers in some ways (though
    some FaaS platforms can run containers as well). But they are best suited to short,
    standalone jobs (AWS Lambda limits functions to 15 minutes of run time, for example),
    especially those that integrate with existing cloud computation services, such
    as Azure Cognitive Services or the Google Cloud Vision API.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些云函数在某些方面比容器更方便（尽管一些 FaaS 平台也可以运行容器）。但它们最适合短期的独立作业（例如，AWS Lambda 限制函数运行时间为
    15 分钟），特别是那些与现有的云计算服务集成的作业，如 Azure Cognitive Services 或 Google Cloud Vision API。
- en: 'These types of event-driven platforms are often called “serverless” models.
    Technically, there is still a server involved: it’s just somebody else’s server.
    The point is that you don’t have to provision and maintain that server; the cloud
    provider takes care of it for you.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的事件驱动平台通常被称为“无服务器”模型。从技术上讲，仍然涉及到服务器：只不过是别人的服务器。关键在于你不必为其提供和维护服务器；云服务提供商为你处理这一切。
- en: Not every workload is suitable for running on FaaS platforms, by any means,
    but it is still likely to be a key technology for cloud native applications in
    the future.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每种工作负载都适合在 FaaS 平台上运行，但它仍然有可能成为将来云原生应用的关键技术之一。
- en: 'Nor are cloud functions restricted to public FaaS platforms such as Lambda
    Functions or Azure Functions: if you already have a Kubernetes cluster and want
    to run FaaS applications on it, open source projects like [OpenFaaS](https://www.openfaas.com)
    and [Knative](https://knative.dev/docs) make this possible.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 云函数并不仅限于像 Lambda Functions 或 Azure Functions 这样的公共 FaaS 平台：如果你已经拥有 Kubernetes
    集群并希望在其上运行 FaaS 应用程序，像 [OpenFaaS](https://www.openfaas.com) 和 [Knative](https://knative.dev/docs)
    这样的开源项目使这成为可能。
- en: Some of these Kubernetes serverless platforms encompass both long-running containers
    and event-driven short-lived functions, which may mean that in the future the
    distinction between these types of compute may blur or disappear altogether.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Kubernetes 无服务器平台包含长期运行的容器和事件驱动的短期函数，这可能意味着将来这些计算类型之间的区别可能会变得模糊或完全消失。
- en: Cloud Native
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生
- en: The term *cloud native* has become an increasingly popular shorthand way of
    talking about modern applications and services that take advantage of the cloud,
    containers, and orchestration, often based on open source software.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*云原生*这个术语已经成为越来越流行的简化方式，用来讨论利用云、容器和编排的现代应用和服务，通常基于开源软件。'
- en: Indeed, the [Cloud Native Computing Foundation (CNCF)](https://www.cncf.io)
    was founded in 2015 to, in their words, “foster a community around a constellation
    of high-quality projects that orchestrate containers as part of a microservices
    architecture.”
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，[Cloud Native Computing Foundation (CNCF)](https://www.cncf.io) 成立于2015年，他们的话是为了“促进围绕微服务架构中的容器进行编排的高质量项目的社区”。
- en: 'Part of the Linux Foundation, the CNCF exists to bring together developers,
    end users, and vendors, including the major public cloud providers. The best-known
    project under the CNCF umbrella is Kubernetes itself, but the foundation also
    incubates and promotes other key components of the cloud native ecosystem: Prometheus,
    Envoy, Helm, Fluentd, gRPC, and many more.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Linux基金会的一部分，CNCF致力于汇集开发人员、最终用户和供应商，包括主要的公共云提供商。在CNCF伞下最著名的项目是Kubernetes本身，但基金会还孵化和推广云原生生态系统的其他关键组件：Prometheus、Envoy、Helm、Fluentd、gRPC等等。
- en: So what exactly do we mean by *cloud native*? Like most such things, it means
    different things to different people, but perhaps there is some common ground.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们究竟指的是什么*云原生*？像大多数类似的事物一样，它对不同的人可能意味着不同的东西，但或许存在一些共同点。
- en: First, *cloud* does not necessarily mean a public cloud provider, like AWS or
    Azure. Many organizations run their own internal “cloud” platforms, often while
    also simultaneously using one or multiple public providers for different workloads.
    The term *cloud* loosely means the platform of servers used to run software infrastructure,
    and that can take many forms.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，*云*并不一定意味着像AWS或Azure这样的公共云提供商。许多组织在同时使用一个或多个公共提供商为不同工作负载提供服务的同时，也在内部运行自己的“云”平台。术语*云*宽泛地意味着用于运行软件基础设施的服务器平台，可以采用多种形式。
- en: So what makes an application cloud native? Just taking an existing application
    and running it on a cloud compute instance does not make it cloud native. Neither
    is it just about running it in a container, or using cloud services such as Azure’s
    Cosmos DB or Google’s Pub/Sub, although those may well be important aspects of
    a cloud native application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 那么是什么使得一个应用程序成为云原生？仅仅将现有的应用程序在云计算实例上运行并不会使其成为云原生。它也不仅仅是在容器中运行，或者使用云服务，如Azure的Cosmos
    DB或Google的Pub/Sub，尽管这些可能是云原生应用程序的重要方面之一。
- en: 'So let’s look at a few of the characteristics of cloud native systems that
    most people can agree on:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们来看看大多数人都能认同的云原生系统的一些特性：
- en: Automatable
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化
- en: If applications are to be deployed and managed by machines, instead of humans,
    they need to abide by common standards, formats, and interfaces. Kubernetes provides
    these standard interfaces in a way that means application developers don’t even
    need to worry about them.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序要由机器而不是人类部署和管理，它们需要遵守共同的标准、格式和接口。Kubernetes提供了这些标准接口，这意味着应用程序开发人员甚至不需要担心它们。
- en: Ubiquitous and flexible
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 普遍和灵活
- en: Because they are decoupled from physical resources such as disks, or any specific
    knowledge about the compute node they happen to be running on, containerized microservices
    can easily be moved from one node to another, or even one cluster to another.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们与诸如磁盘或任何特定计算节点的物理资源解耦，容器化的微服务可以轻松地从一个节点移动到另一个节点，甚至从一个集群移动到另一个集群。
- en: Resilient and scalable
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 具有弹性和可伸缩性
- en: 'Traditional applications tend to have single points of failure: the application
    stops working if its main process crashes, or if the underlying machine has a
    hardware failure, or if a network resource becomes congested. Cloud native applications,
    because they are inherently distributed, can be made highly available through
    redundancy and graceful degradation.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用程序往往存在单点故障：如果其主进程崩溃、底层机器发生硬件故障或网络资源拥塞，应用程序将停止工作。由于云原生应用程序本质上是分布式的，通过冗余和优雅降级可以实现高可用性。
- en: Dynamic
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 动态的
- en: A container orchestrator such as Kubernetes can schedule containers to take
    maximum advantage of available resources. It can run many copies of containers
    to achieve high availability, and perform rolling updates to smoothly upgrade
    services without ever dropping traffic.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如Kubernetes之类的容器编排器可以安排容器以充分利用可用资源。它可以运行许多容器的副本以实现高可用性，并执行滚动更新以平稳升级服务，而无需停止流量。
- en: Observable
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察的
- en: 'Cloud native apps, by their nature, are harder to inspect and debug. So a key
    requirement of distributed systems is *observability*: monitoring, logging, tracing,
    and metrics all help engineers understand what their systems are doing (and what
    they’re doing wrong).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 由于云原生应用程序的性质，它们更难以检查和调试。因此，分布式系统的一个关键要求是*可观察性*：监控、日志记录、追踪和度量都有助于工程师了解其系统正在做什么（以及它们做错了什么）。
- en: Distributed
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式
- en: Cloud native is an approach to building and running applications that takes
    advantage of the distributed and decentralized nature of the cloud. It’s about
    how your application works, not where it runs. Instead of deploying your code
    as a single entity (known as a *monolith*), cloud native applications tend to
    be composed of multiple, cooperating, distributed *microservices*. A microservice
    is simply a self-contained service that does one thing. If you put enough microservices
    together, you get an application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生是一种利用云的分布式和去中心化特性来构建和运行应用程序的方法。它关注的是你的应用程序如何工作，而不是它在哪里运行。与将代码部署为单个实体（称为*单体*）不同，云原生应用程序往往由多个协作的分布式*微服务*组成。微服务只是一个自包含的执行单一任务的服务。如果将足够多的微服务放在一起，你就会得到一个应用程序。
- en: It’s not just about microservices
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不仅仅是关于微服务
- en: However, microservices are also not a panacea. Monoliths are easier to understand,
    because everything is in one place, and you can trace the interactions of different
    parts. But it’s hard to scale a monolith, both in terms of the code itself and
    the teams of developers who maintain it. As the code grows, the interactions between
    its various parts grow exponentially, and the system as a whole grows beyond the
    capacity of a single brain to understand it all.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，微服务也不是万能药。单体更容易理解，因为一切都在一个地方，你可以追踪不同部分之间的交互。但是单体应用在代码本身和维护它的开发团队方面都很难扩展。随着代码的增长，其各个部分之间的交互呈指数级增长，整个系统超出了单个大脑理解的能力。
- en: A well-designed cloud native application is composed of microservices, but deciding
    what those microservices should be, where the boundaries are, and how the different
    services should interact is no easy problem. Good cloud native service design
    consists of making wise choices about how to separate the different parts of your
    architecture. However, even a well-designed cloud native application is still
    a distributed system, which makes it inherently complex, difficult to observe
    and reason about, and prone to failure in surprising ways.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一个设计良好的云原生应用程序由微服务组成，但决定这些微服务应该是什么，边界在哪里，以及不同服务如何交互是一个不容易解决的问题。良好的云原生服务设计包括如何明智地选择如何分离架构的不同部分。然而，即使是设计良好的云原生应用程序仍然是一个分布式系统，这使它本质上复杂，难以观察和推理，并且容易以令人惊讶的方式失败。
- en: While cloud native systems tend to be distributed, it’s still possible to run
    monolithic applications in the cloud, using containers, and gain considerable
    business value from doing so. This may be a step on the road to gradually migrating
    parts of the monolith outward to modern microservices, or a stopgap measure pending
    the redesign of the system to be fully cloud native.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然云原生系统往往是分布式的，但仍然有可能在云中运行单体应用程序，使用容器，并从中获得相当大的商业价值。这可能是逐步将单体的部分迁移到现代化的微服务的过程中的一步，或者是在重新设计系统以完全符合云原生要求之前的一个权宜之计。
- en: The Future of Operations
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运维的未来
- en: Operations, infrastructure engineering, and system administration are highly
    skilled jobs. Are they at risk in a cloud native future? We think not.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 运维、基础设施工程和系统管理是高技能的工作。它们在云原生的未来是否面临风险？我们认为不会。
- en: Instead, these skills will only become more important. Designing and reasoning
    about distributed systems is hard. Networks and container orchestrators are complicated.
    Every team developing cloud native applications will need operations skills and
    knowledge. Automation frees up staff from boring, repetitive, manual work to deal
    with more complex, interesting, and fun problems that computers can’t yet solve
    for themselves.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，这些技能只会变得更加重要。设计和推理分布式系统是困难的。网络和容器编排器是复杂的。每个开发云原生应用程序的团队都需要运维技能和知识。自动化使员工从无聊、重复、手动的工作中解脱出来，去处理计算机尚无法自行解决的更复杂、有趣和有趣的问题。
- en: That doesn’t mean all current operations jobs are guaranteed. Sysadmins used
    to be able to get by without coding skills, except maybe cooking up the odd simple
    shell script. In the cloud native world, that won’t be enough to succeed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着所有当前的运维工作都是保证的。系统管理员过去可以不需要编码技能，除了可能会编写一些简单的shell脚本。在云原生的世界中，这将不足以成功。
- en: In a software-defined world, the ability to write, understand, and maintain
    software becomes critical. If you don’t want to learn new skills, the industry
    will leave you behind—and it has always been that way.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件定义的世界中，编写、理解和维护软件的能力变得至关重要。如果你不想学习新技能，行业会把你抛在后面——这一直是如此。
- en: Distributed DevOps
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式DevOps
- en: Rather than being concentrated in a single operations team that services other
    teams, ops expertise will become distributed among many teams.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 运维专业知识不再集中在一个为其他团队提供服务的运维团队中，而是分布在许多团队中。
- en: Each development team will need at least one ops specialist, responsible for
    the health of the systems or services the team provides. They will be a developer
    as well, but they will also be the domain expert on networking, Kubernetes, performance,
    resilience, and the tools and systems that enable the other developers to deliver
    their code to the cloud.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发团队至少需要一个运维专家，负责团队提供的系统或服务的健康状况。他们也会是开发者，但他们还将是网络，Kubernetes，性能，弹性以及其他开发者提供其代码到云端的工具和系统的领域专家。
- en: Thanks to the DevOps revolution, there will no longer be room in most organizations
    for devs who can’t ops, or ops who don’t dev. The distinction between those two
    disciplines is obsolete and is rapidly being erased altogether. Developing and
    operating software are merely two aspects of the same thing.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 由于DevOps革命，大多数组织将不再容纳那些不能运维的开发者，或者不会开发的运维人员。这两个学科之间的区分已经过时，正在迅速消失。开发和运营软件只是同一事物的两个方面。
- en: Some Things Will Remain Centralized
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有些事情将保持集中化
- en: Are there limits to DevOps? Or will the traditional central IT and operations
    team disappear altogether, dissolving into a group of roving internal consultants,
    coaching, teaching, and troubleshooting ops issues?
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是否有限制？或者传统的中央IT和运营团队会完全消失，分解成一群流动的内部顾问，教练，教授和解决运维问题？
- en: We think not, or at least not entirely. Some things still benefit from being
    centralized. It doesn’t make sense for each application or service team to have
    its own way of detecting and communicating about production incidents, for example,
    or its own ticketing system, or deployment tools. There’s no point in everybody
    reinventing their own wheel.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为不会，或者至少不完全是这样。有些事情仍然受益于集中化。例如，每个应用程序或服务团队拥有自己检测和沟通生产事故的方式，或者自己的票务系统或部署工具，这是没有意义的。没有必要让每个人都重新发明自己的轮子。
- en: Developer Productivity Engineering
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者生产力工程
- en: The point is that self-service has its limits, and the aim of DevOps is to speed
    up development teams, not slow them down with unnecessary and redundant work.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于自助服务有其局限性，而DevOps的目标是加速开发团队，而不是通过不必要和多余的工作减慢它们的速度。
- en: Yes, a large part of traditional operations can and should be devolved to other
    teams, primarily those that deploy code and respond to code-related incidents.
    But to enable that to happen, there needs to be a strong central team building
    and supporting the DevOps ecosystem in which all the other teams operate.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，传统运营的大部分工作可以并且应该下放给其他团队，主要是那些部署代码并响应与代码相关事件的团队。但要使这种情况发生，就需要一个强大的中央团队来构建和支持DevOps生态系统，其他所有团队都在这个生态系统中运作。
- en: 'Instead of calling this *team operations*, we like the name *developer productivity
    engineering*. Some organizations call this role *platform engineer* or maybe even
    *DevOps engineer*. The point is that these teams do whatever is necessary to help
    other software engineering teams do their work better and faster: operating infrastructure,
    building tools, busting problems.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不称呼这个团队为*团队运维*，我们喜欢称之为*开发者生产力工程*。一些组织可能称这个角色为*平台工程师*，甚至是*DevOps工程师*。关键是这些团队会做任何必要的事情，帮助其他软件工程团队更好，更快地完成他们的工作：操作基础设施，构建工具，解决问题。
- en: And while developer productivity engineering remains a specialist skill set,
    the engineers themselves may move outward into the organization to bring that
    expertise where it’s needed.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管开发者生产力工程仍然是一种专业技能，工程师们本身可能会向组织外部移动，将专业知识带到需要的地方。
- en: 'Lyft engineer Matt Klein has suggested that, while a pure DevOps model makes
    sense for startups and small firms, as an organization grows, there is a natural
    tendency for infrastructure and reliability experts to gravitate toward a central
    team. But he says that team can’t be scaled indefinitely:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Lyft工程师Matt Klein建议，尽管纯粹的DevOps模型对初创公司和小公司是有意义的，但随着组织的增长，基础设施和可靠性专家自然倾向于集中团队。但他说这个团队不能无限扩展：
- en: By the time an engineering organization reaches ~75 people, there is almost
    certainly a central infrastructure team in place starting to build common substrate
    features required by product teams building microservices. But there comes a point
    at which the central infrastructure team can no longer both continue to build
    and operate the infrastructure critical to business success, while also maintaining
    the support burden of helping product teams with operational tasks.
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当一个工程组织达到大约75人的规模时，几乎肯定会有一个中央基础设施团队开始构建产品团队所需的共同基础特性。但是在某一点上，中央基础设施团队不再能够继续建设和运营对业务成功至关重要的基础设施，同时还要维护帮助产品团队处理操作任务的支持负担。
- en: ''
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Matt Klein](https://oreil.ly/ETAHy)'
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[马特·克莱因](https://oreil.ly/ETAHy)'
- en: At this point, not every developer can be an infrastructure expert, just as
    a single team of infrastructure experts can’t service an ever-growing number of
    developers. For larger organizations, while a central infrastructure team is still
    needed, there’s also a case for embedding *site reliability engineers* (SREs)
    into each development or product team. They bring their expertise to each team
    as consultants and also form a bridge between product development and infrastructure
    operations.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，并非每个开发人员都能成为基础设施专家，就像一个基础设施专家团队无法为日益增长的开发人员数量提供服务一样。对于较大的组织来说，虽然仍然需要一个中央基础设施团队，但在每个开发或产品团队中嵌入*站点可靠性工程师*（SREs）也是有道理的。他们作为顾问向每个团队提供他们的专业知识，同时在产品开发和基础设施运营之间构建桥梁。
- en: You Are the Future
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你就是未来。
- en: If you’re reading this book, it means you are a part of this new cloud native
    future. In the remaining chapters, we’ll cover all the knowledge and skills you’ll
    need as a developer or operations engineer working with cloud infrastructure,
    containers, and Kubernetes.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读本书，这意味着你是云原生未来的一部分。在剩下的章节中，我们将涵盖作为开发人员或运维工程师在云基础设施、容器和Kubernetes上工作所需的所有知识和技能。
- en: Some of these things will be familiar, and some will be new, but we hope that
    when you’ve finished the book you’ll feel more confident in your own ability to
    acquire and master cloud native skills. Yes, there’s a lot to learn, but it’s
    nothing you can’t handle. You’ve got this!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些事物可能会很熟悉，而另一些则可能是新的，但我们希望当您完成本书时，您对自己能力获得和掌握云原生技能会更有信心。是的，有很多东西需要学习，但这并非您无法应对。您能做到！
- en: Now read on.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在继续阅读吧。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We’ve necessarily given you a rather quick tour of the landscape, including
    the history of DevOps, cloud computing, and the emerging standard of using containers
    and Kubernetes for running cloud native applications. We hope it’s enough to bring
    you up to speed with some of the challenges in this field and how they’re likely
    to change the IT industry.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中对这一领域的概况进行了相对快速的介绍，包括DevOps的历史、云计算以及使用容器和Kubernetes来运行云原生应用程序的新兴标准。我们希望这足以让您了解这个领域的一些挑战以及它们如何可能改变IT行业。
- en: 'A quick recap of the main points before we move on to meet Kubernetes in person
    in the next chapter:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们亲自见识Kubernetes之前，让我们快速回顾一下主要观点：
- en: Cloud computing frees you from the expense and overhead of managing your own
    hardware, making it possible for you to build resilient, flexible, scalable distributed
    systems.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算使您摆脱了管理自己硬件的费用和开销，使您能够构建具有弹性、灵活性、可伸缩性的分布式系统。
- en: 'DevOps is a recognition that modern software development doesn’t stop at shipping
    code: it’s about closing the feedback loop between those who write the code and
    those who use it.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps是一种认识，现代软件开发不止于交付代码：它是关于缩小编写代码与使用代码之间反馈环路的差距。
- en: DevOps also brings a code-centric approach and good software engineering practices
    to the world of infrastructure and operations.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps也将代码为中心的方法和良好的软件工程实践带入了基础设施和运维领域。
- en: Containers allow you to deploy and run software in small, standardized, self-contained
    units. This makes it easier and cheaper to build large, diverse, distributed systems,
    by connecting together containerized microservices.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器允许您以小型、标准化、自包含的单元部署和运行软件。通过连接容器化的微服务，这使得构建大型、多样化、分布式系统变得更加容易和便宜。
- en: Orchestration systems take care of deploying your containers, scheduling, scaling,
    networking, and all the things that a good system administrator would do, but
    in an automated, programmable way.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编排系统负责部署您的容器、调度、扩展、网络以及所有一个优秀系统管理员需要做的事情，但以自动化、可编程的方式进行。
- en: Kubernetes is the de facto standard container orchestration system, and it’s
    ready for you to use in production right now, today. It is still a fast-moving
    project, and all of the major cloud providers are offering more managed services
    to handle the underlying core Kubernetes components automatically.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是事实上的标准容器编排系统，您可以立即在生产环境中使用它。这仍然是一个快速发展的项目，所有主要的云服务提供商都提供更多的托管服务，自动处理核心
    Kubernetes 组件的底层操作。
- en: “Serverless” event-driven computing is also becoming popular for cloud native
    applications, often using containers as the runtime. Tools are available to run
    these types of functions on Kubernetes clusters.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “无服务器”事件驱动计算也越来越受到云原生应用的欢迎，通常使用容器作为运行时。现在已有工具可在 Kubernetes 集群上运行这些类型的函数。
- en: Cloud native is a useful shorthand for talking about cloud-based, containerized,
    distributed systems, made up of cooperating microservices, dynamically managed
    by automated infrastructure as code.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生是一个有用的简写术语，用于描述基于云、容器化、分布式系统，由合作的微服务组成，通过自动化的基础设施即代码动态管理。
- en: Operations and infrastructure skills, far from being made obsolete by the cloud
    native revolution, are and will become more important than ever.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远非云原生革命所废除的运维和基础设施技能将变得比以往任何时候都更加重要。
- en: What will go away is the sharp distinction between software engineers and operations
    engineers. It’s all just software now, and we’re all engineers.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会消失的是软件工程师和运维工程师之间的鲜明界限。现在一切都只是软件，我们都是工程师。
- en: ^([1](ch01.html#idm45979401289376-marker)) The *gibibyte* (GiB) is the International
    Electrotechnical Commission (IEC) unit of data, defined as 1,024 *mebibytes* (MiB),
    and *kibibyte* (KiB), is defined as 1,024 bytes. We’ll use IEC units (GiB, MiB,
    KiB) throughout this book to avoid any ambiguity.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm45979401289376-marker)) *Gibibyte*（GiB）是国际电工委员会（IEC）定义的数据单位，等于
    1,024 *Mebibytes*（MiB），而 *Kibibyte*（KiB）则定义为 1,024 字节。我们在本书中将使用 IEC 单位（GiB、MiB、KiB），以避免任何歧义。
