- en: 'Chapter 4\. How Objects Behave: Methods Use Instance Variables'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0071-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**State affects behavior, behavior affects state**. We know that objects have
    **state** and **behavior**, represented by **instance variables** and **methods**.
    But until now, we haven’t looked at how state and behavior are *related*. We already
    know that each instance of a class (each object of a particular type) can have
    its own unique values for its instance variables. Dog A can have a *name* “Fido”
    and a *weight* of 70 pounds. Dog B is “Killer” and weighs 9 pounds. And if the
    Dog class has a method makeNoise(), well, don’t you think a 70-pound dog barks
    a bit deeper than the little 9-pounder? (Assuming that annoying yippy sound can
    be considered a *bark*.) Fortunately, that’s the whole point of an object—it has
    *behavior* that acts on its *state*. In other words, ***methods use instance variable
    values***. Like, “if dog is less than 14 pounds, make yippy sound, else...” or
    “increase weight by 5.” ***Let’s go change some state.***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: a class describes what an object knows and what an object does'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0072-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A class is the blueprint for an object.** When you write a class, you’re
    describing how the JVM should make an object of that type. You already know that
    every object of that type can have different *instance variable* values. But what
    about the methods?'
  prefs: []
  type: TYPE_NORMAL
- en: Can every object of that type have different method behavior?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0072-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Well...***sort of.****
  prefs: []
  type: TYPE_NORMAL
- en: Every instance of a particular class has the same methods, but the methods can
    *behave* differently based on the value of the instance variables.
  prefs: []
  type: TYPE_NORMAL
- en: The Song class has two instance variables, *title* and *artist*. When you call
    the play() method on an the instance, it will play the song represented by the
    value of the *title* and *artist* instance variables for that instance. So, if
    you call the play() method on one instance, you’ll hear the song “Havana” by Cabello,
    while another instance plays “Sing” by Travis. The method code, however, is the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The size affects the bark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A small Dog’s bark is different from a big Dog’s bark.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0073-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The Dog class has an instance variable *size* that the *bark()* method uses
    to decide what kind of bark sound to make.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0073-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0073-03.png)'
  prefs: []
  type: TYPE_IMG
- en: You can send things to a method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as you expect from any programming language, you can pass values into
    your methods. You might, for example, want to tell a Dog object how many times
    to bark by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on your programming background and personal preferences, *you* might
    use the term *arguments* or perhaps *parameters* for the values passed into a
    method. Although there *are* formal computer science distinctions that people
    who wear lab coats (and who will almost certainly not read this book) make, we
    have bigger fish to fry in this book. So *you* can call them whatever you like
    (arguments, donuts, hairballs, etc.) but we’re doing it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A caller passes arguments. A method takes parameters.**'
  prefs: []
  type: TYPE_NORMAL
- en: Arguments are the things you pass into the methods. An ***argument*** (a value
    like 2, Foo, or a reference to a Dog) lands face-down into a...wait for it...***parameter***.
    And a parameter is nothing more than a local variable. A variable with a type
    and a name that can be used inside the body of the method.
  prefs: []
  type: TYPE_NORMAL
- en: 'But here’s the important part: **If a method takes a parameter, you *must*
    pass it something when you call it.** And that something must be a value of the
    appropriate type.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0074-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You can get things back from a method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Methods can also *return* values. Every method is declared with a return type,
    but until now we’ve made all of our methods with a **void** return type, which
    means they don’t give anything back.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0075-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But we can declare a method to give a specific type of value back to the caller,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you declare a method to return a value, you *must* return a value of the
    declared type! (Or a value that is *compatible* with the declared type. We’ll
    get into that more when we talk about polymorphism in [Chapter 7](ch07.xhtml#better_living_in_objectville_inheritance)
    and [Chapter 8](ch08.xhtml#serious_polymorphism_interfaces_and_abst).)
  prefs: []
  type: TYPE_NORMAL
- en: '**Whatever you say you’ll give back, you *better* give back!**'
  prefs: []
  type: TYPE_NORMAL
- en: The compiler won’t let you return the wrong type of thing.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0075-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You can send more than one thing to a method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Methods can have multiple parameters. Separate them with commas when you declare
    them, and separate the arguments with commas when you pass them. Most importantly,
    if a method has parameters, you *must* pass arguments of the right type and order.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a two-parameter method and sending it two arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0076-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass variables into a method, as long as the variable type matches the
    parameter type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0076-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Java is pass-by-value. That means pass-by-copy.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0077-01.png)![image](Images/f0077-02.png)![image](Images/f0077-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reminder: Java cares about type!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0078-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You can’t return a Giraffe when the return type is declared as a Rabbit.
    Same thing with parameters. You can’t pass a Giraffe into a method that takes
    a Rabbit.**'
  prefs: []
  type: TYPE_NORMAL
- en: Cool things you can do with parameters and return types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0079-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we’ve seen how parameters and return types work, it’s time to put
    them to good use: let’s create **Getters** and **Setters**. If you’re into being
    all formal about it, you might prefer to call them *Accessors* and *Mutators*.
    But that’s a waste of perfectly good syllables. Besides, Getters and Setters fits
    a common Java naming convention, so that’s what we’ll call them.'
  prefs: []
  type: TYPE_NORMAL
- en: Getters and Setters let you, well, *get and set things*. Instance variable values,
    usually. A Getter’s sole purpose in life is to send back, as a return value, the
    value of whatever it is that particular Getter is supposed to be Getting. And
    by now, it’s probably no surprise that a Setter lives and breathes for the chance
    to take an argument value and use it to *set* the value of an instance variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0079-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Encapsulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do it or risk humiliation and ridicule.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0080-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Until this most important moment, we’ve been committing one of the worst OO
    faux pas (and we’re not talking minor violation like showing up without the “B”
    in BYOB). No, we’re talking Faux Pas with a capital “F.” And “P.”
  prefs: []
  type: TYPE_NORMAL
- en: Our shameful transgression?
  prefs: []
  type: TYPE_NORMAL
- en: Exposing our data!
  prefs: []
  type: TYPE_NORMAL
- en: Here we are, just humming along without a care in the world leaving our data
    out there for *anyone* to see and even touch.
  prefs: []
  type: TYPE_NORMAL
- en: You may have already experienced that vaguely unsettling feeling that comes
    with leaving your instance variables exposed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exposed means reachable with the dot operator, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Think about this idea of using our remote control to make a direct change to
    the Cat object’s size instance variable. In the hands of the wrong person, a reference
    variable (remote control) is quite a dangerous weapon. Because what’s to prevent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0080-02.png)'
  prefs: []
  type: TYPE_IMG
- en: This would be a Bad Thing. We need to build setter methods for all the instance
    variables, and find a way to force other code to call the setters rather than
    access the data directly.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0080-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Hide the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, it *is* that simple to go from an implementation that’s just begging for
    bad data to one that protects your data *and* protects your right to modify your
    implementation later.
  prefs: []
  type: TYPE_NORMAL
- en: OK, so how exactly do you *hide* the data? With the **`public`** and **`private`**
    access modifiers. You’re familiar with **`public`**—we use it with every main
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an encapsulation *starter* rule of thumb (all standard disclaimers about
    rules of thumb are in effect): mark your instance variables ***private*** and
    provide ***public*** getters and setters for access control. When you have more
    design and coding savvy in Java, you will probably do things a little differently,
    but for now, this approach will keep you safe.'
  prefs: []
  type: TYPE_NORMAL
- en: '**“Sadly, Bill forgot to encapsulate his Cat class and ended up with a flat
    cat.”**'
  prefs: []
  type: TYPE_NORMAL
- en: (overheard at the water cooler)
  prefs: []
  type: TYPE_NORMAL
- en: Java Exposed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0081-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**This week’s interview: An Object gets candid about encapsulation.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** What’s the big deal about encapsulation?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** OK, you know that dream where you’re giving a talk to 500 people
    when you suddenly realize you’re *naked*?'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Yeah, we’ve had that one. It’s right up there with the one about
    the Pilates machine and...no, we won’t go there. OK, so you feel naked. But other
    than being a little exposed, is there any danger?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** Is there any danger? Is there any *danger*? [starts laughing] Hey,
    did all you other instances hear that, *“Is there any danger?”* he asks? [falls
    on the floor laughing]'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** What’s funny about that? Seems like a reasonable question.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** OK, I’ll explain it. It’s [bursts out laughing again, uncontrollably]'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Can I get you anything? Water?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** Whew! Oh boy. No I’m fine, really. I’ll be serious. Deep breath.
    OK, go on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** So what does encapsulation protect you from?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** Encapsulation puts a force-field around my instance variables,
    so nobody can set them to, let’s say, something *inappropriate*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Can you give me an example?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** Happy to. Most instance variable values are coded with certain
    assumptions about their boundaries. Like, think of all the things that would break
    if negative numbers were allowed. Number of bathrooms in an office. Velocity of
    an airplane. Birthdays. Barbell weight. Phone numbers. Microwave oven power.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** I see what you mean. So how does encapsulation let you set boundaries?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** By forcing other code to go through setter methods. That way, the
    setter method can validate the parameter and decide if it’s doable. Maybe the
    method will reject it and do nothing, or maybe it’ll throw an Exception (like
    if it’s a null Social Security number for a credit card application), or maybe
    the method will round the parameter sent in to the nearest acceptable value. The
    point is, you can do whatever you want in the setter method, whereas you can’t
    do *anything* if your instance variables are public.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** But sometimes I see setter methods that simply set the value
    without checking anything. If you have an instance variable that doesn’t have
    a boundary, doesn’t that setter method create unnecessary overhead? A performance
    hit?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object:** The point to setters (and getters, too) is that ***you can change
    your mind later, without breaking anybody else’s code!*** Imagine if half the
    people in your company used your class with public instance variables, and one
    day you suddenly realized, “Oops—there’s something I didn’t plan for with that
    value, I’m going to have to switch to a setter method.” You break everyone’s code.
    The cool thing about encapsulation is that *you get to change your mind.* And
    nobody gets hurt. The performance gain from using variables directly is so miniscule
    and would rarely—*if ever*—be worth it.'
  prefs: []
  type: TYPE_NORMAL
- en: Encapsulating the GoodDog class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0082-01.png)![image](Images/f0082-02.png)'
  prefs: []
  type: TYPE_IMG
- en: How do objects in an array behave?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like any other object. The only difference is how you *get* to them. In
    other words, how you get the remote control. Let’s try calling methods on Dog
    objects in an array.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) Declare and create a Dog array to hold seven
    Dog references.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![image](Images/f0083-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '* * *'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/1circleb.png) Create two new Dog objects, and assign them
    to the first two array elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Images](Images/1circlec.png) Call methods on the two Dog objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![image](Images/f0083-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Declaring and initializing instance variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You already know that a variable declaration needs at least a name and a type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And you know that you can initialize (assign a value to) the variable at the
    same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: But when you don’t initialize an instance variable, what happens when you call
    a getter method? In other words, what is the *value* of an instance variable *before*
    you initialize it?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0084-01.png)![image](Images/f0084-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You don’t have to initialize instance variables, because they always have a
    default value. Number primitives (including char) get 0, booleans get false, and
    object reference variables get null.
  prefs: []
  type: TYPE_NORMAL
- en: (Remember, null just means a remote control that isn’t controlling / programmed
    to anything. A reference, but no actual object.)
  prefs: []
  type: TYPE_NORMAL
- en: The difference between instance and local variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) **Instance** variables are declared inside a
    class but not within a method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Images](Images/1circleb.png) **Local** variables are declared within a method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0085-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circlec.png) **Local** variables MUST be initialized before
    use!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0085-02.png)![image](Images/f0085-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Local variables do NOT get a default value! The compiler complains if you
    try to use a local variable before the variable is initialized.**'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing variables (primitives or references)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you want to know if two *primitives* are the same; for example, you
    might want to check an int result with some expected integer value. That’s easy
    enough: just use the == operator. Sometimes you want to know if two reference
    variables refer to a single object on the heap; for example, is this Dog object
    exactly the same Dog object I started with? Easy as well: just use the == operator.
    But sometimes you want to know if two *objects* are equal. And for that, you need
    the .equals() method.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea of equality for objects depends on the type of object. For example,
    if two different String objects have the same characters (say, “my name”), they
    are meaningfully equivalent, regardless of whether they are two distinct objects
    on the heap. But what about a Dog? Do you want to treat two Dogs as being equal
    if they happen to have the same size and weight? Probably not. So whether two
    different objects should be treated as equal depends on what makes sense for that
    particular object type. We’ll explore the notion of object equality again in later
    chapters, but for now, we need to understand that the == operator is used *only*
    to compare the bits in two variables. *What* those bits represent doesn’t matter.
    The bits are either the same, or they’re not.
  prefs: []
  type: TYPE_NORMAL
- en: '**To compare two primitives, use the == operator**'
  prefs: []
  type: TYPE_NORMAL
- en: The == operator can be used to compare two variables of any kind, and it simply
    compares the bits.
  prefs: []
  type: TYPE_NORMAL
- en: if (a == b) {...} looks at the bits in a and b and returns true if the bit pattern
    is the same (although all the extra zeros on the left end don’t matter).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0086-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Use == to compare two primitives or to see if two references refer to the
    same object.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use the equals() method to see if two different objects are equal.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**(E.g., two different String objects that both contain the characters “Fred”)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**To see if two references are the same (which means they refer to the same
    object on the heap) use the == operator**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the == operator cares only about the pattern of bits in the variable.
    The rules are the same whether the variable is a reference or primitive. So the
    == operator returns true if two reference variables refer to the same object!
    In that case, we don’t know what the bit pattern is (because it’s dependent on
    the JVM and hidden from us), but we *do* know that whatever it looks like, *it
    will be the same for two references to a single object*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0086-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0087-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile.
    If they won’t compile, how would you fix them, and if they do compile, what would
    be their output?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/arr1.png) **Answers in [“BE the Compiler”](#be_the_compiler_left_parenthesisfro-1000).**'
  prefs: []
  type: TYPE_NORMAL
- en: A bunch of Java components, in full costume, are playing a party game, “Who
    am I?” They give you a clue, and you try to guess who they are, based on what
    they say. Assume they always tell the truth about themselves. If they happen to
    say something that could be true for more than one attendee, then write down all
    for whom that sentence applies. Fill in the blanks next to the sentence with the
    names of one or more attendees.
  prefs: []
  type: TYPE_NORMAL
- en: Who Am I?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0045-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Tonight’s attendees:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**instance variable, argument, return, getter, setter, encapsulation, public,
    private, pass by value, method**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **A class can have any number of these.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **A method can have only one of these.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **This can be implicitly promoted.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **I prefer my instance variables private.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **It really means “make a copy.”** | __________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **Only setters should update these.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **A method can have many of these.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **I return something by definition.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **I shouldn’t be used with instance variables.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **I can have many arguments.** | __________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **By definition, I take one argument.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **These help create encapsulation.** | __________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **I always fly solo.** | __________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '![Images](Images/arr1.png) **Answers in [“Who Am I?”](#who_am_iquestion_mark_left_parenthes-id0).**'
  prefs: []
  type: TYPE_NORMAL
- en: Mixed Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: A short Java program is listed to your right. Two blocks of the program are
    missing. Your challenge is to **match the candidate blocks of code** (below) **with
    the output** that you’d see if the blocks were inserted.
  prefs: []
  type: TYPE_NORMAL
- en: Not all the lines of output will be used, and some of the lines of output might
    be used more than once. Draw lines connecting the candidate blocks of code with
    their matching command-line output.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0090-01.png)![image](Images/f0090-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr1.png) **Answers in [“Mixed Messages”](#mixed_messages_left_parenthesisfrom_page).**'
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)![image](Images/common-06.png)'
  prefs: []
  type: TYPE_IMG
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You may **not** use the same snippet more than once,
    and you won’t need to use all the snippets. Your ***goal*** is to make a class
    that will compile and run and produce the output listed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Pool Puzzle”](#pool_puzzle_left_parenthesisfrom_page_91).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0091-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: Each snippet from the pool can be used only once!**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0091-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Fast Times in Stim-City**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Five-Minute Mystery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Buchanan roughly grabbed Jai’s arm from behind, Jai froze. Jai knew that
    Buchanan was as stupid as he was ugly and he didn’t want to spook the big guy.
    Buchanan ordered Jai into his boss’s office, but Jai’d done nothing wrong (lately),
    so he figured a little chat with Buchanan’s boss Leveler couldn’t be too bad.
    He’d been moving lots of neural-stimmers in the west side lately, and he figured
    Leveler would be pleased. Black market stimmers weren’t the best money pump around,
    but they were pretty harmless. Most of the stim-junkies he’d seen tapped out after
    a while and got back to life, maybe just a little less focused than before.
  prefs: []
  type: TYPE_NORMAL
- en: Leveler’s “office” was a skungy-looking skimmer, but once Buchanan shoved him
    in, Jai could see that it’d been modified to provide all the extra speed and armor
    that a local boss like Leveler could hope for. “Jai my boy,” hissed Leveler, “pleasure
    to see you again.” “Likewise I’m sure...,” said Jai, sensing the malice behind
    Leveler’s greeting, “We should be square Leveler, have I missed something?” “Ha!
    You’re making it look pretty good, Jai. Your volume is up, but I’ve been experiencing,
    shall we say, a little ‘breach’ lately,” said Leveler.
  prefs: []
  type: TYPE_NORMAL
- en: Jai winced involuntarily; he’d been a top drawer jack-hacker in his day. Anytime
    someone figured out how to break a street-jack’s security, unwanted attention
    turned toward Jai. “No way it’s me man,” said Jai, “not worth the downside. I’m
    retired from hacking, I just move my stuff and mind my own business.” “Yeah, yeah,”
    laughed Leveler, “I’m sure you’re clean on this one, but I’ll be losing big margins
    until this new jack-hacker is shut out!” “Well, best of luck, Leveler. Maybe you
    could just drop me here and I’ll go move a few more ‘units’ for you before I wrap
    up today,” said Jai.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0092-01.png)'
  prefs: []
  type: TYPE_IMG
- en: “I’m afraid it’s not that easy, Jai. Buchanan here tells me that word is you’re
    current on Java NE 37.3.2,” insinuated Leveler. “Neural edition? Sure, I play
    around a bit, so what?” Jai responded, feeling a little queasy. “Neural edition’s
    how I let the stim-junkies know where the next drop will be,” explained Leveler.
    “Trouble is, some stim-junkie’s stayed straight long enough to figure out how
    to hack into my Warehousing database.” “I need a quick thinker like yourself,
    Jai, to take a look at my StimDrop Java NE class; methods, instance variables,
    the whole enchilada, and figure out how they’re getting in. It should...,” “HEY!”
    exclaimed Buchanan, “I don’t want no scum hacker like Jai nosin’ around my code!”
    “Easy big guy,” Jai saw his chance, “I’m sure you did a top rate job with your
    access modi...” “Don’t tell me, bit twiddler!” shouted Buchanan, “I left all of
    those junkie-level methods public so they could access the drop site data, but
    I marked all the critical WareHousing methods private. Nobody on the outside can
    access those methods, buddy, nobody!”
  prefs: []
  type: TYPE_NORMAL
- en: “I think I can spot your leak, Leveler. What say we drop Buchanan here off at
    the corner and take a cruise around the block?” suggested Jai. Buchanan clenched
    his fists and started toward Jai, but Leveler’s stunner was already on Buchanan’s
    neck, “Let it go, Buchanan,” sneered Leveler, “Keep your hands where I can see
    them and step outside. I think Jai and I have some plans to make.”
  prefs: []
  type: TYPE_NORMAL
- en: '***What did Jai suspect?***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Will he get out of Leveler’s skimmer with all his bones intact?***'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Five-Minute Mystery”](#five_minute_mystery_left_parenthesisfrom).**'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Sharpen your pencil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Sharpen your pencil”](#sharpen_your_pencil-id00005))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0093-01.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“BE the Compiler”](#be_the_compiler-id000200))
  prefs: []
  type: TYPE_NORMAL
- en: 'Class ‘XCopy’ compiles and runs as it stands! The output is: ‘42 84’. Remember,
    Java is pass by value, (which means pass by copy), and the variable ‘orig’ is
    not changed by the go( ) method.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0093-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Who Am I?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Who Am I?”](#who_am_i-id0100002))
  prefs: []
  type: TYPE_NORMAL
- en: '| **A class can have any number of these.** | **instance variables, getter,
    setter, method** |'
  prefs: []
  type: TYPE_TB
- en: '| **A method can have only one of these.** | **return** |'
  prefs: []
  type: TYPE_TB
- en: '| **This can be implicitly promoted.** | **return, argument** |'
  prefs: []
  type: TYPE_TB
- en: '| **I prefer my instance variables private.** | **encapsulation** |'
  prefs: []
  type: TYPE_TB
- en: '| **It really means “make a copy.”** | **pass by value** |'
  prefs: []
  type: TYPE_TB
- en: '| **Only setters should update these.** | **instance variables** |'
  prefs: []
  type: TYPE_TB
- en: '| **A method can have many of these.** | **argument** |'
  prefs: []
  type: TYPE_TB
- en: '| **I return something by definition.** | **getter** |'
  prefs: []
  type: TYPE_TB
- en: '| **I shouldn’t be used with instance variables** | **public** |'
  prefs: []
  type: TYPE_TB
- en: '| **I can have many arguments.** | **method** |'
  prefs: []
  type: TYPE_TB
- en: '| **By definition, I take one argument.** | **setter** |'
  prefs: []
  type: TYPE_TB
- en: '| **These help create encapsulation.** | **getter, setter, public, private**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **I always fly solo.** | **return** |'
  prefs: []
  type: TYPE_TB
- en: Puzzle Solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (from [“Pool Puzzle”](#pool_puzzle-id00002))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0094-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Five-Minute Mystery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Five-Minute Mystery”](#five-minute_mystery-id00001))
  prefs: []
  type: TYPE_NORMAL
- en: '**What did Jai suspect?**'
  prefs: []
  type: TYPE_NORMAL
- en: Jai knew that Buchanan wasn’t the sharpest pencil in the box. When Jai heard
    Buchanan talk about his code, Buchanan never mentioned his instance variables.
    Jai suspected that while Buchanan did in fact handle his methods correctly, he
    failed to mark his instance variables `private.` That slip-up could have easily
    cost Leveler thousands.
  prefs: []
  type: TYPE_NORMAL
- en: Mixed Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Mixed Messages”](#mixed_messages-id00002))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0094-02.png)'
  prefs: []
  type: TYPE_IMG
