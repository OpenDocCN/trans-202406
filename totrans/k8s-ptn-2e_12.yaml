- en: Chapter 9\. Daemon Service
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章\. **Daemon Service**
- en: The *Daemon Service* pattern allows you to place and run prioritized, infrastructure-focused
    Pods on targeted nodes. It is used primarily by administrators to run node-specific
    Pods to enhance the Kubernetes platform capabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*Daemon Service* 模式允许您在目标节点上放置和运行优先级高、基础设施相关的 Pods。主要由管理员使用，以增强 Kubernetes
    平台的能力。'
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: The concept of a daemon in software systems exists at many levels. At an operating
    system level, a *daemon* is a long-running, self-recovering computer program that
    runs as a background process. In Unix, the names of daemons end in *d*, such as
    httpd, named, and sshd. In other operating systems, alternative terms such as
    *services-started tasks* and *ghost jobs* are used.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件系统中，**daemon** 的概念存在于多个级别。在操作系统级别，*daemon* 是一个长时间运行的、自我恢复的计算机程序，作为后台进程运行。在
    Unix 系统中，daemon 的名称以 *d* 结尾，如 httpd、named 和 sshd。在其他操作系统中，使用替代术语如 *services-started
    tasks* 和 *ghost jobs*。
- en: Regardless of what these programs are called, the common characteristics among
    them are that they run as processes and usually do not interact with the monitor,
    keyboard, and mouse and are launched at system boot time. A similar concept also
    exists at the application level. For example, in the Java Virtual Machine, daemon
    threads run in the background and provide supporting services to the user threads.
    These daemon threads have a low priority, run in the background without a say
    in the life of the application, and perform tasks such as garbage collection or
    finalization.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不管这些程序被称为什么，它们的共同特征是作为进程运行，并且通常不与监视器、键盘和鼠标交互，并在系统启动时启动。在应用程序级别也存在类似的概念。例如，在
    Java 虚拟机中，daemon 线程在后台运行，并为用户线程提供支持服务。这些 daemon 线程优先级低，后台运行，并且在应用程序生命周期中没有参与，并执行垃圾回收或
    finalization 等任务。
- en: Similarly, Kubernetes also has the concept of a DaemonSet. Considering that
    Kubernetes is a distributed platform spread across multiple nodes and with the
    primary goal of managing application Pods, a DaemonSet is represented by Pods
    that run on the cluster nodes and provide some background capabilities for the
    rest of the cluster.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，Kubernetes 也有 **DaemonSet** 的概念。考虑到 Kubernetes 是一个跨多个节点分布的分布式平台，并且其主要目标是管理应用程序
    Pods，**DaemonSet** 由在集群节点上运行的 Pods 表示，并为集群的其余部分提供一些后台功能。
- en: Solution
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: ReplicaSet and its predecessor ReplicationController are control structures
    responsible for making sure a specific number of Pods are running. These controllers
    constantly monitor the list of running Pods and make sure the actual number of
    Pods always matches the desired number. In that regard, a DaemonSet is a similar
    construct and is responsible for ensuring that a certain number of Pods are always
    running. The difference is that the first two run a specific number of Pods, usually
    driven by the application requirements of high availability and user load, irrespective
    of the node count.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReplicaSet** 及其前身 **ReplicationController** 是控制结构，负责确保特定数量的 Pods 正在运行。这些控制器不断监视运行中的
    Pods 列表，并确保实际的 Pods 数量始终与期望的数量匹配。在这方面，**DaemonSet** 是一个类似的结构，负责确保一定数量的 Pods 始终在运行。不同之处在于前两者运行特定数量的
    Pods，通常由应用程序要求驱动，用于高可用性和用户负载，而不考虑节点数。'
- en: On the other hand, a DaemonSet is not driven by consumer load in deciding how
    many Pod instances to run and where to run. Its main purpose is to keep running
    a single Pod on every node or specific nodes. Let’s see such a DaemonSet definition
    next in [Example 9-1](#ex-daemonset).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**DaemonSet** 不受消费者负载的驱动，来决定运行多少个 Pod 实例以及在哪里运行。它的主要目的是在每个节点或特定节点上保持运行一个单独的
    Pod。接下来我们看一个如下所示的 [Example 9-1](#ex-daemonset) 中的 DaemonSet 定义。
- en: Example 9-1\. DaemonSet resource
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-1\. **DaemonSet** 资源
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_daemon_service_CO1-1)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_daemon_service_CO1-1)'
- en: Use only nodes with the label `feature` set to value `hw-rng`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用标签 `feature` 设置为值 `hw-rng` 的节点。
- en: '[![2](assets/2.png)](#co_daemon_service_CO1-2)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_daemon_service_CO1-2)'
- en: DaemonSets often mount a portion of a node’s filesystem to perform maintenance
    actions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**DaemonSets** 通常会挂载节点文件系统的一部分，以执行维护操作。'
- en: '[![3](assets/3.png)](#co_daemon_service_CO1-3)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_daemon_service_CO1-3)'
- en: '`hostPath` for accessing the node directories directly.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用于直接访问节点目录的 `hostPath`。
- en: 'Given this behavior, the primary candidates for a DaemonSet are usually infrastructure-related
    processes, such as cluster storage providers, log collectors, metric exporters,
    and even kube-proxy, that perform cluster-wide operations. There are many differences
    in how DaemonSet and ReplicaSet are managed, but the main ones are the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这种行为，守护进程集的主要候选对象通常是基础架构相关的进程，例如集群存储提供者、日志收集器、度量导出器，甚至kube-proxy，这些进程执行集群范围的操作。守护进程集和副本集管理方式有很多不同之处，但主要的区别如下：
- en: By default, a DaemonSet places one Pod instance on every node. That can be controlled
    and limited to a subset of nodes by using the `nodeSelector` or `affinity` fields.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，守护进程集在每个节点上放置一个Pod实例。可以通过使用`nodeSelector`或`affinity`字段来控制和限制放置在节点子集上的Pod。
- en: A Pod created by a DaemonSet already has `nodeName` specified. As a result,
    the DaemonSet doesn’t require the existence of the Kubernetes scheduler to run
    containers. That also allows you to use a DaemonSet for running and managing the
    Kubernetes components.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 守护进程集创建的Pod已经指定了`nodeName`。因此，守护进程集无需存在Kubernetes调度器来运行容器。这也允许您使用守护进程集来运行和管理Kubernetes组件。
- en: Pods created by a DaemonSet can run before the scheduler has started, which
    allows them to run before any other Pod is placed on a node.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 守护进程集创建的Pod可以在调度器启动之前运行，这使它们能够在任何其他Pod被放置到节点上之前运行。
- en: Since the scheduler is not used, the `unschedulable` field of a node is not
    respected by the DaemonSet controller.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于调度器未被使用，节点的`unschedulable`字段不会被守护进程集控制器所尊重。
- en: Pods created by a DaemonSet can have a `RestartPolicy` only set to `Always`
    or left unspecified, which defaults to `Always`. This is to ensure that when a
    liveness probe fails, the container will be killed and always restarted.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由守护进程集创建的Pod的`RestartPolicy`只能设置为`Always`或者不指定，默认为`Always`。这是为了确保当存活探针失败时，容器将被终止并始终重新启动。
- en: Pods managed by a DaemonSet are supposed to run only on targeted nodes and,
    as a result, are treated with higher priority by many controllers. For example,
    the descheduler will avoid evicting such Pods, the cluster autoscaler will manage
    them separately, etc.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 守护进程集管理的Pod只能在目标节点上运行，因此在许多控制器中被视为具有较高优先级。例如，去调度器将避免驱逐这些Pod，集群自动伸缩器将单独管理它们，等等。
- en: The main use case for DaemonSets is to run system-critical Pods on certain nodes
    in the cluster. The DaemonSet controller ensures that all eligible nodes run a
    copy of a Pod by assigning the Pod directly to the node by setting the `nodeName`
    field of the Pod specification. This allows DaemonSet Pods to be scheduled even
    before the default scheduler starts and keeps it immune to any scheduler customizations
    configured by the user. This approach works as long as there are enough resources
    on the nodes and it is done before other Pods are placed. When a node does not
    have enough resources, the DaemonSet controller cannot create a Pod for the node,
    and it cannot do anything such as preemption to release resources on the nodes.
    This duplication of scheduling logic in the DaemonSet controller and the scheduler
    creates maintenance challenges. The DaemonSet implementation also does not benefit
    from new scheduler features such as affinity, anti-affinity, and preemption. As
    a result, with Kubernetes v1.17 and newer versions, DaemonSet uses the default
    scheduler for scheduling by setting the `nodeAffinity` field instead of the `nodeName`
    field to the DaemonSet Pods. This change makes the default scheduler a mandatory
    dependency for running DaemonSets, but at the same time it brings taints, tolerations,
    Pod priority, and preemption to DaemonSets and improves the overall experience
    of running DaemonSet Pods on the desired nodes even when there is resource starvation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 守护进程集的主要用例是在集群中某些节点上运行系统关键的Pod。守护进程集控制器通过直接将Pod分配给节点的方式，通过设置Pod规范的`nodeName`字段，确保所有符合条件的节点运行Pod的副本。这允许守护进程集的Pod在默认调度器启动之前就能够被调度，并且使其免受用户配置的任何调度器自定义的影响。只要节点上有足够的资源并且在放置其他Pod之前完成了，这种方法就能够正常工作。当节点资源不足时，守护进程集控制器无法为该节点创建Pod，并且无法进行任何释放节点资源的操作，如抢占。守护进程集控制器和调度器中调度逻辑的重复创建了维护挑战。守护进程集的实现也无法从新调度器的新特性（如亲和性、反亲和性和抢占）中获益。因此，从Kubernetes
    v1.17及更新版本开始，守护进程集通过设置`nodeAffinity`字段而非`nodeName`字段来为守护进程集的Pod进行调度，使用默认调度器进行调度成为运行守护进程集的必备依赖项，但同时也将污点、容忍性、Pod优先级和抢占引入守护进程集，并在资源匮乏时改善在所需节点上运行守护进程集Pod的整体体验。
- en: 'Typically, a DaemonSet creates a single Pod on every node or subset of nodes.
    Given that, there are several ways to reach Pods managed by DaemonSets:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，DaemonSet 在每个节点或节点子集上创建一个单独的 Pod。基于此，有几种方法可以访问由 DaemonSet 管理的 Pods：
- en: Service
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 服务
- en: Create a Service with the same Pod selector as a DaemonSet, and use the Service
    to reach a daemon Pod load-balanced to a random node.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个带有与 DaemonSet 相同的 Pod 选择器的服务，并使用该服务来访问通过随机节点进行负载均衡的守护 Pod。
- en: DNS
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: DNS
- en: Create a headless Service with the same Pod selector as a DaemonSet that can
    be used to retrieve multiple A records from DNS containing all Pod IPs and ports.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个无头服务，其 Pod 选择器与 DaemonSet 相同，可用于从 DNS 中检索包含所有 Pod IP 和端口的多个 A 记录。
- en: Node IP with `hostPort`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `hostPort` 的节点 IP
- en: Pods in the DaemonSet can specify a `hostPort` and become reachable via the
    node IP addresses and the specified port. Since the combination of node IP and
    `hostPort` and `protocol` must be unique, the number of places where a Pod can
    be scheduled is limited.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: DaemonSet 中的 Pods 可以指定 `hostPort` 并通过节点 IP 地址和指定的端口可达。由于节点 IP、`hostPort` 和 `protocol`
    的组合必须是唯一的，可以安排 Pod 的位置有限。
- en: Also, the application in the DaemonSets Pods can push data to a well-known location
    or service that’s external to the Pod. No consumer needs to reach the DaemonSets
    Pods in this case.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，DaemonSets Pods 中的应用可以将数据推送到已知位置或外部服务，不需要消费者直接访问 DaemonSets Pods。
- en: Static Pods can be used to spin off a containerized version of Kubernetes system
    processes or other containers. However, DaemonSets are better integrated with
    the rest of the platform and are recommended over static Pods.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 静态 Pods 可用于启动 Kubernetes 系统进程或其他容器的容器化版本。然而，与静态 Pods 相比，DaemonSets 与平台的其余部分更好地集成，并推荐使用它们。
- en: Discussion
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: There are other ways to run daemon processes on every node, but they all have
    limitations. Static Pods are managed by the Kubelet but cannot be managed through
    Kubernetes APIs. Bare Pods (Pods without a controller) cannot survive if they
    are accidentally deleted or terminated, nor can they survive a node failure or
    disruptive node maintenance. Init scripts such as upstartd or systemd require
    different toolchains for monitoring and management and cannot benefit from the
    Kubernetes tools used for application workloads. All that makes Kubernetes and
    DaemonSet an attractive option for running daemon processes too.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他方法在每个节点上运行守护进程的方式，但它们都有局限性。静态 Pod 由 Kubelet 管理，但无法通过 Kubernetes API 进行管理。裸
    Pod（没有控制器的 Pod）如果意外删除或终止，将无法生存，也无法在节点故障或节点维护中生存。诸如 upstartd 或 systemd 的初始化脚本需要不同的工具链进行监控和管理，并且无法从用于应用工作负载的
    Kubernetes 工具中获益。所有这些都使得 Kubernetes 和 DaemonSet 成为运行守护进程过程的一个吸引人选项。
- en: In this book, we describe patterns and Kubernetes features primarily used by
    developers rather than platform administrators. A DaemonSet is somewhere in the
    middle, inclining more toward the administrator toolbox, but we include it here
    because it also has relevance to application developers. DaemonSets and CronJobs
    are also perfect examples of how Kubernetes turns single-node concepts such as
    crontab and daemon scripts into multinode clustered primitives for managing distributed
    systems. These are new distributed concepts developers must also be familiar with.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们描述的模式和 Kubernetes 特性主要由开发人员使用，而不是平台管理员。DaemonSet 处于中间位置，更倾向于管理员工具箱，但我们在这里包括它，因为它也与应用开发人员相关。DaemonSets
    和 CronJobs 也是 Kubernetes 将单节点概念（如 crontab 和守护脚本）转换为用于管理分布式系统的多节点集群基元的完美示例。这些是开发人员必须熟悉的新分布式概念。
- en: More Information
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Daemon Service Example](https://oreil.ly/_YRZc)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[守护进程示例服务](https://oreil.ly/_YRZc)'
- en: '[DaemonSet](https://oreil.ly/62c3q)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DaemonSet](https://oreil.ly/62c3q)'
- en: '[Perform a Rolling Update on a DaemonSet](https://oreil.ly/nTSbi)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对 DaemonSet 执行滚动更新](https://oreil.ly/nTSbi)'
- en: '[DaemonSets and Jobs](https://oreil.ly/CnHin)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DaemonSets 和 Jobs](https://oreil.ly/CnHin)'
- en: '[Create Static Pods](https://oreil.ly/yYHft)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建静态 Pod](https://oreil.ly/yYHft)'
