- en: Chapter 9\. Daemon Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Daemon Service* pattern allows you to place and run prioritized, infrastructure-focused
    Pods on targeted nodes. It is used primarily by administrators to run node-specific
    Pods to enhance the Kubernetes platform capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of a daemon in software systems exists at many levels. At an operating
    system level, a *daemon* is a long-running, self-recovering computer program that
    runs as a background process. In Unix, the names of daemons end in *d*, such as
    httpd, named, and sshd. In other operating systems, alternative terms such as
    *services-started tasks* and *ghost jobs* are used.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of what these programs are called, the common characteristics among
    them are that they run as processes and usually do not interact with the monitor,
    keyboard, and mouse and are launched at system boot time. A similar concept also
    exists at the application level. For example, in the Java Virtual Machine, daemon
    threads run in the background and provide supporting services to the user threads.
    These daemon threads have a low priority, run in the background without a say
    in the life of the application, and perform tasks such as garbage collection or
    finalization.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, Kubernetes also has the concept of a DaemonSet. Considering that
    Kubernetes is a distributed platform spread across multiple nodes and with the
    primary goal of managing application Pods, a DaemonSet is represented by Pods
    that run on the cluster nodes and provide some background capabilities for the
    rest of the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReplicaSet and its predecessor ReplicationController are control structures
    responsible for making sure a specific number of Pods are running. These controllers
    constantly monitor the list of running Pods and make sure the actual number of
    Pods always matches the desired number. In that regard, a DaemonSet is a similar
    construct and is responsible for ensuring that a certain number of Pods are always
    running. The difference is that the first two run a specific number of Pods, usually
    driven by the application requirements of high availability and user load, irrespective
    of the node count.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a DaemonSet is not driven by consumer load in deciding how
    many Pod instances to run and where to run. Its main purpose is to keep running
    a single Pod on every node or specific nodes. Let’s see such a DaemonSet definition
    next in [Example 9-1](#ex-daemonset).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-1\. DaemonSet resource
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_daemon_service_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Use only nodes with the label `feature` set to value `hw-rng`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_daemon_service_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: DaemonSets often mount a portion of a node’s filesystem to perform maintenance
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_daemon_service_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`hostPath` for accessing the node directories directly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given this behavior, the primary candidates for a DaemonSet are usually infrastructure-related
    processes, such as cluster storage providers, log collectors, metric exporters,
    and even kube-proxy, that perform cluster-wide operations. There are many differences
    in how DaemonSet and ReplicaSet are managed, but the main ones are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: By default, a DaemonSet places one Pod instance on every node. That can be controlled
    and limited to a subset of nodes by using the `nodeSelector` or `affinity` fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Pod created by a DaemonSet already has `nodeName` specified. As a result,
    the DaemonSet doesn’t require the existence of the Kubernetes scheduler to run
    containers. That also allows you to use a DaemonSet for running and managing the
    Kubernetes components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pods created by a DaemonSet can run before the scheduler has started, which
    allows them to run before any other Pod is placed on a node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the scheduler is not used, the `unschedulable` field of a node is not
    respected by the DaemonSet controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pods created by a DaemonSet can have a `RestartPolicy` only set to `Always`
    or left unspecified, which defaults to `Always`. This is to ensure that when a
    liveness probe fails, the container will be killed and always restarted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pods managed by a DaemonSet are supposed to run only on targeted nodes and,
    as a result, are treated with higher priority by many controllers. For example,
    the descheduler will avoid evicting such Pods, the cluster autoscaler will manage
    them separately, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main use case for DaemonSets is to run system-critical Pods on certain nodes
    in the cluster. The DaemonSet controller ensures that all eligible nodes run a
    copy of a Pod by assigning the Pod directly to the node by setting the `nodeName`
    field of the Pod specification. This allows DaemonSet Pods to be scheduled even
    before the default scheduler starts and keeps it immune to any scheduler customizations
    configured by the user. This approach works as long as there are enough resources
    on the nodes and it is done before other Pods are placed. When a node does not
    have enough resources, the DaemonSet controller cannot create a Pod for the node,
    and it cannot do anything such as preemption to release resources on the nodes.
    This duplication of scheduling logic in the DaemonSet controller and the scheduler
    creates maintenance challenges. The DaemonSet implementation also does not benefit
    from new scheduler features such as affinity, anti-affinity, and preemption. As
    a result, with Kubernetes v1.17 and newer versions, DaemonSet uses the default
    scheduler for scheduling by setting the `nodeAffinity` field instead of the `nodeName`
    field to the DaemonSet Pods. This change makes the default scheduler a mandatory
    dependency for running DaemonSets, but at the same time it brings taints, tolerations,
    Pod priority, and preemption to DaemonSets and improves the overall experience
    of running DaemonSet Pods on the desired nodes even when there is resource starvation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, a DaemonSet creates a single Pod on every node or subset of nodes.
    Given that, there are several ways to reach Pods managed by DaemonSets:'
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs: []
  type: TYPE_NORMAL
- en: Create a Service with the same Pod selector as a DaemonSet, and use the Service
    to reach a daemon Pod load-balanced to a random node.
  prefs: []
  type: TYPE_NORMAL
- en: DNS
  prefs: []
  type: TYPE_NORMAL
- en: Create a headless Service with the same Pod selector as a DaemonSet that can
    be used to retrieve multiple A records from DNS containing all Pod IPs and ports.
  prefs: []
  type: TYPE_NORMAL
- en: Node IP with `hostPort`
  prefs: []
  type: TYPE_NORMAL
- en: Pods in the DaemonSet can specify a `hostPort` and become reachable via the
    node IP addresses and the specified port. Since the combination of node IP and
    `hostPort` and `protocol` must be unique, the number of places where a Pod can
    be scheduled is limited.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the application in the DaemonSets Pods can push data to a well-known location
    or service that’s external to the Pod. No consumer needs to reach the DaemonSets
    Pods in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Static Pods can be used to spin off a containerized version of Kubernetes system
    processes or other containers. However, DaemonSets are better integrated with
    the rest of the platform and are recommended over static Pods.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other ways to run daemon processes on every node, but they all have
    limitations. Static Pods are managed by the Kubelet but cannot be managed through
    Kubernetes APIs. Bare Pods (Pods without a controller) cannot survive if they
    are accidentally deleted or terminated, nor can they survive a node failure or
    disruptive node maintenance. Init scripts such as upstartd or systemd require
    different toolchains for monitoring and management and cannot benefit from the
    Kubernetes tools used for application workloads. All that makes Kubernetes and
    DaemonSet an attractive option for running daemon processes too.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we describe patterns and Kubernetes features primarily used by
    developers rather than platform administrators. A DaemonSet is somewhere in the
    middle, inclining more toward the administrator toolbox, but we include it here
    because it also has relevance to application developers. DaemonSets and CronJobs
    are also perfect examples of how Kubernetes turns single-node concepts such as
    crontab and daemon scripts into multinode clustered primitives for managing distributed
    systems. These are new distributed concepts developers must also be familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Daemon Service Example](https://oreil.ly/_YRZc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DaemonSet](https://oreil.ly/62c3q)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Perform a Rolling Update on a DaemonSet](https://oreil.ly/nTSbi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DaemonSets and Jobs](https://oreil.ly/CnHin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create Static Pods](https://oreil.ly/yYHft)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
