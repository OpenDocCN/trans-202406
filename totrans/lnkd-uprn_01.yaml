- en: Chapter 1\. Service Mesh 101
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章\. 服务网格 101
- en: Linkerd is the first service mesh—in fact, it’s the project that coined the
    term “service mesh.” It was created in 2015 by Buoyant, Inc., as we’ll discuss
    more in [Chapter 2](ch02.html#LUAR_intro_to_linkerd), and for all that time it’s
    been focused on making it easier to produce and operate truly excellent cloud
    native software.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linkerd](https://oreil.ly/dgNqN) 是第一个服务网格，事实上，它是首个提出“服务网格”这个术语的项目。它由 Buoyant,
    Inc. 在 2015 年创建，正如我们将在 [第2章](ch02.html#LUAR_intro_to_linkerd) 中进一步讨论的那样，至今一直致力于使得生产和运行真正优秀的云原生软件变得更加容易。'
- en: 'But what, exactly, is a service mesh? We can start with the definition from
    the [CNCF Glossary](https://oreil.ly/dgNqN):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但究竟什么是服务网格呢？我们可以从 [CNCF 术语表](https://oreil.ly/dgNqN) 中的定义开始。
- en: In a microservices world, apps are broken down into multiple smaller services
    that communicate over a network. Just like your wifi network, computer networks
    are intrinsically unreliable, hackable, and often slow. Service meshes address
    this new set of challenges by managing traffic (i.e., communication) between services
    and adding reliability, observability, and security features uniformly across
    all services.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在微服务世界中，应用程序被分解成多个较小的服务，它们通过网络进行通信。就像您的wifi网络一样，计算机网络本质上是不可靠的、可黑客的，并且通常速度较慢。服务网格通过管理服务之间的流量（即通信），并在所有服务中统一添加可靠性、可观察性和安全性功能，来应对这一新的一套挑战。
- en: The cloud native world is all about computing at a huge range of scales, from
    tiny clusters running on your laptop for development up through the kind of massive
    infrastructure that Google and Amazon wrangle. This works best when applications
    use the microservices architecture, but the microservices architecture is inherently
    more fragile than a monolithic architecture.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生世界涉及从开发中在您的笔记本电脑上运行的小集群到谷歌和亚马逊管理的大规模基础设施的计算。当应用程序采用微服务架构时效果最佳，但微服务架构本质上比单体架构更加脆弱。
- en: Fundamentally, service meshes are about hiding that fragility from the application
    developer—and, indeed, from the application itself. They do this by taking several
    features that are critical when creating robust applications and moving them from
    the application into the infrastructure. This allows application developers to
    focus on what makes their applications unique, rather than having to spend all
    their time worrying about how to provide the critical functions that should be
    the same across all applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上说，服务网格是关于将应用程序开发者和应用程序本身隐藏起来的脆弱性。它们通过将几个关键的特性从应用程序移到基础设施中来实现这一点。这使得应用程序开发者能够专注于使他们的应用程序独特的东西，而不必花费所有时间来担心如何提供应该在所有应用程序中都相同的关键功能。
- en: In this chapter, we’ll take a high-level look at what service meshes do, how
    they work, and why they’re important. In the process, we’ll provide the background
    you need for our more detailed discussions about Linkerd in the rest of the book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将高层次地了解服务网格的作用、工作原理及其重要性。在此过程中，我们将为您提供本书其余部分关于 Linkerd 的更详细讨论所需的背景。
- en: Basic Mesh Functionality
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的网格功能
- en: 'The critical functions provided by services meshes fall into three broad categories:
    *security*, *reliability*, and *observability*. As we examine these three categories,
    we’ll be comparing the way they play out in a typical monolith and in a microservices
    application.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 服务网格提供的关键功能可以大致分为三大类：*安全性*、*可靠性* 和 *可观察性*。在我们分析这三个类别时，我们将比较它们在典型单体应用和微服务应用中的表现。
- en: Of course, “monolith” can mean several different things. [Figure 1-1](#monolith-diagram)
    shows a diagram of the “typical” monolithic application that we’ll be considering.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，“单体”可以指代几种不同的东西。 [图 1-1](#monolith-diagram) 显示了我们将考虑的“典型”单体应用程序的图表。
- en: '![luar 0101](assets/luar_0101.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0101](assets/luar_0101.png)'
- en: Figure 1-1\. A monolithic application
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 单体应用程序
- en: The monolith is a single process within the operating system, which means that
    it gets to take advantage of all the protection mechanisms offered by the operating
    system; other processes can’t see anything inside the monolith, and they *definitely*
    can’t modify anything inside it. Communications between different parts of the
    monolith are typically function calls within the monolith’s single memory space,
    so again there’s no opportunity for any other process to see or alter these communications.
    It’s true that one area of the monolith can alter the memory in use by other parts—in
    fact, this is a huge source of bugs!—but these are generally just errors, rather
    than attacks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 单体应用是操作系统中的一个单一进程，这意味着它可以利用操作系统提供的所有保护机制；其他进程无法看到单体应用内部的任何内容，也*绝对*不能修改其中任何内容。单体应用内不同部分之间的通信通常是单体应用单一内存空间内的函数调用，因此其他进程无法查看或更改这些通信。确实，单体应用的某个区域可以修改其他部分正在使用的内存—事实上，这是错误的一个重要来源！—但这些通常只是错误，而不是攻击。
- en: Multiple Processes Versus Multiple Machines
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多进程对比多机器
- en: “But wait!” we hear you cry. “Any operating system worthy of the name can provide
    protections that do span more than one process! What about memory-mapped files
    or System V shared memory segments? What about the loopback interface and Unix
    domain sockets (to stretch the point a bit)?”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “但等等！”我们听到你们在呼喊。“任何名副其实的操作系统都可以提供跨越一个以上进程的保护！那么内存映射文件或者System V共享内存段怎么办？环回接口和Unix域套接字（稍作拓展）呢？”
- en: 'You’re right: these mechanisms can allow multiple processes to cooperate and
    share information while still being protected by the operating system. However,
    they must be explicitly coded into the application, and they only function on
    a *single machine*. Part of the power of cloud native orchestration systems like
    Kubernetes is that they’re allowed to schedule Pods on any machine in your cluster,
    and you won’t know which machine ahead of time. This is tremendously flexible,
    but it also means that mechanisms that assume everything is on a single machine
    simply won’t work in the cloud native world.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你是对的：这些机制可以允许多个进程在仍然受操作系统保护的情况下合作和共享信息。然而，它们必须明确编码到应用程序中，并且它们仅在*单台机器*上运行。像Kubernetes这样的云原生编排系统的一部分优势在于，它们可以在集群中的任何机器上调度Pod，而你事先不知道哪台机器。这是极其灵活的，但也意味着那些假设一切都在单一机器上的机制在云原生世界中根本行不通。
- en: In contrast, [Figure 1-2](#microservices-diagram) shows the corresponding microservices
    application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，[图 1-2](#microservices-diagram) 显示了对应的微服务应用程序。
- en: '![luar 0102](assets/luar_0102.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0102](assets/luar_0102.png)'
- en: Figure 1-2\. A microservices application
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. 微服务应用程序
- en: With microservices, things are different. Each microservice is a separate process,
    and microservices communicate only over the network—but the protection mechanisms
    provided by the operating system function only *inside* a process. These mechanisms
    aren’t enough in a world where any information shared between microservices has
    to travel over the network.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中，情况有所不同。每个微服务都是一个独立的进程，微服务之间仅通过网络进行通信—但操作系统提供的保护机制仅在*进程内部*有效。在需要微服务之间通信的世界中，这些机制是不够的。
- en: This reliance on communications over the unreliable, insecure network raises
    a *lot* of concerns when developing microservices applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发微服务应用程序时，依赖不可靠且不安全的网络进行通信会引发*很多*问题。
- en: Security
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性
- en: Let’s start with the fact that the network is inherently insecure. This gives
    rise to a number of possible issues, some of which are shown in [Figure 1-3](#insecure-communications).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从网络本身不安全的事实开始。这引发了许多可能的问题，其中一些如[图 1-3](#insecure-communications)所示。
- en: '![luar 0103](assets/luar_0103.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0103](assets/luar_0103.png)'
- en: Figure 1-3\. Communication is a risky business
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-3\. 通信是一项风险重重的业务
- en: 'Some of the most significant security issues are *eavesdropping*, *tampering*,
    *identity theft*, and *overreach*:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最重要的安全问题包括*窃听*、*篡改*、*身份盗窃*和*越权*：
- en: Eavesdropping
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 窃听
- en: Evildoers may be able to intercept communications between two microservices,
    reading communications not intended for them. Depending on what exactly an evildoer
    learns, this could be a minor annoyance or a major disaster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意用户可能会拦截两个微服务之间的通信，阅读并非面向他们的通信。根据恶意用户学到的具体内容，这可能只是轻微烦恼，也可能是重大灾难。
- en: The typical protection against eavesdropping is *encryption*, which scrambles
    the data so that only the intended recipient can understand it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 防止窃听的典型方法是*加密*，它会将数据加密，以便只有预期的接收者能够理解。
- en: Tampering
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 篡改
- en: An evildoer might also be able to modify the data in transit over the network.
    At its simplest, the tampering attack would simply corrupt the data in transit;
    at its most subtle, it would modify the data to be advantageous to the attacker.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意者还可能能够修改网络传输中的数据。在其最简单的形式中，篡改攻击将简单地破坏传输中的数据；在其最微妙的形式中，它将修改数据以有利于攻击者。
- en: It’s *extremely* important to understand that encryption alone will *not* protect
    against tampering! The proper protection is to use *integrity checks* like checksums;
    all well-designed cryptosystems include integrity checks as part of their protocols.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*极其*重要的是要理解，仅仅靠加密是*无法*防止篡改的！正确的保护方法是使用像校验和这样的*完整性检查*；所有设计良好的加密系统都将完整性检查作为其协议的一部分。'
- en: Identity theft
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 身份盗窃
- en: When you hand off credit card details to your payment microservice, how do you
    know for certain that you’re really talking to your payment microservice? If an
    evildoer can successfully pretend to be one of your microservices, that opens
    the door to all manner of troublesome possibilities.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你把信用卡详细信息交给支付微服务时，你怎么能确信你确实在与你的支付微服务交流？如果恶意者成功假装成你的某个微服务，那将为各种麻烦可能性打开大门。
- en: Strong *authentication* is critical to protect against this type of attack.
    It’s the only way to be sure that the microservice you’re talking to is really
    the one you think it is.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的*身份验证*对于防范此类攻击至关重要。这是确保你正在交流的微服务确实是你所认为的那个的唯一方法。
- en: Overreach
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 过度扩展
- en: On the flip side of identity theft, an evildoer may be able to take advantage
    of a place where a microservice is allowed to do things that it simply shouldn’t
    be allowed to do. Imagine, for example, an evildoer finding that the payment microservice
    is perfectly happy to accept requests from the microservice that should merely
    be listing things for sale.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与身份盗窃相反，恶意者可能会利用微服务允许执行本不应允许的操作的地方。例如，想象一下，一个恶意者发现支付微服务可以毫不犹豫地接受来自本应只列出待售物品的微服务的请求。
- en: Careful attention to *authorization* is the key here. In a perfect world, every
    microservice will be able to do exactly what it needs, and no more (the *principle
    of least privilege*).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，注意*授权*至关重要。在理想情况下，每个微服务将能够严格按需操作，而且不多不少（*最小特权原则*）。
- en: Reliability
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可靠性
- en: 'Reliability in the monolith world typically refers to how well the monolith
    functions: when the different parts of the monolith communicate with function
    calls, you don’t typically have to worry about a call getting lost or about one
    of your functions suddenly becoming unresponsive! But, as shown in [Figure 1-4](#unreliable-communications),
    unreliable communications are actually *the norm* with microservices.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在单体架构世界中，可靠性通常指的是单体功能的良好运行：当单体的不同部分通过函数调用进行通信时，通常不必担心调用丢失或者其中一个函数突然无响应！但是，正如在[图 1-4](#unreliable-communications)中所示，与微服务相比，不可靠的通信实际上是*常态*。
- en: '![luar 0104](assets/luar_0104.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0104](assets/luar_0104.png)'
- en: Figure 1-4\. Unreliable communications are the norm
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. 不可靠的通信是常态
- en: 'There are quite a few ways microservices can be unreliable, including:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务可能不可靠的方式有很多，包括：
- en: Request failure
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请求失败
- en: Sometimes requests made over the network fail. There may be any number of possible
    reasons, ranging from a crashed microservice to a network overload or partition.
    Either the application or the infrastructure needs to do something to deal with
    the request that failed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时网络请求会失败。可能的原因有很多，从崩溃的微服务到网络过载或分区。无论是应用程序还是基础设施都需要采取措施来处理失败的请求。
- en: 'In the simplest case, the mesh can simply manage *retries* for the application:
    if the call fails because the called service dies or times out, just resend the
    request. This won’t always work, of course: not all requests are safe to retry,
    and not every failure is transient. But in many cases, simple retry logic can
    be used to great effect.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的情况下，网格可以简单地为应用程序管理*重试*：如果调用失败是因为被调用服务崩溃或超时，则只需重新发送请求。当然，这种方法并不总是有效：并非所有请求都适合重试，也并非每次故障都是暂时性的。但在许多情况下，简单的重试逻辑可以取得很好的效果。
- en: Service failure
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 服务故障
- en: A special case of request failures comes up when it isn’t just a single instance
    of a microservice that crashes, but *all* instances. Maybe a bad version was deployed,
    or maybe an entire cluster crashed. In these cases the mesh can help by *failing
    over* to a backup cluster or to a known-good implementation of the service.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些请求失败的特殊情况下，不仅一个微服务实例会崩溃，而是*所有*实例都可能崩溃。也许是部署了错误版本，或者整个集群崩溃了。在这些情况下，服务网格可以通过*故障转移*到备用集群或已知良好的服务实现来提供帮助。
- en: Again, this can’t always happen without application help (failover of stateful
    services can be quite complex, for example). But microservices are often designed
    to manage without state, in which case mesh failover can be a huge help.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，如果没有应用程序的帮助，这并非总能实现（例如，有状态服务的故障转移可能非常复杂）。但是，微服务通常设计为在无状态情况下运行，这种情况下，服务网格的故障转移可以提供极大的帮助。
- en: Service overload
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 服务超载
- en: 'Another special case: sometimes the failure happens because too many requests
    are piling onto the same service. In these cases, *circuit breaking* can help
    avoid a cascade failure: if the mesh fails some requests quickly, before dependent
    services get involved and cause further trouble, it can help limit the damage.
    This is a bit of a drastic technique, but this type of enforced load shedding
    can dramatically increase the overall reliability of the application as a whole.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种特殊情况：有时故障发生是因为太多请求堆积在同一个服务上。在这些情况下，*熔断*可以帮助避免级联故障：如果网格快速拒绝一些请求，防止其依赖服务介入并造成更多麻烦，就可以帮助限制损害。这是一个激进的技术，但这种强制性的负载控制可以极大地提高整体应用程序的可靠性。
- en: Observability
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可观测性
- en: 'It’s difficult to see what’s going on in any computing application: even a
    slow machine, these days, operates on time scales a billion times faster than
    the one we humans live by! Within a monolith, observability is often handled by
    internal logging or dashboards that collect global metrics from many different
    areas of the monolith. This is much less feasible with a microservices architecture,
    as we see in [Figure 1-5](#lack-of-observability)—and even if it were feasible,
    it wouldn’t tell the whole story.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何计算应用中，要看清楚发生了什么是很困难的：即使是一台慢机器，如今的操作时间比我们人类生活的时间尺度快上十亿倍！在单体应用程序中，通常通过内部日志记录或仪表板来处理可观测性问题，这些仪表板从单体的多个不同区域收集全局指标。但在微服务架构中，这显然不太可行，正如
    [图 1-5](#lack-of-observability) 中所示——即使可行，也不能完全反映实际情况。
- en: '![luar 0105](assets/luar_0105.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0105](assets/luar_0105.png)'
- en: Figure 1-5\. It’s hard to work in the dark
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-5\. 在黑暗中工作是困难的
- en: 'In the microservices world, “observability” tends to focus more on the *call
    graph* and the *golden metrics*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务世界中，“可观测性”往往更加关注*调用图*和*黄金指标*：
- en: The call graph
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 调用图
- en: When looking at a microservices application, the first critical thing is usually
    knowing which services are getting called by which other services. This is the
    *call graph*, shown in [Figure 1-6](#call-graph), and a critical thing that a
    service mesh can do is to provide metrics about how much traffic is going over
    each edge of the graph, how much is succeeding, how much is failing, etc.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看微服务应用时，通常首要的事情是了解哪些服务被其他哪些服务调用。这就是*调用图*，如 [图 1-6](#call-graph) 所示，而服务网格的一个关键功能是提供有关每条边的流量量、成功率、失败率等指标。
- en: '![luar 0106](assets/luar_0106.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0106](assets/luar_0106.png)'
- en: Figure 1-6\. The call graph of an application
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-6\. 应用程序的调用图
- en: The call graph is a critical starting point because problems that the user sees
    from outside the cluster may actually be caused by problems with a single service
    buried deep in the graph. It’s very important to have visibility into the whole
    graph to be able to solve problems.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 调用图是一个关键的起点，因为用户从集群外部看到的问题实际上可能是由于图中深埋的单个服务出现了问题。具备整个图的可见性非常重要，以便能够解决问题。
- en: It’s also worth noting that, in specific situations, particular paths through
    the graph will be relevant, as shown in [Figure 1-7](#call-graph-paths). For example,
    different requests from the user may use different paths in the graph, exercising
    different aspects of the workloads.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在特定情况下，图中的特定路径将会相关，如 [图 1-7](#call-graph-paths) 所示。例如，用户的不同请求可能会在图中使用不同的路径，从而激活工作负载的不同方面。
- en: '![luar 0107](assets/luar_0107.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0107](assets/luar_0107.png)'
- en: Figure 1-7\. Different paths through the call graph
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-7\. 通过调用图的不同路径
- en: The golden metrics
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 黄金指标
- en: 'There are a great many metrics that we could collect for every microservice.
    Over time, three of them have repeatedly proven especially useful in a wide variety
    of situations, so much so that we now refer to them as the “golden metrics” (as
    shown in [Figure 1-8](#golden-metrics)):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Latency
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: How long are requests taking to complete? This is typically reported as an amount
    of time for a certain percentage of requests to complete. For example, P95 latency
    indicates the time in which 95% of requests complete, so you can interpret “5
    ms P95” to mean that 95% of requests complete in 5 ms or less.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Traffic
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How many requests is a given service handling? This is typically reported as
    requests per second, or RPS.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Success rate
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: How many requests are succeeding? (This can also be reported as its inverse,
    the *error rate*.) This is typically reported as a percentage of total requests,
    with “success rate” often abbreviated as SR.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0108](assets/luar_0108.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Figure 1-8\. The three golden metrics
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Original “Golden Signals”
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These were originally described in Google’s [“Monitoring Distributed Systems”
    post](https://oreil.ly/TGgBm) as the four “golden signals”: latency, request rate,
    error rate, and saturation. We prefer “golden metrics” because metrics are things
    you can directly measure; you derive *signals* (like “saturation”) from *metrics*.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: We’ll discuss these in much greater detail in [Chapter 10](ch10.html#LUAR_observability),
    but it’s worth noting at this point that these metrics have proven so useful that
    many meshes devote considerable effort to recording them—and that the service
    mesh is an ideal place to track them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: How Do Meshes Actually Work?
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let’s take a quick look at how service meshes actually function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'At a high level, all meshes are fundamentally doing the same job: they insert
    themselves into the operating system’s network stack, take over the low-level
    networking that the application is using, and mediate everything the application
    does on the network. This is the only practical way to allow the mesh to provide
    all the functionality it’s designed to provide without requiring changes to the
    application itself.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Most meshes—including Linkerd—use the *sidecar* model of injecting a proxy container
    next to every application container (see [Figure 1-9](#sidecar-model)).^([1](ch01.html#id420))
    Once running, the proxy reconfigures the host’s network routing rules so that
    all traffic into and out of the application container goes through the proxy.
    This allows the proxy to control everything necessary for the functionality of
    the mesh.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0109](assets/luar_0109.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: Figure 1-9\. Linkerd and the sidecar model
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'There are other models, but the sidecar model has tremendous advantages in
    terms of operational simplicity and security:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'From the perspective of basically everything else in the system, the sidecar
    acts like it *is* part of the application. In particular, this means that all
    the things that the operating system does to guarantee the safety of the application
    just work for the sidecar, too. This is a very, very important characteristic:
    limiting the sidecar to exactly one security context sharply limits the attack
    surface of the sidecar and makes it much easier to reason about whether the things
    the sidecar is doing are safe.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从系统的其他基本一切的角度来看，sidecar 的作用就像它*是*应用程序的一部分。特别是这意味着操作系统为保证应用程序安全所做的所有事情也适用于 sidecar。这是一个非常非常重要的特征：将
    sidecar 限制在完全一个安全上下文内大大减少了 sidecar 的攻击面，并且使得判断 sidecar 所做的事情是否安全变得更加容易。
- en: In much the same way, managing the sidecar is exactly the same as managing any
    other application or service. For example, `kubectl rollout restart` will just
    work to restart an application Pod *and its sidecar* as a unit.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以同样的方式，管理 sidecar 与管理任何其他应用程序或服务完全相同。例如，`kubectl rollout restart` 将像单元一样工作来重新启动应用程序
    Pod *及其 sidecar*。
- en: 'There are disadvantages too, of course. The biggest is that *every* application
    Pod needs a sidecar container—even if your application has thousands of Pods.
    Another common concern is around latency: the sidecar, by definition, requires
    some time to process network traffic. Again, we’ll talk more about this later,
    but it’s worth noting up front that Linkerd goes to a lot of trouble to minimize
    the sidecar’s impact, and in practice Linkerd is very fast and very lightweight.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，它也有一些缺点。最大的问题是*每个*应用 Pod 都需要一个 sidecar 容器——即使你的应用有成千上万个 Pod。另一个普遍关注的问题是延迟：sidecar
    根据定义需要一些时间来处理网络流量。再次强调，我们稍后会详细讨论这个问题，但值得注意的是，Linkerd 致力于最大程度地减少 sidecar 的影响，在实践中，Linkerd
    非常快速且非常轻量级。
- en: So Why Do We Need This?
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么我们为什么需要这个呢？
- en: Put bluntly, *the functionality provided by the mesh is not optional*. You’re
    never going to hear the engineering team say “oh, we don’t need security” or “oh,
    reliability isn’t important” (though you might have to convince people of the
    need for observability—hopefully this book will help!).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，*网格提供的功能不是可选的*。你永远不会听到工程团队说“哦，我们不需要安全性”或者“哦，可靠性不重要”（尽管你可能需要说服人们理解可观察性的必要性——希望本书能帮到你！）。
- en: 'In other words, the choice isn’t between having these three features or not:
    it’s between having them provided by the mesh or needing to provide them in the
    application.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，选择不是是否拥有这三个特性，而是这些特性是由网格提供还是需要在应用程序中提供。
- en: Providing them in the application is costly. Your developers could write them
    by hand, but this means a lot of fiddly application code replicated in every microservice,
    which is very easy to get wrong (especially since the temptation will always be
    to have senior developers focus on the crown jewels of logic specific to your
    business, rather than the dreary, less visible, but equally critical work of getting
    retries right). You may also run into incompatibilities between parts of the application,
    especially as the application grows.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中提供它们是昂贵的。你的开发人员可以手工编写它们，但这意味着在每个微服务中复制大量繁琐的应用程序代码，这很容易出错（特别是因为总是有诱惑让资深开发人员专注于与你的业务相关的核心逻辑，而不是那些沉闷、不太显眼但同样关键的重试工作）。你可能还会遇到应用程序各部分之间的不兼容性问题，尤其是当应用程序规模扩大时。
- en: Alternatively, you could find libraries that implement the functionality for
    you, which definitely saves development time. On the other hand, you still end
    up with each and every one of your developers needing to learn how to use those
    libraries, you’re limited to languages and runtimes for which you can find the
    libraries, and incompatibilities are still a serious issue (suppose one microservice
    upgrades the library before another one does).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以找到为你实现功能的库，这确实节省了开发时间。另一方面，你仍然需要每个开发人员学习如何使用这些库，你受限于可以找到这些库的语言和运行时，而不兼容性仍然是一个严重的问题（假设一个微服务在另一个微服务之前升级了库）。
- en: Over time, it’s become pretty clear to us that pushing all this functionality
    into the mesh, where the application developers don’t even necessarily need to
    know that it exists, is the smart way to provide it—and we think that Linkerd
    is the best of the meshes out there. If we haven’t convinced you, too, by the
    end of the book, please reach out and let us know where we fell short!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们非常清楚，将所有这些功能推入网格中，即使应用开发人员不一定需要知道其存在，也是提供它的明智方式。我们认为，Linkerd 是现有各种网格中最好的选择。如果到本书结束时我们还没有说服您，请联系我们，告诉我们哪里做得不够！
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In summary, service meshes are platform-level infrastructure that provide security,
    reliability, and observability uniformly across an entire application, without
    requiring changes to the application itself. Linkerd was the first service mesh,
    and we think it’s still the one with the best balance of power, speed, and operational
    simplicity.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，服务网格是平台级基础设施，能够在整个应用程序上提供安全性、可靠性和可观察性，而无需对应用程序本身进行更改。Linkerd 是第一个服务网格，我们认为它仍然是权力、速度和操作简易性最佳平衡的选择。
- en: ^([1](ch01.html#id420-marker)) The name comes from the analogy of bolting a
    sidecar onto a motorcycle.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#id420-marker)) 这个名字的灵感来自于在摩托车上安装边车的类比。
