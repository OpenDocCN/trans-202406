- en: Part IV. Configuration Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every application needs to be configured, and the easiest way to do this is
    by storing configurations in the source code. However, this approach has the side
    effect of code and configuration living and dying together. We need the flexibility
    to adapt configurations without modifying the application and recreating its container
    image. In fact, mixing code and configuration is an antipattern for a continuous
    delivery approach, where the application is created once and then moves unaltered
    through the various stages of the deployment pipeline until it reaches production.
    The way to achieve this separation of code and configuration is by using external
    configuration data, which is different for each environment. The patterns in the
    following chapters are all about customizing and adapting applications with external
    configurations for various environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19, “EnvVar Configuration”](ch19.html#EnvVarConfiguration), uses environment
    variables to store configuration data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 20, “Configuration Resource”](ch20.html#ConfigurationResource), uses
    Kubernetes resources like ConfigMaps or Secrets to store configuration information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 21, “Immutable Configuration”](ch21.html#ImmutableConfiguration),
    brings immutability to large configuration sets by putting them into containers
    linked to the application at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 22, “Configuration Template”](ch22.html#ConfigurationTemplate), is
    useful when large configuration files need to be managed for multiple environments
    that differ only slightly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
