["```\n{\n    \"name\" : \"New York City\",\n    \"loc\" : {\n        \"type\" : \"Point\",\n        \"coordinates\" : [50, 2]\n    }\n}\n```", "```\n{\n    \"name\" : \"Hudson River\",\n    \"loc\" : {\n        \"type\" : \"LineString\",\n        \"coordinates\" : [[0,1], [0,2], [1,2]]\n    }\n}\n```", "```\n{\n    \"name\" : \"New England\",\n    \"loc\" : {\n        \"type\" : \"Polygon\",\n        \"coordinates\" : [[0,1], [0,2], [1,2]]\n    }\n}\n```", "```\n> db.openStreetMap.createIndex({\"loc\" : \"2dsphere\"})\n```", "```\n> var eastVillage = {\n... \"type\" : \"Polygon\",\n... \"coordinates\" : [\n...  [\n...    [ -73.9732566, 40.7187272 ],\n...    [ -73.9724573, 40.7217745 ],\n...    [ -73.9717144, 40.7250025 ],\n...    [ -73.9714435, 40.7266002 ],\n...    [ -73.975735, 40.7284702 ],\n...    [ -73.9803565, 40.7304255 ],\n...    [ -73.9825505, 40.7313605 ],\n...    [ -73.9887732, 40.7339641 ],\n...    [ -73.9907554, 40.7348137 ],\n...    [ -73.9914581, 40.7317345 ],\n...    [ -73.9919248, 40.7311674 ],\n...    [ -73.9904979, 40.7305556 ],\n...    [ -73.9907017, 40.7298849 ],\n...    [ -73.9908171, 40.7297751 ],\n...    [ -73.9911416, 40.7286592 ],\n...    [ -73.9911943, 40.728492 ],\n...    [ -73.9914313, 40.7277405 ],\n...    [ -73.9914635, 40.7275759 ],\n...    [ -73.9916003, 40.7271124 ],\n...    [ -73.9915386, 40.727088 ],\n...    [ -73.991788, 40.7263908 ],\n...    [ -73.9920616, 40.7256489 ],\n...    [ -73.9923298, 40.7248907 ],\n...    [ -73.9925954, 40.7241427 ],\n...    [ -73.9863029, 40.7222237 ],\n...    [ -73.9787659, 40.719947 ],\n...    [ -73.9772317, 40.7193229 ],\n...    [ -73.9750886, 40.7188838 ],\n...    [ -73.9732566, 40.7187272 ]\n...  ]\n... ]}\n> db.openStreetMap.find(\n... {\"loc\" : {\"$geoIntersects\" : {\"$geometry\" : eastVillage}}})\n```", "```\n> db.openStreetMap.find({\"loc\" : {\"$geoWithin\" : {\"$geometry\" : eastVillage}}})\n```", "```\n> db.openStreetMap.find({\"loc\" : {\"$near\" : {\"$geometry\" : eastVillage}}})\n```", "```\n$ mongoimport *`<path to neighborhoods.json>`* -c neighborhoods\n$ mongoimport *`<path to restaurants.json>`* -c restaurants\n```", "```\n> db.neighborhoods.createIndex({location:\"2dsphere\"})\n> db.restaurants.createIndex({location:\"2dsphere\"})\n```", "```\n> db.neighborhoods.find({name: \"Clinton\"})\n{\n  \"_id\": ObjectId(\"55cb9c666c522cafdb053a4b\"),\n  \"geometry\": {\n    \"coordinates\": [\n      [\n        [-73.99,40.77],\n        .\n        .\n        .\n        [-73.99,40.77],\n        [-73.99,40.77]]\n      ]\n    ],\n    \"type\": \"Polygon\"\n  },\n  \"name\": \"Clinton\"\n}\n\n> db.restaurants.find({name: \"Little Pie Company\"})\n{\n  \"_id\": ObjectId(\"55cba2476c522cafdb053dea\"),\n  \"location\": {\n    \"coordinates\": [\n      -73.99331699999999,\n      40.7594404\n    ],\n    \"type\": \"Point\"\n  },\n  \"name\": \"Little Pie Company\"\n}\n```", "```\n> db.neighborhoods.findOne({geometry:{$geoIntersects:{$geometry:{type:\"Point\",\n... coordinates:[-73.93414657,40.82302903]}}}})\n```", "```\n{\n  \"_id\":ObjectId(\"55cb9c666c522cafdb053a68\"),\n  \"geometry\":{\n    \"type\":\"Polygon\",\n    \"coordinates\":[[[-73.93383000695911,40.81949109558767],...]]},\n    \"name\":\"Central Harlem North-Polo Grounds\"\n}\n```", "```\n> var neighborhood = db.neighborhoods.findOne({\n  geometry: {\n    $geoIntersects: {\n      $geometry: {\n        type: \"Point\",\n        coordinates: [-73.93414657,40.82302903]\n      }\n    }\n  }\n});\n\n> db.restaurants.find({\n    location: {\n      $geoWithin: {\n        // Use the geometry from the neighborhood object we retrieved above\n        $geometry: neighborhood.geometry\n      }\n    }\n  },\n  // Project just the name of each matching restaurant\n  {name: 1, _id: 0});\n```", "```\n{\n  \"name\": \"White Castle\"\n}\n{\n  \"name\": \"Touch Of Dee'S\"\n}\n{\n  \"name\": \"Mcdonald'S\"\n}\n{\n  \"name\": \"Popeyes Chicken & Biscuits\"\n}\n{\n  \"name\": \"Make My Cake\"\n}\n{\n  \"name\": \"Manna Restaurant Ii\"\n}\n...\n{\n  \"name\": \"Harlem Coral Llc\"\n}\n```", "```\n> db.restaurants.find({\n  location: {\n    $geoWithin: {\n      $centerSphere: [\n        [-73.93414657,40.82302903],\n        5/3963.2\n      ]\n    }\n  }\n})\n```", "```\n> var METERS_PER_MILE = 1609.34;\ndb.restaurants.find({\n  location: {\n    $nearSphere: {\n      $geometry: {\n        type: \"Point\",\n        coordinates: [-73.93414657,40.82302903]\n      },\n      $maxDistance: 5*METERS_PER_MILE\n    }\n  }\n});\n```", "```\n> db.openStreetMap.createIndex({\"tags\" : 1, \"location\" : \"2dsphere\"})\n```", "```\n> db.openStreetMap.find({\"loc\" : {\"$geoWithin\" : \n... {\"$geometry\" : hellsKitchen.geometry}}, \n... \"tags\" : \"pizza\"})\n```", "```\n> db.hyrule.createIndex({\"tile\" : \"2d\"})\n```", "```\n{\n    \"name\" : \"Water Temple\",\n    \"tile\" : [ 32, 22 ]\n}\n```", "```\n> db.hyrule.createIndex({\"light-years\" : \"2d\"}, {\"min\" : -1000, \"max\" : 1000})\n```", "```\n> db.hyrule.createIndex({\"tile\" : \"2d\"})\n```", "```\n> db.hyrule.find({\n  tile: {\n    $geoWithin: {\n      $box: [[10, 10], [100, 100]]\n    } \n   }\n})\n```", "```\n> db.hyrule.find({\n  tile: {\n    $geoWithin: {\n      $center: [[-17, 20.5] , 25]\n    }\n  }\n})\n```", "```\n> db.hyrule.find({\n  tile: {\n    $geoWithin: {\n      $polygon: [[0, 0], [3, 6], [6, 0]]\n    }\n  }\n})\n```", "```\n> db.hyrule.find({\n  loc: {\n    $geoWithin: {\n      $centerSphere: [[88, 30], 10/3963.2]\n    }\n  }\n})\n```", "```\n> db.hyrule.find({\"tile\" : {\"$near\" : [20, 21]}})\n```", "```\n> db.hyrule.find({\"tile\" : {\"$near\" : [20, 21]}}).limit(10)\n```", "```\n> db.articles.createIndex({\"title\": \"text\",\n                           \"body\" : \"text\"})\n```", "```\n> db.articles.createIndex({\"title\": \"text\", \n                           \"body\": \"text\"},\n                          {\"weights\" : {\n                               \"title\" : 3, \n                               \"body\" : 2}})\n```", "```\n> db.articles.createIndex({\"$**\" : \"text\"})\n```", "```\n> db.articles.find({\"$text\": {\"$search\": \"impact crater lunar\"}}, \n                   {title: 1}\n                  ).limit(10)\n{ \"_id\" : \"170375\", \"title\" : \"Chengdu\" }\n{ \"_id\" : \"34331213\", \"title\" : \"Avengers vs. X-Men\" }\n{ \"_id\" : \"498834\", \"title\" : \"Culture of Tunisia\" }\n{ \"_id\" : \"602564\", \"title\" : \"ABC Warriors\" }\n{ \"_id\" : \"40255\", \"title\" : \"Jupiter (mythology)\" }\n{ \"_id\" : \"80356\", \"title\" : \"History of Vietnam\" }\n{ \"_id\" : \"22483\", \"title\" : \"Optics\" }\n{ \"_id\" : \"8919057\", \"title\" : \"Characters in The Legend of Zelda series\" }\n{ \"_id\" : \"20767983\", \"title\" : \"First inauguration of Barack Obama\" }\n{ \"_id\" : \"17845285\", \"title\" : \"Kushiel's Mercy\" }\n```", "```\n> db.articles.find({$text: {$search: \"\\\"impact crater\\\" lunar\"}},\n                   {title: 1}\n                     ).limit(10)\n{ \"_id\" : \"2621724\", \"title\" : \"Schjellerup (crater)\" }\n{ \"_id\" : \"2622075\", \"title\" : \"Steno (lunar crater)\" }\n{ \"_id\" : \"168118\", \"title\" : \"South Pole–Aitken basin\" }\n{ \"_id\" : \"1509118\", \"title\" : \"Jackson (crater)\" }\n{ \"_id\" : \"10096822\", \"title\" : \"Victoria Island structure\" }\n{ \"_id\" : \"968071\", \"title\" : \"Buldhana district\" }\n{ \"_id\" : \"780422\", \"title\" : \"Puchezh-Katunki crater\" }\n{ \"_id\" : \"28088964\", \"title\" : \"Svedberg (crater)\" }\n{ \"_id\" : \"780628\", \"title\" : \"Zeleny Gai crater\" }\n{ \"_id\" : \"926711\", \"title\" : \"Fracastorius (crater)\" }\n```", "```\n> db.articles.find({$text: {$search: \"\\\"impact crater\\\" lunar meteor\"}},\n                 {title: 1}\n\t\t).limit(10)\n```", "```\n> db.articles.find({$text: {$search: \"\\\"impact crater\\\" \\\"lunar\\\" \\\"meteor\\\"\"}},\n                   {title: 1}\n\t\t     ).limit(10)\n{ \"_id\" : \"168118\", \"title\" : \"South Pole–Aitken basin\" }\n{ \"_id\" : \"330593\", \"title\" : \"Giordano Bruno (crater)\" }\n{ \"_id\" : \"421051\", \"title\" : \"Opportunity (rover)\" }\n{ \"_id\" : \"2693649\", \"title\" : \"Pascal Lee\" }\n{ \"_id\" : \"275128\", \"title\" : \"Tektite\" }\n{ \"_id\" : \"14594455\", \"title\" : \"Beethoven quadrangle\" }\n{ \"_id\" : \"266344\", \"title\" : \"Space debris\" }\n{ \"_id\" : \"2137763\", \"title\" : \"Wegener (lunar crater)\" }\n{ \"_id\" : \"929164\", \"title\" : \"Dawes (lunar crater)\" }\n{ \"_id\" : \"24944\", \"title\" : \"Plate tectonics\" }\n```", "```\n> db.articles.find({$text: {$search: \"\\\"impact crater\\\" lunar\"}},\n                   {title: 1, score: {$meta: \"textScore\"}}\n\t\t     ).limit(10)\n{\"_id\": \"2621724\", \"title\": \"Schjellerup (crater)\", \"score\": 2.852987132352941}\n{\"_id\": \"2622075\", \"title\": \"Steno (lunar crater)\", \"score\": 2.4766639610389607}\n{\"_id\": \"168118\", \"title\": \"South Pole–Aitken basin\", \"score\": 2.980198136295181}\n{\"_id\": \"1509118\", \"title\": \"Jackson (crater)\", \"score\": 2.3419137286324787}\n{\"_id\": \"10096822\", \"title\": \"Victoria Island structure\", \n \"score\": 1.782051282051282}\n{\"_id\": \"968071\", \"title\": \"Buldhana district\", \"score\": 1.6279783393501805}\n{\"_id\": \"780422\", \"title\": \"Puchezh-Katunki crater\", \"score\": 1.9295977011494254}\n{\"_id\": \"28088964\", \"title\": \"Svedberg (crater)\", \"score\": 2.497767857142857}\n{\"_id\": \"780628\", \"title\": \"Zeleny Gai crater\", \"score\": 1.4866071428571428}\n{\"_id\": \"926711\", \"title\": \"Fracastorius (crater)\", \"score\": 2.7511877111486487}\n```", "```\n> db.articles.find({$text: {$search: \"\\\"impact crater\\\" lunar\"}},\n                   {title: 1, score: {$meta: \"textScore\"}}\n\t\t     ).sort({score: {$meta: \"textScore\"}}).limit(10)\n{\"_id\": \"1621514\", \"title\": \"Lunar craters\", \"score\": 3.1655242042922014}\n{\"_id\": \"14580008\", \"title\": \"Kuiper quadrangle\", \"score\": 3.0847527829208814}\n{\"_id\": \"1019830\", \"title\": \"Shackleton (crater)\", \"score\": 3.076471119932001}\n{\"_id\": \"2096232\", \"title\": \"Geology of the Moon\", \"score\": 3.064981949458484}\n{\"_id\": \"927269\", \"title\": \"Messier (crater)\", \"score\": 3.0638183133686008}\n{\"_id\": \"206589\", \"title\": \"Lunar geologic timescale\", \"score\": 3.062029540854157}\n{\"_id\": \"14536060\", \"title\": \"Borealis quadrangle\", \"score\": 3.0573010719646687}\n{\"_id\": \"14609586\", \"title\": \"Michelangelo quadrangle\", \n \"score\": 3.057224063486582}\n{\"_id\": \"14568465\", \"title\": \"Shakespeare quadrangle\", \n \"score\": 3.0495256481056443}\n{\"_id\": \"275128\", \"title\": \"Tektite\", \"score\" : 3.0378807169646915}\n```", "```\n> db.blog.createIndex({\"date\" : 1, \"post\" : \"text\"})\n```", "```\n> db.blog.createIndex({\"post\" : \"text\", \"author\" : 1})\n```", "```\n> db.blog.createIndex({\"date\" : 1, \"post\" : \"text\", \"author\" : 1})\n```", "```\n> db.users.createIndex({\"profil\" : \"text\", \n                        \"intérêts\" : \"text\"}, \n                       {\"default_language\" : \"french\"})\n```", "```\n> db.users.insert({\"username\" : \"swedishChef\", \n... \"profile\" : \"Bork de bork\", language : \"swedish\"})\n```", "```\n> db.createCollection(\"my_collection\", {\"capped\" : true, \"size\" : 100000});\n```", "```\n> db.createCollection(\"my_collection2\", \n                      {\"capped\" : true, \"size\" : 100000, \"max\" : 100});\n```", "```\n> db.runCommand({\"convertToCapped\" : \"test\", \"size\" : 10000});\n{ \"ok\" : true }\n```", "```\n$cursor = $collection->find([], [\n    'cursorType' => MongoDB\\Operation\\Find::TAILABLE_AWAIT,\n    'maxAwaitTimeMS' => 100,\n]);\n\nwhile (true) {\n   if ($iterator->valid()) {\n      $document = $iterator->current();\n      printf(\"Consumed document created at: %s\\n\", $document->createdAt);\n   }\n\n   $iterator->next();\n}\n```", "```\n> // 24-hour timeout\n> db.sessions.createIndex({\"lastUpdated\" : 1}, {\"expireAfterSeconds\" : 60*60*24})\n```", "```\n> db.runCommand( {\"collMod\" : \"someapp.cache\" , \"index\" : { \"keyPattern\" : \n... {\"lastUpdated\" : 1} , \"expireAfterSeconds\" : 3600 } } );\n```", "```\n$ echo \"Hello, world\" > foo.tx\n$ mongofiles put foo.txt \n2019-10-30T10:12:06.588+0000  connected to: localhost\n2019-10-30T10:12:06.588+0000  added file: foo.txt\n$  mongofiles list\n2019-10-30T10:12:41.603+0000  connected to: localhost\nfoo.txt 13\n$ rm foo.txt\n$ mongofiles get foo.txt\n2019-10-30T10:13:23.948+0000  connected to: localhost\n2019-10-30T10:13:23.955+0000  finished writing to foo.txt\n$ cat foo.txt\nHello, world\n```", "```\n>>> import pymongo\n>>> import gridfs\n>>> client = pymongo.MongoClient()\n>>> db = client.test\n>>> fs = gridfs.GridFS(db)\n>>> file_id = fs.put(b\"Hello, world\", filename=\"foo.txt\")\n>>> fs.list()\n['foo.txt']\n>>> fs.get(file_id).read()\nb'Hello, world'\n```", "```\n{\n    \"_id\" : ObjectId(\"...\"),\n    \"n\" : 0,\n    \"data\" : BinData(\"...\"),\n    \"files_id\" : ObjectId(\"...\")\n}\n```", "```\n> db.fs.files.distinct(\"filename\")\n[ \"foo.txt\" , \"bar.txt\" , \"baz.txt\" ]\n```"]