["```\n# Clone the booksapp repo\n$ git clone https://github.com/BuoyantIO/booksapp.git\n\n# Clone the emojivoto repo\n$ git clone https://github.com/BuoyantIO/emojivoto.git\n```", "```\n# Install booksapp\n$ kubectl create ns booksapp && \\\n  curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/booksapp.yml \\\n  | linkerd inject - | kubectl -n booksapp apply -f -\n\n# Install emojivoto\n$ curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/emojivoto.yml \\\n  | linkerd inject - | kubectl apply -f -\n\n# Check that booksapp is ready\n$ linkerd check --proxy --namespace booksapp\n\n# Check that emojivoto is ready\n$ linkerd check --proxy --namespace emojivoto\n```", "```\n# View namespace metrics\n$ linkerd viz stat ns\n\n# View deployment metrics\n$ linkerd viz stat deploy -n emojivoto\n$ linkerd viz stat deploy -n booksapp\n\n# View Pod metrics\n$ linkerd viz stat pod -n emojivoto\n$ linkerd viz stat pod -n booksapp\n```", "```\n# Tap the emojivoto web frontend\n$ linkerd viz tap deploy/web -n emojivoto\n```", "```\n# Begin by checking for any existing routes.\n$ linkerd viz routes -n emojivoto deploy\n\n# The output will show every workload in the emojivoto\n# namespace with a default route. We will now work to\n# create application-specific routes for emoji and\n# voting.\n\n# Create a ServiceProfile object.\n$ linkerd profile --proto emojivoto/proto/Emoji.proto emoji-svc -n emojivoto\n\n# This creates, but doesn't apply, the ServiceProfile\n# for the emoji service. Take a minute to review the\n# profile object so you understand the basic structure.\n# We'll be using these ServiceProfiles again in the\n# next chapter.\n\n# Create and apply ServiceProfiles for emoji and voting.\n$ linkerd profile --proto emojivoto/proto/Emoji.proto emoji-svc -n emojivoto |\n  kubectl apply -f -\n\n$ linkerd profile --proto emojivoto/proto/Voting.proto voting-svc -n emojivoto |\n  kubectl apply -f -\n\n# Now you can view the updated route data in your environment to see\n# your deployed applications. You may need to wait a minute\n# for data to populate.\n$ linkerd viz routes deploy/emoji -n emojivoto\n$ linkerd viz routes deploy/voting -n emojivoto\n\n# Each app will show and store details about which routes have\n# been accessed.\n```", "```\n# Create a new ServiceProfile with Tap.\n$ linkerd viz profile -n emojivoto web-svc --tap deploy/web --tap-duration 10s |\n  kubectl apply -f -\n\n# After you run that command, you should expect to see a\n# 10-second pause as Linkerd watches live traffic to the\n# service in question and builds a profile.\n\n# View the new profile.\n$ kubectl get serviceprofile -n emojivoto web-svc.emojivoto.svc.cluster.local -o yaml\n\n# You will see the object created with two routes, list and vote.\n\n# View the updated route data for web. You may need to allow a minute\n# for data to populate.\n$ linkerd viz routes deploy/web -n emojivoto\n```", "```\n# Create routes for booksapp.\n$ linkerd profile --open-api booksapp/swagger/authors.swagger authors -n booksapp |\n  kubectl apply -f -\n\n$ linkerd profile --open-api booksapp/swagger/webapp.swagger webapp -n booksapp |\n  kubectl apply -f -\n\n$ linkerd profile --open-api booksapp/swagger/books.swagger books -n booksapp |\n  kubectl apply -f -\n\n# With that, we've profiled our applications. We can now wait a minute\n# and view the relevant route information.\n\n# View route data for booksapp.\n$ linkerd viz routes deploy -n booksapp\n\n# You should see a number of routes with varying success rates.\n# In Chapter 11 we'll use some of Linkerd's reliability\n# features to help address the issues booksapp is having.\n```", "```\n# Start by getting the deployments in the booksapp namespace.\n$ kubectl get deploy -n booksapp\n\n# You'll see four deployments: traffic, webapp, authors, and books.\n\n# Now, dig into the relationship between these components with\n# the linkerd viz edges command.\n$ linkerd viz edges deploy -n booksapp\n```", "```\n$ linkerd viz dashboard\n```", "```\n# The first step of a production-ready Viz dashboard install\n# involves installing a standalone Prometheus instance.\n# This guide assumes you've done that in the linkerd-viz\n# namespace.\n\n# With that done, you can install Grafana.\n$ helm repo add grafana https://grafana.github.io/helm-charts\n$ helm repo update\n$ helm install grafana -n grafana --create-namespace grafana/grafana \\\n  -f https://raw.githubusercontent.com/linkerd/linkerd2/main/grafana/values.yaml\n\n# The example install uses a values file provided by the\n# Linkerd team. It includes important configurations that\n# allow the dashboard to properly use Grafana. You can\n# read more in the official Linkerd docs:\n# https://linkerd.io/2/tasks/grafana/\n\n# After Grafana is installed, install Linkerd Viz and\n# tell it to use your Grafana instance.\n$ linkerd viz install --set grafana.url=grafana.grafana:3000 \\\n  | kubectl apply -f -\n```", "```\nconfig.linkerd.io/access-log: apache\n```", "```\nconfig.linkerd.io/access-log: json\n```"]