- en: Appendix B. MongoDB Internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not necessary to understand MongoDB’s internals to use it effectively,
    but they may be of interest to developers who wish to work on tools, contribute,
    or simply understand what’s happening under the hood. This appendix covers some
    of the basics. The MongoDB source code is available at [*https://github.com/mongodb/mongo*](https://github.com/mongodb/mongo).
  prefs: []
  type: TYPE_NORMAL
- en: BSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documents in MongoDB are an abstract concept—the concrete representation of
    a document varies depending on the driver/language being used. Because documents
    are used extensively for communication in MongoDB, there also needs to be a representation
    of documents that is shared by all drivers, tools, and processes in the MongoDB
    ecosystem. That representation is called Binary JSON, or BSON (no one knows where
    the J went).
  prefs: []
  type: TYPE_NORMAL
- en: BSON is a lightweight binary format capable of representing any MongoDB document
    as a string of bytes. The database understands BSON, and BSON is the format in
    which documents are saved to disk.
  prefs: []
  type: TYPE_NORMAL
- en: When a driver is given a document to insert, use as a query, and so on, it will
    encode that document to BSON before sending it to the server. Likewise, documents
    being returned to the client from the server are sent as BSON strings. This BSON
    data is decoded by the driver to its native document representation before being
    returned to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The BSON format has three primary goals:'
  prefs: []
  type: TYPE_NORMAL
- en: Efficiency
  prefs: []
  type: TYPE_NORMAL
- en: BSON is designed to represent data efficiently, without using much extra space.
    In the worst case BSON is slightly less efficient than JSON, and in the best case
    (e.g., when storing binary data or large numerics), it is much more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Traversability
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, BSON does sacrifice space efficiency to make the format easier
    to traverse. For example, string values are prefixed with a length rather than
    relying on a terminator to signify the end of a string. This traversability is
    useful when the MongoDB server needs to introspect documents.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs: []
  type: TYPE_NORMAL
- en: Finally, BSON is designed to be fast to encode to and decode from. It uses C-style
    representations for types, which are fast to work with in most programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: For the exact BSON specification, see [*http://www.bsonspec.org*](http://www.bsonspec.org).
  prefs: []
  type: TYPE_NORMAL
- en: Wire Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drivers access the MongoDB server using a lightweight TCP/IP wire protocol.
    The protocol is documented on the [MongoDB documentation site](https://oreil.ly/rVJAr)
    but basically consists of a thin wrapper around BSON data. For example, an insert
    message consists of 20 bytes of header data (which includes a code telling the
    server to perform an insert and the message length), the collection name to insert
    into, and a list of BSON documents to insert.
  prefs: []
  type: TYPE_NORMAL
- en: Data Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inside the MongoDB data directory, which is */data/db/* by default, a separate
    file will be stored for each collection and each index. The filenames do not correspond
    to the names of the collections or indexes, but you can use the `stats` within
    the *mongo* shell to identify the related file for a specific collection. The
    `"wiredTiger.uri"` field will contain the name of the file to look for in the
    MongoDB data directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `stats` on the *sample_mflix* database for the *movies* collection provides
    “collection-14--2146526997547809066” as result in the `"wiredTiger.uri"` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The file’s details can then be verified within the MongoDB data directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s possible to use the aggregation framework to find the URI for each index
    in a specific collection using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: WiredTiger stores each collection or index in a single arbitrarily large file.
    The only limits that impact the potential maximum size of this file are filesystem
    size limits.
  prefs: []
  type: TYPE_NORMAL
- en: WiredTiger writes a new copy of the full document whenever that document is
    updated. The old copy on disk is flagged for reuse and will eventually be overwritten
    at a future point, typically during the next checkpoint. This recycles the space
    used within the WiredTiger file. The `compact` command can be run to move the
    data within this file to the start, leaving empty space at the end. At regular
    intervals, WiredTiger removes this excess empty space by truncating the file.
    At the end of the compaction process, the excess space is returned to the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each database is organized into *namespaces*, which are mapped to WiredTiger
    files. This abstraction separates the storage engine’s internal details from the
    MongoDB query layer.
  prefs: []
  type: TYPE_NORMAL
- en: WiredTiger Storage Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default storage engine for MongoDB is the WiredTiger storage engine. When
    the server starts up, it opens the data files and begins the checkpointing and
    journaling processes. It works in conjunction with the operating system, whose
    responsibility is focused on paging data in and out as well as flushing data to
    disk. This storage engine has several important properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Compression is on by default for collections and for indexes. The default compression
    algorithm is Google’s snappy. Other options include Facebook’s Zstandard (zstd)
    and zlib, or indeed no compression. This minimizes storage use in the database
    at the expense of additional CPU requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document-level concurrency allows for updates on different documents from multiple
    clients in a collection as the same time. WiredTiger uses MultiVersion Concurrency
    Control (MVCC) to isolate read and write operations to ensure clients see a consistent
    point-in-time view of the data at the start of an operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checkpointing creates a consistent point-in-time snapshot of the data and occurs
    every 60 seconds. It involves writing all the data in the snapshot to disk and
    updating the related metadata.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Journaling with checkpointing ensures there is no point in time where data might
    be lost if there was a failure of a *mongod* process. WiredTiger uses a write-ahead
    log (journal) that stores modifications before they are applied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
