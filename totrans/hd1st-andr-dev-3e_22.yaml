- en: 'Chapter 19\. Integrating Compose with views: *Perfect Harmony*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0811-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You get the best results when things work together.**'
  prefs: []
  type: TYPE_NORMAL
- en: So far, you’ve learned how to build a UI using views or composables. But what
    if you want to use **both**? In this chapter, you’ll find out how to get **the
    best of both worlds** by **adding composables to a View-based UI**. You’ll discover
    techniques for making **composables work with view models**. You’ll even find
    out how to make them **respond to *LiveData* updates**. By the end of the chapter,
    you’ll have all the tools you need to **use composables with views**, or even
    **migrate to a pure Compose UI**.
  prefs: []
  type: TYPE_NORMAL
- en: You can add composables to View-based UIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to implement a Compose UI by building
    a brand new Temperature Converter app. Instead of adding views to a layout file,
    you created the UI by calling composables in the activity’s Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: There are times, however, when you might want to use views *and* composables
    in the same UI. This may be because you want to use components that are only available
    as views or composables, for example, or you want to migrate parts of your app
    to Compose.
  prefs: []
  type: TYPE_NORMAL
- en: The great news is that you can add composables to a UI that’s defined in a layout
    file. We’ll show you how this is done by taking the Guessing Game app we created
    earlier in the book, and migrating it to Compose.
  prefs: []
  type: TYPE_NORMAL
- en: The Guessing Game app revisited
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we’re sure you remember, the Guessing Game app lets the user guess which
    letters are included in a secret word. She wins the game if she guesses all the
    letters, and loses if she runs out of lives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the game currently looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0812-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we start replacing the app’s views with composables, let’s quickly review
    how the app is constructed.
  prefs: []
  type: TYPE_NORMAL
- en: The Guessing Game app structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Guessing Game app uses two fragments for its UI: `GameFragment` and `ResultFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`GameFragment` is the app’s main screen, which the user interacts with to play
    the game. It displays information—such as the number of lives left and any incorrect
    guesses the user has made—and lets the user make guesses. It also includes a button
    that, when clicked, lets the user immediately finish the game without making any
    more guesses.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ResultFragment` is displayed when the game is over. It shows the user if she
    has won or lost the game, along with the secret word.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The app also include two view models—`GameViewModel` and `ResultViewModel`—which
    hold the app’s game logic and data, and maintain its state when the app is rotated.
    `GameFragment` uses `GameViewModel`, and `ResultFragment` uses `ResultViewModel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0813-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s run through the steps we’ll take to update the app.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to replace the Guessing Game app’s views with composables in two
    main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Replace ResultFragment’s views with composables.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll add the Compose libraries to the app’s *build.gradle* files, and then
    add composables to `ResultFragment`’s layout to replicate the current views. When
    we’re satisfied that the composables do what we want, we’ll remove the views from
    its UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0814-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Replace GameFragment’s views with composables.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll then go through a similar process for `GameFragment`. We’ll add composables
    to its layout to reproduce its current views, and when we’re certain that they
    work in the way we want, we’ll remove the views from its UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0814-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s start by adding the Compose libraries to the app’s *build.gradle* files.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0814-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Update the project build.gradle file…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0815-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We’ll first add a new variable to the project’s *build.gradle* file to specify
    which version of Compose we’ll use. Open the file *GuessingGame/build.gradle*,
    and add the line below (in bold) to the `buildscript` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0815-02.png)'
  prefs: []
  type: TYPE_IMG
- en: …and update the app build.gradle file, too
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the app’s *build.gradle* file, we need to add a bunch of Compose options
    and libraries, and make sure the minimum SDK is 21\. Open the file *GuessingGame/app/build.gradle*,
    and add the following lines (in bold) to the appropriate sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0815-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve made these changes, click on the Sync Now option.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll replace ResultFragment’s views with composables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0816-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve updated the *build.gradle* files to include Compose, we can start
    replacing the app’s views with composables. We’ll begin with `ResultFragment`,
    as this is the simplest fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may recall, `ResultFragment`’s layout includes a `TextView` to display
    the game’s result, and a `Button` to let the user start a new game. It looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0816-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can replace these views with composables by using a `Text` composable instead
    of the `TextView`, and a `Button` composable instead of the `Button` view. This
    is what the new UI will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll build the new UI bit by bit so that at first, `ResultFragment` will use
    both views and composables. Let’s begin by finding out how to add composables
    to a layout file.
  prefs: []
  type: TYPE_NORMAL
- en: A ComposeView lets you add composables to a layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to add composables to a `View`-based UI, you can do so by adding
    a `**ComposeView**` element to the layout file. This is a type of view that can
    display composables, and the code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0817-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You can think of a `ComposeView` as a type of view that acts as a placeholder
    for any composables you want to add to the UI in your Kotlin code. When the app
    runs, it displays the layout’s views, and populates the `ComposeView` with composables.
  prefs: []
  type: TYPE_NORMAL
- en: '**A ComposeView is a View that acts as a placeholder for composables. It lets
    you use Compose in a View-based UI.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We’ll add a ComposeView to fragment_result.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to add `Text` and `Button` composables to `ResultFragment`’s UI, so
    we need to add a `ComposeView` to its layout file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *fragment_result.xml*; update the file to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0817-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve added the `ComposeView`, let’s add some composables to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add composables using Kotlin code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0818-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the layout includes a `ComposeView`, you can add composables to it in
    the fragment’s `onCreateView()` method using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0818-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code calls `setContent()` on the layout’s `ComposeView`, which tells it
    what composables it needs to include. It then applies this to the fragment’s inflated
    layout. If you wanted to add a `Text` composable to `ResultFragment`’s layout,
    for example, you’d use the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0818-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running this code would display the `Text` composable in the layout’s `ComposeView`
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0818-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a composable function for the fragment’s content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0819-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve learned how to add composables to a `ComposeView`, let’s use
    the one we’ve added to *fragment_result.xml* to replicate its existing views.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin by adding a new composable function to *ResultFragment.kt* named
    `ResultFragmentContent`, which we’ll use for the fragment’s UI. We’ll call it
    from `setContent()` so that any composables we add to it will run when `ResultFragment`
    gets displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the new code looks like; we’ll add it to *ResultFragment.kt* a
    few pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0819-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Reproduce the Start New Game button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve added the `ResultFragmentContent` composable function to *ResultFragment.kt*,
    we can use it to add composables to the UI. We’ll begin by adding a button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0820-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ResultFragment` currently includes a button `View` labeled “Start new game”
    that uses the following `OnClickListener` to navigate to `GameFragment` when clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0820-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We can reproduce the button in Compose by creating a new composable function
    named `NewGameButton` that we’ll run from `ResultFragmentContent`. We’ll add a
    lambda argument to `NewGameButton` so that `ResultFragmentContent` can tell it
    what to do when it’s clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the new code looks like; we’ll add it to *ResultFragment.kt* a
    couple pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0820-03.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s the button sorted. What about the layout’s text?
  prefs: []
  type: TYPE_NORMAL
- en: Reproduce ResultFragment’s TextView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may recall, `ResultFragment` uses a `TextView` in its layout to display
    the game’s result. It’s defined using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0821-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Instead of using a `TextView` to display the text, we can define a new `ResultText`
    composable function that displays the text in a `Text` composable. We’ll add a
    `String` argument to `ResultText` that `ResultFragmentContent` will use to pass
    it the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the new code; we’ll add it to *ResultFragment.kt* on the next page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0821-03.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code that we need to reproduce all of `ResultFragment`’s views
    with composables. Let’s see what the code looks like.
  prefs: []
  type: TYPE_NORMAL
- en: The updated code for ResultFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *ResultFragment.kt*; update the file to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0822-02.png)![image](Images/f0823-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `GameFragment` is displayed. When we click on its Finish
    Game button, it navigates to `ResultFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '`ResultFragment` displays the original views, and the composables we just added.
    The `Text` composable displays the correct text, and the `Button` composable navigates
    to `GameFragment` when it’s clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0824-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The composables we added to `ResultFragment` work exactly how we want them to,
    so the next thing we’ll do is remove the views.
  prefs: []
  type: TYPE_NORMAL
- en: We need to remove ResultFragment’s views…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can remove a fragment or activity’s views in a couple ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**By removing any views you don’t need from the layout file**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This approach is useful if the UI contains a mix of views and composables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**By removing the entire layout file**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the UI *only* includes composables, you can delete the layout file, and remove
    any references to it in the activity or fragment’s Kotlin code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Guessing Game app, we’ve reproduced all of `ResultFragment`’s views with
    composables, so we no longer need any of its original views. This means that we
    can delete its layout file *fragment_result.xml* so that the UI only includes
    composables.
  prefs: []
  type: TYPE_NORMAL
- en: …and update ResultFragment.kt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we delete the layout file, we first need to remove any references to
    its views from *ResultFragment.kt*, and stop using view binding.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: View binding gives your activity and fragment code an easier way to access a
    layout file’s views. As we’re removing ResultFragment’s layout file, it no longer
    needs to use view binding.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to tweak the fragment’s `onCreateView()` method so that instead
    of inflating a layout file, it adds the composables to the fragment’s UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you learned in [Chapter 18](ch18.xhtml#jetpack_composecolon_compose_yourself),
    you can do this with an *activity* by simply calling `setContent()` from its `onCreate()`
    method like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0825-03.png)'
  prefs: []
  type: TYPE_IMG
- en: When you’re dealing with a fragment, however, you need a slightly different
    approach. To find out what this is and why, let’s revisit the fragment’s `onCreateView()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: onCreateView() returns the UI’s root view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, a fragment’s `onCreateView()` method gets called when an activity
    needs to display the fragment’s UI.
  prefs: []
  type: TYPE_NORMAL
- en: When the UI is defined with a layout file, code in the `onCreateView()` method
    inflates the layout into a hierarchy of views, and returns the root view. The
    root view gets added to the activity’s layout, which displays the fragment’s UI.
  prefs: []
  type: TYPE_NORMAL
- en: But what if there’s no layout file?
  prefs: []
  type: TYPE_NORMAL
- en: Return a ComposeView for Compose UIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the fragment’s UI is just made up of composables and has no layout file,
    **the** `**onCreateView()**` **method must still return a** `**View?**`**, or
    the code won’t compile**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You deal with this by making the method return a `ComposeView` that includes
    all of the UI’s composables. Here’s what the code for this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0826-02.png)'
  prefs: []
  type: TYPE_IMG
- en: When the activity needs to display the fragment’s UI, it calls the fragment’s
    `onCreateView()` method as before. The method returns a `ComposeView` that includes
    the fragment’s composables, which are then displayed by the activity.
  prefs: []
  type: TYPE_NORMAL
- en: That’s everything you need to know to complete the code for *ResultFragment.kt*.
    We’ll show you the full code over the next few pages.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for ResultFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the complete code for *ResultFragment.kt*; update the file to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0827-02.png)![image](Images/f0828-02.png)![image](Images/f0829-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We can delete fragment_result.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that `ResultFragment` is no longer using its layout file, we’ll remove any
    references to *fragment_result.xml* from the navigation graph, and delete the
    layout file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open *nav_graph.xml* in the *app/src/main/res/navigation* folder, and
    remove the reference to `"@layout/fragment_result"` from the `ResultFragment`
    section like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0829-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Then right-click on *fragment_result.xml* in the explorer, choose Refactor,
    and then select the Safe Delete option. When you click on the OK button and choose
    the option to do the refactor, the file is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through what happens when we run the app.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0830-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MainActivity launches and displays GameFragment in its layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0830-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When the user clicks on the Finish Game button, or wins or loses the game,
    the app navigates to ResultFragment and calls its onCreateView() method.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0830-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The onCreateView() method creates a ComposeView.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0830-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The onCreateView() method sets the ComposeView’s content to ResultFragmentContent.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0830-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When ResultFragmentContent runs, it calls the ResultText and NewGameButton
    composables.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The composables are added to the `ComposeView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0831-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The onCreateView() method returns the ComposeView to MainActivity.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0831-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity displays the ComposeView in its layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `ComposeView`’s composables are displayed on the device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0831-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app and click on `GameFragment`’s Finish Game button, it navigates
    to `ResultFragment` as before. This time, however, the UI is just made up of composables.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0832-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything we need to make `ResultFragment` use a Compose UI. Before
    we get to work on `GameFragment`, have a go at the exercise on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your **job** is to take code snippets from the pool and place them into the
    blank lines in the code below. You may **not** use the same snippet more than
    once, and you won’t need to use all the snippets. Your **goal** is to write the
    code for a fragment named `MusicFragment` that has no layout file and uses a composable
    function named `MusicFragmentContent` for its UI. A theme named `MusicTheme` needs
    to be applied to the UI, including any surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0833-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: each thing from the pool can only be used once!**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr.png) **Answers in [“Pool Puzzle Solution”](#pool_puzzle_solution-id00328).**'
  prefs: []
  type: TYPE_NORMAL
- en: Next we’ll make GameFragment use composables too
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0834-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve made `ResultFragment` use composables instead of views, we can
    do a similar thing for `GameFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may recall, `GameFragment`’s layout includes `TextView`s, `Button`s,
    and an `EditText` to let the user play the guessing game. Here’s a reminder of
    what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0834-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Over the next few pages, we’re going to replace these views with composables.
    Here’s what the new UI will look like when we’ve finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0834-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As before, we’ll begin by adding new composables to `GameFragment`’s UI, which
    means we need to add a `ComposeView` to its layout. We’ll show you the code for
    this on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll add a ComposeView to fragment_game.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0835-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the code to add a `ComposeView` to `GameFragment`’s layout; update the
    file *fragment_game.xml* to include the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0835-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve updated the layout file, let’s start adding composables to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add a composable function for GameFragment’s content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0836-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Just as we did with *ResultFragment.kt*, we’ll add a new composable function
    to *GameFragment.kt* that we’ll use for the fragment’s UI. We’ll name the function
    `GameFragmentContent`, and call it from `setContent()` so that any composables
    we add to it will run when `GameFragment` gets displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the new code looks like; we’ll add it to *GameFragment.kt* a few
    pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0836-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Reproduce the Finish Game button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as we did with `ResultFragment`, we’ll add composables to the `GameFragmentContent`
    composable function so that they’re displayed in `GameFragment`’s UI. We’ll begin
    by reproducing the Finish Game button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Finish Game button is defined using the following code in the fragment’s
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0837-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, when the button is clicked, it calls `GameViewModel`’s `finishGame()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can reproduce this in Compose by creating a new composable function named
    `FinishGameButton` that we’ll run from `GameFragmentContent`. Here’s what the
    new code looks like; we’ll add it to *GameFragment.kt* a few pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0837-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Reproduce the EditText with a TextField
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next view we’ll reproduce is the `EditText` that lets the user enter a
    letter. We’ll create a new composable function named `EnterGuess` that uses a
    `TextField`, and accepts two arguments: a `String` for the user’s guess, and a
    lambda that specifies what should happen when the value changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0838-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll run the `EnterGuess` function from `GameFragmentContent` so that it’s
    added to the fragment’s UI. We’ll also add a `MutableState` object named `guess`
    to `GameFragmentContent,` which we’ll use to manage the `TextField`’s state.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0838-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s what the new code looks like; we’ll add it to *GameFragment.kt* a couple
    pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0838-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Reproduce the Guess button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve added a `TextField` to the UI that lets the user enter a letter,
    we’ll add a `Button` composable that passes the letter to the view model’s `makeGuess()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0839-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We’ll add the `Button` using a new composable function named `GuessButton`
    that we’ll run from `GameFragmentContent`. Here’s what the new code looks like;
    we’ll add it to *GameFragment.kt* on the next page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0839-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve now reproduced three of `GameFragment`’s views with composables. Before
    we tackle the remaining ones, let’s update *GameFragment.kt* and take the app
    for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: The updated code for GameFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the code so far for *GameFragment.kt*; update the file to include the
    changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0840-02.png)![image](Images/f0841-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `GameFragment` is displayed. It includes all its original
    views, along with three extra composables that let us make guesses and finish
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: When we use the `EnterGuess` and `GuessButton` composables to guess which letters
    the secret word contains, the app registers each guess. If we make a correct guess,
    the letter is added to the secret word display, and if we make a wrong guess,
    the number of lives left is updated and the letter is added to the list of incorrect
    guesses.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0842-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know the three composables we’ve added work, let’s tackle the remaining
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll display the incorrect guesses in a Text composable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next view we’ll reproduce is a `TextView` that uses live data to display
    the user’s incorrect guesses. Each time the user makes a wrong guess, it gets
    added to the `incorrectGuesses` property in the view model, and the `TextView`
    responds by updating the text it displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of the `TextView`’s code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0843-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We can replace the `TextView` with a `Text` composable so that it displays the
    same text, but how do we make sure the text gets updated when the `incorrectGuesses`
    property value changes?
  prefs: []
  type: TYPE_NORMAL
- en: Respond to LiveData using observeAsState()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you learned in [Chapter 18](ch18.xhtml#jetpack_composecolon_compose_yourself),
    composables are recomposed when any `State` or `MutableState` objects they depend
    on get new values. This *doesn’t* happen, however, for `LiveData` objects—like
    the view model’s `incorrectGuesses` property. If you try to use a `LivaData` object’s
    value with a composable, it won’t get redrawn when its value changes; it will
    just keep using the object’s initial value, so it won’t stay up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make a composable respond to `LiveData` updates, you can do so
    using the `**observeAsState()**` function. This function returns a `State` version
    of a `LiveData` object so that any composables that depend on it are recomposed
    when its value changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You use the `observeAsState()` function with code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0843-04.png)'
  prefs: []
  type: TYPE_IMG
- en: This defines a variable (whose type is `State`) that observes the view model’s
    `incorrectGuesses LiveData` property. It means that when its value changes, composables
    can respond.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s put this into practice by reproducing `GameFragment`’s incorrect guesses
    `TextView` in Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Create an IncorrectGuessesText composable function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To reproduce the incorrect guesses `TextView`, we’ll define a new composable
    function named `IncorrectGuessesText`. The function will accept a `GameViewModel`
    argument, observe its `incorrectGuesses` property, and use a `Text` composable
    to display its value in the UI. Each time the property’s value gets updated, the
    `Text` will be recomposed and display the updated text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the `IncorrectGuessesText` function looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0844-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `Text` composable in the above code uses a function named
    `stringResource()` to set its text. This function lets you use `String` resources
    with composables, and pass arguments to them.
  prefs: []
  type: TYPE_NORMAL
- en: Run IncorrectGuessesText from GameFragmentContent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like the other composable functions we’ve created, we’ll add `IncorrectGuessesText`
    to `GameFragment`’s UI by running it from the `GameFragmentContent` composable
    function. The new code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0844-03.png)![image](Images/f0844-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll update *GameFragment.kt* a few pages ahead. First, see if you can piece
    together the code for the remaining two composables by having a go at the following
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Compose Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Someone used fridge magnets to create two new composable functions (named `SecretWordDisplay`
    and `LivesLeftText`) that reproduce `GameFragment`’s two remaining views. Unfortunately
    some of the magnets fell off when someone unleashed the kitchen kraken. Can you
    piece the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: The `SecretWordDisplay` function needs to display the `secretWordDisplay LiveData<String>`
    property from `GameViewModel`. The `LivesLeftText` function needs to display the
    `lives_left String` resource, and pass it `GameViewModel`’s `livesLeft LiveData<Int>`
    property. Both functions need to be able to respond to live data updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0845-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Compose Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Someone used fridge magnets to create two new composable functions (named `SecretWordDisplay`
    and `LivesLeftText`) that reproduce `GameFragment`’s two remaining views. Unfortunately
    some of the magnets fell off when someone unleashed the kitchen kraken. Can you
    piece the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: The `SecretWordDisplay` function needs to display the `secretWordDisplay LiveData<String>`
    property from `GameViewModel`. The `LivesLeftText` function needs to display the
    `lives_left String` resource, and pass it `GameViewModel`’s `livesLeft LiveData<Int>`
    property. Both functions need to be able to respond to live data updates.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0846-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The updated code for GameFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You now know how to reproduce all of `GameFragment`’s views with composables,
    so let’s add them to *GameFragment.kt*. Update the file to include the changes
    below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0847-02.png)![image](Images/f0848-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `GameFragment` includes all its original views, and their
    Compose equivalents.
  prefs: []
  type: TYPE_NORMAL
- en: When we try to guess which letters the secret word contains, the text in the
    `SecretWordDisplay`, `LivesLeftText`, and `IncorrectGuessesText` composables is
    automatically updated.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0849-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve now made sure that all of `GameFragment`’s composables work just the way
    we want. All that’s left is for us to remove the fragment’s views.
  prefs: []
  type: TYPE_NORMAL
- en: Remove views from GameFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as we did with `ResultFragment`, we’ll remove `GameFragment`’s views by
    deleting its layout file. Before we can do this, however, we need to remove any
    references to the views from *GameFragment.kt*. We’ll also stop using data binding,
    as this is no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the full code for the file; update *GameFragment.kt* to include all
    the changes shown below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0850-02.png)![image](Images/f0851-02.png)![image](Images/f0852-02.png)![image](Images/f0853-02.png)![image](Images/f0854-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are all the changes we need to make to *GameFragment.kt* so that it doesn’t
    inflate its layout or reference any of its views.
  prefs: []
  type: TYPE_NORMAL
- en: As the fragment no longer needs to have a layout file, we can go ahead and delete
    it after we’ve removed any references to it from the navigation graph. We’ll do
    this on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Delete fragment_game.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The navigation graph includes a reference to the layout file *fragment_game.xml*.
    We need to remove this before we can remove the layout file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *nav_graph.xml* in the *app/src/main/res/navigation* folder, and remove
    the line that references `"@layout/fragment_game"` from the `GameFragment` section
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0855-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Then right-click on *fragment_game.xml* in the explorer, choose Refactor, and
    select the Safe Delete option. When you click on the OK button and choose the
    option to do the refactor, the file is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: We can also switch off data binding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One final change we can make to the Guessing Game app is to disable data binding.
    As you may recall, we originally enabled data binding so that views in *fragment_game.xml*
    and *fragment_result.xml* could interact with each fragment’s view model. Now
    that we’ve deleted the layout files, data binding is no longer required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To switch off data binding, open the file *GuessingGame/app/build.gradle*,
    and remove the data binding line from the `buildFeatures` section like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0855-03.png)'
  prefs: []
  type: TYPE_IMG
- en: When you’ve done this, click on the Sync Now option to sync the change with
    the rest of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take the app for a final test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `GameFragment` is displayed. This time, its UI is just
    made up of composables. They work exactly how we want them to.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0856-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to add composables to an existing `View`-based
    UI, and even replace your UI with one that just uses Compose.
  prefs: []
  type: TYPE_NORMAL
- en: We think Compose has a bright future ahead of it, and you can find out more
    about it in the appendix. In the meantime, why not try adding composables to some
    of the other apps you’ve built in this book?
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your **job** is to take code snippets from the pool and place them into the
    blank lines in the code below. You may **not** use the same snippet more than
    once, and you won’t need to use all the snippets. Your **goal** is to write the
    code for a fragment named `MusicFragment` that has no layout file and uses a composable
    function named `MusicFragmentContent` for its UI. A theme named `MusicTheme` needs
    to be applied to the UI, including any surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0857-01.png)![image](Images/f0857-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 19](#integrating_compose_with_viewscolon_perf) under
    your belt and now you’ve added integrating Jetpack Compose to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0858-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Leaving town
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0859-01.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s been great having you here in Androidville
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**We’re sad to see you leave,** but there’s nothing like taking what you’ve
    learned and putting it to good use. There are still a few more gems for you in
    the back of the book and a handy index to study, and then it’s time to take all
    these new ideas and put them into practice. Bon voyage!'
  prefs: []
  type: TYPE_NORMAL
