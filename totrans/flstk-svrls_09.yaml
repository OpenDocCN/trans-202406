- en: Chapter 9\. Building Offline Apps with Amplify DataStore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we’ve worked with REST APIs and GraphQL APIs. When working
    with the GraphQL APIs, we used the API class to directly call mutations and queries
    against the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amplify also supports another type of API for interacting with AppSync: Amplify
    DataStore. DataStore has a different approach than a traditional GraphQL API.'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of interacting with the GraphQL API itself, using queries and mutations,
    DataStore introduces a client-side SDK that allows you to write to and read from
    a local store and persists this data locally using the local storage engine of
    the platform you are working with (i.e., IndexDB for web and SQLite for native
    iOS and Android). DataStore then automatically syncs the local data to the GraphQL
    backend for you as updates are made both locally and remotely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the DataStore SDK, you then only have to perform the operations like
    save, update, and delete, writing directly to DataStore itself. DataStore handles
    everything else for you: it syncs your data to the cloud when you have an internet
    connection, and if you’re not online, will queue it for the next time you’re connected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DataStore also handles conflict detection and resolution for you with one of
    three built-in conflict-resolution strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: AutoMerge
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL type information on an object is inspected at runtime to perform merge
    operations (suggested option).
  prefs: []
  type: TYPE_NORMAL
- en: Optimistic concurrency
  prefs: []
  type: TYPE_NORMAL
- en: The latest written item to your database will be used with a version check against
    the incoming record.
  prefs: []
  type: TYPE_NORMAL
- en: Custom
  prefs: []
  type: TYPE_NORMAL
- en: Use a Lambda function and write any custom business logic you wish to the process
    when merging or rejecting updates.
  prefs: []
  type: TYPE_NORMAL
- en: About Amplify DataStore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Amplify DataStore](https://oreil.ly/Wv_TT) is a combination of the following
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: AppSync GraphQL API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local storage repository and syncing engine that also persists data offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side SDK for interacting with the local storage repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special sync-enabled GraphQL resolvers (generated by the Amplify CLI) that enable
    sophisticated conflict detection and conflict resolution on the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amplify DataStore Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When getting started with DataStore, you still create the API as we have done
    in past chapters. The main difference is, when creating the API, you will enable
    *conflict detection* in the advanced settings of the CLI flow.
  prefs: []
  type: TYPE_NORMAL
- en: From there, to enable DataStore on the client, we need to create models for
    DataStore to use to interact with the storage repository. This can easily be done
    by just using the GraphQL schema you already have and running a build command—`amplify
    codegen models`—from the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are all set up and can begin interacting with DataStore.
  prefs: []
  type: TYPE_NORMAL
- en: Amplify DataStore Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To interact with the Store, first import the `DataStore` API from Amplify and
    the Model you’d like to use. From there, you can perform actions against the store.
  prefs: []
  type: TYPE_NORMAL
- en: See [Table 9-1](#table-DataStore) for some available operations.
  prefs: []
  type: TYPE_NORMAL
- en: Table 9-1\. Amplify DataStore Operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Commands |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Import the model and DataStore API | `import { DataStore } from ''@aws-amplify/datastore''
    import { Message} from ''./models''` |'
  prefs: []
  type: TYPE_TB
- en: '| Saving data | `await DataStore.save( new Message({ title: ''Hello World'',
    sender: ''Chris'' }) ))` |'
  prefs: []
  type: TYPE_TB
- en: '| Reading data | `const posts = await DataStore.query(Post)` |'
  prefs: []
  type: TYPE_TB
- en: '| Deleting data | `const message = await DataStore.query(Message, ''123'')
    DataStore.delete(message)` |'
  prefs: []
  type: TYPE_TB
- en: '| Updating data | `const message = await DataStore.query(Message, ''123'')
    await DataStore.save( Post.copyOf(message, updated => { updated.title = ''My new
    title'' }) )` |'
  prefs: []
  type: TYPE_TB
- en: '| Observing/subscribing to changes in data for real-time functionality | `const
    subscription = DataStore.observe(Message).subscribe(msg => { console.log(message.model,
    message.opType, message.element) });` |'
  prefs: []
  type: TYPE_TB
- en: DataStore Predicates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can apply predicate filters against the DataStore using the fields defined
    on your GraphQL type along with the following conditions supported by DynamoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you wanted a list of all messages that have a `title` that
    includes “Hello”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also chain multiple predicates into a single operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These predicates enable you to have many ways to retrieve different selection
    sets from your local data. Instead of retrieving the entire collection and filtering
    on the client, you are able to query from the store exactly the data that you
    need.
  prefs: []
  type: TYPE_NORMAL
- en: Building an Offline and Real-Time App with Amplify DataStore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app that we will build is a real-time and offline-first message board, as
    shown in [Figure 9-1](#fig9a).
  prefs: []
  type: TYPE_NORMAL
- en: '![Real Time Message Board](Images/fssl_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. Real-time message board
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Users of the app can create a new message and all other users will receive the
    message in real time. If a user goes offline, they will continue to be able to
    create messages. Once they are online, the messages will be synced with the backend,
    and all other messages created by other users will also be fetched and synced
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our app will perform three types of operations against the DataStore API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`save`'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new item in the DataStore; saves the item locally and performs a
    GraphQL mutation behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: '`query`'
  prefs: []
  type: TYPE_NORMAL
- en: Reading from the DataStore; returns a single item or list (array) and performs
    a GraphQL query behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: '`observe`'
  prefs: []
  type: TYPE_NORMAL
- en: Listening for changes (create, update, delete) in data and performs a GraphQL
    subscription behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Base Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we will create a new React project, initialize an Amplify app,
    and install the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is create the React project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will install the local dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Amplify supports a full installation of Amplify, and *scoped* (modular) installations
    for specific APIs. Scoped packages reduce the bundle size, since we’re installing
    only the code that we are using. Since we are only using the DataStore API, we
    can install the scoped DataStore package.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also install Ant Design (`antd`) for styling, React Color (`react-color`)
    for an easy-to-use color picker, and the scoped dependency for Amplify Core in
    order to still configure the Amplify app with *aws-exports.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, initialize a new Amplify project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create the AppSync GraphQL API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the schema with the following type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have created the GraphQL API, and we have a GraphQL schema to work
    with, we can create the models we’ll need for working the local DataStore API
    (based on the GraphQL schema):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a new folder in our project called *models*. Using the models
    in this folder, we can start interacting with the DataStore API. Deploy the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With the backend deployed, we can start writing the client-side code.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Client-Side Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, open *src/index.js* and configure the Amplify app by adding the following
    code below the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are importing from `@aws-amplify/core` instead of `aws-amplify`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open *App.js* and update it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s walk through the most important parts of what’s going on in this component:'
  prefs: []
  type: TYPE_NORMAL
- en: We import the `DataStore` API from Amplify as well as the `Message` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We create three pieces of component state using the `useState` hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`formState`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This object manages the state for the form, including the `title` and `color`
    that will be used to display the background color of the message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`messages`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will manage the array of messages once they are fetched from DataStore.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`showPicker`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will manage a Boolean value that will be toggled to show and hide a color
    picker to fill the `color` value for the message (by default, the color is set
    to black and held in the `formState`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When the component loads (in `useEffect`), we fetch all messages by invoking
    the `fetchMessages` function and create a subscription (`DataStore.observe`) to
    listen to message updates. When a subscription is fired, we again invoke the `fetchMessages`
    function because we know there has been an update and we would like to update
    the app with the most recent data coming back from the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `fetchMessages` function calls `DataStore.query` and then updates the component
    state with the returned array of messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onChange` handler handles the updates to the form input as well as the
    color picker being changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `createMessage`, we first check to make sure the title field is populated.
    If it is, we save the message using `DataStore.save` and then reset the form state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s test it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Testing the Offline Functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try going offline, creating a new mutation, and then coming back online. You
    should notice that, when back online, the app takes all of the messages created
    when you were offline and creates them in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify this, open the AppSync API in the AWS Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, click Data Sources and then open the Message Table resource. You should
    now see the items in the Message Table.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Real-Time Functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test out the real-time functionality, open another browser window so that
    you have two windows running the same app. Then create a new item in one window
    and see the update come through automatically in the other window.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Amplify enables two different APIs to interact with AppSync: the `API` category
    as well as DataStore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using DataStore, you are no longer sending HTTP requests directly to the
    API. Instead, you are writing to the local storage engine, and DataStore then
    takes care of syncing to and from the cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amplify DataStore works offline by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
