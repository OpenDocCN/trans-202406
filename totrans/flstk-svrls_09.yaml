- en: Chapter 9\. Building Offline Apps with Amplify DataStore
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用Amplify DataStore构建离线应用程序
- en: So far in this book, we’ve worked with REST APIs and GraphQL APIs. When working
    with the GraphQL APIs, we used the API class to directly call mutations and queries
    against the API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经使用过REST API和GraphQL API。在使用GraphQL API时，我们使用API类直接调用突变和查询。
- en: 'Amplify also supports another type of API for interacting with AppSync: Amplify
    DataStore. DataStore has a different approach than a traditional GraphQL API.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify还支持与AppSync交互的另一种API类型：Amplify DataStore。DataStore与传统的GraphQL API有所不同的方法。
- en: Instead of interacting with the GraphQL API itself, using queries and mutations,
    DataStore introduces a client-side SDK that allows you to write to and read from
    a local store and persists this data locally using the local storage engine of
    the platform you are working with (i.e., IndexDB for web and SQLite for native
    iOS and Android). DataStore then automatically syncs the local data to the GraphQL
    backend for you as updates are made both locally and remotely.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与直接使用查询和突变与GraphQL API本身进行交互不同，DataStore引入了一个客户端SDK，允许您写入和从本地存储读取，并使用平台的本地存储引擎（例如，Web使用IndexDB，本地iOS和Android使用SQLite）持久化此数据。随着本地和远程数据的更新，DataStore会自动将本地数据同步到GraphQL后端。
- en: 'Using the DataStore SDK, you then only have to perform the operations like
    save, update, and delete, writing directly to DataStore itself. DataStore handles
    everything else for you: it syncs your data to the cloud when you have an internet
    connection, and if you’re not online, will queue it for the next time you’re connected.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DataStore SDK，然后只需执行保存、更新和删除等操作，直接写入DataStore本身。当您连接到互联网时，DataStore会同步您的数据到云端；如果您没有联网，则会将数据排队，等待下次连接时处理。
- en: 'DataStore also handles conflict detection and resolution for you with one of
    three built-in conflict-resolution strategies:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: DataStore还为您处理冲突检测和解决冲突，提供三种内置的冲突解决策略之一：
- en: AutoMerge
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自动合并
- en: GraphQL type information on an object is inspected at runtime to perform merge
    operations (suggested option).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时检查对象上的GraphQL类型信息以执行合并操作（建议选项）。
- en: Optimistic concurrency
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 乐观并发性
- en: The latest written item to your database will be used with a version check against
    the incoming record.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将最新写入的项目与传入记录的版本进行检查。
- en: Custom
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义
- en: Use a Lambda function and write any custom business logic you wish to the process
    when merging or rejecting updates.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Lambda函数并写入任何自定义业务逻辑，以便在合并或拒绝更新时进行处理。
- en: About Amplify DataStore
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Amplify DataStore
- en: '[Amplify DataStore](https://oreil.ly/Wv_TT) is a combination of the following
    things:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Amplify DataStore](https://oreil.ly/Wv_TT) 是以下内容的结合：'
- en: AppSync GraphQL API
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AppSync GraphQL API
- en: Local storage repository and syncing engine that also persists data offline
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地存储库和同步引擎，还可以离线持久化数据
- en: Client-side SDK for interacting with the local storage repository
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于与本地存储库交互的客户端SDK
- en: Special sync-enabled GraphQL resolvers (generated by the Amplify CLI) that enable
    sophisticated conflict detection and conflict resolution on the server
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Amplify CLI生成的特殊启用同步的GraphQL解析器，使服务器上的复杂冲突检测和冲突解决成为可能
- en: Amplify DataStore Overview
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amplify DataStore概述
- en: When getting started with DataStore, you still create the API as we have done
    in past chapters. The main difference is, when creating the API, you will enable
    *conflict detection* in the advanced settings of the CLI flow.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用DataStore时，您仍然会像在过去的章节中一样创建API。主要区别在于，在创建API时，您将在CLI流程的高级设置中启用*冲突检测*。
- en: From there, to enable DataStore on the client, we need to create models for
    DataStore to use to interact with the storage repository. This can easily be done
    by just using the GraphQL schema you already have and running a build command—`amplify
    codegen models`—from the CLI.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，要在客户端上启用DataStore，我们需要为DataStore创建模型，以便与存储库进行交互。这可以通过使用您已有的GraphQL模式，并从CLI运行构建命令`amplify
    codegen models`轻松完成。
- en: Now, you are all set up and can begin interacting with DataStore.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经设置好了，可以开始与DataStore交互。
- en: Amplify DataStore Operations
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amplify DataStore操作
- en: To interact with the Store, first import the `DataStore` API from Amplify and
    the Model you’d like to use. From there, you can perform actions against the store.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要与Store进行交互，首先从Amplify导入`DataStore` API和您想要使用的模型。从那里，您可以执行与存储相关的操作。
- en: See [Table 9-1](#table-DataStore) for some available operations.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[表 9-1](#table-DataStore)了解一些可用操作。
- en: Table 9-1\. Amplify DataStore Operations
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-1。Amplify DataStore操作
- en: '| Operation | Commands |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 命令 |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Import the model and DataStore API | `import { DataStore } from ''@aws-amplify/datastore''
    import { Message} from ''./models''` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 导入模型和 DataStore API | `import { DataStore } from ''@aws-amplify/datastore''
    import { Message} from ''./models''` |'
- en: '| Saving data | `await DataStore.save( new Message({ title: ''Hello World'',
    sender: ''Chris'' }) ))` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 保存数据 | `await DataStore.save( new Message({ title: ''Hello World'', sender:
    ''Chris'' }) ))` |'
- en: '| Reading data | `const posts = await DataStore.query(Post)` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 读取数据 | `const posts = await DataStore.query(Post)` |'
- en: '| Deleting data | `const message = await DataStore.query(Message, ''123'')
    DataStore.delete(message)` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 删除数据 | `const message = await DataStore.query(Message, ''123'') DataStore.delete(message)`
    |'
- en: '| Updating data | `const message = await DataStore.query(Message, ''123'')
    await DataStore.save( Post.copyOf(message, updated => { updated.title = ''My new
    title'' }) )` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 更新数据 | `const message = await DataStore.query(Message, ''123'') await DataStore.save(
    Post.copyOf(message, updated => { updated.title = ''My new title'' }) )` |'
- en: '| Observing/subscribing to changes in data for real-time functionality | `const
    subscription = DataStore.observe(Message).subscribe(msg => { console.log(message.model,
    message.opType, message.element) });` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 观察/订阅数据变更以实现实时功能 | `const subscription = DataStore.observe(Message).subscribe(msg
    => { console.log(message.model, message.opType, message.element) });` |'
- en: DataStore Predicates
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataStore 谓词
- en: 'You can apply predicate filters against the DataStore using the fields defined
    on your GraphQL type along with the following conditions supported by DynamoDB:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对 DataStore 应用谓词过滤器，使用在您的 GraphQL 类型上定义的字段，以及 DynamoDB 支持的以下条件：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, if you wanted a list of all messages that have a `title` that
    includes “Hello”:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想要所有标题中包含“Hello”的消息列表：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also chain multiple predicates into a single operation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将多个谓词链接为单个操作：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These predicates enable you to have many ways to retrieve different selection
    sets from your local data. Instead of retrieving the entire collection and filtering
    on the client, you are able to query from the store exactly the data that you
    need.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些谓词使您能够以许多方式从本地数据中检索不同的选择集。而不是在客户端检索整个集合并进行过滤，您可以精确地从存储中查询您需要的数据。
- en: Building an Offline and Real-Time App with Amplify DataStore
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amplify DataStore 构建离线和实时应用程序
- en: The app that we will build is a real-time and offline-first message board, as
    shown in [Figure 9-1](#fig9a).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个实时和离线优先的消息板应用程序，如图 [Figure 9-1](#fig9a) 所示。
- en: '![Real Time Message Board](Images/fssl_0901.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![实时消息板](Images/fssl_0901.png)'
- en: Figure 9-1\. Real-time message board
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. 实时消息板
- en: Users of the app can create a new message and all other users will receive the
    message in real time. If a user goes offline, they will continue to be able to
    create messages. Once they are online, the messages will be synced with the backend,
    and all other messages created by other users will also be fetched and synced
    locally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的用户可以创建新消息，所有其他用户都将实时接收消息。如果用户离线，他们将继续能够创建消息。一旦上线，消息将与后端同步，并且其他用户创建的所有其他消息也将被获取并在本地同步。
- en: 'Our app will perform three types of operations against the DataStore API:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将针对 DataStore API 执行三种类型的操作：
- en: '`save`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`save`'
- en: Creating a new item in the DataStore; saves the item locally and performs a
    GraphQL mutation behind the scenes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataStore 中创建新项目；在本地保存项目并在后台执行 GraphQL 变更。
- en: '`query`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`query`'
- en: Reading from the DataStore; returns a single item or list (array) and performs
    a GraphQL query behind the scenes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从 DataStore 中读取；返回单个项目或列表（数组）并在后台执行 GraphQL 查询。
- en: '`observe`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`observe`'
- en: Listening for changes (create, update, delete) in data and performs a GraphQL
    subscription behind the scenes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 监听数据变更（创建、更新、删除），并在后台执行 GraphQL 订阅。
- en: Let’s get started.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the Base Project
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基础项目
- en: To get started, we will create a new React project, initialize an Amplify app,
    and install the dependencies.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将创建一个新的 React 项目，初始化一个 Amplify 应用程序并安装依赖项。
- en: 'The first thing we will do is create the React project:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建 React 项目：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we will install the local dependencies.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装本地依赖项。
- en: Amplify supports a full installation of Amplify, and *scoped* (modular) installations
    for specific APIs. Scoped packages reduce the bundle size, since we’re installing
    only the code that we are using. Since we are only using the DataStore API, we
    can install the scoped DataStore package.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify 支持全面安装 Amplify 和 *范围*（模块化）安装特定 API 的安装。范围化的包可以减少包大小，因为我们只安装正在使用的代码。由于我们只使用
    DataStore API，我们可以安装范围化的 DataStore 包。
- en: 'We will also install Ant Design (`antd`) for styling, React Color (`react-color`)
    for an easy-to-use color picker, and the scoped dependency for Amplify Core in
    order to still configure the Amplify app with *aws-exports.js*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将安装Ant Design（`antd`）进行样式设计，React Color（`react-color`）用于易于使用的颜色选择器，并为Amplify
    Core配置创建作用域依赖项，以便仍然使用*aws-exports.js*配置Amplify应用：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, initialize a new Amplify project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，初始化一个新的Amplify项目：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating the API
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建API
- en: 'Now we will create the AppSync GraphQL API:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建AppSync GraphQL API：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Update the schema with the following type:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下类型更新模式：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that we have created the GraphQL API, and we have a GraphQL schema to work
    with, we can create the models we’ll need for working the local DataStore API
    (based on the GraphQL schema):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了GraphQL API，并且有一个GraphQL模式可以使用，我们可以为使用本地DataStore API（基于GraphQL模式）的模型创建所需的模型：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will create a new folder in our project called *models*. Using the models
    in this folder, we can start interacting with the DataStore API. Deploy the API:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在项目中创建一个名为*models*的新文件夹。使用此文件夹中的模型，我们可以开始与DataStore API交互。部署API：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With the backend deployed, we can start writing the client-side code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 后端部署完成后，我们可以开始编写客户端代码。
- en: Writing the Client-Side Code
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写客户端代码
- en: 'First, open *src/index.js* and configure the Amplify app by adding the following
    code below the last import:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在*src/index.js*中打开并在最后一个导入下方添加以下代码配置Amplify应用：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that we are importing from `@aws-amplify/core` instead of `aws-amplify`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们从`@aws-amplify/core`而不是`aws-amplify`进行导入。
- en: 'Next, open *App.js* and update it with the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在*App.js*中打开并使用以下代码更新它：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s walk through the most important parts of what’s going on in this component:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解此组件中正在进行的最重要部分：
- en: We import the `DataStore` API from Amplify as well as the `Message` model.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还从Amplify导入`DataStore` API以及`Message`模型。
- en: 'We create three pieces of component state using the `useState` hook:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`useState`钩子创建三个组件状态的部分：
- en: '`formState`'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`formState`'
- en: This object manages the state for the form, including the `title` and `color`
    that will be used to display the background color of the message.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此对象管理表单的状态，包括用于显示消息背景颜色的`title`和`color`。
- en: '`messages`'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`messages`'
- en: This will manage the array of messages once they are fetched from DataStore.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦从DataStore获取了消息数组，这将管理这些消息数组。
- en: '`showPicker`'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`showPicker`'
- en: This will manage a Boolean value that will be toggled to show and hide a color
    picker to fill the `color` value for the message (by default, the color is set
    to black and held in the `formState`).
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将管理一个布尔值，该值将被切换以显示和隐藏用于填充消息的`color`值的颜色选择器（默认情况下，颜色设置为黑色并保存在`formState`中）。
- en: When the component loads (in `useEffect`), we fetch all messages by invoking
    the `fetchMessages` function and create a subscription (`DataStore.observe`) to
    listen to message updates. When a subscription is fired, we again invoke the `fetchMessages`
    function because we know there has been an update and we would like to update
    the app with the most recent data coming back from the API.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当组件加载（在`useEffect`中）时，我们通过调用`fetchMessages`函数获取所有消息，并创建订阅（`DataStore.observe`）以监听消息更新。订阅触发时，我们再次调用`fetchMessages`函数，因为我们知道已经有更新，并且我们希望使用从API返回的最新数据更新应用。
- en: The `fetchMessages` function calls `DataStore.query` and then updates the component
    state with the returned array of messages.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fetchMessages`函数调用`DataStore.query`，然后使用返回的消息数组更新组件状态。'
- en: The `onChange` handler handles the updates to the form input as well as the
    color picker being changed.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onChange`处理程序处理表单输入的更新以及更改颜色选择器。'
- en: In `createMessage`, we first check to make sure the title field is populated.
    If it is, we save the message using `DataStore.save` and then reset the form state.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`createMessage`中，我们首先检查确保标题字段已填写。如果填写了，我们使用`DataStore.save`保存消息，然后重置表单状态。
- en: 'Let’s test it out:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Testing the Offline Functionality
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试离线功能
- en: Try going offline, creating a new mutation, and then coming back online. You
    should notice that, when back online, the app takes all of the messages created
    when you were offline and creates them in the database.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试离线，创建新的突变，然后再次在线。您应该注意到，当再次在线时，应用程序将在数据库中创建在离线时创建的所有消息。
- en: 'To verify this, open the AppSync API in the AWS Console:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证此内容，请在AWS控制台中打开AppSync API：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, click Data Sources and then open the Message Table resource. You should
    now see the items in the Message Table.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击数据源，然后打开消息表资源。现在您应该能看到消息表中的项目。
- en: Testing the Real-Time Functionality
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试实时功能
- en: To test out the real-time functionality, open another browser window so that
    you have two windows running the same app. Then create a new item in one window
    and see the update come through automatically in the other window.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试实时功能，打开另一个浏览器窗口，这样你就可以在两个窗口中同时运行同一个应用程序。然后在一个窗口中创建一个新项目，看看更新是否会自动在另一个窗口中显示出来。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章中请记住以下几点：
- en: 'Amplify enables two different APIs to interact with AppSync: the `API` category
    as well as DataStore.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amplify 使两个不同的 API 能够与 AppSync 交互：`API` 类别以及 DataStore。
- en: When using DataStore, you are no longer sending HTTP requests directly to the
    API. Instead, you are writing to the local storage engine, and DataStore then
    takes care of syncing to and from the cloud.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 DataStore 时，你不再直接向 API 发送 HTTP 请求。相反，你是在写入本地存储引擎，然后 DataStore 负责同步到云端。
- en: Amplify DataStore works offline by default.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amplify DataStore 默认离线工作。
