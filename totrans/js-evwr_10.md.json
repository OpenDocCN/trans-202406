["```\n// first require the package at the top of the file\nconst helmet = require('helmet')\n\n// add the middleware at the top of the stack, after const app = express()\napp.use(helmet());\n```", "```\n// first require the package at the top of the file\nconst cors = require('cors');\n\n// add the middleware after app.use(helmet());\napp.use(cors());\n```", "```\ntype NoteFeed {\n  notes: [Note]!\n  cursor: String!\n  hasNextPage: Boolean!\n}\n```", "```\ntype Query {\n  # add noteFeed to our existing queries\n  noteFeed(cursor: String): NoteFeed\n}\n```", "```\nnoteFeed: async (parent, { cursor }, { models }) => {\n  // hardcode the limit to 10 items\n  const limit = 10;\n  // set the default hasNextPage value to false\n  let hasNextPage = false;\n  // if no cursor is passed the default query will be empty\n  // this will pull the newest notes from the db\n  let cursorQuery = {};\n\n  // if there is a cursor\n  // our query will look for notes with an ObjectId less than that of the cursor\n  if (cursor) {\n    cursorQuery = { _id: { $lt: cursor } };\n  }\n\n  // find the limit + 1 of notes in our db, sorted newest to oldest\n  let notes = await models.Note.find(cursorQuery)\n    .sort({ _id: -1 })\n    .limit(limit + 1);\n\n  // if the number of notes we find exceeds our limit\n  // set hasNextPage to true and trim the notes to the limit\n  if (notes.length > limit) {\n    hasNextPage = true;\n    notes = notes.slice(0, -1);\n  }\n\n  // the new cursor will be the Mongo object ID of the last item in the feed array\n  const newCursor = notes[notes.length - 1]._id;\n\n  return {\n    notes,\n    cursor: newCursor,\n    hasNextPage\n  };\n}\n```", "```\nquery {\n  noteFeed {\n    notes {\n      id\n      createdAt\n    }\n    cursor\n    hasNextPage\n  }\n}\n```", "```\nquery {\n  noteFeed(cursor: \"<YOUR OBJECT ID>\") {\n    notes {\n      id\n      createdAt\n    }\n    cursor\n    hasNextPage\n  }\n}\n```", "```\nnotes: async (parent, args, { models }) => {\n  return await models.Note.find().limit(100);\n}\n```", "```\n// import the modules at the top of the file\nconst depthLimit = require('graphql-depth-limit');\nconst { createComplexityLimitRule } = require('graphql-validation-complexity');\n\n// update our ApolloServer code to include validationRules\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  validationRules: [depthLimit(5), createComplexityLimitRule(1000)],\n  context: async ({ req }) => {\n    // get the user token from the headers\n    const token = req.headers.authorization;\n    // try to retrieve a user with the token\n    const user = await getUser(token);\n    // add the db models and the user to the context\n    return { models, user };\n  }\n});\n```"]