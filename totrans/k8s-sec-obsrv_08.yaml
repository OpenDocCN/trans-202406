- en: Chapter 8\. Managing Trust Across Teams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 管理团队之间的信任
- en: In the previous chapter we explored how network policy represents an opportunity
    to adopt a shift-left philosophy for network security, where security is defined
    by teams earlier in the development cycle rather than being defined and maintained
    by a security team late in the process. This approach can bring a lot of benefits,
    but to be viable, there needs to be a corresponding degree of trust and split
    of responsibilities between the teams involved.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们探讨了网络策略如何代表一种采用左移哲学来进行网络安全的机会，即由开发周期早期的团队定义安全，而不是由安全团队在过程晚期定义和维护安全。这种方法可以带来许多好处，但为了可行性，需要在涉及的团队之间建立相应的信任程度和责任划分。
- en: In most organizations, it’s not practical to shift 100% of the responsibility
    for security all the way to the left, with all other teams (platform, network,
    and security) washing their hands of any responsibility for security. So for example,
    while the responsibility for lower-level details of individual microservice security
    may be shifted left, the security team may still be responsible for ensuring that
    your Kubernetes deployment has a security posture that meets internal and external
    compliance requirements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数组织中，将安全责任的100%向左移动并不现实，其他团队（平台、网络和安全）不会完全摆脱安全责任。例如，尽管可能会将个体微服务安全的较低级别细节的责任向左移动，但安全团队仍可能负责确保您的
    Kubernetes 部署具有符合内部和外部合规要求的安全姿态。
- en: Some enterprises handle this by defining internal processes, for example, to
    ensure the security team reviews all security changes before they are applied.
    The downside of this approach is it can reduce agility, which is at odds with
    one of the motivations for shifting left, that being to increase agility.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些企业通过定义内部流程来处理这个问题，例如确保安全团队在应用安全更改之前审查所有安全更改。这种方法的缺点是可能会降低敏捷性，这与左移的动机之一相矛盾，即增加敏捷性。
- en: Fortunately, there are various types of guardrails that can be put in place
    across a Kubernetes environment that reduce the need for these kinds of traditional
    process controls. In this chapter we will explore some of these capabilities and
    how they can be used to control the degree of trust being delegated from one team
    to another in the context of a shift-left approach to security.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在 Kubernetes 环境中可以设置各种类型的防护栏，从而减少对这些传统流程控制的需求。在本章中，我们将探讨一些这些能力以及它们如何用于控制在安全左移方法背景下从一个团队委托给另一个团队的信任程度。
- en: Role-Based Access Control
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: Kubernetes role-based access control (RBAC) is the primary tool for defining
    the scope of what individual users or groups of users are permitted to do in a
    Kubernetes cluster. RBAC permissions are defined using roles and granted to users
    or groups of users via role bindings. Each role includes a list of resources (specified
    by resource type, cluster-wide, within a namespace, or even a specific resource
    instance) and the permissions for each of the resources (e.g., get, list, create,
    update, delete, etc.).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 基于角色的访问控制（RBAC）是定义个别用户或用户组在 Kubernetes 集群中被允许做什么的主要工具。RBAC 权限是使用角色定义的，并通过角色绑定授予给用户或用户组。每个角色包括一系列资源（按资源类型指定，集群范围内，在命名空间内，甚至是特定的资源实例）以及每个资源的权限（例如，获取、列出、创建、更新、删除等）。
- en: Many Kubernetes resources are namespaced, including deployments, daemonsets,
    pods, and Kubernetes network policies. This makes the namespace an ideal trust
    boundary between teams. There are no set rules for how to use namespaces, but
    one common practice is to use a namespace per microservice. RBAC can then be used
    to grant permission to manage the resources in the namespace to the team responsible
    for operating the corresponding microservice.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Kubernetes 资源是有命名空间的，包括部署、守护进程集、Pod 和 Kubernetes 网络策略。这使得命名空间成为团队之间理想的信任边界。关于如何使用命名空间没有固定的规则，但一种常见的做法是为每个微服务使用一个命名空间。然后可以使用
    RBAC 授予权限，以便团队能够管理对应微服务的命名空间中的资源。
- en: If security has been shifted left, this would normally include permissions to
    manage the network policies that apply to the microservice, but not to manage
    any network policies that apply to microservices they are not responsible for.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安全已经向左移动，这通常包括管理适用于微服务的网络策略的权限，但不包括管理他们不负责的微服务适用的任何网络策略。
- en: If default deny–style best practices are being followed for both ingress and
    egress traffic, then the team cannot forget to write network policies, because
    the microservice will not work without them. In addition, since other teams will
    have defined equivalent network policies covering both ingress and egress traffic
    for the microservices they are responsible for, traffic is allowed between two
    microservices only if both teams have specified network policy that says the traffic
    is allowed. This further controls the degree of trust being delegated to each
    team.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对入口和出口流量都遵循了默认拒绝式最佳实践，那么团队不能忘记编写网络策略，因为没有网络策略，微服务将无法正常工作。此外，由于其他团队已定义了覆盖其负责的微服务的入口和出口流量的等效网络策略，因此仅当两个团队都指定了允许该流量的网络策略时，两个微服务之间的流量才被允许。这进一步控制了每个团队委托的程度。
- en: Of course, depending on the degree to which security has been shifted left,
    the responsibility for defining network policies may fall to a different team
    than the team responsible for operating the microservice. Again, Kubernetes RBAC
    can be used to easily reflect this split of responsibilities.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，根据安全左移的程度，定义网络策略的责任可能由不同的团队承担，而不是负责操作微服务的团队。同样，Kubernetes RBAC 可以用于轻松反映这种责任分担。
- en: Limitations with Kubernetes Network Policies
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 网络策略的限制
- en: 'There are a couple of limitations it is worth being aware of when using RBAC
    with Kubernetes network policies in a shift-left environment:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 RBAC 与 Kubernetes 网络策略在左移环境中存在一些值得注意的限制：
- en: Default deny–style policies need to be created per namespace at the time the
    namespace is provisioned. The team responsible for defining network policies for
    the microservice would also have the ability to modify or delete this default
    policy if they wanted to.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认拒绝式策略需要在为命名空间提供服务时创建。负责为微服务定义网络策略的团队还可以修改或删除此默认策略。
- en: Network policies are IP-based, and you cannot use fully qualified domain names
    (FQDNs). This can be a limitation especially when defining policies to resources
    external to the cluster.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络策略是基于 IP 的，不能使用完全合格的域名 (FQDN)。这在定义到集群外部资源的策略时可能是一个限制。
- en: Kubernetes RBAC controls access to resources but does not constrain the contents
    of resources. Of particular relevance in the context of network policies are pod
    labels, since these are used as the primary mechanism for identifying other microservices
    in network policy rules. So for example, if one team has written a network policy
    for their microservice with a rule allowing traffic to it from pods with a particular
    label, then in theory any team with permission to manage pods could add that label
    to their pods and get access to the microservice. This exposure can be reduced
    by always using namespace sectors within policy rules and being selective as to
    which teams have permissions to change namespace labels.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes RBAC 控制资源的访问，但不限制资源的内容。在网络策略的上下文中尤为相关的是 pod 标签，因为它们被用作网络策略规则中识别其他微服务的主要机制。例如，如果一个团队为其微服务编写了一个网络策略，允许来自具有特定标签的
    pod 的流量访问它，那么理论上任何有权限管理 pod 的团队都可以将该标签添加到其 pod 中，并获得对该微服务的访问权限。通过始终在策略规则中使用命名空间部门并且有选择地授予哪些团队修改命名空间标签的权限，可以减少这种暴露。
- en: 'If standardized policy and label schemas have been defined and the teams are
    trusted to follow them, then these limitations are more of a theoretical rather
    than practical issue. However, for some organizations, they may represent genuine
    issues for their security needs. These organizations may therefore want to leverage
    additional capabilities beyond Kubernetes RBAC and Kubernetes network policies.
    In particular, they might consider:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已定义了标准化的策略和标签模式，并且团队被信任遵循它们，那么这些限制更多是理论上的问题而不是实际问题。然而，对于某些组织来说，它们可能代表了真正影响其安全需求的问题。这些组织因此可能希望利用超出
    Kubernetes RBAC 和 Kubernetes 网络策略之外的额外能力。特别是，他们可能考虑：
- en: Richer network policy implementations that support additional network policy
    types, match criteria, and non-namespaced network policies, which open up more
    options for how to split responsibilities and RBAC across teams
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更丰富的网络策略实现支持额外的网络策略类型、匹配条件和非命名空间网络策略，这些开放了更多的选项来分配责任和 RBAC 给团队。
- en: Admission controllers to enforce controls on a per-field level within resources,
    for example to ensure a standardized network policy and label schemas are followed,
    including limiting teams to using particular labels
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准入控制器可在资源内的每个字段级别强制执行控制，例如确保遵循标准化的网络策略和标签模式，包括限制团队使用特定标签。
- en: We will now review network policy implementations that extend the Kubernetes
    network policy and how you can use the same to manage trust.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将审查扩展Kubernetes网络策略的网络策略实现及如何使用它们来管理信任。
- en: Richer Network Policy Implementations
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更丰富的网络策略实现
- en: Some network policy implementations support both Kubernetes network policies
    and their own custom network policy resources that can be used alongside or instead
    of Kubernetes network policies. Depending on the implementation, these may open
    up additional options for how to split responsibilities and use RBAC across teams.
    There are vendors that offer richer network policy implementations that support
    the Kubernetes network policy and add more features (e.g., Weave Net, Kube-router,
    Antrea, Calico). We encourage you to review these and choose the best one that
    meets your needs. In this section we will look at the concrete example using Calico,
    as it is the most widely deployed container network plug-in.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网络策略实现支持Kubernetes网络策略及其自定义网络策略资源，可与或取代Kubernetes网络策略使用。根据实现情况，这些可能会为如何分割责任和跨团队使用RBAC提供额外选项。有些供应商提供更丰富的网络策略实现，支持Kubernetes网络策略并添加更多功能（例如，Weave
    Net，Kube-router，Antrea，Calico）。我们鼓励您审查这些内容，并选择最符合您需求的最佳选项。在本节中，我们将通过Calico来看具体示例，因为它是最广泛部署的容器网络插件。
- en: 'Calico supports the Kubernetes network policy feature set, plus its own Calico
    network policy resources, which can be used alongside Kubernetes network policies.
    There are two types of Calico network policies, both under the projectcalico.org/v3
    API group:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Calico支持Kubernetes网络策略功能集，以及其自身的Calico网络策略资源，可与Kubernetes网络策略并存使用。Calico网络策略有两种类型，均属于projectcalico.org/v3
    API组：
- en: NetworkPolicy
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkPolicy
- en: These policies are namespaced (just like Kubernetes network policies).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略是命名空间作用域的（与Kubernetes网络策略类似）。
- en: GlobalNetworkPolicy
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: GlobalNetworkPolicy
- en: These policies apply across the whole of the cluster independent of namespace.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略适用于整个集群，与命名空间无关。
- en: 'Both types of Calico network policy support a common set of capabilities beyond
    Kubernetes network policies, including:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Calico网络策略的两种类型均支持超出Kubernetes网络策略的共同功能集，包括：
- en: A richer set of match criteria than Kubernetes network policies, for example
    with the ability to match on Kubernetes service accounts.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比Kubernetes网络策略具有更丰富的匹配条件集，例如能够匹配Kubernetes服务账户。
- en: Explicit allow, deny, or log actions for policy rules, rather than Kubernetes
    network policy actions, which are implicitly always allow.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确允许、拒绝或记录策略规则中的操作，而不是隐式始终允许的Kubernetes网络策略操作。
- en: Precedence ordering to define the evaluation order of the network policies if
    multiple policies apply to the same workload. (Note that if you are just using
    Kubernetes network policies, or Calico policies only with allow actions in them,
    then evaluation order doesn’t make any difference to the outcome of the policies.
    However, as soon as there are any policy rules with deny actions, ordering becomes
    important.)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先顺序排序以定义网络策略对同一工作负载应用时的评估顺序。（请注意，如果仅使用Kubernetes网络策略，或者Calico策略只包含允许操作，则评估顺序对策略结果没有影响。但是，一旦存在任何带有拒绝操作的策略规则，顺序就变得重要起来。）
- en: We want to mention that there are other network policy implementations that
    extend the Kubernetes network policy, like Antrea, which offers ClusterNetworkPolicy
    (similar to GlobalNetworkPolicy).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想提到还有其他扩展Kubernetes网络策略的网络策略实现，如Antrea，提供ClusterNetworkPolicy（类似于GlobalNetworkPolicy）。
- en: 'The following sample shows how you can implement network policies using Kubernetes
    RBAC. In the example you can control network access based on the labels assigned
    to a service account. In Kubernetes, pods have service accounts associated with
    them, and therefore pods can be identified by service accounts. You should use
    RBAC to control which users can assign labels to service accounts. The network
    policy in the example uses the labels assigned to service accounts to control
    network access. Pods with an intern service account can communicate only with
    pods with service accounts labeled `role == intern`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何使用Kubernetes RBAC实现网络策略。在示例中，您可以基于分配给服务账号的标签来控制网络访问。在Kubernetes中，Pod与其关联的服务账号相关联，因此可以通过服务账号来识别Pod。您应使用RBAC来控制哪些用户可以为服务账号分配标签。示例中的网络策略使用分配给服务账号的标签来控制网络访问。具有intern服务账号的Pod只能与标记为`role
    == intern`的服务账号的Pod通信。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This way you can extend the concept of RBAC, which controls service account
    access to a Kubernetes resource for network access. It is a two-step process.
    RBAC is used to control label assignment to service accounts, and a label-based
    service account selector is used to control network access. These additional capabilities
    can be leveraged alongside Kubernetes network policies to more cleanly split responsibilities
    between higher-level cluster ops or security teams and individual microservice
    teams.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以扩展RBAC的概念，该概念用于控制服务账号访问Kubernetes资源的网络访问。这是一个两步过程。RBAC用于控制对服务账号的标签分配，而基于标签的服务账号选择器用于控制网络访问。可以利用这些额外的功能与Kubernetes网络策略结合使用，更清晰地分离高级集群运维或安全团队与各个微服务团队之间的责任。
- en: 'This could look like, for example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可能如下所示：
- en: Giving the cluster ops or security team RBAC permissions to manage Calico network
    policies at the cluster-wide scope, so they can define basic higher-level rules
    that set the overall security posture of the cluster. For example, a default deny–style
    app policy (as discussed in [Chapter 7](ch07.xhtml#network_policy)) and policies
    can restrict cluster egress to specific pods.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将集群运维或安全团队的RBAC权限扩展至管理Calico网络策略，以覆盖整个集群范围，使其能够定义设定集群整体安全姿态的基本高级规则。例如，像在[第7章](ch07.xhtml#network_policy)讨论的默认拒绝式应用策略和限制集群出口到特定Pod的策略。
- en: Giving each microservice team RBAC permissions to define Kubernetes network
    policies in the microservice’s namespaces, so they can define their own fine-grained
    constraints for the microservices they are responsible for.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个微服务团队授予RBAC权限，以在微服务的命名空间中定义Kubernetes网络策略，使他们能够为其负责的微服务定义自己的细粒度约束。
- en: On top of this basic split in network policy RBAC permissions, the cluster ops
    or security team can delegate different levels of trust to each microservice team
    by defining rules using namespaces or service accounts labels, rather than simplifying
    matching on pod labels. For example, they could define policies to restrict cluster
    egress to specific pods using service account labels and give the individual microservice
    teams permissions to use, but not edit, any service accounts assigned to their
    namespace. Through this mechanism some microservice teams may be granted permission
    to selectively allow cluster egress from some of their pods, while not offering
    other teams the same permissions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础的网络策略RBAC权限分配之上，集群运维或安全团队可以通过使用命名空间或服务账号标签来定义规则，而不是简化匹配Pod标签，为每个微服务团队分配不同的信任级别。例如，他们可以使用服务账号标签来定义限制集群出口到特定Pod的策略，并授权各个微服务团队使用但不编辑分配给其命名空间的任何服务账号。通过这种机制，一些微服务团队可能被授予权限选择性地允许其某些Pod的集群出口，而其他团队则没有同样的权限。
- en: '[Figure 8-1](#an_example_of_implementing_trust_bounda) provides a simplified
    illustration of how these ideas can be combined.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-1](#an_example_of_implementing_trust_bounda)提供了这些思想如何结合的简化示例。'
- en: While these capabilities are reasonably powerful, in some organizations the
    required split of responsibilities across teams may be more complex, particularly
    where there are more layers of teams. For example, a compliance team, security
    team, cluster ops team, and individual microservice teams all may have different
    levels of responsibility. One way to more easily meet these requirements is to
    use a network policy implementation that supports the notion of hierarchical network
    policies.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些功能相当强大，但在一些组织中，跨团队责任的分割可能更为复杂，特别是在团队层级更多的情况下。例如，合规团队、安全团队、集群运维团队和各个微服务团队可能具有不同层次的责任。为了更轻松地满足这些要求，一种方法是使用支持分层网络策略概念的网络策略实施。
- en: '![](Images/ksao_0801.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_0801.png)'
- en: Figure 8-1\. An example of implementing trust boundaries with network policy
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-1\. 展示了使用网络策略实现信任边界的示例
- en: There are some commercial implementations that support hierarchical network
    policy using policy tiers. A similar concept (hierarchical namespaces and policies)
    is also being discussed in the Kubernetes community. RBAC for each tier can be
    defined to restrict who can interact with the tier. In this model, network policies
    are layered in tiers, which are evaluated in a defined order, with as many tiers
    as required to match the organizational split of responsibilities. RBAC for each
    tier can be defined to restrict who can interact with the tier. The network policies
    in each tier can make allow or deny decisions (that terminate evaluation of any
    following policies) or pass the decision on to the next tier in the hierarchy
    to be evaluated against the policies in that tier.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些商业实现支持使用策略层级实现分层网络策略。类似的概念（分层命名空间和策略）也在 Kubernetes 社区中讨论。可以为每个层级的 RBAC 定义，以限制谁可以与该层级进行交互。在此模型中，网络策略被分层在多个层级中，按照定义的顺序进行评估，以匹配组织责任分割的需要。可以为每个层级的
    RBAC 定义，以限制谁可以与该层级进行交互。每个层级的网络策略可以做出允许或拒绝决策（终止后续策略的评估），或将决策传递给层级结构中的下一个层级，以根据该层级中的策略进行评估。
- en: '[Figure 8-2](#implementing_hierarchical_network_polic) provides a simplified
    illustration of how these capabilities can be used to split responsibilities across
    three distinct layers of responsibility within an organization.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-2](#implementing_hierarchical_network_polic) 提供了一个简化的示例，展示了如何使用这些功能来在组织内部的三个不同责任层之间分割责任。'
- en: '![](Images/ksao_0802.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_0802.png)'
- en: Figure 8-2\. Implementing hierarchical network policies using tiers
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-2\. 使用层级实现分层网络策略
- en: Admission Controllers
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准入控制器
- en: We have already discussed the value of defining and following standardized network
    policy and label schemas. The approaches for splitting responsibilities between
    teams discussed earlier are oriented around resource- and namespace-level RBAC,
    with teams having freedom to whatever they want within the resource and namespace
    scopes they are allowed to manage. As such, they do not provide any guarantees
    that any such schemas are being followed by all teams.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了定义和遵循标准化网络策略和标签模式的价值。早期讨论的团队之间责任分割的方法是围绕资源和命名空间级别的 RBAC，团队在被允许管理的资源和命名空间范围内具有自由度，因此不能保证所有团队都遵循了这些模式。
- en: Kubernetes itself does not have a built-in ability to enforce restrictions at
    this granular level, but it does support an Admission Controller API, which allows
    third-party admission controllers to be plugged into the Kubernetes API machinery
    to perform semantic validation of objects during create, update, and delete operations.
    You can additionally use admission controllers, also known as mutating admission
    controllers, for modifying objects that are admitted.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 本身没有内置能力以在这种粒度级别强制执行限制，但它支持准入控制器 API，允许将第三方准入控制器插入 Kubernetes API
    机制，以在创建、更新和删除操作期间执行对象的语义验证。您还可以使用准入控制器，也称为变异准入控制器，用于修改已准入的对象。
- en: 'For example, in the context of implementing network policy, admission controllers
    can help with the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在实施网络策略的上下文中，准入控制器可以帮助以下操作：
- en: Validate that network policies have both ingress and egress rules to comply
    with the best practices the organization is trying to follow.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证网络策略是否具有符合组织试图遵循的最佳实践的入口和出口规则。
- en: Ensure every pod has a specific set of labels to comply with the labeling standards
    the organization has defined.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每个 Pod 都具有一组特定的标签，以符合组织定义的标签标准。
- en: Restrict different groups of users to specific label values.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制不同组的用户对特定标签值的访问。
- en: But admission controllers have security use cases beyond network policy too.
    For example, Kubernetes services include support for specifying an arbitrary IP
    address to be associated with the service using the service’s ExternalIP field.
    Without some level of policing, this is a very powerful feature that could be
    used maliciously to intercept pod traffic to an IP address and redirect it to
    the Kubernetes service by anyone with RBAC permissions to create and manage Kubernetes
    services. Policing this with an admission controller might be essential depending
    on the level of trust within the teams involved.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是准入控制器的安全用例不仅限于网络策略。例如，Kubernetes 服务包括支持使用服务的 ExternalIP 字段关联的任意 IP 地址。如果没有一定程度的监管，这是一个非常强大的功能，可能会被具有
    RBAC 权限创建和管理 Kubernetes 服务的任何人恶意使用，拦截 Pod 流量并将其重定向到 Kubernetes 服务。根据涉及团队内的信任水平，使用准入控制器对此进行监管可能是必要的。
- en: 'There are a few options for admission controller implementations, depending
    on the skill sets and specific needs of the organization:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据组织的技能组合和具体需求，有几种准入控制器实现选项：
- en: Using a preexisting third-party admission controller that specializes in the
    specific controls the organization needs, if one exists
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存在专门满足组织需求的预先存在的第三方准入控制器，则使用它
- en: Writing a custom admission controller optimized for the organization’s needs
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个根据组织需求优化的自定义准入控制器
- en: Using a general-purpose admission controller with a rich policy model that can
    map to a broad range of use cases
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用具有丰富策略模型的通用准入控制器，可以映射到广泛的用例范围
- en: For many scenarios, choosing a general-purpose admission controller gives a
    good balance of flexibility and coding complexity. For example, you might consider
    Kyverno, which has a policy engine specifically designed for Kubernetes, or an
    admission controller built around Open Policy Agent, where the policy model has
    flexible matching and language capabilities defined using Rego.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多场景来说，选择一个通用准入控制器可以在灵活性和编码复杂性之间取得良好的平衡。例如，您可以考虑 Kyverno，它具有专为 Kubernetes
    设计的策略引擎，或者围绕 Open Policy Agent 构建的准入控制器，其策略模型使用 Rego 定义灵活的匹配和语言能力。
- en: While admission controllers are very powerful, it is generally recommended to
    implement them only if you genuinely need them. For some organizations, using
    admission controllers in this way is overkill, given the levels of responsibility
    and trust across teams. For other organizations, they can be essential to meet
    internal compliance requirements, and the case for using them will be very clear.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管准入控制器非常强大，但通常建议仅在确实需要时才实施它们。对于某些组织来说，以这种方式使用准入控制器可能过度，考虑到团队之间的责任和信任水平。对于其他组织来说，它们可能是满足内部合规要求的重要工具，并且使用它们的理由非常明确。
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'Kuberentes security needs to be implemented by various teams and needs collaboration
    between teams. This chapter covered the following key concepts:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 安全需要各个团队实施，并需要团队之间的协作。本章涵盖了以下关键概念：
- en: You should use RBAC and network policy to define boundaries that will help you
    manage activities across teams.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该使用 RBAC 和网络策略来定义边界，以帮助您管理跨团队的活动。
- en: You can extend the concept of RBAC to control network access by leveraging service
    accounts in network policy to help you manage trust.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过利用网络策略中的服务账户来扩展 RBAC 的概念，以控制网络访问，帮助您管理信任。
- en: Admission controllers help to control access and implement trust boundaries
    across various teams.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准入控制器有助于控制访问并在各个团队之间实施信任边界。
- en: Collaboration between the development, platform, and the security teams is important
    to implement security.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发、平台和安全团队之间的协作对于实施安全非常重要。
