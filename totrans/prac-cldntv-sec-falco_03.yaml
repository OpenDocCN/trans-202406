- en: Chapter 2\. Getting Started with Falco on Your Local Machine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 在本地计算机上开始使用Falco
- en: Now that you’re acquainted with the possibilities that Falco offers, what better
    way to familiarize yourself with it than to try it? In this chapter, you will
    discover how easy it is to install and run Falco on a local machine. We’ll walk
    you through the process step-by-step, introducing and analyzing the core concepts
    and functions. We will generate an event that Falco will detect for us by simulating
    a malicious action, and show you how to read Falco’s notification output. We’ll
    finish the chapter by presenting some manageable approaches to customizing your
    installation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Falco提供的可能性，试试它是了解它的更好方式吗？在本章中，您将发现在本地计算机上安装和运行Falco是多么简单。我们将逐步引导您完成这个过程，介绍和分析核心概念和功能。我们将生成一个Falco将为我们检测到的事件，模拟恶意行为，并向您展示如何阅读Falco的通知输出。我们将通过介绍一些可管理的方法来定制您的安装，来结束本章。
- en: Running Falco on Your Local Machine
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地计算机上运行Falco
- en: 'Although Falco is not a typical application, installing and running it on a
    local machine is quite simple—all you need is a Linux host or a virtual machine
    and a terminal. There are two components to install: the user space program (named
    *falco*) and a driver. The driver is needed to collect system calls, which are
    one possible data source for Falco. For simplicity, we will focus only on system
    call capture in this chapter.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Falco不是一个典型的应用程序，但在本地计算机上安装和运行它非常简单——您只需要一个Linux主机或虚拟机和一个终端。要安装的两个组件是：用户空间程序（命名为*falco*）和驱动程序。驱动程序用于收集系统调用，这是Falco的一种可能的数据源之一。为简单起见，本章将仅专注于系统调用捕获。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You will learn more about the available drivers and why we need them to instrument
    the system in [Chapter 3](ch03.xhtml#understanding_falcoapostr) and explore alternative
    data sources in [Chapter 4](ch04.xhtml#data_source). For the moment, you only
    need to know that the default driver, which is implemented as a Linux kernel module,
    is enough to collect system calls and start using Falco.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[第3章](ch03.xhtml#understanding_falcoapostr)了解更多有关可用驱动程序及其为何需要它们来配置系统的信息，并在[第4章](ch04.xhtml#data_source)中探索替代数据源。目前，您只需知道默认驱动程序已实现为Linux内核模块，足以收集系统调用并开始使用Falco。
- en: 'Several methods are available to install these components, as you will see
    in [Chapter 8](ch08.xhtml#the_output_framework). However, in this chapter we’ve
    opted to use the binary package. It works with almost any Linux distribution and
    has no automation: you can touch its components with your hands. The binary package
    includes the *falco* program, the *falco-driver-loader* script (a utility to help
    you install the driver), and many other required files. You can download this
    package from the official website of [The Falco Project](https://falco.org), where
    you’ll also find comprehensive information about installing it. So, let’s get
    to it!'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如您将在[第8章](ch08.xhtml#the_output_framework)中看到的，有几种方法可用于安装这些组件。但在本章中，我们选择使用二进制软件包。它适用于几乎任何Linux发行版，并且没有自动化：您可以亲自操作它的组件。二进制软件包包括*falco*程序、*falco-driver-loader*脚本（一个帮助您安装驱动程序的实用工具）和许多其他必需的文件。您可以从[The
    Falco Project](https://falco.org)的官方网站下载此软件包，那里还有关于安装它的详细信息。那么，让我们开始吧！
- en: Downloading and Installing the Binary Package
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载和安装二进制软件包
- en: Falco’s binary package is distributed as a single tarball compressed with GNU
    zip (gzip). The tarball file is named *falco-<x.y.z>-<arch>.tar.gz*, where *<x.y.z>*
    is the version of a Falco release and *<arch>* is the intended architecture (e.g.,
    *x86_64*) for the package.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Falco的二进制软件包以GNU zip（gzip）压缩的单个tarball分发。tarball文件名为*falco-<x.y.z>-<arch>.tar.gz*，其中*x.y.z*是Falco版本的版本号，*<arch>*是软件包的目标架构（例如*x86_64*）。
- en: 'All the available packages are listed on Falco’s [“Download” page](https://oreil.ly/Hx6Dy).
    You can grab the URL of the binary package and download it locally, for example
    using `curl`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可用的软件包都列在Falco的[“下载”页面](https://oreil.ly/Hx6Dy)上。您可以获取二进制软件包的URL并在本地下载，例如使用`curl`：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After downloading the tarball, uncompressing and untarring it is quite simple:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下载tarball后，解压缩和解压它非常简单：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The tarball content, which you’ve just extracted, is intended to be copied
    directly to the local filesystem’s root (i.e., */*), without any special installation
    procedure. To copy it, run this command as root:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚提取的tarball内容旨在直接复制到本地文件系统的根目录（即*/*），无需任何特殊的安装过程。要复制它，请以root身份运行此命令：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you’re ready to install the driver.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好安装驱动程序了。
- en: Installing the Driver
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装驱动程序
- en: 'System calls are Falco’s default data source. To instrument the Linux kernel
    and collect these system calls, it needs a driver: either a Linux kernel module
    or an eBPF probe. The driver needs to be built for the specific version and configuration
    of the kernel on which Falco will run. Fortunately, The Falco Project provides
    literally thousands of prebuilt drivers for the vast majority of the most common
    Linux distributions, with various kernel versions available for download. If a
    prebuilt driver for your distribution and kernel version is not yet available,
    the files you installed in the previous section include the source code of both
    the kernel module and the eBPF probe, so it is also possible to build the driver
    locally.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用是 Falco 的默认数据源。要对 Linux 内核进行仪表化并收集这些系统调用，需要一个驱动程序：即 Linux 内核模块或者 eBPF 探针。驱动程序需要针对
    Falco 将运行的特定版本和配置的内核进行构建。幸运的是，Falco 项目为绝大多数常见的 Linux 发行版提供了成千上万的预构建驱动程序，可下载各种内核版本。如果你的发行版和内核版本尚无预构建驱动程序，你在上一节安装的文件中也包含了内核模块和
    eBPF 探针的源代码，因此也可以在本地构建驱动程序。
- en: 'This might sound like a lot, but the *falco-driver-loader* script you’ve just
    installed can do all these steps. All you need to do before using the script is
    install a few necessary dependencies:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来可能很多，但你刚刚安装的 *falco-driver-loader* 脚本可以完成所有这些步骤。在使用该脚本之前，你只需安装几个必要的依赖项：
- en: Dynamic Kernel Module Support (dkms)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态内核模块支持（dkms）
- en: GNU make
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU make
- en: The Linux kernel headers
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 内核头文件
- en: 'Depending on the package manager you’re using, the actual package names can
    vary; however, they aren’t difficult to find. Once you’ve installed these packages,
    you’re ready to run the *falco-driver-loader* script as root. If everything goes
    well, the script output should look something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你使用的包管理器，实际的包名称可能会有所不同；但是，它们并不难找。一旦安装了这些包，你就可以以 root 权限运行 *falco-driver-loader*
    脚本了。如果一切顺利，脚本的输出应该类似于这样：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This output contains some useful information. The first line reports the versions
    of Falco and the driver that are being installed. The subsequent line tells us
    that the script will try to download a prebuilt driver so it can install a kernel
    module. If the prebuilt driver is not available, Falco will try to build it locally.
    The rest of the output shows the process of building and installing the module
    via DKMS, and finally that the module has been installed and loaded.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出包含一些有用的信息。第一行报告了正在安装的 Falco 和驱动程序的版本。随后的行告诉我们，该脚本将尝试下载一个预构建驱动程序，以便安装一个内核模块。如果预构建的驱动程序不可用，Falco
    将尝试在本地构建它。输出的其余部分显示了通过 DKMS 构建和安装模块的过程，并最终显示模块已被安装和加载。
- en: Starting Falco
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 Falco
- en: To start Falco, you just have to run it as root:^([1](ch02.xhtml#ch01fn1))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 Falco，你只需以 root 权限运行它：^([1](ch02.xhtml#ch01fn1))
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note the configuration and rules files’ paths. We’ll look at these in more detail
    in Chapters [9](ch09.xhtml#installing_falco) and [13](ch13.xhtml#writing_falco_rules).
    Finally, in the last line, we can see that a web server has been started; this
    is done because Falco exposes a health check endpoint that you can use to test
    that it’s up and running.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意配置和规则文件的路径。我们将在第 [9](ch09.xhtml#installing_falco) 章和第 [13](ch13.xhtml#writing_falco_rules)
    章更详细地讨论这些内容。最后一行显示了一个 Web 服务器已经启动；这是因为 Falco 提供了一个健康检查端点，你可以用它来测试它是否正常运行。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In this chapter, to get you used to it, we have simply run Falco as an interactive
    shell process; therefore, a simple Ctrl-C is enough to end the process. Throughout
    the book, we will show you different and more sophisticated ways to install and
    run it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，为了让你习惯，我们只是将 Falco 作为一个交互式 shell 进程运行；因此，简单的 Ctrl-C 就足以结束进程。在本书的整个过程中，我们将向你展示安装和运行它的不同和更复杂的方法。
- en: Once Falco prints this startup information, it is ready to issue a notification
    whenever a condition in the loaded ruleset is met. Right now, you probably won’t
    see any notifications (assuming nothing malicious is running on your system).
    In the next section, we will generate a suspicious event.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Falco 打印出这些启动信息，它就可以在加载的规则集中满足条件时发出通知了。现在，你可能看不到任何通知（假设你的系统上没有运行恶意软件）。在下一节中，我们将生成一个可疑事件。
- en: Generating Events
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成事件
- en: There are millions of ways to generate events. In the case of system calls,
    in reality, many events happen continuously as soon as processes are running.
    However, to see Falco in action, we must focus on events that can trigger an alert.
    As you’ll recall, Falco comes preloaded with an out-of-the-box set of rules that
    cover the most common security scenarios. It uses rules to express unwanted behaviors,
    so we need to pick a rule as our target and then trigger it by simulating a malicious
    action within our system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有数百万种生成事件的方法。在系统调用的情况下，实际上，许多事件在进程运行时连续发生。然而，要看到Falco的实际效果，我们必须关注可以触发警报的事件。正如您会回忆的，Falco预装了一套规则，涵盖了最常见的安全场景。它使用规则来表达不希望的行为，因此我们需要选择一个规则作为目标，然后通过在系统内模拟恶意操作来触发它。
- en: 'In the course of the book, and particularly in [Chapter 13](ch13.xhtml#writing_falco_rules),
    you will learn about the complete anatomy of a rule, how to interpret and write
    a condition using Falco’s rule syntax, and which fields are supported in the conditions
    and outputs. For the moment, let’s briefly recall what a rule is and explain its
    structure by considering a real example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，特别是在[第13章](ch13.xhtml#writing_falco_rules)，您将了解规则的完整解剖，如何解释和编写使用Falco规则语法的条件，以及条件和输出中支持的字段。暂时让我们简要回顾一下规则是什么，并通过考虑一个真实的例子来解释其结构：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A rule declaration is a YAML object with several keys. The first key, `rule`,
    uniquely identifies the rule within a *ruleset* (one or more YAML files containing
    rule definitions). The second key, `desc`, allows the rule’s author to briefly
    describe what the rule will detect. The `condition` key, arguably the most important
    one, allows expressing a security assertion using some straightforward syntax.
    Various Boolean and comparison operators can be combined with *fields* (which
    hold the collected data) to filter only relevant events. In this example rule,
    `evt.dir` is a field used for filtering. Supported fields and filters are covered
    in more detail in [Chapter 6](ch06.xhtml#fields_and_filters).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 规则声明是一个YAML对象，有几个键。第一个键`rule`在*ruleset*（一个或多个包含规则定义的YAML文件）中唯一标识规则。第二个键`desc`允许规则的作者简要描述规则将检测到什么。`condition`键，可以说是最重要的一个，允许使用一些简单的语法来表达安全断言。各种布尔和比较运算符可以与*fields*（保存收集的数据）结合使用，以仅过滤相关事件。在此示例规则中，`evt.dir`是用于过滤的字段。支持的字段和过滤器在[第6章](ch06.xhtml#fields_and_filters)中有更详细的介绍。
- en: As long as the condition is false, nothing will happen. The assertion is met
    when the condition is true, and then an alert will be fired immediately. The alert
    will contain an informative message, as defined by the rule’s author using the
    `output` key of the rule declaration. The value of the `priority` key will be
    reported too. The content of an alert is covered in more detail in the next section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 只要条件为假，就不会发生任何事情。当条件为真时，断言得到满足，然后将立即触发警报。警报将包含一个信息性消息，由规则的作者使用规则声明的`output`键定义。`priority`键的值也将被报告。警报的内容将在下一节中更详细地介绍。
- en: 'The `condition`’s syntax can also make use of a few more constructs, like `list`
    and `macro`, that can be defined in the ruleset alongside rules. As the name suggests,
    a *list* is a list of items that can be reused across different rules. Similarly,
    *macros* are reusable pieces of conditions. For completeness, here are the two
    macros (`bin_dir` and `open_write`) utilized in the `condition` key of the *Write
    below binary dir* rule:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`condition`的语法还可以利用一些更多的构造，比如`list`和`macro`，这些可以与规则集中定义的规则一起使用。顾名思义，*list*是可以在不同规则中重复使用的项目列表。类似地，*macros*是可重用的条件片段。为了完整起见，这里是在*Write
    below binary dir*规则的`condition`键中使用的两个宏（`bin_dir`和`open_write`）：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At runtime, when rules are loaded, macros expand. Consequently, we can imagine
    the final rule condition will be similar to:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，当加载规则时，宏会展开。因此，我们可以想象最终的规则条件将类似于：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Conditions make extensive use of fields. In this example, you can easily recognize
    which parts of the condition are fields (`evt.type`, `evt.is_open_write`, `fd.typechar`,
    `evt.dir`, `fd.num`, and `fd.directory`) since they are followed by a comparison
    operator (e.g., `=`, `>=`, `in`). Field names contain a dot (`.`) because fields
    with a similar context are grouped together in *classes*. The part before the
    dot represents the class (for example, `evt` and `fd` are classes).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 条件广泛使用字段。在这个例子中，你可以轻松识别条件中的哪些部分是字段（`evt.type`、`evt.is_open_write`、`fd.typechar`、`evt.dir`、`fd.num`和`fd.directory`），因为它们后面跟着比较运算符（如`=`、`>=`、`in`）。字段名称包含一个点（`.`），因为具有类似上下文的字段被分组在一起形成*类*。点之前的部分代表类（例如，`evt`和`fd`是类）。
- en: Although you might not thoroughly understand the condition’s syntax yet, you
    don’t need to at the moment. All you need to know is that creating a file (which
    implies opening a file for writing) under one of the directories listed within
    the condition (like */bin*) should be enough to trigger the rule’s condition.
    Let’s try it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可能尚未彻底理解条件的语法，但目前无需理解。您只需要知道，在符合条件的目录（如*/bin*）下创建文件（这意味着打开文件进行写入）应该足以触发规则的条件。让我们试一试。
- en: 'First, start Falco with our target rule loaded. The *Write below binary dir*
    rule is included in */etc/falco/falco_rules.yaml*, which is loaded by default
    when starting Falco, so you don’t need to copy it manually. Just open a terminal
    and run:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，启动加载我们目标规则的 Falco。*Write below binary dir* 规则包含在*/etc/falco/falco_rules.yaml*中，默认启动
    Falco 时会加载它，所以你无需手动复制。只需打开一个终端并运行：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Second, trigger the rule by creating a file in the */bin* directory. A straightforward
    way to do this is by opening another terminal window and typing:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在*/bin*目录中创建文件以触发规则。这样做的一种简单方法是打开另一个终端窗口，并输入：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if you return to the first terminal with Falco running, you should find
    a line in the log (that is, an alert emitted by Falco) that looks like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你返回运行 Falco 的第一个终端，你应该会在日志中找到一行（即，Falco 发出的警报），看起来像以下内容：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Falco caught us! Fortunately, that’s exactly what we wanted to happen. (We’ll
    look at this output in more detail in the next section.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 抓住了我们！幸运的是，这正是我们想要发生的。（我们将在下一节详细查看此输出。）
- en: Rules let us tell Falco which security policies we want to observe (expressed
    by the `condition` key) and which information we want to receive (specified by
    the `output` key) if a policy has been violated. Falco emits an alert (outputs
    a line of text) whenever an event meets the condition defined by a rule, so if
    you run the same command again, a new alert will fire.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 规则让我们告诉 Falco 我们想要观察哪些安全策略（由`condition`键表达），以及我们希望在违反策略时接收哪些信息（由`output`键指定）。每当事件符合规则定义的条件时，Falco
    就会发出一个警报（输出一行文本），因此如果您再次运行相同的命令，将会触发新的警报。
- en: 'After trying out this example, why not test some other rules by yourself? To
    facilitate this, the Falcosecurity organization offers a tool called *event-generator*.
    It’s a simple command-line tool that does not require any special installation
    steps. You can [download the latest release](https://oreil.ly/CZGpM) and uncompress
    it wherever you prefer. It comes with a collection of events that match many of
    the rules included in the default Falco ruleset. For example, to generate an event
    that meets the condition expressed by the *Read sensitive file untrusted* rule,
    you can type the following in a terminal window:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试完这个示例之后，为什么不自己测试一些其他规则呢？为了方便起见，Falcosecurity 组织提供了一个名为*event-generator*的工具。这是一个简单的命令行工具，不需要任何特殊的安装步骤。你可以[下载最新版本](https://oreil.ly/CZGpM)并解压到任意位置。它附带了一系列与默认
    Falco 规则集中许多规则匹配的事件。例如，要生成符合*Read sensitive file untrusted*规则条件的事件，你可以在终端窗口中输入以下内容：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Warning
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Be aware that this tool might alter your system. For example, since the tool’s
    purpose is to reproduce real malicious behavior, some actions modify files and
    directories such as */bin*, */etc*, and */dev*. Make sure you fully understand
    the purpose of this tool and its options before using it. As the [online documentation](https://oreil.ly/dL8gV)
    recommends, running event-generator in a container is safer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此工具可能会更改您的系统。例如，由于此工具的目的是重现真实的恶意行为，某些操作会修改文件和目录，如*/bin*、*/etc*和*/dev*。在使用之前，请确保您充分理解此工具及其选项的目的。正如[在线文档](https://oreil.ly/dL8gV)建议的那样，在容器中运行
    event-generator 更加安全。
- en: Interpreting Falco’s Output
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释 Falco 的输出
- en: 'Let’s take a closer look at the alert notification our experiment produced
    to see what important information it contains:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地查看我们实验产生的警报通知，看看它包含了哪些重要信息：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This apparently complex line is actually composed of only three main elements
    separated by whitespace: a timestamp, severity level, and message. Let’s examine
    each of these:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然复杂的一行实际上只包含三个主要元素，它们之间由空格分隔：时间戳、严重级别和消息。让我们分别来看看每一个：
- en: Timestamp
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳
- en: 'Intuitively, the first element is the timestamp (followed by a colon: `16:52:09.350818073:`).
    That’s when the event was generated. By default, it’s displayed in the local time
    zone and includes nanoseconds. You can, if you like, configure Falco to display
    times in ISO 8601 format, including the date, nanoseconds, and timezone offset
    (in UTC).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 直觉上，第一个元素是时间戳（后跟冒号：`16:52:09.350818073:`）。那是事件生成的时间。默认情况下，它以本地时区显示，并包括纳秒。如果您愿意，可以配置Falco以ISO
    8601格式显示时间，包括日期、纳秒和时区偏移（在UTC中）。
- en: Severity
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 严重级别
- en: 'The second element indicates the severity (e.g., `Error`) of the alert, as
    specified by the `priority` key in the rule. It can assume one of the following
    values (ordered from the most to the least severe): `Emergency`, `Alert`, `Critical`,
    `Error`, `Warning`, `Notice`, `Informational`, or `Debug`. Falco allows us to
    filter out those alerts that are not important to us and thus reduce the noisiness
    of the output by specifying the minimum severity level we want to get alerts about.
    The default is `debug`, meaning all severity levels are included by default, but
    we can change this by altering the value of the `priority` parameter in the */etc/falco/falco.yaml*
    configuration file. For example, if we change the value of this parameter to `notice`,
    then we will not receive alerts about rules with `priority` equal to `INFORMATIONAL`
    or `DEBUG`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个元素指示了警报的严重性（例如，`Error`），如规则中的`priority`键所指定的那样。它可以采用以下值之一（从最严重到最不严重）：`Emergency`、`Alert`、`Critical`、`Error`、`Warning`、`Notice`、`Informational`或`Debug`。Falco允许我们通过指定我们想要接收警报的最小严重级别来过滤那些对我们不重要的警报，从而减少输出的噪声。默认情况下是`debug`，意味着默认包含所有严重级别，但我们可以通过修改*/etc/falco/falco.yaml*配置文件中`priority`参数的值来更改这一点。例如，如果我们将此参数的值更改为`notice`，那么我们将不会收到具有`priority`等于`INFORMATIONAL`或`DEBUG`的规则的警报。
- en: Message
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 消息
- en: The last and the most essential element is the message. This is a string produced
    according to the format specified by the `output` key. Its peculiarity lies in
    using placeholders, which the Falco engine replaces with the event data, as we
    will see in a moment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后也是最关键的元素是消息。这是一个根据`output`键指定的格式生成的字符串。它的特点在于使用占位符，Falco引擎稍后将这些占位符替换为事件数据，我们马上就会看到。
- en: Normally, the `output` key of a rule begins with a brief text description to
    facilitate identifying the type of problem (e.g., `File below a known binary directory
    opened for writing`). Then it includes some placeholders (e.g., `%user.name`),
    which will be populated with actual values (e.g., `root`) when outputted. You
    can easily recognize placeholders since they start with a `%` symbol followed
    by one of the event’s supported fields. These fields can be used in both the `condition`
    key and the `output` key of a Falco rule.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，规则的`output`键以简短的文本描述开头，以便识别问题的类型（例如，`File below a known binary directory
    opened for writing`）。然后它包含一些占位符（例如，`%user.name`），这些占位符在输出时将用实际值（例如，`root`）填充。您可以轻松识别占位符，因为它们以`%`符号开头，后跟事件支持的字段之一。这些字段可以在Falco规则的`condition`键和`output`键中都使用。
- en: The beauty of this feature is that you can have a different output format for
    each security policy. This immediately gives you the most relevant information
    related to the violation, without having to navigate hundreds of fields.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这一功能的美妙之处在于，您可以为每个安全策略设置不同的输出格式。这立即为您提供了与违规相关的最相关信息，而无需导航数百个字段。
- en: 'Although this textual format likely includes all the information you need and
    is suitable for consumption by many other programs, it’s not the only option for
    output—you can instruct Falco to output notifications in JSON format by simply
    changing a configuration parameter. The JSON output format has the advantage of
    being easily parsable by consumers. When enabled, Falco will emit as output a
    JSON line for each alert that will look like the following, which we’ve pretty-printed
    to improve readability:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种文本格式可能包含你所需的所有信息，并且适合许多其他程序使用，但并非输出的唯一选项 - 你可以通过简单更改配置参数指示 Falco 以 JSON
    格式输出通知。JSON 输出格式具有易于消费者解析的优点。启用后，Falco 将为每个警报生成一个 JSON 行输出，格式如下，我们进行了格式化以提高可读性：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This output format reports the same text message as before. Additionally, each
    piece of information is separated into distinct JSON properties. You may also
    have noticed some extra data: for example, the rule identifier is present this
    time (`"rule": "Write below binary dir"`).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '此输出格式报告与之前相同的文本消息。此外，每条信息都分隔到不同的 JSON 属性中。你可能还注意到了一些额外的数据：例如，这次包含了规则标识符 (`"rule":
    "Write below binary dir"`）。'
- en: 'To try it right now, when starting Falco, simply pass the following flag as
    a command-line argument to override the default configuration:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要立即尝试，请在启动 Falco 时简单地传递以下标志作为命令行参数，以覆盖默认配置：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Alternatively, you can edit */etc/falco/falco.yaml* and set `json_output` to
    `true`. This will enable the JSON format every time Falco starts, without the
    flag.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以编辑 */etc/falco/falco.yaml* 并将 `json_output` 设置为 `true`。这将使每次启动 Falco 时都启用
    JSON 格式，而无需标志。
- en: Customizing Your Falco Instance
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义你的 Falco 实例
- en: 'When you start Falco, it loads several files. In particular, it first loads
    the main (and only) configuration file, as the startup log shows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Falco 时，它会加载几个文件。特别是，它首先加载主配置文件（也是唯一的配置文件），如启动日志所示：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Falco looks for its configuration file at */etc/falco/falco.yaml*, by default.
    That’s where the provided configuration file is installed. If desired, you can
    specify another configuration file path using the `-c` command-line argument when
    running Falco. Whatever file location you prefer, the configuration must be a
    YAML file mainly containing a collection of key/value pairs. Let’s take a look
    at some of the available configuration options.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 默认在 */etc/falco/falco.yaml* 查找其配置文件。这就是提供的配置文件所安装的位置。如果需要，你可以在运行 Falco
    时使用 `-c` 命令行参数指定另一个配置文件的路径。无论你选择哪个文件位置，配置文件必须是一个主要包含一组键值对的 YAML 文件。让我们看看一些可用的配置选项。
- en: Rules Files
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则文件
- en: 'One of the most essential options, and the first you’ll find in the provided
    configuration file, is the list of rules files to be loaded:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的选项之一，也是在提供的配置文件中首次找到的选项，是要加载的规则文件列表：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Despite the naming (for backward compatibility), `rules_file` allows you to
    specify multiple entries, each of which can be either a rules file or a directory
    containing rules files. If the entry is a file, Falco reads it directly. In the
    case of a directory, Falco will read every file in that directory.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名称如此（为了向后兼容性），`rules_file` 允许你指定多个条目，每个条目可以是规则文件或包含规则文件的目录。如果条目是文件，Falco 将直接读取它。如果是目录，Falco
    将读取该目录中的每个文件。
- en: 'The order matters here. The files are loaded in the presented order (files
    within a directory are loaded in alphabetical order). Users can customize predefined
    rules by simply overriding them in files that appear later in the list. For example,
    say you want to turn off the *Write below binary dir* rule, which is included
    in */etc/falco/falco_rules.yaml*. All you need to do is edit */etc/falco/falco_rules.local.yaml*
    (which appears below that file in the list and is intended to add local overrides)
    and write:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里顺序很重要。文件按照呈现的顺序加载（目录内的文件按字母顺序加载）。用户可以通过简单地在列表中稍后出现的文件中覆盖它们来自定义预定义规则。例如，假设你想关闭
    *Write below binary dir* 规则，该规则包含在 */etc/falco/falco_rules.yaml* 中。你只需编辑 */etc/falco/falco_rules.local.yaml*（它在列表中出现在该文件之后，并且旨在添加本地覆盖），并写入：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Output Channels
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出通道
- en: There is a group of options that control Falco’s available *output channels*,
    allowing you to specify where the security notifications should go. Furthermore,
    you can enable more than one simultaneously. You can easily recognize them within
    the configuration file (*/etc/falco/falco.yaml*) since their keys are suffixed
    with `_output`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有一组选项可控制Falco提供的可用*输出通道*，允许您指定安全通知的发送位置。此外，您可以同时启用多个选项。您可以在配置文件（*/etc/falco/falco.yaml*）中轻松识别它们，因为它们的键都以`_output`结尾。
- en: 'By default, the only two enabled output channels are `stdout_output`, which
    instructs Falco to send alert messages to the standard output, and `syslog_output`,
    which sends them to the system logging daemon. Their configurations are:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，仅启用了两个输出通道：`stdout_output`指示Falco将警报消息发送到标准输出，`syslog_output`将其发送到系统日志守护程序。它们的配置为：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Falco provides several other advanced built-in output channels. For example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Falco提供了几种其他高级内置输出通道。例如：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When `file_output` is enabled, Falco will also write its alerts to the file
    specified by the subkey `filename`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用`file_output`时，Falco还将其警报写入由子键`filename`指定的文件。
- en: 'Other output channels allow you to consume alerts in sophisticated ways and
    integrate with third parties. For instance, if you want to pass the Falco output
    to a local program, you can use:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 其他输出通道允许你以复杂的方式消耗警报并与第三方集成。例如，如果你想将Falco输出传递给本地程序，你可以使用：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Once you enable this, Falco will execute the program for each alert and write
    its content to the program’s standard output. You can set the `program` subkey
    to any valid shell command, so this is an excellent opportunity to show off your
    favorite one-liners.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用此功能，Falco将为每个警报执行程序并将其内容写入程序的标准输出。您可以将`program`子键设置为任何有效的shell命令，因此这是展示您喜欢的单行命令的绝佳机会。
- en: 'If you simply need to integrate with a webhook, a more convenient option is
    to use the `http_output` output channel:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要与webhook集成，更方便的选项是使用`http_output`输出通道：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A simple HTTP POST request will be sent to the specified `url` for each alert.
    That makes it really easy to connect Falco to other tools, like Falcosidekick,
    which will forward alerts to Slack, Teams, Discord, Elasticsearch, and many other
    destinations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个警报，将发送一个简单的HTTP POST请求到指定的`url`。这使得将Falco连接到其他工具变得非常简单，例如Falcosidekick，后者将警报转发到Slack、Teams、Discord、Elasticsearch和许多其他目的地。
- en: Last but not least, Falco comes with a gRPC API and a corresponding output,
    `grpc_output`. Enabling the gRPC API and gRPC output channel allows you to connect
    Falco to falco-exporter*,* which, in turn, will export metrics to Prometheus.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，Falco配备了一个gRPC API和相应的输出`grpc_output`。启用gRPC API和gRPC输出通道允许您连接到falco-exporter*，后者将指标导出到Prometheus。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Falcosidekick and falco-exporter are open source projects you can find under
    the [Falcosecurity GitHub organization](https://oreil.ly/CF0Bk). In [Chapter 12](ch12.xhtml#consuming_falco_events),
    you will meet these tools again and learn how to work with outputs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Falcosidekick和falco-exporter是您可以在[Falcosecurity GitHub组织](https://oreil.ly/CF0Bk)下找到的开源项目。在[第12章](ch12.xhtml#consuming_falco_events)，您将再次遇到这些工具，并学习如何处理输出。
- en: Conclusion
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter showed you how to install and run Falco on your local machine as
    a playground. You saw some simple ways to generate events and learned how to decode
    the output. We then looked at how to use the configuration file to customize Falco’s
    behavior. Loading and extending rules are the primary ways to instruct Falco on
    what to protect. Likewise, configuring the output channels empowers us to consume
    notifications in ways that meet our needs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您展示了如何在本地机器上安装和运行Falco作为一个游乐场。您看到了一些生成事件的简单方法，并学习了如何解码输出。然后，我们看了如何使用配置文件自定义Falco的行为。加载和扩展规则是指导Falco保护对象的主要方法。同样，配置输出通道使我们能够以满足需求的方式消耗通知。
- en: Armed with this knowledge, you can start experimenting with Falco confidently.
    The rest of this book will expand on you’ve learned here and eventually help you
    master Falco completely.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，你可以自信地开始尝试使用Falco。本书的其余部分将扩展你在这里学到的内容，并最终帮助你完全掌握Falco。
- en: ^([1](ch02.xhtml#ch01fn1-marker)) Falco needs to run with root privileges to
    operate the driver that in turn collects system calls. However, alternative approaches
    are possible. For example, you can learn from Falco’s [“Running” page](https://oreil.ly/6VD67)
    how to run Falco in a container with the principle of least privilege.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#ch01fn1-marker)) Falco 需要以 root 权限运行，以操作收集系统调用的驱动程序。然而，也存在替代方法。例如，你可以从
    Falco 的 [“Running” 页面](https://oreil.ly/6VD67) 学习如何在容器中以最小特权原则运行 Falco。
