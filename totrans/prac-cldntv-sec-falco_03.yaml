- en: Chapter 2\. Getting Started with Falco on Your Local Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’re acquainted with the possibilities that Falco offers, what better
    way to familiarize yourself with it than to try it? In this chapter, you will
    discover how easy it is to install and run Falco on a local machine. We’ll walk
    you through the process step-by-step, introducing and analyzing the core concepts
    and functions. We will generate an event that Falco will detect for us by simulating
    a malicious action, and show you how to read Falco’s notification output. We’ll
    finish the chapter by presenting some manageable approaches to customizing your
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: Running Falco on Your Local Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although Falco is not a typical application, installing and running it on a
    local machine is quite simple—all you need is a Linux host or a virtual machine
    and a terminal. There are two components to install: the user space program (named
    *falco*) and a driver. The driver is needed to collect system calls, which are
    one possible data source for Falco. For simplicity, we will focus only on system
    call capture in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You will learn more about the available drivers and why we need them to instrument
    the system in [Chapter 3](ch03.xhtml#understanding_falcoapostr) and explore alternative
    data sources in [Chapter 4](ch04.xhtml#data_source). For the moment, you only
    need to know that the default driver, which is implemented as a Linux kernel module,
    is enough to collect system calls and start using Falco.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several methods are available to install these components, as you will see
    in [Chapter 8](ch08.xhtml#the_output_framework). However, in this chapter we’ve
    opted to use the binary package. It works with almost any Linux distribution and
    has no automation: you can touch its components with your hands. The binary package
    includes the *falco* program, the *falco-driver-loader* script (a utility to help
    you install the driver), and many other required files. You can download this
    package from the official website of [The Falco Project](https://falco.org), where
    you’ll also find comprehensive information about installing it. So, let’s get
    to it!'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and Installing the Binary Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Falco’s binary package is distributed as a single tarball compressed with GNU
    zip (gzip). The tarball file is named *falco-<x.y.z>-<arch>.tar.gz*, where *<x.y.z>*
    is the version of a Falco release and *<arch>* is the intended architecture (e.g.,
    *x86_64*) for the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the available packages are listed on Falco’s [“Download” page](https://oreil.ly/Hx6Dy).
    You can grab the URL of the binary package and download it locally, for example
    using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After downloading the tarball, uncompressing and untarring it is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The tarball content, which you’ve just extracted, is intended to be copied
    directly to the local filesystem’s root (i.e., */*), without any special installation
    procedure. To copy it, run this command as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now you’re ready to install the driver.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'System calls are Falco’s default data source. To instrument the Linux kernel
    and collect these system calls, it needs a driver: either a Linux kernel module
    or an eBPF probe. The driver needs to be built for the specific version and configuration
    of the kernel on which Falco will run. Fortunately, The Falco Project provides
    literally thousands of prebuilt drivers for the vast majority of the most common
    Linux distributions, with various kernel versions available for download. If a
    prebuilt driver for your distribution and kernel version is not yet available,
    the files you installed in the previous section include the source code of both
    the kernel module and the eBPF probe, so it is also possible to build the driver
    locally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This might sound like a lot, but the *falco-driver-loader* script you’ve just
    installed can do all these steps. All you need to do before using the script is
    install a few necessary dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Kernel Module Support (dkms)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU make
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Linux kernel headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending on the package manager you’re using, the actual package names can
    vary; however, they aren’t difficult to find. Once you’ve installed these packages,
    you’re ready to run the *falco-driver-loader* script as root. If everything goes
    well, the script output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This output contains some useful information. The first line reports the versions
    of Falco and the driver that are being installed. The subsequent line tells us
    that the script will try to download a prebuilt driver so it can install a kernel
    module. If the prebuilt driver is not available, Falco will try to build it locally.
    The rest of the output shows the process of building and installing the module
    via DKMS, and finally that the module has been installed and loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Falco
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start Falco, you just have to run it as root:^([1](ch02.xhtml#ch01fn1))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note the configuration and rules files’ paths. We’ll look at these in more detail
    in Chapters [9](ch09.xhtml#installing_falco) and [13](ch13.xhtml#writing_falco_rules).
    Finally, in the last line, we can see that a web server has been started; this
    is done because Falco exposes a health check endpoint that you can use to test
    that it’s up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this chapter, to get you used to it, we have simply run Falco as an interactive
    shell process; therefore, a simple Ctrl-C is enough to end the process. Throughout
    the book, we will show you different and more sophisticated ways to install and
    run it.
  prefs: []
  type: TYPE_NORMAL
- en: Once Falco prints this startup information, it is ready to issue a notification
    whenever a condition in the loaded ruleset is met. Right now, you probably won’t
    see any notifications (assuming nothing malicious is running on your system).
    In the next section, we will generate a suspicious event.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are millions of ways to generate events. In the case of system calls,
    in reality, many events happen continuously as soon as processes are running.
    However, to see Falco in action, we must focus on events that can trigger an alert.
    As you’ll recall, Falco comes preloaded with an out-of-the-box set of rules that
    cover the most common security scenarios. It uses rules to express unwanted behaviors,
    so we need to pick a rule as our target and then trigger it by simulating a malicious
    action within our system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the course of the book, and particularly in [Chapter 13](ch13.xhtml#writing_falco_rules),
    you will learn about the complete anatomy of a rule, how to interpret and write
    a condition using Falco’s rule syntax, and which fields are supported in the conditions
    and outputs. For the moment, let’s briefly recall what a rule is and explain its
    structure by considering a real example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A rule declaration is a YAML object with several keys. The first key, `rule`,
    uniquely identifies the rule within a *ruleset* (one or more YAML files containing
    rule definitions). The second key, `desc`, allows the rule’s author to briefly
    describe what the rule will detect. The `condition` key, arguably the most important
    one, allows expressing a security assertion using some straightforward syntax.
    Various Boolean and comparison operators can be combined with *fields* (which
    hold the collected data) to filter only relevant events. In this example rule,
    `evt.dir` is a field used for filtering. Supported fields and filters are covered
    in more detail in [Chapter 6](ch06.xhtml#fields_and_filters).
  prefs: []
  type: TYPE_NORMAL
- en: As long as the condition is false, nothing will happen. The assertion is met
    when the condition is true, and then an alert will be fired immediately. The alert
    will contain an informative message, as defined by the rule’s author using the
    `output` key of the rule declaration. The value of the `priority` key will be
    reported too. The content of an alert is covered in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `condition`’s syntax can also make use of a few more constructs, like `list`
    and `macro`, that can be defined in the ruleset alongside rules. As the name suggests,
    a *list* is a list of items that can be reused across different rules. Similarly,
    *macros* are reusable pieces of conditions. For completeness, here are the two
    macros (`bin_dir` and `open_write`) utilized in the `condition` key of the *Write
    below binary dir* rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'At runtime, when rules are loaded, macros expand. Consequently, we can imagine
    the final rule condition will be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Conditions make extensive use of fields. In this example, you can easily recognize
    which parts of the condition are fields (`evt.type`, `evt.is_open_write`, `fd.typechar`,
    `evt.dir`, `fd.num`, and `fd.directory`) since they are followed by a comparison
    operator (e.g., `=`, `>=`, `in`). Field names contain a dot (`.`) because fields
    with a similar context are grouped together in *classes*. The part before the
    dot represents the class (for example, `evt` and `fd` are classes).
  prefs: []
  type: TYPE_NORMAL
- en: Although you might not thoroughly understand the condition’s syntax yet, you
    don’t need to at the moment. All you need to know is that creating a file (which
    implies opening a file for writing) under one of the directories listed within
    the condition (like */bin*) should be enough to trigger the rule’s condition.
    Let’s try it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start Falco with our target rule loaded. The *Write below binary dir*
    rule is included in */etc/falco/falco_rules.yaml*, which is loaded by default
    when starting Falco, so you don’t need to copy it manually. Just open a terminal
    and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, trigger the rule by creating a file in the */bin* directory. A straightforward
    way to do this is by opening another terminal window and typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you return to the first terminal with Falco running, you should find
    a line in the log (that is, an alert emitted by Falco) that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Falco caught us! Fortunately, that’s exactly what we wanted to happen. (We’ll
    look at this output in more detail in the next section.)
  prefs: []
  type: TYPE_NORMAL
- en: Rules let us tell Falco which security policies we want to observe (expressed
    by the `condition` key) and which information we want to receive (specified by
    the `output` key) if a policy has been violated. Falco emits an alert (outputs
    a line of text) whenever an event meets the condition defined by a rule, so if
    you run the same command again, a new alert will fire.
  prefs: []
  type: TYPE_NORMAL
- en: 'After trying out this example, why not test some other rules by yourself? To
    facilitate this, the Falcosecurity organization offers a tool called *event-generator*.
    It’s a simple command-line tool that does not require any special installation
    steps. You can [download the latest release](https://oreil.ly/CZGpM) and uncompress
    it wherever you prefer. It comes with a collection of events that match many of
    the rules included in the default Falco ruleset. For example, to generate an event
    that meets the condition expressed by the *Read sensitive file untrusted* rule,
    you can type the following in a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Be aware that this tool might alter your system. For example, since the tool’s
    purpose is to reproduce real malicious behavior, some actions modify files and
    directories such as */bin*, */etc*, and */dev*. Make sure you fully understand
    the purpose of this tool and its options before using it. As the [online documentation](https://oreil.ly/dL8gV)
    recommends, running event-generator in a container is safer.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting Falco’s Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at the alert notification our experiment produced
    to see what important information it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This apparently complex line is actually composed of only three main elements
    separated by whitespace: a timestamp, severity level, and message. Let’s examine
    each of these:'
  prefs: []
  type: TYPE_NORMAL
- en: Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: 'Intuitively, the first element is the timestamp (followed by a colon: `16:52:09.350818073:`).
    That’s when the event was generated. By default, it’s displayed in the local time
    zone and includes nanoseconds. You can, if you like, configure Falco to display
    times in ISO 8601 format, including the date, nanoseconds, and timezone offset
    (in UTC).'
  prefs: []
  type: TYPE_NORMAL
- en: Severity
  prefs: []
  type: TYPE_NORMAL
- en: 'The second element indicates the severity (e.g., `Error`) of the alert, as
    specified by the `priority` key in the rule. It can assume one of the following
    values (ordered from the most to the least severe): `Emergency`, `Alert`, `Critical`,
    `Error`, `Warning`, `Notice`, `Informational`, or `Debug`. Falco allows us to
    filter out those alerts that are not important to us and thus reduce the noisiness
    of the output by specifying the minimum severity level we want to get alerts about.
    The default is `debug`, meaning all severity levels are included by default, but
    we can change this by altering the value of the `priority` parameter in the */etc/falco/falco.yaml*
    configuration file. For example, if we change the value of this parameter to `notice`,
    then we will not receive alerts about rules with `priority` equal to `INFORMATIONAL`
    or `DEBUG`.'
  prefs: []
  type: TYPE_NORMAL
- en: Message
  prefs: []
  type: TYPE_NORMAL
- en: The last and the most essential element is the message. This is a string produced
    according to the format specified by the `output` key. Its peculiarity lies in
    using placeholders, which the Falco engine replaces with the event data, as we
    will see in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the `output` key of a rule begins with a brief text description to
    facilitate identifying the type of problem (e.g., `File below a known binary directory
    opened for writing`). Then it includes some placeholders (e.g., `%user.name`),
    which will be populated with actual values (e.g., `root`) when outputted. You
    can easily recognize placeholders since they start with a `%` symbol followed
    by one of the event’s supported fields. These fields can be used in both the `condition`
    key and the `output` key of a Falco rule.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of this feature is that you can have a different output format for
    each security policy. This immediately gives you the most relevant information
    related to the violation, without having to navigate hundreds of fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although this textual format likely includes all the information you need and
    is suitable for consumption by many other programs, it’s not the only option for
    output—you can instruct Falco to output notifications in JSON format by simply
    changing a configuration parameter. The JSON output format has the advantage of
    being easily parsable by consumers. When enabled, Falco will emit as output a
    JSON line for each alert that will look like the following, which we’ve pretty-printed
    to improve readability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This output format reports the same text message as before. Additionally, each
    piece of information is separated into distinct JSON properties. You may also
    have noticed some extra data: for example, the rule identifier is present this
    time (`"rule": "Write below binary dir"`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To try it right now, when starting Falco, simply pass the following flag as
    a command-line argument to override the default configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can edit */etc/falco/falco.yaml* and set `json_output` to
    `true`. This will enable the JSON format every time Falco starts, without the
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Your Falco Instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you start Falco, it loads several files. In particular, it first loads
    the main (and only) configuration file, as the startup log shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Falco looks for its configuration file at */etc/falco/falco.yaml*, by default.
    That’s where the provided configuration file is installed. If desired, you can
    specify another configuration file path using the `-c` command-line argument when
    running Falco. Whatever file location you prefer, the configuration must be a
    YAML file mainly containing a collection of key/value pairs. Let’s take a look
    at some of the available configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Rules Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most essential options, and the first you’ll find in the provided
    configuration file, is the list of rules files to be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Despite the naming (for backward compatibility), `rules_file` allows you to
    specify multiple entries, each of which can be either a rules file or a directory
    containing rules files. If the entry is a file, Falco reads it directly. In the
    case of a directory, Falco will read every file in that directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The order matters here. The files are loaded in the presented order (files
    within a directory are loaded in alphabetical order). Users can customize predefined
    rules by simply overriding them in files that appear later in the list. For example,
    say you want to turn off the *Write below binary dir* rule, which is included
    in */etc/falco/falco_rules.yaml*. All you need to do is edit */etc/falco/falco_rules.local.yaml*
    (which appears below that file in the list and is intended to add local overrides)
    and write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Output Channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a group of options that control Falco’s available *output channels*,
    allowing you to specify where the security notifications should go. Furthermore,
    you can enable more than one simultaneously. You can easily recognize them within
    the configuration file (*/etc/falco/falco.yaml*) since their keys are suffixed
    with `_output`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the only two enabled output channels are `stdout_output`, which
    instructs Falco to send alert messages to the standard output, and `syslog_output`,
    which sends them to the system logging daemon. Their configurations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Falco provides several other advanced built-in output channels. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When `file_output` is enabled, Falco will also write its alerts to the file
    specified by the subkey `filename`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other output channels allow you to consume alerts in sophisticated ways and
    integrate with third parties. For instance, if you want to pass the Falco output
    to a local program, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Once you enable this, Falco will execute the program for each alert and write
    its content to the program’s standard output. You can set the `program` subkey
    to any valid shell command, so this is an excellent opportunity to show off your
    favorite one-liners.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you simply need to integrate with a webhook, a more convenient option is
    to use the `http_output` output channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A simple HTTP POST request will be sent to the specified `url` for each alert.
    That makes it really easy to connect Falco to other tools, like Falcosidekick,
    which will forward alerts to Slack, Teams, Discord, Elasticsearch, and many other
    destinations.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, Falco comes with a gRPC API and a corresponding output,
    `grpc_output`. Enabling the gRPC API and gRPC output channel allows you to connect
    Falco to falco-exporter*,* which, in turn, will export metrics to Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Falcosidekick and falco-exporter are open source projects you can find under
    the [Falcosecurity GitHub organization](https://oreil.ly/CF0Bk). In [Chapter 12](ch12.xhtml#consuming_falco_events),
    you will meet these tools again and learn how to work with outputs.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter showed you how to install and run Falco on your local machine as
    a playground. You saw some simple ways to generate events and learned how to decode
    the output. We then looked at how to use the configuration file to customize Falco’s
    behavior. Loading and extending rules are the primary ways to instruct Falco on
    what to protect. Likewise, configuring the output channels empowers us to consume
    notifications in ways that meet our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with this knowledge, you can start experimenting with Falco confidently.
    The rest of this book will expand on you’ve learned here and eventually help you
    master Falco completely.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch02.xhtml#ch01fn1-marker)) Falco needs to run with root privileges to
    operate the driver that in turn collects system calls. However, alternative approaches
    are possible. For example, you can learn from Falco’s [“Running” page](https://oreil.ly/6VD67)
    how to run Falco in a container with the principle of least privilege.
  prefs: []
  type: TYPE_NORMAL
