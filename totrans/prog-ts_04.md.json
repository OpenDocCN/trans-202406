["```\nfunction add(a: number, b: number) {\n  return a + b\n}\n```", "```\nfunction add(a: number, b: number): number {\n  return a + b\n}\n```", "```\n// Named function\nfunction greet(name: string) {\n  return 'hello ' + name\n}\n\n// Function expression\nlet greet2 = function(name: string) {\n  return 'hello ' + name\n}\n\n// Arrow function expression\nlet greet3 = (name: string) => {\n  return 'hello ' + name\n}\n\n// Shorthand arrow function expression\nlet greet4 = (name: string) =>\n  'hello ' + name\n\n// Function constructor\nlet greet5 = new Function('name', 'return \"hello \" + name')\n```", "```\nadd(1, 2)         // evaluates to 3\ngreet('Crystal')  // evaluates to 'hello Crystal'\n```", "```\nadd(1)            // Error TS2554: Expected 2 arguments, but got 1.\nadd(1, 'a')       // Error TS2345: Argument of type '\"a\"' is not assignable\n                  // to parameter of type 'number'.\n```", "```\nfunction log(message: string, userId?: string) {\n  let time = new Date().toLocaleTimeString()\n  console.log(time, message, userId || 'Not signed in')\n}\n\nlog('Page loaded') // Logs \"12:38:31 PM Page loaded Not signed in\"\nlog('User signed in', 'da763be') // Logs \"12:38:31 PM User signed in da763be\"\n```", "```\nfunction log(message: string, userId `=` `'Not signed in'`) {\n  let time = new Date().toISOString()\n  console.log(time, message, userId)\n}\n\nlog('User clicked on a button', 'da763be')\nlog('User signed out')\n\n```", "```\n`type` `Context` `=` `{`\n  `appId?``:` `string`\n  `userId?``:` `string`\n`}`\n\nfunction log(message: string, `context``:` `Context` `=` `{``}`) {\n  let time = new Date().toISOString()\n  console.log(time, message, `context``.`userId)\n}\n\n```", "```\nfunction sum(numbers: number[]): number {\n  return numbers.reduce((total, n) => total + n, 0)\n}\n\nsum([1, 2, 3]) // evaluates to 6\n```", "```\nfunction sumVariadic(): number {\n  return Array\n    .from(arguments)\n    .reduce((total, n) => total + n, 0)\n}\n\nsumVariadic(1, 2, 3) // evaluates to 6\n```", "```\nsumVariadic(1, 2, 3) // Error TS2554: Expected 0 arguments, but got 3.\n```", "```\nfunction sumVariadicSafe(...numbers: number[]): number {\n  return numbers.reduce((total, n) => total + n, 0)\n}\n\nsumVariadicSafe(1, 2, 3) // evaluates to 6\n```", "```\ninterface Console {\n  log(message?: any, ...optionalParams: any[]): void\n}\n```", "```\nfunction add(a: number, b: number): number {\n  return a + b\n}\n\nadd(10, 20)                // evaluates to 30\nadd.apply(null, [10, 20])  // evaluates to 30\nadd.call(null, 10, 20)     // evaluates to 30\nadd.bind(null, 10, 20)()   // evaluates to 30\n```", "```\nlet x = {\n  a() {\n    return this\n  }\n}\nx.a() // this is the object x in the body of a()\n```", "```\nlet a = x.a\na() // now, this is undefined in the body of a()\n```", "```\nfunction fancyDate() {\n  return ${this.getDate()}/${this.getMonth()}/${this.getFullYear()}\n}\n```", "```\nfancyDate.call(new Date) // evaluates to \"4/14/2005\"\n```", "```\nfancyDate() // Uncaught TypeError: this.getDate is not a function\n```", "```\nfunction fancyDate(`this``:` `Date`) {\n  return ${this.getDate()}/${this.getMonth()}/${this.getFullYear()}\n}\n\n```", "```\nfancyDate.call(new Date) // evaluates to \"6/13/2008\"\n\nfancyDate() // Error TS2684: The 'this' context of type 'void' is\n            // not assignable to method's 'this' of type 'Date'.\n```", "```\nfunction* createFibonacciGenerator() { ![1](assets/1.png)\n  let a = 0\n  let b = 1\n  while (true) { ![2](assets/2.png)\n    yield a; ![3](assets/3.png)\n    [a, b] = [b, a + b] ![4](assets/4.png)\n  }\n}\n\nlet fibonacciGenerator = createFibonacciGenerator() // IterableIterator<number> fibonacciGenerator.next()   // evaluates to {value: 0, done: false} fibonacciGenerator.next()   // evaluates to {value: 1, done: false} fibonacciGenerator.next()   // evaluates to {value: 1, done: false} fibonacciGenerator.next()   // evaluates to {value: 2, done: false} fibonacciGenerator.next()   // evaluates to {value: 3, done: false} fibonacciGenerator.next()   // evaluates to {value: 5, done: false}\n```", "```\nfunction* createNumbers(): IterableIterator<number> {\n  let n = 0\n  while (1) {\n    yield n++\n  }\n}\n\nlet numbers = createNumbers()\nnumbers.next()              // evaluates to {value: 0, done: false}\nnumbers.next()              // evaluates to {value: 1, done: false}\nnumbers.next()              // evaluates to {value: 2, done: false}\n```", "```\nlet numbers = {\n  *[Symbol.iterator]() {\n    for (let n = 1; n <= 10; n++) {\n      yield n\n    }\n  }\n}\n```", "```\n// Iterate over an iterator with for-of\nfor (let a of numbers) {\n  // 1, 2, 3, etc.\n}\n\n// Spread an iterator\nlet allNumbers = [...numbers] // number[]\n\n// Destructure an iterator\nlet [one, two, ...rest] = numbers // [number, number, number[]]\n```", "```\nfunction sum(a: number, b: number): number {\n  return a + b\n}\n```", "```\nFunction\n```", "```\n(a: number, b: number) => number\n```", "```\n// function greet(name: string)\ntype Greet = (name: string) => string\n\n// function log(message: string, userId?: string)\ntype Log = (message: string, userId?: string) => void\n\n// function sumVariadicSafe(...numbers: number[]): number\ntype SumVariadicSafe = (...numbers: number[]) => number\n```", "```\ntype Log = (message: string, userId?: string) => void\n\nlet log: Log = ( ![1](assets/1.png)\n  message, ![2](assets/2.png)\n  userId = 'Not signed in' ![3](assets/3.png)\n) => { ![4](assets/4.png)\n  let time = new Date().toISOString()\n  console.log(time, message, userId)\n}\n```", "```\nfunction times(\n  f: (index: number) => void,\n  n: number\n) {\n  for (let i = 0; i < n; i++) {\n    f(i)\n  }\n}\n```", "```\ntimes(n => console.log(n), 4)\n```", "```\nfunction f(n) { // Error TS7006: Parameter 'n' implicitly has an 'any' type.\n  console.log(n)\n}\n\ntimes(f, 4)\n```", "```\n// Shorthand call signature\ntype Log = (message: string, userId?: string) => void\n\n// Full call signature\ntype Log = {\n  (message: string, userId?: string): void\n}\n```", "```\ntype Reserve = {\n  (from: Date, to: Date, destination: string): Reservation\n}\n```", "```\nlet reserve: Reserve = (from, to, destination) => {\n  // ...\n}\n```", "```\ntype Reserve = {\n  (from: Date, to: Date, destination: string): Reservation\n  (from: Date, destination: string): Reservation\n}\n```", "```\ntype Reserve = {\n  (from: Date, to: Date, destination: string): Reservation\n  (from: Date, destination: string): Reservation\n} ![1](assets/1.png)\n\nlet reserve: Reserve = (\n  from: Date,\n  toOrDestination: Date | string,\n  destination?: string\n) => { ![2](assets/2.png)\n  // ... }\n```", "```\ntype Reserve = {\n  (from: Date, to: Date, destination: string): Reservation\n  (from: Date, destination: string): Reservation\n}\n```", "```\n// Wrong!\ntype Reserve = {\n  (from: Date, to: Date, destination: string): Reservation\n  (from: Date, destination: string): Reservation\n  (from: Date, toOrDestination: Date | string,\n    destination?: string): Reservation\n}\n```", "```\nlet reserve: Reserve = (\n  from: Date,\n  toOrDestination: Date | string,\n  destination?: string\n) => {\n  if (toOrDestination instanceof Date && destination !== undefined) {\n    // Book a one-way trip\n  } else if (typeof toOrDestination === 'string') {\n    // Book a round trip\n  }\n}\n```", "```\ntype CreateElement = {\n  (tag: 'a'): HTMLAnchorElement ![1](assets/1.png)\n  (tag: 'canvas'): HTMLCanvasElement\n  (tag: 'table'): HTMLTableElement\n  (tag: string): HTMLElement ![2](assets/2.png)\n}\n\nlet createElement: CreateElement = (tag: string): HTMLElement => { ![3](assets/3.png)\n  // ... }\n```", "```\nfunction createElement(tag: 'a'): HTMLAnchorElement\nfunction createElement(tag: 'canvas'): HTMLCanvasElement\nfunction createElement(tag: 'table'): HTMLTableElement\nfunction createElement(tag: string): HTMLElement {\n  // ...\n}\n```", "```\nfunction warnUser(warning) {\n  if (warnUser.wasCalled) {\n    return\n  }\n  warnUser.wasCalled = true\n  alert(warning)\n}\nwarnUser.wasCalled = false\n```", "```\ntype WarnUser = {\n  (warning: string): void\n  wasCalled: boolean\n}\n```", "```\nlet warnUser: WarnUser = (warning: string) => {\n  if (warnUser.wasCalled) {\n    return\n  }\n  warnUser.wasCalled = true\n  alert(warning)\n}\nwarnUser.wasCalled = false\n```", "```\nfunction filter(array, f) {\n  let result = []\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i]\n    if (f(item)) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\nfilter([1, 2, 3, 4], _ => _ < 3) // evaluates to [1, 2]\n```", "```\ntype Filter = {\n  (array: unknown, f: unknown) => unknown[]\n}\n```", "```\ntype Filter = {\n  (array: `number``[``]`, f: `(``item``:` `number``)` `=``>` `boolean`): `number``[``]`\n}\n\n```", "```\ntype Filter = {\n  (array: number[], f: (item: number) => boolean): number[]\n  `(``array``:` `string``[``]``,` `f``:` `(``item``:` `string``)` `=``>` `boolean``)``:` `string``[``]`\n}\n\n```", "```\ntype Filter = {\n  (array: number[], f: (item: number) => boolean): number[]\n  (array: string[], f: (item: string) => boolean): string[]\n  `(``array``:` `object``[``]``,` `f``:` `(``item``:` `object``)` `=``>` `boolean``)``:` `object``[``]`\n}\n\n```", "```\nlet names = [\n  {firstName: 'beth'},\n  {firstName: 'caitlyn'},\n  {firstName: 'xin'}\n]\n\nlet result = filter(\n  names,\n  _ => _.firstName.startsWith('b')\n) // Error TS2339: Property 'firstName' does not exist on type 'object'.\n\nresult[0].firstName // Error TS2339: Property 'firstName' does not exist\n                    // on type 'object'.\n```", "```\ntype Filter = {\n  `<``T``>`(array: `T`[], f: (item: `T`) => boolean): `T`[]\n}\n\n```", "```\ntype Filter = {\n  <T>(array: T[], f: (item: T) => boolean): T[]\n}\n\nlet filter: Filter = (array, f) => // ...\n\n// (a) T is bound to number\nfilter([1, 2, 3], _ => _ > 2)\n\n// (b) T is bound to string\nfilter(['a', 'b'], _ => _ !== 'b')\n\n// (c) T is bound to {firstName: string}\nlet names = [\n  {firstName: 'beth'},\n  {firstName: 'caitlyn'},\n  {firstName: 'xin'}\n]\nfilter(names, _ => _.firstName.startsWith('b'))\n```", "```\ntype Filter = {\n  <T>(array: T[], f: (item: T) => boolean): T[]\n}\n\nlet filter: Filter = (array, f) =>\n  // ...\n```", "```\ntype Filter`<``T``>` = {\n  (array: T[], f: (item: T) => boolean): T[]\n}\n\nlet filter: Filter = (array, f) => *`// Error TS2314: Generic type 'Filter'`*\n  // ... *`// requires 1 type argument(s).`*\n\ntype OtherFilter = Filter          *`// Error TS2314: Generic type 'Filter'`*\n                                   *`// requires 1 type argument(s).`*\n\nlet filter: Filter<number> = (array, f) =>\n  // ... \ntype StringFilter = Filter<string>\nlet stringFilter: StringFilter = (array, f) =>\n  // ... \n```", "```\ntype Filter = { ![1](assets/1.png)\n  <T>(array: T[], f: (item: T) => boolean): T[]\n}\nlet filter: Filter = // ... \ntype Filter<T> = { ![2](assets/2.png)\n  (array: T[], f: (item: T) => boolean): T[]\n}\nlet filter: Filter<number> = // ... \ntype Filter = <T>(array: T[], f: (item: T) => boolean) => T[] ![3](assets/3.png)\nlet filter: Filter = // ... \ntype Filter<T> = (array: T[], f: (item: T) => boolean) => T[] ![4](assets/4.png)\nlet filter: Filter<string> = // ... \nfunction filter<T>(array: T[], f: (item: T) => boolean): T[] { ![5](assets/5.png)\n  // ... }\n```", "```\nfunction map(array: unknown[], f: (item: unknown) => unknown): unknown[] {\n  let result = []\n  for (let i = 0; i < array.length; i++) {\n    result[i] = f(array[i])\n  }\n  return result\n}\n```", "```\nfunction map`<``T``,` `U``>`(array: `T`[], f: (item: `T`) => `U`): `U`[] {\n  let result = []\n  for (let i = 0; i < array.length; i++) {\n    result[i] = f(array[i])\n  }\n  return result\n}\n\n```", "```\nfunction map<T, U>(array: T[], f: (item: T) => U): U[] {\n  // ...\n}\n\nmap(\n  ['a', 'b', 'c'],  // An array of T\n  _ => _ === 'a'    // A function that returns a U\n)\n\n```", "```\nmap\t<string, boolean>(\n  ['a', 'b', 'c'],\n  _ => _ === 'a'\n)\n\nmap\t<string>( // Error TS2558: Expected 2 type arguments, but got 1.\n  ['a', 'b', 'c'],\n  _ => _ === 'a'\n)\n\n```", "```\n// OK, because boolean is assignable to boolean | string\nmap<string, boolean | string>(\n  ['a', 'b', 'c'],\n  _ => _ === 'a'\n)\n\nmap<string, number>(\n  ['a', 'b', 'c'],\n  _ => _ === 'a'  // Error TS2322: Type 'boolean' is not assignable\n)                 // to type 'number'.\n```", "```\nlet promise = new Promise(resolve =>\n  resolve(45)\n)\npromise.then(result => // Inferred as {}\n  result * 4 // Error TS2362: The left-hand side of an arithmetic operation must\n)            // be of type 'any', 'number', 'bigint', or an enum type.\n```", "```\nlet promise = new Promise<number>(resolve =>\n  resolve(45)\n)\npromise.then(result => // number\n  result * 4\n)\n```", "```\ntype MyEvent<T> = {\n  target: T\n  type: string\n}\n```", "```\ntype ButtonEvent = MyEvent<HTMLButtonElement>\n```", "```\nlet myEvent: Event<HTMLButtonElement | null> = {\n  target: document.querySelector('#myButton'),\n  type: 'click'\n}\n```", "```\ntype TimedEvent<T> = {\n  event: MyEvent<T>\n  from: Date\n  to: Date\n}\n```", "```\nfunction triggerEvent<T>(event: MyEvent<T>): void {\n  // ...\n}\n\ntriggerEvent({ // T is Element | null\n  target: document.querySelector('#myButton'),\n  type: 'mouseover'\n})\n```", "```\ntype TreeNode = {\n  value: string\n}\ntype LeafNode = TreeNode & {\n  isLeaf: true\n}\ntype InnerNode = TreeNode & {\n  children: [TreeNode] | [TreeNode, TreeNode]\n}\n```", "```\nlet a: TreeNode = {value: 'a'}\nlet b: LeafNode = {value: 'b', isLeaf: true}\nlet c: InnerNode = {value: 'c', children: [b]}\n\nlet a1 = mapNode(a, _ => _.toUpperCase()) // TreeNode\nlet b1 = mapNode(b, _ => _.toUpperCase()) // LeafNode\nlet c1 = mapNode(c, _ => _.toUpperCase()) // InnerNode\n```", "```\nfunction mapNode<T extends TreeNode>( ![1](assets/1.png)\n  node: T, ![2](assets/2.png)\n  f: (value: string) => string\n): T { ![3](assets/3.png)\n  return {\n    ...node,\n    value: f(node.value)\n  }\n}\n```", "```\ntype HasSides = {numberOfSides: number}\ntype SidesHaveLength = {sideLength: number}\n\nfunction logPerimeter< ![1](assets/1.png)\n  Shape extends HasSides & SidesHaveLength ![2](assets/2.png)\n>(s: Shape): Shape { ![3](assets/3.png)\n  console.log(s.numberOfSides * s.sideLength)\n  return s\n}\n\ntype Square = HasSides & SidesHaveLength\nlet square: Square = {numberOfSides: 4, sideLength: 3}\nlogPerimeter(square) // Square, logs \"12\"\n```", "```\nfunction call(\n  f: (...args: unknown[]) => unknown,\n  ...args: unknown[]\n): unknown {\n  return f(...args)\n}\n\nfunction fill(length: number, value: string): string[] {\n  return Array.from({length}, () => value)\n}\n\ncall(fill, 10, 'a') // evaluates to an array of 10 'a's\n```", "```\nfunction call`<``T` `extends` `unknown``[``]``,` `R``>`( ![1](assets/1.png)\n  f: (...args: `T`) => `R`, ![2](assets/2.png)\n  ...args: `T` ![3](assets/3.png)\n): `R` { ![4](assets/4.png)\n  return f(...args)\n}\n\n```", "```\nlet a = call(fill, 10, 'a')      // string[]\nlet b = call(fill, 10)           // Error TS2554: Expected 3 arguments; got 2.\nlet c = call(fill, 10, 'a', 'z') // Error TS2554: Expected 3 arguments; got 4.\n```", "```\ntype MyEvent<T> = {\n  target: T\n  type: string\n}\n```", "```\nlet buttonEvent: MyEvent<HTMLButtonElement> = {\n  target: myButton,\n  type: string\n}\n```", "```\ntype MyEvent<T `=` `HTMLElement`> = {\n  target: T\n  type: string\n}\n\n```", "```\ntype MyEvent<T `extends` `HTMLElement` = HTMLElement> = {\n  target: T\n  type: string\n}\n\n```", "```\nlet myEvent: MyEvent = {\n  target: myElement,\n  type: string\n}\n```", "```\n// Good\ntype MyEvent2<\n  Type extends string,\n  Target extends HTMLElement = HTMLElement,\n> = {\n  target: Target\n  type: Type\n}\n\n// Bad\ntype MyEvent3<\n  Target extends HTMLElement = HTMLElement,\n  Type extends string  // Error TS2706: Required type parameters may\n> = {                  // not follow optional type parameters.\n  target: Target\n  type: Type\n}\n```", "```\nfunction map<T, U>(array: T[], f: (item: T) => U): U[] {\n  // ...\n}\n```", "```\n// Compare a string and a string\nis('string', 'otherstring') // false\n\n// Compare a boolean and a boolean\nis(true, false) // false\n\n// Compare a number and a number\nis(42, 42) // true\n\n// Comparing two different types should give a compile-time error\nis(10, 'foo') // Error TS2345: Argument of type '\"foo\"' is not assignable\n              // to parameter of type 'number'.\n\n// [Hard] I should be able to pass any number of arguments\nis([1], [1, 2], [1, 2, 3]) // false\n```"]