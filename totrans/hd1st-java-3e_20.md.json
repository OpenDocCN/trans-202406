["```\n    BankAccount account = new BankAccount();\n    ```", "```\n    RyanAndMonicaJob ryan = new RyanAndMonicaJob(\"Ryan\", account, 50);\n    RyanAndMonicaJob monica = new RyanAndMonicaJob(\"Monica\", account, 100);\n    ```", "```\n    ExecutorService executor = Executors.newFixedThreadPool(2);\n    executor.execute(ryan);\n    executor.execute(monica);\n    ```", "```\n    if (account.getBalance() >= amount) {\n      account.spend(amount);\n    } else {\n      System.out.println(\"Sorry, not enough money\");\n    }\n    ```", "```\nprivate synchronized void goShopping(int amount) {\n  if (account.getBalance() >= amount) {\n    System.out.println(name + \" is about to spend\");\n    account.spend(amount);\n    System.out.println(name + \" finishes spending\");\n  } else {\n    System.out.println(\"Sorry, not enough for \" + name);\n  }\n}\n```", "```\nint i = balance;\n```", "```\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class TwoThreadsWriting {\n  public static void main(String[] args) {\n    ExecutorService threadPool = Executors.newFixedThreadPool(2);\n    Data data = new Data();\n    threadPool.execute(() -> addLetterToData('a', data));\n    threadPool.execute(() -> addLetterToData('A', data));\n    threadPool.shutdown();\n  }\n\n  private static void addLetterToData(char letter, Data data) {\n    for (int i = 0; i < 26; i++) {\n      data.addLetter(letter++);\n      try {\n        Thread.sleep(50);\n      } catch (InterruptedException ignored) {}\n    }\n    System.out.println(Thread.currentThread().getName() + data.getLetters());\n    System.out.println(Thread.currentThread().getName()\n                               + \" size = \" + data.getLetters().size());\n  }\n}\n\nfinal class Data {\n  private final List<String> letters = new ArrayList<>();\n\n  public List<String> getLetters() {return letters;}\n\n  public void addLetter(char letter) {\n    letters.add(String.valueOf(letter));\n  }\n}\n```", "```\norbiterAirlockExitSequence()\n\n  verifyPortalStatus();\n\n  pressurizeAirlock();\n\n  openInnerHatch();\n\n  confirmAirlockOccupied();\n\n  closeInnerHatch();\n\n  decompressAirlock();\n\n  openOuterHatch();\n\n  confirmAirlockVacated();\n\n  closeOuterHatch();\n```"]