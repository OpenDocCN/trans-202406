- en: Chapter 6\. Special Index and Collection Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers the special collections and index types MongoDB has available,
    including:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Capped collections for queue-like data
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TTL indexes for caches
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full-text indexes for simple string searching
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geospatial indexes for 2D and spherical geometries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GridFS for storing large files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geospatial Indexes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB has two types of geospatial indexes: `2dsphere` and `2d`. `2dsphere`
    indexes work with spherical geometries that model the surface of the earth based
    on the WGS84 datum. This datum models the surface of the earth as an oblate spheroid,
    meaning that there is some flattening at the poles. Distance calculations using
    `2sphere` indexes, therefore, take the shape of the earth into account and provide
    a more accurate treatment of distance between, for example, two cities, than do
    `2d` indexes. Use `2d` indexes for points stored on a two-dimensional plane.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '`2dsphere` allows you to specify geometries for points, lines, and polygons
    in the [GeoJSON format](http://www.geojson.org/). A point is given by a two-element
    array, representing [*`longitude`*, *`latitude`*]:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A line is given by an array of points:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A polygon is specified the same way a line is (an array of points), but with
    a different `"type"`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The field that we are naming, `"loc"` in this example, can be called anything,
    but the field names in the embedded object are specified by GeoJSON and cannot
    be changed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a geospatial index using the `"2dsphere"` type with `` `createIndex`
    ``:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To create a `2dsphere` index, pass a document to `createIndex` that specifies
    the field containing geometries you want to index for the collection in question
    and specify `"2dsphere"` as the value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Types of Geospatial Queries
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three types of geospatial queries that you can perform: intersection,
    within, and nearness. You specify what you’re looking for as a GeoJSON object
    that looks like ``{"$geometry" : *`geoJsonDesc`*}``.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can find documents that intersect the query’s location using
    the `"$geoIntersects"` operator:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This would find all point-, line-, and polygon-containing documents that had
    a point in the East Village in New York City.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `"$geoWithin"` to query for things that are completely contained
    in an area (for instance, “What restaurants are in the East Village?”):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Unlike our first query, this will not return things that merely pass through
    the East Village (such as streets) or partially overlap it (such as a polygon
    describing Manhattan).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can query for nearby locations with `"$near"`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that `"$near"` is the only geospatial operator that implies a sort: results
    from `"$near"` are always returned in order of distance, from closest to farthest.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Using Geospatial Indexes
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB’s geospatial indexing allows you to efficiently execute spatial queries
    on a collection that contains geospatial shapes and points. To showcase the capabilities
    of geospatial features and compare different approaches, we will go through the
    process of writing queries for a simple geospatial application. We’ll go a little
    deeper into a few concepts central to geospatial indexes and then demonstrate
    their use with `"$geoWithin"`, `"$geoIntersects"`, and `"$geoNear"`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we are designing a mobile application to help users find restaurants
    in New York City. The application must:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Determine the neighborhood the user is currently in.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the number of restaurants in that neighborhood.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find restaurants within a specified distance.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use a `2dsphere` index to query on this spherical geometry data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 2D versus spherical geometry in queries
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Geospatial queries can use either spherical or 2D (flat) geometries, depending
    on both the query and the type of index in use. [Table 6-1](#table0601) shows
    what kind of geometry each geospatial operator uses.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-1\. Query types and geometries in MongoDB
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '| Query type | Geometry type |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| `$near` (GeoJSON point, `2dsphere` index) | Spherical |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| `$near` (legacy coordinates, `2d` index) | Flat |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| `$geoNear` (GeoJSON point, `2dsphere` index) | Spherical |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| `$geoNear` (legacy coordinates, `2d` index) | Flat |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| `$nearSphere` (GeoJSON point, `2dsphere` index) | Spherical |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| `$nearSphere` (legacy coordinates, `2d` index)^([a](ch06.xhtml#idm45882368776472))
    | Spherical |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| `$geoWithin : { $geometry: ... }` | Spherical |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| `$geoWithin: { $box: ... }` | Flat |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| `$geoWithin: { $polygon: ... }` | Flat |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| `$geoWithin : { $center: ... }` | Flat |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| `$geoWithin : { $centerSphere: ... }` | Spherical |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `$geoIntersects` | Spherical |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch06.xhtml#idm45882368776472-marker)) Use GeoJSON points instead. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: Note also that `2d` indexes support both flat geometries and distance-only calculations
    on spheres (i.e., using `$nearSphere`). However, queries using spherical geometries
    will be more performant and accurate with a `2dsphere` index.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Note also that the `$geoNear` operator is an aggregation operator. The aggregation
    framework is discussed in [Chapter 7](ch07.xhtml#chapter_d1e6036). In addition
    to the `$near` query operation, the `$geoNear` aggregation operator and the special
    command `geoNear` enable us to query for nearby locations. Keep in mind that the
    `$near` query operator will not work on collections that are distributed using
    sharding, MongoDB’s scaling solution (see [Chapter 15](ch15.xhtml#chapter-shard-config)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The `geoNear` command and the `$geoNear` aggregation operator require that a
    collection have at most one `2dsphere` index and at most one `2d` index, whereas
    geospatial query operators (e.g., `$near` and `$geoWithin`) permit collections
    to have multiple geospatial indexes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The geospatial index restriction for the `geoNear` command and the `$geoNear`
    aggregation operator exists because neither the `geoNear` command nor the `$geoNear`
    syntax includes the location field. As such, index selection among multiple `2d`
    indexes or `2dsphere` indexes is ambiguous.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: No such restriction applies for geospatial query operators; these operators
    take a location field, eliminating the ambiguity.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Distortion
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spherical geometry will appear distorted when visualized on a map due to the
    nature of projecting a three-dimensional sphere, such as the earth, onto a flat
    plane.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: For example, take the specification of the spherical square defined by the longitude,
    latitude points (0,0), (80,0), (80,80), and (0,80). [Figure 6-1](#fig0601) depicts
    the area covered by this region.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mdb3_0601.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. The spherical square defined by the points (0,0), (80,0), (80,
    80), and (0,80)
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Searching for restaurants
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we will work with [neighborhood](https://oreil.ly/rpGna) and
    [restaurant](https://oreil.ly/JXYd-) datasets based in New York City. You can
    download the example datasets from GitHub.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'We can import the datasets into our database using the `mongoimport` tool as
    follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can create a `2dsphere` index on each collection using the `createIndex`
    command in the [*mongo* shell](https://oreil.ly/NMUhn):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exploring the data
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can get a sense for the schema used for documents in these collections with
    a couple of quick queries in the *mongo* shell:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The neighborhood document in the previous code corresponds to the area of New
    York City shown in [Figure 6-2](#fig0602).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mdb3_0602.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. The Hell’s Kitchen (Clinton) neighborhood of New York City
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The bakery corresponds to the location shown in [Figure 6-3](#fig0603).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mdb3_0603.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. The Little Pie Company at 424 West 43rd Street
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Finding the current neighborhood
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming the user’s mobile device can give a reasonably accurate location user,
    it is simple to find the user’s current neighborhood with `$geoIntersects`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose the user is located at −73.93414657 longitude and 40.82302903 latitude.
    To find the current neighborhood (Hell’s Kitchen), we can specify a point using
    the special `$geometry` field in GeoJSON format:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This query will return the following result:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finding all restaurants in the neighborhood
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also query to find all restaurants contained in a given neighborhood.
    To do so, we can execute the following in the *mongo* shell to find the neighborhood
    containing the user, and then count the restaurants within that neighborhood.
    For example, to find all the restaurants in the Hell’s Kitchen neighborhood:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This query will tell you that there are 127 restaurants in the requested neighborhood
    that have the following names:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finding restaurants within a distance
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To find restaurants within a specified distance of a point, you can use either
    `"$geoWithin"` with `"$centerSphere"` to return results in unsorted order, or
    `"$nearSphere"` with `"$maxDistance"` if you need results sorted by distance.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: To find restaurants within a circular region, use `"$geoWithin"` with `"$centerSphere"`.
    `"$centerSphere"` is a MongoDB-specific syntax to denote a circular region by
    specifying the center and the radius in radians. `"$geoWithin"` does not return
    the documents in any specific order, so it might return the furthest documents
    first.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will find all restaurants within five miles of the user:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`"$centerSphere"`’s second argument accepts the radius in radians. The query
    converts the distance to radians by dividing by the approximate equatorial radius
    of the earth, 3963.2 miles.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Applications can use `"$centerSphere"` without having a geospatial index. However,
    geospatial indexes support much faster queries than the unindexed equivalents.
    Both `2dsphere` and `2d` geospatial indexes support `"$centerSphere"`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also use `"$nearSphere"` and specify a `"$maxDistance"` term in meters.
    This will return all restaurants within five miles of the user in sorted order
    from nearest to farthest:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Compound Geospatial Indexes
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with other types of indexes, you can combine geospatial indexes with other
    fields to optimize more complex queries. A possible query mentioned earlier was:
    “What restaurants are in Hell’s Kitchen?” Using only a geospatial index, we could
    narrow the field to everything in Hell’s Kitchen, but narrowing it down to only
    “restaurants” or “pizza” would require another field in the index:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then we can quickly find a pizza place in Hell’s Kitchen:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can have the “vanilla” index field either before or after the `"2dsphere"`
    field, depending on whether we’d like to filter by the vanilla field or the location
    first. Choose whichever is more selective (i.e., will filter out more results
    as the first index term).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 2d Indexes
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For nonspherical maps (videogame maps, time series data, etc.) you can use
    a `"2d"` index instead of `"2dsphere"`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`2d` indexes assume a perfectly flat surface, instead of a sphere. Thus, `2d`
    indexes should not be used with spheres unless you don’t mind massive distortion
    around the poles.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Documents should use a two-element array for their `"2d"` indexed field. The
    elements in this array should reflect the longitude and lattitude coordinates,
    respectively. A sample document might look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Do not use a `2d` index if you plan to store GeoJSON data—they can only index
    points. You can store an array of points, but it will be stored as exactly that:
    an array of points, not a line. This is an important distinction for `"$geoWithin"`
    queries, in particular. If you store a street as an array of points, the document
    will match `"$geoWithin"` if one of those points is within the given shape. However,
    the line created by those points might not be wholly contained in the shape.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, `2d` indexes assume that your values are going to range from −180
    to 180\. If you are expecting larger or smaller bounds, you can specify what the
    minimum and maximum values will be as options to `createIndex`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will create a spatial index calibrated for a 2,000 × 2,000 square.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`2d` indexes support the `"$geoWithin"`, `"$nearSphere"`, and `"$near"` query
    selectors. Use `"$geoWithin"` to query for points within a shape defined on a
    flat surface. `"$geoWithin"` can query for all points within a rectangle, polygon,
    circle, or sphere; it uses the `"$geometry"` operator to specify the GeoJSON object.
    Returning to our grid indexed as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'the following queries for documents within a rectangle defined by [10, 10]
    at the bottom-left corner and by [100, 100] at the top-right corner:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`$box` takes a two-element array: the first element specifies the coordinates
    of the lower-left corner and the second element the upper right.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'To query for documents that are within the circle centered on [−17 , 20.5]
    and with a radius of 25 we can issue the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following query returns all documents with coordinates that exist within
    the polygon defined by [0, 0], [3, 6], and [6 , 0]:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You specify a polygon as an array of points. The final point in the list will
    be “connected to” the first point to form the polygon. This example would locate
    all documents containing points within the given triangle.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB also supports rudimentary spherical queries on flat `2d` indexes for
    legacy reasons. In general, spherical calculations should use a 2dsphere index,
    as described in [“2D versus spherical geometry in queries”](#twod_vs_sgq). However,
    to query for legacy coordinate pairs within a sphere, use `"$geoWithin"` with
    the “`$centerSphere”` operator. Specify an array that contains:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The grid coordinates of the circle’s center point
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The circle’s radius measured in radians
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To query for nearby points, use `"$near"`. Proximity queries return the documents
    with coordinate pairs closest to the defined point and sort the results by distance.
    This finds all of the documents in the *hyrule* collection in order by distance
    from the point (20, 21):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'A default limit of 100 documents is applied if no limit is specified. If you
    don’t need that many results, you should set a limit to conserve server resources.
    For example, the following code returns the 10 documents nearest to (20, 21):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Indexes for Full Text Search
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`text` indexes in MongoDB support full-text search requirements. This type
    of `text` index should not be confused with the MongoDB Atlas Full-Text Search
    Indexes, which utilize Apache Lucene for additional text search capabilities when
    compared to MongoDB text indexes. Use a `text` index if your application needs
    to enable users to submit keyword queries that should match titles, descriptions,
    and text in other fields within a collection.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: In previous chapters, we’ve queried for strings using exact matches and regular
    expressions, but these techniques have some limitations. Searching a large block
    of text for a regular expression is slow, and it’s tough to take morphology (e.g.,
    that “entry” should match “entries”) and other challenges presented by human language
    into account. `text` indexes give you the ability to search text quickly and provide
    support for common search engine requirements such as language-appropriate tokenization,
    stop words, and stemming.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`text` indexes require a number of keys proportional to the words in the fields
    being indexed. As a consequence, creating a `text` index can consume a large amount
    of system resources. You should create such an index at a time when it will not
    negatively impact the performance of your application for users or build the index
    in the background, if possible. To ensure good performance, as with all indexes,
    you should also take care that any `text` index you create fits in RAM. See [Chapter 19](ch19.xhtml#chapter-data-admin)
    for more information on creating indexes with minimal impact on your application.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Writes to a collection require that all indexes are updated. If you are using
    text search, strings will be tokenized and stemmed and the index updated in, potentially,
    many places. For this reason, writes involving `text` indexes are usually more
    expensive than writes to single-field, compound, or even multikey indexes. Thus,
    you will tend to see poorer write performance on `text`-indexed collections than
    on others. They will also slow down data movement if you are sharding: all text
    must be reindexed when it is migrated to a new shard.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Text Index
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we have a collection of Wikipedia articles that we want to index. To
    run a search over the text, we first need to create a `text` index. The following
    call to `createIndex` will create the index based on the terms in both the `"title"`
    and `"body"` fields:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is not like a “normal” compound index where there is an ordering on the
    keys. By default, each field is given equal consideration in a `text` index. You
    can control the relative importance MongoDB attaches to each field by specifying
    weights:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This would weight the `"title"` field at a ratio of 3:2 in comparison to the
    `"body"` field.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: You cannot change field weights after index creation (without dropping the index
    and recreating it), so you may want to play with weights on a sample dataset before
    creating the index on your production data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'For some collections, you may not know which fields a document will contain.
    You can create a full-text index on all string fields in a document by creating
    an index on `"$**"`—this not only indexes all top-level string fields, but also
    searches embedded documents and arrays for string fields:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Text Search
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `"$text"` query operator to perform text searches on a collection with
    a `text` index. `"$text"` will tokenize the search string using whitespace and
    most punctuation as delimiters, and perform a logical OR of all such tokens in
    the search string. For example, you could use the following query to find all
    articles containing any of the terms “impact,” “crater,” or “lunar.” Note that
    because our index is based on terms in both the title and body of an article,
    this query will match documents in which those terms are found in either field.
    For the purposes of this example, we will project the title so that we can fit
    more results on the page:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can see that the results with our initial query are not terribly relevant.
    As with all technologies, it’s important to have a good grasp of how `text` indexes
    work in MongoDB in order to use them effectively. In this case, there are two
    problems with the way we’ve issued the query. The first is that our query is pretty
    broad, given that MongoDB issues the query using a logical OR of “impact,” “crater,”
    and “lunar.” The second problem is that, by default, a text search does not sort
    the results by relevance.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'We can begin to address the problem of the query itself by using a phrase in
    our query. You can search for exact phrases by wrapping them in double quotes.
    For example, the following will find all documents containing the phrase “impact
    crater.” Possibly surprising is that MongoDB will issue this query as “impact
    crater” AND “lunar”:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To make sure the semantics of this are clear, let’s look at an expanded example.
    For the following query, MongoDB will issue the query as “impact crater” AND (“lunar”
    OR “meteor”). MongoDB performs a logical AND of the phrase with the individual
    terms in the search string and a logical OR of the individual terms with one another:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you want to issue a logical AND between individual terms in a query, treat
    each term as a phrase by wrapping it in quotes. The following query will return
    documents containing “impact crater” AND “lunar” AND “meteor”:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now that you have a better understanding of using phrases and logical ANDs in
    your queries, let’s return to the problem of the results not being sorted by relevance.
    While the preceding results are certainly relevant, this is mostly due to the
    fairly strict query we’ve issued. We can do better by sorting for relevance.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Text queries cause some metadata to be associated with each query result. The
    metadata is not displayed in the query results unless we explicitly project it
    using the `$meta` operator. So, in addition to the title, we will project the
    relevance score calculated for each document. The relevance score is stored in
    the metadata field named `"textScore"`. For this example, we’ll return to our
    query of “impact crater” AND “lunar”:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now you can see the relevance score projected with the title for each result.
    Note that they are not sorted. To sort the results in order of relevance score,
    we must add a call to `sort`, again using `$meta` to specify the `"textScore"`
    field value. Note that we must use the same field name in our sort as we used
    in our projection. In this case, we used the field name `"score"` for the relevance
    score value displayed in our search results. As you can see, the results are now
    sorted in decreasing order of relevance:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Text search is also available in the aggregation pipeline. We discuss the aggregation
    pipeline in [Chapter 7](ch07.xhtml#chapter_d1e6036).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing Full-Text Search
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a couple of ways to optimize full-text searches. If you can first
    narrow your search results by other criteria, you can create a compound index
    with a prefix of those criteria and then the full-text fields:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is referred to as *partitioning* the full-text index, as it breaks it into
    several smaller trees based on `"date"` (in this example). This makes full-text
    searches for a specific date or date range much faster.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use a postfix of other criteria to cover queries with the index.
    For example, if we were only returning the `"author"` and `"post"` fields, we
    could create a compound index on both:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'These prefix and postfix forms can be combined:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Searching in Other Languages
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a document is inserted (or the index is first created), MongoDB looks at
    the index’s fields and stems each word, reducing it to an essential unit. However,
    different languages stem words in different ways, so you must specify what language
    the index or document is in. `text` indexes allow a `"default_language"` option
    to be specified, which defaults to `"english"` but can be set to a number of other
    languages (see the [online documentation](https://oreil.ly/eUt0Z) for an up-to-date
    list).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to create a French-language index, we could say:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then French would be used for stemming, unless otherwise specified. You can,
    on a per-document basis, specify another stemming language by having a `"language"`
    field that describes the document’s language:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Capped Collections
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “Normal” collections in MongoDB are created dynamically and automatically grow
    in size to fit additional data. MongoDB also supports a different type of collection,
    called a *capped collection*, which is created in advance and is fixed in size
    (see [Figure 6-4](#figure_d1e7559)).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mdb3_0604.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 6-4\. New documents are inserted at the end of the queue
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Having fixed-size collections brings up an interesting question: what happens
    when we try to insert into a capped collection that is already full? The answer
    is that capped collections behave like circular queues: if we’re out of space,
    the oldest document will be deleted, and the new one will take its place (see
    [Figure 6-5](#figure_d1e7572)). This means that capped collections automatically
    age out the oldest documents as new documents are inserted.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Certain operations are not allowed on capped collections. Documents cannot be
    removed or deleted (aside from the automatic age-out described earlier), and updates
    that would cause documents to grow in size are disallowed. By preventing these
    two operations, we guarantee that documents in a capped collection are stored
    in insertion order and that there is no need to maintain a free list for space
    from removed documents.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mdb3_0605.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: Figure 6-5\. When the queue is full, the oldest element will be replaced by
    the newest
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Capped collections have a different access pattern than most MongoDB collections:
    data is written sequentially over a fixed section of disk. This makes them tend
    to perform writes quickly on spinning disks, especially if they can be given their
    own disk (so as not to be “interrupted” by other collections’ random writes).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: In general, MongoDB TTL indexes are recommended over capped collections because
    they perform better with the WiredTiger storage engine. TTL indexes expire and
    remove data from normal collections based on the value of a date-typed field and
    a TTL value for the index. These are covered in more depth later in this chapter.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-189
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Capped collections cannot be sharded. If an update or a replacement operation
    changes the document size in a capped collection, the operation will fail.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Capped collections tend to be useful for logging, although they lack flexibility:
    you cannot control when data ages out, other than setting a size when you create
    the collection.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Creating Capped Collections
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike normal collections, capped collections must be explicitly created before
    they are used. To create a capped collection, use the `create` command. From the
    shell, this can be done using `createCollection`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The previous command creates a capped collection, *my_collection*, that has
    a fixed size of 100,000 bytes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '`createCollection` can also specify a limit on the number of documents in a
    capped collection:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You could use this to keep, say, the latest 10 news articles or limit a user
    to 1,000 documents.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Once a capped collection has been created, it cannot be changed (it must be
    dropped and recreated if you wish to change its properties). Thus, you should
    think carefully about the size of a large collection before creating it.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-200
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'When limiting the number of documents in a capped collection, you must specify
    a size limit as well. Age-out will be based on whichever limit is reached first:
    it can neither hold more than `"max"` documents nor take up more than `"size"`
    space.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option for creating a capped collection is to convert an existing regular
    collection into a capped collection. This can be done using the `convertToCapped`
    command—in the following example, we convert the *test* collection to a capped
    collection of 10,000 bytes:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: There is no way to “uncap” a capped collection (other than dropping it).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Tailable Cursors
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tailable cursors are a special type of cursor that are not closed when their
    results are exhausted. They were inspired by the `tail -f` command and, similar
    to that command, will continue fetching output for as long as possible. Because
    the cursors do not die when they run out of results, they can continue to fetch
    new results as documents are added to the collection. Tailable cursors can be
    used only on capped collections, since insert order is not tracked for normal
    collections. For the vast majority of uses, change streams, covered in [Chapter 16](ch16.xhtml#chapter-shardkey),
    are recommended over tailable cursors as they offer vastly more control and configuration
    plus they work with normal collections.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Tailable cursors are often used for processing documents as they are inserted
    onto a “work queue” (the capped collection). Because tailable cursors will time
    out after 10 minutes of no results, it is important to include logic to requery
    the collection if they die. The *mongo* shell does not allow you to use tailable
    cursors, but using one in PHP looks something like the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The cursor will process results or wait for more results to arrive until it
    times out or someone kills the query operation.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Time-To-Live Indexes
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, capped collections give you limited control
    over when their contents are overwritten. If you need a more flexible age-out
    system, TTL indexes allow you to set a timeout for each document. When a document
    reaches a preconfigured age, it will be deleted. This type of index is useful
    for caching use cases such as session storage.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a TTL index by specifying the `"expireAfterSeconds"` option
    in the second argument to `createIndex`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This creates a TTL index on the `"lastUpdated"` field. If a document’s `"lastUpdated"`
    field exists and is a date, the document will be removed once the server time
    is `"expireAfterSeconds"` seconds ahead of the document’s time.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: To prevent an active session from being removed, you can update the `"lastUpdated"`
    field to the current time whenever there is activity. Once `"lastUpdated"` is
    24 hours old, the document will be removed.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB sweeps the TTL index once per minute, so you should not depend on to-the-second
    granularity. You can change the `"expireAfterSeconds"` using the `collMod` command:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You can have multiple TTL indexes on a given collection. They cannot be compound
    indexes but can be used like “normal” indexes for the purposes of sorting and
    query optimization.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Storing Files with GridFS
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GridFS is a mechanism for storing large binary files in MongoDB. There are
    several reasons why you might consider using GridFS for file storage:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Using GridFS can simplify your stack. If you’re already using MongoDB, you might
    be able to use GridFS instead of a separate tool for file storage.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GridFS will leverage any existing replication or autosharding that you’ve set
    up for MongoDB, so getting failover and scale-out for file storage is easier.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GridFS can alleviate some of the issues that certain filesystems can exhibit
    when being used to store user uploads. For example, GridFS does not have issues
    with storing large numbers of files in the same directory.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are some downsides, too:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Performance is slower. Accessing files from MongoDB will not be as fast as going
    directly through the filesystem.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can only modify documents by deleting them and resaving the whole thing.
    MongoDB stores files as multiple documents, so it cannot lock all of the chunks
    in a file at the same time.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GridFS is generally best when you have large files you’ll be accessing in a
    sequential fashion that won’t be changing much.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting Started with GridFS: mongofiles'
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to try out GridFS is by using the *mongofiles* utility. *mongofiles*
    is included with all MongoDB distributions and can be used to upload, download,
    list, search for, or delete files in GridFS.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: As with any of the other command-line tools, run `mongofiles --help` to see
    the options available for *mongofiles*.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'The following session shows how to use *mongofiles* to upload a file from the
    filesystem to GridFS, list all of the files in GridFS, and download a file that
    we’ve previously uploaded:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the previous example, we perform three basic operations using *mongofiles*:
    `put`, `list`, and `get`. The `put` operation takes a file in the filesystem and
    adds it to GridFS. `list` will list any files that have been added to GridFS.
    `get` does the inverse of `put`: it takes a file from GridFS and writes it to
    the filesystem. *mongofiles* also supports two other operations: `search` for
    finding files in GridFS by filename and `delete` for removing a file from GridFS.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Working with GridFS from the MongoDB Drivers
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the client libraries have GridFS APIs. For example, with PyMongo (the Python
    driver for MongoDB) you can perform the same series of operations (this assumes
    Python 3 and a locally running *mongod* on port 27017) as we did with *mongofiles*
    as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The API for working with GridFS from PyMongo is very similar to that of *mongofiles*:
    you can easily perform the basic `put`, `get`, and `list` operations. Almost all
    the MongoDB drivers follow this basic pattern for working with GridFS, while often
    exposing more advanced functionality as well. For driver-specific information
    on GridFS, please check out the documentation for the specific driver you’re using.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Under the Hood
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GridFS is a lightweight specification for storing files that is built on top
    of normal MongoDB documents. The MongoDB server actually does almost nothing to
    “special-case” the handling of GridFS requests; all the work is handled by the
    client-side drivers and tools.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea behind GridFS is that we can store large files by splitting them
    up into *chunks* and storing each chunk as a separate document. Because MongoDB
    supports storing binary data in documents, we can keep the storage overhead for
    chunks to a minimum. In addition to storing each chunk of a file, we store a single
    document that groups the chunks together and contains metadata about the file.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'The chunks for GridFS are stored in their own collection. By default chunks
    will use the collection *fs.chunks*, but this can be overridden. Within the chunks
    collection the structure of the individual documents is pretty simple:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Like any other MongoDB document, a chunk has its own unique `"_id"`. In addition,
    it has a couple of other keys:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '`"files_id"`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: The `"_id"` of the file document that contains the metadata for the file this
    chunk is from
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '`"n"`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: The chunk’s position in the file, relative to the other chunks
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '`"data"`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: The bytes in this chunk of the file
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'The metadata for each file is stored in a separate collection, which defaults
    to *fs.files*. Each document in the files collection represents a single file
    in GridFS and can contain any custom metadata that should be associated with that
    file. In addition to any user-defined keys, there are a couple of keys that are
    mandated by the GridFS specification:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`"_id"`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: A unique ID for the file—this is what will be stored in each chunk as the value
    for the `"files_id"` key.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '`"length"`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: The total number of bytes making up the content of the file.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '`"chunkSize"`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The size of each chunk comprising the file, in bytes. The default is 255 KB,
    but this can be adjusted if needed.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`"uploadDate"`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: A timestamp representing when this file was stored in GridFS.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '`"md5"`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: An MD5 checksum of this file’s contents, generated on the server side.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Of all the required keys, perhaps the most interesting (or least self-explanatory)
    is `"md5"`. The value for `"md5"` is generated by the MongoDB server using the
    `filemd5` command, which computes the MD5 checksum of the uploaded chunks. This
    means that users can check the value of the `"md5"` key to ensure that a file
    was uploaded correctly.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned previously, you are not limited to the required fields in *fs.files*:
    feel free to keep any other file metadata in this collection as well. You might
    want to keep information such as download count, MIME type, or user rating with
    a file’s metadata.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you understand the underlying GridFS specification, it becomes trivial
    to implement features that the driver you’re using might not provide helpers for.
    For example, you can use the `distinct` command to get a list of unique filenames
    stored in GridFS:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This allows your application a great deal of flexibility in loading and collecting
    information about files. We’ll change direction slightly in the next chapter,
    as we introduce the aggregation framework. It offers a range of data analytic
    tools to process the data in your database.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得您的应用程序在加载和收集文件信息时具有很大的灵活性。在接下来的一章中，我们将稍作调整，介绍聚合框架。它提供了一系列数据分析工具，用于处理数据库中的数据。
