- en: Appendix B. If You Use a Different Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes your login shell is `bash`, but if it’s not, [Table B-1](#table_shells)
    may help you adapt the book’s examples for other shells. The checkmark symbol
    ✓ indicates compatibility—the given feature is similar enough to `bash`’s that
    examples in the book should run correctly. However, the feature’s behavior may
    differ from `bash`’s in other ways. Read any footnotes carefully.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Regardless of which shell is your login shell, scripts that begin with `#!/bin/bash`
    are processed by `bash`.
  prefs: []
  type: TYPE_NORMAL
- en: To experiment with another shell installed on your system, simply run it by
    name (e.g., `ksh`) and press Ctrl-D when finished. To change your login shell,
    read `man chsh`.
  prefs: []
  type: TYPE_NORMAL
- en: Table B-1\. `bash` features supported by other shells, in alphabetical order
  prefs: []
  type: TYPE_NORMAL
- en: '| bash feature | dash | fish | ksh | tcsh | zsh |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `alias` builtin | ✓ | ✓, but `alias` *`name`* does not print the alias |
    ✓ | No equals sign: `alias g grep` | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Backgrounding with `&` | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `bash -c` | `dash -c` | `fish -c` | `ksh -c` | `tcsh -c` | `zsh -c` |'
  prefs: []
  type: TYPE_TB
- en: '| `bash` command | `dash` | `fish` | `ksh` | `tcsh` | `zsh` |'
  prefs: []
  type: TYPE_TB
- en: '| `bash` location in */bin/bash* | */bin/dash* | */bin/fish* | */bin/ksh* |
    */bin/tcsh* | */bin/zsh* |'
  prefs: []
  type: TYPE_TB
- en: '| `BASH_SUBSHELL` variable |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Brace expansion with `{}` | Use `seq` | Only `{a,b,c}`, not `{a..c}` | ✓
    | Use `seq` | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `cd -` (toggling directories) | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `cd` builtin | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `CDPATH` variable | ✓ | `set CDPATH` *`value`* | ✓ | `set cdpath =` (*`dir1
    dir2 …`*`)` | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Command substitution with `$()` | ✓ | Use `()` | ✓ | Use backquotes | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Command substitution with backquotes | ✓ | Use `()` | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Command-line editing with arrow keys |  | ✓ | ✓^([a](app02.xhtml#cle)) |
    ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Command-line editing with Emacs keys |  | ✓ | ✓^([a](app02.xhtml#cle)) |
    ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Command-line editing with Vim keys with `set -o vi` |  |  | ✓ | Run `bindkey
    -v` | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `complete` builtin |  | different syntax^([b](app02.xhtml#complete)) | different
    syntax^([b](app02.xhtml#complete)) | different syntax^([b](app02.xhtml#complete))
    | `compdef`^([b](app02.xhtml#complete)) |'
  prefs: []
  type: TYPE_TB
- en: '| Conditional lists with `&&` and `&#124;&#124;` | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Configuration files in `$HOME` (read manpage for details) | *.profile* |
    *.config/fish/config.fish* | *.profile*, *.kshrc* | *.cshrc* | *.zshenv*, *.zprofile*,
    *.zshrc*, *.zlogin*, *.zlogout* |'
  prefs: []
  type: TYPE_TB
- en: '| Control structures: `for` loops, `if` statements, etc. | ✓ | different syntax
    | ✓ | different syntax | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `dirs` builtin |  | ✓ |  | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `echo` builtin | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Escape alias with `\` | ✓ |  | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Escape with `\` | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `exec` builtin | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Exit code with `$?` | ✓ | `$status` | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `export` builtin | ✓ | `set -x` *`name value`* | ✓ | `setenv` *`name value`*
    | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Functions | ✓^([c](app02.xhtml#idm46586635362048)) | different syntax | ✓
    |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `HISTCONTROL` variable |  |  |  |  | See variables with names beginning in
    `HIST_` on the manpage |'
  prefs: []
  type: TYPE_TB
- en: '| `HISTFILE` variable |  | `set` `fish_history` *`path`* | ✓ | `set` `histfile`
    `=` *`path`* | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `HISTFILESIZE` variable |  |  |  | `set` `savehist` `=` *`value`* | +SAVEHIST
    |'
  prefs: []
  type: TYPE_TB
- en: '| `history` builtin |  | ✓, but commands are not numbered | `history` is an
    alias for `hist` `-l` | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `history -c` |  | `history clear` | Delete *~/.sh_history* and restart `ksh`
    | ✓ | `history` `-p` |'
  prefs: []
  type: TYPE_TB
- en: '| History expansion with `!` and `^` |  |  |  | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| History incremental search with Ctrl-R |  | Type beginning of command, then
    press up arrow to search, right arrow to select | ✓^([a](app02.xhtml#cle)) ^([d](app02.xhtml#idm46586635324032))
    | ✓^([e](app02.xhtml#idm46586635322480)) | ✓^([f](app02.xhtml#idm46586635319472))
    |'
  prefs: []
  type: TYPE_TB
- en: '| `history` *`number`* |  | `history` `-`*`number`* | `history -N` *`number`*
    | ✓ | `history` `-*number*` |'
  prefs: []
  type: TYPE_TB
- en: '| History with arrow keys |  | ✓ | ✓^([a](app02.xhtml#cle)) | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| History with Emacs keys |  | ✓ | ✓^([a](app02.xhtml#cle)) | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| History with Vim keys with `set -o vi` |  |  | ✓ | Run `bindkey -v` | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `HISTSIZE` variable |  |  | ✓ |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Job control with `fg`, `bg`, Ctrl-Z, `jobs` | ✓ | ✓ | ✓ | ✓^([g](app02.xhtml#idm46586635288896))
    | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Pattern matching with `*`, `?`, `[]` | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Pipes | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `popd` builtin |  | ✓ |  | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Process substitution with `<()` |  |  | ✓ |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `PS1` variable | ✓ | `set PS1` *`value`* | ✓ | `set prompt =` *`value`* |
    ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `pushd` builtin |  | ✓ |  | ✓, but no negative arguments | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Quotes, double | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Quotes, single | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Redirection of stderr (`2>`) | ✓ | ✓ | ✓ |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Redirection of stdin (`<`), stdout (`>`, `>>`) | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Redirection of stdout + stderr (`&>`) | Append `2>&1`^([h](app02.xhtml#stdouterr))
    | ✓ | Append `2>&1`^([h](app02.xhtml#stdouterr)) | `>&` | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Sourcing a file with `source` or `.` (dot) | dot only^([i](app02.xhtml#sourcing))
    | ✓ | ✓^([i](app02.xhtml#sourcing)) | `source` only | ✓^([i](app02.xhtml#sourcing))
    |'
  prefs: []
  type: TYPE_TB
- en: '| Subshell with `()` | ✓ |  | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Tab completion for filenames |  | ✓ | ✓^([a](app02.xhtml#cle)) | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `type` builtin | ✓ | ✓ | `type` is an alias for `whence -v` | No, but `which`
    is a builtin | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `unalias` builtin | ✓ | `functions` `--erase` | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Variable definition with `name=value` | ✓ | `set` *`name value`* | ✓ | `set`
    *`name`* `=` *`value`* | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Variable evaluation with `$name` | ✓ | ✓ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](app02.xhtml#cle-marker)) This feature is disabled by default. Run `set
    -o emacs` to enable it. Older versions of `ksh` may behave differently.^([b](app02.xhtml#complete-marker))
    Custom command completion, using the `complete` command or similar, differs significantly
    from shell to shell; read the shell’s manpage.^([c](app02.xhtml#idm46586635362048-marker))
    Functions: This shell does not support newer-style definitions that begin with
    the `function` keyword.^([d](app02.xhtml#idm46586635324032-marker)) Incremental
    search of history works differently in `ksh`. Press Ctrl-R, type a string, and
    press Enter to recall the most recent command containing that string. Press Ctrl-R
    and Enter again to search backward for the next matching command, and so on. Press
    Enter to execute.^([e](app02.xhtml#idm46586635322480-marker)) To enable incremental
    history search with Ctrl-R in `tcsh`, run the command `bindkey ^R i-search-back`
    (and add it to a shell configuration file). The search behavior is a bit different
    from `bash`’s; see `man tcsh`.^([f](app02.xhtml#idm46586635319472-marker)) In
    `vi` mode, type `/` followed by the search string, then press Enter. Press `n`
    to jump to the next search result.^([g](app02.xhtml#idm46586635288896-marker))
    Job control: `tcsh` does not track the default job number as intelligently as
    other shells, so you may need to supply the job number, such as `%1`, as an argument
    to `fg` and `bg` more often.^([h](app02.xhtml#stdouterr-marker)) Redirection of
    stdout and stderr: The syntax in this shell is: *`command`* `>` *`file`* `2>&1`.
    The final term `2>&1` means “redirect stderr, which is file descriptor 2, to stdout,
    which is file descriptor 1.”^([i](app02.xhtml#sourcing-marker)) Sourcing in this
    shell requires an explicit path to the sourced file, such as `./myfile` for a
    file in the current directory, or the shell won’t locate the file. Alternatively,
    place the file into a directory in the shell’s search path. |'
  prefs: []
  type: TYPE_TB
