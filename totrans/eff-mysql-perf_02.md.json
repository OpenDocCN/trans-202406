["```\nCREATE TABLE `elem` (\n  `id` int unsigned NOT NULL,\n  `a` char(2) NOT NULL,\n  `b` char(2) NOT NULL,\n  `c` char(2) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_a_b` (`a`,`b`)\n) ENGINE=InnoDB;\n\n+----+------+------+------+\n| id | a    | b    | c    |\n+----+------+------+------+\n|  1 | Ag   | B    | C    |\n|  2 | Au   | Be   | Co   |\n|  3 | Al   | Br   | Cr   |\n|  4 | Ar   | Br   | Cd   |\n|  5 | Ar   | Br   | C    |\n|  6 | Ag   | B    | Co   |\n|  7 | At   | Bi   | Ce   |\n|  8 | Al   | B    | C    |\n|  9 | Al   | B    | Cd   |\n| 10 | Ar   | B    | Cd   |\n+----+------+------+------+\n```", "```\nEXPLAIN SELECT * FROM elem WHERE id = 1\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 4\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n```", "```\nEXPLAIN SELECT * FROM elem WHERE id = 1\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 4\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n```", "```\nEXPLAIN SELECT * FROM elem WHERE id > 3 AND id < 6 AND c = 'Cd'\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: range\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 4\n>         ref: NULL\n>        rows: 2\n     filtered: 10.00\n>       Extra: Using where\n```", "```\n+----+------+------+------+\n| id | a    | b    | c    |\n+----+------+------+------+\n|  4 | Ar   | Br   | Cd   |\n+----+------+------+------+\n```", "```\nEXPLAIN SELECT * FROM elem WHERE a = 'Au'\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: ref\npossible_keys: idx_a_b\n>         key: idx_a_b\n      key_len: 3\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\nEXPLAIN SELECT * FROM elem WHERE a = 'Au' AND b = 'Be'\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: ref\npossible_keys: idx_a_b\n>         key: idx_a_b\n      key_len: 6\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n```", "```\nEXPLAIN SELECT * FROM elem WHERE a = 'Al' AND c = 'Co'\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: ref\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 3\n          ref: const\n>        rows: 3\n     filtered: 10.00\n>       Extra: Using where\n```", "```\nEXPLAIN SELECT * FROM elem WHERE b = 'Be'\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: ALL\npossible_keys: NULL\n>         key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 10\n     filtered: 10.00\n        Extra: Using where\n```", "```\nSELECT a, b FROM elem ORDER BY a, b;\n\n+------+------+\n| a    | b    |\n+------+------+\n| Ag   | B    | -- Ag group\n| Ag   | B    |\n\n| Al   | B    | -- Al group\n| Al   | B    |\n| Al   | Br   |\n\n| Ar   | B    | -- Ar group\n| Ar   | Br   |\n| Ar   | Br   |\n\n| At   | Bi   | -- At group\n\n| Au   | Be   | -- Au group\n+------+------+\n```", "```\nEXPLAIN SELECT a, COUNT(*) FROM elem GROUP BY a\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: index\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 6\n          ref: NULL\n         rows: 10\n     filtered: 100.00\n>       Extra: Using index\n```", "```\nEXPLAIN SELECT a, COUNT(a) FROM elem WHERE a != 'Ar' GROUP BY a\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: range\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 3\n          ref: NULL\n         rows: 7\n     filtered: 100.00\n>       Extra: Using where; Using index\n```", "```\nEXPLAIN SELECT a, b FROM elem WHERE b = 'B' GROUP BY a\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: range\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 6\n          ref: NULL\n         rows: 6\n     filtered: 100.00\n>       Extra: Using where; Using index for group-by\n```", "```\nEXPLAIN SELECT b, COUNT(*) FROM elem GROUP BY b\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n>        type: index\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 6\n          ref: NULL\n         rows: 10\n     filtered: 100.00\n>       Extra: Using index; Using temporary\n```", "```\nEXPLAIN SELECT a, b FROM elem WHERE a = 'Ar' ORDER BY b\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: ref\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 3\n          ref: const\n         rows: 3\n     filtered: 100.00\n        Extra: Using index\n```", "```\n+------+------+\n| a    | b    |\n+------+------+\n| Ar   | B    |\n| Ar   | Br   |\n| Ar   | Br   |\n+------+------+\n```", "```\nEXPLAIN SELECT * FROM elem WHERE a = 'Al' AND b = 'B' ORDER BY id\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: ref\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 16\n          ref: const,const\n         rows: 2\n     filtered: 100.00\n>       Extra: Using index condition\n```", "```\nEXPLAIN SELECT * FROM elem WHERE a = 'Al' ORDER BY id\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: ref\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 8\n          ref: const\n         rows: 3\n     filtered: 100.00\n>       Extra: Using index condition; Using filesort\n```", "```\nCREATE TABLE `sbtest1` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `k` int NOT NULL DEFAULT '0',\n  `c` char(120) NOT NULL DEFAULT '',\n  `pad` char(60) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`),\n  KEY `k_1` (`k`)\n) ENGINE=InnoDB;\n```", "```\nSELECT c FROM sbtest1 WHERE k < 450000 ORDER BY id;\n-- Output omitted\n68439 rows in set (1.15 sec)\n```", "```\nEXPLAIN SELECT c FROM sbtest1 WHERE k < 450000 ORDER BY id\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: sbtest1\n   partitions: NULL\n         type: range\npossible_keys: k_1\n          key: k_1\n      key_len: 4\n          ref: NULL\n         rows: 133168\n     filtered: 100.00\n        Extra: Using index condition; Using MRR; Using filesort\n```", "```\nEXPLAIN ANALYZE SELECT c FROM sbtest1 WHERE k < 450000 ORDER BY id\\G\n\n*************************** 1\\. row ***************************\n1 -> Sort: sbtest1.id  (cost=83975.47 rows=133168)\n2    (actual time=1221.170..1229.306 rows=68439 loops=1)\n3    -> Index range scan on sbtest1 using k_1, with index condition: (k<450000)\n4       (cost=83975.47 rows=133168) (actual time=40.916..1174.981 rows=68439)\n```", "```\nCREATE TABLE `elem_names` (\n  `symbol` char(2) NOT NULL,\n  `name` varchar(16) DEFAULT NULL,\n  PRIMARY KEY (`symbol`)\n) ENGINE=InnoDB;\n\n+--------+-----------+\n| symbol | name      |\n+--------+-----------+\n| Ag     | Silver    |\n| Al     | Aluminum  |\n| Ar     | Argon     |\n| At     | Astatine  |\n| Au     | Gold      |\n| B      | Boron     |\n| Be     | Beryllium |\n| Bi     | Bismuth   |\n| Br     | Bromine   |\n| C      | Carbon    |\n| Cd     | Cadmium   |\n| Ce     | Cerium    |\n| Co     | Cobalt    |\n| Cr     | Chromium  |\n+--------+-----------+\n```", "```\nEXPLAIN SELECT name\n        FROM elem JOIN elem_names ON (elem.a = elem_names.symbol)\n        WHERE a IN ('Ag', 'Au', 'At')\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: range\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 3\n          ref: NULL\n         rows: 4\n     filtered: 100.00\n        Extra: Using where; Using index\n*************************** 2\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem_names\n   partitions: NULL\n>        type: eq_ref\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 2\n>         ref: test.elem.a\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n```", "```\n/* select#1 */ select\n  `test`.`elem_names`.`name` AS `name`\nfrom\n       `test`.`elem`\n  join `test`.`elem_names`\nwhere\n      ((`test`.`elem_names`.`symbol` = `test`.`elem`.`a`)\n  and (`test`.`elem`.`a` in ('Ag','Au','At')))\n```", "```\nEXPLAIN SELECT name\n        FROM elem JOIN elem_names ON (elem.a = elem_names.symbol)\n        WHERE a IN ('Ag', 'Au')\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem_names\n   partitions: NULL\n         type: range\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 2\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where\n*************************** 2\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: ref\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 3\n          ref: test.elem_names.symbol\n         rows: 2\n     filtered: 100.00\n        Extra: Using index\n```", "```\n/* select#1 */ select\n  `test`.`elem_names`.`name` AS `name`\nfrom\n  `test`.`elem` join `test`.`elem_names`\nwhere\n      ((`test`.`elem`.`a` = `test`.`elem_names`.`symbol`)\n  and (`test`.`elem_names`.`symbol` in ('Ag','Au')))\n```", "```\nEXPLAIN SELECT name\n        FROM elem STRAIGHT_JOIN elem_names IGNORE INDEX (PRIMARY)\n          ON (elem.a = elem_names.symbol)\\G\n\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem\n   partitions: NULL\n         type: index\npossible_keys: idx_a_b\n          key: idx_a_b\n      key_len: 6\n          ref: NULL\n         rows: 10\n     filtered: 100.00\n        Extra: Using index\n*************************** 2\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: elem_names\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 14\n     filtered: 7.14\n        Extra: Using where; Using join buffer (hash join)\n```", "```\nSELECT * FROM sys.schema_unused_indexes\nWHERE object_schema NOT IN ('performance_schema');\n```", "```\nFROM\n  t1 JOIN t2 ON t1.A = t2.B\n     JOIN t3 ON t2.B = t3.C\n```", "```\nfunc find_rows(table, index, conditions) []rows {\n    // Return array of rows in table matching conditions,\n    // using index for lookup or table scan if NULL\n}\n\nforeach find_rows(t1, some_index, \"WHERE ...\") {\n    foreach find_rows(t2, index_on_B, \"WHERE B = <t1.A>\") {\n        return find_rows(t3, NULL, \"WHERE C = <t2.B>\")\n    }\n}\n```", "```\n# ####################################################################\n# db_name.table_name\n# ####################################################################\n\n# idx_a is a left-prefix of idx_a_b\n# Key definitions:\n#   KEY `idx_a` (`a`),\n#   KEY `idx_a_b` (`a`,`b`)\n# Column types:\n#         `a` int(11) default null\n#         `b` int(11) default null\n# To remove this duplicate index, execute:\nALTER TABLE `db_name`.`table_name` DROP INDEX `idx_a`;\n```"]