["```\nfunction a() { b(); }\nfunction b() { c(); }\nfunction c() { /**/ }\n\nfunction x() { y(); }\nfunction y() { z(); }\nfunction z() { /**/ }\n\nsetTimeout(x, 0);\na();\n```", "```\n#!/usr/bin/env node \nconst fs = require('fs');\n\nfs.readFile('/etc/passwd', ![1](assets/1.png)\n  (err, data) => { ![4](assets/4.png)\n    if (err) throw err;\n    console.log(data);\n});\n\nsetImmediate( ![2](assets/2.png)\n  () => { ![3](assets/3.png)\n    console.log('This runs while file is being read');\n});\n```", "```\nconsole.log('Print, then exit');\n```", "```\nsetInterval(() => {\n  console.log('Process will run forever');\n}, 1_000);\n```", "```\nconst t1 = setTimeout(() => {}, 1_000_000); ![1](assets/1.png)\nconst t2 = setTimeout(() => {}, 2_000_000); ![2](assets/2.png)\n// ... t1.unref(); ![3](assets/3.png)\n// ... clearTimeout(t2); ![4](assets/4.png)\n```", "```\nconst fs = require('fs');\n\nsetImmediate(() => console.log(1));\nPromise.resolve().then(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nfs.readFile(__filename, () => {\n  console.log(4);\n  setTimeout(() => console.log(5));\n  setImmediate(() => console.log(6));\n  process.nextTick(() => console.log(7));\n});\nconsole.log(8);\n```", "```\nconst sleep_st = (t) => new Promise((r) => setTimeout(r, t));\nconst sleep_im = () => new Promise((r) => setImmediate(r));\n\n(async () => {\n  setImmediate(() => console.log(1));\n  console.log(2);\n  await sleep_st(0);\n  setImmediate(() => console.log(3));\n  console.log(4);\n  await sleep_im();\n  setImmediate(() => console.log(5));\n  console.log(6);\n  await 1;\n  setImmediate(() => console.log(7));\n  console.log(8);\n})();\n```", "```\nsetImmediate(() => console.log(1));\nconsole.log(2);\nPromise.resolve().then(() => setTimeout(() => {\n  setImmediate(() => console.log(3));\n  console.log(4);\n  Promise.resolve().then(() => setImmediate(() => {\n    setImmediate(() => console.log(5));\n    console.log(6);\n    Promise.resolve().then(() => {\n      setImmediate(() => console.log(7));\n      console.log(8);\n    });\n  }));\n}, 0));\n```", "```\nconst nt_recursive = () => process.nextTick(nt_recursive);\nnt_recursive(); // setInterval will never run\n\nconst si_recursive = () => setImmediate(si_recursive);\nsi_recursive(); // setInterval will run\n\nsetInterval(() => console.log('hi'), 10);\n```", "```\n// Antipattern\nfunction foo(count, callback) {\n  if (count <= 0) {\n    return callback(new TypeError('count > 0'));\n  }\n  myAsyncOperation(count, callback);\n}\n```", "```\nfunction foo(count, callback) {\n  if (count <= 0) {\n    return process.nextTick(() => callback(new TypeError('count > 0')));\n  }\n  myAsyncOperation(count, callback);\n}\n```", "```\nlet bar = false;\nfoo(3, () => {\n  assert(bar);\n});\nbar = true;\n```", "```\n$ npm init -y\n```", "```\n#!/usr/bin/env node\n\n// npm install fastify@3.2\nconst server = require('fastify')();\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 4000;\n\nconsole.log(`worker pid=${process.pid}`);\n\nserver.get('/recipes/:id', async (req, reply) => {\n  console.log(`worker request pid=${process.pid}`);\n  const id = Number(req.params.id);\n  if (id !== 42) {\n    reply.statusCode = 404;\n    return { error: 'not_found' };\n  }\n  return {\n    producer_pid: process.pid,\n    recipe: {\n      id, name: \"Chicken Tikka Masala\",\n      steps: \"Throw it in a pot...\",\n      ingredients: [\n        { id: 1, name: \"Chicken\", quantity: \"1 lb\", },\n        { id: 2, name: \"Sauce\", quantity: \"2 cups\", }\n      ]\n    }\n  };\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Producer running at http://${HOST}:${PORT}`);\n});\n```", "```\n$ node recipe-api/producer-http-basic.js # terminal 1\n$ curl http://127.0.0.1:4000/recipes/42  # terminal 2\n```", "```\n{\n  \"producer_pid\": 25765,\n  \"recipe\": {\n    \"id\": 42,\n    \"name\": \"Chicken Tikka Masala\",\n    \"steps\": \"Throw it in a pot...\",\n    \"ingredients\": [\n      { \"id\": 1, \"name\": \"Chicken\", \"quantity\": \"1 lb\" },\n      { \"id\": 2, \"name\": \"Sauce\", \"quantity\": \"2 cups\" }\n    ]\n  }\n}\n```", "```\n#!/usr/bin/env node\n\n// npm install fastify@3.2 node-fetch@2.6\nconst server = require('fastify')();\nconst fetch = require('node-fetch');\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\n\nserver.get('/', async () => {\n  const req = await fetch(`http://${TARGET}/recipes/42`);\n  const producer_data = await req.json();\n\n  return {\n    consumer_pid: process.pid,\n    producer_data\n  };\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Consumer running at http://${HOST}:${PORT}/`);\n});\n```", "```\n$ node web-api/consumer-http-basic.js # terminal 1\n$ curl http://127.0.0.1:3000/         # terminal 2\n```", "```\n{\n  \"consumer_pid\": 25670,\n  \"producer_data\": {\n    \"producer_pid\": 25765,\n    \"recipe\": {\n      ...\n    }\n  }\n}\n```"]