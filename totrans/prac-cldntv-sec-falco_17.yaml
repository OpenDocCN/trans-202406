- en: Chapter 13\. Writing Falco Rules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章：编写 Falco 规则
- en: Welcome to [Part IV](part04.xhtml#iv_extending_falco) of the book! Now that
    you’ve learned what Falco is and does ([Part I](part01.xhtml#i_the_basics)), understand
    the intricacies of its architecture ([Part II](part02.xhtml#ii_the_architecture_of_falco)),
    and are a pro at deploying and running it ([Part III](part03.xhtml#iii_running_falco_in_production)),
    it’s time, once more, to step up your game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的[第 IV 部分](part04.xhtml#iv_extending_falco)！现在你已经了解了 Falco 的基本信息和功能（[第
    I 部分](part01.xhtml#i_the_basics)），理解了其架构的复杂性（[第 II 部分](part02.xhtml#ii_the_architecture_of_falco)），并且在部署和运行它方面已经很专业了（[第
    III 部分](part03.xhtml#iii_running_falco_in_production)），现在是时候再次提升你的水平了。
- en: The final part of this book (Chapters [13](#writing_falco_rules) through [15](ch15.xhtml#how_to_contribute))
    is about going beyond what comes out of the box. You will learn how to customize
    Falco for your specific needs and how, if you desire, you can contribute your
    improvements to the project so that the community can benefit from them. This
    is where you get to unleash your creativity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后部分（第 13 章至第 15 章）讨论的是超越默认内容的内容。你将学习如何根据自己的特定需求定制 Falco，以及如何（如果你愿意的话）将你的改进贡献给项目，使整个社区受益。这是释放你创造力的地方。
- en: We’ve already covered rules extensively in the book, in particular in [Chapter 7](ch07.xhtml#falco_rules).
    But you unlock the true power of Falco when you become capable of creating your
    own rules and adapting the existing ones to your environment—which is what we’re
    going to show you how to do here.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中已经广泛讨论了规则，特别是在[第 7 章](ch07.xhtml#falco_rules)中。但是，当你能够创建自己的规则并将现有规则适应你的环境时，你才能解锁
    Falco 的真正力量——这正是我们将在这里向你展示如何做到的。
- en: This chapter assumes you have a good understanding of fields and filters (covered
    in [Chapter 6](ch06.xhtml#fields_and_filters)) and of the basics of rules and
    rules files ([Chapter 7](ch07.xhtml#falco_rules)). If you feel you need a refresher,
    just go back to those chapters. We’ll wait for you here until you’re ready.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你对字段和过滤器有很好的理解（在[第 6 章](ch06.xhtml#fields_and_filters)中介绍），以及规则和规则文件的基础知识（在[第
    7 章](ch07.xhtml#falco_rules)中介绍）。如果你觉得需要恢复记忆，只需回到那些章节。我们会等你准备好的。
- en: Customizing the Default Falco Rules
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制默认的 Falco 规则
- en: 'Although Falco’s default set of rules is rich and constantly expanding, it’s
    not uncommon to encounter situations where those rules require customization.
    Here are some examples:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Falco 的默认规则集是丰富且不断扩展的，但在遇到需要自定义这些规则的情况下并不少见。以下是一些例子：
- en: You want to expand the scope of a rule or increase its coverage.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望扩展某个规则的范围或增加其覆盖范围。
- en: You want to tighten the number of rules that Falco loads to decrease its CPU
    usage.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望缩减 Falco 加载的规则数量，以降低其 CPU 使用率。
- en: You want to reduce alerting noise by controlling a rule’s behavior or adding
    exceptions to it.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望通过控制规则的行为或向其添加异常来减少警报噪声。
- en: Falco offers a framework to accomplish these things without having to fork the
    default rules files and maintain your own copies. [Chapter 7](ch07.xhtml#falco_rules)
    taught you how to replace and append to macros, lists, and rules, as well as how
    to disable rules. This is especially useful since, as you learned in [Chapter 10](ch10.xhtml#configuring_and_running),
    the order in which rules files are loaded is important, and you control that order.
    This means you can change an existing rule in a separate file that is loaded later
    in the initialization chain.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 提供了一个框架，可以在不必分叉默认规则文件并维护自己的副本的情况下完成这些事情。[第 7 章](ch07.xhtml#falco_rules)
    教会了你如何替换和追加宏、列表和规则，以及如何禁用规则。这尤为重要，因为正如你在[第 10 章](ch10.xhtml#configuring_and_running)中学到的那样，规则文件加载的顺序很重要，而你可以控制这个顺序。这意味着你可以在初始化链中后加载的单独文件中更改现有规则。
- en: The default Falco configuration is crafted to take advantage of this mechanism,
    providing two places out of the box where you can customize existing rules without
    touching the default ruleset. The first is *falco_rules.local.yaml*. This file,
    which is initially empty, is loaded after *falco_rules.yaml* and is therefore
    a good place to disable or modify rules in the default ruleset. The second is
    */etc/falco/rules.d*. Falco, by default, loads all the rules files that it finds
    in this directory after loading *falco_rules.yaml* and *falco_rules.local.yaml*.
    This makes it another good place for customizations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Falco配置被设计为利用这种机制，提供了两个可以在不触及默认规则集的情况下定制现有规则的地方。 第一个是*falco_rules.local.yaml*。
    这个文件最初是空的，在加载*falco_rules.yaml*之后加载，因此是禁用或修改默认规则集中规则的好地方。 第二个是*/etc/falco/rules.d*。
    默认情况下，Falco会加载此目录中找到的所有规则文件，在加载*falco_rules.yaml*和*falco_rules.local.yaml*后加载。
    这使其成为另一个进行自定义的好地方。
- en: Writing New Falco Rules
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写作新的Falco规则
- en: At its core, writing a new rule is just a matter of crafting the condition and
    the output, so conceptually it is a very straightforward process. In practice,
    however, there are several factors to take into account. Improvised rule development
    often results in imperfect or even nonfunctional rules. Seasoned Falco users tend
    to develop their own processes for rule writing, and we recommend you do the same.
    What the best process is depends on your setup, target environment, and taste,
    so we won’t be able to offer you absolute prescriptions. Instead, we’ll share
    the way we do it, hoping it can serve as inspiration and guidance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，编写新规则只是制作条件和输出的问题，因此在概念上它是一个非常简单的过程。 然而，在实践中，需要考虑几个因素。 即兴的规则开发通常导致不完善甚至无法使用的规则。
    经验丰富的Falco用户倾向于开发自己的规则编写流程，我们建议您也这样做。 最佳流程取决于您的设置、目标环境和喜好，因此我们无法为您提供绝对的处方。 相反，我们将分享我们的做法，希望它能为您提供灵感和指导。
- en: Our Rule Development Method
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的规则开发方法
- en: 'The method for rule development used by this book’s authors consists of nine
    steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书作者使用的规则开发方法由九个步骤组成：
- en: Replicate the events you want to detect.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制您想要检测的事件。
- en: Capture the events and save them in a trace file.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获事件并将其保存在跟踪文件中。
- en: Craft and test the condition filter with the aid of sysdig.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用sysdig的帮助制作和测试条件过滤器。
- en: Craft and test the output with the aid of sysdig.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用sysdig的帮助来制作和测试输出。
- en: Convert the sysdig command line into a rule.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将sysdig命令行转换为规则。
- en: Validate the rule in Falco.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Falco中验证规则。
- en: Modularize and optimize the rule.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块化和优化规则。
- en: Create a regression.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个回归。
- en: Share the rule with the community.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将规则与社区分享。
- en: In the following sections we’ll expand on each item in this list and provide
    a real-world example, walking you through crafting a new rule that detects attempts
    to create symlinks^([1](ch13.xhtml#ch01fn18)) inside the */proc*, */bin*, and
    */etc* directories. This is, at minimum, strange behavior and could potentially
    indicate fishy activity. Here’s how you would apply our method to build such a
    rule.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将扩展列表中的每一项，并提供一个真实的例子，引导您完成制作一个新规则的过程，该规则检测试图在*/proc*、*/bin*和*/etc*目录内创建符号链接的尝试^([1](ch13.xhtml#ch01fn18))。
    这至少是奇怪的行为，并且可能表明可疑活动。 下面是如何应用我们的方法来构建这样一个规则。
- en: 1\. Replicate the events you want to detect
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 复制您想要检测的事件
- en: 'It’s almost impossible to create a reliable rule without testing and validating
    it, so the first step is to re-create the scenario (or scenarios) that the rule
    should detect. In this case, you want to detect the creation of symlinks in three
    specific directories. You can re-create that scenario from within a terminal using
    the `ln` command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建可靠的规则，几乎不可能没有测试和验证，因此第一步是重新创建规则应该检测到的场景（或场景）。 在这种情况下，您想要检测三个特定目录中的符号链接的创建。
    您可以使用终端中的`ln`命令重新创建该场景：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Capture the events and save them in a trace file
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 捕获事件并将其保存在跟踪文件中
- en: 'Now you can capture the suspicious activity using sysdig. (If you need a refresher
    on sysdig and trace files, go back to [“Observing System Calls”](ch04.xhtml#observing_system_calls).)
    sysdig allows you to easily store the activity in a trace file using the `-w`
    command-line flag. To see how it works, issue this command in a terminal:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用sysdig捕获可疑活动。 （如果您需要sysdig和跟踪文件的复习，请返回到[“观察系统调用”](ch04.xhtml#observing_system_calls)。）
    sysdig允许您使用`-w`命令行标志轻松将活动存储在跟踪文件中。 要查看其工作原理，请在终端中发出以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In another terminal, run the three `ln` commands again, then go back to the
    first terminal and stop sysdig with Ctrl-C. You now have your activity in a trace
    file that you can inspect as many times you want:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端中，再次运行三个`ln`命令，然后返回第一个终端并使用Ctrl-C停止sysdig。现在，您可以随意检查您的活动跟踪文件多次：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will notice that the trace file contains all of the host’s activity, not
    only your `ln` commands. You will also notice that the file is pretty big. You
    can make it smaller and easier to inspect by using a filter when you run the capture:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到跟踪文件包含所有主机的活动，而不仅仅是您的`ln`命令。您还会注意到文件相当大。通过在运行捕获时使用过滤器，您可以使其更小并更易于检查：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now you have a noise-free file that is less than 1 MB in size, containing only
    the specific activity that you need to craft your rule. Saving the rule-triggering
    activity in a trace file has several advantages:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您拥有一个少于1 MB大小的无噪声文件，其中只包含您需要制作规则的特定活动。将触发规则的活动保存在跟踪文件中有几个优点：
- en: It requires replicating complex behaviors only once. (Not all suspicious behaviors
    are as simple to detect as running `ln` three times!)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它只需要复制复杂行为一次。（并非所有可疑行为都像运行`ln`三次那样简单！）
- en: It allows you to focus on the events and stay in a single terminal, without
    having to replicate the rule-triggering commands many times.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许您专注于事件并留在单个终端中，而无需多次复制触发规则的命令。
- en: It allows you to develop rules on a different machine. You don’t even need to
    deploy and configure Falco on the machine where the behavior is happening! This
    is really nice if you want to capture behaviors in “unfriendly” environments like
    cloud containers or edge devices.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许您在不同的机器上开发规则。您甚至不需要在行为发生的机器上部署和配置Falco！如果您希望捕获云容器或边缘设备等“不友好”环境中的行为，这真是太好了。
- en: It lets you develop rules with normal user privileges.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使您能够以普通用户权限开发规则。
- en: It provides consistency, which is useful not only for creating the rule but
    also for implementing regressions when the rule is done.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一致性，不仅对于创建规则很有用，而且在完成规则后实施回归测试时也很有用。
- en: 3\. Craft and test the condition filter with the aid of sysdig
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 使用sysdig制作并测试条件过滤器
- en: 'Now that you have the data you need, it’s time to work on the condition. Typically,
    at this stage you’ll want to answer a couple of questions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经拥有所需的数据，是时候处理条件了。通常，在这个阶段，您会想要回答几个问题：
- en: What type of system call (or system calls) do you need to target? Of course,
    not all Falco rules are based on system calls; for example, you might be using
    a plugin. But in general, identifying the type of event that will trigger the
    rule is the first order of business.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要针对什么类型的系统调用（或系统调用）？当然，并非所有的Falco规则都基于系统调用；例如，您可能在使用插件。但总体而言，识别将触发规则的事件类型是首要任务。
- en: Once you know which event to parse, which of its parameters or arguments do
    you need to check?
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦确定要解析的事件，您需要检查其参数或参数中的哪些？
- en: 'sysdig can help you answer these questions. Use it to read and decode the capture
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: sysdig可以帮助您回答这些问题。使用它来读取和解码捕获文件：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Toward the end of the output file is where the magic happens:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出文件的末尾就是魔法发生的地方：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our system call is `symlinkat`. The system call’s [manpage](https://oreil.ly/oW7rT)
    tells you that it’s a variation of another system call, `symlink`. You can also
    see that the `linkpath` argument contains the filesystem path of the symbolic
    link. This is exactly what you need to know to craft your filter, which should
    look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统调用是`symlinkat`。系统调用的[manpage](https://oreil.ly/oW7rT)告诉您它是另一个系统调用`symlink`的变体。您还可以看到`linkpath`参数包含符号链接的文件系统路径。这正是您需要了解的内容，以便制作您的过滤器，应如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can immediately leverage sysdig to validate that this is the right filter:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以立即利用sysdig验证这是正确的过滤器：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Bingo! The output correctly shows the three system calls that should trigger
    the rule.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！输出正确显示了三个应触发规则的系统调用。
- en: 4\. Craft and test the output with the aid of sysdig
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 使用sysdig制作并测试输出
- en: 'sysdig, handily, can help you craft the rule’s output too. The sysdig `-p`
    flag, in particular, receives a Falco output–compatible string as input and uses
    it to print a Falco-like output to the terminal for each event accepted by the
    filter. This makes it effortless to craft and test the rule’s output, knowing
    that Falco will show the same thing when the rule triggers. For example, this
    looks like a nice output for your rule:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: sysdig非常方便，可以帮助你创建规则的输出。特别是sysdig的`-p`标志，接收一个与Falco兼容的字符串作为输入，并用它打印类似Falco的输出到终端，以便于测试规则的输出，知道当规则触发时Falco将显示相同的内容。例如，以下看起来是规则的一个很好的输出：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Test it, together with the filter, in sysdig:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在sysdig中与过滤器一起进行测试：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note the quotation marks around both the filter and the output condition. This
    prevents the shell from getting confused by any characters they contain.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意过滤器和输出条件周围的引号。这可以防止Shell因为它们包含的任何字符而混淆。
- en: Your condition and output look pretty good. Time to switch to Falco!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你的条件和输出看起来非常不错。是时候切换到Falco了！
- en: 5\. Convert the sysdig command line into a rule
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 将sysdig命令行转换为规则
- en: 'The next step is converting what you have into a Falco rule. This is little
    more than a copy-and-paste exercise, since you already know that the condition
    and output work:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将你拥有的内容转换为Falco规则。这只是一个复制粘贴的练习，因为你已经知道条件和输出是如何工作的：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 6\. Validate the rule in Falco
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 在Falco中验证规则
- en: 'Save the rule in a YAML file called *symlink.yaml*. Now testing it in Falco
    is a matter of loading it with the `-r` flag, then using the `-e` flag to use
    the capture file as input:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将规则保存在名为*symlink.yaml*的YAML文件中。现在在Falco中测试它只需使用`-r`标志加载它，然后使用`-e`标志使用捕获文件作为输入：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The rule triggered the expected number of times and displayed the correct output.
    Congratulations!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 规则触发了预期次数，并显示了正确的输出。恭喜！
- en: 'Note how, in Falco, you can leverage the same trace file that you created with
    sysdig. The `-e` command-line option tells Falco: “Read system calls from the
    given file instead of using a driver. When you reach the end of the file, print
    a summary and return.” Very handy for quick iteration!'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在Falco中，你可以利用与sysdig创建的相同跟踪文件。`-e`命令行选项告诉Falco：“从给定文件读取系统调用，而不是使用驱动程序。当你到达文件末尾时，打印摘要并返回。”对于快速迭代非常方便！
- en: 7\. Modularize and optimize the rule
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7\. 模块化和优化规则
- en: 'You have a working rule and you’ve tested it, but there’s room to make it prettier.
    Step 7 is adding modularity to the rule:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经有一个工作规则并进行了测试，但还有改进的空间。第7步是将规则模块化：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This moves the condition’s checks into macros, which makes the condition shorter
    and more readable. That’s great, but you can do even better:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将条件的检查移入宏中，使条件更短更易读。这很棒，但你还可以做得更好：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What you did here is to move the condition constants into lists. This has multiple
    benefits. First, it makes the rule easy to extend, in a noninvasive way. If you
    want to add another sensitive directory, you can do it easily by adding the relevant
    item to the list or, even better, by creating a second `symlink_syscalls` list
    in append mode. This also gives you an opportunity to optimize the rule by using
    operators like `in` and `pmatch` that can perform multiple checks in an efficient
    way.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里所做的是将条件常量移入列表中。这有多个好处。首先，以一种非侵入性的方式使规则易于扩展。如果你想要添加另一个敏感目录，可以通过将相关项目添加到列表或者更好地说，通过创建第二个`symlink_syscalls`列表来添加它。这还让你有机会通过使用`in`和`pmatch`等操作符来优化规则，以便进行高效的多重检查。
- en: 8\. Create a regression
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8\. 创建一个回归测试
- en: When you create a new rule, particularly if your goal is including it in the
    official ruleset, you might like to be able to test it in the future. For example,
    you might want to ensure it still works with new versions of Falco or on different
    Linux distributions. You might also want to measure its performance (such as its
    CPU utilization) under stress. The capture file you created at the beginning of
    the process is a good base for a regression.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个新规则时，特别是如果你的目标是将其包含在官方规则集中，你可能希望在将来能够进行测试。例如，你可能希望确保它仍然能在Falco的新版本或不同的Linux发行版上工作。你还可能希望在压力下测量其性能（如CPU利用率）。你在过程开始时创建的捕获文件是回归测试的良好基础。
- en: As an alternative, the Falco community has created a tool called event-generator
    (mentioned in [Chapter 2](ch02.xhtml#getting_started_with_falco)) that’s useful
    for testing. If you add an action for your rule in event-generator, you or other
    people will be able to trigger the rule in real time on an arbitrary machine.
    The tool can replay your rule-triggering scenario in a flexible way, including
    triggering the rule multiple times and at specific frequencies. That way, you
    can precisely measure its CPU utilization. You can also check if, under heavy
    stress, the rule will slow Falco down to the point where the driver starts dropping
    system calls.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方案，Falco社区创建了一个名为事件生成器的工具（在[第2章](ch02.xhtml#getting_started_with_falco)中提到），用于测试。该工具对于你添加规则操作非常有用，你或其他人可以在任意机器上实时触发规则。该工具可以以灵活的方式重播触发规则的场景，包括多次触发规则和特定频率触发规则。因此，你可以精确测量其CPU利用率。你还可以检查在重压下，规则是否会导致Falco性能下降到驱动程序开始丢弃系统调用的程度。
- en: A full discussion of event-generator goes beyond the scope of this book, but
    you can take a look at its [GitHub repository](https://oreil.ly/jERpD) to learn
    more about it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论事件生成器的全部内容超出了本书的范围，但你可以查看其[GitHub存储库](https://oreil.ly/jERpD)以了解更多信息。
- en: 9\. Share the rule with the community
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9\. 与社区分享规则
- en: Congratulations, you’ve completed the development of a brand new rule! At this
    point, it is important to remember that Falco is a tool written by the community
    for the community. Every new rule you write could be valuable to many others,
    so you should consider contributing it to the default ruleset. [Chapter 15](ch15.xhtml#how_to_contribute)
    will teach you everything you need to know about contributing to Falco. As Falco
    maintainers and community members, we’d like to thank you in advance for any rules
    you decide to share with the community.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你已经完成了全新规则的开发！现在很重要的一点是，Falco是社区为社区编写的工具。你编写的每一个新规则都可能对许多其他人有价值，因此你应考虑将其贡献给默认规则集。[第15章](ch15.xhtml#how_to_contribute)将教你一切关于向Falco贡献的知识。作为Falco的维护者和社区成员，我们预先感谢你决定与社区分享的所有规则。
- en: Things to Keep in Mind When Writing Rules
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写规则时需要记住的事项
- en: Now that we’ve covered the basics, let’s discuss some concepts that are a bit
    more advanced but very important to keep in mind when developing rules.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了基础知识，让我们讨论一些略微高级但在开发规则时非常重要的概念。
- en: Priorities
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先级
- en: 'As mentioned in [Chapter 7](ch07.xhtml#falco_rules), every Falco rule must
    have a priority. The rule priority is typically reported in conjunction with the
    output and can have one of the following values:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第7章](ch07.xhtml#falco_rules)所述，每个Falco规则必须有一个优先级。规则优先级通常与输出一起报告，可以有以下值之一：
- en: '`EMERGENCY`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMERGENCY`'
- en: '`ALERT`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALERT`'
- en: '`CRITICAL`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CRITICAL`'
- en: '`ERROR`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR`'
- en: '`WARNING`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARNING`'
- en: '`NOTICE`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOTICE`'
- en: '`INFORMATIONAL`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFORMATIONAL`'
- en: '`DEBUG`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`'
- en: Picking the right priorities for your rules is crucial, because typically rules
    are filtered based on priority. Assigning too high a priority to a rule could
    cause alert flooding and diminish its value.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适当的规则优先级非常重要，因为通常会基于优先级筛选规则。将规则分配过高的优先级可能会导致警报洪水并降低其价值。
- en: 'Here is what the official Falco documentation has to say about how priorities
    are used in the default ruleset:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Falco文档关于如何在默认规则集中使用优先级的解释如下：
- en: If a rule is related to writing state (filesystem, etc.), its priority is `ERROR`.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果规则涉及写入状态（文件系统等），其优先级为`ERROR`。
- en: If a rule is related to an unauthorized read of state (reading sensitive files,
    etc.), its priority is `WARNING`.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果规则涉及未经授权的状态读取（读取敏感文件等），其优先级为`WARNING`。
- en: If a rule is related to unexpected behavior (spawning an unexpected shell in
    a container, opening an unexpected network connection, etc.), its priority is
    `NOTICE`.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果规则涉及意外行为（在容器中生成意外shell、打开意外网络连接等），其优先级为`NOTICE`。
- en: If a rule is related to behaving against good practices (unexpected privileged
    containers, containers with sensitive mounts, running interactive commands as
    root), its priority is `INFORMATIONAL`.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果规则涉及违反良好实践（意外的特权容器、挂载敏感文件系统、以root身份运行交互式命令），其优先级为`INFORMATIONAL`。
- en: Noise
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 噪音
- en: Noise is one of the most critical factors to take into account when crafting
    rules, as well as a generally complex topic in security. The trade-off between
    detection accuracy and false positive generation is a constant source of tension
    in detection tools like Falco.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 噪音是制定规则时需要考虑的最关键因素之一，也是安全领域中一般复杂话题。检测工具如Falco中检测精度和误报生成之间的权衡是一个持续的紧张源。
- en: 'It’s often said that the only ruleset with no false positives is one with no
    rules. Completely avoiding false positives is extremely difficult and often an
    unrealistic goal, but there are some guidelines you can follow to reduce the problem:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通常说，唯一没有误报的规则集是没有规则的规则集。完全避免误报是极其困难并且常常是不切实际的目标，但您可以遵循一些指导原则来减少这个问题：
- en: 'Guideline 1: Test and validate.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 指南1：测试和验证。
- en: Before using a rule in production, make sure you test it extensively in as many
    environments as possible (different OS distributions, kernels, container engines,
    and orchestrators).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中使用规则之前，请确保在尽可能多的环境中广泛测试它（不同的操作系统发行版、内核、容器引擎和编排器）。
- en: 'Guideline 2: Priorities, and priority-based filtering, are your friends.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 指南2：优先级及基于优先级的过滤是您的好帮手。
- en: Avoid deploying a rule for the first time with `ERROR` or `CRITICAL` as the
    priority. Start with `DEBUG` or `INFO`, see what happens, and increase the value
    if it’s not too noisy. Lower-priority rules can be easily filtered out at different
    stages of the output pipeline, so they don’t run the risk of waking up the security
    operations center team in the middle of the night.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 避免首次使用`ERROR`或`CRITICAL`作为优先级部署规则。从`DEBUG`或`INFO`开始，观察情况，如果噪音不大，再逐步提升优先级。低优先级规则可以在输出管道的不同阶段轻松过滤，因此不会在半夜唤醒安全运营中心团队。
- en: 'Guideline 3: Leverage tags.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 指南3：利用标签。
- en: The tags that you assign to your rules are included in Falco’s gRPC and JSON
    outputs. This means you can use them to complement priorities and filter Falco’s
    output in an even more flexible way.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您分配给规则的标签包含在Falco的gRPC和JSON输出中。这意味着您可以使用它们来补充优先级并更加灵活地过滤Falco的输出。
- en: 'Guideline 4: Plan for exceptions.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 指南4：计划异常。
- en: Good rules are designed to account for known and unknown exceptions in a way
    that is readable and modular and can easily be extended.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的规则设计考虑到已知和未知的异常情况，以一种可读且模块化的方式，并且可以轻松扩展。
- en: 'Take a look, for example, at the *Write below rpm database* rule from the default
    ruleset:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看默认规则集中的*写入rpm数据库以下*规则：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note how known exceptions are included in the rule as macros (`rpm_procs`, `ansible_running_python`,
    etc.), but the rule also includes a macro (`user_known_write_rpm_database_activities`)
    that lets the user add their own exceptions through the override mechanism.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意已知异常如何作为宏（`rpm_procs`，`ansible_running_python`等）包含在规则中，但规则还包括一个宏（`user_known_write_rpm_database_activities`），让用户通过覆盖机制添加自己的异常。
- en: Performance
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: Performance is another important topic to consider when writing and deploying
    rules, because Falco typically operates with high-frequency data sources. When
    you are using Falco with a system call source like the kernel module or the eBPF
    probe, your whole ruleset might need to be evaluated millions of times per second.
    At such frequencies, rule performance is key.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是撰写和部署规则时需要考虑的另一个重要主题，因为Falco通常与高频数据源一起运行。当您将Falco与诸如内核模块或eBPF探针之类的系统调用源一起使用时，您的整个规则集可能需要每秒评估数百万次。在这样的频率下，规则的性能至关重要。
- en: 'Having a tight ruleset is definitely a good practice to keep Falco’s CPU utilization
    under control, as you learned in [Chapter 10](ch10.xhtml#configuring_and_running).
    It is also important, however, to make sure every new rule you create is optimized
    for performance. The overhead of your rule is more or less proportional to the
    number of field comparisons that the rule’s condition needs to perform for every
    input event. Therefore, you should expect that a simple condition like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有紧凑的规则集绝对是保持Falco CPU利用率可控的良好实践，正如您在[第10章](ch10.xhtml#configuring_and_running)中学到的那样。然而，同样重要的是确保您创建的每个新规则都针对性能进行了优化。您的规则的开销或多或少与规则条件需要为每个输入事件执行的字段比较数量成正比。因此，您应该期望像这样一个简单条件：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'will use around 20% of the CPU of a more complex rule like this one:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与像这个更复杂的规则相比，将会使用大约20%的CPU：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Optimizing a rule is all about making sure that, in most common situations,
    it requires the Falco engine to perform the smallest possible number of comparisons.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 优化规则就是确保在大多数常见情况下，Falco 引擎需要执行尽可能少的比较。
- en: 'Here are some guidelines you should follow to reduce the CPU utilization of
    your rules:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是降低规则 CPU 利用率的一些指南：
- en: 'The rule should always start with a check on the event type (such as `evt.type=open`
    or `evt.type in (mkdir, mkdirat)`). Falco is smart about this: it understands
    when your rule is restricted to only some event types and will evaluate the rule
    only when it receives a matching event. In other words, if your rule starts with
    `evt.type=open`, Falco won’t even start evaluating it for any event that is not
    an `open` system call. This is so effective (and important!) that Falco emits
    a warning when a rule doesn’t include a check on the event type.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则应始终从事件类型检查开始（例如`evt.type=open`或`evt.type in (mkdir, mkdirat)`）。Falco 在这方面很智能：它能理解当你的规则仅限于某些事件类型时，并且仅在接收到匹配事件时评估规则。换句话说，如果你的规则以`evt.type=open`开头，Falco
    甚至不会为任何非`open`系统调用的事件开始评估它。这是如此有效（和重要！）以至于当规则不包含事件类型检查时，Falco 会发出警告。
- en: 'Include aggressive comparisons that have a high probability of failing earlier,
    rather than later, in your rule. A Falco condition works like an `if` statement
    in a programming language: it’s evaluated left to right until something fails.
    The sooner you make the condition fail, the less work it will require to complete.
    Try to find simple ways to restrict the scope of your rule. Can you limit it to
    specific processes, files, or containers? Can you apply it to only a subset of
    users? Encode these restrictions in the rule, toward the beginning.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的规则中，包括那些有较高失败概率的激进比较，最好是在早期而不是晚期。Falco 条件类似于编程语言中的`if`语句：它从左到右评估，直到某些条件失败为止。你越早让条件失败，完成工作所需的工作量就越少。尝试找到限制规则范围的简单方法。你能将其限制在特定的进程、文件或容器吗？能够仅应用于特定用户的子集吗？在规则中编码这些限制，尽早实现。
- en: Heavy, complex rule logic should be included after (to the right of) the aggressive
    comparisons and restrictions. For example, long exception lists belong at the
    end of the rule.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的重型规则逻辑应包含在激进比较和限制之后（向右）。例如，长的异常列表应放在规则的末尾。
- en: Whenever possible, use multiple value operators like `in` and `pmatch` instead
    of writing multiple comparisons. In other words, `evt.type in (mkdir, mkdirat)`
    is better than `evt.type=mkdir or evt.type=mkdirat`. Multiple value operators
    are heavily optimized and become progressively more effective as the number of
    values grows.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用多值运算符，如`in`和`pmatch`，而不是编写多个比较。换句话说，`evt.type in (mkdir, mkdirat)`比`evt.type=mkdir
    or evt.type=mkdirat`更好。多值运算符经过了大量优化，在值数量增多时效果更好。
- en: In general, small is good. Develop the habit of keeping things as simple as
    possible. This will not only speed up processing of your rules, it will also ensure
    they are readable and maintainable!
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常情况下，小而简单是好的。养成尽可能保持简单的习惯。这不仅会加快处理规则的速度，还会确保它们易读且易维护！
- en: Tagging
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记
- en: 'Tagging is a powerful tool for crafting rules. It has three important uses:
    flexibly filtering the rules Falco loads, adding context to its output, and supporting
    notification filtering and prioritization, therefore reducing noise. Using tags
    generously will improve your Falco experience and ensure you get the most out
    of your rules.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 标记是制定规则的强大工具。它有三个重要用途：灵活过滤Falco加载的规则、为其输出添加上下文、支持通知过滤和优先级设置，从而减少噪音。慷慨地使用标记将提高你的Falco体验，并确保你充分利用你的规则。
- en: Conclusion
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This was an intense chapter! Rule writing is a demanding topic, but it can also
    be fun and creative. Plus, writing the perfect rule to perform an impressive detection
    will earn you a lot of points with your coworkers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一章的高强度内容！编写规则是一个要求严格但也可以很有趣和创造性的主题。而且，编写完美的规则以执行令人印象深刻的检测将使你在同事中获得很多赞誉。
- en: ^([1](ch13.xhtml#ch01fn18-marker)) The term *symlink* is short for *symbolic
    link*; in Unix, it indicates a filesystem entry that is a reference to another
    file or directory.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch13.xhtml#ch01fn18-marker)) *符号链接*（symlink）一词是*符号连接*（symbolic link）的缩写；在Unix中，它表示对另一个文件或目录的引用。
