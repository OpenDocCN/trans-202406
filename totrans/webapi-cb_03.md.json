["```\n/**\n * Given a relative path and a base URL, resolves a full absolute URL.\n * @param relativePath The relative path for the URL\n * @param baseUrl A valid URL to use as the base\n */\nfunction resolveUrl(relativePath, baseUrl) {\n  return new URL(relativePath, baseUrl).href;\n}\n\n// https://example.com/api/users\nconsole.log(resolveUrl('/api/users', 'https://example.com'));\n```", "```\n// https://example.com/api/v1/users\nconsole.log(resolveUrl('/api/v1/users', 'https://example.com'));\n\n// https://example.com/api/v1/users\n// Note that /api/v2 is discarded due to the leading slash in /api/v1/users\nconsole.log(resolveUrl('/api/v1/users', 'https://example.com/api/v2'));\n```", "```\n// https://example.com/api/v1/users\nconsole.log(resolveUrl('../v1/users/', 'https://example.com/api/v2'));\n\n// https://example.com/api/v1/users\nconsole.log(resolveUrl('users', 'https://example.com/api/v1/groups'));\n```", "```\nconst usersApiUrl = new URL('/api/users', window.location);\n```", "```\n/**\n * Removes all parameters from an input URL.\n *\n * @param inputUrl a URL string containing query parameters\n * @returns a new URL string with all query parameters removed\n */\nfunction removeAllQueryParameters(inputUrl) {\n  const url = new URL(inputUrl);\n  url.search = '';\n  return url.toString();\n}\n\n// Results in 'https://example.com/api/users'\nremoveAllQueryParams('https://example.com/api/users?user=sysadmin&q=user');\n```", "```\nconst url = new URL('https://example.com/api/users?user=sysadmin&q=user');\n\nurl.search = null;\nconsole.log(url.toString()); // https://example.com/api/users?null\n```", "```\n/**\n * Removes a single parameter from an input URL\n *\n * @param inputUrl a URL string containing query parameters\n * @param paramName the name of the parameter to remove\n * @returns a new URL string with the given query parameter removed\n */\nfunction removeQueryParameter(inputUrl, paramName) {\n  const url = new URL(inputUrl);\n  url.searchParams.delete(paramName);\n  return url.toString();\n}\n\nconsole.log(\n  removeQueryParameter(\n    'https://example.com/api/users?user=sysadmin&q=user',\n    'q'\n  )\n); // https://example.com/api/users?user=sysadmin\n```", "```\nconst url = new URL('https://example.com/api/search?objectType=user');\n\nurl.searchParams.append('userRole', 'admin');\nurl.searchParams.append('userRole', 'user');\nurl.searchParams.append('name', 'luke');\n\n// Prints\n\"https://example.com/api/search?objectType=user&userRole=admin&userRole=user\n&name=luke\"\nconsole.log(url.toString());\n```", "```\nhttps://example.com/api/search?objectType=user&userRole=admin&userRole=user\n&name=luke\n```", "```\nconst url = new URL('https://example.com/api/search?objectType=user');\n\n// TypeError: Failed to execute 'append' on 'URLSearchParams':\n// 2 arguments required, but only 1 present.\nurl.searchParams.append('name');\n```", "```\nconst url = new URL('https://example.com/api/search?objectType=user');\n\n// The resulting URL has the query string:\n//  ?objectType=user&name=null&role=undefined\nurl.searchParams.append('name', null);\nurl.searchParams.append('role', undefined);\n```", "```\nconst url = new URL('https://example.com/api/search');\n\n// Contrived example string demonstrating several reserved characters\nurl.searchParams.append('q', 'admin&user?luke');\n```", "```\nhttps://example.com/api/search?q=admin%26user%3Fluke\n```", "```\nconst url = new URL('https://example.com/api/search?objectType=user');\n\nurl.searchParams.set('userRole', 'admin');\nurl.searchParams.set('userRole', 'user');\nurl.searchParams.set('name', 'luke');\n```", "```\nhttps://example.com/api/search?objectType=user&userRole=user&name=luke\n```", "```\n/**\n * Takes a URL and returns an array of its query parameters\n *\n * @param inputUrl A URL string\n * @returns An array of objects with key and value properties\n */\nfunction getQueryParameters(inputUrl) {\n  // Can't use an object here because there may be multiple\n  // parameters with the same key, and we want to return all parameters.\n  const result = [];\n\n  const url = new URL(inputUrl);\n\n  // Add each key/value pair to the result array.\n  url.searchParams.forEach((value, key) => {\n    result.push({ key, value });\n  });\n\n  // Results are ready!\n  return result;\n}\n```", "```\ngetQueryParameters('https://example.com/api/search?name=luke%26ben'); ![1](assets/1.png)\n```", "```\nname: luke&ben\n```", "```\n// Route definitions. Each route has a path and some content to render.\nconst routes = [\n  { path: '/', content: '<h1>Home</h1>' },\n  { path: '/about', content: '<h1>About</h1>' }\n];\n\nfunction navigate(path, pushState = true) {\n  // Find the matching route and render its content.\n  const route = this.routes.find(route => route.path === path);\n\n  // Be careful using innerHTML in a real app, which can be a security risk.\n  document.querySelector('#main').innerHTML = route.content;\n\n  if (pushState) {\n    // Change the URL to match the new route.\n    history.pushState({}, '', path);\n  }\n}\n```", "```\n<a href=\"/\">Home</a>\n<a href=\"/about\">About</a>\n```", "```\ndocument.querySelectorAll('a').forEach(link => {\n  link.addEventListener('click', event => {\n    // Prevent the browser from trying to load the new URL from the server!\n    event.preventDefault();\n    navigate(link.getAttribute('href'));\n  });\n});\n```", "```\nwindow.addEventListener('popstate', () => {\n  navigate(window.location.pathname, false);\n});\n```", "```\nconst profilePattern = new URLPattern({ pathname: '/api/users/:userId/profile' });\n```", "```\n// The pattern won't match a pathname alone; it must be a valid URL.\nconsole.log(profilePattern.test('/api/users/123/profile'));\n\n// This URL matches because the pathname matches the pattern.\nconsole.log(profilePattern.test('https://example.com/api/users/123/profile'));\n\n// It also matches URL objects.\nconsole.log(profilePattern.test(new URL\n('https://example.com/api/users/123/profile')));\n\n// The pathname must match exactly, so this won't match.\nconsole.log(profilePattern.test('https://example.com/v1/api/users/123/profile'));\n```", "```\nconst wildcardProfilePattern = new URLPattern\n({ pathname: '/*/api/users/:userId/profile' });\n\n// This matches now because the /v1 portion of the URL matches the wildcard.\nconsole.log(wildcardProfilePattern.test\n('https://example.com/v1/api/users/123/profile'));\n```", "```\nconst profilePattern = new URLPattern({ pathname: '/api/users/:userId/profile' });\n\nconst match = profilePattern.exec('https://example.com/api/users/123/profile');\nconsole.log(match.pathname.input); // '/api/users/123/profile'\nconsole.log(match.pathname.groups.userId); // '123'\n```"]