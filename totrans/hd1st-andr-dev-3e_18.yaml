- en: 'Chapter 15\. Recycler Views: *Reduce, Reuse, Recycle*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0621-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Lists of data are a key part of most apps.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'And in this chapter, we’ll show you how to create one using a **recycler view**:
    a **super-flexible** way of building a **scrollable list**. You’ll learn how to
    create **flexible layouts** for your list, including text views, checkboxes, and
    more. You’ll find out **how to create adapters** that **squish your data** into
    the recycler view in whatever way you choose. You’ll discover how to use **card
    views** to give your data a **3D material look**. Finally, we’ll show you how
    **layout managers** can completely change the look of your list with **just one
    or two lines of code**. Let’s get recycling…'
  prefs: []
  type: TYPE_NORMAL
- en: What the Tasks app currently looks like
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we built a Tasks app that lets the user enter task
    records into a Room database. The app displays the list of records as a formatted
    `String`, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0622-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We decided to display the task records using a formatted `String` since it was
    a relatively quick and basic way of seeing the records that have been added to
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: The list, however, looks a little bland. So how can we improve it?
  prefs: []
  type: TYPE_NORMAL
- en: We can turn the list into a recycler view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of displaying the list of tasks as a formatted `String`, we can change
    it up so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0623-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, each task record uses a text view and a checkbox for its data,
    instead of plain text. The items are also arranged on cards in a scrollable grid.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of list is created using a **recycler view**. So what’s that?
  prefs: []
  type: TYPE_NORMAL
- en: Why use a recycler view?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A recycler view is a more advanced and flexible way of displaying a list of
    data than using a simple formatted `String`. It buys you the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0624-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/star.png) **A rich UI for the list’s items.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each item is displayed in a layout, so you can use views such as text views,
    image views, and checkboxes to display its data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **A flexible way of positioning items.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recycler views come with layout managers, which let you position views in a
    vertical or horizontal list, a grid, or a staggered grid where items have unequal
    heights.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **You can use it for navigation.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can make items clickable so that they navigate to another fragment when
    clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It’s an efficient way to display large data sets.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recycler views use a small number of views to give the appearance of a large
    collection of views that extend beyond the screen. When each item scrolls off
    the screen, it reuses—or *recycles*—its view for items that have scrolled onto
    the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recycler views get their data from an adapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each recycler view you create uses an adapter to display its data. The adapter
    uses data from a data source (such as a database), and binds it to views in the
    item’s layout. The recycler view then displays the items on the device screen
    as a scrollable list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data source, adapter, and recycler view fit together like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0624-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to add a recycler view to the Tasks app. Let’s go through the steps
    we’ll take to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll go through the following steps to add a recycler view to the Tasks app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a recycler view that displays a list of task names.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll begin by creating a basic recycler view that just displays the name of
    each task. Keeping this first version relatively simple will make it easier to
    see how each part of the recycler view is constructed, and how they fit together.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0625-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Update the recycler view to display a grid of cards.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we’ve got a basic recycler view working, we’ll change it up so that it
    displays the name of each task and whether it’s been completed in a grid of card
    views.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0625-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Add a recycler view dependency to the app build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can start building the recycler view, we need to add a dependency
    to the recycler view library to the app’s *build.gradle* file. Open the Tasks
    app, then open the file *Tasks/app/build.gradle*, and add the following line (in
    bold) to the `dependencies` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0625-03.png)'
  prefs: []
  type: TYPE_IMG
- en: When prompted, make sure that you sync this change with the rest of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve added this dependency, let’s start building the recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0625-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Tell the recycler view how to display each item…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0626-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The first thing that we’ll do is tell the recycler view how to display each
    task record.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the first version of the app, we want to display the name of each task
    in the recycler view so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0626-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So how do we do this?
  prefs: []
  type: TYPE_NORMAL
- en: …by defining a layout file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You specify how each item in the recycler view should be laid out using a layout
    file. The recycler view uses this layout file when it needs to display each item.
    If the layout file is comprised of a single text view, for example, a text view
    will be displayed for each item in the recycler view’s list.
  prefs: []
  type: TYPE_NORMAL
- en: To create the layout file, highlight the *Tasks/app/src/main/res/layout* folder
    in the project explorer, and then choose File→New→Layout Resource File. When prompted,
    enter a file name of “task_item” and click on OK.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0626-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the first version of the app, we want to display the name of each of the
    recycler view’s tasks in a single text view, so we’ll add a text view to the layout
    file we just created. To do this, update the code for *task_item.xml* so that
    it matches the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0626-04.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code that we need to tell the recycler view how each item should
    be laid out. Next, we’ll create the recycler view’s adapter.
  prefs: []
  type: TYPE_NORMAL
- en: The adapter adds data to the recycler view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we said earlier, when you use a recycler view in your app, you need to create
    an adapter for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recycler view’s adapter has two main jobs: to create each of the views
    that are visible within the recycler view, and display a piece of data in each
    one. For the Tasks app, we need to define an adapter that uses *task_item.xml*
    to create a bunch of text views (one for each task record that’s displayed), and
    puts a task name in each one.'
  prefs: []
  type: TYPE_NORMAL
- en: '**An adapter acts as a bridge between a data source and a recycler view.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We’ll build the adapter over the next few pages. Here are the steps we’ll go
    through to create it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Specify what kind of data the adapter should work with.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want the adapter to work with `Task` data, so we’ll specify that it uses
    a `List<Task>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Define the adapter’s view holder.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This controls how each view in the item’s layout should be populated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Inflate each item’s layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the recycler view needs to display each item, we’ll inflate an instance
    of *task_item.xml* for that item.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Display each item’s data in the layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll do this by adding each `Task`’s `taskName` property value to the layout’s
    text view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We’ll begin by creating a file for the adapter.
  prefs: []
  type: TYPE_NORMAL
- en: Create the adapter file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re going to create an adapter for the recycler view named `TaskItemAdapter`.
    To do this, highlight the *com.hfad.tasks* package in the *app/src/main/java*
    folder, then go to File→New→Kotlin Class/File. Name the file “TaskItemAdapter”
    and choose the Class option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created the file, update its code so it extends the `RecyclerView.Adapter`
    class like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0627-02.png)'
  prefs: []
  type: TYPE_IMG
- en: This turns the class into an adapter that can be used by a recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: Tell the adapter what data it should work with
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you define a recycler view adapter, you need to tell it what sort of data
    should be added to the recycler view. We’ll do this by adding a property to the
    adapter that specifies the data type.
  prefs: []
  type: TYPE_NORMAL
- en: For the tasks app, we want the recycler view to display a list of task records,
    so we’ll add a `List<Task>` property named `data` to the adapter. We’ll also include
    a custom setter that calls `notifyDataSetChanged()` if the property gets updated;
    this tells the recycler view that the data has changed so it can redraw itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated `TaskItemAdapter` code; update *TaskItemAdapter.kt* to include
    this change (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0628-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Override the getItemCount() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need to override the adapter’s `**getItemCount()**` method. This tells
    the adapter how many data items there are so that the recycler view knows how
    many to display.
  prefs: []
  type: TYPE_NORMAL
- en: In the `TaskItemAdapter` code, we’re using a `List<Task>` property named `data`
    for the recycler view’s data items, so we can use `data.size` to say how many
    items there are.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the `getItemCount()` method (in bold), which you can add to *TaskItemAdapter.kt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0628-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve specified the type of data the adapter works with, we’ll use
    it to populate the layout’s text view. We’ll do this by defining the adapter’s
    **view holder**.
  prefs: []
  type: TYPE_NORMAL
- en: Define the adapter’s view holder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **view holder** contains information about how a view in the item’s layout
    should be displayed, and its position in the recycler view. You can think of it
    as a holder for the root view of the item’s layout—the layout that specifies how
    the recycler view should display each item.
  prefs: []
  type: TYPE_NORMAL
- en: In the Tasks app, we want the recycler view to use the layout file *task_item.xml*
    to display task records. This layout’s root view is a `TextView`, so we need to
    define a view holder that works with text views.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0629-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You define a view holder by adding an inner class to the adapter file that extends
    `RecyclerView.ViewHolder`. It includes a constructor that specifies the type of
    the layout’s root view (in this case `TextView`). The adapter’s class definition
    also needs to be updated to specify the adapter’s class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for `TaskItemAdapter`; update *TaskItemAdapter.kt*
    so that it includes the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0629-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve defined a view holder, we need to specify which layout it uses
    by overriding the adapter’s `onCreateViewHolder()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Override the onCreateViewHolder() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The adapter’s `**onCreateViewHolder()**` method gets called each time the recycler
    view requires a new view holder. The recycler view calls the method repeatedly
    when it’s first constructed to build the set of view holders that will be displayed
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onCreateViewHolder()` method needs to do two things: inflate the layout
    that’s used for each item (in this case *task_item.xml*), and return a view holder.
    Here’s the code to do this for `TaskItemAdapter`, so update the code for *TaskItemAdapter.kt*
    to include the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0630-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we’ve put the code to inflate *task_item.xml* in a new `inflateFrom()`
    method in `TaskItemViewHolder`, which the adapter’s `onCreateViewHolder()` method
    calls using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This approach passes responsibility for the view holder’s layout to the view
    holder instead of inflating the layout in the main body of the adapter code.
  prefs: []
  type: TYPE_NORMAL
- en: Add data to the layout’s view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final detail that we need to add to the adapter is how to display the task
    records in the view holder’s layout. We’ll do this by overriding the adapter’s
    `**onBindViewHolder()**` method, which gets called whenever the recycler view
    needs to display data. It takes two parameters: the view holder the data needs
    to be bound to, and the data’s position in the data set.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0631-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Tasks app, we want to take the `Task` object at a certain position in
    the adapter’s `data` property (a `List<Task>`), and display its `taskName` in
    the view holder’s layout. Here’s the code to do this for `TaskItemAdapter`, so
    update the code for *TaskItemAdapter.kt* to include the changes shown here (in
    bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0631-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we’re setting the layout’s text view text in a new `bind()`
    method, which we’ve added to `TaskItemViewHolder`. The adapter’s `onBindViewHolder()`
    method then calls this each time it runs. We use this approach because it makes
    the view holder responsible for populating its layout, instead of the adapter.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the code that we need to write for `TaskItemAdapter` and its `TaskItemViewHolder`
    inner class. Let’s look at the full code.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TaskItemAdapter.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full code for `TaskItemAdapter`; make sure that the code for *TaskItemAdapter.kt*
    includes everything shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0632-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The adapter code is complete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve now finished writing all of the code that’s needed for `TaskItemAdapter`.
    It does the following four things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Specifies that it works with Task data**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We did this by defining a `List<Task>` property named `data`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Uses a view holder named TaskItemViewHolder**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We added `TaskItemViewHolder` to `TaskItemAdapter` as an inner class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Inflates each item’s layout**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It does this when its `onCreateViewHolder()` method gets called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Displays each item’s data in the layout**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It does this using its `onBindViewHolder()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we said earlier, the adapter acts as a bridge between a data source and
    a recycler view. The data source, adapter, and recycler view fit together like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0633-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve finished writing the adapter code, let’s move on to the recycler
    view part of this model.
  prefs: []
  type: TYPE_NORMAL
- en: We need to display the recycler view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0634-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The next thing that we need to do is display a recycler view in `TasksFragment`
    (the Tasks app’s main screen), and get it to use the adapter that we’ve just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of what the recycler view needs to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0634-02.png)'
  prefs: []
  type: TYPE_IMG
- en: How to add a recycler view to a layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You display a recycler view by adding an `<androidx.recyclerview.widget.RecyclerView>`
    element to a fragment’s layout file. The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0634-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: specifies that the recycler view uses a layout manager, which determines how
    the recycler view positions its items. Here, we’re using a linear layout manager,
    which means that the recycler view will display its items in a vertical list with
    full-length rows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll find out more about layout managers later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the code you need to know to add a recycler view to `TasksFragment`’s
    layout, so let’s see what the code looks like.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for fragment_tasks.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Below is the full code for *fragment_tasks.xml* (`TasksFragment`’s layout).
    As you can see, we’ve replaced the text view with a recycler view, so update the
    code for *fragment_tasks.xml* to include these changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0635-02.png)![image](Images/f0636-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need to write to add a recycler view to `TasksFragment`’s
    layout. Next, we’ll tell the recycler view to use the adapter we created.
  prefs: []
  type: TYPE_NORMAL
- en: Tell the recycler view to use the adapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You make a recycler view use an adapter by creating an instance of the adapter,
    and attaching it to the recycler view. You do this in the fragment’s Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we want to make the recycler view use `TaskItemAdapter`. This
    is done by adding the following code (in bold) to `TasksFragment`’s `onCreateView()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0636-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll add this code to `TasksFragment` on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The updated code for TasksFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the code for `TasksFragment`; update *TasksFragment.kt* to include all
    the changes shown (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0637-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So what’s next?
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added a recycler view to TasksFragment’s layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve now written all of the code that we need to display a recycler view in
    `TasksFragment`’s layout, and told it to use `TaskItemAdapter` as its adapter.
    But there’s still one more thing left for us to do: we need to connect the adapter
    to a data source.'
  prefs: []
  type: TYPE_NORMAL
- en: As you learned earlier, the adapter uses data from a data source (such as a
    database), and binds it to views in the item’s layout. The recycler view then
    displays the items on the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data source, adapter, and recycler view fit together like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0638-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So in order to display data in the Tasks app’s recycler view, we need to tell
    `TaskItemAdapter` what task data to use.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll make TasksFragment add task data to TaskItemAdapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll tell `TaskItemAdapter` what task data to use by getting `TasksFragment`
    to update its `data` property with a `List<Task>`. `TasksFragment` will get this
    list from `TasksViewModel`’s `tasks` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0638-03.png)'
  prefs: []
  type: TYPE_IMG
- en: To do this, we first need to give `TasksFragment` access to `TasksViewModel`’s
    `tasks` property.
  prefs: []
  type: TYPE_NORMAL
- en: Update the TasksViewModel.kt code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recall, `TasksViewModel`’s `tasks` property is currently marked as
    private. We need to remove this modifier in order for `TasksFragment` to get the
    property’s value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also remove all the code we added in the previous chapter to transform
    the task data into a formatted `String`: this code is no longer needed now that
    we’re using a recycler view to display a `List<Task>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated `TasksViewModel` code; update *TasksViewModel.kt* to include
    these changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0639-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that `TasksFragment` has access to the `tasks` property, let’s make it pass
    the property’s `List<Task>` to `TaskItemAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: TasksFragment needs to update TaskItemAdapter’s data property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you know, `TasksViewModel`’s `tasks` property holds a live data list of
    tasks, which it gets from the database using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0640-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As this property uses live data, we can make `TasksFragment` observe it so that
    each time its value changes, the fragment is notified. `TasksFragment` will then
    be able to assign the latest version of the list to the adapter’s `data` property,
    making sure that the data displayed in the recycler view is always up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0640-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You’re already familiar with the code to observe live data properties, so here’s
    the code we need to add to `TasksFragment` (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0640-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s update *TasksFragment.kt* to include this change.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TasksFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s the updated code for `TasksFragment`; update *TasksFragment.kt* to include
    all the changes shown (in bold)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0641-02.png)![image](Images/f0642-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve finished writing all the recycler view code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It took us a while, but we’ve now finished writing all the code that’s needed
    to display a list of task names in a recycler view. We did this by:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating an adapter named TaskItemAdapter**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The adapter acts as a bridge between the recycler view and its data source.
    In the Tasks app, the data source is a Room database containing task records.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Attaching TaskItemAdapter to a recycler view**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We added a recycler view to `TasksFragment`’s layout, and told it to use `TaskItemAdapter`
    in its Kotlin code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Passing an up-to-date List<Task> to TaskItemAdapter**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We did this by making `TasksFragment` set `TaskItemAdapter`’s data property
    each time `TasksViewModel`’s live data list of tasks gets updated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before we take the app for a test drive and see what the recycler view looks
    like, let’s go through what happens when the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When the app is launched, MainActivity displays TasksFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TasksFragment` uses `TasksViewModel` as its view model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0643-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0643-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment observes TasksViewModel’s tasks property.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This property is a `LiveData<List<Task>>`, which holds an up-to-date list of
    records from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0643-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment sets the TaskItemAdapter’s data property to the List<Task>.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0643-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onCreateViewHolder() method is called for each item that
    needs to be displayed in the recycler view.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This creates a `TaskItemViewHolder` for each item. A layout (defined by *task_item.xml*)
    is inflated for each view holder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0644-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onBindViewHolder() is called for each TaskItemViewHolder.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This binds data to the text view in each view holder’s layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0644-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Each time TasksViewModel’s tasks property gets updated, TasksFragment passes
    an updated List<Task> to the TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Steps 5 to 6 are repeated so the recycler view stays up-to-date.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0644-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment` displays the name of each task in a recycler
    view.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter new tasks, these get added to the recycler view’s list. The app
    works as planned.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0645-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ve now learned how to create a basic recycler view. Before we tweak it to
    display the task records in a different way, try the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Adapter Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Bits and Pizzas app includes a `Pizza` data class that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The app needs to include a recycler view that displays the `pizzaName` for
    each `Pizza` item in the following layout (named *pizza_item.xml*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See if you can complete the recycler view’s adapter code (below).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0647-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Adapter Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Bits and Pizzas app includes a `Pizza` data class that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The app needs to include a recycler view that displays the `pizzaName` and
    `PizzaDescription` properties for each `Pizza` item in the following linear layout
    (named *pizza_item.xml*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See if you can complete the recycler view’s adapter code (below).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0648-01.png)![image](Images/f0649-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Recycler views are very flexible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0650-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So far in this chapter, you’ve learned how to build a basic recycler view that
    displays a list of task names. You did this by creating a layout that’s used by
    each item in the list, defining an adapter to populate it with data, and adding
    a recycler view to `TaskFragment`’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0650-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**While recycler views can seem overly complicated, they’re extremely flexible.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this app, we created a recycler view to display a simple list of task names,
    but this was just to get you started. You can also use recycler views to do other
    things, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Displaying a list of images by adding an image
    view to the item’s layout**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Using a different layout manager to display items
    in a grid instead of a vertical list**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Making it respond to clicks so that you can use
    it for navigation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To show you how flexible recycler views can be, we’re going to change up the
    recycler view we just created by getting it to show more information about each
    task.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at what the new version of the recycler view will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Recycler view 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to update the recycler view so that it shows the name of each task
    in a text view, and whether each task has been completed with a checkbox. We’ll
    display each task record on a single card, which will look like it’s slightly
    elevated. The cards will be arranged in a grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the new version of the recycler view will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0651-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to create this version of the recycler view by changing *task_item.xml*
    (the layout used by the recycler view’s items) so that it uses a **card view**.
    This is a type of frame layout that has rounded corners and shadows to make it
    look as though it’s elevated above its background.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0651-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a card view dependency to the **app** build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use a card view, we first need to add a dependency to its library to the
    app’s *build.gradle* file. Open the file *Tasks/app/build.gradle*, and add the
    following line (in bold) to the `dependencies` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0651-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure that you sync this change with the rest of the app.
  prefs: []
  type: TYPE_NORMAL
- en: How to create a card view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to use a card view in *task_item.xml* that includes a text view
    and a checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'You create a card view by adding an `<androidx.cardview.widget.CardView>` element
    to your layout code. The code for a typical card view looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0652-02.png)![image](Images/f0652-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the above code includes an extra namespace of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The full code for task_item.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *task_item.xml*; update the code for this file
    so that it includes the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0653-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to update the adapter’s view holder so that it works with the
    new layout, and populates the card’s views.
  prefs: []
  type: TYPE_NORMAL
- en: The adapter’s view holder needs to work with the new layout code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we defined `TaskItemAdapter` (the recycler view’s adapter), we included
    a `TaskItemViewHolder` inner class. We used it to inflate the layout (a text view)
    associated with each item in the recycler view, and populate it with the task’s
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of the code we used for the original inner class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0654-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we’ve changed *task_item.xml*, we need to update `TaskItemViewHolder`
    so that it works with the new layout. To do this we need to make three changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Update the view holder’s constructor so that it uses a CardView instead of
    a TextView.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Change the inflateFrom() method so that it inflates each item’s layout as
    a CardView.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update the bind() method so that it populates the layout’s text view and
    checkbox with the item’s taskName and taskDone property values.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’re already familiar with the code that’s needed to make these changes, so
    we’ll show you the updated code for `TaskItemAdapter`—and its `TaskItemViewHolder`
    inner class—on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TaskItemAdapter.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated `TaskItemAdapter` code that works with the new layout code;
    update the code for *TaskItemAdapter.kt* so that it includes the changes below
    (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0655-02.png)![image](Images/f0656-02.png)'
  prefs: []
  type: TYPE_IMG
- en: What the recycler view looks like so far
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we were to run the app after updating the code for *task_item.xml* and *TaskItemAdapter.kt*,
    we’d see a recycler view that displays tasks in a vertical list of card views
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0657-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The recycler view arranges the cards in this way because we specified in *fragment_tasks.xml*
    that it must use a linear layout manager like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0657-03.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, this layout manager arranges items in a vertical list with full-length
    rows. You can, however, include extra options—or use a different type of layout
    manager—to change the way in which items are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at some of the possible options.
  prefs: []
  type: TYPE_NORMAL
- en: The layout manager gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some of the other ways in which you might want to arrange items in
    a recycler view, and how to create each one.
  prefs: []
  type: TYPE_NORMAL
- en: Display items in a horizontal row
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A linear layout manager displays items in a vertical list by default. You can,
    however, display items in a horizontal row instead by changing the orientation
    to horizontal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0658-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Use GridLayoutManager to display items in a grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to arrange items in a grid, try using a `GridLayoutManager`. Use
    `app:spanCount` to specify how many columns the grid should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0658-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Arrange items in a staggered grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your items have unequal sizes, you can use a `StaggeredGridLayoutManager`
    instead like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0658-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s apply one of these styles to the Tasks app’s recycler view, and see what
    happens when the app runs.
  prefs: []
  type: TYPE_NORMAL
- en: Update fragment_tasks.xml to arrange items in a grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to update the recycler view so that it arranges its items in a
    grid with two columns. The updated layout code for this change is shown below;
    update *fragment_tasks.xml* to include these changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0659-02.png)'
  prefs: []
  type: TYPE_IMG
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0660-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment sets the TaskItemAdapter’s data property to a List<Task>.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TasksFragment` gets this `List<Task>` by observing `TasksViewModel`’s `tasks`
    property.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0660-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onCreateViewHolder() method is called for each item that
    needs to be displayed in the recycler view.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This creates a `TaskItemViewHolder` for each item. A layout (defined by *task_item.xml*)
    is inflated for each view holder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0660-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onBindViewHolder() is called for each TaskItemViewHolder.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This binds data to the views in each view holder’s layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0661-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The recycler view uses its layout manager to arrange its items.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the recycler view uses a `GridLayoutManager` with a `spanCount` of 2, it
    arranges items in a grid with two columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0661-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Each time TasksViewModel’s tasks property gets updated, TasksFragment passes
    an updated List<Task> to the TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Steps 3 to 5 are repeated so the recycler view stays up-to-date.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0661-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment`’s recycler view displays a grid of cards,
    each one showing a task name and whether the task has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter new tasks, these get added to the recycler view as soon as we
    click on the Save Task button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0662-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to control the recycler view’s appearance
    with layout managers, and display data in a scrollable grid of cards.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll build on this knowledge to make further improvements
    to the recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your **goal** is to update the layout code below so that it includes a recycler
    view that displays its items in a three-column staggered grid. Take code snippets
    from the pool and place them into the blank lines in the code. You may **not**
    use the same snippet more than once, and you won’t need to use all the snippets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0663-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: each thing from the pool can only be used once!**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr.png) **Answers in [“Pool Puzzle Solution”](#pool_puzzle_solution-id00248).**'
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your **goal** is to update the layout code below so that it includes a recycler
    view that displays its items in a three-column staggered grid. Take code snippets
    from the pool and place them into the blank lines in the code. You may **not**
    use the same snippet more than once, and you won’t need to use all the snippets.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0668-01.png)![image](Images/f0668-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view)
    under your belt and now you’ve added recycler views to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0669-01.png)'
  prefs: []
  type: TYPE_IMG
