["```\ntype Stage {\n  id: ID!\n  name: String!\n  performances: [Performance]\n}\n```", "```\n~ npx create-react-app festivalapp\n~ cd festivalapp\n```", "```\n~ npm install aws-amplify antd @aws-amplify/ui-react react-router-dom\n```", "```\n~ amplify init\n\n# Follow the steps to give the project a name, environment name, and set the\n  default text editor.\n# Accept defaults for everything else and choose your AWS Profile.\n```", "```\n~ amplify add auth\n\n? Do you want to use the default authentication and security configuration?\n  Default configuration\n? How do you want users to be able to sign in? Username\n? Do you want to configure advanced settings? Yes\n? What attributes are required for signing up? Email\n? Do you want to enable any of the following capabilities? Add User to Group\n? Enter the name of the group to which users will be added. Admin\n? Do you want to edit your add-to-group function now? Y\n```", "```\n// amplify/backend/function/<function_name>/src/add-to-group.js\n\nconst aws = require('aws-sdk');\n\nexports.handler = async (event, context, callback) => {\n  const cognitoProvider = new\n  aws.CognitoIdentityServiceProvider({\n    apiVersion: '2016-04-18'\n  });\n\n  let isAdmin = false\n  /* set your admin emails here */\n  const adminEmails = ['user1@somedomain.com', 'user2@somedomain.com']\n\n  // If the user is one of the admins, set the isAdmin variable to true\n  if (adminEmails.indexOf(event.request.userAttributes.email) !== -1) {\n    isAdmin = true\n  }\n\n  const groupParams = {\n    UserPoolId: event.userPoolId,\n  }\n\n  const userParams = {\n    UserPoolId: event.userPoolId,\n    Username: event.userName,\n  }\n\n  if (isAdmin) {\n    groupParams.GroupName = 'Admin',\n    userParams.GroupName = 'Admin'\n\n    // First check to see if the groups exists, and if not create the group\n    try {\n      await cognitoProvider.getGroup(groupParams).promise();\n    } catch (e) {\n      await cognitoProvider.createGroup(groupParams).promise();\n    }\n\n    // If the user is an administrator, place them in the Admin group\n    try {\n      await cognitoProvider.adminAddUserToGroup(userParams).promise();\n      callback(null, event);\n    } catch (e) {\n      callback(e);\n    }\n  } else {\n    // If the user is in neither group, proceed with no action\n    callback(null, event)\n  }\n}\n```", "```\n~ amplify add api\n\n? Please select from one of the below mentioned services: GraphQL\n? Provide API name: festivalapi\n? Choose an authorization type for the API: Amazon Cognito User Pool\nDo you want to configure advanced settings for the GraphQL API: Yes\n? Configure additional auth types? Y\n? Choose the additional authorization types you want to configure for the API:\n  API key\n? Enter a description for the API key: public (or a custom description)\n? After how many days from now the API key should expire: 365 (or a custom\n  expiration date)\n? Configure conflict detection? N\n? Do you have an annotated GraphQL schema? N\n? Do you want a guided schema creation? Y\n? What best describes your project: Single object with fields\n? Do you want to edit the schema now? Y\n```", "```\ntype Stage @model\n  @auth(rules: [\n  { allow: public, operations: [read] },\n  { allow: groups, groups: [\"Admin\"] }\n]) {\n  id: ID!\n  name: String!\n  performances: [Performance] @connection(keyName: \"byStageId\", fields: [\"id\"])\n}\n\ntype Performance @model\n  @key(name: \"byStageId\", fields: [\"performanceStageId\"])\n  @auth(rules: [\n  { allow: public, operations: [read] },\n  { allow: groups, groups: [\"Admin\"] }\n]) {\n  id: ID!\n  performanceStageId: ID!\n  productID: ID\n  performer: String!\n  imageUrl: String\n  description: String!\n  time: String\n  stage: Stage @connection\n}\n```", "```\n~ amplify push\n```", "```\n~ cd src\n~ touch Container.js Footer.js Nav.js Admin.js Router.js Performance.js Home.js\n```", "```\n/* src/index.js */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\nimport 'antd/dist/antd.css';\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\nReactDOM.render(<Router />, document.getElementById('root'));\n```", "```\n/* src/Container.js */\nimport React from 'react'\n\nexport default function Container({ children }) {\n  return (\n    <div style={container}>\n      {children}\n    </div>\n  )\n}\n\nconst container = {\n  padding: '30px 40px',\n  minHeight: 'calc(100vh - 120px)'\n}\n```", "```\n/* src/Footer.js */\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Footer() {\n  return (\n    <div style={footerStyle}>\n      <Link to=\"/admin\">\n        Admins\n      </Link>\n    </div>\n  )\n}\n\nconst footerStyle = {\n  borderTop: '1px solid #ddd',\n  display: 'flex',\n  alignItems: 'center',\n  padding: 20\n}\n\nexport default Footer\n```", "```\n/* src/Nav.js */\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { HomeOutlined } from '@ant-design/icons'\n\nconst Nav = (props) => {\n  const { current } = props\n  return (\n    <div>\n      <Menu selectedKeys={[current]} mode=\"horizontal\">\n        <Menu.Item key='home'>\n          <Link to={`/`}>\n            <HomeOutlined />Home\n          </Link>\n        </Menu.Item>\n      </Menu>\n    </div>\n  )\n}\n\nexport default Nav\n```", "```\n/* src/Admin.js */\nimport React from 'react'\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react'\nimport { Auth } from 'aws-amplify'\nimport { Button } from 'antd'\n\nfunction Admin() {\n  return (\n    <div>\n      <h1 style={titleStyle}>Admin</h1>\n      <AmplifySignOut />\n    </div>\n  )\n}\n\nconst titleStyle = {\n  fontWeight: 'normal',\n  margin: '0px 0px 10px 0px'\n}\n\nexport default withAuthenticator(Admin)\n```", "```\n/* src/Router.js */\nimport React, { useState, useEffect } from 'react'\nimport { HashRouter, Switch, Route } from 'react-router-dom'\n\nimport Home from './Home'\nimport Admin from './Admin'\nimport Nav from './Nav'\nimport Footer from './Footer'\nimport Container from './Container'\nimport Performance from './Performance'\n\nconst Router = () => {\n  const [current, setCurrent] = useState('home')\n  useEffect(() => {\n    setRoute()\n    window.addEventListener('hashchange', setRoute)\n    return () =>  window.removeEventListener('hashchange', setRoute)\n  }, [])\n  function setRoute() {\n    const location = window.location.href.split('/')\n    const pathname = location[location.length-1]\n    setCurrent(pathname ? pathname : 'home')\n  }\n  return (\n    <HashRouter>\n      <Nav current={current} />\n      <Container>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/performance/:id\" component={Performance} />\n          <Route exact path=\"/admin\" component={Admin}/>\n        </Switch>\n      </Container>\n      <Footer />\n    </HashRouter>\n  )\n}\n\nexport default Router\n```", "```\n/performance/:id\n```", "```\n/performance/100\n```", "```\n/* src/Performance.js */\nimport React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getPerformance } from './graphql/queries'\nimport { API } from 'aws-amplify'\n\nfunction Performance() {\n  const [performance, setPerformance] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  let { id } = useParams()\n  useEffect(() => {\n    fetchPerformanceInfo()\n  }, [])\n  async function fetchPerformanceInfo() {\n    try {\n      const talkInfo = await API.graphql({\n        query: getPerformance,\n        variables: { id },\n        authMode: 'API_KEY'\n      })\n      setPerformance(talkInfo.data.getPerformance)\n      setLoading(false)\n    } catch (err) {\n      console.log('error fetching talk info...', err)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div>\n      <p>Performance</p>\n      { loading && <h3>Loading...</h3>}\n      {\n        performance && (\n          <div>\n            <h1>{performance.performer}</h1>\n            <h3>{performance.time}</h3>\n            <p>{performance.description}</p>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Performance\n```", "```\n/* src/Home.js */\nimport React, { useEffect, useState } from 'react'\nimport { API } from 'aws-amplify'\nimport { listStages } from './graphql/queries'\nimport { Link } from 'react-router-dom'\nimport { List } from 'antd';\n\nfunction Home() {\n  const [stages, setStages] = useState([])\n  const [loading, setLoading] = useState(true)\n  useEffect(() => {\n    getStages()\n  }, [])\n  async function getStages() {\n    const apiData = await API.graphql({\n      query: listStages,\n      authMode: 'API_KEY'\n    })\n    const { data: { listStages: { items }}} = apiData\n    setLoading(false)\n    setStages(items)\n  }\n\n  return (\n    <div>\n     <h1 style={heading}>Stages</h1>\n      { loading && <h2>Loading...</h2>}\n      {\n        stages.map(stage => (\n          <div key={stage.id} style={stageInfo}>\n            <p style={infoHeading}>{stage.name}</p>\n            <p style={infoTitle}>Performances</p>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={stage.performances.items}\n              renderItem={performance => (\n                <List.Item>\n                  <List.Item.Meta\n                   title={<Link style={performerInfo}\n                   to={`/performance/${\n                         performance.id}`}>{\n                         performance.performer}</Link>\n                   }\n                   description={performance.time}\n                  />\n                </List.Item>\n              )}\n            />\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nconst heading = { fontSize: 44, fontWeight: 300, marginBottom: 5 }\nconst stageInfo = { padding: '20px 0px 10px', borderBottom: '2px solid #ddd' }\nconst infoTitle = { fontWeight: 'bold' , fontSize: 18 }\nconst infoHeading = { fontSize: 30, marginBottom: 5 }\nconst performerInfo = { fontSize: 24 }\n\nexport default Home\n```", "```\n/* src/graphql/queries.js */\n\nexport const listStages = /* GraphQL */ `\n  query ListStages(\n    $filter: ModelStageFilterInput\n    $nextToken: String\n  ) {\n    listStages(filter: $filter, limit: 500, nextToken: $nextToken) {\n      items {\n        id\n        name\n        performances {\n          items {\n            id\n            time\n            performer\n            description\n          }\n        }\n      }\n      nextToken\n    }\n  }\n`;\n```", "```\n~ npm start\n```", "```\n~ amplify console api\n\n> Choose GraphQL\n```", "```\nmutation createStage {\n  createStage(input: {\n    id: \"stage-1\"\n    name: \"Stage 1\"\n  }) {\n    id name\n  }\n}\n\nmutation createPerformance {\n  createPerformance(input: {\n    performanceStageId: \"stage-1\"\n    performer: \"Dreek\"\n    description: \"Dreek LIVE in NYC! Don't miss out, performing\n                  all of the hits with a few surprise performances!\"\n    time: \"Monday, May 4 2022\"\n  }) {\n    id performer description\n  }\n}\n```"]