- en: Appendix. Building Your Own Kubernetes Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录. 搭建你自己的Kubernetes集群
- en: While Kubernetes is often experienced through the virtual world of public cloud
    computing, where the closest you get to your cluster is a web browser or a terminal,
    it can be a very rewarding experience to physically build a Kubernetes cluster
    on bare metal. Likewise, nothing compares to physically pulling the power or network
    on a node and watching how Kubernetes reacts to heal your application to convince
    you of its utility.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通常通过公共云计算的虚拟世界来体验，你只需在网页浏览器或终端中操作，距离你的集群非常近。但在裸机上物理搭建一个Kubernetes集群可能会带来非常丰富的体验。同样地，看到你随意断开某个节点的电源或网络，然后观察Kubernetes如何恢复你的应用程序，你会深信其实用性。
- en: Building your own cluster might seem like both a challenging and an expensive
    effort, but fortunately it is neither. The ability to purchase low-cost, system-on-chip
    computer boards, as well as a great deal of work by the community to make Kubernetes
    easier to install, means that it is possible to build a small Kubernetes cluster
    in a few hours.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自己搭建集群可能看起来既具有挑战性又昂贵，但幸运的是实际上都不是。购买低成本的片上系统计算机板的能力，以及社区为了让Kubernetes更易安装而做出的大量工作，意味着你可以在几个小时内建立一个小型Kubernetes集群。
- en: In the following instructions, we focus on building a cluster of Raspberry Pi
    machines, but with slight adaptations, the same instructions could be made to
    work with a variety of different single-board machines or any other computers
    you may have around.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的说明中，我们专注于搭建一组Raspberry Pi机器的集群，但稍作调整，同样的说明也可以用于各种不同的单板机器或者你周围的任何其他计算机。
- en: Parts List
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零件清单
- en: The first thing you need to do is assemble the pieces for your cluster. In all
    the examples here, we assume a four-node cluster. You could build a cluster of
    three nodes, or even a cluster of a hundred nodes if you wanted to, but four is
    a pretty good number. To start, you’ll need to purchase (or scrounge) the various
    pieces needed to build the cluster.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 搭建集群的第一步是准备好所有的零件。在这里的所有示例中，我们假设是一个四节点的集群。你也可以建立一个三节点或者甚至一百节点的集群，但四节点是一个相当好的选择。首先，你需要购买（或者搜刮到）搭建集群所需的各种零件。
- en: 'Here is the shopping list, with some approximate prices as of the time of writing:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是购物清单，列出了一些写作时的大致价格：
- en: Four Raspberry Pi 4 machines with at least 2 GB of memory—$180
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四台Raspberry Pi 4机器，每台至少配备2 GB内存— $180
- en: Four SDHC memory cards, at least 8 GB (buy high-quality ones!)—$30–50
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四张至少8 GB的SDHC存储卡（务必购买高质量的！）— $30–50
- en: Four 12-inch Cat. 6 Ethernet cables—$10
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四根12英寸Cat. 6以太网线— $10
- en: Four 12-inch USB-A to USB-C cables—$10
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四根12英寸USB-A到USB-C电缆— $10
- en: One 5-port 10/100 fast Ethernet switch—$10
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个5端口10/100快速以太网交换机— $10
- en: One 5-port USB charger—$25
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个5端口USB充电器— $25
- en: One Raspberry Pi stackable case capable of holding four Pis—$40 (or build your
    own)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个能容纳四个Pi的Raspberry Pi堆叠盒子— $40（或者自己动手建造）
- en: One USB-to-barrel plug for powering the Ethernet switch (optional)—$5
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个用于给以太网交换机供电的USB到插口插头（可选）— $5
- en: The total for the cluster comes to about $300, which you can drop down to $200
    by building a three-node cluster and skipping the case and the USB power cable
    for the switch (though the case and the cable really clean up the whole cluster).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 整个集群的总成本约为$300，如果你建立一个三节点集群并且跳过盒子和交换机的USB电源电缆，你可以将成本降低到$200（尽管盒子和电缆确实能使整个集群更加整洁）。
- en: 'One other note on memory cards: do not scrimp here. Low-end memory cards behave
    unpredictably and make your cluster really unstable. If you want to save some
    money, buy a smaller, high-quality card. High-quality 8 GB cards can be had for
    around $7 each online.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于存储卡的另一个注意事项：不要省钱在这里。低端存储卡表现不可预测，会使你的集群非常不稳定。如果你想节省一些钱，可以购买较小但高质量的存储卡。在线购买高质量的8
    GB存储卡大约每张约$7。
- en: Once you have your parts, you’re ready to move on to building the cluster.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你准备好了所有零件，你就可以继续搭建集群了。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: These instructions also assume that you have a device capable of flashing an
    SDHC card. If you do not, you will need to purchase a USB memory card reader/writer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明还假设你有一个能够刷写SDHC卡的设备。如果没有，你需要购买一个USB存储卡读写器。
- en: Flashing Images
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刷写镜像
- en: 'The default Ubuntu 20.04 image supports Raspberry Pi 4 and also is a common
    operating system used by many Kubernetes clusters. The easiest way to install
    that is using the Raspberry Pi Imager provided by the [Raspberry Pi project](https://oreil.ly/4s8Wa):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Ubuntu 20.04镜像支持Raspberry Pi 4，也是许多Kubernetes集群常用的操作系统。安装它的最简单方法是使用由[Raspberry
    Pi项目](https://oreil.ly/4s8Wa)提供的Raspberry Pi Imager：
- en: '[macOS](https://oreil.ly/g7Lzw)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[macOS](https://oreil.ly/g7Lzw)'
- en: '[Windows](https://oreil.ly/Y7CD3)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Windows](https://oreil.ly/Y7CD3)'
- en: '[Linux](https://oreil.ly/u4YvC)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Linux](https://oreil.ly/u4YvC)'
- en: Use the imager to write the Ubuntu 20.04 image onto each of your memory cards.
    Ubuntu may not be the default image choice in the imager, but you can select it
    as an option.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用映像工具将 Ubuntu 20.04 映像写入每张存储卡。在映像工具中，Ubuntu 可能不是默认的映像选择，但您可以选择它作为选项。
- en: First Boot
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首次启动
- en: The first thing to do is to boot just your API server node. Assemble your cluster,
    and decide which is going to be the API server node. Insert the memory card, plug
    the board into an HDMI output, and plug a keyboard into the USB port.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是仅启动 API 服务器节点。组装您的集群，并决定哪一个将是 API 服务器节点。插入存储卡，将板子插入 HDMI 输出，并将键盘插入 USB
    端口。
- en: Next, attach the power to boot the board.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接电源以启动板子。
- en: Log in at the prompt using the username **`ubuntu`** and the password **`ubuntu`**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符下使用用户名**`ubuntu`**和密码**`ubuntu`**登录。
- en: Warning
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The very first thing you should do with your Raspberry Pi (or any new device)
    is to change the default password. The default password for every type of install
    everywhere is well known by people who will misbehave given a default login to
    a system. This makes the internet less safe for everyone. Please change your default
    passwords!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Raspberry Pi（或任何新设备）的第一件事是更改默认密码。每种安装的默认密码都是众所周知的，这使得那些有意恶作剧的人可以访问系统的默认登录。这会让互联网对所有人都不安全。请更改默认密码！
- en: Repeat these steps for each of the nodes in your cluster.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为您集群中的每个节点重复这些步骤。
- en: Setting Up Networking
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置网络
- en: 'The next step is to set up networking on the API server. Setting up networking
    for a Kubernetes cluster can be complicated. In the following example, we are
    setting up a network where a single machine is attached to the internet using
    wireless networking; this machine is also connected to a cluster network over
    wired Ethernet and provides a DHCP (Dynamic Host Configuration Protocol) server
    to provide a network address to the remaining nodes in the cluster. An illustration
    of this network is shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在 API 服务器上设置网络。为 Kubernetes 集群设置网络可能会很复杂。在以下示例中，我们正在设置一个网络，其中一台机器通过无线网络连接到互联网；这台机器还通过有线以太网连接到集群网络，并提供
    DHCP 服务器以向集群中的其余节点提供网络地址。此网络的示例如下图所示：
- en: '![kur3 aain01](assets/kur3_aain01.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![kur3 aain01](assets/kur3_aain01.png)'
- en: Decide which of your boards will host the API server and `etcd`. It’s often
    easiest to remember which one this is by making it the top or bottom node in your
    stack, but some sort of label also works.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 决定哪个板子将托管 API 服务器和`etcd`。通常最容易记住这一点的方法是将其设置为堆栈中的顶部或底部节点，但也可以使用某种标签。
- en: 'To do this, edit the file */etc/netplan/50-cloud-init.yaml*. If this file doesn’t
    exist, you can create it. The contents of the file should look like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请编辑文件*/etc/netplan/50-cloud-init.yaml*。如果不存在此文件，您可以创建它。文件的内容应如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sets the main Ethernet interface to have the statically allocated address
    10.0.0.1 and sets up the WiFi interface to connect to your local WiFi. You should
    then run `sudo netplan apply` to pick up these new changes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使主要以太网接口具有静态分配的地址 10.0.0.1，并设置 WiFi 接口以连接到您的本地 WiFi。然后运行`sudo netplan apply`来应用这些新变更。
- en: Reboot the machine to claim the 10.0.0.1 address. You can validate that this
    is set correctly by running `ip addr` and looking at the address for the `eth0`
    interface. Also validate that the connection to the internet works correctly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动机器以获取 10.0.0.1 地址。您可以通过运行`ip addr`并查看`eth0`接口的地址来验证设置是否正确。还要验证与互联网的连接是否正常。
- en: 'Next, we’re going to install DHCP on this API server so it will allocate addresses
    to the worker nodes. Run:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将在此 API 服务器上安装 DHCP，以便为工作节点分配地址。运行:'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then configure the DHCP server as follows (*/etc/dhcp/dhcpd.conf*):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按以下方式配置 DHCP 服务器（*/etc/dhcp/dhcpd.conf*）：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You may also need to edit */etc/default/isc-dhcp-server* to set the `INTERFACES`
    environment variable to `eth0`. Restart the DHCP server with `sudo systemctl restart
    isc-dhcp-server`. Now your machine should be handing out IP addresses. You can
    test this by hooking up a second machine to the switch via Ethernet. This second
    machine should get the address 10.0.0.2 from the DHCP server.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还需要编辑*/etc/default/isc-dhcp-server*以将`INTERFACES`环境变量设置为`eth0`。使用`sudo systemctl
    restart isc-dhcp-server`重新启动 DHCP 服务器。现在您的机器应该正在分配 IP 地址。您可以通过通过以太网连接第二台机器到交换机来测试这一点。第二台机器应该从
    DHCP 服务器获得 10.0.0.2 地址。
- en: Remember to edit the */etc/hostname* file to rename this machine to `node-1`.
    To help Kubernetes do its networking, you also need to set up `iptables` so that
    it can see bridged network traffic. Create a file at */etc/modules-load.d/k8s.conf*
    that just contains `br_netfilter`. This will load the `br_netfilter` module into
    your kernel.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 记得编辑 */etc/hostname* 文件，将此机器重命名为 `node-1`。为了帮助 Kubernetes 进行网络设置，还需要设置 `iptables`，使其能够看到桥接网络流量。在
    */etc/modules-load.d/k8s.conf* 创建一个文件，只包含 `br_netfilter`。这将在您的内核中加载 `br_netfilter`
    模块。
- en: 'Next you need to enable some `systemctl` settings for network bridging and
    address translation (NAT) so that Kubernetes networking will work, and your nodes
    can reach the public internet. Create a file named */etc/sysctl.d/k8s.conf* and
    add:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要为网络桥接和地址转换（NAT）启用一些 `systemctl` 设置，以使 Kubernetes 网络正常工作，并且您的节点能够访问公共互联网。创建名为
    */etc/sysctl.d/k8s.conf* 的文件，并添加以下内容：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then edit */etc/rc.local* (or the equivalent) and add `iptables` rules for
    forwarding from `eth0` to `wlan0` (and back):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后编辑 */etc/rc.local* 文件（或等效文件），添加 `iptables` 规则以从 `eth0` 转发到 `wlan0`（以及反向）：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At this point, the basic networking setup should be complete. Plug in and power
    up the remaining two boards (you should see them assigned the addresses 10.0.0.3
    and 10.0.0.4). Edit the */etc/hostname* file on each machine to name them `node-2`
    and `node-3`, respectively.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，基本的网络设置应该已经完成。插入并启动其余两个板（应该看到它们被分配了地址 10.0.0.3 和 10.0.0.4）。在每台机器上编辑 */etc/hostname*
    文件，分别命名为 `node-2` 和 `node-3`。
- en: Validate this by first looking at */var/lib/dhcp/dhcpd.leases*, and then SSH
    to the nodes (remember again to change the default password first thing). Validate
    that the nodes can connect to the external internet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先查看 */var/lib/dhcp/dhcpd.leases* 验证，然后 SSH 到节点（记得首先更改默认密码）。确认节点能够连接到外部互联网。
- en: Installing a Container Runtime
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装容器运行时
- en: Before you can install Kubernetes, you need to install a container runtime.
    There are several possible runtimes you can use, but the most broadly adopted
    is `containerd` from Docker. `containerd` is provided by the standard Ubuntu package
    manager, but its version tends to lag a little bit. It’s a little more work, but
    we recommend installing it from the Docker project itself.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Kubernetes 之前，您需要先安装一个容器运行时。有几种可能的运行时可供选择，但最广泛采用的是来自 Docker 的 `containerd`。`containerd`
    由标准的 Ubuntu 软件包管理器提供，但其版本有点滞后。虽然需要多做一些工作，但我们建议从 Docker 项目自身安装它。
- en: 'The first step is to set up Docker as a repository for installing packages
    on your system:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将 Docker 设置为系统上安装软件包的仓库：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As a final step, create the file */etc/apt/sources.list.d/docker.list* with
    the following contents:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，创建文件 */etc/apt/sources.list.d/docker.list*，内容如下：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that you have installed the Docker package repository, you can install
    `containerd.io` by running the following command. It is important to install `containerd.io`,
    not `containerd`, to get the Docker package instead of the default Ubuntu package:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了 Docker 软件包仓库，可以通过运行以下命令安装 `containerd.io`。重要的是要安装 `containerd.io`，而不是
    `containerd`，以获取 Docker 软件包，而不是默认的 Ubuntu 软件包：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point, `containerd` is installed, but you need to configure it since
    the configuration supplied by the package won’t work with Kubernetes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，`containerd` 已经安装完毕，但您需要配置它，因为软件包提供的配置不能满足 Kubernetes 的需求：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that you have a container runtime installed, you can move on to installing
    Kubernetes itself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了容器运行时，可以继续安装 Kubernetes 自身了。
- en: Installing Kubernetes
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Kubernetes
- en: At this point you should have all nodes up with IP addresses and capable of
    accessing the internet. Now it’s time to install Kubernetes on all of the nodes.
    Using SSH, run the following commands on all nodes to install the `kubelet` and
    `kubeadm` tools.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，所有节点应该已经启动，并具有 IP 地址，并且能够访问互联网。现在是在所有节点上安装 Kubernetes 的时候了。使用 SSH，在所有节点上运行以下命令安装
    `kubelet` 和 `kubeadm` 工具。
- en: 'First, add the encryption key for the packages:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加软件包的加密密钥：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then add the repository to your list of repositories:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将该仓库添加到您的仓库列表中：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, update and install the Kubernetes tools. This will also update all
    packages on your system for good measure:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新并安装 Kubernetes 工具。这也会更新系统上的所有软件包，以确保一切正常：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Setting Up the Cluster
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置集群
- en: 'On the API server node (the one running DHCP and connected to the internet),
    run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 DHCP 和连接到互联网的 API 服务器节点上运行：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that you are advertising your internal-facing IP address, not your external
    address.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您正在广告您的内部 IP 地址，而不是外部地址。
- en: 'Eventually, this will print out a command for joining nodes to your cluster.
    It will look something like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这将打印出一个命令，用于将节点加入到您的集群中。它看起来会像这样：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: SSH onto each of the worker nodes in your cluster and run that command.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 到集群中每个工作节点，并运行该命令。
- en: 'When all of that is done, you should be able to run this command and see your
    working cluster:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有这些都完成后，您应该能够运行此命令并查看您的工作集群：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Setting Up Cluster Networking
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置集群网络
- en: You have your node-level networking set up, but you still need to set up the
    Pod-to-Pod networking. Since all of the nodes in your cluster are running on the
    same physical Ethernet network, you can simply set up the correct routing rules
    in the host kernels.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经设置好了节点级网络，但仍然需要设置 Pod 到 Pod 的网络。由于集群中的所有节点都在同一物理以太网网络上运行，因此您可以简单地在主机内核中设置正确的路由规则。
- en: 'The easiest way to manage this is to use the [Flannel tool](https://oreil.ly/ltaOv)
    created by CoreOS and now supported by the [Flannel project](https://oreil.ly/RHfMH).
    Flannel supports a number of different routing modes; we will use the `host-gw`
    mode. You can download an example configuration from the [Flannel project page](https://github.com/coreos/flannel):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 管理此操作的最简单方法是使用由 CoreOS 创建并现在由 [Flannel 项目](https://oreil.ly/RHfMH) 支持的 [Flannel
    工具](https://oreil.ly/ltaOv)。Flannel 支持多种不同的路由模式；我们将使用 `host-gw` 模式。您可以从 [Flannel
    项目页面](https://github.com/coreos/flannel) 下载一个示例配置文件。
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The default configuration that Flannel supplies uses `vxlan` mode instead. To
    fix this, open up that configuration file in your favorite editor; replace `vxlan`
    with `host-gw`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Flannel 提供的默认配置使用 `vxlan` 模式。要修复此问题，请在您喜欢的编辑器中打开该配置文件；将 `vxlan` 替换为 `host-gw`。
- en: 'You can also do this with the `sed` tool in place:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `sed` 工具来完成此操作：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you have your updated *kube-flannel.yaml* file, you can create the Flannel
    networking setup with:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您更新了 *kube-flannel.yaml* 文件，您就可以使用以下命令创建 Flannel 网络设置：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will create two objects, a ConfigMap used to configure Flannel and a DaemonSet
    that runs the actual Flannel daemon. You can inspect these with:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建两个对象，一个用于配置 Flannel 的 ConfigMap 和一个运行实际 Flannel 守护程序的 DaemonSet。您可以使用以下命令检查它们：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point, you should have a working Kubernetes cluster operating on your
    Raspberry Pis. This can be great for exploring Kubernetes. Schedule some jobs,
    open up the UI, and try breaking your cluster by rebooting machines or disconnecting
    the network.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该已经在您的树莓派上运行一个工作的 Kubernetes 集群。这对于探索 Kubernetes 非常有用。安排一些任务，打开 UI，并尝试通过重新启动机器或断开网络来破坏您的集群。
