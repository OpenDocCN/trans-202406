- en: 'Chapter 3\. Know Your Variables: Primitives and References'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0049-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Variables can store two types of things: primitives and references. So far
    you’ve used variables in two places—as object **state** (instance variables) and
    as **local** variables (variables declared within a *method*). Later, we’ll use
    variables as **arguments** (values sent to a method by the calling code), and
    as **return types** (values sent back to the caller of the method). You’ve seen
    variables declared as simple **primitive** integer values (type `int`). You’ve
    seen variables declared as something more **complex** like a String or an array.
    But **there’s gotta be more to life** than integers, Strings, and arrays. What
    if you have a PetOwner object with a Dog instance variable? Or a Car with an Engine?
    In this chapter we’ll unwrap the mysteries of Java types (like the difference
    between primited and references) and look at what you can *declare* as a variable,
    what you can *put* in a variable, and what you can *do* with a variable. And we’ll
    finally see what life is *truly* like on the garbage-collectible heap.'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0050-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Java cares about type.** It won’t let you do something bizarre and dangerous
    like stuff a Giraffe reference into a Rabbit variable—what happens when someone
    tries to ask the so-called *Rabbit* to `hop()`? And it won’t let you put a floating-point
    number into an integer variable, unless you *tell the compiler* that you know
    you might lose precision (like, everything after the decimal point).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The compiler can spot most problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Don’t expect that to compile. *Thankfully*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For all this type-safety to work, you must declare the type of your variable.
    Is it an integer? a Dog? A single character? Variables come in two flavors: ***primitive***
    and ***object reference***. Primitives hold fundamental values (think: simple
    bit patterns) including integers, booleans, and floating-point numbers. Object
    references hold, well, *references* to *objects* (gee, didn’t *that* clear it
    up).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll look at primitives first and then move on to what an object reference
    really means. But regardless of the type, you must follow two declaration rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Besides a type, a variable needs a name so that you can use that name in code.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**variables must have a type**'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Besides a type, a variable needs a name so that you can use that name in code.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**variables must have a name**'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0050-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: When you see a statement like: “an object of **type** X,” think of *type*
    and *class* as synonyms. (We’ll refine that a little more in later chapters.)'
  prefs: []
  type: TYPE_NORMAL
- en: “I’d like a double mocha, no, make it an int.”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you think of Java variables, think of cups. Coffee cups, tea cups, giant
    cups that hold lots and lots of your favorite drink, those big cups the popcorn
    comes in at the movies, cups with wonderful tactile handles, and cups with metallic
    trim that you learned can never, ever go in the microwave.
  prefs: []
  type: TYPE_NORMAL
- en: '**A variable is just a cup. A container. It *holds* something.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has a size and a type. In this chapter, we’re going to look first at the
    variables (cups) that hold **primitives**: then a little later we’ll look at cups
    that hold *references to objects*. Stay with us here on the whole cup analogy—as
    simple as it is right now, it’ll give us a common way to look at things when the
    discussion gets more complex. And that’ll happen soon.'
  prefs: []
  type: TYPE_NORMAL
- en: Primitives are like the cups they have at the coffee shop. If you’ve been to
    a Starbucks, you know what we’re talking about here. They come in different sizes,
    and each has a name like “short,” “tall,” and, “I’d like a ‘grande’ mocha half-caff
    with extra whipped cream.”
  prefs: []
  type: TYPE_NORMAL
- en: 'You might see the cups displayed on the counter so you can order appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0051-03.png)'
  prefs: []
  type: TYPE_IMG
- en: And in Java, primitives come in different sizes, and those sizes have names.
    When you declare any variable in Java, you must declare it with a specific type.
    The four containers here are for the four integer primitives in Java.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0051-04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each cup holds a value, so for Java primitives, rather than saying, “I’d like
    a tall french roast,” you say to the compiler, “I’d like an int variable with
    the number 90 please.” Except for one tiny difference...in Java you also have
    to give your cup a *name*. So it’s actually, “I’d like an int please, with the
    value of 2486, and name the variable ***height***.” Each primitive variable has
    a fixed number of bits (cup size). The sizes for the six numeric primitives in
    Java are shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0051-05.png)![image](Images/f0051-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Primitive Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Type | Bit Depth | Value Range |'
  prefs: []
  type: TYPE_TB
- en: '**boolean and char**'
  prefs: []
  type: TYPE_NORMAL
- en: '| boolean | (JVM-specific) | ***true*** or ***false*** |'
  prefs: []
  type: TYPE_TB
- en: '| char 16 | bits | 0 to 65535 |'
  prefs: []
  type: TYPE_TB
- en: '**numeric (all are signed)**'
  prefs: []
  type: TYPE_NORMAL
- en: '***integer***'
  prefs: []
  type: TYPE_NORMAL
- en: '| byte | 8 bits | -128 to 127 |'
  prefs: []
  type: TYPE_TB
- en: '| short | 16 bits | -32768 to 32767 |'
  prefs: []
  type: TYPE_TB
- en: '| int | 32 bits | -2147483648 to 2147483647 |'
  prefs: []
  type: TYPE_TB
- en: '| long | 64 bits | -huge to huge |'
  prefs: []
  type: TYPE_TB
- en: '***floating point***'
  prefs: []
  type: TYPE_NORMAL
- en: '| float | 32 bits | varies |'
  prefs: []
  type: TYPE_TB
- en: '| double | 64 bits | varies |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Primitive declarations with assignments:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0051-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You really don’t want to spill that...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Be sure the value can fit into the variable.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0052-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You can’t put a large value into a small cup.
  prefs: []
  type: TYPE_NORMAL
- en: Well, OK, you can, but you’ll lose some. You’ll get, as we say, *spillage*.
    The compiler tries to help prevent this if it can tell from your code that something’s
    not going to fit in the container (variable/cup) you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can’t pour an int-full of stuff into a byte-sized container,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Why doesn’t this work, you ask? After all, the value of *x* is 24, and 24 is
    definitely small enough to fit into a byte. *You* know that, and *we* know that,
    but all the compiler cares about is that you’re trying to put a big thing into
    a small thing, and there’s the *possibility* of spilling. Don’t expect the compiler
    to know what the value of *x* is, even if you happen to be able to see it literally
    in your code.
  prefs: []
  type: TYPE_NORMAL
- en: '**You can assign a value to a variable in one of several ways including:**'
  prefs: []
  type: TYPE_NORMAL
- en: type a *literal* value after the equals sign (x=*12*, isGood = ***true***, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assign the value of one variable to another (x = y)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use an expression combining the two (x = y + ***43***)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the examples below, the literal values are in bold italics:'
  prefs: []
  type: TYPE_NORMAL
- en: '| int size = ***32***; | declare an int named *size*, assign it the value *32*
    |'
  prefs: []
  type: TYPE_TB
- en: '| `char initial = ***''j'';***` | declare a char named *initial*, assign it
    the value *‘j’* |'
  prefs: []
  type: TYPE_TB
- en: '| `double d = ***456.709;***` | declare a double named *d*, assign it the value
    *456.709* |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean isLearning;` | declare a boolean named *isCrazy* (no assignment)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `isLearning = ***true;***` | assign the value *true* to the previously declared
    *isCrazy* |'
  prefs: []
  type: TYPE_TB
- en: '| `int y = x + ***456***;` | declare an int named *y*, assign it the value
    that is the sum of whatever *x* is now plus *456* |'
  prefs: []
  type: TYPE_TB
- en: Back away from that keyword!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0053-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You know you need a name and a type for your variables.
  prefs: []
  type: TYPE_NORMAL
- en: You already know the primitive types.
  prefs: []
  type: TYPE_NORMAL
- en: '***But what can you use as names?*** The rules are simple. You can name a class,
    method, or variable according to the following rules (the real rules are slightly
    more flexible, but these will keep you safe):'
  prefs: []
  type: TYPE_NORMAL
- en: '**It must start with a letter, underscore (_), or dollar sign ($). You can’t
    start a name with a number.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**After the first character, you can use numbers as well. Just don’t start
    it with a number.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It can be anything you like, subject to those two rules, just so long as
    it isn’t one of Java’s reserved words.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reserved words are keywords (and other things) that the compiler recognizes.
    And if you really want to play confuse-a-compiler, then just *try* using a reserved
    word as a name.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve already seen some reserved words:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0053-02.png)'
  prefs: []
  type: TYPE_IMG
- en: But there are a lot more we haven’t discussed yet. Even if you don’t need to
    know what they mean, you still need to know you can’t use ’em yourself. ***Do
    not—****under any circumstances*—***try to memorize these now.*** To make room
    for these in your head, you’d probably have to lose something else. Like where
    your car is parked. Don’t worry, by the end of the book you’ll have most of them
    down cold.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0053-03.png)'
  prefs: []
  type: TYPE_IMG
- en: This table reserved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| _ | catch | double | float | int | private | super | true |'
  prefs: []
  type: TYPE_TB
- en: '| abstract | char | else | for | interface | protected | switch | try |'
  prefs: []
  type: TYPE_TB
- en: '| assert | class | enum | goto | long | public | synchronized | void |'
  prefs: []
  type: TYPE_TB
- en: '| boolean | const | extends | if | native | return | this | volatile |'
  prefs: []
  type: TYPE_TB
- en: '| break | continue | false | implements | new | short | throw | while |'
  prefs: []
  type: TYPE_TB
- en: '| byte | default | final | import | null | static | throws |  |'
  prefs: []
  type: TYPE_TB
- en: '| case | do | finally | instanceof | package | strictfp | transient |  |'
  prefs: []
  type: TYPE_TB
- en: Java’s keywords, reserved words, and special identifiers. If you use these for
    names, the compiler will probably be very, *very* upset.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling your Dog object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0054-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You know how to declare a primitive variable and assign it a value. But now
    what about non-primitive variables? In other words, *what about objects?*
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: There is actually no such thing as an object variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s only an object reference variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An object reference variable holds bits that represent a way to *access* an
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn’t hold the object itself, but it holds something like a pointer. Or
    an address. Except, in Java we don’t really know *what* is inside a reference
    variable. We *do* know that whatever it is, it represents one and only one object.
    And the JVM knows how to use the reference to get to the object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: You can’t stuff an object into a variable. We often think of it that way...we
    say things like, “I passed the String to the System.out.println() method.” Or,
    “The method returns a Dog” or, “I put a new Foo object into the variable named
    myFoo.”
  prefs: []
  type: TYPE_NORMAL
- en: But that’s not what happens. There aren’t giant expandable cups that can grow
    to the size of any object. Objects live in one place and one place only—the garbage-collectible
    heap! (You’ll learn more about that later in this chapter.)
  prefs: []
  type: TYPE_NORMAL
- en: Although a primitive variable is full of bits representing the actual ***value***
    of the variable, an object reference variable is full of bits representing ***a
    way to get to the object.***
  prefs: []
  type: TYPE_NORMAL
- en: 'You use the dot operator (.) on a reference variable to say, “use the thing
    *before* the dot to get me the thing *after* the dot.” For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: means, “use the object referenced by the variable myDog to invoke the bark()
    method.” When you use the dot operator on an object reference variable, think
    of it like pressing a button on the remote control for that object.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-01.png)'
  prefs: []
  type: TYPE_IMG
- en: An object reference is just another variable value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Something that goes in a cup.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Only this time, the value is a remote control.**'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Primitive Variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The bits representing 7 go into the variable (00000111).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference Variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The bits representing a way to get to the Dog object go into the variable.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Dog object itself does not go into the variable!***'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We don’t care how many 1s and 0s there are in a reference variable. It’s up
    to each JVM and the phase of the moon.
  prefs: []
  type: TYPE_NORMAL
- en: '**The 3 steps of object declaration, creation and assignment**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-01a.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/1circlea.png) **Declare a reference variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tells the JVM to allocate space for a reference variable, and names that variable
    *myDog*. The reference variable is, forever, of type Dog. In other words, a remote
    control that has buttons to control a Dog, but not a Cat or a Button or a Socket.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circleb.png) **Create an object**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tells the JVM to allocate space for a new Dog object on the heap (we’ll learn
    a lot more about that process, especially in [Chapter 9](ch09.xhtml#life_and_death_of_an_object_constructors),
    *Life and Death of an Object*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circlec.png) **Link the object and the reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0055-06.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Assigns the new Dog to the reference variable myDog. In other words, ***programs
    the remote control.***
  prefs: []
  type: TYPE_NORMAL
- en: Java Exposed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0081-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**This week’s interview: Object Reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** So, tell us, what’s life like for an object reference?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** Pretty simple, really. I’m a remote control, and I can be programmed
    to control different objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Do you mean different objects even while you’re running? Like,
    can you refer to a Dog and then five minutes later refer to a Car?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** Of course not. Once I’m declared, that’s it. If I’m a Dog remote
    control, then I’ll never be able to point (oops—my bad, we’re not supposed to
    say *point*), I mean, *refer* to anything but a Dog.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Does that mean you can refer to only one Dog?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** No. I can be referring to one Dog, and then five minutes later
    I can refer to some *other* Dog. As long as it’s a Dog, I can be redirected (like
    reprogramming your remote to a different TV) to it. Unless...no never mind.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** No, tell me. What were you gonna say?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** I don’t think you want to get into this now, but I’ll just give
    you the short version—if I’m marked as *final*, then once I am assigned a Dog,
    I can never be reprogrammed to anything else but *that* one and only Dog. In other
    words, no other object can be assigned to me.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** You’re right, we don’t want to talk about that now. OK, so unless
    you’re *final*, then you can refer to one Dog and then refer to a different Dog
    later. Can you ever refer to *nothing at all*? Is it possible to not be programmed
    to anything?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** Yes, but it disturbs me to talk about it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Why is that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** Because it means I’m `null`, and that’s upsetting to me.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** You mean, because then you have no value?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** Oh, `null` *is* a value. I’m still a remote control, but it’s
    like you brought home a new universal remote control and you don’t have a TV.
    I’m not programmed to control anything. They can press my buttons all day long,
    but nothing good happens. I just feel so...useless. A waste of bits. Granted,
    not that many bits, but still. And that’s not the worst part. If I am the only
    reference to a particular object and then I’m set to `null` (deprogrammed), it
    means that now *nobody* can get to that object I had been referring to.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** And that’s bad because...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:** You have to *ask*? Here I’ve developed a relationship with this
    object, an intimate connection, and then the tie is suddenly, cruelly, severed.
    And I will never see that object again, because now it’s eligible for [producer,
    cue tragic music] *garbage collection*. Sniff. But do you think programmers ever
    consider *that*? Snif. Why, *why* can’t I be a primitive? *I hate being a reference.*
    The responsibility, all the broken attachments...'
  prefs: []
  type: TYPE_NORMAL
- en: Life on the garbage-collectible heap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0057-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Declare two Book reference variables. Create two new Book objects. Assign the
    Book objects to the reference variables.
  prefs: []
  type: TYPE_NORMAL
- en: The two Book objects are now living on the heap.
  prefs: []
  type: TYPE_NORMAL
- en: 'References: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects: 2'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0057-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Declare a new Book reference variable. Rather than creating a new, third Book
    object, assign the value of variable ***c*** to variable ***d.*** But what does
    this mean? It’s like saying “Take the bits in c, make a copy of them, and stick
    that copy into ***d.”***
  prefs: []
  type: TYPE_NORMAL
- en: '**Both *c* and *d* refer to the same object.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The *c* and *d* variables hold two different copies of the same value. Two
    remotes programmed to one TV.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'References: 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects: 2'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0057-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Assign the value of variable *b* to variable *c*. By now you know what this
    means. The bits inside variable *b* are copied, and that new copy is stuffed into
    variable *c.*
  prefs: []
  type: TYPE_NORMAL
- en: '**Both b and c refer to the same object.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The c variable no longer refers to its old Book object.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'References: 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects: 2'
  prefs: []
  type: TYPE_NORMAL
- en: Life and death on the heap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0058-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Declare two Book reference variables. Create two new Book objects. Assign the
    Book objects to the reference variables.
  prefs: []
  type: TYPE_NORMAL
- en: The two book objects are now living on the heap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Active References: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reachable Objects: 2'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0058-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Assign the value of variable ***c*** to variable ***b.*** The bits inside variable
    ***c*** are copied, and that new copy is stuffed into variable ***b.*** Both variables
    hold identical values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Both b and c refer to the same object. Object 1 is abandoned and eligible
    for Garbage Collection (GC).**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Active References: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reachable Objects: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Abandoned Objects: 1'
  prefs: []
  type: TYPE_NORMAL
- en: The first object that ***b*** referenced, Object 1, has no more references.
    It’s *unreachable.*
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0058-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Assign the value `null` to variable ***c.*** This makes ***c*** a *null reference*,
    meaning it doesn’t refer to anything. But it’s still a reference variable, and
    another Book object can still be assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Object 2 still has an active reference (b), and as long as it does, the object
    is not eligible for GC.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Active References: 1'
  prefs: []
  type: TYPE_NORMAL
- en: '*null* References: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reachable Objects: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Abandoned Objects: 1'
  prefs: []
  type: TYPE_NORMAL
- en: An array is like a tray of cups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java standard library includes lots of sophisticated data structures including
    maps, trees, and sets (see [Appendix B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d)),
    but arrays are great when you just want a quick, ordered, efficient list of things.
    Arrays give you fast random access by letting you use an index position to get
    to any element in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every element in an array is just a variable. In other words, one of the eight
    primitive variable types (think: Large Furry Dog) or a reference variable. Anything
    you would put in a *variable* of that type can be assigned to an *array element*
    of that type. So in an array of type int (int[]), each element can hold an int.
    In a Dog array (Dog[]) each element can hold...a Dog? No, remember that a reference
    variable just holds a reference (a remote control), not the object itself. So
    in a Dog array, each element can hold a *remote control* to a Dog. Of course,
    we still have to make the Dog objects...and you’ll see all that on the next page.'
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to notice one key thing in the picture—***the array is an object, even
    though it’s an array of primitives.***
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) Declare an int array variable. An array variable
    is a remote control to an array object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/1circleb.png) Create a new int array with a length of 7, and
    assign it to the previously declared `int[]` variable `nums`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/1circlec.png) Give each element in the array some int value.
    Remember, elements in an int array are just int *variables.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0059-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Arrays are always objects, whether they’re declared to hold primitives or object
    references.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0059-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Arrays are objects too
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can have an array object that’s declared to *hold* primitive values. In
    other words, the array object can have *elements* that are primitives, but the
    array itself is *never* a primitive. **Regardless of what the array holds, the
    array itself is always an object!**
  prefs: []
  type: TYPE_NORMAL
- en: Make an array of Dogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) Declare a Dog array variable'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/1circleb.png) Create a new Dog array with a length of 7, and
    assign it to the previously declared `Dog[]` variable `pets`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**What’s missing?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0060-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Dogs! We have an array of Dog references, but no actual Dog *objects!***'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circlec.png) Create new Dog objects, and assign them to the
    array elements.'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, elements in a Dog array are just Dog reference *variables.* We still
    need Dogs!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0060-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Control your Dog (with a reference variable)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0061-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We created a Dog object and used String the dot operator on the reference variable
    ***fido*** to access the name variable.*
  prefs: []
  type: TYPE_NORMAL
- en: We can use the ***fido*** reference to get the dog to bark() or eat() or chaseCat().
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0061-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What happens if the Dog is in a Dog array?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know we can access the Dog’s instance variables and methods using the dot
    operator, but *on what?*
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Dog is in an array, we don’t have an actual variable name (like ***fido***).
    Instead we use array notation and push the remote control button (dot operator)
    on an object at a particular index (position) in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '*Yes we know we’re not demonstrating encapsulation here, but we’re trying to
    keep it simple. For now. We’ll do encapsulation in [Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance).'
  prefs: []
  type: TYPE_NORMAL
- en: A Dog example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0062-02.png)![image](Images/f0062-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0062-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile
    and run without exception. If they won’t, how would you fix them?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/arr1.png) **Answers in [“Exercise Solutions”](#exercisesolutions).**'
  prefs: []
  type: TYPE_NORMAL
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A working Java program is all scrambled up on the fridge. Can you reconstruct
    the code snippets to make a working Java program that produces the output listed
    below? Some of the curly braces fell on the floor and they were too small to pick
    up, so feel free to add as many of those as you need!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0064-01a.png)![image](Images/f0064-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr1.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_page_6).**'
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)![image](Images/common-06.png)'
  prefs: []
  type: TYPE_IMG
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You **may** use the same snippet more than once, and
    you won’t need to use all the snippets. Your ***goal*** is to make a class that
    will compile and run and produce the output listed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0065-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Bonus Question!**'
  prefs: []
  type: TYPE_NORMAL
- en: For extra bonus points, use snippets from the pool to fill in the missing output
    (above).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0065-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note: Each snippet from the pool can be used more than once!**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0065-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr1.png) **Answers in [“Pool Puzzle”](#pool_puzzle_left_parenthesisfrom_page_65).**'
  prefs: []
  type: TYPE_NORMAL
- en: A Heap o’ Trouble
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: A short Java program is listed to the right. When “// do stuff” is reached,
    some objects and some reference variables will have been created. Your task is
    to determine which of the reference variables refer to which objects. Not all
    the reference variables will be used, and some objects might be referred to more
    than once. Draw lines connecting the reference variables with their matching objects.
  prefs: []
  type: TYPE_NORMAL
- en: '***Tip:*** Unless you’re way smarter than we are, you probably need to draw
    diagrams like the ones in [“Life on the garbage-collectible heap”](#life_on_the_garbage-collectible_heap)–60
    of this chapter. Use a pencil so you can draw and then erase reference links (the
    arrows going from a reference remote control to an object).'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0066-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '| Reference Variables: | HeapQuiz Objects: |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](Images/f0066-02.png) | ![image](Images/f0066-03.png) |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Match each reference variable with matching object(s).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**You might not have to use every reference.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“A Heap o’ Trouble”](#a_heap_oapostrophe_trouble_left_parenthe).**'
  prefs: []
  type: TYPE_NORMAL
- en: The case of the pilfered references
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: It was a dark and stormy night. Tawny strolled into the programmers’ bullpen
    like she owned the place. She knew that all the programmers would still be hard
    at work, and she wanted help. She needed a new method added to the pivotal class
    that was to be loaded into the client’s new top-secret Java-enabled cell phone.
    Heap space in the cell phone’s memory was tight, and everyone knew it. The normally
    raucous buzz in the bullpen fell to silence as Tawny eased her way to the white
    board. She sketched a quick overview of the new method’s functionality and slowly
    scanned the room. “Well folks, it’s crunch time,” she purred. “Whoever creates
    the most memory efficient version of this method is coming with me to the client’s
    launch party on Maui tomorrow...to help me install the new software.”
  prefs: []
  type: TYPE_NORMAL
- en: Five-Minute Mystery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0067-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next morning Tawny glided into the bullpen. “Ladies and Gentlemen,” she
    smiled, “the plane leaves in a few hours, show me what you’ve got!” Bob went first;
    as he began to sketch his design on the white board, Tawny said, “Let’s get to
    the point Bob, show me how you handled updating the list of contact objects.”
    Bob quickly drew a code fragment on the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '“Tawny, I know we’re tight on memory, but your spec said that we had to be
    able to access individual contact information for all ten allowable contacts;
    this was the best scheme I could cook up,” said Bob. Kate was next, already imagining
    coconut cocktails at the party, “Bob,” she said, “your solution’s a bit kludgy,
    don’t you think?” Kate smirked, “Take a look at this baby”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: “I saved a bunch of reference variables worth of memory, Bob-o-rino, so put
    away your sunscreen,” mocked Kate. “Not so fast Kate!” said Tawny, “you’ve saved
    a little memory, but Bob’s coming with me.”
  prefs: []
  type: TYPE_NORMAL
- en: '***Why did Tawny choose Bob’s method over Kate’s, when Kate’s used less memory?***'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Five-Minute Mystery”](#five_minute_mystery_left_parenthesis-10).**'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Sharpen your pencil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Sharpen your pencil”](#sharpen_your_pencil-id00003))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0068-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Code Magnets”](#code_magnets-id000001))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0068-03.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“BE the Compiler”](#be_the_compiler-id00001))
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0068-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0068-05.png)'
  prefs: []
  type: TYPE_IMG
- en: Puzzle Solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Pool Puzzle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (from [“Pool Puzzle”](#pool_puzzle-id00001))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0069-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Five-Minute Mystery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Five-Minute Mystery”](#five_minute_mystery))
  prefs: []
  type: TYPE_NORMAL
- en: '**The case of the pilfered references**'
  prefs: []
  type: TYPE_NORMAL
- en: Tawny could see that Kate’s method had a serious flaw. It’s true that she didn’t
    use as many reference variables as Bob, but there was no way to access any but
    the last of the Contact objects that her method created. With each trip through
    the loop, she was assigning a new object to the one reference variable, so the
    previously referenced object was abandoned on the heap—*unreachable*. Without
    access to nine of the ten objects created, Kate’s method was useless.
  prefs: []
  type: TYPE_NORMAL
- en: (The software was a huge success, and the client gave Tawny and Bob an extra
    week in Hawaii. We’d like to tell you that by finishing this book you too will
    get stuff like that.)
  prefs: []
  type: TYPE_NORMAL
- en: A Heap o’ Trouble
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“A Heap o’ Trouble”](#a_heap_oapostrophe_trouble))
  prefs: []
  type: TYPE_NORMAL
- en: '| **Reference Variables:** | **HeapQuiz Objects:** |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](Images/f0069-02.png) |'
  prefs: []
  type: TYPE_TB
