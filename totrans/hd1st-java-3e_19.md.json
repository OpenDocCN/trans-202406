["```\n    ServerSocketChannel serverChannel = ServerSocketChannel.open();\n    serverChannel.bind(new InetSocketAddress(5000));\n    ```", "```\npublic class SimpleChatClientA {\n  private JTextField outgoing;\n  private PrintWriter writer;\n\n  public void go() {\n     // call the setUpNetworking() method     \n     // make gui and register a listener with the send button\n  }\n\n  private void setUpNetworking() {\n    // open a SocketChannel to the server\n    // make a PrintWriter and assign to writer instance variable\n  } \n\n  private void sendMessage() {\n    // get the text from the text field and\n    // send it to the server using the writer (a PrintWriter)\n  }\n}\n```", "```\nimport java.io.*;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class SimpleChatServer {\n  private final List<PrintWriter> clientWriters = new ArrayList<>();\n\n  public static void main(String[] args) {\n    new SimpleChatServer().go();\n  }\n\n  public void go() {\n    ExecutorService threadPool = Executors.newCachedThreadPool();\n    try {\n      ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n      serverSocketChannel.bind(new InetSocketAddress(5000));\n\n      while (serverSocketChannel.isOpen()) {\n        SocketChannel clientSocket = serverSocketChannel.accept();\n        PrintWriter writer = new PrintWriter(Channels.newWriter(clientSocket, UTF_8));\n        clientWriters.add(writer);\n        threadPool.submit(new ClientHandler(clientSocket));\n        System.out.println(\"got a connection\");\n      }\n    } catch (IOException ex) {\n      ex.printStackTrace();\n    }\n  }\n\n  private void tellEveryone(String message) {\n    for (PrintWriter writer : clientWriters) {\n      writer.println(message);\n      writer.flush();\n    }\n  }\n\n  public class ClientHandler implements Runnable {\n    BufferedReader reader;\n    SocketChannel socket;\n\n    public ClientHandler(SocketChannel clientSocket) {\n      socket = clientSocket;\n      reader = new BufferedReader(Channels.newReader(socket, UTF_8));\n    }\n\n    public void run() {\n      String message;\n      try {\n        while ((message = reader.readLine()) != null) {\n          System.out.println(\"read \" + message);\n          tellEveryone(message);\n      }\n    } catch (IOException ex) {\n      ex.printStackTrace();\n    }\n  }\n }\n}\n```", "```\nThread t = new Thread();\nt.start();\n```", "```\npublic void run() {\n  // code that will be run by the new thread\n}\n```", "```\nclass RunTester {\n  public static void main(String[] args) {\n    MyRunnable runnable = new MyRunnable();\n    runnable.run();\n    System.out.println(Thread.currentThread().getName() +\n                       \": back in main\");\n    Thread.dumpStack();\n  }\n}\n```", "```\nThread.sleep(2000);\n```", "```\ntry {\n  Thread.sleep(2000);\n} catch(InterruptedException ex) {\n    ex.printStackTrace();\n}\n```", "```\nExecutorService threadPool =\n    Executors.newCachedThreadPool();\n```", "```\nthreadPool.execute(() -> run(\"Job 1\"));\n```", "```\nthreadPool.execute(() -> run(\"Job 324\"));\n```"]