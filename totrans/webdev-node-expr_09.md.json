["```\n{\n  \"cookieSecret\": \"...your cookie secret goes here\"\n}\n```", "```\nconst env = process.env.NODE_ENV || 'development'\nconst credentials = require(`./.credentials.${env}`)\nmodule.exports = { credentials }\n```", "```\nconst { credentials } = require('./config')\n```", "```\nconst cookieParser = require('cookie-parser')\napp.use(cookieParser(credentials.cookieSecret))\n```", "```\nres.cookie('monster', 'nom nom')\nres.cookie('signed_monster', 'nom nom', { signed: true })\n```", "```\nconst monster = req.cookies.monster\nconst signedMonster = req.signedCookies.signed_monster\n```", "```\nres.clearCookie('monster')\n```", "```\nconst expressSession = require('express-session')\n// make sure you've linked in cookie middleware before\n// session middleware!\napp.use(expressSession({\n    resave: false,\n    saveUninitialized: false,\n    secret: credentials.cookieSecret,\n}))\n```", "```\nreq.session.userName = 'Anonymous'\nconst colorScheme = req.session.colorScheme || 'dark'\n```", "```\nreq.session.userName = null       // this sets 'userName' to null,\n                                  // but doesn't remove it\n\ndelete req.session.colorScheme    // this removes 'colorScheme'\n```", "```\n{{#if flash}}\n  <div class=\"alert alert-dismissible alert-{{flash.type}}\">\n    <button type=\"button\" class=\"close\"\n      data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    <strong>{{flash.intro}}</strong> {{{flash.message}}}\n  </div>\n{{/if}}\n```", "```\nmodule.exports = (req, res, next) => {\n  // if there's a flash message, transfer\n  // it to the context, then clear it\n  res.locals.flash = req.session.flash\n  delete req.session.flash\n  next()\n})\n```", "```\nconst flashMiddleware = require('./lib/middleware/flash')\napp.use(flashMiddleware)\n```", "```\n// slightly modified version of the official W3C HTML5 email regex:\n// https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\nconst VALID_EMAIL_REGEX = new RegExp('^[a-zA-Z0-9.!#$%&\\'*+\\/=?^_`{|}~-]+@' +\n  '[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?' +\n  '(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$')\n\napp.post('/newsletter', function(req, res){\n    const name = req.body.name || '', email = req.body.email || ''\n    // input validation\n    if(VALID_EMAIL_REGEX.test(email)) {\n      req.session.flash = {\n        type: 'danger',\n        intro: 'Validation error!',\n        message: 'The email address you entered was not valid.',\n      }\n      return res.redirect(303, '/newsletter')\n    }\n    // NewsletterSignup is an example of an object you might create; since\n    // every implementation will vary, it is up to you to write these\n    // project-specific interfaces. This simply shows how a typical\n    // Express implementation might look in your project.\n    new NewsletterSignup({ name, email }).save((err) => {\n        if(err) {\n          req.session.flash = {\n            type: 'danger',\n            intro: 'Database error!',\n            message: 'There was a database error; please try again later.',\n          }\n          return res.redirect(303, '/newsletter/archive')\n        }\n        req.session.flash = {\n          type: 'success',\n          intro: 'Thank you!',\n          message: 'You have now been signed up for the newsletter.',\n        };\n        return res.redirect(303, '/newsletter/archive')\n    })\n})\n```"]