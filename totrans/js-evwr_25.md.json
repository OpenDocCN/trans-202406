["```\nimport React from 'react';\nimport { View, Button, Text } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nconst SignIn = props => {\n  return (\n    <View>\n      <Button title=\"Sign in!\" />\n    </View>\n  );\n}\n\nSignIn.navigationOptions = {\n  title: 'Sign In'\n};\n\nexport default SignIn;\n```", "```\nimport React, { useEffect } from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\nimport Loading from '../components/Loading';\n\nconst AuthLoading = props => {\n  return <Loading />;\n};\n\nexport default AuthLoading;\n```", "```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nconst Settings = props => {\n  return (\n    <View>\n      <Button title=\"Sign Out\" />\n    </View>\n  );\n};\n\nSettings.navigationOptions = {\n  title: 'Settings'\n};\n\nexport default Settings;\n```", "```\nimport AuthLoading from './authloading';\nimport SignIn from './signin';\nimport Settings from './settings';\n```", "```\nimport { createAppContainer, createSwitchNavigator } from 'react-navigation';\n```", "```\nconst AuthStack = createStackNavigator({\n  SignIn: SignIn\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: Settings\n});\n```", "```\nconst TabNavigator = createBottomTabNavigator({\n FeedScreen: {\n   // ...\n },\n MyNoteScreen: {\n  // ...\n },\n FavoriteScreen: {\n   // ...\n },\n Settings: {\n   screen: Settings,\n   navigationOptions: {\n     tabBarLabel: 'Settings',\n     tabBarIcon: ({ tintColor }) => (\n       <MaterialCommunityIcons name=\"settings\" size={24} color={tintColor} />\n     )\n   }\n }\n});\n```", "```\nconst SwitchNavigator = createSwitchNavigator(\n  {\n    AuthLoading: AuthLoading,\n    Auth: AuthStack,\n    App: TabNavigator\n  },\n  {\n    initialRouteName: 'AuthLoading'\n  }\n);\n\nexport default createAppContainer(SwitchNavigator);\n```", "```\nimport React from 'react';\nimport { Text, View, ScrollView, Button } from 'react-native';\nimport { createAppContainer, createSwitchNavigator } from 'react-navigation';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport Feed from './feed';\nimport Favorites from './favorites';\nimport MyNotes from './mynotes';\nimport Note from './note';\nimport SignIn from './signin';\nimport AuthLoading from './authloading';\nimport Settings from './settings';\n\nconst AuthStack = createStackNavigator({\n  SignIn: SignIn,\n});\n\nconst FeedStack = createStackNavigator({\n  Feed: Feed,\n  Note: Note\n});\n\nconst MyStack = createStackNavigator({\n  MyNotes: MyNotes,\n  Note: Note\n});\n\nconst FavStack = createStackNavigator({\n  Favorites: Favorites,\n  Note: Note\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: Settings\n});\n\nconst TabNavigator = createBottomTabNavigator({\n  FeedScreen: {\n    screen: FeedStack,\n    navigationOptions: {\n      tabBarLabel: 'Feed',\n      tabBarIcon: ({ tintColor }) => (\n        <MaterialCommunityIcons name=\"home\" size={24} color={tintColor} />\n      )\n    }\n  },\n  MyNoteScreen: {\n    screen: MyStack,\n    navigationOptions: {\n      tabBarLabel: 'My Notes',\n      tabBarIcon: ({ tintColor }) => (\n        <MaterialCommunityIcons name=\"notebook\" size={24} color={tintColor} />\n      )\n    }\n  },\n  FavoriteScreen: {\n    screen: FavStack,\n    navigationOptions: {\n      tabBarLabel: 'Favorites',\n      tabBarIcon: ({ tintColor }) => (\n        <MaterialCommunityIcons name=\"star\" size={24} color={tintColor} />\n      )\n    }\n  },\n  Settings: {\n    screen: SettingsStack,\n    navigationOptions: {\n      tabBarLabel: 'Settings',\n      tabBarIcon: ({ tintColor }) => (\n        <MaterialCommunityIcons name=\"settings\" size={24} color={tintColor} />\n      )\n    }\n  }\n});\n\nconst SwitchNavigator = createSwitchNavigator(\n  {\n    AuthLoading: AuthLoading,\n    Auth: AuthStack,\n    App: TabNavigator\n  },\n  {\n    initialRouteName: 'AuthLoading'\n  }\n);\n\nexport default createAppContainer(SwitchNavigator);\n```", "```\nimport React, { useEffect } from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\nimport Loading from '../components/Loading';\n\nconst AuthLoadingScreen = props => {\n  const checkLoginState = async () => {\n    // retrieve the value of the token\n    const userToken = await SecureStore.getItemAsync('token');\n    // navigate to the app screen if a token is present\n    // else navigate to the auth screen\n    props.navigation.navigate(userToken ? 'App' : 'Auth');\n  };\n\n  // call checkLoginState as soon as the component mounts\n  useEffect(() => {\n    checkLoginState();\n  });\n\n  return <Loading />;\n};\n\nexport default AuthLoadingScreen;\n```", "```\nimport React from 'react';\nimport { View, Button, Text } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nconst SignIn = props => {\n  // store the token with a key value of `token`\n  // after the token is stored navigate to the app's main screen\n  const storeToken = () => {\n    SecureStore.setItemAsync('token', 'abc').then(\n      props.navigation.navigate('App')\n    );\n  };\n\n  return (\n    <View>\n      <Button title=\"Sign in!\" onPress={storeToken} />\n    </View>\n  );\n};\n\nSignIn.navigationOptions = {\n  title: 'Sign In'\n};\n\nexport default SignIn;\n```", "```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nconst Settings = props => {\n  // delete the token then navigate to the auth screen\n  const signOut = () => {\n    SecureStore.deleteItemAsync('token').then(\n      props.navigation.navigate('Auth')\n    );\n  };\n\n  return (\n    <View>\n      <Button title=\"Sign Out\" onPress={signOut} />\n    </View>\n  );\n};\n\nSettings.navigationOptions = {\n  title: 'Settings'\n};\n\nexport default Settings;\n```", "```\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst UserForm = props => {\n  return (\n    <View>\n      <Text>Email</Text>\n      <TextInput />\n      <Text>Password</Text>\n      <TextInput />\n      <Button title=\"Log In\" />\n    </View>\n  );\n}\n\nexport default UserForm;\n```", "```\nimport React from 'react';\nimport { View, Button, Text } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nimport UserForm from '../components/UserForm';\n\nconst SignIn = props => {\n  const storeToken = () => {\n    SecureStore.setItemAsync('token', 'abc').then(\n      props.navigation.navigate('App')\n    );\n  };\n\n  return (\n    <View>\n      <UserForm />\n    </View>\n  );\n}\n\nexport default SignIn;\n```", "```\nconst UserForm = props => {\n  // form element state\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  return (\n    <View>\n      <Text>Email</Text>\n      <TextInput onChangeText={text => setEmail(text)} value={email} />\n      <Text>Password</Text>\n      <TextInput onChangeText={text => setPassword(text)} value={password} />\n      <Button title=\"Log In\" />\n    </View>\n  );\n}\n```", "```\nconst UserForm = props => {\n  // form element state\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  const handleSubmit = () => {\n    // this function is called when the user presses the form button\n  };\n\n  return (\n    <View>\n      <Text>Email</Text>\n      <TextInput\n        onChangeText={text => setEmail(text)}\n        value={email}\n        textContentType=\"emailAddress\"\n        autoCompleteType=\"email\"\n        autoFocus={true}\n        autoCapitalize=\"none\"\n      />\n      <Text>Password</Text>\n      <TextInput\n        onChangeText={text => setPassword(text)}\n        value={password}\n        textContentType=\"password\"\n        secureTextEntry={true}\n      />\n      <Button title=\"Log In\" onPress={handleSubmit} />\n    </View>\n  );\n}\n```", "```\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst FormView = styled.View`\n padding: 10px;\n`;\n\nconst StyledInput = styled.TextInput`\n border: 1px solid gray;\n font-size: 18px;\n padding: 8px;\n margin-bottom: 24px;\n`;\n\nconst FormLabel = styled.Text`\n font-size: 18px;\n font-weight: bold;\n`;\n\nconst UserForm = props => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  const handleSubmit = () => {\n    // this function is called when the user presses the form button\n  };\n\n  return (\n    <FormView>\n      <FormLabel>Email</FormLabel>\n      <StyledInput\n        onChangeText={text => setEmail(text)}\n        value={email}\n        textContentType=\"emailAddress\"\n        autoCompleteType=\"email\"\n        autoFocus={true}\n        autoCapitalize=\"none\"\n      />\n      <FormLabel>Password</FormLabel>\n      <StyledInput\n        onChangeText={text => setPassword(text)}\n        value={password}\n        textContentType=\"password\"\n        secureTextEntry={true}\n      />\n      <Button title=\"Log In\" onPress={handleSubmit} />\n    </FormView>\n  );\n};\n\nexport default UserForm;\n```", "```\nconst FormButton = styled.TouchableOpacity`\n background: #0077cc;\n width: 100%;\n padding: 8px;\n`;\n\nconst ButtonText = styled.Text`\n text-align: center;\n color: #fff;\n font-weight: bold;\n font-size: 18px;\n`;\n\nconst UserForm = props => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  const handleSubmit = () => {\n    // this function is called when the user presses the form button\n  };\n\n  return (\n    <FormView>\n      <FormLabel>Email</FormLabel>\n      <StyledInput\n        onChangeText={text => setEmail(text)}\n        value={email}\n        textContentType=\"emailAddress\"\n        autoCompleteType=\"email\"\n        autoFocus={true}\n        autoCapitalize=\"none\"\n      />\n      <FormLabel>Password</FormLabel>\n      <StyledInput\n        onChangeText={text => setPassword(text)}\n        value={password}\n        textContentType=\"password\"\n        secureTextEntry={true}\n      />\n      <FormButton onPress={handleSubmit}>\n        <ButtonText>Submit</ButtonText>\n      </FormButton>\n    </FormView>\n  );\n};\n```", "```\nimport React from 'react';\nimport { View, Button, Text } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\nimport { useMutation, gql } from '@apollo/client';\n\nimport UserForm from '../components/UserForm';\nimport Loading from '../components/Loading';\n```", "```\nconst SIGNIN_USER = gql`\n mutation signIn($email: String, $password: String!) {\n signIn(email: $email, password: $password)\n }\n`;\n```", "```\nconst storeToken = token => {\n   SecureStore.setItemAsync('token', token).then(\n     props.navigation.navigate('App')\n   );\n };\n```", "```\nconst SignIn = props => {\n  const storeToken = token => {\n    SecureStore.setItemAsync('token', token).then(\n      props.navigation.navigate('App')\n    );\n  };\n\n  const [signIn, { loading, error }] = useMutation(SIGNIN_USER, {\n    onCompleted: data => {\n      storeToken(data.signIn)\n    }\n  });\n\n  // if loading, return a loading indicator\n  if (loading) return <Loading />;\n  return (\n    <React.Fragment>\n      {error && <Text>Error signing in!</Text>}\n      <UserForm\n        action={signIn}\n        formType=\"signIn\"\n        navigation={props.navigation}\n      />\n    </React.Fragment>\n  );\n};\n```", "```\nconst handleSubmit = () => {\n  props.action({\n    variables: {\n      email: email,\n      password: password\n    }\n  });\n};\n```", "```\n// import the Apollo libraries\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\n// import SecureStore for retrieving the token value\nimport * as SecureStore from 'expo-secure-store';\n```", "```\n// configure our API URI & cache\nconst uri = API_URI;\nconst cache = new InMemoryCache();\nconst httpLink = createHttpLink({ uri });\n\n// return the headers to the context\nconst authLink = setContext(async (_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: (await SecureStore.getItemAsync('token')) || ''\n    }\n  };\n});\n\n// configure Apollo Client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache\n});\n```", "```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { useQuery, gql } from '@apollo/client';\n\nimport NoteFeed from '../components/NoteFeed';\nimport Loading from '../components/Loading';\n\n// our GraphQL query\nconst GET_MY_NOTES = gql`\n query me {\n me {\n id\n username\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n\nconst MyNotes = props => {\n  const { loading, error, data } = useQuery(GET_MY_NOTES);\n\n  // if the data is loading, our app will display a loading message\n  if (loading) return <Loading />;\n  // if there is an error fetching the data, display an error message\n  if (error) return <Text>Error loading notes</Text>;\n  // if the query is successful and there are notes, return the feed of notes\n  // else if the query is successful and there aren't notes, display a message\n  if (data.me.notes.length !== 0) {\n    return <NoteFeed notes={data.me.notes} navigation={props.navigation} />;\n  } else {\n    return <Text>No notes yet</Text>;\n  }\n};\n\nMyNotes.navigationOptions = {\n  title: 'My Notes'\n};\n\nexport default MyNotes;\n```", "```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { useQuery, gql } from '@apollo/client';\n\nimport NoteFeed from '../components/NoteFeed';\nimport Loading from '../components/Loading';\n\n// our GraphQL query\nconst GET_MY_FAVORITES = gql`\n query me {\n me {\n id\n username\n favorites {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n\nconst Favorites = props => {\n  const { loading, error, data } = useQuery(GET_MY_FAVORITES);\n\n  // if the data is loading, our app will display a loading message\n  if (loading) return <Loading />;\n  // if there is an error fetching the data, display an error message\n  if (error) return <Text>Error loading notes</Text>;\n  // if the query is successful and there are notes, return the feed of notes\n  // else if the query is successful and there aren't notes, display a message\n  if (data.me.favorites.length !== 0) {\n    return <NoteFeed notes={data.me.favorites} navigation={props.navigation} />;\n  } else {\n    return <Text>No notes yet</Text>;\n  }\n};\n\nFavorites.navigationOptions = {\n  title: 'Favorites'\n};\n\nexport default Favorites;\n```", "```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\nimport { useMutation, gql } from '@apollo/client';\n\nimport UserForm from '../components/UserForm';\nimport Loading from '../components/Loading';\n\n// signUp GraphQL mutation\nconst SIGNUP_USER = gql`\n mutation signUp($email: String!, $username: String!, $password: String!) {\n signUp(email: $email, username: $username, password: $password)\n }\n`;\n\nconst SignUp = props => {\n  // store the token with a key value of `token`\n  // after the token is stored navigate to the app's main screen\n  const storeToken = token => {\n    SecureStore.setItemAsync('token', token).then(\n      props.navigation.navigate('App')\n    );\n  };\n\n  // the signUp mutation hook\n  const [signUp, { loading, error }] = useMutation(SIGNUP_USER, {\n    onCompleted: data => {\n      storeToken(data.signUp);\n    }\n  });\n\n  // if loading, return a loading indicator\n  if (loading) return <Loading />;\n\n  return (\n    <React.Fragment>\n      {error && <Text>Error signing in!</Text>}\n      <UserForm\n        action={signUp}\n        formType=\"signUp\"\n        navigation={props.navigation}\n      />\n    </React.Fragment>\n  );\n};\n\nSignUp.navigationOptions = {\n  title: 'Register'\n};\n\nexport default SignUp;\n```", "```\nimport SignUp from './signup';\n```", "```\nconst AuthStack = createStackNavigator({\n  SignIn: SignIn,\n  SignUp: SignUp\n});\n```", "```\nconst UserForm = props => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [username, setUsername] = useState();\n\n  const handleSubmit = () => {\n    props.action({\n      variables: {\n        email: email,\n        password: password,\n        username: username\n      }\n    });\n  };\n\n  return (\n    <FormView>\n      <FormLabel>Email</FormLabel>\n      <StyledInput\n        onChangeText={text => setEmail(text)}\n        value={email}\n        textContentType=\"emailAddress\"\n        autoCompleteType=\"email\"\n        autoFocus={true}\n        autoCapitalize=\"none\"\n      />\n      {props.formType === 'signUp' && (\n        <View>\n          <FormLabel>Username</FormLabel>\n          <StyledInput\n            onChangeText={text => setUsername(text)}\n            value={username}\n            textContentType=\"username\"\n            autoCapitalize=\"none\"\n          />\n        </View>\n      )}\n      <FormLabel>Password</FormLabel>\n      <StyledInput\n        onChangeText={text => setPassword(text)}\n        value={password}\n        textContentType=\"password\"\n        secureTextEntry={true}\n      />\n      <FormButton onPress={handleSubmit}>\n        <ButtonText>Submit</ButtonText>\n      </FormButton>\n    </FormView>\n  );\n};\n```", "```\nreturn (\n  <FormView>\n      {/* existing form component code is here */}\n      {props.formType !== 'signUp' && (\n        <TouchableOpacity onPress={() => props.navigation.navigate('SignUp')}>\n          <Text>Sign up</Text>\n        </TouchableOpacity>\n      )}\n  </FormView>\n)\n```", "```\nconst SignUp = styled.TouchableOpacity`\n margin-top: 20px;\n`;\n\nconst Link = styled.Text`\n color: #0077cc;\n font-weight: bold;\n`;\n```", "```\n{props.formType !== 'signUp' && (\n  <SignUp onPress={() => props.navigation.navigate('SignUp')}>\n    <Text>\n      Need an account? <Link>Sign up.</Link>\n    </Text>\n  </SignUp>\n)}\n```", "```\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst FormView = styled.View`\n padding: 10px;\n`;\n\nconst StyledInput = styled.TextInput`\n border: 1px solid gray;\n font-size: 18px;\n padding: 8px;\n margin-bottom: 24px;\n`;\n\nconst FormLabel = styled.Text`\n font-size: 18px;\n font-weight: bold;\n`;\n\nconst FormButton = styled.TouchableOpacity`\n background: #0077cc;\n width: 100%;\n padding: 8px;\n`;\n\nconst ButtonText = styled.Text`\n text-align: center;\n color: #fff;\n font-weight: bold;\n font-size: 18px;\n`;\n\nconst SignUp = styled.TouchableOpacity`\n margin-top: 20px;\n`;\n\nconst Link = styled.Text`\n color: #0077cc;\n font-weight: bold;\n`;\n\nconst UserForm = props => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [username, setUsername] = useState();\n\n  const handleSubmit = () => {\n    props.action({\n      variables: {\n        email: email,\n        password: password,\n        username: username\n      }\n    });\n  };\n\n  return (\n    <FormView>\n      <FormLabel>Email</FormLabel>\n      <StyledInput\n        onChangeText={text => setEmail(text)}\n        value={email}\n        textContentType=\"emailAddress\"\n        autoCompleteType=\"email\"\n        autoFocus={true}\n        autoCapitalize=\"none\"\n      />\n      {props.formType === 'signUp' && (\n        <View>\n          <FormLabel>Username</FormLabel>\n          <StyledInput\n            onChangeText={text => setUsername(text)}\n            value={username}\n            textContentType=\"username\"\n            autoCapitalize=\"none\"\n          />\n        </View>\n      )}\n      <FormLabel>Password</FormLabel>\n      <StyledInput\n        onChangeText={text => setPassword(text)}\n        value={password}\n        textContentType=\"password\"\n        secureTextEntry={true}\n      />\n      <FormButton onPress={handleSubmit}>\n        <ButtonText>Submit</ButtonText>\n      </FormButton>\n      {props.formType !== 'signUp' && (\n        <SignUp onPress={() => props.navigation.navigate('SignUp')}>\n          <Text>\n            Need an account? <Link>Sign up.</Link>\n          </Text>\n        </SignUp>\n      )}\n    </FormView>\n  );\n};\n\nexport default UserForm;\n```"]