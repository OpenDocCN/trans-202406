- en: Chapter 3\. Getting Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perplexity is the beginning of knowledge.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Kahlil Gibran
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Kubernetes is the operating system of the cloud native world, providing a reliable
    and scalable platform for running containerized workloads. But how should you
    run Kubernetes? Should you host it yourself? On cloud instances? On bare-metal
    servers? Or should you use a managed Kubernetes service? Or a managed platform
    that’s based on Kubernetes, but extends it with workflow tools, dashboards, and
    web interfaces?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: That’s a lot of questions for one chapter to answer, but we’ll try.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s worth noting that we won’t be particularly concerned here with the technical
    details of operating Kubernetes itself, such as building, tuning, and troubleshooting
    clusters. There are many excellent resources to help you with that, of which we
    particularly recommend Brendan Burns’ and Craig Tracey’s book [*Managing Kubernetes:
    Operating Kubernetes Clusters in the Real World*](http://shop.oreilly.com/product/0636920146667.do)
    (O’Reilly).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we’ll focus on helping you understand the basic architecture of a cluster,
    and give you the information you need to decide how to run Kubernetes. We’ll outline
    the pros and cons of managed services, and look at some of the popular vendors.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run your own Kubernetes cluster, we list some of the best installation
    tools available to help you set up and manage clusters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Cluster Architecture
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You know that Kubernetes connects multiple servers into a *cluster*, but what
    is a cluster, and how does it work? The technical details don’t matter for the
    purposes of this book, but you should understand the basic components of Kubernetes
    and how they fit together, in order to understand what your options are when it
    comes to building or buying Kubernetes clusters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The Control Plane
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cluster’s brain is called the *control plane*, and it runs all the tasks
    required for Kubernetes to do its job: scheduling containers, managing Services,
    serving API requests, and so on (see [Figure 3-1](#img-cluster)).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram of a Kubernetes cluster](assets/cndk_0301.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. How a Kubernetes cluster works
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The control plane is actually made up of several components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '`kube-apiserver`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: This is the frontend server for the control plane, handling API requests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '`etcd`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the database where Kubernetes stores all its information: what nodes
    exist, what resources exist on the cluster, and so on.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '`kube-scheduler`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: This decides where to run newly created Pods.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`kube-controller-manager`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: This is responsible for running resource controllers, such as Deployments.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '`cloud-controller-manager`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: This interacts with the cloud provider (in cloud-based clusters), managing resources
    such as load balancers and disk volumes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The control-plane components in a production cluster typically run on multiple
    servers to ensure high availability.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Node Components
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cluster members that run user workloads are called *worker nodes*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Each worker node in a Kubernetes cluster runs these components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群中的每个工作节点都运行以下组件：
- en: '`kubelet`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubelet`'
- en: This is responsible for driving the container runtime to start workloads that
    are scheduled on the node, and monitoring their status.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这负责驱动容器运行时启动在节点上调度的工作负载，并监控其状态。
- en: '`kube-proxy`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-proxy`'
- en: This does the networking magic that routes requests between Pods on different
    nodes, and between Pods and the internet.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这执行网络魔术，路由请求在不同节点上的Pod之间，以及Pod与互联网之间。
- en: '*Container runtime*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器运行时*'
- en: This actually starts and stops containers and handles their communications.
    Historically the most popular option has been Docker, but Kubernetes supports
    other container runtimes as well, such as [containerd](https://containerd.io)
    and [CRI-O](https://oreil.ly/RsqHR).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上启动和停止容器并处理它们的通信。历史上最流行的选项是Docker，但Kubernetes也支持其他容器运行时，如[containerd](https://containerd.io)和[CRI-O](https://oreil.ly/RsqHR)。
- en: Other than running different containerized components, there’s no intrinsic
    difference between a node running control plane components and worker nodes that
    run application workloads. Typically, nodes running the control plane components
    do not also run user-created workloads, except in very small clusters (like Docker
    Desktop or Minikube).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了运行不同的容器化组件外，运行控制平面组件的节点与运行应用程序负载的工作节点之间没有固有的区别。通常情况下，运行控制平面组件的节点不会同时运行用户创建的工作负载，除非是非常小的集群（如Docker
    Desktop或Minikube）。
- en: High Availability
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高可用性
- en: A correctly configured Kubernetes cluster has multiple control plane nodes,
    making it *highly available*; that is, if any individual node fails or is shut
    down, or one of the control plane components on it stops running, the cluster
    will still work properly. A highly available control plane will also handle the
    situation where the control plane nodes are working properly, but some of them
    cannot communicate with the others, due to a network failure (known as a *network
    partition*).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置的Kubernetes集群具有多个控制平面节点，使其具备*高可用性*；也就是说，如果任何一个节点失败或关闭，或者其上的某个控制平面组件停止运行，集群仍将正常工作。一个高可用的控制平面还将处理控制平面节点正常工作但无法与其他节点通信的情况，这是由于网络故障引起的*网络分区*。
- en: The `etcd` database is replicated across multiple nodes, and can survive the
    failure of individual nodes, so long as a quorum of over half the original number
    of `etcd` replicas is still available.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd`数据库在多个节点上复制，并且可以在个别节点失败的情况下继续运行，只要仍然有超过一半原始数量的`etcd`副本的仲裁可用。'
- en: If all of this is configured correctly, the control plane can survive a reboot
    or temporary failure of individual nodes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些都配置正确，控制平面可以在单个节点重新启动或临时失败时继续运行。
- en: Control plane failure
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制平面故障
- en: A damaged control plane doesn’t necessarily mean that your applications will
    go down, although it might well cause strange and erratic behavior.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面损坏并不一定意味着您的应用程序将停机，尽管这可能会导致奇怪和不稳定的行为。
- en: For example, if you were to stop all the control plane nodes in your cluster,
    the Pods on the worker nodes would keep on running—at least for a while. But you
    would be unable to deploy any new containers or change any Kubernetes resources,
    and controllers such as Deployments would stop working.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您停止集群中所有控制平面节点，那么工作节点上的Pod将继续运行——至少一段时间。但是，您将无法部署任何新的容器或更改任何Kubernetes资源，并且诸如Deployments的控制器将停止工作。
- en: Therefore, high availability of the control plane is critical to a properly
    functioning cluster. You need to have enough control plane nodes available that
    the cluster can maintain a *quorum* even if one fails; for production clusters,
    the workable minimum is three (see [“The smallest cluster”](ch06.html#smallest)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，控制平面的高可用性对于正常运行的集群至关重要。您需要有足够的控制平面节点可用，以便即使其中一个失败，集群也能保持*仲裁*；对于生产集群，可行的最小数量是三个（参见[“最小的集群”](ch06.html#smallest)）。
- en: Worker node failure
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作节点故障
- en: By contrast, the failure of any single worker node shouldn’t really matter as
    long as applications are configured to run with more than one replica. Kubernetes
    will detect the failure and reschedule the node’s Pods somewhere else, so long
    as the control plane is still working.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，任何单个工作节点的故障实际上并不重要，只要应用程序配置为以多于一个副本运行。只要控制平面仍在工作，Kubernetes将检测到故障并将节点的Pod重新调度到其他地方。
- en: If a large number of nodes fail at once, this might mean that the cluster no
    longer has enough resources to run all the workloads you need. Fortunately, this
    doesn’t happen often, and even if it does, Kubernetes will keep as many of your
    Pods running as it can while you replace the missing nodes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时有大量节点故障，这可能意味着集群不再具备运行您所需的所有工作负载所需的足够资源。幸运的是，这种情况并不经常发生，即使发生了，Kubernetes也会尽可能地保持您的Pods运行，同时替换缺失的节点。
- en: It’s worth bearing in mind, though, that the fewer worker nodes you have, the
    greater the proportion of the cluster’s capacity that each one represents. You
    should assume that a single-node failure could happen at any time, especially
    in the cloud, and two simultaneous failures are not unheard of.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，需要记住的是，工作节点越少，每个节点代表的集群容量比例就越大。你应该假设单节点故障随时可能发生，特别是在云环境下，同时两个故障也不是闻所未闻的事情。
- en: A rare, but entirely possible, kind of failure is losing a whole cloud *availability
    zone*. Cloud vendors like AWS and Google Cloud provide multiple availability zones
    in each region, each corresponding roughly to a single datacenter. For this reason,
    rather than having all your worker nodes in the same zone, it’s a good idea to
    distribute them across two or even three zones.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一种罕见但完全可能发生的故障是失去整个云*可用区*。云供应商如AWS和Google Cloud在每个地区提供多个可用区，每个大致对应一个数据中心。因此，与其将所有工作节点放在同一区域，不如将它们分布在两个甚至三个区域更明智。
- en: Trust, but verify
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信任，但需验证
- en: Although high availability should enable your cluster to survive losing some
    nodes, it’s always wise to *actually test* this. During a scheduled maintenance
    window, or outside of peak hours, try rebooting a worker and see what happens.
    (Hopefully, nothing, or nothing that’s visible to users of your applications.)
    Then, if you can, try rebooting a control plane node. See if you are able to continue
    running `kubectl` commands while the node is down.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管高可用性应该使您的集群能够在丢失一些节点时继续运行，但*实际测试*这一点始终是明智的。在计划的维护窗口期间或在非高峰时段，尝试重启一个工作节点，看看会发生什么。（希望是什么也不会发生，或者对您的应用程序用户不可见的情况。）然后，如果可以的话，尝试重启一个控制平面节点，看看在节点宕机时是否能够继续运行`kubectl`命令。
- en: For a more demanding test, reboot one of the control plane nodes. (Managed services
    such as Amazon EKS, Azure AKS, or Google Kubernetes Engine (GKE), which we’ll
    discuss later in the chapter, don’t allow you to do this). Still, a production-grade
    cluster should survive this with no problems whatsoever.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更严格的测试，重启控制平面节点之一。（如Amazon EKS、Azure AKS或Google Kubernetes Engine（GKE）等托管服务，在本章后面我们将进一步讨论）不允许您这样做。不过，一个生产级别的集群应该可以毫无问题地经受住这一点。
- en: The Costs of Self-Hosting Kubernetes
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自托管Kubernetes的成本
- en: The most important decision facing anyone who’s considering running production
    workloads in Kubernetes is *buy or build?* Should you run your own clusters, or
    pay someone else to run them? Let’s look at some of the options.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于考虑在Kubernetes中运行生产工作负载的任何人来说，最重要的决定是*买还是建？*您应该自己运行集群，还是付钱给其他人来运行？让我们看看一些选项。
- en: The most basic choice of all is self-hosted Kubernetes. By *self-hosted* we
    mean that you, personally, or a team in your organization, install and configure
    Kubernetes, on machines that you own or control, just as you might do with any
    other software that you use, such as Redis, PostgreSQL, or NGINX.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的选择是自托管的Kubernetes。通过*自托管*，我们指的是您个人或您组织内的一个团队，在您拥有或控制的机器上安装和配置Kubernetes，就像您可能对使用的任何其他软件（如Redis、PostgreSQL或NGINX）所做的那样。
- en: This is the option that gives you the maximum flexibility and control. You can
    decide what versions of Kubernetes to run, what options and features are enabled,
    when and whether to upgrade clusters, and so on. But there are some significant
    downsides, as we’ll see in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种选择为您提供了最大的灵活性和控制权。您可以决定运行哪些版本的Kubernetes，启用哪些选项和功能，何时以及是否升级集群等。但是，正如我们将在下一节中看到的那样，也存在一些显著的缺点。
- en: It’s More Work Than You Think
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比你想象的工作要多
- en: 'The self-hosted option also requires the maximum resources, in terms of people,
    skills, engineering time, maintenance, and troubleshooting. Just setting up a
    working Kubernetes cluster is pretty simple, but that’s a long way from a cluster
    that’s ready for production. You need to consider at least the following questions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管选项还需要最大的资源，包括人力、技能、工程时间、维护和故障排除。仅仅设置一个工作的Kubernetes集群非常简单，但这距离一个为生产准备好的集群还有很长一段路。您至少需要考虑以下几个问题：
- en: Is the control plane highly available? That is, if any node goes down or becomes
    unresponsive, does your cluster still work? Can you still deploy or update apps?
    Will your running applications still be fault-tolerant without the control plane?
    (See [“High Availability”](#highavailability).)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制平面是否具有高可用性？也就是说，如果任何节点宕机或变得无响应，您的集群是否仍然可以工作？您是否仍然可以部署或更新应用程序？您的运行中的应用程序是否在没有控制平面的情况下仍然具有容错能力？（参见[“高可用性”](#highavailability)。）
- en: Is your pool of worker nodes highly available? That is, if an outage should
    take down several worker nodes, or even a whole cloud availability zone, will
    your workloads stop running? Will your cluster keep working? Will it be able to
    automatically provision new nodes to heal itself, or will it require manual intervention?
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的工作节点池是否高可用？也就是说，如果故障导致多个工作节点或甚至整个云可用性区域宕机，您的工作负载是否会停止运行？您的集群是否会继续工作？它是否能够自动提供新节点来修复自身，还是需要手动干预？
- en: Is your cluster set up *securely*? Do its internal components communicate using
    TLS encryption and trusted certificates? Do users and applications have minimal
    rights and permissions for cluster operations? Are container security defaults
    set properly? Do nodes have unnecessary access to control plane components? Is
    access to the underlying `etcd` database properly controlled and authenticated?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的集群是否安全设置？其内部组件是否使用TLS加密和受信任的证书进行通信？用户和应用程序在集群操作中是否具有最低权限和权限？容器安全默认设置是否正确？节点是否不必要地访问控制平面组件？对底层的`etcd`数据库的访问是否得到适当的控制和认证？
- en: Are all services in your cluster secure? If they’re accessible from the internet,
    are they properly authenticated and authorized? Is access to the cluster API strictly
    limited?
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的集群中的所有服务是否安全？如果它们可以从互联网访问，它们是否经过适当的身份验证和授权？对集群API的访问是否严格限制？
- en: Is your cluster *conformant*? Does it meet the standards for Kubernetes clusters
    defined by the Cloud Native Computing Foundation? (See [“Conformance Checking”](ch06.html#conformance)
    for details.)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的集群是否符合规范？它是否符合Cloud Native Computing Foundation定义的Kubernetes集群标准？（详见[“一致性检查”](ch06.html#conformance)。）
- en: Are your cluster nodes fully *config-managed*, rather than being set up by imperative
    shell scripts and then left alone? The operating system and kernel on each node
    needs to be updated, have security patches applied, and so on.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的集群节点是否完全由配置管理，而不是通过命令式shell脚本设置然后被遗忘？每个节点上的操作系统和内核是否已更新，并已应用安全补丁等。
- en: Is the data in your cluster properly backed up, including any persistent storage?
    What is your restore process? How often do you test restores?
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的集群中的数据是否有适当的备份，包括任何持久存储？您的恢复过程是什么？您多久测试一次还原？
- en: Once you have a working cluster, how do you maintain it over time? How do you
    provision new nodes? Roll out config changes to existing nodes? Roll out Kubernetes
    updates? Scale in response to demand? Enforce policies?
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦您有一个运行的集群，如何随时间维护它？如何提供新节点？如何推出现有节点的配置更改？如何推出Kubernetes更新？如何根据需求进行伸缩？如何执行策略？
- en: It’s Not Just About the Initial Setup
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这不仅仅是关于初始设置
- en: Now bear in mind that you need to pay attention to these factors not just when
    setting up the first cluster for the first time, but for all your clusters for
    all time. When you make changes or upgrades to your Kubernetes infrastructure,
    you need to consider the impact on high availability, security, and so on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请注意，您不仅需要在首次设置第一个集群时注意这些因素，而且需要在未来所有集群的所有时间内注意。当您对Kubernetes基础架构进行更改或升级时，您需要考虑对高可用性、安全性等的影响。
- en: You’ll need to have monitoring in place to make sure the cluster nodes and all
    the Kubernetes components are working properly. You’ll also need an alerting system
    so that staff can be paged to deal with any problems, day or night.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要设置监控系统，以确保集群节点和所有Kubernetes组件正常工作。您还需要一个警报系统，以便员工可以在白天或夜晚处理任何问题。
- en: Kubernetes is still in rapid development, and new features and updates are being
    released all the time. You’ll need to keep your cluster up-to-date with those,
    and understand how the changes affect your existing setup. You may need to reprovision
    your cluster to get the full benefit of the latest Kubernetes functionality.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes仍在快速发展中，新功能和更新正在不断发布。您需要将您的集群与这些保持最新，并了解这些更改如何影响您的现有设置。您可能需要重新配置您的集群以充分利用最新的Kubernetes功能。
- en: It’s also not enough to read a few books or articles, configure the cluster
    the right way, and leave it at that. You need to test and verify the configuration
    on a regular basis—by taking down any random control plane node and making sure
    everything still works, for example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Automated resilience testing tools such as [Netflix’s Chaos Monkey](https://oreil.ly/WbiHD)
    can help with this, by randomly killing nodes, Pods, or network connections every
    so often. Depending on the reliability of your cloud provider, you may find that
    Chaos Monkey is unnecessary, as regular real-world failures will also test the
    resilience of your cluster and the services running on it (see [“Chaos Testing”](ch06.html#chaos)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Tools Don’t Do All the Work for You
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are tools—lots and lots of tools—to help you set up and configure Kubernetes
    clusters, and many of them advertise themselves as being more or less point-and-click,
    zero-effort, instant solutions. The sad fact is that in our opinion, the large
    majority of these tools solve only the easy problems, and ignore the hard ones.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, powerful, flexible, enterprise-grade commercial tools tend
    to be very expensive, or not even available to the public, since there’s more
    money to be made selling a managed service than there is selling a general-purpose
    cluster management tool.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes the Hard Way
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kelsey Hightower’s [*Kubernetes the Hard Way*](https://oreil.ly/Chk5v) tutorial
    is perhaps one of the best ways to get familiar with all of the underlying components
    of a Kubernetes cluster. It illustrates the complexity of the moving parts involved
    and it’s an exercise worth doing for anyone considering running Kubernetes, even
    as a managed service, just to get a sense of how it all works under the hood.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes Is Hard
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Despite the widespread notion that it’s simple to set up and manage, the truth
    is that *Kubernetes is hard*. Considering what it does, it’s remarkably simple
    and well designed, but it has to deal with very complex situations, and that leads
    to complex software.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Make no mistake, there is a significant investment of time and energy involved
    in both learning how to manage your own clusters properly, and actually doing
    it from day to day, month to month. We don’t want to discourage you from using
    Kubernetes, but we want you to have a clear understanding of what’s involved in
    running Kubernetes yourself. This will help you to make an informed decision about
    the costs and benefits of self-hosting, as opposed to using managed services.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Administration Overhead
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your organization is large, with resources to spare for a dedicated Kubernetes
    cluster operations team, this may not be such a big problem. But for small to
    medium enterprises, or even startups with a handful of engineers, the administration
    overhead of running your own Kubernetes clusters may be prohibitive.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Given a limited budget and number of staff available for IT operations, what
    proportion of your resources do you want to spend on administering Kubernetes
    itself? Would those resources be better used to support your business’s workloads
    instead? Can you operate Kubernetes more cost-effectively with your own staff,
    or by using a managed service?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到预算有限和 IT 运营可用人员的数量，您希望将多少资源用于管理 Kubernetes 本身？这些资源是否最好用于支持您业务的工作负载？您是否可以通过自己的员工或使用托管服务更具成本效益地运营
    Kubernetes？
- en: Start with Managed Services
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从托管服务开始
- en: You might be a little surprised that, in a Kubernetes book, we recommend that
    you don’t run Kubernetes! At least, don’t run the control plane yourself. For
    the reasons we’ve outlined in the previous sections, we think that using managed
    services is likely to be far more cost-effective than self-hosting Kubernetes
    clusters. Unless you want to do something strange and experimental with Kubernetes
    that isn’t supported by any managed provider, there are basically no good reasons
    to go the self-hosted route.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会有些惊讶，一个 Kubernetes 的书籍中，我们建议您不要运行 Kubernetes！至少，不要自己运行控制平面。基于我们在前面章节中阐述的原因，我们认为使用托管服务很可能比自行托管
    Kubernetes 集群更具成本效益。除非您想要在 Kubernetes 上进行一些奇怪和实验性质的操作，而这些操作没有任何托管提供商支持，否则基本上没有理由选择自托管的路线。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In our experience, and that of many of the people we interviewed for this book,
    a managed service is the best way to run Kubernetes, period.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的经验，以及我们在写作本书时采访的许多人的经验，托管服务是运行 Kubernetes 的最佳方式，毋庸置疑。
- en: If you’re considering whether Kubernetes is even an option for you, using a
    managed service is a great way to try it out. You can get a fully working, secure,
    highly available, production-grade cluster in a few minutes, for a few dollars
    a day. (Most cloud providers even offer a free tier that lets you run a Kubernetes
    cluster for weeks or months without incurring any charges.) Even if you decide,
    after a trial period, that you’d prefer to run your own Kubernetes cluster, the
    managed services will show you how it should be done.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在考虑 Kubernetes 是否适合您，使用托管服务是一个很好的尝试方式。您可以在几分钟内获得一个完全工作、安全、高可用、生产级的集群，每天只需几美元。（大多数云服务提供商甚至提供免费的层级，让您在数周或数月内运行
    Kubernetes 集群而无需支付任何费用。）即使您在试用期后决定更喜欢运行自己的 Kubernetes 集群，托管服务也会向您展示应该如何完成。
- en: On the other hand, if you’ve already experimented with setting up Kubernetes
    yourself, you’ll be delighted with how much easier managed services make the process.
    You probably didn’t build your own house; why build your own cluster, when it’s
    cheaper and quicker to have someone else do it, and the results are better?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您已经尝试过自行设置 Kubernetes，您会对托管服务如何简化流程感到高兴。您可能没有建造自己的房子；当别人可以更便宜、更快速地为您建造更好的结果时，为什么要自己建造集群呢？
- en: In the next section, we’ll outline some of the most popular managed Kubernetes
    services, tell you what we think of them, and recommend our favorite. If you’re
    still not convinced, the second half of the chapter will explore Kubernetes installers
    you can use to build your own clusters (see [“Kubernetes Installers”](#installers)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将概述一些最流行的托管 Kubernetes 服务，告诉您我们对它们的看法，并推荐我们的最爱。如果您仍不确定，本章的后半部分将探讨您可以使用的
    Kubernetes 安装程序（参见[“Kubernetes 安装程序”](#installers)）。
- en: We should say at this point that neither of the authors is affiliated with any
    cloud provider or commercial Kubernetes vendor. Nobody’s paying us to recommend
    their product or service. The opinions here are our own, based on personal experience
    and the views of hundreds of Kubernetes users we spoke to while writing this book.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在此我们应该声明，作者中没有任何人与任何云服务提供商或商业 Kubernetes 供应商有所关联。没有人支付我们来推荐他们的产品或服务。这里的观点是我们自己的观点，基于个人经验以及我们在撰写本书时与数百名
    Kubernetes 用户交流的观点。
- en: Naturally, things move quickly in the Kubernetes world, and the managed services
    marketplace is especially competitive. Expect the features and services described
    here to change rapidly. The list presented here is not complete, but we’ve tried
    to include the services we feel are the best, the most widely used, or otherwise
    important.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在 Kubernetes 的世界中，事情进展迅速，托管服务市场尤其竞争激烈。预计这里描述的特性和服务会迅速变化。这里列出的列表并不完整，但我们已尽力包含我们认为最佳、最广泛使用或其他重要的服务。
- en: Managed Kubernetes Services
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管 Kubernetes 服务
- en: Managed Kubernetes services relieve you of almost all the administration overhead
    of setting up and running Kubernetes clusters, particularly the control plane.
    Effectively, a managed service means you pay for someone else (such as Microsoft,
    Amazon, or Google) to run the cluster for you.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Google Kubernetes Engine (GKE)
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you’d expect from the originators of Kubernetes, Google offers a [fully managed
    Kubernetes service](https://oreil.ly/srHGH) that is completely integrated with
    the Google Cloud Platform (GCP). You can deploy clusters using the GCP web console
    `gcloud CLI`, or their [Terraform module](https://oreil.ly/xPD8J). Within a few
    minutes, your cluster will be ready to use.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Google takes care of monitoring and replacing failed nodes, and auto-applying
    security patches. You can set your clusters to automatically upgrade to the latest
    version of Kubernetes that’s available, during a maintenance window of your choice.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: For extended high availability, you can create *multizone* clusters, which spread
    worker nodes across multiple failure zones (roughly equivalent to individual datacenters).
    Your workloads will keep on running, even if a whole failure zone is affected
    by an outage.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Cluster Autoscaling
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GKE also offers a cluster autoscaling option (see [“Autoscaling”](ch06.html#autoscaling)).
    With autoscaling enabled, if there are pending workloads that are waiting for
    a node to become available, the system will add new nodes automatically to accommodate
    the demand.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, if there is spare capacity, the autoscaler will consolidate Pods
    onto a smaller number of nodes and remove the unused nodes. Since billing for
    GKE is based on the number of worker nodes, this helps you control costs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Autopilot
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google also offers a tier for GKE called *Autopilot* that takes the managed
    service one step further. While most hosted offerings take care of managing the
    control plane node, Autopilot also fully manages the worker nodes. You are billed
    for the CPU and memory that your Pods request, and the actual worker node VMs
    are abstracted away from you. For teams that want the flexibility of Kubernetes,
    but do not care much about the underlying servers where the containers end up
    running, this would be an option worth considering.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Kubernetes Service (EKS)
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon has also been providing managed container cluster services for a long
    time, but until very recently the only option was Elastic Container Service (ECS),
    Amazon’s proprietary technology for running containers on EC2 virtual machines.
    While perfectly usable, [ECS](https://aws.amazon.com/ecs) is not as powerful or
    flexible as Kubernetes, and evidently even Amazon has decided that the future
    is Kubernetes, with the launch of Elastic Kubernetes Service (EKS).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Amazon has the most popular public cloud offering today, and most cloud deployments
    of Kubernetes are running in AWS. If you already have your infrastructure in AWS
    and are looking to migrate your applications to Kubernetes, then EKS is a sensible
    choice. Amazon takes care of managing the control plane nodes, and you deploy
    your containers to EC2 instance worker nodes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to set up [centralized logging with CloudWatch](https://oreil.ly/3cux9)
    or [cluster auto-scaling](https://oreil.ly/dNxd2), you’ll need to configure those
    once the cluster is up and running. This makes for less of a “batteries-included”
    experience than some of the other hosted offerings on the market, but depending
    on your environment and use-case, you may wish to customize or leave out these
    features anyway.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: There are a few options for deploying EKS clusters including using the AWS Management
    Console, the `aws` CLI tool, an open source CLI tool called [`eksctl`](https://eksctl.io),
    and there is a popular [EKS Terraform module](https://oreil.ly/ZupGB). Each of
    these tools can automate creating the various IAM, VPC, and EC2 resources needed
    for a functioning Kubernetes cluster. `eksctl` can additionally handle setting
    up additional components, like CloudWatch logging, or installing various add-ons
    as part of provisioning the cluster, making it a more full-featured out-of-box
    Kubernetes experience.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Azure Kubernetes Service (AKS)
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Azure Kubernetes Service (AKS)](https://oreil.ly/f1Eab) is the Microsoft option
    for hosted Kubernetes clusters on Azure. AKS has traditionally rolled out support
    for newer versions of Kubernetes before their GKE or EKS competitors. You can
    create clusters from the Azure web interface or using the Azure `az` command-line
    tool, or their [Terraform AKS module](https://oreil.ly/rKCtD).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: As with GKE and EKS, you have the option to hand off managing the control plane
    nodes, and your billing is based on the number of worker nodes in your cluster.
    AKS also supports [cluster autoscaling](https://oreil.ly/997iu) to adjust the
    number of worker nodes based on usage.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: IBM Cloud Kubernetes Service
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Naturally, the venerable IBM is not to be left out in the field of managed Kubernetes
    services. [IBM Cloud Kubernetes Service](https://oreil.ly/i5d38) is pretty simple
    and straightforward, allowing you to set up a vanilla Kubernetes cluster in IBM
    Cloud.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: You can access and manage your IBM Cloud cluster through the default Kubernetes
    CLI and the provided command-line tool, or a basic GUI. There are no real killer
    features that differentiate IBM’s offering from the other major cloud providers,
    but it’s a logical option if you’re already using IBM Cloud.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: DigitalOcean Kubernetes
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DigitalOcean is known for providing a simple cloud offering with excellent documentation
    and tutorials for developers. Recently they started offering a managed Kubernetes
    offering called, not surprisingly, [DigitalOcean Kubernetes](https://oreil.ly/nGwZj).
    Like AKS, they do not charge for running the managed control plane nodes, and
    you are billed for the worker nodes where your applications run.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean 以提供简单的云服务而闻名，并为开发者提供优秀的文档和教程。最近，他们开始提供名为 [DigitalOcean Kubernetes](https://oreil.ly/nGwZj)
    的托管 Kubernetes 服务。与 AKS 类似，他们不收取托管控制平面节点的运行费用，您只需为应用程序运行的工作节点付费。
- en: Kubernetes Installers
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 安装程序
- en: 'If managed or turnkey clusters won’t work for you, then you’ll need to consider
    some level of Kubernetes self-hosting: that is, setting up and running Kubernetes
    yourself on your own machines.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果托管或托管式集群不适合您，那么您将需要考虑某种级别的 Kubernetes 自助托管：即，在自己的机器上设置和运行 Kubernetes。
- en: It’s very unlikely that you’ll deploy and run Kubernetes completely from scratch,
    except for learning and demo purposes. The vast majority of people use one or
    more of the available Kubernetes installer tools or services to set up and manage
    their clusters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了学习和演示目的外，几乎不可能完全从头部署和运行 Kubernetes。绝大多数人使用其中一个或多个可用的 Kubernetes 安装工具或服务来设置和管理他们的集群。
- en: kops
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: kops
- en: '[kops](https://oreil.ly/pP3GI) is a command-line tool for automated provisioning
    of Kubernetes clusters. It’s part of the Kubernetes project, and has been around
    a long time as an AWS-specific tool, but is now adding alpha and beta support
    for other providers as well including Google Cloud, DigitalOcean, Azure, and OpenStack.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[kops](https://oreil.ly/pP3GI) 是一个用于自动化创建 Kubernetes 集群的命令行工具。它是 Kubernetes
    项目的一部分，并且作为一个 AWS 特定工具已经存在很长时间，但现在也开始为包括 Google Cloud、DigitalOcean、Azure 和 OpenStack
    在内的其他提供商添加 alpha 和 beta 支持。'
- en: kops supports building high-availability clusters, which makes it suitable for
    production Kubernetes deployments. It uses declarative configuration, just like
    Kubernetes resources themselves, and it can not only provision the necessary cloud
    resources and set up a cluster, but also scale it up and down, resize nodes, perform
    upgrades, and do other useful admin tasks.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: kops 支持构建高可用性集群，使其适用于生产 Kubernetes 部署。它使用声明性配置，就像 Kubernetes 资源本身一样，并且不仅可以提供必要的云资源和设置集群，还可以扩展节点、调整大小、执行升级和其他有用的管理员任务。
- en: Like everything in the Kubernetes world, kops is under rapid development, but
    it’s a relatively mature and sophisticated tool that is widely used. If you’re
    planning to run self-hosted Kubernetes in AWS, kops is a good choice.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 就 Kubernetes 的整个世界而言，kops 正在快速发展，但它是一个相对成熟且复杂的工具，被广泛使用。如果您计划在 AWS 上运行自托管 Kubernetes，kops
    是一个不错的选择。
- en: Kubespray
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubespray
- en: '[Kubespray](https://oreil.ly/tFRoX) (formerly known as Kargo), a project under
    the Kubernetes umbrella, is a tool for easily deploying production-ready clusters.
    It offers lots of options, including high availability, and support for multiple
    platforms.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kubespray](https://oreil.ly/tFRoX)（以前称为 Kargo）是 Kubernetes 项目下的一个工具，用于轻松部署生产就绪的集群。它提供了许多选项，包括高可用性，并支持多个平台。'
- en: Kubespray is focused on installing Kubernetes on existing machines, especially
    on-premise and bare-metal servers. However, it’s also suitable for any cloud environment,
    including private cloud (virtual machines that run on your own servers). It uses
    Ansible Playbooks, so if you have experience using Ansible for configuration management
    of your servers, then this would be an option worth exploring.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Kubespray 专注于在现有机器上安装 Kubernetes，特别是本地和裸金属服务器。然而，它也适用于包括私有云（运行在您自己服务器上的虚拟机）在内的任何云环境。它使用
    Ansible Playbooks，因此如果您有使用 Ansible 进行服务器配置管理的经验，那么这将是一个值得探索的选择。
- en: kubeadm
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: kubeadm
- en: '[kubeadm](https://oreil.ly/MeyTC) is part of the Kubernetes distribution, and
    it aims to help you install and maintain a Kubernetes cluster according to best
    practices. kubeadm does not provision the infrastructure for the cluster itself,
    so it’s suitable for installing Kubernetes on bare-metal servers or cloud instances
    of any flavor.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[kubeadm](https://oreil.ly/MeyTC) 是 Kubernetes 发行版的一部分，旨在帮助您按照最佳实践安装和维护 Kubernetes
    集群。kubeadm 不会为集群本身提供基础设施，因此适合在裸金属服务器或任何云实例上安装 Kubernetes。'
- en: Many of the other tools and services we’ll mention in this chapter use kubeadm
    internally to handle cluster-admin operations, but there’s nothing to stop you
    using it directly, if you want to.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提到的许多其他工具和服务在内部使用kubeadm来处理集群管理员操作，但是如果你愿意，你也可以直接使用它。
- en: Rancher Kubernetes Engine (RKE)
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rancher Kubernetes Engine (RKE)
- en: '[RKE](https://oreil.ly/K09qx) aims to be a simple, fast Kubernetes installer.
    It doesn’t provision the nodes for you, and you have to install Docker on the
    nodes yourself before you can use RKE to install the cluster. RKE supports high
    availability of the Kubernetes control plane.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[RKE](https://oreil.ly/K09qx)旨在成为一个简单快速的Kubernetes安装程序。它不会为你提供节点，并且你必须自己在节点上安装Docker，然后才能使用RKE安装集群。RKE支持Kubernetes控制平面的高可用性。'
- en: Puppet Kubernetes Module
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet Kubernetes模块
- en: Puppet is a powerful, mature, and sophisticated general configuration management
    tool that is very widely used and has a large open source module ecosystem. The
    officially supported [Kubernetes module](https://oreil.ly/6KgK0) installs and
    configures Kubernetes on existing nodes, including high availability support for
    both the control plane and `etcd`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet是一个功能强大、成熟、复杂的通用配置管理工具，被广泛使用，并拥有一个庞大的开源模块生态系统。官方支持的[Kubernetes模块](https://oreil.ly/6KgK0)在现有节点上安装和配置Kubernetes，包括对控制平面和`etcd`的高可用性支持。
- en: 'Buy or Build: Our Recommendations'
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购买或自建：我们的建议
- en: This has necessarily been a quick tour of some of the options available for
    managing Kubernetes clusters, because the range of offerings is large and varied,
    and growing all the time. However, we can make a few recommendations based on
    commonsense principles. One of these is the philosophy of [*run less software*](https://oreil.ly/egxan).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这必然是一个快速浏览一些管理Kubernetes集群的选项，因为提供的服务范围广泛且多样化，而且一直在不断增长。然而，我们可以根据常识原则提出一些建议。其中之一是
    [*减少运行的软件*](https://oreil.ly/egxan) 的理念。
- en: Run Less Software
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少运行的软件
- en: There are three pillars of the Run Less Software philosophy, all of which will
    help you manipulate time and defeat your enemies.
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 减少运行的软件理念有三个支柱，所有这些支柱都将帮助你操控时间并击败你的敌人。
- en: ''
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Choose standard technology
  id: totrans-140
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择标准技术
- en: ''
  id: totrans-141
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-142
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Outsource undifferentiated heavy lifting
  id: totrans-143
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 外包未区分的繁重工作
- en: ''
  id: totrans-144
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-145
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Create enduring competitive advantage
  id: totrans-146
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创造持久的竞争优势
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-148
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Rich Archbold
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Rich Archbold
- en: While using innovative new technologies is fun and exciting, it doesn’t always
    make sense from a business point of view. Using *boring* software that everybody
    else is using is generally a good bet. It probably works, it’s probably well supported,
    and you’re not going to be the one taking the risks and dealing with the inevitable
    bugs.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用创新性的新技术很有趣和令人兴奋，但从商业角度来看并不总是明智的。使用众所周知的软件通常是一个好主意。它可能有效，可能得到很好的支持，并且你不会成为承担风险和处理不可避免的错误的那个人。
- en: If you’re running containerized workloads and cloud native applications, Kubernetes
    is the boring choice, in the best possible way. Given that, you should opt for
    the most mature, stable, and widely used Kubernetes tools and services.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行容器化工作负载和云原生应用程序，Kubernetes是最稳定的选择，最好的方式。鉴于此，你应该选择最成熟、稳定和广泛使用的Kubernetes工具和服务。
- en: '*Undifferentiated heavy lifting* is a term coined at Amazon to denote all the
    hard work and effort that goes into things like installing and managing software,
    maintaining infrastructure, and so on. There’s nothing special about this work;
    it’s the same for you as it is for every other company out there. It costs you
    money, instead of making you money.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*未区分的繁重工作* 是亚马逊创造的一个术语，用来表示所有的辛勤工作和努力，比如安装和管理软件，维护基础架构等等。这项工作没有什么特别之处；对你来说和对其他任何公司来说都一样。这项工作会花费你的钱，而不是让你赚钱。'
- en: The run less software philosophy says that you should outsource undifferentiated
    heavy lifting because it’ll be cheaper in the long run, and it frees up resources
    you can use to work on your core business.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 减少运行的软件理念认为你应该外包未区分的繁重工作，因为从长远来看这样会更便宜，并且它释放了可以用来专注于核心业务的资源。
- en: Use Managed Kubernetes if You Can
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果可以的话，使用托管的Kubernetes
- en: With the run less software principles in mind, we recommend that you outsource
    your Kubernetes cluster operations to a managed service. Installing, configuring,
    maintaining, securing, upgrading, and making your Kubernetes cluster reliable
    is undifferentiated heavy lifting, so it makes sense for almost all businesses
    not to do it themselves.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到减少软件运行的原则，我们建议您将 Kubernetes 集群操作外包给托管服务。安装、配置、维护、保护、升级和使您的 Kubernetes 集群可靠是重复且繁重的工作，因此对于几乎所有企业来说，自行操作并不合理。
- en: Cloud native is the practice of accelerating your business by not running stuff
    that doesn’t differentiate you. It’s not a cloud provider, it’s not Kubernetes,
    it’s not containers, it’s not a technology.
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 云原生是通过不运行不区分您的内容来加速您的业务的实践。它不是一个云提供商，不是 Kubernetes，不是容器，不是技术。
- en: ''
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Justin Garrison](https://oreil.ly/Zdlmn)'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[贾斯汀·加里森](https://oreil.ly/Zdlmn)'
- en: But What About Vendor Lock-in?
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但是供应商锁定呢？
- en: If you commit to a managed Kubernetes service from a particular vendor, such
    as Google Cloud, will that lock you in to the vendor and reduce your options in
    the future? Not necessarily. Kubernetes is a standard platform, so any applications
    and services you build to run on GKE will also work on any other certified Kubernetes
    provider’s system with possibly some minor tweaks.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择了特定供应商（例如 Google Cloud）的托管 Kubernetes 服务，那么会不会将您锁定到该供应商，从而减少未来的选择？未必。Kubernetes
    是一个标准平台，因此您构建的任何应用程序和服务都可以在任何其他经过认证的 Kubernetes 提供商系统上运行，可能需要进行一些微小的调整。
- en: Does managed Kubernetes make you more prone to lock-in than running your own
    Kubernetes cluster? We think it’s the other way around. Self-hosting Kubernetes
    involves a lot of machinery and configuration to maintain, all of which is intimately
    tied in to a specific cloud provider’s API. Provisioning AWS virtual machines
    to run Kubernetes, for example, requires completely different code than the same
    operation on Google Cloud. Some Kubernetes setup assistants, like the ones we’ve
    mentioned in this chapter, support multiple cloud providers, but many don’t.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 托管 Kubernetes 是否会使您更容易陷入锁定，而不是自己运行 Kubernetes 集群？我们认为情况恰恰相反。自主托管 Kubernetes
    涉及大量的机械操作和配置维护，所有这些都与特定云提供商的 API 密切相关。例如，在 AWS 上部署虚拟机来运行 Kubernetes，与在 Google
    Cloud 上执行相同操作需要完全不同的代码。某些 Kubernetes 设置助手（如本章提到的一些）支持多个云提供商，但也有很多不支持。
- en: Part of the point of Kubernetes is to abstract away the technical details of
    the underlying infrastructure, and present developers with a standard, familiar
    interface that works the same way whether it happens to be running on Azure or
    your own bare-metal servers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的一部分目的是抽象出底层基础设施的技术细节，并为开发人员提供一个标准且熟悉的界面，无论是在 Azure 上运行还是在您自己的金属裸机服务器上运行，它都以相同的方式工作。
- en: As long as you design your applications and automation to target Kubernetes
    itself, rather than the cloud infrastructure directly, you’re as free from vendor
    lock-in as you can reasonably be. Each infrastructure provider will have some
    differences as to how they define compute, networking, and storage, but to Kubernetes
    those present as minor tweaks to the Kubernetes manifests. The majority of Kubernetes
    deployments will work the same way, regardless of where they are running.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您设计应用程序和自动化以针对 Kubernetes 本身而不是直接针对云基础设施，您就可以尽可能地摆脱供应商锁定。每个基础设施提供商对于计算、网络和存储的定义都有所不同，但对于
    Kubernetes 来说，这些只是 Kubernetes 清单的微小调整而已。大多数 Kubernetes 部署无论在何处运行，工作方式都是相同的。
- en: Bare-Metal and On-Prem
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 金属裸机和本地部署
- en: It may come as a surprise to you that being cloud native doesn’t actually require
    being *in the cloud*, in the sense of outsourcing your infrastructure to a public
    cloud provider such as Azure or AWS.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会感到惊讶，云原生实际上并不需要完全“在云端”，即将您的基础设施外包给 Azure 或 AWS 等公共云提供商。
- en: Many organizations run part or all of their infrastructure on bare-metal hardware,
    whether colocated in datacenters or on-premises. Everything we’ve said in this
    book about Kubernetes and containers applies just as well to in-house infrastructure
    as it does to the cloud.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织在裸机硬件上运行其基础设施的部分或全部，无论是在数据中心共享托管还是在本地部署。我们在本书中讨论的关于 Kubernetes 和容器的所有内容同样适用于内部基础设施以及云环境。
- en: You can run Kubernetes on your own hardware machines; if your budget is limited,
    you can even run it on a stack of Raspberry Pis ([Figure 3-2](#img-pikube)). Some
    businesses run a *private cloud*, consisting of virtual machines hosted by on-prem
    hardware.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在自己的硬件机器上运行Kubernetes；如果预算有限，甚至可以在一堆树莓派上运行它（[图3-2](#img-pikube)）。一些企业运行着*私有云*，由本地硬件托管的虚拟机组成。
- en: '![A stack of Raspberry Pis running Kubernetes](assets/cnd2_0302.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![一堆运行Kubernetes的树莓派](assets/cnd2_0302.png)'
- en: 'Figure 3-2\. Kubernetes on a budget: a Raspberry Pi cluster (photo by David
    Merrick)'
  id: totrans-170
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-2\. 预算有限下的Kubernetes：一个树莓派集群（摄影：David Merrick）
- en: Multicloud Kubernetes Clusters
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多云Kubernetes集群
- en: In some organizations, developers deploy applications to multiple types of infrastructure,
    including public cloud and private on-premise environments. Because Kubernetes
    can run anywhere, it has become a useful tool to standardize the experience between
    these multicloud or hybrid-cloud situations. There are tools available to make
    it easier to manage workloads across different Kubernetes clusters running in
    such environments.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些组织中，开发人员将应用程序部署到包括公共云和私有本地环境在内的多种基础设施类型上。由于Kubernetes可以在任何地方运行，它已成为在多云或混合云情况下标准化体验的有用工具。有可用的工具可以更轻松地管理在这些环境中运行的不同Kubernetes集群的工作负载。
- en: VMware Tanzu
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VMware Tanzu
- en: VMware has traditionally been associated with making tools for managing virtual
    machines and the related VM infrastructure. They now also have tooling for Kubernetes
    environments with a suite of tools called Tanzu. Specifically, [Tanzu Mission
    Control](https://oreil.ly/o3Bym) allows you to centrally manage multiple Kubernetes
    clusters, regardless of where they are running. There are also tools for building,
    deploying, and monitoring the containerized workloads.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: VMware传统上与制作管理虚拟机和相关VM基础设施的工具有关。他们现在还有用于Kubernetes环境的工具套件Tanzu。具体而言，[Tanzu Mission
    Control](https://oreil.ly/o3Bym)允许您集中管理多个Kubernetes集群，无论它们在何处运行。还有用于构建、部署和监控容器化工作负载的工具。
- en: OpenShift
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift
- en: '[OpenShift](https://www.openshift.com) is more than just a managed Kubernetes
    service: it’s a full *Platform-as-a-Service* (PaaS) product, which aims to manage
    the whole software development life cycle, including continuous integration and
    build tools, test runner, application deployment, monitoring, and orchestration.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[OpenShift](https://www.openshift.com)不仅仅是一个托管的Kubernetes服务：它是一个完整的*平台即服务*（PaaS）产品，旨在管理整个软件开发生命周期，包括持续集成和构建工具、测试运行器、应用程序部署、监控和编排。'
- en: OpenShift can be deployed to bare-metal servers, virtual machines, private clouds,
    and public clouds, so you can create a single Kubernetes cluster that spans all
    these environments. This makes it a good choice for very large organizations,
    or those with very heterogeneous infrastructure.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift可以部署到裸金属服务器、虚拟机、私有云和公共云上，因此您可以创建一个跨越所有这些环境的单一Kubernetes集群。这使其成为非常大型组织或具有非常异构基础设施的组织的不错选择。
- en: Anthos
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Anthos
- en: Similar to VMware Tanzu, Google’s [Anthos](https://cloud.google.com/anthos)
    tooling makes it possible to centrally manage Kubernetes workloads in clusters
    that are running in multiple clouds, such as GKE, AWS, and on-premise Kubernetes
    environments. They also allow you to hook your on-premise infrastructure into
    the other services that Google Cloud offers, like their hosted container registry,
    build pipeline tooling, and networking layer.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于VMware Tanzu，Google的[Anthos](https://cloud.google.com/anthos)工具使得可以在多个云中心地管理运行在多个云环境中（如GKE、AWS和本地Kubernetes环境）的Kubernetes工作负载。它们还允许您将本地基础设施连接到Google
    Cloud提供的其他服务，如托管的容器注册表、构建管道工具和网络层。
- en: Most small- and mid-sized teams likely do not need to start out focused on multicloud
    infrastructures. These types of environments come with additional complexity and
    cost. We recommend starting out with the basics and building up from there. Putting
    your applications into containers and deploying to a managed Kubernetes cloud
    offering is already going a long way toward setting yourself up for future flexibility,
    should you ever end up needing to run your applications in multiple clouds simultaneously.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数中小型团队可能不需要立即专注于多云基础设施。这些类型的环境带来了额外的复杂性和成本。我们建议从基础知识开始，并逐步构建。将您的应用程序置于容器中，并部署到托管的Kubernetes云服务中，已经在为未来灵活性做好了准备，即使将来可能需要在多个云中同时运行您的应用程序。
- en: Use Standard Kubernetes Self-Hosting Tools if You Must
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果必须的话，请使用标准的Kubernetes自托管工具
- en: If you already know that you have special requirements that mean managed Kubernetes
    offerings won’t work for you, only then should you consider running Kubernetes
    yourself.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经知道自己有特殊需求，意味着托管的Kubernetes提供不适合您，那么只有在这种情况下才应考虑自己运行Kubernetes。
- en: If that’s the case, you should go with the most mature, powerful, and widely
    used tools available. We recommend starting with kubeadm, and then compare that
    to something like kops or Kubespray to see if they meet your requirements.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情况是这样，您应该选择最成熟、功能强大且广泛使用的工具。我们建议先使用kubeadm，然后将其与kops或Kubespray进行比较，看看它们是否符合您的需求。
- en: On the other hand, if you need your cluster to span multiple clouds or platforms,
    including bare-metal servers, and you want to keep your options open, consider
    looking into VMware Tanzu or Google Anthos. Since most of the administration overhead
    of Kubernetes is in setting up and maintaining the control plane, this is a good
    compromise.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您需要跨多个云或平台（包括裸机服务器）扩展集群，并希望保持选项开放，考虑研究VMware Tanzu或Google Anthos。由于大部分Kubernetes的管理开销在于设置和维护控制平面，这是一个很好的折中方案。
- en: Clusterless Container Services
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无集群容器服务
- en: If you really want to minimize the overhead of running container workloads,
    there’s yet another level above fully managed Kubernetes services. These are so-called
    *clusterless* services, such as Azure Container Instances (ACI), AWS Fargate,
    and Google Cloud Run. Although there really is a cluster under the hood, you don’t
    have access to it via tools like `kubectl`. Instead, you specify a container image
    to run, and a few parameters like the CPU and memory requirements of your application,
    and the service does the rest.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您真的想要最小化运行容器工作负载的开销，还有一种完全托管的Kubernetes服务的更高级别。这些被称为*无集群*服务，例如Azure Container
    Instances（ACI）、AWS Fargate和Google Cloud Run。虽然在幕后确实有一个集群，但您不能通过`kubectl`等工具访问它。相反，您只需指定要运行的容器镜像以及一些参数，如应用程序的CPU和内存需求，服务将处理其余部分。
- en: These types of managed services can be great for getting containers up and running
    quickly, but you may run into a limitation around something like how the networking
    or storage works on a particular cloud provider, and you may need to turn to something
    a little more powerful and flexible for your applications, like the full Kubernetes
    platform.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的托管服务非常适合快速启动和运行容器，但您可能会遇到某些云提供商在网络或存储方面的限制，因此可能需要转向更强大和灵活的解决方案，例如完整的Kubernetes平台。
- en: AWS Fargate
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Fargate
- en: According to Amazon, “Fargate is like EC2, but instead of a virtual machine,
    you get a container.” Unlike ECS, there’s no need to provision cluster nodes yourself
    and then connect them to a control plane. You just define a task, which is essentially
    a set of instructions for how to run your container image, and launch it. Pricing
    is per second based on the amount of CPU and memory resources that the task consumes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 根据亚马逊的说法，“Fargate就像EC2，但不是虚拟机，而是容器。”与ECS不同，无需自己规划集群节点然后将它们连接到控制平面。您只需定义一个任务，这本质上是一组关于如何运行您的容器镜像的指令，并启动它。按照任务消耗的CPU和内存资源的秒计费。
- en: It’s probably fair to say that [Fargate](https://aws.amazon.com/fargate) makes
    sense for simple, self-contained, long-running compute tasks or batch jobs (such
    as data crunching) that don’t require much customization or integration with other
    services. It’s also ideal for build containers, which tend to be short-lived,
    and for any situation where the overhead of managing worker nodes isn’t justified.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说[Fargate](https://aws.amazon.com/fargate)适合简单、自包含、长时间运行的计算任务或批处理作业（如数据处理），不需要太多定制或与其他服务集成。它也非常适合构建容器，这些容器往往生命周期短暂，并且在无法自我管理工作节点的开销合理情况下使用。
- en: If you’re already using ECS with EC2 worker nodes, switching to Fargate will
    relieve you of the need to provision and manage those nodes.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在使用带有EC2工作节点的ECS，转换到Fargate将免去您需要规划和管理这些节点的麻烦。
- en: Azure Container Instances (ACI)
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure容器实例（ACI）
- en: '[Microsoft’s Azure Container Instances (ACI)](https://oreil.ly/9sFxO) service
    is similar to Fargate, but also offers integration with the Azure Kubernetes Service
    (AKS). For example, you can configure your AKS cluster to provision temporary
    extra Pods inside ACI to handle spikes or bursts in demand.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[微软的Azure容器实例（ACI）](https://oreil.ly/9sFxO)服务与Fargate类似，但还提供与Azure Kubernetes
    Service（AKS）的集成。例如，您可以配置AKS集群，在ACI内部生成临时额外的Pod来处理需求的峰值或突发。'
- en: Similarly, you can run batch jobs in ACI in an ad hoc way, without having to
    keep idle nodes around when there’s no work for them to do. Microsoft calls this
    idea *serverless containers*, but we find that terminology both confusing (*serverless*
    usually refers to cloud functions, or functions as a service [FaaS]) and inaccurate
    (there are servers; you just can’t access them).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，您可以在ACI中以临时方式运行批处理作业，而无需在没有工作要做时保留空闲节点。Microsoft将这种理念称为*无服务器容器*，但我们发现这个术语既令人困惑（*无服务器*通常指云函数或作为服务的函数[FaaS]），又不准确（还是有服务器存在；只是您无法访问它们）。
- en: ACI is also integrated with Azure Event Grid, Microsoft’s managed event routing
    service. Using Event Grid, ACI containers can communicate with cloud services,
    cloud functions, or Kubernetes applications running in AKS.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: ACI还与Azure事件网格集成，这是Microsoft的托管事件路由服务。使用事件网格，ACI容器可以与云服务、云函数或在AKS中运行的Kubernetes应用程序进行通信。
- en: You can create, run, or pass data to ACI containers using Azure Functions. The
    advantage of this is that you can run any workload from a cloud function, not
    just those using the officially supported (*blessed*) languages, such as Python
    or JavaScript.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Azure函数创建、运行或传递数据给ACI容器。这样做的好处是，您可以从云函数运行任何工作负载，而不仅仅是使用官方支持的（*祝福*）语言，如Python或JavaScript。
- en: If you can containerize your workload, you can run it as a cloud function, with
    all the associated tooling. For example, Microsoft Power Automate allows even
    nonprogrammers to build up workflows graphically, connecting containers, functions,
    and events.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能将工作负载容器化，就可以将其作为云函数运行，并使用相关工具。例如，Microsoft Power Automate甚至允许非程序员以图形方式构建工作流程，连接容器、函数和事件。
- en: Google Cloud Run
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Cloud Run
- en: Similar to ACI and Fargate, Google Cloud Run is another “container-as-a-service”
    offering that hides all of the server infrastructure from you. You simply publish
    a container image and tell Cloud Run to run that container for every incoming
    web request or received [Pub/Sub](https://cloud.google.com/pubsub) message, their
    hosted message-bus service. By default, the launched containers timeout after
    5 minutes, although you can extend this up to 60 minutes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于ACI和Fargate，Google Cloud Run是另一个“容器即服务”的选择，将所有服务器基础设施都隐藏起来。您只需发布一个容器映像，并告诉Cloud
    Run在每个传入的Web请求或接收到的[Pub/Sub](https://cloud.google.com/pubsub)消息上运行该容器，它们的托管消息总线服务。默认情况下，启动的容器在5分钟后超时，尽管您可以将其延长至60分钟。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Kubernetes is everywhere! Our journey through the extensive landscape of Kubernetes
    tools, services, and products has been necessarily brief, but we hope you found
    it useful.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes无处不在！我们在广阔的Kubernetes工具、服务和产品领域中的旅程必然简要，但希望您觉得它有用。
- en: While our coverage of specific products and features is as up-to-date as we
    can make it, the world moves pretty fast, and we expect a lot will have changed
    even by the time you read this.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们尽力使产品和功能的覆盖率尽可能更新，但世界变化迅速，我们预计即使在您阅读本文时，很多事情也会发生变化。
- en: 'However, we think the basic point stands: it’s not worth managing Kubernetes
    clusters yourself if a service provider can do it better and cheaper.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们认为基本观点是站得住脚的：如果服务提供商能够更好地、更便宜地管理Kubernetes集群，那么自己管理可能并不值得。
- en: In our experience of consulting for companies migrating to Kubernetes, this
    is often a surprising idea, or at least not one that occurs to a lot of people.
    We often find that organizations have taken their first steps with self-hosted
    clusters, using tools like kops, and hadn’t really thought about using a managed
    service such as GKE. It’s well worth thinking about.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为迁移到Kubernetes的公司提供咨询的经验中，这通常是一个令人惊讶的想法，或者至少不是许多人想到的。我们经常发现，组织已经开始使用诸如kops之类的自托管集群工具迈出第一步，但并没有真正考虑使用像GKE这样的托管服务。这确实值得考虑。
- en: 'More things to bear in mind:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的更多事项：
- en: Kubernetes clusters are made up of the *control plane*, and *worker nodes*,
    which run your workloads.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes集群由*控制平面*和*工作节点*组成，用于运行工作负载。
- en: Production clusters must be *highly available*, meaning that the failure of
    a control plane node won’t lose data or affect the operation of the cluster.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产集群必须具有*高可用性*，这意味着控制平面节点的故障不会丢失数据或影响集群的操作。
- en: It’s a long way from a simple demo cluster to one that’s ready for critical
    production workloads. High availability, security, and node management are just
    some of the issues involved.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从简单的演示集群到准备好处理关键生产工作负载的集群还有很长的路要走。高可用性、安全性和节点管理只是其中的一些问题。
- en: Managing your own clusters requires a significant investment of time, effort,
    and expertise. Even then, you can still get it wrong.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理自己的集群需要大量的时间、精力和专业知识投入。即便如此，仍有可能出错。
- en: Managed services like GKE, EKS, AKS, and other similar offerings do all the
    heavy lifting for you, at much lower cost than self-hosting.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 GKE、EKS、AKS 和其他类似的托管服务为你做了所有繁重的工作，成本比自行托管低得多。
- en: If you have to host your own cluster, kops and Kubespray are mature and widely
    used tools that can provision and manage production-grade clusters on AWS and
    Google Cloud.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你必须自行托管你的集群，**kops** 和 **Kubespray** 是成熟且广泛使用的工具，可以在 AWS 和 Google Cloud 上提供和管理生产级集群。
- en: Tools like VMware Tanzu and Google Anthos make it possible to centrally manage
    Kubernetes clusters running in multiple clouds and on-premise infrastructure.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 VMware Tanzu 和 Google Anthos 这样的工具使得在多个云和本地基础设施上集中管理运行的 Kubernetes 集群成为可能。
- en: Don’t self-host your cluster without sound business reasons. If you do self-host,
    don’t underestimate the engineering time involved for the initial setup and ongoing
    maintenance overhead.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有充分的业务理由，请不要自行托管你的集群。如果你选择自行托管，请不要低估初始设置和持续维护的工程时间成本。
