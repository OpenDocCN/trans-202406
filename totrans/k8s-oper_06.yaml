- en: Chapter 6\. Adapter Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider the numerous steps it would take to write an Operator from scratch.
    You would have to create CRDs to specify the interface for end users. Kubernetes
    controllers would not only need to be written with the Operator’s domain-specific
    logic, but also be correctly hooked into a running cluster to receive the proper
    notifications. Roles and service accounts would need to be created to permit the
    Operator to function in the capacity it needs. An Operator is run as a pod inside
    of a cluster, so an image would need to be built, along with its accompanying
    deployment manifest.
  prefs: []
  type: TYPE_NORMAL
- en: Many projects have already invested in application deployment and configuration
    technologies. The Helm project allows users to define their cluster resources
    in a formatted text file and deploy them through the Helm command-line tools.
    Ansible is a popular automation engine for creating reusable scripts for provisioning
    and configuring a group of resources. Both projects have devoted followings of
    developers who may lack the resources to migrate to using Operators for their
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Operator SDK provides a solution to both these problems through its *Adapter
    Operators*. Through the command-line tool, the SDK generates the code necessary
    to run technologies such as Helm and Ansible in an Operator. This allows you to
    rapidly migrate your infrastructure to an Operator model without needing to write
    the necessary supporting Operator code. The advantages of doing this include:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides a consistent interface through CRDs, regardless of whether the underlying
    technology is Helm, Ansible, or Go.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows the Helm and Ansible solutions to leverage the Operator deployment and
    lifecycle benefits that Operator Lifecycle Manager provides (see [Chapter 8](ch08.html#operator_lifecyle_manager)
    for more information).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables hosting of those solutions on Operator repositories like OperatorHub.io
    (see [Chapter 10](ch10.html#getting_involved) for more information).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter we demonstrate how to use the SDK to build and test Adapter
    Operators using the Visitors Site application introduced in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Helm Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Helm](https://helm.sh/) is a package manager for Kubernetes. It makes it easier
    to deploy applications with multiple components, but each deployment is still
    a manual process. If you’re deploying many instances of a Helm-packaged app, it
    would be convenient to automate those deployments with an Operator.'
  prefs: []
  type: TYPE_NORMAL
- en: Helm’s intricacies are outside the scope of this book—you can consult the [documentation](https://helm.sh/docs/)
    for more details—but a little background will help you understand the Helm Operator.
    Helm defines the Kubernetes resources that constitute an application, such as
    deployments and services, in a file called a *chart*. Charts support configuration
    variables, so you can customize application instances without needing to edit
    the chart itself. These configuration values are specified in a file named *values.yaml*.
    A Helm Operator can deploy each instance of an application with a different version
    of *values.yaml*.
  prefs: []
  type: TYPE_NORMAL
- en: The Operator SDK generates Kubernetes controller code for a Helm Operator when
    it is passed the `--type=helm` argument. You supply a Helm chart for your application,
    and the resulting Helm Operator watches for new CRs of its given type. When it
    finds one of these CRs, it constructs a Helm *values.yaml* file from the values
    defined in the resource. The Operator then creates the application resources specified
    in its Helm chart according to the settings in *values.yaml*. To configure another
    instance of the application, you create a new CR containing appropriate values
    for the instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SDK provides two variations on how to build Helm-based Operators:'
  prefs: []
  type: TYPE_NORMAL
- en: The project generation process builds a blank Helm chart structure within the
    Operator project code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An existing chart is specified at Operator creation time, which the creation
    process uses to populate the generated Operator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections we discuss each of these approaches. As a prerequisite,
    be sure to install the Helm command-line tools on your machine. You can find information
    on doing this in [Helm’s install documentation](https://oreil.ly/qpZX0).
  prefs: []
  type: TYPE_NORMAL
- en: Building the Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SDK’s `new` command creates the skeleton project files for a new Operator.
    These files include all of the code necessary for a Kubernetes controller that
    invokes the appropriate Helm chart to field requests for CRs. We’ll discuss these
    files in greater detail later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create an Operator with the skeleton for a new Helm chart, use the `--type=helm`
    argument. The following example creates the basis of a Helm Operator for the Visitors
    Site application (see [Chapter 5](ch05.html#sample_application_visitors_site)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`visitors-helm-operator` is the name of the generated Operator. The other two
    arguments, `--api-version` and `--kind`, describe the CR this Operator manages.
    These arguments result in the creation of a basic CRD for the new type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SDK creates a new directory with the same name as `$OPERATOR_NAME`, which
    contains all of the Operator’s files. There are a few files and directories to
    note:'
  prefs: []
  type: TYPE_NORMAL
- en: '*deploy/*'
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains Kubernetes template files that are used to deploy and
    configure the Operator, including the CRD, the Operator deployment resource itself,
    and the necessary RBAC resources for the Operator to run.
  prefs: []
  type: TYPE_NORMAL
- en: '*helm-charts/*'
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains a skeleton directory structure for a Helm chart with
    the same name as the CR kind. The files within are similar to those the Helm CLI
    creates when it initializes a new chart, including a *values.yaml* file. A new
    chart is added to this directory for each new CR type the Operator manages.
  prefs: []
  type: TYPE_NORMAL
- en: '*watches.yaml*'
  prefs: []
  type: TYPE_NORMAL
- en: This file maps each CR type to the specific Helm chart that is used to handle
    it.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, everything is in place to begin to implement your chart. However,
    if you already have a chart written, there is an easier approach.
  prefs: []
  type: TYPE_NORMAL
- en: Use an existing chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for building an Operator from an existing Helm chart is similar
    to that for creating an Operator with a new chart. In addition to the `--type=helm`
    argument, there are a few additional arguments to take into consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: --helm-chart
  prefs: []
  type: TYPE_NORMAL
- en: 'Tells the SDK to initialize the Operator with an existing chart. The value
    can be:'
  prefs: []
  type: TYPE_NORMAL
- en: A URL to a chart archive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The repository and name of a remote chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The location of a local directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: --helm-chart-repo
  prefs: []
  type: TYPE_NORMAL
- en: Specifies a remote repository URL for the chart (unless a local directory is
    otherwise specified).
  prefs: []
  type: TYPE_NORMAL
- en: --helm-chart-version
  prefs: []
  type: TYPE_NORMAL
- en: Tells the SDK to fetch a specific version of the chart. If this is omitted,
    the latest available version is used.
  prefs: []
  type: TYPE_NORMAL
- en: When using the `--helm-chart` argument, the `--api-version` and `--kind` arguments
    become optional. The `api-version` is defaulted to `charts.helm.k8s.io/v1alpha1`
    and the `kind` name will be derived from the name of the chart. However, as the
    `api-version` carries information about the CR creator, we recommend that you
    explicitly populate these values appropriately. You can find an example Helm chart
    for deploying the Visitors Site application in this book’s [GitHub repository](https://github.com/kubernetes-operators-book/chapters/tree/master/ch06/visitors-helm).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates how to build an Operator and initialize
    it using an archive of the Visitors Site Helm chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#comarker1-01a)'
  prefs: []
  type: TYPE_NORMAL
- en: Due to an issue with how the Operator SDK handles redirects, you must manually
    download the chart tarball and pass it as a local reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example generates the same files as in the case of creating an
    Operator with a new Helm chart, with the notable exception that the chart files
    are populated from the specified archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The SDK uses the values in the chart’s *values.yaml* file to populate the example
    CR template. For example, the Visitors Site Helm chart has the following *values.yaml*
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The example CR generated by the SDK, found in the *deploy/crds* directory in
    the Operator project root directory, includes these same values in its `spec`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Before running the chart, the Operator will map the values found in the custom
    resource’s `spec` field to the *values.yaml* file.
  prefs: []
  type: TYPE_NORMAL
- en: Fleshing Out the CRD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The generated CRD does not include specific details of the value input and state
    values of the CR type. [Appendix B](app02.html#appendix_crd_validation) describes
    the steps you should take to finish defining the CR.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Operator Permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The generated deployment files include the role the Operator will use to connect
    to the Kubernetes API. By default, this role is extremely permissive. [Appendix C](app03.html#appendix_rbac)
    talks about how to fine-tune the role definition to limit the Operator’s permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Helm Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An Operator is delivered as a normal container image. However, during the development
    and testing cycle, it is often easier to skip the image creation process and simply
    run the Operator outside of the cluster. In this section we describe those steps
    (see [Appendix A](app01.html#appendix_operator_as_deployment) for information
    about running the Operator as a deployment inside the cluster). Run all the commands
    here from within the Operator project root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a local watches file. The generated *watches.yaml* file refers to a specific
    path where the Helm chart is found. This path makes sense in the deployed Operator
    scenario; the image creation process takes care of copying the chart to the necessary
    location. This *watches.yaml* file is still required when running the Operator
    outside of the cluster, so you need to manually make sure your chart can be found
    at that location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The simplest approach is to copy the existing *watches.yaml* file, which is
    located in the root of the Operator project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the *local-watches.yaml* file, edit the `chart` field to contain the full
    path of the chart on your machine. Remember the name of the local watches file;
    you will need it later when you start the Operator process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the CRDs in the cluster using the `kubectl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have finished creating the CRDs, start the Operator using the following
    SDK command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#comarker1-02a)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Operator log messages will appear in this running process as it starts up
    and fields CR requests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command starts a running process that behaves in the same way the Operator
    would if you had deployed it as a pod inside the cluster. (We’ll cover testing
    in more detail in [“Testing an Operator”](#test_operator).)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ansible Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Ansible](https://www.ansible.com/) is a popular management tool for automating
    the provisioning and configuration of commonly run tasks. Similar to a Helm chart,
    an Ansible *playbook* defines a series of *tasks* that are run on a set of servers.
    Reusable *roles*, which extend Ansible through custom functionality, may be used
    to enhance the set of tasks in a playbook.'
  prefs: []
  type: TYPE_NORMAL
- en: One useful collection of roles is [k8s](https://oreil.ly/1ckgw), which provides
    tasks for interacting with a Kubernetes cluster. Using this module, you can write
    playbooks to handle the deployment of applications, including all of the necessary
    supporting Kubernetes resources.
  prefs: []
  type: TYPE_NORMAL
- en: The Operator SDK provides a way to build an Operator that will run Ansible playbooks
    to react to CR changes. The SDK supplies the code for the Kubernetes pieces, such
    as the controller, allowing you to focus on writing the playbooks themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with its Helm support, the Operator SDK generates a project skeleton. When
    run with the `--type=ansible` argument, the project skeleton contains the structure
    for a blank Ansible role. The name of the role is derived from the specified CR
    type name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates creating an Ansible Operator that defines
    a CR for the Visitors Site application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This command produces a similar directory structure to the Helm Operator example.
    The SDK creates a *deploy* directory that contains the same set of files, including
    the CRD and deployment template.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few notable differences from the Helm Operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '*watches.yaml*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of this is the same as for the Helm Operator: it maps a CR type
    to the location of a file that is executed during its resolution. The Ansible
    Operator, however, supports two different types of files (these fields are mutually
    exclusive):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `role` field is included, it must point to the directory of an Ansible
    *role* that is executed during resource reconciliation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `playbook` field is included, it must point to a *playbook* file that
    is run.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The SDK defaults this file to point to the role it created during generation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*roles/*'
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains all of the Ansible roles that may be run by the Operator.
    The SDK generates the base files for a new role when the project is created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Operator manages multiple CR types, multiple roles are added to this
    directory. Additionally, an entry for each type, and its associated role, is added
    to the watches file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, you’ll implement the Ansible role for the CR. The details of what the
    role does will vary depending on the application: some common tasks include the
    creation of deployments and services to run the application’s containers. For
    more on writing Ansible roles, see the [Ansible documentation](https://oreil.ly/bLd5g).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the Ansible role for deploying the Visitors Site in the book’s
    [GitHub repository](https://github.com/kubernetes-operators-book/chapters/tree/master/ch06/ansible/visitors).
    For simplicity while following along with the example application, the role files
    are available as a release there. Similar to the previous Operator creation command,
    you can add the Visitors Site role with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#comarker1-03a)'
  prefs: []
  type: TYPE_NORMAL
- en: This command overwrites the default generated role files with the files necessary
    to run the Visitors Site role.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t cover writing Ansible roles in this book, but it’s important for you
    to understand how user-entered configuration values are propagated into an Ansible
    role.
  prefs: []
  type: TYPE_NORMAL
- en: As with the Helm Operator, configuration values come from the CR’s `spec` section.
    However, within the playbooks and roles, Ansible’s standard ``{{ `variable_name`
    }}`` syntax is used. Field names in Kubernetes typically use camel case (e.g.,
    camelCase), so the Ansible Operator will convert the name of each field to snake
    case (e.g., snake_case) before passing the parameter to the Ansible role. That
    is, the field name `serviceAccount` would be converted to `service_account`. This
    allows the reuse of existing roles using the standard Ansible convention while
    also honoring the Kubernetes resource conventions. You can find the source for
    an Ansible role that deploys the Visitors Site in the book’s [GitHub repository](https://github.com/kubernetes-operators-book/chapters/tree/master/ch06/ansible).
  prefs: []
  type: TYPE_NORMAL
- en: Fleshing Out the CRD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the Helm Operator, you’ll need to expand on the generated CRD to include
    the specifics of your CR. Consult [Appendix B](app02.html#appendix_crd_validation)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Operator Permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ansible Operator also includes a generated role the Operator uses to connect
    to the Kubernetes API. Check [Appendix C](app03.html#appendix_rbac) for more on
    refining the default permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Ansible Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the Helm Operator, the easiest way to test and debug an Ansible Operator
    is to run it outside a cluster, avoiding the steps of building and pushing an
    image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can do this, however, there are a few extra steps you need to take:'
  prefs: []
  type: TYPE_NORMAL
- en: First, install Ansible on the machine running the Operator. Consult the [Ansible
    documentation](https://oreil.ly/9yZRC) for specifics on how to install Ansible
    on your local OS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additional Ansible-related packages must be installed as well, including the
    following (consult the documentation for details on installation):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Ansible Runner](https://oreil.ly/lHDCe)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ansible Runner HTTP Event Emitter](https://oreil.ly/N6ebi)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As with the Helm Operator, the *watches.yaml* file generated by the SDK refers
    to a specific directory for the Ansible role. So you’ll copy the watches file
    and modify it as necessary. Again, run these commands from within the Operator
    project root directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the *local-watches.yaml* file, change the `role` field to reflect the directory
    structure on your machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the CRDs in the cluster using the `kubectl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the CRDs are deployed in the cluster, run the Operator using the SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#comarker1-04a)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Operator log messages will appear in this running process as it starts up
    and fields CR requests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command starts a running process that behaves as the Operator would if
    it was deployed as a pod inside the cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let’s walk through the steps of how to test an Operator.
  prefs: []
  type: TYPE_NORMAL
- en: Testing an Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can test both of the Adapter Operators using the same approach: by deploying
    a CR. Kubernetes notifies the Operator of the CR, which then executes the underlying
    files (either Helm charts or Ansible roles). The SDK generates a sample CR template
    in the *deploy/crds* directory that you can use, or you can create one manually.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to test both types of Operators discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `spec` section of the example CR template (in the Visitors Site example,
    this is named *example_v1_visitorsapp_cr.yaml*) with whatever values are relevant
    to your CR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the resource (in the Operator project root directory) using the Kubernetes
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output for the Operator will appear in the same terminal where you ran the
    `operator-sdk up local` command. Once the test is complete, end the running process
    by pressing `Ctrl-C`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the Visitors Site as described in [Chapter 5](ch05.html#sample_application_visitors_site)
    to verify the application works as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the test is complete, delete the CR using the `kubectl delete` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: During development, repeat this process to test changes. On each iteration,
    be sure to restart the Operator process to pick up any changes to the Helm or
    Ansible files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don’t need to be a programmer to write an Operator. The Operator SDK facilitates
    the packaging of two existing provisioning and configuration technologies, Helm
    and Ansible, as Operators. The SDK also provides a way to rapidly test and debug
    changes by running an Operator outside of the cluster, skipping the time-consuming
    image building and hosting steps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at a more powerful and flexible way of implementing
    Operators by using the Go language.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Helm](https://helm.sh/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ansible](https://www.ansible.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example Operators](https://oreil.ly/KbPFs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
