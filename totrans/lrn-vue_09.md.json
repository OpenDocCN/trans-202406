["```\nyarn add pinia\n```", "```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia' ![1](assets/1.png)\n\nimport App from './App.vue'\nimport router from './router'\n\nconst app = createApp(App)\nconst pinia = createPinia() ![2](assets/2.png)\n\napp.use(pinia) ![3](assets/3.png)\n\napp.mount('#app')\n```", "```\nimport { defineStore } from 'pinia'\n\nexport const useStore = defineStore('storeName', () => {\n    return {\n        state: () => ({\n            // state properties\n            myData: { /**... */}\n        }),\n        getters: {\n            // getters properties\n            computedData: () => { /**... */ }\n        },\n        actions: {\n            // actions methods\n            myAction(){ /**... */ }\n        }\n    }\n})\n```", "```\nimport { defineStore } from 'pinia'\nimport { reactive, computed } from 'vue'\n\nexport const useStore = defineStore('storeName', () => {\n    //state properties\n    const myData = reactive({ /**... */ })\n\n    // getters properties\n    const computedData = computed(() => { /**... */})\n\n    // actions methods\n    const myAction = () => { /**... */ }\n\n    return {\n        myData,\n        computedData,\n        myAction\n    }\n})\n```", "```\n/** src/stores/pizzas.ts */\nimport { defineStore } from 'pinia'\nimport type { Pizza } from '../types/Pizza';\nimport { ref } from 'vue'\n\nexport const usePizzasStore = defineStore('pizzas', () => { ![1](assets/1.png)\n    const pizzas = ref<Pizza[]>([]); ![2](assets/2.png)\n\n    const fetchPizzas = async () => { ![3](assets/3.png)\n        const response = await fetch(\n            'http://exploringvue.com/.netlify/functions/pizzas'\n        );\n        const data = await response.json();\n        pizzas.value = data;\n    }\n\n    return {\n        pizzas,\n        fetchPizzas\n    }\n})\n```", "```\n<template>\n  <div class=\"pizzas-view--container\">\n    <h1>Pizzas</h1>\n    <ul>\n      <li v-for=\"pizza in pizzasStore.pizzas\" :key=\"pizza.id\"> ![1](assets/1.png)\n        <PizzaCard :pizza=\"pizza\" />\n      </li>\n    </ul>\n  </div>\n</template>\n<script lang=\"ts\" setup>\n/**.... */\nimport { watch, type Ref } from \"vue\";\nimport { usePizzasStore } from \"@/stores/pizzas\";\n\n//...\nconst pizzasStore = usePizzasStore(); ![2](assets/2.png)\n\npizzasStore.fetchPizzas(); ![3](assets/3.png)\n</script>\n```", "```\n/** src/views/PizzasView.vue */\nimport { useSearch } from '@/composables/useSearch';\nimport { storeToRefs } from 'pinia';\n\n//...\nconst pizzasStore = usePizzasStore();\nconst { pizzas } = storeToRefs(pizzasStore);\nconst { search, searchResults }: PizzaSearch = useSearch({\n  items: pizzas,\n  defaultSearch: props.searchTerm,\n});\n\n//...\n```", "```\n<template>\n  <div class=\"pizzas-view--container\">\n    <h1>Pizzas</h1>\n    <input v-model=\"search\" placeholder=\"Search for a pizza\" />\n    <ul>\n      <li v-for=\"pizza in searchResults\" :key=\"pizza.id\">\n        <PizzaCard :pizza=\"pizza\" />\n      </li>\n    </ul>\n  </div>\n</template>\n```", "```\nimport { defineStore } from 'pinia'\n\ntype CartItem = { ![1](assets/1.png)\n    id: string;\n    quantity: number;\n}\n\nexport const useCartStore = defineStore('cart', () => {\n    const items = reactive<CartItem[]>([]); ![2](assets/2.png)\n    const total = computed(() => { ![3](assets/3.png)\n        return items.reduce((acc, item) => {\n            return acc + item.quantity\n        }, 0)\n    })\n\n    const add = (item: CartItem) => { ![4](assets/4.png)\n        const index = items.findIndex(i => i.id === item.id)\n        if (index > -1) {\n            items[index].quantity += item.quantity\n        } else {\n            items.push(item)\n        }\n    }\n\n    return {\n        items,\n        total,\n        add\n    }\n})\n```", "```\n<template>\n    <div class=\"cart\">\n        <span class=\"cart__total\">Cart: {{ cart.total }}</span>\n    </div>\n</template>\n<script setup lang=\"ts\">\nimport { useCartStore } from '@/stores/cart'\n\nconst cart = useCartStore();\n</script>\n<style scoped>\n.cart__total {\n    cursor: pointer;\n    text-decoration: underline;\n}\n</style>\n```", "```\n<!-- App.vue -->\n<template>\n    <header>\n        <div>Pizza House</div>\n        <Cart />\n    </header>\n    <RouterView />\n</template>\n```", "```\n<template>\n  <article class=\"pizza--details-wrapper\">\n    <img :src=\"pizza.image\" :alt=\"pizza.title\" height=\"200\" width=\"300\" />\n    <p>{{ pizza.description }}</p>\n    <div class=\"pizza--inventory\">\n      <div class=\"pizza--inventory-price\">$ {{ pizza.price }}</div>\n    </div>\n    <button class=\"pizza--add\" @click=\"addToCart\">Add to cart</button> ![1](assets/1.png)\n  </article>\n</template>\n<script setup lang=\"ts\">\nimport { useCartStore } from \"@/stores/cart\";\nimport type { Pizza } from \"@/types/Pizza\";\nimport type { PropType } from \"vue\";\n\nconst props = defineProps({\n  pizza: {\n    type: Object as PropType<Pizza>,\n    required: true,\n  },\n});\n\nconst cart = useCartStore(); ![2](assets/2.png)\nconst addToCart = () => {\n  cart.add({ id: props.pizza.id, quantity: 1 }); ![3](assets/3.png)\n};\n</script>\n```", "```\n<template>\n  <article class=\"pizza--details-wrapper\">\n    <!--...-->\n    <div class=\"pizza--inventory\">\n      <!--...-->\n      <span v-if=\"isInCart\">In cart</span> ![1](assets/1.png)\n    </div>\n    <button class=\"pizza--add\" @click=\"addToCart\"> Add to cart </button>\n  </article>\n</template>\n<script setup lang=\"ts\">\n//...\n\nconst isInCart = computed(():boolean => { ![2](assets/2.png)\n  return !!cart.items.find((item) => item.id === props.pizza.id);\n});\n</script>\n```", "```\n<template>\n    <div class=\"cart\">\n        <span\n            class=\"cart__total\"\n            @click=\"showCartDetails.value = !showCartDetails.value;\" ![1](assets/1.png)\n        > Cart: {{ cart.total }} </span>\n        <ul class=\"cart__list\" v-show=\"showCartDetails\"> ![2](assets/2.png)\n            <li v-for=\"item in cart.items\" :key=\"item.id\" class=\"cart__list-item\"> ![3](assets/3.png)\n                <span>Id: {{ item.id }}</span> | <span>Quantity: {{ item.quantity }}</span>\n            </li>\n        </ul>\n    </div>\n</template>\n<script setup lang=\"ts\">\nimport { useCartStore } from '@/stores/cart'\nimport { ref } from 'vue'\n\nconst cart = useCartStore();\nconst showCartDetails = ref(false); ![4](assets/4.png)\n</script>\n```", "```\n.cart {\n    position: relative; ![1](assets/1.png)\n}\n\n.cart__list {\n    position: absolute; ![2](assets/2.png)\n    list-style: none;\n    border: 1px solid #e3e0e0;\n    padding: 10px;\n    inset-inline-end: 0; ![3](assets/3.png)\n    box-shadow: 2px 2px 3px #e3e0e0; ![4](assets/4.png)\n    background-color: white;\n    min-width: 200px;\n}\n```", "```\nimport { defineStore } from 'pinia';\nimport { usePizzasStore } from './pizzas';\n\nexport const useCartStore = defineStore('cart', () => {\n    //... \n    const detailedItems = computed(() => {\n        const pizzasStore = usePizzasStore(); ![1](assets/1.png)\n\n        return items.map(item => { ![2](assets/2.png)\n            const pizza = pizzasStore.pizzas.find(\n                pizza => pizza.id === item.id\n            )\n\n            const pizzaPrice = pizza?.price ? +(pizza?.price) : 0;\n\n            return { ![3](assets/3.png)\n                ...item,\n                title: pizza?.title,\n                price: pizza?.price,\n                total: pizzaPrice * item.quantity\n            }\n        })\n    })\n\n    return {\n        //...\n        detailedItems ![4](assets/4.png)\n    }\n});\n```", "```\n<ul class=\"cart__list\" v-show=\"showCartDetails\">\n    <li\n        v-for=\"(item, index) in cart.detailedItems\" ![1](assets/1.png)\n        :key=\"item.id\"\n        class=\"cart__list-item\">\n        <span>{{index + 1}}. {{ item.title }}</span>\n        <span>${{ item.price }}</span> x <span>{{ item.quantity }}</span>\n        <span>= ${{ item.total }}</span>\n    </li>\n</ul>\n```", "```\n<div class=\"cart__list\" v-show=\"showCartDetails\">\n    <div v-if=\"cart.total === 0\">No items in cart</div>\n    <div v-else>\n        <ul>\n            <li\n                v-for=\"(item, index) in cart.detailedItems\"\n                :key=\"item.id\" class=\"cart__list-item\"\n            >\n                <span>{{index + 1}}. {{ item.title }}</span>\n                <span>${{ item.price }}</span> x <span>{{ item.quantity }}</span>\n                <span>= ${{ item.total }}</span>\n                <button @click=\"cart.remove(item.id)\">Remove</button> ![1](assets/1.png)\n            </li>\n        </ul>\n        <button @click=\"cart.clear\">Remove all</button> ![2](assets/2.png)\n    </div>\n</div>\n```", "```\n//...\n\nexport const useCartStore = defineStore('cart', () => {\n    //...\n    const remove = (id: string) => {\n        const index = items.findIndex(item => item.id === id)\n        if (index > -1) {\n            items.splice(index, 1)\n        }\n    }\n\n    const clear = () => {\n        items.length = 0\n    }\n\n    return {\n        //...\n        remove,\n        clear\n    }\n})\n```", "```\nimport { setActivePinia, createPinia } from 'pinia';\nimport { useCartStore } from '@/stores/cart';\n\ndescribe('Cart store', () => {\n    let cartStore;\n\n    beforeEach(() => { ![1](assets/1.png)\n        setActivePinia(createPinia());\n        cartStore = useCartStore();\n    });\n\n    it('should add item to cart', () => {\n        cartStore.add({ id: '1', quantity: 1 });\n        expect(cartStore.items).toEqual([{ id: '1', quantity: 1 }]);\n    });\n});\n```", "```\n//main.ts\nimport { cartPlugin } from '@/plugins/cartPlugin'\n//...\n\nconst pinia = createPinia()\npinia.use(cartPlugin)\n\napp.use(pinia)\n//...\n```", "```\n//src/plugins/cartPlugin.ts\nexport const cartPlugin = ({ store}) => {\n    if (store.$id === 'cart') {\n        //...\n    }\n}\n```", "```\n//src/plugins/cartPlugin.ts\nexport const cartPlugin = ({ store}) => {\n    if (store.$id === 'cart') {\n        store.$subscribe((options) => {\n            console.log('cart changed', options)\n        })\n    }\n}\n```", "```\n//src/plugins/cartPlugin.ts\n\nexport const cartPlugin = ({ store}) => {\n    if (store.$id === 'cart') {\n        store.$onAction(({ name, args }) => {\n            if (name === 'add') {\n                console.log('item added to cart', args)\n            }\n        })\n    }\n}\n```"]