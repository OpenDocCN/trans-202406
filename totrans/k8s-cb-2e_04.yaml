- en: Chapter 4\. Creating and Modifying Fundamental Workloads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 创建和修改基础工作负载
- en: 'In this chapter, we present recipes that show you how to manage fundamental
    Kubernetes workload types: pods and deployments. We show how to create deployments
    and pods via CLI commands and from a YAML manifest and explain how to scale and
    update a deployment.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了显示如何管理基本 Kubernetes 工作负载类型（pod 和部署）的配方。我们展示了如何通过 CLI 命令和从 YAML 清单创建部署和
    pod，并解释了如何扩展和更新部署。
- en: 4.1 Creating a Pod Using kubectl run
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.1 使用 `kubectl run` 创建 pod
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to quickly launch a long-running application such as a web server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望快速启动一个长时间运行的应用程序，例如 Web 服务器。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl run` command, a generator that creates a pod on the fly. For
    example, to create a pod that runs the NGINX reverse proxy, do the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl run` 命令，它是一个即时创建 pod 的生成器。例如，要创建运行 NGINX 反向代理的 pod，请执行以下操作：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The `kubectl run` command can take a number of arguments to configure additional
    parameters of the pods. For example, you can do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl run` 命令可以接受多个参数来配置 pod 的附加参数。例如，您可以执行以下操作：'
- en: Set environment variables with `--env`.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--env` 设置环境变量。
- en: Define container ports with `--port`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--port` 定义容器端口。
- en: Define a command to run using `--command`.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--command` 定义要运行的命令。
- en: Automatically create an associated service with `--expose`.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--expose` 自动创建关联的服务。
- en: Test a run without actually running anything with `--dry-run=client`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--dry-run=client` 运行测试而不实际运行任何内容。
- en: 'Typical usages are as follows. To launch NGINX serving on port 2368 and create
    a service along with it, enter the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 典型用法如下。要在端口 2368 上启动提供 NGINX 服务并创建与之关联的服务，请输入以下内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To launch MySQL with the root password set, enter this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动设置了 root 密码的 MySQL，请输入以下内容：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To launch a `busybox` container and execute the command `sleep 3600` on start,
    enter this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要在启动时启动一个 `busybox` 容器并执行命令 `sleep 3600`，请输入以下内容：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also `kubectl run --help` for more details about the available arguments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 `kubectl run --help` 获取有关可用参数的更多详细信息。
- en: 4.2 Creating a Deployment Using kubectl create
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.2 使用 `kubectl create` 创建部署
- en: Problem
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to quickly launch a long-running application such as a content management
    system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望快速启动一个长时间运行的应用程序，例如内容管理系统。
- en: Solution
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `kubectl create deployment` to create a deployment manifest on the fly.
    For example, to create a deployment that runs the WordPress content management
    system, do the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl create deployment` 即时创建部署清单。例如，要创建运行 WordPress 内容管理系统的部署，请执行以下操作：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The `kubectl create deployment` command can take a number of arguments to configure
    additional parameters of the deployments. For example, you can do the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl create deployment` 命令可以接受多个参数来配置部署的附加参数。例如，您可以执行以下操作：'
- en: Define container ports with `--port`.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--port` 定义容器端口。
- en: Define the number of replicas using `--replicas`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--replicas` 定义副本数量。
- en: Test a run without actually running anything with `--dry-run=client`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--dry-run=client` 运行测试而不实际运行任何内容。
- en: Provide the created manifest using `--output yaml`.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--output yaml` 提供创建的清单。
- en: See also `kubectl create deployment --help` for more details about the available
    arguments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 `kubectl create deployment --help` 获取有关可用参数的更多详细信息。
- en: 4.3 Creating Objects from File Manifests
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.3 从文件清单创建对象
- en: Problem
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Rather than creating an object via a generator such as `kubectl run`, you want
    to explicitly state its properties and then create it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不要像使用 `kubectl run` 这样的生成器一样创建对象，你希望明确声明其属性，然后创建它。
- en: Solution
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `kubectl apply` like so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl apply` 命令如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In [Recipe 7.3](ch07.html#namespace) you’ll see how to create a namespace using
    a YAML manifest. This is one of the simplest examples as the manifest is very
    short. It can be written in YAML or JSON—​for example, with a YAML manifest file
    *myns.yaml* like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Recipe 7.3](ch07.html#namespace) 中，你将看到如何使用 YAML 清单创建命名空间。这是一个非常简单的示例，因为清单非常简短。它可以用
    YAML 或 JSON 编写，例如，使用 YAML 清单文件 *myns.yaml* 如下所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can create this object with this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令创建此对象：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check that the namespace was created with this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查命名空间是否已创建：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'You can point `kubectl apply` to a URL instead of a filename in your local
    filesystem. For example, to create the frontend for the canonical Guestbook application,
    get the URL of the raw YAML that defines the application in a single manifest
    and enter this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`kubectl apply`指向URL而不是本地文件系统中的文件名。例如，要为规范的Guestbook应用程序创建前端，请获取定义应用程序的原始YAML的URL，并输入以下内容：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Check to see the resources that were created by this operation, for example
    with this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 检查通过此操作创建的资源，例如：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 4.4 Writing a Pod Manifest from Scratch
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.4 从头编写Pod清单
- en: Problem
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to write a pod manifest from scratch and apply it declaratively, as
    opposed to using a command like `kubectl run`, which is imperative and does not
    require manually editing a manifest.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望从头开始编写Pod清单并以声明性方式应用它，而不是使用`kubectl run`这样的命令，后者是命令式的，不需要手动编辑清单。
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'A pod is an `/api/v1` object, and like any other Kubernetes object, its manifest
    file contains the following fields:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Pod是一个`/api/v1`对象，与任何其他Kubernetes对象一样，其清单文件包含以下字段：
- en: '`apiVersion`, which specifies the API version'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiVersion`，指定API版本'
- en: '`kind`, which indicates the type of the object'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind`，指示对象类型'
- en: '`metadata`, which provides some metadata about the object'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata`，提供了关于对象的一些元数据'
- en: '`spec`, which provides the object specification'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec`，提供对象规范'
- en: 'The pod manifest contains an array of containers and an optional array of volumes
    (see [Chapter 8](ch08.html#ch_volumes_config)). In its simplest form, with a single
    container and no volume, it looks something like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Pod清单包含容器数组和可选的卷数组（参见[第8章](ch08.html#ch_volumes_config)）。在其最简单的形式中，具有单个容器且没有卷的情况下，看起来类似于这样：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Save this YAML manifest in a file called *oreilly.yaml* and then use `kubectl`
    to create it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将此YAML清单保存到名为*oreilly.yaml*的文件中，然后使用`kubectl`创建它：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Check to see the resources that were created by this operation, for example
    with this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 检查通过此操作创建的资源，例如：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Discussion
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The API specification of a pod is much richer than what is shown in the Solution,
    which is the most basic functioning pod. For example, a pod can contain multiple
    containers, as shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Pod的API规范比解决方案中显示的要丰富得多，后者是最基本的运行Pod。例如，一个Pod可以包含多个容器，如下所示：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A pod can also contain volume definitions to load data in the containers (see
    [Recipe 8.1](ch08.html#data_exchange_local_volume)), as well as probes to check
    the health of the containerized application (see Recipes [11.2](ch11.html#liveness)
    and [11.3](ch11.html#readiness)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Pod还可以包含卷定义，以在容器中加载数据（参见[Recipe 8.1](ch08.html#data_exchange_local_volume)），以及用于检查容器化应用程序健康状况的探针（参见Recipes
    [11.2](ch11.html#liveness)和[11.3](ch11.html#readiness)）。
- en: A description of the thinking behind many of the specification fields and a
    link to the full API object specification are detailed in the [documentation](https://oreil.ly/pSCBL).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于许多规范字段背后思想的描述以及完整API对象规范的链接都在[文档](https://oreil.ly/pSCBL)中详细说明。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Unless for very specific reasons, never create a pod on its own. Use a `Deployment`
    object (see [Recipe 4.5](#deployments)) to supervise pods—​it will watch over
    the pods through another object called a `ReplicaSet`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除非有非常特定的原因，否则不要单独创建Pod。使用`Deployment`对象（参见[Recipe 4.5](#deployments)）来监督Pod——它将通过另一个称为`ReplicaSet`的对象监视Pod。
- en: 4.5 Launching a Deployment Using a Manifest
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.5 使用清单启动部署
- en: Problem
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to have full control over how a (long-running) app is launched and
    supervised.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望对（长期运行的）应用程序的启动和监控拥有完全的控制权。
- en: Solution
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Write a deployment manifest. For the basics, see also [Recipe 4.4](#pod_manifest).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个部署清单。关于基础知识，还请参见[Recipe 4.4](#pod_manifest)。
- en: 'Let’s say you have manifest file called *fancyapp.yaml* with the following
    contents:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个名为*fancyapp.yaml*的清单文件，其内容如下：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, there are a couple of things you might want to do explicitly
    when launching the app:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，启动应用程序时可能希望显式执行几件事情：
- en: Set the number of pods (`replicas`), or identical copies, that should be launched
    and supervised.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置应该启动和监控的Pod数（`replicas`），或者说是相同的副本。
- en: Label it, such as with `env=development` (see also Recipes [7.5](ch07.html#easy_label)
    and [7.6](ch07.html#labels)).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记它，例如使用`env=development`（另请参阅Recipes [7.5](ch07.html#easy_label)和[7.6](ch07.html#labels)）。
- en: Set environment variables, such as `SIMPLE_SERVICE_VERSION`.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境变量，例如`SIMPLE_SERVICE_VERSION`。
- en: 'Now let’s look at what the deployment entails:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下部署包含的内容：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Warning
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When you want to get rid of a deployment, and with it the replica sets and pods
    it supervises, execute a command like `kubectl delete deploy/fancyapp`. Do *not*
    try to delete individual pods, as they will be re-created by the deployment. This
    is something that often confuses beginners.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要摆脱一个部署及其监督的复制集和Pod时，请执行类似`kubectl delete deploy/fancyapp`的命令。不要尝试删除单个Pod，因为它们将由部署重新创建。这常常让初学者感到困惑。
- en: Deployments allow you to scale the app (see [Recipe 9.1](ch09.html#scaling-deployments))
    as well as roll out a new version or roll back a `ReplicaSet` to a previous version.
    They are, in general, good for stateless apps that require pods with identical
    characteristics.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 部署允许您扩展应用程序（参见[Recipe 9.1](ch09.html#scaling-deployments)），以及部署新版本或将`ReplicaSet`回滚到先前版本。总的来说，它们非常适合需要具有相同特性的无状态应用程序。
- en: Discussion
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: A deployment is a supervisor for pods and replica sets (RSs), giving you fine-grained
    control over how and when a new pod version is rolled out or rolled back to a
    previous state. The RSs and pods that a deployment supervises are generally of
    no interest to you unless, for example, you need to debug a pod (see [Recipe 12.5](ch12.html#debug_pods)).
    [Figure 4-1](#deployment-revisions) illustrates how you can move back and forth
    between deployment revisions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 部署是Pod和复制集（RSs）的监督者，可以精细地控制何时以及如何将新的Pod版本部署或回滚到先前的状态。部署监督的RSs和Pod通常对您来说不感兴趣，除非例如需要调试一个Pod（参见[Recipe
    12.5](ch12.html#debug_pods)）。图 4-1展示了如何在部署修订之间来回切换。
- en: '![Deployment Revisions](assets/kcb2_0401.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![部署修订](assets/kcb2_0401.png)'
- en: Figure 4-1\. Deployment revisions
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 部署修订
- en: 'To generate the manifest for a deployment, you can use the `kubectl create`
    command and the `--dry-run=client` option. This will allow you to generate the
    manifest in YAML or JSON format and save the manifest for later use. For example,
    to create the manifest of a deployment called `fancy-app` using the container
    image `nginx`, issue the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成部署的清单，可以使用`kubectl create`命令和`--dry-run=client`选项。这将允许您以YAML或JSON格式生成清单，并保存清单以供以后使用。例如，要使用容器镜像`nginx`创建名为`fancy-app`的部署清单，请执行以下命令：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See Also
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [`Deployment` documentation](https://oreil.ly/IAghn)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [`Deployment`文档](https://oreil.ly/IAghn)
- en: 4.6 Updating a Deployment
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.6 更新部署
- en: Problem
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a deployment and want to roll out a new version of your app.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经部署了一个应用，并希望部署一个新版本。
- en: Solution
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Update your deployment and let the default update strategy, `RollingUpdate`,
    automatically handle the rollout.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更新您的部署，并让默认的更新策略`RollingUpdate`自动处理部署过程。
- en: 'For example, if you create a new container image and want to update the deployment
    based on it, you can do this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您创建了一个新的容器镜像，并希望基于它更新部署，可以这样做：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You’ve now successfully rolled out a new revision of your deployment where
    only the container image used has changed. All other properties of the deployment,
    such as the number of replicas, stay unchanged. But what if you want to update
    other aspects of the deployment, such as changing environment variables? You can
    use a number of `kubectl` commands to update the deployment. For example, to add
    a port definition to the current deployment, you can use `kubectl edit`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已成功部署了新的版本，仅容器镜像发生了变化。部署的其他属性，如副本数量，保持不变。但是如果您想更新部署的其他方面，比如更改环境变量，您可以使用一些`kubectl`命令来进行更新。例如，要向当前部署添加端口定义，可以使用`kubectl
    edit`：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command will open the current deployment in your default editor or, when
    set and exported, in the editor specified by the environment variable `KUBE_EDITOR`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在您的默认编辑器中打开当前部署，或者在设置和导出时，在由环境变量`KUBE_EDITOR`指定的编辑器中打开。
- en: 'Say you want to add the following port definition (see [Figure 4-2](#deployment-edit)
    for the full file):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要添加以下端口定义（参见[Figure 4-2](#deployment-edit)以获取完整文件）：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The result of the editing process (in this case, with `KUBE_EDITOR` set to `vi`)
    is shown in [Figure 4-2](#deployment-edit).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑过程的结果（在本例中，使用`KUBE_EDITOR`设置为`vi`）显示在[Figure 4-2](#deployment-edit)中。
- en: 'Once you save and exit the editor, Kubernetes kicks off a new deployment, now
    with the port defined. Let’s verify that:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并退出编辑器后，Kubernetes将启动一个新的部署，现在带有定义的端口。让我们验证一下：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Indeed, we see that revision 3 has been rolled out with the changes we introduced
    with `kubectl edit`. However, the `CHANGE-CAUSE` column is empty. You can specify
    a change cause for a revision by using a special annotation. The following is
    an example of setting a change cause for the most recent revision:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们看到修订版本 3 已经根据我们使用 `kubectl edit` 引入的更改进行了推出。然而，`CHANGE-CAUSE` 列为空。您可以通过使用特殊的注解为修订版本指定更改原因。以下是为最近的修订版本设置更改原因的示例：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Editing Deployment](assets/kcb2_0402.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![编辑部署](assets/kcb2_0402.png)'
- en: Figure 4-2\. Editing a deployment
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 编辑部署
- en: 'As mentioned earlier, there are more `kubectl` commands that you can use to
    update your deployment:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，还有更多的 `kubectl` 命令可用于更新您的部署：
- en: Use `kubectl apply` to update a deployment (or create it if it doesn’t exist)
    from a manifest file—​for example, `kubectl apply -f simpleservice.yaml`.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `kubectl apply` 从清单文件更新部署（或者如果不存在则创建它）—例如，`kubectl apply -f simpleservice.yaml`。
- en: Use `kubectl replace` to replace a deployment from a manifest file—​for example,
    `kubectl replace -f simpleservice.yaml`. Note that unlike with `apply`, to use
    `replace`, the deployment must already exist.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `kubectl replace` 从清单文件替换部署—例如，`kubectl replace -f simpleservice.yaml`。请注意，与
    `apply` 不同，要使用 `replace`，部署必须已经存在。
- en: 'Use `kubectl patch` to update a specific key—​for example:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `kubectl patch` 更新特定键—例如：
- en: '[PRE23]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'What if you make a mistake or experience issues with the new version of the
    deployment? Luckily, Kubernetes makes it really easy to roll back to a known good
    state using the `kubectl rollout undo` command. For example, suppose the last
    edit was a mistake and you want to roll back to revision 2\. You can do this with
    the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在部署的新版本中出现错误或遇到问题怎么办？幸运的是，Kubernetes 通过 `kubectl rollout undo` 命令非常容易回滚到已知的良好状态。例如，假设最后一次编辑是错误的，您想要回滚到修订版本
    2。您可以使用以下命令来执行此操作：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can then verify that the port definition has been removed with `kubectl
    get deploy/myapp -o yaml`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以验证端口定义是否已通过 `kubectl get deploy/myapp -o yaml` 删除。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The rollout of a deployment is triggered only if parts of the pod template (that
    is, keys below `.spec.template`) are changed, such as environment variables, ports,
    or the container image. Changes to aspects of the deployments, such as the replica
    count, do not trigger a new deployment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的推出仅在更改了 pod 模板的部分（即 `.spec.template` 下的键），例如环境变量、端口或容器镜像时才会触发，而如副本数等部署的其他方面的更改则不会触发新的部署。
- en: 4.7 Running a Batch Job
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.7 运行批处理作业
- en: Problem
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to run a process that runs for a certain time to completion, such as
    a batch conversion, backup operation, or database schema upgrade.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要运行一个需要一定时间完成的过程，例如批量转换、备份操作或数据库架构升级。
- en: Solution
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a Kubernetes [`Job`](https://oreil.ly/1whb2) to launch and supervise the
    pod(s) that will carry out the batch process.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes [`Job`](https://oreil.ly/1whb2) 来启动和监督执行批处理过程的 pod(s)。
- en: 'First, define the Kubernetes manifest for the job in a file called *counter-batch-job.yaml*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在名为 *counter-batch-job.yaml* 的文件中为作业定义 Kubernetes 清单：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then launch the job and take a look at its status:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动作业并查看其状态：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, you want to verify that it actually carried out the task (counting
    from 1 to 3):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您希望验证它是否确实执行了任务（从1到3进行计数）：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Indeed, as you can see, the `counter` job counted as expected.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，正如您所看到的，`counter` 作业按预期进行了计数。
- en: Discussion
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'After a job has executed successfully, the pod that was created by the job
    will be in the *Completed* state. You can delete the job if you don’t need it
    anymore, which will clean up the pods it created:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 作业成功执行后，由作业创建的 pod 将处于 *Completed* 状态。如果不再需要，可以删除作业，这将清理它创建的 pod：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also temporarily suspend a job’s execution and resume it later. Suspending
    a job will also clean up the pods it created:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以暂时挂起作业的执行，并稍后恢复。挂起作业也将清理它创建的 pod：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To resume the job, simply flip the `suspend` flag:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复作业，只需切换 `suspend` 标志：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 4.8 Running a Task on a Schedule Within a Pod
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.8 在 Kubernetes 管理的 pod 中按时间表运行任务
- en: Problem
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to run a task on a specific schedule within a pod managed by Kubernetes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要在由 Kubernetes 管理的 pod 内部按特定时间表运行任务。
- en: Solution
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use Kubernetes `CronJob` objects. The `CronJob` object is a derivative of the
    more generic `Job` object (see [Recipe 4.7](#run_job)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes `CronJob` 对象。`CronJob` 对象是更通用的 `Job` 对象的派生（参见 [Recipe 4.7](#run_job)）。
- en: 'You can periodically schedule a job by writing a manifest similar to the one
    shown here. In the `spec`, you see a `schedule` section that follows the crontab
    format. You can also use some macros, such as `@hourly`, `@daily`, `@weekly`,
    `@monthly`, and `@yearly`. The `template` section describes the pod that will
    run and the command that will get executed (this one prints the current date and
    time every hour to `stdout`):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过编写类似于此处显示的清单定期调度作业。在 `spec` 中，您可以看到一个遵循 crontab 格式的 `schedule` 部分。您还可以使用一些宏，例如
    `@hourly`、`@daily`、`@weekly`、`@monthly` 和 `@yearly`。`template` 部分描述了将运行的 pod 和将执行的命令（此命令每小时将当前日期和时间打印到
    `stdout`）：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Discussion
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Just like a job, a cron job can be also be suspended and resumed by flipping
    the `suspend` flag. For example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一个工作一样，`cron job` 也可以通过翻转 `suspend` 标志来暂停和恢复。例如：
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you don’t need the cron job anymore, delete it to clean up the pods that
    it created:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不再需要 cron job，请删除它以清理它创建的 pod：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See Also
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Kubernetes `CronJob` documentation](https://oreil.ly/nrxxh)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes `CronJob` 文档](https://oreil.ly/nrxxh)'
- en: 4.9 Running Infrastructure Daemons per Node
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.9 每个节点运行基础设施守护程序
- en: Problem
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to launch an infrastructure daemon—​for example, a log collector or
    monitoring agent—​making sure that exactly one pod runs per node.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望启动基础设施守护程序—例如日志收集器或监控代理—以确保每个节点仅运行一个 pod。
- en: Solution
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use a `DaemonSet` to launch and supervise the daemon process. For example,
    to launch a Fluentd agent on each node in your cluster, create a file named *fluentd-daemonset.yaml*
    with the following contents:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `DaemonSet` 来启动和监督守护进程。例如，要在集群中的每个节点上启动一个 Fluentd 代理，创建一个名为 *fluentd-daemonset.yaml*
    的文件，内容如下：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now launch the `DaemonSet`, like so:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动 `DaemonSet`，如下所示：
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Discussion
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Note that in the preceding output, because the command is executed on Minikube,
    you see only one pod running as there’s only one node in this setup. If you had
    15 nodes in your cluster, you’d have 15 pods overall with 1 pod per node running.
    You can also restrict the daemon to certain nodes using the `nodeSelector` section
    in the `spec` of the `DaemonSet` manifest.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在上述输出中，由于命令在 Minikube 上执行，您只会看到一个正在运行的 pod，因为此设置中只有一个节点。如果集群中有 15 个节点，则总共将有
    15 个 pod，每个节点运行一个 pod。您还可以使用 `DaemonSet` 清单的 `spec` 中的 `nodeSelector` 部分将守护进程限制在某些节点上。
