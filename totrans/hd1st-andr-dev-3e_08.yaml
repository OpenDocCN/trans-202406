- en: 'Chapter 6\. Fragments and Navigation: *Finding Your Way*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0219-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Most apps require more than one screen.**'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve just looked at how to create single-screen apps, which is fine
    for simple applications. But what if you have **more complex requirements**? In
    this chapter, you’ll learn how to use **fragments** and the **Navigation component**
    to **build multi-screen apps.** You’ll learn how **fragments are like subactivities**
    with their own methods. You’ll find out how to **design effective navigation graphs**.
    Finally, you’ll meet the **navigation host** and **navigation controller**, and
    learn how they help you navigate from place to place.
  prefs: []
  type: TYPE_NORMAL
- en: Most apps need more than one screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the apps you’ve built so far have one thing in common: they each have
    a single screen. Each app has a single activity with a corresponding layout, which
    defines the app’s appearance, and how the user can interact with it.'
  prefs: []
  type: TYPE_NORMAL
- en: Most apps, however, contain *more* than one screen. An email app, for example,
    might have one screen that lets you compose an email, and another that displays
    a list of emails you’ve received. A calendar app might display a list of events
    on one screen, and the details of one specific event on another.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to show you how to build multi-screen apps by creating a Secret
    Message app. The app will comprise of a welcome screen, a second screen which
    allows the user to enter a message, and a third which displays an encrypted version
    of the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the app will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0220-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Each screen is a fragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Secret Message app has three distinct screens, and we’re going to build
    each screen as a separate **fragment**. A fragment is like a kind of subactivity
    that’s displayed inside an activity’s layout. It has Kotlin code that controls
    its behavior, and an associated layout that defines its appearance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the three fragments that the app will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A fragment has Kotlin code that controls its behavior, and a layout that
    specifies its appearance.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: WelcomeFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the app’s main screen. It needs to display some introductory text, and
    a button. The button will be used to navigate to the next screen—`MessageFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: MessageFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This screen will let the user enter a message into an edit text. When the user
    clicks on its button, the app will navigate to `EncryptFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: EncryptFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the final screen. It encrypts the user’s message, and displays the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0221-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the user needs to be able to navigate between all three fragments.
    So how will this work?
  prefs: []
  type: TYPE_NORMAL
- en: Navigate between screens using the Navigation component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way of navigating between fragments is to use Android’s **Navigation
    component**. The Navigation component is part of Android Jetpack, and it helps
    you implement navigation in a standard way.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0222-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use the Navigation component in the Secret Message app, we’ll include a
    single activity named `MainActivity`. As the user navigates through the app, the
    activity will display each fragment in turn like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0222-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ll find out more about fragments and the Navigation component as we build
    the Secret Message app. Let’s go through the steps we’ll take to create it.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to start building the Secret Message app in this chapter, and complete
    it in the next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we’ll do in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create and display WelcomeFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, we’ll create `WelcomeFragment`, which will be the app’s first
    screen. We’ll display this fragment in `MainActivity`’s layout so the user sees
    it when the app launches.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0223-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Navigate to MessageFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll create a second fragment named `MessageFragment`, and navigate to it when
    the user clicks on a button in `WelcomeFragment`’s layout. We’ll use Android’s
    Navigation component to implement navigation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0223-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s start by creating a new project for the app.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0224-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to use a new project for the Secret Message app, so create one now
    using the same steps you used in the previous chapters. Choose the Empty Activity
    option, enter a name of “Secret Message” and a package name of “com.hfad.secretmessage”,
    and accept the default save location. Make sure the language is set to Kotlin
    and the minimum SDK is API 21 so it will run on most Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Add some String resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create any fragments, we’re going to add some `String` resources to
    the project. We’ll use these to display text in the fragments’ layouts, such as
    the labels for buttons, and the welcome message on the first screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the `String`s, open the file *strings.xml* in the *SecretMessage/app/src/main/res/values*
    folder, and then add the following resources (in bold) to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0224-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add WelcomeFragment to the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to add a fragment named `WelcomeFragment` to the project. `WelcomeFragment`
    will be the first screen that the user sees when she opens the app, and we’ll
    use it to display some introductory text about the app, and a button.
  prefs: []
  type: TYPE_NORMAL
- en: To add the fragment, highlight the *com.hfad.secretmessage* package in the *app/src/main/java*
    folder in the project explorer, go to the File menu, and choose New→Fragment→Fragment
    (Blank).
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked how you want to configure the new fragment. Name the fragment
    “WelcomeFragment”, and give its layout a name of “fragment_welcome”. Then make
    sure the language is set to Kotlin, and click on the Finish button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0225-02.png)![image](Images/f0225-03.png)'
  prefs: []
  type: TYPE_IMG
- en: When you click on the Finish button, Android Studio creates the new fragment
    and adds it to the project.
  prefs: []
  type: TYPE_NORMAL
- en: What fragment code looks like
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create a new fragment, Android Studio adds two files to your project:
    a Kotlin file that controls the fragment’s behavior, and a layout file that describes
    the fragment’s appearance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll look at the Kotlin code first. Go to the *com.hfad.secretmessage* package
    in the *app/src/main/java* folder and open the file *WelcomeFragment.kt*. Then
    **replace the code** that Android Studio generated with the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0226-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Fragment code looks similar to activity code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The above code defines a basic fragment. As you can see, the code for a fragment
    looks very similar to activity code. Instead of extending `AppCompatActivity`,
    however, it extends `**Fragment**`.
  prefs: []
  type: TYPE_NORMAL
- en: The `androidx.fragment.app.Fragment` class is part of Android Jetpack, and it’s
    used to define a basic fragment. It includes the latest fragment features, while
    being backward compatible with older versions of Android.
  prefs: []
  type: TYPE_NORMAL
- en: The fragment overrides the `onCreateView()` method, which gets called as soon
    as Android needs the fragment’s layout. Nearly every fragment overrides this method,
    so let’s look at it in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0226-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The fragment’s onCreateView() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `onCreateView()` method gets called when Android needs access to the fragment’s
    layout. Overriding this method is optional, but as you need to implement it each
    time you define a fragment with a layout, you’ll override it for nearly every
    fragment you create.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method takes three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0227-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The first parameter is a `LayoutInflater` that you use to inflate the fragment’s
    layout. As you learned in [Chapter 3](ch03.xhtml#layoutscolon_being_a_layout),
    inflating a layout turns its XML views into objects.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is a `ViewGroup?`. This is the `ViewGroup` in the activity’s
    layout that displays the fragment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll find out more about this a few pages ahead.
  prefs: []
  type: TYPE_NORMAL
- en: The final parameter is a `Bundle?`. This is used if you’ve previously saved
    the fragment’s state, and want to reinstate it. It works in a similar way to the
    `Bundle?` parameter that’s passed to an activity’s `onCreate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Inflate the fragment’s layout, and return it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `onCreateView()` method returns a `View?`, which is an inflated version
    of the fragment’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0227-04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You inflate the layout using the `LayoutInflater`’s `inflate()` method like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above code is the fragment equivalent of calling an activity’s `setContentView()`
    method, as it’s used to inflate the fragment’s layout into a hierarchy of `View`
    objects. The above code, for example, inflates `WelcomeFragment`’s layout *fragment_welcome.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the fragment’s layout has been inflated, the `View` hierarchy is inserted
    into the activity’s layout, and displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve seen `WelcomeFragment`’s Kotlin code, let’s take a look at its
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0227-05.png)'
  prefs: []
  type: TYPE_IMG
- en: Fragment layout code looks like activity layout code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we said earlier, fragments use layout files to describe their appearance.
    There’s no difference between activity layout and fragment layout code, so **you
    can use any of the views and view groups in your fragment layout code that you’re
    already familiar with**.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to replace the default layout code Android Studio has generated
    for us with a linear layout containing a text view that displays a brief description
    of the app, and a button that we’ll use to navigate to a different fragment later
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *fragment_welcome.xml* in the *app/src/main/res/layout* folder,
    and replace its contents with the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0228-01.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need for `WelcomeFragment` (and its layout) for now,
    so let’s find out how to display it in the app.
  prefs: []
  type: TYPE_NORMAL
- en: You display a fragment in a FragmentContainerView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display a fragment, you need to add it to an activity’s layout. In this app,
    for example, we’re going to display `WelcomeFragment` by adding it to `MainActivity`’s
    layout file *activity_main.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You add a fragment to a layout using a `**FragmentContainerView**`. This is
    a type of `FrameLayout` that’s used to display fragments, and you add it to a
    layout file using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0229-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You specify which fragment you want to display by setting the `FragmentContainerView`’s
    `android:name` attribute to the fully qualified fragment name, including its package.
    In the Secret Message app, we want to display the fragment named `WelcomeFragment`
    that’s in the *com.hfad.secretmessage* package, so we’re setting the `android:name`
    attribute using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0229-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When Android creates the activity’s layout, it populates the `FragmentContainerView`
    with the `View` object returned by the fragment’s `onCreateView()` method. This
    `View` is the fragment’s user interface, so you can think of the `FragmentContainerView`
    as a placeholder for where the fragment’s layout should be inserted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0229-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you know how to add a fragment to a layout, let’s add `WelcomeFragment`
    to `MainActivity`’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: Update the activity_main.xml code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want `MainActivity` to display `WelcomeFragment`, which means we need to
    add a `FragmentContainerView` to its layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the full code for *activity_main.xml*: replace the code so that it includes
    the changes shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0230-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We don’t need to add any extra Kotlin code to `MainActivity` to make it display
    a fragment because the layout’s `FragmentContainerView` handles everything. You
    just need to make sure that the code in *MainActivity.kt* looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0230-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s see what happens when the app runs.
  prefs: []
  type: TYPE_NORMAL
- en: What the code does
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When the app is launched, MainActivity gets created.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0231-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity’s onCreate() method runs.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onCreate()` method specifies that *activity_main.xml* should be used for
    `MainActivity`’s layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0231-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**activity_main.xml includes a FragmentContainerView.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Its `android:name` attribute specifies that it needs to display `WelcomeFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0231-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**WelcomeFragment’s onCreateView() method is called, which inflates its layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`WelcomeFragment`’s inflated view hierarchy is added to the `FragmentContainerView`
    in M`ainActivity`’s layout.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0231-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Finally, MainActivity is displayed on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the `FragmentContainerView` includes `WelcomeFragment`, this fragment is
    displayed on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0232-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that you’ve seen what happens when the code runs, let’s take the app for
    a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the Secret Message app, `MainActivity` is launched. The `FragmentContainerView`
    in `MainActivity`’s layout includes `WelcomeFragment`, so the fragment’s layout
    is displayed on the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0232-03.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ve now learned how to create and display a fragment. Before we build a second
    fragment and learn how to navigate to it, have a go at the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your **job** is to take code snippets from the pool and place them into the
    blank lines in the linear layout. You may **not** use the same code snippet more
    than once, and you won’t need to use all the snippets. Your **goal** is to make
    the linear layout display two fragments, `AFragment` and `BFragment`, so that
    it displays the screen shown on the right. Hint: both fragments are in a package
    named *com.hfad.exercise*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0233-01.png)![image](Images/f0233-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: each thing from the pool can only be used once!**'
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your **job** is to take code snippets from the pool and place them into the
    blank lines in the linear layout. You may **not** use the same code snippet more
    than once, and you won’t need to use all the snippets. Your **goal** is to make
    the linear layout display two fragments, `AFragment` and `BFragment`, so that
    it displays the screen shown on the right. Hint: both fragments are in a package
    named *com.hfad.exercise*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0234-01.png)![image](Images/f0234-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Create MessageFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0235-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, we’ve created a fragment named `WelcomeFragment`, which is displayed
    in `MainActivity`’s layout. Next, we’ll create a new fragment named `MessageFragment`,
    which we’ll navigate to when the user clicks on `WelcomeFragmen`t’s Start button.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll add `MessageFragment` in the same way we added `WelcomeFragment`. Highlight
    the *com.hfad.secretmessage* package in the *app/src/main/java* folder in the
    project explorer, go to the File menu, and choose New→Fragment→Fragment (Blank).
    Name the fragment “MessageFragment” and its layout “fragment_message”, and make
    sure the language is set to Kotlin. Then click on the Finish button to add the
    fragment and its layout to the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0235-02.png)![image](Images/f0235-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Update MessageFragment’s layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create `MessageFragment`, Android Studio adds two new files to your
    project: *MessageFragment.kt* (which specifies the fragment’s behavior), and *fragment_message.xml*
    (which defines its appearance). We’ll update both of these files, starting with
    the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fragment needs to have an edit text to let the user enter a message, and
    a button which, later on, will be used for navigation. You’re already familiar
    with the code to add these views, so update the code in *fragment_message.xml*
    so it matches the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0236-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need for `MessageFragment`’s layout, so let’s go and
    update its Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: Update MessageFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`MessageFragment`’s Kotlin code defines the fragment’s behavior. For now, all
    we need to do is make sure Android Studio hasn’t added any unnecessary extra code
    to it that might stop it from working in the way we want.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the *com.hfad.secretmessage* package in the *app/src/main/java* folder
    and open the file *MessageFragment.kt*. Then replace the code that Android Studio
    has generated with the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0237-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code is everything that *MessageFragment.kt* needs to define a basic
    fragment. Just like the code you saw for `WelcomeFragment`, it extends the `Fragment`
    class, and overrides its `onCreateView()` method. This method inflates the fragment’s
    layout, and returns its root view. It gets called whenever the app needs to display
    the fragment.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now finished writing all the layout and Kotlin code that `MessageFragment`
    needs. Next, we need to make `WelcomeFragment` navigate to it. So how is this
    done?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0237-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Use the Navigation component to navigate between fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we said earlier in the chapter, the standard way of navigating between fragments
    is to use Android’s Navigation component.
  prefs: []
  type: TYPE_NORMAL
- en: The Navigation component is part of Android Jetpack, and it’s a suite of libraries,
    plug-ins, and tools that you add to your project. It’s extremely flexible, and
    simplifies many of the complexities of fragment navigation—such as fragment transactions
    and back stack manipulation—which were previously much harder to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating between fragments is comprised of three main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **A navigation graph**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The navigation graph holds all of the navigation-related information that your
    app requires, and describes the possible paths the user can take when navigating
    the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The navigation graph is an XML resource, but you usually edit it using a visual
    design editor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0238-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/star.png) **A navigation host**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A navigation host is an empty container that’s used to display the fragment
    you navigate to. You add the navigation host to your activity’s layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0238-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/star.png) **A navigation controller**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The navigation controller controls which fragment is displayed in the navigation
    host as the user navigates through the app. You interact with the navigation controller
    using Kotlin code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0238-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We’re going to use all three of these to implement navigation in the Secret
    Message app. First, let’s add the Navigation component’s library to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Use Gradle to add the Navigation component to your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned in [Chapter 4](ch04.xhtml#constraint_layoutscolon_draw_up_a_bluepr),
    you add any extra libraries, tools, and plug-ins your app needs by making changes
    to the *build.gradle* files. When you create a new project, Android Studio automatically
    includes two of these files for you: one for the project, and another for the
    app.'
  prefs: []
  type: TYPE_NORMAL
- en: To add the Navigation component, you need to edit *both* versions of *build.gradle*.
    Let’s begin by updating the project version.
  prefs: []
  type: TYPE_NORMAL
- en: Add a version number to the project build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll begin by adding a new variable to the project’s *build.gradle* file that
    specifies which version of the Navigation component we’re going to use. Using
    a variable for this version number means that if we add any extra Navigation component
    libraries (which we’ll do in the next chapter), the version number for each library
    will stay nice and consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the variable, open the file *SecretMessage/build.gradle*, and add the
    following line (in bold) to the `buildscript` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0239-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a dependency to the app build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, you need to add a library dependency to the app’s version of the *build.gradle*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *SecretMessage/app/build.gradle*, and add the following line
    (in bold) to the `dependencies` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0239-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve made these changes, click on the Sync Now option that appears at
    the top of the code editor. This syncs the changes you’ve made with the rest of
    your project, and adds the library.
  prefs: []
  type: TYPE_NORMAL
- en: Create a navigation graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve added the Navigation component’s main library to the Secret Message
    project, we can implement navigation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by adding a navigation graph to the project. Select the *SecretMessage/app/src/main/res*
    folder in the project explorer, and then choose File→New→Android Resource File.
    When prompted, enter a file name of “nav_graph”, choose a resource type of “Navigation”,
    and click on the OK button. This adds an empty navigation graph file named *nav_graph.xml*
    to the *SecretMessage/app/src/main/res/navigation* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0240-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you’ve created the new navigation graph, open it (if it’s not open already)
    by double-clicking on the *nav_graph.xml* file in the project explorer. The file
    should open in the navigation graph design editor, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0240-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Add fragments to the navigation graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want the user to be able to navigate from `WelcomeFragment` to `MessageFragment`,
    so we need to add these fragments to the navigation graph as **destinations**.
    A destination is a screen in the app—usually a fragment—which the user can navigate
    to.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll add `WelcomeFragment` first, as this is the first screen we want the
    user to see when the app launches. Click on the New Destination button at the
    top of the design editor, and when prompted, select the option for “fragment_welcome”
    (`WelcomeFragment`’s layout). This adds `WelcomeFragment` to the navigation graph,
    so it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0241-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add `MessageFragment` to the navigation graph by clicking on the New
    Destination button, and selecting the “fragment_message” option. This adds the
    second fragment to the navigation graph like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0241-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Connect fragments using an action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We next need to specify that the user can navigate from `WelcomeFragment` to
    `MessageFragment`, and this is done with an **action**. Actions are used to connect
    destinations in the navigation graph, and they define possible paths the user
    can take when navigating through the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to add an action that goes from `WelcomeFragment` to `MessageFragment`,
    as this is the direction in which we want the user to navigate through the app.
    Hover your mouse pointer over `WelcomeFragment` in the design editor, then click
    on the circle that appears on its right edge, and drag it to `MessageFragment`.
    This draws an arrow—the action—between the two fragments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0242-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Every action needs a unique ID
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Every action must have a unique ID. Android uses this ID to determine which
    destination needs to be displayed as the user navigates through the app.***'
  prefs: []
  type: TYPE_NORMAL
- en: Each time you create an action, Android Studio assigns it a default ID. You
    can edit this ID—and any other of the action’s properties—using the Attributes
    panel on the right of the navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: You want the action you just created to have an ID of “action_welcomeFragment_to_messageFragment”
    so that it matches the code in this chapter. Make sure this is the case by selecting
    the action (the arrow) in the design editor, and checking the value of its `id`
    attribute in the Attributes panel. You’ll use this ID a few pages ahead.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0242-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigation graphs are XML resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like a layout, a navigation graph is really just a bunch of XML code. To
    view the code, click on the Code button at the top of the design editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the underlying XML code for the Secret Message app’s navigation graph
    *nav_graph.xml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0243-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, *nav_graph.xml* has a root element of `<navigation>`, and contains
    two `<fragment>` elements: one for `WelcomeFragment`, and another for `MessageFragment`.
    The `<fragment>` element for `WelcomeFragment` includes an extra `<action>` element,
    which denotes the action we just added.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve created the navigation graph, let’s move onto the next part of
    the Navigation component.
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation graphs are usually edited using the design editor, but it can
    still be useful to check the XML.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Add a navigation host to the layout using a FragmentContainerView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we said earlier, the Navigation component is comprised of three main parts:
    a navigation graph that defines the possible navigation paths, a navigation host
    that displays destinations, and a navigation controller that controls which destination
    is displayed. We’ve just created a navigation graph, so the next thing we’ll add
    is the navigation host.'
  prefs: []
  type: TYPE_NORMAL
- en: You add a navigation host by including one in the activity’s layout. The great
    news is that the Navigation component comes with a built-in one named `**NavHostFragment**`
    so you don’t have to write one yourself. It’s a subclass of `Fragment` that implements
    the `NavHost` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'As `NavHostFragment` is a type of fragment, you add it to a layout file using
    a `FragmentContainerView`. The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0244-02.png)![image](Images/f0244-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above code is like the `FragmentContainerView` code you’ve seen before,
    but it includes two extra attributes: `**app:navGraph**` and `**app:defaultNavHost**`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `app:navGraph` attribute tells the navigation host which navigation graph
    to use, in this case *nav_graph.xml*. The navigation graph specifies which fragment
    to display first (its start destination) and lets the user navigate between its
    destinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app:defaultNavHost` attribute lets the navigation host interact with the
    device back button: you’ll find out more about this in the next chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0244-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a NavHostFragment to activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to add a navigation host to `MainActivity`’s layout that uses the
    navigation graph we created. To do this, update the code in *activity_main.xml*
    so it includes the changes below (in bold).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0245-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to navigate between the fragments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve now created a navigation graph, and linked it to a navigation host that’s
    held in a `FragmentContainerView` in `MainActivity`’s layout. When the app runs,
    `WelcomeFragment`—which is the navigation graph’s start destination—will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The final thing we need to do in this chapter is navigate from `WelcomeFragment`
    to `MessageFragment` when the user clicks on the Start button in `WelcomeFragment`’s
    layout. Let’s find out how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0245-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Add an OnClickListener to the button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To navigate from `WelcomeFragment` to `MessageFragment`, we first need to make
    `WelcomeFragment`’s Start button respond to clicks. We’ll do this by adding an
    `OnClickListener` to it.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, you added `OnClickListener` to an *activity’s* button by getting
    a reference to it with `findViewById()`, and then calling its `setOnClickListener`
    method. You included this code in the activity’s `onCreate()` method as this is
    where it first has access to the views in its layout.
  prefs: []
  type: TYPE_NORMAL
- en: When you want to add an `OnClickListener` to a *fragment’s* button, however,
    things are slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0246-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Fragment OnClickListener code is a little different
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first difference is that you add an `OnClickListener` to a *fragment’s*
    button in the fragment’s `**onCreateView()**` ***method, not*** `onCreate()`.
    This is because a fragment first has access to its views in `onCreateView()`,
    so it’s the best place to set any `OnClickListener`s.
  prefs: []
  type: TYPE_NORMAL
- en: The second difference is **the** `**Fragment**` **class doesn’t include a**
    `**findViewById()**` **method**, so you can’t directly call it to get a reference
    to any views. You can, however, call `findViewById()` on the fragment’s root view
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code looks like to add an `OnClickListener` to a view in fragment
    code: we’ll add this to `WelcomeFragment` a couple pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0246-03.png)![image](Images/f0246-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you know how to add an `OnClickListener` to a fragment’s button, let’s
    make it navigate when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Fragment class isn’t a subclass of Activity.**'
  prefs: []
  type: TYPE_NORMAL
- en: Even though fragments have a lot in common with activities, the `Fragment` class
    doesn’t extend `Activity` so it doesn’t inherit any of its methods.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, the `Fragment` class defines its own set of methods. While many of
    these look identical to the ones that activities inherit, it doesn’t include methods
    like `findViewById()`.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find out more about fragments and their methods as we go through the
    book. For now, let’s see what code we need to add to `WelcomeFragment` so that
    it navigates to `MessageFragment` when its button gets clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0247-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Get a navigation controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each time you want to navigate to a new fragment, you first need to get a reference
    to a navigation controller. You do this by calling the `**findNavController()**`
    method on its root `View` object. The following code, for example, gets a reference
    to the navigation controller associated with a root view object named `view`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tell it where to navigate with an action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have a navigation controller, you ask it to navigate to a new destination
    by calling its `**navigate()**` method. This method takes one parameter: a navigation
    action ID.'
  prefs: []
  type: TYPE_NORMAL
- en: As you may recall, when we created the navigation graph, we included an action
    that went from `WelcomeFragment` to `MessageFragment`. We gave this action the
    ID “action_welcomeFragment_to_messageFragment”.
  prefs: []
  type: TYPE_NORMAL
- en: If we pass this ID to the navigation controller’s `navigate()` method, the controller
    will see that the action goes from `WelcomeFragment` to `MessageFragment`, and
    use it to navigate to the new fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0248-02.png)![image](Images/f0248-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to navigate to `MessageFragment` when the user clicks on `WelcomeFragment`’s
    Start button. We’ll therefore add this code to the Start button’s `OnClickListener`
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0248-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you the full `WelcomeFragment` code on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for WelcomeFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Below is the complete code for `WelcomeFragment`; update *WelcomeFragment.kt*
    so it includes the changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0249-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need to make `WelcomeFragment` navigate to `MessageFragment`.
    Let’s go through what the code does when it runs, and then take the app for a
    test drive.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The app is launched and MainActivity gets created.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0250-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity’s layout, activity_main.xml, includes a FragmentContainerView
    that specifies a navigation host and a navigation graph.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0250-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The start destination in the navigation graph is WelcomeFragment, so this
    fragment is added to the navigation host and displayed on the device screen.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0250-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks on the Start button in WelcomeFragment’s layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0250-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The code for the Start button’s OnClickListener finds the navigation controller,
    and calls its navigate() method.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It passes it the action used to navigate from `WelcomeFragment` to `MessageFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0251-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller looks for the action with this ID in the navigation
    graph.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It sees that the action goes from `WelcomeFragment` to `MessageFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0251-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller replaces WelcomeFragment with MessageFragment in
    the navigation host, and MessageFragment is displayed on the device screen.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0251-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` is launched, and `WelcomeFragment` is displayed
    as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Start button, the app navigates to `MessageFragment`, and
    this fragment is displayed on the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0252-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to build a multi-screen app that lets
    you navigate from one screen to another.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll build on this knowledge in the next chapter when we finish building the
    Secret Message app.
  prefs: []
  type: TYPE_NORMAL
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 6](#fragments_and_navigationcolon_finding_yo) under your
    belt and now you’ve added fragments and navigation to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0255-01.png)'
  prefs: []
  type: TYPE_IMG
