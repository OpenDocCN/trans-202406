- en: Chapter 10\. Middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, we’ve already had some exposure to middleware: we’ve used existing
    middleware (`body-parser`, `cookie-parser`, `static`, and `express-session`, to
    name a few), and we’ve even written some of our own (for adding weather data to
    our template context, configuring flash messages, and our 404 handler). But what
    is middleware, exactly?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Conceptually, *middleware* is a way to encapsulate functionality—specifically,
    functionality that operates on an HTTP request to your application. Practically,
    middleware is simply a function that takes three arguments: a request object,
    a response object, and a `next()` function, which will be explained shortly. (There
    is also a form that takes four arguments, for error handling, which will be covered
    at the end of this chapter.)'
  prefs: []
  type: TYPE_NORMAL
- en: Middleware is executed in what’s known as a *pipeline*. You can imagine a physical
    pipe, carrying water. The water gets pumped in at one end, and then there are
    gauges and valves before the water gets where it’s going. The important part about
    this analogy is that *order matters*; if you put a pressure gauge before a valve,
    it has a different effect than if you put the pressure gauge after the valve.
    Similarly, if you have a valve that injects something into the water, everything
    “downstream” from that valve will contain the added ingredient. In an Express
    app, you insert middleware into the pipeline by calling `app.use`.
  prefs: []
  type: TYPE_NORMAL
- en: Prior to Express 4.0, the pipeline was complicated by your having to link in
    the *router* explicitly. Depending on where you linked in the router, routes could
    be linked in out of order, making the pipeline sequence less clear when you mix
    middleware and route handlers. In Express 4.0, middleware and route handlers are
    invoked in the order in which they were linked in, making the sequence much clearer.
  prefs: []
  type: TYPE_NORMAL
- en: It’s common practice to have the last middleware in your pipeline be a catchall
    handler for any request that doesn’t match any other routes. This middleware usually
    returns a status code of 404 (Not Found).
  prefs: []
  type: TYPE_NORMAL
- en: 'So how is a request “terminated” in the pipeline? That’s what the `next` function
    passed to each middleware does: if you *don’t* call `next()`, the request terminates
    with that middleware.'
  prefs: []
  type: TYPE_NORMAL
- en: Middleware Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning how to think flexibly about middleware and route handlers is key to
    understanding how Express works. Here are the things you should keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Route handlers (`app.get`, `app.post`, etc.—often referred to collectively as
    `app.METHOD`) can be thought of as middleware that handles only a specific HTTP
    verb (`GET`, `POST`, etc.). Conversely, middleware can be thought of as a route
    handler that handles all HTTP verbs (this is essentially equivalent to `app.all`,
    which handles any HTTP verb; there are some minor differences with exotic verbs
    such as `PURGE`, but for the common verbs, the effect is the same).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route handlers require a path as their first parameter. If you want that path
    to match any route, simply use `\*`. Middleware can also take a path as its first
    parameter, but it is optional (if it is omitted, it will match any path, as if
    you had specified `*`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route handlers and middleware take a callback function that takes two, three,
    or four parameters (technically, you could also have zero or one parameters, but
    there is no sensible use for these forms). If there are two or three parameters,
    the first two parameters are the request and response objects, and the third parameter
    is the `next` function. If there are four parameters, it becomes *error-handling*
    middleware, and the first parameter becomes an error object, followed by the request,
    response, and next objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you *don’t* call `next()`, the pipeline will be terminated, and no more route
    handlers or middleware will be processed. If you don’t call `next()`, you should
    send a response to the client (`res.send`, `res.json`, `res.render`, etc.); if
    you don’t, the client will hang and eventually time out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you *do* call `next()`, it’s generally inadvisable to send a response to
    the client. If you do, middleware or route handlers further down the pipeline
    will be executed, but any client responses they send will be ignored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Middleware Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to see this in action, let’s try some really simple middleware
    (*ch10/00-simple-middleware.js* in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here we have three examples of middleware. The first one simply logs a message
    to the console before passing on the request to the next middleware in the pipeline
    by calling `next()`. Then the next middleware actually handles the request. Note
    that if we omitted the `res.send` here, no response would ever be returned to
    the client. Eventually, the client would time out. The last middleware will never
    execute, because all requests are terminated in the prior middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s consider a more complicated, complete example (*ch10/01-routing-example.js*
    in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before trying this example, imagine what the result will be. What are the different
    routes? What will the client see? What will be printed on the console? If you
    can correctly answer all of those questions, you’ve got the hang of routes in
    Express! Pay particular attention to the difference between a request to */b*
    and a request to */c*; in both instances, there was an error, but one results
    in a 404, and the other results in a 500.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that middleware *must* be a function. Keep in mind that in JavaScript,
    it’s quite easy (and common) to return a function from a function. For example,
    you’ll note that `express.static` is a function, but we actually invoke it, so
    it must return another function. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note also that a module can export a function, which can in turn be used directly
    as middleware. For example, here’s a module called *lib/tourRequiresWaiver.js*
    (Meadowlark Travel’s rock-climbing packages require a liability waiver):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We could link this middleware in like so (*ch10/02-item-waiver.example.js*
    in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'More commonly, though, you would export an object that contains properties
    that are middleware. For example, let’s put all of our shopping cart validation
    code in *lib/cartValidation.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you could link the middleware in like this (*ch10/03-more-cart-validation.js*
    in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the previous example, we have middleware aborting early with the statement
    `return next()`. Express doesn’t expect middleware to return a value (and it doesn’t
    do anything with any return values), so this is just a shortened way of writing
    `next(); return`.
  prefs: []
  type: TYPE_NORMAL
- en: Common Middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are thousands of middleware projects on npm, there are a handful
    that are common and fundamental, and at least some of these will be found in every
    non-trivial Express project. Some of this middleware was so common that it was
    actually bundled with Express, but it has long since been moved into individual
    packages. The only middleware still bundled with Express itself is `static`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This list attempts to cover the most common middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '`basicauth-middleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides basic access authorization. Keep in mind that basic auth offers only
    the most basic security, and you should use basic auth *only* over HTTPS (otherwise,
    usernames and passwords are transmitted in the clear). You should use basic auth
    only when you need something quick and easy *and* you’re using HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: '`body-parser`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides parsing for HTTP request bodies. Provides middleware for parsing both
    URL-encoded and JSON-encoded bodies, as well as others.
  prefs: []
  type: TYPE_NORMAL
- en: '`busboy`, `multiparty`, `formidable`, `multer`'
  prefs: []
  type: TYPE_NORMAL
- en: All of these middleware options parse request bodies encoded with `multipart/form-data`.
  prefs: []
  type: TYPE_NORMAL
- en: '`compression`'
  prefs: []
  type: TYPE_NORMAL
- en: Compresses response data with gzip or deflate. This is a good thing, and your
    users will thank you, especially those on slow or mobile connections. It should
    be linked in early, before any middleware that might send a response. The only
    thing that I recommend linking in before `compress` is debugging or logging middleware
    (which do not send responses). Note that in most production environments, compression
    is handled by a proxy like NGINX, making this middleware unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: '`cookie-parser`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides cookie support. See [Chapter 9](ch09.xhtml#ch_cookies_and_sessions).
  prefs: []
  type: TYPE_NORMAL
- en: '`cookie-session`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides cookie-storage session support. I do not generally recommend this approach
    to sessions. It must be linked in after `cookie-parser`. See [Chapter 9](ch09.xhtml#ch_cookies_and_sessions).
  prefs: []
  type: TYPE_NORMAL
- en: '`express-session`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides session ID (stored in a cookie) session support. Defaults to a memory
    store, which is not suitable for production and can be configured to use a database
    store. See [Chapter 9](ch09.xhtml#ch_cookies_and_sessions) and [Chapter 13](ch13.xhtml#ch_persistence).
  prefs: []
  type: TYPE_NORMAL
- en: '`csurf`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides protection against cross-site request forgery (CSRF) attacks. This
    uses sessions, so it must be linked in after `express-session` middleware. Unfortunately,
    simply linking in this middleware does not magically protect against CSRF attacks;
    see [Chapter 18](ch18.xhtml#ch_security) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '`serve-index`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides directory listing support for static files. There is no need to include
    this middleware unless you specifically need directory listing.
  prefs: []
  type: TYPE_NORMAL
- en: '`errorhandler`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides stack traces and error messages to the client. I do not recommend linking
    this in on a production server, as it exposes implementation details, which can
    have security or privacy consequences. See [Chapter 20](ch20.xhtml#ch_debugging)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '`serve-favicon`'
  prefs: []
  type: TYPE_NORMAL
- en: Serves the *favicon* (the icon that appears in the title bar of your browser).
    This is not strictly necessary; you can simply put a *favicon.ico* in the root
    of your static directory, but this middleware can improve performance. If you
    use it, it should be linked in high in the middleware stack. It also allows you
    to designate a filename other than *favicon.ico*.
  prefs: []
  type: TYPE_NORMAL
- en: '`morgan`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides automated logging support; all requests will be logged. See [Chapter 20](ch20.xhtml#ch_debugging)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '`method-override`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides support for the `x-http-method-override` request header, which allows
    browsers to “fake” using HTTP methods other than `GET` and `POST`. This can be
    useful for debugging. This is needed only if you’re writing APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '`response-time`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds the `X-Response-Time` header to the response, providing the response time
    in milliseconds. You usually don’t need this middleware unless you are doing performance
    tuning.
  prefs: []
  type: TYPE_NORMAL
- en: '`static`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides support for serving static (public) files. You can link in this middleware
    multiple times, specifying different directories. See [Chapter 17](ch17.xhtml#ch_static_content)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '`vhost`'
  prefs: []
  type: TYPE_NORMAL
- en: Virtual hosts (vhosts), a term borrowed from Apache, makes subdomains easier
    to manage in Express. See [Chapter 14](ch14.xhtml#ch_routing) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Third-Party Middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, there is no comprehensive “store” or index for third-party middleware.
    Almost all Express middleware, however, will be available on npm, so if you search
    npm for “Express” and “middleware,” you’ll get a pretty good list. The official
    Express documentation also contains a useful [list of middleware](http://bit.ly/36UrbnL).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into what middleware is, how to write our own, and
    how it’s processed as part of an Express application. If you’re starting to think
    that an Express application is simply a collection of middleware, you’re starting
    to understand Express! Even the route handlers we’ve been using heretofore are
    just specialized cases of middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we’ll be looking at another common infrastructure need:
    sending email (and you had better believe there is going to be some middleware
    involved!).'
  prefs: []
  type: TYPE_NORMAL
