- en: 'Chapter 5\. Extra-Strength Methods: Writing A Program'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0095-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Let’s put some muscle in our methods.** We dabbled with variables, played
    with a few objects, and wrote a little code. But we were weak. We need more tools.
    Like **operators**. We need more operators so we can do something a little more
    interesting than, say, *bark*. And **loops**. We need loops, but what’s with the
    wimpy *while* loops? We need ***for*** loops if we’re really serious. Might be
    useful to **generate random numbers**. Better learn that too. And why don’t we
    learn it all by *building* something real, to see what it’s like to write (and
    test) a program from scratch. **Maybe a game**, like Battleships. That’s a heavy-lifting
    task, so it’ll take *two* chapters to finish. We’ll build a simple version in
    this chapter and then build a more powerful deluxe version in [Chapter 6](ch06.xhtml#using_the_java_library_get_to_know_the_j),
    *Using the Java Library*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build a Battleship-style game: “Sink a Startup”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s you against the computer, but unlike the real Battleship game, in this
    one you don’t place any ships of your own. Instead, your job is to sink the computer’s
    ships in the fewest number of guesses.
  prefs: []
  type: TYPE_NORMAL
- en: Oh, and we aren’t sinking ships. We’re killing ill-advised, Silicon Valley Startups
    (thus establishing business relevancy so you can expense the cost of this book).
  prefs: []
  type: TYPE_NORMAL
- en: '**Goal:** Sink all of the computer’s Startups in the fewest number of guesses.
    You’re given a rating or level, based on how well you perform.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setup:** When the game program is launched, the computer places three Startups
    on a **virtual 7 x 7 grid**. When that’s complete, the game asks for your first
    guess.'
  prefs: []
  type: TYPE_NORMAL
- en: '**How you play:** We haven’t learned to build a GUI yet, so this version works
    at the command line. The computer will prompt you to enter a guess (a cell) that
    you’ll type at the command line as “A3,” “C5,” etc.). In response to your guess,
    you’ll see a result at the command-line, either “hit,” “miss,” or “You sunk poniez”
    (or whatever the lucky Startup of the day is). When you’ve sent all three Startups
    to that big 404 in the sky, the game ends by printing out your rating.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0096-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’re going to build the Sink a Startup game, with a 7 x 7 grid and three
    Startups. Each Startup takes up three cells.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**part of a game interaction**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0096-02.png)'
  prefs: []
  type: TYPE_IMG
- en: First, a high-level design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know we’ll need classes and methods, but what should they be? To answer that,
    we need more information about what the game should do.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to figure out the general flow of the game. Here’s the basic
    idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0097-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. Whoa. A real flow chart.
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) User starts the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/acirclea.png) Game creates three Startups'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/acircleb.png) Game places the three Startups onto a virtual
    grid'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/1circleb.png) Game play begins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Repeat the following until there are no more Startups:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0097-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circlec.png) Game finishes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give the user a rating based on the number of guesses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we have an idea of the kinds of things the program needs to do. The next
    step is figuring out what kind of **objects** we’ll need to do the work. Remember,
    think like Brad rather than Laura (who we met in [Chapter 2](ch02.xhtml#a_trip_to_objectville_classes_and_object),
    *A Trip to Objectville*); focus first on the ***things*** in the program rather
    than the ***procedures.***
  prefs: []
  type: TYPE_NORMAL
- en: The “Simple Startup Game” a gentler introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It looks like we’re gonna need at least two classes, a Game class and a Startup
    class. But before we build the fullmonty ***Sink a Startup*** game, we’ll start
    with a strippeddown, simplified version, ***Simple Startup Game***. We’ll build
    the simple version in *this* chapter, followed by the deluxe version that we build
    in the *next* chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Everything is simpler in this game. Instead of a 2-D grid, we hide the Startup
    in just a single *row*. And instead of *three* Startups, we use *one*.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is the same, though, so the game still needs to make a Startup instance,
    assign it a location somewhere in the row, get user input, and when all of the
    Startup’s cells have been hit, the game is over. This simplified version of the
    game gives us a big head start on building the full game. If we can get this small
    one working, we can scale it up to the more complex one later.
  prefs: []
  type: TYPE_NORMAL
- en: In this simple version, the game class has no instance variables, and all the
    game code is in the main() method. In other words, when the program is launched
    and main() begins to run, it will make the one and only Startup instance, pick
    a location for it (three consecutive cells on the single virtual seven-cell row),
    ask the user for a guess, check the guess, and repeat until all three cells have
    been hit.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the virtual row is...*virtual*. In other words, it doesn’t
    exist anywhere in the program. As long as both the game and the user know that
    the Startup is hidden in three consecutive cells out of a possible seven (starting
    at zero), the row itself doesn’t have to be represented in code. You might be
    tempted to build an array of seven ints and then assign the Startup to three of
    the seven elements in the array, but you don’t need to. All we need is an array
    that holds just the three cells the Startup occupies.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0098-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/1circlea.png) **Game starts** and creates ONE Startup and
    gives it a location on three cells in the single row of seven cells.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead of “A2,” “C4,” and so on, the locations are just integers (for example:
    1,2,3 are the cell locations in this picture):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0098-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circleb.png) **Game play begins.** Prompt user for a guess;
    then check to see if it hit any of the Startup’s three cells. If a hit, increment
    the numOfHits variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/1circlec.png) **Game finishes** when all three cells have
    been hit (the numOfHits variable value is 3), and the user is told how many guesses
    it took to sink the Startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A complete game interaction**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0098-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Developing a Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a programmer, you probably have a methodology/process/approach to writing
    code. Well, so do we. Our sequence is designed to help you see (and learn) what
    we’re thinking as we work through coding a class. It isn’t necessarily the way
    we (or *you*) write code in the Real World. In the Real World, of course, you’ll
    follow the approach your personal preferences, project, or employer dictate. We,
    however, can do pretty much whatever we want. And when we create a Java class
    as a “learning experience,” we usually do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) Figure out what the class is supposed to *do*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) List the **instance variables and methods.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) Write **prep code** for the methods. (You’ll see
    this in just a moment.)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Images](Images/box.png) Write **test code** for the methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) **Implement** the class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) **Test** the methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) **Debug** and **reimplement** as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/box.png) Express gratitude that we don’t have to test our
    so-called *learning experience* app on actual live users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0099-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The three things we’ll write for each class:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0099-01.png)'
  prefs: []
  type: TYPE_IMG
- en: This bar is displayed on the next set of pages to tell you which part you’re
    working on. For example, if you see this picture at the top of a page, it means
    you’re working on prep code for the SimpleStartup class.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0099-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**prep code**'
  prefs: []
  type: TYPE_NORMAL
- en: A form of pseudocode, to help you focus on the logic without stressing about
    sy ntax.
  prefs: []
  type: TYPE_NORMAL
- en: '**test code**'
  prefs: []
  type: TYPE_NORMAL
- en: A class or methods that will test the real code and validate that it’s doing
    the right thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**real code**'
  prefs: []
  type: TYPE_NORMAL
- en: The actual implementation of the class. This is where we write real Java code.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0100-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You’ll get the idea of how prep code (our version of pseudocode) works as you
    read through this example. It’s sort of halfway between real Java code and a plain
    English description of the class. Most prep code includes three parts: instance
    variable declarations, method declarations, method logic. The most important part
    of prep code is the method logic, because it defines *what* has to happen, which
    we later translate into *how* when we actually write the method code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0100-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing the method implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Let’s write the real method code now and get this puppy working.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0101-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we start coding the methods, though, let’s back up and write some code
    to *test* the methods. That’s right, we’re writing the test code *before* there’s
    anything to test!
  prefs: []
  type: TYPE_NORMAL
- en: The concept of writing the test code first is one of the practices of Test-Driven
    Development (TDD), and it can make it easier (and faster) for you to write your
    code. We’re not necessarily saying you should use TDD, but we do like the part
    about writing tests first. And TDD just *sounds* cool.
  prefs: []
  type: TYPE_NORMAL
- en: Writing test code for the SimpleStartup class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to write test code that can make a SimpleStartup object and run its
    methods. For the SimpleStartup class, we really care about only the *checkYourself()*
    method, although we *will* have to implement the *setLocationCells()* method in
    order to get the *checkYourself()* method to run correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Take a good look at the prep code below for the *checkYourself()* method (the
    *setLocationCells()* method is a no-brainer setter method, so we’re not worried
    about it, but in a “real” application we might want a more robust “setter” method,
    which we *would* want to test).
  prefs: []
  type: TYPE_NORMAL
- en: Then ask yourself, “If the checkYourself() method were implemented, what test
    code could I write that would prove to me the method is working correctly?”
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this prep code:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what we should test:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instantiate a SimpleStartup object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign it a location (an array of 3 ints, like {2, 3, 4}).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an int to represent a user guess (2, 0, etc.).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invoke the checkYourself() method passing it the fake user guess.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Print out the result to see if it’s correct (“passed” or “failed”).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test code for the SimpleStartup class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0103-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr.png) **Yours to solve.**'
  prefs: []
  type: TYPE_NORMAL
- en: The checkYourself() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There isn’t a perfect mapping from prep code to Java code; you’ll see a few
    adjustments. The prep code gave us a much better idea of *what* the code needs
    to do, and now we have to figure out the Java code that can do the *how.*
  prefs: []
  type: TYPE_NORMAL
- en: In the back of your mind, be thinking about parts of this code you might want
    (or need) to improve. The numbers ![image](Images/1.png) are for things (syntax
    and language features) you haven’t seen yet. They’re explained on the opposite
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0104-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Just the new stuff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The things we haven’t seen before are on this page. Stop worrying! There are
    more details later in the chapter. This is just enough to get you going.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0105-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Final code for SimpleStartup and SimpleStartupTestDrive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There’s a little bug lurking here. It compiles and runs, but...don’t worry about
    it for now, but we *will* have to face it a little later.
  prefs: []
  type: TYPE_NORMAL
- en: Prep code for the SimpleStartupGame class Everything happens in main()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some things you’ll have to take on faith. For example, we have one
    line of prep code that says “GET user input from command line.” Let me tell you,
    that’s a little more than we want to implement from scratch right now. But happily,
    we’re using OO. And that means you get to ask some *other* class/object to do
    something for you, without worrying about ***how*** it does it. When you write
    prep code, you should assume that *somehow* you’ll be able to do whatever you
    need to do, so you can put all your brainpower into working out the logic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0109-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The game’s main() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as you did with the SimpleStartup class, be thinking about parts of this
    code you might want (or need) to improve. The numbered things ![image](Images/1.png)
    are for stuff we want to point out. They’re explained on the opposite page. Oh,
    if you’re wondering why we skipped the test code phase for this class, we don’t
    need a test class for the game. It has only one method, so what would you do in
    your test code? Make a separate class that would call main() on this class? We
    didn’t bother, we’ll just run this to test it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0110-01.png)'
  prefs: []
  type: TYPE_IMG
- en: random() and getUserInput()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two things that need a bit more explaining are on this page. This is just a
    quick look to keep you going; more details on the GameHelper class are at the
    end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0111-01.png)![image](Images/f0111-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One last class: GameHelper'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**We made the *Startup* class.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**We made the *game* class.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**All that’s left is the *helper* class**—the one with the getUserInput() method.
    The code to get command-line input is more than we want to explain right now.
    It opens up topics best left for later. (Later, as in [Chapter 16](ch16.xhtml#saving_objects_left_parenthesisand_textr),
    *Saving Objects.*)'
  prefs: []
  type: TYPE_NORMAL
- en: Just copy* the code below and compile it into a class named GameHelper. Drop
    all three class files (SimpleStartup, SimpleStartupGame, GameHelper) into the
    same directory, and make it your working directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0112-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0112-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '* We know how much you enjoy typing, but for those rare moments when you’d
    rather do something else, we’ve made the Ready-Bake Code available on *[https://oreil.ly/hfJava_3e_examples](https://oreil.ly/hfJava_3e_examples).*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s what happens when we run it and enter the numbers 1,2,3,4,5,6\. Lookin’
    good.
  prefs: []
  type: TYPE_NORMAL
- en: '**A complete game interaction**'
  prefs: []
  type: TYPE_NORMAL
- en: (your mileage may vary)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0113-01.png)'
  prefs: []
  type: TYPE_IMG
- en: What’s this? A bug ?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gasp!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s what happens when we enter 1,1,1.
  prefs: []
  type: TYPE_NORMAL
- en: '**A different game interaction** (yikes)'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0113-02.png)'
  prefs: []
  type: TYPE_IMG
- en: More about for loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve covered all the game code for *this* chapter (but we’ll pick it up again
    to finish the deluxe version of the game in the next chapter). We didn’t want
    to interrupt your work with some of the details and background info, so we put
    it back here. We’ll start with the details of for loops, and if you’ve seen this
    kind of syntax in another programming language, just skim these last few pages...
  prefs: []
  type: TYPE_NORMAL
- en: Regular (non-enhanced) for loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0114-01.png)![image](Images/f0114-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What it means in plain English:** “Repeat 100 times.”'
  prefs: []
  type: TYPE_NORMAL
- en: '**How the compiler sees it:**'
  prefs: []
  type: TYPE_NORMAL
- en: create a variable *i* and set it to 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repeat while *i* is less than 100.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: at the end of each loop iteration, add 1 to *i*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Part One: *initialization***'
  prefs: []
  type: TYPE_NORMAL
- en: Use this part to declare and initialize a variable to use within the loop body.
    You’ll most often use this variable as a counter. You can actually initialize
    more than one variable here, but it’s much more common to use a single variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part Two: *boolean test***'
  prefs: []
  type: TYPE_NORMAL
- en: This is where the conditional test goes. Whatever’s in there, it *must* resolve
    to a boolean value (you know, ***true*** or ***false***). You can have a test,
    like (x >= 4), or you can even invoke a method that returns a boolean.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part Three: *iteration expression***'
  prefs: []
  type: TYPE_NORMAL
- en: In this part, put one or more things you want to happen with each trip through
    the loop. Keep in mind that this stuff happens at the *end* of each loop.
  prefs: []
  type: TYPE_NORMAL
- en: '**repeat for 100 reps:**'
  prefs: []
  type: TYPE_NORMAL
- en: Trips through a loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0115-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Difference between for and while
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *while* loop has only the boolean test; it doesn’t have a built-in initialization
    or iteration expression. A *while* loop is good when you don’t know how many times
    to loop and just want to keep going while some condition is true. But if you *know*
    how many times to loop (e.g., the length of an array, 7 times, etc.), a *for*
    loop is cleaner. Here’s the loop above rewritten using *while:*
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0115-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0115-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The enhanced for loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java language added a second kind of *for* loop called the *enhanced for*
    back in Java 5\. This makes it easier to iterate over all the elements in an array
    or other kinds of collections (you’ll learn about *other* collections in the next
    chapter). That’s really all that the enhanced for gives you—a simpler way to walk
    through all the elements in the collection. We’ll see the enhanced for loop in
    the next chapter too, when we talk about collections that *aren’t* arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0116-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What it means in plain English:** “For each element in nameArray, assign
    the element to the ‘name’ variable, and run the body of the loop.”'
  prefs: []
  type: TYPE_NORMAL
- en: '**How the compiler sees it:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a String variable called *name* and set it to null.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the first value in *nameArray* to name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the body of the loop (the code block bounded by curly braces).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the next value in *nameArray* to name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat while *there are still elements* in the array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note: depending on the programming language they’ve used in the past, some
    people refer to the enhanced for as the “for each” or the “for in” loop, because
    that’s how it reads: “for EACH thing IN the collection...”'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part One: *iteration variable declaration***'
  prefs: []
  type: TYPE_NORMAL
- en: Use this part to declare and initialize a variable to use within the loop body.
    With each iteration of the loop, this variable will hold a different element from
    the collection. The type of this variable must be compatible with the elements
    in the array! For example, you can’t declare an *int* iteration variable to use
    with a *String[] array.*
  prefs: []
  type: TYPE_NORMAL
- en: '**Part Two: *the actual collection***'
  prefs: []
  type: TYPE_NORMAL
- en: This must be a reference to an array or other collection. Again, don’t worry
    about the *other* non-array kinds of collections yet—you’ll see them in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Casting primitives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we finish the chapter, we want to tie up a loose end. When we used Math.random(),
    we had to *cast* the result to an int. Casting one numeric type to another can
    change the value itself. It’s important to understand the rules so you’re not
    surprised by this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0117-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In [Chapter 3](ch03.xhtml#know_your_variables_primitives_and_refer), *Know
    Your Variables*, we talked about the sizes of the various primitives and how you
    can’t shove a big thing directly into a small thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A long is bigger than an int, and the compiler can’t be sure where that long
    has been. It might have been out partying with the other longs, and taking on
    really big values. To force the compiler to jam the value of a bigger primitive
    variable into a smaller one, you can use the cast operator. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting in the cast tells the compiler to take the value of y, chop it down
    to int size, and set x equal to whatever is left. If the value of y was bigger
    than the maximum value of x, then what’s left will be a weird (but calculable*)
    number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Still, the point is that the compiler lets you do it. And let’s say you have
    a floating-point number and you just want to get at the whole number (int) part
    of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And don’t even think about casting anything to a boolean or vice versa—just
    walk away.
  prefs: []
  type: TYPE_NORMAL
- en: '**It involves sign bits, binary, “two’s complement,” and other geekery.*'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/exercise.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the JVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The Java file on this page represents a complete source file. Your job is
    to play JVM and determine what would be the output when the program runs.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0118-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**-or-**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0118-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**-or-**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0118-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr.png) **Answers in [“Be the JVM”](#be_the_jvm_left_parenthesisfrom_page_118).**'
  prefs: []
  type: TYPE_NORMAL
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A working Java program is all scrambled up on the fridge. Can you reconstruct
    the code snippets to make a working Java program that produces the output listed
    below? Some of the curly braces fell on the floor and they were too small to pick
    up, so feel free to add as many of those as you need!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0119-02.png)![image](Images/f0119-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_page_1).**'
  prefs: []
  type: TYPE_NORMAL
- en: JavaCross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)![image](Images/f0120-01.png)'
  prefs: []
  type: TYPE_IMG
- en: How does a crossword puzzle help you learn Java? Well, all of the words **are**
    Java related. In addition, the clues provide metaphors, puns, and the like. These
    mental twists and turns burn alternate routes to Java knowledge right into your
    brain!
  prefs: []
  type: TYPE_NORMAL
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Fancy computer word for build
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Multipart loop
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Test first
  prefs: []
  type: TYPE_NORMAL
- en: 7\. 32 bits
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Method’s answer
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Prep code-esque
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Change
  prefs: []
  type: TYPE_NORMAL
- en: 15\. The big toolkit
  prefs: []
  type: TYPE_NORMAL
- en: 17\. An array unit
  prefs: []
  type: TYPE_NORMAL
- en: 18\. Instance or local
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Automatic toolkit
  prefs: []
  type: TYPE_NORMAL
- en: 22\. Looks like a primitive, but..
  prefs: []
  type: TYPE_NORMAL
- en: 25\. Un-castable
  prefs: []
  type: TYPE_NORMAL
- en: 26\. Math method
  prefs: []
  type: TYPE_NORMAL
- en: 28\. Iterate over me
  prefs: []
  type: TYPE_NORMAL
- en: 29\. Leave early
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Increment type
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Class’s workhorse
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Pre is a type of _____
  prefs: []
  type: TYPE_NORMAL
- en: 6\. For’s iteration ______
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Establish first value
  prefs: []
  type: TYPE_NORMAL
- en: 8\. While or For
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Update an instance variable
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Toward blastoff
  prefs: []
  type: TYPE_NORMAL
- en: 14\. A cycle
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Talkative package
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Method messenger (abbrev.)
  prefs: []
  type: TYPE_NORMAL
- en: 21\. As if
  prefs: []
  type: TYPE_NORMAL
- en: 23\. Add after
  prefs: []
  type: TYPE_NORMAL
- en: 24\. Pi house
  prefs: []
  type: TYPE_NORMAL
- en: 26\. Compile it and ____
  prefs: []
  type: TYPE_NORMAL
- en: 27\. ++ quantity
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr.png) **Answers in [“JavaCross”](#javacross_left_parenthesisfrom_page_120r).**'
  prefs: []
  type: TYPE_NORMAL
- en: Mixed Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: A short Java program is listed below. One block of the program is missing. Your
    challenge is to **match the candidate block of code** (on the left) **with the
    output** that you’d see if the block were inserted. Not all the lines of output
    will be used, and some of the lines of output might be used more than once. Draw
    lines connecting the candidate blocks of code with their matching command-line
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr.png) **Answers in [“Mixed Messages”](#mixed_messages_left_parenthesisfro-id100).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0121-01.png)![image](Images/f0121-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Match each candidate with one of the possible outputs
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Be the JVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“BE the JVM”](#be_the_jvm-id000008))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Did you remember to factor in the break statement? How did that affect the
    output?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0122-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Code Magnets”](#code_magnets-id000002))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**What would happen if this code block came before the ‘j’ for loop?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0122-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Puzzle Solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: JavaCross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“JavaCross”](#javacross-id00001))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0123-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Mixed Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Mixed Messages”](#mixed_messages-id00003))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0123-02.png)'
  prefs: []
  type: TYPE_IMG
