- en: Chapter 1\. Operators Teach Kubernetes New Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 操作员教 Kubernetes 新技巧
- en: An Operator is a way to package, run, and maintain a Kubernetes application.
    A Kubernetes application is not only deployed on Kubernetes, it is designed to
    use and to operate in concert with Kubernetes facilities and tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员是打包、运行和维护 Kubernetes 应用程序的一种方式。Kubernetes 应用程序不仅部署在 Kubernetes 上，还设计为与 Kubernetes
    的设施和工具协同使用和运行。
- en: An Operator builds on Kubernetes abstractions to automate the entire lifecycle
    of the software it manages. Because they extend Kubernetes, Operators provide
    application-specific automation in terms familiar to a large and growing community.
    For application programmers, Operators make it easier to deploy and run the foundation
    services on which their apps depend. For infrastructure engineers and vendors,
    Operators provide a consistent way to distribute software on Kubernetes clusters
    and reduce support burdens by identifying and correcting application problems
    before the pager beeps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员建立在 Kubernetes 抽象之上，自动化管理它所管理的软件的整个生命周期。因为它们扩展了 Kubernetes，操作员在一个庞大且不断增长的社区中提供应用程序特定的自动化。对于应用程序程序员来说，操作员使得部署和运行其应用程序所依赖的基础服务变得更容易。对于基础设施工程师和供应商来说，操作员提供了在
    Kubernetes 集群上分发软件的一致方法，并通过在报警器响起之前识别和修正应用程序问题来减少支持负担。
- en: Before we begin to describe how Operators do these jobs, let’s define a few
    Kubernetes terms to provide context and a shared language to describe Operator
    concepts and components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始描述操作员如何完成这些工作之前，让我们定义一些 Kubernetes 术语，以提供上下文和共享语言，描述操作员的概念和组件。
- en: How Kubernetes Works
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的工作原理
- en: Kubernetes automates the lifecycle of a stateless application, such as a static
    web server. Without state, any instances of an application are interchangeable.
    This simple web server retrieves files and sends them on to a visitor’s browser.
    Because the server is not tracking state or storing input or data of any kind,
    when one server instance fails, Kubernetes can replace it with another. Kubernetes
    refers to these instances, each a copy of an application running on the cluster,
    as *replicas*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 自动化状态无关应用程序（如静态 Web 服务器）的生命周期。没有状态，应用程序的任何实例都是可互换的。这个简单的 Web 服务器检索文件并将它们发送到访客的浏览器上。因为服务器不跟踪状态或存储任何输入或数据，当一个服务器实例失败时，Kubernetes
    可以用另一个替换它。Kubernetes 将这些实例称为集群中运行的应用程序副本的每个副本。
- en: A Kubernetes cluster is a collection of computers, called *nodes*. All cluster
    work runs on one, some, or all of a cluster’s nodes. The basic unit of work, and
    of replication, is the *pod*. A pod is a group of one or more Linux containers
    with common resources like networking, storage, and access to shared memory.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 集群是一组计算机，称为 *节点*。所有集群工作在一个、一些或所有集群节点上运行。工作的基本单位和复制单位是 *Pod*。Pod 是一组一个或多个
    Linux 容器，具有共享网络、存储和访问共享内存等资源。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The [Kubernetes pod documentation](https://oreil.ly/ziz5q) is a good starting
    point for more information about the pod abstraction.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kubernetes Pod 文档](https://oreil.ly/ziz5q) 是了解 Pod 抽象更多信息的好起点。'
- en: At a high level, a Kubernetes cluster can be divided into two planes. The *control
    plane* is, in simple terms, Kubernetes itself. A collection of pods comprises
    the control plane and implements the Kubernetes application programming interface
    (API) and cluster orchestration logic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，Kubernetes 集群可以分为两个平面。*控制平面* 简单来说就是 Kubernetes 本身。一组 Pod 组成了控制平面，并实现了
    Kubernetes 应用程序编程接口（API）和集群编排逻辑。
- en: The *application plane*, or *data plane*, is everything else. It is the group
    of nodes where application pods run. One or more nodes are usually dedicated to
    running applications, while one or more nodes are often sequestered to run only
    control plane pods. As with application pods, multiple replicas of control plane
    components can run on multiple controller nodes to provide redundancy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用平面* 或 *数据平面* 是其他所有的内容。这是应用 Pod 运行的节点组。通常有一个或多个节点专门用于运行应用程序，而有一个或多个节点通常被隔离出来，仅用于运行控制平面
    Pod。与应用 Pod 一样，控制平面组件的多个副本可以在多个控制器节点上运行，以提供冗余性。'
- en: The *controllers* of the control plane implement control loops that repeatedly
    compare the desired state of the cluster to its actual state. When the two diverge,
    a controller takes action to make them match. Operators extend this behavior.
    The schematic in [Figure 1-1](#fig1-1) shows the major control plane components,
    with worker nodes running application workloads.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面的*控制器*实现控制循环，不断比较集群的期望状态与实际状态。当两者不一致时，控制器会采取行动使它们匹配。Operator扩展了这种行为。图1-1中的示意图展示了主要的控制平面组件，工作节点上运行应用工作负载。
- en: While a strict division between the control and application planes is a convenient
    mental model and a common way to deploy a Kubernetes cluster to segregate workloads,
    the control plane components are a collection of pods running on nodes, like any
    other application. In small clusters, control plane components are often sharing
    the same node or two with application workloads.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管控制平面和应用平面之间的严格分隔是一种便捷的心理模型和部署Kubernetes集群的常见方式，但控制平面组件是运行在节点上的一组Pod，就像任何其他应用程序一样。在小集群中，控制平面组件通常与应用工作负载共享同一或两个节点。
- en: The conceptual model of a cordoned control plane isn’t quite so tidy, either.
    The kube let agent running on every node is part of the control plane, for example.
    Likewise, an Operator is a type of controller, usually thought of as a control
    plane component. Operators can blur this distinct border between planes, however.
    Treating the control and application planes as isolated domains is a helpful simplifying
    abstraction, not an absolute truth.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 被隔离的控制平面的概念模型也并非如此整洁。例如，运行在每个节点上的kubelet代理就是控制平面的一部分。同样，Operator是一种控制器类型，通常被视为控制平面组件。然而，Operator可能会模糊这两个平面之间的明确边界。将控制和应用平面视为孤立的域是一种有用的简化抽象，而非绝对真理。
- en: '![Figure 1-1: Kubernetes Control Plane and Worker Nodes](assets/kuop_0101.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图1-1：Kubernetes控制平面和工作节点](assets/kuop_0101.png)'
- en: Figure 1-1\. Kubernetes control plane and worker nodes
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. Kubernetes控制平面和工作节点
- en: 'Example: Stateless Web Server'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：无状态Web服务器
- en: Since you haven’t set up a cluster yet, the examples in this chapter are more
    like terminal excerpt “screenshots” that show what basic interactions between
    Kubernetes and an application look like. You are not expected to execute these
    commands as you are those throughout the rest of the book. In this first example,
    Kubernetes manages a relatively simple application and no Operators are involved.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您尚未设置集群，本章节的示例更像是终端摘录的“屏幕截图”，显示了Kubernetes与应用程序之间的基本交互。不要期望像在本书的其余部分一样执行这些命令。在这个第一个示例中，Kubernetes管理一个相对简单的应用程序，并且没有涉及Operator。
- en: 'Consider a cluster running a single replica of a stateless, static web server:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个运行单个无状态静态Web服务器副本的集群：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After declaring there should be three replicas, the cluster’s actual state
    differs from the desired state, and Kubernetes starts two new instances of the
    web server to reconcile the two, scaling the web server deployment:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明应有三个副本后，集群的实际状态与期望状态不同，Kubernetes启动了两个新的Web服务器实例来调和二者，扩展Web服务器部署：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Deleting one of the web server pods triggers work in the control plane to restore
    the desired state of three replicas. Kubernetes starts a new pod to replace the
    deleted one. In this excerpt, the replacement pod shows a `STATUS` of `ContainerCreating`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 删除其中一个Web服务器Pod将触发控制平面中的工作，以恢复三个副本的期望状态。Kubernetes启动一个新的Pod来替换已删除的Pod。在本节中，替换的Pod显示为`STATUS`为`ContainerCreating`：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This static site’s web server is interchangeable with any other replica, or
    with a new pod that replaces one of the replicas. It doesn’t store data or maintain
    state in any way. Kubernetes doesn’t need to make any special arrangements to
    replace a failed pod, or to scale the application by adding or removing replicas
    of the server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个静态站点的Web服务器可以与任何其他副本互换，或者与替换副本之一的新Pod互换。它不会以任何方式存储数据或维护状态。Kubernetes不需要做任何特殊安排来替换失败的Pod，或者通过添加或删除服务器的副本来扩展应用程序。
- en: Stateful Is Hard
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态固态难
- en: Most applications have state. They also have particulars of startup, component
    interdependence, and configuration. They often have their own notion of what “cluster”
    means. They need to reliably store critical and sometimes voluminous data. Those
    are just three of the dimensions in which real-world applications must maintain
    state. It would be ideal to manage these applications with uniform mechanisms
    while automating their complex storage, networking, and cluster connection requirements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都有状态。它们还有启动细节、组件相互依赖和配置的特定内容。它们通常有自己对“集群”含义的理解。它们需要可靠地存储关键且有时是庞大的数据。这些只是现实世界中应用程序必须维护状态的三个方面之一。理想情况下，可以通过统一的机制管理这些应用程序，同时自动化它们复杂的存储、网络和集群连接需求。
- en: Kubernetes cannot know all about every stateful, complex, clustered application
    while also remaining general, adaptable, and simple. It aims instead to provide
    a set of flexible abstractions, covering the basic application concepts of scheduling,
    replication, and failover automation, while providing a clean extension mechanism
    for more advanced or application-specific operations. Kubernetes, on its own,
    does not and should not know the configuration values for, say, a PostgreSQL database
    cluster, with its arranged memberships and stateful, persistent storage.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 不能同时了解每个有状态、复杂且集群化的应用程序的所有细节，同时保持通用、适应性和简单性。它的目标是提供一组灵活的抽象，涵盖调度、复制和故障转移自动化的基本应用程序概念，同时为更高级或特定于应用程序的操作提供清晰的扩展机制。Kubernetes
    本身不应该也不会知道例如 PostgreSQL 数据库集群的配置值，以及其安排的成员和有状态的持久存储。
- en: Operators Are Software SREs
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作员是软件SRE
- en: Site Reliability Engineering (SRE) is a set of patterns and principles for running
    large systems. Originating at Google, SRE has had a pronounced influence on industry
    practice. Practitioners must interpret and apply SRE philosophy to particular
    circumstances, but a key tenet is automating systems administration by writing
    software to run your software. Teams freed from rote maintenance work have more
    time to create new features, fix bugs, and generally improve their products.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 站点可靠性工程（SRE）是运行大型系统的一组模式和原则。起源于Google，SRE对行业实践产生了显著影响。实践者必须解释并应用SRE理念到特定的情况中，但其关键原则之一是通过编写软件来运行您的软件来自动化系统管理。从机械性维护工作中解放出来的团队有更多时间创建新功能、修复错误并总体改进其产品。
- en: An Operator is like an automated Site Reliability Engineer for its application.
    It encodes in software the skills of an expert administrator. An Operator can
    manage a cluster of database servers, for example. It knows the details of configuring
    and managing its application, and it can install a database cluster of a declared
    software version and number of members. An Operator continues to monitor its application
    as it runs, and can back up data, recover from failures, and upgrade the application
    over time, automatically. Cluster users employ `kubectl` and other standard tools
    to work with Operators and the applications they manage, because Operators extend
    Kubernetes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员类似于应用程序的自动化站点可靠性工程师。它将一个专家管理员的技能编码到软件中。例如，操作员可以管理一个数据库服务器集群。它了解配置和管理应用程序的详细信息，并且可以安装声明的软件版本和成员数量的数据库集群。操作员在应用程序运行时继续监视其运行状态，可以备份数据、从故障中恢复，并自动随时间升级应用程序。集群用户使用`kubectl`和其他标准工具与操作员和它们管理的应用程序一起工作，因为操作员扩展了Kubernetes的功能。
- en: How Operators Work
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作员的工作原理
- en: Operators work by extending the Kubernetes control plane and API. In its simplest
    form, an Operator adds an endpoint to the Kubernetes API, called a *custom resource*
    (CR), along with a control plane component that monitors and maintains resources
    of the new type. This Operator can then take action based on the resource’s state.
    This is illustrated in [Figure 1-2](#fig1-2).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员通过扩展Kubernetes控制平面和API来工作。在其最简单的形式中，操作员向Kubernetes API添加一个称为*自定义资源*（CR）的端点，以及一个监视和维护新类型资源的控制平面组件。然后，操作员可以根据资源的状态采取行动。这在[图1-2](#fig1-2)中有所说明。
- en: '![Figure 1-2: Operators are Custom Controllers watching a Custom Resource](assets/kuop_0102.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图1-2：操作员是监视自定义资源的自定义控制器](assets/kuop_0102.png)'
- en: Figure 1-2\. Operators are custom controllers watching a custom resource
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. 操作员是监视自定义资源的自定义控制器
- en: Kubernetes CRs
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes CRs
- en: CRs are the API extension mechanism in Kubernetes. A *custom resource definition*
    (CRD) defines a CR; it’s analogous to a schema for the CR data. Unlike members
    of the official API, a given CRD doesn’t exist on every Kubernetes cluster. CRDs
    extend the API of the particular cluster where they are defined. CRs provide endpoints
    for reading and writing structured data. A cluster user can interact with CRs
    with `kubectl` or another Kubernetes client, just like any other API resource.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CR 是 Kubernetes 中的 API 扩展机制。*自定义资源定义*（CRD）定义了一个 CR；它类似于 CR 数据的模式。与官方 API 的成员不同，给定的
    CRD 不会存在于每个 Kubernetes 集群中。CRD 扩展了它们定义的特定集群的 API。CR 为读写结构化数据提供端点。集群用户可以像处理其他 API
    资源一样使用 `kubectl` 或其他 Kubernetes 客户端与 CR 交互。
- en: How Operators Are Made
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建操作员
- en: Kubernetes compares a set of resources to reality; that is, the running state
    of the cluster. It takes actions to make reality match the desired state described
    by those resources. Operators extend that pattern to specific applications on
    specific clusters. An Operator is a custom Kubernetes controller watching a CR
    type and taking application-specific actions to make reality match the `spec`
    in that resource.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 将一组资源与实际情况进行比较；即集群的运行状态。它采取行动使实际情况与这些资源描述的期望状态匹配。操作员将此模式扩展到特定集群上的特定应用程序。操作员是一个自定义
    Kubernetes 控制器，监视一个 CR 类型，并采取特定应用程序的操作，以使实际情况与该资源中的 `spec` 匹配。
- en: 'Making an Operator means creating a CRD and providing a program that runs in
    a loop watching CRs of that kind. What the Operator does in response to changes
    in the CR is specific to the application the Operator manages. The actions an
    Operator performs can include almost anything: scaling a complex app, application
    version upgrades, or even managing kernel modules for nodes in a computational
    cluster with specialized hardware.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个操作员意味着创建一个 CRD 并提供一个在循环中运行的程序，监视该类 CR。操作员对 CR 中的更改作出响应的方式取决于操作员管理的应用程序。操作员执行的操作几乎可以是任何事情：扩展复杂应用程序，应用程序版本升级，甚至管理具有专用硬件的计算集群节点的内核模块。
- en: 'Example: The etcd Operator'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：etcd 操作员
- en: 'etcd is a distributed key-value store. In other words, it’s a kind of lightweight
    database cluster. An etcd cluster usually requires a knowledgeable administrator
    to manage it. An etcd administrator must know how to:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: etcd 是一个分布式键值存储。换句话说，它是一种轻量级数据库集群。etcd 集群通常需要一个熟练的管理员来管理。etcd 管理员必须知道如何：
- en: Join a new node to an etcd cluster, including configuring its endpoints, making
    connections to persistent storage, and making existing members aware of it.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入新节点到 etcd 集群，包括配置其端点，建立与持久存储的连接，并让现有成员知道它。
- en: Back up the etcd cluster data and configuration.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份 etcd 集群数据和配置。
- en: Upgrade the etcd cluster to new etcd versions.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 etcd 集群升级到新的 etcd 版本。
- en: The etcd Operator knows how to perform those tasks. An Operator knows about
    its application’s internal state, and takes regular action to align that state
    with the desired state expressed in the specification of one or more custom resources.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: etcd 操作员知道如何执行这些任务。操作员了解其应用程序的内部状态，并定期采取行动，以使该状态与一个或多个自定义资源规范中表达的期望状态保持一致。
- en: As in the previous example, the shell excerpts that follow are illustrative,
    and you won’t be able to execute them without prior setup. You’ll do that setup
    and run an Operator in [Chapter 2](ch02.html#running_operators).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例类似，接下来的 shell 摘录仅作说明，如果没有事先设置，您将无法执行它们。您将在 [第二章](ch02.html#running_operators)
    中进行设置并运行操作员。
- en: The Case of the Missing Member
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺失成员的案例
- en: 'Since the etcd Operator understands etcd’s state, it can recover from an etcd
    cluster member’s failure in the same way Kubernetes replaced the deleted stateless
    web server pod in our earlier example. Assume there is a three-member etcd cluster
    managed by the etcd Operator. The Operator itself and the etcd cluster members
    run as pods:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 etcd 操作员了解 etcd 的状态，它可以像 Kubernetes 在前面示例中替换已删除的无状态 Web 服务器 pod 一样从 etcd
    集群成员的故障中恢复。假设由 etcd 操作员管理的三节点 etcd 集群本身和 etcd 集群成员都作为 pod 运行：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Deleting an etcd pod triggers a reconciliation, and the etcd Operator knows
    how to recover to the desired state of three replicas—something Kubernetes can’t
    do alone. But unlike with the blank-slate restart of a stateless web server, the
    Operator has to arrange the new etcd pod’s cluster membership, configuring it
    for the existing endpoints and establishing it with the remaining etcd members:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 删除一个etcd Pod将触发一次协调过程，而etcd Operator知道如何恢复到三个副本的所需状态——这是Kubernetes单独无法完成的。但与无状态Web服务器的空白重启不同，Operator必须安排新的etcd
    Pod的集群成员身份，配置它以适应现有的端点，并与其余的etcd成员建立连接：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#comarker1-i)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#comarker1-i)'
- en: The replacement pod is in the `PodInitializing` state.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 替换的Pod处于`PodInitializing`状态。
- en: The etcd API remains available to clients as the Operator repairs the etcd cluster.
    In [Chapter 2](ch02.html#running_operators), you’ll deploy the etcd Operator and
    put it through its paces while using the etcd API to read and write data. For
    now, it’s worth remembering that adding a member to a running etcd cluster isn’t
    as simple as just running a new etcd pod, and the etcd Operator hides that complexity
    and automatically heals the etcd cluster.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Operator修复etcd集群时，etcd API仍然对客户端可用。在[第2章](ch02.html#running_operators)中，您将部署etcd
    Operator并使用etcd API来读取和写入数据。现在值得记住的是，向运行中的etcd集群添加成员并不像只运行新的etcd Pod那样简单，而etcd
    Operator隐藏了这种复杂性并自动修复etcd集群。
- en: Who Are Operators For?
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Operator适合谁？
- en: The Operator pattern arose in response to infrastructure engineers and developers
    wanting to extend Kubernetes to provide features specific to their sites and software.
    Operators make it easier for cluster administrators to enable, and developers
    to use, foundation software pieces like databases and storage systems with less
    management overhead. If the “killernewdb” database server that’s perfect for your
    application’s backend has an Operator to manage it, you can deploy killernewdb
    without needing to become an expert killernewdb DBA.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Operator模式是为了响应基础设施工程师和开发人员希望扩展Kubernetes以提供特定于其站点和软件的功能而出现的。Operators使集群管理员能够更轻松地启用，并使开发人员能够使用像数据库和存储系统这样的基础软件组件，减少管理开销。例如，如果“killernewdb”数据库服务器适合您的应用程序的后端，并且有一个Operator来管理它，您可以部署killernewdb而无需成为专家级的killernewdb
    DBA。
- en: Application developers build Operators to manage the applications they are delivering,
    simplifying the deployment and management experience on their customers’ Kubernetes
    clusters. Infrastructure engineers create Operators to control deployed services
    and systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发人员构建Operators来管理他们正在交付的应用程序，简化其客户的Kubernetes集群上的部署和管理体验。基础设施工程师创建Operators来控制已部署的服务和系统。
- en: Operator Adoption
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Operator采用
- en: A wide variety of developers and companies have adopted the Operator pattern,
    and there are already many Operators available that make it easier to use key
    services as components of your applications. CrunchyData has developed an Operator
    that manages PostgreSQL database clusters. There are popular Operators for MongoDB
    and Redis. Rook manages Ceph storage on Kubernetes clusters, while other Operators
    provide on-cluster management of external storage services like Amazon S3.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员和公司已经采用了Operator模式，并且已经有许多Operators可用，使得作为应用程序组件使用关键服务更加容易。例如，CrunchyData开发了一个管理PostgreSQL数据库集群的Operator。还有流行的MongoDB和Redis的Operators。Rook管理在Kubernetes集群上的Ceph存储，而其他Operators则提供对外部存储服务（如Amazon
    S3）的集群内管理。
- en: Moreover, Kubernetes-based distributions like Red Hat’s OpenShift use Operators
    to build features atop a Kubernetes core, keeping the OpenShift web console available
    and up to date, for example. On the user side, OpenShift has added mechanisms
    for point-and-click Operator installation and use in the web console, and for
    Operator developers to hook into the [OperatorHub.io](https://operatorhub.io),
    discussed in [Chapter 8](ch08.html#operator_lifecyle_manager) and [Chapter 10](ch10.html#getting_involved).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，基于Kubernetes的发行版，如Red Hat的OpenShift，使用Operators在Kubernetes核心之上构建功能，以确保OpenShift
    Web控制台可用且最新。例如，在用户端，OpenShift已添加了在Web控制台中进行点-and-click Operator安装和使用的机制，并为Operator开发人员提供了与[OperatorHub.io](https://operatorhub.io)集成的方法，详见[第8章](ch08.html#operator_lifecyle_manager)和[第10章](ch10.html#getting_involved)。
- en: Let’s Get Going!
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Operators need a Kubernetes cluster to run on. In the next chapter we’ll show
    you a few different ways to get access to a cluster, whether it’s a local virtual
    Kubernetes on your laptop, a complete installation on some number of nodes, or
    an external service. Once you have admin access to a Kubernetes cluster, you will
    deploy the etcd Operator and see how it manages an etcd cluster on your behalf.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运营商需要一个 Kubernetes 集群来运行。在下一章中，我们将向您展示几种获取集群访问权限的方式，无论是在笔记本电脑上的本地虚拟 Kubernetes，还是在某些节点上的完整安装，或者是外部服务。一旦您具有
    Kubernetes 集群的管理员访问权限，您将部署 etcd Operator 并查看它如何代表您管理 etcd 集群。
