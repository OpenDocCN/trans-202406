- en: Chapter 1\. Operators Teach Kubernetes New Tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Operator is a way to package, run, and maintain a Kubernetes application.
    A Kubernetes application is not only deployed on Kubernetes, it is designed to
    use and to operate in concert with Kubernetes facilities and tools.
  prefs: []
  type: TYPE_NORMAL
- en: An Operator builds on Kubernetes abstractions to automate the entire lifecycle
    of the software it manages. Because they extend Kubernetes, Operators provide
    application-specific automation in terms familiar to a large and growing community.
    For application programmers, Operators make it easier to deploy and run the foundation
    services on which their apps depend. For infrastructure engineers and vendors,
    Operators provide a consistent way to distribute software on Kubernetes clusters
    and reduce support burdens by identifying and correcting application problems
    before the pager beeps.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin to describe how Operators do these jobs, let’s define a few
    Kubernetes terms to provide context and a shared language to describe Operator
    concepts and components.
  prefs: []
  type: TYPE_NORMAL
- en: How Kubernetes Works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes automates the lifecycle of a stateless application, such as a static
    web server. Without state, any instances of an application are interchangeable.
    This simple web server retrieves files and sends them on to a visitor’s browser.
    Because the server is not tracking state or storing input or data of any kind,
    when one server instance fails, Kubernetes can replace it with another. Kubernetes
    refers to these instances, each a copy of an application running on the cluster,
    as *replicas*.
  prefs: []
  type: TYPE_NORMAL
- en: A Kubernetes cluster is a collection of computers, called *nodes*. All cluster
    work runs on one, some, or all of a cluster’s nodes. The basic unit of work, and
    of replication, is the *pod*. A pod is a group of one or more Linux containers
    with common resources like networking, storage, and access to shared memory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The [Kubernetes pod documentation](https://oreil.ly/ziz5q) is a good starting
    point for more information about the pod abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, a Kubernetes cluster can be divided into two planes. The *control
    plane* is, in simple terms, Kubernetes itself. A collection of pods comprises
    the control plane and implements the Kubernetes application programming interface
    (API) and cluster orchestration logic.
  prefs: []
  type: TYPE_NORMAL
- en: The *application plane*, or *data plane*, is everything else. It is the group
    of nodes where application pods run. One or more nodes are usually dedicated to
    running applications, while one or more nodes are often sequestered to run only
    control plane pods. As with application pods, multiple replicas of control plane
    components can run on multiple controller nodes to provide redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: The *controllers* of the control plane implement control loops that repeatedly
    compare the desired state of the cluster to its actual state. When the two diverge,
    a controller takes action to make them match. Operators extend this behavior.
    The schematic in [Figure 1-1](#fig1-1) shows the major control plane components,
    with worker nodes running application workloads.
  prefs: []
  type: TYPE_NORMAL
- en: While a strict division between the control and application planes is a convenient
    mental model and a common way to deploy a Kubernetes cluster to segregate workloads,
    the control plane components are a collection of pods running on nodes, like any
    other application. In small clusters, control plane components are often sharing
    the same node or two with application workloads.
  prefs: []
  type: TYPE_NORMAL
- en: The conceptual model of a cordoned control plane isn’t quite so tidy, either.
    The kube let agent running on every node is part of the control plane, for example.
    Likewise, an Operator is a type of controller, usually thought of as a control
    plane component. Operators can blur this distinct border between planes, however.
    Treating the control and application planes as isolated domains is a helpful simplifying
    abstraction, not an absolute truth.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1-1: Kubernetes Control Plane and Worker Nodes](assets/kuop_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. Kubernetes control plane and worker nodes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Example: Stateless Web Server'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you haven’t set up a cluster yet, the examples in this chapter are more
    like terminal excerpt “screenshots” that show what basic interactions between
    Kubernetes and an application look like. You are not expected to execute these
    commands as you are those throughout the rest of the book. In this first example,
    Kubernetes manages a relatively simple application and no Operators are involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a cluster running a single replica of a stateless, static web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After declaring there should be three replicas, the cluster’s actual state
    differs from the desired state, and Kubernetes starts two new instances of the
    web server to reconcile the two, scaling the web server deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Deleting one of the web server pods triggers work in the control plane to restore
    the desired state of three replicas. Kubernetes starts a new pod to replace the
    deleted one. In this excerpt, the replacement pod shows a `STATUS` of `ContainerCreating`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This static site’s web server is interchangeable with any other replica, or
    with a new pod that replaces one of the replicas. It doesn’t store data or maintain
    state in any way. Kubernetes doesn’t need to make any special arrangements to
    replace a failed pod, or to scale the application by adding or removing replicas
    of the server.
  prefs: []
  type: TYPE_NORMAL
- en: Stateful Is Hard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most applications have state. They also have particulars of startup, component
    interdependence, and configuration. They often have their own notion of what “cluster”
    means. They need to reliably store critical and sometimes voluminous data. Those
    are just three of the dimensions in which real-world applications must maintain
    state. It would be ideal to manage these applications with uniform mechanisms
    while automating their complex storage, networking, and cluster connection requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes cannot know all about every stateful, complex, clustered application
    while also remaining general, adaptable, and simple. It aims instead to provide
    a set of flexible abstractions, covering the basic application concepts of scheduling,
    replication, and failover automation, while providing a clean extension mechanism
    for more advanced or application-specific operations. Kubernetes, on its own,
    does not and should not know the configuration values for, say, a PostgreSQL database
    cluster, with its arranged memberships and stateful, persistent storage.
  prefs: []
  type: TYPE_NORMAL
- en: Operators Are Software SREs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Site Reliability Engineering (SRE) is a set of patterns and principles for running
    large systems. Originating at Google, SRE has had a pronounced influence on industry
    practice. Practitioners must interpret and apply SRE philosophy to particular
    circumstances, but a key tenet is automating systems administration by writing
    software to run your software. Teams freed from rote maintenance work have more
    time to create new features, fix bugs, and generally improve their products.
  prefs: []
  type: TYPE_NORMAL
- en: An Operator is like an automated Site Reliability Engineer for its application.
    It encodes in software the skills of an expert administrator. An Operator can
    manage a cluster of database servers, for example. It knows the details of configuring
    and managing its application, and it can install a database cluster of a declared
    software version and number of members. An Operator continues to monitor its application
    as it runs, and can back up data, recover from failures, and upgrade the application
    over time, automatically. Cluster users employ `kubectl` and other standard tools
    to work with Operators and the applications they manage, because Operators extend
    Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: How Operators Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operators work by extending the Kubernetes control plane and API. In its simplest
    form, an Operator adds an endpoint to the Kubernetes API, called a *custom resource*
    (CR), along with a control plane component that monitors and maintains resources
    of the new type. This Operator can then take action based on the resource’s state.
    This is illustrated in [Figure 1-2](#fig1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1-2: Operators are Custom Controllers watching a Custom Resource](assets/kuop_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. Operators are custom controllers watching a custom resource
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Kubernetes CRs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CRs are the API extension mechanism in Kubernetes. A *custom resource definition*
    (CRD) defines a CR; it’s analogous to a schema for the CR data. Unlike members
    of the official API, a given CRD doesn’t exist on every Kubernetes cluster. CRDs
    extend the API of the particular cluster where they are defined. CRs provide endpoints
    for reading and writing structured data. A cluster user can interact with CRs
    with `kubectl` or another Kubernetes client, just like any other API resource.
  prefs: []
  type: TYPE_NORMAL
- en: How Operators Are Made
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes compares a set of resources to reality; that is, the running state
    of the cluster. It takes actions to make reality match the desired state described
    by those resources. Operators extend that pattern to specific applications on
    specific clusters. An Operator is a custom Kubernetes controller watching a CR
    type and taking application-specific actions to make reality match the `spec`
    in that resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Making an Operator means creating a CRD and providing a program that runs in
    a loop watching CRs of that kind. What the Operator does in response to changes
    in the CR is specific to the application the Operator manages. The actions an
    Operator performs can include almost anything: scaling a complex app, application
    version upgrades, or even managing kernel modules for nodes in a computational
    cluster with specialized hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: The etcd Operator'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'etcd is a distributed key-value store. In other words, it’s a kind of lightweight
    database cluster. An etcd cluster usually requires a knowledgeable administrator
    to manage it. An etcd administrator must know how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Join a new node to an etcd cluster, including configuring its endpoints, making
    connections to persistent storage, and making existing members aware of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back up the etcd cluster data and configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the etcd cluster to new etcd versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The etcd Operator knows how to perform those tasks. An Operator knows about
    its application’s internal state, and takes regular action to align that state
    with the desired state expressed in the specification of one or more custom resources.
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous example, the shell excerpts that follow are illustrative,
    and you won’t be able to execute them without prior setup. You’ll do that setup
    and run an Operator in [Chapter 2](ch02.html#running_operators).
  prefs: []
  type: TYPE_NORMAL
- en: The Case of the Missing Member
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since the etcd Operator understands etcd’s state, it can recover from an etcd
    cluster member’s failure in the same way Kubernetes replaced the deleted stateless
    web server pod in our earlier example. Assume there is a three-member etcd cluster
    managed by the etcd Operator. The Operator itself and the etcd cluster members
    run as pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Deleting an etcd pod triggers a reconciliation, and the etcd Operator knows
    how to recover to the desired state of three replicas—something Kubernetes can’t
    do alone. But unlike with the blank-slate restart of a stateless web server, the
    Operator has to arrange the new etcd pod’s cluster membership, configuring it
    for the existing endpoints and establishing it with the remaining etcd members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#comarker1-i)'
  prefs: []
  type: TYPE_NORMAL
- en: The replacement pod is in the `PodInitializing` state.
  prefs: []
  type: TYPE_NORMAL
- en: The etcd API remains available to clients as the Operator repairs the etcd cluster.
    In [Chapter 2](ch02.html#running_operators), you’ll deploy the etcd Operator and
    put it through its paces while using the etcd API to read and write data. For
    now, it’s worth remembering that adding a member to a running etcd cluster isn’t
    as simple as just running a new etcd pod, and the etcd Operator hides that complexity
    and automatically heals the etcd cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Who Are Operators For?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Operator pattern arose in response to infrastructure engineers and developers
    wanting to extend Kubernetes to provide features specific to their sites and software.
    Operators make it easier for cluster administrators to enable, and developers
    to use, foundation software pieces like databases and storage systems with less
    management overhead. If the “killernewdb” database server that’s perfect for your
    application’s backend has an Operator to manage it, you can deploy killernewdb
    without needing to become an expert killernewdb DBA.
  prefs: []
  type: TYPE_NORMAL
- en: Application developers build Operators to manage the applications they are delivering,
    simplifying the deployment and management experience on their customers’ Kubernetes
    clusters. Infrastructure engineers create Operators to control deployed services
    and systems.
  prefs: []
  type: TYPE_NORMAL
- en: Operator Adoption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A wide variety of developers and companies have adopted the Operator pattern,
    and there are already many Operators available that make it easier to use key
    services as components of your applications. CrunchyData has developed an Operator
    that manages PostgreSQL database clusters. There are popular Operators for MongoDB
    and Redis. Rook manages Ceph storage on Kubernetes clusters, while other Operators
    provide on-cluster management of external storage services like Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Kubernetes-based distributions like Red Hat’s OpenShift use Operators
    to build features atop a Kubernetes core, keeping the OpenShift web console available
    and up to date, for example. On the user side, OpenShift has added mechanisms
    for point-and-click Operator installation and use in the web console, and for
    Operator developers to hook into the [OperatorHub.io](https://operatorhub.io),
    discussed in [Chapter 8](ch08.html#operator_lifecyle_manager) and [Chapter 10](ch10.html#getting_involved).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s Get Going!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operators need a Kubernetes cluster to run on. In the next chapter we’ll show
    you a few different ways to get access to a cluster, whether it’s a local virtual
    Kubernetes on your laptop, a complete installation on some number of nodes, or
    an external service. Once you have admin access to a Kubernetes cluster, you will
    deploy the etcd Operator and see how it manages an etcd cluster on your behalf.
  prefs: []
  type: TYPE_NORMAL
