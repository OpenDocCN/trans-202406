["```\nKey – kubernetes.io/cluster/<cluster-name>\nValue – shared\n```", "```\n(Number of network interfaces for the instance type ×\n(the number of IP addresses per network interface - 1)) + 2\n```", "```\nkubectl set env daemonset\n-n kube-system aws-node AWS_VPC_K8S_CNI_EXTERNALSNAT=true\n```", "```\nexport CLUSTER_NAME=eks-demo\neksctl create cluster -N 3 --name ${CLUSTER_NAME} --version=1.20\neksctl version 0.54.0\nusing region us-west-2\nsetting availability zones to [us-west-2b us-west-2a us-west-2c]\nsubnets for us-west-2b - public:192.168.0.0/19 private:192.168.96.0/19\nsubnets for us-west-2a - public:192.168.32.0/19 private:192.168.128.0/19\nsubnets for us-west-2c - public:192.168.64.0/19 private:192.168.160.0/19\nnodegroup \"ng-90b7a9a5\" will use \"ami-0a1abe779ecfc6a3e\" [AmazonLinux2/1.20]\nusing Kubernetes version 1.20\ncreating EKS cluster \"eks-demo\" in \"us-west-2\" region with un-managed nodes\nwill create 2 separate CloudFormation stacks for cluster itself and the initial\nnodegroup\nif you encounter any issues, check CloudFormation console or try\n'eksctl utils describe-stacks --region=us-west-2 --cluster=eks-demo'\nCloudWatch logging will not be enabled for cluster \"eks-demo\" in \"us-west-2\"\nyou can enable it with\n'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE\n(e.g. all)} --region=us-west-2 --cluster=eks-demo'\nKubernetes API endpoint access will use default of\n{publicAccess=true, privateAccess=false} for cluster \"eks-demo\" in \"us-west-2\"\n2 sequential tasks: { create cluster control plane \"eks-demo\",\n3 sequential sub-tasks: { wait for control plane to become ready, 1 task:\n{ create addons }, create nodegroup \"ng-90b7a9a5\" } }\nbuilding cluster stack \"eksctl-eks-demo-cluster\"\ndeploying stack \"eksctl-eks-demo-cluster\"\nwaiting for CloudFormation stack \"eksctl-eks-demo-cluster\"\n<truncate>\nbuilding nodegroup stack \"eksctl-eks-demo-nodegroup-ng-90b7a9a5\"\n--nodes-min=3 was set automatically for nodegroup ng-90b7a9a5\ndeploying stack \"eksctl-eks-demo-nodegroup-ng-90b7a9a5\"\nwaiting for CloudFormation stack \"eksctl-eks-demo-nodegroup-ng-90b7a9a5\"\n<truncated>\nwaiting for the control plane availability...\nsaved kubeconfig as \"/Users/strongjz/.kube/config\"\nno tasks\nall EKS cluster resources for \"eks-demo\" have been created\nadding identity\n\"arn:aws:iam::1234567890:role/\neksctl-eks-demo-nodegroup-ng-9-NodeInstanceRole-TLKVDDVTW2TZ\" to auth ConfigMap\nnodegroup \"ng-90b7a9a5\" has 0 node(s)\nwaiting for at least 3 node(s) to become ready in \"ng-90b7a9a5\"\nnodegroup \"ng-90b7a9a5\" has 3 node(s)\nnode \"ip-192-168-31-17.us-west-2.compute.internal\" is ready\nnode \"ip-192-168-58-247.us-west-2.compute.internal\" is ready\nnode \"ip-192-168-85-104.us-west-2.compute.internal\" is ready\nkubectl command should work with \"/Users/strongjz/.kube/config\",\ntry 'kubectl get nodes'\nEKS cluster \"eks-demo\" in \"us-west-2\" region is ready\n```", "```\nip-192-168-31-17.us-west-2.compute.internal\nip-192-168-58-247.us-west-2.compute.internal\nip-192-168-85-104.us-west-2.compute.internal\n```", "```\npublic:192.168.0.0/19 private:192.168.96.0/19\npublic:192.168.32.0/19 private:192.168.128.0/19\npublic:192.168.64.0/19 private:192.168.160.0/19\n```", "```\nkubectl apply -f dnsutils.yml,database.yml,web.yml\n```", "```\nkubectl get pods -o wide\nNAME                   READY   STATUS    IP               NODE\napp-6bf97c555d-5mzfb   1/1     Running   192.168.15.108   ip-192-168-0-94\napp-6bf97c555d-76fgm   1/1     Running   192.168.52.42    ip-192-168-63-151\napp-6bf97c555d-gw4k9   1/1     Running   192.168.88.61    ip-192-168-91-46\ndnsutils               1/1     Running   192.168.57.174   ip-192-168-63-151\npostgres-0             1/1     Running   192.168.70.170   ip-192-168-91-46\n```", "```\n\nkubectl get svc clusterip-service\nNAME                TYPE           CLUSTER-IP\nEXTERNAL-IP                                                              PORT(S)        AGE\nclusterip-service   LoadBalancer   10.100.159.28\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com   80:32671/TCP   29m\n\n```", "```\nkubectl get endpoints clusterip-service\nNAME                ENDPOINTS                                                   AGE\nclusterip-service   192.168.15.108:8080,192.168.52.42:8080,192.168.88.61:8080   58m\n\n```", "```\nkubectl exec dnsutils -- wget -qO- 10.100.159.28:80/data\nDatabase Connected\n\nkubectl exec dnsutils -- wget -qO- 10.100.159.28:80/host\nNODE: ip-192-168-63-151.us-west-2.compute.internal, POD IP:192.168.52.42\n\nkubectl exec dnsutils -- wget -qO- clusterip-service:80/host\nNODE: ip-192-168-91-46.us-west-2.compute.internal, POD IP:192.168.88.61\n\nkubectl exec dnsutils -- wget -qO- clusterip-service:80/data\nDatabase Connected\n\nkubectl exec dnsutils -- wget -qO- 192.168.15.108:8080/data\nDatabase Connected\n\nkubectl exec dnsutils -- wget -qO- 192.168.15.108:8080/host\nNODE: ip-192-168-0-94.us-west-2.compute.internal, POD IP:192.168.15.108\n```", "```\nkubectl exec dnsutils -- nc -z -vv -w 5 192.168.70.170 5432\n192.168.70.170 (192.168.70.170:5432) open\nsent 0, rcvd 0\n\nkubectl exec dnsutils -- nc -z -vv -w 5 postgres 5432\npostgres (10.100.106.134:5432) open\nsent 0, rcvd 0\n```", "```\n\nkubectl get svc clusterip-service\nNAME                TYPE           CLUSTER-IP\nEXTERNAL-IP                                                              PORT(S)        AGE\nclusterip-service   LoadBalancer   10.100.159.28\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com   80:32671/TCP   29m\n\n```", "```\nwget -qO-\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com/data\nDatabase Connected\n```", "```\nwget -qO-\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com/host\nNODE: ip-192-168-63-151.us-west-2.compute.internal, POD IP:192.168.52.42\n\nwget -qO-\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com/host\nNODE: ip-192-168-91-46.us-west-2.compute.internal, POD IP:192.168.88.61\n\nwget -qO-\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com/host\nNODE: ip-192-168-0-94.us-west-2.compute.internal, POD IP:192.168.15.108\n\nwget -qO-\na76d1c69125e543e5b67c899f5e45284-593302470.us-west-2.elb.amazonaws.com/host\nNODE: ip-192-168-0-94.us-west-2.compute.internal, POD IP:192.168.15.108\n```", "```\nkubectl get pods -o wide\nNAME                  READY  STATUS    IP              NODE\napp-6bf97c555d-5mzfb  1/1    Running   192.168.15.108  ip-192-168-0-94\napp-6bf97c555d-76fgm  1/1    Running   192.168.52.42   ip-192-168-63-151\napp-6bf97c555d-gw4k9  1/1    Running   192.168.88.61   ip-192-168-91-46\ndnsutils              1/1    Running   192.168.57.174  ip-192-168-63-151\npostgres-0            1/1    Running   192.168.70.170  ip-192-168-91-46\n```", "```\nkubectl exec dnsutils -- wget -qO-\nip-192-168-0-94.us-west-2.compute.internal:32671/host\nNODE: ip-192-168-0-94.us-west-2.compute.internal, POD IP:192.168.15.108\n```", "```\naws sts get-caller-identity\n{\n    \"UserId\": \"AIDA2RZMTHAQTEUI3Z537\",\n    \"Account\": \"1234567890\",\n    \"Arn\": \"arn:aws:iam::1234567890:user/eks\"\n}\n\nexport ACCOUNT_ID=1234567890\n```", "```\neksctl utils associate-iam-oidc-provider \\\n--region ${AWS_REGION} \\\n--cluster ${CLUSTER_NAME}  \\\n--approve\n```", "```\naws iam create-policy \\\n--policy-name AWSLoadBalancerControllerIAMPolicy \\\n--policy-document iam_policy.json\n```", "```\neksctl create iamserviceaccount \\\n> --cluster ${CLUSTER_NAME} \\\n> --namespace kube-system \\\n> --name aws-load-balancer-controller \\\n> --attach-policy-arn\narn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy \\\n> --override-existing-serviceaccounts \\\n> --approve\neksctl version 0.54.0\nusing region us-west-2\n1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included\n(based on the include/exclude rules)\nmetadata of serviceaccounts that exist in Kubernetes will be updated,\nas --override-existing-serviceaccounts was set\n1 task: { 2 sequential sub-tasks: { create IAM role for serviceaccount\n\"kube-system/aws-load-balancer-controller\", create serviceaccount\n\"kube-system/aws-load-balancer-controller\" } }\nbuilding iamserviceaccount stack\ndeploying stack\nwaiting for CloudFormation stack\nwaiting for CloudFormation stack\nwaiting for CloudFormation stack\ncreated serviceaccount \"kube-system/aws-load-balancer-controller\"\n```", "```\nkubectl get sa aws-load-balancer-controller -n kube-system -o yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\nannotations:\neks.amazonaws.com/role-arn:\narn:aws:iam::1234567890:role/eksctl-eks-demo-addon-iamserviceaccount-Role1\ncreationTimestamp: \"2021-06-27T18:40:06Z\"\nlabels:\napp.kubernetes.io/managed-by: eksctl\nname: aws-load-balancer-controller\nnamespace: kube-system\nresourceVersion: \"16133\"\nuid: 30281eb5-8edf-4840-bc94-f214c1102e4f\nsecrets:\n- name: aws-load-balancer-controller-token-dtq48\n```", "```\nkubectl apply -f crd.yml\ncustomresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws\nconfigured\ncustomresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws\nconfigured\n```", "```\nexport ALB_LB_VERSION=\"v2.2.0\"\n```", "```\nhelm repo add eks https://aws.github.io/eks-charts\n\nexport VPC_ID=$(aws eks describe-cluster \\\n--name ${CLUSTER_NAME} \\\n--query \"cluster.resourcesVpcConfig.vpcId\" \\\n--output text)\n\nhelm upgrade -i aws-load-balancer-controller \\\neks/aws-load-balancer-controller \\\n-n kube-system \\\n--set clusterName=${CLUSTER_NAME} \\\n--set serviceAccount.create=false \\\n--set serviceAccount.name=aws-load-balancer-controller \\\n--set image.tag=\"${ALB_LB_VERSION}\" \\\n--set region=${AWS_REGION} \\\n--set vpcId=${VPC_ID}\n\nRelease \"aws-load-balancer-controller\" has been upgraded. Happy Helming!\nNAME: aws-load-balancer-controller\nLAST DEPLOYED: Sun Jun 27 14:43:06 2021\nNAMESPACE: kube-system\nSTATUS: deployed\nREVISION: 2\nTEST SUITE: None\nNOTES:\nAWS Load Balancer controller installed!\n```", "```\nkubectl logs -n kube-system -f deploy/aws-load-balancer-controller\n```", "```\nkubectl apply -f alb-rules.yml\ningress.networking.k8s.io/app configured\n```", "```\nkubectl describe ing app\nName:             app\nNamespace:        default\nAddress:\nk8s-default-app-d5e5a26be4-2128411681.us-west-2.elb.amazonaws.com\nDefault backend:  default-http-backend:80\n(<error: endpoints \"default-http-backend\" not found>)\nRules:\nHost        Path  Backends\n  ----        ----  --------\n*\n          /data   clusterip-service:80 (192.168.3.221:8080,\n192.168.44.165:8080,\n192.168.89.224:8080)\n          /host   clusterip-service:80 (192.168.3.221:8080,\n192.168.44.165:8080,\n192.168.89.224:8080)\nAnnotations:  alb.ingress.kubernetes.io/scheme: internet-facing\nkubernetes.io/ingress.class: alb\nEvents:\nType     Reason                  Age                     From\nMessage\n----     ------                  ----                    ----\n-------\nNormal   SuccessfullyReconciled  4m33s (x2 over 5m58s)   ingress\nSuccessfully reconciled\n```", "```\nwget -qO- k8s-default-app-d5e5a26be4-2128411681.us-west-2.elb.amazonaws.com/data\nDatabase Connected\n\nwget -qO- k8s-default-app-d5e5a26be4-2128411681.us-west-2.elb.amazonaws.com/host\nNODE: ip-192-168-63-151.us-west-2.compute.internal, POD IP:192.168.44.165\n```", "```\nkubectl delete -f dnsutils.yml,database.yml,web.yml\n```", "```\nkubectl delete -f alb-rules.yml\n```", "```\naws iam  delete-policy\n--policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy\n```", "```\naws ec2 describe-volumes --filters\nName=tag:kubernetes.io/created-for/pv/name,Values=*\n--query \"Volumes[].{ID:VolumeId}\"\n```", "```\naws elbv2 describe-load-balancers --query \"LoadBalancers[].LoadBalancerArn\"\n```", "```\naws elb describe-load-balancers --query \"LoadBalancerDescriptions[].DNSName\"\n```", "```\neksctl delete cluster --name ${CLUSTER_NAME}\n```", "```\nN = 2(32 -S) - 4\n```", "```\nS = 32 - ⌈log2(N + 4)⌉\n```", "```\n{- Finished ..\n  \"aadProfile\": null,\n  \"addonProfiles\": {\n    \"azurepolicy\": {\n      \"config\": null,\n      \"enabled\": false,\n      \"identity\": null\n    },\n    \"httpApplicationRouting\": {\n      \"config\": null,\n      \"enabled\": false,\n      \"identity\": null\n    },\n    \"omsAgent\": {\n      \"config\": {\n        \"logAnalyticsWorkspaceResourceID\":\n        \"/subscriptions/7a0e265a-c0e4-4081-8d76-aafbca9db45e/\n resourcegroups/defaultresourcegroup-wus2/providers/\n microsoft.operationalinsights/\n workspaces/defaultworkspace-7a0e265a-c0e4-4081-8d76-aafbca9db45e-wus2\"\n      },\n      \"enabled\": true,\n      \"identity\": null\n    }\n  },\n  \"agentPoolProfiles\": [\n    {\n      \"availabilityZones\": null,\n      \"count\": 3,\n      \"enableAutoScaling\": false,\n      \"enableNodePublicIp\": null,\n      \"maxCount\": null,\n      \"maxPods\": 110,\n      \"minCount\": null,\n      \"mode\": \"System\",\n      \"name\": \"agentpool\",\n      \"nodeImageVersion\": \"AKSUbuntu-1804gen2containerd-2021.06.02\",\n      \"nodeLabels\": {},\n      \"nodeTaints\": null,\n      \"orchestratorVersion\": \"1.19.11\",\n      \"osDiskSizeGb\": 128,\n      \"osDiskType\": \"Managed\",\n      \"osType\": \"Linux\",\n      \"powerState\": {\n        \"code\": \"Running\"\n      },\n      \"provisioningState\": \"Succeeded\",\n      \"proximityPlacementGroupId\": null,\n      \"scaleSetEvictionPolicy\": null,\n      \"scaleSetPriority\": null,\n      \"spotMaxPrice\": null,\n      \"tags\": null,\n      \"type\": \"VirtualMachineScaleSets\",\n      \"upgradeSettings\": null,\n      \"vmSize\": \"Standard_DS2_v2\",\n      \"vnetSubnetId\": null\n    }\n  ],\n  \"apiServerAccessProfile\": {\n    \"authorizedIpRanges\": null,\n    \"enablePrivateCluster\": false\n  },\n  \"autoScalerProfile\": null,\n  \"diskEncryptionSetId\": null,\n  \"dnsPrefix\": \"go-web-dns\",\n  \"enablePodSecurityPolicy\": null,\n  \"enableRbac\": true,\n  \"fqdn\": \"go-web-dns-a59354e4.hcp.westus.azmk8s.io\",\n  \"id\":\n  \"/subscriptions/7a0e265a-c0e4-4081-8d76-aafbca9db45e/\n resourcegroups/go-web/providers/Microsoft.ContainerService/managedClusters/go-web\",\n  \"identity\": null,\n  \"identityProfile\": null,\n  \"kubernetesVersion\": \"1.19.11\",\n  \"linuxProfile\": null,\n  \"location\": \"westus\",\n  \"maxAgentPools\": 100,\n  \"name\": \"go-web\",\n  \"networkProfile\": {\n    \"dnsServiceIp\": \"10.0.0.10\",\n    \"dockerBridgeCidr\": \"172.17.0.1/16\",\n    \"loadBalancerProfile\": {\n      \"allocatedOutboundPorts\": null,\n      \"effectiveOutboundIps\": [\n        {\n          \"id\":\n          \"/subscriptions/7a0e265a-c0e4-4081-8d76-aafbca9db45e/\n resourceGroups/MC_go-web_go-web_westus/providers/Microsoft.Network/\n publicIPAddresses/eb67f61d-7370-4a38-a237-a95e9393b294\",\n          \"resourceGroup\": \"MC_go-web_go-web_westus\"\n        }\n      ],\n      \"idleTimeoutInMinutes\": null,\n      \"managedOutboundIps\": {\n        \"count\": 1\n      },\n      \"outboundIpPrefixes\": null,\n      \"outboundIps\": null\n    },\n    \"loadBalancerSku\": \"Standard\",\n    \"networkMode\": null,\n    \"networkPlugin\": \"kubenet\",\n    \"networkPolicy\": null,\n    \"outboundType\": \"loadBalancer\",\n    \"podCidr\": \"10.244.0.0/16\",\n    \"serviceCidr\": \"10.0.0.0/16\"\n  },\n  \"nodeResourceGroup\": \"MC_go-web_go-web_westus\",\n  \"powerState\": {\n    \"code\": \"Running\"\n  },\n  \"privateFqdn\": null,\n  \"provisioningState\": \"Succeeded\",\n  \"resourceGroup\": \"go-web\",\n  \"servicePrincipalProfile\": {\n    \"clientId\": \"bbd3ac10-5c0c-4084-a1b8-39dd1097ec1c\",\n    \"secret\": null\n  },\n  \"sku\": {\n    \"name\": \"Basic\",\n    \"tier\": \"Free\"\n  },\n  \"tags\": {\n    \"createdby\": \"tjb\"\n  },\n  \"type\": \"Microsoft.ContainerService/ManagedClusters\",\n  \"windowsProfile\": null\n}\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    test: liveness\n  name: go-web\nspec:\n  containers:\n  - name: go-web\n    image: go-web:v0.0.1\n    ports:\n    - containerPort: 8080\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n      initialDelaySeconds: 5\n      periodSeconds: 5\n    readinessProbe:\n      httpGet:\n        path: /\n        port: 8080\n      initialDelaySeconds: 5\n      periodSeconds: 5\n```", "```\n○ → kubectl get pods\nNAME                      READY   STATUS    RESTARTS   AGE\ngo-web-574dd4c94d-2z5lp   1/1     Running   0          5h29m\n```", "```\n○ → kubectl get service go-web\nNAME     TYPE           CLUSTER-IP   EXTERNAL-IP    PORT(S)          AGE\ngo-web   LoadBalancer   10.0.3.75    13.88.96.117   8080:31728/TCP   21h\n```", "```\n○ → curl 13.88.96.117:8080 -vvv\n*   Trying 13.88.96.117...\n* TCP_NODELAY set\n* Connected to 13.88.96.117 (13.88.96.117) port 8080 (#0)\n> GET / HTTP/1.1\n> Host: 13.88.96.117:8080\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Date: Fri, 25 Jun 2021 20:12:48 GMT\n< Content-Length: 5\n< Content-Type: text/plain; charset=utf-8\n<\n* Connection #0 to host 13.88.96.117 left intact\nHello* Closing connection 0\n```"]