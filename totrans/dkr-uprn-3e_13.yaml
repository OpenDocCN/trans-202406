- en: Chapter 12\. The Expanding Landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The landscape of tools that are available to interact with Linux containers
    is constantly evolving, especially with the significant adoption that Kubernetes
    has experienced for many years.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to take a very quick tour of a few tools that
    are inspired by Docker but are often focused on improving specific use cases.
    This is not intended to be a comprehensive list but instead is intended to simply
    give you a taste of some of the categories and options that are available to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Client Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to introduce three command-line tools: `nerdctl`,
    `podman`, and `buildah`. All of these tools might be useful to anyone familiar
    with Docker and its common workflows.'
  prefs: []
  type: TYPE_NORMAL
- en: nerdctl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although [`crictl`](https://oreil.ly/zElq_)^([1](ch12.html#idm46803124121664))
    is installed by default in many `containerd`-based environments, `nerdctl` is
    an easy-to-use Docker-compatible CLI for `containerd`, which is worth checking
    out. This means that `nerdctl` can provide a very easy migration path for people
    and scripts that use Docker but need to support `containerd` systems that are
    not running the Docker daemon.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a quick example, if you spin up a small Kubernetes cluster with `kind`,
    which we discussed in [“Kind”](ch10.html#k8s_kind), you should end up with a `containerd`-based
    Kubernetes cluster that is not directly compatible with the `docker` CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should now be inside the `kind`/Kubernetes container.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the `curl` command that follows, you must ensure that you are downloading
    the correct version for your architecture. You will need to replace `${ARCH}`
    with either `amd64` or `arm64`, depending on your system. Also, feel free to try
    and [download the most recent version](https://github.com/containerd/nerdctl/releases)
    of `nerdctl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have edited the following `curl` command and reassembled it into a
    single line, you should be able to download and extract the `nerdctl` client and
    then try a few commands with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In most cases, `docker` commands can be used with almost no alteration by `nerdctl`.
    The one change that might stand out is the need to often provide a namespace value.
    This is because `containerd` provides [a fully namespaced API](https://github.com/containerd/containerd/blob/main/docs/namespaces.md),
    and we need to specify which one we are interested in interacting with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have exited the `kind` container, you can go ahead and delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: podman and buildah
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`podman`](https://podman.io) and [`buildah`](https://buildah.io) are a set
    of tools from Red Hat that were created early on to provide a container workflow
    that did not rely on a daemon process, like Docker. It is heavily used within
    the Red Hat community and rethinks the way that images are built and containers
    are run and managed.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can find a good introduction to [`podman` and `buildah` for Docker users
    on the Red Hat blog](https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: An overview of installing and using `kind` can be found in [“Kind”](ch10.html#k8s_kind).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now be inside the `kind`/Kubernetes container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Unlike `docker` (which interfaces with the Docker daemon) and `nerdctl` (which
    interfaces with `containerd`), `podman` skips the container engine and instead
    directly interfaces with an underlying container runtime, like `runc`.
  prefs: []
  type: TYPE_NORMAL
- en: Although `podman build` can be used to build containers as well, `buildah` provides
    an advanced interface for image building that makes it possible to script the
    whole image-building process and remove the need to rely on the *Dockerfile* format
    (or *Containerfile*, as `podman` calls it).
  prefs: []
  type: TYPE_NORMAL
- en: We won’t dig into the details of `buildah` here, but you can try a very simple
    example in the `kind` container, and if you are interested in alternatives to
    the traditional `Dockerfile` approach, or the newer alternatives provided by BuildKit’s
    [LBB interface](https://github.com/moby/buildkit#exploring-llb), you can read
    more about `buildah` online via [GitHub](https://github.com/containers/buildah)
    and the [Red Hat blog](https://www.redhat.com/sysadmin/building-buildah).
  prefs: []
  type: TYPE_NORMAL
- en: 'To try out a `buildah` script in the `kind` container, go ahead and run the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have exited the `kind` container, you can go ahead and delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: All-in-One Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Docker Desktop is a very useful tool, changes in Docker’s licensing
    and the broader technology landscape have led some people and organizations to
    look for alternative tools. In this section, we will take a quick look at Rancher
    Desktop and Podman Desktop and how they can be used to provide some of the functionality
    of Docker Desktop while also bringing some interesting features of their own.
  prefs: []
  type: TYPE_NORMAL
- en: Rancher Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Rancher Desktop](https://rancherdesktop.io) is designed to provide a very
    similar experience to Docker Desktop while focusing specifically on Kubernetes
    integration. It uses [k3s](https://k3s.io) to provide a certified, lightweight
    Kubernetes backend and can use either `containerd` or `dockerd` (`moby`) as the
    container runtime.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You should probably quit Docker (and/or Podman) Desktop, if either one is running,
    before trying out Rancher Desktop, since they all spin up a VM that will consume
    system resources.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading, installing, and launching Rancher Desktop, you will have
    a local Kubernetes cluster, which, by default, is using `containerd` and can be
    interacted with via `nerdctl`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The exact location where Rancher Desktop installs the `nerdctl` binary might
    vary a bit depending on which operating system you are using. You should initially
    try and make sure that you are using the version that was packaged with the Rancher
    Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Don’t forget to quit Rancher Desktop when you are done; otherwise the VM will
    stay running and consume additional resources.
  prefs: []
  type: TYPE_NORMAL
- en: Podman Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Podman Desktop](https://podman-desktop.io) is focused on providing a daemon-less
    container tool that still provides the seamless experience that developers on
    all of the major operating systems have grown accustomed to.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You should probably quit Docker (and/or Rancher) Desktop, if either one is running,
    before trying out Podman Desktop, since they all spin up a VM that will consume
    system resources.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading, installing, and launching Podman Desktop, you will see an
    application window on the Home tab. If Podman Desktop does not detect the `podman`
    CLI on your system, it will prompt you to install it via a button labeled Install.
    This should walk you through the installation of the `podman` client. When the
    Podman Desktop VM, which can be controlled from the command line via the `podman
    machine` command, is not started, click the Run Podman switch, and then wait a
    few moments. The switch should disappear, and you should see the “Podman is running”
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The exact location where Podman Desktop installs the `podman` binary might vary
    a bit depending on which operating system you are using. You should initially
    make sure that you are using the version that was installed via Podman Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the system, give this a try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When you are done exploring Podman Desktop, you can go ahead and shut down the
    VM by clicking the Preferences tab, selecting Resources → Podman → Podman Machine,
    and then clicking the Stop button.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can go ahead and quit the Podman Desktop application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can also start and stop the Podman VM by using the `podman machine start`
    and `podman machine stop` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap-Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker’s place in technology history is well established. There is no doubt
    that the introduction of Docker took the existing Linux container technology,
    extended it with the image format, and then made the concepts and technology accessible
    to engineers all around the world.
  prefs: []
  type: TYPE_NORMAL
- en: We can argue about whether things are better today than they were before Linux
    containers and Docker, and we can debate about which tools and workflows are better,
    but in the end, much of that comes down to how each tool is used and how those
    workflows are designed.
  prefs: []
  type: TYPE_NORMAL
- en: No tools will magically solve all your problems, and any tool can be implemented
    so poorly that it makes everything much worse than it was before. This is why
    it is so important to spend significant time thinking about the process workflow
    that you want to implement from at least three angles. First, what inputs and
    outputs do we need the workflow to support? Second, how easy will the workflow
    be for the people who need to use it every day or just once a year? And third,
    how easy will it be to run and maintain for the people who must ensure that the
    system runs smoothly and securely at all times?
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a good picture of what you are trying to achieve, then you can
    start to pick the tools that will help you enable these goals.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](ch12.html#idm46803124121664-marker)) Full URL: [*https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md*](https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md)'
  prefs: []
  type: TYPE_NORMAL
