- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL database management system is popular for many reasons. It’s fast,
    and it’s easy to set up, use, and administer. It runs under many varieties of
    Unix and Windows, and MySQL-based programs can be written in many languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL’s popularity raises the need to address questions its users have about
    how to solve specific problems. That is the purpose of *MySQL Cookbook*: to serve
    as a handy resource to which you can turn for quick solutions or techniques for
    attacking particular types of questions that come up when you use MySQL. Naturally,
    because it’s a cookbook, it contains recipes: straightforward instructions you
    can follow rather than develop your own code from scratch. It’s written using
    a problem-and-solution format designed to be extremely practical and to make the
    contents easy to read and assimilate. It contains many short sections, each describing
    how to write a query, apply a technique, or develop a script to solve a problem
    of limited and specific scope. This book doesn’t develop full-fledged, complex
    applications. Instead, it assists you in developing such applications yourself
    by helping you get past problems that have you stumped.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a common question is, <q>How can I deal with quotes and special
    characters in data values when I’m writing queries?</q> That’s not difficult,
    but figuring out how to do it is frustrating when you’re not sure where to start.
    This book demonstrates what to do; it shows you where to begin and how to proceed
    from there. This knowledge will serve you repeatedly because after you see what’s
    involved, you’ll be able to apply the technique to any kind of data, such as text,
    images, sound or video clips, news articles, compressed files, or PDF documents.
    Another common question is, <q>Can I access data from multiple tables at the same
    time?</q> The answer is <q>Yes,</q> and it’s easy to do because it’s just a matter
    of knowing the proper SQL syntax. But it’s not always clear how until you see
    examples, which this book gives you. Other techniques that you’ll learn from this
    book include how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use SQL to select, sort, and summarize rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find matches or mismatches between tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine intervals between dates or times, including age calculations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify or remove duplicate rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `LOAD` `DATA` to read your datafiles properly or find which values in the
    file are invalid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `CHECK` constraints to prevent entry of bad data into your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate sequence numbers to use as unique row identifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a view as a <q>virtual table</q>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write stored procedures and functions, set up triggers that activate to perform
    specific data-handling operations when you insert or update table rows, and use
    the Event Scheduler to run queries on a schedule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup replication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control server logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One part of using MySQL is understanding how to communicate with the server—that
    is, how to use SQL, the language in which queries are formulated. Therefore, one
    major emphasis of this book is using SQL to formulate queries that answer particular
    kinds of questions. One helpful tool for learning and using SQL is the *mysql*
    client program that is included in MySQL distributions. You can use client interactively
    to send SQL statements to the server and see the results. This is extremely useful
    because it provides a direct interface to SQL; so useful, in fact, that the first
    chapter is devoted to *mysql*.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the ability to issue SQL queries alone is not enough. Information extracted
    from a database often requires further processing or presentation in a particular
    way. What if you have queries with complex interrelationships, such as when you
    need to use the results of one query as the basis for others? What if you need
    to generate a specialized report with very specific formatting requirements? These
    problems bring us to the other major emphasis of the book—how to write programs
    that interact with the MySQL server through an application programming interface
    (API). When you know how to use MySQL from within the context of a programming
    language, you gain other ways to exploit MySQL’s capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: You can save query results and reuse them later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have full access to the expressive power of a general-purpose programming
    language. This enables you to make decisions based on success or failure of a
    query, or on the content of the rows that are returned, and then tailor the actions
    taken accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can format and display query results however you like. If you’re writing
    a command-line script, you can generate plain text. If it’s a web-based script,
    you can generate an HTML table. If it’s an application that extracts information
    for transfer to some other system, you might generate a datafile expressed in
    XML or JSON.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining SQL with a general-purpose programming language gives you an extremely
    flexible framework for issuing queries and processing their results. Programming
    languages increase your capability to perform complex database operations. But
    that doesn’t mean this book is complex. It keeps things simple, showing how to
    construct small building blocks using techniques that are easy to understand and
    easily mastered.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll leave it to you to combine these techniques in your own programs, which
    you can do to produce arbitrarily complex applications. After all, the genetic
    code is based on only four nucleic acids, but these basic elements have been combined
    to produce the astonishing array of biological life we see all around us. Similarly,
    there are only 12 notes in the scale, but in the hands of skilled composers, they
    are interwoven to produce a rich and endless variety of music. In the same way,
    when you take a set of simple recipes, add your imagination, and apply them to
    the database programming problems you want to solve, you can produce applications
    that perhaps are not works of art, but are certainly useful and will help you
    and others be more productive.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will be useful for anybody who uses MySQL, ranging from individuals
    who want to use a database for personal projects such as a blog or wiki, to professional
    database and web developers. The book is also intended for people who do not know
    how to use MySQL, but would like to.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to MySQL, you’ll find lots of ways to use it here that may be
    new to you. If you’re more experienced, you’re probably already familiar with
    many of the problems addressed here, but may not have had to solve them before
    and should find the book a great time saver. Take advantage of the recipes given
    in the book and use them in your own programs rather than writing the code from
    scratch.
  prefs: []
  type: TYPE_NORMAL
- en: The material ranges from introductory to advanced, so if a recipe describes
    techniques that seem obvious to you, skip it. Conversely, if you don’t understand
    a recipe, set it aside and come back to it later, perhaps after reading some of
    the other recipes.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s very likely when you use this book that you’re trying to develop an application
    but are not sure how to implement certain pieces of it. In this case, you already
    know what type of problem you want to solve; check the table of contents or the
    index for a recipe that shows how to do what you want. Ideally, the recipe will
    be just what you had in mind. Alternatively, you may be able to adapt a recipe
    for a similar problem to suit the issue at hand. We explain the principles involved
    in developing each technique so that you can modify it to fit the particular requirements
    of your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to approach this book is to just read through it with no specific
    problem in mind. This can give you a broader understanding of the things MySQL
    can do, so we recommend that you page through the book occasionally. It’s a more
    effective tool if you know the kinds of problems it addresses.
  prefs: []
  type: TYPE_NORMAL
- en: As you get into later chapters, you’ll find recipes that assume a knowledge
    of topics covered in earlier chapters. This also applies within a chapter, where
    later sections often use techniques discussed earlier in the chapter. If you jump
    into a chapter and find a recipe that uses a technique with which you’re not familiar,
    check the table of contents or the index to find where the technique is explained
    earlier. For example, if a recipe sorts a query result using an `ORDER` `BY` clause
    that you don’t understand, turn to [Chapter 9](ch09.xhtml#nch-sort), which discusses
    various sorting methods and explains how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a summary of each chapter to give you an overview of the book’s contents.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1, “Using the mysql Client Program”](ch01.xhtml#nch-mysql), describes
    how to use the standard MySQL command-line client. *mysql* is often the first
    or primary interface to MySQL that people use, and it’s important to know how
    to exploit its capabilities. This program enables you to issue queries and see
    their results interactively, so it’s good for quick experimentation. You can also
    use it in batch mode to execute canned SQL scripts or send its output into other
    programs. In addition, the chapter discusses other ways to use *mysql*, such as
    how to make long lines more readable or generate output in various formats.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2, “Using MySQL Shell”](ch02.xhtml#nch-mysqlshell), introduces new
    MySQL command-line client, developed by the MySQL Team for versions 5.7 and newer.
    *mysqlsh* is compatible with *mysql* when is running is SQL mode but also supports
    NoSQL in JavaScript and Python programming interfaces. With MySQL Shell you can
    run SQL, NoSQL queries, and automate many administrative tasks easily.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3, “MySQL Replication”](ch03.xhtml#nch-replication), describes how
    to setup and use replication. Some of content in this chapter is advanced. However,
    we decided to place it in the beginning of the book, because the replication is
    necessary for stable MySQL installations that can survive such disasters as corruptions
    or hardware failures. Practically, any production MySQL installation should use
    one of the replication setups. While setting up a replication is an administrative
    task, we believe that all MySQL users need to have knowledge of how the replication
    works and, as a result, write effective queries that would be performant on both
    source and replica servers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4, “Writing MySQL-Based Programs”](ch04.xhtml#nch-api), demonstrates
    the essential elements of MySQL programming: how to connect to the server, issue
    queries, retrieve the results, and handle errors. It also discusses how to handle
    special characters and `NULL` values in queries, how to write library files to
    encapsulate code for commonly used operations, and various ways to gather the
    parameters needed for making connections to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5, “Selecting Data from Tables”](ch05.xhtml#nch-select), covers several
    aspects of the `SELECT` statement, which is the primary vehicle for retrieving
    data from the MySQL server: specifying which columns and rows you want to retrieve,
    dealing with `NULL` values, and selecting one section of a query result. Later
    chapters cover some of these topics in more detail, but this chapter provides
    an overview of the concepts on which they depend if you need some introductory
    background on row selection or don’t yet know a lot about SQL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6, “Table Management”](ch06.xhtml#nch-tblmgmt), covers table cloning,
    copying results into other tables, using temporary tables, and checking or changing
    a table’s storage engine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7, “Working with Strings”](ch07.xhtml#nch-strings), describes how
    to deal with string data. It covers character sets and collations, string comparisons,
    dealing with case-sensitivity issues, pattern matching, breaking apart and combining
    strings, and performing `FULLTEXT` searches.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8, “Working with Dates and Times”](ch08.xhtml#nch-dates), shows how
    to work with temporal data. It describes MySQL’s date format and how to display
    date values in other formats. It also covers how to use MySQL’s special `TIMESTAMP`
    data type, how to set the time zone, how to convert between different temporal
    units, how to perform date arithmetic to compute intervals or generate one date
    from another, and how to perform leap-year calculations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9, “Sorting Query Results”](ch09.xhtml#nch-sort), describes how to
    put the rows of a query result in the order you want. This includes specifying
    the sort direction, dealing with `NULL` values, accounting for string case sensitivity,
    and sorting by dates or partial column values. It also provides examples that
    show how to sort special kinds of values, such as domain names, IP numbers, and
    `ENUM` values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10, “Generating Summaries”](ch10.xhtml#nch-sum), shows techniques
    for assessing the general characteristics of a set of data, such as how many values
    it contains or its minimum, maximum, and average values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11, “Using Stored Routines, Triggers, and Scheduled Events”](ch11.xhtml#nch-routines),
    describes how to write stored functions and procedures that are stored on the
    server side, triggers that activate when tables are modified, and events that
    execute on a scheduled basis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12, “Working with Metadata”](ch12.xhtml#nch-meta), discusses how to
    get information *about* the data that a query returns, such as the number of rows
    or columns in the result, or the name and data type of each column. It also shows
    how to ask MySQL what databases and tables are available or determine the structure
    of a table.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13, “Importing and Exporting Data”](ch13.xhtml#nch-xfer), describes
    how to transfer information between MySQL and other programs. This includes how
    to use `LOAD` `DATA`, convert files from one format to another, and determine
    table structure appropriate for a dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14, “Validating and Reformatting Data”](ch14.xhtml#nch-format), describes
    how to extract or rearrange columns in data files, check and validate data, and
    rewrite values such as dates that often come in a variety of formats.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15, “Generating and Using Sequences”](ch15.xhtml#nch-sequences), discusses
    `AUTO_INCREMENT` columns, MySQL’s mechanism for producing sequence numbers. It
    shows how to generate new sequence values or determine the most recent value,
    how to resequence a column, and how to use sequences to generate counters. It
    also shows how to use `AUTO_INCREMENT` values to maintain a master-detail relationship
    between tables, including pitfalls to avoid.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16, “Using Joins and Subqueries”](ch16.xhtml#nch-multi), shows how
    to perform operations that select rows from multiple tables. It demonstrates how
    to compare tables to find matches or mismatches, produce master-detail lists and
    summaries, and enumerate many-to-many relationships.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17, “Statistical Techniques”](ch17.xhtml#nch-stats), illustrates how
    to produce descriptive statistics, frequency distributions, regressions, and correlations.
    It also covers how to randomize a set of rows or pick rows at random from the
    set.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18, “Handling Duplicates”](ch18.xhtml#nch-dups), discusses how to
    identify, count, and remove duplicate rows—and how to prevent them from occurring
    in the first place.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19, “Working with JSON”](ch19.xhtml#nch-json), illustrates how to
    use JSON in MySQL. It covers such topics as validation, searching, and manipulation
    of JSON data. The chapter also discusses how to use MySQL as a Document Store.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 20, “Performing Transactions”](ch20.xhtml#nch-xact), shows how to
    handle multiple SQL statements that must execute together as a unit. It discusses
    how to control MySQL’s auto-commit mode and how to commit or roll back transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 22, “Server Administration”](ch22.xhtml#nch-admin), is written for
    database administrators. It covers server configuration, the plug-in interface,
    and log management.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 23, “Monitoring the MySQL Server”](ch23.xhtml#nch-monitoring), illustrates
    how to monitor and troubleshoot MySQL issues, such as startup or connection failures.
    It shows how to use MySQL log files, built-in instruments, and standard operating
    system utilities to get information about performance of MySQL queries and internal
    structures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 24, “Security”](ch24.xhtml#nch-security), is another administrative
    chapter. It discusses user account management, including creating accounts, setting
    passwords, and assigning privileges. It also describes how to implement password
    policy, find and fix insecure accounts, and expire or unexpire passwords.'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL APIs Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL programming interfaces exist for many languages, including C, C++, Eiffel,
    Go, Java, Perl, PHP, Python, Ruby, and Tcl. Given this fact, writing a MySQL cookbook
    presents authors with a challenge. The book should provide recipes for doing many
    interesting and useful things with MySQL, but which API or APIs should the book
    use? Showing an implementation of every recipe in every language results either
    in covering very few recipes or in a very, very large book! It also results in
    redundancies when implementations in different languages bear a strong resemblance
    to each other. On the other hand, it’s worthwhile taking advantage of multiple
    languages, because one often is more suitable than another for solving a particular
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve this dilemma, we’ve chosen a small number of APIs to write the recipes
    in this book. This makes its scope manageable while permitting latitude to choose
    from multiple APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: The Perl DBI module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby, using the the Mysql2 gem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP, using the PDO extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python, using the MySQL Connector/Python driver for the DB API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go, using the Go-MySQL-Driver for the `sql` interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java, using the MySQL Connector/J driver for the JDBC interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why these languages? Perl is a widely used language that was very popular for
    writing MySQL programs in time when the first edition of this book was published
    and still used in many applications in time of the fourth edition. Ruby has an
    easy-to-use database-access module. PHP is widely deployed, especially on the
    Web. Go is getting very popular lately and replaces other languages, especially
    Perl, in many MySQL applications. Python and Java each has a significant number
    of followers.
  prefs: []
  type: TYPE_NORMAL
- en: We believe these languages taken together reflect pretty well the majority of
    the existing user base of MySQL programmers. If you prefer some language not shown
    here, be sure to pay careful attention to [Chapter 4](ch04.xhtml#nch-api), to
    familiarize yourself with the book’s primary APIs. Knowing how to perform database
    operations with the programming interfaces used here will help you translate recipes
    for other languages.
  prefs: []
  type: TYPE_NORMAL
- en: Version and Platform Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Development of the code in this book took place under MySQL 5.7, and 8.0\. Because
    new features are added to MySQL on a regular basis, some examples will not work
    under older versions. For example, MySQL 5.7 introduces group replication, and
    MySQL 8.0 introduces `CHECK` constraints and common table expressions.
  prefs: []
  type: TYPE_NORMAL
- en: We do not assume that you are using Unix, although that is our own preferred
    development platform. (In this book, <q>Unix</q> also refers to Unix-like systems
    such as Linux and macOS X.) Most of the material here is applicable both to Unix
    and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book uses the following font conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant` `width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant`** **`width`** **`bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Used to indicate text that you type when running commands.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant`* *`width`* *`italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Used to indicate variable input; you should substitute a value of your own choosing.
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Used for URLs, hostnames, names of directories and files, Unix commands and
    options, programs, and occasionally for emphasis.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commands often are shown with a prompt to illustrate the context in which they
    are used. Commands issued from the command line are shown with a `$` prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That prompt is one that Unix users are used to seeing, but it doesn’t necessarily
    signify that a command works only under Unix. Unless indicated otherwise, commands
    shown with a `$` prompt generally should work under Windows, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you should run a command under Unix as the `root` user, the prompt is `#`
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Commands that are specific to Windows use the `C:\>` prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'SQL statements that are issued from within the *mysql* client program are shown
    with a `mysql>` prompt and terminated with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For examples that show a query result as you would see it when using *mysql*,
    I sometimes truncate the output, using an ellipsis (`...`) to indicate that the
    result consists of more rows than are shown. The following query produces many
    rows of output, from which those in the middle have been omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples that show only the syntax for SQL statements do not include the `mysql>`
    prompt, but they do include semicolons as necessary to make it clearer where statements
    end. For example, this is a single statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'But this example represents two statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The semicolon is a notational convenience used within *mysql* as a statement
    terminator. But it is not part of SQL itself, so when you issue SQL statements
    from within programs that you write (for example, using Perl or Java), don’t include
    terminating semicolons.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a statement or a command output is too long and does not fit the book page,
    we use symbol `↩` to show that the line was indented to fit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The MySQL Cookbook Companion GitHub Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*MySQL Cookbook* has a [companion GitHub repository](https://github.com/svetasmirnova/mysqlcookbook)
    where you can obtain source code and sample data for examples developed throughout
    this book, and auxiliary documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Recipe Source Code and Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The examples in this book are based on source code and sample data from a distribution
    named `recipes` available at the companion GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The `recipes` distribution is the primary source of examples, and references
    to it occur throughout the book. The distribution is also available as a compressed
    TAR file (*recipes.tar.gz*) or as a ZIP file (*recipes.zip*). Either distribution
    format when unpacked creates a directory named *mysqlcookbook-*`VERSION`*/recipes*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `recipes` distribution to save yourself a lot of typing. For example,
    when you see a `CREATE` `TABLE` statement in the book that describes what a database
    table looks like, you’ll usually find an SQL batch file in the *tables* directory
    that you can use to create the table instead of entering the definition manually.
    Change location into the *tables* directory and execute the following command,
    where *`filename`* is the name of the file containing the `CREATE` `TABLE` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you need to specify MySQL username or password options, add them to the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import all the tables from the `recipes` distribution, use command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `recipes` distribution contains programs as shown in the book, but in many
    cases also includes implementations in additional languages. For example, a script
    shown in the book using Python may be available in the `recipes` distribution
    in Perl, Ruby, PHP, Go, or Java as well. This may save you translation effort
    should you wish to convert a program shown in the book to a different language.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Review Data (2018)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon related review data used in [Chapter 7, “Working with Strings”](ch07.xhtml#nch-strings)
    can be found at [*http://deepyeti.ucsd.edu/jianmo/amazon/index.html*](http://deepyeti.ucsd.edu/jianmo/amazon/index.html)
    and can be downloaded using this [form.](https://forms.gle/A8hBfPxKkKGFCP238)
    Justifying recommendations using distantly-labeled reviews and fined-grained aspects
    Jianmo Ni, Jiacheng Li, Julian McAuley Empirical Methods in Natural Language Processing
    (EMNLP), 2019.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Cookbook Companion Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some appendixes included in previous *MySQL Cookbook* editions are now available
    in standalone form at the companion GitHub repository. They provide background
    information for topics covered in the book.
  prefs: []
  type: TYPE_NORMAL
- en: <q>Executing Programs from the Command Line</q> provides instructions for executing
    commands at the command prompt and setting environment variables such as `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining MySQL and Related Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run the examples in this book, you need access to MySQL, as well as the appropriate
    MySQL-specific interfaces for the programming languages that you want to use.
    The following notes describe what software is required and where to get it.
  prefs: []
  type: TYPE_NORMAL
- en: If you access a MySQL server run by somebody else, you need only the MySQL client
    software on your own machine. To run your own server, you need a full MySQL distribution.
  prefs: []
  type: TYPE_NORMAL
- en: To write your own MySQL-based programs, you communicate with the server through
    a language-specific API. The Perl and Ruby interfaces rely on the MySQL C API
    client library to handle the low-level client-server protocol. This is also true
    for the PHP interface, unless PHP is configured to use `mysqlnd`, the native protocol
    driver. For Perl and Ruby, you must install the C client library and header files
    first. PHP includes the required MySQL client support files, but must be compiled
    with MySQL support enabled or you won’t be able to use it. The Python, Go, and
    Java drivers for MySQL implement the client-server protocol directly, so they
    do not require the MySQL C client library.
  prefs: []
  type: TYPE_NORMAL
- en: You may not need to install the client software yourself—it might already be
    present on your system. This is a common situation if you have an account with
    an Internet service provider (ISP) that provides services such as a web server
    already enabled for access to MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL distributions and documentation, including the *MySQL Reference Manual*
    and *MySQL Shell*, are available from [*http://dev.mysql.com/downloads*](http://dev.mysql.com/downloads)
    and [*http://dev.mysql.com/doc*](http://dev.mysql.com/doc).
  prefs: []
  type: TYPE_NORMAL
- en: If you need to install the MySQL C client library and header files, they’re
    included when you install MySQL from a source distribution, or when you install
    MySQL using a binary (precompiled) distribution other than an RPM or a DEB binary
    distribution. Under Linux, you have the option of installing MySQL using RPM or
    DEB files, but the client library and header files are not installed unless you
    install the development RPM or DEB. (There are separate RPM or DEB files for the
    server, the standard client programs, and the development libraries and header
    files.)
  prefs: []
  type: TYPE_NORMAL
- en: Perl Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General Perl information is available on the [Perl Programming Language website](http://www.perl.org).
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain Perl software from the [Comprehensive Perl Archive Network (CPAN)](http://cpan.perl.org).
  prefs: []
  type: TYPE_NORMAL
- en: To write MySQL-based Perl programs, you need the DBI module and the MySQL-specific
    DBD module, DBD::mysql.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install these modules under Unix, let Perl itself help you. For example,
    to install DBI and DBD::mysql, run the following commands (you’ll probably need
    to do this as `root`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If the last command complains about failed tests, use `force` `install` `DBD::mysql`
    instead. Under ActiveState Perl for Windows, use the *ppm* utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the CPAN shell or *ppm* to install other Perl modules mentioned
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the DBI and DBD::mysql modules are installed, documentation is available
    from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Documentation is also available from the [Perl website](http://dbi.perl.org).
  prefs: []
  type: TYPE_NORMAL
- en: Ruby Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary [Ruby website](http://www.ruby-lang.org) provides access to Ruby
    distributions and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The Ruby MySQL2 gem is available from [RubyGems](http://www.rubygems.org).
  prefs: []
  type: TYPE_NORMAL
- en: PHP Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary [PHP website](http://www.php.net) provides access to PHP distributions
    and documentation, including PDO documentation.
  prefs: []
  type: TYPE_NORMAL
- en: PHP source distributions include PDO support, so you need not obtain it separately.
    However, you must enable PDO support for MySQL when you configure the distribution.
    If you use a binary distribution, be sure that it includes PDO MySQL support.
  prefs: []
  type: TYPE_NORMAL
- en: Python Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary [Python website](http://www.python.org) provides access to Python
    distributions and documentation. General documentation for the DB API database
    access interface is on the [Python Wiki](http://bit.ly/py-wiki).
  prefs: []
  type: TYPE_NORMAL
- en: For MySQL Connector/Python, the driver module that provides MySQL connectivity
    for the DB API, distributions and documentation are available from [*http://bit.ly/py-connect*](http://bit.ly/py-connect)
    and [*http://bit.ly/py-dev-guide*](http://bit.ly/py-dev-guide).
  prefs: []
  type: TYPE_NORMAL
- en: Go Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary [Go website](https://go.dev/) provides access to Go distributions
    and documentation, including sql package and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The Go-MySQL-Driver and its documentation, is available from [GitHub go-sql-driver/mysql
    repository](https://github.com/go-sql-driver/mysql).
  prefs: []
  type: TYPE_NORMAL
- en: Java Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a Java compiler to build and run Java programs. The *javac* compiler
    is a part of the Java Development Kit (JDK). If no JDK is installed on your system,
    versions are available for macOS, Linux, and Windows at [Oracle’s Java site](http://www.oracle.com/technetwork/java).
    The same site provides access to documentation (including the specifications)
    for JDBC, servlets, JavaServer Pages (JSP), and the JSP Standard Tag Library (JSTL).
  prefs: []
  type: TYPE_NORMAL
- en: For MySQL Connector/J, the driver that provides MySQL connectivity for the JDBC
    interface, distributions and documentation are available from [*http://bit.ly/jconn-dl*](http://bit.ly/jconn-dl)
    and [*http://bit.ly/j-dev-guide*](http://bit.ly/j-dev-guide).
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*MySQL Cookbook, Fourth
    Edition* by Sveta Smirnova, Alkin Tezuysal (O’Reilly). Copyright 2022 Sveta Smirnova,
    Alkin Tezuysal, 978-1-492-09309-1.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [O’Reilly Media](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://www.oreilly.com/library/view/mysql-cookbook-4th/9781492093152/*](/).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about our books, courses, conferences, and news, see our
    website at [*https://www.oreilly.com*](https://www.oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*https://www.youtube.com/oreillymedia*](https://www.youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To each reader, thank you for reading our book. We hope that it serves you well
    and that you find it useful.
  prefs: []
  type: TYPE_NORMAL
- en: From Paul DuBois, for the Third Edition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks to my technical reviewers, Johannes Schlüter, Geert Vanderkelen, and
    Ulf Wendel. They made several corrections and suggestions that improved the text
    in many ways, and I appreciate their help.
  prefs: []
  type: TYPE_NORMAL
- en: Andy Oram prodded me to begin the third edition and served as its editor, Nicole
    Shelby guided the book through production, and Kim Cofer and Lucie Haskins provided
    proofreading and indexing.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to my wife Karen, whose encouragement and support throughout the writing
    process means more than I can say.
  prefs: []
  type: TYPE_NORMAL
- en: From Sveta Smirnova and Alkin Tezuysal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many thanks to our technical reviewers for their invaluable contributions for
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Gillian Gunson not only provided comprehensive technical feedback. She also
    showed how our text could be read by people with different backgrounds. Her language
    suggestions helped us to make recipes easier to read. Her attentiveness to details
    helped us to identify inaccuracy and even potential risk areas that may show up
    when your database load grows. Gillian also reviewed all code examples and suggested
    how to make Ruby and Java code more aligned to current standards.
  prefs: []
  type: TYPE_NORMAL
- en: Ege Gunes reviewed all Go language examples, so they are aligned with Go standard
    style.
  prefs: []
  type: TYPE_NORMAL
- en: Karthik Appigatla, Timur Solodovnikov, Daniel Guzman Burgos, Vladmir Fedorkov
    reviewed selected chapters of the book. Their suggested corrections helped us
    to improve the book a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Andy Kwan invited us to write fourth edition of this book. Amelia Blevins and
    Jeff Bleiel were our editors and helped to make the book easier to read. Rita
    Fernando reviewed few chapters and provided feedback that allowed us to make the
    book easier to read and be more aligned with O’Reilly standards.
  prefs: []
  type: TYPE_NORMAL
- en: From Sveta Smirnova
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to thank my colleagues in Percona Support who understood that I need
    to work second shift on the book and allowed me to take time off when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Many thanks to my husband Serguei Lassounov who always support me in my all
    professional endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: From Alkin Tezuysal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to thank my wife Aslihan and both daughters Ilayda and Lara, for their
    patience and support when I needed to focus and use their family time for this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Many thanks to my colleagues and team at PlanetScale, especially Deepthi Sigireddi,
    for her extra care and support. Special thanks go to the MySQL community, friends,
    and family members as well.
  prefs: []
  type: TYPE_NORMAL
- en: I also want to take a moment to thank Sveta Smirnova for her endless support
    for coaching me throughout my first authoring book journey.
  prefs: []
  type: TYPE_NORMAL
