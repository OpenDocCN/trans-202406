- en: Chapter 17\. Adapter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章\. 适配器
- en: The *Adapter* pattern takes a heterogeneous containerized system and makes it
    conform to a consistent, unified interface with a standardized and normalized
    format that can be consumed by the outside world. The *Adapter* pattern inherits
    all its characteristics from the *Sidecar* pattern but has the single purpose
    of providing adapted access to the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*适配器*模式将异构的容器化系统转换为符合统一接口的一致格式，可被外部世界消费的标准化和规范化格式。*适配器*模式继承了*边车*模式的所有特征，但其单一目的是提供对应用程序的适配访问。'
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Containers allow us to package and run applications written in different libraries
    and languages in a unified way. Today, it is common to see multiple teams using
    different technologies and creating distributed systems composed of heterogeneous
    components. This heterogeneity can cause difficulties when all components have
    to be treated in a unified way by other systems. The *Adapter* pattern offers
    a solution by hiding the complexity of a system and providing unified access to
    it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 容器允许我们以统一的方式打包和运行使用不同库和语言编写的应用程序。如今，多个团队使用不同技术创建由异构组件组成的分布式系统已经很普遍。这种异构性在其他系统需要以统一方式处理所有组件时可能会导致困难。*适配器*模式通过隐藏系统复杂性并提供统一访问来解决这一问题。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: The best way to illustrate the *Adapter* pattern is through an example. A major
    prerequisite for successfully running and supporting distributed systems is providing
    detailed monitoring and alerting. Moreover, if we have a distributed system composed
    of multiple services we want to monitor, we may use an external monitoring tool
    to poll metrics from every service and record them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方式来说明*适配器*模式是通过一个例子。成功运行和支持分布式系统的一个重要前提是提供详细的监控和警报。此外，如果我们有一个由多个服务组成的分布式系统需要监控，我们可以使用外部监控工具从每个服务中轮询指标并记录它们。
- en: However, services written in different languages may not have the same capabilities
    and may not expose metrics in the same format expected by the monitoring tool.
    This diversity creates a challenge for monitoring such a heterogeneous application
    from a single monitoring solution that expects a unified view of the whole system.
    With the *Adapter* pattern, it is possible to provide a unified monitoring interface
    by exporting metrics from various application containers into one standard format
    and protocol. In [Figure 17-1](#img-adapter), an adapter container translates
    locally stored metrics information into the external format the monitoring server
    understands.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用不同语言编写的服务可能没有相同的能力，并且可能不以监控工具期望的相同格式暴露指标。这种多样性为监控来自一个期望整个系统统一视图的单一监控解决方案的异构应用程序创建了挑战。通过*适配器*模式，可以通过将各种应用程序容器的指标导出为一个标准格式和协议，提供统一的监控接口。在[图17-1](#img-adapter)中，适配器容器将本地存储的指标信息转换为监控服务器理解的外部格式。
- en: '![Adapter pattern](assets/kup2_1701.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![适配器模式](assets/kup2_1701.png)'
- en: Figure 17-1\. Adapter pattern
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-1\. 适配器模式
- en: With this approach, every service represented by a Pod, in addition to the main
    application container, would have another container that knows how to read the
    custom application-specific metrics and expose them in a generic format understandable
    by the monitoring tool. We could have one adapter container that knows how to
    export Java-based metrics over HTTP and another adapter container in a different
    Pod that exposes Python-based metrics over HTTP. For the monitoring tool, all
    metrics would be available over HTTP and in a common, normalized format.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，每个由Pod代表的服务，除了主应用程序容器外，还会有另一个容器，负责读取定制的应用程序特定指标，并以监控工具可理解的通用格式公开这些指标。我们可以有一个适配器容器，它知道如何通过HTTP导出基于Java的指标，以及另一个位于不同Pod中的适配器容器，它通过HTTP公开基于Python的指标。对于监控工具，所有指标都将通过HTTP以及统一的、规范化的格式可用。
- en: For a concrete implementation of this pattern, let’s add the adapter shown in
    [Figure 17-1](#img-adapter) to our sample random generator application. When appropriately
    configured, it writes out a log file with the random-number generator and includes
    the time it took to create the random number. We want to monitor this time with
    Prometheus. Unfortunately, the log format doesn’t match the format Prometheus
    expects. Also, we need to offer this information over an HTTP endpoint so that
    a Prometheus server can scrape the value.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种模式的具体实现，让我们将示例随机生成器应用程序中显示的适配器添加到[图17-1](#img-adapter)。在正确配置的情况下，它会写出一个包含随机数生成器及其创建时间的日志文件。我们希望用Prometheus监视这个时间。不幸的是，日志格式与Prometheus期望的格式不匹配。此外，我们需要通过HTTP端点提供此信息，以便Prometheus服务器可以抓取该值。
- en: 'For this use case, an adapter is a perfect fit: a sidecar container starts
    a small HTTP server and on every request, reads the custom log file and transforms
    it into a Prometheus-understandable format. [Example 17-1](#ex-adapter) shows
    a Deployment with such an adapter. This configuration allows a decoupled Prometheus
    monitoring setup without the main application needing to know anything about Prometheus.
    The full example in the book’s GitHub repository demonstrates this setup together
    with a Prometheus installation.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种用例，适配器非常合适：一个旁路容器启动一个小型HTTP服务器，并在每个请求时读取自定义日志文件，并将其转换为Prometheus可理解的格式。[示例17-1](#ex-adapter)展示了带有这种适配器的部署。这种配置允许解耦的Prometheus监视设置，而无需主应用程序了解Prometheus的任何信息。书中GitHub仓库中的完整示例演示了这一设置以及Prometheus安装。
- en: Example 17-1\. Adapter delivering Prometheus-conformant output
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-1\. 提供符合Prometheus的输出的适配器
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_adapter_CO1-1)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_adapter_CO1-1)'
- en: Main application container with the random generator service exposed on 8080.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主应用程序容器，随机生成服务暴露在8080端口。
- en: '[![2](assets/2.png)](#co_adapter_CO1-2)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_adapter_CO1-2)'
- en: Path to the log file containing the timing information about random-number generation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 包含有关随机数生成的时间信息的日志文件路径。
- en: '[![3](assets/3.png)](#co_adapter_CO1-3)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_adapter_CO1-3)'
- en: Directory shared with the Prometheus Adapter container.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与Prometheus适配器容器共享的目录。
- en: '[![4](assets/4.png)](#co_adapter_CO1-4)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_adapter_CO1-4)'
- en: Prometheus exporter image, exporting on port 9889.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus导出程序镜像，导出端口9889。
- en: '[![5](assets/5.png)](#co_adapter_CO1-5)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_adapter_CO1-5)'
- en: Path to the same log file to which the main application is logging.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与主应用程序记录日志的同一日志文件路径。
- en: '[![6](assets/6.png)](#co_adapter_CO1-6)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_adapter_CO1-6)'
- en: Shared volume is also mounted in the adapter container.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器容器中也装载了共享卷。
- en: '[![7](assets/7.png)](#co_adapter_CO1-7)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_adapter_CO1-7)'
- en: Files are shared via an `emptyDir` volume from the node’s filesystem.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文件通过节点文件系统的`emptyDir`卷共享。
- en: Another use of this pattern is logging. Different containers may log information
    in different formats and levels of detail. An adapter can normalize that information,
    clean it up, enrich it with contextual information by using the *Self Awareness*
    pattern described in [Chapter 14](ch14.html#SelfAwareness), and then make it available
    for pickup by the centralized log aggregator.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个这种模式的用途是日志记录。不同的容器可能以不同的格式和详细级别记录信息。使用描述在[第14章](ch14.html#SelfAwareness)中的*自我感知*模式，适配器可以规范化这些信息，清理它们，通过上下文信息丰富它们，然后使其可供集中日志聚合器获取。
- en: Discussion
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: The *Adapter* is a specialization of the *Sidecar* pattern explained in [Chapter 16](ch16.html#Sidecar).
    It acts as a reverse proxy to a heterogeneous system by hiding its complexity
    behind a unified interface. Using a distinct name different from the generic *Sidecar*
    pattern allows us to more precisely communicate the purpose of this pattern.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*适配器*是在[第16章](ch16.html#Sidecar)中解释的*旁路*模式的一个特例。它充当反向代理，隐藏了复杂性，通过统一接口向异构系统提供服务。使用不同于通用*旁路*模式的独特名称，使我们能更精确地传达这种模式的目的。'
- en: 'In the next chapter, you’ll get to know another sidecar variation: the *Ambassador*
    pattern, which acts as a proxy to the outside world.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解另一个旁路变体：*大使*模式，作为与外部世界的代理。
- en: More Information
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Adapter Example](https://oreil.ly/ABSfi)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[适配器示例](https://oreil.ly/ABSfi)'
