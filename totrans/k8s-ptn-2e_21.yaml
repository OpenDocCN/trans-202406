- en: Chapter 17\. Adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adapter* pattern takes a heterogeneous containerized system and makes it
    conform to a consistent, unified interface with a standardized and normalized
    format that can be consumed by the outside world. The *Adapter* pattern inherits
    all its characteristics from the *Sidecar* pattern but has the single purpose
    of providing adapted access to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containers allow us to package and run applications written in different libraries
    and languages in a unified way. Today, it is common to see multiple teams using
    different technologies and creating distributed systems composed of heterogeneous
    components. This heterogeneity can cause difficulties when all components have
    to be treated in a unified way by other systems. The *Adapter* pattern offers
    a solution by hiding the complexity of a system and providing unified access to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to illustrate the *Adapter* pattern is through an example. A major
    prerequisite for successfully running and supporting distributed systems is providing
    detailed monitoring and alerting. Moreover, if we have a distributed system composed
    of multiple services we want to monitor, we may use an external monitoring tool
    to poll metrics from every service and record them.
  prefs: []
  type: TYPE_NORMAL
- en: However, services written in different languages may not have the same capabilities
    and may not expose metrics in the same format expected by the monitoring tool.
    This diversity creates a challenge for monitoring such a heterogeneous application
    from a single monitoring solution that expects a unified view of the whole system.
    With the *Adapter* pattern, it is possible to provide a unified monitoring interface
    by exporting metrics from various application containers into one standard format
    and protocol. In [Figure 17-1](#img-adapter), an adapter container translates
    locally stored metrics information into the external format the monitoring server
    understands.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adapter pattern](assets/kup2_1701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-1\. Adapter pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With this approach, every service represented by a Pod, in addition to the main
    application container, would have another container that knows how to read the
    custom application-specific metrics and expose them in a generic format understandable
    by the monitoring tool. We could have one adapter container that knows how to
    export Java-based metrics over HTTP and another adapter container in a different
    Pod that exposes Python-based metrics over HTTP. For the monitoring tool, all
    metrics would be available over HTTP and in a common, normalized format.
  prefs: []
  type: TYPE_NORMAL
- en: For a concrete implementation of this pattern, let’s add the adapter shown in
    [Figure 17-1](#img-adapter) to our sample random generator application. When appropriately
    configured, it writes out a log file with the random-number generator and includes
    the time it took to create the random number. We want to monitor this time with
    Prometheus. Unfortunately, the log format doesn’t match the format Prometheus
    expects. Also, we need to offer this information over an HTTP endpoint so that
    a Prometheus server can scrape the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this use case, an adapter is a perfect fit: a sidecar container starts
    a small HTTP server and on every request, reads the custom log file and transforms
    it into a Prometheus-understandable format. [Example 17-1](#ex-adapter) shows
    a Deployment with such an adapter. This configuration allows a decoupled Prometheus
    monitoring setup without the main application needing to know anything about Prometheus.
    The full example in the book’s GitHub repository demonstrates this setup together
    with a Prometheus installation.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-1\. Adapter delivering Prometheus-conformant output
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_adapter_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Main application container with the random generator service exposed on 8080.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_adapter_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Path to the log file containing the timing information about random-number generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_adapter_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Directory shared with the Prometheus Adapter container.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_adapter_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus exporter image, exporting on port 9889.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_adapter_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Path to the same log file to which the main application is logging.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_adapter_CO1-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Shared volume is also mounted in the adapter container.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_adapter_CO1-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Files are shared via an `emptyDir` volume from the node’s filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Another use of this pattern is logging. Different containers may log information
    in different formats and levels of detail. An adapter can normalize that information,
    clean it up, enrich it with contextual information by using the *Self Awareness*
    pattern described in [Chapter 14](ch14.html#SelfAwareness), and then make it available
    for pickup by the centralized log aggregator.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adapter* is a specialization of the *Sidecar* pattern explained in [Chapter 16](ch16.html#Sidecar).
    It acts as a reverse proxy to a heterogeneous system by hiding its complexity
    behind a unified interface. Using a distinct name different from the generic *Sidecar*
    pattern allows us to more precisely communicate the purpose of this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, you’ll get to know another sidecar variation: the *Ambassador*
    pattern, which acts as a proxy to the outside world.'
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Adapter Example](https://oreil.ly/ABSfi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
