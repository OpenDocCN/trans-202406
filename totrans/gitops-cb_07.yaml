- en: Chapter 6\. Cloud Native CI/CD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章 云原生 CI/CD
- en: In the previous chapter you learned about Helm, a popular templating system
    for Kubernetes. All the recipes from previous chapters represent a common tooling
    for creating and managing containers for Kubernetes, and now it’s time to think
    about the automation on Kubernetes using such tools. Let’s move our focus to the
    cloud native continuous integration/continuous deployment (CI/CD).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，您了解了 Helm，这是 Kubernetes 的流行模板化系统。前几章的所有示例都代表了用于创建和管理 Kubernetes 容器的常见工具集，现在是时候考虑使用这些工具在
    Kubernetes 上进行自动化了。让我们把焦点转向云原生持续集成/持续部署（CI/CD）。
- en: Continuous integration is an automated process that takes new code created by
    a developer and builds, tests, and runs that code. The cloud native CI refers
    to the model where cloud computing and cloud services are involved in this process.
    The benefits from this model are many, such as portable and reproducible workloads
    across clouds for highly scalable and on-demand use cases. And it also represents
    the building blocks for GitOps workflows as it enables automation through actions
    performed via Git.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是一个自动化流程，它获取开发人员创建的新代码并构建、测试和运行该代码。云原生 CI 指的是云计算和云服务参与此过程的模型。这种模型的好处很多，例如在高度可伸缩和按需使用案例中跨云平台上可移植和可重现的工作负载。它还代表了
    GitOps 工作流的构建块，因为它通过 Git 执行的操作实现了自动化。
- en: '[Tekton](https://tekton.dev) is a popular open source implementation of a cloud
    native CI/CD system on top of Kubernetes. In fact, Tekton installs and runs as
    an extension on a Kubernetes cluster and comprises a set of Kubernetes Custom
    Resources that define the building blocks you can create and reuse for your pipelines.^([1](ch06.xhtml#idm45120836250416))
    (See [Recipe 6.1](#recipe_6_1).)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[Tekton](https://tekton.dev) 是一个流行的开源实现，在 Kubernetes 之上构建了一个云原生 CI/CD 系统。实际上，Tekton
    作为 Kubernetes 集群的扩展安装和运行，并包括一组 Kubernetes 自定义资源，定义了可以为您的流水线创建和重复使用的构建块。^([1](ch06.xhtml#idm45120836250416))
    (参见 [Recipe 6.1](#recipe_6_1).)'
- en: The Tekton engine lives inside a Kubernetes cluster and through its API objects
    represents a declarative way to define the actions to perform. The core components
    such as *Tasks* and *Pipelines* can be used to create a pipeline to generate artifacts
    and/or containers from a Git repository (see Recipes [6.2](#recipe_6_2), [6.3](#recipe_6_3),
    and [6.4](#recipe_6_4)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton 引擎位于 Kubernetes 集群内部，并通过其 API 对象表示一种声明性方式来定义执行操作的方式。核心组件如 *Tasks* 和 *Pipelines*
    可用于创建从 Git 存储库生成工件和/或容器的流水线（参见 Recipes [6.2](#recipe_6_2)，[6.3](#recipe_6_3)，和
    [6.4](#recipe_6_4))。
- en: Tekton also supports a mechanism for automating the start of a Pipeline with
    *Triggers*. These allow you to detect and extract information from events from
    a variety of sources, such as a webhook, and to start Tasks or Pipelines accordingly
    (see [Recipe 6.8](#recipe_6_8)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton 还支持一种用于通过 *Triggers* 自动启动流水线的机制。这些允许您从多种来源（如 webhook）检测和提取事件信息，并相应地启动
    Tasks 或 Pipelines（参见 [Recipe 6.8](#recipe_6_8)）。
- en: Working with private Git repositories is a common use case that Tekton supports
    nicely (see [Recipe 6.4](#recipe_6_4)), and building artifacts and creating containers
    can be done in many ways such as with Buildah (see [Recipe 6.5](#recipe_6_5))
    or Shipwright, which we discussed in [Chapter 3](ch03.xhtml#ch_Containers). It
    is also possible to integrate Kustomize (see [Recipe 6.9](#rec_Kustomize)) and
    Helm (see [Recipe 6.10](#rec_Helm)) in order to make the CI part dynamic and take
    benefit of the rich ecosystem of Kubernetes tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与私有 Git 存储库一起工作是 Tekton 支持的常见用例（参见 [Recipe 6.4](#recipe_6_4)），可以通过多种方式构建工件和创建容器，例如使用
    Buildah（参见 [Recipe 6.5](#recipe_6_5)）或我们在 [第 3 章](ch03.xhtml#ch_Containers) 中讨论的
    Shipwright。还可以集成 Kustomize（参见 [Recipe 6.9](#rec_Kustomize)）和 Helm（参见 [Recipe 6.10](#rec_Helm)），以使
    CI 部分动态化并充分利用 Kubernetes 工具的丰富生态系统。
- en: Tekton is Kubernetes-native solution, thus it’s universal; however, it’s not
    the only cloud native CI/CD citizen in the market. Other good examples for GitOps-ready
    workloads are Drone ([Recipe 6.11](#rec_Drone)) and GitHub Actions ([Recipe 6.12](#rec_GitHub_Actions)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton 是 Kubernetes 本地解决方案，因此它是通用的；然而，它并非市场上唯一的云原生 CI/CD 解决方案。其他适用于 GitOps 工作负载的良好示例包括
    Drone ([Recipe 6.11](#rec_Drone)) 和 GitHub Actions ([Recipe 6.12](#rec_GitHub_Actions))。
- en: 6.1 Install Tekton
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 安装 Tekton
- en: Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to install Tekton in order to have cloud native CI/CD on your Kubernetes
    cluster.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望安装 Tekton 以便在 Kubernetes 集群上实现云原生 CI/CD。
- en: Solution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[Tekton](https://tekton.dev) is a Kubernetes-native CI/CD solution that can
    be installed on top of any Kubernetes cluster. The installation brings you a set
    of [Kubernetes Custom Resources (CRDs)](https://oreil.ly/mv0cl) that you can use
    to compose your Pipelines, as shown in [Figure 6-1](#fig6-1):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Tekton](https://tekton.dev)是一种原生于Kubernetes的CI/CD解决方案，可安装在任何Kubernetes集群上。安装会为你带来一组[Kubernetes自定义资源（CRDs）](https://oreil.ly/mv0cl)，你可以使用它们来组合你的流水线，如[图6-1](#fig6-1)所示：'
- en: Task
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任务
- en: A reusable, loosely coupled number of steps that perform a specific function
    (e.g., building a container image). Tasks get executed as Kubernetes pods, while
    steps in a Task map onto containers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可重用的、松耦合的步骤集，执行特定功能（例如构建容器镜像）。任务作为Kubernetes pod执行，而任务中的步骤映射到容器中。
- en: Pipeline
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线
- en: A list Tasks needed to build and/or deploy your apps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个构建和/或部署应用程序所需的任务列表。
- en: TaskRun
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 任务运行
- en: The execution and result of running an instance of a Task.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行任务实例的执行和结果。
- en: PipelineRun
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线运行
- en: The execution and result of running an instance of a Pipeline, which includes
    a number of TaskRuns.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行流水线实例的执行和结果，其中包括若干个任务运行。
- en: Trigger
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器
- en: Detects an event and connects to other CRDs to specify what happens when such
    an event occurs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 检测事件并连接到其他CRD以指定当事件发生时发生的情况。
- en: '![Tekton Pipelines](assets/gocb_0601.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Tekton流水线](assets/gocb_0601.png)'
- en: Figure 6-1\. Tekton Pipelines
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-1. Tekton流水线
- en: To install Tekton, you just need `kubectl` CLI and a Kubernetes cluster such
    as Minikube (see [Chapter 2](ch02.xhtml#ch_Requirements)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Tekton，你只需`kubectl` CLI和一个像Minikube这样的Kubernetes集群（参见[第2章](ch02.xhtml#ch_Requirements)）。
- en: 'Tekton has a modular structure. You can install all components separately or
    all at once (e.g., with an Operator):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton具有模块化结构。你可以单独安装所有组件或一次性安装所有组件（例如使用操作员）：
- en: Tekton Pipelines
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton流水线
- en: Contains Tasks and Pipelines
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 包含任务和流水线
- en: Tekton Triggers
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton触发器
- en: Contains Triggers and EventListeners
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 包含触发器和事件监听器
- en: Tekton Dashboard
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton仪表板
- en: A convenient dashboard to visualize Pipelines and logs
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个便捷的仪表板，用于可视化流水线和日志
- en: Tekton CLI
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton命令行界面
- en: A CLI to manage Tekton objects (start/stop Pipelines and Tasks, check logs)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个CLI工具，用于管理Tekton对象（启动/停止流水线和任务，检查日志）
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can also use a Kubernetes Operator to install and manage Tekton components
    on your cluster. See more details on how from [OperatorHub](https://oreil.ly/6UoU3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用Kubernetes Operator在集群上安装和管理Tekton组件。详细信息请参阅[OperatorHub](https://oreil.ly/6UoU3)。
- en: 'First you need to install the [Tekton Pipelines](https://oreil.ly/o0L2V) component.
    At the time of writing this book, we are using version 0.37.0:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装[Tekton流水线](https://oreil.ly/o0L2V)组件。在撰写本书时，我们使用的是版本0.37.0：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The installation will create a new Kubernetes namespace called `tekton-pipelines`
    and you should see output similar to the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装将创建一个名为`tekton-pipelines`的新的Kubernetes命名空间，你应该看到类似以下的输出：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can monitor and verify the installation with the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令监视和验证安装：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see output like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到如下输出：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding command goes in watch mode, thus it remains appended. Press Ctrl+C
    in order to stop it when you see the controller and webhook pods in Running status.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令进入监视模式，因此它会一直附加。当你看到控制器和webhook pod处于运行状态时，请按Ctrl+C停止它。
- en: 'Then you can install [Tekton Triggers](https://oreil.ly/Vq32h). At the time
    of writing this book, we are using version 0.20.1:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以安装[Tekton触发器](https://oreil.ly/Vq32h)。在撰写本书时，我们使用的是版本0.20.1：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can monitor and verify the installation with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令监视和验证安装：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see three new pods created and running—`tekton-triggers-controller`,
    `tekton-triggers-core-interceptors`, and `tekton-triggers-webhook`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到三个新创建并运行的pod——`tekton-triggers-controller`、`tekton-triggers-core-interceptors`和`tekton-triggers-webhook`：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After this you have a fully working Tekton installation on top of your Kubernetes
    cluster, supporting Pipelines and automation via event Triggers. In addition to
    that, you could install the [Tekton Dashboard](https://oreil.ly/Db56q) in order
    to visualize Tasks, Pipelines, and logs via a nice UI. At the time of writing
    this book, we are using version 0.28.0:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你在Kubernetes集群上拥有一个完全可工作的Tekton安装，支持通过事件触发器进行流水线和自动化。此外，你还可以安装[Tekton仪表板](https://oreil.ly/Db56q)，以便通过漂亮的UI可视化任务、流水线和日志。在撰写本书时，我们使用的是版本0.28.0：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should have output similar to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的输出：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can monitor and verify the installation with the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令监视和验证安装：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see a new pod created and running—`tekton-dashboard`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个新的 pod 被创建并运行—`tekton-dashboard`：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By default, the Dashboard is not exposed outside the Kubernetes cluster. You
    can access it by using the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，仪表板不会在 Kubernetes 集群外部暴露。您可以使用以下命令访问它：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: There are several ways to expose internal services in Kubernetes; you could
    also create an [Ingress](https://oreil.ly/wwWcX) for that as shown in the Tekton
    Dashboard [documentation](https://oreil.ly/BeOlq).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中暴露内部服务有几种方法；您还可以创建一个[Ingress](https://oreil.ly/wwWcX)，如 Tekton
    仪表板[文档](https://oreil.ly/BeOlq)中所示。
- en: You can now browse to *http://localhost:9097* to access your Dashboard, as shown
    in [Figure 6-2](#fig6-2).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以浏览*http://localhost:9097*以访问您的仪表板，如[Figure 6-2](#fig6-2)所示。
- en: You can download and install the [Tekton CLI](https://oreil.ly/U7FSt) for your
    OS to start creating Tasks and Pipelines from the command line. At the time of
    writing this book, we are using version 0.25.0.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载并安装[Tekton CLI](https://oreil.ly/U7FSt)适用于您的操作系统，以便从命令行开始创建任务和流水线。在撰写本书时，我们使用的是版本
    0.25.0。
- en: '![Tekton Dashboard](assets/gocb_0602.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Tekton 仪表板](assets/gocb_0602.png)'
- en: Figure 6-2\. Tekton Dashboard
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-2\. Tekton 仪表板
- en: 'Finally, verify that `tkn` and Tekton are configured correctly:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，验证`tkn`和 Tekton 是否正确配置：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得以下输出：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See Also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Tekton Getting Started](https://oreil.ly/7I7ev)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton 入门指南](https://oreil.ly/7I7ev)'
- en: 6.2 Create a Hello World Task
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 创建一个 Hello World 任务
- en: Problem
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to start using Tekton by exploring Tasks and creating a sample one.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望通过探索任务并创建一个示例任务来开始使用 Tekton。
- en: Solution
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: In Tekton, a Task defines a series of steps that run sequentially to perform
    logic that the Task requires. Every [Task](https://oreil.ly/5ldpn) runs as a pod
    on your Kubernetes cluster, with each step running in its own container. While
    steps within a Task are sequential, Tasks can be executed inside a Pipeline in
    parallel. Therefore, Tasks are the building blocks for running Pipelines with
    Tekton.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tekton 中，一个任务定义了一系列按顺序运行的步骤，以执行任务所需的逻辑。每个[任务](https://oreil.ly/5ldpn)在您的 Kubernetes
    集群上作为一个 pod 运行，每个步骤在自己的容器中运行。虽然任务内部的步骤是顺序执行的，但任务可以在流水线中并行执行。因此，任务是使用 Tekton 运行流水线的构建块。
- en: 'Let’s create a Hello World Task:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 Hello World 任务：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO1-1)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO1-1)'
- en: The API as an object of kind `Task`
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`Task`类型对象的 API
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO1-2)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO1-2)'
- en: The name of the Task
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的名称
- en: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO1-3)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO1-3)'
- en: The list of steps contained within this Task, in this case just one
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在此任务中的步骤列表，本例中只有一个
- en: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO1-4)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO1-4)'
- en: The name of the step
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤的名称
- en: '[![5](assets/5.png)](#co_cloud_native_ci_cd_CO1-5)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_cloud_native_ci_cd_CO1-5)'
- en: The container image where the step starts
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤开始的容器镜像
- en: 'First you need to create this resource in Kubernetes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要在 Kubernetes 中创建此资源：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should get the following output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得以下输出：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can verify that the object has been created in your current Kubernetes
    namespace:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以验证对象是否已在当前的 Kubernetes 命名空间中创建：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get output similar to the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的输出：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now you can start your Tekton Task with `tkn` CLI:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用`tkn` CLI启动您的 Tekton 任务：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should get output similar to the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的输出：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A TaskRun is the API representation of a running Task. See [Recipe 6.3](#recipe_6_3)
    for more details.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 TaskRun 是一个正在运行的任务的 API 表示。查看[Recipe 6.3](#recipe_6_3)获取更多细节。
- en: See Also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Tekton Task documentation](https://oreil.ly/5ldpn)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton 任务文档](https://oreil.ly/5ldpn)'
- en: 6.3 Create a Task to Compile and Package an App from Git
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 创建一个从 Git 编译和打包应用的任务
- en: Problem
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to automate compiling and packaging an app from Git on Kubernetes with
    Tekton.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用 Tekton 在 Kubernetes 上自动编译和打包来自 Git 的应用程序。
- en: Solution
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'As seen in [Recipe 6.2](#recipe_6_2), Tekton Tasks have a flexible mechanism
    to add a list of sequential steps to automate actions. The idea is to create a
    list of Tasks with a chain of input/output that can be used to compose Pipelines.
    Therefore a Task can contain a series of optional fields for a better control
    over the resource:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[配方6.2](#recipe_6_2)中所见，Tekton任务具有一种灵活的机制，可以添加一个顺序步骤列表以自动执行操作。其思想是创建一个任务列表，并通过输入/输出链条来组合管道。因此，任务可以包含一系列可选字段，以更好地控制资源：
- en: '`inputs`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputs`'
- en: The resources ingested by the Task.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 任务摄取的资源。
- en: '`outputs`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`outputs`'
- en: The resources produced by the Task.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 任务产生的资源。
- en: '`params`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`params`'
- en: 'The parameters that will be used in the Task steps. Each parameter has:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将用于任务步骤的参数。每个参数都有：
- en: '`name`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`'
- en: The name of the parameter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的名称。
- en: '`description`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`description`'
- en: The description of the parameter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的描述。
- en: '`default`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`default`'
- en: The default value of the parameter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的默认值。
- en: '`results`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`results`'
- en: The names under which Tasks write execution results.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任务写入执行结果的名称。
- en: '`workspaces`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`workspaces`'
- en: The paths to volumes needed by the Task.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 任务需要的卷的路径。
- en: '`volumes`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`volumes`'
- en: The Task can also mount external volumes using the `volumes` attribute.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 任务还可以使用`volumes`属性挂载外部卷。
- en: The following example, as illustrated in [Figure 6-3](#fig6-3), shows a Task
    named `build-app` that clones the sources using the `git` command and lists the
    source code in output.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图6-3](#fig6-3)所示的示例显示了一个名为`build-app`的任务，该任务使用`git`命令克隆源代码并将源代码列出到输出中。
- en: '![Build App Task](assets/gocb_0603.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![构建应用任务](assets/gocb_0603.png)'
- en: Figure 6-3\. `build-app` Task
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-3。`build-app`任务
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO2-1)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO2-1)'
- en: A Task step and Pipeline Task can share a common filesystem via a Tekton workspace.
    The workspace could be either backed by something like PersistentVolumeClaim (PVC)
    and a `ConfigMap`, or just ephemeral (`emptyDir`).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一个任务步骤和管道任务可以通过Tekton工作空间共享共享文件系统。工作空间可以由类似PersistentVolumeClaim（PVC）和`ConfigMap`之类的东西支持，或者只是临时的（`emptyDir`）。
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO2-2)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO2-2)'
- en: A Task can have parameters; this feature makes the execution dynamic.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 任务可以有参数；此功能使执行动态化。
- en: 'Let’s create the Task with the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令创建任务：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should get output similar to the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can verify that the object has been created in your current Kubernetes
    namespace:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以验证对象是否已在当前的Kubernetes命名空间中创建：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should get output similar to the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also list the Task with the `tkn` CLI:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`tkn` CLI列出任务：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should get output similar to the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When you start a Task, a new [TaskRun](https://oreil.ly/MZ5DY) object is created.
    TaskRuns are the API representation of a running Task; thus you can create it
    with the `tkn` CLI using the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动任务时，将创建一个新的[TaskRun](https://oreil.ly/MZ5DY)对象。TaskRuns是正在运行任务的API表示；因此，您可以使用以下命令使用`tkn`
    CLI创建它：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-155
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: When parameters are used inside a Task or Pipeline, you will be prompted to
    add new values or confirm default ones, if any. In order to use the default values
    from the Task defintion without prompting for values, you can use the `--use-param-defaults`
    option.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当在任务或管道中使用参数时，如果需要，您将被提示添加新值或确认默认值。为了在不提示值的情况下使用任务定义中的默认值，您可以使用`--use-param-defaults`选项。
- en: 'You should get output similar to the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Or, you can create a `TaskRun` object manually like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以像这样手动创建一个`TaskRun`对象：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO3-1)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO3-1)'
- en: If you don’t want to specify a name for each `TaskRun`, you can use the `generateName`
    attribute to let Tekton pick a random one from the string you defined.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想为每个`TaskRun`指定名称，可以使用`generateName`属性，让Tekton从您定义的字符串中随机选择一个。
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO3-2)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO3-2)'
- en: Here you list the Task that the `TaskRun` is referring to.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里列出`TaskRun`引用的任务。
- en: 'And start it in this way:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 并以这种方式启动它：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should get output similar to the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE33]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can also verify it with the `tkn` CLI:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`tkn` CLI验证它：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should get output similar to the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can get the logs from the `TaskRun` by specifying the name of the `TaskRun`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定`TaskRun`的名称，您可以从中获取日志：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See Also
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Debugging a TaskRun](https://oreil.ly/PxRNG)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[调试TaskRun](https://oreil.ly/PxRNG)'
- en: 6.4 Create a Task to Compile and Package an App from Private Git
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 创建一个任务来从私有Git编译和打包应用程序
- en: Problem
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use a private Git repository to automate compiling and packaging
    of an app on Kubernetes with Tekton.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要使用私有Git仓库来自动化在Kubernetes上使用Tekton编译和打包应用程序。
- en: Solution
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'In [Recipe 6.3](#recipe_6_3) you saw how to compile and package a sample Java
    application using a public Git repository, but most of the time people deal with
    private repos at work, so how do you integrate them? Tekton supports the following
    authentication schemes for use with Git:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Recipe 6.3](#recipe_6_3)中，你看到如何使用公共Git存储库编译和打包示例Java应用程序，但大多数时候人们在工作中处理的是私有仓库，那么如何集成它们呢？Tekton支持以下用于Git的身份验证方案：
- en: Basic-auth
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: SSH
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH
- en: With both options you can use a Kubernetes [Secret](https://oreil.ly/Oxj6W)
    to store your credentials and attach them to the [`ServiceAccount`](https://oreil.ly/6UC3O)
    running your Tekton Tasks or Pipelines.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Kubernetes的[秘钥](https://oreil.ly/Oxj6W)来存储你的凭据，并将其附加到运行Tekton任务或流水线的[`ServiceAccount`](https://oreil.ly/6UC3O)。
- en: Tip
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Tekton uses a default service account, however you can override it following
    the documentation [here](https://oreil.ly/ID6m0).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton使用默认的服务账户，但你可以按照[这里的文档](https://oreil.ly/ID6m0)覆盖它。
- en: Let’s start with a common example of basic authentication and a popular Git
    service such as GitHub.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个常见的基本身份验证示例开始，以及像GitHub这样的热门Git服务。
- en: Note
  id: totrans-188
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: GitHub uses personal access tokens (PATs) as an alternative to using passwords
    for authentication. You can use a PAT instead of a clear-text password to enhance
    security.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub使用个人访问令牌（PAT）作为与密码身份验证的替代方案。你可以使用PAT代替明文密码以增强安全性。
- en: 'First you need to create a Secret. You can do this by creating the following
    YAML file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个秘钥。你可以通过创建以下YAML文件来做到这一点：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO4-1)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO4-1)'
- en: Here you specify the URL for which Tekton will use this Secret, in this case
    GitHub
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你指定Tekton将使用此秘钥的URL，本例中为GitHub
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO4-2)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO4-2)'
- en: This is the type of Secret, in this case a basic authentication one
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这种秘钥的类型，此处是基本身份验证
- en: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO4-3)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO4-3)'
- en: Your Git user, in this case your GitHub user
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Git用户，本例中是你的GitHub用户
- en: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO4-4)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO4-4)'
- en: You Git password, in this case your GitHub personal access token
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Git密码，本例中是你的GitHub个人访问令牌
- en: 'You can now create the Secret with the following command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用以下命令创建秘钥：
- en: '[PRE38]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should get the following output:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE39]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can also avoid writing YAML and do everything with `kubectl` as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以避免编写YAML并执行以下所有操作：
- en: '[PRE40]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'And then you just annotate the Secret as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你只需如下注释秘钥：
- en: '[PRE41]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Once you have created and annotated your Secret, you have to attach it to the
    `ServiceAccount` running your Tekton Tasks or Pipelines.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建并注释了你的秘钥（Secret），你需要将其附加到运行Tekton任务或流水线的`ServiceAccount`。
- en: 'Let’s create a new `ServiceAccount` for this purpose:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此目的创建一个新的`ServiceAccount`：
- en: '[PRE42]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO5-1)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO5-1)'
- en: List of Secrets attached to this `ServiceAccount`
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到此`ServiceAccount`的秘钥列表
- en: '[PRE43]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You should get the following output:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE44]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Tip
  id: totrans-216
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can create the `ServiceAccount` directly with `kubectl` as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接使用`kubectl`创建`ServiceAccount`，如下所示：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'and then patch it to add the secret reference:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进行补丁添加秘钥引用：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once credentials are set up and linked to the `ServiceAccount` running Tasks
    or Pipelines, you can just add the `--serviceaccount=<NAME>` option to your `tkn`
    command, using the [Recipe 6.3](#recipe_6_3) example:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了凭据并将其链接到运行任务或流水线的`ServiceAccount`，你可以在你的`tkn`命令中添加`--serviceaccount=<NAME>`选项，使用[Recipe
    6.3](#recipe_6_3)的示例：
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO6-1)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO6-1)'
- en: Here you specify the `ServiceAccount` to use; this will override the default
    one at runtime.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你指定要使用的`ServiceAccount`；这将在运行时覆盖默认设置。
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO6-2)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO6-2)'
- en: Here you can override the default repository with one of your choice. In this
    example there’s a private repository that you cannot access, but you can create
    a private repository on your own and test it like this.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以使用你选择的替换默认仓库。在这个例子中，有一个你无法访问的私有仓库，但你可以自己创建一个私有仓库，并像这样进行测试。
- en: 'You should get output similar to the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: See Also
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Tekton Authentication](https://oreil.ly/6W9xF)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton认证](https://oreil.ly/6W9xF)'
- en: 6.5 Containerize an Application Using a Tekton Task and Buildah
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5 使用Tekton任务和Buildah容器化应用程序
- en: Problem
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to compile, package, and containerize your app with a Tekton Task on
    Kubernetes.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在Kubernetes上使用Tekton任务编译、打包和容器化您的应用程序。
- en: Solution
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Automation is essential when adopting the cloud native approach, and if you
    decide to use Kubernetes for your CI/CD workloads, you need to provide a way to
    package and deploy your applications.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用云原生方法时自动化至关重要，如果您决定在Kubernetes上使用CI/CD工作负载，您需要提供一种打包和部署应用程序的方式。
- en: In fact, Kubernetes per se doesn’t have a built-in mechanism to build containers;
    it just relies on add-ons such as Tekton or external services for this purpose.
    That’s why in [Chapter 3](ch03.xhtml#ch_Containers) we did an overview on how
    to create containers for packaging applications with various open source tools.
    In [Recipe 3.3](ch03.xhtml#recipe_3_3) we used Buildah to create a container from
    a Dockerfile.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Kubernetes本身没有内置的构建容器的机制；它依赖于Tekton或外部服务来实现这一目的。这就是为什么在[第3章](ch03.xhtml#ch_Containers)中，我们概述了如何使用各种开源工具为打包应用程序创建容器。在[第3.3节](ch03.xhtml#recipe_3_3)中，我们使用Buildah从Dockerfile创建了一个容器。
- en: Thanks to Tekton’s extensible model, you can reuse the same Task defined in
    [Recipe 6.3](#recipe_6_3) to add a step to create a container using the outcomes
    from the previous steps, as shown in [Figure 6-4](#fig6-4).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了Tekton的可扩展模型，您可以重用在[第6.3节的配方](#recipe_6_3)中定义的同一任务，以添加一个步骤来使用前面步骤的结果创建一个容器，如[图6-4](#fig6-4)所示。
- en: '![Build Push app](assets/gocb_0604.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![构建推送应用](assets/gocb_0604.png)'
- en: Figure 6-4\. Build Push app
  id: totrans-239
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-4\. 构建推送应用
- en: The container can be pushed to a public container registry such as DockerHub
    or Quay.io, or to a private container registry. Similar to what we have seen in
    [Recipe 6.4](#recipe_6_4) for private Git repositories, pushing a container image
    to a container registry needs authentication. A Secret needs to be attached to
    the `ServiceAccount` running the Task as follows. See [Chapter 2](ch02.xhtml#ch_Requirements)
    for how to register and use a public registry.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以推送到公共容器注册表，如DockerHub或Quay.io，也可以推送到私有容器注册表。与我们在[第6.4节](#recipe_6_4)中看到的私有Git存储库类似，将容器映像推送到容器注册表需要进行身份验证。需要将Secret附加到运行任务的`ServiceAccount`，如下所示。请参阅[第2章](ch02.xhtml#ch_Requirements)，了解如何注册和使用公共注册表。
- en: '[PRE49]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Verify it is present and check that the Secret is of type `kubernetes.io/dockerconfigjson`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 确保它存在，并检查Secret的类型是`kubernetes.io/dockerconfigjson`：
- en: '[PRE51]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You should get the following output:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE52]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Let’s create a `ServiceAccount` for this Task:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此任务创建一个`ServiceAccount`：
- en: '[PRE53]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then let’s add the previously generated Secret to this `ServiceAccount`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将先前生成的**Secret**添加到此`ServiceAccount`：
- en: '[PRE54]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You should get the following output:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE55]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Let’s add a new step to create a container image and push it to a container
    registry. In the following example we use the book’s organization repos at Quay.io—`quay.io/gitops-cookbook/tekton-greeter:latest`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新步骤来创建一个容器映像并将其推送到容器注册表。在以下示例中，我们使用的是Quay.io的书籍组织存储库—`quay.io/gitops-cookbook/tekton-greeter:latest`：
- en: '[PRE56]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Let’s create this Task:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建此任务：
- en: '[PRE57]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You should get the following output:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE58]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now let’s start the Task with the Buildah step creating a container image and
    with a new parameter `destinationImage` to specify where to push the resulting
    container image:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用Buildah步骤启动任务，创建一个容器映像，并使用新参数`destinationImage`来指定将结果容器映像推送到哪里：
- en: '[PRE59]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO7-1)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO7-1)'
- en: Here you can place your registry; in this example we are using the book’s organization
    repos at Quay.io.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以放置您的注册表；在这个例子中，我们使用的是Quay.io的书籍组织存储库。
- en: 'You should get output similar to the following:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出：
- en: '[PRE60]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: See Also
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Buildah](https://buildah.io)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Buildah](https://buildah.io)'
- en: '[Docker Authentication for Tekton](https://oreil.ly/QJlVW)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton的Docker认证](https://oreil.ly/QJlVW)'
- en: 6.6 Deploy an Application to Kubernetes Using a Tekton Task
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.6 使用Tekton任务部署应用程序到Kubernetes
- en: Problem
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy an application from a container image to Kubernetes with
    a Tekton Task.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要使用Tekton任务将应用程序从容器映像部署到Kubernetes。
- en: Solution
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: While in Recipes [6.3](#recipe_6_3), [6.4](#recipe_6_4), and [6.5](#recipe_6_5)
    we have listed a Tekton Task that is useful for continuous integration (CI), in
    this recipe we’ll start having a look at the Continous Deployment (CD) part by
    deploying an existing container image to Kubernetes.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 6.3](#recipe_6_3)、[6.4](#recipe_6_4) 和 [6.5](#recipe_6_5) 中，我们列出了一个对持续集成（CI）有用的
    Tekton 任务，而在这个示例中，我们将从持续部署（CD）部分开始，通过将现有的容器镜像部署到 Kubernetes。
- en: 'We can reuse the container image we created and pushed in [Recipe 6.5](#recipe_6_5),
    available at `quay.io/gitops-cookbook/tekton-greeter:latest`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重用我们在 [示例 6.5](#recipe_6_5) 中创建并推送的容器镜像，其位置为 `quay.io/gitops-cookbook/tekton-greeter:latest`：
- en: '[PRE61]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO8-1)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO8-1)'
- en: For this example we are using `kubectl` from this container image, which also
    contains OpenShift CLI and it has an smaller size compared to `gcr.io/cloud-builders/kubectl`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用的是来自此容器镜像的 `kubectl`，它还包含 OpenShift CLI，并且其大小比 `gcr.io/cloud-builders/kubectl`
    要小。
- en: 'Let’s create this Task:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这个任务：
- en: '[PRE62]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You should get the following output:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE63]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'As discussed in [Recipe 6.5](#recipe_6_5), Tekton uses a default `ServiceAccount`
    for running Tasks and Pipelines, unless a specific one is defined at runtime or
    overridden at a global scope. The best practice is always to create a specific
    `ServiceAccount` for a particular action, so let’s create one named `tekton-deployer-sa`
    for this use case as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在 [示例 6.5](#recipe_6_5) 中所讨论的，Tekton 在运行任务和流水线时使用默认的 `ServiceAccount`，除非在运行时或全局范围内进行了特定定义的覆盖。最佳实践是始终为特定操作创建一个特定的
    `ServiceAccount`，因此让我们为此示例创建一个名为 `tekton-deployer-sa` 的特定 `ServiceAccount` 如下：
- en: '[PRE64]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'You should get the following output:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE65]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: A `ServiceAccount` needs permission to deploy an application to Kubernetes.
    [Roles and RoleBindings](https://oreil.ly/6ov6J) are API objects used to map a
    certain permission to a user or a `ServiceAccount`.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `ServiceAccount` 需要权限将应用程序部署到 Kubernetes。[角色（Roles）和角色绑定（RoleBindings）](https://oreil.ly/6ov6J)
    是用于将特定权限映射给用户或 `ServiceAccount` 的 API 对象。
- en: 'You first define a Role named `pipeline-role` for the `ServiceAccount` running
    the Tekton Task with permissions to deploy apps:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为运行 Tekton 任务的 `ServiceAccount` 定义一个名为 `pipeline-role` 的角色，并赋予部署应用程序的权限：
- en: '[PRE66]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now you need to bind the Role to the `ServiceAccount`:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要将角色绑定到 `ServiceAccount`：
- en: '[PRE67]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now you can create the two resources as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以按以下方式创建这两个资源：
- en: '[PRE68]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You should get the following output:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE69]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Finally, you can define a TaskRun as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以按以下方式定义一个 TaskRun：
- en: '[PRE70]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'And run it in this way:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 并以以下方式运行它：
- en: '[PRE71]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You should get the following output:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE72]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You can check the logs to see the results:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查日志查看结果：
- en: '[PRE73]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'You should get output similar to the following:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到类似以下的输出：
- en: '[PRE74]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'After a few seconds you should see the Deployment in Ready state:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，你应该看到部署处于就绪状态：
- en: '[PRE75]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note
  id: totrans-306
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The first time might take a while due to the time it takes to pull the container
    image.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次可能会花费一些时间，因为需要拉取容器镜像。
- en: 'Check if the app is available, expose the Deployment, and forward Kubernetes
    traffic to your workstation to test it:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 检查应用是否可用，将部署暴露，并将 Kubernetes 流量转发到你的工作站进行测试：
- en: '[PRE76]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'In another terminal, run this command:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE77]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You should see the following output:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE78]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: See Also
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Tekton Task](https://oreil.ly/YlIZI)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton 任务](https://oreil.ly/YlIZI)'
- en: 6.7 Create a Tekton Pipeline to Build and Deploy an App to Kubernetes
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.7 创建 Tekton 流水线以构建并部署应用到 Kubernetes
- en: Problem
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a Pipeline to compile, package, and deploy an app on Kubernetes
    with Tekton.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要创建一个用于在 Kubernetes 上编译、打包和部署应用程序的流水线。
- en: Solution
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: In the previous recipes we have seen how to create Tasks to execute one or more
    steps sequentially to build apps. In this recipe we will discuss [Tekton Pipelines](https://oreil.ly/aN8lv),
    a collection of Tasks that you can define and compose in a specific order of execution,
    either sequentially or in parallel, as you can see in [Figure 6-5](#fig6-5).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们看到了如何创建任务以依次执行一个或多个步骤来构建应用程序。在本示例中，我们将讨论 [Tekton 流水线](https://oreil.ly/aN8lv)，这是一组可以按照特定顺序（无论是顺序执行还是并行执行）定义和组合的任务，正如你可以在
    [图 6-5](#fig6-5) 中看到的那样。
- en: '![Tekton Pipelines flows](assets/gocb_0605.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![Tekton 流水线流程](assets/gocb_0605.png)'
- en: Figure 6-5\. Tekton Pipelines flows
  id: totrans-322
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-5\. Tekton 流水线流程
- en: 'Tekton Pipelines supports parameters and a mechanism to exchange outcomes between
    different Tasks. For instance, using the examples shown in Recipes [6.5](#recipe_6_5)
    and [6.6](#recipe_6_6):'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton Pipelines 支持参数和在不同任务之间交换结果的机制。例如，使用 Recipes [6.5](#recipe_6_5) 和 [6.6](#recipe_6_6)
    中所示的例子：
- en: '[PRE79]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO9-1)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO9-1)'
- en: Pipeline parameters
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线参数
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO9-2)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO9-2)'
- en: A list of Tasks for the Pipeline
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线任务列表
- en: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO9-3)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO9-3)'
- en: The exact name of the Task to use
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的任务的确切名称
- en: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO9-4)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO9-4)'
- en: You can decide the order with the `runAfter` field to indicate that a Task must
    execute after one or more other Tasks
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `runAfter` 字段决定顺序，指示一个任务必须在一个或多个其他任务之后执行
- en: '[![5](assets/5.png)](#co_cloud_native_ci_cd_CO9-5)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_cloud_native_ci_cd_CO9-5)'
- en: One or more common Workspaces used to share data between Tasks
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在任务之间共享数据的一个或多个常见工作空间的确切名称
- en: 'Let’s create the Pipeline as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按如下方式创建这个流水线：
- en: '[PRE81]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'You should get the following output:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE82]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Similarly to TaskRuns, you can run this Pipeline by creating a [PipelineRun](https://oreil.ly/N8K3a)
    resource as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 TaskRuns，您可以通过创建 [PipelineRun](https://oreil.ly/N8K3a) 资源来运行此 Pipeline，方法如下：
- en: '[PRE83]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'You can run the Pipeline by creating this PipelineRun object as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建以下 PipelineRun 对象来运行该流水线：
- en: '[PRE84]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'You can check the status:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查状态：
- en: '[PRE85]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Now that you have seen how to reuse existing Tasks within a Pipeline, it’s a
    good time to introduce the [Tekton Hub](https://hub.tekton.dev), a web-based platform
    for developers to discover, share, and contribute Tasks and Pipelines for Tekton
    (see [Figure 6-6](#fig6-6)).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到如何在 Pipeline 中重复使用现有任务，现在是时候介绍 [Tekton Hub](https://hub.tekton.dev) 了，这是一个供开发人员发现、分享和贡献
    Tekton 任务和流水线的基于 Web 的平台（参见 [图 6-6](#fig6-6)）。
- en: '![Tekton Hub](assets/gocb_0606.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![Tekton Hub](assets/gocb_0606.png)'
- en: Figure 6-6\. Tekton Hub
  id: totrans-349
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-6\. Tekton Hub
- en: 'You can implement the same Pipeline with Tasks already available in the Hub.
    In our case, we have:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Hub 中已有的任务实现相同的 Pipeline。在我们的情况下，我们有：
- en: '[`git-clone`](https://oreil.ly/tVLAG)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`git-clone`](https://oreil.ly/tVLAG)'
- en: Task that clones a repo from the provided URL into the output Workspace.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆指定 URL 的 repo 到输出工作空间的任务。
- en: '[`buildah`](https://oreil.ly/nTUkZ)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[`buildah`](https://oreil.ly/nTUkZ)'
- en: Task that builds source into a container image and can push it to a container
    registry.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 构建源代码到容器映像并将其推送到容器注册表的任务。
- en: '[`kubernetes-actions`](https://oreil.ly/A3Hui)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[`kubernetes-actions`](https://oreil.ly/A3Hui)'
- en: The generic `kubectl` CLI task, which can be used to run all kinds of k8s commands.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的 `kubectl` CLI 任务，可用于运行各种 k8s 命令。
- en: 'First let’s add them to our namespace as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们按如下方式将它们添加到我们的命名空间中：
- en: '[PRE87]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'You should get output similar to the following to confirm they are installed
    properly in your namespace:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出来确认它们在您的命名空间中已经正确安装：
- en: '[PRE88]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You can cross-check it with the following command:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令进行交叉检查：
- en: '[PRE89]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'You should get output similar to the following:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出：
- en: '[PRE90]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Tip
  id: totrans-365
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'Some Tekton installations like the one made with the Operator for [OpenShift
    Pipelines](https://oreil.ly/dAKhL) provide a common list of useful Tasks such
    as those just listed, provided as ClusterTasks. ClusterTasks are Tasks available
    for all namespaces within the Kubernetes cluster. Check if your installation already
    provides some with this command: `kubectl get clustertasks`.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Tekton 安装，例如使用 [OpenShift Pipelines](https://oreil.ly/dAKhL) 运算符创建的安装，提供了一些常用任务的公共列表，如刚刚列出的那些，作为
    ClusterTasks 提供。ClusterTasks 是在 Kubernetes 集群中所有命名空间中都可用的任务。使用以下命令检查您的安装是否已经提供了一些：`kubectl
    get clustertasks`。
- en: Now the Pipeline has four Tasks, as you can see in [Figure 6-7](#fig6-7).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Pipeline 有四个任务，如您在 [图 6-7](#fig6-7) 中所见。
- en: '![Pipeline](assets/gocb_0607.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![流水线](assets/gocb_0607.png)'
- en: Figure 6-7\. Pipeline
  id: totrans-369
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-7\. 流水线
- en: 'In this example you’ll see a [PersistentVolumeClaim](https://oreil.ly/Opio5)
    as a Workspace because here the data is shared among different Tasks so we need
    to persist it:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您将看到一个 [PersistentVolumeClaim](https://oreil.ly/Opio5) 作为工作空间，因为这里的数据在不同任务之间共享，所以我们需要持久化它：
- en: '[PRE91]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'As usual, you can create the resource with `kubectl`:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，您可以使用 `kubectl` 创建资源：
- en: '[PRE92]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'You should see the following output:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE93]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Note
  id: totrans-377
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In Minikube you have a default [StorageClass](https://oreil.ly/ZiPnA) that provides
    dynamic storage for the cluster. If you are using another Kubernetes cluster,
    please make sure you have a dynamic storage support.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Minikube 中，您有一个默认的 [StorageClass](https://oreil.ly/ZiPnA)，为集群提供动态存储。如果您正在使用其他
    Kubernetes 集群，请确保支持动态存储。
- en: 'The Pipeline definition now is:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 管道定义如下：
- en: '[PRE95]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Let’s create the resource:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建资源：
- en: '[PRE96]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Note
  id: totrans-383
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We are using the same Secret and `ServiceAccount` defined in [Recipe 6.5](#recipe_6_5)
    to log in against Quay.io in order to push the container image.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与 [Recipe 6.5](#recipe_6_5) 中定义的相同的秘密和 `ServiceAccount` 来登录 Quay.io，以推送容器映像。
- en: 'You can now start the Pipeline as follows:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以按照以下方式启动流水线：
- en: '[PRE97]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Tip
  id: totrans-388
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can use the Tekton Dashboard to create and visualize your running Tasks
    and Pipelines as shown in [Figure 6-8](#fig6-7a).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Tekton 仪表板创建和可视化您正在运行的任务和流水线，如[图 6-8](#fig6-7a)所示。
- en: '![Tekton Dashboard Pipelineruns](assets/gocb_0608.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![Tekton 仪表板 Pipeline 运行](assets/gocb_0608.png)'
- en: Figure 6-8\. Tekton Dashboard TaskRuns
  id: totrans-391
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-8\. Tekton 仪表板任务运行
- en: See Also
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Tekton Catalog](https://oreil.ly/bnUiR)'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton 目录](https://oreil.ly/bnUiR)'
- en: 6.8 Using Tekton Triggers to Compile and Package an Application Automatically
    When a Change Occurs on Git
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.8 使用 Tekton 触发器在 Git 发生变化时自动编译和打包应用程序
- en: Problem
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to automate your CI/CD Pipelines when a change on Git occurs.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Git 发生变化时，您希望自动化您的 CI/CD 流水线。
- en: Solution
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[Tekton Triggers](https://oreil.ly/zVcfe) is the Tekton component that brings
    automation for Tasks and Pipelines with Tekton. It is an interesting feature for
    a GitOps strategy for cloud native CI/CD as it supports external events from a
    large set of sources such as Git events (Git push or pull requests).'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '[Tekton 触发器](https://oreil.ly/zVcfe) 是 Tekton 组件，为 Tekton 的任务和流水线带来自动化。它对于云原生的
    CI/CD 的 GitOps 策略是一个有趣的功能，因为它支持来自各种源（如 Git 事件（Git push 或 pull 请求））的外部事件。'
- en: Most Git repository servers support the concept of webhooks, calling to an external
    source via HTTP(S) when a change in the code repository happens. Tekton provides
    an API endpoint that supports receiving hooks from remote systems in order to
    trigger builds. By pointing the code repository’s hook at the Tekton resources,
    automated code/build/deploy pipelines can be achieved.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Git 仓库服务器支持 Webhook 的概念，在代码仓库发生变化时通过 HTTP(S) 调用外部源。Tekton 提供了一个 API 端点，支持从远程系统接收挂钩以触发构建。通过将代码库的挂钩指向
    Tekton 资源，可以实现自动化的代码/构建/部署流水线。
- en: 'The installation of Tekton Triggers, which we discussed in [Recipe 6.1](#recipe_6_1),
    brings a set of CRDs to manage event handling for Tasks and Pipelines. In this
    recipe we will use the following, as illustrated also in [Figure 6-9](#fig6-8):'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [Recipe 6.1](#recipe_6_1) 中讨论的 Tekton 触发器的安装引入了一组 CRD，用于管理任务和流水线的事件处理。在这个示例中，我们将使用如下内容，也在
    [图 6-9](#fig6-8) 中有所说明：
- en: '![Tekton Triggers](assets/gocb_0609.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![Tekton 触发器](assets/gocb_0609.png)'
- en: Figure 6-9\. Tekton Triggers
  id: totrans-402
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-9\. Tekton 触发器
- en: '`TriggerTemplate`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`TriggerTemplate`'
- en: A template for newly created resources. It supports parameters to create specific
    `PipelineRuns`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于新创建资源的模板。它支持参数以创建特定的 `PipelineRuns`。
- en: '`TriggerBinding`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`TriggerBinding`'
- en: Validates events and extracts payload fields.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 验证事件并提取负载字段。
- en: '`EventListener`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventListener`'
- en: Connects `TriggerBindings` and `TriggerTemplates` into an addressable endpoint
    (the event sink). It uses the extracted event parameters from each `Trigger​Bind⁠ing`
    (and any supplied static parameters) to create the resources specified in the
    corresponding `TriggerTemplate`. It also optionally allows an external service
    to preprocess the event payload via the interceptor field.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `TriggerBindings` 和 `TriggerTemplates` 连接到可寻址的端点（事件接收器）。它使用从每个 `TriggerBinding`
    中提取的事件参数（以及任何提供的静态参数）来创建指定在相应 `TriggerTemplate` 中指定的资源。它还可选地允许外部服务通过拦截器字段预处理事件负载。
- en: 'Before creating these resources, you need to set up permissions to let Tekton
    Triggers create Pipelines and Tasks. You can use the setup available from [the
    book’s repository](https://oreil.ly/fPTzU) with the following command:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建这些资源之前，您需要设置权限，以便 Tekton 触发器创建流水线和任务。您可以使用从 [书籍的存储库](https://oreil.ly/fPTzU)
    中提供的设置和以下命令：
- en: '[PRE99]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'This will create a new `ServiceAccount` named `tekton-triggers-sa` that has
    the permissions needed to interact with the Tekton Pipelines component. As confirmation,
    from the previous command you should get the following output:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `tekton-triggers-sa` 的新 `ServiceAccount`，该账号具有与 Tekton Pipelines 组件交互所需的权限。确认之前的命令后，您应该会得到以下输出：
- en: '[PRE100]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'You can now add automation to your Pipelines like the one we defined in [Recipe
    6.7](#recipe_6_7) creating these three resources:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像我们在 [Recipe 6.7](#recipe_6_7) 中定义的那样为你的流水线添加自动化，创建这三个资源：
- en: '[PRE101]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'You can create the resources just listed as follows:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下步骤创建刚才列出的资源：
- en: '[PRE104]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'You should get the following output:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到以下的输出：
- en: '[PRE105]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Contextually, a new pod is created representing the `EventListener`:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文中，创建了一个代表 `EventListener` 的新 pod：
- en: '[PRE106]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'You should get output similar to the following:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到类似以下的输出：
- en: '[PRE107]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The `EventListener` pod listens for events at a specified port, and it is bound
    to a Kubernetes Service:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventListener` 容器在指定端口监听事件，并绑定到一个 Kubernetes 服务：'
- en: '[PRE108]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'You should get output similar to the following:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到类似以下的输出：
- en: '[PRE109]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: If you are running your Git server outside the cluster (e.g., GitHub or GitLab),
    you need to expose the Service, for example, with an [Ingress](https://oreil.ly/qAUhw).
    Afterwards you can configure webhooks on your Git server using the `EventListener`
    URL associated to your Ingress.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Git 服务器运行在集群外（例如 GitHub 或 GitLab），你需要暴露服务，例如通过 [Ingress](https://oreil.ly/qAUhw)。然后，你可以使用关联到你的
    Ingress 的 `EventListener` URL 在你的 Git 服务器上配置 Webhook。
- en: Tip
  id: totrans-430
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'With Minikube you can add support for Ingresses with this command: `minikube
    addons enable ingress`. Then you need to map a hostname for the Ingress.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Minikube，你可以通过以下命令为 Ingress 添加支持：`minikube addons enable ingress`。然后，你需要为
    Ingress 映射一个主机名。
- en: For the purpose of this book we can just simulate the webhook as it would come
    from the Git server.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 本书示例中，我们可以模拟 Webhook，就像它从 Git 服务器传入一样。
- en: 'First you can map the `EventListener` Service to your local networking with
    the following command:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以通过以下命令将 `EventListener` 服务映射到本地网络：
- en: '[PRE110]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Then you can invoke the Trigger by making an HTTP request to *http://localhost:8080*
    using `curl`. The HTTP request must be a POST request containing a JSON payload
    and it should contain the fields referenced via a `TriggerBinding`. In our case
    we mapped `body.repository.clone_url` and `body.after`.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过使用 `curl` 向 *http://localhost:8080* 发送 HTTP 请求来调用触发器。HTTP 请求必须是一个包含
    JSON 负载的 POST 请求，并且它应该包含通过 `TriggerBinding` 引用的字段，例如 `body.repository.clone_url`
    和 `body.after`。
- en: Note
  id: totrans-436
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Check the documentation of your Git server to get the list of parameters that
    a webhook can generate. In this example we are using the [GitHub Webhooks reference](https://oreil.ly/4AUlu).
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的 Git 服务器文档，获取 Webhook 可以生成的参数列表。在这个示例中，我们使用了 [GitHub Webhooks 参考文档](https://oreil.ly/4AUlu)。
- en: 'To test Triggers, run this command:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试触发器，请运行以下命令：
- en: '[PRE111]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'You should get output similar to the following:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到类似以下的输出：
- en: '[PRE112]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'A new Pipeline now is started and you can check it with the following command:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动了一个新的流水线，你可以使用以下命令检查它：
- en: '[PRE113]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'You should see it in `Running` status as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到它处于以下的`Running`状态：
- en: '[PRE114]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: See Also
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Tekton Triggers examples](https://oreil.ly/Xr0ne)'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tekton 触发器示例](https://oreil.ly/Xr0ne)'
- en: '[Getting Started with Tekton Triggers](https://oreil.ly/gqKyz)'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 Tekton 触发器](https://oreil.ly/gqKyz)'
- en: '[Securing webhooks with event listeners](https://oreil.ly/iIbXc)'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用事件监听器保护 Webhooks](https://oreil.ly/iIbXc)'
- en: 6.9 Update a Kubernetes Resource Using Kustomize and Push the Change to Git
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.9 使用 Kustomize 更新 Kubernetes 资源并将更改推送到 Git
- en: Problem
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use Kustomize in your Tekton Pipelines in order to automate Kubernetes
    manifests updates.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在 Tekton 流水线中使用 Kustomize 自动化更新 Kubernetes 清单。
- en: Solution
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: As we discussed in [Chapter 4](ch04.xhtml#ch_Kustomize), Kustomize is a powerful
    tool to manage Kubernetes manifests. Kustomize can add, remove, or patch configuration
    options without forking. In [Recipe 4.2](ch04.xhtml#recipe_4_2) you saw how to
    update a Kubernetes Deployment with a new container image hash using the `kustomize`
    CLI.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [第 4 章](ch04.xhtml#ch_Kustomize) 中讨论的，Kustomize 是一个管理 Kubernetes 清单的强大工具。Kustomize
    能够在不分叉的情况下添加、删除或修补配置选项。在 [Recipe 4.2](ch04.xhtml#recipe_4_2) 中，你看到了如何使用 `kustomize`
    CLI 更新 Kubernetes 部署的新容器镜像哈希。
- en: In this recipe, you’ll see how to let Tekton update it using Kustomize. This
    is very useful for GitOps as it allows an automated update on Git to the manifests
    describing an application running on Kubernetes, favoring the interconnection
    with a GitOps tool such as Argo CD in order to sync resources (see [Chapter 7](ch07.xhtml#ch_Argo_CD)).
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将看到如何使用 Kustomize 让 Tekton 更新它。这对于 GitOps 非常有用，因为它允许在 Git 上自动更新描述在 Kubernetes
    上运行的应用程序的清单，有利于与 GitOps 工具（如 Argo CD）进行资源同步（参见 [第 7 章](ch07.xhtml#ch_Argo_CD)）。
- en: When adopting the GitOps approach, it’s common to have one or more repositories
    for the Kubernetes manifests and then one or more repositories for the apps as
    well.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用 GitOps 方法时，通常会为 Kubernetes 清单拥有一个或多个仓库，以及一个或多个应用程序仓库。
- en: 'Thus let’s introduce a Task that accepts the Kubernetes manifests repository
    as a parameter and can update the container image reference as seen in [Recipe
    4.2](ch04.xhtml#recipe_4_2):'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们介绍一个接受 Kubernetes 清单仓库作为参数，并且能够像在[食谱 4.2](ch04.xhtml#recipe_4_2)中看到的那样更新容器镜像引用的任务：
- en: '[PRE115]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'This Task is composed of three steps:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务由三个步骤组成：
- en: '`git-clone`'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`git-clone`'
- en: Clones the Kubernetes manifests repository
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆 Kubernetes 清单仓库
- en: '`update-digest`'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`update-digest`'
- en: Runs `kustomize` to update the Kubernetes Deployment with a container image
    hash given as a parameter
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `kustomize` 更新 Kubernetes 部署，使用作为参数给出的容器镜像哈希
- en: '`git-commit`'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '`git-commit`'
- en: Updates the Kubernetes manifest repo with the new container image hash
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 Kubernetes 清单仓库以新的容器镜像哈希值
- en: 'You can create the Task with the following command:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令创建该任务：
- en: '[PRE116]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'You should get the following output:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE117]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'You can now add this Task to a Pipeline similar to the one you saw in [Recipe
    6.7](#recipe_6_7) in order to automate the update of your manifests with Kustomize:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将此任务添加到类似于[食谱 6.7](#recipe_6_7)中看到的 Pipeline 中，以便使用 Kustomize 自动更新您的清单：
- en: '[PRE118]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO10-1)'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO10-1)'
- en: As you can see from this example, you can take a result of a previous Task as
    an input for the following one. In this case the hash of the container image generated
    by the `build-push-image` Task is used to update the manifests with Kustomize.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从这个示例中所看到的，您可以将先前任务的结果作为下一个任务的输入。在这种情况下，由 `build-push-image` 任务生成的容器镜像的哈希用于使用
    Kustomize 更新清单。
- en: 'You can create the Pipeline with the following command:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令创建 Pipeline：
- en: '[PRE119]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'You should get the following output:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE120]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: The `git-commit` step requires authentication to your Git server in order to
    push the updates to the repo. Since this example is on GitHub, we are using a
    GitHub Personal Access Token (see [Recipe 6.4](#recipe_6_4)) attached to the `ServiceAccount`
    `tekton-bot-sa`.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`git-commit` 步骤需要对您的 Git 服务器进行身份验证，以便将更新推送到仓库。由于此示例在 GitHub 上，我们使用了 GitHub
    个人访问令牌（参见[食谱 6.4](#recipe_6_4)），附加到 `ServiceAccount` `tekton-bot-sa`。'
- en: 'Make sure to add the repo and registry’s Kubernetes Secrets as described in
    Recipes [6.4](#recipe_6_4) and [6.5](#recipe_6_5):'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 确保按照食谱 [6.4](#recipe_6_4) 和 [6.5](#recipe_6_5) 的说明添加仓库和注册表的 Kubernetes 密钥：
- en: '[PRE121]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Note
  id: totrans-481
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you have created a PVC for the Pipeline as defined in [Recipe 6.7](#recipe_6_7).
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已按照[食谱 6.7](#recipe_6_7)中定义的方式为 Pipeline 创建了一个 PVC。
- en: 'Now you can start the Pipeline as follows:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以按以下方式启动 Pipeline：
- en: '[PRE122]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 6.10 Update a Kubernetes Resource Using Helm and Create a Pull Request
  id: totrans-485
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.10 使用 Helm 更新 Kubernetes 资源并创建拉取请求
- en: Problem
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to automate the deployment of Helm-packaged apps with a Tekton Pipeline.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望通过 Tekton Pipeline 自动化 Helm 打包的应用程序的部署。
- en: Solution
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: In [Chapter 5](ch05.xhtml#ch_Helm) we discussed Helm and how it can be used
    to manage applications on Kubernetes in a convenient way. In this recipe you’ll
    see how to automate Helm-powered deployments through a Pipeline in order to install
    or update an application running on Kubernetes.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 5 章](ch05.xhtml#ch_Helm)中，我们讨论了 Helm 及其如何便捷地管理运行在 Kubernetes 上的应用程序。在此食谱中，您将看到如何通过
    Pipeline 自动化 Helm 驱动的部署，以安装或更新运行在 Kubernetes 上的应用程序。
- en: As shown in [Recipe 6.7](#recipe_6_7), you can use Tekton Hub to find and install
    Tekton Tasks. In fact, you can use the [`helm-upgrade-from-repo`](https://oreil.ly/oR6GU)
    Task to have Helm support for your Pipelines.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 如[食谱 6.7](#recipe_6_7)所示，您可以使用 Tekton Hub 查找并安装 Tekton 任务。实际上，您可以使用[`helm-upgrade-from-repo`](https://oreil.ly/oR6GU)任务来为您的
    Pipeline 提供 Helm 支持。
- en: 'To install it, run this command:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，请运行以下命令：
- en: '[PRE123]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'This Task can install a Helm Chart from a Helm repository. For this example,
    we provide a Helm repository in [this book’s repository](https://oreil.ly/lroxo)
    that you can add with the following command:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务可以从 Helm 仓库安装 Helm 图表。在本示例中，我们在[本书的仓库](https://oreil.ly/lroxo)提供了一个 Helm
    仓库，您可以使用以下命令添加：
- en: '[PRE124]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'You should get the following output:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE125]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'You can install the Helm Chart with the following command:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装 Helm 图表：
- en: '[PRE126]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'You should get output similar to the following:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出：
- en: '[PRE127]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The app should be now deployed and running on Kubernetes:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 应用现在应该已经部署并在 Kubernetes 上运行：
- en: '[PRE128]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'You should get the following output:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE129]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Now let’s update the Deployment with a Tekton Task running a `helm upgrade`
    with the following `TaskRun`:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用 Tekton 任务更新部署，运行一个带有以下 `TaskRun` 的 `helm upgrade`：
- en: '[PRE130]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO11-1)'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO11-1)'
- en: The `helm-upgrade-from-repo` Task needs permission to list objects in the working
    namespace, so you need a `ServiceAccount` with special permissions as seen in
    [Recipe 6.6](#recipe_6_6).
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm-upgrade-from-repo` 任务需要在工作命名空间中列出对象的权限，因此您需要一个带有特殊权限的 `ServiceAccount`，如
    [Recipe 6.6](#recipe_6_6) 中所示。'
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO11-2)'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO11-2)'
- en: You can override values in the Chart’s *values.yaml* file by adding them in
    this param. Here we are setting up two replicas for the Pac-Man game.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在此参数中设置来覆盖 Chart 的 *values.yaml* 文件中的值。在这里，我们为 Pac-Man 游戏设置了两个副本。
- en: 'Run the Task with the following command:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行任务：
- en: '[PRE131]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'You should get output similar to the following:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出：
- en: '[PRE132]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Check logs with `tkn` CLI and select the running Task:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tkn` CLI 检查日志并选择正在运行的任务：
- en: '[PRE133]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'You should get output similar to the following, where you can see the Helm
    upgrade has been successfully performed:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下的输出，其中您可以看到 Helm 升级已成功执行：
- en: '[PRE134]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 6.11 Use Drone to Create a Pipeline for Kubernetes
  id: totrans-521
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.11 使用 Drone 创建 Kubernetes 流水线
- en: Problem
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a CI/CD pipeline for Kubernetes with Drone.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要为 Kubernetes 创建一个 CI/CD 流水线，使用 Drone。
- en: Solution
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[Drone](https://www.drone.io) is an open source project for cloud native continuous
    integration (CI). It uses YAML build files to define and execute build pipelines
    inside containers.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '[Drone](https://www.drone.io) 是一个开源项目，用于云原生持续集成（CI）。它使用 YAML 构建文件来定义和执行容器内的构建流水线。'
- en: 'It has two main components:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 它有两个主要组件：
- en: Server
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: Integrates with popular SCMs such as GitHub, GitLab, or Gitea
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 集成流行的 SCM 工具，如 GitHub、GitLab 或 Gitea
- en: Runner
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 运行者
- en: Acts as an agent running on a certain platform
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 作为运行在特定平台上的代理
- en: You can install the Server of your choice following the [documentation](https://oreil.ly/K1ZR2)
    and install the [Kubernetes Runner](https://oreil.ly/3vydl).
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照 [文档](https://oreil.ly/K1ZR2) 安装您选择的服务器，并安装 [Kubernetes Runner](https://oreil.ly/3vydl)。
- en: In this example you will create a Java Maven-based pipeline using the Pac-Man
    app. First, install the Drone CLI for your OS; you can get it from the official
    website [here](https://oreil.ly/cdI9Y).
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您将使用 Pac-Man 应用程序创建一个基于 Java Maven 的流水线。首先，为您的操作系统安装 Drone CLI；您可以从官方网站
    [这里](https://oreil.ly/cdI9Y) 获取。
- en: Tip
  id: totrans-533
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'On macOS, `drone` is available through [Homebrew](https://brew.sh) as follows:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，通过 [Homebrew](https://brew.sh) 安装 `drone` 如下所示：
- en: '[PRE137]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Then configure Drone, copy the `DRONE_TOKEN` from your instance under the Drone
    Account settings page, then create/update the file called *.envrc.local* and add
    the variables to override:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 然后配置 Drone，从 Drone 账户设置页面复制 `DRONE_TOKEN`，然后创建/更新名为 *.envrc.local* 的文件，并添加变量进行覆盖：
- en: '[PRE138]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Ensure the token is loaded:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已加载令牌：
- en: '[PRE139]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Now activate the repo in Drone:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 Drone 中激活仓库：
- en: '[PRE140]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Similarly to Tekton, Drone’s pipeline will compile, test, and build the app.
    Then it will create and push the container image to a registry.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Tekton，Drone 的流水线将编译、测试并构建应用程序。然后它将创建并推送容器镜像到注册表。
- en: 'Add credentials to your container registry as follows (here, we’re using Quay.io):'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 将凭据添加到您的容器注册表中，如下所示（这里我们使用的是 Quay.io）：
- en: '[PRE141]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Create a file called *.drone.yaml* as follows:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 创建名为 *.drone.yaml* 的文件如下所示：
- en: '[PRE142]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Start the pipeline:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 启动流水线：
- en: '[PRE143]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Tip
  id: totrans-549
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can also trigger the pipeline to start by pushing to your Git repo.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将代码推送到您的 Git 仓库来触发流水线的启动。
- en: See Also
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Example Maven Pipeline from Drone docs](https://oreil.ly/YzWcx)'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Drone 文档中的 Maven 流水线示例](https://oreil.ly/YzWcx)'
- en: '[Complete Quarkus pipeline example in Drone](https://oreil.ly/eVT1T)'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Drone 中完成 Quarkus 流水线示例](https://oreil.ly/eVT1T)'
- en: 6.12 Use GitHub Actions for CI
  id: totrans-554
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.12 使用 GitHub Actions 进行 CI
- en: Problem
  id: totrans-555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use GitHub Actions for CI in order to compile and package an app
    as a container image ready to be deployed in CD.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要使用 GitHub Actions 进行 CI，以编译和打包准备部署到 CD 的容器镜像。
- en: Solution
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[GitHub Actions](https://oreil.ly/hCOUp) are event-driven automation tasks
    available for any GitHub repository. An event automatically triggers the workflow,
    which contains a job. The job then uses steps to control the order in which actions
    are run. These actions are the commands that automate software building, testing,
    and deployment.'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://oreil.ly/hCOUp) 是针对任何 GitHub 仓库提供的事件驱动自动化任务。事件会自动触发工作流程，其中包含一个作业。该作业然后使用步骤来控制操作运行的顺序。这些操作是自动化软件构建、测试和部署的命令。'
- en: In this recipe, you will add a GitHub Action for building the Pac-Man game container
    image, and pushing it to the [GitHub Container Registry](https://oreil.ly/Bzq7l).
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您将添加一个GitHub Action来构建Pac-Man游戏的容器映像，并将其推送到[GitHub容器注册表](https://oreil.ly/Bzq7l)。
- en: Tip
  id: totrans-560
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: As GitHub Actions are connected to repositories, you can fork the Pac-Man repository
    from this book’s code repositories to add your GitHub Actions. See the documentation
    about [forking repositories](https://oreil.ly/O6HtM) for more info on this topic.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GitHub Actions与存储库连接，您可以从本书的代码存储库中分叉Pac-Man存储库以添加您的GitHub Actions。有关此主题的更多信息，请参阅有关[分叉存储库](https://oreil.ly/O6HtM)的文档。
- en: GitHub Actions workflows run into [environments](https://oreil.ly/uXOQ7) and
    they can reference an environment to use the environment’s protection rules and
    secrets.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions工作流程进入[环境](https://oreil.ly/uXOQ7)，它们可以引用一个环境以使用该环境的保护规则和秘密。
- en: 'Workflows and jobs are defined with a YAML file containing all the needed steps.
    Inside your repository, you can create one with the path `.github/workflows/pacman-ci-action.yml`:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包含所有必要步骤的YAML文件来定义工作流程和作业。在您的存储库内，您可以创建路径为`.github/workflows/pacman-ci-action.yml`的文件：
- en: '[PRE144]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO12-1)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_cloud_native_ci_cd_CO12-1)'
- en: Name of the Action.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 操作名称。
- en: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO12-2)'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_cloud_native_ci_cd_CO12-2)'
- en: Environment variables to be used in the workflow. This includes [default environment
    variables](https://oreil.ly/qNE6p) and the Secret you added to the environment.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 将在工作流程中使用的环境变量。这包括[默认环境变量](https://oreil.ly/qNE6p)和您添加到环境中的秘密。
- en: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO12-3)'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_cloud_native_ci_cd_CO12-3)'
- en: Here’s where you define which type of trigger you want for this workflow. In
    this case, any change to the repository (Push) to the `master` branch will trigger
    the action to start. Check out the documentation for a [full list of triggers](https://oreil.ly/lGgAE)
    that can be used.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是您定义工作流触发器类型的地方。在这种情况下，对存储库的任何更改（Push）到`master`分支将触发动作开始。查看[触发器的完整列表](https://oreil.ly/lGgAE)以获取更多信息。
- en: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO12-4)'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_cloud_native_ci_cd_CO12-4)'
- en: Name of this Job.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 该作业的名称。
- en: '[![5](assets/5.png)](#co_cloud_native_ci_cd_CO12-5)'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_cloud_native_ci_cd_CO12-5)'
- en: List of steps; each step contains an action for the pipeline.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤列表；每个步骤包含管道中的一个动作。
- en: '[![6](assets/6.png)](#co_cloud_native_ci_cd_CO12-6)'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_cloud_native_ci_cd_CO12-6)'
- en: '[Buildah Build](https://oreil.ly/IcyGC). This action builds container images
    using Buildah.'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[Buildah构建](https://oreil.ly/IcyGC)。此动作使用Buildah构建容器映像。'
- en: '[![7](assets/7.png)](#co_cloud_native_ci_cd_CO12-7)'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_cloud_native_ci_cd_CO12-7)'
- en: '[Push to Registry](https://oreil.ly/HcSUl). This action is used to push to
    the GitHub Registry using built-in credentials available for GitHub repository
    owners.'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[推送到注册表的动作](https://oreil.ly/HcSUl)。此操作用于使用GitHub仓库所有者的内置凭据推送到GitHub注册表。'
- en: After each Git push or pull request, a new run of the action is performed as
    shown in [Figure 6-10](#fig6-8a).
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 每次Git推送或拉取请求后，动作将执行新的运行，如[图6-10](#fig6-8a)所示。
- en: Note
  id: totrans-580
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: GitHub offers its own container registry available at ghcr.io, and container
    images are referenced as part of the [GitHub Packages](https://oreil.ly/aPNi5).
    By default the images are public. See this [book’s repository](https://oreil.ly/EG1zx)
    as a reference.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub提供其自己的容器注册表，位于ghcr.io，容器映像作为[GitHub Packages](https://oreil.ly/aPNi5)的一部分引用。默认情况下，这些映像是公开的。请参阅本书的存储库作为参考。
- en: '![GitHub Actions Environments](assets/gocb_0610.png)'
  id: totrans-582
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub Actions环境](assets/gocb_0610.png)'
- en: Figure 6-10\. GitHub Actions Jobs
  id: totrans-583
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-10\. GitHub Actions作业
- en: See Also
  id: totrans-584
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[GitHub Actions Jobs](https://oreil.ly/44Qt8)'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub Actions作业](https://oreil.ly/44Qt8)'
- en: '[Red Hat Actions](https://oreil.ly/hFcCd)'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Red Hat Actions](https://oreil.ly/hFcCd)'
- en: '[Deploy to Kubernetes cluster Action](https://oreil.ly/7PaeU)'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[部署到Kubernetes集群的动作](https://oreil.ly/7PaeU)'
- en: ^([1](ch06.xhtml#idm45120836250416-marker)) See the [Tekton documentation](https://oreil.ly/NxpqN).
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.xhtml#idm45120836250416-marker)) 参阅[Tekton文档](https://oreil.ly/NxpqN)。
