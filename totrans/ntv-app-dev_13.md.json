["```\n{ name : \"Mike\" }\n```", "```\nAuthor author = new Author();\nauthor.setName(\"Mike\");\nLog.d(\"MyTag\", new Gson().toJson(author));\n```", "```\npublic class Author {\n  @SerializedName(\"name\")\n  private String mName;\n  public String getName() {\n    return mName;\n  }\n  public void setName(String name) {\n    mName = name;\n  }\n}\n```", "```\nString json = \"{name:'Mike'}\";\nAuthor author = new Gson().fromJson(json, Author.class);\nLog.d(\"MyTag\", author.getName());\n```", "```\nstruct Author {\n\tlet name: String\n}\n```", "```\n{ \"name\": \"Mike\" }\n```", "```\nstruct Author: Codable {\n    let name: String\n}\n\nlet author = Author(name: \"Mike\")\nlet rawData = try? JSONEncoder().encode(author)\n```", "```\nlet rawJson = String(\"{\\\"name\\\":\\\"Mike\\\"}\").data(using: .utf8)!\nlet author = try? JSONDecoder().decode(Author.self, from: rawJson)\n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<author type=\"human\">\n\t<name>Mike</name>\n</author>\n```", "```\nclass SomeObject: NSObject {\n    func parseSomeXML() {\n        let xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n <author type=\\\"human\\\"><name>Mike</name></author>\"\n        let rawData = xml.data(using: .utf8)!\n\n        let parser = XMLParser(data: rawData)\n        parser.delegate = self;\n        parser.parse()\n    }\n}\n```", "```\nfunc parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?,\n  qualifiedName qName: String?, attributes attributeDict: [String : String] = [:]) {\n    if elementName == \"author\" {\n        author = Author()\n        if let type = attributeDict[\"type\"] {\n            author?.type = type\n        }\n    }\n}\n```", "```\nfunc parser(_ parser: XMLParser, foundCharacters string: String) {\n    characters += string\n}\n```", "```\nfunc parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?,\n  qualifiedName qName: String?) {\n    if elementName == \"name\" {\n        author?.name = characters\n    }\n    characters = \"\"\n}\n```", "```\nfunc parserDidEndDocument(_ parser: XMLParser) {\n    print(author.name)\n    print(author.type)\n}\n```", "```\nstruct Author {\n    var name: String?\n    var type: String?\n}\n\nclass SomeObject: NSObject {\n    var author: Author?\n    var characters: String = \"\"\n\n    func parseSomeXML() {\n        let xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n <author type=\\\"human\\\"><name>Mike</name></author>\"\n        let rawData = xml.data(using: .utf8)!\n\n        let parser = XMLParser(data: rawData)\n        parser.delegate = self;\n        parser.parse()\n    }\n}\nextension SomeObject: XMLParserDelegate {\n    func parser(_ parser: XMLParser, didStartElement elementName: String,\n      namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict:\n      [String : String] = [:]) {\n        if elementName == \"author\" {\n            author = Author()\n            if let type = attributeDict[\"type\"] {\n                author?.type = type\n            }\n        }\n    }\n\n    func parser(_ parser: XMLParser, foundCharacters string: String) {\n        characters += string\n    }\n\n    func parser(_ parser: XMLParser, didEndElement elementName: String,\n      namespaceURI: String?,\n      qualifiedName qName: String?) {\n        if elementName == \"name\" {\n            author?.name = characters\n        }\n        characters = \"\"\n    }\n\n    func parserDidEndDocument(_ parser: XMLParser) {\n        print(author?.name)\n        print(author?.type)\n    }\n}\n```", "```\n// Our .plist file on the filesystem\nlet plistURL = URL(...)!\nguard let plistData = Data(contentsOf: plistURL) else { return }\n\nlet object = PropertyListDecoder().decode(Author.self, from: plistData)\n```", "```\nlet author = Author(name: \"Mike\")\nlet data = try? PropertyListEncoder().encode(author)\ndata?.write(to: ...) // save the plist file to the device\n```", "```\nlet author = Author(name: \"Mike\")\n\nlet encoder = PropertyListEncoder()\nencoder.outputFormat = .binary // set the output type to binary data\nlet data = try? encoder.encode(author)\n\ndata?.write(to: ...) // save the plist file to the device\n```", "```\nstruct Author: Codable {\n    let name: String\n\n    private enum CodingKeys: String, CodingKey {\n        case name = \"something\"\n    }\n}\n\nlet author = Author(name: \"Mike\")\nlet rawData = try? JSONEncoder().encode(author)\n```", "```\n{ \"something\" : \"Mike\" }\n```"]