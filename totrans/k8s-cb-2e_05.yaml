- en: Chapter 5\. Working with Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discuss how pods communicate within the cluster, how applications
    discover each other, and how to expose pods so that they can be accessed from
    outside of the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: The resource we will be using here is called a Kubernetes [*service*](https://oreil.ly/BGn9e),
    as depicted in [Figure 5-1](#svc-concept).
  prefs: []
  type: TYPE_NORMAL
- en: '![The service concept](assets/kcb2_0501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. The Kubernetes service concept
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A service provides a stable virtual IP (VIP) address for a set of pods. Though
    pods may come and go, services allow clients to reliably discover and connect
    to the containers running in the pods by using the VIP. The “virtual” in VIP means
    it’s not an actual IP address connected to a network interface; its purpose is
    purely to forward traffic to one or more pods. Keeping the mapping between the
    VIPs and the pods up to date is the job of `kube-proxy`, a process that runs on
    every node on the cluster. This `kube-proxy` process queries the API server to
    learn about new services in the cluster and updates the node’s iptables rules
    (iptables) accordingly to provide the necessary routing information.
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 Creating a Service to Expose Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to provide a stable and reliable way to discover and access your application
    within the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Kubernetes service for the pods that make up your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you created an `nginx` deployment with `kubectl create deployment
    nginx --image nginx:1.25.2`, you can automatically create a `Service` object using
    the `kubectl expose` command, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then see the object appear when you list the `Service`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access this service via your browser, run a proxy in a separate terminal,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then open your browser with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You should see the NGINX default page.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your service does not seem to be working properly, check the labels used
    in the selector and verify that a set of endpoints is being populated with `kubectl
    get endpoints` `*<service-name>*`. If not, this most likely means that your selector
    is not finding any matching pods.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wanted to create a `Service` object by hand for the same `nginx` deployment,
    you would write the following YAML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The one thing to pay attention to in this YAML file is the *selector*, which
    is used to select all the pods that make up this microservice abstraction. Kubernetes
    uses the `Service` object to dynamically configure the iptables on all the nodes
    to be able to send the network traffic to the containers that make up the microservice.
    The selection is done as a label query (see [Recipe 7.6](ch07.html#labels)) and
    results in a list of endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Pod supervisors, such as `Deployments` or `ReplicationSets`, operate orthogonally
    to `Services`. Both supervisors and `Services` find the pods they’re looking after
    by using labels, but they have different jobs to do: supervisors monitor the health
    of and restart pods, and `Services` make them accessible in a reliable way.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [`Service` documentation](https://oreil.ly/BGn9e)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes tutorial [“Using a Service to Expose Your App”](https://oreil.ly/NVOhU)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.2 Verifying the DNS Entry of a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have created a service (see [Recipe 5.1](#simple_service)) and want to verify
    that your Domain Name System (DNS) registration is working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default Kubernetes uses `ClusterIP` as the service type, and that exposes
    the service on a cluster-internal IP. If the DNS cluster add-on is available and
    working properly, you can access the service via a fully qualified domain name
    (FQDN) in the form of `$SERVICENAME.$NAMESPACE.svc.cluster.local`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that this is working as expected, get an interactive shell within
    a container in your cluster. The easiest way to do this is to use `kubectl run`
    with the `busybox` image, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The IP address returned for the service should correspond to its cluster IP.
  prefs: []
  type: TYPE_NORMAL
- en: Type `exit` and hit Enter to leave the container.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, a DNS query will be scoped to the same namespace as the pod making
    the request. If, in the previous example, you run the `busybox` pod in a different
    namespace from the one running `nginx`, by default the lookup won’t return any
    results. To specify the correct namespace, use the syntax `*<service-name>*``.``*<namespace>*`;
    for example, `nginx.staging`.
  prefs: []
  type: TYPE_NORMAL
- en: 5.3 Changing the Type of a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have an existing service, say of type `ClusterIP`, as discussed in [Recipe
    5.2](#dns_service), and you want to change its type so that you can expose your
    application as a `NodePort` or via a cloud provider load balancer using the `LoadBalancer`
    service type.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `kubectl edit` command along with your preferred editor to change the
    service type. Suppose you have a manifest file called *simple-nginx-svc.yaml*
    with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `webserver` service and query for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, change the service type to, say, `NodePort`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will download the current spec the API server has of the service
    and open it in your default editor. Notice the area in bold toward the end, where
    we’ve changed the type from `ClusterIP` to `NodePort`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you’ve saved the edits (changing `type` to `NodePort`), you can verify
    the updated service, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that you can change the service type to whatever suits your use case; however,
    be aware of the implications of certain types, like `LoadBalancer`, which may
    trigger the provisioning of public cloud infrastructure components that can be
    costly if used without awareness and/or monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Details on the different types of [Kubernetes services](https://oreil.ly/r63eA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.4 Deploying an Ingress Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy an ingress controller to learn about `Ingress` objects. `Ingress`
    objects are of interest to you because you want to provide access to your applications
    running in Kubernetes from outside your Kubernetes cluster; however, you do not
    want to create a `NodePort`- or `LoadBalancer`-type service.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ingress controller acts as a reverse proxy and load balancer. It routes traffic
    from outside the cluster and load-balances it to the pods running inside the platform,
    allowing you deploy multiple applications on the cluster, each addressable by
    hostname and/or URI path.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `Ingress` objects (discussed in [Recipe 5.5](#ingress)) to take effect
    and provide a route from outside the cluster to your pods, you need to deploy
    an ingress controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On Minikube, you can simply enable the `ingress` add-on like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After a minute or less, a new pod will start in the newly created `ingress-nginx`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You are now ready to create `Ingress` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NGINX is one of the ingress controllers officially supported by the Kubernetes
    project, but there are many other [open source and commercial solutions](https://oreil.ly/eukmq)
    that support the ingress specification, many of which provide broader API management
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the new Kubernetes [Gateway API specification](https://oreil.ly/Y27m-)
    is emerging as a future replacement for the ingress specification and is already
    supported by many third-party gateway providers. If you are just starting out
    with ingress, it is worth considering the Gateway API as a more future-proof starting
    point.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Kubernetes `Ingress` documentation](https://oreil.ly/9xoks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NGINX-based ingress controller](https://oreil.ly/691Lx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Minikube’s `ingress-dns` add-on](https://oreil.ly/To14r)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.5 Making Services Accessible from Outside the Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to access a Kubernetes service by URI path from outside of the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use an ingress controller (see [Recipe 5.4](#ingress_controller)), configured
    by creating `Ingress` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you want to deploy a simple service that can be invoked and returns
    “Hello, world!” Start by creating the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then expose the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that all these resources were correctly created with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the manifest of an `Ingress` object that configures the URI
    path `/web` to the `hello-app` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now you can see the `Ingress` object created for NGINX in your Kubernetes dashboard
    ([Figure 5-2](#nginx-ingress-screenshot)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the nginx ingress object](assets/kcb2_0502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-2\. NGINX `Ingress` object
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'From the Kubernetes dashboard, you can see that NGINX will be available via
    the IP address 192.168.49.2 (yours may differ). Based on this information, you
    can access NGINX from outside the cluster at the `/web` URI path as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative to using the dashboard to see your service IPs is to use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, ingress works as depicted in [Figure 5-3](#ingress-concept): the
    ingress controller listens to the `/ingresses` endpoint of the API server, learning
    about new rules. It then configures the routes so that external traffic lands
    at a specific (cluster-internal) service—`service1` on port 9876 in the depicted
    example.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ingress concept](assets/kcb2_0503.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-3\. Ingress concept
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *kubernetes/ingress-nginx* repo on [GitHub](https://oreil.ly/guulG)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
