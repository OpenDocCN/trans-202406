- en: Chapter 5\. Working with Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用服务工作
- en: In this chapter, we discuss how pods communicate within the cluster, how applications
    discover each other, and how to expose pods so that they can be accessed from
    outside of the cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Pod在集群内部如何通信，应用程序如何发现彼此，以及如何暴露Pod以便从集群外部访问。
- en: The resource we will be using here is called a Kubernetes [*service*](https://oreil.ly/BGn9e),
    as depicted in [Figure 5-1](#svc-concept).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的资源称为Kubernetes [*服务*](https://oreil.ly/BGn9e)，如图[5-1](#svc-concept)所示。
- en: '![The service concept](assets/kcb2_0501.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![服务概念](assets/kcb2_0501.png)'
- en: Figure 5-1\. The Kubernetes service concept
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-1\. Kubernetes服务概念
- en: A service provides a stable virtual IP (VIP) address for a set of pods. Though
    pods may come and go, services allow clients to reliably discover and connect
    to the containers running in the pods by using the VIP. The “virtual” in VIP means
    it’s not an actual IP address connected to a network interface; its purpose is
    purely to forward traffic to one or more pods. Keeping the mapping between the
    VIPs and the pods up to date is the job of `kube-proxy`, a process that runs on
    every node on the cluster. This `kube-proxy` process queries the API server to
    learn about new services in the cluster and updates the node’s iptables rules
    (iptables) accordingly to provide the necessary routing information.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 服务为一组Pod提供了稳定的虚拟IP（VIP）地址。尽管Pod可能会动态变化，但服务允许客户端通过VIP可靠地发现和连接运行在Pod中的容器。VIP中的“虚拟”意味着它不是连接到网络接口的实际IP地址；它的目的纯粹是将流量转发到一个或多个Pod。保持VIP与Pod之间的映射信息更新是`kube-proxy`的工作，这是运行在集群每个节点上的一个进程。`kube-proxy`通过查询API服务器来了解集群中的新服务，并相应地更新节点的iptables规则，以提供必要的路由信息。
- en: 5.1 Creating a Service to Expose Your Application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1 创建一个暴露应用程序的服务
- en: Problem
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to provide a stable and reliable way to discover and access your application
    within the cluster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望为在集群内部发现和访问您的应用程序提供一种稳定和可靠的方式。
- en: Solution
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create a Kubernetes service for the pods that make up your application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为构成您的应用程序的Pod创建一个Kubernetes服务。
- en: 'Assuming you created an `nginx` deployment with `kubectl create deployment
    nginx --image nginx:1.25.2`, you can automatically create a `Service` object using
    the `kubectl expose` command, like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您使用`kubectl create deployment nginx --image nginx:1.25.2`创建了一个`nginx`部署，您可以使用`kubectl
    expose`命令自动创建一个`Service`对象，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will then see the object appear when you list the `Service`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当您列出`Service`时，您将看到对象出现：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'To access this service via your browser, run a proxy in a separate terminal,
    like so:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过浏览器访问此服务，请在单独的终端中运行代理，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then open your browser with this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令在浏览器中打开：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see the NGINX default page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到NGINX的默认页面。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If your service does not seem to be working properly, check the labels used
    in the selector and verify that a set of endpoints is being populated with `kubectl
    get endpoints` `*<service-name>*`. If not, this most likely means that your selector
    is not finding any matching pods.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务似乎无法正常工作，请检查选择器中使用的标签，并验证使用`kubectl get endpoints` `*<service-name>*`是否填充了一组端点。如果没有，则很可能是您的选择器未找到任何匹配的Pod。
- en: 'If you wanted to create a `Service` object by hand for the same `nginx` deployment,
    you would write the following YAML file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想手动为相同的`nginx`部署创建一个`Service`对象，您可以编写以下YAML文件：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The one thing to pay attention to in this YAML file is the *selector*, which
    is used to select all the pods that make up this microservice abstraction. Kubernetes
    uses the `Service` object to dynamically configure the iptables on all the nodes
    to be able to send the network traffic to the containers that make up the microservice.
    The selection is done as a label query (see [Recipe 7.6](ch07.html#labels)) and
    results in a list of endpoints.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个YAML文件中需要注意的一点是*选择器*，它用于选择构成这个微服务抽象的所有Pod。Kubernetes使用`Service`对象动态配置所有节点上的iptables，以便将网络流量发送到构成微服务的容器。选择是通过标签查询来完成的（参见[Recipe
    7.6](ch07.html#labels)），并导致一个端点列表。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Pod supervisors, such as `Deployments` or `ReplicationSets`, operate orthogonally
    to `Services`. Both supervisors and `Services` find the pods they’re looking after
    by using labels, but they have different jobs to do: supervisors monitor the health
    of and restart pods, and `Services` make them accessible in a reliable way.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Pod的监管者，如`Deployments`或`ReplicationSets`，与`Services`的运作方式是正交的。虽然两者都通过标签找到它们管理的Pod，但它们的任务不同：监管者监控并重新启动Pod的健康状态，而`Services`则以可靠的方式使它们可访问。
- en: See Also
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [`Service` documentation](https://oreil.ly/BGn9e)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [`Service`文档](https://oreil.ly/BGn9e)
- en: Kubernetes tutorial [“Using a Service to Expose Your App”](https://oreil.ly/NVOhU)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes教程[“使用服务来暴露您的应用程序”](https://oreil.ly/NVOhU)
- en: 5.2 Verifying the DNS Entry of a Service
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2 验证服务的DNS条目
- en: Problem
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have created a service (see [Recipe 5.1](#simple_service)) and want to verify
    that your Domain Name System (DNS) registration is working properly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了一个服务（参见[Recipe 5.1](#simple_service)），并希望验证您的域名系统（DNS）注册是否正常工作。
- en: Solution
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: By default Kubernetes uses `ClusterIP` as the service type, and that exposes
    the service on a cluster-internal IP. If the DNS cluster add-on is available and
    working properly, you can access the service via a fully qualified domain name
    (FQDN) in the form of `$SERVICENAME.$NAMESPACE.svc.cluster.local`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Kubernetes使用`ClusterIP`作为服务类型，并将服务暴露在集群内部IP上。如果DNS集群附加组件可用且正常工作，则可以通过形如`$SERVICENAME.$NAMESPACE.svc.cluster.local`的完全限定域名(FQDN)访问服务。
- en: 'To verify that this is working as expected, get an interactive shell within
    a container in your cluster. The easiest way to do this is to use `kubectl run`
    with the `busybox` image, like so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证这是否按预期工作，请在集群中的容器内获取交互式shell。最简单的方法是使用`kubectl run`命令和`busybox`镜像，如下所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The IP address returned for the service should correspond to its cluster IP.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的IP地址应对应于其集群IP。
- en: Type `exit` and hit Enter to leave the container.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`exit`并按Enter键离开容器。
- en: Discussion
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: By default, a DNS query will be scoped to the same namespace as the pod making
    the request. If, in the previous example, you run the `busybox` pod in a different
    namespace from the one running `nginx`, by default the lookup won’t return any
    results. To specify the correct namespace, use the syntax `*<service-name>*``.``*<namespace>*`;
    for example, `nginx.staging`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，DNS查询将限定在与发出请求的Pod相同的命名空间内。例如，在前面的示例中，如果你在运行`nginx`的命名空间与运行`busybox`的命名空间不同，那么默认情况下查找将不会返回任何结果。要指定正确的命名空间，请使用以下语法：`*<service-name>*``.``*<namespace>*`，例如，`nginx.staging`。
- en: 5.3 Changing the Type of a Service
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.3 更改服务类型
- en: Problem
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an existing service, say of type `ClusterIP`, as discussed in [Recipe
    5.2](#dns_service), and you want to change its type so that you can expose your
    application as a `NodePort` or via a cloud provider load balancer using the `LoadBalancer`
    service type.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个现有的服务，比如类型为`ClusterIP`，如[Recipe 5.2](#dns_service)所述，并且您希望将其类型更改为`NodePort`或通过云提供商负载均衡器使用`LoadBalancer`服务类型来暴露应用程序。
- en: Solution
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl edit` command along with your preferred editor to change the
    service type. Suppose you have a manifest file called *simple-nginx-svc.yaml*
    with this content:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl edit`命令及您喜欢的编辑器更改服务类型。假设您有一个名为*simple-nginx-svc.yaml*的清单文件，内容如下：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create the `webserver` service and query for it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`webserver`服务并查询它：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, change the service type to, say, `NodePort`, like so:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将服务类型更改为`NodePort`，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will download the current spec the API server has of the service
    and open it in your default editor. Notice the area in bold toward the end, where
    we’ve changed the type from `ClusterIP` to `NodePort`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将下载API服务器当前的服务规范，并在你的默认编辑器中打开它。请注意文末的粗体区域，在这里我们已经从`ClusterIP`类型更改为`NodePort`类型：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once you’ve saved the edits (changing `type` to `NodePort`), you can verify
    the updated service, like so:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 保存编辑（将`type`更改为`NodePort`）后，您可以验证更新的服务，如下所示：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Note that you can change the service type to whatever suits your use case; however,
    be aware of the implications of certain types, like `LoadBalancer`, which may
    trigger the provisioning of public cloud infrastructure components that can be
    costly if used without awareness and/or monitoring.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以根据您的用例更改服务类型；但是，请注意某些类型（例如`LoadBalancer`）可能触发公共云基础设施组件的配置，如果在没有意识和/或监控的情况下使用可能会很昂贵。
- en: See Also
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Details on the different types of [Kubernetes services](https://oreil.ly/r63eA)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于不同类型的[Kubernetes服务](https://oreil.ly/r63eA)的详细信息
- en: 5.4 Deploying an Ingress Controller
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy an ingress controller to learn about `Ingress` objects. `Ingress`
    objects are of interest to you because you want to provide access to your applications
    running in Kubernetes from outside your Kubernetes cluster; however, you do not
    want to create a `NodePort`- or `LoadBalancer`-type service.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ingress controller acts as a reverse proxy and load balancer. It routes traffic
    from outside the cluster and load-balances it to the pods running inside the platform,
    allowing you deploy multiple applications on the cluster, each addressable by
    hostname and/or URI path.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'For `Ingress` objects (discussed in [Recipe 5.5](#ingress)) to take effect
    and provide a route from outside the cluster to your pods, you need to deploy
    an ingress controller:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On Minikube, you can simply enable the `ingress` add-on like so:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After a minute or less, a new pod will start in the newly created `ingress-nginx`
    namespace:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You are now ready to create `Ingress` objects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NGINX is one of the ingress controllers officially supported by the Kubernetes
    project, but there are many other [open source and commercial solutions](https://oreil.ly/eukmq)
    that support the ingress specification, many of which provide broader API management
    capabilities.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the new Kubernetes [Gateway API specification](https://oreil.ly/Y27m-)
    is emerging as a future replacement for the ingress specification and is already
    supported by many third-party gateway providers. If you are just starting out
    with ingress, it is worth considering the Gateway API as a more future-proof starting
    point.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Kubernetes `Ingress` documentation](https://oreil.ly/9xoks)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NGINX-based ingress controller](https://oreil.ly/691Lx)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Minikube’s `ingress-dns` add-on](https://oreil.ly/To14r)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.5 Making Services Accessible from Outside the Cluster
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to access a Kubernetes service by URI path from outside of the cluster.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use an ingress controller (see [Recipe 5.4](#ingress_controller)), configured
    by creating `Ingress` objects.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you want to deploy a simple service that can be invoked and returns
    “Hello, world!” Start by creating the deployment:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then expose the service:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Verify that all these resources were correctly created with the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the manifest of an `Ingress` object that configures the URI
    path `/web` to the `hello-app` service:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now you can see the `Ingress` object created for NGINX in your Kubernetes dashboard
    ([Figure 5-2](#nginx-ingress-screenshot)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the nginx ingress object](assets/kcb2_0502.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Figure 5-2\. NGINX `Ingress` object
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'From the Kubernetes dashboard, you can see that NGINX will be available via
    the IP address 192.168.49.2 (yours may differ). Based on this information, you
    can access NGINX from outside the cluster at the `/web` URI path as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Discussion
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative to using the dashboard to see your service IPs is to use the
    following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令而不是使用仪表板查看您的服务 IP 地址的替代方法：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In general, ingress works as depicted in [Figure 5-3](#ingress-concept): the
    ingress controller listens to the `/ingresses` endpoint of the API server, learning
    about new rules. It then configures the routes so that external traffic lands
    at a specific (cluster-internal) service—`service1` on port 9876 in the depicted
    example.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，Ingress 的工作原理如 [图 5-3](#ingress-concept) 所示：Ingress 控制器监听 API 服务器的 `/ingresses`
    端点，了解新规则。然后配置路由，使外部流量到达特定的（集群内部）服务，在所示示例中是端口 9876 上的 `service1`。
- en: '![Ingress concept](assets/kcb2_0503.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Ingress 概念](assets/kcb2_0503.png)'
- en: Figure 5-3\. Ingress concept
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-3\. Ingress 概念
- en: See Also
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *kubernetes/ingress-nginx* repo on [GitHub](https://oreil.ly/guulG)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 上的 *kubernetes/ingress-nginx* 仓库](https://oreil.ly/guulG)'
