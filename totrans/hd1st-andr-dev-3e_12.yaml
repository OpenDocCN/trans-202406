- en: 'Chapter 10\. View Binding: *Bound Together*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0403-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**It’s time to wave farewell to findViewById().**'
  prefs: []
  type: TYPE_NORMAL
- en: As you’ve probably noticed by now, the more views you have and the more interactive
    your apps become, **the more calls you need to make to *findViewById()***. And
    if you’re getting tired of typing the code for this method every time you want
    to work with a view, *you’re not alone*. In this chapter, you’ll discover **how
    to make *findViewById()* a thing of the past** by implementing **view binding**.
    You’ll find out how to apply this technique to both **activity and fragment code**,
    and you’ll learn why this approach is a **safer, more efficient** way of accessing
    your layout’s views. Let’s get started…
  prefs: []
  type: TYPE_NORMAL
- en: Behind the scenes of findViewById()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you already know, each time you want to interact with a view in your activity
    or fragment code, you first call `findViewById()` to get a reference to it. The
    following activity code, for example, gets a reference to a `Button` with the
    ID `start_button` so that it can respond to clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0404-01.png)'
  prefs: []
  type: TYPE_IMG
- en: But what actually happens when `findViewById()` gets called?
  prefs: []
  type: TYPE_NORMAL
- en: findViewById() looks for a view in the view hierarchy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following things happen when the above code runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The MainActivity’s layout file (activity_main.xml) is inflated into a hierarchy
    of View objects.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the file describes a linear layout that contains a text view and a button,
    the layout gets inflated into `LinearLayout`, `TextView`, and `Button` objects.
    The `LinearLayout` is the root view of this hierarchy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0404-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Android searches the View hierarchy for a View with a matching ID.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re using `findViewById<Button>(R.id.start_button)`, so Android searches the
    view hierarchy for a `View` whose ID is `start_button`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0405-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Android returns the topmost View with this ID in the hierarchy, and casts
    it to the type specified in the call to findViewById().**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, `findViewById<Button>(R.id.start_button)` finds the first `View` in the
    hierarchy with an ID of `start_button`, and casts it as a `Button`. `MainActivity`
    can now interact with it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0405-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: So each time you use `findViewById()`, Android searches the layout’s hiearchy
    for a `View` with a matching ID, and casts it to the specified type.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a downside to findViewById()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though `findViewById()` is a useful way of getting references to views,
    it has several disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It makes your code longer.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The more views you need to interact with, the more calls you need to make. This
    can lead to longer code that’s harder to read.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It’s inefficient.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time you call `findViewById()`, Android has to search the layout’s hierarchy
    for a view with a matching ID. This is inefficient, particularly if your layout
    has many views in a deep hierarchy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0406-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/star.png) **It’s not null-safe.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findViewById()` is used to search for a view at runtime, which means the compiler
    can’t check for common errors.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It’s possible, for instance, to pass `findViewById()` an invalid ID: one that
    doesn’t exist in the layout. If you try using:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: and the layout doesn’t include a `View` with an ID of `message`, a null pointer
    exception will get thrown, and the app will crash.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It’s not type-safe.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another problem is that the compiler can’t check that you’ve specified the `View`’s
    type correctly, which can lead to a class cast exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Imagine you have a radio group named `pizza_group`, and you try to get a reference
    to it using this code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even though the `ChipGroup` type is specified instead of `RadioGroup`, the code
    still compiles. The compiler doesn’t check whether the type is correct when it
    builds the code. When the app runs, it throws a class cast exception, and the
    app crashes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0406-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So if `findViewById()` has these disadvantages, what’s the alternative?
  prefs: []
  type: TYPE_NORMAL
- en: View binding to the rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An alternative to calling `findViewById()` each time you need a `View` reference
    is to use **view binding**. With view binding, you set up a binding object (which
    you’ll find out more about later) and use this to access each view.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0407-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As an example, suppose you have a layout that includes a button with an ID
    of `start_button`. If you wanted to make it do something when clicked, you could
    get a reference to it using `findViewById()` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0407-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With view binding, you no longer need to call `findViewById()` to get a reference
    to the button. Instead, you simply use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0407-03.png)'
  prefs: []
  type: TYPE_IMG
- en: This code does the same thing, but it’s simpler to write, and can make your
    code shorter and easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: View binding is safer and more efficient than findViewById()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you use view binding, Android no longer needs to search your layout’s
    view hierarchy for a matching `View`: it simply uses the binding object to access
    it. This makes it much more efficient than using `findViewById()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage is **the compiler prevents null pointer and class cast exceptions
    at compile time**. As you access views using a binding object, the compiler knows
    which views are available and their types. It won’t let you reference a view that
    doesn’t exist, and you no longer have to cast it to a specific type because the
    compiler already knows what this is. Your code is much safer as a result.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know about the benefits of using view binding, let’s find out how
    to use it.
  prefs: []
  type: TYPE_NORMAL
- en: '**View binding is a type-safe, more efficient alternative to calling findViewById().**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here’s how we’ll use view binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'View binding code is slightly different for activities and fragments, so in
    this chapter we’re going to show you the code for both. Here are the steps we’ll
    go through:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add view binding to the Stopwatch app’s activity code.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.xhtml#the_activity_lifecyclecolon_being_an_act), we built
    a Stopwatch app to teach you about Android’s activity lifecycle methods. We’ll
    revisit this app, and update its activity code so it uses view binding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0408-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Add view binding to the Bits and Pizzas app’s fragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll then go back to the Bits and Pizzas app we created in the previous chapter
    and show you how to implement view binding in its fragment code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0408-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: The Stopwatch app revisited
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0409-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll begin by changing up the Stopwatch app you created in [Chapter 5](ch05.xhtml#the_activity_lifecyclecolon_being_an_act),
    so open the project for this app now.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may recall, the Stopwatch app displays a simple stopwatch that you can
    start, pause, and reset with the help of three buttons. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0409-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The app uses a single activity—`MainActivity`—which has a layout file named
    *activity_main.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0409-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each time it needs to interact with one of its views, it calls `findViewById()`
    to get a reference to it. To make its Start button respond to clicks, for example,
    it uses code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let’s find out how to update the app so that it uses view binding instead.
  prefs: []
  type: TYPE_NORMAL
- en: Enable view binding in the app build.gradle file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0410-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use view binding, you first need to enable it in the `android` section of
    the app’s *build.gradle* file. The code to enable view binding looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0410-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to use view binding in the Stopwatch app, so make sure that you
    add the above change to the file *Stopwatch/app/build.gradle*. Then choose the
    Sync Now option to sync this change with the rest of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Remember to sync this change, or you’ll get errors in your code when you try
    to update the activity code.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling view binding generates code for each layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you enable view binding, it automatically creates a binding class for
    each of the layout files in your app. The Stopwatch app, for example, contains
    a layout file named *activity_main.xml*, so when you enable view binding, it automatically
    generates a binding class named `ActivityMainBinding`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0410-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Each binding class includes a property for each view in the layout that has
    an ID. The layout *activity_main.xml*, for example, includes a button with an
    ID of `start_button`, so the binding class `ActivityMainBinding` includes a property
    named `startButton` whose type is `Button`.
  prefs: []
  type: TYPE_NORMAL
- en: The binding classes are important because **the layout’s views are bound to
    the binding class properties**. Instead of calling `findViewById()` each time
    you need a view reference, you simply interact with that view’s property in the
    binding class.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve enabled view binding in the Stopwatch app, let’s see how to use
    it in the code for `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0410-05.png)'
  prefs: []
  type: TYPE_IMG
- en: How to add view binding to an activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code to make an activity use view binding is virtually identical for every
    activity you create. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0411-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above code declares a property named `binding` whose type is `ActivityMainBinding`.
    This property gets set in the activity’s `onCreate()` method using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0411-03.png)'
  prefs: []
  type: TYPE_IMG
- en: This calls `ActivityMainBinding`’s `inflate()` method, which creates an `ActivityMainBinding`
    object that’s linked to the activity’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0411-04.png)'
  prefs: []
  type: TYPE_IMG
- en: gets a reference to the `binding` object’s root view, and uses the `setContentView()`
    method to display it.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve added view binding to an activity in this way, you can use the `binding`
    property to interact with the layout’s views. Let’s do this now.
  prefs: []
  type: TYPE_NORMAL
- en: Use the binding property to interact with views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0412-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The current code for `MainActivity` interacts with its views in order to control
    the stopwatch and make its buttons respond to clicks. We can update this code
    so that instead of making calls to `findViewById()`, it accesses the views using
    the activity’s `binding` property.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, let’s use `MainActivity`’s Start button as an example.
  prefs: []
  type: TYPE_NORMAL
- en: The layout code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Start button is defined in *activity_main.xml* using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0412-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it has an ID of `start_button`.
  prefs: []
  type: TYPE_NORMAL
- en: The activity code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MainActivity` makes the button respond to clicks using `findViewById()` like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With view binding, we can change the code to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0412-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The code does the same thing as the original code, but it uses `MainActivity`’s
    `binding` property to interact with the button.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s update the full code for `MainActivity` so it uses view binding.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated code for `MainActivity`; update the code for *MainActivity.kt*
    so that it includes the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0413-02.png)![image](Images/f0414-02.png)![image](Images/f0415-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are all the changes we need to make to the Stopwatch app to get it to
    use view binding. Let’s run through what happens when the code runs, and take
    it for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: What the code does
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When the app launches, MainActivity gets created.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It includes an `ActivityMainBinding` property named `binding`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0416-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When MainActivity’s onCreate() method runs, it assigns an ActivityMainBinding
    object to the binding property.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `binding` property gets set in `onCreate()` because this is when `MainActivity`
    first has access to views.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0416-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The ActivityMainBinding object includes a property for each view in the layout
    with an ID.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The layout file *activity_main.xml* includes a button with an ID of `start_button`,
    for example, so the `ActivityMainBinding` object includes a `Button` property
    named `startButton`, which provides access to this view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0416-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity uses the binding property to access its views.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It specifies how the Start button should respond to clicks, for example, by
    calling the `startButton` property’s `setOnClickListener()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0416-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, it works in the same way as it did before. When we click
    on the Start button, the stopwatch starts, and it pauses and gets reset when we
    click on the Pause and Reset buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0417-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference, however, is that the `MainActivity` now uses view binding to
    intract with its views instead of making calls to `findViewById()`.
  prefs: []
  type: TYPE_NORMAL
- en: Activity Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: An activity named `MainActivity` uses the file *activity_main.xml* for its layout.
    The layout includes a `Button` (with an ID of `pow_button`) and a `TextView` {with
    an ID of `pow_text`). When clicked, the `Button` needs to make the `TextView`
    display the text “Pow!”
  prefs: []
  type: TYPE_NORMAL
- en: Somebody used fridge magnets to write the `MainActivity` code, but a freak kitchen
    sandstorm dislodged some of the magnets. Can you piece the code back together
    again?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0418-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Fragments can use view binding too (but the code’s a little different)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0419-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve learned how to implement view binding in your activity code,
    lets find out how to use it in fragments. As we said earlier, the code for fragments
    is slightly different to the code for activities.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s implement view binding in the Bits and Pizzas app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll explore how view binding for fragments works by changing up the Bits and
    Pizzas app you created in [Chapter 9](ch09.xhtml#material_viewscolon_a_material_world).
    Open the project for this app now.
  prefs: []
  type: TYPE_NORMAL
- en: As we’re sure you remember, the Bits and Pizzas app uses Material views such
    as collapsing toolbars and FABs to provide an interactive UI for a pizza app.
    The UI is defined by the app’s fragment, which is named `FragmentOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0419-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for `FragmentOrder` includes many calls to `findViewById()`. Let’s
    find out how to use view binding to replace these.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0419-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable view binding for Bits and Pizzas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As before, to use view binding in the Bits and Pizzas project, you first need
    to enable it in the app’s *build.gradle* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *BitsandPizzas/app/build.gradle*, and add the following lines
    to the `android` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0420-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Then choose the Sync Now option to sync the change with the rest of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Binding classes are generated for every layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as with the Stopwatch app, enabling view binding in the Bits and Pizzas
    app automatically creates a binding class for each of the app’s layout files.
    This app contains two layout files—*activity_main.xml* and *fragment_order.xml*—so
    two binding classes are generated: `ActivityMainBinding` and `FragmentOrderBinding`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0420-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As before, each binding class includes a property for each view in its layout
    with an ID. The layout *fragment_order.xml*, for example, includes a radio group
    with an ID of `pizza_group`, so the binding class `FragmentOrderBinding` includes
    a property named `pizzaGroup` whose type is `RadioGroup`.
  prefs: []
  type: TYPE_NORMAL
- en: In the Bits and Pizzas app, the only code that interacts with views is in *OrderFragment.kt*,
    so we only need to update this file in order to use view binding.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0420-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Fragment view binding code is a little different
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0421-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As we said earlier, the view binding code you use in a fragment is slightly
    different to the code you use in an activity. Before we show you what fragment
    view binding code looks like, we’re going to dig a little deeper, and show you
    why the code is different.
  prefs: []
  type: TYPE_NORMAL
- en: Activities can access views from onCreate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you already know, an activity first gets access to its layout when its `onCreate()`
    method runs. This is the first method in the activity’s lifecycle, and it’s used
    to inflate the layout (or bind to it with view binding) and perform any initial
    setup. If a button needs to respond to clicks, for example, the activity assigns
    an `OnClickListener` to it using code in its `onCreate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The activity continues to have access to its layout until its `onDestroy()`
    method has run. This is the final method in the activity’s lifecycle, and the
    activity is destroyed after this method has finished running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the activity has access to the views in its layout from `onCreate()`
    to `onDestroy()`, it can interact with them in any of its methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0421-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s what happens with activities, but for fragments the situation’s a little
    different. Let’s see how.
  prefs: []
  type: TYPE_NORMAL
- en: Fragments can access views from onCreateView() to onDestroyView()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, a fragment first gets access to its layout when its `onCreateView()`
    method runs. This gets called when an activity needs access to the fragment’s
    layout, so it’s used to inflate the layout and perform any initial setup such
    as setting `OnClickListener`s.
  prefs: []
  type: TYPE_NORMAL
- en: '`onCreateView()`, however, isn’t the first method in the fragment’s lifecycle.
    There are other methods, such as `onCreate()`, that run before `onCreateView()`,
    so they can’t interact with the fragment’s views.'
  prefs: []
  type: TYPE_NORMAL
- en: After its `onCreateView()` method has run, the fragment continues to have access
    to its views until its `onDestroyView()` method has finished running. This gets
    called when the activity no longer needs the fragment’s layout, which may be because
    the activity needs to navigate to a different fragment, or it’s being destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: '`onDestroyView()`, however, isn’t the final method in the fragment’s lifecycle.
    There are other methods, such as `onDestroy(),` that run after `onDestroyView()`,
    so these can’t interact with the fragment’s views either:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An activity can interact with its views from onCreate() to onDestroy().**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**A fragment can only interact with its views from onCreateView() to onDestroyView().**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](Images/f0422-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you an overview of the fragment lifecycle on the next page, and then
    see what fragment view binding code looks like.
  prefs: []
  type: TYPE_NORMAL
- en: What fragment view binding code looks like
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’re now ready to see what fragment view binding code is like. Just like activities,
    you enable view binding in fragments by getting them to use a binding property,
    but the way in which you do this is slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0424-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the above code defines two extra properties: `binding` and
    `_binding`. Let’s take a closer look at what these two properties do.'
  prefs: []
  type: TYPE_NORMAL
- en: _binding refers to the binding object…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you’ve just seen, the view binding code for fragments defines a `_binding`
    property like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0425-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Its type is `FragmentOrderBinding?`, and it’s initialized with `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `_binding` property is set to an instance of `FragmentOrderBinding` in
    the fragment’s `onCreateView()` method using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0425-03.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s set in this method because it’s when the fragment first has access to its
    views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `_binding` property is set back to `null` in the fragment’s `onDestroyView()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0425-04.png)'
  prefs: []
  type: TYPE_IMG
- en: This is because the fragment can no longer access its views after its `onDestroyView()`
    method gets called.
  prefs: []
  type: TYPE_NORMAL
- en: '...and the binding property provides non-null access to it'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `binding` property uses a getter to return a non-`null` version of `_binding`,
    and throws a null pointer exception if `_binding` is `null`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This means you can use the `binding` property to interact with the fragment’s
    views without performing lots of messy null-safety checks. To make a fragment’s
    FAB respond to clicks, for example, you simply use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0425-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Activities and fragments get access to their views at different points in
    their lifecycles.**'
  prefs: []
  type: TYPE_NORMAL
- en: An *activity* can interact with its views from when it’s been created and its
    `onCreate()` method is called. It continues to have access to these views until
    the activity is destroyed, which happens at the end of its lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: A *fragment*, however, can only interact with its views from when its `onCreateView()`
    method gets called. This means that the `_binding` property can *only* be set
    to a view binding object in this method.
  prefs: []
  type: TYPE_NORMAL
- en: The fragment continues to have access to its views until its `onDestroyView()`
    method runs. At this point, the fragment’s layout is discarded, so _`binding`
    needs to be set to null. This prevents the fragment from trying to use the view
    binding object when it can no longer interact with views.
  prefs: []
  type: TYPE_NORMAL
- en: You now know everything that you need in order to use view binding with a fragment,
    so let’s update the code for `OrderFragment` in the Bits and Pizzas app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0426-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for OrderFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the code to make `OrderFragment` use view binding; update the code for
    *OrderFragment.kt* so it includes the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0427-02.png)![image](Images/f0428-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need to make `OrderFragment` use view binding. Let’s
    take the app for a test drive, and make sure that it still works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, it works in the same way as it did before.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the FAB without selecting a pizza type, a toast asks us to
    choose a pizza.
  prefs: []
  type: TYPE_NORMAL
- en: When we select a pizza type and click on the FAB again, a snackbar appears at
    the bottom of the screen showing us details of our order.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0429-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You now know how to implement view binding in your activity
    and fragment code. We’ll continue to use view binding through the rest of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Activity Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: An activity named `MainActivity` uses the file *activity_main.xml* for its layout.
    The layout includes a `Button` (with an ID of `pow_button`) and a `TextView` {with
    an ID of `pow_text`). When clicked, the `Button` needs to make the `TextView`
    display the text “Pow!”
  prefs: []
  type: TYPE_NORMAL
- en: Somebody used fridge magnets to write the `MainActivity` code, but a freak kitchen
    sandstorm dislodged some of the magnets. Can you piece the code back together
    again?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0431-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 10](#view_bindingcolon_bound_together) under your belt
    and now you’ve added view binding to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0433-01.png)'
  prefs: []
  type: TYPE_IMG
