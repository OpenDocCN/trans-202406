- en: Chapter 10\. User Feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any program, it’s important to be able to provide your user information in
    a short-lived UI. Especially as it relates to mobile development, we’d quickly
    run out of real estate if each warning, alert, prompt, or notification appeared
    in the UI. Both frameworks provide a variety of facilities to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use framework-provided tools to show the user feedback in a variety of circumstances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the status bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several APIs provided by the Android framework to display immediate
    feedback about an event, error, or change in state. Some simply display text,
    but others allow varying levels of customization and interactivity. We’ll examine
    the three main feedback classes and show you how to program them to meet your
    specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Use Framework-Provided Tools to Show the User Feedback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While you’re free to present information to your users in any way you want
    using standard layout and drawing methods, the Android framework provides three
    main APIs to provide feedback to your users, graphically:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Toast` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Snackbar` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Dialog` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Toast` class predates `Snackbar`, and while basic usage is very similar,
    it can be a bit simpler. On the other hand, if used correctly, a `Snackbar` can
    provide a nicer user experience and has flexibility not available to `Toast` messages.
    Dialogs are modal interfaces that can support a wide variety of elements, including
    elements to display *and receive* information to, and from, your users.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s jump right in.
  prefs: []
  type: TYPE_NORMAL
- en: Toast
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Toast` message is implementation-specific. A version of the Android OS might
    choose to implement details differently, or older devices—when Android OS standards
    were looser for manufacturers—might even differ between device makes and models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, a `Toast` message is a brief, short-lived message displayed
    to your user over existing content. From the [Android developer docs](https://oreil.ly/zXgqS):'
  prefs: []
  type: TYPE_NORMAL
- en: A toast provides simple feedback about an operation in a small popup. It only
    fills the amount of space required for the message and the current activity remains
    visible and interactive. Toasts automatically disappear after a timeout.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To show a `Toast` message, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! We have a `Context` instance, the message to display, and a duration
    constant (either `LENGTH_SHORT` or `LENGTH_LONG`).
  prefs: []
  type: TYPE_NORMAL
- en: There are other APIs available, like setting where a `Toast` displays on the
    screen (its “gravity”), and even providing `Toast` pop-ups with custom `View`
    trees, but most of the time, `makeText` and `show` are all you’ll need.
  prefs: []
  type: TYPE_NORMAL
- en: Snackbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned, the basics of `Toast` and `Snackbar` are very similar—both show
    a short-lived message to the user, on top of an existing UI. In fact, if you consider
    the basic `Snackbar` invocation compared to the basic `Toast` invocation shown
    previously, they’re nearly identical:'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a `Context` instance as the first method parameter, `Snackbar.make`
    asks for a `View` instance, and the naming is slightly different (`Toast.makeText`
    versus `Snackbar.make`), but otherwise they’re the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary differences in terms of user experience are that:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Snackbar` generally slides up from the bottom, while a `Toast` usually fades
    into the center of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A `Snackbar` can provide a simple action button to the right of the message
    with a single method call: `setAction`. The same can be done with a `Toast`, but
    this requires much more custom coding.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also be aware that the maintainers encourage developers to prefer `Snackbar`
    over `Toast` now, according to the [Android developer docs](https://oreil.ly/XPy7s):'
  prefs: []
  type: TYPE_NORMAL
- en: The Snackbar class supersedes Toast. While Toast is currently still supported,
    Snackbar is now the preferred way to display brief, transient messages to the
    user.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The primary difference between `Snackbar` and `Toast`, however, can be seen
    when a `Snackbar` is attached to a `CoordinatorLayout`, which should be the root
    view of the `View` instance passed as the first parameter to the `make` method.
    By doing this, the `Snackbar` gains some additional features, like the ability
    to swipe the screen to dismiss it, and awareness of other components managed by
    the `CoordinatorLayout`. For example, a `FloatingActionButton` will move up and
    out of the way as a `Snackbar` slides into place. See [the Android developer docs](https://oreil.ly/n8Mbx)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Dialogs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Dialog` and `Dialog` subclasses are quite a bit more powerful and flexible
    than the preceding `Toast` and `Snackbar` classes, but can also require more attention,
    maintenance, and configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the [developer docs](https://oreil.ly/xPFao):'
  prefs: []
  type: TYPE_NORMAL
- en: A dialog is a small window that prompts the user to make a decision or enter
    additional information. A dialog does not fill the screen and is normally used
    for modal events that require users to take an action before they can proceed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As with the previously discussed classes, the `Dialog` UI can be entirely custom;
    there are also facilities for single- or multiple-choice feedback, and adding
    user response functionality is fairly straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create and show a `Dialog` with a title, a message, and buttons to “accept”
    or “cancel” an offered operation, you might do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information about `Dialogs`, see [the developer docs](https://oreil.ly/-VXCz).
  prefs: []
  type: TYPE_NORMAL
- en: Update the Status Bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Android, the status bar is the topmost area of the screen, where you’ll find
    system information like time, battery level, network state, etc. This kind of
    system-level data is generally displayed on the right half of that top bar, while
    application-level information, usually in the form of very small icons, is displayed
    on the left edge. These icons are known as “notification” icons, and generally
    correspond to a `Notification` instance, which is a UI that exists outside of
    your application and generally consists of a short message but may also include
    some actionable items. For example, when a download completes, your app may issue
    a `Notification` that briefly shows the user a message and maintains an icon in
    the status bar so the user can access that message again later. Some action might
    be attached to the message as well, like opening your app to the downloaded item’s
    detail screen, or a list of downloads. The `Notifications` API is robust and feature-full,
    but might not be as intuitive as some of the previously discussed user feedback
    provisions.
  prefs: []
  type: TYPE_NORMAL
- en: Note also that the `Notifications` API has changed dramatically more than once
    as the AOSP has matured. Major changes were introduced in Android OS version 5,
    as well as version 8\. We’ll touch on the basics here, but as always, check out
    [the developer docs](https://oreil.ly/wGqyn) for a deeper dive.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the most basic level, here’s how to show a `Notification` using the *compat*
    library (make sure you have the dependency for `com.android.support:support-compat:xx.xx.xx`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch an `Activity` when the user taps the `Notification`, use the `PendingIntent`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add it to the builder before calling `build`:'
  prefs: []
  type: TYPE_NORMAL
- en: For a deeper dive, see [the developer docs](https://oreil.ly/rcuYz).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These built-in user feedback mechanisms can normalize the experience for your
    users. For example, using the built-in dialog system with accept and cancel buttons
    might seem more familiar to your users, so they may be more likely to sign up
    for your newsletter (or give your app a good rating) if these features are offered
    via traditional, framework-provided UIs. That said, if your requirements are more
    demanding than what’s allowed for by these APIs, you’re free to create (or modify)
    custom UI components that better suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve read the Android section of this chapter, you’ll quickly discover
    that this is an area where iOS and Android differ strongly. One of the places
    where the differences between Android and iOS are in sharpest contrast is in the
    available methods for displaying user feedback. Let’s take a look at what’s available
    and where the variations show themselves most prominently.
  prefs: []
  type: TYPE_NORMAL
- en: Use Framework-Provided Tools to Show the User Feedback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways through which feedback is shown to the user on iOS: alert
    views and action sheets. Both of them are created by the same class, `UIAlertController`,
    the only difference being an `.alert` passed in the initializer for alert view
    and `.actionSheet` being used for action sheets.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is not possible to display the `Snackbar`-style notifications possible in
    Android out of the box in iOS. One could, however, use a third-party library to
    achieve a similar effect. This is outside the scope of this book, however.
  prefs: []
  type: TYPE_NORMAL
- en: There is no absolutely clear guidance from Apple on when to use an action sheet
    and when to use an alert, but the standard that has emerged for most apps is to
    present an alert view whenever there is something requiring immediate feedback
    that might be unexpected; use an action sheet in response to a user action where
    a choice is required and when there is context to an action being performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example alert view being displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let’s walk through the code.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a view controller that will be used to present our alert later.
    Since iOS 8, alert views are actually `UIViewController` instances that can be
    presented by another view controller just like any other view controller. Next,
    we instantiate an alert via the initializer of `UIAlertController`. This class
    has a title, a message, and a `preferredStyle` parameter. We’re passing `.alert`
    indicating the alert we’re creating is an alert view; use `.actionSheet` to create
    an action sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The next line contains a method called `addAction(_:)` that is used to add an
    action, or button, to an alert view. We’re directly instantiating an instance
    of `UIAlertAction` to pass into this method with a title, style (`.default` in
    this case), and button handler. Inside the button handler, we display “OK button
    pressed!” out to the console whenever the button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the view controller created at the top of our code to display
    our alert view on top of the rest of the view stack.
  prefs: []
  type: TYPE_NORMAL
- en: The meat of this process is the `addAction(_:)` method called on the alert itself.
    This is where we add all the buttons our alert, or potentially action sheet, has
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it’s possible to create an alert with more than one button. Here’s an
    example with three buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we use almost identical logic to create and display our alert view. One
    key difference to make it easier to read is that we are creating our actions separately
    and then adding them directly to the alert instead of instantiating them directly
    in the call to `addAction(_:)`.
  prefs: []
  type: TYPE_NORMAL
- en: Another slight difference is our use of the `.cancel` style to create the `cancelAction`.
    There are a limited set of action styles available. The `.default` style displays
    a basic button that’s bolded in a two-button configuration. The `.cancel` style
    displays a button in the position of a cancel button with a specified label. The
    remaining style, `.destructive`, displays a button usually with a red text color
    to indicate it’s an action with destructive potential.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an action created with a `.destructive` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If there is any guidance to be given about alert view and action sheets, it’s
    that alert views should be displayed only when necessary. They’re a disruption
    in a user’s flow within an application and can quickly become tiresome and ignored
    if overused. With great power comes great responsibility. Tap “Yes” if you agree.
  prefs: []
  type: TYPE_NORMAL
- en: Update the Status Bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Notifications` API on Android allows developers to customize items in the
    status bar and to provide feedback to the user in this way. On iOS, the only way
    a developer can use the status for feedback is via the network status bar activity
    indicator.
  prefs: []
  type: TYPE_NORMAL
- en: Although minimal in appearance, this indicator is arguably very helpful to users.
    It can help a user diagnose why an application might be slow and indicate that
    data is still loading. Small details like this can be the difference between a
    application that feels unfinished and an application that feels complete and polished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s remarkably easy to update the display and hide the indicator. Most third-party
    networking libraries have a way to do it themselves, but almost all of them end
    up just wrapping code like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It might not be as full-featured as Android, but it’s still incredibly helpful
    for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Text fields in alert views
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s possible to use alert views not only for feedback but to get input from
    a user. There’s a convenience method provided to add a text field and style it
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can access the value of this text field in a `UIAlertAction` later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Haptic feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s possible to provide feedback to users on phones in nonvisual ways via
    haptic feedback. There are three classes that are used for different types of
    feedback:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UINotificationFeedbackGenerator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIImpactFeedbackGenerator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UISelectionFeedbackGenerator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a quick example, in order to generate haptic feedback to a user about a
    failed download, you could use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This would generate a tap that has been designed by Apple to feel negative and
    urgent. Use with discretion and remember that not all classes of devices, for
    example iPads, currently offer haptic feedback at the time of publication.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This seems to be one of the areas of developing apps on Android and iOS that
    presents the largest amount of differences between the two technology stacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Android has a number of ways to give user feedback, such as `Toast`, `Snackbar`,
    and `Dialog`. It’s also possible to update the Android status bar with alerts
    for the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are more limited controls in terms of what’s available to give users feedback
    in iOS. That said, the options available are easy to use and follow standard UI
    conventions in the rest of UIKit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Updating the status bar isn’t really possible in iOS. This highlights one of
    the core differences in Android and iOS: the amount of control a developer has
    over the device. There is a much tighter rein on iOS that Apple exercises. Developers
    are only able to indicate network activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve learned a lot about letting our apps talk back to our users this chapter.
    In the next chapter, we’ll cover providing them a way to store information that’s
    a little less cumbersome than an entire database persistence layer.
  prefs: []
  type: TYPE_NORMAL
