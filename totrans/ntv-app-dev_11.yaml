- en: Chapter 10\. User Feedback
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章 用户反馈
- en: In any program, it’s important to be able to provide your user information in
    a short-lived UI. Especially as it relates to mobile development, we’d quickly
    run out of real estate if each warning, alert, prompt, or notification appeared
    in the UI. Both frameworks provide a variety of facilities to accomplish this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何程序中，能够在短暂的 UI 中向用户提供信息非常重要。特别是在移动开发中，如果每个警告、提示或通知都出现在 UI 中，我们很快就会用完可用的空间。这两个框架都提供了多种功能来实现这一点。
- en: Tasks
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: 'In this chapter, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: Use framework-provided tools to show the user feedback in a variety of circumstances.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用框架提供的工具在各种情况下向用户显示反馈。
- en: Update the status bar.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新状态栏。
- en: Android
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: There are several APIs provided by the Android framework to display immediate
    feedback about an event, error, or change in state. Some simply display text,
    but others allow varying levels of customization and interactivity. We’ll examine
    the three main feedback classes and show you how to program them to meet your
    specific needs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Android 框架提供了几个 API，用于显示关于事件、错误或状态变化的即时反馈。有些只显示文本，但其他一些则允许各种程度的定制和交互。我们将检查三个主要的反馈类，并向您展示如何编程以满足您的特定需求。
- en: Use Framework-Provided Tools to Show the User Feedback
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用框架提供的工具向用户显示反馈
- en: 'While you’re free to present information to your users in any way you want
    using standard layout and drawing methods, the Android framework provides three
    main APIs to provide feedback to your users, graphically:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用标准布局和绘图方法以任何您想要的方式向用户显示信息，但 Android 框架提供了三个主要的 API 来图形化地向用户提供反馈：
- en: The `Toast` class
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Toast` 类'
- en: The `Snackbar` class
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Snackbar` 类'
- en: The `Dialog` class
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` 类'
- en: The `Toast` class predates `Snackbar`, and while basic usage is very similar,
    it can be a bit simpler. On the other hand, if used correctly, a `Snackbar` can
    provide a nicer user experience and has flexibility not available to `Toast` messages.
    Dialogs are modal interfaces that can support a wide variety of elements, including
    elements to display *and receive* information to, and from, your users.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Toast` 类早于 `Snackbar`，虽然基本用法非常相似，但可能更简单一些。另一方面，如果正确使用，`Snackbar` 可以提供更好的用户体验，并具有
    `Toast` 消息无法实现的灵活性。对话框是支持各种元素的模态接口，包括用于向用户显示信息并从用户那里接收信息的元素。'
- en: Let’s jump right in.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Toast
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A `Toast` message is implementation-specific. A version of the Android OS might
    choose to implement details differently, or older devices—when Android OS standards
    were looser for manufacturers—might even differ between device makes and models.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 提示消息是与实现相关的。某个 Android 操作系统的版本可能会选择以不同的方式实现细节，或者在 Android 操作系统标准较为宽松的较旧设备上，甚至可能会因设备的品牌和型号而有所不同。
- en: 'Generally speaking, a `Toast` message is a brief, short-lived message displayed
    to your user over existing content. From the [Android developer docs](https://oreil.ly/zXgqS):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，提示消息是显示在现有内容上的简短、短暂的消息。来自 [Android 开发者文档](https://oreil.ly/zXgqS)：
- en: A toast provides simple feedback about an operation in a small popup. It only
    fills the amount of space required for the message and the current activity remains
    visible and interactive. Toasts automatically disappear after a timeout.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示（Toast）在小弹出窗口中提供有关操作的简单反馈。它仅填充消息所需的空间，当前活动保持可见和交互。提示会在超时后自动消失。
- en: 'To show a `Toast` message, use the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示提示消息，请使用以下方法：
- en: That’s it! We have a `Context` instance, the message to display, and a duration
    constant (either `LENGTH_SHORT` or `LENGTH_LONG`).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们有一个 `Context` 实例、要显示的消息以及持续时间常量（`LENGTH_SHORT` 或 `LENGTH_LONG`）。
- en: There are other APIs available, like setting where a `Toast` displays on the
    screen (its “gravity”), and even providing `Toast` pop-ups with custom `View`
    trees, but most of the time, `makeText` and `show` are all you’ll need.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可用的 API，比如设置 `Toast` 在屏幕上显示的位置（其“重力”），甚至提供具有自定义 `View` 树的 `Toast` 弹出窗口，但大多数情况下，`makeText`
    和 `show` 就足够了。
- en: Snackbar
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Snackbar
- en: 'As mentioned, the basics of `Toast` and `Snackbar` are very similar—both show
    a short-lived message to the user, on top of an existing UI. In fact, if you consider
    the basic `Snackbar` invocation compared to the basic `Toast` invocation shown
    previously, they’re nearly identical:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前提到的，`Toast` 和 `Snackbar` 的基础非常相似——都在现有 UI 的顶部显示短暂的消息。实际上，如果考虑到与之前显示的基本 `Toast`
    调用相比，基本的 `Snackbar` 调用几乎是相同的：
- en: Instead of a `Context` instance as the first method parameter, `Snackbar.make`
    asks for a `View` instance, and the naming is slightly different (`Toast.makeText`
    versus `Snackbar.make`), but otherwise they’re the same.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Snackbar.make` 方法的第一个参数不是 `Context` 实例，而是一个 `View` 实例，并且方法的命名略有不同（`Toast.makeText`
    与 `Snackbar.make`），但它们本质上是相同的。'
- en: 'The primary differences in terms of user experience are that:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户体验方面的主要差异在于：
- en: A `Snackbar` generally slides up from the bottom, while a `Toast` usually fades
    into the center of the screen.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Snackbar` 通常从屏幕底部滑出，而 `Toast` 则通常从屏幕中心淡入。'
- en: 'A `Snackbar` can provide a simple action button to the right of the message
    with a single method call: `setAction`. The same can be done with a `Toast`, but
    this requires much more custom coding.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单个方法调用 `setAction`，`Snackbar` 可以在消息右侧提供一个简单的操作按钮。使用 `Toast` 也可以做到类似的功能，但需要进行更多的自定义编码。
- en: 'Also be aware that the maintainers encourage developers to prefer `Snackbar`
    over `Toast` now, according to the [Android developer docs](https://oreil.ly/XPy7s):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意，根据 [Android 开发者文档](https://oreil.ly/XPy7s)，开发者现在被鼓励优先选择 `Snackbar` 而不是
    `Toast`。
- en: The Snackbar class supersedes Toast. While Toast is currently still supported,
    Snackbar is now the preferred way to display brief, transient messages to the
    user.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Snackbar` 类取代了 Toast。尽管目前仍支持 Toast，但 Snackbar 现在是向用户显示简短临时消息的首选方式。'
- en: The primary difference between `Snackbar` and `Toast`, however, can be seen
    when a `Snackbar` is attached to a `CoordinatorLayout`, which should be the root
    view of the `View` instance passed as the first parameter to the `make` method.
    By doing this, the `Snackbar` gains some additional features, like the ability
    to swipe the screen to dismiss it, and awareness of other components managed by
    the `CoordinatorLayout`. For example, a `FloatingActionButton` will move up and
    out of the way as a `Snackbar` slides into place. See [the Android developer docs](https://oreil.ly/n8Mbx)
    for more information.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`Snackbar` 与 `Toast` 的主要区别可以在将 `Snackbar` 附加到 `CoordinatorLayout` 上时看出，`CoordinatorLayout`
    应该是作为 `make` 方法的第一个参数传递的 `View` 实例的根视图。通过这样做，`Snackbar` 将获得一些额外功能，比如可以通过滑动屏幕来关闭它，还能感知到
    `CoordinatorLayout` 管理的其他组件。例如，当 `Snackbar` 滑入时，`FloatingActionButton` 将向上移动并躲开。详细信息请参见
    [Android 开发者文档](https://oreil.ly/n8Mbx)。
- en: Dialogs
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对话框
- en: '`Dialog` and `Dialog` subclasses are quite a bit more powerful and flexible
    than the preceding `Toast` and `Snackbar` classes, but can also require more attention,
    maintenance, and configuration.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dialog` 及其子类比之前的 `Toast` 和 `Snackbar` 类更为强大和灵活，但也可能需要更多的注意、维护和配置。'
- en: 'From the [developer docs](https://oreil.ly/xPFao):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 [开发者文档](https://oreil.ly/xPFao)：
- en: A dialog is a small window that prompts the user to make a decision or enter
    additional information. A dialog does not fill the screen and is normally used
    for modal events that require users to take an action before they can proceed.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对话框是一个小窗口，提示用户做出决定或输入额外信息。对话框不会填满屏幕，通常用于需要用户在继续之前采取行动的模态事件。
- en: As with the previously discussed classes, the `Dialog` UI can be entirely custom;
    there are also facilities for single- or multiple-choice feedback, and adding
    user response functionality is fairly straightforward.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面讨论过的类一样，`Dialog` UI 可以完全自定义；还有单选或多选反馈的功能，添加用户响应功能也相对简单。
- en: 'To create and show a `Dialog` with a title, a message, and buttons to “accept”
    or “cancel” an offered operation, you might do something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建并显示一个带有标题、消息和“接受”或“取消”操作按钮的 `Dialog`，您可以像这样操作：
- en: For more information about `Dialogs`, see [the developer docs](https://oreil.ly/-VXCz).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于 `Dialog` 的信息，请参阅 [开发者文档](https://oreil.ly/-VXCz)。
- en: Update the Status Bar
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新状态栏
- en: In Android, the status bar is the topmost area of the screen, where you’ll find
    system information like time, battery level, network state, etc. This kind of
    system-level data is generally displayed on the right half of that top bar, while
    application-level information, usually in the form of very small icons, is displayed
    on the left edge. These icons are known as “notification” icons, and generally
    correspond to a `Notification` instance, which is a UI that exists outside of
    your application and generally consists of a short message but may also include
    some actionable items. For example, when a download completes, your app may issue
    a `Notification` that briefly shows the user a message and maintains an icon in
    the status bar so the user can access that message again later. Some action might
    be attached to the message as well, like opening your app to the downloaded item’s
    detail screen, or a list of downloads. The `Notifications` API is robust and feature-full,
    but might not be as intuitive as some of the previously discussed user feedback
    provisions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，状态栏是屏幕的最顶部区域，您可以在那里找到像时间、电池电量、网络状态等系统信息。这种类型的系统级数据通常显示在顶部栏的右半部分，而应用级信息通常以非常小的图标形式显示在左侧边缘。这些图标称为“通知”图标，通常对应一个`Notification`实例，它是一个存在于您的应用程序之外的UI，通常包含一个简短的消息，但也可能包含一些可操作的项目。例如，当下载完成时，您的应用程序可以发布一个`Notification`，简要向用户显示一条消息，并在状态栏中保留一个图标，以便用户稍后再次访问该消息。该消息可能还附带一些操作，比如打开您的应用程序到下载项目的详细屏幕，或者一个下载列表。`Notifications`
    API功能强大，但可能不像前面讨论的一些用户反馈功能那样直观。
- en: Note also that the `Notifications` API has changed dramatically more than once
    as the AOSP has matured. Major changes were introduced in Android OS version 5,
    as well as version 8\. We’ll touch on the basics here, but as always, check out
    [the developer docs](https://oreil.ly/wGqyn) for a deeper dive.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，随着AOSP的成熟，`Notifications` API已经有了多次重大变化。Android操作系统的版本5和版本8引入了重大变化。我们在这里只涉及基础知识，但像往常一样，请查看[开发者文档](https://oreil.ly/wGqyn)以深入了解。
- en: 'At the most basic level, here’s how to show a `Notification` using the *compat*
    library (make sure you have the dependency for `com.android.support:support-compat:xx.xx.xx`):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的层次上，这里是如何使用*compat*库显示`Notification`（确保你有依赖`com.android.support:support-compat:xx.xx.xx`）：
- en: 'To launch an `Activity` when the user taps the `Notification`, use the `PendingIntent`
    class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`Notification`时启动一个`Activity`，使用`PendingIntent`类：
- en: 'Add it to the builder before calling `build`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`build`之前将其添加到构建器中：
- en: For a deeper dive, see [the developer docs](https://oreil.ly/rcuYz).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 欲深入了解，请参阅[开发者文档](https://oreil.ly/rcuYz)。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: These built-in user feedback mechanisms can normalize the experience for your
    users. For example, using the built-in dialog system with accept and cancel buttons
    might seem more familiar to your users, so they may be more likely to sign up
    for your newsletter (or give your app a good rating) if these features are offered
    via traditional, framework-provided UIs. That said, if your requirements are more
    demanding than what’s allowed for by these APIs, you’re free to create (or modify)
    custom UI components that better suit your needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内置的用户反馈机制可以为您的用户提供一致的体验。例如，使用带有接受和取消按钮的内置对话框系统可能更加符合用户的习惯，因此如果通过传统的、框架提供的UI来提供这些功能，用户可能更愿意订阅您的通讯（或给您的应用评分）。尽管如此，如果您的要求超出了这些API所允许的范围，您可以自由创建（或修改）更适合您需求的自定义UI组件。
- en: iOS
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: If you’ve read the Android section of this chapter, you’ll quickly discover
    that this is an area where iOS and Android differ strongly. One of the places
    where the differences between Android and iOS are in sharpest contrast is in the
    available methods for displaying user feedback. Let’s take a look at what’s available
    and where the variations show themselves most prominently.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读了本章的Android部分，你会很快发现这是iOS和Android差异最大的领域之一。Android和iOS在显示用户反馈的可用方法中差异尤为显著。让我们看看有哪些选择，以及它们在哪些地方表现最为突出。
- en: Use Framework-Provided Tools to Show the User Feedback
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用框架提供的工具来显示用户反馈
- en: 'There are two ways through which feedback is shown to the user on iOS: alert
    views and action sheets. Both of them are created by the same class, `UIAlertController`,
    the only difference being an `.alert` passed in the initializer for alert view
    and `.actionSheet` being used for action sheets.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上向用户显示反馈有两种方式：警告视图和操作表。它们都是由同一个类`UIAlertController`创建，唯一的区别是在初始化警告视图时传入`.alert`，在操作表中使用`.actionSheet`。
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: It is not possible to display the `Snackbar`-style notifications possible in
    Android out of the box in iOS. One could, however, use a third-party library to
    achieve a similar effect. This is outside the scope of this book, however.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: iOS中默认情况下不可能显示类似Android中的`Snackbar`风格通知。但是可以使用第三方库来实现类似的效果。然而，这超出了本书的范围。
- en: There is no absolutely clear guidance from Apple on when to use an action sheet
    and when to use an alert, but the standard that has emerged for most apps is to
    present an alert view whenever there is something requiring immediate feedback
    that might be unexpected; use an action sheet in response to a user action where
    a choice is required and when there is context to an action being performed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Apple没有绝对明确的指导意见，关于何时使用操作表和何时使用警告，但对大多数应用程序来说，已经形成的标准是在需要即时反馈且可能是意外的情况下使用警告视图；在需要用户选择并且有操作上下文的情况下使用操作表。
- en: 'Here’s an example alert view being displayed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一个警告视图示例：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s walk through the code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起浏览代码。
- en: First, we create a view controller that will be used to present our alert later.
    Since iOS 8, alert views are actually `UIViewController` instances that can be
    presented by another view controller just like any other view controller. Next,
    we instantiate an alert via the initializer of `UIAlertController`. This class
    has a title, a message, and a `preferredStyle` parameter. We’re passing `.alert`
    indicating the alert we’re creating is an alert view; use `.actionSheet` to create
    an action sheet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个视图控制器，稍后将用来呈现我们的警告。自iOS 8以来，警告视图实际上是可以由另一个视图控制器呈现的`UIViewController`实例，就像任何其他视图控制器一样。接下来，我们通过`UIAlertController`的初始化方法实例化一个警告。这个类有一个标题、一条消息和一个`preferredStyle`参数。我们传入`.alert`表示我们正在创建的是一个警告视图；使用`.actionSheet`来创建操作表。
- en: The next line contains a method called `addAction(_:)` that is used to add an
    action, or button, to an alert view. We’re directly instantiating an instance
    of `UIAlertAction` to pass into this method with a title, style (`.default` in
    this case), and button handler. Inside the button handler, we display “OK button
    pressed!” out to the console whenever the button is pressed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行包含一个名为`addAction(_:)`的方法，用于向警告视图添加动作或按钮。我们直接实例化一个`UIAlertAction`实例，并将其带有标题、样式（本例中为`.default`）和按钮处理程序传递到这个方法中。在按钮处理程序内部，每当按下按钮时，我们向控制台输出“OK
    button pressed!”。
- en: Finally, we use the view controller created at the top of our code to display
    our alert view on top of the rest of the view stack.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用代码顶部创建的视图控制器来显示我们的警告视图，覆盖在视图堆栈的其余部分之上。
- en: The meat of this process is the `addAction(_:)` method called on the alert itself.
    This is where we add all the buttons our alert, or potentially action sheet, has
    available.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的核心是在警告本身调用的`addAction(_:)`方法。这是我们添加所有按钮到我们的警告或者可能的操作表中的地方。
- en: 'Now, it’s possible to create an alert with more than one button. Here’s an
    example with three buttons:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以创建一个带有多个按钮的警告。这里有一个带有三个按钮的示例：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we use almost identical logic to create and display our alert view. One
    key difference to make it easier to read is that we are creating our actions separately
    and then adding them directly to the alert instead of instantiating them directly
    in the call to `addAction(_:)`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用几乎相同的逻辑来创建和显示我们的警告视图。为了更易于阅读的一个关键区别是，我们将动作单独创建然后直接添加到警告中，而不是在调用`addAction(_:)`时直接实例化它们。
- en: Another slight difference is our use of the `.cancel` style to create the `cancelAction`.
    There are a limited set of action styles available. The `.default` style displays
    a basic button that’s bolded in a two-button configuration. The `.cancel` style
    displays a button in the position of a cancel button with a specified label. The
    remaining style, `.destructive`, displays a button usually with a red text color
    to indicate it’s an action with destructive potential.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个轻微的区别是我们使用 `.cancel` 样式来创建 `cancelAction`。可用的操作样式集合有限。`.default` 样式显示一个在两个按钮配置中加粗显示的基本按钮。`.cancel`
    样式显示一个在取消按钮位置上具有指定标签的按钮。剩余的样式 `.destructive` 显示一个通常带有红色文本颜色以指示其具有破坏性潜力的按钮。
- en: 'Here’s an action created with a `.destructive` style:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 `.destructive` 样式创建的操作：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If there is any guidance to be given about alert view and action sheets, it’s
    that alert views should be displayed only when necessary. They’re a disruption
    in a user’s flow within an application and can quickly become tiresome and ignored
    if overused. With great power comes great responsibility. Tap “Yes” if you agree.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何关于提示视图和操作表的指导意见，那就是只有在必要时才显示提示视图。它们会打断用户在应用程序中的流程，如果过度使用，很快就会变得令人厌烦并被忽视。伟大的力量需要伟大的责任。如果您同意，请点击“是”。
- en: Update the Status Bar
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新状态栏
- en: The `Notifications` API on Android allows developers to customize items in the
    status bar and to provide feedback to the user in this way. On iOS, the only way
    a developer can use the status for feedback is via the network status bar activity
    indicator.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上的 `Notifications` API 允许开发者自定义状态栏中的项目，并以这种方式向用户提供反馈。在 iOS 上，开发者唯一可以使用状态栏进行反馈的方式是通过网络状态栏活动指示器。
- en: Although minimal in appearance, this indicator is arguably very helpful to users.
    It can help a user diagnose why an application might be slow and indicate that
    data is still loading. Small details like this can be the difference between a
    application that feels unfinished and an application that feels complete and polished.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在外观上很小，但这个指示器对用户来说可能非常有帮助。它可以帮助用户诊断应用程序可能变慢的原因，并指示数据仍在加载。诸如此类的小细节可以决定一个应用程序是感觉未完成还是感觉完整和精致的区别。
- en: 'Here’s how you do it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是操作方法：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It’s remarkably easy to update the display and hide the indicator. Most third-party
    networking libraries have a way to do it themselves, but almost all of them end
    up just wrapping code like so:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 更新显示并隐藏指示器非常容易。大多数第三方网络库都有自己的方法来完成，但几乎所有这些方法最终都会包装成如下代码：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It might not be as full-featured as Android, but it’s still incredibly helpful
    for the user.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能没有 Android 那么全面，但对用户仍然非常有帮助。
- en: Text fields in alert views
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示视图中的文本字段
- en: 'It’s possible to use alert views not only for feedback but to get input from
    a user. There’s a convenience method provided to add a text field and style it
    like so:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以用提示视图来提供反馈，还可以从用户那里获取输入。提供了一个便利的方法来添加文本字段并进行样式化，如下所示：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can access the value of this text field in a `UIAlertAction` later:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以稍后在 `UIAlertAction` 中访问此文本字段的值：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Haptic feedback
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触觉反馈
- en: 'It’s possible to provide feedback to users on phones in nonvisual ways via
    haptic feedback. There are three classes that are used for different types of
    feedback:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过触觉反馈以非视觉方式向手机用户提供反馈。有三种用于不同类型反馈的类别：
- en: '`UINotificationFeedbackGenerator`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UINotificationFeedbackGenerator`'
- en: '`UIImpactFeedbackGenerator`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIImpactFeedbackGenerator`'
- en: '`UISelectionFeedbackGenerator`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UISelectionFeedbackGenerator`'
- en: 'As a quick example, in order to generate haptic feedback to a user about a
    failed download, you could use the following code snippet:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 举个快速的例子，为了向用户提供关于下载失败的触觉反馈，您可以使用以下代码片段：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This would generate a tap that has been designed by Apple to feel negative and
    urgent. Use with discretion and remember that not all classes of devices, for
    example iPads, currently offer haptic feedback at the time of publication.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个由 Apple 设计的感觉消极和紧急的轻敲。请谨慎使用，并记住，在发布时并非所有设备类别，例如 iPad，都支持触觉反馈。
- en: What We’ve Learned
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们学到了什么
- en: 'This seems to be one of the areas of developing apps on Android and iOS that
    presents the largest amount of differences between the two technology stacks:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是在开发 Android 和 iOS 应用程序时介绍了两种技术堆栈之间存在的最大差异之一的领域：
- en: Android has a number of ways to give user feedback, such as `Toast`, `Snackbar`,
    and `Dialog`. It’s also possible to update the Android status bar with alerts
    for the user.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 有多种方式向用户提供反馈，比如 `Toast`、`Snackbar` 和 `Dialog`。同时，也可以通过警报更新 Android 状态栏来提示用户。
- en: There are more limited controls in terms of what’s available to give users feedback
    in iOS. That said, the options available are easy to use and follow standard UI
    conventions in the rest of UIKit.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 中，用户反馈方面的控制选项较为有限。尽管如此，这些选项使用起来简单，并遵循 UIKit 的标准 UI 约定。
- en: 'Updating the status bar isn’t really possible in iOS. This highlights one of
    the core differences in Android and iOS: the amount of control a developer has
    over the device. There is a much tighter rein on iOS that Apple exercises. Developers
    are only able to indicate network activity.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 中，更新状态栏实际上是不太可能的。这突显了 Android 和 iOS 之间的一个核心差异：开发者对设备的控制程度。在 iOS 中，苹果公司对此有着更为严格的控制。开发者只能指示网络活动。
- en: We’ve learned a lot about letting our apps talk back to our users this chapter.
    In the next chapter, we’ll cover providing them a way to store information that’s
    a little less cumbersome than an entire database persistence layer.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章我们学到了让我们的应用与用户进行交流的许多方法。在下一章中，我们将讨论提供一种比整个数据库持久化层稍微简单一些的存储信息方式。
