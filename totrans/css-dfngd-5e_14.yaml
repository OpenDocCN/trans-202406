- en: Chapter 14\. Fonts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章. 字体
- en: 'The “Font Properties” section of the CSS1 specification, written in 1996, begins
    with this sentence: “Setting font properties will be among the most common uses
    of style sheets.” Despite the awareness of font’s importance from the very beginning
    of CSS, it wasn’t until about 2009 that this capability really began to be widely
    and consistently supported. With the introduction of variable fonts, typography
    on the web has become an art form. While you can include any fonts you are legally
    allowed to distribute in your design, you have to pay attention to how you use
    them.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS1 规范中的“字体属性”部分，编写于 1996 年，以这句话开头：“设置字体属性将是样式表的最常见用途之一。” 尽管从 CSS 的最初开始就意识到字体的重要性，但直到大约
    2009 年，这种能力才真正开始被广泛和一致地支持。随着可变字体的引入，网络上的排版已成为一种艺术形式。虽然您可以在设计中包含任何您有合法权限分发的字体，但您必须注意如何使用它们。
- en: It’s important to remember this does not grant absolute control over fonts.
    If the font you’re using fails to download, or is in a file format the user’s
    browser doesn’t understand, the text will (eventually) be displayed with a fallback
    font. That’s a good thing, as it means the user still gets your content.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点并不意味着对字体有绝对控制权。如果您正在使用的字体无法下载，或者是用户浏览器不理解的文件格式，文本将（最终）显示为备用字体。这是件好事，因为这意味着用户仍然能够获取您的内容。
- en: While fonts may seem vital to a design, always bear in mind you can’t depend
    on the presence of a given font. If a font is slow to load, browsers generally
    delay text rendering. While that prevents text being redrawn while a user is reading,
    it’s bad to have no text on the page.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管字体对设计至关重要，但请始终记住，您不能依赖特定字体的存在。如果字体加载速度慢，浏览器通常会延迟文本呈现。虽然这可以防止用户阅读时重新绘制文本，但在页面上没有文本是不好的。
- en: Your font choice may also be overridden by user preference, or a browser extension
    meant to enhance the reading experience. An example is the browser extension OpenDyslexic,
    which “overrides all fonts on web pages with the OpenDyslexic font, and formats
    pages to be more easily readable.” In general, always design assuming your fonts
    will be delayed and even fail altogether.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您的字体选择也可能被用户偏好或旨在增强阅读体验的浏览器扩展所覆盖。一个例子是浏览器扩展 OpenDyslexic，它“使用 OpenDyslexic 字体覆盖网页上的所有字体，并格式化页面以更容易阅读”。总体而言，始终设计时假定您的字体可能会延迟甚至完全失败。
- en: Font Families
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体族
- en: What we think of as a “font” is usually composed of many variations to describe
    bold text, italic text, bold italic text, and so on. For example, you’re probably
    familiar with (or at least have heard of) the font Times. Times is actually a
    combination of many variants, including TimesRegular, TimesBold, TimesItalic,
    TimesBoldItalic, and so on. Each variant of Times is an actual *font face*, and
    Times, as we usually think of it, is a combination of all these variant faces.
    In other words, system-standard fonts like Times are actually a *font family*,
    not just a single font, even though most of us think about fonts as being single
    entities.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的“字体”通常由许多变体组成，用于描述粗体文本、斜体文本、粗斜体文本等。例如，您可能熟悉（或至少听说过）Times 字体。Times 实际上是许多变体的组合，包括
    TimesRegular、TimesBold、TimesItalic、TimesBoldItalic 等。Times 的每个变体都是一个实际的 *字体面*，而我们通常所认为的
    Times 则是所有这些变体面的组合。换句话说，像 Times 这样的系统标准字体实际上是一个 *字体族*，而不仅仅是单个字体，尽管大多数人认为字体是单一实体。
- en: With such font families, a separate file is required for each width, weight,
    and style combination (that is, each font face), meaning you can have upward of
    20 separate files for a complete typeface. *Variable fonts*, on the other hand,
    are able to store multiple variants, such as regular, bold, italic, and bold italic,
    in a single file. Variable font files are generally a little bit larger (maybe
    just a few kilobytes) than any single font face file, but smaller than the multiple
    files required of a regular font, and require only a single HTTP request.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种字体族，每种宽度、重量和样式组合（即每种字体面）都需要单独的文件，这意味着对于完整的字体，您可能需要多达 20 个单独的文件。另一方面，*可变字体*
    能够在单个文件中存储多个变体，例如常规、粗体、斜体和粗斜体。可变字体文件通常比单个字体面文件稍大一些（也许只有几千字节），但比普通字体所需的多个文件要小，并且只需要一个
    HTTP 请求。
- en: 'To cover all the bases, CSS defines five generic font families:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了涵盖所有情况，CSS 定义了五个通用字体族：
- en: '*Serif fonts*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*衬线字体*'
- en: Serif fonts are proportional and have serifs. A font is *proportional* if all
    characters in the font have different widths. For example, a lowercase *i* and
    a lowercase *m* take up different horizontal spaces because they have different
    widths. (This book’s paragraph font is proportional, for example.) *Serifs* are
    the decorations on the ends of strokes within each character, such as little lines
    at the top and bottom of a lowercase *l*, or at the bottom of each leg of an uppercase
    *A*. Examples of serif fonts are Times, Georgia, and New Century Schoolbook.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 衬线字体是比例的，并且有衬线。 如果字体中的所有字符具有不同的宽度，则称为*比例*字体。 例如，小写字母*i*和小写字母*m*占据不同的水平空间，因为它们具有不同的宽度。（例如，本书的段落字体是比例字体。）
    *衬线*是每个字符内部笔画末端的装饰，例如小写字母*l*的顶部和底部的小线，或者大写字母*A*的每个腿部的底部。 衬线字体的示例包括 Times、Georgia
    和 New Century Schoolbook 等。
- en: '*Sans-serif fonts*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*无衬线字体*'
- en: Sans-serif fonts are proportional and do not have serifs. Examples of sans-serif
    fonts are Helvetica, Geneva, Verdana, Arial, and Univers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无衬线字体是比例的，不具有衬线。 无衬线字体的示例包括 Helvetica、Geneva、Verdana、Arial 和 Univers 等。
- en: '*Monospace fonts*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*等宽字体*'
- en: Monospace fonts are not proportional. Rather, each character uses up the same
    amount of horizontal space as all the others; thus, a lowercase *i* takes up the
    same horizontal space as a lowercase *m*, even though their actual letterforms
    may have different widths. These generally are used for displaying programmatic
    code or tabular data, like this book’s code font, for example. If a font has uniform
    character widths, it is classified as monospace, regardless of whether it has
    serifs. Examples of monospace fonts are Courier, Courier New, Consolas, and Andale
    Mono.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 等宽字体是不比例的。 而是每个字符使用与其他所有字符相同的水平空间；因此，小写字母*i*占据与小写字母*m*相同的水平空间，即使它们的实际字形可能具有不同的宽度。
    通常用于显示程序代码或表格数据，例如本书的代码字体。 如果字体具有统一的字符宽度，则被分类为等宽字体，无论其是否具有衬线。 等宽字体的示例包括 Courier、Courier
    New、Consolas 和 Andale Mono 等。
- en: '*Cursive fonts*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*草书字体*'
- en: Cursive fonts attempt to emulate human handwriting or lettering. Usually, they
    are composed largely of flowing curves and have stroke decorations that exceed
    those found in serif fonts. For example, an uppercase *A* might have a small curl
    at the bottom of its left leg or be composed entirely of swashes and curls. Examples
    of cursive fonts are Zapf Chancery, Author, and Comic Sans.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 草书字体试图模拟人类的手写或书法。 通常，它们主要由流动的曲线组成，并具有超过衬线字体的笔画装饰。 例如，大写字母*A*的左腿底部可能有一个小卷曲，或者完全由花折和卷曲组成。
    草书字体的示例包括 Zapf Chancery、Author 和 Comic Sans 等。
- en: '*Fantasy fonts*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*奇幻字体*'
- en: Fantasy fonts are not really defined by any single characteristic other than
    our inability to easily classify them in one of the other families (these are
    sometimes called *decorative* or *display* fonts). A few such fonts are Western,
    Woodblock, and Klingon.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '奇幻字体并没有任何单一特征来定义，除了我们无法轻易地将它们分类为其他字体族之一（有时这些字体被称为*装饰*或*展示*字体）。 如西部、木刻和克林贡等几种字体。 '
- en: Your operating system and browser will have a default font family for each of
    these generic families. Fonts a browser cannot classify as serif, sans-serif,
    monospace, or cursive are generally considered fantasy. While most font families
    fall into one of these generic families, not all do. For example, SVG icon fonts,
    dingbat fonts, and Material Icons Round contain images rather than letters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的操作系统和浏览器将为每个通用字体族拥有默认字体系列。 浏览器无法分类为有衬线、无衬线、等宽或草书的字体通常被视为奇幻字体。 虽然大多数字体族属于这些通用字体族之一，但并非全部。
    例如，SVG 图标字体、dingbat 字体和 Material Icons Round 包含的是图像而不是字母。
- en: Using Generic Font Families
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用通用字体系列
- en: You can call on any available font family by using the property `font-family`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用属性`font-family`调用任何可用字体系列。
- en: 'If you want a document to use a sans-serif font but do not particularly care
    which one, the appropriate declaration would be as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望文档使用无衬线字体，但并不特别关心使用哪一个，适当的声明如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will cause the user agent to pick a sans-serif font family (such as Helvetica)
    and apply it to the `<body>` element. Thanks to inheritance, the same font family
    choice will be applied to all visible elements that descend from the `<body>`,
    unless overridden by the user agent. User agents generally apply a `font-family`
    property to some elements, such as `monospace` in the case of `<code>` and `<pre>`,
    or a system font to some form-input controls.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致用户代理选择无衬线字体族（如Helvetica）并将其应用于`<body>`元素。多亏了继承，相同的字体族选择将被应用于所有从`<body>`派生的可见元素，除非被用户代理覆盖。用户代理通常对某些元素应用`font-family`属性，例如对于`<code>`和`<pre>`元素应用`monospace`，或对某些表单输入控件应用系统字体。
- en: 'Using nothing more than these generic families, you can create a fairly sophisticated
    stylesheet. The following rule set is illustrated in [Figure 14-1](#various_font_families):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用这些通用字体族，您就可以创建一个相当复杂的样式表。下面的规则集在[图14-1](#various_font_families)中有所说明：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Thus, most of this document will use a serif font such as Times, including all
    paragraphs except those that have a `class` of `signature`, which will instead
    be rendered in a cursive font such as Author. Heading levels 1 through 4 will
    use a sans-serif font like Helvetica, while the elements `<code>`, `<pre>`, `<tt>`,
    and `<kbd>` will use a monospace font like Courier.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本文档中的大部分内容将使用衬线字体，如Times，包括所有段落，但具有`class`为`signature`的段落将使用草书字体，如Author。标题级别1至4将使用无衬线字体，如Helvetica，而元素`<code>`、`<pre>`、`<tt>`和`<kbd>`将使用等宽字体，如Courier。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Using generic defaults is excellent for rendering speed, as it allows the browser
    to use whichever default fonts it already has in memory rather than having to
    parse through a list of specific fonts and load characters as needed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通用默认值对于渲染速度非常有帮助，因为它允许浏览器使用已经在内存中的默认字体，而不是必须解析特定字体列表并按需加载字符。
- en: '![css5 1401](assets/css5_1401.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1401](assets/css5_1401.png)'
- en: Figure 14-1\. Various font families
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-1\. 各种字体族
- en: A page author may, on the other hand, have more specific preferences for which
    font to use in the display of a document or element. In a similar vein, a user
    may want to create a user stylesheet that defines the exact fonts to be used in
    the display of all documents. In either case, `font-family` is still the property
    to use.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 页面作者可能会对文档或元素的显示使用特定的字体有更具体的偏好。同样地，用户可能希望创建一个用户样式表，定义所有文档显示时要使用的确切字体。在任一情况下，`font-family`仍然是要使用的属性。
- en: 'Assume for the moment that all `<h1>` elements should use Georgia as their
    font. The simplest rule for this would be the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时假设所有`<h1>`元素应使用Georgia作为其字体。这样做的最简单规则如下：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will cause the user agent displaying the document to use Georgia for all
    `<h1>` elements, assuming that the user agent has Georgia available for use. If
    it doesn’t, the user agent will be unable to use the rule at all. It won’t ignore
    the rule, but if it can’t find a font called `Georgia`, it can’t do anything but
    display `<h1>` elements using the user agent’s default font.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致显示文档的用户代理对所有`<h1>`元素使用Georgia字体，假设用户代理已经有了可用的Georgia字体。如果没有，用户代理将无法使用该规则。它不会忽略该规则，但如果找不到名为`Georgia`的字体，它除了使用用户代理的默认字体来显示`<h1>`元素外，别无选择。
- en: 'To handle a situation like this, you can give the user agent options by combining
    specific font families with generic font families. For example, the following
    markup tells a user agent to use Georgia if it’s available, and to use another
    serif font like Times as a fallback if it isn’t:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理这种情况，您可以通过结合特定字体族和通用字体族给用户代理提供选择。例如，以下标记告诉用户代理如果Georgia可用，则使用它，如果不可用，则使用另一个衬线字体，如Times：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For this reason, we strongly encourage you to always provide a generic family
    as part of any `font-family` rule. By doing so, you provide a fallback mechanism
    that lets user agents pick an alternative when they can’t provide an exact font
    match. This is often referred to as a *font stack*. Here are a few more examples:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们强烈建议您始终在任何`font-family`规则中提供一个通用字体族。通过这样做，您提供了一个后备机制，让用户代理在无法提供精确字体匹配时选择替代方案。这通常被称为*字体堆栈*。以下是一些更多的示例：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you’re familiar with fonts, you might have a number of similar fonts in
    mind for displaying a given element. Let’s say that you want all paragraphs in
    a document to be displayed using Times, but you would also accept Times New Roman,
    Georgia, New Century Schoolbook, and New York (all of which are serif fonts) as
    alternate choices. First, decide the order of preference for these fonts, and
    then string them together with commas:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉字体，您可能会想到一些类似的字体来显示给定的元素。假设您希望文档中的所有段落都使用 Times 字体显示，但也接受 Times New Roman、Georgia、New
    Century Schoolbook 和 New York（这些都是衬线字体）作为备选选择。首先，确定这些字体的优先顺序，然后用逗号将它们串联起来：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Based on this list, a user agent will look for the fonts in the order they’re
    listed. If none of the listed fonts are available, it will just pick an available
    serif font.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此列表，用户代理将按照它们列出的顺序查找字体。如果找不到任何列出的字体，则会选择一个可用的衬线字体。
- en: Using Quotation Marks
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用引号
- en: 'You may have noticed the presence of single quotes in the previous code example,
    which we haven’t used before in this chapter. Quotation marks are advisable in
    a `font-family` declaration only if a font name contains one or more spaces, such
    as `New York`, or if the font name includes symbols. Thus, a font called `Karrank%`
    should be quoted:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到在前面的代码示例中出现了单引号，这是本章中以前没有使用过的。只有在字体名称包含一个或多个空格（例如 `New York`）或字体名称包含符号时，建议使用引号。因此，名为
    `Karrank%` 的字体应该加引号：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'While quoting font names is almost never required, if you leave off the quotation
    marks, user agents may ignore the font name and continue to the next available
    font in the font stack. The exception to this is font names that match accepted
    `font-family` keywords. For example, if your font name is `cursive`, `serif`,
    `sans-serif`, `monospace`, or `fantasy`, it must be quoted so the user agent knows
    the difference between a font name and a font-family keyword, as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然几乎从不需要引用字体名称，但如果省略引号，用户代理可能会忽略字体名称，并继续使用字体堆栈中的下一个可用字体。这种情况的例外是与接受的 `font-family`
    关键字匹配的字体名称。例如，如果您的字体名称是 `cursive`、`serif`、`sans-serif`、`monospace` 或 `fantasy`，必须加引号，以便用户代理区分字体名称和字体系列关键字，如下所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The actual generic family names (`serif`, `monospace`, etc.) should never be
    quoted. If they are quoted, the browser will look for a font with that exact name.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的通用系列名称（`serif`、`monospace` 等）绝不应加引号。如果加引号，浏览器将查找具有确切名称的字体。
- en: 'When quoting font names, either single or double quotes are acceptable, as
    long as they match. Remember that if you place a `font-family` rule in a `style`
    attribute, which you generally shouldn’t, you’ll need to use whichever quotes
    you didn’t use for the attribute itself. Therefore, if you use double quotes to
    enclose the `font-family` rule, you’ll have to use single quotes within the rule,
    as in the following markup:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在引用字体名称时，单引号或双引号都可以接受，只要匹配即可。请记住，如果您在 `style` 属性中放置 `font-family` 规则（通常不建议这样做），则需要使用未在属性本身中使用的引号。因此，如果您在双引号中包含
    `font-family` 规则，您将需要在规则内部使用单引号，如下面的标记中所示：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you use double quotes in such a circumstance, they interfere with the attribute
    syntax. Note the font name is case-insensitive.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在这种情况下使用双引号，它们会干扰属性语法。请注意，字体名称不区分大小写。
- en: Using Custom Fonts
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义字体
- en: The `@font-face` rule enables you to use custom fonts on the web, instead of
    being forced to rely only on “web-safe” fonts (that is, font families that are
    widely installed, such as Times). The two required functions of the `@font-face`
    rule are to declare the name used to refer to a font and to provide the URL of
    that font’s file for downloading. In addition to these required descriptors, CSS
    has 14 optional descriptors.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`@font-face` 规则允许您在网页上使用自定义字体，而不仅仅依赖于“网页安全”字体（即广泛安装的字体系列，如 Times）。`@font-face`
    规则的两个必需功能是声明用于引用字体的名称，并提供该字体文件的下载URL。除了这些必需的描述符外，CSS 还有 14 个可选描述符。'
- en: While there’s no guarantee that every user will see the font you want, `@font-face`
    is supported in all browsers except ones like Opera Mini that intentionally don’t
    support it for performance reasons.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不能保证每个用户都能看到您想要的字体，但除了像 Opera Mini 这样出于性能原因故意不支持的浏览器外，几乎所有浏览器都支持 `@font-face`。
- en: 'Suppose you want to use a very specific font in your stylesheets, one that
    is not widely installed. Through the magic of `@font-face`, you can define a specific
    family name to correspond to a font file on your server that you can refer to
    throughout your CSS. The user agent will download that file and use it to render
    the text in your page, the same as if it were installed on the user’s machine.
    For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想在样式表中使用一个非常特定的字体，而这个字体并没有广泛安装。通过`@font-face`的魔法，您可以定义一个特定的家族名称，对应于服务器上的字体文件，您可以在整个CSS中引用它。用户代理将下载该文件并用它来呈现页面中的文本，就像它被安装在用户的机器上一样。例如：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This allows you to tell user agents to load the defined *.otf* file and use
    that font to render text when called upon via `font-family: SwitzeraADF`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '这允许您告知用户代理加载定义的*.otf*文件，并在调用时使用该字体来呈现文本，使用`font-family: SwitzeraADF`。'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The examples in this section refer to SwitzeraADF, a font face collection available
    from the [Arkandis Digital Foundry](http://arkandis.tuxfamily.org/openfonts.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的示例涉及SwitzeraADF，这是从[Arkandis Digital Foundry](http://arkandis.tuxfamily.org/openfonts.html)提供的字体集。
- en: The `@font-face` declaration doesn’t automatically load all the referenced font
    files. The intent of `@font-face` is to allow *lazy loading* of font faces. This
    means only faces needed to render a document will be loaded. Font files referenced
    in your CSS that aren’t necessary to render the page will not be downloaded. Font
    files are generally cached, and aren’t redownloaded as your users navigate your
    site.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`@font-face`声明不会自动加载所有引用的字体文件。`@font-face`的目的是允许*惰性加载*字体。这意味着只有渲染文档所需的字形才会被加载。在您的CSS中引用但不需要渲染页面的字体文件将不会被下载。字体文件通常会被缓存，并且在用户导航您的站点时不会重新下载。'
- en: 'The ability to load any font is quite powerful, but keep these concerns in
    mind:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 能够加载任何字体是非常强大的，但请牢记这些问题：
- en: For security reasons, font files must be retrieved from the same domain as the
    page requesting them. There’s a solution for that.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出于安全原因，字体文件必须从请求它们的页面相同的域中检索。有一个解决方案。
- en: Requiring lots of font downloads can lead to slow load times.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要大量字体下载可能导致加载时间缓慢。
- en: Fonts with lots of characters can lead to large font files. Fortunately, online
    tools and CSS enable limiting character sets.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符较多的字体可能导致较大的字体文件。幸运的是，在线工具和CSS使得可以限制字符集。
- en: If fonts load slowly, this can lead to flashes of unstyled text or invisible
    text. CSS has a way of addressing this issue as well.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果字体加载缓慢，这可能导致未样式化文本的闪烁或不可见文本。CSS也有办法解决这个问题。
- en: We’ll cover these problems and their solutions in this chapter. But remember,
    with great power comes great responsibility. Use fonts wisely!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中讨论这些问题及其解决方案。但请记住，伴随着巨大的权力而来的是巨大的责任。明智地使用字体！
- en: Using Font-Face Descriptors
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字体描述符
- en: 'All the parameters that define the font you’re referencing are contained within
    the `@font-face { }` construct. These are called *descriptors*, and very much
    like properties, they take the format `*descriptor*: *value*;`. In fact, most
    of the descriptor names refer directly to property names, as will be examined
    throughout the rest of the chapter. [Table 14-1](#font_descriptors) lists the
    possible descriptors, both required and optional.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '您引用的定义字体的所有参数都包含在`@font-face { }`结构中。这些被称为*描述符*，非常类似于属性，它们采用`*descriptor*:
    *value*;`的格式。实际上，大多数描述符名称直接参考属性名称，这将在本章的其余部分中进行详细探讨。[表14-1](#font_descriptors)列出了可能的描述符，包括必需和可选的。'
- en: Table 14-1\. Font descriptors
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-1\. 字体描述符
- en: '| Descriptor | Default value | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 描述符 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `font-family` | *n/a* | *Required.* The name used for this font in `font-family`
    property values. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `font-family` | *n/a* | *必需.* 在`font-family`属性值中使用的此字体的名称。 |'
- en: '| `src` | *n/a* | *Required.* One or more URLs pointing to the font file(s)
    that must be loaded to display the font. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `src` | *n/a* | *必需.* 指向必须加载以显示字体的字体文件的一个或多个URL。 |'
- en: '| `font-display` | `auto` | Determines how a font face is displayed based on
    whether and when it is downloaded and ready to use. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `font-display` | `auto` | 根据字体面何时下载和准备使用确定字体面的显示方式。 |'
- en: '| `font-stretch` | `normal` | Distinguishes between varying degrees of character
    widths (e.g., `condensed` and `expanded`). |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `font-stretch` | `normal` | 区分不同字符宽度的程度（例如`condensed`和`expanded`）。 |'
- en: '| `font-style` | `normal` | Distinguishes between `normal`, `italic`, and `oblique`
    faces. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `font-style` | `normal` | 区分`normal`、`italic`和`oblique`字形。 |'
- en: '| `font-weight` | `normal` | Distinguishes between various weights (e.g., `bold`).
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `font-weight` | `normal` | 区分各种权重（例如，`bold`）。'
- en: '| `font-variant` | `normal` | A value of the `font-variant` property. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `font-variant` | `normal` | `font-variant` 属性的一个值。'
- en: '| `font-feature-settings` | `normal` | Permits direct access to low-level OpenType
    features (e.g., enabling ligatures). |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `font-feature-settings` | `normal` | 允许直接访问低级别的OpenType功能（例如，启用连字）。'
- en: '| `font-variation-settings` | `normal` | Allows low-level control over OpenType
    or TrueType font variations, by specifying the four-letter axis names of the features
    to vary, along with their variation values. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `font-variation-settings` | `normal` | 允许通过指定要变化的特征的四字母轴名称及其变化值，对OpenType或TrueType字体变化进行低级别控制。'
- en: '| `ascent-override` | `normal` | Defines the ascent metric for the font. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `ascent-override` | `normal` | 定义字体的上升度度量。'
- en: '| `descent-override` | `normal` | Defines the descent metric for the font.
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `descent-override` | `normal` | 定义字体的下降度度量。'
- en: '| `line-gap-override` | `normal` | Defines the line gap metric for the font.
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `line-gap-override` | `normal` | 定义字体的行间隙度量。'
- en: '| `size-adjust` | `100%` | Defines a multiplier for glyph outlines and metrics
    associated with the font. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `size-adjust` | `100%` | 定义字体轮廓和与字体相关的度量的乘数。'
- en: '| `unicode-range` | `U+0-10FFFF` | Defines the range of characters for which
    a given face may be used. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `unicode-range` | `U+0-10FFFF` | 定义给定字体面可以使用的字符范围。'
- en: 'As noted in [Table 14-1](#font_descriptors), two descriptors are required:
    `font-family` and `src`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [表14-1](#font_descriptors) 中所述，`font-family` 和 `src` 需要两个描述符。
- en: 'The point of `src` is pretty straightforward, so we’ll describe it first: `src`
    lets you define one or more comma-separated sources for the font face you’re defining.
    With each source, you can provide an optional (but recommended) format hint that
    can help improve download performance.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`src` 的意图非常直接，所以我们将首先描述它：`src` 允许您为您定义的字体面提供一个或多个逗号分隔的来源。对于每个来源，您可以提供一个可选的（但建议的）格式提示，这可以帮助提高下载性能。'
- en: 'You can point to a font face at any URL—including files on the user’s computer
    using `local()`, and files elsewhere with `url()`. There is a default restriction:
    unless you set an exception, font faces can be loaded from only the same origin
    as the stylesheet. You can’t simply point your `src` at someone else’s site and
    download their font. You’ll need to host a local copy on your own server, use
    HTTP access controls to relax the same domain restriction, or use a font-hosting
    service that provides both the stylesheet(s) and the font file(s).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以指向任何URL上的字体面，包括使用 `local()` 在用户计算机上的文件，以及使用 `url()` 在其他地方的文件。有一个默认限制：除非设置了例外，否则字体面只能从与样式表相同的源加载。您不能简单地将您的
    `src` 指向别人的站点并下载他们的字体。您需要在自己的服务器上托管本地副本，使用HTTP访问控制来放宽相同域的限制，或使用提供样式表和字体文件的字体托管服务。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'To create an exception to the same-origin restriction for fonts, include the
    following in your server’s *.htaccess* file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要为字体创建同源限制的例外，请在您服务器的 *.htaccess* 文件中包含以下内容：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `FilesMatch` line includes all the file extensions of the fonts you want
    to import. This will allow anyone, from anywhere, to point at your font files
    and load them directly off your server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`FilesMatch` 行包括您想导入的字体文件的所有文件扩展名。这将允许任何人从任何地方指向您的字体文件并直接从您的服务器加载它们。'
- en: You may be wondering how it is that we’re defining `font-family` here when it
    was already defined in a previous section. This `font-family` is the font-family
    *descriptor*, whereas the previously defined `font-family` is the font-family
    *property*. If this seems confusing, stick with us a moment and all should become
    clear.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或许您会想知道，我们在这里如何定义 `font-family`，当它已经在之前的部分中定义过。这里的 `font-family` 是字体族 *描述符*，而之前定义的
    `font-family` 是字体族 *属性*。如果这看起来令人困惑，请稍等片刻，一切将变得清晰。
- en: 'Essentially, `@font-face` lets you create low-level definitions that underpin
    the font-related properties like `font-family`. When you define a font family
    name via the descriptor `font-family: "Switzera";`, you’re setting up an entry
    in the user agent’s table of font families that you can refer to in your `font-family`
    property values:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '实质上，`@font-face` 允许您创建底层定义，支撑像 `font-family` 这样的与字体相关的属性。当您通过描述符 `font-family:
    "Switzera";` 定义一个字体族名称时，您正在为用户代理的字体族表中设置一个条目，您可以在您的 `font-family` 属性值中引用它：'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the `font-family` descriptor value and the entry in the `font-family`
    property match case-insensitively. If they didn’t match at all, the `h1` rule
    would ignore the first font-family name listed in the `font-family` value and
    move on to the next (Helvetica, in this case).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`font-family` 描述符值和 `font-family` 属性中的条目是不区分大小写匹配的。如果它们完全不匹配，`h1` 规则将会忽略
    `font-family` 值中列出的第一个字体名称并转向下一个（在本例中为 Helvetica）。
- en: Also note that the `font-family` descriptor can be (almost) any name you want
    to give it. It doesn’t have to exactly match the name of the font file, though
    it usually makes sense to use a descriptor that’s at least close to the font’s
    name for purposes of clarity. That said, the value used in the `font-family` property
    does have to (case-insensitively) match the `font-family` descriptor.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`font-family` 描述符可以是（几乎）任何您想要的名称。它不必完全匹配字体文件的名称，尽管通常出于清晰性的目的，使用与字体名称至少接近的描述符是有意义的。也就是说，`font-family`
    属性中使用的值必须（不区分大小写地）与 `font-family` 描述符匹配。
- en: As long as the font has cleanly downloaded and is in a format the user agent
    can handle, it will be used in the manner you direct, as illustrated in [Figure 14-2](#using_a_downloaded_font).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 只要字体已经下载完毕并且是用户代理能够处理的格式，它将按照您指定的方式使用，正如在 [图 14-2](#using_a_downloaded_font)
    所示。
- en: '![css5 1402](assets/css5_1402.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1402](assets/css5_1402.png)'
- en: Figure 14-2\. Using a downloaded font
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-2\. 使用下载的字体
- en: 'In a similar manner, the comma-separated `src` descriptor value can provide
    fallbacks. That way, if the user agent doesn’t understand the file type defined
    by the hint or, for whatever reason, the user agent is unable to download the
    first source, it can move on to the second source and try to load the file defined
    there:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，逗号分隔的 `src` 描述符值可以提供备用方案。这样，如果用户代理程序不理解由提示定义的文件类型，或者由于某种原因无法下载第一个源，它可以转而尝试加载其中定义的第二个源：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remember that the same-origin policy mentioned earlier generally applies in
    this case, so pointing to a copy of the font on some other server will usually
    fail, unless that server is set up to permit cross-origin access.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，前面提到的同源策略通常也适用于此情况，因此指向其他服务器上字体副本的尝试通常会失败，除非该服务器设置为允许跨源访问。
- en: 'If you want to be sure the user agent understands the kind of font you’re telling
    it to use, use the optional but highly recommended `format()` hint:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望确保用户代理程序了解您告诉它要使用的字体类型，请使用可选但强烈推荐的 `format()` 提示：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The advantage of supplying a `format()` hint is that user agents can skip downloading
    files in formats they don’t support, thus reducing bandwidth use and load time.
    If no format hint is supplied, the font resource will be downloaded even if its
    format isn’t supported. The `format()` hint also lets you explicitly declare a
    format for a file that might not have a common filename extension:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `format()` 提示的优势在于，用户代理可以跳过不支持的文件格式的下载，从而减少带宽使用和加载时间。如果未提供格式提示，即使其格式不受支持，字体资源也将被下载。`format()`
    提示还允许您明确声明可能没有常见文件扩展名的文件的格式：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Table 14-2](#recognized_font_format_values) lists all of the allowed format
    values (as of late 2022).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 14-2](#recognized_font_format_values) 列出了截至 2022 年底允许的所有格式值。'
- en: Table 14-2\. Recognized font-format values
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-2\. 已识别的字体格式值
- en: '| Value | Format | Full name |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 格式 | 完整名称 |'
- en: '| --- | --- | --- |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `collection` | OTC/TTC | OpenType Collection (formerly: TrueType Collection)
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `collection` | OTC/TTC | 开放字体集合（前身为：TrueType 集合） |'
- en: '| `embedded-opentype` | EOT | Embedded OpenType |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `embedded-opentype` | EOT | 嵌入式 OpenType |'
- en: '| `opentype` | OTF | OpenType |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `opentype` | OTF | 开放字体 |'
- en: '| `svg` | SVG | Scalable Vector Graphics |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `svg` | SVG | 可缩放矢量图形 |'
- en: '| `truetype` | TTF | TrueType |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `truetype` | TTF | TrueType |'
- en: '| `woff2` | WOFF2 | Web Open Font Format, version 2 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `woff2` | WOFF2 | Web 开放字体格式，版本 2 |'
- en: '| `woff` | WOFF | Web Open Font Format |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `woff` | WOFF | Web 开放字体格式 |'
- en: 'In addition to the format, you can supply a value corresponding to a font technology
    with the `tech()` function. A color font version of Switzera might look something
    like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了格式外，您还可以使用 `tech()` 函数提供与字体技术对应的值。Switzera 的彩色字体版本可能如下所示：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Table 14-3](#recognized_font_tech_values) lists all of the recognized font-technology
    values (as of late 2022).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 14-3](#recognized_font_tech_values) 列出了截至 2022 年底已识别的所有字体技术值。'
- en: Table 14-3\. Recognized font-technology values
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-3\. 已识别的字体技术值
- en: '| Value | Description |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| color-CBDT | Font colors are defined using the OpenType `CBDT` (Color Bitmap
    Data Table) table. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| color-CBDT | 字体颜色使用OpenType的`CBDT`（颜色位图数据表）表格定义。 |'
- en: '| color-COLRv0 | Font colors are defined using the OpenType `COLR` (Color Table)
    table. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| color-COLRv0 | 字体颜色使用OpenType的`COLR`（颜色表）表格定义。 |'
- en: '| color-COLRv1 | Font colors are defined using the OpenType `COLR` table. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| color-COLRv1 | 字体颜色使用OpenType的`COLR`表格定义。 |'
- en: '| color-sbix | Font colors are defined using the OpenType `sbix` (Standard
    Bitmap Graphics Table) table. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| color-sbix | 字体颜色使用OpenType的`sbix`（标准位图图形表）表格定义。 |'
- en: '| color-SVG | Font colors are defined using the OpenType `SVG` (Scalable Vector
    Graphics) table. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| color-SVG | 字体颜色使用OpenType的`SVG`（可伸缩矢量图形）表格定义。 |'
- en: '| feature-aat | Font uses tables from the Apple Advanced Typography (AAT) Font
    Feature Registry. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| feature-aat | 字体使用Apple高级排版（AAT）字体特性注册表的表格。 |'
- en: '| feature-graphite | Font uses tables from the Graphite open source font-rendering
    engine. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| feature-graphite | 字体使用来自Graphite开源字体渲染引擎的表格。 |'
- en: '| feature-opentype | Font uses tables from the OpenType specification. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| feature-opentype | 字体使用来自OpenType规范的表格。 |'
- en: '| incremental | Incremental font-loading using the range-request or patch-subset
    server methods. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| incremental | 使用范围请求或修补子集服务器方法进行逐步加载字体。 |'
- en: '| palettes | A font that offers palettes by way of the OpenType `CPAL` table.
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| palettes | 字体通过OpenType的`CPAL`表格提供调色板。 |'
- en: '| variations | Font uses variations as defined by the OpenType tables such
    as `GSUB` and `GPOS`, the AAT tables `morx` and `kerx`, or the Graphite tables
    `Silf`, `Glat`, `Gloc`, `Feat`, and `Sill`. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| variations | 字体使用OpenType表格定义的变体，如`GSUB`和`GPOS`，AAT表格`morx`和`kerx`，或Graphite表格`Silf`、`Glat`、`Gloc`、`Feat`和`Sill`。
    |'
- en: Delving into the details of all these feature tables is well beyond the scope
    of this book, and you are unlikely to need to use them most of the time. Even
    if a font has one or more of the listed feature tables, listing them is not required.
    Even with `tech("color-SVG")`, an SVG color font will still render using its colors.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究所有这些特征表格的细节远远超出了本书的范围，大部分时间你不太可能需要使用它们。即使字体具有列出的一个或多个特征表，也不需要列出它们。即使使用`tech("color-SVG")`，SVG颜色字体仍将使用其颜色进行渲染。
- en: 'In addition to the combination of `url()`, `format()`, and `tech()`, you can
    supply a font family name (or several names) in case the font is already locally
    available on the user’s machine, using the aptly named `local()` function:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`url()`、`format()`和`tech()`的组合外，您还可以使用名为`local()`的适当命名的函数在用户计算机上使用已经存在的字体族名称（或几个名称）。：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the user agent looks to see if it already has a font family
    named `Switzera-Regular` or `SwitzeraADF-Regular`, case-insensitively, available
    on the local machine. If so, it will use the name `Switzera` to refer to that
    locally installed font. If not, it will use the `url()` values to try downloading
    the first remote font listed that has a format type it supports.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，用户代理会查看是否已经在本地计算机上安装了名为`Switzera-Regular`或`SwitzeraADF-Regular`的字体族，不区分大小写。如果是，则将使用名称`Switzera`引用该本地安装字体。如果没有，则将尝试下载第一个远程字体，其格式类型浏览器支持。
- en: Bear in mind that the order of the resources listed in `src` matters. As soon
    as the browser encounters a source in a format it supports, it attempts to use
    that source. For this reason, `local()` values should be listed first, with no
    format hint needed. This should be followed by external resources with file type
    hints, generally in order of smallest file size to largest to minimize performance
    hits.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`src`中列出的资源顺序非常重要。一旦浏览器遇到支持的格式，它将尝试使用该源。因此，`local()`值应首先列出，无需格式提示。接下来是外部资源，按文件大小从小到大的顺序列出，以最小化性能影响。
- en: 'This capability allows an author to create custom names for locally installed
    fonts. For example, you could set up a shorter name for versions of Hiragino,
    a Japanese font, like so:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许作者为本地安装的字体创建自定义名称。例如，您可以为Hiragino的各个版本设置较短的名称，如下所示：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As long as the user has one of the versions of Hiragino Kaku Gothic installed
    on their machine, those rules will cause the first three heading levels to be
    rendered using that font.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 只要用户在其计算机上安装了Hiragino Kaku Gothic的任一版本，这些规则将导致前三个标题级别使用该字体进行渲染。
- en: Online services let you upload font-face files and generate all the `@font-face`
    rules you need, convert those files to all the formats required, and hand everything
    back to you as a single package. One of the best known is [Font Squirrel’s @Font-Face
    Kit Generator](https://www.fontsquirrel.com/tools/webfont-generator). Just make
    sure you’re legally able to convert and use the font faces you’re running through
    the generator (see the following sidebar for more information).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在线服务可以让您上传字体文件并生成所有所需的 `@font-face` 规则，将这些文件转换为所有必需的格式，并将所有内容作为单个包返回给您。其中最著名的之一是
    [Font Squirrel's @Font-Face Kit Generator](https://www.fontsquirrel.com/tools/webfont-generator)。只需确保您有法律上的能力转换和使用通过生成器运行的字体（有关更多信息，请参阅以下边栏）。
- en: Restricting Character Range
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制字符范围
- en: At times you might want to use a custom font in very limited circumstances;
    for example, to ensure that a font face is applied only to characters that are
    in a specific language. In these cases, it can be useful to restrict the use of
    a font to certain characters or symbols, and the `unicode-range` descriptor allows
    precisely that.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望在非常有限的情况下使用自定义字体；例如，确保字体仅应用于特定语言的字符。在这些情况下，限制字体仅用于某些字符或符号可能是有用的，而 `unicode-range`
    描述符正好允许这样做。
- en: By default, the value of this descriptor covers U+0 to U+10FFFF, which is the
    entirety of Unicode—meaning that if a font can supply the glyph for a character,
    it will. Most of the time, this is exactly what you want. For all the other times,
    you’ll want to use specific font faces for specific kinds of content. You can
    define a single code point, a code-point range, or a set of ranges with the `?`
    wildcard character.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此描述符的值覆盖了 U+0 到 U+10FFFF 的整个 Unicode 范围，这意味着如果字体可以提供字符的字形，它将会提供。大多数情况下，这正是你想要的。在其他情况下，你会希望针对特定类型的内容使用特定的字体。你可以定义单个码点、码点范围或带有
    `?` 通配符字符的一组范围。
- en: 'To pick a few examples from the CSS Fonts Module Level 3:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从 CSS 字体模块 3 级挑选几个例子：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the first case, a single code point is specified. The font will be used only
    for the ampersand (&) character. If the ampersand is not used, the font is not
    downloaded. If it is used, the entire font file is downloaded. For this reason,
    it is sometimes good to optimize your font files to include only characters in
    the specified Unicode range, especially if, as in this case, you’re using only
    one character from a font that could contain several thousand characters.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，指定了单个码点。字体仅在和符号（&）字符中使用。如果未使用 and 字符，则不下载字体。如果使用，则下载整个字体文件。因此，有时最好优化字体文件，仅包括指定
    Unicode 范围内的字符，尤其是在这种情况下，您仅使用了包含数千个字符的字体中的一个字符。
- en: 'In the second case, a single range is specified, spanning Unicode character
    code point 590 through code point 5FF. This covers the 111 total characters used
    when writing Hebrew. Thus, an author might specify a Hebrew font and restrict
    it to be used only for Hebrew characters, even if the face contains glyphs for
    other code points:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，指定了一个单一范围，跨越 Unicode 字符码点 590 到 5FF。这涵盖了在写希伯来语时使用的 111 个字符。因此，作者可以指定希伯来字体，并将其限制为仅用于希伯来字符，即使该字体包含其他码点的字形：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the third case, a series of ranges are specified in a comma-separated list
    to cover all the Japanese characters. The interesting feature there is the `U+30??`
    value, with a question mark, which is a special format permitted in `unicode-range`
    values. The question marks are wildcards meaning “any possible digit,” making
    `U+30??` equivalent to `U+3000-30FF`. The question mark is the only “special”
    character pattern permitted in the value.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三种情况下，通过以逗号分隔的列表指定一系列范围来覆盖所有日文字符。那里的有趣特性是 `U+30??` 值，带有一个问号，这是在 `unicode-range`
    值中允许的特殊格式。问号是通配符，意味着“任何可能的数字”，使得 `U+30??` 等同于 `U+3000-30FF`。问号是值中唯一允许的“特殊”字符模式。
- en: Ranges must always ascend. Any descending range, such as `U+400-300`, is treated
    as a parsing error and ignored.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 范围必须始终是升序。任何降序范围，例如 `U+400-300`，都将被视为解析错误并被忽略。
- en: Because `@font-face` is designed to optimize lazy loading, it’s possible to
    use `unicode-range` to download only the font faces a page actually needs, with
    possibly a much smaller file size when using a font file optimized to contain
    only the defined subset character range. If the page doesn’t use any character
    in the range, the font is not downloaded. If a single character on a page requires
    a font, the whole font is downloaded.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`@font-face`被设计为优化延迟加载，可以使用`unicode-range`仅下载页面实际需要的字体面，当使用仅包含定义的子集字符范围的字体文件时，文件大小可能大大减小。如果页面不使用范围内的任何字符，则不会下载字体。如果页面上的单个字符需要字体，则整个字体将被下载。
- en: 'Suppose you have a website that uses a mixture of English, Russian, and basic
    mathematical operators, but you don’t know which will appear on any given page.
    A page could be all English, a mixture of Russian and math, and so on. Furthermore,
    suppose you have special font faces for all three types of content. You can make
    sure a user agent downloads only the faces it needs with a properly constructed
    series of `@font-face` rules:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您拥有一个网站，该网站混用英语、俄语和基本数学运算符，但您不知道每个页面上会出现哪些内容。页面可能全是英语，混合了俄语和数学符号等等。此外，假设您有三种类型内容的特殊字体。您可以通过正确构建的一系列`@font-face`规则，确保用户代理仅下载其所需的字体面。
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Because the first rule doesn’t specify a Unicode range, the entire font file
    is always downloaded—unless a page happens to contain no characters at all (and
    maybe even then). The second rule causes *myfont-cyrillic.otf* to be downloaded
    only if the page contains characters in its declared Unicode range; the third
    rule does the same for mathematical symbols.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因为第一条规则没有指定Unicode范围，所以始终会下载整个字体文件——除非页面恰好不包含任何字符（甚至可能）。第二条规则只有在页面包含其声明的Unicode范围内的字符时，才会下载*myfont-cyrillic.otf*；第三条规则对数学符号同样如此。
- en: If the content calls for the mathematical character U+2222 (∢, the spherical
    angle character), *myfont-math.otf* will be downloaded and the character from
    *myfont-math.otf* will be used, even if *myfont-general.otf* has that character.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果内容需要数学字符U+2222（∢，球面角字符），将下载*myfont-math.otf*，并使用来自*myfont-math.otf*的字符，即使*myfont-general.otf*中已有该字符。
- en: 'A more likely way to use this capability would be our ampersand example; we
    can include a fancy ampersand from a cursive font and use it in place of the ampersand
    found in a headline font. Something like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 更可能使用此功能的方式是我们的&示例；我们可以从草写体字体中包含一个漂亮的&并用它代替标题字体中的&。类似这样：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In a case like this, to keep page weights low, take a cursive font (that you
    have the rights to use) and minimize it down to contain just the ampersand character.
    You can use a tool like Font Squirrel to create a single-character font file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，为了保持页面重量轻，选择一个草写体（您有使用权的）并将其最小化以仅包含&字符。您可以使用类似Font Squirrel的工具创建单字符字体文件。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that pages can be translated with automated services like Google Translate.
    If you too aggressively restrict your Unicode ranges (say, to the range of unaccented
    letters used in English), an auto-translated version of the page into French or
    Swedish, for example, could end up a mishmash of characters in different font
    faces, as the accented characters in those languages would use a fallback font
    and the unaccented characters would be in your intended font.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，页面可以使用Google Translate等自动化服务进行翻译。如果您过于严格地限制Unicode范围（例如，仅限于英语中使用的无重音字母范围），那么页面被自动翻译成法语或瑞典语时，可能会混杂使用不同字体面的字符，因为这些语言中的重音字符将使用回退字体，而无重音字符将使用您预期的字体。
- en: Working with Font Display
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理字体显示
- en: If you’re a designer or developer of a certain vintage, you may remember the
    days of the *flash of unstyled content* (*FOUC*). This happened in earlier browsers
    that would load the HTML and display it to the screen before the CSS was finished
    loading, or, at least, before the layout of the page via CSS was finished.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是某个特定时期的设计师或开发人员，您可能还记得*未样式化内容的闪烁*（FOUC）。这种情况发生在早期浏览器加载HTML并在CSS加载完成之前（或至少在通过CSS完成页面布局之前）将其显示到屏幕上。
- en: A *flash of unstyled text* (*FOUT*) happens when a browser has loaded the page
    and the CSS and then displays the laid-out page, along with all the text, before
    it’s done loading custom fonts. FOUT causes text to appear in the default font,
    or a fallback font, before being replaced by text using the custom-loaded font.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*未样式化文本的闪烁*（*FOUT*）发生在浏览器加载页面、CSS 并显示布局页面及所有文本之前，此时尚未加载自定义字体。FOUT 导致文本以默认字体或回退字体显示，然后被使用自定义加载字体的文本替换。'
- en: A cousin to this problem is the *flash of invisible text* (*FOIT*). This user-agent
    solution to FOUT is caused when the browser detects that text is set in a custom
    font that hasn’t loaded yet and makes the text invisible until the font loads
    or a certain amount of time has passed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的姊妹问题是*不可见文本的闪烁*（*FOIT*）。这种用户代理解决方案是由于浏览器检测到文本设置为尚未加载的自定义字体时，使文本变得不可见，直到字体加载或特定时间过去为止。
- en: Since the replacement of text can change its size, whether via FOUT or FOIT,
    take care when selecting fallback fonts. If a significant height difference exists
    between the font used to initially display the text and the custom font eventually
    loaded and used, significant page reflows are likely to occur.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文本替换可能会改变其大小，无论是通过 FOUT 还是 FOIT，请在选择回退字体时谨慎。如果初始显示文本的字体与最终加载和使用的自定义字体之间存在显著的高度差异，可能会发生显著的页面重新布局。
- en: In an attempt to help with this, the `font-display` descriptor guides the browser
    to proceed with text rendering when a web font has yet to load.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，`font-display` 描述符指导浏览器在网页字体尚未加载时进行文本渲染。
- en: 'What we can call the *font-display timeline timer* starts when the user agent
    first paints the page. The timeline is divided into three periods: block, swap,
    and failure.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以称之为*字体显示时间轴计时器*，它从用户代理首次绘制页面开始。时间轴分为三个阶段：阻塞、交换和失败。
- en: During the *font-block period*, if the font face is not loaded, the browser
    renders any content that should use that font by using an invisible fallback font
    face, meaning the text content is not visible but the space is reserved. If the
    font loads successfully during the block period, the text is rendered with the
    downloaded font and made visible.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在*字体阻塞期*期间，如果字体加载失败，浏览器将使用一个不可见的回退字体来渲染应该使用该字体的任何内容，意味着文本内容不可见但保留空间。如果在阻塞期间成功加载字体，则文本将使用下载的字体进行渲染并变得可见。
- en: During the *swap period*, if the font face is not loaded, the browser renders
    the content by using a visible fallback font face, most likely one it has installed
    locally (e.g., Helvetica). If the font loads successfully, the fallback font face
    is swapped to the downloaded font.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在*交换期*期间，如果字体加载失败，浏览器将使用一个可见的回退字体来渲染内容，很可能是本地安装的字体（例如 Helvetica）。如果字体成功加载，回退字体将被下载的字体替换。
- en: Once the *failure period* is entered, the user agent treats the requested font
    as a failed load, falls back to an available font, and will not swap the font
    if it does eventually load. If the swap period is infinite, the failure period
    is never entered.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入*失败期*，用户代理将视请求的字体加载为失败，回退到可用字体，并且如果最终加载了字体，不会再交换字体。如果交换期是无限的，就永远不会进入失败期。
- en: The values of the `font-display` descriptor match these periods of the timeline,
    and their effect is to emphasize one part of the timeline at the expense of the
    others. The effects are summarized in [Table 14-4](#font-display-values).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-display` 描述符的值与这些时间轴的时期相匹配，它们的效果是强调时间轴的某一部分，而牺牲其他部分。其效果总结在[Table 14-4](#font-display-values)中。'
- en: Table 14-4\. `font-display` values
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 14-4\. `font-display` 的值
- en: '| Value | Block period^([a](ch14.html#fn-fdv-1)) | Swap period^([a](#fn-fdv-1))
    | Failure period^([a](#fn-fdv-1)) |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 阻塞期间^([a](ch14.html#fn-fdv-1)) | 交换期间^([a](#fn-fdv-1)) | 失败期间^([a](#fn-fdv-1))
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `auto` | Browser defined | Browser defined | Browser defined |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `auto` | 浏览器定义 | 浏览器定义 | 浏览器定义 |'
- en: '| `block` | 3s | Infinite | *n/a* |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `block` | 3s | 无限 | *n/a* |'
- en: '| `swap` | < 100 ms | Infinite | *n/a* |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `swap` | < 100 ms | 无限 | *n/a* |'
- en: '| `fallback` | < 100 ms | 3s | Infinite |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `fallback` | < 100 ms | 3s | 无限 |'
- en: '| `optional` | 0 | 0 | Infinite |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `optional` | 0 | 0 | 无限 |'
- en: '| ^([a](ch14.html#fn-fdv-1-marker)) Recommended period length; actual times
    may vary |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch14.html#fn-fdv-1-marker)) 推荐的期间长度；实际时间可能有所不同 |'
- en: 'Let’s consider each value in turn:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次考虑每个值：
- en: '`block`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`block`'
- en: Tells the browser to hold open space for the font for a few seconds (3 is what
    the specification recommends, but browsers may choose their own values), and then
    enters an infinitely long swap period. If the font ever finally loads, even if
    it’s 10 minutes later, the fallback font that was used in its place will be replaced
    with the loaded font.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`swap`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Is similar, except it doesn’t hold the space open for longer than a fraction
    of a second (100 milliseconds is the recommendation). A fallback font is then
    used, and is replaced with the intended font whenever it finally loads.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '`fallback`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Gives the same brief block window that `swap` does, and then enters a short
    period in which the fallback font can be replaced by the intended font. If that
    short period (3 seconds is recommended) is exceeded, the fallback font is used
    indefinitely, and the user agent may cancel the download of the intended font
    since a swap will never happen.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`optional`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'Is the most stringent of them all: if the font isn’t immediately available
    at first paint, the user agent goes straight to the fallback font and skips right
    over the block and swap periods to sit in the failure period for the rest of the
    page’s life.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Combining Descriptors
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Something that might not be immediately obvious is that you can supply multiple
    descriptors in order to assign specific faces for specific property combinations.
    For example, you can assign one face to bold text, another to italic text, and
    a third to text that is both bold and italic.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'This capability is implicit, as any undeclared descriptor is assigned its default
    value. Let’s consider a basic set of three face assignments, using both descriptors
    we’ve covered and a few we’ll get to in a bit:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You may have noticed that we’ve explicitly declared some descriptors with their
    default values, even though we didn’t need to. The previous example is exactly
    the same as a set of three rules in which we remove every descriptor that shows
    a value of `normal`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In all three rules, no font-stretching occurs beyond the default `normal` amount,
    and the values of `font-weight` and `font-style` vary by which face is being assigned.
    So what if we want to assign a specific face to unstretched text that’s both bold
    and italic?
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: And then what about bold, italic, condensed text?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How about normal-weight, italic, condensed text?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We could keep this up for quite a while, but let’s stop there. If we take all
    those rules and strip out anything with a `normal` value, we end up with the following
    result, illustrated in [Figure 14-3](#employing_a_variety_of_faces):'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![css5 1403](assets/css5_1403.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Figure 14-3\. Employing a variety of faces
  id: totrans-210
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you declare `html { +font-family: switzera;}`, you don’t have to declare
    the font family again for additional selectors that use `switzera`. The browser
    will use the correct font file for your bold, italic, stretched, and normal text
    depending on your selector-specific values for the `font-weight`, `font-style`,
    and `font-stretch` property values.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你声明 `html { +font-family: switzera;}`，那么在使用 `switzera` 的其他选择器中不需要再次声明字体族。浏览器会根据你为
    `font-weight`、`font-style` 和 `font-stretch` 属性值设置的选择器特定值，为粗体、斜体、拉伸和普通文本选择正确的字体文件。'
- en: The point is, we can have a specific font file for every weight, style, and
    stretch. The ability to declare all the variations within a few `@font-face` rules
    with a single `font-family` name ensures cohesive typeface design and avoids font
    synthesis even when using nonvariable fonts. Declaring all the variations of a
    font via `@font-face`, with the same `font-family` descriptor name, reduces `font-family`
    property overrides, reducing the chance of other developers on your team using
    the wrong font file for a specific selector.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，我们可以为每种粗细、样式和拉伸设置特定的字体文件。通过几个 `@font-face` 规则使用同一个 `font-family` 名称声明所有变体，确保了统一的字体设计，即使在使用非可变字体时也避免了字体合成。通过
    `@font-face` 声明字体的所有变体，使用相同的 `font-family` 描述符名称，减少了 `font-family` 属性的覆盖，降低了团队中其他开发人员为特定选择器错误使用字体文件的可能性。
- en: As you can see, when using standard fonts, a lot of possible combinations exist
    just for those three descriptors—consider that `font-stretch` has 10 possible
    values—but you’ll likely never have to run through them all. In fact, most font
    families don’t have as many faces as SwitzeraADF offers (24 at last count), so
    there wouldn’t be much point in writing out all the possibilities. Nevertheless,
    the options are there, and in some cases you may find that you need to assign,
    say, a specific face for bold condensed text so that the user agent doesn’t try
    to compute them for you. Or else use a variable font that has weight and condensing
    axes.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，使用标准字体时，这三个描述符可能有大量的组合方式——考虑到 `font-stretch` 有 10 种可能的值——但你可能永远不必尝试全部。事实上，大多数字体族没有像
    SwitzeraADF 提供的那么多字体（截至最后统计为 24 种），因此将所有可能性写出来可能没有多少意义。尽管如此，这些选项确实存在，在某些情况下，你可能会发现需要为粗体压缩文本指定特定的字体，以便用户代理不会尝试为你计算它们。或者使用具有权重和收缩轴的可变字体。
- en: Now that we’ve covered `@font-face` and provided an overview of a few descriptors,
    let’s get back to properties.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 `@font-face` 并概述了几个描述符，让我们回到属性。
- en: Font Weights
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体粗细
- en: Most of us are used to normal and bold text, which are the two most basic font
    weights available. CSS gives you a lot more control over font weights with the
    property `font-weight`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人习惯于普通和粗体文本，这是两种最基本的字体粗细。CSS 通过 `font-weight` 属性让你对字体粗细有更多控制。
- en: The <*`number`*> value can be from `1` to `1000`, inclusive, where `1` is the
    lightest and `1000` is the heaviest possible weight. Unless you are using variable
    fonts, discussed later, limited weights are almost always available for a font
    family (sometimes there is only a single weight).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <*`number`*> 的值可以从 `1` 到 `1000`，包括这两个数值，其中 `1` 为最轻，`1000` 为最重的可能粗细。除非使用稍后讨论的可变字体，否则字体族通常提供有限的粗细选择（有时只有一个单一的粗细）。
- en: Generally speaking, the heavier a font weight becomes, the darker and “more
    bold” a font appears. There are a great many ways to label a heavy font face.
    For example, the font family known as SwitzeraADF has variants such as SwitzeraADF
    Bold, SwitzeraADF Extra Bold, SwitzeraADF Light, and SwitzeraADF Regular. All
    of these use the same basic font shapes, but each has a different weight.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，字体的粗细增加，字体看起来越加深和“更加粗”。有许多方法可以标记重体字体。例如，被称为 SwitzeraADF 的字体族有诸如 SwitzeraADF
    Bold、SwitzeraADF Extra Bold、SwitzeraADF Light 和 SwitzeraADF Regular 等变体。所有这些字体使用相同的基本字体形状，但每种都有不同的粗细。
- en: If the specified weight doesn’t exist, a nearby weight is used. [Table 14-5](#weight_mappings)
    lists the numbers used for each of the commonly accepted font weight labels, as
    defined in the `"wght"` variation axis. If a font has only two weights corresponding
    to `400` and `700` (normal and bold), any number value for `font-weight` will
    be mapped to the closest value. Thus, any `font-weight` value from `1` through
    `550` will be mapped to `400`, and any value greater than `550` up through `1000`
    will be mapped to `700`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定的字重不存在，将使用最接近的字重。[表格 14-5](#weight_mappings) 列出了用于每个通常接受的字重标签的数字，如在 `"wght"`
    变化轴中定义的。如果字体仅有两种字重对应 `400` 和 `700`（普通和粗体），则任何`font-weight`值将映射到最接近的值。因此，任何 `1`
    到 `550` 的 `font-weight` 值将映射到 `400`，而任何大于 `550` 到 `1000` 的值将映射到 `700`。
- en: Table 14-5\. Weight mappings
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 14-5\. 字重映射
- en: '| Value | Mapping |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| Value | 映射 |'
- en: '| --- | --- |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | Lowest valid value |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 最低有效值 |'
- en: '| 100 | Thin |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 100 | 细体 |'
- en: '| 200 | Extra Light (Ultra Light) |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 200 | 超轻（超极轻） |'
- en: '| 300 | Light |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 300 | 轻体 |'
- en: '| 400 | Normal |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 400 | 普通 |'
- en: '| 500 | Medium |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 500 | 中等 |'
- en: '| 600 | Semi Bold (Demi Bold) |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 600 | 半粗（中等粗体） |'
- en: '| 700 | Bold |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 700 | 粗体 |'
- en: '| 800 | Extra Bold (Ultra Bold) |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 800 | 超粗（超极粗） |'
- en: '| 900 | Black (Heavy) |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 900 | 黑体（重体） |'
- en: '| 950 | Extra Black (Ultra Black) |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 950 | 超黑（超极黑） |'
- en: '| 1000 | Highest valid value |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 1000 | 最高有效值 |'
- en: 'Let’s say that you want to use SwitzeraADF for a document but would like to
    make use of all those heaviness levels. If your user has all the font files locally
    on their machine and you didn’t use `@font-face` to rename all the options to
    `Switzera`, you could refer to them directly through the `font-family` property—but
    you really shouldn’t have to do that. It’s no fun having to write a stylesheet
    like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望在文档中使用 SwitzeraADF，但希望利用所有这些字重级别。如果用户在其计算机上具有所有字体文件，并且您没有使用 `@font-face`
    来重命名所有选项为 `Switzera`，则可以直接通过 `font-family` 属性引用它们，但实际上你不应该这样做。编写这样的样式表不是一件有趣的事情：
- en: '[PRE29]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'That’s pretty tedious. This is a perfect example of why specifying a single
    font family for the whole document and then assigning different weights to various
    elements by using `@font-face` is so powerful: you can include several `@font-face`
    declarations, each with the same `font-family` name, but with various values for
    the `font-weight` descriptors. Then you can use different font files with fairly
    simple `font-weight` declarations:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当乏味。这正是为什么通过为整个文档指定单一字体系列，然后通过 `@font-face` 为各个元素分配不同字重如此强大的典范：可以包含几个 `@font-face`
    声明，每个都具有相同的 `font-family` 名称，但具有不同的 `font-weight` 描述符值。然后可以使用不同的字体文件进行相对简单的 `font-weight`
    声明：
- en: '[PRE30]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The first declaration says the `<strong>` element should be displayed using
    a bold font face or, to put it another way, a font face that is heavier than the
    normal font face. The second declaration says `<b>` should use a font face that
    is the inherited `font-weight` value plus 100.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个声明表示应使用粗体字体或者换句话说，比普通字体更重的字体来显示`<strong>`元素。第二个声明表示`<b>`应使用继承的`font-weight`值再加上100的字体。
- en: 'What’s really happening behind the scenes is that heavier faces of the font
    are used for displaying `<strong>` and `<b>` elements. Thus, if you display a
    paragraph using Times, and part of it is bold, then two faces of the same font
    are really in use: Times and TimesBold. The regular text is displayed using Times,
    and the bold and bolder text are displayed using TimesBold.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 实际发生的事情是使用字体的更重版本来显示 `<strong>` 和 `<b>` 元素。因此，如果您使用 Times 显示段落，并且其中的一部分是粗体，则实际上使用了同一字体的两个版本：Times
    和 TimesBold。正常文本使用 Times 显示，而粗体文本则使用 TimesBold 显示。
- en: If the font doesn’t have a boldfaced version, it may be synthesized by the browser,
    creating a faux bold. (To prevent this, use `font-synthesis` property, which is
    described later.)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字体没有粗体版本，则浏览器可能会合成伪粗体。（要防止此情况，请使用稍后描述的 `font-synthesis` 属性。）
- en: How Weights Work
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字重的工作原理
- en: To understand how a user agent determines the heaviness, or weight, of a given
    font variant (not to mention how weight is inherited), it’s easiest to start by
    talking about the values `1` through `1000` inclusive, specifically the values
    divisible by 100, `100` through `900`. These number values were defined to map
    to a relatively common feature of font design that gives a font nine levels of
    weight. If a nonvariable font family has faces for all nine weight levels available,
    the numbers are mapped directly to the predefined levels, with `100` as the lightest
    variant of the font and `900` as the heaviest.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解用户代理如何确定给定字体变体的重量（以及如何继承重量），最简单的方法是从谈论`1`到`1000`之间的值开始，特别是那些可被100整除的值，即`100`到`900`。这些数字值被定义为映射到字体设计中一个相对常见的特性，即给字体九个权重级别。如果非变量字体族具有所有九个权重级别的面孔，则数字直接映射到预定义级别，其中`100`作为字体的最轻变体，`900`作为最重变体。
- en: In fact, these numbers have no intrinsic weight. The CSS specification says
    only that each number corresponds to a weight at least as heavy as the number
    that precedes it. Thus, `100`, `200`, `300`, and `400` might all map to a single
    relatively lightweight variant; `500` and `600` could correspond to a single medium-heavy
    font variant; and `700`, `800`, and `900` could all produce the same very heavy
    font variant. As long as no number corresponds to a variant that is lighter than
    the variant assigned to the previous lower number, everything will be all right.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这些数字本身没有固有的权重。CSS规范只是说每个数字对应至少与前一个数字相同重的变体。因此，`100`、`200`、`300`和`400`可能映射到一个相对较轻的变体；`500`和`600`可能对应一个中等重的变体；`700`、`800`和`900`可能都产生相同非常重的字体变体。只要没有数字对应于比前一个较低数字分配的变体更轻，一切都会没问题。
- en: When it comes to nonvariable fonts, these numbers are defined to be equivalent
    to certain common variant names. The value `400` is defined to be equivalent to
    `normal`, and `700` corresponds to `bold`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非变量字体，这些数字被定义为等同于某些常见的变体名称。值`400`被定义为等同于`normal`，而`700`对应于`bold`。
- en: 'A user agent has to do some calculations if a font family has fewer than nine
    weights. In this case, the user agent must fill in the gaps in a predetermined
    way:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个字体族少于九个权重，则用户代理必须以预定的方式填补这些空白：
- en: If the value `500` is unassigned, it is given the same font weight as that assigned
    to `400`.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值`500`未分配，则赋予与`400`相同的字重。
- en: If `300` is unassigned, it is given the next variant lighter than `400`. If
    no lighter variant is available, `300` is assigned the same variant as `400`.
    In this case, it will usually be Normal or Medium. This method is also used for
    `200` and `100`.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`300`未分配，则赋予比`400`更轻的下一个变体。如果没有更轻的变体可用，则`300`被分配与`400`相同的变体。在这种情况下，通常是Normal或Medium。这种方法也适用于`200`和`100`。
- en: If `600` is unassigned, it is given the next variant darker than that assigned
    for `500`. If no darker variant is available, `600` is assigned the same variant
    as `500`. This method is also used for `700`, `800`, and `900`.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`600`未分配，则赋予比分配给`500`的变体更暗的下一个变体。如果没有更暗的变体可用，则`600`被分配与`500`相同的变体。这种方法也适用于`700`、`800`和`900`。
- en: To illustrate this weighting scheme more clearly, let’s look at a couple of
    examples. In the first example, assume that the font family Karrank% is an OpenType
    font, so it has nine weights already defined. In this case, the numbers are assigned
    to each level, and the keywords `normal` and `bold` are assigned to the numbers
    `400` and `700`, respectively.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明这种权重方案，让我们看几个例子。在第一个例子中，假设字体族Karrank%是一个OpenType字体，因此已经定义了九种权重。在这种情况下，数字被分配给每个级别，关键字`normal`和`bold`分别分配给数字`400`和`700`。
- en: In our second example, consider the font family SwitzeraADF. Hypothetically,
    its variants might be assigned numeric values for `font-weight`, as shown in [Table 14-6](#hypothetical_weight_assignments_for_a_sp).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第二个例子中，考虑字体族SwitzeraADF。假设其变体可能被分配数字值作为`font-weight`，如[表 14-6](#hypothetical_weight_assignments_for_a_sp)所示。
- en: Table 14-6\. Hypothetical weight assignments for a specific font family
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-6\. 特定字体族的假设权重分配
- en: '| Font face | Assigned keyword | Assigned number(s) |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 字体 | 指定关键字 | 指定数字 |'
- en: '| --- | --- | --- |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| SwitzeraADF Light |  | `100` through `300` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| SwitzeraADF Light |  | `100` 到 `300` |'
- en: '| SwitzeraADF Regular | `normal` | `400` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| SwitzeraADF Regular | `normal` | `400` |'
- en: '| SwitzeraADF Medium |  | `500` |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| SwitzeraADF Medium |  | `500` |'
- en: '| SwitzeraADF Bold | `bold` | `600` through `700` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| SwitzeraADF Bold | `bold` | `600` 到 `700` |'
- en: '| SwitzeraADF Extra Bold |  | `800` through `900` |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| SwitzeraADF Extra Bold |  | `800`到`900` |'
- en: The first three number values are assigned to the lightest weight. The Regular
    face gets the keyword `normal` and the number weight `400`. Since there is a Medium
    font, it’s assigned to the number `500`. There is nothing to assign to `600`,
    so it’s mapped to the Bold font face, which is also the variant to which `700`
    and `bold` are assigned. Finally, `800` and `900` are assigned to the Black and
    Ultra Black variants, respectively. Note that this last assignment would happen
    only if those faces had the top two weight levels already assigned. Otherwise,
    the user agent might ignore them and assign `800` and `900` to the Bold face instead,
    or it might assign them both to one or the other of the Black variants.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个数字值分配给最轻的权重。常规字体获得关键字`normal`和数字权重`400`。由于有一个中等字体，它被分配给数字`500`。没有任何内容分配给`600`，因此它被映射到粗体字体，这也是分配给`700`和`bold`的变体。最后，`800`和`900`分配给黑体和超黑体变体。请注意，只有在这些字体已经分配了前两个最高权重级别时，才会发生最后的分配。否则，用户代理可能会忽略它们，并将`800`和`900`分配给粗体字体，或者将它们都分配给黑体变体中的一个。
- en: The `font-weight` property is inherited, so if you set a paragraph to be `bold`
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-weight`属性是继承的，因此如果您将段落设置为`bold`'
- en: '[PRE31]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: then all of its children will inherit that boldness, as we see in [Figure 14-4](#inherited_font-weight).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 那么它的所有子元素都将继承该粗体效果，正如我们在[图 14-4](#inherited_font-weight)中看到的。
- en: '![css5 1404](assets/css5_1404.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1404](assets/css5_1404.png)'
- en: Figure 14-4\. Inherited font-weight
  id: totrans-265
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-4\. 继承的字体粗细
- en: 'This isn’t unusual, but the situation gets interesting when you use the last
    two values we have to discuss: `bolder` and `lighter`. In general terms, these
    keywords have the effect you’d anticipate: they make text more or less bold compared
    to its parent’s font weight. How they do so is slightly complicated. First, let’s
    consider `bolder`.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不罕见，但当您使用我们要讨论的最后两个值：`bolder`和`lighter`时，情况变得有趣。一般来说，这些关键字的效果是您预期的：它们使文本相对于其父元素的字体重量更加粗或更加细。它们如何做到这一点略微复杂。首先，让我们考虑`bolder`。
- en: If you set an element to have a weight of `bolder` or `lighter`, the user agent
    first must determine what `font-weight` value was inherited from the parent element.
    Once it has that number (say, `400`), it then changes the value as shown in [Table 14-7](#bolder_and_lighter_weight_mappings).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将元素设置为`bolder`或`lighter`的权重，用户代理首先必须确定从父元素继承的`font-weight`值是多少。一旦它有了这个数字（比如，`400`），然后根据[表 14-7](#bolder_and_lighter_weight_mappings)中所示的值进行更改。
- en: Table 14-7\. `bolder` and `lighter` weight mappings
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-7\. `bolder`和`lighter`权重映射
- en: '| Inherited value | `bolder` | `lighter` |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| 继承的值 | `bolder` | `lighter` |'
- en: '| --- | --- | --- |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| value < 100 | 400 | No change |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| value < 100 | 400 | 无变化 |'
- en: '| 100 ≤ value < 350 | 400 | 100 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 100 ≤ value < 350 | 400 | 100 |'
- en: '| 350 ≤ value < 550 | 700 | 100 |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 350 ≤ value < 550 | 700 | 100 |'
- en: '| 550 ≤ value < 750 | 900 | 400 |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 550 ≤ value < 750 | 900 | 400 |'
- en: '| 750 ≤ value < 900 | 900 | 700 |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 750 ≤ value < 900 | 900 | 700 |'
- en: '| 900 ≤ value | No change | 700 |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| 900 ≤ value | 无变化 | 700 |'
- en: 'Thus, you might encounter the following situations, illustrated in [Figure 14-5](#text_trying_to_be_bolder):'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可能会遇到以下情况，如[图 14-5](#text_trying_to_be_bolder)所示：
- en: '[PRE32]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![css5 1405](assets/css5_1405.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1405](assets/css5_1405.png)'
- en: Figure 14-5\. Text trying to be bolder
  id: totrans-280
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-5\. 尝试加粗的文本
- en: In the first example, the user agent moves up from `400` to `700`. In the second
    example, `<h1>` text is already set to `bold`, which equates to `700`. If no bolder
    face is available, the user agent sets the weight of `<b>` text within an `<h1>`
    to `900`, since that is the next step up from `700`. Since `900` is assigned to
    the same font face as `700`, no visible difference exists between normal `<h1>`
    text and bold `<h1>` text, but the weight values are different nonetheless.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，用户代理从`400`上升到`700`。在第二个示例中，`<h1>`文本已经设置为`bold`，相当于`700`。如果没有更粗的字体可用，用户代理将`<h1>`中的`<b>`文本的权重设置为`900`，因为这是从`700`到下一个级别的步骤。由于`900`分配给与`700`相同的字体，因此正常的`<h1>`文本和粗体的`<h1>`文本之间没有可见的区别，但权重值仍然不同。
- en: As you might expect, `lighter` works in much the same way, except it causes
    the user agent to move down the weight scale instead of up.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所预期的那样，`lighter`的工作方式基本相同，只是导致用户代理向下移动权重比例，而不是向上。
- en: The font-weight Descriptor
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体粗细描述符
- en: With the `font-weight` descriptor, authors can assign faces of varying weights
    to the weighting levels permitted by the `font-weight` property. The allowable
    values are different for the descriptor, which supports `auto`, `normal`, `bold`,
    or one to two numeric values as a range. Neither `lighter` nor `bolder` are supported.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `font-weight` 描述符，作者可以为 `font-weight` 属性允许的加权级别分配不同权重的面。该描述符支持 `auto`、`normal`、`bold`，或一到两个数值作为范围。不支持
    `lighter` 和 `bolder`。
- en: 'For example, the following rules explicitly assign five faces to six `font-weight`
    values:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下规则明确将五个字体面赋给六个 `font-weight` 值：
- en: '[PRE33]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'With these faces assigned, the author now has multiple weighting levels available
    for their use, as illustrated in [Figure 14-6](#using_declared_font-weight_faces):'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些指定的字体，作者现在可以利用多个加权级别，如[图 14-6](#using_declared_font-weight_faces)所示：
- en: '[PRE34]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![css5 1406](assets/css5_1406.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1406](assets/css5_1406.png)'
- en: Figure 14-6\. Using declared font-weight faces
  id: totrans-290
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-6\. 使用声明的 `font-weight` 字体面
- en: In any given situation, the user agent picks which face to use depending on
    the exact value of a `font-weight` property, using the resolution algorithm detailed
    in [“How Weights Work”](#how_weights_work). While the `font-weight` property has
    numerous keyword values, the `font-weight` descriptor accepts only `normal` and
    `bold` as keywords, and any number from `1` to `1000` inclusive.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，用户代理根据 `font-weight` 属性的确切值选择要使用的字体面，使用详细的分辨率算法，详见[“权重如何工作”](#how_weights_work)。虽然
    `font-weight` 属性有许多关键字值，但 `font-weight` 描述符只接受 `normal` 和 `bold` 作为关键字，以及从 `1`
    到 `1000`（包括）的任何数字。
- en: Font Size
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体大小
- en: While size doesn’t have a `@font-face` descriptor, you need to understand the
    `font-size` property to better understand some of the descriptors to come, so
    we’ll explore it now. The methods for determining font size are both very familiar
    and very different.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大小没有 `@font-face` 描述符，但您需要理解 `font-size` 属性，以更好地理解即将介绍的一些描述符，因此我们现在来探讨它。确定字体大小的方法既非常熟悉又非常不同。
- en: What can be a real head-scratcher at first is that different fonts declared
    to be the same size may not appear to be the same size. This is because the actual
    relation of the `font-size` property to what you see rendered is determined by
    the font’s designer. This relationship is set as an *em square* (some call it
    an *em box*) within the font itself. This em square (and thus the font size) doesn’t
    have to refer to any boundaries established by the characters in a font. Instead,
    it refers to the distance between baselines when the font is set without any extra
    leading (`` `line-height` `` in CSS).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 最初可能令人费解的是，被声明为相同大小的不同字体可能看起来不一样大。这是因为 `font-size` 属性与实际渲染结果之间的关系由字体设计者决定。这种关系设置为字体本身的
    *em 方框*（有些人称之为 *em 方框*），在没有额外行距（CSS 中的 `` `line-height` ``）的情况下，它指的是基线之间的距离。
- en: The effect of `font-size` is to provide a size for the em box of a given font.
    This does not guarantee that any of the displayed characters will be this size.
    It is quite possible for fonts to have characters that are taller than the default
    distance between baselines. For that matter, a font might be defined such that
    all of its characters are smaller than its em square, as many fonts are. [Figure 14-7](#font_characters_and_em_squares)
    shows some hypothetical examples.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-size` 的效果是为给定字体的 em 方框提供一个大小。这并不保证显示的字符会是这个大小。事实上，字体可能有比基线之间默认距离更高的字符。而且，许多字体定义可能所有字符都比其
    em 方框小。[图 14-7](#font_characters_and_em_squares)展示了一些假设的例子。'
- en: '![css5 1407](assets/css5_1407.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1407](assets/css5_1407.png)'
- en: Figure 14-7\. Font characters and em squares
  id: totrans-297
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-7\. 字体字符和 em 方框
- en: Using Absolute Sizes
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用绝对大小
- en: 'Having established all that, we turn now to the absolute-size keywords. The
    `font-size` property has eight absolute-size values: `xx-small`, `x-small`, `small`,
    `medium`, `large`, `x-large`, `xx-large`, and the relatively new `xxx-large`.
    These are not defined precisely but instead are defined relative to each other,
    as [Figure 14-8](#absolute_font_sizes) demonstrates:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一切都已经明确的基础上，现在我们转向绝对大小关键字。`font-size` 属性有八个绝对大小值：`xx-small`、`x-small`、`small`、`medium`、`large`、`x-large`、`xx-large`，以及相对较新的
    `xxx-large`。这些值没有精确定义，而是相对于彼此定义，如[图 14-8](#absolute_font_sizes)所示：
- en: '[PRE35]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![css5 1408](assets/css5_1408.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1408](assets/css5_1408.png)'
- en: Figure 14-8\. Absolute font sizes
  id: totrans-302
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-8\. 绝对字体大小
- en: In the CSS1 specification, the difference (or *scaling factor*) between one
    absolute size and the next was 1.5 going up the ladder, or 0.66 going down. This
    was determined to be too large a scaling factor. In CSS2, the suggested scaling
    factor for computer screens between adjacent indexes was 1.2\. This didn’t resolve
    all the issues, though, as it created issues for the small sizes.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS1规范中，一个绝对大小与下一个之间的差异（或*缩放因子*）为1.5，这被认为是一个过大的缩放因子。在CSS2中，计算机屏幕上相邻索引之间的建议缩放因子为1.2。然而，这并没有解决所有问题，因为它对小尺寸造成了问题。
- en: The CSS Fonts Level 4 specification doesn’t have a one-size-fits-all scaling
    factor. Rather, each absolute-size keyword value has a size-specific scaling factor
    based on the value of `medium` (see [Table 14-8](#size_mappings)). The `small`
    value is listed as eight-ninths the size of `medium`, while `xx-small` is three-fifths.
    In any case, the scaling factors are guidelines, and user agents are free to alter
    them for any reason.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: CSS Fonts Level 4 规范并没有一个适用于所有的缩放因子。相反，每个绝对大小关键字值都有一个基于`medium`值的特定大小缩放因子（参见[Table 14-8](#size_mappings)）。`small`的值被列为`medium`的八分之九大小，而`xx-small`是三分之五。无论如何，这些缩放因子都是指导方针，用户代理可以出于任何原因自由地修改它们。
- en: Table 14-8\. Font-size mappings
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-8\. 字体大小映射
- en: '| CSS absolute-size values | `xx-small` | `x-small` | `small` | `medium` |
    `large` | `x-large` | `xx-large` | `xxx-large` |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| CSS 绝对大小值 | `xx-small` | `x-small` | `small` | `medium` | `large` | `x-large`
    | `xx-large` | `xxx-large` |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| Scaling factor | 3/5 | 3/4 | 8/9 | 1 | 6/5 | 3/2 | 2/1 | 3/1 |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| 缩放因子 | 3/5 | 3/4 | 8/9 | 1 | 6/5 | 3/2 | 2/1 | 3/1 |'
- en: '| Sizes at `medium`==`16px` | `9px` | `10px` | `13px` | `16px` | `18px` | `24px`
    | `32px` | `48px` |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `medium`==`16px`的大小 | `9px` | `10px` | `13px` | `16px` | `18px` | `24px`
    | `32px` | `48px` |'
- en: '| HTML heading equivalent | `h6` | - | `h5` | `h4` | `h3` | `h2` | `h1` | *n/a*
    |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| HTML标题等效 | `h6` | - | `h5` | `h4` | `h3` | `h2` | `h1` | *n/a* |'
- en: Note that we’ve set the default size, `medium`, explicitly to `16px`. The default
    `font-size` value is the same, `medium`, for all generic font families, but the
    `medium` keyword may have different definitions based on operating system or browser
    user settings. For example, in many browsers, serif and sans-serif fonts have
    `medium` equal to `16px`, but `monospace` set to `13px`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们明确将默认大小`medium`设置为`16px`。所有通用字体族的默认`font-size`值都是相同的`medium`，但基于操作系统或浏览器用户设置，`medium`关键字可能有不同的定义。例如，在许多浏览器中，serif和sans-serif字体的`medium`等于`16px`，但`monospace`设置为`13px`。
- en: Warning
  id: totrans-312
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of late 2022, the `xxx-large` keyword is not supported by Safari or Opera,
    either on desktop or mobile devices.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年底，`xxx-large`关键字在Safari或Opera上，无论是桌面版还是移动版，都不支持。
- en: Using Relative Sizes
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用相对大小
- en: Just as `font-weight` has the keywords `bolder` and `lighter`, the `font-size`
    property has relative-size keywords called `larger` and `smaller`. Much as with
    relative font weights, these keywords cause the computed value of `font-size`
    to move up and down a scale of size values.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`font-weight`有关键词`bolder`和`lighter`一样，`font-size`属性有相对大小关键词`larger`和`smaller`。与相对字重一样，这些关键词导致`font-size`的计算值在一个大小值的比例尺上上下移动。
- en: 'The `larger` and `smaller` keywords are fairly straightforward: they cause
    the size of an element to be shifted up or down the absolute-size scale, relative
    to their parent element:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`larger`和`smaller`关键字相对较为直接：它们导致元素的大小相对于其父元素在绝对大小比例上上移或下移：'
- en: '[PRE36]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Unlike the relative values for weight, the relative-size values are not necessarily
    constrained to the limits of the absolute-size range. Thus, a font’s size can
    be pushed beyond the sizes for `xx-small` and `xxx-large`. If the parent element
    `font-size` is the largest or smallest absolute value, the browser will use a
    scaling factor between 1.2 and 1.5 to create an even smaller or larger font size.
    For example:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 与字重的相对值不同，相对大小值不一定受到绝对大小范围的限制。因此，字体的大小可以超出`xx-small`和`xxx-large`的大小。如果父元素的`font-size`是最大或最小的绝对值，浏览器将使用1.2到1.5之间的缩放因子来创建更小或更大的字体大小。例如：
- en: '[PRE38]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As you can see in [Figure 14-9](#relative_font_sizing_at_the_edges_of_the),
    the emphasized text in the `<h1>` element is slightly larger than `xxx-large`.
    The amount of scaling is left up to the user agent, with a scaling factor in the
    range of 1.2 to 1.5 being preferred, but not required. The `em` text in the paragraph
    is shifted up one slot to 140%.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[图 14-9](#relative_font_sizing_at_the_edges_of_the)中所看到的，`<h1>` 元素中的强调文本略大于
    `xxx-large`。缩放的量由用户代理决定，首选缩放因子在 1.2 到 1.5 的范围内，但不是必须的。段落中的 `em` 文本向上移动一个插槽至 140%。
- en: '![css5 1409](assets/css5_1409.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1409](assets/css5_1409.png)'
- en: Figure 14-9\. Relative font sizing at the edges of the absolute sizes
  id: totrans-324
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-9\. 绝对大小边缘的相对字体大小
- en: Warning
  id: totrans-325
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: User agents are not required to increase or decrease font size beyond the limits
    of the absolute-size keywords, but they may do so anyway. Also, while it is technically
    possible to declare `smaller` than `xx-small`, small text can be very difficult
    to read onscreen, leading to content being not accessible to users. Use very small
    text sparingly and with a great deal of caution.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 用户代理不要求在绝对大小关键字的限制之外增加或减少字体大小，但它们仍可能这样做。此外，尽管在技术上可以声明比 `xx-small` 更小，但小文字在屏幕上很难阅读，导致内容对用户不可访问。请谨慎地少量使用非常小的文本。
- en: Setting Sizes as Percentages
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将大小设置为百分比
- en: 'In a way, percentage values are very similar to the relative-size keywords.
    A percentage value is always computed in terms of whatever size is inherited from
    an element’s parent. Unlike the size keywords previously discussed, percentages
    permit much finer control over the computed font size. Consider the following
    example, illustrated in [Figure 14-10](#throwing_percentages_into_the_mix):'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，百分比值与相对大小关键字非常相似。百分比值始终按照从元素父级继承的大小计算。与前面讨论过的大小关键字不同，百分比允许对计算出的字体大小进行更精细的控制。考虑下面的例子，图示在[图 14-10](#throwing_percentages_into_the_mix)中。
- en: '[PRE40]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![css5 1410](assets/css5_1410.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1410](assets/css5_1410.png)'
- en: Figure 14-10\. Throwing percentages into the mix
  id: totrans-332
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-10\. 将百分比混合使用
- en: In this example, the exact pixel-size values are shown. These are the values
    calculated by the browser, regardless of the displayed size of the characters
    onscreen, which may have been rounded to the nearest whole number of pixels.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，显示了确切的像素大小值。这些是浏览器计算的值，不考虑屏幕上字符的显示大小，可能已四舍五入到最接近的整数像素。
- en: 'When using em measurements, the same principles apply as with percentages,
    such as the inheritance of computed sizes and so forth. CSS defines the length
    value `em` to be equivalent to percentage values, in the sense that `1em` is the
    same as `100%` when sizing fonts. Thus, the following would yield identical results,
    assuming that both paragraphs have the same parent element:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 em 测量时，同样的原则适用于百分比，如计算大小的继承等。CSS 将长度值 `em` 定义为与百分比值相等，即当调整字体大小时，`1em` 等同于
    `100%`。因此，假设两个段落具有相同的父元素，则以下内容将产生相同的结果：
- en: '[PRE42]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As with the relative-size keywords, percentages are effectively cumulative.
    Thus, the following markup is displayed as shown in [Figure 14-11](#the_issues_of_inheritance):'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 与相对大小关键字一样，百分比效果是累加的。因此，以下标记将按[图 14-11](#the_issues_of_inheritance)显示：
- en: '[PRE43]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![css5 1411](assets/css5_1411.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1411](assets/css5_1411.png)'
- en: Figure 14-11\. The issues of inheritance
  id: totrans-340
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-11\. 继承的问题
- en: 'The size value for the `<strong>` element shown in [Figure 14-11](#the_issues_of_inheritance)
    is computed as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`<strong>` 元素的大小值如[图 14-11](#the_issues_of_inheritance)所示计算如下：'
- en: 12 px × 120% = 14.4 px + 14.4 px × 135% = 19.44 px
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12 px × 120% = 14.4 px + 14.4 px × 135% = 19.44 px
- en: 'The problem of runaway scaling can go the other direction, too. Imagine the
    effect of the following rule on a nested list item if we have lists nested four
    levels deep:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放失控的问题也可能朝着另一个方向发展。如果我们嵌套了四层深的列表，想象以下规则对嵌套列表项的影响。
- en: '[PRE45]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The unordered list nested four levels deep would have a computed `font-size`
    value 40.96% the size of the parent of the top-level list. Every nested list would
    have a font size 80% as big as its parent list, causing each level to become harder
    and harder to read.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套四层深的无序列表将具有计算出的 `font-size` 值，为顶级列表的父元素大小的 40.96%。每个嵌套列表将具有比其父列表大 80% 的字体大小，导致每个级别变得越来越难阅读。
- en: Automatically Adjusting Size
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动调整大小
- en: Two of the main factors that influence a font’s legibility are its size and
    its *x-height*, which is the height of a lowercase *x* character in the font.
    The number that results from dividing the x-height by the `font-size` is referred
    to as the *aspect value*. Fonts with higher aspect values tend to remain legible
    as the font’s size is reduced; conversely, fonts with low aspect values become
    illegible more quickly. CSS provides a way to deal with shifts in aspect values
    between font families, as well as ways to use different metrics to compute an
    aspect value, with the property `font-size-adjust`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 影响字体可读性的两个主要因素是其大小和*x-height*，即字体中小写*x*字符的高度。将x-height除以`font-size`得到的数字称为*aspect
    value*。具有较高aspect value的字体在字体大小减小时保持可读性，相反，具有低aspect value的字体更快变得不可读。CSS提供了处理字体族之间aspect
    value变化的方法，以及使用不同度量计算aspect value的方法，通过属性`font-size-adjust`。
- en: The goal of this property is to preserve legibility when the font used is not
    the author’s first choice. Because of the differences in font appearance, one
    font may be legible at a certain size, while another font at the same size is
    difficult or impossible to read.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性的目标是在使用的字体不是作者首选字体时保持可读性。由于不同字体外观的差异，某种字体可能在特定大小下易读，而另一种字体在相同大小下可能难以或无法阅读。
- en: The property value can be `none`, `from-font`, or a number. The number specified
    should generally be the aspect value (the ratio of a given font metric to font
    size) of the first-choice font family. To pick the font metric used to compute
    the aspect ratio, you can add a keyword specifying it. If not included, it defaults
    to `ex-height`, which normalizes the aspect value of the fonts using the x-height
    divided by the font size.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 属性值可以是`none`，`from-font`或数字。通常指定的数字应该是首选字体族的比例值（给定字体度量与字体大小的比率）。要选择用于计算比例值的字体度量，可以添加一个指定它的关键字。如果未包括，默认为`ex-height`，它通过将x-height除以字体大小来归一化字体的比例值。
- en: 'The other possibilities for the font metric keyword are as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 字体度量关键字的其他可能性如下：
- en: '`cap-height`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`cap-height`'
- en: Use the cap-height (height of capital letters) of the font.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字体的大写字母高度（大写字母的高度）。
- en: '`ch-width`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch-width`'
- en: Use the horizontal pitch (also the width of `1ch`) of the font.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字体的水平间距（也是`1ch`的宽度）。
- en: '`ic-width`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`ic-width`'
- en: Use the width of the font using the CJK water ideograph, “水” (U+6C34) of the
    font.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CJK水象形字“水”（U+6C34）的字体宽度。
- en: '`ic-height`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`ic-height`'
- en: Use the height of the ideograph “水” (U+6C34) of the font.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CJK水象形字“水”（U+6C34）的字体高度。
- en: 'Declaring `font-size-adjust: none` will suppress any adjustment of font sizes.
    This is the default state.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '声明`font-size-adjust: none`将抑制任何字体大小的调整。这是默认状态。'
- en: 'The `from-font` keyword directs the user agent to use the built-in value of
    the specified font metric from the first available font, rather than requiring
    the author to figure out what that value is and write it explicitly. Thus, writing
    `font-size-adjust: cap-height from-font` will automatically set an aspect value
    by dividing the cap-height by the em-square height.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`from-font`关键字指示用户代理使用第一个可用字体的内置值的指定字体度量，而不要求作者找出该值并显式写入。因此，编写`font-size-adjust:
    cap-height from-font`将自动通过将cap-height除以em-square高度设置比例值。'
- en: 'A good example is to compare the common fonts Verdana and Times. Consider [Figure 14-12](#comparing_verdana_and_times)
    and the following markup, which shows both fonts at a `font-size` of `10px`:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的例子是比较常见的字体Verdana和Times。考虑[图14-12](#comparing_verdana_and_times)和以下标记，显示了两种字体的`font-size`为`10px`：
- en: '[PRE46]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![css5 1412](assets/css5_1412.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1412](assets/css5_1412.png)'
- en: Figure 14-12\. Comparing Verdana and Times
  id: totrans-364
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-12\. 比较Verdana和Times
- en: The text in Times is much harder to read than the Verdana text. This is partly
    due to the limitations of pixel-based display, but it is also because Times becomes
    harder to read at smaller font sizes.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: Times中的文本比Verdana中的文本难以阅读得多。这部分是由于像素基础显示的限制，但也因为Times在较小的字体大小下变得更难阅读。
- en: 'As it turns out, the ratio of x-height to character size in Verdana is 0.58,
    whereas in Times it is 0.46\. To make these font faces look more consistent with
    each other, you can declare the aspect value of Verdana, and have the user agent
    adjust the size of the text that’s actually used. This is accomplished using the
    following formula:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，Verdana的x-height与字符大小的比率为0.58，而Times为0.46。为了使这些字体在视觉上更一致，可以声明Verdana的比例值，并让用户代理调整实际使用的文本大小。这是通过以下公式实现的：
- en: Declared `font-size` ×
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明的`font-size` ×
- en: (`font-size-adjust` value ÷ aspect
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （`font-size-adjust`值 ÷ 方面
- en: value of available font) = Adjusted `font-size`
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用字体的值）= 调整后的`font-size`
- en: 'So, when Times is used instead of Verdana, the adjustment is as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当使用Times而不是Verdana时，调整如下：
- en: '`10px` × (`0.58` ÷ `0.46`) = `12.6px`'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10px` × (`0.58` ÷ `0.46`) = `12.6px`'
- en: 'This leads to the result shown in [Figure 14-13](#adjusting_times):'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致显示如[图14-13](#adjusting_times)所示的结果：
- en: '[PRE47]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![css5 1413](assets/css5_1413.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1413](assets/css5_1413.png)'
- en: Figure 14-13\. Adjusting Times
  id: totrans-375
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-13\. 调整时间
- en: The catch is that for a user agent to intelligently make size adjustments, it
    first has to know the aspect value of the fonts you specify. User agents that
    support `@font-face` will be able to pull that information directly from the font
    file, assuming the files contain the information—any professionally produced font
    should, but there’s no guarantee. If a font file doesn’t contain the aspect value,
    a user agent may try to compute it; but again, there’s no guarantee that they
    will or even can.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，用户代理要智能地进行大小调整，首先必须知道您指定的字体的方面值。支持`@font-face`的用户代理将能够直接从字体文件中提取该信息，假设文件包含这些信息——任何专业制作的字体应该包含，但不能保证。如果字体文件不包含方面值，则用户代理可能会尝试计算它；但同样，不能保证它们会或能够这样做。
- en: 'If the user agent can’t find or figure out aspect values on its own, the `auto`
    value for `font-size-adjust` is a way of getting the desired effect even if you
    don’t know the actual aspect value of your first-choice font. For example, assuming
    that the user agent can determine that the aspect value of Verdana is 0.58, the
    following will have the same result as that shown in [Figure 14-13](#adjusting_times):'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户代理无法找到或独立确定方面值，则`font-size-adjust`的`auto`值是一种获得所需效果的方法，即使不知道首选字体的实际方面值也是如此。例如，假设用户代理可以确定Verdana的方面值为0.58，则以下内容将与[图14-13](#adjusting_times)中显示的效果相同：
- en: '[PRE48]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Warning
  id: totrans-379
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of late 2022, the only user-agent line to support `font-size-adjust` is the
    Gecko (Firefox) family.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年底，唯一支持`font-size-adjust`的用户代理系列是Gecko（Firefox）系列。
- en: Understanding font size adjustment comes in handy when considering `size-adjust`.
    This font descriptor behaves similarly to the `font-size-adjust` property, though
    it’s restricted to comparing only x-heights instead of the range of font metrics
    available for `font-size-adjust`.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 当考虑`size-adjust`时，理解字体大小调整非常有用。这个字体描述符的行为与`font-size-adjust`属性类似，尽管它仅限于比较x-height而不是`font-size-adjust`可用的字体度量范围。
- en: 'The `font-size-adjust` property is a rare case where the property and descriptor
    names are not the same: the descriptor is `size-adjust`. The value is any positive
    percentage value (from 0 to infinity) by which you want the fallback font scaled
    so it better matches the primary font selected. That percentage is used as a multiplier
    for the glyph outline sizes and other metrics of the font:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-size-adjust`属性是一个罕见的例子，其中属性和描述符名称并不相同：描述符是`size-adjust`。该值是任何正百分比值（从0到无穷大），您希望将备用字体缩放以更好地匹配所选的主字体。该百分比用作字形轮廓大小和字体的其他度量的乘数：'
- en: '[PRE49]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Warning
  id: totrans-384
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of late 2022, the only user-agent line that does *not* support the `size-adjust`
    descriptor is the WebKit (Safari) family.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年底，唯一不支持`size-adjust`描述符的用户代理系列是WebKit（Safari）系列。
- en: Font Style
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体风格
- en: 'The `font-style` property sounds very simple: you can choose from three values,
    and optionally provide an angle for oblique text if you’re using it.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-style`属性听起来非常简单：您可以从三个值中选择，并且如果使用斜体，则可以选择提供角度。'
- en: The default value of `font-style` is `normal`. This value refers to *upright*
    text, which is best described as text that is not italic or otherwise slanted.
    For instance, the vast majority of text in this book is upright.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-style`的默认值是`normal`。这个值指的是*直立*文本，最好描述为既非斜体也非倾斜的文本。例如，本书中绝大部分文本都是直立的。'
- en: Italic font faces are usually a bit cursive in appearance, and generally use
    less horizontal space than the `normal` version of the same font. In standard
    fonts, italic text is a separate font face, with small changes made to the structure
    of each letter to account for the altered appearance. This is especially true
    of serif fonts because, in addition to the text characters “leaning,” the serifs
    may be altered. Font faces with labels like `Italic`, `Cursive`, and `Kursiv`
    are usually mapped to the `italic` keyword.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 斜体字体通常外观上有些手写风格，并且通常比同一字体的`normal`版本使用更少的水平空间。在标准字体中，斜体文本是一个单独的字体面，每个字母的结构会因其改变的外观而略有变化。对于衬线字体尤为如此，因为除了文本字符“倾斜”外，还可能会改变衬线的形状。标有`Italic`、`Cursive`和`Kursiv`等标签的字体面通常与`italic`关键字相匹配。
- en: '*Oblique text*, on the other hand, is a slanted version of the normal, upright
    text. Oblique text is generally not altered from the upright text other than being
    given a slope. If a font has oblique versions, they are often in faces with labels
    such as `Oblique`, `Slanted`, and `Incline`.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '*倾斜文本* 另一方面，是正常直立文本的倾斜版本。倾斜文本通常除了斜角之外不会改变直立文本。如果字体具有倾斜版本，则通常在标有`Oblique`、`Slanted`和`Incline`等标签的字体中。'
- en: 'When fonts don’t have italic or oblique versions, the browser can simulate
    italic and oblique fonts by artificially sloping the glyphs of the regular face.
    (To prevent this from happening, use `font-synthesis: none`, covered later in
    the chapter.)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '当字体没有斜体或倾斜版本时，浏览器可以通过人为倾斜常规面的字形来模拟斜体和倾斜字体。（为了防止这种情况发生，请使用`font-synthesis: none`，本章稍后会涉及。）'
- en: 'Italic and oblique text at the same angle are not the same: italic is stylized
    and usually obsessively designed, and oblique is merely slanted. By default, if
    `oblique` is declared without an angle, a value of `14deg` is used.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 相同角度的斜体和倾斜文本并不相同：斜体是风格化的，并且通常经过精心设计，而倾斜只是简单地倾斜。默认情况下，如果声明`oblique`没有角度，将使用`14deg`的值。
- en: 'When oblique is given an angle, such as `font-style: oblique 25deg`, the browser
    selects the face classified as oblique, if available. If one or more oblique faces
    are available in the chosen font family, the one most closely matching the specified
    angle by the `font-style` descriptor is chosen. If no oblique faces are available,
    the browser may synthesize an oblique version of the font by slanting a normal
    face by the specified angle.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '当斜体指定角度，如`font-style: oblique 25deg`时，如果字体族中有一个或多个倾斜字体，则浏览器会选择被分类为倾斜的字体面。如果在所选字体族中有一个或多个倾斜字体面可用，则会选择最接近指定角度的字体面。如果没有可用的倾斜字体面，浏览器可以通过倾斜正常字体面指定的角度来合成一个倾斜版本。'
- en: Unless further limited by the font or the descriptor, the oblique angle specified
    must be between `90deg` and `-90deg`, inclusive. If the given value is outside
    those limits, the declaration is ignored. Positive values are slanted toward the
    end (inline-end) of the line, while negative values are slanted toward the beginning
    (inline-start) of the line.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 除非受字体或描述符进一步限制，否则指定的倾斜角必须在`90deg`到`-90deg`之间（包括端点）。如果给定的值超出这些限制，声明将被忽略。正值向行内结束方向倾斜，而负值向行内开始方向倾斜。
- en: To visualize the difference between italic and oblique text, refer to [Figure 14-14](#italic_and_oblique_text_in_detail).
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 若要直观地展示斜体和倾斜文本的区别，请参考[图14-14](#italic_and_oblique_text_in_detail)。
- en: '![css5 1414](assets/css5_1414.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1414](assets/css5_1414.png)'
- en: Figure 14-14\. Italic and oblique text in detail
  id: totrans-397
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-14\. 详细说明斜体和倾斜文本
- en: For TrueType or OpenType variable fonts, the `"slnt"` variation axis is used
    to implement varying slant angles for oblique, and the `"ital"` variation axis
    with a value of `1` is used to implement italic values. See [“Font Variation Settings”](#font-variation-settings)
    for more details.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 对于TrueType或OpenType可变字体，使用`"slnt"`变化轴来实现不同的倾斜角度，使用`"ital"`变化轴并设置值为`1`来实现斜体。详见[“字体变化设置”](#font-variation-settings)获取更多信息。
- en: 'If you want to make sure that a document uses italic text in familiar ways,
    you could write a stylesheet like this:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望确保文档中使用的斜体文本符合常规习惯，你可以编写类似以下样式表：
- en: '[PRE50]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'These styles would make paragraphs use an upright font, as usual, and cause
    the `<em>` and `<i>` elements to use an italic font, also as usual. On the other
    hand, you might decide that there should be a subtle difference between `<em>`
    and `<i>`:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式会使段落使用正常的直立字体，并导致`<em>`和`<i>`元素也使用斜体字体，这也是通常的做法。另一方面，您可能会决定`<em>`和`<i>`之间应有微妙的差异：
- en: '[PRE51]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If you look closely at [Figure 14-15](#more_font_styles), you’ll see no apparent
    difference between the `<em>` and `<i>` elements. In practice, not every font
    is so sophisticated as to have both an italic face and an oblique face, and even
    fewer web browsers are sophisticated enough to tell the difference when both faces
    do exist.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察[图 14-15](#more_font_styles)，你会发现`<em>`和`<i>`元素之间看起来没有明显的区别。实际上，并非每种字体都如此复杂，能同时具备斜体和倾斜体，甚至更少的网页浏览器能够区分这两种字体。
- en: '![css5 1415](assets/css5_1415.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1415](assets/css5_1415.png)'
- en: Figure 14-15\. More font styles
  id: totrans-405
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-15\. 更多字体风格
- en: 'The equivalent `font-variation-settings` setting for `italic` is `"ital"`.
    For the `oblique <*angle*>` value, the equivalent is `"slnt"`, which is used to
    vary between upright and slanted text. Just as with `font-style`, the slant axis
    is interpreted as the angle of slant in counterclockwise degrees from upright:
    inline-start-leaning oblique design will have a negative slant value, whereas
    inline-end-leaning needs a positive value.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`italic`的等效`font-variation-settings`设置是`"ital"`。对于`oblique <*angle*>`值，等效值是`"slnt"`，用于在直立文本和倾斜文本之间进行变化。与`font-style`一样，倾斜轴被解释为从直立开始的逆时针角度：向内倾斜的倾斜设计将具有负倾斜值，而向外倾斜则需要正值。'
- en: The font-style Descriptor
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体风格描述符
- en: As a descriptor, `font-style` lets an author link specific faces to specific
    font-style values.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 作为描述符，`font-style`允许作者将特定字体与特定的`font-style`值关联起来。
- en: 'For example, we might want to assign very particular faces of Switzera to the
    various kinds of `font-style` property values. Given the following, the result
    would be to render `<h2>` and `<h3>` elements using SwitzeraADF-Italic instead
    of SwitzeraADF-Regular, as illustrated in [Figure 14-16](#using_declared_font-style_faces):'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能希望将特定的Switzera字体分配给各种`font-style`属性值。给定以下内容，结果将是使用SwitzeraADF-Italic而不是SwitzeraADF-Regular来呈现`<h2>`和`<h3>`元素，如[图 14-16](#using_declared_font-style_faces)所示：
- en: '[PRE52]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![css5 1416](assets/css5_1416.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1416](assets/css5_1416.png)'
- en: Figure 14-16\. Using declared font-style faces
  id: totrans-412
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-16\. 使用声明的字体风格
- en: Ideally, if a SwitzeraADF face with an oblique typeface existed, a page author
    could point to it instead of the italic variant. There isn’t such a face, though,
    so the author mapped the italic face to both the `italic` and `oblique` values.
    As with `font-weight`, the `font-style` descriptor can take all of the values
    of the `font-style` property *except* for `inherit`.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，如果SwitzeraADF字体具有倾斜字体的面板，则页面作者可以指向它而不是斜体变体。但实际上并没有这样的字体，因此作者将斜体面板映射到了`italic`和`oblique`值。与`font-weight`一样，`font-style`描述符可以采用`font-style`属性的所有值，*但不能使用*`inherit`。
- en: 'Oblique text changes the angle of letterforms without performing any kind of
    character substitution. Any variable font that supports oblique text also supports
    normal or upright text: upright text is oblique text at a `0deg` angle. For example:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 倾斜文本改变了字形的角度，而不进行任何字符替换。支持倾斜文本的任何可变字体也支持正常或直立文本：直立文本是倾斜角度为`0deg`的倾斜文本。例如：
- en: '[PRE53]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The angle given in the CSS value `oblique 3deg` is a clockwise slant of 3 degrees.
    Positive angles are clockwise slants, whereas negative angles are counterclockwise
    slants. If no angle is included, it is the same as writing `oblique 14deg`. The
    degree angle can be any value between `-90deg` and `90deg`, inclusive.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS值`oblique 3deg`中给出的角度是顺时针倾斜3度。正角度是顺时针倾斜，而负角度是逆时针倾斜。如果未包含角度，则与写`oblique 14deg`相同。度角可以是从`-90deg`到`90deg`之间的任何值，包括这两个极端值。
- en: Font Stretching
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体拉伸
- en: In some font families, variant faces have wider or narrower letterforms. These
    often take names like Condensed, Wide, and Ultra Expanded. The utility of such
    variants is that a designer can use a single font family while also having skinny
    and fat variants. CSS provides a property that allows an author to select among
    such variants, when they exist, without having to explicitly define them in `font-family`
    declarations. It does this via the somewhat misleadingly named `font-stretch`.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些字体系列中，变体字体具有较宽或较窄的字形。这些通常被称为Condensed、Wide和Ultra Expanded。这些变体的实用性在于设计师可以在使用单一字体系列的同时，拥有细和粗的变体。CSS提供了一个属性，允许作者在存在这些变体时选择其中之一，而无需在`font-family`声明中显式定义它们。它通过有些误导的`font-stretch`属性来实现这一点。
- en: You might expect from the property name that `font-stretch` will stretch or
    squeeze a font like saltwater taffy, but that’s not the case. This property instead
    behaves very much like the absolute-size keywords (e.g., `` `xx-large` ``) for
    the `font-size` property. You can set a percentage between 50% and 200% inclusive,
    or use a range of keyword values that have defined percentage equivalents. [Table 14-9](#font_stretch_keyword_mapping)
    shows the mapping between keyword values and numeric percentages.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 从属性名称中，您可能会期望 `font-stretch` 将像盐水软糖一样拉伸或挤压字体，但事实并非如此。该属性实际上更像 `font-size` 属性的绝对大小关键字（例如
    `` `xx-large` ``）。您可以设置介于 50% 和 200% 之间的百分比，或使用具有定义百分比等效的一系列关键字值。[表 14-9](#font_stretch_keyword_mapping)
    显示了关键字值和数值百分比之间的映射关系。
- en: Table 14-9\. Percentage equivalents for `font-stretch` keyword values
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-9\. `font-stretch` 关键字值的百分比等效
- en: '| Keyword | Percentage |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| 关键字 | 百分比 |'
- en: '| --- | --- |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ultra-condensed` | 50% |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| `ultra-condensed` | 50% |'
- en: '| `extra-condensed` | 62.5% |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| `extra-condensed` | 62.5% |'
- en: '| `condensed` | 75% |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| `condensed` | 75% |'
- en: '| `semi-condensed` | 87.5% |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `semi-condensed` | 87.5% |'
- en: '| `normal` | 100% |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| `normal` | 100% |'
- en: '| `semi-expanded` | 112.5% |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `semi-expanded` | 112.5% |'
- en: '| `expanded` | 125% |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `expanded` | 125% |'
- en: '| `extra-expanded` | 150% |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| `extra-expanded` | 150% |'
- en: '| `ultra-expanded` | 200% |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| `ultra-expanded` | 200% |'
- en: For example, you might decide to stress the text in a strongly emphasized element
    by changing the font characters to a wider face than its parent element’s font
    characters.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能决定通过将字体字符更改为比其父元素字体字符更宽的面，来强调强调元素中的文本。
- en: The catch is that this property works only if the font family in use actually
    *has* wider and narrower faces, which mostly come with only expensive traditional
    fonts. (They’re much more widely available in variable fonts.)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，此属性仅在使用的字体系列确实*具有*更宽和更窄的面时才有效，这些面大多数只随昂贵的传统字体提供。（它们在变量字体中更为广泛地提供。）
- en: 'For example, consider the common font Verdana, which has only one width face;
    this is equivalent to `font-stretch: normal`. Declaring the following will have
    no effect on the width of the displayed text:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，考虑普通字体 Verdana，它只有一个宽度面；这等同于 `font-stretch: normal`。声明以下内容将不会对显示文本的宽度产生影响：'
- en: '[PRE54]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'All of the text will be at Verdana’s usual width. However, if the font family
    is changed to one that has multiple width faces, such as Futura, things will be
    different, as shown in [Figure 14-17](#stretching_font_characters):'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 所有文本都将保持 Verdana 的通常宽度。但是，如果将字体系列更改为具有多个宽度面的字体，例如 Futura，则会有所不同，如 [图 14-17](#stretching_font_characters)
    所示：
- en: '[PRE55]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![css5 1417](assets/css5_1417.png)'
  id: totrans-438
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1417](assets/css5_1417.png)'
- en: Figure 14-17\. Stretching font characters
  id: totrans-439
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-17\. 拉伸字体字符
- en: For variable fonts that support the `"wdth"` axis, set the width in `font-variation-settings`
    to a value greater than 0\. This controls the glyph width or stroke thickness,
    depending on the font design.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持 `"wdth"` 轴的变量字体，将 `font-variation-settings` 中的宽度设置为大于 0 可控制字形宽度或笔画厚度，具体取决于字体设计。
- en: The font-stretch Descriptor
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体拉伸描述符
- en: 'Much as with the `font-weight` descriptor, the `font-stretch` descriptor allows
    you to explicitly assign faces of varying widths to the width values permitted
    in the `font-stretch` property. For example, the following rules explicitly assign
    three faces to the most directly analogous `font-stretch` values:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `font-weight` 描述符一样，`font-stretch` 描述符允许您将不同宽度的面显式分配给 `font-stretch` 属性中允许的宽度值。例如，以下规则显式地将三个面分配给最直接类似的
    `font-stretch` 值：
- en: '[PRE56]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In a parallel to what you saw in previous sections, you can call on these different
    width faces through the `font-stretch` property, as illustrated in [Figure 14-18](#using_declared_font-stretch_faces):'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几节类似，您可以通过 `font-stretch` 属性调用这些不同宽度面，如 [图 14-18](#using_declared_font-stretch_faces)
    所示：
- en: '[PRE57]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '![css5 1418](assets/css5_1418.png)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1418](assets/css5_1418.png)'
- en: Figure 14-18\. Using declared font-stretch faces
  id: totrans-447
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-18\. 使用声明的字体拉伸面
- en: 'If you use a variable font that contains the full spectrum of font-stretch
    sizing, you can import a single font file with `@font-face`, then use it for all
    of your text font-stretch requirements. This produces the same degree of horizontal
    stretching shown in [Figure 14-18](#using_declared_font-stretch_faces), albeit
    with a different font:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是包含完整字体拉伸尺寸范围的变量字体，可以通过 `@font-face` 导入单个字体文件，然后用于所有文本的字体拉伸需求。这将产生与 [图 14-18](#using_declared_font-stretch_faces)
    中显示的水平拉伸程度相同的效果，尽管使用的是不同的字体：
- en: '[PRE58]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `font-stretch` descriptor can take all of the values of the `font-stretch`
    property *except* for `inherit`.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-stretch` 描述符可以采用 `font-stretch` 属性的所有值，*除了* `inherit`。'
- en: 'If you do want to use a different font for your variable fonts depending on
    whether the text is extended or condensed, use the `"wdth"` value in the comma-separated
    value of the `@font-face` `font-variation-settings` descriptor, as in the following
    example:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望根据文本是扩展还是压缩来使用不同的字体变体，可以在 `@font-face` 的 `font-variation-settings` 描述符的逗号分隔值中使用
    `"wdth"` 值，如下例所示：
- en: '[PRE59]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Font Synthesis
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体综合
- en: Sometimes a given font family will lack alternate faces for options like bold
    or italic text or small capital letters. In such situations, the user agent may
    attempt to synthesize a face from the faces it has available, but this can lead
    to unattractive letterforms. To address this, CSS offers `font-synthesis`, which
    lets you say how much synthesis you will or won’t permit in the rendering of a
    page. This doesn’t have a `@font-face` descriptor, but it has bearing on all the
    font variants to follow, so we’re dealing with it now.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，某个字体系列可能缺少粗体、斜体或小型大写字母的备用字体。在这种情况下，用户代理程序可能尝试从可用的字体中合成一个字体，但这可能导致字形不够吸引人。为解决此问题，CSS
    提供了 `font-synthesis`，允许您控制页面渲染中的合成程度。这并没有 `@font-face` 描述符，但影响随后的所有字体变体，因此我们现在处理它。
- en: 'In many user agents, a font family that has no bold face can have one computed
    for it. This might be done by adding pixels to either side of each character glyph,
    for example. While this might seem useful, it can lead to results that are visually
    unappealing, especially at smaller font sizes. This is why most font families
    have bold faces included: the font’s designer wanted to make sure that bolded
    text in that font looked good.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多用户代理中，没有粗体面的字体系列可以为其计算一个。例如，这可以通过在每个字符字形的两侧添加像素来完成。尽管这可能看似有用，但在较小的字号下可能会导致视觉上不吸引人的结果。这就是为什么大多数字体系列都包含粗体面：字体设计者希望确保该字体的粗体文本看起来很好。
- en: Similarly, a font family that lacks an italic face can have one synthesized
    by simply slanting the characters in the normal face. This tends to look even
    worse than synthesized bold faces, particularly when it comes to serif fonts.
    Compare the difference between the actual italic face included in Georgia and
    a synthesized italic version of Georgia (which we’re calling “oblique” here),
    illustrated in [Figure 14-19](#synthesized_versus_designed_italics).
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，缺少斜体的字体系列可以通过简单地倾斜普通字体中的字符来合成一个斜体。这往往比合成粗体面更糟糕，尤其是在衬线字体方面。比较 Georgia 实际斜体面与合成斜体版本（我们在这里称为“斜体”），见图[14-19](#synthesized_versus_designed_italics)。
- en: '![css5 1419](assets/css5_1419.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1419](assets/css5_1419.png)'
- en: Figure 14-19\. Synthesized versus designed italics
  id: totrans-458
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-19\. 综合斜体与设计斜体
- en: 'In supporting user agents, declaring `font-synthesis: none` blocks the user
    agent from doing any such synthesis for the affected elements. You can block it
    for the whole document with `html {font-synthesis: none;}`, for example. The downside
    is that any attempts to create variant text using a font that doesn’t offer the
    appropriate faces will stay the normal face, instead of even approximating what
    was intended. The upside is that you don’t have to worry about a user agent trying
    to synthesize those variants and doing a poor job of it.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '在支持的用户代理中，声明 `font-synthesis: none` 可以阻止用户代理程序为受影响的元素进行任何合成。例如，您可以通过 `html
    {font-synthesis: none;}` 阻止整个文档的合成。缺点是，任何试图使用不提供适当字体面的字体创建变体文本的尝试都将保持普通面，而不是甚至近似预期结果。优点是，您不必担心用户代理程序试图合成这些变体并且做得很差。'
- en: Font Variants
  id: totrans-460
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体变体
- en: Beyond font weights and font styles, there are font variants. These are embedded
    within a font face and can cover aspects like various styles of historical ligatures,
    small-caps presentation, ways of presenting fractions, the spacing of numbers,
    whether zeros get slashes through them, and much more. CSS lets you invoke these
    variants, when they exist, through the shorthand property `font-variant`.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 除了字重和字体样式之外，还有字体变体。这些嵌入在字体面中，可以涵盖历史连字的各种样式、小型大写字母的呈现方式、分数的呈现方式、数字的间距、零是否会被斜线穿过等方面。CSS
    允许您在存在时通过简写属性 `font-variant` 调用这些变体。
- en: This property is shorthand for five separate properties, which we’ll get to
    in just a moment. The most common values you’ll find in the wild are `normal`,
    which is the default and describes ordinary text, and `small-caps`, which has
    existed since CSS1.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性是五个单独属性的简写，我们马上就会详细讨论。您在实际使用中最常见的值是`normal`，这是默认值，用于描述普通文本，以及自CSS1以来存在的`small-caps`。
- en: 'First, however, let’s cover the two values that don’t correspond to other properties:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，首先让我们介绍不与其他属性对应的两个值：
- en: '`none`'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '`none`'
- en: Disables all variants of any kind by setting `font-feature-ligatures` to `none`
    and all the other font variant properties to `normal`
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`font-feature-ligatures`设置为`none`和所有其他字体变体属性设置为`normal`来禁用任何形式的所有变体
- en: '`normal`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`normal`'
- en: Disables most variants by setting all the font variant properties, including
    `font-feature-ligatures`, to `normal`
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将所有字体变体属性（包括`font-feature-ligatures`）设置为`normal`来禁用大多数变体
- en: 'Understanding the variant aspect of `small-caps` might help explain the idea
    of variants, making all the other properties easier to understand. The `small-caps`
    value calls for the use of small caps (`font-feature-settings: "smcp"`). Instead
    of upper- and lowercase letters, a small-caps font employs capital letters of
    different sizes. Thus, you might see something like what’s shown in [Figure 14-20](#the_small-caps_value_in_use):'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '理解`small-caps`的变体方面可能有助于解释变体的概念，使得所有其他属性更容易理解。`small-caps`值要求使用小型大写字母（`font-feature-settings:
    "smcp"`）。与大写和小写字母不同，小型大写字体使用不同大小的大写字母。因此，您可能会看到类似于[图 14-20](#the_small-caps_value_in_use)中显示的内容：'
- en: '[PRE60]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '![css5 1420](assets/css5_1420.png)'
  id: totrans-471
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1420](assets/css5_1420.png)'
- en: Figure 14-20\. The `small-caps` value in use
  id: totrans-472
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-20\. `small-caps`值的使用方式
- en: 'As you may notice, in the display of the `<h1>` element, there is a larger
    capital letter wherever an uppercase letter appears in the source, and a small
    capital letter wherever there is a lowercase letter in the source. This is very
    similar to `text-transform: uppercase`, with the only real difference being that,
    here, the capital letters are of different sizes. However, the reason that `small-caps`
    is declared using a font property is that some fonts have a specific small-caps
    face, which a font property is used to select.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您可能注意到的那样，在`<h1>`元素的显示中，源代码中的大写字母处有一个更大的大写字母，源代码中的小写字母处有一个小型大写字母。这与`text-transform:
    uppercase`非常相似，唯一的真正区别在于这里大写字母的大小不同。然而，将`small-caps`声明为字体属性的原因是一些字体具有特定的小型大写字体，可以使用字体属性进行选择。'
- en: 'What happens if no font-face variant, such as `small-caps`, exists? The specification
    provides two options. The first is for the user agent to create a small-caps face
    by scaling capital letters on its own. The second is to make all letters uppercase
    and the same size, exactly as if the declaration `text-transform: uppercase` had
    been used instead. This is not an ideal solution but it is permitted.'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '如果不存在诸如`small-caps`之类的字体变体会发生什么？规范提供了两种选择。第一种是用户代理自行缩放大写字母以创建小型大写字母。第二种是将所有字母都变成大写并保持相同的大小，就像使用了声明`text-transform:
    uppercase`一样。这并不是一个理想的解决方案，但是是允许的。'
- en: Warning
  id: totrans-475
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Bear in mind that not every font supports every variant. For example, most Latin
    fonts won’t support any of the East Asian variants. In addition, not every font
    will include support for, say, some of the numeric and ligature variants. Many
    fonts will support *none* of the variants.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非每种字体都支持每种变体。例如，大多数拉丁字体不支持任何东亚变体。此外，并非每种字体都包含对数字和连字变体的支持。许多字体将不支持任何变体。
- en: To find out what a given font supports, you have to consult its documentation,
    or do a lot of testing if no documentation is available. Most commercial fonts
    do come with documentation, and most free fonts don’t. Fortunately, some browser
    developer tools (not including Chromium browsers, as of late 2022) have a tab
    that provides information about font variants and feature settings.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看给定字体支持的内容，您必须查阅其文档，或者如果没有文档，则需要进行大量测试。大多数商业字体都附带有文档，而大多数免费字体则没有。幸运的是，一些浏览器开发者工具（截至2022年末，不包括Chromium浏览器）具有提供关于字体变体和特性设置信息的选项卡。
- en: Capital Font Variants
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大写字体变体
- en: In addition to the `small-caps` value we just discussed, CSS has other capital-text
    variants. These are addressed via the property `font-variant-caps`.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们刚刚讨论的`small-caps`值，CSS还具有其他大写文本变体。这些通过属性`font-variant-caps`进行处理。
- en: 'The default value is `normal`, which means no capital-letter variant is used.
    From there, we have the following options:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '`small-caps`'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: Renders all of the letters using capital letters. The capital letters for characters
    that are uppercase in the source text are the same height as uppercase letters.
    Characters that are lowercase in the text are rendered as smaller capitals, usually
    a bit taller than the font’s x-height.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '`all-small-caps`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: The same as `small-caps`, except all letters are rendered as smaller capitals,
    even those that are uppercase in the source text.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '`petite-caps`'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `small-caps`, except the capitals used for lowercase letters are
    equal in height to, or even a bit shorter than, the font’s x-height. If the font
    has no petite-caps variant, the result is likely to be the same as for `small-caps`.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '`all-petite-caps`'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: The same as `petite-caps`, except all letters are rendered as smaller capitals,
    even those that are uppercase in the source text.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '`titling-caps`'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: If a row has multiple uppercase letters, alternate capital forms are used to
    keep the letters from appearing too visually strong. Usually these are thinner
    versions of the normal capitals in the font.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '`unicase`'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: The text is rendered using a mixture of capital and noncapital letterforms,
    usually all the same height. This can vary widely even among the few fonts that
    offer this variant.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is illustrated in [Figure 14-21](#different_types_of_capital_variants);
    note that the values marked with a dagger (†) were faked in one way or another:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '![css5 1421](assets/css5_1421.png)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
- en: Figure 14-21\. Different types of capital variants
  id: totrans-496
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Why did we fake some of the examples in [Figure 14-21](#different_types_of_capital_variants)?
    In part, because finding a single font that contains all the capital variants
    is exceedingly difficult, and it is literally faster to fake some results than
    dig up a font, or set of fonts, that might work.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: 'We also want to highlight that exact situation: most of the time, you’re going
    to get either a fallback (as from `petite-caps` to `small-caps`) or no variant
    at all. Because of this, make sure to use the `@font-face` `font-variant` descriptor
    to define what should happen. Otherwise, if a `font-variant-caps` category variant
    is not available, the browser will decide how to render it. For example, if `petite-caps`
    is specified and the font doesn’t have a petite-caps face or variable axis defined,
    the user agent may render the text using small capital glyphs. If small capital
    glyphs are not included in the font, the browser may synthesize them by proportionally
    shrinking uppercase glyphs.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use `{font-synthesis: none;}` to prevent the browser
    from synthesizing the text. You can also include `{font-synthesis: small-caps;}`,
    or omit `font-synthesis` altogether, to allow a small-caps typeface to be synthesized
    if needed.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: Fonts sometimes include special glyphs for various caseless characters like
    punctuation marks to match the cap-variant text. The browser will not synthesize
    caseless characters on its own.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 字体有时会包含特殊的字形，用于各种无大小写字母的字符，比如标点符号，以匹配大写字母变体的文本。浏览器不会自行合成无大小写字母的字符。
- en: All the values of `font-variant-caps` other than `normal` have defined equivalent
    OpenType features. These are summarized in [Table 14-10](#font_variant_caps_opentype).
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `normal` 外，所有 `font-variant-caps` 的值都有对应的 OpenType 特性。这些总结在 [表格 14-10](#font_variant_caps_opentype)
    中。
- en: Table 14-10\. `font-variant-caps` values and equivalent OpenType features
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 14-10\. `font-variant-caps` 的值和对应的 OpenType 特性
- en: '| Value | OpenType feature |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| 值 | OpenType 特性 |'
- en: '| --- | --- |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `normal` | *n/a* |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| `normal` | *n/a* |'
- en: '| `small-caps` | `"smcp"` |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| `small-caps` | `"smcp"` |'
- en: '| `all-small-caps` | `"c2sc"`, `"smcp"` |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '| `all-small-caps` | `"c2sc"`, `"smcp"` |'
- en: '| `petite-caps` | `"pcap"` |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| `petite-caps` | `"pcap"` |'
- en: '| `all-petite-caps` | `"c2pc"`, `"pcap"` |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| `all-petite-caps` | `"c2pc"`, `"pcap"` |'
- en: '| `titling-caps` | `"titl"` |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| `titling-caps` | `"titl"` |'
- en: '| `unicase` | `"unic"` |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| `unicase` | `"unic"` |'
- en: Numeric Font Variants
  id: totrans-512
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字字体变体
- en: Many font faces have variant behaviors for use when rendering numerals. When
    available, these can be accessed via the `font-variant-numeric` property. The
    values of this property affect the usage of alternate glyphs for numbers, fractions,
    and ordinal markers.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 许多字体在渲染数字时有不同的行为变体。如果可用，可以通过 `font-variant-numeric` 属性访问这些。此属性的值会影响数字、分数和序数标记的替代字形的使用。
- en: The default value, `normal`, means that nothing special will be done when rendering
    numbers. They’ll just appear the same as they usually do for the font face. [Figure 14-22](#different_types_of_numeric_variants)
    demonstrates all the values, and as before, the examples marked with a dagger
    (†) were faked in one way or another because fonts lacked those features.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值 `normal` 表示在渲染数字时不会进行任何特殊处理。它们将和字体的平常显示一样。[图 14-22](#different_types_of_numeric_variants)
    展示了所有值，像之前一样，带有†标记的示例是由于字体缺乏这些特性而被伪造的。
- en: '![css5 1422](assets/css5_1422.png)'
  id: totrans-515
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1422](assets/css5_1422.png)'
- en: Figure 14-22\. Different types of numeric variants
  id: totrans-516
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-22\. 不同类型的数字变体
- en: 'Perhaps the simplest numeric variant is `slashed-zero`. This causes the numeral
    0 to appear with a slash through it, most likely on a diagonal. Slashed zeros
    are often the default rendering in monospace fonts, where distinguishing 0 from
    the capital letter *O* can be difficult. In serif and sans-serif fonts, they are
    usually not the default appearance of zeros. Setting `font-variant-numeric: slashed-zero`
    will bring out a slashed zero if one is available.'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '或许最简单的数值变体是 `slashed-zero`。这使得数字 0 带有一条斜杠，通常是斜对角的。在等宽字体中，斜杠零经常是默认渲染方式，因为区分数字
    0 和大写字母 *O* 可能会很困难。在衬线和无衬线字体中，它们通常不是零的默认外观。设置 `font-variant-numeric: slashed-zero`
    将显示斜杠零（如果有的话）。'
- en: Speaking of diagonal slashes, the value `diagonal-fractions` causes characters
    arranged as a fraction (e.g., 1/2) to be rendered as smaller numbers, the first
    raised up, separated by a diagonal slash. The `stacked-fractions` value renders
    the fraction as the first number above the second, and the two separated by a
    horizontal slash.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到斜杠，值 `diagonal-fractions` 导致排列成分数形式的字符（例如 1/2）以较小的数字显示，第一个数字升高，通过斜杠分隔。值 `stacked-fractions`
    以第一个数字在上，第二个数字在下的形式呈现分数，它们之间通过水平斜杠分隔。
- en: If the font has features for ordinal labels, like the letters following the
    numbers of 1st, 2nd, 3rd, and 4th in English, `ordinal` enables the use of those
    special glyphs. These will generally look like superscripted, smaller versions
    of the letters.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字体具有序数标签的特性，例如英文中 1st、2nd、3rd 和 4th 后面的字母，`ordinal` 可以启用这些特殊字形的使用。它们通常看起来像上标、较小的字母版本。
- en: Authors can affect the figures used for numbers with `lining-nums`, which sets
    all numbers on the baseline; and `oldstyle-nums`, which enables numbers like 3,
    4, 7, and 9 to descend below the baseline. Georgia is a common example of a font
    that has old-style numbers.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 作者可以通过 `lining-nums` 影响数字的形态，这将所有数字设置在基线上；而 `oldstyle-nums` 可以启用像 3、4、7 和 9
    这样的数字下降到基线以下的形态。Georgia 是一个常见的具有旧样式数字的字体示例。
- en: You can also influence the sizing of figures used for numbers. The `proportional-nums`
    value enables the numbers to be proportional, as in proportional fonts; and `tabular-nums`
    gives all numbers the same width, as in monospace fonts. The advantage of these
    values is that you can, assuming there are glyphs to support them in the font
    face, get the monospace effect in proportional fonts without converting the numbers
    to a monospace face, and similarly cause monospace numbers to be sized proportionally.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以影响数字的尺寸。`proportional-nums` 值使数字成比例显示，就像比例字体一样；而 `tabular-nums` 则使所有数字具有相同的宽度，就像等宽字体一样。这些值的优势在于，假设字体中有支持它们的字形，您可以在比例字体中获得等宽效果，而不必将数字转换为等宽字体，同样地，也可以使等宽数字按比例大小显示。
- en: 'You can include multiple values, but only one value from each of the numeric-value
    sets:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以包含多个值，但每个数值集合中只能包含一个值：
- en: '[PRE63]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: All the values of `font-variant-numeric` other than `normal` have defined equivalent
    OpenType features. These are summarized in [Table 14-11](#font_variant_numeric_opentype).
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `normal` 以外的所有 `font-variant-numeric` 值都有定义的等效 OpenType 特性。这些总结在 [表 14-11](#font_variant_numeric_opentype)
    中。
- en: Table 14-11\. `font-variant-numeric` values and equivalent OpenType features
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-11\. `font-variant-numeric` 值及其等效 OpenType 特性
- en: '| Value | OpenType feature |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| Value | OpenType feature |'
- en: '| --- | --- |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `normal` | *n/a* |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| `normal` | *n/a* |'
- en: '| `ordinal` | `"ordn"` |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| `ordinal` | `"ordn"` |'
- en: '| `slashed-zero` | `"zero"` |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| `slashed-zero` | `"zero"` |'
- en: '| `lining-nums` | `"lnum"` |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| `lining-nums` | `"lnum"` |'
- en: '| `oldstyle-nums` | `"onum"` |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| `oldstyle-nums` | `"onum"` |'
- en: '| `proportional-nums` | `"pnum"` |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| `proportional-nums` | `"pnum"` |'
- en: '| `tabular-nums` | `"tnum"` |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| `tabular-nums` | `"tnum"` |'
- en: '| `diagonal-fractions` | `"frac"` |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal-fractions` | `"frac"` |'
- en: '| `stacked-fractions` | `"afrc"` |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| `stacked-fractions` | `"afrc"` |'
- en: Ligature Variants
  id: totrans-537
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连字变体
- en: A *ligature* is a joining of two (or more) characters into one shape. As an
    example, two lowercase *f* characters could have their crossbars merged into a
    single line when they appear next to each other, or the crossbar could extend
    over a lowercase *i* and replace its usual dot in the sequence *fi*. More archaically,
    a combination like *st* could have a swash curve from one to the other. When available,
    these features can be enabled or disabled with the `font-variant-ligatures` property.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '*连字* 是将两个（或更多）字符合并成一个形状。例如，两个小写字母 *f* 可以在相邻时将它们的横杠合并为一条线，或者横杠可以延伸到小写字母 *i*
    上，替代其通常的点，形成 *fi* 序列。更古老的例子中，像 *st* 这样的组合可以用一种波状曲线将一个字母连接到另一个字母。在有支持时，这些特性可以通过
    `font-variant-ligatures` 属性启用或禁用。'
- en: 'The values have the following effects:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值具有以下影响：
- en: '`common-ligatures`'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`common-ligatures`'
- en: Enables the use of common ligatures, such as those combining *f* or *t* with
    letters that follow them. In French, the sequence *oe* is more usually rendered
    using the ligature *œ*. Browsers usually have these enabled by default, so if
    you want to disable them, use `no-common-ligatures` instead.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 启用常见连字，如将 *f* 或 *t* 与其后的字母组合起来。在法语中，*oe* 序列通常使用 *œ* 连字。浏览器通常默认启用这些功能，如果需要禁用它们，请改用
    `no-common-ligatures`。
- en: '`discretionary-ligatures`'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`discretionary-ligatures`'
- en: Enables the use of special ligatures created by font designers that are unusual
    or otherwise not regarded as common.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 启用字体设计师创建的特殊连字，这些连字不常见或以其他方式不被认为是常见的。
- en: '`historical-ligatures`'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '`historical-ligatures`'
- en: Enables the use of historical ligatures, which are generally those found in
    the typography of centuries past but are not used today. For example, in German
    the *tz* digraph used to be rendered as ![](assets/tz_italic.png).
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 启用了历史连字的使用，这些连字通常出现在过去几个世纪的印刷术中，但今天已不再使用。例如，在德语中，*tz* 二字曾经以以下方式呈现：![](assets/tz_italic.png)。
- en: '`contextual-ligatures`'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '`contextual-ligatures`'
- en: Enables the use of ligatures that appear based on context, such as a cursive
    font enabling connecting curves from one letter to the next depending on not just
    the character that follows, but possibly also what characters came before. These
    are also sometimes used in programming fonts, where sequences like `!=` may be
    rendered as `≠` instead.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 启用根据上下文出现的连字，例如手写字体可以根据前后字母不仅仅是后续字母的形状连接来渲染。这些特性有时也用于编程字体，例如序列 `!=` 可能会被渲染为
    `≠`。
- en: '`no-common-ligatures`'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '`no-common-ligatures`'
- en: Explicitly disables the use of common ligatures.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 明确禁用常见连字。
- en: '`no-discretionary-ligatures`'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '`no-discretionary-ligatures`'
- en: Explicitly disables the use of discretionary ligatures.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 明确禁用离散连字。
- en: '`no-historical-ligatures`'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '`no-historical-ligatures`'
- en: Explicitly disables the use of historical ligatures.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 明确禁用历史连字的使用。
- en: '`no-contextual-ligatures`'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '`no-contextual-ligatures`'
- en: Explicitly disables the use of contextual ligatures.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 明确禁用上下文连字的使用。
- en: 'The default value, `normal`, turns off all these ligatures *except* common
    ligatures, which are enabled by default. This is especially relevant because `font-variant:
    normal` turns off all the `font-variant-ligatures` except the common ones, whereas
    `font-variant: none` turns them all off *including* common ligatures. [Table 14-12](#font_variant_caps)
    provides a condensed summary of how each value translates into OpenType features.'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '默认值`normal`关闭所有这些连字，*除了*默认情况下启用的常见连字。这特别重要，因为`font-variant: normal`关闭所有`font-variant-ligatures`，除了常见的连字，而`font-variant:
    none`关闭所有连字，*包括*常见连字。[表 14-12](#font_variant_caps) 提供了每个值如何转换为OpenType功能的简要总结。'
- en: Table 14-12\. `font-variant-ligatures` values and equivalent OpenType features
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-12\. `font-variant-ligatures`值及其等效的OpenType功能
- en: '| Value | OpenType feature |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| Value | OpenType feature |'
- en: '| --- | --- |'
  id: totrans-559
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `common-ligatures` | `"clig" on`, `"liga" on` |'
  id: totrans-560
  prefs: []
  type: TYPE_TB
  zh: '| `common-ligatures` | `"clig" on`, `"liga" on` |'
- en: '| `discretionary-ligatures` | `"dlig" on` |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| `discretionary-ligatures` | `"dlig" on` |'
- en: '| `historical-ligatures` | `"hlig" on` |'
  id: totrans-562
  prefs: []
  type: TYPE_TB
  zh: '| `historical-ligatures` | `"hlig" on` |'
- en: '| `contextual-ligatures` | `"calt" on` |'
  id: totrans-563
  prefs: []
  type: TYPE_TB
  zh: '| `contextual-ligatures` | `"calt" on` |'
- en: '| `no-common-ligatures` | `"clig" off`, `"liga" off` |'
  id: totrans-564
  prefs: []
  type: TYPE_TB
  zh: '| `no-common-ligatures` | `"clig" off`, `"liga" off` |'
- en: '| `no-discretionary-ligatures` | `"dlig" off` |'
  id: totrans-565
  prefs: []
  type: TYPE_TB
  zh: '| `no-discretionary-ligatures` | `"dlig" off` |'
- en: '| `no-historical-ligatures` | `"hlig" off` |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
  zh: '| `no-historical-ligatures` | `"hlig" off` |'
- en: '| `no-contextual-ligatures` | `"calt" off` |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
  zh: '| `no-contextual-ligatures` | `"calt" off` |'
- en: Less likely to be used or supported by browsers are the `font-variant-alternates`
    and `font-variant-east-asian` properties.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 较不可能被浏览器使用或支持的是`font-variant-alternates`和`font-variant-east-asian`属性。
- en: Alternate Variants
  id: totrans-569
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备选变体
- en: For any given character, a font may include alternate glyphs in addition to
    the default glyph for that character. The `font-variant-alternates` property affects
    the usage of those alternate glyphs.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何给定字符，字体可能会包括除了该字符的默认字形外的备选字形。`font-variant-alternates`属性影响这些备选字形的使用。
- en: The default value, `normal`, means don’t use any alternate variants. The `historical-forms`
    keyword enables historical forms, glyphs that were common in the past but not
    today. All the other values are functions.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值`normal`表示不使用任何备选变体。`historical-forms`关键字启用历史形式，即在过去常见但今天不常见的字形。所有其他值都是函数。
- en: These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.
    With `@font-feature-values`, you can define a common name for the `font-variant-alternates`
    function values to activate OpenType features.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 这些替代字形可能通过在`@font-feature-values`中定义的替代名称进行引用。通过`@font-feature-values`，您可以为`font-variant-alternates`函数值定义一个通用名称以激活OpenType功能。
- en: The `@font-feature-values` at-rule may be used either at the top level of your
    CSS or inside any CSS conditional-group at-rule.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '`@font-feature-values`规则可以在CSS的顶级或任何CSS条件组中使用。'
- en: In [Table 14-13](#font_variant_alternates), *`XY`* is replaced by a number representing
    the feature set. With OpenType fonts and `font-feature-settings`, some features
    are already defined. For example, the OpenType equivalent of the `styleset()`
    function is `"ss*XY*"`. As of late 2022, `ss01` through `ss20` are currently defined.
    Values higher than 99 are allowed, but they don’t map to any OpenType values and
    will be ignored.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表 14-13](#font_variant_alternates)中，*`XY`*将被代表一个表示特征集的数字替换。通过OpenType字体和`font-feature-settings`，一些功能已经定义。例如，`styleset()`函数的OpenType等效项是`"ss*XY*"`。截至2022年末，已经定义了`ss01`到`ss20`。允许使用高于99的值，但它们不映射到任何OpenType值，并将被忽略。
- en: Table 14-13\. `font-variant-alternates` values and equivalent OpenType features
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-13\. `font-variant-alternates`值及其等效的OpenType功能
- en: '| Value | OpenType feature |'
  id: totrans-576
  prefs: []
  type: TYPE_TB
  zh: '| Value | OpenType feature |'
- en: '| --- | --- |'
  id: totrans-577
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `annotation()` | `"nalt"` |'
  id: totrans-578
  prefs: []
  type: TYPE_TB
  zh: '| `annotation()` | `"nalt"` |'
- en: '| `character-variant()` | `"cv*XY*"` |'
  id: totrans-579
  prefs: []
  type: TYPE_TB
  zh: '| `character-variant()` | `"cv*XY*"` |'
- en: '| `historical-forms` | `"hist"` |'
  id: totrans-580
  prefs: []
  type: TYPE_TB
  zh: '| `historical-forms` | `"hist"` |'
- en: '| `ornaments()` | `"ornm"` |'
  id: totrans-581
  prefs: []
  type: TYPE_TB
  zh: '| `ornaments()` | `"ornm"` |'
- en: '| `styleset()` | `"ss*XY*"` |'
  id: totrans-582
  prefs: []
  type: TYPE_TB
  zh: '| `styleset()` | `"ss*XY*"` |'
- en: '| `stylistic()` | `"salt"` |'
  id: totrans-583
  prefs: []
  type: TYPE_TB
  zh: '| `stylistic()` | `"salt"` |'
- en: '| `swash()` | `"swsh"`, `"cswh"` |'
  id: totrans-584
  prefs: []
  type: TYPE_TB
  zh: '| `swash()` | `"swsh"`, `"cswh"` |'
- en: 'An at-rule version of `font-variant-alternates`, called `@font-feature-values`,
    allows authors to define labels for alternate values of `font-variant-alternates`
    using at-rules of their own. The following two styles (taken from the CSS specification)
    demonstrate how to label the numeric values of the `swash` alternate, and then
    use them later in `font-variant-alternates`:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-variant-alternates`的`@font-feature-values`规则版本允许作者使用他们自己的规则定义`font-variant-alternates`的替代值的标签。以下两个样式（取自CSS规范）演示了如何标记`swash`替代的数字值，然后在`font-variant-alternates`中稍后使用它们：'
- en: '[PRE64]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Without the presence of the `@font-feature-values` at-rule, the paragraph styles
    would have to say `font-variant-alternates: swash(2)` instead of using `flowing`
    for the value of the `swash` function.'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '没有`@font-feature-values`规则的存在，段落样式必须使用`font-variant-alternates: swash(2)`，而不是使用`flowing`作为`swash`函数值。'
- en: Warning
  id: totrans-588
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As of late 2022, while all browsers support `font-variant` and its associated
    subproperties, only Firefox and Safari have `font-variant-alternates` and `@font-feature-values`
    support. You can more reliably set these variants by using the `font-feature-settings`
    property.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年末，虽然所有浏览器都支持`font-variant`及其相关子属性，但只有Firefox和Safari支持`font-variant-alternates`和`@font-feature-values`。您可以通过使用`font-feature-settings`属性来更可靠地设置这些变体。
- en: East Asian Font Variants
  id: totrans-590
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 东亚字体变体
- en: The values of the `font-variant-east-asian` property allow for controlling glyph
    substitution and sizing in East Asian text.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-variant-east-asian`属性的值允许在东亚文本中控制字形替换和大小。'
- en: The assorted Japanese Industrial Standard (JIS) variants reflect the glyph forms
    defined in different Japanese national standards. Fonts generally include glyphs
    defined by the most recent national standard. JIS values allow for the inclusion
    of older Japanese glyph variations when such variants are needed, such as when
    reproducing historical documents.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 各种日本工业标准（JIS）变体反映了不同日本国家标准中定义的字形。字体通常包括最新国家标准定义的字形。当需要这些变体（例如复制历史文档时）时，JIS值允许包括较旧的日文字形变体。
- en: Similarly, the `simplified` and `traditional` values allow control over the
    glyph forms for characters that have been simplified over time but for which the
    older, traditional form is still used in some contexts.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`simplified`和`traditional`值允许控制随时间简化但在某些情况下仍使用旧的传统形式的字符的字形。
- en: The `ruby` value enables display of Ruby variant glyphs. Ruby text is generally
    smaller than the associated body text.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '`ruby`值启用Ruby变体字形的显示。Ruby文本通常比关联的正文文本小。'
- en: This property value allows font designers to include glyphs better suited for
    smaller typography than scaled-down versions of the default glyphs would be. Only
    glyph selection is affected; there is no associated font scaling.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性值允许字体设计师包含更适合小型排版的字形，而不是默认字形的缩小版本。只影响字形选择；没有相关的字体缩放。
- en: Font Variant Position
  id: totrans-596
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体变体位置
- en: Compared to the previous variants, `font-variant-position` is fairly straightforward.
    It’s strange, then, that it’s so poorly supported.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的变体相比，`font-variant-position`相对简单。然而，奇怪的是，它的支持却如此差。
- en: 'This property can be used to enable specialized variant glyphs that are meant
    solely for superscripted and subscripted text. As it says in the [CSS specification](https://www.w3.org/TR/css-fonts-4/#font-variant-position-prop),
    these glyphs are:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性可用于启用专门为上标和下标文本设计的特殊变体字形。正如[CSS规范](https://www.w3.org/TR/css-fonts-4/#font-variant-position-prop)中所述，这些字形：
- en: …designed within the same em-box as default glyphs and are intended to be laid
    out on the same baseline as the default glyphs, with no resizing or repositioning
    of the baseline. They are explicitly designed to match the surrounding text and
    to be more readable without affecting the line height.
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …设计在与默认字形相同的em-box中，并且旨在放置在与默认字形相同的基线上，没有重新调整或重新定位基线。它们明确设计为与周围文本匹配，并且更易阅读，而不影响行高。
- en: This is in contrast to what happens with super- and subscripted text in fonts
    that lack such alternates, which is usually just smaller text that’s been shifted
    up or down from the baseline. This sort of synthesis of super- and subscripted
    text often leads to line-height increases, which variant glyphs are generally
    designed to prevent.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 这与缺乏这种替代形式的字体中的上标和下标文本的情况恰恰相反，通常只是从基线向上或向下移动的较小文本。这种超级和下标文本的合成通常会导致行高增加，而变体字形通常设计为防止这种情况发生。
- en: Font Feature Settings
  id: totrans-601
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体特性设置
- en: Throughout this chapter, we’ve discussed font features but have yet to cover
    the `font-feature-settings` property or descriptor. Similarly to `font-variant`,
    `font-feature-settings` allows you to exercise low-level control over which OpenType
    font features are available for use.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: The `font-feature-settings` property controls advanced typographic features
    in OpenType fonts, as opposed to the `font-variation-settings` property, which
    provides low-level control over variable font characteristics.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list one or more comma-separated OpenType features, as defined by the
    OpenType specification. For example, enabling common ligatures, small caps, and
    slashed zeros would look something like this:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The exact format of a <*`feature-tag-value`*> value is as follows:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: <*`feature-tag-value`*>
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: <*`string`*> [ <*`integer`*> | `on` | `off` ]?
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: 'For many features, the only permitted integer values are `0` and `1`, which
    are equivalent to `off` and `on` (and vice versa). Some features allow a range
    of numbers, however, in which case values greater than 1 both enable the feature
    and define the feature’s selection index. If a feature is listed but no number
    is provided, `1` (on) is assumed. Thus, the following descriptors are all equivalent:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Remember that all <*`string`*> values *must* be quoted. Thus, the first of
    the following descriptors will be recognized, but the second will be ignored:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: A further restriction is that OpenType requires that all feature tags be four
    ASCII characters long. Any feature name longer or shorter, or that uses non-ASCII
    characters, is invalid and will be ignored. (This isn’t something you need to
    worry about unless you’re using a font that has its own made-up feature names
    and the font’s creator didn’t follow the naming rules.)
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, OpenType fonts *always* have the following features enabled unless
    the author explicitly disables them via `font-feature-settings` or `font-variant`:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: '`"calt"`'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: Contextual alternates
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: '`"ccmp"`'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: Composed characters
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: '`"clig"`'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: Contextual ligatures
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '`"liga"`'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: Standard ligatures
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: '`"locl"`'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: Localized forms
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: '`"mark"`'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: Mark-to-base positioning
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '`"mkmk"`'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: Mark-to-mark positioning
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '`"rlig"`'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: Required ligatures
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, other features may be enabled by default in specific situations,
    such as vertical alternatives (`"vert"`) for vertical runs of text.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: The OpenType `font-feature-setting` values we’ve discussed so far are all listed
    in [Table 14-14](#opentype_values), along with a few others we didn’t touch on
    for lack of support.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-14\. OpenType values
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Meaning | Longhand |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
- en: '| `"afrc"` | Alternative fractions | `stacked-fractions` |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
- en: '| `"c2pc"` | Petite capitals | `petite-caps` |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
- en: '| `"c2sc"` | Small capitals from capitals | `all-small-caps` |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
- en: '| `"calt"` | Contextual alternates | `contextual` |'
  id: totrans-639
  prefs: []
  type: TYPE_TB
- en: '| `"case"` | Case-sensitive forms |  |'
  id: totrans-640
  prefs: []
  type: TYPE_TB
- en: '| `"clig"` | Common ligatures | `common-ligatures` |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
- en: '| `"cswh"` | Swash function | `swash()` |'
  id: totrans-642
  prefs: []
  type: TYPE_TB
- en: '| `"cv01"` | Character variants (01–99) | `character-variant()` |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
- en: '| `"dnom"` | Denominators |  |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
  zh: '| `"dnom"` | 分母 |  |'
- en: '| `"frac"` | Fractions | `diagonal-fractions` |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
  zh: '| `"frac"` | 分数 | `diagonal-fractions` |'
- en: '| `"fwid"` | Full-width variants | `full-width` |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
  zh: '| `"fwid"` | 全宽变体 | `full-width` |'
- en: '| `"hist"` | Enable historical forms | `historical-forms` |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
  zh: '| `"hist"` | 启用历史形式 | `historical-forms` |'
- en: '| `"liga"` | Standard ligatures | `common-ligatures` |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
  zh: '| `"liga"` | 标准连字 | `common-ligatures` |'
- en: '| `"lnum"` | Lining figures | `lining-nums` |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
  zh: '| `"lnum"` | 直线数字 | `lining-nums` |'
- en: '| `"locl"` | Localized forms |  |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: '| `"locl"` | 本地化形式 |  |'
- en: '| `"numr"` | Numerators |  |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
  zh: '| `"numr"` | 分子 |  |'
- en: '| `"nalt"` | Annotation function | `annotation()` |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
  zh: '| `"nalt"` | 注释功能 | `annotation()` |'
- en: '| `"onum"` | Old-style figures | `oldstyle-nums` |'
  id: totrans-653
  prefs: []
  type: TYPE_TB
  zh: '| `"onum"` | 古老数字 | `oldstyle-nums` |'
- en: '| `"ordn"` | Ordinal markers | `ordinal` |'
  id: totrans-654
  prefs: []
  type: TYPE_TB
  zh: '| `"ordn"` | 序数标记 | `ordinal` |'
- en: '| `"ornm"` | Ornaments (function) | `ornaments()` |'
  id: totrans-655
  prefs: []
  type: TYPE_TB
  zh: '| `"ornm"` | 装饰物（功能） | `ornaments()` |'
- en: '| `"pcap"` | Petite capitals | `petite-caps` |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
  zh: '| `"pcap"` | 小型大写字母 | `petite-caps` |'
- en: '| `"pnum"` | Proportional figures |  |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
  zh: '| `"pnum"` | 比例数字 |  |'
- en: '| `"pwid"` | Proportionally spaced variants | `proportional-width` |'
  id: totrans-658
  prefs: []
  type: TYPE_TB
  zh: '| `"pwid"` | 按比例空格的变体 | `proportional-width` |'
- en: '| `"ruby"` | Ruby | `ruby` |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| `"ruby"` | 注音 | `ruby` |'
- en: '| `"salt"` | Stylistic function | `stylistic()` |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| `"salt"` | 风格功能 | `stylistic()` |'
- en: '| `"sinf"` | Scientific inferiors |  |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| `"sinf"` | 科学下标 |  |'
- en: '| `"smcp"` | Small capitals | `small-caps` |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| `"smcp"` | 小型大写字母 | `small-caps` |'
- en: '| `"smpl"` | Simplified forms | `simplified` |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| `"smpl"` | 简化形式 | `simplified` |'
- en: '| `"ss01"` | Stylistic set 1 (numero correct) | `styleset()` |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| `"ss01"` | 风格设置1（正确的编号） | `styleset()` |'
- en: '| `"ss07"` | Stylistic set (1–20) | `styleset()` |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| `"ss07"` | 风格设置（1–20） | `styleset()` |'
- en: '| `"subs"` | Subscript |  |'
  id: totrans-666
  prefs: []
  type: TYPE_TB
  zh: '| `"subs"` | 下标 |  |'
- en: '| `"sups"` | Superscript |  |'
  id: totrans-667
  prefs: []
  type: TYPE_TB
  zh: '| `"sups"` | 上标 |  |'
- en: '| `"swsh"` | Swash function | `swash()` |'
  id: totrans-668
  prefs: []
  type: TYPE_TB
  zh: '| `"swsh"` | 花体功能 | `swash()` |'
- en: '| `"titl"` | Titling capitals | `titling-caps` |'
  id: totrans-669
  prefs: []
  type: TYPE_TB
  zh: '| `"titl"` | 标题大写字母 | `titling-caps` |'
- en: '| `"tnum"` | Tabular figures | `tabular-nums` |'
  id: totrans-670
  prefs: []
  type: TYPE_TB
  zh: '| `"tnum"` | 制表数字 | `tabular-nums` |'
- en: '| `"trad"` | Traditional forms | `traditional` |'
  id: totrans-671
  prefs: []
  type: TYPE_TB
  zh: '| `"trad"` | 传统形式 | `traditional` |'
- en: '| `"unic"` | Unicase | `unicase` |'
  id: totrans-672
  prefs: []
  type: TYPE_TB
  zh: '| `"unic"` | 单例 | `unicase` |'
- en: '| `"zero"` | Slashed zero | `slashed-zero` |'
  id: totrans-673
  prefs: []
  type: TYPE_TB
  zh: '| `"zero"` | 斜线零 | `slashed-zero` |'
- en: The complete list of standard OpenType feature names can be found at [Microsoft’s
    Registered Features page](https://microsoft.com/typography/otspec/featurelist.htm).
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 标准OpenType特性名称的完整列表可以在[Microsoft的注册特性页面](https://microsoft.com/typography/otspec/featurelist.htm)上找到。
- en: 'That said, `font-feature-settings` is a low-level feature designed to handle
    special cases for which no other way exists to enable or access an OpenType font
    feature. You also have to list all of the feature settings you want to use in
    a single property value. Whenever possible, use the `font-variant` shorthand property
    or one of the six associated longhand properties: `font-variant-ligatures`, `font-variant-caps`,
    `font-variant-east-asian`, `font-variant-alternates`, `font-variant-position`,
    and `font-variant-numeric`.'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，`font-feature-settings`是一种低级功能，旨在处理除启用或访问OpenType字体特性之外没有其他方法处理的特殊情况。你还必须在单个属性值中列出所有要使用的特性设置。在可能的情况下，请使用`font-variant`简写属性或六个相关的分开的属性：`font-variant-ligatures`，`font-variant-caps`，`font-variant-east-asian`，`font-variant-alternates`，`font-variant-position`和`font-variant-numeric`。
- en: The font-feature-settings Descriptor
  id: totrans-676
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`font-feature-settings`描述符'
- en: The `font-feature-settings` descriptor lets you decide which of an OpenType
    font face’s settings can or cannot be used, specified as a space-separated list.
    Now, wait a second—isn’t that almost exactly what we did with `font-variant` just
    a few paragraphs ago? Yes! The `font-variant` descriptor covers nearly everything
    `font-feature-settings` does, plus a little more besides. It just does so in a
    more CSS-like way, with value names instead of cryptic OpenType identifiers and
    Boolean toggles. Because of this, the CSS specification explicitly encourages
    authors to use `font-variant` instead of `font-feature-settings`, except when
    there’s a font feature that the value list of `font-variant` doesn’t include.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-feature-settings`描述符让您决定使用OpenType字体面的哪些设置可以或不能使用，指定为以空格分隔的列表。现在，等一下—难道这几乎不就是我们刚刚在几个段落前使用`font-variant`做的吗？是的！`font-variant`描述符几乎包括`font-feature-settings`所做的一切，再加上一点额外的功能。只是以一种更像CSS的方式，通过值名称而不是神秘的OpenType标识符和布尔切换来实现。正因为如此，CSS规范明确鼓励作者使用`font-variant`而不是`font-feature-settings`，除非`font-variant`的值列表中没有包括某个字体特性。'
- en: Keep in mind that this descriptor merely makes features available for use (or
    suppresses their use). It does not turn them on for the display of text; for that,
    see [“Font Feature Settings”](#font_feature_settings).
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，此描述符仅使功能可供使用（或抑制其使用）。它不会为文本的显示打开它们；有关详细信息，请参阅[“字体特征设置”](#font_feature_settings)。
- en: 'Just as with the `font-variant` descriptor, the `font-feature-settings` descriptor
    defines which font features are enabled (or disabled) for the font face being
    declared in the `@font-face` rule. For example, given the following, Switzera
    will have alternative fractions and small-caps disabled, even if such features
    exist in SwitzeraADF:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `font-variant` 描述符一样，`font-feature-settings` 描述符定义了在 `@font-face` 规则中声明的字体面的哪些字体功能已启用（或禁用）。例如，给定以下内容，即使SwitzeraADF中存在这些功能，Switzera将禁用替代分数和小型大写字母：
- en: '[PRE68]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `font-feature-settings` descriptor can take all of the values of the `font-feature-settings`
    property *except* for `inherit`.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-feature-settings` 描述符可以接受 `font-feature-settings` 属性的所有值，*除了* `inherit`。'
- en: Font Variation Settings
  id: totrans-682
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体变体设置
- en: The `font-variation-settings` property provides low-level control over variable
    font characteristics, by specifying a four-letter axis name along with a value.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-variation-settings` 属性通过指定四个字母的轴名称和值，提供对可变字体特性的低级控制。'
- en: There are five registered axes, listed in [Table 14-15](#font_variation_axes).
    We have covered almost all of them.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 有五个注册轴，列在[表 14-15](#font_variation_axes) 中。我们已经涵盖了几乎所有的内容。
- en: Table 14-15\. Font variation axes
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-15\. 字体变体轴
- en: '| Axis | Property | Property value |'
  id: totrans-686
  prefs: []
  type: TYPE_TB
  zh: '| 轴 | 属性 | 属性值 |'
- en: '| --- | --- | --- |'
  id: totrans-687
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `"wght"` | `font-weight` | `1` – `1000` |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '| `"wght"` | `font-weight` | `1` – `1000` |'
- en: '| `"slnt"` | `font-style` | `oblique` / `oblique` *<angle>* |'
  id: totrans-689
  prefs: []
  type: TYPE_TB
  zh: '| `"slnt"` | `font-style` | `oblique` / `oblique` *<angle>* |'
- en: '| `"ital"` | `font-style` | `italic` |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: '| `"ital"` | `font-style` | `italic` |'
- en: '| `"opsz"` | `font-optical-sizing` |  |'
  id: totrans-691
  prefs: []
  type: TYPE_TB
  zh: '| `"opsz"` | `font-optical-sizing` |  |'
- en: '| `"wdth"` | `font-stretch` |  |'
  id: totrans-692
  prefs: []
  type: TYPE_TB
  zh: '| `"wdth"` | `font-stretch` |  |'
- en: 'We use the term *registered axes* because font developers are not limited to
    weight, width, optical size, slant, and italics: they can create custom axes,
    and “register” them by giving them a four-letter label. The simplest way to know
    if a font has such axes is to look at the font’s documentation; otherwise, you
    have to know how to dig into the internals of a font’s file(s) to find out. These
    axes can control any aspect of the font’s appearance, such as the size of the
    dot on lowercase *i* and *j*. Creating custom axes is beyond the scope of this
    book, but calling on them where they exist is not.'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用术语*注册轴*，因为字体开发者不仅限于重量、宽度、光学大小、倾斜和斜体：他们可以创建自定义轴，并通过提供四个字母的标签“注册” 它们。要知道字体是否具有此类轴的最简单方法是查看字体的文档；否则，您必须知道如何深入查看字体文件的内部以了解详情。这些轴可以控制字体外观的任何方面，例如小写字母*i*和*j*上点的大小。创建自定义轴超出了本书的范围，但在存在这些轴的地方调用它们是可行的。
- en: 'Because these axes are string values, they have to be quoted, are case-sensitive,
    and are always lowercase. Imagine a font for which the size of the dots (which
    are properly called *diacritic marks* or just *diacritics*) over lowercase *i*
    and *j* can be changed by way of an axis called `DCSZ` (for *diacritic size*).
    Furthermore, this axis has been defined by the font’s designer to allow values
    from 1 to 10\. The diacritic size could be maximized as follows:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些轴是字符串值，因此必须用引号引起来，大小写敏感，并始终为小写。想象一个字体，其中小写字母*i*和*j*上的点（正确称为*变音符号*或简称*变音符号*）可以通过称为
    `DCSZ`（*变音符号大小*）的轴来更改。此外，该轴已由字体设计师定义，允许值从1到10。变音符号大小可以最大化如下：
- en: '[PRE69]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The `font-variation-settings` descriptor is the same as the property. Instead
    of declaring each registered axis separately, they are declared on one line, comma
    separated:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-variation-settings` 描述符与属性相同。与单独声明每个注册轴不同，它们在一行上声明，用逗号分隔：'
- en: '[PRE70]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Tip
  id: totrans-698
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Although you can set the weight, style, and so forth of a given font by using
    `font-variation-settings`, it is recommended that you use the more widely supported
    and human-readable properties `font-weight` and `font-style` instead.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以使用 `font-variation-settings` 设置给定字体的重量、样式等，但建议您改用更广泛支持且人类可读的属性 `font-weight`
    和 `font-style`。
- en: Font Optical Sizing
  id: totrans-700
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体光学大小
- en: Text rendered at different sizes often benefits from slightly different visual
    representations. For example, to aid reading at small text sizes, glyphs have
    less detail and strokes are often thicker with larger serifs. Larger text can
    have more features and a greater contrast between thicker and thinner strokes.
    The property `font-optical-sizing` allows authors to enable or disable this feature
    of variable fonts.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同大小的文本上渲染的文本通常会从略微不同的视觉表现中受益。例如，为了辅助小文本大小的阅读，字形的细节较少，笔划通常更粗，带有更大的衬线。较大的文本可以具有更多的特征和更大的粗细笔划对比。`font-optical-sizing`属性允许作者启用或禁用变体字体的此功能。
- en: By default (via `auto`), browsers can modify the shape of glyphs based on font
    size and pixel density. The `none` value tells the browser to *not* do this.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下（通过`auto`），浏览器可以根据字体大小和像素密度修改字形的形状。`none`值告诉浏览器*不要*这样做。
- en: Tip
  id: totrans-703
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In fonts that support it, optical sizing is usually defined as a range of numbers.
    If you want to explicitly change the optical sizing of a given element’s font
    to be a specific number, perhaps to make text sturdier or more delicate than it
    would be by default, use the `font-variation-settings` property and give it a
    value like `'opsz' 10` (where `10` can be any number in the optical-sizing range).
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 在支   在支持的字体中，光学大小通常定义为一系列数字。如果你想明确将某个元素字体的光学大小更改为特定数字，或许是为了使文本比默认状态下更加坚固或精致，使用`font-variation-settings`属性并赋值如
    `'opsz' 10`（其中`10`可以是光学大小范围内的任何数字）。
- en: Override Descriptors
  id: totrans-705
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖描述符
- en: 'This brings us to the last three `@font-face` descriptors that we have yet
    to discuss. Three descriptors enable override settings for font families: `ascent-override`,
    `descent-override`, and `line-gap-override`, which define the ascent, descent,
    and line gap metrics, respectively. All three descriptors take the same values:
    `normal` or a <*`percentage`*>.'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们进入了我们还未讨论的最后三个`@font-face`描述符。三个描述符启用字体系列的覆盖设置：`ascent-override`、`descent-override`和`line-gap-override`，分别定义上升度量、下降度量和行间距度量。所有三个描述符的取值相同：`normal`或<*`percentage`*>。
- en: The goal of these descriptors is to help fallback fonts better match a primary
    font by overriding the metrics of the fallback font and using those of the primary
    font instead.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 这些描述符的目标是通过覆盖备用字体的度量值并使用主字体的度量值来帮助备用字体更好地匹配主字体。
- en: The *ascent metric* is the distance above the baseline used to lay out line
    boxes (the distance from the baseline to the top of the em box). The *descent
    metric* is the distance below the baseline used to lay out line boxes (the distance
    from the baseline to the bottom of the em box). The *line-gap metric* is the font’s
    recommended distance between adjacent lines of text, which is sometimes called
    *external leading*.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '*上升度量*是用于布局行框的基线之上的距离（基线到em框顶部的距离）。*下降度量*是用于布局行框的基线之下的距离（基线到em框底部的距离）。*行间距度量*是字体推荐的相邻文本行之间的距离，有时称为*外部行距*。'
- en: 'Here’s an example of a hypothetical font and its ascent, descent, and line-gap
    override descriptors:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个假设字体及其上升度量、下降度量和行间距覆盖描述符的示例：
- en: '[PRE71]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This will direct the browser to alter the ascent and descent heights by 110%
    and 95%, respectively, and increase the line gap to 105% the distance in the fallback
    font.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 这将指示浏览器将上升和下降高度分别调整为110%和95%，并将行间距增加到备用字体的距离的105%。
- en: Font Kerning
  id: totrans-712
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体字距
- en: A font property that doesn’t have a descriptor equivalent is `font-kerning`.
    Some fonts contain data indicating how characters should be spaced relative to
    one another, known as *kerning*. Kerning can make character spacing more visually
    appealing and pleasant to read.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 一个没有等效描述符的字体属性是`font-kerning`。一些字体包含数据，指示字符之间的间距，称为*字距*。字距可以使字符间距更加美观且易于阅读。
- en: Kerning space varies depending on the way characters are combined; for example,
    the character pair *oc* may have a different spacing than the pair *ox*. Similarly,
    *AB* and *AW* may have different separation distances, to the point that in some
    fonts, the top-right tip of the *W* is actually placed to the left of the bottom-right
    tip of the *A*. This kerning data can be explicitly called for or suppressed using
    the property `font-kerning`.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 字距空间因字符组合方式而异；例如，字符对*oc*的间距可能与字符对*ox*不同。类似地，*AB*和*AW*的分隔距离也可能不同，以至于在某些字体中，*W*的右上角尖端实际上放置在*A*的右下角尖端的左侧。这些字距数据可以通过`font-kerning`属性显式调用或抑制。
- en: 'The value `none` is pretty simple: it tells the user agent to ignore any kerning
    information in the font. The `normal` value tells the user agent to kern the text
    normally—that is, according to the kerning data contained in the font. The `auto`
    value tells the user agent to do whatever it thinks best, possibly depending on
    the type of font in use. The OpenType specification, for example, recommends (but
    does not require) that kerning be applied whenever the font supports it. Furthermore,
    as per the [CSS specification](https://www.w3.org/TR/css-fonts-4/#font-kerning-prop):'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '`none` 的值非常简单：它告诉用户代理忽略字体中的任何字距信息。`normal` 值告诉用户代理按照字体中包含的字距数据正常进行字距处理。`auto`
    值告诉用户代理按照它认为最好的方式进行处理，可能取决于所使用的字体类型。例如，OpenType 规范建议（但不要求）在字体支持时应用字距。此外，根据[CSS
    规范](https://www.w3.org/TR/css-fonts-4/#font-kerning-prop)：'
- en: '[Browsers] may synthetically support the kern feature with fonts that contain
    kerning data in the form of a `kern` table but lack kern feature support in the
    `GPOS` table.'
  id: totrans-716
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[浏览器] 可能会使用包含`kern`表中的字距数据但缺少`GPOS`表中字距特性支持的字体，合成地支持字距特性。'
- en: This means, in effect, that if kerning information is built into the font, browsers
    are allowed to enforce it even if the font lacks an explicit enabling of kerning
    via a feature table.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，实际上，如果字体中内置了字距信息，浏览器可以在没有通过特征表显式启用字距的情况下强制执行它。
- en: Note
  id: totrans-718
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If the `letter-spacing` property (see [Chapter 15](ch15.html#text_properties))
    is applied to kerned text, the kerning is done first and *then* the letters’ spacing
    is adjusted according to the value of `letter-spacing`, not the other way around.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对经过字距处理的文本应用`letter-spacing`属性（参见[第 15 章](ch15.html#text_properties)），则首先进行字距处理，然后根据`letter-spacing`的值调整字母间距，而不是反过来。
- en: The font Property
  id: totrans-720
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体属性
- en: 'All of the properties discussed thus far are very sophisticated, but writing
    them all out could get a little tedious:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止讨论的所有属性都非常复杂，但是把它们全部写出来可能会有点乏味：
- en: '[PRE72]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Some of this problem could be solved by grouping selectors, but wouldn’t it
    be easier to combine everything into a single property? Enter `font`, which is
    a shorthand property encompassing most (not quite all) of the other font properties,
    and a little more besides.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合选择器可以解决部分问题，但将所有内容合并为单个属性会更简单吗？这就是`font`的作用，它是一个包含大多数（并非全部）其他字体属性的简写属性，还有一些其他内容。
- en: 'Generally speaking, a `font` declaration can have any one value from each of
    the listed font properties, or else a system font value (described in [“Using
    System Fonts”](#using_system_fonts)). Therefore, the preceding example could be
    shortened as follows (and have exactly the same effect, as illustrated by [Figure 14-23](#typical_font_rules)):'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`font` 声明可以从列出的每个字体属性中选择任何一个值，或者是系统字体值（在[“使用系统字体”](#using_system_fonts)中描述）。因此，前面的例子可以缩短如下（并且效果完全相同，如[图 14-23](#typical_font_rules)所示）：
- en: '[PRE73]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '![css5 1423](assets/css5_1423.png)'
  id: totrans-726
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1423](assets/css5_1423.png)'
- en: Figure 14-23\. Typical font rules
  id: totrans-727
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-23\. 典型的字体规则
- en: 'We say that the styles “could be” shortened in this way because a few other
    possibilities exist, thanks to the relatively loose way in which `font` can be
    written. If you look closely at the preceding example, you’ll see that the first
    three values don’t occur in the same order. In the `h1` rule, the first three
    values are for `font-style`, `font-weight`, and `font-variant`, in that order.
    In the second, they’re ordered `font-weight`, `font-variant`, and `font-style`.
    There is nothing wrong here because these three can be written in any order. Furthermore,
    if any has a value of `normal`, that can be left out altogether. Therefore, the
    following rules are equivalent to the previous example:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说样式可以以这种方式“缩短”，是因为`font`的书写方式比较宽松，所以还有其他几种可能性。如果你仔细观察前面的例子，你会发现前三个值的顺序并不相同。在
    `h1` 规则中，前三个值是 `font-style`、`font-weight` 和 `font-variant`，依此顺序。而在第二个例子中，它们的顺序是
    `font-weight`、`font-variant` 和 `font-style`。这里没有问题，因为这三个值可以按任意顺序书写。此外，如果其中任何一个值是
    `normal`，那么可以完全省略它。因此，以下规则等同于前一个例子：
- en: '[PRE74]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: In this example, the value of `normal` is left out of the `h2` rule, but the
    effect is exactly the same as in the preceding example.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`normal` 的值被省略在 `h2` 规则中，但效果与前面的例子完全相同。
- en: 'It’s important to realize, however, that this free-for-all situation applies
    only to the first three values of `font`. The last two are much stricter in their
    behavior. Not only must `font-size` and `font-family` appear in that order as
    the last two values in the declaration, but both must always be present in a `font`
    declaration. Period, end of story. If either is left out, the entire rule will
    be invalidated and will be ignored completely by a user agent. Thus, the following
    rules will get you the result shown in [Figure 14-24](#the_necessity_of_both_size_and_family):'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是要意识到，这种自由情况仅适用于`font`的前三个值。后两个值的行为要严格得多。`font-size`和`font-family`必须以这个顺序作为声明的最后两个值出现，而且在`font`声明中必须始终同时出现。如果任何一个被省略，整个规则将无效，并且用户代理将完全忽略它。因此，以下规则将给您带来[图14-24](#the_necessity_of_both_size_and_family)中显示的结果：
- en: '[PRE75]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '![css5 1424](assets/css5_1424.png)'
  id: totrans-733
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1424](assets/css5_1424.png)'
- en: Figure 14-24\. The necessity of both size and family
  id: totrans-734
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-24\. 大小和字族的必要性
- en: Understanding font Property Limitations
  id: totrans-735
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解字体属性的限制
- en: Because the `font` property has been part of CSS since the very beginning, and
    because so many properties dealing with all the variants came later, the `font`
    property has some limitations when it comes to font variations.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`font`属性自CSS诞生以来就存在，并且因为后来引入了许多处理所有变体的属性，所以在涉及字体变体时，`font`属性存在一些限制。
- en: 'First, it’s important to remember that when using the `font` shorthand property,
    the following properties are all set to their default values even though they
    cannot be represented in `font`:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是记住，当使用`font`简写属性时，尽管不能在`font`中表示，以下属性都将设置为其默认值：
- en: '`font-feature-settings`'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-feature-settings`'
- en: '`font-kerning`'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-kerning`'
- en: '`font-language-override`'
  id: totrans-740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-language-override`'
- en: '`font-optical-sizing`'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-optical-sizing`'
- en: '`font-palette`'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-palette`'
- en: '`font-size-adjust`'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-size-adjust`'
- en: '`font-variant-alternates`'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-variant-alternates`'
- en: '`font-variant-caps` (unless `small-caps` is included in the `font` value)'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-variant-caps`（除非`font`值中包含`small-caps`）'
- en: '`font-variant-east-asian`'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-variant-east-asian`'
- en: '`font-variant-ligatures`'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-variant-ligatures`'
- en: '`font-variant-numeric`'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-variant-numeric`'
- en: '`font-variation-settings`'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font-variation-settings`'
- en: 'Second, and following on the note in the previous list, only two variation
    values are permitted: `small-caps` and `normal`. The numeric, ligature, alternate,
    East Asian, and many of the caps variants cannot be set via the `font` property.
    If you want, for example, to use small caps and slashed zeros in your top-level
    headings, you would need to write something like this:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点，延续前面列表中的说明，`font`属性只允许两个变体值：`small-caps`和`normal`。不能通过`font`属性设置数字、连字、备用字形、东亚字体等多种变体。例如，如果您希望在顶级标题中使用小型大写字母和斜线零，则需要编写如下内容：
- en: '[PRE76]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Third, another property value that suffers from the weight of history is font
    stretching. As we discussed earlier in the chapter, `font-stretch` allows you
    to choose from numerous keywords or to set a percentage in the range of 50% to
    200% (inclusive). The keywords may be used in `font`, but the percentage value
    may not.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 第三点，受历史沉淀影响的属性值是字体拉伸。正如我们在本章前面讨论的那样，`font-stretch`允许您从多个关键字中选择，或在50%到200%（包括边界）的范围内设置百分比。关键字可以在`font`中使用，但百分比值则不能。
- en: Adding the Line Height
  id: totrans-753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加行高
- en: 'We also can set the value of the `line-height` property by using `font`, even
    though `line-height` is a text property (not covered in this chapter), not a font
    property. It’s done as a sort of addition to the `font-size` value, separated
    from it by a forward slash (`/`):'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过`font`设置`line-height`属性的值，即使`line-height`是一个文本属性（本章不涉及），而不是字体属性。这是通过斜线（`/`）与`font-size`值分隔开来实现的：
- en: '[PRE77]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: These rules, demonstrated in [Figure 14-25](#adding_line_height_to_the_mix),
    set all `<h2>` elements to be bold and italic (using face for one of the sans-serif
    font families), set the `font-size` to `24px` (twice the `body`’s size), and set
    the `line-height` to `28.8px`.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则在[图14-25](#adding_line_height_to_the_mix)中展示，将所有`<h2>`元素设置为粗体和斜体（使用一种无衬线字体族），将`font-size`设置为`24px`（是`body`大小的两倍），并将`line-height`设置为`28.8px`。
- en: '![css5 1425](assets/css5_1425.png)'
  id: totrans-757
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1425](assets/css5_1425.png)'
- en: Figure 14-25\. Adding line height to the mix
  id: totrans-758
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-25\. 将行高添加到混合中
- en: This addition of a value for `line-height` is entirely optional, just as the
    first three `font` values are. If you do include a `line-height` value, remember
    that `font-size` always comes before `line-height`, never after, and the two are
    always separated by a slash.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`line-height`的添加是完全可选的，就像前三个`font`值一样。如果包括`line-height`值，请记住，`font-size`始终位于`line-height`之前，而不是之后，并且两者之间始终用斜杠分隔。
- en: Warning
  id: totrans-760
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'This may seem repetitive, but it’s one of the most common errors made by CSS
    authors, so we can’t say it enough: the required values for `font` are `font-size`
    and `font-family`, in that order. Everything else is strictly optional.'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有些重复，但这是CSS作者经常犯的最常见错误之一，所以我们不能说得太多：`font`的必需值是`font-size`和`font-family`，按照这个顺序。其他所有内容都是严格可选的。
- en: Using the Shorthand Properly
  id: totrans-762
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确使用简写
- en: 'It is important to remember that `font`, being a shorthand property, can act
    in unexpected ways if you are careless with its use. Consider the following rules,
    which are illustrated in [Figure 14-26](#shorthand_changes):'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，`font`作为简写属性，如果使用不慎可能会产生意想不到的效果。请考虑以下规则，这些规则在[图14-26](#shorthand_changes)中有示例：
- en: '[PRE78]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '![css5 1426](assets/css5_1426.png)'
  id: totrans-766
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1426](assets/css5_1426.png)'
- en: Figure 14-26\. Shorthand changes
  id: totrans-767
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-26。简写变更
- en: 'Did you notice that the `<h2>` element is neither italicized nor small-capped,
    and that none of the elements are bold? This is the correct behavior. When the
    shorthand property `font` is used, any omitted values are reset to their defaults.
    Thus, the previous example could be written as follows and still be exactly equivalent:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到`<h2>`元素既不是斜体，也不是小型大写字母，并且所有元素都不是粗体？这是正确的行为。当使用简写属性`font`时，任何省略的值都会被重置为它们的默认值。因此，前面的示例也可以写成以下形式，仍然完全等效：
- en: '[PRE80]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This sets the `<h2>` element’s font style and variant to `normal`, and the `font-weight`
    of all three elements to `normal`. This is the expected behavior of shorthand
    properties. The `<h3>` does not suffer the same fate as the `<h2>` because you
    use the property `font-size`, which is not a shorthand property and therefore
    affects only its own value.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置`<h2>`元素的字体样式和变体为`normal`，并将所有三个元素的`font-weight`设置为`normal`。这是简写属性的预期行为。`<h3>`不会像`<h2>`那样受到影响，因为你使用了`font-size`属性，它不是简写属性，因此仅影响其自身的值。
- en: Using System Fonts
  id: totrans-771
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用系统字体
- en: 'When you want to make a web page blend in with the user’s operating system,
    the system font values of `font` come in handy. These are used to take the font
    size, family, weight, style, and variant of elements of the operating system,
    and apply them to an element. The values are as follows:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望网页与用户操作系统融为一体时，系统字体的`font`值非常有用。这些值用于获取操作系统元素的字体大小、系列、粗细、样式和变体，并应用于一个元素。这些值如下：
- en: '`caption`'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '`caption`'
- en: Used for captioned controls, such as buttons
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 用于带标题的控件，如按钮
- en: '`icon`'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon`'
- en: Used to label icons
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 用于标记图标
- en: '`menu`'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu`'
- en: Used in menus—that is, drop-down menus and menu lists
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 用于菜单——即下拉菜单和菜单列表
- en: '`message-box`'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '`message-box`'
- en: Used in dialog boxes
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 用于对话框
- en: '`small-caption`'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '`small-caption`'
- en: Used for labeling small controls
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 用于标记小控件
- en: '`status-bar`'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '`status-bar`'
- en: Used in window status bars
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 用于窗口状态栏
- en: 'For example, you might want to set the font of a button to be the same as that
    of the buttons found in the operating system. For example:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能希望将按钮的字体设置为与操作系统中的按钮相同。例如：
- en: '[PRE81]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: With these values, you can create web-based applications that look very much
    like applications native to the user’s operating system.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些值，您可以创建看起来非常像用户操作系统中本地应用程序的基于Web的应用程序。
- en: 'Note that system fonts may be set only as a whole; that is, the font family,
    size, weight, style, etc., are all set together. Therefore, the button text from
    our previous example will look exactly the same as button text in the operating
    system, whether or not the size matches any of the content around the button.
    You can, however, alter the individual values after the system font has been set.
    Thus, the following rule will make sure the button’s font is the same size as
    its parent element’s font:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，系统字体只能作为整体设置；即字体系列、大小、粗细、样式等都一起设置。因此，与之前示例中的按钮文本相比，不管大小是否与按钮周围的内容匹配，按钮文本都将完全相同。但是，在设置系统字体后，您可以更改各个值。因此，以下规则将确保按钮的字体与其父元素的字体大小相同：
- en: '[PRE82]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: If you call for a system font and no such font exists on the user’s machine,
    the user agent may try to find an approximation, such as reducing the size of
    the `caption` font to arrive at the `small-caption` font. If no such approximation
    is possible, the user agent should use a default font of its own. If it can find
    a system font but can’t read all of its values, it should use the default value.
    For example, a user agent may be able to find a `status-bar` font but not get
    any information about whether the font is small caps. In that case, the user agent
    will use the value `normal` for the `small-caps` property.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用系统字体而用户机器上不存在这样的字体，则用户代理可以尝试找到一个近似值，比如将`caption`字体的大小减小到`small-caption`字体。如果无法找到这样的近似值，则用户代理应该使用自己的默认字体。如果可以找到系统字体但无法读取其所有值，则应使用默认值。例如，用户代理可能能够找到`status-bar`字体但无法获取有关该字体是否为小型大写字母的信息。在这种情况下，用户代理将为`small-caps`属性使用`normal`值。
- en: Font Matching
  id: totrans-791
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体匹配
- en: 'As you’ve seen, CSS allows for the matching of font families, weights, and
    variants. This is all accomplished through font matching, which is a vaguely complicated
    procedure. Understanding it is important for authors who want to help user agents
    make good font selections when displaying their documents. We left it for the
    end of the chapter because it’s not really necessary to understand how the font
    properties work, and some readers will probably want to skip this part. If you’re
    still interested, here’s how font matching works:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，CSS 允许匹配字体系列、字重和变体。这一切都通过字体匹配完成，这是一个略微复杂的过程。对于希望帮助用户代理在显示其文档时进行良好字体选择的作者来说，理解这一过程非常重要。我们将它放在章节末尾，因为理解字体属性的工作原理并不是必需的，而且一些读者可能会跳过这部分。如果你仍然感兴趣，下面是字体匹配的工作原理：
- en: The user agent creates, or otherwise accesses, a database of font properties.
    This database lists the various CSS properties of all the fonts to which the user
    agent has access. Typically, this will be all fonts installed on the machine,
    although there could be others (for example, the user agent could have its own
    built-in fonts). If the user agent encounters two identical fonts, it will ignore
    one of them.
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户代理创建或访问一个字体属性数据库。该数据库列出用户代理可以访问的所有字体的各种CSS属性。通常，这将是安装在机器上的所有字体，尽管可能还有其他字体（例如，用户代理可能具有其自己内置的字体）。如果用户代理遇到两个相同的字体，它将忽略其中一个。
- en: The user agent takes apart an element to which font properties have been applied
    and constructs a list of font properties necessary for the display of that element.
    Based on that list, the user agent makes an initial choice of a font family to
    use in displaying the element. If there is a complete match, the user agent can
    use that font. Otherwise, the user agent needs to do a little more work.
  id: totrans-794
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户代理解析应用了字体属性的元素，并构建一个显示该元素所需的字体属性列表。根据该列表，用户代理首先选择要在显示该元素时使用的字体系列。如果完全匹配，用户代理可以使用该字体。否则，用户代理需要做更多工作。
- en: A font is first matched against the `font-stretch` property.
  id: totrans-795
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先匹配`font-stretch`属性。
- en: A font is next matched against the `font-style` property. The keyword `italic`
    is matched by any font that is labeled as either `italic` or `oblique`. If neither
    is available, the match fails.
  id: totrans-796
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来匹配`font-style`属性。关键词`italic`匹配任何标记为`italic`或`oblique`的字体。如果两者都不可用，则匹配失败。
- en: The next match is to `font-weight`, which can never fail thanks to the way `font-weight`
    is handled in CSS (explained in [“How Weights Work”](#how_weights_work)).
  id: totrans-797
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来匹配`font-weight`，由于CSS中处理`font-weight`的方式（在[“字重工作原理”](#how_weights_work)中解释），它永远不会失败。
- en: Then, `font-size` is tackled. This must be matched within a certain tolerance,
    but that tolerance is defined by the user agent. Thus, one user agent might allow
    matching within a 20% margin of error, whereas another might allow only 10% differences
    between the size specified and the size that is actually used.
  id: totrans-798
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后处理`font-size`。必须在一定容差内匹配，但该容差由用户代理定义。因此，一个用户代理可能允许在指定大小和实际使用大小之间有20%的误差范围，而另一个用户代理可能仅允许10%的差异。
- en: If no font matched in step 2, the user agent looks for alternate fonts within
    the same font family. If it finds any, it repeats step 2 for that font.
  id: totrans-799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在第2步中没有匹配到字体，则用户代理会查找同一字体系列中的备用字体。如果找到任何备用字体，则对该字体重复第2步。
- en: Assuming a generic match has been found but doesn’t contain everything needed
    to display a given element—the font is missing the copyright symbol, for instance—the
    user agent goes back to step 3, which entails a search for another alternate font
    and another trip through step 2.
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设已经找到了一个通用匹配项，但不包含显示给定元素所需的全部内容——例如，字体缺少版权符号——用户代理会回到步骤 3，这包括搜索另一个备选字体并再次进行步骤
    2。
- en: Finally, if no match has been made and all alternate fonts have been tried,
    the user agent selects the default font for the given generic font family and
    does the best it can to display the element correctly.
  id: totrans-801
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果没有找到匹配项，并且已经尝试了所有备选字体，用户代理会为给定的通用字体系列选择默认字体，并尽力正确显示元素。
- en: 'Furthermore, the user agent does the following to resolve the handling of font
    variants and features:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用户代理还执行以下操作以解决字体变体和特征的处理：
- en: Check for font features enabled by default, including features required for
    a given script. The core set of default-enabled features is `"calt"`, `"ccmp"`,
    `"clig"`, `"liga"`, `"locl"`, `"mark"`, `"mkmk"`, and `"rlig"`.
  id: totrans-803
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查默认启用的字体特征，包括特定脚本所需的特征。默认启用的核心特征集包括 `"calt"`、`"ccmp"`、`"clig"`、`"liga"`、`"locl"`、`"mark"`、`"mkmk"`
    和 `"rlig"`。
- en: If the font is defined via an `@font-face` rule, check for the features implied
    by the `font-variant` descriptor in the `@font-face` rule. Then check for the
    font features implied by the `font-feature-settings` descriptor in the `@font-face`
    rule.
  id: totrans-804
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字体是通过 `@font-face` 规则定义的，请检查 `@font-face` 规则中 `font-variant` 描述符隐含的特征。然后检查
    `@font-face` 规则中 `font-feature-settings` 描述符隐含的字体特性。
- en: Check feature settings determined by properties other than `font-variant` or
    `font-feature-settings`. (For example, setting a nondefault value for the `letter-spacing`
    property will disable ligatures.)
  id: totrans-805
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查由除了 `font-variant` 或 `font-feature-settings` 之外的属性确定的特征设置。（例如，为 `letter-spacing`
    属性设置非默认值将禁用连字。）
- en: Check for features implied by the value of the `font-variant` property, the
    related `font-variant` subproperties (e.g., `` `font-variant-ligatures` ``), and
    any other property that may call for the use of OpenType features (e.g., `` `font-kerning`
    ``).
  id: totrans-806
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查由 `font-variant` 属性的值、相关的 `font-variant` 子属性（例如 `` `font-variant-ligatures`
    ``）以及可能需要使用 OpenType 特性的任何其他属性隐含的特征。
- en: Check for the features implied by the value of the `font-feature-settings` property.
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查由 `font-feature-settings` 属性的值隐含的特征。
- en: 'The whole process is long and tedious, but it helps to understand how user
    agents pick the fonts they do. For example, you might specify the use of Times
    or any other serif font in a document:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程冗长而乏味，但有助于理解用户代理如何选择它们所选择的字体。例如，您可以指定在文档中使用 Times 或任何其他衬线字体：
- en: '[PRE83]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: For each element, the user agent should examine the characters in that element
    and determine whether Times can provide characters to match. In most cases, it
    can do so with no problem.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个元素，用户代理应检查该元素中的字符，并确定 Times 是否能够提供匹配的字符。在大多数情况下，它可以毫无问题地做到这一点。
- en: Assume, however, that a Chinese character has been placed in the middle of a
    paragraph. Times has nothing that can match this character, so the user agent
    has to work around the character or look for another font that can fulfill the
    needs of displaying that element. Any Western font is highly unlikely to contain
    Chinese characters, but should one exist (let’s call it AsiaTimes), the user agent
    could use it in the display of that one element—or simply for the single character.
    Thus, the whole paragraph might be displayed using AsiaTimes, or everything in
    the paragraph might be in Times except for the single Chinese character, which
    is displayed in AsiaTimes.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 但假设在段落中间放置了一个中文字。Times 没有任何可以匹配此字符的东西，因此用户代理必须解决该字符的显示需求或寻找另一个能够满足显示该元素需求的字体。任何西文字体几乎不可能包含中文字，但如果存在（我们称其为
    AsiaTimes），用户代理可以在显示该元素时使用它——或仅用于单个字符。因此，整个段落可能使用 AsiaTimes 显示，或者段落中的所有内容都是 Times，除了单个中文字符以外，该字符使用
    AsiaTimes 显示。
- en: Summary
  id: totrans-812
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: From what was initially a very simple set of font properties, CSS has grown
    to allow fine-grained and wide-ranging influence over the way fonts are displayed
    on the web. From custom fonts downloaded over the web to custom-built families
    assembled out of a variety of individual faces, authors may be fairly said to
    overflow with font power.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 从最初非常简单的字体属性集合，CSS 已经发展到允许在 web 上对字体显示方式进行精细和广泛的影响。从通过 web 下载的自定义字体到由各种单独字体组合而成的自定义族，作者可以说是在字体力量中充满溢出。
- en: 'The typographic options available to authors today are far stronger than ever,
    but always remember: you must use this power wisely. While you can have 17 fonts
    in use on your site, that definitely doesn’t mean that you should. Quite aside
    from the aesthetic difficulties this could present for your users, it would also
    make the total page weight much, much higher than it needs to be. As with any
    other aspect of web design, you are advised to use your power wisely, not wildly.'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 今天作者可以使用的排版选项比以往任何时候都更为强大，但请记住：你必须明智地使用这种力量。尽管你可以在网站上使用17种字体，但这绝对不意味着你应该这样做。除了这可能给用户带来审美困难之外，它还会使页面的总重量远远超过必要的程度。就像网页设计的任何其他方面一样，建议你明智地使用你的权力，而不是肆意地使用。
