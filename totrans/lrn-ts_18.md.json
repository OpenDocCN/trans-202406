["```\nclass Engineer {\n    readonly area: string;\n\n    constructor(area: string) {\n        this.area = area;\n        console.log(`I work in the ${area} area.`);\n    }\n}\n\n// Type: string\nnew Engineer(\"mechanical\").area;\n```", "```\nclass Engineer {\n    constructor(readonly area: string) {\n        console.log(`I work in the ${area} area.`);\n    }\n}\n\n// Type: string\nnew Engineer(\"mechanical\").area;\n```", "```\nclass NamedEngineer {\n    fullName: string;\n\n    constructor(\n        name: string,\n        public area: string,\n    ) {\n        this.fullName = `${name}, ${area} engineer`;\n    }\n}\n```", "```\nclass NamedEngineer {\n    fullName: string;\n    area: string;\n\n    constructor(\n        name: string,\n        area: string,\n    ) {\n        this.area = area;\n        this.fullName = `${name}, ${area} engineer`;\n    }\n}\n```", "```\n@myDecorator\nclass MyClass { /* ... */ }\n```", "```\n{\n    \"compilerOptions\": {\n        \"experimentalDecorators\": true\n    }\n}\n```", "```\nfunction logOnCall(target: any, key: string, descriptor: PropertyDescriptor) {\n    const original = descriptor.value;\n    console.log(\"[logOnCall] I am decorating\", target.constructor.name);\n\n    descriptor.value = function (...args: unknown[]) {\n        console.log(`[descriptor.value] Calling '${key}' with:`, ...args);\n        return original.call(this, ...args);\n    }\n}\n\nclass Greeter {\n    @logOnCall\n    greet(message: string) {\n        console.log(`[greet] Hello, ${message}!`);\n    }\n}\n\nnew Greeter().greet(\"you\");\n// Output log:\n// \"[logOnCall] I am decorating\", \"Greeter\"\n// \"[descriptor.value] Calling 'greet' with:\", \"you\"\n// \"[greet] Hello, you!\"\n```", "```\nconst StatusCodes = {\n    InternalServerError: 500,\n    NotFound: 404,\n    Ok: 200,\n    // ...\n} as const;\n\nStatusCodes.InternalServerError; // 500\n```", "```\n// Type: 200 | 404 | 500\ntype StatusCodeValue = (typeof StatusCodes)[keyof typeof StatusCodes];\n\nlet statusCodeValue: StatusCodeValue;\n\nstatusCodeValue = 200; // Ok\n\nstatusCodeValue = -1;\n// Error: Type '-1' is not assignable to type 'StatusCodeValue'.\n```", "```\nenum StatusCode {\n    InternalServerError = 500,\n    NotFound = 404,\n    Ok = 200,\n}\n\nStatusCode.InternalServerError; // 500\n```", "```\nlet statusCode: StatusCode;\n\nstatusCode = StatusCode.Ok; // Ok\nstatusCode = 200; // Ok\n```", "```\nvar StatusCode;\n(function (StatusCode) {\n    StatusCode[StatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    StatusCode[StatusCode[\"NotFound\"] = 404] = \"NotFound\";\n    StatusCode[StatusCode[\"Ok\"] = 200] = \"Ok\";\n})(StatusCode || (StatusCode = {}));\n```", "```\nenum VisualTheme {\n    Dark, // 0\n    Light, // 1\n    System, // 2\n}\n```", "```\nvar VisualTheme;\n(function (VisualTheme) {\n    VisualTheme[VisualTheme[\"Dark\"] = 0] = \"Dark\";\n    VisualTheme[VisualTheme[\"Light\"] = 1] = \"Light\";\n    VisualTheme[VisualTheme[\"System\"] = 2] = \"System\";\n})(VisualTheme || (VisualTheme = {}));\n```", "```\nenum Direction {\n  Top = 1,\n  Right,\n  Bottom,\n  Left,\n}\n```", "```\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"Top\"] = 1] = \"Top\";\n    Direction[Direction[\"Right\"] = 2] = \"Right\";\n    Direction[Direction[\"Bottom\"] = 3] = \"Bottom\";\n    Direction[Direction[\"Left\"] = 4] = \"Left\";\n})(Direction || (Direction = {}));\n```", "```\nenum LoadStyle {\n    AsNeeded = \"as-needed\",\n    Eager = \"eager\",\n}\n```", "```\nvar LoadStyle;\n(function (LoadStyle) {\n    LoadStyle[\"AsNeeded\"] = \"as-needed\";\n    LoadStyle[\"Eager\"] = \"eager\";\n})(LoadStyle || (LoadStyle = {}));\n```", "```\nenum Wat {\n    FirstString = \"first\",\n    SomeNumber = 9000,\n    ImplicitNumber, // Ok (value 9001)\n    AnotherString = \"another\",\n\n    NotAllowed,\n    // Error: Enum member must have initializer.\n}\n```", "```\nconst enum DisplayHint {\n    Opaque = 0,\n    Semitransparent,\n    Transparent,\n}\n\nlet displayHint = DisplayHint.Transparent;\n```", "```\nlet displayHint = 2 /* DisplayHint.Transparent */;\n```", "```\nvar DisplayHint;\n(function (DisplayHint) {\n    DisplayHint[DisplayHint[\"Opaque\"] = 0] = \"Opaque\";\n    DisplayHint[DisplayHint[\"Semitransparent\"] = 1] = \"Semitransparent\";\n    DisplayHint[DisplayHint[\"Transparent\"] = 2] = \"Transparent\";\n})(DisplayHint || (DisplayHint = {}));\n\nlet displayHint = 2 /* Transparent */;\n```", "```\nnamespace Randomized {\n    const value = Math.random();\n    console.log(`My value is ${value}`);\n}\n```", "```\nvar Randomized;\n(function (Randomized) {\n    const value = Math.random();\n    console.log(`My value is ${value}`);\n})(Randomized || (Randomized = {}));\n```", "```\nnamespace Settings {\n  export const name = \"My Application\";\n  export const version = \"1.2.3\";\n\n  export function describe() {\n    return `${Settings.name} at version ${Settings.version}`;\n  }\n\n  console.log(\"Initializing\", describe());\n}\n\nconsole.log(\"Initialized\", Settings.describe());\n```", "```\nvar Settings;\n(function (Settings) {\n    Settings.name = \"My Application\";\n    Settings.version = \"1.2.3\";\n    function describe() {\n        return `${Settings.name} at version ${Settings.version}`;\n    }\n    Settings.describe = describe;\n    console.log(\"Initializing\", describe());\n})(Settings || (Settings = {}));\nconsole.log(\"Initialized\", Settings.describe());\n```", "```\n// settings/constants.ts\nnamespace Settings {\n  export const name = \"My Application\";\n  export const version = \"1.2.3\";\n}\n```", "```\n// settings/describe.ts\nnamespace Settings {\n    export function describe() {\n        return `${Settings.name} at version ${Settings.version}`;\n    }\n\n    console.log(\"Initializing\", describe());\n}\n```", "```\n// index.ts\nconsole.log(\"Initialized\", Settings.describe());\n```", "```\n// settings/constants.ts\nvar Settings;\n(function (Settings) {\n    Settings.name = \"My Application\";\n    Settings.version = \"1.2.3\";\n})(Settings || (Settings = {}));\n// settings/describe.ts\n(function (Settings) {\n    function describe() {\n        return `${Settings.name} at version ${Settings.version}`;\n    }\n    Settings.describe = describe;\n    console.log(\"Initialized\", describe());\n})(Settings || (Settings = {}));\nconsole.log(\"Initialized\", Settings.describe());\n```", "```\nconst Settings = {\n    describe: function describe() {\n        return `${Settings.name} at version ${Settings.version}`;\n    },\n    name: \"My Application\",\n    version: \"1.2.3\",\n};\n```", "```\nnamespace Root.Nested {\n    export const value1 = true;\n}\n\nnamespace Root {\n    export namespace Nested {\n        export const value2 = true;\n    }\n}\n```", "```\n(function (Root) {\n    let Nested;\n    (function (Nested) {\n        Nested.value2 = true;\n    })(Nested || (Nested = {}));\n})(Root || (Root = {}));\n```", "```\n// node_modules/@types/my-example-lib/index.d.ts\nexport const value: number;\nexport as namespace libExample;\n```", "```\n// src/index.ts\nimport * as libExample from \"my-example-lib\"; // Ok\nconst value = window.libExample.value; // Ok\n```", "```\n// settings/constants.ts\nexport const name = \"My Application\";\nexport const version = \"1.2.3\";\n```", "```\n// settings/describe.ts\nimport { name, version } from \"./constants\";\n\nexport function describe() {\n    return `${Settings.name} at version ${Settings.version}`;\n}\n\nconsole.log(\"Initializing\", describe());\n```", "```\n// index.ts\nimport { describe } from \"./settings/describe\";\n\nconsole.log(\"Initialized\", describe());\n```", "```\n// index.ts\nconst action = { area: \"people\", name: \"Bella Abzug\", role: \"politician\" };\n\ntype ActivistArea = \"nature\" | \"people\";\n\nexport { action, ActivistArea };\n```", "```\n// index.js\nconst action = { area: \"people\", name: \"Bella Abzug\", role: \"politician\" };\n\nexport { action };\n```", "```\n// index.ts\nimport { type TypeOne, value } from \"my-example-types\";\nimport type { TypeTwo } from \"my-example-types\";\nimport type DefaultType from \"my-example-types\";\n\nexport { type TypeOne, value };\nexport type { DefaultType, TypeTwo };\n```", "```\n// index.js\nimport { value } from \"my-example-types\";\n\nexport { value };\n```", "```\nimport { ClassOne, type ClassTwo } from \"my-example-types\";\n\nnew ClassOne(); // Ok\n\nnew ClassTwo();\n//  ~~~~~~~~\n// Error: 'ClassTwo' cannot be used as a value\n// because it was imported using 'import type'.\n```"]