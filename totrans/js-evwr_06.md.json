["```\n$ mongo\n```", "```\n$ use learning\n```", "```\ncollection: {\n  document: {},\n  document: {},\n  document: {}.\n  ...\n}\n```", "```\n$ db.pizza.save({ type: \"Cheese\" })\n```", "```\nWriteResult({ \"nInserted\" : 1 })\n```", "```\n$ db.pizza.save([{type: \"Veggie\"}, {type: \"Olive\"}])\n```", "```\n$ db.pizza.find()\n```", "```\n{ \"_id\" : ObjectId(\"5c7528b223ab40938c7dc536\"), \"type\" : \"Cheese\" }\n{ \"_id\" : ObjectId(\"5c7529fa23ab40938c7dc53e\"), \"type\" : \"Veggie\" }\n{ \"_id\" : ObjectId(\"5c7529fa23ab40938c7dc53f\"), \"type\" : \"Olive\" }\n```", "```\n$ db.pizza.find({ type: \"Cheese\" })\n$ db.pizza.find({ _id: ObjectId(\"A DOCUMENT ID HERE\") })\n```", "```\n$ db.pizza.update({ type: \"Veggie\" }, { type: \"Mushroom\" })\n```", "```\n{ \"_id\" : ObjectId(\"5c7528b223ab40938c7dc536\"), \"type\" : \"Cheese\" }\n{ \"_id\" : ObjectId(\"5c7529fa23ab40938c7dc53e\"), \"type\" : \"Mushroom\" }\n{ \"_id\" : ObjectId(\"5c7529fa23ab40938c7dc53f\"), \"type\" : \"Olive\" }\n```", "```\n$ db.pizza.remove({ type: \"Mushroom\" })\n```", "```\n$ db.pizza.remove({})\n```", "```\nDB_HOST=mongodb://localhost:27017/notedly\n```", "```\n// Require the mongoose library\nconst mongoose = require('mongoose');\n\nmodule.exports = {\n  connect: DB_HOST => {\n    // Use the Mongo driver's updated URL string parser\n    mongoose.set('useNewUrlParser', true);\n    // Use findOneAndUpdate() in place of findAndModify()\n    mongoose.set('useFindAndModify', false);\n    // Use createIndex() in place of ensureIndex()\n    mongoose.set('useCreateIndex', true);\n    // Use the new server discovery and monitoring engine\n    mongoose.set('useUnifiedTopology', true);\n    // Connect to the DB\n    mongoose.connect(DB_HOST);\n    // Log an error if we fail to connect\n    mongoose.connection.on('error', err => {\n      console.error(err);\n      console.log(\n        'MongoDB connection error. Please make sure MongoDB is running.'\n      );\n      process.exit();\n    });\n  },\n\n  close: () => {\n    mongoose.connection.close();\n  }\n};\n```", "```\nrequire('dotenv').config();\nconst db = require('./db');\n```", "```\nconst DB_HOST = process.env.DB_HOST;\n```", "```\ndb.connect(DB_HOST);\n```", "```\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\nrequire('dotenv').config();\n\nconst db = require('./db');\n\n// Run the server on a port specified in our .env file or port 4000\nconst port = process.env.PORT || 4000;\n// Store the DB_HOST value as a variable\nconst DB_HOST = process.env.DB_HOST;\n\nlet notes = [\n  {\n    id: '1',\n    content: 'This is a note',\n    author: 'Adam Scott'\n  },\n  {\n    id: '2',\n    content: 'This is another note',\n    author: 'Harlow Everly'\n  },\n  {\n    id: '3',\n    content: 'Oh hey look, another note!',\n    author: 'Riley Harrison'\n  }\n];\n\n// Construct a schema, using GraphQL's schema language\nconst typeDefs = gql`\n type Note {\n id: ID\n content: String\n author: String\n }\n\n type Query {\n hello: String\n notes: [Note]\n note(id: ID): Note\n }\n\n type Mutation {\n newNote(content: String!): Note\n }\n`;\n\n// Provide resolver functions for our schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n    notes: () => notes,\n    note: (parent, args) => {\n      return notes.find(note => note.id === args.id);\n    }\n  },\n  Mutation: {\n    newNote: (parent, args) => {\n      let noteValue = {\n        id: notes.length + 1,\n        content: args.content,\n        author: 'Adam Scott'\n      };\n      notes.push(noteValue);\n      return noteValue;\n    }\n  }\n};\n\nconst app = express();\n\n// Connect to the database\ndb.connect(DB_HOST);\n\n// Apollo Server setup\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// Apply the Apollo GraphQL middleware and set the path to /api\nserver.applyMiddleware({ app, path: '/api' });\n\napp.listen({ port }, () =>\n  console.log(\n    `GraphQL Server running at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```", "```\n// Require the mongoose library\nconst mongoose = require('mongoose');\n\n// Define the note's database schema\nconst noteSchema = new mongoose.Schema();\n\n// Define the 'Note' model with the schema\nconst Note = mongoose.model('Note', noteSchema);\n// Export the module\nmodule.exports = Note;\n```", "```\n// Define the note's database schema\nconst noteSchema = new mongoose.Schema(\n  {\n    content: {\n      type: String,\n      required: true\n    },\n    author: {\n      type: String,\n      required: true\n    }\n  },\n  {\n    // Assigns createdAt and updatedAt fields with a Date type\n    timestamps: true\n  }\n);\n```", "```\n// Require the mongoose library\nconst mongoose = require('mongoose');\n\n// Define the note's database schema\nconst noteSchema = new mongoose.Schema(\n  {\n    content: {\n      type: String,\n      required: true\n    },\n    author: {\n      type: String,\n      required: true\n    }\n  },\n  {\n    // Assigns createdAt and updatedAt fields with a Date type\n    timestamps: true\n  }\n);\n\n// Define the 'Note' model with the schema\nconst Note = mongoose.model('Note', noteSchema);\n// Export the module\nmodule.exports = Note;\n```", "```\nconst Note = require('./note');\n\nconst models = {\n  Note\n};\n\nmodule.exports = models;\n```", "```\nconst models = require('./models');\n```", "```\nnotes: async () => {\n  return await models.Note.find();\n},\n```", "```\nquery {\n  notes {\n    content\n    id\n    author\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"notes\": []\n  }\n}\n```", "```\nnewNote: async (parent, args) => {\n  return await models.Note.create({\n    content: args.content,\n    author: 'Adam Scott'\n  });\n}\n```", "```\nmutation {\n  newNote (content: \"This is a note in our database!\") {\n   content\n   author\n   id\n  }\n}\n```", "```\nnote: async (parent, args) => {\n  return await models.Note.findById(args.id);\n}\n```", "```\nquery {\n  note(id: \"5c7bff794d66461e1e970ed3\") {\n    id\n    content\n    author\n  }\n}\n```", "```\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\nrequire('dotenv').config();\n\nconst db = require('./db');\nconst models = require('./models');\n\n// Run our server on a port specified in our .env file or port 4000\nconst port = process.env.PORT || 4000;\nconst DB_HOST = process.env.DB_HOST;\n\n// Construct a schema, using GraphQL's schema language\nconst typeDefs = gql`\n type Note {\n id: ID\n content: String\n author: String\n }\n\n type Query {\n hello: String\n notes: [Note]\n note(id: ID): Note\n }\n\n type Mutation {\n newNote(content: String!): Note\n }\n`;\n\n// Provide resolver functions for our schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n    notes: async () => {\n      return await models.Note.find();\n    },\n    note: async (parent, args) => {\n      return await models.Note.findById(args.id);\n    }\n  },\n  Mutation: {\n    newNote: async (parent, args) => {\n      return await models.Note.create({\n        content: args.content,\n        author: 'Adam Scott'\n      });\n    }\n  }\n};\n\nconst app = express();\n\ndb.connect(DB_HOST);\n\n// Apollo Server setup\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// Apply the Apollo GraphQL middleware and set the path to /api\nserver.applyMiddleware({ app, path: '/api' });\n\napp.listen({ port }, () =>\n  console.log(\n    `GraphQL Server running at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```"]