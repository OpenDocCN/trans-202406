- en: Table of Contents (the real thing)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[How to Use This Book: Intro](preface03.xhtml#how_to_use_this_book_intro)'
  id: totrans-1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Your brain on Java.** Here *you are* trying to *learn* something, while here
    your *brain* is doing you a favor by making sure the learning doesn’t *stick*.
    Your brain’s thinking, “Better leave room for more important things, like which
    wild animals to avoid and whether naked snowboarding is a bad idea.” So how do
    you trick your brain into thinking that your life depends on knowing Java?'
  id: totrans-2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Who is this book for?”](preface03.xhtml#who_is_this_book_forquestion_mark)'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We know what you’re thinking”](preface03.xhtml#we_know_what_youapostrophere_thinking)'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Metacognition: thinking about thinking”](preface03.xhtml#metacognition_thinking_about_thinking)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s what WE did:”](preface03.xhtml#hereapostrophes_what_we_did)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s what YOU can do to bend your brain into submission”](preface03.xhtml#hereapostrophes_what_you_can_do_to_bend)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What you need for this book:”](preface03.xhtml#what_you_need_for_this_book)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Last-minute things you need to know:”](preface03.xhtml#last_minute_things_you_need_to_know)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.xhtml#breaking_the_surface_dive_in_a_quick_dip)'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Java takes you to new places.** From its humble release to the public as
    the (wimpy) version 1.02, Java seduced programmers with its friendly syntax, object-oriented
    features, memory management, and best of all—the promise of portability. We’ll
    take a quick dip and write some code, compile it, and run it. We’re talking syntax,
    loops, branching, and what makes Java so cool. Dive in.'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“The way Java works”](ch01.xhtml#the_way_java_works)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What you’ll do in Java”](ch01.xhtml#what_youapostrophell_do_in_java)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A very brief history of Java”](ch01.xhtml#a_very_brief_history_of_java)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Code structure in Java”](ch01.xhtml#code_structure_in_java)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Writing a class with a `main()`”](ch01.xhtml#writing_a_class_with_a_mainleft_parenthe)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Simple boolean tests”](ch01.xhtml#simple_boolean_tests)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Conditional branching”](ch01.xhtml#conditional_branching)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Coding a serious business application”](ch01.xhtml#coding_a_serious_business_application)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Phrase-O-Matic”](ch01.xhtml#phrase-o-matic)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch01.xhtml#exercise)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch01.xhtml#exercise_solutions)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.xhtml#a_trip_to_objectville_classes_and_object)'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**I was told there would be objects.** In [Chapter 1](ch01.xhtml#breaking_the_surface_dive_in_a_quick_dip),
    we put all of our code in the main() method. That’s not exactly object-oriented.
    So now we’ve got to leave that procedural world behind and start making some objects
    of our own. We’ll look at what makes object-oriented (OO) development in Java
    so much fun. We’ll look at the difference between a class and an object. We’ll
    look at how objects can improve your life.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Chair Wars”](ch02.xhtml#chair_wars)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Making your first object”](ch02.xhtml#making_your_first_object)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Making and testing Movie objects”](ch02.xhtml#making_and_testing_movie_objects)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Quick! Get out of main!”](ch02.xhtml#quickexclamation_mark_get_out_of_mainexc)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Running the Guessing Game”](ch02.xhtml#running_the_guessing_game)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch02.xhtml#exercise-id000002)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch02.xhtml#exercise_solutions-id00001)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.xhtml#know_your_variables_primitives_and_refer)'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Variables come in two flavors: primitive and reference.** There’s gotta be
    more to life than integers, Strings, and arrays. What if you have a PetOwner object
    with a Dog instance variable? Or a Car with an Engine? In this chapter we’ll unwrap
    the mysteries of Java types and look at what you can *declare* as a variable,
    what you can *put* in a variable, and what you can *do* with a variable. And we’ll
    finally see what life is truly like on the garbage-collectible heap.'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Declaring a variable”](ch03.xhtml#declaring_a_variable)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[““I’d like a double mocha, no, make it an int.””](ch03.xhtml#quotation_markiapostrophed_like_a_double)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Back away from that keyword!”](ch03.xhtml#back_away_from_that_keywordexclamation_m)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Controlling your Dog object”](ch03.xhtml#controlling_your_dog_object)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“An object reference is just another variable value”](ch03.xhtml#an_object_reference_is_just_another_vari)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Life on the garbage-collectible heap”](ch03.xhtml#life_on_the_garbage-collectible_heap)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“An array is like a tray of cups”](ch03.xhtml#an_array_is_like_a_tray_of_cups)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A Dog example”](ch03.xhtml#a_dog_example)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch04.xhtml#exercise-id000200)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch04.xhtml#exercise_solutions-id00003)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance)'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**State affects behavior, behavior affects state.** We know that objects have
    **state** and **behavior**, represented by **instance variables** and **methods**.
    Now we’ll look at how state and behavior are *related*. An object’s behavior uses
    an object’s unique state. In other words, ***methods use instance variable values.***
    Like, “if dog weight is less than 14 pounds, make yippy sound, else...” ***Let’s
    go change some state!***'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Remember: a class describes what an object knows and what an object does”](ch04.xhtml#remember_a_class_describes_what_an_objec)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The size affects the bark”](ch04.xhtml#the_size_affects_the_bark)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can send things to a method”](ch04.xhtml#you_can_send_things_to_a_method)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can get things back from a method”](ch04.xhtml#you_can_get_things_back_from_a_method)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can send more than one thing to a method”](ch04.xhtml#you_can_send_more_than_one_thing_to_a_me)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Cool things you can do with parameters and return types”](ch04.xhtml#cool_things_you_can_do_with_parameters_a)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Encapsulation”](ch04.xhtml#encapsulation)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How do objects in an array behave?”](ch04.xhtml#how_do_objects_in_an_array_behavequestio)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Declaring and initializing instance variables”](ch04.xhtml#declaring_and_initializing_instance_vari)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Comparing variables (primitives or references)”](ch04.xhtml#comparing_variables_left_parenthesisprim)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch04.xhtml#exercise-id000200)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch04.xhtml#exercise_solutions-id00003)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.xhtml#extra-strength_methods_writing_a_program)'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Let’s put some muscle in our methods.** You dabbled with variables, played
    with a few objects, and wrote a little code. But you need more tools. Like **operators.**
    And **loops.** Might be useful to **generate random numbers.** And **turn a String
    into an int**, yeah, that would be cool. And why don’t we learn it all by *building*
    something real, to see what it’s like to write (and test) a program from scratch.
    **Maybe a game**, like Sink a Startup (similar to Battleship).'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Let’s build a Battleship-style game: “Sink a Startup””](ch05.xhtml#letapostrophes_build_a_battleship-style)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Developing a Class”](ch05.xhtml#developing_a_class)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Writing the method implementations”](ch05.xhtml#writing_the_method_implementations)'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Writing test code for the SimpleStartup class”](ch05.xhtml#writing_test_code_for_the_simplestartup)'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The checkYourself() method”](ch05.xhtml#the_checkyourselfleft_parenthesisright_p)'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Prep code for the SimpleStartupGame class Everything happens in main()”](ch05.xhtml#prep_code_for_the_simplestartupgame_clas)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The game’s main() method”](ch05.xhtml#the_gameapostrophes_mainleft_parenthesis)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s play”](ch05.xhtml#letapostrophes_play)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“More about for loops”](ch05.xhtml#more_about_for_loops)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The enhanced for loop”](ch05.xhtml#the_enhanced_for_loop)'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Casting primitives”](ch05.xhtml#casting_primitives)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch05.xhtml#exercise-id000008)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch05.xhtml#exercise_solutions-id00500)'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.xhtml#using_the_java_library_get_to_know_the_j)'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Java ships with hundreds of prebuilt classes.** You don’t have to reinvent
    the wheel if you know how to find what you need from the Java library, commonly
    known as the **Java API.** *You’ve got better things to do.* If you’re going to
    write code, you might as well write *only* the parts that are custom for your
    application. The core Java library is a giant pile of classes just waiting for
    you to use like building blocks.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“In our last chapter, we left you with the cliff-hanger: a bug”](ch06.xhtml#in_our_last_chaptercomma_we_left_you_wit)'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Wake up and smell the library”](ch06.xhtml#wake_up_and_smell_the_library)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Some things you can do with ArrayList”](ch06.xhtml#some_things_you_can_do_with_arraylist)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Comparing ArrayList to a regular array”](ch06.xhtml#comparing_arraylist_to_a_regular_array)'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s build the REAL game: “Sink a Startup””](ch06.xhtml#letapostrophes_build_the_real_game_quota)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Prep code for the real StartupBust class”](ch06.xhtml#prep_code_for_the_real_startupbust_class)'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The final version of the Startup class”](ch06.xhtml#the_final_version_of_the_startup_class)'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Super powerful Boolean expressions”](ch06.xhtml#super_powerful_boolean_expressions)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Using the Library (the Java API)”](ch06.xhtml#using_the_library_left_parenthesisthe_ja)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch06.xhtml#exercise-id000003)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch06.xhtml#exercise_solutions-id00020)'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.xhtml#better_living_in_objectville_inheritance)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plan your programs with the future in mind.** What if you could write code
    that someone *else* could extend, **easily?** What if you could write code that
    was flexible, for those pesky last-minute spec changes? When you get on the Polymorphism
    Plan, you’ll learn the 5 steps to better class design, the 3 tricks to polymorphism,
    the 8 ways to make flexible code, and if you act now—a bonus lesson on the 4 tips
    for exploiting inheritance.'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Chair Wars Revisited...”](ch07.xhtml#chair_wars_revisitedhellip)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Understanding Inheritance”](ch07.xhtml#understanding_inheritance)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s design the inheritance tree for an Animal simulation program”](ch07.xhtml#letapostrophes_design_the_inheritance_tr)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Looking for more inheritance opportunities”](ch07.xhtml#looking_for_more_inheritance_opportuniti)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Using IS-A and HAS-A”](ch07.xhtml#using_is-a_and_has-a)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How do you know if you’ve got your inheritance right?”](ch07.xhtml#how_do_you_know_if_youapostropheve_got_y)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“When designing with inheritance, are you using or abusing?”](ch07.xhtml#when_designing_with_inheritancecomma_are)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Keeping the contract: rules for overriding”](ch07.xhtml#keeping_the_contract_rules_for_overridin)'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Overloading a method”](ch07.xhtml#overloading_a_method)'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch07.xhtml#exercise-id000011)'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch07.xhtml#exercise_solutions-id00004)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.xhtml#serious_polymorphism_interfaces_and_abst)'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inheritance is just the beginning.** To exploit polymorphism, we need interfaces.
    We need to go beyond simple inheritance to flexibility you can get only by designing
    and coding to interfaces. What’s an interface? A 100% abstract class. What’s an
    abstract class? A class that can’t be instantiated. What’s that good for? Read
    the chapter...'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Did we forget about something when we designed this?”](ch08.xhtml#did_we_forget_about_something_when_we_de)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The compiler won’t let you instantiate an abstract class”](ch08.xhtml#the_compiler_wonapostrophet_let_you_inst)'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Abstract vs. Concrete”](ch08.xhtml#abstract_vsdot_concrete)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You MUST implement all abstract methods”](ch08.xhtml#you_must_implement_all_abstract_methods)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Polymorphism in action”](ch08.xhtml#polymorphism_in_action)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What about non-Animals? Why not make a class generic enough to take anything?”](ch08.xhtml#what_about_non-animalsquestion_mark_why)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“When a Dog won’t act like a Dog”](ch08.xhtml#when_a_dog_wonapostrophet_act_like_a_dog)'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s explore some design options for reusing some of our existing classes
    in a PetShop program”](ch08.xhtml#letapostrophes_explore_some_design_optio)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Making and implementing the Pet interface”](ch08.xhtml#making_and_implementing_the_pet_interfac)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Invoking the superclass version of a method”](ch08.xhtml#invoking_the_superclass_version_of_a_met)'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch08.xhtml#exercise-id000013)'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch08.xhtml#exercise_solutions-id000300)'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.xhtml#life_and_death_of_an_object_constructors)'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Objects are born and objects die.** You’re in charge. You decide when and
    how to *construct* them. You decide when to *abandon* them. The **Garbage Collector
    (gc)** reclaims the memory. We’ll look at how objects are created, where they
    live, and how to keep or abandon them efficiently. That means we’ll talk about
    the heap, the stack, scope, constructors, super constructors, null references,
    and gc eligibility.'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“The Stack and the Heap: where things live”](ch09.xhtml#the_stack_and_the_heap_where_things_live)'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Methods are stacked”](ch09.xhtml#methods_are_stacked)'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What about local variables that are objects?”](ch09.xhtml#what_about_local_variables_that_are_obje)'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The miracle of object creation”](ch09.xhtml#the_miracle_of_object_creation)'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Construct a Duck”](ch09.xhtml#construct_a_duck)'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Doesn’t the compiler always make a no-arg constructor for you? No!”](ch09.xhtml#doesnapostrophet_the_compiler_always_mak)'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Nanoreview: four things to remember about constructors”](ch09.xhtml#nanoreview_four_things_to_remember_about)'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The role of superclass constructors in an object’s life”](ch09.xhtml#the_role_of_superclass_constructors_in_a)'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Can the child exist before the parents?”](ch09.xhtml#can_the_child_exist_before_the_parentsqu)'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What about reference variables?”](ch09.xhtml#what_about_reference_variablesquestion_m)'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure ](ch09.xhtml#id000100006)'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch09.xhtml#exercise-id000015)'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch09.xhtml#exercise_solutions-id00005)'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.xhtml#numbers_matter_numbers_and_statics)'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do the Math.** The Java API has methods for absolute value, rounding, min/max,
    etc. But what about formatting? You might want numbers to print exactly two decimal
    points, or with commas in all the right places. And you might want to print and
    manipulate dates, too. And what about parsing a String into a number? Or turning
    a number into a String? We’ll start by learning what it means for a variable or
    method to be *static.*'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“MATH methods: as close as you’ll ever get to a *global* method”](ch10.xhtml#math_methods_as_close_as_youapostrophell)'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The difference between regular (non-static) and static methods”](ch10.xhtml#the_difference_between_regular_left_pare)'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Initializing a static variable”](ch10.xhtml#initializing_a_static_variable)'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Math methods”](ch10.xhtml#math_methods)'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Wrapping a primitive”](ch10.xhtml#wrapping_a_primitive)'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Autoboxing works almost everywhere”](ch10.xhtml#autoboxing_works_almost_everywhere)'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“And now in reverse...turning a primitive number into a String”](ch10.xhtml#and_now_in_reversehellipturning_a_primit)'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Number formatting”](ch10.xhtml#number_formatting)'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The format specifier”](ch10.xhtml#the_format_specifier)'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch10.xhtml#exercise-id000300)'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solution”](ch10.xhtml#exercise_solution-id000200)'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.xhtml#data_structures_collections_and_generics)'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sorting is a snap in Java.** You have all the tools for collecting and manipulating
    your data without having to write your own sort algorithms. The Java Collections
    Framework has a data structure that should work for virtually anything you’ll
    ever need to do. Want to keep a list that you can easily keep adding to? Want
    to find something by name? Want to create a list that automatically takes out
    all the duplicates? Sort your coworkers by the number of times they’ve stabbed
    you in the back?'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Exploring the java.util API, List and Collections”](ch11.xhtml#exploring_the_javadotutil_apicomma_list)'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Generics means more type-safety”](ch11.xhtml#generics_means_more_type-safety)'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Revisiting the sort() method”](ch11.xhtml#revisiting_the_sortleft_parenthesisright)'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The new, improved, comparable Song class”](ch11.xhtml#the_newcomma_improvedcomma_comparable_so)'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Sorting using only Comparators”](ch11.xhtml#sorting_using_only_comparators)'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Updating the Jukebox code with lambdas”](ch11.xhtml#updating_the_jukebox_code_with_lambdas)'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Using a HashSet instead of ArrayList”](ch11.xhtml#using_a_hashset_instead_of_arraylist)'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What you MUST know about TreeSet...”](ch11.xhtml#what_you_must_know_about_treesethellip)'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ve seen Lists and Sets, now we’ll use a Map”](ch11.xhtml#weapostropheve_seen_lists_and_setscomma)'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Finally, back to generics”](ch11.xhtml#finallycomma_back_to_generics)'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solution”](ch11.xhtml#exercise_solution-id00300)'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.xhtml#lambdas_and_streams_whatcomma_not_how_la)'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What if...you didn’t need to tell the computer HOW to do something?** In
    this chapter we’ll look at the Streams API. You’ll see how helpful lambda expressions
    can be when you’re using streams, and you’ll learn how to use the Streams API
    to query and transform the data in a collection.'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Tell the computer WHAT you want”](ch12.xhtml#tell_the_computer_what_you_want)'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“When for loops go wrong”](ch12.xhtml#when_for_loops_go_wrong)'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Introducing the Streams API”](ch12.xhtml#introducing_the_streams_api)'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Getting a result from a Stream”](ch12.xhtml#getting_a_result_from_a_stream)'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Guidelines for working with streams”](ch12.xhtml#guidelines_for_working_with_streams)'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Hello Lambda, my (not so) old friend”](ch12.xhtml#hello_lambdacomma_my_left_parenthesisnot)'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Spotting Functional Interfaces”](ch12.xhtml#spotting_functional_interfaces)'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Lou’s Challenge #1: Find all the “rock” songs”](ch12.xhtml#louapostrophes_challenge_hash1_find_all)'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Lou’s Challenge #2: List all the genres”](ch12.xhtml#louapostrophes_challenge_hash2_list_all)'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch12.xhtml#exercise-id000018)'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch12.xhtml#exercise_solutions-id000100)'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.xhtml#risky_behavior_exception_handling)'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Stuff happens.** The file isn’t there. The server is down. No matter how
    good a programmer you are, you can’t control *everything.* When you write a risky
    method, you need code to handle the bad things that might happen. But how do you
    *know* when a method is risky? Where do you put the code to *handle* the ***exceptional***
    situation? In *this* chapter, we’re going to build a MIDI Music Player that uses
    the risky JavaSound API, so we better find out.'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Let’s make a Music Machine”](ch13.xhtml#letapostrophes_make_a_music_machine)'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“First we need a Sequencer”](ch13.xhtml#first_we_need_a_sequencer)'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“An exception is an object... of type Exception”](ch13.xhtml#an_exception_is_an_objecthellip_of_type)'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Flow control in try/catch blocks”](ch13.xhtml#flow_control_in_trysoliduscatch_blocks)'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Did we mention that a method can throw more than one exception?”](ch13.xhtml#did_we_mention_that_a_method_can_throw_m)'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Multiple catch blocks must be ordered from smallest to biggest”](ch13.xhtml#multiple_catch_blocks_must_be_ordered_fr)'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Ducking (by declaring) only delays the inevitable”](ch13.xhtml#ducking_left_parenthesisby_declaringrigh)'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Code Kitchen”](ch13.xhtml#code_kitchen)'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Version 1: Your very first sound player app”](ch13.xhtml#version_1_your_very_first_sound_player_a)'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Version 2: Using command-line args to experiment with sounds”](ch13.xhtml#version_2_using_command-line_args_to_exp)'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch13.xhtml#exercise-id000021)'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solution”](ch13.xhtml#exercise_solution-id00004)'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.xhtml#a_very_graphic_story_getting_gui)'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Face it, you need to make GUIs.** Even if you believe that for the rest of
    your life you’ll write only server-side code, sooner or later you’ll need to write
    tools, and you’ll want a graphical interface. We’ll spend two chapters on GUIs
    and learn more language features including **Event Handling** and **Inner Classes.**
    We’ll put a button on the screen, we’ll paint on the screen, we’ll display a JPEG
    image, and we’ll even do some animation.'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“It all starts with a window”](ch14.xhtml#it_all_starts_with_a_window)'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Getting a user event”](ch14.xhtml#getting_a_user_event)'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Listeners, Sources, and Events”](ch14.xhtml#listenerscomma_sourcescomma_and_events)'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make your own drawing widget”](ch14.xhtml#make_your_own_drawing_widget)'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fun things to do in paintComponent()”](ch14.xhtml#fun_things_to_do_in_paintcomponentleft_p)'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“GUI layouts: putting more than one widget on a frame”](ch14.xhtml#gui_layouts_putting_more_than_one_widget)'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Inner class to the rescue!”](ch14.xhtml#inner_class_to_the_rescueexclamation_mar)'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Lambdas to the rescue! (again)”](ch14.xhtml#lambdas_to_the_rescueexclamation_mark_le)'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Using an inner class for animation”](ch14.xhtml#using_an_inner_class_for_animation)'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“An easier way to make messages/events”](ch14.xhtml#an_easier_way_to_make_messagessoliduseve)'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch14.xhtml#exercise-id000023)'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch14.xhtml#exercise_solutions-id00007)'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 15](ch15.xhtml#work_on_your_swing_using_swing)'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Swing is easy.** Unless you actually care where everything goes. Swing code
    *looks* easy, but then compile it, run it, look at it, and think, “hey, *that’s*
    not supposed to go *there.”* The thing that makes it *easy* to *code* is the thing
    that makes it *hard* to *control*—the **Layout Manager.** But with a little work,
    you can get layout managers to submit to your will. In this chapter, we’ll work
    on our Swing and learn more about widgets.'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Swing components”](ch15.xhtml#swing_components)'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Layout Managers”](ch15.xhtml#layout_managers)'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The Big Three layout managers: border, flow, and box”](ch15.xhtml#the_big_three_layout_managers_bordercomm)'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Playing with Swing components”](ch15.xhtml#playing_with_swing_components)'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Code Kitchen”](ch14.xhtml#code_kitchen-id00001)'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Making the BeatBox”](ch15.xhtml#making_the_beatbox)'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch15.xhtml#exercise-id000025)'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch15.xhtml#exercise_solutions-id00008)'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 16](ch16.xhtml#saving_objects_left_parenthesisand_textr)'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Objects can be flattened and inflated.** Objects have state and behavior.
    Behavior lives in the class, but *state* lives within each individual *object.*
    If your program needs to save state, *you can do it the hard way*, interrogating
    each object, painstakingly writing the value of each instance variable. Or, **you
    can do it the easy OO way**—you simply freeze-dry the object (serialize it) and
    reconstitute (deserialize) it to get it back.'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Writing a serialized object to a file”](ch16.xhtml#writing_a_serialized_object_to_a_file)'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“If you want your class to be serializable, implement Serializable”](ch16.xhtml#if_you_want_your_class_to_be_serializabl)'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Deserialization: restoring an object”](ch16.xhtml#deserialization_restoring_an_object)'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Version ID: A big serialization gotcha”](ch16.xhtml#version_id_a_big_serialization_gotcha)'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Writing a String to a Text File”](ch16.xhtml#writing_a_string_to_a_text_file)'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Reading from a text file”](ch16.xhtml#reading_from_a_text_file)'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Quiz Card Player (code outline)”](ch16.xhtml#quiz_card_player_left_parenthesiscode_ou)'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Path, Paths, and Files (messing with directories)”](ch16.xhtml#pathcomma_pathscomma_and_files_left_pare)'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Finally, a closer look at `finally`”](ch16.xhtml#finallycomma_a_closer_look_at_finally)'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Saving a BeatBox pattern”](ch16.xhtml#saving_a_beatbox_pattern)'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch16.xhtml#exercise-id000026)'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch16.xhtml#exercise_solutions-id00009)'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 17](ch17.xhtml#make_a_connection_networking_and_threads)'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Connect with the outside world.** It’s easy. All the low-level networking
    details are taken care of by classes in the java.net library. One of Java’s best
    features is that sending and receiving data over a network is really just I/O
    with a slightly different connection stream at the end of the chain. In this chapter
    we’ll make client sockets. We’ll make server sockets. We’ll make clients and servers.
    Before the chapter’s done, you’ll have a fully functional, multithreaded chat
    client. Did we just say *multithreaded?*'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Connecting, sending, and receiving”](ch17.xhtml#connectingcomma_sendingcomma_and_receivi)'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The DailyAdviceClient”](ch17.xhtml#the_dailyadviceclient)'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Writing a simple server application”](ch17.xhtml#writing_a_simple_server_application)'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Java has multiple threads but only one Thread class”](ch17.xhtml#java_has_multiple_threads_but_only_one_t)'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The three states of a new thread”](ch17.xhtml#the_three_states_of)'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Putting a thread to sleep”](ch17.xhtml#putting_a_thread_to_sleep)'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Making and starting two threads (or more!)”](ch17.xhtml#making_and_starting_two_threads_left_par)'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Closing time at the thread pool”](ch17.xhtml#closing_time_at_the_thread_pool)'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“New and improved SimpleChatClient”](ch17.xhtml#new_and_improved_simplechatclient)'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch17.xhtml#exercise-id000027)'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solutions”](ch17.xhtml#exercise_solutions-id000200)'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 18](ch18.xhtml#dealing_with_concurrency_issues_race_con)'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Doing two or more things at once is hard.** Writing multithreaded code is
    easy. Writing multithreaded code that works the way you expect can be much harder.
    In this final chapter, we’re going to show you some of the things that can go
    wrong when two or more threads are working at the same time. You’ll learn about
    some of the tools in java.util.concurrent that can help you to write multithreaded
    code that works correctly. You’ll learn how to create immutable objects (objects
    that don’t change) that are safe for multiple threads to use. By the end of the
    chapter, you’ll have a lot of different tools in your toolkit for working with
    concurrency.'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“The Ryan and Monica problem, in code”](ch18.xhtml#the_ryan_and_monica_problemcomma_in_code)'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Using an object’s lock”](ch18.xhtml#using_an_objectapostrophes_lock)'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The dreaded “Lost Update” problem”](ch18.xhtml#the_dreaded_quotation_marklost_updatequo)'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make the increment() method atomic. Synchronize it!”](ch18.xhtml#make_the_incrementleft_parenthesisright)'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Deadlock, a deadly side of synchronization”](ch18.xhtml#deadlockcomma_a_deadly_side_of_synchroni)'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Compare-and-swap with atomic variables”](ch18.xhtml#compare-and-swap_with_atomic_variables)'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Using immutable objects”](ch18.xhtml#using_immutable_objects)'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“More problems with shared data”](ch18.xhtml#more_problems_with_shared_data)'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use a thread-safe data structure”](ch18.xhtml#use_a_thread-safe_data_structure)'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise”](ch18.xhtml#exercise-id00006)'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Exercise Solution”](ch18.xhtml#exercise_solution-id00005)'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Appendix A](app01.xhtml#appendix_a_final_code_kitchen)'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Final Code Kitchen.** All the code for the full client-server chat beat box.
    Your chance to be a rock star.'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Final BeatBox client program”](app01.xhtml#final_beatbox_client_program)'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Final BeatBox server program”](app01.xhtml#final_beatbox_server_program)'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Appendix B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d)'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The top ten-ish topics that didn’t make it into the rest of the book.** We
    can’t send you out into the world just yet. We have a few more things for you,
    but this *is* the end of the book. And this time we really mean it.'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“#11 JShell (Java REPL)”](app02.xhtml#hash11_jshell_left_parenthesisjava_replr)'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#10 Packages”](app02.xhtml#hash10_packages)'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#9 Immutability in Strings and Wrappers”](app02.xhtml#hash9_immutability_in_strings_and_wrappe)'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#8 Access levels and access modifiers (who sees what)”](app02.xhtml#hash8_access_levels_and_access_modifiers)'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#7 Varargs”](app02.xhtml#hash7_varargs)'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#6 Annotations”](app02.xhtml#hash6_annotations)'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#5 Lambdas and Maps”](app02.xhtml#hash5_lambdas_and_maps)'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#4 Parallel Streams”](app02.xhtml#hash4_parallel_streams_java_8plus)'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#3 Enumerations (also called enumerated types or enums)”](app02.xhtml#hash3_enumerations_left_parenthesisalso)'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#2 Local Variable Type Inference (var)”](app02.xhtml#hash2_local_variable_type_inference_left)'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“#1 Records”](app02.xhtml#hash1_records)'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
