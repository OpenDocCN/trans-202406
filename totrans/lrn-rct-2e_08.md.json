["```\nfetch(`https://api.github.com/users/moonhighway`)\n  .then(response => response.json())\n  .then(console.log)\n  .catch(console.error);\n```", "```\n{\n  \"login\": \"MoonHighway\",\n  \"id\": 5952087,\n  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjU5NTIwODc=\",\n  \"avatar_url\": \"https://avatars0.githubusercontent.com/u/5952087?v=4\",\n  \"bio\": \"Web Development classroom training materials.\",\n\n  ...\n\n}\n```", "```\nasync function requestGithubUser(githubLogin) {\n  try {\n    const response = await fetch(\n      `https://api.github.com/users/${githubLogin}`\n    );\n    const userData = await response.json();\n    console.log(userData);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```", "```\nfetch(\"/create/user\", {\n  method: \"POST\",\n  body: JSON.stringify({ username, password, bio })\n});\n```", "```\nconst formData = new FormData();\nformData.append(\"username\", \"moontahoe\");\nformData.append(\"fullname\", \"Alex Banks\");\nforData.append(\"avatar\", imgFile);\n\nfetch(\"/create/user\", {\n  method: \"POST\",\n  body: formData\n});\n```", "```\nfetch(`https://api.github.com/users/${login}`, {\n  method: \"GET\",\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\n```", "```\nimport React, { useState, useEffect } from \"react\";\n\nfunction GitHubUser({ login }) {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    if (!login) return;\n    fetch(`https://api.github.com/users/${login}`)\n      .then(response => response.json())\n      .then(setData)\n      .catch(console.error);\n  }, [login]);\n\n  if (data)\n    return <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n  return null;\n}\n\nexport default function App() {\n  return <GitHubUser login=\"moonhighway\" />;\n}\n```", "```\nconst loadJSON = key =>\n  key && JSON.parse(localStorage.getItem(key));\nconst saveJSON = (key, data) =>\n  localStorage.setItem(key, JSON.stringify(data));\n```", "```\nconst [data, setData] = useState(loadJSON(`user:${login}`));\nuseEffect(() => {\n  if (!data) return;\n  if (data.login === login) return;\n  const { name, avatar_url, location } = data;\n  saveJSON(`user:${login}`, {\n    name,\n    login,\n    avatar_url,\n    location\n  });\n}, [data]);\n```", "```\nimport React, { useState, useEffect } from \"react\";\n\nconst loadJSON = key =>\n  key && JSON.parse(localStorage.getItem(key));\nconst saveJSON = (key, data) =>\n  localStorage.setItem(key, JSON.stringify(data));\n\nfunction GitHubUser({ login }) {\n  const [data, setData] = useState(\n    loadJSON(`user:${login}`)\n  );\n\n  useEffect(() => {\n    if (!data) return;\n    if (data.login === login) return;\n    const { name, avatar_url, location } = data;\n    saveJSON(`user:${login}`, {\n      name,\n      login,\n      avatar_url,\n      location\n    });\n  }, [data]);\n\n  useEffect(() => {\n    if (!login) return;\n    if (data && data.login === login) return;\n    fetch(`https://api.github.com/users/${login}`)\n      .then(response => response.json())\n      .then(setData)\n      .catch(console.error);\n  }, [login]);\n\n  if (data)\n    return <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n  return null;\n}\n```", "```\n{\n  \"login\": \"MoonHighway\",\n  \"id\": 5952087,\n  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjU5NTIwODc=\",\n  \"avatar_url\": \"https://avatars0.githubusercontent.com/u/5952087?v=4\",\n  \"gravatar_id\": \"\",\n  \"url\": \"https://api.github.com/users/MoonHighway\",\n  \"html_url\": \"https://github.com/MoonHighway\",\n\n  ...\n\n}\n```", "```\n{\n  \"name\": \"Moon Highway\",\n  \"login\": \"moonhighway\",\n  \"avatar_url\": \"https://avatars0.githubusercontent.com/u/5952087?v=4\",\n  \"location\": \"Tahoe City, CA\"\n}\n```", "```\nlocalStorage.clear();\n```", "```\nfunction GitHubUser({ login }) {\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!login) return;\n    setLoading(true);\n    fetch(`https://api.github.com/users/${login}`)\n      .then(data => data.json())\n      .then(setData)\n      .then(() => setLoading(false))\n      .catch(setError);\n  }, [login]);\n\n  if (loading) return <h1>loading...</h1>;\n  if (error)\n    return <pre>{JSON.stringify(error, null, 2)}</pre>;\n  if (!data) return null;\n\n  return (\n    <div className=\"githubUser\">\n      <img\n        src={data.avatar_url}\n        alt={data.login}\n        style={{ width: 200 }}\n      />\n      <div>\n        <h1>{data.login}</h1>\n        {data.name && <p>{data.name}</p>}\n        {data.location && <p>{data.location}</p>}\n      </div>\n    </div>\n  );\n}\n```", "```\nimport React from \"react\";\n\nconst tahoe_peaks = [\n  { name: \"Freel Peak\", elevation: 10891 },\n  { name: \"Monument Peak\", elevation: 10067 },\n  { name: \"Pyramid Peak\", elevation: 9983 },\n  { name: \"Mt. Tallac\", elevation: 9735 }\n];\n\nexport default function App() {\n  return (\n    <ul>\n      {tahoe_peaks.map((peak, i) => (\n        <li key={i}>\n          {peak.name} - {peak.elevation.toLocaleString()}ft\n        </li>\n      ))}\n    </ul>\n  );\n}\n```", "```\nfunction List({ data = [], renderEmpty }) {\n  if (!data.length) return renderEmpty;\n  return <p>{data.length} items</p>;\n}\n\nexport default function App() {\n  return <List renderEmpty={<p>This list is empty</p>} />;\n}\n```", "```\nexport default function App() {\n  return (\n    <List\n      data={tahoe_peaks}\n      renderEmpty={<p>This list is empty</p>}\n    />\n  );\n}\n```", "```\nexport default function App() {\n  return (\n    <List\n      data={tahoe_peaks}\n      renderEmpty={<p>This list is empty</p>}\n      renderItem={item => (\n        <>\n          {item.name} - {item.elevation.toLocaleString()}ft\n        </>\n      )}\n    />\n  );\n}\n```", "```\nfunction List({ data = [], renderItem, renderEmpty }) {\n  return !data.length ? (\n    renderEmpty\n  ) : (\n    <ul>\n      {data.map((item, i) => (\n        <li key={i}>{renderItem(item)}</li>\n      ))}\n    </ul>\n  );\n}\n```", "```\nnpm i faker\n```", "```\nimport faker from \"faker\";\n\nconst bigList = [...Array(5000)].map(() => ({\n  name: faker.name.findName(),\n  email: faker.internet.email(),\n  avatar: faker.internet.avatar()\n}));\n```", "```\nexport default function App() {\n  const renderItem = item => (\n    <div style={{ display: \"flex\" }}>\n      <img src={item.avatar} alt={item.name} width={50} />\n      <p>\n        {item.name} - {item.email}\n      </p>\n    </div>\n  );\n\n  return <List data={bigList} renderItem={renderItem} />;\n}\n```", "```\nnpm i react-window\n```", "```\nimport React from \"react\";\nimport { FixedSizeList } from \"react-window\";\nimport faker from \"faker\";\n\nconst bigList = [...Array(5000)].map(() => ({\n  name: faker.name.findName(),\n  email: faker.internet.email(),\n  avatar: faker.internet.avatar()\n}));\n\nexport default function App() {\n  const renderRow = ({ index, style }) => (\n    <div style={{ ...style, ...{ display: \"flex\" } }}>\n      <img\n        src={bigList[index].avatar}\n        alt={bigList[index].name}\n        width={50}\n      />\n      <p>\n        {bigList[index].name} - {bigList[index].email}\n      </p>\n    </div>\n  );\n\n  return (\n    <FixedSizeList\n      height={window.innerHeight}\n      width={window.innerWidth - 20}\n      itemCount={bigList.length}\n      itemSize={50}\n    >\n      {renderRow}\n    </FixedSizeList>\n  );\n}\n```", "```\nimport React, { useState, useEffect } from \"react\";\n\nexport function useFetch(uri) {\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!uri) return;\n    fetch(uri)\n      .then(data => data.json())\n      .then(setData)\n      .then(() => setLoading(false))\n      .catch(setError);\n  }, [uri]);\n\n  return {\n    loading,\n    data,\n    error\n  };\n}\n```", "```\nfunction GitHubUser({ login }) {\n  const { loading, data, error } = useFetch(\n    `https://api.github.com/users/${login}`\n  );\n\n  if (loading) return <h1>loading...</h1>;\n  if (error)\n    return <pre>{JSON.stringify(error, null, 2)}</pre>;\n\n  return (\n    <div className=\"githubUser\">\n      <img\n        src={data.avatar_url}\n        alt={data.login}\n        style={{ width: 200 }}\n      />\n      <div>\n        <h1>{data.login}</h1>\n        {data.name && <p>{data.name}</p>}\n        {data.location && <p>{data.location}</p>}\n      </div>\n    </div>\n  );\n}\n```", "```\nimport React, { useState } from \"react\";\nimport GitHubUser from \"./GitHubUser\";\nimport SearchForm from \"./SearchForm\";\n\nexport default function App() {\n  const [login, setLogin] = useState(\"moontahoe\");\n\n  return (\n    <>\n      <SearchForm value={login} onSearch={setLogin} />\n      <GitHubUser login={login} />\n    </>\n  );\n}\n```", "```\nfunction Fetch({\n  uri,\n  renderSuccess,\n  loadingFallback = <p>loading...</p>,\n  renderError = error => (\n    <pre>{JSON.stringify(error, null, 2)}</pre>\n  )\n}) {\n  const { loading, data, error } = useFetch(uri);\n  if (loading) return loadingFallback;\n  if (error) return renderError(error);\n  if (data) return renderSuccess({ data });\n}\n```", "```\nimport React from \"react\";\nimport Fetch from \"./Fetch\";\n\nexport default function GitHubUser({ login }) {\n  return (\n    <Fetch\n      uri={`https://api.github.com/users/${login}`}\n      renderSuccess={UserDetails}\n    />\n  );\n}\n\nfunction UserDetails({ data }) {\n  return (\n    <div className=\"githubUser\">\n      <img\n        src={data.avatar_url}\n        alt={data.login}\n        style={{ width: 200 }}\n      />\n      <div>\n        <h1>{data.login}</h1>\n        {data.name && <p>{data.name}</p>}\n        {data.location && <p>{data.location}</p>}\n      </div>\n    </div>\n  );\n}\n```", "```\n<Fetch\n  uri={`https://api.github.com/users/${login}`}\n  loadingFallback={<LoadingSpinner />}\n  renderError={error => {\n    // handle error\n    return <p>Something went wrong... {error.message}</p>;\n  }}\n  renderSuccess={({ data }) => (\n    <>\n      <h1>Todo: Render UI for data</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </>\n  )}\n/>\n```", "```\nexport const useIterator = (\n  items = [],\n  initialIndex = 0\n) => {\n  const [i, setIndex] = useState(initialIndex);\n\n  const prev = () => {\n    if (i === 0) return setIndex(items.length - 1);\n    setIndex(i - 1);\n  };\n\n  const next = () => {\n    if (i === items.length - 1) return setIndex(0);\n    setIndex(i + 1);\n  };\n\n  return [items[i], prev, next];\n};\n```", "```\nconst [letter, previous, next] = useIterator([\n  \"a\",\n  \"b\",\n  \"c\"\n]);\n```", "```\nimport React, { useCallback, useMemo } from \"react\";\n\nexport const useIterator = (\n  items = [],\n  initialValue = 0\n) => {\n  const [i, setIndex] = useState(initialValue);\n\n  const prev = useCallback(() => {\n    if (i === 0) return setIndex(items.length - 1);\n    setIndex(i - 1);\n  }, [i]);\n\n  const next = useCallback(() => {\n    if (i === items.length - 1) return setIndex(0);\n    setIndex(i + 1);\n  }, [i]);\n\n  const item = useMemo(() => items[i], [i]);\n\n  return [item || items[0], prev, next];\n};\n```", "```\n< learning-react >\n```", "```\nimport React from \"react\";\nimport { useIterator } from \"../hooks\";\n\nexport function RepoMenu({\n  repositories,\n  onSelect = f => f\n}) {\n  const [{ name }, previous, next] = useIterator(\n    repositories\n  );\n\n  useEffect(() => {\n    if (!name) return;\n    onSelect(name);\n  }, [name]);\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <button onClick={previous}>&lt;</button>\n      <p>{name}</p>\n      <button onClick={next}>&gt;</button>\n    </div>\n  );\n}\n```", "```\nimport React from \"react\";\nimport Fetch from \"./Fetch\";\nimport RepoMenu from \"./RepoMenu\";\n\nexport default function UserRepositories({\n  login,\n  selectedRepo,\n  onSelect = f => f\n}) {\n  return (\n    <Fetch\n      uri={`https://api.github.com/users/${login}/repos`}\n      renderSuccess={({ data }) => (\n        <RepoMenu\n          repositories={data}\n          selectedRepo={selectedRepo}\n          onSelect={onSelect}\n        />\n      )}\n    />\n  );\n}\n```", "```\nfunction UserDetails({ data }) {\n  return (\n    <div className=\"githubUser\">\n      <img src={data.avatar_url} alt={data.login} style={{ width: 200 }} />\n      <div>\n        <h1>{data.login}</h1>\n        {data.name && <p>{data.name}</p>}\n        {data.location && <p>{data.location}</p>}\n      </div>\n      <UserRepositories\n        login={data.login}\n        onSelect={repoName => console.log(`${repoName} selected`)}\n      />\n    </div>\n  );\n```", "```\n<Fetch\n  uri={`https://api.github.com/users/${login}`}\n  renderSuccess={UserDetails}\n/>\n```", "```\n<Fetch\n  uri={`https://api.github.com/users/${login}/repos`}\n  renderSuccess={({ data }) => (\n    <RepoMenu repositories={data} onSelect={onSelect} />\n  )}\n/>\n```", "```\nnpm i react-markdown\n```", "```\nconst loadReadme = async (login, repo) => {\n  const uri = `https://api.github.com/repos/${login}/${repo}/readme`;\n  const { download_url } = await fetch(uri).then(res =>\n    res.json()\n  );\n  const markdown = await fetch(download_url).then(res =>\n    res.text()\n  );\n\n  console.log(`Markdown for ${repo}\\n\\n${markdown}`);\n};\n```", "```\nimport React, {\n  useState,\n  useEffect,\n  useCallback\n} from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport default function RepositoryReadme({ repo, login }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const loadReadme = useCallback(async (login, repo) => {\n    setLoading(true);\n    const uri = `https://api.github.com/repos/${login}/${repo}/readme`;\n    const { download_url } = await fetch(uri).then(res =>\n      res.json()\n    );\n    const markdown = await fetch(download_url).then(res =>\n      res.text()\n    );\n    setMarkdown(markdown);\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    if (!repo || !login) return;\n    loadReadme(login, repo).catch(setError);\n  }, [repo]);\n\n  if (error)\n    return <pre>{JSON.stringify(error, null, 2)}</pre>;\n  if (loading) return <p>Loading...</p>;\n\n  return <ReactMarkdown source={markdown} />;\n}\n```", "```\nexport function RepoMenu({ repositories, login }) {\n  const [{ name }, previous, next] = useIterator(\n    repositories\n  );\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <button onClick={previous}>&lt;</button>\n        <p>{name}</p>\n        <button onClick={next}>&gt;</button>\n      </div>\n      <RepositoryReadme login={login} repo={name} />\n    </>\n  );\n}\n```", "```\nimport React, { useState } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport GitHubUser from \"./GitHubUser\";\nimport UserRepositories from \"./UserRepositories\";\nimport RepositoryReadme from \"./RepositoryReadme\";\n\nexport default function App() {\n  const [login, setLogin] = useState(\"moonhighway\");\n  const [repo, setRepo] = useState(\"learning-react\");\n  return (\n    <>\n      <SearchForm value={login} onSearch={setLogin} />\n      <GitHubUser login={login} />\n      <UserRepositories\n        login={login}\n        repo={repo}\n        onSelect={setRepo}\n      />\n      <RepositoryReadme login={login} repo={repo} />\n    </>\n  );\n}\n```", "```\nexport function RepoMenu({ repositories, selected, onSelect = f => f }) {\n  const [{ name }, previous, next] = useIterator(\n    repositories,\n    selected ? repositories.findIndex(repo => repo.name === selected) : null\n  );\n  ...\n}\n```", "```\n<Fetch\n  uri={`https://api.github.com/users/${login}/repos`}\n  renderSuccess={({ data }) => (\n    <RepoMenu\n      repositories={data}\n      selected={repo}\n      onSelect={onSelect}\n    />\n  )}\n/>\n```", "```\nexport default function App() {\n  const [login, setLogin] = useState();\n  const [repo, setRepo] = useState();\n  return (\n    <>\n      <SearchForm value={login} onSearch={setLogin} />\n      {login && <GitHubUser login={login} />}\n      {login && (\n        <UserRepositories\n          login={login}\n          repo={repo}\n          onSelect={setRepo}\n        />\n      )}\n      {login && repo && (\n        <RepositoryReadme login={login} repo={repo} />\n      )}\n    </>\n  );\n}\n```", "```\nexport default function App() {\n  const [login, setLogin] = useState(\"moonhighway\");\n  const [repo, setRepo] = useState(\"learning-react\");\n\n  const handleSearch = login => {\n    if (login) return setLogin(login);\n    setLogin(\"\");\n    setRepo(\"\");\n  };\n\n  if (!login)\n    return (\n      <SearchForm value={login} onSearch={handleSearch} />\n    );\n\n  return (\n    <>\n      <SearchForm value={login} onSearch={handleSearch} />\n      <GitHubUser login={login} />\n      <UserRepositories\n        login={login}\n        repo={repo}\n        onSelect={setRepo}\n      />\n      <RepositoryReadme login={login} repo={repo} />\n    </>\n  );\n}\n```", "```\nexport function useMountedRef() {\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => (mounted.current = false);\n  });\n  return mounted;\n}\n```", "```\nconst mounted = useMountedRef();\n\nconst loadReadme = useCallback(async (login, repo) => {\n  setLoading(true);\n  const uri = `https://api.github.com/repos/${login}/${repo}/readme`;\n  const { download_url } = await fetch(uri).then(res =>\n    res.json()\n  );\n  const markdown = await fetch(download_url).then(res =>\n    res.text()\n  );\n  if (mounted.current) {\n    setMarkdown(markdown);\n    setLoading(false);\n  }\n}, []);\n```", "```\nconst mounted = useMountedRef();\n\nuseEffect(() => {\n  if (!uri) return;\n  if (!mounted.current) return;\n  setLoading(true);\n  fetch(uri)\n    .then(data => {\n      if (!mounted.current) throw new Error(\"component is not mounted\");\n      return data;\n    })\n    .then(data => data.json())\n    .then(setData)\n    .then(() => setLoading(false))\n    .catch(error => {\n      if (!mounted.current) return;\n      setError(error);\n    });\n```", "```\nquery {\n  user(login: \"moontahoe\") {\n    id\n    login\n    name\n    location\n    avatarUrl\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"MDQ6VXNlcjU5NTIwODI=\",\n      \"login\": \"MoonTahoe\",\n      \"name\": \"Alex Banks\",\n      \"location\": \"Tahoe City, CA\",\n      \"avatarUrl\": \"https://github.com/moontahoe.png\"\n    }\n  }\n}\n```", "```\nquery findRepos($login: String!) {\n  user(login: $login) {\n    login\n    name\n    location\n    avatar_url: avatarUrl\n    repositories(first: 100) {\n      totalCount\n      nodes {\n        name\n      }\n    }\n  }\n}\n```", "```\nnpm i graphql-request\n```", "```\nimport { GraphQLClient } from \"graphql-request\";\n\nconst query = `\n query findRepos($login:String!) {\n user(login:$login) {\n login\n name\n location\n avatar_url: avatarUrl\n repositories(first:100) {\n totalCount\n nodes {\n name\n }\n }\n }\n }\n`;\n\nconst client = new GraphQLClient(\n  \"https://api.github.com/graphql\",\n  {\n    headers: {\n      Authorization: `Bearer <PERSONAL_ACCESS_TOKEN>`\n    }\n  }\n);\n\nclient\n  .request(query, { login: \"moontahoe\" })\n  .then(results => JSON.stringify(results, null, 2))\n  .then(console.log)\n  .catch(console.error);\n```", "```\n{\n  \"user\": {\n    \"id\": \"MDQ6VXNlcjU5NTIwODI=\",\n    \"login\": \"MoonTahoe\",\n    \"name\": \"Alex Banks\",\n    \"location\": \"Tahoe City, CA\",\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/5952082?v=4\",\n    \"repositories\": {\n      \"totalCount\": 52,\n      \"nodes\": [\n        {\n          \"name\": \"snowtooth\"\n        },\n        {\n          \"name\": \"Memory\"\n        },\n        {\n          \"name\": \"snowtooth-status\"\n        },\n\n        ...\n\n      ]\n    }\n  }\n}\n```", "```\nexport default function App() {\n  const [login, setLogin] = useState(\"moontahoe\");\n  const [userData, setUserData] = useState();\n  useEffect(() => {\n    client\n      .request(query, { login })\n      .then(({ user }) => user)\n      .then(setUserData)\n      .catch(console.error);\n  }, [client, query, login]);\n\n  if (!userData) return <p>loading...</p>;\n\n  return (\n    <>\n      <SearchForm value={login} onSearch={setLogin} />\n      <UserDetails {...userData} />\n      <p>{userData.repositories.totalCount} - repos</p>\n      <List\n        data={userData.repositories.nodes}\n        renderItem={repo => <span>{repo.name}</span>}\n      />\n    </>\n  );\n}\n```", "```\nconst reducer = (messages, incomingMessage) => [\n  messages,\n  ...incomingMessage\n];\n\nexport function useChatRoom(socket, messages = []) {\n  const [status, setStatus] = useState(null);\n  const [messages, appendMessage] = useReducer(\n    reducer,\n    messages\n  );\n\n  const send = message => socket.emit(\"message\", message);\n\n  useEffect(() => {\n    socket.on(\"connection\", () => setStatus(\"connected\"));\n    socket.on(\"disconnecting\", () =>\n      setStatus(\"disconnected\")\n    );\n    socket.on(\"message\", setStatus);\n    return () => {\n      socket.removeAllListeners(\"connect\");\n      socket.removeAllListeners(\"disconnect\");\n      socket.removeAllListeners(\"message\");\n    };\n  }, []);\n\n  return {\n    status,\n    messages,\n    send\n  };\n}\n```"]