["```\n$ infocmp ![1](Images/1.png)\n#       Reconstructed via infocmp from file: /lib/terminfo/s/screen-256color screen-256color|GNU Screen with 256 colors,\n        am, km, mir, msgr, xenl,\n        colors#0x100, cols#80, it#8, lines#24, pairs#0x10000,\n        acsc=++\\,\\,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~,\n        bel=^G, blink=\\E[5m, bold=\\E[1m, cbt=\\E[Z, civis=\\E[?25l,\n        clear=\\E[H\\E[J, cnorm=\\E[34h\\E[?25h, cr=\\r,\n        ...\n```", "```\n$ cat\nThis is some input I type on the keyboard and read on the screen^C\n```", "```\n$ curl https://example.com &> /dev/null ![1](Images/1.png)\n\n$ curl https://example.com > /tmp/content.txt 2> /tmp/curl-status ![2](Images/2.png)\n$ head -3 /tmp/content.txt\n<!doctype html>\n<html>\n<head>\n$ cat /tmp/curl-status\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1256  100  1256    0     0   3187      0 --:--:-- --:--:-- --:--:--  3195\n\n$ cat > /tmp/interactive-input.txt ![3](Images/3.png)\n\n$ tr < /tmp/curl-status [A-Z] [a-z] ![4](Images/4.png)\n  % total    % received % xferd  average speed   time    time     time  current\n                                 dload  upload   total   spent    left  speed\n100  1256  100  1256    0     0   3187      0 --:--:-- --:--:-- --:--:--  3195\n```", "```\n$ curl https://example.com 2> /dev/null | \\ ![1](Images/1.png)\n  wc -l ![2](Images/2.png)\n46\n```", "```\n$ set MY_VAR=42 ![1](Images/1.png)\n$ set | grep MY_VAR ![2](Images/2.png)\n_=MY_VAR=42\n\n$ export MY_GLOBAL_VAR=\"fun with vars\" ![3](Images/3.png)\n\n$ set | grep 'MY_*' ![4](Images/4.png)\nMY_GLOBAL_VAR='fun with vars'\n_=MY_VAR=42\n\n$ env | grep 'MY_*' ![5](Images/5.png)\nMY_GLOBAL_VAR=fun with vars\n\n$ bash ![6](Images/6.png)\n$ echo $MY_GLOBAL_VAR ![7](Images/7.png)\nfun with vars\n\n$ set | grep 'MY_*' ![8](Images/8.png)\nMY_GLOBAL_VAR='fun with vars'\n\n$ exit ![9](Images/9.png)\n$ unset $MY_VAR\n$ set | grep 'MY_*'\nMY_GLOBAL_VAR='fun with vars'\n```", "```\n$ which ls\n/usr/bin/ls\n\n$ type ls\nls is aliased to `ls --color=auto'\n```", "```\n$ watch -n 5 \"ls\" & ![1](Images/1.png)\n\n$ jobs ![2](Images/2.png)\nJob     Group   CPU     State   Command\n1       3021    0%      stopped watch -n 5 \"ls\" &\n\n$ fg ![3](Images/3.png)\nEvery 5.0s: ls                                         Sat Aug 28 11:34:32 2021\n\nDockerfile\napp.yaml\nexample.json\nmain.go\nscript.sh\ntest\n```", "```\n$ find . -type f -name \"*.yaml\" -exec grep \"sample\" '{}' \\; -print ![1](Images/1.png)\n      app: sample\n        app: sample\n./app.yaml\n\n$ rg -t \"yaml\" sample ![2](Images/2.png)\napp.yaml\n9:      app: sample\n14:        app: sample\n```", "```\n[\n  {\n    \"_id\": \"612297a64a057a3fa3a56fcf\",\n    \"latitude\": -25.750679,\n    \"longitude\": 130.044327,\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Tara Holland\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Giles Glover\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Pennington Shannon\"\n      }\n    ],\n    \"favoriteFruit\": \"strawberry\"\n  },\n...\n```", "```\n$ jq 'select(.[].favoriteFruit==\"strawberry\") | .[].friends[0].name' example.json\n\"Tara Holland\"\n\"Christy Mullins\"\n\"Snider Thornton\"\n\"Jana Clay\"\n\"Wilma King\"\n```", "```\n$ echo \"First line\" > /tmp/something ![1](Images/1.png)\n\n$ cat /tmp/something ![2](Images/2.png)\nFirst line\n\n$ echo \"Second line\" >> /tmp/something && \\ ![3](Images/3.png)\n  cat /tmp/something\nFirst line\nSecond line\n\n$ sed 's/line/LINE/' /tmp/something ![4](Images/4.png)\nFirst LINE\nSecond LINE\n\n$ cat << 'EOF' > /tmp/another ![5](Images/5.png) First line\nSecond line\nThird line\nEOF\n\n$ diff -y /tmp/something /tmp/another ![6](Images/6.png)\nFirst line                                                      First line\nSecond line                                                     Second line\n                                                              > Third line\n```", "```\n$ for i in {1..100} ; do echo $i >> /tmp/longfile ; done ![1](Images/1.png)\n\n$ head -5 /tmp/longfile ![2](Images/2.png)\n1\n2\n3\n4\n5\n```", "```\n$ sudo tail -f /var/log/Xorg.0.log ![1](Images/1.png)\n[ 36065.898] (II) event14 - ALPS01:00 0911:5288 Mouse: device is a pointer\n[ 36065.900] (II) event15 - ALPS01:00 0911:5288 Touchpad: device is a touchpad\n[ 36065.901] (II) event4  - Intel HID events: is tagged by udev as: Keyboard\n[ 36065.901] (II) event4  - Intel HID events: device is a keyboard\n...\n```", "```\n$ date +%s ![1](Images/1.png)\n1629582883\n\n$ date -d @1629742883 '+%m/%d/%Y:%H:%M:%S' ![2](Images/2.png)\n08/21/2021:21:54:43\n```", "```\nset -x FZF_DEFAULT_OPTS \"-m --bind='ctrl-o:execute(nvim {})+abort'\"\nset -x FZF_DEFAULT_COMMAND 'rg --files'\nset -x EDITOR nvim\nset -x KUBE_EDITOR nvim\nset -ga fish_user_paths /usr/local/bin\n```", "```\nfunction fish_prompt\n    set -l retc red\n    test $status = 0; and set retc blue\n\n    set -q __fish_git_prompt_showupstream\n    or set -g __fish_git_prompt_showupstream auto\n\n    function _nim_prompt_wrapper\n        set retc $argv[1]\n        set field_name $argv[2]\n        set field_value $argv[3]\n\n        set_color normal\n        set_color $retc\n        echo -n '─'\n        set_color -o blue\n        echo -n '['\n        set_color normal\n        test -n $field_name\n        and echo -n $field_name:\n        set_color $retc\n        echo -n $field_value\n        set_color -o blue\n        echo -n ']'\n    end\n\n    set_color $retc\n    echo -n '┬─'\n    set_color -o blue\n    echo -n [\n    set_color normal\n    set_color c07933\n    echo -n (prompt_pwd)\n    set_color -o blue\n    echo -n ']'\n     # Virtual Environment\n    set -q VIRTUAL_ENV_DISABLE_PROMPT\n    or set -g VIRTUAL_ENV_DISABLE_PROMPT true\n    set -q VIRTUAL_ENV\n    and _nim_prompt_wrapper $retc V (basename \"$VIRTUAL_ENV\")\n\n    # git\n    set prompt_git (fish_git_prompt | string trim -c ' ()')\n    test -n \"$prompt_git\"\n    and _nim_prompt_wrapper $retc G $prompt_git\n\n    # New line\n    echo\n\n    # Background jobs\n    set_color normal\n    for job in (jobs)\n        set_color $retc\n        echo -n '│ '\n        set_color brown\n        echo $job\n    end\n    set_color blue\n    echo -n '╰─> '\n        set_color -o blue\n    echo -n '$ '\n    set_color normal\nend\n```", "```\n$ abbr\nabbr -a -U -- :q exit\nabbr -a -U -- cat bat\nabbr -a -U -- d 'git diff --color-moved'\nabbr -a -U -- g git\nabbr -a -U -- grep 'grep --color=auto'\nabbr -a -U -- k kubectl\nabbr -a -U -- l 'exa --long --all --git'\nabbr -a -U -- ll 'ls -GAhltr'\nabbr -a -U -- m make\nabbr -a -U -- p 'git push'\nabbr -a -U -- pu 'git pull'\nabbr -a -U -- s 'git status'\nabbr -a -U -- stat 'stat -x'\nabbr -a -U -- vi nvim\nabbr -a -U -- wget 'wget -c'\n```", "```\nfunction c\n    git add --all\n    git commit -m \"$argv\"\nend\n```", "```\n$ZDOTDIR/.zshenv ![1](Images/1.png)\n$ZDOTDIR/.zprofile ![2](Images/2.png)\n$ZDOTDIR/.zshrc ![3](Images/3.png)\n$ZDOTDIR/.zlogin ![4](Images/4.png)\n$ZDOTDIR/.zlogout ![5](Images/5.png)\n```", "```\n$ tmux new -s test\n```", "```\n$ tmux attach -t test ![1](Images/1.png)\n```", "```\nunbind C-b ![1](Images/1.png)\nset -g prefix Home\nbind Home send-prefix\nbind r source-file ~/.tmux.conf \\; display \"tmux config reloaded :)\" ![2](Images/2.png)\nbind \\\\ split-window -h -c \"#{pane_current_path}\" ![3](Images/3.png)\nbind - split-window -v -c \"#{pane_current_path}\"\nbind X confirm-before kill-session ![4](Images/4.png)\nset -s escape-time 1 ![5](Images/5.png)\nset-option -g mouse on ![6](Images/6.png)\nset -g default-terminal \"screen-256color\" ![7](Images/7.png)\nset-option -g status-position top ![8](Images/8.png)\nset -g status-bg colour103\nset -g status-fg colour215\nset -g status-right-length 120\nset -g status-left-length 50\nset -g window-status-style fg=colour215\nset -g pane-active-border-style fg=colour215\nset -g @plugin 'tmux-plugins/tmux-resurrect' ![9](Images/9.png)\nset -g @plugin 'tmux-plugins/tmux-continuum'\nset -g @continuum-restore 'on'\nrun '~/.tmux/plugins/tpm/tpm'\n```", "```\nXXXX XXXXX joined GitHub in YYYY\n```", "```\nos=('Linux' 'macOS' 'Windows') ![1](Images/1.png)\necho \"${os[0]}\" ![2](Images/2.png)\nnumberofos=\"${#os[@]}\" ![3](Images/3.png)\n```", "```\nfor afile in /tmp/* ; do ![1](Images/1.png)\n  echo \"$afile\"\ndone\n\nfor i in {1..10}; do ![2](Images/2.png)\n    echo \"$i\"\ndone\n\nwhile true; do\n  ...\ndone ![3](Images/3.png)\n```", "```\nsayhi() { ![1](Images/1.png)\n    echo \"Hi $1 hope you are well!\"\n}\n\nsayhi \"Michael\" ![2](Images/2.png)\n```", "```\nread name ![1](Images/1.png)\nprintf \"Hello %s\" \"$name\" ![2](Images/2.png)\n```", "```\n#!/usr/bin/env bash ![1](Images/1.png)\nset -o errexit ![2](Images/2.png)\nset -o nounset ![3](Images/3.png)\nset -o pipefail ![4](Images/4.png)\n\nfirstargument=\"${1:-somedefaultvalue}\" ![5](Images/5.png)\n\necho \"$firstargument\"\n```", "```\n#!/usr/bin/env bash \nset -o errexit\nset -o errtrace\nset -o nounset\nset -o pipefail\n\n### Command line parameter: targetuser=\"${1:-mhausenblas}\" ![1](Images/1.png)\n\n### Check if our dependencies are met: if ! [ -x \"$(command -v jq)\" ]\nthen\n  echo \"jq is not installed\" >&2\n  exit 1\nfi\n\n### Main: githubapi=\"https://api.github.com/users/\"\ntmpuserdump=\"/tmp/ghuserdump_$targetuser.json\"\n\nresult=$(curl -s $githubapi$targetuser) ![2](Images/2.png)\necho $result > $tmpuserdump\n\nname=$(jq .name $tmpuserdump -r) ![3](Images/3.png)\ncreated_at=$(jq .created_at $tmpuserdump -r)\n\njoinyear=$(echo $created_at | cut -f1 -d\"-\") ![4](Images/4.png)\necho $name joined GitHub in $joinyear ![5](Images/5.png)\n```", "```\n$ ./gh-user-info.sh\nMichael Hausenblas joined GitHub in 2009\n```"]