["```\nyarn add -D vitest\n```", "```\n\"script\": {\n    \"test\": \"vitest\"\n}\n```", "```\n\"script\": {\n    \"test\": \"vitest --root src/tests\"\n}\n```", "```\nyarn test src/tests/useFetch.test.ts\n```", "```\n\"script\": {\n    \"test\": \"vitest --root src/tests --environment jsdom\"\n}\n```", "```\nexport default defineConfig({\n  /**other settings */\n  test: {\n    environment: 'jsdom',\n    root: 'src/tests\n  }\n})\n```", "```\n/// <reference types=\"vitest\" />\n```", "```\n/// <reference types=\"vitest\" />\n/*...imports...*/\n\nexport default defineConfig({\n  /**other settings */\n  test: {\n    environment: 'jsdom',\n    root: 'src/tests\n    globals: true,\n  }\n})\n```", "```\n//tsconfig.json\n\"compilerOptions\": {\n  \"types\": [\"vitest/globals\"]\n}\n```", "```\ntype ArrayObject = { [key: string]: string };\n\nexport function filterArray(\n  array: ArrayObject[],\n  key: string,\n  term: string\n): ArrayObject[] {\n  // code to filter the array\n  return [];\n}\n```", "```\nimport { it, expect } from '@vitest'\nimport { filterArray } from '../utils/filterArray'\n\nit('should return a filtered array', () => {\n  expect()\n})\n```", "```\nimport { it, expect } from '@vitest'\nimport { filterArray } from '../utils/filterArray'\n\nconst pizzas = [\n  {\n    id: \"1\",\n    title: \"Pina Colada Pizza\",\n    price: \"10.00\",\n    description:\n      \"A delicious combination of pineapple, coconut, and coconut milk.\",\n    quantity: 1,\n  },\n  {\n    id: \"4\",\n    title: \"Hawaiian Pizza\",\n    price: \"11.00\",\n    description:\n      \"A delicious combination of ham, pineapple, and pineapple.\",\n    quantity: 5,\n  },\n  {\n    id: \"5\",\n    title: \"Meat Lovers Pizza\",\n    price: \"13.00\",\n    description:\n      \"A delicious combination of pepperoni, sausage, and bacon.\",\n    quantity: 3,\n  },\n]\n\nit('should return a filtered array', () => {\n  expect(filterArray(pizzas, 'title', 'Hawaiian'))\n})\n```", "```\nconst result = [\n  {\n    id: \"4\",\n    title: \"Hawaiian Pizza\",\n    price: \"11.00\",\n    description:\n      \"A delicious combination of ham, pineapple, and pineapple.\",\n    quantity: 5,\n  },\n]\n```", "```\nconst pizzas = [\n  {\n    id: \"1\",\n    title: \"Pina Colada Pizza\",\n    price: \"10.00\",\n    description:\n      \"A delicious combination of pineapple, coconut, and coconut milk.\",\n    quantity: 1,\n  },\n  {\n    id: \"5\",\n    title: \"Meat Lovers Pizza\",\n    price: \"13.00\",\n    description:\n      \"A delicious combination of pepperoni, sausage, and bacon.\",\n    quantity: 3,\n  },\n  ...result\n]\n```", "```\nit('should return a filtered array', () => {\n  expect(filterArray(pizzas, 'title', 'Hawaiian')).toEqual(result)\n})\n```", "```\ntype ArrayObject = { [key: string]: string };\n\nexport function filterArray(\n  array: ArrayObject[],\n  key: string,\n  term: string\n): ArrayObject[] {\n  const filterTerm = term.toLowerCase();\n\n  return array.filter(\n    (item) => item[key].toLowerCase().includes(filterTerm)\n  );\n}\n```", "```\nit(\"should return a empty array when key doesn't exist\", () => {\n  expect(filterArray(pizzas, 'name', 'Hawaiian')).toEqual([])\n})\n\nit('should return matching array when term is upper-cased', () => {\n  expect(filterArray(pizzas, 'name', 'HAWAIIAN')).toEqual(result)\n})\n```", "```\ndescribe('filterArray', () => {\n  it('should return a filtered array', () => {\n    expect(filterArray(pizzas, 'title', 'Hawaiian')).toEqual(result)\n  })\n  it(`should return a empty array when key doesn't exist`, () => {\n    expect(filterArray(pizzas, 'name', 'Hawaiian')).toEqual([])\n  })\n\n  it('should return matching array when term is upper-cased', () => {\n    expect(filterArray(pizzas, 'name', 'HAWAIIAN')).toEqual(result)\n  })\n})\n```", "```\n/** composables/useFilter.ts */\nimport { ref, computed, type Ref } from 'vue'\n\ntype ArrayObject = { [key: string]: string };\n\nexport function useFilter(\n  arr: Ref<ArrayObject[]>,\n  key: string,\n  term: string\n) { ![1](assets/1.png)\n  const filterBy = ref(key) ![2](assets/2.png)\n  const filterTerm = ref(term)\n  const order = ref('asc')\n\n  const filteredArray = computed(() => ![3](assets/3.png)\n    arr.value.filter((item) =>\n      item[filterBy.value]?.toLowerCase().includes(\n        filterTerm.value.toLowerCase())\n    ).sort((a, b) => {\n      if (order.value === 'asc') {\n        return a[filterBy.value] > b[filterBy.value] ? 1 : -1\n      } else {\n        return a[filterBy.value] < b[filterBy.value] ? 1 : -1\n      }\n    })\n  );\n\n  return {\n    filterBy,\n    filterTerm,\n    filteredArray,\n    order,\n  }\n}\n```", "```\nimport { useFilter } from '@/composables/useFilter'\n\nconst books = [\n  {\n    id: '1',\n    title: 'Gone with the wind',\n    author: 'Margaret Mitchell',\n    description:\n    'A novel set in the American South during the Civil War and Reconstruction',\n  },\n  {\n    id: '2',\n    title: 'The Great Gatsby',\n    description:\n      'The story primarily concerns the mysterious millionaire Jay Gatsby',\n    author: 'F. Scott Fitzgerald',\n  },\n  {\n    id: '3',\n    title: 'Little women',\n    description: 'The March sisters live and grow in post-Civil War America',\n    author: 'Louisa May Alcott',\n  },\n]\n\ndescribe('useFilter', () => {\n})\n```", "```\nimport { useFilter } from '@/composables/useFilter'\nimport { ref } from 'vue'\n\nconst books = ref([\n  //...\n]);\n\nconst result = [books.value[0]]\n```", "```\nit(\n  'should reactively return the filtered array when filterTerm is changed',\n  () => {\n  const { filteredArray, filterTerm } = useFilter(books, 'title', '');\n\n  filterTerm.value = books.value[0].title;\n  expect(filteredArray.value).toEqual(result);\n})\n```", "```\n/** composables/useFetch.ts */\nimport { ref, onMounted } from 'vue'\n\nexport function useFetch(url: string) {\n  const data = ref(null)\n  const error = ref(null)\n  const loading = ref(true)\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch data for ${url}`);\n      }\n\n      data.value = await response.json();\n    } catch (err: any) {\n      error.value = err.message;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  onBeforeMount(fetchData);\n\n  return { data, error, loading }\n}\n```", "```\n/** tests/useFetch.test.ts */\nimport { createApp, type App } from 'vue'\n\nfunction withSetup(composable: Function): [any, App<Element>] {\n    let result;\n\n    const app = createApp({\n        setup() {\n            result = composable();\n            return () => {};\n        },\n    });\n\n    app.mount(document.createElement(\"div\"));\n\n    return [result, app];\n}\n```", "```\nimport { useFetch } from '@/composables/useFetch'\n\ndescribe('useFetch', () => {\n  it('should fetch data from the given url', async () => {\n    const [result, app] = withSetup(() => useFetch('your-test-url'));\n\n    expect();\n  });\n});\n```", "```\nimport { vi } from 'vitest'\n\nconst fetchSpy = vi.spyOn(global, 'fetch');\n```", "```\ndescribe('useFetch', () => {\n  const fetchSpy = vi.spyOn(global, 'fetch');\n\n  beforeEach(() => {\n    fetchSpy.mockClear();\n  });\n\n  it('should fetch data from the given url', async () => {\n    //...\n  });\n});\n```", "```\nit('should fetch data from the given url', async () => {\n  fetchSpy.mockResolvedValueOnce({\n    ok: true,\n    json: () => Promise.resolve({ data: 'test' }),\n  } as any);\n\n  const [result, app] = withSetup(() => useFetch('your-test-url'));\n});\n```", "```\nit('should fetch data from the given url', async () => {\n  //...\n\n  const [result, app] = withSetup(() => useFetch('your-test-url'));\n\n  expect(result?.data.value).toEqual({ data: 'test' });\n});\n```", "```\nit('should fetch data from the given url', async () => {\n  //...\n\n  expect(fetchSpy).toHaveBeenCalledWith('your-test-url');\n});\n```", "```\nit('should fetch data from the given url', async () => {\n  //...\n  await app.unmount();\n});\n```", "```\nimport { flushPromises } from '@vue/test-utils'\n\nit('should fetch data from the given url', async () => {\n  //...\n\n  await flushPromises();\n\n  expect(result.data.value).toEqual({ data: 'test' });\n});\n```", "```\nit('should change loading value', async () => {\n  //...\n\n  expect(result.loading.value).toBe(true);\n\n  await flushPromises();\n\n  expect(result.loading.value).toBe(false);\n});\n```", "```\nit('should change error value', async () => {\n  fetchSpy.mockRejectedValueOnce(new Error('test error'));\n\n  const [result, app] = withSetup(() => useFetch('your-test-url'));\n\n  expect(result.error.value).toBe(null);\n\n  await flushPromises();\n\n  expect(result.error.value).toEqual(new Error('test error'));\n});\n```", "```\n<template>\n  <article class=\"pizza--details-wrapper\">\n    <img :src=\"pizza.image\" :alt=\"pizza.title\" height=\"200\" width=\"300\" />\n    <p>{{ pizza.description }}</p>\n    <div class=\"pizza--inventory\">\n      <div class=\"pizza--inventory-stock\">Stock: {{ pizza.quantity || 0 }}</div>\n      <div class=\"pizza--inventory-price\">$ {{ pizza.price }}</div>\n    </div>\n  </article>\n</template>\n<script setup lang=\"ts\">\nimport type { Pizza } from \"@/types/Pizza\";\nimport type { PropType } from \"vue\";\n\nconst props = defineProps({\n  pizza: {\n    type: Object as PropType<Pizza>,\n    required: true,\n  },\n});\n</script>\n```", "```\n/** tests/PizzaCard.test.ts */\nimport { shallowMount } from '@vue/test-utils';\nimport PizzaCard from '@/components/PizzaCard.vue';\n\ndescribe('PizzaCard', () => {\n  it('should render the pizza details', () => {\n    const pizza = {\n      id: 1,\n      title: 'Test Pizza',\n      description: 'Test Pizza Description',\n      image: 'test-pizza.jpg',\n      price: 10,\n      quantity: 10,\n    };\n\n    const wrapper = shallowMount(PizzaCard, {\n      props: {\n        pizza,\n      },\n    });\n\n    expect();\n  });\n});\n```", "```\n/** tests/PizzaCard.test.ts */\n//...\n\nexpect(wrapper.find('.pizza--details-wrapper')).toBeTruthy();\n```", "```\n/** tests/PizzaCard.test.ts */\n//...\n\nexpect(\n  wrapper.find('.pizza--inventory-stock').text()\n).toBe(`Stock: ${pizza.quantity}`);\nexpect(wrapper.find('.pizza--inventory-price').text()).toBe(`$ ${pizza.price}`);\n```", "```\n/** tests/PizzaCard.test.ts */\n\nexpect(wrapper.html()).toMatchSnapshot();\n```", "```\n/** tests/PizzaCard.test.ts */\n\ndescribe('PizzaCard', () => {\n  it('should render the pizza image and alt text', () => {\n    //...\n\n    const wrapper = shallowMount(PizzaCard, {\n      props: {\n        pizza,\n      },\n    });\n\n    const img = wrapper.find('img')\n\n    expect(img.attributes().alt).toEqual(pizza.title);\n    expect(img.attributes().src).toEqual(pizza.image);\n  });\n});\n```", "```\n/** src/components/PizzaCard.vue */\n\n<template>\n  <section v-if=\"pizza\" class=\"pizza--container\">\n    <!-- ... -->\n    <button @click=\"addCart\">Add to cart</button>\n  </section>\n</template>\n<script lang=\"ts\" setup>\n//...\nconst emits = defineEmits(['add-to-cart'])\n\nconst addCart = () => {\n  emits('add-to-cart', { id: props.pizza.id, quantity: 1 })\n}\n</script>\n```", "```\n/** tests/PizzaCard.test.ts */\n\ndescribe('PizzaCard', () => {\n  it('should emit add-to-cart event when add to cart button is clicked', () => {\n    //...\n\n    const wrapper = shallowMount(PizzaCard, {\n      props: {\n        pizza,\n      },\n    });\n\n    const button = wrapper.find('button');\n    button.trigger('click');\n  });\n});\n```", "```\n/** tests/PizzaCard.test.ts */\n\ndescribe('PizzaCard', () => {\n  it('should emit add-to-cart event when add to cart button is clicked', () => {\n    //...\n\n    expect(wrapper.emitted()['add-to-cart']).toBeTruthy();\n    expect(wrapper.emitted()['add-to-cart'][0]).toEqual([\n      { id: pizza.id, quantity: 1 }\n    ]);\n  });\n});\n```", "```\nyarn add -D @vitest/ui\n```", "```\nyarn add -D @vitest/coverage-istanbul\n```", "```\n/** vite.config.ts */\nexport default defineConfig({\n  //...\n  test: {\n    //...\n    coverage: {\n      provider: 'istanbul'\n    }\n  }\n})\n```", "```\n{\n  //...\n  \"scripts\": {\n    //...\n    \"test:coverage\": \"vite test --coverage\"\n  }\n}\n```", "```\n/** vite.config.ts */\n\nexport default defineConfig({\n  //...\n  test: {\n    //...\n    coverage: {\n      provider: 'istanbul',\n      statements: 80,\n      branches: 80,\n      functions: 80,\n      lines: 80\n    }\n  }\n})\n```", "```\nyarn create Playwright\n```", "```\n\"scripts\": {\n  //...\n  \"test:e2e\": \"npx playwright test\"\n}\n```", "```\n\"scripts\": {\n  //...\n  \"test:e2e-report\": \"npx playwright show-report\"\n}\n```", "```\nimport { defineConfig, devices } from '@playwright/test';\n\n/** playwright.config.ts */\nexport default defineConfig({\n  testDir: './e2e',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n  use: {\n    trace: 'on-first-retry',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ]\n})\n```", "```\n//...\nexport default defineConfig({\n  //...\n  server: {\n    port: 3000\n  }\n})\n```", "```\n<template>\n  <div class=\"pizzas-view--container\">\n    <h1>Pizzas</h1>\n    <input v-model=\"search\" placeholder=\"Search for a pizza\" />\n    <ul>\n      <li v-for=\"pizza in searchResults\" :key=\"pizza.id\">\n        <PizzaCard :pizza=\"pizza\" />\n      </li>\n    </ul>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { usePizzas } from \"@/composables/usePizzas\";\nimport PizzaCard from \"@/components/PizzaCard.vue\";\nimport { useSearch } from \"@/composables/useSearch\";\n\nconst { pizzas } = usePizzas();\nconst { search, searchResults }: PizzaSearch = useSearch({\n  items: pizzas,\n  defaultSearch: '',\n});\n</script>\n```", "```\n/** e2e/PizzasView.spec.ts */\nimport { expect, test } from '@playwright/test';\n\ntest.describe('Pizzas View', () => {\n  test.beforeEach(async ({ page }) => {\n    await page.goto('http://localhost:3000/pizzas');\n  });\n});\n```", "```\n/** e2e/PizzasView.spec.ts */\n\ntest.describe('Pizzas View', () => {\n  //...\n\n  test.afterEach(async ({ page }) => {\n    await page.close();\n  });\n});\n```", "```\n/** e2e/PizzasView.spec.ts */\n\ntest.describe('Pizzas View', () => {\n  //...\n\n  test('should display the page title', async ({ page }) => {\n    const title = await page.locator('h1');\n    expect(await title.textContent()).toBe('Pizzas');\n  });\n});\n```", "```\n<input\n  v-model=\"search\"\n  placeholder=\"Search for a pizza\"\n  data-testid=\"search-input\"\n/>\n```", "```\n/** e2e/PizzasView.spec.ts */\n\ntest.describe('Pizzas View', () => {\n  //...\n\n  test('should search for a pizza', async ({ page }) => {\n    const searchInput = await page.locator('[data-testid=\"search-input\"]');\n\n    await searchInput.fill('Hawaiian');\n  });\n});\n```", "```\n<!-- src/components/PizzaCard.vue -->\n<template>\n  <article class=\"pizza--details-wrapper\" :data-testid=\"pizza.title\">\n    <!--...-->\n  </article>\n</template>\n```", "```\n/** e2e/PizzasView.spec.ts */\n\ntest.describe('Pizzas View', () => {\n  //...\n  test('should search for a pizza', async ({ page }) => {\n    const searchInput = await page.locator('[data-testid=\"search-input\"]');\n\n    await searchInput.fill('Hawaiian');\n\n    expect(await page.isVisible('[data-testid*=\"Hawaiian\"]')).toBeTruthy();\n  });\n});\n```", "```\n/** e2e/PizzasView.spec.ts */\n\ntest.describe('Pizzas View', () => {\n  //...\n  test('should search for a pizza', async ({ page }) => {\n    const searchInput = await page.locator('[data-testid=\"search-input\"]');\n\n    await searchInput.fill('Cheese');\n\n    expect(await page.isVisible('[data-testid*=\"Hawaiian\"]')).toBeTruthy();\n  });\n});\n```"]