- en: Chapter 4\. Applications and Supply Chain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 应用程序与供应链
- en: The [SUNBURST](https://oreil.ly/19FGs) [supply-chain compromise](https://oreil.ly/coa9p)
    was a hostile intrusion of US Government and Fortune-500 networks via malware
    hidden in a legitimately signed, compromised server monitoring agent. The [Cozy
    Bear hacking group](https://oreil.ly/gADiF) used techniques described in this
    chapter to compromise many billion-dollar companies simultaneously. High value
    targets were prioritized by the attackers, so smaller organizations may have escaped
    the potentially devastating consequences of the breach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[SUNBURST](https://oreil.ly/19FGs)的[供应链妥协](https://oreil.ly/coa9p)是通过一个合法签名的、被篡改的服务器监控代理软件进行的恶意入侵，入侵了美国政府和财富500强的网络。[Cozy
    Bear黑客团体](https://oreil.ly/gADiF)使用本章节描述的技术同时攻击了许多百亿美元公司。攻击者优先攻击高价值目标，所以较小的组织可能逃过了这场可能具有毁灭性后果的入侵。'
- en: 'Organizations targeted by the attackers suffered losses of data and may have
    been used as a springboard for further attacks against their own customers. This
    is the essential risk of a “trusted” supply chain: anybody who consumes something
    you produce becomes a potential target when you are compromised. The established
    trust relationship is exploited, and so malicious software is inadvertently trusted.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者针对的组织遭受了数据损失，并可能成为进一步攻击其客户的跳板。这是“信任”供应链的基本风险：一旦你受到侵害，消费你产品的任何人都可能成为潜在目标。利用已建立的信任关系，恶意软件被误信任。
- en: Often vulnerabilities for which an exploit exists don’t have a corresponding
    software patch or workaround. Palo Alto research determined this is the case for
    80% of new, public exploits. With this level of risk exposure for all running
    software, denying malicious actors access to your internal networks is the primary
    line of defense.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 经常存在已有漏洞却没有相应软件补丁或解决方案的情况。Palo Alto的研究发现，80%的新公开漏洞存在这种情况。在所有正在运行的软件中，拒绝恶意行为者访问您的内部网络是首要防线。
- en: The SUNBURST attack infected SolarWinds build pipelines and altered source code
    immediately before it was built, then hid the evidence of tampering and ensured
    the binary was signed by the CI/CD system so consumers would trust it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SUNBURST攻击感染了SolarWinds的构建流水线，并在构建之前立即更改了源代码，然后隐藏了篡改的证据，并确保二进制文件由CI/CD系统签名，以便消费者信任它。
- en: 'These techniques were previously unseen on the [Mitre ATT&CK Framework](https://oreil.ly/BV0mN),
    and the attacks compromised networks plundered for military, government, and company
    secrets—all enabled by the initial supply chain attack. Preventing the ignoble,
    crafty Captain Hashjack and their pals from covertly entering the organization’s
    network via any dependencies (libraries, tooling or otherwise) is the job of *supply
    chain security*: protecting our sources.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术在[Mitre ATT&CK Framework](https://oreil.ly/BV0mN)上以前未见过，并且这些攻击使网络遭受了军事、政府和公司秘密的损失
    —— 这些都是初始供应链攻击的后果。防止肮脏狡猾的Hashjack船长及其同伙通过任何依赖（库、工具或其他）秘密进入组织的网络是*供应链安全*的工作：保护我们的来源。
- en: '![captain](Images/haku_0000.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![captain](Images/haku_0000.png)'
- en: 'In this chapter we dive into supply chain attacks by looking at some historical
    issues and how they were exploited, then see how containers can either usefully
    compartmentalize or dangerously exacerbate supply chain risks. In [“Defending
    Against SUNBURST”](#defending_against_sunburst), we’ll ask: could we have secured
    a cloud native system from SUNBURST?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过查看一些历史问题及其被利用的方式来深入研究供应链攻击，然后看看容器如何既有益地隔离，又如何危险地加剧供应链风险。在[“抵御SUNBURST”](#defending_against_sunburst)中，我们会问：我们是否能够保护云原生系统免受SUNBURST的侵害？
- en: 'For career criminals like Captain Hashjack, the supply chain provides a fresh
    vector to assault BCTL’s systems: attack by proxy to gain trusted access to your
    systems. This means attacking container software supply chains to gain remote
    control of vulnerable workloads and servers, and daisy-chain exploits and backdoors
    throughout an organization.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像Hashjack船长这样的职业罪犯来说，供应链为攻击BCTL的系统提供了一个新的入侵向量：通过代理攻击来获得对您系统的信任访问。这意味着攻击容器软件供应链以获取对易受攻击工作负载和服务器的远程控制，并在整个组织中串联利用漏洞和后门。
- en: Defaults
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认值
- en: 'Unless targeted and mitigated, supply chain attacks are relatively simple:
    they impact trusted parts of our system that we would not normally directly observe,
    like the CI/CD patterns of our suppliers.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除非有针对性地加以防范和减轻，供应链攻击相对来说是比较简单的：它们影响到我们系统中信任的部分，这些部分通常我们不会直接观察到，比如我们供应商的CI/CD模式。
- en: This is a complex problem, as we will discuss in this chapter. As adversarial
    techniques evolve and cloud native systems adapt, you’ll see how the supply chain
    risks shift during development, testing, distribution, and runtime.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本章中讨论的那样，这是一个复杂的问题。随着对抗性技术的发展和云原生系统的适应，你会看到供应链风险在开发、测试、分发和运行时如何转变。
- en: Threat Model
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁模型
- en: 'Most applications do not come hardened by default, and you need to spend time
    securing them. [OWASP Application Security Verification Standard](https://oreil.ly/5S6Qd)
    provides application security (AppSec) guidance that we will not explore any further,
    except to say: you don’t want to make an attacker’s life easy by running outdated
    or error-ridden software. Rigorous logic and security tests are essential for
    any and all software you run.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序默认情况下不是强化的，你需要花时间来确保它们安全。[OWASP 应用安全验证标准](https://oreil.ly/5S6Qd) 提供应用程序安全（AppSec）指导，我们不会进一步探讨，除了说：你不希望通过运行过时或错误的软件来简化攻击者的生活。对所有运行的软件进行严格的逻辑和安全测试至关重要。
- en: That extends from your developers’ coding style and web application security
    standards, to the supply chain for everything inside the container itself. Engineering
    effort is required to make them secure and ensure they are secure when updated.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的开发人员的编码风格和网页应用程序安全标准，到容器内部的一切供应链。需要工程化的努力来使它们安全，并确保在更新时它们仍然是安全的。
- en: 'Dependencies in the SDLC are especially vulnerable to attack, and give opportunities
    to Captain Hashjack to run some malicious code (the “payload”):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC 中的依赖项特别容易受到攻击，并为 Hashjack 队长提供运行一些恶意代码（“有效负载”）的机会：
- en: At installation (package manager hooks, which may be running as root)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安装时（可能以 root 用户身份运行的包管理器钩子）
- en: During development and test (IDEs, builds, and executing tests)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发和测试期间（IDE、构建和执行测试）
- en: At runtime (local, dev, staging, and production Kubernetes pods)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时（本地、开发、暂存和生产 Kubernetes 容器）
- en: When a payload is executing, it may write further code to the filesystem or
    pull malware from the internet. It may search for data on a developer’s laptop,
    a CI server, or production. Any looted credentials form the next phase of the
    attack.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当有效负载正在执行时，它可能会向文件系统写入更多代码或从互联网上拉取恶意软件。它可能会在开发者的笔记本电脑、CI 服务器或生产环境中搜索数据。任何被窃取的凭证都形成攻击的下一个阶段。
- en: 'And applications are not the only software at risk: with infrastructure, policy,
    and security defined as code, any scripted or automated point of the system that
    an attacker can infiltrate must be considered, and so is in scope for your threat
    model.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序并非唯一面临风险的软件：随着基础设施、策略和安全定义为代码，攻击者可以渗透的任何系统的脚本化或自动化点都必须被考虑进来，并因此被纳入你的威胁模型的范围内。
- en: The Supply Chain
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应链
- en: 'Software supply chains ([Figure 4-1](#web-of-supply-chains)) consider the movement
    of your files: source code, applications, data. They may be plain text, encrypted,
    on a floppy disk, or in the cloud.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 软件供应链（[图 4-1](#web-of-supply-chains)）考虑你的文件移动：源代码、应用程序、数据。它们可能是明文、加密的、存储在软盘上或者云端。
- en: Supply chains exist for anything that is built from other things—perhaps something
    that humans ingest (food, medicine), use (a CPU, cars), or interact with (an operating
    system, open source software). Any exchange of goods can be modeled as a supply
    chain, and some supply chains are huge and complex.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 供应链存在于任何由其他事物构建的东西上——也许是人类摄入的食品、药物，使用的 CPU、汽车，或者与之交互的操作系统、开源软件。任何货物的交换都可以建模为供应链，而某些供应链则是庞大而复杂的。
- en: '![haku 0401](Images/haku_0401.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![haku 0401](Images/haku_0401.png)'
- en: Figure 4-1\. A web of supply chains; adapted from [*https://oreil.ly/r9ndi*](https://oreil.ly/r9ndi)
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 一个供应链的网络；改编自 [*https://oreil.ly/r9ndi*](https://oreil.ly/r9ndi)
- en: 'Each dependency you use is potentially a malicious implant primed to trigger,
    awaiting a spark of execution when it’s run in your systems to deploy its payload.
    Container supply chains are long and may include:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个你使用的依赖项都有可能是一个恶意植入物，等待执行时触发，以部署其有效负载。容器供应链很长，可能包括：
- en: The base image(s)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础镜像
- en: Installed operating system packages
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装的操作系统软件包
- en: Application code and dependencies
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序代码和依赖项
- en: Public Git repositories
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共 Git 仓库
- en: Open source artifacts
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源工件
- en: Arbitrary files
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意文件
- en: Any other data that may be added
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能添加的任何其他数据
- en: 'If malicious code is added to your supply chain at any step, it may be loaded
    into executable memory in a running container in your Kubernetes cluster. This
    is Captain Hashjack’s goal with malicious payloads: sneak bad code into your trusted
    software and use it to launch an attack from inside the perimeter of your organization,
    where you may not have defended your systems as well on the assumption that the
    “perimeter” will keep attackers out.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Each link of a supply chain has a producer and a consumer. In [Table 4-1](#app-example-supply-chains),
    the CPU chip producer is the manufacturer, and the next consumer is the distributor.
    In practice, there may be multiple producers and consumers at each stage of the
    supply chain.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-1\. Varied example supply chains
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Farm food | CPU chip | An open source software package | Your organization’s
    servers |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| *original producer* | Farmer (seeds, feed, harvester) | Manufacturer (raw
    materials, fab, firmware) | Open source package developer (ingenuity, code) |
    Open source software, original source code built in internal CI/CD |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| *(links to)* | Distributor (selling to shops or other distributors) | Distributor
    (selling to shops or other distributors) | Repository maintainer (npm, PyPi, etc.)
    | Signed code artifacts pushed over the network to production-facing registry
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| *(links to)* | Local food shop | Vendor or local computer shop | Developer
    | Artifacts at rest in registry ready for deployment |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| *links to final consumer* | End user | End user | End user | Latest artifacts
    deployed to production systems |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: Any stage in the supply chain that is not under your direct control is liable
    to be attacked ([Figure 4-2](#app-similarity-between-supply-chains)). A compromise
    of any “upstream” stage—for example, one that you consume—may impact you as a
    downstream consumer.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: For example, an open source software project ([Figure 4-3](#app-open-source-supply-chain-attack))
    may have three contributors (or “trusted producers”) with permission to merge
    external code contributions into the codebase. If one of those contributors’ passwords
    is stolen, an attacker can add their own malicious code to the project. Then,
    when your developers pull that dependency into their codebase, they are running
    the attacker’s hostile code on your internal systems.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Similarity between supply chains](Images/haku_0402.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2\. Similarity between supply chains
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Open source supply chain attack](Images/haku_0403.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3\. Open source supply chain attack
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But the compromise doesn’t have to be malicious. As with the [npm `event-stream`
    vulnerability](https://oreil.ly/UCKUv), sometimes it’s something as innocent as
    someone looking to pass on maintainership to an existing and credible maintainer,
    who then goes rogue and inserts their own payload.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this case the vulnerable `event-stream` package was downloaded 12 million
    times, and was depended upon by more than 1,600 other packages. The payload searched
    for “hot cryptocurrency wallets” to steal from developers’ machines. If this had
    stolen SSH and GPG keys instead and used them to propagate the attack further,
    the compromise could have been much wider.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`event-stream`包存在漏洞被下载了1200万次，被1600多个其他包所依赖。恶意载荷搜索“热门加密货币钱包”以窃取开发者机器上的内容。如果这些恶意代码窃取了SSH和GPG密钥并用于进一步传播攻击，那么危害可能会更大。
- en: A successful supply chain attack is often difficult to detect, as a consumer
    trusts every upstream producer. If a single producer is compromised, the attacker
    may target individual downstream consumers or pick only the highest-value targets.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的供应链攻击通常难以检测，因为消费者信任每个上游生产者。如果一个生产者受到攻击，攻击者可能会针对个别下游消费者或仅选择最高价值的目标。
- en: Software
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件
- en: For our purposes, the supply chains we consume are for software and hardware.
    In a cloud environment, a datacenter’s physical and network security is managed
    by the provider, but it is your responsibility to secure your use of the system.
    This means we have high confidence that the hardware we are using is safe. Our
    usage of it—the software we install and its behavior—is where our supply chain
    risk starts.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们的目的而言，我们消耗的供应链是软件和硬件。在云环境中，数据中心的物理和网络安全由提供者管理，但确保系统使用安全则是您的责任。这意味着我们对使用的硬件有很高的信心是安全的。我们安装的软件及其行为——这是我们供应链风险的起点。
- en: Software is built from many other pieces of software. Unlike CPU manufacturing,
    where inert components are assembled into a structure, software is more like a
    symbiotic population of cooperating organisms. Each component may be autonomous
    and choosing to cooperate (CLI tools, servers, OS) or useless unless used in a
    certain way (`glibc`, linked libraries, most application dependencies). Any software
    can be autonomous or cooperative, and it is impossible to conclusively prove which
    it is at any moment in time. This means test code (unit tests, acceptance tests)
    may still contain malicious code, which would start to explore the Continuous
    Integration (CI) build environment or the developer’s machine it is executed on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 软件由许多其他软件组件构建而成。与CPU制造不同，那里是将惰性组件组装成结构，软件更像是一个共生的合作生物群体。每个组件可能是自主的并选择合作（CLI工具、服务器、操作系统），或者在特定方式下才有用（`glibc`、链接库、大多数应用程序依赖）。任何软件都可能是自主的或合作的，并且无法在任何时刻明确证明其是哪种。这意味着测试代码（单元测试、验收测试）仍可能包含恶意代码，该代码将开始探索持续集成（CI）构建环境或执行它的开发者机器。
- en: 'This poses a conundrum: if malicious code can be hidden in any part of a system,
    how can we conclusively say that the entire system is secure?'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这造成了一个难题：如果恶意代码可以隐藏在系统的任何部分，我们怎么能确切地说整个系统是安全的呢？
- en: 'As Liz Rice points out in [*Container Security*](https://oreil.ly/uzvnv) (O’Reilly):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Liz Rice在《容器安全》（[O'Reilly](https://oreil.ly/uzvnv)）中指出的：
- en: It’s very likely that a deployment of any non-trivial software will include
    some vulnerabilities, and there is a risk that systems will be attacked through
    them. To manage this risk, you need to be able to identify which vulnerabilities
    are present and assess their severity, prioritize them, and have processes in
    place to fix or mitigate these issues.
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任何非平凡软件部署很可能包含一些漏洞，通过这些漏洞系统可能会遭受攻击风险。为了管理这种风险，您需要能够识别存在的漏洞并评估其严重程度，优先处理它们，并制定相关流程来修复或减轻这些问题。
- en: Software supply chain management is difficult. It requires you to accept some
    level of risk and make sure that reasonable measures are in place to detect dangerous
    software before it is executed inside your systems. This risk is balanced with
    diminishing rewards—builds get more expensive and more difficult to maintain with
    each control, and there are much higher expenses for each step.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 软件供应链管理是困难的。它要求您接受一定程度的风险，并确保在软件执行之前能够检测到危险的软件，并采取合理的措施来减轻这些风险。这种风险与回报递减相平衡——随着每个控制措施的增加，构建变得更昂贵、更难维护，每一步的开销也更高。
- en: Warning
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Full confidence in your supply chain is almost impossible without the full spectrum
    of controls detailed in the CNCF Security Technical Advisory Group paper on software
    supply chain security (addressed later in this chapter).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有详细控制的情况下，您对供应链的完全信任几乎是不可能的，这一点在CNCF安全技术咨询组关于软件供应链安全的文件中有详细说明（本章后面会讨论）。
- en: As ever, you assume that no control is entirely effective and run intrusion
    detection on the build machines as the last line of defense against targeted or
    widespread zero-day vulnerabilities that may have included SUNBURST, Shellshock,
    or DirtyCOW, (see [“Architecting Containerized Apps for Resilience”](#architecting-apps-resilience)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，您假设没有完全有效的控制，并在构建机器上运行入侵检测，作为对目标或广泛零日漏洞（如SUNBURST、Shellshock或DirtyCOW）的最后防线。
- en: 'Now let’s look at how to secure a software supply chain, starting with minimum
    viable cloud native security: scanning for CVEs.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何保护软件供应链，从最小可行的云原生安全开始：扫描CVE。
- en: Scanning for CVEs
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CVE扫描
- en: CVEs are published for known vulnerabilities, and it is critical that you do
    not give Captain Hashjack’s gruesome crew easy access to your systems by ignoring
    or failing to patch them. Open source software lists its dependencies in its build
    instructions (*pom.xml*, *package.json*, *go.mod*, *requirements.txt*, *Gemfile*,
    etc.), which gives us visibility of its composition. This means you should scan
    those dependencies for CVEs using tools like [trivy](https://oreil.ly/wLyXO).
    This is the lowest-hanging fruit in the defense of the supply chain and should
    be considered a part of the minimum viable container security processes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 已公布已知漏洞的CVE，通过忽视或未能修补它们，您会使Hashjack船长的可怕船员轻易访问您的系统变得更加困难。开源软件在其构建说明（如*pom.xml*、*package.json*、*go.mod*、*requirements.txt*、*Gemfile*等）中列出其依赖关系，这使我们能够看到其组成。这意味着您应该使用诸如[trivy](https://oreil.ly/wLyXO)之类的工具扫描这些依赖项中的CVE。这是保护供应链中最容易解决的问题，并应被视为最小可行容器安全流程的一部分。
- en: 'trivy can scan code at rest in various places:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: trivy可以在各处休息的代码中进行扫描：
- en: In a container image
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器镜像中
- en: In a filesystem
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件系统中
- en: In a Git repository
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Git存储库中
- en: It reports on known vulnerabilities. Scanning for CVEs is minimum viable security
    for shipping code to production.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它会报告已知的漏洞。扫描CVE是向生产发布代码的最低可行安全性。
- en: 'This command scans the local directory and finds the `gomod` and `npm` dependency
    files, reporting on their contents (output was edited to fit):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令扫描本地目录，查找`gomod`和`npm`的依赖文件，并报告它们的内容（输出已编辑）：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_applications_and_supply_chain_CO1-1)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_applications_and_supply_chain_CO1-1)'
- en: Run trivy against the filesystem (`fs`) in the current working directory (`.`).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 运行trivy来针对当前工作目录（`.`）中的文件系统（`fs`）进行扫描。
- en: '[![2](Images/2.png)](#co_applications_and_supply_chain_CO1-2)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_applications_and_supply_chain_CO1-2)'
- en: Scanning has found two high-severity vulnerabilities in *infra/build/go.sum*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描发现*infra/build/go.sum*中有两个高危漏洞。
- en: '[![3](Images/3.png)](#co_applications_and_supply_chain_CO1-3)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_applications_and_supply_chain_CO1-3)'
- en: The *infra/api/code/package-lock.json* has no vulnerabilities detected.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*infra/api/code/package-lock.json*没有检测到漏洞。'
- en: So we can scan code in our supply chain to see if it’s got vulnerable dependencies.
    But what about the code itself?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以扫描供应链中的代码，查看其是否具有易受攻击的依赖关系。但是代码本身呢？
- en: Ingesting Open Source Software
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摄取开源软件
- en: 'Securely ingesting code is hard: how can we prove that a container image was
    built from the same source we can see on GitHub? Or that a compiled application
    is the same open source code we’ve read, without rebuilding it from source?'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地摄取代码很难：我们如何证明容器镜像是从我们在GitHub上看到的相同源代码构建的？或者编译的应用程序是我们阅读的相同开源代码，而不是重新从源代码构建的？
- en: While this is hard with open source, closed source presents even greater challenges.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管开源很难，封闭源码面临的挑战更大。
- en: How do we establish and verify trust with our suppliers?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如何建立和验证与供应商的信任关系？
- en: 'Much to the Captain’s dismay, this problem has been studied since 1983, when
    Ken Thompson introduced [“Reflections on Trusting Trust”](https://oreil.ly/NEMQR):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 令船长大为失望的是，自1983年Ken Thompson引入[“Reflections on Trusting Trust”](https://oreil.ly/NEMQR)以来，这个问题一直被研究：
- en: To what extent should one trust a statement that a program is free of Trojan
    horses? Perhaps it is more important to trust the people who wrote the software.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个程序没有特洛伊木马的声明有多值得信任？也许更重要的是要信任编写软件的人。
- en: 'The question of trust underpins many human interactions, and is the foundation
    of the original internet. Thompson continues:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 信任的问题支撑着许多人类互动，并是原始互联网的基础。Thompson继续道：
- en: The moral is obvious. You can’t trust code that you did not totally create yourself.
    (Especially code from companies that employ people like me.) No amount of source-level
    verification or scrutiny will protect you from using untrusted code… As the level
    of program gets lower, these bugs will be harder and harder to detect. A well
    installed microcode bug will be almost impossible to detect.
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结论很明显。您不能信任您完全没有自己创建的代码。（尤其是来自雇佣像我这样的人的公司的代码。）无论进行多少源代码级别的验证或审查，都无法保护您免受使用不受信任代码的危害……
    随着程序级别的降低，这些错误将变得越来越难以检测。一个良好安装的微码错误几乎不可能被检测到。
- en: These philosophical questions of security affect your organization’s supply
    chain, as well as your customers. The core problem remains unsolved and difficult
    to correct entirely.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关于安全的哲学问题影响着您组织的供应链，以及您的客户。核心问题仍未解决，难以完全纠正。
- en: While BCTL’s traditional relationship with software was defined previously as
    a consumer, when you started public open source on GitHub, you became a producer
    too. This distinction exists in most enterprise organizations today, as most have
    not adapted to their new producer responsibilities.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 BCTL 与软件的传统关系以前被定义为消费者，但当您在 GitHub 上开始公开开源时，您也成为了生产者。这种区别在今天的大多数企业组织中存在，因为大多数企业组织尚未适应其新的生产者责任。
- en: Which Producers Do We Trust?
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们信任哪些生产者？
- en: 'To secure a supply chain we must have trust in our producers. These are parties
    outside of your organization and they may include:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保供应链安全，我们必须信任我们的生产者。这些是您组织之外的各方，可能包括：
- en: Security providers such as the root Certificate Authorities to authenticate
    other servers on a network, and DNSSEC to return the right address for our transmission
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全提供者，如根证书颁发机构用于验证网络上的其他服务器，以及 DNSSEC 用于返回我们传输的正确地址
- en: Cryptographic algorithms and implementations like GPG, RSA, and Diffie-Hellman
    to secure our data in transit and at rest
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密算法和实现，如 GPG、RSA 和 Diffie-Hellman 用于保护我们的数据在传输和静止时
- en: Hardware enablers like OS, CPU/firmware, and driver vendors to provide us low-level
    hardware interaction
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件启用者，如操作系统、CPU/固件和驱动程序供应商，为我们提供低级硬件交互
- en: Application developers and package maintainers to prevent malicious code installation
    via their distributed packages
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序开发人员和软件包维护人员防止通过其分发的软件包安装恶意代码
- en: Open source and community-run teams, organizations, and standards bodies, to
    grow our technologies and communities in the common interest
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源和社区运营的团队、组织和标准机构，为了增长我们的技术和社区的共同利益
- en: Vendors, distributors, and sales agents to not install backdoors or malware
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应商、分销商和销售代理不得安装后门或恶意软件
- en: Everybody—not to have exploitable bugs
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人——不要有可利用的漏洞
- en: 'You may be wondering if it’s ever possible to secure this entirely, and the
    answer is no. Nothing is ever entirely secure, but everything can be hardened
    so that it’s less appealing to all except the most skilled of threat actors. It’s
    all about balancing layers of security controls that might include:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道是否有可能完全保护这一切，答案是否定的。没有什么是完全安全的，但可以加固以使其对除了最熟练的威胁行为者之外的所有人都不那么吸引。关键在于平衡各种安全控制层，可能包括：
- en: Physical second factors (2FA)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理第二因素（2FA）
- en: GPG signing (e.g., Yubikeys)
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPG 签名（例如，Yubikeys）
- en: '[WebAuthn](https://webauthn.io), FIDO2 Project, and physical security tokens
    (e.g., RSA)'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[WebAuthn](https://webauthn.io)、FIDO2 项目和物理安全令牌（例如，RSA）'
- en: Human redundancy
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人类冗余
- en: Authors cannot merge their own PRs
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者不能合并自己的 PR
- en: Adding a second person to sign-off critical processes
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加第二人员对关键流程进行签署
- en: Duplication by running the same process twice in different environments and
    comparing results
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在不同环境中运行相同的流程两次并比较结果来进行复制
- en: '[reprotest](https://oreil.ly/c5Gm0) and the [Reproducible Builds](https://oreil.ly/VsONj)
    initiative (see examples in [Debian](https://oreil.ly/rwWoH) and [Arch Linux](https://oreil.ly/mgVwV))'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[reprotest](https://oreil.ly/c5Gm0) 和 [可重现构建](https://oreil.ly/VsONj) 倡议（参见
    [Debian](https://oreil.ly/rwWoH) 和 [Arch Linux](https://oreil.ly/mgVwV) 中的示例）'
- en: CNCF Security Technical Advisory Group
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNCF 安全技术咨询组
- en: 'The CNCF Security Technical Advisory Group (*tag-security*) published a definitive
    [software supply chain security paper](https://oreil.ly/rEEd7). For an in-depth
    and immersive view of the field, it is strongly recommended reading:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF 安全技术咨询组（*tag-security*）发布了一份权威的 [软件供应链安全论文](https://oreil.ly/rEEd7)。为了深入和沉浸式地了解这一领域，强烈建议阅读：
- en: 'It evaluates many of the available tools and defines four key principles for
    supply chain security and steps for each, including:'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它评估了许多可用工具，并为供应链安全定义了四个关键原则以及每个原则的步骤，包括：
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Trust: Every step in a supply chain should be “trustworthy” due to a combination
    of cryptographic attestation and verification.'
  id: totrans-112
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信任：供应链中的每一步都应该是“值得信赖的”，这是由加密证明和验证的组合实现的。
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-114
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Automation: Automation is critical to supply chain security and can significantly
    reduce the possibility of human error and configuration drift.'
  id: totrans-115
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化：自动化对于供应链安全至关重要，可以显著减少人为错误和配置漂移的可能性。
- en: ''
  id: totrans-116
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-117
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Clarity: The build environments used in a supply chain should be clearly defined,
    with limited scope.'
  id: totrans-118
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清晰度：供应链中使用的构建环境应该明确定义，范围有限。
- en: ''
  id: totrans-119
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Mutual Authentication: All entities operating in the supply chain environment
    must be required to mutually authenticate using hardened authentication mechanisms
    with regular key rotation.'
  id: totrans-121
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 互相认证：在供应链环境中运作的所有实体都必须使用硬化的认证机制进行互相认证，并定期更换密钥。
- en: ''
  id: totrans-122
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Software Supply Chain Best Practices, tag-security
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 软件供应链最佳实践，标签安全
- en: 'It then covers the main parts of supply chain security:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后涵盖供应链安全的主要部分：
- en: Source code (what your developers write)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码（您的开发人员编写的内容）
- en: Materials (dependencies of the app and its environment)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 材料（应用程序及其环境的依赖关系）
- en: Build pipelines (to test and build your app)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建流水线（用于测试和构建您的应用程序）
- en: Artifacts (your app plus test evidence and signatures)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 人工制品（您的应用程序加上测试证据和签名）
- en: Deployments (how your consumers access your app)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署（您的消费者如何访问您的应用程序）
- en: If your supply chain is compromised at any one of these points, your consumers
    may be compromised too.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的供应链在这些点中的任何一个受到损害，您的消费者也可能受到损害。
- en: Architecting Containerized Apps for Resilience
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为弹性设计容器化应用程序
- en: You should adopt an adversarial mindset when architecting and building systems
    so security considerations are baked in. Part of that mindset includes learning
    about historical vulnerabilities in order to defend yourself against similar attacks.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计和构建系统时，您应该采用对抗性思维，以便安全考虑被纳入其中。这种思维的一部分包括学习历史漏洞，以便防御自己免受类似攻击。
- en: The granular security policy of a container is an opportunity to reconsider
    applications as “compromised-by-default,” and configure them so they’re better
    protected against zero-day or unpatched vulnerabilities.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的细粒度安全策略是重新考虑应用程序作为“默认受损”的机会，并对其进行配置，使其更好地受到保护，以防止零日漏洞或未修补的漏洞。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'One such historical vulnerability was DirtyCOW: a race condition in the Linux
    kernel’s privileged memory mapping code that allowed unprivileged local users
    to escalate to root.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一个历史性漏洞是DirtyCOW：Linux内核特权内存映射代码中的竞争条件，允许非特权本地用户升级为root。
- en: The bug allowed an attacker to gain a root shell on the host, and was exploitable
    from inside a container that didn’t block `ptrace`. One of the authors live demoed
    [preventing a DirtyCOW container breakout](https://oreil.ly/zYCJp) with an AppArmor
    profile that blocked the `ptrace` system call. There’s an example Vagrantfile
    to reproduce the bug in [Scott Coulton’s repo](https://oreil.ly/Fvu4v).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该漏洞允许攻击者在主机上获得root shell，并且可以从未阻止`ptrace`的容器内进行利用。其中一位作者通过一个阻止`ptrace`系统调用的AppArmor配置文件现场演示了[防止DirtyCOW容器越狱](https://oreil.ly/zYCJp)。有一个示例Vagrantfile可以在[Scott
    Coulton的存储库](https://oreil.ly/Fvu4v)中复现该漏洞。
- en: Detecting Trojans
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测木马
- en: 'Tools like [dockerscan](https://oreil.ly/rlLnJ) can *trojanize* a container:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 像[dockerscan](https://oreil.ly/rlLnJ)这样的工具可以*木马化*一个容器：
- en: 'trojanize: inject a reverse shell into a docker image'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 木马化：向docker镜像注入一个反向shell
- en: ''
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: dockerscan
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: dockerscan
- en: Note
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We go into more detail on attacking software and libraries in [“Captain Hashjack
    Attacks a Supply Chain”](#captain_hashjack_attacks_a_supply_chain).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[“哈希杰克船长攻击供应链”](#captain_hashjack_attacks_a_supply_chain)中更详细地讨论攻击软件和库。
- en: 'To trojanize a `webserver` image is simple:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要使`webserver`镜像植入木马很简单：
- en: '[PRE1]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_applications_and_supply_chain_CO2-1)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_applications_and_supply_chain_CO2-1)'
- en: Export a valid `webserver` tarball from a container image.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从容器镜像中导出一个有效的`webserver` tarball。
- en: '[![2](Images/2.png)](#co_applications_and_supply_chain_CO2-2)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_applications_and_supply_chain_CO2-2)'
- en: Trojanize the image tarball.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 木马化镜像tarball。
- en: '[![3](Images/3.png)](#co_applications_and_supply_chain_CO2-3)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_applications_and_supply_chain_CO2-3)'
- en: Specify the attacker’s shellcatcher IP and port.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 指定攻击者的shellcatcher IP和端口。
- en: '[![4](Images/4.png)](#co_applications_and_supply_chain_CO2-4)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_applications_and_supply_chain_CO2-4)'
- en: Write to an output tarball called `trojanized-webserver`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 写入名为 `trojanized-webserver` 的输出压缩包。
- en: It’s this sort of attack that you should scan your container images to detect
    and prevent. As `dockerscan` uses an `LD_PRELOAD` attack that most container IDS
    and scanning should detect.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该扫描您的容器镜像以检测和防止这种类型的攻击。正如 `dockerscan` 使用的 `LD_PRELOAD` 攻击，大多数容器 IDS 和扫描应该能够检测到。
- en: Dynamic analysis of software involves running it in a malware lab environment
    where it is unable to communicate with the internet and is observed for signs
    of C2 (“command and control”), automated attacks, or unexpected behavior.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的动态分析涉及在恶意软件实验室环境中运行它，该环境无法与互联网通信，并观察其是否存在 C2（“命令与控制”）迹象、自动化攻击或意外行为。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Malware such as WannaCry (a cryptolocking worm) includes a disabling “killswitch”
    DNS record (sometimes secretly used by malware authors to remotely terminate attacks).
    In some cases, this is used to delay the deployment of the malware until a convenient
    time for the attacker.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 像 WannaCry 这样的恶意软件（一种加密锁定蠕虫）包括一个禁用“杀死开关” DNS 记录（有时由恶意软件作者秘密使用以远程终止攻击）。在某些情况下，这用于延迟部署恶意软件，直到攻击者方便的时间。
- en: Together an artifact and its runtime behavior should form a picture of the trustworthiness
    of a single package, however there are workarounds. Logic bombs (behavior only
    executed on certain conditions) make this difficult to detect unless the logic
    is known. For example, SUNBURST closely emulated the valid HTTP calls of the software
    it infected. Even tracing a compromised application with tools such as `sysdig`
    does not clearly surface this type of attack.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一个构件及其运行时行为应该形成对单个软件包可信度的图片，但存在变通方法。逻辑炸弹（仅在特定条件下执行的行为）使得检测变得困难，除非已知逻辑。例如，SUNBURST
    密切模仿了其感染的软件的有效 HTTP 调用。即使使用诸如 `sysdig` 之类的工具跟踪被感染应用，也无法清楚地表现出这种类型的攻击。
- en: Captain Hashjack Attacks a Supply Chain
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hashjack 船长攻击供应链
- en: '![captain](Images/haku_0000.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![船长](Images/haku_0000.png)'
- en: You know BCTL hasn’t put enough effort into supply chain security. Open source
    ingestion isn’t regulated, and developers ignore the results of CVE scanning in
    the pipeline.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道 BCTL 没有在供应链安全方面投入足够的努力。开源摄入没有受到监管，开发人员忽略了流水线中的 CVE 扫描结果。
- en: Dread Pirate Hashjack dusts off their keyboard and starts the attack. The goal
    is to add malicious code to a container image, an open source package, or an operating
    system application that your team will run in production.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 无情海盗 Hashjack 打扫了一下键盘，开始攻击。目标是向容器镜像、开源包或操作系统应用程序添加恶意代码，以便您的团队在生产环境中运行。
- en: In this case, Captain Hashjack is looking to attack the rest of your systems
    from a foothold in an initial pod attack. When the malicious code runs inside
    your pods it will connect back to a server that the Captain controls. That connection
    will relay attack commands to run inside that pod in your cluster so the pirates
    can have a look around, as shown in [Figure 4-4](#app-remote-access-supply-chain).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Hashjack 船长试图从初始的 pod 攻击的立足点攻击您的其他系统。当恶意代码在您的 pod 内运行时，它将连接回船长控制的服务器。该连接将传递攻击命令，在您的集群中此类
    pod 内运行，以便海盗们可以四处查看，如图 [4-4](#app-remote-access-supply-chain) 所示。
- en: 'From this position of remote control, Captain Hashjack might:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个远程控制的位置，Hashjack 船长可能会：
- en: Enumerate other infrastructure around the cluster like datastores and internally
    facing software
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举集群周围的其他基础设施，如数据存储和内部面向软件
- en: Try to escalate privilege and take over your nodes or cluster
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试提升权限并接管您的节点或集群
- en: Mine cryptocurrency
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖掘加密货币
- en: Add the pods or nodes to a botnet, use them as servers, or “watering holes”
    to spread malware
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 pod 或节点添加到僵尸网络中，将其用作服务器或“诱饵站点”来传播恶意软件
- en: Any other unintended misuse of your noncompromised systems.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对您的未被破坏的系统进行任何其他意外滥用。
- en: '![Establishing remote access with a supply chain compromise](Images/haku_0404.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![建立远程访问与供应链妥协](Images/haku_0404.png)'
- en: Figure 4-4\. Establishing remote access with a supply chain compromise
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. 建立远程访问与供应链妥协
- en: The [Open Source Security Foundation (OpenSSF)](https://openssf.org)’s [SLSA
    Framework](https://slsa.dev) (“Supply-chain Levels for Software Artifacts,” or
    “Salsa”) works on the principle that “It can take years to achieve the ideal security
    state, and intermediate milestones are important.” It defines a graded approach
    to adopting supply chain security for your builds (see [Table 4-2](#table-openssf)).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[开源安全基金会 (OpenSSF)](https://openssf.org)的 [SLSA 框架](https://slsa.dev)（“软件构件的供应链安全级别”，或
    “Salsa”）基于 “实现理想安全状态可能需要多年，中间的里程碑很重要” 的原则。它定义了一种分级方法，用于为您的构建采用供应链安全（见 [表 4-2](#table-openssf)）。'
- en: Table 4-2\. OpenSSF SLSA levels
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 4-2. OpenSSF SLSA 级别
- en: '| Level | Description | Requirements |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 等级 | 描述 | 要求 |'
- en: '| --- | --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | No guarantees | SLSA 0 represents the lack of any SLSA level. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 无任何保证 | SLSA 0 代表完全没有 SLSA 级别。'
- en: '| 1 | Provenance checks to help evaluate risks and security | The build process
    must be fully scripted/automated and generate provenance. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 源检查以帮助评估风险和安全性 | 构建过程必须完全脚本化/自动化，并生成来源审计。'
- en: '| 2 | Further checks against the origin of the software | Requires using version
    control and a hosted build service that generates authenticated provenance. This
    results in tamper resistance of the build service. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 进一步对软件来源进行检查 | 需要使用版本控制和托管构建服务生成经过身份验证的来源。这将导致构建服务的防篡改性。'
- en: '| 3 | Extra resistance to specific classes of threats | The source and build
    platforms meet specific standards to guarantee the auditability of the source
    and the integrity of the provenance respectively. Advanced protection including
    security controls on host, non-falsifiable provenance, and prevention of cross-build
    contamination. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 对特定类威胁的额外抵抗力 | 源和构建平台符合特定标准，以保证源的审计性和来源的完整性。高级保护包括主机上的安全控制、不可伪造的来源、以及防止跨构建污染。'
- en: '| 4 | Highest levels of confidence and trust | Strict auditability and reliability
    checks. Requires two-person review of all changes and a hermetic, reproducible
    build process. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 最高的信任和可信度级别 | 严格的审计和可靠性检查。所有变更都需要两人审核，并采用封闭的、可重现的构建过程。'
- en: Let’s move on to the aftermath.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入后续步骤。
- en: Post-Compromise Persistence
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受损后持久性
- en: Before attackers do something that may be detected by the defender, they look
    to establish persistence, or a backdoor, so they can, for example, enter the system
    if they get detected or unceremoniously ejected, as their method of intrusion
    is patched.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在攻击者执行可能被防御者检测到的操作之前，他们寻求建立持久性或后门，这样，例如如果被发现或被强制驱逐，他们可以进入系统，因为他们的入侵方法已被修补。
- en: Note
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When containers restart, filesystem changes are lost, so persistence is not
    possible just by writing to the container filesystem. Dropping a “back door” or
    other persistence mechanism in Kubernetes requires the attacker to use other parts
    of Kubernetes or the `kubelet` on the host, as anything they write inside the
    container is lost when it restarts.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器重新启动时，文件系统的更改会丢失，因此仅通过向容器文件系统写入来实现持久性是不可能的。在 Kubernetes 中放置“后门”或其他持久性机制需要攻击者使用
    Kubernetes 的其他部分或主机上的 `kubelet`，因为他们在容器内写入的任何内容在重新启动时都会丢失。
- en: Depending on how you were compromised, Captain Hashjack now has various options
    available. None are possible in a well-configured container without excessive
    RBAC privilege, although this doesn’t stop the attacker exlpoiting the same path
    again and looking to pivot to another part of your system.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 依据您的受损情况，哈希杰克船长现在有多种选择。在配置良好的容器中，没有过度的 RBAC 权限，这些都是不可能的，尽管这并不阻止攻击者再次利用相同的路径并试图转向系统的另一部分。
- en: 'Possible persistence in Kubernetes can be gained by:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 可能通过以下方式获得持久性：
- en: Starting a static privileged pod through the `kubelet`’s static manifests
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 `kubelet` 的静态清单启动静态特权 Pod
- en: Deploying a privileged container directly using the container runtime
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用容器运行时部署特权容器
- en: Deploying an admission controller or CronJob with a backdoor
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署带后门的准入控制器或 CronJob
- en: Deploying a shadow API server with custom authentication
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署具有自定义认证的影子 API 服务器
- en: Adding a mutating webhook that injects a backdoor container to some new pods
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一些新的 Pod 中添加注入后门容器的变异 Webhook
- en: Adding worker or control plane nodes to a botnet or C2 network
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工作节点或控制平面节点添加到僵尸网络或 C2 网络
- en: Editing container lifecycle `postStart` and `preStop` hooks to add backdoors
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑容器生命周期的 `postStart` 和 `preStop` 钩子以添加后门
- en: Editing liveness probes to exec a backdoor in the target container
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Editing liveness probes to exec a backdoor in the target container
- en: Any other mechanism that runs code under the attacker’s control
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Any other mechanism that runs code under the attacker’s control
- en: Risks to Your Systems
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Risks to Your Systems
- en: 'Once they have established persistence, attacks may become more bold and dangerous:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'Once they have established persistence, attacks may become more bold and dangerous:'
- en: Exfiltrating data, credentials, and cryptocurrency wallets
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Exfiltrating data, credentials, and cryptocurrency wallets
- en: Pivoting further into the system via other pods, the control plane, worker nodes,
    or cloud account
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pivoting further into the system via other pods, the control plane, worker nodes,
    or cloud account
- en: Cryptojacking compute resources (e.g., [mining Monero in Docker containers](https://oreil.ly/0E9iw))
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cryptojacking compute resources (e.g., [mining Monero in Docker containers](https://oreil.ly/0E9iw))
- en: Escalating privilege in the same pod
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Escalating privilege in the same pod
- en: Cryptolocking data
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cryptolocking data
- en: Secondary supply chain attack on target’s published artifacts/software
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Secondary supply chain attack on target’s published artifacts/software
- en: Let’s move on to container images.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Let’s move on to container images.
- en: Container Image Build Supply Chains
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Container Image Build Supply Chains
- en: Your developers have written code that needs to be built and run in production.
    CI/CD automation enables the building and deployment of artifacts, and is a traditionally
    appealing target due to less security rigor than the production systems it deploys
    to.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Your developers have written code that needs to be built and run in production.
    CI/CD automation enables the building and deployment of artifacts, and is a traditionally
    appealing target due to less security rigor than the production systems it deploys
    to.
- en: To address this insecurity, the Software Factory pattern is gaining adoption
    as a model for building the pipelines to build software.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: To address this insecurity, the Software Factory pattern is gaining adoption
    as a model for building the pipelines to build software.
- en: Software Factories
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Software Factories
- en: A Software Factory is a form of CI/CD that focuses on self-replication. It is
    a build system that can deploy copies of itself, or other parts of the system,
    as new CI/CD pipelines. This focus on replication ensures build systems are repeatable,
    easy to deploy, and easy to replace. They also assist iteration and development
    of the build infrastructure itself, which makes securing these types of systems
    much easier.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: A Software Factory is a form of CI/CD that focuses on self-replication. It is
    a build system that can deploy copies of itself, or other parts of the system,
    as new CI/CD pipelines. This focus on replication ensures build systems are repeatable,
    easy to deploy, and easy to replace. They also assist iteration and development
    of the build infrastructure itself, which makes securing these types of systems
    much easier.
- en: Use of this pattern requires slick DevOps skills, continuous integration, and
    build automation practices, and is ideal for containers due to their compartmentalised
    nature.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Use of this pattern requires slick DevOps skills, continuous integration, and
    build automation practices, and is ideal for containers due to their compartmentalised
    nature.
- en: Tip
  id: totrans-214
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: The [DoD Software Factory pattern](https://oreil.ly/HqNz4) defines the Department
    of Defense’s best practice ideals for building secure, large-scale cloud or on-prem
    cloud native infrastructure.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: The [DoD Software Factory pattern](https://oreil.ly/HqNz4) defines the Department
    of Defense’s best practice ideals for building secure, large-scale cloud or on-prem
    cloud native infrastructure.
- en: Container images built from, and used to build, the DoD Software Factory are
    publicly available at [IronBank GitLab](https://oreil.ly/3NvDj).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Container images built from, and used to build, the DoD Software Factory are
    publicly available at [IronBank GitLab](https://oreil.ly/3NvDj).
- en: Cryptographic signing of build steps and artifacts can increase trust in the
    system, and can be revalidated with an admission controller such as [portieris](https://oreil.ly/mY9eu)
    for Notary and [Kritis](https://oreil.ly/R33SG) for Grafeas.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Cryptographic signing of build steps and artifacts can increase trust in the
    system, and can be revalidated with an admission controller such as [portieris](https://oreil.ly/mY9eu)
    for Notary and [Kritis](https://oreil.ly/R33SG) for Grafeas.
- en: Tekton is a Kubernetes-based build system that runs build stages in containers.
    It runs Kubernetes Custom Resources that define build steps in pods, and [Tekton
    Chains](https://oreil.ly/ZHMmw) can use in-toto to sign the pod’s workspace files.
    [Jenkins X](https://jenkins-x.io) is built on top of it and extends its feature
    set.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton is a Kubernetes-based build system that runs build stages in containers.
    It runs Kubernetes Custom Resources that define build steps in pods, and [Tekton
    Chains](https://oreil.ly/ZHMmw) can use in-toto to sign the pod’s workspace files.
    [Jenkins X](https://jenkins-x.io) is built on top of it and extends its feature
    set.
- en: Tip
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: '[Dan Lorenc](https://oreil.ly/av7UQ) elegantly summarised [the supply chain
    signing landscape](https://oreil.ly/WUVHD).'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dan Lorenc](https://oreil.ly/av7UQ) elegantly summarised [the supply chain
    signing landscape](https://oreil.ly/WUVHD).'
- en: Blessed Image Factory
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blessed Image Factory
- en: 'Some software factory pipelines are used to build and scan your base images,
    in the same way virtual machine images are built: on a cadence, and in response
    to releases of the underlying image. An image build is untrusted if any of the
    inputs to the build are not trusted. An adversary can attack a container build
    with:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有些软件工厂流水线用于构建和扫描您的基础镜像，方式与构建虚拟机镜像相同：按一定节奏进行，并响应底层镜像的发布。如果构建的任何输入都不可信，则图像构建是不可信的。攻击者可以利用容器构建进行攻击：
- en: Malicious commands in a `RUN` directive that can attack the host
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `RUN` 指令中的恶意命令可以攻击主机
- en: Host’s non-loopback network ports/services
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机非回环网络端口/服务
- en: Enumeration of other network entities (cloud provider, build infrastructure,
    network routes to production)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举其他网络实体（云提供商、构建基础设施、通向生产环境的网络路由）
- en: Malicious `FROM` image that has access to build Secrets
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意的 `FROM` 镜像可以访问构建的秘密
- en: Malicious image that has `ONBUILD` directive
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意镜像，具有 `ONBUILD` 指令
- en: Docker-in-docker and mounted container runtime sockets that can lead to host
    breakout
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker-in-docker 和挂载的容器运行时套接字可能导致主机逃逸
- en: Zero-days in container runtime or kernel
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时或内核中的零日漏洞
- en: Network attack surface (host, ports exposed by other builds)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络攻击面（主机、其他构建暴露的端口）
- en: 'To defend from malicious builds, you should begin with static analysis using
    [Hadolint](https://oreil.ly/M8GDi) and [conftest](https://oreil.ly/8mKFd) to enforce
    your policy. For example:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为防止恶意构建，您应从静态分析开始，使用 [Hadolint](https://oreil.ly/M8GDi) 和 [conftest](https://oreil.ly/8mKFd)
    强制执行您的策略。例如：
- en: '[PRE2]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Conftest wraps OPA and runs Rego language policies (see [“Open Policy Agent”](ch08.xhtml#open-policy-agent)):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Conftest 封装了 OPA 并运行 Rego 语言策略（见 [“Open Policy Agent”](ch08.xhtml#open-policy-agent)）：
- en: '[PRE3]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the Dockerfile conforms to policy, scan the container build workspace with
    tools like trivy. You can also build and then scan, although this is slightly
    riskier if an attack spawns a reverse shell into the build environment.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Dockerfile 符合策略，可以使用 trivy 等工具扫描容器构建工作区。您还可以先构建再扫描，尽管如果攻击生成反向 shell 进入构建环境，则略有风险。
- en: If the container’s scan is safe, you can perform a build.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器扫描安全，则可以执行构建。
- en: Tip
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Adding a hardening stage to the Dockerfile helps to remove unnecessary files
    and binaries that an attacker may try to exploit, and is detailed in [DoD’s Container
    Hardening Guide](https://oreil.ly/7lVbG).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dockerfile 中添加硬化阶段有助于删除攻击者可能尝试利用的不必要文件和二进制文件，详细信息请参见 [DoD’s Container Hardening
    Guide](https://oreil.ly/7lVbG)。
- en: 'Protecting the build’s network is important, otherwise malicious code in a
    container build can pull further dependencies and malicious code from the internet.
    Security controls of varying difficulty include:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 保护构建的网络很重要，否则容器构建中的恶意代码可以从互联网拉取更多依赖项和恶意代码。安全控制难度各不相同，包括：
- en: Preventing network egress
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止网络出口
- en: Isolating from the host’s kernel with a VM
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟机隔离主机内核
- en: Running the build process as a nonroot user or in a user namespace
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将构建过程作为非root用户或在用户命名空间中运行
- en: Executing `RUN` commands as a nonroot user in container filesystem
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器文件系统中以非root用户身份执行 `RUN` 命令
- en: Share nothing nonessential with the build
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与构建无关的非必要内容不共享
- en: Base Images
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础镜像
- en: When an application is being packaged for deployment it must be built into a
    container image. Depending on your choice of programming language and application
    dependencies, your container will use one of the base images from [Table 4-3](Images/#app-table-base-images).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序打包部署时，必须将其构建为容器镜像。根据您选择的编程语言和应用程序依赖关系，您的容器将使用 [Table 4-3](Images/#app-table-base-images)
    中的一种基础镜像。
- en: Table 4-3\. Types of base images
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-3\. 基础镜像类型
- en: '| Type of base image | How it’s built | Contents of image filesystem | Example
    container image |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 基础镜像类型 | 构建方式 | 镜像文件系统内容 | 示例容器镜像 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Scratch | Add one (or more) static binary to an empty container root filesystem.
    | Nothing at all except `/my-binary` (it’s the only thing in `/` directory), and
    any added dependencies (often CA bundles, locale information, static files for
    the application). | [Static Golang or Rust binary examples](https://oreil.ly/7VW3k)
    |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| Scratch | 将一个（或多个）静态二进制文件添加到空容器根文件系统中。 | 除了 `/my-binary`（它是 `/` 目录中唯一的东西）和任何添加的依赖项（通常是
    CA 捆绑包、本地化信息、应用程序的静态文件）外，没有其他内容。 | [静态 Golang 或 Rust 二进制示例](https://oreil.ly/7VW3k)
    |'
- en: '| Distroless | Add one (or more) static binary to a container that has locale
    and CA information only (no Bash, Busybox, etc.). | Nothing except `my-app`, `/etc/locale`,
    TLS pubkeys, (plus any dependencies, as per scratch), etc. | [Static Golang or
    Rust binary examples](https://oreil.ly/RZc07) |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| Distroless | 向仅具有区域设置和CA信息的容器添加一个（或多个）静态二进制文件（无Bash、Busybox等）。 | 仅包括`my-app`、`/etc/locale`、TLS公钥（以及按照scratch的任何依赖项）等。
    | [静态 Golang 或 Rust 二进制示例](https://oreil.ly/RZc07) |'
- en: '| Hardened | Add nonstatic binary or dynamic application to a minimal container,
    then remove all nonessential files and harden filesystem. | Reduced Linux userspace:
    `glibc`, `/code/my-app.py`, `/code/deps`, `/bin/python`, Python libs, static files
    for the application. | Web servers, nonstatic or complex applications, [IronBank
    examples](https://oreil.ly/tYOPP) |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| Hardened | 向极简容器添加非静态二进制或动态应用程序，然后删除所有非必要文件并加固文件系统。 | 减少的 Linux 用户空间：`glibc`、`/code/my-app.py`、`/code/deps`、`/bin/python`、Python
    库、应用程序的静态文件。 | Web 服务器，非静态或复杂应用程序，[IronBank 示例](https://oreil.ly/tYOPP) |'
- en: '| Vanilla | No security precautions, possibly dangerous. | Standard Linux userspace.
    Root user. Possibly anything and everything required to install, build, compile,
    or debug applications. This offers many opportunities for attack. | [NGINX](https://oreil.ly/0M1HH),
    [raesene/alpine-nettools](https://oreil.ly/nGOby), [nicolaka/netshoot](https://oreil.ly/60byc)
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| Vanilla | 没有安全预防措施，可能危险。 | 标准 Linux 用户空间。Root 用户。可能需要安装、构建、编译或调试应用程序的任何内容。这为攻击提供了许多机会。
    | [NGINX](https://oreil.ly/0M1HH), [raesene/alpine-nettools](https://oreil.ly/nGOby),
    [nicolaka/netshoot](https://oreil.ly/60byc) |'
- en: Minimal containers minimize a container’s attack surface to a hostile process
    or RCE, reducing an adversary to very advanced tricks like [return-oriented programming](https://oreil.ly/Kr4Kn)
    that are beyond most attackers’ capabilities. Organized criminals like Dread Pirate
    Hashjack may be able to use these programming techniques, but exploiting vulnerabilities
    like these are valuable and perhaps more likely to be sold to an exploit broker
    than used in the field, potentially reducing their value if discovered.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 极简容器将容器的攻击面最小化为对抗进程或 RCE，将对手降低到高级技巧，如[返回导向编程](https://oreil.ly/Kr4Kn)，超出大多数攻击者的能力。组织犯罪分子如
    Dread Pirate Hashjack 可能能够使用这些编程技术，但利用此类漏洞是有价值的，也许更有可能出售给漏洞经纪人，如果发现可能会降低其价值。
- en: Because statically compiled binaries ship their own system call library, they
    do not need `glibc` or another userspace kernel interface, and can exist with
    only themselves on the filesystem (see [Figure 4-5](#app-scratch-vs-glibc)).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 因为静态编译的二进制文件包含其自己的系统调用库，它们不需要`glibc`或其他用户空间内核接口，并且可以仅依赖于文件系统上的自身（参见[图 4-5](#app-scratch-vs-glibc)）。
- en: '![app-scratch-vs-glibc](Images/haku_0405.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![app-scratch-vs-glibc](Images/haku_0405.png)'
- en: Figure 4-5\. How scratch containers and `glibc` talk to the kernel
  id: totrans-257
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-5\. scratch 容器和`glibc`如何与内核通信
- en: 'Let’s step back a bit now: we need to take stock of our supply chain.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们稍作停顿：我们需要盘点我们的供应链。
- en: The State of Your Container Supply Chains
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器供应链的现状
- en: Applications in containers bundle all their userspace dependencies with them,
    and this allows us to inspect the composition of an application. The blast radius
    of a compromised container is less than a bare metal server (the container provides
    security configuration around the namespaces), but exacerbated by the highly parallelised
    nature of a Kubernetes workload deployment.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 容器中的应用程序将所有用户空间依赖项捆绑在一起，这使我们能够检查应用程序的组成。受损容器的爆炸半径小于裸金属服务器（容器提供关于命名空间的安全配置），但由于
    Kubernetes 工作负载部署的高度并行性质，情况加剧。
- en: Secure third-party code ingestion requires trust and verification of upstream
    dependencies.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地接受第三方代码需要信任并验证上游依赖关系。
- en: Kubernetes components (OS, containers, config) are a supply chain risk in themselves.
    Kubernetes distributions that pull unsigned artifacts from object storage (such
    as S3 and GCS) have no way of validating that the developers meant them to run
    those containers. Any containers with “escape-friendly configuration” (disabled
    security features, a lack of hardening, unmonitored and unsecured, etc.) are viable
    assets for attack.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 组件（操作系统、容器、配置）本身就是供应链风险。从对象存储（如 S3 和 GCS）中拉取未签名的 Kubernetes 分发版本无法验证开发人员是否打算运行这些容器。任何具有“逃逸友好配置”（禁用安全功能、缺乏加固、未监控和未安全化等）的容器都是可攻击的资产。
- en: The same is true of supporting applications (logging/monitoring, observability,
    IDS)—anything that is installed as root, that is not hardened, or indeed not architected
    for resilience to compromise, is potentially subjected to swashbuckling attacks
    from hostile forces.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于支持应用程序（日志/监控、可观测性、IDS）——任何以root身份安装的东西，如果没有经过加固，或者确实没有设计成具备对抗被妥协的韧性，都有可能成为来自敌对力量的突袭攻击对象。
- en: Third-Party Code Risk
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三方代码风险
- en: During the image build your application installs dependencies into the container,
    and the same dependencies are often installed onto developers’ machines. This
    requires the secure ingestion of third party and open source code.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在镜像构建过程中，您的应用程序会将依赖项安装到容器中，通常这些依赖项也会安装到开发者的机器上。这要求安全地摄取第三方和开源代码。
- en: You value your data security, so running any code from the internet without
    first verifying it could be unsafe. Adversaries like Captain Hashjack may have
    left a backdoor to enable remote access to any system that runs their malicious
    code. You should consider the risk of such an attack as sufficiently low before
    you allow the software inside your organization’s corporate network and production
    systems.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您重视数据安全性，因此在验证之前运行来自互联网的任何代码可能是不安全的。像Hashjack船长这样的对手可能已留下后门，以便远程访问运行其恶意代码的任何系统。在允许软件进入您的组织企业网络和生产系统之前，您应该认真考虑此类攻击的风险是否足够低。
- en: One method to scan ingested code is shown in [Figure 4-6](#app-third-party-code-ingestion).
    Containers (and other code) that originate outside your organization are pulled
    from the internet onto a temporary virtual machine. All software signatures and
    checksums are verified, binaries and source code are scanned for CVEs and malware,
    and the artifact is packaged and signed for consumption in an internal registry.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描摄入代码的一种方法显示在[图 4-6](#app-third-party-code-ingestion)中。来源于互联网的容器（和其他代码）被拉到临时虚拟机上。验证所有软件签名和校验和，扫描二进制和源代码以检测CVE和恶意软件，然后将工件打包并签名，以供内部注册使用。
- en: '![Third-party code ingestion (detailed)](Images/haku_0406.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![第三方代码摄入（详细）](Images/haku_0406.png)'
- en: Figure 4-6\. Third-party code ingestion
  id: totrans-269
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-6\. 第三方代码摄入
- en: In this example a container pulled from a public registry is scanned for CVEs,
    e.g., tagged for the internal domain, then signed with Notary and pushed to an
    internal registry, where it can be consumed by Kubernetes build systems and your
    developers.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，从公共注册表中拉取的容器被扫描以检测CVE，例如，标记为内部域，然后用Notary签名并推送到内部注册表，供Kubernetes构建系统和您的开发者使用。
- en: When ingesting third-party code you should be cognizant of who has released
    it and/or signed the package, the dependencies it uses itself, how long it has
    been published for, and how it scores in your internal static analysis pipelines.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在摄取第三方代码时，您应该注意发布者和/或包的签名、它本身使用的依赖项、发布时间以及在您内部静态分析流水线中的评分。
- en: Tip
  id: totrans-272
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Aqua’s [Dynamic Threat Analysis for Containers](https://oreil.ly/u1Rc8) runs
    potentially hostile containers in a sandbox to observe their behavior for signs
    of malice.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Aqua的[容器动态威胁分析](https://oreil.ly/u1Rc8)在沙箱中运行潜在的恶意容器，观察其行为是否存在恶意迹象。
- en: Scanning third-party code before it enters your network protects you from some
    supply chain compromises, but targeted attacks may be harder to defend against
    as they may not use known CVEs or malware. In these cases you may want to observe
    it running as part of your validation.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入您的网络之前扫描第三方代码可以保护您免受某些供应链妥协的影响，但是面对有针对性的攻击可能较难防御，因为它们可能不使用已知的CVE或恶意软件。在这些情况下，您可能需要观察它作为验证的一部分来运行。
- en: Software Bills of Materials
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件材料清单
- en: Creating a software bill of materials (SBOM) for a container image is easy with
    tools like [syft](https://oreil.ly/Z7j5T), which supports APK, DEB, RPM, Ruby
    Bundles, Python Wheel/Egg/requirements.txt, JavaScript NPM/Yarn, Java JAR/EAR/WAR,
    Jenkins plugi-ns JPI/HPI, and Go modules.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工具如[syft](https://oreil.ly/Z7j5T)为容器镜像创建软件清单（SBOM）非常简单，它支持APK、DEB、RPM、Ruby
    Bundles、Python Wheel/Egg/requirements.txt、JavaScript NPM/Yarn、Java JAR/EAR/WAR、Jenkins插件JPI/HPI以及Go模块。
- en: 'It can generate output in the [CycloneDX](https://cyclonedx.org) XM format.
    Here it is running on a container with a single static binary:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以生成[CycloneDX](https://cyclonedx.org) XM格式的输出。这里是在一个具有单个静态二进制文件的容器上运行：
- en: '[PRE4]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_applications_and_supply_chain_CO3-1)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_applications_and_supply_chain_CO3-1)'
- en: The vendor of the tool used to create the SBOM.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建SBOM的工具的供应商。
- en: '[![2](Images/2.png)](#co_applications_and_supply_chain_CO3-2)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_applications_and_supply_chain_CO3-2)'
- en: The tool that’s created the SBOM.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 创建SBOM的工具。
- en: '[![3](Images/3.png)](#co_applications_and_supply_chain_CO3-3)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_applications_and_supply_chain_CO3-3)'
- en: The tool version.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 工具版本。
- en: '[![4](Images/4.png)](#co_applications_and_supply_chain_CO3-4)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_applications_and_supply_chain_CO3-4)'
- en: The supply chain component being scanned and its type of container.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 正在扫描的供应链组件及其容器类型。
- en: '[![5](Images/5.png)](#co_applications_and_supply_chain_CO3-5)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_applications_and_supply_chain_CO3-5)'
- en: The container’s name.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的名称。
- en: '[![6](Images/6.png)](#co_applications_and_supply_chain_CO3-6)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_applications_and_supply_chain_CO3-6)'
- en: The container’s version, a SHA256 content hash, or digest.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的版本，SHA256内容哈希或摘要。
- en: 'A bill of materials is just a packing list for your software artifacts. Running
    against the `alpine:base` image, we see an SBOM with software licenses (output
    edited to fit):'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 材料清单只是软件工件的包装清单。针对`alpine:base`镜像运行，我们看到一个带有软件许可证的SBOM（输出已编辑以适应）：
- en: '[PRE5]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These verifiable artifacts can be signed by supply chain security tools like
    `cosign`, `in-toto`, and `notary`. When consumers demand that suppliers produce
    verifiable artifacts and bills of materials from their own audited, compliant,
    and secure software factories, the supply chain will become harder to compromise
    for the casual attacker.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可验证的工件可以由供应链安全工具（如`cosign`，`in-toto`和`notary`）签名。当消费者要求供应商从其经过审计、符合要求且安全的软件工厂产生可验证的工件和材料清单时，供应链将变得更难以被一般攻击者破坏。
- en: Warning
  id: totrans-294
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: An attack on source code prior to building an artifact or generating an SBOM
    from it is still trusted, even if it is actually malicious, as with SUNBURST.
    This is why the build infrastructure must be secured.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建工件或从中生成SBOM之前对源代码进行攻击，即使实际上是恶意的（如SUNBURST），仍然是受信任的。这就是为什么必须保护构建基础设施的原因。
- en: Human Identity and GPG
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人类身份和GPG
- en: Signing Git commits with GNU Privacy Guard (GPG) signatures identifies the owner
    of they key as having trusted the commit at the time of signature. This is useful
    to increase trust, but requires public key infrastructure (PKI), which is notoriously
    difficult to secure entirely.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GNU隐私卫士（GPG）签名对Git提交进行签名可以确认该密钥的所有者在签名时信任该提交。这有助于增加信任，但需要公钥基础设施（PKI），这在完全保护方面是极其困难的。
- en: Signing data is easy—the verification is hard.
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 签署数据很容易——验证则很难。
- en: ''
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dan Lorenc
  id: totrans-300
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Dan Lorenc
- en: The problem with PKI is the risk of breach of the PKI infrastructure. Somebody
    is always responsible for ensuring the public key infrastructure (the servers
    that host individuals’ trusted public keys) is not compromised and is reporting
    correct data. If PKI is compromised, an entire organization may be exploited as
    attackers add keys they control to trusted users.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: PKI的问题在于PKI基础设施可能会遭受风险。总有人负责确保公钥基础设施（托管个人受信任公钥的服务器）未被破坏且正在报告正确数据。如果PKI遭到破坏，整个组织可能会受到攻击，因为攻击者可以向他们控制的密钥添加到受信任用户中。
- en: Signing Builds and Metadata
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 签名构建和元数据
- en: In order to trust the output of your build infrastructure, you need to sign
    it so consumers can verify that it came from you. Signing metadata like SBOMs
    also allows consumers to detect vulnerabilities where the code is deployed in
    their systems. The following tools help by signing your artifacts, containers,
    or metadata.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 为了信任您的构建基础设施的输出，您需要对其进行签名，以便消费者可以验证它来自您。签署元数据如SBOM还允许消费者在其系统中部署代码时检测漏洞。以下工具通过签署您的工件、容器或元数据来帮助您。
- en: Notary v1
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Notary v1
- en: Notary is the signing system built into Docker, and implements The Update Framework
    (TUF). It’s used for shipping software updates, but wasn’t enabled in Kubernetes
    as it requires all images to be signed, or it won’t run them. [portieris](https://oreil.ly/beFeG)
    implements Notary as an admission controller for Kubernetes instead.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Notary是内建到Docker中的签名系统，实现了更新框架（TUF）。它用于运送软件更新，但在Kubernetes中未启用，因为它要求所有镜像都必须签名，否则将不运行它们。[portieris](https://oreil.ly/beFeG)则作为Kubernetes的准入控制器实现了Notary。
- en: '[Notary v2](https://oreil.ly/ZfhGk) supports creating multiple signatures for
    OCI Artifacts and storing them in OCI image registries.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[Notary v2](https://oreil.ly/ZfhGk)支持为OCI Artifacts创建多个签名，并将它们存储在OCI镜像仓库中。'
- en: sigstore
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sigstore
- en: sigstore is a public software signing and transparency service, which can sign
    containers with [cosign](https://oreil.ly/0mtGF) and store the signatures in an
    OCI repository, something missing from Notary v1\. As anything can be stored in
    a container (e.g., binaries, tarballs, scripts, or configuration files), `cosign`
    is a general artifact signing tool with OCI as its packaging format.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: sigstore 是一个公共软件签名和透明服务，可以使用 [cosign](https://oreil.ly/0mtGF) 签署容器，并将签名存储在 OCI
    仓库中，这是 Notary v1 缺失的功能。由于容器可以存储任何内容（例如二进制文件、tarball、脚本或配置文件），`cosign` 是一种以 OCI
    为打包格式的通用工件签名工具。
- en: '`sigstore` provides free certificates and tooling to automate and verify signatures
    of source code.'
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sigstore` 提供免费证书和工具来自动化和验证源代码的签名。'
- en: ''
  id: totrans-310
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[sigstore release announcement](https://oreil.ly/rQEeS)'
  id: totrans-311
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[sigstore 发布公告](https://oreil.ly/rQEeS)'
- en: Similar to Certificate Transparency, it has an append-only cryptographic ledger
    of events (called [rekor](https://oreil.ly/hkMGk)), and each event has signed
    metadata about a software release as shown in [Figure 4-7](#suppy-chain-sigstore).
    Finally, it supports “a free Root-CA for code signing certs, that is, issuing
    certificates based on an OIDC email address” in [fulcio](https://oreil.ly/lS8WB).
    Together, these tools dramatically improve the capabilities of the supply chain
    security landscape.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 与证书透明性类似，它有一个事件的追加式密码学分类账（称为 [rekor](https://oreil.ly/hkMGk)），每个事件都有关于软件发布的签名元数据，如
    [图 4-7](#suppy-chain-sigstore) 所示。最后，在 [fulcio](https://oreil.ly/lS8WB) 中支持“用于代码签名证书的免费根CA，即基于
    OIDC 电子邮件地址颁发证书”。这些工具共同显著改进了供应链安全领域的能力。
- en: It is designed for open source software, and is under rapid development. There
    are integrations for TUF and in-toto, hardware-based tokens are supported, and
    it’s compatible with most OCI registries.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 它专为开源软件设计，并处于快速开发中。支持 TUF 和 in-toto 的集成，支持基于硬件的令牌，与大多数 OCI 仓库兼容。
- en: '`sigstore`’s cosign is used to [sign the Distroless base image family](https://oreil.ly/28hQ9).'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`sigstore` 的 cosign 用于 [签署 Distroless 基础镜像系列](https://oreil.ly/28hQ9)。'
- en: '![Storing sigstore manifests in the sigstore manifests into the rekor transparency
    log](Images/haku_0407.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![将 sigstore 清单存储到 rekor 透明日志中](Images/haku_0407.png)'
- en: Figure 4-7\. Storing sigstore manifests in the rekor transparency log
  id: totrans-316
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7\. 将 sigstore 清单存储在 rekor 透明日志中
- en: in-toto and TUF
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**in-toto 和 TUF**'
- en: The [in-toto toolchain](https://in-toto.io) checksums and signs software builds—the
    steps and output of CI/CD pipelines. This provides transparent metadata about
    software build processes. This increases the trust a consumer has that an artifact
    was built from a specific source code revision.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[in-toto 工具链](https://in-toto.io) 对软件构建进行校验和签名——CI/CD 管道的步骤和输出。这提供了关于软件构建过程的透明元数据。这增加了消费者对于一个构件是否来自特定源代码修订版的信任。'
- en: in-toto link metadata (describing transitions between build stages and signing
    metadata about them) can be stored by tools like rekor and Grafeas, to be validated
    by consumers at time of use.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: in-toto 链接元数据（描述构建阶段之间的转换以及有关签名的元数据）可以被 rekor 和 Grafeas 等工具存储，并在使用时由消费者进行验证。
- en: The in-toto signature ensures that a trusted party (e.g., the build server)
    has built and signed these objects. However, there is no guarantee that the third
    party’s keys have not been compromised—the only solution for this is to run parallel,
    isolated build environments and cross-check the cryptographic signatures. This
    is done with reproducible builds (in Debian, Arch Linux, and PyPi) to offer resilience
    to build tool compromise.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: in-toto 签名确保可信任方（例如构建服务器）已构建并签署了这些对象。然而，并不能保证第三方的密钥未被 compromise——唯一的解决方案是运行并行的隔离构建环境，并交叉检查加密签名。这通过可重现的构建（在
    Debian、Arch Linux 和 PyPi 中）提供对构建工具被攻击的弹性。
- en: This is only possible if the CI and builds themselves are deterministic (no
    side effects of the build) and reproducible (the same artifacts are created by
    the source code). Relying on temporal or stochastic behaviors (time and randomness)
    will yield unreproducible binaries, as they are affected by timestamps in logfiles,
    or random seeds that affect compilation.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅在 CI 和构建本身是确定性的（构建没有副作用）和可复制的情况下才可能实现（源代码创建相同的工件）。依赖时间或随机行为（时间和随机性）将导致不可重现的二进制文件，因为它们受日志文件中的时间戳或影响编译的随机种子的影响。
- en: When using in-toto, an organization increases trust in their pipelines and artifacts,
    as there are verifiable signatures for everything. However, without an objective
    threat model or security assessment of the original build infrastructure, this
    doesn’t protect supply chains with a single build server that may have been compromised.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 in-toto 时，组织会增加对其流水线和工件的信任，因为一切都有可验证的签名。然而，如果没有对原始构建基础设施进行客观的威胁模型或安全评估，则无法保护可能已被
    compromise 的单个构建服务器的供应链。
- en: Producers using in-toto with consumers that verfiy signatures makes an attacker’s
    life harder. They must fully compromise the signing infrastructure (as with SolarWinds).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 in-toto 的生产者与验证签名的消费者使攻击者的生活更加困难。他们必须完全 compromise 签名基础设施（如 SolarWinds）。
- en: GCP Binary Authorization
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GCP 二进制授权
- en: The GCP Binary Authorization feature allows signing of images and admission
    control to prevent unsigned, out of date, or vulnerable images from reaching production.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 二进制授权功能允许签署图像并采用入场控制，以防止未签名、过时或有漏洞的图像进入生产环境。
- en: 'Validating expected signatures at runtime provides enforcement of pipeline
    controls: is this image free from known vulnerabilities, or has a list of “accepted”
    vulnerabilities? Did it pass the automated acceptance tests in the pipeline? Did
    it come from the build pipeline at all?'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时验证预期签名提供了管道控制的执行：此图像是否没有已知漏洞，或者是否具有“接受”漏洞列表？它是否通过了管道中的自动接受测试？它是否来自构建管道？
- en: Grafeas is used to store metadata from image scanning reports, and Kritis is
    an admission controller that verifies signatures and the absence of CVEs against
    the images.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Grafeas 用于存储来自图像扫描报告的元数据，而 Kritis 是一个验证控制器，用于验证图像的签名和 CVEs 的缺失。
- en: Grafeas
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Grafeas
- en: Grafeas is a metadata store for pipeline metadata like vulnerability scans and
    test reports. Information about a container is recorded against its digest, which
    can be used to report on vulnerabilities of an organization’s images and ensure
    that build stages have successfully passed. Grafeas can also store in-toto link
    metadata.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Grafeas 是用于管道元数据的元数据存储，例如漏洞扫描和测试报告。容器的信息记录在其摘要中，可用于报告组织图像的漏洞，并确保构建阶段已成功通过。Grafeas
    还可以存储 in-toto 链接元数据。
- en: Infrastructure Supply Chain
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施供应链
- en: It’s also worth considering your operating system base image, and the location
    your Kubernetes control plane containers and packages are installed from.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得考虑您的操作系统基础镜像，以及 Kubernetes 控制平面容器和软件包的安装位置。
- en: Some distributions have historically modified and repackaged Kubernetes, and
    this introduces further supply chain risk of malicious code injection. Decide
    how you’ll handle this based upon your initial threat model, and architect systems
    and networks for compromise resilience.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发行版历史上修改和重新打包 Kubernetes，这增加了恶意代码注入的供应链风险。根据您的初始威胁模型决定如何处理，并为妥协弹性建立系统和网络架构。
- en: Operator Privileges
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符权限
- en: Kubernetes Operators are designed to reduce human error by automating Kubernetes
    configuration, and reactive to events. They interact with Kubernetes and whatever
    other resources are under the operator’s control. Those resources may be in a
    single namespace, multiple namespaces, or outside of Kubernetes. This means they
    are often highly privileged to enable this complex automation, and so bring a
    level of risk.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Operator 旨在通过自动化 Kubernetes 配置来减少人为错误，并对事件做出反应。它们与 Kubernetes 和 Operator
    控制下的其他资源交互。这些资源可能位于单个命名空间、多个命名空间或 Kubernetes 之外。这意味着它们通常具有高度特权，以启用这种复杂的自动化，从而带来一定的风险。
- en: An Operator-based supply chain attack might allow Captain Hashjack to discreetly
    deploy their malicious workloads by misusing RBAC, and a rogue resource could
    go completely undetected. While this attack is not yet widely seen, it has the
    potential to compromise a great number of clusters.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符基础的供应链攻击可能允许哈什杰克船长通过滥用RBAC悄悄部署他们的恶意工作负载，并且一个恶意资源可能完全不被检测到。尽管这种攻击目前并不普遍，但它有潜力
    compromise 大量 cluster。
- en: 'You must appraise and security-test third-party Operators before trusting them:
    write tests for their RBAC permissions so you are alerted if they change, and
    ensure an Operator’s `securityContext` configuration is suitable for the workload.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在信任第三方 Operator 之前，必须评估和进行安全测试：编写测试以检查其 RBAC 权限是否更改，并确保 Operator 的 `securityContext`
    配置适用于工作负载。
- en: Attacking Higher Up the Supply Chain
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击供应链的更高层次
- en: To attack BCTL, Captain Hashjack may consider attacking the organizations that
    supply its software, such as operating systems, vendors, and open source packages.
    Your open source libraries may also have vulnerabilities, the most devastating
    of which has historically been an Apache Struts RCE, CVE-2017-5638.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 要攻击 BCTL，Hashjack船长可能会考虑攻击供应其软件的组织，如操作系统、供应商和开源软件包。您的开源库也可能存在漏洞，其中历史上最具破坏力的是
    Apache Struts RCE，CVE-2017-5638。
- en: Trusted open source libraries may have been “backdoored” (such as NPM’s [`event-stream`
    package](https://oreil.ly/7ZRj5)) or may be removed from the registry while in
    active use, such as [`left-pad`](https://oreil.ly/mMv29) (although registries
    now look to avoid this by preventing “unpublishing” packages).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 受信任的开源库可能已被“后门”（例如 NPM 的[`event-stream`软件包](https://oreil.ly/7ZRj5)）或在使用过程中被从注册表中移除，例如[`left-pad`](https://oreil.ly/mMv29)（尽管注册表现在试图通过阻止“取消发布”软件包来避免这种情况）。
- en: Note
  id: totrans-340
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: CVE-2017-5638 affected Apache Struts, a Java web framework.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: CVE-2017-5638 影响了 Apache Struts，一个 Java Web 框架。
- en: The server didn’t parse `Content-Type` HTTP headers correctly, which [allowed
    any commands](https://oreil.ly/aZfEL) to be executed in the process namespace
    as the web server’s user.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器未正确解析`Content-Type` HTTP 头，这[允许执行任何命令](https://oreil.ly/aZfEL)在进程命名空间中作为
    Web 服务器用户执行。
- en: Struts 2 has a history of critical security bugs,[3] many tied to its use of
    OGNL technology;[4] some vulnerabilities can lead to arbitrary code execution.
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Struts 2存在许多关键安全漏洞的历史，其中许多与其使用的OGNL技术有关；一些漏洞可能导致任意代码执行。
- en: ''
  id: totrans-344
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Wikipedia](https://oreil.ly/t6Cfe)'
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[维基百科](https://oreil.ly/t6Cfe)'
- en: Code distributed by vendors can be compromised, as [Codecov was](https://oreil.ly/9SHDZ).
    An error in its container image creation process allowed an attacker to modify
    a Bash uploader script run by customers to start builds. This attack compromised
    build Secrets that may then have been used against other systems.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商分发的代码可能会受到损害，就像[Codecov](https://oreil.ly/9SHDZ)一样。其容器镜像创建过程中的错误允许攻击者修改由客户运行的
    Bash 上传器脚本以启动构建。此攻击可能会危及构建秘钥，然后可能被用于攻击其他系统。
- en: Tip
  id: totrans-347
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The number of organizations using Codecov was significant. [Searching for Git
    repos with grep.app](https://oreil.ly/kDBdD) showed there were over 9,200 results
    in the top 500,000 public Git repos. [GitHub](https://oreil.ly/GLP8D) shows 397,518
    code results at the time of this writing.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Codecov的组织数量相当可观。[使用 grep.app 搜索 Git 仓库](https://oreil.ly/kDBdD)显示在前 500,000
    个公共 Git 仓库中有超过 9,200 个结果。[GitHub](https://oreil.ly/GLP8D)在撰写本文时显示有 397,518 个代码结果。
- en: Poorly written code that fails to handle untrusted user input or internal errors
    may have remotely exploitable vulnerabilities. Application security is responsible
    for preventing this easy access to your systems.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 编写不良的代码未能处理不受信任的用户输入或内部错误可能存在远程可利用的漏洞。应用程序安全负责防止对系统的轻松访问。
- en: 'The industry-recognised moniker for this is “shift left,” which means you should
    run static and dynamic analysis of the code your developers write as they write
    it: add automated tooling to the IDE, provide a local security testing workflow,
    run configuration tests before deployment, and generally don’t leave security
    considerations to the last possible moment as has been traditional in software.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 行业公认的术语是“向左转”，这意味着您应该在开发人员编写代码时运行静态和动态分析：在集成开发环境中添加自动化工具，提供本地安全测试工作流程，在部署前运行配置测试，并且通常不要像传统软件那样将安全考虑留到最后可能的时刻。
- en: Types of Supply Chain Attack
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应链攻击的类型
- en: TAG Security’s [Catalog of Supply Chain Compromises](https://oreil.ly/zwxo9)
    lists attacks affecting packages with millions of weekly downloads across various
    application dependency repositories and vendors, and hundreds of millions of total
    installations.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: TAG Security的[供应链妥协目录](https://oreil.ly/zwxo9)列出了影响各种应用程序依赖库和供应商的每周数百万次下载的软件包的攻击，以及数亿次总安装量。
- en: The combined downloads, including both benign and malicious versions, for the
    most popular malicious packages (`event-stream`—190 million, `eslint-scope`—442
    million, `bootstrap-sass`—30 million, and `rest-client`—114 million) sum to 776
    million.
  id: totrans-353
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最受欢迎的恶意软件包（`event-stream`—1.9 亿次下载，`eslint-scope`—4.42 亿次下载，`bootstrap-sass`—3
    千万次下载，`rest-client`—1.14 亿次下载）的下载总数为 7.76 亿次，包括良性和恶意版本。
- en: ''
  id: totrans-354
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[“Towards Measuring Supply Chain Attacks on Package Managers for Interpreted
    Languages”](https://oreil.ly/uHWBT)'
  id: totrans-355
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[“针对解释性语言包管理器的供应链攻击测量方法”](https://oreil.ly/uHWBT)'
- en: 'In the quoted paper, the authors identify four actors in the open source supply
    chain:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在引用的论文中，作者确定了开源供应链中的四个角色：
- en: Registry Maintainers (RMs)
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Registry Maintainers（RM）
- en: Package Maintainers (PMs)
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件包维护者（PM）
- en: Developers (Devs)
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者（Devs）
- en: End-users (Users)
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终用户（Users）
- en: Those with consumers have a responsibility to verify the code they pass to their
    customers, and a duty to provide verifiable metadata to build confidence in the
    artifacts.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 有消费者的人有责任验证他们传递给客户的代码，并有责任提供可验证的元数据，以增强工件的信任。
- en: 'There’s a lot to defend from to ensure that Users receive a trusted artifact
    ([Table 4-4](#table-attack-public-infra)):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多需要防范的地方，以确保用户获得可信任的工件（[表 4-4](#table-attack-public-infra)）：
- en: Source code
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码
- en: Publishing infrastructure
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布基础设施
- en: Dev tooling
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发工具
- en: Malicious maintainer
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意维护者
- en: Negligence
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 疏忽
- en: Fake toolchain
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假工具链
- en: Watering-hole attack
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水坑攻击
- en: Multiple steps
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个步骤
- en: 'Registry maintainers should guard publishing infrastructure from typosquatters:
    individuals that register a package that looks similar to a widely deployed package.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表维护者应该保护发布基础设施免受Typosquatter的影响：即注册了一个看起来与广泛部署的软件包类似的个人。
- en: Table 4-4\. Examples of attacking publishing infrastructure
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-4\. 攻击发布基础设施的示例
- en: '| Attack | Package name | Typosquatted name |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| 攻击 | 软件包名称 | Typosquatted名称 |'
- en: '| --- | --- | --- |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Typosquatting | event-stream | eventstream |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| Typosquatting（错别字域名滥用） | event-stream | eventstream |'
- en: '| Different account | user/package | usr/package, user_/package |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| 不同的账号 | 用户/软件包 | usr/软件包，user_/软件包 |'
- en: '| Combosquatting | package | package-2, package-ng |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| Combosquatting（组合域名滥用） | 软件包 | 软件包-2，软件包-ng |'
- en: '| Account takeover | user/package | user/package—no change as the user has
    been compromised by to the attacker |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| 帐号接管 | 用户/软件包 | 用户/软件包-因为攻击者已经通过攻击获取了用户的访问权限 |'
- en: '| Social engineering | user/package | user/package—no change as the user has
    willingly given repository access to the attacker |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| 社会工程学 | 用户/软件包 | 用户/软件包-因为用户自愿将存储库访问权限授予攻击者 |'
- en: As [Figure 4-8](#app-trust-supply-chain-paper) demonstrates, the supply chain
    of a package manager holds many risks.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 4-8](#app-trust-supply-chain-paper)所示，包管理器的供应链包含许多风险。
- en: '![Simplified relationships of stakeholders and threats in the package manager
    ecosystem](Images/haku_0408.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![包管理器生态系统中各利益相关者和威胁的简化关系](Images/haku_0408.png)'
- en: 'Figure 4-8\. Simplified relationships of stakeholders and threats in the package
    manager ecosystem (source: [“Towards Measuring Supply Chain Attacks on Package
    Managers for Interpreted Languages”](https://oreil.ly/uHWBT))'
  id: totrans-382
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-8\. 包管理器生态系统中各利益相关者和威胁的简化关系（来源：[“Towards Measuring Supply Chain Attacks
    on Package Managers for Interpreted Languages”](https://oreil.ly/uHWBT)）
- en: Open Source Ingestion
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源摄入
- en: This attention to detail may become exhausting when applied to every package
    and quickly becomes impractical at scale. This is where a web of trust between
    producers and consumers alleviates some of the burden of double-checking the proofs
    at every link in the chain. However, nothing can be fully trusted, and regular
    reverification of code is necessary to account for newly announced CVEs or zero-days.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个软件包上都要进行这种细致的注意可能会变得很疲惫，并且在规模化应用时很快变得不切实际。这就是生产者和消费者之间的信任网络能够减轻在链条中每个环节都双重检查的负担的地方。然而，没有什么是完全可信的，定期重新验证代码以应对新公布的CVE或零日漏洞是必要的。
- en: In “Towards Measuring Supply Chain Attacks on Package Managers for Interpreted
    Languages”, the authors identify relevant issues as listed in [Table 4-5](#table-oss-ingestion).
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在“面向测量解释语言包管理器上的供应链攻击”的论文中，作者列出了如[表 4-5](#table-oss-ingestion)所示的相关问题。
- en: Table 4-5\. Heuristic rules derived from existing supply chain attacks and other
    malware studies
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-5\. 源自现有供应链攻击和其他恶意软件研究的启发式规则
- en: '| Type | Description |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Metadata | The package name is similar to popular ones in the same registry.The
    package name is the same as popular packages in other registries, but the authors
    are different.The package depends on or shares authors with known malware.The
    package has older versions released around the time as known malware.The package
    contains Windows PE files or Linux ELF files. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| 元数据 | 软件包名称与同一注册表中的流行软件包相似。软件包名称与其他注册表中的流行软件包相同，但作者不同。软件包依赖于或与已知恶意软件共享作者。该软件包在已知恶意软件发布的时间周围有较早版本。软件包包含Windows
    PE文件或Linux ELF文件。 |'
- en: '| Static | The package has customized installation logic.The package adds network,
    process, or code generation APIs in recently released versions.The package has
    flows from filesystem sources to network sinks.The package has flows from network
    sources to code generation or process sinks. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| 静态 | 该软件包具有定制的安装逻辑。该软件包在最近发布的版本中添加了网络、进程或代码生成API。该软件包从文件系统源流向网络汇。该软件包从网络源流向代码生成或进程汇。'
- en: '| Dynamic | The package contacts unexpected IPs or domains, where expected
    ones are official registries and code hosting services.The package reads from
    sensitive file locations such as */etc/shadow, /home/<user>/.ssh, /home/<user>/.aws*.The
    package writes to sensitive file locations such as */usr/bin, /etc/sudoers, /home/<user>/.ssh/authorized_keys*.The
    package spawns unexpected processes, where expected ones are initialized to registry
    clients (e.g., pip). |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| 动态 | 该软件包联系到意外的IP或域，而预期的应该是官方注册表和代码托管服务。该软件包从敏感文件位置读取，如*/etc/shadow，/home/<user>/.ssh，/home/<user>/.aws*。该软件包写入敏感文件位置，如*/usr/bin，/etc/sudoers，/home/<user>/.ssh/authorized_keys*。该软件包生成意外的进程，而预期的是初始化为注册表客户端（例如pip）。'
- en: 'The paper summarises that:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 本文总结：
- en: Typosquatting and account compromise are low-cost to an attacker, and are the
    most widely exploited attack vectors.
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typosquatting和账户被攻击是对攻击者成本较低的攻击向量，并且是最广泛利用的攻击向量。
- en: Stealing data and dropping backdoors are the most common malicious post-exploit
    behaviors, suggesting wide consumer targeting.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据窃取和插入后门是最常见的恶意后渗透行为，表明面向广泛消费者的目标。
- en: 20% of identified malwares have persisted in package managers for over 400 days
    and have more than 1K downloads.
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20%的已识别恶意软件在包管理器中持续存在超过400天，并且有超过1K次下载。
- en: New techniques include code obfuscation, multistage payloads, and logic bombs
    to evade detection.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新技术包括代码混淆、多阶段载荷和逻辑炸弹，以逃避检测。
- en: Additionally, packages with lower numbers of installations are unlikely to act
    quickly on a reported compromise as [Figure 4-9](#app-attacks-persistence-supply-chain)
    demonstrates. It could be that the developers are not paid to support these open
    source packages. Creating incentives for these maintainers with well-written patches
    and timely assistance merging them, or financial support for handling reports
    from a bug bounty program, are effective ways to decrease vulnerabilities in popular
    but rarely maintained packages.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安装量较低的软件包不太可能迅速响应报告的妥协，如图[4-9](#app-attacks-persistence-supply-chain)所示。可能是因为开发人员没有为支持这些开源软件包而获得报酬。通过撰写良好的补丁并及时提供协助合并它们，或者通过处理来自漏洞赏金计划的报告来提供财务支持，是减少流行但很少维护的软件包中漏洞的有效方法。
- en: '![haku 0409](Images/haku_0409.png)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![haku 0409](Images/haku_0409.png)'
- en: 'Figure 4-9\. Correlation between number of persistence days and number of downloads
    (R&R = Reported and Removed; R&I = Reported and Investigating) (source: [“Towards
    Measuring Supply Chain Attacks on Package Managers for Interpreted Languages”](https://oreil.ly/0aNss))'
  id: totrans-399
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-9\. 持续天数与下载次数之间的相关性（R&R = 报告和移除；R&I = 报告和调查）（来源：[“Towards Measuring Supply
    Chain Attacks on Package Managers for Interpreted Languages”](https://oreil.ly/0aNss)）
- en: Application Vulnerability Throughout the SDLC
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序漏洞贯穿SDLC
- en: The Software Development Lifecycle (SDLC) is an application’s journey from a
    glint in a developer’s eye, to its secure build and deployment on production systems.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发生命周期（SDLC）是应用程序从开发者的构想到其在生产系统上安全构建和部署的旅程。
- en: As applications progress from development to production they have a varying
    risk profile, as shown [Table 4-6](#app-dep-vuln-order).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序从开发到生产的过程，它们的风险概况不断变化，如表[4-6](#app-dep-vuln-order)所示。
- en: Table 4-6\. Application vulnerabilities throughout the SDLC
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 表4-6\. SDLC期间应用程序漏洞
- en: '| System lifecycle stage | Higher risk | Lower risk |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| 系统生命周期阶段 | 高风险 | 低风险 |'
- en: '| --- | --- | --- |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Development to production deployment | Application code (changes frequently)
    | Application libraries, operating system packages |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| 开发到生产部署 | 应用代码（频繁变化） | 应用程序库，操作系统包 |'
- en: '| Established production deployment to decommissioning | Slowly decaying application
    libraries and operating system packages | Application code (changes less frequently)
    |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| 建立的生产部署到退役 | 慢慢衰退的应用程序库和操作系统包 | 应用代码（变化较少） |'
- en: 'The risk profile of an application running in production changes as its lifespan
    lengthens, as its software becomes progressively more out-of-date. This is known
    as “reverse uptime”—the correlation between risk of an application’s compromise
    and the time since its deployment (e.g., the date of the container’s build). An
    average of reverse uptime in an organization could also be considered “mean time
    to …”:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中运行的应用程序的风险配置随其生命周期的延长而变化，随着其软件逐渐过时。这被称为“反运行时间”—应用程序威胁与其部署后的时间相关性（例如，容器构建的日期）。组织中的反运行时间平均值也可以被认为是“平均时间到……”：
- en: Compromise (application has a remotely exploitable vulnerability)
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受损（应用存在远程可利用漏洞）
- en: Failure (application no longer works with the updated system or external APIs)
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败（应用程序不再与更新的系统或外部API兼容）
- en: Update (change application code)
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新（更改应用程序代码）
- en: Patch (to update dependencies versions explicitly)
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补丁（明确更新依赖版本）
- en: Rebuild (to pull new server dependencies)
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重建（以获取新的服务器依赖项）
- en: Defending Against SUNBURST
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防范SUNBURST攻击
- en: So would the techniques in this chapter save you from a SUNBURST-like attack?
    Let’s look at how it worked.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这一章节中的技术能够使您免受类似SUNBURST的攻击吗？让我们看看它是如何起作用的。
- en: The attackers gained access to the SolarWinds systems on 4th September 2019
    ([Figure 4-10](#sunspot-timeline)). This might have happened perhaps through a
    spear-phishing email attack that allowed further escalation into SolarWind’s systems
    or through some software misconfiguration they found in build infrastructure or
    internet-facing servers.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者于2019年9月4日进入SolarWinds系统（参见[图4-10](#sunspot-timeline)）。这可能是通过一次鱼叉式网络钓鱼电子邮件攻击进行的，允许进一步升级到SolarWind的系统，或者通过他们在构建基础设施或互联网面向服务器中发现的某些软件配置错误进行的。
- en: '![haku 0410](Images/haku_0410.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![haku 0410](Images/haku_0410.png)'
- en: Figure 4-10\. SUNSPOT timeline
  id: totrans-418
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-10\. SUNSPOT时间线
- en: The threat actors stayed hidden for a week, then started testing the SUNSPOT
    injection code that would eventually compromise the SolarWinds product. This phase
    progressed quietly for two months.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁行动者隐藏了一个星期，然后开始测试SUNSPOT注入代码，最终会威胁到SolarWinds产品。这一阶段在两个月内悄无声息地进行。
- en: Internal detection may have discovered the attackers here, however build infrastructure
    is rarely subjected to the same level of security scrutiny, intrusion detection,
    and monitoring as production systems. This is despite it delivering code to production
    or customers. This is something we can address using our more granular security
    controls around containers. Of course, a backdoor straight into a host system
    remains difficult to detect unless intrusion detection is running on the host,
    which may be noisy on shared build nodes that necessarily run many jobs for its
    consumers.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 内部检测可能在这里发现了攻击者，但构建基础设施很少接受与生产系统相同级别的安全审查、入侵检测和监控。尽管它将代码交付给生产或客户，但我们可以通过更精细的安全控制围绕容器来解决这个问题。当然，直接进入主机系统的后门仍然难以检测，除非主机上运行入侵检测，但这可能在共享构建节点上运行许多任务以服务其消费者时会产生噪音。
- en: Almost six months after the initial compromise of the build infrastructure,
    the SUNSPOT malware was deployed. A month later, the infamous SolarWinds Hotfix
    5 DLL containing the malicious implant was made available to customers, and once
    the threat actor confirmed that customers were infected, it removed its malware
    from the build VMs.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建基础设施最初受损的近六个月后，SUNSPOT恶意软件被部署。一个月后，包含恶意植入物的臭名昭著的SolarWinds Hotfix 5 DLL提供给客户，一旦威胁行动者确认客户被感染，便从构建VM中移除了其恶意软件。
- en: It was a further six months before the customer infections were identified.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户感染被确认之前又过了六个月。
- en: This SUNSPOT malware changed source code immediately before it was compiled
    and immediately back to its original form afterwards, as shown in [Figure 4-11](#sunspot-malware).
    This required observing the filesystem and changing its contents.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 此SUNSPOT恶意软件在编译之前立即更改源代码，之后立即恢复其原始形式，如[图4-11](#sunspot-malware)所示。这需要观察文件系统并更改其内容。
- en: '![SUNSPOT Malware](Images/haku_0411.png)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![SUNSPOT恶意软件](Images/haku_0411.png)'
- en: Figure 4-11\. SUNSPOT malware
  id: totrans-425
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-11\. SUNSPOT恶意软件
- en: A build-stage signing tool that verifies its inputs and outputs (as in-toto
    does) then invokes a subprocess to perform a build step may be immune to this
    variant of the attack, although it may turn security into a race condition between
    the in-toto hash function and the malware that modifies the filesystem.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 一个构建阶段签名工具，它验证其输入和输出（正如in-toto所做的那样），然后调用子进程执行构建步骤，可能对这种变体的攻击免疫，尽管它可能将安全性转变为in-toto散列函数和修改文件系统的恶意软件之间的竞争条件。
- en: 'Bear in mind that if an attacker has control of your build environment, they
    can potentially modify any files in it. Although this is bad, they cannot regenerate
    signatures made outside the build: this is why your cryptographically signed artifacts
    are safer than unsigned binary blobs or Git code. Tampering of signed or checksummed
    artifacts can be detected because attackers are unlikely to have the private keys
    to, for example, sign tampered data.'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果攻击者控制您的构建环境，他们可能潜在地修改其中的任何文件。尽管这很糟糕，但他们无法重生成在构建之外进行签名的文件：这就是为什么您的使用加密签名的工件比未签名的二进制数据块或Git代码更安全。可以检测到对已签名或已校验和的工件的篡改，因为攻击者不太可能拥有例如签署篡改数据的私钥。
- en: 'SUNSPOT changed the files that were about to be compiled. In a container build,
    the same problem exists: the local filesystem must be trusted. Signing the inputs
    and validating outputs goes some way to mitigating this attack, but a motivated
    attacker with full control of a build system may be impossible to disambiguate
    from build activity.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: SUNSPOT更改了即将编译的文件。在容器构建中，同样存在这个问题：本地文件系统必须是受信任的。签署输入并验证输出在减轻此类攻击方面有所帮助，但一个有动机的攻击者完全控制构建系统可能不可能与构建活动区分开来。
- en: 'It may not be possible to entirely protect a build system without a complete
    implementation of all supply chain security recommendations. Your organization’s
    ultimate risk appetite should be used to determine how much effort you wish to
    expend protecting this vital, vulnerable part of your system: for example, critical
    infrastructure projects may wish to fully audit the hardware and software they
    receive, root chains of trust in hardware modules wherever possible, and strictly
    regulate the employees permitted to interact with build systems. For most organizations,
    this will be deeply impractical.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有完全实施所有供应链安全建议，可能无法完全保护构建系统。您的组织的最终风险承受能力应确定您希望为保护系统的这一关键而脆弱的部分投入多少努力：例如，关键基础设施项目可能希望完全审计其收到的硬件和软件，尽可能在硬件模块中建立信任链，并严格规范允许与构建系统交互的员工。对于大多数组织而言，这将是极其不切实际的。
- en: Tip
  id: totrans-430
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '[Nixpkgs](https://oreil.ly/nojb6) (utilized in NixOS) [bootstraps deterministically](https://oreil.ly/Rd1WB)
    from a small collection of tools. This is perhaps the ultimate in reproducible
    builds, with some useful security side effects; it allows end-to-end trust and
    reproducibility for all images built from it.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[Nixpkgs](https://oreil.ly/nojb6)（在NixOS中使用）从一小组工具中启动，具有确定性。这也许是可再现构建的终极范例，带有一些有用的安全副作用；它允许端到端的信任和所有构建图像的可重现性。'
- en: '[Trustix](https://oreil.ly/flKAf), another Nix project, compares build outputs
    against a Merkle tree log across multiple untrusted build servers to determine
    if a build has been compromised.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[Trustix](https://oreil.ly/flKAf)，另一个Nix项目，比较多个不受信任的构建服务器上的Merkle树日志中的构建输出，以确定构建是否已被篡改。'
- en: 'So these recommendations might not truly prevent supply chain compromise like
    SUNBURST, but they can protect some of the attack vectors and reduce your total
    risk exposure. To protect your build system:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些建议可能不会真正防止像SUNBURST这样的供应链妥协，但它们可以保护部分攻击向量，并减少您的总体风险敞口。为了保护您的构建系统：
- en: Give developers root access to integration and testing environments, *not* build
    and packaging systems.
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将开发者的根访问权限授予集成和测试环境，*而不是*构建和打包系统。
- en: Use ephemeral build infrastructure and protect builds from cache poisoning.
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用临时构建基础设施并保护免受缓存中毒攻击。
- en: Generate and distribute SBOMs so consumers can validate the artifacts.
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成并分发SBOM（软件构建材料）以便消费者可以验证工件。
- en: Run intrusion detection on build servers.
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行入侵检测工具在构建服务器上。
- en: Scan open source libraries and operating system packages.
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描开源库和操作系统软件包。
- en: Create reproducible builds on distributed infrastructure and compare the results
    to detect tampering.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分布式基础设施上创建可重现的构建，并比较结果以检测篡改。
- en: Run hermetic, self-contained builds that only use what’s made available to them
    (instead of calling out to other systems or the internet), and avoid decision
    logic in build scripts.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行具有隔离性、自包含的构建，只使用提供给它们的内容（而不是调用其他系统或互联网），并避免在构建脚本中包含决策逻辑。
- en: Keep builds simple and easy to reason about, and security review and scan the
    build scripts like any other software.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持构建简单且易于理解，并像对待其他软件一样对构建脚本进行安全审查和扫描。
- en: Conclusion
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Supply chain attacks are difficult to defend completely. Malicious software
    on public container registries is often detected rather than prevented, with the
    same for application libraries, and potential insecurity is part of the reality
    of using any third-party software.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 完全防御供应链攻击是困难的。公共容器注册表上的恶意软件通常是被检测到而不是被阻止，应用程序库也是如此，潜在的不安全性是使用任何第三方软件的现实的一部分。
- en: The [SLSA Framework](https://slsa.dev) suggests the milestones to achieve in
    order to secure your supply chain, assuming your build infrastructure is already
    secure! The [Software Supply Chain Security paper](https://oreil.ly/8qXmY) details
    concrete patterns and practices for Source Code, Materials, Build Pipelines, Artifacts,
    and Deployments, to guide you on your supply chain security voyage.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[SLSA 框架](https://slsa.dev)建议实现的里程碑，以确保您的供应链安全，假设您的构建基础设施已经安全！[软件供应链安全论文](https://oreil.ly/8qXmY)详细介绍了源代码、材料、构建流水线、产物和部署的具体模式和实践，指导您在供应链安全之旅中。'
- en: Scanning container images and Git repositories for published CVEs is a cloud
    native application’s minimal viable security. If you assume all workloads are
    potentially hostile, your container security context and configuration should
    be tuned to match the workload’s sensitivity. Container `seccomp` and LSM profiles
    should always be configured to defend against new, undefined behavior or system
    calls from a freshly compromised dependency.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 为已发布的 CVEs 扫描容器镜像和 Git 仓库是云原生应用程序的最低可行安全性。如果假设所有工作负载都可能是敌对的，您的容器安全上下文和配置应该调整到与工作负载的敏感性相匹配。容器
    `seccomp` 和 LSM 配置应始终配置为防御来自新的、未定义行为或刚刚受到侵害的依赖项的系统调用。
- en: Sign your build artifacts with cosign, Notary, and in-toto during CI/CD, then
    validate their signatures whenever they are consumed. Distribute SBOMs so consumers
    can verify your dependency chain for new vulnerabilities. While these measures
    only contribute to wider supply chain security coverage, they frustrate attackers
    and decrease BCTL’s risk of falling prey to drive-by container pirates.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CI/CD 过程中使用 cosign、Notary 和 in-toto 对构建产物进行签名，然后在消费时验证其签名。分发 SBOMs，以便消费者可以验证您的依赖链是否存在新的漏洞。虽然这些措施只是为了更广泛的供应链安全覆盖范围，但它们会使攻击者感到沮丧，并降低
    BCTL 落入驱动式容器海盗陷阱的风险。
