- en: Chapter 17\. CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the modern browser environment, CSS not only lets you write style rules but
    also has a set of APIs you can use to further enhance your application.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS Object Model (CSSOM) allows you to set inline styles programmatically
    from JavaScript code. Not only that, but you can even change the values of CSS
    variables at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](ch08.html#ch_webAnimationsApi), you saw an example of using `window.matchMedia`
    to programmatically check a media query to see if it matches on the current page.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has some helpful recipes that use some of these CSS-related APIs.
    At the time of writing, some of these APIs do not have good browser support. Always
    check browser compatibility before using them.
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting Text Ranges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to apply a highlight effect to a range of text in the document.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a `Range` object around the desired text, then use the CSS Custom Highlight
    API to apply the highlighting styles to that range.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create a `Range` object. This object represents a region
    of text within the document. [Example 17-1](#example17-1) shows a general purpose
    utility function to create a range given a text node and the text to highlight.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-1\. Creating a Range
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/wDJWH)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have the HTML element shown in [Example 17-2](#example17-2).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-2\. Some HTML markup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you wanted to highlight the text “highlight some of the text,” you can use
    the `getRange` helper to create a `Range` around that text (see [Example 17-3](#example17-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-3\. Using the `getRange` helper
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have the range, you need to register a new highlight with the browser’s
    highlight registry. Do this by creating a new `Highlight` object with the range,
    and then pass that `Highlight` to the `CSS.highlights.set` function (see [Example 17-4](#code_registerHighlight)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-4\. Registering the highlight
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This registers the highlight, but by default this has no visual effect. Next,
    you need to create some CSS styles that you’d like to apply to the highlight.
    This is done by using the `::highlight` pseudo-element. You use this pseudo-element
    combined with the key you registered the `Highlight` under in [Example 17-4](#code_registerHighlight)
    (see [Example 17-5](#example17-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-5\. Styling the highlight
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With this style applied, the text inside the range is now highlighted with a
    light amber color.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also highlight content by using the `<mark>` element. [Example 17-6](#example17-6)
    shows how to highlight some text with `<mark>`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-6\. Highlighting using the mark element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This has the same visual effect as using the CSS Custom Highlight API, but the
    key difference is that using `<mark>` involves inserting a new element into the
    DOM. This can be tricky depending on where you are adding the new element.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the text you want to highlight spans multiple elements, it may
    not be possible to do this with a `<mark>` element and still be valid HTML. Consider
    the HTML in [Example 17-7](#example17-7).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-7\. Some markup to highlight
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you want to highlight “which is being highlighted. The highlight extends
    to this paragraph,” you can’t do this with a single `<mark>` element (see [Example 17-8](#example17-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-8\. Invalid HTML
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is not valid HTML. The solution would be to use two separate `<mark>` elements,
    but then it’s not a single continuous highlighted region.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CSS Custom Highlight API makes such highlighting possible by creating
    a range that spans multiple tags and applying the highlight effect.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing a Flash of Unstyled Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to avoid the flash of unstyled text when using web fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the CSS Font Loading API to explicitly load the font faces you want to use
    in your application, and delay rendering any text until the fonts have been loaded.
  prefs: []
  type: TYPE_NORMAL
- en: To load a font with this API, you first create a `FontFace` object containing
    data about the font face you want to load. [Example 17-9](#example17-9) uses the
    Roboto font.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-9\. Creating the Roboto font face
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The document has a global `fonts` property, which is a `FontFaceSet`, containing
    all of the font faces used in the document. In order to use this font face, you
    need to add it to the `FontFaceSet` (see [Example 17-10](#example17-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-10\. Adding Roboto to the global `FontFaceSet`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So far, you’ve only defined the font. Nothing has been loaded yet. You can start
    the loading process by calling `load` on the `FontFace` object (see [Example 17-11](#example17-11)).
    This returns a `Promise` that is resolved once the font is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-11\. Waiting for the font to be loaded
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To prevent the flash of unstyled text, you’ll need to hide the text that uses
    this font until it has finished loading. If your app shows an initial loading
    animation, for example, you could continue the animation until the necessary fonts
    are loaded, then remove the loader and start rendering the app.
  prefs: []
  type: TYPE_NORMAL
- en: If your app is using multiple fonts, you can wait for the `document.fonts.ready`
    `Promise`. This `Promise` is resolved once all fonts are loaded and ready.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using web fonts with CSS, fonts are declared with a `@font-face` rule,
    which contains the URL of the font file to download. If text is rendered before
    the font has finished loading, a fallback system font is used. Once the font is
    ready, the text is re-rendered with the correct font. This can cause undesirable
    effects such as layout shifts if the font metrics are different.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of using `@font-face` is that you have no way of knowing when the
    font has been loaded and is ready for use. By using the CSS Font Loading API,
    you can get better control over your font loading and know exactly when it’s safe
    to start using a given font to render text.
  prefs: []
  type: TYPE_NORMAL
- en: If there is an error while loading the font—for example, maybe you mistyped
    the font URL—the `Promise` returned by the font’s `load` method rejects with the
    error.
  prefs: []
  type: TYPE_NORMAL
- en: Animating DOM Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show an animated transition when removing or adding elements to
    the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the View Transitions API to provide an animated transition between the two
    states.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/I8RFN)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: This API is used to apply a transition effect between two DOM states. To start
    a view transition, call the `document.startViewTransition` function. This function
    takes a callback function as its argument. You need to perform your DOM changes
    within this callback function.
  prefs: []
  type: TYPE_NORMAL
- en: In [Example 17-12](#code_simpleViewTransition), imagine you have a single-page
    app. Each view of the app is a top-level HTML element with a unique ID. To route
    between views, you can remove the current view and add the new one.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-12\. A simple view transition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This applies a basic cross-fade transition effect between the two views.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to adjust the speed of the cross-fade transition, you can do so
    with a bit of CSS, as shown in [Example 17-13](#example17-13).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-13\. Slowing down the transition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view transition effect works by effectively taking a screenshot of the current
    DOM state. Once the DOM changes inside the callback are made, another screenshot
    is taken. The browser creates some pseudo-elements on the page and applies an
    animated transition between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pseudo-elements created are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`::view-transition`'
  prefs: []
  type: TYPE_NORMAL
- en: A top-level overlay containing all view transitions
  prefs: []
  type: TYPE_NORMAL
- en: '`::view-transition-group(<name>)`'
  prefs: []
  type: TYPE_NORMAL
- en: An individual view transition
  prefs: []
  type: TYPE_NORMAL
- en: '`::view-transition-image-pair(<name>)`'
  prefs: []
  type: TYPE_NORMAL
- en: Contains the two images being transitioned
  prefs: []
  type: TYPE_NORMAL
- en: '`::view-transition-old(<name>)`'
  prefs: []
  type: TYPE_NORMAL
- en: Image of the old DOM state
  prefs: []
  type: TYPE_NORMAL
- en: '`::view-transition-new(<name>)`'
  prefs: []
  type: TYPE_NORMAL
- en: Image of the new DOM state
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these pseudo-elements take a `name` argument. This can be one of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*`'
  prefs: []
  type: TYPE_NORMAL
- en: Matches all view transition groups
  prefs: []
  type: TYPE_NORMAL
- en: '`root`'
  prefs: []
  type: TYPE_NORMAL
- en: Matches the `root` transition group, which is the default name if no custom
    name is given.
  prefs: []
  type: TYPE_NORMAL
- en: A custom identifier
  prefs: []
  type: TYPE_NORMAL
- en: You can specify the custom identifier by setting the `view-transition-name`
    property on the element to be transitioned.
  prefs: []
  type: TYPE_NORMAL
- en: You can use CSS selectors to target these pseudo-elements and apply different
    animations. You can do this by creating a `@keyframes` rule for the animation
    and applying that animation to the `::view-transition-old` or `::view-transition-new`
    pseudo-elements.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Stylesheets at Runtime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to dynamically add a CSS rule to a stylesheet on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `insertRule` method of `CSSStyleSheet` to add the desired rule (see
    [Example 17-14](#example17-14)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-14\. Adding a CSS rule
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might want to do this if you have new HTML content that is dynamically added
    to the page, such as in a single-page application. You can dynamically add the
    style rules when the new content is added.
  prefs: []
  type: TYPE_NORMAL
- en: Conditionally Setting a CSS Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to apply a CSS class to an element only if a certain condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `toggle` method of the element’s `classList` (see [Example 17-15](#example17-15)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-15\. Toggling a class conditionally
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you call `toggle` without the second argument, it adds the class name if
    it’s not currently set, or removes it if it’s already set.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to `toggle`, you can use `add` and `remove` to manipulate the class
    list by adding and removing the given class name. If you call `add` when the class
    name is already set, it has no effect. Similarly, if you call `remove` when the
    class name isn’t set, it also has no effect.
  prefs: []
  type: TYPE_NORMAL
- en: Matching Media Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to check if a certain media query is satisfied using JavaScript. For
    example, you might want to use the `prefers-color-scheme` media query to determine
    if a user’s operating system is set to a dark theme.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `window.matchMedia` to evaluate the media query or listen for changes (see
    [Example 17-16](#example17-16)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-16\. Checking for a dark color scheme
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`window.matchMedia` returns a `MediaQueryList` object that not only has the
    `matches` property but also lets you listen for the `change` event. This event
    fires if the result of the media query changes.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the user’s operating system color theme setting changes while
    your app is open, the `change` event fires for the `prefers-color-scheme` query.
    You can then check for the new match state (see [Example 17-17](#example17-17)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-17\. Listening for media query changes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Getting an Element’s Computed Style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to find a particular CSS style for an element that comes from a stylesheet
    (not an inline style).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `window.getComputedStyle` to calculate the final styles for the element.
  prefs: []
  type: TYPE_NORMAL
- en: Use getComputedStyle Sparingly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you call `getComputedStyle`, it forces the browser to recalculate styles
    and layout, which can be a performance bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the HTML element in [Example 17-18](#example17-18) with some styling
    applied.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-18\. Some HTML with style
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To determine the styles that are applied to the element, pass the element to
    `window.getComputedStyle` (see [Example 17-19](#example17-19)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-19\. Getting the computed style
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Because the ID selector has a higher specificity than the class selector, it
    wins the conflict and `styles.backgroundColor` is blue. On some browsers, it may
    not be the string “blue” but rather a color expression such as `rgb(0, 0, 255)`.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An element’s `style` property only works for *inline styles*. Consider [Example 17-20](#example17-20).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-20\. An element with inline styles
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This example specifies the `color` property as an inline style, so you can access
    this by referencing the `style` property. However, the background color comes
    from a stylesheet and won’t be found this way (see [Example 17-21](#example17-21)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-21\. Checking inline styles
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Since `getComputedStyle` calculates the final style of the element, it contains
    both stylesheet styles and inline styles (see [Example 17-22](#example17-22)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-22\. Checking computed styles
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
