- en: Chapter 5\. Modern JavaScript Syntax and Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript has been around for many decades now and has undergone multiple revisions.
    This book explores design patterns in the modern JavaScript context and uses modern
    ES2015+ syntax for all the examples discussed. This chapter discusses ES2015+
    JavaScript features and syntax essential to further our discussion of design patterns
    in the current JavaScript context.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some fundamental changes were introduced to JavaScript syntax with ES2015 that
    are especially relevant to our discussion on patterns. These are covered well
    in the [BabelJS ES2015 guide](https://oreil.ly/V09r_).
  prefs: []
  type: TYPE_NORMAL
- en: This book relies on modern JavaScript syntax. You may also be curious about
    TypeScript. TypeScript, a statically typed superset of JavaScript, offers several
    language features that JavaScript does not. These features include strong typing,
    interfaces, enums, and advanced type inference and can also influence design patterns.
    To learn more about TypeScript and its benefits, consider checking out some O’Reilly
    books such as [*Programming TypeScript*](https://learning.oreilly.com/library/view/programming-typescript/9781492037644/)
    by Boris Cherny.
  prefs: []
  type: TYPE_NORMAL
- en: The Importance of Decoupling Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modular JavaScript allows you to logically split your application into smaller
    pieces called modules. A module can be imported by other modules that, in turn,
    can be imported by more modules. Thus, the application can be composed of many
    nested modules.
  prefs: []
  type: TYPE_NORMAL
- en: In the world of scalable JavaScript, when we say an application is *modular*,
    we often mean it’s composed of a set of highly decoupled, distinct pieces of functionality
    stored in modules. Loose coupling facilitates easier maintainability of apps by
    removing *dependencies* where possible. If implemented efficiently, it allows
    you to see how changes to one part of a system may affect another.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike some more traditional programming languages, the older iterations of
    JavaScript until ES5 ([Standard ECMA-262 5.1 Edition](https://oreil.ly/w2WxN))
    did not provide developers with the means to organize and import code modules
    cleanly. It was one of the concerns with the specifications that had not required
    great thought until more recent years when the need for more organized JavaScript
    applications became apparent. [AMD (Asynchronous Module Definition)](https://oreil.ly/W5XPd)
    and [CommonJS](https://oreil.ly/lgw0w) modules were the most popular patterns
    to decouple applications in the initial versions of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Native solutions to these problems arrived with [ES6 or ES2015](https://oreil.ly/rPxFL).
    [TC39](https://oreil.ly/GJduA), the standards body charged with defining the syntax
    and semantics of ECMAScript and its future iterations, had been keeping a close
    eye on the evolution of JavaScript usage for large-scale development and was acutely
    aware of the need for better language features for writing more modular JS.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax to create modules in JavaScript was developed and standardized with
    the release of ECMAScript modules in ES2015\. Today, all major browsers support
    JavaScript modules. They have become the de facto method of implementing modern-day
    modular programming in JavaScript. In this section, we’ll explore code samples
    using the syntax for modules in ES2015+.
  prefs: []
  type: TYPE_NORMAL
- en: Modules with Imports and Exports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules allow us to separate our application code into independent units, each
    containing code for one aspect of the functionality. Modules also encourage code
    reusability and expose features that can be integrated into different applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'A language should have features that allow you to `import` module dependencies
    and `export` the module interface (the public API/variables we allow other modules
    to consume) to support modular programming. The support for [JavaScript modules
    (also referred to as ES modules)](https://oreil.ly/kd-pu) was introduced to JavaScript
    in ES2015, allowing you to specify module dependencies using an `import` keyword.
    Similarly, you can use the `export` keyword to export just about anything from
    within the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import` declarations bind a module’s exports as local variables and may be
    renamed to avoid name collisions/conflicts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`export` declarations declare that a local binding of a module is externally
    visible such that other modules may read the exports but can’t modify them. Interestingly,
    modules may export child modules but can’t export modules that have been defined
    elsewhere. We can also rename exports so that their external name differs from
    their local names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*.mjs* is an extension used for JavaScript modules that helps us distinguish
    between module files and classic scripts (*.js*). The *.mjs* extension ensures
    that corresponding files are parsed as a module by runtimes and build tools (for
    example, [Node.js](https://oreil.ly/E9oRS), [Babel](https://oreil.ly/fkQAL)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows three modules for bakery staff, the functions they
    perform while baking, and the bakery itself. We see how functionality that is
    exported by one module is imported and used by the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Typically, a module file contains several related functions, constants, and
    variables. You can collectively export these at the end of the file using a single
    export statement followed by a comma-separated list of the module resources you
    want to export:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can import only the functions you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can tell browsers to accept `<script>` tags that contain JavaScript modules
    by specifying the `type` attribute with a value of `module`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `nomodule` attribute tells modern browsers not to load a classic script
    as a module. This is useful for fallback scripts that don’t use the module syntax.
    It allows you to use the module syntax in your HTML and have it work in browsers
    that don’t support it. This is useful for several reasons, including performance.
    Modern browsers don’t require polyfilling for modern features, allowing you to
    serve the larger transpiled code to legacy browsers alone.
  prefs: []
  type: TYPE_NORMAL
- en: Module Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A cleaner approach to importing and using module resources is to import the
    module as an object. This makes all the exports available as members of the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Modules Loaded from Remote Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ES2015+ also supports remote modules (e.g., third-party libraries), making
    it simplistic to load modules from external locations. Here’s an example of pulling
    in the module we defined previously and utilizing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Static Imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The type of import just discussed is called static import. The module graph
    needs to be downloaded and executed with static import before the main code can
    run. This can sometimes lead to the eager loading of a lot of code up front on
    the initial page load, which can be expensive and delay key features being available
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic Imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you don’t want to load a module up-front but on demand when needed.
    Lazy-loading modules allows you to load what you need when needed—for example,
    when the user clicks a link or a button. This improves the initial load-time performance.
    [Dynamic import](https://oreil.ly/fqR6v) was introduced to make this possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamic import introduces a new function-like form of import. `import(url)`
    returns a promise for the module namespace object of the requested module, which
    is created after fetching, instantiating, and evaluating all of the module’s dependencies,
    as well as the module itself. Here is an example that shows dynamic imports for
    the `cakeFactory` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Dynamic import can also be supported using the `await` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With dynamic import, the module graph is downloaded and evaluated only when
    the module is used.
  prefs: []
  type: TYPE_NORMAL
- en: Popular patterns like Import on Interaction and Import on Visibility can be
    easily implemented in vanilla JavaScript using the dynamic import feature.
  prefs: []
  type: TYPE_NORMAL
- en: Import on Interaction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some libraries may be required only when a user starts interacting with a particular
    feature on the web page. Typical examples are chat widgets, complex dialog boxes,
    or video embeds. Libraries for these features need not be imported on page load
    but can be loaded when the user interacts with them (for example, by clicking
    on the component facade or placeholder). The action can trigger the dynamic import
    of respective libraries followed by the function call to activate the desired
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can implement an onscreen sort function using the external
    [`lodash.sortby` module](https://oreil.ly/VUgnM), which is loaded dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Import on Visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many components are not visible on the initial page load but become visible
    as the user scrolls down. Since users may not always scroll down, modules corresponding
    to these components can be lazy-loaded when they become visible. The [IntersectionObserver
    API](https://oreil.ly/wXwgi) can detect when a component placeholder is about
    to become visible, and a dynamic import can load the corresponding modules.
  prefs: []
  type: TYPE_NORMAL
- en: Modules for the Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Node](https://oreil.ly/4Bh_O) 15.3.0 onward supports JavaScript modules. They
    function without an experimental flag and are compatible with the rest of the
    npm package ecosystem. Node [treats](https://oreil.ly/q1Jzl) files ending in *.mjs*
    and *.js* with a top-level type field value of module as JavaScript modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Advantages of Using Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modular programming and the use of modules offer several unique advantages.
    Some of these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Modules scripts are evaluated only once.
  prefs: []
  type: TYPE_NORMAL
- en: The browser evaluates module scripts only once, while classic scripts get evaluated
    as often as they are added to the DOM. This means that with JS modules, if you
    have an extended hierarchy of dependent modules, the module that depends on the
    innermost module will be evaluated first. This is a good thing because it means
    that the innermost module will be evaluated first and will have access to the
    exports of the modules that depend on it.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are auto-deferred.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike other script files, where you have to include the `defer` attribute if
    you don’t want to load them immediately, browsers automatically defer the loading
    of modules.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are easy to maintain and reuse.
  prefs: []
  type: TYPE_NORMAL
- en: Modules promote decoupling pieces of code that can be maintained independently
    without significant changes to other modules. They also allow you to reuse the
    same code in multiple different functions.
  prefs: []
  type: TYPE_NORMAL
- en: Modules provide namespacing.
  prefs: []
  type: TYPE_NORMAL
- en: Modules create a private space for related variables and constants so that they
    can be referenced via the module without polluting the global namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Modules enable dead code elimination.
  prefs: []
  type: TYPE_NORMAL
- en: Before the introduction of modules, unused code files had to be manually removed
    from projects. With module imports, bundlers such as [webpack](https://oreil.ly/37e9F)
    and [Rollup](https://oreil.ly/rUWiB) can automatically identify unused modules
    and eliminate them. Dead code may be removed before adding it to the bundle. This
    is known as tree-shaking.
  prefs: []
  type: TYPE_NORMAL
- en: All modern browsers support module [import](https://oreil.ly/IauTK) and [export](https://oreil.ly/NubAY),
    and you can use them without any fallback.
  prefs: []
  type: TYPE_NORMAL
- en: Classes with Constructors, Getters, and Setters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to modules, ES2015+ also allows defining classes with constructors
    and some sense of privacy. JavaScript classes are defined with the `class` keyword.
    In the following example, we define a class `Cake` with a constructor and two
    getters and setters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript classes are built on prototypes and are a special category of JavaScript
    functions that need to be defined before they can be referenced.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `extends` keyword to indicate that a class inherits from
    another class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: All modern browsers and Node support ES2015 classes. They are also compatible
    with the [new-style class syntax](https://oreil.ly/9c9jm) introduced in ES6.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between JavaScript modules and classes is that modules are [imported](https://oreil.ly/IauTK)
    and [exported](https://oreil.ly/NubAY), and classes are defined with the `class`
    keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reading through, one may also notice the lack of the word “function” in the
    previous examples. This isn’t a typo: TC39 has made a conscious effort to decrease
    our abuse of the `function` keyword for everything, hoping it will help simplify
    how we write code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript classes also support the `super` keyword, which [allows](https://oreil.ly/gYvxw)
    you to call a parent class’ constructor. This is useful for implementing the self-inheritance
    pattern. You can use `super` to call the methods of the superclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Modern JavaScript supports public and private class members. Public class members
    are accessible to other classes. Private class members are accessible only to
    the class in which they are defined. Class fields are, by default, public. [Private
    class fields](https://oreil.ly/SXsES) can be created by using the `#` (hash) prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'JavaScript classes support static methods and properties using the `static`
    keyword. Static members can be referenced without instantiating the class. You
    can use static methods to create utility functions and static properties for holding
    configuration or cached data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Classes in JavaScript Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the last few years, some modern JavaScript libraries and frameworks—notably
    React—have introduced alternatives to classes. React Hooks make it possible to
    use React state and lifecycle methods without an ES2015 class component. Before
    Hooks, React developers had to refactor functional components as class components
    so that they handle state and lifecycle methods. This was often tricky and required
    an understanding of how ES2015 classes work. React Hooks are functions that allow
    you to manage a component’s state and lifecycle methods without relying on classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that several other approaches to building for the web, such as the [Web
    Components](https://oreil.ly/ndfeb) community, continue to use classes as a base
    for component development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced JavaScript language syntax for modules and classes.
    These features allow us to write code while adhering to object-oriented design
    and modular programming principles. We will also use these concepts to categorize
    and describe different design patterns. The next chapter talks about the different
    categories of design patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Related Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[JavaScript modules on v8](https://oreil.ly/IEuAq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JavaScript modules on MDN](https://oreil.ly/OAL9O)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
