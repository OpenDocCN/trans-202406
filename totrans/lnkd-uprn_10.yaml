- en: Chapter 10\. Observing Your Platform with Linkerd
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。使用Linkerd观察您的平台
- en: One of the challenges of working with microservices applications is monitoring
    them. When dealing with multiple development teams, even in a single language,
    understanding which workloads are communicating and surfacing useful metrics from
    those communications can be a huge challenge. Every developer, language, and framework
    will prioritize different details, and organizations need a single way to view
    all those different services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 处理微服务应用程序的一个挑战是监控它们。即使在单一语言中，处理多个开发团队，理解哪些工作负载正在通信并从这些通信中提取有用的指标可能是一个巨大的挑战。每个开发人员、语言和框架都会优先考虑不同的细节，组织需要一种统一的方式来查看所有这些不同的服务。
- en: '*Observability* refers to this ability to understand a system by looking at
    it from the outside. An application can be more or less observable, so when we
    talk about observability in Linkerd we’re referring to how it impacts the observability
    of your applications. In this chapter, we’ll look at how Linkerd increases observability
    by providing all your apps with standard metrics, allowing you to see the relationships
    between your microservices, and allowing you to intercept and analyze interapp
    communications.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*可观察性*指的是通过外部观察来理解系统的能力。一个应用程序可以更或少可观察，因此当我们谈论Linkerd中的可观察性时，我们指的是它如何影响您应用程序的可观察性。在本章中，我们将看看Linkerd通过为所有应用程序提供标准指标来增加可观察性，让您看到微服务之间的关系，并允许拦截和分析应用程序间的通信。'
- en: Why Do We Need This?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要这个？
- en: As with application security, microservices present new challenges for platform
    engineers. The ability to dynamically scale components, create and update services
    on demand, and dynamically provision infrastructure increases the difficulty of
    understanding the health of our applications. As your organization builds out
    your platform for application developers, it’s important that you make it easy
    for teams to do the right thing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与应用安全性类似，微服务对平台工程师提出了新的挑战。动态扩展组件的能力，按需创建和更新服务，以及动态配置基础设施，增加了理解应用程序健康状况的难度。当您的组织为应用程序开发人员构建平台时，重要的是让团队能够轻松做出正确的决策。
- en: How Does Linkerd Help?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd如何帮助？
- en: Linkerd helps make observability part of your platform. When you add a workload
    to the mesh, it begins to automatically surface important information about that
    workload’s behavior. That means that when we add Linkerd to our platform, we make
    it easy for all our application teams to do the right thing in terms of observability.
    If you allow your application to join the mesh, you can automatically surface
    performance, health, and relationship data about your app in a standard way. If
    you go deeper and build service profiles, you can save and share critical information
    about the individual routes within your apps.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd有助于将可观察性融入您的平台。当您将工作负载添加到网格中时，它会自动显示有关该工作负载行为的重要信息。这意味着当我们将Linkerd添加到我们的平台时，我们可以使所有应用团队在可观察性方面做出正确的决策。如果允许您的应用程序加入网格，您可以自动显示有关您的应用程序性能、健康状况和关系数据的标准信息。如果进一步构建服务配置文件，您可以保存和共享有关应用程序内个别路由的关键信息。
- en: As we go through this chapter, we’ll explore how to observe your applications
    with Linkerd using the `linkerd` CLI. Everything we cover via the CLI can also
    be surfaced via the Linkerd Viz dashboard. We’ll cover the dashboard near the
    end of this chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过`linkerd` CLI来探索如何使用Linkerd观察您的应用程序时，我们将覆盖的所有内容也可以通过Linkerd Viz仪表板显示。我们将在本章末尾介绍仪表板。
- en: 'As we mentioned in [Chapter 1](ch01.html#LUAR_service_mesh_101), there are
    three golden metrics that have repeatedly proven critical for understanding what’s
    going on in a microservices application: traffic, success rate, and latency (see
    [Figure 1-8](ch01.html#golden-metrics)).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](ch01.html#LUAR_service_mesh_101)中提到的，有三个黄金指标已被反复证明对理解微服务应用的运行情况至关重要：流量、成功率和延迟（参见[图1-8](ch01.html#golden-metrics)）。
- en: 'In a microservices application, having these metrics available for every workload
    is critical: with just these golden metrics, you should be able to understand
    how well a given workload is performing as well as what areas of your system need
    special attention or optimization.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务应用中，每个工作负载都能够提供这些指标非常关键：仅凭这些黄金指标，您应该能够了解特定工作负载的表现如何，以及系统中哪些领域需要特别关注或优化。
- en: The Linkerd proxy automatically collects detailed metrics from every workload
    and request and makes them available via Prometheus, so that you can surface this
    information within your organization using a variety of widely available tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 代理会自动从每个工作负载和请求中收集详细的指标，并通过 Prometheus 提供这些信息，以便您可以使用各种广泛可用的工具在您的组织内部显示这些信息。
- en: Observability in Linkerd
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd 中的可观察性
- en: 'We’ll use the booksapp and emojivoto applications to demonstrate observability
    in Linkerd. Both of these applications deliberately include various failures:
    we’ll use Linkerd observability tools to find where, exactly, the failures are.
    (Fixing them is left as an exercise for the reader!)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 booksapp 和 emojivoto 应用程序演示 Linkerd 中的可观察性。这两个应用程序故意包含各种故障：我们将使用 Linkerd
    的可观察性工具精确定位故障的具体位置。（解决这些问题将留给读者作为练习！）
- en: Setting Up Your Cluster
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置您的集群
- en: You’ll need a cluster with Linkerd and Linkerd Viz already installed (please
    refer to [Chapter 3](ch03.html#LUAR_deploying_linkerd) if you want a refresher
    on setting up such a cluster). We’ll start by cloning the [booksapp sample application](https://oreil.ly/LJou0)
    and [emojivoto sample application](https://oreil.ly/0n5Gd) repositories, as shown
    in [Example 10-1](#EX12-clone), since we’ll need the repositories to appropriately
    profile these sample applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个已安装了 Linkerd 和 Linkerd Viz 的集群（如果需要有关设置此类集群的复习，请参阅[第 3 章](ch03.html#LUAR_deploying_linkerd)）。我们将从克隆[booksapp
    示例应用](https://oreil.ly/LJou0)和[emojivoto 示例应用](https://oreil.ly/0n5Gd)仓库开始，如[示例 10-1](#EX12-clone)所示，因为我们需要这些仓库来正确配置这些示例应用。
- en: Example 10-1\. Cloning the repos
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-1\. 克隆仓库
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we can get the applications up and running in our cluster, as shown in
    [Example 10-2](#EX12-install-apps).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以在集群中启动和运行这些应用程序，如[示例 10-2](#EX12-install-apps)所示。
- en: Example 10-2\. Setting up our apps
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-2\. 设置我们的应用程序
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once our check returns healthy, we can start looking at our applications using
    the `linkerd viz` command, as shown in [Example 10-3](#EX12-linkerd-viz-basics).
    Note that it may take a minute or so for Linkerd Viz to start showing any data,
    since it has to start by collecting enough data to generate statistics.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的检查结果返回正常，我们可以开始使用 `linkerd viz` 命令查看我们的应用程序，如[示例 10-3](#EX12-linkerd-viz-basics)所示。请注意，Linkerd
    Viz 开始显示数据可能需要一分钟左右的时间，因为它需要收集足够的数据以生成统计信息。
- en: Example 10-3\. Gathering application metrics
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-3\. 收集应用程序指标
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can immediately see just from these basic queries that the emojivoto and
    book⁠sapp applications are both having reliability issues. In the following sections,
    we’ll dive deeper into our applications to isolate the source of the problem.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 仅从这些基本查询中，您立即可以看到 emojivoto 和 booksapp 应用程序都存在可靠性问题。在接下来的章节中，我们将深入探讨我们的应用程序，以确定问题的根源。
- en: Tap
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tap
- en: Linkerd Viz Tap allows authorized users to collect metadata about the requests
    flowing between your applications. It will surface details about request headers,
    URIs, response codes, and more, permitting you to access this data on demand for
    debugging, as shown in [Example 10-4](#EX12-basic-tap-command). Tap also provides
    convenient tooling for validating the TLS status of your interapp connections.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Viz Tap 允许授权用户收集应用程序之间流动的请求的元数据。它会显示有关请求头、URI、响应代码等的详细信息，以便您在调试时按需访问这些数据，如[示例 10-4](#EX12-basic-tap-command)所示。Tap
    还提供了方便的工具，用于验证您的应用间连接的 TLS 状态。
- en: Example 10-4\. Viewing Tap data
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-4\. 查看 Tap 数据
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `linkerd viz tap` command will run until you send it the break signal. It
    displays live data from the proxy, which will give details about the individual
    requests that go to and from the web deployment. Each line will show the source
    and destination details, TLS status, any status information, and other metadata
    as available.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd viz tap` 命令会持续运行，直到收到终止信号。它会显示代理传输的实时数据，这些数据将详细描述去往和来自 Web 部署的各个请求。每一行将显示源和目标详情、TLS
    状态、任何状态信息以及其他可用的元数据。'
- en: Installing Tap
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Tap
- en: Tap is built into the Linkerd Viz extension, so it will be automatically installed
    by the `linkerd viz install` command. However, if any of your workloads were running
    before you installed Viz, you’ll need to restart those workloads before Tap will
    be available.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Tap 已集成到 Linkerd Viz 扩展中，因此它将在执行 `linkerd viz install` 命令时自动安装。但是，如果您安装 Viz
    前已运行任何工作负载，您需要在 Tap 可用之前重新启动这些工作负载。
- en: Tap data is a powerful diagnostic tool that can provide insights into how exactly
    your apps are communicating with one another. If Tap is enabled when you view
    a workload in the Linkerd Viz dashboard, it will automatically display a summary
    of requests. Be sure to try to view the Tap data for emojivoto’s workloads when
    you look at the Viz dashboard later in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Tap 数据是一个强大的诊断工具，可以提供关于您的应用程序如何彼此通信的详细见解。如果在查看 Linkerd Viz 仪表板中的工作负载时启用了 Tap，它将自动显示请求的摘要。确保在本章后期查看
    Viz 仪表板时尝试查看 emojivoto 工作负载的 Tap 数据。
- en: Service Profiles
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务配置文件
- en: Linkerd *service profiles*, embodied by the ServiceProfile resource, allow you
    to give the mesh detailed information about how a given workload is used. At its
    most basic level, a ServiceProfile defines what routes are allowed for a workload.
    Once routes are defined, you can configure per-route metrics, timeouts, and retries,
    as well as which HTTP statuses will be considered failures.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd *服务配置文件*，由 ServiceProfile 资源体现，允许您为网格提供有关如何使用给定工作负载的详细信息。在其最基本的层面上，ServiceProfile
    定义了工作负载允许哪些路由。一旦定义了路由，您可以配置每个路由的指标、超时和重试，以及哪些 HTTP 状态将被视为失败。
- en: ServiceProfile and HTTPRoute
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ServiceProfile 和 HTTPRoute
- en: The Linkerd project is in the midst of a transition to fully adopting [Gateway
    API](https://oreil.ly/Onjs9). As the project works toward that objective, you’ll
    see a few Linkerd custom resources, including ServiceProfile, begin to be deprecated.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 项目正在过渡到完全采用[网关 API](https://oreil.ly/Onjs9)。随着项目朝着这个目标迈进，你会看到一些 Linkerd
    自定义资源，包括 ServiceProfile，开始被弃用。
- en: In Linkerd 2.13 and 2.14, ServiceProfile and HTTPRoute often have mutually exclusive
    functionality, which makes it particularly important to review the [ServiceProfile
    documentation](https://oreil.ly/zJk_j) to verify the current state of ServiceProfile
    as you begin using these resources in your cluster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linkerd 2.13 和 2.14 中，ServiceProfile 和 HTTPRoute 常常具有互斥的功能，这使得在开始在集群中使用这些资源之前，仔细审查
    [ServiceProfile 文档](https://oreil.ly/zJk_j) 尤为重要。
- en: You can build out ServiceProfiles in a number of ways. The most flexible way
    is to write them by hand, but the Linkerd CLI provides a few different ways to
    generate them automatically, as you’ll see in the following sections.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过多种方式构建 ServiceProfiles。最灵活的方法是手工编写它们，但是 Linkerd CLI 提供了几种不同的自动生成方法，正如您将在以下部分看到的那样。
- en: Configuring routes for emojivoto
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 emojivoto 的路由
- en: 'The emojivoto application has three workloads:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: emojivoto 应用程序有三个工作负载：
- en: The `emoji` and `voting` workloads use gRPC for communication, with their gRPC
    messages defined in protobuf files.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emoji` 和 `voting` 工作负载使用 gRPC 进行通信，其 gRPC 消息在 protobuf 文件中定义。'
- en: The `web` workload uses HTTP to interact with a web browser.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web` 工作负载使用 HTTP 与 web 浏览器交互。'
- en: We’ll start with `emoji` and `voting`, since they have *protobuf* files. Protobuf
    files work as a guide to our APIs, and they can be consumed by the Linkerd CLI
    to automatically create ServiceProfiles, as shown in [Example 10-5](#EX12-protobuf-to-serviceprofile).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 `emoji` 和 `voting` 开始，因为它们有 *protobuf* 文件。Protobuf 文件作为我们 API 的指南，并且可以被
    Linkerd CLI 消耗，以自动创建 ServiceProfiles，如 [示例 10-5](#EX12-protobuf-to-serviceprofile)
    所示。
- en: Example 10-5\. Creating ServiceProfiles from protobuf files
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-5\. 从 protobuf 文件创建 ServiceProfiles
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Storing Linkerd Viz Metrics
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储 Linkerd Viz 指标
- en: 'Once you’ve created ServiceProfiles for your applications, Linkerd’s Viz extension
    will store that data in Prometheus. A very important part of taking Linkerd to
    production is planning how you’ll manage this Prometheus data in the long term.
    The Prometheus component that ships with Linkerd Viz is *not* sufficient for long-term
    data collection: it stores data in memory, and it *will* lose data every time
    it restarts.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为您的应用程序创建了 ServiceProfiles，Linkerd 的 Viz 扩展将在 Prometheus 中存储这些数据。将 Linkerd
    投入生产的一个非常重要的部分是计划如何长期管理这些 Prometheus 数据。Linkerd Viz 随附的 Prometheus 组件*不*足以进行长期数据收集：它将数据存储在内存中，并且每次重新启动时都会*丢失*数据。
- en: With our routes created for `emoji` and `voting`, we have two-thirds of our
    application covered with ServiceProfiles. That leaves the `web` component. Although
    we know this must speak HTTP because we talk to it with a browser, unfortunately
    the authors of this component didn’t actually write any API documentation for
    it at all. This leaves us to figure out how to build a ServiceProfile with no
    information about how the API is structured.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为 `emoji` 和 `voting` 创建路由，我们已经覆盖了应用程序的三分之二。剩下的是 `web` 组件。虽然我们知道它必须使用 HTTP，因为我们通过浏览器与它通信，但不幸的是，这个组件的作者实际上并没有编写任何关于
    API 结构的文档。这让我们不得不试图在没有关于 API 结构的任何信息的情况下构建 ServiceProfile。
- en: Thankfully, we can use Linkerd’s Tap functionality to do just that, as shown
    in [Example 10-6](#EX12-tap-serviceprofiles).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以使用 Linkerd 的 Tap 功能来实现这一点，就像 [示例 10-6](#EX12-tap-serviceprofiles) 中展示的那样。
- en: Example 10-6\. Creating ServiceProfiles with Tap
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-6\. 使用 Tap 创建 ServiceProfiles
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Linkerd Default Routes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd 默认路由
- en: 'Linkerd’s ServiceProfile objects are intended to define an entire API, but
    what happens when we make a mistake, or when an API changes without the profiles
    being updated? That’s where the default route comes in: any route that isn’t explicitly
    defined in a ServiceProfile is treated as a default route.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的 ServiceProfile 对象旨在定义整个 API，但当我们犯错误或者 API 在没有更新 ServiceProfile 的情况下发生变化时会发生什么？这就是默认路由的作用：任何未在
    ServiceProfile 中明确定义的路由都将视为默认路由。
- en: Default routes are subject to default policies regarding retries and timeouts.
    Data about traffic on default routes is aggregated into the catchall `[DEFAULT]`
    route entry.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认路由受到关于重试和超时的默认策略的约束。有关默认路由的流量数据被聚合到总括的 `[DEFAULT]` 路由条目中。
- en: Building routes for booksapp
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 booksapp 构建路由
- en: Now that we’re finished with the emojivoto application, we need to set things
    up for the booksapp application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了 emojivoto 应用程序，需要为 booksapp 应用程序进行设置。
- en: Whereas emojivoto included protobuf files for some of its APIs, booksapp ships
    with OpenAPI definitions instead. Like protobuf files, OpenAPI definitions (often
    called “Swagger definitions,” after an earlier version of the standard) serve
    as definitions of how to use the API, and Linkerd knows how to read them to create
    ServiceProfiles.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 而 emojivoto 包含一些 API 的 protobuf 文件，booksapp 则使用 OpenAPI 定义。与 protobuf 文件类似，OpenAPI
    定义（通常称为“Swagger 定义”，源自较早版本的标准）用于定义如何使用 API，并且 Linkerd 能够读取这些定义以创建 ServiceProfiles。
- en: Creating a ServiceProfile with an OpenAPI or Swagger definition is almost exactly
    like creating a ServiceProfile from a protobuf file, as shown in [Example 10-7](#EX12-openapi-to-serviceprofile).
    Please be sure to follow along, as we’ll be using these ServiceProfiles again
    in [Chapter 11](ch11.html#LUAR_reliability)!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenAPI 或 Swagger 定义创建 ServiceProfile 几乎与使用 protobuf 文件创建 ServiceProfile
    完全相同，如 [示例 10-7](#EX12-openapi-to-serviceprofile) 所示。请务必跟着进行操作，因为我们将在 [第 11 章](ch11.html#LUAR_reliability)
    再次使用这些 ServiceProfiles！
- en: Example 10-7\. Creating ServiceProfiles with OpenAPI definitions
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-7\. 使用 OpenAPI 定义创建 ServiceProfiles
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Topology
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拓扑结构
- en: With routes, metrics, and Tap data, we have a lot of useful ways to understand
    what our apps are doing without requiring developers to include instrumentation
    in their applications. Another common challenge is figuring out which of all these
    possible calls are actually happening in the application, and from which workload
    to which workload. Linkerd can also surface that information for you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过路由、指标和 Tap 数据，我们有很多有用的方法来理解我们的应用程序在做什么，而无需开发人员在其应用程序中包含仪表。另一个常见的挑战是弄清楚这些可能的调用中实际发生了哪些，以及从哪个工作负载到哪个工作负载。Linkerd
    也可以为您展示这些信息。
- en: In [Example 10-8](#EX12-viewing-edges), we’ll examine the relationships between
    the components of the booksapp application. You can, and should, try to explore
    emojivoto on your own.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 10-8](#EX12-viewing-edges) 中，我们将检查 booksapp 应用程序组件之间的关系。您可以自行尝试探索 emojivoto
    应用程序。
- en: Example 10-8\. Viewing edges in Linkerd
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-8\. 在 Linkerd 中查看边缘
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is broken up into five columns:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出被分为五列：
- en: '`SRC`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`SRC`'
- en: The source of the traffic
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 流量的源头
- en: '`DST`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`DST`'
- en: The destination of the traffic
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 流量的目的地
- en: '`SRC_NS`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`SRC_NS`'
- en: The namespace where the traffic originated
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 流量起源的命名空间
- en: '`DST_NS`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`DST_NS`'
- en: The namespace where the traffic went
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 流量所去的命名空间
- en: '`SECURED`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`SECURED`'
- en: Whether or not the traffic is encrypted via Linkerd’s mTLS
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 流量是否通过 Linkerd 的 mTLS 进行加密
- en: The resulting output gives you an overview of the relationships between the
    book⁠sapp components. It shows that the Prometheus instance in the `linkerd-viz`
    namespace is talking to each deployment in the `booksapp` namespace. Beyond that,
    we can see that `traffic` talks to `webapp`, `webapp` talks to `books` and `authors`,
    and `books` and `authors` talk to each other.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出将为您展示书籍应用组件之间的关系概述。它显示 `linkerd-viz` 命名空间中的 Prometheus 实例与 `booksapp` 命名空间中的每个部署之间的通信。此外，我们可以看到
    `traffic` 与 `webapp` 之间的通信，`webapp` 与 `books` 以及 `authors` 之间的通信，以及 `books` 和
    `authors` 之间的互通。
- en: The `linkerd viz edges` command will work for Pods or any other workload type
    within Kubernetes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd viz edges` 命令可用于 Kubernetes 中的 Pod 或任何其他工作负载类型。'
- en: Linkerd Viz
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd Viz
- en: You’ve likely noticed that a number of the commands we used in this chapter
    were `linkerd viz` commands. This is the Linkerd Viz extension that we introduced
    back in [Chapter 2](ch02.html#LUAR_intro_to_linkerd). It ships with the core Linkerd
    system because it’s often extremely useful, but it was split out from the core
    into an extension in Linkerd 2.10, so that not everyone is forced to run it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，本章中使用的许多命令都是 `linkerd viz` 命令。这是我们在[第2章](ch02.html#LUAR_intro_to_linkerd)介绍的
    Linkerd Viz 扩展。它与核心 Linkerd 系统一起发布，因为它通常非常有用，但是从 Linkerd 2.10 版本开始，它被分离为扩展，因此不是每个人都被强制运行它。
- en: The Viz extension provides a great many CLI tools for observing your Linkerd
    installation, along with a web-based dashboard that provides a graphical interface
    for exploring your Linkerd environment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Viz 扩展提供了许多 CLI 工具，用于观察您的 Linkerd 安装，以及一个基于 Web 的仪表盘，提供图形界面，用于探索您的 Linkerd 环境。
- en: Protecting the Viz Dashboard Is Up to You
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护 Viz 仪表盘取决于您自己
- en: As described in [Chapter 2](ch02.html#LUAR_intro_to_linkerd), there’s no user
    authentication built into the Linkerd Viz dashboard. You’ll need to tackle that
    using an API gateway or the like if you want to expose Linkerd Viz to the network—or,
    alternatively, leave the dashboard inaccessible from outside the cluster, and
    simply use the `linkerd viz dashboard` CLI command to bring up the dashboard in
    a web browser, via a port forward.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](ch02.html#LUAR_intro_to_linkerd)所述，Linkerd Viz 仪表盘中没有内置用户认证功能。如果您希望将
    Linkerd Viz 暴露给网络，您需要使用 API 网关或类似的工具来处理，或者简单地通过端口转发，在集群外部访问时将仪表盘设为不可用，并使用 `linkerd
    viz dashboard` CLI 命令在 Web 浏览器中打开仪表盘。
- en: 'Use the following command to open the Viz dashboard:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令打开 Viz 仪表盘：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now explore it on your own. Try to find the per-namespace and per-workload metrics.
    Also take a look at an individual namespace, like `emojivoto`, and explore the
    topology.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以自己探索。尝试查找按命名空间和工作负载的度量标准。还可以查看单个命名空间，例如 `emojivoto`，并探索其拓扑结构。
- en: Linkerd’s Viz dashboard includes Prometheus and can easily work with Grafana,
    as shown in [Example 10-9](#EX12-production-prometheus). As we’ve said a few times
    before, it’s *critical* to realize that the default Linkerd Viz install will create
    an in-memory Prometheus instance that is *only* viable for demo purposes, and
    *must not* be relied upon for production use. We recommend you use a separate
    Prometheus instance for collecting your Linkerd metrics.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的 Viz 仪表盘包含 Prometheus，并可以轻松与 Grafana 配合使用，如[示例10-9](#EX12-production-prometheus)所示。正如我们之前多次提到的那样，重要的是要意识到，默认的
    Linkerd Viz 安装将创建一个仅适用于演示目的的内存中 Prometheus 实例，*绝不能*依赖于生产使用。我们建议您使用单独的 Prometheus
    实例来收集 Linkerd 的指标。
- en: Linkerd and Grafana
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd 和 Grafana
- en: In earlier versions of Linkerd, `linkerd viz install` automatically installed
    Grafana. As of Linkerd 2.12, Grafana licensing changes mean that we’re no longer
    allowed to do that. Grafana still works beautifully with Linkerd Viz, but for
    Linkerd 2.12 and later you need to install it by hand and configure it to talk
    to the same Prometheus that Linkerd Viz uses.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在较早版本的 Linkerd 中，`linkerd viz install` 自动安装了 Grafana。从 Linkerd 2.12 开始，由于 Grafana
    许可证变更，我们不再允许这样做。Grafana 仍然可以与 Linkerd Viz 配合良好，但对于 Linkerd 2.12 及更高版本，您需要手动安装并配置它，使其与
    Linkerd Viz 使用相同的 Prometheus 通信。
- en: Example 10-9\. Production-ready Linkerd Viz install
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-9\. 生产就绪的 Linkerd Viz 安装
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Audit Trails and Access Logs
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计轨迹和访问日志
- en: Hardening our environments against intrusion doesn’t end at reducing the risk
    and impact of an incident. Having a strong security posture also means being able
    to rapidly detect when something abnormal has occurred and providing data that
    allows your security team to understand exactly what you have in place. For Linkerd,
    much of this data is contained in the system logs of the control plane containers,
    accessible via `kubectl log`. It’s definitely worth ensuring that you have a strategy
    for collecting and analyzing log messages that is accessible to your security
    team.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 强化我们的环境以防止入侵并不仅仅是减少事件风险和影响。拥有强大的安全姿态还意味着能够快速检测到异常事件的发生，并提供数据，使您的安全团队能够准确理解您已经采取的措施。对于Linkerd，许多这些数据包含在控制平面容器的系统日志中，可通过`kubectl
    log`访问。确保您的安全团队能够访问和分析日志消息的策略绝对值得。
- en: Beyond normal log messages and events, some users need a detailed history of
    all the HTTP requests that transit the proxy. This requires *access logging*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了普通的日志消息和事件之外，一些用户需要详细的历史记录，记录所有通过代理传输的HTTP请求。这需要*访问日志*。
- en: 'Access Logging: The Good, the Bad, and the Ugly'
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问日志：好的、坏的和丑陋的
- en: Access logging in Linkerd means the proxy will write a log message for every
    HTTP request it processes. In an environment where you have a number of services
    talking to each other, that can very quickly turn into a huge volume of log messages,
    so it’s definitely worth checking the [official Linkerd docs](https://oreil.ly/zEFj_)
    before you implement access logging. We will go into the high-level concepts and
    practical steps, but the logs are an area where things can change between versions
    of Linkerd, so be sure to test your setup after looking over the docs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd中的访问日志意味着代理将为它处理的每个HTTP请求编写一条日志消息。在一个环境中，您有多个服务彼此通信时，这可能很快变成大量的日志消息，因此在实施访问日志之前，务必查阅[官方Linkerd文档](https://oreil.ly/zEFj_)。我们将讨论高级概念和实际步骤，但日志是一个在Linkerd版本之间可能发生变化的领域，因此在查阅文档后务必测试您的设置。
- en: The good
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 好的
- en: Access logging will give you hugely detailed information about the interactions
    between your applications. It is configurable; you can emit the messages in either
    `apache` or `json` format so that they’re easier to consume programmatically.
    With access logging enabled, your security teams will have tremendous amounts
    of data to help them understand the impact and extent of any security incident.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 访问日志将为您提供关于应用程序之间交互的极其详细的信息。它是可配置的；您可以以`apache`或`json`格式发出消息，以便更容易以编程方式消费。启用访问日志后，您的安全团队将拥有大量数据，帮助他们了解任何安全事件的影响和范围。
- en: The bad
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 糟糕的
- en: Storing and processing these logs is expensive, requires significant engineering
    overhead, and uses up significant resources in your cluster. Your platform or
    security teams will need to manage log aggregation tooling and log collection
    agents on your clusters. Access logging will increase the costs of running your
    platform.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 存储和处理这些日志非常昂贵，需要显著的工程开销，并且在您的集群中消耗大量资源。您的平台或安全团队将需要管理日志聚合工具和集群上的日志收集代理。启用访问日志将增加运行平台的成本。
- en: The ugly
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不好的
- en: HTTP access logging is disabled by default in Linkerd because it has a performance
    impact on the proxies in terms of both CPU and latency. That means your application
    response times and compute costs will increase when you enable it. To what extent
    will depend very much on your level and type of traffic.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linkerd中，默认情况下禁用HTTP访问日志，因为它对代理的CPU和延迟性能有影响。这意味着启用后，您的应用响应时间和计算成本将会增加。具体影响程度将大大取决于您的流量级别和类型。
- en: Enabling Access Logging
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用访问日志
- en: 'You can set the access logging configuration at the workload, namespace, or
    Pod level. In any case, you’ll need to set the following annotation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在工作负载、命名空间或Pod级别设置访问日志配置。在任何情况下，您都需要设置以下注释：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Or:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After it’s set, you need to restart the targeted workloads to begin collecting
    logs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，您需要重新启动目标工作负载以开始收集日志。
- en: We recommend that you test the performance impacts of enabling access logging
    in your application before rolling it out to production. That will give your organization
    the data it needs to make an informed decision about access logging in Linkerd.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您在将访问日志启用到生产环境之前，测试其对应用性能的影响。这将为您的组织提供决策所需的数据，以便对Linkerd中的访问日志做出明智的决策。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Observability in Linkerd ranges from simple metrics to access logging. Linkerd
    allows us to understand the behavior, performance, and characteristics of our
    apps without requiring application developers to make any modifications. The power
    of a service mesh lies in allowing the platform team to provide observability
    to app teams as a feature of the platform. It also ensures that all apps can be
    understood and compared in a uniform fashion.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linkerd 中，可观察性从简单的指标到访问日志都有涵盖。Linkerd 允许我们了解应用程序的行为、性能和特性，而无需应用程序开发人员进行任何修改。服务网格的强大之处在于允许平台团队将可观察性作为平台功能提供给应用团队。它还确保所有应用可以以统一的方式被理解和比较。
