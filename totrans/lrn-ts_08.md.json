["```\nconst elements = [true, null, undefined, 42];\n\nelements.push(\"even\", [\"more\"]);\n// Value of elements: [true, null, undefined, 42, \"even\", [\"more\"]]\n```", "```\nconst warriors = [\"Artemisia\", \"Boudica\"];\n\n// Ok: \"Zenobia\" is a string\nwarriors.push(\"Zenobia\");\n\nwarriors.push(true);\n//            ~~~~\n// Argument of type 'boolean' is not assignable to parameter of type 'string'.\n```", "```\nlet arrayOfNumbers: number[];\n\narrayOfNumbers = [4, 8, 15, 16, 23, 42];\n```", "```\n// Type is a function that returns an array of strings\nlet createStrings: () => string[];\n\n// Type is an array of functions that each return a string\nlet stringCreators: (() => string)[];\n```", "```\n// Type is either a number or an array of strings\nlet stringOrArrayOfNumbers: string | number[];\n\n// Type is an array of elements that are each either a number or a string\nlet arrayOfStringOrNumbers: (string | number)[];\n```", "```\n// Type is (string | undefined)[]\nconst namesMaybe = [\n  \"Aqualtune\",\n  \"Blenda\",\n  undefined,\n];\n```", "```\n// Type: any[]\nlet values = [];\n\n// Type: string[]\nvalues.push('');\n\n// Type: (number | string)[]\nvalues[0] = 0;\n```", "```\nlet arrayOfArraysOfNumbers: number[][];\n\narrayOfArraysOfNumbers = [\n  [1, 2, 3],\n  [2, 4, 6],\n  [3, 6, 9],\n];\n```", "```\n// Type: number[][]\nlet arrayOfArraysOfNumbers: (number[])[];\n```", "```\nconst defenders = [\"Clarenza\", \"Dina\"];\n\n// Type: string\nconst defender = defenders[0];\n```", "```\nconst soldiersOrDates = [\"Deborah Sampson\", new Date(1782, 6, 3)];\n\n// Type: Date | string\nconst soldierOrDate = soldiersOrDates[0];\n```", "```\nfunction withElements(elements: string[]) {\n  console.log(elements[9001].length); // No type error\n}\n\nwithElements([\"It's\", \"over\"]);\n```", "```\n// Type: string[]\nconst soldiers = [\"Harriet Tubman\", \"Joan of Arc\", \"Khutulun\"];\n\n// Type: number[]\nconst soldierAges = [90, 19, 45];\n\n// Type: (string | number)[]\nconst conjoined = [...soldiers, ...soldierAges];\n```", "```\nfunction logWarriors(greeting: string, ...names: string[]) {\n  for (const name of names) {\n    console.log(`${greeting}, ${name}!`);\n  }\n}\n\nconst warriors = [\"Cathay Williams\", \"Lozen\", \"Nzinga\"];\n\nlogWarriors(\"Hello\", ...warriors);\n\nconst birthYears = [1844, 1840, 1583];\n\nlogWarriors(\"Born in\", ...birthYears);\n//                     ~~~~~~~~~~~~~\n// Error: Argument of type 'number' is not\n// assignable to parameter of type 'string'.\n```", "```\nlet yearAndWarrior: [number, string];\n\nyearAndWarrior = [530, \"Tomyris\"]; // Ok\n\nyearAndWarrior = [false, \"Tomyris\"];\n//                ~~~~~\n// Error: Type 'boolean' is not assignable to type 'number'.\n\nyearAndWarrior = [530];\n// Error: Type '[number]' is not assignable to type '[number, string]'.\n//   Source has 1 element(s) but target requires 2.\n```", "```\n// year type: number\n// warrior type: string\nlet [year, warrior] = Math.random() > 0.5\n  ? [340, \"Archidamia\"]\n  : [1828, \"Rani of Jhansi\"];\n```", "```\n// Type: (boolean | number)[]\nconst pairLoose = [false, 123];\n\nconst pairTupleLoose: [boolean, number] = pairLoose;\n//    ~~~~~~~~~~~~~~\n// Error: Type '(number | boolean)[]' is not\n// assignable to type '[boolean, number]'.\n//   Target requires 2 element(s) but source may have fewer.\n```", "```\nconst tupleThree: [boolean, number, string] = [false, 1583, \"Nzinga\"];\n\nconst tupleTwoExact: [boolean, number] = [tupleThree[0], tupleThree[1]];\n\nconst tupleTwoExtra: [boolean, number] = tupleThree;\n//    ~~~~~~~~~~~~~\n// Error: Type '[boolean, number, string]' is\n// not assignable to type '[boolean, number]'.\n//   Source has 3 element(s) but target allows only 2.\n```", "```\nfunction logPair(name: string, value: number) {\n  console.log(`${name} has ${value}`);\n}\n\nconst pairArray = [\"Amage\", 1];\n\nlogPair(...pairArray);\n// Error: A spread argument must either have a\n// tuple type or be passed to a rest parameter.\n\nconst pairTupleIncorrect: [number, string] = [1, \"Amage\"];\n\nlogPair(...pairTupleIncorrect);\n// Error: Argument of type 'number' is not\n// assignable to parameter of type 'string'.\n\nconst pairTupleCorrect: [string, number] = [\"Amage\", 1];\n\nlogPair(...pairTupleCorrect); // Ok\n```", "```\nfunction logTrio(name: string, value: [number, boolean]) {\n  console.log(`${name} has ${value[0]} (${value[1]}`);\n}\n\nconst trios: [string, [number, boolean]][] = [\n  [\"Amanitore\", [1, true]],\n  [\"Æthelflæd\", [2, false]],\n  [\"Ann E. Dunwoody\", [3, false]]\n];\n\ntrios.forEach(trio => logTrio(...trio)); // Ok\n\ntrios.forEach(logTrio);\n//            ~~~~~~~\n// Argument of type '(name: string, value: [number, boolean]) => void'\n// is not assignable to parameter of type\n// '(value: [string, [number, boolean]], ...) => void'.\n//   Types of parameters 'name' and 'value' are incompatible.\n//     Type '[string, [number, boolean]]' is not assignable to type 'string'.\n```", "```\n// Return type: (string | number)[]\nfunction firstCharAndSize(input: string) {\n  return [input[0], input.length];\n}\n\n// firstChar type: string | number\n// size type: string | number\nconst [firstChar, size] = firstCharAndSize(\"Gudit\");\n```", "```\n// Return type: [string, number]\nfunction firstCharAndSizeExplicit(input: string): [string, number] {\n  return [input[0], input.length];\n}\n\n// firstChar type: string\n// size type: number\nconst [firstChar, size] = firstCharAndSizeExplicit(\"Cathay Williams\");\n```", "```\n// Type: (string | number)[]\nconst unionArray = [1157, \"Tomoe\"];\n\n// Type: readonly [1157, \"Tomoe\"]\nconst readonlyTuple = [1157, \"Tomoe\"] as const;\n```", "```\nconst pairMutable: [number, string] = [1157, \"Tomoe\"];\npairMutable[0] = 1247; // Ok\n\nconst pairAlsoMutable: [number, string] = [1157, \"Tomoe\"] as const;\n//    ~~~~~~~~~~~~~~~\n// Error: The type 'readonly [1157, \"Tomoe\"]' is 'readonly'\n// and cannot be assigned to the mutable type '[number, string]'.\n\nconst pairConst = [1157, \"Tomoe\"] as const;\npairConst[0] = 1247;\n//        ~\n// Error: Cannot assign to '0' because it is a read-only property.\n```", "```\n// Return type: readonly [string, number]\nfunction firstCharAndSizeAsConst(input: string) {\n  return [input[0], input.length] as const;\n}\n\n// firstChar type: string\n// size type: number\nconst [firstChar, size] = firstCharAndSizeAsConst(\"Ching Shih\");\n```"]