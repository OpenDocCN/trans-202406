["```\nimport React, { useEffect } from 'react';\n\n// include the props passed to the component for later use\nconst SignUp = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign Up — Notedly';\n  });\n\n  return (\n    <div>\n      <p>Sign Up</p>\n    </div>\n  );\n};\n\nexport default SignUp;\n```", "```\n// import the signup route\nimport SignUp from './signup';\n\n// within the Pages component add the route\n<Route path=\"/signup\" component={SignUp} />\n```", "```\nimport React, { useEffect } from 'react';\n\nconst SignUp = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign Up — Notedly';\n  });\n\n  return (\n    <div>\n      <form>\n        <label htmlFor=\"username\">Username:</label>\n        <input\n          required\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          placeholder=\"username\"\n        />\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          required\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n        />\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          required\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SignUp;\n```", "```\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../components/Button';\n\nconst Wrapper = styled.div`\n border: 1px solid #f5f4f0;\n max-width: 500px;\n padding: 1em;\n margin: 0 auto;\n`;\n\nconst Form = styled.form`\n label,\n input {\n display: block;\n line-height: 2em;\n }\n\n input {\n width: 100%;\n margin-bottom: 1em;\n }\n`;\n\nconst SignUp = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign Up — Notedly';\n  });\n\n  return (\n    <Wrapper>\n      <h2>Sign Up</h2>\n      <Form>\n        <label htmlFor=\"username\">Username:</label>\n        <input\n          required\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          placeholder=\"username\"\n        />\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          required\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n        />\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          required\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </Wrapper>\n  );\n};\n\nexport default SignUp;\n```", "```\nimport React, { useEffect, useState } from 'react';\n```", "```\nconst SignUp = props => {\n  // set the default state of the form\n  const [values, setValues] = useState();\n\n// rest of component goes here\n};\n```", "```\nconst SignUp = () => {\n  // set the default state of the form\n  const [values, setValues] = useState();\n\n  // update the state when a user types in the form\n  const onChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign Up — Notedly';\n  });\n\n  return (\n    <Wrapper>\n      <h2>Sign Up</h2>\n      <Form\n        onSubmit={event => {\n          event.preventDefault();\n          console.log(values);\n        }}\n        >\n        <label htmlFor=\"username\">Username:</label>\n        <input\n          required\n          type=\"text\"\n          name=\"username\"\n          placeholder=\"username\"\n          onChange={onChange}\n        />\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          required\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          onChange={onChange}\n        />\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          required\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          onChange={onChange}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </Wrapper>\n  );\n};\n```", "```\nimport { useMutation, useApolloClient, gql } from '@apollo/client';\n```", "```\nconst SIGNUP_USER = gql`\n mutation signUp($email: String!, $username: String!, $password: String!) {\n signUp(email: $email, username: $username, password: $password)\n }\n`;\n```", "```\nconst SignUp = props => {\n  // useState, onChange, and useEffect all remain the same here\n\n  //add the mutation hook\n  const [signUp, { loading, error }] = useMutation(SIGNUP_USER, {\n   onCompleted: data => {\n     // console.log the JSON Web Token when the mutation is complete\n     console.log(data.signUp);\n   }\n });\n\n  // render our form\n  return (\n    <Wrapper>\n      <h2>Sign Up</h2>\n      {/* pass the form data to the mutation when a user submits the form */}\n      <Form\n        onSubmit={event => {\n          event.preventDefault();\n          signUp({\n            variables: {\n              ...values\n            }\n          });\n        }}\n      >\n        {/* ... the rest of the form remains unchanged ... */}\n      </Form>\n    </Wrapper>\n  );\n};\n```", "```\nconst [signUp, { loading, error }] = useMutation(SIGNUP_USER, {\n  onCompleted: data => {\n    // store the JWT in localStorage\n    localStorage.setItem('token', data.signUp);\n  }\n});\n```", "```\nconst [signUp, { loading, error }] = useMutation(SIGNUP_USER, {\n    onCompleted: data => {\n      // store the token\n      localStorage.setItem('token', data.signUp);\n      // redirect the user to the homepage\n      props.history.push('/');\n    }\n  });\n```", "```\n// import the Apollo dependencies\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\n\n// configure our API URI & cache\nconst uri = process.env.API_URI;\nconst httpLink = createHttpLink({ uri });\nconst cache = new InMemoryCache();\n\n// check for a token and return the headers to the context\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: localStorage.getItem('token') || ''\n    }\n  };\n});\n\n// create the Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  resolvers: {},\n  connectToDevTools: true\n});\n```", "```\nimport { useMutation, useApolloClient } from '@apollo/client';\n```", "```\n// Apollo Client\nconst client = useApolloClient();\n// Mutation Hook\nconst [signUp, { loading, error }] = useMutation(SIGNUP_USER, {\n  onCompleted: data => {\n    // store the token\n    localStorage.setItem('token', data.signUp);\n    // update the local cache\n    client.writeData({ data: { isLoggedIn: true } });\n    // redirect the user to the homepage\n    props.history.push('/');\n  }\n});\n```", "```\n// create the Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  resolvers: {},\n  connectToDevTools: true\n});\n```", "```\n// check for a local token\nconst data = {\n  isLoggedIn: !!localStorage.getItem('token')\n};\n\n// write the cache data on initial load\ncache.writeData({ data });\n```", "```\n// new dependencies\nimport { useQuery, gql } from '@apollo/client';\nimport { Link } from 'react-router-dom';\n\n// local query\nconst IS_LOGGED_IN = gql`\n {\n isLoggedIn @client\n }\n`;\n```", "```\nconst UserState = styled.div`\n margin-left: auto;\n`;\n\nconst Header = props => {\n  // query hook for user logged in state\n  const { data } = useQuery(IS_LOGGED_IN);\n\n  return (\n    <HeaderBar>\n      <img src={logo} alt=\"Notedly Logo\" height=\"40\" />\n      <LogoText>Notedly</LogoText>\n      {/* If logged in display a logout link, else display sign-in options */}\n      <UserState>\n        {data.isLoggedIn ? (\n          <p>Log Out</p>\n        ) : (\n          <p>\n            <Link to={'/signin'}>Sign In</Link> or{' '}\n            <Link to={'/signup'}>Sign Up</Link>\n          </p>\n        )}\n      </UserState>\n    </HeaderBar>\n  );\n};\n```", "```\nimport styled from 'styled-components';\n\nconst ButtonAsLink = styled.button`\n background: none;\n color: #0077cc;\n border: none;\n padding: 0;\n font: inherit;\n text-decoration: underline;\n cursor: pointer;\n\n :hover,\n :active {\n color: #004499;\n }\n`;\n\nexport default ButtonAsLink;\n```", "```\n// import both Link and withRouter from React Router\nimport { Link, withRouter } from 'react-router-dom';\n// import the ButtonAsLink component\nimport ButtonAsLink from './ButtonAsLink';\n```", "```\nconst Header = props => {\n  // query hook for user logged-in state,\n  // including the client for referencing the Apollo store\n  const { data, client } = useQuery(IS_LOGGED_IN);\n\n  return (\n    <HeaderBar>\n      <img src={logo} alt=\"Notedly Logo\" height=\"40\" />\n      <LogoText>Notedly</LogoText>\n      {/* If logged in display a logout link, else display sign-in options */}\n      <UserState>\n        {data.isLoggedIn ? (\n          <ButtonAsLink>\n            Logout\n          </ButtonAsLink>\n        ) : (\n          <p>\n            <Link to={'/signin'}>Sign In</Link> or{' '}\n            <Link to={'/signup'}>Sign Up</Link>\n          </p>\n        )}\n      </UserState>\n    </HeaderBar>\n  );\n};\n\n// we wrap our component in the withRouter higher-order component\nexport default withRouter(Header);\n```", "```\nconst Header = props => {\n  // query hook for user logged in state\n  const { data, client } = useQuery(IS_LOGGED_IN);\n\n  return (\n    <HeaderBar>\n      <img src={logo} alt=\"Notedly Logo\" height=\"40\" />\n      <LogoText>Notedly</LogoText>\n      {/* If logged in display a logout link, else display sign-in options */}\n      <UserState>\n        {data.isLoggedIn ? (\n          <ButtonAsLink\n            onClick={() => {\n              // remove the token\n              localStorage.removeItem('token');\n              // clear the application's cache\n              client.resetStore();\n              // update local state\n              client.writeData({ data: { isLoggedIn: false } });\n              // redirect the user to the home page\n              props.history.push('/');\n            }}\n          >\n            Logout\n          </ButtonAsLink>\n        ) : (\n          <p>\n            <Link to={'/signin'}>Sign In</Link> or{' '}\n            <Link to={'/signup'}>Sign Up</Link>\n          </p>\n        )}\n      </UserState>\n    </HeaderBar>\n  );\n};\n\nexport default withRouter(Header);\n```", "```\n// check for a local token\nconst data = {\n  isLoggedIn: !!localStorage.getItem('token')\n};\n\n// write the cache data on initial load\ncache.writeData({ data });\n// write the cache data after cache is reset\nclient.onResetStore(() => cache.writeData({ data }));\n```", "```\nimport React, { useEffect } from 'react';\n\nconst SignIn = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign In — Notedly';\n  });\n\n  return (\n    <div>\n      <p>Sign up page</p>\n    </div>\n  );\n};\n\nexport default SignIn;\n```", "```\n// import the sign-in page component\nimport SignIn from './signin';\n\nconst Pages = () => {\n  return (\n    <Router>\n      <Layout>\n        // ... our other routes\n        // add a signin route to our routes list\n        <Route path=\"/signin\" component={SignIn} />\n      </Layout>\n    </Router>\n  );\n};\n```", "```\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Button from './Button';\n\nconst Wrapper = styled.div`\n border: 1px solid #f5f4f0;\n max-width: 500px;\n padding: 1em;\n margin: 0 auto;\n`;\n\nconst Form = styled.form`\n label,\n input {\n display: block;\n line-height: 2em;\n }\n\n input {\n width: 100%;\n margin-bottom: 1em;\n }\n`;\n\nconst UserForm = props => {\n  // set the default state of the form\n  const [values, setValues] = useState();\n\n  // update the state when a user types in the form\n  const onChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return (\n    <Wrapper>\n      {/* Display the appropriate form header */}\n      {props.formType === 'signup' ? <h2>Sign Up</h2> : <h2>Sign In</h2>}\n      {/* perform the mutation when a user submits the form */}\n      <Form\n        onSubmit={e => {\n          e.preventDefault();\n          props.action({\n            variables: {\n              ...values\n            }\n          });\n        }}\n      >\n        {props.formType === 'signup' && (\n          <React.Fragment>\n            <label htmlFor=\"username\">Username:</label>\n            <input\n              required\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              placeholder=\"username\"\n              onChange={onChange}\n            />\n          </React.Fragment>\n        )}\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          required\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          onChange={onChange}\n        />\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          required\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          onChange={onChange}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </Wrapper>\n  );\n};\n\nexport default UserForm;\n```", "```\nimport React, { useEffect } from 'react';\nimport { useMutation, useApolloClient, gql } from '@apollo/client';\n\nimport UserForm from '../components/UserForm';\n\nconst SIGNUP_USER = gql`\n mutation signUp($email: String!, $username: String!, $password: String!) {\n signUp(email: $email, username: $username, password: $password)\n }\n`;\n\nconst SignUp = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign Up — Notedly';\n  });\n\n  const client = useApolloClient();\n  const [signUp, { loading, error }] = useMutation(SIGNUP_USER, {\n    onCompleted: data => {\n      // store the token\n      localStorage.setItem('token', data.signUp);\n      // update the local cache\n      client.writeData({ data: { isLoggedIn: true } });\n      // redirect the user to the homepage\n      props.history.push('/');\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <UserForm action={signUp} formType=\"signup\" />\n      {/* if the data is loading, display a loading message*/}\n      {loading && <p>Loading...</p>}\n      {/* if there is an error, display a error message*/}\n      {error && <p>Error creating an account!</p>}\n    </React.Fragment>\n  );\n};\n\nexport default SignUp;\n```", "```\nimport React, { useEffect } from 'react';\nimport { useMutation, useApolloClient, gql } from '@apollo/client';\n\nimport UserForm from '../components/UserForm';\n\nconst SIGNIN_USER = gql`\n mutation signIn($email: String, $password: String!) {\n signIn(email: $email, password: $password)\n }\n`;\n\nconst SignIn = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Sign In — Notedly';\n  });\n\n  const client = useApolloClient();\n  const [signIn, { loading, error }] = useMutation(SIGNIN_USER, {\n    onCompleted: data => {\n      // store the token\n      localStorage.setItem('token', data.signIn);\n      // update the local cache\n      client.writeData({ data: { isLoggedIn: true } });\n      // redirect the user to the homepage\n      props.history.push('/');\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <UserForm action={signIn} formType=\"signIn\" />\n      {/* if the data is loading, display a loading message*/}\n      {loading && <p>Loading...</p>}\n      {/* if there is an error, display a error message*/}\n      {error && <p>Error signing in!</p>}\n    </React.Fragment>\n  );\n};\n\nexport default SignIn;\n```", "```\nimport { useQuery, gql } from '@apollo/client';\n\nconst IS_LOGGED_IN = gql`\n {\n isLoggedIn @client\n }\n`;\n```", "```\n// update our react-router import to include Redirect\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\n// add the PrivateRoute component below our `Pages` component\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const { loading, error, data } = useQuery(IS_LOGGED_IN);\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n  // if the user is logged in, route them to the requested component\n  // else redirect them to the sign-in page\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        data.isLoggedIn === true ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/signin',\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default Pages;\n```", "```\nconst Pages = () => {\n  return (\n    <Router>\n      <Layout>\n        <Route exact path=\"/\" component={Home} />\n        <PrivateRoute path=\"/mynotes\" component={MyNotes} />\n        <PrivateRoute path=\"/favorites\" component={Favorites} />\n        <Route path=\"/note/:id\" component={Note} />\n        <Route path=\"/signup\" component={SignUp} />\n        <Route path=\"/signin\" component={SignIn} />\n      </Layout>\n    </Router>\n  );\n};\n```"]