["```\nimport './App.css'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Public from './Public'\nimport Private1 from './Private1'\nimport Private2 from './Private2'\nimport Home from './Home'\nimport SecurityProvider from './SecurityProvider'\nimport SecureRoute from './SecureRoute'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <SecurityProvider>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <SecureRoute path=\"/private1\">\n              <Private1 />\n            </SecureRoute>\n            <SecureRoute path=\"/private2\">\n              <Private2 />\n            </SecureRoute>\n            <Route exact path=\"/public\">\n              <Public />\n            </Route>\n          </Switch>\n        </SecurityProvider>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport './App.css'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Transactions from './Transactions'\nimport Offers from './Offers'\nimport Home from './Home'\nimport SecurityProvider from './SecurityProvider'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <SecurityProvider>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/transactions\">\n              <Transactions />\n            </Route>\n            <Route exact path=\"/offers\">\n              <Offers />\n            </Route>\n          </Switch>\n        </SecurityProvider>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport { useState } from 'react'\nimport SecurityContext from './SecurityContext'\nimport Login from './Login'\nimport axios from 'axios'\n\nconst SecurityProvider = (props) => {\n  const [loggedIn, setLoggedIn] = useState(true)\n\n  return (\n    <SecurityContext.Provider\n      value={{\n        login: async (username, password) => {\n          await axios.post('/api/login', { username, password })\n          setLoggedIn(true)\n        },\n        logout: async () => {\n          await axios.post('/api/logout')\n          return setLoggedIn(false)\n        },\n        onFailure() {\n          return setLoggedIn(false)\n        },\n        loggedIn,\n      }}\n    >\n      {loggedIn ? props.children : <Login />}\n    </SecurityContext.Provider>\n  )\n}\n\nexport default SecurityProvider\n```", "```\nimport useTransactions from './useTransactions'\n\nconst Transactions = () => {\n  const { data: transactions } = useTransactions()\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <main>\n        <table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Amount</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {transactions &&\n              transactions.map((trx) => (\n                <tr>\n                  <td>{trx.date}</td>\n                  <td>{trx.amount}</td>\n                  <td>{trx.description}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </main>\n    </div>\n  )\n}\n\nexport default Transactions\n```", "```\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport useSecurity from './useSecurity'\n\nconst useTransactions = () => {\n  const security = useSecurity()\n  const [transactions, setTransactions] = useState([])\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await axios.get('/api/transactions')\n        setTransactions(result.data)\n      } catch (err) {\n        const status = err.response && err.response.status\n        if (status === 401) {\n          security.onFailure()\n        }\n        // Handle other exceptions here (consider a shared\n        // error handler -- see elsewhere in the book)\n      }\n    })()\n  }, [])\n\n  return { data: transactions }\n}\n\nexport default useTransactions\n```", "```\nimport useOffers from './useOffers'\n\nconst Offers = () => {\n  const { data: offers } = useOffers()\n\n  return (\n    <div>\n      <h1>Offers</h1>\n      <main>\n        <ul>\n          {offers &&\n            offers.map((offer) => <li className=\"offer\">{offer}</li>)}\n        </ul>\n      </main>\n    </div>\n  )\n}\n\nexport default Offers\n```", "```\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport useSecurity from './useSecurity'\n\nconst useOffers = () => {\n  const security = useSecurity()\n  const [offers, setOffers] = useState([])\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await axios.get('/api/offers')\n        setOffers(result.data)\n      } catch (err) {\n        const status = err.response && err.response.status\n        if (status === 401) {\n          security.onFailure()\n        }\n        // Handle other exceptions here (consider a shared\n        // error handler -- see elsewhere in the book)\n      }\n    })()\n  }, [])\n\n  return { data: offers }\n}\n\nexport default useOffers\n```", "```\n$ cd server\n$ npm install\n$ npm run start\n```", "```\nimport axios from 'axios'\n...\n// Ask to start registering a physical token for the current user\nconst response = await axios.post('/startRegister')\n```", "```\n{\n    \"rpName\": \"Physical Token Server\",\n    \"rpID\": \"localhost\",\n    \"userID\": \"1234\",\n    \"userName\": \"freda\",\n    \"excludeCredentials\": [\n        {\"id\": \"existingKey1\", \"type\": \"public-key\"}\n    ],\n    \"authenticatorSelection\": {\n        \"userVerification\": \"discouraged\"\n    },\n    \"extensions\": {\n        \"credProps\": true\n    }\n}\n```", "```\nnavigator.credentials.create()\n```", "```\n$ npm install \"@github/webauthn-json\"\n```", "```\nimport { create } from '@github/webauthn-json'\nimport axios from 'axios'\n...\n// Ask to start registering a physical token for the current user\nconst response = await axios.post('/startRegister')\n// Pass the WebAuthn config to webauthn-json 'create' function\nconst attestation = await create({ publicKey: response.data })\n```", "```\nimport { create } from '@github/webauthn-json'\nimport axios from 'axios'\n...\n// Ask to start registering a physical token for the current user\nconst response = await axios.post('/startRegister')\n// Pass the WebAuthn config to webauthn-json 'create' function\nconst attestation = await create({ publicKey: response.data })\n// Send the details of the physical YubiKey to be stored against the user\nconst attestationResponse = await axios.post('/register', {\n  attestation,\n})\n```", "```\nimport { useState } from 'react'\nimport Logout from './Logout'\nimport axios from 'axios'\nimport { create } from '@github/webauthn-json'\n\nconst Private2 = () => {\n  const [busy, setBusy] = useState(false)\n  const [message, setMessage] = useState()\n\n  return (\n    <div className=\"Private2\">\n      <h1>Account page</h1>\n\n      {window.PublicKeyCredential && (\n        <>\n          <p>Register new hardware key</p>\n          <button\n            onClick={async () => {\n              setBusy(true)\n              try {\n                const response = await axios.post('/startRegister')\n                setMessage('Send response')\n                const attestation = await create({\n                  publicKey: response.data,\n                })\n                setMessage('Create attestation')\n                const attestationResponse = await axios.post(\n                  '/register',\n                  {\n                    attestation,\n                  }\n                )\n                setMessage('registered!')\n                if (\n                  attestationResponse.data &&\n                  attestationResponse.data.verified\n                ) {\n                  alert('New key registered')\n                }\n              } catch (err) {\n                setMessage('' + err)\n              } finally {\n                setBusy(false)\n              }\n            }}\n            disabled={busy}\n          >\n            Register\n          </button>\n        </>\n      )}\n      <div className=\"Account-message\">{message}</div>\n\n      <Logout />\n    </div>\n  )\n}\n\nexport default Private2\n```", "```\n{\n    \"allowCredentials\": [\n        {\"id\": \"existingTokenID\", \"type\": \"public-key\"}\n    ],\n    \"attestation\": \"direct\",\n    \"extensions\": {\n        \"credProps\": true,\n    },\n    \"rpID\": \"localhost\",\n    \"timeout\": 60000,\n    \"challenge\": \"someRandomString\"\n}\n```", "```\nimport axios from 'axios'\n...\n// Ask for a challenge to verify user userID\nconst response = await axios.post('/startVerify', { userID })\n```", "```\nimport { get } from '@github/webauthn-json'\nimport axios from 'axios'\n...\nconst response = await axios.post('/startVerify', { userID })\nconst assertion = await get({ publicKey: response.data })\n```", "```\nimport { get } from '@github/webauthn-json'\nimport axios from 'axios'\n...\nconst response = await axios.post('/startVerify', { userID })\nconst assertion = await get({ publicKey: response.data })\nconst resp2 = await axios.post('/verify', { userID, assertion })\nif (resp2.data && resp2.data.verified) {\n  // User is verified\n}\n```", "```\nimport { useState } from 'react'\nimport SecurityContext from './SecurityContext'\nimport { get } from '@github/webauthn-json'\nimport axios from 'axios'\n\nconst SecurityProvider = (props) => {\n  const [loggedIn, setLoggedIn] = useState(false)\n\n  return (\n    <SecurityContext.Provider\n      value={{\n        login: async (username, password) => {\n          const response = await axios.post('/login', {\n            username,\n            password,\n          })\n          const { data } = response\n          if (data.twoFactorNeeded) {\n            const userID = data.userID\n            const response = await axios.post('/startVerify', {\n              userID,\n            })\n            const assertion = await get({ publicKey: response.data })\n            const resp2 = await axios.post('/verify', {\n              userID,\n              assertion,\n            })\n            if (resp2.data && resp2.data.verified) {\n              setLoggedIn(true)\n            }\n          } else {\n            setLoggedIn(true)\n          }\n        },\n        logout: async () => {\n          await axios.post('/logout')\n          setLoggedIn(false)\n        },\n        loggedIn,\n      }}\n    >\n      {props.children}\n    </SecurityContext.Provider>\n  )\n}\nexport default SecurityProvider\n```", "```\n$ openssl genrsa -des3 -out mykey.key 2048\nGenerating RSA private key, 2048 bit long modulus\n.......................................................+++\n.................................+++\ne is 65537 (0x10001)\nEnter pass phrase for mykey.key:\nVerifying - Enter pass phrase for mykey.key:\n$\n```", "```\n$ openssl req -x509 -new -nodes -key mykey.key -sha256 -days 2048 -out mypem.pem\nEnter pass phrase for mykey.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) []:US\nState or Province Name (full name) []:Massachusetts\nLocality Name (eg, city) []:Cambridge\nOrganization Name (eg, company) []:O'Reilly Media\nOrganizational Unit Name (eg, section) []:Harmless scribes\nCommon Name (eg, fully qualified host name) []:Local\nEmail Address []:me@example.com\n$\n```", "```\n$ openssl req -new -sha256 -nodes -out myprivate.csr -newkey rsa:2048 \\\n-keyout myprivate.key \\\n-subj \"/C=US/ST=Massachusetts/L=Cambridge/O=O'Reilly \\\nMedia/OU=Harmless scribes/CN=Local/emailAddress=me@example.com\"\nGenerating a 2048 bit RSA private key\n....................+++\n..+++\nwriting new private key to 'myprivate.key'\n-----\n$\n```", "```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\nsubjectAltName=DNS:localhost\n```", "```\n$ openssl x509 -req -in myprivate.csr -CA mypem.pem -CAkey mykey.key \\\n-CAcreateserial -out \\\nmyprivate.crt -days 500 -sha256 -extfile ./extfile.txt\nSignature ok\nsubject=/C=US/ST=Massachusetts/L=Cambridge/O=O'Reilly\nMedia/OU=Harmless scribes/CN=Local/\nemailAddress=me@example.com\nGetting CA Private Key\nEnter pass phrase for mykey.key:\n$\n```", "```\nHTTPS=true\nSSL_CRT_FILE=myprivate.crt\nSSL_KEY_FILE=myprivate.key\n```", "```\n{\n    \"rpName\": \"Physical Token Server\",\n    \"rpID\": \"localhost\",\n    \"userID\": \"1234\",\n    \"userName\": \"freda\",\n    \"excludeCredentials\": [\n        {\"id\": \"existingKey1\", \"type\": \"public-key\"}\n    ],\n    \"authenticatorSelection\": {\n        \"userVerification\": \"discouraged\"\n    },\n    \"extensions\": {\n        \"credProps\": true,\n    },\n}\n```", "```\n{\n    \"rpName\": \"Physical Token Server\",\n    \"rpID\": \"localhost\",\n    \"userID\": \"1234\",\n    \"userName\": \"freda\",\n    \"excludeCredentials\": [\n        {\"id\": \"existingKey1\", \"type\": \"public-key\"}\n    ],\n    \"authenticatorSelection\": {\n        \"authenticatorAttachment\": \"platform\",\n        \"userVerification\": \"required\"\n    },\n    \"attestation\": \"direct\",\n    \"extensions\": {\n        \"credProps\": true,\n    },\n}\n```", "```\nimport { useState } from 'react'\nimport Logout from './Logout'\nimport axios from 'axios'\nimport { create } from '@github/webauthn-json'\n\nconst Private2 = () => {\n  const [busy, setBusy] = useState(false)\n  const [message, setMessage] = useState()\n\n  const registerToken = async (startRegistrationEndpoint) => {\n    setBusy(true)\n    try {\n      const response = await axios.post(startRegistrationEndpoint)\n      setMessage('Send response')\n      const attestation = await create({ publicKey: response.data })\n      setMessage('Create attestation')\n      const attestationResponse = await axios.post('/register', {\n        attestation,\n      })\n      setMessage('registered!')\n      if (\n        attestationResponse.data &&\n        attestationResponse.data.verified\n      ) {\n        alert('New key registered')\n      }\n    } catch (err) {\n      setMessage('' + err)\n    } finally {\n      setBusy(false)\n    }\n  }\n  return (\n    <div className=\"Private2\">\n      <h1>Account page</h1>\n\n      {window.PublicKeyCredential && (\n        <>\n          <p>Register new hardware key</p>\n          <button\n            onClick={() => registerToken('/startRegister')}\n            disabled={busy}\n          >\n            Register Removable Token\n          </button>\n          <button\n            onClick={() => registerToken('/startFingerprint')}\n            disabled={busy}\n          >\n            Register Fingerprint\n          </button>\n        </>\n      )}\n      <div className=\"Account-message\">{message}</div>\n\n      <Logout />\n    </div>\n  )\n}\n\nexport default Private2\n```", "```\n$ npm run start\n```", "```\n$ cd server\n$ npm run start\n```", "```\nimport { useState } from 'react'\nimport SecurityContext from './SecurityContext'\n\nconst SecurityProvider = (props) => {\n  const [loggedIn, setLoggedIn] = useState(false)\n\n  return (\n    <SecurityContext.Provider\n      value={{\n        login: (username, password) => {\n          // Note to engineering team:\n          // Maybe make this more secure...\n          if (username === 'fred' && password === 'password') {\n            setLoggedIn(true)\n          }\n        },\n        logout: () => setLoggedIn(false),\n        loggedIn,\n      }}\n    >\n      {props.children}\n    </SecurityContext.Provider>\n  )\n}\n\nexport default SecurityProvider\n```", "```\nconst security = useSecurity()\n...\n// Anywhere that we need to logout...\nsecurity.logout()\n```", "```\n// We WON'T do it like this\nconfirmLogin((success) => {\n    if (success) {\n        // Do dangerous thing here\n    } else {\n        // Handle the user canceling the login\n    }\n})\n```", "```\n// We WON'T do it like this either\nconfirmLogin(\n    () => {\n        // Do dangerous thing here\n    },\n    () => {\n        // Handle the user canceling the login\n    });\n```", "```\nimport { useRef, useState } from 'react'\nimport SecurityContext from './SecurityContext'\nimport LoginForm from './LoginForm'\n\nexport default (props) => {\n  const [showLogin, setShowLogin] = useState(false)\n  const [loggedIn, setLoggedIn] = useState(false)\n  const resolver = useRef()\n  const rejecter = useRef()\n\n  const onLogin = async (username, password) => {\n    // Note to engineering team:\n    // Maybe make this more secure...\n    if (username === 'fred' && password === 'password') {\n      setLoggedIn(true)\n    }\n  }\n  const onConfirmLogin = async (username, password) => {\n    // Note to engineering team:\n    // Same here...\n    return username === 'fred' && password === 'password'\n  }\n\n  return (\n    <SecurityContext.Provider\n      value={{\n        login: onLogin,\n        confirmLogin: async (callback) => {\n          setShowLogin(true)\n          return new Promise((res, rej) => {\n            resolver.current = res\n            rejecter.current = rej\n          })\n        },\n        logout: () => setLoggedIn(false),\n        loggedIn,\n      }}\n    >\n      {showLogin ? (\n        <LoginForm\n          onLogin={async (username, password) => {\n            const valid = await onConfirmLogin(username, password)\n            if (valid) {\n              setShowLogin(false)\n              resolver.current()\n            }\n          }}\n          onCancel={() => {\n            setShowLogin(false)\n            rejecter.current()\n          }}\n        />\n      ) : null}\n      {props.children}\n    </SecurityContext.Provider>\n  )\n}\n```", "```\nimport { useState } from 'react'\nimport Logout from './Logout'\n\nconst Private1 = () => {\n  const [message, setMessage] = useState()\n\n  const doDangerousThing = () => {\n    setMessage('DANGEROUS ACTION!')\n  }\n\n  return (\n    <div className=\"Private1\">\n      <h1>Private page 1</h1>\n\n      <button\n        onClick={() => {\n          doDangerousThing()\n        }}\n      >\n        Do dangerous thing\n      </button>\n\n      <p className=\"message\">{message}</p>\n\n      <Logout />\n    </div>\n  )\n}\n\nexport default Private1\n```", "```\nconst security = useSecurity()\n```", "```\nconst security = useSecurity()\n...\nawait security.confirmLogin()\nsetMessage('DANGEROUS ACTION!')\n```", "```\nimport { useState } from 'react'\nimport Logout from './Logout'\nimport useSecurity from './useSecurity'\n\nexport default () => {\n  const security = useSecurity()\n  const [message, setMessage] = useState()\n\n  const doDangerousThing = async () => {\n    try {\n      await security.confirmLogin()\n      setMessage('DANGEROUS ACTION!')\n    } catch (err) {\n      setMessage('DANGEROUS ACTION CANCELLED!')\n    }\n  }\n\n  return (\n    <div className=\"Private1\">\n      <h1>Private page 1</h1>\n\n      <button\n        onClick={() => {\n          doDangerousThing()\n        }}\n      >\n        Do dangerous thing\n      </button>\n\n      <p className=\"message\">{message}</p>\n\n      <Logout />\n    </div>\n  )\n}\n```", "```\n$ npm run start\n```", "```\nimport { useState } from 'react'\nimport SecurityContext from './SecurityContext'\nimport { get } from '@github/webauthn-json'\nimport axios from 'axios'\n\nconst SecurityProvider = (props) => {\n  const [loggedIn, setLoggedIn] = useState(false)\n\n  return (\n    <SecurityContext.Provider\n      value={{\n        login: async (username, password) => {\n          const response = await axios.post('/login', {\n            username,\n            password,\n          })\n          setLoggedIn(true)\n        },\n        loginWithToken: async (userID) => {\n          const response = await axios.post('/startVerify', {\n            userID,\n          })\n          const assertion = await get({ publicKey: response.data })\n          await axios.post('/verify', { userID, assertion })\n          setLoggedIn(true)\n        },\n        logout: async () => {\n          await axios.post('/logout')\n          setLoggedIn(false)\n        },\n        loggedIn,\n      }}\n    >\n      {props.children}\n    </SecurityContext.Provider>\n  )\n}\nexport default SecurityProvider\n```", "```\n$ npm install js-cookie\n```", "```\nimport Cookies from 'js-cookie'\n...\nconst userIDCookie = Cookies.get('userID')\n```", "```\nimport { useEffect, useState } from 'react'\nimport useSecurity from './useSecurity'\nimport Cookies from 'js-cookie'\n\nconst Login = () => {\n  const { login, loginWithToken } = useSecurity()\n  const [username, setUsername] = useState()\n  const [password, setPassword] = useState()\n  const userIDCookie = Cookies.get('userID')\n\n  useEffect(() => {\n    ;(async () => {\n      if (userIDCookie) {\n        loginWithToken(userIDCookie)\n      }\n    })()\n  }, [userIDCookie])\n\n  return (\n    <div>\n      <h1>Login Page</h1>\n\n      <p>You need to log in.</p>\n\n      <label htmlFor=\"username\">Username:</label>\n      <input\n        id=\"username\"\n        name=\"username\"\n        type=\"text\"\n        value={username}\n        onChange={(evt) => setUsername(evt.target.value)}\n      />\n\n      <br />\n      <label htmlFor=\"password\">Password:</label>\n      <input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        value={password}\n        onChange={(evt) => setPassword(evt.target.value)}\n      />\n\n      <br />\n      <button onClick={() => login(username, password)}>Login</button>\n    </div>\n  )\n}\n\nexport default Login\n```", "```\n$ npm run start\n```", "```\n$ cd server\n$ npm run start\n```", "```\n$ adb devices\n* daemon not running; starting now at tcp:5037\n* daemon started successfully\nList of devices attached\n25PRIFFEJZWWDFWO        device\n$\n```", "```\n$ adb shell settings put global http_proxy localhost:3000\n```", "```\n$ adb reverse tcp:3000 tcp:3000\n```", "```\n$ adb shell settings put global http_proxy :0\n```", "```\nCompiled with warnings.\n\nsrc/App.js\n Line 5:9:  'x' is assigned a value but never used  no-unused-vars\n\nSearch for the keywords to learn more about each warning.\nTo ignore, add // eslint-disable-next-line to the line before.\n```", "```\n$ npm install --save-dev eslint\n```", "```\n$ node_modules/.bin/eslint --init\n- How would you like to use ESLint? · problems\n- What type of modules does your project use? · esm\n- Which framework does your project use? · react\n- Does your project use TypeScript? · No / Yes\n- Where does your code run? · browser\n- What format do you want your config file to be in? · JavaScript\nLocal ESLint installation not found.\nThe config that you've selected requires the following dependencies:\n\neslint-plugin-react@latest eslint@latest\n- Would you like to install them now with npm? · No / Yes\n$\n```", "```\n$ npm install --save-dev eslint-plugin-react-security\n```", "```\n\"eslintConfig\": {\n  \"extends\": [\n    \"react-app\",\n    \"react-app/jest\"\n  ]\n},\n```", "```\n\"eslintConfig\": {\n  \"extends\": [\n    \"react-app\",\n    \"react-app/jest\"\n  ],\n  \"plugins\": [\n    \"react-security\"\n  ],\n  \"rules\": {\n    \"react-security/no-javascript-urls\": \"warn\",\n    \"react-security/no-dangerously-set-innerhtml\": \"warn\",\n    \"react-security/no-find-dom-node\": \"warn\",\n    \"react-security/no-refs\": \"warn\"\n  }\n},\n```", "```\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div\n          dangerouslySetInnerHTML={{\n            __html: '<p>This is a bad idea</p>',\n          }}\n        />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n```", "```\n$ node_modules/.bin/eslint src/App.js\n```", "```\nCompiled with warnings.\n\nsrc/App.js\n Line 12:16:  dangrouslySetInnerHTML prop usage detected\n react-security/no-dangerously-set-innerhtml\n\nSearch for the keywords to learn more about each warning.\nTo ignore, add // eslint-disable-next-line to the line before.\n```", "```\n<input autoCorrect=\"off\"/>\n```", "```\n<input type=\"email\"/>\n```", "```\n<input id=\"j_username\" name=\"j_username\"/>\n```", "```\n<input autoComplete=\"username\"/>\n```", "```\n<input type=\"password\"/>\n```", "```\n<input type=\"password\" autoComplete=\"current-password\"/>\n```", "```\n<input type=\"password\" autoComplete=\"new-password\"/>\n```"]