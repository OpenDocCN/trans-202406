- en: Chapter 7\. Network Policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will describe network policy and discuss its importance
    in securing a Kubernetes cluster. We will review various network policy implementations
    and tooling to support network policy implementations. We will also cover network
    policy best practices with examples.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Network Policy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network policy is the primary tool for securing a Kubernetes network. It allows
    you to easily restrict the network traffic in your cluster so only the traffic
    that you want to flow is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the significance of network policy, let’s briefly explore how
    network security was typically achieved prior to network policy. Historically
    in enterprise networks, network security was provided by designing a physical
    topology of network devices (switches, routers, firewalls) and their associated
    configuration. The physical topology defined the security boundaries of the network.
    In the first phase of virtualization, the same network and network device constructs
    were virtualized in the cloud, and the same techniques for creating specific network
    topologies of (virtual) network devices were used to provide network security.
    Adding new applications or services often required additional network design to
    update the network topology and network device configuration to provide the desired
    security.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, the Kubernetes network model defines a “flat” network in which,
    by default, every pod can communicate directly with all other pods in the cluster.
    This approach massively simplifies network design and allows new workloads to
    be scheduled dynamically anywhere in the cluster with no dependencies on the network
    design.
  prefs: []
  type: TYPE_NORMAL
- en: In this model, rather than network security being defined by network topology
    boundaries, it is defined using network policies that are independent of the network
    topology. Network policies are further abstracted from the network by using label
    selectors as their primary mechanism for defining which workloads can talk to
    which workloads, rather than IP addresses or IP address ranges.
  prefs: []
  type: TYPE_NORMAL
- en: Network policy enforcement can be thought of as each pod being protected by
    its own dedicated virtual firewall that is automatically programmed and updated
    in real time based on the network policy that has been defined. [Figure 7-1](#pod_secured_by_a_virtual_firewall)
    shows network policy enforcement at a pod using its dedicated virtual firewall.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ksao_0701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1\. Pod secured by a virtual firewall
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Why Is Network Policy Important?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an age where attackers are becoming more and more sophisticated, network
    security as a line of defense is more important than ever.
  prefs: []
  type: TYPE_NORMAL
- en: While you can (and should) use firewalls to restrict traffic at the perimeters
    of your network (commonly referred to as north-south traffic), their ability to
    police Kubernetes traffic is often limited to a granularity of the cluster as
    a whole, rather than to specific groups of pods, due to the dynamic nature of
    pod scheduling and pod IP addresses. In addition, the goal of most attackers once
    they gain a small foothold inside the perimeter is to move laterally (east-west)
    to gain access to higher-value targets, which perimeter-based firewalls can’t
    police against. With application architectures evolving from monoliths to microservices,
    the amount of east-west traffic, and therefore attack surface for lateral movement,
    is continuing to grow.
  prefs: []
  type: TYPE_NORMAL
- en: Network policy, on the other hand, is designed for the dynamic nature of Kubernetes
    by following the standard Kubernetes paradigm of using label selectors to define
    groups of pods, rather than IP addresses. And because network policy is enforced
    within the cluster itself, it can secure both north-south and east-west traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Network policy represents an important evolution of network security, not just
    because it handles the dynamic nature of modern microservices, but because it
    empowers dev and DevOps engineers to easily define network security themselves,
    rather than needing to learn low-level networking details. Network policy makes
    it easy to define intent, such as *only this microservice gets to connect to the
    database*, write that intent as code (typically in *.yaml* files), and integrate
    authoring of network policies into Git workflows and CI/CD processes.
  prefs: []
  type: TYPE_NORMAL
- en: Network Policy Implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes defines a standard network policy API, so there’s a base set of features
    you can expect on any cluster. But Kubernetes itself doesn’t do anything with
    the network policy other than store it. Enforcement of network policies is delegated
    to network plug-ins, allowing for a range of implementations. Most network plug-ins
    support the mainline elements of Kubernetes network policies, though many do not
    implement every feature of the specification. It’s worth noting that most implementations
    are coupled with the network plug-in’s specific pod networking implementation.
    However, some network policy implementations can enforce network policy on top
    of a variety of different pod networking plug-ins. [Figure 7-2](#network_policy_that_is_stored_in_kubern)
    shows network policies stored in the Kubernetes datastore being used by network
    plug-ins for enforcement.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ksao_0702.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-2\. Network policy that is stored in Kubernetes enforced by network
    plug-ins
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are a number of networking and network policy implementations to choose
    from, as shown in [Figure 7-3](#adoption_of_top_networking_technology_i).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ksao_0703.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-3\. Adoption of top networking technology implementations
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'No matter what network policy implementation you choose, we recommend using
    one for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It implements the complete Kubernetes network policy specification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to supporting the Kubernetes network policy specification, its own
    policy model provides additional capabilities, which can be used alongside Kubernetes
    network policies to support additional enterprise security use cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few network plug-ins, like Weave Net, Kube-router, and Calico, can enforce
    network policy on top of their own rich set of networking capabilities, or on
    top of several other networking options, including the network plug-ins used by
    Amazon’s Elastic Kubernetes Service (EKS), Azure Kubernetes Service (AKS), and
    Google Kubernetes Engine (GKE). This makes them a particularly strong choice as
    part of a multicloud strategy, because it gives you the flexibility to select
    the best networking for your environment from a broad range of options with the
    same rich set of network policy features available across all environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network policy can be applied to host endpoints/interfaces, allowing the
    same flexible policy model to be used to secure Kubernetes nodes or noncluster
    hosts/VMs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports network policy that is enforced both at the network/infrastructure
    layer and at the layers above, including supporting L5–L7 match criteria with
    its policy rules such as HTTP methods and paths. The multiple enforcement points
    help protect your infrastructure from compromised workloads and protect your workloads
    from compromised infrastructure. It also avoids the need for dual provisioning
    of security at the application and infrastructure layers, or having to learn different
    policy models for each layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to be production-grade, which means it must perform very well in clusters
    of any size, from single-node clusters to several-thousand-node clusters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides the ability for enterprises to add new capabilities and serves as
    a building block for an enterprise-grade Kubernetes network security solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Policy Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we’ll explore how to implement network policy with examples
    and cover best practices for implementation. The following examples use the Calico
    network policy schema, which extends the Kubernetes network policy schema. We’re
    using these examples due to our familiarity with Calico network policy, but these
    best practices can be implemented with other available network policy models as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Ingress and Egress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When people think about network security, the first thought is often of how
    to protect your workloads from north-south external attackers. To help defend
    against this, you can use network policy to restrict ingress traffic to any pods
    that are reachable from outside the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: However, when an attacker does manage to find a vulnerability, they often use
    the compromised workload as the place from which to move laterally, probing the
    rest of your network to exploit additional vulnerabilities that give them access
    to more valuable resources or allow them to elevate privileges to mount more powerful
    attacks or exfiltrate sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have network policies to restrict ingress traffic on all pods in
    the cluster, the lateral movement may target assets outside of the cluster, which
    are less well protected. Consequently, the best practice is to always define both
    ingress and egress network policy rules for every pod in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: While this doesn’t guarantee an attacker cannot find additional vulnerabilities,
    it does significantly reduce the available attack surface, making the attacker’s
    job much harder. In addition, if combined with suitable alerting of policy violations,
    the time to identify that a workload has been compromised can be massively reduced.
    To put this into perspective, in the 2020 IBM Cost of a Data Breach Report, IBM
    reported that on average it took enterprises 207 days to identify a breach, and
    a further 73 days to contain it! With correctly authored network policies and
    alerting of violations, the breach can be prevented or reduced potentially to
    minutes or seconds and even opens the possibility of automated responses to quarantine
    the suspect workload if desired.
  prefs: []
  type: TYPE_NORMAL
- en: Not Just Mission-Critical Workloads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Best practice already recommends ensuring every pod has a network policy that
    restricts its ingress and egress traffic. What this means is that when you are
    thinking about how to protect your mission-critical workloads, you really need
    to be protecting all workloads. If you don’t, then some seemingly unimportant,
    innocuous workload could end up being used as the base for attacks across the
    rest of your network, ultimately leading to the downfall of your most critical
    workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Policy and Label Schemas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the strengths of Kubernetes labels and network policies is the flexibility
    in how you can use them. However, as a result there are often multiple different
    ways of labeling and writing policies that can achieve the same particular goal.
    So another best practice is to consider standardizing the way you label your pods
    and write your network policies using a consistent schema or design pattern. This
    can make authoring and understanding the intent of each network policy much more
    straightforward, especially if your clusters are hosting a large number of microservices.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you might say every pod will have an “app” label that identifies
    which microservice it is, and every pod will have a single network policy applied
    to it using that app label, with the policy defining ingress and egress rules
    for the microservices it is expected to interact with, again using the app label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you might decide to use permission-style labels in the policy rules so that
    rather than listing the microservices that are allowed to access each service
    in its ingress rules, any microservice that has the permission label is allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This could make it easier for individual microservice teams to author their
    own network policies without needing to know the full list of other microservices
    that must consume the service.
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of other ways you could go about it, and there is no right
    or wrong here. But taking the time to define how to approach labeling and defining
    network policies up front can make life significantly easier in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not sure which approach will work best for you, then a simple “app”
    approach is a good place to start. This can always be expanded later to include
    the ideas of permission-style labels for microservices that have a lot of clients
    if maintaining the policy rules becomes time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: Default Deny and Default App Policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kubernetes network policy specification allows all ingress pod traffic,
    unless there is one or more network policy with an ingress rule that applies to
    the pod, and then only the ingress traffic that is explicitly allowed by the policies
    is allowed. And likewise for egress pod traffic. As a result, if you forget to
    write a network policy for a new microservice, it will be left unsecured. And
    if you forget to write both ingress and egress rules for the microservice, then
    it will be left partially unsecured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given this, a good practice is to put in place a “default deny policy” that
    prevents any traffic that is not explicitly allowed by another network policy.
    The way this is normally done is to have a policy that specifies it applies to
    all pods, with both ingress and egress rules, but does not explicitly allow any
    traffic itself. As a result, if no other network policy applies that explicitly
    allows the traffic, then the traffic will be denied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since Kubernetes network policy is namespaced, the network policy mentioned
    previously needs repeating for each namespace and ideally needs to be built into
    the standard operating procedure for provisioning new namespaces in the cluster.
    Alternatively, some network policy implementations go beyond Kubernetes network
    policy and provide the ability to specify cluster-wide network policies (that
    are not limited to a single namespace). The following example shows how to create
    a policy that switches the whole cluster to default deny behavior, including any
    namespaces that are created in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: However, it’s worth noting that this policy applies to all pods, not just application
    pods, including control plane pods for Kubernetes. If you do not have the right
    network policies in place or failsafe ports configured before you create such
    a policy, you can break your cluster in pretty bad ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'A much less high-stakes best practice is to define a network policy that applies
    only to pods, excluding control plane pods. As well as triggering default deny
    behavior, this policy can include any rules that you want to apply to all application
    pods. For example, you could include a rule that allows all application pods to
    access kube-DNS. This helps simplify any per-microservice policies that need writing
    so they can focus solely on the desired per-microservice specific behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As this policy deliberately excludes control plane components, to secure the
    control plane you can write specific policies for each control plane component.
    It is best to do any such policy creation at cluster creation time before the
    cluster is hosting workloads, since getting these policies wrong can leave your
    cluster in a broken state that might result in a significant production outage.
    In addition, it is highly recommended you always make sure you have in place the
    correct failsafe ports for the network plug-in you are using before you start
    trying to create any policies for the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: Policy Tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we explore tools at your disposal to effectively add network
    policies to your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Development Processes and Microservices Benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the advantages of network policy compared with traditional network security
    controls is that defining network policy does not require networking or firewall
    expertise. Network policies use the same concepts and paradigms as other Kubernetes
    resources. In theory, any team that is familiar with deploying microservices in
    Kubernetes can easily master network policies. As a result, network policy represents
    an opportunity to adopt a shift-left philosophy for network security, where network
    security is defined earlier in the development cycle, rather than being defined
    late in the process. This is a great opportunity for the security and development
    teams to collaborate to secure your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, many organizations are moving from monolith application architectures
    to microservice architectures, often with one of the goals being to increase development
    and organizational agility. In such an approach, each microservice is typically
    maintained by a single development team, with that team having significant expertise
    on the microservice, but not necessarily the whole of the application that the
    microservice is a part of. The move to microservices complements the shift-left
    opportunity of network policy. The team responsible for the development of a microservice
    normally has a good understanding of which other microservices it consumes and
    depends on. They may also have a good understanding of which microservices consume
    their microservice.
  prefs: []
  type: TYPE_NORMAL
- en: When coupled with a well-defined, standardized approach to policy and label
    schemas, this puts them in a strong position to implement network policies for
    their microservice as part of the development of the microservice. In this model,
    network policy is treated as code built into and tested during the development
    process, just like any other critical part of a microservice’s code.
  prefs: []
  type: TYPE_NORMAL
- en: An equally valid approach is to have development teams focus purely on the internals
    of the microservices they are responsible for and leave responsibility for operating
    the microservices with DevOps teams. However, the same ideas still apply. Such
    a DevOps team typically needs a good understanding of the dependencies between
    the microservices they are responsible for operating in order to manage the operation
    of the application and life cycle of the microservices. Network security can be
    defined as code by the DevOps team and tested just like they would any other operational
    code or scripts they develop before using in production.
  prefs: []
  type: TYPE_NORMAL
- en: The reality today, of course, is that many organizations are some way off from
    achieving this nirvana of microservices, agility, and shift-left security. Network
    security may come much later in the organization’s processes, or even as an afterthought
    on a system already in production. In such scenarios, defining network policies
    may be significantly more challenging, and getting network policies wrong could
    have significant production impacts. The good news is that there are a range of
    tools to help with network policy life cycle management to make this easier, including
    policy recommendations, policy impact previews, and policy staging/audit modes.
  prefs: []
  type: TYPE_NORMAL
- en: Policy Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Policy recommendation tools are a great help in scenarios where the team responsible
    for network security does not have a good, confident understanding of all the
    network dependencies between the applications or microservices they need to secure.
    These tools also help you get started with authoring network policies the right
    way, and make the creation of network policy significantly easier than writing
    it by hand.
  prefs: []
  type: TYPE_NORMAL
- en: The way recommendation tools usually work is to analyze the network traffic
    to and from each microservices over a period of time. This means to get recommendations,
    the microservice needs to be running in production, or a staging or test environment
    that accurately reflects the production interactions between the microservice
    and the rest of the application.
  prefs: []
  type: TYPE_NORMAL
- en: There are many policy recommendation tools available to choose from, often with
    varying levels of sophistication, degrees of Kubernetes awareness, and policy
    schema approaches. It is recommended that you use a Kubernetes-aware policy recommendation
    engine built into your network policy solution.
  prefs: []
  type: TYPE_NORMAL
- en: Policy Impact Previews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Policy impact preview tools provide a way of sanity-checking a network policy
    before it is applied to the cluster. Like policy recommendations, this is usually
    done by analyzing the cluster’s historical network traffic over a period of time
    and calculating which network flows would have been impacted by the new policy.
    An example is to identify any flows that were previously allowed that would now
    be denied, and any flows that were previously denied that would now be allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Policy impact previews are a great help in any scenarios where you are not relying
    completely on policy recommendations. For example, this could be if you are defining
    network policies by hand or modifying a policy recommendation to align with a
    particular standardized approach to policy and label schemas. Even if the team
    defining the network policy for a microservice has high confidence in their understanding
    of the microservice’s network dependencies, policy impact previews can be invaluable
    to help catch any accidental mistakes, such as hard-to-spot typos, that might
    significantly impact legitimate network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Policy impact preview tools are less common than policy recommendations. It
    is very useful to use a tool that provides a visual representation of the impact
    based on analysis of the flow log data it collects over any desired time period.
    This will help in reducing issues due to incorrectly authored policies or outages
    due to operator error.
  prefs: []
  type: TYPE_NORMAL
- en: Policy Staging and Audit Modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even less common than policy impact previews, but potentially even more valuable,
    is support for policy staging, sometimes called policy audit mode.
  prefs: []
  type: TYPE_NORMAL
- en: Policy staging allows network policy changes to be applied to the cluster without
    impacting network traffic. The staged policy then records the full details of
    all the flows it would have interacted with, without actually impacting any of
    the flows. This is incredibly useful in scenarios where a policy impact preview
    of an individual policy against historical data may be overly simplistic given
    the complexity of the applications running in the cluster. For example, this could
    be if multiple interdependent policies need to be updated in unison, or if there’s
    a desire to monitor the policy impact with live rather than historical network
    flows.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make the task of authoring effective network policies less daunting,
    you need to use policy recommendations and then stage policies to understand the
    impact of the policy before you promote it for enforcement. This cycle of policy
    recommendation (based on historical network flows), followed by staging (applying
    policies to current and future network flows), followed by making desired adjustments
    and then finally enforcing the policy is the best way to ensure the policy change
    would do exactly what you want.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we discussed the importance of network policy and various network
    policy implementations and tooling to help you with implementation. The following
    are some key aspects of network policy:'
  prefs: []
  type: TYPE_NORMAL
- en: Network policy should be used to secure a Kubernetes network, and it complements
    the firewalls that are implemented at the perimeter of your cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended that you choose a Kubernetes-aware implementation that extends
    the basic Kubernetes network policy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of network policy implementations that offer tooling to help
    with the implementation of network policy in a Kubernetes cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
