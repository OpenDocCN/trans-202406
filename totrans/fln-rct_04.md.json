["```\nconst btn = document.getElementById(\"myButton\");\nconst width = btn.offsetWidth; // This can trigger a reflow\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example Page</title>\n  </head>\n  <body>\n    <h1 class=\"heading\">Welcome to my page!</h1>\n    <p>This is an example paragraph.</p>\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n    </ul>\n  </body>\n</html>\n```", "```\nconst dom = {\n  type: \"document\",\n  doctype: \"html\",\n  children: [\n    {\n      type: \"element\",\n      tagName: \"html\",\n      children: [\n        {\n          type: \"element\",\n          tagName: \"head\",\n          children: [\n            {\n              type: \"element\",\n              tagName: \"title\",\n              children: \"Example Page\",\n            },\n          ],\n        },\n        {\n          type: \"element\",\n          tagName: \"body\",\n          children: [\n            {\n              type: \"element\",\n              tagName: \"h1\",\n              innerHTML: \"Welcome to my page!\",\n              children: [],\n              className: \"heading\",\n            },\n            {\n              type: \"element\",\n              tagName: \"p\",\n              children: \"This is an example paragraph.\",\n            },\n            {\n              type: \"element\",\n              tagName: \"ul\",\n              children: [\n                {\n                  type: \"element\",\n                  tagName: \"li\",\n                  children: \"Item 1\",\n                },\n                {\n                  type: \"element\",\n                  tagName: \"li\",\n                  children: \"Item 2\",\n                },\n                // ...you can fill in the rest\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n```", "```\n// Retrieve the <h1> node\nconst h1Node = document.querySelector(\".heading\");\n\n// Modify its contents\nif (h1Node) {\n  h1Node.innerHTML = \"Updated Heading!\";\n}\n\nconsole.log(h1Node);\n```", "```\n// Accessing layout properties in a more performant way\nfunction getOffsetWidthWithoutTriggeringReflow(element) {\n  let width;\n\n  // Batch all reading operations\n  const rect = element.getBoundingClientRect();\n  width = rect.width;\n\n  // ... any other reading operations\n\n  // Followed by writing operations, if any\n\n  return width;\n}\n\nconst element = document.querySelector(\".myElement\");\nconst width = getOffsetWidthWithoutTriggeringReflow(element);\nconsole.log(width);\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Reading offsetWidth example</title>\n    <style>\n      #my-div {\n        width: 100px;\n        height: 100px;\n        background-color: red;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"my-div\"></div>\n    <script>\n      var div = document.getElementById(\"my-div\");\n      console.log(div.offsetWidth);\n    </script>\n  </body>\n</html>\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <ul id=\"list\">\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n    </ul>\n  </body>\n</html>\n```", "```\nconst list = document.getElementById(\"list\");\nconst newItem = document.createElement(\"li\");\nnewItem.textContent = \"Item 4\";\nlist.appendChild(newItem);\n```", "```\nconst list = document.getElementById(\"list\");\nconst newItem = document.createElement(\"li\");\nnewItem.textContent = \"Item 1001\";\nlist.appendChild(newItem);\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example</title>\n    <style>\n      #list li {\n        background-color: #f5f5f5;\n      }\n      .highlight {\n        background-color: yellow;\n      }\n    </style>\n  </head>\n  <body>\n    <ul id=\"list\">\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n    </ul>\n    <button onclick=\"highlight()\">Highlight Item 2</button>\n    <script>\n      function highlight() {\n        const item = document.querySelector(\"#list li:nth-child(2)\");\n        item.classList.add(\"highlight\");\n      }\n    </script>\n  </body>\n</html>\n```", "```\n// Without React, developers might need checks for\n// browser-specific properties\nconst targetElement = event.target || event.srcElement;\n\n// In React, thanks to SyntheticEvent, it's consistent\nfunction handleClick(event) {\n  const target = event.target;\n  // ... rest of the code\n}\n```", "```\nconst fragment = document.createDocumentFragment();\nfor (let i = 0; i < 100; i++) {\n  const li = document.createElement(\"li\");\n  li.textContent = `Item ${i + 1}`;\n  fragment.appendChild(li);\n}\ndocument.getElementById(\"myList\").appendChild(fragment);\n```", "```\nconst element = React.createElement(\n  \"div\",\n  { className: \"my-class\" },\n  \"Hello, world!\"\n);\n```", "```\n{\n  $$typeof: Symbol(react.element),\n  type: \"div\",\n  key: null,\n  ref: null,\n  props: {\n    className: \"my-class\",\n    children: \"Hello, world!\"\n  },\n  _owner: null,\n  _store: {}\n}\n```", "```\nconst MyComponent = (props) => {\n  return <div>{props.text}</div>;\n};\n\nconst myElement = <MyComponent text=\"Hello, world!\" />;\n```", "```\n{\n  $$typeof: Symbol(react.element),\n  type: MyComponent,\n  key: null,\n  ref: null,\n  props: {\n    text: \"Hello, world!\"\n  },\n  _owner: null,\n  _store: {}\n}\n```", "```\nconst myElement = <div>Hello, world!</div>;\n```", "```\nfunction Parent() {\n  return <Child />;\n}\n\nfunction Child() {\n  const element = <div>Hello, world!</div>;\n  console.log(element._owner); // Parent\n  return element;\n}\n```", "```\n{\n  validation: null,\n  key: null,\n  originalProps: { className: 'my-class', children: 'Hello, world!' },\n  props: { className: 'my-class', children: 'Hello, world!' },\n  _self: null,\n  _source: { fileName: 'MyComponent.js', lineNumber: 10 },\n  _owner: {\n    _currentElement: [Circular], _debugID: 0, stateNode: [MyComponent]\n  },\n  _isStatic: false,\n  _warnedAboutRefsInRender: false,\n}\n```", "```\n// Using React's createElement\nconst divElement = React.createElement(\n  \"div\",\n  { className: \"my-class\" },\n  \"Hello, World!\"\n);\n\n// Using the DOM API's createElement\nconst divElement = document.createElement(\"div\");\ndivElement.className = \"my-class\";\ndivElement.textContent = \"Hello, World!\";\n```", "```\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```", "```\nfunction App() {\n  const [count, setCount] = React.useState(0);\n\n  return React.createElement(\n    \"div\",\n    null,\n    React.createElement(\"h1\", null, \"Count: \", count),\n    React.createElement(\n      \"button\",\n      { onClick: () => setCount(count + 1) },\n      \"Increment\"\n    )\n  );\n}\n```", "```\ndiv\n├─ h1\n│  └─ \"Count: 0\"\n└─ button\n   └─ \"Increment\"\n```", "```\ndiv\n├─ h1\n│  └─ \"Count: 1\"\n└─ button\n   └─ \"Increment\"\n```", "```\nimport React, { useState } from \"react\";\n\nconst ChildComponent = ({ message }) => {\n  return <div>{message}</div>;\n};\n\nconst ParentComponent = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <ChildComponent message=\"This is a static message\" />\n    </div>\n  );\n};\n\nexport default ParentComponent;\n```"]