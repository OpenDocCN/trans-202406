["```\n$ npm install --save-dev \"@testing-library/react\"\n$ npm install --save-dev \"@testing-library/jest-dom\"\n$ npm install --save-dev \"@testing-library/user-event\"\n```", "```\ndescribe('App', () => {\n  it('should tell you when you win', () => {\n    // Given we've rendered the app\n    // When we enter the correct answer\n    // Then we are told that we've won\n  })\n})\n```", "```\nimport { render } from '@testing-library/react'\nimport App from './App'\n\ndescribe('App', () => {\n  it('should tell you when you win', () => {\n    // Given we've rendered the app\n    render(<App />)\n\n    // When we enter the correct answer\n    // Then we are told that we've won\n  })\n})\n```", "```\nconst input = screen.getByLabelText(/guess:/i)\n```", "```\nconst { container } = render(<App />)\nconst theInput = container.querySelector('#guess')\n```", "```\n<div className=\"Question-detail\">\n  <div data-testid=\"number1\" className=\"number1\">\n    {pair && pair[0]}\n  </div>\n  &times;\n  <div data-testid=\"number2\" className=\"number2\">\n    {pair && pair[1]}\n  </div>\n  ?\n</div>\n```", "```\nimport { render, screen } from '@testing-library/react'\nimport App from './App'\n\ndescribe('App', () => {\n  it('should tell you when you win', () => {\n    // Given we've rendered the app\n    render(<App />)\n\n    // When we enter the correct answer\n    const number1 = screen.getByTestId('number1').textContent\n    const number2 = screen.getByTestId('number2').textContent\n    const input = screen.getByLabelText(/guess:/i)\n    const submitButton = screen.getByText('Submit')\n    // Err...\n\n    // Then we are told that we've won\n  })\n})\n```", "```\nimport { render, screen } from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport App from './App'\n\ndescribe('App', () => {\n  it('should tell you when you win', () => {\n    // Given we've rendered the app\n    render(<App />)\n\n    // When we enter the correct answer\n    const number1 = screen.getByTestId('number1').textContent\n    const number2 = screen.getByTestId('number2').textContent\n    const input = screen.getByLabelText(/guess:/i)\n    const submitButton = screen.getByText('Submit')\n    user.type(input, '' + parseFloat(number1) * parseFloat(number2))\n    user.click(submitButton)\n\n    // Then we are told that we've won\n  })\n})\n```", "```\n// Then we are told that we've won\nscreen.getByText(/won/i)\n```", "```\nimport { render, screen, waitFor } from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport App from './App'\n\ndescribe('App', () => {\n  it('should tell you when you win', async () => {\n    // Given we've rendered the app\n    render(<App />)\n\n    // When we enter the correct answer\n    const number1 = screen.getByTestId('number1').textContent\n    const number2 = screen.getByTestId('number2').textContent\n    const input = screen.getByLabelText(/guess:/i)\n    const submitButton = screen.getByText('Submit')\n    user.type(input, '' + parseFloat(number1) * parseFloat(number2))\n    user.click(submitButton)\n\n    // Then we are told that we've won\n    await waitFor(() => screen.findByText(/won/i), { timeout: 4000 })\n  })\n})\n```", "```\n$ npx sb init\n```", "```\nimport Question from './Question'\n\nconst Info = {\n  title: 'Question',\n}\n\nexport default Info\n\nexport const Basic = () => <Question />\n```", "```\nimport { useEffect, useState } from 'react'\nimport './Question.css'\n\nconst RANGE = 10\n\nfunction rand() {\n  return Math.floor(Math.random() * RANGE + 1)\n}\n\nconst Question = ({ refreshTime }) => {\n  const [pair, setPair] = useState()\n\n  const refresh = () => {\n    setPair((pair) => {\n      return [rand(), rand()]\n    })\n  }\n\n  useEffect(refresh, [refreshTime])\n\n  return (\n    <div className=\"Question\">\n      <div className=\"Question-detail\">\n        <div data-testid=\"number1\" className=\"number1\">\n          {pair && pair[0]}\n        </div>\n        &times;\n        <div data-testid=\"number2\" className=\"number2\">\n          {pair && pair[1]}\n        </div>\n        ?\n      </div>\n      <button onClick={refresh}>Refresh</button>\n    </div>\n  )\n}\n\nexport default Question\n```", "```\nimport { useEffect, useState } from 'react'\nimport './Question.css'\n\nconst RANGE = 10\n\nfunction rand() {\n  return Math.floor(Math.random() * RANGE + 1)\n}\n\nconst Question = ({ onAnswer, refreshTime }) => {\n  const [pair, setPair] = useState()\n  const result = pair && pair[0] * pair[1]\n\n  useEffect(() => {\n    onAnswer(result)\n  }, [onAnswer, result])\n\n  const refresh = () => {\n    setPair((pair) => {\n      return [rand(), rand()]\n    })\n  }\n\n  useEffect(refresh, [refreshTime])\n\n  return (\n    <div className=\"Question\">\n      <div className=\"Question-detail\">\n        <div data-testid=\"number1\" className=\"number1\">\n          {pair && pair[0]}\n        </div>\n        &times;\n        <div data-testid=\"number2\" className=\"number2\">\n          {pair && pair[1]}\n        </div>\n        ?\n      </div>\n      <button onClick={refresh}>Refresh</button>\n    </div>\n  )\n}\n\nexport default Question\n```", "```\n<Question/>\n```", "```\nimport { render } from '@testing-library/react'\nimport Question from './Question'\n\nconst stories = require('./Question.stories')\n\ndescribe('Question', () => {\n  it('should render all storybook stories without error', () => {\n    for (let story in stories) {\n      if (story !== 'default') {\n        let C = stories[story]\n        render(<C />)\n      }\n    }\n  })\n})\n```", "```\nonAnswer is not a function\nTypeError: onAnswer is not a function\n```", "```\nuseEffect(() => {\n  // We need to check to avoid an error\n  if (onAnswer && result) {\n    onAnswer(result)\n  }\n}, [onAnswer, result])\n```", "```\nimport { render, screen } from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport Question from './Question'\nimport { Basic, WithDisabled } from './Question.stories'\n...\nit('should disable the button when asked', () => {\n  render(<WithDisabled />)\n  const refreshButton = screen.getByRole('button')\n  expect(refreshButton.disabled).toEqual(true)\n})\n```", "```\n$ npm install --save-dev cypress\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I lose', () => {\n    // Given I started the application\n    // When I enter an incorrect answer\n    // Then the server will be told that I have lost\n  })\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I lose', () => {\n    // Given I started the application\n    cy.visit('http://localhost:3000')\n\n    // When I enter an incorrect answer\n    // Then the server will be told that I have lost\n  })\n})\n```", "```\n$ npx cypress run\n```", "```\n$ npx cypress open\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I lose', () => {\n    // Given I started the application\n    cy.visit('http://localhost:3000')\n\n    // When I enter an incorrect answer\n    cy.get('input').type('101')\n    cy.contains('Submit').click()\n\n    // Then the server will be told that I have lost\n  })\n})\n```", "```\ncy.intercept('POST', '/api/result', {\n  statusCode: 200,\n  body: '',\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I lose', () => {\n    // Given I started the application\n    cy.intercept('POST', '/api/result', {\n      statusCode: 200,\n      body: '',\n    })\n    cy.visit('http://localhost:3000')\n\n    // When I enter an incorrect answer\n    cy.get('input').type('101')\n    cy.contains('Submit').click()\n\n    // Then the server will be told that I have lost\n  })\n})\n```", "```\ncy.intercept('POST', '/api/result', {\n  statusCode: 200,\n  body: '',\n}).as('postResult')\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I lose', () => {\n    // Given I started the application\n    cy.intercept('POST', '/api/result', {\n      statusCode: 200,\n      body: '',\n    }).as('postResult')\n    cy.visit('http://localhost:3000')\n\n    // When I enter an incorrect answer\n    cy.get('input').type('101')\n    cy.contains('Submit').click()\n\n    // Then the server will be told that I have lost\n    cy.wait('@postResult').then((xhr) => {\n      expect(xhr.request.body.guess).equal(101)\n      expect(xhr.request.body.result).equal('LOSE')\n    })\n  })\n})\n```", "```\nit('should display a message if I cannot post the result', () => {\n  // Given I started the application\n  cy.intercept('POST', '/api/result', {\n    statusCode: 500,\n    body: { message: 'Bad thing happened!' },\n  }).as('postResult')\n  cy.visit('http://localhost:3000')\n\n  // When I enter an answer\n  cy.get('input').type('16')\n  cy.contains('We are unable to save the result').should('not.exist')\n  cy.contains('Submit').click()\n\n  // Then I will see an error message\n  cy.wait('@postResult')\n  cy.contains('We are unable to save the result')\n})\n```", "```\ncy.intercept('GET', '/api/widgets', {\n  statusCode: 200,\n  body: [{ id: 1, name: 'Flange' }],\n  delay: 1000,\n}).as('getWidgets')\n```", "```\n$ npm install --save-dev cypress\n```", "```\ndescribe('Offline working', () => {\n  it(\n    'should tell us when we are offline',\n    { browser: '!firefox' },\n    () => {\n      // Given we have started the application\n      // When the application is offline\n      // Then we will see a warning\n      // When the application is back online\n      // Then we will not see a warning\n    }\n  )\n})\n```", "```\ndescribe('Offline working', () => {\n  it(\n    'should tell us when we are offline',\n    { browser: '!firefox' },\n    () => {\n      // Given we have started the application\n      cy.visit('http://localhost:3000')\n\n      // When the application is offline\n      // Then we will see a warning\n      // When the application is back online\n      // Then we will not see a warning\n    }\n  )\n})\n```", "```\ncy.network({ offline: true })\ncy.network({ offline: false })\n```", "```\nCypress.Commands.add('network', (options = {}) => {\n  Cypress.automation('remote:debugger:protocol', {\n    command: 'Network.enable',\n  })\n\n  Cypress.automation('remote:debugger:protocol', {\n    command: 'Network.emulateNetworkConditions',\n    params: {\n      offline: options.offline,\n      latency: 0,\n      downloadThroughput: 0,\n      uploadThroughput: 0,\n      connectionType: 'none',\n    },\n  })\n})\n```", "```\ndescribe('Offline working', () => {\n  it(\n    'should tell us when we are offline',\n    { browser: '!firefox' },\n    () => {\n      // Given we have started the application\n      cy.visit('http://localhost:3000')\n      cy.contains(/you are currently offline/i).should('not.exist')\n\n      // When the application is offline\n      cy.network({ offline: true })\n\n      // Then we will see a warning\n      cy.contains(/you are currently offline/i).should('be.visible')\n\n      // When the application is back online\n      cy.network({ offline: false })\n\n      // Then we will not see a warning\n      cy.contains(/you are currently offline/i).should('not.exist')\n    }\n  )\n})\n```", "```\n$ npm install --save-dev selenium-webdriver\n```", "```\n$ npm install --save-dev chromedriver\n```", "```\ndescribe('Basic game functions', () => {\n  it('should tell me if I won', () => {\n    // Given I have started the application\n    // When I enter the correct answer\n    // Then I will be told that I have won\n  })\n})\n```", "```\nimport { Builder } from 'selenium-webdriver'\nlet driver\n\ndescribe('Basic game functions', () => {\n  beforeEach(() => {\n    driver = new Builder().forBrowser('chrome').build()\n  })\n\n  afterEach(() => {\n    driver.quit()\n  })\n\n  it('should tell me if I won', () => {\n    // Given I have started the application\n    // When I enter the correct answer\n    // Then I will be told that I have won\n  })\n})\n```", "```\nimport { Builder } from 'selenium-webdriver'\nrequire('chromedriver')\n\nlet driver\n\ndescribe('Basic game functions', () => {\n  beforeEach(() => {\n    driver = new Builder().forBrowser('chrome').build()\n  })\n\n  afterEach(() => {\n    driver.quit()\n  })\n\n  it('should tell me if I won', () => {\n    // Given I have started the application\n    // When I enter the correct answer\n    // Then I will be told that I have won\n  })\n})\n```", "```\nimport { Builder } from 'selenium-webdriver'\nrequire('chromedriver')\n\nlet driver\n\ndescribe('Basic game functions', async () => {\n  beforeEach(() => {\n    driver = new Builder().forBrowser('chrome').build()\n  })\n\n  afterEach(() => {\n    driver.quit()\n  })\n\n  it('should tell me if I won', () => {\n    // Given I have started the application\n    await driver.get('http://localhost:3000')\n    // When I enter the correct answer\n    // Then I will be told that I have won\n  }, 60000)\n})\n```", "```\nconst number1 = await driver.findElement(By.css('.number1')).getText()\nconst number2 = await driver.findElement(By.css('.number2')).getText()\nconst input = await driver.findElement(By.css('input'))\nconst submit = await driver.findElement(\n  By.xpath(\"//button[text()='Submit']\")\n)\n```", "```\nconst [number1, number2, input, submit] = await Promise.all([\n  driver.findElement(By.css('.number1')).getText(),\n  driver.findElement(By.css('.number2')).getText(),\n  driver.findElement(By.css('input')),\n  driver.findElement(By.xpath(\"//button[text()='Submit']\")),\n])\n```", "```\nimport { Builder, By } from 'selenium-webdriver'\nrequire('chromedriver')\n\nlet driver\n\ndescribe('Basic game functions', async () => {\n  beforeEach(() => {\n    driver = new Builder().forBrowser('chrome').build()\n  })\n\n  afterEach(() => {\n    driver.quit()\n  })\n\n  it('should tell me if I won', () => {\n    // Given I have started the application\n    await driver.get('http://localhost:3000')\n    // When I enter the correct answer\n    const [number1, number2, input, submit] = await Promise.all([\n      driver.findElement(By.css('.number1')).getText(),\n      driver.findElement(By.css('.number2')).getText(),\n      driver.findElement(By.css('input')),\n      driver.findElement(By.xpath(\"//button[text()='Submit']\")),\n    ])\n    await input.sendKeys('' + number1 * number2)\n    await submit.click()\n    // Then I will be told that I have won\n  }, 60000)\n})\n```", "```\nconst resultText = await driver\n  .findElement(By.css('.Result'))\n  .getText()\nexpect(resultText).toMatch(/won/i)\n```", "```\nno such element: Unable to locate element: {\"method\":\"css selector\",\n \"selector\":\".Result\"}\n (Session info: chrome=88.0.4324.192)\nNoSuchElementError: no such element: Unable to locate element: {\n \"method\":\"css selector\",\"selector\":\".Result\"}\n (Session info: chrome=88.0.4324.192)\n```", "```\nawait driver.wait(until.elementLocated(By.css('.Result')))\nconst resultElement = driver.findElement(By.css('.Result'))\nawait driver.wait(until.elementTextMatches(resultElement, /won/i))\n```", "```\nimport { Builder, By } from 'selenium-webdriver'\nrequire('chromedriver')\n\nlet driver\n\ndescribe('Basic game functions', async () => {\n  beforeEach(() => {\n    driver = new Builder().forBrowser('chrome').build()\n  })\n\n  afterEach(() => {\n    driver.quit()\n  })\n\n  it('should tell me if I won', () => {\n    // Given I have started the application\n    await driver.get('http://localhost:3000')\n    // When I enter the correct answer\n    const [number1, number2, input, submit] = await Promise.all([\n      driver.findElement(By.css('.number1')).getText(),\n      driver.findElement(By.css('.number2')).getText(),\n      driver.findElement(By.css('input')),\n      driver.findElement(By.xpath(\"//button[text()='Submit']\")),\n    ])\n    await input.sendKeys('' + number1 * number2)\n    await submit.click()\n    // Then I will be told that I have won\n    await driver.wait(until.elementLocated(By.css('.Result')))\n    const resultElement = driver.findElement(By.css('.Result'))\n    await driver.wait(until.elementTextMatches(resultElement, /won/i))\n  }, 60000)\n})\n```", "```\n$ npx sb init\n```", "```\n$ npm install --save-dev selenium-webdriver\n```", "```\n$ npm install --save-dev geckodriver\n$ npm install --save-dev chromedriver\n```", "```\n$ npm run storybook\n```", "```\nimport { Builder, By, until } from 'selenium-webdriver'\n\nrequire('chromedriver')\nlet fs = require('fs')\n\ndescribe('shots', () => {\n  it('should take screenshots of storybook components', async () => {\n    const browserEnv = process.env.SELENIUM_BROWSER || 'chrome'\n    const url = process.env.START_URL || 'http://localhost:6006'\n    const driver = new Builder().forBrowser('chrome').build()\n    driver.manage().window().setRect({\n      width: 1200,\n      height: 900,\n      x: 0,\n      y: 0,\n    })\n\n    const outputDir = './screenshots/' + browserEnv\n    fs.mkdirSync(outputDir, { recursive: true })\n\n    await driver.get(url)\n\n    await driver.wait(\n      until.elementLocated(By.className('sidebar-item')),\n      60000\n    )\n    let elements = await driver.findElements(\n      By.css('button.sidebar-item')\n    )\n    for (let e of elements) {\n      const expanded = await e.getAttribute('aria-expanded')\n      if (expanded !== 'true') {\n        await e.click()\n      }\n    }\n    let links = await driver.findElements(By.css('a.sidebar-item'))\n    for (let link of links) {\n      await link.click()\n      const s = await link.getAttribute('id')\n      let encodedString = await driver\n        .findElement(By.css('#storybook-preview-wrapper'))\n        .takeScreenshot()\n      await fs.writeFileSync(\n        `${outputDir}/${s}.png`,\n        encodedString,\n        'base64'\n      )\n    }\n\n    driver.quit()\n  }, 60000)\n})\n```", "```\n$ export SELENIUM_REMOTE_URL=http://192.168.1.16:4444/wd/hub\n```", "```\n$ export START_URL=http://192.168.1.14:6006\n```", "```\n$ export SELENIUM_BROWSER=firefox\n```", "```\n \"scripts\": {\n  ...\n  \"testShots\": \"CI=true react-scripts test --detectOpenHandles \\\n 'selenium/shots.spec.js'\"\n  }\n```", "```\n$ npm run testShots\n```", "```\n$ export SELENIUM_BROWSER=chrome\n$ npm run testShots\n```", "```\n$ compare -fuzz 15% screenshots/firefox/question--basic.png \\\n screenshots/chrome/question--basic.png difference.png\n```", "```\n$ compare -metric AE -fuzz 15% screenshots/firefox/question--basic.png\n screenshots/chrome/question--basic.png difference.png\n6774\n```", "```\n$ compare -metric AE -fuzz 15% screenshots/firefox/answer--with-disabled.png\n screenshots/chrome/answer--with-disabled.png difference3.png\n28713\n```", "```\n#!/bin/bash\nmkdir -p screenshots/diff\nexport HTML=screenshots/compare.html\necho '<body><ul>' > $HTML\nfor file in screenshots/chrome/*.png\ndo\n FROM=$file\n TO=$(echo $file | sed 's/chrome/firefox/')\n DIFF=$(echo $file | sed 's/chrome/diff/')\n echo \"FROM $FROM TO $TO\"\n ls -l $FROM\n ls -l $TO\n METRIC=$(compare -metric AE -fuzz 15% $FROM $TO $DIFF 2>&1)\n echo \"<li>$FROM $METRIC<br/><img src=../$DIFF/></li>\" >> $HTML\ndone\necho \"</li></body>\" >> $HTML\n```", "```\n<script>\n    (function () {\n        var src = '//cdn.jsdelivr.net/npm/eruda';\n        if (!/eruda=true/.test(window.location)\n            && localStorage.getItem('active-eruda') != 'true') return;\n        document.write('<scr' + 'ipt src=\"' + src\n            + '\"></scr' + 'ipt>');\n        document.write('<scr' + 'ipt>');\n        document.write('window.addEventListener(' +\n            '\"load\", ' +\n            'function () {' +\n            '  var container=document.createElement(\"div\"); ' +\n            '  document.body.appendChild(container);' +\n            '  eruda.init({' +\n            '    container: container,' +\n            '    tool: [\"console\", \"elements\"]' +\n            '  });' +\n            '})');\n        document.write('</scr' + 'ipt>');\n    })();\n</script>\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I lose', () => {\n    // Given I started the application\n    // When I enter an incorrect answer\n    // Then the server will be told that I have lost\n  })\n})\n```", "```\nconst [number1, number2, input, submit] = await Promise.all([\n  driver.findElement(By.css('.number1')).getText(),\n  driver.findElement(By.css('.number2')).getText(),\n  driver.findElement(By.css('input')),\n  driver.findElement(By.xpath(\"//button[text()='Submit']\")),\n])\nawait input.sendKeys('' + number1 * number2)\nawait submit.click()\n```", "```\nconst sinon = require('sinon')\n\nfunction makeRandomAlways(result) {\n  if (Math.random.restore) {\n    Math.random.restore()\n  }\n  sinon.stub(Math, 'random').returns(result)\n}\n```", "```\nMath.random() * 10 + 1\n```", "```\nit('should tell you that you entered the right answer', async () => {\n  // Given we've rendered the app\n  makeRandomAlways(0.5)\n  render(<App />)\n\n  // When we enter the correct answer\n  const input = screen.getByLabelText(/guess:/i)\n  const submitButton = screen.getByText('Submit')\n  user.type(input, '36')\n  user.click(submitButton)\n\n  // Then we are told that we've won\n  await waitFor(() => screen.findByText(/won/i), { timeout: 4000 })\n})\n```", "```\nCypress.Commands.add('random', (result) => {\n  cy.reload().then((win) => {\n    if (win.Math.random.restore) {\n      win.Math.random.restore()\n    }\n    sinon.stub(win.Math, 'random').returns(result)\n  })\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should notify the server if I win', () => {\n    // Given I started the application\n    cy.intercept('POST', '/api/result', {\n      statusCode: 200,\n      body: '',\n    }).as('postResult')\n    cy.visit('http://localhost:3000')\n    cy.random(0.5)\n    cy.contains('Refresh').click()\n\n    // When I enter the correct answer\n    cy.get('input').type('36')\n    cy.contains('Submit').click()\n\n    // Then the server will be told that I have won\n    cy.wait('@postResult').then((xhr) => {\n      assert.deepEqual(xhr.request.body, {\n        guess: 36,\n        answer: 36,\n        result: 'WIN',\n      })\n    })\n  })\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should say if I timed out', () => {\n    // Given I have started a new game\n    // When 29 seconds have passed\n    // Then I will not see the time-out message\n    // When another second has passed\n    // Then I will see the time-out message\n    // And the game will be over\n  })\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should say if I timed out', () => {\n    // Given I have started a new game\n    cy.visit('http://localhost:3000')\n    cy.contains('Refresh').click()\n\n    // When 29 seconds have passed\n    // Then I will not see the time-out message\n    // When another second has passed\n    // Then I will see the time-out message\n    // And the game will be over\n  })\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should say if I timed out', () => {\n    // Given I have started a new game\n    cy.clock()\n    cy.visit('http://localhost:3000')\n    cy.contains('Refresh').click()\n\n    // When 29 seconds have passed\n    cy.tick(29000)\n\n    // Then I will not see the time-out message\n    // When another second has passed\n    // Then I will see the time-out message\n    // And the game will be over\n  })\n})\n```", "```\ndescribe('Basic game functions', () => {\n  it('should say if I timed out', () => {\n    // Given I have started a new game\n    cy.clock()\n    cy.visit('http://localhost:3000')\n    cy.contains('Refresh').click()\n\n    // When 29 seconds have passed\n    cy.tick(29000)\n\n    // Then I will not see the time-out message\n    cy.contains(/out of time/i).should('not.exist')\n\n    // When another second has passed\n    cy.tick(1000)\n\n    // Then I will see the time-out message\n    cy.contains(/out of time/i).should('be.visible')\n\n    // And the game will be over\n    cy.get('input').should('be.disabled')\n    cy.contains('Submit').should('be.disabled')\n  })\n})\n```", "```\nnew Date('2021-03-14 01:59:30 GMT-0500')\n```", "```\n$ TZ='America/New_York' npx cypress open\n```", "```\ndescribe('Timing', () => {\n  it('should tell us the current time', () => {\n    cy.clock(new Date('2021-03-14 01:59:30').getTime())\n    cy.visit('http://localhost:3000')\n    cy.contains('Show time').click()\n    cy.contains('2021-03-14T01:59:30.000').should('be.visible')\n    cy.tick(30000)\n    cy.contains('2021-03-14T03:00:00.000').should('be.visible')\n  })\n})\n```", "```\nnew Date().toLocaleString('en-US', { timeZone: 'Asia/Tokyo' })\n```"]