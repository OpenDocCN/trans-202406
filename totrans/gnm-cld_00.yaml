- en: Chapter 8\. Advanced Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you had an overview of implementing GitOps workflows
    using Argo CD recipes. Argo CD is a famous and influential open source project
    that helps with both simple use cases and more advanced ones. In this chapter,
    we will discuss topics needed when you move forward in your GitOps journey, and
    you need to manage security, automation, and advanced deployment models for multicluster
    scenarios.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Security is a critical aspect of automation and DevOps. DevSecOps is a new definition
    of an approach where security is a shared responsibility throughout the entire
    IT lifecycle. Furthermore, the [DevSecOps Manifesto](https://www.devsecops.org)
    specifies security as code to operate and contribute value with less friction.
    And this goes in the same direction as GitOps principles, where everything is
    declarative.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, this also poses the question of avoiding storing unencrypted
    plain-text credentials in Git. As stated in the book *Path to GitOps* by Christian
    Hernandez, Argo CD luckily currently provides two patterns to manage security
    in GitOps workflows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Storing encrypted secrets in Git, such as with a Sealed Secret (see [Recipe
    8.1](#recipe_8_1))
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing secrets in external services or vaults, then storing only the reference
    to such secrets in Git (see [Recipe 8.2](#recipe_8_2))
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chapter then moves to advanced deployment techniques, showing how to manage
    webhooks with Argo CD (see [Recipe 8.3](#recipe_8_3)) and with ApplicationSets
    (see [Recipe 8.4](#recipe_8_4)). ApplicationSets is a component of Argo CD that
    allows management deployments of many applications, repositories, or clusters
    from a single Kubernetes resource. In essence, a templating system for the GitOps
    application is ready to be deployed and synced in multiple Kubernetes clusters
    (see [Recipe 8.5](#recipe_8_5)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, the book ends with a recipe on Progressive Delivery for
    Kubernetes with Argo Rollouts ([Recipe 8.6](#recipe_8_6)), useful for deploying
    the application using an advanced deployment technique such as blue-green or canary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 Encrypt Sensitive Data (Sealed Secrets)
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to manage Kubernetes Secrets and encrypted objects in Git.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Sealed Secrets](https://oreil.ly/MWTNB) is an open source project by Bitnami
    used to encrypt a Kubernetes Secrets into a `SealedSecret` Kubernetes Custom Resource,
    representing an encrypted object safe to store in Git.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Sealed Secrets uses public-key cryptography and consists of two main components:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: A Kubernetes controller that has knowledge about the private and public key
    used to decrypt and encrypt encrypted secrets and is responsible for reconciliation.
    The controller also supports automatic secret rotation for the private key and
    key expiration management in order to enforce the re-encryption of secrets.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubeseal`, a CLI used by developers to encrypt their secrets before committing
    them to a Git repository.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SealedSecret` object is encrypted and decrypted only by the `SealedSecret`
    controller running in the target Kubernetes cluster. This operation is exclusive
    only to this component, thus nobody else can decrypt the object. The `kubeseal`
    CLI allows the developer to take a normal Kubernetes Secret resource and convert
    it to a `SealedSecret` resource definition as shown in [Figure 8-1](#fig8-1).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: In your Kubernetes cluster with Argo CD, you can install the `kubeseal` CLI
    for your operating system from the [GitHub project’s releases](https://oreil.ly/zmEh3).
    At the time of writing this book, we are using version 0.18.2.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On macOS, `kubeseal` is available through [Homebrew](https://brew.sh) as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Sealed Secrets with GitOps](assets/gocb_0801.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. Sealed Secrets with GitOps
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'After you install the CLI, you can install the controller as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should have output similar to the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As an example, let’s create a Secret for the Pac-Man game deployed in [Chapter 5](ch05.xhtml#ch_Helm):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should have the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here you can see the YAML representation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, you can convert the Secret into a `SealedSecret` in this way:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO1-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Here you find the data encrypted by the Sealed Secrets controller.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can safely push your `SealedSecret` to your Kubernetes manifests repo
    and create the Argo CD application. Here’s an example from [this book’s repository](https://oreil.ly/TXHRa):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Check if the app is running and healthy:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should get output similar to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 8.2 Encrypt Secrets with ArgoCD (ArgoCD + HashiCorp Vault + External Secret)
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to avoid storing credentials in Git and you want to manage them in
    external services or vaults.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Recipe 8.1](#recipe_8_1) you saw how to manage encrypted data in Git following
    the GitOps declarative way, but how do you avoid storing even encrypted credentials
    with GitOps?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: One solution is [External Secrets](https://oreil.ly/ytBeU), an open source project
    initially created by GoDaddy, which aims at storing secrets in external services
    or vaults from different vendors, then storing only the reference to such secrets
    in Git.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Today, External Secrets supports systems such as AWS Secrets Manager, HashiCorp
    Vault, Google Secrets Manager, Azure Key Vault, and more. The idea is to provide
    a user-friendly abstraction for the external API that stores and manages the lifecycles
    of the secrets.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: In depth, ExternalSecrets is a Kubernetes controller that reconciles Secrets
    into the cluster from a Custom Resource that includes a reference to a secret
    in an external key management system. The Custom Resource `SecretStore` specifies
    the backend containing the confidential data, and how it should be transformed
    into a Secret by defining a template, as you can see in [Figure 8-2](#fig8-2).
    The SecretStore has the configuration to connect to the external secret manager.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the `ExternalSecrets` objects can be safely stored in Git, as they do
    not contain any confidential information, but just the references to the external
    services managing credentials.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![External Secrets with Argo CD](assets/gocb_0802.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Figure 8-2\. External Secrets with Argo CD
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can install External Secrets with a Helm Chart as follows. At the time
    of writing this book, we are using version 0.5.9:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should get output similar to the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In order to begin using ExternalSecrets, you will need to set up a SecretStore
    or ClusterSecretStore resource (for example, by creating a *vault* SecretStore).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: More information on the different types of SecretStores and how to configure
    them can be found in our [GitHub page](https://oreil.ly/LQzEh).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can also install the External Secrets Operator with OLM from [OperatorHub.io](https://oreil.ly/w3x71).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: As an example with one of the providers supported, such as [HashiCorp Vault](https://oreil.ly/sg7yS),
    you can do the following.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'First download and install [HashiCorp Vault](https://oreil.ly/vjGSq) for your
    operating system and get your [Vault Token](https://oreil.ly/6Y5cS). Then create
    a Kubernetes Secret as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then create a `SecretStore` as a reference to this external system:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO2-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Hostname where your Vault is running
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO2-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Name of the Kubernetes Secret containing the vault token
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO2-3)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Key to address the value in the Kubernetes Secret containing the vault token
    content:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you can create a Secret in your Vault as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And then reference it from the `ExternalSecret` as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now you can deploy the Pac-Man game with Argo CD using External Secrets as
    follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 8.3 Trigger the Deployment of an Application Automatically (Argo CD Webhooks)
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don’t want to wait for Argo CD syncs and you want to immediately deploy
    an application when a change occurs in Git.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Argo CD polls Git repositories every three minutes to detect changes to
    the monitored Kubernetes manifests, it also supports an event-driven approach
    with webhooks notifications from popular Git servers such as GitHub, GitLab, or
    Bitbucket.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[Argo CD Webhooks](https://oreil.ly/3Ab46) are enabled in your Argo CD installation
    and available at the endpoint `/api/webhooks`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'To test webhooks with Argo CD using Minikube you can use Helm to install a
    local Git server such as [Gitea](https://docs.gitea.io), an open source lightweight
    server written in Go, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should have output similar to the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Log in to the Gitea server with the default credentials you find the in the
    *values.yaml* file from the Helm Chart [here](https://oreil.ly/Nkaeu) or define
    new ones via overriding them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Import the [Pac-Man](https://oreil.ly/LwTaC) manifests repo into Gitea.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the Argo app:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To add a webhook to Gitea, navigate to the top-right corner and click Settings.
    Select the Webhooks tab and configure it as shown in [Figure 8-3](#fig8-3):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload URL: `http://localhost:9090/api/webhooks`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Content type: `application/json`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Gitea Webhooks](assets/gocb_0803.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Figure 8-3\. Gitea Webhooks
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can omit the Secret for this example; however, it’s best practice to configure
    secrets for your webhooks. Read more from the [docs](https://oreil.ly/udDkS).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Save it and push your change to the repo on Gitea. You will see a new sync from
    Argo CD immediately after your push.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 8.4 Deploy to Multiple Clusters
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy an application to different clusters.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Argo CD supports the `ApplicationSet` resource to “templetarize” an Argo CD
    `Application` resource. It covers different use cases, but the most important
    are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Use a Kubernetes manifest to target multiple Kubernetes clusters.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy multiple applications from one or multiple Git repositories.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the `ApplicationSet` is a template file with placeholders to substitute
    at runtime, we need to feed these with some values. For this purpose, `ApplicationSet`
    has the concept of *generators*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: A generator is responsible for generating the parameters, which will finally
    be replaced in the template placeholders to generate a valid Argo CD `Application`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following `ApplicationSet`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO3-1)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Defines a generator
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO3-2)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Sets the value of the parameters
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO3-3)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Defines the `Application` resource as a template
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_advanced_topics_CO3-4)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`cluster` placeholder'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_advanced_topics_CO3-5)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`url` placeholder'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the previous file by running the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When this `ApplicationSet` is applied to the cluster, Argo CD generates and
    automatically registers two `Application` resources. The first one is:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And the second one:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Inspect the creation of both `Application` resources by running the following
    command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And the output should be similar to (trunked):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Delete both applications by deleting the `ApplicationSet` file:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Discussion
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve seen the simplest generator, but there are eight generators in total
    at the time of writing this book:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: List
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Generates `Application` definitions through a fixed list of clusters. (It’s
    the one we’ve seen previously).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Cluster
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Similar to *List* but based on the list of clusters defined in Argo CD.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Git
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Generates `Application` definitions based on a JSON/YAML properties file within
    a Git repository or based on the directory layout of the repository.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: SCM Provider
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Generates `Application` definitions from repositories within an organization.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Pull Request
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Generates `Application` definitions from open pull requests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Cluster Decision Resource
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Generates `Application` definitions using [duck-typing](https://oreil.ly/kpRkV).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Matrix
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Combines values of two separate generators.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Merge
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Merges values from two or more generators.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, we created the `Application` objects from a fixed list
    of elements. This is fine when the number of configurable environments is small;
    in the example, two clusters refer to two Git folders (`ch08/bgd-gen/staging`
    and `ch08/bgd-gen/prod`). In the case of multiple environments (which means various
    folders), we can dynamically use the *Git* generator to generate one `Application`
    per directory.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s migrate the previous example to use the Git generator. As a reminder,
    the Git directory layout used was:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new file of type `ApplicationSet` generating an `Application` for
    each directory of the configured Git repo:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO4-1)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Configures the Git repository to read layout
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO4-2)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Initial path to start scanning directories
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO4-3)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`Application` definition'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_advanced_topics_CO4-4)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: The directory paths within the Git repository matching the path wildcard (`staging`
    or `prod`)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_advanced_topics_CO4-5)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Directory path (full path)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_advanced_topics_CO4-6)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: The rightmost pathname
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the resource:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Argo CD creates two applications as there are two directories:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Also, this generator is handy when your application is composed of different
    components (service, database, distributed cache, email server, etc.), and deployment
    files for each element are placed in other directories. Or, for example, a repository
    with all operators required to be installed in the cluster:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Instead of reacting to directories, Git generator can create `Application` objects
    with parameters specified in JSON/YAML files.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet shows an example JSON file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This is an excerpt of the `ApplicationSet` to react to these files:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO5-1)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Finds all *config.json* files placed in all subdirectories of the `app`
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO5-2)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Injects the value set in *config.json*
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: This `ApplicationSet` will generate one `Application` for each *config.json*
    file in the folders matching the `path` expression.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Argo CD Generators](https://oreil.ly/EnOfl)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Duck Types](https://oreil.ly/tEFQW)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.5 Deploy a Pull Request to a Cluster
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy a preview of the application when a pull request is created.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the *pull request* generator to automatically discover open pull requests
    within a repository and create an `Application` object.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create an `ApplicationSet` reacting to any GitHub pull request annotated
    with the `preview` label created on the configured repository.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named *bgd-pr-application-set.yaml* with the following content:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO6-1)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: GitHub pull request generator
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO6-2)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Organization/user
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO6-3)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Repository
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_advanced_topics_CO6-4)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Select the target PRs
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_advanced_topics_CO6-5)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Polling time in seconds to check if there is a new PR (60 seconds)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_advanced_topics_CO6-6)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Sets the name with branch name and number
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_advanced_topics_CO6-7)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Sets the Git SHA number
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the previous file by running the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, if you list the Argo CD applications, you’ll see that none are registered.
    The reason is there is no pull request yet in the repository labeled with `preview`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Create a pull request against the repository and label it with `preview`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: In GitHub, the pull request window should be similar to [Figure 8-4](#fig-851).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![Pull request in GitHub](assets/gocb_0804.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: Figure 8-4\. Pull request in GitHub
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Wait for one minute until the `ApplicationSet` detects the change and creates
    the `Application` object.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to inspect that the change has been detected and
    registered:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Check the registration of the `Application` to the pull request:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `Application` object is automatically removed when the pull request is closed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the time of writing this book, the following pull request providers are
    supported:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitbucket
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gitea
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitLab
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ApplicationSet controller polls every `requeueAfterSeconds` interval to
    detect changes but also supports using webhook events.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: To configure it, follow [Recipe 8.3](#recipe_8_3), but also enable sending pull
    requests events too in the Git provider.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 8.6 Use Advanced Deployment Techniques
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy the application using an advanced deployment technique such
    as blue-green or canary.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [Argo Rollouts](https://oreil.ly/g4mlf) project to roll out updates
    to an application.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Argo Rollouts is a Kubernetes controller providing advanced deployment techniques
    such as blue-green, canary, mirroring, dark canaries, traffic analysis, etc. to
    Kubernetes. It integrates with many Kubernetes projects like Ambassador, Istio,
    AWS Load Balancer Controller, NGNI, SMI, or Traefik for traffic management, and
    projects like Prometheus, Datadog, and New Relic to perform analysis to drive
    progressive delivery.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Argo Rollouts to the cluster, run the following command in a terminal
    window:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Although it’s not mandatory, we recommend you install the Argo Rollouts Kubectl
    Plugin to visualize rollouts. Follow the [instructions](https://oreil.ly/1GWsz)
    to install it. With everything in place, let’s deploy the initial version of the
    BGD application.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Argo Rollouts doesn’t use the standard Kubernetes `Deployment` file, but a specific
    new Kubernetes resource named `Rollout`. It’s like a `Deployment` object, hence
    all its options are supported, but it adds some fields to configure the rolling
    update.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s deploy the first version of the application. We’ll define the canary
    release process when Kubernetes executes a rolling update, which in this case
    follows these steps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Forward 20% of traffic to the new version.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until a human decides to proceed with the process.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Forward 40%, 60%, 80% of the traffic to the new version automatically, waiting
    30 seconds between every increase.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named *bgd-rollout.yaml* with the following content:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO7-1)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Canary release
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO7-2)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: List of steps to execute
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO7-3)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Sets the ratio of canary
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_advanced_topics_CO7-4)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Rollout is paused
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_advanced_topics_CO7-5)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Pauses the rollout for 30 seconds
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_advanced_topics_CO7-6)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '`template` Deployment definition'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the resource to deploy the application. Since there is no previous deployment,
    the canary part is ignored:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Currently, there are five pods as specified in the `replicas` field:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And using the Argo Rollout Kubectl Plugin:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let’s deploy a new version to trigger a canary rolling update. Create a new
    file named *bgd-rollout-v2.yaml* with exactly the same content as the previous
    one, but change the environment variable `COLOR` value to `green`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Apply the previous resource and check how Argo Rollouts executes the rolling
    update. List the pods again to check that 20% of the pods are new while the other
    80% are the old version:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO8-1)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: New version pod
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'And do the same using the Argo Rollout Kubectl Plugin:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Remember that the rolling update process is paused until the operator executes
    a manual step to let the process continue. In a terminal window, run the following
    command:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The rollout is promoted and continues with the following steps, which is substituting
    the old version pods with new versions every 30 seconds:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The rolling update finishes with the new version progressively deployed to the
    cluster.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes doesn’t implement advanced deployment techniques natively. For this
    reason, Argo Rollouts uses the number of deployed pods to implement the canary
    release.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, Argo Rollouts integrates with Kubernetes products that
    offer advanced traffic management capabilities like [Istio](https://istio.io).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Using Istio, the traffic splitting is done correctly at the infrastructure level
    instead of playing with replica numbers like in the first example. Argo Rollouts
    integrates with Istio to execute a canary release, automatically updating the
    Istio `VirtualService` object.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you already know Istio and have a Kubernetes cluster with Istio installed,
    you can perform integration between Argo Rollouts and Istio by setting the `trafficRouting`
    from `Rollout` resource to `Istio`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a `Rollout` file with Istio configured:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO9-1)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Canary section
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO9-2)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Reference to a Kubernetes Service pointing to the new service version
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO9-3)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Reference to a Kubernetes Service pointing to the old service version
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_advanced_topics_CO9-4)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Configures Istio
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_advanced_topics_CO9-5)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Reference to the `VirtualService` where weight is updated
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_advanced_topics_CO9-6)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Name of the `VirtualService`
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_advanced_topics_CO9-7)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Route name within `VirtualService`
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_advanced_topics_CO9-8)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Deploys the Istio sidecar container
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Then, we create two Kubernetes Services pointing to the same deployment used
    to redirect traffic to the old or the new one.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Kubernetes Service is used in the `stableService` field:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And the Canary one is the same but with a different name. It’s the one used
    in the `canaryService` field:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Finally, create the Istio Virtual Service to be updated by Argo Rollouts to
    update the canary traffic for each service:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO10-1)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Stable Kubernetes Service
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_advanced_topics_CO10-2)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Canary Kubernetes Service
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_advanced_topics_CO10-3)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Route name
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'After applying these resources, we’ll get the first version of the application
    up and running:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: When any update occurs on the `Rollout` object, the canary release will start
    as described in the Solution. Now, Argo Rollouts updates the *bgd virtual service*
    weights automatically instead of playing with pod numbers.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Argo Rollouts - Kubernetes Progressive Delivery Controller](https://oreil.ly/XQ64b)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Istio - Argo Rollouts](https://oreil.ly/lKDYH)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Istio](https://istio.io)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Istio Tutorial from Red Hat](https://oreil.ly/Vzk9G)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
