- en: Chapter 8\. Periodic Job
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。周期性作业
- en: The *Periodic Job* pattern extends the *Batch Job* pattern by adding a time
    dimension and allowing the execution of a unit of work to be triggered by a temporal
    event.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*周期性作业*模式通过添加时间维度扩展了*批处理作业*模式，并允许通过时间事件触发执行工作单元。'
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: In the world of distributed systems and microservices, there is a clear tendency
    toward real-time and event-driven application interactions using HTTP and lightweight
    messaging. However, regardless of the latest trends in software development, job
    scheduling has a long history, and it is still relevant. Periodic jobs are commonly
    used for automating system maintenance or administrative tasks. They are also
    relevant to business applications requiring specific tasks to be performed periodically.
    Typical examples here are business-to-business integration through file transfer,
    application integration through database polling, sending newsletter emails, and
    cleaning up and archiving old files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式系统和微服务的世界中，有一个明显的趋势，即使用HTTP和轻量级消息传递进行实时和事件驱动的应用程序交互。然而，无论软件开发的最新趋势如何，作业调度都有着悠久的历史，而且仍然很重要。周期性作业通常用于自动化系统维护或管理任务。它们还与需要定期执行特定任务的业务应用程序相关联。这里的典型例子包括通过文件传输进行业务-to-业务集成，通过数据库轮询进行应用程序集成，发送新闻通讯邮件以及清理和归档旧文件。
- en: The traditional way of handling periodic jobs for system maintenance purposes
    has been to use specialized scheduling software or cron. However, specialized
    software can be expensive for simple use cases, and cron jobs running on a single
    server are difficult to maintain and represent a single point of failure. That
    is why, very often, developers tend to implement solutions that can handle both
    the scheduling aspect and the business logic that needs to be performed. For example,
    in the Java world, libraries such as Quartz, Spring Batch, and custom implementations
    with the `ScheduledThreadPoolExecutor` class can run temporal tasks. But similar
    to cron, the main difficulty with this approach is making the scheduling capability
    resilient and highly available, which leads to high resource consumption. Also,
    with this approach, the time-based job scheduler is part of the application, and
    to make the scheduler highly available, the whole application must be highly available.
    Typically, that involves running multiple instances of the application and at
    the same time ensuring that only a single instance is active and schedules jobs—which
    involves leader election and other distributed systems challenges.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 处理系统维护目的的周期性作业的传统方式是使用专门的调度软件或cron。然而，对于简单用例，专用软件可能昂贵，而在单个服务器上运行的cron作业难以维护并且代表单点故障。这就是为什么开发人员经常倾向于实现既能处理调度方面又能执行需要执行的业务逻辑的解决方案。例如，在Java世界中，像Quartz、Spring
    Batch以及使用ScheduledThreadPoolExecutor类的自定义实现可以运行时间任务。但与cron类似，这种方法的主要困难在于使调度能力具有弹性和高可用性，这导致资源消耗很高。此外，使用这种方法，基于时间的作业调度程序是应用程序的一部分，并且为了使调度程序高度可用，整个应用程序必须高度可用。通常，这涉及运行应用程序的多个实例，并同时确保只有一个实例处于活动状态并调度作业，这涉及领导选举和其他分布式系统挑战。
- en: In the end, a simple service that has to copy a few files once a day may end
    up requiring multiple nodes, a distributed leader election mechanism, and more.
    Kubernetes CronJob implementation solves all that by allowing scheduling of Job
    resources using the well-known cron format and letting developers focus only on
    implementing the work to be performed rather than the temporal scheduling aspect.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，一个简单的服务每天只需复制几个文件可能最终需要多个节点、分布式领导选举机制等。Kubernetes CronJob实现通过允许使用众所周知的cron格式调度作业资源来解决了所有这些问题，并且让开发人员只需关注实现要执行的工作，而不是时间调度方面。
- en: Solution
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: In [Chapter 7, “Batch Job”](ch07.html#BatchJob), we saw the use cases and the
    capabilities of Kubernetes Jobs. All of that applies to this chapter as well since
    the CronJob primitive builds on top of a Job. A CronJob instance is similar to
    one line of a Unix crontab (cron table) and manages the temporal aspects of a
    Job. It allows the execution of a Job periodically at a specified point in time.
    See [Example 8-1](#ex-cron-job) for a sample definition.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章，“批处理作业”](ch07.html#BatchJob)中，我们看到了Kubernetes Jobs的用例和能力。所有这些也适用于本章，因为CronJob原语建立在Job之上。CronJob实例类似于Unix
    crontab（cron表）的一行，并管理作业的时间方面。它允许在指定时间周期性地执行作业。参见[示例8-1](#ex-cron-job)以查看样本定义。
- en: Example 8-1\. A CronJob resource
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-1\. CronJob 资源
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_periodic_job_CO1-1)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_periodic_job_CO1-1)'
- en: Cron specification for running every three minutes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每三分钟运行一次的 Cron 表达式。
- en: '[![2](assets/2.png)](#co_periodic_job_CO1-2)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_periodic_job_CO1-2)'
- en: Job template that uses the same specification as a regular Job.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与常规作业相同的规范的作业模板。
- en: 'Apart from the Job spec, a CronJob has additional fields to define its temporal
    aspects:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了作业规范外，CronJob 还有额外的字段来定义其时间特性：
- en: '`.spec.schedule`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spec.schedule`'
- en: Crontab entry for specifying the Job’s schedule (e.g., `0 * * * *` for running
    every hour). You can also use shortcuts like `@daily` or `@hourly`. Please refer
    to the [CronJob documentation](https://oreil.ly/Qc3TA) for all available options.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指定作业计划的 crontab 条目（例如，`0 * * * *` 表示每小时运行一次）。您还可以使用 `@daily` 或 `@hourly` 等快捷方式。请参阅
    [CronJob 文档](https://oreil.ly/Qc3TA) 获取所有可用选项。
- en: '`.spec.startingDeadlineSeconds`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spec.startingDeadlineSeconds`'
- en: Deadline (in seconds) for starting the Job if it misses its scheduled time.
    In some use cases, a task is valid only if it executed within a certain timeframe,
    and it is useless when executed late. For example, if a Job is not executed in
    the desired time because of a lack of compute resources or other missing dependencies,
    it might be better to skip an execution because the data it is supposed to process
    is already obsolete. Don’t use a deadline fewer than 10 seconds since Kubernetes
    will check the Job status only every 10 seconds.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果错过了计划的执行时间，启动作业的截止时间（以秒计）。在某些用例中，任务只有在特定时间内执行才有效，而且如果执行延迟，可能会由于计算资源不足或其他依赖关系缺失而导致任务无法按时执行。例如，如果由于缺乏计算资源或其他缺失的依赖关系而未能在期望的时间内执行作业，则最好跳过执行，因为其应处理的数据已经过时。不要使用少于
    10 秒的截止时间，因为 Kubernetes 每 10 秒才会检查一次作业状态。
- en: '`.spec.concurrencyPolicy`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spec.concurrencyPolicy`'
- en: Specifies how to manage concurrent executions of Jobs created by the same CronJob.
    The default behavior `Allow` creates new Job instances even if the previous Jobs
    have not completed yet. If that is not the desired behavior, it is possible to
    skip the next run if the current one has not completed yet with `Forbid` or to
    cancel the currently running Job and start a new one with `Replace`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 指定如何管理由同一 CronJob 创建的作业的并发执行。默认行为 `Allow` 即使前一个作业尚未完成也会创建新的作业实例。如果不希望出现这种情况，可以选择如果当前作业尚未完成，则跳过下次运行
    `Forbid` 或取消当前正在运行的作业并启动新作业 `Replace`。
- en: '`.spec.suspend`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spec.suspend`'
- en: Field suspending all subsequent executions without affecting already-started
    executions. Note that this is different from a Job’s `.spec.suspend` as the start
    of new Jobs will be suspended, not the Jobs themselves.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停所有后续执行而不影响已启动的执行。请注意，这与作业的 `.spec.suspend` 不同，因为它会暂停新作业的启动，而不是作业本身。
- en: '`.spec.successfulJobsHistoryLimit` and `.spec.failedJobsHistoryLimit`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spec.successfulJobsHistoryLimit` 和 `.spec.failedJobsHistoryLimit`'
- en: Fields specifying how many completed and failed Jobs should be kept for auditing
    purposes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如何保留完成和失败作业以进行审核目的的字段。
- en: CronJob is a very specialized primitive, and it applies only when a unit of
    work has a temporal dimension. Even if CronJob is not a general-purpose primitive,
    it is an excellent example of how Kubernetes capabilities build on top of one
    another and support noncloud native use cases as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CronJob 是一种非常专门化的原语，仅在工作单元具有时间维度时适用。即使 CronJob 不是通用的原语，它也是 Kubernetes 能力如何相互构建并支持非云本地使用案例的一个很好的例子。
- en: Discussion
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: As you can see, a CronJob is a pretty simple primitive that adds clustered,
    cron-like behavior to the existing Job definition. But when it is combined with
    other primitives such as Pods, container resource isolation, and other Kubernetes
    features such as those described in [Chapter 6, “Automated Placement”](ch06.html#AutomatedPlacement),
    or [Chapter 4, “Health Probe”](ch04.html#HealthProbe), it ends up being a very
    powerful job-scheduling system. This enables developers to focus solely on the
    problem domain and implement a containerized application that is responsible only
    for the business logic to be performed. The scheduling is performed outside the
    application, as part of the platform with all of its added benefits, such as high
    availability, resiliency, capacity, and policy-driven Pod placement. Of course,
    similar to the Job implementation, when implementing a CronJob container, your
    application has to consider all corner and failure cases of duplicate runs, no
    runs, parallel runs, or cancellations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，CronJob是一个相当简单的原语，为现有的作业定义添加了集群化、类似cron的行为。但是，当它与其他原语如Pod、容器资源隔离以及Kubernetes的其他特性（比如[第6章，“自动放置”](ch06.html#AutomatedPlacement)或[第4章，“健康探针”](ch04.html#HealthProbe)中描述的特性）结合使用时，它就变成了一个非常强大的作业调度系统。这使得开发人员能够专注于问题领域，并实现一个仅负责执行业务逻辑的容器化应用程序。调度是在应用程序之外完成的，作为平台的一部分，具有其所带来的所有附加好处，如高可用性、弹性、容量和基于策略的Pod放置。当然，类似于作业实现时，当实现一个CronJob容器时，你的应用程序必须考虑重复运行、无运行、并行运行或取消的所有边界和失败情况。
- en: More Information
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Periodic Job Example](https://oreil.ly/yINcj)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[周期性作业示例](https://oreil.ly/yINcj)'
- en: '[CronJob](https://oreil.ly/9096p)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CronJob](https://oreil.ly/9096p)'
- en: '[Cron](https://oreil.ly/ZPavq)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cron](https://oreil.ly/ZPavq)'
- en: '[Crontab Specification](https://oreil.ly/Oi3b5)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Crontab规范](https://oreil.ly/Oi3b5)'
- en: '[Cron Expression Generator](https://oreil.ly/xYymj)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cron表达式生成器](https://oreil.ly/xYymj)'
