["```\nconst form = document.querySelector('#login-form');\n\nconst username = localStorage.getItem('username');\nif (username) {\n  form.elements.username.value = username;\n}\n\nform.addEventListener('submit', event => {\n  const data = new FormData(form);\n  localStorage.setItem('username', data.get('username'));\n});\n```", "```\n// In a real-world application, the API token would be stored somewhere and\n// not hardcoded like this.\nconst apiToken = 'aBcD1234EfGh5678IjKlM';\n\nform.addEventListener('submit', event => {\n  // Important: Stop the browser from automatically submitting the form.\n  event.preventDefault();\n\n  // Set up a FormData object and add the API token to it.\n  const data = new FormData(event.target);\n  data.set('apiToken', apiToken);\n\n  // Use the Fetch API to send this FormData object to the endpoint.\n  fetch('/api/form', {\n    method: 'POST',\n    body: data\n  });\n});\n```", "```\n{\n  username: 'john.doe',\n  apiToken: 'aBcD1234EfGh5678IjKlM'\n}\n```", "```\n------WebKitFormBoundaryl6AuUOn9EbuYe9XO\nContent-Disposition: form-data; name=\"username\"\n\njohn.doe\n------WebKitFormBoundaryl6AuUOn9EbuYe9XO\nContent-Disposition: form-data; name=\"apiToken\"\n\naBcD1234EfGh5678IjKlM\n------WebKitFormBoundaryl6AuUOn9EbuYe9XO--\n```", "```\nform.addEventListener('submit', event => {\n  // Important: Stop the browser from automatically submitting the form.\n  event.preventDefault();\n\n  // Create a new FormData containing this form's data, then add each\n  // key/value pair to the response body.\n  const data = new FormData(event.target);\n  const body = {};\n  for (const [key, value] of data.entries()) {\n    body[key] = value;\n  }\n\n  // Send the JSON body to the form endpoint.\n  fetch('/api/form', {\n    method: 'POST',\n\n    // The object must be converted to a JSON string.\n    body: JSON.stringify(body),\n\n    // Tell the server you're sending JSON.\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n    .then(response => response.json())\n    .then(body => console.log('Got response:', body));\n});\n```", "```\n/**\n * Converts a form's data into an object that can be sent as JSON.\n * @param form The form element\n * @returns An object containing all the mapped keys and values\n */\nfunction toObject(form) {\n  const data = new FormData(form);\n  const body = {};\n\n  for (const key of data.keys()) {\n    // Returns an array of all values bound to a given key\n    const values = data.getAll(key);\n\n    // If there's only one element in the array, set that element directly.\n    if (values.length === 1) {\n      body[key] = values[0];\n    } else {\n      // Otherwise, set the array\n      body[key] = values;\n    }\n  }\n\n  return body;\n}\n```", "```\n<label for=\"username\">Username</label>\n<input type=\"text\" name=\"username\" id=\"username\" required> ![1](assets/1.png)\n```", "```\n<label for=\"quantity\">Quantity</label>\n<input type=\"number\" name=\"quantity\" id=\"quantity\" min=\"1\" max=\"10\">\n```", "```\n<label for=\"username\">Enter a username</label>\n<input type=\"text\" pattern=\"[A-Za-z0-9]+\" id=\"username\" name=\"username\">\n```", "```\n<form id=\"my-form\" novalidate>\n  <!-- Form elements go here -->\n</form>\n```", "```\n<div>\n  <label for=\"email\">Email</label>\n  <input required type=\"email\" id=\"email\" name=\"email\">\n  <div class=\"error-message\" id=\"email-error\"></div>\n</div>\n```", "```\n/**\n * Adds necessary event listeners to an element to participate in form validation.\n * It handles setting and clearing error messages depending on the validation state.\n * @param element The input element to validate\n */\nfunction addValidation(element) {\n  const errorElement = document.getElementById(`${element.id}-error`);\n\n  /**\n * Fired when the form is validated and the field is not valid.\n * Sets the error message and style, and also sets the shouldValidate flag.\n */\n  element.addEventListener('invalid', () => {\n    errorElement.textContent = element.validationMessage;\n    element.dataset.shouldValidate = true;\n  });\n\n  /**\n * Fired when user input occurs in the field. If the shouldValidate flag is set,\n * it will recheck the field's validity and clear the error message if it\n * becomes valid.\n */\n  element.addEventListener('input', () => {\n    if (element.dataset.shouldValidate) {\n      if (element.checkValidity()) {\n        errorElement.textContent = '';\n      }\n    }\n  });\n\n  /**\n * Fired when the field loses focus, applying the shouldValidate flag.\n */\n  element.addEventListener('blur', () => {\n    // This field has been touched; it will now be validated on subsequent\n    // 'input' events.\n    // This sets the input's data-should-validate attribute to true in the DOM.\n    element.dataset.shouldValidate = true;\n  });\n}\n```", "```\n// Assuming the form has two inputs, 'name' and 'email'\naddValidation(form.elements.name);\naddValidation(form.elements.email);\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  if (form.checkValidity()) {\n    // Validation passed, submit the form\n  }\n});\n```", "```\n/**\n * Custom validation function that ensures the password and confirmPassword fields\n * have the same value.\n * @param form The form containing the two fields\n */\nfunction validatePasswordsMatch(form) {\n  const { password, confirmPassword } = form.elements;\n\n  if (password.value !== confirmPassword.value) {\n    confirmPassword.setCustomValidity('Passwords do not match.');\n  } else {\n    confirmPassword.setCustomValidity('');\n  }\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  validatePasswordsMatch(form);\n  if (form.checkValidity()) {\n    // Validation passed, submit the form.\n  }\n});\n```", "```\nfunction validateCheckboxes(form) {\n  const data = new FormData(form);\n\n  // To avoid setting the validation error on multiple elements,\n  // choose the first checkbox and use that to hold the group's validation\n  // message.\n  const element = form.elements.option1;\n\n  if (!data.has('options')) {\n    element.setCustomValidity('Please select at least one option.');\n  } else {\n    element.setCustomValidity('');\n  }\n}\n```", "```\n/**\n * Adds necessary event listeners to an element to participate in form validation.\n * It handles setting and clearing error messages depending on the validation state.\n * @param element The input element to validate\n * @param errorId The ID of a placeholder element that will show the error message\n */\nfunction addValidation(element, errorId) {\n  const errorElement = document.getElementById(errorId);\n\n  /**\n * Fired when the form is validated and the field is not valid.\n * Sets the error message and style.\n */\n  element.addEventListener('invalid', () => {\n    errorElement.textContent = element.validationMessage;\n  });\n\n  /**\n * Fired when user input occurs in the field.\n * It will recheck the field's validity and clear the error message if it\n * becomes valid.\n */\n  element.addEventListener('change', () => {\n    validateCheckboxes(form);\n    if (form.elements.option1.checkValidity()) {\n      errorElement.textContent = '';\n    }\n  });\n}\n```", "```\naddValidation(form.elements.option1, 'checkbox-error');\naddValidation(form.elements.option2, 'checkbox-error');\naddValidation(form.elements.option3, 'checkbox-error');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  validateCheckboxes(form);\n  console.log(form.checkValidity());\n});\n```", "```\n/**\n * Calls an API to validate that a password meets strength requirements.\n * @param form The form containing the password field\n */\nasync function validatePasswordStrength(form) {\n  const { password } = form.elements;\n  const response = await fetch(`/api/password-strength?password=${password.value}`);\n  const result = await response.json();\n\n  // As before, remember to call reportValidity on the password field if you're using\n  // the built-in browser validation UI.\n  if (result.status === 'error') {\n    password.setCustomValidity(result.error);\n  } else {\n    password.setCustomValidity('');\n  }\n}\n```", "```\nform.addEventListener('submit', async event => {\n  event.preventDefault();\n  await validatePasswordStrength(form);\n  console.log(form.checkValidity());\n});\n```", "```\nform.elements.password.addEventListener('blur', async event => {\n  const password = event.target;\n  const errorElement = document.getElementById('password-error');\n  if (password.dataset.shouldValidate) {\n    await validatePasswordStrength(form);\n    if (password.checkValidity()) {\n      errorElement.textContent = '';\n      password.classList.remove('border-danger');\n    }\n  }\n});\n```"]