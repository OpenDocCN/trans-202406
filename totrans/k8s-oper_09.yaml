- en: Chapter 9\. Operator Philosophy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。操作员哲学
- en: 'We’ve noted the problems Operators aim to solve, and you’ve stepped through
    detailed examples of how to build Operators with the SDK. You’ve also seen how
    to distribute Operators in a coherent way with OLM. Let’s try to connect those
    tactics to the strategic ideas that underpin them to understand an existential
    question: what are Operators for?'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注意到操作员试图解决的问题，并且您已经详细了解了如何使用SDK构建操作员的示例。您还看到了如何使用OLM以一致的方式分发操作员。让我们试图将这些策略与支撑它们的战略思想联系起来，以理解一个存在的问题：操作员的目的是什么？
- en: The Operator concept descends from Site Reliability Engineering (SRE). Back
    in [Chapter 1](ch01.html#chapter_introduction), we talked about Operators as software
    SREs. Let’s review some key SRE tenets to understand how Operators apply them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员概念源于站点可靠性工程（SRE）。在[第1章](ch01.html#chapter_introduction)中，我们谈到操作员作为软件SRE。让我们回顾一些关键的SRE原则，以了解操作员如何应用它们。
- en: SRE for Every Application
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个应用程序的SRE
- en: SRE began at Google in response to the challenges of running large systems with
    ever-increasing numbers of users and features. A key SRE objective is allowing
    services to grow without forcing the teams that run them to grow in direct proportion.
    To run systems at dramatic scale without a team of dramatic size, SREs write code
    to handle deployment, operations, and maintenance tasks. SREs create software
    that runs other software, keeps it running, and manages it over time. SRE is a
    wider set of management and engineering techniques with automation as a central
    principle. You may have heard its goal referred to by different names, like “autonomous”
    or “self-driving” software. In the Operator Maturity Model we introduced in [Figure 4-1](ch04.html#fig4-1),
    we call it “Auto Pilot.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SRE始于Google，以应对运行大型系统以及用户和功能数量不断增加的挑战。关键的SRE目标之一是使服务能够在不迫使运行它们的团队按比例增长的情况下增长。为了在没有庞大团队的情况下以戏剧性规模运行系统，SRE编写代码来处理部署、运营和维护任务。SRE创建的软件运行其他软件，保持其运行并随时间管理它。SRE是一组广泛的管理和工程技术，其自动化是一个核心原则。您可能已经听说过它的目标被称为不同的名称，如“自治”或“自动驾驶”软件。在我们引入的操作员成熟度模型中，我们将其称为“自动驾驶”。
- en: Operators and the Operator Framework make it easier to implement this kind of
    automation for applications that run on Kubernetes. Kubernetes orchestrates service
    deployments, making some of the work of horizontal scaling or failure recovery
    automatic for stateless applications. It represents distributed system resources
    as API abstractions. Using Operators, developers can extend those practices to
    complex applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员和操作员框架使在Kubernetes上运行的应用程序实现这种自动化变得更加容易。Kubernetes编排服务部署，使得对无状态应用程序进行一些水平扩展或故障恢复工作自动化。它将分布式系统资源表示为API抽象。使用操作员，开发人员可以将这些实践扩展到复杂的应用程序。
- en: 'The well-known “SRE book” [*Site Reliability Engineering*](https://learning.oreilly.com/library/view/site-reliability-engineering/9781491929117/)
    (O’Reilly), by Betsy Beyer et al. (eds.), is the authoritative guide to SRE principles.
    Google engineer Carla Geisser’s comments in it typify the automation element of
    SRE: “If a human operator needs to touch your system during normal operations,
    you have a bug.”^([1](ch09.html#idm45261328109704)) SREs write code to fix those
    bugs. Operators are a logical place to program those fixes for a broad class of
    applications on Kubernetes. An Operator reduces human intervention bugs by automating
    the regular chores that keep its application running.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知的“SRE书籍” [*Site Reliability Engineering*](https://learning.oreilly.com/library/view/site-reliability-engineering/9781491929117/)（O’Reilly），由贝茜·拜尔等人（编辑）编写，是SRE原则的权威指南。Google工程师卡拉·盖瑟在其中的评论代表了SRE的自动化元素：“如果在正常操作期间需要人工操作员接触您的系统，则存在错误。”^([1](ch09.html#idm45261328109704))
    SRE通过编写代码来修复这些错误。操作员是在Kubernetes上为广泛的应用程序类别编程这些修复的逻辑位置。通过自动化其应用程序运行的常规杂务，操作员减少了人为干预的错误。
- en: Toil Not, Neither Spin
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要搞琐事
- en: SRE tries to reduce toil by creating software to perform the tasks required
    to operate a system. *Toil* is defined in this context as work that is “automatable,
    tactical, devoid of enduring value, and that scales linearly as a service grows.”^([2](ch09.html#idm45261328103512))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SRE试图通过创建软件来执行操作系统所需的任务来减少琐事。在这个背景下，“琐事”被定义为“可自动化，战术性的，缺乏持久价值的工作，并且随着服务增长而线性扩展。”^([2](ch09.html#idm45261328103512))
- en: 'Automatable: Work Your Computer Would Like'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可自动化：让您的计算机喜欢的工作
- en: Work is automatable if a machine could do it. If a task needs the discernment
    of human judgment, a machine can’t do it. For example, expense reports are subjected
    to a variety of machine-driven boundary checking, but usually some final human
    review is required—of items the automated process flagged as out of bounds, if
    not of every receipt. The approval of reports within bounds may be automatable;
    the final acceptance or rejection of out-of-bounds cases may not. Work that could
    be automated by software should be automated by software if it is also repetitive.
    The cost of building software to perform a repetitive task can be amortized over
    a lifetime of repetitions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个任务可以由机器完成，那么它是可以自动化的。如果任务需要人类判断的洞察力，那么机器无法完成。例如，费用报告会经过各种机器驱动的边界检查，但通常还需要最终的人工审核——检查自动流程标记为超出界限的条目，即使不是每一张收据都要审核。在界限内的报告的批准可能是可以自动化的；超出界限情况的最终接受或拒绝可能不能。如果软件能够自动化可以自动化的工作，并且这些工作是重复的，那么应该通过软件来自动化。建立软件来执行重复任务的成本可以在重复的生命周期中分摊。
- en: 'Running in Place: Work of No Enduring Value'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跑步停留：没有持久价值的工作
- en: It can be uncomfortable to think of some work as having no value, but in SRE
    terms, work is “devoid of enduring value” if doing the work doesn’t change the
    service. Backing up a database server is one example. The database doesn’t go
    faster, serve more requests, or become inherently more reliable when you back
    it up. It also doesn’t stop working. Yet despite having no enduring value, backups
    are clearly worth doing. This kind of work often makes a good job for an Operator.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将一些工作视为没有价值可能会让人感到不舒服，但在 SRE 的术语中，如果某项工作不会改变服务，则称其为“缺乏持久价值”。例如，备份数据库服务器就是一个例子。备份数据库不会使其运行更快、服务更多请求或在本质上更可靠。它也不会停止工作。尽管没有持久价值，备份显然是值得做的。这种工作通常是运维人员的一个很好的工作机会。
- en: 'Growing Pains: Work That Expands with the System'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成长的烦恼：随系统扩展的工作
- en: You might design a service so that it scales in the horizontal plane, to serve
    more requests or run more instances of the service. But if adding a new instance
    requires an engineer to configure computers and wire them to a network, scaling
    the service is anything but automatic. In the worst cases of this kind of toil,
    ops work might scale linearly with your service. Every 10% of service growth—10%
    more users, 10% more requests per second, or a new feature that uses 10% more
    CPU—means 10% more custodial labor.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会设计一个服务，使其在水平平面上扩展，以服务更多请求或运行更多服务实例。但是，如果添加新实例需要工程师配置计算机并将其连接到网络，那么扩展服务就远非自动化。在这种类型的繁重工作的最坏情况下，运维工作可能与您的服务呈线性增长。每增长10%的服务——增加10%的用户、每秒请求增加10%，或使用10%更多CPU的新功能——意味着增加10%的守护劳动。
- en: 'Manual scaling: Just like in the bad old days'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动扩展：就像过去的糟糕日子一样
- en: Imagine running the stateless web server from [Chapter 1](ch01.html#chapter_introduction).
    You deploy three instances on three VMs. To add more web server capacity, you
    spin up new VMs, assign them (unique) IP addresses, and assign (per-IP) ports
    where the web server binaries listen. Next, you inform the load balancer of the
    new endpoints so it can route some requests there.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 想象从 [第1章](ch01.html#chapter_introduction) 运行无状态 Web 服务器。您在三个虚拟机上部署了三个实例。要增加更多的
    Web 服务器容量，您需要启动新的虚拟机，为它们分配（唯一的）IP 地址，并分配（每个 IP）端口，以便 Web 服务器二进制文件侦听。接下来，您需要通知负载均衡器新的端点，以便它可以将一些请求路由到那里。
- en: As designed and provisioned, it’s true that your simple stateless web server
    can grow with demand. It can serve more users and add more features by spreading
    an increasing load over multiple instances. But the team that runs the service
    will always have to grow along with it. This effect gets worse as the system gets
    larger, because adding one VM won’t meaningfully increase the capacity of a thousand
    instances.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如设计和配置的那样，您的简单无状态 Web 服务器确实可以根据需求增长。它可以通过将逐渐增加的负载分散到多个实例来为更多用户提供服务并添加更多功能。但是管理服务的团队将始终随之增长。随着系统变得更大，这种效果会变得更糟，因为增加一个虚拟机不会显著增加千个实例的容量。
- en: 'Automating horizontal scaling: Kubernetes replicas'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化水平扩展：Kubernetes 副本
- en: If you deploy your stateless web server on Kubernetes instead, you can scale
    it up and down with little more than a `kubectl` command. This is an example of
    Kubernetes as an implementation of SRE’s automation principles at the platform
    level. Kubernetes abstracts the infrastructure where the web servers run and the
    IP addresses and ports through which they serve connections. You don’t have to
    configure each new web server instance when scaling up, or deliberately free IPs
    from your range when scaling down. You don’t have to program the load balancer
    to deliver traffic to a new instance. Software does those chores instead.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将无状态的 Web 服务器部署在 Kubernetes 上，您可以通过几乎只需一个 `kubectl` 命令来进行水平扩展和缩减。这是 Kubernetes
    作为 SRE 平台级自动化原则实施的一个例子。Kubernetes 抽象出了 Web 服务器运行的基础设施以及它们提供连接的 IP 地址和端口。在扩展时，您无需为每个新的
    Web 服务器实例进行配置，或者在缩减时故意从您的 IP 范围中释放 IP。您无需编程负载均衡器以将流量传送到新实例。软件会自动完成这些繁琐的工作。
- en: 'Operators: Kubernetes Application Reliability Engineering'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作员：Kubernetes 应用可靠性工程
- en: Operators extend Kubernetes to extend the principle of automation to complex,
    stateful applications running on the platform. Consider an Operator that manages
    an application with its own notions of clustering. When the etcd Operator replaces
    a failed etcd cluster member, it arranges a new pod’s membership by configuring
    it and the existing cluster with endpoints and authentication.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员扩展了 Kubernetes 的能力，将自动化原则应用于在平台上运行的复杂、有状态的应用程序。考虑一个管理具有其自身集群概念的应用程序的操作员。例如，当
    etcd 操作员替换失败的 etcd 集群成员时，它通过配置新的 Pod 和现有集群的端点和认证来安排新的成员。
- en: 'If you are on a team responsible for managing internal services, Operators
    will enable you to capture expert procedures in software and expand the system’s
    “normal operations”: that is, the set of conditions it can handle automatically.
    If you’re developing a Kubernetes native application, an Operator lets you think
    about how users toil to run your app and save them the trouble. You can build
    Operators that not only run and upgrade an application, but respond to errors
    or slowing performance.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您负责管理内部服务的团队，操作员将使您能够将专家程序捕捉到软件中，并扩展系统的“正常运行”：即它可以自动处理的条件集。如果您正在开发一个 Kubernetes
    本地应用程序，操作员可以让您考虑用户为运行您的应用程序而劳碌，并为他们省去麻烦。您可以构建不仅运行和升级应用程序的操作员，还可以响应错误或性能下降。
- en: Control loops in Kubernetes watch resources and react when they don’t match
    some desired state. Operators let you customize a control loop for resources that
    represent your application. The first Operator concerns are usually automatic
    deployment and self-service provisioning of the operand. Beyond that first level
    of the maturity model, an Operator should know its application’s critical state
    and how to repair it. The Operator can then be extended to observe key application
    metrics and act to tune, repair, or report on them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的控制循环会监视资源，并在它们不符合某些期望状态时做出反应。操作员允许您为代表您的应用程序的资源定制控制循环。通常首要的操作员关注点是操作数的自动部署和自助配置。在成熟模型的第一个级别之上，操作员应了解其应用程序的关键状态以及如何修复它。然后，操作员可以扩展以观察关键应用程序指标，并在需要时进行调整、修复或报告。
- en: Managing Application State
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理应用程序状态
- en: An application often has internal state that needs to be synchronized or maintained
    between replicas. Once an Operator handles installation and deployment, it can
    move farther along the maturity model by keeping such shared state in line among
    a dynamic group of pods. Any application with its own concept of a cluster, such
    as many databases and file servers, has this kind of shared application state.
    It may include authentication resources, replication arrangements, or writer/reader
    relationships. An Operator can configure this shared state for a new replica,
    allowing it to expand or restore the application’s cluster with new members. An
    Operator might rectify external resources its application requires. For example,
    consider manipulating an external load balancer’s routing rules as replicas die
    and new ones replace them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常具有需要在副本之间进行同步或维护的内部状态。一旦操作员处理安装和部署，它可以通过在动态群组的一组 Pod 中保持这种共享状态来沿着成熟模型走得更远。任何具有其自身集群概念的应用程序，如许多数据库和文件服务器，都具有这种共享应用程序状态。它可能包括认证资源、复制安排或编写者/读者关系。操作员可以为新的副本配置这种共享状态，允许其扩展或恢复应用程序的集群，并在新成员加入时修复它。操作员可能会处理其应用程序所需的外部资源。例如，考虑在副本死亡并被新副本替换时操作外部负载均衡器的路由规则。
- en: Golden Signals Sent to Software
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送到软件的黄金信号
- en: Beyer at al. suggest monitoring the “four golden signals”^([3](ch09.html#idm45261328073208))
    for the clearest immediate sense of a system’s health. These characteristics of
    a service’s basic operation are a good place to start planning what your Operator
    should watch. In the SRE book that popularized them, golden signals convey something
    about a system’s state important enough to trigger a call to a human engineer.^([4](ch09.html#idm45261328070680))
    When designing Operators, you should think of anything that might result in a
    call to a person as a bug you can fix.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Beyer 等人建议监控系统健康的“四个黄金信号”^([3](ch09.html#idm45261328073208))，这些是服务基本运行特征的良好起点。这些黄金信号在
    SRE 书籍中得到了推广，传达了系统状态的重要信息，足以触发对工程师的呼叫^([4](ch09.html#idm45261328070680))。在设计 Operator
    时，你应该将可能导致呼叫工程师的任何事情视为需要修复的错误。
- en: '*Site Reliability Engineering* lists the four golden signals as *latency*,
    *traffic*, *errors*, and *saturation*.^([5](ch09.html#idm45261328066776)) Accurate
    measurements of these four areas, adapted to the metrics that best represent a
    particular application’s condition, ensure a reasonable understanding of the application’s
    health. An Operator can monitor these signals and take application-specific actions
    when they depict a known condition, problem, or error. Let’s take a closer look:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*Site Reliability Engineering* 将四个黄金信号列为 *延迟*、*流量*、*错误* 和 *饱和度*。^([5](ch09.html#idm45261328066776))
    对这四个领域的准确测量，根据最能代表特定应用程序状况的度量标准，确保了对应用健康的合理理解。当这些信号显示出已知条件、问题或错误时，Operator 可以采取特定于应用程序的措施。'
- en: Latency
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟
- en: Latency is how long it takes to do something. It is commonly understood as the
    elapsed time between a request and its completion. For instance, in a network,
    latency is measured as the time it takes to send a packet of data between two
    points. An Operator might measure application-specific, internal latencies like
    the lag time between actions in a game client and responses in the game engine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟是完成某事所需的时间。通常被理解为请求和完成之间的经过时间。例如，在网络中，延迟被定义为在两点间发送数据包所需的时间。Operator 可以测量应用程序特定的内部延迟，如游戏客户端动作与游戏引擎响应之间的时间差。
- en: Traffic
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 流量
- en: Traffic measures how frequently a service is requested. HTTP requests per second
    is the standard measurement of web service traffic. Monitoring regimes often split
    this measurement between static assets and those that are dynamically generated.
    It makes more sense to monitor something like transactions per second for a database
    or file server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 流量指服务请求的频率。每秒 HTTP 请求是衡量 Web 服务流量的标准。监控制度通常会将此测量分为静态资源和动态生成资源。对于数据库或文件服务器，监控每秒事务更有意义。
- en: Errors
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: Errors are failed requests, like an HTTP 500-series error. In a web service,
    you might have an HTTP success code but see scripting exceptions or other client-side
    errors on the successfully delivered page. It may also be an error to exceed some
    latency guarantee or performance policy, like a guarantee to respond to any request
    within a time limit.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是失败的请求，如 HTTP 500 系列错误。在 Web 服务中，你可能会得到 HTTP 成功代码，但在成功交付页面时看到脚本异常或其他客户端错误。超过某些延迟保证或性能策略，如在规定的时间内响应任何请求，也可能属于错误。
- en: Saturation
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 饱和度
- en: Saturation is a gauge of a service’s consumption of a limited resource. These
    measurements focus on the most limited resources in a system, typically CPU, memory,
    and I/O. There are two key ideas in monitoring saturation. First, performance
    gets worse even before a resource is 100% utilized. For instance, some filesystems
    perform poorly when more than about 90% full, because the time it takes to create
    a file increases as available space decreases. Because of similar effects in nearly
    any system, saturation monitors should usually respond to a high-water mark of
    less than 100%. Second, measuring saturation can help you anticipate some problems
    before they happen. Dividing a file service’s free space by the rate at which
    an application writes data lets your Operator estimate the time remaining until
    storage is full.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 饱和度是服务对有限资源的消耗的一种衡量。这些测量侧重于系统中最受限制的资源，通常是CPU、内存和I/O。监控饱和度的两个关键思想。首先，性能在资源完全利用之前就会变差。例如，当文件系统超过约90%的容量时，某些文件系统的性能会变差，因为随着可用空间的减少，创建文件所需的时间也会增加。由于几乎任何系统中类似的效果，饱和度监视器通常应响应低于100%的高水位标记。其次，测量饱和度可以帮助您在问题发生之前预测一些问题。通过将文件服务的剩余空间除以应用程序写入数据的速率，您的操作符可以估算剩余存储空间满时的时间。
- en: Operators can iterate toward running your service on auto pilot by measuring
    and reacting to golden signals that demand increasingly complex operations chores.
    Apply this analysis each time your application needs human help, and you have
    a basic plan for iterative development of an Operator.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符可以通过测量和响应需要越来越复杂的操作任务的黄金信号来迭代地朝着自动驾驶运行服务的方向发展。每当你的应用程序需要人工帮助时应用这种分析，你就有了一个操作符迭代开发的基本计划。
- en: Seven Habits of Highly Successful Operators
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高效操作符的七个习惯
- en: Operators grew out of work at CoreOS during 2015 and 2016\. User experience
    with the Operators built there and continuing at Red Hat, and in the wider community,
    have helped refine seven guidelines set out as the concept of Kubernetes Operators
    solidified:^([6](ch09.html#idm45261328051544))
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符起源于2015年至2016年期间在CoreOS的工作。在那里构建的操作符的用户体验以及在Red Hat和更广泛的社区中继续发展的操作符已帮助完善了作为Kubernetes操作符概念的七项指南：^([6](ch09.html#idm45261328051544))
- en: '*An Operator should run as a single Kubernetes deployment*.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符应作为单个Kubernetes部署运行*。'
- en: You installed the etcd Operator in [Chapter 2](ch02.html#running_operators)
    from one manifest, without the OLM machinery introduced in [Chapter 8](ch08.html#operator_lifecyle_manager).
    While you provide a CSV and other assets to make an OLM bundle for an Operator,
    OLM still uses that single manifest to deploy the Operator on your behalf.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[第二章](ch02.html#running_operators)中，你通过一个清单安装了etcd操作符，而没有使用[第八章](ch08.html#operator_lifecyle_manager)介绍的OLM机制。虽然你提供了CSV和其他资产来为操作符创建OLM捆绑包，但OLM仍然使用单个清单来代表你部署操作符。
- en: 'To illustrate this, although you usually need to configure RBAC and a service
    account, you can add the etcd Operator to a Kubernetes cluster with a single command.
    It is just a deployment:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 举例说明，尽管通常需要配置RBAC和服务账户，但你可以用一个命令将etcd操作符添加到Kubernetes集群中。这只是一个部署：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Operators should define new custom resource types on the cluster*.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符应在集群上定义新的自定义资源类型*。'
- en: Think of the etcd examples back in [Chapter 2](ch02.html#running_operators).
    You created a CRD, and in it you defined a new kind of resource, the EtcdCluster.
    That kind represents instances of the operand, a running etcd cluster managed
    by the Operator. Users create new application instances by creating new custom
    resources of the application’s kind.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回想起[第二章](ch02.html#running_operators)中的etcd示例。你创建了一个CRD，在其中定义了一种新类型的资源，即EtcdCluster。该类型代表由操作符管理的运行中的etcd集群的实例。用户通过创建新的应用程序实例的自定义资源来创建新的应用程序实例。
- en: '*Operators should use appropriate Kubernetes abstractions whenever possible*.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符在可能的情况下应使用适当的Kubernetes抽象*。'
- en: Don’t write new code when API calls can do the same thing in a more consistent
    and widely tested manner. Some quite useful Operators do little more than manipulate
    some set of standard resources in a way that suits their application.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当API调用可以以更一致和广泛测试的方式完成相同的操作时，不要编写新代码。一些非常有用的操作符只是以适合其应用程序的方式操作一些标准资源集。
- en: '*Operator termination should not affect the operand*.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符的终止不应影响操作数*。'
- en: When an Operator stops or is deleted from the cluster, the application it manages
    should continue to function. Return to your cluster and delete either the etcd
    or the Visitors Site Operator. While you won’t have automatic recovery from failures,
    you’ll still be able to use the application features of the operand in the absence
    of the Operator. You can visit the Visitors Site or retrieve a key-value pair
    from etcd even when the respective Operator isn’t running.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个操作符停止或从集群中删除时，它管理的应用程序应继续运行。返回你的集群，并删除etcd或访问者站点操作符。虽然你不会自动从故障中恢复，但在操作符不存在的情况下，你仍然可以使用操作对象应用程序的功能。即使相应的操作符没有运行，你仍然可以访问访问者站点或从etcd检索键值对。
- en: Note that removing a CRD does affect the operand application. In fact, deleting
    a CRD will in turn delete its CR instances.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，删除一个CRD确实会影响操作对象应用程序。实际上，删除CRD将会删除其CR实例。
- en: '*An Operator should understand the resource types created by any previous versions*.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符应理解由任何先前版本创建的资源类型*。'
- en: Operators should be backward compatible with the structures of their predecessors.
    This places a premium on designing carefully and for simplicity, because the resources
    you define in version 1 will necessarily live on.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作符应与其前身的结构向后兼容。这要求设计时要非常小心和简洁，因为你在版本1中定义的资源将长期存在。
- en: '*An Operator should coordinate application upgrades*.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符应协调应用程序的升级*。'
- en: Operators should coordinate upgrades of their operands, potentially including
    rolling upgrades across an application cluster and almost certainly including
    the ability to roll back to a previous version when there is a problem. Keeping
    software up to date is necessary toil, because only the latest software has the
    latest fixes for bugs and security vulnerabilities. Automating this upgrade toil
    is an ideal job for an Operator.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作符应协调其操作对象的升级，可能包括在应用程序集群中进行滚动升级，几乎肯定包括在出现问题时回滚到先前版本的能力。保持软件最新是必要的努力，因为只有最新的软件才具有对错误和安全漏洞的最新修复。自动化这种升级工作是操作符的理想任务。
- en: '*Operators should be thoroughly tested, including chaos testing*.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*操作符应进行彻底测试，包括混沌测试*。'
- en: Your application and its relationship to its infrastructure constitute a complex
    distributed system. You’re going to trust your Operator to manage that system.
    [Chaos testing](https://oreil.ly/K8IUR) intentionally causes failures of system
    components to discover unexpected errors or degradation. It’s good practice to
    build a test suite that subjects your Operator to simulated errors and the outright
    disappearance of pods, nodes, and networking to see where failures arise or cascade
    between components as their dependencies collapse beneath them.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的应用程序及其与基础设施的关系构成一个复杂的分布式系统。你将依赖你的操作符来管理这个系统。[混沌测试](https://oreil.ly/K8IUR)是有意引发系统组件故障，以发现意外错误或降级的方法。建立一个测试套件，让你的操作符经历模拟错误和pod、节点以及网络突然消失的情况，从而查看故障在哪里出现，或在它们的依赖关系崩溃时如何在组件之间进行级联。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Operators tend to advance through phases of maturity ranging from automatic
    installs, through seamless application upgrades, to a steady normal state of “auto
    pilot” where they react to and correct emergent issues of performance and stability
    in their operands. Each phase aims to end a little more human toil.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符往往会通过自动安装、无缝应用升级等不同成熟阶段发展，最终进入“自动驾驶”的稳定状态，在这种状态下，它们会响应和纠正性能和稳定性的突发问题。每个阶段的目标都是减少人工操作。
- en: Making an Operator to distribute, deploy, and manage your application makes
    it easier to run it on Kubernetes and allows the application to leverage Kubernetes
    features. An Operator that follows the seven habits outlined here is readily deployed,
    and can itself be managed through its lifecycle by OLM. That Operator makes its
    operand easier to run, manage, and potentially to implement. By monitoring its
    application’s golden signals, an Operator can make informed decisions and free
    engineers from rote operations tasks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个操作符来分发、部署和管理你的应用程序，使其更容易在Kubernetes上运行，并允许应用程序利用Kubernetes的功能。一个遵循此处概述的七个习惯的操作符可以轻松部署，并可以通过OLM管理其整个生命周期。这种操作符使其操作对象更易于运行、管理，可能还可以实现。通过监控其应用程序的关键信号，操作符可以做出明智的决策，解放工程师免受机械性操作任务的困扰。
- en: ^([1](ch09.html#idm45261328109704-marker)) Beyer et al. (eds.), *Site Reliability
    Engineering*, 119.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.html#idm45261328109704-marker)) Beyer等人（编辑），*网站可靠性工程*，119页。
- en: ^([2](ch09.html#idm45261328103512-marker)) Beyer et al. (eds.), *Site Reliability
    Engineering*, 120.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch09.html#idm45261328103512-marker)) 贝尔等人（编），《**现场可靠性工程**》，120页。
- en: ^([3](ch09.html#idm45261328073208-marker)) Beyer et al. (eds.), *Site Reliability
    Engineering*, 139.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch09.html#idm45261328073208-marker)) 贝尔等人（编），《**现场可靠性工程**》，139页。
- en: ^([4](ch09.html#idm45261328070680-marker)) Beyer et al. (eds.), *Site Reliability
    Engineering*, 140.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch09.html#idm45261328070680-marker)) 贝尔等人（编），《**现场可靠性工程**》，140页。
- en: ^([5](ch09.html#idm45261328066776-marker)) Beyer et al. (eds.), *Site Reliability
    Engineering*, 139.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch09.html#idm45261328066776-marker)) 贝尔等人（编），《**现场可靠性工程**》，139页。
- en: ^([6](ch09.html#idm45261328051544-marker)) Brandon Phillips, “Introducing Operators,”
    CoreOS Blog, November 3, 2016, [*https://oreil.ly/PtGuh*](https://oreil.ly/PtGuh).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch09.html#idm45261328051544-marker)) 布兰登·菲利普斯，《引入操作员》，CoreOS博客，2016年11月3日，[*https://oreil.ly/PtGuh*](https://oreil.ly/PtGuh)。
