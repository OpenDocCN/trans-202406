["```\nconst today = new Date();\n```", "```\nconst today = new Date();\n\nconsole.log(today.getFullYear());  // example: 2021\nconsole.log(today.getMonth());     // example: 02 (March)\nconsole.log(today.getDay());       // example: 01 (Monday)\n\n// Do a little extra string processing to make sure minutes are padded with\n// a leading 0 if needed to make a two-digit value (like '05' in the time 4:05)\nconst hours = today.getHours();\nconst minutes = today.getMinutes().toString().padStart(2, '0');\nconsole.log('Time ' + hours + ':' + minutes);   // example: 15:32\n```", "```\n// February 10, 2021:\nconst anotherDay = new Date(2021, 1, 10);\n```", "```\n// February 1, 2021, at 9:30 AM:\nconst anotherDay = new Date(2021, 1, 1, 9, 30);\n```", "```\nconst eventDate = new Date('2021-12-17T03:24:00Z');\n```", "```\nconst stringDate = '12/30/2021';\n\n// Split on the slashes\nconst dateArray = stringDate.split('/');\n\n// Find the individual date ingredients\nconst year = dateArray[2];\nconst month = dateArray[0];\nconst day = dateArray[1];\n\n// Apply the correction for 0-based month numbering\nconst eventDate = new Date(year, month-1, day);\n```", "```\nconst badDate = '12 bananas';\n\nconst convertedDate = new Date(badDate);\n\nif (Number.isNaN(convertedDate)) {\n  // We end up here, because the date object was not created successfully\n} else {\n  // For a valid Data instance, we end up here\n}\n```", "```\nconst today = new Date();\nconst currentDay = today.getDate();\n\n// Where will be three weeks in the future?\ntoday.setDate(currentDay + 21);\nconsole.log(`Three weeks from today is ${today}`);\n```", "```\nconst originalDate = new Date();\n\n// Clone the date\nconst futureDate = new Date(originalDate.getTime());\n\n// Change the cloned date\nfutureDate.setDate(originalDate.getDate()+21);\nconsole.log(`Three weeks from ${originalDate} is ${futureDate}`);\n```", "```\nconst oldDay = new Date(1999, 10, 20);\nconst newerDay = new Date(2021, 1, 1);\n\nif (newerDay > oldDay) {\n  // This is true, because newerDay falls after oldDay.\n}\n```", "```\nconst date1 = new Date(2021, 1, 1);\nconst date2 = new Date(2021, 1, 1);\n\n// This is false, because they are different objects\nconsole.log(date1 === date2);\n\n// This is true, because they have the same date\nconsole.log(date1.getTime() === date2.getTime());\n```", "```\nconst today = new Date();\n\n// Create another copy of the current date\n// The day hasn't changed, but the time may have already ticked on\n// to the next millisecond\nconst todayDifferent = new Date();\n\n// This could be true or false, depending on timing factors beyond your control\nconsole.log(today.getTime() === todayDifferent.getTime());\n\n// Remove all the time information\ntodayDifferent.setHours(0,0,0,0);\ntoday.setHours(0,0,0,0);\n\n// This is always true, because the time has been removed from both instances\nconsole.log(today.getTime() === todayDifferent.getTime());\n```", "```\nconst oldDate = new Date(2021, 1, 1);\nconst newerDate = new Date(2021, 10, 1);\n\nconst differenceInMilliseconds = newerDate - oldDate;\n```", "```\nconst millisecondsPerDay = 1000*60*60*24;\nlet differenceInDays = differenceInMilliseconds / millisecondsPerDay;\n\n// Only count whole days\ndifferenceInDays = Math.trunc(differenceInDays);\n\nconsole.log(differenceInDays);\n```", "```\n// Get a DOMHighResTimeStamp object that represents the start time\nconst startTime = window.performance.now();\n\n// (Do a time consuming task here.)\n\n// Get a DOMHighResTimeStamp object that represents the end time\nconst endTime = window.performance.now();\n\n// Find the elapsed time in milliseconds\nconst elapsedMilliseconds = endTime - startTime;\n```", "```\nconst date = new Date(2021, 0, 1, 10, 30);\n\nlet dateString;\ndateString = date.toString();\n // 'Fri Jan 01 2021 10:30:00 GMT-0500 (Eastern Standard Time)'\n\ndateString = date.toTimeString();\n // '10:30:00 GMT-0500 (Eastern Standard Time)'\n\ndateString = date.toUTCString();\n // 'Fri, 01 Jan 2021 15:30:00 GMT'\n\ndateString = date.toDateString();\n // 'Fri Jan 01 2021'\n\ndateString = date.toISOString();\n // '2021-01-01T15:30:00.000Z'\n\ndateString = date.toLocaledateString();\n // '1/1/2021, 10:30:00 AM'\n\ndateString = date.toLocaleTimeString();\n// '10:30:00 AM'\n```", "```\nconst date = new Date(2021, 10, 1);\n\n// Ensure date numbers less than 10 are padded with an initial 0.\nconst day = date.getDate().toString().padStart(2, '0');\n\n// Ensure months are 0-padded and add 1 to convert the month from its\n// 0-based JavaScript representation\nconst month = (date.getMonth()+1).toString().padStart(2, '0');\n\n// The year is always 4-digit\nconst year = date.getFullYear();\n\nconst customDateString = `${year}.${month}.${day}`;\n// now customDateString = '2021.11.01'\n```", "```\nconst date = new Date(2020, 11, 20, 3, 0, 0);\n\n// Use the standard US date format\nconsole.log(new Intl.DateTimeFormat('en-US').format(date));  // '12/20/2020'\n\n// Use the standard UK date format\nconsole.log(new Intl.DateTimeFormat('en-GB').format(date));  // '20/12/2020'\n\n// Use the standard Japanese date format\nconsole.log(new Intl.DateTimeFormat('ja-JP').format(date));  // '2020/12/20'\n```", "```\nconst date = new Date(2020, 11, 20);\n\nconst formatter = new Intl.DateTimeFormat('de-DE',\n { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n\nconst dateString = formatter.format(date);\n// now dateString = 'Sonntag, 20\\. Dezember 2020'\n```", "```\nconst date = new Date(2022, 11, 20, 9, 30);\n\nconst formatter = new Intl.DateTimeFormat('en-US',\n { year: 'numeric', month: 'numeric', day: 'numeric',\n   hour: 'numeric', minute: 'numeric' });\n\nconst dateString = formatter.format(date);\n// now dateString = '12/20/2022, 9:30 AM'\n```"]