- en: Chapter 22\. Server Administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 22.0 Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers how to perform operations involved in administering a MySQL
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: General server configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plug-in interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling server logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring storage engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chapter doesn’t cover managing MySQL user accounts. That is an administrative
    task, and is covered in [Chapter 24](ch24.xhtml#nch-security).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many of the techniques shown here require administrative access, such as the
    ability to modify tables in the `mysql` system database or use statements that
    require the `SUPER` privilege. For this reason, to carry out the operations described
    here, you’ll likely need to connect to the server as `root` rather than as `cbuser`.
  prefs: []
  type: TYPE_NORMAL
- en: 22.1 Configuring the Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to change the server settings, and also verify that your changes took
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To change settings, specify them at server startup or at runtime. To verify
    the changes, examine the relevant system variables at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MySQL server places many configuration parameters under your control. For
    example, resources that require memory can be adjusted up or down to tailor resource
    usage. A heavily used server requires more memory; a lightly used one, less. You
    can set command options and system variables at server startup, and many system
    variables are settable at runtime as well. You can also examine your settings
    at runtime to verify that the configuration is as you intend.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration control at server startup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To configure the server at startup time, specify options on the command line
    or in an option file. The latter is usually preferable because you can specify
    settings once and they’ll apply at each startup. (For background on using command-line
    options and option files, see [Recipe 1.4](ch01.xhtml#nch-mysql-mysql-options).)
  prefs: []
  type: TYPE_NORMAL
- en: Command option names typically use dashes, whereas system variable names use
    underscores. However, the server is more permissive at startup and recognizes
    command options and system variables written using dashes or underscores interchangeably.
    For example, `sql_mode` and `sql-mode` are equivalent on the command line or in
    an option file. This differs from runtime, when references to system variables
    *must* be written using underscores.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify server parameters in an option file, list them in the `[mysqld]`
    group of a file the server reads. To illustrate, here are some parameters you
    might set:'
  prefs: []
  type: TYPE_NORMAL
- en: The default character set is `utf8mb4 starting MySQL 8.0`. This character set
    comes with `utf8mb4_0900_ai_ci` as default collation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default SQL mode is `STRICT_TRANS_TABLES` (after MySQL 5.7). To be more
    permissive by default, remove strict SQL mode, which is not recommended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The event scheduler is enabled by default after MySQL 8.0\. If you plan to use
    scheduled events (see [Recipe 11.5](ch11.xhtml#nch-routines-routines-events)),
    you must enable it on prior releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For InnoDB engine, buffer pool size defaults to 128MB which is not sufficient
    beyond development and testing. Consider increasing to a size for running dataset
    in memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timezone is set to SYSTEM unless specified at startup. If you aren’t intending
    to use SYSTEM timezone you need to set it at startup by setting `--timezone=timezone_name`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To implement these configuration ideas, write the `[mysqld]` group in your
    option file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Those are just suggestions; adjust the server configuration for your own requirements.
    For information about plug-in and logging options in particular, see [Recipe 22.2](#nch-admin-plugin-interface)
    and [Recipe 23.0](ch23.xhtml#nch-monitoring-monitoring-intro).
  prefs: []
  type: TYPE_NORMAL
- en: Configuration control and verification at runtime
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the server starts, you can make runtime adjustments by changing system
    variables using the `SET` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That statement sets the global value of *`var_name`*; that is, the value that
    applies to all clients by default. Changes to the global value at runtime require
    the `SUPER` privilege. Many system variables also have a session value, which
    is the value specific to a particular client session. The session value of a given
    variable is initialized from the global value when the client connects, but the
    client can change it thereafter. For example, the DBA might set the max connections
    at server startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'That sets the global value. A DBA with the `SUPER` privilege can change the
    global value at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each client that connects subsequently has its session variable initialized
    to the same value, but can change the value as it likes. A DBA may increase this
    value for troubleshooting connectivity issues.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A `SET` statement that includes no `GLOBAL` or `SESSION` modifier changes the
    session value, if there is one.
  prefs: []
  type: TYPE_NORMAL
- en: After MySQL 8.0 you may set and persist global variables. Many of global variables
    are dynamic and can be set at runtime. *PERSIST* close will help set this value
    permanently even if the server is restarted without saving to the configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To reset persisted values use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'There is alternative syntax for writing system variable references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@@` syntax is more flexible. It can be used in statements other than `SET`,
    enabling you to retrieve or examine individual system variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: References to system variables using `@@` syntax with no `GLOBAL.` or `SESSION.`
    modifier access the session value if there is one, or the global value otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Other ways to access system variables include the `SHOW` `VARIABLES` statement
    and selecting from the `INFORMATION_SCHEMA` `GLOBAL_VARIABLES` and `SESSION_VARIABLES`
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: If a setting exists only as a command option with no corresponding system variable,
    you cannot check its value at runtime. Fortunately, such options are rare. Nowadays,
    most new settings are created as system variables that can be examined at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 22.2 Managing the Plug-In Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to exploit the capabilities offered by certain server plug-ins.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn how to control the plug-in interface.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL supports the use of plug-ins that extend server capabilities. There are
    plug-ins that implement storage engines, authentication methods, password policy,
    `PERFORMANCE_SCHEMA` tables, and more. The server enables you to specify which
    plug-ins to use, so that you can load just those you want, with no memory or processing
    overhead incurred for plug-ins you don’t want.
  prefs: []
  type: TYPE_NORMAL
- en: This section provides the general background on controlling which plug-ins the
    server loads. Discussion elsewhere describes specific plug-ins and what they can
    do for you, including the authentication plug-ins (see [Recipe 24.1](ch24.xhtml#nch-security-user-table)),
    and `validate_password` (see [Recipe 24.3](ch24.xhtml#nch-security-password-policy)
    and [Recipe 24.4](ch24.xhtml#nch-security-password-strength)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The examples here refer to plug-in files using the *.so* (<q>shared object</q>)
    filename suffix. If the suffix differs on your system, adjust the names accordingly
    (for example, use *.dll* on Windows). If you don’t know the name of a given plug-in
    file, look in the directory named by the `plugin_dir` system variable, which is
    where the server expects to find plug-in files. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To see which plug-ins are installed, use `SHOW` `PLUGINS` or query the `INFORMATION_SCHEMA`
    `PLUGINS` table.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some plug-ins are built in, need not be enabled explicitly, and cannot be disabled.
    The `mysql_native_password` and `sha256_password` authentication plug-ins fall
    into this category.
  prefs: []
  type: TYPE_NORMAL
- en: Plug-in control at server startup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install a plug-in only for a given server invocation, use the `--plugin-load-add`
    option at server startup, naming the file that contains the plug-in. To name multiple
    plug-ins as the option value, separate them with semicolons. Alternatively, use
    the option multiple times, with each instance naming a single plug-in. That makes
    it easy to enable or disable individual plug-ins by using the `#` character to
    selectively comment the corresponding lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `--plugin-load-add` option was introduced in MySQL 5.6\. In MySQL 8.0,
    you can use a single `--plugin-load` option that names all the plug-ins to be
    loaded in a semicolon-separated list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Clearly, for dealing with more than one plug-in, `--plugin-load-add` is superior
    for ease of administration.
  prefs: []
  type: TYPE_NORMAL
- en: Plug-in control at runtime
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install a plugin at runtime and make it persistent, use `INSTALL` `PLUGIN`.
    The server loads the plug-in (which becomes available immediately) and registers
    it in the `mysql.plugin` system table to cause it to load automatically for subsequent
    restarts. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `SONAME` (<q>shared object name</q>) clause specifies the file that contains
    the plug-in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable a plug-in at runtime, use `UNINSTALL` `PLUGIN`. The server unloads
    the plug-in and removes its registration from the `mysql.plugin` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`INSTALL` `PLUGIN` and `UNINSTALL` `PLUGIN` require the `INSERT` and `DELETE`
    privilege, respectively, for the `mysql.plugin` table.'
  prefs: []
  type: TYPE_NORMAL
- en: 22.3 Controlling Server Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to take advantage of log information the server can provide.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn the server options that control logging.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MySQL server can produce several logs:'
  prefs: []
  type: TYPE_NORMAL
- en: The error log
  prefs: []
  type: TYPE_NORMAL
- en: The error log contains information about problems or exceptional conditions
    the server encounters. This is useful information for debugging. In particular,
    if the server exits, check the error log for the reason. For example, if an exit
    occurs immediately after startup, it’s likely that some setting in the server
    option file is misspelled or was set to an invalid value. The error log will contain
    a message to that effect.
  prefs: []
  type: TYPE_NORMAL
- en: The general query log
  prefs: []
  type: TYPE_NORMAL
- en: The general query log indicates when each client connected and disconnected
    and what SQL statements it executed. This tells you how much and what activity
    each client is engaged in.
  prefs: []
  type: TYPE_NORMAL
- en: The slow query log
  prefs: []
  type: TYPE_NORMAL
- en: The slow query log records statements that took a long time to execute (see
    the [MySQL Reference Manual](https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html)
    for the meaning of <q>a long time</q> because it can be influenced by several
    options). Queries that appear repeatedly in this log may be bottlenecks worth
    investigating to see whether they can be made more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: The binary log
  prefs: []
  type: TYPE_NORMAL
- en: 'The binary log contains a record of data changes made by the server. To set
    up replication, you must enable the binary log on the source server: it serves
    as the storage medium for changes to be sent to replica servers. The binary log
    is also used, together with backup files, during data recovery operations.'
  prefs: []
  type: TYPE_NORMAL
- en: Each log serves a different purpose and most can be turned on at your discretion,
    enabling you to use those that suit your administrative requirements. Each log
    can be written to a file, and some can be written to other destinations. The error
    log can be sent to your terminal or to the `syslog` facility. The general and
    slow query logs can be written to a file, to a table in the `mysql` database,
    or both.
  prefs: []
  type: TYPE_NORMAL
- en: 'To control server logging, add lines to your server option file that specify
    the desired types of logging. (Some settings can also be changed at runtime.)
    For example, the following lines in a server option file send the error log to
    the *err.log* file in the data directory, enable writing the general query and
    slow query logs to tables in the `mysql` database, and enable writing the binary
    log to the */var/mysql-logs* directory using files having names beginning with
    *binlog*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For filenames in options that produce log output to files, logfiles are written
    under the data directory unless specified using full pathnames. The usual reason
    to use full pathnames is to write logfiles to a filesystem different from the
    one containing the data directory, which is useful technique for dividing disk
    space use and I/O activity among physical devices.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this section provides details specific to controlling individual
    logs. The examples show the lines to include in your server option file to produce
    specific logging behavior. For some ideas about using the logs for diagnostic
    or activity assessment purposes, see [Recipe 22.6](#nch-admin-admin-monitor).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For any log that you enable, see also [Recipe 22.4](#nch-admin-log-file-rotation)
    and [Recipe 22.5](#nch-admin-log-table-rotation) for log maintenance techniques.
    Logs increase in size over time, so you’ll want to have a plan for managing them.
  prefs: []
  type: TYPE_NORMAL
- en: The error log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The error log cannot be disabled, but you can control where it’s written. By
    default, on Unix, the error output goes to your terminal on Unix or to *`host_name`**.err*
    in the data directory if you start the server using *mysqld_safe*. On Windows
    the default is *`host_name`**.err* in the data directory. To specify the error
    log filename, set the `log_error` system variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the error log to the *err.log* file in the data directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As of MySQL 5.7.2, you can influence the amount of error log output by setting
    the `log_error_verbosity` system variable. Permitted values range from 1 (errors
    only) to 3 (errors, warnings, notes; the default). To see errors only, do this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Unix, if you start the server using *mysqld_safe*, it’s possible to redirect
    the error log to the `syslog` facility:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The general query and slow query logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several system variables control the general query and slow query logs. Each
    variable can be set at server startup or changed at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '`log_output` controls the log destinations. The value is `FILE` (log to files,
    the default), `TABLE` (log to tables), `NONE` (disable logging), or a comma-separated
    combination of values, in any order. `NONE` overrides any other value. If the
    value is `NONE`, other settings for these logs have no effect. Destination control
    applies to the general query and slow query logs together; you cannot write one
    to a file and the other to a table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`general_log` and `slow_query_log` enable or disable the respective logs. By
    default, each log is disabled. If you enable either of them, the server writes
    the log to the destinations specified by `log_output`, unless that variable is
    `NONE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`general_log_file` and `slow_query_log_file` specify log filenames. The default
    names are *`host_name`**.log* and *`host_name`**-slow.log*; however, these settings
    have no effect unless `log_output` specifies `FILE` logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the general query log to the *query.log* file in the data directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the general and slow query logs to tables in the `mysql` database (the
    table names are `general_log` and `slow_log` and cannot be changed):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the general query log to a file named *query.log* and to the `general_log`
    table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The binary log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to MySQL 8 binary logging was disabled by default. To enable the binary
    log, use the `--log-bin` option, optionally specifying the logfile basename as
    the option value. In order to disable binary logging in MySQL 8.0 you can use
    `--skip-log-bin` option or `--disable-log-bin` option. The default basename is
    *`binlog`*. The value for this option is a basename because the server creates
    binary logfiles in numbered sequence, automatically adding to the basename suffixes
    of *.000001*, *.000002*, and so forth. The server advances to the next file in
    the sequence when it starts, when the logs are flushed, and when the current file
    reaches the maximum logfile size (controlled by the `max_binlog_size` system variable).
    In MySQL 8.0 `expire_logs_days` is deprecated and replaced with `binlog_expire_logs_seconds`.
    To have the server expire logfiles for you, set the `binlog_expire_logs_seconds`
    system variable to the age in seconds at which files become eligible for removal.
    The default value for *binlog_expire_logs_seconds* is 30 days (30*24*60*60 seconds).
    To disable automatic purging of binary logs set *binlog_expire_logs_seconds* to
    0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the binary log, writing numbered files in the data directory having
    names beginning with *binlog*. Additionally, expire logfiles after a week:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The binary log is an essential component for the MySQL server, and the administrator
    needs to approach it carefully. Binary logs contain events for all data changes
    hence used for the following areas.
  prefs: []
  type: TYPE_NORMAL
- en: Replication setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Point-in-time recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a specific event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 22.4 Rotating or Expiring Logfiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Files used for logging grow indefinitely unless managed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Available strategies for managing log files include rotating a logfile through
    a set of names and expiring files by age. But different strategies apply to different
    logs, so consider the log type before choosing a strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logfile rotation is a technique that renames a logfile through a series of one
    or more names. This maintains the file for a certain number of rotations, at which
    point it reaches the end of the sequence and its contents are discarded by being
    overwritten. Rotation can be applied to the error log, general query log, or slow
    query log.
  prefs: []
  type: TYPE_NORMAL
- en: Logfile expiration removes files when they reach a certain age. This technique
    applies to the binary log.
  prefs: []
  type: TYPE_NORMAL
- en: Both log management methods rely on log flushing to make sure that the current
    logfile has been closed properly. When you flush the logs, the server closes and
    reopens whichever of the files it is writing. If you rename the error, general
    query, or slow query logfile first, the server closes the current file and reopens
    a new one using the original name; this is what enables rotation of the current
    file while the server runs. The server also closes the current binary logfile
    and opens a new one with the next number in the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: To flush the server logs, execute a `FLUSH` `LOGS` statement or use the *mysqladmin*
    `flush-logs` command. (Log flushing requires the `RELOAD` privilege.) The following
    discussion shows maintenance operations as performed at the command line, so it
    uses *mysqladmin*. The examples use *mv* as the file renaming command, which is
    applicable on Unix. On Windows, use *rename* instead.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the error, general query, or slow query log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To maintain a single file in a log rotation, rename the current logfile and
    flush the logs. Suppose that the error logfile is named *err.log* in the data
    directory. To rotate it, change location to the data directory, then execute these
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When you flush the logs, the server opens a new *err.log* file. You can remove
    *err.log.old* at your leisure. To maintain an archive copy, include it in your
    filesystem backups before removing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To maintain a set of multiple rotated files, it’s convenient to use a sequence
    of numbered suffixes. For example, to maintain a set of three old general query
    logfiles, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The first few times you execute the command sequence, the initial commands are
    unneeded until the respective *query.log.**`N`* files exist.
  prefs: []
  type: TYPE_NORMAL
- en: Successive executions of that command sequence rotate *query.log* through the
    names *query.log.1*, *query.log.2*, and *query.log.3*; then *query.log.3* is overwritten
    and its contents lost. To maintain an archive copy, include the rotated files
    in your filesystem backups before removing them.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the binary log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The server creates binary logfiles in numbered sequence. To expire them, you
    need only arrange that it removes files when they’re old enough. Several factors
    affect how many files the server creates and maintains:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The frequency of server restarts and log flushing operations: one new file
    is generated each time either of those occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The size to which files can grow: larger sizes lead to fewer files. To control
    this size, set the `max_binlog_size` system variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How old files are permitted to become: longer expiration times lead to more
    files. To control this age, set the `binlog_expire_logs_seconds` system variable.
    The server makes expiration checks at server startup and when it opens a new binary
    logfile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following settings enable the binary log, set the maximum file size to
    4GB, and expire files after four days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also remove binary logfiles manually with the `PURGE` `BINARY` `LOGS`
    statement. For example, to remove all files up to and including the one named
    `binlog.001028`, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If your server is a replication source, don’t be too aggressive about removing
    binary logfiles. No file should be removed until you’re certain its contents have
    been completely transmitted to all replicas.
  prefs: []
  type: TYPE_NORMAL
- en: Automating logfile rotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make it easier to perform a rotation operation, put the commands that implement
    it in a file to create a shell script. To perform the rotation automatically,
    arrange to execute the script from a job scheduler such as *cron*. The script
    will need to access connection parameters that enable it to connect to the server
    to flush the logs, using an account that has the `RELOAD` privilege. One strategy
    is to put the parameters in an option file and pass the file to *mysqladmin* using
    a `--defaults-file=`*`file_name`* option. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 22.5 Rotating Log Tables or Expiring Log Table Rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tables used for logging grow indefinitely unless managed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rotate the tables or expire rows within them.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 22.4](#nch-admin-log-file-rotation) discussed rotation and expiration
    of logfiles. Analogous techniques apply to log tables:'
  prefs: []
  type: TYPE_NORMAL
- en: To rotate a log table, rename it and open a new table with the original name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To expire log table contents, remove rows older than a certain age.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The examples here demonstrate how to implement these methods using the general
    query log table, `mysql.general_log`. The same methods apply to the slow query
    log table, `mysql.slow_log`, or to any other table containing rows that have a
    timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'To employ log table rotation, create an empty copy of the original table to
    serve as the new table (see [Recipe 6.1](ch06.xhtml#nch-tblmgmt-tblmgmt-clone)),
    then rename the original table and rename the new one to take its place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To employ log row expiration, you can either empty the table completely or
    selectively:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To empty a log table completely, truncate it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To expire a table selectively, removing only rows older than a given age, you
    must know the name of the column that indicates row-creation time:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For automatic expiration, the statements for any of the techniques just described
    can be executed within a scheduled event (see [Recipe 11.5](ch11.xhtml#nch-routines-routines-events)).
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 22.6 Configuring storage engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to make sure the engine of your choice is configured properly.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understand and configure each storage engine according to its use case.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL comes with several storage engines by default, such as MyISAM and InnoDB.
    MySQL 8.0 onwards uses InnoDB as the default database engine. Along with this
    popular storage engine, there are some others you might want to explore. Each
    of these storage engine will use shared resources as well as dedicated resources
    from the operating system. Care must be taken not to give too many resources while
    mixing and matching.
  prefs: []
  type: TYPE_NORMAL
- en: 'InnoDB : Supports transactions and row level locking with full ACID compliancy
    engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MyISAM : Table level locking and simple engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MyRocks : LSM based b-tree key/value storage engine. ^([1](ch22.xhtml#idm45820313521328))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSV : Comma separated values engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blackhole : All writes are sent to /dev/null no data storage engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory : Optimized for in memory work load storage engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Archive : Write only engine for archival data in compressed format storage
    engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using multiple storage engines at the same time can cause issues and may lead
    to data loss if used in the same transaction. Also, be careful about the compatibility
    of your application and tooling around it.
  prefs: []
  type: TYPE_NORMAL
- en: As each of above engines store data differently, we must configure them accordingly.
    InnoDB utilizes redo and undo log spaces for modified data. This allows both recovery
    and point in time restore with minimal data loss in the event of hardware or server
    failures. MyRocks is another advanced storage engine which writes to recovery
    log Write Ahead Log (WAL) first and supports rollback for each transaction. MyISAM
    and CSV type storage engines writes directly to data files. While it’s easier
    to make binary backups and transport them, these engines will not support rollback
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check default storage engine using MySQL 8.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We can see the table storage engine type by checking the schema definition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If we want to change the storage engine type after you’ve created the table,
    issue an *ALTER* statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While you can swap between storage engines after a table has been created and
    data loaded, *ALTER TABLE* operation locks for all storage engines. For large
    data sets, consider utilizing online schema change utilities such as [pt-online-schema-change](https://www.percona.com/doc/percona-toolkit/3.0/pt-online-schema-change.html#:~:text=pt%2Donline%2Dschema%2Dchange%20works%20by%20creating%20an%20empty,it%20with%20the%20new%20one.)
    or [gh-ost](https://github.com/github/gh-ost). These tools allow schema migrations
    to complete without creating a metadata lock and apply changes in a controlled
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other storage engine settings can be checked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: ^([1](ch22.xhtml#idm45820313521328-marker)) Third party storage engine via Percona
    and MariaDB designed to handle write intensive workloads with space saving benefits.
  prefs: []
  type: TYPE_NORMAL
