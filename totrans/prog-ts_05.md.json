["```\n// Represents a chess game\nclass Game {}\n\n// A chess piece\nclass Piece {}\n\n// A set of coordinates for a piece\nclass Position {}\n```", "```\n// ...\nclass King extends Piece {}\nclass Queen extends Piece {}\nclass Bishop extends Piece {}\nclass Knight extends Piece {}\nclass Rook extends Piece {}\nclass Pawn extends Piece {}\n```", "```\n`type` `Color` `=` `'Black'` `|` `'White'`\n`type` `File` `=` `'A'` `|` `'B'` `|` `'C'` `|` `'D'` `|` `'E'` `|` `'F'` `|` `'G'` `|` `'H'`\n`type` `Rank` `=` `1` `|` `2` `|` `3` `|` `4` `|` `5` `|` `6` `|` `7` `|` `8` ![1](assets/1.png)\n\nclass Position {\n  `constructor``(`\n    `private` `file``:` `File``,` ![2](assets/2.png)\n    `private` `rank``:` `Rank`\n  `)` `{``}`\n}\n\nclass Piece {\n  `protected` `position``:` `Position` ![3](assets/3.png)\n  `constructor``(`\n    `private` `readonly` `color``:` `Color``,` ![4](assets/4.png)\n    `file``:` `File``,`\n    `rank``:` `Rank`\n  `)` `{`\n    `this``.``position` `=` `new` `Position``(``file``,` `rank``)`\n  `}`\n}\n\n```", "```\n*`// ...`*\n`abstract` class Piece {\n  constructor(\n    *`// ...`*\n\n```", "```\nnew Piece('White', 'E', 1)  // Error TS2511: Cannot create an instance\n                            // of an abstract class.\n```", "```\n*`// ...`*\nabstract class Piece {\n  *`// ...`*\n  `moveTo``(``position``:` `Position``)` `{`\n    `this``.``position` `=` `position`\n  `}`\n  `abstract` `canMoveTo``(``position``:` `Position``)``:` `boolean`\n}\n\n```", "```\n*`// ...`*\nclass Position {\n  *`// ...`*\n  `distanceFrom``(``position``:` `Position``)` `{`\n    `return` `{`\n      `rank``:` `Math.abs``(``position``.``rank` `-` `this``.``rank``)``,`\n      `file``:` `Math.abs``(``position``.``file``.``charCodeAt``(``0``)` `-` `this``.``file``.``charCodeAt``(``0``)``)`\n    `}`\n  `}`\n}\n\nclass King extends Piece {\n  `canMoveTo``(``position``:` `Position``)` `{`\n    `let` `distance` `=` `this``.``position``.``distanceFrom``(``position``)`\n    `return` `distance``.``rank` `<` `2` `&&` `distance``.``file` `<` `2`\n  `}`\n}\n\n```", "```\n*`// ...`*\nclass Game {\n  `private` `pieces` `=` `Game``.``makePieces``(``)`\n\n  `private` `static` `makePieces() {`\n    `return` `[`\n\n      `// Kings `      `new` `King``(``'White'``,` `'E'``,` `1``)``,`\n      `new` `King``(``'Black'``,` `'E'``,` `8``)``,`\n\n      `// Queens `      `new` `Queen``(``'White'``,` `'D'``,` `1``)``,`\n      `new` `Queen``(``'Black'``,` `'D'``,` `8``)``,`\n\n      `// Bishops `      `new` `Bishop``(``'White'``,` `'C'``,` `1``)``,`\n      `new` `Bishop``(``'White'``,` `'F'``,` `1``)``,`\n      `new` `Bishop``(``'Black'``,` `'C'``,` `8``)``,`\n      `new` `Bishop``(``'Black'``,` `'F'``,` `8``)``,`\n\n      *`// ...`*\n    `]`\n  }\n}\n\n```", "```\nlet set = new Set\nset.add(1).add(2).add(3)\nset.has(2) // true\nset.has(4) // false\n```", "```\nclass Set {\n  has(value: number): boolean {\n    // ...\n  }\n}\n```", "```\nclass Set {\n  has(value: number): boolean {\n    *`// ...`*\n  }\n  `add``(``value``:` `number``)``:` `Set` `{`\n    *`// ...`*\n  `}`\n}\n\n```", "```\nclass MutableSet extends Set {\n  delete(value: number): boolean {\n    // ...\n  }\n}\n```", "```\nclass MutableSet extends Set {\n  delete(value: number): boolean {\n    // ...\n  }\n  `add``(``value``:` `number``)``:` `MutableSet` `{`\n    `// ... `  `}`\n}\n\n```", "```\nclass Set {\n  has(value: number): boolean {\n    // ...\n  }\n  add(value: number): `this` {\n    // ...\n  }\n}\n\n```", "```\nclass MutableSet extends Set {\n  delete(value: number): boolean {\n    // ...\n  }\n}\n```", "```\ntype Sushi = {\n  calories: number\n  salty: boolean\n  tasty: boolean\n}\n```", "```\n`interface` `Sushi` {\n  calories: number\n  salty: boolean\n  tasty: boolean\n}\n\n```", "```\ntype Cake = {\n  calories: number\n  sweet: boolean\n  tasty: boolean\n}\n```", "```\ntype Food = {\n  calories: number\n  tasty: boolean\n}\ntype Sushi = `Food` `&` {\n  salty: boolean\n}\ntype Cake = `Food` `&` {\n  sweet: boolean\n}\n\n```", "```\ninterface Food {\n  calories: number\n  tasty: boolean\n}\ninterface Sushi `extends` `Food` {\n  salty: boolean\n}\ninterface Cake `extends` `Food` {\n  sweet: boolean\n}\n\n```", "```\ntype A = number\ntype B = A | string\n```", "```\ninterface A {\n  good(x: number): string\n  bad(x: number): string\n}\n\ninterface B extends A {\n  good(x: string | number): string\n  bad(x: string): string  // Error TS2430: Interface 'B' incorrectly extends\n}                         // interface 'A'. Type 'number' is not assignable\n                          // to type 'string'.\n```", "```\n// User has a single field, name\ninterface User {\n  name: string\n}\n\n// User now has two fields, name and age\ninterface User {\n  age: number\n}\n\nlet a: User = {\n  name: 'Ashley',\n  age: 30\n}\n```", "```\ntype User = {  // Error TS2300: Duplicate identifier 'User'.\n  name: string\n}\n\ntype User = {  // Error TS2300: Duplicate identifier 'User'.\n  age: number\n}\n```", "```\ninterface User {\n  age: string\n}\n\ninterface User {\n  age: number  // Error TS2717: Subsequent property declarations must have\n}              // the same type. Property 'age' must be of type 'string',\n               // but here has type 'number'.\n```", "```\ninterface User<Age extends number> {  // Error TS2428: All declarations of 'User'\n  age: Age                            // must have identical type parameters.\n}\n\ninterface User<Age extends string> {\n  age: Age\n}\n```", "```\ninterface Animal {\n  eat(food: string): void\n  sleep(hours: number): void\n}\n\nclass Cat implements Animal {\n  eat(food: string) {\n    console.info('Ate some', food, '. Mmm!')\n  }\n  sleep(hours: number) {\n    console.info('Slept for', hours, 'hours')\n  }\n}\n```", "```\ninterface Animal {\n  `readonly` `name``:` `string`\n  eat(food: string): void\n  sleep(hours: number): void\n}\n\n```", "```\ninterface Animal {\n  readonly name: string\n  eat(food: string): void\n  sleep(hours: number): void\n}\n\n`interface` `Feline` `{`\n  `meow``(``)``:` `void`\n`}`\n\nclass Cat implements Animal`,` `Feline` {\n  name = 'Whiskers'\n  eat(food: string) {\n    console.info('Ate some', food, '. Mmm!')\n  }\n  sleep(hours: number) {\n    console.info('Slept for', hours, 'hours')\n  }\n  `meow() {`\n    `console``.``info``(``'Meow'``)`\n  `}`\n}\n\n```", "```\nclass Zebra {\n  trot() {\n    // ...\n  }\n}\n\nclass Poodle {\n  trot() {\n    // ...\n  }\n}\n\nfunction ambleAround(animal: Zebra) {\n  animal.trot()\n}\n\nlet zebra = new Zebra\nlet poodle = new Poodle\n\nambleAround(zebra)   // OK\nambleAround(poodle)  // OK\n```", "```\nclass A {\n  private x = 1\n}\nclass B extends A {}\nfunction f(a: A) {}\n\nf(new A)   // OK\nf(new B)   // OK\n\nf({x: 1})  // Error TS2345: Argument of type '{x: number}' is not\n           // assignable to parameter of type 'A'. Property 'x' is\n           // private in type 'A' but not in type '{x: number}'.\n```", "```\n// values\nlet a = 1999\nfunction b() {}\n\n// types\ntype a = number\ninterface b {\n  (): void\n}\n```", "```\n// ...\nif (a + 1 > 3) //... // TypeScript infers from context that you mean the value a\nlet x: a = 3         // TypeScript infers from context that you mean the type a\n```", "```\nclass C {}\nlet c: C ![1](assets/1.png)\n  = new C ![2](assets/2.png)\n\nenum E {F, G}\nlet e: E ![3](assets/3.png)\n  = E.F ![4](assets/4.png)\n```", "```\ntype State = {\n  [key: string]: string\n}\n\nclass StringDatabase {\n  state: State = {}\n  get(key: string): string | null {\n    return key in this.state ? this.state[key] : null\n  }\n  set(key: string, value: string): void {\n    this.state[key] = value\n  }\n  static from(state: State) {\n    let db = new StringDatabase\n    for (let key in state) {\n      db.set(key, state[key])\n    }\n    return db\n  }\n}\n```", "```\ninterface StringDatabase {\n  state: State\n  get(key: string): string | null\n  set(key: string, value: string): void\n}\n```", "```\ninterface StringDatabaseConstructor {\n  new(): StringDatabase\n  from(state: State): StringDatabase\n}\n```", "```\nclass StringDatabase {\n  constructor(public state: State = {}) {}\n  // ...\n}\n```", "```\ninterface StringDatabaseConstructor {\n  new(state?: State): StringDatabase\n  from(state: State): StringDatabase\n}\n```", "```\nclass MyMap<K, V> { ![1](assets/1.png)\n  constructor(initialKey: K, initialValue: V) { ![2](assets/2.png)\n    // ...\n  }\n  get(key: K): V { ![3](assets/3.png)\n    // ...\n  }\n  set(key: K, value: V): void {\n    // ...\n  }\n  merge<K1, V1>(map: MyMap<K1, V1>): MyMap<K | K1, V | V1> { ![4](assets/4.png)\n    // ...\n  }\n  static of<K, V>(k: K, v: V): MyMap<K, V> { ![5](assets/5.png)\n    // ...\n  }\n}\n```", "```\ninterface MyMap<K, V> {\n  get(key: K): V\n  set(key: K, value: V): void\n}\n```", "```\nlet a = new MyMap<string, number>('k', 1) // MyMap<string, number>\nlet b = new MyMap('k', true) // MyMap<string, boolean>\n\na.get('k')\nb.set('k', false)\n```", "```\nclass User {\n  // ...\n}\n\nUser.debug() // evaluates to 'User({\"id\": 3, \"name\": \"Emma Gluzman\"})'\n```", "```\ntype ClassConstructor = new(...args: any[]) => {} ![1](assets/1.png)\n\nfunction withEZDebug<C extends ClassConstructor>(Class: C) { ![2](assets/2.png)\n  return class extends Class { ![3](assets/3.png)\n    constructor(...args: any[]) { ![4](assets/4.png)\n      super(...args) ![5](assets/5.png)\n    }\n  }\n}\n```", "```\ntype ClassConstructor = new(...args: any[]) => {}\n\nfunction withEZDebug<C extends ClassConstructor>(Class: C) {\n  return class extends Class {\n    `debug() {`\n      `let` `Name` `=` `Class``.``constructor``.``name`\n      `let` `value` `=` `this``.``getDebugValue``(``)`\n      `return` `Name` `+` `'('` `+` `JSON``.``stringify``(``value``)` `+` `')'`\n    `}`\n  }\n}\n\n```", "```\ntype ClassConstructor`<``T``>` = new(...args: any[]) => `T` ![](assets/1.png)\n\nfunction withEZDebug<C extends ClassConstructor`<``{`\n  `getDebugValue``(``)``:` `object` ![](assets/2.png)\n`}``>`>(Class: C) {\n  *`// ...`*\n}\n\n```", "```\nclass HardToDebugUser {\n  constructor(\n    private id: number,\n    private firstName: string,\n    private lastName: string\n  ) {}\n  getDebugValue() {\n    return {\n      id: this.id,\n      name: this.firstName + ' ' + this.lastName\n    }\n  }\n}\n\nlet User = withEZDebug(HardToDebugUser)\nlet user = new User(3, 'Emma', 'Gluzman')\nuser.debug() // evaluates to 'User({\"id\": 3, \"name\": \"Emma Gluzman\"})'\n```", "```\n@serializable\nclass APIPayload {\n  getValue(): Payload {\n    // ...\n  }\n}\n```", "```\nlet APIPayload = serializable(class APIPayload {\n  getValue(): Payload {\n    // ...\n  }\n})\n```", "```\ntype ClassConstructor<T> = new(...args: any[]) => T ![1](assets/1.png)\n\nfunction serializable<\n  T extends ClassConstructor<{\n    getValue(): Payload ![2](assets/2.png)\n  }>\n>(Constructor: T) { ![3](assets/3.png)\n  return class extends Constructor { ![4](assets/4.png)\n    serialize() {\n      return this.getValue().toString()\n    }\n  }\n}\n```", "```\nlet payload = new APIPayload\nlet serialized = payload.serialize() // Error TS2339: Property 'serialize' does\n                                     // not exist on type 'APIPayload'.\n```", "```\nlet DecoratedAPIPayload = serializable(APIPayload)\nlet payload = new DecoratedAPIPayload\npayload.serialize()                  // string\n```", "```\nclass MessageQueue {\n  private constructor(private messages: string[]) {}\n}\n```", "```\nclass BadQueue extends MessageQueue {}  // Error TS2675: Cannot extend a class\n                                        // 'MessageQueue'. Class constructor is\n                                        // marked as private.\n\nnew MessageQueue([])                    // Error TS2673: Constructor of class\n                                        // 'MessageQueue' is private and only\n                                        // accessible within the class\n                                        // declaration.\n```", "```\nclass MessageQueue {\n  private constructor(private messages: string[]) {}\n  `static` `create``(``messages``:` `string``[``]``)` `{`\n    `return` `new` `MessageQueue``(``messages``)`\n  `}`\n}\n\n```", "```\nclass BadQueue extends MessageQueue {}  // Error TS2675: Cannot extend a class\n                                        // 'MessageQueue'. Class constructor is\n                                        // marked as private.\n\nMessageQueue.create([]) // MessageQueue\n```", "```\ntype Shoe = {\n  purpose: string\n}\n\nclass BalletFlat implements Shoe {\n  purpose = 'dancing'\n}\n\nclass Boot implements Shoe {\n  purpose = 'woodcutting'\n}\n\nclass Sneaker implements Shoe {\n  purpose = 'walking'\n}\n```", "```\nlet Shoe = {\n  create(type: 'balletFlat' | 'boot' | 'sneaker'): Shoe { ![1](assets/1.png)\n    switch (type) { ![2](assets/2.png)\n      case 'balletFlat': return new BalletFlat\n      case 'boot': return new Boot\n      case 'sneaker': return new Sneaker\n    }\n  }\n}\n```", "```\nShoe.create('boot') // Shoe\n```", "```\nnew RequestBuilder()\n  .setURL('/users')\n  .setMethod('get')\n  .setData({firstName: 'Anna'})\n  .send()\n```", "```\nclass RequestBuilder {}\n```", "```\nclass RequestBuilder {\n\n  `private` `url``:` `string` `|` `null` `=` `null` ![](assets/1.png)\n\n  `setURL``(``url``:` `string``)``:` `this` `{` ![](assets/2.png)\n    `this``.``url` `=` `url`\n    `return` `this`\n  `}`\n}\n\n```", "```\nclass RequestBuilder {\n\n  `private` `data``:` `object` `|` `null` `=` `null`\n  `private` `method``:` `'get'` `|` `'post'` `|` `null` `=` `null`\n  private url: string | null = null\n\n  `setMethod``(``method``:` `'get'` `|` `'post'``)``:` `this` `{`\n    `this``.``method` `=` `method`\n    `return` `this`\n  `}`\n  `setData``(``data``:` `object``)``:` `this` `{`\n    `this``.``data` `=` `data`\n    `return` `this`\n  `}`\n  setURL(url: string): this {\n    this.url = url\n    return this\n  }\n\n  `send() {`\n    `// ... `  `}`\n}\n\n```"]