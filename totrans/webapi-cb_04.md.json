["```\n/**\n * Loads user data from the URL /api/users, then prints them\n * to the console\n */\nfunction getUsers() {\n  const request = new XMLHttpRequest();\n\n  request.addEventListener('load', event => {\n    // The event target is the XHR itself; it contains a\n    // responseText property that we can use to create a JavaScript object from\n    // the JSON text.\n    const users = JSON.parse(event.target.responseText);\n    console.log('Got users:', users);\n  });\n\n  // Handle any potential errors with the request.\n  // This only handles network errors. If the request\n  // returns an error status like 404, the 'load' event still fires\n  // where you can inspect the status code.\n  request.addEventListener('error', err => {\n    console.log('Error!', err);\n  });\n\n  request.open('GET', '/api/users');\n  request.send();\n}\n```", "```\n/**\n * Loads users by calling the /api/users API, and parses the\n * response JSON.\n * @returns a Promise that resolves to an array of users returned by the API\n */\nfunction loadUsers() {\n  // Make the request.\n  return fetch('/api/users')\n    // Parse the response body to an object.\n    .then(response => response.json())\n    // Handle errors, including network and JSON parsing errors.\n    .catch(error => console.error('Unable to fetch:', error.message));\n}\n\nloadUsers().then(users => {\n  console.log('Got users:', users);\n});\n```", "```\nasync function loadUsers() {\n  try {\n    const response = await fetch('/api/users');\n    return response.json();\n  } catch (error) {\n    console.error('Error loading users:', error);\n  }\n}\n\nasync function printUsers() {\n  const users = await loadUsers();\n  console.log('Got users:', users);\n}\n```", "```\n/**\n * Creates a new user by sending a POST request to /api/users.\n * @param firstName The user's first name\n * @param lastName The user's last name\n * @param department The user's department\n * @returns a Promise that resolves to the API response body\n */\nfunction createUser(firstName, lastName, department) {\n  return fetch('/api/users', {\n    method: 'POST',\n    body: JSON.stringify({ firstName, lastName, department }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n    .then(response => response.json());\n}\n\ncreateUser('John', 'Doe', 'Engineering')\n  .then(() => console.log('Created user!'))\n  .catch(error => console.error('Error creating user:', error));\n```", "```\nfetch('/login', {\n  method: 'POST',\n  body: 'username=sysadmin&password=password',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n  }\n})\n  .then(response => response.json())\n  .then(data => console.log('Logged in!', data))\n  .catch(error => console.error('Request failed:', error));\n```", "```\n/**\n * Given a form with a 'file' input, sends a POST request containing\n * the file data in its body.\n * @param form the form object (should have a file input with the name 'file')\n * @returns a Promise that resolves when the response JSON is received\n */\nfunction uploadFile(form) {\n  const formData = new FormData(form);\n  const fileData = formData.get('file');\n  return fetch('https://httpbin.org/post', {\n    method: 'POST',\n    body: fileData\n  })\n    .then(response => response.json());\n}\n```", "```\nconst currentUser = {\n  username: 'sysadmin'\n};\n\n// Some analytics data we want to capture\nconst data = {\n  user: currentUser.username,\n  lastVisited: new Date()\n};\n\n// Send the data before unload.\ndocument.addEventListener('visibilitychange', () => {\n  // If the visibility state is 'hidden', that means the page just became hidden.\n  if (document.visibilityState === 'hidden') {\n    navigator.sendBeacon('/api/analytics', data);\n  }\n});\n```", "```\nconst events = new EventSource('https://example.com/events');\n\n// Fired once connected\nevents.addEventListener('open', () => {\n  console.log('Connection is open');\n});\n\n// Fired if a connection error occurs\nevents.addEventListener('error', event => {\n  console.log('An error occurred:', event);\n});\n\n// Fired when receiving an event with a type of 'heartbeat'\nevents.addEventListener('heartbeat', event => {\n  console.log('got heartbeat:', event.data);\n});\n\n// Fired when receiving an event with a type of 'notice'\nevents.addEventListener('notice', event => {\n  console.log('got notice:', event.data);\n})\n\n// The EventSource leaves the connection open. If we want to close the connection,\n// we need to call close on the EventSource object.\nfunction cleanup() {\n  events.close();\n}\n```", "```\nevent: notice\ndata: Connection established at 10:51 PM, 2023-04-22\nid: 3\n```", "```\n// Open the WebSocket connection (the URL scheme should be ws: or wss:).\nconst socket = new WebSocket(url);\n\nsocket.addEventListener('open', onSocketOpened);\nsocket.addEventListener('message', handleMessage);\nsocket.addEventListener('error', handleError);\nsocket.addEventListener('close', onSocketClosed);\n\nfunction onSocketOpened() {\n  console.log('Socket ready for messages');\n}\n\nfunction handleMessage(event) {\n  console.log('Received message:', event.data);\n}\n\nfunction handleError(event) {\n  console.log('Socket error:', event);\n}\n\nfunction onSocketClosed() {\n  console.log('Connection was closed');\n}\n```", "```\n// Messages are simple strings.\nsocket.send('Hello');\n\n// The socket needs the data as a string, so you can use\n// JSON.stringify to serialize objects to be sent.\nsocket.send(JSON.stringify({\n  username: 'sysadmin',\n  password: 'password'\n}));\n```", "```\nsocket.addEventListener('message', event => {\n  socket.send('ACKNOWLEDGED');\n});\n```", "```\nGET /websocket HTTP/1.1\nHost: example.com\nSec-WebSocket-Key: aSBjYW4gaGFzIHdzIHBsej8/\nSec-WebSocket-Version: 13\nConnection: Upgrade\nUpgrade: websocket\n```", "```\nHTTP/1.1 101 Switching Protocols\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: bm8gcGVla2luZywgcGxlYXNlIQ==\n```"]