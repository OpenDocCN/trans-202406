- en: Appendix A. Final Code Kitchen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0673-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Finally, the complete version of the BeatBox!**'
  prefs: []
  type: TYPE_NORMAL
- en: '**It connects to a simple MusicServer so that you can send and receive beat
    patterns with other clients.**'
  prefs: []
  type: TYPE_NORMAL
- en: Final BeatBox client program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of this code is the same as the code from the Code Kitchens in the previous
    chapters, so we don’t annotate the whole thing again. The new parts include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GUI: Two new components are added for the text area that displays incoming
    messages (actually a scrolling list) and the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'NETWORKING: Just like the SimpleChatClient in this chapter, the BeatBox now
    connects to the server and gets an input and output stream.'
  prefs: []
  type: TYPE_NORMAL
- en: 'MULTITHREADED: Again, just like the SimpleChatClient, we start a “reader” job
    that keeps looking for incoming messages from the server. But instead of just
    text, the messages coming in include TWO objects: the String message and the serialized
    array (the thing that holds the state of all the checkboxes).'
  prefs: []
  type: TYPE_NORMAL
- en: All the code is available at *[https://oreil.ly/hfJava_3e_examples](https://oreil.ly/hfJava_3e_examples)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0674-01.png)![image](Images/f0675-01.png)![image](Images/f0676-01.png)![image](Images/f0677-01.png)![image](Images/f0678-01.png)![image](Images/f0679-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Final BeatBox server program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of this code is identical to the SimpleChatServer we made in [Chapter 17](ch17.xhtml#make_a_connection_networking_and_threads),
    *Make a Connection*. The only difference, in fact, is that this server receives,
    and then re-sends, two serialized objects instead of a plain String (although
    one of the serialized objects happens to *be* a String).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0681-01.png)![image](Images/f0682-01.png)'
  prefs: []
  type: TYPE_IMG
