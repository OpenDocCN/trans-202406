["```\nCREATE TABLE book_authors (\n  id     INT NOT NULL AUTO_INCREMENT,\n  author JSON NOT NULL,\n  PRIMARY KEY (id)\n);\n```", "```\nmysql> `INSERT` `INTO` `` ` ```", "``` ` `` `VALUES` \n    -> `(``1``,``'{\"id\": 1, \"name\": \"Paul\",` \n    '>       `\"books\"``:` `[`\n    '>  `\"Software Portability with imake: Practical Software Engineering\",` '>         `\"Mysql: The Definitive Guide to Using, Programming,` ↩ `and Administering Mysql 4 (Developer\\'s Library)\"``,` \n    '> `\"MySQL Certification Study Guide\",` \n    '> `\"MySQL (OTHER NEW RIDERS)\"``,` \n    '> `\"MySQL Cookbook\",` \n    '> `\"MySQL 5.0 Certification Study Guide\"``,` \n    '> `\"Using csh & tcsh: Type Less, Accomplish More` ↩ `(Nutshell Handbooks)\",` \n    '> `\"MySQL (Developer\\'s Library)\"``]``,` \n    '>  `\"lastname\": \"DuBois\"}'``)``,`\n    -> `(``2``,``'{\"id\": 2, \"name\": \"Alkin\",` \n    '> `\"books\"``:` `[``\"MySQL Cookbook\"``]``,` \n    '>  `\"lastname\": \"Tezuysal\"}'``)``,`\n    -> `(``3``,``'{\"id\": 3, \"name\": \"Sveta\",` \n    '> `\"books\"``:` `[``\"MySQL Troubleshooting\"``,` `\"MySQL Cookbook\"``]``,` \n    '>  `\"lastname\": \"Smirnova\"}'``)``;`\nQuery OK, 3 rows affected (0,01 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n```", "```\nmysql> `SELECT` `JSON_VALID``(``'\"name\": \"Sveta\"'``)``;`\n+-------------------------------+ | JSON_VALID('\"name\": \"Sveta\"') |\n+-------------------------------+ |                             0 |\n+-------------------------------+ 1 row in set (0,00 sec)\n\nmysql> `SELECT` `JSON_VALID``(``'{\"name\": \"Sveta\"}'``)``;`\n+---------------------------------+ | JSON_VALID('{\"name\": \"Sveta\"}') |\n+---------------------------------+ |                               1 |\n+---------------------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `INSERT` `INTO` `book_authors``(``author``)` \n    -> `VALUES` `(``'{\"name\": \"Sveta\" \"lastname\": \"Smirnova\"'``)``;`\nERROR 3140 (22032): Invalid JSON text: \"Missing a comma or '}' after an object↩\nmember.\" at position 17 in value for column 'book_authors.author'.\n```", "```\n{\n\"id\": \"http://www.oreilly.com/mysqlcookbook\", ![1](Images/1.png)\n\"$schema\": \"http://json-schema.org/draft-04/schema#\", ![2](Images/2.png)\n\"description\": \"Schema for the table book_authors\", ![3](Images/3.png)\n\"type\": \"object\", ![4](Images/4.png)\n\"properties\": { ![5](Images/5.png)\n  \"name\": {\"type\": \"string\"}, \n  \"lastname\": {\"type\": \"string\"}, \n  \"books\": {\"type\": \"array\"}\n}, \n\"required\":[\"name\", \"lastname\"] ![6](Images/6.png)\n}\n```", "```\nmysql> `SET` `@``schema` `=` `'{` '> `\"id\"``:` `\"http://www.oreilly.com/mysqlcookbook\"``,`\n    '> `\"$schema\": \"http://json-schema.org/draft-04/schema#\",` '> `\"description\"``:` `\"Schema for the table book_authors\"``,`\n    '> `\"type\": \"object\",` '> `\"properties\"``:` `{`\n    '> `\"name\": {\"type\": \"string\"},` '> `\"lastname\"``:` `{``\"type\"``:` `\"string\"``}``,`\n    '> `\"books\": {\"type\": \"array\"}` '> `}``,`\n    '> `\"required\":[\"name\", \"lastname\"]` '> `}``';` Query OK, 0 rows affected (0,00 sec)\n\nmysql> `SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema,` -> `'``{``\"name\"``:` `\"Sveta\"``}``')  AS '``Valid``?``'\\G` *************************** 1\\. row ***************************\nValid?: {\"valid\": false, \"reason\": \"The JSON document location '#' failed requirement ↩\n'required' at JSON Schema location '#'\", \"schema-location\": \"#\", ↩\n\"document-location\": \"#\", \"schema-failed-keyword\": \"required\"}\n1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `JSON_SCHEMA_VALIDATION_REPORT``(``@``schema``,` \n    -> `'{\"name\": \"Sveta\", \"lastname\": \"Smirnova\"}'``)` `AS` `'Valid?'``;`\n+-----------------+ | Valid?          |\n+-----------------+ | {\"valid\": true} |\n+-----------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `JSON_SCHEMA_VALIDATION_REPORT``(``@``schema``,` \n    -> `'{\"name\": \"Sveta\", \"lastname\": \"Smirnova\",` -> `\"books\": \"MySQL Cookbook\"}'``)` `AS` `'Valid?'``\\``G`\n*************************** 1. row ***************************\nValid?: {\"valid\": false, \"reason\": \"The JSON document location '#/books' failed ↩\nrequirement 'type' at JSON Schema location '#/properties/books'\", ↩\n\"schema-location\": \"#/properties/books\", \"document-location\": \"#/books\", ↩\n\"schema-failed-keyword\": \"type\"}\n1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `JSON_SCHEMA_VALIDATION_REPORT``(``@``schema``,` \n    -> `'{\"name\": \"Sveta\", \"lastname\": \"Smirnova\",` -> `\"books\": [\"MySQL Troubleshooting\", \"MySQL Cookbook\"]}'``)` `AS` `'Valid?'``;`\n+-----------------+ | Valid?          |\n+-----------------+ | {\"valid\": true} |\n+-----------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `JSON_SCHEMA_VALID``(``@``schema``,` `'{\"name\": \"Sveta\", \"lastname\": \"Smirnova\",` -> `\"vehicles\": [\"Honda CRF 250L\"]}'``)` `AS` `'Valid 1?'``,`\n    -> `JSON_SCHEMA_VALID``(``@``schema``,` `'{\"name\": \"Alkin\", \"lastname\": \"Tezuysal\",` -> `\"vehicles\": \"boat\"}'``)` `AS` `'Valid 2?'``;`\n+----------+----------+ | Valid 1? | Valid 2? |\n+----------+----------+ |        1 |        1 |\n+----------+----------+ 1 row in set (0,00 sec)\n```", "```\nALTER TABLE book_authors \nADD CONSTRAINT CHECK(JSON_SCHEMA_VALID('\n{\"id\": \"http://www.oreilly.com/mysqlcookbook\", \n \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n \"description\": \"Schema for the table book_authors\", \n \"type\": \"object\", \n \"properties\": {\n \"name\": {\"type\": \"string\"}, \n \"lastname\": {\"type\": \"string\"}, \n \"books\": {\"type\": \"array\"}},\n \"required\":[\"name\", \"lastname\"]} ', \n  author));\n```", "```\nmysql> `SELECT` `JSON_PRETTY``(``author``)` `FROM` `book_authors``\\``G`\n*************************** 1. row ***************************\nJSON_PRETTY(author): {\n  \"id\": 1,\n  \"name\": \"Paul\",\n  \"books\": [\n    \"Software Portability with imake: Practical Software Engineering\",\n    \"Mysql: The Definitive Guide to Using, Programming, ↩\n     and Administering Mysql 4 (Developer's Library)\",\n    \"MySQL Certification Study Guide\",\n    \"MySQL (OTHER NEW RIDERS)\",\n    \"MySQL Cookbook\",\n    \"MySQL 5.0 Certification Study Guide\",\n    \"Using csh & tcsh: Type Less, Accomplish More (Nutshell Handbooks)\",\n    \"MySQL (Developer's Library)\"\n  ],\n  \"lastname\": \"DuBois\"\n}\n*************************** 2. row ***************************\nJSON_PRETTY(author): {\n  \"id\": 2,\n  \"name\": \"Alkin\",\n  \"books\": [\n    \"MySQL Cookbook\"\n  ],\n  \"lastname\": \"Tezuysal\"\n}\n*************************** 3. row ***************************\nJSON_PRETTY(author): {\n  \"id\": 3,\n  \"name\": \"Sveta\",\n  \"books\": [\n    \"MySQL Troubleshooting\",\n    \"MySQL Cookbook\"\n  ],\n  \"lastname\": \"Smirnova\"\n}\n3 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `JSON_EXTRACT``(``author``,` `'$.name'``)` `AS` `author` `FROM` `book_authors``;`\n+---------+ | author  |\n+---------+ | \"Paul\"  |\n| \"Alkin\" |\n| \"Sveta\" |\n+---------+ 3 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `JSON_UNQUOTE``(``JSON_EXTRACT``(``author``,` `'$.name'``)``)` `AS` `author` `FROM` `book_authors``;`\n+--------+ | author |\n+--------+ | Paul   |\n| Alkin  |\n| Sveta  |\n+--------+ 3 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `author``-``>``'$.name'` `AS` `author` `FROM` `book_authors``;`\n+---------+ | author  |\n+---------+ | \"Paul\"  |\n| \"Alkin\" |\n| \"Sveta\" |\n+---------+ 3 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `author``-``>``>``'$.name'` `AS` `author` `FROM` `book_authors``;`\n+--------+ | author |\n+--------+ | Paul   |\n| Alkin  |\n| Sveta  |\n+--------+ 3 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `CONCAT``(``author``-``>``>``'$.name'``,` `' '``,` `author``-``>``>``'$.lastname'``)` `AS` `author``,`\n    -> `author``-``>``>``'$.books[0]'` `AS` `` ` ```", "``` ` ```", "```Last` `Book```", "```\n\nJSON Path `$.books[*]` will return full array of books. Same will happen if you omit a wildcard and simply refer books array as `$.books`. Expression `$.*` will return all elements of the JSON object as an array.\n\n```", "```\n\n## See Also\n\nFor additional information about JSON Path, see [JSON Path Syntax](https://dev.mysql.com/doc/refman/8.0/en/json.html#json-path-syntax) in the MySQL User Reference Manual.\n\n# 19.6 Searching inside JSON\n\n## Problem\n\nYou want to search for JSON documents, containing particular values.\n\n## Solution\n\nUse function `JSON_SEARCH`.\n\n## Discussion\n\nAccessing by key works great but you may want to search for particular values in the JSON documents. MySQL allows you to do it. For example, to find all authors of the book “MySQL Cookbook”, run query:\n\n```", "```\n\nFunction `JSON_SEARCH` takes a JSON document, keyword `one` or `all` and a search string as required arguments and returns found path of the element or elements that contain the searched value. It also supports optional escape character and JSON path arguments.\n\nSimilarly to the operator `LIKE` function `JSON_SEARCH` supports wildcards `%` and `_`.\n\nThus, to search all books, which names start from `MySQL`, use expression:\n\n```", "```\n\nWhen searching for single match you can use return value of the function `JSON_SEARCH` as an argument for the function `JSON_EXTRACT`:\n\n```", "```\n\n# 19.7 Inserting New Elements into a JSON Document\n\n## Problem\n\nYou want to insert new elements into a JSON document.\n\n## Solution\n\nUse functions `JSON_INSERT`, `JSON_ARRAY_APPEND` and `JSON_ARRAY_INSERT`.\n\n## Discussion\n\nYou may want to not only search inside JSON values but modify them. MySQL supports a number of functions which can modify JSON. The most wonderful thing about them is that they do not replace the JSON document as regular string functions do. They rather perform updates in place. This allows you to modify JSON values effectively.\n\nMySQL functions allow you to append, remove, and replace parts of JSON as well as merge two or more documents into one. They all take the original document as an argument, a path that needs to be modified, and a new value.\n\nTo insert new value into a JSON object, use the function `JSON_INSERT`. Thus, to add information about current author’s work place call the function as follow.\n\n```", "```\n\nTo add a book into the end of the `book` array use function `JSON_ARRAY_APPEND`.\n\n```", "```\n\nThis will add new book into the end of the array.\n\n```", "```\n\nTo add an element into a specific place, use the function `JSON_ARRAY_INSERT`.\n\n```", "```\n\nThis will insert a new book into the beginning of the array.\n\n```", "```\n\n# 19.8 Updating JSON\n\n## Problem\n\nYou want to update a JSON value.\n\n## Solution\n\nUse the functions `JSON_REPLACE` and `JSON_SET`.\n\n## Discussion\n\nWhile we were working on this book, Alkin switched his work place. So the content of the table needs to be updated. The function `JSON_REPLACE` replaces a given path with the new value.\n\n```", "```\n\nHowever, the function `JSON_REPLACE` will do nothing if a record, that needs to be replaced, does not exist in the document.\n\n```", "```\n\nTo resolve this problem, use the function `JSON_SET` to update the document if the path exists, or to insert a new value if the path does not.\n\n```", "```\n\n# 19.9 Removing Elements from JSON\n\n## Problem\n\nYou want to remove elements from a JSON document.\n\n## Solution\n\nUse the function `JSON_REMOVE`.\n\n## Discussion\n\nThe function `JSON_REMOVE` removes specified element from JSON.\n\nFor example, to remove unpublished books from the `book_authors` table use following code.\n\n```", "```\n\n# 19.10 Merging Two or More JSON Documents into One\n\n## Problem\n\nYou want to combine two or more JSON documents into one.\n\n## Solution\n\nUse functions family `JSON_MERGE_*`.\n\n## Discussion\n\nTwo functions: `JSON_MERGE_PATCH` and `JSON_MERGE_PRESERVE` are available for combining multiple JSON documents into one. `JSON_MERGE_PATCH` removes duplicates when merging two documents while `JSON_MERGE_PRESERVE` keeps them. Both functions take two or more arguments that should be valid JSON text.\n\nFor examples in this recipe we will store values of the `author` column in the table `book_authors` into user-defined variables: one for each author. Additionally we will store arrays of books for Sveta in a variable `sveta_books`.\n\n```", "```\n\n`JSON_MERGE_PRESERVE` combines documents, provided by its arguments, into a single object. You can use this function to add new elements to your objects or arrays. Thus, to add array of countries where the author lived you can just provide an object, containing such an array as an argument.\n\n```", "```\n\nTo add a new book into the array `books` pass it as a part of the `books` array in the object as a second argument.\n\n```", "```\n\nContent of the array `books` in the second argument will be added to the end of the array with the same name in the first argument.\n\nIf two objects have scalar values with the same key they will be merged into an array.\n\n```", "```\n\n###### Note\n\nNote that function `JSON_MERGE_PRESERVE` does not try to handle duplicates anyhow, so book title `MySQL Cookbook` repeats in the resulting array three times.\n\nFunction `JSON_MERGE_PATCH`, instead, removes duplicates in favor of its latest argument. Same combination of merging three authors will just return the one, specified as the last argument.\n\n```", "```\n\nThis feature could be used to remove unneeded elements from JSON. For example, if we decide that it does not matter in which company the author works, we can remove `work` element by passing it as an object with value `null`:\n\n```", "```\n\nWhen the latest document of the function is not an object `JSON_MERGE_PRESERVE` will add it as a latest element of an array. For example, to add a new book to the array of books by Sveta you may use following code:\n\n```", "```\n\n`JSON_MERGE_PATCH`, instead, will replace elements in the original document with the new one:\n\n```", "```\n\n# 19.11 Creating JSON from Relational Data\n\n## Problem\n\nYou have relational data and want to create JSON from it.\n\n## Solution\n\nUse the function `JSON_OBJECT`, the function `JSON_ARRAY` and their aggregate variants `JSON_OBJECTAGG`, `JSON_ARRAYAGG`.\n\n## Discussion\n\nIt could be useful to create JSON out of relational data. MySQL provides the function `JSON_OBJECT` that combines pairs of values into JSON object.\n\n```", "```\n\nThe function `JSON_ARRAY` creates a JSON array from its arguments.\n\n```", "```\n\nYou can combine both functions, make nesting objects and arrays.\n\n```", "```\n\nThe functions `JSON_OBJECTAGG` and `JSON_ARRAYAGG` are aggregate versions of `JSON_OBJECT` and `JSON_ARRAY` that allow you to create JSON objects and arrays out of data, returned by `GROUP BY` queries.\n\nThe database `cookbook` has a table `movies_actors` that contains a list of movies and actors that were starred in them. The table has few rows for the single movie and few others for the single actor.\n\nIf you want to have a JSON object that will list a movie and all actors who starred in that movie in as an array, combine the functions `JSON_OBJECT` and `JSON_ARRAYAGG`.\n\n```", "```\n\nFunction `JSON_OBJECTAGG` can take table values in one column as member names and values in another column as their arguments.\n\n```", "```\n\n# 19.12 Converting JSON into Relational Format\n\n## Problem\n\nYou have JSON data and want to work with it in the same way as you do with relational structure.\n\n## Solution\n\nUse function `JSON_TABLE`.\n\n## Discussion\n\nIn the previous recipe we converted relational data into JSON. You may need to do the opposite: convert JSON into relational format. In this case, the function `JSON_TABLE` will help.\n\nThe function `JSON_TABLE` takes a JSON document and a list of columns with paths as its arguments. It returns a table as a result.\n\nFor example, for a document\n\n```", "```\n\n`JSON_TABLE` can be called as:\n\n```", "```\n\n[![1](Images/1.png)](#co_nch-json-json-table_select_co)\n\nStart the query by selecting everything from the resulting table.\n\n[![2](Images/2.png)](#co_nch-json-json-table_from_co)\n\nThe function `JSON_TABLE` can be used only in the `FROM` clause.\n\n[![3](Images/3.png)](#co_nch-json-json-table_json_co)\n\nThe first argument to the function is a JSON document. In this example, the function takes a string. If you want to pass a column name in another table, you need to specify this table prior the `JSON_TABLE` call:\n\n```", "```\n\n[![4](Images/4.png)](#co_nch-json-json-table_path_co)\n\nA path that will be used as a document root. In this example we are using the whole document but you can simplify expressions for the columns if you specify the path to the part of the JSON document here.\n\n[![5](Images/5.png)](#co_nch-json-json-table_columns_co)\n\nDefinition of columns.\n\n[![6](Images/6.png)](#co_nch-json-json-table_col_co)\n\nColumn `number` has type `INT` and default error handling: the column set to `NULL` in case an error happens. We use JSON path `$.number` to set a value for this column.\n\n[![7](Images/7.png)](#co_nch-json-json-table_error_co)\n\nFor the column `string` we decided to raise an error, therefore we used clause `ERROR ON ERROR`.\n\n[![8](Images/8.png)](#co_nch-json-json-table_alias_co)\n\nAny function in the `FROM` clause should have an alias, so we used `jt` as an alias.\n\nTo call the function `JSON_TABLE` on an existing table add it to the query prior calling the function. Practically, perform a `CROSS JOIN` of two tables. The `COLUMNS` clause also supports nested paths, so you can expand arrays into multiple rows.\n\nThe column `author` in the table `book_authors` contains list of books in the array `books`. To expand each row into the own row use clause `NESTED PATH`.\n\n```", "```\n\n[![1](Images/1.png)](#co_nch-json-json-table_exttable_co)\n\nTo use a column in the existing table put the table name before the `JSON_TABLE` call.\n\n[![2](Images/2.png)](#co_nch-json-json-table_nested_co)\n\nThe clause `NESTED PATH` expands the following path pattern into several columns. In our case the path is `$.books[*]` that points to the each element of the array `books`.\n\n[![3](Images/3.png)](#co_nch-json-json-table_nestedcol_co)\n\nDefine the nested column as any other column. Note that `PATH` should be relative to the `NESTED PATH`.\n\n## See Also\n\nFor additional information about function `JSON_TABLE`, see [JSON Table Functions in the MySQL User Reference Manual](https://dev.mysql.com/doc/refman/8.0/en/json-table-functions.html).\n\n# 19.13 Investigating JSON\n\n## Problem\n\nYou want to know details about your JSON data structure, such as how deep the value is, how many children a particular element has, and so on.\n\n## Solution\n\nUse JSON attribute functions.\n\n## Discussion\n\nThe function `JSON_LENGTH` returns a number of elements in the JSON document or a path, if specified. For scalars it is always 1, for objects and arrays this is the number of elements. You can use this function to perform such tasks as calculating number of books, written by a particular author:\n\n```", "```\n\nFunction `JSON_DEPTH` returns maximum depth of the JSON document. It returns one for a scalar, empty object or empty array. For objects and arrays with inner elements it counts all nested levels. For the `author` column in the `book_authors` table it returns three:\n\n```", "```\n\nTo understand why so let’s examine example value in detail:\n\n```", "```\n\n[![1](Images/1.png)](#co_nch-json-json-attributes_obj_co)\n\nLevel one: the object that contains all the elements.\n\n[![2](Images/2.png)](#co_nch-json-json-attributes_el_co)\n\nLevel two: object element.\n\n[![3](Images/3.png)](#co_nch-json-json-attributes_array_el_co)\n\nLevel three: element of the nested array.\n\nFunction `JSON_DEPTH` is useful when you need to understand how complex your JSON data is.\n\nFunction `JSON_STORAGE_SIZE` returns the number of bytes that the JSON data takes. It is useful to plan storage use for your data.\n\n```", "```\n\nThe function `JSON_TYPE` returns the type of the JSON element. Thus, for the `author` column in the table `book_authors` the types are as shown:\n\n```", "```\n\n###### Warning\n\nNote that we used operator `->` instead of `->>` to preserve quotes in scalar values.\n\n# 19.14 Working with JSON in MySQL as a Document Store\n\n## Problem\n\nYou want to work with JSON in MySQL in the same way as NoSQL databases do.\n\n## Solution\n\nUse X DevAPI. The following clients and connectors support X DevAPI and can work with JSON as a Document Store.\n\n*   MySQL Shell in JavaScript and Python mode\n*   Connector/C++\n*   Connector/J\n*   Connector/Node.js\n*   Connector/NET\n*   Connector/Python\n\n## Discussion\n\nWe will use MySQL Shell for examples in this recipe. We assume that you are connected to the MySQL server, thus have the default objects available. See [Recipe 2.1](ch02.xhtml#nch-mysqlshell-mysqlshell-connecting) for instructions on how to connect to MySQL Server via MySQL Shell.\n\nMySQL Document Store is a collection, stored in a table, defined as\n\n```", "```\n\nwhere `doc` is a JSON column, storing the document. `_id` is unique identifier, generated by extracting value of the member `_id` and optional `_json_schema` is a schema which you can enforce when creating collection. See [Recipe 2.9](ch02.xhtml#nch-mysqlshell-mysqlshell-js-collections) for the details and example.\n\nX DevAPI will create such a table when you call `createCollection` method.\n\n```", "```\n\n###### Tip\n\nWe use syntax which MySQL Shell in JavaScript mode understands for examples in this recipe. Syntax for different languages slightly differs. Refer to your implementation documentation for details.\n\nOnce the collection is created you can insert documents into it, update, remove and search them.\n\nIt is handy to store collection object in a variable.\n\n```", "```\n\n`Collection` class in X DevAPI supports four basic CRUD (Create, Read, Update, Delete) operations:\n\n*   `add`\n*   `find`\n*   `modify`\n*   `remove`\n\nWe already showed them in action when we discussed MySQL Shell in [Recipe 2.9](ch02.xhtml#nch-mysqlshell-mysqlshell-js-collections) and [Recipe 2.10](ch02.xhtml#nch-mysqlshell-mysqlshell-python-collections). In this recipe we will cover details, missed there.\n\n### Adding documents to the collection\n\nTo add documents into the collection, use a method `add` that accepts either a JSON object or an array of JSON objects, or a `mysqlx.expr` as an argument. The following code snippet demonstrates all three flavours of the syntax.\n\n```", "```\n\n### Searching for documents\n\nTo search for documents, use the method `find`. If called without arguments it will return a list of all documents in the collection.\n\n```", "```\n\nEach of the documents contains an automatically generated `_id` that is also a primary key for the collection.\n\nThe method `find` narrows a result set by using search conditions, limiting the number of the documents, and grouping, sorting, and modifying the resulting values. These are basic methods, available to modify result of any SQL `SELECT` operation. However, it is not possible to join two collections like you can do with SQL tables.\n\nTo search for a particular document pass a condition as an argument of the method `find`. You can use the operator `LIKE` and others to perform creative comparisons.\n\n```", "```\n\nTo modify the result, pass the expression to the method `fields`:\n\n```", "```\n\nTo group documents, use the method `groupBy` and narrow the result with the method `having`. To illustrate how they work we will use collection `CollectionLimbs`.\n\n```", "```\n\nThe code above prints the number of things with a specific number of arms. To limit this list to only things that have both arms and legs, we can use the method `having`:\n\n```", "```\n\nTo print the three things with the highest number of legs, use the method `sort` with the keyword `DESC` and `limit`:\n\n```", "```\n\nYou may also bind values if you pass the parameter name after a colon sign in the method `find` and pass values in the method `bind`. You may bind as many arguments as you want.\n\n```", "```\n\n### Modifying documents\n\nTo modify documents in the collection, use the method `modify`. It accepts search condition and allows you to bind parameters similarly to the method `find`. To modify found elements use the methods `set` and `unset` to set or unset values of the object member. Use the methods `arrayInsert`, `arrayAppend` and `arrayDelete` to modify arrays, and use the method `patch` to merge JSON documents.\n\nFor the illustrations we will use the collection `MyCollection`.\n\n```", "```\n\n[![1](Images/1.png)](#co_nch-json-json-nosql-modify_init_co)\n\nWe will experiment with this document from the collection.\n\n[![2](Images/2.png)](#co_nch-json-json-nosql-modify_set_co)\n\nThe mehtod `set` adds or changes an element in the object.\n\n[![3](Images/3.png)](#co_nch-json-json-nosql-modify_arrayAppend_co)\n\nThe method `arrayAppend` adds new element to the end of the array.\n\n[![4](Images/4.png)](#co_nch-json-json-nosql-modify_arrayInsert_co)\n\nFor the method `arrayInsert` you can specify the position in the array where you want to add new element.\n\n[![5](Images/5.png)](#co_nch-json-json-nosql-modify_arrayDelete_co)\n\nThe method `arrayDelete` removes an element from the specified position.\n\n[![6](Images/6.png)](#co_nch-json-json-nosql-modify_unset_co)\n\nThe method `unset` removes an element from the object.\n\n[![7](Images/7.png)](#co_nch-json-json-nosql-modify_patch_co)\n\nThe method `patch` works similarly to the JSON function `JSON_MERGE_PATCH`. In our case it first added two elements: `number` and `array` to the original document, then replaced content of the element `array` with the content of the element with the same name in the object, passed as a parameter to the second invocation of the method `patch`.\n\n### Removing documents and collections.\n\nTo remove documents use the method `remove`.\n\n```", "```\n\nTo drop a collection, use the method `dropCollection` in your API.\n\n```"]