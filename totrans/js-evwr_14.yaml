- en: Chapter 13\. Styling an Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In his 1978 track “Lip Service,” Elvis Costello sneers the line “don’t act like
    you’re above me, just look at your shoes.” This kiss-off implies that the narrator
    can detect an attempt at elevated social status simply by seeing someone’s shoes,
    no matter how finely pressed their suit or how elegant their dress. For better
    or worse, style is a major part of human culture, and we’re all accustomed to
    picking up on these types of social cues. Archaeologists have even found that
    humans in the Upper Paleolithic era created necklaces and bracelets from bones,
    teeth, berries, and stone. Our clothes not only serve the functional purpose of
    protecting our bodies from the elements, but may also communicate to others information
    about our culture, social status, interests, and so much more.
  prefs: []
  type: TYPE_NORMAL
- en: A web application is functional without anything beyond the default styles of
    the web, but by applying CSS we are able to more clearly communicate with our
    users. In this chapter, we’ll explore how we can use the CSS-in-JS Styled Components
    library to introduce layout and style to our application. This will allow us to
    make a more usable and aesthetically pleasing application within a maintainable,
    component-based, code structure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Layout Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many, or in our case all, pages of an application will share a common layout.
    For example, all the pages of our application will have a header, a sidebar, and
    a content area ([Figure 13-1](#web_layout)). Rather than import the shared layout
    elements within each page component, we can instead create a component specifically
    for our layout and wrap each of our page components within it.
  prefs: []
  type: TYPE_NORMAL
- en: '![A wireframe depicting a header, sidebar navigation, and main content area](assets/jsev_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. A wireframe of our page layout
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To create our component, we’ll begin by creating a new file at *src/components/Layout.js*.
    Within this file we’ll import our shared components and lay out our content. Our
    React component function will receive a property of `children`, which will allow
    us to specify where child content will appear in the layout. We’ll also make use
    of the empty `<React.Fragment>` JSX element to help avoid extraneous markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create our component in *src/components/Layout.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now within our *src/pages/index.js* file, we can wrap our page components within
    the newly created `Layout` component to apply the shared layout to each page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to remove any instances of `<Header>` or `<Navigation>` within
    our page components. For example, our *src/pages/Home.js* file will now have the
    following reduced code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this complete, you can view your application in your browser. As you navigate
    between the routes you’ll see our header and navigation links appear on each page.
    For now, they are not styled and our page does not have a visual layout. Let’s
    explore adding styles in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cascading Style Sheets are precisely named: they are a set of rules that allow
    us to write styles for the web. The styles “cascade,” meaning that the last or
    most specifically defined style will be rendered. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This CSS will render all paragraphs red, making the `color: green` rule obsolete.
    This is such a simple idea, but it has resulted in dozens of patterns and techniques
    to aid in avoiding its pitfalls. CSS structural techniques such as BEM (block
    element modifier), OOCSS (object-oriented CSS), and Atomic CSS use prescriptive
    class naming to help scope styles. Preprocessors such as SASS (syntatically awesome
    stylesheets) and Less (leaner stylesheets) provide tooling that simplifies the
    CSS syntax and enables modular files. Though these each have their merits, CSS-in-JavaScript
    provides a compelling use case for developing React or other JavaScript-driven
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: What About CSS Frameworks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS and UI frameworks are a popular option for developing an application, with
    good reason. They present a solid style baseline and reduce the amount of code
    that a developer needs to write by providing styles and functionality for common
    application patterns. The tradeoffs are that applications using these frameworks
    may become visually similar and can increase the file bundle size. That tradeoff
    may be worthwhile to you, however. Some of my personal favorite UI frameworks
    for working with React are [Ant Design](https://ant.design), [Bootstrap](https://oreil.ly/XJm-B),
    [Grommet](https://v2.grommet.io), and [Rebass](https://rebassjs.org).
  prefs: []
  type: TYPE_NORMAL
- en: CSS-in-JS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When I first encountered CSS-in-JS, my initial reaction was one of horror. I
    spent the formative years of my web development career in the web standards era.
    I continue to advocate for accessibility and sensible progressive enhancement
    for web development. “Separation of concerns” has been a core tenant of my web
    practices for over a decade. So, if you’re like me and simply reading “CSS-in-JS”
    makes you feel dirty, you’re not alone. However, I was quickly won over once I
    gave it a proper (and judgment-free) try. CSS-in-JS makes it easy to think of
    our user interfaces as a series of components, something that I had been trying
    to do with a combination of structure techniques and CSS preprocessors for years.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we’ll be using [Styled Components](https://www.styled-components.com)
    as our CSS-in-JS library. It is fast, flexible, under active development, and
    the most popular CSS-in-JS library. It’s also used by companies such as Airbnb,
    Reddit, Patreon, Lego, BBC News, Atlassian, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Styled Components library works by allowing us to define the styles of
    an element using JavaScript’s template literal syntax. We create a JavaScript
    variable that will refer to an HTML element and its associated styles. Since that
    sounds fairly abstract, let’s take a look at a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can easily scope styles. Additionally, we are scoping our
    style to that specific component. This helps us to avoid class name collisions
    across different parts of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Button Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a basic understanding of styled components, let’s integrate
    them into our application. To begin with, we’ll write some styles for a `<button>`
    element, which will allow us to reuse the component throughout our application.
    In the previous example, we integrated our styles alongside our React/JSX code,
    but we can also write standalone styled components. To begin, create a new file
    at *src/components/Button.js*, import the `styled` library from `styled-components`,
    and set up the exportable component as a template literal like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With the component in place, we can fill it in with some styles. Add some baseline
    button styles as well as hover and active state styles as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now we can use our button throughout our application. For example, to use it
    on the application’s home page, we could import the component and use the `<Button>`
    element anywhere we would typically use `<button>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/pages/home.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With this, we’ve written a styled component that we can use anywhere in our
    application. This is great for maintainability, as we can easily find our styles
    and change them across our codebase. Additionally, we can couple styled components
    with markup, allowing us to create small, reusable, and maintainable components.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Global Styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Though many of our styles will be contained within individual components, every
    site or application also has a set of global styles (things like CSS resets, fonts,
    and baseline colors). We can create a *GlobalStyle.js* component to house these
    styles.
  prefs: []
  type: TYPE_NORMAL
- en: This will look a bit different from our previous example, as we’ll be creating
    a stylesheet rather than styles attached to a specific HTML element. To accomplish
    this, we’ll import the `createGlobalStyle` module from `styled-components`. We’ll
    also import the [`normalize.css` library](https://oreil.ly/i4lyd) to ensure consistent
    rendering of HTML elements across browsers. Finally, we’ll add some global rules
    for the HTML `body` of our application and default link styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/components/GlobalStyle.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply these styles, we’ll import them into our *App.js* file and add a `<GlobalStyle
    />` element to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this, our global styles will be applied to the application. When you preview
    the app in the browser, you’ll see that the typeface has changed, the links have
    a new style, and the margins have been removed ([Figure 13-2](#global_style)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of our application running in the browser with global styles
    applied](assets/jsev_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. Our application now has global styles applied
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Component Styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve applied some global styles to our application, we can begin styling
    the individual components. In doing this we’ll also introduce the overall layout
    of our application. For each component we style, we’ll first import the `styled`
    library from `styled-components`. We’ll then define some element styles as variables.
    Lastly, we’ll use those elements within the JSX of our React component.
  prefs: []
  type: TYPE_NORMAL
- en: Styled Component Naming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To avoid collisions with HTML elements, it’s mandatory to capitalize the names
    of our styled components.
  prefs: []
  type: TYPE_NORMAL
- en: We can begin in *src/components/Layout.js*, where we’ll add style to the structural
    `<div>` and `<main>` tags for the application’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With our *Layout.js* component complete, we can add some styles to our *Header.js*
    and *Navigation.js* files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/components/Header.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in *src/components/Navigation.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With these styles applied, we now have a fully styled application ([Figure 13-3](#web_styled)).
    Going forward, we can apply styles as we create individual components.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of our application with our styled components styles applied](assets/jsev_1303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-3\. Our application with styles applied
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we introduced layout and style to our application. Using the
    CSS-in-JS library Styled Components allows us to write concise and properly scoped
    CSS styles. These styles can then be applied to individual components or globally
    across our application. In the next chapter, we’ll work toward a fully featured
    application by implementing our GraphQL client and making calls to our API.
  prefs: []
  type: TYPE_NORMAL
