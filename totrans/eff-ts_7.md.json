["```\nenum Flavor {\n  VANILLA = 0,\n  CHOCOLATE = 1,\n  STRAWBERRY = 2,\n}\n\nlet flavor = Flavor.CHOCOLATE;  // Type is Flavor\n\nFlavor  // Autocomplete shows: VANILLA, CHOCOLATE, STRAWBERRY\nFlavor[0]  // Value is \"VANILLA\"\n```", "```\nenum Flavor {\n  VANILLA = 'vanilla',\n  CHOCOLATE = 'chocolate',\n  STRAWBERRY = 'strawberry',\n}\n\nlet flavor = Flavor.CHOCOLATE;  // Type is Flavor\n    flavor = 'strawberry';\n // ~~~~~~ Type '\"strawberry\"' is not assignable to type 'Flavor'\n```", "```\nfunction scoop(flavor: Flavor) { /* ... */ }\n```", "```\nscoop('vanilla');  // OK in JavaScript\n```", "```\nscoop('vanilla');\n   // ~~~~~~~~~ '\"vanilla\"' is not assignable to parameter of type 'Flavor'\n\nimport {Flavor} from 'ice-cream';\nscoop(Flavor.VANILLA);  // OK\n```", "```\ntype Flavor = 'vanilla' | 'chocolate' | 'strawberry';\n\nlet flavor: Flavor = 'chocolate';  // OK\n    flavor = 'mint chip';\n // ~~~~~~ Type '\"mint chip\"' is not assignable to type 'Flavor'\n```", "```\nfunction scoop(flavor: Flavor) {\n  if (flavor === 'v\n // Autocomplete here suggests 'vanilla'\n}\n```", "```\nclass Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n```", "```\nclass Person {\n  constructor(public name: string) {}\n}\n```", "```\nclass Person {\n  first: string;\n  last: string;\n  constructor(public name: string) {\n    [this.first, this.last] = name.split(' ');\n  }\n}\n```", "```\nclass Person {\n  constructor(public name: string) {}\n}\nconst p: Person = {name: 'Jed Bartlet'};  // OK\n```", "```\nnamespace foo {\n  function bar() {}\n}\n```", "```\n/// <reference path=\"other.ts\"/>\nfoo.bar();\n```", "```\nclass Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n  @logged\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nfunction logged(target: any, name: string, descriptor: PropertyDescriptor) {\n  const fn = target[name];\n  descriptor.value = function() {\n    console.log(`Calling ${name}`);\n    return fn.apply(this, arguments);\n  };\n}\n\nconsole.log(new Greeter('Dave').greet());\n// Logs:\n// Calling greet\n// Hello, Dave\n```", "```\nconst obj = {\n  one: 'uno',\n  two: 'dos',\n  three: 'tres',\n};\nfor (const k in obj) {\n  const v = obj[k];\n         // ~~~~~~ Element implicitly has an 'any' type\n         //        because type ... has no index signature\n}\n```", "```\nconst obj = { /* ... */ };\n// const obj: {\n//     one: string;\n//     two: string;\n//     three: string;\n// }\nfor (const k in obj) {  // const k: string\n  // ...\n}\n```", "```\nlet k: keyof typeof obj;  // Type is \"one\" | \"two\" | \"three\"\nfor (k in obj) {\n  const v = obj[k];  // OK\n}\n```", "```\ninterface ABC {\n  a: string;\n  b: string;\n  c: number;\n}\n\nfunction foo(abc: ABC) {\n  for (const k in abc) {  // const k: string\n    const v = abc[k];\n           // ~~~~~~ Element implicitly has an 'any' type\n           //        because type 'ABC' has no index signature\n  }\n}\n```", "```\nconst x = {a: 'a', b: 'b', c: 2, d: new Date()};\nfoo(x);  // OK\n```", "```\nfunction foo(abc: ABC) {\n  let k: keyof ABC;\n  for (k in abc) {  // let k: \"a\" | \"b\" | \"c\"\n    const v = abc[k];  // Type is string | number\n  }\n}\n```", "```\nfunction foo(abc: ABC) {\n  for (const [k, v] of Object.entries(abc)) {\n    k  // Type is string\n    v  // Type is any\n  }\n}\n```", "```\n> Object.prototype.z = 3; // Please don't do this!\n> const obj = {x: 1, y: 2};\n> for (const k in obj) { console.log(k); }\nx\ny\nz\n```", "```\nfunction handleDrag(eDown: Event) {\n  const targetEl = eDown.currentTarget;\n  targetEl.classList.add('dragging');\n  const dragStart = [eDown.clientX, eDown.clientY];\n  const handleUp = (eUp: Event) => {\n    targetEl.classList.remove('dragging');\n    targetEl.removeEventListener('mouseup', handleUp);\n    const dragEnd = [eUp.clientX, eUp.clientY];\n    console.log('dx, dy = ', [0, 1].map(i => dragEnd[i] - dragStart[i]));\n  }\n  targetEl.addEventListener('mouseup', handleUp);\n}\nconst div = document.getElementById('surface');\ndiv.addEventListener('mousedown', handleDrag);\n```", "```\nfunction handleDrag(eDown: Event) {\n  const targetEl = eDown.currentTarget;\n  targetEl.classList.add('dragging');\n// ~~~~~~~           Object is possibly 'null'.\n//         ~~~~~~~~~ Property 'classList' does not exist on type 'EventTarget'\n  const dragStart = [\n     eDown.clientX, eDown.clientY];\n        // ~~~~~~~                Property 'clientX' does not exist on 'Event'\n        //                ~~~~~~~ Property 'clientY' does not exist on 'Event'\n  const handleUp = (eUp: Event) => {\n    targetEl.classList.remove('dragging');\n//  ~~~~~~~~           Object is possibly 'null'.\n//           ~~~~~~~~~ Property 'classList' does not exist on type 'EventTarget'\n    targetEl.removeEventListener('mouseup', handleUp);\n//  ~~~~~~~~ Object is possibly 'null'\n    const dragEnd = [\n       eUp.clientX, eUp.clientY];\n        // ~~~~~~~                Property 'clientX' does not exist on 'Event'\n        //              ~~~~~~~   Property 'clientY' does not exist on 'Event'\n    console.log('dx, dy = ', [0, 1].map(i => dragEnd[i] - dragStart[i]));\n  }\n  targetEl.addEventListener('mouseup', handleUp);\n// ~~~~~~~ Object is possibly 'null'\n}\n\n   const div = document.getElementById('surface');\n   div.addEventListener('mousedown', handleDrag);\n// ~~~ Object is possibly 'null'\n```", "```\n<p id=\"quote\">and <i>yet</i> it moves</p>\n```", "```\nconst p = document.getElementsByTagName('p')[0];\np instanceof HTMLParagraphElement\n// True\n```", "```\nfunction handleDrag(eDown: Event) {\n  const targetEl = eDown.currentTarget;\n  targetEl.classList.add('dragging');\n// ~~~~~~~           Object is possibly 'null'\n//         ~~~~~~~~~ Property 'classList' does not exist on type 'EventTarget'\n  // ...\n}\n```", "```\n<p>\n  And <i>yet</i> it moves\n  <!-- quote from Galileo -->\n</p>\n```", "```\n> p.children\nHTMLCollection [i]\n> p.childNodes\nNodeList(5) [text, i, text, comment, text]\n```", "```\ndocument.getElementsByTagName('p')[0];  // HTMLParagraphElement\ndocument.createElement('button');  // HTMLButtonElement\ndocument.querySelector('div');  // HTMLDivElement\n```", "```\ndocument.getElementById('my-div');  // HTMLElement\n```", "```\ndocument.getElementById('my-div') as HTMLDivElement;\n```", "```\nconst div = document.getElementById('my-div')!;\n```", "```\nfunction handleDrag(eDown: Event) {\n  // ...\n  const dragStart = [\n     eDown.clientX, eDown.clientY];\n        // ~~~~~~~                Property 'clientX' does not exist on 'Event'\n        //                ~~~~~~~ Property 'clientY' does not exist on 'Event'\n  // ...\n}\n```", "```\nfunction addDragHandler(el: HTMLElement) {\n  el.addEventListener('mousedown', eDown => {\n    const dragStart = [eDown.clientX, eDown.clientY];\n    const handleUp = (eUp: MouseEvent) => {\n      el.classList.remove('dragging');\n      el.removeEventListener('mouseup', handleUp);\n      const dragEnd = [eUp.clientX, eUp.clientY];\n      console.log('dx, dy = ', [0, 1].map(i => dragEnd[i] - dragStart[i]));\n    }\n    el.addEventListener('mouseup', handleUp);\n  });\n}\n\nconst div = document.getElementById('surface');\nif (div) {\n  addDragHandler(div);\n}\n```", "```\nclass Foo {\n  _private = 'secret123';\n}\n```", "```\nconst f = new Foo();\nf._private;  // 'secret123'\n```", "```\nclass Diary {\n  private secret = 'cheated on my English test';\n}\n\nconst diary = new Diary();\ndiary.secret\n   // ~~~~~~ Property 'secret' is private and only\n   //        accessible within class 'Diary'\n```", "```\nclass Diary {\n  constructor() {\n    this.secret = 'cheated on my English test';\n  }\n}\nconst diary = new Diary();\ndiary.secret;\n```", "```\nclass Diary {\n  private secret = 'cheated on my English test';\n}\n\nconst diary = new Diary();\n(diary as any).secret  // OK\n```", "```\ndeclare function hash(text: string): number;\n\nclass PasswordChecker {\n  checkPassword: (password: string) => boolean;\n  constructor(passwordHash: number) {\n    this.checkPassword = (password: string) => {\n      return hash(password) === passwordHash;\n    }\n  }\n}\n\nconst checker = new PasswordChecker(hash('s3cret'));\nchecker.checkPassword('s3cret');  // Returns true\n```", "```\nclass PasswordChecker {\n  #passwordHash: number;\n\n  constructor(passwordHash: number) {\n    this.#passwordHash = passwordHash;\n  }\n\n  checkPassword(password: string) {\n    return hash(password) === this.#passwordHash;\n  }\n}\n\nconst checker = new PasswordChecker(hash('s3cret'));\nchecker.checkPassword('secret');  // Returns false\nchecker.checkPassword('s3cret');  // Returns true\n```", "```\nfunction addCounter(el: HTMLElement) {\n  let clickCount = 0;\n  const button = document.createElement('button');\n  button.textContent = 'Click me';\n  button.addEventListener('click', () => {\n    clickCount++;\n    button.textContent = `Click me (${clickCount})`;\n  });\n  el.appendChild(button);\n}\n\naddCounter(document.body);\n```", "```\nfunction addCounter(el: HTMLElement) {\n  let clickCount = 0;\n  const triviaEl = document.createElement('p');\n  const button = document.createElement('button');\n  button.textContent = 'Click me';\n  button.addEventListener('click', async () => {\n    clickCount++;\n    const response = await fetch(`http://numbersapi.com/${clickCount}`);\n    const trivia = await response.text();\n    triviaEl.textContent = trivia;\n    button.textContent = `Click me (${clickCount})`;\n  });\n  el.appendChild(triviaEl);\n  el.appendChild(button);\n}\n```", "```\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true\n  }\n}\n```"]