- en: Chapter 9\. Linkerd Route-Based Policy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。Linkerd 基于路由的策略
- en: In [Chapter 8](ch08.html#LUAR_server_policy), we discussed implementing a Linkerd
    Server-based policy to enhance the security of the emojivoto application. This
    policy ensures that Linkerd effectively safeguards the application’s workload,
    preventing unauthorized workloads from making requests. Suppose we want to go
    further, though? For example, consider a situation where you have a sensitive
    application. You need to be certain that only specific ServiceAccounts are allowed
    to make changes, and only certain others have access to read.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 8 章](ch08.html#LUAR_server_policy) 中，我们讨论了实施基于 Linkerd 服务器的策略以增强 emojivoto
    应用程序的安全性。该策略确保 Linkerd 有效地保护应用程序的工作负载，防止未经授权的工作负载发出请求。然而，如果我们希望更进一步呢？例如，考虑一个敏感应用程序的情况。您需要确保只有特定的
    ServiceAccounts 被允许进行更改，并且只有特定的其他人员可以访问读取。
- en: That’s where Linkerd’s route-based policy mechanism comes in. In this chapter,
    we’ll take a closer look at what route-based policy can do and how to use it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Linkerd 路由策略机制的作用所在。在本章中，我们将更详细地探讨路由策略的功能和使用方法。
- en: Route-Based Policy Overview
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于路由的策略概述
- en: Route-based policy gives Linkerd a way to express policy that depends not only
    on which workloads are in play, but also on which specific requests are being
    made. These specific HTTP requests are identified by using Gateway API HTTPRoute
    resources to specify matches against the HTTP path, method, headers, etc.—almost
    anything except the body can be used. Requests are still authenticated using mTLS
    identities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 基于路由的策略为 Linkerd 提供了一种方式来表达策略，这不仅依赖于参与的工作负载，还依赖于正在进行的特定请求。这些特定的 HTTP 请求通过使用
    Gateway API HTTPRoute 资源来指定对 HTTP 路径、方法、头部等的匹配来识别。几乎可以使用任何内容，除了请求体。请求仍然使用 mTLS
    身份进行验证。
- en: Gateway API HTTPRoute resources work by associating one or more *parents* with
    one or more *rules*. When using Gateway API for ingress, the parents of an HTTPRoute
    will be Gateway resources; however, this doesn’t make much sense when using Gateway
    API to configure a service mesh. When using HTTPRoutes with Linkerd, the parents
    will be Services instead, and the HTTPRoute will only apply to traffic that is
    directed to the parent Service *and* that matches a rule specified by the HTTPRoute.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Gateway API HTTPRoute 资源的工作原理是将一个或多个*父资源*与一个或多个*规则*关联起来。当使用 Gateway API 进行入口控制时，HTTPRoute
    的父资源将是 Gateway 资源；然而，当使用 Gateway API 配置服务网格时，这样做并没有太多意义。在使用 Linkerd 时，将父资源指定为服务，HTTPRoute
    将仅适用于流量被定向到父 Service *并且* 符合 HTTPRoute 指定的规则。
- en: HTTPRoutes, Gateway API, and You
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTPRoutes、Gateway API 和你
- en: Linkerd 2.13 supports the HTTPRoute object, but it actually uses a copy in the
    `policy.linkerd.io/v1` API group, rather than the official `gateway.networking.k8s.io/v1beta1`
    HTTPRoute. This sidesteps issues around Gateway API conformance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 2.13 支持 HTTPRoute 对象，但实际上使用的是 `policy.linkerd.io/v1` API 组中的副本，而不是官方的
    `gateway.networking.k8s.io/v1beta1` HTTPRoute。这样可以避开与 Gateway API 一致性相关的问题。
- en: When Linkerd 2.13 shipped, it wasn’t possible for a service mesh to be conformant
    to the Gateway API standard. By Linkerd 2.14, Gateway API had defined the `Mesh`
    *conformance profile*, which specifies what it means for a service mesh to be
    conformant with Gateway API. Linkerd 2.14 and higher are conformant with the `Mesh`
    profile and support the `gateway.networking.k8s.io/v1beta1` HTTPRoute (as well
    as the older copy that Linkerd 2.13 supported). The end result is that some tools
    that rely on the HTTPRoute object aren’t fully compatible with Linkerd 2.13, but
    they’re happier with Linkerd 2.14 and higher.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linkerd 2.13 发布时，服务网格无法符合 Gateway API 标准。到了 Linkerd 2.14，Gateway API 定义了 `Mesh`
    *一致性配置文件*，指定了服务网格符合 Gateway API 的含义。Linkerd 2.14 及更高版本符合 `Mesh` 配置文件，并支持 `gateway.networking.k8s.io/v1beta1`
    HTTPRoute（以及 Linkerd 2.13 支持的旧副本）。最终结果是一些依赖于 HTTPRoute 对象的工具与 Linkerd 2.13 不完全兼容，但与
    Linkerd 2.14 及更高版本兼容性更好。
- en: (If you want to know more about all of this stuff, check out the [Gateway API
    introduction](https://oreil.ly/n0mtd) and read about Gateway API and the GAMMA
    initiative.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您想了解更多相关内容，请查看 [Gateway API 介绍](https://oreil.ly/n0mtd) 并阅读关于 Gateway API
    和 GAMMA 计划的信息。）
- en: Route-based policy is the most detailed and granular level of policy in Linkerd,
    and using it requires a significant amount of planning and a significant amount
    of YAML. When you’re ready to secure your environments to this degree, you need
    to be aware of the cost in terms of engineering time and effort. We also *strongly*
    recommend that when building any kind of policy you use multiple environments—at
    least one for building and testing policy, and another for enforcing it. Ideally,
    you’ll integrate policy creation, auditing, and promotion into your standard application
    development lifecycle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基于路由的策略是Linkerd中最详细和最精细的策略级别，使用它需要大量规划和大量的YAML。当您准备以这种程度保护您的环境时，您需要意识到在工程时间和精力方面的成本。我们还
    *强烈* 建议，在构建任何类型的策略时使用多个环境——至少一个用于构建和测试策略，另一个用于执行策略。理想情况下，您将把策略的创建、审计和推广整合到您的标准应用程序开发生命周期中。
- en: The booksapp Sample Application
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: booksapp示例应用程序
- en: We’ll be using the [booksapp sample application](https://oreil.ly/qf8il) to
    show how you can use route-based policy to restrict calls based not just on the
    workload, but also on the specific endpoints being accessed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 [booksapp示例应用程序](https://oreil.ly/qf8il) 来展示如何使用基于路由的策略来限制调用，不仅基于工作负载，还基于特定的端点访问。
- en: As shown in [Figure 9-1](#books-app-connections), the app is very similar to
    emojivoto.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 9-1](#books-app-connections) 所示，该应用程序与emojivoto非常相似。
- en: '![luar 0901](assets/luar_0901.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0901](assets/luar_0901.png)'
- en: Figure 9-1\. booksapp interapplication connections
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. booksapp应用程序间连接
- en: In booksapp, two of our backing services (`books` and `authors`) need to talk
    to each other—but they shouldn’t all have unrestricted access to each other. For
    example, the `authors` workload should have access to read from the `books` workload,
    so that it can show the books each author has written. The UI for `authors` also
    allows you to add a new book for the author you’re looking at, so `authors` needs
    to be able to POST new books to `books`. However, it mustn’t be able to modify
    or delete books.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在booksapp中，我们的两个后端服务（`books` 和 `authors`）需要互相通信，但它们不应该有无限制的访问权限。例如，`authors`
    工作负载应该能够从 `books` 工作负载读取，以便显示每个作者写过的书籍。`authors` 的用户界面还允许您为当前查看的作者添加新书籍，因此 `authors`
    需要能够向 `books` POST 新书籍。但它不能修改或删除书籍。
- en: 'Ultimately, we want to allow only the following requests, and no others:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们希望只允许以下请求，不允许其他请求：
- en: 'Infrastructure:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '基础设施:'
- en: The `kubelet` needs to be able to run health checks for all our workloads.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet` 需要能够运行所有工作负载的健康检查。'
- en: Linkerd Viz needs to be able to scrape metrics from all workloads.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linkerd Viz 需要能够从所有工作负载中提取指标。
- en: 'Core application functionality:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心应用功能：
- en: '`webapp` needs to be able to read, create, delete, and update both `authors`
    and `books`.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webapp` 需要能够读取、创建、删除和更新 `authors` 和 `books`。'
- en: '`authors` needs to be able to read and create `books`.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authors` 需要能够读取和创建 `books`。'
- en: '`books` needs to be able to read and create `authors`.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`books` 需要能够读取和创建 `authors`。'
- en: 'Traffic generator:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量生成器：
- en: '`traffic` needs to have full access to `webapp`.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`traffic` 需要完全访问 `webapp`。'
- en: This can be seen in [Figure 9-2](#books-policy-overview).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在 [图 9-2](#books-policy-overview) 中看到。
- en: '![luar 0902](assets/luar_0902.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0902](assets/luar_0902.png)'
- en: Figure 9-2\. booksapp application policy overview
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-2\. booksapp应用程序策略概述
- en: Installing booksapp
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装booksapp
- en: The setup is fairly simple. We’ll pull down the latest version of the booksapp
    application, add the Linkerd proxy, and apply it to our cluster, as shown in [Example 9-1](#EX11-setup).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设置非常简单。我们将拉取最新版本的booksapp应用程序，添加Linkerd代理，并将其应用到我们的集群中，如示例 [9-1](#EX11-setup)
    所示。
- en: Example 9-1\. Setup
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-1\. 设置
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Configuring booksapp Policy
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置booksapp策略
- en: 'At this point, booksapp is running with no restrictions: everything can access
    everything else. This is often the simplest place to start when working with policy;
    once you know that the application is working, you can start tightening things
    up.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，booksapp没有任何限制：所有内容可以互相访问。这通常是开始使用策略时最简单的地方；一旦确认应用程序运行正常，就可以开始加强安全性。
- en: 'We’ll work through our booksapp policy in steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步处理我们的booksapp策略：
- en: At the start, we’ll work on the low-level infrastructure, switching to default
    deny and allowing Linkerd Viz to still work. We’ll use Server-based policy for
    this; it doesn’t require the granularity of route-based policy, so we’ll avoid
    the complexity.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始阶段，我们将处理低级基础设施，切换到默认拒绝并仍然允许Linkerd Viz工作。我们将使用基于服务器的策略；它不需要路由策略的精细度，因此我们将避免复杂性。
- en: We’ll next configure minimal route-based policy to allow read-only access to
    the application.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们将配置最小的基于路由的策略，以允许对应用程序进行只读访问。
- en: We’ll then allow writes to the `authors` workload, then the `books` workload.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将允许对`authors`工作负载和`books`工作负载进行写入。
- en: Finally, we’ll allow access from the traffic generator to the `webapp`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将允许流量生成器访问`webapp`。
- en: The advantage of doing things in this order is that it should quickly make it
    possible to see at least part of the application working, and we can do incremental
    testing. This is usually a very good idea when doing complex configuration, and
    (as we’ve said before) route-based policy is very complex.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 按此顺序操作的好处是，它应该能够快速使至少部分应用程序运行，并且我们可以进行增量测试。在进行复杂配置时，这通常是一个很好的想法，并且（正如我们之前所说）基于路由的策略非常复杂。
- en: Infrastructure Policy
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施策略
- en: The first step is infrastructure policy. We’ll switch the `booksapp` namespace
    to default deny using a Server-based policy. In turn, this will require us to
    explicitly permit Linkerd Viz to keep working. All of this is shown in [Example 9-2](#EX-infra-policy).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是基础设施策略。我们将使用基于服务器的策略将`booksapp`命名空间切换为默认拒绝。这将要求我们显式允许 Linkerd Viz 继续工作。所有这些都在[示例 9-2](#EX-infra-policy)中显示。
- en: Example 9-2\. books-infra-policy.yaml
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-2\. books-infra-policy.yaml
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is similar to what we did in [Chapter 8](ch08.html#LUAR_server_policy)
    to allow Linkerd Viz. Let’s go ahead and apply the infrastructure policy YAML,
    then switch the `booksapp` namespace to default deny, as shown in [Example 9-3](#EX-apply-infra-policy).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于我们在[第 8 章](ch08.html#LUAR_server_policy)中允许 Linkerd Viz 所做的操作。让我们继续应用基础设施策略
    YAML，然后将`booksapp`命名空间切换为默认拒绝，如[示例 9-3](#EX-apply-infra-policy)中所示。
- en: Example 9-3\. Setting up infrastructure policy
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-3\. 设置基础设施策略
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What About Health Checks?
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 健康检查呢？
- en: The astute observer will notice that while our Pods have readiness and liveness
    probes configured, they’re still starting and staying ready even though we haven’t
    carved out any explicit authorizations for the `kubelet` to probe our Pods. That’s
    because Linkerd will, by default, look for liveness and readiness probes for your
    applications and create a default HTTPRoute that will allow that traffic—but it
    will only do this *as long as you haven’t created HTTPRoutes yourself*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的观察者将注意到，尽管我们的 Pod 配置了就绪和活动探测，它们仍在启动并保持就绪，即使我们还没有为`kubelet`授权探测我们的 Pod。这是因为
    Linkerd 默认会寻找您的应用程序的活动状态和就绪探测，并创建一个默认的 HTTPRoute 来允许该流量，但只要您没有自己创建 HTTPRoutes。
- en: As soon as you begin creating your own HTTPRoutes for your application, Linkerd
    will delete its default routes, which means that you’ll need to ensure that you
    create routes for your liveness and readiness probes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开始为您的应用程序创建自己的 HTTPRoutes，Linkerd 将删除其默认路由，这意味着您需要确保为活动状态和就绪探测创建路由。
- en: At this point, with the `booksapp` namespace switched to default deny and only
    Viz authorized, our application won’t work at all. Let’s continue with getting
    our app running.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，由于将`booksapp`命名空间切换为默认拒绝，并且仅授权了 Viz，我们的应用程序将完全无法工作。让我们继续使我们的应用程序运行起来。
- en: Read-Only Access
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只读访问
- en: The next thing we’ll do is use route-based policy to allow read-only access
    to the application. We’ll be able to use a web browser to look up books and authors,
    but we won’t be able to change anything.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将使用基于路由的策略来允许对应用程序进行只读访问。我们可以使用 Web 浏览器查找书籍和作者，但无法更改任何内容。
- en: Everything we’re doing from this point forward is just applying YAML, so we’ll
    just show the YAML that you need to apply. We’ll do this from the inside out,
    so our first step is to permit the `books` workload to fetch `/authors.json` and
    `/authors/` from the `authors` workload. This requires four resources.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们所做的一切只是应用 YAML，因此我们将展示您需要应用的 YAML。我们将从内部向外做这些事情，所以我们的第一步是允许`books`工作负载从`authors`工作负载获取`/authors.json`和`/authors/`，这需要四个资源。
- en: First up, we need to define a Server for the `authors` workload in the `books`
    namespace, as shown in [Example 9-4](#EX-route-authors-server). This will allow
    us to use an HTTPRoute to configure policy for specific requests being made to
    the `authors` workload.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`books`命名空间中为`authors`工作负载定义一个服务器，如[示例 9-4](#EX-route-authors-server)所示。这将允许我们使用
    HTTPRoute 来配置对发送到`authors`工作负载的特定请求的策略。
- en: Example 9-4\. `authors` Server
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-4\. `authors` 服务器
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we’ll create an HTTPRoute specifying the two requests that we want to
    allow, as shown in [Example 9-5](#EX-route-authors-httproute).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 HTTPRoute，指定我们想要允许的两个请求，如 [9-5](#EX-route-authors-httproute) 所示。
- en: Example 9-5\. `authors` HTTPRoute
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-5\. `authors` HTTPRoute
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Which HTTPRoute?
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哪个 HTTPRoute？
- en: We’ve used `policy.linkerd.io` HTTPRoutes to accommodate readers with older
    versions of Linkerd. If you’re using Linkerd 2.14 or newer, though, feel free
    to switch to `gateway.network⁠ing.k8s.io/v1beta1` HTTPRoutes!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了 `policy.linkerd.io` HTTPRoutes 来适应使用较旧版本 Linkerd 的读者。但是，如果您使用的是 Linkerd
    2.14 或更新版本，可以切换到 `gateway.network⁠ing.k8s.io/v1beta1` HTTPRoutes！
- en: Finally, we can specify an AuthorizationPolicy/MeshTLSAuthentication pair, where
    the `targetRef` of the AuthorizationPolicy is the HTTPRoute we just defined, to
    define which identities are allowed to use this HTTPRoute, as shown in [Example 9-6](#EX-route-authors-auth).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以指定一个 AuthorizationPolicy/MeshTLSAuthentication 对，其中 AuthorizationPolicy
    的 `targetRef` 是我们刚刚定义的 HTTPRoute，以定义哪些身份可以使用这个 HTTPRoute，如 [9-6](#EX-route-authors-auth)
    所示。
- en: Example 9-6\. `authors` AuthorizationPolicy and MeshTLSAuthentication
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-6\. `authors` AuthorizationPolicy 和 MeshTLSAuthentication
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once these resources are applied, the `books` workload will be able to talk
    to the `authors` workload. However, we’ve just broken health checks for the `authors`
    workload, as we noted earlier. As soon as we attached our HTTPRoute to the `authors`
    Server, the probe routes generated by Linkerd went away.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用了这些资源，`books` 工作负载将能够与 `authors` 工作负载通信。然而，正如我们之前指出的那样，我们刚刚破坏了 `authors`
    工作负载的健康检查。当我们将我们的 HTTPRoute 附加到 `authors` 服务器后，Linkerd 生成的探针路由就消失了。
- en: To allow those probe requests, we’ll use a separate HTTPRoute, which will allow
    us to use a NetworkAuthorization to permit unauthenticated probe requests from
    anywhere in our cluster. We definitely don’t want to permit any other requests
    to use that NetworkAuthorization, so we really do need a separate HTTPRoute for
    the probes! This is shown in [Example 9-7](#EX-route-authors-probes).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许这些探针请求，我们将使用一个单独的 HTTPRoute，这将允许我们使用 NetworkAuthorization 允许来自集群任何地方的未认证探针请求。我们绝对不希望允许任何其他请求使用该
    NetworkAuthorization，所以我们确实需要一个单独的 HTTPRoute 用于探针！如 [9-7](#EX-route-authors-probes)
    所示。
- en: Example 9-7\. Re-permitting `authors` health probes
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-7\. 重新允许 `authors` 健康探针
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What’s in a CIDR?
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CIDR 是什么？
- en: The `probe-authn` NetworkAuthorization is unnecessarily broad; it should really
    be limited just to the Pod CIDR range for your cluster. We can’t predict that,
    so you should feel free to replace the CIDR ranges in the `probe-authn` NetworkAuthentication
    resource with the appropriate values for your cluster.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`probe-authn` NetworkAuthorization 的范围过于广泛；它真的应该仅限于您集群的 Pod CIDR 范围。我们无法预测这一点，所以您可以随意将
    `probe-authn` NetworkAuthentication 资源中的 CIDR 范围替换为您集群的适当值。'
- en: At this point, the `books` workload should be able to read from the `authors`
    workload, and probes to the `authors` workload should work as well. Now we need
    to repeat all of this to permit the `authors` workload to talk to `books`, as
    shown in [Example 9-8](#EX-route-books-from-authors).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`books` 工作负载应能够从 `authors` 工作负载读取，并且对 `authors` 工作负载的探针也应该工作正常。现在我们需要重复这一切，以允许
    `authors` 工作负载与 `books` 通信，如示例 [9-8](#EX-route-books-from-authors) 所示。
- en: Example 9-8\. Allowing `authors` to read from `books`
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-8\. 允许 `authors` 从 `books` 读取
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, we need to permit `webapp` to talk to both `authors` and `books`. We
    can use our existing HTTPRoutes here, and we don’t need another Server. All we
    need to do is add new AuthorizationPolicy and MeshTLSAuthentication resources,
    as shown in [Example 9-9](#EX-route-allow-webapp).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要允许 `webapp` 与 `authors` 和 `books` 进行通信。我们可以在这里使用我们现有的 HTTPRoutes，而且我们不需要另一个服务器。我们需要做的只是添加新的
    AuthorizationPolicy 和 MeshTLSAuthentication 资源，如 [9-9](#EX-route-allow-webapp)
    所示。
- en: What’s in an Identity?
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份包含什么？
- en: We could also do this by adding another identity to our existing `authors` and
    `books` MeshTLSAuthentications. However, the fine granularity available with route-based
    policy is a major point in its favor, and using a separate AuthorizationPolicy
    and MeshTLSAu⁠thentication helps preserve that.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过向现有的 `authors` 和 `books` MeshTLSAuthentications 添加另一个身份来实现这一点。但是，基于路由的策略提供的细粒度是其优势的一个主要点，使用单独的
    AuthorizationPolicy 和 MeshTLSAu⁠thentication 有助于保持这种优势。
- en: Example 9-9\. Permitting web access
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-9\. 允许 Web 访问
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point, we should be able to use a web browser to view the booksapp GUI,
    and we should be able to read everything, but modify nothing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该能够使用 Web 浏览器查看 booksapp GUI，并且应该能够阅读一切，但不能修改任何内容。
- en: Enabling Write Access
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用写访问
- en: The booksapp application is supposed to allow updating both books and authors,
    so our next task will be to allow writes to the `authors` workload. Once this
    is done, we’ll be able to make changes to our authors (including updates, additions,
    and deletions), but we still won’t be able to change any books.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The way booksapp is built, both `webapp` and `books` need to be able to write
    to `authors`. We’ll start by creating an HTTPRoute, shown in [Example 9-10](#EX-author-modify-route),
    that describes the kinds of modification requests we want to allow.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-10\. Modification requests to `authors`
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This HTTPRoute is attached to our existing `authors` Server, because it describes
    requests being made to the `authors` workload. Given that HTTPRoute, we want to
    allow both `books` and `webapp` to make those requests, as shown in [Example 9-11](#EX-author-modify-policy).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-11\. Permitting modifications
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here we’re using the technique of listing multiple identities in the same MeshTLSAu⁠thentication,
    since `webapp` and `books` need *exactly* the same permissions in this example.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: After all of this is done, we have the policy setup shown in [Figure 9-3](#books-author-policies).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0903](assets/luar_0903.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3\. `books` after setting up policy for `authors`
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Allowing Writes to books
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll finish up our booksapp functionality by allowing writes to the `books`
    workload, as shown in [Example 9-12](#EX-books-modify-policy). This is exactly
    parallel to allowing writes to `authors` and will finally permit booksapp to fully
    function.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-12\. Modification requests to `books`
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Reenabling the Traffic Generator
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we’ll add permission for the `traffic` workload, which generates some
    load at all times, to access the `webapp` workload. The booksapp application doesn’t
    actually need the traffic generator, but it’s very useful for debugging and demos!
    So let’s get it running again.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start with a Server for `webapp` (which we haven’t needed before), so
    that we can write policies allowing requests to it. This is shown in [Example 9-13](#EX-route-webapp-server).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-13\. A Server for `webapp`
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Given this Server, it’s straightforward to permit `traffic` to access it. We’ll
    take the lazy way out and write a Server-based policy here, as shown in [Example 9-14](#EX-route-traffic-policy),
    since we really do want `traffic` to be able to do basically everything.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-14\. Permitting the traffic generator
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linkerd’s route-based policy mechanism is the most complex part of Linkerd,
    enough so that there are actually a number of powerful tools, both open source
    and commercial, for creating and debugging policies in Linkerd. The Tap component
    of Linkerd Viz is the simplest, most readily available tool here; likewise, the
    `linkerd diagnostics` command that we discussed in [Chapter 6](ch06.html#LUAR_cli)
    has a lot to offer. On the commercial side, we would be remiss if we didn’t mention
    the policy tools available in Buoyant Enterprise for Linkerd.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的基于路由的策略机制是 Linkerd 中最复杂的部分，因此实际上有许多强大的工具，无论是开源还是商业，都可以用来创建和调试 Linkerd
    中的策略。Linkerd Viz 的 Tap 组件在这里是最简单、最常用的工具；同样，我们在 [第6章](ch06.html#LUAR_cli) 中讨论过的
    `linkerd diagnostics` 命令也有很多优点。在商业领域，如果不提及 Buoyant Enterprise 为 Linkerd 提供的策略工具，我们就不全面了。
- en: Overall, policy in Linkerd is a powerful and extensible tool for managing traffic
    in your cluster, and route-based policy in particular is at once a very powerful
    mechanism and a very focused tool. It’s a great way to further refine policy that
    you’ve already established with the Server-based mechanism.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，在 Linkerd 中，策略是管理集群中流量的一种强大且可扩展的工具，特别是基于路由的策略不仅是一个非常强大的机制，而且是一个非常专注的工具。这是进一步优化使用服务器端机制建立的策略的绝佳方式。
