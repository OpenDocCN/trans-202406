["```\nconst { ApolloServer, gql } = require('apollo-server-express');\n```", "```\n// Construct a schema, using GraphQL schema language\nconst typeDefs = gql`\n type Query {\n hello: String\n }\n`;\n```", "```\n// Provide resolver functions for our schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  }\n};\n```", "```\n// Apollo Server setup\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// Apply the Apollo GraphQL middleware and set the path to /api\nserver.applyMiddleware({ app, path: '/api' });\n\napp.listen({ port }, () =>\n  console.log(\n    `GraphQL Server running at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```", "```\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\n// Run the server on a port specified in our .env file or port 4000\nconst port = process.env.PORT || 4000;\n\n// Construct a schema, using GraphQL's schema language\nconst typeDefs = gql`\n type Query {\n hello: String\n }\n`;\n\n// Provide resolver functions for our schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  }\n};\n\nconst app = express();\n\n// Apollo Server setup\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// Apply the Apollo GraphQL middleware and set the path to /api\nserver.applyMiddleware({ app, path: '/api' });\n\napp.listen({ port }, () =>\n  console.log(\n    `GraphQL Server running at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```", "```\nquery {\n  hello\n}\n```", "```\n{\n  \"data\": {\n    \"hello\": \"Hello world!\"\n  }\n}\n```", "```\ntype Pizza {\n}\n```", "```\ntype Pizza {\n  id: ID\n  size: String\n  slices: Int\n  toppings: [String]\n}\n```", "```\ntype Pizza {\n  id: ID!\n  size: String!\n  slices: Int!\n  toppings: [String]\n}\n```", "```\nlet notes = [\n  { id: '1', content: 'This is a note', author: 'Adam Scott' },\n  { id: '2', content: 'This is another note', author: 'Harlow Everly' },\n  { id: '3', content: 'Oh hey look, another note!', author: 'Riley Harrison' }\n];\n```", "```\ntype Note {\n  id: ID!\n  content: String!\n  author: String!\n}\n```", "```\ntype Query {\n  hello: String!\n  notes: [Note!]!\n}\n```", "```\nQuery: {\n    hello: () => 'Hello world!',\n    notes: () => notes\n  },\n```", "```\nquery {\n  notes {\n    id\n    content\n    author\n  }\n}\n```", "```\ntype Query {\n  hello: String\n  notes: [Note!]!\n  note(id: ID!): Note!\n}\n```", "```\nnote: (parent, args) => {\n  return notes.find(note => note.id === args.id);\n}\n```", "```\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n    notes: () => notes,\n    note: (parent, args) => {\n      return notes.find(note => note.id === args.id);\n    }\n  }\n};\n```", "```\nquery {\n  note(id: \"1\") {\n    id\n    content\n    author\n  }\n}\n```", "```\ntype Mutation {\n  newNote(content: String!): Note!\n}\n```", "```\nMutation: {\n  newNote: (parent, args) => {\n    let noteValue = {\n      id: String(notes.length + 1),\n      content: args.content,\n      author: 'Adam Scott'\n    };\n    notes.push(noteValue);\n    return noteValue;\n  }\n}\n```", "```\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\n// Run our server on a port specified in our .env file or port 4000\nconst port = process.env.PORT || 4000;\n\nlet notes = [\n  { id: '1', content: 'This is a note', author: 'Adam Scott' },\n  { id: '2', content: 'This is another note', author: 'Harlow Everly' },\n  { id: '3', content: 'Oh hey look, another note!', author: 'Riley Harrison' }\n];\n\n// Construct a schema, using GraphQL's schema language\nconst typeDefs = gql`\n type Note {\n id: ID!\n content: String!\n author: String!\n }\n\n type Query {\n hello: String\n notes: [Note!]!\n note(id: ID!): Note!\n }\n\n type Mutation {\n newNote(content: String!): Note!\n }\n`;\n\n// Provide resolver functions for our schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n    notes: () => notes,\n    note: (parent, args) => {\n      return notes.find(note => note.id === args.id);\n    }\n  },\n  Mutation: {\n    newNote: (parent, args) => {\n      let noteValue = {\n        id: String(notes.length + 1),\n        content: args.content,\n        author: 'Adam Scott'\n      };\n      notes.push(noteValue);\n      return noteValue;\n    }\n  }\n};\n\nconst app = express();\n\n// Apollo Server setup\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// Apply the Apollo GraphQL middleware and set the path to /api\nserver.applyMiddleware({ app, path: '/api' });\n\napp.listen({ port }, () =>\n  console.log(\n    `GraphQL Server running at http://localhost:${port}${server.graphqlPath}`\n  )\n);\n```", "```\nmutation {\n  newNote (content: \"This is a mutant note!\") {\n   content\n   id\n   author\n  }\n}\n```", "```\nquery {\n  notes {\n    content\n    id\n    author\n  }\n}\n```"]