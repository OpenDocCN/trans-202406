- en: Chapter 1\. Security and Observability Strategy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 安全性和可观察性策略
- en: In this chapter, we will cover a high-level overview of how you can build a
    security and observability strategy for your Kubernetes implementation. Subsequent
    chapters will cover each of these concepts in more detail. You need to think about
    a security strategy when you are in the pilot/pre-production phase of your Kubernetes
    journey, so if you are part of the security team, this chapter is very important.
    If you are part of the network, platform, or application team, this chapter shows
    how you can be a part of the security strategy and discuss the importance of collaboration
    between the security, platform, and application teams.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述您如何为Kubernetes实施构建安全性和可观察性策略。后续章节将更详细地涵盖这些概念。在您的Kubernetes之旅的试点/预生产阶段，您需要考虑安全策略，因此如果您是安全团队的一部分，本章非常重要。如果您是网络、平台或应用团队的一部分，本章展示了您如何成为安全策略的一部分，并讨论了安全、平台和应用团队之间合作的重要性。
- en: 'We will cover the following concepts that will guide you with your security
    and observability strategy:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下概念，指导您制定安全性和可观察性策略：
- en: How securing Kubernetes is different from traditional security methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何保护Kubernetes与传统安全方法有所不同
- en: The life cycle of deploying applications (workloads) in a Kubernetes cluster
    and best practices for each stage
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes集群中部署应用程序（工作负载）的生命周期以及每个阶段的最佳实践
- en: How you should implement observability to help with security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该如何实施可观察性以帮助安全。
- en: Well-known security frameworks and how to use them in your security strategy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知名的安全框架以及如何在安全策略中使用它们
- en: 'Security for Kubernetes: A New and Different World'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes的安全性：一个新的不同世界
- en: In this section we’ll highlight how Kubernetes is different and why traditional
    security methods do not work in a Kubernetes implementation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将强调Kubernetes的不同之处以及为什么传统的安全方法在Kubernetes实施中不起作用。
- en: 'As workloads move to the cloud, Kubernetes is the most common orchestrator
    for managing them. The reason Kubernetes is popular is its declarative nature:
    It abstracts infrastructure details and allows users to specify the workloads
    they want to run and the desired outcomes. The application team does not need
    to worry about how workloads are deployed, where workloads are run, or other details
    like networking; they just need to set up configurations in Kubernetes to deploy
    their applications.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着工作负载转移到云端，Kubernetes是最常见的编排器来管理它们。Kubernetes受欢迎的原因在于其声明性特质：它抽象了基础设施细节，并允许用户指定他们想要运行的工作负载和期望的结果。应用团队不需要担心工作负载如何部署，工作负载在哪里运行，或者像网络这样的其他细节；他们只需要在Kubernetes中设置配置来部署他们的应用。
- en: Kubernetes achieves this abstraction by managing workload creation, shutdown,
    and restart. In a typical implementation, a workload can be scheduled on any available
    resource in a network (physical host or virtual machine) based on the workload’s
    requirements. A group of resources that a workload runs on is known as a *Kubernetes
    cluster*. Kubernetes monitors the status of workloads (which are deployed as pods
    in Kubernetes) and takes corrective action as needed (e.g., restarting unresponsive
    nodes). It also manages all networking necessary for pods and hosts to communicate
    with each other. You have the option to decide on the networking technology by
    selecting from a set of supported network plug-ins. While there are some configuration
    options for the network plug-in, you will not be able to directly control networking
    behavior (either for IP address assignment or in typical configurations where
    the node is scheduled).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通过管理工作负载的创建、关闭和重启来实现这种抽象。在典型的实现中，根据工作负载的要求，工作负载可以安排在网络中的任何可用资源（物理主机或虚拟机）上。工作负载运行的一组资源被称为*Kubernetes集群*。Kubernetes监视工作负载的状态（在Kubernetes中部署为pod）并根据需要采取纠正措施（例如，重新启动无响应的节点）。它还管理所有必要的网络以便pod和主机之间进行通信。您可以通过从一组支持的网络插件中进行选择来决定网络技术。虽然有一些网络插件的配置选项，但您将无法直接控制网络行为（无论是用于IP地址分配还是在典型配置中节点被调度的情况）。
- en: Kubernetes is a different world for security teams. Their traditional method
    would be to build a “network of machines” and then onboard workloads (applications).
    As a part of onboarding, the process was to assign IPs, update networking as needed,
    and define and implement network access control rules. After these steps, the
    application was ready for users. This process ensured that security teams had
    a lot of control and could onboard and secure applications with ease. The applications
    were easy to secure, as applications were static in terms of assigned IPs, where
    they were deployed, etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安全团队来说，Kubernetes 是一个全新的世界。他们传统的方法是构建一个“机器网络”，然后启用工作负载（应用程序）。在启用的过程中，需要分配
    IP、根据需要更新网络设置，并定义和实施网络访问控制规则。完成这些步骤后，应用程序就可以供用户使用了。这个过程确保安全团队有很大的控制权，并且可以轻松地启用和保护应用程序。由于应用程序的
    IP 分配、部署位置等方面都是静态的，因此应用程序也更容易保护。
- en: In the Kubernetes world, workloads are built as container images and are deployed
    in a Kubernetes cluster using a configuration file (yaml). This is typically integrated
    in the development process, and most development teams use continuous integration
    (CI) and continuous delivery (CD) to ensure speedy and reliable delivery of software.
    What this means is that the security team has limited visibility into the impact
    of each application change on the security of the cluster. Adding a security-review
    step to this process is counterproductive, as the only logical place to add that
    is when the code is being committed. The development process after that point
    is automated, and disrupting it would conflict with the CI/CD model. So how can
    you secure workloads in this environment?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 环境中，工作负载作为容器镜像构建，并使用配置文件（yaml）在 Kubernetes 集群中部署。这通常集成在开发过程中，大多数开发团队使用持续集成（CI）和持续交付（CD）来确保软件的快速可靠交付。这意味着安全团队对每个应用程序变更对集群安全的影响具有有限的可见性。在此过程中添加安全审查步骤是不可取的，因为唯一合理的地方是在提交代码时进行。此后的开发过程是自动化的，打断它会与
    CI/CD 模型冲突。那么在这种环境下如何保护工作负载呢？
- en: In order to understand how to secure workloads in Kubernetes, it is important
    to understand the various stages that are part of deploying a workload.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何在 Kubernetes 中保护工作负载，了解部署工作负载的各个阶段是非常重要的。
- en: 'Deploying a Workload in Kubernetes: Security at Each Stage'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中部署工作负载：每个阶段的安全性
- en: 'In the previous section, we described the challenge of securing applications
    that are deployed using the CI/CD pipeline. This section describes the life cycle
    of workload deployment in a Kubernetes cluster and explains how to secure each
    stage. The three stages of workload deployment are the build, deploy, and runtime
    stages. Unlike traditional client-server applications where an application existed
    on a server (or a cluster of servers), applications in a Kubernetes deployment
    are distributed, and the Kubernetes cluster network is used by applications as
    a part of normal operation. Here are a few things to consider because of this
    configuration:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们描述了使用 CI/CD 管道部署应用程序时面临的安全挑战。本节描述了 Kubernetes 集群中工作负载部署的生命周期，并解释了如何保护每个阶段。工作负载部署的三个阶段是构建、部署和运行时阶段。与传统的客户端-服务器应用程序不同，在
    Kubernetes 部署中，应用程序是分布式的，并且 Kubernetes 集群网络作为正常操作的一部分被应用程序使用。由于这种配置，需要考虑以下几点：
- en: You need to consider security best practices as workloads and infrastructure
    are built. This is important due to the fact that applications in Kubernetes are
    deployed using the CI/CD pipeline.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建工作负载和基础设施时，需要考虑安全最佳实践。这一点非常重要，因为 Kubernetes 中的应用程序是通过 CI/CD 管道部署的。
- en: You need to consider security best practices when a Kubernetes cluster is deployed
    and applications are onboarded.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署 Kubernetes 集群和应用程序时，需要考虑安全最佳实践。
- en: Finally, applications use the infrastructure and the Kubernetes cluster network
    for normal operation, and you need to consider security best practices for application
    runtime.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，应用程序使用基础设施和 Kubernetes 集群网络进行正常操作，需要考虑应用程序运行时的安全最佳实践。
- en: '[Figure 1-1](#workload_deployment_stages_and_security) illustrates the various
    stages and aspects to consider when securing workloads in a Kubernetes environment.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1](#workload_deployment_stages_and_security) 描述了在 Kubernetes 环境中保护工作负载时需要考虑的各个阶段和方面。'
- en: '![](Images/ksao_0101.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_0101.png)'
- en: Figure 1-1\. Workload deployment stages and security at each stage
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 工作负载部署阶段及每个阶段的安全性
- en: 'The boxes below each stage describe various aspects of security that you need
    to consider for that stage:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段下方的框描述了您需要考虑该阶段的各个安全方面：
- en: The build stage is where you create (build) software for your workload (application)
    and build the infrastructure components (host or virtual machines) to host applications.
    This stage is part of the development cycle, and in most cases the development
    team is responsible for it. In this stage you consider security for the CI/CD
    pipeline, implement security for image repositories, scan images for vulnerabilities,
    and harden the host operating system. You need to ensure that you implement best
    practices to secure the image registry and avoid compromising the images in the
    image registry. This is generally implemented by securing access to the image
    registry, though a lot of users have private registries and do not allow images
    from public registries. Finally, you need to consider best practices for secrets
    management; secrets are like passwords that allow access to resources in your
    cluster. We will cover these topics in detail in [Chapter 3](ch03.xhtml#workload_deployment_controls).
    We recommend that when you consider security for this stage, you should collaborate
    with the security team so that security at this stage is aligned with your overall
    security strategy.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建阶段是您为工作负载（应用程序）创建（构建）软件并构建基础设施组件（主机或虚拟机）以托管应用程序的阶段。此阶段是开发周期的一部分，在大多数情况下由开发团队负责。在此阶段，您需要考虑CI/CD管道的安全性，实施镜像库的安全性，扫描镜像中的漏洞，并加固主机操作系统。您需要确保实施最佳实践以保护镜像注册表，并避免影响镜像注册表中的镜像。通常通过保护对镜像注册表的访问来实现这一点，尽管许多用户拥有私有注册表，并且不允许来自公共注册表的镜像。最后，您需要考虑密钥管理的最佳实践；密钥类似于密码，允许访问集群中的资源。我们将在[第三章](ch03.xhtml#workload_deployment_controls)中详细讨论这些主题。我们建议，在考虑此阶段的安全性时，您应与安全团队合作，以使此阶段的安全性与您的整体安全策略保持一致。
- en: The next stage, deploy, is where you set up the platform that runs your Kubernetes
    deployment and deploy workloads. In this stage you need to think about the security
    best practices for configuring your Kubernetes cluster and providing external
    access to applications running inside your Kubernetes cluster. You also need to
    consider security controls like policies to limit access to workloads (pod security
    policies), network policies to control applications’ access to the platform components,
    and role-based access control (RBAC) for access to resources (for example, service
    creation, namespace creation, and adding/changing labels to pods). In most enterprises
    the platform team is responsible for this stage. As a member of the platform team,
    you need to collaborate with both the development and the security teams to implement
    your security strategy.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的阶段是部署阶段，在此阶段您设置运行Kubernetes部署的平台并部署工作负载。在此阶段，您需要考虑配置Kubernetes集群的安全最佳实践，以及为在Kubernetes集群内运行的应用程序提供外部访问的安全控制。您还需要考虑安全控制，例如限制对工作负载的访问（Pod安全策略）、网络策略以控制应用程序对平台组件的访问以及基于角色的访问控制（RBAC）以访问资源（例如服务创建、命名空间创建和向Pod添加/更改标签）。在大多数企业中，平台团队负责此阶段。作为平台团队的一员，您需要与开发团队和安全团队合作，实施您的安全策略。
- en: The final stage is the runtime stage, where you have deployed your application
    and it is operational. In this stage you need to think about network security,
    which involves controls using network policy, threat defense (using techniques
    to detect and prevent malicious activity in the cluster), and enterprise security
    controls like compliance, auditing, and encryption. The security team is responsible
    for this stage of the deployment. As a member of the security team, you need to
    collaborate with the platform and development teams as you design and implement
    runtime security. Collaboration between teams (development, platform, and security)
    is very important for building an effective security strategy. We recommend that
    you ensure all these teams are aligned.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个阶段是运行时阶段，在此阶段您已部署了应用程序并且它正在运行。在此阶段，您需要考虑网络安全，涉及使用网络策略进行控制、威胁防御（使用技术检测和预防集群中的恶意活动）以及企业安全控制，如合规性、审计和加密。安全团队负责此部署阶段。作为安全团队的一员，在设计和实施运行时安全时，您需要与平台和开发团队合作。团队之间的协作（开发、平台和安全）对于建立有效的安全策略非常重要。我们建议您确保所有这些团队保持一致。
- en: Note that unlike with traditional security strategies, where security is enforced
    at a vantage point (like the perimeter), in the case of a Kubernetes cluster,
    you need to implement security at each stage. In addition, all teams involved
    (application, platform, and security) play a very important role in implementing
    security, so the key to implementing a successful strategy is collaboration between
    teams. Remember, security is a shared responsibility. Let’s explore each stage
    and the techniques you can use to build your strategy.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与传统的安全策略不同，传统安全策略在关键点（如边界）强制执行安全性，而在 Kubernetes 集群的情况下，您需要在每个阶段实施安全性。此外，所有参与的团队（应用程序、平台和安全团队）在实施安全性方面都起着非常重要的作用，因此成功实施策略的关键是团队之间的协作。记住，安全是一种共同责任。让我们探讨每个阶段及您可以使用的构建策略的技术。
- en: 'Build-Time Security: Shift Left'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建时安全性：向左移动
- en: This section will guide you through various aspects of build-time security with
    examples.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您通过示例了解构建时安全性的各个方面。
- en: Image scanning
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映像扫描
- en: During this stage, you need to ensure that applications do not have any major
    unpatched issues that are disclosed as common vulnerability enumerations (CVEs)
    in the National Vulnerability Database, and that the application code and dependencies
    are scanned for exploits and vulnerable code segments. The images that are built
    and delivered as containers are then scanned for unpatched critical or major vulnerabilities
    disclosed as CVEs. This is usually done by checking the base image and all its
    packages against a database that tracks vulnerable packages. In order to implement
    scanning, there are several tools, both open source and commercial, that are available
    to you. For example, Whitesource, Snyk, Trivy, Anchor, and even cloud providers
    like Google offer scanning of container images. We recommend that you select a
    scanning solution that understands how containers are built and scans not only
    the operating system on the host but also base images for containers. Given the
    dynamic nature of Kubernetes deployments, it is very important for you to secure
    the CI/CD pipeline; code and image scanning needs to be a part of the pipeline,
    and images being delivered from the image registry must be checked for compromise.
    You need to ensure access to the registry is controlled to avoid compromise. The
    popular term to describe this stage is *shifting security left toward the development
    team*, also known as *shift-left security*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您需要确保应用程序没有任何已公开的主要未修补问题，这些问题在国家漏洞数据库中被披露为常见的漏洞枚举 (CVEs)，并且需要扫描应用程序代码和依赖项以查找利用程序和易受攻击的代码段。然后对构建和交付为容器的映像进行扫描，以检测未修补的严重或主要漏洞，这些漏洞被披露为
    CVEs。通常通过将基础映像及其所有软件包与跟踪易受攻击软件包的数据库进行对比来执行此操作。为了实施扫描，您可以使用几种开源和商业工具。例如，Whitesource、Snyk、Trivy、Anchor，甚至像谷歌这样的云提供商都提供容器映像的扫描功能。我们建议您选择一个理解容器构建方式并不仅仅扫描主机操作系统，还扫描容器基础映像的扫描解决方案。考虑到
    Kubernetes 部署的动态性质，保障 CI/CD 管道的安全非常重要；代码和映像扫描必须成为管道的一部分，并且必须检查从映像注册表交付的映像是否受到妥协。您需要确保对注册表的访问受到控制，以避免妥协。这个阶段的流行术语是“向左移动安全性”，也被称为“向左移动安全性”。
- en: Host operating system hardening
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机操作系统的加固
- en: Here you must ensure that the application being deployed is restricted to having
    the required privileges on the host where it is deployed. To achieve this, you
    should use a hardened host operating system that supports controls to enable restricting
    applications to only necessary privileges like system calls and file system access.
    This allows you to effectively mitigate attacks related to *privilege escalation*,
    where a vulnerability in the software being deployed in a container is used to
    gain access to the host operating system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您必须确保被部署的应用程序仅限于在其部署的主机上具有所需的权限。为此，您应该使用支持控制以仅允许限制应用程序对系统调用和文件系统访问的必要权限的强化主机操作系统。这样可以有效地减轻与“特权升级”相关的攻击，即利用容器中部署的软件中的漏洞来访问主机操作系统。
- en: 'Minimizing the attack surface: Base container images'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少攻击面：基础容器镜像
- en: We recommend you review the composition of the container image and minimize
    software packages that make up the base image to include only packages that are
    absolutely necessary for your application to run. In Dockerfile-based container
    images, you can start with a parent image and then add your application to the
    image to create a container image. For example, you could start by building a
    base image in Docker using the `FROM scratch` directive, which will create a minimal
    image. You can then add your application and required packages, which will give
    you complete control of the composition of your container images and also help
    with CVE management, as you do not need to worry about patching CVEs in packages
    in a container image that aren’t required by your application. In case building
    a scratch image is not a viable option, you can consider starting with a distroless
    image (a slimmed-down Linux distribution image) or an Alpine minimal image as
    the base images for your container.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您审查容器镜像的组成，并最小化构成基础镜像的软件包，只包括您的应用程序运行所绝对必需的软件包。在基于 Dockerfile 的容器镜像中，您可以从一个父镜像开始，然后将您的应用程序添加到镜像中以创建一个容器镜像。例如，您可以使用
    `FROM scratch` 指令在 Docker 中构建一个基础镜像，这将创建一个最小的镜像。然后，您可以添加您的应用程序和必需的软件包，这将让您完全控制容器镜像的组成，并且有助于
    CVE 管理，因为您无需担心在容器镜像中不需要的软件包中修补 CVE。如果构建一个 scratch 镜像不可行，您可以考虑从 distroless 镜像（一个精简的
    Linux 发行版镜像）或 Alpine 最小镜像作为容器的基础镜像开始。
- en: These techniques will help you design and implement your build-time security
    strategy. As a part of the development team, you will be responsible for designing
    and implementing build-time security in collaboration with the platform and security
    teams to ensure it is aligned with the overall security strategy. We caution against
    believing the myth that shift-left security can be your whole security strategy.
    It is incorrect, and a naive approach to securing workloads. There are several
    other important aspects, such as deploy and runtime security, that need to be
    considered as part of your security strategy as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术将帮助您设计和实施构建时安全策略。作为开发团队的一部分，您将负责与平台和安全团队合作设计和实施构建时安全，以确保与整体安全策略一致。我们提醒不要相信“左移安全”可以成为您整个安全策略的全部。这是不正确的，是保护工作负载的一种幼稚方法。还有其他几个重要方面，如部署和运行时安全，也需要作为安全策略的一部分考虑进去。
- en: Deploy-Time Security
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署时安全
- en: The next stage in securing workloads is to secure the deployment. To accomplish
    this, you have to harden your Kubernetes cluster where the workloads are deployed.
    You will need a detailed review of the Kubernetes cluster configuration to ensure
    that it is aligned with security best practices. Start by building a trust model
    for various components of your cluster. A trust model is a framework where you
    review a threat profile and define mechanisms to respond to it. You should leverage
    tools like role-based access control (RBAC), label taxonomies, label governance,
    and admission controls to design and implement the trust model. These are mechanisms
    to control access to resources and controls and validation applied at resource
    creation time. These topics are covered in detail in Chapters [3](ch03.xhtml#workload_deployment_controls),
    [4](ch04.xhtml#workload_runtime_security), and [7](ch07.xhtml#network_policy).
    The other critical components in your cluster are the Kubernetes datastore and
    Kubernetes API server, and you need to pay close attention to details like access
    control and data security when you design the trust model for these components.
    We recommend you use strong credentials, public key infrastructure (PKI) for access,
    and transport layer security (TLS) for data in transit encryption. Securing the
    Kubernetes APT and the datastore is covered in detail in [Chapter 2](ch02.xhtml#infrastructure_security).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 保护工作负载的下一阶段是保护部署。为了实现这一点，您需要加固您部署工作负载的 Kubernetes 集群。您需要详细审查 Kubernetes 集群配置，以确保与安全最佳实践保持一致。首先，建立一个信任模型来评估集群的各个组件。信任模型是一个框架，您在其中审查威胁概况并定义响应机制。您应该利用诸如基于角色的访问控制（RBAC）、标签分类法、标签治理和准入控制等工具来设计和实施信任模型。这些是控制资源访问、在资源创建时应用控制和验证的机制。这些主题在第[3](ch03.xhtml#workload_deployment_controls)章、第[4](ch04.xhtml#workload_runtime_security)章和第[7](ch07.xhtml#network_policy)章中有详细覆盖。集群中的另一个关键组件是
    Kubernetes 数据存储和 Kubernetes API 服务器，在设计这些组件的信任模型时，您需要特别注意访问控制和数据安全等细节。我们建议您使用强密码、公钥基础设施（PKI）进行访问以及传输层安全（TLS）进行数据传输加密。有关如何保护
    Kubernetes API 和数据存储的详细信息，请参阅[第2](ch02.xhtml#infrastructure_security)章。
- en: You should think of the Kubernetes cluster where mission-critical workloads
    are deployed as an entity and then design a trust model for the entity. This requires
    you to review security controls at the perimeter, which will be challenging due
    to the Kubernetes deployment architectures; we will cover this in the next section.
    For now, let’s assume the current products that are deployed at the perimeter,
    like web access control gateways and next-generation firewalls, are not aware
    of Kubernetes architecture. We recommend you tackle this by building integrations
    with these devices, which will make them aware of the Kubernetes cluster context
    so they can be effective in applying security controls at the perimeter. This
    way you can create a very effective security strategy where the perimeter security
    devices work in conjunction with security implemented inside your Kubernetes cluster.
    As an example, say you need to make these devices aware of the identity of your
    workloads (IP address, TCP/UDP port, etc.). These devices can effectively protect
    the hosts that make up your Kubernetes cluster, but in most cases they cannot
    distinguish between workloads running on a single host. If you’re running in a
    cloud provider environment, you can use security groups, which are virtual firewalls
    that allow access control to a group of nodes (such as EC2 instances in Amazon
    Web Services) that host workloads. Security groups are more aligned with the Kubernetes
    architecture than traditional firewalls and security gateways; however, even security
    groups are not aware of the context for workloads running inside the cluster.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该将部署关键任务负载的 Kubernetes 集群视为一个实体，然后为该实体设计信任模型。这要求您审查边界的安全控制，由于 Kubernetes 部署架构的复杂性，这将是一个具有挑战性的任务；我们将在下一节中详细介绍这一点。目前，让我们假设当前部署在边界的产品，如
    Web 访问控制网关和下一代防火墙，对 Kubernetes 架构并不了解。我们建议您通过与这些设备建立集成来解决这个问题，使它们了解 Kubernetes
    集群的上下文，从而能够有效地在边界应用安全控制。这样一来，您可以创建一个非常有效的安全策略，其中边界安全设备与 Kubernetes 集群内实施的安全控制协同工作。例如，假设您需要使这些设备了解您的工作负载的身份（IP
    地址、TCP/UDP 端口等）。这些设备可以有效地保护构成您 Kubernetes 集群的主机，但在大多数情况下，它们无法区分单个主机上运行的工作负载。如果您在云提供商环境中运行，您可以使用安全组，这些是允许对一组节点（例如
    Amazon Web Services 中的 EC2 实例）进行访问控制的虚拟防火墙，这些节点承载工作负载。安全组比传统防火墙和安全网关更符合 Kubernetes
    架构；然而，即使是安全组也不了解集群内运行工作负载的上下文。
- en: To summarize, when you consider deploy-time security, you need to implement
    a trust model for your Kubernetes cluster and build an effective integration with
    perimeter security devices that protect your cluster.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，当您考虑部署时间安全性时，您需要为 Kubernetes 集群实施信任模型，并与保护集群的边界安全设备建立有效的集成。
- en: Runtime Security
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时安全性
- en: Now that you have a strategy in place to secure the build and deploy stages,
    you need to think about runtime security. The term *runtime security* is used
    for various aspects of securing a Kubernetes cluster, for example on a host running
    software, but any configuration that protects the host and workloads from unauthorized
    activity (e.g., system calls, file access) is also called runtime security. [Chapter 4](ch04.xhtml#workload_runtime_security)
    will cover host and workload runtime security in detail. In this section we will
    focus on the security best practices needed to ensure the secure operation of
    the Kubernetes cluster network. Kubernetes is an orchestrator that deploys workloads
    and applications across a network of hosts. You must consider network security
    as a very important aspect of runtime security.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经制定了保护构建和部署阶段的策略，需要考虑运行时安全性。术语*运行时安全性*用于描述保护 Kubernetes 集群的各个方面，例如在运行软件的主机上，但任何保护主机和工作负载免受未经授权活动的配置（例如系统调用、文件访问）也被称为运行时安全性。[第四章](ch04.xhtml#workload_runtime_security)将详细介绍主机和工作负载的运行时安全性。在本节中，我们将专注于确保
    Kubernetes 集群网络安全运行所需的安全最佳实践。Kubernetes 是一个编排器，可以在主机网络上部署工作负载和应用程序。您必须将网络安全性视为运行时安全性的一个非常重要的方面。
- en: Kubernetes promises increased agility and the more efficient use of compute
    resources, compared with the static partitioning and provisioning of servers or
    VMs. It does this by dynamically scheduling workloads across the cluster, taking
    into account the resource usage on each node, and connecting workloads on a flat
    network. By default, when a new workload is deployed, the corresponding pod could
    be scheduled on any node in the cluster, with any IP address within the pod IP
    address. If the pod is later rescheduled elsewhere, then it will normally get
    a different IP address. This means that pod IP addresses need to be treated as
    ephemeral. There is no long-term or special meaning associated with pod IP addresses
    or their location within the network.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 承诺提升灵活性和更有效地利用计算资源，相比于静态分区和服务器或虚拟机的预配。它通过在集群中动态调度工作负载来实现这一点，考虑每个节点上的资源使用情况，并在平面网络上连接工作负载。默认情况下，当部署新工作负载时，相应的
    Pod 可以被调度到集群中的任何节点，并使用 Pod IP 地址中的任何 IP 地址。如果稍后将 Pod 重新调度到其他地方，则通常会获得不同的 IP 地址。这意味着
    Pod IP 地址需要视为临时的。Pod IP 地址或其在网络中的位置没有长期或特殊的意义。
- en: Now consider traditional approaches to network security. Historically, in enterprise
    networks, network security was implemented using security appliances (or virtual
    versions of appliances) such as firewalls and routers. The rules enforced by these
    appliances were often based on a combination of the physical topology of the network
    and the allocation of specific IP address ranges to different classes of workloads.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑传统的网络安全方法。在企业网络中，网络安全通常使用安全设备（或设备的虚拟版本），如防火墙和路由器来实现。这些设备强制执行的规则通常基于网络的物理拓扑结构以及为不同类别的工作负载分配特定
    IP 地址范围的组合。
- en: As Kubernetes is based on a flat network, without any special meaning for pod
    IP addresses, very few of these traditional appliances are able to provide any
    meaningful workload-aware network security and instead have to treat the whole
    cluster as a single entity. In addition, in the case of east-west traffic between
    two pods hosted on the same node, the traffic does not even go via the underlying
    network. So these appliances won’t see this traffic at all and are essentially
    limited to north-south security, which secures traffic entering the cluster from
    external sources and traffic originating inside the cluster headed to sources
    outside the cluster.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 基于平面网络，并且 Pod IP 地址没有任何特殊含义，很少有传统设备能够提供有意义的工作负载感知的网络安全，而是不得不将整个集群视为单个实体。此外，在同一节点上托管的两个
    Pod 之间的东西流量甚至不会经过底层网络。因此，这些设备根本看不到这些流量，基本上只能限制于北向安全，即保护从外部源进入集群的流量以及从集群内部源到外部源的流量。
- en: 'Given all of this, it should be clear that Kubernetes requires a new approach
    to network security. This new approach needs to cover a broad range of considerations,
    including:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这一切，很明显 Kubernetes 需要一种新的网络安全方法。这种新方法需要涵盖广泛的考虑因素，包括：
- en: New ways to enforce network security (which workloads are allowed to talk to
    which other workloads) that do not rely on special meanings of IP addresses or
    network topology and that work even if the traffic does not traverse the underlying
    network; the Kubernetes network policy is designed to meet these needs.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新方法来执行网络安全（允许哪些工作负载与哪些其他工作负载通信），不依赖于 IP 地址或网络拓扑的特殊含义，并且即使流量不经过底层网络也能工作；Kubernetes
    网络策略旨在满足这些需求。
- en: New tools to help manage network policies that support new development processes
    and the desire for microservices to bring increased organizational agility, such
    as policy recommendations, policy impact previews, and policy staging.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新工具帮助管理支持新开发流程和微服务愿景的网络策略，以增加组织的灵活性，例如策略推荐、策略影响预览和策略分阶段。
- en: New ways to monitor and visualize network traffic, covering both cluster-scoped
    holistic views (e.g., how to easily view the overall network and the cluster’s
    network security status) and targeted topographic views to drill down across a
    sequence of microservices to help troubleshoot or diagnose application issues.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新方法来监视和可视化网络流量，涵盖集群范围的整体视图（例如如何轻松查看整体网络和集群的网络安全状态）以及针对微服务序列进行深入分析以帮助排除故障或诊断应用程序问题的有针对性拓扑视图。
- en: New ways of implementing intrusion detection and threat defense, including policy
    violation alerting, network anomaly detection, and integrated threat feeds.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施入侵检测和威胁防御的新方法，包括违规策略警报、网络异常检测和集成威胁源。
- en: New remediation workflows, so potentially compromised workloads can be quickly
    and safely isolated during forensic investigation.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的修复工作流程，以便在法医调查期间可以快速安全地隔离潜在受损的工作负载。
- en: New mechanisms for auditing configuration and policy changes for compliance.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计配置和策略变更以符合合规要求的新机制。
- en: New mechanisms for auditing configuration and policy changes, and also Kubernetes-aware
    network flow logs to meet compliance requirements (since traditional network flow
    logs are IP-based and have little long-term meaning in the context of Kubernetes).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计配置和策略变更的新机制，以及 Kubernetes 感知的网络流日志以满足合规性要求（因为传统的网络流日志是基于 IP 的，在 Kubernetes
    上下文中长期意义不大）。
- en: 'We will review an example of a typical Kubernetes deployment in an enterprise
    to understand these challenges. [Figure 1-2](#example_of_a_kubernetes_deployment_in_a)
    is a representation of a common deployment model for Kubernetes and microservices
    in a multicloud environment. A multicloud environment is one where an enterprise
    deploys Kubernetes in more than one cloud provider (Amazon Web services, Google
    Cloud, etc.). A hybrid cloud environment is one where an enterprise has a Kubernetes
    deployment in at least one cloud provider environment and a Kubernetes deployment
    on-premise in its datacenter. Most enterprises have a dual cloud strategy and
    will have clusters running in Amazon Web Services (AWS), Microsoft Azure, or Google
    Cloud; more enterprises also have some legacy applications running in their datacenters.
    Workloads in the datacenter will likely be behind a security gateway that filters
    traffic coming in through the perimeter. Microservices running in these Kubernetes
    deployments are also likely to have one or more dependencies on:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将审查一个典型的企业 Kubernetes 部署示例，以了解这些挑战。 [图 1-2](#example_of_a_kubernetes_deployment_in_a)
    是多云环境中 Kubernetes 和微服务的常见部署模型的表示。多云环境是指企业在多个云服务提供商（如亚马逊网络服务、谷歌云等）上部署 Kubernetes
    的情况。混合云环境指企业在至少一个云服务提供商的环境中部署 Kubernetes，并且在其数据中心内部署 Kubernetes。大多数企业都有双云战略，并将在亚马逊网络服务（AWS）、微软
    Azure 或谷歌云上运行集群；更多企业还在其数据中心运行一些传统应用程序。数据中心的工作负载可能位于安全网关后，该网关通过过滤进入的流量来保护外围。在这些
    Kubernetes 部署中运行的微服务也可能对以下一种或多种依赖有所依赖：
- en: Other cloud services like AWS RDS or Azure DB
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他云服务，如 AWS RDS 或 Azure DB
- en: Third-party API endpoints like Twilio
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twilio 等第三方 API 终端
- en: SaaS services like Salesforce or Zuora
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS 服务，如 Salesforce 或 Zuora
- en: Databases or legacy apps running inside the datacenter
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库或在数据中心内运行的传统应用程序
- en: Workloads in the datacenter will likely be behind a security gateway that filters
    traffic coming in through the perimeter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数据中心的工作负载可能位于安全网关后，该网关通过过滤进入的流量来保护外围。
- en: '*Observability* in Kubernetes is the ability to derive actionable insights
    about the state of Kubernetes from metrics collected (more on this later). While
    observability has other applications, like monitoring and troubleshooting, it
    is important in the context of network security too. Observability concepts applied
    to flow logs correlated with other Kubernetes metadata (pods labels, policies,
    namespaces, etc.) are used to monitor (and then secure) communications between
    pods in a Kubernetes cluster, detect malicious activity by comparing IP addresses
    with known malicious IP addresses, and use machine learning–based techniques to
    detect malicious activity. These topics are covered in the next section. As you
    can see in [Figure 1-2](#example_of_a_kubernetes_deployment_in_a), the Kubernetes
    deployment poses challenges due to silos of data in each cluster and the potential
    loss of visibility from associating a workload in one cluster to a workload in
    another cluster or to an external service.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*可观察性* 在 Kubernetes 中是通过收集的度量标准获取有关 Kubernetes 状态的可行见解的能力（稍后详述）。虽然可观察性还有其他应用，比如监视和故障排除，但在网络安全的背景下也很重要。将应用于流日志的可观察性概念与其他
    Kubernetes 元数据（Pod 标签、策略、命名空间等）相关联，用于监视（然后保护）Kubernetes 集群中的 Pod 之间的通信，通过比较 IP
    地址与已知恶意 IP 地址来检测恶意活动，并使用基于机器学习的技术来检测恶意活动。这些主题将在下一节中详细介绍。正如您在 [图 1-2](#example_of_a_kubernetes_deployment_in_a)
    中所见，Kubernetes 的部署由于每个集群中的数据孤立以及将一个集群中的工作负载与另一个集群或外部服务的工作负载关联起来可能导致的可见性损失而面临挑战。'
- en: '![](Images/ksao_0102.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_0102.png)'
- en: Figure 1-2\. Example of a Kubernetes deployment in an enterprise
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. 企业中Kubernetes部署示例
- en: As shown in [Figure 1-2](#example_of_a_kubernetes_deployment_in_a), the footprint
    of a microservices application typically extends beyond the virtual private cloud
    (VPC) boundaries, and securing these applications requires a different approach
    from the traditional perimeter security approach. It is a combination of network
    security controls, observability, threat defense, and enterprise security controls.
    We will cover each of these next.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图1-2](#example_of_a_kubernetes_deployment_in_a)所示，微服务应用程序的足迹通常延伸到虚拟私有云（VPC）边界之外，保护这些应用程序需要一种不同于传统周界安全方法的方法。它是网络安全控制、可观察性、威胁防御和企业安全控制的组合。接下来我们将详细介绍每一个。
- en: Network security controls
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络安全控制
- en: Native security controls available from cloud providers (for example, AWS Security
    Groups or Azure Network Security Groups) or security gateways (for example, next-generation
    firewalls) on the perimeter of the VPC or datacenter do not understand the identity
    of a microservice inside a Kubernetes cluster. For example, you cannot filter
    traffic to or from a Kubernetes pod or service with your security group rules
    or firewall policies. Additionally, by the time traffic from a pod hits a cloud
    provider’s network or a third-party firewall, the traffic (depending on the cloud
    provider’s architecture) has a source network address translation (SNAT) applied
    to it. In other words, the source IP address of traffic from all workloads on
    the node is set to the node IP, so any kind of allow/deny policies, at best, will
    have node-level (the node’s IP address) granularity.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供商提供的本地安全控制（例如AWS安全组或Azure网络安全组）或位于VPC或数据中心周边的安全网关（例如下一代防火墙）并不理解Kubernetes集群内微服务的身份。例如，您不能使用安全组规则或防火墙策略来过滤与Kubernetes
    pod或服务之间的流量。此外，从pod发送的流量到达云提供商的网络或第三方防火墙时（根据云提供商的架构），流量会应用源网络地址转换（SNAT）。换句话说，从节点上所有工作负载的流量的源IP地址都设置为节点IP，因此，最多只能具有节点级别（节点的IP地址）的允许/拒绝策略粒度。
- en: Kubernetes workloads are highly dynamic and ephemeral. Let’s say a developer
    commits a new check-in for a particular workload. The automated CI/CD workflow
    will kick in, build a new version of the pod (container), and start deploying
    this new version of the workload in Kubernetes clusters. Kubernetes orchestrator
    will do a rolling upgrade and deploy new instances of the workload. All of this
    happens in an automated fashion, and there is no room for manual or out-of-band
    workflows to reconfigure the security controls for the newly deployed workload.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes工作负载具有高度动态和短暂的特性。假设开发人员提交了一个特定工作负载的新检入。自动化的CI/CD工作流将启动，构建一个新版本的pod（容器），并开始在Kubernetes集群中部署这个新版本的工作负载。Kubernetes
    orchestrator将进行滚动升级并部署工作负载的新实例。所有这些都是自动化进行的，没有手动或带外工作流重新配置新部署工作负载的空间。
- en: You need a new security architecture to secure workloads running in a multi-
    or hybrid cloud infrastructure. Just like your workload deployment in a Kubernetes
    cluster, the security of the workload has to be defined as code, in a declarative
    model. Security controls have to be portable across Kubernetes distributions,
    clouds, infrastructures, and/or networks. These security controls have to travel
    with the workloads, so if a new version of the workload is deployed in a VPC for
    Amazon Elastic Kubernetes Service (EKS), instead of on-premise clusters, you can
    be assured that the security controls associated with the service will be seamlessly
    enforced without you having to rework any network topology, out-of-band configuration
    of security groups, or VPC/perimeter firewalls.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一种新的安全架构来保护在多云或混合云基础设施中运行的工作负载。就像你在Kubernetes集群中部署工作负载一样，工作负载的安全性必须以代码形式定义，采用声明性模型。安全控制必须能够跨Kubernetes发行版、云、基础设施和/或网络进行移植。这些安全控制必须随着工作负载一起移动，因此，如果工作负载的新版本在Amazon
    Elastic Kubernetes Service（EKS）的VPC上部署，而不是在本地集群上部署，您可以放心，与服务相关的安全控制将无缝执行，而无需重新设计任何网络拓扑、超出带外配置的安全组或VPC/周界防火墙。
- en: Network security controls are implemented by using a network policy solution
    that is native to Kubernetes and provides granular access controls. There are
    several well-known implementations of network policy (such as Calico, Weave Net,
    Kube-router, Antrea) that you can use. In addition to applying policy at Layer
    3/Layer 4 (TCP/IP), we recommend you look at solutions that support application
    layer policy (such as HTTP/HTTPS). We also recommend picking a solution that is
    based on the popular proxy Envoy, as it is widely deployed for application-layer
    policy. Kubernetes supports deploying applications as microservices (small components
    serving a part of the application functionality) over a network of nodes. The
    communication between microservices relies on application protocols such as HTTP.
    Therefore, there is a need for granular application controls that can be implemented
    by application layer policy. For example, in a three-tier application, the frontend
    microservice may only be allowed to use HTTP GET-based requests with the backend
    database microservice (read access) and not allowed to use HTTP POST with the
    backend database microservice (write access). All these requests can end up using
    the same TCP connection, so it is essential to add a policy engine that supports
    application-level controls as described here.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全控制通过使用Kubernetes原生的网络策略解决方案实施，提供精细的访问控制。有几种众所周知的网络策略实现（例如Calico，Weave Net，Kube-router，Antrea）可供选择使用。除了在第3/第4层（TCP/IP）应用策略外，我们建议您查看支持应用层策略（例如HTTP/HTTPS）的解决方案。我们还建议选择基于流行的代理Envoy的解决方案，因为它广泛用于应用层策略。Kubernetes支持将应用程序部署为微服务（服务应用程序功能的小组件），分布在节点网络上。微服务之间的通信依赖于应用程序协议如HTTP。因此，有必要实施可以通过应用层策略实现的精细应用程序控制。例如，在三层应用程序中，前端微服务可能只允许与后端数据库微服务使用基于HTTP
    GET的请求（读访问），而不允许与后端数据库微服务使用HTTP POST（写访问）。所有这些请求最终可以使用相同的TCP连接，因此必须添加支持所述应用层控制的策略引擎是至关重要的。
- en: Enterprise security controls
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 企业安全控制
- en: Now that you have the strategy for network access controls and observability
    defined, you should consider additional security controls that are important and
    prevalent in enterprises. Encryption of data in transit is a critical requirement
    for security and compliance. There are several options to consider for encryption
    using traditional approaches, like TLS-based encryption in your workloads; mutual
    TLS, which is part of a service mesh platform; or a VPN-based approach like Wireguard
    (which offers a crypto key–based VPN).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经定义了网络访问控制和可观察性策略，应考虑其他重要且在企业中普遍存在的安全控制措施。在数据传输中加密是安全和合规的关键要求。有几种选择可以考虑使用传统方法进行加密，比如在您的工作负载中使用基于TLS的加密；双向TLS，它是服务网格平台的一部分；或者基于VPN的方法，比如提供基于加密密钥的VPN的Wireguard。
- en: We recommend that you leverage the data collection that is part of your observability
    strategy to build the reports needed to help with compliance requirements for
    standards like PCI, HIPAA, GDPR, and SOC 2\. You should also consider the ability
    to ensure continuous compliance, and you can leverage the declarative nature of
    Kubernetes to help with the design and implementation of continuous compliance.
    For example, you can respond to a pod failing a compliance check by using the
    pod’s compliance status to trigger necessary action to correct the situation (trigger
    an image update).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您利用观察策略的数据收集来生成所需的报告，以帮助满足PCI、HIPAA、GDPR和SOC 2等标准的合规要求。您还应考虑确保持续合规性的能力，可以利用Kubernetes的声明性特性来协助设计和实施持续合规性。例如，您可以通过使用Pod的合规性状态来响应未通过合规性检查的Pod，触发必要的操作以纠正情况（触发镜像更新）。
- en: Threat defense
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 威胁防御
- en: Threat defense in a Kubernetes cluster is the ability to look at malicious activity
    in the cluster and then defend the cluster from it. Malicious activity allows
    an adversary to gain unauthorized access and manipulate or steal data from a Kubernetes
    cluster. The malicious activity can occur in many forms, such as exploiting an
    insecure configuration or exploiting a vulnerability in the application traffic
    or the application code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群中的威胁防御是查看集群中的恶意活动并防御其的能力。恶意活动允许对手未经授权访问并操纵或窃取Kubernetes集群中的数据。恶意活动可以采用多种形式，例如利用不安全的配置或利用应用程序流量或应用程序代码中的漏洞。
- en: 'When you build your threat defense strategy, you must consider both intrusion
    detection and prevention. The key to intrusion detection is observability; you
    need to review data collected to scan for known threats. In a Kubernetes deployment,
    data collection is very challenging due to the large amount of data you need to
    inspect. We have often heard this question: “Do I need a Kubernetes cluster to
    collect data to defend a Kubernetes cluster?” The answer is “no.” We recommend
    you align your observability strategy with intrusion detection and leverage smart
    aggregation to collect and inspect data. For example, you can consider using a
    tool that aggregates data as groups of “similar” pods talking to each other on
    a given destination port and protocol, instead of using the traditional method
    of aggregating by the five-tuple (source IP, source port, destination IP, destination
    port, protocol). This approach will help significantly reduce data collected without
    sacrificing effectiveness. Remember, several pods running the same container image
    and deployed in the same way will generate identical network traffic for a transaction.
    You may ask, “What if only one instance is infected? How can I detect that?” That’s
    a good question. There are a few ways. You could pick a tool that supports machine
    learning based on various metrics collected like connections, bytes, and packets
    to detect anomalous workloads. Another approach is to have a tool that can detect
    and match known malicious IPs and domains from well-known threat feeds as a part
    of collection, or log unaggregated network flows for traffic denied by policy.
    These are simple techniques that will help you build a strategy. Note that threat
    defense techniques evolve, and you will need a security research team to work
    with you to help understand your application and build a threat model to implement
    your threat defense strategy.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建威胁防御策略时，您必须考虑入侵检测和预防两个方面。入侵检测的关键在于可观察性；您需要回顾收集的数据以扫描已知威胁。在Kubernetes部署中，由于您需要检查的数据量很大，数据收集非常具有挑战性。我们经常听到这样的问题：“我需要一个Kubernetes集群来收集数据以保护Kubernetes集群吗？”答案是“不需要”。我们建议您将可观察性策略与入侵检测保持一致，并利用智能聚合来收集和检查数据。例如，您可以考虑使用一种工具，将数据聚合为“类似”pod组，这些pod在给定目标端口和协议上相互通信，而不是使用传统的五元组（源IP、源端口、目标IP、目标端口、协议）聚合方法。这种方法将有助于显著减少收集的数据量，而不会牺牲效果。请记住，运行相同容器镜像并以相同方式部署的多个pod将为交易生成相同的网络流量。您可能会问，“如果只有一个实例被感染怎么办？如何检测到？”这是一个很好的问题。有几种方法可以解决。您可以选择一个支持基于各种指标（如连接、字节和数据包）收集的机器学习的工具来检测异常工作负载。另一种方法是使用工具，作为收集的一部分检测和匹配来自知名威胁源的已知恶意IP和域名，或记录未聚合的由策略拒绝的网络流量。这些都是帮助您构建策略的简单技术。请注意，威胁防御技术在不断发展，您需要与安全研究团队合作，帮助理解您的应用程序并构建威胁模型，以实施您的威胁防御策略。
- en: Observability
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可观察性
- en: Observability is very useful for monitoring and securing a distributed system
    like Kubernetes. Kubernetes abstracts a lot of details, and in order to monitor
    a system like it, you cannot collect and independently baseline and monitor individual
    metrics (such as a single network flow, a pod create/destroy event, or a CPU spike
    on one node). What is needed is a way to monitor these metrics in the context
    of the Kubernetes. For example, a pod associated with a service or a deployment
    is restarted and running as a different binary as compared to its peers, or a
    pod activity (network, filesystem, kernel system calls) is different from other
    pods in the deployment. This becomes even more complex when you consider an application
    that comprises several services (microservices) that are in turn backed by several
    pods.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察性对于监控和保障像Kubernetes这样的分布式系统非常有用。Kubernetes抽象了很多细节，在监视这样的系统时，您不能单独收集和独立基线化和监视各个指标（如单个网络流，pod创建/销毁事件或一个节点上的CPU峰值）。需要的是一种在Kubernetes上下文中监视这些指标的方法。例如，一个与服务或部署相关联的pod被重新启动，并作为其对等体的不同二进制运行，或者与部署中的其他pod的活动（网络，文件系统，内核系统调用）不同。当考虑由多个服务（微服务）组成的应用时，情况变得更加复杂，这些服务又由多个pod支持。
- en: 'Observability is useful in troubleshooting and monitoring the security of workloads
    in Kubernetes. As an example, observability in the context of a service in Kubernetes
    will allow you to do the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察性在故障排除和监控Kubernetes工作负载的安全性方面非常有用。例如，在Kubernetes服务的上下文中，可观察性将允许您执行以下操作：
- en: Visualize your Kubernetes cluster as a service graph, which shows how pods are
    associated with services and the communication flows between services
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的 Kubernetes 集群可视化为服务图，显示 Pod 如何与服务相关联及服务之间的通信流量。
- en: Overlay application (Layer 7) and network traffic (Layer 3/Layer 4) on the service
    graph as separate layers that will allow you to easily determine traffic patterns
    and traffic load for applications and for the underlying network
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务图上叠加应用程序（第 7 层）和网络流量（第 3/第 4 层）作为独立层，这将使您能够轻松确定应用程序和底层网络的流量模式和流量负载。
- en: View metadata for the node where a pod is deployed (e.g., CPU, memory, or host
    OS details).
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看部署有 Pod 的节点的元数据（例如 CPU、内存或主机操作系统详情）。
- en: View metrics related to the operation of a pod, traffic load, application latency
    (e.g., HTTP duration), network latency (network round-trip time), or pod operation
    (e.g., RBAC policies, service accounts, or container restarts)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看与 Pod 操作、流量负载、应用延迟（例如 HTTP 持续时间）、网络延迟（网络往返时间）或 Pod 操作（例如 RBAC 策略、服务账户或容器重启）相关的指标。
- en: View DNS activity (DNS response codes, latency, load) for a given service (pods
    backing the service)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看给定服务（支持该服务的 Pod）的 DNS 活动（DNS 响应代码、延迟、负载）。
- en: Trace a user transaction that needs communication across multiple services;
    this is also known as *distributed tracing*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪跨多个服务进行通信的用户事务；这也被称为*分布式跟踪*。
- en: View network communication of a given service to external entities
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看给定服务与外部实体的网络通信。
- en: View Kubernetes activity logs (e.g., audit logs) for pods and resources associated
    with a given service.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看与给定服务相关的 Pod 和资源的 Kubernetes 活动日志（例如审计日志）。
- en: We will cover the details of observability and examples of how it can help security
    in subsequent chapters. For this discussion, we will cover a brief description
    of how you can use observability as a part of your security strategy.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节详细介绍可观测性的细节及其如何帮助安全性。在本讨论中，我们将简要描述如何将可观测性作为安全策略的一部分使用。
- en: Network traffic visibility
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络流量可见性
- en: As mentioned, a solution that provides network flows aggregated at a service
    level with context like namespaces, labels, service accounts, or network policies
    is required to adequately monitor activity and access controls applied to the
    cluster. For example, there is a significant difference between reporting that
    IP1 communicated with IP2 over port 8080 and reporting that pods labeled “frontend”
    communicated with pods labeled “backend” on certain ports or traffic patterns
    between deployments of pods in a Kubernetes cluster. This reporting will allow
    you to review communication from external entities and apply IP address–based
    threat feeds to detect activity from known malicious IP addresses or even traffic
    from unexpected geographical locations. We will cover details for these concepts
    in [Chapter 11](ch11.xhtml#threat_defense_and_intrusion_detection).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，需要一个解决方案，它提供以服务级别汇总的网络流量，并提供如命名空间、标签、服务账户或网络策略等上下文，以充分监视集群中应用的活动和应用的访问控制。例如，报告
    IP1 与 IP2 在端口 8080 上通信与报告标记为“前端”和“后端”的 Pod 在 Kubernetes 集群中的特定端口或流量模式之间的通信有显著差异。此报告将允许您审查来自外部实体的通信，并应用基于
    IP 地址的威胁源来检测来自已知恶意 IP 地址的活动，甚至来自意外地理位置的流量。我们将在[第 11 章](ch11.xhtml#threat_defense_and_intrusion_detection)中详细介绍这些概念。
- en: DNS activity logs
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DNS 活动日志
- en: Domain Name System (DNS) is a system used to translate domain names into IP
    addresses. In your Kubernetes cluster, it is critical to review DNS activity logs
    to detect unexpected activity, for example queries to known malicious domains,
    DNS response codes like NXDOMAIN, and unexpected increases in bytes and packets
    in DNS queries. We will cover details for these concepts in [Chapter 11](ch11.xhtml#threat_defense_and_intrusion_detection).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 域名系统（DNS）是将域名转换为 IP 地址的系统。在您的 Kubernetes 集群中，审查 DNS 活动日志至关重要，以检测意外活动，例如查询已知恶意域的情况、DNS
    响应代码如 NXDOMAIN，以及 DNS 查询中字节和数据包的意外增加。我们将在[第 11 章](ch11.xhtml#threat_defense_and_intrusion_detection)中详细介绍这些概念。
- en: Application traffic visibility
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序流量可见性
- en: We recommend you review application traffic flows for suspicious activity like
    unexpected response codes and rare or known malicious HTTP headers (user-agent,
    query parameters). HTTP is the most common protocol used in Kubernetes deployments,
    so it is important to work with your security research team to monitor HTTP traffic
    for malicious traffic. In case you use other application protocols (e.g., Kafka,
    MySQL), you need to do the same for those as well.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您审查应用程序流量，以寻找异常活动，如意外的响应代码和罕见或已知的恶意HTTP头部（用户代理，查询参数）。在Kubernetes部署中，HTTP是最常用的协议，因此重要的是与您的安全研究团队合作，监控HTTP流量以检测恶意流量。如果您使用其他应用程序协议（例如Kafka、MySQL），同样需要进行相同的操作。
- en: Kubernetes activity logs
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes活动日志
- en: In addition to network activity logs, you must also monitor Kubernetes activity
    logs to detect malicious activity. For example, review access-denied logs for
    resources access and service account creation/modification. Review namespace creation/modification
    logs for unexpected activity. And review the Kubernetes audit logs which record
    requests to the Kubernetes API.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了网络活动日志外，您还必须监视Kubernetes活动日志以检测恶意活动。例如，审查资源访问拒绝日志以及服务账户创建/修改。审查命名空间创建/修改日志以寻找意外活动。并审查记录对Kubernetes
    API请求的审计日志。
- en: Machine learning/anomaly detection
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习/异常检测
- en: Machine learning is a technique where a system is able to derive patterns from
    data over a period of time. The output is a machine learning model, which can
    then be used to make predictions and detect deviations in real data based on the
    prediction. We recommend you consider applying machine learning–based anomaly
    detection to various metrics to detect strange activity. A simple and effective
    way is to apply a machine learning technique known as *baselining* to individual
    metrics. This way you do not need to worry about applying rules and thresholds
    for each metric; the system does that for you and reports deviations as anomalies.
    Applying machine learning techniques to network traffic is a relatively new area
    and is gaining traction with security teams. We will cover this topic in detail
    in [Chapter 6](ch06.xhtml#observability_and_security).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是一种技术，系统能够通过数据在一段时间内推导出模式。输出结果是一个机器学习模型，然后可以用于预测和基于预测检测实际数据中的偏差。我们建议您考虑将基于机器学习的异常检测应用于各种指标，以检测异常活动。一种简单有效的方法是对单独的指标应用称为*基线设定*的机器学习技术。这样您就不需要担心为每个指标应用规则和阈值；系统会为您执行这些操作并将偏差报告为异常。将机器学习技术应用于网络流量是一个相对新的领域，并且正在获得安全团队的关注。我们将在[第6章](ch06.xhtml#observability_and_security)详细讨论这个主题。
- en: There are many solutions that you can choose for your observability strategy
    for Kubernetes (Datadog, Calico Enterprise, cloud provider–based solutions from
    Google, AWS, Azure).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Kubernetes的可观测性策略，您可以选择许多解决方案（如Datadog、Calico Enterprise、来自Google、AWS、Azure的基于云提供商的解决方案）。
- en: Security Frameworks
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全框架
- en: Finally, we want to make you aware of security frameworks that provide the industry
    a common methodology and terminology for security best practices. Security frameworks
    are a great way to understand attack techniques and best practices to defend and
    mitigate attacks. You should use them to build and validate your security strategy.
    Please note these frameworks may not be specific to Kubernetes, but they provide
    insights into techniques used by adversaries in attacks, and security researchers
    will need to review and see if they are relevant to Kubernetes. We will review
    two well-known frameworks—MITRE and Threat Matrix for Kubernetes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望让您了解安全框架，这些框架为行业提供了安全最佳实践的共同方法和术语。安全框架是理解攻击技术和最佳实践以防御和减轻攻击的良好途径。您应该使用它们来构建和验证您的安全策略。请注意，这些框架可能不特定于Kubernetes，但它们提供了有关对手在攻击中使用的技术的见解，安全研究人员需要审查并确定它们是否与Kubernetes相关。我们将回顾两个知名框架——MITRE和Kubernetes威胁矩阵。
- en: MITRE
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MITRE
- en: MITRE is a knowledge base of adversary tactics and techniques based on real-world
    observations of cyberattacks. The [MITRE ATT&CK® Matrix for Enterprise](https://oreil.ly/fxBKB)
    is useful because it provides the tactics and techniques categorized for each
    stage of the cybersecurity kill chain. The kill chain is a description of the
    stages in a cyberattack and is useful for building an effective defense against
    an attack. MITRE also provides an attack matrix tailored for cloud environments
    like AWS, Google Cloud, and Microsoft Azure.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: MITRE 是基于对网络攻击的实际观察而建立的对手战术和技术知识库。[企业版 MITRE ATT&CK® 矩阵](https://oreil.ly/fxBKB)非常有用，因为它为每个网络安全杀伤链的阶段提供了分类的战术和技术。杀伤链描述了网络攻击的各个阶段，对于构建有效的防御措施非常有用。MITRE
    还提供了针对 AWS、Google Cloud 和 Microsoft Azure 等云环境的攻击矩阵。
- en: '[Figure 1-3](#attack_matrix_for_cloud_environments_in) describes the [MITRE
    ATT&CK® Matrix for AWS.](https://oreil.ly/Mvyzz) We recommend that you review
    each of the stages described in the attack matrix as you build your threat model
    for securing your Kubernetes cluster.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-3](#attack_matrix_for_cloud_environments_in) 描述了[适用于 AWS 的 MITRE ATT&CK®
    矩阵。](https://oreil.ly/Mvyzz)我们建议您查看攻击矩阵中描述的每个阶段，以便构建您的威胁模型，保护您的 Kubernetes 集群。'
- en: '![](Images/ksao_0103.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_0103.png)'
- en: Figure 1-3\. Attack matrix for cloud environments in AWS
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. AWS 云环境攻击矩阵
- en: Threat matrix for Kubernetes
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes 的威胁矩阵
- en: The other framework is a [threat matrix](https://oreil.ly/GQery) that is a Kubernetes-specific
    application of the generic MITRE attack matrix. It was published by the Microsoft
    team based on security research and real-world attacks. This is another excellent
    resource to use to build and validate your security strategy.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个框架是一种[威胁矩阵](https://oreil.ly/GQery)，它是对通用 MITRE 攻击矩阵的 Kubernetes 特定应用。这是微软团队基于安全研究和实际攻击发布的。这是另一个优秀的资源，用于构建和验证您的安全策略。
- en: '[Figure 1-4](#threat_matrix_for_kubernetes) provides the stages that are relevant
    to your Kubernetes cluster. They map to the various stages we discussed in this
    chapter. For example, you should consider the compromised images in the registry
    in the initial access stage, the access cloud resources in the privilege escalation
    stage, and the cluster internal network in the lateral movement stage for build,
    deploy, and runtime security, respectively.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-4](#threat_matrix_for_kubernetes) 提供了与您的 Kubernetes 集群相关的各个阶段。它们映射到我们在本章讨论的各个阶段。例如，您应该考虑初始访问阶段中注册表中的受损镜像，特权升级阶段中的访问云资源，以及构建、部署和运行时安全性的侧向移动阶段中的集群内部网络。'
- en: '![](Images/ksao_0104.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ksao_0104.png)'
- en: Figure 1-4\. Threat matrix for Kubernetes
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. Kubernetes 的威胁矩阵
- en: Security and Observability
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性和可观察性
- en: In a dynamic environment like Kubernetes, a secure deployment of your applications
    can be achieved by thinking about security and observability together. As an example,
    you need to “observe” your cluster to find the optimal way to implement controls
    to secure the cluster. Kubernetes as an orchestration engine has strong adoption
    due to the fact that it is declarative in nature, allowing users to specify higher-level
    outcomes. Kubernetes also has built-in capabilities to ensure that your cluster
    operates as per the specifications. It does this by monitoring the various attributes
    and taking action (e.g., a pod restart) if the attribute deviates from the specified
    value for a period of time. These aspects of Kubernetes make it difficult to implement
    the visibility and controls needed to secure a cluster. The controls you implement
    need to be aligned with Kubernetes operations. Therefore, before you think of
    adding any controls to Kubernetes, it is important to understand the context—for
    example, you cannot isolate a pod by applying a policy that does not allow it
    to communicate with anything else. Kubernetes will detect that the pod is not
    able to communicate with the other elements (e.g., API server), determine that
    the pod is not operating as specified, and restart and spin up the pod somewhere
    else in the cluster.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 Kubernetes 这样的动态环境中，通过同时考虑安全性和可观察性，可以实现应用程序的安全部署。例如，你需要“观察”你的集群，找到实施控制以保护集群的最佳方式。作为编排引擎，Kubernetes
    具有强大的采用率，因为它具有声明性的特性，允许用户指定更高级别的结果。Kubernetes 还具有内置功能，以确保您的集群按照规范运行。它通过监视各种属性并采取行动（例如，重新启动
    pod）来实现这一点，如果属性偏离指定值一段时间，就会采取行动。Kubernetes 的这些方面使得实施确保集群安全所需的可见性和控制变得困难。你实施的控制需要与
    Kubernetes 运营保持一致。因此，在考虑向 Kubernetes 添加任何控制之前，了解上下文非常重要——例如，你不能通过应用不允许其与其他任何元素通信的策略来隔离一个
    pod。Kubernetes 将检测到 pod 无法与其他元素（例如，API 服务器）通信，确定 pod 未按规定操作，然后重新启动并在集群的其他位置启动
    pod。
- en: 'What you have to do is first understand how the pod operates and understand
    what its expected operation is and then apply controls or detect unexpected events.
    After that, you determine if the unexpected event is an operations issue or a
    security issue and then apply the required remediation. In order to do this, observability
    and security go hand in hand: You observe to understand what is expected and apply
    controls to ensure expected operation, then observe to detect unexpected events
    and analyze them, and then add necessary controls to remediate any issue due to
    the event. Therefore, you need a holistic approach for security and observability
    when you think about securing your clusters.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是先了解 pod 的运行方式，了解其预期操作是什么，然后应用控制或检测意外事件。之后，你需要确定意外事件是运营问题还是安全问题，然后应用所需的补救措施。为了做到这一点，可观察性和安全性需要并重：你观察以了解预期情况并应用控制以确保预期操作，然后观察以检测意外事件并分析它们，然后添加必要的控制以补救由事件引起的任何问题。因此，在考虑保护你的集群时，你需要一种全面的安全和可观察性方法。
- en: Conclusion
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'By now you should have a high-level overview of what Kubernetes security and
    observability entails. These are the foundational concepts that underpin this
    entire book. In short:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对 Kubernetes 安全性和可观察性的高层概述有了了解。这些是支撑整本书的基本概念。简而言之：
- en: Security for Kubernetes is very different from traditional security and requires
    a holistic security and observability approach at all the stages of workload deployment—build,
    deploy, and runtime.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的安全性与传统安全性非常不同，并且在工作负载部署的所有阶段——构建、部署和运行时都需要一种全面的安全性和可观察性方法。
- en: Kubernetes is declarative and abstracts the details of workload operations,
    which means workloads can be running anywhere over a network of nodes. Also, workloads
    can be ephemeral, where they are destroyed and re-created on a different node.
    Securing such a declarative distributed system requires that you think about security
    at all stages.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是声明性的，并抽象了工作负载操作的细节，这意味着工作负载可以在节点网络的任何地方运行。此外，工作负载可能是短暂的，它们会在不同节点上被销毁并重新创建。保护这样的声明式分布式系统需要你在所有阶段考虑安全性。
- en: We hope you understand the importance of collaboration between the application,
    platform, and security teams when designing and implementing a holistic security
    approach.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望你理解在设计和实施全面安全方法时，应用程序、平台和安全团队之间合作的重要性。
- en: MITRE and the Threat Matrix for Kubernetes are two security frameworks that
    are widely adopted by security teams.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MITRE](https://www.mitre.org)和Kubernetes的威胁矩阵是广泛被安全团队采纳的两个安全框架。'
- en: It’s important that you take in all of this together, because a successful security
    and observability strategy is a holistic one. In the next chapter, we will cover
    infrastructure security.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要将所有内容整合在一起，因为成功的安全和可观察性策略是一体化的。在接下来的章节中，我们将涵盖基础设施安全。
