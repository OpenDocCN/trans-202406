["```\n$ helm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts\n$ helm install gatekeeper/gatekeeper --name-template=gatekeeper \\\n  --namespace gatekeeper-system --create-\n\n```", "```\n$ kubectl get pods -n gatekeeper-system\nNAME                                             READY   STATUS    RESTARTS  AGE\ngatekeeper-audit-54c9759898-ljwp8                1/1     Running   0         1m\ngatekeeper-controller-manager-6bcc7f8fb5-4nbkt   1/1     Running   0         1m\ngatekeeper-controller-manager-6bcc7f8fb5-d85rn   1/1     Running   0         1m\ngatekeeper-controller-manager-6bcc7f8fb5-f8m8j   1/1     Running   0         1m\n\n```", "```\n$ kubectl get validatingwebhookconfiguration -o yaml\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  labels:\n    gatekeeper.sh/system: \"yes\"\n  name: gatekeeper-validating-webhook-configuration\nwebhooks:\n- admissionReviewVersions:\n  - v1\n  - v1beta1\n  clientConfig:\n    service:\n      name: gatekeeper-webhook-service\n      namespace: gatekeeper-system\n      path: /v1/admit\n  failurePolicy: Ignore\n  matchPolicy: Exact\n  name: validation.gatekeeper.sh\n  namespaceSelector:\n    matchExpressions:\n    - key: admission.gatekeeper.sh/ignore\n      operator: DoesNotExist\n  rules:\n  - apiGroups:\n    - '*'\n    apiVersions:\n    - '*'\n    operations:\n    - CREATE\n    - UPDATE\n    resources:\n    - '*'\n  sideEffects: None\n  timeoutSeconds: 3\n\t...\n```", "```\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sallowedrepos\n  annotations:\n    description: Requires container images to begin with a repo string from a\n      specified list.\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sAllowedRepos\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          properties:\n            repos:\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8sallowedrepos\n\n        violation[{\"msg\": msg}] {\n          container := input.review.object.spec.containers[_]\n          satisfied := [good | repo = input.parameters.repos[_] ; good = starts...\n          not any(satisfied)\n          msg := sprintf(\"container <%v> has an invalid image repo <%v>, allowed...\n        }\n\n        violation[{\"msg\": msg}] {\n          container := input.review.object.spec.initContainers[_]\n          satisfied := [good | repo = input.parameters.repos[_] ; good = starts...\n          not any(satisfied)\n          msg := sprintf(\"container <%v> has an invalid image repo <%v>, allowed...)\n        }\n```", "```\n$ kubectl apply -f allowedrepos-constraint-template.yaml\nconstrainttemplate.templates.gatekeeper.sh/k8sallowedrepos created\n```", "```\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRepos\nmetadata:\n  name: repo-is-kuar-demo\nspec:\n  enforcementAction: deny\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n    namespaces:\n      - \"default\"\n  parameters:\n    repos:\n      - \"gcr.io/kuar-demo/\"\n```", "```\n$ kubectl create -f allowedrepos-constraint.yaml\nk8sallowedrepos.constraints.gatekeeper.sh/repo-is-kuar-demo created\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kuard\nspec:\n  containers:\n    - image: gcr.io/kuar-demo/kuard-amd64:blue\n      name: kuard\n      ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```\n$ kubectl apply -f compliant-pod.yaml\npod/kuard created\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-noncompliant\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n```", "```\n$ kubectl apply -f noncompliant-pod.yaml\nError from server ([repo-is-kuar-demo] container <nginx> has an invalid image\nrepo <nginx>, allowed repos are [\"gcr.io/kuar-demo/\"]): error when creating\n\"noncompliant-pod.yaml\": admission webhook \"validation.gatekeeper.sh\" denied\nthe request: [repo-is-kuar-demo] container <nginx> has an invalid image\nrepo <nginx>, allowed repos are [\"gcr.io/kuar-demo/\"]\n```", "```\n$ kubectl apply -f noncompliant-pod.yaml\nWarning: [repo-is-kuar-demo] container <nginx> has an invalid image repo...\npod/nginx-noncompliant created\n```", "```\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRepos\nmetadata:\n  name: repo-is-kuar-demo\nspec:\n  enforcementAction: dryrun\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n    namespaces:\n      - \"default\"\n  parameters:\n    repos:\n      - \"gcr.io/kuar-demo/\"\n```", "```\n$ kubectl apply -f allowedrepos-constraint-dryrun.yaml\nk8sallowedrepos.constraints.gatekeeper.sh/repo-is-kuar-demo configured\n```", "```\n$ kubectl apply -f noncompliant-pod.yaml\npod/nginx-noncompliant created\n```", "```\n$ kubectl get constraint repo-is-kuar-demo -o yaml\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRepos\n...\nspec:\n  enforcementAction: dryrun\n  match:\n    kinds:\n    - apiGroups:\n      - \"\"\n      kinds:\n      - Pod\n    namespaces:\n    - default\n  parameters:\n    repos:\n    - gcr.io/kuar-demo/\nstatus:\n  auditTimestamp: \"2021-07-14T20:05:38Z\"\n\t...\n  totalViolations: 1\n  violations:\n  - enforcementAction: dryrun\n    kind: Pod\n    message: container <nginx> has an invalid image repo <nginx>, allowed repos\n      are [\"gcr.io/kuar-demo/\"]\n    name: nginx-noncompliant\n    namespace: default\n```", "```\napiVersion: mutations.gatekeeper.sh/v1alpha1\nkind: Assign\nmetadata:\n  name: demo-image-pull-policy\nspec:\n  applyTo:\n  - groups: [\"\"]\n    kinds: [\"Pod\"]\n    versions: [\"v1\"]\n  match:\n    scope: Namespaced\n    kinds:\n    - apiGroups: [\"*\"]\n      kinds: [\"Pod\"]\n    excludedNamespaces: [\"system\"]\n  location: \"spec.containers[name:*].imagePullPolicy\"\n  parameters:\n    assign:\n      value: Always\n```", "```\n$ kubectl apply -f imagepullpolicyalways-mutation.yaml\nassign.mutations.gatekeeper.sh/demo-image-pull-policy created\n```", "```\n$ kubectl apply -f compliant-pod.yaml\npod/kuard created\n```", "```\n$ kubectl get pods kuard -o=jsonpath=\"{.spec.containers[0].imagePullPolicy}\" \nAlways\n```", "```\n$ kubectl delete -f compliant-pod.yaml\npod/kuard deleted\n```", "```\n$ kubectl delete -f imagepullpolicyalways-mutation.yaml\nassign.mutations.gatekeeper.sh/demo-image-pull-policy deleted\n```", "```\napiVersion: config.gatekeeper.sh/v1alpha1\nkind: Config\nmetadata:\n  name: config\n  namespace: \"gatekeeper-system\"\nspec:\n  sync:\n    syncOnly:\n      - group: \"\"\n        version: \"v1\"\n        kind: \"Namespace\"\n      - group: \"\"\n        version: \"v1\"\n        kind: \"Pod\"\n```", "```\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8suniqueingresshost\n  annotations:\n    description: Requires all Ingress hosts to be unique.\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sUniqueIngressHost\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8suniqueingresshost\n\n        identical(obj, review) {\n          obj.metadata.namespace == review.object.metadata.namespace\n          obj.metadata.name == review.object.metadata.name\n        }\n\n        violation[{\"msg\": msg}] {\n          input.review.kind.kind == \"Ingress\"\n          re_match(\"^(extensions|networking.k8s.io)$\", input.review.kind.group)\n          host := input.review.object.spec.rules[_].host\n          other := data.inventory.namespace[ns][otherapiversion][\"Ingress\"][name]\n          re_match(\"^(extensions|networking.k8s.io)/.+$\", otherapiversion)\n          other.spec.rules[_].host == host\n          not identical(other, input.review)\n          msg := sprintf(\"ingress host conflicts with an existing ingress <%v>\"...\n        }\n```"]