- en: Chapter 3\. Operators at the Kubernetes Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 操作员在 Kubernetes 接口中
- en: 'Operators extend two key Kubernetes concepts: *resources* and *controllers*.
    The Kubernetes API includes a mechanism, the CRD, for defining new resources.
    This chapter examines the Kubernetes objects Operators build on to add new capabilities
    to a cluster. It will help you understand how Operators fit into the Kubernetes
    architecture and why it is valuable to make an application a Kubernetes native.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员扩展了 Kubernetes 的两个关键概念：*资源* 和 *控制器*。Kubernetes API 包括一种机制，即 CRD，用于定义新资源。本章探讨了操作员建立在其中的
    Kubernetes 对象，以添加到集群中的新功能。它将帮助您了解操作员如何适应 Kubernetes 架构，并解释为何将应用程序变成 Kubernetes
    本地应用程序是有价值的。
- en: 'Standard Scaling: The ReplicaSet Resource'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准缩放：ReplicaSet 资源
- en: 'Looking at a standard resource, the ReplicaSet, gives a sense of how resources
    comprise the application management database at the heart of Kubernetes. Like
    any other resource in the Kubernetes API, the [ReplicaSet](https://oreil.ly/nW3ui)
    is a collection of API objects. The ReplicaSet primarily collects pod objects
    forming a list of the running replicas of an application. The specification of
    another object type defines the number of those replicas that should be maintained
    on the cluster. A third object spec points to a template for creating new pods
    when there are fewer running than desired. There are more objects collected in
    a ReplicaSet, but these three types define the basic state of a scalable set of
    pods running on the cluster. Here, we can see these three key pieces for the `staticweb`
    ReplicaSet from [Chapter 1](ch01.html#chapter_introduction) (the `Selector`, `Replicas`,
    and `Pod Template` fields):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 查看标准资源 ReplicaSet，可以了解到资源如何构成 Kubernetes 核心的应用管理数据库。与 Kubernetes API 中的任何其他资源一样，[ReplicaSet](https://oreil.ly/nW3ui)
    是 API 对象的集合。 ReplicaSet 主要收集形成应用程序运行副本列表的 Pod 对象。另一个对象类型的规范定义了集群上应保持的这些副本数量。第三个对象规范指向创建新
    Pod 的模板，当运行的 Pod 较少时。ReplicaSet 中还收集了更多对象，但这三种类型定义了集群上运行的可扩展 Pod 集的基本状态。在此，我们可以看到来自
    [第一章](ch01.html#chapter_introduction) 的 `staticweb` ReplicaSet 的这三个关键部分（`Selector`、`Replicas`
    和 `Pod Template` 字段）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A standard Kubernetes control plane component, the ReplicaSet controller, manages
    ReplicaSets and the pods belonging to them. The ReplicaSet controller creates
    ReplicaSets and continually monitors them. When the count of running pods doesn’t
    match the desired number in the `Replicas` field, the ReplicaSet controller starts
    or stops pods to make the actual state match the desired state.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 Kubernetes 控制平面组件 ReplicaSet 控制器管理 ReplicaSets 及其属于它们的 Pod。 ReplicaSet 控制器创建
    ReplicaSets 并持续监视它们。当运行的 Pod 数量与 `Replicas` 字段中期望的数量不匹配时，ReplicaSet 控制器启动或停止 Pod，以使实际状态与期望状态匹配。
- en: The actions the ReplicaSet controller takes are intentionally general and application
    agnostic. It starts new replicas according to the pod template, or deletes excess
    pods. It does not, should not, and truly cannot know the particulars of startup
    and shutdown sequences for every application that might run on a Kubernetes cluster.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ReplicaSet 控制器采取的操作是有意通用且应用程序无关的。它根据 Pod 模板启动新副本，或删除多余的 Pod。它不应知道每个可能在 Kubernetes
    集群上运行的应用程序的启动和关闭顺序的具体细节。
- en: An Operator is the application-specific combination of CRs and a custom controller
    that does know all the details about starting, scaling, recovering, and managing
    its application. The Operator’s *operand* is what we call the application, service,
    or whatever resources an Operator manages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员是应用程序特定的 CR 和自定义控制器的组合，它确实了解有关启动、缩放、恢复和管理其应用程序的所有细节。操作员的 *操作数* 是我们称之为应用程序、服务或操作员管理的任何资源。
- en: Custom Resources
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义资源
- en: CRs, as extensions of the Kubernetes API, contain one or more fields, like a
    native resource, but are not part of a default Kubernetes deployment. CRs hold
    structured data, and the API server provides a mechanism for reading and setting
    their fields as you would those in a native resource, by using `kubectl` or another
    API client. Users define a CR on a running cluster by providing a CR definition.
    A CRD is akin to a schema for a CR, defining the CR’s fields and the types of
    values those fields contain.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CR 作为 Kubernetes API 的扩展，包含一个或多个字段，就像本地资源一样，但不是默认的 Kubernetes 部署的一部分。CR 包含结构化数据，API
    服务器提供了一个机制，通过使用 `kubectl` 或另一个 API 客户端，读取和设置其字段，就像操作本地资源字段一样。用户通过提供 CR 定义在运行的集群上定义
    CR。CRD 类似于 CR 的架构，定义了 CR 的字段及其字段包含的值的类型。
- en: CR or ConfigMap?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CR 还是 ConfigMap？
- en: Kubernetes provides a standard resource, the [*ConfigMap*](https://oreil.ly/ba0uh),
    for making configuration data available to applications. ConfigMaps seem to overlap
    with the possible uses for CRs, but the two abstractions target different cases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了一个标准资源，[*ConfigMap*](https://oreil.ly/ba0uh)，用于使配置数据对应用程序可用。ConfigMaps
    似乎与 CRs 的可能用途重叠，但这两个抽象针对不同的情况。
- en: ConfigMaps are best at providing a configuration to a program running in a pod
    on the cluster—think of an application’s config file, like *httpd.conf* or MySQL’s
    *mysql.cnf*. Applications usually want to read such configuration from within
    their pod, as a file or the value of an environment variable, rather than from
    the Kubernetes API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMaps 最适合为在集群上的 pod 中运行的程序提供配置——想象一下应用程序的配置文件，比如 *httpd.conf* 或 MySQL 的
    *mysql.cnf*。应用程序通常希望从其 pod 中读取这种配置，作为文件或环境变量值的形式，而不是从 Kubernetes API 中读取。
- en: Kubernetes provides CRs to represent new collections of objects in the API.
    CRs are created and accessed by standard Kubernetes clients, like `kubectl`, and
    they obey Kubernetes conventions, like the resources `.spec` and `.status`. At
    their most useful, CRs are watched by custom controller code that in turn creates,
    updates, or deletes other cluster objects or even arbitrary resources outside
    of the cluster.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了 CRs 来表示 API 中的新对象集合。CRs 由标准 Kubernetes 客户端（如 `kubectl`）创建和访问，并遵循
    Kubernetes 的约定，如资源 `.spec` 和 `.status`。在其最有用的情况下，CRs 被自定义控制器代码监视，进而创建、更新或删除其他集群对象，甚至是集群外的任意资源。
- en: Custom Controllers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义控制器
- en: CRs are entries in the Kubernetes API database. They can be created, accessed,
    updated, and deleted with common `kubectl` commands—but a CR alone is merely a
    collection of data. To provide a declarative API for a specific application running
    on a cluster, you also need active code that captures the processes of managing
    that application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CRs 是 Kubernetes API 数据库中的条目。它们可以通过常见的 `kubectl` 命令创建、访问、更新和删除——但单独的 CR 只是一组数据。要为在集群上运行的特定应用程序提供声明性
    API，您还需要捕获管理该应用程序流程的活动代码。
- en: We’ve looked at a standard Kubernetes controller, the ReplicaSet controller.
    To make an Operator, providing an API for the active management of an application,
    you build an instance of the Controller pattern to control your application. This
    custom controller checks and maintains the application’s desired state, represented
    in the CR. Every Operator has one or more custom controllers implementing its
    application-specific management logic.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过一个标准的 Kubernetes 控制器，即 ReplicaSet 控制器。要创建一个操作员，为应用程序的主动管理提供 API，您需要构建控制器模式的实例来控制您的应用程序。此自定义控制器检查并维护应用程序的期望状态，以
    CR 中表示。每个操作员都有一个或多个自定义控制器，实现其特定于应用程序的管理逻辑。
- en: Operator Scopes
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作员范围
- en: A Kubernetes cluster is divided into *namespaces*. A namespace is the boundary
    for cluster object and resource names. Names must be unique within a single namespace,
    but not between namespaces. This makes it easier for multiple users or teams to
    share a single cluster. Resource limits and access controls can be applied per
    namespace. An Operator, in turn, can be limited to a namespace, or it can maintain
    its operand across an entire cluster.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 集群被划分为*命名空间*。命名空间是集群对象和资源名称的边界。在单个命名空间内名称必须唯一，但在不同命名空间之间可以重复。这使得多个用户或团队可以共享单个集群变得更容易。可以对每个命名空间应用资源限制和访问控制。一个操作员（Operator）可以被限制在一个命名空间中，或者可以在整个集群中维护其操作数。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For details about Kubernetes namespaces, see the [Kubernetes namespace documentation](https://oreil.ly/k4Okf).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Kubernetes 命名空间的详细信息，请参阅 [Kubernetes 命名空间文档](https://oreil.ly/k4Okf)。
- en: Namespace Scope
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间范围
- en: Usually, restricting your Operator to a single namespace makes sense and is
    more flexible for clusters used by multiple teams. An Operator scoped to a namespace
    can be upgraded independently of other instances, and this allows for some handy
    facilities. You can test upgrades in a testing namespace, for example, or serve
    older API or application versions from different namespaces for compatibility.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，将您的操作员限制在单个命名空间内是有意义的，并且对于多个团队使用的集群更加灵活。限定在命名空间中的操作员可以独立升级，这允许某些便利设施。例如，您可以在测试命名空间中测试升级，或者从不同的命名空间为兼容性提供旧的
    API 或应用程序版本。
- en: Cluster-Scoped Operators
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群范围的操作员（Cluster-Scoped Operators）
- en: There are some situations where it is desirable for an Operator to watch and
    manage an application or services throughout a cluster. For example, an Operator
    that manages a service mesh, such as [Istio](https://oreil.ly/jM5q2), or one that
    issues TLS certificates for application endpoints, like [`cert-manager`](https://oreil.ly/QT8tE),
    might be most effective when watching and acting on cluster-wide state.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，希望运算符能够监视和管理整个集群中的应用程序或服务。例如，管理服务网格（如 [Istio](https://oreil.ly/jM5q2)）或为应用程序端点发放
    TLS 证书（如 [`cert-manager`](https://oreil.ly/QT8tE)）的运算符，在监视并操作集群范围的状态时可能效果最佳。
- en: By default, the Operator SDK used in this book creates deployment and authorization
    templates that limit the Operator to a single namespace. It is possible to change
    most Operators to run in the cluster scope instead. Doing so requires changes
    in the Operator’s manifests to specify that it should watch all namespaces in
    a cluster and that it should run under the auspices of a ClusterRole and ClusterRoleBinding,
    rather than the namespaced Role and RoleBinding authorization objects. In the
    next section we give an overview of these concepts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，本书中使用的 Operator SDK 创建部署和授权模板，将运算符限制在单个命名空间内。可以将大多数运算符更改为在集群范围内运行。这需要在运算符的清单中进行更改，以指定它应监视集群中的所有命名空间，并且应在
    ClusterRole 和 ClusterRoleBinding 的授权对象的权力下运行，而不是命名空间角色和 RoleBinding。
- en: Authorization
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: Authorization—the power to do things on the cluster through the API—is defined
    in Kubernetes by one of a few available access control systems. Role-Based Access
    Control (RBAC) is the preferred and most tightly integrated of these. RBAC regulates
    access to system resources according to the *role* a system user performs. A role
    is a set of capabilities to take certain actions on particular API resources,
    such as *create*, *read*, *update*, or *delete*. The capabilities described by
    a role are granted, or bound, to a user by a RoleBinding.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，授权——通过 API 在集群上执行操作的权力——由几种可用的访问控制系统之一定义。基于角色的访问控制（RBAC）是这些中首选且最紧密集成的。RBAC
    根据系统用户执行的*角色*来调控对系统资源的访问。角色是一组能够在特定 API 资源上执行某些操作的能力，如*创建*、*读取*、*更新*或*删除*。角色描述的能力通过
    RoleBinding 赋予或绑定给用户。
- en: Service Accounts
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务账户
- en: In Kubernetes, regular human user accounts aren’t managed by the cluster, and
    there are no API resources depicting them. The user identifying you on the cluster
    comes from some outside provider, which can be anything from a list of users in
    a text file to an OpenID Connect (OIDC) provider proxying authentication through
    your Google account.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，常规的人类用户账户不由集群管理，也没有描述它们的 API 资源。在集群上标识你的用户来自外部提供者，可以是任何东西，从文本文件中的用户列表到通过你的
    Google 账户代理认证的 OpenID Connect（OIDC）提供者。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: See the [“Users in Kubernetes”](https://oreil.ly/WmdTq) documentation for more
    about Kubernetes service accounts.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[“Kubernetes 中的用户”](https://oreil.ly/WmdTq)文档，了解更多关于 Kubernetes 服务账户的信息。
- en: Service accounts, on the other hand, are managed by Kubernetes and can be created
    and manipulated through the Kubernetes API. A service account is a special type
    of cluster user for authorizing programs instead of people. An Operator is a program
    that uses the Kubernetes API, and most Operators should derive their access rights
    from a service account. Creating a service account is a standard step in deploying
    an Operator. The service account identifies the Operator, and the account’s role
    denotes the powers granted to the Operator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，服务账户由 Kubernetes 管理，并且可以通过 Kubernetes API 创建和操作。服务账户是一种特殊类型的集群用户，用于授权程序而不是人员。运算符是使用
    Kubernetes API 的程序，大多数运算符应该从服务账户派生其访问权限。在部署运算符时创建服务账户是标准步骤。服务账户标识运算符，账户的角色表示授予运算符的权限。
- en: Roles
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色
- en: 'Kubernetes RBAC denies permissions by default, so a role defines granted rights.
    A common “Hello World” example of a Kubernetes role looks something like this
    YAML excerpt:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes RBAC 默认拒绝权限，因此角色定义授予的权利。一个常见的 Kubernetes 角色的“Hello World”示例如下 YAML
    摘录：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_operators_at_the_kubernetes_interface_CO1-1)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_operators_at_the_kubernetes_interface_CO1-1)'
- en: The powers granted by this role are effective only on pods.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此角色授予的权限仅在 Pod 上有效。
- en: '[![2](assets/2.png)](#co_operators_at_the_kubernetes_interface_CO1-2)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_operators_at_the_kubernetes_interface_CO1-2)'
- en: This list permits specific operations on the allowed resources. The verbs comprising
    read-only access to pods are available to accounts bound with this role.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表允许在允许资源上执行特定操作。包含对只读访问Pod的动词可供绑定了该角色的账户使用。
- en: RoleBindings
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RoleBindings
- en: A RoleBinding ties a role to a list of one or more users. Those users are granted
    the permissions defined in the role referenced in the binding. A RoleBinding can
    reference only those roles in its own namespace. When deploying an Operator restricted
    to a namespace, a RoleBinding binds an appropriate role to a service account identifying
    the Operator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: RoleBinding将角色绑定到一个或多个用户列表。这些用户被授予绑定中引用角色定义的权限。RoleBinding只能引用其自身命名空间中的角色。当部署限制在命名空间内的操作员时，RoleBinding将适当的角色绑定到标识操作员的服务账户上。
- en: ClusterRoles and ClusterRoleBindings
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ClusterRoles和ClusterRoleBindings
- en: As discussed earlier, most Operators are confined to a namespace. Roles and
    RoleBindings are also restricted to a namespace. ClusterRoles and ClusterRoleBindings
    are their cluster-wide equivalents. A standard, namespaced RoleBinding can reference
    only roles in its namespace, or ClusterRoles defined for the entire cluster. When
    a RoleBinding references a ClusterRole, the rules declared in the ClusterRole
    apply to only those specified resources in the binding’s own namespace. In this
    way, a set of common roles can be defined once as ClusterRoles, but reused and
    granted to users in just a given namespace.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前文讨论的，大多数操作员限制在一个命名空间内。角色（Roles）和角色绑定（RoleBindings）也受限于命名空间。ClusterRoles和ClusterRoleBindings则是它们的集群范围等价物。标准的命名空间角色绑定只能引用其命名空间内的角色，或整个集群定义的ClusterRoles。当角色绑定引用ClusterRole时，ClusterRole声明的规则仅适用于绑定所在命名空间中指定的资源。通过这种方式，一组通用角色可以定义为ClusterRoles，但可以在特定命名空间中重复使用并授予用户。
- en: The ClusterRoleBinding grants capabilities to a user across the entire cluster,
    in all namespaces. Operators charged with cluster-wide responsibilities will often
    tie a ClusterRole to an Operator service account with a ClusterRoleBinding.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ClusterRoleBinding授予用户在整个集群中所有命名空间的能力。负责集群范围职责的操作员通常将ClusterRole绑定到操作员服务账户上，通过ClusterRoleBinding实现。
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Operators are Kubernetes extensions. We’ve outlined the Kubernetes components
    used to construct an Operator that knows how to manage the application in its
    charge. Because Operators build on core Kubernetes concepts, they can make applications
    meaningfully “Kubernetes native.” Aware of their environment, such applications
    are able to leverage not just the existing features but the design patterns of
    the platform in order to be more reliable and less needy. Because Operators politely
    extend Kubernetes, they can even manage parts and procedures of the platform itself,
    as seen throughout Red Hat’s OpenShift Kubernetes distribution.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员是Kubernetes的扩展。我们已经概述了用于构建知道如何管理其负责应用程序的操作员的Kubernetes组件。因为操作员建立在核心Kubernetes概念之上，它们可以使应用程序显著地“原生于Kubernetes”。了解其环境的这类应用程序能够利用平台的设计模式和现有功能，以提高可靠性和减少依赖性。因为操作员礼貌地扩展Kubernetes，它们甚至可以管理平台本身的部分和流程，正如在Red
    Hat的OpenShift Kubernetes发行版中所见。
