["```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: webapps.workloads.apps.acme.com  ![1](assets/1.png)\nspec:\n  group: workloads.apps.acme.com\n  names:  ![2](assets/2.png)\n    kind: WebApp\n    listKind: WebAppList\n    plural: webapps\n    singular: webapp\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        description: WebApp is the Schema for the webapps API\n        properties:\n          apiVersion:\n            description: 'APIVersion defines the versioned schema of this\n              representation of an object. Servers should convert recognized\n              schemas to the latest internal value, and may reject unrecognized\n              values.'\n            type: string\n          kind:\n            description: 'Kind is a string value representing the REST resource this\n              object represents. Servers may infer this from the endpoint the client\n              submits requests to. Cannot be updated. In CamelCase.'\n            type: string\n          metadata:\n            type: object\n          spec:\n            description: WebAppSpec defines the desired state of WebApp\n            properties:\n              deploymentTier: ![3](assets/3.png)\n                enum:\n                - dev\n                - stg\n                - prod\n                type: string\n              webAppHostname:\n                type: string\n              webAppImage:\n                type: string\n              webAppReplicas:  ![4](assets/4.png)\n                default: 2\n                type: integer\n            required:  ![5](assets/5.png)\n            - deploymentTier\n            - webAppHostname\n            - webAppImage\n            type: object\n          status:\n            description: WebAppStatus defines the observed state of WebApp\n            properties:\n              created:\n                type: boolean\n            type: object\n        type: object\n    served: true\n    storage: true\n```", "```\napiVersion: workloads.apps.acme.com/v1alpha1\nkind: WebApp\nmetadata:\n  name: webapp-sample\nspec:\n  webAppReplicas: 2  ![1](assets/1.png)\n  webAppImage: registry.acme.com/app/app:v1.4\n  webAppHostname: app.acme.com\n  deploymentTier: dev ![2](assets/2.png)\n```", "```\napiVersion: tenancy.acme.com/v1alapha1\nkind: AcmeNamespace\nmetadata:\n  name: team-x\nspec:\n  namespaceName: app-y  ![1](assets/1.png)\n  adminUsername: sam  ![2](assets/2.png)\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: namespace-admin\n  namespace: app-y\nrules:\n- apiGroups:\n  - \"*\"\n  resources:\n  - \"*\"\n  verbs:\n  - \"*\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: namespace-admin\n  namespace: app-y\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: namespace-admin\nsubjects:\n- kind: User\n  name: sam  ![1](assets/1.png)\n  namespace: app-y\n```", "```\n// api/v1alpha1/acmenamespace_types.go\n\n...\n\n// AcmeNamespaceSpec defines the desired state of AcmeNamespace\ntype AcmeNamespaceSpec struct {\n\n    // The name of the namespace\n    NamespaceName string `json:\"namespaceName\"`\n\n    // The username for the namespace admin\n    AdminUsername string `json:\"adminUsername\"`\n...\n```", "```\napiVersion: tenancy.acme.com/v1alapha1\nkind: AcmeNamespace\nmetadata:\n  name: team-x\nspec:\n  namespaceName: app-y\n  adminUsername: sam\n  deploymentTier: dev  ![1](assets/1.png)\n```", "```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: dev\nspec:\n  hard:\n    cpu: \"5\"\n    memory: 10Gi\n    pods: \"10\"\n```", "```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: prod\nspec:\n  hard:\n    cpu: \"500\"\n    memory: 200Gi\n    pods: \"100\"\n```", "```\n// controllers/acmenamespace_controller.go \npackage controllers\n\nimport (\n\t\"context\"\n\n\t\"github.com/go-logr/logr\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\n\ttenancyv1alpha1 \"github.com/lander2k2/namespace-operator/api/v1alpha1\"\n)\n\n...\n\nfunc (r *AcmeNamespaceReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n\tctx := context.Background()\n\tlog := r.Log.WithValues(\"acmenamespace\", req.NamespacedName)\n\n\tvar acmeNs tenancyv1alpha1.AcmeNamespace  ![1](assets/1.png)\n\tr.Get(ctx, req.NamespacedName, &acmeNs)  ![2](assets/2.png)\n\n\tnsName := acmeNs.Spec.NamespaceName\n\tadminUsername := acmeNs.Spec.AdminUsername\n\n\tns := &corev1.Namespace{  ![3](assets/3.png)\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: nsName,\n\t\t\tLabels: map[string]string{\n\t\t\t\t\"admin\": adminUsername,\n\t\t\t},\n\t\t},\n\t}\n\n\tif err := r.Create(ctx, ns); err != nil {  ![4](assets/4.png)\n\t\tlog.Error(err, \"unable to create namespace\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\treturn ctrl.Result{}, nil\n}\n...\n```", "```\n// controllers/acmenamespace_controller.go\n...\n\trole := &rbacv1.Role{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"namespace-admin\",\n\t\t\tNamespace: nsName,\n\t\t},\n\t\tRules: []rbacv1.PolicyRule{\n\t\t\t{\n\t\t\t\tAPIGroups: []string{\"*\"},\n\t\t\t\tResources: []string{\"*\"},\n\t\t\t\tVerbs:     []string{\"*\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tif err := r.Create(ctx, role); err != nil {\n\t\tlog.Error(err, \"unable to create namespace-admin role\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\tbinding := &rbacv1.RoleBinding{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"namespace-admin\",\n\t\t\tNamespace: nsName,\n\t\t},\n\t\tRoleRef: rbacv1.RoleRef{\n\t\t\tAPIGroup: \"rbac.authorization.k8s.io\",\n\t\t\tKind:     \"Role\",\n\t\t\tName:     \"namespace-admin\",\n\t\t},\n\t\tSubjects: []rbacv1.Subject{\n\t\t\t{\n\t\t\t\tKind:      \"User\",\n\t\t\t\tName:      adminUsername,\n\t\t\t\tNamespace: nsName,\n\t\t\t},\n\t\t},\n\t}\n\n\tif err := r.Create(ctx, binding); err != nil {\n\t\tlog.Error(err, \"unable to create namespace-admin role binding\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\treturn ctrl.Result{}, nil\n}\n...\n```", "```\n// api/v1alpha1/acmenamespace_types.go\n\n// AcmeNamespaceStatus defines the observed state of AcmeNamespace\ntype AcmeNamespaceStatus struct {\n\n\t// Tracks the phase of the AcmeNamespace\n\t// +optional\n\t// +kubebuilder:validation:Enum=CreationInProgress;Created\n\tPhase string `json:\"phase\"`\n}\n\n// +kubebuilder:object:root=true\n// +kubebuilder:subresource:status\n...\n```", "```\n// controllers/acmenamespace_controller.go\n...\n\nconst (\n\tstatusCreated    = \"Created\"\n\tstatusInProgress = \"CreationInProgress\"\n)\n\n...\n\nfunc (r *AcmeNamespaceReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n\t...\n\n\tswitch acmeNs.Status.Phase {\n\tcase statusCreated:\n\t\t// do nothing\n\t\tlog.Info(\"AcmeNamespace child resources have been created\")\n\tcase statusInProgress:\n\t\t// TODO: query and create as needed\n\t\tlog.Info(\"AcmeNamespace child resource creation in progress\")\n\tdefault:\n\t\tlog.Info(\"AcmeNamespace child resources not created\")\n\n\t\t// set status to statusInProgress\n\t\tacmeNs.Status.Phase = statusInProgress\n\t\tif err := r.Status().Update(ctx, &acmeNs); err != nil {\n\t\t\tlog.Error(err, \"unable to update AcmeNamespace status\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\t// create namespace, role and role binding\n\t\t...\n\n\t\t// set status to statusCreated\n\t\tacmeNs.Status.Phase = statusCreated\n\t\tif err := r.Status().Update(ctx, &acmeNs); err != nil {\n\t\t\tlog.Error(err, \"unable to update AcmeNamespace status\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t}\n\n\treturn ctrl.Result{}, nil\n}\n\n...\n```", "```\n// api/v1alpha1/acmenamespace_types.go package v1alpha1\n\nimport (\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\n\n// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN! \n// NOTE: json tags are required.  Any new fields you add must have json tags // for the fields to be serialized. \n// AcmeNamespaceSpec defines the desired state of AcmeNamespace type AcmeNamespaceSpec struct {\n\n\t// The name of the namespace \tNamespaceName string `json:\"namespaceName\"`\n\n\t// The username for the namespace admin \tAdminUsername string `json:\"adminUsername\"`\n}\n\n// AcmeNamespaceStatus defines the observed state of AcmeNamespace type AcmeNamespaceStatus struct {\n\n\t// Tracks the phase of the AcmeNamespace \t// +optional \t// +kubebuilder:validation:Enum=CreationInProgress;Created \tPhase string `json:\"phase\"`\n}\n\n// +kubebuilder:resource:scope=Cluster ![1](assets/1.png)\n// +kubebuilder:object:root=true // +kubebuilder:subresource:status \n// AcmeNamespace is the Schema for the acmenamespaces API type AcmeNamespace struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   AcmeNamespaceSpec   `json:\"spec,omitempty\"`\n\tStatus AcmeNamespaceStatus `json:\"status,omitempty\"`\n}\n\n// +kubebuilder:object:root=true \n// AcmeNamespaceList contains a list of AcmeNamespace type AcmeNamespaceList struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\tmetav1.ListMeta `json:\"metadata,omitempty\"`\n\tItems           []AcmeNamespace `json:\"items\"`\n}\n\nfunc init() {\n\tSchemeBuilder.Register(&AcmeNamespace{}, &AcmeNamespaceList{})\n```", "```\n---\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n  name: acmenamespaces.tenancy.acme.com\nspec:\n  group: tenancy.acme.com\n  names:\n    kind: AcmeNamespace\n    listKind: AcmeNamespaceList\n    plural: acmenamespaces\n    singular: acmenamespace\n  scope: Cluster  ![1](assets/1.png)\n  subresources:\n    status: {}\n  validation:\n    openAPIV3Schema:\n      description: AcmeNamespace is the Schema for the acmenamespaces API\n      properties:\n        apiVersion:\n          description: 'APIVersion defines the versioned schema of this\n            representation of an object. Servers should convert recognized\n            schemas to the latest internal value, and may reject unrecognized\n            values.'\n          type: string\n        kind:\n          description: 'Kind is a string value representing the REST resource this\n            object represents. Servers may infer this from the endpoint the client\n            submits requests to. Cannot be updated. In CamelCase.'\n          type: string\n        metadata:\n          type: object\n        spec:\n          description: AcmeNamespaceSpec defines the desired state of AcmeNamespace\n          properties:\n            adminUsername:\n              description: The username for the namespace admin\n              type: string\n            namespaceName:\n              description: The name of the namespace\n              type: string\n          required:\n          - adminUsername\n          - namespaceName\n          type: object\n        status:\n          description: 'AcmeNamespaceStatus defines the observed state of\n\t\t\tAcmeNamespace'\n          properties:\n            phase:\n              description: Tracks the phase of the AcmeNamespace\n              enum:\n              - CreationInProgress\n              - Created\n              type: string\n          type: object\n      type: object\n  version: v1alpha1\n  versions:\n  - name: v1alpha1\n    served: true\n    storage: true\nstatus:\n  acceptedNames:\n    kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n```", "```\nfunc (r *AcmeNamespaceReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n\tctx := context.Background()\n\tlog := r.Log.WithValues(\"acmenamespace\", req.NamespacedName)\n\n\tvar acmeNs tenancyv1alpha1.AcmeNamespace\n\tif err := r.Get(ctx, req.NamespacedName, &acmeNs); err != nil {\n\t\tif apierrs.IsNotFound(err) {  ![1](assets/1.png)\n\t\t\tlog.Info(\"resource deleted\")\n\t\t\treturn ctrl.Result{}, nil\n\t\t} else {\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t}\n\n\tnsName := acmeNs.Spec.NamespaceName\n\tadminUsername := acmeNs.Spec.AdminUsername\n\n\tswitch acmeNs.Status.Phase {\n\tcase statusCreated:\n\t\t// do nothing \t\tlog.Info(\"AcmeNamespace child resources have been created\")\n\tcase statusInProgress:\n\t\t// TODO: query and create as needed \t\tlog.Info(\"AcmeNamespace child resource creation in progress\")\n\tdefault:\n\t\tlog.Info(\"AcmeNamespace child resources not created\")\n\n\t\t// set status to statusInProgress \t\tacmeNs.Status.Phase = statusInProgress\n\t\tif err := r.Status().Update(ctx, &acmeNs); err != nil {\n\t\t\tlog.Error(err, \"unable to update AcmeNamespace status\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\tns := &corev1.Namespace{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tName: nsName,\n\t\t\t\tLabels: map[string]string{\n\t\t\t\t\t\"admin\": adminUsername,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// set owner reference for the namespace ![2](assets/2.png)\n\t\terr := ctrl.SetControllerReference(&acmeNs, ns, r.Scheme)\n        if err != nil {\n\t\t\tlog.Error(err, \"unable to set owner reference on namespace\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\tif err := r.Create(ctx, ns); err != nil {\n\t\t\tlog.Error(err, \"unable to create namespace\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\trole := &rbacv1.Role{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tName:      \"namespace-admin\",\n\t\t\t\tNamespace: nsName,\n\t\t\t},\n\t\t\tRules: []rbacv1.PolicyRule{\n\t\t\t\t{\n\t\t\t\t\tAPIGroups: []string{\"*\"},\n\t\t\t\t\tResources: []string{\"*\"},\n\t\t\t\t\tVerbs:     []string{\"*\"},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// set owner reference for the role ![3](assets/3.png)\n\t\terr = ctrl.SetControllerReference(&acmeNs, role, r.Scheme)\n        if err != nil {\n\t\t\tlog.Error(err, \"unable to set owner reference on role\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\tif err := r.Create(ctx, role); err != nil {\n\t\t\tlog.Error(err, \"unable to create namespace-admin role\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\tbinding := &rbacv1.RoleBinding{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tName:      \"namespace-admin\",\n\t\t\t\tNamespace: nsName,\n\t\t\t},\n\t\t\tRoleRef: rbacv1.RoleRef{\n\t\t\t\tAPIGroup: \"rbac.authorization.k8s.io\",\n\t\t\t\tKind:     \"Role\",\n\t\t\t\tName:     \"namespace-admin\",\n\t\t\t},\n\t\t\tSubjects: []rbacv1.Subject{\n\t\t\t\t{\n\t\t\t\t\tKind:      \"User\",\n\t\t\t\t\tName:      adminUsername,\n\t\t\t\t\tNamespace: nsName,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// set owner reference for the role binding ![4](assets/4.png)\n\t\terr = ctrl.SetControllerReference(&acmeNs, binding, r.Scheme);\n        if err != nil {\n\t\t\tlog.Error(err, \"unable to set reference on role binding\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\tif err := r.Create(ctx, binding); err != nil {\n\t\t\tlog.Error(err, \"unable to create role binding\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\n\t\t// set status to statusCreated \t\tacmeNs.Status.Phase = statusCreated\n\t\tif err := r.Status().Update(ctx, &acmeNs); err != nil {\n\t\t\tlog.Error(err, \"unable to update AcmeNamespace status\")\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t}\n\n\treturn ctrl.Result{}, nil\n}\n...\n```", "```\napiVersion: tenancy.acme.com/v1alapha1\nkind: AcmeNamespace\nmetadata:\n  name: team-x\n  finalizers:\n  - namespace.finalizer.tenancy.acme.com  ![1](assets/1.png)\nspec:\n  namespaceName: app-y\n  adminUsername: sam\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: scheduler-policy-config\n  namespace: kube-system\ndata:\n  policy.cfg: |+  ![1](assets/1.png)\n    apiVersion: v1\n    kind: Policy\n    predicates:\n    - name: \"PodMatchNodeSelector\" ![2](assets/2.png)\n      argument:\n        labelsPresence:\n          labels:\n          - \"selectable\" ![3](assets/3.png)\n          presence: true ![4](assets/4.png)\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: terminator\nspec:\n  containers:\n  - image: registry.acme.com/skynet/t1000:v1\n    name: terminator\n  nodeSelector:\n    device: gpu\n```"]