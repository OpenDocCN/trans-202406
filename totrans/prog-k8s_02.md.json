["```\n$ kubectl -n kube-system get deploy/coredns -o=yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: coredns\n  namespace: kube-system\n  ...\nspec:\n  template:\n    spec:\n      containers:\n      - name: coredns\n        image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns:v1.2.2\n  ...\nstatus:\n  replicas: 2\n  conditions:\n  - type: Available\n    status: \"True\"\n    lastUpdateTime: \"2019-04-01T16:42:10Z\"\n  ...\n```", "```\n$ kubectl proxy --port=8080\nStarting to serve on 127.0.0.1:8080\n```", "```\n$ curl http://127.0.0.1:8080/apis/batch/v1\n{\n  \"kind\": \"APIResourceList\",\n  \"apiVersion\": \"v1\",\n  \"groupVersion\": \"batch/v1\",\n  \"resources\": [\n    {\n      \"name\": \"jobs\",\n      \"singularName\": \"\",\n      \"namespaced\": true,\n      \"kind\": \"Job\",\n      \"verbs\": [\n        \"create\",\n        \"delete\",\n        \"deletecollection\",\n        \"get\",\n        \"list\",\n        \"patch\",\n        \"update\",\n        \"watch\"\n      ],\n      \"categories\": [\n        \"all\"\n      ]\n    },\n    {\n      \"name\": \"jobs/status\",\n      \"singularName\": \"\",\n      \"namespaced\": true,\n      \"kind\": \"Job\",\n      \"verbs\": [\n        \"get\",\n        \"patch\",\n        \"update\"\n      ]\n    }\n  ]\n}\n```", "```\n$ curl http://127.0.0.1:8080/apis/batch/v1beta1\n{\n  \"kind\": \"APIResourceList\",\n  \"apiVersion\": \"v1\",\n  \"groupVersion\": \"batch/v1beta1\",\n  \"resources\": [\n    {\n      \"name\": \"cronjobs\",\n      \"singularName\": \"\",\n      \"namespaced\": true,\n      \"kind\": \"CronJob\",\n      \"verbs\": [\n        \"create\",\n        \"delete\",\n        \"deletecollection\",\n        \"get\",\n        \"list\",\n        \"patch\",\n        \"update\",\n        \"watch\"\n      ],\n      \"shortNames\": [\n        \"cj\"\n      ],\n      \"categories\": [\n        \"all\"\n      ]\n    },\n    {\n      \"name\": \"cronjobs/status\",\n      \"singularName\": \"\",\n      \"namespaced\": true,\n      \"kind\": \"CronJob\",\n      \"verbs\": [\n        \"get\",\n        \"patch\",\n        \"update\"\n      ]\n    }\n  ]\n}\n```", "```\n$ kubectl api-resources\nNAME                   SHORTNAMES APIGROUP NAMESPACED   KIND\nbindings                                   true Binding\ncomponentstatuses      cs                  false ComponentStatus\nconfigmaps             cm                  true ConfigMap\nendpoints              ep                  true Endpoints\nevents                 ev                  true Event\nlimitranges            limits              true LimitRange\nnamespaces             ns                  false Namespace\nnodes                  no                  false Node\npersistentvolumeclaims pvc                 true PersistentVolumeClaim\npersistentvolumes      pv                  false PersistentVolume\npods                   po                  true Pod\npodtemplates                               true PodTemplate\nreplicationcontrollers rc                  true ReplicationController\nresourcequotas         quota               true ResourceQuota\nsecrets                                    true Secret\nserviceaccounts        sa                  true ServiceAccount\nservices               svc                 true Service\ncontrollerrevisions               apps     true ControllerRevision\ndaemonsets             ds         apps     true DaemonSet\ndeployments            deploy     apps     true Deployment\n...\n```", "```\n$ kubectl api-versions\nadmissionregistration.k8s.io/v1beta1\napiextensions.k8s.io/v1beta1\napiregistration.k8s.io/v1\napiregistration.k8s.io/v1beta1\nappmesh.k8s.aws/v1alpha1\nappmesh.k8s.aws/v1beta1\napps/v1\napps/v1beta1\napps/v1beta2\nauthentication.k8s.io/v1\nauthentication.k8s.io/v1beta1\nauthorization.k8s.io/v1\nauthorization.k8s.io/v1beta1\nautoscaling/v1\nautoscaling/v2beta1\nautoscaling/v2beta2\nbatch/v1\nbatch/v1beta1\ncertificates.k8s.io/v1beta1\ncoordination.k8s.io/v1beta1\ncrd.k8s.amazonaws.com/v1alpha1\nevents.k8s.io/v1beta1\nextensions/v1beta1\nnetworking.k8s.io/v1\npolicy/v1beta1\nrbac.authorization.k8s.io/v1\nrbac.authorization.k8s.io/v1beta1\nscheduling.k8s.io/v1beta1\nstorage.k8s.io/v1\nstorage.k8s.io/v1beta1\nv1\n```", "```\nfunc DefaultBuildHandlerChain(apiHandler http.Handler, c *Config) http.Handler {\n    h := WithAuthorization(apiHandler, c.Authorization.Authorizer, c.Serializer)\n    h = WithMaxInFlightLimit(h, c.MaxRequestsInFlight,\n          c.MaxMutatingRequestsInFlight, c.LongRunningFunc)\n    h = WithImpersonation(h, c.Authorization.Authorizer, c.Serializer)\n    h = WithAudit(h, c.AuditBackend, c.AuditPolicyChecker, LongRunningFunc)\n    ...\n    h = WithAuthentication(h, c.Authentication.Authenticator, failed, ...)\n    h = WithCORS(h, c.CorsAllowedOriginList, nil, nil, nil, \"true\")\n    h = WithTimeoutForNonLongRunningRequests(h, LongRunningFunc, RequestTimeout)\n    h = WithWaitGroup(h, c.LongRunningFunc, c.HandlerChainWaitGroup)\n    h = WithRequestInfo(h, c.RequestInfoResolver)\n    h = WithPanicRecovery(h)\n    return h\n}\n```"]