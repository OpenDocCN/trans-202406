- en: Chapter 21\. Troubleshooting Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Figuring out networking problems is just like any troubleshooting. Know your
    network, know how to use basic tools well, and be patient and systematic.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we learn how to use *ping*, FPing, Nmap, *httping*, *arping*,
    and *mtr* to test connectivity, map networks, find rogue services, test website
    performance, find duplicate IP addresses, and find routing bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnostic Hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you find yourself stuck with mysterious unlabeled Ethernet and phone cabling,
    get yourself an Ethernet/telephone cable test and tone tracker. There are many
    that cost under $100\. These come in two pieces: one emitter and one receiver.
    This goes fast with two people, one at each end of a cable. When you find both
    ends of a cable, label it and move on. You can do it alone, but it is faster with
    two people.'
  prefs: []
  type: TYPE_NORMAL
- en: Multimeters are useful for a lot of jobs, such as finding shorts and opens,
    testing for continuity and attenuation, determining whether a wire is terminated
    correctly, testing electric outlets, and testing computer power supplies and motherboards.
    [Adafruit](https://adafruit.com) is a great site to find excellent tutorials on
    using a multimeter and learning electronics.
  prefs: []
  type: TYPE_NORMAL
- en: Keep a few spare parts, if you can. Sometimes it is faster to swap out a network
    interface, cable, or switch to find a defective piece of hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 21.1 Testing Connectivity with ping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some services or hosts on your network are not accessible or have intermittent
    failures. You want to figure out if it is a hardware problem, a problem with name
    services, routing, or something else.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are debugging network problems, start close, and systematically work
    from closer to farther. This means physical distance and how many routers there
    are to cross. Start within your local LAN segment. Then proceed to your next LAN
    segment, if you have more than one, crossing a single router. Then to the next
    one two routers away, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with good old *ping* to test connectivity. First, ping *localhost*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop *ping* by pressing Ctrl-C. Pinging *localhost* first confirms that your
    network interface is up and operating. If you see “connect: Network is unreachable,”
    there is a problem with your network interface. Keep some spare USB network interfaces
    on hand to quickly learn if you have a defective interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have your network interface sorted, ping your hostname to test name
    resolution, and tell *ping* to stop after three pings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If it returns the correct IP address, your name resolution is set up correctly.
    If it returns a localhost address, like 127.0.1.1, or “Name or service not known,”
    something is haywire with your DNS configuration.
  prefs: []
  type: TYPE_NORMAL
- en: When your local DNS is fixed, ping one of your network hosts by hostname. If
    *ping* fails with “Destination Host Unreachable” try pinging its IP address. If
    that succeeds, check your DNS. If that fails with the same message, your hostname
    and address are incorrect, or the host is down.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you cannot reach any external IP addresses, your network interface is probably
    healthy and the problem is upstream: your Ethernet cable, wireless access point,
    or switch. “Network is unreachable” means your machine is not connected to the
    network.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re hunting down the source of intermittent outages, set *ping* to
    run for a length of time, like 500 pings, spaced 2 seconds apart, so you don’t
    overwhelm the host or your network, and output the results to a text file. The
    following example appends added information to the file, so you can stop and restart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, use *tee* to see the output and record it in a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On a multihomed host, use *ping -i interface-name* to specify which interface
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don’t block *echo-request*, *echo-reply*, *time-exceeded*, or *destination-unreachable*
    ping messages. Some admins block all ping messages at their firewalls, and this
    is a mistake because many network functions require at least these four ping messages
    to operate correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The *ping* command actually pings if you use the *-a* (audible) switch, though
    you will probably have to do a bit of setup to make it work. In olden times we
    had PC speakers built into computer cases, connected directly to the motherboard,
    and the kernel module that activated the case speaker automatically loaded at
    boot. You are probably familiar with the low-fi annoyings beeps emitted from this
    speaker, and perhaps you even ran some hacks to make it play music.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in these here modern times, case speakers are mostly gone, and laptops
    mostly do not have a motherboard beep anymore. But most PC motherboards still
    support them, and the modern beep speaker is a little thing ([Figure 21-1](#fig-net-trouble-1)).
    You will probably have to buy one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Beep speaker for computer motherboard.](Images/lcb2_2101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1\. Beep speaker for computer motherboard
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once you have your beep speaker, load the *pcspkr* kernel module, then confirm
    it is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try it out. Drop to a plain console with Ctrl-Alt-F2, or fire up an X terminal,
    and use the *echo* command to play the ASCII bell character. All examples are
    the same thing, different representations of the ASCII character code 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Or press Ctrl-G.
  prefs: []
  type: TYPE_NORMAL
- en: If you hear nothing in your graphical terminal, check its settings to enable
    sounds. *xfce4-terminal* and *gnome-terminal* both play the ASCII bell. *Konsole*
    supports using your choice of sound files for notifications, but it does not support
    the beep speaker.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 ping*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IANA list of ICMP parameters](https://oreil.ly/pWYWE)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21.2 Profiling Your Network with fping and nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to generate a list of all hosts and IP addresses on your network and
    probe for MAC addresses and open ports.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use *fping* and *nmap* to probe your LAN, and record the results.
  prefs: []
  type: TYPE_NORMAL
- en: '*fping* pings all the addresses in a range in sequence. This example pings
    a subnet once, reports which hosts are alive, queries DNS for the hostnames, and
    prints a summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To see the unfiltered output, omit the *2>1 | egrep -v “ICMP|xmt”* part. Any
    offline machines will not be found, so you could run this at different times to
    try to capture everything. *>> fping.txt* appends the new results for each run.
  prefs: []
  type: TYPE_NORMAL
- en: 'This *nmap* example performs a similar task, with less verbose output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'That is a rather indigestible lump, so insert a newline before each host and
    store the output in a new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you have nice groupings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Probe the hosts on your network for open ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: client2.net is running a DNS and web server. You can run the same probe from
    outside your firewall to see if they are visible outside of your network.
  prefs: []
  type: TYPE_NORMAL
- en: The second entry is interesting because it is a network printer running a whole
    mob of services. The printer documentation says they all have a purpose. The printer
    supports remote administration through a web control panel, so they could be disabled,
    if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Collect a list of hosts and their IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*nmap* has numerous options for probing networks. Do not probe other people’s
    networks without permission because it could be seen as a hostile act, probing
    for vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Running a port scan takes some time, but it is a good idea to do this regularly
    to see what is happening on your network. It is basic security to run only necessary
    services and to disable everything else.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 nmap*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://nmap.org*](https://nmap.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 fping*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://fping.org*](https://fping.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21.3 Finding Duplicate IP Addresses with arping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to search your network for duplicate IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This example searches your network for 192.168.1.91 and sends four pings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the MAC addresses are the same, so it found no duplicates. This is an
    example of *arping* finding duplicate IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Use *nmap* to identify the two machines with the same IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*arp* is the Address Resolution Protocol, matching IP addresses to MAC addresses.'
  prefs: []
  type: TYPE_NORMAL
- en: An advantage of using DHCP to dynamically assign IP addresses is less risk of
    creating duplicates than setting static IP addresses manually. You can assign
    static addresses with DHCP; see [Chapter 16](ch16.xhtml#cha-dns-dhcp).
  prefs: []
  type: TYPE_NORMAL
- en: '*arping* is useful to see if a host is up when *ping* does not find it. Some
    folks like to block *ping*, which is not a good thing to do because it is essential
    to network functionality. *arping* cannot be blocked without disabling the ability
    for network hosts to communicate with each other. *arp*, the Address Resolution
    Protocol, maintains a table of MAC addresses. When a network host sends a packet
    to another host, *arp* matches the IP address to the MAC address, and then the
    packet can be delivered.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see what it looks like when *arp* probes your network to update its
    address table, with a packet sniffer like *tcpdump*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 16](ch16.xhtml#cha-dns-dhcp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 arping*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21.4 Testing HTTP Throughput and Latency with httping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to test a website that you host to see if it loads in a reasonable
    length of time.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*httping* measures HTTP server throughput and latency. Its simplest invocation
    tests latency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This doesn’t tell you how long it takes pages to load, only how long it takes
    the server, in milliseconds, to respond to a HEAD request, which fetches only
    the page headers without the content. A GET (*-G*) request fetches the whole page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the *-r* switch to minimize DNS latency by resolving the hostname just
    once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If minimizing DNS latency makes a large difference, then you need to take a
    look at your nameservers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test an alternate port, such as 8080, by appending it to the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the *-s* switch to display return codes, such as 200 OK, which indicates
    a successful page load:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run multiple tests at different times of day to gather data that is representative
    of what your users are experiencing.
  prefs: []
  type: TYPE_NORMAL
- en: '*httping* is not a super-sophisticated tester that digs deeply into your site
    to identify bottlenecks. It is a quick, simple tool to give you an idea of your
    overall site performance, and to tell you if you need to dig deeper to diagnose
    performance problems.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[HTTP return codes](https://oreil.ly/pMvFV)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 httping*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[httping](https://oreil.ly/2ts3n)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21.5 Using mtr to Find Troublesome Routers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a site you are trying to access, and it is very slow or unreachable.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use *mtr* (My Traceroute) to see where your packets are going astray. This works
    better on networks that you control, because the internet is vast and routes change,
    but when you are having trouble reaching a site it will provide useful information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what wandering path takes us to *carlaschroder.com*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: m1login.net is my network’s internet gateway router. After that it is all the
    wild internet. Hop 13 could be a chokepoint, with 60% packet loss. Hop 13 could
    be part of a load-balancing cluster; note that hop 11 and hop 14 have the same
    domain name. If it is part of a cluster then the packet loss is not significant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ping the last hop, hs17.name.tools. The following example looks like everything
    is working fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If *mtr* reveals a problem, use *whois* to look up the domain owner and their
    contact information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*whois* also works for IP addresses. The *-H* switch disables the annoying
    legalese.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Capture *mtr* output in a file, with the date and time at the end of each entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Collect data over time by creating a cron job ([Recipe 3.7](ch03.xhtml#rec-scheduled-shutdowns-cron))
    to run the preceding *mtr* once per hour, and let it run for a day or two. Don’t
    forget to turn it off.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*mtr -wo LSRABW* limits the number of columns to make the example fit better
    on this page. *mtr -w* is wide format for reports.'
  prefs: []
  type: TYPE_NORMAL
- en: Save your records in case you need to report a problem; the *whois* examples
    show how to find who to contact.
  prefs: []
  type: TYPE_NORMAL
- en: '*mtr* generates a lot of traffic, so take care to not run it too frequently.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 mtr*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
