- en: 'Chapter 1\. Breaking the Surface: Dive In: A Quick Dip'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0001-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Java takes you to new places.** From its humble release to the public as
    the (wimpy) version 1.02, Java seduced programmers with its friendly syntax, object-oriented
    features, memory management, and best of all—the promise of portability. The lure
    of **write-once/run-anywhere** is just too strong. A devoted following exploded,
    as programmers fought against bugs, limitations, and, oh yeah, the fact that it
    was dog slow. But that was ages ago. If you’re just starting in Java, **you’re
    lucky**. Some of us had to walk five miles in the snow, uphill both ways (barefoot),
    to get even the most trivial application to work. But *you*, why, *you* get to
    ride the **sleeker, faster, easier-to-read-and-write** Java of today.'
  prefs: []
  type: TYPE_NORMAL
- en: The way Java works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The goal is to write one application (in this example, an interactive party
    invitation) and have it work on whatever device your friends have.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0002-01.png)'
  prefs: []
  type: TYPE_IMG
- en: What you’ll do in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**You’ll type a source code file, compile it using the javac compiler, and
    then run the compiled bytecode on a Java virtual machine.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0003-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '(Note: this is **NOT** meant to be a tutorial... you’ll be writing real code
    in a moment, but for now, we just want you to get a feel for how it all fits together.'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the code on this page isn’t quite real; don’t try to compile
    it .)
  prefs: []
  type: TYPE_NORMAL
- en: A very brief history of Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java was initially released (some would say “escaped”, on January 23, 1996\.
    It’s over 25 years old! In the first 25 years, Java as a language evolved, and
    the Java API grew enormously. The best estimate we have is that over 17 gazillion
    lines of Java code have been written in the last 25 years. As you spend time programming
    in Java, you will most certainly come across Java code that’s quite old, and some
    that’s much newer. Java is famous for its backward compatibility, so old code
    can run quite happily on new JVMs.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we’ll generally start off by using older coding styles (remember,
    you’re likely to encounter such code in the “real world”, and then we’ll introduce
    newer-style code.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar fashion, we will sometimes show you older classes in the Java API,
    and then show you newer alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0004-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Speed and memory usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Java was first released, it was slow. But soon after, the HotSpot VM was
    created, as were other performance enhancers. While it’s true that Java isn’t
    the fastest language out there, it’s considered to be a very fast language—almost
    as fast as languages like C and Rust, and ***much*** faster than most other languages
    out there.
  prefs: []
  type: TYPE_NORMAL
- en: Java has a magic super-power—the JVM. The Java Virtual Machine can optimize
    your code *while it’s running*, so it’s possible to create very fast applications
    without having to write specialized high-performance code.
  prefs: []
  type: TYPE_NORMAL
- en: But—full disclosure—compared to C and Rust, Java uses a lot of memory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Q: The naming conventions for Java’s versions are confusing. There was JDK
    1.0, and 1.2, 1.3, 1.4, then a jump to J2SE 5.0, then it changed to Java 6, Java
    7, and last time I checked, Java was up to Java 18\. What’s going on?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A:** The version numbers have varied a lot over the last 25+ years! We can
    ignore the letters (J2SE/SE) since these are not really used now. The numbers
    are a little more involved.'
  prefs: []
  type: TYPE_NORMAL
- en: Technically Java SE 5.0 was actually Java 1.5\. Same for 6 (1.6), 7 (1.7), and
    8 (1.8). In theory, Java is still on version 1.x because new versions are backward
    compatible, all the way back to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: However, it was a bit confusing having a version number that was different to
    the name everyone used, so the official version number from Java 9 onward is just
    the number, without the “1” prefix; i.e., Java 9 really is version 9, not version
    1.9.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we’ll use the common convention of 1.0–1.4, then from 5 onward
    we’ll drop the “1” prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Also, since Java 9 was released in September 2017, there’s been a release of
    Java every six months, each with a new “major” version number, so we moved very
    quickly from 9 to 18!
  prefs: []
  type: TYPE_NORMAL
- en: Code structure in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0007-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**In a source file, put a class.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**In a class, put methods.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**In a method, put statements.**'
  prefs: []
  type: TYPE_NORMAL
- en: What goes in a source file?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A source code file (with the *.java* extension) typically holds one class definition.
    The ***class*** represents a *piece* of your program, although a very tiny application
    might need just a single class. The class must go within a pair of curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0007-03.png)'
  prefs: []
  type: TYPE_IMG
- en: What goes in a class?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A class has one or more ***methods.*** In the Dog class, the ***bark*** method
    will hold instructions for how the Dog should bark. Your methods must be declared
    *inside* a class (in other words, within the curly braces of the class).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0007-04.png)'
  prefs: []
  type: TYPE_IMG
- en: What goes in a method?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the curly braces of a method, write your instructions for how that method
    should be performed. Method *code* is basically a set of statements, and for now
    you can think of a method kind of like a function or procedure.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0007-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Anatomy of a class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the JVM starts running, it looks for the class you give it at the command
    line. Then it starts looking for a specially written method that looks exactly
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, the JVM runs everything between the curly braces { } of your main method.
    Every Java application has to have at least one **class**, and at least one **main**
    method (not one main per *class*; just one main per *application*).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0008-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Don’t worry about memorizing anything right now... this chapter is just to get
    you started.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a class with a `main()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Java, everything goes in a **class**. You’ll type your source code file (with
    a *.java* extension), then compile it into a new class file (with a *.class* extension).
    When you run your program, you’re really running a class.
  prefs: []
  type: TYPE_NORMAL
- en: Running a program means telling the Java Virtual Machine (JVM) to “Load the
    `**MyFirstApp**` class, then start executing its `**main()**` method. Keep running
    ’til all the code in main is finished.”
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.xhtml#a_trip_to_objectville_classes_and_object), *A Trip
    to Objectville*, we go deeper into the whole *class* thing, but for now, the only
    question you need to ask is, ***how do I write Java code so that it will run?***
    And it all begins with **main()**.
  prefs: []
  type: TYPE_NORMAL
- en: The **main()** method is where your program starts running.
  prefs: []
  type: TYPE_NORMAL
- en: No matter how big your program is (in other words, no matter how many *classes*
    your program uses), there’s got to be a **main()** method to get the ball rolling.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0009-01.png)![image](Images/f0009-02.png)![image](Images/f0010-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tonight’s Talk: **The compiler and the JVM battle over the question, “Who’s
    more important?”**'
  prefs: []
  type: TYPE_NORMAL
- en: '| The Java Virtual Machine | The Compiler |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| What, are you kidding? ***HELLO***. I am Java. I’m the one who actually makes
    a program run. The compiler just gives you a file. That’s it. Just a file. You
    can print it out and use it for wallpaper, kindling, lining the bird cage, whatever,
    but the file doesn’t do anything unless I’m there to run it. |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | I don’t appreciate that tone. |'
  prefs: []
  type: TYPE_TB
- en: '| And that’s another thing, the compiler has no sense of humor. Then again,
    if you had to spend all day checking nitpicky little syntax violations... |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Excuse me, but without *me*, what exactly would you run? There’s a *reason*
    Java was designed to use a bytecode compiler, for your information. If Java were
    a purely interpreted language, where—at runtime—the virtual machine had to translate
    straight-from-a-text-editor source code, a Java program would run at a ludicrously
    glacial pace. |'
  prefs: []
  type: TYPE_TB
- en: '| I’m not saying you’re, like, *completely* useless. But really, what is it
    that you do? Seriously. I have no idea. A programmer could just write bytecode
    by hand, and I’d take it. You might be out of a job soon, buddy. |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Excuse me, but that’s quite an ignorant (not to mention *arrogant*) perspective.
    While it *is* true that­—*theoretically—*you can run any properly formatted bytecode
    even if it didn’t come out of a Java compiler, in practice that’s absurd. A programmer
    writing bytecode by hand is like painting pictures of your vacation instead of
    taking photos—sure, it’s an art, but most people prefer to use their time differently.
    And I would appreciate it if you would *not* refer to me as “buddy.” |'
  prefs: []
  type: TYPE_TB
- en: '| (I rest my case on the humor thing.) But you still didn’t answer my question,
    what *do* you actually do? |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Remember that Java is a strongly typed language, and that means I can’t
    allow variables to hold data of the wrong type. This is a crucial safety feature,
    and I’m able to stop the vast majority of violations before they ever get to you.
    And I also— |'
  prefs: []
  type: TYPE_TB
- en: '| But some still get through! I can throw ClassCastExceptions and sometimes
    I get people trying to put the wrong type of thing in an array that was declared
    to hold something else, and— |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Excuse me, but I wasn’t done. And yes, there *are* some datatype exceptions
    that can emerge at runtime, but some of those have to be allowed to support one
    of Java’s other important features—dynamic binding. At runtime, a Java program
    can include new objects that weren’t even *known* to the original programmer,
    so I have to allow a certain amount of flexibility. But my job is to stop anything
    that would never—*could* never—succeed at runtime. Usually I can tell when something
    won’t work, for example, if a programmer accidentally tried to use a Button object
    as a Socket connection, I would detect that and thus protect them from causing
    harm at runtime. |'
  prefs: []
  type: TYPE_TB
- en: '| OK. Sure. But what about *security*? Look at all the security stuff I do,
    and you’re like, what, checking for *semicolons*? Oooohhh big security risk! Thank
    goodness for you! |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Excuse me, but I am the first line of defense, as they say. The datatype
    violations I previously described could wreak havoc in a program if they were
    allowed to manifest. I am also the one who prevents access violations, such as
    code trying to invoke a private method, or change a method that—for security reasons—must
    never be changed. I stop people from touching code they’re not meant to see, including
    code trying to access another class’ critical data. It would take hours, perhaps
    days even, to describe the significance of my work. |'
  prefs: []
  type: TYPE_TB
- en: '| Whatever. I have to do that same stuff *too*, though, just to make sure nobody
    snuck in after you and changed the bytecode before running it. |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Of course, but as I indicated previously, if I didn’t prevent what amounts
    to perhaps 99% of the potential problems, you would grind to a halt. And it looks
    like we’re out of time, so we’ll have to revisit this in a later chat. |'
  prefs: []
  type: TYPE_TB
- en: '| Oh, you can count on it. *Buddy*. |  |'
  prefs: []
  type: TYPE_TB
- en: What can you say in the main method?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’re inside main (or *any* method), the fun begins. You can say all the
    normal things that you say in most programming languages to ***make the computer
    do something.***
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code can tell the JVM to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0012-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/1circlea.png) **do something**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statements:** declarations, assignments, method calls, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/1circleb.png) **do something again and again**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Loops:** *for* and *while*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/1circlec.png) **do something under this condition**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Branching:** *if/else* tests'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0013-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Looping and looping and...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java has a lot of looping constructs: while, do-while, and *for*, being the
    oldest. You’ll get the full loop scoop later in the book, but not right now. Let’s
    start with while.'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax (not to mention logic) is so simple you’re probably asleep already.
    As long as some condition is true, you do everything inside the loop *block*.
    The loop block is bounded by a pair of curly braces, so whatever you want to repeat
    needs to be inside that block.
  prefs: []
  type: TYPE_NORMAL
- en: The key to a loop is the *conditional test*. In Java, a conditional test is
    an expression that results in a *boolean* value­—in other words, something that
    is either ***true*** or ***false***.
  prefs: []
  type: TYPE_NORMAL
- en: If you say something like, “While *iceCreamInTheTub is true*, keep scooping,”
    you have a clear boolean test. There either *is* ice cream in the tub or there
    *isn’t*. But if you were to say, “While *Bob* keep scooping,” you don’t have a
    real test. To make that work, you’d have to change it to something like, “While
    Bob is snoring...” or “While Bob is *not* wearing plaid...”
  prefs: []
  type: TYPE_NORMAL
- en: Simple boolean tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can do a simple boolean test by checking the value of a variable, using
    a comparison operator like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**<** (less than)'
  prefs: []
  type: TYPE_NORMAL
- en: '**>** (greater than)'
  prefs: []
  type: TYPE_NORMAL
- en: '**==** (equality) (yes, that’s *two* equals signs)'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the difference between the *assignment* operator (a *single* equals sign)
    and the *equals* operator (*two* equals signs). Lots of programmers accidentally
    type `=` when they *want* `==`. (But not you.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Example of a while loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0014-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Conditional branching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Java, an *if* test is basically the same as the boolean test in a *while*
    loop—except instead of saying, “***while*** there’s still chocolate,” you’ll say,
    “***if*** there’s still chocolate...”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0015-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding code executes the line that prints “x must be 3” only if the condition
    (*x* is equal to 3) is true. Regardless of whether it’s true, though, the line
    that prints “This runs no matter what” will run. So depending on the value of
    *x*, either one statement or two will print out.
  prefs: []
  type: TYPE_NORMAL
- en: But we can add an *else* to the condition so that we can say something like,
    “*If* there’s still chocolate, keep coding, *else* (otherwise) get more chocolate,
    and then continue on...”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0015-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Coding a serious business application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0016-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s put all your new Java skills to good use with something practical. We
    need a class with a *main()*, an *int* and a *String* variable, a *while* loop,
    and an *if* test. A little more polish, and you’ll be building that business back-end
    in no time. But *before* you look at the code on this page, think for a moment
    about how *you* would code that classic children’s favorite, “10 green bottles.”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There’s still one little flaw in our code. It compiles and runs, but the output
    isn’t 100% perfect. See if you can spot the flaw and fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Monday morning at Bob’s Java-enabled house
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0017-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Bob’s alarm clock rings at 8:30 Monday morning, just like every other weekday.
    But Bob had a wild weekend and reaches for the SNOOZE button. And that’s when
    the action starts, and the Java-enabled appliances come to life...
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0017-02.png)'
  prefs: []
  type: TYPE_IMG
- en: First, the alarm clock sends a message to the coffee maker “Hey, the geek’s
    sleeping in again, delay the coffee 12 minutes.”
  prefs: []
  type: TYPE_NORMAL
- en: The coffee maker sends a message to the Motorola^(TM) toaster, “Hold the toast,
    Bob’s snoozing.”
  prefs: []
  type: TYPE_NORMAL
- en: The alarm clock then sends a message to Bob’s Android, “Call Bob’s 9 o’clock
    and tell him we’re running a little late.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0017-05.png)![image](Images/f0017-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, the alarm clock sends a message to Sam’s (Sam is the dog) wireless
    collar, with the too-familiar signal that means, “Get the paper, but don’t expect
    a walk.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0017-04.png)'
  prefs: []
  type: TYPE_IMG
- en: A few minutes later, the alarm goes off again. And *again* Bob hits SNOOZE and
    the appliances start chattering. Finally, the alarm rings a third time. But just
    as Bob reaches for the snooze button, the clock sends the “jump and bark” signal
    to Sam’s collar. Shocked to full consciousness, Bob rises, grateful that his Java
    skills, and spontaneous internet shopping purchases, have enhanced the daily routines
    of his life.
  prefs: []
  type: TYPE_NORMAL
- en: '***His toast is toasted.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***His coffee steams.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***His paper awaits.***'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0017-06.png)'
  prefs: []
  type: TYPE_IMG
- en: Just another wonderful morning in ***The Java-Enabled House***.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0018-01.png)'
  prefs: []
  type: TYPE_IMG
- en: OK, so the bottle song wasn’t *really* a serious business application. Still
    need something practical to show the boss? Check out the Phrase-O-Matic code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note: when you type this into an editor, let the code do its own word/line-wrapping!
    Never hit the return key when you’re typing a String (a thing between “quotes”
    or it won’t compile. So the hyphens you see on this page are real, and you can
    type them, but don’t hit the return key until AFTER you’ve closed a String.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Phrase-O-Matic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a nutshell, the program makes three lists of words, then randomly picks one
    word from each of the three lists, and prints out the result. Don’t worry if you
    don’t understand *exactly* what’s happening in each line. For goodness sake, you’ve
    got the whole book ahead of you, so relax. This is just a quick look from a 30,000-foot
    outside-the-box targeted leveraged paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.** The first step is to create three String arrays—the containers that
    will hold all the words. Declaring and creating an array is easy; here’s a small
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Each word is in quotes (as all good Strings must be) and separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.** For each of the three lists (arrays), the goal is to pick a random word,
    so we have to know how many words are in each list. If there are 14 words in a
    list, then we need a random number between 0 and 13 (Java arrays are zero-based,
    so the first word is at position 0, the second word position 1, and the last word
    is position 13 in a 14-element array). Quite handily, a Java array is more than
    happy to tell you its length. You just have to ask. In the pets array, we’d say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: and **x** would now hold the value 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**3.** We need three random numbers. Java ships out of the box with several
    ways to generate random numbers, including java.util.Random (we will see later
    why this class name is prefixed with java.util). The `**nextInt()**` method returns
    a random number between 0 and some-number-we-give-it, *not including* the number
    that we give it. So we’ll give it the number of elements (the array length) in
    the list we’re using. Then we assign each result to a new variable. We could just
    as easily have asked for a random number between 0 and 5, not including 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**4.** Now we get to build the phrase, by picking a word from each of the three
    lists and smooshing them together (also inserting spaces between words). We use
    the “`+`” operator, which *concatenates* (we prefer the more technical *smooshes*)
    the String objects together. To get an element from an array, you give the array
    the index number (position) of the thing you want by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**5.** Finally, we print the phrase to the command line and...voil...! *We’re
    in marketing*.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0020-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A working Java program is all scrambled up on the fridge. Can you rearrange
    the code snippets to make a working Java program that produces the output listed
    below? Some of the curly braces fell on the floor and they were too small to pick
    up, so feel free to add as many of those as you need!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0020-03a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0020-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr1.png) **Answers in [“Exercise Solutions”](#exercise_solutions).**'
  prefs: []
  type: TYPE_NORMAL
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0021-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile.
    If they won’t compile, how would you fix them?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Exercise Solutions”](#exercise_solutions).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0022-01.png)'
  prefs: []
  type: TYPE_IMG
- en: JavaCross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s give your right brain something to do.
  prefs: []
  type: TYPE_NORMAL
- en: It’s your standard crossword, but almost all of the solution words are from
    [Chapter 1](#breaking_the_surface_dive_in_a_quick_dip). Just to keep you awake,
    we also threw in a few (non-Java) words from the high-tech world.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0022-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Command line invoker
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Back again?
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Can’t go both ways
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Acronym for your laptop’s power
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Number variable type
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Acronym for a chip
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Say something
  prefs: []
  type: TYPE_NORMAL
- en: 18\. Quite a crew of characters
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Announce a new class or method
  prefs: []
  type: TYPE_NORMAL
- en: 21\. What’s a prompt good for?
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Not an integer (or _____ your boat)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Come back empty-handed
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Open house
  prefs: []
  type: TYPE_NORMAL
- en: 5\. ‘Things’ holders
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Until attitudes improve
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Source code consumer
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Can’t pin it down
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Department for programmers and operations
  prefs: []
  type: TYPE_NORMAL
- en: 15\. Shocking modifier
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Just gotta have one
  prefs: []
  type: TYPE_NORMAL
- en: 17\. How to get things done
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Bytecode consumer
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“JavaCross”](#javacross_left_parenthesisfrom_page_22_r).**'
  prefs: []
  type: TYPE_NORMAL
- en: Mixed Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: A short Java program is listed below. One block of the program is missing. Your
    challenge is to **match the candidate block of code** (on the left) **with the
    output** that you’d see if the block were inserted. Not all the lines of output
    will be used, and some of the lines of output might be used more than once. Draw
    lines connecting the candidate blocks of code with their matching command-line
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0023-01.png)![image](Images/f0023-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Match each candidate with one of the possible outputs
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Mixed Messages”](#mixed_messages_left_parenthesisfrom_200).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Pool Puzzle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0024-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You may **not** use the same snippet more than once,
    and you won’t need to use all the snippets. Your ***goal*** is to make a class
    that will compile and run and produce the output listed. Don’t be fooled—this
    one’s harder than it looks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Pool Puzzle”](#pool_puzzle_left_parenthesisfrom_page_24).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0024-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: Each snippet from the pool can be used only once!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0024-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Sharpen your pencil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“there are no Dumb Questions”](#there_are_no_dumb_questions))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Code Magnets”](#code_magnet-id000006))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0025-01.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“BE the Compiler”](#be_the_compiler-id001000))
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0025-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0025-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0025-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Pool Puzzle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Pool Puzzle”](#pool_puzzle-id001001))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0026-01.png)'
  prefs: []
  type: TYPE_IMG
- en: JavaCross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“JavaCross”](#javacross))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0026-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Mixed Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Mixed Messages”](#mixed_messages))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0026-03.png)![image](Images/f0026-04.png)'
  prefs: []
  type: TYPE_IMG
