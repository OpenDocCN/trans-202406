["```\nconst headers = ['Book', 'Author', 'Language', 'Published', 'Sales'];\n\nconst data = [\n  [\n    'A Tale of Two Cities', 'Charles Dickens',\n      'English', '1859', '200 million',\n  ],\n  [\n    'Le Petit Prince (The Little Prince)', 'Antoine de Saint-Exup√©ry',\n      'French', '1943', '150 million',\n  ],\n  [\n    \"Harry Potter and the Philosopher's Stone\", 'J. K. Rowling',\n      'English', '1997', '120 million',\n  ],\n  [\n    'And Then There Were None', 'Agatha Christie',\n      'English', '1939', '100 million',\n  ],\n  [\n    'Dream of the Red Chamber', 'Cao Xueqin',\n      'Chinese', '1791', '100 million',\n  ],\n  [\n    'The Hobbit', 'J. R. R. Tolkien',\n      'English', '1937', '100 million',\n  ],\n];\n```", "```\nclass Excel extends React.Component {\n  render() {\n    const headers = [];\n    for (const title of this.props.headers) {\n      headers.push(<th>{title}</th>);\n    }\n    return (\n      <table>\n        <thead>\n          <tr>{headers}</tr>\n        </thead>\n      </table>\n    );\n  }\n}\n```", "```\nReactDOM.render(\n  <Excel headers={headers} />,\n  document.getElementById('app'),\n);\n```", "```\nreturn (\n  <table>\n    <thead>\n      <tr>{headers}</tr>\n    </thead>\n  </table>\n);\n```", "```\nconst headers = [\n  <th>Book</th>,\n  <th>Author</th>,\n  // ...\n];\n```", "```\nclass Excel extends React.Component {\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            {this.props.headers.map(title => <th>{title}</th>)}\n          </tr>\n        </thead>\n      </table>\n    );\n  }\n}\n```", "```\n{\n  this.props.headers.map(\n    function(title) {\n      return <th>{title}</th>;\n    }\n  )\n}\n```", "```\n{\n  this.props.headers.map(\n    (title) => {\n      return <th>{title}</th>;\n    }\n  )\n}\n```", "```\n{this.props.headers.map((title) => {\n  return <th>{title}</th>;\n})}\n```", "```\nWarning: Each child in a list should have a unique \"key\" prop.\nCheck the render method of `Excel`.\n```", "```\n// before\nfor (const title of this.props.headers) {\n  headers.push(<th>{title}</th>);\n}\n\n// after - 03.03.table-th-loop-key.html\nfor (const idx in this.props.headers) {\n  const title = this.props.headers[idx];\n  headers.push(<th key={idx}>{title}</th>);\n}\n```", "```\n// before\n<tr>\n  {this.props.headers.map((title) => {\n    return <th>{title}</th>;\n  })}\n</tr>\n\n// after - 03.04.table-th-map-key.html\n<tr>\n  {this.props.headers.map((title, idx) => {\n    return <th key={idx}>{title}</th>;\n  })}\n</tr>\n```", "```\nconst data = [\n  [\n    'A Tale of Two Cities', 'Charles Dickens',\n      'English', '1859', '200 million',\n  ],\n  ....\n];\n```", "```\nReactDOM.render(\n  <Excel headers={headers} initialData={data} />,\n  document.getElementById('app'),\n);\n```", "```\nconstructor(props) {\n  super();\n  this.state = {data: props.initialData};\n}\n```", "```\n{this.state.data.map((row, idx) => (\n  <tr key={idx}>\n    {row.map((cell, idx) => (\n      <td key={idx}>{cell}</td>\n    ))}\n  </tr>\n))}\n```", "```\nclass Excel extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {data: props.initialData};\n  }\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            {this.props.headers.map((title, idx) => (\n              <th key={idx}>{title}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.data.map((row, idx) => (\n            <tr key={idx}>\n              {row.map((cell, idx) => (\n                <td key={idx}>{cell}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n```", "```\nExcel.propTypes = {\n  headers: PropTypes.arrayOf(PropTypes.string),\n  initialData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n};\n```", "```\n$ curl -L https://unpkg.com/prop-types/prop-types.js > ~/reactbook/react/prop-types.js\n\n```", "```\n<script src=\"react/react.js\"></script>\n<script src=\"react/react-dom.js\"></script>\n<script src=\"react/babel.js\"></script>\n<script src=\"react/prop-types.js\"></script>\n<script type=\"text/babel\">\n  class Excel extends React.Component {\n    /* ... */\n  }\n</script>\n```", "```\n// before\nconst headers = ['Book', 'Author', 'Language', 'Published', 'Sales'];\n// after\nconst headers = [0, 'Author', 'Language', 'Published', 'Sales'];\n```", "```\nWarning: Failed prop type: Invalid prop `headers[0]` of type `number` supplied to `Excel`, expected `string`.\n```", "```\n<thead onClick={this.sort}>\n```", "```\nclass Excel extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {data: props.initialData};\n    this.sort = this.sort.bind(this);\n  }\n  sort(e) {\n    // TODO: implement me\n  }\n  render() { /* ...*/}\n}\n```", "```\nconst column = e.target.cellIndex;\n```", "```\nfunction clone(o) {\n  return JSON.parse(JSON.stringify(o));\n}\n```", "```\n// copy the data\nconst data = clone(this.state.data);\n```", "```\ndata.sort((a, b) => {\n  if (a[column] === b[column]) {\n    return 0;\n  }\n  return a[column] > b[column] ? 1 : -1;\n});\n```", "```\nthis.setState({\n  data,\n});\n```", "```\nconstructor(props) {\n  super();\n  this.state = {\n    data: props.initialData,\n    sortby: null,\n    descending: false,\n  };\n  this.sort = this.sort.bind(this);\n}\n```", "```\nconst column = e.target.cellIndex;\nconst data = clone(this.state.data);\nconst descending = this.state.sortby === column && !this.state.descending;\n```", "```\ndata.sort((a, b) => {\n  if (a[column] === b[column]) {\n    return 0;\n  }\n  return descending\n    ? a[column] < b[column]\n      ? 1\n      : -1\n    : a[column] > b[column]\n      ? 1\n      : -1;\n});\n```", "```\nthis.setState({\n  data,\n  sortby: column,\n  descending,\n});\n```", "```\n{this.props.headers.map((title, idx) => {\n  if (this.state.sortby === idx) {\n    title += this.state.descending ? ' \\u2191' : ' \\u2193'\n  }\n  return <th key={idx}>{title}</th>\n})}\n```", "```\n<tbody onDoubleClick={this.showEditor}>\n```", "```\nshowEditor(e) {\n  this.setState({\n    edit: {\n      row: parseInt(e.target.parentNode.dataset.row, 10),\n      column: e.target.cellIndex,\n    },\n  });\n}\n```", "```\nconstructor(props) {\n  super();\n  this.state = {\n    data: props.initialData,\n    sortby: null,\n    descending: false,\n    edit: null, // {row: index, column: index}\n  };\n  this.sort = this.sort.bind(this);\n  this.showEditor = this.showEditor.bind(this);\n  this.save = this.save.bind(this);\n}\n```", "```\n<tbody onDoubleClick={this.showEditor}>\n  {this.state.data.map((row, rowidx) => (\n    <tr key={rowidx} data-row={rowidx}>\n      {row.map((cell, columnidx) => {\n\n        // TODO - turn `cell` into an input if the `columnidx`\n        // and the `rowidx` match the one being edited;\n        // otherwise, just show it as text\n\n        return <td key={columnidx}>{cell}</td>;\n      })}\n    </tr>\n  ))}\n</tbody>\n```", "```\nconst edit = this.state.edit;\n```", "```\nif (edit && edit.row === rowidx && edit.column === columnidx) {\n  // ...\n}\n```", "```\ncell = (\n  <form onSubmit={this.save}>\n    <input type=\"text\" defaultValue={cell} />\n  </form>\n);\n```", "```\nsave(e) {\n  e.preventDefault();\n  // ... do the save\n}\n```", "```\nconst input = e.target.firstChild;\n```", "```\nconst data = clone(this.state.data);\n```", "```\ndata[this.state.edit.row][this.state.edit.column] = input.value;\n```", "```\nthis.setState({\n  edit: null,\n  data,\n});\n```", "```\nconstructor(props) {\n  super();\n  const data = clone(props.initialData).map((row, idx) => {\n    row.push(idx);\n    return row;\n  });\n  this.state = {\n    data,\n    sortby: null,\n    descending: false,\n    edit: null, // {row: index, column: index}\n    search: false,\n  };\n\n  this.preSearchData = null;\n\n  this.sort = this.sort.bind(this);\n  this.showEditor = this.showEditor.bind(this);\n  this.save = this.save.bind(this);\n  this.toggleSearch = this.toggleSearch.bind(this);\n  this.search = this.search.bind(this);\n}\n```", "```\nconst data = clone(props.initialData).map((row, idx) =>\n  row.concat(idx),\n);\n```", "```\n  [\n    'A Tale of Two Cities', ..., 0\n  ],\n  [\n    'Le Petit Prince (The Little Prince)', ..., 1\n  ],\n  // ...\n```", "```\n{this.state.data.map((row, rowidx) => {\n  // the last piece of data in a row is the ID\n  const recordId = row[row.length - 1];\n  return (\n    <tr key={recordId} data-row={recordId}>\n      {row.map((cell, columnidx) => {\n        if (columnidx === this.props.headers.length) {\n          // do not show the record ID in the table UI\n          return;\n        }\n        const edit = this.state.edit;\n        if (\n          edit &&\n          edit.row === recordId &&\n          edit.column === columnidx\n        ) {\n          cell = (\n            <form onSubmit={this.save}>\n              <input type=\"text\" defaultValue={cell} />\n            </form>\n          );\n        }\n        return <td key={columnidx}>{cell}</td>;\n      })}\n    </tr>\n  );\n})}\n```", "```\n<div>\n  <button className=\"toolbar\" onClick={this.toggleSearch}>\n    {this.state.search ? 'Hide search' : 'Show search'}\n  </button>\n  <table>\n    {/* ... */}\n  </table>\n</div>\n```", "```\nconst searchRow = !this.state.search ? null : (\n  <tr onChange={this.search}>\n    {this.props.headers.map((_, idx) => (\n      <td key={idx}>\n        <input type=\"text\" data-idx={idx} />\n      </td>\n    ))}\n  </tr>\n);\n```", "```\n<tbody onDoubleClick={this.showEditor}>\n  {searchRow}\n  {this.state.data.map((row, rowidx) => (....\n```", "```\ntoggleSearch() {\n  if (this.state.search) {\n    this.setState({\n      data: this.preSearchData,\n      search: false,\n    });\n    this.preSearchData = null;\n  } else {\n    this.preSearchData = this.state.data;\n    this.setState({\n      search: true,\n    });\n  }\n}\n```", "```\nsearch(e) {\n  const needle = e.target.value.toLowerCase();\n  if (!needle) {\n    this.setState({data: this.preSearchData});\n    return;\n  }\n  const idx = e.target.dataset.idx;\n  const searchdata = this.preSearchData.filter((row) => {\n    return row[idx].toString().toLowerCase().indexOf(needle) > -1;\n  });\n  this.setState({data: searchdata});\n}\n```", "```\nconst needle = e.target.value.toLowerCase();\n```", "```\nif (!needle) {\n  this.setState({data: this.preSearchData});\n  return;\n}\n```", "```\nconst idx = e.target.dataset.idx;\nconst searchdata = this.preSearchData.filter((row) => {\n  return row[idx].toString().toLowerCase().indexOf(needle) > -1;\n});\nthis.setState({data: searchdata});\n```", "```\nsave(e) {\n  e.preventDefault();\n  const input = e.target.firstChild;\n  const data = clone(this.state.data).map((row) => {\n    if (row[row.length - 1] === this.state.edit.row) {\n      row[this.state.edit.column] = input.value;\n    }\n    return row;\n  });\n  this.logSetState({\n    edit: null,\n    data,\n  });\n  if (this.preSearchData) {\n    this.preSearchData[this.state.edit.row][this.state.edit.column] =\n      input.value;\n  }\n}\n```", "```\nthis.setState(...);\n```", "```\nthis.logSetState(...);\n```", "```\nconstructor(props) {\n  // ...\n\n  // log the initial state\n  this.log = [clone(this.state)];\n\n  // ...\n  this.replay = this.replay.bind(this);\n  this.logSetState = this.logSetState.bind(this);\n}\n```", "```\nlogSetState(newState) {\n  // remember the old state in a clone\n  this.log.push(clone(newState));\n  // now set it\n  this.setState(newState);\n}\n```", "```\ncomponentDidMount() {\n  document.addEventListener('keydown', e => {\n    if (e.altKey && e.shiftKey && e.keyCode === 82) {\n      // ALT+SHIFT+R(eplay)\n      this.replay();\n    }\n  });\n}\n```", "```\nreplay() {\n  if (this.log.length === 1) {\n    console.warn('No state changes to replay yet');\n    return;\n  }\n  let idx = -1;\n  const interval = setInterval(() => {\n    if (++idx === this.log.length - 1) {\n      // the end\n      clearInterval(interval);\n    }\n    this.setState(this.log[idx]);\n  }, 1000);\n}\n```", "```\nReactDOM.render(\n  React.createElement('h1', null, 'Hello world!'),\n  document.getElementById('app'),\n);\n```", "```\nconst interval = setInterval(() => {\n  // ...\n  console.log(Date.now());\n  // ...\n}, 1000);\n```", "```\nkeydownHandler(e) {\n  if (e.altKey && e.shiftKey && e.keyCode === 82) {\n    // ALT+SHIFT+R(eplay)\n    this.replay();\n  }\n}\n```", "```\ncomponentDidMount() {\n  document.addEventListener('keydown', this.keydownHandler);\n}\n```", "```\nthis.replayID = setInterval(() => {\n  if (++idx === this.log.length - 1) {\n    // the end\n    clearInterval(this.replayID);\n  }\n  this.setState(this.log[idx]);\n}, 1000);\n```", "```\nconstructor(props) {\n  // ...\n  this.replayID = null;\n\n  // ...\n  this.keydownHandler = this.keydownHandler.bind(this);\n}\n```", "```\ncomponentWillUnmount() {\n  document.removeEventListener('keydown', this.keydownHandler);\n  clearInterval(this.replayID);\n}\n```", "```\n<div className=\"toolbar\">\n  <button onClick={this.toggleSearch}>\n    {this.state.search ? 'Hide search' : 'Show search'}\n  </button>\n  <a href=\"data.json\" onClick={this.downloadJSON}>\n    Export JSON\n  </a>\n  <a href=\"data.csv\" onClick={this.downloadCSV}>\n    Export CSV\n  </a>\n</div>\n```", "```\ndownload(format, ev) {\n  // TODO: implement me\n}\n```", "```\nthis.downloadJSON = this.download.bind(this, 'json');\nthis.downloadCSV = this.download.bind(this, 'csv');\n```", "```\ndownload(format, ev) {\n  const data = clone(this.state.data).map(row => {\n    row.pop(); // drop the last column, the recordId\n    return row;\n  });\n  const contents =\n    format === 'json'\n      ? JSON.stringify(data, null, '  ')\n      : data.reduce((result, row) => {\n          return (\n            result +\n            row.reduce((rowcontent, cellcontent, idx) => {\n              const cell = cellcontent.replace(/\"/g, '\"\"');\n              const delimiter = idx < row.length - 1 ? ',' : '';\n              return `${rowcontent}\"${cellcontent}\"${delimiter}`;\n            }, '') +\n            '\\n'\n          );\n        }, '');\n\n  const URL = window.URL || window.webkitURL;\n  const blob = new Blob([contents], {type: 'text/' + format});\n  ev.target.href = URL.createObjectURL(blob);\n  ev.target.download = 'data.' + format;\n}\n```", "```\nReactDOM.render(\n  <Excel headers={headers} initialData={[]} />,\n  document.getElementById('app'),\n);\n```", "```\n{this.state.data.length === 0 ? (\n  <tbody>\n    <tr>\n      <td colSpan={this.props.headers.length}>\n        Loading data...\n      </td>\n    </tr>\n  </tbody>\n) : (\n  <tbody onDoubleClick={this.showEditor}>\n    {/* ... same as before ...*/}\n  </tbody>\n)}\n```", "```\ncomponentDidMount() {\n  document.addEventListener('keydown', this.keydownHandler);\n  fetch('https://www.phpied.com/files/reactbook/table-data.json')\n    .then((response) => response.json())\n    .then((initialData) => {\n      const data = clone(initialData).map((row, idx) => {\n        row.push(idx);\n        return row;\n      });\n      this.setState({data});\n    });\n}\n```"]