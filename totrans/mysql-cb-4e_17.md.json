["```\nmysql> `SELECT subject, age, sex, score FROM testscore ORDER BY subject;`\n+---------+-----+-----+-------+\n| subject | age | sex | score |\n+---------+-----+-----+-------+\n|       1 |   5 | M   |     5 |\n|       2 |   5 | M   |     4 |\n|       3 |   5 | F   |     6 |\n|       4 |   5 | F   |     7 |\n|       5 |   6 | M   |     8 |\n|       6 |   6 | M   |     9 |\n|       7 |   6 | F   |     4 |\n|       8 |   6 | F   |     6 |\n|       9 |   7 | M   |     8 |\n|      10 |   7 | M   |     6 |\n|      11 |   7 | F   |     9 |\n|      12 |   7 | F   |     7 |\n|      13 |   8 | M   |     9 |\n|      14 |   8 | M   |     6 |\n|      15 |   8 | F   |     7 |\n|      16 |   8 | F   |    10 |\n|      17 |   9 | M   |     9 |\n|      18 |   9 | M   |     7 |\n|      19 |   9 | F   |    10 |\n|      20 |   9 | F   |     9 |\n+---------+-----+-----+-------+\n```", "```\nmysql> `SELECT COUNT(score) AS n,`\n    -> `SUM(score) AS sum,`\n    -> `MIN(score) AS minimum,`\n    -> `MAX(score) AS maximum,`\n    -> `AVG(score) AS mean,`\n    -> `STDDEV_SAMP(score) AS 'std. dev.',`\n    -> `VAR_SAMP(score) AS 'variance'`\n    -> `FROM testscore;`\n+----+------+---------+---------+--------+-----------+----------+\n| n  | sum  | minimum | maximum | mean   | std. dev. | variance |\n+----+------+---------+---------+--------+-----------+----------+\n| 20 |  146 |       4 |      10 | 7.3000 |    1.8382 |   3.3789 |\n+----+------+---------+---------+--------+-----------+----------+\n```", "```\nSELECT AVG(score), STDDEV_SAMP(score) INTO @mean, @std FROM testscore;\nSELECT score FROM testscore WHERE ABS(score-@mean) > @std;\n```", "```\nmysql> `SELECT score, COUNT(score) AS frequency`\n    -> `FROM testscore GROUP BY score ORDER BY frequency DESC;`\n+-------+-----------+\n| score | frequency |\n+-------+-----------+\n|     9 |         5 |\n|     6 |         4 |\n|     7 |         4 |\n|     4 |         2 |\n|     8 |         2 |\n|    10 |         2 |\n|     5 |         1 |\n+-------+-----------+\n```", "```\nSELECT score FROM t ORDER BY score LIMIT 18,1;\n```", "```\nSELECT score FROM t ORDER BY score LIMIT 18,2;\n```", "```\nsub median\n{\nmy ($dbh, $db_name, $tbl_name, $col_name) = @_;\nmy ($count, $limit);\n\n  $db_name = $dbh->quote_identifier ($db_name);\n  $tbl_name = $dbh->quote_identifier ($tbl_name);\n  $col_name = $dbh->quote_identifier ($col_name);\n\n  $count = $dbh->selectrow_array (qq{\n SELECT COUNT($col_name) FROM $db_name.$tbl_name\n });\n  return undef unless $count > 0;\n  if ($count % 2 == 1)  # odd number of values; select middle value\n  {\n    $limit = sprintf (\"LIMIT %d,1\", ($count-1)/2);\n  }\n  else                  # even number of values; select middle two values\n  {\n    $limit = sprintf (\"LIMIT %d,2\", $count/2 - 1);\n  }\n\n  my $sth = $dbh->prepare (qq{\n SELECT $col_name FROM $db_name.$tbl_name ORDER BY $col_name $limit\n });\n  $sth->execute ();\n  my ($n, $sum) = (0, 0);\n  while (my $ref = $sth->fetchrow_arrayref ())\n  {\n    ++$n;\n    $sum += $ref->[0];\n  }\n  return $sum / $n;\n}\n```", "```\nif (@val == 0)          # array is empty, median is undefined\n{\n  $median = undef;\n}\nelsif (@val % 2 == 1)   # array size is odd, median is middle number\n{\n  $median = $val[(@val-1)/2];\n}\nelse                    # array size is even; median is average\n{                       # of two middle numbers\n  $median = ($val[@val/2 - 1] + $val[@val/2]) / 2;\n}\n```", "```\nmysql> `SELECT age, COUNT(score) AS n,`\n    -> `SUM(score) AS sum,`\n    -> `MIN(score) AS minimum,`\n    -> `MAX(score) AS maximum,`\n    -> `AVG(score) AS mean,`\n    -> `STDDEV_SAMP(score) AS 'std. dev.',`\n    -> `VAR_SAMP(score) AS 'variance'`\n    -> `FROM testscore`\n    -> `GROUP BY age;`\n+-----+---+------+---------+---------+--------+-----------+----------+\n| age | n | sum  | minimum | maximum | mean   | std. dev. | variance |\n+-----+---+------+---------+---------+--------+-----------+----------+\n|   5 | 4 |   22 |       4 |       7 | 5.5000 |    1.2910 |   1.6667 |\n|   6 | 4 |   27 |       4 |       9 | 6.7500 |    2.2174 |   4.9167 |\n|   7 | 4 |   30 |       6 |       9 | 7.5000 |    1.2910 |   1.6667 |\n|   8 | 4 |   32 |       6 |      10 | 8.0000 |    1.8257 |   3.3333 |\n|   9 | 4 |   35 |       7 |      10 | 8.7500 |    1.2583 |   1.5833 |\n+-----+---+------+---------+---------+--------+-----------+----------+\n```", "```\nmysql> `SELECT sex, COUNT(score) AS n,`\n    -> `SUM(score) AS sum,`\n    -> `MIN(score) AS minimum,`\n    -> `MAX(score) AS maximum,`\n    -> `AVG(score) AS mean,`\n    -> `STDDEV_SAMP(score) AS 'std. dev.',`\n    -> `VAR_SAMP(score) AS 'variance'`\n    -> `FROM testscore`\n    -> `GROUP BY sex;`\n+-----+----+------+---------+---------+--------+-----------+----------+\n| sex | n  | sum  | minimum | maximum | mean   | std. dev. | variance |\n+-----+----+------+---------+---------+--------+-----------+----------+\n| M   | 10 |   71 |       4 |       9 | 7.1000 |    1.7920 |   3.2111 |\n| F   | 10 |   75 |       4 |      10 | 7.5000 |    1.9579 |   3.8333 |\n+-----+----+------+---------+---------+--------+-----------+----------+\n```", "```\nmysql> `SELECT age, sex, COUNT(score) AS n,`\n    -> `SUM(score) AS sum,`\n    -> `MIN(score) AS minimum,`\n    -> `MAX(score) AS maximum,`\n    -> `AVG(score) AS mean,`\n    -> `STDDEV_SAMP(score) AS 'std. dev.',`\n    -> `VAR_SAMP(score) AS 'variance'`\n    -> `FROM testscore`\n    -> `GROUP BY age, sex;`\n+-----+-----+---+------+---------+---------+--------+-----------+----------+\n| age | sex | n | sum  | minimum | maximum | mean   | std. dev. | variance |\n+-----+-----+---+------+---------+---------+--------+-----------+----------+\n|   5 | M   | 2 |    9 |       4 |       5 | 4.5000 |    0.7071 |   0.5000 |\n|   5 | F   | 2 |   13 |       6 |       7 | 6.5000 |    0.7071 |   0.5000 |\n|   6 | M   | 2 |   17 |       8 |       9 | 8.5000 |    0.7071 |   0.5000 |\n|   6 | F   | 2 |   10 |       4 |       6 | 5.0000 |    1.4142 |   2.0000 |\n|   7 | M   | 2 |   14 |       6 |       8 | 7.0000 |    1.4142 |   2.0000 |\n|   7 | F   | 2 |   16 |       7 |       9 | 8.0000 |    1.4142 |   2.0000 |\n|   8 | M   | 2 |   15 |       6 |       9 | 7.5000 |    2.1213 |   4.5000 |\n|   8 | F   | 2 |   17 |       7 |      10 | 8.5000 |    2.1213 |   4.5000 |\n|   9 | M   | 2 |   16 |       7 |       9 | 8.0000 |    1.4142 |   2.0000 |\n|   9 | F   | 2 |   19 |       9 |      10 | 9.5000 |    0.7071 |   0.5000 |\n+-----+-----+---+------+---------+---------+--------+-----------+----------+\n```", "```\nmysql> `SELECT score, COUNT(score) AS counts`\n    -> `FROM testscore GROUP BY score;`\n+-------+--------+\n| score | counts |\n+-------+--------+\n|     4 |      2 |\n|     5 |      1 |\n|     6 |      4 |\n|     7 |      4 |\n|     8 |      2 |\n|     9 |      5 |\n|    10 |      2 |\n+-------+--------+\n```", "```\nmysql> `SET @n = (SELECT COUNT(score) FROM testscore);`\nmysql> `SELECT score, (COUNT(score)*100)/@n AS percent`\n    -> `FROM testscore GROUP BY score;`\n+-------+---------+\n| score | percent |\n+-------+---------+\n|     4 | 10.0000 |\n|     5 |  5.0000 |\n|     6 | 20.0000 |\n|     7 | 20.0000 |\n|     8 | 10.0000 |\n|     9 | 25.0000 |\n|    10 | 10.0000 |\n+-------+---------+\n```", "```\nmysql> `SELECT score, REPEAT('*',COUNT(score)) AS 'count histogram'`\n    -> `FROM testscore GROUP BY score;`\n+-------+-----------------+\n| score | count histogram |\n+-------+-----------------+\n|     4 | **              |\n|     5 | *               |\n|     6 | ****            |\n|     7 | ****            |\n|     8 | **              |\n|     9 | *****           |\n|    10 | **              |\n+-------+-----------------+\n```", "```\nmysql> `SET @n = (SELECT COUNT(score) FROM testscore);`\nmysql> `SELECT score,`\n    -> `REPEAT('*',(COUNT(score)*100)/@n) AS 'percent histogram'`\n    -> `FROM testscore GROUP BY score;`\n+-------+---------------------------+\n| score | percent histogram         |\n+-------+---------------------------+\n|     4 | **********                |\n|     5 | *****                     |\n|     6 | ********************      |\n|     7 | ********************      |\n|     8 | **********                |\n|     9 | ************************* |\n|    10 | **********                |\n+-------+---------------------------+\n```", "```\nmysql> `CREATE TABLE ref (score INT);`\nmysql> `INSERT INTO ref (score)`\n    -> `VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10);`\n```", "```\nmysql> `SELECT ref.score, COUNT(testscore.score) AS counts,`\n    -> `REPEAT('*',COUNT(testscore.score)) AS 'count histogram'`\n    -> `FROM ref LEFT JOIN testscore ON ref.score = testscore.score`\n    -> `GROUP BY ref.score;`\n+-------+--------+-----------+\n| score | counts | histogram |\n+-------+--------+-----------+\n|     0 |      0 |           |\n|     1 |      0 |           |\n|     2 |      0 |           |\n|     3 |      0 |           |\n|     4 |      2 | **        |\n|     5 |      1 | *         |\n|     6 |      4 | ****      |\n|     7 |      4 | ****      |\n|     8 |      2 | **        |\n|     9 |      5 | *****     |\n|    10 |      2 | **        |\n+-------+--------+-----------+\n```", "```\nmysql> `SET @n = (SELECT COUNT(score) FROM testscore);`\nmysql> `SELECT ref.score, (COUNT(testscore.score)*100)/@n AS percent,`\n    -> `REPEAT('*',(COUNT(testscore.score)*100)/@n) AS 'percent histogram'`\n    -> `FROM ref LEFT JOIN testscore ON ref.score = testscore.score`\n    -> `GROUP BY ref.score;`\n+-------+---------+---------------------------+\n| score | percent | percent histogram         |\n+-------+---------+---------------------------+\n|     0 |  0.0000 |                           |\n|     1 |  0.0000 |                           |\n|     2 |  0.0000 |                           |\n|     3 |  0.0000 |                           |\n|     4 | 10.0000 | **********                |\n|     5 |  5.0000 | *****                     |\n|     6 | 20.0000 | ********************      |\n|     7 | 20.0000 | ********************      |\n|     8 | 10.0000 | **********                |\n|     9 | 25.0000 | ************************* |\n|    10 | 10.0000 | **********                |\n+-------+---------+---------------------------+\n```", "```\nmysql> `SELECT subject, score FROM testscore_withmisses ORDER BY subject;`\n+---------+-------+\n| subject | score |\n+---------+-------+\n|       1 |    38 |\n|       2 |  NULL |\n|       3 |    47 |\n|       4 |  NULL |\n|       5 |    37 |\n|       6 |    45 |\n|       7 |    54 |\n|       8 |  NULL |\n|       9 |    40 |\n|      10 |    49 |\n+---------+-------+\n```", "```\nmysql> `SELECT COUNT(*) AS 'n (total)',`\n    -> `COUNT(score) AS 'n (nonmissing)',`\n    -> `COUNT(*) - COUNT(score) AS 'n (missing)',`\n    -> `((COUNT(*) - COUNT(score)) * 100) / COUNT(*) AS '% missing'`\n    -> `FROM testscore_withmisses;`\n+-----------+----------------+-------------+-----------+\n| n (total) | n (nonmissing) | n (missing) | % missing |\n+-----------+----------------+-------------+-----------+\n|        10 |              7 |           3 |   30.0000 |\n+-----------+----------------+-------------+-----------+\n```", "```\nmysql> `SELECT COUNT(*) AS 'n (total)',`\n    -> `COUNT(score) AS 'n (nonmissing)',`\n    -> `SUM(ISNULL(score)) AS 'n (missing)',`\n    -> `(SUM(ISNULL(score)) * 100) / COUNT(*) AS '% missing'`\n    -> `FROM testscore_withmisses;`\n+-----------+----------------+-------------+-----------+\n| n (total) | n (nonmissing) | n (missing) | % missing |\n+-----------+----------------+-------------+-----------+\n|        10 |              7 |           3 |   30.0000 |\n+-----------+----------------+-------------+-----------+\n```", "```\nmysql> `SELECT subject, A, B, score FROM testscore_withmisses2 ORDER BY subject;`\n+---------+------+------+-------+\n| subject | A    | B    | score |\n+---------+------+------+-------+\n|       1 |    1 |    1 |    18 |\n|       2 |    1 |    1 |  NULL |\n|       3 |    1 |    1 |    23 |\n|       4 |    1 |    1 |    24 |\n|       5 |    1 |    2 |    17 |\n|       6 |    1 |    2 |    23 |\n|       7 |    1 |    2 |    29 |\n|       8 |    1 |    2 |    32 |\n|       9 |    2 |    1 |    17 |\n|      10 |    2 |    1 |  NULL |\n|      11 |    2 |    1 |  NULL |\n|      12 |    2 |    1 |    25 |\n|      13 |    2 |    2 |  NULL |\n|      14 |    2 |    2 |    33 |\n|      15 |    2 |    2 |    34 |\n|      16 |    2 |    2 |    37 |\n+---------+------+------+-------+\n```", "```\nmysql> `SELECT A, B, COUNT(*) AS 'n (total)',`\n    -> `COUNT(score) AS 'n (nonmissing)',`\n    -> `COUNT(*) - COUNT(score) AS 'n (missing)',`\n    -> `((COUNT(*) - COUNT(score)) * 100) / COUNT(*) AS '% missing'`\n    -> `FROM testscore_withmisses2`\n    -> `GROUP BY A, B;`\n+------+------+-----------+----------------+-------------+-----------+\n| A    | B    | n (total) | n (nonmissing) | n (missing) | % missing |\n+------+------+-----------+----------------+-------------+-----------+\n|    1 |    1 |         4 |              3 |           1 |   25.0000 |\n|    1 |    2 |         4 |              4 |           0 |    0.0000 |\n|    2 |    1 |         4 |              2 |           2 |   50.0000 |\n|    2 |    2 |         4 |              3 |           1 |   25.0000 |\n+------+------+-----------+----------------+-------------+-----------+\n```", "```\nmysql> `SELECT age, score FROM testscore;`\n+-----+-------+\n| age | score |\n+-----+-------+\n|   5 |     5 |\n|   5 |     4 |\n|   5 |     6 |\n|   5 |     7 |\n|   6 |     8 |\n|   6 |     9 |\n|   6 |     4 |\n|   6 |     6 |\n|   7 |     8 |\n|   7 |     6 |\n|   7 |     9 |\n|   7 |     7 |\n|   8 |     9 |\n|   8 |     6 |\n|   8 |     7 |\n|   8 |    10 |\n|   9 |     9 |\n|   9 |     7 |\n|   9 |    10 |\n|   9 |     9 |\n+-----+-------+\n```", "```\n*`Y`* = *`bX`* + *`a`*\n```", "```\nmysql> `SELECT COUNT(score), AVG(age), SUM(age), SUM(age*age),` \n    -> `AVG(score), SUM(score), SUM(score*score), SUM(age*score)`\n    -> `INTO @n, @meanX, @sumX, @sumXX, @meanY, @sumY, @sumYY, @sumXY`\n    -> `FROM testscore;`\nQuery OK, 1 row affected (0,00 sec)\n\nmysql> `SELECT`\n    -> `@n AS N,`\n    -> `@meanX AS 'X mean',`\n    -> `@sumX AS 'X sum',`\n    -> `@sumXX AS 'X sum of squares',`\n    -> `@meanY AS 'Y mean',`\n    -> `@sumY AS 'Y sum',`\n    -> `@sumYY AS 'Y sum of squares',`\n    -> `@sumXY AS 'X*Y sum'`\n    -> `FROM testscore\\G`\n*************************** 1\\. row ***************************\n               N: 20\n          X mean: 7.000000000\n           X sum: 140\nX sum of squares: 1020\n          Y mean: 7.300000000\n           Y sum: 146\nY sum of squares: 1130\n         X*Y sum: 1053\n```", "```\nmysql> `SET @b := (@n*@sumXY - @sumX*@sumY) / (@n*@sumXX - @sumX*@sumX);`\nmysql> `SET @a := (@meanY - @b*@meanX);`\nmysql> `SELECT @b AS slope, @a AS intercept;`\n+-------------+----------------------+\n| slope       | intercept            |\n+-------------+----------------------+\n| 0.775000000 | 1.875000000000000000 |\n+-------------+----------------------+\n```", "```\nmysql> `SELECT CONCAT('Y = ',@b,'X + ',@a) AS 'least-squares regression';`\n+-----------------------------------------+\n| least-squares regression                |\n+-----------------------------------------+\n| Y = 0.775000000X + 1.875000000000000000 |\n+-----------------------------------------+\n```", "```\nmysql> `SELECT`\n    -> `(@n*@sumXY - @sumX*@sumY)`\n    -> `/ SQRT((@n*@sumXX - @sumX*@sumX) * (@n*@sumYY - @sumY*@sumY))`\n    -> `AS correlation;`\n+--------------------+\n| correlation        |\n+--------------------+\n| 0.6117362044219903 |\n+--------------------+\n```", "```\nmysql> `SELECT RAND(), RAND(), RAND();`\n+---------------------+--------------------+---------------------+\n| RAND()              | RAND()             | RAND()              |\n+---------------------+--------------------+---------------------+\n| 0.37415416573561183 | 0.9068914557871329 | 0.41199481246247405 |\n+---------------------+--------------------+---------------------+\n```", "```\nmysql> `SELECT i, RAND(), RAND(10), RAND(20) FROM numbers;`\n+------+---------------------+---------------------+---------------------+\n| i    | RAND()              | RAND(10)            | RAND(20)            |\n+------+---------------------+---------------------+---------------------+\n|    1 | 0.00708185882035816 |  0.6570515219653505 | 0.15888261251047497 |\n|    2 |  0.5417692908474889 | 0.12820613023657923 |  0.6355305003333189 |\n|    3 |  0.6876009085100152 |  0.6698761160204896 |  0.7010046948688149 |\n|    4 |  0.8126967007412544 |  0.9647622201263553 |  0.5984320040777623 |\n+------+---------------------+---------------------+---------------------+\nmysql> `SELECT i, RAND(), RAND(10), RAND(20) FROM numbers;`\n+------+----------------------+---------------------+---------------------+\n| i    | RAND()               | RAND(10)            | RAND(20)            |\n+------+----------------------+---------------------+---------------------+\n|    1 | 0.059957268703689115 |  0.6570515219653505 | 0.15888261251047497 |\n|    2 |   0.9068000166740269 | 0.12820613023657923 |  0.6355305003333189 |\n|    3 |  0.35412830799271194 |  0.6698761160204896 |  0.7010046948688149 |\n|    4 | 0.050241520675124156 |  0.9647622201263553 |  0.5984320040777623 |\n+------+----------------------+---------------------+---------------------+\n```", "```\nRAND(UNIX_TIMESTAMP())\nRAND(CONNECTION_ID())\nRAND(UNIX_TIMESTAMP()+CONNECTION_ID())\n```", "```\nPatrick\nPenelope\nPertinax\nPolly\n```", "```\nPatrick            .73\nPenelope           .37\nPertinax           .16\nPolly              .48\n```", "```\nPertinax           .16\nPenelope           .37\nPolly              .48\nPatrick            .73\n```", "```\nmysql> `SELECT name FROM rand_names ORDER BY RAND();`\n+----------+\n| name     |\n+----------+\n| Pertinax |\n| Patrick  |\n| Polly    |\n| Penelope |\n+----------+\nmysql> `SELECT name FROM rand_names ORDER BY RAND();`\n+----------+\n| name     |\n+----------+\n| Polly    |\n| Pertinax |\n| Penelope |\n| Patrick  |\n+----------+\n```", "```\n$sth = $dbh->exec (\"DROP TABLE IF EXISTS deck\");\n\n$sth = $dbh->exec (\"\n CREATE TABLE deck\n (\n face  ENUM('A', 'K', 'Q', 'J', '10', '9', '8',\n '7', '6', '5', '4', '3', '2') NOT NULL,\n suit  ENUM('hearts', 'diamonds', 'clubs', 'spades') NOT NULL\n )\n\");\n\n$face_array = array (\"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\",\n                     \"7\", \"6\", \"5\", \"4\", \"3\", \"2\");\n$suit_array = array (\"hearts\", \"diamonds\", \"clubs\", \"spades\");\n\n# insert a \"card\" into the deck for each combination of suit and face\n\n$sth = $dbh->prepare (\"INSERT INTO deck (face,suit) VALUES(?,?)\");\nforeach ($face_array as $face)\n  foreach ($suit_array as $suit)\n    $sth->execute (array ($face, $suit));\n```", "```\nSELECT face, suit FROM deck ORDER BY RAND();\n```", "```\nfunction shuffle_deck ($dbh)\n{\n  $sth = $dbh->query (\"SELECT face, suit FROM deck ORDER BY RAND()\");\n  $sth->setFetchMode (PDO::FETCH_OBJ);\n  return ($sth->fetchAll ());\n}\n```", "```\nCREATE TABLE die (n INT\\);\n```", "```\nmysql> `SELECT n FROM die ORDER BY RAND() LIMIT 1;`\n+------+\n| n    |\n+------+\n|    6 |\n+------+\nmysql> `SELECT n FROM die ORDER BY RAND() LIMIT 1;`\n+------+\n| n    |\n+------+\n|    4 |\n+------+\nmysql> `SELECT n FROM die ORDER BY RAND() LIMIT 1;`\n+------+\n| n    |\n+------+\n|    5 |\n+------+\nmysql> `SELECT n FROM die ORDER BY RAND() LIMIT 1;`\n+------+\n| n    |\n+------+\n|    4 |\n+------+\n```", "```\nSELECT * FROM drawing ORDER BY RAND() LIMIT 5;\n```", "```\nSET @id = FLOOR(RAND()**`n`*)+1;\nSELECT ... FROM *`tbl_name`* WHERE id = @id;\n```", "```\nmysql> `SELECT seq, city, miles FROM trip_log ORDER BY seq;`\n+-----+------------------+-------+\n| seq | city             | miles |\n+-----+------------------+-------+\n|   1 | San Antonio, TX  |     0 |\n|   2 | Dallas, TX       |   263 |\n|   3 | Benton, AR       |   566 |\n|   4 | Memphis, TN      |   745 |\n|   5 | Portageville, MO |   878 |\n|   6 | Champaign, IL    |  1164 |\n|   7 | Madison, WI      |  1412 |\n+-----+------------------+-------+\n```", "```\nmysql> `SELECT t1.seq AS seq1, t2.seq AS seq2,`\n    -> `t1.city AS city1, t2.city AS city2,`\n    -> `t1.miles AS miles1, t2.miles AS miles2,`\n    -> `t2.miles-t1.miles AS dist`\n    -> `FROM trip_log AS t1 INNER JOIN trip_log AS t2`\n    -> `ON t1.seq+1 = t2.seq`\n    -> `ORDER BY t1.seq;`\n+------+------+------------------+------------------+--------+--------+------+\n| seq1 | seq2 | city1            | city2            | miles1 | miles2 | dist |\n+------+------+------------------+------------------+--------+--------+------+\n|    1 |    2 | San Antonio, TX  | Dallas, TX       |      0 |    263 |  263 |\n|    2 |    3 | Dallas, TX       | Benton, AR       |    263 |    566 |  303 |\n|    3 |    4 | Benton, AR       | Memphis, TN      |    566 |    745 |  179 |\n|    4 |    5 | Memphis, TN      | Portageville, MO |    745 |    878 |  133 |\n|    5 |    6 | Portageville, MO | Champaign, IL    |    878 |   1164 |  286 |\n|    6 |    7 | Champaign, IL    | Madison, WI      |   1164 |   1412 |  248 |\n+------+------+------------------+------------------+--------+--------+------+\n```", "```\nmysql> `SELECT id, date, ab, h, TRUNCATE(IFNULL(h/ab,0),3) AS ba`\n    -> `FROM player_stats ORDER BY id;`\n+----+------------+-----+----+-------+\n| id | date       | ab  | h  | ba    |\n+----+------------+-----+----+-------+\n|  1 | 2013-04-30 |   0 |  0 | 0.000 |\n|  2 | 2013-05-31 |  38 | 13 | 0.342 |\n|  3 | 2013-06-30 | 109 | 31 | 0.284 |\n|  4 | 2013-07-31 | 196 | 49 | 0.250 |\n|  5 | 2013-08-31 | 304 | 98 | 0.322 |\n+----+------------+-----+----+-------+\n```", "```\nmysql> `SELECT`\n    -> `t1.id AS id1, t2.id AS id2,`\n    -> `t2.date,`\n    -> `t1.ab AS ab1, t2.ab AS ab2,`\n    -> `t1.h AS h1, t2.h AS h2,`\n    -> `t2.ab-t1.ab AS abdiff,`\n    -> `t2.h-t1.h AS hdiff,`\n    -> `TRUNCATE(IFNULL((t2.h-t1.h)/(t2.ab-t1.ab),0),3) AS ba`\n    -> `FROM player_stats AS t1 INNER JOIN player_stats AS t2`\n    -> `ON t1.id+1 = t2.id`\n    -> `ORDER BY t1.id;`\n+-----+-----+------------+-----+-----+----+----+--------+-------+-------+\n| id1 | id2 | date       | ab1 | ab2 | h1 | h2 | abdiff | hdiff | ba    |\n+-----+-----+------------+-----+-----+----+----+--------+-------+-------+\n|   1 |   2 | 2013-05-31 |   0 |  38 |  0 | 13 |     38 |    13 | 0.342 |\n|   2 |   3 | 2013-06-30 |  38 | 109 | 13 | 31 |     71 |    18 | 0.253 |\n|   3 |   4 | 2013-07-31 | 109 | 196 | 31 | 49 |     87 |    18 | 0.206 |\n|   4 |   5 | 2013-08-31 | 196 | 304 | 49 | 98 |    108 |    49 | 0.453 |\n+-----+-----+------------+-----+-----+----+----+--------+-------+-------+\n```", "```\nmysql> `SELECT date, precip FROM rainfall ORDER BY date;`\n+------------+--------+\n| date       | precip |\n+------------+--------+\n| 2014-06-01 |   1.50 |\n| 2014-06-02 |   0.00 |\n| 2014-06-03 |   0.50 |\n| 2014-06-04 |   0.00 |\n| 2014-06-05 |   1.00 |\n+------------+--------+\n```", "```\nmysql> `SELECT SUM(precip) FROM rainfall WHERE date <= '2014-06-03';`\n+-------------+\n| SUM(precip) |\n+-------------+\n|        2.00 |\n+-------------+\n```", "```\nmysql> `SELECT t1.date, t1.precip AS 'daily precip',`\n    -> `SUM(t2.precip) AS 'cum. precip'`\n    -> `FROM rainfall AS t1 INNER JOIN rainfall AS t2`\n    -> `ON t1.date >= t2.date`\n    -> `GROUP BY t1.date;`\n+------------+--------------+-------------+\n| date       | daily precip | cum. precip |\n+------------+--------------+-------------+\n| 2014-06-01 |         1.50 |        1.50 |\n| 2014-06-02 |         0.00 |        1.50 |\n| 2014-06-03 |         0.50 |        2.00 |\n| 2014-06-04 |         0.00 |        2.00 |\n| 2014-06-05 |         1.00 |        3.00 |\n+------------+--------------+-------------+\n```", "```\nmysql> `SELECT t1.date, t1.precip AS 'daily precip',`\n    -> `SUM(t2.precip) AS 'cum. precip',`\n    -> `COUNT(t2.precip) AS 'days elapsed',`\n    -> `AVG(t2.precip) AS 'avg. precip'`\n    -> `FROM rainfall AS t1 INNER JOIN rainfall AS t2`\n    -> `ON t1.date >= t2.date`\n    -> `GROUP BY t1.date;`\n+------------+--------------+-------------+--------------+-------------+\n| date       | daily precip | cum. precip | days elapsed | avg. precip |\n+------------+--------------+-------------+--------------+-------------+\n| 2014-06-01 |         1.50 |        1.50 |            1 |    1.500000 |\n| 2014-06-02 |         0.00 |        1.50 |            2 |    0.750000 |\n| 2014-06-03 |         0.50 |        2.00 |            3 |    0.666667 |\n| 2014-06-04 |         0.00 |        2.00 |            4 |    0.500000 |\n| 2014-06-05 |         1.00 |        3.00 |            5 |    0.600000 |\n+------------+--------------+-------------+--------------+-------------+\n```", "```\nmysql> `DELETE FROM rainfall WHERE precip = 0;`\nmysql> `SELECT date, precip FROM rainfall ORDER BY date;`\n+------------+--------+\n| date       | precip |\n+------------+--------+\n| 2014-06-01 |   1.50 |\n| 2014-06-03 |   0.50 |\n| 2014-06-05 |   1.00 |\n+------------+--------+\n```", "```\nmysql> `SELECT t1.date, t1.precip AS 'daily precip',`\n    -> `SUM(t2.precip) AS 'cum. precip',`\n    -> `COUNT(t2.precip) AS 'days elapsed',`\n    -> `AVG(t2.precip) AS 'avg. precip'`\n    -> `FROM rainfall AS t1 INNER JOIN rainfall AS t2`\n    -> `ON t1.date >= t2.date`\n    -> `GROUP BY t1.date;`\n+------------+--------------+-------------+--------------+-------------+\n| date       | daily precip | cum. precip | days elapsed | avg. precip |\n+------------+--------------+-------------+--------------+-------------+\n| 2014-06-01 |         1.50 |        1.50 |            1 |    1.500000 |\n| 2014-06-03 |         0.50 |        2.00 |            2 |    1.000000 |\n| 2014-06-05 |         1.00 |        3.00 |            3 |    1.000000 |\n+------------+--------------+-------------+--------------+-------------+\n```", "```\nDATEDIFF(MAX(t2.date),MIN(t2.date)) + 1\n```", "```\nmysql> `SELECT t1.date, t1.precip AS 'daily precip',`\n    -> `SUM(t2.precip) AS 'cum. precip',`\n    -> `DATEDIFF(MAX(t2.date),MIN(t2.date)) + 1 AS 'days elapsed',`\n    -> `SUM(t2.precip) / (DATEDIFF(MAX(t2.date),MIN(t2.date)) + 1)`\n    -> `AS 'avg. precip'`\n    -> `FROM rainfall AS t1 INNER JOIN rainfall AS t2`\n    -> `ON t1.date >= t2.date`\n    -> `GROUP BY t1.date;`\n+------------+--------------+-------------+--------------+-------------+\n| date       | daily precip | cum. precip | days elapsed | avg. precip |\n+------------+--------------+-------------+--------------+-------------+\n| 2014-06-01 |         1.50 |        1.50 |            1 |    1.500000 |\n| 2014-06-03 |         0.50 |        2.00 |            3 |    0.666667 |\n| 2014-06-05 |         1.00 |        3.00 |            5 |    0.600000 |\n+------------+--------------+-------------+--------------+-------------+\n```", "```\nmysql> `SELECT stage, km, t FROM marathon ORDER BY stage;`\n+-------+----+----------+\n| stage | km | t        |\n+-------+----+----------+\n|     1 |  5 | 00:15:00 |\n|     2 |  7 | 00:19:30 |\n|     3 |  9 | 00:29:20 |\n|     4 |  5 | 00:17:50 |\n+-------+----+----------+\n```", "```\nmysql> `SELECT t1.stage, t1.km, SUM(t2.km) AS 'cum. km'`\n    -> `FROM marathon AS t1 INNER JOIN marathon AS t2`\n    -> `ON t1.stage >= t2.stage`\n    -> `GROUP BY t1.stage;`\n+-------+----+---------+\n| stage | km | cum. km |\n+-------+----+---------+\n|     1 |  5 |       5 |\n|     2 |  7 |      12 |\n|     3 |  9 |      21 |\n|     4 |  5 |      26 |\n+-------+----+---------+\n```", "```\nmysql> `SELECT t1.stage, t1.km, t1.t,`\n    -> `SUM(t2.km) AS 'cum. km',`\n    -> `SEC_TO_TIME(SUM(TIME_TO_SEC(t2.t))) AS 'cum. t',`\n    -> `SUM(t2.km)/(SUM(TIME_TO_SEC(t2.t))/(60*60)) AS 'avg. km/hour'`\n    -> `FROM marathon AS t1 INNER JOIN marathon AS t2`\n    -> `ON t1.stage >= t2.stage`\n    -> `GROUP BY t1.stage;`\n+-------+----+----------+---------+----------+--------------+\n| stage | km | t        | cum. km | cum. t   | avg. km/hour |\n+-------+----+----------+---------+----------+--------------+\n|     1 |  5 | 00:15:00 |       5 | 00:15:00 |      20.0000 |\n|     2 |  7 | 00:19:30 |      12 | 00:34:30 |      20.8696 |\n|     3 |  9 | 00:29:20 |      21 | 01:03:50 |      19.7389 |\n|     4 |  5 | 00:17:50 |      26 | 01:21:40 |      19.1020 |\n+-------+----+----------+---------+----------+--------------+\n```", "```\nmysql> `SELECT score FROM ranks ORDER BY score DESC;`\n+-------+\n| score |\n+-------+\n|     5 |\n|     4 |\n|     4 |\n|     3 |\n|     2 |\n|     2 |\n|     2 |\n|     1 |\n+-------+\n```", "```\nmysql> `SELECT ROW_NUMBER() OVER win AS 'rank',` \n    -> `score FROM ranks WINDOW win AS (ORDER BY score DESC);`\n+------+-------+\n| rank | score |\n+------+-------+\n|    1 |     5 |\n|    2 |     4 |\n|    3 |     4 |\n|    4 |     3 |\n|    5 |     2 |\n|    6 |     2 |\n|    7 |     2 |\n|    8 |     1 |\n+------+-------+\n8 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT DENSE_RANK() OVER win AS 'rank',` \n    > `score FROM ranks WINDOW win AS (ORDER BY score DESC);`\n+------+-------+\n| rank | score |\n+------+-------+\n|    1 |     5 |\n|    2 |     4 |\n|    2 |     4 |\n|    3 |     3 |\n|    4 |     2 |\n|    4 |     2 |\n|    4 |     2 |\n|    5 |     1 |\n+------+-------+\n```", "```\nmysql> `SELECT ROW_NUMBER() OVER win AS 'row',` \n    -> `RANK() OVER win AS 'rank',` \n    -> `score FROM ranks WINDOW win AS (ORDER BY score DESC);`\n+------+------+-------+\n| row  | rank | score |\n+------+------+-------+\n|    1 |    1 |     5 |\n|    2 |    2 |     4 |\n|    3 |    2 |     4 |\n|    4 |    4 |     3 |\n|    5 |    5 |     2 |\n|    6 |    5 |     2 |\n|    7 |    5 |     2 |\n|    8 |    8 |     1 |\n+------+------+-------+\n```", "```\nres = client.query(\"SELECT score FROM ranks ORDER BY score DESC\")\n  rownum = 0\n  rank = 0\n  prev_score = nil\n  puts \"Row\\tRank\\tScore\\n\"\n  res.each do |row|\n    score = row.values[0]\n    rownum += 1\n    rank = rownum if rownum == 1 || prev_score != score\n    prev_score = score\n    puts \"#{rownum}\\t#{rank}\\t#{score}\"\n  end\n```", "```\nmysql> `SELECT name, wins FROM al_winner ORDER BY wins DESC, name;`\n+----------------+------+\n| name           | wins |\n+----------------+------+\n| Mulder, Mark   |   21 |\n| Clemens, Roger |   20 |\n| Moyer, Jamie   |   20 |\n| Garcia, Freddy |   18 |\n| Hudson, Tim    |   18 |\n| Abbott, Paul   |   17 |\n| Mays, Joe      |   17 |\n| Mussina, Mike  |   17 |\n| Sabathia, C.C. |   17 |\n| Zito, Barry    |   17 |\n| Buehrle, Mark  |   16 |\n| Milton, Eric   |   15 |\n| Pettitte, Andy |   15 |\n| Radke, Brad    |   15 |\n| Sele, Aaron    |   15 |\n+----------------+------+\n```", "```\nmysql> `SELECT ROW_NUMBER() OVER win AS 'row',` \n    -> `RANK() OVER win AS 'rank',` \n    -> `name, wins` \n    -> `FROM al_winner WINDOW win AS (ORDER BY wins DESC);`\n+------+------+----------------+------+\n| row  | rank | name           | wins |\n+------+------+----------------+------+\n|    1 |    1 | Mulder, Mark   |   21 |\n|    2 |    2 | Clemens, Roger |   20 |\n|    3 |    2 | Moyer, Jamie   |   20 |\n|    4 |    4 | Garcia, Freddy |   18 |\n|    5 |    4 | Hudson, Tim    |   18 |\n|    6 |    6 | Zito, Barry    |   17 |\n|    7 |    6 | Sabathia, C.C. |   17 |\n|    8 |    6 | Mussina, Mike  |   17 |\n|    9 |    6 | Mays, Joe      |   17 |\n|   10 |    6 | Abbott, Paul   |   17 |\n|   11 |   11 | Buehrle, Mark  |   16 |\n|   12 |   12 | Milton, Eric   |   15 |\n|   13 |   12 | Pettitte, Andy |   15 |\n|   14 |   12 | Radke, Brad    |   15 |\n|   15 |   12 | Sele, Aaron    |   15 |\n+------+------+----------------+------+\n```", "```\nmysql> `SELECT team, wins, losses FROM standings1`\n    -> `ORDER BY wins-losses DESC;`\n+-------------+------+--------+\n| team        | wins | losses |\n+-------------+------+--------+\n| Winnipeg    |   37 |     20 |\n| Crookston   |   31 |     25 |\n| Fargo       |   30 |     26 |\n| Grand Forks |   28 |     26 |\n| Devils Lake |   19 |     31 |\n| Cavalier    |   15 |     32 |\n+-------------+------+--------+\n```", "```\nwins / (wins + losses)\n```", "```\nIF(wins=0,0,wins/(wins+losses))\n```", "```\n+------+------+--------+\n| team | wins | losses |\n+------+------+--------+\n| A    |   17 |     11 |\n| B    |   14 |     12 |\n+------+------+--------+\n```", "```\n((winsA - winsB) + (lossesB - lossesA)) / 2\n```", "```\n((winsA - lossesA) - (winsB - lossesB)) / 2\n```", "```\nmysql> `SET @wl_diff = (SELECT MAX(wins-losses) FROM standings1);`\n```", "```\nmysql> `SELECT team, wins AS W, losses AS L,`\n    -> `wins/(wins+losses) AS PCT,`\n    -> `(@wl_diff - (wins-losses)) / 2 AS GB`\n    -> `FROM standings1`\n    -> `ORDER BY wins-losses DESC, PCT DESC;`\n+-------------+------+------+--------+---------+\n| team        | W    | L    | PCT    | GB      |\n+-------------+------+------+--------+---------+\n| Winnipeg    |   37 |   20 | 0.6491 |  0.0000 |\n| Crookston   |   31 |   25 | 0.5536 |  5.5000 |\n| Fargo       |   30 |   26 | 0.5357 |  6.5000 |\n| Grand Forks |   28 |   26 | 0.5185 |  7.5000 |\n| Devils Lake |   19 |   31 | 0.3800 | 14.5000 |\n| Cavalier    |   15 |   32 | 0.3191 | 17.0000 |\n+-------------+------+------+--------+---------+\n```", "```\nmysql> `SELECT team, wins AS W, losses AS L,`\n    -> `TRUNCATE(wins/(wins+losses),3) AS PCT,`\n    -> `IF(@wl_diff = wins-losses,`\n    ->    `'-',TRUNCATE((@wl_diff - (wins-losses))/2,1)) AS GB`\n    -> `FROM standings1`\n    -> `ORDER BY wins-losses DESC, PCT DESC;`\n+-------------+------+------+-------+------+\n| team        | W    | L    | PCT   | GB   |\n+-------------+------+------+-------+------+\n| Winnipeg    |   37 |   20 | 0.649 | -    |\n| Crookston   |   31 |   25 | 0.553 | 5.5  |\n| Fargo       |   30 |   26 | 0.535 | 6.5  |\n| Grand Forks |   28 |   26 | 0.518 | 7.5  |\n| Devils Lake |   19 |   31 | 0.380 | 14.5 |\n| Cavalier    |   15 |   32 | 0.319 | 17.0 |\n+-------------+------+------+-------+------+\n```", "```\n+------+------+--------+\n| team | wins | losses |\n+------+------+--------+\n| A    |    4 |      1 |\n| B    |    2 |      0 |\n+------+------+--------+\n```", "```\n+------+------+------+-------+------+\n| team | W    | L    | PCT   | GB   |\n+------+------+------+-------+------+\n| A    |    4 |    1 | 0.800 | -    |\n| B    |    2 |    0 | 1.000 | 0.5  |\n+------+------+------+-------+------+\n```", "```\nmysql> `SELECT half, division, team, wins, losses FROM standings2`\n    -> `ORDER BY half, division, wins-losses DESC;`\n+------+----------+-----------------+------+--------+\n| half | division | team            | wins | losses |\n+------+----------+-----------------+------+--------+\n|    1 | Eastern  | St. Paul        |   24 |     18 |\n|    1 | Eastern  | Thunder Bay     |   18 |     24 |\n|    1 | Eastern  | Duluth-Superior |   17 |     24 |\n|    1 | Eastern  | Madison         |   15 |     27 |\n|    1 | Western  | Winnipeg        |   29 |     12 |\n|    1 | Western  | Sioux City      |   28 |     14 |\n|    1 | Western  | Fargo-Moorhead  |   21 |     21 |\n|    1 | Western  | Sioux Falls     |   15 |     27 |\n|    2 | Eastern  | Duluth-Superior |   22 |     20 |\n|    2 | Eastern  | St. Paul        |   21 |     21 |\n|    2 | Eastern  | Madison         |   19 |     23 |\n|    2 | Eastern  | Thunder Bay     |   18 |     24 |\n|    2 | Western  | Fargo-Moorhead  |   26 |     16 |\n|    2 | Western  | Winnipeg        |   24 |     18 |\n|    2 | Western  | Sioux City      |   22 |     20 |\n|    2 | Western  | Sioux Falls     |   16 |     26 |\n+------+----------+-----------------+------+--------+\n```", "```\nmysql> `CREATE TEMPORARY TABLE firstplace`\n    -> `SELECT half, division, MAX(wins-losses) AS wl_diff`\n    -> `FROM standings2`\n    -> `GROUP BY half, division;`\n```", "```\nmysql> `SELECT wl.half, wl.division, wl.team, wl.wins AS W, wl.losses AS L,`\n    -> `TRUNCATE(wl.wins/(wl.wins+wl.losses),3) AS PCT,`\n    -> `IF(fp.wl_diff = wl.wins-wl.losses,`\n    ->    `'-',TRUNCATE((fp.wl_diff - (wl.wins-wl.losses)) / 2,1)) AS GB`\n    -> `FROM standings2 AS wl INNER JOIN firstplace AS fp`\n    -> `ON wl.half = fp.half AND wl.division = fp.division`\n    -> `ORDER BY wl.half, wl.division, wl.wins-wl.losses DESC, PCT DESC;`\n+------+----------+-----------------+------+------+-------+------+\n| half | division | team            | W    | L    | PCT   | GB   |\n+------+----------+-----------------+------+------+-------+------+\n|    1 | Eastern  | St. Paul        |   24 |   18 | 0.571 | -    |\n|    1 | Eastern  | Thunder Bay     |   18 |   24 | 0.428 | 6.0  |\n|    1 | Eastern  | Duluth-Superior |   17 |   24 | 0.414 | 6.5  |\n|    1 | Eastern  | Madison         |   15 |   27 | 0.357 | 9.0  |\n|    1 | Western  | Winnipeg        |   29 |   12 | 0.707 | -    |\n|    1 | Western  | Sioux City      |   28 |   14 | 0.666 | 1.5  |\n|    1 | Western  | Fargo-Moorhead  |   21 |   21 | 0.500 | 8.5  |\n|    1 | Western  | Sioux Falls     |   15 |   27 | 0.357 | 14.5 |\n|    2 | Eastern  | Duluth-Superior |   22 |   20 | 0.523 | -    |\n|    2 | Eastern  | St. Paul        |   21 |   21 | 0.500 | 1.0  |\n|    2 | Eastern  | Madison         |   19 |   23 | 0.452 | 3.0  |\n|    2 | Eastern  | Thunder Bay     |   18 |   24 | 0.428 | 4.0  |\n|    2 | Western  | Fargo-Moorhead  |   26 |   16 | 0.619 | -    |\n|    2 | Western  | Winnipeg        |   24 |   18 | 0.571 | 2.0  |\n|    2 | Western  | Sioux City      |   22 |   20 | 0.523 | 4.0  |\n|    2 | Western  | Sioux Falls     |   16 |   26 | 0.380 | 10.0 |\n+------+----------+-----------------+------+------+-------+------+\n```", "```\nmy ($cur_half, $cur_div) = (\"\", \"\");\nwhile (my ($half, $div, $team, $wins, $losses, $pct, $gb)\n          = $sth->fetchrow_array ())\n{\n  if ($cur_half ne $half || $cur_div ne $div) # new group of standings?\n  {\n    # print standings header and remember new half/division values\n    print \"\\n$div Division, season half $half\\n\";\n    printf \"%-20s  %3s  %3s  %5s  %s\\n\", \"Team\", \"W\", \"L\", \"PCT\", \"GB\";\n    $cur_half = $half;\n    $cur_div = $div;\n  }\n  printf \"%-20s  %3d  %3d  %5s  %s\\n\", $team, $wins, $losses, $pct, $gb;\n}\n```", "```\nEastern Division, season half 1\nTeam                    W    L    PCT  GB\nSt. Paul               24   18  0.571  -\nThunder Bay            18   24  0.428  6.0\nDuluth-Superior        17   24  0.414  6.5\nMadison                15   27  0.357  9.0\n\nWestern Division, season half 1\nTeam                    W    L    PCT  GB\nWinnipeg               29   12  0.707  -\nSioux City             28   14  0.666  1.5\nFargo-Moorhead         21   21  0.500  8.5\nSioux Falls            15   27  0.357  14.5\n\nEastern Division, season half 2\nTeam                    W    L    PCT  GB\nDuluth-Superior        22   20  0.523  -\nSt. Paul               21   21  0.500  1.0\nMadison                19   23  0.452  3.0\nThunder Bay            18   24  0.428  4.0\n\nWestern Division, season half 2\nTeam                    W    L    PCT  GB\nFargo-Moorhead         26   16  0.619  -\nWinnipeg               24   18  0.571  2.0\nSioux City             22   20  0.523  4.0\nSioux Falls            16   26  0.380  10.0\n```"]