["```\nimport java.io.*;\nimport java.util.Arrays;\n\npublic class GameCharacter implements Serializable {\n  private final int power;\n  private final String type;\n  private final String[] weapons;\n\n  public GameCharacter(int power, String type, String[] weapons) {\n    this.power = power;\n    this.type = type;\n    this.weapons = weapons;\n  }\n\n  public int getPower() {\n    return power;\n  }\n\n  public String getType() {\n    return type;\n  }\n\n  public String getWeapons() {\n    return Arrays.toString(weapons);\n  }\n}\n```", "```\n    public class Dog {\n\n      **static final long serialVersionUID =**\n                    **-5849794470654667210L;**\n\n      private String name;\n      private int size;\n      // method code here\n    }\n    ```", "```\n    File dir = new File(\"Chapter7\");\n    dir.mkdir();\n    ```", "```\n    if (dir.isDirectory()) {\n      String[] dirContents = dir.list();\n      for (String dirContent : dirContents) {\n        System.out.println(dirContent);\n      }\n    }\n    ```", "```\n    boolean isDeleted = f.delete();\n    ```", "```\npublic class QuizCardPlayer {\n\n  public void go() {\n    // build and display gui\n  }\n\n  private void nextCard() {\n    // if this is a question, show the answer, otherwise show\n    // next question set a flag for whether we’re viewing a\n    // question or answer\n  }\n\n  private void open() {\n    // bring up a file dialog box\n    // let the user navigate to and choose a card set to open\n  }\n\n  private void loadFile(File file) {\n    // must build an ArrayList of cards, by reading them from\n    // a text file called from the OpenMenuListener event handler,\n    // reads the file one line at a time and tells the makeCard()\n    // method to make a new card out of the line (one line in the\n    // file holds both the question and answer, separated by a “/”)\n  }\n\n  private void makeCard(String lineToParse) {\n    // called by the loadFile method, takes a line from the text file\n    // and parses into two pieces—question and answer—and creates a\n    // new QuizCard and adds it to the ArrayList called CardList\n  }\n}\n```", "```\njava.nio.file\njava.nio.file.attribute\n```", "```\nprivate void saveFile(File file) {\n  BufferedWriter writer = null;\n  try {\n    writer = new BufferedWriter(new FileWriter(file));\n\n    for (QuizCard card : cardList) {\n      writer.write(card.getQuestion() + \"/\");\n      writer.write(card.getAnswer() + \"\\n\");\n    }\n\n  } catch (IOException e) {\n    System.out.println(\"Couldn't write the cardList out: \" + e.getMessage());\n  } finally {\n    try {\n      writer.close();\n    } catch (Exception e) {\n      System.out.println(\"Couldn't close writer: \" + e.getMessage());\n    }\n  }\n}\n```", "```\nprivate void saveFile(File file) {\n  **try (BufferedWriter writer =**           \n        **new BufferedWriter(new FileWriter(file))) {**\n\n    for (QuizCard card : cardList) {\n      writer.write(card.getQuestion() + \"/\");\n      writer.write(card.getAnswer() + \"\\n\");\n    }\n\n  } catch (IOException e) {\n    System.out.println(\"Couldn't write the cardList out: \" + e.getMessage());\n  }\n}\n```", "```\ntry (BufferedWriter writer =\n       new BufferedWriter(new FileWriter(file))) {\n```", "```\nFileReader fileReader = new FileReader();\nBufferedReader reader = new BufferedReader(fileReader);\n```", "```\nFileOutputStream f = new FileOutputStream(\"Foo.ser\");\nObjectOutputStream os = new ObjectOutputStream(f);\n```", "```\nBufferedReader reader = new BufferedReader(new FileReader(file));\nString line;\nwhile ((line = reader.readLine()) != null) {\n  makeCard(line);\n}\n```", "```\nFileOutputStream f = new FileOutputStream(\"Game.ser\");\nObjectInputStream is = new ObjectInputStream(f);\nGameCharacter oneAgain = (GameCharacter) is.readObject();\n```", "```\nimport java.io.*;\n\nclass DungeonGame implements Serializable {\n  public int x = 3;\n  transient long y = 4;\n  private short z = 5;\n\n  int getX() {\n    return x;\n  }\n  long getY() {\n    return y;\n  }\n  short getZ() {\n    return z;\n  }\n}\n\nclass DungeonTest {\n  public static void main(String[] args) {\n    DungeonGame d = new DungeonGame();\n    System.out.println(d.getX() + d.getY() + d.getZ());\n    try {\n      FileOutputStream fos = new FileOutputStream(\"dg.ser\");\n      ObjectOutputStream oos = new ObjectOutputStream(fos);\n      oos.writeObject(d);\n      oos.close();\n\n      FileInputStream fis = new FileInputStream(\"dg.ser\");\n      ObjectInputStream ois = new ObjectInputStream(fis);\n      d = (DungeonGame) ois.readObject();\n      ois.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    System.out.println(d.getX() + d.getY() + d.getZ());\n  }\n}\n```"]