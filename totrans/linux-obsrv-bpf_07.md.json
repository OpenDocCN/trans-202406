["```\n# tcpdump -n 'ip and tcp port 8080'\n```", "```\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on wlp4s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n12:04:29.593703 IP 192.168.1.249.44206 > 192.168.1.63.8080: Flags [P.],\n   seq 1:325, ack 1, win 343,\n   options [nop,nop,TS val 25580829 ecr 595195678],\n   length 324: HTTP: GET / HTTP/1.1\n12:04:29.596073 IP 192.168.1.63.8080 > 192.168.1.249.44206: Flags [.],\n   seq 1:1449, ack 325, win 507,\n   options [nop,nop,TS val 595195731 ecr 25580829],\n   length 1448: HTTP: HTTP/1.1 200 OK\n12:04:29.596139 IP 192.168.1.63.8080 > 192.168.1.249.44206: Flags [P.],\n   seq 1449:2390, ack 325, win 507,\n   options [nop,nop,TS val 595195731 ecr 25580829],\n   length 941: HTTP\n12:04:46.242924 IP 192.168.1.249.44206 > 192.168.1.63.8080: Flags [P.],\n   seq 660:996, ack 4779, win 388,\n   options [nop,nop,TS val 25584934 ecr 595204802],\n   length 336: HTTP: GET /api/products HTTP/1.1\n12:04:46.243594 IP 192.168.1.63.8080 > 192.168.1.249.44206: Flags [P.],\n   seq 4779:4873, ack 996, win 503,\n   options [nop,nop,TS val 595212378 ecr 25584934],\n   length 94: HTTP: HTTP/1.1 500 Internal Server Error\n12:04:46.329245 IP 192.168.1.249.44234 > 192.168.1.63.8080: Flags [P.],\n   seq 471:706, ack 4779, win 388,\n   options [nop,nop,TS val 25585013 ecr 595205622],\n   length 235: HTTP: GET /favicon.ico HTTP/1.1\n12:04:46.331659 IP 192.168.1.63.8080 > 192.168.1.249.44234: Flags [.],\n   seq 4779:6227, ack 706, win 506,\n   options [nop,nop,TS val 595212466 ecr 25585013],\n   length 1448: HTTP: HTTP/1.1 200 OK\n12:04:46.331739 IP 192.168.1.63.8080 > 192.168.1.249.44234: Flags [P.],\n   seq 6227:7168, ack 706, win 506,\n   options [nop,nop,TS val 595212466 ecr 25585013],\n   length 941: HTTP\n```", "```\ntcpdump  -d  'ip and tcp port 8080'\n```", "```\n(000) ldh      [12]\n(001) jeq      #0x800           jt 2    jf 12\n(002) ldb      [23]\n(003) jeq      #0x6             jt 4    jf 12\n(004) ldh      [20]\n(005) jset     #0x1fff          jt 12   jf 6\n(006) ldxb     4*([14]&0xf)\n(007) ldh      [x + 14]\n(008) jeq      #0x1f90          jt 11   jf 9\n(009) ldh      [x + 16]\n(010) jeq      #0x1f90          jt 11   jf 12\n(011) ret      #262144\n(012) ret      #0\n```", "```\ntcpdump -d 'ip and tcp dst port 8080'\n```", "```\n(000) ldh      [12]\n(001) jeq      #0x800           jt 2    jf 10\n(002) ldb      [23]\n(003) jeq      #0x6             jt 4    jf 10\n(004) ldh      [20]\n(005) jset     #0x1fff          jt 10   jf 6\n(006) ldxb     4*([14]&0xf)\n(007) ldh      [x + 16]\n(008) jeq      #0x1f90          jt 9    jf 10\n(009) ret      #262144\n(010) ret      #0\n```", "```\nexport KERNEL_SRCTREE=/tmp/linux-stable\ngit clone  git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git\n  $KERNEL_SRCTREE\ncd $KERNEL_SRCTREE\ngit checkout 4b3c31c8d4dda4d70f3f24a165f3be99499e0328\n```", "```\n\tbool is_socket = strncmp(event, \"socket\", 6) == 0;\n\tbool is_kprobe = strncmp(event, \"kprobe/\", 7) == 0;\n\tbool is_kretprobe = strncmp(event, \"kretprobe/\", 10) == 0;\n\tbool is_tracepoint = strncmp(event, \"tracepoint/\", 11) == 0;\n\tbool is_raw_tracepoint = strncmp(event, \"raw_tracepoint/\", 15) == 0;\n\tbool is_xdp = strncmp(event, \"xdp\", 3) == 0;\n\tbool is_perf_event = strncmp(event, \"perf_event\", 10) == 0;\n\tbool is_cgroup_skb = strncmp(event, \"cgroup/skb\", 10) == 0;\n\tbool is_cgroup_sk = strncmp(event, \"cgroup/sock\", 11) == 0;\n\tbool is_sockops = strncmp(event, \"sockops\", 7) == 0;\n\tbool is_sk_skb = strncmp(event, \"sk_skb\", 6) == 0;\n\tbool is_sk_msg = strncmp(event, \"sk_msg\", 6) == 0;\n```", "```\n\tif (is_socket) {\n\t\tprog_type = BPF_PROG_TYPE_SOCKET_FILTER;\n\t} else if (is_kprobe || is_kretprobe) {\n\t\tprog_type = BPF_PROG_TYPE_KPROBE;\n\t} else if (is_tracepoint) {\n\t\tprog_type = BPF_PROG_TYPE_TRACEPOINT;\n\t} else if (is_raw_tracepoint) {\n\t\tprog_type = BPF_PROG_TYPE_RAW_TRACEPOINT;\n\t} else if (is_xdp) {\n\t\tprog_type = BPF_PROG_TYPE_XDP;\n\t} else if (is_perf_event) {\n\t\tprog_type = BPF_PROG_TYPE_PERF_EVENT;\n\t} else if (is_cgroup_skb) {\n\t\tprog_type = BPF_PROG_TYPE_CGROUP_SKB;\n\t} else if (is_cgroup_sk) {\n\t\tprog_type = BPF_PROG_TYPE_CGROUP_SOCK;\n\t} else if (is_sockops) {\n\t\tprog_type = BPF_PROG_TYPE_SOCK_OPS;\n\t} else if (is_sk_skb) {\n\t\tprog_type = BPF_PROG_TYPE_SK_SKB;\n\t} else if (is_sk_msg) {\n\t\tprog_type = BPF_PROG_TYPE_SK_MSG;\n\t} else {\n\t\tprintf(\"Unknown event '%s'\\n\", event);\n\t\treturn -1;\n\t}\n```", "```\nstruct bpf_map_def SEC(\"maps\") countmap = {\n    .type = BPF_MAP_TYPE_ARRAY,\n    .key_size = sizeof(int),\n    .value_size = sizeof(int),\n    .max_entries = 256,\n};\n```", "```\nSEC(\"socket\")\nint socket_prog(struct __sk_buff *skb) {\n  int proto = load_byte(skb, ETH_HLEN + offsetof(struct iphdr, protocol));\n  int one = 1;\n  int *el = bpf_map_lookup_elem(&countmap, &proto);\n  if (el) {\n    (*el)++;\n  } else {\n    el = &one;\n  }\n  bpf_map_update_elem(&countmap, &proto, el, BPF_ANY);\n  return 0;\n}\n```", "```\nclang -O2 -target bpf -c bpf_program.c -o bpf_program.o\n```", "```\n  if (load_bpf_file(filename)) {\n    printf(\"%s\", bpf_log_buf);\n    return 1;\n  }\n\n  sock = open_raw_sock(\"lo\");\n\n  if (setsockopt(sock, SOL_SOCKET, SO_ATTACH_BPF, prog_fd,\n                 sizeof(prog_fd[0]))) {\n    printf(\"setsockopt %s\\n\", strerror(errno));\n    return 0;\n  }\n```", "```\n  for (i = 0; i < 10; i++) {\n    key = IPPROTO_TCP;\n    assert(bpf_map_lookup_elem(map_fd[0], &key, &tcp_cnt) == 0);\n\n    key = IPPROTO_UDP;\n    assert(bpf_map_lookup_elem(map_fd[0], &key, &udp_cnt) == 0);\n\n    key = IPPROTO_ICMP;\n    assert(bpf_map_lookup_elem(map_fd[0], &key, &icmp_cnt) == 0);\n\n    printf(\"TCP %d UDP %d ICMP %d packets\\n\", tcp_cnt, udp_cnt, icmp_cnt);\n    sleep(1);\n  }\n```", "```\n$ cd $KERNEL_SRCTREE/tools/lib/bpf\n$ make\n```", "```\nKERNEL_SRCTREE=$1\nLIBBPF=${KERNEL_SRCTREE}/tools/lib/bpf/libbpf.a\nclang -o loader-bin -I${KERNEL_SRCTREE}/tools/lib/bpf/ \\\n  -I${KERNEL_SRCTREE}/tools/lib -I${KERNEL_SRCTREE}/tools/include \\\n  -I${KERNEL_SRCTREE}/tools/perf -I${KERNEL_SRCTREE}/samples \\\n  ${KERNEL_SRCTREE}/samples/bpf/bpf_load.c \\\n  loader.c \"${LIBBPF}\" -lelf\n```", "```\n$ ./build-loader.sh /tmp/linux-stable\n```", "```\n# ./loader-bin bpf_program.o\n```", "```\n$ ping -c 100 127.0.0.1\n```", "```\nPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.100 ms\n64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.107 ms\n64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.093 ms\n64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.102 ms\n64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.105 ms\n64 bytes from 127.0.0.1: icmp_seq=6 ttl=64 time=0.093 ms\n64 bytes from 127.0.0.1: icmp_seq=7 ttl=64 time=0.104 ms\n64 bytes from 127.0.0.1: icmp_seq=8 ttl=64 time=0.142 ms\n```", "```\n# ./loader-bin bpf_program.o\n```", "```\nTCP 0 UDP 0 ICMP 0 packets\nTCP 0 UDP 0 ICMP 4 packets\nTCP 0 UDP 0 ICMP 8 packets\nTCP 0 UDP 0 ICMP 12 packets\nTCP 0 UDP 0 ICMP 16 packets\nTCP 0 UDP 0 ICMP 20 packets\nTCP 0 UDP 0 ICMP 24 packets\nTCP 0 UDP 0 ICMP 28 packets\nTCP 0 UDP 0 ICMP 32 packets\nTCP 0 UDP 0 ICMP 36 packets\n```", "```\nls -la /sys/class/net\ntotal 0\ndrwxr-xr-x  2 root root 0 Feb 13 21:52 .\ndrwxr-xr-x 64 root root 0 Feb 13 18:38 ..\nlrwxrwxrwx  1 root root 0 Feb 13 23:26 docker0 ->\n../../devices/virtual/net/docker0\nlrwxrwxrwx  1 root root 0 Feb 13 23:26 enp0s31f6 ->\n../../devices/pci0000:00/0000:00:1f.6/net/enp0s31f6\nlrwxrwxrwx  1 root root 0 Feb 13 23:26 lo -> ../../devices/virtual/net/lo\n```", "```\nip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue\nstate UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n    valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n    valid_lft forever preferred_lft forever\n2: enp0s31f6: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc\nfq_codel stateDOWN group default\nqlen 1000\nlink/ether 8c:16:45:00:a7:7e brd ff:ff:ff:ff:ff:ff\n6: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc\nnoqueue state DOWN group default\nlink/ether 02:42:38:54:3c:98 brd ff:ff:ff:ff:ff:ff\ninet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n   valid_lft forever preferred_lft forever\ninet6 fe80::42:38ff:fe54:3c98/64 scope link\n   valid_lft forever preferred_lft forever\n```", "```\ntc qdisc ls\nqdisc noqueue 0: dev lo root refcnt 2\nqdisc fq_codel 0: dev enp0s31f6 root refcnt 2 limit 10240p flows 1024 quantum 1514\ntarget 5.0ms interval 100.0ms memory_limit 32Mb ecn\nqdisc noqueue 0: dev docker0 root refcnt 2\n```", "```\ncat /proc/config.gz| zcat  | grep -i BPF\n```", "```\nCONFIG_BPF=y\nCONFIG_BPF_SYSCALL=y\nCONFIG_NET_CLS_BPF=m\nCONFIG_BPF_JIT=y\nCONFIG_HAVE_EBPF_JIT=y\nCONFIG_BPF_EVENTS=y\n```", "```\nSEC(\"classifier\")\nstatic inline int classification(struct __sk_buff *skb) {\n  void *data_end = (void *)(long)skb->data_end;\n  void *data = (void *)(long)skb->data;\n  struct ethhdr *eth = data;\n\n  __u16 h_proto;\n  __u64 nh_off = 0;\n  nh_off = sizeof(*eth);\n\n  if (data + nh_off > data_end) {\n    return TC_ACT_OK;\n  }\n```", "```\n  if (h_proto == bpf_htons(ETH_P_IP)) {\n    if (is_http(skb, nh_off) == 1) {\n      trace_printk(\"Yes! It is HTTP!\\n\");\n    }\n  }\n\n  return TC_ACT_OK;\n}\n```", "```\n  void *data_end = (void *)(long)skb->data_end;\n  void *data = (void *)(long)skb->data;\n  struct iphdr *iph = data + nh_off;\n\n  if (iph + 1 > data_end) {\n    return 0;\n  }\n\n  if (iph->protocol != IPPROTO_TCP) {\n    return 0;\n  }\n  __u32 tcp_hlen = 0;\n```", "```\n  plength = ip_total_length - ip_hlen - tcp_hlen;\n  if (plength >= 7) {\n    unsigned long p[7];\n    int i = 0;\n    for (i = 0; i < 7; i++) {\n\n      p[i] = load_byte(skb, poffset + i);\n    }\n    int *value;\n    if ((p[0] == 'H') && (p[1] == 'T') && (p[2] == 'T') && (p[3] == 'P')) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n```", "```\nclang -O2 -target bpf -c classifier.c -o classifier.o\n```", "```\n# tc qdisc add dev eth0 handle 0: ingress\n# tc filter add dev eth0 ingress bpf obj classifier.o flowid 0:\n```", "```\npython3 -m http.server\n```", "```\n$ curl http://192.168.1.63:8080\n```", "```\n# tc exec bpf dbg\n```", "```\nRunning! Hang up with ^C!\n\n         python3-18456 [000] ..s1 283544.114997: 0: Yes! It is HTTP!\n         python3-18754 [002] ..s1 283566.008163: 0: Yes! It is HTTP!\n```", "```\n# tc qdisc del dev eth0 ingress\n```"]