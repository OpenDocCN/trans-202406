- en: Chapter 21\. Mobile Applications with React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One day in the late 1980s I was shopping with my parents when I spotted a small
    portable television. It was a battery-powered square box, with an antenna, small
    speaker, and a tiny black-and-white screen. I was blown away by the possibility
    of watching Saturday morning cartoons *in my backyard*. Though I’d never own one,
    just knowing that such a device existed made me feel like I was living in a science-fiction
    future world. Little did I know that as an adult, I’d carry a device in my pocket
    that would allow me to not only watch *Masters of the Universe*, but also to access
    infinite information, listen to music, play games, take notes, take photos, summon
    a car, buy things, check the weather, and complete an infinite number of other
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In 2007 Steve Jobs introduced the iPhone, saying “every once in a while a revolutionary
    product comes along that changes everything.” Sure, smartphones existed before
    2007, but it wasn’t until the rise of the iPhone (and subsequent rise of Android)
    that they were truly smart. In the intervening years, smartphone applications
    have evolved past the initial “anything goes” gold rush phase to be something
    that users demand quality from and have high expectations for. Today’s applications
    have high standards of functionality, interaction, and design. To add to the challenge,
    modern mobile application development is splintered across the Apple iOS and Android
    platforms, each using a different programming language and toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve probably already guessed it (it *is* in the book title), but JavaScript
    enables us as developers to write cross-platform mobile applications. In this
    chapter I’ll introduce the library that enables this, React Native, as well as
    the Expo tool chain. We’ll also clone the sample project code, which we’ll be
    building upon over the next few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: What We’re Building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Over the next few chapters we’ll build a mobile client for our social note
    application, Notedly. The goal is to use JavaScript and web technologies to develop
    an application a user can install on their mobile device. We’ll be implementing
    a subset of features so as to avoid too much repetition from the web application
    chapters. Specifically, our application will:'
  prefs: []
  type: TYPE_NORMAL
- en: Work on both iOS and Android operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load a note feed and individual user notes from our GraphQL API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use CSS and styled components for styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform standard and dynamic routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features will provide a solid overview of the core concepts of developing
    a mobile application with React Native. Before we get started, let’s take a closer
    look at the technologies we will be using.
  prefs: []
  type: TYPE_NORMAL
- en: How We’re Going To Build This
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Native is the core technology that we will be using to develop our application.
    React Native allows us to write applications in JavaScript, using React, and render
    them for the native mobile platform. This means that to users, there is no discernible
    difference between a React Native application and one written in the platform’s
    programming language. This is React Native’s key advantage over other popular
    web technology–based mobile frameworks, which traditionally wrapped a web view
    within an application shell. React Native has been used to develop apps by Facebook,
    Instagram, Bloomberg, Tesla, Skype, Walmart, Pinterest, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second key piece of our application development workflow is Expo, a set
    of tools and services that simplify React Native development through really useful
    features such as on-device previews, application builds, and extending the core
    React Native library. Before getting started with our development, I recommend
    that you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [*expo.io*](https://expo.io) and create an Expo account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Expo command-line tools by typing **`npm install expo-cli`** **`--global`**
    into your terminal application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to your Expo account locally by typing **`expo login`** in your terminal
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Expo Client application for your mobile device. Links to the Expo
    Client iOS and Android app can be found at [*expo.io/tools*](https://expo.io/tools).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to your account in the Expo Client application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we’ll again use [Apollo Client](https://oreil.ly/xR62T) to interact
    with data from our GraphQL API. Apollo Client comprises a collection of open source
    tools for working with GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start development, you’ll need to make a copy of the project
    starter files to your machine. The project’s [source code](https://github.com/javascripteverywhere/mobile)
    contains all of the scripts and references to third-party libraries that we will
    need to develop our application. To clone the code to your local machine, open
    the terminal, navigate to the directory where you keep your projects, and **`git
    clone`** the project repository. If you’ve worked through the API, web, and/or
    desktop chapters, you may also have already created a *notedly* directory to keep
    the project code organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing Third-Party Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By making a copy of the book’s starter code and running `npm install` in the
    directory, you avoid having to again run `npm install` for any of the individual
    third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: /src
  prefs: []
  type: TYPE_NORMAL
- en: This is the directory where you should perform your development as you follow
    along with the book.
  prefs: []
  type: TYPE_NORMAL
- en: /solutions
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the solutions for each chapter. If you get stuck, these
    are available for you to consult.
  prefs: []
  type: TYPE_NORMAL
- en: /final
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the final working project.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining files and project setup match the standard output of the `expo-cli`
    React Native generator, which you can run by typing **`expo init`** in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: App.js?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of the way that Expo’s build chain works, the *App.js* file in the root
    of the project directory is typically the application’s point of entry. To standardize
    our mobile project with the code found in the rest of the book, the *App.js* file
    is used only as a reference to a */src/Main.js* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the code on our local machines and our dependencies installed,
    let’s run the app. To start the application, in your terminal application, type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will open Expo’s “Metro Bundler” web application on a local port in our
    browser. From here, you can launch a local device simulator by clicking one of
    the “Run on…” links. You can also launch the application on any physical device
    with the Expo Client by scanning the QR code ([Figure 21-1](#metro_bundler)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of Expo''s Metro Bundler application](assets/jsev_2101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1\. Expo’s Metro Bundler after launching our application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Installing Device Simulators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run an iOS device simulator, you will need to download and install [Xcode](https://oreil.ly/bgde4)
    (macOS only). For Android, download [Android Studio](https://oreil.ly/bjqkn) and
    follow [Expo’s guide](https://oreil.ly/cUGsr) on setting up a device simulator.
    (See [Figure 21-2](#android_ios) for a comparison.) However, if you’re just getting
    started with mobile application development, I recommend starting with your own
    physical device.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of iOS and Android device simulators](assets/jsev_2102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-2\. Our application running side by side on iOS and Android device
    simulators
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’ve signed in to Expo from your computer’s terminal application as well
    as within the Expo Client application on your mobile device, you can open the
    application simply by opening the Expo Client application and clicking the Projects
    tab ([Figure 21-3](#handheld)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A photo of the application running on a physical device](assets/jsev_2103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-3\. With Expo Client, we can preview our application on a physical
    device
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With the code cloned to your local machine and the ability to preview the application
    with Expo Client, you have everything in place to develop a mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced React Native and Expo. We cloned the sample project
    code, ran it locally, and previewed it on a physical device or simulator. React
    Native empowers web and JavaScript developers to build fully featured native mobile
    applications, using the skills and tools they are familiar with. Expo simplifies
    the toolchain and lowers the barrier to entry for native mobile development. With
    these two tools, novices can easily get started with mobile development and web-savvy
    teams can quickly introduce a mobile application development skillset. In the
    next chapter we’ll take a closer look at React Native’s capabilities and introduce
    both routes and styles to our app.
  prefs: []
  type: TYPE_NORMAL
