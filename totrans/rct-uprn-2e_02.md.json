["```\nconst MyComponent = function() {\n  return 'I am so custom';\n};\n```", "```\nconst MyComponent = function() {\n  return React.createElement('span', null, 'I am so custom');\n};\n```", "```\nReactDOM.render(\n  MyComponent(),\n  document.getElementById('app')\n);\n```", "```\nconst MyComponent = function() {\n  return <span>I am so custom</span>;\n};\n```", "```\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('app')\n);\n```", "```\nclass MyComponent extends React.Component {\n  render() {\n    return React.createElement('span', null, 'I am so custom');\n    // or with JSX:\n    // return <span>I am so custom</span>;\n  }\n}\n```", "```\nReactDOM.render(\n  React.createElement(MyComponent),\n  document.getElementById('app')\n);\n```", "```\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('app')\n);\n```", "```\nclass MyComponent extends React.Component {\n  render() {\n    return <span>My name is <em>{this.props.name}</em></span>;\n  }\n}\n```", "```\nReactDOM.render(\n  <MyComponent name=\"Bob\" />,\n  document.getElementById('app')\n);\n```", "```\nconst MyComponent = function(props) {\n  return <span>My name is <em>{props.name}</em></span>;\n};\n```", "```\n// 02.07.props.destructuring.html in the book's repository\nconst MyComponent = function({name}) {\n  return <span>My name is <em>{name}</em></span>;\n};\n```", "```\n// 02.08.props.destruct.multi.html in the book's repository\nconst MyComponent = function({name, job}) {\n  return <span>My name is <em>{name}</em>, the {job}</span>;\n};\nReactDOM.render(\n  <MyComponent name=\"Bob\" job=\"engineer\"/>,\n  document.getElementById('app')\n);\n```", "```\nconst MyComponent = function({name, job}) {\n  return <span>My name is <em>{name}</em>, the {job}</span>;\n};\nMyComponent.defaultProps = {\n  job: 'engineer',\n};\nReactDOM.render(\n  <MyComponent name=\"Bob\" />,\n  document.getElementById('app')\n);\n```", "```\nclass MyComponent extends React.Component {\n  render() {\n    return (\n      <span>My name is <em>{this.props.name}</em>,\n      the {this.props.job}</span>\n    );\n  }\n}\nMyComponent.defaultProps = {\n  job: 'engineer',\n};\nReactDOM.render(\n  <MyComponent name=\"Bob\" />,\n  document.getElementById('app')\n);\n```", "```\nMy name is *Bob*, the engineer\n\n```", "```\nReactDOM.render(\n  <TextAreaCounter text=\"Bob\" />,\n  document.getElementById('app')\n);\n```", "```\nclass TextAreaCounter extends React.Component {\n  render() {\n    const text = this.props.text;\n    return (\n      <div>\n        <textarea defaultValue={text}/>\n        <h3>{text.length}</h3>\n      </div>\n    );\n  }\n}\nTextAreaCounter.defaultProps = {\n  text: 'Count me as I type',\n};\n```", "```\nclass TextAreaCounter extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n  render() {\n    const text = 'text' in this.state ? this.state.text : this.props.text;\n    return (\n      <div>\n        <textarea defaultValue={text} />\n        <h3>{text.length}</h3>\n      </div>\n    );\n  }\n}\n```", "```\nonTextChange(event) {\n  this.setState({\n    text: event.target.value,\n  });\n}\n```", "```\nrender() {\n  const text = 'text' in this.state ? this.state.text : this.props.text;\n  return (\n    <div>\n      <textarea\n        value={text}\n        onChange={event => this.onTextChange(event)}\n      />\n      <h3>{text.length}</h3>\n    </div>\n  );\n}\n```", "```\nonChange={event => this.onTextChange(event)}\n```", "```\n<button onclick=\"doStuff\">\n```", "```\n<div id=\"parent\">\n  <button id=\"ok\">OK</button>\n  <button id=\"cancel\">Cancel</button>\n</div>\n\n<script>\ndocument.getElementById('parent').addEventListener('click', function(event) {\n  const button = event.target;\n\n  // do different things based on which button was clicked\n  switch (button.id) {\n    case 'ok':\n      console.log('OK!');\n      break;\n    case 'cancel':\n      console.log('Cancel');\n      break;\n    default:\n      new Error('Unexpected button ID');\n  };\n});\n</script>\n```", "```\nonChange={event => this.onTextChange(event)}\n```", "```\nonChange={this.onTextChange.bind(this)}\n```", "```\nconstructor() {\n  super();\n  this.state = {};\n  this.onTextChange = this.onTextChange.bind(this);\n}\n// ....\n<textarea\n  value={text}\n  onChange={this.onTextChange}\n/>\n```", "```\nclass TextAreaCounter extends React.Component {\n  constructor() {\n    // ...\n    this.onTextChange = this.onTextChange.bind(this);\n  }\n\n  onTextChange(event) {\n    // ...\n  }\n}\n```", "```\nclass TextAreaCounter extends React.Component {\n  constructor() {\n    // ...\n  }\n\n  onTextChange = (event) => {\n    // ...\n  };\n}\n```", "```\n// Warning: Anti-pattern\nthis.state = {\n  text: props.text,\n};\n```", "```\nconst myTextAreaCounter = ReactDOM.render(\n  <TextAreaCounter text=\"Bob\" />,\n  document.getElementById('app')\n);\n```", "```\nmyTextAreaCounter.setState({text: \"Hello outside world!\"});\n```", "```\nconst reactAppNode = ReactDOM.findDOMNode(myTextAreaCounter);\n```", "```\nclass TextAreaCounter extends React.Component {\n  // ...\n\n  componentDidMount() {\n    console.log('componentDidMount');\n  }\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log('componentDidUpdate     ', prevProps, prevState, snapshot);\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('getSnapshotBeforeUpdate', prevProps, prevState);\n    return 'hello';\n  }\n  shouldComponentUpdate(newProps, newState) {\n    console.log('shouldComponentUpdate  ', newProps, newState);\n    return true;\n  }\n\n  // ...\n}\n```", "```\nReactDOM.render(React.createElement('p', null, 'Enough counting!'), app);\n```", "```\ncomponentDidUpdate(prevProps, prevState) {\n  if (this.state.text.length > 3) {\n    this.setState({\n      text: prevState.text || this.props.text,\n    });\n  }\n}\n```", "```\nshouldComponentUpdate(_, newState) {\n  return newState.text.length > 3 ? false : true;\n}\n```", "```\nclass LifecycleLoggerComponent extends React.Component {\n  static getName() {}\n  componentDidMount() {\n    console.log(this.constructor.getName() + '::componentDidMount');\n  }\n  componentWillUnmount() {\n    console.log(this.constructor.getName() + '::componentWillUnmount');\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(this.constructor.getName() + '::componentDidUpdate');\n  }\n}\n```", "```\nclass Counter extends LifecycleLoggerComponent {\n  static getName() {\n    return 'Counter';\n  }\n  render() {\n    return <h3>{this.props.count}</h3>;\n  }\n}\nCounter.defaultProps = {\n  count: 0,\n};\n```", "```\nclass TextAreaCounter extends LifecycleLoggerComponent {\n  static getName() {\n    return 'TextAreaCounter';\n  }\n  // ....\n}\n```", "```\nrender() {\n  const text = 'text' in this.state ? this.state.text : this.props.text;\n  return (\n    <div>\n      <textarea\n        value={text}\n        onChange={this.onTextChange}\n      />\n      {text.length > 0\n        ? <Counter count={text.length} />\n        : null\n      }\n    </div>\n  );\n}\n```", "```\nrender() {\n  const text = 'text' in this.state\n    ? this.state.text\n    : this.props.text;\n  let counter = null;\n  if (text.length > 0) {\n    counter = <Counter count={text.length} />;\n  }\n  return (\n    <div>\n      <textarea\n        value={text}\n        onChange={this.onTextChange}\n      />\n      {counter}\n    </div>\n  );\n}\n```", "```\nCounter::componentDidMount\nTextAreaCounter::componentDidMount\n```", "```\nCounter::componentDidUpdate\nTextAreaCounter::componentDidUpdate\nCounter::componentDidUpdate\nTextAreaCounter::componentDidUpdate\n```", "```\nCounter::componentWillUnmount\nTextAreaCounter::componentDidUpdate\n```", "```\nCounter::componentDidMount\nTextAreaCounter::componentDidUpdate\n```", "```\nclass LifecycleLoggerComponent extends React.PureComponent {\n  // ... no other changes\n}\n```", "```\nrender() {\n  console.log(this.constructor.getName() + '::render');\n  // ... no other changes\n}\n```", "```\nTextAreaCounter::render\nCounter::render\nCounter::componentDidMount\nTextAreaCounter::componentDidMount\n```", "```\nTextAreaCounter::render\nCounter::render\nCounter::componentDidUpdate\nTextAreaCounter::componentDidUpdate\n```", "```\nTextAreaCounter::render\nTextAreaCounter::componentDidUpdate\n```"]