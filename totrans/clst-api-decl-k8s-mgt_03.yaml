- en: Chapter 3\. How Cluster API Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章\. 集群 API 的工作原理
- en: Cluster API manages clusters using a structure analogous to Kubernetes itself.
    Where Kubernetes uses a small number of management nodes to oversee a larger number
    of worker nodes, Cluster API uses a *management cluster* to oversee *workload
    clusters*. The Cluster API providers and controllers run in the management cluster,
    ensuring that each workload cluster matches its declared state.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 集群 API 使用类似于 Kubernetes 本身的结构来管理集群。Kubernetes 使用少量管理节点监督大量工作节点，而集群 API 使用*管理集群*监督*工作负载集群*。集群
    API 提供者和控制器在管理集群中运行，确保每个工作负载集群与其声明的状态匹配。
- en: The desired states for a workload cluster and all its nodes are defined in YAML
    manifest files based on the schemas of CRDs that define cluster components. When
    you create a cluster, you use manifest files to declaratively configure its control
    plane, worker nodes, and other resources. The management cluster then uses a controller
    to manage each resource based on its CRD. [Figure 3-1](#fig_1_cluster_api_architecture)
    shows the overall architecture of a Cluster API deployment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载集群及其所有节点的期望状态是根据定义集群组件的 CRD 的模式在 YAML 清单文件中定义的。当您创建一个集群时，您使用清单文件以声明方式配置其控制平面、工作节点和其他资源。然后管理集群使用控制器基于其
    CRD 管理每个资源。[图 3-1](#fig_1_cluster_api_architecture) 显示了集群 API 部署的整体架构。
- en: '![Cluster API architecture](assets/cdkm_0301.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![集群 API 架构](assets/cdkm_0301.png)'
- en: Figure 3-1\. Cluster API architecture
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 集群 API 架构
- en: Cluster API can manage multiple workload clusters in completely different environments.
    Infrastructure providers implement the abstraction that lets the team manage these
    differentiated clusters with a single consistent interface. Each host or infrastructure
    provider creates its own Cluster API provider implementation and its own versions
    of CRDs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 集群 API 可以在完全不同的环境中管理多个工作负载集群。基础设施提供者实现了让团队使用单一一致接口管理这些不同集群的抽象。每个主机或基础设施提供者都创建自己的集群
    API 提供者实现和自己的 CRD 版本。
- en: Colloquially, the term *infrastructure provider* can refer to either the infrastructure
    host or the module that provisions cluster components on the host. To avoid confusion,
    the module is sometimes referred to as an *infrastructure provider implementation**.*
    There is already a rich ecosystem for Cluster API providers such as CAPA (AWS
    provider), CAPV (VMware vSphere provider), CAPZ (Azure provider), CAPMAAS (Canonical
    MAAS provider), and so on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在口语中，术语*基础设施提供者*可以指基础设施主机或在主机上提供集群组件的模块。为了避免混淆，有时将该模块称为*基础设施提供者实现*。已经有了丰富的集群
    API 提供者生态系统，如 CAPA（AWS 提供者）、CAPV（VMware vSphere 提供者）、CAPZ（Azure 提供者）、CAPMAAS（Canonical
    MAAS 提供者）等。
- en: Management Cluster
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理集群
- en: In a Cluster API deployment, the management cluster runs all the providers and
    controllers that manage workload cluster lifecycles and handle the particulars
    of the infrastructure where each cluster is installed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群 API 部署中，管理集群运行所有提供者和控制器，管理工作负载集群的生命周期，并处理每个集群安装的基础设施的细节。
- en: '[Figure 3-2](#fig_2_management_cluster_architecture) shows the architecture
    of a management cluster.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-2](#fig_2_management_cluster_architecture) 显示了管理集群的架构。'
- en: '![Management cluster architecture](assets/cdkm_0302.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![管理集群架构](assets/cdkm_0302.png)'
- en: Figure 3-2\. Management cluster architecture
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2\. 管理集群架构
- en: The Cluster API Core Manager manages the lifecycle of each cluster using controllers
    to bring the cluster to match the state defined in YAML manifests that implement
    instances of Cluster API CRDs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 集群 API 核心管理器使用控制器管理每个集群的生命周期，将集群带到与实现 Cluster API CRD 实例的 YAML 清单中定义的状态匹配。
- en: Cluster API manages the control plane on each workload cluster using the Kubernetes
    `KubeadmControlPlane` controller. The providers handle bootstrap configurations
    and infrastructure.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 集群 API 使用 Kubernetes `KubeadmControlPlane` 控制器管理每个工作负载集群上的控制平面。提供者处理引导配置和基础设施。
- en: Cluster API Tools
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群 API 工具
- en: Cluster API provides a number of tools for managing workload clusters. The main
    way that an administrator interacts with a cluster is through the command-line
    tool `clusterctl`. For managing control planes on workload clusters, Cluster API
    also provides the `kubeadm`-based control plane.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 集群 API 提供了许多工具来管理工作负载集群。管理员与集群交互的主要方式是通过命令行工具 `clusterctl`。对于管理工作负载集群上的控制平面，集群
    API 还提供了基于 `kubeadm` 的控制平面。
- en: clusterctl
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: clusterctl
- en: The command-line tool `clusterctl` simplifies the tasks of configuring, creating,
    deploying, and managing clusters by generating CRDs for you so that you don’t
    have to write your own manifest files. You can use `clusterctl` to install Cluster
    API components, transform a Kubernetes cluster into a management cluster, create
    workload clusters, upgrade clusters, and move workload clusters from one management
    cluster to another.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具 `clusterctl` 简化了配置、创建、部署和管理集群的任务，它会为您生成自定义资源定义（CRD），因此您无需编写自己的清单文件。您可以使用
    `clusterctl` 安装 Cluster API 组件，将 Kubernetes 集群转换为管理集群，创建工作负载集群，升级集群，并将工作负载集群从一个管理集群移到另一个管理集群。
- en: kubeadm-Based Control Plane
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 kubeadm 的控制平面
- en: The `kubeadm`-based control plane (KCP) is a declarative API for managing Kubernetes
    control planes. You can use KCP to deploy, scale, and manage all the control plane
    components, including the API server, scheduler, controller manager, etcd data
    store, and networking services. KCP provides fine-grained control over the configuration
    of the control plane.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 `kubeadm` 的控制平面（KCP）是管理 Kubernetes 控制平面的声明性 API。您可以使用 KCP 部署、扩展和管理所有控制平面组件，包括
    API 服务器、调度器、控制器管理器、etcd 数据存储和网络服务。KCP 提供对控制平面配置的精细控制。
- en: With KCP, you can also distribute control plane nodes across failure domains
    (usually availability zones) to make multiple control plane failures less likely.
    You specify the number of control plane nodes and where to deploy them declaratively,
    and the control plane controller ensures that the nodes are maintained there.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 KCP，您还可以跨故障域（通常是可用性区域）分布控制平面节点，以减少多个控制平面故障的可能性。您可以声明性地指定控制平面节点的数量及其部署位置，控制平面控制器会确保在这些位置上维护节点。
- en: Working with Cluster API
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Cluster API
- en: 'Deploying Cluster API involves two Kubernetes clusters: one is a temporary
    cluster called the *bootstrap cluster*, which you use to create a second cluster
    that becomes the permanent Cluster API management cluster. The bootstrap cluster
    generates the cluster certificates, initializes the management cluster’s control
    plane, and installs core Kubernetes components.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Cluster API 包括两个 Kubernetes 集群：一个是临时集群称为*引导集群*，用于创建第二个集群，成为永久的 Cluster API
    管理集群。引导集群生成集群证书，初始化管理集群的控制平面，并安装核心 Kubernetes 组件。
- en: 'The high-level steps to deploy Cluster API are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Cluster API 的高级步骤如下：
- en: Create a Kubernetes cluster to use as a temporary bootstrap cluster.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Kubernetes 集群作为临时引导集群。
- en: Make the bootstrap cluster into a Cluster API management cluster.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将引导集群变成 Cluster API 管理集群。
- en: Use Cluster API on the temporary management cluster to bring up a workload cluster.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在临时管理集群上使用 Cluster API 启动工作负载集群。
- en: Transfer Cluster API resources from the temporary management cluster to the
    workload cluster and convert the workload cluster into your permanent management
    cluster.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Cluster API 资源从临时管理集群转移到工作负载集群，并将工作负载集群转换为您的永久管理集群。
- en: You can use a few simple `clusterctl` commands to perform these steps. After
    the new management cluster takes over, `clusterctl` automatically destroys the
    temporary management cluster.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用几个简单的 `clusterctl` 命令执行这些步骤。新管理集群接管后，`clusterctl` 会自动销毁临时管理集群。
- en: Once you have the permanent Cluster API management cluster running, you can
    create workload clusters. Clusters and their components are defined in YAML manifests
    based on the CRDs. You can use `clusterctl` to generate YAML manifests, specifying
    the infrastructure, Kubernetes version, number of control and worker nodes, and
    so on. Cluster API uses the `Machine`, `MachineSet`, and `MachineDeployment` CRDs
    to bring up the nodes and start the cluster.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦永久的 Cluster API 管理集群运行起来，您可以创建工作负载集群。集群及其组件根据 CRD 在 YAML 清单中定义。您可以使用 `clusterctl`
    生成 YAML 清单，指定基础设施、Kubernetes 版本、控制节点和工作节点的数量等。Cluster API 使用 `Machine`、`MachineSet`
    和 `MachineDeployment` CRD 来启动节点并启动集群。
