- en: Chapter 3\. How Cluster API Works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cluster API manages clusters using a structure analogous to Kubernetes itself.
    Where Kubernetes uses a small number of management nodes to oversee a larger number
    of worker nodes, Cluster API uses a *management cluster* to oversee *workload
    clusters*. The Cluster API providers and controllers run in the management cluster,
    ensuring that each workload cluster matches its declared state.
  prefs: []
  type: TYPE_NORMAL
- en: The desired states for a workload cluster and all its nodes are defined in YAML
    manifest files based on the schemas of CRDs that define cluster components. When
    you create a cluster, you use manifest files to declaratively configure its control
    plane, worker nodes, and other resources. The management cluster then uses a controller
    to manage each resource based on its CRD. [Figure 3-1](#fig_1_cluster_api_architecture)
    shows the overall architecture of a Cluster API deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Cluster API architecture](assets/cdkm_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. Cluster API architecture
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Cluster API can manage multiple workload clusters in completely different environments.
    Infrastructure providers implement the abstraction that lets the team manage these
    differentiated clusters with a single consistent interface. Each host or infrastructure
    provider creates its own Cluster API provider implementation and its own versions
    of CRDs.
  prefs: []
  type: TYPE_NORMAL
- en: Colloquially, the term *infrastructure provider* can refer to either the infrastructure
    host or the module that provisions cluster components on the host. To avoid confusion,
    the module is sometimes referred to as an *infrastructure provider implementation**.*
    There is already a rich ecosystem for Cluster API providers such as CAPA (AWS
    provider), CAPV (VMware vSphere provider), CAPZ (Azure provider), CAPMAAS (Canonical
    MAAS provider), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Management Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a Cluster API deployment, the management cluster runs all the providers and
    controllers that manage workload cluster lifecycles and handle the particulars
    of the infrastructure where each cluster is installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-2](#fig_2_management_cluster_architecture) shows the architecture
    of a management cluster.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Management cluster architecture](assets/cdkm_0302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-2\. Management cluster architecture
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Cluster API Core Manager manages the lifecycle of each cluster using controllers
    to bring the cluster to match the state defined in YAML manifests that implement
    instances of Cluster API CRDs.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API manages the control plane on each workload cluster using the Kubernetes
    `KubeadmControlPlane` controller. The providers handle bootstrap configurations
    and infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cluster API provides a number of tools for managing workload clusters. The main
    way that an administrator interacts with a cluster is through the command-line
    tool `clusterctl`. For managing control planes on workload clusters, Cluster API
    also provides the `kubeadm`-based control plane.
  prefs: []
  type: TYPE_NORMAL
- en: clusterctl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The command-line tool `clusterctl` simplifies the tasks of configuring, creating,
    deploying, and managing clusters by generating CRDs for you so that you don’t
    have to write your own manifest files. You can use `clusterctl` to install Cluster
    API components, transform a Kubernetes cluster into a management cluster, create
    workload clusters, upgrade clusters, and move workload clusters from one management
    cluster to another.
  prefs: []
  type: TYPE_NORMAL
- en: kubeadm-Based Control Plane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `kubeadm`-based control plane (KCP) is a declarative API for managing Kubernetes
    control planes. You can use KCP to deploy, scale, and manage all the control plane
    components, including the API server, scheduler, controller manager, etcd data
    store, and networking services. KCP provides fine-grained control over the configuration
    of the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: With KCP, you can also distribute control plane nodes across failure domains
    (usually availability zones) to make multiple control plane failures less likely.
    You specify the number of control plane nodes and where to deploy them declaratively,
    and the control plane controller ensures that the nodes are maintained there.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Cluster API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deploying Cluster API involves two Kubernetes clusters: one is a temporary
    cluster called the *bootstrap cluster*, which you use to create a second cluster
    that becomes the permanent Cluster API management cluster. The bootstrap cluster
    generates the cluster certificates, initializes the management cluster’s control
    plane, and installs core Kubernetes components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level steps to deploy Cluster API are:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Kubernetes cluster to use as a temporary bootstrap cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the bootstrap cluster into a Cluster API management cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Cluster API on the temporary management cluster to bring up a workload cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transfer Cluster API resources from the temporary management cluster to the
    workload cluster and convert the workload cluster into your permanent management
    cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use a few simple `clusterctl` commands to perform these steps. After
    the new management cluster takes over, `clusterctl` automatically destroys the
    temporary management cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the permanent Cluster API management cluster running, you can
    create workload clusters. Clusters and their components are defined in YAML manifests
    based on the CRDs. You can use `clusterctl` to generate YAML manifests, specifying
    the infrastructure, Kubernetes version, number of control and worker nodes, and
    so on. Cluster API uses the `Machine`, `MachineSet`, and `MachineDeployment` CRDs
    to bring up the nodes and start the cluster.
  prefs: []
  type: TYPE_NORMAL
