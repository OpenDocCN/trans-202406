- en: Chapter 2\. Developer Workflows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 开发工作流程
- en: Kubernetes was built for reliably operating software. It simplifies deploying
    and managing applications with an application-oriented API, self-healing properties,
    and useful tools like Deployments for zero downtime rollout of software. Although
    all these tools are useful, they don’t do much to make it easier to develop applications
    for Kubernetes. This is where developer workflows come into play. Even though
    many clusters are designed to run production applications and thus are rarely
    accessed by developer workflows, it is critical to enable development workflows
    to target Kubernetes, and this typically means having a cluster or at least part
    of a cluster that is intended for development. Setting up such a cluster to facilitate
    easy development of applications for Kubernetes is critical to ensuring success
    with Kubernetes. If there is no code being built for your cluster, the cluster
    itself isn’t accomplishing much.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的设计初衷是可靠地运行软件。它通过面向应用的 API、自愈特性以及诸如部署（Deployments）之类的有用工具简化了应用程序的部署和管理，实现了零停机滚动升级。虽然所有这些工具都很有用，但它们并没有多少帮助来简化为
    Kubernetes 开发应用程序的过程。这就是开发工作流程发挥作用的地方。尽管许多集群设计用于运行生产应用程序，因此很少被开发人员工作流程访问，但关键是要支持开发工作流程以面向
    Kubernetes，通常这意味着需要一个或部分用于开发的集群。建立这样一个集群来便捷地开发 Kubernetes 应用程序对确保 Kubernetes 成功非常关键。如果你的集群中没有代码正在构建，那么集群本身并不能完成多少工作。
- en: Goals
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标
- en: Before we describe the best practices for building out development clusters,
    it is worth stating our goals for such clusters. Obviously, the ultimate goal
    is to enable developers to rapidly and easily build applications on Kubernetes,
    but what does that really mean in practice, and how is that reflected in practical
    features of the development cluster?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们描述如何构建开发集群的最佳实践之前，值得说明我们对这些集群的目标。显然，最终目标是使开发人员能够在 Kubernetes 上快速轻松地构建应用程序，但在实践中，这究竟意味着什么，又如何在开发集群的实际特性中体现出来呢？
- en: To answer this, let’s start by identifying phases of developer interaction with
    the cluster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答这个问题，让我们首先识别开发人员与集群交互的各个阶段。
- en: The first phase is *onboarding*. This is when a new developer joins the team.
    This phase includes giving the user a login to the cluster as well as getting
    them oriented to their first deployment. The goal for this phase is to get a developer’s
    feet wet in a minimal amount of time. You should set a key performance indicator
    (KPI) goal for this process. A reasonable goal would be that a user could go from
    nothing to the current application at HEAD running in less than half an hour.
    Every time someone is new to the team, test how you are doing against this goal.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段是*入职*。这是新开发人员加入团队的时候。这一阶段包括为用户提供集群登录权限，并让他们了解他们的第一个部署。这一阶段的目标是在最短的时间内让开发人员尝试水。你应该为这个过程设定一个关键绩效指标（KPI）目标。一个合理的目标是，用户可以在半小时内从零到当前应用程序的
    HEAD 运行。每当有新成员加入团队时，都要测试你们对这个目标的执行情况。
- en: The second phase is *developing*. This is the day-to-day activity of the developer.
    The goal for this phase is to ensure rapid iteration and debugging. Developers
    need to quickly and repeatedly push code to the cluster. They also need to be
    able to easily test their code and debug it when it isn’t operating properly.
    The KPI for this phase is more challenging to measure, but you can estimate it
    by measuring the time to get a pull request (PR) or change up and running in the
    cluster, or with surveys of the user’s perceived productivity, or both. You will
    also be able to measure this in the overall productivity of your teams.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶段是*开发*。这是开发人员的日常活动。这一阶段的目标是确保快速迭代和调试。开发人员需要能够快速重复地将代码推送到集群，并且需要能够轻松地测试和调试代码，以确保其正常运行。这一阶段的关键绩效指标较难测量，但可以通过测量将拉取请求（PR）或更改在集群中运行的时间，或者通过用户感知生产力的调查来估算。你还可以通过团队的整体生产力来衡量这一指标。
- en: The third phase is *testing*. This phase is interweaved with developing and
    is used to validate the code before submission and merging. The goals for this
    phase are two-fold. First, the developer should be able to run all tests for their
    environment before a PR is submitted. Second, all tests should automatically run
    before code is merged into the repository. In addition to these goals you should
    also set a KPI for the length of time the tests take to run. As your project becomes
    more complex, it’s natural for more and more tests to take a longer time. As this
    happens, it might become valuable to identify a smaller set of smoke tests that
    a developer can use for initial validation before submitting a PR. You should
    also have a very strict KPI around *test flakiness*. A flaky test is one that
    occasionally (or not so occasionally) fails. In any reasonably active project,
    a flakiness rate of more than one failure per one thousand runs will lead to developer
    friction. You need to ensure that your cluster environment does not lead to flaky
    tests. Whereas sometimes flaky tests occur due to problems in the code, they can
    also occur because of interference in the development environment (e.g., running
    out of resources and noisy neighbors). You should ensure that your development
    environment is free of such issues by measuring test flakiness and acting quickly
    to fix it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第三阶段是*测试*。这个阶段与开发交织在一起，用于在提交和合并之前验证代码的有效性。这个阶段的目标有两个。首先，开发者应该能够在提交 PR 之前在他们的环境中运行所有的测试。其次，所有的测试应该在代码合并到仓库之前自动运行。除了这些目标之外，你还应该为测试运行时间设置一个关键绩效指标（KPI）。随着项目变得越来越复杂，测试需要的时间自然会变长。在这种情况下，识别一组更小的烟雾测试，供开发者在提交
    PR 前进行初步验证，可能会很有价值。你还应该在*测试的不稳定性*周围设定非常严格的 KPI。不稳定的测试偶尔会失败。在任何相对活跃的项目中，每千次运行超过一个失败的不稳定性率都会导致开发者之间的摩擦。你需要确保你的集群环境不会产生不稳定的测试。有时不稳定的测试是由于代码问题引起的，但也可能是由于开发环境中的干扰（例如资源耗尽和嘈杂的邻居）引起的。你应该通过测量测试的不稳定性并迅速采取措施来修复，确保你的开发环境没有这些问题。
- en: Building a Development Cluster
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建开发集群
- en: When people begin to think about developing on Kubernetes, one of the first
    choices that occurs is whether to build a single large development cluster or
    to have one cluster per developer. Note that this choice only makes sense in an
    environment in which dynamic cluster creation is easy, such as the public cloud.
    In physical environments, it’s possible that one large cluster is the only choice.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们开始考虑在 Kubernetes 上进行开发时，首先要做出的选择之一是是构建一个单一的大型开发集群，还是每个开发者一个集群。请注意，这个选择只在动态创建集群容易的环境中才有意义，比如公共云。在物理环境中，可能只有一个大型集群是唯一的选择。
- en: 'If you do have a choice, you should consider the pros and cons of each option.
    If you choose to have a development cluster per user, the significant downside
    of this approach is that it will be more expensive and less efficient, and you
    will have a large number of different development clusters to manage. The extra
    costs come from the fact that each cluster is likely to be heavily underutilized.
    Also, with developers creating different clusters, it becomes more difficult to
    track and garbage-collect resources that are no longer in use. The advantage of
    the cluster-per-user approach is simplicity: each developer can self-service manage
    their own cluster, and from isolation, it’s much more difficult for different
    developers to step on one another’s toes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有选择的余地，你应该考虑每个选项的利弊。如果你选择每个用户一个开发集群，这种方法的重大缺点是成本更高、效率更低，而且你将需要管理大量不同的开发集群。额外的成本来自于每个集群可能严重闲置的事实。此外，由于开发者创建了不同的集群，跟踪和回收不再使用的资源变得更加困难。集群每用户的方法的优势在于简单性：每个开发者可以自主管理他们自己的集群，并且由于隔离性，不同开发者之间更难互相干扰。
- en: On the other hand, a single development cluster will be significantly more efficient;
    you can likely sustain the same number of developers on a shared cluster for one-third
    the price (or less). Plus, it’s much easier for you to install shared cluster
    services, for example, monitoring and logging, which makes it significantly easier
    to produce a developer-friendly cluster. The downside of a shared development
    cluster is the process of user management and potential interference between developers.
    Because the process of adding new users and namespaces to the Kubernetes cluster
    isn’t currently streamlined, you will need to activate a process to onboard new
    developers. Although Kubernetes resource management and Role-Based Access Control
    (RBAC) can reduce the probability that two developers conflict, it is always possible
    that a user will *brick* the development cluster by consuming too many resources
    so that other applications and developers won’t schedule. Additionally, you will
    still need to ensure that developers don’t leak and forget about resources they’ve
    created. This is somewhat easier, though, than the approach in which developers
    each create their own clusters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，单个开发集群的效率显著提高；你可能能够以三分之一的价格（甚至更少）维持相同数量的开发人员在共享集群上工作。此外，你可以更轻松地安装共享集群服务，例如监控和日志记录，这显著提高了开发人员友好型集群的生产效率。共享开发集群的不利之处在于用户管理的过程以及开发人员之间的潜在干扰。因为目前添加新用户和命名空间到
    Kubernetes 集群的流程并不是特别流畅，你需要启动一个新的开发者入职流程。尽管 Kubernetes 资源管理和基于角色的访问控制（RBAC）可以减少两位开发者发生冲突的可能性，但仍然存在用户可能因为消耗过多资源而使开发集群“砖化”，导致其他应用程序和开发者无法调度的情况。此外，你仍需确保开发者不会泄漏和忘记他们创建的资源。然而，这比每位开发者各自创建自己的集群的方法要容易一些。
- en: Even though both approaches are feasible, generally, our recommendation is to
    have a single large cluster for all developers. Although there are challenges
    in interference between developers, they can be managed, and ultimately the cost
    efficiency and ability to easily add organization-wide capabilities to the cluster
    outweigh the risks of interference. But you will need to invest in a process for
    onboarding developers, resource management, and garbage collection. Our recommendation
    would be to try a single large cluster as a first option. As your organization
    grows (or if it is already large), you might consider having a cluster per team
    or group (10 to 20 people) rather than a giant cluster for hundreds of users.
    This can make both billing and management easier. Moving to multiple clusters
    can make it more complicated to ensure consistency, but tools like fleet management
    can make it easier to manage groups of clusters.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管两种方法都可行，但一般我们建议为所有开发者使用单个大集群。尽管开发者之间的干扰存在挑战，但可以通过管理来解决，而最终的成本效益和轻松为集群添加组织范围的功能，大大超过了干扰的风险。但你需要投资于开发者入职流程、资源管理和垃圾收集的流程。我们建议首先尝试单个大集群作为首选。随着组织的增长（或者如果已经很大），你可能会考虑为每个团队或小组（10至20人）设置一个集群，而不是为数百名用户设置一个巨大的集群。这样可以更容易地进行计费和管理。转向多个集群可能会使保持一致性变得更加复杂，但类似于舰队管理的工具可以更轻松地管理多个集群组。
- en: Setting Up a Shared Cluster for Multiple Developers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为多个开发者设置共享集群
- en: When setting up a large cluster, the primary goal is to ensure that multiple
    users can simultaneously use the cluster without stepping on one another’s toes.
    The obvious way to separate your different developers is with Kubernetes namespaces.
    Namespaces can serve as scopes for the deployment of services so that one user’s
    frontend service doesn’t interfere with another user’s frontend service. Namespaces
    are also scopes for RBAC, ensuring that one developer cannot accidentally delete
    another developer’s work. Thus, in a shared cluster it makes sense to use a namespace
    as a developer’s workspace. The processes for onboarding users and creating and
    securing a namespace are described in the following sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置大集群时，主要目标是确保多个用户可以同时使用集群而不会相互干扰。区分不同开发者的明显方法是使用 Kubernetes 命名空间。命名空间可以作为服务部署的作用域，以便一个用户的前端服务不会干扰另一个用户的前端服务。命名空间还是
    RBAC 的作用域，确保一个开发者不会意外删除另一个开发者的工作。因此，在共享集群中使用命名空间作为开发者的工作空间是有意义的。关于用户入职流程、创建和保护命名空间的具体流程将在以下章节中详细描述。
- en: Onboarding Users
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户入职流程
- en: Before you can assign a user to a namespace, you have to onboard that user to
    the Kubernetes cluster itself. To achieve this, there are two options. You can
    use certificate-based authentication to create a new certificate for the user
    and give them a *kubeconfig* file that they can use to log in, or you can configure
    your cluster to use an external identity system (for example, Microsoft Entra
    ID or AWS Identity and Access Management [IAM]) for cluster access.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在将用户分配到命名空间之前，您必须将该用户加入到 Kubernetes 集群本身。为了实现这一点，有两种选择。您可以使用基于证书的认证来为用户创建一个新的证书，并提供给他们一个*kubeconfig*文件，以便他们登录；或者您可以配置您的集群以使用外部身份系统（例如，Microsoft
    Entra ID 或 AWS 身份和访问管理 [IAM]）来访问集群。
- en: In general, using an external identity system is a best practice because it
    doesn’t require that you maintain two different sources of identity. Additionally,
    most external systems use short-lived tokens rather than long-lived certificates
    so the accidental disclosure of a token has a time-bound security impact. If at
    all possible you should restrict your developers to proving their identity via
    an external identity provider.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，使用外部身份系统是一种最佳实践，因为它不需要您维护两个不同的身份来源。此外，大多数外部系统使用短暂的令牌而不是长期的证书，因此意外泄露令牌会产生有时间限制的安全影响。如果可能的话，您应该限制开发人员通过外部身份提供者证明他们的身份。
- en: Unfortunately, in some cases this isn’t possible and you need to use certificates.
    Fortunately, you can use the Kubernetes certificate API for creating and managing
    such certificates. Here’s the process for adding a new user to an existing cluster.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在某些情况下这是不可能的，您需要使用证书。幸运的是，您可以使用 Kubernetes 证书 API 来创建和管理这些证书。以下是向现有集群添加新用户的流程。
- en: 'First, you need to generate a certificate-signing request to generate a new
    certificate. Here is a simple Go program to do this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要生成一个证书签名请求来生成一个新的证书。以下是一个简单的 Go 程序来执行此操作：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can run this as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下步骤运行此操作：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This creates files called *client-key.pem* and *client.csr*. You can then run
    the following script to create and download a new certificate:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建名为*client-key.pem*和*client.csr*的文件。然后，您可以运行以下脚本来创建和下载一个新的证书：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This script prints out the final information that you can add to a *kubeconfig*
    file to enable that user. Of course, the user has no access privileges, so you
    will need to apply Kubernetes RBAC for the user to grant them privileges to a
    namespace.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将打印出最终信息，您可以将其添加到*kubeconfig*文件中以启用该用户。当然，该用户没有访问权限，因此您需要为用户应用 Kubernetes
    RBAC 来授予他们访问命名空间的权限。
- en: Creating and Securing a Namespace
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和保护命名空间
- en: The first step in provisioning a namespace is actually just creating it. You
    can do this using **`kubectl create namespace my-namespace`**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建命名空间的第一步实际上只是创建它。您可以使用**`kubectl create namespace my-namespace`**来完成这个操作。
- en: 'But the truth is that when you create a namespace, you want to attach a bunch
    of metadata to that namespace, for example, the contact information for the team
    that builds the component deployed into the namespace. Generally, this is in the
    form of annotations; you can either generate the YAML file using some templating,
    such as [Jinja](https://oreil.ly/vvtTF) or others, or you can create and then
    annotate the namespace. A simple script to do this looks like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实上，当您创建命名空间时，您希望将一堆元数据附加到该命名空间，例如部署到命名空间的组件的团队联系信息。一般来说，这是以注释的形式存在的；您可以使用某些模板生成
    YAML 文件，例如[Jinja](https://oreil.ly/vvtTF)或其他工具，或者您可以创建然后注释命名空间。执行此操作的简单脚本如下所示：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the namespace is created, you want to secure it by ensuring that you can
    grant access to the namespace to a specific user. To do this, you can bind a role
    to a user in the context of that namespace. You do this by creating a `RoleBinding`
    object within the namespace itself. The `RoleBinding` might look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当命名空间被创建时，您希望通过确保您可以将对命名空间的访问权限授予特定用户来保护它。为了做到这一点，您可以在该命名空间的上下文中将角色绑定到用户。您可以通过在命名空间本身内创建一个`RoleBinding`对象来完成这个操作。`RoleBinding`可能看起来像这样：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To create it, you simply run `kubectl create -f role-binding.yaml`. Note that
    you can reuse this binding as much as you want as long as you update the namespace
    in the binding to point to the correct namespace. If you ensure that the user
    doesn’t have any other role bindings, you can be assured that this namespace is
    the only part of the cluster to which the user has access. A reasonable practice
    is to also grant reader access to the entire cluster; in this way developers can
    see what others are doing in case it is interfering with their work. Be careful
    in granting such read access, however, because it will include access to secret
    resources in the cluster. Generally, in a development cluster this is OK because
    everyone is in the same organization and the secrets are used only for development;
    however, if this is a concern, then you can create a more fine-grained role that
    eliminates the ability to read secrets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建它，只需运行 `kubectl create -f role-binding.yaml`。请注意，只要更新绑定中的命名空间指向正确的命名空间，就可以重复使用此绑定。如果确保用户没有其他角色绑定，可以确保此命名空间是用户可以访问的集群的唯一部分。一个合理的做法是还给整个集群授予读取权限；这样开发者就可以看到其他人正在做的事情，以防干扰他们的工作。但是，在授予此类读取访问权限时要小心，因为它将包括对集群中秘密资源的访问。通常在开发集群中这是可以接受的，因为每个人都在同一个组织中，并且秘密资源仅用于开发；然而，如果这是一个问题，那么可以创建一个更精细的角色，消除读取秘密的能力。
- en: 'If you want to limit the resources consumed by a particular namespace to put
    a cap on costs or ensure that resources are fairly distributed among developers,
    you can use the ResourceQuota resource to set a limit to the total number of resources
    that any particular namespace consumes. For example, the following quota limits
    the namespace to 10 cores and 100 GB of memory for both Request and Limit for
    the pods in the namespace:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想限制特定命名空间消耗的资源，以控制成本或确保资源在开发者间公平分配，可以使用 ResourceQuota 资源为命名空间设置资源总量限制。例如，以下配额限制命名空间内的
    pods 的请求和限制为 10 个核心和 100 GB 内存：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Managing Namespaces
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理命名空间
- en: Now that you have seen how to onboard a new user and how to create a namespace
    to use as a workspace, the question remains how to assign a developer to the namespace.
    As with many things, there is no single perfect answer; rather, there are two
    approaches. The first is to give each user their own namespace as part of the
    onboarding process. This is useful because after a user is onboarded, they always
    have a dedicated workspace in which they can develop and manage their applications.
    However, making the developer’s namespace too persistent encourages the developer
    to leave things lying around in the namespace after they are done with them, and
    garbage-collecting and accounting individual resources is more complicated. An
    alternate approach is to temporarily create and assign a namespace with a bounded
    time to live (TTL). This ensures that the developer thinks of the resources in
    the cluster as transient and that it is easy to build automation around the deletion
    of entire namespaces when their TTL has expired.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何为新用户注册并创建用作工作空间的命名空间，接下来的问题是如何分配开发者到命名空间。和许多事情一样，并没有单一完美的答案；而是有两种方法。第一种是在注册流程中为每个用户提供其自己的命名空间。这很有用，因为一旦用户注册成功，他们就有了一个专门的工作空间，在这里可以开发和管理他们的应用程序。然而，将开发者的命名空间设置得太持久会鼓励开发者在完成后将东西留在命名空间中，清理和计费各个资源也会变得更加复杂。另一种方法是临时创建和分配有限生存期（TTL）的命名空间。这确保开发者将集群中的资源视为短暂的，并且可以轻松地围绕命名空间的整体删除构建自动化流程，当
    TTL 到期时删除整个命名空间。
- en: In the bounded TTL model, when the developer wants to begin a new project, they
    use a tool to allocate a new namespace for the project. When they create the namespace,
    it has a selection of metadata associated with the namespace for management and
    accounting. Obviously, this metadata includes the TTL for the namespace, but it
    also includes the developer to which it is assigned, the resources that should
    be allocated to the namespace (e.g., CPU and memory), and the team and purpose
    of the namespace. This metadata ensures that you can both track resource usage
    and delete the namespace at the right time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在有界 TTL 模型中，当开发者想要开始一个新项目时，他们会使用一个工具为项目分配一个新的命名空间。当他们创建命名空间时，它有一些与命名空间相关联的元数据，用于管理和记账。显然，这些元数据包括命名空间的
    TTL，但也包括分配给它的开发者、应该分配给命名空间的资源（如 CPU 和内存）、团队及命名空间的用途。这些元数据确保你可以追踪资源使用情况，并在适当的时候删除命名空间。
- en: Developing the tooling to allocate namespaces on demand can seem like a challenge,
    but simple tooling is relatively easy to develop. For example, you can achieve
    the allocation of a new namespace with a simple script that creates the namespace
    and prompts for the relevant metadata to attach to the namespace.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开发按需分配命名空间的工具可能看起来是一个挑战，但是开发简单的工具相对来说是比较容易的。例如，你可以通过一个简单的脚本来实现分配新命名空间，并提示输入相关的元数据以附加到命名空间。
- en: If you want to get more integrated with Kubernetes, you can use custom resource
    definitions (CRDs) to enable users to dynamically create and allocate new namespaces
    using the `kubectl` tool. If you have the time and inclination, this is definitely
    a good practice because it makes namespace management declarative and also enables
    the use of Kubernetes RBAC.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更深入地与 Kubernetes 集成，你可以使用自定义资源定义（CRDs）来使用户能够动态地使用 `kubectl` 工具创建和分配新的命名空间。如果你有时间和意愿，这绝对是一个好的实践，因为它使命名空间管理成为声明式的，还能够启用
    Kubernetes RBAC。
- en: After you have tooling to enable the allocation of namespaces, you also need
    to add tooling to reap namespaces when their TTL has expired. Again, you can accomplish
    this with a simple script that examines the namespaces and deletes those that
    have an expired TTL.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有工具来启用命名空间的分配时，你还需要添加工具来在其 TTL 到期时收回命名空间。你可以通过一个简单的脚本来实现这一点，该脚本检查命名空间并删除那些
    TTL 已过期的命名空间。
- en: You can build this script into a container and use a `ScheduledJob` to run it
    at an interval like once per hour. These combined tools can ensure that developers
    can easily allocate independent resources for their project as needed, but those
    resources will also be reaped at the proper interval to ensure that you don’t
    have wasted resources and that old resources don’t get in the way of new development.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个脚本构建成一个容器，并使用 `ScheduledJob` 每小时运行一次。这些组合工具可以确保开发者可以根据需要轻松分配独立资源来进行项目开发，但是这些资源也会在适当的时间间隔内被收回，以确保你不会浪费资源，并且旧资源不会妨碍新的开发。
- en: Cluster-Level Services
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群级服务
- en: In addition to using tooling to allocate and manage namespaces, there are also
    useful cluster-level services, and it’s a good idea to enable them in your development
    cluster. The first is log aggregation to a central Logging as a Service (LaaS)
    system. One of the easiest things for a developer to do to understand the operation
    of their application is to write something to STDOUT. Although you can access
    these logs via `kubectl logs`, that log is limited in length and is not particularly
    searchable. If you instead automatically ship those logs to a LaaS system such
    as a cloud service or an Elasticsearch cluster, developers can easily search through
    logs for relevant information as well as aggregate logging information across
    multiple containers in their service.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用工具来分配和管理命名空间之外，还有一些有用的集群级服务，在你的开发集群中启用它们是一个好主意。首先是将日志聚合到一个中央日志服务（LaaS）系统。对于开发者来说，理解他们应用的运行情况最简单的方式之一是将一些内容写入标准输出。虽然你可以通过
    `kubectl logs` 访问这些日志，但该日志长度有限且不易搜索。如果你将这些日志自动发送到 LaaS 系统，如云服务或 Elasticsearch
    集群，开发者可以轻松搜索相关信息，并在他们的服务中跨多个容器聚合日志信息。
- en: Enabling Developer Workflows
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用开发者工作流
- en: Now that we have successfully set up a shared cluster and we can onboard new
    application developers to the cluster itself, we need to actually get them developing
    their application. Remember that one of the KPIs we are measuring is the time
    from onboarding to an initial application running in the cluster. It’s clear that
    via the just-described onboarding scripts we can quickly authenticate a user to
    a cluster and allocate a namespace, but what about getting started with the application?
    Unfortunately, even though a few techniques can help with this process, it generally
    requires more convention than automation to get the initial application up and
    running. In the following sections, we describe one approach to achieving this;
    it is by no means the only approach or the only solution. You can optionally apply
    the approach as is or be inspired by the ideas to arrive at your own solution.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已成功设置了共享集群，并可以将新应用程序开发者加入到集群本身，我们需要确实让他们开始开发他们的应用程序。请记住，我们正在衡量的KPI之一是从加入到集群到在集群中运行初始应用程序的时间。很明显，通过刚刚描述的加入脚本，我们可以快速为用户在集群中进行身份验证并分配命名空间，但如何开始应用程序呢？不幸的是，尽管有一些技术可以帮助这个过程，但通常需要更多的约定而不是自动化来使初始应用程序运行起来。在以下各节中，我们描述了一种实现这一目标的方法；这绝不是唯一的方法或唯一的解决方案。您可以选择按原样应用此方法，或者受到这些想法的启发以制定您自己的解决方案。
- en: Initial Setup
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始设置
- en: One of the main challenges to deploying an application is the installation of
    all the dependencies. In many cases, especially in modern microservice architectures,
    to even get started developing on one of the microservices requires the deployment
    of multiple dependencies, either databases or other microservices. Although the
    deployment of the application itself is relatively straightforward, the task of
    identifying and deploying all the dependencies to build the complete application
    is often a frustrating case of trial and error married with incomplete or out-of-date
    instructions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序的主要挑战之一是安装所有依赖项。在许多情况下，特别是在现代微服务架构中，要想在其中一个微服务上开始开发，通常需要部署多个依赖项，无论是数据库还是其他微服务。虽然应用程序本身的部署相对简单，但识别和部署所有依赖项以构建完整应用程序的任务常常是试错和不完整或过时说明的结合，这是一个令人沮丧的过程。
- en: To address this issue, it is often valuable to introduce a convention for describing
    and installing dependencies. This can be seen as the equivalent of something like
    `npm install`, which installs all the required JavaScript dependencies. Eventually,
    there is likely to be a tool similar to `npm` that provides this service for Kubernetes-based
    applications, but until then, the best practice is to rely on convention within
    your team.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，通常有必要引入一种约定来描述和安装依赖项。这可以被视为类似于`npm install`的等效物，后者安装所有所需的JavaScript依赖项。最终，可能会有类似于`npm`的工具，为基于Kubernetes的应用程序提供此服务，但在那之前，依赖于团队内部的约定是最佳实践。
- en: 'One such option for a convention is the creation of a *setup.sh* script within
    the root directory of all project repositories. The responsibility of this script
    is to create all dependencies within a particular namespace to ensure that all
    the application’s dependencies are correctly created. For example, a setup script
    might look like the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一种约定的选项是在所有项目仓库的根目录中创建一个*setup.sh*脚本。此脚本的责任是在特定命名空间内创建所有依赖项，以确保正确创建所有应用程序的依赖项。例如，设置脚本可能如下所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You could then integrate this script with npm by adding the following to your
    *package.json*:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下内容添加到您的*package.json*来将此脚本集成到npm中：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this setup, a new developer can simply run `npm run setup`, and the cluster
    dependencies will be installed. Obviously, this particular integration is Node.js/npm
    specific. In other programming languages, it will make more sense to integrate
    with the language-specific tooling. For example, in Java you might integrate with
    a Maven *pom.xml* file instead.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个设置，新开发者只需运行`npm run setup`，就可以安装集群依赖项。显然，这种特定的集成是针对Node.js/npm的。在其他编程语言中，最好使用特定于语言的工具集成。例如，在Java中，可能会与*Maven的pom.xml*文件集成。
- en: For more generic workflows, both GitHub and Visual Studio Code have recently
    standardized on “devcontainers,” which are containers that are described by a
    Dockerfile stored in the `.devcontainer/` folder in the repository. When built,
    they construct a complete environment for starting development on that repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更通用的工作流程，GitHub 和 Visual Studio Code 最近都已经标准化了“devcontainers”，这些容器由存储在仓库的
    `.devcontainer/` 文件夹中的 Dockerfile 描述。构建时，它们会为该仓库的开发提供一个完整的环境。
- en: Enabling Active Development
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用活跃开发
- en: Having set up the developer workspace with the required dependencies, the next
    task is to enable developers to iterate on their application quickly. The first
    prerequisite for this is the ability to build and push a container image. Let’s
    assume that you have this already set up; if not, you can read how to do this
    in a number of other online resources and books.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置了开发者工作空间及所需依赖项后，下一步是让开发者能够快速迭代他们的应用程序。这其中的第一个前提是能够构建并推送一个容器镜像。假设您已经设置了这一点；如果没有，您可以在其他在线资源和书籍中了解如何操作。
- en: After you have built and pushed a container image, the task is to roll it out
    to the cluster. Unlike traditional rollouts, in the case of developer iteration,
    maintaining availability is really not a concern. Thus, the easiest way to deploy
    new code is to simply delete the Deployment object associated with the previous
    Deployment and then create a new Deployment pointing to the newly built image.
    It is also possible to update an existing Deployment in place, but this will trigger
    the rollout logic in the Deployment resource. Although it is possible to configure
    a Deployment to roll out code quickly, doing so introduces a difference between
    the development environment and the production environment that can be dangerous
    or destabilizing. Imagine, for example, that you accidentally push the development
    configuration of the Deployment into production; you will suddenly deploy new
    versions to production without appropriate testing and delays between phases of
    the rollout. Because of this risk and because there is an alternative, the best
    practice is to delete and recreate the Deployment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建并推送容器镜像之后，任务是将其部署到集群中。与传统的部署不同，在开发者迭代的情况下，维护可用性实际上并不是一个问题。因此，部署新代码的最简单方式是简单地删除与前一次部署相关联的
    Deployment 对象，然后创建一个指向新构建镜像的新 Deployment。也可以直接更新现有的 Deployment，但这会触发 Deployment
    资源中的部署逻辑。虽然可以配置 Deployment 快速部署代码，但这样做会引入开发环境和生产环境之间的差异，可能会带来危险或不稳定性。例如，假设您意外地将部署的开发配置推送到生产环境中，则会突然在生产环境中部署新版本，而没有适当的测试和部署阶段之间的延迟。由于存在这种风险，并且有替代方案，最佳实践是删除并重新创建
    Deployment。
- en: 'Just like installing dependencies, it is also a good practice to make a script
    for performing this Deployment. An example *deploy.sh* script might look like
    the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像安装依赖项一样，为执行此部署编写脚本也是一个好习惯。例如，*deploy.sh* 脚本可能如下所示：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As before, you can integrate this with existing programming language tooling
    so that (for example) a developer can simply run `npm run deploy` to deploy their
    new code into the cluster.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，您可以将其集成到现有的编程语言工具中，以便（例如）开发者只需运行 `npm run deploy` 就可以将他们的新代码部署到集群中。
- en: As you build this automation it is often useful to integrate it into a continuous
    integration and delivery (CI/CD) tool such as GitHub Actions, Azure DevOps, or
    Jenkins. Integration with a CI/CD tool makes it much easier to enable further
    automation like automatic deployment on merging a developer’s PR.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建此自动化过程时，通常有必要将其集成到持续集成和交付（CI/CD）工具中，例如 GitHub Actions、Azure DevOps 或 Jenkins。与
    CI/CD 工具的集成可以更轻松地实现进一步的自动化，例如在合并开发者的 PR 后自动部署。
- en: Enabling Testing and Debugging
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用测试和调试
- en: After a user has successfully deployed the development version of their application,
    they need to test it and, if there are problems, debug any issues with the application.
    This can also be a hurdle when developing in Kubernetes because it is not always
    clear how to interact with your cluster. The `kubectl` command line is a veritable
    Swiss Army knife of tools to achieve this, from `kubectl logs` to `kubectl exec`
    and `kubectl port-forward`, but learning how to use all the different options
    and achieving familiarity with the tool can take a considerable amount of experience.
    Furthermore, because the tool runs in the terminal, it often requires the composition
    of multiple windows to simultaneously examine both the source code for the application
    and the running application itself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 用户成功部署其应用的开发版本后，需要对其进行测试，并在有问题时调试应用程序。在Kubernetes中进行开发时，这也可能是一个障碍，因为并不总是清楚如何与集群交互。`kubectl`命令行是一个多功能工具箱，可以通过其中的工具（例如`kubectl
    logs`、`kubectl exec`和`kubectl port-forward`）来实现这一点，但学习如何使用所有不同的选项并熟悉工具可能需要相当多的经验。此外，由于该工具在终端中运行，通常需要组合多个窗口同时检查应用程序的源代码和运行的应用程序本身。
- en: To streamline the testing and debugging experience, Kubernetes tooling is increasingly
    being integrated into development environments, for example, the open source extension
    for Visual Studio (VS) Code for Kubernetes. The extension is easily installed
    for free from the VS Code marketplace. When installed, it automatically discovers
    any clusters that you already have in your *kubeconfig* file and provides a tree-view
    navigation pane for you to see the contents of your cluster at a glance.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化测试和调试体验，Kubernetes工具正在越来越多地集成到开发环境中，例如Visual Studio（VS）Code用于Kubernetes的开源扩展。该扩展可以免费从VS
    Code市场轻松安装。安装后，它会自动发现您在*kubeconfig*文件中已有的任何集群，并提供一个树形视图导航窗格，让您可以一目了然地查看集群内容。
- en: In addition to being able to see your cluster state at a glance, the integration
    allows a developer to use the tools available via `kubectl` in an intuitive, discoverable
    way. From the tree view, if you right-click a Kubernetes pod, you can immediately
    use port forwarding to bring a network connection from the pod directly to the
    local machine. Likewise, you can access the logs for the pod or even get a terminal
    within the running container.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够一目了然地查看集群状态之外，集成还允许开发者以直观、可发现的方式使用通过`kubectl`可用的工具。从树形视图中，如果右键单击Kubernetes
    pod，您可以立即使用端口转发将网络连接从pod直接引导到本地计算机。同样，您还可以访问pod的日志，甚至在运行中的容器内获取终端。
- en: The integration of these commands with prototypical user interface expectations
    (e.g., right-click shows a context menu), as well as the integration of these
    experiences alongside the code for the application itself, enables developers
    with minimal Kubernetes experience to rapidly become productive in the development
    cluster.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令与典型的用户界面期望（例如，右键显示上下文菜单）的集成，以及这些体验与应用程序代码本身的集成，使具有最少Kubernetes经验的开发者能够迅速在开发集群中提高生产力。
- en: Of course this VS Code extension isn’t the only integration between Kubernetes
    and a development environment; there are several others that you can install depending
    on your choice of programming environment and style (`vi`, `emacs`, etc.).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个VS Code扩展并不是Kubernetes和开发环境之间唯一的集成方式；根据您的编程环境和风格（如`vi`、`emacs`等），还有其他几种可以安装的集成方式。
- en: Setting Up a Development Environment Best Practices
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立开发环境最佳实践
- en: 'Setting up development workflows on Kubernetes is key to productivity and is
    pivotal for productive and happy development teams. Following these best practices
    will help to ensure that developers are up and running quickly:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes上设置开发工作流程对于生产力至关重要，对于积极、快乐的开发团队也是至关重要。遵循这些最佳实践将有助于确保开发者能够快速上手：
- en: 'Think about developer experience in three phases: onboarding, developing, and
    testing. Make sure that the development environment you build supports all three
    of these phases.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑开发者体验的三个阶段：入职、开发和测试。确保您构建的开发环境支持这三个阶段。
- en: When building a development cluster, you can choose between one large cluster
    and a cluster per developer. There are pros and cons to each, but generally a
    single large cluster is a better approach.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建开发集群时，您可以选择一个大型集群或每个开发者一个集群。每种方式都有其利弊，但通常来说，一个单一的大型集群是一个更好的选择。
- en: When you add users to a cluster, add them with their own identity and access
    to their own namespace. Use resource limits to restrict how much of the cluster
    they can use.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您向集群添加用户时，请使用他们自己的身份和对他们自己命名空间的访问权限。使用资源限制来限制他们可以使用集群的量。
- en: When managing namespaces, think about how you can reap old, unused resources.
    Developers will have bad hygiene about deleting unused things. Use automation
    to clean it up for them.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当管理命名空间时，请考虑如何收割旧的、未使用的资源。开发者常常不注意删除未使用的东西。可以利用自动化来清理这些资源。
- en: Think about cluster-level services like logs and monitoring that you can set
    up for all users. Sometimes, cluster-level dependencies like databases are also
    useful to set up on behalf of all users using templates like Helm charts.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑设置所有用户都可以使用的集群级服务，如日志和监控。有时候，像数据库这样的集群级依赖项也可以通过类似Helm图表的模板来为所有用户设置。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: We’ve reached a place where creating a Kubernetes cluster, especially in the
    cloud, is a relatively straightforward exercise, but enabling developers to productively
    use such a cluster is significantly less obvious and easy. When thinking about
    enabling developers to successfully build applications on Kubernetes, it’s important
    to think about the key goals around onboarding, iterating, testing, and debugging
    applications. Likewise, it pays to invest in some basic tooling specific to user
    onboarding, namespace provisioning, and cluster services like basic log aggregation.
    Viewing a development cluster and your code repositories as an opportunity to
    standardize and apply best practices will ensure that you have happy and productive
    developers successfully building code to deploy to your production Kubernetes
    clusters.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到了一个阶段，在这个阶段中，在云环境中创建Kubernetes集群已经是一个相对简单的练习，但是使开发者能够有效地使用这样的集群却明显不那么明显和简单。在考虑如何使开发者成功地在Kubernetes上构建应用程序时，重要的是考虑关于入门、迭代、测试和调试应用程序的关键目标。同样，值得投资于一些专门用于用户入门、命名空间供应以及基本日志聚合等集群服务的基本工具。将开发集群和代码库视为标准化和应用最佳实践的机会，将确保您拥有快乐和高效的开发者成功地构建代码并部署到生产Kubernetes集群中。
