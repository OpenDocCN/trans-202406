- en: Chapter 10\. Getting Detailed Information About Your Computer Hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux comes with several good utilities for getting detailed information on
    the hardware components in your computer. You can sit down at a machine and in
    minutes have an inventory of its components and their specifications, without
    opening the case.
  prefs: []
  type: TYPE_NORMAL
- en: These utilities are useful for providing detailed information for technical
    support, finding the correct drivers for a device, and finding out if it is supported
    in Linux at all. You can’t count on manufacturers to provide timely accurate information
    about their own products. For example, they will often change their chipsets without
    changing model numbers, which may turn a device that worked fine on Linux into
    a device that does not work on Linux. Fortunately, in these modern times Linux
    support is much less of a hassle than it used to be.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you will also have your computer documentation, or at least the motherboard
    manual. Motherboard manuals are usually full of photos, diagrams, and useful information,
    and you should be able to find them online.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will learn about the *lshw* (list hardware), *lspci* (list
    PCI), *hwinfo* (hardware information), *lsusb* (list USB), *lscpu* (list CPU),
    and *lsblk* (list block devices) commands.
  prefs: []
  type: TYPE_NORMAL
- en: '*lshw* and *hwinfo* provide the most complete information.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lshw* reports memory configuration, firmware versions, mainboard configuration,
    CPU version and speed, cache configuration, bus speed, hardware paths, attached
    devices, partitions, and filesystems.'
  prefs: []
  type: TYPE_NORMAL
- en: '*hwinfo* reports computer monitor information, RAID arrays, memory configuration,
    CPU information, firmware, mainboard configuration, caches, bus speeds, attached
    devices, partitions, and filesystems.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lsusb* probes USB buses and the devices attached to them.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lspci* probes PCI buses and the devices attached to them.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lsblk* lists physical drives, partitions, and filesystems.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lscpu* lists information about your CPU.'
  prefs: []
  type: TYPE_NORMAL
- en: 10.1 Collecting Hardware Information with lshw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want an inventory of the hardware on your system and details about each
    item.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try the *lshw* (Hardware Lister) command with no options, and store the output
    in a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You’ll get several hundred lines of output that include firmware, drivers, capabilities,
    serial numbers, version numbers, and bus information. *lshw* will not probe any
    device attached via a wireless network interface, such as a wireless printer,
    or a smartphone attached via Bluetooth, but it will report wireless and Bluetooth
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may prefer a summary in a hardware path tree view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or try the summary bus view, rather than the hardware path view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*lshw* has a graphical interface, which you open with *sudo lshw -X*. This
    is often a separate package, for example, *lshw-gtk* on Ubuntu and *lshw-gui*
    on openSUSE and Fedora.'
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*lshw* packs a lot of information into its output. Visit [Hardware Lister (lshw)](https://oreil.ly/XRGx1)
    to learn what everything means.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lshw* does not detect FireWire interfaces or computer monitors.'
  prefs: []
  type: TYPE_NORMAL
- en: The example says “system To Be Filled By O.E.M.” because it is a homebrew machine.
    A branded computer, such as Lenovo or Dell, should have the brand name and model.
  prefs: []
  type: TYPE_NORMAL
- en: The *H/W path* column contains hardware paths, which are analogous to filepaths.
    /0 is */system/bus*, which means computer and motherboard. Then all the following
    entries are in a tree view, similar to a file tree. As you can see in the example
    output, /0/0 is */system/bus/BIOS memory*, /0/b is the first populated RAM slot,
    and /0/b/1 is the second populated RAM slot. These paths correspond to physical
    connections on your motherboard and are commonly called *slots*, even though most
    of them are soldered to the motherboard and do not have physical slots that you
    can plug expansion cards into.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Hardware Lister (lshw)](https://oreil.ly/axiyL)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 lshw*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.2 Filtering lshw Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*lshw* sure does dump a lot of information, and you want to limit the output
    to what you want to see.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run *sudo lshw -short* or *sudo lshw -businfo* to see a list of device classes,
    then name one or more device classes that you want to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Omit the *-short* option to see detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Format the long output as HTML, XML, or JSON, and store it in a file so you
    can use your favorite scripting hacks to parse the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove sensitive information with the *-sanitize* option, such as IP addresses
    and serial numbers, to make it safer to share with technical support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *tee* command displays output on the screen and stores it in a text file.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Hardware Lister (lshw)](https://oreil.ly/qCioO)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 lshw*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.3 Detecting Hardware, Including Displays and RAID Devices, with hwinfo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to get information on your computer monitor and RAID devices, as well
    as other devices on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *hwinfo* command provides a detailed hardware inventory, including monitors
    and RAID devices on your system. The following example probes your monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The complete output is quite a bit longer than this example, and it includes
    all supported screen resolutions, date of manufacture, synchronization ranges,
    type of monitor, and refresh frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another nice feature is detecting RAID devices. It does not detect them by
    default, so use the *--listmd* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If it returns nothing, there are no RAID devices on your system. If there are,
    it prints a lot of information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a summary of your hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Get detailed information on one or more hardware components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Consult *man 8 hwinfo* for a list of device names, or run *hwinfo --help*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*hwinfo* prints useful and complete information. For example, for network interfaces
    it shows their */sys* paths, drivers, link status, and MAC addresses. CD-ROM output
    includes the model name, revision number, drivers, device files, drive speed,
    a features list, and whether there is a disk in the drive. *hwinfo* often tells
    you more than the manufacturer’s product information.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 hwinfo*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[hwinfo on GitHub](https://oreil.ly/BsDAT)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.4 Detecting PCI Hardware with lspci
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to list devices attached to the PCI bus on your computer with vendor
    and version information.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the *lspci* (list PCI) command. The following example prints a summary
    list of all PCI devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Increase verbosity to see more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When you see “access denied” messages, try *sudo lspci* to see what you’re missing.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*lspci* reads information from the PCI bus, which includes onboard components
    on your motherboard as well as expansion cards plugged into PCI slots.'
  prefs: []
  type: TYPE_NORMAL
- en: '*lspci* displays additional information from its own database of hardware IDs,
    such as vendors, devices, and classes and subclasses. This information is stored
    in a text file in various locations, depending on your Linux distribution. Ubuntu
    puts it in */usr/share/misc/pci.ids*, Fedora uses */usr/share/hwdata/pci.ids*,
    and openSUSE uses */usr/share/pci.ids*. The man page for your Linux should tell
    you where it is, or search for the *pci.ids* file (*locate pci.ids*).'
  prefs: []
  type: TYPE_NORMAL
- en: The *lspci* maintainers welcome submissions of updated information; read your
    *pci.ids* file for instructions. Run the *sudo update-pciids* command periodically
    to update your PCI IDs database.
  prefs: []
  type: TYPE_NORMAL
- en: 'PCI is short for Peripheral Component Interconnect. PCI is a local hardware
    bus; that is, a means for the various hardware devices in your computer to communicate
    with the Linux kernel. *lspci* primarily detects controllers, buses, and some
    individual devices, including:'
  prefs: []
  type: TYPE_NORMAL
- en: SATA controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio controllers and devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video controllers and devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RAID controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated SD/MMC card readers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCI FireWire controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There have been several PCI protocols over the years. The current standard is
    PCIe, PCI Express, introduced in 2003\. It is backward compatible with all legacy
    PCI protocols, and it replaces PCI, PCI-X, and AGP. Remember AGP, the Accelerated
    Graphics Port protocol? AGP video cards were faster than PCI video cards because
    AGP provided a dedicated link for video processing.
  prefs: []
  type: TYPE_NORMAL
- en: PCIe is substantially different from the earlier protocols because, just like
    AGP, each device gets it own dedicated link. The older protocols used a shared
    parallel bus, which was considerably slower.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 lspci*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 update-pciids*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.5 Understanding lspci Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the output of *lspci* makes sense because it is device specifications.
    But you want to know what the numbers at the beginning of each device line are
    for, like this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*00:1f.2* is the device’s BDF number, *bus:device.function*. Bus number 00,
    device number 1f, and function number 2\. A function number of 2 means the device
    has two functions, and each one gets its own PCI address.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the tree view to see the relationship between the PCI bus and the devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: PCs almost always have a single PCI bus, which is always 00.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The zeroes enclosed in brackets at the root of the tree, [0000:00], identify
    the *domain* and *bus*. The first four zeroes are the domain number, and the two
    zeroes after the colon are the bus number. The domain is the host bridge. The
    PCI host bridge connects the PCI controller to the CPU. *Domain* is a Linux-specific
    term, and it is more commonly called the *segment group*. You can also see this
    with the *-D* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You will see multiple host bridges on servers with multiple physical CPUs, and
    sometimes multiple buses on a single domain.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 lspci*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.6 Filtering lspci Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*lspci* outputs a lot of information, and you want to filter it to see just
    what you want to see.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *awk* command to cut out the clutter. The following example finds only
    entries pertaining to USB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You must use the classes (Audio, Ethernet, USB, etc.) as they appear in the
    output from *lspci*, and pay attention to case, because using *awk* to run a case-insensitive
    search is complicated. This example shows the audio controller and device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Adjust the verbosity level as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also select items by vendor, device, or class number. Find these numbers
    with the *-nn* option. In this example, `0300` (enclosed in square braces) is
    the class number, `8086` is the vendor number, and `0412` is the device number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following examples filter by class, vendor, and device, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Another way to find these numbers is to look them up at [the PCI ID Repository](https://oreil.ly/f2EKi).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*awk* is a marvelous power tool for extracting specific text strings from command
    output or documents. The caret, *^*, is a regular expression anchor that matches
    the start of a string, and *$* matches the end, so in this example, */^$/* looks
    for the line breaks, the empty spaces at the beginning and end of the text blocks.
    This is a great trick for extracting text blocks from sources that have spaces
    between sections.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 grep*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 lspci*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[the PCI ID Repository](https://oreil.ly/f2EKi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.7 Using lspci to Identify Kernel Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know which kernel modules your PCI devices are using, and which
    ones are available on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *-k* option. The following example queries only the Ethernet controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also use *awk*, like this example for your graphics controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *-k* option shows the kernel modules in use, and all of the available kernel
    modules for each device. Usually the in-use and available entries are the same,
    but sometimes there are multiple modules available.
  prefs: []
  type: TYPE_NORMAL
- en: When you use *awk* remember to add some verbosity, or you may not see the information
    you want. See the Discussion in [Recipe 10.6](#rec-filter-lspci) to learn about
    the *awk* options.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 awk*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 lspci*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.8 Using lsusb to List USB Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want a quick, easy tool for listing USB devices on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*lsusb* lists USB buses and connected USB devices, including mice, keyboards,
    USB sticks, printers, smartphones, and other connected peripherals. The following
    two examples show two different views of the same devices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run *lsusb* with no options to see a summary of USB devices on your system.
    In the next example, three external USB devices are connected: a keyboard, mouse,
    and wireless network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This example shows the same thing, with more details in a USB bus hierarchy
    format, including kernel drivers, device codes and vendor numbers, and port numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following examples show what it looks like when you plug in an external
    USB hub with a Bluetooth interface and a Samsung smartphone attached to the hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The bus and port numbers are always the same. The dev number changes every time
    you plug in a device.
  prefs: []
  type: TYPE_NORMAL
- en: The ID numbers, for example, `0a12:0001`, are the vendor and device codes. Manufacturers
    must apply to [*https://usb.org*](https://usb.org) for new codes. You can find
    the list of current USB IDs at [linux-usb.org](https://oreil.ly/bHLo6) and to
    contribute updated information.
  prefs: []
  type: TYPE_NORMAL
- en: The class codes are also managed by [*https://usb.org*](https://usb.org); see
    [USB class codes](https://oreil.ly/vNCgT). I find it interesting that Dev 57,
    which is a Samsung Android phone, is classed as an imaging device. However, it
    makes sense because most Linux distributions use the Media Transfer Protocol (MTP)
    to transfer files from an Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: The examples in this section are from a PC that has both USB 2.0 and USB 3.1
    ports. The *lsusb* output shows the negotiated speeds the devices are using, so
    when you see something like `usbhid, 1.5M`, instead of `480M` or `5000M`, that
    is all right because that is a keyboard, which does not need the full speed of
    the USB link. You should see higher speeds for storage devices, such as USB sticks
    and external hard drives.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 lsusb*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://usb.org*](https://usb.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://oreil.ly/js1oj*](https://oreil.ly/js1oj)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.9 Listing Partitions and Hard Disks with lsblk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a quick way to list all of your attached storage drives, and their
    partitions.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *lsblk* (list block devices) command. Run it with no options to generate
    a list of all block devices on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the filesystem labels and UUIDs on the selected device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'List only SCSI devices and their types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*sda* and *sdb* are SATA hard disks, and *sdc* is a USB flash drive. On Linux,
    mass storage devices such as SATA hard disks and flash media use the SCSI driver.
    *sr0*, *rom*, and *ATAPI* all identify a CD/DVD player.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the term *block devices* without starting arguments is rather difficult
    because it’s a programming term that does not translate well to a concise userland
    concept. In my experience it is most useful to think of block devices as mass
    storage devices and the partitions on storage devices.
  prefs: []
  type: TYPE_NORMAL
- en: '`MAJ:MIN` are the major and minor numbers. The major number identifies the
    category, for example, 8 is for *sd* devices, and the minor number labels each
    device in sequence. (Run **`lsblk -l`** to see this in a tree structure.)'
  prefs: []
  type: TYPE_NORMAL
- en: '`RM` tells if it a removable drive or not, with 1 indicating a removable drive.'
  prefs: []
  type: TYPE_NORMAL
- en: '`SIZE` is the size of the block device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`RO = 0` means the device is not read-only, and 1 is read-only. *sr0*, the
    CD/DVD drive, is a read-write drive, but *lsblk* cannot tell you if the disk in
    *sr0* is writeable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`TYPE` identifies the disk type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`MOUNTPOINT` shows the paths, if the device is mounted.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*man 8 lsblk*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.10 Getting CPU Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know what CPU or CPUs are on your system, and their specifications.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the *lscpu* (list CPU) command with no options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This spits out a large amount of information; you will also see a large number
    of flags, which list capabilities, and L cache information.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three types of CPU caches: L1, L2, and L3\. These are small memory
    caches on the CPU. They are very fast, many times faster than system RAM, and
    store the data that the CPU is most likely to need for its next operations. L1
    is the fastest and most expensive, so it is usually the smallest. L2 is the next
    fastest and less expensive, and is usually larger than L1\. L3 is the slowest
    and least expensive, and usually the largest.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CPU in the preceding example has four caches. Use the *-C* option to see
    more detailed cache information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This shows four caches, shared among the four physical CPU cores. L1i caches
    store CPU instructions, and L1d caches store data. L2 and L3 store data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of CPU cores can be a little confusing. `CPU(s): 8` does not mean
    8 physical cores in this example; instead, that is how many cores the Linux kernel
    sees. The following lines tell the full story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is a single processor with four physical cores and two threads per core,
    for a total of eight logical CPUs.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 lscpu*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.11 Identifying Your Hardware Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re not sure what the hardware architecture is on a machine; you think it
    is either x86-64 or ARM, and you need to know which it is.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *uname* command. This example is on an x86-64 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following list contains some of the more common results you might see:'
  prefs: []
  type: TYPE_NORMAL
- en: arm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aarch64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: armv7* (arm7 and below are 32-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: armv8* (arm8 and up is 64-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ia64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ppc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ppc64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s390x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sparc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sparc64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: i386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: i686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86_64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the machine is not running Linux, try booting it with a SystemRescue USB
    stick, and then run *uname -m*.
  prefs: []
  type: TYPE_NORMAL
- en: You can install Linux on a Chromebook. Chromebooks use both Intel and ARM processors.
    One way to see what yours has is to open the web browser to *chrome://system*.
    This shows all the system information, probably more than you want.
  prefs: []
  type: TYPE_NORMAL
- en: A friendlier tool is [Cog System Info Viewer](https://oreil.ly/Yeirk), which
    displays hardware and network information on Chromebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux supports more hardware architectures than any other operating system,
    from tiny embedded systems and systems on a chip (SoCs), to mainframes and supercomputers
    and everything in between. Whatever obscure computing hardware you might have,
    chances are that some flavor of Linux will run on it.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 uname*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
