- en: Chapter 17\. Authentication, Authorization, and Admission Control
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章 认证、授权和准入控制
- en: The API server is the gateway to the Kubernetes cluster. Any human user, client
    (e.g., `kubectl`), cluster component, or service account will access the API server
    by making a RESTful API call via HTTPS. It is *the* central point for performing
    operations like creating a Pod or deleting a Service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器是访问Kubernetes集群的入口。任何人类用户、客户端（例如`kubectl`）、集群组件或服务账号都将通过HTTPS进行RESTful
    API调用访问API服务器。这是执行操作（如创建Pod或删除Service）的*中心点*。
- en: In this chapter, we’ll focus on the security-specific aspects relevant to the
    API server. For a detailed discussion on the inner workings of the API server
    and use of the Kubernetes API, refer to [*Managing Kubernetes*](https://learning.oreilly.com/library/view/managing-kubernetes/9781492033905)
    by Brendan Burns and Craig Tracey (O’Reilly).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注与API服务器相关的安全特定方面。有关API服务器的内部工作原理及使用Kubernetes API的详细讨论，请参阅Brendan
    Burns和Craig Tracey（O’Reilly）的[*管理Kubernetes*](https://learning.oreilly.com/library/view/managing-kubernetes/9781492033905)。
- en: Processing a Request
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理请求
- en: '[Figure 17-1](#api_server_request_processing) illustrates the stages a request
    goes through when a call is made to the API server. For reference, you can find
    more information in the [Kubernetes documentation](https://kubernetes.io/docs/concepts/security/controlling-access/).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-1](#api_server_request_processing)说明了调用API服务器时请求经历的阶段。有关更多信息，请参阅[Kubernetes文档](https://kubernetes.io/docs/concepts/security/controlling-access/)。'
- en: '![ckd2 1701](Images/ckd2_1701.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1701](Images/ckd2_1701.png)'
- en: Figure 17-1\. API server request processing
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-1. API服务器请求处理
- en: The first stage of request processing is *authentication*. Authentication validates
    the identity of the caller by inspecting the client certificates or bearer tokens.
    If the bearer token is associated with a service account, then it will be verified
    here.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请求处理的第一阶段是*认证*。认证通过检查客户端证书或持有者令牌来验证调用者的身份。如果持有者令牌与服务账号关联，则在此处进行验证。
- en: The second stage determines if the identity provided in the first stage can
    access the verb and HTTP path request. Therefore, stage two deals with *authorization*
    of the request, which is implemented with the standard Kubernetes RBAC model.
    Here, we ensure that the service account is allowed to list Pods or create a new
    Service object if that has been requested.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶段确定第一阶段提供的身份是否可以访问动词和HTTP路径请求。因此，第二阶段处理请求的*授权*，使用标准的Kubernetes RBAC模型实现。在这里，我们确保服务账号被允许列出Pod或者在请求时创建新的Service对象。
- en: The third stage of request processing deals with *admission control*. Admission
    control verifies if the request is well formed or potentially needs to be modified
    before the request is processed. An admission control policy could, for example,
    ensure that the request for creating a Pod includes the definition of a specific
    label. If the request doesn’t define the label, then it is rejected.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请求处理的第三阶段涉及*准入控制*。准入控制验证请求是否格式良好或可能需要在处理请求之前进行修改。例如，准入控制策略可以确保创建Pod的请求包含特定标签的定义。如果请求未定义标签，则请求将被拒绝。
- en: Authentication with kubectl
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubectl进行认证
- en: Developers interact with the Kubernetes API by running the `kubectl` command
    line tool. Whenever you execute a command with `kubectl`, the underlying HTTPS
    call to the API server needs to authenticate.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员通过运行`kubectl`命令行工具与Kubernetes API进行交互。每当使用`kubectl`执行命令时，需要通过HTTPS调用API服务器进行身份验证。
- en: The Kubeconfig
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeconfig
- en: Credentials for the use of `kubectl` are stored in the file *$HOME/.kube/config*,
    also known as the *kubeconfig file*. The kubeconfig file defines the API server
    endpoints of the clusters we want to interact with, as well as a list of users
    registered with the cluster, including their credentials in the form of client
    certificates. The mapping between a cluster and user for a given namespace is
    called a *context*. `kubectl` uses the currently selected context to know which
    cluster to talk to and which credentials to use.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`kubectl`的凭证存储在文件*$HOME/.kube/config*中，也称为*kubeconfig文件*。kubeconfig文件定义了我们希望与之交互的集群的API服务器端点，以及注册到集群的用户列表，包括其客户端证书形式的凭证。给定命名空间的集群与用户之间的映射称为*上下文*。`kubectl`使用当前选择的上下文来确定要与之通信的集群以及要使用的凭证。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can point the environment variable `KUBECONFIG` to a set of kubeconfig files.
    At runtime, `kubectl` will merge the contents of the set of defined kubeconfig
    files and use them. By default, `KUBECONFIG` is not set and falls back to *$HOME/.kube/config*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将环境变量 `KUBECONFIG` 指向一组 kubeconfig 文件。在运行时，`kubectl` 将合并定义的 kubeconfig 文件集的内容并使用它们。默认情况下，`KUBECONFIG`
    未设置并且会回退到 *$HOME/.kube/config*。
- en: '[Example 17-1](#kubeconfig) shows a kubeconfig file. Be aware that file paths
    assigned in the example are user-specific and may differ in your own environment.
    You can find a detailed description of all configurable attributes in the [Config
    resource type](https://kubernetes.io/docs/reference/config-api/kubeconfig.v1/)
    API documentation.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-1](#kubeconfig) 展示了一个 kubeconfig 文件。请注意，示例中分配的文件路径是特定于用户的，在您自己的环境中可能会有所不同。你可以在
    [Config resource type](https://kubernetes.io/docs/reference/config-api/kubeconfig.v1/)
    API 文档中找到所有可配置属性的详细描述。'
- en: Example 17-1\. A kubeconfig file
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-1\. 一个 kubeconfig 文件
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-1)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-1)'
- en: A list of referential names to clusters and their API server endpoints.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 集群及其 API 服务器端点的参考名称列表。
- en: '[![2](Images/2.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-2)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-2)'
- en: A list of referential names to contexts (a combination of cluster and user).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文的参考名称列表（集群和用户的组合）。
- en: '[![3](Images/3.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-3)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-3)'
- en: The currently selected context.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当前选择的上下文。
- en: '[![4](Images/4.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-4)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO1-4)'
- en: A list of referential names to users and their credentials.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用户及其凭据的参考名称列表。
- en: User management is handled by the cluster administrator. The administrator creates
    a user representing the developer and hands the relevant information (username
    and credentials) to the human wanting to interact with the cluster via `kubectl`.
    Alternatively, it is also possible to integrate with external identity providers
    for authentication purposes, e.g., via [OpenID Connect](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用户管理由集群管理员处理。管理员创建一个代表开发者的用户，并将相关信息（用户名和凭据）交给希望通过 `kubectl` 与集群交互的人类。另外，也可以通过外部身份提供者（例如
    [OpenID Connect](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens)）集成以进行身份验证。
- en: Creating a new user manually consists of multiple steps, as described in the
    [Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user).
    The developer would then add the user to the kubeconfig file on the machine intended
    to interact with the cluster.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建新用户包括多个步骤，如 [Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user)
    所述。然后，开发者将用户添加到旨在与集群交互的机器上的 kubeconfig 文件中。
- en: Managing Kubeconfig Using kubectl
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 kubectl 管理 Kubeconfig
- en: You do not have to manually edit the kubeconfig file(s) to change or add configuration.
    `Kubectl` provides commands for reading and modifying its contents. The following
    commands provide an overview. You can find additional examples for commands in
    the [kubectl cheatsheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要手动编辑 kubeconfig 文件以更改或添加配置。`Kubectl` 提供了用于读取和修改其内容的命令。以下命令提供了概述。你可以在 [kubectl
    cheatsheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration)
    中找到更多命令示例。
- en: 'To view the merged contents of the kubeconfig file(s), run the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 kubeconfig 文件（们）的合并内容，请运行以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To render the currently selected context, use the `current-context` subcommand.
    The context named `minikube` is the active one:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要渲染当前选择的上下文，请使用 `current-context` 子命令。上下文名称为 `minikube` 是当前活动的。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To change the context, provide the name with the `use-context` subcommand.
    Here, we are switching to the context `bmuschko`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改上下文，请使用 `use-context` 子命令并提供名称。在这里，我们正在切换到上下文 `bmuschko`：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To register a user with the kubeconfig file(s), use the `set-credentials` subcommand.
    We are choosing to assign the username `myuser` and point to the client certificate
    by providing the corresponding CLI flags:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`set-credentials`子命令向kubeconfig文件注册用户，请选择分配用户名`myuser`并通过提供相应的CLI标志指向客户端证书：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For the exam, familiarize yourself with the `kubectl config` command. Every
    task in the exam will require you to work with a specific context and/or namespace.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于考试，请熟悉`kubectl config`命令。考试中的每个任务都要求您使用特定的上下文和/或命名空间。
- en: Authorization with Role-Based Access Control
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于角色的访问控制授权
- en: We’ve learned that the API server will try to authenticate any request sent
    using `kubectl` by verifying the provided credentials. An authenticated request
    will then need be checked against the permissions assigned to the requestor. The
    authorization phase of the API processing workflow checks if the operation is
    permitted against the requested API resource.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，API服务器将尝试通过验证提供的凭据来认证使用`kubectl`发送的任何请求。经过认证的请求将需要根据分配给请求者的权限进行检查。API处理工作流程的授权阶段检查操作是否允许针对请求的API资源进行。
- en: In Kubernetes, those permissions can be controlled using Role-Based Access Control
    (RBAC). In a nutshell, RBAC defines policies for users, groups, and service accounts
    by allowing or disallowing access to manage API resources. Enabling and configuring
    RBAC is mandatory for any organization with a strong emphasis on security.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，可以使用基于角色的访问控制（RBAC）来控制这些权限。简而言之，RBAC通过允许或禁止对管理API资源的访问来定义用户、组和服务账户的策略。对于强调安全性的任何组织来说，启用和配置RBAC是强制性的。
- en: Setting permissions is the responsibility of a cluster administrator. In the
    following sections, we’ll briefly talk about the effects of RBAC on requests from
    users and service accounts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设置权限是集群管理员的责任。在接下来的章节中，我们将简要讨论RBAC对来自用户和服务账户请求的影响。
- en: RBAC Overview
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RBAC概述
- en: 'RBAC helps with implementing a variety of use cases:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC有助于实现各种用例：
- en: Establishing a system for users with different roles to access a set of Kubernetes
    resources
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立一个系统，使具有不同角色的用户能够访问一组Kubernetes资源
- en: Controlling processes (associated with a service account) running in a Pod and
    performing operations against the Kubernetes API
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制在Pod中运行的进程（与服务账户相关联）并对Kubernetes API执行操作
- en: Limiting the visibility of certain resources per namespace
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制每个命名空间内某些资源的可见性
- en: RBAC consists of three key building blocks, as shown in [Figure 17-2](#rbac_key_building_blocks).
    Together, they connect API primitives and their allowed operations to the so-called
    subject, which is a user, a group, or a service account.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC由三个关键构建块组成，如[图17-2](#rbac_key_building_blocks)所示。它们将API基元及其允许的操作连接到所谓的主体，这可以是用户、组或服务账户。
- en: '![ckd2 1702](Images/ckd2_1702.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1702](Images/ckd2_1702.png)'
- en: Figure 17-2\. RBAC key building blocks
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-2\. RBAC关键构建块
- en: 'Each block’s responsibilities are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个块的责任如下：
- en: Subject
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 主体
- en: The user or service account that wants to access a resource
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 想要访问资源的用户或服务账户
- en: Resource
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 资源
- en: The Kubernetes API resource type (e.g., a Deployment or node)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API资源类型（例如Deployment或节点）
- en: Verb
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 动词
- en: The operation that can be executed on the resource (e.g., creating a Pod or
    deleting a Service)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可对资源执行的操作（例如创建Pod或删除Service）
- en: Understanding RBAC API Primitives
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解RBAC API基元
- en: 'With these key concepts in mind, let’s look at the Kubernetes API primitives
    that implement the RBAC functionality:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了这些关键概念后，让我们来看看实现RBAC功能的Kubernetes API基元：
- en: Role
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 角色
- en: The Role API primitive declares the API resources and their operations this
    rule should operate on in a specific namespace. For example, you may want to say
    “allow listing and deleting of Pods,” or you may express “allow watching the logs
    of Pods,” or even both with the same Role. Any operation that is not spelled out
    explicitly is disallowed as soon as it is bound to the subject.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 角色API基元声明了规则应在特定命名空间内操作的API资源及其操作。例如，您可能希望说“允许列出和删除Pod”，或者可以表达“允许监视Pod的日志”，或者两者兼而有之。任何未明确说明的操作在绑定到主体后即被禁止。
- en: RoleBinding
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: RoleBinding
- en: The RoleBinding API primitive *binds* the Role object to the subject(s) in a
    specific namespace. It is the glue for making the rules active. For example, you
    may want to say “bind the Role that permits updating Services to the user John
    Doe.”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: RoleBinding API 原语*将* Role 对象绑定到特定命名空间中的主体。这是使规则生效的关键。例如，您可能想说“将允许更新服务的角色绑定到用户约翰·多伊。”
- en: '[Figure 17-3](#rbac_primitives) shows the relationship between the involved
    API primitives. Keep in mind that the image renders only a selected list of API
    resource types and operations.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-3](#rbac_primitives) 显示了涉及的 API 原语之间的关系。请注意，该图像仅呈现了选定的 API 资源类型和操作列表。'
- en: '![ckd2 1703](Images/ckd2_1703.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1703](Images/ckd2_1703.png)'
- en: Figure 17-3\. RBAC primitives
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-3\. RBAC 原语
- en: The following sections demonstrate the namespace-wide usage of Roles and RoleBindings,
    but the same operations and attributes apply to cluster-wide Roles and RoleBindings,
    discussed in [“Namespace-Wide and Cluster-Wide RBAC”](#cluster-wide-rbac).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节演示了角色和 RoleBindings 的命名空间范围使用，但相同的操作和属性适用于讨论的[“命名空间范围和集群范围的 RBAC”](#cluster-wide-rbac)
    中的集群范围角色和 RoleBindings。
- en: Default User-Facing Roles
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认用户可见角色
- en: Kubernetes defines a set of default Roles. You can assign them to a subject
    via a RoleBinding or define your own, custom Roles depending on your needs. [Table 17-1](#default_user_facing_roles)
    describes the default user-facing Roles.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 定义了一组默认角色。您可以通过 RoleBinding 分配它们给主体，或根据需要定义自己的自定义角色。[表 17-1](#default_user_facing_roles)
    描述了默认的用户可见角色。
- en: Table 17-1\. Default user-facing Roles
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表 17-1\. 默认的用户可见角色
- en: '| Default ClusterRole | Description |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 默认 ClusterRole | 描述 |'
- en: '| --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| cluster-admin | Allows read and write access to resources across all namespaces.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| cluster-admin | 允许跨所有命名空间读取和写入资源。 |'
- en: '| admin | Allows read and write access to resources in namespace including
    Roles and RoleBindings. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| admin | 允许在命名空间内读取和写入资源，包括角色和角色绑定。 |'
- en: '| edit | Allows read and write access to resources in namespace except Roles
    and RoleBindings. Provides access to Secrets. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| edit | 允许在命名空间内读取和写入资源，除了角色和角色绑定。提供对 Secrets 的访问权限。 |'
- en: '| view | Allows read-only access to resources in namespace except Roles, RoleBindings,
    and Secrets. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| view | 允许在命名空间内只读访问资源，除了角色、角色绑定和 Secrets。 |'
- en: To define new Roles and RoleBindings, you will have to use a context that allows
    for creating or modifying them, that is, cluster-admin or admin.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义新的角色和 RoleBindings，您必须使用允许创建或修改它们的上下文，即 cluster-admin 或 admin。
- en: Creating Roles
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建角色
- en: 'Roles can be created imperatively with the `create role` command. The most
    important options for the command are `--verb` for defining the verbs, aka operations,
    and `--resource` for declaring a list of API resources (core primitives as well
    as CRDs). The following command creates a new Role for the resources Pod, Deployment,
    and Service with the verbs `list`, `get`, and `watch`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`create role`命令声明性地创建角色。该命令的最重要选项是`--verb`用于定义动词（即操作），以及`--resource`用于声明
    API 资源列表（核心原语以及自定义资源定义）。以下命令创建了一个新的角色，用于资源 Pod、Deployment 和 Service，并分别使用动词`list`、`get`
    和 `watch`：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Declaring multiple verbs and resources for a single imperative `create role`
    command can be declared as a comma-separated list for the corresponding command-line
    option or as multiple arguments. For example, `--verb=list,get,watch` and `--verb=list
    --verb=get --verb=watch` carry the same instructions. You also can use the wildcard
    “*” to refer to all verbs or resources.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个声明性`create role`命令声明多个动词和资源，可以作为相应命令行选项的逗号分隔列表或多个参数进行声明。例如，`--verb=list,get,watch`
    和 `--verb=list --verb=get --verb=watch` 执行相同的指令。您还可以使用通配符“*”来指代所有动词或资源。
- en: The command-line option `--resource-name` spells out one or many object names
    that the policy rules should apply to. A name of a Pod could be `nginx` and listed
    here with its name. Providing a list of resource names is optional. If no names
    have been provided, then the provided rules apply to all objects of a resource
    type.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行选项`--resource-name`指定了一个或多个策略规则应适用的对象名称。Pod的名称可以是`nginx`，可以在此处列出其名称。提供资源名称列表是可选的。如果未提供任何名称，则提供的规则将适用于资源类型的所有对象。
- en: The declarative approach can become a little lengthy. As you can see in [Example 17-2](#a_yaml_manifest_defining_a_role),
    the section `rules` lists the resources and verbs. Resources with an API group,
    like Deployments that use the API version `apps/v1`, need to explicitly declare
    it under the attribute `apiGroups`. All other resources (e.g., Pods and Services),
    simply use an empty string, as their API version doesn’t contain a group. Be aware
    that the imperative command for creating a Role automatically determines the API
    group.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式方法可能会变得有些冗长。如在 [示例 17-2](#a_yaml_manifest_defining_a_role) 中所示，`rules` 部分列出了资源和动词。具有
    API 组的资源（例如使用 API 版本 `apps/v1` 的 Deployments）需要在 `apiGroups` 属性下显式声明它。所有其他资源（例如
    Pods 和 Services）只需使用空字符串，因为它们的 API 版本不包含组。请注意，创建 Role 的命令是命令式的，会自动确定 API 组。
- en: Example 17-2\. A YAML manifest defining a Role
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-2. 定义 Role 的 YAML 清单
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO2-1)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO2-1)'
- en: Any resource that belongs to an API group need to be listed as an explicit rule
    in addition to the API resources that do not belong to an API group.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 任何属于 API 组的资源都需要作为显式规则列出，除了不属于 API 组的 API 资源之外。
- en: Listing Roles
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出角色
- en: 'Once the Role has been created, its object can be listed. The list of Roles
    renders only the name and the creation timestamp. Each of the listed roles does
    not give away any of its details:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Role 后，可以列出其对象。角色列表仅显示名称和创建时间戳。列出的每个角色都不会透露任何详细信息：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Rendering Role Details
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染角色详情
- en: 'You can inspect the details of a Role using the `describe` command. The output
    renders a table that maps a resource to its permitted verbs:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `describe` 命令检查 Role 的详细信息。输出显示将资源映射到其允许的动词的表格：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This cluster has no resources created, so the list of resource names in the
    following console output is currently empty.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此集群没有创建资源，因此以下控制台输出中的资源名称列表当前为空。
- en: Creating RoleBindings
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 RoleBindings
- en: 'The imperative command creating a RoleBinding object is `create rolebinding`.
    To bind a Role to the RoleBinding, use the `--role` command-line option. The subject
    type can be assigned by declaring the options `--user`, `--group`, or `--serviceaccount`.
    The following command creates the RoleBinding with the name `read-only-binding`
    to the user called `bmuschko`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 RoleBinding 对象的命令是 `create rolebinding`。要将角色绑定到 RoleBinding，使用 `--role` 命令行选项。可以通过声明选项
    `--user`、`--group` 或 `--serviceaccount` 来分配主体类型。以下命令创建了名为 `read-only-binding`
    的 RoleBinding，并绑定到名为 `bmuschko` 的用户：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 17-3](#a_yaml_manifest_defining_a_rolebinding) shows a YAML manifest
    representing the RoleBinding. You can see from the structure that a role can be
    mapped to one or many subjects. The data type is an array indicated by the dash
    character under the attribute `subjects`. At this time, only the user `bmuschko`
    has been assigned.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-3](#a_yaml_manifest_defining_a_rolebinding) 展示了表示 RoleBinding 的 YAML
    清单。从结构中可以看出，一个角色可以映射到一个或多个主体。数组的数据类型由 `subjects` 属性下的破折号字符表示。目前只有用户 `bmuschko`
    被分配。'
- en: Example 17-3\. A YAML manifest defining a RoleBinding
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-3. 定义 RoleBinding 的 YAML 清单
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Listing RoleBindings
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出 RoleBindings
- en: 'The most important information the list of RoleBindings displays is the associated
    Role. The following command shows that the RoleBinding `read-only-binding` has
    been mapped to the Role `read-only`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: RoleBindings 列表显示的最重要信息是关联的 Role。以下命令显示 RoleBinding `read-only-binding` 已映射到
    Role `read-only`：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output does not provide an indication of the subjects. You will need to
    render the details of the object for more information, as described in the next
    section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出不提供主体的指示。您需要渲染对象的详细信息以获取更多信息，如下一节所述。
- en: Rendering RoleBinding Details
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染 RoleBinding 详情
- en: 'RoleBindings can be inspected using the `describe` command. The output renders
    a table of subjects and the assigned role. The following example renders the descriptive
    representation of the RoleBinding named `read-only-binding`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: RoleBindings 可以使用 `describe` 命令进行检查。输出显示一个主体和分配的角色的表格。以下示例显示了名为 `read-only-binding`
    的 RoleBinding 的描述表示：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Seeing the RBAC Rules in Effect
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看 RBAC 规则生效情况
- en: 'Let’s see how Kubernetes enforces the RBAC rules for the scenario we set up
    so far. First, we’ll create a new Deployment with the `cluster-admin` permissions.
    In Minikube, those permissions are available to the context `minikube` by default:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Kubernetes 如何为我们迄今设置的场景执行 RBAC 规则。首先，我们将使用 `cluster-admin` 权限创建一个新的部署。在
    Minikube 中，默认情况下上下文 `minikube` 拥有这些权限：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we’ll switch the context for the user `bmuschko`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将切换到用户 `bmuschko` 的上下文：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Remember that the user `bmuschko` is permitted to list Deployments. We’ll verify
    that by using the `get deployments` command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，用户 `bmuschko` 被允许列出部署。我们将使用 `get deployments` 命令来验证：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The RBAC rules allow listing Deployments, Pods, and Services only. The following
    command tries to list the ReplicaSets, which results in an error:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC 规则仅允许列出部署、Pod 和服务。以下命令尝试列出 ReplicaSets，结果将导致错误：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A similar behavior can be observed when trying to use verbs other than `list`,
    `get`, or `watch`. The following command tries to delete a Deployment:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试使用除 `list`、`get` 或 `watch` 之外的动词时，可以观察到类似的行为。以下命令尝试删除一个部署：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At any given time, you can check a user’s permissions with the `auth can-i`
    command. The command gives you the option to list all permissions or check a specific
    permission:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，您都可以使用 `auth can-i` 命令检查用户的权限。该命令可以让您列出所有权限或检查特定权限：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Namespace-Wide and Cluster-Wide RBAC
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间范围和集群范围的 RBAC
- en: 'Roles and RoleBindings apply to a particular namespace. You will have to specify
    the namespace when creating both objects. Sometimes, a set of Roles and RoleBindings
    needs to apply to multiple namespaces or even to the whole cluster. For a cluster-wide
    definition, Kubernetes offers the API resource types ClusterRole and ClusterRoleBinding.
    The configuration elements are effectively the same. The only difference is the
    value of the `kind` attribute:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Roles 和 RoleBindings 适用于特定的命名空间。在创建这两个对象时，您将不得不指定命名空间。有时，一组 Roles 和 RoleBindings
    需要应用到多个命名空间，甚至整个集群。对于集群范围的定义，Kubernetes 提供了 API 资源类型 ClusterRole 和 ClusterRoleBinding。配置元素实际上是相同的。唯一的区别是
    `kind` 属性的值：
- en: To define a cluster-wide Role, use the imperative subcommand `clusterrole` or
    the kind `ClusterRole` in the YAML manifest.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要定义集群范围的角色，请使用命令 `clusterrole` 或在 YAML 清单中使用类型 `ClusterRole`。
- en: To define a cluster-wide RoleBinding, use the imperative subcommand `clusterrolebinding`
    or the kind `ClusterRoleBinding` in the YAML manifest.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要定义集群范围的 RoleBinding，请使用命令 `clusterrolebinding` 或在 YAML 清单中使用类型 `ClusterRoleBinding`。
- en: ClusterRoles and ClusterRoleBindings not only set up cluster-wide permissions
    to a namespaced resource, but they can also be used to set up permissions for
    non-namespaced resources like CRDs and nodes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ClusterRoles 和 ClusterRoleBindings 不仅为命名空间资源设置了集群范围的权限，还可以用于设置非命名空间资源（如 CRD
    和节点）的权限。
- en: Working with Service Accounts
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务账户工作
- en: We’ve been using the `kubectl` executable to run operations against a Kubernetes
    cluster. Under the hood, its implementation calls the API server by making an
    HTTP call to the exposed endpoints. Some applications running inside of a Pod
    may have to communicate with the API server as well. For example, the application
    may ask for specific cluster node information or available namespaces.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用 `kubectl` 可执行文件来对 Kubernetes 集群执行操作。在幕后，其实现通过对暴露的端点进行 HTTP 调用来调用 API
    服务器。一些运行在 Pod 内部的应用程序可能也需要与 API 服务器通信。例如，该应用程序可能请求特定的集群节点信息或可用的命名空间。
- en: Pods can use a service account to authenticate with the API server through an
    authentication token. A Kubernetes administrator assigns rules to a service account
    via RBAC to authorize access to specific resources and actions as illustrated
    in [Figure 17-4](#service_account).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 可以通过认证令牌使用服务账户与 API 服务器进行身份验证。Kubernetes 管理员通过 RBAC 为服务账户分配规则，以授权访问特定资源和操作，如
    [图 17-4](#service_account) 所示。
- en: '![ckd2 1704](Images/ckd2_1704.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1704](Images/ckd2_1704.png)'
- en: Figure 17-4\. Using a service account to communicate with an API server
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-4\. 使用服务账户与 API 服务器通信
- en: A Pod doesn’t necessarily need to be involved in the process. Other use cases
    call for leveraging a service account outside of a Kubernetes cluster. For example,
    you may want to communicate with the API server as part of CI/CD pipeline automation
    step. The service account can provide the credentials to authenticate with the
    API server.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 不一定需要参与此过程。其他用例需要在 Kubernetes 集群外部利用服务账户。例如，您可能希望在 CI/CD 管道自动化步骤中与 API 服务器通信。服务账户可以提供凭据来与
    API 服务器进行身份验证。
- en: The Default Service Account
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认服务账户
- en: So far, we haven’t defined a service account for a Pod. If not assigned explicitly,
    a Pod uses the [`default` service account](https://kubernetes.io/docs/concepts/security/service-accounts/#default-service-accounts),
    which has the same permissions as an unauthenticated user. This means that the
    Pod cannot view or modify the cluster state or list or modify any of its resources.
    The `default` service account can however request basic cluster information via
    the assigned `system:discovery` Role.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有为 Pod 定义服务账户。如果没有显式分配，Pod 将使用与未经身份验证用户相同权限的 [`default` service account](https://kubernetes.io/docs/concepts/security/service-accounts/#default-service-accounts)。这意味着
    Pod 无法查看或修改集群状态，也不能列出或修改其任何资源。但 `default` 服务账户可以通过分配的 `system:discovery` 角色请求基本集群信息。
- en: 'You can query for the available service accounts with the subcommand `serviceaccounts`.
    You should see only the `default` service account listed in the output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用子命令 `serviceaccounts` 查询可用的服务账户。您应该只看到输出中列出的 `default` 服务账户。
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: While you can execute the `kubectl` operation to delete the `default` service
    account, Kubernetes will reinstantiate the service account immediately.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以执行 `kubectl` 操作删除 `default` 服务账户，但 Kubernetes 会立即重新实例化该服务账户。
- en: Creating a Service Account
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建服务账户
- en: 'You can create a custom service account object using the imperative and declarative
    approach. This command creates a service account object with the name `cicd-bot`.
    The assumption here is to use the service account for calls to the API server
    made by a CI/CD pipeline:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用命令式和声明式方法创建自定义服务账户对象。此命令创建一个名为 `cicd-bot` 的服务账户对象。这里的假设是使用此服务账户进行由 CI/CD
    管道发起的对 API 服务器的调用：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can also represent the service account in the form of a manifest. In its
    simplest form, the definition assigns the kind `ServiceAccount` and a name, as
    shown in [Example 17-4](#service-account-pod-setup).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以以清单的形式表示服务账户。在其最简单形式中，定义指定了 `ServiceAccount` 种类和名称，如 [示例 17-4](#service-account-pod-setup)
    所示。
- en: Example 17-4\. YAML manifest for a service account
  id: totrans-142
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-4\. 用于服务账户的 YAML 清单
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can set a couple of [configuration options](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
    for a service account. For example, you may want to disable automounting of the
    authentication token when assigning the service account to a Pod. Although you
    will not need to understand those configuration options for the exam, it makes
    sense to dive deeper into security best practices by reading up on them in the
    Kubernetes documentation.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为服务账户设置一些[配置选项](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)。例如，当将服务账户分配给
    Pod 时，您可能希望禁用自动挂载身份验证令牌。尽管您在考试中不需要理解这些配置选项，但通过阅读 Kubernetes 文档深入了解安全最佳实践是明智的选择。
- en: Setting Permissions for a Service Account
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为服务账户设置权限
- en: It’s important to limit the permissions to only the service accounts that are
    necessary for the application to function. The next sections will explain how
    to achieve this to minimize the potential attack surface.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是仅限制必要应用程序功能的服务账户权限。接下来的章节将解释如何实现此目标，以尽量减少潜在的攻击面。
- en: For this scenario to work, you’ll need to create a ServiceAccount object and
    assign it to the Pod. Service accounts can be tied in with RBAC and assigned a
    Role and RoleBinding to define which operations they should be allowed to perform.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此场景正常工作，您需要创建一个 ServiceAccount 对象并将其分配给 Pod。可以将服务账户与 RBAC 配置并通过 Role 和 RoleBinding
    分配角色，以定义它们应执行的操作。
- en: Binding the service account to a Pod
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将服务账户绑定到 Pod
- en: As a starting point, we will set up a Pod that lists all Pods and Deployments
    in the namespace `k97` by calling the Kubernetes API. The call is made as part
    of an infinite loop every ten seconds. The response from the API call will be
    written to standard output accessible via the Pod’s logs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 作为起点，我们将设置一个 Pod，通过调用 Kubernetes API 列出命名空间 `k97` 中的所有 Pods 和 Deployments。该调用作为每十秒无限循环的一部分执行。来自
    API 调用的响应将写入标准输出，可通过 Pod 的日志访问。
- en: Accessing the API server endpoint
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 API 服务器端点
- en: Accessing the Kubernetes API from a Pod is straightforward. Instead of using
    the IP address and port for the API server Pod, you can simply refer to a Service
    named `kubernetes.default.svc` instead. This special Service lives in the `default`
    namespace and is stood up by the cluster automatically.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Pod 访问 Kubernetes API 很简单。不必使用 API 服务器 Pod 的 IP 地址和端口，只需直接引用名为 `kubernetes.default.svc`
    的 Service 即可。这个特殊的 Service 存在于 `default` 命名空间，并且由集群自动创建。
- en: 'To authenticate against the API server, we’ll send a bearer token associated
    with the service account used by the Pod. The default behavior of a service account
    is to auto-mount API credentials on the path */var/run/secrets/kubernetes.io/serviceaccount/token*.
    We’ll simply get the contents of the file using the `cat` command-line tool and
    send them along as a header for the HTTP request. [Example 17-5](#service-account-pod-setup2)
    defines the namespace, the service account, and the Pod in a single YAML manifest
    file: *setup.yaml*.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要对 API 服务器进行身份验证，我们将发送与 Pod 使用的服务账号关联的令牌。服务账号的默认行为是在路径 */var/run/secrets/kubernetes.io/serviceaccount/token*
    上自动挂载 API 凭据。我们只需使用 `cat` 命令行工具获取文件内容，并将其作为 HTTP 请求的标头发送。[示例 17-5](#service-account-pod-setup2)
    在单个 YAML 清单文件 *setup.yaml* 中定义了命名空间、服务账号和 Pod。
- en: Example 17-5\. YAML manifest for assigning a service account to a Pod
  id: totrans-153
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-5\. 分配服务账号给 Pod 的 YAML 清单
- en: '[PRE22]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](Images/1.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO3-1)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO3-1)'
- en: The service account referenced by name used for communicating with the Kubernetes
    API.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名称引用的服务账号，用于与 Kubernetes API 通信。
- en: '[![2](Images/2.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO3-2)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO3-2)'
- en: Performs an API call to retrieve the list of Pods in the namespace `k97`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 API 调用以获取命名空间 `k97` 中 Pod 的列表。
- en: '[![3](Images/3.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO3-3)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication__authorization____span_class__keep_together__and_admission_control__span__CO3-3)'
- en: Performs an API call to retrieve the list of Deployments in the namespace `k97`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 API 调用以获取命名空间 `k97` 中部署的列表。
- en: 'Create the objects from the YAML manifest with the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令从 YAML 清单创建对象：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Verifying the default permissions
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证默认权限
- en: The Pod named `list-objects` makes a call to the API server to retrieve the
    list of Pods and Deployments in dedicated containers. The container `pods` performs
    the call to list Pods. The container `deployments` sends a request to the API
    server to list Deployments.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 名为 `list-objects` 的 Pod 在专用容器中调用 API 服务器以获取 Pod 和 Deployments 的列表。容器 `pods`
    执行调用以列出 Pods。容器 `deployments` 向 API 服务器发送请求以列出 Deployments。
- en: 'As explained in the [Kubernetes documentation](https://oreil.ly/gBp30), the
    default RBAC policies do not grant any permissions to service accounts outside
    of the `kube-system` namespace. The logs of the containers `pods` and `deployments`
    return an error message indicating that the service account `sa-api` is not authorized
    to list the resources:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [Kubernetes 文档](https://oreil.ly/gBp30) 中所述，默认的 RBAC 策略不授予 `kube-system` 命名空间外的服务账号任何权限。容器
    `pods` 和 `deployments` 的日志返回一个错误消息，指示服务账号 `sa-api` 未经授权列出资源：
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next up, we’ll stand up a Role and RoleBinding object with the required API
    permissions to perform the necessary calls.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个带有必要 API 权限的 Role 和 RoleBinding 对象。
- en: Creating the Role
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建角色
- en: Start by defining the Role named `list-pods-role` shown in [Example 17-6](#list-pods-role)
    in the file `role.yaml`. The set of the rules adds only the Pod resource and the
    verb `list`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在 `role.yaml` 文件中定义名为 `list-pods-role` 的角色，如 [示例 17-6](#list-pods-role) 所示。该规则集仅添加
    Pod 资源和动词 `list`。
- en: Example 17-6\. YAML manifest for a Role that allows listing Pods
  id: totrans-170
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-6\. 允许列出 Pods 的 Role 的 YAML 清单
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the object by pointing to its corresponding YAML manifest file:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指向相应的 YAML 清单文件创建对象：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating the RoleBinding
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 RoleBinding
- en: '[Example 17-7](#rolebinding-service-account) defines the YAML manifest for
    the RoleBinding in the file `rolebinding.yaml`. The RoleBinding maps the Role
    `list-pods-role` to the service account named `sa-pod-api` and applies it only
    to the namespace `k97`.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-7](#rolebinding-service-account) 定义了 `rolebinding.yaml` 文件中 RoleBinding
    的 YAML 清单。RoleBinding 将角色 `list-pods-role` 映射到名为 `sa-pod-api` 的服务账号，并且仅适用于命名空间
    `k97`。'
- en: Example 17-7\. YAML manifest for a RoleBinding attached to a service account
  id: totrans-176
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-7\. 附加到服务账户的RoleBinding的YAML清单
- en: '[PRE27]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create both RoleBinding objects using the `apply` command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`apply`命令创建两个RoleBinding对象：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Verifying the granted permissions
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证授予的权限
- en: 'With the granted `list` permissions, the service account can now properly retrieve
    all the Pods in the `k97` namespace. The `curl` command in the `pods` container
    succeeds, as shown in the following output:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 给予`list`权限后，服务账户现在能够正确地检索`k97`命名空间中的所有Pods。`pods`容器中的`curl`命令成功执行，如下输出所示：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We did not grant any permissions to the service account for other resources.
    Listing the Deployments in the `k97` namespace still fails. The following output
    shows the response from the `curl` command in the `deployments` namespace:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们未授予服务账户其他资源的任何权限。在`k97`命名空间中列出Deployments仍然失败。以下输出显示了在`deployments`命名空间中`curl`命令的响应：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Feel free to modify the Role object to allow listing Deployment objects as well.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 随意修改Role对象，以允许列出Deployment对象。
- en: Admission Control
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准入控制
- en: The last phase of processing a request to the API server is admission control.
    Admission control is implemented by admission controllers. An admission controller
    provides a way to approve, deny, or mutate a request before it takes effect.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 处理向Kubernetes API服务器发出请求的最后阶段是准入控制。准入控制由准入控制器实现。准入控制器提供了在请求生效之前批准、拒绝或修改请求的方式。
- en: 'Admission controllers can be registered with the configuration of the API server.
    By default, the configuration file can be found at */etc/kubernetes/manifests/kube-apiserver.yaml*.
    It is the cluster administrator’s job to manage the API server configuration.
    The following command-line invocation of the API server enables the [admission
    control plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do)
    named `NamespaceLifecycle`, `PodSecurity` and `LimitRanger`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过API服务器的配置注册准入控制器。默认情况下，配置文件位于*/etc/kubernetes/manifests/kube-apiserver.yaml*。集群管理员负责管理API服务器配置。以下API服务器的命令行调用启用了名为`NamespaceLifecycle`、`PodSecurity`和`LimitRanger`的[准入控制插件](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do)：
- en: '[PRE31]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As a developer, you are inadvertently using admission control plugins that have
    been configured for you. One example is the [LimitRanger](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#limitranger)
    and the [ResourceQuota](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#resourcequota),
    we’ll discuss in [“Working with Limit Ranges”](ch18.xhtml#limit_ranges) and [“Working
    with Resource Quotas”](ch18.xhtml#resource_quotas).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，您无意间使用已为您配置的准入控制插件。一个例子是[LimitRanger](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#limitranger)和[ResourceQuota](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#resourcequota)，我们将在[“使用限制范围”](ch18.xhtml#limit_ranges)和[“使用资源配额”](ch18.xhtml#resource_quotas)中讨论它们。
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'The API server processes requests to the Kubernetes API. Every request has
    to go through three phases: authentication, authorization, and admission control.
    Every phase can short-circuit the processing. For example, if the credentials
    sent with the request cannot be authenticated, then the request will be dropped
    immediately.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器处理对Kubernetes API的请求。每个请求都必须经过三个阶段：认证、授权和准入控制。每个阶段都可以直接终止处理过程。例如，如果请求中发送的凭据无法进行认证，则该请求将立即被丢弃。
- en: We looked at examples of all phases. The authentication phase covered `kubectl`
    as the client making a call to the Kubernetes API. The kubeconfig file serves
    as configuration source for named cluster, users, and their credentials. In Kubernetes,
    authorization is handled by RBAC. We learned the Kubernetes primitives that let
    you configure permissions for API resources tied to one or many subjects. Finally,
    we briefly covered the purpose of admission control and listed some plugins that
    act as controllers for validating or mutating a request to the Kubernetes API.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了所有阶段的示例。认证阶段涵盖了`kubectl`作为调用Kubernetes API的客户端。kubeconfig文件作为命名集群、用户及其凭据的配置源。在Kubernetes中，授权由RBAC处理。我们了解了让您为与一个或多个主体关联的API资源配置权限的Kubernetes原语。最后，我们简要介绍了准入控制的目的，并列出了一些作为验证或变异Kubernetes
    API请求控制器的插件。
- en: Exam Essentials
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Practice interacting with the Kubernetes API
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 练习与Kubernetes API交互
- en: This chapter demonstrated some ways to communicate with the Kubernetes API.
    We performed API requests by switching to a user context and with the help of
    a RESTful API call using `curl`. Explore the [Kubernetes API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)
    and its endpoints on your own for broader exposure.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了一些与 Kubernetes API 通信的方法。我们通过切换到用户上下文并借助 `curl` 进行了 RESTful API 调用来执行 API
    请求。请自行探索 [Kubernetes API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)
    及其端点，以获得更广泛的了解。
- en: Understand the implications of defining RBAC rules for users and service accounts
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 理解为用户和服务账户定义 RBAC 规则的影响
- en: Anonymous user requests to the Kubernetes API will not allow any substantial
    operations. For requests coming from a user or a service account, you will need
    to carefully analyze permissions granted to the subject. Learn the ins and outs
    of defining RBAC rules by creating the relevant objects to control permissions.
    Service accounts automount a token when used in a Pod. Expose the token as a volume
    only if you are intending to make API calls from the Pod.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名用户对 Kubernetes API 的请求不会允许任何实质性操作。对来自用户或服务账户的请求，您需要仔细分析授予主体的权限。通过创建相关对象来学习定义
    RBAC 规则的细节。在 Pod 中使用时，服务账户会自动挂载一个令牌。仅在打算从 Pod 中进行 API 调用时，将令牌公开为一个卷。
- en: Learn about the basic need for admission control
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 了解准入控制的基本需求
- en: For the exam you will not need to understand how to configure admission control
    plugins in the API server. Developers interact with them, but configuration tasks
    are up to the cluster administrator. Read up on different plugins to gain a better
    understanding of the admission control landscape.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试中，您无需了解如何在 API 服务器中配置准入控制插件。开发人员与其交互，但配置任务由集群管理员负责。阅读不同的插件以更好地理解准入控制的环境。
- en: Sample Exercises
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样本练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_013.xhtml#appendix_a_authentication_authorization_admission_control).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可在 [附录 A](app01_split_013.xhtml#appendix_a_authentication_authorization_admission_control)
    中找到。
- en: The premise of this exercise is to create a new user and add her to the kubeconfig
    file. You will then define a context that uses the user, switch to the context,
    and execute a `kubectl` command.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本练习的前提是创建一个新用户并将其添加到 kubeconfig 文件中。然后，您将定义一个使用该用户的上下文，切换到该上下文，并执行一个 `kubectl`
    命令。
- en: Create a certificate for a user named `mary`. Do not provide any permissions
    to the user.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为名为 `mary` 的用户创建证书。不为用户提供任何权限。
- en: Add the user to the kubeconfig file. Define the context named `mary-context`
    that assigns the user to a cluster already available in the kubeconfig file.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用户添加到 kubeconfig 文件。定义名为 `mary-context` 的上下文，将用户分配到 kubeconfig 文件中已有的集群中。
- en: Set the currently selected context to `mary-context`. Create a Pod using `kubectl`.
    What result do you expect to see?
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将当前选定的上下文设置为 `mary-context`。使用 `kubectl` 创建一个 Pod。您预期会看到什么结果？
- en: You will use RBAC to grant permissions to a service account. The permissions
    should apply only to certain API resources and operations.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 RBAC 为服务账户授予权限。权限应仅适用于特定的 API 资源和操作。
- en: Create a new namespace named `t23`. Create a Pod named service-list in the namespace
    `t23`. The container uses the image `alpine/curl:3.14` and makes a `curl` call
    to the Kubernetes API that lists Service objects in the default namespace in an
    infinite loop.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为 `t23` 的新命名空间。在命名空间 `t23` 中创建一个名为 service-list 的 Pod。容器使用镜像 `alpine/curl:3.14`，并在无限循环中对
    Kubernetes API 进行 `curl` 调用。
- en: Create and attach the service account `api-call` to the Pod.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建并附加服务账户 `api-call` 到 Pod。
- en: Inspect the container logs after the Pod has been started. What response do
    you expect to see from the `curl` command?
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启动 Pod 后，检查容器日志。您预期从 `curl` 命令获得什么响应？
- en: Assign a ClusterRole and RoleBinding to the service account that allows only
    the operation needed by the Pod. Note the response from the `curl` command.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为允许 Pod 所需操作的服务账户分配一个 ClusterRole 和 RoleBinding。注意 `curl` 命令的响应。
- en: Identify the admission controller plugins that have been configured for the
    API server.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定已配置的 API 服务器准入控制器插件。
- en: Locate the configuration file of the API server.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定位 API 服务器的配置文件。
- en: Inspect the command-line flag that defines the admission controller plugins.
    Capture the value.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查定义 API 服务器准入控制器插件的命令行标志。捕获其值。
