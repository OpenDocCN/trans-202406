["```\n## using curl:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\n\n## using wget:\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\n```", "```\n$ nvm install node\n```", "```\n# install the latest path release of a major version\n$ nvm install 15\n\n# install a specific major/minor/patch version\n$ nvm install 15.6.0\n```", "```\n# default new shell sessions to the latest version of node\nnvm alias default node\n# default new shell sessions to a specific version\nnvm alias default 14\n```", "```\n$ nvm use 15\n```", "```\n$ nvm ls\n         v8.1.2\n        v8.11.3\n       v10.13.0\n->     v10.23.1\n        v12.8.0\n       v12.20.0\n       v12.20.1\n        v13.5.0\n       v14.14.0\n       v14.15.1\n       v14.15.4\n        v15.6.0\n         system\ndefault -> 14 (-> v14.15.4)\nnode -> stable (-> v15.6.0) (default)\nstable -> 15.6 (-> v15.6.0) (default)\niojs -> N/A (default)\nunstable -> N/A (default)\nlts/* -> lts/fermium (-> v14.15.4)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.17.1 (-> N/A)\nlts/carbon -> v8.17.0 (-> N/A)\nlts/dubnium -> v10.23.1\nlts/erbium -> v12.20.1\nlts/fermium -> v14.15.4\n```", "```\nnvm uninstall 14.14\n```", "```\n# default to the latest LTS version\n$ lts/*\n\n# to use a specific version\n$ 14.15.4\n```", "```\n// load http module\nconst http = require('http');\n\n// create http server\nhttp\n  .createServer((req, res) => {\n    // content header\n    res.writeHead(200, { 'content-type': 'text/plain' });\n\n    // write message and signal communication is complete\n    res.end('Hello, World!');\n  })\n  .listen(8124);\n\nconsole.log('Server running on port 8124');\n```", "```\n// load http module\nconst http = require('http');\nconst url = require('url');\n\n// create http server\nhttp\n  .createServer((req, res) => {\n    // get query string and parameters\n    const { query } = url.parse(req.url, true);\n\n    // content header\n    res.writeHead(200, { 'content-type': 'text/plain' });\n\n    // write message and signal communication is complete\n    const name = query.first ? query.first : 'World';\n\n    // write message and signal communication is complete\n    res.end(`Hello, ${name}!`);\n  })\n  .listen(8124);\n\nconsole.log('Server running on port 8124');\n```", "```\nhttp://localhost:8124/?first=Reader\n```", "```\nres.write(`Hello, ${name}!`);\nres.end();\n```", "```\n$ node\n```", "```\n> const add = (x, y) => { return x + y };\nundefined\n> add(2, 2);\n4\n```", "```\n> .exit\n```", "```\n> const fs = require('fs');\n```", "```\nconst repl = require('repl');\n\nconst options = {\n  prompt: '-> ',\n  useColors: true,\n  ignoreUndefined: true\n};\n\nrepl.start(options);\n```", "```\n-> const add = (x, y) => { return x + y };\n-> add(2, 2);\n4\n```", "```\nvar test = 'this is a test';\nconsole.log(window.test); // 'this is a test'\n```", "```\nconst fs = require('fs');\n```", "```\nconst fs = require('fs');\n\nfs.readFile('main.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```", "```\nconst fs = require('fs');\n\nconst buf = \"I'm going to write this text to a file\";\nfs.writeFile('main2.txt', buf, err => {\n  if (err) throw err;\n  console.log('wrote text to file');\n});\n```", "```\nconst fs = require('fs');\n\nconst buf = \"\\nI'm going to add this text to a file\";\nfs.appendFile('main.txt', buf, err => {\n  if (err) throw err;\n  console.log('appended text to file');\n});\n```", "```\nconst fs = require('fs');\n\nconst str = \"I'm going to write this text to a file\";\nconst buf = Buffer.from(str, 'utf8');\nfs.writeFile('mainbuf.txt', buf, err => {\n  if (err) throw err;\n  console.log('wrote text to file');\n});\n```", "```\nconst fs = require('fs');\n\nfs.readFile('main.txt', (err, data) => {\n  if (err) throw err;\n  const str = data.toString();\n  console.log(str);\n});\n```", "```\nconst fs = require('fs');\n\nfs.open('newfile.txt', 'a+', (err, fd) => {\n  if (err) {\n    throw err;\n  } else {\n    const buf = Buffer.from('The first string\\n');\n    fs.write(fd, buf, 0, buf.length, 0, (err, written) => {\n      if (err) {\n        throw err;\n      } else {\n        const buf2 = Buffer.from('The second string\\n');\n        fs.write(fd, buf2, 0, buf2.length, buf.length, (err, written2) => {\n          if (err) {\n            throw err;\n          } else {\n            const length = written + written2;\n            const buf3 = Buffer.alloc(length);\n            fs.read(fd, buf3, 0, length, 0, err => {\n              if (err) {\n                throw err;\n              } else {\n                console.log(buf3.toString());\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n});\n```", "```\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(\">>What's your name?  \", answer => {\n  console.log(`Hello ${answer}`);\n  rl.close();\n});\n```", "```\nconst readline = require('readline');\n\nlet sum = 0;\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconsole.log(\"Enter numbers, one to a line. Enter 'exit' to quit.\");\n\nrl.setPrompt('>> ');\nrl.prompt();\n\nrl.on('line', input => {\n  const userInput = input.trim();\n  if (userInput === 'exit') {\n    rl.close();\n    return;\n  }\n  sum += Number(userInput);\n  rl.prompt();\n});\n\n// user typed in 'exit'\nrl.on('close', () => {\n  console.log(`Total is ${sum}`);\n  process.exit(0);\n});\n```", "```\nEnter numbers, one to a line. Enter 'exit' to quit.\n>> 55\n>> 209\n>> 23.44\n>> 0\n>> 1\n>> 6\n>> exit\nTotal is 294.44\n```", "```\n// logs the directory of the currently executed file\n// ex: /Users/Adam/Projects/js-cookbook/node\nconsole.log(__dirname);\n\n// logs the directory and filename of the currently executed file\n// ex: /Users/Adam/Projects/js-cookbook/node/example.js\nconsole.log(__filename);\n```", "```\nexample-app\n|   index.js\n├───dir1\n|   |   example.js\n|   └───dir3\n|       |   nested.js\n```", "```\nconst fs = require('fs');\nconst path = require('path');\nconst newDirectoryPath = path.join(__dirname, '/cache');\n\nfs.mkdirSync(newDirectoryPath);\n```", "```\nsetTimeout(() => {}, 3000);\n\nsetInterval(() => {}, 3000);\n```", "```\nconst timer1 = setTimeout(() => {}, 3000);\nclearTimeout(timer1);\n\nconst timer2 = setInterval(() => {}, 3000);\nclearInterval(timer2);\n```", "```\nsetImmediate(() => {});\n```", "```\nconst app = require('http');\nconst fs = require('fs');\nconst ws = require('nodejs-websocket');\n\nlet server;\n\n// serve static page\nconst handler = (req, res) => {\n  fs.readFile(`${__dirname}/drawline.html`, (err, data) => {\n    if (err) {\n      res.writeHead(500);\n      return res.end('Error loading drawline.html');\n    }\n    res.writeHead(200);\n    res.end(data);\n    return data;\n  });\n};\n\n/// start the webserver\n// connections on Port 8124 will be handled by the handler\napp.listen(8124);\napp.createServer(handler);\n\n// data timer\nconst startTimer = () => {\n  setInterval(() => {\n    const newval = Math.floor(Math.random() * 100) + 1;\n    if (server.connections.length > 0) {\n      console.log(`sending ${newval}`);\n      const counter = { counter: newval };\n      server.connections.forEach(conn => {\n        conn.sendText(JSON.stringify(counter), () => {\n          console.log('conn sent');\n        });\n      });\n    }\n  }, 3000);\n};\n\n// Create a websocket connection handler on a different port\nserver = ws\n  .createServer(conn => {\n    console.log('connected');\n    conn.on('close', () => {\n      console.log('Connection closed');\n    });\n  })\n  .listen(8001, () => {\n    startTimer();\n  });\n```"]