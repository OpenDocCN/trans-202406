- en: Chapter 11\. React Router
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the web started, most websites consisted of a series of pages that users
    could navigate through by requesting and opening separate files. The location
    of the current file or resource was listed in the browser’s location bar. The
    browser’s forward and back buttons would work as expected. Bookmarking content
    deep within a website would allow users to save a reference to a specific file
    that could be reloaded at the user’s request. On a page-based, or server-rendered,
    website, the browser’s navigation and history features simply work as expected.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In a single-page app, all of these features become problematic. Remember, in
    a single-page app, everything is happening on the same page. JavaScript is loading
    information and changing the UI. Features like browser history, bookmarks, and
    forward and back buttons will not work without a routing solution. *Routing* is
    the process of defining endpoints for your client’s requests.^([1](ch11.html#idm45901616941144))
    These endpoints work in conjunction with the browser’s location and history objects.
    They’re used to identify requested content so that JavaScript can load and render
    the appropriate user interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Angular, Ember, or Backbone, React doesn’t come with a standard router.
    Recognizing the importance of a routing solution, engineers Michael Jackson and
    Ryan Florence created one named simply React Router. The React Router has been
    adopted by the community as a popular routing solution for React apps.^([2](ch11.html#idm45901616937272))
    It’s used by companies including Uber, Zendesk, PayPal, and Vimeo.^([3](ch11.html#idm45901616936008))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll introduce React Router and leverage its features to handle
    routing on the client.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating the Router
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate the capabilities of the React Router, we’ll build a classic starter
    website complete with About, Events, Products, and Contact Us sections. Although
    this website will feel as though it has multiple pages, there’s only one—it’s
    an SPA, a single-page application (see [Figure 11-1](#fig1101)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![lrc2 1101](assets/lrc2_1101.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. Simple website with link navigation
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The sitemap for this website consists of a home page, a page for each section,
    and an error page to handle 404 Not Found errors (see [Figure 11-2](#fig1102)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![lrc2 1102](assets/lrc2_1102.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Figure 11-2\. Sitemap with local links
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The router will allow us to set up routes for each section of the website. Each
    *route* is an endpoint that can be entered into the browser’s location bar. When
    a route is requested, we can render the appropriate content.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: To start, let’s install React Router and React Router DOM. React Router DOM
    is used for regular React applications that use the DOM. If you’re writing an
    app for React Native, you’ll use `react-router-native`. We’re going to install
    these packages at their experimental versions because React Router 6 is not officially
    out at the time of this printing. Once released, you can use the packages without
    that designation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装React Router和React Router DOM。React Router DOM用于使用DOM的常规React应用程序。如果您正在编写一个React
    Native应用程序，您将使用`react-router-native`。我们将安装这些包的实验版本，因为在本打印时，React Router 6尚未正式发布。一旦发布，您可以在没有这些标记的情况下使用这些包。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We’ll also need a few placeholder components for each section or page in the
    sitemap. We can export these components from a single file called *pages.js*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一些占位符组件来代表站点地图中的每个部分或页面。我们可以从名为*pages.js*的单个文件中导出这些组件：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With these pages stubbed out, we need to adjust the *index.js* file. Instead
    of rendering the `App` component, we’ll render the `Router` component. The `Router`
    component passes information about the current location to any children that are
    nested inside of it. The `Router` component should be used once and placed near
    the root of our component tree:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些页面被填充出来后，我们需要调整*index.js*文件。我们将不再渲染`App`组件，而是渲染`Router`组件。`Router`组件将当前位置的信息传递给任何嵌套在其中的子组件。`Router`组件应该只用一次，并放在我们组件树的根附近：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice that we’re importing `BrowserRouter as Router`. The next thing we need
    to do is set up our route configuration. We’re going to place this in the *App.js*
    file. The wrapper component for any routes we want to render is called `Routes`.
    Inside of `Routes`, we’ll use a `Route` component for each page we want to render.
    We also want to import all of the pages from the *./pages.js* file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们正在导入`BrowserRouter as Router`。接下来我们需要做的是设置我们的路由配置。我们将把这些放在*App.js*文件中。用于渲染任何我们想要的路由的包装组件叫做`Routes`。在`Routes`内部，我们将为每个想要渲染的页面使用`Route`组件。我们还想从*./pages.js*文件中导入所有页面：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These routes tell the Router which component to render when the window’s location
    changes. Each `Route` component has `path` and `element` properties. When the
    browser’s location matches the `path`, the `element` will be displayed. When the
    location is `/`, the router will render the `Home` component. When the location
    is `/products`, the router will render the `Products` component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些路由告诉Router当窗口位置改变时渲染哪个组件。每个`Route`组件都有`path`和`element`属性。当浏览器的位置匹配`path`时，将显示`element`。当位置为`/`时，路由将渲染`Home`组件。当位置为`/products`时，路由将渲染`Products`组件。
- en: At this point, we can run the app and physically type the routes into the browser’s
    location bar to watch the content change. For example, type *http://localhost:3000/about*
    into the location bar and watch the `About` component render.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以运行应用程序，并在浏览器的位置栏中直接输入路由，观察内容的变化。例如，输入*http://localhost:3000/about*到位置栏，观察`About`组件的渲染。
- en: It’s probably not realistic to expect our users to navigate the website by typing
    routes into the location bar. The `react-router-dom` provides a `Link` component
    that we can use to create browser links.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 期望用户通过在位置栏中键入路由来导航网站可能不太现实。`react-router-dom`提供了一个`Link`组件，我们可以用它来创建浏览器链接。
- en: 'Let’s modify the home page to contain a navigation menu with a link for each
    route:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改主页，以包含一个导航菜单，每个路由都有一个链接：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now users can access every internal page from the home page by clicking on a
    link. The browser’s back button will take them back to the home page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以通过点击链接从主页访问每个内部页面。浏览器的返回按钮将带他们回到主页。
- en: Router Properties
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Router属性
- en: 'The React Router passes properties to the components it renders. For instance,
    we can obtain the current location via a property. Let’s use the current location
    to help us create a 404 Not Found component. First, we’ll create the component:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: React Router会将属性传递给它渲染的组件。例如，我们可以通过一个属性获取当前位置。让我们使用当前位置来帮助我们创建一个404未找到组件。首先，我们将创建这个组件：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we’ll add this to our route configuration in *App.js*. If we visit a route
    that doesn’t exist, like `highway`, we want to display the `Whoops404` component.
    We’ll use the `*` as the path value and the component as the element:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在*App.js*中的路由配置中添加这个。如果我们访问一个不存在的路由，比如`highway`，我们希望显示`Whoops404`组件。我们将使用`*`作为路径值，组件作为元素：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now if we visit *localhost:3000/highway*, we’ll see the 404 page component
    render. We also could display the value of the route that we’ve visited by using
    the location value. Since we’re living in a world with React Hooks, there’s a
    hook for that. In the `Whoops404` component, create a variable called `location`
    that returns the value of the current location (i.e., properties about which page
    you’re navigated to). Then use the value of `location.pathname` to display the
    route that’s being visited:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you log the `location`, you can explore that object further.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: This section introduced the basics of implementing and working with the React
    Router. `Router` is used once and wraps all components that will use routing.
    All `Route` components need to be wrapped with a `Routes` component, which selects
    the component to render based on the window’s present location. `Link` components
    can be used to facilitate navigation. These basics can get you pretty far, but
    they just scratch the surface of the router’s capabilities.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Nesting Routes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Route` components are used with content that should be displayed only when
    specific URLs are matched. This feature allows us to organize our web apps into
    eloquent hierarchies that promote content reuse.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, as users navigate our apps, we want some of the UI to stay in place.
    In the past, solutions such as page templates and master pages have helped web
    developers reuse UI elements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider the simple starter website. We might want to create subpages
    for the `About` page that will display additional content. When the user selects
    the About section, they should be defaulted to the Company page under that section.
    The outline looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Home Page
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**About the Company**'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company (default)**'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**History**'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Events
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Products
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contact Us
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 404 Error Page
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new routes that we need to create will reflect this hierarchy:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '*http://localhost:3000/*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/about*'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/about*'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/about/history*'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/about/services*'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/about/location*'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/events*'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/products*'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/contact*'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*http://localhost:3000/hot-potato*'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also need to remember to stub placeholder components for our new sections:
    `Company`, `Services`, `History`, and `Location`. As an example, here’s some text
    for the `Services` component that you can reuse for the other two:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With those components created, we can configure the router starting with the
    *App.js* file. If you want to create a page hierarchy with the routes, all you
    need to do is nest the `Route` components inside of each other:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once you’ve wrapped the nested routes with the About `Route` component, you
    can visit these pages. If you open *http://localhost:3000/about/history*, you’ll
    just see the content from the `About` page, but the `History` component doesn’t
    display. In order to get that to display, we’ll use another feature of React Router
    DOM: the `Outlet` component. `Outlet` will let us render these nested components.
    We’ll just place it anywhere we want to render child content.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `About` component in *pages.js*, we’ll add this under the `<h1>`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now this `About` component will be reused across the entire section and will
    display the nested components. The location will tell the app which subsection
    to render. For example, when the location is *http://localhost:3000/about/history*,
    the `History` component will be rendered inside of the `About` component.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Using Redirects
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you want to redirect users from one route to another. For instance,
    we can make sure that if users try to access content via *http://localhost:3000/services*,
    they get redirected to the correct route: *http://localhost:3000/about/services*.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s modify our application to include redirects to ensure that our users
    can access the correct content:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Redirect` component allows us to redirect the user to a specific route.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: When routes are changed in a production application, users will still try to
    access old content via old routes. This typically happens because of bookmarks.
    The `Redirect` component provides us with a way to load the appropriate content
    for users, even if they’re accessing our site via an old bookmark.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this section, we’ve created a route configuration using the `Route`
    component. If you love this structure, feel free to ignore this next section,
    but we wanted to make sure that you knew how to create a route configuration a
    different way. It’s also possible to use the hook `useRoutes` to configure your
    application’s routing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to refactor our application to use `useRoutes`, we’d make the
    adjustments in the `App` component (or anywhere where the routes are set up).
    Let’s refactor it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The official docs call the config `element`, but you can choose to call it whatever
    you like. It’s also totally optional to use this syntax. `Route` is a wrapper
    around `useRoutes`, so you’re actually using this either way. Choose whichever
    syntax and style works best for you!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Routing Parameters
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another useful feature of the React Router is the ability to set up *routing
    parameters*. Routing parameters are variables that obtain their values from the
    URL. They’re extremely useful in data-driven web applications for filtering content
    or managing display preferences.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Let’s revisit the color organizer and improve it by adding the ability to select
    and display one color at a time using React Router. When a user selects a color
    by clicking on it, the app should render that color and display its `title` and
    `hex` value.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the router, we can obtain the color ID via the URL. For example, this
    is the URL we’ll use to display the color “lawn” because the ID for lawn is being
    passed within the URL:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To start, let’s set up the router in the *index.js* file. We’ll import the
    `Router` and wrap the `App` component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Wrapping the `App` passes all of the router’s properties to the component and
    any other components nested inside of it. From there, we can set up the route
    configuration. We’ll use the `Routes` and `Route` components instead of `useRoutes`,
    but remember that this is always an option if you prefer that syntax. Start by
    importing `Routes` and `Route`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then add to the `App`. This application will have two routes: the `ColorList`
    and the `ColorDetails`. We haven’t built `ColorDetails` yet, but let’s import
    it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `ColorDetails` component will display dynamically based on the `id` of
    the color. Let’s create the `ColorDetails` component in a new file called *ColorDetails.js*.
    To start, it’ll be a placeholder:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How do we know if this is working? The easiest way to check is to open the React
    Developer tools and find the `id` of one of the colors that is being rendered.
    If you don’t have a color yet, then add one and take a look at its `id`. Once
    you have the `id`, you can append that to the `localhost:3000` URL. For example,
    `localhost:3000/00fdb4c5-c5bd-4087-a48f-4ff7a9d90af8`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should see the `ColorDetails` page appear. Now we know that the router
    and our routes are working, but we want this to be more dynamic. On the `ColorDetails`
    page, we want to display the correct color based on the `id` that’s found in the
    URL. To do that, we’ll use the `useParams` hook:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we log `params`, we’ll see that this is an object that contains any parameters
    that are available on the router. We’ll destructure this object to grab the `id`,
    then we can use that `id` to find the correct color in the `colors` array. Let’s
    use our `useColors` hook to make this happen:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Logging `foundColor` shows us that we’ve found the correct color. Now all we
    need to do is display the data about that color in the component:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Another feature we want to add to the color organizer is the ability to navigate
    to the `ColorDetails` page by clicking on the color in the list. Let’s add this
    functionality to the `Color` component. We’re going to use another router hook
    called `useNavigate` to open the details page when we click on the component.
    We’ll import it first from `react-router-dom`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then we’ll call `useNavigate`, which will return a function we can use to navigate
    to another page:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now in the `section`, we’ll add an `onClick` handler to navigate to the route
    based on the color `id`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, when we click on the `section`, we’ll be routed to the correct page.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Routing parameters are an ideal tool to obtain data that affects the presentation
    of your user interface. However, they should only be used when you want users
    to capture these details in a URL. For example, in the case of the color organizer,
    users can send other users links to specific colors or all the colors sorted by
    a specific field. Users can also bookmark those links to return specific data.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数是获取影响用户界面呈现数据的理想工具。但是，只有在希望用户在 URL 中捕获这些细节时才应使用它们。例如，在颜色组织者的情况下，用户可以向其他用户发送特定颜色或按特定字段排序的所有颜色的链接。用户还可以将这些链接加为书签，以返回特定数据。
- en: In this chapter, we reviewed the basic usage of the React Router. In the next
    chapter, we’ll learn how to use routing on the server.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 React Router 的基本用法。在下一章中，我们将学习如何在服务器上使用路由。
- en: ^([1](ch11.html#idm45901616941144-marker)) Express.js documentation, [“Basic
    routing”](https://oreil.ly/jD1HC).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch11.html#idm45901616941144-marker)) Express.js 文档，[“基本路由”](https://oreil.ly/jD1HC)。
- en: ^([2](ch11.html#idm45901616937272-marker)) The project has been starred over
    20,000 times on [GitHub](https://oreil.ly/ThNG9).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch11.html#idm45901616937272-marker)) 该项目在 [GitHub](https://oreil.ly/ThNG9)
    上已被星标超过 20,000 次。
- en: ^([3](ch11.html#idm45901616936008-marker)) See [“Sites Using React Router”](https://oreil.ly/staEF).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch11.html#idm45901616936008-marker)) 参见 [“使用 React Router 的网站”](https://oreil.ly/staEF)。
