["```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: prometheuses.monitoring.coreos.com ![1](assets/1.png)\nspec:\n  group: monitoring.coreos.com             ![2](assets/2.png)\n  names:\n    kind: Prometheus                       ![3](assets/3.png)\n    plural: prometheuses                   ![4](assets/4.png)\n  scope: Namespaced                        ![5](assets/5.png)\n  versions:                                ![6](assets/6.png)\n  - name: v1                               ![7](assets/7.png)\n    storage: true                          ![8](assets/8.png)\n    served: true                           ![9](assets/9.png)\n    schema:\n      openAPIV3Schema: ....                ![10](assets/10.png)\n```", "```\nkind: CustomResourceDefinition\n# ...\nspec:\n  subresources:\n    status: {}\n    scale:\n      specReplicasPath: .spec.replicas         ![1](assets/1.png)\n      statusReplicasPath: .status.replicas     ![2](assets/2.png)\n      labelSelectorPath: .status.labelSelector ![3](assets/3.png)\n```", "```\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  name: prometheus\nspec:\n  serviceMonitorSelector:\n    matchLabels:\n      team: frontend\n  resources:\n    requests:\n      memory: 400Mi\n```", "```\napiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1alpha1.sample-api.k8spatterns.io\nspec:\n  group: sample-api.k8spattterns.io\n  service:\n    name: custom-api-server\n  version: v1alpha1\n```", "```\napiVersion: k8spatterns.io/v1\nkind: ConfigWatcher\nmetadata:\n  name: webapp-config-watcher\nspec:\n  configMap: webapp-config ![1](assets/1.png)\n  podSelector:             ![2](assets/2.png)\n    app: webapp\n```", "```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: configwatchers.k8spatterns.io\nspec:\n  scope: Namespaced          ![1](assets/1.png)\n  group: k8spatterns.io      ![2](assets/2.png)\n  names:\n    kind: ConfigWatcher      ![3](assets/3.png)\n    singular: configwatcher  ![4](assets/4.png)\n    plural: configwatchers\n  versions:\n  - name: v1                 ![5](assets/5.png)\n    storage: true\n    served: true\n    schema:\n      openAPIV3Schema:       ![6](assets/6.png)\n        type: object\n        properties:\n          configMap:\n            type: string\n            description: \"Name of the ConfigMap\"\n          podSelector:\n            type: object\n            description: \"Label selector for Pods\"\n            additionalProperties:\n              type: string\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: config-watcher-crd\nrules:\n- apiGroups:\n  - k8spatterns.io\n  resources:\n  - configwatchers\n  - configwatchers/finalizers\n  verbs: [ get, list, create, update, delete, deletecollection, watch ]\n```", "```\ncurl -Ns $base/api/v1/${ns}/configmaps?watch=true | \\     ![1](assets/1.png)\nwhile read -r event\ndo\n  type=$(echo \"$event\" | jq -r '.type')\n  if [ $type = \"MODIFIED\" ]; then                         ![2](assets/2.png)\n\n    watch_url=\"$base/apis/k8spatterns.io/v1/${ns}/configwatchers\"\n    config_map=$(echo \"$event\" | jq -r '.object.metadata.name')\n\n    watcher_list=$(curl -s $watch_url | jq -r '.items[]') ![3](assets/3.png)\n\n    watchers=$(echo $watcher_list | \\                     ![4](assets/4.png)\n               jq -r \"select(.spec.configMap == \\\"$config_map\\\") | .metadata.name\")\n\n    for watcher in watchers; do                           ![5](assets/5.png)\n      label_selector=$(extract_label_selector $watcher)\n      delete_pods_with_selector \"$label_selector\"\n    done\n  fi\ndone\n```"]