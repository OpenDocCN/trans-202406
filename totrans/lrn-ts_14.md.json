["```\n// types.d.ts\nexport interface Character {\n    catchphrase?: string;\n    name: string;\n}\n```", "```\n// index.ts\nimport { Character } from \"./types\";\n\nexport const character: Character = {\n    catchphrase: \"Yee-haw!\",\n    name: \"Sandy Cheeks\",\n};\n```", "```\n// types.d.ts\ndeclare let declared: string; // Ok\n\ndeclare let initializer: string = \"Wanda\";\n//                                ~~~~~~~\n// Error: Initializers are not allowed in ambient contexts.\n```", "```\n// fairies.d.ts\ndeclare function canGrantWish(wish: string): boolean; // Ok\n\ndeclare function grantWish(wish: string) { return true; }\n//                                       ~\n// Error: An implementation cannot be declared in ambient contexts.\n\nclass Fairy {\n    canGrantWish(wish: string): boolean; // Ok\n\n    grantWish(wish: string) {\n        //                  ~\n        // Error: An implementation cannot be declared in ambient contexts.\n        return true;\n    }\n}\n```", "```\n// index.ts\ndeclare const myGlobalValue: string;\n\nconsole.log(myGlobalValue); // Ok\n```", "```\n// index.d.ts\ninterface Writer {} // Ok\ndeclare interface Writer {} // Ok\n\ndeclare const fullName: string; // Ok: type is the primitive string\ndeclare const firstName: \"Liz\"; // Ok: type is the literal \"value\"\n\nconst lastName = \"Lemon\";\n// Error: Top-level declarations in .d.ts files must\n// start with either a 'declare' or 'export' modifier.\n```", "```\n// globals.d.ts\ndeclare const version: string;\n```", "```\n// version.ts\nexport function logVersion() {\n    console.log(`Version: ${version}`); // Ok\n}\n```", "```\n<script type=\"text/javascript\">\nwindow.myVersion = \"3.1.1\";\n</script>\n```", "```\n// types/window.d.ts\ninterface Window {\n    myVersion: string;\n}\n```", "```\n// index.ts\nexport function logWindowVersion() {\n    console.log(`Window version is: ${window.myVersion}`);\n    window.alert(\"Built-in window types still work! Hooray!\")\n}\n```", "```\n// types.d.ts\n// (module context)\n\ndeclare global {\n    // (global context)\n}\n\n// (module context)\n```", "```\n// types/data.d.ts\nexport interface Data {\n    version: string;\n}\n```", "```\n// types/globals.d.ts\nimport { Data } from \"./data\";\n\ndeclare global {\n    const globallyDeclared: Data;\n}\n\ndeclare const locallyDeclared: Data;\n```", "```\n// index.ts\nimport { Data } from \"./types/data\";\n\nfunction logData(data: Data) { // Ok\n    console.log(`Data version is: ${data.version}`);\n}\n\nlogData(globallyDeclared); // Ok\n\nlogData(locallyDeclared);\n//      ~~~~~~~~~~~~~~~\n// Error: Cannot find name 'locallyDeclared'.\n```", "```\n// lib.es5.d.ts\n\ninterface Array<T> {\n    /**\n * Gets or sets the length of the array.\n * This is a number one higher than the highest index in the array.\n */\n    length: number;\n\n    // ...\n}\n```", "```\n// lib.es2015.d.ts\n\ninterface NumberConstructor {\n    /**\n * The value of Number.EPSILON is the difference between 1 and the\n * smallest value greater than 1 that is representable as a Number\n * value, which is approximately:\n * 2.2204460492503130808472633361816 x 10‍−‍16.\n */\n    readonly EPSILON: number;\n\n    /**\n * Returns true if passed value is finite.\n * Unlike the global isFinite, Number.isFinite doesn't forcibly\n * convert the parameter to a number. Only finite values of the\n * type number result in true.\n * @param number A numeric value.\n */\n    isFinite(number: unknown): boolean;\n\n    // ...\n}\n```", "```\n// lib.dom.d.ts\n\ninterface Storage {\n    /**\n * Returns the number of key/value pairs.\n */\n    readonly length: number;\n\n    /**\n * Removes all key/value pairs, if there are any.\n */\n    clear(): void;\n\n    /**\n * Returns the current value associated with the given key,\n * or null if the given key does not exist.\n */\n    getItem(key: string): string | null;\n\n    // ...\n}\n```", "```\n// modules.d.ts\ndeclare module \"my-example-lib\" {\n    export const value: string;\n}\n```", "```\n// index.ts\nimport { value } from \"my-example-lib\";\n\nconsole.log(value); // Ok\n```", "```\n// styles.d.ts\ndeclare module \"*.module.css\" {\n    const styles: { [i: string]: string };\n    export default styles;\n}\n```", "```\n// component.ts\nimport styles from \"./styles.module.css\";\n\nstyles.anyClassName; // Type: string\n```", "```\n// index.ts\nexport const greet = (text: string) => {\n    console.log(`Hello, ${text}!`);\n};\n```", "```\n// index.d.ts\nexport declare const greet: (text: string) => void;\n```", "```\n// index.js\nexport const greet = (text) => {\n    console.log(`Hello, ${text}!`);\n};\n```", "```\nlib/\n    index.js\n    index.d.ts\npackage.json\n```", "```\n// package.json\n{\n    \"devDependencies\": {\n        \"jest\": \"^32.1.0\"\n    }\n}\n```", "```\n// using-globals.d.ts\ndescribe(\"MyAPI\", () => {\n    it(\"works\", () => { /* ... */ });\n});\n```", "```\n// using-imported.d.ts\nimport { describe, it } from \"@jest/globals\";\n\ndescribe(\"MyAPI\", () => {\n    it(\"works\", () => { /* ... */ });\n});\n```", "```\n// node_modules/@jest/globals/index.d.ts\nexport function describe(name: string, test: () => void): void;\nexport function it(name: string, test: () => void): void;\n```", "```\n// node_modules/jest/index.d.ts\nimport * as globals from \"@jest/globals\";\n\ndeclare global {\n    const describe: typeof globals.describe;\n    const it: typeof globals.it;\n}\n```", "```\n{\n  \"author\": \"Pendant Publishing\",\n  \"main\": \"./lib/index.js\",\n  \"name\": \"coffeetable\",\n  \"types\": \"./lib/index.d.ts\",\n  \"version\": \"0.5.22\",\n}\n```", "```\n// package.json\n{\n    \"dependencies\": {\n        \"@types/lodash\": \"^4.14.182\",\n        \"lodash\": \"^4.17.21\",\n    }\n}\n```", "```\n// package.json\n{\n    \"dependencies\": {\n        \"react\": \"^18.1.0\"\n    },\n    \"devDependencies\": {\n        \"@types/react\": \"^18.0.9\"\n    },\n}\n```"]