["```\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const message = ref(\"Hello World\")\n    return { message }\n  }\n}\n```", "```\n<script setup>\nimport { ref } from 'vue'\n\nconst message = ref(\"Hello World\")\n</script>\n```", "```\nimport { ref } from 'vue'\n\nconst message = ref(\"Hello World\")\n\nconsole.log(message.value) //Hello World\n```", "```\n<template>\n    <div>{{ message }}</div>\n</template>\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst message = ref(\"Hello World\")\n</script>\n```", "```\n<template>\n    <div>\n        <h2 class=\"heading\">{{ message }}</h2>\n        <input type=\"text\" v-model=\"message\" />\n    </div>\n</template>\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst message = ref(\"Welcome to Vue 3!\")\n</script>\n```", "```\n<template>\n    <div>\n        <h1>{{ title }}</h1>\n        <h2 class=\"heading\">{{ message }}</h2>\n        <input type=\"text\" v-model=\"message\" />\n    </div>\n</template>\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst title = \"My Message Component\"\nconst message = ref(\"Welcome to Vue 3!\")\n</script>\n```", "```\n<template>\n    <div>\n        <h2 class=\"heading\">{{ message }}</h2>\n        <input type=\"text\" v-model=\"message\" />\n    </div>\n</template>\n<script lang=\"ts\">\nimport { ref } from 'vue'\n\nexport default {\n    setup() {\n        const message = ref(\"Welcome to Vue 3!\")\n        return {\n            message\n        }\n    }\n}\n</script>\n```", "```\nimport { ref } from 'vue'\n\nconst user = ref({\n    name: \"Maya\",\n    age: 20\n})\n\nuser.value.name = \"Rachel\"\nuser.value = {\n    name: \"Samuel\",\n    age: 20\n}\n\nconsole.log(user.value) // { name: \"Samuel\", age: 20 }\n```", "```\n<script lang=\"ts\" setup>\nimport { shallowRef } from \"vue\";\n\ntype User = {\n    name: string;\n    bio: string;\n    avatar_url: string;\n    twitter_username: string;\n    blog: string;\n};\n\nconst user = shallowRef<User>({ ![1](assets/1.png)\n    name: \"\",\n    bio: \"\",\n    avatar_url: \"\",\n    twitter_username: \"\",\n    blog: \"\",\n});\n\nconst error = shallowRef<Error | undefined>(); ![2](assets/2.png)\n\nconst fetchData = async () => {\n    try {\n        const response = await fetch(\"https://api.github.com/users/mayashavin\");\n\n        if (response.ok) {\n            user.value = (await response.json()) as User; ![3](assets/3.png)\n        }\n    } catch (e) {\n        error.value = e as Error; ![4](assets/4.png)\n    }\n};\n\nfetchData();\n</script>\n```", "```\nimport { reactive } from 'vue'\n\nconst user = reactive({\n    name: \"Maya\",\n    age: 20\n})\n\n/*\nTypeScript error - property 'value' does not exist\non type '{ name: string; age: number; }'\n*/\nuser.value = {\n    name: \"Samuel\",\n    age: 20\n}\n\n/*\nTypeScript error - cannot reassign a read-only variable\n*/\nuser = {\n    name: \"Samuel\",\n    age: 20\n}\n```", "```\nimport { reactive } from 'vue'\n\nconst user = reactive({\n    name: \"Maya\",\n    age: 20\n})\n\nuser.name = \"Rachel\"\nuser.age = 30\n```", "```\nimport { reactive } from 'vue'\n\nconst defaultUser = {\n    name: \"Maya\",\n    age: 20\n}\n\nconst user = reactive(defaultUser)\n\nuser.name = \"Rachel\"\nuser.age = 30\n\nconsole.log(defaultUser) // { name: \"Rachel\", age: 30 }\n\ndefaultUser.name = \"Samuel\"\n\nconsole.log(user) // { name: \"Samuel\", age: 30 }\n```", "```\nimport { reactive } from 'vue'\n\nconst defaultUser = {\n    name: \"Maya\",\n    age: 20\n}\n\nconst user = reactive({ ...defaultUser })\n\nuser.name = \"Rachel\"\nuser.age = 30\n\nconsole.log(defaultUser) // { name: \"Maya\", age: 20 }\n\ndefaultUser.name = \"Samuel\"\n\nconsole.log(user) // { name: \"Rachel\", age: 30 }\n```", "```\n<script setup lang=\"ts\">\nimport { onBeforeMount } from 'vue'\n\nonBeforeMount(() => {\n    console.log('beforeMount triggered')\n})\n</script>\n```", "```\nimport { onMounted } from 'vue'\nonMounted(() => {\n    console.log('component instance: ', this)\n})\n```", "```\nimport { ref } from 'vue'\n\nconst inputRef = ref(null)\n```", "```\n<template>\n    <input\n        ref=\"inputRef\"\n        v-model=\"message\" type=\"text\" placeholder=\"Enter your name\"\n    />\n</template>\n```", "```\nimport { onUpdated, onMounted } from 'vue'\n\nonMounted(() => {\n    console.log('DOM instance: ', inputRef.value)\n})\n\nonUpdated(() => {\n    console.log('DOM instance after updated: ', inputRef.value)\n})\n```", "```\nwatch(\n    sources: WatchSource,\n    cb: (newValue: T, oldValue: T, cleanup: (func) => void)) => any,\n    options?: WatchOptions\n): WatchStopHandle\n```", "```\n<script setup lang='ts'>\nimport { reactive } from 'vue'\n\n//...\n\nconst user = reactive<User>({\n  name: \"John\",\n  age: 30,\n});\n</script>\n```", "```\nimport { reactive, watch } from 'vue'\n\nwatch(user, (newValue, oldValue) => {\n    console.log('user changed from: ', oldValue, ' to: ', newValue)\n})\n```", "```\nimport { reactive, watch } from 'vue'\n\nwatch(\n    () => user.name,\n    (newValue, oldValue) => {\n        console.log('user.name changed from: ', oldValue, ' to: ', newValue)\n    }\n)\n```", "```\nimport { reactive, watch } from 'vue'\n\nwatch(\n    () => user.name,\n    (newValue, oldValue) => {\n        console.log(\n            'user.name changed from: ',\n            oldValue,\n            ' to: ',\n            newValue\n        )\n    },\n    { immediate: true }\n)\n```", "```\nimport { reactive, watch } from 'vue'\n\nwatch(\n    [() => user.name, () => user.age],\n    ([newName, newAge], [oldName, oldAge]) => {\n        console.log(\n            'user changed from: ',\n            { name: oldName, age: oldAge },\n            ' to: ',\n            { name: newName, age: newAge }\n        )\n    }\n)\n```", "```\n<script lang=\"ts\" setup>\nimport { ref, computed } from 'vue'\n\nconst message = ref('Hello World')\nconst reversedMessage = computed<string>(\n    () => message.value.split('').reverse().join('')\n)\n</script>\n```", "```\n<script lang=\"ts\" setup>\nimport { ref, computed } from 'vue'\n\n//...\nconst isPalindrome = computed<boolean>(\n    () => message.value === reversedMessage.value\n)\n</script>\n```", "```\n<template>\n  <div>\n    <input v-model=\"message\" placeholder=\"Enter your message\"/>\n    <p>Reversed message: {{ reversedMessage }}</p>\n    <p>Is palindrome: {{ isPalindrome }}</p>\n  </div>\n</template>\n```", "```\n// src/composables/useMyComposable.ts\nimport { reactive } from 'vue'\n\nexport const useMyComposable = () => {\n    const myComposableData = reactive({\n        title: 'This is my composable data',\n    })\n\n    return myComposableData\n}\n```", "```\n<script lang=\"ts\" setup>\nimport { useMyComposable } from '@/composables/useMyComposable'\n\nconst myComposableData = useMyComposable()\n</script>\n```", "```\nimport { ref, type Ref, type UnwrapRef } from \"vue\";\n\ntype FetchResponse<T> = {\n    data: Ref<UnwrapRef<T> | null>;\n    error: Ref<UnwrapRef<Error> | null>;\n    loading: Ref<boolean>;\n}\n\nexport function useFetch<T>(url: string): FetchResponse<T> {\n    const data = ref<T | null>(null);\n    const loading = ref<boolean>(false);\n    const error = ref<Error | null>(null);\n\n    const fetchData = async () => { ![1](assets/1.png)\n        try {\n            loading.value = true;\n            const response = await fetch(url);\n\n            if (!response.ok) {\n                throw new Error(`Failed to fetch data for ${url}`);\n            }\n\n            data.value = await response.json();\n        } catch (err) {\n            error.value = (err as Error).message;\n        } finally {\n            loading.value = false;\n        }\n    };\n\n    fetchData(); ![2](assets/2.png)\n\n    return { ![3](assets/3.png)\n        data,\n        loading,\n        error,\n    };\n};\n```", "```\n// src/composables/useGitHubRepos.ts\nimport { useFetch } from '@/composables/useFetch'\nimport { ref } from 'vue'\n\ntype Repo = { /**... */ }\n\nexport const useGitHubRepos = (username: string) => {\n    return useFetch<Repo[]>(\n        `https://api.github.com/users/${username}/repos`\n    );\n}\n```", "```\n<script lang=\"ts\" setup>\nimport { useGitHubRepos } from \"@/composables/useGitHubRepos\";\nconst { data: repos } = useGitHubRepos(\"mayashavin\"); ![1](assets/1.png)\n</script>\n<template>\n    <h2>Repos</h2>\n    <ul>\n    <li v-for=\"repo in repos\" :key=\"repo.id\"> ![2](assets/2.png)\n      <article>\n        <header>{{ repo.name }}</header>\n        <p>{{ repo.description }}</p>\n      </article>\n    </li>\n  </ul>\n</template>\n```", "```\nexport const useGitHubRepos = (username: string) => {\n  const response = useFetch<Repo[]>(\n    `https://api.github.com/users/${username}/repos`\n  );\n\n  return {\n    repos: response.data,\n    loading: response.loading,\n    error: response.error,\n  };\n};\n```"]