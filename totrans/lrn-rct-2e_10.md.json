["```\nnpm install eslint --save-dev\n\n# or\n\nyarn add eslint --dev\n```", "```\nnpx eslint --init\n\nHow would you like to configure ESLint?\nTo check syntax and find problems\n\nWhat type of modules does your project use?\nJavaScript modules (import/export)\n\nWhich framework does your project use?\nReact\n\nDoes your project use TypeScript?\nN\n\nWhere does your code run? (Press space to select, a to toggle all,\ni to invert selection)\nBrowser\n\nWhat format do you want your config file to be in?\nJSON\n\nWould you like to install them now with npm?\nY\n```", "```\n{\n  \"env\": {\n    \"browser\": true,\n    \"es6\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\"\n  ],\n  \"globals\": {\n    \"Atomics\": \"readonly\",\n    \"SharedArrayBuffer\": \"readonly\"\n  },\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"ecmaVersion\": 2018,\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\"react\"],\n  \"rules\": {}\n}\n```", "```\nconst gnar = \"gnarly\";\n\nconst info = ({\n  file = __filename,\n  dir = __dirname\n}) => (\n  <p>\n    {dir}: {file}\n  </p>\n);\n\nswitch (gnar) {\n  default:\n    console.log(\"gnarly\");\n    break;\n}\n```", "```\nnpx eslint sample.js\n\n3:7 error 'info' is assigned a value but never used no-unused-vars\n4:3 error 'file' is missing in props validation react/prop-types\n4:10 error 'filename' is not defined no-undef\n5:3 error 'dir' is missing in props validation react/prop-types\n5:9 error 'dirname' is not defined no-undef\n7:3 error 'React' must be in scope when using JSX react/react-in-jsx-scope\n\n✖ 6 problems (6 errors, 0 warnings)\n```", "```\ndist/assets/\nsample.js\n```", "```\n{\n  \"scripts\": {\n    \"lint\": \"eslint .\"\n  }\n}\n```", "```\nnpm install eslint-plugin-react-hooks --save-dev\n\n# OR\n\nyarn add eslint-plugin-react-hooks --dev\n```", "```\n{\n  \"plugins\": [\n    // ...\n    \"react-hooks\"\n  ],\n  \"rules\": {\n    \"react-hooks/rules-of-hooks\": \"error\",\n    \"react-hooks/exhaustive-deps\": \"warn\"\n  }\n}\n```", "```\nfunction gnar() {\n  const [nickname, setNickname] = useState(\n    \"dude\"\n  );\n  return <h1>gnarly</h1>;\n}\n```", "```\n4:35 error React Hook \"useState\" is called in function \"gnar\" that is neither\na React function component nor a custom React Hook function\nreact-hooks/rules-of-hooks\n```", "```\nnpm install eslint-plugin-jsx-a11y\n\n// or\n\nyarn add eslint-plugin-jsx-a11y\n```", "```\n{\n  \"extends\": [\n    // ...\n    \"plugin:jsx-a11y/recommended\"\n  ],\n  \"plugins\": [\n    // ...\n    \"jsx-a11y\"\n  ]\n}\n```", "```\nfunction Image() {\n  return <img src=\"/img.png\" />;\n}\n```", "```\n5:10 error img elements must have an alt prop, either with meaningful text,\nor an empty string for decorative images\n```", "```\nsudo npm install -g prettier\n```", "```\n{\n  \"semi\": true,\n  \"trailingComma\": none,\n  \"singleQuote\": false,\n  \"printWidth\": 80\n}\n```", "```\nconsole.log(\"Prettier Test\")\n```", "```\nprettier --check \"sample.js\"\n```", "```\nprettier --write \"sample.js\"\n```", "```\nnpm install eslint-config-prettier eslint-plugin-prettier --save-dev\n```", "```\n{\n  \"extends\": [\n    // ...\n    \"plugin:prettier/recommended\"\n  ],\n  \"plugins\": [\n    //,\n  \"prettier\"],\n  \"rules\": {\n    // ...\n    \"prettier/prettier\": \"error\"\n  }\n}\n```", "```\nconsole.log(\"Prettier Test\");\n```", "```\n1:13 error Replace `'Prettier·Test')` with `\"Prettier·Test\");` prettier/prettier\n```", "```\nprettier --write \"sample.js\"\n```", "```\nprettier --write \"src/*.js\"\n```", "```\n{\n  \"editor.formatOnSave\": true\n}\n```", "```\nnpm install prop-types --save-dev\n```", "```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nfunction App({ name }) {\n  return (\n    <div>\n      <h1>{name}</h1>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App name=\"React\" />,\n  document.getElementById(\"root\")\n);\n```", "```\nimport PropTypes from \"prop-types\";\n\nfunction App({ name }) {\n  return (\n    <div>\n      <h1>{name}</h1>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  name: PropTypes.string\n};\n```", "```\nReactDOM.render(\n  <App name=\"React\" />,\n  document.getElementById(\"root\")\n);\n```", "```\nWarning: Failed prop type: Invalid prop name of type boolean supplied to App,\nexpected string. in App\n```", "```\nfunction App({ name, using }) {\n  return (\n    <div>\n      <h1>{name}</h1>\n      <p>\n        {using ? \"used here\" : \"not used here\"}\n      </p>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  name: PropTypes.string,\n  using: PropTypes.bool\n};\n\nReactDOM.render(\n  <App name=\"React\" using={true} />,\n  document.getElementById(\"root\")\n);\n```", "```\nApp.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n```", "```\nindex.js:1 Warning: Failed prop type: The prop name is marked as required in App,\nbut its value is undefined.\n```", "```\nApp.propTypes = {\n  name: PropTypes.any.isRequired\n};\n```", "```\nfunction App({ status }) {\n  return (\n    <div>\n      <h1>\n        We're {status === \"Open\" ? \"Open!\" : \"Closed!\"}\n      </h1>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App status=\"Open\" />,\n  document.getElementById(\"root\")\n);\n```", "```\nApp.propTypes = {\n  status: PropTypes.string.isRequired\n};\n```", "```\nApp.propTypes = {\n  status: PropTypes.oneOf([\"Open\", \"Closed\"])\n};\n```", "```\nnpx create-react-app in-the-flow\n```", "```\nnpm install --save flow-bin\n```", "```\n{\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"flow\": \"flow\"\n  }\n}\n```", "```\nnpm run flow init\n```", "```\n[ignore]\n\n[include]\n\n[libs]\n\n[lints]\n\n[options]\n\n[strict]\n```", "```\n//@flow\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nfunction App(props) {\n  return (\n    <div>\n      <h1>{props.item}</h1>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App item=\"jacket\" />,\n  document.getElementById(\"root\")\n);\n```", "```\ntype Props = {\n  item: string\n};\n\nfunction App(props: Props) {\n  //...\n}\n```", "```\nCannot call ReactDOM.render with root bound to container because null [1] is\nincompatible with Element [2]\n```", "```\nconst root = document.getElementById(\"root\");\n\nif (root !== null) {\n  ReactDOM.render(<App item=\"jacket\" />, root);\n}\n```", "```\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(<App item=\"jacket\" />, root);\n```", "```\nReactDOM.render(<App item={3} />, root);\n```", "```\nCannot create App element because number [1] is incompatible with string [2]\nin property item.\n```", "```\ntype Props = {\n  item: string,\n  cost: number\n};\n\nfunction App(props: Props) {\n  return (\n    <div>\n      <h1>{props.item}</h1>\n      <p>Cost: {props.cost}</p>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App item=\"jacket\" cost={249} />,\n  root\n);\n```", "```\nReactDOM.render(<App item=\"jacket\" />, root);\n```", "```\nCannot create App element because property cost is missing in props [1] but\nexists in Props [2].\n```", "```\ntype Props = {\n  item: string,\n  cost?: number\n};\n```", "```\nnpx create-react-app my-type --template typescript\n```", "```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nfunction App(props) {\n  return (\n    <div>\n      <h1>{props.item}</h1>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App item=\"jacket\" />,\n  document.getElementById(\"root\")\n);\n```", "```\nParameter 'props' implicitly has an 'any' type.\n```", "```\ntype AppProps = {\n  item: string;\n};\n\nReactDOM.render(\n  <App item=\"jacket\" />,\n  document.getElementById(\"root\")\n);\n```", "```\nfunction App(props: AppProps) {\n  return (\n    <div>\n      <h1>{props.item}</h1>\n    </div>\n  );\n}\n```", "```\nfunction App({ item }: AppProps) {\n  return (\n    <div>\n      <h1>{item}</h1>\n    </div>\n  );\n}\n```", "```\nReactDOM.render(\n  <App item={1} />,\n  document.getElementById(\"root\")\n);\n```", "```\nType 'number' is not assignable to type 'string'.\n```", "```\ntype AppProps = {\n  item: string;\n};\n\nfunction App({ item }: AppProps) {\n  const [fabricColor, setFabricColor] = useState(\n    \"purple\"\n  );\n  return (\n    <div>\n      <h1>\n        {fabricColor} {item}\n      </h1>\n      <button\n        onClick={() => setFabricColor(\"blue\")}\n      >\n        Make the Jacket Blue\n      </button>\n    </div>\n  );\n}\n```", "```\n<button onClick={() => setFabricColor(3)}>\n```", "```\nArgument of type '3' is not assignable to parameter of type string.\n```", "```\nnpx create-react-app testing\n```", "```\ntest(\"Multiplies by two\", () => {\n  expect();\n});\n```", "```\nexport default function timesTwo() {...}\n```", "```\nimport { timesTwo } from \"./functions\";\n\ntest(\"Multiplies by two\", () => {\n  expect(timesTwo(4)).toBe(8);\n});\n```", "```\nFAIL  src/functions.test.js\n  ✕ Multiplies by two (5ms)\n\n  ● Multiplies by two\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 8\n    Received: undefined\n\n      2 |\n      3 | test(\"Multiplies by two\", () => {\n    > 4 |   expect(timesTwo(4)).toBe(8);\n        |                       ^\n      5 | });\n      6 |\n\n      at Object.<anonymous> (src/functions.test.js:4:23)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        1.048s\nRan all test suites related to changed files.\n```", "```\nexport function timesTwo(a) {\n  return a * 2;\n}\n```", "```\ntest(\"Build an order object\", () => {\n  expect();\n});\n```", "```\nexport function order(items) {\n  // ...\n}\n```", "```\nimport { timesTwo, order } from \"./functions\";\n\nconst menuItems = [\n  {\n    id: \"1\",\n    name: \"Tatted Up Turkey Burger\",\n    price: 19.5\n  },\n  {\n    id: \"2\",\n    name: \"Lobster Lollipops\",\n    price: 16.5\n  },\n  {\n    id: \"3\",\n    name: \"Motley Que Pulled Pork Sandwich\",\n    price: 21.5\n  },\n  {\n    id: \"4\",\n    name: \"Trash Can Nachos\",\n    price: 19.5\n  }\n];\n\ntest(\"Build an order object\", () => {\n  expect(order(menuItems));\n});\n```", "```\nconst result = {\n  orderItems: menuItems,\n  total: 77\n};\n```", "```\ntest(\"Build an order object\", () => {\n  const result = {\n    orderItems: menuItems,\n    total: 77\n  };\n  expect(order(menuItems)).toEqual(result);\n});\n```", "```\nexport function order(items) {\n  const total = items.reduce(\n    (price, item) => price + item.price,\n    0\n  );\n  return {\n    orderItems: items,\n    total\n  };\n}\n```", "```\ndescribe(\"Math functions\", () => {\n  test(\"Multiplies by two\", () => {\n    expect(timesTwo(4)).toBe(8);\n  });\n  test(\"Adds two numbers\", () => {\n    expect(sum(4, 2)).toBe(6);\n  });\n  test(\"Subtracts two numbers\", () => {\n    expect(subtract(4, 2)).toBe(2);\n  });\n});\n```", "```\nMath functions\n    ✓ Multiplies by two\n    ✓ Adds two numbers\n    ✓ Subtracts two numbers (1ms)\n```", "```\nimport { FaStar } from \"react-icons/fa\";\n\nexport default function Star({ selected = false }) {\n  return (\n    <FaStar color={selected ? \"red\" : \"grey\"} id=\"star\" />\n  );\n}\n```", "```\nimport Star from \"./Star\";\n\nReactDOM.render(\n  <Star />,\n  document.getElementById(\"root\")\n);\n```", "```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Star from \"./Star\";\n\ntest(\"renders a star\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(<Star />, div);\n});\n```", "```\ntest(\"renders a star\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(<Star />, div);\n  expect(div.querySelector(\"svg\")).toBeTruthy();\n});\n```", "```\nexpect(\n  div.querySelector(\"notrealthing\")\n).toBeTruthy();\n```", "```\nexpect(\n  div.querySelector(\"notrealthing\")\n).toBeTruthy();\n```", "```\nexpect(received).toBeTruthy()\n\nReceived: null\n```", "```\nimport { toHaveAttribute } from \"@testing-library/jest-dom\";\n```", "```\nexpect.extend({ toHaveAttribute });\n```", "```\ntest(\"renders a star\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(<Star />, div);\n  expect(\n    div.querySelector(\"svg\")\n  ).toHaveAttribute(\"id\", \"hotdog\");\n});\n```", "```\n    expect(element).toHaveAttribute(\"id\", \"hotdog\")\n    // element.getAttribute(\"id\") === \"hotdog\"\n\n    Expected the element to have attribute:\n      id=\"hotdog\"\n    Received:\n      id=\"star\"\n```", "```\nexpect(div.querySelector(\"svg\")).toHaveAttribute(\n  \"id\",\n  \"star\"\n);\n```", "```\nimport {\n  toHaveAttribute,\n  toHaveClass\n} from \"@testing-library/jest-dom\";\n\nexpect.extend({ toHaveAttribute, toHaveClass });\n\nexpect(you).toHaveClass(\"evenALittle\");\n```", "```\nimport \"@testing-library/jest-dom/extend-expect\";\n\n// Remove this --> expect.extend({ toHaveAttribute, toHaveClass });\n```", "```\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport \"@testing-library/jest-dom/extend-expect\";\n```", "```\nexport default function Star({ selected = false }) {\n  return (\n    <>\n      <h1>Great Star</h1>\n      <FaStar\n        id=\"star\"\n        color={selected ? \"red\" : \"grey\"}\n      />\n    </>\n  );\n}\n```", "```\nimport { render } from \"@testing-library/react\";\n```", "```\ntest(\"renders an h1\", () => {\n  const { getByText } = render(<Star />);\n  const h1 = getByText(/Great Star/);\n  expect(h1).toHaveTextContent(\"Great Star\");\n});\n```", "```\nexport function Checkbox() {\n  const [checked, setChecked] = useReducer(\n    checked => !checked,\n    false\n  );\n\n  return (\n    <>\n      <label>\n        {checked ? \"checked\" : \"not checked\"}\n        <input\n          type=\"checkbox\"\n          value={checked}\n          onChange={setChecked}\n        />\n      </label>\n    </>\n  );\n}\n```", "```\nimport React from \"react\";\n\ntest(\"Selecting the checkbox should change the value of checked to true\", () => {\n  // .. write a test\n});\n```", "```\nimport { render } from \"@testing-library/react\";\nimport { Checkbox } from \"./Checkbox\";\n\ntest(\"Selecting the checkbox should change the value of checked to true\", () => {\n  const { getByLabelText } = render(<Checkbox />);\n});\n```", "```\ntest(\"Selecting the checkbox should change the value of checked to true\", () => {\n  const { getByLabelText } = render(<Checkbox />);\n  const checkbox = getByLabelText(/not checked/);\n});\n```", "```\nconst checkbox = getByLabelText(/not checked/i);\n```", "```\nmport { render, fireEvent } from \"@testing-library/react\"\n\ntest(\"Selecting the checkbox should change the value of checked to true\", () => {\n  const { getByLabelText } = render(<Checkbox />);\n  const checkbox = getByLabelText(/not checked/i);\n  fireEvent.click(checkbox);\n  expect(checkbox.checked).toEqual(true);\n});\n```", "```\ntest(\"Selecting the checkbox should toggle its value\", () => {\n  const { getByLabelText } = render(<Checkbox />);\n  const checkbox = getByLabelText(/not checked/i);\n  fireEvent.click(checkbox);\n  expect(checkbox.checked).toEqual(true);\n  fireEvent.click(checkbox);\n  expect(checkbox.checked).toEqual(false);\n});\n```", "```\n<input\n  type=\"checkbox\"\n  value={checked}\n  onChange={setChecked}\n  data-testid=\"checkbox\" // Add the data-testid= attribute\n/>\n```", "```\ntest(\"Selecting the checkbox should change the value of checked to true\", () => {\n  const { getByTestId } = render(<Checkbox />);\n  const checkbox = getByTestId(\"checkbox\");\n  fireEvent.click(checkbox);\n  expect(checkbox.checked).toEqual(true);\n});\n```", "```\nnpm test -- --coverage\n```"]