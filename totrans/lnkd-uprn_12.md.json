["```\n# Create cluster1\n$ k3d cluster create cluster1 \\\n    --servers=1 \\\n    --network=mc-network \\\n    --k3s-arg '--disable=traefik@server:*' \\\n    --k3s-arg '--cluster-cidr=10.23.0.0/16@server:*' \\\n    --k3s-arg '--service-cidr=10.247.0.0/16@server:*' \\\n    --wait\n\n# Create cluster2\n$ k3d cluster create cluster2 \\\n    --servers=1 \\\n    --network=mc-network \\\n    --k3s-arg '--disable=traefik@server:*' \\\n    --k3s-arg '--cluster-cidr=10.22.0.0/16@server:*' \\\n    --k3s-arg '--service-cidr=10.246.0.0/16@server:*' \\\n    --wait\n```", "```\n# For each cluster, we need its Node IP and Pod CIDR range.\n$ cluster1_node_ip=$(kubectl --context k3d-cluster1 get node k3d-cluster1-server-0 \\\n  -o jsonpath='{.status.addresses[?(.type==\"InternalIP\")].address}')\n$ cluster1_pod_cidr=$(kubectl --context k3d-cluster1 get node k3d-cluster1-server-0 \\\n  -o jsonpath='{.spec.podCIDR}')\n\n$ cluster2_node_ip=$(kubectl --context k3d-cluster2 get node k3d-cluster2-server-0 \\\n  -o jsonpath='{.status.addresses[?(.type==\"InternalIP\")].address}')\n$ cluster2_pod_cidr=$(kubectl --context k3d-cluster2 get node k3d-cluster2-server-0 \\\n  -o jsonpath='{.spec.podCIDR}')\n\n# Once that's done, we'll run `ip route add` on each Node to set up IP\n# routing. We only need to do this once per cluster because these are\n# single-Node clusters.\n$ docker exec -it k3d-cluster1-server-0 \\\n  ip route add ${cluster2_pod_cidr} via ${cluster2_node_ip}\n$ docker exec -it k3d-cluster2-server-0 \\\n  ip route add ${cluster1_pod_cidr} via ${cluster1_node_ip}\n```", "```\n# First, create a trust anchor. This will be shared across all clusters.\n$ step certificate create root.linkerd.cluster.local ca.crt ca.key \\\n  --profile root-ca --no-password --insecure\n\n# Next, use the trust anchor to create identity issuer certificates\n# (one for each cluster).\n$ step certificate create identity.linkerd.cluster.local issuer1.crt issuer1.key \\\n  --profile intermediate-ca --not-after 8760h --no-password --insecure \\\n  --ca ca.crt --ca-key ca.key\n\n$ step certificate create identity.linkerd.cluster.local issuer2.crt issuer2.key \\\n  --profile intermediate-ca --not-after 8760h --no-password --insecure \\\n  --ca ca.crt --ca-key ca.key\n```", "```\n# Install Linkerd in cluster1...\n$ linkerd install --context k3d-cluster1 --crds \\\n  | kubectl apply --context k3d-cluster1 -f -\n\n$ linkerd install --context k3d-cluster1 \\\n  --identity-trust-anchors-file ca.crt \\\n  --identity-issuer-certificate-file issuer1.crt \\\n  --identity-issuer-key-file issuer1.key \\\n  | kubectl apply --context k3d-cluster1 -f -\n\n$ linkerd viz install --context k3d-cluster1 |\n  kubectl apply --context k3d-cluster1 -f -\n\n$ linkerd check --context k3d-cluster1\n\n# ...then repeat for cluster2.\n$ linkerd install --context k3d-cluster2 --crds \\\n  | kubectl apply --context k3d-cluster2 -f -\n\n$ linkerd install --context k3d-cluster2 \\\n  --identity-trust-anchors-file ca.crt \\\n  --identity-issuer-certificate-file issuer2.crt \\\n  --identity-issuer-key-file issuer2.key \\\n  | kubectl apply --context k3d-cluster2 -f -\n\n$ linkerd viz install --context k3d-cluster2 |\n  kubectl apply --context k3d-cluster2 -f -\n\n$ linkerd check --context k3d-cluster2\n```", "```\n$ linkerd multicluster install --context k3d-cluster1 |\n  kubectl apply --context k3d-cluster1 -f -\n$ linkerd multicluster check --context k3d-cluster1\n\n$ linkerd multicluster install --context k3d-cluster2 |\n  kubectl apply --context k3d-cluster2 -f -\n$ linkerd multicluster check --context k3d-cluster2\n```", "```\n# Link cluster1 to cluster2\\. Again, --api-server-address is k3d-specific.\n# PAY ATTENTION TO CONTEXTS! We run `linkerd multicluster link` in the\n# cluster1 context, then apply it in the cluster2 context.\n$ linkerd multicluster link --context k3d-cluster1 \\\n  --api-server-address https://${cluster1_node_ip}:6443 \\\n  --cluster-name k3d-cluster1 |\n  kubectl apply --context k3d-cluster2 -f -\n\n```", "```\n# Link cluster2 to cluster1\\. Again, --api-server-address is k3d-specific.\n# PAY ATTENTION TO CONTEXTS! We run `linkerd multicluster link` in the\n# cluster2 context, then apply it in the cluster1 context.\n$ linkerd multicluster link --context k3d-cluster2 \\\n  --api-server-address https://${cluster2_node_ip}:6443 \\\n  --cluster-name k3d-cluster2 |\n  kubectl apply --context k3d-cluster1 -f -\n\n# Ensure everything is healthy (note that this will fail for k3d, even\n# though things are working).\n$ linkerd multicluster check\n\n# Check on the gateways.\n$ linkerd multicluster gateways --context k3d-cluster1\n$ linkerd multicluster gateways --context k3d-cluster2\n```", "```\n$ linkerd multicluster install --gateway false --context k3d-cluster1 |\n  kubectl apply --context k3d-cluster1 -f -\n$ linkerd multicluster check --context k3d-cluster1\n\n$ linkerd multicluster install  --gateway false --context k3d-cluster2 |\n  kubectl apply --context k3d-cluster2 -f -\n$ linkerd multicluster check --context k3d-cluster2\n```", "```\n# Link cluster1 to cluster2\\. Again, --api-server-address is k3d-specific.\n# PAY ATTENTION TO CONTEXTS! We run `linkerd multicluster link` in the\n# cluster1 context, then apply it in the cluster2 context.\n$ linkerd multicluster link --gateway false --context k3d-cluster1 \\\n  --api-server-address https://${cluster1_node_ip}:6443 \\\n  --cluster-name k3d-cluster1 |\n  kubectl apply --context k3d-cluster2 -f -\n\n```", "```\n# Link cluster2 to cluster1\\. Again, --api-server-address is k3d-specific.\n# PAY ATTENTION TO CONTEXTS! We run `linkerd multicluster link` in the\n# cluster2 context, then apply it in the cluster1 context.\n$ linkerd multicluster link --gateway false --context k3d-cluster2 \\\n  --api-server-address https://${cluster2_node_ip}:6443 \\\n  --cluster-name k3d-cluster2 |\n  kubectl apply --context k3d-cluster1 -f -\n\n# Ensure everything is healthy (note that this will fail for k3d, even\n# though things are working).\n$ linkerd multicluster check\n```", "```\n# Pull down the luar repo if you don't already have it.\n$ git clone https://github.com/linkerd-book/luar.git\n\n# Create the emojivoto ns in each cluster.\n$ kubectl apply --context k3d-cluster1 -f luar/multicluster/ns.yaml\n$ kubectl apply --context k3d-cluster2 -f luar/multicluster/ns.yaml\n\n# This will ensure that all new Pods come up with\n# the Linkerd proxy.\n\n# Start the backing services in cluster2.\n$ kubectl apply --context k3d-cluster2 -f luar/multicluster/emoji.yaml\n$ kubectl apply --context k3d-cluster2 -f luar/multicluster/voting.yaml\n\n# Start the web frontend and traffic generator in\n# cluster1.\n$ kubectl apply --context k3d-cluster1 -f luar/multicluster/web.yaml\n\n# Check on the Pods in each cluster.\n$ kubectl get pods -n emojivoto --context k3d-cluster1\n$ kubectl get pods -n emojivoto --context k3d-cluster2\n```", "```\n$ kubectl get svc -n emojivoto --context k3d-cluster1\n$ kubectl get svc -n emojivoto --context k3d-cluster2\n```", "```\n$ kubectl --context=k3d-cluster1 label svc web-svc \\\n  -n emojivoto mirror.linkerd.io/exported=true\n$ kubectl --context=k3d-cluster2 label svc emoji-svc \\\n  -n emojivoto mirror.linkerd.io/exported=true\n$ kubectl --context=k3d-cluster2 label svc voting-svc \\\n  -n emojivoto mirror.linkerd.io/exported=true\n```", "```\n$ kubectl --context=k3d-cluster1 label svc web-svc \\\n  -n emojivoto mirror.linkerd.io/exported=remote-discovery\n$ kubectl --context=k3d-cluster2 label svc emoji-svc \\\n  -n emojivoto mirror.linkerd.io/exported=remote-discovery\n$ kubectl --context=k3d-cluster2 label svc voting-svc \\\n  -n emojivoto mirror.linkerd.io/exported=remote-discovery\n```", "```\n$ kubectl get svc -n emojivoto --context k3d-cluster1\n$ kubectl get svc -n emojivoto --context k3d-cluster2\n```", "```\n# Any valid Service DNS name should work here.\n$ linkerd diagnostics endpoints --context k3d-cluster1 \\\n  emoji-svc-cluster2.linkerd-multicluster.svc.cluster.local\n$ linkerd diagnostics endpoints --context k3d-cluster2 \\\n  web-svc-cluster1.linkerd-multicluster.svc.cluster.local\n```", "```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: emoji-svc\n  namespace: emojivoto\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: http\n```", "```\n---\napiVersion: policy.linkerd.io/v1beta3\nkind: HTTPRoute\nmetadata:\n  name: emoji-svc-route\n  namespace: emojivoto\nspec:\n  parentRefs:\n    - name: emoji-svc\n      kind: Service\n      group: \"\"\n      port: 80\n  rules:\n  - backendRefs:\n    - name: emoji-svc-cluster2\n      port: 80\n      weight: 100\n    timeouts:\n      request: 5s\n```", "```\n$ kubectl --context k3d-cluster1 port-forward -n emojivoto web-svc 8080:80 &\n\n# Open a browser to http://localhost:8000/ here\n```", "```\n$ linkerd  --context k3d-cluster1 viz dashboard\n$ linkerd  --context k3d-cluster2 viz dashboard\n```", "```\n$ linkerd viz stat service -n emojivoto --context k3d-cluster1\n$ linkerd viz stat service -n emojivoto --context k3d-cluster2\n```"]