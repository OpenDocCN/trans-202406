- en: Chapter 13\. ConfigMaps and Secrets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章\. ConfigMaps 和 Secrets
- en: It’s good practice to make container images as reusable as possible. The same
    image should be able to be used for development, staging, and production. It’s
    even better if the same image is general-purpose enough to be used across applications
    and services. Testing and versioning are more risky and complicated if images
    need to be re-created for each new environment. How then do we specialize the
    use of that image at runtime?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能使容器镜像可重复使用是一个好的实践。同一个镜像应该能够用于开发、暂存和生产环境。如果同一个镜像足够通用，能够跨应用和服务使用，那就更好了。如果每个新环境都需要重新创建镜像，测试和版本控制就会变得更加风险和复杂。那么在运行时如何专门化使用该镜像呢？
- en: This is where ConfigMaps and Secrets come into play. ConfigMaps are used to
    provide configuration information for workloads. This can be either fine-grained
    information like a string or a composite value in the form of a file. Secrets
    are similar to ConfigMaps but focus on making sensitive information available
    to the workload. They can be used for things like credentials or TLS certificates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 ConfigMaps 和 Secrets 发挥作用的地方。ConfigMaps 用于为工作负载提供配置信息。这既可以是像字符串一样的细粒度信息，也可以是文件形式的复合值。Secrets
    类似于 ConfigMaps，但专注于使敏感信息对工作负载可用。它们可以用于诸如凭据或 TLS 证书之类的内容。
- en: ConfigMaps
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ConfigMaps
- en: One way to think of a ConfigMap is as a Kubernetes object that defines a small
    filesystem. Another way is as a set of variables that can be used when defining
    the environment or command line for your containers. The key thing to note is
    that the ConfigMap is combined with the Pod right before it is run. This means
    that the container image and the Pod definition can be reused by many workloads
    just by changing the ConfigMap that is used.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ConfigMap 视为 Kubernetes 对象之一，用于定义一个小型文件系统。另一种方式是作为在定义容器环境或命令行时可使用的变量集合。需要注意的关键点是，ConfigMap
    与 Pod 在运行前被合并。这意味着容器镜像和 Pod 定义可以通过更改使用的 ConfigMap 被许多工作负载重复使用。
- en: Creating ConfigMaps
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ConfigMaps
- en: Let’s jump right in and create a ConfigMap. Like many objects in Kubernetes,
    you can create these in an immediate, imperative way, or you can create them from
    a manifest on disk. We’ll start with the imperative method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们马上创建一个 ConfigMap。像 Kubernetes 中的许多对象一样，您可以通过即时和命令式的方式创建它们，或者可以从磁盘上的清单创建它们。我们将从即时方法开始。
- en: First, suppose we have a file on disk (called *my-config.txt*) that we want
    to make available to the Pod in question, as shown in [Example 13-1](#my-config-ex).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，假设我们在磁盘上有一个文件（称为 *my-config.txt*），我们希望将其提供给相关的 Pod 使用，如 [示例 13-1](#my-config-ex)
    中所示。
- en: Example 13-1\. my-config.txt
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-1\. my-config.txt
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let’s create a ConfigMap with that file. We’ll also add a couple of simple
    key/value pairs here. These are referred to as literal values on the command line:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们用这个文件创建一个 ConfigMap。我们还会在这里添加几个简单的键值对。这些在命令行上被称为字面值：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The equivalent YAML for the ConfigMap object we just created is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚创建的 ConfigMap 对象的等效 YAML 如下所示：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the ConfigMap is just some key/value pairs stored in an object.
    The interesting part is when you try to *use* a ConfigMap.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，ConfigMap 只是一个存储在对象中的键值对。有趣的部分是当您尝试*使用* ConfigMap 时。
- en: Using a ConfigMap
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ConfigMap
- en: 'There are three main ways to use a ConfigMap:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ConfigMap 的三种主要方式：
- en: Filesystem
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统
- en: You can mount a ConfigMap into a Pod. A file is created for each entry based
    on the key name. The contents of that file are set to the value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 ConfigMap 挂载到 Pod 中。根据键名，为每个条目创建一个文件。该文件的内容设置为该值。
- en: Environment variable
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量
- en: A ConfigMap can be used to dynamically set the value of an environment variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 可以用于动态设置环境变量的值。
- en: Command-line argument
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行参数
- en: Kubernetes supports dynamically creating the command line for a container based
    on ConfigMap values.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 支持基于 ConfigMap 值动态创建容器的命令行。
- en: Let’s create a manifest for `kuard` that pulls all of these together, as shown
    in [Example 13-2](#kuard_config_YAML_example).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 `kuard` 创建一个清单，将所有这些内容汇总到一起，如 [示例 13-2](#kuard_config_YAML_example) 中所示。
- en: Example 13-2\. kuard-config.yaml
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-2\. kuard-config.yaml
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For the filesystem method, we create a new volume inside the Pod and give it
    the name `config-volume`. We then define this volume to be a ConfigMap volume
    and point at the ConfigMap to mount. We have to specify where this gets mounted
    into the `kuard` container with a `volumeMount`. In this case, we are mounting
    it at `/config`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文件系统方法，我们在 Pod 内部创建一个新的卷，并给它命名为 `config-volume`。然后我们将此卷定义为 ConfigMap 卷，并指向要挂载的
    ConfigMap。我们必须指定将其挂载到 `kuard` 容器中的位置，使用 `volumeMount`。在这种情况下，我们将其挂载在 `/config`。
- en: Environment variables are specified with a special `valueFrom` member. This
    references the ConfigMap and the data key to use within that ConfigMap. Command-line
    arguments build on environment variables. Kubernetes will perform the correct
    substitution with a special `$(*<env-var-name>*)` syntax.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量使用特殊的 `valueFrom` 成员进行指定。这引用了 ConfigMap 及其内部的数据键。命令行参数基于环境变量构建。Kubernetes
    将使用特殊的 `$(*<env-var-name>*)` 语法执行正确的替换。
- en: 'Run this Pod, and let’s port-forward to examine how the app sees the world:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此 Pod，并让我们进行端口转发，以查看应用程序如何看待这个世界：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now point your browser to *http://localhost:8080*. We can look at how we’ve
    injected configuration values into the program in all three ways. Click the “Server
    Env” tab on the left. This will show the command line that the app was launched
    with along with its environment, as shown in [Figure 13-1](#kuard-config1).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将浏览器指向 *http://localhost:8080*。我们可以看看如何以三种方式将配置值注入到程序中。点击左侧的“Server Env”选项卡。这将显示应用程序启动时使用的命令行及其环境，如
    [图 13-1](#kuard-config1) 所示。
- en: '![kur3 1301](assets/kur3_1301.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![kur3 1301](assets/kur3_1301.png)'
- en: Figure 13-1\. `kuard`, showing its environment
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. 显示 `kuard` 的环境
- en: Here we can see that we’ve added two environment variables (`ANOTHER_PARAM`
    and `EXTRA_PARAM`) whose values are set via the ConfigMap. We’ve also added an
    argument to the command line of `kuard` based on the `EXTRA_PARAM` value.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们添加了两个环境变量（`ANOTHER_PARAM` 和 `EXTRA_PARAM`），它们的值通过 ConfigMap 设置。我们还在
    `kuard` 的命令行中添加了一个基于 `EXTRA_PARAM` 值的参数。
- en: Next, click the “File system browser” tab ([Figure 13-2](#kuard-config2)). This
    lets you explore the filesystem as the application sees it. You should see an
    entry called `/config`. This is a volume created based on our ConfigMap. If you
    navigate into that, you’ll see that a file has been created for each entry of
    the ConfigMap. You’ll also see some hidden files (prepended with *..*) that are
    used to do a clean swap of new values when the ConfigMap is updated.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击“文件系统浏览器”选项卡（[图 13-2](#kuard-config2)）。这允许您探索应用程序所见的文件系统。您应该看到一个名为 `/config`
    的条目。这是基于我们的 ConfigMap 创建的卷。如果您进入其中，您将看到每个 ConfigMap 条目都创建了一个文件。您还将看到一些隐藏文件（以 *..*
    开头），这些文件用于在更新 ConfigMap 时进行新值的干净交换。
- en: '![kur3 1302](assets/kur3_1302.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![kur3 1302](assets/kur3_1302.png)'
- en: Figure 13-2\. The /config directory as seen through `kuard`
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. 通过 `kuard` 查看的 /config 目录
- en: Secrets
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机密
- en: While ConfigMaps are great for most configuration data, there is certain data
    that is extra sensitive. This includes passwords, security tokens, or other types
    of private keys. Collectively, we call this type of data “Secrets.” Kubernetes
    has native support for storing and handling this data with care.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ConfigMaps 对于大多数配置数据非常适用，但某些数据非常敏感。这包括密码、安全令牌或其他类型的私钥。总称为这类数据“Secrets”。Kubernetes
    具有本地支持，用于安全地存储和处理此类数据。
- en: Secrets enable container images to be created without bundling sensitive data.
    This allows containers to remain portable across environments. Secrets are exposed
    to Pods via explicit declaration in Pod manifests and the Kubernetes API. In this
    way, the Kubernetes Secrets API provides an application-centric mechanism for
    exposing sensitive configuration information to applications in a way that’s easy
    to audit and leverages native OS isolation primitives.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets 允许创建不捆绑敏感数据的容器映像。这使得容器可以在不同环境中保持可移植性。Secrets 通过在 Pod 清单和 Kubernetes
    API 中显式声明向 Pod 暴露。通过这种方式，Kubernetes Secrets API 提供了一种面向应用程序的机制，用于以易于审计的方式向应用程序公开敏感的配置信息，并利用本地操作系统隔离原语。
- en: The remainder of this section will explore how to create and manage Kubernetes
    Secrets, and also lay out best practices for exposing Secrets to Pods that require
    them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分将探讨如何创建和管理 Kubernetes Secrets，并提出将 Secrets 暴露给需要它们的 Pod 的最佳实践。
- en: Warning
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: By default, Kubernetes Secrets are stored in plain text in the `etcd` storage
    for the cluster. Depending on your requirements, this may not be sufficient security
    for you. In particular, anyone who has cluster administration rights in your cluster
    will be able to read all of the Secrets in the cluster.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Kubernetes Secrets 以明文形式存储在集群的 `etcd` 存储中。根据您的需求，这可能不足以提供足够的安全性。特别是，在您的集群中具有集群管理权限的任何人都可以读取集群中的所有
    Secrets。
- en: In recent versions of Kubernetes, support has been added for encrypting the
    Secrets with a user-supplied key, generally integrated into a cloud key store.
    Additionally, most cloud key stores have integration with [Kubernetes Secrets
    Store CSI Driver](https://oreil.ly/DRHt6) volumes, enabling you to skip Kubernetes
    Secrets entirely and rely exclusively on the cloud provider’s key store. All of
    these options should provide you with sufficient tools to craft a security profile
    that suits your needs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的 Kubernetes 版本中，已添加了使用用户提供的密钥对 Secrets 进行加密的支持，通常集成到云密钥存储中。此外，大多数云密钥存储与
    [Kubernetes Secrets Store CSI Driver](https://oreil.ly/DRHt6) volumes 集成，使您可以完全跳过
    Kubernetes Secrets，完全依赖于云提供商的密钥存储。所有这些选项都应为您提供足够的工具来创建符合您需求的安全配置文件。
- en: Creating Secrets
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Secrets
- en: Secrets are created using the Kubernetes API or the `kubectl` command-line tool.
    Secrets hold one or more data elements as a collection of key/value pairs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes API 或 `kubectl` 命令行工具创建 Secrets。Secrets 作为一组键/值对持有一个或多个数据元素。
- en: In this section, we will create a Secret to store a TLS key and certificate
    for the `kuard` application that meets the storage requirements listed previously.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个 Secret 来存储 `kuard` 应用程序的 TLS 密钥和证书，以满足前面列出的存储要求。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `kuard` container image does not bundle a TLS certificate or key. This allows
    the `kuard` container to remain portable across environments and distributable
    through public Docker repositories.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`kuard` 容器镜像不捆绑 TLS 证书或密钥。这使得 `kuard` 容器可以跨环境移植，并通过公共 Docker 仓库分发。'
- en: 'The first step in creating a Secret is to obtain the raw data we want to store.
    The TLS key and certificate for the `kuard` application can be downloaded by running
    the following commands:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Secret 的第一步是获取要存储的原始数据。可以通过运行以下命令下载 `kuard` 应用程序的 TLS 密钥和证书：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Warning
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: These certificates are shared with the world and they provide no actual security.
    Please do not use them except as a learning tool in these examples.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些证书与世界共享，并没有提供实际的安全性。除了在这些示例中作为学习工具外，请不要使用它们。
- en: 'With the *kuard.crt* and *kuard.key* files stored locally, we are ready to
    create a Secret. Create a Secret named `kuard-tls` using the `create secret` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地存储的 *kuard.crt* 和 *kuard.key* 文件，我们已准备好创建 Secret。使用 `create secret` 命令创建名为
    `kuard-tls` 的 Secret：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `kuard-tls` Secret has been created with two data elements. Run the following
    command to get details:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`kuard-tls` Secret 已创建并包含两个数据元素。运行以下命令以获取详细信息：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With the `kuard-tls` Secret in place, we can consume it from a Pod by using
    a Secrets volume.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有了 `kuard-tls` Secret，我们可以通过使用 Secrets volume 从 Pod 中消费它。
- en: Consuming Secrets
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消费 Secrets
- en: Secrets can be consumed using the Kubernetes REST API by applications that know
    how to call that API directly. However, our goal is to keep applications portable.
    Not only should they run well in Kubernetes, but they should run, unmodified,
    on other platforms.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以使用 Kubernetes REST API 消费 Secrets，前提是它们知道如何直接调用该 API。然而，我们的目标是保持应用程序的可移植性。它们不仅应该在
    Kubernetes 中运行良好，而且应该在其他平台上不经修改地运行。
- en: Instead of accessing Secrets through the API server, we can use a *Secrets volume*.
    Secret data can be exposed to Pods using the Secrets volume type. Secrets volumes
    are managed by the `kubelet` and are created at Pod creation time. Secrets are
    stored on `tmpfs` volumes (aka RAM disks), and as such are not written to disk
    on nodes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不再通过 API 服务器访问 Secrets，我们可以使用*Secrets volume*。使用 Secrets volume 类型，可以向 Pods
    公开 Secret 数据。Secrets volumes 由 `kubelet` 管理，并在 Pod 创建时创建。Secrets 存储在 `tmpfs` volume（也称为
    RAM 磁盘）上，因此不会写入节点的磁盘。
- en: 'Each data element of a Secret is stored in a separate file under the target
    mount point specified in the volume mount. The `kuard-tls` Secret contains two
    data elements: *kuard.crt* and *kuard.key*. Mounting the `kuard-tls` Secrets volume
    to `/tls` results in the following files:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Secret 的每个数据元素存储在卷挂载中指定的目标挂载点下的单独文件中。`kuard-tls` Secret 包含两个数据元素：*kuard.crt*
    和 *kuard.key*。将 `kuard-tls` Secrets volume 挂载到 `/tls` 将生成以下文件：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Pod manifest in [Example 13-3](#kuard-secret.yaml_ex) demonstrates how to
    declare a Secrets volume, which exposes the `kuard-tls` Secret to the `kuard`
    container under `/tls`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-3\. kuard-secret.yaml
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the `kuard-tls` Pod using `kubectl` and observe the log output from
    the running Pod:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Connect to the Pod by running:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now navigate your browser to *https://localhost:8443*. You should see some invalid
    certificate warnings because this is a self-signed certificate for *kuard.example.com*.
    If you navigate past this warning, you should see the `kuard` server hosted via
    HTTPS. Use the “File system browser” tab to find the certificates on disk in the
    `/tls` directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Private Container Registries
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A special use case for Secrets is to store access credentials for private container
    registries. Kubernetes supports using images stored on private registries, but
    access to those images requires credentials. Private images can be stored across
    one or more private registries. This presents a challenge for managing credentials
    for each private registry on every possible node in the cluster.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '*Image pull Secrets* leverage the Secrets API to automate the distribution
    of private registry credentials. Image pull Secrets are stored just like regular
    Secrets but are consumed through the `spec.imagePullSecrets` Pod specification
    field.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `kubectl create secret docker-registry` to create this special kind of
    Secret:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Enable access to the private repository by referencing the image `pull secret`
    in the Pod manifest file, as shown in [Example 13-4](#kuard_secret_ips-yaml_ex).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-4\. kuard-secret-ips.yaml
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you are repeatedly pulling from the same registry, you can add the Secrets
    to the default service account associated with each Pod to avoid having to specify
    the Secrets in every Pod you create.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Naming Constraints
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key names for data items inside of a Secret or ConfigMap are defined to
    map to valid environment variable names. They may begin with a dot, then are followed
    by a letter or number, followed by characters including dots, dashes, and underscores.
    Dots cannot be repeated, and dots and underscores or dashes cannot be adjacent
    to each other. More formally, this means that they must conform to the regular
    expression `^[.]?[a-zAZ0-9]([.]?[a-zA-Z0-9]+[-_a-zA-Z0-9]?)*$`. Some examples
    of valid and invalid names for ConfigMaps and Secrets are given in [Table 13-1](#configmap_and_secret_table).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-1\. ConfigMap and Secret key examples
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '| Valid key name | Invalid key name |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| `.auth_token` | `Token..properties` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| `Key.pem` | `auth file.json` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| `config_file` | `_password.txt` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When selecting a key name, remember that these keys can be exposed to Pods via
    a volume mount. Pick a name that is going to make sense when specified on a command
    line or in a config file. Storing a TLS key as `key.pem` is clearer than `tls-key`
    when configuring applications to access Secrets.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: ConfigMap data values are simple UTF-8 text specified directly in the manifest.
    Secret data values hold arbitrary data encoded using base64\. The use of base64
    encoding makes it possible to store binary data. This does, however, make it more
    difficult to manage Secrets that are stored in YAML files as the base64-encoded
    value must be put in the YAML. Note that the maximum size for a ConfigMap or Secret
    is 1 MB.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Managing ConfigMaps and Secrets
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ConfigMaps and Secrets are managed through the Kubernetes API. The usual `create`,
    `delete`, `get`, and `describe` commands work for manipulating these objects.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Listing
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `kubectl get secrets` command to list all Secrets in the current
    namespace:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similarly, you can list all of the ConfigMaps in a namespace:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`kubectl describe` can be used to get more details on a single object:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, you can see the raw data (including values in Secrets!) by using a
    command similar to the following: `kubectl get configmap my-config -o yaml` or
    `kubectl get secret kuard-tls` `-o yaml`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Creating
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to create a Secret or a ConfigMap is via `kubectl create secret
    generic` or `kubectl create configmap`. There are a variety of ways to specify
    the data items that go into the Secret or ConfigMap. These can be combined in
    a single command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '`--from-file=*<filename>*`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Load from the file with the Secret data key that’s the same as the filename.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '`--from-file=*<key>*=*<filename>*`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Load from the file with the Secret data key explicitly specified.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '`--from-file=*<directory>*`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Load all the files in the specified directory where the filename is an acceptable
    key name.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '`--from-literal=*<key>*=*<value>*`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Use the specified key/value pair directly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Updating
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can update a ConfigMap or Secret and have it reflected in running applications.
    There is no need to restart if the application is configured to reread configuration
    values. Next, we will describe three ways to update ConfigMaps or Secrets.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Update from file
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have a manifest for your ConfigMap or Secret, you can just edit it directly
    and replace it with a new version using `kubectl replace -f <*filename*>`. You
    can also use `kubectl apply -f *<filename>*` if you previously created the resource
    with `kubectl apply`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Due to the way that datafiles are encoded into these objects, updating a configuration
    can be a bit cumbersome; there is no `kubectl` command that supports loading data
    from an external file. The data must be stored directly in the YAML manifest.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The most common use case is when the ConfigMap is defined as part of a directory
    or list of resources and everything is created and updated together. Oftentimes
    these manifests will be checked into source control.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is generally a bad idea to check Secret YAML files into source control because
    it is too easy to inadvertently push these files someplace public and leak your
    Secrets.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Re-create and update
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you store the inputs into your ConfigMaps or Secrets as separate files on
    disk (as opposed to embedded into YAML directly), you can use `kubectl` to re-create
    the manifest and then use it to update the object, which will look something like
    this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将输入存储到 ConfigMaps 或 Secrets 中作为独立的文件（而不是直接嵌入到 YAML 中），你可以使用 `kubectl` 重新创建清单，然后使用它来更新对象，看起来像这样：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command line first creates a new Secret with the same name as our existing
    Secret. If we just stopped there, the Kubernetes API server would return an error
    complaining that we are trying to create a Secret that already exists. Instead,
    we tell `kubectl` not to actually send the data to the server but instead to dump
    the YAML that it *would have* sent to the API server to `stdout`. We then pipe
    that to `kubectl replace` and use `-f -` to tell it to read from `stdin`. In this
    way, we can update a Secret from files on disk without having to manually base64-encode
    data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令行首先使用与现有 Secret 同名的新 Secret。如果我们仅止步于此，Kubernetes API 服务器将返回错误， complaining
    that we are trying to create a Secret that already exists. Instead, we tell `kubectl`
    not to actually send the data to the server but instead to dump the YAML that
    it *would have* sent to the API server to `stdout`. We then pipe that to `kubectl
    replace` and use `-f -` to tell it to read from `stdin`. In this way, we can update
    a Secret from files on disk without having to manually base64-encode data.
- en: Edit current version
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑当前版本
- en: 'The final way to update a ConfigMap is to use `kubectl edit` to bring up a
    version of the ConfigMap in your editor so you can tweak it (you could also do
    this with a Secret, but you’d be stuck managing the base64 encoding of values
    on your own):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 ConfigMap 的最终方法是使用 `kubectl edit` 在编辑器中提供 ConfigMap 的一个版本，以便你可以进行微调（你也可以用
    Secret 做同样的事情，但你将被困在自己管理值的 base64 编码中）：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should see the ConfigMap definition in your editor. Make your desired changes
    and then save and close your editor. The new version of the object will be pushed
    to the Kubernetes API server.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在编辑器中看到 ConfigMap 的定义。进行所需的更改，然后保存并关闭编辑器。对象的新版本将被推送到 Kubernetes API 服务器。
- en: Live updates
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时更新
- en: Once a ConfigMap or Secret is updated using the API, it’ll be automatically
    pushed to all volumes that use that ConfigMap or Secret. It may take a few seconds,
    but the file listing and contents of the files, as seen by `kuard`, will be updated
    with these new values. Using this live update feature, you can update the configuration
    of applications without restarting them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 API 更新 ConfigMap 或 Secret 后，它将自动推送到使用该 ConfigMap 或 Secret 的所有卷。可能需要几秒钟，但文件列表和文件内容（由
    `kuard` 看到）将使用这些新值进行更新。使用此实时更新功能，你可以更新应用程序的配置而无需重启它们。
- en: Currently there is no built-in way to signal an application when a new version
    of a ConfigMap is deployed. It is up to the application (or some helper script)
    to look for the config files to change and reload them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有内置的方法来在部署 ConfigMap 的新版本时向应用程序发出信号。这取决于应用程序（或某些辅助脚本）来查找要更改和重新加载的配置文件。
- en: Using the file browser in `kuard` (accessed through `kubectl port-forward`)
    is a great way to interactively play with dynamically updating Secrets and ConfigMaps.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kuard` 中的文件浏览器（通过 `kubectl port-forward` 访问）是与动态更新 Secrets 和 ConfigMaps
    互动的好方法。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: ConfigMaps and Secrets are a great way to provide dynamic configuration in your
    application. They allow you to create a container image (and Pod definition) once
    and reuse it in different contexts. This can include using the exact same image
    as you move from development to staging to production. It can also include using
    a single image across multiple teams and services. Separating configuration from
    application code will make your applications more reliable and reusable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMaps 和 Secrets 是提供应用程序动态配置的好方法。它们允许你只需创建一个容器镜像（和 Pod 定义），然后在不同的上下文中重复使用它。这可以包括从开发到分级再到生产时使用完全相同的镜像。它还可以包括在多个团队和服务之间使用单个镜像。将配置与应用程序代码分离将使你的应用程序更可靠和可重用。
