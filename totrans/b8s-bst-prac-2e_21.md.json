["```\nkubectl api-versions\nNAME              SHORTNAMES  APIVERSION                NAMESPACED  KIND\nbindings                      v1                        true        Binding\ncomponentstatu... cs          v1                        false       ComponentS...\nconfigmaps        cm          v1                        true        ConfigMap\nedited for space\nmutatingwebhoo...             admissionregistration...  false       MutatingWe...\nvalidatingwebh...             admissionregistration...  false       Validating...\ncustomresource... crd,crds    apiextensions.k8s.io/...  false       CustomReso...\napiservices                   apiregistration.k8s.i...  false       APIService\ncontrollerrevi...             apps/v1                   true        Controller...\ndaemonsets        ds          apps/v1                   true        DaemonSet\ndeployments       deploy      apps/v1                   true        Deployment\nreplicasets       rs          apps/v1                   true        ReplicaSet\nstatefulsets      sts         apps/v1                   true        StatefulSet\n```", "```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: sample\nspec:\n  selector:\n    matchLabels:\n```", "```\nkubectl api-versions\n---- excerpt\nautoscaling/v1\nautoscaling/v2\nautoscaling/v2beta1\nautoscaling/v2beta2\n```", "```\n$ kubebuilder init --domain platform.evillgenius.com\n    --repo platform.evillgenius.com/platformapp --project-name=pe-app\nWriting kustomize manifests for you to edit...\nWriting scaffold for you to edit...\nGet controller runtime:\n$ go get sigs.k8s.io/controller-runtime@v0.14.1\ngo: downloading sigs.k8s.io/controller-runtime v0.14.1\ngo: downloading k8s.io/apimachinery v0.26.0\n....................................................... removed for brevity ...\nUpdate dependencies:\n$ go mod tidy\ngo: downloading github.com/go-logr/zapr v1.2.3\ngo: downloading go.uber.org/zap v1.24.0\ngo: downloading github.com/onsi/ginkgo/v2 v2.6.0\ngo: downloading github.com/onsi/gomega v1.24.1\ngo: downloading gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f\ngo: downloading github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e\nNext: define a resource with:\n$ kubebuilder create api\n```", "```\n$ tree\n.\n├── config\n│   ├── default\n│   │   ├── kustomization.yaml\n│   │   ├── manager_auth_proxy_patch.yaml\n│   │   └── manager_config_patch.yaml\n│   ├── manager\n│   │   ├── kustomization.yaml\n│   │   └── manager.yaml\n│   ├── prometheus\n│   │   ├── kustomization.yaml\n│   │   └── monitor.yaml\n│   └── rbac\n│       ├── auth_proxy_client_clusterrole.yaml\n│       ├── auth_proxy_role_binding.yaml\n│       ├── auth_proxy_role.yaml\n│       ├── auth_proxy_service.yaml\n│       ├── kustomization.yaml\n│       ├── leader_election_role_binding.yaml\n│       ├── leader_election_role.yaml\n│       ├── role_binding.yaml\n│       └── service_account.yaml\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── hack\n│   └── boilerplate.go.txt\n├── main.go\n├── Makefile\n├── PROJECT\n└── README.md\n```", "```\n$ kubebuilder create api --group egplatform --version v1alpha1 --kind EGApp\nCreate Resource [y/n]\ny\nCreate Controller [y/n]\ny\nWriting kustomize manifests for you to edit...\nWriting scaffold for you to edit...\napi/v1alpha1/egapp_types.go\ncontrollers/egapp_controller.go\nUpdate dependencies:\n$ go mod tidy\nRunning make:\n$ make generate\nmkdir -p /home/eddiejv/dev/projects/operators/platformapp/bin\ntest -s /home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen\n  && /home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen\n  --version | grep -q v0.11.1 || \\\nGOBIN=/home/eddiejv/dev/projects/operators/platformapp/bin\n  go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.11.1\ngo: downloading sigs.k8s.io/controller-tools v0.11.1\ngo: downloading github.com/spf13/cobra v1.6.1\ngo: downloading github.com/gobuffalo/flect v0.3.0\ngo: downloading golang.org/x/tools v0.4.0\ngo: downloading k8s.io/utils v0.0.0-20221107191617-1a15be271d1d\ngo: downloading github.com/mattn/go-colorable v0.1.9\n/home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen\n  object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\nNext: implement your new API and generate the manifests (e.g. CRDs,CRs) with:\n$ make manifests\n```", "```\ntype EGAppSpec struct {\n    // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n    // Important: Run \"make\" to regenerate code after modifying this file\n\n    // Foo is an example field of EGApp. Edit egapp_types.go to remove/update\n    Foo string `json:\"foo,omitempty\"`\n\n}\n\n// EGAppStatus defines the observed state of EGApp\n// +kubebuilder:subresource:status\ntype EGAppStatus struct {\n    // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster\n    // Important: Run \"make\" to regenerate code after modifying this file\n\n}\n```", "```\ntype EGAppSpec struct {\n    // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n    // Important: Run \"make\" to regenerate code after modifying this file\n\n    // AppId is the unique AppId match to internal catalog systems\n    AppId string `json:\"appId,omitempty\"`\n\n    // +kubebuilder:validation:Enum=java;python;go\n    Framework string `json:\"framework\"`\n\n    // +kubebuilder:validation:Optional\n    // +kubebuilder:validation:Enum=lowMem;highMem;highCPU;balanced\n    // +kubebuilder:default=\"lowMem\"\n    InstanceType string `json:\"instanceType\"`\n\n    // +kubebuilder:validation:Enum=dev;stage;prod\n    Environment string `json:\"environment\"`\n\n    // +kubebuilder:validation:Optional\n    // +kubebuilder:default:=1\n    ReplicaCount int32 `json:\"replicaCount\"`\n}\n\n// EGAppStatus defines the observed state of EGApp\n// +kubebuilder:subresource:status\ntype EGAppStatus struct {\n    // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster\n    // Important: Run \"make\" to regenerate code after modifying this file\n\n    Pods []string `json:\"pods\"`\n}\n```", "```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version: v0.11.1\n  creationTimestamp: null\n  name: egapps.egplatform.platform.evillgenius.com\nspec:\n  group: egplatform.platform.evillgenius.com\n  names:\n    kind: EGApp\n    listKind: EGAppList\n    plural: egapps\n    singular: egapp\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        description: EGApp is the Schema for the egapps API\n        properties:\n          apiVersion:\n            description: 'APIVersion defines the versioned schema of this\n              representation of an object. Servers should convert recognized\n              schemas to the latest internal value, and may reject unrecognized\n              values. More info: https://git.k8s.io/community/contributors/\n              devel/sig-architecture/api-conventions.md#resources'\n            type: string\n          kind:\n            description: 'Kind is a string value representing the REST resource\n              this object represents. Servers may infer this from the endpoint\n              the client submits requests to. Cannot be updated. In CamelCase.\n              More info: https://git.k8s.io/community/contributors/devel/\n              sig-architecture/api-conventions.md#types-kinds'\n            type: string\n          metadata:\n            type: object\n          spec:\n            description: EGAppSpec defines the desired state of EGApp\n            properties:\n              appId:\n                description: Foo is an example field of EGApp. Edit\n                  egapp_types.go to remove/update\n                type: string\n              environment:\n                enum:\n                - dev\n                - stage\n                - prod\n                type: string\n              framework:\n                enum:\n                - java\n                - python\n                - go\n                type: string\n              instanceType:\n                default: lowMem\n                enum:\n                - lowMem\n                - highMem\n                - highCPU\n                - balanced\n                type: string\n              replicaCount:\n                default: 1\n                format: int32\n                type: integer\n            required:\n            - environment\n            - framework\n            type: object\n          status:\n            description: EGAppStatus defines the observed state of EGApp\n            properties:\n              pods:\n                items:\n                  type: string\n                type: array\n            required:\n            - pods\n            type: object\n        type: object\n    served: true\n    storage: true\n    subresources:\n      status: {}\n```", "```\n$ kubebuilder create webhook --group egplatform --version v1alpha1 --kind EGApp\n    --defaulting --programmatic-validation\n```", "```\n$ make install\ntest -s /home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen &&\n/home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen --version |\ngrep -q v0.11.1 || \\\nGOBIN=/home/eddiejv/dev/projects/operators/platformapp/bin go install\nsigs.k8s.io/controller-tools/cmd/controller-gen@v0.11.1/home/eddiejv/dev/\nprojects/operators/platformapp/bin/controller-gen rbac:roleName=manager-role\ncrd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n/home/eddiejv/dev/projects/operators/platformapp/bin/kustomize build config/crd\n| kubectl apply -f -\ncustomresourcedefinition.apiextensions.k8s.io/\negapps.egplatform.platform.evillgenius.com created\n```", "```\n$ kubectl explain egapp --recursive\nKIND:     EGApp\nVERSION:  egplatform.platform.evillgenius.com/v1alpha1\n\nDESCRIPTION:\n     EGApp is the Schema for the egapps API\n\nFIELDS:\n   apiVersion   <string>\n   kind <string>\n   metadata     <Object>\n      annotations       <map[string]string>\n      creationTimestamp <string>\n      deletionGracePeriodSeconds        <integer>\n      deletionTimestamp <string>\n      finalizers        <[]string>\n      generateName      <string>\n      generation        <integer>\n      labels    <map[string]string>\n      managedFields     <[]Object>\n         apiVersion     <string>\n         fieldsType     <string>\n         fieldsV1       <map[string]>\n         manager        <string>\n         operation      <string>\n         subresource    <string>\n         time   <string>\n      name      <string>\n      namespace <string>\n      ownerReferences   <[]Object>\n         apiVersion     <string>\n         blockOwnerDeletion     <boolean>\n         controller     <boolean>\n         kind   <string>\n         name   <string>\n         uid    <string>\n      resourceVersion   <string>\n      selfLink  <string>\n      uid       <string>\n   spec <Object>\n      appId     <string>\n      environment      <string>\n      framework <string>\n      instanceType      <string>\n      replicaCount      <integer>\n   status       <Object>\n      pods      <[]string>\n```", "```\n// +kubebuilder:rbac:groups=egplatform.platform.evillgenius.com,\n  resources=egapps,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=egplatform.platform.evillgenius.com,\n  resources=egapps/status,verbs=get;update;patch\n// +kubebuilder:rbac:groups=egplatform.platform.evillgenius.com,\n  resources=egapps/finalizers,verbs=update\n\n// Reconcile is part of the main Kubernetes reconciliation loop which aims to\n// move the current state of the cluster closer to the desired state.\n// TODO(user): Modify the Reconcile function to compare the state specified by\n// the EGApp object against the actual cluster state, and then\n// perform operations to make the cluster state reflect the state specified by\n// the user.\n//\n// For more details, check Reconcile and its Result here:\n// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.14.1/pkg/reconcile\nfunc (r *EGAppReconciler) Reconcile(ctx context.Context, req ctrl.Request)\n  (ctrl.Result, error) {\n    _ = log.FromContext(ctx)\n\n    // TODO(user): your logic here\n    logger := log.Log.WithValues(\"EGApp\", req.NamespacedName)\n    logger.Info(\"EGApp Reconcile started...\")\n\n    // fetch the EGApp CR instance\n    egApp := &egplatformv1alpha1.EGApp{}\n\n    err := r.Get(ctx, req.NamespacedName, egApp)\n    if err != nil {\n        if errors.IsNotFound(err) {\n            logger.Info(\"EGApp resource not found. Object must be deleted\")\n            return ctrl.Result{}, nil\n        }\n        logger.Error(err, \"Failed to get EGApp\")\n        return ctrl.Result{}, nil\n    }\n    // check if the deployment already exists, if not create a new one\n    found := &appsv1.Deployment{}\n    err = r.Get(ctx, types.NamespacedName{Name: egApp.Name, Namespace:\n      egApp.Namespace}, found)\n    if err != nil {\n        dep := r.deploymentForEGApp(egApp)\n        logger.Info(\"Creating a  new deployment\", \"Deployment.Namespace\",\n          dep.Namespace, \"Deployment.Name\", dep.Name)\n        err = r.Create(ctx, dep)\n        if err != nil {\n            logger.Error(err, \"Failed to create new deployment\",\n              \"Deployment.Namespace\", dep.Namespace, \"Deployment.Name\", dep.Name)\n            return ctrl.Result{}, err\n        }\n        return ctrl.Result{}, nil\n    } else if err != nil {\n        logger.Error(err, \"Failed to get deployment\")\n        return ctrl.Result{}, nil\n    }\n    // This point, we have the deployment object created\n    // Ensure the deployment size is same as the spec\n    replicas := egApp.Spec.ReplicaCount\n    if *found.Spec.Replicas != replicas {\n        found.Spec.Replicas = &replicas\n        err = r.Update(ctx, found)\n        if err != nil {\n            logger.Error(err, \"Failed to update Deployment\",\n              \"Deployment.Namespace\", found.Namespace, \"Deployment.Name\",\n              found.Name)\n            return ctrl.Result{}, err\n        }\n        // Spec updated return and requeue\n        // Requeue for any reason other than an error\n        return ctrl.Result{Requeue: true}, nil\n    }\n\n    // Update the egApp status with pod names\n    // List the pods for this egApp's deployment\n    podList := &corev1.PodList{}\n    listOpts := []client.ListOption{\n        client.InNamespace(egApp.Namespace),\n        client.MatchingLabels(egApp.GetLabels()),\n    }\n\n    if err = r.List(ctx, podList, listOpts...); err != nil {\n        logger.Error(err, \"Failed to list pods\", \"egApp.Namespace\",\n          egApp.Namespace, \"egApp.Name\", egApp.Name)\n        return ctrl.Result{}, err\n    }\n    podNames := getPodNames(podList.Items)\n\n    // Update status.Pods if needed\n    if !reflect.DeepEqual(podNames, egApp.Status.Pods) {\n        egApp.Status.Pods = podNames\n        err := r.Status().Update(ctx, egApp)\n        if err != nil {\n            logger.Error(err, \"Failed to update egApp status\")\n            return ctrl.Result{}, err\n        }\n    }\n\n    return ctrl.Result{}, nil\n}\n\nfunc (r *EGAppReconciler) deploymentForEGApp(m *egplatformv1alpha1.EGApp)\n  *appsv1.Deployment {\n    ls := m.GetLabels()\n    replicas := m.Spec.ReplicaCount\n\n    deploy := &appsv1.Deployment{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      m.Name,\n            Namespace: m.Namespace,\n        },\n        Spec: appsv1.DeploymentSpec{\n            Replicas: &replicas,\n            Selector: &metav1.LabelSelector{\n                MatchLabels: ls,\n            },\n            Template: corev1.PodTemplateSpec{\n                ObjectMeta: metav1.ObjectMeta{\n                    Labels: ls,\n                },\n                Spec: corev1.PodSpec{\n                    Containers: []corev1.Container{{\n                        Image: \"gcr.io/kuar-demo/kuard-amd64:1\",  // hard-coded\n                          here, make this dynamic\n                        Name:  m.Spec.AppId,\n                        Ports: []corev1.ContainerPort{{\n                            ContainerPort: 8080,\n                            Name:          \"http\",\n                        }},\n                    }},\n                },\n            },\n        },\n    }\n    ctrl.SetControllerReference(m, deploy, r.Scheme)\n    return deploy\n}\n\n// Utility function to iterate over pods and return the names slice\nfunc getPodNames(pods []corev1.Pod) []string {\n    var podNames []string\n    for _, pod := range pods {\n        podNames = append(podNames, pod.Name)\n    }\n    return podNames\n}\n\n// SetupWithManager sets up the controller with the Manager.\nfunc (r *EGAppReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    return ctrl.NewControllerManagedBy(mgr).\n        For(&egplatformv1alpha1.EGApp{}).\n        Complete(r)\n}\n```", "```\n$ make run\ntest -s /home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen &&\n/home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen --version\n| grep -q v0.11.1 || \\\nGOBIN=/home/eddiejv/dev/projects/operators/platformapp/bin go install\nsigs.k8s.io/controller-tools/cmd/controller-gen@v0.11.1\n/home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen\nrbac:roleName=manager-role crd webhook paths=\"./...\"\noutput:crd:artifacts:config=config/crd/bases\n/home/eddiejv/dev/projects/operators/platformapp/bin/controller-gen\nobject:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\ngo run ./main.go\n2023-02-24T11:07:21-06:00 INFO controller-runtime.metrics Metrics server is\n  starting to listen {\"addr\": \":8080\"}\n2023-02-24T11:07:21-06:00 INFO setup starting manager\n2023-02-24T11:07:21-06:00 INFO Starting server {\"path\": \"/metrics\", \"kind\":\n  \"metrics\", \"addr\": \"[::]:8080\"}\n2023-02-24T11:07:21-06:00 INFO Starting server {\"kind\": \"health probe\",\n  \"addr\": \"[::]:8081\"}\n2023-02-24T11:07:21-06:00 INFO Starting EventSource {\"controller\": \"egapp\",\n  \"controllerGroup\": \"egplatform.platform.evillgenius.com\", \"controllerKind\":\n  \"EGApp\", \"source\": \"kind source: *v1alpha1.EGApp\"}\n2023-02-24T11:07:21-06:00 INFO Starting Controller {\"controller\": \"egapp\",\n  \"controllerGroup\": \"egplatform.platform.evillgenius.com\", \"controllerKind\":\n  \"EGApp\"}\n2023-02-24T11:07:21-06:00 INFO Starting workers {\"controller\": \"egapp\",\n  \"controllerGroup\": \"egplatform.platform.evillgenius.com\", \"controllerKind\":\n  \"EGApp\", \"worker count\": 1}\n```", "```\napiVersion: egplatform.platform.evillgenius.com/v1alpha1\nkind: EGApp\nmetadata:\n  labels:\n    app.Kubernetes.io/name: egapp\n    app.Kubernetes.io/instance: egapp-sample\n    app.Kubernetes.io/part-of: pe-app\n    app.Kubernetes.io/managed-by: kustomize\n    app.Kubernetes.io/created-by: pe-app\n  name: egapp-sample\nspec:\n  appId: egapp-sample\n  framework: go\n  instanceType: lowMem\n  environment: dev\n  replicaCount: 2\n```", "```\n2023-02-24T11:12:46-06:00 INFO EGApp Reconcile started... {\"EGApp\":\n  \"default/egapp-sample\"}\n2023-02-24T11:12:46-06:00 INFO Creating a  new deployment {\"EGApp\":\n  \"default/egapp-sample\", \"Deployment.Namespace\": \"default\", \"Deployment.Name\":\n  \"egapp-sample\"}\n```", "```\n2023-02-24T11:21:39-06:00 INFO EGApp Reconcile started... {\"EGApp\":\n  \"default/egapp-sample\"}\n2023-02-24T11:21:39-06:00 INFO EGApp resource not found. Object must\n  be deleted {\"EGApp\": \"default/egapp-sample\"}\n```", "```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\n...\nspec:\n  ...\n  conversion:\n    strategy: Webhook\n    webhook:\n      clientConfig:\n        service:\n          namespace: egapp-conversion\n          name: egapp\n          path: /egapp-conversion\n          port: 8081\n        caBundle: \"Hf8j0Kw...<base64-encoded PEM bundle>...tLS0K\"\n...\n```"]