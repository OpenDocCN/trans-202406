- en: Chapter 18\. Media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern browsers have rich APIs for working with video and audio streams. The
    WebRTC API supports creating these streams from devices such as cameras.
  prefs: []
  type: TYPE_NORMAL
- en: A video stream can be played live inside of a `<video>` element, and from there
    you can capture a frame of the video to save as an image or upload to an API.
    A `<video>` element can also be used to play back video that was recorded from
    a stream.
  prefs: []
  type: TYPE_NORMAL
- en: Before these APIs were available, you would have needed browser plug-ins to
    access the user’s camera. Today, you can use the Media Capture and Streams API
    to start reading data from the camera and microphone with just a small amount
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: Recording the Screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to capture a video of the user’s screen.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Screen Capture API to capture a video of the screen, then set it as
    the source of a `<video>` element (see [Example 18-1](#code_screenCapture)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-1\. Capturing a video of the screen
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The screen contents are not streamed live to the `<video>` element. Rather,
    the screen share is captured into memory. Once you’ve finished capturing the screen,
    the recorded video will play in the `<video>` element.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot going on here. First, call `navigator.mediaDevices.getDisplayMedia()`
    to initiate a screen capture. Depending on the browser and operating system, you
    will get some sort of prompt about screen recording (see [Figure 18-1](#img_screenRecording)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen recording prompt from Chrome on macOS](assets/wacb_1801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-1\. Screen recording prompt from Chrome on macOS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This function returns a `Promise` that resolves to a `MediaStream` of the user’s
    screen. Once this `Promise` resolves, the screen is being recorded, but the data
    isn’t going anywhere yet.
  prefs: []
  type: TYPE_NORMAL
- en: To stop recording, click the browser-provided button to stop sharing or call
    `mediaRecorder.stop()`. This will trigger the `dataavailable` event.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the event handler creates a `Blob` containing the captured video data
    and creates an object URL. You can then set the video’s `src` attribute to this
    object URL.
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, the screen recording will start playing in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example uses the `video/webm` MIME type, which has good browser support.
    WebM is an open audio and video file format that supports multiple codecs.
  prefs: []
  type: TYPE_NORMAL
- en: If the user does not give permission for screen recording, the `Promise` returned
    by `getDisplayMedia` will be rejected with an error.
  prefs: []
  type: TYPE_NORMAL
- en: This example shows how to play back the screen recording in a `<video>` element,
    but there are other things you can do once you have the `Blob` and object URL.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could send the `Blob` to a server using the Fetch API (see
    [Example 18-2](#example18-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-2\. Uploading the captured screen recording
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You could also trigger the browser to download the captured video (see [Example 18-3](#example18-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-3\. Triggering a download with a hidden link
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Capturing an Image from the User’s Camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to activate the user’s camera and take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `navigator.mediaDevices.getUserMedia` to get video from the camera.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll need to create a few elements, as shown in [Example 18-4](#example18-4).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-4\. The markup for capturing an image from the camera
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The canvas is hidden because it’s an intermediate step before producing an image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general approach is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Send the video stream to the `<video>` element to show a live preview from the
    camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you want to capture a photo, draw the current video frame on the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a data URL from the canvas to generate a JPEG image, and set it in the
    `<img>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, open the video stream and attach it to the `<video>` element (see [Example 18-5](#example18-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-5\. Getting the video stream
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Later, capture the image in response to a button click or other event (see [Example 18-6](#example18-6)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-6\. Capturing the image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you might expect, reading from the camera raises privacy concerns. As such,
    opening the user’s camera for the first time will trigger a permission request
    in the browser that the user must accept to grant access. If this request is denied,
    the `Promise` returned by `navigator.mediaDevices.getUserMedia` will be rejected
    with an error.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing a Video from the User’s Camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to record a video from the user’s camera and play it back in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This solution has several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `getUserMedia` to open a stream from the camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a `<video>` element to show a preview of the video.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a `MediaRecorder` to record the video.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play back the recorded video in the `<video>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this recipe, you need the `<video>` element and buttons to start and stop
    recording (see [Example 18-7](#example18-7)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-7\. Setting up the video element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, open the video stream and set the `<video>` element to preview it (see
    [Example 18-8](#example18-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-8\. Opening the audio and video stream
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once the stream is open, the next step is to set up the `MediaRecorder` (see
    [Example 18-9](#example18-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-9\. Setting up the `MediaRecorder`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The last step is to wire up the buttons to start and stop the `MediaRecorder`
    (see [Example 18-10](#example18-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-10\. Adding button event handlers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed the `video` element initially had the `muted` attribute
    set on it. The media stream you open will have both video and audio. You want
    to preview the video, but you probably don’t want to preview the audio—this would
    cause whatever audio is recorded to immediately play back on the speakers, which
    could affect the recording or even cause microphone feedback. To prevent this,
    you can set the `muted` attribute on the `<video>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Later, when it’s time to play back what you recorded, you are clearing the `muted`
    flag so that the recorded audio will play as well.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the System Media Capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know if a particular media type is supported by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Media Capabilities API to query the browser for the given media type.
    The result will tell you if that media type is supported or not (see [Example 18-11](#code_checkMediaCapabilities)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-11\. Checking media capabilities
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 18-11](#code_checkMediaCapabilities) shows some examples of checking
    for audio codec support. The Media Capabilities API also lets you check for specific
    video format support. You can query not only by codec, but also by other attributes
    such as frame rate, bitrate, width, and height (see [Example 18-12](#example18-12)).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-12\. Checking for a supported video format
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Applying Video Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to apply a filter effect to a video stream.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Render the video stream to a `<canvas>`, and apply a CSS filter to the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll set the video stream as the source of a `<video>` element, as in [“Capturing
    an Image from the User’s Camera”](#recipe_captureVideo). However, in this case
    you’ll hide the `<video>` element as it’s just an intermediate step.
  prefs: []
  type: TYPE_NORMAL
- en: Then, based on your desired frame rate, render each frame of the video to a
    `<canvas>` element. From there, you can apply CSS filters.
  prefs: []
  type: TYPE_NORMAL
- en: First, the markup (see [Example 18-13](#example18-13)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-13\. Markup for the video filter example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Then, open the media stream and set it in the `<video>` element (see [Example 18-14](#example18-14)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-14\. Setting up the video stream
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can apply a CSS filter to the `<canvas>` element (see [Example 18-15](#example18-15)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-15\. Applying a filter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every 0.03 seconds, the current frame of the video will be drawn to the canvas.
    This is effectively a preview of the media stream, using the `<video>` element
    as an intermediate. This is because there’s currently no way to “draw” a video
    from a media stream directly to a `<canvas>` element.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to setting the filters with CSS, you can also set them using the
    `filter` property of the canvas 2D context.
  prefs: []
  type: TYPE_NORMAL
