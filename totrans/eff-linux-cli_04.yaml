- en: Chapter 3\. Rerunning Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose you’ve just executed a lengthy command with a detailed pipeline, like
    this one from [“Detecting Duplicate Files”](ch01.xhtml#sec_duplicate_files):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: and you want to run it a second time. Don’t retype it! Instead, ask the shell
    to reach back into history and rerun the command. Behind the scenes, the shell
    keeps a record of the commands you invoke so you can easily recall and rerun them
    with a few keystrokes. This shell feature is called *command history*. Expert
    Linux users make heavy use of command history to speed up their work and avoid
    wasting time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, suppose you make a mistake typing the preceding command before you
    run it, such as misspelling “jpg” as “jg”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To fix the mistake, don’t press the Backspace key dozens of times and retype
    everything. Instead, change the command in place. The shell supports *command-line
    editing* for fixing typos and performing all sorts of modifications like a text
    editor can.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show you how to save lots of time and typing by leveraging
    command history and command-line editing. As usual, I won’t attempt to be comprehensive—I’ll
    focus on the most practical and useful parts of these shell features. (If you
    use a shell other than `bash`, see [Appendix B](app02.xhtml#appendix_shells) for
    additional notes.)
  prefs: []
  type: TYPE_NORMAL
- en: Learn to Touch-Type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the advice in this book will serve you better if you can type quickly. No
    matter how knowledgeable you are, if you type 40 words per minute and your equally
    knowledgeable friend types 120, they’re set up to work three times as fast as
    you. Search the web for “typing speed test” to measure your speed, then search
    for “typing tutor” and build a lifelong skill. Try to reach 100 words per minute.
    It’s worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the Command History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A *command history* is simply a list of previous commands that you’ve executed
    in an interactive shell. To see a shell’s history, run the `history` command,
    which is a shell builtin. The commands appear in chronological order with ID numbers
    for easy reference. The output looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of `history` can be hundreds of lines long (or more). Limit it to
    the most recent commands by adding an integer argument, which specifies the number
    of lines to print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `history` writes to stdout, you also can process the output with pipes.
    For example, view your history a screenful at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'or print only the historical commands containing the word `cd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To clear (delete) the history for the current shell, use the `-c` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Recalling Commands from the History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I’ll show you three time-saving ways to recall commands from a shell’s history:'
  prefs: []
  type: TYPE_NORMAL
- en: Cursoring
  prefs: []
  type: TYPE_NORMAL
- en: Extremely simple to learn but often slow in practice
  prefs: []
  type: TYPE_NORMAL
- en: History expansion
  prefs: []
  type: TYPE_NORMAL
- en: Harder to learn (frankly, it’s cryptic) but can be very fast
  prefs: []
  type: TYPE_NORMAL
- en: Incremental search
  prefs: []
  type: TYPE_NORMAL
- en: Both simple and fast
  prefs: []
  type: TYPE_NORMAL
- en: Each method is best in particular situations, so I recommend learning all three.
    The more techniques you know, the better you can choose the right one in any situation.
  prefs: []
  type: TYPE_NORMAL
- en: Cursoring Through History
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To recall your previous command in a given shell, press the up arrow key. It’s
    that simple. Keep pressing the up arrow to recall earlier commands in reverse
    chronological order. Press the down arrow to head in the other direction (toward
    more recent commands). When you reach the desired command, press Enter to run
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Cursoring through the command history is one of the two most common speedups
    that Linux users learn. (The other is pattern matching filenames with `*`, which
    you saw in [Chapter 2](ch02.xhtml#ch_shell).) Cursoring is efficient if your desired
    command is nearby in the history—no more than two or three commands in the past—but
    it’s tedious to reach commands that are further away. Whacking the up arrow 137
    times gets old quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The best use case for cursoring is recalling and running the immediately previous
    command. On many keyboards, the up arrow key is near the Enter key, so you can
    press the two keys in sequence with a quick flick of the fingers. On a full-sized
    American QWERTY keyboard, I place my right ring finger on the up arrow and my
    right index finger on Enter to tap both keys efficiently. (Try it.)
  prefs: []
  type: TYPE_NORMAL
- en: History Expansion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'History expansion is a shell feature that accesses the command history using
    special expressions. The expressions begin with an exclamation point, which traditionally
    is pronounced “bang.” For example, two exclamation points in a row (“bang bang”)
    evaluates to the immediately previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To refer to the most recent command that began with a certain string, place
    an exclamation point in front of that string. So, to rerun the most recent `grep`
    command, run “bang grep”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To refer to the most recent command that contained a given string *somewhere*,
    not just at the beginning of the command, surround the string with question marks
    as well:^([1](ch03.xhtml#idm46586642237936))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also retrieve a particular command from a shell’s history by its absolute
    position—the ID number to its left in the output of `history`. For example, the
    expression `!1203` (“bang 1023”) means “the command at position 1023 in the history”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A negative value retrieves a command by its relative position in the history,
    rather than absolute position. For example, `!-3` (“bang minus three”) means “the
    command you executed three commands ago”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'History expansion is quick and convenient, if a bit cryptic. It can be risky,
    however, if you provide a wrong value and execute it blindly. Look carefully at
    the preceding example. If you miscounted and typed `!-4` instead of `!-3`, you’d
    run `rm *` instead of the intended `head` command and delete files in your home
    directory by mistake! To mitigate this risk, append the modifier `:p` to print
    the command from your history but not execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell appends the unexecuted command (`head`) to the history, so if it
    looks good, you can run it conveniently with a quick “bang bang”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Some people refer to history expansion as “bang commands,” but expressions
    like `!!` and `!grep` are not commands. They are string expressions that you can
    place *anywhere* in a command. As a demonstration, use `echo` to print the value
    of `!!` on stdout without executing it, and count the number of words with `wc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This toy example demonstrates that history expansions have more uses than executing
    commands. You’ll see a more practical, powerful technique in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve covered only a few features of command history here. For full information,
    run `man history`.
  prefs: []
  type: TYPE_NORMAL
- en: History Expressions Don’t Appear in the Command History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The shell appends commands to the history verbatim—unevaluated—as I mentioned
    in [“Frequently Asked Questions About Command History”](#sb_history_faq). The
    one exception to this rule is history expansion. Its expressions are always evaluated
    before they’re added to the command history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This exception makes sense. Imagine trying to understand a command history full
    of expressions like `!-15` and `!-92` that refer to other history entries. You
    might have to trace a path through the whole history by eye to understand a single
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Never Delete the Wrong File Again (Thanks to History Expansion)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have you ever meant to delete files using a pattern, such as `*.txt`, but accidentally
    mistyped the pattern and wiped out the wrong files? Here’s an example with an
    accidental space character after the asterisk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The most common solution to this hazard is to alias `rm` to run `rm -i` so
    it prompts for confirmation before each deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, an extra space character needn’t be fatal, because the prompts
    from `rm -i` will warn that you’re removing the wrong files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The alias solution is cumbersome, however, because most of the time you might
    not want or need `rm` to prompt you. It also doesn’t work if you’re logged into
    another Linux machine without your aliases. I’ll show you a better way to avoid
    matching the wrong filenames with a pattern. The technique has two steps and relies
    on history expansion:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Verify*. Before running `rm`, run `ls` with the desired pattern to see which
    files match.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Delete*. If the output of `ls` looks correct, run `rm !$` to delete the same
    files that were matched.^([2](ch03.xhtml#idm46586642165264))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The history expansion `!$` (“bang dollar”) means “the final word that you typed
    in the previous command.” Therefore, `rm !$` here is shorthand for “delete whatever
    I just listed with `ls`,” namely, `*.txt`. If you accidentally add a space after
    the asterisk, the output of `ls` will make it obvious—safely—that something is
    wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It’s a good thing you ran `ls` first instead of `rm`! You can now modify the
    command to remove the extra space and proceed safely. This two-command sequence—`ls`
    followed by `rm !$`—is a great safety feature to incorporate into your Linux toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'A related technique is peeking at a file’s contents with `head` before you
    delete it, to make sure you’re targeting the right file, and then running `rm
    !$`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell also provides a history expansion `!*` (“bang star”), which matches
    all arguments you typed in the previous command, rather than just the final argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In practice, I use `!*` much less often than `!$`. Its asterisk carries the
    same risk of being interpreted as a pattern-matching character for filenames (if
    you mistype something), so it’s not much safer than typing a pattern like `*.txt`
    by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Incremental Search of Command History
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wouldn’t it be great if you could type a few characters of a command and the
    rest would appear instantly, ready to run? Well, you can. This speedy feature
    of the shell, called *incremental search*, is similar to the interactive suggestions
    provided by web search engines. In most cases, incremental search is the easiest
    and fastest technique to recall commands from history, even commands you ran long
    ago. I highly recommend adding it to your toolbox:'
  prefs: []
  type: TYPE_NORMAL
- en: At the shell prompt, press Ctrl-R (the *R* stands for reverse incremental search).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start typing *any part* of a previous command—beginning, middle, or end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With each character you type, the shell displays the most recent historical
    command that matches your typing so far.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you see the command you want, press Enter to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you typed the command `cd $HOME/Finances/Bank` a while ago and you
    want to rerun it. Press Ctrl-R at the shell prompt. The prompt changes to indicate
    an incremental search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Start typing the desired command. For example, type `c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell displays its most recent command that contains the string `c`, highlighting
    what you’ve typed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the next letter, `d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell displays its most recent command that contains the string `cd`, again
    highlighting what you’ve typed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue typing the command, adding a space and a dollar sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The command line becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is the command you want. Press Enter to run it, and you’re done in five
    quick keystrokes.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve assumed here that `cd $HOME/Finances/Bank` was the most recent matching
    command in the history. What if it’s not? What if you typed a whole bunch of commands
    that contain the same string? If so, the preceding incremental search would have
    displayed a different match, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'What now? You could type more characters to hone in on your desired command,
    but instead, press Ctrl-R a second time. This keystroke causes the shell to jump
    to the *next* matching command in the history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep pressing Ctrl-R until you reach the desired command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: and press Enter to run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few more tricks with incremental search:'
  prefs: []
  type: TYPE_NORMAL
- en: To recall the most recent string that you searched for and executed, begin by
    pressing Ctrl-R twice in a row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To stop an incremental search and continue working on the current command, press
    the Escape key, or Ctrl-J, or any key for command-line editing (the next topic
    in this chapter), such as the left or right arrow key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To quit an incremental search and clear the command line, press Ctrl-G or Ctrl-C.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take the time to become expert with incremental search. You’ll soon be locating
    commands with incredible speed.^([3](ch03.xhtml#idm46586642107296))
  prefs: []
  type: TYPE_NORMAL
- en: Command-Line Editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are all sorts of reasons to edit a command, either while you type it
    or after you’ve run it:'
  prefs: []
  type: TYPE_NORMAL
- en: To fix mistakes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a command piece by piece, such as by typing the end of the command
    first, then moving to the start of the line and typing the beginning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To construct a new command based on a previous one from your command history
    (a key skill for building up complex pipelines, as you’ll see in [Chapter 8](ch08.xhtml#ch_one_liner))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, I’ll show you three ways to edit a command to build your skill
    and speed:'
  prefs: []
  type: TYPE_NORMAL
- en: Cursoring
  prefs: []
  type: TYPE_NORMAL
- en: Again, the slowest and least powerful method but simple to learn
  prefs: []
  type: TYPE_NORMAL
- en: Caret notation
  prefs: []
  type: TYPE_NORMAL
- en: A form of history expansion
  prefs: []
  type: TYPE_NORMAL
- en: Emacs- or Vim-style keystrokes
  prefs: []
  type: TYPE_NORMAL
- en: To edit the command line in powerful ways
  prefs: []
  type: TYPE_NORMAL
- en: As before, I recommend that you learn all three techniques for flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Cursoring Within a Command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simply press the left arrow and right arrow keys to move back and forth on the
    command line, one character at a time. Use the Backspace or Delete key to remove
    text, and then type any corrections you need. [Table 3-1](#table_edit_cursor)
    summarizes these and other standard keystrokes for editing the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Cursoring back and forth is easy but inefficient. It’s best when the changes
    are small and simple.
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-1\. Cursor keys for simple command-line editing
  prefs: []
  type: TYPE_NORMAL
- en: '| Keystroke | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Left arrow | Move left by one character |'
  prefs: []
  type: TYPE_TB
- en: '| Right arrow | Move right by one character |'
  prefs: []
  type: TYPE_TB
- en: '| Ctrl + left arrow | Move left by one word |'
  prefs: []
  type: TYPE_TB
- en: '| Ctrl + right arrow | Move right by one word |'
  prefs: []
  type: TYPE_TB
- en: '| Home | Move to beginning of command line |'
  prefs: []
  type: TYPE_TB
- en: '| End | Move to end of command line |'
  prefs: []
  type: TYPE_TB
- en: '| Backspace | Delete one character before the cursor |'
  prefs: []
  type: TYPE_TB
- en: '| Delete | Delete one character beneath the cursor |'
  prefs: []
  type: TYPE_TB
- en: History Expansion with Carets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose you’ve mistakenly run the following command by typing `jg` instead
    of `jpg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the command properly, you could recall it from the command history,
    cursor over to the mistake and fix it, but there’s a quicker way to accomplish
    your goal. Just type the old (wrong) text, the new (corrected) text, and a pair
    of carets (`^`), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Press Enter, and the correct command will appear and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The *caret syntax*, which is a type of history expansion, means, “In the previous
    command, instead of `jg`, substitute `jpg`.” Notice that the shell helpfully prints
    the new command before executing it, which is standard behavior for history expansion.
  prefs: []
  type: TYPE_NORMAL
- en: This technique changes only the first occurrence of the source string (`jg`)
    in the command. If your original command contained `jg` more than once, only the
    first instance would change to `jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: Emacs- or Vim-Style Command-Line Editing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most powerful way to edit a command line is with familiar keystrokes inspired
    by the text editors Emacs and Vim. If you’re already skilled with one of these
    editors, you can jump into this style of command-line editing right away. If not,
    [Table 3-2](#table_edit_emacs_vim) will get you started with the most common keystrokes
    for movement and editing. Note that the Emacs “Meta” key is usually Escape (pressed
    and released) or Alt (pressed and held).
  prefs: []
  type: TYPE_NORMAL
- en: 'The shell default is Emacs-style editing, and I recommend it as easier to learn
    and use. If you prefer Vim-style editing, run the following command (or add it
    to your *$HOME/.bashrc* file and source it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To edit a command using Vim keystrokes, press the Escape key to enter command-editing
    mode, and then use keystrokes from the “Vim” column in [Table 3-2](#table_edit_emacs_vim).
    To switch back to Emacs-style editing, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Now practice, practice, practice until the keystrokes (either Emacs’s or Vim’s)
    are second nature. Trust me, you’ll quickly be paid back in saved time.
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-2\. Keystrokes for Emacs- or Vim-style editing^([a](ch03.xhtml#idm46586642020000))
  prefs: []
  type: TYPE_NORMAL
- en: '| Action | Emacs | Vim |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Move forward by one character | Ctrl-f | h |'
  prefs: []
  type: TYPE_TB
- en: '| Move backward by one character | Ctrl-b | l |'
  prefs: []
  type: TYPE_TB
- en: '| Move forward by one word | Meta-f | w |'
  prefs: []
  type: TYPE_TB
- en: '| Move backward by one word | Meta-b | b |'
  prefs: []
  type: TYPE_TB
- en: '| Move to beginning of line | Ctrl-a | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Move to end of line | Ctrl-e | $ |'
  prefs: []
  type: TYPE_TB
- en: '| Transpose (swap) two characters | Ctrl-t | xp |'
  prefs: []
  type: TYPE_TB
- en: '| Transpose (swap) two words | Meta-t | *n/a* |'
  prefs: []
  type: TYPE_TB
- en: '| Capitalize first letter of next word | Meta-c | w~ |'
  prefs: []
  type: TYPE_TB
- en: '| Uppercase entire next word | Meta-u | *n/a* |'
  prefs: []
  type: TYPE_TB
- en: '| Lowercase entire next word | Meta-l | *n/a* |'
  prefs: []
  type: TYPE_TB
- en: '| Change case of the current character | *n/a* | ~ |'
  prefs: []
  type: TYPE_TB
- en: '| Insert the next character verbatim, including control characters | Ctrl-v
    | Ctrl-v |'
  prefs: []
  type: TYPE_TB
- en: '| Delete forward by one character | Ctrl-d | x |'
  prefs: []
  type: TYPE_TB
- en: '| Delete backward by one character | Backspace *or* Ctrl-h | X |'
  prefs: []
  type: TYPE_TB
- en: '| Cut forward by one word | Meta-d | dw |'
  prefs: []
  type: TYPE_TB
- en: '| Cut backward by one word | Meta-Backspace *or* Ctrl-w | db |'
  prefs: []
  type: TYPE_TB
- en: '| Cut from cursor to beginning of line | Ctrl-u | d^ |'
  prefs: []
  type: TYPE_TB
- en: '| Cut from cursor to end of line | Ctrl-k | D |'
  prefs: []
  type: TYPE_TB
- en: '| Delete the entire line | Ctrl-e Ctrl-u | dd |'
  prefs: []
  type: TYPE_TB
- en: '| Paste (yank) the most recently deleted text | Ctrl-y | p |'
  prefs: []
  type: TYPE_TB
- en: '| Paste (yank) the next deleted text (after a previous yank) | Meta-y | *n/a*
    |'
  prefs: []
  type: TYPE_TB
- en: '| Undo the previous editing operation | Ctrl-_ | u |'
  prefs: []
  type: TYPE_TB
- en: '| Undo all edits made so far | Meta-r | U |'
  prefs: []
  type: TYPE_TB
- en: '| Switch from insertion mode to command mode | *n/a* | Escape |'
  prefs: []
  type: TYPE_TB
- en: '| Switch from command mode to insertion mode | *n/a* | i |'
  prefs: []
  type: TYPE_TB
- en: '| Abort an edit operation in progress | Ctrl-g | *n/a* |'
  prefs: []
  type: TYPE_TB
- en: '| Clear the display | Ctrl-l | Ctrl-l |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch03.xhtml#idm46586642020000-marker)) Actions marked *n/a* have no
    simple keystroke but may be possible with longer sequences of keystrokes. |'
  prefs: []
  type: TYPE_TB
- en: For more details on Emacs-style editing, see the section [“Bindable Readline
    Commands”](https://oreil.ly/rAQ9g) in GNU’s `bash` manual. For Vim-style editing,
    see the document [“Readline VI Editing Mode Cheat Sheet”](https://oreil.ly/Zv0ba).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Practice the techniques in this chapter and you’ll speed up your command-line
    use immensely. Three of the techniques in particular transformed the way I use
    Linux, and I hope they will for you too:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting files with `!$` for safety
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental search with Ctrl-R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emacs-style command-line editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ^([1](ch03.xhtml#idm46586642237936-marker)) You can omit the trailing question
    mark here—`!?grep`—but in some cases it’s required, such as sed-style history
    expansion (see [“More Powerful Substitution with History Expansion”](#sidebar_sed_syntax)).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch03.xhtml#idm46586642165264-marker)) I’m assuming that no matching files
    were added or removed behind your back after the `ls` step. Don’t rely on this
    technique in rapidly changing directories.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch03.xhtml#idm46586642107296-marker)) While writing this book, I frequently
    reran version-control commands such as `git add`, `git commit`, and `git push`.
    Incremental search made rerunning these commands a breeze.
  prefs: []
  type: TYPE_NORMAL
