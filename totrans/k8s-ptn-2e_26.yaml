- en: Chapter 21\. Immutable Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Immutable Configuration* pattern offers two ways to make configuration
    data immutable so that your application’s configuration is always in a well-known
    and recorded state. With this pattern, we can not only use immutable and versioned
    configuration data, but also overcome the size limitation of configuration data
    stored in environment variables or ConfigMaps.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in [Chapter 19, “EnvVar Configuration”](ch19.html#EnvVarConfiguration),
    environment variables provide a simple way to configure container-based applications.
    And although they are easy to use and universally supported, as soon as the number
    of environment variables exceeds a certain threshold, managing them becomes hard.
  prefs: []
  type: TYPE_NORMAL
- en: This complexity can be handled to some degree by using *Configuration Resources*,
    as described in [Chapter 20, “Configuration Resource”](ch20.html#ConfigurationResource),
    which since Kubernetes 1.21 can be declared as *immutable*. However, ConfigMaps
    still have a size limitation, so if you work with large configuration data (like
    precomputed data models in a machine learning context), then ConfigMaps are not
    suitable even when marked as immutable.
  prefs: []
  type: TYPE_NORMAL
- en: '*Immutability* here means that we can’t change the configuration after the
    application has started, in order to ensure that we always have a well-defined
    state for our configuration data. In addition, immutable configuration can be
    put under version control and follow a change control process.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several options to address the concern of configuration immutability.
    The simplest and preferred option is to use ConfigMaps or Secrets that are marked
    as immutable in their declaration. You learned about immutable ConfigMaps in [Chapter 20](ch20.html#ConfigurationResource).
    ConfigMaps should be the first choice if your configuration fits into a ConfigMap
    and is reasonably easy to maintain. In real-world scenarios, however, the amount
    of configuration data can increase quickly. Although a WildFly application server
    configuration might still fit in a ConfigMap, it is quite huge. It becomes really
    ugly when you have to nest XML or YAML within YAML—i.e., when the content of your
    configuration is also YAML and you embed this as within the ConfigMaps YAML section.
    Editor support for such use cases is limited, so you have to be very careful about
    the indentation, and even then, you will probably mess it up more than once (believe
    us!). Another nightmare is having to maintain tens or hundreds of entries in a
    single ConfigMap because your application requires many different configuration
    files. Although this pain can be mitigated to some degree with good tooling, large
    configuration data sets like pretrained machine learning data models are just
    impossible with ConfigMap because of the backend size restriction of 1 MB.
  prefs: []
  type: TYPE_NORMAL
- en: To address the concern of complex configuration data, we can put all environment-specific
    configuration data into a single, passive data image that we can distribute as
    a regular container image. During runtime, the application and the data image
    are linked together so that the application can extract the configuration from
    the data image. With this approach, it is easy to craft different configuration
    data images for various environments. These images then combine all configuration
    information for specific environments and can be versioned like any other container
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating such a data image is trivial, as it is a simple container image that
    contains only data. The challenge is the linking step during startup. We can use
    various approaches, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before looking at Kubernetes, let’s go one step back and consider the vanilla
    Docker case. In Docker, it is possible for a container to expose a *volume* with
    data from the container. With a `VOLUME` directive in a Dockerfile, you can specify
    a directory that can be shared later. During startup, the content of this directory
    within the container is copied over to this shared directory. As shown in [Figure 21-1](#img-immutable-configuration-volumes),
    this volume linking is an excellent way to share configuration information from
    a dedicated configuration container with another application container.
  prefs: []
  type: TYPE_NORMAL
- en: '![Immutable Configuration with Docker volumes](assets/kup2_2101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1\. Immutable configuration with Docker volume
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s have a look at an example. For the development environment, we create
    a Docker image that holds the developer configuration and creates a volume with
    mount point */config*. We can create such an image with `Dockerfile-config`, as
    in [Example 21-1](#ex-immutable-config-dockerfile).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-1\. Dockerfile for a configuration image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_immutable_configuration_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Add specified property.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_immutable_configuration_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Create volume and copy property into it.
  prefs: []
  type: TYPE_NORMAL
- en: We now create the image itself and the Docker container with the Docker CLI
    in [Example 21-2](#ex-immutable-config-build-image).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-2\. Building the configuration Docker image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The final step is to start the application container and connect it to this
    configuration container ([Example 21-3](#ex-immutable-config-start-application)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-3\. Start application container with config container linked
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The application image expects its configuration files to be within a */config*
    directory, the volume exposed by the configuration container. When you move this
    application from the development environment to the production environment, all
    you have to do is change the startup command. There is no need to alter the application
    image itself. Instead, you simply volume-link the application container with the
    production configuration container, as seen in [Example 21-4](#ex-immutable-config-production).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-4\. Use different configuration for production environment
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Kubernetes Init Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Kubernetes, volume sharing within a Pod is perfectly suited for this kind
    of linking of configuration and application containers. However, if we want to
    transfer this technique of Docker volume linking to the Kubernetes world, we will
    find that there is currently no support for container volumes in Kubernetes. Considering
    the age of the discussion and the complexity of implementing this feature versus
    its limited benefits, it’s likely that container volumes will not arrive anytime
    soon.
  prefs: []
  type: TYPE_NORMAL
- en: So containers can share (external) volumes, but they cannot yet directly share
    directories located within the containers. To use immutable configuration containers
    in Kubernetes, we can use the *Init Containers* pattern from [Chapter 15](ch15.html#InitContainer)
    that can initialize an empty shared volume during startup.
  prefs: []
  type: TYPE_NORMAL
- en: In the Docker example, we base the configuration Docker image on `scratch`,
    an empty Docker image with no operating system files. We don’t need anything else
    because we only want the configuration data shared via Docker volumes. But for
    Kubernetes init containers, we need help from the base image to copy over the
    configuration data to a shared Pod volume. A good choice for this is `busybox`,
    which is still small but allows us to use a plain Unix `cp` command for this task.
  prefs: []
  type: TYPE_NORMAL
- en: So how does the initialization of shared volumes with configuration work under
    the hood? Let’s have a look at an example. First, we need to create a configuration
    image again with a Dockerfile, as in [Example 21-5](#ex-immutable-config-dev-properties).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-5\. Development configuration image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_immutable_configuration_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Using a shell here in order to resolve wildcards.
  prefs: []
  type: TYPE_NORMAL
- en: The only difference from the vanilla Docker case in [Example 21-1](#ex-immutable-config-dockerfile)
    is that we have a different base image and we add an `ENTRYPOINT` that copies
    the properties file to the directory given as an argument when the container image
    starts. This image can now be referenced in an init container within a Deployment’s
    `.template.spec` (see [Example 21-6](#ex-immutable-config-deployment-init)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-6\. Deployment that copies configuration to destination in init container
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The Deployment’s Pod template specification contains a single volume and two
    containers:'
  prefs: []
  type: TYPE_NORMAL
- en: The volume `config-directory` is of the type `emptyDir`, so it’s created as
    an empty directory on the node hosting this Pod.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The init container Kubernetes calls during startup is built from the image we
    just created, and we set a single argument, `/config`, used by the image’s `ENTRYPOINT`.
    This argument instructs the init container to copy its content to the specified
    directory. The directory */config* is mounted from the volume `config-directory`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application container mounts the volume `config-directory` to access the
    configuration that was copied over by the init container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 21-2](#img-immutable-configuration-init-container) illustrates how
    the application container accesses the configuration data created by an init container
    over a shared volume.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Immutable Configuration with an init container](assets/kup2_2102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-2\. Immutable configuration with an init container
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now to change the configuration from the development to the production environment,
    all we need to do is exchange the image of the init container. We can do this
    either by changing the YAML definition or by updating with `kubectl`. However,
    it is not ideal to have to edit the resource descriptor for each environment.
    If you are on Red Hat OpenShift, an enterprise distribution of Kubernetes, *OpenShift
    Templates* can help address this. OpenShift Templates can create different resource
    descriptors for the different environments from a single template.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenShift Templates are regular resource descriptors that are parameterized.
    As seen in [Example 21-7](#ex-immutable-config-template), we can easily use the
    configuration image as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-7\. OpenShift Template for parameterizing config image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_immutable_configuration_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Template parameter `CONFIG_IMAGE` declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_immutable_configuration_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Use of the template parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We show here only a fragment of the full descriptor, but you can quickly recognize
    the parameter `CONFIG_IMAGE` we reference in the init container declaration. If
    we create this template on an OpenShift cluster, we can instantiate it by calling
    `oc`, as in [Example 21-8](#ex-immutable-config-template-apply).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-8\. Applying OpenShift template to create new application
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Detailed instructions for running this example, as well as the full Deployment
    descriptors, can be found as usual in our example Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using data containers for the *Immutable Configuration* pattern is admittedly
    a bit involved. Use these only if immutable ConfigMaps and Secret are not suitable
    for your use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data containers have some unique advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Environment-specific configuration is sealed within a container. Therefore,
    it can be versioned like any other container image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration created this way can be distributed over a container registry.
    The configuration can be examined even without accessing the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The configuration is immutable, as is the container image holding the configuration:
    a change in the configuration requires a version update and a new container image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration data images are useful when the configuration data is too complex
    to put into environment variables or ConfigMaps, since it can hold arbitrarily
    large configuration data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As expected, the *Immutable Configuration* pattern also has certain drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: It has higher complexity, because extra container images need to be built and
    distributed via registries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not address any of the security concerns around sensitive configuration
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since no image volume support is actually available for Kubernetes workloads,
    the technique described here is still limited for use cases where the overhead
    of copying over data from init containers to a local volume is acceptable. We
    hope that eventually mounting container images directly as volumes will be possible
    in the future, but as of 2023, only experimental CSI support is available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra init container processing is required in the Kubernetes case, and hence
    we need to manage different Deployment objects for different environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All in all, you should carefully evaluate whether such an involved approach
    is really required.
  prefs: []
  type: TYPE_NORMAL
- en: Another approach for dealing with large configuration files that differ only
    slightly from environment to environment is described with the *Configuration
    Template* pattern, the topic of the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Immutable Configuration Example](https://oreil.ly/1bPZ2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Mimic `--volumes-from` in Kubernetes](https://oreil.ly/bTtty)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Immutable ConfigMaps](https://oreil.ly/RfrwN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Feature Request: Image Volumes and Container Volumes](https://oreil.ly/XQ54e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[docker-flexvol: A Kubernetes Driver That Supports Docker Volumes](https://oreil.ly/vhCdH)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Red Hat OpenShift: Using Templates](https://oreil.ly/QyX2y)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kubernetes CSI Driver for Mounting Images](https://oreil.ly/OMqRo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
