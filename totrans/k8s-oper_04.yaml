- en: Chapter 4\. The Operator Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章 操作者框架
- en: There is inevitable complexity in developing an Operator, and in managing its
    distribution, deployment, and lifecycle. The Red Hat Operator Framework makes
    it simpler to create and distribute Operators. It makes building Operators easier
    with a software development kit (SDK) that automates much of the repetitive implementation
    work. The Framework also provides mechanisms for deploying and managing Operators.
    Operator Lifecycle Manager (OLM) is an Operator that installs, manages, and upgrades
    other Operators. Operator Metering is a metrics system that accounts for Operators’
    use of cluster resources. This chapter gives an overview of these three key parts
    of the Framework to prepare you to use those tools to build and distribute an
    example Operator. Along the way, you’ll install the `operator-sdk` command-line
    tool, the primary interface to SDK features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开发操作者以及管理其分发、部署和生命周期中存在不可避免的复杂性。Red Hat 操作者框架使创建和分发操作者变得更简单。它通过软件开发工具包（SDK）自动化了大部分重复的实现工作，使操作者构建更加容易。框架还提供了部署和管理操作者的机制。操作者生命周期管理器（OLM）是一个安装、管理和升级其他操作者的操作者。操作者计量是一个度量系统，用于记录操作者对集群资源的使用情况。本章概述了框架的这三个关键部分，以准备好使用这些工具来构建和分发一个示例操作者。在此过程中，您将安装
    `operator-sdk` 命令行工具，这是 SDK 功能的主要接口。
- en: Operator Framework Origins
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作者框架的起源
- en: The Operator SDK builds atop the Kubernetes [`controller-runtime`](https://oreil.ly/AM0TP),
    a set of libraries providing essential Kubernetes controller routines in the Go
    programming language. As part of the Operator Framework, the SDK provides integration
    points for distributing and managing Operators with OLM, and measuring them with
    Operator Metering. The SDK and the entire Red Hat Operator Framework are open
    source with contributors from throughout the community and other organizations,
    and are in the [process of being donated](https://oreil.ly/KoyS6) to the vendor-neutral
    [Cloud Native Computing Foundation](https://www.cncf.io/), home to Kubernetes
    itself and many other related projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 操作者 SDK 构建在 Kubernetes 的 [`controller-runtime`](https://oreil.ly/AM0TP) 之上，这是一组使用
    Go 编程语言提供基本 Kubernetes 控制器例程的库。作为操作者框架的一部分，SDK 提供集成点用于通过 OLM 分发和管理操作者，并通过操作者计量对其进行衡量。SDK
    和整个 Red Hat 操作者框架都是开源的，社区和其他组织的贡献者参与其中，并正在向供应商中立的 [Cloud Native Computing Foundation](https://www.cncf.io/)
    捐赠过程中。
- en: Operator Maturity Model
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作者成熟度模型
- en: The Operator Maturity Model, depicted in [Figure 4-1](#fig4-1), sketches a way
    to think about different levels of Operator functionality. You can begin with
    a minimum viable product that installs its operand, then add lifecycle management
    and upgrade capabilities, iterating over time toward complete automation for your
    application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 操作者成熟度模型，如 [图 4-1](#fig4-1) 所示，描绘了一种思考不同操作者功能级别的方式。您可以从一个最小可行产品开始，安装其操作对象，然后添加生命周期管理和升级能力，随着时间的推移迭代，最终实现应用程序的完全自动化。
- en: '![Figure 4-1: Operator Maturity Model](assets/kuop_0401.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图 4-1：操作者成熟度模型](assets/kuop_0401.png)'
- en: Figure 4-1\. Operator Maturity Model
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1 操作者成熟度模型
- en: An Operator can have humble origins and grow in sophistication over a series
    of development cycles. The first phase of the model requires just enough application-specific
    code to create any resources the operand requires. In other words, phase one is
    the prepared, automated installation of an application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个操作者可以起源于不起眼的地方，并在一系列开发周期中不断发展复杂性。模型的第一阶段仅需要足够的特定于应用程序的代码来创建操作对象所需的任何资源。换句话说，第一阶段是应用程序的准备、自动化安装。
- en: Operator SDK
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作者 SDK
- en: The [Operator SDK](https://oreil.ly/IcfRf) is a set of tools for scaffolding,
    building, and preparing an Operator for deployment. The SDK currently includes
    first-class support for constructing Operators in the Go programming language,
    with support for other languages planned. The SDK also offers what might be described
    as an adapter architecture for [Helm](https://oreil.ly/IYH2d) charts or [Ansible](https://oreil.ly/ek6jP)
    playbooks. We’ll cover these Adapter Operators in [Chapter 6](ch06.html#adapter_operators).
    In [Chapter 7](ch07.html#operators_in_go_with_the_operator_sdk) we will show how
    to implement application-specific management routines in Go to build a custom
    Operator with the SDK tool.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Operator SDK](https://oreil.ly/IcfRf) 是一组用于搭建、构建和准备操作符进行部署的工具。SDK目前主要支持使用Go编程语言构建操作符，并计划支持其他语言。SDK还为[Helm](https://oreil.ly/IYH2d)图表或[Ansible](https://oreil.ly/ek6jP)
    playbooks提供了可以描述为适配器架构的支持。我们将在[第6章](ch06.html#adapter_operators)中介绍这些适配器操作符。在[第7章](ch07.html#operators_in_go_with_the_operator_sdk)中，我们将展示如何在Go中实现应用程序特定的管理例程，以使用SDK工具构建自定义操作符。'
- en: Installing the Operator SDK Tool
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Operator SDK工具
- en: The Operator SDK centers around a command-line tool, `operator-sdk`, that helps
    you build Operators. The SDK imposes a standard project layout, and in return
    creates skeletal Go source code for the basic Kubernetes API controller implementation
    and placeholders for your application-specific handlers. From there, the SDK provides
    convenience commands for building an Operator and wrapping it in a Linux container,
    generating the YAML-format Kubernetes manifests needed to deploy the Operator
    on Kubernetes clusters.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Operator SDK 围绕一个名为 `operator-sdk` 的命令行工具展开，帮助您构建操作符。SDK强制执行标准项目布局，并生成基本的Kubernetes
    API控制器实现的Go源代码和应用程序特定处理程序的占位符。从那里开始，SDK提供方便的命令来构建操作符，并将其包装在Linux容器中，生成部署操作符所需的YAML格式Kubernetes清单。
- en: Binary installation
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制安装
- en: To install a binary for your operating system, download `operator-sdk` from
    [the Kubernetes SDK repository](https://oreil.ly/TTnC6), make it executable, and
    move it into a directory in your `$PATH`. The program is statically linked, so
    it’s ready to run on those platforms for which a release is available. At the
    time of this writing, the project supplies builds for macOS and Linux operating
    systems on the x86-64 architecture.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的操作系统安装二进制文件，请从[Kubernetes SDK仓库](https://oreil.ly/TTnC6)下载 `operator-sdk`，使其可执行，并将其移动到您的
    `$PATH` 目录中。该程序是静态链接的，因此准备在已发布版本上运行的平台上使用。在撰写本文时，该项目为x86-64架构的macOS和Linux操作系统提供了构建。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: With any rapidly evolving project like `operator-sdk`, it’s a good idea to check
    the [project’s installation instructions](https://oreil.ly/ZbaBT) for the latest
    installation method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像 `operator-sdk` 这样快速发展的项目时，查看[项目的安装说明](https://oreil.ly/ZbaBT)获取最新的安装方法是个好主意。
- en: Installing from source
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码安装
- en: 'To get the latest development version, or for platforms with no binary distribution,
    build `operator-sdk` from source. We assume you have `git` and `go` installed:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最新的开发版本，或者对于没有二进制发行版的平台，请从源代码构建 `operator-sdk`。我们假设您已安装了 `git` 和 `go`：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A successful build process writes the `operator-sdk` binary to your *$GOPATH/bin*
    directory. Run `operator-sdk version` to check it is in your `$PATH`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的构建过程会将 `operator-sdk` 二进制文件写入您的 *$GOPATH/bin* 目录。运行 `operator-sdk version`
    来检查它是否在您的 `$PATH` 中。
- en: These are the two most common and least dependent ways to get the SDK tool.
    Check the project’s [install documentation](https://oreil.ly/fAC1b) for other
    options. The subsequent examples in this book use version series 0.11.x of `operator-sdk`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是获取SDK工具最常见且最少依赖的两种方式。查看项目的[安装文档](https://oreil.ly/fAC1b)以获取其他选项。本书后续示例使用版本系列0.11.x的
    `operator-sdk`。
- en: Operator Lifecycle Manager
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符生命周期管理器
- en: Operators address the general principle that any application, on any platform,
    must be acquired, deployed, and managed over time. Operators are themselves Kubernetes
    applications. While an Operator manages its operand, what manages an Operator?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符解决了任何平台上获取、部署和随时间管理应用程序的一般原则。操作符本身是Kubernetes应用程序。虽然操作符管理其操作数，但谁管理操作符呢？
- en: '[Operator Lifecycle Manager](https://oreil.ly/SDL7q) takes the Operator pattern
    one level up the stack: it’s an Operator that acquires, deploys, and manages Operators
    on a Kubernetes cluster. Like an Operator for any application, OLM extends Kubernetes
    by way of custom resources and custom controllers so that Operators, too, can
    be managed declaratively, with Kubernetes tools, in terms of the Kubernetes API.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[操作员生命周期管理器](https://oreil.ly/SDL7q)将操作员模式提升到堆栈的更高层次：它是一个在Kubernetes集群上获取、部署和管理操作员的操作员。像任何应用程序的操作员一样，OLM通过自定义资源和自定义控制器扩展了Kubernetes，以便也可以根据Kubernetes
    API的术语以声明方式管理操作员。'
- en: OLM defines a schema for Operator metadata, called the Cluster Service Version
    (CSV), for describing an Operator and its dependencies. Operators with a CSV can
    be listed as entries in a *catalog* available to OLM running on a Kubernetes cluster.
    Users then *subscribe* to an Operator from the catalog to tell OLM to provision
    and manage a desired Operator. That Operator, in turn, provisions and manages
    its application or service on the cluster.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OLM为操作员元数据定义了一种架构，称为集群服务版本（CSV），用于描述操作员及其依赖关系。具有CSV的操作员可以列为可供运行在Kubernetes集群上的OLM使用的*目录*中的条目。然后用户可以从目录中*订阅*操作员，告知OLM要为其提供所需的操作员并管理。而该操作员反过来在集群上提供和管理其应用程序或服务。
- en: 'Based on the description and parameters an Operator provides in its CSV, OLM
    can manage the Operator over its lifecycle: monitoring its state, taking actions
    to keep it running, coordinating among multiple instances on a cluster, and upgrading
    it to new versions. The Operator, in turn, can control its application with the
    latest automation features for the app’s latest versions.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据操作员在其CSV中提供的描述和参数，OLM可以管理操作员的整个生命周期：监控其状态、采取维持其运行所需的措施、在集群中的多个实例之间进行协调，并将其升级到新版本。操作员反过来可以使用最新的自动化功能控制其应用程序的最新版本。
- en: Operator Metering
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作员计量
- en: 'Operator Metering is a system for analyzing the resource usage of the Operators
    running on Kubernetes clusters. Metering analyzes Kubernetes CPU, memory, and
    other resource metrics to calculate costs for infrastructure services. It can
    also examine application-specific metrics, such as those required to bill application
    users based on usage. Metering provides a model for ops teams to map the costs
    of a cloud service or a cluster resource to the application, namespace, and team
    consuming it. It’s a platform atop which you can build customized reporting specific
    to your Operator and the application it manages, helping with three primary activities:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员计量是一个分析在Kubernetes集群上运行的操作员资源使用情况的系统。计量分析Kubernetes的CPU、内存和其他资源指标，以计算基础设施服务的成本。它还可以检查特定于应用程序的指标，例如根据使用情况计费应用程序用户所需的指标。计量为运维团队提供了一个模型，可以将云服务或集群资源的成本映射到消费它的应用程序、命名空间和团队。它是一个平台，您可以在其上构建特定于您的操作员和其管理的应用程序的定制报告，帮助进行三个主要活动：
- en: Budgeting
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 预算编制
- en: When using Operators on their clusters, teams can gain insight into how infrastructure
    resources are used, especially in autoscaled clusters or hybrid cloud deployments,
    helping improve projections and allocations to avoid waste.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 团队在其集群上使用操作员时，可以深入了解基础设施资源的使用情况，特别是在自动缩放集群或混合云部署中，帮助改善预测和分配，以避免浪费。
- en: Billing
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 计费
- en: When you build an Operator that provides a service to paying customers, resource
    usage can be tracked by billing codes or labels that reflect the internal structure
    of an Operator and application to calculate accurate and itemized bills.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建一个向付费客户提供服务的操作员时，可以通过反映操作员和应用程序内部结构的计费代码或标签来跟踪资源使用情况，以计算准确和详细的账单。
- en: Metrics aggregation
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 指标聚合
- en: Service usage and metrics can be viewed across namespaces or teams. For example,
    it can help you analyze the resources consumed by a PostgreSQL database Operator
    running many database server clusters and very many databases for different teams
    sharing a large Kubernetes cluster.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可跨命名空间或团队查看服务使用情况和指标。例如，它可以帮助您分析在运行许多数据库服务器集群和多个数据库的PostgreSQL数据库操作程序的资源消耗，这些数据库为共享大型Kubernetes集群的不同团队提供服务。
- en: Summary
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter introduced the three pillars of the Operator Framework: the Operator
    SDK for building and developing Operators; Operator Lifecycle Manager for distributing,
    installing, and upgrading them; and Operator Metering for measuring Operator performance
    and resource consumption. Together these framework elements support the process
    of making an Operator and keeping it running.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了运算符框架的三大支柱：用于构建和开发运算符的Operator SDK；用于分发、安装和升级运算符的Operator Lifecycle Manager；以及用于测量运算符性能和资源消耗的Operator
    Metering。这些框架元素共同支持制作运算符并保持其运行的过程。
- en: You also installed the `operator-sdk` tool, so you’re equipped with the primary
    tool for building Operators. To get started, we’ll first introduce the example
    application you will construct an Operator to manage, the Visitors Site.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你还安装了`operator-sdk`工具，因此你已经配备了构建运算符的主要工具。要开始，我们将首先介绍示例应用程序，您将构建一个运算符来管理访客站点。
