["```\n<div id=\"demodiv\">\n  <p>\n    This is text.\n  </p>\n</div>\n```", "```\nconst demodiv = document.getElementById(\"demodiv\");\n```", "```\nconst parent = demodiv.parentNode;\n```", "```\nconst children = demodiv.childNodes;\n```", "```\nconst parent = document.getElementById(\"demodiv\").parentNode;\n```", "```\nconst type = parent.nodeName;\n```", "```\nlet outputString = '';\n\nif (demodiv.hasChildNodes()) {\n  const children = demodiv.childNodes;\n  children.forEach(child => {\n    outputString += `has child ${child.nodeName} `;\n  });\n}\nconsole.log(outputString);\n```", "```\n\"has child #text has child P has child #text \"\n```", "```\n<div id=\"demodiv\" class=\"demo\">\n  <p>Some text</p>\n  <p>Some more text</p>\n</div>\n```", "```\nhas child #text\nhas child P\nhas child #text\nhas child P\nhas child #text\n```", "```\n// use querySelectorAll to find all list items on a page\nconst items = document.querySelectorAll('li');\n\nitems.forEach(item => {\n  console.log(item.firstChild.data);\n});\n```", "```\nif (window.NodeList && !NodeList.prototype.forEach) {\n  NodeList.prototype.forEach = function(callback, thisArg) {\n    thisArg = thisArg || window;\n    for (var i = 0; i < this.length; i++) {\n      callback.call(thisArg, this[i], i, this);\n    }\n  };\n}\n```", "```\n// define an event handler function\nconst clickHandler = (event) => {\n  window.alert('The element has been clicked!');\n};\n\n// select element\nconst btn = document.getElementById('click-button');\n// add the event listener to the element and call 'clickHandler' function\nbtn.addEventListener('click', clickHandler);\n```", "```\nconst clickHandler = (event) => {\n  event.preventDefault();\n  window.alert(`The ${event.currentTarget.nodeName} element has been clicked!`);\n};\n\nconst href = document.getElementById('click-link');\nhref.addEventListener('click', clickHandler);\n```", "```\n<div tabindex=\"0\" role=\"button\" id=\"click-div\">Click me</div>\n```", "```\nconst clickHandler = (event) => {\n  window.alert(`The ${event.currentTarget.nodeName} element has been clicked!`);\n};\n\nconst clickableDiv = document.getElementById('click-link');\nclickableDiv.addEventListener('click', clickHandler);\n\n// when using a div add a keydown event listener for keyboard users\nclickableDiv.addEventListener('keydown', (event) => {\n  if (event.code === 'Space' || event.code === 'Enter') {\n    clickableDiv.click();\n  }\n});\n```", "```\nconst elems = document.querySelectorAll('*[class]');\n```", "```\nconst reds = document.querySelectorAll('*[class=\"red\"]');\n```", "```\nvar elems = document.querySelectorAll('*[class]');\n```", "```\nconst reds = document.querySelectorAll('*[class=\"red\"]');\n```", "```\nconst notRed = document.querySelectorAll('div:not(.red)');\n```", "```\nconst imgElements = document.getElementsByTagName('img');\n```", "```\nconst imgElements = document.getElementsByTagName('img');\nfor (let i = 0; i < imgElements.length; i += 1) {\n  const img = imgElements[i];\n  ...\n}\n```", "```\nconst img = imgElements.item(1); // second image\n```", "```\n<!DOCTYPE html>\n<html>\n<head>\n<title>NodeList</title>\n</head>\n<body>\n  <p><img src=\"firstimage.jpg\" alt=\"image description\" /></p>\n  <p><img src=\"secondimage.jpg\" alt=\"image description\" /></p>\n  <p><img src=\"thirdimage.jpg\" alt=\"image description\" /></p>\n\n<script>\n  const imgs = document.getElementsByTagName('img');\n  console.log(imgs.length);\n  const p = document.createElement('p');\n  const img = document.createElement('img');\n  img.src = './img/someimg.jpg';\n  p.appendChild(img);\n\n  const paras = document.getElementsByTagName('p');\n  paras[0].parentNode.appendChild(p);\n\n  console.log(imgs.length);\n</script>\n\n</body>\n</html>\n```", "```\n<img src=\"img/firstimage.jpg\" alt=\"image description\">\n<img src=\"img/secondimage.jpg\" alt=\"image description\">\n<img src=\"img/thirdimage.jpg\" alt=\"image description\">\n3\n4\n```", "```\nconst allElems = document.getElementsByTagName('*');\n```", "```\nconst imgs = document.querySelectorAll('article img');\n```", "```\nconst imgs = document.querySelectorAll('img');\n```", "```\n<article>\n   <div>\n      <img src=\"...\" />\n   </div>\n</article>\n```", "```\nconst imgs = document.querySelectorAll('article > img');\n```", "```\nconst imgs = document.querySelectorAll('img + p');\n```", "```\nconst imgs = document.querySelectorAll('img[alt=\"\"]');\n```", "```\nconst imgs = document.querySelectorAll('img:not([alt=\"\"])');\n```", "```\nconst element = document.getElementById('example-element');\n// add a new class\nelement.classList.add('new-class');\n// remove an existing class\nelement.classList.remove('existing-class');\n// if toggle-me is present it is removed, if not it is added\nelement.classList.toggle('toggle-me');\n```", "```\nif (element.classList.contains('new-class')) {\n  element.classList.remove('new-class');\n}\n```", "```\n// add multiple classes\n.classList.add(\"my-class\", \"another-class\");\n\n// remove multiple classes with a spread operator\nconst classes = [\"my-class\", \"another-class\"];\ndiv.classList.remove(...classes);\n```", "```\nelem.style.backgroundColor = 'red';\n```", "```\nelem.setAttribute('style',\n  'background-color: red; color: white; border: 1px solid black');\n```", "```\nconst card = document.getElementById('card');\ncard.setAttribute(\n  'style',\n  'background-color: #ecf0f1; color: #2c3e50;'\n);\n```", "```\n<div id=\"card\" style=\"background-color: #ecf0f1; color: #2c3e50;\">\n...\n</div>\n```", "```\nelem.style.width = '500px';\n```", "```\nelem.style.fontFamily = 'Courier';\nelem.style.backgroundColor = 'rgb(255,0,0)';\n```", "```\n// using setAttribute\nelem.setAttribute('style','font-family: Courier; background-color: yellow');\n\n// alternately apply a value to style.cssText\nelem.style.cssText = 'font-family: Courier; background-color: yellow';\n```", "```\nconst className = elem.getAttribute('class');\n```", "```\nconst style = window.getComputedStyle(elem);\n```", "```\nconst styleAttr = document.createAttribute('style');\nstyleAttr.nodeValue = 'background-color: red';\nsomeElement.setAttribute(styleAttr);\n```", "```\nconst newPara = document.createElement('p');\nconst text = document.createTextNode('New paragraph content');\nnewPara.appendChild(text);\n```", "```\n<!DOCTYPE html>\n<html>\n<head>\n<title>Adding Paragraphs</title>\n</head>\n<body>\n<div id=\"target\">\n  <p>\n    There is a language 'little known,'<br />\n    Lovers claim it as their own.\n  </p>\n  <p>\n    Its symbols smile upon the land, <br />\n    Wrought by nature's wondrous hand;\n  </p>\n  <p>\n    And in their silent beauty speak,<br />\n    Of life and joy, to those who seek.\n  </p>\n  <p>\n    For Love Divine and sunny hours <br />\n    In the language of the flowers.\n  </p>\n</div>\n<script>\n  // use getElementById to access the div element\n  const div = document.getElementById('target');\n\n  // get paragraph text\n  const txt = prompt('Enter new paragraph text', '');\n\n  // use getElementsByTagName and the collection index\n  // to access the first paragraph\n  const oldPara = div.getElementsByTagName('p')[0];\n\n  // create a text node\n  const txtNode = document.createTextNode(txt);\n\n  // create a new paragraph\n  const para = document.createElement('p');\n\n  // append the text to the paragraph, and insert the new para\n  para.appendChild(txtNode);\n  div.insertBefore(para, oldPara);\n</script>\n</body>\n</html>\n```", "```\n// get the target div\nconst div = document.getElementById('target');\n\n// retrieve a collection of paragraphs\nconst paras = div.getElementsByTagName('p');\n\n// create the element and append text to it\nconst newPara = document.createElement('p');\nconst text = document.createTextNode('New paragraph content');\nnewPara.appendChild(text);\n\n// if a third para exists, insert the new element before\n// otherwise, append the paragraph to the end of the div\nif (paras[2]) {\n  div.insertBefore(newPara, paras[2]);\n} else {\n  div.appendChild(newPara);\n}\n```", "```\nconst checkBox = document.getElementById('check');\n\nconst validate = () => {\n  if (checkBox.checked) {\n    console.log('Checkbox is checked')\n  } else {\n    console.log('Checkbox is not checked')\n  }\n}\n\ncheckBox.addEventListener('click', validate);\n```", "```\nconst checkBox = document.getElementById('check');\nconst acceptButton = document.getElementById('accept');\n\nconst validate = () => {\n  if (checkBox.checked) {\n    acceptButton.disabled = false;\n  } else {\n    acceptButton.disabled = true;\n  }\n}\n\ncheckBox.addEventListener('click', validate);\n```", "```\nlet sum = 0;\n\n// use querySelectorAll to find all second table cells\nconst cells = document.querySelectorAll('td:nth-of-type(2)');\n\n// iterate over each\ncells.forEach(cell => {\n  sum += Number.parseFloat(cell.firstChild.data);\n});\n```", "```\n<td>Washington</td><td>145</td>\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Adding Up Values in an HTML Table</title>\n</head>\n<body>\n  <h1>Adding Up Values in an HTML Table</h1>\n    <table>\n      <tbody id=\"table1\">\n        <tr>\n            <td>Washington</td><td>145</td>\n        </tr>\n        <tr>\n            <td>Oregon</td><td>233</td>\n        </tr>\n        <tr>\n            <td>Missouri</td><td>833</td>\n        </tr>\n      <tbody>\n    </table>\n\n    <script>\n      let sum = 0;\n\n      // use querySelector to find all second table cells\n      const cells = document.querySelectorAll('td:nth-of-type(2)');\n\n      // iterate over each\n      cells.forEach(cell => {\n        sum += Number.parseFloat(cell.firstChild.data);\n      });\n\n      // now add sum to end of table\n      const newRow = document.createElement('tr');\n\n      // first cell\n      const firstCell = document.createElement('td');\n      const firstCellText = document.createTextNode('Sum:');\n      firstCell.appendChild(firstCellText);\n      newRow.appendChild(firstCell);\n\n      // second cell with sum\n      const secondCell = document.createElement('td');\n      const secondCellText = document.createTextNode(sum);\n      secondCell.appendChild(secondCellText);\n      newRow.appendChild(secondCell);\n\n      // add row to table\n      document.getElementById('table1').appendChild(newRow);\n    </script>\n</body>\n</html>\n```", "```\nlet sum = 0;\n\n// use querySelector to find all second table cells\nlet cells = document.querySelectorAll(\"td:nth-of-type(2)\");\n\nfor (var i = 0; i < cells.length; i++) {\n  sum+=parseFloat(cells[i].firstChild.data);\n}\n```", "```\n// modular method\nconst modular = Number.parseInt('123');\n// global method\nconst global = parseInt('123');\n```", "```\nif (Number.parseInt === undefined) {\n  Number.parseInt = window.parseInt\n}\n```", "```\nconst parent = row.parentNode;\nconst oldrow = parent.removeChild(parent);\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Deleting Rows from an HTML Table</title>\n    <style>\n      table {\n        border-collapse: collapse;\n      }\n      td,\n      th {\n        padding: 5px;\n        border: 1px solid #ccc;\n      }\n      tr:nth-child(2n + 1) {\n        background-color: #eeffee;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Deleting Rows from an HTML Table</h1>\n    <table id=\"mixed\">\n      <tr>\n        <th>Value One</th>\n        <th>Value two</th>\n        <th>Value three</th>\n      </tr>\n    </table>\n\n    <div id=\"result\"></div>\n    <script>\n    // table values\n    const values = new Array(3);\n    values[0] = [123.45, 'apple', true];\n    values[1] = [65, 'banana', false];\n    values[2] = [1034.99, 'cherry', false];\n\n    const mixed = document.getElementById('mixed');\n    const tbody = document.createElement('tbody');\n\n    function pruneRow() {\n    // remove row\n    const parent = this.parentNode;\n    const oldRow = parent.removeChild(this);\n\n    // dataString from removed row data\n    let dataString = '';\n    oldRow.childNodes.forEach(row => {\n      dataString += `${row.firstChild.data} `;\n    });\n\n    // output message\n    const msg = document.createTextNode(`removed ${dataString}`);\n    const p = document.createElement('p');\n    p.appendChild(msg);\n    document.getElementById('result').appendChild(p);\n    }\n\n    // for each outer array row\n    values.forEach(value => {\n      const tr = document.createElement('tr');\n\n      // for each inner array cell\n      // create td then text, append\n      value.forEach(cell => {\n        const td = document.createElement('td');\n        const txt = document.createTextNode(cell);\n        td.appendChild(txt);\n        tr.appendChild(td);\n      });\n\n      // attache event handler\n      tr.onclick = pruneRow;\n\n      // append row to table\n      tbody.appendChild(tr);\n      mixed.appendChild(tbody);\n    });\n    </script>\n  </body>\n</html>\n```", "```\nmsg.style.hidden = 'visible'; // to display\nmsg.style.hidden = 'hidden'; // to hide\n```", "```\nmsg.style.display = 'block'; // to display\nmsg.style.display = 'none'; // to remove from display\n```", "```\nwindow.onload = () => {\n  const imgs = document.querySelectorAll('img');\n  imgs.forEach(img => {\n    img.addEventListener(\n      'mouseover',\n      () => {\n        getInfo(img.id);\n      },\n      false\n    );\n\n    img.addEventListener(\n      'mouseout',\n      () => {\n        removeWindow();\n      },\n      false\n    );\n  });\n};\n```", "```\nfunction getInfo(id) {\n  // get the data\n}\n```", "```\n// compute position for pop-up\nfunction compPos(obj) {\n  const rect = obj.getBoundingClientRect();\n  let height;\n  if (rect.height) {\n    height = rect.height;\n  } else {\n    height = rect.bottom - rect.top;\n  }\n  const top = rect.top + height + 10;\n  return [rect.left, top];\n}\n\nfunction showWindow(id, response) {\n  const img = document.getElementById(id);\n\n  console.log(img);\n  // derive location for pop-up\n  const loc = compPos(img);\n  const left = `${loc[0]}px`;\n  const top = `${loc[1]}px`;\n\n  // create pop-up\n  const div = document.createElement('popup');\n  div.id = 'popup';\n  const txt = document.createTextNode(response);\n  div.appendChild(txt);\n\n  // style pop-up\n  div.setAttribute('class', 'popup');\n  div.setAttribute('style', `position: fixed; left: ${left}; top: ${top}`);\n  document.body.appendChild(div);\n}\n```", "```\nfunction removeWindow() {\n  const popup = document.getElementById('popup');\n  if (popup) popup.parentNode.removeChild(popup);\n}\n```", "```\n<form id=\"example\" name=\"example\" action=\"\" method=\"post\">\n  <fieldset>\n    <legend>Example Form</legend>\n    <div>\n      <label for=\"email\">Email (required):</label>\n      <input type=\"email\" id=\"email\" name=\"email\" value=\"\" required />\n    </div>\n    <div>\n      <label for=\"postal\">Postal Code:</label>\n      <input type=\"text\" pattern=\"[0-9]*\" id=\"postal\" name=\"url\" value=\"\" />\n    </div>\n    <div id=\"error\"></div>\n    <div>\n      <input type=\"submit\" value=\"Submit\" />\n    </div>\n  </fieldset>\n</form>\n```", "```\n<script type=\"text/javascript\">\n  function inputValidator(id, value) {\n    // check email validity\n    if (id === 'email') {\n     return validator.isEmail(value);\n    }\n\n    // check US postal code validity\n    if (id === 'postal') {\n     return validator.isPostalCode(value, 'US');\n    }\n\n    return false;\n  }\n\n  const inputs = document.querySelectorAll('#example input');\n\n  inputs.forEach(input => {\n    // fire an event each time an input value changes\n    input.addEventListener('input', () => {\n     // pass the input value to the validation function\n     const valid = inputValidator(input.id, input.value);\n     // if not valid set the aria-invalid attribute to true\n     if (!valid && input.value.length > 0) {\n       this.setAttribute('aria-invalid', 'true');\n     }\n    });\n  });\n</script>\n```", "```\nconst cardInput = document.querySelector('input.cc-num');\n\nPayment.formatCardNumber(cardInput);\n```", "```\nvar valid = Payment.fns.validateCardNumber(cardInput.value);\n\nif (!valid) {\n  message.innerHTML = 'You entered an invalid credit card number';\n  return false;\n}\n```", "```\n[aria-invalid] {\n  background-color: #f5b2b2;\n}\n```", "```\nfunction validateField() {\n  // check for number\n  if (typeof this.value !== 'number') {\n    this.setAttribute('aria-invalid', 'true');\n    generateAlert(\n      'You entered an invalid value. Only numeric values are allowed'\n    );\n  }\n}\n\ndocument.getElementById('number').oninput = validateField;\n```", "```\nfunction checkMandatory() {\n  // check for data\n  if (this.value.length === 0) {\n    this.setAttribute('aria-invalid', 'true');\n    generateAlert('A value is required in this field');\n  }\n}\n\ndocument.getElementById('required-field').onblur = checkMandatory;\n```", "```\n<!DOCTYPE html>\n<head>\n<title>Validating Forms</title>\n<style>\n[aria-invalid] {\n   background-color: #ffeeee;\n}\n\n[role=\"alert\"] {\n  background-color: #ffcccc;\n  font-weight: bold;\n  padding: 5px;\n  border: 1px dashed #000;\n}\n\ndiv {\n  margin: 10px 0;\n  padding: 5px;\n  width: 400px;\n  background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n\n<form id=\"testform\">\n   <div><label for=\"firstfield\">*First Field:</label><br />\n      <input id=\"firstfield\" name=\"firstfield\" type=\"text\" aria-required=\"true\"\n      required />\n   </div>\n   <div><label for=\"secondfield\">Second Field:</label><br />\n      <input id=\"secondfield\" name=\"secondfield\" type=\"text\" />\n   </div>\n   <div><label for=\"thirdfield\">Third Field (numeric):</label><br />\n      <input id=\"thirdfield\" name=\"thirdfield\" type=\"text\" />\n   </div>\n   <div><label for=\"fourthfield\">Fourth Field:</label><br />\n      <input id=\"fourthfield\" name=\"fourthfield\" type=\"text\" />\n   </div>\n\n   <input type=\"submit\" value=\"Send Data\" />\n</form>\n\n<script>\n\n  document.getElementById(\"thirdfield\").onchange=validateField;\n  document.getElementById(\"firstfield\").onblur=mandatoryField;\n  document.getElementById(\"testform\").onsubmit=finalCheck;\n\n  function removeAlert() {\n\n    var msg = document.getElementById(\"msg\");\n    if (msg) {\n      document.body.removeChild(msg);\n    }\n  }\n\n  function resetField(elem) {\n    elem.parentNode.setAttribute(\"style\",\"background-color: #ffffff\");\n    var valid = elem.getAttribute(\"aria-invalid\");\n    if (valid) elem.removeAttribute(\"aria-invalid\");\n  }\n\n  function badField(elem) {\n    elem.parentNode.setAttribute(\"style\", \"background-color: #ffeeee\");\n    elem.setAttribute(\"aria-invalid\",\"true\");\n  }\n\n  function generateAlert(txt) {\n\n    // create new text and div elements and set\n    // Aria and class values and id\n    var txtNd = document.createTextNode(txt);\n    msg = document.createElement(\"div\");\n    msg.setAttribute(\"role\",\"alert\");\n    msg.setAttribute(\"id\",\"msg\");\n    msg.setAttribute(\"class\",\"alert\");\n\n    // append text to div, div to document\n    msg.appendChild(txtNd);\n    document.body.appendChild(msg);\n  }\n\n  function validateField() {\n\n    // remove any existing alert regardless of value\n    removeAlert();\n\n    // check for number\n    if (!isNaN(this.value)) {\n      resetField(this);\n    } else {\n      badField(this);\n      generateAlert(\"You entered an invalid value in Third Field. \" +\n                    \"Only numeric values such as 105 or 3.54 are allowed\");\n    }\n  }\n\n  function mandatoryField() {\n\n    // remove any existing alert\n    removeAlert();\n\n    // check for value\n    if (this.value.length > 0) {\n      resetField(this);\n    } else {\n      badField(this);\n      generateAlert(\"You must enter a value into First Field\");\n    }\n  }\n\n  function finalCheck() {\n\n    removeAlert();\n    var fields = document.querySelectorAll(\"[aria-invalid='true']\");\n    if (fields.length > 0) {\n      generateAlert(\"You have incorrect field entries that must be fixed \" +\n                     \"before you can submit this form\");\n      return false;\n    }\n  }\n\n</script>\n\n</body>\n```", "```\n<div id=\"update\" role=\"log\" aria-live=\"polite\" aria-atomic=\"true\"\naria-relevant=\"additions\">\n</div>\n```", "```\n<div id=\"update\" role=\"log\" aria-live=\"polite\" aria-atomic=\"true\"\naria-relevant=\"additions\"></div>\n```"]