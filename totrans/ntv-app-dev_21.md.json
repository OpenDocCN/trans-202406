["```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/white\">\n\n  <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:orientation=\"vertical\">\n\n    <TextView\n        android:id=\"@+id/textview_title\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_authors\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_isbn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_pagecount\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_isfiction\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n  </LinearLayout>\n\n</ScrollView>\n```", "```\n<string name=\"detail_title\">Book Title: %s</string>\n<string name=\"detail_authors\">Book Authors: %s</string>\n<string name=\"detail_isbn\">Book ISBN: %s</string>\n<string name=\"detail_pagecount\">Book Page Count: %d</string>\n<string name=\"detail_isfiction\">Book : %b</string>\n```", "```\n<activity android:name=\".BookDetailActivity\" />\n```", "```\nimport UIKit\n\nclass DetailViewController: UIViewController {\n\n}\n```", "```\nimport UIKit\n\nclass DetailViewController: UIViewController {\n    @IBOutlet var titleLabel: UILabel!\n    @IBOutlet var authorsLabel: UILabel!\n    @IBOutlet var isbnLabel: UILabel!\n    @IBOutlet var pageCountLabel: UILabel!\n    @IBOutlet var fictionLabel: UILabel!\n}\n```", "```\nimport UIKit\n\nclass DetailViewController: UIViewController {\n    @IBOutlet var titleLabel: UILabel!\n    @IBOutlet var authorsLabel: UILabel!\n    @IBOutlet var isbnLabel: UILabel!\n    @IBOutlet var pageCountLabel: UILabel!\n    @IBOutlet var fictionLabel: UILabel!\n\n    func populate(from book: Book) {\n        titleLabel.text = book.title\n\n        // Flatten our authors array to a string separated by commas\n        authorsLabel.text = book.authors.joined(separator: \", \")\n\n        isbnLabel.text = book.isbn\n        pageCountLabel.text = book.pageCount.description\n\n        // Use our Bool value to display what kind of book it is\n        fictionLabel.text = book.fiction ? \"Fiction\" : \"Nonfiction\"\n    }\n}\n```", "```\nfunc book(for indexPath: IndexPath) -> Book {\n\treturn data[indexPath.row]\n}\n```", "```\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n\tif let detailViewController = segue.destination as? DetailViewController,\n\t   let indexPath = tableView.indexPathForSelectedRow {\n\t\tdetailViewController.populate(from: dataSource.book(for: indexPath))\n\t}\n}\n```", "```\nimport UIKit\n\nclass CatalogViewController: UIViewController {\n\n    @IBOutlet weak var tableView: UITableView!\n    lazy var dataSource: ListDataSource = {\n        return ListDataSource()\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = dataSource\n    }\n\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        if let indexPath = tableView.indexPathForSelectedRow {\n            tableView.deselectRow(at: indexPath, animated: true)\n        }\n    }\n\n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if let detailViewController = segue.destination as? DetailViewController,\n           let indexPath = tableView.indexPathForSelectedRow {\n            detailViewController.populate(from: dataSource.book(for: indexPath))\n        }\n    }\n}\n```", "```\n<Button\n  android:id=\"@+id/button_save\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:layout_gravity=\"center\"\n  android:text=\"Mark as Favorite\" />\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n  <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:orientation=\"vertical\">\n\n    <TextView\n        android:id=\"@+id/textview_title\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_authors\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_isbn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_pagecount\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <TextView\n        android:id=\"@+id/textview_isfiction\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <Button\n        android:id=\"@+id/button_save\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:text=\"Mark as Favorite\" />\n\n  </LinearLayout>\n\n</ScrollView>\n```", "```\n@IBAction func saveBook(_ sender: Any) {\n}\n```", "```\nCREATE TABLE IF NOT EXISTS BOOKS (\n ID INTEGER PRIMARY KEY AUTOINCREMENT,\n TITLE TEXT,\n ISBN TEXT,\n PAGECOUNT INTEGER,\n IS_FICTION INTEGER);\n```", "```\nCREATE TABLE IF NOT EXISTS AUTHORS (\n ID INTEGER PRIMARY KEY AUTOINCREMENT,\n NAME TEXT);\n```", "```\nCREATE TABLE IF NOT EXISTS BOOK_AUTHORS (\n BOOK_ID INTEGER REFERENCES BOOKS(ID),\n AUTHOR_ID INTEGER REFERENCES AUTHORS(ID))\n```", "```\nimport Foundation\nimport CoreData\n\nclass DataController {\n    var persistentContainer: NSPersistentContainer\n\n    init(completion: @escaping () -> ()) {\n        persistentContainer = NSPersistentContainer(name: \"LibraryModel\")\n        persistentContainer.loadPersistentStores { (description, error) in\n            if let error = error {\n                fatalError(\"Core Data stack could not be loaded. \\(error)\")\n            }\n\n            // Called once initialization of Core Data stack is complete\n            DispatchQueue.main.async {\n                completion()\n            }\n        }\n    }\n}\n```", "```\n// Initialize the Core Data stack\ndataController = DataController() {\n\t// Override point to update user interface that initialization has completed\n}\n```", "```\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    var dataController: DataController!\n\n    func application(_ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey:\n        Any]?) -> Bool {\n\n        // Initialize the Core Data stack\n        dataController = DataController() {\n            print(\"Core Data stack has been initialized.\")\n        }\n\n        return true\n    }\n\n    ...\n\n}\n```", "```\nimport Foundation\nimport CoreData\n\nextension BookManagedObject {\n    class func newCatalogResultsController(with dataController: DataController,\n      delegate: NSFetchedResultsControllerDelegate?) ->\n      NSFetchedResultsController<BookManagedObject> {\n        let request = NSFetchRequest<BookManagedObject>(entityName: \"Book\")\n\n        // Add a sort by title description to the fetch request\n        let titleSort = NSSortDescriptor(key: \"title\", ascending: true)\n        request.sortDescriptors = [titleSort]\n\n        let context = dataController.persistentContainer.viewContext\n        let fetchedResultsController =\n          NSFetchedResultsController(fetchRequest: request, managedObjectContext: context,\n          sectionNameKeyPath: nil, cacheName: \"catalog.cache\")\n\n        // Assign the delegate to handle updates\n        fetchedResultsController.delegate = delegate\n\n        do {\n            try fetchedResultsController.performFetch()\n        } catch {\n            fatalError(\"Catalog fetch could not be completed. \\(error)\")\n        }\n\n        return fetchedResultsController\n    }\n}\n```", "```\nvar fetchedResultsController: NSFetchedResultsController<BookManagedObject>?\n```", "```\nfunc fetchCatalogResults(with dataController: DataController) {\n\tfetchedResultsController =\n    BookManagedObject.newCatalogResultsController(with: dataController, delegate: nil)\n}\n```", "```\nimport UIKit\nimport CoreData\n\nclass ListDataSource: NSObject {\n    var fetchedResultsController: NSFetchedResultsController<BookManagedObject>?\n\n    func fetchCatalogResults(with dataController: DataController,\n      delegate: NSFetchedResultsControllerDelegate?) {\n        fetchedResultsController =\n          BookManagedObject.newCatalogResultsController(with: dataController, delegate:\n          delegate)\n    }\n\n    func book(for indexPath: IndexPath) -> Book? {\n        return fetchedResultsController?.object(at: indexPath).book\n    }\n}\nextension ListDataSource: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return fetchedResultsController?.sections?[section].numberOfObjects ?? 0\n    }\n\n    func tableView(_ tableView: UITableView,\n        cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        // Dequeue a table view cell\n        let cell =\n          tableView.dequeueReusableCell(withIdentifier: \"CatalogTableViewCell\", for:\n          indexPath)\n\n        // Find the correct book based on the row being populated\n        guard let book = fetchedResultsController?.object(at: indexPath) else {\n            fatalError(\"Could not retrieve book instance.\")\n        }\n\n        // Populate the table view cell title label with the book title\n        cell.textLabel?.text = book.title\n\n        return cell\n    }\n}\n```", "```\nlazy var dataSource: ListDataSource = {\n\tlet listDataSource = ListDataSource()\n\tlet dataController = (UIApplication.shared.delegate as?\n\tAppDelegate)!.dataController!\n\tlistDataSource.fetchCatalogResults(with: dataController, delegate: nil)\n\treturn listDataSource\n}()\n```", "```\nvar shouldSeedDatabase: Bool = false\n\ninit(completion: @escaping () -> ()) {\n\t// Check if the database exists\n\tdo {\n\t\tlet databaseUrl =\n      try FileManager.default.url(for: .applicationSupportDirectory, in: .userDomainMask,\n      appropriateFor: nil, create: false).appendingPathComponent(\"LibraryModel.sqlite\")\n\t\tshouldSeedDatabase = !FileManager.default.fileExists(atPath:\n\tdatabaseUrl.path)\n\t} catch {\n\t\tshouldSeedDatabase = true\n\t}\n\n\t...\n}\n```", "```\nprivate func seedData() {\n\tdo {\n\t\tguard let rawCatalogData =\n      try? Data(contentsOf:\n      Bundle.main.bundleURL.appendingPathComponent(\"catalog.json\")) else {\n\t\t\treturn\n\t\t}\n\t\tlet books = try JSONDecoder().decode([Book].self, from: rawCatalogData)\n\n\t\tpersistentContainer.performBackgroundTask { (managedObjectContext) in\n\t\t\t// Loop through the books in the JSON and add to the database\n\t\t\tbooks.forEach { (book) in\n\t\t\t\tlet bookManagedObject =\n          BookManagedObject(context: managedObjectContext)\n\t\t\t\tbookManagedObject.title = book.title\n\t\t\t\tbookManagedObject.authors = book.authors\n\t\t\t\tbookManagedObject.isbn = book.isbn\n\t\t\t\tbookManagedObject.pageCount = Int16(book.pageCount)\n\t\t\t\tbookManagedObject.fiction = book.fiction\n\t\t\t}\n\t\t\tdo {\n\t\t\t\ttry managedObjectContext.save()\n\t\t\t} catch {\n\t\t\t\tprint(\"Could not save managed object context. \\(error)\")\n\t\t\t}\n\t\t}\n\n\t} catch {\n\t\tprint(\"Catalog.json was not found or is not decodable.\")\n\t}\n}\n```"]