["```\n$ cut -d: -f1 /etc/passwd | sort      *Print all usernames and sort them*\n```", "```\n$ cat *.txt | wc -l                   *Total the number of lines*\n```", "```\n$ date                                *Default formatting*\nMon Jun 28 16:57:33 EDT 2021\n$ date +%Y-%m-%d                      *Year-Month-Day format*\n2021-06-28\n$ date +%H:%M:%S                      *Hour:Minute:Seconds format*\n16:57:33\n```", "```\n$ date +\"I cannot believe it's already %A!\"        *Day of week*\nI cannot believe it's already Tuesday!\n```", "```\n$ seq 1 5                     *Print all integers from 1 to 5, inclusive*\n1\n2\n3\n4\n5\n```", "```\n$ seq 1 2 10                  *Increment by 2 instead of 1*\n1\n3\n5\n7\n9\n```", "```\n$ seq 3 -1 0\n3\n2\n1\n0\n```", "```\n$ seq 1.1 0.1 2                       *Increment by 0.1*\n1.1\n1.2\n1.3\n⋮\n2.0\n```", "```\n$ seq -s/ 1 5                 *Separate values with forward slashes*\n1/2/3/4/5\n```", "```\n$ seq -w 8 10\n08\n09\n10\n```", "```\n$ echo {1..10}                        *Forward from 1*\n1 2 3 4 5 6 7 8 9 10\n$ echo {10..1}                        *Backward from 10*\n10 9 8 7 6 5 4 3 2 1\n$ echo {01..10}                       *With leading zeros (equal width)*\n01 02 03 04 05 06 07 08 09 10\n```", "```\n$ echo {1..1000..100}                               *Count by hundreds from 1*\n1 101 201 301 401 501 601 701 801 901\n$ echo {1000..1..100}                               *Backward from 1000*\n1000 900 800 700 600 500 400 300 200 100\n$ echo {01..1000..100}                              *With leading zeros*\n0001 0101 0201 0301 0401 0501 0601 0701 0801 0901\n```", "```\n$ ls\nfile1 file2 file4\n$ ls file[2-4]           *Matches existing filenames*\nfile2 file4\n$ ls file{2..4}          *Evaluates to: file2 file3 file4*\nls: cannot access 'file3': No such file or directory\nfile2  file4\n```", "```\n$ echo {A..Z}\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n```", "```\n$ echo {A..Z} | tr -d ' '      *Delete spaces*\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n$ echo {A..Z} | tr ' ' '\\n'    *Change spaces into newlines*\nA\nB\nC\n⋮\nZ\n```", "```\n$ alias nth=\"echo {A..Z} | tr -d ' ' | cut -c\"\n$ nth 10\nJ\n```", "```\n$ find /etc -print            *List all of /etc recursively*\n/etc\n/etc/issue.net\n/etc/nanorc\n/etc/apache2\n/etc/apache2/sites-available\n/etc/apache2/sites-available/default.conf\n⋮\n```", "```\n$ find . -type f -print               *Files only*\n$ find . -type d -print               *Directories only*\n```", "```\n$ find /etc -type f -name \"*.conf\" -print           *Files ending with .conf*\n/etc/logrotate.conf\n/etc/systemd/logind.conf\n/etc/systemd/timesyncd.conf\n⋮\n```", "```\n$ find . -iname \"*.txt\" -print\n```", "```\n$ find /etc -exec echo @ {} @ \";\"\n@ /etc @\n@ /etc/issue.net @\n@ /etc/nanorc @\n⋮\n```", "```\n$ find /etc -type f -name \"*.conf\" -exec ls -l {} \";\"\n-rw-r--r-- 1 root root 703  Aug 21  2017 /etc/logrotate.conf\n-rw-r--r-- 1 root root 1022 Apr 20  2018 /etc/systemd/logind.conf\n-rw-r--r-- 1 root root 604  Apr 20  2018 /etc/systemd/timesyncd.conf\n⋮\n```", "```\n$ find $HOME/tmp -type f -name \"*~\" -exec echo rm {} \";\"       *echo for safety*\nrm /home/smith/tmp/file1~\nrm /home/smith/tmp/junk/file2~\nrm /home/smith/tmp/vm/vm-8.2.0b/lisp/vm-cus-load.el~\n$ find $HOME/tmp -type f -name \"*~\" -exec rm {} \";\"            *Delete for real*\n```", "```\n$ yes          *Repeats \"y\" by default*\ny\ny\ny ^C           *Kill the command with Ctrl-C*\n$ yes woof!    *Repeat any other string*\nwoof!\nwoof!\nwoof! ^C\n```", "```\n$ yes \"Efficient Linux\" | head -n3            *Print a string 3 times*\nEfficient Linux\nEfficient Linux\nEfficient Linux\n```", "```\n$ cat frost\nWhose woods these are I think I know.\nHis house is in the village though;\nHe will not see me stopping here\nTo watch his woods fill up with snow.\nThis is not the end of the poem.\n$ grep his frost                              *Print lines containing \"his\"*\nTo watch his woods fill up with snow.\nThis is not the end of the poem.              *\"This\" matches \"his\"*\n```", "```\n$ grep -w his frost                         *Match the word \"his\" exactly*\nTo watch his woods fill up with snow.\n```", "```\n$ grep -i his frost\nHis house is in the village though;             *Matches \"His\"*\nTo watch his woods fill up with snow.           *Matches \"his\"*\nThis is not the end of the poem.                *\"This\" matches \"his\"*\n```", "```\n$ grep -l his *             *Which files contain the string \"his\"?*\nfrost\n```", "```\n$ grep '^[A-Z]' myfile\n```", "```\n$ grep -v '^$' myfile\n```", "```\n$ grep 'cookie\\|cake' myfile\n```", "```\n$ grep '.....' myfile\n```", "```\n$ grep '<.*>' page.html\n```", "```\n$ grep w. frost\nWhose woods these are I think I know.\nHe will not see me stopping here\nTo watch his woods fill up with snow.\n```", "```\n$ grep 'w\\.' frost\nWhose woods these are I think I know.\nTo watch his woods fill up with snow.\n```", "```\n$ grep -F w. frost\nWhose woods these are I think I know.\nTo watch his woods fill up with snow.\n$ fgrep w. frost\nWhose woods these are I think I know.\nTo watch his woods fill up with snow.\n```", "```\n$ cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash                         *7th field is a shell*\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin         *7th field is not a shell*\n⋮\n```", "```\n$ cat /etc/shells\n/bin/sh\n/bin/bash\n/bin/csh\n```", "```\n$ cut -d: -f7 /etc/passwd | sort -u | grep -f /etc/shells -F\n/bin/bash\n/bin/sh\n```", "```\n$ cat alphabet\nA is for aardvark\nB is for bunny\nC is for chipmunk\n⋮\nX is for xenorhabdus\nY is for yak\nZ is for zebu\n```", "```\n$ tail -n3 alphabet\nX is for xenorhabdus\nY is for yak\nZ is for zebu\n```", "```\n$ tail -n+25 alphabet\nY is for yak\nZ is for zebu\n```", "```\n$ head -n4 alphabet | tail -n1\nD is for dingo\n```", "```\n$ head -n8 alphabet | tail -n3\nF is for falcon\nG is for gorilla\nH is for hawk\n```", "```\n$ head -4 alphabet       *Same as head -n4 alphabet*\n$ tail -3 alphabet       *Same as tail -n3 alphabet*\n$ tail +25 alphabet      *Same as tail -n+25 alphabet*\n```", "```\n$ less /etc/hosts\n127.0.0.1       localhost\n127.0.1.1           myhost      myhost.example.com\n192.168.1.2       frodo\n192.168.1.3     gollum\n192.168.1.28        gandalf\n```", "```\n$ awk '{print $2}' /etc/hosts\nlocalhost\nmyhost\nfrodo\ngollum\ngandalf\n```", "```\n$ echo Efficient fun Linux | awk '{print $1 $3}'           *No whitespace*\nEfficientLinux\n$ echo Efficient fun Linux | awk '{print $1, $3}'          *Whitespace*\nEfficient Linux\n```", "```\n$ df / /data\nFilesystem      1K-blocks       Used  Available Use% Mounted on\n/dev/sda1      1888543276  902295944  890244772  51% /\n/dev/sda2      7441141620 1599844268 5466214400  23% /data\n```", "```\n$ df / /data | awk '{print $4}'\nAvailable\n890244772\n5466214400\n```", "```\n$ df / /data | awk 'FNR>1 {print $4}'\n890244772\n5466214400\n```", "```\n$ echo efficient:::::linux | awk -F':*' '{print $2}'       *Any number of colons*\nlinux\n```", "```\n$ cat poem1\nIt is an ancient Mariner,\nAnd he stoppeth one of three.\n$ cat poem2\n'By thy long grey beard and glittering eye,\n$ cat poem3\nNow wherefore stopp'st thou me?\n$ cat poem1 poem2 poem3\nIt is an ancient Mariner,\nAnd he stoppeth one of three.\n'By thy long grey beard and glittering eye,\nNow wherefore stopp'st thou me?\n```", "```\n$ echo efficient             linux     in     $HOME\nefficient linux in /home/smith\n```", "```\n$ cat poem1 poem2 poem3 | tac\nNow wherefore stopp'st thou me?\n'By thy long grey beard and glittering eye,\nAnd he stoppeth one of three.\nIt is an ancient Mariner,\n```", "```\n$ tac poem1 poem2 poem3\nAnd he stoppeth one of three.                    *First file reversed*\nIt is an ancient Mariner,\n'By thy long grey beard and glittering eye,      *Second file*\nNow wherefore stopp'st thou me?                  *Third file*\n```", "```\n192.168.1.34 - - [30/Nov/2021:23:37:39 -0500] \"GET / HTTP/1.1\" ...\n192.168.1.10 - - [01/Dec/2021:00:02:11 -0500] \"GET /notes.html HTTP/1.1\" ...\n192.168.1.8 - - [01/Dec/2021:00:04:30 -0500] \"GET /stuff.html HTTP/1.1\" ...\n⋮\n```", "```\n$ cat title-words1\nEFFICIENT\nAT\nCOMMAND\n$ cat title-words2\nlinux\nthe\nline\n$ paste title-words1 title-words2\nEFFICIENT\tlinux\nAT\tthe\nCOMMAND line\n$ paste title-words1 title-words2 | cut -f2        *cut & paste are complementary*\nlinux\nthe\nline\n```", "```\n$ paste -d, title-words1 title-words2\nEFFICIENT,linux\nAT,the\nCOMMAND,line\n```", "```\n$ paste -d, -s title-words1 title-words2\nEFFICIENT,AT,COMMAND\nlinux,the,line\n```", "```\n$ paste -d \"\\n\" title-words1 title-words2\nEFFICIENT\nlinux\nAT\nthe\nCOMMAND\nline\n```", "```\n$ cat file1\nLinux is all about efficiency.\nI hope you will enjoy this book.\n$ cat file2\nMacOS is all about efficiency.\nI hope you will enjoy this book.\nHave a nice day.\n$ diff file1 file2\n1c1\n< Linux is all about efficiency.\n---\n> MacOS is all about efficiency.\n2a3\n> Have a nice day.\n```", "```\n$ diff file1 file2 | grep '^[<>]'\n< Linux is all about efficiency.\n> MacOS is all about efficiency.\n> Have a nice day.\n$ diff file1 file2 | grep '^[<>]' | cut -c3-\nLinux is all about efficiency.\nMacOS is all about efficiency.\nHave a nice day.\n```", "```\n$ echo $PATH | tr : \"\\n\"              *Translate colons into newlines*\n/home/smith/bin\n/usr/local/bin\n/usr/bin\n/bin\n/usr/games\n/usr/lib/java/bin\n```", "```\n$ echo efficient | tr a-z A-Z         *Translate a into A, b into B, etc.*\nEFFICIENT\n$ echo Efficient | tr A-Z a-z\nefficient\n```", "```\n$ echo Efficient Linux | tr \" \" \"\\n\"\nEfficient\nLinux\n```", "```\n$ echo efficient linux | tr -d ' \\t'      *Remove spaces and tabs*\nefficientlinux\n```", "```\n$ echo Efficient Linux! | rev\n!xuniL tneiciffE\n```", "```\n$ cat celebrities\nJamie Lee Curtis\nZooey Deschanel\nZendaya Maree Stoermer Coleman\nRihanna\n```", "```\n$ rev celebrities\nsitruC eeL eimaJ\nlenahcseD yeooZ\nnameloC remreotS eeraM ayadneZ\nannahiR\n$ rev celebrities | cut -d' ' -f1\nsitruC\nlenahcseD\nnameloC\nannahiR\n$ rev celebrities | cut -d' ' -f1 | rev\nCurtis\nDeschanel\nColeman\nRihanna\n```", "```\n$ sed 10q myfile                  *Print 10 lines and quit (q)*\n$ awk 'FNR<=10' myfile            *Print while line number is ≤ 10*\n```", "```\n$ echo image.jpg | sed 's/\\.jpg/.png/'                 *Replace .jpg by .png*\nimage.png\n$ echo \"linux efficient\" | awk '{print $2, $1}'        *Swap two words*\nefficient linux\n\n```", "```\n$ awk *program* *input-files*\n```", "```\n$ awk -f *program-file1* -f *program-file2* -f *program-file3* *input-files*\n```", "```\n*pattern* {*action*}\n```", "```\n$ awk '{print $NF}' celebrities\nCurtis\nDeschanel\nColeman\nRihanna\n```", "```\n$ echo efficient linux | awk '/efficient/'\nefficient linux\n```", "```\npython\tProgramming Python\t2010\tLutz, Mark\n```", "```\nLutz, Mark (2010). \"Programming Python\"\n```", "```\n$ awk -F'\\t' '{print $4, \"(\" $3 \").\", \"\\\"\" $2 \"\\\"\"}' animals.txt\nLutz, Mark (2010). \"Programming Python\"\nBarrett, Daniel (2005). \"SSH, The Secure Shell\"\nSchwartz, Randal (2012). \"Intermediate Perl\"\nBell, Charles (2014). \"MySQL High Availability\"\nSiever, Ellen (2009). \"Linux in a Nutshell\"\nBoney, James (2005). \"Cisco IOS in a Nutshell\"\nRoman, Steven (1999). \"Writing Word Macros\"\n```", "```\n$ awk -F'\\t' '/^horse/{print $4, \"(\" $3 \").\", \"\\\"\" $2 \"\\\"\"}' animals.txt\nSiever, Ellen (2009). \"Linux in a Nutshell\"\n```", "```\n$ awk -F'\\t' '$3~/^201/{print $4, \"(\" $3 \").\", \"\\\"\" $2 \"\\\"\"}' animals.txt\nLutz, Mark (2010). \"Programming Python\"\nSchwartz, Randal (2012). \"Intermediate Perl\"\nBell, Charles (2014). \"MySQL High Availability\"\n```", "```\n$ awk -F'\\t' \\\n  'BEGIN {print \"Recent books:\"} \\\n  $3~/^201/{print \"-\", $4, \"(\" $3 \").\", \"\\\"\" $2 \"\\\"\"} \\\n  END {print \"For more books, search the web\"}' \\\n  animals.txt\nRecent books:\n- Lutz, Mark (2010). \"Programming Python\"\n- Schwartz, Randal (2012). \"Intermediate Perl\"\n- Bell, Charles (2014). \"MySQL High Availability\"\nFor more books, search the web\n```", "```\n$ seq 1 100 | awk '{s+=$1} END {print s}'\n5050\n```", "```\n$ md5sum *.jpg | cut -c1-32 | sort | uniq -c | sort -nr | grep -v \"      1 \"\n      3 f6464ed766daca87ba407aede21c8fcc\n      2 c7978522c58425f6af3f095ef1de1cd5\n      2 146b163929b6533f02e91bdf21cb9563\n```", "```\n$ md5sum *.jpg\n146b163929b6533f02e91bdf21cb9563  image001.jpg\n63da88b3ddde0843c94269638dfa6958  image002.jpg\n146b163929b6533f02e91bdf21cb9563  image003.jpg\n⋮\n```", "```\n$ md5sum *.jpg | awk '{counts[$1]++}'\n```", "```\nfor (*variable* in *array*) *do something with array[variable]*\n```", "```\nfor (key in counts) print array[key]\n```", "```\n$ md5sum *.jpg \\\n  | awk '{counts[$1]++} \\\n         END {for (key in counts) print counts[key]}'\n1\n2\n2\n⋮\n```", "```\n$ md5sum *.jpg \\\n  | awk '{counts[$1]++} \\\n         END {for (key in counts) print counts[key] \" \" key}'\n1 714eceeb06b43c03fe20eb96474f69b8\n2 146b163929b6533f02e91bdf21cb9563\n2 c7978522c58425f6af3f095ef1de1cd5\n⋮\n```", "```\n$ md5sum *.jpg \\\n  | awk '{counts[$1]++; names[$1]=names[$1] \" \" $2} \\\n         END {for (key in counts) print counts[key] \" \" key \":\" names[key]}'\n1 714eceeb06b43c03fe20eb96474f69b8: image011.jpg\n2 146b163929b6533f02e91bdf21cb9563: image001.jpg image003.jpg\n2 c7978522c58425f6af3f095ef1de1cd5: image019.jpg image020.jpg\n⋮\n```", "```\n$ md5sum *.jpg \\\n  | awk '{counts[$1]++; names[$1]=names[$1] \" \" $2} \\\n         END {for (key in counts) print counts[key] \" \" key \":\" names[key]}' \\\n  | grep -v '^1 ' \\\n  | sort -nr\n3 f6464ed766daca87ba407aede21c8fcc: image007.jpg image012.jpg image014.jpg\n2 c7978522c58425f6af3f095ef1de1cd5: image019.jpg image020.jpg\n2 146b163929b6533f02e91bdf21cb9563: image001.jpg image003.jpg\n```", "```\n$ sed **script** *input-files*\n```", "```\n$ sed -e **script1** -e **script2** -e **script3** *input-files*\n```", "```\n$ sed -f *script-file1* -f *script-file2* -f *script-file3* *input-files*\n```", "```\ns/*regexp*/*replacement*/\n```", "```\n$ echo Efficient Windows | sed \"s/Windows/Linux/\"\nEfficient Linux\n```", "```\n$ sed 's/.* //' celebrities\nCurtis\nDeschanel\nColeman\nRihanna\n```", "```\ns/one/two/\ts_one_two_\ts@one@two@\n```", "```\n$ echo Efficient Stuff | sed \"s/stuff/linux/\"         *Case sensitive; no match*\nEfficient Stuff\n$ echo Efficient Stuff | sed \"s/stuff/linux/i\"        *Case-insensitive match*\nEfficient linux\n```", "```\n$ echo efficient stuff | sed \"s/f/F/\"         *Replaces just the first \"f\"*\neFficient stuff\n$ echo efficient stuff | sed \"s/f/F/g\"        *Replaces all occurrences of \"f\"*\neFFicient stuFF\n```", "```\n$ seq 10 14 | sed 4d                 *Remove the 4th line*\n10\n11\n12\n14\n```", "```\n$ seq 101 200 | sed '/[13579]$/d'    *Delete lines ending in an odd digit*\n102\n104\n106\n⋮\n200\n```", "```\n$ ls\nimage.jpg.1  image.jpg.2  image.jpg.3\n```", "```\nimage\\.jpg\\.[1-3]\n```", "```\nimage\\.jpg\\.\\([1-3]\\)\n```", "```\n$ ls | sed \"s/image\\.jpg\\.\\([1-3]\\)/image\\1.jpg/\"\nimage1.jpg\nimage2.jpg\nimage3.jpg\n```", "```\n$ ls\napple.jpg.1  banana.png.2  carrot.jpg.3\n```", "```\n\\([a-z][a-z]*\\)                 *\\1 = Base filename of one letter or more*\n\\([a-z][a-z][a-z]\\)             *\\2 = File extension of three letters*\n\\([0-9]\\)                       *\\3 = A digit*\n```", "```\n\\([a-z][a-z]*\\)\\.\\([a-z][a-z][a-z]\\)\\.\\([0-9]\\)\n```", "```\n$ ls | sed \"s/\\([a-z][a-z]*\\)\\.\\([a-z][a-z][a-z]\\)\\.\\([0-9]\\)/\\1\\3.\\2/\"\napple1.jpg\nbanana2.png\ncarrot3.jpg\n```", "```\n$ cat title.txt\nThis book is titled \"Efficient Linux at the Command Line\"\n$ fold -w40 title.txt\nThis book is titled \"Efficient Linux at\nthe Command Line\"\n```", "```\n$ man -k width\nDisplayWidth (3)     - image format functions and macros\nDisplayWidthMM (3)   - image format functions and macros\nfold (1)             - wrap each input line to fit in specified width\n⋮\n```", "```\n$ man -k \"wide|width\"\n```", "```\n$ sudo apt update                   *Download the latest metadata*\n$ apt-file search *string*            *Search for a string*\n```"]