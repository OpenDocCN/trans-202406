- en: Chapter 19\. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章 安全
- en: Kubernetes is a powerful platform for orchestrating cloud native applications.
    However, under the veneer and polish of the APIs and tooling we know and love
    lies a large, complex distributed system that requires specific knowledge to secure.
    Securing Kubernetes is a complex topic that honestly requires its own book; however,
    there’s so much at stake if you overlook taking the time to understand and implement
    security best practices that we cover it in brief here. The risk of not securing
    your Kubernetes clusters and workloads properly is the possibility of exposing
    your data and resources to hackers, malware, and unauthorized access. We would
    be remiss not to cover some of the main security areas and provide best practices
    to help along the way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个强大的平台，用于编排云原生应用程序。然而，在我们熟悉和喜爱的 API 和工具之下，隐藏着一个庞大而复杂的分布式系统，需要特定的知识来确保安全。保护
    Kubernetes 是一个复杂的话题，实际上需要一本专门的书来详细讲解；然而，如果您忽视了理解和实施安全最佳实践，可能会面临重大风险，我们在这里简要介绍。如果您没有正确地保护
    Kubernetes 集群和工作负载，可能会导致您的数据和资源暴露给黑客、恶意软件和未经授权的访问。我们必须覆盖一些主要的安全领域，并提供最佳实践以帮助您走上正轨。
- en: Given the complexity of Kubernetes, we recommend breaking the problem down into
    logical layers where you can focus on specific tooling at each layer. A great
    way to handle security is to follow the “defense in depth” strategy. This requires
    the use of multiple security measures at each layer to protect Kubernetes and
    your workloads. Additionally, keep the principle of least privilege in mind, which
    states that users and workloads should have access only to what they absolutely
    need to perform their functions. This all sounds great in theory, but what does
    it look like in practice? This chapter lays out an approach to bucketing security
    concerns into layers that will help you focus on the solutions and tooling available
    as well as cluster security, container security, and code security.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 Kubernetes 的复杂性，我们建议将问题分解为逻辑层次，在每个层次可以专注于具体的工具。处理安全问题的一个很好的方法是遵循“深度防御”策略。这要求在每个层次使用多重安全措施来保护
    Kubernetes 和您的工作负载。此外，牢记最小特权原则，即用户和工作负载应仅具有执行其功能所需的访问权限。这些理论听起来都很好，但在实践中是什么样子呢？本章提供了一种将安全问题分层处理的方法，帮助您关注可用的解决方案和工具，以及集群安全、容器安全和代码安全。
- en: Many security best practices have been covered in detail in other chapters,
    including Chapters [4](ch04.html#configuration_secrets_and_rbac) through [11](ch11.html#policy_and_governance_for_your_cluster).
    We encourage you to review those chapters as we won’t cover those specific topics
    in the same level of detail again here but rather focus on areas we haven’t covered.
    In particular, this chapter will focus on layers; digging deeper into them, covering
    security areas, and providing best practices for each layer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多安全最佳实践在其他章节中已经详细介绍，包括第 [4](ch04.html#configuration_secrets_and_rbac) 至第 [11](ch11.html#policy_and_governance_for_your_cluster)
    章。我们鼓励您查看这些章节，因为我们在这里不会再次以相同的详细程度涵盖这些特定主题，而是专注于我们未涵盖的领域。特别是，本章将重点放在层次结构上；深入挖掘它们，涵盖安全领域，并为每个层次提供最佳实践。
- en: Cluster Security
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群安全
- en: Given that the Kubernetes control plane is exposed via a set of APIs, the first
    step in securing the cluster is to regulate and restrict who can access the cluster
    and what actions they can perform. Next, we will cover the different parts of
    the Kubernetes control plane and how to secure them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 Kubernetes 控制平面通过一组 API 开放，保护集群的第一步是规范和限制谁可以访问集群以及他们可以执行的操作。接下来，我们将介绍 Kubernetes
    控制平面的不同部分以及如何保护它们。
- en: etcd Access
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: etcd 访问
- en: The default storage system for Kubernetes is etcd. You must ensure that only
    the Kubernetes API server has access to etcd by using strong credentials that
    aren’t shared. You must also make sure that only the API servers have network
    access to etcd by using network firewalls. Having direct access to etcd bypasses
    all the subsequent security measures you have in place, so this is an incredibly
    important layer to secure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的默认存储系统是 etcd。您必须确保只有 Kubernetes API 服务器通过使用强密码来访问 etcd，并且不共享这些凭据。您还必须确保只有
    API 服务器通过使用网络防火墙才能访问 etcd。直接访问 etcd 将绕过您所采取的所有后续安全措施，因此这是一个非常重要的安全层。
- en: Authentication
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: Kubernetes provides several different authentication methods, from bearer tokens
    and certificates to OpenID Connect (OIDC) and Lightweight Directory Access Protocol
    (LDAP) integrations. It’s important to choose the right authentication model that
    suits the needs of your business. Security challenges usually appear in the creation,
    distribution, and storage of Kubeconfig files that users require to authenticate
    to Kubernetes using tools like `kubectl`. Using authentication providers allows
    the retrieval of temporary dynamic tokens rather that using static tokens or certificates
    that can be easily retrieved by a malicious actor. Papers have been written about
    instances of malicious code stored in Kubeconfig files, so it’s important to control
    their creation and distribution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供多种不同的认证方法，从 bearer token 和证书到 OpenID Connect（OIDC）和 Lightweight
    Directory Access Protocol（LDAP）集成。选择适合你业务需求的正确认证模型非常重要。安全挑战通常出现在创建、分发和存储用户需要使用
    `kubectl` 来认证 Kubernetes 的 Kubeconfig 文件过程中。使用认证提供者允许检索临时动态令牌，而不是使用容易被恶意角色获取的静态令牌或证书。有关存储在
    Kubeconfig 文件中的恶意代码实例的论文已经被撰写，因此控制它们的创建和分发非常重要。
- en: Authorization
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: We covered authorization in [Chapter 17](ch17.html#admission_control_and_authorization);
    however, in the context of Kubernetes security it’s a powerful tool to enforce
    who can perform what actions on what resources. The primary tool at your disposal
    is role-based access control (RBAC). Thankfully, Kubernetes ships with sane defaults;
    however, you will want to consider incorporating attributes such as team membership
    as well as namespaces as a way of scaling the number of RBAC resources that need
    to be created to support a growing number of workloads and users. It’s also very
    important to lock down service accounts using RBAC to confirm that workloads that
    need access to the Kubernetes API can access only the minimum actions required
    to perform their function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第17章](ch17.html#admission_control_and_authorization)中讨论了授权；然而，在 Kubernetes
    安全的上下文中，授权是一个强大的工具，用于强制执行谁可以在哪些资源上执行什么操作。你可以使用基于角色的访问控制（RBAC）作为主要工具。幸运的是，Kubernetes
    默认情况下提供了合理的默认设置；但是，你需要考虑整合团队成员身份以及命名空间，作为扩展 RBAC 资源的方法，以支持不断增长的工作负载和用户数量。使用 RBAC
    锁定服务账户也非常重要，以确保需要访问 Kubernetes API 的工作负载只能执行其功能所需的最低操作。
- en: TLS
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TLS
- en: By default, Kubernetes ships with TLS-secured API endpoints enabled. However,
    different tools and platforms may enable HTTP plaintext communications, which
    opens up an attack vector as the traffic will be unsecure. It’s important to safely
    store and control access to any certificates and keys in use by Kubernetes and
    create a plan to rotate them if they are lost or compromised. Having short lifetimes
    on certificates helps decrease the security risk.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Kubernetes 使用 TLS 加密的 API 端点。然而，不同的工具和平台可能启用了 HTTP 明文通信，这会导致安全漏洞，因为流量是不安全的。安全存储和控制访问
    Kubernetes 使用的证书和密钥是非常重要的，并创建一个计划来轮换它们，以防它们丢失或被 compromise。在证书上设置较短的生命周期有助于降低安全风险。
- en: Kubelet and Cloud Metadata Access
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubelet 和云元数据访问
- en: Kubelets are the component that run on each node and are responsible for managing
    the node and the pods that run on it. Unfortunately, Kubelet ships with unauthenticated
    API enabled. The Kubelet API is extremely powerful and hence should have authentication
    and authorization enabled. It is likely that your Kubernetes provider has taken
    care of this for you; however, you should double check if rolling your own Kubernetes
    cluster. In addition to the Kubelet API, if running on a cloud provider it’s likely
    that the node has access to a cloud metadata API that could be used to expose
    Kubernetes provisioning credentials. It’s recommended that you lock down access
    to the metadata endpoint using network policies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kubelet 是在每个节点上运行的组件，负责管理节点和运行在其上的 pod。不幸的是，Kubelet 默认启用了未经身份验证的 API。Kubelet
    API 非常强大，因此应该启用认证和授权。你的 Kubernetes 提供商可能已经为你处理了这些问题；然而，如果你自己搭建 Kubernetes 集群，应该仔细检查。除了
    Kubelet API 外，如果在云提供商上运行，节点可能有访问云元数据 API 的权限，该 API 可用于暴露 Kubernetes 的配置凭证。建议使用网络策略锁定对元数据端点的访问。
- en: Secrets
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Secrets
- en: It’s no secret that Kubernetes secrets are not encrypted by default. This means
    that malicious actors may be able to read these secrets at rest from other vectors.
    Thankfully, there are several different solutions to help with this. The Kubernetes
    API server provides the ability to configure an encryption provider that is used
    in partnership with a configuration file to encrypt specific Kubernetes resources
    prior to storage in etcd. Encryption providers are typically cloud secret storage
    services. The only challenge with the current encryption provider implementation
    is that there is no way to encrypt everything, and the configuration is cumbersome
    and error prone. Another solution that the Kubernetes community has built is [csi
    secret store](https://oreil.ly/cbiYT), which enables secrets to be mounted directly
    into pods via a temporary RAMDISK filesystem. Using `csi-secret-store` enables
    you to bypass the need to use Kubernetes secrets and instead directly access them
    from another trusted secret store.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes秘密默认情况下未加密并非秘密。这意味着恶意行为者可以通过其他途径在静止状态下读取这些秘密。幸运的是，有几种不同的解决方案可以帮助解决这个问题。Kubernetes
    API服务器提供配置加密提供程序的能力，该提供程序与配置文件合作，用于在存储在etcd之前加密特定的Kubernetes资源。加密提供程序通常是云秘密存储服务。当前加密提供程序实现的唯一挑战是没有办法加密所有内容，且配置繁琐且容易出错。Kubernetes社区构建的另一个解决方案是[csi
    secret store](https://oreil.ly/cbiYT)，它允许将秘密直接挂载到通过临时RAMDISK文件系统的Pod中。使用`csi-secret-store`使您可以绕过使用Kubernetes秘密，而是直接从其他受信任的秘密存储中访问它们。
- en: Logging and Auditing
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录和审计
- en: Kubernetes ships with rich logging configured out of the box. In addition, it’s
    important to also enable audit logging on the API server, which will enable a
    chronological log of all security-specific events and is configurable via an audit
    policy. Enabling auditing is only part of the solution; you also must make sure
    that the audit logs are shipped to a point of aggregation and configure triggers
    that, if detected, fire an alert to the security team that a suspicious event
    has occurred.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes默认配置了丰富的日志记录。此外，还重要的是在API服务器上启用审计日志记录，这将记录所有安全事件的时间顺序日志，并可以通过审计策略进行配置。启用审计只是解决方案的一部分；您还必须确保将审计日志发送到聚合点，并配置触发器，一旦检测到异常事件，即向安全团队发出警报。
- en: Cluster Security Posture Tooling
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群安全姿态工具
- en: Getting Kubernetes security implemented can be challenging. The great news is
    that there are open source tools that can scan your Kubernetes clusters, detect
    security risks, and flag common misconfigurations. Additionally, they can scan
    all the resources on a cluster and provide best practices. Tools like [Kubescape](https://oreil.ly/qPoHQ)
    are quick to run and provide outputs based on severity. It’s recommended that
    you run these tools periodically on all clusters to determine the security posture
    of your cluster and the resources deployed to it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实施Kubernetes安全可能具有挑战性。好消息是，有开源工具可以扫描您的Kubernetes集群，检测安全风险，并标记常见的配置错误。此外，它们可以扫描集群上的所有资源并提供最佳实践。像[Kubescape](https://oreil.ly/qPoHQ)这样的工具运行快速，并根据严重性提供输出。建议定期在所有集群上运行这些工具，以确定集群及其部署资源的安全姿态。
- en: Cluster Security Best Practices
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群安全最佳实践
- en: 'Now that we’ve covered the biggest security areas at the cluster layer, here
    is a handy list of security best practices for you to check off:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了集群层面的最大安全领域，这里有一个方便的安全最佳实践清单供您参考：
- en: Lock down etcd access and store access credentials and certificates in secure
    locations.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制etcd访问并将访问凭据和证书存储在安全位置。
- en: Disable insecure and unauthenticated API endpoints.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用不安全和未经身份验证的API端点。
- en: Use authentication providers that provide temporary dynamic tokens rather than
    static configured tokens in Kubeconfig.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提供临时动态令牌而不是静态配置令牌的身份验证提供者在Kubeconfig中进行配置。
- en: Ensure users and services follow least privilege.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用户和服务遵循最小权限原则。
- en: Rotate infrastructure credentials regularly.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期轮换基础设施凭据。
- en: Encrypt sensitive data at rest and in transit using keys and certificates.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用密钥和证书对静止和传输中的敏感数据进行加密。
- en: Scan container images for vulnerabilities and malware before deploying them
    to the cluster.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署到集群之前，扫描容器镜像以检测漏洞和恶意软件。
- en: Enable audit logging and monitoring to detect and respond to suspicious activities.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用审计日志记录和监控以检测和响应可疑活动。
- en: Use security scanning tools such as Kubescape to baseline the security posture
    of your Kubernetes cluster and workloads.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全扫描工具如 Kubescape 来基准您的 Kubernetes 集群和工作负载的安全姿态。
- en: Workload Container Security
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作负载容器安全性
- en: Now that we’ve covered the core components of cluster security we’ll look at
    the security mechanisms at the workload layer. Kubernetes offers many security-focused
    APIs, which makes configuration simple via the same tooling that you use to deploy
    your workloads.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了集群安全的核心组件，我们将看看工作负载层面的安全机制。Kubernetes 提供了许多专注于安全的 API，通过相同的工具可以简化配置和部署工作负载。
- en: Pod Security Admission
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod 安全准入
- en: Pod Security Admission is a critical piece of your workload security story that
    allows you to configure and manage all the security-sensitive components of your
    pod configuration and apply out-of-the-box best practices either to a namespace
    or at the cluster level. [Chapter 10](ch10.html#pod_and_container_security) is
    dedicated to container and pod security, and we encourage you to review it for
    further detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全准入是您工作负载安全性的重要组成部分，允许您配置和管理 pod 配置中所有安全敏感组件，并在命名空间或集群级别应用开箱即用的最佳实践。专门有关容器和
    pod 安全的详细内容，请查阅[第10章](ch10.html#pod_and_container_security)。
- en: Seccomp, AppArmor, and SELinux
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Seccomp、AppArmor 和 SELinux
- en: Linux offers several different security mechanisms that can be utilized in concert
    with Kubernetes to increase the security posture of your workloads running on
    Kubernetes. Seccomp allows the creation of syscall filtering profiles that can
    be used to restrict syscalls coming from a container. Unfortunately, Seccomp profiles
    aren’t talked about enough in the Kubernetes community and have not been configured
    at all or are misconfigured, allowing containers access to syscalls that could
    be used for malicious purposes. The Kubernetes community has created a great tool
    called the [security profile operator](https://oreil.ly/g0tNJ) that simplifies
    the management overhead in the configuration of Seccomp profiles. Seccomp is low-hanging
    fruit to configure from a security perspective, so you are strongly encouraged
    to enable the Seccomp default profile at a minimum.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 提供了几种不同的安全机制，可以与 Kubernetes 结合使用，增强运行在 Kubernetes 上的工作负载的安全性。Seccomp 允许创建系统调用过滤配置文件，用于限制容器发出的系统调用。不幸的是，Kubernetes
    社区对 Seccomp 配置的讨论不足，或者根本没有进行配置，或者配置错误，允许容器访问可能用于恶意目的的系统调用。Kubernetes 社区开发了一个称为[安全配置操作器](https://oreil.ly/g0tNJ)的优秀工具，简化了配置
    Seccomp 配置文件的管理开销。从安全角度来看，Seccomp 是一个低成本的配置项，强烈建议您至少启用 Seccomp 的默认配置文件。
- en: AppArmor and SELinux are Linux kernel security modules that allow the granular
    configuration of per-container mandatory access control. These allow a cluster
    administrator fine-grained control over what action a container can perform. Using
    both Pod Security Admission and these Linux security mechanisms, you can control
    the level of access a container should have to the operating system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor 和 SELinux 是 Linux 内核安全模块，允许对每个容器进行精细化的强制访问控制配置。这些模块允许集群管理员对容器的操作权限进行细粒度控制。结合
    Pod 安全准入和这些 Linux 安全机制，您可以控制容器对操作系统的访问级别。
- en: Admission Controllers
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准入控制器
- en: Admission controllers are a critical piece in securing your workloads. Kubernetes
    ships with a set of integrated admission controllers, and all security-related
    admission controllers are enabled by default. For example, the NodeRestriction
    admission controller restricts Kubelet’s permissions to only be able to modify
    pods assigned to that specific node. Admission controllers are a big topic, and
    we suggest you look at [Chapter 17](ch17.html#admission_control_and_authorization)
    for more details.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 准入控制器是确保工作负载安全的关键部分。Kubernetes 提供了一组集成的准入控制器，并且所有与安全相关的准入控制器都默认启用。例如，NodeRestriction
    准入控制器限制了 Kubelet 只能修改分配给特定节点的 pod 的权限。准入控制器是一个重要主题，建议您查看[第17章](ch17.html#admission_control_and_authorization)获取更多详细信息。
- en: Operators
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作器
- en: Operators are controllers that use the Kubernetes APIs to provide custom resources
    to support specific workloads that require application-specific knowledge. If
    you would like to learn more about the Operator pattern, refer to [Chapter 21](ch21.html#implementing_an_operator)
    where we cover how to implement an operator in detail. In the context of security,
    unfortunately, many operators ship with very permissive RBAC configuration, for
    ease of use. Many grant cluster-admin or equivalent privileges, which may serve
    as an attack vector. Additionally, though less common, these operators may expose
    other APIs directly, which could provide a pathway to privilege escalation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符是使用 Kubernetes API 提供自定义资源来支持特定工作负载的控制器，这些工作负载需要应用程序特定的知识。如果您想了解更多关于运算符模式的信息，请参考[第21章](ch21.html#implementing_an_operator)，我们在其中详细介绍了如何实现运算符。在安全的背景下，不幸的是，许多运算符具有非常宽松的RBAC配置，以便于使用。许多运算符授予集群管理员或等效权限，这可能作为攻击向量。此外，尽管较少见，这些运算符可能直接暴露其他API，这可能提供特权升级的路径。
- en: Network Policy
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络策略
- en: Kubernetes ships with a network policy resource; however, you need to double
    check that your networking provider implements the resource at runtime. For more
    details on network security, refer to [Chapter 9](ch09.html#networking_network_security_and_service_mesh).
    Kubernetes network policy provides fine-grained control over what network traffic
    is allowed to enter or exit a service or namespace for resources both internal
    and external to your cluster. Network policy also allows cluster administrators
    to create cluster-wide or namespace-specific policies and delegate application-specific
    network policy to application developers. Network policy covers only IP addresses
    and TCP/UDP ports and not specific HTTP traffic or endpoint routing access control.
    If you require application-specific access policies, service meshes include higher-level
    access policies that aren’t part of the integrated APIs of Kubernetes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了网络策略资源；但是，您需要确保您的网络提供商在运行时实现了该资源。有关网络安全的更多详细信息，请参考[第9章](ch09.html#networking_network_security_and_service_mesh)。Kubernetes
    网络策略可以对允许进入或退出服务或命名空间的网络流量进行细粒度控制，适用于集群内外的资源。网络策略还允许集群管理员创建集群范围或命名空间特定的策略，并将应用程序特定的网络策略委托给应用程序开发人员。网络策略仅涵盖IP地址和TCP/UDP端口，而不涉及特定的HTTP流量或端点路由访问控制。如果您需要应用程序特定的访问策略，服务网格提供了高级别的访问策略，这些策略不是
    Kubernetes 集成API的一部分。
- en: Runtime Security
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时安全
- en: Most Kubernetes clusters utilize container runtimes such as [containerd](https://oreil.ly/Vyq_N)
    or [CRI-O](https://oreil.ly/OiXpP) by default, which leverage Linux cgroups under
    the hood to provide a lightweight sandbox for the container runtime. For some
    security-sensitive workloads, these security guarantees may not be sufficient.
    There is an ecosystem of different container runtimes, including [Kata containers](https://oreil.ly/ANDje)
    and [gvisor](https://oreil.ly/fuNPn), that provide different security profiles
    to suit the needs of the workload. Kubernetes supports the use of multiple container
    runtimes on the same cluster using the `RuntimeClass` field in the pod specification.
    Please refer to [Chapter 10](ch10.html#pod_and_container_security) for more detail
    on `RuntimeClass`. If you still require a higher level of security then [Confidential
    Containers](https://oreil.ly/v66K0) may also be something to consider. Confidential
    Containers leverage [trusted execution environments](https://oreil.ly/eSJfX),
    which are secure areas on the CPU to run the workload.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Kubernetes 集群默认使用诸如[containerd](https://oreil.ly/Vyq_N)或[CRI-O](https://oreil.ly/OiXpP)等容器运行时，它们在底层使用
    Linux cgroups 提供轻量级沙箱以支持容器运行时。对于一些安全敏感的工作负载，这些安全保证可能不足够。存在一系列不同的容器运行时，包括[Kata
    containers](https://oreil.ly/ANDje)和[gvisor](https://oreil.ly/fuNPn)，它们提供不同的安全配置以满足工作负载的需求。Kubernetes
    支持在同一集群中使用多个容器运行时，使用 pod 规范中的 `RuntimeClass` 字段。请参考[第10章](ch10.html#pod_and_container_security)以获取有关
    `RuntimeClass` 的更多详细信息。如果您仍然需要更高级别的安全性，则[机密容器](https://oreil.ly/v66K0)可能也是需要考虑的选项。机密容器利用[受信执行环境](https://oreil.ly/eSJfX)，这是在CPU上运行工作负载的安全区域。
- en: Like audit logs at the Kubernetes control plane, you should also invest in audit
    logging inside the container runtime. Tooling like [Falco](https://oreil.ly/9KOeg)
    provides a way to enable audit logging and policy on what the application can
    do inside the container runtime. Having visibility into the container runtime
    allows you to monitor and catch malicious behavior as close to the source as possible.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 类似 Kubernetes 控制平面上的审计日志，您还应该投资于容器运行时内部的审计日志记录。像 [Falco](https://oreil.ly/9KOeg)
    这样的工具提供了一种启用容器运行时内应用程序可以执行的审计日志记录和策略的方式。了解容器运行时的情况使您能够尽可能接近源头地监视和捕获恶意行为。
- en: Workload Container Security Best Practices
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作负载容器安全最佳实践
- en: 'Kubernetes provides a rich set of security tooling for you to use that can
    almost be overwhelming to grok. Here is a shortlist of best practices you can
    focus on to quickly improve the security posture of the workloads running on your
    cluster:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 为您提供了丰富的安全工具集，可以帮助您几乎无法理解。这里是一些快速提高集群上运行负载安全姿态的最佳实践的简短列表：
- en: Use the Node and RBAC authorizers together, in combination with the NodeRestriction
    admission plug-in.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node 和 RBAC 授权器以及 NodeRestriction 准入插件的组合。
- en: Secure the cluster control plane with strong authentication and authorization
    mechanisms.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用强身份验证和授权机制保护集群控制平面。
- en: Review operator API permissions and make sure that they follow least privilege.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查操作员 API 权限，并确保它们遵循最小特权原则。
- en: Apply the principle of least privilege to limit the access and permissions of
    users, pods, and service accounts.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用最小特权原则来限制用户、pod 和服务账号的访问和权限。
- en: Implement network policies to restrict the traffic between pods and namespaces.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施网络策略来限制 pod 和命名空间之间的流量。
- en: Ensure the recommended set of security-based admission controllers are enabled.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保启用推荐的基于安全的准入控制器集。
- en: Use Seccomp, AppArmor, and SELinux to minimize the Linux kernel attack surface
    area the container runtime has access to.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Seccomp、AppArmor 和 SELinux 来减少容器运行时能够访问的 Linux 内核攻击面。
- en: Ensure dynamic webhook admission controllers are securely configured, scoped
    to only the resources they need to validate/mutate, and follow least privilege
    RBAC.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保动态 Webhook 准入控制器的安全配置，仅限于它们需要验证/变更的资源，并遵循最小特权 RBAC。
- en: Provide different container runtime sandboxes on your cluster and use `RuntimeClass`
    to allow application developers to select the runtime to match the security requirements.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的集群上提供不同的容器运行时沙盒，并使用 `RuntimeClass` 允许应用程序开发人员选择与安全要求匹配的运行时。
- en: Use admission controllers to validate security best practices on application
    workloads.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用准入控制器验证应用程序工作负载的安全最佳实践。
- en: Code Security
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码安全性
- en: Good security starts before the code even reaches Kubernetes. We’ll cover some
    different tools and techniques that you can introduce to further improve your
    security posture.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的安全性在代码进入 Kubernetes 之前就开始了。我们将介绍一些不同的工具和技术，您可以引入来进一步改善安全姿态。
- en: Non-Root and Distroless Containers
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非根和无分发容器
- en: There are two quick wins when it comes to building containers with an improved
    security posture. Configure the application process to not run as the root user
    by specifying a non-root user as part of the container build file. Kubernetes
    allows for this also to be set as part of the `securityContext` section of the
    pod specification via the `runAsUser`. This can be used as a fail-safe; however,
    configuring it in the container build file is preferred. Additionally, many base
    containers provide commonly used packages preinstalled in the container. These
    packages may not be used and can introduce vulnerabilities. Tools like [distroless](https://oreil.ly/tpSEA)
    and scratch containers provide the smallest possible base container image, which
    again decreases the attack surface area.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建容器时有两个快速的胜利点可以提高安全姿态。通过在容器构建文件中指定非根用户来配置应用程序进程不以 root 用户身份运行。Kubernetes 允许在
    pod 规范的 `securityContext` 部分设置此项。这可用作故障安全机制；但优先考虑在容器构建文件中配置。此外，许多基础容器预安装了常用软件包，这些软件包可能未被使用并可能引入漏洞。像
    [distroless](https://oreil.ly/tpSEA) 和 scratch 容器提供了可能的最小基础容器映像，再次减少了攻击面。
- en: Container Vulnerability Scanning
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器漏洞扫描
- en: Many open source tools provide vulnerability scanning of container images. These
    tools, like [Trivy](https://oreil.ly/pFbNN), are easy to use and can provide a
    baseline of the vulnerabilities in a container image. You can then decide whether
    or not to deploy the container based on these results. However, these tools can
    be very noisy and provide inconsistent results. Many container repository providers
    offer integrated vulnerability scanning, and some admission controllers will either
    admit or deny a workload being deployed based on the vulnerabilities present in
    the image.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开源工具提供容器镜像的漏洞扫描。这些工具，如[Trivy](https://oreil.ly/pFbNN)，易于使用，并可以提供容器镜像中漏洞的基线。然后根据这些结果决定是否部署容器。然而，这些工具可能会产生很多噪音并提供不一致的结果。许多容器仓库提供商提供集成的漏洞扫描，某些准入控制器会根据镜像中存在的漏洞来允许或拒绝工作负载的部署。
- en: Code Repository Security
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码仓库安全
- en: Source code repositories are another great place to improve security, and thankfully
    there is tooling and guidance to help improve the security posture at this layer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码仓库是改善安全性的另一个良好场所，幸运的是有工具和指导可帮助改善此层的安全姿态。
- en: '[Supply-Chain Levels for Software Artifacts](https://oreil.ly/CWXWD), or SLSA,
    is a framework that provides a checklist of controls based on incremental levels
    that you can adopt to help improve software security and integrity. Many open
    source projects are adopting SLSA in an effort to improve software security. The
    levels are well-defined and when implemented raise the security posture of your
    source code.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[软件工件的供应链级别](https://oreil.ly/CWXWD)，或 SLSA，是一个基于递增级别的控制清单框架，可帮助提高软件安全性和完整性。许多开源项目正在采纳
    SLSA 以改善软件安全性。这些级别定义明确，实施后可以提升源代码的安全姿态。'
- en: '[OpenSSF Scorecard](https://oreil.ly/q-NI3) gives an automated set of tools
    that provide a 0–10 score on the security posture of an open source repository
    that you might be using or considering to use as a dependency. The aggregate score
    provides an at-a-glance view that can be used to evaluate how trustworthy an open
    source project is. Many prominent open source projects are adopting this scorecard.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[OpenSSF 评分卡](https://oreil.ly/q-NI3) 提供一组自动化工具，为您可能使用或考虑作为依赖项的开源仓库提供安全姿态的
    0 到 10 分评分。综合评分提供了一目了然的视图，可用于评估开源项目的信任度。许多知名开源项目正在采用此评分卡。'
- en: Code Security Best Practices
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码安全最佳实践
- en: 'Good security starts well before a container is deployed to a Kubernetes cluster.
    The code repository is a great place to also implement security measures to build
    your in-depth security strategy. Here are some best practices to help guide you
    to some quick wins on your code security front:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的安全性始于容器部署到 Kubernetes 集群之前。代码仓库也是实施安全措施来构建深入安全策略的好地方。以下是一些最佳实践，可帮助您在代码安全性前线上快速取得成功：
- en: Review operator API permissions and make sure that they follow least privilege.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查操作者 API 权限，并确保其遵循最小权限原则。
- en: Configure the container build file to run application processes as a non-root
    user.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置容器构建文件以非根用户身份运行应用程序进程。
- en: Use container base images like scratch and distroless.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用像 scratch 和 distroless 这样的容器基础镜像。
- en: Perform vulnerability scanning on your containers, and implement policy on whether
    to allow a container to be deployed based on these vulnerabilities.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对容器进行漏洞扫描，并根据这些漏洞实施策略，决定是否允许部署容器。
- en: Review OpenSSF scorecards on open source projects that you depend on.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看您依赖的开源项目的 OpenSSF 评分卡。
- en: Implement SLSA level 1 to provide baseline-level transparency and integrity
    for your software.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施 SLSA Level 1 以为您的软件提供基线级别的透明度和完整性。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: We’ve covered a lot of ground in this chapter. It’s important to understand
    the full breadth of what it takes to secure Kubernetes so that you can start to
    break down the problem into smaller pieces that you can implement. Security is
    a journey and not a destination. It will always be a moving target, and by following
    these best practices, you can improve the security posture of your Kubernetes
    cluster and reduce the risk of data breaches or compromises.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们覆盖了大量内容。理解如何全面保护 Kubernetes 是非常重要的，这样你可以将问题分解成更小的部分来实施。安全是一个旅程而不是一个目的地。它将一直是一个动态的目标，通过遵循这些最佳实践，您可以提高
    Kubernetes 集群的安全性并减少数据泄露或妥协的风险。
