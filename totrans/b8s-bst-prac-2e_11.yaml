- en: Chapter 11\. Policy and Governance for Your Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。你的集群的政策与治理
- en: Have you ever wondered how you might ensure that all containers running on a
    cluster come only from an approved container registry? Or maybe you’ve been asked
    by the security team to enforce a policy that services are never exposed to the
    internet. These are precisely the challenges that policy and governance for your
    cluster set out to address. As Kubernetes continues to mature and becomes adopted
    by more enterprises, the question of how to apply policy and governance to Kubernetes
    resources is increasing in frequency. In this chapter we share what you can do
    and the tools to use to make sure that your cluster is in compliance with the
    defined policies, whether you work at a startup or an enterprise.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾想过如何确保集群上运行的所有容器仅来自已批准的容器注册表？或者，也许安全团队要求你强制执行一项政策，即服务永远不暴露在互联网上。这些正是集群政策与治理旨在解决的挑战。随着
    Kubernetes 的成熟和越来越多企业的采用，如何将政策与治理应用于 Kubernetes 资源的问题日益频繁。在本章中，我们分享了你可以采取的方法和工具，以确保你的集群符合定义的政策，无论你是在初创企业还是大企业工作。
- en: Why Policy and Governance Are Important
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么政策与治理至关重要
- en: Whether you operate in a highly regulated environment—for example, health care
    or financial services—or you simply want to make sure that you maintain a level
    of control over what’s running on your clusters, you’re going to need a way to
    implement the company-specific policies. Once your policy is defined, you will
    need to determine how to implement it and maintain clusters that are compliant
    to these policies. These policies may be required to meet regulatory compliance
    or simply to enforce best practices. Whatever the reason, you must be sure that
    you do not sacrifice developer agility and self-service when implementing these
    policies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是在高度受管制的环境中操作（例如医疗或金融服务），还是仅仅想确保你对集群上运行的内容保持控制，你都需要一种实施公司特定政策的方法。一旦定义了你的政策，你就需要确定如何实施它，并维护符合这些政策的集群。这些政策可能需要符合法规合规性，或者仅仅是强制执行最佳实践。无论原因如何，你必须确保在实施这些政策时不牺牲开发者的灵活性和自助服务。
- en: How Is This Policy Different?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这项政策有何不同？
- en: In Kubernetes, policy is everywhere. Whether it be network policy or pod security,
    we’ve all come to understand what policy is and when to use it. We trust that
    whatever is declared in Kubernetes resource specifications is implemented as per
    the policy definition. Both network policy and pod security are implemented at
    runtime. However, what policy restricts the field values in these Kubernetes resource
    specifications? That’s the job of policy and governance. Rather than implementing
    policy at runtime, when we talk about policy in the context of governance, what
    we mean (or at least what we are trying to achieve) is the ability to limit the
    way fields are configured in Kubernetes resources. Only Kubernetes resource specifications
    that are compliant when evaluated by policies are allowed and committed to the
    cluster state.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，政策无处不在。无论是网络策略还是 Pod 安全，我们都明白何时以及如何使用政策。我们相信 Kubernetes 资源规范中声明的任何内容都会按照政策定义进行实施。网络策略和
    Pod 安全都是在运行时实施的。然而，政策限制 Kubernetes 资源规范中的字段值。这是政策与治理的工作。与在运行时实施政策不同，当我们在治理的背景下谈论政策时，我们的意思（或者至少我们试图达到的目标）是限制在
    Kubernetes 资源中配置字段的方式。只有在通过政策评估时符合的 Kubernetes 资源规范才允许提交到集群状态。
- en: Cloud Native Policy Engine
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生政策引擎
- en: To be able to evaluate which resources are compliant, we need a policy engine
    that is flexible enough to meet a variety of needs. [The Open Policy Agent (OPA)](https://oreil.ly/xzN2p)
    is an open source, flexible, lightweight policy engine that has become increasingly
    popular in the cloud native ecosystem. Having OPA in the ecosystem has allowed
    many implementations of different Kubernetes governance tools to appear. One such
    Kubernetes policy and governance project the community is rallying around is called
    [Gatekeeper](https://oreil.ly/RvKUw). For the rest of this chapter, we use Gatekeeper
    as the canonical example to illustrate how you might achieve policy and governance
    for your cluster. Although there are other implementations of policy and governance
    tools in the ecosystem, they all seek to provide the same user experience (UX)
    by allowing only compliant Kubernetes resource specifications to be committed
    to the cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Gatekeeper
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gatekeeper is an open source, customizable Kubernetes admission webhook for
    cluster policy and governance. Gatekeeper takes advantage of the OPA constraint
    framework to enforce custom resource definition (CRD)-based policies. Using CRDs
    allows for an integrated Kubernetes experience that decouples policy authoring
    from implementation. Policy templates are referred to as *constraint templates*,
    which can be shared and reused across clusters. Gatekeeper enables resource validation
    and audit functionality. One of the great things about Gatekeeper is that it’s
    portable, which means that you can implement it on any Kubernetes clusters, and
    if you are already using OPA, you might be able to port that policy over to Gatekeeper.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Gatekeeper is a production-ready open source project. For the latest stable
    version, please visit the official [upstream repository](https://oreil.ly/Rk8dc).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Example Policies
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before diving into how to configure Gatekeeper, it’s important to keep the
    problem we are trying to solve in focus. While every organization/team will need
    to optimize their policies for their needs, some fairly universal policies serve
    as best practices. Let’s look at some policies that solve the most common compliance
    issues for context:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Services must not be exposed publicly on the internet.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow containers only from trusted container registries.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All containers must have resource limits.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ingress hostnames must not overlap.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ingresses must use only HTTPS.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gatekeeper Terminology
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Gatekeeper has adopted much of the same terminology as OPA. It’s important
    that we cover that terminology so you can understand how Gatekeeper operates.
    Gatekeeper uses the OPA constraint framework, which introduces three new terms:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Constraint
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rego
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constraint template
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constraint
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The best way to think about constraints is as restrictions that you apply to
    specific fields and values of Kubernetes resource specifications. This is really
    just a long way of saying policy. When constraints are defined, you are effectively
    stating that you *DO NOT* want to allow this. The implications of this approach
    mean that resources are implicitly allowed without a constraint that issues a
    deny. This is an important nuance because rather then allowing the Kubernetes
    resources specification fields and values you want, you are denying only the ones
    you *DO NOT* want. This architectural decision suits Kubernetes resource specifications
    nicely because they are ever changing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Rego
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rego is an OPA-native query language. Rego queries are assertions on the data
    stored in OPA. Gatekeeper stores rego in the constraint template.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Constraint template
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Think of this as a policy template. It’s portable and reusable. Constraint templates
    consist of typed parameters and the target rego that is parameterized for reuse.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Defining Constraint Templates
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Constraint templates are a [custom resource definition](https://oreil.ly/LQSAH)
    (CRD) that provide a means of templating policy so that it can be shared or reused.
    In addition, parameters for the policy can be validated. Let’s look at a constraint
    template, from the upstream [Gatekeeper policy library](https://oreil.ly/HksnE),
    in the context of the earlier examples. In the following example, we share a constraint
    template that provides the policy “Only allow containers from trusted container
    registries”:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The constraint template consists of three main components:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes-required CRD metadata
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The name is the most important part. It’s best practice to make it descriptive
    enough to easily identify the purpose of the policy. We reference this later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Schema for input parameters
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Indicated by the validation field, this section defines the input parameters
    and their associated types. In this example, we have a single parameter called
    `repos` that is an array of strings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Policy definition
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Indicated by the `target` field, this section contains templated rego (the language
    to define policy in OPA). Using a constraint template allows the templated rego
    to be reused and means that generic policy can be shared. If the rule matches,
    the constraint is violated.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Defining Constraints
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the previous constraint template, we must create a constraint resource.
    The purpose of the constraint resource is to provide the necessary parameters
    to the constraint template that we created earlier. You can see that the `kind`
    of the resource defined in the following example is `K8sAllowedRepos`, which maps
    to the constraint template defined in the previous section:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The constraint consists of two main sections:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes metadata
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this constraint is of `kind K8sAllowedRepos`, which matches the
    name of the constraint template.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The spec
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The `match` field defines the scope of intent for the policy. In this example,
    we are matching pods only in the production namespace.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: The parameters define the intent for the policy. Notice that they match the
    type from the constraint template schema from the previous section. In this case,
    we allow only container images that start with `openpolicyagent/`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Constraints have the following operational characteristics:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Logical AND
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When multiple policies validate the same field, if one violates then the whole
    request is rejected
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Schema validation that allows early error detection
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selection criteria
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can use label selectors
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Constrain only certain kinds
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Constrain only in certain namespaces
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Replication
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, you might want to compare the current resource against other
    resources that are in the cluster, for example, in the case of “Ingress hostnames
    must not overlap.” OPA needs to have all the other Ingress resources in its cache
    in order to evaluate the rule. Gatekeeper uses a `config` resource to manage which
    data is cached in OPA in order to perform evaluations such as the one previously
    mentioned. In addition, `config` resources are also used in the audit functionality,
    which we explore a bit later on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example `config` resource caches v1 service, pods, and namespaces:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: UX
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gatekeeper enables real-time feedback to cluster users for resources that violate
    defined policy. If we consider the example from the previous sections, we allow
    containers only from repositories that start with `openpolicyagent/`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try to create the following resource; it is not compliant given the current
    policy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This gives you the violation message that’s defined in the constraint template:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using Enforcement Action and Audit
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thus far, we have discussed only how to define policy and have it enforced as
    part of the request admission process. Constraints include the ability to configure
    an `enforcementAction`, which by default is set to `deny`. In addition to `deny`,
    `enforcementAction` also allows accepted values of `warn` and `dryrun`. When we
    think about rolling out policy, it’s not always the case that you are applying
    to a cluster or namespace without resources already deployed. It’s therefore important
    to understand how to deploy policy to a cluster that already has resources deployed
    with the confidence that you can identify and remediate policy violations without
    necessarily breaking deployed workloads. The `enforcementAction` field allows
    you to define the behavior. When set to `deny`, a resource that violates policy
    will not be created and an error message will both be audit logged and sent back
    to the user. If set to `warn`, the resource will be created; however, a warning
    message will be audit logged and sent back to the user. Finally, if `dryrun` is
    set, the resource will be created and resources that violate the policy will be
    available in the audit log.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Whatever `enforcementAction` you decide to use, Gatekeeper will periodically
    evaluate resources against any configured policy and provide an audit log. This
    helps with the detection of misconfigured resources according to policy and allows
    for remediation. The audit results are stored in the status field of the constraint,
    making them easy to find by simply using `kubectl`. To use audit, the resources
    to be audited must be replicated. For more details, refer to [“Data Replication”](#data_replication).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the constraint called `prod-repo-is-openpolicyagent` that you
    defined in the previous section. In this case, imagine we already had a pod called
    nginx running in the production namespace and we would like to check its compliance
    to the policy using audit:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Upon inspection, you can see the last time the audit ran in the `auditTimestamp`
    field. We also see all the resources that violate this constraint, only the nginx
    pod in this case, under the `violations` along with the `enforcementAction`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Mutation
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to resource validation, Gatekeeper also allows you to configure
    mutation policies. Mutation policies allow you to modify Kubernetes resources
    at admission time. Generally, mutating resources at admission time is not considered
    best practice. Having resources “magically” modified by Gatekeeper is a cloud
    native antipattern as this is counter to the declarative nature of Kubernetes.
    Mutation policies are simply mentioned here to provide guidance to avoid them
    unless you feel your use case absolutely requires them and that you have exhausted
    other best practices. Refer to [Chapter 18](ch18.html#gitops) for more details
    on how to implement declarative best practices for Kubernetes resources.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Testing Policies
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the GitOps philosophy has become widely adopted, testing policy and evaluation
    as part of local testing or CI/CD pipelines has become a must have. Gatekeeper
    ships with a `gator` CLI that enables you to take the constraint templates and
    constraints and run a local evaluation. This is a great tool for building new
    policies, testing them against your resources, and remediating any issues prior
    to deploying them to your production clusters. The [Gatekeeper documentation](https://oreil.ly/Qj4p8)
    provides a practical guide to using the `gator` CLI to test policy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Becoming Familiar with Gatekeeper
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’d like to explore Gatekeeper further, the repository ships with fantastic
    demonstration content that walks you through a detailed example of building policies
    to meet compliance for a bank. We would strongly recommend walking through the
    demonstration for a hands-on approach to how Gatekeeper operates. You can find
    the demonstration in [this Git repository](https://oreil.ly/GcR3i). Gatekeeper
    also maintains a [public library](https://oreil.ly/e8ESD) of policies that you
    can apply to your cluster with easy installation guidance via [ArtifactHub](https://oreil.ly/uEcfn).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Policy and Governance Best Practices
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should consider the following best practices when implementing policy and
    governance on your clusters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: If you want to enforce a specific field in a pod, you need to determine which
    Kubernetes resource specification you want to inspect and enforce. Let’s consider
    the case of Deployments, for example. Deployments manage ReplicaSets, which manage
    pods. We could enforce at all three levels, but the best choice is the one that
    is the lowest handoff point before the runtime, which in this case is the pod.
    This decision, however, has implications. The user-friendly error message when
    we try to deploy a noncompliant pod, as seen in [“UX”](#user_x), is not going
    to be displayed. This is because the user is not creating the noncompliant resource,
    the ReplicaSet is. This experience means that the user would need to determine
    that the resource is not compliant by running a `kubectl describe` on the current
    ReplicaSet associated with the Deployment. Although this might seem cumbersome,
    this is consistent behavior with other Kubernetes features, such as pod security.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constraints can be applied to Kubernetes resources on the following criteria:
    kinds, namespaces, and label selectors. We would strongly recommend scoping the
    constraint to the resources to which you want it to be applied as tightly as possible.
    This ensures consistent policy behavior as the resources on the cluster grow,
    and means that resources that don’t need to be evaluated aren’t being passed to
    OPA, which can result in other inefficiencies.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On clusters with resources that are already deployed, utilize `warn` and `dryrun`
    along with audit to remediate resources that violate policy before setting the
    `enforcementAction` to `deny`.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t use mutation policies; instead consider other declarative approaches,
    including GitOps.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronizing and enforcing on potentially sensitive data such as Kubernetes
    secrets is *not* recommended. Given that OPA will hold this in its cache (if it
    is configured to replicate that data) and resources will be passed to Gatekeeper,
    it leaves surface area for a potential attack vector.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have many constraints defined, a deny of constraint means that the entire
    request is denied. There is no way to make this function as a logical OR.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered why policy and governance are important and walked
    through a project that’s built upon OPA, a cloud native ecosystem policy engine,
    to provide a Kubernetes-native approach to policy and governance. You should now
    be prepared and confident the next time the security teams asks, “Are our clusters
    in compliance with our defined policy?”
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
