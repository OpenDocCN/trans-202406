["```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: viewers\n  namespace: app1\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: view\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: app1-viewer\n```", "```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: cpu-mem\n  namespace: app1\nspec:\n  hard:\n    requests.cpu: \"1\"\n    requests.memory: 512Mi\n    limits.cpu: \"1\"\n    limits.memory: 512Mi\n```", "```\n$ kubectl describe resourcequota cpu-mem\nName:            cpu-mem\nNamespace:       app1\nResource         Used   Hard\n--------         ----   ----\nlimits.cpu       500m   1\nlimits.memory    512Mi  512Mi\nrequests.cpu     500m   1\nrequests.memory  512Mi  512Mi\n```", "```\n$ kubectl apply -f my-app.yaml\nError from server (Forbidden):\n  error when creating \"my-app.yaml\": pods \"my-app\" is forbidden:\n    exceeded quota: cpu-mem,\n      requested: limits.cpu=2,limits.memory=2Gi,\n                 requests.cpu=2,requests.memory=2Gi,\n      used: limits.cpu=0,limits.memory=0,\n                 requests.cpu=0,requests.memory=0,\n      limited: limits.cpu=1,limits.memory=512Mi,\n                 requests.cpu=1,requests.memory=512Mi\n```", "```\n$ kubectl describe pod memory\nName:         memory\nNamespace:    default\nPriority:     0\n... <snip> ...\nContainers:\n  stress:\n    ... <snip> ...\n    Last State:     Terminated\n      Reason:       OOMKilled\n      Exit Code:    1\n      Started:      Fri, 23 Oct 2020 10:11:51 -0400\n      Finished:     Fri, 23 Oct 2020 10:11:56 -0400\n    Ready:          True\n    Restart Count:  1\n    Limits:\n      memory:  100Mi\n    Requests:\n      memory:     100Mi\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: tenant-a\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n```", "```\napiVersion: projectcalico.org/v3\nkind: GlobalNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  selector: all()\n  types:\n  - Ingress\n  - Egress\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: webservice\n  namespace: reservations\nspec:\n  podSelector:\n    matchLabels:\n      role: webservice\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          role: frontend\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  - to:\n    - podSelector:\n        role: database\n    ports:\n    - protocol: TCP\n      port: 3306\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: default\n  annotations:\n    seccomp.security.alpha.kubernetes.io/allowedProfileNames: |\n      'docker/default,runtime/default'\n    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'\n    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'\n    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'\nspec:\n  privileged: false ![1](assets/1.png)\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes: ![2](assets/2.png)\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  hostNetwork: false ![3](assets/3.png)\n  hostIPC: false\n  hostPID: false\n  runAsUser:\n    rule: 'MustRunAsNonRoot' ![4](assets/4.png)\n  seLinux:\n    rule: 'RunAsAny' ![5](assets/5.png)\n  supplementalGroups: ![6](assets/6.png)\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  fsGroup: ![7](assets/7.png)\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  readOnlyRootFilesystem: false\n```", "```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: sample-psp\nrules:\n- apiGroups: ['policy']\n  resources: ['podsecuritypolicies']\n  resourceNames: ['sample-psp']\n  verbs: ['use']\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: RoleBinding\nmetadata:\n  name: sample-psp\nsubjects:\n- kind: ServiceAccount\n  name: my-app\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: sample-psp\n```", "```\n[OUTPUT]\n    Name            es\n    Match           kube.var.log.containers.**alice-ns**.log\n    Host            alice.es.internal.cloud.example.com\n    Port            ${FLUENT_ELASTICSEARCH_PORT}\n    Logstash_Format On\n    Replace_Dots    On\n    Retry_Limit     False\n\n[OUTPUT]\n    Name            es\n    Match           kube.var.log.containers.**bob-ns**.log\n    Host            bob.es.internal.cloud.example.com\n    Port            ${FLUENT_ELASTICSEARCH_PORT}\n    Logstash_Format On\n    Replace_Dots    On\n    Retry_Limit     False\n```"]