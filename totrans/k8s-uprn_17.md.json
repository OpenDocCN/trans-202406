["```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: loadtests.beta.kuar.com\nspec:\n  group: beta.kuar.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n  scope: Namespaced\n  names:\n    plural: loadtests\n    singular: loadtest\n    kind: LoadTest\n    shortNames:\n    - lt\n```", "```\n$ kubectl get loadtests\n```", "```\n$ kubectl create -f loadtest-resource.yaml\n```", "```\n$ kubectl get loadtests\n```", "```\napiVersion: beta.kuar.com/v1\nkind: LoadTest\nmetadata:\n  name: my-loadtest\nspec:\n  service: my-service\n  scheme: https\n  requestsPerSecond: 1000\n  paths:\n  - /index.xhtml\n  - /login.xhtml\n  - /shares/my-shares/\n```", "```\n$ kubectl create -f loadtest.yaml\n```", "```\n$ kubectl get loadtests\n```", "```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: kuar-validator\nwebhooks:\n- name: validator.kuar.com\n  rules:\n  - apiGroups:\n    - \"beta.kuar.com\"\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    resources:\n    - loadtests\n  clientConfig:\n    # Substitute the appropriate IP address for your webhook\n    url: https://192.168.1.233:8080\n    # This should be the base64-encoded CA certificate for your cluster,\n    # you can find it in your ${KUBECONFIG} file\n    caBundle: REPLACEME\n```", "```\npackage main\n\nimport (\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"encoding/asn1\"\n\t\"encoding/pem\"\n\t\"net/url\"\n\t\"os\"\n)\n\nfunc main() {\n\thost := os.Args[1]\n\tname := \"server\"\n\n\tkey, err := rsa.GenerateKey(rand.Reader, 1024)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tkeyDer := x509.MarshalPKCS1PrivateKey(key)\n\tkeyBlock := pem.Block{\n\t\tType:  \"RSA PRIVATE KEY\",\n\t\tBytes: keyDer,\n\t}\n\tkeyFile, err := os.Create(name + \".key\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpem.Encode(keyFile, &keyBlock)\n\tkeyFile.Close()\n\n\tcommonName := \"myuser\"\n\temailAddress := \"someone@myco.com\"\n\n\torg := \"My Co, Inc.\"\n\torgUnit := \"Widget Farmers\"\n\tcity := \"Seattle\"\n\tstate := \"WA\"\n\tcountry := \"US\"\n\n\tsubject := pkix.Name{\n\t\tCommonName:         commonName,\n\t\tCountry:            []string{country},\n\t\tLocality:           []string{city},\n\t\tOrganization:       []string{org},\n\t\tOrganizationalUnit: []string{orgUnit},\n\t\tProvince:           []string{state},\n\t}\n\n\turi, err := url.ParseRequestURI(host)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tasn1, err := asn1.Marshal(subject.ToRDNSequence())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcsr := x509.CertificateRequest{\n\t\tRawSubject:         asn1,\n\t\tEmailAddresses:     []string{emailAddress},\n\t\tSignatureAlgorithm: x509.SHA256WithRSA,\n\t\tURIs:               []*url.URL{uri},\n\t}\n\n\tbytes, err := x509.CreateCertificateRequest(rand.Reader, &csr, key)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcsrFile, err := os.Create(name + \".csr\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tpem.Encode(csrFile, &pem.Block{Type: \"CERTIFICATE REQUEST\", Bytes: bytes})\n\tcsrFile.Close()\n}\n```", "```\n$ go run csr-gen.go *<URL-for-webhook>*\n```", "```\napiVersion: certificates.k8s.io/v1beta1\nkind: CertificateSigningRequest\nmetadata:\n  name: validating-controller.default\nspec:\n  groups:\n  - system:authenticated\n  request: REPLACEME\n  usages:\n  usages:\n  - digital signature\n  - key encipherment\n  - key agreement\n  - server auth\n```", "```\n$ perl -pi -e s/REPLACEME/$(base64 server.csr | tr -d '\\n')/ \\\nadmission-controller-csr.yaml\n```", "```\n$ kubectl create -f admission-controller-csr.yaml\n```", "```\n$ kubectl certificate approve validating-controller.default\n```", "```\n$ kubectl get csr validating-controller.default -o json | \\\n  jq -r .status.certificate | base64 -d > server.crt\n```", "```\n        if (needsPatch(loadtest)) {\n            const patch = [\n                { 'op': 'add', 'path': '/spec/paths', 'value': ['/index.xhtml'] },\n            ]\n            response['patch'] = Buffer.from(JSON.stringify(patch))\n                .toString('base64');\n            response['patchType'] = 'JSONPatch';\n        }\n```", "```\n$ kubectl create -f mutating-controller.yaml\n```"]