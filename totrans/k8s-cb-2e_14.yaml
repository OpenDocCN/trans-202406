- en: Chapter 14\. Serverless and Event-Driven Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless represents a cloud native paradigm for development, empowering developers
    to create and deploy applications without the burden of server management. While
    servers are still part of the equation, the platform abstracts them away from
    the intricacies of application development.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will find recipes that show you how to deploy serverless
    workloads on Kubernetes using the [Knative](https://knative.dev) stack.
  prefs: []
  type: TYPE_NORMAL
- en: 14.1 Installing the Knative Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy the Knative platform to your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the [Knative Operator](https://oreil.ly/y_7fy), you can easily deploy
    the Knative stack components to your cluster. The operator defines custom resources
    (CRs), enabling you to easily configure, install, upgrade, and manage the lifecycle
    of the Knative stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install version 1.11.4 of the Knative Operator from the [release page](https://oreil.ly/6CRLJ),
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the operator is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knative is an open source project that develops components for deploying, running,
    and managing serverless, cloud native applications on Kubernetes. The platform
    consists of two main components, namely [Serving](https://oreil.ly/dpMyf) and
    [Eventing](https://oreil.ly/kYtPu).
  prefs: []
  type: TYPE_NORMAL
- en: While the Knative Operator is the preferred method for deploying and configuring
    the Knative components, alternatively these components can be deployed using YAML
    files made available on their respective release pages.
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 Installing the Knative Serving Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the Knative Operator (see [Recipe 14.1](#kn_operator_install)),
    and now you want to deploy the [Knative Serving](https://oreil.ly/dpMyf) component
    to run serverless applications.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [`KnativeServing`](https://oreil.ly/v-LsX) custom resource provided
    by the Knative Operator to install the Serving component of Knative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knative Serving should be installed in a namespace named `knative-serving`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You must create a `KnativeServing` CR, add a networking layer, and configure
    the DNS. For the networking layer, we will use [Kourier](https://oreil.ly/5DRRi),
    which is a lightweight `Ingress` object for Knative Serving. For the DNS, we will
    use the [sslip.io](https://sslip.io) DNS service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named *serving.yaml* with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now use `kubectl` to apply this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a few minutes for the `Knative Serving` component to be successfully
    deployed. You can watch its deployment status using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can install Knative Serving using YAML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Check if the `kourier` service has been assigned an external IP address or
    CNAME:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On a Minikube cluster, run the command `minikube tunnel` in a terminal so that
    the `kourier` service is assigned an external IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, configure Knative Serving to use sslip.io as the DNS suffix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Knative Serving component enables the Serving API. It provides a high-level
    abstraction for deploying, managing, and autoscaling serverless workloads, primarily
    focusing on stateless, request-driven applications. It aims to simplify the process
    of deploying and managing containerized applications in a serverless manner, allowing
    developers to focus on writing code without the need to manage infrastructure
    concerns.
  prefs: []
  type: TYPE_NORMAL
- en: sslip.io is a DNS service that allows you to easily access your applications
    deployed on Knative using domain names, without having to manage DNS records.
    The service URLs will have the sslip.io suffix and when queried with a hostname
    with an embedded IP address, the service will rturn that IP address.
  prefs: []
  type: TYPE_NORMAL
- en: In production environments, it is highly recommended that you configure a [real
    DNS](https://oreil.ly/Shtsq) for workloads deployed on Knative.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Installing Knative](https://knative.dev/docs/install)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring DNS](https://oreil.ly/Shtsq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14.3 Installing the Knative CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the Knative Operator ([Recipe 14.1](#kn_operator_install)),
    and now you want an easy way for managing Knative resources instead of dealing
    with YAML files.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use [`kn`](https://knative.dev/docs/client/install-kn), the Knative CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `kn` binary from the GitHub [release page](https://oreil.ly/wZXg6)
    and move it into your `$PATH`. For example, to install `kn` v1.8.2 on macOS (Intel),
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, Linux and macOS users can install the Knative CLI using the
    [Homebrew](https://brew.sh) package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Installation of `kn` is extensively documented at the [project page](https://oreil.ly/Ks0Oh).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`kn` provides a quick and easy way of creating Knative resources such as services
    and event sources, without having to deal with YAML files directly. The `kn` tool
    provides a number of commands to manage Knative resources.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For an overview of the available commands, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will find example usage scenarios of `kn` in the remainder of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 14.4 Creating a Knative Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed Knative Serving (see [Recipe 14.2](#kn_serving_install)) and
    now want to deploy an application on Kubernetes that will release the cluster
    resources when not in use.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Knative Serving API to create a Knative `Service` that automatically
    scales down to zero when not in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let’s deploy the application `functions/nodeinfo`, which provides
    information about the Kubernetes node it’s running on. Create a file named *nodeinfo.yaml*
    to deploy the application as a Knative `Service`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It’s important to note that this type of service is not the same as the `Service`
    object described in [Figure 5-1](ch05.html#svc-concept); rather, this `Service`
    object is instantiated from the [Knative Serving API](https://oreil.ly/G3_jU).
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the application with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the service with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After the service has started successfully, open the URL in your browser to
    see the node information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, take a look at the pods that were created for the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the browser window, and after about two minutes you should notice that
    the `nodeinfo` pods are automatically scaled down to zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you open the URL in the browser, a new `Pod` object will automatically
    be started to handle the incoming request. You should notice a delay in rendering
    the page since a new `Pod` is created to handle this request.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the `kn` client (see [Recipe 14.3](#kn_cli_install)), you can create
    the service without having to write YAML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 14.5 Installing the Knative Eventing Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the Knative Operator (see [Recipe 14.1](#kn_operator_install)),
    and now you want to deploy the [Knative Eventing](https://oreil.ly/kYtPu) component
    to build event-driven applications.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [`KnativeEventing`](https://oreil.ly/1u62U) custom resource provided
    by the Knative Operator to install the Eventing component of Knative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knative Eventing should be installed in a namespace named `knative-eventing`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named *eventing.yaml* with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now use `kubectl` to apply this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a few minutes for the `Knative Eventing` component to be successfully
    deployed. You can watch its deployment status using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, to install Knative Eventing using YAML files, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And then install the in-memory channel and `MTChannelBasedBroker`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Knative Eventing component enables the Eventing API. It provides a framework
    for managing and handing events within a cloud native environment. Events in this
    context refer to occurrences or changes within a system, such as the creation
    of a new resource, updates to existing resources, or external triggers. This component
    enables developers to build reactive and flexible applications that respond to
    real-time changes and triggers across the cloud native ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 14.6 Deploying a Knative Eventing Source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed Knative Eventing (see [Recipe 14.5](#kn_eventing_install)),
    and now you want to deploy a source that produces events so that you can use those
    events to trigger workflows in Knative.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An event source is a Kubernetes custom resource that acts as a link between
    an event producer and an event sink. To inspect the event sources currently available,
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PingSource](https://oreil.ly/KlpSU) is an event source that generates events
    containing a fixed payload at regular intervals defined by a cron schedule. Let’s
    deploy a `PingSource` and hook it on to a [Sink](https://oreil.ly/RWa85) named
    `sockeye`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating the `sockeye` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the `sockeye` service was created successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named *pingsource.yaml* to create the `PingSource` and hook it
    up with the `sockeye` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the manifest with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the `PingSource` was created successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the URL of the `sockeye` service using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Upon opening the URL in your web browser, you should see new events appear every
    minute, as shown in [Figure 14-1](#sockeye-pingsource-events).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen Shot of events appearing in Sockeye](assets/kcb2_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. Events appearing in Sockeye
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you do not want to write YAML files, you can use the `kn` client (see [Recipe
    14.3](#kn_cli_install)) instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `sockeye` service with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the `PingSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 14.7 Enabling Knative Eventing Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the Knative Eventing component (see [Recipe 14.5](#kn_eventing_install)),
    and you want to enable Knative event sources that are not enabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Additional event sources](https://oreil.ly/ZP2Wa) developed by the Knative
    community, such as ones for GitHub, GitLab, Apache Kafka, and so on, can be configured
    in the Knative Eventing custom resource. For instance, to install the [GitHub
    event source](https://oreil.ly/8HavC), update the *eventing.yaml* file from [Recipe
    14.5](#kn_eventing_install) like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the changes with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Watch the status of the update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you inspect the available sources, you should see the `GitHubSource`
    event source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `GitHubSource` event source registers for events on a specified GitHub organization
    or repository and triggers a new event for selected GitHub event types.
  prefs: []
  type: TYPE_NORMAL
- en: Open source event sources for GitLab, Apache Kafka, RabbitMQ, and more are also
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 14.8 Installing Event Sources from TriggerMesh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed Knative Eventing (see [Recipe 14.5](#kn_eventing_install)),
    and now you want to install event sources from TriggerMesh so that you have access
    to event sources for a wide range of platforms and services.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install v1.26.0 of TriggerMesh, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You can inspect the sources provided by the TriggerMesh API using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can list all the sinks provided by the TriggerMesh API using
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[TriggerMesh](https://triggermesh.com) is free open source software that lets
    you easily build event-driven applications. TriggerMesh provides event sources
    for a wide range of platforms and services, such as AWS, Google Cloud, Azure,
    Salesforce, Zendesk, and so on. In addition to event sources, TriggerMesh provides
    components that enable you to transform the cloud events.'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to the [TriggerMesh documentation](https://oreil.ly/0lDap) to learn
    more.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[TriggerMesh sources](https://oreil.ly/-bqVQ)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TriggerMesh targets](https://oreil.ly/7tlVP)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TriggerMesh transformations](https://oreil.ly/O2Et4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
