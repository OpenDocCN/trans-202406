- en: Chapter 14\. Serverless and Event-Driven Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless represents a cloud native paradigm for development, empowering developers
    to create and deploy applications without the burden of server management. While
    servers are still part of the equation, the platform abstracts them away from
    the intricacies of application development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will find recipes that show you how to deploy serverless
    workloads on Kubernetes using the [Knative](https://knative.dev) stack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 14.1 Installing the Knative Operator
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy the Knative platform to your cluster.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the [Knative Operator](https://oreil.ly/y_7fy), you can easily deploy
    the Knative stack components to your cluster. The operator defines custom resources
    (CRs), enabling you to easily configure, install, upgrade, and manage the lifecycle
    of the Knative stack.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'To install version 1.11.4 of the Knative Operator from the [release page](https://oreil.ly/6CRLJ),
    do this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Verify that the operator is running:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knative is an open source project that develops components for deploying, running,
    and managing serverless, cloud native applications on Kubernetes. The platform
    consists of two main components, namely [Serving](https://oreil.ly/dpMyf) and
    [Eventing](https://oreil.ly/kYtPu).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: While the Knative Operator is the preferred method for deploying and configuring
    the Knative components, alternatively these components can be deployed using YAML
    files made available on their respective release pages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 Installing the Knative Serving Component
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the Knative Operator (see [Recipe 14.1](#kn_operator_install)),
    and now you want to deploy the [Knative Serving](https://oreil.ly/dpMyf) component
    to run serverless applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [`KnativeServing`](https://oreil.ly/v-LsX) custom resource provided
    by the Knative Operator to install the Serving component of Knative.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Knative Serving should be installed in a namespace named `knative-serving`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You must create a `KnativeServing` CR, add a networking layer, and configure
    the DNS. For the networking layer, we will use [Kourier](https://oreil.ly/5DRRi),
    which is a lightweight `Ingress` object for Knative Serving. For the DNS, we will
    use the [sslip.io](https://sslip.io) DNS service.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named *serving.yaml* with the following contents:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now use `kubectl` to apply this configuration:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will take a few minutes for the `Knative Serving` component to be successfully
    deployed. You can watch its deployment status using this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, you can install Knative Serving using YAML files:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Check if the `kourier` service has been assigned an external IP address or
    CNAME:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On a Minikube cluster, run the command `minikube tunnel` in a terminal so that
    the `kourier` service is assigned an external IP address.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, configure Knative Serving to use sslip.io as the DNS suffix:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Knative Serving component enables the Serving API. It provides a high-level
    abstraction for deploying, managing, and autoscaling serverless workloads, primarily
    focusing on stateless, request-driven applications. It aims to simplify the process
    of deploying and managing containerized applications in a serverless manner, allowing
    developers to focus on writing code without the need to manage infrastructure
    concerns.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Knative Serving 组件启用了 Serving API。它提供了一个高级抽象，用于部署、管理和自动缩放无状态、请求驱动的无服务器工作负载应用程序。其主要目标是简化以无服务器方式部署和管理容器化应用程序的过程，使开发人员能够专注于编写代码，而无需管理基础设施问题。
- en: sslip.io is a DNS service that allows you to easily access your applications
    deployed on Knative using domain names, without having to manage DNS records.
    The service URLs will have the sslip.io suffix and when queried with a hostname
    with an embedded IP address, the service will rturn that IP address.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: sslip.io 是一个 DNS 服务，允许您通过域名轻松访问部署在 Knative 上的应用程序，无需管理 DNS 记录。服务的 URL 将带有 sslip.io
    后缀，当使用包含嵌入 IP 地址的主机名查询时，服务将返回该 IP 地址。
- en: In production environments, it is highly recommended that you configure a [real
    DNS](https://oreil.ly/Shtsq) for workloads deployed on Knative.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，强烈建议为部署在 Knative 上的工作负载配置一个[真实的 DNS](https://oreil.ly/Shtsq)。
- en: See Also
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Installing Knative](https://knative.dev/docs/install)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安装 Knative](https://knative.dev/docs/install)'
- en: '[Configuring DNS](https://oreil.ly/Shtsq)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配置 DNS](https://oreil.ly/Shtsq)'
- en: 14.3 Installing the Knative CLI
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.3 安装 Knative CLI
- en: Problem
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed the Knative Operator ([Recipe 14.1](#kn_operator_install)),
    and now you want an easy way for managing Knative resources instead of dealing
    with YAML files.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了 Knative Operator（[Recipe 14.1](#kn_operator_install)），现在希望有一种简便的方法来管理
    Knative 资源，而不必处理 YAML 文件。
- en: Solution
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use [`kn`](https://knative.dev/docs/client/install-kn), the Knative CLI.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`kn`](https://knative.dev/docs/client/install-kn)，即 Knative CLI。
- en: 'Install the `kn` binary from the GitHub [release page](https://oreil.ly/wZXg6)
    and move it into your `$PATH`. For example, to install `kn` v1.8.2 on macOS (Intel),
    do this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从 GitHub 的[发布页面](https://oreil.ly/wZXg6)安装 `kn` 二进制文件，并将其移动到您的 `$PATH`。例如，在
    macOS（Intel）上安装 `kn` v1.8.2，请执行以下操作：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alternatively, Linux and macOS users can install the Knative CLI using the
    [Homebrew](https://brew.sh) package manager:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，Linux 和 macOS 用户可以使用 [Homebrew](https://brew.sh) 包管理器安装 Knative CLI：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Installation of `kn` is extensively documented at the [project page](https://oreil.ly/Ks0Oh).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`kn` 的安装在[项目页面](https://oreil.ly/Ks0Oh)有详细文档。'
- en: Discussion
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`kn` provides a quick and easy way of creating Knative resources such as services
    and event sources, without having to deal with YAML files directly. The `kn` tool
    provides a number of commands to manage Knative resources.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`kn` 提供了一种快速简便的方式来创建 Knative 资源，比如服务和事件源，而无需直接处理 YAML 文件。`kn` 工具提供了多个命令来管理
    Knative 资源。'
- en: 'For an overview of the available commands, do this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用命令的概述，请执行以下操作：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will find example usage scenarios of `kn` in the remainder of this chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章的其余部分找到 `kn` 的使用示例场景。
- en: 14.4 Creating a Knative Service
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.4 创建一个 Knative Service
- en: Problem
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed Knative Serving (see [Recipe 14.2](#kn_serving_install)) and
    now want to deploy an application on Kubernetes that will release the cluster
    resources when not in use.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了 Knative Serving（请参阅 [Recipe 14.2](#kn_serving_install)），现在希望在 Kubernetes
    上部署一个应用程序，当不使用时将释放集群资源。
- en: Solution
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the Knative Serving API to create a Knative `Service` that automatically
    scales down to zero when not in use.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Knative Serving API 创建一个 Knative `Service`，在不使用时自动缩减至零。
- en: 'As an example, let’s deploy the application `functions/nodeinfo`, which provides
    information about the Kubernetes node it’s running on. Create a file named *nodeinfo.yaml*
    to deploy the application as a Knative `Service`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们部署应用程序 `functions/nodeinfo`，它提供有关其运行的 Kubernetes 节点的信息。创建一个名为 *nodeinfo.yaml*
    的文件，以将该应用程序部署为一个 Knative `Service`：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It’s important to note that this type of service is not the same as the `Service`
    object described in [Figure 5-1](ch05.html#svc-concept); rather, this `Service`
    object is instantiated from the [Knative Serving API](https://oreil.ly/G3_jU).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这种类型的服务与 [Figure 5-1](ch05.html#svc-concept) 中描述的 `Service` 对象不同；相反，此
    `Service` 对象是从[Knative Serving API](https://oreil.ly/G3_jU) 实例化的。
- en: 'Deploy the application with this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令部署应用程序：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Check the status of the service with this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查服务的状态：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After the service has started successfully, open the URL in your browser to
    see the node information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, take a look at the pods that were created for the service:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Close the browser window, and after about two minutes you should notice that
    the `nodeinfo` pods are automatically scaled down to zero:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, if you open the URL in the browser, a new `Pod` object will automatically
    be started to handle the incoming request. You should notice a delay in rendering
    the page since a new `Pod` is created to handle this request.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the `kn` client (see [Recipe 14.3](#kn_cli_install)), you can create
    the service without having to write YAML files:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 14.5 Installing the Knative Eventing Component
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the Knative Operator (see [Recipe 14.1](#kn_operator_install)),
    and now you want to deploy the [Knative Eventing](https://oreil.ly/kYtPu) component
    to build event-driven applications.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [`KnativeEventing`](https://oreil.ly/1u62U) custom resource provided
    by the Knative Operator to install the Eventing component of Knative.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Knative Eventing should be installed in a namespace named `knative-eventing`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a file named *eventing.yaml* with the following contents:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now use `kubectl` to apply this configuration:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It will take a few minutes for the `Knative Eventing` component to be successfully
    deployed. You can watch its deployment status using this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Alternatively, to install Knative Eventing using YAML files, do this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And then install the in-memory channel and `MTChannelBasedBroker`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Discussion
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Knative Eventing component enables the Eventing API. It provides a framework
    for managing and handing events within a cloud native environment. Events in this
    context refer to occurrences or changes within a system, such as the creation
    of a new resource, updates to existing resources, or external triggers. This component
    enables developers to build reactive and flexible applications that respond to
    real-time changes and triggers across the cloud native ecosystem.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 14.6 Deploying a Knative Eventing Source
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed Knative Eventing (see [Recipe 14.5](#kn_eventing_install)),
    and now you want to deploy a source that produces events so that you can use those
    events to trigger workflows in Knative.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An event source is a Kubernetes custom resource that acts as a link between
    an event producer and an event sink. To inspect the event sources currently available,
    do this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PingSource](https://oreil.ly/KlpSU) is an event source that generates events
    containing a fixed payload at regular intervals defined by a cron schedule. Let’s
    deploy a `PingSource` and hook it on to a [Sink](https://oreil.ly/RWa85) named
    `sockeye`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating the `sockeye` service:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Verify that the `sockeye` service was created successfully:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file named *pingsource.yaml* to create the `PingSource` and hook it
    up with the `sockeye` application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Apply the manifest with this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Verify that the `PingSource` was created successfully:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Get the URL of the `sockeye` service using this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令获取`sockeye`服务的URL：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Upon opening the URL in your web browser, you should see new events appear every
    minute, as shown in [Figure 14-1](#sockeye-pingsource-events).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开URL后，您应该可以看到每分钟出现新事件，如[Figure 14-1](#sockeye-pingsource-events)所示。
- en: '![Screen Shot of events appearing in Sockeye](assets/kcb2_1401.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Sockeye中显示的事件截图](assets/kcb2_1401.png)'
- en: Figure 14-1\. Events appearing in Sockeye
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-1\. Sockeye中显示的事件
- en: Discussion
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: If you do not want to write YAML files, you can use the `kn` client (see [Recipe
    14.3](#kn_cli_install)) instead.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想编写YAML文件，可以使用`kn`客户端（参见[Recipe 14.3](#kn_cli_install)）。
- en: 'Create the `sockeye` service with this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建`sockeye`服务：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, create the `PingSource`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建`PingSource`：
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 14.7 Enabling Knative Eventing Sources
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.7 启用Knative Eventing事件源
- en: Problem
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed the Knative Eventing component (see [Recipe 14.5](#kn_eventing_install)),
    and you want to enable Knative event sources that are not enabled by default.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了Knative Eventing组件（参见[Recipe 14.5](#kn_eventing_install)），并且希望启用默认未启用的Knative事件源。
- en: Solution
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[Additional event sources](https://oreil.ly/ZP2Wa) developed by the Knative
    community, such as ones for GitHub, GitLab, Apache Kafka, and so on, can be configured
    in the Knative Eventing custom resource. For instance, to install the [GitHub
    event source](https://oreil.ly/8HavC), update the *eventing.yaml* file from [Recipe
    14.5](#kn_eventing_install) like so:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[其他事件源](https://oreil.ly/ZP2Wa)由Knative社区开发，例如GitHub、GitLab、Apache Kafka等，可以在Knative
    Eventing自定义资源中配置。例如，要安装[GitHub事件源](https://oreil.ly/8HavC)，请按照[Recipe 14.5](#kn_eventing_install)更新*eventing.yaml*文件：'
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Apply the changes with this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令应用更改：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Watch the status of the update:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 查看更新的状态：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, if you inspect the available sources, you should see the `GitHubSource`
    event source:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您检查可用的事件源，应该会看到`GitHubSource`事件源：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Discussion
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `GitHubSource` event source registers for events on a specified GitHub organization
    or repository and triggers a new event for selected GitHub event types.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`GitHubSource`事件源注册以便在指定的GitHub组织或仓库上监听事件，并对所选的GitHub事件类型触发新的事件。'
- en: Open source event sources for GitLab, Apache Kafka, RabbitMQ, and more are also
    available.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以获取GitLab、Apache Kafka、RabbitMQ等开源事件源。
- en: 14.8 Installing Event Sources from TriggerMesh
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.8 安装TriggerMesh的事件源
- en: Problem
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed Knative Eventing (see [Recipe 14.5](#kn_eventing_install)),
    and now you want to install event sources from TriggerMesh so that you have access
    to event sources for a wide range of platforms and services.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了Knative Eventing（参见[Recipe 14.5](#kn_eventing_install)），现在您希望安装TriggerMesh提供的事件源，以便您可以访问各种平台和服务的事件源。
- en: Solution
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'To install v1.26.0 of TriggerMesh, do this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装TriggerMesh的v1.26.0版本，请执行以下操作：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can inspect the sources provided by the TriggerMesh API using this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令检查TriggerMesh API提供的事件源：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Similarly, you can list all the sinks provided by the TriggerMesh API using
    this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以使用以下命令列出TriggerMesh API提供的所有接收器。
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Discussion
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '[TriggerMesh](https://triggermesh.com) is free open source software that lets
    you easily build event-driven applications. TriggerMesh provides event sources
    for a wide range of platforms and services, such as AWS, Google Cloud, Azure,
    Salesforce, Zendesk, and so on. In addition to event sources, TriggerMesh provides
    components that enable you to transform the cloud events.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[TriggerMesh](https://triggermesh.com)是一款免费开源软件，可让您轻松构建事件驱动应用程序。TriggerMesh为AWS、Google
    Cloud、Azure、Salesforce、Zendesk等各种平台和服务提供事件源。除事件源外，TriggerMesh还提供组件，使您能够转换云事件。'
- en: Head over to the [TriggerMesh documentation](https://oreil.ly/0lDap) to learn
    more.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[TriggerMesh文档](https://oreil.ly/0lDap)了解更多信息。
- en: See Also
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[TriggerMesh sources](https://oreil.ly/-bqVQ)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TriggerMesh源](https://oreil.ly/-bqVQ)'
- en: '[TriggerMesh targets](https://oreil.ly/7tlVP)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TriggerMesh目标](https://oreil.ly/7tlVP)'
- en: '[TriggerMesh transformations](https://oreil.ly/O2Et4)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TriggerMesh转换](https://oreil.ly/O2Et4)'
