["```\n#!/usr/bin/env node const cluster = require('cluster'); ![1](assets/1.png)\nconsole.log(`master pid=${process.pid}`);\ncluster.setupMaster({\n  exec: __dirname+'/producer-http-basic.js' ![2](assets/2.png)\n});\ncluster.fork(); ![3](assets/3.png)\ncluster.fork();\n\ncluster\n  .on('disconnect', (worker) => { ![4](assets/4.png)\n    console.log('disconnect', worker.id);\n  })\n  .on('exit', (worker, code, signal) => {\n    console.log('exit', worker.id, code, signal);\n    // cluster.fork(); ![5](assets/5.png)\n  })\n  .on('listening', (worker, {address, port}) => {\n    console.log('listening', worker.id, `${address}:${port}`);\n  });\n```", "```\nmaster pid=7649\nProducer running at http://127.0.0.1:4000\nProducer running at http://127.0.0.1:4000\nlistening 1 127.0.0.1:4000\nlistening 2 127.0.0.1:4000\n```", "```\n$ brew install pstree # if using macOS\n$ pstree <PID> -p -a\n```", "```\nnode,7649 ./master.js\n  ├─node,7656 server.js\n  │   ├─{node},15233\n  │   ├─{node},15234\n  │   ├─{node},15235\n  │   ├─{node},15236\n  │   ├─{node},15237\n  │   └─{node},15243\n  ├─node,7657 server.js\n  │   ├─ ... Six total children like above ...\n  │   └─{node},15244\n  ├─ ... Six total children like above ...\n  └─{node},15230\n```", "```\n$ curl http://localhost:4000/recipes/42 # run three times\n```", "```\nworker request pid=7656\nworker request pid=7657\nworker request pid=7656\n```", "```\n$ kill <pid>\n```", "```\ndisconnect 1\nexit 1 null SIGTERM\n```", "```\n$ curl http://localhost:4000/recipes/42 # run three times\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 const server = require('fastify')();\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 4000;\n\nconsole.log(`worker pid=${process.pid}`);\n\nserver.get('/:limit', async (req, reply) => { ![1](assets/1.png)\n  return String(fibonacci(Number(req.params.limit)));\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Producer running at http://${HOST}:${PORT}`);\n});\n\nfunction fibonacci(limit) { ![2](assets/2.png)\n  let prev = 1n, next = 0n, swap;\n  while (limit) {\n    swap = prev;\n    prev = prev + next;\n    next = swap;\n    limit--;\n  }\n  return next;\n}\n```", "```\n$ npm install -g autocannon@6                  # terminal 1\n$ node master-fibonacci.js                     # terminal 1\n$ autocannon -c 2 http://127.0.0.1:4000/100000 # terminal 2\n```", "```\n# Linux-only command:\n$ taskset -cp 0 <pid> # run for master, worker 1, worker 2\n```", "```\nfrontend inbound ![1](assets/1.png)\n  mode http ![2](assets/2.png)\n  bind localhost:8000\n  stats enable ![3](assets/3.png)\n  stats uri /admin?stats\n```", "```\n$ haproxy -f haproxy/stats.cfg\n```", "```\nhttp://localhost:8000/admin?stats\n```", "```\nserver.get('/health', async () => {\n  console.log('health check');\n  return 'OK';\n});\n```", "```\ndefaults ![1](assets/1.png)\n  mode http\n  timeout connect 5000ms ![2](assets/2.png)\n  timeout client 50000ms\n  timeout server 50000ms\n\nfrontend inbound\n  bind localhost:3000\n  default_backend web-api ![3](assets/3.png)\n  stats enable\n  stats uri /admin?stats\n\nbackend web-api ![4](assets/4.png)\n  option httpchk GET /health ![5](assets/5.png)\n  server web-api-1 localhost:3001 check ![6](assets/6.png)\n  server web-api-2 localhost:3002 check\n```", "```\n$ node recipe-api/producer-http-basic.js\n$ PORT=3001 node web-api/consumer-http-healthendpoint.js\n$ PORT=3002 node web-api/consumer-http-healthendpoint.js\n$ haproxy -f ./haproxy/load-balance.cfg\n\n$ curl http://localhost:3000/ # run several times\n```", "```\n$ kill <CONSUMER_PID> \\\n  && curl http://localhost:3000/ \\\n  && curl http://localhost:3000/\n```", "```\ndefaults\n  mode http\n  timeout connect 5000ms\n  timeout client 50000ms\n  timeout server 50000ms\n\nfrontend inbound\n  bind localhost:3000\n  default_backend web-api\n\nbackend web-api\n  compression offload ![1](assets/1.png)\n  compression algo gzip ![2](assets/2.png)\n  compression type application/json text/plain ![3](assets/3.png)\n  server web-api-1 localhost:3001\n```", "```\n$ node recipe-api/producer-http-basic.js\n$ PORT=3001 node web-api/consumer-http-basic.js\n$ haproxy -f haproxy/compression.cfg\n$ curl http://localhost:3000/\n$ curl -H 'Accept-Encoding: gzip' http://localhost:3000/ | gunzip\n```", "```\n$ openssl req -nodes -new -x509 \\\n  -keyout haproxy/private.key \\\n  -out haproxy/certificate.cert\n$ cat haproxy/certificate.cert haproxy/private.key \\\n  > haproxy/combined.pem\n```", "```\ndefaults\n  mode http\n  timeout connect 5000ms\n  timeout client 50000ms\n  timeout server 50000ms\n\nglobal ![1](assets/1.png)\n  tune.ssl.default-dh-param 2048\n\nfrontend inbound\n  bind localhost:3000 ssl crt haproxy/combined.pem ![2](assets/2.png)\n  default_backend web-api\n\nbackend web-api\n  server web-api-1 localhost:3001\n```", "```\n$ node recipe-api/producer-http-basic.js        # terminal 1\n$ PORT=3001 node web-api/consumer-http-basic.js # terminal 2\n$ haproxy -f haproxy/tls.cfg                    # terminal 3\n$ curl --insecure https://localhost:3000/       # terminal 4\n```", "```\n#!/usr/bin/env node \nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  console.log('current conn', server._connections);\n  setTimeout(() => res.end('OK'), 10_000); ![1](assets/1.png)\n});\n\nserver.maxConnections = 2; ![2](assets/2.png)\nserver.listen(3020, 'localhost');\n```", "```\n$ node low-connections.js     # terminal 1\n$ curl http://localhost:3020/ # terminals 2-4\n```", "```\ndefaults\n  maxconn 8 ![1](assets/1.png)\n  mode http\n\nfrontend inbound\n  bind localhost:3010\n  default_backend web-api\n\nbackend web-api\n  option httpclose ![2](assets/2.png)\n  server web-api-1 localhost:3020 maxconn 2 ![3](assets/3.png)\n```", "```\n$ node low-connections.js             # terminal 1\n$ haproxy -f haproxy/backpressure.cfg # terminal 2\n$ curl http://localhost:3010/         # terminals 3-5\n```", "```\ncurrent conn 1\ncurrent conn 2\ncurrent conn 2\n```", "```\n$ npm install -g autocannon@6\n```", "```\n#!/usr/bin/env node\n\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 4000;\n\nrequire(\"http\").createServer((req, res) => {\n  res.end('ok');\n}).listen(PORT, () => {\n  console.log(`Producer running at http://${HOST}:${PORT}`);\n});\n```", "```\n$ node benchmark/native-http.js\n$ autocannon -d 60 -c 10 -l http://localhost:4000/\n```", "```\ndefaults\n  mode http\n\nfrontend inbound\n  bind localhost:4001\n  default_backend native-http\n\nbackend native-http\n  server native-http-1 localhost:4000\n```", "```\n$ node benchmark/native-http.js\n$ haproxy -f haproxy/benchmark-basic.cfg\n$ autocannon -d 60 -c 10 -l http://localhost:4001\n```", "```\ndefaults\n  mode tcp\n  timeout connect 5000ms\n  timeout client 50000ms\n  timeout server 50000ms\n\nfrontend inbound\n  bind localhost:3000\n  default_backend server-api\n\nbackend server-api\n  server server-api-1 localhost:3001\n```", "```\n$ rm index.html ; curl -o index.html https://thomashunter.name\n$ PORT=3001 node server-gzip.js\n$ haproxy -f haproxy/passthru.cfg\n$ autocannon -H \"Accept-Encoding: gzip\" \\\n  -d 60 -c 10 -l http://localhost:3000/ # Node.js\n# Kill the previous haproxy process\n$ haproxy -f haproxy/compression.cfg\n$ autocannon -H \"Accept-Encoding: gzip\" \\\n  -d 60 -c 10 -l http://localhost:3000/ # HAProxy\n```", "```\n$ PORT=3001 node recipe-api/producer-https-basic.js\n$ haproxy -f haproxy/passthru.cfg\n$ autocannon -d 60 -c 10 https://localhost:3000/recipes/42\n```", "```\n$ PORT=3001 node recipe-api/producer-http-basic.js\n$ haproxy -f haproxy/tls.cfg\n$ autocannon -d 60 -c 10 https://localhost:3000/recipes/42\n```", "```\n# Server VPS\n$ HOST=0.0.0.0 node recipe-api/producer-http-basic.js\n# Client VPS\n$ TARGET=<RECIPE_API_IP>:4000 node web-api/consumer-http-basic.js\n$ autocannon -d 60 -c 10 -l http://localhost:3000\n```", "```\n# Server VPS\n$ HOST=0.0.0.0 node recipe-api/producer-graphql.js\n# Client VPS\n$ TARGET=<RECIPE_API_IP>:4000 node web-api/consumer-graphql.js\n$ autocannon -d 60 -c 10 -l http://localhost:3000\n```", "```\n# Server VPS\n$ HOST=0.0.0.0 node recipe-api/producer-grpc.js\n# Client VPS\n$ TARGET=<RECIPE_API_IP>:4000 node web-api/consumer-grpc.js\n$ autocannon -d 60 -c 10 -l http://localhost:3000\n```", "```\ndefaults\n  mode http\n\nfrontend inbound\n  bind localhost:5000\n  default_backend fibonacci\n\nbackend fibonacci\n  server fibonacci-1 localhost:5001\n# server fibonacci-2 localhost:5002\n# server fibonacci-3 localhost:5003\n```", "```\n// Add this line inside the server.get async handler\nawait sleep(10);\n\n// Add this function to the end of the file\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n```", "```\n$ PORT=5001 node cluster-fibonacci.js # later run with 5002 & 5003\n$ haproxy -f haproxy/fibonacci.cfg\n$ autocannon -d 60 -c 10 -R 10 http://localhost:5000/10000\n```"]