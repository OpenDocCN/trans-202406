["```\nfun View.roundCorners(resources: Resources, outline: OutLine?) {\n    val adjusted = TypedValue.applyDimension(\n        TypedValue.COMPLEX_UNIT_SP,\n        25,\n        resources?.displayMetrics\n    )\n    val newHeight =\n        view.height.plus(cornerRadiusAdjusted).toInt()\n    this.run { outline?.setRoundRect(0, 0, width, newHeight, adjusted)}\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape = \"rectangle\">\n    <corners android:topLeftRadius=\"25dp\" android:topRightRadius=\"25dp\"/>\n    <stroke android:width=\"1dp\" android:color=\"#FFF\"/>\n    <solid android:color=\"#FFF\"/>\n</shape>\n```", "```\nandroid:background=\"@drawable/rounded_top_corners_background\"\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:color=\"@color/primary\">\n    <item android:id=\"@android:id/mask\">\n        <shape android:shape=\"rectangle\">\n            <solid android:color=\"@color/ripple_mask\" />\n        </shape>\n    </item>\n</ripple>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\">\n    <solid android:color=\"@color/background_pressed\" />\n</shape>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:enterFadeDuration=\"@android:integer/config_shortAnimTime\"\n    android:exitFadeDuration=\"@android:integer/config_shortAnimTime\">\n    <item\n        android:state_pressed=\"true\" android:state_enabled=\"true\"\n        android:drawable=\"@drawable/background_pressed_ripple\"/>\n    <item\n        android:state_pressed=\"false\"\n        android:drawable=\"@android:color/transparent\"/>\n</selector>\n```", "```\n// we get an instance of bitmap from the pool\n BitmapFactory.Options().inBitmap = pool.get()\n```", "```\nval cacheSize = 10 * 1024 * 1024\nval cache = Cache(rootDir, cacheSize)\n\nval client = OkHttpClient.Builder()\n                .cache(cache)\n                .build()\n```", "```\n// Warning: this is an example of what NOT to do!\nclass CircleView @JvmOverloads constructor(\n    context: Context,\n) : View(context) {\n\n    override fun onDraw(canvas: Canvas) {\n       super.onDraw(canvas)\n       canvas.save()\n       // Never initialize object allocation here!\n       val paint: Paint = Paint().apply {\n           color = Color.parseColor(\"#55448AFF\")\n           isAntiAlias = true\n       }\n       canvas.drawCircle(100f, 100f, 50f, paint)\n       canvas.restore()\n   }\n}\n```", "```\nclass CircleView @JvmOverloads constructor(\n    context: Context,\n) : View(context) {\n\n    private var paint: Paint = Paint().apply {\n        color = Color.parseColor(\"#55448AFF\")\n        isAntiAlias = true\n    }\n        set(value) {\n            field = value\n            invalidate()\n        }\n\n    override fun onDraw(canvas: Canvas) {\n       super.onDraw(canvas)\n       canvas.save()\n       canvas.drawCircle(100f, 100f, 50f, paint)\n       canvas.restore()\n   }\n}\n```", "```\nclass MapImportViewModel @ViewModelInject constructor(\n    private val settings: Settings,\n    private val app: Application\n): ViewModel() {\n    /* removed for brevity */\n\n    fun unarchiveAsync(item: ItemData) {\n        viewModelScope.launch {\n            val inputStream = app.contentResolve.\n                openInputStream(item.uri) ?: return@launch\n            val rootFolder = settings.getAppDir() ?: return@launch\n            val outputFolder = File(rootFolder, \"imported\")\n            /* removed for brevity */\n        }\n    }\n}\n```", "```\nclass GpxRecordingService {\n\n    /* Removed for brevity */\n\n    companion object {\n        var isStarted: Boolean = false\n            private set(value) {\n                EventBus.getDefault().post(GpxRecordServiceStatus(value))\n                field = value\n            }\n    }\n}\n```", "```\nbuildTypes {\n    release {\n        minifyEnabled true\n        shrinkResources true\n        proguardFile getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n    }\n}\n```", "```\n# Retrofit 2.X\n-dontwarn retrofit2.**\n-keep class retrofit2.** { *; }\n# Kotlin source code whitelisted here\n-keep class com.some.kotlin.network.model.** { *; }\n-keepattributes Signature\n-keepattributes Exceptions\n-keepclasseswithmembers class * {\n    @retrofit2.http.* <methods>;\n}\n```"]