- en: 'Chapter 11\. Hosting: Deploying Your Application to the Amplify Console with
    CI and CD'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve looked at building out our apps, how do we make them live and
    show them to the world? In this chapter, we’ll look at a couple of different hosting
    options with Amplify, and also how to deploy your app using a custom domain name.
  prefs: []
  type: TYPE_NORMAL
- en: The service we’ll be using is the Amplify Console hosting service. The Amplify
    Console is a fully managed hosting service that provides a simple workflow for
    deploying static sites and full stack serverless applications. Using Amplify Console,
    you deploy your code using the CLI, a GitHub repository, or manually, and the
    service will build and deploy your app for you.
  prefs: []
  type: TYPE_NORMAL
- en: When working with frameworks like React, Vue, Angular, or even frameworks like
    Gatsby, Next, or Nuxt, there is typically a *build* phase that needs to be run.
    This phase will take all of the JavaScript, CSS, and images and, using a module
    bundler such as webpack, create a deployable build of your website.
  prefs: []
  type: TYPE_NORMAL
- en: The Amplify Console will allow you to configure the app’s build settings so
    that when you are ready to deploy a new version, the service will be able to take
    your raw files, then build and deploy your app to your live domain for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*CLI-based deployments*'
  prefs: []
  type: TYPE_NORMAL
- en: Using our local project, we will deploy an app to Amplify Console hosting directly
    from the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: '*Git-based deployments*'
  prefs: []
  type: TYPE_NORMAL
- en: Using a GitHub repository, we will deploy an app to Amplify Console hosting
    and learn how to trigger new builds when changes are merged into the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: '*Access control*'
  prefs: []
  type: TYPE_NORMAL
- en: Add access control to restrict access to your branches with a username and password.
  prefs: []
  type: TYPE_NORMAL
- en: '*Custom domains*'
  prefs: []
  type: TYPE_NORMAL
- en: Use your custom domain name for the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: CLI-Based Deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to deploy a project to Amplify Console hosting
    directly from the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, create a new React app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll initialize a new Amplify project and add a single service, authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When running the `init` command, we are walked through the same set of questions
    we’ve been walked through in all of the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We are asked questions like what our source and distribution directories are,
    as well as the build command. By default, the Amplify CLI will detect the framework
    and automatically set these for you for many popular frameworks, like in our React
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a framework that is not recognized by the Amplify CLI, or have
    a custom build configuration, you may need to set these values to be something
    different.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add hosting, we can use the `hosting` category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s update our frontend code to add a basic greeting as well as authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening *src/index.js* and configuring the Amplify app by adding the
    following code below the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then update *src/App.js* with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our app is now ready to deploy. To deploy both the frontend and backend, we
    can run the `publish` command. The `publish` command will deploy both the frontend
    *and* backend code to the Amplify Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we should be able to view the app in the console with both the frontend
    deployment as well as backend service configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: From the Amplify Console dashboard, click the app name that was just deployed.
    Here, you should be able to see a toggle to view both the frontend (*Frontend
    environments*) as well as the backend (*Backend environments*) deployments, as
    shown in [Figure 11-1](#fig11a).
  prefs: []
  type: TYPE_NORMAL
- en: '![Amplify Console Overview](Images/fssl_1101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. Amplify Console overview
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'From the *Frontend environments* view, you should be able to click the domain
    to view the live website hosted by the Amplify Console. The domain URL should
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the lefthand menu are options for things like domain management for custom
    domains (covered in [“Custom Domains”](#custom_domains)), email notifications
    for build events, access control (something we will cover in this chapter), logs,
    and redirects.
  prefs: []
  type: TYPE_NORMAL
- en: When you make an update and need to deploy a new version, you can run the `publish`
    command again to deploy the updated version of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Git-Based Deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s look at how you can enable Git-based deployments using an Amplify
    app stored in a GitHub repository. While deploying from your local project works
    well, many times you will be working from a Git repository either alone or with
    a team. The Amplify Console supports Git-based hosting for your applications,
    along with built-in features automatic deployments on merges and feature branch
    deployments (branch deployments linked to each feature branch).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to take the app we have already built and deploy it to the
    Amplify Console from a GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to remove the existing amplify backend that we have set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a new Amplify app and add authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, deploy the backend using the Amplify `push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We now need to create a GitHub repository to hold the app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the GitHub Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing you will need to do is go to GitHub.com and create a new repository.
    I’ll create a new repo called *my-react-app*, as shown in [Figure 11-2](#fig11b).
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a GitHub repository](Images/fssl_1102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-2\. Creating a GitHub repository
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once you’ve created the repo, you will be given a repo URI that looks like
    what’s shown in [Figure 11-3](#fig11c):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![GitHub Project URI](Images/fssl_1103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-3\. GitHub project URI
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Copy this repo URI and return to the command line. From here, we will initialize
    a new GitHub project in our local app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll then add the files to be tracked and push the changes to our repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the app has been pushed to GitHub, we can connect to Amplify Console
    hosting. To do so, let’s add it via the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The CLI should open the Amplify Console in your web browser, allowing you to
    choose GitHub as your source code provider.
  prefs: []
  type: TYPE_NORMAL
- en: As your first step (in the Amplify Console), choose GitHub as the source code
    provider and then click Connect branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, sign in with GitHub, then choose the new repo you just created and the
    master branch. Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Configure build settings page, when asked to “select a backend environment,”
    choose the environment name you already have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the Configure build settings page, when asked to “select an existing
    service role or create a new one so Amplify Console may access your resources,”
    click Create new role to create a new IAM role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Next: Permissions, Next: Tags, Next: Review, and then Create Role to
    create a new IAM role.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the Configure build settings page, click the refresh button, and
    select the newly created role from the dropdown.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Review page, click Save and deploy to deploy the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app has now been deployed to the Amplify Console and a new build will begin.
    When the build finishes, you should be given a live URL to view your app.
  prefs: []
  type: TYPE_NORMAL
- en: Git-Based CI/CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the app has been deployed, let’s look at how to implement CD into the
    app.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea with Git-based CI and CD is that you can deploy and test builds
    to any branch by pushing directly to Git. Once the changes are merged, a new build
    is kicked off and a live URL is given to you to try out.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can have feature/branch deployments, like *prod* (for production),
    *dev* (for development), and *feature_name* (for new features). When building
    in this way, you are able to test out new changes in a live environment, testing
    out not only the frontend but also the backend changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try kicking off a new build. To do so, make a change to one of the local
    files. Update *src/App.js* with some updated text, then add the changes and push
    to GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you open your app in the Amplify Console, you should notice a new
    build has been kicked off automatically for you.
  prefs: []
  type: TYPE_NORMAL
- en: Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let’s look at how to enable access control to password protect our deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Using access control, you can specify that a visitor must have a username and
    password to view either a deployment or a specific branch deployment. This is
    especially useful if you are testing out new private features that you wish to
    keep undiscoverable by anyone outside your team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to enable access controls:'
  prefs: []
  type: TYPE_NORMAL
- en: In the lefthand menu, click Access Control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click Manage Access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, for the master branch, set the Access setting to Restricted, then set
    a username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the URL for the deployment. You will notice that you will be unable
    to view it without entering the username and password.
  prefs: []
  type: TYPE_NORMAL
- en: In the Access Control menu, you can also choose to set access control on a branch-by-branch
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let’s learn how to use a custom domain name for our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable a custom domain, we need to do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the domain in Amazon Route53.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the nameservers in the DNS settings of the domain provider for the domain
    you are using.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Amplify Console app to use the domain added in Route 53.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s walk through how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Services dropdown menu in the main AWS dashboard, search for or click
    Route53.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Hosted Zones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Create Hosted Zone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the domain name by adding the URL to the Domain name input field, then click
    Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating the Hosted Zone, you will be given four nameserver values. You
    will need those values in the next step, so keep them handy. You can also navigate
    back to them at any time by visiting the Route53 dashboard and clicking on the
    domain you would like to retrieve the values for. The nameservers will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, go into your hosting account (e.g., GoDaddy or Google Domains), and set
    these custom nameservers in your DNS setting for the domain you’re using.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, back in the Amplify Console for the app for which you would like to enable
    a custom domain, click Domain Management in the left menu, then click the Add
    Domain button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, the drop-down menu should show you the domain you have in Route53\. Choose
    this domain and click Configure domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should deploy the app to your custom domain (it will take 5–30 minutes
    for the DNS to propagate).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Amplify Console hosts both backend and as well as frontend deployments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two main ways to deploy the frontend to the Amplify Console, from
    your local project or from a Git repository. You can also upload projects manually
    or host them from Dropbox.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once your app is hosted, you can then set up things like password protection,
    custom domains, and branch deployments by configuring your deployment in the Amplify
    Console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
