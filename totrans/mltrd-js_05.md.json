["```\n<html>\n  <head>\n    <title>Shared Memory Hello World</title>\n    <script src=\"main.js\"></script>\n  </head>\n</html>\n```", "```\nif (!crossOriginIsolated) { ![1](Images/1.png)\n  throw new Error('Cannot use SharedArrayBuffer');\n}\n\nconst worker = new Worker('worker.js');\n\nconst buffer = new SharedArrayBuffer(1024); ![2](Images/2.png)\nconst view = new Uint8Array(buffer); ![3](Images/3.png)\n\nconsole.log('now', view[0]);\n\nworker.postMessage(buffer);\n\nsetTimeout(() => {\n  console.log('later', view[0]);\n  console.log('prop', buffer.foo); ![4](Images/4.png)\n}, 500);\n```", "```\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\n```", "```\nself.onmessage = ({data: buffer}) => {\n  buffer.foo = 42; ![1](Images/1.png)\n  const view = new Uint8Array(buffer);\n  view[0] = 2; ![2](Images/2.png)\n  console.log('updated in worker');\n};\n```", "```\n$ npx MultithreadedJSBook/serve .\n```", "```\n#!/usr/bin/env node\n\nconst { Worker } = require('worker_threads');\nconst worker = new Worker(__dirname + '/worker-node.js');\n\nconst buffer = new SharedArrayBuffer(1024);\nconst view = new Uint8Array(buffer);\n\nconsole.log('now', view[0]);\n\nworker.postMessage(buffer);\n\nsetTimeout(() => {\n  console.log('later', view[0]);\n  console.log('prop', buffer.foo);\n  worker.unref();\n}, 500);\n```", "```\nconst { parentPort } = require('worker_threads');\n\nparentPort.on('message', (buffer) => {\n  buffer.foo = 42;\n  const view = new Uint8Array(buffer);\n  view[0] = 2;\n  console.log('updated in worker');\n});\n```", "```\n$ node main-node.js\n```", "```\nconst ab = new ArrayBuffer(8);\nconst view = new Uint8Array(ab)\nfor (i = 0; i < 8; i++) view[i] = i;\nconsole.log(view);\n// Uint8Array(8) [\n//   0, 1, 2, 3,\n//   4, 5, 6, 7\n// ]\nab.byteLength; // 8\nab.slice(); // 0, 1, 2, 3, 4, 5, 6, 7\nab.slice(4, 6); // 4, 5\nab.slice(-3, -2); // 5\n```", "```\nconst buffer = new ArrayBuffer(16);\n\nconst view64 = new Float64Array(buffer);\nview64[0] = 1.1234567890123456789; // bytes 0 - 7\nconsole.log(view64[0]); // 1.1234567890123457\n\nconst view32 = new Float32Array(buffer);\nview32[2] = 1.1234567890123456789; // bytes 8 - 11\nconsole.log(view32[2]); // 1.1234568357467651\n```", "```\nconst buffer = new ArrayBuffer(8);\nconst view = new Uint8Array(buffer);\nview[0] = 255;    view[1] = 256;\nview[2] = 257;    view[3] = -1;\nview[4] = 1.1;    view[5] = 1.999;\nview[6] = -1.1;   view[7] = -1.9;\nconsole.log(view);\n```", "```\nold = Atomics.add(typedArray, index, value)\n```", "```\nconst old = typedArray[index];\ntypedArray[index] = old + value;\nreturn old;\n```", "```\nold = Atomics.and(typedArray, index, value)\n```", "```\nconst old = typedArray[index];\ntypedArray[index] = old & value;\nreturn old;\n```", "```\nold = Atomics.compareExchange(typedArray, index, oldExpectedValue, value)\n```", "```\nconst old = typedArray[index];\nif (old === oldExpectedValue) {\n  typedArray[index] = value;\n}\nreturn old;\n```", "```\nold = Atomics.exchange(typedArray, index, value)\n```", "```\nconst old = typedArray[index];\ntypedArray[index] = value;\nreturn old;\n```", "```\nfree = Atomics.isLockFree(size)\n```", "```\nvalue = Atomics.load(typedArray, index)\n```", "```\nconst old = typedArray[index];\nreturn old;\n```", "```\nold = Atomics.or(typedArray, index, value)\n```", "```\nconst old = typedArray[index];\ntypedArray[index] = old | value;\nreturn old;\n```", "```\nvalue = Atomics.store(typedArray, index, value)\n```", "```\ntypedArray[index] = value;\nreturn value;\n```", "```\nold = Atomics.sub(typedArray, index, value)\n```", "```\nconst old = typedArray[index];\ntypedArray[index] = old - value;\nreturn old;\n```", "```\nold = Atomics.xor(typedArray, index, value)\n```", "```\nconst old = typedArray[index];\ntypedArray[index] = old ^ value;\nreturn old;\n```", "```\nlet old1 = Atomics.compareExchange(typedArray, 0, 7, 1); // Thread #1\nlet old2 = Atomics.compareExchange(typedArray, 0, 7, 2); // Thread #2\n```", "```\nconst old = typedArray[0]; // GET()\nif (old === oldExpectedValue) {\n  typedArray[0] = value;   // SET(value)\n}\n```", "```\nconst buffer = new ArrayBuffer(1);\nconst view = new Uint8Array(buffer);\nfunction setBool(slot, value) {\n  view[0] = (view[0] & ~(1 << slot)) | ((value|0) << slot);\n}\nfunction getBool(slot) {\n  return !((view[0] & (1 << slot)) === 0);\n}\n```", "```\n// Warning: Antipattern!\nfunction stringToArrayBuffer(str) {\n  const buffer = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n\nstringToArrayBuffer('foo'); // Uint8Array(3) [ 102, 111, 111 ]\nstringToArrayBuffer('€');   // Uint8Array(1) [ 172 ]\n```", "```\nconst enc = new TextEncoder();\nenc.encode('foo'); // Uint8Array(3) [ 102, 111, 111 ]\nenc.encode('€');   // Uint8Array(3) [ 226, 130, 172 ]\n```", "```\nconst ab = new ArrayBuffer(3);\nconst view = new Uint8Array(ab);\nview[0] = 226; view[1] = 130; view[2] = 172;\nconst dec = new TextDecoder();\ndec.decode(view); // '€'\ndec.decode(ab);   // '€'\n```", "```\nconst enc = new TextEncoder();\nreturn enc.encode(JSON.stringify(obj));\n```"]