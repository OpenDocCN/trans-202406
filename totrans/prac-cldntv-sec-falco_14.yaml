- en: Chapter 11\. Using Falco for Cloud Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you’ve learned all you need to know about configuring and running
    Falco, it’s time to focus on an important topic that can have a huge impact on
    your security posture: cloud security.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this book, there is a good chance that some of your software
    (or all of it!) runs in the cloud. Since AWS is the leading provider of cloud
    services, there is also a good chance that your software is running there.
  prefs: []
  type: TYPE_NORMAL
- en: Public clouds are great environments to run software. Their support for elasticity,
    flexibility, and automation makes building and running apps easier and more efficient.
    However, cloud-based apps and the data they use are exposed to attacks from the
    whole planet. They are also exposed to misconfigurations, mistakes, and malicious
    behavior from internal teams.
  prefs: []
  type: TYPE_NORMAL
- en: A comprehensive security posture needs to take many domains into account, including
    applications, users (external and internal), and data. Failing to properly protect
    any one of these domains will result in gaps and therefore in risk. For example,
    protecting workloads that run in containers and hosts (which you can do effectively
    with Falco) is not beneficial unless you also cover the cloud infrastructure where
    these workloads run.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Falco can bridge this gap and help you achieve the coverage you
    need. Let’s learn how!
  prefs: []
  type: TYPE_NORMAL
- en: Why Falco for AWS Security?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud security is a fertile and constantly evolving space with many implementation
    options. Architecturally, most of those options fall into two basic categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Tools that query cloud APIs or watch cloud data stores to detect misconfigurations
    or vulnerabilities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tools that stream cloud logs into a backend, index them, and let you query them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your goal is to detect threats in cloud-based software, tools in category
    1 won’t be very useful. Polling is great for detecting gaps and validating compliance,
    but lacks the real-time nature required to detect threats and respond quickly.
    Category 2 tools are powerful, but also tremendously expensive (especially in
    environments like the public cloud, where tons of logs are produced) and not friendly
    to deploy and use.
  prefs: []
  type: TYPE_NORMAL
- en: The Falco runtime security approach provides a very effective solution to this
    problem. Falco’s philosophy is based on three key concepts. First, it parses data
    in a streaming fashion to detect threats in real time. Second, it implements detection
    on top of an engine that is lightweight to run and easy to deploy. Third, it offers
    a compact rule language that is quick to learn but flexible and expressive. This
    philosophy, as you’ve seen throughout the book, is very effective with system
    calls and works equally well when applied to logs like those produced by AWS CloudTrail.
  prefs: []
  type: TYPE_NORMAL
- en: Falco consumes few resources and, most importantly, analyzes the data in a streaming
    way—no need to perform expensive copies or wait until the data is indexed. Falco
    looks at your data in real time and notifies you of problems in seconds. Getting
    it up and running takes only a few minutes, as you saw in [Part I](part01.xhtml#i_the_basics)
    of this book, and adopting it for both cloud logs and system calls allows a unified
    approach to threat detection. Let’s look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Falco’s Architecture and AWS Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When deployed in the context of AWS infrastructure security, Falco implements
    detections on top of a specific data source: the logs generated by AWS CloudTrail.
    The way this works is shown in [Figure 11-1](#the_high_level_architecture_of_a_falco).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pcns_1101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. The high-level architecture of a Falco deployment for AWS security
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: CloudTrail is a log aggregation service offered by Amazon. It collects logs
    from hundreds of AWS services and stores them in S3, using a consistent and well-documented
    format. CloudTrail is easy to set up and offers a coherent layer that insulates
    the customer from the complexities of collecting logs of users’ and services’
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: CloudTrail events are entries in JSON files that CloudTrail writes in the S3
    bucket at regular intervals. Falco understands how to read and parse these events
    thanks to the CloudTrail plugin ([Figure 11-2](#event_collection_with_the_cloudtrail_pl)),
    which is created and maintained by the Falco community. (If you need a refresher
    on what Falco plugins are and how they work, see [Chapter 4](ch04.xhtml#data_source).)
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pcns_1102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-2\. Event collection with the CloudTrail plugin
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In addition to offering multiple methods to collect CloudTrail logs (more on
    each of these methods later in the chapter), the CloudTrail plugin extends Falco
    with AWS-specific fields, which you can use to create rules like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once Falco’s CloudTrail plugin is configured with a CloudTrail trail as an input,
    Falco will continuously analyze the trail’s upcoming data, providing real-time
    anomaly and threat detection. It’s like having a security camera for your cloud
    activity!
  prefs: []
  type: TYPE_NORMAL
- en: Detection Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some of the things you can detect with Falco when it’s configured
    for AWS security:'
  prefs: []
  type: TYPE_NORMAL
- en: Someone logs into the AWS console without multifactor authentication (MFA).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Someone deactivates MFA for the root user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Someone creates a new AWS user or group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Someone runs instances in a nonapproved region.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Someone changes the permissions of an S3 bucket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Someone disables CloudTrail logging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the full list, refer to the CloudTrail [rules file](https://oreil.ly/beQYF).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and Running Falco for CloudTrail Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part of the chapter will outline approaches to setting up cloud security
    using Falco, describe the components, and guide you through configuring everything
    properly. As we mentioned, Falco’s integration with CloudTrail happens through
    the [CloudTrail plugin](https://oreil.ly/OWVgb). The plugin can be configured
    to receive log files in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: A Simple Queue Service (SQS) queue that passes along Simple Notification Service
    (SNS) notifications about new log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An S3 bucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local filesystem path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of these three methods, the first one is what you will use in the vast majority
    of production situations, so we will focus on it first.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving Log Files Through an SQS Queue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This deployment method consists of leveraging SQS to notify Falco when new CloudTrail
    logs are produced. Falco monitors the SQS queue and parses new logs in real time
    when they arrive. The process is depicted in [Figure 11-3](#sqs_queue_collection_diagram).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pcns_1103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-3\. SQS queue collection diagram
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The process of setting up Falco in this configuration involves three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CloudTrail trail and configuring it with an SNS topic. The SNS
    topic detects changes to the S3 bucket where the trail is depositing the files
    and broadcasts them to the world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the SQS queue and attaching it to the SNS topic. This creates an endpoint
    that Falco can use to detect the arrival of new data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Falco to receive the logs using the SQS queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will guide you with step-by-step instructions to set all of this up, so
    you have full knowledge of the moving parts. Before doing that, however, we’ll
    show you the easy shortcut: a Terraform module that will do the work for you.'
  prefs: []
  type: TYPE_NORMAL
- en: Terraform-based deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the Terraform module on [GitHub](https://oreil.ly/4qvQX). Clone
    the repository to your local machine and then execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, you should get output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now use `*<QUEUE_NAME>*` in your *falco.yaml* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, configure the `rules_file` section of *falco.yaml* to load the CloudTrail
    rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: and you’re ready to launch Falco!
  prefs: []
  type: TYPE_NORMAL
- en: Manual deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the steps to follow to set up Falco with an SQS queue if you don’t
    want to use the Terraform script. The first step is to create the trail. You can
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the CloudTrail section of the AWS console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Create trail.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the trail *Falco.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the storage location, you can either pick an existing trail or tell AWS to
    create a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck “Log file SSE-KMS encryption.” SSE encryption is something you should
    definitely use as a good practice, but configuring it goes beyond the scope of
    this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check “SNS notification delivery.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under “Create a new SNS topic,” select New and name the topic *falco-cloudtrail-logs*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The “Choose log events” page lets you pick which logs you want to capture. The
    default settings are enough for Falco to operate properly. Checking “Data events”
    or “Exclude Amazon RDS Data API events” will allow you, if you desire, to craft
    more granular rules on data events, like S3 bucket-level and object-level access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Create trail.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the SQS queue:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the SQS section of the AWS console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Create queue.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the queue *falco-queue*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default access policy will work as is with Falco. However, consider implementing
    a less privileged access policy, for example using the [AWS Policy Generator](https://oreil.ly/fyxDD).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Create queue” at the bottom of the page. This will bring you to the *falco-queue*
    details page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Subscribe to Amazon SNS topic.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the topic whose name ends in *falco-cloudtrail-logs*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you need to configure Falco. This involves setting up AWS authentication
    and configuring Falco itself. To read log files from an S3 bucket or SNS notifications
    from an SQS queue Falco needs authentication credentials, and it needs to be configured
    with an AWS region. Falco relies on the same authentication mechanisms used by
    the [AWS Go SDK](https://oreil.ly/DmUSL): environment variables or shared configuration
    files. Configure these as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the AWS region with `AWS_REGION=*xxx*`, the access key ID with `AWS_ACCESS_KEY_ID=*xxx*`,
    and the secret key with `AWS_SECRET_ACCESS_KEY=*xxx*`. Here’s a sample command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Shared configuration files
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the AWS region in a file at *$HOME/.aws/config* and the credentials
    in a file at *$HOME/.aws/credentials*. Here are some examples of what these files
    will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, set up Falco itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following snippet to *falco.yaml* to configure SQS-based log collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the `rules_file` section of *falco.yaml* to load the CloudTrail rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start Falco.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Et voilà:* your AWS infrastructure is now protected!'
  prefs: []
  type: TYPE_NORMAL
- en: Reading Events from an S3 Bucket or the Local Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the SQS-based setup is recommended for real-time detection, Falco can
    also read CloudTrail logs directly from the S3 bucket or from a copy of the logs
    stored in the local filesystem. While the SQS setup processes “live” logs as they
    arrive, the S3 and local filesystem setups read stored data. This means they effectively
    operate in the past and cause Falco to exit when they reach the end of the currently
    stored data. This approach can be valuable for a couple of reasons. First, it
    allows you to iterate quickly during rule development. Second, it allows you to
    run Falco “back in time” on CloudTrail logs that have already been stored (even
    if they’ve been stored for a long time). Curious if (or when) somebody has changed
    the permissions of a bucket during the last three weeks? Point Falco to the logs
    and you can find out easily!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at how to run Falco in this mode.
  prefs: []
  type: TYPE_NORMAL
- en: S3 bucket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, you need to set up AWS authentication. We just described how to do this
    for SQS access, and it works exactly the same for S3, so just go back and follow
    the steps at the end of the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve configured AWS authentication, add the following snippet to *falco.yaml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note how the `open_params` key is just the URI of the trail location on S3,
    which you can easily obtain by navigating to the data in the S3 console and then
    clicking “Copy S3 URI.” You don’t need to specify the whole bucket; you can point
    to a subdirectory or even a specific log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you need to configure the `rules_file` section of *falco.yaml* to load
    the CloudTrail rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After that, you can just run Falco. It will process every file below the provided
    S3 URI and return when it’s done.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing the logs from a machine outside AWS, such as your laptop, might be pretty
    slow, because the machine needs to download the data in order to process it. You
    can speed things up by increasing the download concurrency (`s3DownloadConcurrency`
    in the `init_config` key), or predownload the data locally using the AWS CLI and
    then point Falco to the local logs (which we’ll describe next).
  prefs: []
  type: TYPE_NORMAL
- en: Local filesystem path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can process CloudTrail logs stored in the local filesystem by putting the
    following configuration in *falco.yaml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can point to a single file or to a directory, in which case Falco will recursively
    read all of the files in the directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to edit the `rules_file` section of *falco.yaml* to load
    the CloudTrail rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve done that, just run Falco. It will process all of the files and
    exit when it’s done.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Falco’s AWS Ruleset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Falco comes with a powerful set of CloudTrail-based rules. However, if you need
    customization, the CloudTrail plugin exports a rich set of fields that you can
    use to craft your own rules with a high level of granularity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing Falco rules will be extensively covered in [Chapter 13](ch13.xhtml#writing_falco_rules).
    However, since that chapter is primarily focused on system call–based rules, here
    are a couple of tips that will help you get started with cloud rules development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CloudTrail rules need to include the following key: `source: aws_cloudtrail`.
    This tells Falco that the fields in the rule condition and output must come from
    the CloudTrail plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can obtain a list of fields you can use in a CloudTrail rule by using the
    `--list=aws_cloudtrail` Falco command-line switch. Also, take a look at [Table 6-10](ch06.xhtml#cloudtrail_filter_class_fields)
    in [Chapter 6](ch06.xhtml#fields_and_filters).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What About Other Clouds?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS is a very important player in cloud computing, so Falco added support for
    it first. However, at the time of writing the Falco community was working on adding
    support for both Microsoft Azure and Google Cloud Platform. Expect more clouds
    to be added in the long term!
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out if Falco supports your cloud, check out the [plugins
    repository on GitHub](https://oreil.ly/W20tv).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that Falco is about more than system calls and
    containers, and how you can employ it to protect your cloud software and vastly
    improve your security posture. In the next chapter we will switch to the output
    side and show you how to collect and treat Falco events.
  prefs: []
  type: TYPE_NORMAL
