["```\nvar log = function(message) {\n  console.log(message);\n};\n\nlog(\"In JavaScript, functions are variables\");\n\n// In JavaScript, functions are variables\n```", "```\nconst log = message => {\n  console.log(message);\n};\n```", "```\nconst obj = {\n  message: \"They can be added to objects like variables\",\n  log(message) {\n    console.log(message);\n  }\n};\n\nobj.log(obj.message);\n\n// They can be added to objects like variables\n```", "```\nconst messages = [\n  \"They can be inserted into arrays\",\n  message => console.log(message),\n  \"like variables\",\n  message => console.log(message)\n];\n\nmessages[1](messages[0]); // They can be inserted into arrays\nmessages[3](messages[2]); // like variables\n```", "```\nconst insideFn = logger => {\n  logger(\"They can be sent to other functions as arguments\");\n};\n\ninsideFn(message => console.log(message));\n\n// They can be sent to other functions as arguments\n```", "```\nconst createScream = function(logger) {\n  return function(message) {\n    logger(message.toUpperCase() + \"!!!\");\n  };\n};\n\nconst scream = createScream(message => console.log(message));\n\nscream(\"functions can be returned from other functions\");\nscream(\"createScream returns a function\");\nscream(\"scream invokes that returned function\");\n\n// FUNCTIONS CAN BE RETURNED FROM OTHER FUNCTIONS!!!\n// CREATESCREAM RETURNS A FUNCTION!!!\n// SCREAM INVOKES THAT RETURNED FUNCTION!!!\n```", "```\nconst createScream = logger => message => {\n  logger(message.toUpperCase() + \"!!!\");\n};\n```", "```\nconst string = \"Restaurants in Hanalei\";\nconst urlFriendly = \"\";\n\nfor (var i = 0; i < string.length; i++) {\n  if (string[i] === \" \") {\n    urlFriendly += \"-\";\n  } else {\n    urlFriendly += string[i];\n  }\n}\n\nconsole.log(urlFriendly); // \"Restaurants-in-Hanalei\"\n```", "```\nconst string = \"Restaurants in Hanalei\";\nconst urlFriendly = string.replace(/ /g, \"-\");\n\nconsole.log(urlFriendly);\n```", "```\nconst loadAndMapMembers = compose(\n  combineWith(sessionStorage, \"members\"),\n  save(sessionStorage, \"members\"),\n  scopeMembers(window),\n  logMemberInfoToConsole,\n  logFieldsToConsole(\"name.first\"),\n  countMembersBy(\"location.state\"),\n  prepStatesForMapping,\n  save(sessionStorage, \"map\"),\n  renderUSMap\n);\n\ngetFakeMembers(100).then(loadAndMapMembers);\n```", "```\nconst target = document.getElementById(\"target\");\nconst wrapper = document.createElement(\"div\");\nconst headline = document.createElement(\"h1\");\n\nwrapper.id = \"welcome\";\nheadline.innerText = \"Hello World\";\n\nwrapper.appendChild(headline);\ntarget.appendChild(wrapper);\n```", "```\nconst { render } = ReactDOM;\n\nconst Welcome = () => (\n  <div id=\"welcome\">\n    <h1>Hello World</h1>\n  </div>\n);\n\nrender(<Welcome />, document.getElementById(\"target\"));\n```", "```\nlet color_lawn = {\n  title: \"lawn\",\n  color: \"#00FF00\",\n  rating: 0\n};\n```", "```\nfunction rateColor(color, rating) {\n  color.rating = rating;\n  return color;\n}\n\nconsole.log(rateColor(color_lawn, 5).rating); // 5\nconsole.log(color_lawn.rating); // 5\n```", "```\nconst rateColor = function(color, rating) {\n  return Object.assign({}, color, { rating: rating });\n};\n\nconsole.log(rateColor(color_lawn, 5).rating); // 5\nconsole.log(color_lawn.rating); // 0\n```", "```\nconst rateColor = (color, rating) => ({\n  ...color,\n  rating\n});\n```", "```\nlet list = [{ title: \"Rad Red\" }, { title: \"Lawn\" }, { title: \"Party Pink\" }];\n```", "```\nconst addColor = function(title, colors) {\n  colors.push({ title: title });\n  return colors;\n};\n\nconsole.log(addColor(\"Glam Green\", list).length); // 4\nconsole.log(list.length); // 4\n```", "```\nconst addColor = (title, array) => array.concat({ title });\n\nconsole.log(addColor(\"Glam Green\", list).length); // 4\nconsole.log(list.length); // 3\n```", "```\nconst addColor = (title, list) => [...list, { title }];\n```", "```\nconst frederick = {\n  name: \"Frederick Douglass\",\n  canRead: false,\n  canWrite: false\n};\n\nfunction selfEducate() {\n  frederick.canRead = true;\n  frederick.canWrite = true;\n  return frederick;\n}\n\nselfEducate();\nconsole.log(frederick);\n\n// {name: \"Frederick Douglass\", canRead: true, canWrite: true}\n```", "```\nconst frederick = {\n  name: \"Frederick Douglass\",\n  canRead: false,\n  canWrite: false\n};\n\nconst selfEducate = person => {\n  person.canRead = true;\n  person.canWrite = true;\n  return person;\n};\n\nconsole.log(selfEducate(frederick));\nconsole.log(frederick);\n\n// {name: \"Frederick Douglass\", canRead: true, canWrite: true}\n// {name: \"Frederick Douglass\", canRead: true, canWrite: true}\n```", "```\nconst frederick = {\n  name: \"Frederick Douglass\",\n  canRead: false,\n  canWrite: false\n};\n\nconst selfEducate = person => ({\n  ...person,\n  canRead: true,\n  canWrite: true\n});\n\nconsole.log(selfEducate(frederick));\nconsole.log(frederick);\n\n// {name: \"Frederick Douglass\", canRead: true, canWrite: true}\n// {name: \"Frederick Douglass\", canRead: false, canWrite: false}\n```", "```\nfunction Header(text) {\n  let h1 = document.createElement(\"h1\");\n  h1.innerText = text;\n  document.body.appendChild(h1);\n}\n\nHeader(\"Header() caused side effects\");\n```", "```\nconst Header = props => <h1>{props.title}</h1>;\n```", "```\nconst schools = [\"Yorktown\", \"Washington & Liberty\", \"Wakefield\"];\n```", "```\nconsole.log(schools.join(\", \"));\n\n// \"Yorktown, Washington & Liberty, Wakefield\"\n```", "```\nconst wSchools = schools.filter(school => school[0] === \"W\");\n\nconsole.log(wSchools);\n// [\"Washington & Liberty\", \"Wakefield\"]\n```", "```\nconst cutSchool = (cut, list) => list.filter(school => school !== cut);\n\nconsole.log(cutSchool(\"Washington & Liberty\", schools).join(\", \"));\n\n// \"Yorktown, Wakefield\"\n\nconsole.log(schools.join(\"\\n\"));\n\n// Yorktown\n// Washington & Liberty\n// Wakefield\n```", "```\nconst highSchools = schools.map(school => `${school} High School`);\n\nconsole.log(highSchools.join(\"\\n\"));\n\n// Yorktown High School\n// Washington & Liberty High School\n// Wakefield High School\n\nconsole.log(schools.join(\"\\n\"));\n\n// Yorktown\n// Washington & Liberty\n// Wakefield\n```", "```\nconst highSchools = schools.map(school => ({ name: school }));\n\nconsole.log(highSchools);\n\n// [\n// { name: \"Yorktown\" },\n// { name: \"Washington & Liberty\" },\n// { name: \"Wakefield\" }\n// ]\n```", "```\nlet schools = [\n  { name: \"Yorktown\" },\n  { name: \"Stratford\" },\n  { name: \"Washington & Liberty\" },\n  { name: \"Wakefield\" }\n];\n\nlet updatedSchools = editName(\"Stratford\", \"HB Woodlawn\", schools);\n\nconsole.log(updatedSchools[1]); // { name: \"HB Woodlawn\" }\nconsole.log(schools[1]); // { name: \"Stratford\" }\n```", "```\nconst editName = (oldName, name, arr) =>\n  arr.map(item => {\n    if (item.name === oldName) {\n      return {\n        ...item,\n        name\n      };\n    } else {\n      return item;\n    }\n  });\n```", "```\nconst editName = (oldName, name, arr) =>\n  arr.map(item => (item.name === oldName ? { ...item, name } : item));\n```", "```\nconst schools = {\n  Yorktown: 10,\n  \"Washington & Liberty\": 2,\n  Wakefield: 5\n};\n\nconst schoolArray = Object.keys(schools).map(key => ({\n  name: key,\n  wins: schools[key]\n}));\n\nconsole.log(schoolArray);\n\n// [\n// {\n// name: \"Yorktown\",\n// wins: 10\n// },\n// {\n// name: \"Washington & Liberty\",\n// wins: 2\n// },\n// {\n// name: \"Wakefield\",\n// wins: 5\n// }\n// ]\n```", "```\nconst ages = [21, 18, 42, 40, 64, 63, 34];\n\nconst maxAge = ages.reduce((max, age) => {\n  console.log(`${age} > ${max} = ${age > max}`);\n  if (age > max) {\n    return age;\n  } else {\n    return max;\n  }\n}, 0);\n\nconsole.log(\"maxAge\", maxAge);\n\n// 21 > 0 = true\n// 18 > 21 = false\n// 42 > 21 = true\n// 40 > 42 = false\n// 64 > 42 = true\n// 63 > 64 = false\n// 34 > 64 = false\n// maxAge 64\n```", "```\nconst max = ages.reduce((max, value) => (value > max ? value : max), 0);\n```", "```\nconst colors = [\n  {\n    id: \"xekare\",\n    title: \"rad red\",\n    rating: 3\n  },\n  {\n    id: \"jbwsof\",\n    title: \"big blue\",\n    rating: 2\n  },\n  {\n    id: \"prigbj\",\n    title: \"grizzly grey\",\n    rating: 5\n  },\n  {\n    id: \"ryhbhsl\",\n    title: \"banana\",\n    rating: 1\n  }\n];\n\nconst hashColors = colors.reduce((hash, { id, title, rating }) => {\n  hash[id] = { title, rating };\n  return hash;\n}, {});\n\nconsole.log(hashColors);\n\n// {\n// \"xekare\": {\n// title:\"rad red\",\n// rating:3\n// },\n// \"jbwsof\": {\n// title:\"big blue\",\n// rating:2\n// },\n// \"prigbj\": {\n// title:\"grizzly grey\",\n// rating:5\n// },\n// \"ryhbhsl\": {\n// title:\"banana\",\n// rating:1\n// }\n// }\n```", "```\nconst colors = [\"red\", \"red\", \"green\", \"blue\", \"green\"];\n\nconst uniqueColors = colors.reduce(\n  (unique, color) =>\n    unique.indexOf(color) !== -1 ? unique : [...unique, color],\n  []\n);\n\nconsole.log(uniqueColors);\n\n// [\"red\", \"green\", \"blue\"]\n```", "```\nconst invokeIf = (condition, fnTrue, fnFalse) =>\n  condition ? fnTrue() : fnFalse();\n\nconst showWelcome = () => console.log(\"Welcome!!!\");\n\nconst showUnauthorized = () => console.log(\"Unauthorized!!!\");\n\ninvokeIf(true, showWelcome, showUnauthorized); // \"Welcome!!!\"\ninvokeIf(false, showWelcome, showUnauthorized); // \"Unauthorized!!!\"\n```", "```\nconst userLogs = userName => message =>\n  console.log(`${userName} -> ${message}`);\n\nconst log = userLogs(\"grandpa23\");\n\nlog(\"attempted to load 20 fake members\");\ngetFakeMembers(20).then(\n  members => log(`successfully loaded ${members.length} members`),\n  error => log(\"encountered an error loading members\")\n);\n\n// grandpa23 -> attempted to load 20 fake members\n// grandpa23 -> successfully loaded 20 members\n\n// grandpa23 -> attempted to load 20 fake members\n// grandpa23 -> encountered an error loading members\n```", "```\nconst countdown = (value, fn) => {\n  fn(value);\n  return value > 0 ? countdown(value - 1, fn) : value;\n};\n\ncountdown(10, value => console.log(value));\n\n// 10\n// 9\n// 8\n// 7\n// 6\n// 5\n// 4\n// 3\n// 2\n// 1\n// 0\n```", "```\nconst countdown = (value, fn, delay = 1000) => {\n  fn(value);\n  return value > 0\n    ? setTimeout(() => countdown(value - 1, fn, delay), delay)\n    : value;\n};\n\nconst log = value => console.log(value);\ncountdown(10, log);\n```", "```\nconst dan = {\n  type: \"person\",\n  data: {\n    gender: \"male\",\n    info: {\n      id: 22,\n      fullname: {\n        first: \"Dan\",\n        last: \"Deacon\"\n      }\n    }\n  }\n};\n\ndeepPick(\"type\", dan); // \"person\"\ndeepPick(\"data.info.fullname.first\", dan); // \"Dan\"\n```", "```\nconst deepPick = (fields, object = {}) => {\n  const [first, ...remaining] = fields.split(\".\");\n  return remaining.length\n    ? deepPick(remaining.join(\".\"), object[first])\n    : object[first];\n};\n```", "```\ndeepPick(\"data.info.fullname.first\", dan); // \"Dan\"\n\n// First Iteration\n// first = \"data\"\n// remaining.join(\".\") = \"info.fullname.first\"\n// object[first] = { gender: \"male\", {info} }\n\n// Second Iteration\n// first = \"info\"\n// remaining.join(\".\") = \"fullname.first\"\n// object[first] = {id: 22, {fullname}}\n\n// Third Iteration\n// first = \"fullname\"\n// remaining.join(\".\" = \"first\"\n// object[first] = {first: \"Dan\", last: \"Deacon\" }\n\n// Finally...\n// first = \"first\"\n// remaining.length = 0\n// object[first] = \"Deacon\"\n```", "```\nconst template = \"hh:mm:ss tt\";\nconst clockTime = template\n  .replace(\"hh\", \"03\")\n  .replace(\"mm\", \"33\")\n  .replace(\"ss\", \"33\")\n  .replace(\"tt\", \"PM\");\n\nconsole.log(clockTime);\n\n// \"03:33:33 PM\"\n```", "```\nconst both = date => appendAMPM(civilianHours(date));\n```", "```\nconst both = compose(\n  civilianHours,\n  appendAMPM\n);\n\nboth(new Date());\n```", "```\nconst compose = (...fns) => arg =>\n  fns.reduce((composed, f) => f(composed), arg);\n```", "```\n// Log Clock Time every Second\nsetInterval(logClockTime, 1000);\n\nfunction logClockTime() {\n  // Get Time string as civilian time\n  let time = getClockTime();\n\n  // Clear the Console and log the time\n  console.clear();\n  console.log(time);\n}\n\nfunction getClockTime() {\n  // Get the Current Time\n  let date = new Date();\n  let time = \"\";\n\n  // Serialize clock time\n  let time = {\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds(),\n    ampm: \"AM\"\n  };\n\n  // Convert to civilian time\n  if (time.hours == 12) {\n    time.ampm = \"PM\";\n  } else if (time.hours > 12) {\n    time.ampm = \"PM\";\n    time.hours -= 12;\n  }\n\n  // Prepend a 0 on the hours to make double digits\n  if (time.hours < 10) {\n    time.hours = \"0\" + time.hours;\n  }\n\n  // prepend a 0 on the minutes to make double digits\n  if (time.minutes < 10) {\n    time.minutes = \"0\" + time.minutes;\n  }\n\n  // prepend a 0 on the seconds to make double digits\n  if (time.seconds < 10) {\n    time.seconds = \"0\" + time.seconds;\n  }\n\n  // Format the clock time as a string \"hh:mm:ss tt\"\n  return time.hours + \":\" + time.minutes + \":\" + time.seconds + \" \" + time.ampm;\n}\n```", "```\nconst oneSecond = () => 1000;\nconst getCurrentTime = () => new Date();\nconst clear = () => console.clear();\nconst log = message => console.log(message);\n```", "```\nconst serializeClockTime = date => ({\n  hours: date.getHours(),\n  minutes: date.getMinutes(),\n  seconds: date.getSeconds()\n});\n\nconst civilianHours = clockTime => ({\n  ...clockTime,\n  hours: clockTime.hours > 12 ? clockTime.hours - 12 : clockTime.hours\n});\n\nconst appendAMPM = clockTime => ({\n  ...clockTime,\n  ampm: clockTime.hours >= 12 ? \"PM\" : \"AM\"\n});\n```", "```\nconst display = target => time => target(time);\n\nconst formatClock = format => time =>\n  format\n    .replace(\"hh\", time.hours)\n    .replace(\"mm\", time.minutes)\n    .replace(\"ss\", time.seconds)\n    .replace(\"tt\", time.ampm);\n\nconst prependZero = key => clockTime => ({\n  ...clockTime,\n  key: clockTime[key] < 10 ? \"0\" + clockTime[key] : clockTime[key]\n});\n```", "```\nconst convertToCivilianTime = clockTime =>\n  compose(\n    appendAMPM,\n    civilianHours\n  )(clockTime);\n\nconst doubleDigits = civilianTime =>\n  compose(\n    prependZero(\"hours\"),\n    prependZero(\"minutes\"),\n    prependZero(\"seconds\")\n  )(civilianTime);\n\nconst startTicking = () =>\n  setInterval(\n    compose(\n      clear,\n      getCurrentTime,\n      serializeClockTime,\n      convertToCivilianTime,\n      doubleDigits,\n      formatClock(\"hh:mm:ss tt\"),\n      display(log)\n    ),\n    oneSecond()\n  );\n\nstartTicking();\n```"]