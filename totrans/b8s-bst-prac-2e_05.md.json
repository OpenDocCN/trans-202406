["```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: frontend\n        image: brendanburns/frontend:v1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1 # Maximum amount of replicas to update at one time\n      maxUnavailable: 1 # Maximum amount of replicas unavailable during rollout\n```", "```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: frontend\n        image: brendanburns/frontend:v1\n        livenessProbe:\n          # ...\n        readinessProbe:\n          httpGet:\n            path: /readiness # probe endpoint\n            port: 8888\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/usr/sbin/nginx\",\"-s\",\"quit\"]\n  strategy:\n    # ...\n```", "```\nkubectl cluster-info\n```", "```\nkubectl create serviceaccount drone\n```", "```\nkubectl create clusterrolebinding drone-admin \\\n  --clusterrole=cluster-admin \\\n  --serviceaccount=default:drone\n```", "```\nTOKENNAME=`kubectl -n default get serviceaccount/drone\n    -o jsonpath='{.secrets[0].name}'`\nTOKEN=`kubectl -n default get secret $TOKENNAME -o jsonpath='{.data.token}' |\n    base64 -d`\necho $TOKEN\n```", "```\nkubectl get secret $TOKENNAME -o yaml | grep 'ca.crt:'\n```", "```\npipeline:\n  build:\n    image: node\n    commands:\n      - cd frontend\n      - npm i redis --save\n```", "```\ntest:\n    image: node\n    commands:\n      - cd frontend\n      - npm i redis --save\n      - npm test\n```", "```\nrepo: <your-registry>/frontend\n```", "```\npublish:\n    image: plugins/docker\n    dockerfile: ./frontend/Dockerfile\n    context: ./frontend\n    repo: dstrebel/frontend\n    tags: [latest, v2]\n    secrets: [ docker_username, docker_password ]\n```", "```\nkubectl:\n    image: dstrebel/drone-kubectl-helm\n    secrets: [ kubernetes_server, kubernetes_cert, kubernetes_token ]\n    kubectl: \"apply -f ./frontend/deployment.yaml\"\n```", "```\nkubectl get pods\n```", "```\n  test-deployment:\n    image: dstrebel/drone-kubectl-helm\n    secrets: [ kubernetes_server, kubernetes_cert, kubernetes_token ]\n    kubectl: \"get deployment frontend\"\n```", "```\nconsole.log('api server is running.');\n```", "```\npip install -U chaostoolkit\n```", "```\npip install chaostoolkit-kubernetes\n```", "```\nexport FRONTEND_URL=\"http://$(kubectl get svc frontend\n    -o jsonpath=\"{.status.loadBalancer.ingress[*].ip}\"):8080/api/\"\n```", "```\nchaos run experiment.json\n```"]