- en: Chapter 3\. Learning to Use the Kubernetes Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gathers recipes around the basic usage of the Kubernetes CLI, `kubectl`.
    See [Chapter 1](ch01.html#ch_getting_started) for how to install the CLI tool;
    for advanced use cases, see [Chapter 7](ch07.html#ch_kube_api), where we show
    how to use the Kubernetes API.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Listing Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to list Kubernetes resources of a certain kind.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `get` verb of `kubectl` along with the resource type. To list all pods,
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all services and deployments (note that there is no space after the
    comma), do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To list a specific deployment, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all resources, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that `kubectl get` is a very basic but extremely useful command to get
    a quick overview what is going on in the cluster—​it’s essentially the equivalent
    to `ps` on Unix.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We strongly recommend enabling autocompletion to avoid having to remember all
    the Kubernetes resource names. Head to [Recipe 12.1](ch12.html#kubectl_autocomplete)
    for details on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Deleting Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You no longer need resources and want to get rid of them.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `delete` verb of `kubectl` along with the type and name of the resource
    you want to delete.
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete all resources in the namespace `my-app`, as well as the namespace
    itself, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you cannot delete the `default` namespace in Kubernetes. This is
    another reason why it is worth creating your own namespaces, as it can be much
    easier to clean up the environment. Having said that, you can still delete all
    objects in a namespace, such as the `default` namespace, with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you’re wondering how to create a namespace, see [Recipe 7.3](ch07.html#namespace).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also delete specific resources and/or influence the process by which
    they are destroyed. To delete services and deployments labeled with `app=niceone`,
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To force deletion of a pod named `hangingpod`, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete all pods in the namespace `test`, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do not delete supervised objects such as pods or replica sets that are directly
    controlled by a deployment. Rather, kill their supervisors or use dedicated operations
    to get rid of the managed resources. For example, if you scale a deployment to
    zero replicas (see [Recipe 9.1](ch09.html#scaling-deployments)), then you effectively
    delete all the pods it looks after.
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect to take into account is cascading versus direct deletion—​for
    example, when you delete a custom resource definition (CRD), as shown in [Recipe
    15.4](ch15.html#writing_crd), all its dependent objects are deleted too. To learn
    more about how to influence the cascading deletion policy, read [Garbage Collection](https://oreil.ly/8AcpW)
    in the Kubernetes documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Watching Resource Changes with kubectl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to watch the changes to Kubernetes objects in an interactive manner
    in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `kubectl` command has a `--watch` option that gives you this behavior.
    For example, to watch pods, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that this is a blocking and auto-updating command, akin to `top`.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `--watch` option is useful, but some prefer the formatting of the output
    from the [`watch` command](https://oreil.ly/WPueN), as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 3.4 Editing Objects with kubectl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to update the properties of a Kubernetes object.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `edit` verb of `kubectl` along with the object type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now edit the `nginx` pod in your editor—​for example, add a new label called
    `mylabel` with the value `true`. Once you save, you’ll see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your editor isn’t opening or you want to specify which editor should be
    used, set the `EDITOR` or `KUBE_EDITOR` environment variable to the name of the
    editor you’d like to use. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Also be aware that not all changes trigger an object update.
  prefs: []
  type: TYPE_NORMAL
- en: Some triggers have shortcuts; for example, if you want to change the image version
    a deployment uses, simply use `kubectl set image`, which updates the existing
    container images of resources (valid for deployments, replica sets/replication
    controllers, daemon sets, jobs, and simple pods).
  prefs: []
  type: TYPE_NORMAL
- en: 3.5 Asking kubectl to Explain Resources and Fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to gain a deeper understanding of a certain resource—for example, a
    `Service`—and/or understand what exactly a certain field in a Kubernetes manifest
    means, including default values and if it’s required or optional.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `explain` verb of `kubectl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`kubectl explain`](https://oreil.ly/chI_-) command pulls the descriptions
    of resources and fields from the [Swagger/OpenAPI definitions](https://oreil.ly/19vi3),
    exposed by the API server.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of `kubectl explain` as a way to describe the structure of Kubernetes
    resources, whereas `kubectl describe` is a way to describe the values of objects,
    which are instances of those structured resources.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ross Kukulinski’s blog post, [“kubectl explain — #HeptioProTip”](https://oreil.ly/LulwG)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
