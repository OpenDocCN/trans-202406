- en: Chapter 9\. Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Three image types defined by CSS are described entirely with CSS: linear gradients,
    radial gradients, and conic gradients. Each type has two subtypes: repeating and
    nonrepeating. Gradients are most often used in backgrounds, though they can be
    used in any context where an image is permitted—as in `list-style-image` and `border-image`,
    for example.'
  prefs: []
  type: TYPE_NORMAL
- en: A *gradient* is a visual transition from one color to another. A gradient from
    yellow to red will start yellow, run through successively less yellow, redder
    shades of orange, and eventually arrive at a full red. How gradual or abrupt the
    transition is depends on the amount of space the gradient has and the way you
    define color stops and progression color hints. If you run from white to black
    over 100 pixels, each pixel along the gradient’s default progression will be another
    1% darker gray, as shown in [Figure 9-1](#cab_fig61).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0901](assets/css5_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. The progression of a simple gradient
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As we go through the process of exploring gradients, always keep this in mind:
    *gradients are images*. It doesn’t matter that you describe them by typing CSS—they
    are every bit as much images as SVGs, PNGs, JPEGs, and so on—but gradients have
    excellent rendering performance, don’t require an extra HTTP request to load,
    and are infinitely scalable.'
  prefs: []
  type: TYPE_NORMAL
- en: What’s interesting about gradients is that they have no intrinsic dimensions.
    If the `background-size` property’s value `auto` is used, it is treated as if
    it were `100%`. Thus, if you don’t define a `background-size` for a background
    gradient, it will be set to the default value of `auto`, which is the same as
    declaring `100% 100%`. So, by default, background gradients fill the entire background
    positioning area. Just note that if you offset the gradient’s background position
    with a length (not percentage) value, by default it will tile.
  prefs: []
  type: TYPE_NORMAL
- en: Linear Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Linear gradients* are gradient fills that proceed along a linear vector, referred
    to as the *gradient line*. Here are a few relatively simple gradients, with the
    results shown in [Figure 9-2](#cab_fig62):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0902](assets/css5_0902.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. Simple linear gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The first of these is the most basic that a gradient can be: two colors. This
    causes a gradient from the first color at the top of the background painting area
    to the second color at the bottom of the background painting area.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, a gradient runs from top to bottom because the default direction
    for gradients is `to bottom`, which is the same as `180deg` and its various equivalents
    (for example, `0.5turn`). If you’d like to go in a different direction, you can
    start the gradient value with a direction. That’s what we did for all the other
    gradients shown in [Figure 9-2](#cab_fig62).
  prefs: []
  type: TYPE_NORMAL
- en: 'A gradient must have, at minimum, two color stops. They can be the same color,
    though. If you want to have a solid color behind only part of your content, a
    gradient with the same color declared twice, along with a background size and
    a no-repeat, enables that, as shown in [Figure 9-3](#linear-gradients-solid-color-sized):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0903](assets/css5_0903.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3\. Solid-color gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The basic syntax of a linear gradient is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We’ll explore both color stop lists and color hints soon. For now, the basic
    pattern to keep in mind is an optional direction at the start, a list of color
    stops and/or color hints, and a color stop at the end. As shown earlier, a `linear-gradient()`
    value must have a minimum of two color stops.
  prefs: []
  type: TYPE_NORMAL
- en: While you use the `to` keyword only if you’re describing a side or quadrant
    with keywords like `top` and `right`, the direction you give *always* describes
    the direction in which the gradient line points. In other words, `linear-gradient(0deg,red,green)`
    will have red at the bottom and green at the top because the gradient line points
    toward 0 degrees (the top of the element) and thus ends with green. While it is
    indeed “going toward 0 degrees,” remember to omit the `to` if you’re using an
    angle value, because something like `to 45deg` is invalid and will be ignored.
    Degrees increase clockwise from 0 at the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important point is that while `0deg` is the same as `to top`, 45% is *not*
    the same as `to top right`. This is explained in [“Understanding Gradient Lines:
    The Gory Details”](#gradient-lines-the-gory-details). Equally important to remember
    is that when using angles, whether it’s degrees, radians, or turns, the unit type
    is *required*. A `0` value is not valid and will prevent any gradient from being
    created, while `0deg` is valid.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Gradient Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use any color value you like in gradients, including alpha-channel
    values such as `rgba()` and keywords like `transparent`. Thus it’s entirely possible
    to fade out pieces of your gradient by blending to (or from) a color with zero
    opacity. Consider the following rules, which are depicted in [Figure 9-4](#cab_fig63):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0904](assets/css5_0904.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-4\. Fading to white versus fading to transparent
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The first example fades from light gray to white, whereas the second example
    fades the same light gray from opaque to transparent, thus allowing the parent
    element’s yellow background to show through.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re not restricted to two colors, either. While that is the minimum number
    of colors allowed, you’re free to add as many colors as you can stand. Consider
    the following gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The gradient line points toward 90 degrees, which is the right side. There are
    14 color stops in all, one for each of the comma-separated color names, and they
    are, by default, distributed evenly along the gradient line, with the first at
    the beginning of the line and the last at the end. Between the color stops, by
    default the colors are blended as smoothly as possible from one color to the other.
    This is shown in [Figure 9-5](#cab_fig64), with extra labels indicating how far
    along the gradient line the color stops are placed.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0905](assets/css5_0905.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-5\. The distribution of color stops along the gradient line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: So, without any indication of where the color stops should be positioned, they’re
    evenly distributed. Fortunately, we can give each color up to two positions, and
    can even use color hints for more control over gradient progression, hopefully
    improving the visual effect.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning Color Stops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The full syntax of a <*`color-stop`*> is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After every color value, you can (but don’t have to) supply a position value
    or two. This gives you the ability to distort the default evenly distributed progression
    of color stops into something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start with lengths, since they’re pretty simple. Let’s take a rainbow
    progression (only a single rainbow this time) and have each color of the rainbow
    occur every 25 pixels, as shown in [Figure 9-6](#cab_fig65):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0906](assets/css5_0906.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-6\. Placing color stops every 25 pixels
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This worked out just fine, but notice what happens after 150 pixels—the violet
    just continues on to the end of the gradient line. That’s what happens if you
    set up the color stops so they don’t make it to the end of a basic gradient line:
    the last color is just carried onward.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Conversely, if your color stops go beyond the end of a basic gradient line,
    the gradient will appear to stop at whatever point it manages to reach when it
    gets to the end of the visible part of the gradient line. This is illustrated
    in [Figure 9-7](#cab_fig66), created with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0907](assets/css5_0907.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-7\. Gradient clipping when color stops go too far
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Since the last color stop is at 1,200 pixels but the background size isn’t nearly
    that wide, the visible part of the gradient stops right around the color `blue`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the preceding two examples and figures, the first color (`red`)
    doesn’t have a length value. If the first color has no position, it’s assumed
    to be the beginning of the gradient line, as if `0%` (or other zero value, like
    `0px`) had been declared. Similarly, if you leave a position off the last color
    stop, it’s assumed to be the end of the gradient line. (But note that this is
    not true for repeating gradients, which we’ll cover in [“Repeating Linear Gradients”](#repeating-linear-gradients).)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use any length value you like, not just pixels—ems, viewport units,
    you name it. You can even mix different units into the same gradient, although
    this is not generally recommended for reasons we’ll get to in a little bit. You
    can also have negative length values if you want; doing so will place a color
    stop before the beginning of the gradient line, all the color transitions will
    happen as expected, and clipping will occur in the same manner as it happens at
    the end of the line. The following code, for example, results in [Figure 9-8](#cab_fig67):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0908](assets/css5_0908.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-8\. Gradient clipping when color stops have negative positions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As for percentages, they’re calculated with respect to the total length of
    the gradient line. A color stop at `50%` will be at the midpoint of the gradient
    line. Let’s return to our rainbow example, and instead of having a color stop
    every 25 pixels, we’ll have one every 10% of the gradient line’s length. This
    would look like the following, which has the result shown in [Figure 9-9](#cab_fig68):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0909](assets/css5_0909.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-9\. Placing color stops every 10%
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you saw previously, since the last color stop comes before the end of the
    gradient line, its color (`violet`) is carried through to the end of the gradient.
    These stops are more spread out than in the earlier 25-pixel example, but otherwise
    things happen in more or less the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'If some color stops have position values and others don’t, the stops without
    positions are evenly distributed between the ones that do. The following are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Because `red` and `violet` don’t have specified position values, they’re taken
    to be `0%` and `100%`, respectively. This means that `orange`, `green`, and `blue`
    will be evenly distributed between the explicitly defined positions to either
    side of them.
  prefs: []
  type: TYPE_NORMAL
- en: For `orange`, that means the point midway between `red 0%` and `yellow 50%`,
    which is 25%. For `green` and `blue`, these need to be arranged between `yellow
    50%` and `indigo 95%`. That’s a 45% difference, which is divided in three, because
    there are three intervals between the four values. That means 65% and 80%.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might wonder what happens if you put two color stops at exactly the same
    point, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: All that happens is the two color stops are put on top of each other. [Figure 9-10](#cab_fig70)
    shows the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0910](assets/css5_0910.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-10\. The effect of coincident, or “hard,” color stops
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The gradient blends as usual all along the gradient line, but at the 50% point,
    it instantly blends from yellow to green over zero length, creating what’s often
    called a *hard* color stop. So the gradient blends from orange at the 25% point
    (halfway between 0% to 50%) to yellow at the 50% point, then blends from yellow
    to green over zero length, then blends from green at 50% over to blue at 66.67%
    (one-third of the way between 50% and 100%).
  prefs: []
  type: TYPE_NORMAL
- en: 'This hard-stop effect can be useful if you want to create a striped effect.
    The following code results in the stripes shown in [Figure 9-11](#cab_fig71):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0911](assets/css5_0911.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-11\. Hard-stop stripes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'That said, there’s an easier and more readable way to do that kind of thing,
    which is to give each color a starting and ending stop position. Here’s how to
    do that, with exactly the same result as shown in [Figure 9-11](#cab_fig71):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `0%` and `100%` could have been left out, and they’d be inferred
    by the browser. So you can leave them in for clarity or take them out for efficiency,
    as suits you.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also fine to mix two-stop stripes and one-stop color points in a single
    gradient. If you want to have the first and last quarter of the gradient be solid
    gray stripes and transition through transparency between them, it could look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, so that’s what happens if you put color stops right on top of each other,
    but what happens if you put one *before* the other? Something like this, say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The offending color stop (blue, in this case) is set to the largest specified
    value of a preceding color stop. Here, it is set to `50%`, since the stop before
    it has that position. This creates a hard stop, and we get the same effect we
    saw earlier, when the green and blue color stops were placed on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key point here is that the color stop is set to the largest *specified*
    position of the stop that precedes it. Thus, the following two gradients are visually
    the same, as the `indigo` color stop in the first gets set to `50%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the largest specified position before the indigo stop is the `50%`
    specified at the yellow stop. Thus, the gradient fades from red to orange to yellow,
    then has a hard switch to indigo before fading from indigo to violet. The green
    and blue aren’t skipped; rather, the gradients transition from yellow to green
    to blue to indigo over zero distance. See [Figure 9-12](#cab_fig72) for the results.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0912](assets/css5_0912.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-12\. Handling color stops that are out of place
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This behavior is the reason mixing units within a single gradient is generally
    discouraged. If you mix `rem` units and percentages, for example, your color stop
    positioned with percentages might end up before an earlier color stop positioned
    with rems.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Color Hints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thus far, we’ve worked with color stops, but you may remember that the syntax
    for linear gradients permits color hints after each color stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A <*`color-hint`*> is a way of modifying the blend between the two color stops
    to either side. By default, the blend from one color stop to the next is linear,
    with the midpoint of the blend at the halfway mark between two color stops, or
    50%. It doesn’t have to be that simple. The following two gradients are the same
    and have the result shown in [Figure 9-13](#cbag_css4_gradient-color-hints-default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0913](assets/css5_0913.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-13\. Linear blending from one color stop to the next
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'With color hints, we can change the midpoint of the progression. Instead of
    reaching `rgb(45% 45% 45%)` at the halfway point, it can be set for any point
    between the two stops. Thus, the following CSS leads to the result seen in [Figure 9-14](#cbag_css4_gradient-color-hints-various):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0914](assets/css5_0914.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-14\. Black to gray with differing midpoint hints
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In all five examples, the first color stop is at the 25% mark and the last at
    the 75% mark, but each has a different midpoint for the gradient. In the first
    case (`#ex01`), the default linear progression is used, with the middle color
    (45% black) occurring at the midpoint between the two color stops.
  prefs: []
  type: TYPE_NORMAL
- en: In the second case (`#ex02`), the middle color happens at the 33% point of the
    gradient line. So the first color stop is at the 25% point on the line, the middle
    color happens at 33%, and the second color stop happens at 75%.
  prefs: []
  type: TYPE_NORMAL
- en: In the third example (`#ex03`), the midpoint is at the 67% point of the gradient
    line; thus, the color fades from black at 25% to the middle color at 67%, and
    then from that middle color at 67% to light gray at 75%.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth and fifth examples show what happens when you put a color hint’s
    distance right on top of one of the color stops: you get a hard stop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The interesting point about color hinting is that the progression from color
    stop to color hint to color stop is not just a set of two linear progressions.
    Instead, the progression has some “curving,” in order to ease from one side of
    the color hint to the other. (The exact curve is logarithmic and based on the
    gradient-progression equation used by Photoshop.) This is easiest to see by comparing
    what would seem to be, but actually is not, two gradients that do the same thing.
    As you can see in [Figure 9-15](#cbag_css4_gradient-color-hints-curve), the result
    is rather different for these two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0915](assets/css5_0915.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-15\. Comparing two linear gradients to one hinted transition
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice how the gray progression differs in the two examples. The first shows
    a linear progression from black to `rgb(45%,45%,45%)`, and then another linear
    progression from there to `rgb(90%,90%,90%)`. The second progresses from black
    to light gray over the same distance, and the color-hint point is at the 67% mark,
    but the gradient is altered to attempt a smoother overall progression. The colors
    at 25%, 67%, and 75% are the same in both examples, but all the other shades along
    the way are different because of the (somewhat complicated) easing algorithm defined
    in the CSS specifications.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re familiar with animations, you might think to put easing functions
    (such as `ease-in`) into a color hint, in order to exert more control over the
    way the colors are blended. While the browser does this to some extent, as illustrated
    in [Figure 9-15](#cbag_css4_gradient-color-hints-curve), this isn’t something
    developers can control as of late 2022 (though that capability is under serious
    discussion by the CSS Working Group at this time).
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding Gradient Lines: The Gory Details'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have a grasp of the basics of placing color stops, let’s look
    closely at how gradient lines are constructed, and thus how they create the effects
    that they do. First, let’s set up a simple gradient so we can then dissect how
    it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, how does this one-dimensional construct—a line at 55 degrees on the compass—create
    a two-dimensional gradient fill? First, the gradient line is placed and its start
    and ending points determined. This is diagrammed in [Figure 9-16](#cab_fig73),
    with the final gradient shown next to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0916](assets/css5_0916.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-16\. The placement and sizing of the gradient line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The first point to make very clear is that the box seen here is not an element—it’s
    the linear-gradient image itself. (Remember, we’re creating images here.) The
    size and shape of that image can depend on a lot of factors, whether it’s the
    size of the element’s background or the application of properties like `background-size`,
    which is a topic we’ll cover in a bit. For now, we’re just concentrating on the
    image itself.
  prefs: []
  type: TYPE_NORMAL
- en: So, in [Figure 9-16](#cab_fig73), you can see that the gradient line goes straight
    through the center of the image. The gradient line *always* goes through the center
    of the gradient image, and in this case, the gradient image is centered in the
    background area. (Using `background-position` to shift placement of a gradient
    image can, in some cases, make it appear that the center of the gradient is not
    centered in the image, but it is.) This gradient is set to a 55-degree angle,
    so it’s pointing at 55 degrees on the compass. What’s interesting is the start
    and ending points of the gradient line, which are actually outside the image.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk about the starting point first. It’s the point on the gradient line
    where a line perpendicular to the gradient line intersects with the corner of
    the image farthest away from the gradient line’s direction (`55deg`). Conversely,
    the gradient line’s ending point is the point on the gradient line where a perpendicular
    line intersects the corner of the image nearest to the gradient line’s direction.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the terms “starting point” and “ending point” are a little
    bit misleading—the gradient line doesn’t actually stop at either point. The gradient
    line is, in fact, infinite. However, the starting point is where the first color
    stop will be placed by default, as it corresponds to position value `0%`. Similarly,
    the ending point corresponds to the position value `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, let’s consider the gradient we defined before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The color at the starting point will be `#4097FF`, the color at the midpoint
    (which is also the center of the gradient image) will be `#FFBE00`, and the color
    at the ending point will be `#4097FF`, with smooth blending in between. This is
    illustrated in [Figure 9-17](#cab_fig74).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0917](assets/css5_0917.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-17\. The calculation of color along the gradient line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: All right, fine so far. But, you may wonder, how do the bottom-left and top-right
    corners of the image get set to the same blue that’s calculated for the starting
    and ending points, if those points are outside the image? Because the color at
    each point along the gradient line is extended out perpendicularly from the gradient
    line. This is partially shown in [Figure 9-18](#cab_fig75) by extending perpendicular
    lines at the starting and ending points, as well as every 5% of the gradient line
    between them. Note that each line perpendicular to the gradient line is a solid
    color.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0918](assets/css5_0918.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-18\. The extension of selected colors along the gradient line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hopefully, that should be enough to let you mentally fill in the rest, so let’s
    consider what happens to the gradient image in various other settings. We’ll use
    the same gradient definition as before, but this time apply it to wide, square,
    and tall images. These are shown in [Figure 9-19](#cab_fig76). Note that the starting-point
    and ending-point colors always make their way into the corners of the gradient
    image.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0919](assets/css5_0919.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-19\. How gradients are constructed for various images
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note that we very carefully said “the starting-point and ending-point colors,”
    and did *not* say “the starting and ending colors.” That’s because, as you saw
    earlier, color stops can be placed before the starting point and after the ending
    point, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The placement of these color stops, the starting and ending points, the way
    the colors are calculated along the gradient line, and the final gradient are
    all shown in [Figure 9-20](#cab_fig77).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0920](assets/css5_0920.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-20\. A gradient with stops beyond the starting and ending points
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once again, we see that the colors in the bottom-left and top-right corners
    match the starting-point and ending-point colors. It’s just that in this case,
    since the first color stop comes before the starting point, the actual color at
    the starting point is a blend of the first and second color stops. Likewise for
    the ending point, which is a blend of the second and third color stops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now here’s where things get a little bit wacky. Remember how you can use directional
    keywords, like `top` and `right`, to indicate the direction of the gradient line?
    Suppose you want the gradient line to go toward the top right, so you create a
    gradient image like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This does *not* cause the gradient line to intersect with the top-right corner.
    If only that were so! Instead, what happens is a good deal stranger. First, let’s
    diagram it in [Figure 9-21](#cab_fig78) so that we have something to refer to.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0921](assets/css5_0921.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-21\. A gradient headed toward the top right
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Your eyes do not deceive you: the gradient line is way off from the top-right
    corner. It *is* headed into the top-right quadrant of the image, though. That’s
    what `to top right` really means: head into the top-right quadrant of the image,
    not into the top-right corner.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As [Figure 9-21](#cab_fig78) shows, the way to find out exactly what that means
    is to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Draw a line from the midpoint of the image into the corners adjacent to the
    corner in the quadrant that’s been declared. Thus, for the top-right quadrant,
    the adjacent corners are the top left and bottom right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the center point of that line, which is the center point of the image,
    and draw the gradient line perpendicular to that line, through the center point,
    pointing into the declared quadrant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Construct the gradient—that is, determine the starting and ending points, place
    or distribute the color stops along the gradient line, and then calculate the
    entire gradient image, as per usual.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This process has a few interesting side effects. First, the color at the midpoint
    will always stretch from one quadrant-adjacent corner to the other. Second, if
    the image’s shape changes—that is, if its aspect ratio changes—the gradient line
    will also reset its direction, reorienting slightly to fit the new aspect ratio.
    So watch out for that if you have flexible elements. Third, a perfectly square
    gradient image will have a gradient line that intersects with a corner. [Figure 9-22](#cab_fig79)
    depicts examples of these three side effects, using the following gradient definition
    in all three cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0922](assets/css5_0922.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-22\. Examples of the side effects of a quadrant-directed gradient
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Sadly, there is no way to say “point the gradient line into the corner of a
    nonsquare image,” short of calculating the necessary degree heading yourself and
    declaring it explicitly, a process that will most likely require JavaScript unless
    you know the image will always be an exact size in all cases, forever. (Or use
    the `aspect-ratio` property; see [Chapter 6](ch06.html#basic-visual-formatting)
    for details.)
  prefs: []
  type: TYPE_NORMAL
- en: While linear gradients follow a gradient line in the direction set forth by
    the angle, it is possible to create a mirrored gradient; for that, oddly enough,
    see [“Radial Gradients”](#radial-gradients).
  prefs: []
  type: TYPE_NORMAL
- en: Repeating Linear Gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regular gradients are autosized by default, matching the size of the background
    area to which they are applied. In other words, by default a gradient image takes
    up all the available background space and does not repeat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intentionally setting a background size and tiling images, especially with
    hard color stops, can create interesting effects. By declaring two linear-gradient
    background images using hard color stops, with perpendicular gradient lines, and
    different background colors, you can create picnic tablecloth effects for any
    place setting by setting up some gradient images, tiling them, and then putting
    a color underneath, as illustrated in [Figure 9-23](#linear-gradients-tablecloth-regular):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0923](assets/css5_0923.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-23\. Papayawhip-, palegoldenrod-, and salmon- colored table cloths
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Instead of defining a gradient size with `background-size` and tiling it with
    `background-repeat`, we can use repeating linear gradient syntax. By adding `repeating`
    in front of the linear gradients, they are made infinitely repeating within the
    size of the gradient. In other words, the declared color stops and color hints
    are repeated on a loop along the gradient line, over and over again, because the
    size of a gradient line when using `repeating-linear-gradient` is the size of
    the last color stop position less the first color stop position (in this case,
    `2vw`). Thus, we can remove the sizing and repetition properties, as in the following,
    and get the same result shown in [Figure 9-23](#linear-gradients-tablecloth-regular):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is nice for simple patterns like these tablecloths, but it comes in really
    handy for more complex situations. For example, if you declare the following nonrepeating
    gradient, you end up with discontinuity where the image repeats, as shown in [Figure 9-24](#cab_fig96):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0924](assets/css5_0924.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-24\. Tiling gradient images with a repeating background image
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You *could* try to nail down the exact sizes of the element and gradient image
    and then mess with the construction of the gradient image to try to make the sides
    line up, but it would be a lot easier to do the following, with the result shown
    in [Figure 9-25](#cab_fig97):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0925](assets/css5_0925.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-25\. A repeating gradient image
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note that the last color stop ends with an explicit length (`50px`). This is
    important to do with repeating gradients, because the length value(s) of the last
    color stop defines the overall length of the pattern. If you leave off an ending
    stop, it will default to 100%, which is the end of the gradient line.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using smoother transitions, you need to be careful that the color
    value at the last color stop matches the color value at the first color stop.
    Consider this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce a smooth gradient from purple to gold at 50 pixels, and then
    a hard switch back to purple and another 50-pixel purple-to-gold blend. By adding
    one more color stop with the same color as the first color stop, the gradient
    can be smoothed out to avoid hard-stop lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See [Figure 9-26](#cab_fig98) for a comparison of the two approaches.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0926](assets/css5_0926.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-26\. Dealing with hard resets in repeating-gradient images
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may have noticed that none of the repeating gradients so far have a defined
    size. That means the images are defaulting in size to the full background positioning
    area of the element to which they’re applied, per the default behavior for images
    that have no intrinsic height and width.
  prefs: []
  type: TYPE_NORMAL
- en: If you resize a repeating-gradient image by using `background-size`, the gradient
    would repeat only within the bounds of the gradient image. If you then repeated
    that image using `background-repeat`, you could easily be back to having discontinuities
    in your background.
  prefs: []
  type: TYPE_NORMAL
- en: If you use percentages in your repeating linear gradients, they’ll be placed
    the same as if the gradient wasn’t of the repeating variety. Then again, this
    would mean that all of the gradients defined by those color stops would be seen
    and none of the repetitions would be visible, so percentages tend to be kind of
    pointless with repeating linear gradients.
  prefs: []
  type: TYPE_NORMAL
- en: Radial Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linear gradients are pretty awesome, but at times you really want a circular
    gradient. You can use such a gradient to create a spotlight effect, a circular
    shadow, a rounded glow, or any number of other effects, including a reflected
    gradient. The syntax used is similar to that for linear gradients, but some interesting
    differences exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: What this boils down to is you can optionally declare a shape and size, optionally
    declare where the center of the gradient is positioned, and then declare two or
    more color stops with optional color hints between the stops. Interesting options
    are available in the shape and size bits, so let’s build up to those.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s look at a simple radial gradient—the simplest possible, in fact—presented
    in a variety of differently shaped elements ([Figure 9-27](#cab_fig80)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0927](assets/css5_0927.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-27\. A simple radial gradient in multiple settings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In all of these cases, because no position is declared, the default of `center`
    is used, and the default ellipse has the same aspect ratio as the image size.
    Because no shape is declared, the shape is an ellipse for all cases but the square
    element; in that case, the shape is a circle. Finally, because no color-stop or
    color-hint positions are declared, the first is placed at the beginning of the
    gradient ray, and the last at the end, with a linear blend from one to the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s right: the *gradient ray* is the radial equivalent of the gradient line
    in linear gradients. It extends outward from the center of the gradient directly
    to the right, and the rest of the gradient is constructed from it. (We’ll get
    to the details in just a bit.)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Shape and Size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, a radial gradient has exactly two possible shape values (and thus
    two possible shapes): `circle` and `ellipse`. The shape of a gradient can be declared
    explicitly or can be implied by the way you size the gradient image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, on to sizing. As always, the simplest way to size a radial gradient is
    with either one nonnegative length (if you’re sizing a circle) or two nonnegative
    lengths (if it’s an ellipse). Say you have this radial gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a circular radial gradient that fades from purple at the center
    to gold at a distance of 50 pixels from the center. If we add another length,
    the shape becomes an ellipse that’s as wide as the first length and as tall as
    the second length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 9-28](#cab_fig81) shows these two gradients.'
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0928](assets/css5_0928.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-28\. Simple radial gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice that the shape of the gradients has nothing to do with the overall size
    and shape of the images in which they appear. If you make a gradient a circle,
    it will be a circle, even if it’s inside a rectangular gradient image. So too
    will an ellipse always be an ellipse, even when inside a square gradient image.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use percentage values for the size, but *only* for ellipses. Circles
    cannot be given percentage sizes because there’s no way to indicate the axis to
    which that percentage refers. (Imagine an image 100 pixels tall by 500 wide. Should
    `10%` mean 10 pixels or 50 pixels?) If you try to provide percentage values for
    a circle, the entire declaration will fail because of the invalid value.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do supply percentages to an ellipse, then as usual, the first refers
    to the horizontal axis and the second to the vertical. The following gradient
    is shown in various settings in [Figure 9-29](#cab_fig82):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0929](assets/css5_0929.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-29\. Percentage-sized elliptical gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'When it comes to ellipses, you’re also able to mix lengths and percentages,
    with the usual caveat to be careful. So if you’re feeling confident, you can absolutely
    make an elliptical radial gradient 10 pixels tall and half the element width,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As it happens, lengths and percentages aren’t the only way to size radial gradients.
    In addition to those value types, four keywords are available for sizing radial
    gradients, the effects of which are summarized here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`closest-side`'
  prefs: []
  type: TYPE_NORMAL
- en: If the radial gradient’s shape is a circle, the gradient is sized so that the
    end of the gradient ray exactly touches the edge of the gradient image that is
    closest to the center point of the radial gradient. If the shape is an ellipse,
    the end of the gradient ray exactly touches the closest edge in each of the horizontal
    and vertical axes.
  prefs: []
  type: TYPE_NORMAL
- en: '`farthest-side`'
  prefs: []
  type: TYPE_NORMAL
- en: If the radial gradient’s shape is a circle, the gradient is sized so that the
    end of the gradient ray exactly touches the edge of the gradient image that is
    farthest from the center point of the radial gradient. If the shape is an ellipse,
    the end of the gradient ray exactly touches the farthest edge in each of the horizontal
    and vertical axes.
  prefs: []
  type: TYPE_NORMAL
- en: '`closest-corner`'
  prefs: []
  type: TYPE_NORMAL
- en: If the radial gradient’s shape is a circle, the gradient is sized so that the
    end of the gradient ray exactly touches the corner of the gradient image that
    is closest to the center point of the radial gradient. If the shape is an ellipse,
    the end of the gradient ray still touches the corner closest to the center, *and*
    the ellipse has the same aspect ratio that it would have had if `closest-side`
    had been specified.
  prefs: []
  type: TYPE_NORMAL
- en: '`farthest-corner` (default)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the radial gradient’s shape is a circle, the gradient is sized so that the
    end of the gradient ray exactly touches the corner of the gradient image that
    is farthest from the center point of the radial gradient. If the shape is an ellipse,
    the end of the gradient ray still touches the corner farthest from the center,
    *and* the ellipse has the same aspect ratio that it would have had if `farthest-side`
    had been specified. Note: this is the default size value for a radial gradient
    and so is used if no size values are declared.'
  prefs: []
  type: TYPE_NORMAL
- en: To better visualize the results of each keyword, see [Figure 9-30](#cab_fig83),
    which depicts each keyword applied as both a circle and an ellipse.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0930](assets/css5_0930.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-30\. The effects of radial-gradient sizing keywords (positioned `at
    33% 66%`)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These keywords cannot be mixed with lengths or percentages in elliptical radial
    gradients; thus, `closest-side 25px` is invalid and will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Something you might have noticed in [Figure 9-30](#cab_fig83) is that the gradients
    didn’t start at the center of the image. That’s because they were positioned elsewhere,
    which is the topic of the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning Radial Gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to shift the center of a radial gradient away from the default of
    `center`, you can do so using any position value that would be valid for `background-position`.
    We’re not going to reproduce that rather complicated syntax here; flip back to
    [“Positioning Background Images”](ch08.html#background-positioning) if you need
    a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we say “any position value that would be valid,” that means any permitted
    combination of lengths, percentages, keywords, and so on. It also means that if
    you leave off one of the two position values, it will be inferred just the same
    as for `background-position`. So, just for one example, `center` is equivalent
    to `center center`. The one major difference between radial gradient positions
    and background positions is the default: for radial gradients, the default position
    is `center`, not `0% 0%`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To give an idea of the possibilities, consider the following rules, illustrated
    in [Figure 9-31](#cab_fig84):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0931](assets/css5_0931.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-31\. Changing the center position of radial gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'None of those positioned radial gradients are explicitly sized, so they all
    default to `farthest-corner`. That’s a reasonable guess at the intended default
    behavior, but it’s not the only possibility. Let’s mix some sizes into these gradients
    and find out how that changes things (as depicted in [Figure 9-32](#cab_fig85)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0932](assets/css5_0932.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-32\. Changing the center position of explicitly sized radial gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Nifty. Now, suppose we want something a little more complicated than a fade
    from one color to another. Next stop, color stops!
  prefs: []
  type: TYPE_NORMAL
- en: Using Radial Color Stops and the Gradient Ray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Color stops for radial gradients have the same syntax as, and work in a similar
    fashion to, linear gradients. Let’s return to the simplest possible radial gradient
    and follow it with a more explicit equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: So the gradient ray extends out from the center point. At 0% (the start point,
    and also the center of the gradient), the ray will be purple. At 100% (the ending
    point), the ray will be gold. Between the two stops is a smooth blend from purple
    to gold; beyond the ending point is solid gold.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we add a stop between purple and gold, but don’t give it a position, the
    stop will be placed midway between the two colors, and the blending will be altered
    accordingly, as shown in [Figure 9-33](#cab_fig86):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0933](assets/css5_0933.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-33\. Adding a color stop
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We’d have gotten the same result if we’d added `green 50%` there, but you get
    the idea. The gradient ray’s color goes smoothly from purple to green to gold,
    and then is solid gold beyond that point on the ray.
  prefs: []
  type: TYPE_NORMAL
- en: 'This illustrates one difference between gradient lines (for linear gradients)
    and gradient rays: a linear gradient is derived by extending the color perpendicularly
    at each point along the gradient line. A similar behavior occurs with a radial
    gradient, except instead of the lines that come off the gradient ray, ellipses
    are created; these are scaled-up or scaled-down versions of the ellipse at the
    ending point. [Figure 9-34](#cab_fig87) illustrates a gradient ray and the ellipses
    that are drawn at various points along it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0934](assets/css5_0934.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-34\. The gradient ray and some of the ellipses it spawns
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'That brings up an interesting question: how is the ending point (the `100%`
    point, if you like) determined for each gradient ray? It’s the point where the
    gradient ray intersects with the shape described by the size. For a circle, that’s
    easy: the gradient ray’s ending point is however far from the center that the
    size value indicates. So for a `25px circle` gradient, the ending point of the
    ray is 25 pixels from the center.'
  prefs: []
  type: TYPE_NORMAL
- en: For an ellipse, it’s essentially the same operation, except that the distance
    from the center is dependent on the horizontal axis of the ellipse. Given a radial
    gradient that’s a `40px 20px ellipse`, the ending point will be 40 pixels from
    the center and directly to its right. [Figure 9-35](#cab_fig88) shows this in
    some detail.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0935](assets/css5_0935.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-35\. Setting the gradient ray’s ending point
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Another difference between linear gradient lines and radial gradient rays is
    that you can see beyond the ending point. As you may recall, a linear gradient
    line is always drawn so that you can see the colors at the 0% and 100% points,
    but nothing beyond them; the gradient line can never be any smaller than the longest
    axis of the gradient image and will frequently be longer than that. With a radial
    gradient, on the other hand, you can size the radial shape to be smaller than
    the total gradient image. In that case, the color at the last color stop is extended
    outward from the ending point. (You’ve already seen this in several previous figures.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Conversely, if you set a color stop that’s beyond the ending point of a ray,
    you might get to see the color out to that stop. Consider the following gradient,
    illustrated in [Figure 9-36](#cab_fig89):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0936](assets/css5_0936.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-36\. Color stops beyond the ending point
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The first color stop has no position, so it’s set to `0%`, which is the center
    point. The last color stop is set to `80px`, so it will be 80 pixels away from
    the center in all directions. The middle color stop, `green`, is placed midway
    between the two (40 pixels from the center). So we get a gradient that goes out
    to gold at 80 pixels and then continues gold beyond that point.
  prefs: []
  type: TYPE_NORMAL
- en: 'This happens even though the circle is explicitly set to be 50 pixels large.
    It still is 50 pixels in radius; it’s just that the positioning of the last color
    stop makes that fact vaguely irrelevant. Visually, we might as well have declared
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, more simply, just this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The same behaviors apply if you use percentages for your color stops. These
    are equivalent to the previous examples, and to each other, visually speaking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, what if you set a negative position for a color stop? The result is pretty
    much the same as for linear gradient lines: the negative color stop is used to
    figure out the color at the starting point but is otherwise unseen. Thus, the
    following gradient will have the result shown in [Figure 9-37](#cab_fig90):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0937](assets/css5_0937.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-37\. Handling a negative color-stop position
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Given these color-stop positions, the first color stop is at `-40px`, the last
    is at `80px` (because, given its lack of an explicit position, it defaults to
    the ending point), and the middle is placed midway between them. The result is
    the same as if we’d explicitly used this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s why the color at the center of the gradient is a green-purple: it’s
    a blend of one-third purple, two-thirds green. From there, it blends the rest
    of the way to green, and then on to gold. The rest of the purple-green blend,
    the part that sits on the “negative space” of the gradient ray, is invisible.'
  prefs: []
  type: TYPE_NORMAL
- en: Handling Degenerate Cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Given that we can declare size and position for a radial gradient, the question
    arises: what if a circular gradient has zero radius, or an elliptical gradient
    has zero height or width? These conditions aren’t quite as hard to create as you
    might think. Besides explicitly declaring that a radial gradient has zero size
    using `0px` or `0%`, you could also do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The gradient’s size is set to `closest-corner`, and the center has been moved
    into the `top right` corner, so the closest corner is 0 pixels away from the center.
    Now what?
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the specification explicitly says that the gradient should be
    rendered as if it’s “a circle whose radius [is] an arbitrary very small number
    greater than zero.” So that might mean as if it had a radius of one-one-billionth
    of a pixel, or a picometer, or heck, the Planck length. The interesting thing
    is that it means the gradient is still a circle. It’s just a very, very, very
    small circle. Probably, it will be too small to render anything visible. If so,
    you’ll just get a solid-color fill that corresponds to the color of the last color
    stop instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ellipses with zero-length dimensions have fascinatingly different defined behaviors.
    Let’s assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The specification states that any ellipse with a zero width is rendered as if
    it’s “an ellipse whose height [is] an arbitrary very large number and whose width
    [is] an arbitrary very small number greater than zero.” In other words, render
    it as though it’s a linear gradient mirrored around the vertical axis running
    through the center of the ellipse. The specification also says that in such a
    case, any color stops with percentage positions resolve to `0px`. This will usually
    result in a solid color matching the color defined for the last color stop.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if you use lengths to position the color stops, you can
    get a vertically mirrored horizontal linear gradient for free. Consider the following
    gradient, illustrated in [Figure 9-38](#cab_fig91):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0938](assets/css5_0938.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-38\. The effects of a zero-width ellipse
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: How did this happen? First, remember that the specification says that the `0px`
    horizontal width is treated as if it’s a tiny nonzero number. For the sake of
    illustration, let’s suppose that’s one-one-thousandth of a pixel (0.001 px). That
    means the ellipse shape is a thousandth of a pixel wide by half the height of
    the image. Again for the sake of illustration, let’s suppose that’s a height of
    100 pixels. That means the first ellipse shape is a thousandth of a pixel wide
    by 100 pixels tall, which is an aspect ratio of 0.001:100, or 1:100,000.
  prefs: []
  type: TYPE_NORMAL
- en: OK, so every ellipse drawn along the gradient ray has a 1:100,000 aspect ratio.
    That means the ellipse at half a pixel along the gradient ray is 1 pixel wide
    and 100,000 pixels tall. At 1 pixel, it’s 2 pixels wide and 200,000 pixels tall.
    At 5 pixels, the ellipse is 10 pixels by a million pixels. At 50 pixels along
    the gradient ray, the ellipse is 100 pixels wide and 10 million tall. And so on.
    This is diagrammed in [Figure 9-39](#cab_fig92).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0939](assets/css5_0939.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-39\. Very, very tall ellipses
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: So you can see why the visual effect is of a mirrored linear gradient. These
    ellipses are effectively drawing vertical lines. Technically they aren’t, but
    in practical terms they are. The result is as if you have a vertically mirrored
    horizontal gradient, because each ellipse is centered on the center of the gradient,
    and both sides of it get drawn. While this may be a radial gradient, we can’t
    see its radial nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if the ellipse has width but not height, the results are
    quite different. You’d think the result would be a vertical linear gradient mirrored
    around the horizontal axis, but not so! Instead, the result is a solid color equal
    to the last color stop (unless it’s a repeating gradient, a subject we’ll turn
    to shortly, in which case it should be a solid color equal to the average color
    of the gradient). So, given either of the following, you’ll get a solid gold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Why the difference? It goes back to the way radial gradients are constructed
    from the gradient ray. Again, remember that, per the specification, a zero distance
    here is treated as a very small nonzero number. As before, we’ll assume that `0px`
    is reassigned to `0.001px`, and that the `50%` evaluates to 100 pixels. That’s
    an aspect ratio of 100:0.001, or 100,000:1.
  prefs: []
  type: TYPE_NORMAL
- en: So, to get an ellipse that’s 1 pixel tall, the width of that ellipse must be
    100,000 pixels. But our last color stop is at only 100 pixels! At that point,
    the ellipse that’s drawn is 100 pixels wide and a thousandth of a pixel tall.
    All of the purple-to-gold transition that happens along the gradient ray has to
    happen in that thousandth of a pixel. Everything after that is gold, as per the
    final color stop. Thus, we can see only the gold.
  prefs: []
  type: TYPE_NORMAL
- en: You might think that if you increased the position value of the last color stop
    to `100000px`, you’d see a thin sliver of purplish color running horizontally
    across the image. And you’d be right, *if* the browser treats `0px` as `0.001px`
    in these cases. If it assumes `0.00000001px` instead, you’d have to increase the
    color stop’s position a *lot* further in order to see anything. And that’s assuming
    the browser was actually calculating and drawing all those ellipses, instead of
    just hardcoding the special cases. The latter is a lot more likely, honestly.
    It’s what we’d do if we were in charge of a browser’s gradient-rendering code.
  prefs: []
  type: TYPE_NORMAL
- en: And what if an ellipse has zero width *and* zero height? In that case, the specification
    is written such that the zero-width behavior is used; thus, you’ll get the mirrored-linear-gradient
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of late 2022, browser support for the defined behavior in these edge cases
    is unstable, at best. Some browsers use the last color-stop’s color in all cases,
    and others refuse to draw a gradient at all in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: Repeating Radial Gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While percentages in repeating linear gradients could turn them into nonrepeating
    gradients, percentages can be very useful if the size of the circle or ellipse
    is defined, percentage positions along the gradient ray are defined, and you can
    see beyond the endpoint of the gradient ray. For example, assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As there are five color stops and the size is 100px, a color stop will occur
    every 20 pixels, with the colors repeating in the declared pattern. Because the
    first and last color stops have the same color value, there is no hard color switch.
    The ripples just spread out forever, or at least until they’re beyond the edges
    of the gradient image. See [Figure 9-40](#cab_fig100) for an example.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0940](assets/css5_0940.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-40\. Repeating radial gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Just imagine what that would look like with a repeating radial gradient of a
    rainbow!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep these two points in mind when creating repeating radial gradients:'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t declare size dimensions for a radial, it will default to an ellipse
    that has the same height-to-width ratio as the overall gradient image; *and*,
    if you don’t declare a size for the image with `background-size`, the gradient
    image will default to the height and width of the element background where it’s
    being applied (or, if being used as a list-style bullet, the size that the browser
    gives it).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default radial size value is `farthest-corner`. This will put the endpoint
    of the gradient ray far enough to the right that its ellipse intersects with the
    corner of the gradient image that’s farthest from the center point of the radial
    gradient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are reiterated here to remind you that if you stick to the defaults, there’s
    not really any point to having a repeating gradient, since you’ll be able to see
    only the first iteration of the repeat. It’s only when you restrict the initial
    size of the gradient that the repeats become visible.
  prefs: []
  type: TYPE_NORMAL
- en: Conic Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Radial gradients are fun, but what if you want a gradient that wraps around
    a central point, similar to a color hue wheel? That’s what CSS calls a *conic
    gradient*, which can be thought of as a concentric series of linear gradients
    that are bent into circles. Looked at another way, at any distance from the center,
    there’s a circle whose outer rim could be straightened out into a linear gradient
    with the color stop specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conic gradients are more easily shown than described, so consider the following
    CSS, which is illustrated in [Figure 9-41](#conic-gradient-simple) along with
    a linear diagram to show how the stops wrap around the conical space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0941](assets/css5_0941.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-41\. A simple conic gradient and its linear equivalent
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note how each of the color stops is labeled on the linear gradient: the circled
    numbers listed there are repeated in the conic gradient, to show where each color
    stop falls. At 60 degrees around the conic gradient, there is a `gray` color stop.
    At 180 degrees, a `white` color stop. At the top of the conic gradient, the `0deg`
    and `360deg` points meet, so `black` and `gray` sit next to each other.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, conic gradients start at 0 degrees, using the same compass degree
    system that transforms and other parts of CSS use, so `0deg` is at the top. If
    you want to start from a different angle and wrap around the circle back to that
    point, it’s as straightforward as adding `from` and an angle value to the front
    of the `conic-gradient` value, which rotates the entire gradient by the declared
    angle. The following would all have the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'If the conic gradient is given a different start angle, such as `from 45deg`,
    it acts as a rotation of the entire conic gradient. Consider the following two
    examples, with the results depicted in [Figure 9-42](#conic-gradients-different-start-angles):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0942](assets/css5_0942.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-42\. Conic gradients with angled color stops and different start angles
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Not only is the starting point rotated 45 degrees, but all the other color stops
    are as well. Thus, even though the first color stop has an angle of `90deg`, it
    actually occurs at the 135-degree mark, that being 90 degrees with a 45-degree
    rotation added.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also possible to change the location of the gradient’s center point within
    the image, just as with radial gradients. The syntax is quite similar, as you
    can see in this code block (illustrated in [Figure 9-43](#conic-gradients-rotated-and-offset)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0943](assets/css5_0943.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-43\. Rotated and offset conic gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the first of the three examples, the center of the conic gradient is placed
    `3em` to the right of the top-left corner, and `6em` down from that same corner.
    Similarly, the second example shows the center point `67%` of the way across the
    conic-gradient image, and `25%` down from the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third example shows what happens when the center point of a conic gradient
    is placed along one edge of the image: we see only half (at most) of the gradient.
    In this case, the top half is visible—that is, the colors from 270 degrees through
    90 degrees.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So all together, the syntax for a conic gradient is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: If the `from` angle is not given, it defaults to `0deg`. If no `at` position
    is given, it defaults to `50% 50%` (that is, the center of the conic-gradient
    image).
  prefs: []
  type: TYPE_NORMAL
- en: Much as with radial and linear gradients, color stop distances can be specified
    by a percentage value; in this case, it resolves to an angle value. Thus, for
    a conic gradient starting at 0 degrees, the color stop distance `25%` would resolve
    to 90 degrees, as 90 is 25% of 360\. Conic color stops can also be specified as
    a degree value, as shown previously.
  prefs: []
  type: TYPE_NORMAL
- en: You *cannot* specify a length value for a conic gradient’s color stop’s distance.
    Only percentages and angles are acceptable, and they can be mixed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Conic Color Stops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want a conic gradient to blend smoothly from color to color all the
    way around the circle, it is necessary to make the last color stop match the first
    color stop. Otherwise, you’ll see the kinds of hard transitions shown in earlier
    examples. If you want to create a color hue wheel, for example, you need to declare
    it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Except that’s not actually a wheel, since the conic-gradient image fills the
    entire background area, and background areas in CSS are (thus far) rectangular
    by default. To make the color wheel actually look like a color wheel, you’d need
    to either use a circular clipping path (see [Chapter 20](ch20.html#filters-compositing))
    or round the corners on a square element (see [Chapter 7](ch07.html#padding-borders-outlines-and-margins)).
    For example, the following will have the result shown in [Figure 9-44](#conic-gradients-hue-wheels):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0944](assets/css5_0944.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-44\. Hue-wheel conic gradients with and without corner rounding
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This emphasizes that while it’s easy to think of conic gradients as circles,
    the end result is a rectangle, absent any clipping or other effort to make the
    element’s background area nonrectangular. So if you’re thinking about using conic
    gradients to make, say, a pie chart, you’ll have to do more than just define a
    conic gradient with hard stops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as we used two length-percentage values to create hard stops in linear
    gradients, we can use two hard stops in conic gradients. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In this syntax, a given color stop can be written as <*`color`*> <*`beginning`*>
    <*`ending`*>, where <*`beginning`*> and <*`ending`*> are percentage or angle values.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to create smoother transitions between colors but still have them
    be mostly solid, the <*`color`*> <*`beginning`*> <*`ending`*> syntax can help
    a lot. For example, the following conic gradient eases the transitions between
    green, yellow, and red without making the overall gradient too “smeared”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: This runs a solid wedge of green from 0 to 126 degrees (35%), then transitions
    smoothly from green to yellow between 126 degrees and 144 degrees (40%), past
    which there is a solid wedge of yellow spanning from 144 degrees to 216 degrees
    (60%). Similarly, a smoothed transition occurs from yellow to red between 216
    degrees and 234 degrees (65%), and beyond that, a solid red wedge running to 360
    degrees.
  prefs: []
  type: TYPE_NORMAL
- en: All this is illustrated in [Figure 9-45](#conic-gradients-smoothed-triple),
    with extra annotations to mark where the calculated angles land.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0945](assets/css5_0945.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-45\. Conic gradients with solid-color wedges and smooth transitions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'And, as it happens, that syntax makes it relatively easy to re-create those
    picnic tablecloths discussed earlier in the chapter by using a conic gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: This creates, in a single gradient image, a set of four squares in the pattern.
    That image is then sized and repeated. It’s not more efficient or elegant than
    using repeating linear gradients, but it does embody a certain cleverness that
    appeals to us.
  prefs: []
  type: TYPE_NORMAL
- en: Repeating Conic Gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And now we come to repeating conic gradients, which are highly useful if you
    want to create a starburst pattern or even something simple like a checkerboard
    pattern. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets up a checkerboard pattern with four color stops but only two colors.
    We can restate that using `repeating-conic-gradient` like so, with new colors
    to make the pattern a little clearer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: All that was necessary in this simple repeating case was to set up the first
    two color stops. After that, the stops are repeated until the full 360 degrees
    of the conic gradient are filled, as shown in [Figure 9-46](#repeating-conic-checkerboard).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0946](assets/css5_0946.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-46\. A repeating conic gradient
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This means we can create wedges of any size, with any transition, and repeat
    them all the way around the conic circle. Here are just three examples, rendered
    in [Figure 9-47](#repeating-conic-starbursts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0947](assets/css5_0947.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-47\. Three variants on a repeating conic gradient
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Notice that the first (leftmost) example’s smoothed transitions hold true even
    at the top of the image: the transition from `#117` at 350 degrees to `#ABE` at
    5 degrees is handled like all of the other transitions. Repeated conic gradients
    are unique in this way, since both linear and radial gradients never “wrap around” to
    have the end meet the beginning. This is also seen in the third (rightmost) example
    in [Figure 9-47](#repeating-conic-starbursts).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible to break this special behavior, though, as the second (center)
    example illustrates: note the narrower wedge from 355 degrees through 360 degrees.
    This happens because the first color stop in the pattern explicitly runs from
    0 degrees through 5 degrees. Thus, there is no way to transition from 355 degrees
    through to 5 degrees, which leads to a hard transition at 360/0 degrees.'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating Gradient Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have previously emphasized (possibly to excess), gradients are images.
    That means you can size, position, repeat, and otherwise affect them with the
    various background properties, just as you would any PNG or SVG.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way this can be leveraged is to repeat simple gradients. (Repeating in
    more complex ways is the subject of the next section.) For example, you could
    use a hard-stop radial gradient to give your background a dotted look, as shown
    in [Figure 9-48](#cab_fig93):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![css5 0948](assets/css5_0948.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-48\. Tiled radial gradient images
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Yes, this is visually pretty much the same as tiling a PNG that has a mostly
    transparent dark circle 10 pixels in diameter. Using a gradient in this case has
    three advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: The CSS is almost certainly smaller in bytes than the PNG would be.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even more importantly, the PNG requires an extra hit on the server. This slows
    both page and server performance. A CSS gradient is part of the stylesheet and
    so eliminates the extra server hit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the gradient is a lot simpler, so experimenting to find exactly the
    right size, shape, and darkness is much easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Special Effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gradients can’t do everything a raster or vector image can, so it’s not as though
    you’ll be giving up external images completely now that gradients are a thing.
    You can still pull off some pretty impressive effects with gradients, though.
    Consider the background effect shown in [Figure 9-49](#cab_fig94).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0949](assets/css5_0949.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-49\. It’s time to play the music…
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'That curtain effect is accomplished with just two linear gradients repeated
    at differing intervals, plus a third to create a “glow” effect along the bottom
    of the background. Here’s the code that accomplishes it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The first (and therefore topmost) gradient is just a fade from a 75%-transparent
    light red up to full transparency at the 75% point of the gradient line. Then
    two “fold” images are created. [Figure 9-50](#cab_fig95) shows each separately.
  prefs: []
  type: TYPE_NORMAL
- en: With those images defined, they are repeated along the x-axis and given different
    sizes. The first, which is the “glow” effect, is given `auto` size to let it cover
    the entire element background. The second is given a width of `300px` and a height
    of `100%`; thus, it will be as tall as the element background and 300 pixels wide.
    This means it will be tiled every 300 pixels along the x-axis. The same is true
    of the third image, except it tiles every 109 pixels. The end result looks like
    an irregular stage curtain.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 0950](assets/css5_0950.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-50\. The two “fold” gradients
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The beauty of this is that adjusting the tiling intervals is just a matter of
    editing the stylesheet. Changing the color-stop positions or the colors is less
    trivial, but not too difficult if you know the effect you’re after. And adding
    a third set of repeating folds is no more difficult than just adding another gradient
    to the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering Average Gradient Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s worth asking what happens if a repeating gradient’s first and last color
    stops somehow end up being in the same place. For example, suppose your fingers
    miss the 5 key and you accidentally declare the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The first and last color stops are 0 pixels apart, but the gradient is supposed
    to repeat ad infinitum along the gradient line. Now what?
  prefs: []
  type: TYPE_NORMAL
- en: In such a case, the browser finds the *average gradient color* and fills it
    in throughout the entire gradient image. In our simple case in the preceding code,
    that will be a 50/50 blend of purple and `gold` (which will be about `#C06C40`
    or `rgb(75%,42%,25%)`). Thus, the resulting gradient image should be a solid orangey-brown,
    which doesn’t really look much like a gradient.
  prefs: []
  type: TYPE_NORMAL
- en: This condition can also be triggered when the browser rounds the color-stop
    positions to 0, or when the distance between the first and last color stops is
    so small as compared to the output resolution that nothing useful can be rendered.
    This could happen if, for example, a repeating radial gradient used all percentages
    for the color-stop positions and was sized using `closest-side`, but was accidentally
    placed into a corner.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of late 2022, no browsers really do average colors correctly. Some of the
    correct behaviors can be triggered under very limited conditions, but in most
    cases, browsers either just use the last color stop as a fill color, or else try
    really hard to draw subpixel repeating patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradients are a fascinating image type, being constructed entirely with CSS
    values instead of with raster data or vector elements. With the three types of
    gradients available, you can create almost any pattern or visual effect.
  prefs: []
  type: TYPE_NORMAL
