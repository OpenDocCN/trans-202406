- en: 'Chapter 7\. Serverless Functions In-Depth: Part 2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：无服务器函数深入解析：第 2 部分
- en: So far, we have covered quite a bit of functionality that can be achieved using
    a Lambda function. In this chapter, we’ll continue learning how to use Lambda
    functions in different ways to implement common functionality you’ll find useful
    when building applications. We’ll get into how to create and integrate into our
    app a fully functional backend complete with an API, authentication, a database,
    and authorization rules.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了使用 Lambda 函数可以实现的相当多的功能。在本章中，我们将继续学习如何以不同的方式使用 Lambda 函数来实现构建应用程序时会有用的常见功能。我们将深入了解如何创建并集成一个完全功能的后端应用程序，包括
    API、身份验证、数据库和授权规则。
- en: 'With Amplify, there are two main ways to create APIs: GraphQL and REST. We’ll
    continue to cover GraphQL in [Chapter 8](ch08.xhtml#ch8), but here, we’ll learn
    how to do this with a REST API running in a Lambda function.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Amplify，有两种主要方法来创建 API：GraphQL 和 REST。我们将继续在第 [Chapter 8](ch08.xhtml#ch8)
    章中介绍 GraphQL，但在这里，我们将学习如何在 Lambda 函数中运行的 REST API 中实现此功能。
- en: The database we will use is Amazon DynamoDB, a NoSQL database. We will be invoking
    the Lambda function from an HTTP request routed through an API gateway endpoint.
    The Lambda function will take the HTTP request and then route it to different
    paths as the function will be running an Express web server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Amazon DynamoDB，一个 NoSQL 数据库。我们将通过 API 网关端点将 HTTP 请求调用 Lambda 函数。Lambda
    函数将接收 HTTP 请求，然后根据不同的路径进行路由，因为函数将运行一个 Express web 服务器。
- en: This will allow us to have different routes available within a single function.
    We will then map different HTTP methods, like `post` and `delete`, to the routes
    to perform different actions on the database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在单个函数内部有不同的路由可用。然后，我们将映射不同的 HTTP 方法，如`post`和`delete`，到路由上以执行数据库上的不同操作。
- en: What We’ll Build
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将构建什么
- en: We’ll be building a basic ecommerce app that allows users to view products,
    and administrators to create and delete products. The building blocks of this
    app will lay the groundwork for building almost any type of CRUD+L (create, read,
    update, delete, and list) application, which is the backbone of many real-world
    projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个基本的电子商务应用程序，允许用户查看产品，并允许管理员创建和删除产品。此应用程序的构建块将为构建几乎任何类型的 CRUD+L（创建、读取、更新、删除和列表）应用程序打下基础，这是许多真实项目的支柱。
- en: We will be using what we learned in Chapters [2](ch02.xhtml#ch2) and [6](ch06.xhtml#ch6)
    and building upon those ideas in this chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第 [2](ch02.xhtml#ch2) 章和第 [6](ch06.xhtml#ch6) 章中学到的内容，并在本章中进一步构建这些思想。
- en: 'The services and features we’ll be needing are the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下服务和功能：
- en: Lambda function
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 函数
- en: 'The main application logic will reside in a Lambda function that will be running
    an Express server. The server will have routes for the different HTTP methods
    we will need to work with: `get`, `post`, and `delete`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 主应用程序逻辑将驻留在一个 Lambda 函数中，该函数将运行一个 Express 服务器。服务器将具有我们需要处理的不同 HTTP 方法的路由：`get`、`post`和`delete`。
- en: API
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: API
- en: In order to interact with the main Lambda function, we will need to be able
    to invoke it using HTTP requests, sending `get`, `post`, and `delete` requests
    to interact with the API and the database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与主 Lambda 函数交互，我们需要能够使用 HTTP 请求调用它，发送`get`、`post`和`delete`请求以与 API 和数据库进行交互。
- en: DynamoDB NoSQL Database
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB NoSQL 数据库
- en: This is the database that will hold all of the data for the application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将为应用程序存储所有数据的数据库。
- en: Authentication
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 认证
- en: We will need a way to authenticate users in order to configure and enable administrator
    access.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来验证用户，以便配置和启用管理员访问。
- en: Another Lambda function
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 Lambda 函数
- en: We will need a Lambda trigger to place administrators into an Admin group, so
    there will be another Lambda function (post-confirmation trigger) associated with
    the authentication flow.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一个 Lambda 触发器将管理员放置到管理员组中，因此将与身份验证流程关联的另一个 Lambda 函数（后确认触发器）。
- en: Like in previous chapters, we will need to integrate navigation into the client
    application for linking between routes. When a user is signed in, we will access
    the user’s groups to determine the state of the app based on the user’s permissions.
    These permissions might include determining whether or not to show the Admin navigation
    link or to allow users to view the buttons to delete items based on whether they
    are an administrator or not.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的章节一样，我们需要在客户端应用程序中集成导航以便在路由之间进行链接。当用户登录时，我们将访问用户的群组，以确定基于用户权限的应用程序状态。这些权限可能包括确定是否显示管理导航链接或允许用户根据其是否为管理员来查看删除项目按钮。
- en: We will also have some authorization guards on the server to make sure that
    if a user performs an action, that they are indeed authorized to perform that
    action.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在服务器上设置一些授权保护，以确保用户执行操作时确实被授权执行该操作。
- en: Getting Started
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'The first thing we will need to do to get started is to create a new React
    application and install the necessary dependencies:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始的第一件事是创建一个新的React应用程序并安装必要的依赖项：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will initialize a new Amplify project and begin adding the services
    we’ll need for this application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将初始化一个新的Amplify项目，并开始添加我们应用程序所需的服务：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding Authentication and Group Privileges
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加认证和群组权限
- en: 'The first service we’ll create is the authentication service. We need to be
    sure to also create the Lambda trigger in order to add users to the Admin group
    that we will be creating:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建认证服务。我们还需要确保创建Lambda触发器，以便将用户添加到我们将创建的Admin组中：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Update the function with the following code and configure the `adminEmails`
    array:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新函数并配置`adminEmails`数组：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this function, we set an array of admin emails and an `isAdmin` variable.
    If the confirmed user is an admin, we first check to see if the Admin group has
    already created in the service. If it has not yet been created, we create it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中，我们设置了一个管理员电子邮件数组和一个`isAdmin`变量。如果确认的用户是管理员，我们首先检查服务中是否已经创建了管理员组。如果尚未创建，我们将创建它。
- en: We then add the user to the group by calling `cognitoProvider.adminAddUserToGroup`,
    passing in the parameters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过调用`cognitoProvider.adminAddUserToGroup`将用户添加到组中，传递参数。
- en: Adding the Database
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据库
- en: 'Next, we will create the DynamoDB NoSQL database for the project. To add the
    database, we can use the `Storage` category:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为项目创建DynamoDB NoSQL数据库。要添加数据库，我们可以使用`Storage`类别：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When working with DynamoDB, you have to have either a unique *primary key* or
    a unique combination of primary and *sort key* to uniquely identify individual
    items in the database. In our database, we have a primary key of `id` that will
    be the unique identifier for the items in the database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用DynamoDB时，必须有一个唯一的*主键*或主键和*排序键*的唯一组合，以唯一标识数据库中的各个项目。在我们的数据库中，我们有一个`id`主键，将作为数据库中项目的唯一标识符。
- en: There is also an option on the table to create *global secondary indexes* (GSIs).
    These allow us to add additional indexes that can be used to query our table and
    enable additional data access patterns. One of the most powerful features of DynamoDB
    and NoSQL databases in general is the idea of having other indexes (up to 20 GSIs
    for DynamoDB) that enable a multitude of access patterns. We will not be utilizing
    any secondary indexes hre, but I encourage you to look into how this works to
    further your knowledge of how to maximize the power and flexibility of DynamoDB.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表上还有一个选项可以创建*全局二级索引*（GSI）。这些允许我们添加额外的索引，可用于查询我们的表格并启用额外的数据访问模式。DynamoDB和NoSQL数据库一般具有的最强大的功能之一是拥有其他索引的概念（DynamoDB最多可以有20个GSI），这些索引使我们能够实现多种访问模式。在这里我们不会使用任何二级索引，但我鼓励你深入了解如何使用这些来增强DynamoDB的功能和灵活性。
- en: Adding the API
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加API
- en: 'Now that the database has been created, we’ll now create an API and another
    Lambda function that will interact with the database:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已创建，我们将创建一个API和另一个与数据库交互的Lambda函数：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we’ve created an API Gateway endpoint as well as a new Lambda function
    and integrated the function to be triggered from the API Gateway event. The CLI
    walks us through the setup, and allows us to set some base authorization rules
    around the API by restricting API access based on whether the user is authenticated
    or not. We’ve also set up a path that we will now be able to work with: `/products`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个API Gateway端点以及一个新的Lambda函数，并集成了从API Gateway事件触发该函数的功能。CLI会指导我们完成设置，并允许我们根据用户是否已经认证来设置一些基本的API授权规则。我们还设置了一个路径，现在我们将能够使用它：`/products`。
- en: The Lambda function includes an Express server as part of the boilerplate the
    CLI created for us. If you haven’t used Express before, it is a minimal Node.js
    web framework that provides a nice set of built-in features to develop web and
    mobile applications. For our purposes, we will be using it to more easily provide
    routing that will map to the endpoint(s) that we create in API Gateway. We’ll
    now be able to have `get`, `put`, `post`, and `delete` methods that we can call
    on the `/products` endpoint that will be handled by the Express framework.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数包含一个Express服务器作为CLI为我们创建的样板的一部分。如果您之前没有使用过Express，它是一个轻量级的Node.js Web框架，提供了一组很好的内置功能来开发Web和移动应用程序。对于我们的目的，我们将使用它更轻松地提供路由，以映射到API
    Gateway中创建的端点。现在，我们可以调用`/products`端点上的`get`、`put`、`post`和`delete`方法。
- en: If we wanted to add additional endpoints, we could update the `api` category
    by running `amplify update api` and then adding whatever new endpoints we’d created
    directly into the Express server code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要添加额外的端点，我们可以通过运行`amplify update api`来更新`api`类别，然后将我们创建的任何新端点直接添加到Express服务器代码中。
- en: Next, we will go ahead and update the code in the Lambda function that is running
    the Express server to handle the interactions with the database that we’d like
    to enable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新正在运行Express服务器的Lambda函数中的代码，以处理我们希望启用的与数据库的交互。
- en: 'The first thing we need to do is update the imports for the function:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是更新函数的导入：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we’ll create a couple of functions that will allow us to perform authorization
    checks on the API call. We want only users in the Admin group to be able to perform
    certain actions (while leaving open the potential to allow other groups in future).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建几个函数，允许我们对API调用执行授权检查。我们希望只有Admin组中的用户能够执行某些操作（同时留下未来允许其他组的潜力）。
- en: 'To do this, we will create two functions: `getGroupsForUser` and `canPerformAction`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将创建两个函数：`getGroupsForUser` 和 `canPerformAction`：
- en: '`getGroupsForUser`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`getGroupsForUser`'
- en: This will allow us to pass in the event coming in from the API call to determine
    what groups the user making the call is currently associated with.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们传入来自API调用的事件，以确定调用者当前关联的群组。
- en: '`canPerformAction`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`canPerformAction`'
- en: This first checks to see if the user is authenticated at all, and if not, will
    reject the request. It will then check to see if the user is part of the group
    passed in as the second argument, and if so, will allow the action to happen.
    If not, it will reject the action.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这首先检查用户是否已经认证，如果没有，将拒绝请求。然后它将检查用户是否属于作为第二个参数传入的组，并且如果是，则允许执行操作。如果不是，则拒绝操作。
- en: 'Create the functions with the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码创建函数：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, we will update the HTTP methods of `get`, `post`, and `delete` to interact
    with the database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新`get`、`post`和`delete`的HTTP方法以与数据库交互。
- en: 'Let’s first update `app.get` for `/products`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们更新`app.get`用于`/products`：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method calls a new function that we create named `getItems` that fetches
    the items from the DynamoDB table using a scan operation (`docClient.scan`). If
    the scan operation succeeds, we return the items in the response. If the operation
    fails, we return the error message.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法调用一个我们创建的名为`getItems`的新函数，它使用扫描操作（`docClient.scan`）从DynamoDB表中获取项目。如果扫描操作成功，则在响应中返回项目。如果操作失败，则返回错误消息。
- en: 'Next, let’s update `app.post` for `/products` to see how to create a new item
    in DynamoDB:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更新`app.post`用于`/products`，看看如何在DynamoDB中创建一个新条目：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This call is a little different than the `get` call. You can see that we retrieve
    the `body` from the event using the `req` object and then get event data from
    the `req.apiGateway` object.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用与`get`调用有些不同。您可以看到我们使用`req`对象从事件中检索`body`，然后从`req.apiGateway`对象获取事件数据。
- en: We first call `canPerformAction` to see if the caller is an admin. If this succeeds,
    we continue on to create an input object using the `body` argument and appending
    a unique ID onto the object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先调用`canPerformAction`来查看调用者是否为管理员。如果成功，我们将继续使用`body`参数创建输入对象，并追加一个唯一的ID到该对象。
- en: We then create a new `params` variable that contains the input along with the
    table name. Finally, we call the `put` method using the DynamoDB Document Client
    to create a new item.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个新的`params`变量，其中包含输入以及表名。最后，我们使用DynamoDB Document Client调用`put`方法来创建一个新项目。
- en: 'Next, let’s look at how to delete an item by updating the `app.delete` method
    for `/products`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何通过更新`app.delete`方法来删除一个项目，用于`/products`：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `delete` method, like the `post` method, requires an admin to perform the
    action. To implement this, we first check if they are an admin by calling `canPerformAction`.
    We then call the `delete` method using the DynamoDB Document Client to delete
    an item by passing in the primary key of `id`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete`方法和`post`方法一样，需要管理员来执行操作。为了实现这一点，我们首先调用`canPerformAction`来检查是否为管理员。然后，我们使用DynamoDB
    Document Client调用`delete`方法，通过传入`id`的主键来删除项目。'
- en: 'Finally, because we used the `uuid` library in our function, we will need to
    add it as a dependency to the function’s *package.json* file. In *amplify/backend/function/ecommercefunction/src/package.json*,
    add `uuid` as a dependency:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，因为我们在函数中使用了`uuid`库，所以我们需要将其添加为函数的依赖项到*package.json*文件中。在*amplify/backend/function/ecommercefunction/src/package.json*中，添加`uuid`作为依赖项：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, the backend has been set up and we can deploy it to AWS:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，后端已设置好，我们可以将其部署到AWS：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating the Frontend
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建前端
- en: 'The first thing we’ll do on the frontend is create the files we’ll need to
    work with:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端上，我们将首先创建我们需要处理的文件：
- en: '*Admin.js*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*Admin.js*'
- en: This component will hold the Admin dashboard to create new items.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件将持有管理员仪表板以创建新项目。
- en: '*Container.js*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*Container.js*'
- en: This will be a reusable layout component.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个可重复使用的布局组件。
- en: '*Main.js*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*Main.js*'
- en: This holds the main view of the app that will list the items that are for sale
    being pulled from the API and database.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这持有应用程序的主视图，将列出从API和数据库拉取的待售商品。
- en: '*Nav.js*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*Nav.js*'
- en: This will hold the navigation component.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将持有导航组件。
- en: '*Profile.js*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*Profile.js*'
- en: This will be a basic profile component that will allow users to sign out.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个基本的个人资料组件，允许用户注销。
- en: '*Router.js*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*Router.js*'
- en: This component will hold the router.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件将持有路由器。
- en: '*checkUser.js*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*checkUser.js*'
- en: This will hold a function that will retrieve the user’s profile and determine
    whether the user is an admin.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将持有一个函数，用于检索用户的个人资料并确定用户是否为管理员。
- en: 'Let’s next go ahead and change into the *src* directory and create these components:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们切换到*src*目录，并创建这些组件：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, open *src/index.js* and update it with the following code to import the
    Router, the Amplify library, and the CSS from Ant Design:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开*src/index.js*并更新它，导入Router、Amplify库和Ant Design的CSS：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Container Component
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器组件
- en: 'The `Container` component will provide a basic layout with a fixed width and
    center the components in a consistent way:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Container`组件将提供一个基本布局，固定宽度并以一致的方式将组件居中。'
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: checkUser Function
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: checkUser函数
- en: This function will check the current user’s information and then call the `updateUser`
    callback function to update the user. If there is no user, it returns with an
    empty object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将检查当前用户的信息，然后调用`updateUser`回调函数来更新用户。如果没有用户，则返回一个空对象。
- en: 'If there is a user, it will check to see if there are any Cognito groups associated
    with the user, and if so, check if the user is in the `Admin` group. If the user
    is in the `Admin` group, then the `isAuthorized` Boolean will be set to `true`;
    if not, the Boolean will be set to `false`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有用户，则会检查用户是否有与之关联的Cognito组，如果有，则检查用户是否在`Admin`组中。如果用户在`Admin`组中，则`isAuthorized`布尔值将设置为`true`；如果不是，则设置为`false`：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Nav Component
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航组件
- en: 'The `Nav` component will hold to main links (`Home` and `Profile`), and another
    admin link that will only be visible if you are signed in as an admin user:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nav`组件将持有主要链接（`首页`和`个人资料`），以及另一个管理员链接，仅在您以管理员用户身份登录时可见：'
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this component, we use the `useEffect` hook to call the `checkUser` function
    when the component loads. This will set the component state with the user information
    if there is a signed-in user.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，我们使用`useEffect`钩子在组件加载时调用`checkUser`函数。如果有已登录用户，这将使用用户信息设置组件状态。
- en: We also set up a listener, using the `Hub` component, to listen to `auth` events
    (like signing up, signing in, and signing out). When a user signs in or signs
    out, we again will invoke the `checkUser` function to keep the navigation state
    up to date.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: In the user interface, we then decide to only show the `Admin` link if the user
    is an authorized admin user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Profile Component
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This component is pretty basic. If a user is signed in, we will render the
    component and a sign-out button. If they are not signed in, the `withAuthenticator`
    component will render sign-up and sign-in flows for a user:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Router Component
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This component configures three main components and routes: `Main` (`/`), `Admin`
    (`/admin`), and `Profile` (`/profile`).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `useEffect` hook, we first call the `setRoute` function. This function
    will get the current window location and set the current route information to
    be passed down to the `Nav` component:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We also set up a listener to listen when the route changes (`hashchange`), and
    when it does, we will call `setRoute` to set the current route information to
    be passed down to the `Nav` component.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Admin Component
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Admin` component contains a form that will allow us to create new items
    in the inventory:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The main thing happening in this component is the `addItem` function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: This function uses the `API` category to interact with the REST API we created.
    When we set up this API, we named it `ecommerceapi`. Using the API name, as well
    as the path (`/products`), we can make requests against it, like `get`, `put`,
    `post`, and `delete`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'In our component, we called `API.post`, passing in an object containing the
    data we wanted to send in the body:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Main Component
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last component is the `Main` component, which is the main view that renders
    the list of inventory items.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main functions in this component, `getProducts` and `deleteItem`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`getProducts`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `get` method on the API. When the data is returned, the state is updated,
    setting the products array to the data returned from the API.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`deleteItem`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The `id` of the item to be deleted is used create a filtered list of the products
    array by removing the item to be deleted.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The filtered products array is used to update the local state, creating an optimistic
    response in the UI by deleting the item in the view and showing the new list of
    products immediately.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We use the `API` category to make a `delete` request, passing in the `id` of
    the product:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Testing It Out
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we should be able to run the app and test it out:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve now successfully deployed a full stack serverless CRUD+
    List app.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Lambda functions can be invoked from many different event types, including API
    calls, image uploads, database operations, and authentication events. In this
    chapter, we’ve enabled `Function` invocations from both HTTP events as well as
    authentication events.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an Express server in a Lambda function is a great way to extend the
    functionality of a single function.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Lambda 函数中运行 Express 服务器是扩展单个函数功能的一个好方法。
- en: 'The `API` category takes in two required arguments when working with REST APIs:
    the API name and the path. It also takes in an optional third argument, an object
    that can contain any arguments you may want to send in a POST request.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理 REST API 时，`API` 类别需要两个必需的参数：API 名称和路径。它还可以接受一个可选的第三个参数，一个对象，可以包含您可能想要在
    POST 请求中发送的任何参数。
- en: When interacting with DynamoDB from a Node.js Lambda function, use the DynamoDB
    document client, as it offers an easy-to-use API for creating, updating, deleting,
    and querying items from a DynamoDB database.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在 Node.js Lambda 函数中与 DynamoDB 交互时，请使用 DynamoDB 文档客户端，因为它提供了一个易于使用的 API，用于在
    DynamoDB 数据库中创建、更新、删除和查询项目。
