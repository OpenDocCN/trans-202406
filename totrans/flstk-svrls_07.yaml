- en: 'Chapter 7\. Serverless Functions In-Depth: Part 2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have covered quite a bit of functionality that can be achieved using
    a Lambda function. In this chapter, we’ll continue learning how to use Lambda
    functions in different ways to implement common functionality you’ll find useful
    when building applications. We’ll get into how to create and integrate into our
    app a fully functional backend complete with an API, authentication, a database,
    and authorization rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Amplify, there are two main ways to create APIs: GraphQL and REST. We’ll
    continue to cover GraphQL in [Chapter 8](ch08.xhtml#ch8), but here, we’ll learn
    how to do this with a REST API running in a Lambda function.'
  prefs: []
  type: TYPE_NORMAL
- en: The database we will use is Amazon DynamoDB, a NoSQL database. We will be invoking
    the Lambda function from an HTTP request routed through an API gateway endpoint.
    The Lambda function will take the HTTP request and then route it to different
    paths as the function will be running an Express web server.
  prefs: []
  type: TYPE_NORMAL
- en: This will allow us to have different routes available within a single function.
    We will then map different HTTP methods, like `post` and `delete`, to the routes
    to perform different actions on the database.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ll Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be building a basic ecommerce app that allows users to view products,
    and administrators to create and delete products. The building blocks of this
    app will lay the groundwork for building almost any type of CRUD+L (create, read,
    update, delete, and list) application, which is the backbone of many real-world
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using what we learned in Chapters [2](ch02.xhtml#ch2) and [6](ch06.xhtml#ch6)
    and building upon those ideas in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The services and features we’ll be needing are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'The main application logic will reside in a Lambda function that will be running
    an Express server. The server will have routes for the different HTTP methods
    we will need to work with: `get`, `post`, and `delete`.'
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs: []
  type: TYPE_NORMAL
- en: In order to interact with the main Lambda function, we will need to be able
    to invoke it using HTTP requests, sending `get`, `post`, and `delete` requests
    to interact with the API and the database.
  prefs: []
  type: TYPE_NORMAL
- en: DynamoDB NoSQL Database
  prefs: []
  type: TYPE_NORMAL
- en: This is the database that will hold all of the data for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs: []
  type: TYPE_NORMAL
- en: We will need a way to authenticate users in order to configure and enable administrator
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Another Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: We will need a Lambda trigger to place administrators into an Admin group, so
    there will be another Lambda function (post-confirmation trigger) associated with
    the authentication flow.
  prefs: []
  type: TYPE_NORMAL
- en: Like in previous chapters, we will need to integrate navigation into the client
    application for linking between routes. When a user is signed in, we will access
    the user’s groups to determine the state of the app based on the user’s permissions.
    These permissions might include determining whether or not to show the Admin navigation
    link or to allow users to view the buttons to delete items based on whether they
    are an administrator or not.
  prefs: []
  type: TYPE_NORMAL
- en: We will also have some authorization guards on the server to make sure that
    if a user performs an action, that they are indeed authorized to perform that
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we will need to do to get started is to create a new React
    application and install the necessary dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will initialize a new Amplify project and begin adding the services
    we’ll need for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding Authentication and Group Privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first service we’ll create is the authentication service. We need to be
    sure to also create the Lambda trigger in order to add users to the Admin group
    that we will be creating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the function with the following code and configure the `adminEmails`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we set an array of admin emails and an `isAdmin` variable.
    If the confirmed user is an admin, we first check to see if the Admin group has
    already created in the service. If it has not yet been created, we create it.
  prefs: []
  type: TYPE_NORMAL
- en: We then add the user to the group by calling `cognitoProvider.adminAddUserToGroup`,
    passing in the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will create the DynamoDB NoSQL database for the project. To add the
    database, we can use the `Storage` category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When working with DynamoDB, you have to have either a unique *primary key* or
    a unique combination of primary and *sort key* to uniquely identify individual
    items in the database. In our database, we have a primary key of `id` that will
    be the unique identifier for the items in the database.
  prefs: []
  type: TYPE_NORMAL
- en: There is also an option on the table to create *global secondary indexes* (GSIs).
    These allow us to add additional indexes that can be used to query our table and
    enable additional data access patterns. One of the most powerful features of DynamoDB
    and NoSQL databases in general is the idea of having other indexes (up to 20 GSIs
    for DynamoDB) that enable a multitude of access patterns. We will not be utilizing
    any secondary indexes hre, but I encourage you to look into how this works to
    further your knowledge of how to maximize the power and flexibility of DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the database has been created, we’ll now create an API and another
    Lambda function that will interact with the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’ve created an API Gateway endpoint as well as a new Lambda function
    and integrated the function to be triggered from the API Gateway event. The CLI
    walks us through the setup, and allows us to set some base authorization rules
    around the API by restricting API access based on whether the user is authenticated
    or not. We’ve also set up a path that we will now be able to work with: `/products`.'
  prefs: []
  type: TYPE_NORMAL
- en: The Lambda function includes an Express server as part of the boilerplate the
    CLI created for us. If you haven’t used Express before, it is a minimal Node.js
    web framework that provides a nice set of built-in features to develop web and
    mobile applications. For our purposes, we will be using it to more easily provide
    routing that will map to the endpoint(s) that we create in API Gateway. We’ll
    now be able to have `get`, `put`, `post`, and `delete` methods that we can call
    on the `/products` endpoint that will be handled by the Express framework.
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to add additional endpoints, we could update the `api` category
    by running `amplify update api` and then adding whatever new endpoints we’d created
    directly into the Express server code.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will go ahead and update the code in the Lambda function that is running
    the Express server to handle the interactions with the database that we’d like
    to enable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is update the imports for the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll create a couple of functions that will allow us to perform authorization
    checks on the API call. We want only users in the Admin group to be able to perform
    certain actions (while leaving open the potential to allow other groups in future).
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will create two functions: `getGroupsForUser` and `canPerformAction`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getGroupsForUser`'
  prefs: []
  type: TYPE_NORMAL
- en: This will allow us to pass in the event coming in from the API call to determine
    what groups the user making the call is currently associated with.
  prefs: []
  type: TYPE_NORMAL
- en: '`canPerformAction`'
  prefs: []
  type: TYPE_NORMAL
- en: This first checks to see if the user is authenticated at all, and if not, will
    reject the request. It will then check to see if the user is part of the group
    passed in as the second argument, and if so, will allow the action to happen.
    If not, it will reject the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the functions with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will update the HTTP methods of `get`, `post`, and `delete` to interact
    with the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first update `app.get` for `/products`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This method calls a new function that we create named `getItems` that fetches
    the items from the DynamoDB table using a scan operation (`docClient.scan`). If
    the scan operation succeeds, we return the items in the response. If the operation
    fails, we return the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s update `app.post` for `/products` to see how to create a new item
    in DynamoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This call is a little different than the `get` call. You can see that we retrieve
    the `body` from the event using the `req` object and then get event data from
    the `req.apiGateway` object.
  prefs: []
  type: TYPE_NORMAL
- en: We first call `canPerformAction` to see if the caller is an admin. If this succeeds,
    we continue on to create an input object using the `body` argument and appending
    a unique ID onto the object.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a new `params` variable that contains the input along with the
    table name. Finally, we call the `put` method using the DynamoDB Document Client
    to create a new item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s look at how to delete an item by updating the `app.delete` method
    for `/products`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `delete` method, like the `post` method, requires an admin to perform the
    action. To implement this, we first check if they are an admin by calling `canPerformAction`.
    We then call the `delete` method using the DynamoDB Document Client to delete
    an item by passing in the primary key of `id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, because we used the `uuid` library in our function, we will need to
    add it as a dependency to the function’s *package.json* file. In *amplify/backend/function/ecommercefunction/src/package.json*,
    add `uuid` as a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the backend has been set up and we can deploy it to AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we’ll do on the frontend is create the files we’ll need to
    work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Admin.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This component will hold the Admin dashboard to create new items.
  prefs: []
  type: TYPE_NORMAL
- en: '*Container.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This will be a reusable layout component.
  prefs: []
  type: TYPE_NORMAL
- en: '*Main.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This holds the main view of the app that will list the items that are for sale
    being pulled from the API and database.
  prefs: []
  type: TYPE_NORMAL
- en: '*Nav.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This will hold the navigation component.
  prefs: []
  type: TYPE_NORMAL
- en: '*Profile.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This will be a basic profile component that will allow users to sign out.
  prefs: []
  type: TYPE_NORMAL
- en: '*Router.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This component will hold the router.
  prefs: []
  type: TYPE_NORMAL
- en: '*checkUser.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This will hold a function that will retrieve the user’s profile and determine
    whether the user is an admin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s next go ahead and change into the *src* directory and create these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open *src/index.js* and update it with the following code to import the
    Router, the Amplify library, and the CSS from Ant Design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Container Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Container` component will provide a basic layout with a fixed width and
    center the components in a consistent way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: checkUser Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This function will check the current user’s information and then call the `updateUser`
    callback function to update the user. If there is no user, it returns with an
    empty object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is a user, it will check to see if there are any Cognito groups associated
    with the user, and if so, check if the user is in the `Admin` group. If the user
    is in the `Admin` group, then the `isAuthorized` Boolean will be set to `true`;
    if not, the Boolean will be set to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Nav Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Nav` component will hold to main links (`Home` and `Profile`), and another
    admin link that will only be visible if you are signed in as an admin user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this component, we use the `useEffect` hook to call the `checkUser` function
    when the component loads. This will set the component state with the user information
    if there is a signed-in user.
  prefs: []
  type: TYPE_NORMAL
- en: We also set up a listener, using the `Hub` component, to listen to `auth` events
    (like signing up, signing in, and signing out). When a user signs in or signs
    out, we again will invoke the `checkUser` function to keep the navigation state
    up to date.
  prefs: []
  type: TYPE_NORMAL
- en: In the user interface, we then decide to only show the `Admin` link if the user
    is an authorized admin user.
  prefs: []
  type: TYPE_NORMAL
- en: Profile Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This component is pretty basic. If a user is signed in, we will render the
    component and a sign-out button. If they are not signed in, the `withAuthenticator`
    component will render sign-up and sign-in flows for a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Router Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This component configures three main components and routes: `Main` (`/`), `Admin`
    (`/admin`), and `Profile` (`/profile`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `useEffect` hook, we first call the `setRoute` function. This function
    will get the current window location and set the current route information to
    be passed down to the `Nav` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We also set up a listener to listen when the route changes (`hashchange`), and
    when it does, we will call `setRoute` to set the current route information to
    be passed down to the `Nav` component.
  prefs: []
  type: TYPE_NORMAL
- en: Admin Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Admin` component contains a form that will allow us to create new items
    in the inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The main thing happening in this component is the `addItem` function.
  prefs: []
  type: TYPE_NORMAL
- en: This function uses the `API` category to interact with the REST API we created.
    When we set up this API, we named it `ecommerceapi`. Using the API name, as well
    as the path (`/products`), we can make requests against it, like `get`, `put`,
    `post`, and `delete`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our component, we called `API.post`, passing in an object containing the
    data we wanted to send in the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Main Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last component is the `Main` component, which is the main view that renders
    the list of inventory items.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main functions in this component, `getProducts` and `deleteItem`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getProducts`'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `get` method on the API. When the data is returned, the state is updated,
    setting the products array to the data returned from the API.
  prefs: []
  type: TYPE_NORMAL
- en: '`deleteItem`'
  prefs: []
  type: TYPE_NORMAL
- en: The `id` of the item to be deleted is used create a filtered list of the products
    array by removing the item to be deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The filtered products array is used to update the local state, creating an optimistic
    response in the UI by deleting the item in the view and showing the new list of
    products immediately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We use the `API` category to make a `delete` request, passing in the `id` of
    the product:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Testing It Out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we should be able to run the app and test it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve now successfully deployed a full stack serverless CRUD+
    List app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda functions can be invoked from many different event types, including API
    calls, image uploads, database operations, and authentication events. In this
    chapter, we’ve enabled `Function` invocations from both HTTP events as well as
    authentication events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an Express server in a Lambda function is a great way to extend the
    functionality of a single function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `API` category takes in two required arguments when working with REST APIs:
    the API name and the path. It also takes in an optional third argument, an object
    that can contain any arguments you may want to send in a POST request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When interacting with DynamoDB from a Node.js Lambda function, use the DynamoDB
    document client, as it offers an easy-to-use API for creating, updating, deleting,
    and querying items from a DynamoDB database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
