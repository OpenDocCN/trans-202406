["```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: mycustomcontroller\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: customcontroller\n    spec:\n      containers:\n      - name: thecontroller\n        image: example/controller:0.1.0\n        ports:\n        - containerPort: 9999\n        env:\n        - name: REGION\n          value: eu-west-1\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"flagger.fullname\" . }}\n...\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: {{ template \"flagger.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: {{ template \"flagger.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n    spec:\n      serviceAccountName: {{ template \"flagger.serviceAccountName\" . }}\n      containers:\n        - name: flagger\n          securityContext:\n            readOnlyRootFilesystem: true\n            runAsUser: 10001\n          image: \"{{ .Values.image.repository }}:{{ .Values.image.tag }}\"\n```", "```\n# get the latest list of charts:\n$ helm repo update\n\n# install MySQL:\n$ helm install stable/mysql\nReleased smiling-penguin\n\n# list running apps:\n$ helm ls\nNAME             VERSION   UPDATED                   STATUS    CHART\nsmiling-penguin  1         Wed Sep 28 12:59:46 2016  DEPLOYED  mysql-0.1.0\n\n# remove it:\n$ helm delete smiling-penguin\nRemoved smiling-penguin\n```", "```\nimageTags:\n  - name: quay.io/programming-kubernetes/cnat-operator\n    newTag: 0.1.0\nresources:\n- cnat-controller.yaml\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: cnat-controller\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: cnat\n    spec:\n      containers:\n      - name: custom-controller\n        image: quay.io/programming-kubernetes/cnat-operator\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: cnat-controller\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: cnat\n    spec:\n      containers:\n      - name: custom-controller\n        image: quay.io/programming-kubernetes/cnat-operator:0.1.0\n```", "```\n$ ls -al rbac/\ntotal 40\ndrwx------  7 mhausenblas  staff   224 12 Apr 09:52 .\ndrwx------  7 mhausenblas  staff   224 12 Apr 09:55 ..\n-rw-------  1 mhausenblas  staff   280 12 Apr 09:49 auth_proxy_role.yaml\n-rw-------  1 mhausenblas  staff   257 12 Apr 09:49 auth_proxy_role_binding.yaml\n-rw-------  1 mhausenblas  staff   449 12 Apr 09:49 auth_proxy_service.yaml\n-rw-r--r--  1 mhausenblas  staff  1044 12 Apr 10:50 rbac_role.yaml\n-rw-r--r--  1 mhausenblas  staff   287 12 Apr 10:50 rbac_role_binding.yaml\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  creationTimestamp: null\n  name: manager-role\nrules:\n- apiGroups:\n  - apps\n  resources:\n  - deployments\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups:\n  - apps\n  resources:\n  - deployments/status\n  verbs: [\"get\", \"update\", \"patch\"]\n- apiGroups:\n  - cnat.programming-kubernetes.info\n  resources:\n  - ats\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups:\n  - cnat.programming-kubernetes.info\n  resources:\n  - ats/status\n  verbs: [\"get\", \"update\", \"patch\"]\n- apiGroups:\n  - admissionregistration.k8s.io\n  resources:\n  - mutatingwebhookconfigurations\n  - validatingwebhookconfigurations\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups:\n  - \"\"\n  resources:\n  - services\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  creationTimestamp: null\n  name: manager-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: manager-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: system\n```", "```\n{ \"level\":\"info\",\n  \"ts\":1555063927.492718,\n  \"logger\":\"controller\",\n  \"msg\":\"=== Reconciling At\" }\n{ \"level\":\"info\",\n  \"ts\":1555063927.49283,\n  \"logger\":\"controller\",\n  \"msg\":\"Phase: PENDING\" }\n{ \"level\":\"info\",\n  \"ts\":1555063927.492857,\n  \"logger\":\"controller\",\n  \"msg\":\"Checking schedule\" }\n{ \"level\":\"info\",\n  \"ts\":1555063927.492915,\n  \"logger\":\"controller\",\n  \"msg\":\"Schedule parsing done\" }\n```", "```\nreqLogger := log.WithValues(\"namespace\", request.Namespace, \"at\", request.Name)\n```", "```\ncase cnatv1alpha1.PhasePending:\n  reqLogger.Info(\"Phase: PENDING\")\n  // As long as we haven't executed the command yet, we need to check if it's\n  // already time to act:\n  reqLogger.Info(\"Checking schedule\", \"Target\", instance.Spec.Schedule)\n  // Check if it's already time to execute the command with a tolerance of\n  // 2 seconds:\n  d, err := timeUntilSchedule(instance.Spec.Schedule)\n  if err != nil {\n    reqLogger.Error(err, \"Schedule parsing failure\")\n    // Error reading the schedule. Wait until it is fixed.\n    return reconcile.Result{}, err\n  }\n  reqLogger.Info(\"Schedule parsing done\", \"Result\", \"diff\", fmt.Sprintf(\"%v\", d))\n  if d > 0 {\n    // Not yet time to execute the command, wait until the scheduled time\n    return reconcile.Result{RequeueAfter: d}, nil\n  }\n  reqLogger.Info(\"It's time!\", \"Ready to execute\", instance.Spec.Command)\n  instance.Status.Phase = cnatv1alpha1.PhaseRunning\n```"]