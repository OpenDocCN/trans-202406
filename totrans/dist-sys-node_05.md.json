["```\n$ export NODE_ENV=production\n$ node server.js\n```", "```\ninput {\n  udp {\n    id => \"nodejs_udp_logs\"\n    port => 7777\n    codec => json\n  }\n}\noutput {\n  elasticsearch {\n    hosts => [\"localhost:9200\"]\n    document_type => \"nodelog\"\n    manage_template => false\n    index => \"nodejs-%{+YYYY.MM.dd}\"\n  }\n}\n```", "```\n$ sudo sysctl -w vm.max_map_count=262144 # Linux Only\n$ docker run -p 5601:5601 -p 9200:9200 \\\n  -p 5044:5044 -p 7777:7777/udp \\\n  -v $PWD/misc/elk/udp.conf:/etc/logstash/conf.d/99-input-udp.conf \\\n  -e MAX_MAP_COUNT=262144 \\\n  -it --name distnode-elk sebp/elk:683\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 node-fetch@2.6 middie@5.1 const server = require('fastify')();\nconst fetch = require('node-fetch');\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\nconst log = require('./logstash.js'); ![1](assets/1.png)\n\n(async () => {\n  await server.register(require('middie')); ![2](assets/2.png)\n  server.use((req, res, next) => { ![3](assets/3.png)\n    log('info', 'request-incoming', { ![4](assets/4.png)\n      path: req.url, method: req.method, ip: req.ip,\n      ua: req.headers['user-agent'] || null });\n    next();\n  });\n  server.setErrorHandler(async (error, req) => {\n    log('error', 'request-failure', {stack: error.stack, ![5](assets/5.png)\n      path: req.url, method: req.method, });\n    return { error: error.message };\n  });\n  server.get('/', async () => {\n    const url = `http://${TARGET}/recipes/42`;\n    log('info', 'request-outgoing', {url, svc: 'recipe-api'}); ![6](assets/6.png)\n    const req = await fetch(url);\n    const producer_data = await req.json();\n    return { consumer_pid: process.pid, producer_data };\n  });\n  server.get('/error', async () => { throw new Error('oh no'); });\n  server.listen(PORT, HOST, () => {\n    log('verbose', 'listen', {host: HOST, port: PORT}); ![7](assets/7.png)\n  });\n})();\n```", "```\nconst client = require('dgram').createSocket('udp4'); ![1](assets/1.png)\nconst host = require('os').hostname();\nconst [LS_HOST, LS_PORT] = process.env.LOGSTASH.split(':'); ![2](assets/2.png)\nconst NODE_ENV = process.env.NODE_ENV;\n\nmodule.exports = function(severity, type, fields) {\n  const payload = JSON.stringify({ ![3](assets/3.png)\n    '@timestamp': (new Date()).toISOString(),\n    \"@version\": 1, app: 'web-api', environment: NODE_ENV,\n    severity, type, fields, host\n  });\n  console.log(payload);\n  client.send(payload, LS_PORT, LS_HOST);\n};\n```", "```\n$ NODE_ENV=development LOGSTASH=localhost:7777 \\\n  node web-api/consumer-http-logs.js\n$ node recipe-api/producer-http-basic.js\n$ brew install watch # required for macOS\n$ watch -n5 curl http://localhost:3000\n$ watch -n13 curl http://localhost:3000/error\n```", "```\napp:\"web-api\" AND (severity:\"error\" OR severity:\"warn\")\n```", "```\n$ docker run \\\n  -p 8080:80 \\\n  -p 8125:8125/udp \\\n  -it --name distnode-graphite graphiteapp/graphite-statsd:1.1.6-1\n$ docker run \\\n  -p 8000:3000 \\\n  -it --name distnode-grafana grafana/grafana:6.5.2\n```", "```\nfoo.bar.baz:1|c\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 node-fetch@2.6 statsd-client@0.4.4 middie@5.1 const server = require('fastify')();\nconst fetch = require('node-fetch');\nconst HOST = '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\nconst SDC = require('statsd-client');\nconst statsd = new (require('statsd-client'))({host: 'localhost',\n  port: 8125, prefix: 'web-api'}); ![1](assets/1.png)\n\n(async () => {\n  await server.register(require('middie'));\n  server.use(statsd.helpers.getExpressMiddleware('inbound', { ![2](assets/2.png)\n    timeByUrl: true}));\n  server.get('/', async () => {\n    const begin = new Date();\n    const req = await fetch(`http://${TARGET}/recipes/42`);\n    statsd.timing('outbound.recipe-api.request-time', begin); ![3](assets/3.png)\n    statsd.increment('outbound.recipe-api.request-count'); ![4](assets/4.png)\n    const producer_data = await req.json();\n\n    return { consumer_pid: process.pid, producer_data };\n  });\n  server.get('/error', async () => { throw new Error('oh no'); });\n  server.listen(PORT, HOST, () => {\n    console.log(`Consumer running at http://${HOST}:${PORT}/`);\n  });\n})();\n```", "```\n$ NODE_DEBUG=statsd-client node web-api/consumer-http-metrics.js\n$ node recipe-api/producer-http-basic.js\n$ autocannon -d 300 -R 5 -c 1 http://localhost:3000\n$ watch -n1 curl http://localhost:3000/error\n```", "```\naliasByNode(stats_counts.web-api.inbound.response_code.*, 4)\n```", "```\naliasByNode(stats.timers.web-api.outbound.*.request-time.upper_90, 4)\n```", "```\naliasByNode(stats_counts.web-api.outbound.*.request-count, 3)\n```", "```\nconst v8 = require('v8');\nconst fs = require('fs');\n\nsetInterval(() => {\n  statsd.gauge('server.conn', server.server._connections); ![1](assets/1.png)\n\n  const m = process.memoryUsage(); ![2](assets/2.png)\n  statsd.gauge('server.memory.used', m.heapUsed);\n  statsd.gauge('server.memory.total', m.heapTotal);\n\n  const h = v8.getHeapStatistics(); ![3](assets/3.png)\n  statsd.gauge('server.heap.size', h.used_heap_size);\n  statsd.gauge('server.heap.limit', h.heap_size_limit);\n\n  fs.readdir('/proc/self/fd', (err, list) => {\n    if (err) return;\n    statsd.gauge('server.descriptors', list.length); ![4](assets/4.png)\n  });\n\n  const begin = new Date();\n  setTimeout(() => { statsd.timing('eventlag', begin); }, 0); ![5](assets/5.png)\n}, 10_000);\n```", "```\n[{\n  \"id\":       \"0000000000000111\",\n  \"traceId\":  \"0000000000000100\",\n  \"parentId\": \"0000000000000110\",\n  \"timestamp\": 1579221096510000,\n  \"name\": \"get_recipe\", \"duration\": 80000, \"kind\": \"CLIENT\",\n  \"localEndpoint\": {\n    \"serviceName\": \"web-api\", \"ipv4\": \"127.0.0.1\", \"port\": 100\n  },\n  \"remoteEndpoint\": { \"ipv4\": \"127.0.0.2\", \"port\": 200 },\n  \"tags\": {\n    \"http.method\": \"GET\", \"http.path\": \"/recipe/42\", \"diagram\": \"C2\"\n  }\n}]\n```", "```\n$ docker run -p 9411:9411 \\\n  -it --name distnode-zipkin \\\n  openzipkin/zipkin-slim:2.19\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 node-fetch@2.6 zipkin-lite@0.1 const server = require('fastify')();\nconst fetch = require('node-fetch');\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\nconst ZIPKIN = process.env.ZIPKIN || 'localhost:9411';\nconst Zipkin = require('zipkin-lite');\nconst zipkin = new Zipkin({ ![1](assets/1.png)\n  zipkinHost: ZIPKIN,\n  serviceName: 'web-api', servicePort: PORT, serviceIp: HOST,\n  init: 'short' ![2](assets/2.png)\n});\nserver.addHook('onRequest', zipkin.onRequest()); ![3](assets/3.png)\nserver.addHook('onResponse', zipkin.onResponse());\n\nserver.get('/', async (req) => {\n  req.zipkin.setName('get_root'); ![4](assets/4.png)\n\n  const url = `http://${TARGET}/recipes/42`;\n  const zreq = req.zipkin.prepare(); ![5](assets/5.png)\n  const recipe = await fetch(url, { headers: zreq.headers });\n  zreq.complete('GET', url);\n  const producer_data = await recipe.json();\n\n  return {pid: process.pid, producer_data, trace: req.zipkin.trace};\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Consumer running at http://${HOST}:${PORT}/`);\n});\n```", "```\nconst PORT = process.env.PORT || 4000;\nconst ZIPKIN = process.env.ZIPKIN || 'localhost:9411';\nconst Zipkin = require('zipkin-lite');\nconst zipkin = new Zipkin({\n  zipkinHost: ZIPKIN,\n  serviceName: 'recipe-api', servicePort: PORT, serviceIp: HOST,\n});\nserver.addHook('onRequest', zipkin.onRequest());\nserver.addHook('onResponse', zipkin.onResponse());\n\nserver.get('/recipes/:id', async (req, reply) => {\n  req.zipkin.setName('get_recipe');\n  const id = Number(req.params.id);\n```", "```\n$ node recipe-api/producer-http-zipkin.js\n$ node web-api/consumer-http-zipkin.js\n$ curl http://localhost:3000/\n```", "```\nhttp://localhost:9411/zipkin/\n```", "```\n$ docker run \\\n  --rm \\\n  -p 5432:5432 \\\n  -e POSTGRES_PASSWORD=hunter2 \\\n  -e POSTGRES_USER=tmp \\\n  -e POSTGRES_DB=tmp \\\n  postgres:12.3\n$ docker run \\\n  --rm \\\n  -p 6379:6379 \\\n  redis:6.0\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 ioredis@4.17 pg@8.3 const server = require('fastify')();\nconst HOST = '0.0.0.0';\nconst PORT = 3300;\nconst redis = new (require(\"ioredis\"))({enableOfflineQueue: false}); ![1](assets/1.png)\nconst pg = new (require('pg').Client)();\npg.connect(); // Note: Postgres will not reconnect on failure \nserver.get('/health', async (req, reply) => {\n  try {\n    const res = await pg.query('SELECT $1::text as status', ['ACK']);\n    if (res.rows[0].status !== 'ACK') reply.code(500).send('DOWN');\n  } catch(e) {\n    reply.code(500).send('DOWN'); ![2](assets/2.png)\n  }\n  // ... other down checks ...\n  let status = 'OK';\n  try {\n    if (await redis.ping() !== 'PONG') status = 'DEGRADED';\n  } catch(e) {\n    status = 'DEGRADED'; ![3](assets/3.png)\n  }\n  // ... other degraded checks ...\n  reply.code(200).send(status);\n});\n\nserver.listen(PORT, HOST, () => console.log(`http://${HOST}:${PORT}/`));\n```", "```\n$ PGUSER=tmp PGPASSWORD=hunter2 PGDATABASE=tmp \\\n  node basic-http-healthcheck.js\n```", "```\n$ curl -v http://localhost:3300/health\n```", "```\n$ git clone git@github.com:cabotapp/docker-cabot.git cabot\n$ cd cabot\n$ git checkout 1f846b96\n```", "```\nTIME_ZONE=America/Los_Angeles ![1](assets/1.png)\nADMIN_EMAIL=admin@example.org\nCABOT_FROM_EMAIL=cabot@example.org\nDJANGO_SECRET_KEY=abcd1234\nWWW_HTTP_HOST=localhost:5000\nWWW_SCHEME=http\n\n# GRAPHITE_API=http://<YOUR-IP-ADDRESS>:8080/ ![2](assets/2.png)\n\nTWILIO_ACCOUNT_SID=<YOUR_TWILIO_ACCOUNT_SID> ![3](assets/3.png)\nTWILIO_AUTH_TOKEN=<YOUR_TWILIO_AUTH_TOKEN>\nTWILIO_OUTGOING_NUMBER=<YOUR_TWILIO_NUMBER>\n```", "```\n$ docker-compose up\n```", "```\nSent from your Twilio trial account - Service\nDist Node Service reporting CRITICAL status:\nhttp://localhost:5000/service/1/\n```", "```\n$ docker rm cabot_postgres_1 cabot_rabbitmq_1 \\\n  cabot_worker_1 cabot_beat_1 cabot_web_1\n```"]