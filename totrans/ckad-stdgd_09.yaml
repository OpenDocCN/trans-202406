- en: Chapter 9\. Labels and Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exam curriculum doesn’t explicitly mention the concept of labels; however,
    it’s an important one for understanding how certain Kubernetes primitives function
    internally. To avoid confusing labels with annotations, we’ll also discuss the
    commonalities and differences among those concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Labels are an essential tool for querying, filtering, and sorting Kubernetes
    objects. Annotations represent descriptive metadata for Kubernetes objects but
    can’t be used for queries. In this chapter, you will learn how to assign and use
    both concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes lets you assign key-value pairs to objects so that you can use them
    later within a search query. Those key-value pairs are called *labels*. To draw
    an analogy, you can think of labels as tags for a blog post.
  prefs: []
  type: TYPE_NORMAL
- en: A label describes a Kubernetes object in distinct terms (e.g., a category like
    “frontend” or “backend”), but it is not meant for elaborate, multi-word descriptions
    of its functionality. As part of the specification, Kubernetes limits the length
    of a label to a maximum of 63 characters and a range of allowed alphanumeric and
    separator characters.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-1](#pod_labels) shows the Pods named `frontend`, `backend`, and `database`.
    Each of the Pods declares a unique set of labels.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0901](Images/ckd2_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. Pods with labels
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It’s common practice to assign one or many labels to an object at creation time;
    however, you can modify them as needed for a live object. When you see labels
    for the first time, they might seem insignificant—but their importance cannot
    be overstated. They’re essential for understanding the runtime behavior of more
    advanced Kubernetes objects like a Deployment and a Service. Later in this chapter,
    we’ll see the significance of labels in practice when learning about Deployments
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can declare labels imperatively with the `run` command or declaratively
    in the `metadata.labels` section in the YAML manifest. The command-line option
    `--labels` (or `-l` in its short form) defines a comma-separated list of labels
    when creating a Pod. The following command creates a new Pod with two labels from
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Assigning labels to Kubernetes objects by editing the manifest requires a change
    to the `metadata` section. [Example 9-1](#pod_metadata_labels) shows the Pod definition
    from the previous command if we were to start with the YAML manifest.
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-1\. A Pod defining two labels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Inspecting Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can inspect the labels assigned to a Kubernetes object from different angles.
    Here, we’ll want to look at the most common ways to identify the labels of a Pod.
    As with any other runtime information, you can use the `describe` or `get` commands
    to retrieve the labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to list the labels for all object types or a specific object type,
    use the `--show-labels` command-line option. This option is convenient if you
    need to sift through a longer list of objects. The output automatically adds a
    new column named `LABELS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Modifying Labels for a Live Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add or remove a label from an existing Kubernetes object, or simply
    modify an existing label at any time. One way to achieve this is by editing the
    live object and changing the label definition in the `metadata.labels` section.
    The other option, which offers a slightly faster turnaround, is the `label` command.
    The following commands add a new label, change the value of the label, and then
    remove the label with the minus character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using Label Selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Labels become meaningful only when combined with the selection feature. A label
    selector uses a set of criteria to query for Kubernetes objects. For example,
    you could use a label selector to express “select all Pods with the label assignment
    `env=dev`, `tier=frontend`, and have a label with the key `version` independent
    of the assigned value,” as shown in [Figure 9-2](#label_selection).
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0902](Images/ckd2_0902.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. Selecting Pods by label criteria
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Kubernetes offers two ways to select objects by labels: from the command line
    and within a manifest. Let’s talk about both options.'
  prefs: []
  type: TYPE_NORMAL
- en: Label selection from the command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the command line, you can select objects by label using the `--selector`
    option (`-l` in its short-form notation). You can express a filter by providing
    an equality-based requirement or a set-based requirement. Both requirement types
    can be combined in a single query.
  prefs: []
  type: TYPE_NORMAL
- en: An *equality-based requirement* can use the operators `=`, `==`, or `!=`. You
    can separate multiple filter terms with a comma and then combine them with a boolean
    `AND`. At this time, equality-based label selection cannot express a boolean `OR`
    operation. A typical expression could say, “select all Pods with the label assignment
    `env=prod`.”
  prefs: []
  type: TYPE_NORMAL
- en: A *set-based requirement* can filter objects based on a set of values using
    the operators `in`, `notin`, and `exists`. The `in` and `notin` operators work
    based on a boolean `OR`. A typical expression could say, “select all Pods with
    the label key `env` and the value `prod` or `dev`.”
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the functionality, we’ll start by setting up three different
    Pods with labels. All `kubectl` commands use the command-line option `--show-labels`
    to compare the results with our expectations. The `--show-labels` option is not
    needed for label selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll start by filtering the Pods with an equality-based requirement. Here,
    we are looking for all Pods with the label assignment `env=prod`. The result returns
    all three Pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The next filter operation uses a set-based requirement. We are asking for all
    Pods that have the label key `team` with the values `storage` or `shiny`. The
    result returns only the Pods named `backend` and `frontend`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we’ll combine an equality-based requirement with a set-based requirement.
    The result returns only the `backend` Pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Label selection in a manifest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some advanced Kubernetes objects such as Deployments, Services, or network policies
    act as configuration proxies for Pods. They usually select a set of Pods by labels
    and then provide added value. For example, a network policy controls network traffic
    from and to a set of Pods. Only the Pods with matching labels will apply the network
    rules. [Example 9-2](#network_policy_pod_label_selection) applies the network
    policy to Pods with the equality-based requirement `tier=frontend`. For more details
    on network policies, see [Chapter 23](ch23.xhtml#network_policies).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-2\. Label selection as part of the network policy API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The way you define label selection in a manifest is based on the API version
    of the Kubernetes resources and may differ between types. The content that follows
    in later chapters will use label selection heavily.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you continue working with labels, you will likely find common key-value pairs
    you want to assign to objects. Many of those labels evolve around metadata for
    an application, for example, the name of the component you are deploying with
    a Pod, or its version.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes proposes a list of [recommended labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/),
    all of which start with the key prefix `app.kubernetes.io`. [Example 9-3](#recommended_labels_pod)
    shows the assignment of version and component labels in a Pod definition.
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-3\. A Pod using recommended labels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Familiarize yourself with these recommended labels so you can use them across
    all objects you are managing. This provides the benefit of enabling tooling in
    the Kubernetes ecosystem to use the same terminology and enabling developers to
    use the same “language” when referring to application meta information.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Annotations are declared similarly to labels, but they serve a different purpose.
    They represent key-value pairs for providing descriptive metadata. The most important
    differentiator is that annotations cannot be used for querying or selecting objects.
    Typical examples of annotations may include SCM commit hash IDs, release information,
    or contact details for teams operating the object. Make sure to put the value
    of an annotation into single quotes or double quotes if it contains special characters
    or spaces. [Figure 9-3](#pod_annotations) illustrates a Pod with three annotations.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0903](Images/ckd2_0903.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3\. Pod with annotations
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Kubernetes defines a list of reserved annotations that it will evaluate at runtime
    to control the runtime behavior of the object. You can find more information at
    [“Reserved Annotations”](#reserved_annotation).
  prefs: []
  type: TYPE_NORMAL
- en: Declaring Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `kubectl run` command does not provide a command-line option for defining
    annotations that’s similar to the one for labels. You will have to start by writing
    a YAML manifest and adding the desired annotations under `metadata.annotations`,
    as shown in [Example 9-4](#pod_metadata_annotations).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-4\. A Pod defining three annotations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Inspecting Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to labels, you can use the `describe` or `get` commands to retrieve
    the assigned annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Modifying Annotations for a Live Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `annotate` command is the counterpart of the `labels` command but used
    for annotations. As you can see in the following examples, the usage pattern is
    the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Reserved Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kubernetes itself and extensions to Kubernetes use the concept of annotations
    to configure runtime behavior for an object. For example, you can assign the reserved
    annotation `pod-security.kubernetes.io/enforce: "baseline"` to a namespace object
    to enforce [security standards](https://kubernetes.io/docs/concepts/security/pod-security-standards/)
    for all Pods that live in the namespace. [Example 9-5](#reserved_annotation_namespace)
    shows a namespace definition that assigns the annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-5\. A Pod using a reserved annotation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See the [Kubernetes documentation](https://kubernetes.io/docs/reference/labels-annotations-taints/)
    for a full list of reserved annotations in Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Labels are a central concept for controlling the runtime behavior of more advanced
    Kubernetes objects. For example, in the context of a Deployment, Kubernetes requires
    you to use label selection to *select* the Pods the Deployment manages. You can
    use labels to select objects based on a query from the command line or within
    a manifest if supported by the primitive’s API. Kubernetes suggests label keys
    for commonly used application metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations serve a different purpose; they provide human-readable, informative
    metadata. You cannot use annotations for querying objects. Kubernetes introduced
    reserved annotations as a means of flagging objects for special runtime treatment.
  prefs: []
  type: TYPE_NORMAL
- en: Exam Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Practice labels declaration and selection
  prefs: []
  type: TYPE_NORMAL
- en: Labels are an extremely important concept in Kubernetes, as many other primitives
    work with label selection. Practice how to declare labels for different objects,
    and use the `-l` command-line option to query for them based on equality-based
    and set-based requirements. Label selection in a YAML manifest might look slightly
    different depending on the API version of the spec. Extensively practice label
    selection for primitives that use them heavily.
  prefs: []
  type: TYPE_NORMAL
- en: Understand the difference between labels and annotations
  prefs: []
  type: TYPE_NORMAL
- en: All you need to know about annotations is their declaration from the command
    line and in a YAML manifest. Be aware that annotations are meant only for assigning
    metadata to objects and they cannot be queried for.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solutions to these exercises are available in [Appendix A](app01_split_005.xhtml#appendix_a_labels_annotations).
  prefs: []
  type: TYPE_NORMAL
- en: Create three Pods that use the image `nginx:1.25.1`. The names of the Pods should
    be `pod-1`, `pod-2`, and `pod-3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the label `tier=frontend` to `pod-1` and the label `tier=backend` to
    `pod-2` and `pod-3`. All pods should also assign the label `team=artemidis`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Assign the annotation with the key `deployer` to `pod-1` and `pod-3`. Use your
    own name as the value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the command line, use label selection to find all Pods with the team `artemidis`
    or `aircontrol` and that are considered a backend service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a Pod with the image `nginx:1.25.1` that assigns two recommended labels:
    one for defining the application name with the value `F5-nginx`, and one for defining
    the tool used to manage the application named `helm`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Render the assigned labels of the Pod object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
