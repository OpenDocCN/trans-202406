- en: Chapter 9\. Labels and Annotations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章\. 标签和注释
- en: The exam curriculum doesn’t explicitly mention the concept of labels; however,
    it’s an important one for understanding how certain Kubernetes primitives function
    internally. To avoid confusing labels with annotations, we’ll also discuss the
    commonalities and differences among those concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 考试课程大纲并未明确提到标签的概念；但是，它对于理解某些 Kubernetes 原语在内部如何运行至关重要。为了避免将标签与注释混淆，我们还将讨论这些概念之间的共同点和区别。
- en: Labels are an essential tool for querying, filtering, and sorting Kubernetes
    objects. Annotations represent descriptive metadata for Kubernetes objects but
    can’t be used for queries. In this chapter, you will learn how to assign and use
    both concepts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是查询、过滤和排序 Kubernetes 对象的重要工具。注释代表 Kubernetes 对象的描述性元数据，但不能用于查询。在本章中，您将学习如何分配和使用这两个概念。
- en: Working with Labels
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理标签
- en: Kubernetes lets you assign key-value pairs to objects so that you can use them
    later within a search query. Those key-value pairs are called *labels*. To draw
    an analogy, you can think of labels as tags for a blog post.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 允许您为对象分配键值对，以便稍后在搜索查询中使用它们。这些键值对称为*标签*。为了类比，您可以将标签视为博客文章的标签。
- en: A label describes a Kubernetes object in distinct terms (e.g., a category like
    “frontend” or “backend”), but it is not meant for elaborate, multi-word descriptions
    of its functionality. As part of the specification, Kubernetes limits the length
    of a label to a maximum of 63 characters and a range of allowed alphanumeric and
    separator characters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标签以不同的术语描述 Kubernetes 对象（例如“frontend”或“backend”类别），但并不意味着它们用于功能的详细、多词描述。作为规范的一部分，Kubernetes
    将标签的长度限制为最多 63 个字符，并允许使用字母数字字符和分隔符字符的范围。
- en: '[Figure 9-1](#pod_labels) shows the Pods named `frontend`, `backend`, and `database`.
    Each of the Pods declares a unique set of labels.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-1](#pod_labels)显示了名为`frontend`、`backend`和`database`的 Pod。每个 Pod 声明了一组独特的标签。'
- en: '![ckd2 0901](Images/ckd2_0901.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0901](Images/ckd2_0901.png)'
- en: Figure 9-1\. Pods with labels
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. 带有标签的 Pod
- en: It’s common practice to assign one or many labels to an object at creation time;
    however, you can modify them as needed for a live object. When you see labels
    for the first time, they might seem insignificant—but their importance cannot
    be overstated. They’re essential for understanding the runtime behavior of more
    advanced Kubernetes objects like a Deployment and a Service. Later in this chapter,
    we’ll see the significance of labels in practice when learning about Deployments
    in more detail.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建对象时，通常会分配一个或多个标签；但是，您可以根据需要修改活动对象的标签。当您第一次看到标签时，它们可能看似微不足道，但它们的重要性不可忽视。它们对于理解像部署和服务这样的更高级
    Kubernetes 对象的运行时行为至关重要。在本章的后面，我们将详细了解标签在实践中的重要性，特别是在学习部署更多细节时。
- en: Declaring Labels
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明标签
- en: 'You can declare labels imperatively with the `run` command or declaratively
    in the `metadata.labels` section in the YAML manifest. The command-line option
    `--labels` (or `-l` in its short form) defines a comma-separated list of labels
    when creating a Pod. The following command creates a new Pod with two labels from
    the command line:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`run`命令或在 YAML 清单的`metadata.labels`部分声明性地声明标签。在创建 Pod 时，命令行选项`--labels`（或其简写形式`-l`）在命令行上定义了一个逗号分隔的标签列表。以下命令在命令行上创建一个带有两个标签的新
    Pod：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Assigning labels to Kubernetes objects by editing the manifest requires a change
    to the `metadata` section. [Example 9-1](#pod_metadata_labels) shows the Pod definition
    from the previous command if we were to start with the YAML manifest.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编辑清单将标签分配给 Kubernetes 对象需要更改`metadata`部分。如果我们从 YAML 清单开始，[示例 9-1](#pod_metadata_labels)显示了上一个命令的
    Pod 定义。
- en: Example 9-1\. A Pod defining two labels
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-1\. 定义了两个标签的 Pod
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Inspecting Labels
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查标签
- en: 'You can inspect the labels assigned to a Kubernetes object from different angles.
    Here, we’ll want to look at the most common ways to identify the labels of a Pod.
    As with any other runtime information, you can use the `describe` or `get` commands
    to retrieve the labels:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从不同角度检查分配给 Kubernetes 对象的标签。在这里，我们将讨论查看 Pod 标签的最常见方法。与任何其他运行时信息一样，您可以使用`describe`或`get`命令检索标签：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you want to list the labels for all object types or a specific object type,
    use the `--show-labels` command-line option. This option is convenient if you
    need to sift through a longer list of objects. The output automatically adds a
    new column named `LABELS`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Modifying Labels for a Live Object
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add or remove a label from an existing Kubernetes object, or simply
    modify an existing label at any time. One way to achieve this is by editing the
    live object and changing the label definition in the `metadata.labels` section.
    The other option, which offers a slightly faster turnaround, is the `label` command.
    The following commands add a new label, change the value of the label, and then
    remove the label with the minus character:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using Label Selectors
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Labels become meaningful only when combined with the selection feature. A label
    selector uses a set of criteria to query for Kubernetes objects. For example,
    you could use a label selector to express “select all Pods with the label assignment
    `env=dev`, `tier=frontend`, and have a label with the key `version` independent
    of the assigned value,” as shown in [Figure 9-2](#label_selection).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0902](Images/ckd2_0902.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. Selecting Pods by label criteria
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Kubernetes offers two ways to select objects by labels: from the command line
    and within a manifest. Let’s talk about both options.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Label selection from the command line
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the command line, you can select objects by label using the `--selector`
    option (`-l` in its short-form notation). You can express a filter by providing
    an equality-based requirement or a set-based requirement. Both requirement types
    can be combined in a single query.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: An *equality-based requirement* can use the operators `=`, `==`, or `!=`. You
    can separate multiple filter terms with a comma and then combine them with a boolean
    `AND`. At this time, equality-based label selection cannot express a boolean `OR`
    operation. A typical expression could say, “select all Pods with the label assignment
    `env=prod`.”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: A *set-based requirement* can filter objects based on a set of values using
    the operators `in`, `notin`, and `exists`. The `in` and `notin` operators work
    based on a boolean `OR`. A typical expression could say, “select all Pods with
    the label key `env` and the value `prod` or `dev`.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the functionality, we’ll start by setting up three different
    Pods with labels. All `kubectl` commands use the command-line option `--show-labels`
    to compare the results with our expectations. The `--show-labels` option is not
    needed for label selection:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We’ll start by filtering the Pods with an equality-based requirement. Here,
    we are looking for all Pods with the label assignment `env=prod`. The result returns
    all three Pods:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next filter operation uses a set-based requirement. We are asking for all
    Pods that have the label key `team` with the values `storage` or `shiny`. The
    result returns only the Pods named `backend` and `frontend`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we’ll combine an equality-based requirement with a set-based requirement.
    The result returns only the `backend` Pod:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将结合基于相等性的需求与基于集合的需求。结果仅返回`backend` Pod：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Label selection in a manifest
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在清单中进行标签选择
- en: Some advanced Kubernetes objects such as Deployments, Services, or network policies
    act as configuration proxies for Pods. They usually select a set of Pods by labels
    and then provide added value. For example, a network policy controls network traffic
    from and to a set of Pods. Only the Pods with matching labels will apply the network
    rules. [Example 9-2](#network_policy_pod_label_selection) applies the network
    policy to Pods with the equality-based requirement `tier=frontend`. For more details
    on network policies, see [Chapter 23](ch23.xhtml#network_policies).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一些高级 Kubernetes 对象（例如 Deployments、Services 或网络策略）充当 Pod 的配置代理。它们通常通过标签选择一组 Pod，并提供附加值。例如，网络策略控制与一组
    Pod 之间和之间的网络流量。仅具有匹配标签的 Pod 将应用网络规则。[示例 9-2](#network_policy_pod_label_selection)将网络策略应用于具有基于相等性的需求`tier=frontend`的
    Pod。有关网络策略的更多详细信息，请参阅[第 23 章](ch23.xhtml#network_policies)。
- en: Example 9-2\. Label selection as part of the network policy API
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-2\. 作为网络策略 API 的一部分的标签选择
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The way you define label selection in a manifest is based on the API version
    of the Kubernetes resources and may differ between types. The content that follows
    in later chapters will use label selection heavily.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单中定义标签选择的方式基于 Kubernetes 资源的 API 版本，不同类型可能有所不同。后续章节中的内容将大量使用标签选择。
- en: Recommended Labels
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐的标签
- en: As you continue working with labels, you will likely find common key-value pairs
    you want to assign to objects. Many of those labels evolve around metadata for
    an application, for example, the name of the component you are deploying with
    a Pod, or its version.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续使用标签时，您可能会发现希望为对象分配的常见键值对。其中许多标签围绕应用程序的元数据，例如，您正在部署的 Pod 的组件名称或其版本。
- en: Kubernetes proposes a list of [recommended labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/),
    all of which start with the key prefix `app.kubernetes.io`. [Example 9-3](#recommended_labels_pod)
    shows the assignment of version and component labels in a Pod definition.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提议一组[推荐标签](https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/)，所有这些标签都以键前缀`app.kubernetes.io`开头。[示例
    9-3](#recommended_labels_pod)显示了在 Pod 定义中分配版本和组件标签。
- en: Example 9-3\. A Pod using recommended labels
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-3\. 使用推荐标签的 Pod
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Familiarize yourself with these recommended labels so you can use them across
    all objects you are managing. This provides the benefit of enabling tooling in
    the Kubernetes ecosystem to use the same terminology and enabling developers to
    use the same “language” when referring to application meta information.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉这些推荐标签，以便您可以在管理的所有对象中使用它们。这样做的好处是使得 Kubernetes 生态系统中的工具能够使用相同的术语，并使开发人员在引用应用程序元信息时使用相同的“语言”。
- en: Working with Annotations
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用注解
- en: Annotations are declared similarly to labels, but they serve a different purpose.
    They represent key-value pairs for providing descriptive metadata. The most important
    differentiator is that annotations cannot be used for querying or selecting objects.
    Typical examples of annotations may include SCM commit hash IDs, release information,
    or contact details for teams operating the object. Make sure to put the value
    of an annotation into single quotes or double quotes if it contains special characters
    or spaces. [Figure 9-3](#pod_annotations) illustrates a Pod with three annotations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注解的声明方式与标签类似，但它们有不同的用途。它们代表提供描述性元数据的键值对。最重要的区别是注解不能用于查询或选择对象。注解的典型示例可能包括 SCM
    提交哈希 ID、发布信息或操作对象的团队的联系方式。如果注解的值包含特殊字符或空格，请确保将其放入单引号或双引号中。[图 9-3](#pod_annotations)说明了一个具有三个注解的
    Pod。
- en: '![ckd2 0903](Images/ckd2_0903.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0903](Images/ckd2_0903.png)'
- en: Figure 9-3\. Pod with annotations
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. 带有注解的 Pod
- en: Kubernetes defines a list of reserved annotations that it will evaluate at runtime
    to control the runtime behavior of the object. You can find more information at
    [“Reserved Annotations”](#reserved_annotation).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 定义了一组保留的注解，在运行时将评估这些注解以控制对象的运行时行为。您可以在[“保留注解”](#reserved_annotation)找到更多信息。
- en: Declaring Annotations
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明注解
- en: The `kubectl run` command does not provide a command-line option for defining
    annotations that’s similar to the one for labels. You will have to start by writing
    a YAML manifest and adding the desired annotations under `metadata.annotations`,
    as shown in [Example 9-4](#pod_metadata_annotations).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl run` 命令没有像标签那样用于定义注释的命令行选项。您需要从头开始编写 YAML 清单，并在 `metadata.annotations`
    下添加所需的注释，如[示例 9-4](#pod_metadata_annotations)所示。'
- en: Example 9-4\. A Pod defining three annotations
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-4\. 定义三个注释的Pod
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Inspecting Annotations
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查注释
- en: 'Similar to labels, you can use the `describe` or `get` commands to retrieve
    the assigned annotations:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于标签，您可以使用 `describe` 或 `get` 命令来检索分配的注释：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Modifying Annotations for a Live Object
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改活动对象的注释
- en: 'The `annotate` command is the counterpart of the `labels` command but used
    for annotations. As you can see in the following examples, the usage pattern is
    the same:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`annotate` 命令是 `labels` 命令的对应物，但用于注释。正如下面的示例所示，使用模式相同：'
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Reserved Annotations
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保留注释
- en: 'Kubernetes itself and extensions to Kubernetes use the concept of annotations
    to configure runtime behavior for an object. For example, you can assign the reserved
    annotation `pod-security.kubernetes.io/enforce: "baseline"` to a namespace object
    to enforce [security standards](https://kubernetes.io/docs/concepts/security/pod-security-standards/)
    for all Pods that live in the namespace. [Example 9-5](#reserved_annotation_namespace)
    shows a namespace definition that assigns the annotation.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'Kubernetes本身及其Kubernetes的扩展使用注释的概念来配置对象的运行时行为。例如，您可以将保留注释 `pod-security.kubernetes.io/enforce:
    "baseline"` 分配给命名空间对象以强制执行[安全标准](https://kubernetes.io/docs/concepts/security/pod-security-standards/)，该命名空间中所有Pod均适用。[示例 9-5](#reserved_annotation_namespace)展示了分配该注释的命名空间定义。'
- en: Example 9-5\. A Pod using a reserved annotation
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-5\. 使用保留注释的Pod
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See the [Kubernetes documentation](https://kubernetes.io/docs/reference/labels-annotations-taints/)
    for a full list of reserved annotations in Kubernetes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[Kubernetes文档](https://kubernetes.io/docs/reference/labels-annotations-taints/)，了解Kubernetes中保留的注释的完整列表。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Labels are a central concept for controlling the runtime behavior of more advanced
    Kubernetes objects. For example, in the context of a Deployment, Kubernetes requires
    you to use label selection to *select* the Pods the Deployment manages. You can
    use labels to select objects based on a query from the command line or within
    a manifest if supported by the primitive’s API. Kubernetes suggests label keys
    for commonly used application metadata.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是控制更高级Kubernetes对象运行时行为的核心概念。例如，在Deployment的上下文中，Kubernetes要求您使用标签选择来*选择*Deployment管理的Pod。您可以使用标签来基于命令行查询或者在支持原语API的清单中选择对象。Kubernetes建议为常用应用程序元数据使用标签键。
- en: Annotations serve a different purpose; they provide human-readable, informative
    metadata. You cannot use annotations for querying objects. Kubernetes introduced
    reserved annotations as a means of flagging objects for special runtime treatment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注释具有不同的目的；它们提供人类可读的信息性元数据。您不能使用注释来查询对象。Kubernetes引入了保留注释作为一种标记对象以进行特殊运行时处理的方法。
- en: Exam Essentials
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Practice labels declaration and selection
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 练习标签声明和选择
- en: Labels are an extremely important concept in Kubernetes, as many other primitives
    work with label selection. Practice how to declare labels for different objects,
    and use the `-l` command-line option to query for them based on equality-based
    and set-based requirements. Label selection in a YAML manifest might look slightly
    different depending on the API version of the spec. Extensively practice label
    selection for primitives that use them heavily.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 标签在Kubernetes中是一个极其重要的概念，因为许多其他原语都使用标签选择。练习如何为不同对象声明标签，并使用 `-l` 命令行选项基于基于相等性和集合的要求查询它们。在YAML清单中，基于API规范的标签选择可能会稍有不同。广泛练习使用对标签选择的原语。
- en: Understand the difference between labels and annotations
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 理解标签和注释之间的区别。
- en: All you need to know about annotations is their declaration from the command
    line and in a YAML manifest. Be aware that annotations are meant only for assigning
    metadata to objects and they cannot be queried for.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于注释，您只需了解如何从命令行和YAML清单中声明它们。请注意，注释仅用于为对象分配元数据，并且无法进行查询。
- en: Sample Exercises
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_005.xhtml#appendix_a_labels_annotations).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可以在[附录 A](app01_split_005.xhtml#appendix_a_labels_annotations)中找到。
- en: Create three Pods that use the image `nginx:1.25.1`. The names of the Pods should
    be `pod-1`, `pod-2`, and `pod-3`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个使用镜像`nginx:1.25.1`的Pod。Pod的名称应为`pod-1`、`pod-2`和`pod-3`。
- en: Assign the label `tier=frontend` to `pod-1` and the label `tier=backend` to
    `pod-2` and `pod-3`. All pods should also assign the label `team=artemidis`.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将标签`tier=frontend`分配给`pod-1`，将标签`tier=backend`分配给`pod-2`和`pod-3`。所有Pod还应分配标签`team=artemidis`。
- en: Assign the annotation with the key `deployer` to `pod-1` and `pod-3`. Use your
    own name as the value.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将键为`deployer`的注释分配给`pod-1`和`pod-3`。将你自己的名字用作值。
- en: From the command line, use label selection to find all Pods with the team `artemidis`
    or `aircontrol` and that are considered a backend service.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从命令行使用标签选择来查找所有属于团队`artemidis`或`aircontrol`的后端服务的Pod。
- en: 'Create a Pod with the image `nginx:1.25.1` that assigns two recommended labels:
    one for defining the application name with the value `F5-nginx`, and one for defining
    the tool used to manage the application named `helm`.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个使用镜像`nginx:1.25.1`的Pod，并分配两个推荐的标签：一个用于定义应用程序名称，其值为`F5-nginx`，另一个用于定义用于管理名为`helm`的应用程序的工具。
- en: Render the assigned labels of the Pod object.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染Pod对象的分配标签。
