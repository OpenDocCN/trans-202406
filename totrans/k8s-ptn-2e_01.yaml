- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'With the mainstream adoption of microservices and containers in recent years,
    the way we design, develop, and run software has changed radically. Today’s applications
    are optimized for availability, scalability, and speed-to-market. Driven by these
    new requirements, today’s modern applications require a different set of patterns
    and practices. This book aims to help developers discover and learn about the
    most common patterns for creating cloud native applications with Kubernetes. First,
    let’s take a brief look at the two primary ingredients of this book: Kubernetes
    and design patterns.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，微服务和容器的主流采用彻底改变了软件设计、开发和运行的方式。今天的应用程序优化了可用性、可扩展性和上市速度。在新需求的推动下，现代应用程序需要一组不同的模式和实践。本书旨在帮助开发人员探索和学习使用
    Kubernetes 创建云原生应用程序的最常见模式。首先，让我们简要了解本书的两个主要组成部分：Kubernetes 和设计模式。
- en: Kubernetes
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes
- en: '*Kubernetes* is a container orchestration platform. The origin of Kubernetes
    lies somewhere in the Google data centers where Google’s internal container orchestration
    platform, [Borg](https://oreil.ly/x12HH), was born. Google used Borg for many
    years to run its applications. In 2014, Google decided to transfer its experience
    with Borg into a new open source project called “Kubernetes” (Greek for “helmsman”
    or “pilot”). In 2015, it became the first project donated to the newly founded
    Cloud Native Computing Foundation (CNCF).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kubernetes* 是一个容器编排平台。Kubernetes 的起源可以追溯到谷歌数据中心，谷歌的内部容器编排平台 [Borg](https://oreil.ly/x12HH)。'
- en: From the start, Kubernetes gained a whole community of users, and the number
    of contributors grew incredibly fast. Today, Kubernetes is considered one of the
    most popular projects on GitHub. It is fair to claim that Kubernetes is the most
    commonly used and feature-rich container orchestration platform. Kubernetes also
    forms the foundation of other platforms built on top of it. The most prominent
    of those Platform-as-a-Service systems is Red Hat OpenShift, which provides various
    additional capabilities to Kubernetes. These are only some reasons we chose Kubernetes
    as the reference platform for the cloud native patterns in this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 从一开始就吸引了大量用户社区，并且贡献者数量增长迅速。今天，Kubernetes 被认为是 GitHub 上最受欢迎的项目之一。可以说，Kubernetes
    是最常用和功能最丰富的容器编排平台。Kubernetes 也构成了其他基于它构建的平台的基础。其中最著名的 Platform-as-a-Service 系统之一是
    Red Hat OpenShift，为 Kubernetes 提供各种附加功能。这些只是我们选择 Kubernetes 作为本书云原生模式参考平台的一些原因。
- en: This book assumes you have some basic knowledge of Kubernetes. In [Chapter 1](ch01.html#kubernetes-core-concepts),
    we recapitulate the core Kubernetes concepts and lay the foundation for the following
    patterns.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书假设你已经掌握了一些 Kubernetes 的基础知识。在[第一章](ch01.html#kubernetes-core-concepts)，我们回顾了核心
    Kubernetes 概念，并为后续的模式奠定了基础。
- en: Design Patterns
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式
- en: The concept of *design patterns* dates back to the 1970s and is from the field
    of architecture. Christopher Alexander, an architect and system theorist, and
    his team published the groundbreaking [*A Pattern Language*](https://oreil.ly/TKzwz)
    (Oxford University Press) in 1977, which describes architectural patterns for
    creating towns, buildings, and other construction projects. Sometime later, this
    idea was adopted by the newly formed software industry. The most famous book in
    this area is [*Design Patterns—Elements of Reusable Object-Oriented Software*](https://oreil.ly/k5toF)
    by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides—the Gang of Four
    (Addison-Wesley). When we talk about the famous Singleton, Factories, or Delegation
    patterns, it’s because of this defining work. Many other great pattern books have
    been written since then for various fields with different levels of granularity,
    like *[Enterprise Integration Patterns](https://oreil.ly/5aRjR)* by Gregor Hohpe
    and Bobby Woolf (Addison-Wesley) or [*Patterns of Enterprise Application Architecture*](https://oreil.ly/yOdWA)
    by Martin Fowler (Addison-Wesley).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In short, a *pattern* describes a *repeatable solution to a problem*.^([1](preface01.html#idm45902099359264))
    This definition works for the patterns we describe in this book, except that we
    probably don’t have as much variability in our solutions. A pattern is different
    from a recipe because instead of giving step-by-step instructions to solve a problem,
    it provides a blueprint for solving a whole class of similar problems. For example,
    the Alexandrian pattern *Beer Hall* describes how public drinking halls should
    be constructed where “strangers and friends are drinking companions” and not “anchors
    of the lonely.” All halls built after this pattern look different but share common
    characteristics, such as open alcoves for groups of four to eight and a place
    where a hundred people can meet to enjoy beverages, music, and other activities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: However, a pattern does more than provide a solution. It is also about forming
    a language. The patterns in this book form a dense, noun-centric language in which
    each pattern carries a unique *name*. When this language is established, these
    names automatically evoke similar mental representations when people speak about
    these patterns. For example, when we talk about a table, anyone speaking English
    assumes we are talking about a piece of wood with four legs and a top on which
    you can put things. The same thing happens in software engineering when discussing
    a “factory.” In an object-oriented programming language context, we immediately
    associate with a “factory” an object that produces other objects. Because we immediately
    know the solution behind the pattern, we can move on to tackle yet-unsolved problems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: There are also other characteristics of a pattern language. For example, patterns
    are interconnected and can overlap so that they cover most of the problem space.
    Also, as already laid out in the original *A Pattern Language*, patterns have
    a different level of granularity and scope. More general patterns cover an extensive
    problem space and provide rough guidance on how to solve the problem. Granular
    patterns have a very concrete solution proposal but are less widely applicable.
    This book contains all sorts of patterns, and many patterns reference other patterns
    or may even include other patterns as part of the solution.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of patterns is that they follow a rigid format. However, each
    author defines a different form; unfortunately, there is no common standard for
    how patterns should be laid out. Martin Fowler gives an excellent overview of
    the formats used for pattern languages at [“Writing Software Patterns”](https://oreil.ly/6IA6k).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: How This Book Is Structured
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We chose a simple pattern format for this book. We do not follow any particular
    pattern description language. For each pattern, we use the following structure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Name
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Each pattern carries a name, which is also the chapter’s title. The name is
    the center of the pattern’s language.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: This section gives the broader context and describes the pattern space in detail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: This section shows how the pattern solves the problem in a Kubernetes-specific
    way. This section also contains cross-references to other patterns that are either
    related or part of the given pattern.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: This section includes a discussion about the advantages and disadvantages of
    the solution for the given context.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: This final section contains additional information sources related to the pattern.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'We organized the patterns in this book as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[Part I, “Foundational Patterns”](part01.html#part_foundational), covers the
    core concepts of Kubernetes. These are the underlying principles and practices
    for building container-based cloud native applications.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part II, “Behavioral Patterns”](part02.html#part_behavioral), describes patterns
    that build on top of foundational patterns and add the runtime aspect concepts
    of managing various types of containers.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part III, “Structural Patterns”](part03.html#part_structural), contains patterns
    related to organizing containers within a *Pod*, which is the atom of the Kubernetes
    platform.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part IV, “Configuration Patterns”](part04.html#part_configuration), gives
    insight into the various ways application configuration can be handled in Kubernetes.
    These are granular patterns, including concrete recipes for connecting applications
    to their configuration.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part V, “Security Patterns”](part05.html#part_security), addresses various
    security concerns that arise when an application is containerized and deployed
    on Kubernetes.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part VI, “Advanced Patterns”](part06.html#part_advanced), is a collection
    of advanced concepts, such as how the platform itself can be extended or how to
    build container images directly within the cluster.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the context, the same pattern might fit into several categories.
    Every pattern chapter is self-contained; you can read chapters in isolation and
    in any order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for *developers* who want to design and develop cloud native applications
    and use Kubernetes as the platform. It is most suitable for readers who have some
    basic familiarity with containers and Kubernetes concepts and want to take it
    to the next level. However, you don’t need to know the low-level details of Kubernetes
    to understand the use cases and patterns. Architects, consultants, and other technical
    personnel will also benefit from the repeatable patterns described here.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The book is based on use cases and lessons learned from real-world projects.
    It is an accumulation of best practices and patterns after years of working in
    this space. We want to help you understand the Kubernetes-first mindset and create
    better cloud native applications—not reinvent the wheel. It is written in a relaxed
    style and is similar to a series of essays that can be read independently.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s briefly look at what this book is *not*:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: This book is not an introduction to Kubernetes, nor is it a reference manual.
    We touch on many Kubernetes features and explain them in some detail, but we are
    focusing on the concepts behind those features. [Chapter 1, “Introduction”](ch01.html#kubernetes-core-concepts),
    offers a brief refresher on Kubernetes basics. If you are looking for a comprehensive
    book on Kubernetes, we highly recommend *Kubernetes in Action* by Marko Lukša
    (Manning Publications).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This book is not a step-by-step guide on how to set up a Kubernetes cluster
    itself. Every example assumes you have Kubernetes up and running. You have several
    options for trying out the examples. If you are interested in learning how to
    set up a Kubernetes cluster, we recommend [*Kubernetes: Up and Running*](https://learning.oreilly.com/library/view/kubernetes-up-and/9781098110192)
    by Brendan Burns, Joe Beda, Kelsey Hightower, and Lachlan Evenson (O’Reilly).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book is not about operating and governing a Kubernetes cluster for other
    teams. We deliberately skipped administrative and operational aspects of Kubernetes
    and took a developer-first view into Kubernetes. This book can help operations
    teams understand how a developer uses Kubernetes, but it is not sufficient for
    administering and automating a Kubernetes cluster. If you are interested in learning
    how to operate a Kubernetes cluster, we recommend [*Kubernetes Best Practices*](https://learning.oreilly.com/library/view/kubernetes-best-practices/9781492056461/)
    by Brendan Burns, Eddie Villalba, Dave Strebel, and Lachlan Evenson (O’Reilly).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What You Will Learn
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s a lot to discover in this book. Some patterns may read like excerpts
    from a Kubernetes manual at first glance, but upon closer look, you’ll see the
    patterns are presented from a conceptual angle not found in other books on the
    topic. Other patterns are explained with detailed steps to solve a concrete problem,
    as in [Part IV, “Configuration Patterns”](part04.html#part_configuration). In
    some chapters, we explain Kubernetes features that don’t fit nicely into a pattern
    definition. Don’t get hung up on whether it is a pattern or a feature. In all
    chapters, we look at the forces involved from the first principles and focus on
    the use cases, lessons learned, and best practices. That is the valuable part.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the pattern granularity, you will learn everything Kubernetes
    offers for each particular pattern, with plenty of examples to illustrate the
    concepts. All these examples have been tested, and we tell you how to get the
    complete source code in [“Using Code Examples”](#preface-code-examples).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: What’s New in the Second Edition
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kubernetes ecosystem has continued to grow since the first edition came
    out four years ago. As a result, there have been many Kubernetes releases, and
    more tools and patterns for using Kubernetes have become de facto standards.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, most of the patterns described in our book have stood the test
    of time and remain valid. Therefore, we have updated these patterns, added new
    features up to Kubernetes 1.26, and removed obsolete and deprecated parts. For
    the most part, only minor changes were necessary, except for [Chapter 29, “Elastic
    Scale”](ch29.html#ElasticScale), and [Chapter 30, “Image Builder”](ch30.html#ImageBuilder),
    which underwent significant changes due to new developments in these areas.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we have included five new patterns and introduced a new category,
    [Part V, “Security Patterns”](part05.html#part_security), which addresses a gap
    in the first edition and provides important security-related patterns for developers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Our GitHub [examples](https://oreil.ly/kXGjC) have been updated and extended.
    And, lastly, we added 50% more content for our readers to enjoy.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, patterns form a simple, interconnected language. To emphasize
    this web of patterns, each pattern is capitalized and set in italics, (e.g., *Sidecar*).
    When a pattern name is also a Kubernetes core concept (such as *Init Container*
    or *Controller*), we use this specific formatting only when we directly reference
    the pattern itself. Where it makes sense, we also interlink pattern chapters for
    ease of navigation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'We also use the following conventions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Everything you can type in a shell or editor is rendered in `constant width
    font`.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes resource names are always rendered in uppercase (e.g., Pod). If the
    resource is a combined name like ConfigMap, we keep it like this in favor of the
    more natural “config map” for clarity and to make it clear that it refers to a
    Kubernetes concept.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, a Kubernetes resource name is identical to a common concept like
    “service” or “node.” In these cases, we use the resource name format only when
    referring to the resource itself.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every pattern is backed with fully executable examples, which you can find on
    the accompanying [web page](https://k8spatterns.io). You can find the link to
    each pattern’s example in each chapter’s “More Information” section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: The “More Information” section also contains links to further information related
    to the pattern. We keep these lists updated in the example repository.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The source code for all examples in this book is available on [GitHub](https://oreil.ly/bmj-Y).
    The repository and the website also have pointers and instructions on how to get
    a Kubernetes cluster to try out the examples. Please look at the provided resource
    files when you go through the examples. They contain many valuable comments that
    will further your understanding of the example code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Many examples use a REST service called *random-generator* that returns random
    numbers when called. It is uniquely crafted to play well with the examples in
    this book. Its source can be found on [GitHub](https://oreil.ly/WuYSu) as well,
    and its container image `k8spatterns/random-generator` is hosted on [Docker Hub](https://oreil.ly/N36MB).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: We use a JSON path notation to describe resource fields (e.g., `.spec.replicas`
    points to the `replicas` field of the resource’s `spec` section).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: If you find an issue in the example code or documentation or have a question,
    don’t hesitate to open a ticket at the [GitHub issue tracker](https://oreil.ly/hCnmn).
    We monitor these GitHub issues and are happy to answer any questions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: All example code is distributed under the [Creative Commons Attribution 4.0
    (CC BY 4.0)](https://oreil.ly/QuiQc) license. The code is free to use, and you
    can share and adapt it for commercial and noncommercial projects. However, you
    should give attribution back to this book if you copy or redistribute the example
    code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: This attribution can be a reference to the book, including title, author, publisher,
    and ISBN, as in “*Kubernetes Patterns*, 2nd Edition, by Bilgin Ibryam and Roland
    Huß (O’Reilly). Copyright 2023 Bilgin Ibryam and Roland Huß, 978-1-098-13168-5.”
    Alternatively, add a link to the [accompanying website](https://k8spatterns.io)
    along with a copyright notice and link to the license.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: We love code contributions too! If you think we can improve our examples, we
    are happy to hear from you. Just open a GitHub issue or create a pull request,
    and let’s start a conversation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For almost 40 years, [*O’Reilly Media*](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book where we list errata, examples, and additional
    information. You can access this page at [*https://oreil.ly/kubernetes_patterns-2e*](https://oreil.ly/kubernetes_patterns-2e).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the authors on Twitter: [*https://twitter.com/bibryam*](https://twitter.com/bibryam),
    [*https://twitter.com/ro14nd*](https://twitter.com/ro14nd)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the authors on Mastodon: [*https://fosstodon.org/@bilgin*](https://fosstodon.org/@bilgin),
    [*https://hachyderm.io/@ro14nd*](https://hachyderm.io/@ro14nd)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the authors on GitHub: [*https://github.com/bibryam*](https://github.com/bibryam),
    [*https://github.com/rhuss*](https://github.com/rhuss)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow their blogs: [*https://www.ofbizian.com*](https://www.ofbizian.com),
    [*https://ro14nd.de*](https://ro14nd.de)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bilgin is forever grateful to his wonderful wife, Ayshe, for her endless support
    and patience as he worked on yet another book. He is also thankful for his adorable
    daughters, Selin and Esin, who always know how to bring a smile to his face. You
    mean the world to him. Finally, Bilgin would like to thank his fantastic coauthor,
    Roland, for making this project a reality.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Roland is deeply grateful for his wife Tanja’s unwavering support and forbearance
    throughout the writing process, and he also thanks his son Jakob for his encouragement.
    Furthermore, Roland wishes to extend special recognition to Bilgin for his exceptional
    insights and writing, without which the book would not have come to fruition.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Roland深深感谢妻子Tanja在写作过程中始终如一的支持和包容，他还感谢儿子Jakob的鼓励。此外，Roland希望特别感谢Bilgin，因为他出色的见解和写作让这本书得以完成。
- en: Creating two editions of this book was a long multiyear journey, and we want
    to thank our reviewers who kept us on the right track.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这本书的两个版本是一段漫长的多年旅程，我们要感谢那些在这条正确道路上一直陪伴我们的审阅者。
- en: For the first edition, special kudos to Paolo Antinori and Andrea Tarocchi for
    helping us through the journey. Big thanks to Marko Lukša, Brandon Philips, Michael
    Hüttermann, Brian Gracely, Andrew Block, Jiri Kremser, Tobias Schneck, and Rick
    Wagner, who supported us with their expertise and advice. Last but not least,
    big thanks to our editors Virginia Wilson, John Devins, Katherine Tozer, Christina
    Edwards, and all the awesome folks at O’Reilly for helping us push this book over
    the finish line.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一版，特别感谢Paolo Antinori和Andrea Tarocchi在整个旅程中对我们的帮助。非常感谢Marko Lukša、Brandon
    Philips、Michael Hüttermann、Brian Gracely、Andrew Block、Jiri Kremser、Tobias Schneck和Rick
    Wagner，他们用他们的专业知识和建议支持了我们。最后但同样重要的是，要感谢我们的编辑Virginia Wilson、John Devins、Katherine
    Tozer、Christina Edwards以及O’Reilly的所有出色人士，他们帮助我们把这本书完成到最后。
- en: Completing the second edition was no easy feat, and we are grateful to all who
    supported us in finishing it. We extend our thanks to our technical reviewers,
    Ali Ok, Dávid Šimanský, Zbyněk Roubalík, Erkan Yanar, Christoph Stäbler, Andrew
    Block, and Adam Kaplan, as well as to our development editor, Rita Fernando, for
    her patience and encouragement throughout the whole process. Many kudos go out
    to the O’Reilly production team, especially Beth Kelly, Kim Sandoval, and Judith
    McConville, for their meticulous attention in finalizing the book.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 完成第二版绝非易事，我们感谢所有在完成中支持我们的人。我们要特别感谢我们的技术审阅者Ali Ok、Dávid Šimanský、Zbyněk Roubalík、Erkan
    Yanar、Christoph Stäbler、Andrew Block和Adam Kaplan，以及我们的开发编辑Rita Fernando，在整个过程中她们的耐心和鼓励。我们还要向O’Reilly的生产团队表示赞赏，特别是Beth
    Kelly、Kim Sandoval和Judith McConville，在完成书稿时他们的细致关注。
- en: We want to express a special thank you to Abhishek Koserwal for his tireless
    and dedicated efforts in [Chapter 26, “Access Control”](ch26.html#AccessControl).
    His contributions came at a time when we needed them the most and made an impact.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要特别感谢Abhishek Koserwal在《第26章，“访问控制”》（ch26.html#AccessControl）中不懈而专注的努力。他的贡献正是我们最需要的时候，并产生了深远影响。
- en: '^([1](preface01.html#idm45902099359264-marker)) Alexander and his team defined
    the original meaning in the context of architecture as follows: “Each pattern
    describes a problem which occurs over and over again in our environment, and then
    describes the core of the solution to that problem, in such a way that you can
    use this solution a million times over, without ever doing it the same way twice.”
    (*A Pattern Language*, Christopher Alexander et al., 1977.)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](preface01.html#idm45902099359264-marker)) Alexander和他的团队在建筑学的原始含义中定义如下：“每个模式描述了在我们的环境中反复出现的问题，然后描述了解决该问题的核心方法，使得您可以无数次地使用这个解决方案，而不必完全相同地再做一次。”（*A
    Pattern Language*，Christopher Alexander等人，1977年。）
