- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only way you can read this sentence is by opening this book, either physically
    or digitally. This tells me you are interested in TypeScript, one of the most
    popular programming languages in recent years. According to the [2022 State of
    JavaScript survey](https://2022.stateofjs.com), almost 70% of all participants
    actively use TypeScript. The [2022 StackOverflow survey](https://survey.stackoverflow.co/2022)
    lists TypeScript as one of the top five most popular languages and the fourth
    highest in user satisfaction. At the beginning of 2023, TypeScript counts [more
    than 40 million weekly downloads on NPM](https://oreil.ly/ZHWn8).
  prefs: []
  type: TYPE_NORMAL
- en: 'Without a doubt: TypeScript is a phenomenon!'
  prefs: []
  type: TYPE_NORMAL
- en: Despite its popularity, TypeScript still gives a lot of developers a hard time.
    *Fighting the type-checker* is one phrase you hear often; another one is *throwing
    a couple of `any`’s in there so it shuts up*. Some people feel slowed down, writing
    just to please the compiler when they know their code *has* to work. However,
    TypeScript’s sole purpose is to make JavaScript developers more productive and
    efficient. Does the tool ultimately fail to meet its goals, or do we as developers
    expect something different from the tool than it is designed to deliver?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is somewhere in the middle, and this is where *TypeScript Cookbook*
    comes in. In this book, you will find more than one hundred recipes that deal
    with everything from complex project setups to advanced typing techniques. You
    will learn about the intricacies and inner workings of the type system, as well
    as the trade-offs and exceptions it has to make to not interfere with its foundation:
    JavaScript. You also will learn methodologies, design patterns, and development
    techniques to create better and more robust TypeScript code. In the end, you will
    understand not only *how* to do something but also *why*.'
  prefs: []
  type: TYPE_NORMAL
- en: My goal is to give you a guide that takes you from novice to expert, as well
    as a quick reference you can use well after you’ve read the book. With TypeScript’s
    four releases per year, it’s impossible to list all the most up-to-date features
    in a single book. This is why we focus on long-lasting aspects of the programming
    language, to prepare you for all the changes to come. Welcome to the TypeScript
    cookbook.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book is for developers, engineers, and architects who know enough JavaScript
    to be dangerous and have gotten their feet wet in TypeScript. You understand the
    fundamental concepts of types and how to apply them, and you understand the immediate
    benefits of static types. You are at a point where things get interesting: you
    need a deeper knowledge of the type system, and you need to actively work with
    TypeScript not only to ensure a robust and scaleable application but also to guarantee
    collaboration between you and your colleagues.'
  prefs: []
  type: TYPE_NORMAL
- en: You want to learn about how something behaves in TypeScript, as well as understand
    the reasoning behind its behavior. This is what you get in *TypeScript Cookbook*.
    You will learn project setup, quirks, and behavior of the type system; complex
    types and their use cases; and working with frameworks and applying type development
    methodology. This book is designed to take you from novice to apprentice, and
    eventually to expert. If you need a guide to actively learn more of TypeScript’s
    sophisticated features, but also a reference you can rely on throughout your career,
    this book will do right by you.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A predominant goal of writing *TypeScript Cookbook* was to focus on solutions
    for everyday problems. TypeScript is a remarkable programming language, and the
    features of the type system are so powerful that we reach a point where people
    challenge themselves with advanced [TypeScript puzzles](https://tsch.js.org).
    While these brain teasers are entertaining, they often lack real-world context
    and thus are not part of this book.
  prefs: []
  type: TYPE_NORMAL
- en: I want to make sure that the content presented is something you will encounter
    in your day-to-day life as a TypeScript developer, with problems that stem from
    real-world situations and solutions that are holistic. I will teach you techniques
    and methodologies you can use in multiple scenarios, not just in a single recipe.
    Throughout the book you will find references to earlier recipes, showing you how
    a specific techique can be applied in a new context.
  prefs: []
  type: TYPE_NORMAL
- en: The examples are either ripped directly from the source code of real projects
    or stripped down to essentials to illustrate a concept without requiring too much
    domain knowledge. While some examples are very specific, you will also see a lot
    of `Person` objects that have the name “Stefan” (and you will be able to see me
    age throughout the book).
  prefs: []
  type: TYPE_NORMAL
- en: The book will focus almost exclusively on the features TypeScript adds on top
    of JavaScript; thus, to understand the example fully, you need to understand a
    reasonable amount of JavaScript. I don’t expect you to be a JavaScript guru but
    being able to read basic JavaScript code is a must. Since JavaScript and TypeScript
    have this strong relationship, some chapters in the book discuss JavaScript features
    and their behavior, but always through the lens of TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'A cookbook is designed to give you a quick solution to a problem: a recipe.
    In this book, every recipe ends with a *discussion*, giving you broader context
    and meaning for the solution. Depending on the style of the author, the focus
    of O’Reilly’s cookbooks lies either on the solution or on the discussion. *TypeScript
    Cookbook* is unmistakably a *discussion* book. In my almost 20-year career as
    a person who writes software, I’ve never encountered situations in which one solution
    fits all problems. That’s why I want to show you in detail how we came to our
    conclusions, their meaning, and the trade-offs. Ultimately, this book should be
    a guide for discussions like that. Why make an educated guess when you have proper
    arguments for your decisions?'
  prefs: []
  type: TYPE_NORMAL
- en: Organization of This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*TypeScript Cookbook* takes you through the language from start to finish.
    We start with project setup, talk about basic types and the inner workings of
    the type system, and ultimately go into advanced territory like conditional types
    and helper types. We continue with chapters that explore very specific features,
    like the duality of classes and support for React, and end with learnings on how
    to best approach type development.'
  prefs: []
  type: TYPE_NORMAL
- en: While there is a thread and buildup, each chapter and each recipe can be consumed
    on its own. Each lesson has been designed to point out the connection to previous
    (or next!) recipes in the book, but each chapter is ultimately self-contained.
    Feel free to consume it from start to finish, or use the “choose your own adventure”
    approach with its many references. Here is a brief overview of the content.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript wants to work with all flavors of JavaScript, and there are a lot
    of different flavors. In [Chapter 1, “Project Setup”](ch01.html#ch01) you will
    learn about configuration possibilities for different language runtimes, module
    systems, and target platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2, “Basic Types”](ch02.html#ch02) guides you through the type hierarchy,
    tells you the difference between `any` and `unknown`, teaches you which code contributes
    to which namespace, and answers the age-old question of whether to choose a type
    alias or an interface to describe your object types.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the longer chapters in the book is [Chapter 3, “The Type System”](ch03.html#ch03).
    Here you will learn everything about union and intersection types, how to define
    discriminated union types, how to use the *assert never* and *optional never*
    techniques, and how to narrow and widen types based on your use case. After this
    chapter, you will understand why TypeScript has type assertions and no type casts,
    why enums are generally frowned upon, and how you find the nominal bits in a structural
    type system.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript has a generic type system, which we will see in detail in [Chapter 4,
    “Generics”](ch04.html#ch04). Generics not only make your code more reusable but
    are also the entrance to the more advanced features of TypeScript. This chapter
    marks the point where you ascend from TypeScript basics to the more sophisticated
    areas of the type system, a fitting end to the first part.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5, “Conditional Types”](ch05.html#ch05) explains why the TypeScript
    type system is also its own metaprogramming language. With the possibility of
    choosing types based on certain conditions, people invented the most outstanding
    things, like a full-fledged SQL parser or a dictionary in the type system. We
    use conditional types as a tool to make a static type system more flexible for
    dynamic situations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 6, “String Template Literal Types”](ch06.html#ch06) you see how
    TypeScript integrates a string parser in the type system. Extracting names from
    format strings, defining a dynamic event system based on string input, and creating
    identifiers dynamically: nothing seems impossible!'
  prefs: []
  type: TYPE_NORMAL
- en: You get a little taste of *functional programming* in [Chapter 7, “Variadic
    Tuple Types”](ch07.html#ch07). The *tuple* has a special meaning in TypeScript
    and helps describe function parameters and object-like arrays, and it creates
    flexible helper functions.
  prefs: []
  type: TYPE_NORMAL
- en: Even more metaprogramming happens in [Chapter 8, “Helper Types”](ch08.html#ch08).
    TypeScript has a few built-in helper types that make it easier for you to derive
    types from other types. In this chapter, you learn not only how to use them but
    also how to create your own. This chapter also marks the next breakpoint in *TypeScript
    Cookbook* because at this point you have learned all the basic ingredients of
    the language and type system, which you then can apply in the next part.
  prefs: []
  type: TYPE_NORMAL
- en: After spending eight chapters understanding all the nitty-gritty of the type
    system, it’s time to integrate your knowledge with type definitions done by others
    in [Chapter 9, “The Standard Library and External Type Definitions”](ch09.html#ch09).
    In this chapter you will see situations that work differently than expected, and
    see how you can bend the built-in type definitions to your will.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10, “TypeScript and React”](ch10.html#ch10) you will learn how one
    of the most popular JavaScript frameworks is integrated in TypeScript, features
    that make the syntax extension *JSX* possible, and how this fits into the overall
    concept of TypeScript. You will also learn how to write robust types for components
    and hooks, and how to deal with a type definition file that has been attached
    to the actual library after the fact.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is about classes, a staple of object-oriented programming that
    was available in TypeScript long before their counterpart existed in JavaScript.
    This leads to an interesting duality of features discussed in detail in [Chapter 11,
    “Classes”](ch11.html#ch11).
  prefs: []
  type: TYPE_NORMAL
- en: The book ends with [Chapter 12, “Type Development Strategies”](ch12.html#ch12).
    Here I focus on giving you the skills to create advanced types on your own, to
    make the right decisions on how to move your project along, and to deal with libraries
    that validate types for you. You also will learn about special workarounds and
    hidden features, and discuss how to name generics or if advanced types are a bit
    too much. This chapter is particularly fun because after a long journey from novice
    to apprentice, you will reach expert status.
  prefs: []
  type: TYPE_NORMAL
- en: All examples are available as a TypeScript playground or CodeSandbox project
    at the [book’s website](https://typescript-cookbook.com). The playgrounds in particular
    offer an intermediate state, so you can fiddle around on your own and play with
    the behaviors. I always say that you can’t learn a programming language just by
    reading about it; you need to actively code and get your hands dirty to understand
    how everything plays together. See this as an invitation to have fun with programming
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programming Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript allows for many programming styles and formatting options. To avoid
    *bike-shedding*, I chose to autoformat all examples using [Prettier](https://prettier.io).
    If you are used to a different formatting style—maybe you prefer commas instead
    of semicolons after each property declaration of your types—you are more than
    welcome to continue with your preference.
  prefs: []
  type: TYPE_NORMAL
- en: '*TypeScript Cookbook* has a lot of examples and deals with a lot of functions.
    There are many ways to write functions, and I’ve chosen to write mostly *function
    declarations* instead of *function expressions*, except where it was crucial to
    explain the differences between both notations. On all other occasions, it’s mostly
    a matter of taste rather than for technical reasons.'
  prefs: []
  type: TYPE_NORMAL
- en: All examples have been checked against TypeScript 5.0, the most recent release
    at the time of this book’s writing. TypeScript changes constantly and so do the
    rules. This book ensures that we mostly focus on things that are long-lasting
    and can be trusted across versions. Where I expect further development or fundamental
    change, I provide respective warnings and notes.
  prefs: []
  type: TYPE_NORMAL
- en: Typesetting Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://typescript-cookbook.com*](https://typescript-cookbook.com).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*support@oreilly.com*](mailto:support@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*TypeScript Cookbook* by
    Stefan Baumgartner (O’Reilly). Copyright 2023 Stefan Baumgartner, 978-1-098-13665-9.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](https://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*support@oreilly.com*](mailto:support@oreilly.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://www.oreilly.com/about/contact.html*](https://www.oreilly.com/about/contact.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/typescript-cookbook*](https://oreil.ly/typescript-cookbook).
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alexander Rosemann, Sebastian Gierlinger, Dominik Angerer, and Georg Kothmeier
    are the first people I go to if I have something new cooking. Our regular meetings
    and interactions not only are entertaining but also provide me with the necessary
    feedback to evaluate all my choices. They are the first people that heard about
    the book, and also the first ones that gave feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Matt Pocock, Joe Previte, Dan Vanderkam, Nathan Shively-Sanders,
    and Josh Goldberg on social media brought plenty of new ideas to the table. Their
    approach to TypeScript might differ from mine, but they ultimately broadened my
    horizon and made sure that I didn’t end up too opinionated.
  prefs: []
  type: TYPE_NORMAL
- en: Phil Nash, Simona Cotin, and Vanessa Böhner have not only been early reviewers
    of the final manuscript but also long-time companions and friends who are always
    here to sanity-check my ideas. Addy Osmani has been an inspiration throughout
    my entire career, and I’m very proud that he agreed to open my new book.
  prefs: []
  type: TYPE_NORMAL
- en: Lena Matscheko, Alexandra Rapeanu, and Mike Kuss did not hesitate to bombard
    me with technical challenges and questions based on their real-world experiences.
    Where I lacked a good example, they flooded me with excellent source material
    to distill.
  prefs: []
  type: TYPE_NORMAL
- en: I would lose track of all of TypeScript’s developments if it wasn’t for Peter
    Kröner, who constantly knocks on my door when there’s a new TypeScript version
    coming out. Our podcast episodes together on TypeScript releases are legendary,
    and also increasingly not about TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: My tech editors Mark Halpin, Fabian Friedl, and Bernhard Mayr provided the best
    technical feedback I could wish for. They challenged every assumption, checked
    on every code sample, and made sure all my reasoning made sense and that I didn’t
    skip a beat. Their love of detail and their ability to discuss on such a high
    level ensured that this book is not just another collection of hot takes but a
    guide and reference that stands on a solid foundation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book would not exist if not for Amanda Quinn. After writing *TypeScript
    in 50 Lessons* in 2020, I thought I’d said everything I needed to say about TypeScript.
    It was Amanda who pursued me to give the idea of a cookbook a go, to see which
    ideas I would find that wouldn’t make the cut for my first book. After three hours
    I had a complete proposal and table of contents with more than one hundred entries.
    Amanda was right: I had so much more to say, and I’m eternally grateful for her
    support and her guidance.'
  prefs: []
  type: TYPE_NORMAL
- en: Where Amanda helped in the early phases, Shira Evans made sure that the project
    made good progress and didn’t derail. Her feedback was invaluable, and her pragmatic
    and hands-on approach made it a joy to work together.
  prefs: []
  type: TYPE_NORMAL
- en: Elizabeth Faerm and Theresa Jones took care of the production. Their eye for
    detail is outstanding, and they made sure that the production phase is exciting
    and actually a lot of fun! The final result is a beautiful experience I can’t
    get enough of.
  prefs: []
  type: TYPE_NORMAL
- en: During writing I had great assistance from Porcupine Tree, Beck, Nobuo Uematsu,
    Camel, The Beta Band, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest contribution to this book comes from my family. Doris, Clemens,
    and Aaron are everything I’ve ever wished for, and without their endless love
    and support, I wouldn’t be able to pursue my ambitions. Thank you for everything.
  prefs: []
  type: TYPE_NORMAL
