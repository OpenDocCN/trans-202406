["```\nconst browserNames = ['Firefox', 'Edge', 'Chrome', 'IE', 'Safari'];\n\nif (Array.isArray(browserNames)) {\n  // We end up here, because browserNames is a valid array.\n}\n```", "```\nconst animals = ['elephant', 'tiger', 'lion', 'zebra', 'cat', 'dog', 'rabbit'];\n\nfor (const animal of animals) {\n  console.log(animal);\n}\n```", "```\nconst animals = ['elephant', 'tiger', 'lion', 'zebra', 'cat', 'dog', 'rabbit'];\n\nanimals.forEach(function(animal, index, array) {\n  console.log(animal);\n});\n```", "```\nanimals.forEach(animal => console.log(animal));\n```", "```\nconst animals = ['elephant', 'tiger', 'lion', 'zebra', 'cat', 'dog', 'rabbit'];\n\nfor (let i = 0; i < animals.length; ++i) {\n  console.log(animals[i]);\n}\n```", "```\nfunction areArraysEqual(arrayA, arrayB) {\n  if (!Array.isArray(arrayA) || !Array.isArray(arrayB)) {\n    // These objects are null, undeclared, or non-array objects\n    return false;\n  }\n  else if (arrayA === arrayB) {\n    // Shortcut: they're two references pointing to the same array\n    return true;\n  }\n  else if (arrayA.length !== arrayB.length) {\n    // They can't match if they have a different item count\n    return false;\n  }\n  else {\n    // Time to look closer at each item\n    for (let i = 0; i < arrayA.length; ++i) {\n      // We require items to have the same content and be the same type,\n      // but you could use loosely typed equality depending on your task\n      if (arrayA[i] !== arrayB[i]) return false;\n    }\n    return true;\n  }\n}\n```", "```\nconst fruitNamesA = ['apple', 'kumquat', 'grapefruit', 'kiwi'];\nconst fruitNamesB = ['apple', 'kumquat', 'grapefruit', 'kiwi'];\nconst fruitNamesC = ['avocado', 'squash', 'red pepper', 'cucumber'];\n\nconsole.log(areArraysEqual(fruitNamesA, fruitNamesB));  // true\nconsole.log(areArraysEqual(fruitNamesA, fruitNamesC));  // false\n```", "```\nconst fruitNamesA = ['apple', 'kumquat', 'grapefruit', 'kiwi'];\nconst fruitNamesB = ['kumquat', 'kiwi', 'grapefruit', 'apple'];\n\nconsole.log(areArraysEqual(fruitNamesA.sort(), fruitNamesB.sort()));  // true\n```", "```\nconst datesA = [new Date(2021,1,1)];\nconst datesB = [new Date(2021,1,1)];\n\nconsole.log(areArraysEqual(datesA, datesB));  // false\n```", "```\nfunction areArraysEqual(arrayA, arrayB) {\n  if (!Array.isArray(arrayA) || !Array.isArray(arrayB)) {\n    return false;\n  }\n  else if (arrayA === arrayB) {\n    return true;\n  }\n  else if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n  else {\n    for (let i = 0; i < arrayA.length; ++i) {\n      // Check for equal dates\n      if (arrayA[i] instanceOf Date && arrayB[i] instanceOf Date) {\n        if (arrayA[i].getTime() !== arrayB[i].getTime()) return false;\n      }\n      else {\n        // Use the normal strict equality check\n        if (arrayA[i] !== arrayB[i]) return false;\n      }\n    }\n    return true;\n  }\n}\n```", "```\nconst stateValues = [459, 144, 96, 34, 0, 14];\nconst [arizona, missouri, idaho, nebraska, texas, minnesota] = stateValues;\nconsole.log(missouri);   // 144\n```", "```\nconst stateValues = [459, 144, 96, 34, 0, 14];\n\n// Just get three values from the array\nconst [arizona, , , nebraska, texas] = stateValues;\nconsole.log(nebraska);   // 34\n```", "```\nconst stateValues = [459, 144, 96, 34, 0, 14];\nconst [arizona, missouri, idaho, ...others] = stateValues;\nconsole.log(others);   // 34, 0, 14\n```", "```\nlet arizona, missouri, idaho, nebraska, texas, minnesota;\n[arizona, missouri, idaho, nebraska, texas, minnesota] = stateValues;\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\n\n// This syntax is not allowed. The result is NaN.\nconst maximumFail = Math.max(numbers);\n\n// But this works, thanks to the spread operator. (The answer is 304.)\nconst maximum = Math.max(...numbers);\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\n\n// Call max() on the array values, along with three more arguments.\nconst maximum = Math.max(24, ...numbers, 96, 7);\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\nconst numbersCopy = [...numbers];\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\nconst numbersCopy = numbers.slice();\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\nconst numbersCopy = numbers;\n```", "```\nconst objectsOriginal = [{name: 'Sadie', age: 12}, {name: 'Patrick', age: 18}];\nconst objectsCopy = [...objectsOriginal];\n\n// Change one of the people objects in objectsCopy\nobjectsCopy[0].age = 14;\n\n// Investigate the same object in objectsOriginal\nconsole.log(objectsOriginal[0].age);  // 14\n```", "```\nconst objectsOriginal = [{name: 'Sadie', age: 12}, {name: 'Patrick', age: 18}];\n\n// Create a new array with copied objects\nconst objectsCopy = objectsOriginal.map( element => ({...element}) );\n\n// Change one of the people objects in objectsCopy\nobjectsCopy[0].age = 14;\n\n// Investigate the same object in objectsOriginal\nconsole.log(objectsOriginal[0].age);  // 12\n```", "```\nconst evens = [2, 4, 6, 8];\nconst odds = [1, 3, 5, 7, 9];\n\nconst evensAndOdds = evens.concat(odds);\n// now evensAddOdds contains [2, 4, 6, 8, 1, 3, 5, 7, 9]\n```", "```\nconst evens = [2, 4, 6, 8];\nconst odds = [1, 3, 5, 7, 9];\n\nconst evensAndOdds = [...evens, ...odds];\n```", "```\nconst evens = [2, 4, 6, 8];\nconst odds = [1, 3, 5, 7, 9];\n\nconst evensAndOdds = [...evens, 10, 12, ...odds, 11];\n```", "```\nconst dates2020 = [new Date(2020,1,10), new Date(2020,2,10)];\nconst dates2021 = [new Date(2021,1,10), new Date(2021,2,10)];\n\nconst datesCombined = [...dates2020, ...dates2021];\n\n// Change a date in the new array\ndatesCombined[0].setYear(2022);\n\n// The same object is in the first array\nconsole.log(dates2020[0]);   // 2022/02/10\n```", "```\nconst animals = ['elephant', 'tiger', 'lion', 'zebra', 'cat', 'dog',\n 'rabbit', 'goose'];\n\n// Get the chunk from index 4 to index 7.\nconst domestic = animals.slice(4, 7);\n\nconsole.log(domestic); // ['cat', 'dog', 'rabbit']\n```", "```\nconst animals = ['elephant', 'tiger', 'lion', 'zebra', 'cat', 'dog',\n 'rabbit', 'goose'];\n\nconst firstHalf = animals.slice(0, 3);\nconst secondHalf = animals.slice(4, 7);\n\n// Put two new animals in the middle\nconst extraAnimals = [...firstHalf, 'emu', 'platypus', ...secondHalf];\n```", "```\nfunction startsWithE(animal) {\n  return animal[0].toLowerCase() === 'e';\n}\n\nconst animals = ['elephant', 'tiger', 'emu', 'zebra', 'cat', 'dog',\n 'eel', 'rabbit', 'goose', 'earwig'];\nconst animalsE = animals.filter(startsWithE);\nconsole.log(animalsE);   // [\"elephant\", \"emu\", \"eel\", \"earwig\"]\n```", "```\nconst animals = ['elephant', 'tiger', 'emu', 'zebra', 'cat', 'dog',\n 'eel', 'rabbit', 'goose', 'earwig'];\nconst animalsE = animals.filter(animal => animal[0].toLowerCase() === 'e');\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\nnumbers.length = 0;\n```", "```\nmyArray = [];\n```", "```\nconst numbers = [2, 42, 5, 304, 1, 13];\nnumbers.length = 3;\n\nconsole.log(numbers);  // [2, 42, 5]\n\nnumbers.length = 5;\nconsole.log(numbers);  // [2, 42, 5, undefined, undefined]\n```", "```\nconst numbersWithDuplicates = [2, 42, 5, 42, 304, 1, 13, 2, 13];\n\n// Create a Set with unique values (the duplicate 42, 2, and 13 are discarded)\nconst uniqueNumbersSet = new Set(numbersWithDuplicates);\n\n// Turn the Set back into an array (now with 6 items)\nconst uniqueNumbersArray = Array.from(uniqueNumbersSet);\n```", "```\nconst numbersWithDuplicates = [2, 42, 5, 42, 304, 1, 13, 2, 13];\n\nconst uniqueNumbers = [...new Set(numbersWithDuplicates)];\n```", "```\nconst fruitArray = [];\n\n// Add three elements to fruitArray\n// Each element is an array of strings\nfruitArray[0] = ['strawberry', 'blueberry', 'raspberry'];\nfruitArray[1] = ['lime', 'lemon', 'orange', 'grapefruit'];\nfruitArray[2] = ['tangerine', 'apricot', 'peach', 'plum'];\n\nconst fruitList = fruitArray.flat();\n// Now fruitList has 11 elements, and each one is a string\n```", "```\nconst fruitArray = [];\nfruitArray[0] = ['strawberry', 'blueberry', 'raspberry'];\nfruitArray[1] = ['lime', 'lemon', 'orange', 'grapefruit'];\nfruitArray[2] = ['tangerine', 'apricot', 'peach', 'plum'];\n```", "```\nconst fruitList =\n fruitArray[0].concat(fruitArray[1],fruitArray[2],fruitArray[3]);\n```", "```\n// An array with several levels of nested arrays inside\nconst threeDimensionalNumbers = [1, [2, [3, 4, 5], 6], 7];\n\n// The default flattening\nconst flat2D = threeDimensionalNumbers.flat(1);\n// now flat2D = [1, 2, [3, 4, 5], 6, 7]\n\n// Flatten two levels\nconst flat1D = threeDimensionalNumbers.flat(2);\n// now flat1D = [1, 2, 3, 4, 5, 6, 7]\n\n// Flatten all levels, no matter how many there are\nconst flattest = threeDimensionalNumbers.flat(Infinity);\n```", "```\nconst animals = ['dog', 'cat', 'seal', 'elephant', 'walrus', 'lion'];\nconsole.log(animals.indexOf('elephant'));    // 3\nconsole.log(animals.lastIndexOf('walrus'));  // 4\nconsole.log(animals.includes('dog'));        // true\n```", "```\nconst animals = ['dog', 'cat', 'seal', 'walrus', 'lion', 'cat'];\n\nconsole.log(animals.indexOf('cat'));      // 1\nconsole.log(animals.lastIndexOf('cat'));  // 5\n```", "```\nconst animals = ['dog', 'cat', 'seal', 'walrus', 'lion', 'cat'];\n\nconsole.log(animals.indexOf('cat', 2));      // 5\nconsole.log(animals.lastIndexOf('cat', 4));  // 1\n```", "```\nconst nums = [2, 4, 19, 15, 183, 6, 7, 1, 1];\n\n// Find the first value over 10.\nconst bigNum = nums.find(element => element > 10);\n\nconsole.log(bigNum);  // 19 (the first match)\n```", "```\nconst nums = [2, 4, 19, 15, 183, 6, 7, 1, 1];\n\nconst bigNumIndex = nums.findIndex(element => element > 100);\n\nconsole.log(bigNumIndex);  // 4 (the index of the first match)\n```", "```\n// Remember, the Date constructor takes a zero-based month number, so a\n// month value of 10 corresponds to the eleventh month, November\nconst dates = [new Date(2021, 10, 20), new Date(2020, 3, 12),\n new Date(2020, 5, 23), new Date(2022, 3, 18)];\n\n// Find the first date in 2020\nconst matchingDate = dates.find(date => date.getFullYear() === 2020);\n\nconsole.log(matchingDate);  // 'Sun Apr 12 2020 ...'\n```", "```\nconst animals = ['dog', 'cat', 'seal', 'walrus', 'lion', 'cat'];\n\n// Find where the 'walrus' item is\nconst walrusIndex = animals.indexOf('walrus');\n\n// Join the portion before 'walrus' to the portion after 'walrus'\nconst animalsSliced =\n [...animals.slice(0, walrusIndex), ...animals.slice(walrusIndex+1)];\n\n// now animalsSliced has ['dog', 'cat', 'seal', 'lion', 'cat']\n```", "```\nconst animals = ['dog', 'cat', 'seal', 'walrus', 'lion', 'cat'];\n\n// Find where the 'walrus' item is\nconst walrusIndex = animals.indexOf('walrus');\n\n// Starting at walrusIndex, remove 1 element\nanimals.splice(walrusIndex, 1);\n\n// now animals = ['dog', 'cat', 'seal', 'lion', 'cat']\n```", "```\nconst animals = ['cat', 'walrus', 'lion', 'cat'];\n\n// Start at 'lion', and remove the rest of the elements\nanimals.splice(2);\n// now animals = ['cat', 'walrus']\n```", "```\nconst animals = ['cat', 'walrus', 'lion', 'cat'];\n\n// Remove one element and add two new elements\nanimals.splice(2, 1, 'zebra', 'elephant');\n// now animals = ['cat', 'walrus', 'zebra', 'elephant', 'cat']\n```", "```\nconst people  = [\n { firstName: 'Joe', lastName: 'Khan', age: 21 },\n { firstName: 'Dorian', lastName: 'Khan', age: 15 },\n { firstName: 'Tammy', lastName: 'Smith', age: 41 },\n { firstName: 'Noor', lastName: 'Biles', age: 33 },\n { firstName: 'Sumatva', lastName: 'Chen', age: 19 }\n];\n\n// Sort the people from youngest to oldest\npeople.sort( function(a, b) {\n  if (a.age < b.age) {\n    return -1;\n  } else if (a.age > b.age) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\nconsole.log(people);\n// Now the order is Dorian, Sumatva, Joe, Noor, Tammy\n```", "```\npeople.sort(function(a, b) {\n  // Subtract the ages to sort from youngest to oldest\n  return a.age - b.age;\n});\n```", "```\npeople.sort((a,b) => a.age - b.age);\n```", "```\npeople.sort((a,b) => a.lastName.localeCompare(b.lastName));\nconsole.log(people);\n// Now the order is Noor, Sumatva, Joe, Dorian, Tammy\n```", "```\nconst decArray = [23, 255, 122, 5, 16, 99];\n\n// Use the toString() method to conver to base-16 values\nconst hexArray = decArray.map( element => element.toString(16) );\n\nconsole.log(hexArray);  // ['17', 'ff', '7a', '5', '10', '63']\n```", "```\nconst reducerFunction = function (accumulator, element) {\n  // Add the current value to the running total in the accumulator.\n  const newTotal = accumulator + element;\n  return newTotal;\n}\n```", "```\nconst numbers = [23, 255, 122, 5, 16, 99];\n\n// The second argument (0) sets the starting value of the accumulator.\n// If you don't set a starting value, the accumulator is automatically set\n// to the first element.\nconst total = numbers.reduce(reducerFunction, 0);\nconsole.log(total);  // 520\n```", "```\nconst numbers = [23, 255, 122, 5, 16, 99];\n\n// The reducer function adds to the accumulator\nconst totalSquares = numbers.reduce( (acc, val) => acc + val**2, 0);\n// totalSquares = 90520\n\n// The reducer function adds to the accumulator\nconst average = numbers.reduce( (acc, val) => acc + val, 0) / numbers.length;\n// average = 86.66...\n\n// The reducer function returns the higher value (accumulator or current value)\nconst max = numbers.reduce( (acc, val) => acc > val ? acc: val);\n// max = 255\n```", "```\n// The testing function\nfunction containsLettersOnly(element) {\n  const textExp = /^[a-zA-Z]+$/;\n  return textExp.test(element);\n}\n\n// Test an array\nconst mysteryItems = ['**', 123, 'aaa', 'abc', '-', 46, 'AAA'];\nlet result = mysteryItems.every(containsLettersOnly);\nconsole.log(result);  // false\n\n// Test another array\nconst mysteryItems2 = ['elephant', 'lion', 'cat', 'dog'];\nresult = mysteryItems2.every(containsLettersOnly);\nconsole.log(result);  // true\n```", "```\nconst mysteryItems = new Array('**', 123, 'aaa', 'abc', '-', 46, 'AAA');\n\n// testing function\nfunction testValue (element) {\n   const textExp = /^[a-zA-Z]+$/;\n   return textExp.test(element);\n}\n\n// run test\nconst result = mysteryItems.some(testValue);\nconsole.log(result);  // true\n```", "```\n// Start with six elements\nconst animals = new Set(['elephant', 'tiger', 'lion', 'zebra', 'cat', 'dog']);\n\n// Add two more\nanimals.add('rabbit');\nanimals.add('goose');\n\n// Nothing happens, because this item is already in the Set\nanimals.add('tiger');\n\n// Iterate over the Set, just as you would with an array\nfor (const animal of animals) {\n    console.log(animal);\n}\n```", "```\n// Convert an array to a Set\nconst animalSet = new Set(['elephant', 'tiger', 'zebra', 'cat', 'dog']);\n\n// Convert a Set to an array\nconst animalArray = Array.from(animalSet);\n```", "```\nconst products = new Map();\n\n// Add three items\nproducts.set('RU007', {name: 'Rain Racer 2000', price: 1499.99});\nproducts.set('STKY1', {name: 'Edible Tape', price: 3.99});\nproducts.set('P38', {name: 'Escape Vehicle (Air)', price: 2999.00});\n\n// Check for two items using the item code\nconsole.log(products.has('RU007'));  // true\nconsole.log(products.has('RU494'));  // false\n\n// Retrieve an item\nconst product = products.get('P38');\nif (typeof product !== 'undefined') {\n  console.log(product.price);  // 2999\n}\n\n// Remove the Edible Tape item\nproducts.delete('STKY1');\n\nconsole.log(products.size);  // 2\n```", "```\nconst products = new Map();\n\n// Don't do this!\nproducts['RU007'] = {name: 'Rain Racer 2000', price: 1499.99};\n```", "```\nconst productArray = Array.from(products);\n\nconsole.log(productArray[0]);\n // ['RU007', {name: 'Rain Racer 2000', price: 1499.99}]\n```", "```\nconst productArray = Array.from(products, ([name, value]) => value);\n\nconsole.log(productArray[0]);\n // {name: 'Rain Racer 2000', price: 1499.99}\n```"]