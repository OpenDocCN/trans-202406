["```\n127.0.0.1 admin.meadowlark.local\n127.0.0.1 meadowlark.local\n```", "```\n// create \"admin\" subdomain...this should appear\n// before all your other routes\nvar admin = express.Router()\napp.use(vhost('admin.meadowlark.local', admin))\n\n// create admin routes; these can be defined anywhere\nadmin.get('*', (req, res) => res.send('Welcome, Admin!'))\n\n// regular routes\napp.get('*', (req, res) => res.send('Welcome, User!'))\n```", "```\napp.get('/fifty-fifty', (req, res, next) => {\n  if(Math.random() < 0.5) return next()\n  res.send('sometimes this')\n})\napp.get('/fifty-fifty', (req,res) => {\n  res.send('and sometimes that')\n})\n```", "```\napp.get('/rgb',\n  (req, res, next) => {\n    // about a third of the requests will return \"red\"\n    if(Math.random() < 0.33) return next()\n    res.send('red')\n  },\n  (req, res, next) => {\n    // half of the remaining 2/3 of requests (so another third)\n    // will return \"green\"\n    if(Math.random() < 0.5) return next()\n    res.send('green')\n  },\n  function(req, res){\n    // and the last third returns \"blue\"\n    res.send('blue')\n  },\n)\n```", "```\nasync function specials(req, res, next) {\n  res.locals.special = await getSpecialsFromDatabase()\n  next()\n}\n\napp.get('/page-with-specials', specials, (req, res) =>\n  res.render('page-with-specials')\n)\n```", "```\nfunction authorize(req, res, next) {\n  if(req.session.authorized) return next()\n  res.render('not-authorized')\n}\n\napp.get('/public', () => res.render('public'))\n\napp.get('/secret', authorize, () => res.render('secret'))\n```", "```\napp.get('/user(name)?', (req, res) => res.render('user'))\n```", "```\napp.get('/khaa+n', (req, res) => res.render('khaaan'))\n```", "```\napp.get(/crazy|mad(ness)?|lunacy/, (req,res) =>\n  res.render('madness')\n)\n```", "```\nconst staff = {\n  mitch: { name: \"Mitch\",\n    bio: 'Mitch is the man to have at your back in a bar fight.' },\n  madeline: { name: \"Madeline\", bio: 'Madeline is our Oregon expert.' },\n  walt: { name: \"Walt\", bio: 'Walt is our Oregon Coast expert.' },\n}\n\napp.get('/staff/:name', (req, res, next) => {\n  const info = staff[req.params.name]\n  if(!info) return next()   // will eventually fall through to 404\n  res.render('05-staffer', info)\n})\n```", "```\nconst staff = {\n  portland: {\n    mitch: { name: \"Mitch\", bio: 'Mitch is the man to have at your back.' },\n    madeline: { name: \"Madeline\", bio: 'Madeline is our Oregon expert.' },\n  },\n  bend: {\n    walt: { name: \"Walt\", bio: 'Walt is our Oregon Coast expert.' },\n  },\n}\n\napp.get('/staff/:city/:name', (req, res, next) => {\n  const cityStaff = staff[req.params.city]\n  if(!cityStaff) return next()  // unrecognized city -> 404\n  const info = cityStaff[req.params.name]\n  if(!info) return next()       // unrecognized staffer -> 404\n  res.render('staffer', info)\n})\n```", "```\nconst routes = require('./routes.js')\n\nroutes.forEach(route => app[route.method](route.handler))\n```", "```\nmodule.exports = app => {\n\n  app.get('/', (req,res) => app.render('home'))\n\n  //...\n\n}\n```", "```\nrequire('./routes')(app)\n```", "```\nconst addRoutes = require('./routes')\n\naddRoutes(app)\n```", "```\nconst fortune = require('../lib/fortune')\n\nexports.home = (req, res) => res.render('home')\n\nexports.about = (req, res) => {\n  const fortune = fortune.getFortune()\n  res.render('about', { fortune })\n}\n\n//...\n```", "```\nconst main = require('./handlers/main')\n\nmodule.exports = function(app) {\n\n  app.get('/', main.home)\n  app.get('/about', main.about)\n  //...\n\n}\n```", "```\nconst autoViews = {}\nconst fs = require('fs')\nconst { promisify } = require('util')\nconst fileExists = promisify(fs.exists)\n\napp.use(async (req, res, next) => {\n  const path = req.path.toLowerCase()\n  // check cache; if it's there, render the view\n  if(autoViews[path]) return res.render(autoViews[path])\n  // if it's not in the cache, see if there's\n  // a .handlebars file that matches\n  if(await fileExists(__dirname + '/views' + path + '.handlebars')) {\n    autoViews[path] = path.replace(/^\\//, '')\n    return res.render(autoViews[path])\n  }\n  // no view found; pass on to 404 handler\n  next()\n})\n```"]