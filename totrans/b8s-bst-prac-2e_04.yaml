- en: Chapter 4\. Configuration, Secrets, and RBAC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 配置、秘密和RBAC
- en: The composable nature of containers allows us as operators to introduce configuration
    data into a container at runtime. This makes it possible for us to decouple an
    application’s function from the environment it runs in. By means of the conventions
    allowed in the container runtime to pass through either environment variables
    or mount external volumes into a container at runtime, you can effectively change
    the configuration of the application upon its instantiation. As a developer, it
    is important to consider the dynamic nature of this behavior and allow for the
    use of environment variables or the reading of configuration data from a specific
    path available to the application runtime user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的可组合性使我们作为运维人员能够在运行时将配置数据引入容器中。这使得我们能够将应用程序的功能与其运行环境分离。通过容器运行时允许的约定，可以通过环境变量或在运行时将外部卷挂载到容器中，有效地改变应用程序的配置。作为开发人员，重要的是要考虑这种行为的动态性，并允许使用环境变量或从应用程序运行时用户可用路径读取配置数据。
- en: When moving sensitive data such as secrets into a native Kubernetes API object,
    it is important to understand how Kubernetes secures access to the API. The most
    commonly implemented security method in use in Kubernetes is Role-Based Access
    Control (RBAC) to implement a fine-grained permission structure around actions
    that can be taken against the API by specific users or groups. This chapter covers
    some of the best practices regarding RBAC and also provides a small primer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将敏感数据（如秘密）移入原生Kubernetes API对象时，理解Kubernetes如何安全访问API非常重要。Kubernetes中最常实现的安全方法是基于角色的访问控制（RBAC），以实施针对特定用户或组的可执行操作的精细权限结构。本章介绍了一些关于RBAC的最佳实践，并提供了一个小的入门指南。
- en: Configuration Through ConfigMaps and Secrets
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过ConfigMaps和Secrets进行配置
- en: Kubernetes allows you to natively provide configuration information to our applications
    through ConfigMaps or secret resources. The main differentiator between the two
    is the way a pod stores the receiving information and how the data is stored in
    the etcd data store.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes允许您通过ConfigMaps或秘密资源原生地为我们的应用程序提供配置信息。两者之间的主要区别在于pod存储接收信息的方式以及数据存储在etcd数据存储中的方式。
- en: ConfigMaps
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ConfigMaps
- en: It is very common to have applications consume configuration information through
    some type of mechanism such as command-line arguments, environment variables,
    or files that are available to the system. Containers allow the developer to decouple
    this configuration information from the application, which allows for true application
    portability. The ConfigMap API allows for the injection of supplied configuration
    information. ConfigMaps are very adaptable to the application’s requirements and
    can provide key/value pairs or complex bulk data such as JSON, XML, or proprietary
    configuration data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常通过一些机制（如命令行参数、环境变量或系统可用的文件）消耗配置信息是非常普遍的。容器允许开发人员将此配置信息与应用程序解耦，从而实现真正的应用程序可移植性。ConfigMap
    API允许注入提供的配置信息。ConfigMaps非常适应应用程序的需求，并可以提供键/值对或复杂的批量数据，如JSON、XML或专有配置数据。
- en: The ConfigMaps not only provide configuration information for pods, but they
    can also provide information to be consumed for more complex system services such
    as controllers, CRDs, operators, and so on. As mentioned earlier, the ConfigMap
    API is meant more for string data that is not really sensitive data. If your application
    requires more sensitive data, the Secrets API is more appropriate.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMaps不仅为pod提供配置信息，还可以为更复杂的系统服务（如控制器、CRD、运算符等）提供信息。正如前面提到的，ConfigMap API更适用于不是真正敏感的字符串数据。如果您的应用程序需要更敏感的数据，那么Secrets
    API更合适。
- en: For your application to use the ConfigMap data, it can be injected as either
    a volume mounted into the pod or as environment variables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使应用程序使用ConfigMap数据，可以将其注入为挂载到pod中的卷或环境变量的形式。
- en: Secrets
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Secrets
- en: Many of the attributes and reasons for which you would want to use a ConfigMap
    apply to secrets. The main differences lie in the fundamental nature of a secret.
    Secret data should be stored and handled in a way that can be easily hidden and
    possibly encrypted at rest if the environment is configured as such. The secret
    data is represented as base64-encoded information, and it is critical to understand
    that this is not encrypted. As soon as the secret is injected into the pod, the
    pod itself can see the secret data in plain text.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置映射的原因和属性之多适用于秘密。 主要区别在于秘密的基本性质。 秘密数据应以一种可以轻松隐藏并在环境配置为这样的情况下可能加密的方式存储和处理。
    秘密数据表示为 base64 编码的信息，重要的是要理解这不是加密。 一旦秘密注入到 pod 中，pod 本身就可以看到明文的秘密数据。
- en: 'Secret data is meant to be small amounts of data, limited by default in Kubernetes
    to 1 MB in size for the base64-encoded data, so ensure that the actual data is
    approximately 750 KB because of the overhead of the encoding. There are three
    types of secrets in Kubernetes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密数据意味着小量数据，默认在 Kubernetes 中限制为 1 MB 的 base64 编码数据，因此由于编码的开销，确保实际数据约为 750 KB。
    Kubernetes 中有三种类型的秘密：
- en: '`generic`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`generic`'
- en: 'This is typically just regular key/value pairs that are created from a file,
    a directory, or from string literals using the `--from-literal=` parameter, as
    follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常只是从文件、目录或使用 `--from-literal=` 参数从字符串字面值创建的常规键/值对，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`docker-registry`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-registry`'
- en: 'This is used by the kubelet when passed in a pod template if there is an `imagePullsecret`
    to provide the credentials needed to authenticate to a private Docker registry:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由 `kubelet` 在传递 `pod` 模板时使用的，如果有 `imagePullsecret`，则提供所需的凭据以进行私有 Docker 注册表的身份验证：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`tls`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`tls`'
- en: 'This creates a Transport Layer Security (TLS) secret from a valid public/private
    key pair. As long as the cert is in a valid PEM format, the key pair will be encoded
    as a secret and can be passed to the pod to use for SSL/TLS needs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从有效的公共/私有密钥对创建一个传输层安全 (TLS) 秘密。 只要证书处于有效的 PEM 格式中，密钥对将被编码为秘密，并可以传递给 pod 用于
    SSL/TLS 需求：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Secrets are also mounted into tmpfs only on the nodes that have a pod that requires
    the secret and are deleted when the pod that needs the secret is gone. This prevents
    any secrets from being left behind on the disk of the node. Although this might
    seem secure, it is important to know that, by default, secrets are stored in the
    etcd data store of Kubernetes in plain text, and it is important that the system
    administrators or cloud service provider take efforts to ensure the security of
    the etcd environment, including mTLS between the etcd nodes and enabling encryption
    at rest for the etcd data. More recent versions of Kubernetes use etcd3 and have
    the ability to enable etcd native encryption; however, this is a manual process
    that must be configured in the API server configuration by specifying a provider
    and the appropriate key media to properly encrypt secret data held in etcd. As
    of Kubernetes v1.10 (it has been promoted to beta in v1.12), we have the KMS provider,
    which promises to provide a more secure key process by using third-party KMS systems
    to hold the proper keys.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密也仅在需要秘密的 pod 所在的节点上挂载到 tmpfs，并在需要秘密的 pod 被删除时删除。 这可以防止任何秘密遗留在节点磁盘上。 尽管这可能看起来很安全，但重要的是要知道，默认情况下，秘密以明文形式存储在
    Kubernetes 的 etcd 数据存储中，系统管理员或云服务提供商必须努力确保 etcd 环境的安全性，包括 etcd 节点之间的 mTLS 和启用
    etcd 数据的加密。 更近期的 Kubernetes 版本使用 etcd3，并具有启用 etcd 原生加密的能力； 但是，这是一个必须在 API 服务器配置中手动配置的过程，通过指定提供程序和适当的密钥介质来正确加密
    etcd 中保存的秘密数据。 从 Kubernetes v1.10 开始 (在 v1.12 中已升级为 beta)，我们有 KMS 提供程序，它承诺通过使用第三方
    KMS 系统来保持适当的密钥过程，从而提供更安全的密钥过程。
- en: Common Best Practices for the ConfigMap and Secrets APIs
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置映射和密钥 API 的常见最佳实践
- en: 'The majority of issues that arise from the use of a ConfigMap or secret are
    incorrect assumptions about how changes are handled when the data held by the
    object is updated. By understanding the rules of the road and adding a few tricks
    to make it easier to abide by those rules, you can steer away from trouble:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置映射或秘密时出现的大多数问题源于对对象更新后数据处理方式的错误假设。 通过理解路规并添加一些技巧，以使遵守这些规则更容易，可以避免麻烦：
- en: 'To support dynamic changes to your application without having to redeploy new
    versions of the pods, mount your ConfigMaps/Secrets as a volume and configure
    your application with a file watcher to detect the changed file data and reconfigure
    itself as needed. The following code shows a Deployment that mounts a ConfigMap
    and a Secret file as a volume:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了支持应用程序的动态变更而无需重新部署 Pod 的新版本，请将 ConfigMaps/Secrets 作为卷挂载，并配置应用程序使用文件监视器检测更改的文件数据并根据需要重新配置自身。以下代码展示了一个将
    ConfigMap 和 Secret 文件作为卷挂载的 Deployment 示例：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There are a couple of things to consider when using `volumeMounts`. First, as
    soon as the ConfigMap/Secret is created, add it as a volume in your pod’s specification.
    Then mount that volume into the container’s filesystem. Each property name in
    the ConfigMap/Secret will become a new file in the mounted directory, and the
    contents of each file will be the value specified in the ConfigMap/Secret. Second,
    avoid mounting ConfigMaps/Secrets using the `volumeMounts.subPath` property. This
    will prevent the data from being dynamically updated in the volume if you update
    a ConfigMap/Secret with new data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `volumeMounts` 时需要考虑几个事项。首先，一旦创建 ConfigMap/Secret，请将其作为 Pod 规范中的卷添加。然后将该卷挂载到容器的文件系统中。ConfigMap/Secret
    中的每个属性名称将成为挂载目录中的一个新文件，并且每个文件的内容将是 ConfigMap/Secret 中指定的值。其次，避免使用 `volumeMounts.subPath`
    属性来挂载 ConfigMaps/Secrets。这将阻止在更新 ConfigMap/Secret 时动态更新卷中的数据。
- en: ConfigMaps/Secrets must exist in the namespace for the pods that will consume
    them prior to the pod being deployed. The optional flag can be used to prevent
    the pods from not starting if the ConfigMap/Secret is not present.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ConfigMaps/Secrets 必须在将要使用它们的 Pod 的命名空间中存在，然后才能部署 Pod。如果 ConfigMap/Secret 不存在，可以使用可选标志来防止
    Pod 无法启动。
- en: Use an admission controller to ensure specific configuration data or to prevent
    deployments that do not have specific configuration values set. An example would
    be if you require all production Java workloads to have certain JVM properties
    set in production environments.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用准入控制器来确保特定的配置数据或防止未设置特定配置值的部署。例如，如果您要求所有生产 Java 工作负载在生产环境中具有特定的 JVM 属性集。
- en: If you’re using Helm to release applications into your environment, you can
    use a life cycle hook to ensure the ConfigMap/Secret template is deployed before
    the Deployment is applied.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用 Helm 将应用发布到您的环境中，可以使用生命周期钩子确保在应用 Deployment 之前部署 ConfigMap/Secret 模板。
- en: 'Some applications require their configuration to be applied as a single file
    such as a JSON or YAML file. ConfigMap/Secret allows an entire block of raw data
    by using the `|` symbol, as demonstrated here:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些应用程序要求将它们的配置作为单个文件（如 JSON 或 YAML 文件）应用。ConfigMap/Secret 允许通过使用 `|` 符号来传递整个原始数据块，如此示例所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the application uses system environment variables to determine its configuration,
    you can use the injection of the ConfigMap data to create an environment variable
    mapping into the pod. There are two main ways to do this: mounting every key/value
    pair in the ConfigMap as a series of environment variables into the pod using
    `envFrom` and then using `configMapRef` or `secretRef`, or assigning individual
    keys with their respective values using the `configMapKeyRef` or `secretKeyRef`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用程序使用系统环境变量来确定其配置，您可以使用 ConfigMap 数据的注入来创建环境变量映射到 Pod 中。有两种主要方法可以实现这一点：使用
    `envFrom` 将 ConfigMap 中的每个键值对作为一系列环境变量挂载到 Pod 中，然后使用 `configMapRef` 或 `secretRef`；或者使用
    `configMapKeyRef` 或 `secretKeyRef` 分配单独的键及其相应的值。
- en: If you’re using the `configMapKeyRef` or `secretKeyRef` method, be aware that
    if the actual key does not exist, this will prevent the pod from starting.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用 `configMapKeyRef` 或 `secretKeyRef` 方法，请注意，如果实际键不存在，这将阻止 Pod 启动。
- en: 'If you’re loading all the key/value pairs from the ConfigMap/Secret into the
    pod using `envFrom`, any keys that are considered invalid environment values will
    be skipped; however, the pod will be allowed to start. The event for the pod will
    have an event with reason `InvalidVariableNames` and the appropriate message about
    which key was skipped. The following code is an example of a Deployment with a
    ConfigMap and Secret reference as an environment variable:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用 `envFrom` 将 ConfigMap/Secret 中的所有键值对加载到 Pod 中，并且有些键被视为无效的环境值将会被跳过；但是，Pod
    将被允许启动。Pod 的事件将包含一个原因为 `InvalidVariableNames` 的事件，并包含有关跳过的键的适当消息。以下代码展示了一个带有 ConfigMap
    和 Secret 引用作为环境变量的 Deployment 示例：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If there is a need to pass command-line arguments to your containers, environment
    variable data can be sourced using `$(ENV_KEY)` interpolation syntax:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要向容器传递命令行参数，可以使用 `$(ENV_KEY)` 插值语法来源环境变量数据：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When consuming ConfigMap/Secret data as environment variables, it is very important
    to understand that updates to the data in the ConfigMap/Secret will *not* update
    in the pod and will require a pod restart. This can be done either by deleting
    the pods and letting the ReplicaSet controller create a new pod, or by triggering
    a Deployment update, which will follow the proper application update strategy
    as declared in the Deployment specification.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将 ConfigMap/Secret 数据作为环境变量消耗时，非常重要的是要理解，对 ConfigMap/Secret 中数据的更新 *不会* 在 Pod
    中更新，需要重新启动 Pod。这可以通过删除 Pod 并让 ReplicaSet 控制器创建新的 Pod，或通过触发 Deployment 更新来完成，后者将遵循
    Deployment 规范中声明的适当应用更新策略。
- en: 'It is easier to assume that all changes to a ConfigMap/Secret require an update
    to the entire Deployment; this ensures that even if you’re using environment variables
    or volumes, the code will take the new configuration data. To make this easier,
    you can use a CI/CD pipeline to update the `name` property of the ConfigMap/Secret
    and also update the reference in the Deployment, which will then trigger a Deployment
    update through normal Kubernetes update strategies. We will explore this in the
    following example code. If you’re using Helm to release your application code
    into Kubernetes, you can take advantage of an annotation in the Deployment template
    to check the `sha256` checksum of the ConfigMap/Secret. This triggers Helm to
    update the Deployment using the `helm upgrade` command when the data within a
    ConfigMap/Secret is changed:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设所有对 ConfigMap/Secret 的更改都需要更新整个 Deployment，这样可以确保即使使用环境变量或卷，代码也会采用新的配置数据。为了简化此过程，您可以使用
    CI/CD 流水线更新 ConfigMap/Secret 的 `name` 属性，并同时更新 Deployment 中的引用，这将通过常规的 Kubernetes
    更新策略触发 Deployment 更新。我们将在以下示例代码中探讨这一点。如果您使用 Helm 发布应用代码到 Kubernetes，您可以利用 Deployment
    模板中的注释来检查 ConfigMap/Secret 的 `sha256` 校验和。当 ConfigMap/Secret 中的数据发生变化时，这将触发 Helm
    使用 `helm upgrade` 命令更新 Deployment：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Best Practices Specific to Secrets
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专用于 Secrets 的最佳实践
- en: 'Because of the nature of sensitive data of the Secrets API, there are naturally
    more specific best practices, which are mainly around the security of the data
    itself:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Secrets API 中敏感数据的特性，自然会有更具体的最佳实践，主要围绕数据本身的安全性：
- en: 'If your workload does not need to access the Kubernetes API directly it is
    good practice to block the automounting of the API Credential for the Service
    Account (Default or operator created). This will reduce the API calls to the API
    server as a watch is used to update the API credential data upon the credential
    expiring. In very large clusters or clusters with a lot of pods, this will reduce
    the calls to the Control Plane thus reducing a possible cause of performance degradation.
    This can be defined on the ServiceAccount or the Pod Spec itself:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的工作负载不需要直接访问 Kubernetes API，最佳实践是阻止自动挂载服务账户（默认或操作员创建的）的 API 凭据。这将减少对 API
    服务器的 API 调用，因为使用监视功能来更新 API 凭据数据，以便在凭据过期时更新。在非常大的集群或具有大量 Pod 的集群中，这将减少对控制平面的调用，从而减少可能导致性能下降的原因之一。可以在
    ServiceAccount 或 Pod Spec 本身定义这一行为：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The original specification for the Secrets API outlined a pluggable architecture
    to allow the actual storage of the secret to be configurable based on requirements.
    Solutions such as HashiCorp Vault, Aqua Security, Twistlock, AWS Secrets Manager,
    Google Cloud KMS, or Azure Key Vault allow the use of external storage systems
    for secret data using a higher level of encryption and auditability than what
    is offered natively in Kubernetes. The Linux Foundation project ExternalSecrets
    Operator provides a native way to provide this functionality.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Secrets API 的原始规范概述了一种可插拔的架构，允许根据需求配置实际的秘密存储。诸如 HashiCorp Vault、Aqua Security、Twistlock、AWS
    Secrets Manager、Google Cloud KMS 或 Azure Key Vault 等解决方案允许使用高级别的加密和审计功能的外部存储系统来存储秘密数据，这比
    Kubernetes 本地提供的功能更强大。Linux 基金会项目 ExternalSecrets Operator 提供了一种本地方式来提供这种功能。
- en: 'Assign an `imagePullSecrets` to a `serviceaccount` that the pod will use to
    automatically mount the secret without having to declare it in the `pod.spec`.
    You can patch the default service account for the namespace of your application
    and add the `imagePullSecrets` to it directly. This automatically adds it to all
    pods in the namespace:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `imagePullSecrets` 分配给一个 `serviceaccount`，该 pod 将使用它来自动挂载密钥，而无需在 `pod.spec`
    中声明它。您可以对应用程序所在命名空间的默认服务帐户进行修补，并直接添加 `imagePullSecrets` 到其中。这将自动将其添加到命名空间中的所有
    pods：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use CI/CD capabilities to get secrets from a secure vault or encrypted store
    with a Hardware Security Module (HSM) during the release pipeline. This allows
    for separation of duties. Security management teams can create and encrypt the
    secrets, and developers just need to reference the names of the secret expected.
    This is also the preferred DevOps process to ensure a more dynamic application
    delivery process.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CI/CD 能力从安全保管库或加密存储中获取密钥，使用硬件安全模块（HSM）在发布流程中。这允许分离职责。安全管理团队可以创建和加密密钥，而开发人员只需引用预期的密钥名称。这也是确保更动态应用程序交付流程的首选
    DevOps 流程。
- en: RBAC
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RBAC
- en: 'When working in large, distributed environments, it is very common that some
    type of security mechanism is needed to prevent unauthorized access to critical
    systems. There are numerous strategies around how to limit access to resources
    in computer systems, but the majority all go through the same phases. Using an
    analogy of a common experience such as flying to a foreign country can help explain
    the processes that happen in systems like Kubernetes. We can use the common traveler’s
    experience with a passport, travel visa, and customs or border guards to show
    the process:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型分布式环境中工作时，通常需要某种安全机制来防止对关键系统的未经授权访问。在计算机系统中，有许多关于如何限制资源访问的策略，但大多数都经历相同的阶段。通过类比常见的经历，如飞往外国的旅行者经历，可以帮助解释类似
    Kubernetes 系统中发生的过程。我们可以利用护照、旅行签证和海关或边境警卫的共同旅行经验来展示这一过程：
- en: Passport (subject authentication)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 护照（主体验证）
- en: Usually you need to have a passport issued by some government agency that will
    offer some sort of verification as to who you are. This would be equivalent to
    a user account in Kubernetes. Kubernetes relies on an external authority to authenticate
    users; however, service accounts are a type of account that is managed directly
    by Kubernetes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您需要由某个政府机构颁发的护照，该机构将提供一些关于您身份的验证。这相当于 Kubernetes 中的用户帐户。Kubernetes 依赖外部授权机构来验证用户；然而，服务账户是
    Kubernetes 直接管理的一种账户类型。
- en: Visa or travel policy (authorization)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 签证或旅行政策（授权）
- en: Countries will have formal agreements to accept travelers holding passports
    from other countries through formal short-term agreements such as visas. The visas
    will also outline what the visitor may do and for how long they may stay in the
    visiting country, depending on the specific type of visa. This would be equivalent
    to authorization in Kubernetes. Kubernetes has different authorization methods,
    but RBAC is the one used most. This allows very granular access to different API
    capabilities.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 各国将通过正式的短期协议如签证来接受持有其他国家护照的旅行者。签证还会概述访客可以做什么以及他们可以在访问国家停留多长时间，这取决于具体的签证类型。这相当于
    Kubernetes 中的授权。Kubernetes 拥有不同的授权方法，但 RBAC 是最常用的一种。这允许对不同的 API 功能具有非常精细的访问控制。
- en: Border patrol or customs (admission control)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 边境巡逻或海关（准入控制）
- en: When entering a foreign country, usually there is a body of authority that will
    check the requisite documents, including the passport and visa, and, in many cases,
    inspect what is being brought into the country to ensure it abides by that country’s
    laws. In Kubernetes this is equivalent to admission controllers. Admission controllers
    can allow, deny, or change the requests into the API based upon rules and policies
    that are defined. Kubernetes has many built-in admission controllers such as PodSecurity,
    ResourceQuota, and ServiceAccount controllers. Kubernetes also allows for dynamic
    controllers through the use of validating or mutating admission controllers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 进入外国时，通常有一个权威机构将检查必要的文件，包括护照和签证，并且在许多情况下检查进入该国家的物品，以确保其符合该国的法律。在 Kubernetes
    中，这相当于准入控制器。准入控制器可以根据定义的规则和政策允许、拒绝或更改对 API 的请求。Kubernetes 拥有许多内置的准入控制器，如 PodSecurity、ResourceQuota
    和 ServiceAccount 控制器。Kubernetes 还允许通过使用验证或变异准入控制器来实现动态控制器。
- en: 'The focus of this section is the least understood and the most avoided of these
    three areas: RBAC. Before we outline some of the best practices, we first must
    present a primer on Kubernetes RBAC.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的重点是这三个领域中最不为人所理解和最被避免的：RBAC。在我们概述一些最佳实践之前，我们必须首先介绍Kubernetes RBAC的入门知识。
- en: RBAC Primer
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RBAC入门
- en: 'The RBAC process in Kubernetes has three main components that need to be defined:
    the subject, the rule, and the role binding.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的RBAC过程有三个主要组件需要定义：主题、规则和角色绑定。
- en: Subjects
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题
- en: The first component is the subject, the item that is actually being checked
    for access. The subject is usually a user, a service account, or a group. As mentioned
    earlier, users as well as groups are handled outside of Kubernetes by the authorization
    module used. We can categorize these as basic authentication, x.509 client certificates,
    or bearer tokens. The most common implementations use either x.509 client certificates
    or some type of bearer token using something like an OpenID Connect system such
    as Azure Active Directory (Azure AD), Salesforce, or Google.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个组件是主题，实际上正在检查访问权限的项目。主题通常是用户、服务账户或组。如前所述，用户以及组由使用的授权模块在Kubernetes之外处理。我们可以将这些分类为基本认证、x.509客户端证书或持有令牌。最常见的实现使用x.509客户端证书或类似Azure
    Active Directory（Azure AD）、Salesforce或Google等OpenID Connect系统的持有令牌。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Service accounts in Kubernetes are different from user accounts in that they
    are namespace bound and internally stored in Kubernetes; they are meant to represent
    processes, not people, and are managed by native Kubernetes controllers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的服务账户与用户账户不同，它们是命名空间绑定的，并且在Kubernetes内部存储；它们旨在代表进程，而不是人员，并由本地Kubernetes控制器管理。
- en: Rules
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规则
- en: 'Simply stated, this is the actual list of actions that can be performed on
    a specific object (resource) or a group of objects in the API. Verbs align to
    typical create, read, update, and delete (CRUD) type operations but with some
    added capabilities in Kubernetes such as `watch`, `list`, and `exec`. The objects
    align to the different API components and are grouped together in categories.
    Pod objects, as an example, are part of the core API and can be referenced with
    `apiGroup: ""`, whereas deployments are under the app API group. This is the real
    power of the RBAC process and probably what intimidates and confuses people when
    creating proper RBAC controls.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '简单来说，这是可以在API中对特定对象（资源）或对象组执行的实际操作列表。动词与典型的创建、读取、更新和删除（CRUD）类型的操作对齐，但在Kubernetes中具有一些额外的功能，如`watch`、`list`和`exec`。对象与不同的API组件对齐，并按类别进行分组。例如，Pod对象是核心API的一部分，并且可以通过`apiGroup:
    ""`引用，而部署则属于app API组。这是RBAC过程的真正力量，也可能是在创建适当的RBAC控制时让人感到恐惧和困惑的原因。'
- en: Roles
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色
- en: 'Roles allow the definition of scope of the rules defined. Kubernetes has two
    types of roles, `role` and `clusterRole`, the difference being that `role` is
    specific to a namespace, and `clusterRole` is a cluster-wide role across all namespaces.
    An example role definition with namespace scope would be as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 角色允许定义规则定义的范围。Kubernetes有两种类型的角色，`role`和`clusterRole`，它们的区别在于`role`特定于命名空间，而`clusterRole`是跨所有命名空间的集群范围角色。一个具有命名空间范围的角色定义示例如下：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: RoleBindings
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RoleBindings
- en: 'The RoleBinding allows a mapping of a subject like a user or group to a specific
    role. Bindings also have two modes: `roleBinding`, which is specific to a namespace,
    and `clusterRoleBinding`, which is across the entire cluster. Here’s an example
    RoleBinding with namespace scope:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: RoleBinding允许将用户或组等主题映射到特定角色。绑定也有两种模式：`roleBinding`，它是特定于命名空间的；`clusterRoleBinding`，它是跨整个集群的。这里有一个命名空间范围内的示例RoleBinding：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: RBAC Best Practices
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RBAC最佳实践
- en: 'RBAC is a critical component of running a secure, dependable, and stable Kubernetes
    environment. The concepts underlying RBAC can be complex; however, adhering to
    a few best practices can ease some of the major stumbling blocks:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC是运行安全、可靠和稳定的Kubernetes环境的关键组件。RBAC背后的概念可能很复杂；然而，遵循一些最佳实践可以减少一些主要障碍：
- en: Applications that are developed to run in Kubernetes rarely ever need an RBAC
    role and RoleBinding associated to them. Only if the application code interacts
    directly with the Kubernetes API does the application require RBAC configuration.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发用于在Kubernetes中运行的应用程序几乎从不需要与它们关联的RBAC角色和RoleBinding。只有当应用程序代码直接与Kubernetes
    API交互时，应用程序才需要RBAC配置。
- en: If the application does need to directly access the Kubernetes API to perhaps
    change configuration depending on endpoints being added to a service, or if it
    needs to list all the pods in a specific namespace, the best practice is to create
    a new service account that is then specified in the pod specification. Then, create
    a role that has the least amount of privileges needed to accomplish its goal.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用程序确实需要直接访问 Kubernetes API，也许是根据添加到服务的端点来更改配置，或者需要列出特定命名空间中的所有 Pod，最佳实践是创建一个新的服务帐户，然后在
    Pod 规范中指定它。然后，创建一个角色，该角色具有完成其目标所需的最少特权。
- en: Use an OpenID Connect service that enables identity management and, if needed,
    two-factor authentication. This will allow for a higher level of identity authentication.
    Map user groups to roles that have the least amount of privileges needed to accomplish
    the job.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用支持身份管理和如有需要的双因素认证的 OpenID Connect 服务。这将允许更高级别的身份验证。将用户组映射到具有完成工作所需的最少特权的角色。
- en: Along with the aforementioned practice, you should use Just in Time (JIT) access
    systems to allow site reliability engineers (SREs), operators, and those who might
    need to have escalated privileges for a short period of time to accomplish a very
    specific task. Alternatively, these users should have different identities that
    are more heavily audited for sign-on, and those accounts should have more elevated
    privileges assigned by the user account or group bound to a role.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了上述实践，您应该使用即时（JIT）访问系统，允许站点可靠性工程师（SRE）、操作员以及可能需要在短时间内拥有升级特权以完成非常特定任务的人员。或者，这些用户应该有更受审计程度更高的不同身份来进行登录，并且这些帐户应该由用户帐户或绑定到角色的组分配更高的权限。
- en: Specific service accounts should be used for CI/CD tools that deploy into your
    Kubernetes clusters. This ensures auditability within the cluster and an understanding
    of who might have deployed or deleted any objects in a cluster.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应为将应用程序部署到 Kubernetes 集群的 CI/CD 工具使用特定的服务帐户。这确保了集群内的审计性，并且能够理解谁可能已经在集群中部署或删除了任何对象。
- en: If you’re still using Helm v2 to deploy applications, the default service account
    is Tiller, deployed to `kube-system`. It is better to deploy Tiller into each
    namespace with a service account specifically for Tiller that is scoped for that
    namespace. In the CI/CD tool that calls the Helm install/upgrade command, as a
    prestep, initialize the Helm client with the service account and the specific
    namespace for the Deployment. The service account name can be the same for each
    namespace, but the namespace should be specific. It is advised to move to Helm
    v3 because one of its core principles is that Tiller is no longer needed to run
    in a cluster. The new architecture is completely client based and uses the RBAC
    access of the user calling the Helm commands. This is in alignment with the preferred
    approach of client-based tooling to the Kubernetes API.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您仍在使用 Helm v2 来部署应用程序，默认服务帐户是部署到`kube-system`的 Tiller。最好将 Tiller 部署到每个命名空间，并为该命名空间专门指定一个用于
    Tiller 的服务帐户。在调用 Helm install/upgrade 命令的 CI/CD 工具中，作为预步骤，使用服务帐户和部署的特定命名空间初始化
    Helm 客户端。每个命名空间可以使用相同的服务帐户名称，但命名空间应特定。建议迁移到 Helm v3，因为其核心原则之一是不再需要在集群中运行 Tiller。新架构完全基于客户端，并使用调用
    Helm 命令的用户的 RBAC 访问权限。这与客户端基础工具对 Kubernetes API 的首选方法一致。
- en: Limit any applications that require `watch` and `list` on the Secrets API. This
    basically allows the application or the person who deployed the pod to view the
    secrets in that namespace. If an application needs to access the Secrets API for
    specific secrets, limit using `get` on any specific secrets that the application
    needs to read outside of those that it is directly assigned.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制任何需要在**Secrets API**上执行`watch`和`list`操作的应用程序。这基本上允许应用程序或部署 Pod 的人查看该命名空间中的秘密。如果应用程序需要访问特定秘密的
    Secrets API，则限制其仅使用`get`操作，而不是直接分配的那些秘密之外的其他秘密。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Principles for developing applications for cloud native delivery is a topic
    for another day, but it is universally accepted that strict separation of configuration
    from code is a key principle for success. With native objects for nonsensitive
    data, the ConfigMap API, and for sensitive data, the Secrets API, Kubernetes can
    now manage this process in a declarative approach. As more and more critical data
    is represented and stored natively in the Kubernetes API, it is critical to secure
    access to those APIs through proper gated security processes such as RBAC and
    integrated authentication systems.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了云原生交付应用程序的原则是另一个话题，但普遍认为，严格将配置与代码分离是成功的关键原则。通过适用于非敏感数据的本地对象，如 ConfigMap API，以及敏感数据的
    Secrets API，Kubernetes 现在可以以声明性方法管理这一过程。随着越来越多的关键数据在 Kubernetes API 中原生表示和存储，通过适当的门控安全流程（如
    RBAC 和集成认证系统），保护对这些 API 的访问至关重要。
- en: As you’ll see throughout the rest of this book, these principles permeate every
    aspect of the proper deployment of services into a Kubernetes platform to build
    a stable, reliable, secure, and robust system.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将在本书的其余部分中看到的那样，这些原则渗透到将服务正确部署到 Kubernetes 平台的每个方面，以构建一个稳定、可靠、安全和健壮的系统。
