- en: Chapter 2\. Declarative Kubernetes Cluster Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create a CRD, you can provide a custom controller with the proper
    logic to maintain the associated objects. In this way, you can extend the Kubernetes
    declarative API to embrace new kinds of objects. This is exactly the approach
    Cluster API uses to manage Kubernetes: it provides resources to represent Kubernetes
    clusters and the infrastructure itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API is a project created by the Kubernetes Cluster Lifecycle special
    interest group (SIG) to provide a consistent, modular platform for declarative
    Kubernetes cluster management. Leveraging kubeadm, Cluster API uses Kubernetes-style
    APIs to create, configure, and manage Kubernetes clusters and their infrastructure
    for a variety of deployment environments and providers.
  prefs: []
  type: TYPE_NORMAL
- en: Goals of Cluster API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kubernetes Cluster Lifecycle SIG created Cluster API to make cluster lifecycle
    management easier. Although Kubernetes itself has APIs for orchestrating containers
    regardless of the environment or provider, it doesn’t provide a consistent way
    to create new machines on arbitrary infrastructure. This means cluster lifecycle
    has to be handled uniquely depending on the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary charter of the Kubernetes Cluster Lifecycle SIG is to make it easier
    to create, manage, upgrade, and retire Kubernetes clusters. The group decided
    to develop Cluster API as a framework for managing Kubernetes infrastructure across
    environments, with several goals in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Declarative cluster lifecycle management
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API’s declarative approach for managing Kubernetes cluster lifecycle
    makes it easy to integrate with GitOps, a declarative operations framework that
    applies DevOps application development practices to infrastructure automation.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure abstraction
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API provides a consistent way to provision and maintain cluster infrastructure
    across different environments, both in the cloud and on premises. This means managing
    not just compute and storage but also networking and security, including implementing
    security best practices such as subnets and bastion hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with existing components
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API is designed to work with existing components that rely on kubeadm,
    cloud-init, and other tools to initialize a cluster rather than reinventing and
    reimplementing what already works. Even the Cluster API approach to managing cluster
    infrastructure is familiar, as it’s designed to resemble the way developers manage
    workloads on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Easy adoption
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API is designed to be adopted as quickly or as slowly as necessary.
    A team can adopt Cluster API all at once or in stages, or they can even choose
    to adopt only part of Cluster API.
  prefs: []
  type: TYPE_NORMAL
- en: A modular approach
  prefs: []
  type: TYPE_NORMAL
- en: To be adaptable to different deployment environments and infrastructure providers,
    Cluster API uses a modular, extensible architecture. The goal is to provide consistent,
    repeatable operations that work the same way even on unforeseen infrastructure.
    A modular approach also means standardizing default operations for common operations
    and the ability to use alternative implementations when needed. For example, although
    Cluster API leverages kubeadm, it can use other bootstrap providers.
  prefs: []
  type: TYPE_NORMAL
- en: The overall goal of Cluster API is to provide a centralized, consistent set
    of tools that make it possible to manage multiple Kubernetes clusters in different
    environments without having to worry about the underlying infrastructure and without
    having to build large assortments of custom tools.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cluster API uses modular, interchangeable components as the basis for a complete
    cluster infrastructure management platform that automates difficult cluster lifecycle
    management tasks such as creating, scaling, repairing, and upgrading a cluster.
    In essence, Cluster API is a modular abstraction layer that makes it possible
    to treat a variety of objects on different infrastructure substrates consistently.
    The core components of Cluster API remain the same from one environment to another,
    while the modular parts of Cluster API adapt to each environment:'
  prefs: []
  type: TYPE_NORMAL
- en: CRDs model the VMs, physical servers, and other cluster components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providers implement the correct capabilities and services for different infrastructure
    environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster API manages these resources declaratively, meaning that instead of specifying
    how to create and manage the infrastructure, you need only to define the desired
    state of the cluster. Instead of a set of commands, the code becomes a repeatable
    specification that you can reuse for multiple deployments.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2-1](#fig_1_cluster_api_modular_architecture) shows how providers implement
    the modular approach to Cluster API architecture, making it possible to tailor
    cluster lifecycle management to any infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cluster API modular architecture](assets/cdkm_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. Cluster API modular architecture
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Custom Resource Definitions and Controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as Kubernetes provides abstractions for objects such as nodes, namespaces,
    and pods, Cluster API uses Kubernetes CRDs to represent the infrastructure and
    configuration that support a Kubernetes cluster. Each CRD is a declarative specification
    for a component of infrastructure. Cluster API introduces several CRDs for managing
    cluster infrastructure, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cluster`'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies cluster details like API version, the IP address blocks for pods and
    services, the API endpoints, and the service domains
  prefs: []
  type: TYPE_NORMAL
- en: '`ControlPlane`'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the configuration and lifecycle of the control plane nodes
  prefs: []
  type: TYPE_NORMAL
- en: '`Machine`'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the configuration of an individual node
  prefs: []
  type: TYPE_NORMAL
- en: '`MachineHealthCheck`'
  prefs: []
  type: TYPE_NORMAL
- en: Determines when a node is unhealthy and needs to be replaced
  prefs: []
  type: TYPE_NORMAL
- en: '`MachineSet`'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the desired number of `Machine` resources to maintain in a specific
    group
  prefs: []
  type: TYPE_NORMAL
- en: '`MachineDeployment`'
  prefs: []
  type: TYPE_NORMAL
- en: Manages changes to `Machines` by destroying and replacing them as needed
  prefs: []
  type: TYPE_NORMAL
- en: '`MachineClass`'
  prefs: []
  type: TYPE_NORMAL
- en: Makes it easier to reuse machine specifications across `Machines`, `MachineSets`,
    and `MachineDeployments`
  prefs: []
  type: TYPE_NORMAL
- en: Each CRD has a corresponding *controller*, a service that maintains the specified
    state. A controller ensures that the state of its corresponding object and the
    state of the world outside the object both match the desired state. This is called
    *reconciling* the actual state with the specification. The Cluster API Core Manager,
    also known as the Controller Manager, uses these controllers when managing the
    lifecycle of each cluster.
  prefs: []
  type: TYPE_NORMAL
- en: When you specify the characteristics of a cluster, control plane, or machine,
    you do so by creating a YAML file called a *manifest*, which follows the schema
    defined in the corresponding CRD. For every parameter defined in the CRD, the
    YAML file provides a value that tells Cluster API how to create the custom resource.
  prefs: []
  type: TYPE_NORMAL
- en: Providers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Providers are modules that make Cluster API work in different environments.
    There are three types of providers:'
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure providers
  prefs: []
  type: TYPE_NORMAL
- en: Create and access infrastructure and resources on specific environments and
    infrastructure hosts
  prefs: []
  type: TYPE_NORMAL
- en: Control plane provider
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a Kubernetes control plane and starts its required services
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap provider
  prefs: []
  type: TYPE_NORMAL
- en: Generates a script that brings up a Kubernetes node on a machine, which encapsulates
    configuration logic for initializing different distributions of Kubernetes nodes
    like kubeadm, k8s, microk8s, and so forth
  prefs: []
  type: TYPE_NORMAL
- en: With Cluster API, you can use a single declarative API to deploy a pool of VMs
    or work directly on bare metal, using the correct commands and services for your
    chosen provider, and bring up a Kubernetes cluster. Each provider implements the
    best practices for the environment for which it’s designed.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API providers let you use the same declarative specifications to bring
    up similar clusters in different environments or on different infrastructure hosts.
    [Figure 2-2](#fig_2_how_crds_and_providers_abstract_system_resources_a) shows
    how CRDs and providers create abstractions that make it possible to manage resources
    and infrastructure consistently across environments.
  prefs: []
  type: TYPE_NORMAL
- en: '![How CRDs and providers abstract system resources and infrastructure](assets/cdkm_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. How CRDs and providers abstract system resources and infrastructure
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The ability to work consistently across different types of infrastructure makes
    it easy to work across deployments on premises and in public clouds, private clouds,
    or edge locations. This provides consistency regardless of substrate, which is
    especially important in diverse geographical regions with different providers.
  prefs: []
  type: TYPE_NORMAL
