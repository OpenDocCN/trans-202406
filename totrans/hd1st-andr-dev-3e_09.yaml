- en: 'Chapter 7\. Safe Args: *Passing Information*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。安全参数：*传递信息*
- en: '![image](Images/f0257-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0257-01.png)'
- en: '**Sometimes fragments need extra information to work properly.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**有时片段需要额外的信息才能正常工作。**'
- en: If a fragment shows details of a contact, for example, it needs to know which
    contact to display. But what if this information need extra information to work
    properly.**comes from another fragment**? In this chapter, you’ll **build on your
    navigation know-how** by learning **how to pass data between fragments**. You’ll
    find out **how to add arguments** to navigation destinations so they can receive
    the information they need. You’ll meet **the Safe Args plug-in**, and learn how
    to use it to **write type-safe code**. Finally, you’ll discover **how to manipulate
    the back stack**, and take control of back button behavior. Read on—there’s no
    going back…
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个片段显示联系人的详细信息，例如需要显示哪个联系人。但是，如果这些信息来自另一个片段，它可能需要额外的信息才能正常工作。在这一章中，你将通过学习如何在片段之间传递数据，进一步建立你的导航技能。你将了解如何向导航目标添加参数，以便它们可以接收所需的信息。你将遇到**安全参数插件**，并学习如何使用它来编写类型安全的代码。最后，你将发现如何操作返回栈，并控制返回按钮的行为。继续阅读，一切不可逆转...
- en: The Secret Message app navigates between fragments
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 秘密消息应用程序在片段之间导航
- en: 'In the previous chapter, you learned how to use the Navigation component to
    navigate between two fragments. You used this knowledge to build the first half
    of the Secret Message app: an app that takes a message the user enters, and encrypts
    it.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您已经学会如何使用导航组件在两个片段之间导航。您将此知识用于构建秘密消息应用程序的第一部分：一个接收用户输入的消息并对其进行加密的应用程序。
- en: The current version of the app uses a fragment named `WelcomeFragment` to display
    some introductory text. When the user clicks on its Start button, the fragment
    navigates to a second fragment named `MessageFragment`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的当前版本使用一个名为`WelcomeFragment`的片段来显示一些简介文字。当用户点击其开始按钮时，该片段导航到名为`MessageFragment`的第二个片段。
- en: '`MessageFragment` includes an edit text that lets the user enter her message.
    It also features a Next button, which the user clicks on to encrypt the message.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageFragment`包含一个编辑文本框，让用户输入她的消息。它还包括一个Next按钮，用户点击该按钮以加密消息。'
- en: 'Here’s a reminder of what the app currently looks like:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当前应用的外观提醒：
- en: '![image](Images/f0258-01.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0258-01.png)'
- en: In the current version of the app, nothing happens when the user clicks on `MessageFragment`’s
    Next button. In this chapter, we’re going to finish building the app so the user’s
    encrypted message gets displayed in a new fragment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的当前版本中，当用户点击`MessageFragment`的Next按钮时，什么也不会发生。在本章中，我们将完成应用程序的构建，以便用户的加密消息在一个新的片段中显示。
- en: MessageFragment needs to pass the message to a new fragment
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MessageFragment需要将消息传递给新的片段
- en: 'We’re going to add a new fragment to the app named `EncryptFragment`. This
    fragment will display the user’s encrypted message, and will look like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向应用程序添加一个名为`EncryptFragment`的新片段。该片段将显示用户加密的消息，并且外观将如下所示：
- en: '![image](Images/f0259-01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0259-01.png)'
- en: '`EncryptFragment` will get the user’s message from `MessageFragment`. When
    the user clicks on `MessageFragment`’s Next button, the app will navigate to `EncryptFragment`,
    and pass it the text. This fragment will then encrypt the text, and display the
    result:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`EncryptFragment`将从`MessageFragment`获取用户的消息。当用户点击`MessageFragment`的Next按钮时，应用程序将导航到`EncryptFragment`并将文本传递给它。然后，该片段将加密文本并显示结果：'
- en: '![image](Images/f0259-02.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0259-02.png)'
- en: To make this work, we need to be able to pass data between fragments. The best
    way of doing this is with a Gradle plug-in called **Safe Args**, which is an extra
    part of the Navigation component. It gives you a way of passing data between fragments
    in a way that’s type-safe. This prevents you from accidentally passing the wrong
    type of data, which might cause runtime errors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这个工作，我们需要能够在片段之间传递数据。最佳方法是使用名为**Safe Args**的Gradle插件，它是导航组件的额外部分。它提供了一种类型安全地在片段之间传递数据的方法。这可以防止您意外传递错误类型的数据，从而可能导致运行时错误。
- en: You’ll learn more about using Safe Args as we continue building the Secret Message
    app. For now, let’s look at the steps we’ll go through.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续构建秘密消息应用程序，您将了解更多有关使用Safe Args的信息。现在，让我们看看我们将要经历的步骤。
- en: Here’s what we’re going to do
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们要做的事情如下
- en: 'Here are the steps we’ll go through to build the second half of the Secret
    Message app:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将完成秘密消息应用程序后半部分的步骤：
- en: '**Create and display EncryptFragment.**'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建和显示EncryptFragment。**'
- en: We’ll create a new fragment named `EncryptFragment`, and navigate to it when
    the user clicks on the Next button in `MessageFragment`’s layout.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`EncryptFragment`的新片段，并在用户在`MessageFragment`布局中点击“下一步”按钮时导航到它。
- en: '![image](Images/f0260-01.png)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0260-01.png)'
- en: '**Pass the user’s message to EncryptFragment.**'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将用户的消息传递给`EncryptFragment`。**'
- en: We’ll use Safe Args to pass the user’s message from `MessageFragment` to `EncryptFragment`.
    `EncryptFragment` will then display the encrypted message.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用Safe Args将用户的消息从`MessageFragment`传递到`EncryptFragment`。然后，`EncryptFragment`将显示加密后的消息。
- en: '![image](Images/f0260-02.png)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0260-02.png)'
- en: '**Modify the app’s back button behavior.**'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修改应用程序的返回按钮行为。**'
- en: Finally, we’ll update the app so that when the user presses the device back
    button while `EncryptFragment` is displayed, the app goes back to `WelcomeFragment`.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，我们将更新应用程序，以便用户在显示`EncryptFragment`时按设备返回按钮时，应用程序返回到`WelcomeFragment`。
- en: '![image](Images/f0260-03.png)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0260-03.png)'
- en: '![image](Images/f0260-04.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0260-04.png)'
- en: Let’s get started.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Create EncryptFragment…
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`EncryptFragment`…
- en: '![image](Images/f0261-01.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0261-01.png)'
- en: We’re going to use `EncryptFragment` to display an encrypted version of the
    user’s message. Create this fragment by highlighting the *com.hfad.secretmessage*
    package in the *app/src/main/java* folder, going to the File menu, and choosing
    New→Fragment→Fragment (Blank). Name the fragment “EncryptFragment” and give the
    layout a name of “fragment_encrypt”. Make sure the language is set to Kotlin,
    then click on the Finish button.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`EncryptFragment`来显示用户消息的加密版本。通过在*app/src/main/java*文件夹中突出显示*com.hfad.secretmessage*包，转到“文件”菜单，选择“新建→片段→空白片段”。将片段命名为“EncryptFragment”，布局命名为“fragment_encrypt”。确保语言设置为Kotlin，然后单击“完成”按钮。
- en: …and update its layout
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: …并更新其布局
- en: We’re going to update `EncryptFragment`’s layout so that it includes two text
    views. The first will display a `String` resource named `encrypt_text` (we added
    this to *strings.xml* in the previous chapter), and the second will display the
    encrypted message.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`EncryptFragment`的布局，以包含两个文本视图。第一个将显示名为`encrypt_text`的`String`资源（我们在前一章节中已将其添加到*strings.xml*），第二个将显示加密后的消息。
- en: 'Open the layout file *fragment_encrypt.xml* and update its contents so it matches
    the code below:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打开布局文件*fragment_encrypt.xml*并更新其内容，使其与下面的代码匹配：
- en: '![image](Images/f0261-02.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0261-02.png)'
- en: Update EncryptFragment.kt
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新`EncryptFragment.kt`
- en: We also need to update `EncryptFragment`’s Kotlin code to make sure that Android
    Studio hasn’t added any unnecessary extra code to it that might stop it from working
    in the way we want.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新`EncryptFragment`的Kotlin代码，以确保Android Studio没有添加任何可能阻止其按预期工作的不必要额外代码。
- en: 'Go to the *com.hfad.secretmessage* package in the *app/src/main/java* folder
    and open the file *EncryptFragment.kt*. Then replace the code that Android Studio
    has generated with the code shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 转到*app/src/main/java*文件夹中的*com.hfad.secretmessage*包，并打开文件*EncryptFragment.kt*。然后用下面显示的代码替换Android
    Studio生成的代码：
- en: '![image](Images/f0262-02.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0262-02.png)'
- en: The above code is everything that *EncryptFragment.kt* needs to define a basic
    fragment. Just like the other fragment code you’ve seen, it extends the `Fragment`
    class, and overrides its `onCreateView()` method. This method inflates the fragment’s
    layout, and returns its root view.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是*EncryptFragment.kt*需要定义基本片段的全部内容。就像你看到的其他片段代码一样，它扩展了`Fragment`类，并覆盖了其`onCreateView()`方法。此方法将充气片段的布局，并返回其根视图。
- en: We’ve now finished writing all the layout and Kotlin code that `EncryptFragment`
    needs. Next, we’ll make sure that `MessageFragment` can navigate to it by adding
    it to the navigation graph.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了`EncryptFragment`所需的所有布局和Kotlin代码编写。接下来，我们将确保`MessageFragment`能够通过将其添加到导航图中进行导航。
- en: '![image](Images/f0262-03.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0262-03.png)'
- en: Add EncryptFragment to the navigation graph
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将`EncryptFragment`添加到导航图
- en: As you already know, the navigation graph holds details of the app’s destinations,
    and the possible paths you can take to navigate to them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经知道的那样，导航图保存了应用程序目标的详细信息，以及导航到这些目标的可能路径。
- en: To add `EncryptFragment` to the navigation graph, open *nav_graph.xml*, click
    on the New Destination button in the design editor, and when prompted, choose
    the “fragment_encrypt” option. This adds the fragment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`EncryptFragment`添加到导航图中，请打开*nav_graph.xml*，在设计编辑器中单击“新目标”按钮，然后在提示时选择“fragment_encrypt”选项。这将添加该片段。
- en: '![image](Images/f0263-02.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0263-02.png)'
- en: We also need to add a new action so that `MessageFragment` can navigate to `EncryptFragment`.
    Do this by hovering your mouse pointer over `MessageFragment` and drawing an action
    arrow from its right edge to `EncryptFragment`. Make sure the action has an ID
    of “action_messageFragment_to_encryptFragment” so that it matches the code in
    this book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加一个新的操作，以便`MessageFragment`可以导航到`EncryptFragment`。请将鼠标指针悬停在`MessageFragment`上，并从其右边缘绘制一个动作箭头，指向`EncryptFragment`。确保该操作具有
    ID “action_messageFragment_to_encryptFragment”，以便与本书中的代码匹配。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Don’t worry if you find this a bit too fiddly. We’ll show you the full code
    on the next page so if you prefer, you can update that instead.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这有点复杂，不要担心。我们将在下一页显示完整的代码，这样你就可以选择更新它。
- en: 'After you’ve made these changes, the navigation graph should look something
    like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做出这些更改后，导航图应该看起来像这样：
- en: '![image](Images/f0263-04.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0263-04.png)'
- en: Let’s see what the underlying XML looks like.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看底层 XML 的样子。
- en: The updated nav_graph.xml code
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新后的 nav_graph.xml 代码
- en: 'Each time you update the navigation graph, any changes are added to the underlying
    XML. The new code looks like this (the changes are in bold):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每次更新导航图时，任何更改都会添加到底层的 XML 中。新代码看起来像这样（更改部分用粗体表示）：
- en: '![image](Images/f0264-02.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0264-02.png)'
- en: Let’s use the new action to navigate to `EncryptFragment`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用新的操作导航到`EncryptFragment`。
- en: MessageFragment needs to navigate to EncryptFragment
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MessageFragment 需要导航到 EncryptFragment
- en: We need to make `MessageFragment` navigate to `EncryptFragment` when the user
    clicks its Next button. To enable this, we’ll add an `OnClickListener` to the
    button, which will include the navigation code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`MessageFragment`的“下一步”按钮时，我们需要使其导航到`EncryptFragment`。为此，我们将向按钮添加一个`OnClickListener`，其中包含导航代码。
- en: '![image](Images/f0265-02.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0265-02.png)'
- en: As you learned in the previous chapter, you navigate from one fragment to another
    by getting a navigation controller, and passing it a navigation action. The navigation
    controller uses this action to display the correct fragment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前一章中学到的那样，通过获取导航控制器并传递导航操作，可以从一个片段导航到另一个片段。导航控制器使用此操作来显示正确的片段。
- en: 'You’re already familiar with all the code needed to do this, so update *MessageFragment.kt*
    so that it includes the changes shown here (in bold):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经熟悉完成这一点所需的所有代码，因此更新 *MessageFragment.kt*，以包括此处显示的更改（用粗体显示）：
- en: '![image](Images/f0265-03.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0265-03.png)'
- en: Let’s take the app for a test drive and make sure this works.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一次应用程序测试，确保它可以正常工作。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) 测试驾驶'
- en: When we run the app, `MainActivity` is launched, and `WelcomeFragment` is displayed.
    When we click on its Start button, the app navigates to `MessageFragment` as before.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，启动`MainActivity`，并显示`WelcomeFragment`。当我们点击其“开始”按钮时，应用程序像以前一样导航到`MessageFragment`。
- en: When we enter a message in `MessageFragment`’s edit text view and click on its
    Next button, the app navigates to `EncryptFragment`. It doesn’t do anything with
    the message we entered.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`MessageFragment`的编辑文本视图中输入消息并点击其“下一步”按钮时，应用程序将导航到`EncryptFragment`。它不会处理我们输入的消息。
- en: '![image](Images/f0266-02.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0266-02.png)'
- en: '`EncryptFragment` doesn’t display an encrypted message because the code we’ve
    written so far simply navigates to this fragment. It doesn’t pass the message
    to the new fragment, so `EncryptFragment` can’t do anything with it.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们目前编写的代码仅导航到此片段，没有将消息传递给新片段，因此`EncryptFragment`不会显示加密消息，因为它无法处理该消息。
- en: To pass the message from `MessageFragment` to `EncryptFragment`, we’re going
    to use Safe Args. As you learned earlier, this is an extra part of the Navigation
    component that lets you pass arguments to destinations in a type-safe way.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将消息从`MessageFragment`传递到`EncryptFragment`，我们将使用 Safe Args。正如你之前学到的，这是导航组件的额外部分，允许你以类型安全的方式向目标传递参数。
- en: Let’s find out how this is done.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出如何做到这一点。
- en: Add Safe Args to the build.gradle files
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Safe Args 添加到 build.gradle 文件
- en: '![image](Images/f0267-01.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0267-01.png)'
- en: Before we can start using Safe Args, we need to update the project and app *build.gradle*
    files. Let’s do this now.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Safe Args 之前，我们需要更新项目和应用程序的 *build.gradle* 文件。现在让我们来做这件事。
- en: Add a classpath to the *project* build.gradle file
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 *project* build.gradle 文件中添加一个类路径
- en: You first need to add a new classpath to the project’s *build.gradle* file specifying
    that you want to use the Safe Args plug-in. The classpath includes a version number,
    which needs to match the one that you’re using for the main Navigation component
    library.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要在项目的 *build.gradle* 文件中添加一个新的类路径，指定你想要使用 Safe Args 插件。该类路径包括一个版本号，需要与主导航组件库的版本号匹配。
- en: In the Secret Message app, we’re using a variable named `nav_version` to make
    sure that these version numbers match, so we’ll reference this in the classpath.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Secret Message 应用中，我们使用一个名为 `nav_version` 的变量来确保这些版本号匹配，因此我们将在类路径中引用它。
- en: 'Open the file *SecretMessage/build.gradle*, and add the classpath (in bold)
    to the `dependencies` section:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *SecretMessage/build.gradle* 文件，并在 `dependencies` 部分添加**粗体字**的类路径：
- en: '![image](Images/f0267-02.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0267-02.png)'
- en: Add the plug-in to the app build.gradle file
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将插件添加到应用的 `build.gradle` 文件中
- en: 'Next, you need to tell Gradle that you’re using the Safe Args plug-in by adding
    a line to the app *build.gradle* file. Open the file *SecretMessage/app/build.gradle*,
    and add the line in bold to the `plug-ins` section:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要告诉 Gradle 你正在使用 Safe Args 插件，方法是在应用的 *build.gradle* 文件的 `plug-ins` 部分添加一行**粗体字**：
- en: '![image](Images/f0267-03.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0267-03.png)'
- en: Once you’ve made these changes, click on the Sync Now option that appears at
    the top of the code editor. This syncs the changes you’ve made with the rest of
    your project.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些更改后，点击代码编辑器顶部出现的“立即同步”选项。这将把你所做的更改与项目的其余部分同步。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that you sync your changes each time you update the build.gradle files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 确保每次更新 *build.gradle* 文件后同步你的更改。
- en: Now that the app includes Safe Args, we can use it to pass a message from `MessageFragment`
    to `EncryptFragment`. We’ll do this next.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用包含了 Safe Args，我们可以使用它来从 `MessageFragment` 传递消息到 `EncryptFragment`。我们接下来就要做这个。
- en: EncryptFragment needs to accept a String argument
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`EncryptFragment` 需要接受一个 `String` 参数'
- en: The first thing we need to do is specify that `EncryptFragment` can accept the
    user’s message. We’ll do this by adding a `String` argument to this fragment in
    the navigation graph; `MessageFragment` will then use this argument to pass the
    user’s message (a `String`) to `EncryptFragment`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要指定 `EncryptFragment` 可以接受用户的消息。我们将在导航图中为此片段添加一个 `String` 参数；然后 `MessageFragment`
    将使用此参数将用户的消息（一个 `String`）传递给 `EncryptFragment`。
- en: '![image](Images/f0268-01.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0268-01.png)'
- en: 'To add the argument, open the file *nav_graph.xml* from the *app/src/main/res/nav_graph.xml*.
    Then select `EncryptFragment` in the navigation graph design editor, go to the
    Attributes panel, and click on the “+” button that appears next to the Arguments
    section:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加参数，请打开 *app/src/main/res/nav_graph.xml* 中的文件 *nav_graph.xml*。然后在导航图设计编辑器中选择
    `EncryptFragment`，转到属性面板，并点击出现在参数部分旁边的“+”按钮：
- en: '![image](Images/f0268-02.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0268-02.png)'
- en: 'When you click on the “+” button, an Add Argument window appears, which you
    use to add details about the argument. Here, we want `EncryptFragment` to accept
    a `String` argument for the user’s message, so name the argument “message”, select
    “String” as its type, and click on the Add button. This creates the new argument,
    and adds it to the Arguments section of the Attributes panel:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击“+”按钮时，会出现“添加参数”窗口，用于添加关于参数的详细信息。在这里，我们希望 `EncryptFragment` 接受一个 `String`
    类型的参数作为用户的消息，所以将参数命名为“message”，选择类型为“String”，然后点击“添加”按钮。这将创建新的参数，并将其添加到属性面板的参数部分：
- en: '![image](Images/f0268-03.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0268-03.png)'
- en: The updated nav_graph.xml code
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新后的 `nav_graph.xml` 代码
- en: 'When you add an argument to a navigation graph, a new `<argument>` element
    gets added to the underlying XML. Here’s the updated code for *nav_graph.xml*
    (the new code is in bold):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向导航图添加一个参数时，会在底层 XML 中添加一个新的 `<argument>` 元素。以下是 *nav_graph.xml* 的更新代码（新增的代码用粗体标出）：
- en: '![image](Images/f0269-02.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0269-02.png)'
- en: MessageFragment needs to pass a message to EncryptFragment
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`MessageFragment` 需要将消息传递给 `EncryptFragment`'
- en: Now that we’ve added a `String` argument to `EncryptFragment`, `MessageFragment`
    can use it to pass along the user’s message when it navigates to this fragment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在 `EncryptFragment` 中添加了一个 `String` 参数，`MessageFragment` 可以在导航到该片段时使用它传递用户的消息。
- en: 'As you already know, you navigate from one destination to another by passing
    a navigation action to the navigation controller. The navigation controller then
    uses this action to display the correct fragment. `MessageFragment`, for example,
    uses the following code to navigate to `EncryptFragment` when its button is clicked:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经知道的那样，您通过将导航操作传递给导航控制器从一个目的地导航到另一个目的地。例如，当其按钮被点击时，`MessageFragment`使用以下代码导航到`EncryptFragment`：
- en: '![image](Images/f0270-02.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0270-02.png)'
- en: You can pass arguments to navigation actions
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可以向导航操作传递参数
- en: If you want to pass an argument to a destination, you do so by passing its value
    to the navigation action.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想向目的地传递参数，只需将其值传递给导航操作即可。
- en: 'When the navigation controller receives an action that includes an argument,
    it navigates to the appropriate fragment, and passes along the argument’s value.
    In the Secret Message app, for example, we can get `MessageFragment` to pass the
    user’s message to `EncryptMessage` (via the navigation controller) by including
    it in the navigation action. It will work like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当导航控制器接收到包含参数的操作时，它将导航到适当的片段，并传递参数的值。例如，在秘密消息应用中，我们可以通过将用户的消息包含在导航操作中，使`MessageFragment`传递给`EncryptMessage`（通过导航控制器）。它的工作原理如下：
- en: '![image](Images/f0270-03.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0270-03.png)'
- en: You can add arguments to navigation actions using a `**Directions**` class.
    Let’s find out what this is.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**Directions**类向导航操作添加参数。让我们来看看这是什么。
- en: Safe Args generates Directions classes
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Safe Args会生成Directions类
- en: '`Directions` classes are used to pass arguments to destinations. When you enable
    the Safe Args plug-in, Android Studio uses it to generate a `Directions` class
    **for each fragment you can navigate from**. In the Secret Message app, for example,
    you can navigate from `WelcomeFragment` and `MessageFragment` to other destinations,
    so the Safe Args plug-in generates a `Directions` class for each of these fragments;
    it generates a class named `WeclomeFragmentDirections` for `WelcomeFragment`,
    and one named `MessageFragmentDirections` gets generated for `MessageFragment`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Directions`类用于向目的地传递参数。当您启用Safe Args插件时，Android Studio会使用它为您可以从中导航的每个片段生成一个`Directions`类**（译者注：保留原文示例的内容，不要重复输出）**。'
- en: '![image](Images/f0271-02.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0271-02.png)'
- en: Each fragment uses its own `Directions` class to navigate with. `MessageFragment`,
    for example, needs to use the `MessageFragmentDirections` class if it wants to
    navigate elsewhere, and pass an argument.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个片段都使用自己的`Directions`类进行导航。例如，如果`MessageFragment`要导航到其他位置并传递参数，则需要使用`MessageFragmentDirections`类。
- en: Use a Directions class to add arguments to actions
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Directions类向操作添加参数
- en: Each `Directions` class includes a generated method for each of the fragment’s
    actions. `MessageFragment`, for example, has an action with the ID “action_messageFragment_to_encryptFragment”,
    so the `MessageFragmentDirections` class includes a corresponding method named
    `actionMessageFragmentToEncryptFragment()`. And because `EncryptFragment` accepts
    a `String`, the generated method includes a `String` argument.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Directions`类都包含片段操作的生成方法。例如，`MessageFragment`具有ID为“action_messageFragment_to_encryptFragment”的操作，因此`MessageFragmentDirections`类包含一个名为`actionMessageFragmentToEncryptFragment()`的相应方法。由于`EncryptFragment`接受一个`String`，生成的方法包括一个`String`参数。
- en: '![image](Images/f0271-03.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0271-03.png)'
- en: 'You use the generated methods to navigate to destinations. To navigate from
    `MessageFragment` to `EncryptFragment` and pass it a `String` message, for example,
    you’d add the following code to `MessageFragment`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用生成的方法导航到目的地。例如，要从`MessageFragment`导航到`EncryptFragment`并传递`String`消息，您可以将以下代码添加到`MessageFragment`中：
- en: '![image](Images/f0271-04.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0271-04.png)'
- en: Let’s add this code now.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加这段代码。
- en: Update the MessageFragment.kt code
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新MessageFragment.kt代码
- en: 'Here’s the updated code for `MessageFragment`; make sure you add the changes
    (in bold) to *MessageFragment.kt*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的`MessageFragment`代码；确保将更改（用粗体显示）添加到*MessageFragment.kt*中：
- en: '![image](Images/f0272-02.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0272-02.png)'
- en: That’s everything `MessageFragment` needs to pass the user’s message to `EncryptFragment`.
    Next, we need to make `EncryptFragment` pick it up and use it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`MessageFragment`需要的一切，以便将用户的消息传递给`EncryptFragment`。接下来，我们需要让`EncryptFragment`接收并使用它。
- en: EncryptFragment needs to get the argument’s value
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EncryptFragment 需要获取参数的值
- en: As you know, `MessageFragment` uses a `String` argument to pass the user’s message
    to `EncryptFragment`. `EncryptFragment` needs to retrieve this value so that it
    can display an encrypted version of it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，`MessageFragment` 使用 `String` 参数将用户的消息传递给 `EncryptFragment`。`EncryptFragment`
    需要检索此值，以便显示其加密版本。
- en: 'Fragments can retrieve arguments using an `**Args**` class. When you enable
    the Safe Args plug-in, Android Studio uses it to generate an `Args` class **for
    each fragment that accepts arguments**. In the Secret Message app, for example,
    `EncryptFragment` accepts a `String` argument, so the Safe Args plug-in generates
    an `Args` class for it named `EncryptFragmentArgs`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Fragments 可以使用 `**Args**` 类检索参数。启用 Safe Args 插件后，Android Studio 用于为接受参数的每个片段生成
    `Args` 类。例如，在秘密消息应用程序中，`EncryptFragment` 接受一个 `String` 参数，因此 Safe Args 插件会为其生成一个名为
    `EncryptFragmentArgs` 的 `Args` 类：
- en: '![image](Images/f0273-02.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0273-02.png)'
- en: '**The Safe Args plug-in generates Directions and Args classes. Use the Directions
    class to pass arguments to a destination. Use the Args class to retrieve them.**'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Safe Args 插件生成 Directions 和 Args 类。使用 Directions 类向目标传递参数，使用 Args 类检索它们。**'
- en: Use an Args class to retrieve arguments
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Args 类来检索参数。
- en: 'Each `Args` class includes a `**fromBundle()**` method that you use to retrieve
    any arguments that have been passed to the fragment. In the Secret Message app,
    for example, `EncryptFragment` accepts a `String` argument named `message`, so
    you can get the value of this argument using:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `Args` 类都包含一个 `**fromBundle()**` 方法，用于检索传递给片段的任何参数。例如，在秘密消息应用程序中，`EncryptFragment`
    接受名为 `message` 的 `String` 参数，因此您可以使用以下方式获取此参数的值：
- en: '![image](Images/f0273-03.png)![image](Images/f0273-04.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0273-03.png)![image](Images/f0273-04.png)'
- en: This assigns a `String` object (the value of the argument) to `message`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把一个 `String` 对象（参数的值）赋给 `message`。
- en: We need to encrypt the message
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们需要加密消息。
- en: Now that we know how to make `EncryptFragment` retrieve the user’s message,
    we can encrypt it and display the result.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何让 `EncryptFragment` 检索用户的消息，我们可以对其进行加密并显示结果。
- en: 'We’ll encrypt the message using Kotlin’s `reversed()` method, which simply
    reverses the order of a `String`’s letters. The code looks like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Kotlin 的 `reversed()` 方法来加密消息，该方法简单地颠倒字符串的字母顺序。代码如下所示：
- en: Note
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the real world, you’d want to use a much more advanced encryption technique.
    This is just an example.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，您可能想要使用更先进的加密技术。这只是一个示例。
- en: '[PRE0]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ll show you the full `EncryptFragment` code on the next page.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一页展示完整的 `EncryptFragment` 代码。
- en: The full code for EncryptFragment.kt
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EncryptFragment.kt 的完整代码
- en: 'Here’s the complete code for *EncryptFragment.kt*; update its code so that
    it includes the changes below:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *EncryptFragment.kt* 的完整代码；更新其代码以包括以下更改：
- en: '![image](Images/f0274-02.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0274-02.png)'
- en: That’s everything that we need to display the encrypted message. We’ll run through
    what happens when the app runs on the next page.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要显示加密消息的所有内容。我们将在下一页详细介绍应用程序运行时发生的事情。
- en: What happens when the app runs
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序运行时发生了什么
- en: 'The following things happen when the app runs:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序运行时会发生以下事情：
- en: '**The app is launched and MainActivity gets created.**'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用程序启动并创建 MainActivity。**'
- en: '`WelcomeFragment` is added to the navigation host and displayed on the device
    screen.'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`WelcomeFragment` 被添加到导航宿主并显示在设备屏幕上。'
- en: '![image](Images/f0275-02.png)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0275-02.png)'
- en: '**When the user clicks on the Start button, its OnClickListener code passes
    an action to the navigation controller’s navigate() method.**'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户点击“开始”按钮时，其 OnClickListener 代码将操作传递给导航控制器的 navigate() 方法。**'
- en: The action describes a navigation path from `WelcomeFragment` to `MessageFragment`.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该操作描述了从 `WelcomeFragment` 到 `MessageFragment` 的导航路径。
- en: '![image](Images/f0275-03.png)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0275-03.png)'
- en: '**The navigation controller puts MessageFragment in the navigation host so
    that it’s displayed on the device screen.**'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航控制器将 MessageFragment 放入导航宿主，以便在设备屏幕上显示它。**'
- en: '![image](Images/f0275-04.png)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0275-04.png)'
- en: '**The user enters a message and clicks the Next button.**'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户输入消息并点击“下一步”按钮。**'
- en: '![image](Images/f0275-05.png)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0275-05.png)'
- en: '**The Next button’s OnClickListener uses the MessageFragmentDirections class
    to attach the message to an action.**'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下一步按钮的 OnClickListener 使用 MessageFragmentDirections 类将消息附加到操作上。**'
- en: The action (including the message) is passed to the navigation controller.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将操作（包括消息）传递给导航控制器。
- en: '![image](Images/f0276-02.png)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0276-02.png)'
- en: '**The navigation controller passes the message to EncryptFragment.**'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航控制器将消息传递给`EncryptFragment`。**'
- en: '`EncryptFragment` uses the `EncryptFragmentArgs` class to retrieve its value.'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`EncryptFragment`使用`EncryptFragmentArgs`类检索其值。'
- en: '![image](Images/f0276-03.png)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0276-03.png)'
- en: '**The navigation controller replaces MessageFragment with EncryptFragment in
    MainActivity’s navigation host.**'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航控制器在MainActivity的导航主机中用EncryptFragment替换MessageFragment。**'
- en: '`EncryptFragment` is displayed on the device screen and shows the encrypted
    message.'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设备屏幕上显示`EncryptFragment`，并显示加密消息。
- en: '![image](Images/f0276-04.png)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0276-04.png)'
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) Test Drive'
- en: When we run the app, `WelcomeFragment` is displayed, and we can navigate to
    `MessageFragment` by clicking on the Start button as before.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，`WelcomeFragment`将显示，点击“开始”按钮后，我们可以像以前一样导航到`MessageFragment`。
- en: When we enter a message and click on `MessageFragment`’s Next button, `EncryptFragment`
    is displayed. It shows the encrypted message.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 输入消息并点击`MessageFragment`的“下一步”按钮时，将显示`EncryptFragment`。它显示加密消息。
- en: '![image](Images/f0277-02.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0277-02.png)'
- en: The app works just the way we want.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序正如我们所希望的那样运行。
- en: There’s just one more change we want to make to it. Before we do so, have a
    go at the following exercise.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想对其进行一些更改。在此之前，试着完成以下练习。
- en: Navigation Magnets
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航磁铁
- en: '![image](Images/common02.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common02.png)'
- en: 'The navigation graph code below defines the navigation path between two fragments:
    `ChooseTypeFragment` and `DrinksFragment`.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的导航图代码定义了两个片段之间的导航路径：`ChooseTypeFragment`和`DrinksFragment`。
- en: '`ChooseTypeFragment` features a spinner with the ID `choose`, and a button
    with the ID `next`. When the user clicks on the button, `ChooseTypeFragment` needs
    to navigate to `DrinksFragment`, passing it the user’s selected value from the
    spinner.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChooseTypeFragment`包含一个ID为`choose`的下拉框和一个ID为`next`的按钮。当用户点击按钮时，`ChooseTypeFragment`需要导航到`DrinksFragment`，并将来自下拉框的用户选择的值传递给它。'
- en: When `DrinksFragment` is displayed, it needs to display the selected value in
    a text view in its layout that has the ID `choice`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示`DrinksFragment`时，它需要在布局中的文本视图`choice`中显示所选的值。
- en: Someone tried to write the code for `ChooseTypeFragment` and `DrinksFragment`
    using fridge magnets, but some of them fell off when we shut the fridge door too
    quickly. Can you piece the code back together again?
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有人试图使用冰箱磁铁编写`ChooseTypeFragment`和`DrinksFragment`的代码，但当我们关上冰箱门太快时，有些磁铁掉了。你能把代码重新拼起来吗？
- en: '**Navigation graph:**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航图：**'
- en: '[PRE1]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**ChooseTypeFragment:**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**ChooseTypeFragment:**'
- en: '[PRE2]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**DrinksFragment:**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**DrinksFragment:**'
- en: '[PRE3]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![image](Images/f0279-01.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0279-01.png)'
- en: Navigation Magnets Solution
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航磁铁解决方案
- en: '![image](Images/common02.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common02.png)'
- en: 'The navigation graph code below defines the navigation path between two fragments:
    `ChooseTypeFragment` and `DrinksFragment`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的导航图代码定义了两个片段之间的导航路径：`ChooseTypeFragment`和`DrinksFragment`。
- en: '`ChooseTypeFragment` features a spinner with the ID `choose`, and a button
    with the ID `next`. When the user clicks on the button, `ChooseTypeFragment` needs
    to navigate to `DrinksFragment`, passing it the user’s selected value from the
    spinner.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChooseTypeFragment`包含一个ID为`choose`的下拉框和一个ID为`next`的按钮。当用户点击按钮时，`ChooseTypeFragment`需要导航到`DrinksFragment`，并将来自下拉框的用户选择的值传递给它。'
- en: When `DrinksFragment` is displayed, it needs to display the selected value in
    a text view in its layout that has the ID `choice`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示`DrinksFragment`时，它需要在布局中的文本视图`choice`中显示所选的值。
- en: Someone tried to write the code for `ChooseTypeFragment` and `DrinksFragment`
    using fridge magnets, but some of them fell off when we shut the fridge door too
    quickly. Can you piece the code back together again?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有人试图使用冰箱磁铁编写`ChooseTypeFragment`和`DrinksFragment`的代码，但当我们关上冰箱门太快时，有些磁铁掉了。你能把代码重新拼起来吗？
- en: '**Navigation graph:**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航图：**'
- en: '[PRE4]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**ChooseTypeFragment:**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**ChooseTypeFragment:**'
- en: '![image](Images/f0281-01.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0281-01.png)'
- en: '**DrinksFragment:**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**DrinksFragment:**'
- en: '![image](Images/f0281-02.png)![image](Images/f0281-03.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0281-02.png)![image](Images/f0281-03.png)'
- en: What if the user wants to go back?
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果用户想要返回怎么办？
- en: '![image](Images/f0282-01.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0282-01.png)'
- en: 'There’s just one more thing we need to consider in the Secret Message app:
    what happens when the user tries to go back through the app’s screens.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在秘密消息应用中，还有一件事情需要考虑：当用户尝试通过应用程序的屏幕返回时会发生什么。
- en: As we’re sure you know, you go back in Androidville using the device back button
    or with a back gesture, and this takes you back through any screens that have
    been displayed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，您可以使用设备的返回按钮或向后手势在Androidville中返回，并且这将带您返回显示过的任何屏幕。
- en: '![image](Images/f0282-02.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0282-02.png)'
- en: 'As an example, suppose the user launches the Secret Message app and navigates
    from `WelcomeFragment` to `MessageFragment` and then to `EncryptFragment` like
    this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设用户启动秘密消息应用程序，并像这样从`WelcomeFragment`导航到`MessageFragment`，然后到`EncryptFragment`：
- en: '![image](Images/f0282-03.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0282-03.png)'
- en: 'If she clicks on the back button while `EncryptFragment` is displayed, the
    app goes back to the previous fragment—`MessageFragment`—like so:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果她在显示`EncryptFragment`时点击返回按钮，则应用程序返回到上一个片段—`MessageFragment`—如下所示：
- en: '![image](Images/f0282-04.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0282-04.png)'
- en: But what if you want pressing the back button to take the user back to an earlier
    fragment?
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果您希望按下返回按钮将用户带回早期片段呢？
- en: We could change the back behavior
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们可以改变返回行为
- en: 'Instead of going back to `MessageFragment` when the user clicks on the back
    button, it might be better to go straight back to `WelcomeFragment`. This would
    let the user start again from the beginning of the app like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击返回按钮时，不是返回到`MessageFragment`，直接返回到`WelcomeFragment`可能更好。这样用户可以从应用程序的开头重新开始，如下所示：
- en: '![image](Images/f0283-02.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0283-02.png)'
- en: To find out how to control this kind of behavior, let’s go behind the scenes
    and take a look at how Android’s back stack works.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何控制这种行为，请让我们来看看Android返回堆栈的工作原理。
- en: Welcome to the back stack
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎来到返回堆栈
- en: When you go from destination to destination in your app, Android keeps track
    of each place you’ve visited by adding it to the **back stack**. The back stack
    is a log of all the places you’ve visited in the app. Each time you navigate to
    a destination, Android adds it to the top of the back stack, and when you press
    the back button, it pops the most recent destination off the stack, and displays
    the one underneath.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序中从一个目标导航到另一个目标时，Android通过将其添加到**返回堆栈**来跟踪您访问的每个位置。返回堆栈是应用程序中您访问过的所有位置的日志。每次导航到一个目标时，Android都将其添加到返回堆栈顶部，当您按下返回按钮时，它将弹出堆栈中最近的目标，并显示其下方的目标。
- en: A back stack scenario
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回堆栈场景
- en: '**When you start the Secret Message app, WelcomeFragment is displayed.**'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当您启动秘密消息应用程序时，WelcomeFragment将显示。**'
- en: Android adds `WelcomeFragment` to the back stack.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android将`WelcomeFragment`添加到返回堆栈。
- en: '![image](Images/f0284-02.png)'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0284-02.png)'
- en: '**You navigate to MessageFragment.**'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**您导航到MessageFragment。**'
- en: This destination is added to the top of the back stack, above `WelcomeFragment`.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此目标被添加到返回堆栈顶部，高于`WelcomeFragment`。
- en: '![image](Images/f0284-03.png)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0284-03.png)'
- en: '**You then navigate to EncryptFragment.**'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**然后导航到EncryptFragment。**'
- en: '`EncryptFragment` is added to the top of the back stack.'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`EncryptFragment`被添加到返回堆栈顶部。'
- en: '![image](Images/f0284-04.png)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0284-04.png)'
- en: '**You click on the Back button, and EncryptFragment pops off the back stack.**'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**您点击返回按钮，EncryptFragment从返回堆栈中弹出。**'
- en: '`MessageFragment` is displayed, as this is now at the top of the back stack.'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MessageFragment`显示在返回堆栈的顶部。'
- en: '![image](Images/f0284-05.png)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0284-05.png)'
- en: '**You click on the Back button again.**'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**您再次点击返回按钮。**'
- en: '`MessageFragment` pops off the top of the back stack, and `WelcomeFragment`
    is displayed.'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MessageFragment`从返回堆栈顶部弹出，并显示`WelcomeFragment`。'
- en: '![image](Images/f0284-06.png)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0284-06.png)'
- en: Use the navigation graph to pop fragments off the back stack
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用导航图来弹出返回堆栈中的片段
- en: You’ve just seen how the back stack and back button operate by default, but
    if you want, you can pop destinations off the back stack as the user navigates
    through the app. You do this by specifying **pop behavior** in the navigation
    graph.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚看到默认情况下返回堆栈和返回按钮的操作方式，但是如果您愿意，您可以在用户浏览应用程序时从返回堆栈中弹出目标。您可以在导航图中指定**弹出行为**来实现这一点。
- en: To see how this works, let’s update the navigation graph in the Secret Message
    app so that when the app navigates from `MessageFragment` to `EncryptFragment`,
    `MessageFragment` is popped off the back stack. This means that when the user
    clicks on the back button while `EncryptFragment` is displayed, `WelcomeFragment`
    is displayed instead of `MessageFragment`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看其工作原理，请更新秘密消息应用程序中的导航图，以便在应用程序从`MessageFragment`导航到`EncryptFragment`时，将`MessageFragment`从返回堆栈中弹出。这意味着当用户在显示`EncryptFragment`时点击返回按钮时，将显示`WelcomeFragment`，而不是`MessageFragment`。
- en: '![image](Images/f0285-02.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0285-02.png)'
- en: 'Open the navigation graph *nav_graph.xml* (if it’s not already open), and switch
    to the design editor. Select the action that connects `MessageFragment` to `EncryptFragment`.
    Then, in the Pop Behavior section of the Attributes panel, change the value of
    the `popUpTo` property to “welcomeFragment”. This tells Android to pop fragments
    off the back stack until it reaches `WelcomeFragment`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 打开导航图 *nav_graph.xml*（如果尚未打开），并切换到设计编辑器。选择连接 `MessageFragment` 到 `EncryptFragment`
    的操作。然后在属性面板的“Pop Behavior”部分，将 `popUpTo` 属性的值更改为“welcomeFragment”。这告诉 Android
    在到达 `WelcomeFragment` 前弹出后退栈中的片段：
- en: '![image](Images/f0285-03.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0285-03.png)'
- en: Before we take the app for a test drive, let’s see what the underlying XML looks
    like.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行应用程序测试驾驶之前，让我们看看底层 XML 的内容。
- en: The updated nav_graph.xml code
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新后的 nav_graph.xml 代码
- en: When you add pop behavior to an action, a `<popUpTo>` element is added to the
    underlying XML. This specifies how far back fragments should be popped off the
    back stack to.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为操作添加弹出行为时，会在底层 XML 中添加 `<popUpTo>` 元素。这指定了应弹出后退栈中的片段到哪一步。
- en: 'Here’s the updated code for *nav_graph.xml*:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *nav_graph.xml* 的更新代码：
- en: '![image](Images/f0286-02.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0286-02.png)'
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) 测试驾驶'
- en: 'When we run the app, `WelcomeFragment` is displayed. We can navigate to `MessageFragment`
    and `EncryptFragment` as before:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用时，显示 `WelcomeFragment`。我们可以像以前一样导航到 `MessageFragment` 和 `EncryptFragment`：
- en: '![image](Images/f0287-02.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0287-02.png)'
- en: 'When we click on the back button, the app goes back to `WelcomeFragment`, and
    bypasses `MessageFragment`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击返回按钮时，应用程序返回到 `WelcomeFragment`，并跳过 `MessageFragment`：
- en: '![image](Images/f0287-03.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0287-03.png)'
- en: Congratulations! You’ve now learned how to build a multi-screen app that passes
    data between fragments, and interacts with the back stack. These are core skills
    for building modern Android apps.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经学会了如何构建一个可以在多个屏幕之间传递数据并与后退栈交互的应用程序。这些是构建现代 Android 应用程序的核心技能。
- en: You’ll discover more ways in which you can use the Navigation component in the
    next chapter.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节中，您将发现更多使用导航组件的方法。
- en: BE the Safe Args Plug-in
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BE the Safe Args Plug-in
- en: '![image](Images/common04.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**The code below shows the navigation graph for a Starbuzz app. Your job is
    to play like you’re the Safe Args plug-in, and say which Directions and Args classes
    will get generated from this code.**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下代码显示了 Starbuzz 应用的导航图。你的任务是像 Safe Args 插件一样，说明哪些 Directions 和 Args 类将从这段代码生成。**'
- en: '[PRE5]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Images](Images/arr.png) **Answers in [“BE the Safe Args Plug-in Solution”](#be_the_safe_args_plug-in_solution).**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr.png) **答案在 [“BE the Safe Args Plug-in Solution”](#be_the_safe_args_plug-in_solution)
    中。**'
- en: BE the Safe Args Plug-in Solution
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BE the Safe Args Plug-in 解决方案
- en: '![image](Images/common04.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**The code below shows the navigation graph for a Starbuzz app. Your job is
    to play like you’re the Safe Args plug-in, and say which Directions and Args classes
    will get generated from this code.**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下代码显示了 Starbuzz 应用的导航图。你的任务是像 Safe Args 插件一样，说明哪些 Directions 和 Args 类将从这段代码生成。**'
- en: '![image](Images/f0290-01.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0290-01.png)'
- en: Your Android Toolbox
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的 Android 工具箱
- en: '![image](Images/tools.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/tools.png)'
- en: '**You’ve got [Chapter 7](#safe_argscolon_passing_information) under your belt
    and now you’ve added the Safe Args plug-in and back stack manipulation to your
    toolbox.**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经掌握了[第 7 章](#safe_argscolon_passing_information)的内容，并且现在已将 Safe Args 插件和后退栈操作添加到你的工具箱中。**'
- en: '![image](Images/f0292-01.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0292-01.png)'
