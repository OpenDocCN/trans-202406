- en: 'Chapter 7\. Safe Args: *Passing Information*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0257-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Sometimes fragments need extra information to work properly.**'
  prefs: []
  type: TYPE_NORMAL
- en: If a fragment shows details of a contact, for example, it needs to know which
    contact to display. But what if this information need extra information to work
    properly.**comes from another fragment**? In this chapter, you’ll **build on your
    navigation know-how** by learning **how to pass data between fragments**. You’ll
    find out **how to add arguments** to navigation destinations so they can receive
    the information they need. You’ll meet **the Safe Args plug-in**, and learn how
    to use it to **write type-safe code**. Finally, you’ll discover **how to manipulate
    the back stack**, and take control of back button behavior. Read on—there’s no
    going back…
  prefs: []
  type: TYPE_NORMAL
- en: The Secret Message app navigates between fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned how to use the Navigation component to
    navigate between two fragments. You used this knowledge to build the first half
    of the Secret Message app: an app that takes a message the user enters, and encrypts
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: The current version of the app uses a fragment named `WelcomeFragment` to display
    some introductory text. When the user clicks on its Start button, the fragment
    navigates to a second fragment named `MessageFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '`MessageFragment` includes an edit text that lets the user enter her message.
    It also features a Next button, which the user clicks on to encrypt the message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of what the app currently looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0258-01.png)'
  prefs: []
  type: TYPE_IMG
- en: In the current version of the app, nothing happens when the user clicks on `MessageFragment`’s
    Next button. In this chapter, we’re going to finish building the app so the user’s
    encrypted message gets displayed in a new fragment.
  prefs: []
  type: TYPE_NORMAL
- en: MessageFragment needs to pass the message to a new fragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to add a new fragment to the app named `EncryptFragment`. This
    fragment will display the user’s encrypted message, and will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0259-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '`EncryptFragment` will get the user’s message from `MessageFragment`. When
    the user clicks on `MessageFragment`’s Next button, the app will navigate to `EncryptFragment`,
    and pass it the text. This fragment will then encrypt the text, and display the
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0259-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To make this work, we need to be able to pass data between fragments. The best
    way of doing this is with a Gradle plug-in called **Safe Args**, which is an extra
    part of the Navigation component. It gives you a way of passing data between fragments
    in a way that’s type-safe. This prevents you from accidentally passing the wrong
    type of data, which might cause runtime errors.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn more about using Safe Args as we continue building the Secret Message
    app. For now, let’s look at the steps we’ll go through.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps we’ll go through to build the second half of the Secret
    Message app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create and display EncryptFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll create a new fragment named `EncryptFragment`, and navigate to it when
    the user clicks on the Next button in `MessageFragment`’s layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0260-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Pass the user’s message to EncryptFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll use Safe Args to pass the user’s message from `MessageFragment` to `EncryptFragment`.
    `EncryptFragment` will then display the encrypted message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0260-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Modify the app’s back button behavior.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we’ll update the app so that when the user presses the device back
    button while `EncryptFragment` is displayed, the app goes back to `WelcomeFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0260-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![image](Images/f0260-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Create EncryptFragment…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0261-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to use `EncryptFragment` to display an encrypted version of the
    user’s message. Create this fragment by highlighting the *com.hfad.secretmessage*
    package in the *app/src/main/java* folder, going to the File menu, and choosing
    New→Fragment→Fragment (Blank). Name the fragment “EncryptFragment” and give the
    layout a name of “fragment_encrypt”. Make sure the language is set to Kotlin,
    then click on the Finish button.
  prefs: []
  type: TYPE_NORMAL
- en: …and update its layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re going to update `EncryptFragment`’s layout so that it includes two text
    views. The first will display a `String` resource named `encrypt_text` (we added
    this to *strings.xml* in the previous chapter), and the second will display the
    encrypted message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the layout file *fragment_encrypt.xml* and update its contents so it matches
    the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0261-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Update EncryptFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also need to update `EncryptFragment`’s Kotlin code to make sure that Android
    Studio hasn’t added any unnecessary extra code to it that might stop it from working
    in the way we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the *com.hfad.secretmessage* package in the *app/src/main/java* folder
    and open the file *EncryptFragment.kt*. Then replace the code that Android Studio
    has generated with the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0262-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code is everything that *EncryptFragment.kt* needs to define a basic
    fragment. Just like the other fragment code you’ve seen, it extends the `Fragment`
    class, and overrides its `onCreateView()` method. This method inflates the fragment’s
    layout, and returns its root view.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now finished writing all the layout and Kotlin code that `EncryptFragment`
    needs. Next, we’ll make sure that `MessageFragment` can navigate to it by adding
    it to the navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0262-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Add EncryptFragment to the navigation graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, the navigation graph holds details of the app’s destinations,
    and the possible paths you can take to navigate to them.
  prefs: []
  type: TYPE_NORMAL
- en: To add `EncryptFragment` to the navigation graph, open *nav_graph.xml*, click
    on the New Destination button in the design editor, and when prompted, choose
    the “fragment_encrypt” option. This adds the fragment.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0263-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We also need to add a new action so that `MessageFragment` can navigate to `EncryptFragment`.
    Do this by hovering your mouse pointer over `MessageFragment` and drawing an action
    arrow from its right edge to `EncryptFragment`. Make sure the action has an ID
    of “action_messageFragment_to_encryptFragment” so that it matches the code in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Don’t worry if you find this a bit too fiddly. We’ll show you the full code
    on the next page so if you prefer, you can update that instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’ve made these changes, the navigation graph should look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0263-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s see what the underlying XML looks like.
  prefs: []
  type: TYPE_NORMAL
- en: The updated nav_graph.xml code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each time you update the navigation graph, any changes are added to the underlying
    XML. The new code looks like this (the changes are in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0264-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s use the new action to navigate to `EncryptFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: MessageFragment needs to navigate to EncryptFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to make `MessageFragment` navigate to `EncryptFragment` when the user
    clicks its Next button. To enable this, we’ll add an `OnClickListener` to the
    button, which will include the navigation code.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0265-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you learned in the previous chapter, you navigate from one fragment to another
    by getting a navigation controller, and passing it a navigation action. The navigation
    controller uses this action to display the correct fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re already familiar with all the code needed to do this, so update *MessageFragment.kt*
    so that it includes the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0265-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive and make sure this works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` is launched, and `WelcomeFragment` is displayed.
    When we click on its Start button, the app navigates to `MessageFragment` as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter a message in `MessageFragment`’s edit text view and click on its
    Next button, the app navigates to `EncryptFragment`. It doesn’t do anything with
    the message we entered.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0266-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '`EncryptFragment` doesn’t display an encrypted message because the code we’ve
    written so far simply navigates to this fragment. It doesn’t pass the message
    to the new fragment, so `EncryptFragment` can’t do anything with it.'
  prefs: []
  type: TYPE_NORMAL
- en: To pass the message from `MessageFragment` to `EncryptFragment`, we’re going
    to use Safe Args. As you learned earlier, this is an extra part of the Navigation
    component that lets you pass arguments to destinations in a type-safe way.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s find out how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Add Safe Args to the build.gradle files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0267-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we can start using Safe Args, we need to update the project and app *build.gradle*
    files. Let’s do this now.
  prefs: []
  type: TYPE_NORMAL
- en: Add a classpath to the *project* build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You first need to add a new classpath to the project’s *build.gradle* file specifying
    that you want to use the Safe Args plug-in. The classpath includes a version number,
    which needs to match the one that you’re using for the main Navigation component
    library.
  prefs: []
  type: TYPE_NORMAL
- en: In the Secret Message app, we’re using a variable named `nav_version` to make
    sure that these version numbers match, so we’ll reference this in the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *SecretMessage/build.gradle*, and add the classpath (in bold)
    to the `dependencies` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0267-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the plug-in to the app build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, you need to tell Gradle that you’re using the Safe Args plug-in by adding
    a line to the app *build.gradle* file. Open the file *SecretMessage/app/build.gradle*,
    and add the line in bold to the `plug-ins` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0267-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve made these changes, click on the Sync Now option that appears at
    the top of the code editor. This syncs the changes you’ve made with the rest of
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Make sure that you sync your changes each time you update the build.gradle files.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the app includes Safe Args, we can use it to pass a message from `MessageFragment`
    to `EncryptFragment`. We’ll do this next.
  prefs: []
  type: TYPE_NORMAL
- en: EncryptFragment needs to accept a String argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is specify that `EncryptFragment` can accept the
    user’s message. We’ll do this by adding a `String` argument to this fragment in
    the navigation graph; `MessageFragment` will then use this argument to pass the
    user’s message (a `String`) to `EncryptFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0268-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add the argument, open the file *nav_graph.xml* from the *app/src/main/res/nav_graph.xml*.
    Then select `EncryptFragment` in the navigation graph design editor, go to the
    Attributes panel, and click on the “+” button that appears next to the Arguments
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0268-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the “+” button, an Add Argument window appears, which you
    use to add details about the argument. Here, we want `EncryptFragment` to accept
    a `String` argument for the user’s message, so name the argument “message”, select
    “String” as its type, and click on the Add button. This creates the new argument,
    and adds it to the Arguments section of the Attributes panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0268-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The updated nav_graph.xml code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you add an argument to a navigation graph, a new `<argument>` element
    gets added to the underlying XML. Here’s the updated code for *nav_graph.xml*
    (the new code is in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0269-02.png)'
  prefs: []
  type: TYPE_IMG
- en: MessageFragment needs to pass a message to EncryptFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve added a `String` argument to `EncryptFragment`, `MessageFragment`
    can use it to pass along the user’s message when it navigates to this fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you already know, you navigate from one destination to another by passing
    a navigation action to the navigation controller. The navigation controller then
    uses this action to display the correct fragment. `MessageFragment`, for example,
    uses the following code to navigate to `EncryptFragment` when its button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0270-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass arguments to navigation actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to pass an argument to a destination, you do so by passing its value
    to the navigation action.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the navigation controller receives an action that includes an argument,
    it navigates to the appropriate fragment, and passes along the argument’s value.
    In the Secret Message app, for example, we can get `MessageFragment` to pass the
    user’s message to `EncryptMessage` (via the navigation controller) by including
    it in the navigation action. It will work like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0270-03.png)'
  prefs: []
  type: TYPE_IMG
- en: You can add arguments to navigation actions using a `**Directions**` class.
    Let’s find out what this is.
  prefs: []
  type: TYPE_NORMAL
- en: Safe Args generates Directions classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Directions` classes are used to pass arguments to destinations. When you enable
    the Safe Args plug-in, Android Studio uses it to generate a `Directions` class
    **for each fragment you can navigate from**. In the Secret Message app, for example,
    you can navigate from `WelcomeFragment` and `MessageFragment` to other destinations,
    so the Safe Args plug-in generates a `Directions` class for each of these fragments;
    it generates a class named `WeclomeFragmentDirections` for `WelcomeFragment`,
    and one named `MessageFragmentDirections` gets generated for `MessageFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0271-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Each fragment uses its own `Directions` class to navigate with. `MessageFragment`,
    for example, needs to use the `MessageFragmentDirections` class if it wants to
    navigate elsewhere, and pass an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Use a Directions class to add arguments to actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each `Directions` class includes a generated method for each of the fragment’s
    actions. `MessageFragment`, for example, has an action with the ID “action_messageFragment_to_encryptFragment”,
    so the `MessageFragmentDirections` class includes a corresponding method named
    `actionMessageFragmentToEncryptFragment()`. And because `EncryptFragment` accepts
    a `String`, the generated method includes a `String` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0271-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You use the generated methods to navigate to destinations. To navigate from
    `MessageFragment` to `EncryptFragment` and pass it a `String` message, for example,
    you’d add the following code to `MessageFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0271-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s add this code now.
  prefs: []
  type: TYPE_NORMAL
- en: Update the MessageFragment.kt code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated code for `MessageFragment`; make sure you add the changes
    (in bold) to *MessageFragment.kt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0272-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything `MessageFragment` needs to pass the user’s message to `EncryptFragment`.
    Next, we need to make `EncryptFragment` pick it up and use it.
  prefs: []
  type: TYPE_NORMAL
- en: EncryptFragment needs to get the argument’s value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, `MessageFragment` uses a `String` argument to pass the user’s message
    to `EncryptFragment`. `EncryptFragment` needs to retrieve this value so that it
    can display an encrypted version of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fragments can retrieve arguments using an `**Args**` class. When you enable
    the Safe Args plug-in, Android Studio uses it to generate an `Args` class **for
    each fragment that accepts arguments**. In the Secret Message app, for example,
    `EncryptFragment` accepts a `String` argument, so the Safe Args plug-in generates
    an `Args` class for it named `EncryptFragmentArgs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0273-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The Safe Args plug-in generates Directions and Args classes. Use the Directions
    class to pass arguments to a destination. Use the Args class to retrieve them.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use an Args class to retrieve arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each `Args` class includes a `**fromBundle()**` method that you use to retrieve
    any arguments that have been passed to the fragment. In the Secret Message app,
    for example, `EncryptFragment` accepts a `String` argument named `message`, so
    you can get the value of this argument using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0273-03.png)![image](Images/f0273-04.png)'
  prefs: []
  type: TYPE_IMG
- en: This assigns a `String` object (the value of the argument) to `message`.
  prefs: []
  type: TYPE_NORMAL
- en: We need to encrypt the message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how to make `EncryptFragment` retrieve the user’s message,
    we can encrypt it and display the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll encrypt the message using Kotlin’s `reversed()` method, which simply
    reverses the order of a `String`’s letters. The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the real world, you’d want to use a much more advanced encryption technique.
    This is just an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We’ll show you the full `EncryptFragment` code on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for EncryptFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the complete code for *EncryptFragment.kt*; update its code so that
    it includes the changes below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0274-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything that we need to display the encrypted message. We’ll run through
    what happens when the app runs on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The app is launched and MainActivity gets created.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`WelcomeFragment` is added to the navigation host and displayed on the device
    screen.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0275-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When the user clicks on the Start button, its OnClickListener code passes
    an action to the navigation controller’s navigate() method.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The action describes a navigation path from `WelcomeFragment` to `MessageFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0275-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller puts MessageFragment in the navigation host so
    that it’s displayed on the device screen.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0275-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user enters a message and clicks the Next button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0275-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The Next button’s OnClickListener uses the MessageFragmentDirections class
    to attach the message to an action.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The action (including the message) is passed to the navigation controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0276-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller passes the message to EncryptFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EncryptFragment` uses the `EncryptFragmentArgs` class to retrieve its value.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0276-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller replaces MessageFragment with EncryptFragment in
    MainActivity’s navigation host.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EncryptFragment` is displayed on the device screen and shows the encrypted
    message.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0276-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `WelcomeFragment` is displayed, and we can navigate to
    `MessageFragment` by clicking on the Start button as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter a message and click on `MessageFragment`’s Next button, `EncryptFragment`
    is displayed. It shows the encrypted message.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0277-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The app works just the way we want.
  prefs: []
  type: TYPE_NORMAL
- en: There’s just one more change we want to make to it. Before we do so, have a
    go at the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The navigation graph code below defines the navigation path between two fragments:
    `ChooseTypeFragment` and `DrinksFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ChooseTypeFragment` features a spinner with the ID `choose`, and a button
    with the ID `next`. When the user clicks on the button, `ChooseTypeFragment` needs
    to navigate to `DrinksFragment`, passing it the user’s selected value from the
    spinner.'
  prefs: []
  type: TYPE_NORMAL
- en: When `DrinksFragment` is displayed, it needs to display the selected value in
    a text view in its layout that has the ID `choice`.
  prefs: []
  type: TYPE_NORMAL
- en: Someone tried to write the code for `ChooseTypeFragment` and `DrinksFragment`
    using fridge magnets, but some of them fell off when we shut the fridge door too
    quickly. Can you piece the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation graph:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**ChooseTypeFragment:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**DrinksFragment:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0279-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigation Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The navigation graph code below defines the navigation path between two fragments:
    `ChooseTypeFragment` and `DrinksFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ChooseTypeFragment` features a spinner with the ID `choose`, and a button
    with the ID `next`. When the user clicks on the button, `ChooseTypeFragment` needs
    to navigate to `DrinksFragment`, passing it the user’s selected value from the
    spinner.'
  prefs: []
  type: TYPE_NORMAL
- en: When `DrinksFragment` is displayed, it needs to display the selected value in
    a text view in its layout that has the ID `choice`.
  prefs: []
  type: TYPE_NORMAL
- en: Someone tried to write the code for `ChooseTypeFragment` and `DrinksFragment`
    using fridge magnets, but some of them fell off when we shut the fridge door too
    quickly. Can you piece the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation graph:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**ChooseTypeFragment:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0281-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**DrinksFragment:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0281-02.png)![image](Images/f0281-03.png)'
  prefs: []
  type: TYPE_IMG
- en: What if the user wants to go back?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0282-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There’s just one more thing we need to consider in the Secret Message app:
    what happens when the user tries to go back through the app’s screens.'
  prefs: []
  type: TYPE_NORMAL
- en: As we’re sure you know, you go back in Androidville using the device back button
    or with a back gesture, and this takes you back through any screens that have
    been displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0282-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As an example, suppose the user launches the Secret Message app and navigates
    from `WelcomeFragment` to `MessageFragment` and then to `EncryptFragment` like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0282-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If she clicks on the back button while `EncryptFragment` is displayed, the
    app goes back to the previous fragment—`MessageFragment`—like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0282-04.png)'
  prefs: []
  type: TYPE_IMG
- en: But what if you want pressing the back button to take the user back to an earlier
    fragment?
  prefs: []
  type: TYPE_NORMAL
- en: We could change the back behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of going back to `MessageFragment` when the user clicks on the back
    button, it might be better to go straight back to `WelcomeFragment`. This would
    let the user start again from the beginning of the app like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0283-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To find out how to control this kind of behavior, let’s go behind the scenes
    and take a look at how Android’s back stack works.
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the back stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you go from destination to destination in your app, Android keeps track
    of each place you’ve visited by adding it to the **back stack**. The back stack
    is a log of all the places you’ve visited in the app. Each time you navigate to
    a destination, Android adds it to the top of the back stack, and when you press
    the back button, it pops the most recent destination off the stack, and displays
    the one underneath.
  prefs: []
  type: TYPE_NORMAL
- en: A back stack scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**When you start the Secret Message app, WelcomeFragment is displayed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android adds `WelcomeFragment` to the back stack.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0284-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**You navigate to MessageFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This destination is added to the top of the back stack, above `WelcomeFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0284-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**You then navigate to EncryptFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EncryptFragment` is added to the top of the back stack.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0284-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**You click on the Back button, and EncryptFragment pops off the back stack.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MessageFragment` is displayed, as this is now at the top of the back stack.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0284-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**You click on the Back button again.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MessageFragment` pops off the top of the back stack, and `WelcomeFragment`
    is displayed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0284-06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Use the navigation graph to pop fragments off the back stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve just seen how the back stack and back button operate by default, but
    if you want, you can pop destinations off the back stack as the user navigates
    through the app. You do this by specifying **pop behavior** in the navigation
    graph.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, let’s update the navigation graph in the Secret Message
    app so that when the app navigates from `MessageFragment` to `EncryptFragment`,
    `MessageFragment` is popped off the back stack. This means that when the user
    clicks on the back button while `EncryptFragment` is displayed, `WelcomeFragment`
    is displayed instead of `MessageFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0285-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the navigation graph *nav_graph.xml* (if it’s not already open), and switch
    to the design editor. Select the action that connects `MessageFragment` to `EncryptFragment`.
    Then, in the Pop Behavior section of the Attributes panel, change the value of
    the `popUpTo` property to “welcomeFragment”. This tells Android to pop fragments
    off the back stack until it reaches `WelcomeFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0285-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we take the app for a test drive, let’s see what the underlying XML looks
    like.
  prefs: []
  type: TYPE_NORMAL
- en: The updated nav_graph.xml code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you add pop behavior to an action, a `<popUpTo>` element is added to the
    underlying XML. This specifies how far back fragments should be popped off the
    back stack to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *nav_graph.xml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0286-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we run the app, `WelcomeFragment` is displayed. We can navigate to `MessageFragment`
    and `EncryptFragment` as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0287-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we click on the back button, the app goes back to `WelcomeFragment`, and
    bypasses `MessageFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0287-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to build a multi-screen app that passes
    data between fragments, and interacts with the back stack. These are core skills
    for building modern Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll discover more ways in which you can use the Navigation component in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: BE the Safe Args Plug-in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The code below shows the navigation graph for a Starbuzz app. Your job is
    to play like you’re the Safe Args plug-in, and say which Directions and Args classes
    will get generated from this code.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/arr.png) **Answers in [“BE the Safe Args Plug-in Solution”](#be_the_safe_args_plug-in_solution).**'
  prefs: []
  type: TYPE_NORMAL
- en: BE the Safe Args Plug-in Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The code below shows the navigation graph for a Starbuzz app. Your job is
    to play like you’re the Safe Args plug-in, and say which Directions and Args classes
    will get generated from this code.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0290-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 7](#safe_argscolon_passing_information) under your belt
    and now you’ve added the Safe Args plug-in and back stack manipulation to your
    toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0292-01.png)'
  prefs: []
  type: TYPE_IMG
