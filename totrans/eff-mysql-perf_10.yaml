- en: Chapter 10\. MySQL in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL in the cloud is fundamentally the same MySQL that you know and love (or
    know and tolerate). In the cloud, the best practices and techniques detailed in
    the previous nine chapters are not only true but *eminently* true because cloud
    providers charge for every byte and millisecond of work. Performance is money
    in the cloud. To recap the previous nine chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance is query response time ([Chapter 1](ch01.html#ch01)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexes are the key to performance ([Chapter 2](ch02.html#ch02)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less data is better—for both storing and accessing ([Chapter 3](ch03.html#ch03)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access patterns allow or inhibit performance ([Chapter 4](ch04.html#ch04)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharding is necessary to scale out writes and storage ([Chapter 5](ch05.html#ch05)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server metrics reveal how the workload affects MySQL ([Chapter 6](ch06.html#ch06)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replication lag is data loss and must be avoided ([Chapter 7](ch07.html#ch07)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactions affect row locking and undo logging ([Chapter 8](ch08.html#ch08)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other challenges exist—even in the cloud ([Chapter 9](ch09.html#ch09)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you embrace and apply all those details, MySQL will execute the application
    workload with remarkable performance regardless of location: in the cloud, on
    premise, or anywhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sake of saving you time, I wish it were that simple—optimize the workload
    and you’re done—but MySQL in the cloud raises unique considerations. The goal
    is to know and mitigate these cloud considerations so that you can focus on MySQL,
    not the cloud. After all, the cloud is nothing special: behind the proverbial
    curtain, it’s physical servers in a data center running programs like MySQL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter highlights what to know when using MySQL in the cloud. There are
    four major sections. The first cautions against compatibility: when MySQL is not
    MySQL. The second is a quick discussion about varying levels of MySQL administration
    in the cloud. The third discusses network latency and its relationship to storage
    I/O. The fourth is about performance and money.'
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL in the cloud might not be MySQL, or it might be a highly modified (and
    proprietary) version of MySQL. Compatibility of MySQL in the cloud has two sides:
    code compatibility and feature compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'By *MySQL*, I mean MySQL published by Oracle: the official, open source MySQL
    source code. I also mean Percona Server published by Percona, and MariaDB Server
    published by the MariaDB Foundation: both are widely used, safe and stable, and
    considered to be MySQL in general.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Code compatibility* is whether or not MySQL is the same open source code published
    by Oracle, Percona, or MariaDB. The following nine words and phrases are commonly
    used in product descriptions and documentation to allude to the fact that MySQL
    is not code-compatible but, rather, something slightly (or significantly) different:'
  prefs: []
  type: TYPE_NORMAL
- en: Built on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emulates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocol compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wire compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop-in replacement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works with existing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code compatibility is important because MySQL is complex and subtle, and we
    entrust it to store invaluable data. In this book, I focus discussions to narrow
    the scope of MySQL complexity, but sections like [“Page flushing”](ch06.html#metrics-page-flushing)
    and [“Row Locking”](ch08.html#row-locking) hint at how deep the rabbit hole goes.
    When any company alters MySQL source code, the risks are fourfold: data loss,
    performance regressions, bugs, and incompatibilities. The greater the alterations,
    the greater the risks. I have seen the latter three in the cloud; fortunately,
    I have not seen a cloud provider lose data.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you have any doubts whether or not MySQL in the cloud is code-compatible,
    ask the cloud provider, “Is it the same open source MySQL published by Oracle?”
  prefs: []
  type: TYPE_NORMAL
- en: 'To present the whole argument, not just the negatives (the risks), cloud providers
    alter MySQL to provide additional value: improve performance, fix bugs, and add
    features that customers need. Some alterations are valuable and worth the risks.
    But if you use MySQL in the cloud that is not code-compatible, you need to understand
    the extent of the alterations. This is basic due diligence for professional engineers
    using MySQL in the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Given enough eyeballs, all bugs are shallow.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Eric S. Raymond
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Feature compatibility* is whether or not MySQL includes features not available
    outside the cloud provider or the distribution of MySQL. For example, Oracle publishes
    two distributions: MySQL Community Server and MySQL Enterprise Edition. The former
    is open source; the latter includes proprietary features. [Oracle Cloud Infrastructure
    (OCI)](https://www.oracle.com/cloud) uses the latter, which is good: more value
    for the cloud money. But it also means that if you rely on features specific to
    MySQL Enterprise Edition, you cannot directly migrate to another cloud provider
    or distribution of MySQL. The same is true for Percona Server and MariaDB Server:
    these distributions of MySQL have unique features, which is good, but it complicates
    migration to another cloud provider or distribution of MySQL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature compatibility is important for the same reason open source software
    is important: freedom to change. Software—MySQL included—should empower engineers
    and users, not lock us into specific cloud providers or vendors. That reasoning
    is more philosophical than technical, which is why I’ll present the whole argument
    again: some features are valuable and worth *not* changing to keep. But if you
    choose to use a feature that’s not available outside the cloud provider or the
    distribution of MySQL, you need to document why, so that future engineers can
    understand what’s at stake (and what needs to be replaced) if they use another
    cloud provider or distribution of MySQL. This, too, is basic due diligence for
    professional engineers using MySQL in the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Management (DBA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have successfully dodged MySQL administration (DBA work) from the very first
    pages of this book, so we’re not about to fail now, but MySQL in the cloud raises
    an issue that you need to know and address: who manages MySQL? Ostensibly, the
    cloud provider manages MySQL, but it’s not that simple because managing MySQL
    entails many operations. Brace yourself: I’m going steer this book dangerously
    close to DBA work in order to explain.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 10-1](#dba-ops) is a partial list of DBA operations and who manages
    them: you or the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-1\. DBA operations
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | You | Cloud |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Provision |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Configure |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| MySQL users | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Server metrics | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Query metrics | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Online schema change (OSC) | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Failure recovery |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Disaster recovery (DR) | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| High availability (HA) | ✓ | †^([a](ch10.html#idm45829096411712)) |'
  prefs: []
  type: TYPE_TB
- en: '| Upgrading |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Backup and recovery |  | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| Change data capture (CDC) | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Security | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Help | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Cost | ✓ |  |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch10.html#idm45829096411712-marker)) Indicates some management. |'
  prefs: []
  type: TYPE_TB
- en: 'Let me breeze through the 15 operations in [Table 10-1](#dba-ops) because being
    aware of the full scope—even at a high level—helps you avoid gaps in MySQL management
    that will become an issue if not addressed. Also known as *CYA*: cover your administration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Provisioning MySQL is, of course, what a cloud provider must provide: the lowest
    level operation of running MySQL on a computer. Cloud providers use a decent MySQL
    configuration, but double check because no default configuration can suit every
    customer. Apart from a root user necessary to give you initial control of the
    MySQL server, cloud providers do not manage MySQL users. Server and query metrics
    are also your responsibility to collect and report. Granted, some cloud providers
    expose basic sever metrics, but none are even remotely close to the full spectra
    of metrics detailed in [Chapter 6](ch06.html#ch06). OSCs—running `ALTER` statements
    without affecting the workload—are entirely your responsibility, and they tend
    to be a little more difficult in the cloud for various technical reasons outside
    the scope of this book. Cloud providers do handle failover: when hardware or MySQL
    dies, the cloud provider will failover to restore availability. But cloud providers
    do not handle *disaster recovery*: when an entire region fails and availability
    must be restored by running MySQL from a different geographic location. Given
    the previous two operations, high availability (HA) has mixed management (hence
    † in the cloud column). The full discussion of MySQL high availability in the
    cloud is too nuanced to cover here; let’s just say that the cloud provides some
    amount of high availability. Cloud providers upgrade MySQL, which is really nice
    because this operation is tedious at scale. Cloud providers backup MySQL, provide
    long-term backup retention, and provide methods to restore backups—all of which
    are incredibly important. You are responsible for change data capture (CDC), which
    usually involves another tool or service acting like a replica to dump (or stream)
    binary logs from MySQL to another data store (often a big data store or data lake).
    Security of MySQL in the cloud is your responsibility—the cloud is *not* inherently
    secure. Cloud providers help with running MySQL in general, but don’t expect much
    (or any) help with MySQL performance unless your company pays for that level of
    support. And finally, you must manage costs: the cloud is notorious for costing
    more than engineers anticipate.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The three major cloud providers—Amazon, Google, and Microsoft—have a 99.95%
    or 99.99% availability SLA for MySQL (as a managed service), but read the fine
    print—the full legal details. For example, maintenance windows usually do not
    count against the SLA. Or, the SLA might be voided if MySQL is not properly configured
    *by you*. There are always details and caveats to cloud provider high availability
    and SLAs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 10-1](#dba-ops) is descriptive, not prescriptive, because different
    cloud providers and third-party companies provide different levels of MySQL management
    in the cloud. For example, some companies *fully* manage MySQL in the cloud (or
    on-premise). As an engineer using MySQL, not managing it, you only need to know
    that all the operations are managed—all the boxes are checked—so that none of
    them interfere with your work. Once you know that, please forget everything you
    read in this section, else you’ll wind up a MySQL DBA before you know it, twenty
    years will pass, and the next engineer to join your team will have been a newborn
    infant when—lo, the many years past—you were dealing with an inexplicable multi-range
    read performance regression after an innocuous point release upgrade.'
  prefs: []
  type: TYPE_NORMAL
- en: Network and Storage…Latency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When running MySQL on-premise (in data center space that your company leases),
    the local network should never be a consideration or concern for you, presuming
    it was designed and wired by competent professional network engineers. Local networks
    are blazing fast and stable with submillisecond latency. The local network should
    be more boring than the database (recall [“Normal and Stable: The Best Database
    Is a Boring Database”](ch06.html#normal-and-stable)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'But the cloud is global, and wide-area networks have higher latency and lower
    stability (greater fluctuations in latency and throughput). For example, the network
    round-trip time (RTT) between San Francisco and New York City is approximately
    60 milliseconds, plus or minus 10 milliseconds. If you run MySQL in San Francisco
    (or anywhere on the U.S. west coast) and the application is in New York City (or
    anywhere on the U.S. east cost), the minimum query response time is approximately
    60 milliseconds. That is 60 times slower than a local network.^([1](ch10.html#idm45829096382992))
    You will notice that slowness, but it will not show up in query response time
    because the delay is outside MySQL. For example, a query profile (see [“Query
    profile”](ch01.html#query-profile)) shows that a query takes 800 microseconds
    to execute, but your application performance monitoring (APM) shows that the query
    takes 60.8 milliseconds to execute: 800 µs for MySQL, and 60 ms for network latency
    from sea to shining sea.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Network latency over long distances is physically limited by the speed of light
    and exacerbated by intermediate routing. Consequently, you cannot overcome this
    latency; you can only work around it. For example, refer to [“Enqueue Writes”](ch04.html#enqueue-writes):
    enqueue locally, write remotely—where *remotely* is any process that incurs high
    network latency.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switching back to local networks, it’s a good thing they’re blazing fast and
    stable because cloud providers typically store MySQL data on *network-attached
    storage*: hard drives connected to the server through a local network. By contrast,
    *locally-attached storage* (or *local storage*) is hard drives connected directly
    to the server. Cloud providers use network-attached storage for various reasons
    beyond the scope of this book. What’s important to know is that network-attached
    storage is much slower and less stable than local storage. All three major cloud
    providers—Amazon, Google, and Microsoft—publish “single-digit millisecond latency”
    for network-attached storage (using SSD),^([2](ch10.html#idm45829096375248)) with
    one exception: Amazon io2 Block Express has submillisecond latency. The bottom
    line is, when using MySQL in the cloud, expect the storage to have single-digit
    millisecond latency, which is equivalent to a spinning disk.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Network-attached storage is an order of magnitude slower than local storage
    (with SSD; don’t use spinning disks), but is it a problem that you should address?
    If you’re migrating MySQL to the cloud from bare metal hardware with high-end
    local storage *and* the application heavily and consistently utilizes the local
    storage IOPS (see [“IOPS”](ch06.html#metrics-iops)), then yes: verify that the
    increased latency of network-attached storage does not cause a ripple effect of
    performance degradation (because IOPS incur the latency). (Heavy and consistent
    utilization of IOPS is a hallmark of a write-heavy workload: see [“Read/Write”](ch04.html#ap-read-write).)
    But if you’re already in the cloud, or starting a new application in the cloud,
    then no: don’t worry or think about storage latency in the cloud. Instead, lay
    a foundation of highly optimized queries (indexes), data, and access patterns—as
    covered in Chapters [2](ch02.html#ch02), [3](ch03.html#ch03), and [4](ch04.html#ch04),
    respectively—and storage latency in the cloud may never be an issue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If storage latency in the cloud is a problem, then you need to optimize the
    workload further, shard ([Chapter 5](ch05.html#ch05)), or purchase better (more
    expensive) cloud storage. Remember: Netflix runs in the cloud, as do other very
    large and successful companies. The performance potential for MySQL in the cloud
    is virtually unlimited. The question is: can you afford it?'
  prefs: []
  type: TYPE_NORMAL
- en: Performance Is Money
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fittingly, the beginning of this book—[“A True Story of False Performance”](ch01.html#a-true-story)—mirrors
    the end. But in the cloud, customers sell themselves more RAM to “fix” MySQL performance.
    An engineer at one of the three major cloud providers told me that most MySQL
    instances are over-provisioned: customers pay for more capacity than the application
    needs or utilizes.^([3](ch10.html#idm45829096356448))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Has the industry come full circle and now, with the ease of scalability in
    the cloud, performance is simply a larger instance? No, definitely not: *performance
    is query response time*; and in the cloud, every byte and millisecond of performance
    is billed hourly, which makes all the best practices and techniques in this book
    more important than ever.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have used any services in the cloud, then the following information
    probably won’t surprise you. But if you’re new to the cloud, then let me be the
    first to tell you: cloud pricing is complex, nearly intractable, and frequently
    underestimated (which means over budget). That’s true when engineers make a concerted
    effort to estimate and control cloud costs; when they don’t, I have seen six-figure
    surprises: more than $100,000 over budget. Following are the three most important
    things to know to avoid billing surprises when using MySQL in the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to know is that *the price doubles* for each level of the underlying
    compute (the virtual server that runs MySQL) because the resources (vCPU count
    and memory size) at each level double. For example, if the minimum level of compute
    is 2 vCPU and 8 GB RAM, the next level up is 4 vCPU and 16 GB RAM—and the price
    doubles, too. There are a few exceptions, but expect doubling. As a result, you
    cannot gradually increase costs; you double costs for each level of compute that
    you scale up. From an engineering point of view, scaling up from 2 vCPU to 8 vCPU
    is still a very small compute, but the price quadruples. To put this in perspective,
    imagine if your monthly mortgage or rent payment doubled, or your car payment
    doubled, or your student loan payment doubled. You would probably be upset—and
    rightly so.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing to know is that everything in the cloud costs money. Compute
    costs are just the beginning. The following list includes common charges for MySQL
    in the cloud in addition to compute costs:'
  prefs: []
  type: TYPE_NORMAL
- en: Storage type (IOPS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data storage (size)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backups (size and retention)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs (size and retention)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability (replicas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-region data transfer (size)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption keys (to encrypt data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secrets (to store passwords)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Moreover, those charges are per-instance. For example, if you create five read
    replicas, each replica is billed for data store, backups, and so forth. I wish
    it were simpler, but this is the reality: you need to investigate, understand,
    and estimate all costs when using MySQL in the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some proprietary versions of MySQL in the cloud (see [“Compatibility”](#cloud-compat))
    have additional costs, or a completely different pricing model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third and final thing to know is that cloud providers offer discounts.
    Don’t pay full price. At at minimum, costs can be significantly reduced with a
    one or three year commitment, rather than paying month to month. Other discounts
    vary by cloud provider: look for (or ask about) reserved instances, committed
    usage, and volume discounts. If your company relies on the cloud, then it has
    most likely negotiated a contract with the cloud provider. Find out if that’s
    the case and whether any of the contract pricing details affect costs for MySQL
    in the cloud. If you’re lucky, the contract might reduce *and* simplify costs,
    which allows you to focus on the fun details of using MySQL.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter highlighted what to know when using MySQL in the cloud. The substantial
    takeaway points are:'
  prefs: []
  type: TYPE_NORMAL
- en: Code and feature compatibility of MySQL varies in the cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your due diligence is to know any code or feature incompatibilities compared
    to open source MySQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL can be partially or fully managed, depending on cloud provider or third-party
    company.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network latency over wide-area networks increases query response time by tens
    or hundreds of milliseconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data for MySQL in the cloud is usually stored on network-attached storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network-attached storage has single-digit millisecond latency, which is equivalent
    to a spinning disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cloud charges for everything, and costs can (and often do) go over budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud providers offer discounts; don’t pay full price.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance is query response time in the cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the last chapter, but don’t `\q` yet: there’s one more practice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Practice: Try MySQL in the Cloud'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of this practice is to try MySQL in the cloud—just to see how it works,
    no DBA work required. On the one hand, I don’t want to provide any of the following
    five cloud providers free marketing—this book is strictly technical. But on the
    other hand, using MySQL in the cloud is increasingly common, so I want you to
    be prepared and successful. Plus, this is a *free trial*: the following five cloud
    providers have a free tier or an initial account credit. Don’t pay for anything
    yet: cloud providers must earn your business and money by proving the value of
    their services to you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try creating and using MySQL with any one (or several) of these cloud providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[MySQL Database Service](https://oreil.ly/Z7ZA8) by Oracle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SkySQL](https://oreil.ly/tn1KY) by MariaDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Relational Database Service (RDS)](https://oreil.ly/yNPfc) by Amazon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure Database for MySQL](https://oreil.ly/Tj3Y1) by Microsoft'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cloud SQL](https://oreil.ly/pnsVt) by Google'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you find that one is easy to use and potentially valuable, investigate its
    pricing model and additional costs. I specifically use the verb *investigate*
    because, as I mention in [“Performance Is Money”](#cloud-money): cloud pricing
    is complex, nearly intractable, and frequently underestimated (which means over
    budget).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Don’t forget to destroy your MySQL instance in the cloud before the free trial
    ends or the initial account credit reaches zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the last practice in this book, but I encourage you to keep learning
    and practicing because MySQL continues to evolve—so does the cloud. For this reason,
    even MySQL experts must continue to learn and practice, and that reminds me of
    a Zen proverb on which I end this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Chop wood. Carry water.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '^([1](ch10.html#idm45829096382992-marker)) Technically, all networks are equally
    fast: the speed of light. The problem is physical distance and intermediate routing
    over long distances.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch10.html#idm45829096375248-marker)) See [Amazon EBS features](https://oreil.ly/NIly1),
    [block storage performance on Google](https://oreil.ly/7Zxaj), and [premium storage
    with Microsoft Azure](https://oreil.ly/LMg03).
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch10.html#idm45829096356448-marker)) Due to nondisclosure agreements,
    I cannot cite the source.
  prefs: []
  type: TYPE_NORMAL
