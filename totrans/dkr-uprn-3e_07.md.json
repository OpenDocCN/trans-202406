["```\n$ docker version\nClient:\n Cloud integration: v1.0.24\n Version:           20.10.17\n API version:       1.41\n Go version:        go1.17.11\n Git commit:        100c701\n Built:             Mon Jun  6 23:04:45 2022\n OS/Arch:           darwin/amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Desktop 4.10.1 (82475)\n Engine:\n Version:          20.10.17\n API version:      1.41 (minimum version 1.12)\n Go version:       go1.17.11\n Git commit:       a89b842\n Built:            Mon Jun  6 23:01:23 2022\n OS/Arch:          linux/amd64\n Experimental:     false\n containerd:\n Version:          1.6.6\n GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1\n runc:\n Version:          1.1.2\n GitCommit:        v1.1.2-0-ga916309\n docker-init:\n Version:          0.19.0\n GitCommit:        de40ad0\n```", "```\n$ docker system info\nClient:\n…\n Plugins:\n buildx: Docker Buildx (Docker Inc., v0.8.2)\n compose: Docker Compose (Docker Inc., v2.6.1)\n extension: Manages Docker extensions (Docker Inc., v0.2.7)\n sbom: View the packaged-based Software Bill Of Materials (SBOM) …\n scan: Docker Scan (Docker Inc., v0.17.0)\n\nServer:\n Containers: 11\n…\n Images: 6\n Server Version: 20.10.17\n Storage Driver: overlay2\n…\n Plugins:\n Volume: local\n Network: bridge host ipvlan macvlan null overlay\n Log: awslogs fluentd gcplogs gelf journald json-file local logentries …\n…\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n…\n Kernel Version: 5.10.104-linuxkit\n Operating System: Docker Desktop\n OSType: linux\n Architecture: x86_64\n…\n```", "```\n$ sudo dockerd \\\n    -H unix:///var/run/docker.sock \\\n    --data-root=\"/data/docker\"\n```", "```\n$ docker image pull ubuntu:latest\n\nlatest: Pulling from library/ubuntu\n405f018f9d1d: Pull complete\nDigest: sha256:b6b83d3c331794420340093eb706a6f152d9c1fa51b262d9bf34594887c2c7ac\nStatus: Downloaded newer image for ubuntu:latest\ndocker.io/library/ubuntu:latest\n```", "```\nsha256:b6b83d3c331794420340093eb706a6f152d9c1fa51b262d9bf34594887c2c7ac\n```", "```\n$ docker image pull ubuntu@sha256:b6b83d3c331794420340093eb706a6f152d…\n```", "```\n$ docker container run --rm -d -t ubuntu /bin/bash\n3c4f916619a5dfc420396d823b42e8bd30a2f94ab5b0f42f052357a68a67309b\n```", "```\n$ docker container ls\nCONTAINER ID  IMAGE         COMMAND     … STATUS        …  NAMES\n3c4f916619a5  ubuntu:latest \"/bin/bash\" … Up 31 seconds …  angry_mestorf\n```", "```\n$ docker container inspect 3c4f916619a5\n```", "```\n[{\n    \"Id\": \"3c4f916619a5dfc420396d823b42e8bd30a2f94ab5b0f42f052357a68a67309b\",\n    \"Created\": \"2022-07-17T17:26:53.611762541Z\",\n    …\n    \"Args\": [],\n    …\n    \"Image\": \"sha256:27941809078cc9b2802deb2b0bb6feed6c…7f200e24653533701ee\",\n    …\n    \"Config\": {\n        \"Hostname\": \"3c4f916619a5\",\n        …\n        \"Env\": [\n          \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n        ],\n        \"Cmd\": [\n            \"/bin/bash\"\n        ],\n        …\n        \"Image\": \"ubuntu\",\n        …\n    },\n    …\n}]\n```", "```\n$ docker container run --rm -it ubuntu:22.04 /bin/bash\n```", "```\nroot@35fd1ad27228:/# ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 17:45 pts/0    00:00:00 /bin/bash\nroot         9     1  0 17:47 pts/0    00:00:00 ps -ef\n```", "```\nroot@35fd1ad27228:/# exit\n```", "```\n$ docker container run --rm ubuntu:22.04 /bin/false\n$ echo $?\n1\n```", "```\n$ docker container run --rm ubuntu:22.04 /bin/true\n$ echo $?\n0\n```", "```\n$ docker container run --rm ubuntu:22.04 /bin/cat /etc/passwd\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n…\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\n\n$ docker container run --rm ubuntu:22.04 /bin/cat /etc/passwd | wc -l\n\n19\n```", "```\n$ docker container run -d --rm  ubuntu:22.04 sleep 600\n9f09ac4bcaa0f201e31895b15b479d2c82c30387cf2c8a46e487908d9c285eff\n```", "```\n$ docker container exec -it 9f09ac4bcaa0 /bin/bash\nroot@9f09ac4bcaa0:/#\n```", "```\nroot@9f09ac4bcaa0:/# ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 20:22 ?        00:00:00 sleep 600\nroot         7     0  0 20:23 pts/0    00:00:00 /bin/bash\nroot        15     7  0 20:23 pts/0    00:00:00 ps -ef\n```", "```\n$ docker volume ls\nDRIVER              VOLUME NAME\n\n$ docker container run --rm -d -v /tmp:/tmp ubuntu:latest sleep 120\n6fc97c50fb888054e2d01f0a93ab3b3db172b2cd402fc1cd616858b2b5138857\n\n$ docker volume ls\nDRIVER              VOLUME NAME\n```", "```\n$ docker volume create my-data\n```", "```\n$ docker volume ls\n\nDRIVER              VOLUME NAME\nlocal               my-data\n\n$ docker volume inspect my-data\n```", "```\n[\n    {\n        \"CreatedAt\": \"2022-07-31T16:19:42Z\",\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/my-data/_data\",\n        \"Name\": \"my-data\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]\n```", "```\n $ docker container run --rm \\\n     --mount source=my-data,target=/app \\\n     ubuntu:latest touch /app/my-persistent-data\n```", "```\n$ docker container run --rm \\\n    --mount source=my-data,target=/app \\\n    fedora:latest ls -lFa /app/my-persistent-data\n\n-rw-r--r-- 1 root root 0 Jul 31 16:24 /app/my-persistent-data\n```", "```\n$ docker volume rm my-data\n\nmy-data\n```", "```\nError response from daemon: unable to remove volume:\n    remove my-data: volume is in use - [\n    d0763e6e8d79e55850a1d3ab21e9d…,\n    4b40d52978ea5e784e66ddca8bc22…]\n```", "```\n$ docker container run --rm -d --name nginx-test --rm nginx:latest\n```", "```\n$ docker container logs nginx-test\n…\n2022/07/31 16:36:05 [notice] 1#1: using the \"epoll\" event method\n2022/07/31 16:36:05 [notice] 1#1: nginx/1.23.1\n2022/07/31 16:36:05 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)\n2022/07/31 16:36:05 [notice] 1#1: OS: Linux 5.10.104-linuxkit\n…\n```", "```\n{\"log\":\"2022/07/31 16:36:05 [notice] 1#1: using the \\\"epoll\\\" event method\\n\",\n  \"stream\":\"stderr\",\"time\":\"2022-07-31T16:36:05.189234362Z\"}\n```", "```\n$ docker container logs -f nginx-test\n…\n2022/07/31 16:36:05 [notice] 1#1: start worker process 35\n2022/07/31 16:36:05 [notice] 1#1: start worker process 36\n2022/07/31 16:36:05 [notice] 1#1: start worker process 37\n2022/07/31 16:36:05 [notice] 1#1: start worker process 38\n```", "```\n---\n$ docker container stop nginx-test\n---\n```", "```\n$ docker container run --rm -d --name stress \\\n    docker.io/spkane/train-os:latest \\\n    stress -v --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 60s\n```", "```\n$ docker container stats stress\nCONTAINER ID NAME   CPU %   MEM USAGE/LIMIT   MEM % NET I/O   BLOCK I/O PIDS\n1a9f52f0855f stress 476.50% 36.09MiB/7.773GiB 0.45% 1.05kB/0B 0B/0B     6\n```", "```\n$ docker container run --rm -d --name stress \\\n    docker.io/spkane/train-os:latest \\\n    stress -v --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 60s\n```", "```\n$ curl --no-buffer -XGET --unix-socket /var/run/docker.sock \\\n    http://docker/containers/stress/stats\n```", "```\n$ curl -s -XGET --unix-socket /var/run/docker.sock \\\n    http://docker/containers/stress/stats | head -n 1 | jq\n```", "```\n$ curl -s -XGET --unix-socket /var/run/docker.sock \\\n    http://docker/containers/stress/stats | head -n 1 | jq\n```", "```\n{\n  \"read\": \"2022-07-31T17:41:59.10594836Z\",\n  \"preread\": \"0001-01-01T00:00:00Z\",\n  \"pids_stats\": {\n    \"current\": 6,\n    \"limit\": 18446744073709552000\n  },\n  \"blkio_stats\": {\n    \"io_service_bytes_recursive\": [\n      {\n        \"major\": 254,\n        \"minor\": 0,\n        \"op\": \"read\",\n        \"value\": 0\n      },\n…\n    ]\n  },\n  \"num_procs\": 0,\n  \"storage_stats\": {},\n  \"cpu_stats\": {\n    \"cpu_usage\": {\n      \"total_usage\": 101883204000,\n      \"usage_in_kernelmode\": 43818021000,\n      \"usage_in_usermode\": 58065183000\n…\n    },\n  },\n  \"memory_stats\": {\n    \"usage\": 183717888,\n    \"stats\": {\n      \"active_anon\": 0,\n      \"active_file\": 0,\n…\n    },\n    \"limit\": 8346021888\n  },\n  \"name\": \"/stress\",\n  \"id\": \"9be7c9de26864ac97e07fc3d8e3ffb5bb52cc2ba49f569d4ba8d407f8747851f\",\n  \"networks\": {\n    \"eth0\": {\n      \"rx_bytes\": 1046,\n      \"rx_packets\": 9,\n…\n    }\n  }\n}\n```", "```\n$ git clone https://github.com/spkane/rocketchat-hubot-demo.git \\\n    --config core.autocrlf=input\n$ cd rocketchat-hubot-demo/mongodb/docker\n```", "```\nFROM docker.io/bitnami/mongodb:4.4\n# Newer Upstream Dockerfile:\n# https://github.com/bitnami/containers/blob/\n# f9fb3f8a6323fb768fd488c77d4f111b1330bd0e/bitnami/mongodb\n# /5.0/debian-11/Dockerfile\n\nCOPY docker-healthcheck /usr/local/bin/\n\n# Useful Information:\n# https://docs.docker.com/engine/reference/builder/#healthcheck\n# https://docs.docker.com/compose/compose-file/#healthcheck\nHEALTHCHECK CMD [\"docker-healthcheck\"]\n```", "```\nEXPOSE 27017\nENTRYPOINT [ \"/opt/bitnami/scripts/mongodb/entrypoint.sh\" ]\nCMD [ \"/opt/bitnami/scripts/mongodb/run.sh\" ]\n```", "```\n$ docker image build -t mongo-with-check:4.4 .\n => [internal] load build definition from Dockerfile                      0.0s\n => => transferring dockerfile: 37B                                       0.0s\n => [internal] load .dockerignore                                         0.0s\n => => transferring context: 2B                                           0.0s\n => [internal] load metadata for docker.io/bitnami/mongodb:4.4            0.5s\n => [internal] load build context                                         0.0s\n => => transferring context: 40B                                          0.0s\n => CACHED [1/2] FROM docker.io/bitnami/mongodb:4.4@sha256:9162…ae209     0.0s\n => [2/2] COPY docker-healthcheck /usr/local/bin/                         0.0s\n => exporting to image                                                    0.0s\n => => exporting layers                                                   0.0s\n => => writing image sha256:a6ef…da808                                    0.0s\n => => naming to docker.io/library/mongo-with-check:4.4                   0.0s\n```", "```\n$ docker container run -d --rm --name mongo-hc mongo-with-check:4.4\n5a807c892428ab0641232c82bd477fc8d1142c9e15c27d5946b8bfe7056e2695\n\n$ docker container ls\n… IMAGE                   … STATUS                      PORTS     …\n… mongo-with-check:4.4 … Up 1 second (health: starting) 27017/tcp …\n```", "```\n$ docker container ls\n… IMAGE                   … STATUS               PORTS     …\n… mongo-with-check:4.4 … Up 32 seconds (healthy) 27017/tcp …\n```", "```\n$ docker container inspect --format='{{.State.Health.Status}}' mongo-hc\nhealthy\n\n$ docker container inspect --format='{{json .State.Health}}' mongo-hc | jq\n```", "```\n{\n  \"Status\": \"healthy\",\n  \"FailingStreak\": 0,\n  \"Log\": [\n    …\n  ]\n}\n```", "```\n$ docker container ls\n… IMAGE                   … STATUS                PORTS     …\n… mongo-with-check:4.4 … Up 9 minutes (unhealthy) 27017/tcp …\n```", "```\n$ docker system events\n```", "```\n$ docker container run --rm --name sleeper debian:latest sleep 5\n```", "```\n…09:59.606… container create d6… (image=debian:latest, name=sleeper)\n…09:59.610… container attach d6… (image=debian:latest, name=sleeper)\n…09:59.631… network connect ea… (container=d60b…, name=bridge, type=bridge)\n…09:59.827… container start d6… (image=debian:latest, name=sleeper)\n…10:04.854… container die d6… (exitCode=0, image=debian:latest, name=sleeper)\n…10:04.907… network disconnect ea… (container=d60b…, name=bridge, type=bridge)\n…10:04.922… container destroy d6… (image=debian:latest, name=sleeper)\n```", "```\n$ docker container run \\\n  --volume=/:/rootfs:ro \\\n  --volume=/var/run:/var/run:ro \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  --volume=/dev/disk/:/dev/disk:ro \\\n  --publish=8080:8080 \\\n  --detach=true \\\n  --name=cadvisor \\\n  --privileged \\\n  --rm \\\n  --device=/dev/kmsg \\\n  gcr.io/cadvisor/cadvisor:latest\n\nUnable to find image 'cadvisor/cadvisor:latest' locally\nPulling repository cadvisor/cadvisor\nf0643dafd7f5: Download complete\n…\nba9b663a8908: Download complete\nStatus: Downloaded newer image for cadvisor/cadvisor:latest\nf54e6bc0469f60fd74ddf30770039f1a7aa36a5eda6ef5100cddd9ad5fda350b\n```", "```\n$ curl http://172.17.42.10:8080/api/v2.1/machine/\n```", "```\n{\n  \"experimental\": true,\n  \"metrics-addr\": \"0.0.0.0:9323\"\n}\n```", "```\n$ curl -s http://localhost:9323/metrics | head -15\n\n# HELP builder_builds_failed_total Number of failed image builds\n# TYPE builder_builds_failed_total counter\nbuilder_builds_failed_total{reason=\"build_canceled\"} 0\nbuilder_builds_failed_total{reason=\"build_target_not_reachable_error\"} 0\nbuilder_builds_failed_total{reason=\"command_not_supported_error\"} 0\nbuilder_builds_failed_total{reason=\"dockerfile_empty_error\"} 0\nbuilder_builds_failed_total{reason=\"dockerfile_syntax_error\"} 0\nbuilder_builds_failed_total{reason=\"error_processing_commands_error\"} 0\nbuilder_builds_failed_total{reason=\"missing_onbuild_arguments_error\"} 0\nbuilder_builds_failed_total{reason=\"unknown_instruction_error\"} 0\n# HELP builder_builds_triggered_total Number of triggered image builds\n# TYPE builder_builds_triggered_total counter\nbuilder_builds_triggered_total 0\n# HELP engine_daemon_container_actions_seconds The number of seconds it\n# takes to process each container action\n# TYPE engine_daemon_container_actions_seconds histogram\n```", "```\n# Scrape metrics every 5 seconds and name the monitor 'stats-monitor'\nglobal:\n  scrape_interval: 5s\n  external_labels:\n    monitor: 'stats-monitor'\n\n# We're going to name our job 'DockerStats' and we'll connect to the docker0\n# bridge address to get the stats. If your docker0 has a different IP address\n# then use that instead. 127.0.0.1 and localhost will not work.\nscrape_configs:\n  - job_name: 'DockerStats'\n    static_configs:\n    - targets: ['172.17.0.1:9323']\n```", "```\n$ docker container run --rm -d -p 9090:9090 \\\n    -v /tmp/prometheus/prometheus.yaml:/etc/prometheus.yaml \\\n    prom/prometheus --config.file=/etc/prometheus.yaml\n```"]