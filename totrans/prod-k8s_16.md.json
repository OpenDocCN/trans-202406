["```\nFROM gcr.io/distroless/base\nUSER nonroot:nonroot\nCOPY ./my-app /my-app\nCMD [\"./my-app\", \"serve\"]\n```", "```\nFROM alpine:3.12\n<...snip...>\nRUN [\"apk\", \"add\", \"imagemagick=7.0.10.25-r0\"]\n<...snip...>\n```", "```\n# Build stage\nFROM golang:1.12.7 as build ![1](assets/1.png)\n\nWORKDIR /my-app\n\nCOPY go.mod . ![2](assets/2.png)\nRUN go mod download\n\nCOPY main.go .\nENV CGO_ENABLED=0\nRUN go build -o my-app\n\n# Deploy stage\nFROM gcr.io/distroless/base ![3](assets/3.png)\nUSER nonroot:nonroot ![4](assets/4.png)\nCOPY --from=build --chown=nonroot:nonroot /my-app/my-app /my-app ![5](assets/5.png)\nCMD [\"/my-app\"]\n```", "```\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: git-clone\nspec:\n  workspaces:\n    - name: output\n      description: \"The git repo will be cloned onto the \\\n      volume backing this workspace\"\n  params:\n    - name: url\n      description: git url to clone\n      type: string\n    - name: revision\n      description: git revision to checkout (branch, tag, sha, refâ€¦)\n      type: string\n      default: master\n    <...snip...>\n  results:\n    - name: commit\n      description: The precise commit SHA that was fetched by this Task\n  steps:\n    - name: clone\n      image: \"gcr.io/tekton-releases/github.com/tektoncd/\\\n      pipeline/cmd/git-init:v0.12.1\"\n      script: |\n        CHECKOUT_DIR=\"$(workspaces.output.path)/$(params.subdirectory)\"\n        <...snip...>\n        /ko-app/git-init \\\n          -url \"$(params.url)\" \\\n          -revision \"$(params.revision)\" \\\n          -refspec \"$(params.refspec)\" \\\n          -path \"$CHECKOUT_DIR\" \\\n          -sslVerify=\"$(params.sslVerify)\" \\\n          -submodules=\"$(params.submodules)\" \\\n          -depth \"$(params.depth)\"\n        cd \"$CHECKOUT_DIR\"\n        RESULT_SHA=\"$(git rev-parse HEAD | tr -d '\\n')\"\n        EXIT_CODE=\"$?\"\n        if [ \"$EXIT_CODE\" != 0 ]\n        then\n          exit $EXIT_CODE\n        fi\n        # Make sure we don't add a trailing newline to the result!\n        echo -n \"$RESULT_SHA\" > $(results.commit.path)\n```", "```\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: buildpacks-phases\n  labels:\n    app.kubernetes.io/version: \"0.1\"\n  annotations:\n    tekton.dev/pipelines.minVersion: \"0.12.1\"\n    tekton.dev/tags: image-build\n    tekton.dev/displayName: \"buildpacks-phases\"\nspec:\n  params:\n    - name: BUILDER_IMAGE\n      description: \"The image on which builds will run \\\n      (must include lifecycle and compatible buildpacks).\"\n    - name: PLATFORM_DIR\n      description: The name of the platform directory.\n      default: empty-dir\n    - name: SOURCE_SUBPATH\n      description: \"A subpath within the `source` input \\\n      where the source to build is located.\"\n      default: \"\"\n\n  resources:\n    outputs:\n      - name: image\n        type: image\n\n  workspaces:\n    - name: source\n\n  steps:\n    <...snip...>\n    - name: build\n      image: $(params.BUILDER_IMAGE)\n      imagePullPolicy: Always\n      command: [\"/cnb/lifecycle/builder\"]\n      args:\n        - \"-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)\"\n        - \"-layers=/layers\"\n        - \"-group=/layers/group.toml\"\n        - \"-plan=/layers/plan.toml\"\n      volumeMounts:\n        - name: layers-dir\n          mountPath: /layers\n        - name: $(params.PLATFORM_DIR)\n          mountPath: /platform\n        - name: empty-dir\n          mountPath: /tekton/home\n    <...snip...>\n```"]