["```\n{\n    \"resource\": \"/items\",\n    \"path\": \"/items\",\n    \"httpMethod\": \"GET\",\n    \"headers\": { /* header info */ },\n    \"multiValueHeaders\": { /* multi value header info */ },\n    \"queryStringParameters\": null,\n    \"multiValueQueryStringParameters\": null,\n    \"pathParameters\": null,\n    \"stageVariables\": null,\n    \"requestContext\": {\n        \"resourceId\": \"b16tgj\",\n        \"resourcePath\": \"/items\",\n        \"httpMethod\": \"GET\",\n        \"extendedRequestId\": \"CzuJMEDMoAMF_MQ=\",\n        \"requestTime\": \"07/Nov/2019:21:46:09 +0000\",\n        \"path\": \"/dev/items\",\n        \"accountId\": \"557458351015\",\n        \"protocol\": \"HTTP/1.1\",\n        \"stage\": \"dev\",\n        \"domainPrefix\": \"eq4ttnl94k\",\n        \"requestTimeEpoch\": 1573163169162,\n        \"requestId\": \"1ac70afe-d366-4a52-9329-5fcbcc3809d8\",\n        \"identity\": {\n          \"cognitoIdentityPoolId\": \"\",\n          \"accountId\": \"\",\n          \"cognitoIdentityId\": \"\",\n          \"caller\": \"\",\n          \"apiKey\": \"\",\n          \"sourceIp\": \"192.168.100.1\",\n          \"cognitoAuthenticationType\": \"\",\n          \"cognitoAuthenticationProvider\": \"\",\n          \"userArn\": \"\",\n          \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\n          AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82\n          Safari/537.36 OPR/39.0.2256.48\",\n          \"user\": \"\"\n        },\n        \"domainName\": \"eq4ttnl94k.execute-api.us-east-1.amazonaws.com\",\n        \"apiId\": \"eq4ttnl94k\"\n    },\n    \"body\": null,\n    \"isBase64Encoded\": false\n}\n```", "```\n{\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.1\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-2\",\n      \"eventTime\": \"2019-09-03T19:37:27.192Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"AWS:AIDAINPONIXQXHT3IKHL2\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"205.255.255.255\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"D82B88E5F771F645\",\n        \"x-amz-id-2\": \"vlR7PnpV2Ce81l0PRw6jlUpck7Jo5ZsQjryTjKlc5aLWGVHPZLj\n                       5NeC6qMa0emYBDXOo6QBU0Wo=\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"828aa6fc-f7b5-4305-8584-487c791949c1\",\n        \"bucket\": {\n          \"name\": \"lambda-artifacts-deafc19498e3f2df\",\n          \"ownerIdentity\": {\n            \"principalId\": \"A3I5XTEXAMAI3E\"\n          },\n          \"arn\": \"arn:aws:s3:::lambda-artifacts-deafc19498e3f2df\"\n        },\n        \"object\": {\n          \"key\": \"b21b84d653bb07b05b1e6b33684dc11b\",\n          \"size\": 1305107,\n          \"eTag\": \"b21b84d653bb07b05b1e6b33684dc11b\",\n          \"sequencer\": \"0C0F6F405D6ED209E1\"\n        }\n      }\n    }\n  ]\n}\n```", "```\n{\n    \"version\": \"1\",\n    \"region\": \"us-east-1\",\n    \"userPoolId\": \"us-east-1_uVWAMpQuY\",\n    \"userName\": \"dabit3\",\n    \"callerContext\": {\n        \"awsSdkVersion\": \"aws-sdk-unknown-unknown\",\n        \"clientId\": \"2ects9inqraapp43ejve80pv12\"\n    },\n    \"triggerSource\": \"PostConfirmation_ConfirmSignUp\",\n    \"request\": {\n        \"userAttributes\": {\n            \"sub\": \"164961f8-13f7-40ed-a8ca-d441d8ec4724\",\n            \"cognito:user_status\": \"CONFIRMED\",\n            \"email_verified\": \"true\",\n            \"phone_number_verified\": \"false\",\n            \"phone_number\": \"+16018127241\",\n            \"email\": \"dabit3@gmail.com\"\n        }\n    },\n    \"response\": {}\n}\n```", "```\n~ npx create-react-app lambda-trigger-example\n~ cd lambda-trigger-example\n~ npm install aws-amplify @aws-amplify/ui-react uuid\n```", "```\n~ amplify init\n# walk through the steps like we've done in the previous projects\n```", "```\n~ amplify add auth\n\n? Do you want to use the default authentication and security configuration?\n  Default configuration\n? How do you want users to be able to sign in? Username\n? Do you want to configure advanced settings? Yes\n? What attributes are required for signing up? Email\n? Do you want to enable any of the following capabilities? Add User to Group\n? Enter the name of the group to which users will be added. Admin\n? Do you want to edit your add-to-group function now? Y\n```", "```\n// amplify/backend/function/<function_name>/src/add-to-group.js\n\nconst aws = require('aws-sdk');\n\nexports.handler = async (event, context, callback) => {\n  const cognitoProvider = new\n  aws.CognitoIdentityServiceProvider({\n    apiVersion: '2016-04-18'\n  });\n\n  let isAdmin = false\n  const adminEmails = ['dabit3@gmail.com']\n\n  // If the user is one of the admins, set the isAdmin variable to true\n  if (adminEmails.indexOf(event.request.userAttributes.email) !== -1) {\n    isAdmin = true\n  }\n\n  const groupParams = {\n    UserPoolId: event.userPoolId,\n  }\n\n  const userParams = {\n    UserPoolId: event.userPoolId,\n    Username: event.userName,\n  }\n\n  if (isAdmin) {\n    groupParams.GroupName = 'Admin',\n    userParams.GroupName = 'Admin'\n\n    // First check to see if the group exists, and if not create the group\n    try {\n      await cognitoProvider.getGroup(groupParams).promise();\n    } catch (e) {\n      await cognitoProvider.createGroup(groupParams).promise();\n    }\n\n    // If the user is an administrator, place them in the Admin group\n    try {\n      await cognitoProvider.adminAddUserToGroup(userParams).promise();\n      callback(null, event);\n    } catch (e) {\n      callback(e);\n    }\n  } else {\n    // If the user is in neither group, proceed with no action\n    callback(null, event)\n  }\n}\n```", "```\n~ amplify push\n```", "```\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n```", "```\nimport React, { useEffect, useState } from 'react'\nimport { Auth } from 'aws-amplify'\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react'\nimport './App.css'\n\nfunction App() {\n  const [user, updateUser] = useState(null)\n  useEffect(() => {\n    Auth.currentAuthenticatedUser()\n      .then(user => updateUser(user))\n      .catch(err => console.log(err));\n  }, [])\n  let isAdmin = false\n  if (user) {\n    const { signInUserSession: { idToken: { payload }} }  = user\n    console.log('payload: ', payload)\n    if (\n      payload['cognito:groups'] &&\n    payload['cognito:groups'].includes('Admin')\n    ) {\n      isAdmin = true\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header>\n      <h1>Hello World</h1>\n      { isAdmin && <p>Welcome, Admin</p> }\n      </header>\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nexport default withAuthenticator(App)\n```", "```\n~ npm start\n```", "```\n~ amplify console auth\n\n? Which console: User Pool\n\n> In the left hand menu, click on \"Users and Groups\"\n```", "```\n~ amplify add storage\n\n? Please select from one of the below mentioned services: Content\n? Please provide a friendly name for your resource that will be used to label\n  this category in the project: <your_resource_name>\n? Please provide bucket name: <your_globally_unique_bucket_name>\n? Who should have access: Auth and Guest users\n? What kind of access do you want for Authenticated users? Choose all\n  (create / update, read, & delete)\n? What kind of access do you want for Guest users? Choose all\n  (create / update, read, & delete)\n? Do you want to add a Lambda Trigger for your S3 Bucket? Y\n? Select from the following options: Create a new function\n? Do you want to edit the local S3Trigger18399e19 lambda function now? Y\n```", "```\n// amplify/backend/function/<functionname>/src/index.js\n\n// Import the sharp library\nconst sharp = require('sharp')\nconst aws = require('aws-sdk')\nconst s3 = new aws.S3()\n\nexports.handler = async function (event, context) { //eslint-disable-line\n  // If the event type is delete, return from the function\n  if (event.Records[0].eventName === 'ObjectRemoved:Delete') return\n\n  // Next, we get the bucket name and the key from the event.\n  const BUCKET = event.Records[0].s3.bucket.name\n  const KEY = event.Records[0].s3.object.key\n  try {\n    // Fetch the image data from S3\n    let image = await s3.getObject({ Bucket: BUCKET, Key: KEY }).promise()\n    image = await sharp(image.Body)\n\n    // Get the metadata from the image, including the width and the height\n    const metadata = await image.metadata()\n    if (metadata.width > 1000) {\n      // If the width is greater than 1000, the image is resized\n      const resizedImage = await image.resize({ width: 1000 }).toBuffer()\n      await s3.putObject({\n        Bucket: BUCKET,\n        Body: resizedImage,\n        Key: KEY\n      }).promise()\n      return\n    } else {\n      return\n    }\n  }\n  catch(err) {\n    context.fail(`Error getting files: ${err}`);\n  }\n};\n```", "```\n// amplify/backend/function/<functionname>/src/package.json\n{\n  \"name\": \"your-function-name\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Lambda function generated by Amplify\",\n  \"main\": \"index.js\",\n  \"license\": \"Apache-2.0\",\n  \"scripts\": {\n    \"install\": \"npm install --arch=x64 --platform=linux --target=10.15.0 sharp\"\n  },\n  \"dependencies\": {\n    \"sharp\": \"^0.23.2\"\n  }\n}\n```", "```\n~ amplify push\n```", "```\nimport React, { useState, useEffect} from 'react'\nimport { Storage } from 'aws-amplify'\nimport { v4 as uuid } from 'uuid'\nimport './App.css'\n\nfunction App() {\n  const [images, setImages] = useState([])\n  useEffect(() => {\n    fetchImages()\n  }, [])\n  async function onChange(e) {\n    /* When a file is uploaded, create a unique name and save it using\n       the Storage API */\n    const file = e.target.files[0];\n    const filetype = file.name.split('.')[file.name.split.length - 1]\n    await Storage.put(`${uuid()}.${filetype}`, file)\n    /* Once the file is uploaded, fetch the list of images */\n    fetchImages()\n  }\n  async function fetchImages() {\n    /* This function fetches the list of image keys from your S3 bucket */\n    const files = await Storage.list('')\n    /* Once we have the image keys, the images must be signed in order\n       for them to be displayed */\n    const signedFiles = await Promise.all(files.map(async file => {\n      /* To sign the images, we map over the image key array and get a\n         signed url for each image */\n      const signedFile = await Storage.get(file.key)\n      return signedFile\n    }))\n    setImages(signedFiles)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input\n          type=\"file\"\n          onChange={onChange}\n        />\n        {\n          images.map(image => (\n            <img\n              src={image}\n              key={image}\n              style={{ width: 500 }}\n            />\n          ))\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App\n```", "```\n~ npm start\n```"]