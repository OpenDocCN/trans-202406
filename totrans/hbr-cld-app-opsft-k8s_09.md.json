["```\napiVersion: tower.ansible.com/v1alpha1\nkind: AnsibleJob\nmetadata:\n name: snow-create-change-record\n namespace: pacman-app\n labels:\n   app.kubernetes.io/name: pacman\nspec:\n tower_auth_secret: toweraccess\n job_template_name: snow-create-change-record\n extra_vars:\n   app_name: pacman\n   change_request:\n     severity: 2\n     priority: 2\n     implementation_plan: \"Updated by Red Hat Advanced Cluster Management for \nKubernetes\"\n     justification: \"A new revision was available from the application channel in \nGitHub.\"\n     description: \"The following resources have been updated: [...]\"\n     risk_impact_analysis: \"Changes are made automatically based on approved \nchanges in GitHub.\"\n     test_plan: \"Run synthetic validation tests post-deployment.\"\n```", "```\n$ git clone --branch ansible \ngit@github.com:SPECIFY_YOUR_GITHUB_ORG/k8s-pacman-app.git\n\n```", "```\napiVersion: v1\nbaseDomain: SPECIFY_YOUR_BASE_DOMAIN\ncontrolPlane:\n hyperthreading: Enabled\n name: master\n replicas: 3\n platform:\n   aws:\n     type: m5.xlarge\n     rootVolume:\n       iops: 2000\n       size: 100\n       type: io1\ncompute:\n- hyperthreading: Enabled\n name: worker\n replicas: 4\n platform:\n   aws:\n     type: m5.xlarge\n     rootVolume:\n       size: 100\n       type: gp2\nmetadata:\n name: SPECIFY_YOUR_CLUSTER_NAME\nnetworking:\n clusterNetwork:\n - cidr: 10.128.0.0/14\n   hostPrefix: 23\n machineCIDR: 10.0.0.0/16\n networkType: OpenShiftSDN\n serviceNetwork:\n - 172.30.0.0/16\nplatform:\n aws:\n   region: us-east-1\n   userTags:\n     contact: SPECIFY_YOUR_EMAIL_ADDRESS\n     purpose: demo\npublish: External\npullSecret: 'SPECIFY_YOUR_PULL_SECRET'\nsshKey: |\n ssh-rsa SPECIFY_YOUR_SSH_RSA_PUBLIC_KEY\n\n```", "```\n$ cd hack/manifests/policies\n$ oc apply -f ansible-tower-policies-subscription.yaml\n```", "```\n$ oc get subs.operators --all-namespaces\nNAMESPACE                 NAME                        PACKAGE          \n             SOURCE                CHANNEL\nopen-cluster-management   acm-operator-subscription   advanced-cluster-\nmanagement   acm-custom-registry   release-2.2\ntower-resource-operator   awx-resource-operator       awx-resource-\noperator     redhat-operators      release-0.1\n\n$ oc get pvc -n tower\nNAME        STATUS  VOLUME                                CAPACITY  ACCESS \nMODES   STORAGECLASS AGE\npostgresql   Bound    pvc-1554a179-0947-4a65-9af0-81c5f2d8b476   5Gi        RWO      \n         gp2           3d20h\n```", "```\nlocalhost ansible_connection=local ansible_python_interpreter=\"/usr/bin/env python\"\n[all:vars]\n# This will create or update a default admin (superuser) account in Tower\nadmin_user=admin\nadmin_password='SPECIFY_YOUR_OWN_PASSWORD'\n# Tower Secret key\n# It's *very* important that this stay the same between upgrades or you will \n# lose the ability to decrypt your credentials\nsecret_key='SPECIFY_YOUR_OWN_PASSWORD'\n# Database Settings\n# =================\n# Set pg_hostname if you have an external postgres server, otherwise\n# a new postgres service will be created\n# pg_hostname=postgresql\n# If using an external database, provide your existing credentials.\n# If you choose to use the provided containerized Postgres depolyment, these\n# values will be used when provisioning the database.\npg_username='admin'\npg_password='SPECIFY_YOUR_OWN_PASSWORD'\npg_database='tower'\npg_port=5432\npg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL\n# Note: The user running this installer will need cluster-admin privileges.\n# Tower's job execution container requires running in privileged mode,\n# and a service account must be created for auto peer-discovery to work.\n# Deploy into Openshift\n# =====================\nopenshift_host=https://api.SPECIFY_YOUR_CLUSTER_ADDRESS:6443\nopenshift_skip_tls_verify=true\nopenshift_project=tower\nopenshift_user=kubeadmin\nopenshift_password=SPECIFY_YOUR_OPENSHIFT_CREDENTIALS\n# If you don't want to hardcode a password here, just do:\n# ./setup_openshift.sh -e openshift_token=$TOKEN\n# Skip this section if you BYO database. This is only used when you want the\n# installer to deploy a containerized Postgres deployment inside of your\n# OpenShift cluster. This is only recommended if you have experience storing and\n# managing persistent data in containerized environments.\n#\n#\n# Name of a PVC you've already provisioned for database:\nopenshift_pg_pvc_name=postgresql\n#\n# Or... use an emptyDir volume for the OpenShift Postgres pod.\n# Useful for demos or testing purposes.\n# openshift_pg_emptydir=true\n# Deploy into Vanilla Kubernetes\n# ==============================\n# kubernetes_context=test-cluster\n# kubernetes_namespace=ansible-tower\n```", "```\nkubernetes_task_image: quay.io/mdelder/ansible-tower-task\n```", "```\n$ cd hack/tower-setup/container_task_image\n$ docker build -t quay.io/YOUR_USERID/ansible-tower-task:3.7.2 \\\n-f Dockerfile.taskimage\n$ docker push quay.io/YOUR_USERID/ansible-tower-task:3.7.2\n\n```", "```\n$ ./setup_openshift.sh -e openshift_token=$TOKEN\n```", "```\n$ open https://$(oc get route -n tower ansible-tower-web-svc \\\n-ojsonpath='{.status.ingress[0].host}')\n\n```", "```\n$ cd hack/manifests\n$ oc apply ansible-tower-console-link.yaml\n\n```", "```\n# hack/tower-setup/tower_cli.cfg\n[general]\nhost = https://ansible-tower-web-svc-tower.apps.cluster.baseDomain\nverify_ssl = false\n#oauth_token = ALTERNATIVELY_USE_A_TOKEN\nusername = admin\n# password = SPECIFY_YOUR_OWN_PASSWORD\n```", "```\n$ oc get route -n tower ansible-tower-web-svc \\\n-ojsonpath='{.status.ingress[0].host}'\n```", "```\n# User and password for the F5 CloudServices account.\nf5aas_username: SPECIFY_YOUR_F5_USERNAME\nf5aas_password: SPECIFY_YOUR_F5_PASSWORD\n\n# Credentials for ServiceNow\nsnow_username: admin\nsnow_password: SPECIFY_YOUR_SERVICENOW_USERNAME\n# Specify your ServiceNow developer instance ID.\nsnow_instance: devXXXXX\n```", "```\n# Optionally specify the correct version of python required by Ansible\n# Of course, you must update the PYTHON var specific to your environment\n$ export PYTHON=\"/usr/local/Cellar/ansible/2.9.13/libexec/bin/python3.8\"\n$ $PYTHON -m pip install --upgrade ansible-tower-cli\n\n```", "```\n$ export PYTHON=\"/usr/local/Cellar/ansible/2.9.13/libexec/bin/python3.8\"\n$ ansible-playbook -e ansible_python_interpreter=\"$PYTHON\" tower-setup.yml\n\n```", "```\n    $ open https://$(oc get route -n tower ansible-tower-web-svc \\\n    -ojsonpath='{.status.ingress[0].host}')\n    ```", "```\n    apiVersion: v1\n    stringData:\n      host: ansible-tower-web-svc-\n    tower.apps.SPECIFY_YOUR_CLUSTER_NAME.SPECIFY_YOUR_BASE_DOMAIN\n      token: SPECIFY_YOUR_ANSIBLE_TOWER_ADMIN_TOKEN\n    kind: Secret\n    metadata:\n      name: toweraccess\n      namespace: pacman-app\n    type: Opaque\n    ```", "```\n$ oc new-project pacman-app\n$ oc apply -f hack/manifests/toweraccess-secret.yaml\n\n```", "```\n---\napiVersion: apps.open-cluster-management.io/v1\nkind: Channel\nmetadata:\n  name: pacman-app-latest\n  namespace: pacman-app\n  labels:\n    app.kubernetes.io/name: pacman\n  annotations:\n\n    apps.open-cluster-management.io/github-path: deploy\nspec:\n  type: GitHub\n  pathname: https://github.com/SPECIFY_YOUR_GITHUB_ORG/k8s-pacman-app.git\n  # secretRef:\n  #   name: github-credentials\n---\napiVersion: app.k8s.io/v1beta1\nkind: Application\nmetadata:\n  name: pacman-app\n  namespace: pacman-app\nspec:\n  componentKinds:\n  - group: apps.open-cluster-management.io\n    kind: Subscription\n  descriptor: {}\n  selector:\n    matchExpressions:\n    - key: app.kubernetes.io/name\n      operator: In\n      values:\n      - pacman\n---\napiVersion: apps.open-cluster-management.io/v1\nkind: Subscription\nmetadata:\n  annotations:\n    apps.open-cluster-management.io/git-branch: ansible\n    apps.open-cluster-management.io/github-path: deploy\n  name: pacman-app\n  namespace: pacman-app\n  labels:\n    app.kubernetes.io/name: pacman\nspec:\n  channel: pacman-app/pacman-app-latest\n  hooksecretref:\n    name: toweraccess\n  placement:\n    placementRef:\n      kind: PlacementRule\n      name: pacman-dev-clusters\n---\napiVersion: apps.open-cluster-management.io/v1\nkind: PlacementRule\nmetadata:\n name: pacman-dev-clusters\n namespace: pacman-app\nspec:\n clusterConditions:\n - status: \"True\"\n   type: ManagedClusterConditionAvailable\n clusterReplicas: 2\n clusterSelector:\n   # matchExpressions:\n   # - key: region\n   #   operator: In\n   #   values:\n   #   - us-east-1\n   #   - us-west-1\n   #   - europe-west3\n   matchLabels:\n     apps/pacman: deployed\n\n```", "```\n$ oc get placementrule -n pacman-app -oyaml\napiVersion: apps.open-cluster-management.io/v1\nkind: PlacementRule\nmetadata:\nname: pacman-app-placement-0\nnamespace: pacman-app\nspec:\nclusterSelector:\n    matchLabels:\n    apps/pacman: deployed\nstatus:\ndecisions:\n- clusterName: foxtrot-ap-northeast-1\n    clusterNamespace: foxtrot-ap-northeast-1\n- clusterName: foxtrot-gcp-europe\n    clusterNamespace: foxtrot-gcp-europe\n```"]