["```\njournal/\n  frontend/\n  redis/\n  fileserver/\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    # All pods in the Deployment will have this label\n    app: frontend\n  name: frontend\n  namespace: default\nspec:\n  # We should always have at least two replicas for reliability\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - image: my-repo/journal-server:v1-abcde\n        imagePullPolicy: IfNotPresent\n        name: frontend\n        # TODO: Figure out what the actual resource needs are\n        resources:\n          request:\n            cpu: \"1.0\"\n            memory: \"1G\"\n          limits:\n            cpu: \"1.0\"\n            memory: \"1G\"\n```", "```\ngit add frontend/deployment.yaml\ngit commit -m \"Added deployment\" frontend/deployment.yaml\nkubectl apply -f frontend/deployment.yaml\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: frontend\n  name: frontend\n  namespace: default\nspec:\n  ports:\n  - port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app: frontend\n  type: ClusterIP\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: frontend-ingress\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /testpath\n        pathType: Prefix\n        backend:\n          service:\n            name: test\n            port:\n              number: 8080\n```", "```\nkubectl create configmap frontend-config --from-literal=journalEntries=10\n```", "```\n...\n# The containers array in the PodTemplate inside the Deployment\ncontainers:\n  - name: frontend\n    ...\n    env:\n    - name: JOURNAL_ENTRIES\n      valueFrom:\n        configMapKeyRef:\n          name: frontend-config\n          key: journalEntries\n...\n```", "```\nkubectl create secret generic redis-passwd --from-literal=passwd=${RANDOM}\n```", "```\n...\n  volumes:\n  - name: passwd-volume\n    secret:\n    secretName: redis-passwd\n```", "```\n...\n  volumes:\n  - name: passwd-volume\n    csi:\n      driver: secrets-store.csi.k8s.io\n      readOnly: true\n      volumeAttributes:\n        secretProviderClass: \"azure-sync\"\n...\n```", "```\n...\n  volumeMounts:\n  - name: passwd-volume\n    readOnly: true\n    mountPath: \"/etc/redis-passwd\"\n...\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: frontend\n  name: frontend\n  namespace: default\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - image: my-repo/journal-server:v1-abcde\n        imagePullPolicy: IfNotPresent\n        name: frontend\n        volumeMounts:\n        - name: passwd-volume\n          readOnly: true\n          mountPath: \"/etc/redis-passwd\"\n        resources:\n          requests:\n            cpu: \"1.0\"\n            memory: \"1G\"\n          limits:\n            cpu: \"1.0\"\n            memory: \"1G\"\n      volumes:\n        - name: passwd-volume\n          secret:\n            secretName: redis-passwd\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: redis\nspec:\n  serviceName: \"redis\"\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:5-alpine\n        ports:\n        - containerPort: 6379\n          name: redis\n        volumeMounts:\n        - name: data\n          mountPath: /data\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 10Gi\n```", "```\n#!/bin/sh\n\nPASSWORD=$(cat /etc/redis-passwd/passwd)\n\nif [[ \"${HOSTNAME}\" == \"redis-0\" ]]; then\n  redis-server --requirepass ${PASSWORD}\nelse\n  redis-server --slaveof redis-0.redis 6379 --masterauth ${PASSWORD}\n    --requirepass ${PASSWORD}\nfi\n```", "```\nkubectl create configmap redis-config --from-file=./launch.sh\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: redis\nspec:\n  serviceName: \"redis\"\n  replicas: 3\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:5-alpine\n        ports:\n        - containerPort: 6379\n          name: redis\n        volumeMounts:\n        - name: data\n          mountPath: /data\n        - name: script\n          mountPath: /script/launch.sh\n          subPath: launch.sh\n        - name: passwd-volume\n          mountPath: /etc/redis-passwd\n        command:\n        - sh\n        - -c\n        - /script/launch.sh\n      volumes:\n      - name: script\n        configMap:\n          name: redis-config\n          defaultMode: 0777\n      - name: passwd-volume\n        secret:\n          secretName: redis-passwd\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 10Gi\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis\n  name: redis\n  namespace: default\nspec:\n  ports:\n  - port: 6379\n    protocol: TCP\n    targetPort: 6379\n  selector:\n    app: redis\n  sessionAffinity: None\n  type: ClusterIP\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-write\n  name: redis-write\nspec:\n  clusterIP: None\n  ports:\n  - port: 6379\n  selector:\n    app: redis\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: fileserver\n  name: fileserver\n  namespace: default\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: fileserver\n  template:\n    metadata:\n      labels:\n        app: fileserver\n    spec:\n      containers:\n      # This image is intended as an example, replace it with your own\n      # static files image.\n      - image: my-repo/static-files:v1-abcde\n        imagePullPolicy: Always\n        name: fileserver\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        resources:\n          requests:\n            cpu: \"1.0\"\n            memory: \"1G\"\n          limits:\n            cpu: \"1.0\"\n            memory: \"1G\"\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: fileserver\n  name: fileserver\n  namespace: default\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: fileserver\n  sessionAffinity: None\n  type: ClusterIP\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: frontend-ingress\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: fileserver\n            port:\n              number: 8080\n      # NOTE: this should come after /api or else it will hijack requests\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: fileserver\n            port:\n              number: 80\n```", "```\napiVersion: v1\nappVersion: \"1.0\"\ndescription: A Helm chart for our frontend journal server.\nname: frontend\nversion: 0.1.0\n```", "```\n...\nspec:\n  replicas: 2\n...\n```", "```\n...\nspec:\n  replicas: {{ .replicaCount }}\n...\n```", "```\nreplicaCount: 2\n```", "```\nhelm install path/to/chart --values path/to/environment/values.yaml\n```"]