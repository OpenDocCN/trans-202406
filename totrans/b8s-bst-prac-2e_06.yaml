- en: Chapter 6\. Versioning, Releases, and Rollouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章\. 版本控制、发布和部署
- en: One of the main complaints of traditional monolithic applications is that over
    time they begin to grow too large and unwieldy to properly upgrade, version, or
    modify at the speed the business requires. Many can argue that this is one of
    the critical factors that led to more Agile development practices and the advent
    of microservice architectures. Being able to quickly iterate on new code, solve
    new problems, or fix hidden problems before they become major issues, as well
    as the promise of zero-downtime upgrades, are all goals that development teams
    strive for. Practically, these issues can be solved with proper processes and
    procedures in place, no matter the type of system, but this usually comes at a
    much higher cost of both technology and human capital to maintain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的单体应用程序的主要问题之一是随着时间推移，它们开始变得过于庞大和笨拙，无法按照业务需要的速度进行正确升级、版本控制或修改。许多人认为，这是导致更敏捷开发实践和微服务架构出现的关键因素之一。能够快速迭代新代码、解决新问题或在它们成为主要问题之前修复隐藏问题，以及实现零停机升级的承诺，都是开发团队努力实现的目标。实际上，通过适当的流程和程序可以解决这些问题，无论是什么类型的系统，但这通常会以更高的技术和人力成本来维护。
- en: When designing systems, isolation and composability are important variables.
    The adoption of containers as the runtime for application code allows for this
    but still requires a high level of human automation or system management to maintain
    at a dependable level for large systems. Over time, the system grew, more brittleness
    was introduced, and systems engineers began to build complex automation processes
    to deliver on complex release, upgrade, and failure detection mechanisms. Service
    orchestrators such as Apache Mesos, HashiCorp Nomad, and even specialized container-based
    orchestrators such as Kubernetes and Docker Swarm have evolved these processes
    into more primitive components directly into their runtimes. Now, systems engineers
    can solve more complex system problems as the table stakes have been elevated
    to include the versioning, release, and deployment of applications into the system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计系统时，隔离性和组合性是重要的变量。采用容器作为应用代码的运行时可以实现这一点，但仍然需要高水平的人工自动化或系统管理来保持大型系统的可靠水平。随着时间的推移，系统变得更加脆弱，引入了更多脆弱性，并且系统工程师开始构建复杂的自动化流程，以实现复杂的发布、升级和故障检测机制。诸如
    Apache Mesos、HashiCorp Nomad 以及甚至专门的基于容器的编排器，如 Kubernetes 和 Docker Swarm，已经将这些流程进化为更原始的组件直接集成到它们的运行时中。现在，系统工程师可以解决更复杂的系统问题，因为基础已经提升到包括将应用程序版本控制、发布和部署到系统中。
- en: Versioning
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: This section is not meant to be a primer on software versioning and the history
    behind it; there are countless articles and computer science course books on the
    subject. The main thing is to pick a pattern and stick with it. The majority of
    software companies and developers have agreed that some form of *semantic versioning*
    is the most useful, especially in a microservice architecture in which a team
    that writes a certain microservice will depend on the API compatibility of other
    microservices that make up the system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节并非关于软件版本控制及其历史的入门介绍；关于这个主题有无数的文章和计算机科学课程书籍可供参考。最重要的是选择一种模式并坚持下去。大多数软件公司和开发者已经达成共识，某种形式的*语义化版本控制*是最有用的，特别是在微服务架构中，写作某个微服务的团队会依赖于构成系统的其他微服务的
    API 兼容性。
- en: For those new to semantic versioning, the basics are that it follows a three-part
    version number in a pattern of *major version*, *minor version*, and *patch*,
    usually expressed in a *dot notation* such as 1(major).2(minor).3(patch). The
    patch signifies an incremental release that includes a bug fix or very minor change
    that has no API changes. The minor version signifies updates that might have new
    API changes but it is backward compatible with the previous version. This is a
    key attribute for developers working with other microservices they might not be
    involved in developing. Knowing that I have my service written to communicate
    with version 1.4.7 of another microservice that has been recently upgraded to
    1.5.7 should signify that I might not need to change my code unless I want to
    take advantage of any new API features. The major version is a breaking change
    increment to the code. In most cases, the API is no longer compatible between
    major versions of the same code. There are many slight modifications to this process,
    including a “4” version to indicate the stage of the software in its development
    life cycle, such as 1.4.7.0 for alpha code and 1.4.7.3 for release. The most important
    thing is that there is consistency across the system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉语义化版本控制的人来说，基本的概念是，它遵循一个由*主版本*、*次版本*和*修订版本*组成的三部分版本号，通常以点号表示，比如1(主).2(次).3(修订)。修订版本表示包含了修复bug或者没有API变更的非常小的改动。次版本表示有可能有新的API变更，但与之前的版本兼容。对于与其他微服务进行交互但未参与开发的开发者来说，这是一个关键属性。知道我将我的服务编写成与另一个微服务的1.4.7版本进行通信，而后者最近升级到了1.5.7，就意味着除非我想利用任何新的API特性，否则我可能不需要更改我的代码。主版本是代码的重大变更增量。在大多数情况下，同一代码的主版本之间的API不再兼容。此过程有许多细微的修改，包括使用“4”版本来指示软件在其开发生命周期中的阶段，例如alpha代码的1.4.7.0版本和发布的1.4.7.3版本。最重要的是，系统内部保持一致性。
- en: Releases
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布版本
- en: In truth, Kubernetes does not really have a release controller, so there is
    no native concept of a release. This is usually added to a Deployment `metadata.labels`
    specification and/or in the `pod.spec.template.metadata.label` specification.
    When to include either is very important, and based on how CD is used to update
    changes to deployments, it can have varied effects. When Helm for Kubernetes was
    introduced, one of its main concepts was the notion of a release to differentiate
    the running instance of the same Helm chart in a cluster. This concept is easily
    reproducible without Helm; however, Helm natively keeps track of releases and
    their history, so many CD tools integrate Helm into their pipelines to be the
    actual release service. Again, the key here is consistency in how versioning is
    used and where it is surfaced in the system state of the cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Kubernetes实际上没有发布控制器，因此没有发布的本地概念。这通常添加到部署的`metadata.labels`规范中和/或`pod.spec.template.metadata.label`规范中。何时包含其中一个非常重要，并且基于CD用于更新部署变更的方式，它可能会产生不同的影响。当引入用于Kubernetes的Helm时，其主要概念之一是引入了发布的概念，以区分集群中相同Helm图表的运行实例。这个概念可以很容易地在没有Helm的情况下复制，但是Helm本身可以跟踪发布及其历史记录，因此许多CD工具将Helm集成到其流水线中，作为实际的发布服务。再次强调的关键是在集群系统状态中使用版本控制的一致性。
- en: Release names can be quite useful if there is institutional agreement as to
    the definition of certain names. Often, labels such as `stable` or `canary` are
    used, which helps to give some operational control when tools such as service
    meshes are added to make fine-grained routing decisions. Large organizations that
    drive numerous changes for different audiences will also adopt a ring architecture
    that can be denoted as `ring-0`, `ring-1`, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对某些名称的定义达成机构一致意见，发布名称可能非常有用。通常会使用诸如`stable`或`canary`之类的标签，这有助于在添加诸如服务网格等工具以进行细粒度路由决策时进行一些操作控制。驱动多个面向不同受众的变更的大型组织也会采用环形架构，可以表示为`ring-0`、`ring-1`等。
- en: This topic requires a little side trip into the specifics of labels in the Kubernetes
    declarative model. Labels themselves are very much free form and can be any key/value
    pair that follows the syntactical rules of the API. The key is not really the
    content but how each controller handles labels, changes to labels, and selector
    matching of labels. Jobs, Deployments, ReplicaSets, and DaemonSets support selector-based
    matching of pods via labels through direct mapping or set-based expressions. It
    is important to understand that label selectors are immutable after they are created,
    which means if you add a new selector and the pod’s labels have a corresponding
    match, a new ReplicaSet is made, not an upgrade to an existing ReplicaSet. This
    becomes very important to understand when dealing with rollouts, discussed next.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题需要稍微深入了解 Kubernetes 声明性模型中标签的具体细节。标签本身非常自由形式，可以是任何遵循 API 语法规则的键/值对。关键不是内容本身，而是每个控制器如何处理标签，标签的更改以及标签的选择器匹配。Jobs、Deployments、ReplicaSets
    和 DaemonSets 支持通过直接映射或基于集合的表达式来基于标签对 pod 进行选择器匹配。重要的是要理解，在创建后标签选择器是不可变的，这意味着如果添加了新的选择器，并且
    pod 的标签有相应的匹配，会创建一个新的 ReplicaSet，而不是对现有 ReplicaSet 进行升级。在处理讨论的扩展时，理解这一点非常重要。
- en: Rollouts
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rollouts
- en: Prior to the Deployment controller being introduced in Kubernetes, the only
    mechanism that existed to control how applications were rolled out by the Kubernetes
    controller process was using the command-line interface (CLI) command `kubectl
    rolling-update` on the specific `replicaController` that was to be updated. This
    was very difficult for declarative CD models because this was not part of the
    state of the original manifest. One had to carefully ensure that manifests were
    updated correctly, versioned properly so as to not accidentally roll the system
    back, and archived when no longer needed. The Deployment controller added the
    ability to automate this update process using a specific strategy and then allowing
    the system to read the declarative new state based on changes to the `spec.template`
    of the Deployment. This last fact is often misunderstood by new users of Kubernetes
    and causes frustration when they change a label in the Deployment metadata fields,
    reapply a manifest, and no update has been triggered. The Deployment controller
    is able to determine changes to the specification and will take action to update
    the Deployment based on a strategy that is defined by the specification. Kubernetes
    Deployments support two strategies, `rollingUpdate` and `recreate`, the former
    being the default.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 引入 Deployment 控制器之前，控制应用程序如何由 Kubernetes 控制器进程进行滚动更新的唯一机制是在特定要更新的
    `replicaController` 上使用命令行界面（CLI）命令 `kubectl rolling-update`。这对于声明式 CD 模型来说非常困难，因为这不是原始清单状态的一部分。必须确保清单正确更新，适当版本化，以防意外回滚系统，并在不再需要时进行存档。Deployment
    控制器增加了使用特定策略自动化此更新过程的能力，然后允许系统根据 Deployment 的 `spec.template` 的更改来读取声明性的新状态。这一点经常被
    Kubernetes 的新用户误解，当他们更改 Deployment 元数据字段中的标签，重新应用清单时，并未触发任何更新，从而导致 frustration。Deployment
    控制器能够确定规范的更改，并将根据规范定义的策略采取行动来更新 Deployment。Kubernetes Deployments 支持两种策略，`rollingUpdate`
    和 `recreate`，前者是默认值。
- en: If a rolling update is specified, the Deployment will create a new ReplicaSet
    to scale to the number of required replicas, and the old ReplicaSet will scale
    down to zero based on specific values for `maxUnavailble` and `maxSurge`. In essence,
    those two values will prevent Kubernetes from removing older pods until a sufficient
    number of newer pods have come online, and Kubernetes will not create new pods
    until a certain number of old pods have been removed. The nice thing is that the
    Deployment controller will keep a history of the updates, and through the CLI,
    you can roll back Deployments to previous versions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了滚动更新，Deployment 将创建一个新的 ReplicaSet 来扩展到所需的副本数量，并且旧的 ReplicaSet 将根据 `maxUnavailble`
    和 `maxSurge` 的特定值缩减到零。实质上，这两个值将防止 Kubernetes 删除旧的 pod，直到足够数量的新 pod 上线，并且 Kubernetes
    不会创建新的 pod，直到一定数量的旧 pod 被删除。好处在于，Deployment 控制器将保留更新的历史记录，并且通过 CLI，可以将 Deployment
    回滚到先前的版本。
- en: The `recreate` strategy is a valid strategy for certain workloads that can handle
    a complete outage of the pods in a ReplicaSet with little to no degradation of
    service. In this strategy the Deployment controller will create a new ReplicaSet
    with the new configuration and will delete the prior ReplicaSet before bringing
    the new pods online. Services that sit behind queue-based systems are an example
    of a service that could handle this type of disruption, because messages will
    queue while waiting for the new pods to come online, and message processing will
    resume as soon as the new pods come online.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`recreate` 策略是对某些工作负载有效的策略，能够处理 ReplicaSet 中的 Pod 完全宕机而无需降级服务。在这种策略中，部署控制器将使用新的配置创建一个新的
    ReplicaSet，并在将新的 Pod 上线之前删除先前的 ReplicaSet。在排队系统后面的服务就是可以处理此类中断的示例，因为消息将在等待新的 Pod
    上线时排队，一旦新的 Pod 上线，消息处理将恢复。'
- en: Putting It All Together
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 'Within a single service Deployment, a few key areas are affected by versioning,
    release, and rollout management. Let’s examine an example Deployment and then
    break down the specific areas of interest as they relate to best practices:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个服务的部署中，版本控制、发布和推出管理影响几个关键领域。让我们来看一个部署的例子，然后分析与最佳实践相关的特定关注领域：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Upon first inspection, things might look a little off. How can a Deployment
    have a version tag and the container image the Deployment uses have a different
    version tag? What will happen if one changes and the other does not? What does
    release mean in this example, and what will be the effect on the system if it
    changes? If a certain label is changed, when will it trigger an update to my Deployment?
    We can find the answers to these questions by looking at some of the best practices
    for versioning, releases, and rollouts.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 初次检查时，可能会感觉有些奇怪。一个部署如何具有版本标签，而部署使用的容器镜像却具有不同的版本标签？如果一个更改而另一个不更改会发生什么？在这个例子中发布意味着什么，如果更改会对系统有什么影响？如果更改了某个标签，何时会触发对我的部署的更新？我们可以通过查看版本控制、发布和推出的一些最佳实践来找到这些问题的答案。
- en: Best Practices for Versioning, Releases, and Rollouts
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制、发布和推出的最佳实践
- en: 'Effective CI/CD and the ability to offer reduced- or zero-downtime deployments
    depend on using consistent practices for versioning and release management. The
    following best practices can help to define consistent parameters that can assist
    DevOps teams in delivering smooth software deployments:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的 CI/CD 和提供减少或零停机时间的部署能力取决于使用一致的版本控制和发布管理实践。以下最佳实践可以帮助定义一致的参数，以协助 DevOps 团队提供平稳的软件部署：
- en: Use semantic versioning for the application that differs from the version of
    the containers and the version of the pods Deployment that make up the entire
    application. This allows for independent life cycles of the containers that make
    up the application and the application as a whole. This can be quite confusing
    at first, but if a principled hierarchical approach is taken for when one changes
    the other, you can easily track it. In the previous example, the container itself
    is currently on `v1.5.5`; however, the pod specification is `1.5.8`, which could
    mean that changes were made to the pod specification, such as new ConfigMaps,
    additional secrets, or updated replica values, but the specific container used
    has not changed its version. The application itself, the entire guestbook application,
    and all its services, is at `1.6.9`, which could mean that operations made changes
    along the way that were beyond just this specific service, such as other services
    that make up the entire application.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对应用程序使用语义化版本控制，其版本与组成整个应用程序的容器和 Pod 的版本不同。这允许容器具有独立的生命周期，而组成应用程序的容器和整个应用程序可以有不同的版本。起初可能会有些混乱，但如果采用原则性的分层方法来处理一个变化另一个的情况，您可以轻松跟踪它。在前面的例子中，容器本身目前使用的是
    `v1.5.5`，然而 Pod 的规范是 `1.5.8`，这可能意味着对 Pod 规范进行了更改，比如新的 ConfigMaps、额外的 Secrets 或更新的副本值，但所使用的具体容器版本并没有更改。整个应用程序，包括其所有服务的整个应用程序客户端，目前处于
    `1.6.9`，这可能意味着运维团队在这一过程中进行了超出这个具体服务之外的更改，比如组成整个应用程序的其他服务。
- en: Use a release and release version/number label in your deployment metadata to
    track releases from CI/CD pipelines. The release name and release number should
    coordinate with the actual release in the CI/CD tool records. This allows for
    both traceability through the CI/CD process into the cluster and easier rollback
    identification. In the previous example, the release number comes directly from
    the release ID of the CD pipeline that created the manifest.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署元数据中使用一个发布和发布版本/编号标签来跟踪从 CI/CD 管道中的发布。发布名称和发布编号应与 CI/CD 工具记录中的实际发布协调。这样可以通过
    CI/CD 过程追踪到集群，并更容易识别回滚标识。在前面的示例中，发布编号直接来自创建清单的 CD 管道的发布 ID。
- en: If Helm is being used to package services for deployment into Kubernetes, take
    special care to bundle together those services that need to be rolled back or
    upgraded together into the same Helm chart. Helm allows for easy rollback of all
    components of the application to bring the state back to what it was before the
    upgrade. Because Helm actually processes the templates and all the Helm directives
    before passing a flattened YAML configuration, the use of life-cycle hooks allows
    for proper ordering of the application of specific templates. Operators can use
    proper Helm life-cycle hooks to ensure that upgrades and rollback will happen
    correctly. The previous example for the `Job` specification uses Helm life-cycle
    hooks to ensure that the template runs a backup of the database before a rollback,
    upgrade, or delete of the Helm release. It also ensures that the `Job` is deleted
    after the job is run successfully, which, until the TTL Controller comes out of
    alpha in Kubernetes, would require manual cleanup.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果正在使用 Helm 打包服务以部署到 Kubernetes，特别注意将需要一起回滚或升级的服务捆绑到同一个 Helm 图中。Helm 允许轻松回滚应用程序的所有组件，将状态恢复到升级之前的状态。因为
    Helm 实际上在传递扁平化的 YAML 配置之前会处理模板和所有 Helm 指令，使用生命周期钩子可以确保特定模板的正确应用顺序。操作员可以使用适当的 Helm
    生命周期钩子来确保升级和回滚的正确执行。前面关于 `Job` 规范的示例使用 Helm 生命周期钩子来确保在回滚、升级或删除 Helm 发布之前运行数据库备份。它还确保在作业成功运行后删除
    `Job`，在 Kubernetes 的 TTL 控制器退出 alpha 版本之前，这需要手动清理。
- en: Agree on a release nomenclature that makes sense for the operational tempo of
    the organization. Simple `stable`, `canary`, and `alpha` states are quite adequate
    for most situations.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于组织的运营节奏，达成一个有意义的发布命名约定是很重要的。对于大多数情况来说，简单的 `stable`、`canary` 和 `alpha` 状态是相当足够的。
- en: Summary
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Kubernetes has allowed for more complex Agile development processes to be adopted
    within companies large and small. The ability to automate many of the complex
    processes that would usually require large amounts of human and technical capital
    has now been democratized so that even startups can take advantage of this cloud
    pattern with relative ease. The true declarative nature of Kubernetes really shines
    when planning the proper use of labels and using native Kubernetes controller
    capabilities. By properly identifying operational and development states within
    the declarative properties of the applications deployed into Kubernetes, organizations
    can tie in tooling and automation to more easily manage the complex processes
    of upgrades, rollouts, and rollbacks of capabilities.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 已经允许公司（无论大小）采用更复杂的敏捷开发流程。能够自动化许多通常需要大量人力和技术资本的复杂流程，现在已经被普及，即使是初创公司也能相对容易地利用这种云模式。Kubernetes
    的真正声明性质在于在规划正确使用标签和使用本地 Kubernetes 控制器功能时表现得非常出色。通过在部署到 Kubernetes 的应用程序的声明属性中正确识别操作和开发状态，组织可以将工具和自动化联系起来，更轻松地管理升级、发布和回滚能力的复杂流程。
