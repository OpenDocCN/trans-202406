- en: Chapter 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '-   第一章。介绍'
- en: Docker was first introduced to the world—with no pre-announcement and little
    fanfare—by Solomon Hykes, founder and CEO of a company then called dotCloud, in
    a five-minute [lightning talk](https://youtu.be/wW9CAH9nSLs) at the [Python Developers
    Conference](https://us.pycon.org) in Santa Clara, California, on March 15, 2013\.
    At the time of this announcement, only about 40 people outside of dotCloud had
    been given the opportunity to play with Docker.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是由当时被称为 dotCloud 公司的创始人兼 CEO Solomon Hykes 在 2013 年 3 月 15 日在加利福尼亚州圣克拉拉的[Python开发者大会](https://us.pycon.org)上进行的一个五分钟的[闪电演讲](https://youtu.be/wW9CAH9nSLs)中首次向世界公开介绍的，没有任何预先公告和少量的热烈欢迎。在这一公告之时，除了
    dotCloud 外，仅有大约 40 人有机会体验 Docker。
- en: Within a few weeks of this announcement, there was a surprising amount of press.
    The source code was quickly released on [GitHub](https://github.com/moby/moby)
    as a public and fully open source project. Over the next few months, more and
    more people in the industry started hearing about Docker and how it was going
    to revolutionize the way software was built, delivered, and run. And within a
    year, almost no one in the industry was unaware of Docker, but many were still
    unsure what it was exactly, and why people were so excited about it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在此公告发布几周后，出乎意料地引起了大量媒体关注。源代码很快作为一个公共的、完全开源的项目，在[GitHub](https://github.com/moby/moby)上发布。在接下来的几个月里，越来越多的行业人士开始听说
    Docker，以及它如何革新软件构建、交付和运行的方式。而在一年内，几乎没有人在行业内不知道 Docker，但许多人仍然不确定它究竟是什么，以及为什么人们对它如此兴奋。
- en: Docker is a tool that promises to easily encapsulate the process of creating
    a distributable artifact for any application, deploying it at scale into any environment,
    and streamlining the workflow and responsiveness of Agile software organizations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个工具，承诺轻松封装创建任何应用程序的可分发工件的过程，在任何环境中进行规模部署，并优化敏捷软件组织的工作流程和响应能力。
- en: The Promise of Docker
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 的承诺
- en: Initially, many people who were unfamiliar with Docker viewed it as some sort
    of virtualization platform, but in reality, it was the first widely accessible
    tool to build on top of a much newer technology called *containerization*. Docker
    and Linux containers have had a significant impact on a wide range of industry
    segments that include tools and technologies like Vagrant, KVM, OpenStack, Mesos,
    Capistrano, Ansible, Chef, Puppet, and so on. There is something very telling
    about the list of products that have had their market share directly impacted
    by Docker, and maybe you’ve spotted it already. Looking over this list, most engineers
    would recognize that these tools span a lot of different use cases, yet all of
    these workflows have been forever changed by Docker. This is largely because Docker
    has significantly altered everyone’s expectations of how a continuous integration
    and continuous delivery (CI/CD) workflow should function. Instead of each step
    involving a time-consuming process managed by specialists, most people expect
    a DevOps pipeline to be fully automated and flow from one step to the next without
    any human intervention. The technologies in that list are also generally acclaimed
    for their ability to improve productivity, and that’s exactly what has given Docker
    so much buzz. Docker sits right in the middle of some of the most enabling technologies
    of the last decade and can bring significant improvements to almost every step
    of the pipeline.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，许多对 Docker 不熟悉的人将其视为某种虚拟化平台，但实际上，它是第一个广泛可接触的基于一种称为*容器化*的新技术构建的工具。Docker 和
    Linux 容器对包括 Vagrant、KVM、OpenStack、Mesos、Capistrano、Ansible、Chef、Puppet 等工具和技术在内的多个行业领域产生了重大影响。关于这些产品列表的情况，说明了很多事情，也许你已经发现了。看过这份列表后，大多数工程师会认识到，这些工具涵盖了很多不同的用例，但所有这些工作流程都已经被
    Docker 彻底改变。这主要是因为 Docker 显著改变了每个人对持续集成和持续交付（CI/CD）工作流程应该如何运作的期望。与每个步骤都涉及由专家管理的耗时过程不同，大多数人希望
    DevOps 流水线能够完全自动化，并在一个步骤到下一个步骤之间流畅无阻地进行。该列表中的技术通常也因其提高生产力的能力而广受好评，这正是使 Docker
    如此受欢迎的原因。Docker 位于过去十年中一些最具推动力的技术的核心，并且可以显著改进流水线的几乎每一个步骤。
- en: If you were to do a feature-by-feature comparison of Docker and the reigning
    champion in any of these individual areas (e.g., configuration management), Docker
    would very likely look like a middling competitor. It’s stronger in some areas
    than others, but what Docker brings to the table is a feature set that crosses
    a broad range of workflow challenges. By combining the ease of application testing
    and deployment tools like Vagrant and Capistrano with the ease of administrating
    virtualization systems, and then providing interfaces that make workflow automation
    and orchestration easy to implement, Docker provides a very enabling feature set.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要逐个功能比较 Docker 和任何单一领域的冠军（例如配置管理），Docker 很可能看起来像是一个中等竞争者。它在某些领域比其他领域更强大，但
    Docker 带来的是一个跨越广泛工作流挑战的功能集。通过结合应用程序测试和部署工具（如 Vagrant 和 Capistrano）的易用性与管理虚拟化系统的便捷性，并提供易于实现的工作流自动化和编排界面，Docker
    提供了一个非常有益的功能集。
- en: Lots of new technologies come and go, and a dose of skepticism about the newest
    rage is always healthy. When Docker was a new technology, it would have been easy
    to dismiss Docker as just another technology that solves a few very specific problems
    for developers or operations teams. If you look at Docker as a pseudovirtualization
    or deployment technology alone, it might not seem very compelling. But Docker
    is much more than it seems on the surface.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多新技术如风而来，对最新的热潮保持一些怀疑总是很健康的。当 Docker 还是一项新技术时，很容易将其视为仅解决开发人员或运维团队的一些特定问题的又一技术。如果你把
    Docker 看作是一种伪虚拟化或仅仅是部署技术，它可能并不那么引人注目。但 Docker 远比表面上看起来的要复杂得多。
- en: It is hard and often expensive to get communication and processes right between
    teams of people, even in smaller organizations. Yet we live in a world where communicating
    detailed information between teams is increasingly required to be successful.
    Discovering and implementing a tool that reduces the complexity of that communication
    while aiding in the production of more robust software is a big win. And that’s
    exactly why Docker merits a deeper look. It’s no panacea, and the way that you
    implement Docker within your organization requires some critical thought, but
    Docker and Linux containers provide a good approach to solving some real-world
    organizational problems and helping enable companies to ship better software faster.
    Delivering a well-designed Linux container workflow can lead to happier technical
    teams and real savings for the organization’s bottom line.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在较小的组织中，使不同团队之间的沟通和流程正确运作通常也很困难且经常代价高昂。然而，我们生活在一个要求团队之间传递详细信息才能成功的世界。发现并实施一种减少沟通复杂性同时有助于生产更强大软件的工具是一大收获。这也正是为何
    Docker 值得深入研究的原因。它并非万能药，而在组织内实施 Docker 需要进行一些关键思考，但 Docker 和 Linux 容器提供了解决一些实际组织问题的良好方法，并帮助企业更快速地发布更好的软件。提供一个精心设计的
    Linux 容器工作流程可以使技术团队更加愉快，并为组织的底线节省实际开支。
- en: So where are companies feeling the most pain? Shipping software at the speed
    expected in today’s world is hard to do well, and as companies grow from one or
    two developers to many teams of developers, the burden of communication around
    shipping new releases becomes much heavier and harder to manage. Developers have
    to understand a lot of complexity about the environment they will be shipping
    software into, and production operations teams need to increasingly understand
    the internals of the software they ship. These are all generally good skills to
    work on because they lead to a better understanding of the environment as a whole
    and therefore encourage the designing of robust software, but these same skills
    are very difficult to scale effectively as an organization’s growth accelerates.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，公司最痛苦的地方在哪里呢？以今天的标准来看，以期望的速度发布软件确实很难做到，并且随着公司从一两名开发人员增长到多个开发团队，围绕发布新版本的沟通负担变得更加沉重和难以管理。开发人员必须了解他们将要发布软件的环境的复杂性，而生产运营团队则需要越来越深入地了解他们发布的软件的内部。这些通常都是很好的技能，因为它们有助于更好地理解整体环境，从而鼓励设计更加健壮的软件，但是这些技能在组织增长加速时很难有效扩展。
- en: The details of each company’s environment often require a lot of communication
    that doesn’t directly build value for the teams involved. For example, requiring
    developers to ask an operations team for release 1.2.1 of a particular library
    slows them down and provides no direct business value to the company. If developers
    could simply upgrade the version of the library they use, write their code, test
    with the new version, and ship it, the delivery time would be measurably shortened,
    and fewer risks would be involved in deploying the change. If operations engineers
    could upgrade software on the host system without having to coordinate with multiple
    teams of application developers, they could move faster. Docker helps to build
    a layer of isolation in software that reduces the burden of communication in the
    world of humans.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个公司环境的细节通常需要大量沟通，这些沟通并不直接为涉及的团队带来价值。例如，要求开发者向运维团队请求特定库的1.2.1版本会拖慢他们的速度，并且对公司没有直接的业务价值。如果开发者可以简单地升级他们使用的库版本，编写他们的代码，使用新版本进行测试并进行发布，交付时间将会显著缩短，并且部署变更的风险将会减少。如果运维工程师可以在不需要与多个应用开发团队协调的情况下升级主机系统上的软件，他们可以更快地进行操作。Docker有助于在软件中构建一层隔离，从而减少人类沟通的负担。
- en: Beyond helping with communication issues, Docker is opinionated about software
    architecture in a way that encourages more robustly crafted applications. Its
    architectural philosophy centers on atomic or throwaway containers. During deployment,
    the whole running environment of the old application is thrown away with it. Nothing
    in the environment of the application will live longer than the application itself,
    and that’s a simple idea with big repercussions. It means that applications are
    not likely to accidentally rely on artifacts left by a previous release. It means
    that ephemeral debugging changes are less likely to live on in future releases
    that picked them up from the local filesystem. And it means that applications
    are highly portable between servers because all of the state has to be included
    directly into the deployment artifact and be immutable, or sent to an external
    dependency like a database, cache, or file server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助解决沟通问题外，Docker 还在软件架构上持有一种鲜明的观点，鼓励构建更加健壮的应用程序。它的架构理念集中在原子或一次性容器上。在部署过程中，旧应用程序的整个运行环境会随之被丢弃。应用程序环境中的任何内容都不会比应用程序本身生存得更久，这是一个简单而有重大影响的理念。这意味着应用程序不太可能意外依赖于先前发布留下的遗物。这意味着短暂的调试更改不太可能会在未来的发布中继续存在，因为它们是从本地文件系统中获取的。这也意味着应用程序在服务器之间的可移植性很高，因为所有状态都必须直接包含在部署工件中并且是不可变的，或者发送到像数据库、缓存或文件服务器这样的外部依赖中。
- en: All of this leads to applications that are not only more scalable but more reliable
    as well. Instances of the application container can come and go with little impact
    on the uptime of the frontend site. These are proven architectural choices that
    have been successful for non-Docker applications, but the design choices enforced
    by Docker mean that containerized applications are *required* to follow these
    best practices. And that’s a very good thing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都导致了不仅更具可扩展性而且更可靠的应用程序。应用程序容器的实例可以随时生成和销毁，几乎不会影响前端站点的运行时间。这些都是已经在非 Docker
    应用程序中成功的架构选择，但是 Docker 强制执行的设计选择意味着容器化应用程序*必须*遵循这些最佳实践。而这是一件非常好的事情。
- en: Benefits of the Docker Workflow
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 工作流的好处
- en: 'It’s hard to cohesively categorize all of the things Docker brings to the table.
    When implemented well, it benefits organizations, teams, developers, and operations
    engineers in a multitude of ways. It makes architectural decisions simpler because
    all applications essentially look the same on the outside from the hosting system’s
    perspective. It makes tooling easier to write and share between applications.
    Nothing in this world comes with benefits and no challenges, but Docker is surprisingly
    skewed toward the benefits. Here are some more of the benefits you get with Docker
    and Linux containers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完整地归类 Docker 带来的所有优势是很困难的。当实施良好时，它在多方面为组织、团队、开发者和运维工程师带来益处。它使得架构决策更加简单，因为从托管系统的视角看，所有应用程序在外观上本质上都是相同的。它使得编写和在应用程序之间共享工具更加容易。在这个世界上没有什么是没有好处的，但
    Docker 显然更倾向于带来益处。以下是使用 Docker 和 Linux 容器时获得的一些更多好处：
- en: Packaging software in a way that leverages the skills developers already have
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件打包成一种利用开发者已有技能的方式
- en: Many companies have had to create positions for release and build engineers
    in order to manage all the knowledge and tooling required to create software packages
    for their supported platforms. Linux tools like `rpm`, `mock`, `dpkg`, and `pbuilder`
    can be complicated to use, and each one must be learned independently. Docker
    wraps up all your requirements together into one packaging format, known as the
    [Open Container Initiative (OCI)](https://opencontainers.org) standard.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Bundling application software and required OS filesystems together in a single
    standardized image format
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: In the past, you typically needed to package not only your application but also
    many of the dependencies that it relied on, including libraries and daemons. However,
    you could never ensure that 100% of the execution environment was identical. For
    natively compiled code, this meant that your build system needed to have exactly
    the same shared library versions as your production environment. All of this made
    packaging difficult to master, and hard for many companies to accomplish reliably.
    Often someone running [Scientific Linux](https://scientificlinux.org) would resort
    to trying to deploy a community package tested on [Red Hat Enterprise Linux](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux),
    hoping that the package was close enough to what they needed. With Docker, you
    deploy your application along with every single file required to run it. Docker’s
    layered images make this an efficient process that ensures that your application
    is running in the expected environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Using packaged artifacts to test and deliver the exact same artifact to all
    systems in all environments
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: When developers commit changes to a version control system, a new Docker image
    can be built, which can go through the whole testing process and be deployed to
    production without having to be recompiled or repackaged at any step in the process,
    unless that is specifically desired.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Abstracting software applications from the hardware without sacrificing resources
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Traditional enterprise virtualization solutions like VMware are typically used
    when someone needs to create an abstraction layer between the physical hardware
    and the software applications that run on it, at the cost of resources. The hypervisors
    that manage the VMs and each VM’s running kernel use a percentage of the hardware
    system’s resources, which are then no longer available to the hosted applications.
    A container, on the other hand, is just another process that typically talks directly
    to the underlying Linux kernel and therefore can utilize more resources, up until
    the system or quota-based limits are reached.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: When Docker was first released, Linux containers had been around for quite a
    few years, and many of the other technologies that Docker is built on are not
    entirely new. However, Docker’s unique mix of strong architectural and workflow
    choices combines into a whole that is much more powerful than the sum of its parts.
    Docker single-handedly made Linux containers, which have been publicly available
    since 2008, approachable and useful for all computer engineers. Docker fits containers
    relatively easily into the existing workflow and processes of real companies.
    And the problems discussed earlier have been felt by so many people that interest
    in the Docker project accelerated much faster than anyone could have reasonably
    expected.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当Docker首次发布时，Linux容器已经存在了很多年，Docker构建在其上的许多其他技术并不全是新的。然而，Docker强大的架构和工作流选择的独特组合，使其整体远比其各部分之和更为强大。Docker独自使得自2008年公开以来一直存在的Linux容器变得易于接近和对所有计算机工程师有用。Docker相对容易地将容器融入实际公司的现有工作流程和流程中。而前面讨论过的问题被如此多的人感受到，以至于对Docker项目的兴趣加速发展得比任何人都能合理预期的更快。
- en: From a standing start in 2013, Docker has seen rapid iteration and now has a
    huge feature set and is deployed in a vast number of production infrastructures
    across the planet. It has become one of the foundation layers for any modern distributed
    system and has inspired many others to expand on the approach. A large number
    of companies now leverage Docker and Linux containers as a solution to some of
    the serious complexity issues that they face in their application delivery processes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从2013年开始，Docker经历了快速迭代，现在拥有庞大的功能集，并在全球广泛部署在大量生产基础设施中。它已经成为任何现代分布式系统的基础层之一，并激发了许多其他人扩展这一方法。许多公司现在利用Docker和Linux容器作为解决其应用交付过程中面临的严重复杂性问题的解决方案。
- en: What Docker Isn’t
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker并非什么
- en: 'Docker can be used to solve a wide range of challenges that other categories
    of tools have traditionally been enlisted to fix; however, Docker’s breadth of
    features often means that it lacks depth in specific functionality. For example,
    some organizations will find that they can completely remove their configuration
    management tool when they migrate to Docker, but the real power of Docker is that
    although it can replace some aspects of more traditional tools, it is also usually
    compatible with them or even enhanced in combination with them. In the following
    list, we explore some of the tool categories that Docker doesn’t directly replace
    but that can often be used in conjunction to achieve great results:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker可以用来解决广泛的挑战，传统工具类别通常被用来解决这些挑战；然而，Docker的广泛功能经常意味着它在特定功能上缺乏深度。例如，一些组织在迁移到Docker后可能会完全移除其配置管理工具，但Docker的真正强大之处在于，虽然它可以替代某些更传统的工具的某些方面，但通常也与它们兼容甚至在组合使用时进行增强。在下面的列表中，我们探讨了一些Docker不能直接替代但通常可以与之配合使用以取得良好效果的工具类别：
- en: Enterprise virtualization platform (VMware, KVM, etc.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 企业虚拟化平台（VMware、KVM等）
- en: A container is not a virtual machine in the traditional sense. Virtual machines
    contain a complete operating system, running on top of a hypervisor that is managed
    by the underlying host operating system. Hypervisors create virtual hardware layers
    that make it possible to run additional operating systems on top of a single physical
    computer system. This makes it very easy to run many virtual machines with radically
    different operating systems on a single host. With containers, both the host and
    the containers share the same kernel. This means that containers utilize fewer
    system resources but must be based on the same underlying operating system (e.g.,
    Linux).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统意义上，容器不是虚拟机。虚拟机包含完整的操作系统，运行在由底层主机操作系统管理的hypervisor之上。Hypervisor创建虚拟硬件层，使得可以在单个物理计算机系统上运行多个不同操作系统。这使得在单个主机上运行许多具有根本不同操作系统的虚拟机变得非常容易。而容器中，主机和容器共享同一个内核。这意味着容器利用更少的系统资源，但必须基于相同的底层操作系统（例如Linux）。
- en: Cloud platform (OpenStack, CloudStack, etc.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 云平台（OpenStack、CloudStack等）
- en: Like enterprise virtualization, the container workflow shares a lot of similarities—​on
    the surface—​with more traditional cloud platforms. Both are traditionally leveraged
    to allow applications to be horizontally scaled in response to changing demand.
    Docker, however, is not a cloud platform. It only handles deploying, running,
    and managing containers on preexisting Docker hosts. It doesn’t allow you to create
    new host systems (instances), object stores, block storage, and the many other
    resources that are often managed with a cloud platform. That being said, as you
    start to expand your Docker tooling, you should start to experience more and more
    of the benefits that one traditionally associates with the cloud.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与企业虚拟化类似，容器工作流程在表面上与更传统的云平台有许多相似之处。两者传统上被利用以允许应用程序根据需求变化进行水平扩展。然而，Docker并非云平台。它仅处理在预先存在的Docker主机上部署、运行和管理容器。它不允许您创建新的主机系统（实例）、对象存储、块存储以及通常使用云平台管理的其他资源。话虽如此，随着您开始扩展Docker工具，您应该开始体验到传统上与云关联的更多好处。
- en: Configuration management (Puppet, Chef, etc.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理（Puppet，Chef等）
- en: Although Docker can significantly improve an organization’s ability to manage
    applications and their dependencies, it does not directly replace more traditional
    configuration management. *Dockerfiles* are used to define how a container should
    look at build time, but they do not manage the container’s ongoing state and cannot
    be used to manage the Docker host system. Docker can, however, significantly lessen
    the need for complex configuration management code. As more and more servers simply
    become Docker hosts, the configuration management codebase that a company uses
    can become much smaller, and Docker can be used to ship the more complex application
    requirements inside of standardized OCI images.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Docker可以显著改善组织管理应用程序及其依赖关系的能力，但它并不直接替代更传统的配置管理。*Dockerfiles*用于定义在构建时容器应该如何看起来，但它们不管理容器的持续状态，也不能用于管理Docker主机系统。然而，Docker可以显著减少复杂的配置管理代码需求。随着越来越多的服务器简单地成为Docker主机，公司使用的配置管理代码库可以变得更小，Docker可以用于将更复杂的应用程序要求打包到标准化的OCI镜像中。
- en: Deployment framework (Capistrano, Fabric, etc.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 部署框架（Capistrano，Fabric等）
- en: Docker eases many aspects of deployment by creating container images that encapsulate
    all the dependencies of an application in a manner that can be deployed in all
    environments without changes. However, Docker can’t be used to automate a complex
    deployment process by itself. Other tools are usually still needed to stitch together
    the larger workflow. That being said, because Docker and other Linux container
    toolsets, like Kubernetes (k8s), provide a well-defined interface for deployment,
    the method required to deploy containers will be consistent on all hosts, and
    a single deployment workflow should suffice for most, if not all, of your Docker-based
    applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Docker通过创建容器镜像来简化部署的多个方面，这些镜像封装了应用程序的所有依赖关系，可以在所有环境中部署，而无需更改。然而，Docker本身无法用于自动化复杂的部署过程。通常还需要其他工具来将更大的工作流程连接在一起。话虽如此，由于Docker和其他Linux容器工具集（如Kubernetes（k8s））提供了一个定义良好的部署接口，部署容器所需的方法在所有主机上都是一致的，一个单一的部署工作流程应该足以应对大多数，如果不是所有基于Docker的应用程序。
- en: Development environment (Vagrant, etc.)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境（Vagrant等）
- en: Vagrant is a virtual machine management tool for developers that is often used
    to simulate server stacks that closely resemble the production environment in
    which an application will be deployed. Among other things, Vagrant makes it easy
    to run Linux software on macOS and Windows-based workstations. Virtual machines
    managed by tools like Vagrant assist developers in trying to avoid the common
    “it worked on my machine” scenario that occurs when the software runs fine for
    the developer but does not run properly elsewhere. However, as with many of the
    previous examples, when you start to fully utilize Docker, there is a lot less
    need to mimic a wide variety of production systems in development, since most
    production systems will simply be Linux container servers, which can easily be
    reproduced locally.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 是开发者常用的虚拟机管理工具，通常用于模拟与将要部署应用程序的生产环境紧密相似的服务器堆栈。除此之外，Vagrant 还简化了在 macOS
    和基于 Windows 的工作站上运行 Linux 软件的过程。由类似 Vagrant 管理的虚拟机协助的开发者试图避免常见的“在我的机器上可以运行”的情况，即开发者的软件能正常运行，但在其他地方可能运行不正常。然而，与之前的例子一样，当你开始充分利用
    Docker 时，就不再需要在开发中模仿各种生产系统，因为大多数生产系统将只是 Linux 容器服务器，可以轻松地在本地复制。
- en: Workload management tool (Mesos, Kubernetes, Swarm, etc.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载管理工具（Mesos、Kubernetes、Swarm等）。
- en: An orchestration layer (including the built-in Swarm mode) must be used to coordinate
    work across a pool of Linux container hosts, track the current state of all the
    hosts and their resources, and keep an inventory of running containers. These
    systems are designed to automate the regular tasks that are needed to keep a production
    cluster healthy while also providing tools that help make the highly dynamic nature
    of containerized workloads easier for human beings to interact with.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用一个编排层（包括内置的 Swarm 模式）来协调整个 Linux 容器主机池中的工作，跟踪所有主机及其资源的当前状态，并维护正在运行的容器清单。这些系统旨在自动化保持生产集群健康所需的常规任务，同时提供帮助人们更轻松地与容器化工作负载的高度动态性互动的工具。
- en: Each of these sections point out an important function that Docker and Linux
    containers disrupted and improved. Linux containers provide a way to run software
    in a controlled and isolated environment, while the easy-to-use command line interface
    (CLI) tooling and container image standard that Docker introduced made working
    with containers much easier and ensured that there was a repeatable way to build
    software across the whole fleet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部分指出了 Docker 和 Linux 容器颠覆和改进的重要功能。Linux 容器提供了在受控和隔离环境中运行软件的方式，而 Docker 引入的易于使用的命令行界面（CLI）工具和容器镜像标准使得使用容器变得更加简单，并确保了在整个服务器集群上构建软件的可重复方式。
- en: Important Terminology
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要术语
- en: 'Here are a few terms that we will continue to use throughout the book and whose
    meanings you should become familiar with:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们将在整本书中继续使用的几个术语及其含义，你应该熟悉这些术语：
- en: Docker client
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 客户端
- en: This is the `docker` command used to control most of the Docker workflow and
    talk to remote Docker servers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于控制大部分 Docker 工作流并与远程 Docker 服务器通信的`docker`命令。
- en: Docker server
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 服务器
- en: This is the `dockerd` command that is used to start the Docker server process
    that builds and launches containers via a client.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于启动 Docker 服务器进程并通过客户端构建和启动容器的`dockerd`命令。
- en: Docker or OCI images
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 或 OCI 镜像
- en: Docker and OCI images consist of one or more filesystem layers and some important
    metadata that represent all the files required to run a containerized application.
    A single image can be copied to numerous hosts. An image typically has a repository
    address, a name, and a tag. The tag is generally used to identify a particular
    release of an image (e.g., *docker.io/superorbital/wordchain:v1.0.1*). A Docker
    image is any image that is compatible with the Docker toolset, while an OCI image
    is specifically an image that meets the Open Container Initiative standard and
    is guaranteed to work with any OCI-compliant tool.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 和 OCI 镜像由一个或多个文件系统层和一些重要的元数据组成，这些元数据代表运行容器化应用程序所需的所有文件。单个镜像可以复制到多个主机上。一个镜像通常具有仓库地址、名称和标签。标签通常用于标识镜像的特定版本（例如
    *docker.io/superorbital/wordchain:v1.0.1*）。Docker 镜像是与 Docker 工具集兼容的任何镜像，而 OCI
    镜像特指符合 Open Container Initiative 标准且保证与任何 OCI 兼容工具一起工作的镜像。
- en: Linux container
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器
- en: This is a container that has been instantiated from a Docker or OCI image. A
    specific container can exist only once; however, you can easily create multiple
    containers from the same image. The term *Docker container* is a misnomer since
    Docker simply leverages the operating system’s container functionality.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从Docker或OCI镜像实例化的容器。一个特定的容器只能存在一次；然而，你可以轻松地从同一个镜像创建多个容器。术语*Docker容器*是一个误称，因为Docker只是利用操作系统的容器功能。
- en: Atomic or immutable host
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 原子或不可变主机
- en: An atomic or immutable host is a small, finely tuned OS image, like [Fedora
    CoreOS](https://getfedora.org/en/coreos), that supports container hosting and
    atomic OS upgrades.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 原子或不可变主机是一个小巧精细的操作系统镜像，比如[Fedora CoreOS](https://getfedora.org/en/coreos)，支持容器托管和原子操作系统升级。
- en: Wrap-Up
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Completely understanding Docker can be challenging when you are coming at it
    without a strong frame of reference. In the next chapter, we will lay down a broad
    overview of Docker: what it is, how it is intended to be used, and what advantages
    it brings to the table when implemented with all this in mind.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你没有强烈的参考框架时，完全理解Docker可能是具有挑战性的。在下一章中，我们将概述Docker的大致情况：它是什么，预期如何使用，以及在考虑所有这些因素时实施时带来的优势。
