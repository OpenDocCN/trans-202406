["```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: business-app\nspec:\n  initContainers:\n  - name: configurer\n    image: busybox:1.36.1\n    command: ['sh', '-c', 'echo Configuring application... && \\\n              mkdir -p /usr/shared/app && echo -e \"{\\\"dbConfig\\\": \\\n              {\\\"host\\\":\\\"localhost\\\",\\\"port\\\":5432,\\\"dbName\\\":\\\"customers\\\"}}\" \\\n              > /usr/shared/app/config.json']\n    volumeMounts:\n    - name: configdir\n      mountPath: \"/usr/shared/app\"\n  containers:\n  - image: bmuschko/nodejs-read-config:1.0.0\n    name: web\n    ports:\n    - containerPort: 8080\n    volumeMounts:\n    - name: configdir\n      mountPath: \"/usr/shared/app\"\n  volumes:\n  - name: configdir\n    emptyDir: {}\n```", "```\n$ kubectl create -f init.yaml\npod/business-app created\n$ kubectl get pod business-app\nNAME           READY   STATUS    RESTARTS   AGE\nbusiness-app   0/1     Init:0/1  0          2s\n$ kubectl get pod business-app\nNAME           READY   STATUS    RESTARTS   AGE\nbusiness-app   1/1     Running   0          8s\n\n```", "```\n$ kubectl logs business-app -c configurer\nConfiguring application...\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: webserver\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.25.1\n    volumeMounts:\n    - name: logs-vol\n      mountPath: /var/log/nginx\n  - name: sidecar\n    image: busybox:1.36.1\n    command: [\"sh\",\"-c\",\"while true; do if [ \\\"$(cat /var/log/nginx/error.log \\\n              | grep 'error')\\\" != \\\"\\\" ]; then echo 'Error discovered!'; fi; \\\n              sleep 10; done\"]\n    volumeMounts:\n    - name: logs-vol\n      mountPath: /var/log/nginx\n  volumes:\n  - name: logs-vol\n    emptyDir: {}\n```", "```\n$ kubectl create -f sidecar.yaml\npod/webserver created\n$ kubectl get pods webserver\nNAME        READY   STATUS              RESTARTS   AGE\nwebserver   0/2     ContainerCreating   0          4s\n$ kubectl get pods webserver\nNAME        READY   STATUS    RESTARTS   AGE\nwebserver   2/2     Running   0          5s\n\n```", "```\n$ kubectl logs webserver -c sidecar\n$ kubectl exec webserver -it -c sidecar -- /bin/sh\n/ # wget -O- localhost?unknown\nConnecting to localhost (127.0.0.1:80)\nwget: server returned error: HTTP/1.1 404 Not Found\n/ # cat /var/log/nginx/error.log\n2020/07/18 17:26:46 [error] 29#29: *2 open() \"/usr/share/nginx/html/unknown\" \\\nfailed (2: No such file or directory), client: 127.0.0.1, server: localhost, \\\nrequest: \"GET /unknown HTTP/1.1\", host: \"localhost\"\n/ # exit\n$ kubectl logs webserver -c sidecar\nError discovered!\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: adapter\nspec:\n  containers:\n  - args:\n    - /bin/sh\n    - -c\n    - 'while true; do echo \"$(date) | $(du -sh ~)\" >> /var/logs/diskspace.txt; \\\n       sleep 5; done;'\n    image: busybox:1.36.1\n    name: app\n    volumeMounts:\n      - name: config-volume\n        mountPath: /var/logs\n  - image: busybox:1.36.1\n    name: transformer\n    args:\n    - /bin/sh\n    - -c\n    - 'sleep 20; while true; do while read LINE; do echo \"$LINE\" | cut -f2 -d\"|\" \\\n       >> $(date +%Y-%m-%d-%H-%M-%S)-transformed.txt; done < \\\n       /var/logs/diskspace.txt; sleep 20; done;'\n    volumeMounts:\n    - name: config-volume\n      mountPath: /var/logs\n  volumes:\n  - name: config-volume\n    emptyDir: {}\n```", "```\n$ kubectl create -f adapter.yaml\npod/adapter created\n$ kubectl get pods adapter\nNAME      READY   STATUS    RESTARTS   AGE\nadapter   2/2     Running   0          10s\n$ kubectl exec adapter --container=transformer -it -- /bin/sh\n/ # cat /var/logs/diskspace.txt\nSun Jul 19 20:28:07 UTC 2020 | 4.0K\t/root\nSun Jul 19 20:28:12 UTC 2020 | 4.0K\t/root\n/ # ls -l\ntotal 40\n-rw-r--r--  1  root  root  60 Jul 19 20:28 2020-07-19-20-28-28-transformed.txt\n...\n/ # cat 2020-07-19-20-28-28-transformed.txt\n 4.0K\t/root\n 4.0K\t/root\n\n```", "```\nconst express = require('express');\nconst app = express();\nconst rateLimit = require('express-rate-limit');\nconst https = require('https');\n\nconst rateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 5,\n  message:\n    'Too many requests have been made from this IP, please try again after an hour'\n});\n\napp.get('/test', rateLimiter, function (req, res) {\n  console.log('Received request...');\n  var id = req.query.id;\n  var url = 'https://postman-echo.com/get?test=' + id;\n  console.log(\"Calling URL %s\", url);\n\n  https.get(url, (resp) => {\n    let data = '';\n\n    resp.on('data', (chunk) => {\n      data += chunk;\n    });\n\n    resp.on('end', () => {\n      res.send(data);\n    });\n\n    }).on(\"error\", (err) => {\n      res.send(err.message);\n    });\n})\n\nvar server = app.listen(8081, function () {\n  var port = server.address().port\n  console.log(\"Ambassador listening on port %s...\", port)\n})\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: rate-limiter\nspec:\n  containers:\n  - name: business-app\n    image: bmuschko/nodejs-business-app:1.0.0\n    ports:\n    - containerPort: 8080\n  - name: ambassador\n    image: bmuschko/nodejs-ambassador:1.0.0\n    ports:\n    - containerPort: 8081\n```", "```\n$ kubectl create -f ambassador.yaml\npod/rate-limiter created\n$ kubectl get pods rate-limiter\nNAME           READY   STATUS    RESTARTS   AGE\nrate-limiter   2/2     Running   0          5s\n$ kubectl exec rate-limiter -it -c business-app -- /bin/sh\n# curl localhost:8080/test\n{\"args\":{\"test\":\"123\"},\"headers\":{\"x-forwarded-proto\":\"https\", \\\n\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\", \\\n\"x-amzn-trace-id\":\"Root=1-5f177dba-e736991e882d12fcffd23f34\"}, \\\n\"url\":\"https://postman-echo.com/get?test=123\"}\n...\n# curl localhost:8080/test\nToo many requests have been made from this IP, please try again after an hour\n\n```"]