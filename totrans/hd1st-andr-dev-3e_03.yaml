- en: 'Chapter 1\. Getting Started: *Diving In*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0001-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Android is the world’s most popular mobile operating system.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'And there are billions of Android users worldwide, all waiting to download
    your next great idea. In this chapter, you’ll find out how to start turning your
    ideas into reality by is the world’s most popular mobile operating system.**building
    a basic Android app**, and updating it. You’ll learn how to run it on physical
    and virtual devices. Along the way, you’ll meet two of the core components of
    all Android apps: **activities** and **layouts**. Let’s dive in…'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to Androidville
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android is the world’s most popular mobile platform. At last count, there were
    over *three billion* active Android devices worldwide, and that number is still
    growing.
  prefs: []
  type: TYPE_NORMAL
- en: Android is a comprehensive open source platform based on Linux and championed
    by Google. It’s a powerful development framework that includes everything you
    need to build great apps. What’s more, it enables you to deploy those apps to
    a wide variety of devices—phones, tablets, and more.
  prefs: []
  type: TYPE_NORMAL
- en: So what makes up a typical Android app?
  prefs: []
  type: TYPE_NORMAL
- en: '**We’re going to build Android apps using Kotlin and XML. We’ll explain things
    along the way, but you’ll need some understanding of Kotlin to get the most out
    of this book.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Activities define what the app does
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each Android app includes one or more **activities**. An activity is a special
    class —usually written in Kotlin—that controls the app’s behavior, and decides
    how to respond to the user. If the app includes a button, for example, you add
    code to the activity that says what the button should do when the user taps or
    clicks on it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0002-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Layouts define what each screen looks like
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A typical Android app is composed of one or more screens. You define what each
    screen looks like using a **layout** file, or more activity code. Layouts are
    usually defined using XML, and each screen can include components such as buttons,
    text, and images.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0002-02.png)'
  prefs: []
  type: TYPE_IMG
- en: There may be extra files too
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to activities and layouts, Android apps often need extra resources
    such as image files and application data. You can add any extra files you need
    to the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0002-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Android apps are really just a bunch of files in particular directories. When
    you build your app, these files get bundled together, giving you an app you can
    run on your device.
  prefs: []
  type: TYPE_NORMAL
- en: Activities and layouts form the backbone of your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a typical app, activities and layouts work together to define the app’s user
    interface. The layouts tell Android how the different screen elements should be
    arranged, and the activities control the app’s behavior. If the app features a
    button, for example, the layout specifies its position, and the activity controls
    what happens when the user clicks on it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0003-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s how activities and layouts work together when you run an app on your
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0003-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Android starts the app’s main activity.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The activity tells Android to use a specific layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The layout is displayed on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The user interacts with the layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The activity responds to these interactions, and updates the display…**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**…which the user sees on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have an idea about how Android apps are put together, let’s go
    ahead and build a basic Android app.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So let’s dive in and create an Android app. There are just a few things we
    need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set up a development environment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to install Android Studio, which includes all the tools you need to
    develop Android apps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Build a basic app.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll build a simple app using Android Studio that will display some sample
    text on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Run the app.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll run the app on a physical device, and a virtual one, to see it up and
    running.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Change the app.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we’ll tweak the app we created, and run it again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0004-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Android Studio: your development environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0005-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The best way of developing Android apps is to use **Android Studio**, the official
    IDE for Android app development.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio is based on IntelliJ IDEA, which you may already be familiar
    with. It includes a set of code editors, UI tools and templates, which are all
    designed to make your life in Androidville easier.
  prefs: []
  type: TYPE_NORMAL
- en: It also includes the **Android SDK**—or Android Software Development Kit—which
    is required for all Android app development. The Android SDK includes Android
    source files, and a compiler that’s used to compile your code into an Android
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the main components of the Android SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0005-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You need to install Android Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Android Studio includes all the tools and features you need in order to develop
    Android apps, we’re going to use it to build all of the apps featured in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further, **you need to install Android Studio on your machine**.
    There are more details about how to do this on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Install Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the most out of this book, you need to install Android Studio. We’re
    not including the full installation instructions here as they can get out of date
    pretty quickly, but you’ll be fine if you follow the online instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, check the Android Studio system requirements here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/studio#Requirements](https://developer.android.com/studio#Requirements)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These URLs sometimes change. If they don’t work, search for Android Studio and
    you should find the appropriate pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then download Android Studio from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/studio](https://developer.android.com/studio)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These URLs sometimes change. If they don’t work, search for Android Studio and
    you should find the appropriate pages.
  prefs: []
  type: TYPE_NORMAL
- en: and follow the installation instructions
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve installed Android Studio, open it and follow the instructions to
    add the latest SDK tools and Support Libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '**In this book, we’re using Android Studio 2020.3.1 (known as Arctic Fox).
    Make sure you install at least this version.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**If you’ve previously installed an earlier version of Android Studio, we recommend
    that you restore the IDE’s default settings.** To do this, go to the File menu,
    choose Manage IDE Settings, and then select the Restore Default Settings option.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This resets any old settings Android Studio might be holding on to that could
    stop your code from running.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re done, you should see the Android Studio welcome screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0006-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s build a basic app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0007-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you’ve set up your development environment, you’re ready to create
    your first Android app. Here’s what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0007-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s go ahead and build the app.
  prefs: []
  type: TYPE_NORMAL
- en: How to build the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you create a new app, you need to create a new project for it. Make
    sure you have Android Studio open, and follow along with us.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Create a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android Studio welcome screen gives you a number of options. We want to
    create a new project, so make sure the Projects option is selected, then click
    on “New Project.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0008-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. Select a project template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You next need to specify the type of Android Studio project you want to create.
    We’re going to create an app with an empty activity that runs on a phone or tablet,
    so make sure the Phone and Tablet option is selected, and choose the Empty Activity
    option. You’ll find out more about what the Empty Activity option gives you a
    few pages ahead, but for now, click the Next button to move to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0009-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Configure your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now need to configure the project by specifying an app name, package name,
    and save location. Enter a name of “My First App” and a package name of “com.hfad.myfirstapp”
    and accept the default save location.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to tell Android Studio which programming language you want to
    use, and specify a minimum SDK. This refers to the lowest version of Android the
    app will support: there’s more about SDK levels on the next page.'
  prefs: []
  type: TYPE_NORMAL
- en: Select Kotlin for the language and choose a minimum SDK of API 21 so that the
    app will run on most devices. When you click on the Finish button, Android Studio
    will create the project. We’ll look at what this involves a couple of pages ahead.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0010-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ve created your first Android project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you’ve been through the New Project wizard, it takes Android Studio a
    minute or so to create the project. During this time, it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It configures the project to your specifications.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio looks at the minimum SDK you want the app to support, and includes
    all of the files and folders needed for a basic valid app. It also sets up the
    package structure and names the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It adds some template code.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template code is comprised of a layout written in XML and an activity written
    in Kotlin. You’ll find out more about these later in the chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When Android Studio has finished creating the project, it automatically opens
    it for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what our project looks like (don’t worry if it looks complicated—we’ll
    break it down over the next few pages):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0012-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Dissecting your new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Android app is really just a bunch of valid files in a particular folder
    structure, and Android Studio sets all of this up for you when you create a new
    app. The easiest way of looking at this folder structure is to use the explorer
    in the leftmost column of Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: The folder structure includes different types of files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The explorer contains all of the projects that you currently have open. Here,
    we have a single project named MyFirstApp, which is the one we’ve just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you browse through the various folders in the explorer, you’ll see that
    the wizard has created various types of files and folders for you like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Kotlin and XML source files**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio automatically created an activity file named *MainActivity.kt*,
    and a layout named *activity_main.xml*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Resource files**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These include default image files, themes the app might use, and any common
    `String` values used by the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Android libraries**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the wizard, you specified the minimum SDK you want the app to be compatible
    with. Android Studio makes sure the app includes the relevant Android libraries
    for that version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **Configuration files**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration files tell Android what’s included in the app, and how the
    app should run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0013-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take a closer look at some of the key files and folders in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the key files in your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio projects use the Gradle build system to compile and deploy apps,
    and Gradle projects have a standard structure. Below are some of the key files
    and folders in that structure you’ll be working with.
  prefs: []
  type: TYPE_NORMAL
- en: To see this view of the folder structure, change the explorer view in Android
    Studio from Android to Project. You do this by clicking on the arrow at the top
    of the explorer pane, and selecting the Project option.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0014-02.png)![image](Images/f0014-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Edit code with the Android Studio editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You view and edit files using the Android Studio editors. Double-click on the
    file you want to work with, and the file’s contents will appear in the middle
    of the Android Studio window.
  prefs: []
  type: TYPE_NORMAL
- en: The code editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most files get displayed in the code editor, which is just like a text editor,
    but with extra features such as syntax highlighting and code checking.
  prefs: []
  type: TYPE_NORMAL
- en: The design editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re editing a layout (for example *activity_main.xml*), you have an extra
    option. Rather than edit the code, you can use the design editor, which allows
    you to drag GUI components onto the layout, and arrange them how you want. The
    code editor and design editor give different views of the same file, so you can
    switch back and forth between the two.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0015-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The story so far
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the chapter so far, we’ve done two things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**We set up the development environment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re using Android Studio to develop Android apps, so you needed to install
    it on a machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**We’ve built a basic app.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used Android Studio to create a new Android project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ve had a glimpse of what the app looks like in Android Studio, and got a
    feel for how it hangs together. But what you *really* want is to see it running,
    right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio lets you run an app in two ways: on a physical Android device,
    and on a virtual one. We’ll show you each approach a few pages ahead.'
  prefs: []
  type: TYPE_NORMAL
- en: How to run the app on a physical device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0019-01.png)'
  prefs: []
  type: TYPE_IMG
- en: If you have an Android device that’s running Lollipop or above, you can use
    it to run the app we’ve just created.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can check this by looking at the Android version in the device settings.
    Lollipop is version 5.0, so it needs to 5.0 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to run the app on a physical device:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Enable USB debugging on your device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To allow Android Studio to run apps on your device, you need to enable USB debugging.
    This feature is available in the “Developer options” setting, which is disabled
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: On your device, go to Settings → About Phone and tap the build number seven
    times. This enables the developer options. Then, go to Settings → System → Advanced
    → Developer options, and turn on USB debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Yep, seriously.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0019-04.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. Set up your computer to detect the device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re using a Mac, you can skip this step.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using Windows, you’ll need to install a USB driver if one isn’t already
    there. The latest instructions are here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/studio/run/oem-usb](https://developer.android.com/studio/run/oem-usb)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using Ubuntu Linux, you need to create a `udev` rules file. The latest
    instructions on how to do this are here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://developer.android.com/studio/run/device#setting-up](https://developer.android.com/studio/run/device#setting-up)*'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use a USB cable to plug your device into your computer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will probably be asked if want to allow USB debugging. If so, check the
    “Always allow from this computer” option and choose OK.
  prefs: []
  type: TYPE_NORMAL
- en: '**When we created the app, we specified a minimum API level of 21 (Lollipop).
    Your device needs this version of Android or above for the app to run.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Run the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, select the device from the list of devices in Android Studio’s top
    toolbar (if it’s not there, on your device go to Settings → Connected devices,
    select USB, and choose the “File transfer” option). Then run the app by choosing
    “Run ‘app’” from the Run menu. Android Studio will build the project, install
    the app on your device, and launch it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0019-05.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll look at the app a few pages ahead, after we’ve seen how to run it on a
    virtual device.
  prefs: []
  type: TYPE_NORMAL
- en: How to run the app on a virtual device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don’t have an Android device on hand, or it doesn’t have the right version
    of Android, you can run the app on a virtual device instead. Running the app on
    a virtual device is useful if you want to see how the app looks on a type of device
    you don’t own, or test how it behaves on a different version of Android.
  prefs: []
  type: TYPE_NORMAL
- en: The Android SDK features a built-in emulator that you can use to set up one
    or more **Android Virtual Devices** (AVDs). Once you’ve set up an AVD, you can
    run the app on it as though it’s running on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can find system requirements for using the emulator here: [https://developer.android.com/studio/run/emulator#requirements](https://developer.android.com/studio/run/emulator#requirements)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The emulator recreates the exact hardware environment of an Android device:
    from its CPU and memory through to the sound chips and the video display. The
    emulator is built on an existing emulator called QEMU (pronounced “queue em you”),
    which is similar to other virtual machine applications you may have used, like
    VirtualBox or VMWare.'
  prefs: []
  type: TYPE_NORMAL
- en: The exact appearance and behavior of the AVD depends on how you set it up. If,
    say, you create an AVD based on a Pixel 3 running Android 11, it will look and
    behave just like a Pixel 3 running this version of Android on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0020-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s set up an AVD so that you can see the app running in the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Create an Android Virtual Device (AVD)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few steps you need to go through in order to set up an AVD within
    Android Studio. We’ll set up a Pixel 3 AVD running API level 30 (Android 11) so
    that you can see how the app looks and behaves running on this type of device.
    The steps are pretty much identical no matter what type of virtual device you
    want to set up.
  prefs: []
  type: TYPE_NORMAL
- en: Open the Android Virtual Device Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AVD Manager allows you to set up new AVDs, and view and edit ones you’ve
    already created. Open it by selecting AVD Manager on the Tools menu.
  prefs: []
  type: TYPE_NORMAL
- en: If you have no AVDs set up already, you’ll be presented with a screen prompting
    you to create one. Click on the Create Virtual Device button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0021-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the next screen, you’ll be prompted to choose a device definition. This is
    the type of device your AVD will emulate. You can choose a variety of phone, tablet,
    wear, or TV devices.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to see what the app looks like running on a Pixel 3 phone. Choose
    Phone from the Category menu and Pixel 3 from the list. Then click on the Next
    button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0021-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Select a system image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, you need to select a system image. This specifies which version of Android
    you want to be on the AVD.
  prefs: []
  type: TYPE_NORMAL
- en: You need to choose a version of Android that’s compatible with the app you’re
    building. It must be *at least* the minimum SDK that the app supports.
  prefs: []
  type: TYPE_NORMAL
- en: When you created your Android project, you specified that the minimum SDK is
    API level 21\. This means that you need to choose a system image that’s for API
    level 21 (Lollipop) or above. If you choose an older version of Android than this,
    the app won’t be able to run on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we’re going to see what the app looks like on a relatively new version
    of Android, so choose the system image with a release name of R and a target of
    Android 11.0 (API level 30). Then click Next.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0022-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Verify the AVD configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the next screen, you’ll be asked to verify the configuration. This screen
    summarizes the options you chose over the last few screens, and gives you the
    option of changing them. Accept the options, and click on the Finish button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0023-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The virtual device gets created
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you click on the Finish button, the Device Manager creates the virtual
    device for you, and displays it in the AVD Manager’s list of virtual devices like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0024-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the new AVD is listed, then close the AVD Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Run the app on the AVD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve created the AVD, you can run the app on it.
  prefs: []
  type: TYPE_NORMAL
- en: To run the app, make sure that the virtual device is selected in the list of
    devices in Android Studio’s top toolbar, then run the app by choosing the “Run
    ‘app’” command from the Run menu.
  prefs: []
  type: TYPE_NORMAL
- en: The AVD can take a while to load, so while we wait, let’s take a look at what
    happens behind the scenes when you use the Run command.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0024-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Compile, package, deploy, run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Run command doesn’t just run your app. It also handles all the preliminary
    tasks that are needed for the app to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an overview of what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An APK file is an Android application package. It’s like a ZIP or JAR file
    for Android applications.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](Images/f0025-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The Kotlin source files get compiled to bytecode.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**An Android application package, or APK file, gets created.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The APK file includes the compiled Kotlin files, along with any libraries and
    resources needed by the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The APK is installed on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the device is virtual, Android Studio launches the emulator and waits until
    the AVD is active before installing the APK.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the device is physical, it just installs the APK.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The device starts the app’s main activity.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app is displayed on the device screen, and it’s all ready for you to play
    with.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you know what happens when you use the Run command, let’s see what
    the app we’ve built looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you’ve run the app on a physical or virtual device by choosing the
    “Run ‘app’” command from the Run menu.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio loads the app onto the device and starts it. The app name “My
    First App” appears at the top of the screen, and the text “Hello World!” is displayed
    in the center.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0026-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s run through what just happened.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s break down what happens when you run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Studio installs the app on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the device is virtual, it waits for the emulator to start before installing
    the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0027-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Android starts the app’s main activity.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses the code in *MainActivity.kt* (which Android Studio automatically included
    in the project) to create a `MainActivity` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0027-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity specifies that it uses the layout activity_main.xml.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0027-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The layout is displayed on the screen.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The text “Hello World!” appears in the center of the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0027-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s refine the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0028-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So far in this chapter, you’ve built a basic Android app and seen it running
    on a physical or virtual device. Next, we’re going to refine the app.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, the app displays the sample text “Hello World!” that the wizard
    put in as a placeholder. You’re going to change that text to say something else
    instead. So what do we need to change in order to achieve that?
  prefs: []
  type: TYPE_NORMAL
- en: To answer that question, let’s take a step back and see how the app is currently
    built.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0028-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The app has one activity and one layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we built the app, we told Android Studio how to configure it, and the wizard
    did the rest. The wizard created an activity for us, and also a default layout.
  prefs: []
  type: TYPE_NORMAL
- en: The activity controls what the app does
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android Studio created an activity for us named *MainActivity.kt*. The activity
    specifies what the app **does** and how it should respond to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The layout controls the app’s appearance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*MainActivity.kt* uses the layout Android Studio created for us named *activity_main.xml*.
    The layout specifies what the app **looks like**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0028-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We want to change the appearance of the app by updating the text that’s displayed.
    This means that we need to update the file that controls what the app looks like,
    so we need to take a closer look at the *layout*.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in the layout?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to change the sample “Hello World!” text that Android Studio created
    for us, so let’s start with the layout file *activity_main.xml*. Open it now (if
    it’s not already open) by finding the file in the *app/src/main/res/layout* folder
    in the explorer and double-clicking on it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0029-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The design editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you learned earlier, there are two ways of viewing and editing layout files
    in Android Studio: through the **design editor** and through the **code editor**.'
  prefs: []
  type: TYPE_NORMAL
- en: When you choose the design option, you can see that the sample text “Hello World!”
    appears in the layout as you might expect. But what’s in the underlying XML?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see by switching to the code editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0029-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The code editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Switch to the code editor by clicking on the Code option at the top of the editor.
    This shows you the layout’s underlying XML.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at the code.
  prefs: []
  type: TYPE_NORMAL
- en: activity_main.xml has two elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the code from *activity_main.xml* that Android Studio generated for
    us. We’ve left out some of the details you don’t need to think about just yet;
    we’ll cover them in more detail through the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0030-02.png)![image](Images/f0030-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the code contains two elements.
  prefs: []
  type: TYPE_NORMAL
- en: The first is a `<…ConstraintLayout>` element. This is a type of layout element
    that tells Android how to display components on the device screen. There are various
    types of layout available for you to use, and you’ll find out more about these
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The most important element for now is the second element, the `<TextView>`.
    This element is used to display text to the user, in this case the text “Hello
    World!”
  prefs: []
  type: TYPE_NORMAL
- en: 'The key part of the code within the `<TextView>` element is the line starting
    with `android:text`. This is a `text` attribute that describes the text that should
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0030-05.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll change the text to something else after you’ve had a go at the following
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Update the text displayed in the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to change the text in *activity_main.xml* so that when we run the app,
    it displays something other than “Hello World!” We can do this by changing the
    `text` attribute in the layout’s `<TextView>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0033-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The `text` attribute is defined inside the `<TextView>` element using the code
    `android:text`. It specifies what text should be displayed, in this case “Hello
    World!”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0033-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To update the text that’s displayed in the layout, simply change the value
    of the `text` attribute from `"Hello World!"` to some other text, such as `"Pow!"`.
    The new code for the `<TextView>` element should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0033-04.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s the only change you need to make in order to update the text. Let’s see
    what happens when the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: What the code does
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we take the app for a test drive, let’s go through what the code does.
  prefs: []
  type: TYPE_NORMAL
- en: '**Android uses MainActivity.kt to create the activity object MainActivity.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0034-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity specifies that it uses the layout activity_main.xml.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0034-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The layout displays the text “Pow!” in the center of the app on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0034-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve edited the file, try running the app in the emulator again by choosing
    the “Run ‘app’” command from the Run menu, or clicking on the Run button. You
    should see that the app now says “Pow!” instead of “Hello World!”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0035-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now built and updated your first app, and learned how
    Android apps hang together in the process. We’ll build on this further in the
    next chapter by creating an app you can interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0036-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 1](#getting_startedcolon_diving_in) under your belt and
    now you’ve added Android basic concepts to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0036-02.png)'
  prefs: []
  type: TYPE_IMG
