- en: Part V. Security Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第V部分. 安全模式
- en: Security is a broad topic that has implications for all stages of the software
    development lifecycle, from development practices, to image scanning at build
    time, to cluster hardening through admission controllers at deployment time, to
    threat detection at runtime. Security also touches all the layers of the software
    stack, from cloud infrastructure security, to cluster security, to container security,
    to code security, also known as the 4C’s of cloud native security. In this section,
    we focus on the intersection of an application with Kubernetes from the security
    point of view, as demonstrated in [Figure V-1](#img-security).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是一个广泛的主题，对软件开发生命周期的所有阶段都有影响，从开发实践、构建时的镜像扫描，到部署时通过准入控制器加强集群硬化，再到运行时的威胁检测。安全也涉及软件堆栈的所有层面，从云基础设施安全、集群安全、容器安全，到代码安全，也被称为云原生安全的4C。在本节中，我们关注应用程序与Kubernetes在安全角度的交集，如在[图 V-1](#img-security)中展示的。
- en: '![Security patterns overview](assets/kup2_P501.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![安全模式概览](assets/kup2_P501.png)'
- en: Figure V-1\. Security patterns
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 V-1\. 安全模式
- en: 'We start by describing the *Process Containment* pattern to contain and limit
    the actions an application is allowed to perform on the node it is running on.
    Then we explore the techniques to limit what other Pods a Pod can talk to by doing
    *Network Segmentation*. In the *Secure Configuration* pattern, we discuss how
    an application within a Pod can access and use configurations in a secure way.
    And finally, we describe the *Access Control* pattern—how an application can authenticate
    and talk to the Kubernetes API server and interact with it in more advanced scenarios.
    These give you an overview of the main security dimensions of an application running
    on Kubernetes, and we discuss the resulting patterns in the following chapters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先描述*进程封装*模式，以限制应用程序在其运行的节点上允许执行的操作。然后我们探讨*网络分割*技术，限制一个Pod可以与其他Pods交流的方式。在*安全配置*模式中，我们讨论Pod内应用程序如何安全访问和使用配置。最后，我们描述*访问控制*模式——应用程序如何在更复杂的场景中进行身份验证并与Kubernetes
    API服务器交互。这些内容为您提供了在Kubernetes上运行应用程序的主要安全维度的概述，接下来的章节我们将详细讨论相关模式：
- en: '[Chapter 23, “Process Containment”](ch23.html#ProcessContainment), describes
    the ways to contain a process to the least privileges it is entitled to.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第23章，“进程封装”](ch23.html#ProcessContainment)，描述了将进程限制到其享有的最低权限的方法。'
- en: '[Chapter 24, “Network Segmentation”](ch24.html#NetworkSegmentation), applies
    network controls to limit the traffic a Pod is allowed to participate in.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第24章，“网络分割”](ch24.html#NetworkSegmentation)，应用网络控制以限制Pod可以参与的流量。'
- en: '[Chapter 25, “Secure Configuration”](ch25.html#SecureConfiguration), helps
    keep and use sensitive configuration data securely and safely.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第25章，“安全配置”](ch25.html#SecureConfiguration)，帮助安全地保留和使用敏感配置数据。'
- en: '[Chapter 26, “Access Control”](ch26.html#AccessControl), allows users and application
    workloads to authenticate and interact with the Kubernetes API server.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第26章，“访问控制”](ch26.html#AccessControl)，允许用户和应用负载对Kubernetes API服务器进行身份验证和交互。'
