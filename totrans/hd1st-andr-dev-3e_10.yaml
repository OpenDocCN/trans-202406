- en: 'Chapter 8\. Navigation ui: *Going Places*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0293-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Most apps need to be able to navigate between destinations.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'And with Android’s Navigation component, building this UI became much simpler.
    Here, you’ll learn how to use some of Android’s navigation UI components so that
    **your users can navigate your app more easily**. You’ll see how to use **themes**,
    and replace your app’s default app bar with a **toolbar**, You’ll learn how to
    add **menu items** you can **use for navigation**. You’ll discover how to implement
    **bottom bar navigation**. Finally, you’ll create a swish **navigation drawer**:
    a panel that slides out from the side of your activity.'
  prefs: []
  type: TYPE_NORMAL
- en: Different apps, different structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous two chapters, you learned how to use Android’s Navigation component
    to navigate from fragment to fragment by clicking on a button. This approach worked
    well in the Secret Message app because we needed to navigate from one destination
    to another in a linear way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0294-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But not all apps follow this kind of structure. Many apps have screens you
    need to be able to navigate to from wherever you are in the app. An email app,
    for example, may have inbox, sent items, and help screens that must be available
    throughout the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0294-02.png)'
  prefs: []
  type: TYPE_IMG
- en: When you have an app with a looser navigation structure like this, how do you
    make sure you can always navigate to each screen?
  prefs: []
  type: TYPE_NORMAL
- en: Android includes navigation UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you have screens you want to be able to access from anywhere in your app,
    you might want to use one of Android’s navigation UI components. They include:'
  prefs: []
  type: TYPE_NORMAL
- en: An app bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a bar that appears at the top of the screen, and Android Studio usually
    includes one for you by default. You can add items to the app bar which, when
    clicked, navigate to destinations.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0295-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The bottom navigation bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This appears at the bottom of the screen. It features a small number of items
    you can use for navigation.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0295-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A navigation drawer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a drawer that slides out from the edge of the screen. Many apps include
    one of these as it can be very flexible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0295-03.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we’re going to discover how to implement each of these three
    types of navigation UI by building a prototype email app named CatChat.
  prefs: []
  type: TYPE_NORMAL
- en: How the CatChat app will work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CatChat app will feature a single activity named `MainActivity`, and three
    fragments: `InboxFragment`, `SentItemsFragment`, and `HelpFragment`. Each fragment
    will be displayed in `MainActivity` as the user navigates to each one.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0296-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The app will include an app bar that includes a Help menu item. When the user
    clicks on this, the app will navigate to `HelpFragment` by displaying it in `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0296-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The app will also feature a navigation drawer that will be used to navigate
    between all three fragments. The drawer will include an item for each fragment,
    and clicking on each one will display the correct fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0296-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s go through the steps we’ll take to create the CatChat app.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four main steps we’ll go through to create the CatChat app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Replace the default app bar with a toolbar.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A toolbar looks like an app’s default app bar, but it provides you with more
    flexibility, and includes the latest app bar features. Along the way, you’ll learn
    how to apply themes and styles.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0297-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Add a Help menu item to the toolbar.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When clicked, the Help menu item will navigate to `HelpFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0297-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Implement the bottom bar navigation.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll add a bottom bar to the app so that we can navigate between each of the
    app’s fragments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0297-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Create the navigation drawer.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we’ll replace the bottom navigation bar with a navigation drawer. The
    drawer will include a header image, and items for each of the app’s fragments,
    grouped into sections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0297-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We’ll start by creating a new project for the CatChat app.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0298-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to use a new project for the CatChat app, so create a new Android
    Studio project using the same steps you used in the previous chapters. Choose
    the Empty Activity option, enter a name of “CatChat” and a package name of “com.hfad.catchat”,
    and accept the default save location. Make sure the language is set to Kotlin
    and the minimum SDK is API 21 so that it will run on most Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: A default app bar gets added…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you create a new project with an empty activity, Android Studio usually
    includes an app bar that displays the app’s name. You can see this app bar at
    the top of the screen when you run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0298-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having an app bar is useful for a number of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It makes key actions more prominent in a way that’s
    predictable, such as sharing content or performing searches.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **It can help the user know where they are in the
    app by displaying the app name, or a label for the current screen.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/star.png) **You can use it to navigate to different destinations.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But how does the app bar get added?
  prefs: []
  type: TYPE_NORMAL
- en: …by applying a theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default app bar gets added to the app by applying a **theme**. A theme gives
    your app a consistent look and feel across multiple screens. It controls the app’s
    general appearance, and whether it includes an app bar.
  prefs: []
  type: TYPE_NORMAL
- en: Android comes with a number of themes you can use in your apps, and by default,
    Android Studio applies one that includes an app bar.
  prefs: []
  type: TYPE_NORMAL
- en: The CatChat app will use a Material theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to apply a theme to the CatChat app that uses **Material Design**.
  prefs: []
  type: TYPE_NORMAL
- en: Material is a design system developed by Google that helps you build high-quality
    apps and websites with a consistent look and feel. The idea behind it is that
    a user can switch from a Google app like the Play Store to an app designed by
    a third-party developer and instantly feel comfortable and know what to do.
  prefs: []
  type: TYPE_NORMAL
- en: Material was originally inspired by print-based design principles and movement
    to reflect how real-world objects (such as index cards and pieces of paper) look
    and behave. Its latest evolution is known as **Material You**, which gives users
    a more fluid experience with a personalized color palette.
  prefs: []
  type: TYPE_NORMAL
- en: The app build.gradle file needs a Material library dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Material themes are held in a separate library that you need to include
    in your app. You do this by adding a dependency to the *com.google.android.material*
    library in the app’s *build.gradle* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we want to use a Material theme in the CatChat app, we need to make sure
    it includes this library. Open the file *CatChat/app/build.gradle*, and make sure
    it includes the following line (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0299-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Android Studio may have already added this dependency to the file for you. If
    not, you’ll need to add it yourself, and click on the Sync Now option that appears
    at the top of the code editor to sync the change with the rest of your project.
  prefs: []
  type: TYPE_NORMAL
- en: We want to apply a Material theme to the CatChat app to control its app bar.
    Let’s find out how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Apply a theme in AndroidManifest.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You apply a theme in the app’s *AndroidManifest.xml* file. As you learned in
    [Chapter 3](ch03.xhtml#layoutscolon_being_a_layout), this file provides information
    about the app’s configuration. It features attributes—including the theme—that
    have a direct impact on the app bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the *AndroidManifest.xml* code Android Studio created for us in the
    CatChat project (we’ve bolded the key areas):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0300-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The `**android:label**` attribute refers to the text that’s displayed in the
    app bar, and it’s the name you specify when you first create the app. In the code
    above, it uses a `String` resource named `app_name`, which Android Studio has
    added to *strings.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `**android:theme**` attribute specifies the theme. In the code above, it’s
    set using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that the theme is defined as a style resource (denoted by `@style`)
    named `Theme.CatChat`.
  prefs: []
  type: TYPE_NORMAL
- en: Define styles in style resource files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Style resources are used to describe any themes and styles the app needs to
    use, and they’re held in one or more style resources files.
  prefs: []
  type: TYPE_NORMAL
- en: When we created the CatChat app, Android Studio created two style resource files
    for us. Both files are named *themes.xml*, and they’re located in the *app/src/main/res/values*
    and *app/src/main/res/values-night* folders. The one in the *values* folder is
    the app’s default style resource file, while the one in the *values-night* folder
    is used at night.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some versions of Android Studio name this file styles.xml instead.
  prefs: []
  type: TYPE_NORMAL
- en: '*themes.xml* in the *values* folder defines a style code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0301-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The `**<style>**` element tells Android that it’s a style resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every style must have a name to identify it by, and you define this using the
    `**name**` attribute like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0301-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '*AndroidManifest.xml*’s `theme` attribute uses this name to set the app’s theme,
    for example `"@style/Theme.CatChat"`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The style also includes a `**parent**` attribute, which specifies which underlying
    theme the style should be based on. The above code uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0301-05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'which is a theme with a dark app bar that lets the app transition between day
    and night themes. During the day, it uses the style defined in the *values* folder’s
    style resource file, and it switches to the one in the *values-night* folder at
    night:'
  prefs: []
  type: TYPE_NORMAL
- en: The above style also includes `<item>` elements, which override some of the
    theme’s colors. Let’s look at this in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Styles can override theme colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to override any properties in the parent theme, such as its color
    scheme, you can do so by adding `<item>` elements to the style. The CatChat app,
    for example, includes items that override the primary and secondary brand colors.
    The primary color is the app’s main color, and it’s used for things like the app
    bar. The secondary color provides a contrast, and it’s used by some views.
  prefs: []
  type: TYPE_NORMAL
- en: You can use multiple style resource files to apply a different color scheme
    in different situations. The CatChat app, for example, includes one style resource
    file in the *values* folder, and another in *values-night*. This arrangement—along
    with the `DayNight` theme each style is based on—lets you apply different color
    schemes during the day and at night.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code the CatChat app uses to override the primary colors in its
    *themes.xml* file in the *values* folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, each item has a name, and uses `@color` to refer to a color
    in a **color resource file**.
  prefs: []
  type: TYPE_NORMAL
- en: Color resource files define a set of colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create a new project, Android Studio usually includes a default color
    resource file named *colors.xml*. It’s located in the *app/src/main/res/values*
    folder, and its colors can be used throughout your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical color resource file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0302-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To change your app’s color scheme, simply add the colors you want to the color
    resource file, and refer to them in its style resource files.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the default app bar with a toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you’ve seen how Android Studio adds a default app bar to your app by
    applying a theme. Adding an app bar in this way is easy, but a more flexible approach
    is to **replace it with a toolbar**.
  prefs: []
  type: TYPE_NORMAL
- en: A basic toolbar looks just like the default app bar you’ve already seen, but
    it’s much more flexible. You can change its height, for example, and in the next
    chapter, you’ll learn how to make one expand or collapse when the user scrolls
    the device screen. It also includes all the latest app bar features, so applying
    a toolbar makes it easier to include these in your app.
  prefs: []
  type: TYPE_NORMAL
- en: You replace the default app bar by removing the original app bar, including
    a toolbar in your layout, and then telling the activity to use the toolbar as
    its app bar. We’ll show you how to do this over the next few pages.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0303-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Remove the default app bar using a theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You remove the default app bar by applying a theme to the app that doesn’t include
    an app bar.
  prefs: []
  type: TYPE_NORMAL
- en: The current version of the CatChat app, for example, uses the theme `Theme.MaterialComponents.DayNight.DarkActionBar`.
    We’re going to remove the default app bar by replacing it with `Theme.MaterialComponents.DayNight.NoActionBar`.
    These two themes have the same general appearance, except that the second has
    no app bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the theme now by updating the code in the *themes.xml* files in the
    *values* and *values-night* folders so that they include the change shown below
    (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0303-03.png)![image](Images/f0303-04.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything that we need to do to remove the default app bar. Next up,
    how to add the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: A toolbar is a type of View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the default app bar, a toolbar is a type of view that you add to your
    layout. As it’s a view, this means you have full control over its size and position.
  prefs: []
  type: TYPE_NORMAL
- en: Different types of toolbars are available, and in the CatChat app we’re going
    to use a **Material toolbar**. This is a type of toolbar that works well with
    Material themes, such as the one we’re using in this app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You add a Material toolbar using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0304-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You start by defining the toolbar using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0304-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where `com.google.android.material.appbar.MaterialToolbar` is the fully qualified
    path of the `MaterialToolbar` class. You then use other view attributes to give
    it an ID, and specify its appearance. To make the toolbar as wide as its parent
    and as tall as the default app bar from the underlying theme, for example, you
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `**?attr**` prefix in the above code means that you want to use an attribute
    from the current theme. In this particular case, we’re using `?attr/actionBarSize`
    to refer to the height of the theme’s default app bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also style the toolbar so that it uses the app’s primary colors. This
    is done using the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0304-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve learned what toolbar code looks like, let’s add one to `MainActivity`’s
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: Add the toolbar to activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to add a toolbar to `MainActivity`’s layout so it appears at the
    top of the screen. Update the code in *activity_main.xml* so that it matches the
    code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0305-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Where did the app name go?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The above code adds a toolbar to `MainActivity`’s layout, but it doesn’t yet
    include any app bar functionality. If you were to run the app at this point, you’d
    find, for example, that the app name isn’t displayed in the toolbar as it was
    in the default app bar we had previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0305-03.png)'
  prefs: []
  type: TYPE_IMG
- en: To get the toolbar to behave like a proper app bar, we need to make some changes
    to the activity’s Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: Set the toolbar as MainActivity’s app bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make the toolbar behave like a proper app bar, you need to tell `MainActivity`
    to treat it as one. You do this by calling the `**setSupportActionBar()**` method
    in the activity’s Kotlin code, and passing it a reference to the toolbar like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0306-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We’ll add this code to `MainActivity`’s `onCreate()` method so that it runs
    immediately after the activity gets created. Update the code for *MainActivity.kt*
    so that it includes the changes (in bold) shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0306-03.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything we need to replace the app’s default app bar with a toolbar.
    Let’s take the app for a test drive and make sure it appears correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `MainActivity` displays a toolbar at the top of the screen.
    The toolbar includes the name of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve replaced the default app bar with a toolbar, let’s add some more
    functionality to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0306-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s use the toolbar to navigate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0307-01.png)'
  prefs: []
  type: TYPE_IMG
- en: At the beginning of the chapter, we said we wanted to be able to navigate to
    different screens in the CatChat app using Android’s navigation UI components.
    Now that we’ve added a toolbar to the app, let’s create a couple of screens, and
    use the toolbar to navigate between them.
  prefs: []
  type: TYPE_NORMAL
- en: How toolbar navigation will work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll begin by creating two new fragments—`InboxFragment` and `HelpFragment`—which
    will be displayed in `MainActivity` when the user navigates to each one. `InboxFragment`
    will be displayed when the app is launched, and `HelpFragment` will be displayed
    when we navigate to it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We’re not going to add any email or help functionality to InboxFragment and
    HelpFragment. We’ll just display a piece of text in each one so we know which
    fragment is being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll navigate to `HelpFragment` by adding a Help item to the toolbar so it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0307-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll add the Help item using a menu; you’ll find out how to do this a few pages
    ahead.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Help item, the app will navigate to `HelpFragment`. We’ll
    also update the toolbar’s title to indicate what the current screen is, and provide
    an Up button to make it easy to navigate back to `InboxFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0307-04.png)'
  prefs: []
  type: TYPE_IMG
- en: So that’s how the toolbar navigation will work. Let’s start implementing it
    by adding `InboxFragment` and `HelpFragment` to the app.
  prefs: []
  type: TYPE_NORMAL
- en: Create InboxFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to display `InboxFragment` in `MainActivity` when the app launches.
    Highlight the *com.hfad.catchat* package in the *app/src/main/java* folder, then
    go to File→New→Fragment→Fragment (Blank). Name the fragment “InboxFragment”, name
    its layout “fragment_inbox”, and make sure the language is set to Kotlin. Then
    update the code for *InboxFragment.kt* to match the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0308-02.png)![image](Images/f0308-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here’s the code for *fragment_inbox.xml* (update the code for this file
    too):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0308-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Create HelpFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll display `HelpFragment` in `MainActivity` when the user clicks on the
    Help item in the toolbar. Highlight the *com.hfad.catchat* package in the *app/src/main/java*
    folder, then go to File→New→Fragment→Fragment (Blank). Name the fragment “HelpFragment”,
    name its layout “fragment_help”, and make sure the language is set to Kotlin.
    Then make sure the code for *HelpFragment.kt* matches the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0309-02.png)![image](Images/f0309-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then make sure the code for *fragment_help.xml* matches the layout below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0309-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll use the Navigation component to navigate to HelpFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.xhtml#fragments_and_navigationcolon_finding_yo), you learned
    how to navigate between fragments using Android’s Navigation component. Even though
    we’re now going to use the toolbar to navigate to a new destination, we can still
    use the Navigation component for all our navigation needs.
  prefs: []
  type: TYPE_NORMAL
- en: We first need to add the Navigation component to the CatChat project using Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Add a version number to the project build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just as before, you need to add a new variable to the project’s *build.gradle*
    file that specifies the version of the Navigation component that should be added
    to the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *CatChat/build.gradle*, and add the following line (in bold)
    to the `buildscript` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0310-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add dependencies to the app build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, you need to add two Navigation component dependencies to the app’s version
    of the *build.gradle* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *CatChat/app/build.gradle*, and add the following two lines (in
    bold) to the `dependencies` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0310-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve made these changes, click on the Sync Now option that appears at
    the top of the code editor to sync the changes with the rest of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve added the Navigation component to your project, let’s use it
    to create a navigation graph after the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Add the fragments to a navigation graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, your app’s navigation graph holds details of the destinations
    in your app and the possible paths you can take to navigate to them. As `InboxFragment`
    and `HelpFragment` are possible destinations in the CatChat app, we’ll create
    a new navigation graph, and add the two fragments to it.
  prefs: []
  type: TYPE_NORMAL
- en: To create the navigation graph, select the *CatChat/app/src/main/res* folder
    in the project explorer, and then choose File→New→Android Resource File. When
    prompted, enter a file name of “nav_graph”, choose a resource type of “Navigation”,
    and click on the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0313-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open the navigation graph (file *nav_graph.xml*), switch to the Code
    view, and update the file so that it matches the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0313-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code adds `InboxFragment` and `HelpFragment` to the navigation graph,
    and assigns a user-friendly label to each one.
  prefs: []
  type: TYPE_NORMAL
- en: Those are all the changes we need to make to the navigation graph. Next, let’s
    update `MainActivity`’s layout so that it can display each fragment when we navigate
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add a navigation host to activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in [Chapter 6](ch06.xhtml#fragments_and_navigationcolon_finding_yo),
    you display each destination you navigate to by adding a navigation host to the
    activity’s layout. You do this using a `FragmentContainerView`, specifying the
    type of navigation host you want to use, and the name of the navigation graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to do this in the CatChat app is almost the same as the code that
    we added to the Secret Message app in [Chapter 6](ch06.xhtml#fragments_and_navigationcolon_finding_yo).
    Update your code for *activity_main.xml* to include the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0314-02.png)![image](Images/f0314-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve added the navigation host, let’s add an item to the toolbar,
    which we can use to navigate to `HelpFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: Specify items in the toolbar with a menu resource file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You tell Android which items should appear on the toolbar by defining a **menu**.
    Each menu is defined in an XML menu resource file which specifies the items that
    you want to appear.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to create a new menu resource file named *menu_toolbar.xml* which
    we’ll use to add the Help item to the toolbar. Select the *app/src/main/res* folder,
    go to the File menu, choose New, and then select the option to create a new Android
    resource file. When prompted, give it a name of “menu_toolbar”, specify a resource
    type of “Menu”, and make sure that the directory name is *menu*. When you click
    on the OK button, Android Studio will create the file for you, and add it to the
    *app/src/main/res/menu* folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like navigation graphs and layout files, you can edit menu resource files
    by updating the XML code, or by using the built-in design editor. Here’s what
    the design editor looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0315-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s add a Help item to the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to be able to navigate to `HelpFragment` from the toolbar, so we’ll
    add a Help item to the menu resource file. We’ll do this by directly editing the
    XML code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Code view of *menu_toolbar.xml*, then update the code so it matches
    the code below (the lines you need to add are in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0316-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Every menu resource file, including the one above, has a `**<menu>**` root element.
    This is what tells Android that it defines a menu.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `<menu>` element, you typically have a number of `<item>` elements,
    each one describing a separate item. In this particular case, there’s a single
    Help item with the title “Help”.
  prefs: []
  type: TYPE_NORMAL
- en: The `<item>` element has a number of attributes that you can use to control
    the item’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:id` attribute assigns an ID to the item. This ID is used by the
    Navigation component to navigate to a destination, and **it must have the same
    ID as the destination you want to navigate to in the navigation graph**. You’ll
    find out how this works a few pages ahead.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:icon` attribute specifies which icon (if any) should be displayed
    for the item. Android has many built-in icons, and the IDE presents you with a
    list of available ones when you start typing the icon name.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:title` attribute defines the item’s text.
  prefs: []
  type: TYPE_NORMAL
- en: The `app:showAsAction` attribute specifies how you want the item to appear in
    the toolbar. Setting it to “always” means that it should always appear in the
    main area of the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: onCreateOptionsMenu() adds menu items to the toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve defined the menu resource file, you add its items to the toolbar
    by implementing the `**onCreateOptionsMenu()**` method in your activity code.
    This method gets called when the activity is ready to add items to the toolbar.
    It inflates the menu resource file, and adds each item it describes to the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the CatChat app, we want to add the item defined in *menu_toolbar.xml* to
    `MainActivity`’s toolbar. The code to add this item is shown below in bold (you’ll
    update your code a few pages ahead):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0317-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: inflates the menu resource file. Behind the scenes, it creates a `Menu` object
    that represents the menu resource file, and any items the menu resource file contains
    are translated to `MenuItem` objects. These are then added to the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: That’s everything that’s needed to add a menu to the toolbar. Next, we’ll make
    `MainActivity` navigate to `HelpFragment` when the user clicks the Help item.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0317-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Respond to menu item clicks with onOptionsItemSelected()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you’ve used the `onCreateOptionsMenu()` method to add menu items to the
    toolbar, you make them respond to clicks by implementing `**onOptionsItemSelected()**`.
    This method runs whenever an item in the toolbar is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0318-02.png)'
  prefs: []
  type: TYPE_IMG
- en: In the CatChat app, we want to navigate to `HelpFragment` when the user clicks
    the Help menu item, and we can achieve this with a little help from the Navigation
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code looks like; we’ll add these changes to *MainActivity.kt*
    a few pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0318-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Each time the Help menu item is clicked, the navigation controller gets its
    ID and looks for a matching one in the navigation graph. It then passes the destination
    with this ID to the navigation host so that it’s displayed on the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: We need to configure the toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve now covered everything that’s needed to add the Help menu item to the
    toolbar and make it navigate to `HelpFragment`. Before we take the app for a test
    drive, however, there’s one more change we’re going to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we defined the navigation graph *nav_graph.xml* earlier in the chapter,
    we added labels to each destination using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0319-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To make it clear which screen is being displayed, we’re going to configure
    the toolbar so that each time we navigate to a new destination, its label is displayed
    in the toolbar. We’ll also add an Up button to the toolbar so that when the user
    navigates to `HelpFragment`, it provides an easy way of navigating back to `InboxFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0319-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Up navigation may sound the same as using the device Back button, but it’s
    slightly different. The Back button allows users to work their way *back* through
    the back stack: the history of screens they’ve visited. The Up button, on the
    other hand, is based on the navigation graph hierarchy. It provides a quick way
    of going *up* this hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: We can configure the toolbar to update the text and include an Up button using
    the Navigation component. Let’s find out how.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the toolbar using an AppBarConfiguration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0320-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We want to configure the toolbar so that the text it displays corresponds to
    the label of the current destination in the navigation graph, and so that it includes
    an Up button. We can do this by building an `**AppBarConfiguration**` object that’s
    based on the navigation graph, and linking it to the toolbar. The `AppBarConfiguration`
    class is part of the Navigation component, and it’s used to make app bars and
    toolbars play nicely with the navigation controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to build an `AppBarConfiguration` and link it to a toolbar
    (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0320-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above code first gets a reference to the navigation controller from the
    navigation host using the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0320-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Code like this is necessary whenever you need to get a reference to the navigation
    controller from an activity’s `onCreate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The code then builds a configuration that links the toolbar to the navigation
    graph, and applies it to the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: When the code runs, it uses information in the navigation graph to display the
    current destination’s label. It also adds an Up button to the toolbar for all
    destinations except the navigation graph’s Start destination, which in this case
    is `InboxFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: That’s everything that you need to know to implement toolbar navigation. We’ll
    show you the full `MainActivity` code on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the complete code for *MainActivity.kt*; update your code to include
    the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0321-02.png)'
  prefs: []
  type: TYPE_IMG
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The app is launched and MainActivity gets created.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`InboxFragment` is added to the navigation host and displayed on the device
    screen.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0322-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity’s onCreateOptionsMenu method runs.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It adds the Help menu item defined in *menu_toolbar.xml* to the toolbar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0322-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks the Help item in the toolbar.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0322-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity’s onOptionsItemSelected() method runs.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It passes navigation for the Help item to the navigation controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0323-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller looks for the Help item’s ID in the navigation
    graph.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0323-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The navigation controller replaces InboxFragment with HelpFragment in the
    navigation host.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0323-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0324-01.png)'
  prefs: []
  type: TYPE_IMG
- en: When we run the CatChat app, `MainActivity` is launched, and `InboxFragment`
    is displayed in `MainActivity`’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: A Help item is displayed in `MainActivity`’s toolbar. When we click on it, the
    app navigates to `HelpFragment`. The toolbar text is changed to “Help” and an
    Up button appears.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Up button, the app navigates to `InboxFragment`. The Up
    button disappears and the text “Inbox” is displayed in the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0324-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Well done! You’ve now learned how to add a toolbar and use it for navigation.
  prefs: []
  type: TYPE_NORMAL
- en: BE the Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A menu resource file and navigation graph is shown below. The menu is added
    to a toolbar. Your job is to play like you’re the menu, and say which fragment
    is navigated to when each item in the menu is clicked.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0325-01.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Menu Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A menu resource file and navigation graph is shown below. The menu is added
    to a toolbar. Your job is to play like you’re the menu, and say which fragment
    is navigated to when each item in the menu is clicked.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0326-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Most types of UI navigation work with the Navigation component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0327-01.png)'
  prefs: []
  type: TYPE_IMG
- en: In the chapter so far, you’ve learned how to enable toolbar navigation by defining
    a menu resource file, using the Navigation component to navigate between fragments,
    and configuring the toolbar to change its appearance as you navigate through the
    app.
  prefs: []
  type: TYPE_NORMAL
- en: The great news is that other types of UI navigation—such as bottom navigation
    bars and navigation drawers—work in a similar way. Even though they look different
    from one another, you can take the techniques you’ve learned for toolbar navigation
    and apply them to other types of navigation.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, we’re going to add a bottom navigation bar to the CatChat
    app’s `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: '**A bottom navigation bar can hold up to five items. It’s displayed at the
    bottom of the screen.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How the bottom navigation bar will work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As its name suggests, a bottom navigation bar is a type of navigation bar that’s
    positioned at the bottom of the device screen. You can use it to navigate to up
    to five destinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CatChat app’s bottom navigation bar will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0327-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the bar contains three items: Inbox, Sent Items, and Help.
    When we click on each item, the app will navigate to the fragment associated with
    it. When we click on the Help item, for example, the app will navigate to `HelpFragment`,
    and when we click on Sent Items, it will navigate to a new fragment (which we
    need to create) named `SentItemsFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll implement bottom bar navigation over the next few pages, and we’ll start
    by creating the new fragment: `SentItemsFragment`.'
  prefs: []
  type: TYPE_NORMAL
- en: Create SentItemsFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to create a new fragment named `SentItemsFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Highlight the *com.hfad.catchat* package in the *app/src/main/java* folder,
    then go to File→New→Fragment→Fragment (Blank). Name the fragment “SentItemsFragment”,
    name its layout “fragment_sent_items”, and make sure the language is set to Kotlin.
    Then update the code for *SentItemsFragment.kt* to match the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0328-02.png)![image](Images/f0328-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here’s the code for *fragment_sent_items.xml* (update your version of this
    code too):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0328-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Add SentItemsFragment to the Navigation graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to be able to navigate to `SentItemsFragment` from the bottom navigation
    bar using the Navigation component. To do this, we need to add the fragment to
    the navigation graph as a new destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the navigation graph file *nav_graph.xml* (if it’s not already open),
    then update its code so that it matches the code below (our changes are in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0329-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the new destination has an ID of `sentItemsFragment`, and a
    label of “Sent Items”. We’ll use the ID in the bottom navigation bar’s menu resource
    file, which we’ll create next.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom navigation bar needs a new menu resource file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier in the chapter, we created a menu resource file named *menu_toolbar.xml*
    to add a Help item to the toolbar. While it’s possible for different navigation
    UI components to share the same menu, we need to create a new one for the bottom
    navigation bar because it shows two extra items: Inbox and Sent Items.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0330-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To create the new menu resource file, select the *app/src/main/res* folder,
    go to the File menu, choose New, and then select the option to create a new Android
    resource file. When prompted, give it a name of “menu_main”, specify a resource
    type of “Menu”, and make sure the directory name is *menu*. When you click on
    the OK button, Android Studio will create the file for you, and add it to the
    *app/src/main/res/menu* folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the file *menu_main.xml* (if it’s not already open), and update
    its code to add menu items for `InboxFragment`, `SentItemsFragment`, and `HelpFragment`
    (shown below in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0330-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve created the new menu resource file, let’s add a bottom navigation
    bar to `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: A bottom navigation bar is a type of View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like a toolbar, a bottom navigation bar is a type of view that you add
    to your layout. The code to add a bottom navigation bar looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0331-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You start by defining the bottom navigation bar using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'where `com.google.android.material.bottomnavigation.BottomNavigationView` is
    the fully qualified path of the `BottomNavigationView` class: the class that defines
    the bar. You then use extra attributes to give it an ID, and specify its appearance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike a toolbar, you don’t need to write Kotlin code to add menu items to
    a bottom navigation bar. You simply specify which menu resource file to add to
    the bar using the `app:menu` attribute like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code attaches the *menu_main.xml* menu resource file to the bottom
    navigation bar, and its items are added to the bar at runtime like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0331-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve seen what bottom navigation bar code looks like, let’s add one
    to `MainActivity`’s layout.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full code for *activity_main.xml*: update your code to include the
    changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0332-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve added the bottom navigation bar to `MainActivity`’s layout, let’s
    get it to navigate between destinations.
  prefs: []
  type: TYPE_NORMAL
- en: Link the bottom navigation bar to the navigation controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code to make a bottom navigation bar navigate between destinations is simpler
    than the code needed to implement toolbar navigation. All you need to do is get
    a reference to the `BottomNavigationView`, which defines the navigation bar, and
    call its `setupWithNavController()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0333-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Each time you click on an item in the navigation bar, the navigation controller
    fetches its ID and looks for a destination with a matching ID in the navigation
    graph. It then passes this destination to the navigation host so that it’s displayed
    on the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0333-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s add the bottom navigation bar code to *MainActivity.kt*, and take the
    app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: The updated code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated code for *MainActivity.kt*; update the code to include the
    changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0334-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the CatChat app, `MainActivity` is launched, and `InboxFragment`
    is displayed in `MainActivity`’s layout. A bottom navigtion bar is displayed that
    contains three items.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on each item in the bottom navigation bar, the app navigates to
    the appropriate screen. When we click on Sent Items, for example, `SentItemsFragment`
    is displayed in `MainActivity`, and when we click on the Help item, `HelpFragment`
    is displayed instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0335-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The bottom navigation bar is working exactly how we want it to.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation drawer lets you display many navigation items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0336-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you’ve learned, a bottom navigation bar is a good option if you have a small
    number of navigation items because it allows you to display up to five such items.
    But what if you have a larger number of menu items?
  prefs: []
  type: TYPE_NORMAL
- en: If you want users to be able to navigate through a large number of options,
    a better choice might be a **navigation drawer**. This is a slide-out, scrollable
    panel that contains links to other parts of the app that you can optionally group
    into different sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigation drawers are widely used across Android apps. The Gmail app, for
    example, uses a navigation drawer that lets you navigate to different screens
    in the app, and contains sections such as email categories, recent labels, and
    all labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0336-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s replace the bottom navigation bar with a navigation drawer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to replace the bottom navigation bar we added to the CatChat app
    with a navigation drawer. The navigation drawer will contain a header image and
    a set of options. The main options will let the user navigate to `InboxFragment`
    and `SentItemsFragment`, and we’ll put a `HelpFragment` item in a separate section
    labeled Support. Here’s what the drawer will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0337-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The navigation drawer is composed of several different components. We’ll go
    through these on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation drawers deconstructed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You implement a navigation drawer by adding a **drawer layout** to the root
    of your activity’s layout. The drawer layout contains two views:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A view for the screen’s main content**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is usually a layout containing a toolbar and a navigation host, which you
    use to display fragments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**A navigation view for the drawer’s contents**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A navigation view is a type of frame layout that’s used to display a navigation
    menu. In this app, it will display a drawer header too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the drawer is closed, the drawer layout looks just like a normal activity,
    except that the toolbar includes a drawer icon that’s used to open the drawer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0338-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you open the drawer, the navigation view slides over the activity’s main
    content to display the drawer’s contents. When you click on an item, it uses the
    Navigation component to display the relevant destination, and the drawer closes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0338-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The drawer gets its items from a menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like a toolbar and bottom navigation bar, a navigation drawer gets the
    items it needs to display from a menu resource file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of creating a new menu resource file for the drawer, we’re going to
    reuse *menu_main.xml*: the file that we used for the bottom navigation bar. Here’s
    a reminder of the current code in *menu_main.xml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0339-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above menu resource file, when added to the navigation drawer, produces
    a list of items with an icon against each one. We’re going to tweak the menu to
    add an extra highlight to the item the user selects, and split the menu into sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0339-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s find out how.
  prefs: []
  type: TYPE_NORMAL
- en: Add the support section…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll first add the Support heading, which is done by defining a new item.
    Because it’s just a heading, we only need to give it a title: it doesn’t have
    an icon, and no ID is required as we won’t use it to navigate anywhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to add the Support heading:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0340-02.png)'
  prefs: []
  type: TYPE_IMG
- en: …as a separate submenu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want the Help item to appear under the Support heading so that it forms a
    separate section. To do this, we’ll define a submenu inside the Support item,
    specified by a `<menu>` element. We’ll add the Help item to this submenu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to add a submenu, which includes a Help item; we’ll update
    *menu_main.xml* with this code a couple pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0340-03.png)![image](Images/f0340-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The above submenu just contains a single item. If you wanted it to contain multiple
    items, you’d simply include each item in the submenu.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the code we need to add a Support section to the drawer’s menu. Next,
    let’s find out how to add an extra highlight to the item the user selects.
  prefs: []
  type: TYPE_NORMAL
- en: Highlight the selected item with groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The current menu produces a navigation drawer that changes the text color of
    the current selected item. You can make it extra clear to the user which item
    has been selected by adding an extra highlight like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0341-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You add this extra highlight by placing items in a group using the `**<group>**`
    element. You then use an attribute named `android:checkableBehavior` to specify
    the group’s behavior when an item is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to do this (we’ll update *menu_main.xml* on the next page):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0341-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the above code sets the `android:checkableBehavior` attribute
    to `"single"`. This option means that only a single item in the group at a time
    will be highlighted—the option the user selects.
  prefs: []
  type: TYPE_NORMAL
- en: That’s everything we need to make the menu look and behave the way we want when
    it’s used by a navigation drawer. We’ll show you the full code on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for menu_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to update the navigation drawer’s menu so that the Help menu is
    shown in a Support section. We’ll also use groups to add an extra highlight to
    the item the user selects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete code for *menu_main.xml*; update its code to include all
    the changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0342-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s the menu sorted. Next, we’ll create the navigation drawer’s header.
  prefs: []
  type: TYPE_NORMAL
- en: Create the navigation drawer’s header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The navigation drawer’s header is a simple layout that we’ll add to a new layout
    file named *nav_header.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: Create this file now by selecting the *app/src/main/res/layout* folder in Android
    Studio, and choosing File→New→Layout Resource File. When prompted, name the layout
    “nav_header”, and if prompted, choose a resource type of Layout.
  prefs: []
  type: TYPE_NORMAL
- en: Add the image file…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The layout is composed of a single image, which needs to be added to the *app/src/main/res/drawable*
    folder. Android Studio probably created this folder for you when you created the
    project. If it’s not there, create it by selecting the *app/src/main/res* folder,
    going to the File menu, choose the New option, and then clicking on the option
    to create a new Android resource directory. When prompted, choose a resource type
    of Drawable, name it “drawable”, and click on OK.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0343-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve created the *drawable* folder, download the file *kitten_small.webp*
    from *tinyurl.com/hfad3*, and add it to the *drawable* folder.
  prefs: []
  type: TYPE_NORMAL
- en: …and update the nav_header.xml code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll add the image to *nav_header.xml* using an `<ImageView>` element. You
    already know how to use this element, so update the code for *nav_header.xml*
    to match the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0343-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a header for the navigation drawer, let’s add the drawer itself.
  prefs: []
  type: TYPE_NORMAL
- en: How to create a navigation drawer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You create a navigation drawer by adding a `**DrawerLayout**` to the activity’s
    layout as its root element. The `DrawerLayout` needs to contain two things: a
    view or view group for the activity’s content as its first element, and a navigation
    view that defines the drawer’s contents as its second.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical `DrawerLayout` code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0344-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two key `<NavigationView>` attributes that you use to control the
    drawer’s appearance: `**app:headerLayout**` and `**app:menu**`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `app:headerLayout` attribute specifies the layout that should be used for
    the navigation drawer’s header (in this case *nav_header.xml*). This attribute
    is optional.
  prefs: []
  type: TYPE_NORMAL
- en: The `app:menu` attribute specifies which menu resource file contains the drawer’s
    options (in this case *menu_main.xml*). If you don’t include this attribute, your
    navigation drawer won’t include any items.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to replace the `MainActivity`’s bottom navigation bar with a navigation
    drawer. The code to do this is shown below; update file *activity_main.xml* to
    include the changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0345-02.png)![image](Images/f0346-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve added a navigation drawer to the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve now replaced the bottom navigation bar in `MainActivity`’s layout with
    a navigation drawer. It displays an image in its header, and includes all the
    items specified in the menu resource file *menu_main.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: Before we run the app, however, we need to link the navigation drawer to the
    navigation controller so that clicking on an item navigates to the correct fragment.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0346-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also need to configure the toolbar so that it includes a drawer icon that,
    when clicked, will open or close the navigation drawer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0346-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Both of these changes are made by tweaking the code in *MainActivity.kt*. Let’s
    find out how.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the toolbar’s drawer icon…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in the chapter, we configured the toolbar to display the current destination’s
    label and include an Up button. We did this by building an `AppBarConfiguration`
    object, and linking it to the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now want the toolbar to include a drawer icon, and we can add one by adding
    the navigation drawer to the `AppBarConfiguration`. Here’s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0347-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code adds the drawer layout to the `AppBarConfiguration` object. This
    allows the toolbar to interact with the drawer by including a drawer icon on every
    screen where there’s no Up button.
  prefs: []
  type: TYPE_NORMAL
- en: …and link the drawer to the navigation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we need to make the drawer navigate to the correct destination each
    time the user clicks on one of its items. Just like with the bottom navigation
    bar, we do this by setting the navigation drawer up with the navigation controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0347-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Each time the user clicks on an item in the navigation drawer, the navigation
    controller gets its ID from the menu resource file, and looks for a matching ID
    in the navigation graph. It then navigates to the destination with that ID.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the code we need to control the navigation drawer’s behavior. Let’s
    add it to *MainActivity.kt* and take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to update `MainActivity` to replace the bottom navigation code with
    the code for the navigation drawer. Update *MainActivity.kt* with the changes
    below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0348-02.png)![image](Images/f0349-01.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need for the navigation drawer. Let’s take it for a test
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0350-01.png)'
  prefs: []
  type: TYPE_IMG
- en: When we run the app, a drawer icon is displayed in the toolbar. Clicking on
    this icon opens the navigation drawer. When we click on one of the items in the
    drawer, the fragment for that option is displayed in `MainActivity` and the drawer
    closes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0350-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to create a fully operational navigation
    drawer.
  prefs: []
  type: TYPE_NORMAL
- en: Layout Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Somebody used fridge magnets to write the layout code for a navigation drawer,
    but some of them fell off overnight. Can you put the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: The activity uses a linear layout for its main content (we’ve left out most
    of the code for this). The drawer needs to display a header, defined in a layout
    file named *header.xml*. Its menu items are specified in the menu resource file
    *menu_drawer.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0351-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Layout Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Somebody used fridge magnets to write the layout code for a navigation drawer,
    but some of them fell off overnight. Can you put the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: The activity uses a linear layout for its main content (we’ve left out most
    of the code for this). The drawer needs to display a header, defined in a layout
    file named *header.xml*. Its menu items are specified in the menu resource file
    *menu_drawer.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0352-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 8](#navigation_uicolon_going_places) under your belt
    and now you’ve added navigation UI to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0353-01.png)'
  prefs: []
  type: TYPE_IMG
