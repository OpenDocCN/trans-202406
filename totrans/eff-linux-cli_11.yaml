- en: Chapter 9\. Leveraging Text Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plain text is the most common data format on many Linux systems. The content
    sent from command to command in most pipelines is text. Programmers’ source code
    files, system configuration files in */etc*, and HTML and Markdown files are all
    text files. Email messages are text; even attachments are stored as text internally
    for transport. You might even store everyday files like shopping lists and personal
    notes as text.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this with today’s internet, which is a mishmash of streaming audio
    and video, social media posts, in-browser documents in Google Docs and Office
    365, PDFs, and other rich media. (Not to mention the data handled by mobile apps,
    which have hidden the concept of a “file” from a whole generation.) Against this
    backdrop, plain-text files seem almost quaint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, any text file can become a rich source of data that you can mine
    with carefully crafted Linux commands, especially if the text is structured. Each
    line in the file */etc/passwd*, for example, represents a Linux user and has seven
    fields, including username, numeric user ID, home directory, and more. The fields
    are separated by colons, making the file easily parsed by `cut -d:` or `awk -F:`.
    Here’s a command that prints all usernames (the first field) alphabetically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s one that separates human users from system accounts by their numeric
    user IDs and sends users a welcome email. Let’s build this brash one-liner step-by-step.
    First, use `awk` to print the usernames (field 1) when the numeric user ID (field
    3) is 1000 or greater:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then produce greetings by piping to `xargs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then generate commands (strings) to pipe each greeting to the `mail` command,
    which sends email to a given user with a given subject line (`-s`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, pipe the generated commands to `bash` to send the emails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding solutions, like many others in this book, begin with an existing
    text file and manipulate its contents with commands. It’s time to reverse that
    approach and intentionally *design new text files* that partner well with Linux
    commands.^([1](ch09.xhtml#idm46586638536576)) This is a winning strategy to get
    work done efficiently on a Linux system. All it takes is four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Notice a business problem you want to solve that involves data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the data in a text file in a convenient format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invent Linux commands that process the file to solve the problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (*Optional*.) Capture those commands in scripts, aliases, or functions to be
    simpler to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, you’ll construct a variety of structured text files, and create
    commands to process them, to solve several business problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'A First Example: Finding Files'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose your home directory contains tens of thousands of files and subdirectories,
    and every so often, you can’t remember where you put one of them. The `find` command
    locates a file by name, such as *animals.txt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'but `find` is slow because it searches your entire home directory, and you
    need to locate files regularly. This is step 1, noticing a business problem that
    involves data: finding files in your home directory quickly by name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2 is storing the data in a text file in a convenient format. Run `find`
    once to build a list of all your files and directories, one file path per line,
    and store it in a hidden file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you have the data: a line-by-line index of your files. Step 3 is inventing
    Linux commands to speed up searches for files, and for that, use `grep`. It’s
    much quicker to `grep` through a large file than to run `find` in a large directory
    tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Step 4 is to make the command easier to run. Write a one-line script named `ff`,
    for “find files,” that runs `grep` with any user-supplied options and a search
    string, as in [Example 9-1](#ex_ff).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-1\. The `ff` script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the script executable and place it into any directory in your search path,
    such as your personal *bin* subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run `ff` anytime to locate files quickly when you can’t remember where you put
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Rerun the `find` command every so often to update the index. (Or better yet,
    create a scheduled job with `cron`; see [“Learn cron, crontab, and at”](ch11.xhtml#section_crontab).)
    Voilà—you’ve built a fast, flexible file-search utility out of two small commands.
    Linux systems provide other applications that index and search files quickly,
    such as the `locate` command and the search utilities in GNOME, KDE Plasma, and
    other desktop environments, but that’s beside the point. Look how easy it was
    to build it *yourself*. And the key to success was to create a text file in a
    simple format.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Domain Expiration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the next example, suppose you own some internet domain names and want to
    keep track of when they expire so you can renew them. That’s step 1, identify
    the business problem. Step 2 is to create a file of those domain names, such as
    *domains.txt*, one domain name per line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 3 is to invent commands that leverage this text file to determine expiration
    dates. Start with the `whois` command, which queries a domain registrar for information
    about a domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The expiration date is preceded by the string “Registry Expiry Date”, which
    you can isolate with `grep` and `awk`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the date more readable via the `date --date` command, which can convert
    a date string from one format to another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Use command substitution to feed the date string from `whois` to the `date`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You now have a command that queries a registrar and prints an expiration date.
    Create a script `check-expiry`, shown in [Example 9-2](#ex_check_expiry), that
    runs the preceding command and prints the expiration date, a tab, and the domain
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Example 9-2\. The `check-expiry` script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, check all domains in the file *domains.txt* using a loop. Create a new
    script, `check-expiry-all`, shown in [Example 9-3](#ex_check_expiry_all).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-3\. The `check-expiry-all` script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script in the background, since it may take a while if you have many
    domains, and redirect all output (stdout and stderr) to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When the script finishes, the file *expiry.txt* contains the desired information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Hooray! But don’t stop there. The file *expiry.txt* is itself nicely structured
    for further processing, with two tabbed columns. For example, sort the dates and
    find the next domain to renew:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, use `awk` to find domains that have expired or are expiring today—that
    is, their expiration date (field 1) is less than or equal to today’s date (printed
    with `date +%Y-%m-%d`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A few notes on the preceding `awk` command:'
  prefs: []
  type: TYPE_NORMAL
- en: I escaped the dollar sign (before `$1`) and the double quotes around the date
    string so the shell doesn’t evaluate them before `awk` can.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ve cheated a bit by using the string operator `<=` to compare dates. It’s
    not a mathematical comparison, just a string comparison, but it works because
    the date format, *`YYYY-MM-DD`*, sorts alphabetically and chronologically in the
    same order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With more effort, you could do date math in `awk` to report expiration dates,
    say, two weeks in advance, then create a scheduled job to run the script nightly
    and email you a report. Feel free to experiment. The point here, however, is that
    once again, with a handful of commands, you’ve built a useful utility that’s driven
    by a text file.
  prefs: []
  type: TYPE_NORMAL
- en: Building an Area Code Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next example uses a file with three fields that you can process in many
    ways. The file, named *areacodes.txt*, contains telephone area codes for the United
    States. Retrieve one from this book’s [supplemental material](https://efficientlinux.com/examples)
    in the directory *chapter09/build_area_code_database*, or create your own file,
    say, from [Wikipedia](https://oreil.ly/yz2M1):^([2](ch09.xhtml#idm46586638304304))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Arrange the fields with predictable lengths first, so columns appear neatly
    lined up to the eye. Look how messy the file appears if you put the city names
    in the first column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this file is in place, you can do a lot with it. Look up area codes by
    state with `grep`, adding the `-w` option to match full words only (in case other
    text coincidentally contains “NJ”):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'or look up cities by area code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'or by any string in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Count the area codes with `wc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the state with the most area codes (the winner is California with 38):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert the file to CSV format to import into a spreadsheet application. Print
    the third field enclosed in double quotes to prevent its commas from being interpreted
    as CSV separator characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Collate all area codes for a given state onto a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'or collate for each state, using arrays and `for` loops as in [“Improving the
    duplicate file detector”](ch05.xhtml#sec_awk_arrays):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Turn any of the preceding commands into aliases, functions, or scripts, whatever
    is convenient. A simple example is the `areacode` script in [Example 9-4](#ex_areacodes).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-4\. The `areacode` script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `areacode` script searches for any whole word in the *areacodes.txt* file,
    such as an area code, state abbreviation, or city name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Building a Password Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a final, in-depth example, let’s store usernames, passwords, and notes in
    an encrypted text file, in a structured format for easy retrieval on the command
    line. The resulting command is a basic password manager, an application that eases
    the burden of memorizing lots of complicated passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Password management is a complex topic in computer security. This example creates
    an extremely basic password manager as an educational exercise. Don’t use it for
    mission-critical applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The password file, named *vault*, has three fields separated by single tab
    characters:'
  prefs: []
  type: TYPE_NORMAL
- en: Username
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes (any text)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the *vault* file and add the data. The file is not encrypted yet, so
    insert only fake passwords for now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Store the vault in a known location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The idea is to use a pattern-matching program like `grep` or `awk` to print
    lines that match a given string. This simple but powerful technique can match
    any part of any line, rather than just usernames or websites. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Capture this simple functionality in a script; then, let’s improve it step-by-step,
    including finally encrypting the *vault* file. Call the script `pman` for “password
    manager” and create the trivial version in [Example 9-5](#ex_pman_1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 9-5\. `pman` version 1: as simple as it gets'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Store the script in your search path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Try the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The next version in [Example 9-6](#ex_pman_2) adds a bit of error checking and
    some memorable variable names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 9-6\. `pman` version 2: add some error checking'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'A shortcoming of this technique is that it won’t scale. If *vault* contained
    hundreds of lines and `grep` matched and printed 63 of them, you’d have to hunt
    by eye to find the password you need. Improve the script by adding a unique key
    (a string) to each line in the third column, and update `pman` to search for that
    unique key first. The *vault* file, with third column bolded, now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 9-7](#ex_pman_3) shows the updated script that uses `awk` instead
    of `grep`. It also uses command substitution to capture the output and check if
    it’s empty (the test `-z` means “zero length string”). Notice that if you search
    for a key that doesn’t exist in *vault*, `pman` falls back to its original behavior
    and prints all lines that match the search string.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 9-7\. `pman` version 3: prioritize searching for the key in the third
    column'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The plain-text file *vault* is a security risk, so encrypt it with the standard
    Linux encryption program GnuPG, which is invoked as `gpg`. If you already have
    GnuPG set up for use, that’s great. Otherwise, set it up with the following command,
    supplying your email address:^([3](ch09.xhtml#idm46586637958336))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You’re prompted for a passphrase for the key (twice). Provide a strong passphrase.
    When `gpg` completes, you’re ready to encrypt the password file using public key
    encryption, producing the file *vault.gpg*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As a test, decrypt the *vault.gpg* file to stdout:^([4](ch09.xhtml#idm46586637859744))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Next, update your script to use the encrypted *vault.gpg* file instead of the
    plain-text *vault* file. That means decrypting *vault.gpg* to stdout and piping
    its contents to `awk` for matching, as in [Example 9-8](#ex_pman_4).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 9-8\. `pman` version 4: using an encrypted vault'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The script now displays passwords from the encrypted file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'All the pieces are in place now for your password manager. Some final steps
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re convinced that you can decrypt the *vault.gpg* file reliably, delete
    the original *vault* file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you wish, replace the fake passwords with real ones. See [“Editing Encrypted
    Files Directly”](#sidebar_gpg_edit) for advice on editing an encrypted text file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support comments in the password vault—lines that begin with a pound sign (`#`)—so
    you can make notes about the entries. To do so, update the script to pipe the
    decrypted contents to `grep -v` to filter any lines that begin with a pound sign:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Printing passwords on stdout isn’t great for security. [“Improving the Password
    Manager”](ch10.xhtml#sec_pman2) will update this script to copy and paste passwords
    instead of printing them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'File paths, domain names, area codes, and login credentials are just a few
    examples of data that work well in a structured text file. How about:'
  prefs: []
  type: TYPE_NORMAL
- en: Your music files? (Use a Linux command like `id3tool` to extract ID3 information
    from your MP3 files and place it into a file.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contacts on your mobile device? (Use an app to export the contacts to CSV
    format, upload them to cloud storage, and then download them to your Linux machine
    for processing.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your grades in school? (Use `awk` to track your grade point average.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of movies you’ve seen or books you’ve read, with additional data (ratings,
    authors, actors, etc.)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this manner, you can build an ecosystem of time-saving commands that are
    personally meaningful or productive for work, limited only by your imagination.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch09.xhtml#idm46586638536576-marker)) This approach is similar to designing
    a database schema to work well with known queries.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch09.xhtml#idm46586638304304-marker)) The [official list of area codes
    in CSV format](https://oreil.ly/SptWL), maintained by the North American Numbering
    Plan Administrator, lacks city names.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch09.xhtml#idm46586637958336-marker)) This command generates a public/private
    key pair with all default options and an expiration date of “never.” To learn
    more, see `man gpg` to read about `gpg` options, or seek out a GnuPG tutorial
    online.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch09.xhtml#idm46586637859744-marker)) If `gpg` proceeds without prompting
    for your passphrase, it has cached (saved) your passphrase temporarily.
  prefs: []
  type: TYPE_NORMAL
