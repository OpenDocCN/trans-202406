- en: Chapter 11\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’ve made it this far, thank you for joining me on this journey through
    the React ecosystem. I hope you’ve enjoyed this adventure as much as I have. In
    our time together, we pursued a deeper understanding of React, exploring its core
    principles, inner workings, and broader ecosystem. Assuming we already know how
    to *use* React, we focused on understanding its mechanism: how it actually works—with
    the end goal being practical takeaways we can use in our engineering careers going
    forward.'
  prefs: []
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s outline some of those takeaways now:'
  prefs: []
  type: TYPE_NORMAL
- en: Rethink best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, we need to rethink everything. React’s introduction of JSX and the
    virtual DOM was a radical departure from the status quo. It challenged the established
    conventions and forced us to rethink how we build interfaces. This willingness
    to challenge the status quo and reimagine the way things are done is a hallmark
    of React’s philosophy, and thus as engineers, we should always be willing to challenge
    the status quo and rethink the way things are done.
  prefs: []
  type: TYPE_NORMAL
- en: Fully understand how JSX works.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we’re limited by a programming language—as in, if we can’t have HTML-style
    syntax in JavaScript—we as engineers have the power to change that by creating
    a new language. This is what JSX is: a new language that compiles down to JavaScript.
    We can do this too now that we fully understand how JSX works and some compiler
    theory.'
  prefs: []
  type: TYPE_NORMAL
- en: Constraints are not a bad thing.
  prefs: []
  type: TYPE_NORMAL
- en: Constraints are the mother of invention. React is fundamentally an innovation
    born out of the constraints of the web, where reading `innerWidth` of an element
    causes a reflow, and where different browsers have different APIs for events.
    The takeaway here is that constraints are not a bad thing. They force us to think
    outside the box and come up with creative solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Declarative abstractions unlock powerful capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: By decoupling the expression of JSX from the reconciler, React pioneered a “write
    once, run anywhere” approach to UI development, allowing us to use the same code
    to render to the DOM, the server, or even a native platform. This is a powerful
    capability that we can leverage in our own projects as we consider separating
    concerns and landing on the right level of abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: Unlocking powerful capabilities allows us to build more flexible and maintainable
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: We uncovered a number of patterns, from higher-order components to render props
    to hooks to context. These patterns are powerful tools that we can use to abstract
    logic, share behavior across components, and manage state more effectively. While
    these patterns introduce complexity, they also unlock powerful capabilities, allowing
    us to build more flexible and maintainable applications. Moreover, like HOCs,
    these patterns predate React. What patterns are we using today that will be the
    foundation of the next generation of UI frameworks? What patterns can we invent
    that will make our lives easier?
  prefs: []
  type: TYPE_NORMAL
- en: Powerful capabilities can be leveraged in our own projects.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that when we go beyond the browser, through to the server, a slew
    of new possibilities open up. We can render our React components on the server,
    use the browser’s native fetch API to load data, and we can use native HTML forms
    for user inputs. These are powerful capabilities that we can leverage in our own
    projects as we consider the trade-offs of server-side rendering and the benefits
    of leveraging the web’s fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of improving user experience.
  prefs: []
  type: TYPE_NORMAL
- en: We now are empowered to take full advantage of React’s concurrent features,
    such as `useTransition`, to improve user experience by deferring work to be done
    “in an alternate universe” and then committing the changes to the DOM when they’re
    ready. This is a powerful capability that we can leverage in our own projects
    as we consider the trade-offs of deferring work and the benefits of improving
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: All this is done in a language that we know and understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We explored the intricacies between Next.js and Remix through the lens of creating
    our own framework, ultimately recognizing that all of this is just JavaScript
    with some servers and things: we can build our own framework, too, given enough
    time and resources. While we’re thankful for the work of the authors, we can also
    be empowered that all of this is done in a language that we know and understand.'
  prefs: []
  type: TYPE_NORMAL
- en: Ship drastically less code to our users.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to going beyond the browser to the server, we learned that going beyond
    the browser to the bundler unlocks an entire new world of possibilities, leveraging
    the bundler to split client components from server components and ship drastically
    less code to our users. What other cool compiler/bundler tricks can we use to
    improve our users’ experience?
  prefs: []
  type: TYPE_NORMAL
- en: We can take inspiration from these other frameworks and apply them to our own
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'We zoomed out and looked at how even outside React, everyone’s sort of solving
    the same problem: how do we build user interfaces well, that are fast, responsive,
    reactive, and also come with great developer experience? We explored some ideas
    from Vue, Solid, Qwik, and more, and we learned that we can take inspiration from
    these other frameworks and apply them to our own projects.'
  prefs: []
  type: TYPE_NORMAL
- en: As we draw the curtains on our exploration of React.js, it’s essential to reflect
    on the journey we’ve taken and understand the transformative nature of this library.
    React’s growth over the years stands as a testament to its adaptability, resilience,
    and the innovative spirit of its community. From introducing a more intuitive
    way of building interfaces with JSX, to reimagining how updates can be more efficient
    with the virtual DOM, React has undoubtedly left an indelible mark on the landscape
    of web development.
  prefs: []
  type: TYPE_NORMAL
- en: Our Timeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The initial chapters of this book presented a gentle introduction to the core
    principles of React. At its heart, React’s philosophy is about building components
    that make updates to web experiences more approachable, scalable, and maintainable.
    These self-contained units of work—components, fibers, elements—encapsulate both
    the logic and the UI, making it easier to reason about our applications as they
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: With JSX, React offers a declarative approach to UI development. By making our
    interfaces a function of our application’s state, we can easily understand and
    predict how changes in our data will affect our UI. The clear separation and the
    single source of truth concept have undoubtedly changed how developers approach
    UI construction.
  prefs: []
  type: TYPE_NORMAL
- en: As React gained traction, its influence inevitably rippled through the tech
    industry, inspiring many platforms and frameworks. One of the most noteworthy
    influenced platforms is Apple’s SwiftUI, a framework for building user interfaces
    across all Apple devices.
  prefs: []
  type: TYPE_NORMAL
- en: Influenced by React and others, SwiftUI adopted a similar philosophy. Instead
    of the classic MVC (Model-View-Controller) design pattern often seen in iOS development,
    SwiftUI encourages developers to build UIs using smaller, component-like structures
    called views. Each view in SwiftUI is a self-contained unit, much like React components.
  prefs: []
  type: TYPE_NORMAL
- en: As UI frameworks continue to evolve, the cross-pollination of ideas will persist.
    Innovations from one platform can inspire improvements in another, leading to
    a richer, more cohesive development landscape. React’s influence on SwiftUI and
    the broader ecosystem is a prime example of this symbiotic relationship, and it
    sets the stage for future collaborations and inspirations in the tech world.
  prefs: []
  type: TYPE_NORMAL
- en: The Mechanics Behind the Magic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The virtual DOM and the Fiber reconciler were some of the more technical topics
    we delved into. These concepts are the gears and pulleys behind React’s efficient
    and performant updates. The virtual DOM acts as a mediator between our application’s
    state and the actual DOM. By comparing differences and batching updates, React
    ensures that the least amount of work is done to keep the UI in sync with the
    state.
  prefs: []
  type: TYPE_NORMAL
- en: The reconciler, on the other hand, is the brain behind this operation. It decides
    when and how to update components, optimizing for performance and ensuring consistency.
    We explored the inner workings of the reconciler, learning about the different
    phases and the work that goes into each one. We also looked at how the reconciler
    prioritizes work, ensuring that the most important updates are processed first.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Adventures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Venturing into the advanced terrains, we looked at advanced patterns in React.
    These patterns, such as higher-order components, render props, hooks, and context,
    allow developers to abstract logic, share behavior across components, and manage
    state more effectively. While these patterns introduce complexity, they also unlock
    powerful capabilities, allowing us to build more flexible and maintainable applications.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side React and concurrent React took us on a journey through the evolution
    of React applications. With the increasing need for fast initial loads and interactive
    experiences, leveraging the server and async operations has become vital. These
    techniques ensure our applications remain snappy, responsive, and user-centric.
  prefs: []
  type: TYPE_NORMAL
- en: We explored the server side of `react-dom`, including functions like `renderToString`
    and `renderToPipeableStream`, outlining the trade-offs of each. We also explored
    some of React’s asynchronous capabilities, such as `useSyncExternalStore` and
    `useTransition`, and how they can be used to improve the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we dipped our toes into React Server Components, a more recent addition
    to the React ecosystem that represents the library’s continued evolution. By enabling
    components to be rendered on the server only, we can create more efficient applications,
    optimizing for both performance and user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In our final chapters, we explored the broader ecosystem surrounding React with
    the frameworks and the alternative libraries. React’s success has spawned a plethora
    of tools, frameworks, and alternatives, each bringing its own set of advantages
    and trade-offs.
  prefs: []
  type: TYPE_NORMAL
- en: React has come a long way since its inception, and its journey is a reflection
    of the ever-evolving world of web development. As you’ve journeyed through this
    book, you’ve not only learned about a library but have also gained insight into
    the paradigms and principles that drive modern web development.
  prefs: []
  type: TYPE_NORMAL
- en: Staying Up-to-Date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping up with the constantly evolving JavaScript ecosystem, including the
    many frameworks built around React, can feel like a daunting task. Every year,
    a number of new tools and libraries are introduced, each with its own set of features,
    benefits, and trade-offs. As a developer, making an informed decision about the
    right framework to use for a future project involves more than just a familiarity
    with the current state of the ecosystem. It also requires a forward-looking understanding
    of the trajectory of these tools and how they fit within the broader context of
    web development.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several strategies for staying up-to-date and continuously making
    informed decisions about choosing the right React framework for your future projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow trusted sources.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript ecosystem evolves at a rapid pace. It’s essential to follow trustworthy
    sources that provide quality content and regular updates about the latest trends
    and tools. This could be blogs, YouTube channels, newsletters, podcasts, or online
    communities. For example, following the official blogs and Twitter accounts of
    Next.js and Remix could provide insights into their upcoming features, improvements,
    and overall roadmap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some sources we recommend are:'
  prefs: []
  type: TYPE_NORMAL
- en: The React docs at [react.dev](https://react.dev)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React core members on 𝕏, formerly Twitter, including but not limited to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@sophiebits*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@sebmarkbage*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@zmofei*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@acdlite*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@rickhanlonii*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@dan_abramov2*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React community creators on 𝕏, including but not limited to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@kadikraman*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@kentcdodds*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@shaundai*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@Saurav_Varma*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*@rachelnabors*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Join relevant communities.
  prefs: []
  type: TYPE_NORMAL
- en: Online communities such as Reddit, Stack Overflow, GitHub, or various Discord
    and Slack groups are excellent places to keep an eye on emerging trends and tools.
    Community members often share their experiences with different frameworks, which
    can provide a useful perspective when deciding between different tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful community resources are:'
  prefs: []
  type: TYPE_NORMAL
- en: The React subreddit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Reactiflux Discord server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bytes.dev newsletter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The React Roundup podcast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “This Week in React” newsletter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attend conferences and meetups.
  prefs: []
  type: TYPE_NORMAL
- en: Conferences and meetups are great for staying updated on the latest developments
    and best practices in the JavaScript and React ecosystem. Even if you can’t attend
    in person, many of these events offer online streaming or record their talks for
    later viewing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some wonderful React conferences to attend are:'
  prefs: []
  type: TYPE_NORMAL
- en: React Brussels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Alicante
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React India
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Day Verona
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experiment with different frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Nothing beats hands-on experience when it comes to understanding a tool. Allocating
    some time to build small projects or prototypes with different frameworks can
    provide invaluable insights. This can help you understand the strengths and weaknesses
    of each framework and how they fit with your development style and project requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Build in public.
  prefs: []
  type: TYPE_NORMAL
- en: Popularized by Shawn Wang (*@swyx*), probably the best way to stay up-to-date
    is to build in public. This means sharing your work, thoughts, and ideas with
    the community. This can be as simple as posting on social media about your work,
    or as involved as writing a blog post or creating a YouTube video. By sharing
    your work, you can get feedback from the community, which can help you improve
    your skills and gain a deeper understanding of the tools you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a book has been a great way for me to learn React. I’ve learned so much
    from the community, and I’ve been able to share my knowledge with others. I highly
    recommend it!
  prefs: []
  type: TYPE_NORMAL
- en: As we conclude, remember that learning React isn’t just about mastering a library;
    it’s about embracing a mindset. A mindset of component-driven development, performance
    optimization, and continuously adapting to the ever-changing demands of the web.
  prefs: []
  type: TYPE_NORMAL
- en: The future of web development is bright, and React, along with its community,
    will undoubtedly play a significant role in shaping it. Whether you’re a seasoned
    developer or someone just starting out, the skills and knowledge you’ve acquired
    from this book will serve you well as you continue your journey in the vast and
    exciting realm of web development.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s to building more intuitive, performant, and user-centric applications
    with React. Cheers to the future, and thank you for being a part of this adventure!
  prefs: []
  type: TYPE_NORMAL
