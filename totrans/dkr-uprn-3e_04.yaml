- en: Chapter 3\. Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re now at the point where you hopefully understand roughly what Docker is
    and what it isn’t, and it’s time for some hands-on work. Let’s get Docker installed
    so we can work with it. The steps required to install Docker vary depending on
    the platform you use for development and the Linux distribution you use to host
    your applications in production.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we discuss the steps required to get a fully working Docker
    development environment set up on most modern desktop operating systems. First,
    we’ll install the Docker client on your native development platform, and then
    we’ll get a Docker server running on Linux. Finally, we’ll test out the installation
    to make sure it works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Docker client can run on Windows and macOS to control a Docker
    server, Linux containers can only be built and launched on a Linux system. Therefore,
    non-Linux systems will require a virtual machine or remote server to host the
    Linux-based Docker server. Docker Community Edition, Docker Desktop, and Vagrant,
    which are all discussed later in this chapter, provide some approaches to address
    this issue. It is also possible to run Windows containers natively on Windows
    systems, and we will specifically discuss this in [“Windows Containers”](ch05.html#windows_containers),
    but most of the book’s focus will be on Linux containers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Docker ecosystem is changing very rapidly as the technology evolves to become
    more robust and solve a broader range of problems. Some features discussed in
    this book and elsewhere may become deprecated. To see what has been tagged for
    deprecation and eventual removal, refer to the [documentation](https://docs.docker.com/engine/deprecated).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We assume that you are using a traditional Unix shell in most of the code examples
    in the book. You can use PowerShell, but be aware that some commands will need
    adjusting to work in that environment.
  prefs: []
  type: TYPE_NORMAL
- en: If you are in an environment that requires you to use a proxy, make sure that
    it is [properly configured for Docker](https://docs.docker.com/network/proxy).
  prefs: []
  type: TYPE_NORMAL
- en: Docker Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker client natively supports 64-bit versions of Linux, Windows, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of popular Linux distributions can trace their origins to either
    Debian or Red Hat. Debian systems utilize the deb package format and [Advanced
    Package Tool (`apt`)](https://wiki.debian.org/AptCLI) to install most prepackaged
    software. On the other hand, Red Hat systems rely on RPM Package Manager (`rpm`)
    files and [Yellowdog Updater, Modified (`yum`)](https://en.wikipedia.org/wiki/Yum_(software)),
    or [Dandified `yum` (`dnf`)](https://goo.gl/TdkGRS) to install similar software
    packages. Alpine Linux, which is often used in environments that require a very
    small Linux footprint, relies on the [Alpine Package Keeper (`apk`)](https://wiki.alpinelinux.org/wiki/Package_management)
    to manage software packages.
  prefs: []
  type: TYPE_NORMAL
- en: On macOS and Microsoft Windows, native GUI installers provide the easiest method
    to install and maintain prepackaged software. [Homebrew for macOS](https://brew.sh)
    and [Chocolatey for Windows](https://chocolatey.org) are also very popular options
    among technical users.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We will be discussing a few approaches to installing Docker in this section.
    Make sure that you pick the first one in this list that best matches your needs.
    Installing more than one may cause problems if you are not well versed in how
    to switch between them properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose one of these: Docker Desktop, Docker Community Edition, OS package manager,
    or Vagrant.'
  prefs: []
  type: TYPE_NORMAL
- en: You can always find the most recent [installation documentation](https://docs.docker.com/get-docker)
    on the Docker website.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is strongly recommended that you run Docker on a modern release of your preferred
    Linux distribution. It is possible to run Docker on some older releases, but stability
    may be a significant issue. Generally, a 3.8 or later kernel is required, and
    we advise you to use the newest stable version of your chosen distribution. The
    following directions assume you are using a recent stable release of the Ubuntu
    or Fedora Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Although we are not covering it here, [Docker Desktop for Linux](https://docs.docker.com/desktop/linux/install)
    has been released and can be used on Linux if you would prefer running the Docker
    daemon on a local virtual machine instead of directly on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu Linux 22.04 (64-bit)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s take a look at the steps required to install Docker on the 64-bit version
    of Ubuntu Linux 22.04.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For up-to-date instructions or coverage of other versions of Ubuntu, see the
    [Docker Community Edition for Ubuntu](https://dockr.ly/2NwNbuw).
  prefs: []
  type: TYPE_NORMAL
- en: 'These first two commands will ensure that you aren’t running older versions
    of Docker. The packages have been renamed a few times, so you’ll need to specify
    several possibilities here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is safe to ignore `apt-get` errors that say “Unable to locate package” or
    “Package is not installed.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will need to add the required software dependencies and *apt* repository
    for Docker Community Edition. This lets us fetch and install packages for Docker
    and validate that they are signed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have the repository set up, run the following commands to install
    Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Assuming you don’t get any error messages, you now have Docker installed!
  prefs: []
  type: TYPE_NORMAL
- en: Fedora Linux 36 (64-bit)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s take a look at the steps needed to install Docker on the 64-bit version
    of Fedora Linux 36.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For up-to-date instructions or coverage of other versions of Fedora, see the
    [Docker Community Edition for Fedora](https://dockr.ly/2NwNdTa).
  prefs: []
  type: TYPE_NORMAL
- en: 'This first command will ensure that you aren’t running older versions of Docker.
    As on Ubuntu systems, the package has been renamed a few times, so you’ll need
    to specify several possibilities here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to add the required software dependencies and *dnf* repository
    for Docker Community Edition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can install the current version of Docker Community Edition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: macOS, Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install Docker on macOS, you should use the official Docker Desktop installer.
  prefs: []
  type: TYPE_NORMAL
- en: GUI installer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download the [latest Docker Desktop for Mac installer](https://dockr.ly/2wyTpCO),
    and then double-click on the downloaded program icon. Follow all of the installer’s
    prompts until the installation is finished. Docker Desktop for macOS relies on
    the [xhyve](https://github.com/machyve/xhyve) project and Apple’s [Hypervisor
    framework](https://developer.apple.com/documentation/hypervisor) to provide a
    native lightweight virtualization layer for the Linux server component, which
    is required to launch Linux virtual machines that can build Docker images and
    run containers.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also install the Docker CLI tools using the popular [Homebrew](https://docs.brew.sh/Installation)
    package management system for macOS. If you take this approach, you should consider
    installing Vagrant for creating and managing your Linux VM. We’ll discuss that
    shortly in [“Non-Linux VM-Based Server”](#vm_server).
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows 11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are the steps required to install Docker Desktop on Windows 11.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is highly recommended that you set up the [Windows Subsystem for Linux (WSL2)](https://docs.microsoft.com/en-us/windows/wsl/install)
    *before* installing Docker Desktop, and then select any available options in the
    Docker Desktop installer to enable and default to WSL2.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Desktop for Windows can leverage [Hyper-V](https://oreil.ly/vt6-o)^([1](ch03.html#idm46803156871040))
    to provide a native virtualization layer for the Linux server components, but
    [WSL2](https://docs.microsoft.com/en-us/windows/wsl/install) should provide you
    with the smoothest experience when working with Linux containers.
  prefs: []
  type: TYPE_NORMAL
- en: Download the [latest Docker Desktop for Windows installer](https://dockr.ly/2C0n7H0),
    and then double-click on the downloaded program icon. Follow all of the installer
    prompts until the installation is finished.
  prefs: []
  type: TYPE_NORMAL
- en: Chocolatey installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also install the Docker CLI tools using the popular [Chocolatey](https://docs.chocolatey.org/en-us/choco/setup)
    package management system for Windows. If you take this approach, you should consider
    installing Vagrant for creating and managing your Linux VM. We’ll discuss that
    shortly in [“Non-Linux VM-Based Server”](#vm_server).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The [Docker website](https://docs.docker.com/engine/install) has installation
    directions for additional environments online.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker server is a separate binary from the client and is used to manage
    most of the work for which Docker is typically used. Next we will explore the
    most common ways to manage the Docker server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Docker Desktop and Docker Community Edition already set up the server for you,
    so if you took that route, you do not need to do anything else besides ensuring
    that the server (`dockerd`) is running. On Windows and macOS, this typically just
    means starting the Docker application. On Linux, you may need to run the following
    `systemctl` commands to start the server.
  prefs: []
  type: TYPE_NORMAL
- en: systemd-Based Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Current Fedora and Ubuntu releases use [`systemd`](https://www.freedesktop.org/wiki/Software/systemd)
    to manage processes on the system. Because you have already installed Docker,
    you can ensure that the server starts every time you boot the system by typing
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells `systemd` to enable the `docker` service and start it when the system
    boots or switches into the default run level. To start the Docker server, type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Non-Linux VM-Based Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using Microsoft Windows or macOS in your Docker workflow, you will
    need a VM so that you can set up a Docker server for testing. Docker Desktop is
    convenient because it sets up this VM for you using the native virtualization
    technology on these platforms. If you are running an older version of Windows
    or cannot use Docker Desktop for other reasons, you should investigate [Vagrant](https://www.vagrantup.com)
    to help you create and manage your Docker server Linux VM.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using Vagrant, you can also use other virtualization tools, like
    [Lima on macOS](https://github.com/lima-vm/lima) or any standard hypervisor, to
    set up a local Docker server, depending on your preferences and needs.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vagrant provides support for multiple hypervisors and can often be leveraged
    to mimic even the most complex environments.
  prefs: []
  type: TYPE_NORMAL
- en: A common use case for leveraging Vagrant during Docker development is to support
    testing on images that match your production environment. Vagrant supports everything
    from broad distributions like [Red Hat Enterprise Linux](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux)
    and [Ubuntu](https://ubuntu.com) to finely focused atomic host distributions like
    [Fedora CoreOS](https://getfedora.org/en/coreos).
  prefs: []
  type: TYPE_NORMAL
- en: You can easily install Vagrant on most platforms by [downloading a self-contained
    package](https://www.vagrantup.com/downloads.html).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This Vagrant example is not secure and is not intended to be a recommendation.
    Instead, it is simply a demonstration of the basic requirements needed to set
    up a *remote* Docker server VM and make use of it. Securing the server is of critical
    importance.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker Desktop for development is often a better option, when possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to have a hypervisor, like one of the following, fully installed
    on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[VirtualBox](https://www.virtualbox.org/wiki/Downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freely available
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports multiplatforms on most architectures
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VMware Workstation Pro/Fusion](https://oreil.ly/4uNsR)^([2](ch03.html#idm46803156697792))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commercial software
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports multiplatforms on most architectures
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HyperV](https://oreil.ly/agPTI)^([3](ch03.html#idm46803156692368))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commercial software
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Windows on most architectures
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KVM](https://www.linux-kvm.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freely available
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Linux on most architectures
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, Vagrant assumes that you are using the VirtualBox hypervisor, but
    you can change it by using the [`--provider` flag](https://learn.hashicorp.com/tutorials/vagrant/getting-started-providers)
    when using the `vagrant` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, you will create a Ubuntu-based Docker host running
    the Docker daemon. Then you will create a host directory with a name similar to
    *docker-host* and move into that directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In order to use Vagrant, you need to [find a Vagrant Box (VM image)](https://app.vagrantup.com/boxes/search)
    that is compatible with your provisioner and architecture. In this example, we
    will use a Vagrant Box for the Virtual Box hypervisor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Virtual Box only works on Intel/AMD x86(64) systems, and the Vagrant Box we
    are using is specifically built for AMD64 systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and create a new file called *Vagrantfile* with the following contents
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can retrieve a complete copy of this file by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may need to remove the “\” in the `git clone` command and reassemble the
    URL into a single line. It is there because the command is too long for the standard
    printed page, and this should work in a standard Unix shell as long as there are
    no leading or trailing spaces in either line.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you are in the directory with the *Vagrantfile*, and then run the
    following command to start the Vagrant VM.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This setup is provided as a simple example. It is not secure and should not
    be left running without ensuring that the server cannot be accessed from the broader
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Docker maintains [documentation on how to secure your Docker endpoint with SSH
    or TLS client certificates](https://docs.docker.com/engine/security/protect-access)
    and provides some additional information about the [attack surface of the Docker
    daemon](https://docs.docker.com/engine/security/#docker-daemon-attack-surface).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On macOS, you may see an error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component
    MachineWrap, interface IMachine`'
  prefs: []
  type: TYPE_NORMAL
- en: This is due to the security features in macOS. A quick search should lead you
    to an [online post that describes the fix](https://scriptcrunch.com/solved-vboxmanage-error-component-machinewrap).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the VM is running, you should be able to connect to the Docker server
    by running the following command and telling the Docker client where it should
    connect to with the `-H` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The output will provide you with version information about the various components
    that make up the Docker client and server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing in the IP address and port every time you want to run a Docker command
    is not ideal, but luckily Docker can be set up to know about multiple Docker servers
    by using the `docker context` command. To start, let’s check and see what context
    is currently in use. Take note of the entry that has an asterisk (*) next to it,
    which designates the current context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create a new context for the Vagrant VM and then make it active by
    running the following sequence of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you re-list all the contexts now, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With your current context set to `vagrant`, running `docker version` without
    the additional `-H` argument will still connect to the correct Docker server and
    return the same information as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to a shell on the Vagrant-based VM, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Until you have time to secure this setup, it is best to go ahead and shut down
    the VM and set your context back to its original state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are using macOS, you might want to take a look at [Colima](https://github.com/abiosoft/colima),
    which makes it very easy to spin up and manage a flexible Docker or Kubernetes
    VM.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have a working client and server set up, you are ready to test that
    everything is working. You should be able to run any one of the following commands
    on your local system to tell the Docker daemon to download the latest official
    container for that distribution and then launch it with a running Unix shell process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This step is important to ensure that all the pieces are properly installed
    and communicating with one another as expected. It shows off one of the features
    of Docker: we can run containers based on any Linux distribution we like. In the
    next few steps, we’ll run Linux containers based on Ubuntu, Fedora, and Alpine
    Linux. You don’t need to run them all to prove that this works; running one of
    them will suffice.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are using the Docker client on a Linux system, you may need to prepend
    each `docker` command with `sudo` since the *root* user may be the only one with
    Docker access, by default.
  prefs: []
  type: TYPE_NORMAL
- en: Most Docker installs create a `docker` group that can be used to manage who
    has access to the `dockerd` Unix socket. You can add your user to that group so
    that you no longer need to use the [`sudo` command](https://man7.org/linux/man-pages/man8/sudo.8.html).
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s try launching a container using the latest Ubuntu Linux base image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using `docker container run` is functionally the same as using `docker run`.
  prefs: []
  type: TYPE_NORMAL
- en: Fedora
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we launch a container using the latest Fedora Linux base image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Alpine Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And then finally, we can test launching a container using the latest Alpine
    Linux base image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`docker.io/ubuntu:latest`, `docker.io/fedora:latest`, and `docker.io/alpine:latest`
    all represent a Docker image repository, followed by an image name and an image
    tag.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Docker Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the Docker server is often installed, enabled, and run automatically,
    it’s useful to see that [running the Docker daemon manually on a Linux system](https://docs.docker.com/engine/reference/commandline/dockerd)
    can be as simple as typing something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section assumes that you are on the actual Linux server or VM that is running
    the Docker daemon. If you are using Docker Desktop on Windows or Mac, you won’t
    be able to easily interact with the `dockerd` executable, as it is intentionally
    hidden from the end user, but we’ll show you a trick in just a moment.
  prefs: []
  type: TYPE_NORMAL
- en: This command starts the Docker daemon, creates and listens to a Unix domain
    socket (`-H unix:///var/run/docker.sock`), and reads in the rest of the configuration
    from */etc/docker/daemon.json*. You’re not likely to have to start the Docker
    server yourself, but that’s what’s going on behind the scenes. On non-Linux systems,
    you will typically have a Linux-based VM that hosts the Docker server. Docker
    Desktop sets up this VM for you in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you already have Docker running, executing the daemon again will fail because
    it can’t use the same network port twice.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, it is very easy to SSH into your new Docker server and take a
    look around, but the seamless experience of Docker Desktop on a non-Linux system
    means it is often not apparent that Docker Desktop is leveraging a local VM on
    which to run the Docker daemon. Because the Docker Desktop VM is designed to be
    very small and very stable, it does not run an SSH daemon and is, therefore, a
    bit tricky to access.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are curious or just ever have a need to access the underlying VM, you
    can do it, but it requires a little advanced knowledge. We will talk about the
    command `nsenter` in much more detail in [“nsenter”](ch11.html#nsenter), but for
    now, if you would like to see the VM (or underlying host), you can run these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This command uses a privileged Debian container that contains the `nsenter`
    command to manipulate the Linux kernel namespaces so that we can navigate the
    filesystem of the underlying VM or host.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This container is privileged to allow us to navigate the underlying host, but
    you should not get into the habit of using privileged containers when adding individual
    capabilities or system call privileges will suffice. We discuss this more in [“Security”](ch11.html#security).
  prefs: []
  type: TYPE_NORMAL
- en: If you can use a Docker server endpoint, this command will give you access to
    the underlying host.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker daemon configuration is typically stored in */etc/docker/daemon.json*,
    but you may notice that it exists somewhere like */containers/services/docker/rootfs/etc/docker/daemon.json*
    in the Docker Desktop VM. Docker uses reasonable defaults for all its settings,
    so this file may be very small or even completely absent. If you are using Docker
    Desktop, you can edit this file by clicking on the Docker icon and selecting Preferences…
    → Docker Engine, as shown in [Figure 3-3](#figure3-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Desktop Server Configuration](assets/dur3_0303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-3\. Docker Desktop server configuration
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Wrap-Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a running Docker setup, you can start to look at more than
    the basic mechanics of getting it installed. In the next chapter, you’ll explore
    how to build and manage Docker images, which provide the basis for every container
    you will ever launch with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the rest of the book, when you see `docker` on the command line, assume you
    will need to have the correct configuration in place either as a Docker context,
    environment variables, or via the `-H` command-line flag to tell the `docker`
    client how to connect to the `dockerd` server process.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](ch03.html#idm46803156871040-marker)) Full URL: [*https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about*](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about)'
  prefs: []
  type: TYPE_NORMAL
- en: '^([2](ch03.html#idm46803156697792-marker)) Full URL: [*https://www.vmware.com/products/workstation-pro.html*](https://www.vmware.com/products/workstation-pro.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '^([3](ch03.html#idm46803156692368-marker)) Full URL: [*https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v*](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)'
  prefs: []
  type: TYPE_NORMAL
