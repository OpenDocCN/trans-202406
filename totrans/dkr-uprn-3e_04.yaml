- en: Chapter 3\. Installing Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 安装Docker
- en: We’re now at the point where you hopefully understand roughly what Docker is
    and what it isn’t, and it’s time for some hands-on work. Let’s get Docker installed
    so we can work with it. The steps required to install Docker vary depending on
    the platform you use for development and the Linux distribution you use to host
    your applications in production.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您希望大致了解Docker是什么以及它不是什么，现在是动手工作的时候了。让我们安装Docker，这样我们就可以开始使用它了。安装Docker所需的步骤因您用于开发的平台和用于生产中托管应用程序的Linux发行版而异。
- en: In this chapter, we discuss the steps required to get a fully working Docker
    development environment set up on most modern desktop operating systems. First,
    we’ll install the Docker client on your native development platform, and then
    we’ll get a Docker server running on Linux. Finally, we’ll test out the installation
    to make sure it works as expected.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论在大多数现代桌面操作系统上设置完全可工作的Docker开发环境所需的步骤。首先，我们将在您的本机开发平台上安装Docker客户端，然后在Linux上运行Docker服务器。最后，我们将测试安装以确保其按预期工作。
- en: Although the Docker client can run on Windows and macOS to control a Docker
    server, Linux containers can only be built and launched on a Linux system. Therefore,
    non-Linux systems will require a virtual machine or remote server to host the
    Linux-based Docker server. Docker Community Edition, Docker Desktop, and Vagrant,
    which are all discussed later in this chapter, provide some approaches to address
    this issue. It is also possible to run Windows containers natively on Windows
    systems, and we will specifically discuss this in [“Windows Containers”](ch05.html#windows_containers),
    but most of the book’s focus will be on Linux containers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Docker客户端可以在Windows和macOS上运行以控制Docker服务器，但Linux容器只能在Linux系统上构建和启动。因此，非Linux系统需要一个虚拟机或远程服务器来托管基于Linux的Docker服务器。本章后面将讨论Docker社区版、Docker桌面版和Vagrant，它们提供了一些解决这个问题的方法。在[“Windows容器”](ch05.html#windows_containers)部分，我们也会具体讨论在Windows系统上原生运行Windows容器的可能性，但本书大部分关注点将放在Linux容器上。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Docker ecosystem is changing very rapidly as the technology evolves to become
    more robust and solve a broader range of problems. Some features discussed in
    this book and elsewhere may become deprecated. To see what has been tagged for
    deprecation and eventual removal, refer to the [documentation](https://docs.docker.com/engine/deprecated).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的发展，Docker生态系统正在迅速变化，以变得更加强大并解决更广泛的问题。本书和其他地方讨论的一些功能可能会被弃用。要了解已标记为弃用并最终删除的功能，请参阅[文档](https://docs.docker.com/engine/deprecated)。
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: We assume that you are using a traditional Unix shell in most of the code examples
    in the book. You can use PowerShell, but be aware that some commands will need
    adjusting to work in that environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您在书中的大多数代码示例中使用传统的Unix shell。您也可以使用PowerShell，但请注意，某些命令可能需要调整以在该环境中运行。
- en: If you are in an environment that requires you to use a proxy, make sure that
    it is [properly configured for Docker](https://docs.docker.com/network/proxy).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您处于需要使用代理的环境，请确保为Docker正确配置了[代理](https://docs.docker.com/network/proxy)。
- en: Docker Client
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker客户端
- en: The Docker client natively supports 64-bit versions of Linux, Windows, and macOS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker客户端原生支持64位版本的Linux、Windows和macOS。
- en: The majority of popular Linux distributions can trace their origins to either
    Debian or Red Hat. Debian systems utilize the deb package format and [Advanced
    Package Tool (`apt`)](https://wiki.debian.org/AptCLI) to install most prepackaged
    software. On the other hand, Red Hat systems rely on RPM Package Manager (`rpm`)
    files and [Yellowdog Updater, Modified (`yum`)](https://en.wikipedia.org/wiki/Yum_(software)),
    or [Dandified `yum` (`dnf`)](https://goo.gl/TdkGRS) to install similar software
    packages. Alpine Linux, which is often used in environments that require a very
    small Linux footprint, relies on the [Alpine Package Keeper (`apk`)](https://wiki.alpinelinux.org/wiki/Package_management)
    to manage software packages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数流行的Linux发行版可以追溯到Debian或Red Hat。Debian系统使用deb软件包格式和[高级包工具 (`apt`)](https://wiki.debian.org/AptCLI)来安装大多数预打包软件。另一方面，Red
    Hat系统依赖于RPM包管理器 (`rpm`) 文件和[Yellowdog更新程序修改版 (`yum`)](https://en.wikipedia.org/wiki/Yum_(software))，或者[Dandified
    `yum` (`dnf`)](https://goo.gl/TdkGRS)来安装类似的软件包。经常用于需要非常小的Linux占用空间的环境的Alpine Linux，依赖于[Alpine软件包管理器
    (`apk`)](https://wiki.alpinelinux.org/wiki/Package_management)来管理软件包。
- en: On macOS and Microsoft Windows, native GUI installers provide the easiest method
    to install and maintain prepackaged software. [Homebrew for macOS](https://brew.sh)
    and [Chocolatey for Windows](https://chocolatey.org) are also very popular options
    among technical users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 和 Microsoft Windows 上，本机 GUI 安装程序提供了安装和维护预打包软件的最简单方法。[macOS 上的 Homebrew](https://brew.sh)
    和 [Windows 上的 Chocolatey](https://chocolatey.org) 也是技术用户中非常流行的选择。
- en: Warning
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: We will be discussing a few approaches to installing Docker in this section.
    Make sure that you pick the first one in this list that best matches your needs.
    Installing more than one may cause problems if you are not well versed in how
    to switch between them properly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论安装 Docker 的几种方法。请确保您在列表中选择最符合您需求的第一个。如果您不熟悉如何正确切换它们，安装多个可能会导致问题。
- en: 'Choose one of these: Docker Desktop, Docker Community Edition, OS package manager,
    or Vagrant.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选择其中之一：Docker Desktop、Docker 社区版、OS 包管理器或 Vagrant。
- en: You can always find the most recent [installation documentation](https://docs.docker.com/get-docker)
    on the Docker website.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以在 Docker 网站上找到最新的[安装文档](https://docs.docker.com/get-docker)。
- en: Linux
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: It is strongly recommended that you run Docker on a modern release of your preferred
    Linux distribution. It is possible to run Docker on some older releases, but stability
    may be a significant issue. Generally, a 3.8 or later kernel is required, and
    we advise you to use the newest stable version of your chosen distribution. The
    following directions assume you are using a recent stable release of the Ubuntu
    or Fedora Linux distributions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您在首选 Linux 发行版的现代版本上运行 Docker。尽管在一些旧版本上也可以运行 Docker，但稳定性可能是一个重大问题。通常需要 3.8
    或更高版本的内核，并建议您使用所选发行版的最新稳定版本。以下步骤假设您正在使用 Ubuntu 或 Fedora Linux 发行版的最新稳定版本。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Although we are not covering it here, [Docker Desktop for Linux](https://docs.docker.com/desktop/linux/install)
    has been released and can be used on Linux if you would prefer running the Docker
    daemon on a local virtual machine instead of directly on your system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们没有在此处详细介绍，[Linux 上的 Docker Desktop](https://docs.docker.com/desktop/linux/install)
    已发布，并可以在 Linux 上使用，如果您希望在本地虚拟机上运行 Docker 守护程序，而不是直接在系统上运行。
- en: Ubuntu Linux 22.04 (64-bit)
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ubuntu Linux 22.04 (64 位)
- en: Let’s take a look at the steps required to install Docker on the 64-bit version
    of Ubuntu Linux 22.04.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下在 64 位版本的 Ubuntu Linux 22.04 上安装 Docker 所需的步骤。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For up-to-date instructions or coverage of other versions of Ubuntu, see the
    [Docker Community Edition for Ubuntu](https://dockr.ly/2NwNbuw).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最新的指令或涵盖其他版本的 Ubuntu，请参阅[Docker 社区版适用于 Ubuntu](https://dockr.ly/2NwNbuw)。
- en: 'These first two commands will ensure that you aren’t running older versions
    of Docker. The packages have been renamed a few times, so you’ll need to specify
    several possibilities here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个命令将确保您不在运行旧版本的 Docker。由于软件包已经多次更名，因此您需要指定几种可能性：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It is safe to ignore `apt-get` errors that say “Unable to locate package” or
    “Package is not installed.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以安全地忽略显示“无法定位软件包”或“软件包未安装”的`apt-get`错误。
- en: 'Next, you will need to add the required software dependencies and *apt* repository
    for Docker Community Edition. This lets us fetch and install packages for Docker
    and validate that they are signed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要添加 Docker 社区版所需的软件依赖和*apt*存储库。这样可以帮助我们获取并安装 Docker 的软件包，并验证它们已签名：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that you have the repository set up, run the following commands to install
    Docker:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置了存储库，请运行以下命令来安装 Docker：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Assuming you don’t get any error messages, you now have Docker installed!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您没有收到任何错误消息，现在 Docker 已经安装完成！
- en: Fedora Linux 36 (64-bit)
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fedora Linux 36 (64 位)
- en: Now let’s take a look at the steps needed to install Docker on the 64-bit version
    of Fedora Linux 36.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下在 64 位版本的 Fedora Linux 36 上安装 Docker 所需的步骤。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For up-to-date instructions or coverage of other versions of Fedora, see the
    [Docker Community Edition for Fedora](https://dockr.ly/2NwNdTa).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最新的指令或涵盖其他版本的 Fedora，请参阅[Docker 社区版适用于 Fedora](https://dockr.ly/2NwNdTa)。
- en: 'This first command will ensure that you aren’t running older versions of Docker.
    As on Ubuntu systems, the package has been renamed a few times, so you’ll need
    to specify several possibilities here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将确保您不在运行旧版本的 Docker。由于在 Ubuntu 系统上，该软件包已经多次更名，因此您需要指定几种可能性：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, you will need to add the required software dependencies and *dnf* repository
    for Docker Community Edition:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要添加 Docker 社区版所需的软件依赖和*dnf*存储库：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now you can install the current version of Docker Community Edition:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以安装当前版本的 Docker Community Edition：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: macOS, Mac OS X
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS, Mac OS X
- en: To install Docker on macOS, you should use the official Docker Desktop installer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装 Docker，请使用官方的 Docker Desktop 安装程序。
- en: GUI installer
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形界面安装程序
- en: Download the [latest Docker Desktop for Mac installer](https://dockr.ly/2wyTpCO),
    and then double-click on the downloaded program icon. Follow all of the installer’s
    prompts until the installation is finished. Docker Desktop for macOS relies on
    the [xhyve](https://github.com/machyve/xhyve) project and Apple’s [Hypervisor
    framework](https://developer.apple.com/documentation/hypervisor) to provide a
    native lightweight virtualization layer for the Linux server component, which
    is required to launch Linux virtual machines that can build Docker images and
    run containers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下载[最新的 Docker Desktop for Mac 安装程序](https://dockr.ly/2wyTpCO)，然后双击下载的程序图标。按照安装程序的所有提示完成安装。Docker
    Desktop for macOS 依赖于[xhyve](https://github.com/machyve/xhyve)项目和 Apple 的[Hypervisor
    框架](https://developer.apple.com/documentation/hypervisor)，为 Linux 服务器组件提供本地轻量级虚拟化层，这是启动能够构建
    Docker 镜像和运行容器的 Linux 虚拟机所必需的。
- en: Homebrew installation
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Homebrew 安装
- en: You can also install the Docker CLI tools using the popular [Homebrew](https://docs.brew.sh/Installation)
    package management system for macOS. If you take this approach, you should consider
    installing Vagrant for creating and managing your Linux VM. We’ll discuss that
    shortly in [“Non-Linux VM-Based Server”](#vm_server).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用流行的[Homebrew](https://docs.brew.sh/Installation)包管理系统在 macOS 上安装 Docker
    CLI 工具。如果选择这种方式，建议您考虑安装 Vagrant 以创建和管理您的 Linux VM。我们将在[“基于非 Linux VM 的服务器”](#vm_server)中稍后讨论这一点。
- en: Microsoft Windows 11
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Windows 11
- en: Here are the steps required to install Docker Desktop on Windows 11.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是在 Windows 11 上安装 Docker Desktop 的步骤。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: It is highly recommended that you set up the [Windows Subsystem for Linux (WSL2)](https://docs.microsoft.com/en-us/windows/wsl/install)
    *before* installing Docker Desktop, and then select any available options in the
    Docker Desktop installer to enable and default to WSL2.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Docker Desktop 之前，强烈建议您先设置好[Windows 子系统用于 Linux (WSL2)](https://docs.microsoft.com/en-us/windows/wsl/install)，然后在
    Docker Desktop 安装程序中选择任何可用选项，以启用并默认使用 WSL2。
- en: Docker Desktop for Windows can leverage [Hyper-V](https://oreil.ly/vt6-o)^([1](ch03.html#idm46803156871040))
    to provide a native virtualization layer for the Linux server components, but
    [WSL2](https://docs.microsoft.com/en-us/windows/wsl/install) should provide you
    with the smoothest experience when working with Linux containers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop for Windows 可利用[Hyper-V](https://oreil.ly/vt6-o)^([1](ch03.html#idm46803156871040))为
    Linux 服务器组件提供本地虚拟化层，但在处理 Linux 容器时，[WSL2](https://docs.microsoft.com/en-us/windows/wsl/install)应该能为您提供最顺畅的体验。
- en: Download the [latest Docker Desktop for Windows installer](https://dockr.ly/2C0n7H0),
    and then double-click on the downloaded program icon. Follow all of the installer
    prompts until the installation is finished.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下载[最新的 Docker Desktop for Windows 安装程序](https://dockr.ly/2C0n7H0)，然后双击下载的程序图标。按照安装程序的所有提示完成安装。
- en: Chocolatey installation
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chocolatey 安装
- en: You can also install the Docker CLI tools using the popular [Chocolatey](https://docs.chocolatey.org/en-us/choco/setup)
    package management system for Windows. If you take this approach, you should consider
    installing Vagrant for creating and managing your Linux VM. We’ll discuss that
    shortly in [“Non-Linux VM-Based Server”](#vm_server).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用流行的[Chocolatey](https://docs.chocolatey.org/en-us/choco/setup)包管理系统在 Windows
    上安装 Docker CLI 工具。如果选择这种方式，建议您考虑安装 Vagrant 以创建和管理您的 Linux VM。我们将在[“基于非 Linux VM
    的服务器”](#vm_server)中稍后讨论这一点。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The [Docker website](https://docs.docker.com/engine/install) has installation
    directions for additional environments online.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[Docker 网站](https://docs.docker.com/engine/install)提供了其他环境的安装说明。'
- en: Docker Server
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 服务器
- en: The Docker server is a separate binary from the client and is used to manage
    most of the work for which Docker is typically used. Next we will explore the
    most common ways to manage the Docker server.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 服务器是与客户端分离的单独二进制文件，用于管理 Docker 典型用途的大多数工作。接下来，我们将探讨管理 Docker 服务器的最常见方式。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Desktop and Docker Community Edition already set up the server for you,
    so if you took that route, you do not need to do anything else besides ensuring
    that the server (`dockerd`) is running. On Windows and macOS, this typically just
    means starting the Docker application. On Linux, you may need to run the following
    `systemctl` commands to start the server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop和Docker社区版已为您设置了服务器，因此如果您选择了这条路线，除了确保服务器（`dockerd`）正在运行外，您无需执行其他操作。在Windows和macOS上，这通常意味着启动Docker应用程序。在Linux上，您可能需要运行以下`systemctl`命令来启动服务器。
- en: systemd-Based Linux
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于systemd的Linux
- en: 'Current Fedora and Ubuntu releases use [`systemd`](https://www.freedesktop.org/wiki/Software/systemd)
    to manage processes on the system. Because you have already installed Docker,
    you can ensure that the server starts every time you boot the system by typing
    this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的Fedora和Ubuntu版本使用[`systemd`](https://www.freedesktop.org/wiki/Software/systemd)来管理系统上的进程。因为您已经安装了Docker，您可以通过键入以下内容来确保服务器在每次启动系统时启动：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This tells `systemd` to enable the `docker` service and start it when the system
    boots or switches into the default run level. To start the Docker server, type
    the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`systemd`启用`docker`服务，并在系统启动或切换到默认运行级别时启动它。要启动Docker服务器，请输入以下命令：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Non-Linux VM-Based Server
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非Linux虚拟机服务器
- en: If you are using Microsoft Windows or macOS in your Docker workflow, you will
    need a VM so that you can set up a Docker server for testing. Docker Desktop is
    convenient because it sets up this VM for you using the native virtualization
    technology on these platforms. If you are running an older version of Windows
    or cannot use Docker Desktop for other reasons, you should investigate [Vagrant](https://www.vagrantup.com)
    to help you create and manage your Docker server Linux VM.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Docker工作流中使用Microsoft Windows或macOS，则需要一个虚拟机，以便您可以设置一个用于测试的Docker服务器。Docker
    Desktop非常方便，因为它使用这些平台上的本地虚拟化技术为您设置此虚拟机。如果您运行较旧版本的Windows或由于其他原因无法使用Docker Desktop，则应该考虑使用[Vagrant](https://www.vagrantup.com)来帮助您创建和管理Docker服务器Linux虚拟机。
- en: In addition to using Vagrant, you can also use other virtualization tools, like
    [Lima on macOS](https://github.com/lima-vm/lima) or any standard hypervisor, to
    set up a local Docker server, depending on your preferences and needs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Vagrant之外，您还可以根据需要选择其他虚拟化工具，如[Lima on macOS](https://github.com/lima-vm/lima)或任何标准虚拟化程序，来设置本地Docker服务器。
- en: Vagrant
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vagrant
- en: Vagrant provides support for multiple hypervisors and can often be leveraged
    to mimic even the most complex environments.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant支持多个虚拟化平台，通常可用于模拟甚至最复杂的环境。
- en: A common use case for leveraging Vagrant during Docker development is to support
    testing on images that match your production environment. Vagrant supports everything
    from broad distributions like [Red Hat Enterprise Linux](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux)
    and [Ubuntu](https://ubuntu.com) to finely focused atomic host distributions like
    [Fedora CoreOS](https://getfedora.org/en/coreos).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker开发中利用Vagrant的常见用例是支持在与生产环境匹配的映像上进行测试。Vagrant支持从广泛的发行版如[Red Hat Enterprise
    Linux](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux)和[Ubuntu](https://ubuntu.com)到精细的原子主机发行版如[Fedora
    CoreOS](https://getfedora.org/en/coreos)。
- en: You can easily install Vagrant on most platforms by [downloading a self-contained
    package](https://www.vagrantup.com/downloads.html).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[下载一个自包含包](https://www.vagrantup.com/downloads.html)来轻松在大多数平台上安装Vagrant。
- en: Warning
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This Vagrant example is not secure and is not intended to be a recommendation.
    Instead, it is simply a demonstration of the basic requirements needed to set
    up a *remote* Docker server VM and make use of it. Securing the server is of critical
    importance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此Vagrant示例并不安全，也不意味着推荐。相反，它只是演示了设置远程Docker服务器VM所需的基本要求。保护服务器至关重要。
- en: Using Docker Desktop for development is often a better option, when possible.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，使用Docker Desktop进行开发通常是更好的选择。
- en: 'You will need to have a hypervisor, like one of the following, fully installed
    on your system:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在系统上完全安装一个如下所示的虚拟化程序（hypervisor）：
- en: '[VirtualBox](https://www.virtualbox.org/wiki/Downloads)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[VirtualBox](https://www.virtualbox.org/wiki/Downloads)'
- en: Freely available
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费提供
- en: Supports multiplatforms on most architectures
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持大多数架构上的多平台
- en: '[VMware Workstation Pro/Fusion](https://oreil.ly/4uNsR)^([2](ch03.html#idm46803156697792))'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[VMware Workstation Pro/Fusion](https://oreil.ly/4uNsR)^([2](ch03.html#idm46803156697792))'
- en: Commercial software
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业软件
- en: Supports multiplatforms on most architectures
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持大多数架构上的多平台
- en: '[HyperV](https://oreil.ly/agPTI)^([3](ch03.html#idm46803156692368))'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commercial software
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Windows on most architectures
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KVM](https://www.linux-kvm.org)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freely available
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Linux on most architectures
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, Vagrant assumes that you are using the VirtualBox hypervisor, but
    you can change it by using the [`--provider` flag](https://learn.hashicorp.com/tutorials/vagrant/getting-started-providers)
    when using the `vagrant` command.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, you will create a Ubuntu-based Docker host running
    the Docker daemon. Then you will create a host directory with a name similar to
    *docker-host* and move into that directory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In order to use Vagrant, you need to [find a Vagrant Box (VM image)](https://app.vagrantup.com/boxes/search)
    that is compatible with your provisioner and architecture. In this example, we
    will use a Vagrant Box for the Virtual Box hypervisor.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Virtual Box only works on Intel/AMD x86(64) systems, and the Vagrant Box we
    are using is specifically built for AMD64 systems.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and create a new file called *Vagrantfile* with the following contents
    in it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can retrieve a complete copy of this file by running this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may need to remove the “\” in the `git clone` command and reassemble the
    URL into a single line. It is there because the command is too long for the standard
    printed page, and this should work in a standard Unix shell as long as there are
    no leading or trailing spaces in either line.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you are in the directory with the *Vagrantfile*, and then run the
    following command to start the Vagrant VM.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This setup is provided as a simple example. It is not secure and should not
    be left running without ensuring that the server cannot be accessed from the broader
    network.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Docker maintains [documentation on how to secure your Docker endpoint with SSH
    or TLS client certificates](https://docs.docker.com/engine/security/protect-access)
    and provides some additional information about the [attack surface of the Docker
    daemon](https://docs.docker.com/engine/security/#docker-daemon-attack-surface).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On macOS, you may see an error like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '`VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component
    MachineWrap, interface IMachine`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: This is due to the security features in macOS. A quick search should lead you
    to an [online post that describes the fix](https://scriptcrunch.com/solved-vboxmanage-error-component-machinewrap).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the VM is running, you should be able to connect to the Docker server
    by running the following command and telling the Docker client where it should
    connect to with the `-H` argument:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output will provide you with version information about the various components
    that make up the Docker client and server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing in the IP address and port every time you want to run a Docker command
    is not ideal, but luckily Docker can be set up to know about multiple Docker servers
    by using the `docker context` command. To start, let’s check and see what context
    is currently in use. Take note of the entry that has an asterisk (*) next to it,
    which designates the current context:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can create a new context for the Vagrant VM and then make it active by
    running the following sequence of commands:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you re-list all the contexts now, you should see something like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With your current context set to `vagrant`, running `docker version` without
    the additional `-H` argument will still connect to the correct Docker server and
    return the same information as before.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to a shell on the Vagrant-based VM, you can run the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Until you have time to secure this setup, it is best to go ahead and shut down
    the VM and set your context back to its original state:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are using macOS, you might want to take a look at [Colima](https://github.com/abiosoft/colima),
    which makes it very easy to spin up and manage a flexible Docker or Kubernetes
    VM.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Setup
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have a working client and server set up, you are ready to test that
    everything is working. You should be able to run any one of the following commands
    on your local system to tell the Docker daemon to download the latest official
    container for that distribution and then launch it with a running Unix shell process.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'This step is important to ensure that all the pieces are properly installed
    and communicating with one another as expected. It shows off one of the features
    of Docker: we can run containers based on any Linux distribution we like. In the
    next few steps, we’ll run Linux containers based on Ubuntu, Fedora, and Alpine
    Linux. You don’t need to run them all to prove that this works; running one of
    them will suffice.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are using the Docker client on a Linux system, you may need to prepend
    each `docker` command with `sudo` since the *root* user may be the only one with
    Docker access, by default.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Most Docker installs create a `docker` group that can be used to manage who
    has access to the `dockerd` Unix socket. You can add your user to that group so
    that you no longer need to use the [`sudo` command](https://man7.org/linux/man-pages/man8/sudo.8.html).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s try launching a container using the latest Ubuntu Linux base image:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using `docker container run` is functionally the same as using `docker run`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Fedora
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we launch a container using the latest Fedora Linux base image:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Alpine Linux
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And then finally, we can test launching a container using the latest Alpine
    Linux base image:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`docker.io/ubuntu:latest`, `docker.io/fedora:latest`, and `docker.io/alpine:latest`
    all represent a Docker image repository, followed by an image name and an image
    tag.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Docker Server
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the Docker server is often installed, enabled, and run automatically,
    it’s useful to see that [running the Docker daemon manually on a Linux system](https://docs.docker.com/engine/reference/commandline/dockerd)
    can be as simple as typing something like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section assumes that you are on the actual Linux server or VM that is running
    the Docker daemon. If you are using Docker Desktop on Windows or Mac, you won’t
    be able to easily interact with the `dockerd` executable, as it is intentionally
    hidden from the end user, but we’ll show you a trick in just a moment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: This command starts the Docker daemon, creates and listens to a Unix domain
    socket (`-H unix:///var/run/docker.sock`), and reads in the rest of the configuration
    from */etc/docker/daemon.json*. You’re not likely to have to start the Docker
    server yourself, but that’s what’s going on behind the scenes. On non-Linux systems,
    you will typically have a Linux-based VM that hosts the Docker server. Docker
    Desktop sets up this VM for you in the background.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you already have Docker running, executing the daemon again will fail because
    it can’t use the same network port twice.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, it is very easy to SSH into your new Docker server and take a
    look around, but the seamless experience of Docker Desktop on a non-Linux system
    means it is often not apparent that Docker Desktop is leveraging a local VM on
    which to run the Docker daemon. Because the Docker Desktop VM is designed to be
    very small and very stable, it does not run an SSH daemon and is, therefore, a
    bit tricky to access.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are curious or just ever have a need to access the underlying VM, you
    can do it, but it requires a little advanced knowledge. We will talk about the
    command `nsenter` in much more detail in [“nsenter”](ch11.html#nsenter), but for
    now, if you would like to see the VM (or underlying host), you can run these commands:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This command uses a privileged Debian container that contains the `nsenter`
    command to manipulate the Linux kernel namespaces so that we can navigate the
    filesystem of the underlying VM or host.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This container is privileged to allow us to navigate the underlying host, but
    you should not get into the habit of using privileged containers when adding individual
    capabilities or system call privileges will suffice. We discuss this more in [“Security”](ch11.html#security).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: If you can use a Docker server endpoint, this command will give you access to
    the underlying host.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: The Docker daemon configuration is typically stored in */etc/docker/daemon.json*,
    but you may notice that it exists somewhere like */containers/services/docker/rootfs/etc/docker/daemon.json*
    in the Docker Desktop VM. Docker uses reasonable defaults for all its settings,
    so this file may be very small or even completely absent. If you are using Docker
    Desktop, you can edit this file by clicking on the Docker icon and selecting Preferences…
    → Docker Engine, as shown in [Figure 3-3](#figure3-3).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Desktop Server Configuration](assets/dur3_0303.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Desktop 服务器配置](assets/dur3_0303.png)'
- en: Figure 3-3\. Docker Desktop server configuration
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. Docker Desktop 服务器配置
- en: Wrap-Up
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now that you have a running Docker setup, you can start to look at more than
    the basic mechanics of getting it installed. In the next chapter, you’ll explore
    how to build and manage Docker images, which provide the basis for every container
    you will ever launch with Docker.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有一个运行中的 Docker 设置，可以开始查看更多超出基本安装机制的内容。在下一章中，你将探索如何构建和管理 Docker 镜像，这些镜像是你使用
    Docker 启动的每个容器的基础。
- en: Tip
  id: totrans-168
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In the rest of the book, when you see `docker` on the command line, assume you
    will need to have the correct configuration in place either as a Docker context,
    environment variables, or via the `-H` command-line flag to tell the `docker`
    client how to connect to the `dockerd` server process.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，当你在命令行上看到 `docker`，假设你需要正确的配置，无论是作为 Docker 上下文、环境变量，还是通过 `-H` 命令行标志告诉
    `docker` 客户端如何连接到 `dockerd` 服务器进程。
- en: '^([1](ch03.html#idm46803156871040-marker)) Full URL: [*https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about*](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](ch03.html#idm46803156871040-marker)) 完整网址: [*https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about*](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about)'
- en: '^([2](ch03.html#idm46803156697792-marker)) Full URL: [*https://www.vmware.com/products/workstation-pro.html*](https://www.vmware.com/products/workstation-pro.html)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '^([2](ch03.html#idm46803156697792-marker)) 完整网址: [*https://www.vmware.com/products/workstation-pro.html*](https://www.vmware.com/products/workstation-pro.html)'
- en: '^([3](ch03.html#idm46803156692368-marker)) Full URL: [*https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v*](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '^([3](ch03.html#idm46803156692368-marker)) 完整网址: [*https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v*](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)'
