- en: Chapter 6\. Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, you might want to read, write, or inspect a file for any number
    of reasons. For example, you might want to modify an image and save it to disk,
    download a video to your user’s SD card (after determining if one is available),
    or use a simple indexed JSON flat-file database. File handling logic comes up
    frequently in application development, so a good grasp of the fundamentals is
    important for most developers.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Get properties from a file like size on disk or last modified date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read and write data to and from a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy data from one file to another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, a developer might query the device for the location of an external
    SD on the device, compress a group of files for upload, write XML to track user
    preferences, get bitmaps from assets, read a resource file, or log out events
    in a persistent fashion. Even an SQLite database (the AOSP framework–provided
    database) exists as a single file, so you’d use the same logic to determine its
    size, or make a duplicate for export.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing files in Java has come a long way, and modern versions of
    the language include streaming APIs, an updated package called `java.nio.file`
    (“nio” means “new input/output”), and some handy helper classes like `Files` and
    `Paths` that offer a variety of approaches to file system access. Unfortunately,
    these are not available to most Android developers, and at the time of this writing,
    only the most recent two versions of the Android OS—about 21% of all Android installations—had
    support for the `java.nio.file` package. Streaming APIs and the `Files` helper
    class are not available in any version of Android at this time.
  prefs: []
  type: TYPE_NORMAL
- en: But fear not! With a little ingenuity we can leverage existing frameworks and
    standard library APIs to do pretty much everything we need to do. The package
    we’ll be using most is `java.io` (you guessed it…"input and output”), and one
    of the classes we’ll be using frequently is `java.io.File`. A `File` instance
    is an abstract representation of a location on the local file system. Note that
    a `File` instance represents either a file or a directory; APIs like `isDirectory`
    or `isFile` exist to differentiate them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a reference to an existing file, you can pass the path to a `File` constructor:
    `File file = new File("path/to/file.ext");`. In Android applications, it’s likely
    the file system will be restricted, and your app will be assigned a special directory
    on the device that you’ll be given read and write privileges to—you can get this
    directory by calling `getFilesDir()` on any `Context` instance, which will return
    an already constructed `File` instance representing that directory the system
    has created for your app. So, in an Android application, you can create a new
    file by passing that directory as the root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file does not exist, you’ll need to create it: `file.createNewFile();`.
    Make sure the path exists as well; you can do that by calling `file.getParentFile().mkdirs()`,
    which will create any number of directories between the root and the highest-level
    directory in the path. That’s to say that, using the preceding example, `file.mkdirs()`
    will create a folder called “path” and then inside that another folder called
    “to.” Note the plural; `file.mkdir()` will only create the single directory specified
    by the `File` instance.'
  prefs: []
  type: TYPE_NORMAL
- en: Get Properties from the File Like Size or Last Modified Date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, now that you have a handle on a `File` instance, you can read data from
    it, write data to it, or inspect its properties, like size or modified date:'
  prefs: []
  type: TYPE_NORMAL
- en: Read and Write Data to and from a File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While you might immediately think about how to write a `String` to a `File`,
    this is actually not the default operation in Java and Android—consider binary
    files like images, audio and video, and compressed files like ZIPs and TARs. While
    there are APIs for reading and writing the `Strings` directory to and from `File`
    instances, like `FileReader` and `FileWriter`, that offer simplified operations
    for `String` reading and writing, we’re going to concentrate on Java’s foundational
    pattern when it comes to reading and writing data: byte streams. The benefit of
    relying on byte-level data is that the same operation can be used for anything:
    writing text files, streaming multimedia, downloading images, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t be intimidated! Everything in your program is already represented by bytes
    at some level, and we can pretty easily get access to that information with existing
    APIs in the standard library. For example, we could get the bytes from a `String`
    simply by calling `getBytes()` on that `String` instance—no sweat.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, you might be surprised to learn that there are no specific `write`
    or `read` methods on the `java.io.File` class, and in fact the process of reading
    and writing requires another intermediary facilitator class: a stream (an instance
    of an `InputStream` or `OutputStream`, or a subclass, as appropriate). The concept
    of a stream in Java is simply a piece of data that can be read sequentially, from
    start to finish. The advantage of this approach is that we don’t need to have
    all of the information in memory at once. In fact, the object itself might not
    even have a discernible end! For example, we might want to play video from a live
    source; using a stream, we just read bytes in as they arrive and buffer or display
    them as appropriate to our program.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But let’s get back to our practical example. We’ll start by writing to a file.
    Unsurprisingly, you’ll need an instance of a `FileOutputStream` to do that. You
    can get an instance of a `FileOutputStream` by invoking the constructor and passing
    the `File` instance you’ve already got a reference to: `OutputStream outputStream`
    `=` `new FileOutputStream(file);`. The `write` method of `FileOutputStream` has
    a few different signatures, but let’s stick with one in the pattern of our conversation
    so far: `write(byte[] bytes)`. Just pass an array of bytes as the only argument,
    and those bytes will be written to the `File` instance referenced by the `FileOutputStream`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we wanted to write some text to the file, we could do something like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Voila! You’ve just written “Hello world!” to your file! Of course, as with
    most things Java and Android, there’s a number of caveats that make this fairly
    straightforward concept a little clunkier. For example, the `FileOutputStream`
    constructor throws a `FileNotFoundException`, and the `write` method throws an
    `IOException`. Further, we have to make sure the stream is closed when we’re done
    with it, which itself throws an `IOException`. While the fully expressed block
    to do all of this work can be a little hard to follow, we can wrap it all in a
    method with a checked exception and reduce the line count a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'And you could use it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading data from files follows a very similar pattern. As you may have guessed,
    we’ll be using a `FileInputStream` instead of a `FileOutputStream`.
  prefs: []
  type: TYPE_NORMAL
- en: Again, since we’re thinking in terms of binary data, we’ll need to do a little
    more work to get the file contents as human-readable text. If you’re regularly
    reading and writing plain-text files, there are simpler approaches like `FileWriter`
    and `FileReader`, but as stated, using byte streams is a universal solution, and
    converting to a `String` is trivial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to `FileOutputStream`, the `FileInputStream` constructor will also
    accept a `File` parameter: `InputStream inputStream = new FileInputStream(file);`.
    Once that’s been instantiated, you can read single bytes with the plain `read()`
    signature, or large blocks by passing in a byte array buffer. We’ll talk about
    the single-byte simple `read()` method now, but keep in mind that using buffers
    is generally more efficient, especially for large files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `read` method returns an `int`, which is a representation of either the
    number of bytes read, or -1 to signify the end of the file (and stream). You can
    cast this to a `char` to build up the `String` representation of the file’s content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, several of these methods `throw` checked exceptions, and again we need
    to close the stream when we’re done with it, so it can be useful to wrap this
    all up in a single checked method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since there are other stream sources besides `FileInputStream`, you may consider
    abstracting the method to convert a stream to a string, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy Data from One File to Another
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can see how we might easily combine these two operations to copy any file,
    be it a simple text file or a gig worth of video! Since we neither know nor care
    if it’s a text file or a binary file, we don’t have to do any convolutions around
    casting `Character` instances or pulling bytes from a `String`—by keeping our
    logic agnostic, you can see how this operation is actually one of the most readable:'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We have used the `InputStream.read` method in these examples for clarity. This
    method returns a single byte per invocation. You’ll be able to get much improved
    performance writing chunks of bytes into sized byte arrays generally known as
    “buffers.” `InputStream` has `read` methods for these buffers, and `OutputStream`
    has `write` methods for them as well.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Now you’ve got the tools you need to read and write to the filesystem
    in an Android app. Be sure to check out the `File` API in the dev docs for more!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Apache Commons Java library has a well-known and well-regarded file and
    input/output module `apache.commons.io`. Of particular use are the `IOUtils` and
    `FileUtils` helper classes.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In iOS, file operations drive a lot of the underpinnings of some very powerful
    technologies. Eventually, in any sufficiently complex application, a use case
    will arise that will require reading and writing files on the filesystem. Due
    to the sandboxed nature of iOS, there is a little bit of prerequisite knowledge
    on how data is organized necessary to get started working with files.
  prefs: []
  type: TYPE_NORMAL
- en: Get Properties from the File Like Size or Last Modified Date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are really two main areas of focus where file access is allowed: the
    application bundle container and the app’s data container. Let’s start with the
    application bundle container.'
  prefs: []
  type: TYPE_NORMAL
- en: App bundles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The app bundle includes the application binary and all resources compiled and
    delivered with the app. On installation, this directory is code-signed to provide
    protection from tampering. Because of this, it’s not possible to change the files
    inside the app bundle or write to the directory (more on that follows).
  prefs: []
  type: TYPE_NORMAL
- en: 'Access to files within the app bundle is provided via the `Bundle` class in
    Swift. An app can have multiple bundles via frameworks, so targeting the application
    bundle is done with the `main` class variable. In order to access a file named
    *image.png* a file URL is created as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If that file were in a subdirectory named *sample-images*, the variable would
    be instantiated like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Data (and documents)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using static and unchangeable files from the application bundle quickly becomes
    limiting. Eventually the need will arise to read and write user-generated documents
    and data. There is a set of three directories created for each application that
    is installed within iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tmp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these directories serves a specific purpose as detailed in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Documents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: User-generated content and files that will require access by the user should
    go here. These files are backed up in iTunes and iCloud by default. File sharing
    can also be enabled for the app to let users interact with these files directly.
  prefs: []
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Within the application’s *Library* folder, there are a few predefined directories
    where additional files are typically placed. Two of the most important of these
    are: *Application Support* and *Caches*. Data that needs to be persisted for use
    in the future but isn’t user-facing should be stored in *Application Support*.
    Cached data should be stored in *Caches*.'
  prefs: []
  type: TYPE_NORMAL
- en: tmp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory is for writing and reading temporary files. It is the application’s
    responsibility to clean this directory by deleting unused files. However, the
    system may occasionally purge this directory when the app is not in use.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s nearly impossible to directly construct a URL to a file or directory within
    an application’s data container because of the arcane and opaque path to these
    files. This is intentional on the part of Apple and requires the developer to
    resort to a jack-of-all-trades class for file operations called `FileManager`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access a file named *image.png* in the application’s *Documents* directory,
    for example, a URL could be constructed like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: On a simulator, the direct path to this file is *~/Library/Developer/CoreSimulator/Devices/CF5BCBA7-C7CA-4484-AB54-7BE938D67ECB/data/Containers/Data/Application/313B2DDD-ABDD-4D14-B6CD-85847F29EF2C/Documents/image.png*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the `.documentDirectory` enum value used for targeting a specific directory
    within the app’s data container. The work of trying to determine all of the parent
    directories was done for you using `FileManager`. Additionally, there are a few
    other predefined keys available provided by this class. For example, the path
    for a flat file named *data.json* stored in the application’s *Application Support*
    directory is created as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And, here’s how a path for a file named *download.dat* stored in the temporary
    directory could be created to be accessed later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: File attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the basics of an application’s file structure have been covered, let’s
    take a look at file operations themselves. Remarkably, within the Swift Standard
    Library, they are fairly trivial and typically require only a few lines to complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the *image.png* example for an image included in an application’s main
    bundle, the file size can be obtained directly on the `URL` object created to
    access the file as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The variable `url` is a `URL` object that points to a file named *image* with
    the file extension *png* (i.e., *image.png*) located in the application bundle.
    There is a method on `URL` that synchronously pulls “resource values” (what other
    operating systems might call “file attributes”) for the specified keys. In this
    example, we’ve given the key `.fileSizeKey`, which translates to the file’s size
    on disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Grabbing additional file attributes is possible by including additional keys
    besides the file size key provided. For example, to grab a file’s last modified
    date, the `.contentModificationDateKey` key could be provided instead of `.fileSizeKey`.
    In addition, you can pull both of these attributes at the same time as in the
    example here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Reading and Writing Data to and from a File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are simple convenience methods for reading and writing files provided
    for a few objects within the Foundation framework and Swift Standard Library—notably
    `String` and `Data`. For example, to read a text file named *file.txt* from an
    app’s *Documents* directory into a string object, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Updating the file is similar and requires a call to `write(to:atomically:encoding:)`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There isn’t much different with `Data` objects. These are objects designed
    to provide raw access to byte data separate from a C-style byte array. For example,
    let’s say you had an image file URL; you could read the image into memory and
    write the image to disk as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: All roads lead to FileManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eventually, in the course of writing iOS applications and performing file operations,
    more complex operations will be needed. In those instances, there is a versatile
    class named `FileManager` that provides a shared, thread-safe instance useful
    in complex file operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reading the same *file.txt* using `FileManager` requires some additional logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: One of the first things to note is the use of `file.path`. This converts the
    URL object into a string representation of the file’s absolute path on the filesystem;
    it’s necessary because of an incomplete support for URLs within `FileManager`.
    Next, the `if` `let` statement reads the raw contents of the file into a data
    object. This provides some safety from null values if `FileManager` cannot find
    or access the file requested. Finally, assuming the file is accessible, a string
    is instantiated from the data object using the specified encoding—UTF-8 in this
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing a file is similar. Here is how writing a string directly to a file
    is done with `FileManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The success of the file operation is given with a boolean true or false value
    from `createFile(atPath:contents:attributes:)`. This is in contrast to the more
    modern Swift operator `throws` that operations with `String` and `Data` use directly.
  prefs: []
  type: TYPE_NORMAL
- en: So why would one use `FileManager` when it doesn’t seem to be as modern of an
    API (it’s in the older Foundation framework versus the Swift Standard Library)
    and is slightly more cumbersome compared with `Data` and `String` instance methods?
    The answer lies in the intended purpose of `FileManager`. `FileManager` is great
    when more complex interactions with files and directories need completing. `FileManager`
    is great at inspecting directory hierarchies, providing feedback on the existence
    of files, deleting files, overwriting files, updating file attributes, and a lot
    more. It’s not as great at simple reading and writing of data.
  prefs: []
  type: TYPE_NORMAL
- en: Copy Data from One File to Another
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copying a file with only `String`-provided methods would require reading the
    file into a `String` instance in memory and then writing that `String` into a
    separate file using `write(to:atomically:encoding:)`. This isn’t the most efficient
    way of copying a file and might not be easy with a larger file that exceeds the
    amount of available device memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copying a file within `FileManager` can be accomplished with the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is much more efficient than the first example with `String` because `FileManager`
    doesn’t require the file to be read into memory first before being copied. In
    addition, `FileManager` takes advantage of Apple File System (APFS), Apple’s proprietary
    filesystem, by making a clone of the object, which is an incredibly efficient
    process in comparison.
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty more secrets waiting to be discovered within `FileManager`.
    This is enough to get you started with basic file operations in iOS, however.
    Feel free to check out the Apple-provided documentation to get an idea of all
    the operations possible.
  prefs: []
  type: TYPE_NORMAL
- en: URLs versus strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout the code examples in this chapter, URLs were utilized to provide
    file path information instead of `String` objects. This is because URL objects
    are typically better suited to store path information and can do so internally
    in a more efficient manner. Similarly, they are generally more efficient at mutating,
    or changing, the file path representation by adding directories, changing names,
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some methods provided by `FileManager`, and other Foundation-based APIs, use
    strings instead of URLs. Converting to a string path is provided with URL objects
    with the path variable. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: iCloud and iTunes backups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing we haven’t covered is iCloud file synchronization. Files in iCloud
    are written to like normal files in a user’s *Documents* directory; however, a
    different container is used to target the file directly. All files in a user’s
    *Documents* and *Application* *Support* directories are automatically backed up
    with iCloud and iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible, and recommended, to exclude certain files from iTunes backups
    and iCloud synchronization. For example, a large video file from a web service
    that can be downloaded again in the future might be excluded by setting the file’s
    `isExcludedFromBackupKey` directly from a URL with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might have noticed, files are an interesting intersection between Android
    and iOS. They are, at the same time, wildly different and fundamentally the same.
    At the end of the day, we’re dealing in bits and bytes, but how that data is accessed
    represents two very different paradigms of architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The notion of streams to read and write data in Android is in stark contrast
    with the more procedural and baked-in approach of iOS. Additionally, there are
    remnants of UNIX in iOS that permeate through all the way to its file structure.
  prefs: []
  type: TYPE_NORMAL
- en: We hope this overview of both approaches has given you a starting place from
    which to start understanding how to approach filesystem operations for both platforms.
    In the next chapter, we talk about persisting data beyond files on the filesystem
    and move into the realm of databases and object graphs.
  prefs: []
  type: TYPE_NORMAL
