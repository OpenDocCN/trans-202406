- en: Chapter 6\. Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章 文件
- en: As a developer, you might want to read, write, or inspect a file for any number
    of reasons. For example, you might want to modify an image and save it to disk,
    download a video to your user’s SD card (after determining if one is available),
    or use a simple indexed JSON flat-file database. File handling logic comes up
    frequently in application development, so a good grasp of the fundamentals is
    important for most developers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，您可能因为各种原因想要读取、写入或检查文件。例如，您可能想要修改图像并将其保存到磁盘，将视频下载到用户的 SD 卡（在确定可用后），或者使用简单的索引
    JSON 平面文件数据库。文件处理逻辑在应用程序开发中经常出现，因此大多数开发者都需要对基础知识有很好的掌握。
- en: Tasks
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: 'In this chapter, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习到：
- en: Get properties from a file like size on disk or last modified date.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件获取诸如磁盘上大小或最后修改日期等属性。
- en: Read and write data to and from a file.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件读取和写入数据。
- en: Copy data from one file to another.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据从一个文件复制到另一个文件。
- en: Android
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: In Android, a developer might query the device for the location of an external
    SD on the device, compress a group of files for upload, write XML to track user
    preferences, get bitmaps from assets, read a resource file, or log out events
    in a persistent fashion. Even an SQLite database (the AOSP framework–provided
    database) exists as a single file, so you’d use the same logic to determine its
    size, or make a duplicate for export.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，开发者可能会查询设备上外部 SD 卡的位置，压缩一组文件以进行上传，将 XML 写入以跟踪用户首选项，从资产获取位图，读取资源文件，或以持久方式记录事件。即使是
    SQLite 数据库（由 AOSP 框架提供的数据库）也存在为单个文件，因此您可以使用相同的逻辑确定其大小，或者创建其导出的副本。
- en: Reading and writing files in Java has come a long way, and modern versions of
    the language include streaming APIs, an updated package called `java.nio.file`
    (“nio” means “new input/output”), and some handy helper classes like `Files` and
    `Paths` that offer a variety of approaches to file system access. Unfortunately,
    these are not available to most Android developers, and at the time of this writing,
    only the most recent two versions of the Android OS—about 21% of all Android installations—had
    support for the `java.nio.file` package. Streaming APIs and the `Files` helper
    class are not available in any version of Android at this time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中读写文件已经发展了很长一段时间，现代版本的语言包括流式 API，更新的 `java.nio.file` 包（“nio”表示“新输入/输出”），以及像
    `Files` 和 `Paths` 这样的便利的帮助类，提供了多种文件系统访问方法。不幸的是，这些对大多数 Android 开发者并不可用。截至撰写本文时，只有最近的两个
    Android OS 版本（大约占所有 Android 安装的 21%）支持 `java.nio.file` 包。流式 API 和 `Files` 帮助类在任何
    Android 版本中目前都不可用。
- en: But fear not! With a little ingenuity we can leverage existing frameworks and
    standard library APIs to do pretty much everything we need to do. The package
    we’ll be using most is `java.io` (you guessed it…"input and output”), and one
    of the classes we’ll be using frequently is `java.io.File`. A `File` instance
    is an abstract representation of a location on the local file system. Note that
    a `File` instance represents either a file or a directory; APIs like `isDirectory`
    or `isFile` exist to differentiate them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要担心！通过一点创造力，我们可以利用现有的框架和标准库 API 来完成几乎我们需要做的一切。我们将主要使用的包是 `java.io`（您猜对了...“输入和输出”），并且我们将经常使用的类之一是
    `java.io.File`。`File` 实例是本地文件系统上位置的抽象表示。请注意，`File` 实例表示文件或目录；存在像 `isDirectory`
    或 `isFile` 这样的 API 来区分它们。
- en: 'To get a reference to an existing file, you can pass the path to a `File` constructor:
    `File file = new File("path/to/file.ext");`. In Android applications, it’s likely
    the file system will be restricted, and your app will be assigned a special directory
    on the device that you’ll be given read and write privileges to—you can get this
    directory by calling `getFilesDir()` on any `Context` instance, which will return
    an already constructed `File` instance representing that directory the system
    has created for your app. So, in an Android application, you can create a new
    file by passing that directory as the root:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取对现有文件的引用，可以将路径传递给 `File` 构造函数：`File file = new File("path/to/file.ext");`。在
    Android 应用程序中，文件系统可能会受到限制，并且您的应用程序将被分配一个特殊的目录在设备上，您将获得对其读写权限——您可以通过在任何 `Context`
    实例上调用 `getFilesDir()` 来获取该目录，这将返回一个表示系统为您的应用程序创建的该目录的已构造的 `File` 实例。因此，在 Android
    应用程序中，您可以通过将该目录作为根传递来创建一个新文件：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the file does not exist, you’ll need to create it: `file.createNewFile();`.
    Make sure the path exists as well; you can do that by calling `file.getParentFile().mkdirs()`,
    which will create any number of directories between the root and the highest-level
    directory in the path. That’s to say that, using the preceding example, `file.mkdirs()`
    will create a folder called “path” and then inside that another folder called
    “to.” Note the plural; `file.mkdir()` will only create the single directory specified
    by the `File` instance.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不存在，您需要创建它：`file.createNewFile();`。确保路径也存在；您可以通过调用`file.getParentFile().mkdirs()`来实现这一点，这将在根目录和路径中的最高级目录之间创建任意数量的目录。也就是说，使用前述示例，`file.mkdirs()`将创建一个名为“path”的文件夹，然后在其中再创建一个名为“to”的文件夹。请注意复数形式；`file.mkdir()`只会创建由`File`实例指定的单个目录。
- en: Get Properties from the File Like Size or Last Modified Date
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取文件的属性，比如大小或最后修改日期。
- en: 'So, now that you have a handle on a `File` instance, you can read data from
    it, write data to it, or inspect its properties, like size or modified date:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在您拥有了一个`File`实例的句柄，您可以从中读取数据，向其中写入数据，或检查其属性，比如大小或修改日期：
- en: Read and Write Data to and from a File
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件中读取和写入数据。
- en: 'While you might immediately think about how to write a `String` to a `File`,
    this is actually not the default operation in Java and Android—consider binary
    files like images, audio and video, and compressed files like ZIPs and TARs. While
    there are APIs for reading and writing the `Strings` directory to and from `File`
    instances, like `FileReader` and `FileWriter`, that offer simplified operations
    for `String` reading and writing, we’re going to concentrate on Java’s foundational
    pattern when it comes to reading and writing data: byte streams. The benefit of
    relying on byte-level data is that the same operation can be used for anything:
    writing text files, streaming multimedia, downloading images, etc.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当您立即考虑如何将`String`写入`File`时，这实际上不是Java和Android中的默认操作 —— 考虑到像图像、音频和视频这样的二进制文件，以及像ZIP和TAR这样的压缩文件。虽然有用于从`File`实例读取和写入`Strings`目录的API，如`FileReader`和`FileWriter`，它们提供了简化的`String`读取和写入操作，但我们将集中在Java在读取和写入数据时的基本模式上：字节流。依赖于字节级数据的好处在于，相同的操作可以用于任何事物：写文本文件、流式传输多媒体、下载图像等。
- en: Don’t be intimidated! Everything in your program is already represented by bytes
    at some level, and we can pretty easily get access to that information with existing
    APIs in the standard library. For example, we could get the bytes from a `String`
    simply by calling `getBytes()` on that `String` instance—no sweat.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不要感到害怕！您的程序中的每样东西都已经在某个层面上以字节的形式表示了，我们可以通过标准库中的现有API轻松地访问这些信息。例如，我们可以通过在`String`实例上调用`getBytes()`来从`String`中获取字节
    —— 这一点很简单。
- en: 'That said, you might be surprised to learn that there are no specific `write`
    or `read` methods on the `java.io.File` class, and in fact the process of reading
    and writing requires another intermediary facilitator class: a stream (an instance
    of an `InputStream` or `OutputStream`, or a subclass, as appropriate). The concept
    of a stream in Java is simply a piece of data that can be read sequentially, from
    start to finish. The advantage of this approach is that we don’t need to have
    all of the information in memory at once. In fact, the object itself might not
    even have a discernible end! For example, we might want to play video from a live
    source; using a stream, we just read bytes in as they arrive and buffer or display
    them as appropriate to our program.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，您可能会惊讶地发现，在`java.io.File`类上没有特定的`write`或`read`方法，事实上，读取和写入的过程需要另一个中介类：流（即`InputStream`或`OutputStream`的实例，或者适当的子类）。在Java中，流的概念简单地说就是一段可以按顺序读取的数据，从头到尾。这种方法的优点在于，我们不需要一次性将所有信息都存储在内存中。事实上，对象本身甚至可能没有明显的结束！例如，我们可能希望从实时源播放视频；使用流，我们只需按照它们的到达顺序读取字节，并根据需要缓冲或显示它们到我们的程序中。
- en: 'But let’s get back to our practical example. We’ll start by writing to a file.
    Unsurprisingly, you’ll need an instance of a `FileOutputStream` to do that. You
    can get an instance of a `FileOutputStream` by invoking the constructor and passing
    the `File` instance you’ve already got a reference to: `OutputStream outputStream`
    `=` `new FileOutputStream(file);`. The `write` method of `FileOutputStream` has
    a few different signatures, but let’s stick with one in the pattern of our conversation
    so far: `write(byte[] bytes)`. Just pass an array of bytes as the only argument,
    and those bytes will be written to the `File` instance referenced by the `FileOutputStream`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们回到我们的实际例子。我们将从写入文件开始。毫不意外，您需要一个`FileOutputStream`的实例来完成这项任务。您可以通过调用构造函数并传递您已经引用的`File`实例来获得`FileOutputStream`的实例：`OutputStream
    outputStream = new FileOutputStream(file);`。`FileOutputStream`的`write`方法有几种不同的签名，但让我们继续使用到目前为止我们对话的模式中的一个：`write(byte[]
    bytes)`。只需将一个字节数组作为唯一参数传递，这些字节将被写入由`FileOutputStream`引用的`File`实例。
- en: 'So, if we wanted to write some text to the file, we could do something like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想要向文件写入一些文本，我们可以这样做：
- en: 'Voila! You’ve just written “Hello world!” to your file! Of course, as with
    most things Java and Android, there’s a number of caveats that make this fairly
    straightforward concept a little clunkier. For example, the `FileOutputStream`
    constructor throws a `FileNotFoundException`, and the `write` method throws an
    `IOException`. Further, we have to make sure the stream is closed when we’re done
    with it, which itself throws an `IOException`. While the fully expressed block
    to do all of this work can be a little hard to follow, we can wrap it all in a
    method with a checked exception and reduce the line count a bit:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！您刚刚向文件写入了“Hello world！”当然，就像大多数Java和Android一样，这个相对简单的概念有一些陷阱。例如，`FileOutputStream`构造函数抛出一个`FileNotFoundException`，`write`方法抛出一个`IOException`。此外，我们必须确保在完成时关闭流，这本身会抛出一个`IOException`。虽然完整表达所有这些工作的块可能有点难以理解，但我们可以将其全部封装在一个带有检查异常的方法中，并减少一些代码行数：
- en: 'And you could use it like so:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像这样使用它：
- en: Reading data from files follows a very similar pattern. As you may have guessed,
    we’ll be using a `FileInputStream` instead of a `FileOutputStream`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中读取数据遵循非常类似的模式。正如你可能已经猜到的那样，我们将使用`FileInputStream`而不是`FileOutputStream`。
- en: Again, since we’re thinking in terms of binary data, we’ll need to do a little
    more work to get the file contents as human-readable text. If you’re regularly
    reading and writing plain-text files, there are simpler approaches like `FileWriter`
    and `FileReader`, but as stated, using byte streams is a universal solution, and
    converting to a `String` is trivial.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，由于我们是按照二进制数据来思考的，我们需要做更多的工作才能将文件内容转换为人类可读的文本。如果您经常读写纯文本文件，有更简单的方法，如`FileWriter`和`FileReader`，但如前所述，使用字节流是一种通用的解决方案，而将其转换为`String`则是微不足道的。
- en: 'Similar to `FileOutputStream`, the `FileInputStream` constructor will also
    accept a `File` parameter: `InputStream inputStream = new FileInputStream(file);`.
    Once that’s been instantiated, you can read single bytes with the plain `read()`
    signature, or large blocks by passing in a byte array buffer. We’ll talk about
    the single-byte simple `read()` method now, but keep in mind that using buffers
    is generally more efficient, especially for large files.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`FileOutputStream`，`FileInputStream`构造函数也将接受一个`File`参数：`InputStream inputStream
    = new FileInputStream(file);`。一旦实例化了，您可以使用普通的`read()`签名读取单个字节，或者通过传递字节数组缓冲区来读取大块数据。现在我们将讨论单字节简单的`read()`方法，但请记住，使用缓冲区通常更高效，特别是对于大文件。
- en: 'The `read` method returns an `int`, which is a representation of either the
    number of bytes read, or -1 to signify the end of the file (and stream). You can
    cast this to a `char` to build up the `String` representation of the file’s content:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`方法返回一个`int`，它表示读取的字节数，或者返回-1表示文件（和流）的结尾。您可以将其转换为`char`以构建文件内容的`String`表示：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Again, several of these methods `throw` checked exceptions, and again we need
    to close the stream when we’re done with it, so it can be useful to wrap this
    all up in a single checked method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，其中几种方法会抛出检查异常，而且我们再次需要在完成时关闭流，因此将所有内容封装在一个单独的检查方法中可能是有用的：
- en: 'Since there are other stream sources besides `FileInputStream`, you may consider
    abstracting the method to convert a stream to a string, like so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`FileInputStream`之外，还有其他流源，您可能考虑将转换流到字符串的方法抽象化，如下所示：
- en: Copy Data from One File to Another
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制数据从一个文件到另一个文件。
- en: 'You can see how we might easily combine these two operations to copy any file,
    be it a simple text file or a gig worth of video! Since we neither know nor care
    if it’s a text file or a binary file, we don’t have to do any convolutions around
    casting `Character` instances or pulling bytes from a `String`—by keeping our
    logic agnostic, you can see how this operation is actually one of the most readable:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们如何轻松地将这两个操作结合起来，复制任何文件，无论是简单的文本文件还是价值一千兆字节的视频！由于我们既不知道也不关心它是文本文件还是二进制文件，我们不必围绕将`Character`实例转换或从`String`中提取字节而进行任何复杂操作——通过保持我们的逻辑不可知，您可以看到这个操作实际上是最可读的之一：
- en: Warning
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: We have used the `InputStream.read` method in these examples for clarity. This
    method returns a single byte per invocation. You’ll be able to get much improved
    performance writing chunks of bytes into sized byte arrays generally known as
    “buffers.” `InputStream` has `read` methods for these buffers, and `OutputStream`
    has `write` methods for them as well.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这些示例中使用了`InputStream.read`方法以确保清晰。该方法每次调用返回一个字节。你可以通过将字节块写入通常称为“缓冲区”的大小字节数组来获得更好的性能。`InputStream`有用于这些缓冲区的`read`方法，`OutputStream`也有用于它们的`write`方法。
- en: That’s it! Now you’ve got the tools you need to read and write to the filesystem
    in an Android app. Be sure to check out the `File` API in the dev docs for more!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在您已经拥有在Android应用程序中读写文件所需的工具。务必查看开发文档中的`File`API以获取更多信息！
- en: Note
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Apache Commons Java library has a well-known and well-regarded file and
    input/output module `apache.commons.io`. Of particular use are the `IOUtils` and
    `FileUtils` helper classes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons Java库有一个众所周知且备受推崇的文件和输入/输出模块`apache.commons.io`。特别有用的是`IOUtils`和`FileUtils`辅助类。
- en: iOS
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: In iOS, file operations drive a lot of the underpinnings of some very powerful
    technologies. Eventually, in any sufficiently complex application, a use case
    will arise that will require reading and writing files on the filesystem. Due
    to the sandboxed nature of iOS, there is a little bit of prerequisite knowledge
    on how data is organized necessary to get started working with files.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS中，文件操作驱动了一些非常强大技术的基础。最终，在任何足够复杂的应用程序中，都会出现需要在文件系统上读写文件的用例。由于iOS的沙盒性质，有一些关于数据组织方式的先决知识是必要的，才能开始处理文件。
- en: Get Properties from the File Like Size or Last Modified Date
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件中获取大小或上次修改日期等属性
- en: 'There are really two main areas of focus where file access is allowed: the
    application bundle container and the app’s data container. Let’s start with the
    application bundle container.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，文件访问允许的主要领域有两个：应用程序包容器和应用程序数据容器。让我们从应用程序包容器开始。
- en: App bundles
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序包
- en: The app bundle includes the application binary and all resources compiled and
    delivered with the app. On installation, this directory is code-signed to provide
    protection from tampering. Because of this, it’s not possible to change the files
    inside the app bundle or write to the directory (more on that follows).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序包包括应用程序二进制文件以及与应用程序一起编译和交付的所有资源。在安装时，该目录经过代码签名以防止篡改。因此，不可能更改应用程序包内的文件或写入该目录（后文详述）。
- en: 'Access to files within the app bundle is provided via the `Bundle` class in
    Swift. An app can have multiple bundles via frameworks, so targeting the application
    bundle is done with the `main` class variable. In order to access a file named
    *image.png* a file URL is created as shown here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Swift中的`Bundle`类提供对应用程序包中文件的访问。一个应用程序可以通过框架拥有多个包，因此通过`main`类变量来定位应用程序包。为了访问名为*image.png*的文件，需要创建文件URL，如下所示：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If that file were in a subdirectory named *sample-images*, the variable would
    be instantiated like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该文件位于名为*sample-images*的子目录中，则变量将被实例化如下：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Data (and documents)
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据（和文档）
- en: 'Using static and unchangeable files from the application bundle quickly becomes
    limiting. Eventually the need will arise to read and write user-generated documents
    and data. There is a set of three directories created for each application that
    is installed within iOS:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序包中使用静态且不可更改的文件很快变得受限。最终，将会出现需要读取和写入用户生成的文档和数据的需求。为每个安装在iOS中的应用程序创建了一组三个目录：
- en: Documents
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档
- en: Library
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: tmp
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时
- en: Each of these directories serves a specific purpose as detailed in the following
    sections.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个目录都有特定的用途，如以下各节所述。
- en: Documents
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档
- en: User-generated content and files that will require access by the user should
    go here. These files are backed up in iTunes and iCloud by default. File sharing
    can also be enabled for the app to let users interact with these files directly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 用户生成的内容和需要用户访问的文件应存放在这里。这些文件默认会通过iTunes和iCloud进行备份。应用程序还可以启用文件共享，让用户直接与这些文件交互。
- en: Library
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Library
- en: 'Within the application’s *Library* folder, there are a few predefined directories
    where additional files are typically placed. Two of the most important of these
    are: *Application Support* and *Caches*. Data that needs to be persisted for use
    in the future but isn’t user-facing should be stored in *Application Support*.
    Cached data should be stored in *Caches*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的*Library*文件夹中，通常有一些预定义的目录，用于放置额外的文件。其中两个最重要的目录是：*Application Support*
    和 *Caches*。需要持久保存以备将来使用但不向用户显示的数据应存储在*Application Support*中。缓存数据应存储在*Caches*中。
- en: tmp
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tmp
- en: This directory is for writing and reading temporary files. It is the application’s
    responsibility to clean this directory by deleting unused files. However, the
    system may occasionally purge this directory when the app is not in use.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录用于写入和读取临时文件。应用程序有责任通过删除未使用的文件来清理此目录。但是，在应用程序不使用时，系统偶尔可能会清理此目录。
- en: Accessing directories
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问目录
- en: It’s nearly impossible to directly construct a URL to a file or directory within
    an application’s data container because of the arcane and opaque path to these
    files. This is intentional on the part of Apple and requires the developer to
    resort to a jack-of-all-trades class for file operations called `FileManager`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎不可能直接构建指向应用程序数据容器内文件或目录的URL，因为这些文件的路径复杂且不透明。这是苹果故意设计的，需要开发者使用称为`FileManager`的通用文件操作类。
- en: 'To access a file named *image.png* in the application’s *Documents* directory,
    for example, a URL could be constructed like so:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要访问应用程序的*Documents*目录中名为*image.png*的文件，可以构造如下的URL：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On a simulator, the direct path to this file is *~/Library/Developer/CoreSimulator/Devices/CF5BCBA7-C7CA-4484-AB54-7BE938D67ECB/data/Containers/Data/Application/313B2DDD-ABDD-4D14-B6CD-85847F29EF2C/Documents/image.png*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器上，访问此文件的直接路径是*~/Library/Developer/CoreSimulator/Devices/CF5BCBA7-C7CA-4484-AB54-7BE938D67ECB/data/Containers/Data/Application/313B2DDD-ABDD-4D14-B6CD-85847F29EF2C/Documents/image.png*。
- en: 'Notice the `.documentDirectory` enum value used for targeting a specific directory
    within the app’s data container. The work of trying to determine all of the parent
    directories was done for you using `FileManager`. Additionally, there are a few
    other predefined keys available provided by this class. For example, the path
    for a flat file named *data.json* stored in the application’s *Application Support*
    directory is created as shown:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`.documentDirectory`枚举值来定位应用程序数据容器内特定目录的直接路径。使用`FileManager`已为您完成了查找所有父目录的工作。此类还提供了几个其他预定义键。例如，存储在应用程序的*Application
    Support*目录中名为*data.json*的平面文件的路径如下所示：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And, here’s how a path for a file named *download.dat* stored in the temporary
    directory could be created to be accessed later on:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了如何创建临时目录中稍后访问的文件*download.dat*的路径：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: File attributes
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件属性
- en: Now that the basics of an application’s file structure have been covered, let’s
    take a look at file operations themselves. Remarkably, within the Swift Standard
    Library, they are fairly trivial and typically require only a few lines to complete.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经介绍了应用程序文件结构的基础知识，让我们来看看文件操作本身。值得注意的是，在Swift标准库中，这些操作非常简单，通常只需要几行代码即可完成。
- en: 'Using the *image.png* example for an image included in an application’s main
    bundle, the file size can be obtained directly on the `URL` object created to
    access the file as shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*image.png*作为应用程序主包中包含的图像的示例，可以直接在访问文件的`URL`对象上获取文件大小，如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The variable `url` is a `URL` object that points to a file named *image* with
    the file extension *png* (i.e., *image.png*) located in the application bundle.
    There is a method on `URL` that synchronously pulls “resource values” (what other
    operating systems might call “file attributes”) for the specified keys. In this
    example, we’ve given the key `.fileSizeKey`, which translates to the file’s size
    on disk.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`url`是一个指向应用程序包中文件名为*image*且文件扩展名为*png*（即*image.png*）的`URL`对象。有一个在`URL`上的同步方法可以提取指定键的“资源值”（其他操作系统可能称为“文件属性”）。在这个例子中，我们提供了`.fileSizeKey`键，它对应文件在磁盘上的大小。
- en: 'Grabbing additional file attributes is possible by including additional keys
    besides the file size key provided. For example, to grab a file’s last modified
    date, the `.contentModificationDateKey` key could be provided instead of `.fileSizeKey`.
    In addition, you can pull both of these attributes at the same time as in the
    example here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含除文件大小键外的其他键，可以获取附加的文件属性。例如，要获取文件的最后修改日期，可以提供`.contentModificationDateKey`键，而不是`.fileSizeKey`。此外，您可以像这个示例中一样同时获取这两个属性：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Reading and Writing Data to and from a File
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件读取和写入数据
- en: 'There are simple convenience methods for reading and writing files provided
    for a few objects within the Foundation framework and Swift Standard Library—notably
    `String` and `Data`. For example, to read a text file named *file.txt* from an
    app’s *Documents* directory into a string object, use the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation框架和Swift标准库中提供了几个对象的简单便利方法来读取和写入文件，尤其是`String`和`Data`。例如，要从应用程序的*Documents*目录中读取名为*file.txt*的文本文件并将其转换为字符串对象，请使用以下代码：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Updating the file is similar and requires a call to `write(to:atomically:encoding:)`
    as shown here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 更新文件类似，需要调用`write(to:atomically:encoding:)`，如下所示：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There isn’t much different with `Data` objects. These are objects designed
    to provide raw access to byte data separate from a C-style byte array. For example,
    let’s say you had an image file URL; you could read the image into memory and
    write the image to disk as shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Data`对象并没有太大区别。这些对象旨在提供与C风格字节数组分离的原始字节数据访问。例如，假设您有一个图像文件的URL；您可以将图像读入内存，并像此处所示将图像写入磁盘：'
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All roads lead to FileManager
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所有的道路都通向文件管理器。
- en: Eventually, in the course of writing iOS applications and performing file operations,
    more complex operations will be needed. In those instances, there is a versatile
    class named `FileManager` that provides a shared, thread-safe instance useful
    in complex file operations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在编写iOS应用程序和执行文件操作的过程中，将需要更复杂的操作。在这些情况下，有一个名为`FileManager`的多用途类可提供一个共享的、线程安全的实例，非常适用于复杂的文件操作。
- en: 'Reading the same *file.txt* using `FileManager` requires some additional logic:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`FileManager`读取相同的*file.txt*文件需要一些额外的逻辑：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: One of the first things to note is the use of `file.path`. This converts the
    URL object into a string representation of the file’s absolute path on the filesystem;
    it’s necessary because of an incomplete support for URLs within `FileManager`.
    Next, the `if` `let` statement reads the raw contents of the file into a data
    object. This provides some safety from null values if `FileManager` cannot find
    or access the file requested. Finally, assuming the file is accessible, a string
    is instantiated from the data object using the specified encoding—UTF-8 in this
    example.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的一点是使用`file.path`。这将URL对象转换为文件系统中文件的绝对路径的字符串表示；这是必需的，因为`FileManager`对URL的支持不完整。接下来，`if
    let`语句将文件的原始内容读入数据对象中。如果`FileManager`无法找到或访问所请求的文件，则提供了一些防止空值的安全性。最后，在本示例中，假设文件是可访问的，使用指定的编码（UTF-8）从数据对象中实例化字符串。
- en: 'Writing a file is similar. Here is how writing a string directly to a file
    is done with `FileManager`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 写入文件类似。以下是如何直接使用`FileManager`将字符串写入文件的示例：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The success of the file operation is given with a boolean true or false value
    from `createFile(atPath:contents:attributes:)`. This is in contrast to the more
    modern Swift operator `throws` that operations with `String` and `Data` use directly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 文件操作的成功与否通过`createFile(atPath:contents:attributes:)`返回布尔值true或false来表示。这与使用`String`和`Data`直接使用的更现代的Swift操作符`throws`形成对比。
- en: So why would one use `FileManager` when it doesn’t seem to be as modern of an
    API (it’s in the older Foundation framework versus the Swift Standard Library)
    and is slightly more cumbersome compared with `Data` and `String` instance methods?
    The answer lies in the intended purpose of `FileManager`. `FileManager` is great
    when more complex interactions with files and directories need completing. `FileManager`
    is great at inspecting directory hierarchies, providing feedback on the existence
    of files, deleting files, overwriting files, updating file attributes, and a lot
    more. It’s not as great at simple reading and writing of data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么在看起来不像是现代API（它位于旧版Foundation框架而不是Swift标准库中）且稍微比`Data`和`String`实例方法更繁琐时，还要使用`FileManager`呢？答案在于`FileManager`的预期用途。当需要完成与文件和目录的更复杂交互时，`FileManager`非常出色。`FileManager`擅长检查目录层次结构，提供有关文件存在性的反馈，删除文件，覆盖文件，更新文件属性等等。但在简单的数据读写方面则表现得不如其他API。
- en: Copy Data from One File to Another
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据从一个文件复制到另一个文件
- en: Copying a file with only `String`-provided methods would require reading the
    file into a `String` instance in memory and then writing that `String` into a
    separate file using `write(to:atomically:encoding:)`. This isn’t the most efficient
    way of copying a file and might not be easy with a larger file that exceeds the
    amount of available device memory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用仅提供`String`方法复制文件将需要将文件读入内存中的`String`实例，然后使用`write(to:atomically:encoding:)`将该字符串写入到另一个文件中。这不是复制文件的最有效方式，对于超过设备可用内存量的较大文件可能不容易实现。
- en: 'Copying a file within `FileManager` can be accomplished with the following
    code snippet:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码片段可以在`FileManager`中完成文件复制：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is much more efficient than the first example with `String` because `FileManager`
    doesn’t require the file to be read into memory first before being copied. In
    addition, `FileManager` takes advantage of Apple File System (APFS), Apple’s proprietary
    filesystem, by making a clone of the object, which is an incredibly efficient
    process in comparison.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用`String`的第一个例子相比，这要高效得多，因为`FileManager`在复制文件之前不需要将文件先读入内存。此外，`FileManager`利用了Apple
    File System (APFS)，这是苹果的专有文件系统，通过制作对象的克隆来进行高效的复制过程。
- en: There are plenty more secrets waiting to be discovered within `FileManager`.
    This is enough to get you started with basic file operations in iOS, however.
    Feel free to check out the Apple-provided documentation to get an idea of all
    the operations possible.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`FileManager`中还有更多等待发现的秘密。不过，这已足以让你开始iOS中的基本文件操作。请随时查阅苹果提供的文档，了解所有可能的操作。
- en: URLs versus strings
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: URL与字符串的比较
- en: Throughout the code examples in this chapter, URLs were utilized to provide
    file path information instead of `String` objects. This is because URL objects
    are typically better suited to store path information and can do so internally
    in a more efficient manner. Similarly, they are generally more efficient at mutating,
    or changing, the file path representation by adding directories, changing names,
    and much more.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例中，使用URL来提供文件路径信息，而不是`String`对象。这是因为URL对象通常更适合内部高效地存储路径信息。类似地，它们在通过添加目录、更改名称等方式改变文件路径表示时通常更高效。
- en: 'Some methods provided by `FileManager`, and other Foundation-based APIs, use
    strings instead of URLs. Converting to a string path is provided with URL objects
    with the path variable. For example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一些由`FileManager`和其他基于Foundation的API提供的方法使用字符串而不是URL。使用URL对象的路径变量可以将其转换为字符串路径。例如：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: iCloud and iTunes backups
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iCloud和iTunes备份
- en: One thing we haven’t covered is iCloud file synchronization. Files in iCloud
    are written to like normal files in a user’s *Documents* directory; however, a
    different container is used to target the file directly. All files in a user’s
    *Documents* and *Application* *Support* directories are automatically backed up
    with iCloud and iTunes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未涵盖的一件事是iCloud文件同步。iCloud中的文件与用户*Documents*目录中的普通文件类似；然而，使用不同的容器来直接定位文件。用户*Documents*和*Application*
    *Support*目录中的所有文件都会自动备份到iCloud和iTunes中。
- en: 'It’s possible, and recommended, to exclude certain files from iTunes backups
    and iCloud synchronization. For example, a large video file from a web service
    that can be downloaded again in the future might be excluded by setting the file’s
    `isExcludedFromBackupKey` directly from a URL with the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以并且建议从iTunes备份和iCloud同步中排除某些文件。例如，可以通过以下代码直接从URL设置文件的`isExcludedFromBackupKey`来排除未来可以重新下载的来自网络服务的大型视频文件：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What We’ve Learned
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们学到了什么
- en: As you might have noticed, files are an interesting intersection between Android
    and iOS. They are, at the same time, wildly different and fundamentally the same.
    At the end of the day, we’re dealing in bits and bytes, but how that data is accessed
    represents two very different paradigms of architecture.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，文件在Android和iOS之间是一个有趣的交集。它们同时又是截然不同但又根本相同的。归根结底，我们处理的是比特和字节，但数据访问的方式代表了两种非常不同的架构范式。
- en: The notion of streams to read and write data in Android is in stark contrast
    with the more procedural and baked-in approach of iOS. Additionally, there are
    remnants of UNIX in iOS that permeate through all the way to its file structure.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，使用流来读写数据与iOS更加程序化和内置的方法形成鲜明对比。此外，iOS中还残留着UNIX的痕迹，贯穿其整个文件结构。
- en: We hope this overview of both approaches has given you a starting place from
    which to start understanding how to approach filesystem operations for both platforms.
    In the next chapter, we talk about persisting data beyond files on the filesystem
    and move into the realm of databases and object graphs.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这两种方法的概述为你提供了一个起点，让你开始理解如何处理两个平台的文件系统操作。在下一章中，我们将讨论如何将数据持久化超越文件系统，进入数据库和对象图的领域。
