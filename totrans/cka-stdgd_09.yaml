- en: Answers to Review Questions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题的答案
- en: Chapter 2, “Cluster Architecture, Installation, and Configuration”
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章，“集群架构、安装和配置”
- en: 'First, create the namespace named `apps`. Then, we’ll create the ServiceAccount:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建名为`apps`的命名空间。然后，我们将创建ServiceAccount：
- en: '[PRE0]'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can use the declarative approach. Create the namespace from
    the definition in the file `apps-namespace.yaml`:'
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，您可以使用声明性方法。从文件`apps-namespace.yaml`中的定义创建命名空间：
- en: '[PRE1]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the namespace from the YAML file:'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从YAML文件创建命名空间：
- en: '[PRE2]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new YAML file called `api-serviceaccount.yaml` with the following
    contents:'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下内容创建名为`api-serviceaccount.yaml`的新YAML文件：
- en: '[PRE3]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the `create` command to instantiate the ServiceAccount from the YAML file:'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行`create`命令从YAML文件实例化ServiceAccount：
- en: '[PRE4]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Use the `create clusterrole` command to create the ClusterRole imperatively:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`create clusterrole`命令以命令方式创建ClusterRole：
- en: '[PRE5]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you’d rather start with the YAML file, use content shown in the file `api-clusterrole.yaml`:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您更喜欢从YAML文件开始，请使用文件`api-clusterrole.yaml`中显示的内容：
- en: '[PRE6]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create the ClusterRole from the YAML file:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从YAML文件创建ClusterRole：
- en: '[PRE7]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Use the `create clusterrolebinding` command to create the ClusterRoleBinding
    imperatively.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`create clusterrolebinding`命令以命令方式创建ClusterRoleBinding。
- en: '[PRE8]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The declarative approach of the ClusterRoleBinding could look like the one
    in the file `api-clusterrolebinding.yaml`:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClusterRoleBinding的声明性方法可能类似于文件`api-clusterrolebinding.yaml`中的方法：
- en: '[PRE9]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the ClusterRoleBinding from the YAML file:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从YAML文件创建ClusterRoleBinding：
- en: '[PRE10]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Execute the `run` command to create the Pods in the different namespaces. You
    will need to create the namespace `rm` before you can instantiate the Pod `disposable`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`run`命令在不同的命名空间中创建Pods。您需要在实例化Pod`disposable`之前创建`rm`命名空间：
- en: '[PRE11]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following YAML manifest shows the `rm` namespace definition stored in the
    file `rm-namespace.yaml`:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下YAML清单显示了存储在文件`rm-namespace.yaml`中的`rm`命名空间定义：
- en: '[PRE12]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The YAML representation of those Pods stored in the file `api-pods.yaml` could
    look as follows:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储在文件`api-pods.yaml`中的这些Pod的YAML表示如下所示：
- en: '[PRE13]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the namespace and Pods from the YAML files:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从YAML文件创建命名空间和Pods：
- en: '[PRE14]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Determine the API server endpoint and the Secret access token of the ServiceAccount.
    You will need this information for making the API calls:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定ServiceAccount的API服务器端点和Secret访问令牌。您将需要这些信息来进行API调用：
- en: '[PRE15]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open an interactive shell to the Pod named `operator`:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开名为`operator`的Pod的交互式Shell：
- en: '[PRE16]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Emit API calls for listing all Pods and deleting the Pod `disposable` living
    in the `rm` namespace. You will find that while the `list` operation is permitted,
    the `delete` operation isn’t:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发出API调用以列出所有在`rm`命名空间中生存的Pods并删除Pod`disposable`。您会发现虽然`list`操作被允许，但`delete`操作不被允许：
- en: '[PRE17]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The solution to this sample exercise requires a lot of manual steps. The following
    commands do not render their output.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决此示例练习需要许多手动步骤。以下命令不会输出它们的结果。
- en: 'Open an interactive shell to the control plane node using Vagrant:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Vagrant打开控制平面节点的交互式Shell：
- en: '[PRE18]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Upgrade `kubeadm` to version 1.21.2 and apply it:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 升级`kubeadm`到版本1.21.2并应用它：
- en: '[PRE19]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Drain the node, upgrade the kubelet and `kubectl`, restart the kubelet, and
    uncordon the node:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 驱逐节点，升级kubelet和`kubectl`，重新启动kubelet，并取消节点的禁用状态：
- en: '[PRE20]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The version of the node should now say v1.21.2\. Exit the node:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 节点的版本现在应该显示为v1.21.2。退出节点：
- en: '[PRE21]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open an interactive shell to the first worker node using Vagrant. Repeat all
    of the following steps for the other worker nodes:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Vagrant打开第一个工作节点的交互式Shell。对其他工作节点重复所有以下步骤：
- en: '[PRE22]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Upgrade `kubeadm` to version 1.21.2 and apply it to the node:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 升级`kubeadm`到版本1.21.2，并将其应用到节点：
- en: '[PRE23]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Drain the node, upgrade the kubelet and `kubectl`, restart the kubelet, and
    uncordon the node:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 驱逐节点，升级kubelet和`kubectl`，重新启动kubelet，并取消节点的禁用状态：
- en: '[PRE24]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The version of the node should now say v1.21.2\. Exit the node:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 节点的版本现在应该显示为v1.21.2。退出节点：
- en: '[PRE25]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The solution to this sample exercise requires a lot of manual steps. The following
    commands do not render their output.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决此示例练习需要许多手动步骤。以下命令不会输出它们的结果。
- en: 'Open an interactive shell to the control plane node using Vagrant. That’s not
    with the `etcdctl` command-line tool installed:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Vagrant打开控制平面节点的交互式Shell。这并非使用`etcdctl`命令行工具安装：
- en: '[PRE26]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Determine the parameters of the Pod `etcd-k8s-control-plane` by describing
    it. Use the correct parameter values to create a snapshot file:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过描述它来确定Pod`etcd-k8s-control-plane`的参数。使用正确的参数值创建快照文件：
- en: '[PRE27]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Restore the backup from the snapshot file. Edit the etcd YAML manifest and
    change the value of `spec.volumes.hostPath.path` for the volume named `etcd-data`:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从快照文件恢复备份。编辑etcd YAML清单，并为名为`etcd-data`的卷的`spec.volumes.hostPath.path`值进行更改：
- en: '[PRE28]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After a short while, the Pod `etcd-k8s-control-plane` should transition back
    into the “Running” status. Exit the node:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过一段时间后，Pod `etcd-k8s-control-plane`应该会恢复到“Running”状态。退出节点：
- en: '[PRE29]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Chapter 3, “Workloads”
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章，“工作负载”
- en: 'First, create the Deployment named `nginx`. Use the imperative approach for
    the fastest turnaround time:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建名为`nginx`的部署。使用最直接的方法来实现最快的反应时间：
- en: '[PRE30]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `scale` command increases the number of replicas to 7\. The `get` command
    should render seven Pods with the Deployment’s name as the prefix in their names:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`scale`命令将副本数量增加到7。`get`命令应该呈现出具有部署名称作为其名称前缀的七个Pod：'
- en: '[PRE31]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The API version of a Horizontal Pod Autoscaler that currently supports defining
    CPU and memory utilization thresholds is `autoscaling/v2beta2`. The following
    YAML manifest specifies the autoscaling parameters in the file `hpa.yaml`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前支持定义CPU和内存利用率阈值的Horizontal Pod Autoscaler的API版本是`autoscaling/v2beta2`。以下的YAML清单在文件`hpa.yaml`中指定了自动扩展的参数：
- en: '[PRE32]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create the Horizontal Pod Autoscaler with the `create` command:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`create`命令创建Horizontal Pod Autoscaler：
- en: '[PRE33]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can either manually change the image name by editing the live object via
    the `edit` command or use the `set image` command as a shortcut. Use the `--record`
    option so that the command is recorded as the change cause:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过使用`edit`命令手动更改镜像名称，或者使用`set image`命令作为快捷方式。使用`--record`选项记录命令作为更改原因：
- en: '[PRE34]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The rollout history will show two revisions, the starting revision 1 and the
    most recent change as 2\. Notice that the change cause shows the recorded command:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rollout历史记录将显示两个修订版本，起始修订版本为1，最近的更改为2。请注意，更改原因显示了记录的命令：
- en: '[PRE35]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Use the `rollout undo` command to roll back to the previous revision. Revision
    1 is turned into revision 3:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`rollout undo`命令回滚到先前的修订版本。修订版本1变为修订版本3：
- en: '[PRE36]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following YAML manifest shows the Secret of type `kubernetes.io/basic-auth`
    in the file `basic-auth-secret.yaml`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下的YAML清单显示了类型为`kubernetes.io/basic-auth`的Secret，存储在文件`basic-auth-secret.yaml`中：
- en: '[PRE37]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the Secret using the `create` command:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`create`命令创建Secret：
- en: '[PRE38]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To mount the Secret as a volume to the Pod template, edit the live object of
    the Deployment using the `edit` command. The essential portions of the Deployment
    will look similar to the following YAML manifest:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若要将Secret作为卷挂载到Pod模板中，请使用`edit`命令编辑Deployment的活动对象。Deployment的重要部分将类似于以下的YAML清单：
- en: '[PRE39]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Chapter 4, “Scheduling and Tooling”
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章，“调度和工具”
- en: 'The manifest of a Pod that defines resource boundaries stored in a file `ingress-controller-pod.yaml`
    could look as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义资源边界的Pod清单存储在文件`ingress-controller-pod.yaml`中，可能如下所示：
- en: '[PRE40]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Assume a cluster with three nodes: one control plane node and two worker nodes.
    The following multinode cluster has been set up with Minikube. For more information,
    see the [setup instructions](https://oreil.ly/nVhYn):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设一个由三个节点组成的集群：一个控制平面节点和两个工作节点。以下的多节点集群已经通过Minikube设置好。更多信息请参见[设置指南](https://oreil.ly/nVhYn)：
- en: '[PRE41]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can identify which node runs the Pod after creating the object. Write the
    node name to the file `node.txt`:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建对象后，您可以确定哪个节点运行了Pod。将节点名称写入文件`node.txt`：
- en: '[PRE42]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Navigate to the folder containing the `manifests` directory. Create all objects
    contained in the `manifests` directory using the recursive `apply` command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到包含`manifests`目录的文件夹。使用递归的`apply`命令创建`manifests`目录中包含的所有对象：
- en: '[PRE43]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Modify the value of the key `dir` in the file `configmap.yaml` using an editor.
    Then update the live object of the ConfigMap using the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用编辑器修改文件`configmap.yaml`中`dir`键的值。然后使用以下命令更新ConfigMap的活动对象：
- en: '[PRE44]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Delete all objects that have been created from the `manifests` directory using
    the recursive `delete` command:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用递归的`delete`命令删除从`manifests`目录创建的所有对象：
- en: '[PRE45]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create the file `kustomization.yaml`. It should define the common attribute
    for the namespace and reference the resource with the file `pod.yaml`. The following
    YAML file shows its contents:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`kustomization.yaml`。它应该定义命名空间的公共属性，并引用文件`pod.yaml`中的资源。以下的YAML文件显示了它的内容：
- en: '[PRE46]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run the following `kustomize` command to render the transformed manifest as
    console output:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行以下`kustomize`命令以将转换后的清单渲染为控制台输出：
- en: '[PRE47]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Chapter 5, “Services and Networking”
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章，“服务和网络”
- en: 'Start by creating the namespace `external`. Within the namespace, create the
    Deployment and the Service using the imperative command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建命名空间`external`。在命名空间内，使用命令创建部署和Service：
- en: '[PRE48]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you’d rather use the declarative approach, see the following YAML manifests:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您更愿意使用声明性方法，请参见以下YAML清单：
- en: '`external-namespace.yaml`:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`external-namespace.yaml`：'
- en: '[PRE49]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`external-deployment.yaml`:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`external-deployment.yaml`：'
- en: '[PRE50]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`external-service.yaml`:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`external-service.yaml`：'
- en: '[PRE51]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To create all object, run the `create` or `apply` command:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建所有对象，请运行`create`或`apply`命令：
- en: '[PRE52]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Determine the external IP address of the Service of type `LoadBalancer`. In
    the following output, the external IP address is `10.108.34.2`. If you are using
    Minikube, remember to run `minikube tunnel` in another shell so that the value
    of `EXTERNAL-IP` gets populated:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定类型为`LoadBalancer`的Service的外部IP地址。在下面的输出中，外部IP地址为`10.108.34.2`。如果使用Minikube，请记得在另一个Shell中运行`minikube
    tunnel`，以便`EXTERNAL-IP`的值得到填充：
- en: '[PRE53]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following `curl` command makes a call to the Service using the external
    IP address and port:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下`curl`命令通过使用外部IP地址和端口调用Service：
- en: '[PRE54]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Edit the live object by changing the value of the attribute `spec.type` from
    `LoadBalancer` to `ClusterIP`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将属性`spec.type`的值从`LoadBalancer`更改为`ClusterIP`来编辑实时对象：
- en: '[PRE55]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The Service should indicate the type `ClusterIP` now. Notice that there’s no
    more value for the external IP address. Furthermore, the statically assigned port
    is gone as well:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Service应该指示类型为`ClusterIP`。请注意，外部IP地址的值已经消失。此外，静态分配的端口也消失了：
- en: '[PRE56]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'A Service of type `ClusterIP` is accessible only from within the cluster. You
    can make a call to the Service from a temporary Pod in the same namespace. You
    can either use the cluster IP address (in this case `10.108.34.2`) or use the
    DNS name for the Service `nginx`:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型为`ClusterIP`的Service仅从集群内部可访问。您可以从同一命名空间内的临时Pod中对Service进行调用。您可以使用集群IP地址（在本例中为`10.108.34.2`）或使用Service
    `nginx`的DNS名称：
- en: '[PRE57]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'To create the Ingress imperatively, run the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要以声明性方式创建入口，运行以下命令：
- en: '[PRE58]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'If you’d rather use the declarative approach, see the YAML manifest in the
    file `incoming-ingress.yaml` shown here:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您更愿意使用声明性方法，请参见此处显示的文件`incoming-ingress.yaml`中的YAML清单：
- en: '[PRE59]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'To create the object, run the `create` or `apply` command:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建对象，请运行`create`或`apply`命令：
- en: '[PRE60]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To verify the correct behavior of the Ingress, retrieve the IP address of any
    node in the cluster. Here, we are dealing with only a single node that has the
    IP address `192.168.64.19`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证Ingress的正确行为，请获取集群中任何节点的IP地址。在这里，我们只处理具有IP地址`192.168.64.19`的单个节点：
- en: '[PRE61]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The Ingress is configured to access calls to any hostname. Make a call to the
    node’s IP address from your local machine. The traffic will be routed to the Pods
    through the Service named `nginx`:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ingress已配置为访问任何主机名的调用。从本地机器对节点的IP地址进行调用。流量将通过名为`nginx`的Service路由到Pods：
- en: '[PRE62]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'For a fast turnaround, you can create the `echoserver` Pod and the Service
    together with the `run` command plus the `--expose` CLI option:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了快速实现，您可以使用`run`命令加上`--expose` CLI选项一起创建`echoserver` Pod和Service：
- en: '[PRE63]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The declarative approach requires the creation of the following YAML manifests:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明性方法需要创建以下YAML清单：
- en: '`external-echoserver-pod.yaml`:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`external-echoserver-pod.yaml`:'
- en: '[PRE64]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '`external-echoserver-service.yaml`:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`external-echoserver-service.yaml`：'
- en: '[PRE65]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'To create the object, run the `create` or `apply` command:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建对象，请运行`create`或`apply`命令：
- en: '[PRE66]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Modify the existing Ingress and add a new rule that routes to the `echoservice`
    Service. The resulting YAML definition should look as follows:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改现有的Ingress并添加一个新的规则，将流量路由到`echoservice` Service。生成的YAML定义如下所示：
- en: '[PRE67]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Make a call to the node’s IP address from your local machine using the path
    `/echo`. The traffic will be routed to the Pods through the Service named `echoservice`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地机器对节点的IP地址进行调用，路径为`/echo`。流量将通过名为`echoservice`的Service路由到Pods：
- en: '[PRE68]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You can customize CoreDNS settings by editing the ConfigMap `coredns` in the
    namespace `kube-system` using the command `kubectl edit configmap coredns -n kube-system`.
    The following YAML manifest shows the `rewrite` rule:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过使用命令`kubectl edit configmap coredns -n kube-system`编辑命名空间`kube-system`中的ConfigMap
    `coredns`来自定义CoreDNS设置。以下YAML清单显示了`rewrite`规则：
- en: '[PRE69]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Find the Pod running CoreDNS in the namespace `kube-system` and delete it to
    force a re-creation of the Pod. You should see that Kubernetes creates a new object
    for the CoreDNS Pod:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在命名空间`kube-system`中查找运行CoreDNS的Pod，并删除它以强制重新创建Pod。您应该看到Kubernetes为CoreDNS Pod创建了一个新对象：
- en: '[PRE70]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Create the namespace `hello` if it doesn’t exist yet. Run a `wget` command
    against `echoserver.external.svc.cka.example.com` from a temporary Pod in the
    `hello` namespace. The call should succeed:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚不存在，请创建命名空间`hello`。从`hello`命名空间的临时Pod针对`echoserver.external.svc.cka.example.com`运行`wget`命令。调用应成功：
- en: '[PRE71]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Chapter 6, “Storage”
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章，“存储”
- en: 'Start by creating a new file named `logs-pv.yaml`. The contents could look
    as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建名为`logs-pv.yaml`的新文件。内容如下：
- en: '[PRE72]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Create the PersistentVolume object and check on its status:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建持久卷对象并检查其状态：
- en: '[PRE73]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create the file `logs-pvc.yaml` to define the PersistentVolumeClaim. The following
    YAML manifest shows its contents:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`logs-pvc.yaml`以定义持久卷声明。以下YAML清单显示了其内容：
- en: '[PRE74]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create the PersistentVolumeClaim object and check on its status:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建持久卷声明对象并检查其状态：
- en: '[PRE75]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create the basic YAML manifest using the `--dry-run` command-line option:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`--dry-run`命令行选项创建基本的YAML清单：
- en: '[PRE76]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, edit the file `nginx-pod.yaml` and bind the PersistentVolumeClaim to it:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，编辑文件`nginx-pod.yaml`并将持久卷声明绑定到它：
- en: '[PRE77]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create the Pod using the following command and check its status:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下命令创建Pod并检查其状态：
- en: '[PRE78]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Use the `exec` command to open an interactive shell to the Pod and create a
    file in the mounted directory:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`exec`命令打开与Pod交互的shell，并在挂载的目录中创建文件：
- en: '[PRE79]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Delete the Pod and the PersistentVolumeClaim. The PersistentVolume will be
    deleted automatically due to its reclaim policy:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除Pod和持久卷声明。由于其回收策略，持久卷将被自动删除：
- en: '[PRE80]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'You can list the storage classes with the following command. If you are using
    Minikube, you will likely find only a single storage class, the default one. The
    existing storage class is named `standard` and uses the provisioner `k8s.io/minikube-hostpath`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令列出存储类。如果使用Minikube，可能只会找到一个存储类，默认的存储类名为`standard`，使用提供程序`k8s.io/minikube-hostpath`：
- en: '[PRE81]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create the file `custom-sc.yaml` for the storage class. The YAML manifest could
    look as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为存储类创建文件`custom-sc.yaml`。YAML清单可能如下所示：
- en: '[PRE82]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Create the storage class using the following command. Listing all storage classes
    renders the default storage class and the new one:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下命令创建存储类。列出所有存储类会显示默认存储类和新的存储类：
- en: '[PRE83]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Create the file `custom-pvc.yaml` to define the PersistentVolumeClaim. The
    following YAML manifest shows its contents:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`custom-pvc.yaml`以定义持久卷声明。以下YAML清单显示了其内容：
- en: '[PRE84]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Create the PersistentVolumeClaim object and check on its status:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建持久卷声明对象并检查其状态：
- en: '[PRE85]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Write the name of the PersistentVolume to the file `pv-name.txt`:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将持久卷的名称写入文件`pv-name.txt`：
- en: '[PRE86]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Deleting the PersistentVolumeClaim will delete the bound PersistentVolume as
    well:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除持久卷声明将同时删除绑定的持久卷：
- en: '[PRE87]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Chapter 7, “Troubleshooting”
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章，“故障排除”
- en: 'Start by creating a YAML starting point for the Pod in the file named `multi-container.yaml`.
    The following command creates the file:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建名为`multi-container.yaml`的Pod的YAML起点文件。以下命令创建文件：
- en: '[PRE88]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Edit the YAML manifest. Add the sidecar container. The contents of the YAML
    file could look as follows:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑YAML清单。添加sidecar容器。以下YAML文件的内容可能如下所示：
- en: '[PRE89]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Add the volume definition and mount it to both containers. The final YAML manifest
    is shown here:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加卷定义并将其挂载到两个容器中。最终的YAML清单如下所示：
- en: '[PRE90]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Create the Pod by pointing the `create` command to the YAML file:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过指向YAML文件的`create`命令创建Pod：
- en: '[PRE91]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Determine the IP address of the Pod. In the following example, the IP address
    is `10.244.2.3`. Make three calls to nginx using a temporary Pod. The logs of
    the `streaming` container has three entries:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定Pod的IP地址。在以下示例中，IP地址为`10.244.2.3`。使用临时Pod对nginx进行三次调用。`streaming`容器的日志有三个条目：
- en: '[PRE92]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Create the Pods `stress-1` and `stress-2`. The following YAML manifest shows
    the definition for the Pod named `stress-1` in the file `stress-1-pod.yaml`. Create
    a second YAML file and change the Pod name accordingly:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Pods `stress-1`和`stress-2`。以下YAML清单显示了名为`stress-1`的Pod在文件`stress-1-pod.yaml`中的定义。创建第二个YAML文件，并相应更改Pod名称：
- en: '[PRE93]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Create the Pods and check their status:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建Pod并检查其状态：
- en: '[PRE94]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Install the [metrics server](https://oreil.ly/e1NSC) if it isn’t already available
    on your cluster. Retrieve the metrics for the Pods from the metrics server. In
    the example below, the Pod named `stress-2` consumes more memory. Write the name
    of the Pod the file *max-memory.txt*:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果集群尚未安装[metrics server](https://oreil.ly/e1NSC)，请安装它。从metrics服务器检索Pod的指标。在下面的示例中，名为`stress-2`的Pod消耗了更多内存。将Pod名称写入文件*max-memory.txt*：
- en: '[PRE95]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-pod/solution/solution.md*](https://oreil.ly/BjXvd)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在检出的 GitHub 仓库 [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8) 的文件 [*app-a/ch07/troubleshooting-pod/solution/solution.md*](https://oreil.ly/BjXvd)
    中找到解决方案。
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-deployment/solution/solution.md*](https://oreil.ly/PQEQt)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在检出的 GitHub 仓库 [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8) 的文件 [*app-a/ch07/troubleshooting-deployment/solution/solution.md*](https://oreil.ly/PQEQt)
    中找到解决方案。
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-service/solution/solution.md*](https://oreil.ly/oPmYR)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在检出的 GitHub 仓库 [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8) 的文件 [*app-a/ch07/troubleshooting-service/solution/solution.md*](https://oreil.ly/oPmYR)
    中找到解决方案。
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-control-plane-node/solution/solution.md*](https://oreil.ly/CcLJe)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在检出的 GitHub 仓库 [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8) 的文件 [*app-a/ch07/troubleshooting-control-plane-node/solution/solution.md*](https://oreil.ly/CcLJe)
    中找到解决方案。
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-worker-node/solution/solution.md*](https://oreil.ly/WI3sa)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在检出的 GitHub 仓库 [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8) 的文件 [*app-a/ch07/troubleshooting-worker-node/solution/solution.md*](https://oreil.ly/WI3sa)
    中找到解决方案。
