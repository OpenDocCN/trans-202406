- en: Answers to Review Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 2, “Cluster Architecture, Installation, and Configuration”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create the namespace named `apps`. Then, we’ll create the ServiceAccount:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, you can use the declarative approach. Create the namespace from
    the definition in the file `apps-namespace.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the namespace from the YAML file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new YAML file called `api-serviceaccount.yaml` with the following
    contents:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `create` command to instantiate the ServiceAccount from the YAML file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `create clusterrole` command to create the ClusterRole imperatively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’d rather start with the YAML file, use content shown in the file `api-clusterrole.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the ClusterRole from the YAML file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `create clusterrolebinding` command to create the ClusterRoleBinding
    imperatively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The declarative approach of the ClusterRoleBinding could look like the one
    in the file `api-clusterrolebinding.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the ClusterRoleBinding from the YAML file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `run` command to create the Pods in the different namespaces. You
    will need to create the namespace `rm` before you can instantiate the Pod `disposable`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following YAML manifest shows the `rm` namespace definition stored in the
    file `rm-namespace.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The YAML representation of those Pods stored in the file `api-pods.yaml` could
    look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the namespace and Pods from the YAML files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Determine the API server endpoint and the Secret access token of the ServiceAccount.
    You will need this information for making the API calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open an interactive shell to the Pod named `operator`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Emit API calls for listing all Pods and deleting the Pod `disposable` living
    in the `rm` namespace. You will find that while the `list` operation is permitted,
    the `delete` operation isn’t:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The solution to this sample exercise requires a lot of manual steps. The following
    commands do not render their output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open an interactive shell to the control plane node using Vagrant:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upgrade `kubeadm` to version 1.21.2 and apply it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Drain the node, upgrade the kubelet and `kubectl`, restart the kubelet, and
    uncordon the node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The version of the node should now say v1.21.2\. Exit the node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open an interactive shell to the first worker node using Vagrant. Repeat all
    of the following steps for the other worker nodes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upgrade `kubeadm` to version 1.21.2 and apply it to the node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Drain the node, upgrade the kubelet and `kubectl`, restart the kubelet, and
    uncordon the node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The version of the node should now say v1.21.2\. Exit the node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The solution to this sample exercise requires a lot of manual steps. The following
    commands do not render their output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open an interactive shell to the control plane node using Vagrant. That’s not
    with the `etcdctl` command-line tool installed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Determine the parameters of the Pod `etcd-k8s-control-plane` by describing
    it. Use the correct parameter values to create a snapshot file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restore the backup from the snapshot file. Edit the etcd YAML manifest and
    change the value of `spec.volumes.hostPath.path` for the volume named `etcd-data`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After a short while, the Pod `etcd-k8s-control-plane` should transition back
    into the “Running” status. Exit the node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 3, “Workloads”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create the Deployment named `nginx`. Use the imperative approach for
    the fastest turnaround time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `scale` command increases the number of replicas to 7\. The `get` command
    should render seven Pods with the Deployment’s name as the prefix in their names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The API version of a Horizontal Pod Autoscaler that currently supports defining
    CPU and memory utilization thresholds is `autoscaling/v2beta2`. The following
    YAML manifest specifies the autoscaling parameters in the file `hpa.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Horizontal Pod Autoscaler with the `create` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can either manually change the image name by editing the live object via
    the `edit` command or use the `set image` command as a shortcut. Use the `--record`
    option so that the command is recorded as the change cause:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The rollout history will show two revisions, the starting revision 1 and the
    most recent change as 2\. Notice that the change cause shows the recorded command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `rollout undo` command to roll back to the previous revision. Revision
    1 is turned into revision 3:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following YAML manifest shows the Secret of type `kubernetes.io/basic-auth`
    in the file `basic-auth-secret.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Secret using the `create` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To mount the Secret as a volume to the Pod template, edit the live object of
    the Deployment using the `edit` command. The essential portions of the Deployment
    will look similar to the following YAML manifest:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 4, “Scheduling and Tooling”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The manifest of a Pod that defines resource boundaries stored in a file `ingress-controller-pod.yaml`
    could look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assume a cluster with three nodes: one control plane node and two worker nodes.
    The following multinode cluster has been set up with Minikube. For more information,
    see the [setup instructions](https://oreil.ly/nVhYn):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can identify which node runs the Pod after creating the object. Write the
    node name to the file `node.txt`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the folder containing the `manifests` directory. Create all objects
    contained in the `manifests` directory using the recursive `apply` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the value of the key `dir` in the file `configmap.yaml` using an editor.
    Then update the live object of the ConfigMap using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete all objects that have been created from the `manifests` directory using
    the recursive `delete` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `kustomization.yaml`. It should define the common attribute
    for the namespace and reference the resource with the file `pod.yaml`. The following
    YAML file shows its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following `kustomize` command to render the transformed manifest as
    console output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 5, “Services and Networking”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by creating the namespace `external`. Within the namespace, create the
    Deployment and the Service using the imperative command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’d rather use the declarative approach, see the following YAML manifests:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`external-namespace.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`external-deployment.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`external-service.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create all object, run the `create` or `apply` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Determine the external IP address of the Service of type `LoadBalancer`. In
    the following output, the external IP address is `10.108.34.2`. If you are using
    Minikube, remember to run `minikube tunnel` in another shell so that the value
    of `EXTERNAL-IP` gets populated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following `curl` command makes a call to the Service using the external
    IP address and port:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the live object by changing the value of the attribute `spec.type` from
    `LoadBalancer` to `ClusterIP`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Service should indicate the type `ClusterIP` now. Notice that there’s no
    more value for the external IP address. Furthermore, the statically assigned port
    is gone as well:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A Service of type `ClusterIP` is accessible only from within the cluster. You
    can make a call to the Service from a temporary Pod in the same namespace. You
    can either use the cluster IP address (in this case `10.108.34.2`) or use the
    DNS name for the Service `nginx`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create the Ingress imperatively, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’d rather use the declarative approach, see the YAML manifest in the
    file `incoming-ingress.yaml` shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create the object, run the `create` or `apply` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To verify the correct behavior of the Ingress, retrieve the IP address of any
    node in the cluster. Here, we are dealing with only a single node that has the
    IP address `192.168.64.19`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Ingress is configured to access calls to any hostname. Make a call to the
    node’s IP address from your local machine. The traffic will be routed to the Pods
    through the Service named `nginx`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For a fast turnaround, you can create the `echoserver` Pod and the Service
    together with the `run` command plus the `--expose` CLI option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The declarative approach requires the creation of the following YAML manifests:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`external-echoserver-pod.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`external-echoserver-service.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create the object, run the `create` or `apply` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the existing Ingress and add a new rule that routes to the `echoservice`
    Service. The resulting YAML definition should look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a call to the node’s IP address from your local machine using the path
    `/echo`. The traffic will be routed to the Pods through the Service named `echoservice`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can customize CoreDNS settings by editing the ConfigMap `coredns` in the
    namespace `kube-system` using the command `kubectl edit configmap coredns -n kube-system`.
    The following YAML manifest shows the `rewrite` rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the Pod running CoreDNS in the namespace `kube-system` and delete it to
    force a re-creation of the Pod. You should see that Kubernetes creates a new object
    for the CoreDNS Pod:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the namespace `hello` if it doesn’t exist yet. Run a `wget` command
    against `echoserver.external.svc.cka.example.com` from a temporary Pod in the
    `hello` namespace. The call should succeed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 6, “Storage”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by creating a new file named `logs-pv.yaml`. The contents could look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the PersistentVolume object and check on its status:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `logs-pvc.yaml` to define the PersistentVolumeClaim. The following
    YAML manifest shows its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the PersistentVolumeClaim object and check on its status:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the basic YAML manifest using the `--dry-run` command-line option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit the file `nginx-pod.yaml` and bind the PersistentVolumeClaim to it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Pod using the following command and check its status:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `exec` command to open an interactive shell to the Pod and create a
    file in the mounted directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete the Pod and the PersistentVolumeClaim. The PersistentVolume will be
    deleted automatically due to its reclaim policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can list the storage classes with the following command. If you are using
    Minikube, you will likely find only a single storage class, the default one. The
    existing storage class is named `standard` and uses the provisioner `k8s.io/minikube-hostpath`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `custom-sc.yaml` for the storage class. The YAML manifest could
    look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the storage class using the following command. Listing all storage classes
    renders the default storage class and the new one:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `custom-pvc.yaml` to define the PersistentVolumeClaim. The
    following YAML manifest shows its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the PersistentVolumeClaim object and check on its status:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the name of the PersistentVolume to the file `pv-name.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deleting the PersistentVolumeClaim will delete the bound PersistentVolume as
    well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 7, “Troubleshooting”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by creating a YAML starting point for the Pod in the file named `multi-container.yaml`.
    The following command creates the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the YAML manifest. Add the sidecar container. The contents of the YAML
    file could look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the volume definition and mount it to both containers. The final YAML manifest
    is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Pod by pointing the `create` command to the YAML file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Determine the IP address of the Pod. In the following example, the IP address
    is `10.244.2.3`. Make three calls to nginx using a temporary Pod. The logs of
    the `streaming` container has three entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Pods `stress-1` and `stress-2`. The following YAML manifest shows
    the definition for the Pod named `stress-1` in the file `stress-1-pod.yaml`. Create
    a second YAML file and change the Pod name accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Pods and check their status:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the [metrics server](https://oreil.ly/e1NSC) if it isn’t already available
    on your cluster. Retrieve the metrics for the Pods from the metrics server. In
    the example below, the Pod named `stress-2` consumes more memory. Write the name
    of the Pod the file *max-memory.txt*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-pod/solution/solution.md*](https://oreil.ly/BjXvd)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-deployment/solution/solution.md*](https://oreil.ly/PQEQt)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-service/solution/solution.md*](https://oreil.ly/oPmYR)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-control-plane-node/solution/solution.md*](https://oreil.ly/CcLJe)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the solution in the file [*app-a/ch07/troubleshooting-worker-node/solution/solution.md*](https://oreil.ly/WI3sa)
    of the checked-out GitHub repository [*bmuschko/cka-study-guide*](https://oreil.ly/jUIq8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
