- en: 'Chapter 5\. The Activity Lifecycle: *Being an Activity*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0169-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Activities form the foundation of every Android app.**'
  prefs: []
  type: TYPE_NORMAL
- en: So far you’ve seen how to create an activity, and use it to interact with the
    user. But if you don’t know about **the activity lifecycle**, some of its behavior
    **might take you by surprise**. In this chapter, you’ll learn what happens when
    an activity is **created** and **destroyed**, and how this can lead to **unexpected
    consequences**. You’ll find out how to control its behavior when it’s made **visible**,
    or **hidden**. You’ll even discover ways of **saving and restoring your activity’s
    state**, just when you need it. Read on to find out more…
  prefs: []
  type: TYPE_NORMAL
- en: How do activities really work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far you’ve seen how to create an interactive app by specifying how the app
    should behave in its activity code. But there are still lots of things you don’t
    yet know about how activities function.
  prefs: []
  type: TYPE_NORMAL
- en: How long does an activity live for? What happens when your activity disappears
    from the screen? Is it still running? Is it still in memory? And what happens
    if your app gets interrupted by an incoming phone call?
  prefs: []
  type: TYPE_NORMAL
- en: You want to be able to control the behavior of your activities in a *whole range
    of different circumstances*, so we’re going to take a closer look at how activities
    work under the hood. We’ll look at some common ways in which your apps can break,
    and how you can fix them using the **activity lifecycle methods**. We’ll explore
    these functions using a Stopwatch app as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Stopwatch app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Stopwatch app has four views: a view that displays the elapsed time, a
    Start button that starts the stopwatch, a Pause button that pauses it, and a Reset
    button that sets the timer value back to 0\. Here’s what the app looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0170-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll build the app over the next few pages, and we’ll start by creating a new
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new Android Studio project using the same steps you used in previous
    chapters. Choose the Empty Activity option, enter a name of “Stopwatch” and a
    package name of “com.hfad.stopwatch”, and accept the default save location. Make
    sure the language is set to Kotlin and the minimum SDK is API 21 so it will run
    on most Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Add String resources for the text labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Stopwatch layout features three buttons labeled Start, Pause, and Reset.
    We’ll add these labels to *strings.xml* as !`String` resources so the app can
    look up their values at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the `String` resources, open the file *strings.xml* in the *app/src/main/res/values*
    folder, and update it so it includes the changes below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0171-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve added the `String` resources, let’s build the layout.
  prefs: []
  type: TYPE_NORMAL
- en: The layout includes a Chronometer view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The layout is comprised of three buttons, and a view that displays the number
    of seconds on the stopwatch. To display the number of seconds, we’ll use a **chronometer**.
  prefs: []
  type: TYPE_NORMAL
- en: A chronometer is a type of text view that acts as a simple timer. It has built-in
    methods you can use to start and stop it, and it displays the elapsed time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You add a chronometer to your layout using the `<Chronometer>` element. The
    following code, for example, adds a `Chronometer` view with an ID of “stopwatch”
    that is just large enough for its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0171-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ll learn more about how the chronometer works when we write the activity
    code. First, let’s look at the full code for the layout.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The full code for *activity_main.xml* features a `Chronometer` view and three
    buttons. Update your code in *activity_main.xml* so that it matches the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0172-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The layout is now complete. Next, let’s move on to the activity.
  prefs: []
  type: TYPE_NORMAL
- en: The activity code controls the stopwatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The activity code needs to specify how the Start, Pause, and Reset buttons control
    the stopwatch. The Start button needs to start it running (if it’s not running
    already), the Pause button needs to pause it, and the Reset button needs to set
    it back to 0.
  prefs: []
  type: TYPE_NORMAL
- en: The buttons will control the stopwatch by accessing the `Chronometer` view’s
    built-in properties and methods. Let’s take a look at these.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0173-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The Chronometer’s key properties and methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we said earlier, the `Chronometer` view is a type of `TextView`. It inherits
    all of `TextView`’s properties and methods, and defines some new ones too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are all the `Chronometer` properties and methods we’ll be using in the
    `MainActivity` code:'
  prefs: []
  type: TYPE_NORMAL
- en: The base property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Chronometer base` property is used to set the start time: the time from
    which the chronometer will start counting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You set the start time to the current time by setting the `base` property to
    `SystemClock.elapsedRealtime()` using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0173-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '`SystemClock.elapsedRealtime()` returns the number of milliseconds since the
    device was booted. Setting the `base` property to this value means that the time
    that’s displayed is set to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: The start() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `start()` method makes the chronometer start counting from the base time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0173-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The stop() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pauses the chronometer so it stops counting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0173-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you know about the `Chronometer` view’s properties and methods we’ll
    be using, let’s look at the activity code.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for `MainActivity` requires an `OnClickListener` for each button. The
    one for the Start button needs to start the stopwatch if it’s not already running,
    the one for the Pause button needs to pause it, and the Reset button’s `OnClickListener`
    needs to set the display back to 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re using three properties to help us with this: `stopwatch`, `running`,
    and `offset`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `stopwatch` property holds a reference to the `Chronometer` view.
  prefs: []
  type: TYPE_NORMAL
- en: The `running` property records whether the stopwatch is running. We’ll set it
    to `true` when the Start button’s clicked, and `false` when the user clicks the
    Pause button.
  prefs: []
  type: TYPE_NORMAL
- en: The `offset` property is used to display the correct time on the stopwatch if
    the stopwatch has been paused and restarted. Without this, the stopwatch will
    display the incorrect time.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also included two methods (`setBaseTime` and `saveOffset`) to help make
    the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the full code for *MainActivity.kt*; update your code to include all
    of the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0174-01.png)![image](Images/f0175-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s run through how we expect the code to work.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you run the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The user runs the app, and MainActivity starts.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `running` and `offset` properties are initialized. `running` is set to `false`,
    and `offset` is set to 0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0176-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity’s onCreate method gets called.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The *activity_main.xml* layout is linked to the activity, and the `stopwatch`
    property is given a reference to the `Chronometer` view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0176-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks the Start button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `stopwatch.`b`ase` property is set to `SystemClock.elapsedRealTime()`, its
    `start()` method is called, and `running` is set to `true`. The stopwatch starts
    running.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0176-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks the Pause button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MainActivity` updates the `offset` property and calls the stopwatch `stop()`
    method and `running` is set to `false`. The stopwatch pauses.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0177-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks the Reset button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `offset` property is set to `0`, and the `stopwatch.base` property is reset
    to `SystemClock.elapsedRealTime()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0177-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user clicks the Start button again.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MainActivity` uses the `offset` value to adjust the `stopwatch.base` property,
    calls its `start()` method, and sets `running` to `true`. The stopwatch starts
    running again.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0177-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, it seems to work as we expect it to. We can start, pause,
    and reset the stopwatch without any problems.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0178-01.png)'
  prefs: []
  type: TYPE_IMG
- en: But there’s just one problem…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we turn the device so the screen rotates, the app goes wrong. The stopwatch
    sets itself back to 0 and stops running.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0178-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So why does the app break when we rotate the screen? Let’s go behind the scenes
    to find out more.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the app runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the code runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Click on the Start button to start the stopwatch.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stopwatch starts, and the `running` property is set to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0179-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Rotate the device screen.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android sees that the screen orientation has changed, and it **destroys** `**MainActivity**`.
    Its property values are lost.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0179-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity restarts.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity is recreated, all its properties are reinitialized, and `onCreate()`
    runs again. The stopwatch doesn’t restart as `onCreate()` doesn’t tell it to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0179-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Rotating the screen changes the device configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Android runs your app and starts an activity, it takes into account the
    **device configuration**. By this we mean the configuration of the physical device
    (such as the screen size, screen orientation, and whether there’s a keyboard attached)
    and also configuration options specified by the user (such as the locale).
  prefs: []
  type: TYPE_NORMAL
- en: Android needs to know what the device configuration is when it starts an activity
    because the configuration can impact what resources are needed for the application.
    You may need to use a different layout if the device screen is in landscape mode
    rather than portrait, for instance, and a different set of `String` values if
    the locale is France.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0180-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The device configuration includes options specified by the user (such as
    the locale), and options relating to the physical device (such as the orientation
    and screen size). A change to any of these options results in the activity being
    destroyed and then recreated.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When the device configuration changes, anything that displays a user interface
    needs to be updated to match the new configuration. If you rotate the screen,
    for example, Android spots the orientation has changed, and classes this as a
    change to the device configuration. It destroys the current activity, and then
    recreates it so that resources appropriate to the new configuration get picked
    up.
  prefs: []
  type: TYPE_NORMAL
- en: An activity’s states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Android creates and destroys an activity, the activity moves from being
    launched to running to being destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: The main state of an activity is when it’s ***running*** or ***active***. An
    activity is running when it’s in the foreground of the screen, it has the focus,
    and the user can interact with it. The activity spends most of its life in this
    state. An activity starts running after it has been launched, and at the end of
    its life, the activity is ***destroyed***.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0181-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When an activity moves from being launched to being destroyed, it triggers
    key activity lifecycle methods: the `**onCreate()**` and `**onDestroy()**` methods.
    These are lifecycle methods that the activity inherits, and that you can override.'
  prefs: []
  type: TYPE_NORMAL
- en: The `onCreate()` method gets called immediately after your activity is launched.
    This method is where you do all your normal activity setup such as calling `setContentView()`.
    You should always override this method. If you *don’t* override it, you won’t
    be able to tell Android what layout your activity should use.
  prefs: []
  type: TYPE_NORMAL
- en: The `onDestroy()` method is the final call you get before the activity is destroyed.
    There are a number of situations in which an activity can get destroyed—for example,
    if it’s been told to finish, if the activity is being recreated due to a change
    in device configuration, or if Android has decided to destroy the activity in
    order to save space.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll take a closer look at how these methods fit into the activity states on
    the next page.
  prefs: []
  type: TYPE_NORMAL
- en: '**An activity is running when it’s in the foreground of the screen.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**onCreate() gets called when the activity is first created, and it’s where
    you do your normal activity setup.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**onDestroy() gets called just before your activity gets destroyed.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The activity lifecycle: from create to destroy'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s an overview of the activity lifecycle from birth to death. As you’ll
    see later in the chapter, we’ve left out some of the details because at this point
    we’re just focusing on the `onCreate()` and `onDestroy()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0182-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The activity gets launched.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity object is created and its constructor is run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The onCreate() method runs immediately after the activity is launched.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onCreate()` method is where any initialization code should go, as this
    method always gets called after the activity has launched but before it starts
    running.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**An activity is running when it’s visible in the foreground and the user can
    interact with it.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where an activity spends most of its life.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The onDestroy() method runs immediately before the activity is destroyed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onDestroy()` method enables you to perform any final cleanup such as freeing
    up resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**After the onDestroy() method has run, the activity is destroyed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity ceases to exist.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your device is extremely low on memory, onDestroy() might not get called
    before the activity is destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: The `onCreate()` and `onDestroy()` methods are two of the activity lifecycle
    methods. So where do these methods come from?
  prefs: []
  type: TYPE_NORMAL
- en: Your activity inherits the lifecycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The activity lifecycle methods are defined in the `android.app.Activity` class.
    Each activity you create is a subtype of this class, so it inherits these methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a diagram showing the main classes in your activity’s class hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0183-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you know more about how your activity gets its lifecycle methods, let’s
    see how you deal with device configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: Save the current state in a Bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw earlier, the Stopwatch app went wrong when we rotated the device.
    `MainActivity` was destroyed and recreated, so all the property values were lost,
    and the `Chronometer` view was reset.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this bug, we’ll save the state of the `Chronometer` and property values
    before the activity gets destroyed, and restore them when the activity gets recreated.
    We’ll save the values in a type of object called a `**Bundle**`.
  prefs: []
  type: TYPE_NORMAL
- en: A `Bundle` is a type of object that’s used to hold key/value pairs. Before the
    activity is destroyed, Android lets you put key/value pairs into a `Bundle`. This
    `Bundle` is then picked up by the new instance of the activity when it’s recreated.
    Using a `Bundle` therefore gives you a way of reinstating an activity’s state
    when you rotate the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: Before we show you how the `Bundle` is passed between activity instances, let’s
    look at how you add and retrieve values.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0184-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Add values using put methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You add key/value pairs to a `Bundle` using `put` methods. The `putLong` method
    puts a `Long` value into a `Bundle`, `putBoolean()` adds a `Boolean`, and so on.
    The following code, for example, puts a key of “answer” and an `Int` value of
    42 into a `Bundle` named `bundle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can save multiple key/value pairs to a `Bundle`. Each key must be of type
    `String?`, and the value must match the method call. You can’t, say, put an `Int`
    value into a `Bundle` using the `putString()` method without upsetting the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0184-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Retrieve values using get methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve put a key/value pair into a `Bundle`, you can retrieve the value
    using the `Bundle`’s `get` methods. The `getLong()` method lets you get a `Long`
    value, for example, and you use the `getBoolean()` method to retrieve a `Boolean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `get` method takes one parameter: the name of the key whose value you
    want to get. The following code, for example, gets the value that’s saved against
    a key of “answer” in a `Bundle` named `bundle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that you know how to add and retrieve values using a `Bundle`, let’s find
    out how to use one to save and restore an activity’s state.
  prefs: []
  type: TYPE_NORMAL
- en: Save the state using onSaveInstanceState()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Bundle`s are passed from one instance of an activity to another using two
    methods: `**onSaveInstanceState()**` and `**onCreate()**`. `onSaveInstanceState()`
    lets you add values to a `Bundle` before the activity is destroyed, and `onCreate()`
    picks the `Bundle` up again when the activity has been recreated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each activity inherits the `onSaveInstanceState()` method from its `Activity`
    superclass. It gets called just before the activity is destroyed, and takes one
    parameter: a `Bundle`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You override the `onSaveInstanceState()` method in your activity using code
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0185-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The above example puts a key of “answer” and an `Int` value of 42 into the `onSaveInstanceState()`
    method’s `Bundle` (named `savedInstanceState`). It then calls the superclass version
    of `onSaveInstanceState()`, which saves the state of the view hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Restore the state using onCreate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you already know, the `onCreate()` method gets called when the activity is
    recreated, and it takes one parameter, a `Bundle?`. If the activity’s being created
    from scratch, the `Bundle?` will be `null`, but if the activity’s being recreated,
    it’s the same `Bundle` object that was used by `onSaveInstanceState()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You use the `onCreate()` method to get values from the `Bundle` using code
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0185-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So what code changes do we need to make to the Stopwatch app?
  prefs: []
  type: TYPE_NORMAL
- en: The updated MainActivity.kt code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve updated the `MainActivity` code so that if the user rotates the device,
    its state gets saved in a `Bundle` using the `onSaveInstanceState()` method, and
    restored via `onCreate()`. Update your *MainActivity.kt* code to include these
    changes (below in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0186-01.png)![image](Images/f0187-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s run through what the code does, and take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you run the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The user starts the app, and clicks on the Start button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stopwatch starts and the `running` property is set to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0188-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user rotates the device screen.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android views this as a configuration change, and gets ready to destroy the
    activity. Before the activity is destroyed, `onSaveInstanceState()` gets called.
    The `onSaveInstanceState()` method saves the `offset`, `running` and `stopwatch.base`
    values to a `Bundle`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0188-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Android destroys the activity, and then recreates it.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity’s property values get reset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0189-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The onCreate() method gets called.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses the values saved in the `Bundle` to set the property values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0189-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The stopwatch starts running again and displays the correct time.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0189-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make the changes to your activity code, then run the app.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Start button, the timer starts, and it continues when we
    rotate the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0190-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Activity Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: The activity below is for a new Greetings app. You enter your name in an edit
    text (with the ID `name`), and when you click on a button (with the ID `button`),
    the text in the text view (with the ID `hello`) is updated to include your name.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the app and rotate the screen, the text in the `hello` text view
    gets lost. Use the magnets below to make sure the text gets reinstated in this
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0191-01.png)![image](Images/f0191-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Activity Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: The activity below is for a new Greetings app. You enter your name in an edit
    text (with the ID `name`), and when you click on a button (with the ID `button`),
    the text in the text view (with the ID `hello`) is updated to include your name.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the app and rotate the screen, the text in the `hello` text view
    gets lost. Use the magnets below to make sure the text gets reinstated in this
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0192-01.png)![image](Images/f0192-02.png)'
  prefs: []
  type: TYPE_IMG
- en: There’s more to an activity’s life than create and destroy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we’ve looked at the create and destroy parts of the activity lifecycle
    (and a little bit in between), and you’ve seen how to deal with configuration
    changes such as screen orientation. But there are other events in an activity’s
    life that you might want to deal with to get the app to behave the way you want.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, suppose the stopwatch is running and you get a phone call. Even
    though the stopwatch isn’t visible, it will continue running. But what if you
    want the stopwatch to pause while it’s hidden, and resume once the app is visible
    again?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Even if you don’t really want your stopwatch to behave like this, just play
    along with us. It’s a great excuse to look at more lifecycle methods.
  prefs: []
  type: TYPE_NORMAL
- en: Start, stop, and restart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fortunately, it’s easy to handle actions that relate to an activity’s visibility
    if you use the right lifecycle methods. In addition to the `onCreate()` and `onDestroy()`
    methods, which deal with the overall lifecycle of the activity, there are other
    lifecycle methods that deal with an activity’s visibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, there are three key lifecycle methods that deal with when an
    activity becomes visible or invisible to the user: `onStart()`, `onStop()`, and
    `onRestart()`. Just as with `onCreate()` and `onDestroy()`, your activity inherits
    them from the Android `Activity` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an overview of these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An activity’s state is stopped if it’s completely hidden by another activity
    and isn’t visible to the user. The activity still exists in the background and
    maintains all state information.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| **Method** | **When it’s called** |'
  prefs: []
  type: TYPE_TB
- en: '| **onStart()** | When your activity becomes visible. |'
  prefs: []
  type: TYPE_TB
- en: '| **onStop()** | When the activity has stopped being visible. This might be
    because it’s completely hidden by another activity that’s appeared on top of it,
    or because the activity is about to be destroyed. |'
  prefs: []
  type: TYPE_TB
- en: '| **onRestart()** | After the activity has been made invisible, before it gets
    made visible again. |'
  prefs: []
  type: TYPE_TB
- en: We’ll take a closer look at how these fit in with the `onCreate()` and `onDestroy()`
    methods on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The visible lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s build on the lifecycle diagram you saw earlier in the chapter, this time
    including the `onStart()`, `onStop()`, and `onRestart()` methods (the new bits
    are in black):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0194-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The activity gets launched, and the onCreate() method runs.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any activity initialization code in the `onCreate()` method runs. At this point,
    the activity isn’t yet visible, as no call to `onStart()` has been made.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The onStart() method runs. It gets called when the activity is about to become
    visible.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `onStart()` method has run, the user can see the activity on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The onStop() method runs when the activity stops being visible to the user.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `onStop()` method has run, the activity is no longer visible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**If the activity becomes visible to the user again, the onRestart() method
    gets called followed by onStart().**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity may go through this cycle many times if the activity repeatedly
    loses visibility and then becomes visible again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Finally, the activity is destroyed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onStop()` method will get called before `onDestroy()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We need to implement two more lifecycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two things we need to do to update the Stopwatch app. First, we need
    to implement the activity’s `onStop()` method so that the stopwatch pauses when
    the app isn’t visible. Once we’ve done that, we need to implement `onRestart()`
    so that the stopwatch starts again when the app is visible.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the `onStop()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '**When you override any activity lifecycle method in your activity, you need
    to call the Activity superclass method or the compiler will complain.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implement onStop() to pause the stopwatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You override the `onStop()` method by adding the following method to your activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: calls the `onStop()` method in the `Activity` superclass. You need to add this
    line of code whenever you override the `onStop()` method to make sure the activity
    gets to perform any other actions in the superclass `onStop()` method. If you
    bypass this step, Android will generate an exception. This applies to all of the
    lifecycle methods; if you override any of the `Activity` lifecycle methods in
    your activity, you must call the superclass method or the compiler will get upset.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to get the stopwatch to stop if it’s running when the `onStop()` method
    is called. To do this, we need to call the `saveOffset()` method—which makes sure
    we can later restart the stopwatch from the same displayed time—and then stop
    the stopwatch. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0195-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So now the stopwatch stops when the activity is no longer visible. The next
    thing we need to do is get the stopwatch to start again when the activity becomes
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the stopwatch when the app becomes visible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the activity becomes visible again, two key lifecycle methods get called:
    `onStart()` and `onRestart()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnStart()` is called when the activity is about to become visible. This can
    be when the activity is first created, or when it becomes visible again after
    losing its visibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You implement the `onStart()` method using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the `onStop()` method, the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: calls the `onStart()` method in the `Activity` superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The `onRestart()` method is called before `onStart(`), but only when the activity
    becomes visible again after previously losing visibility. It’s *not* called when
    the activity first becomes visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'You implement the `onRestart()` method using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**onStart() gets called whenever the activity becomes visible.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**onRestart() only gets called when the activity becomes visible again after
    losing visibility.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In the Stopwatch app, we want the stopwatch to start running again when the
    activity regains visibility, so we’ll implement the `onRestart()` method. The
    code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0196-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The updated MainActivity.kt code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the code for *MainActivity.kt*, including the `onStop()` and `onRestart()`
    methods; update the code so it includes the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0197-01.png)'
  prefs: []
  type: TYPE_IMG
- en: What happens when you run the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The user starts the app, and clicks the Start button to set the stopwatch
    going.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stopwatch starts, and the `running` property is set to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0198-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user navigates to the device’s home screen so the Stopwatch app is no
    longer visible.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onStop()` method gets called, the `offset` property is updated, and the
    stopwatch is stopped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0198-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The user navigates back to the Stopwatch app.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onRestart()` method gets called, the `stopwatch.base` property is updated,
    the stopwatch starts, and the `offset` property is set to `0`. The stopwatch starts
    from the correct time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0198-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app and click on the Start button the timer starts. It stops
    when the app is no longer visible, and restarts when the app becomes visible again.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0199-01.png)'
  prefs: []
  type: TYPE_IMG
- en: What if an activity is only partially visible?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far you’ve seen what happens when an activity gets created and destroyed,
    and you’ve also seen what happens when an activity becomes visible, and when it
    becomes invisible. But there’s one more situation you need to consider: **when
    an activity is visible but doesn’t have the focus**.'
  prefs: []
  type: TYPE_NORMAL
- en: When an activity is visible but doesn’t have the focus, the activity is **paused**.
    This can happen if another activity appears on top of your activity that isn’t
    full-size or that’s transparent. The activity on top has the focus, but the one
    underneath is still visible and is therefore paused.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0204-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**An activity has a state of paused if it’s lost the focus but is still visible
    to the user. The activity is still alive and maintains all its state information.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are two lifecycle methods that handle when the activity is paused and
    when it becomes active again: `**onPause()**` and `**onResume()**`. `onPause()`
    gets called when your activity is visible but another activity has the focus.
    `onResume()` is called immediately before your activity is about to start interacting
    with the user. Let’s look at how these methods fit in with the rest of the activity
    lifecycle.'
  prefs: []
  type: TYPE_NORMAL
- en: The foreground lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s build on the lifecycle diagram you saw earlier in the chapter, this time
    including the `onResume()` and `onPause()` methods (the new bits are in black):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0205-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The activity gets launched, and the onCreate() and onStart() methods run.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the activity is visible, but it doesn’t have the focus.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The onResume() method runs. It gets called when the activity is about to
    move into the foreground.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `onResume()` method has run, the activity has the focus and the user
    can interact with it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The onPause() method runs when the activity stops being in the foreground.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `onPause()` method has run, the activity is still visible but doesn’t
    have the focus.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**If the activity moves into the foreground again, the onResume() method gets
    called.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity may go through this cycle many times if the activity repeatedly
    loses and then regains the focus.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**If the activity stops being visible to the user, the onStop() method gets
    called.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `onStop()` method has run, the activity is no longer visible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**If the activity becomes visible to the user again, the onRestart() method
    gets called, followed by onStart() and onResume().**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The activity may go through this cycle many times.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Finally, the activity is destroyed.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the activity moves from running to destroyed, the `onPause()` and `onStop()`
    methods get called before the activity is destroyed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pause the stopwatch if the activity’s paused
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get back to the Stopwatch app.
  prefs: []
  type: TYPE_NORMAL
- en: So far we’ve made the stopwatch pause if the Stopwatch app isn’t visible, and
    made it restart when the app becomes visible again. We did this by overriding
    the `onStop()` and `onRestart()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get the app to have the same behavior if the app is only partially visible.
    We’ll get the stopwatch to pause if the activity is paused, and start again when
    the activity is resumed. So which lifecycle methods do we need to implement?
  prefs: []
  type: TYPE_NORMAL
- en: The easy answer is that we need to use the `onPause()` and `onResume()` methods,
    but we can take this one step further. We’ll use these methods to *replace* the
    calls to `onStop()` and `onRestart()` that we’ve already implemented.
  prefs: []
  type: TYPE_NORMAL
- en: If you look again at the lifecycle diagram, calls are made to `onPause()` and
    `onResume()`—in addition to `onStop()`, `onStart(),` and `onRestart()`—whenever
    an activity is stopped and restarted. Because we want the app to have the same
    behavior irrespective of whether the activity has been paused or stopped, we can
    use the `onPause()` and `onResume()` methods for both situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'You implement the `onPause()` and `onResume()` methods using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0206-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As before, the calls to `super.onPause()` and `super.onResume()` are mandatory.
    They call the `onPause()` and `onResume()` methods in the `Activity` superclass,
    and without these method calls, the code won’t compile.
  prefs: []
  type: TYPE_NORMAL
- en: We want to replace the `onStop()` and `onRestart()` methods in *MainActivity.kt*
    with implementations of `onPause()` and `onResume()`. See if you can figure out
    the required code changes by having a go at the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: The complete MainActivity.kt code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full *MainActivity.kt* code for the finished app; update your code
    to include the changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0209-01.png)![image](Images/f0210-01.png)![image](Images/f0211-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we take the app for a test drive, let’s go through what happens when
    the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you run the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The user starts the app, and clicks the Start button to set the stopwatch
    going.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stopwatch starts and the `running` property is set to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0212-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Another activity appears in the foreground, leaving MainActivity partially
    visible.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onPause()` method gets called, the `offset` property is updated, and the
    stopwatch is stopped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0212-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity returns to the foreground.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `onResume()` method gets called, the `stopwatch.base` property is updated,
    the stopwatch starts, and the `offset` property is set to `0`. The stopwatch starts
    from the correct time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0212-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app and click on the Start button, the timer starts; it pauses
    when the app is partially obscured by another activity; and it starts again when
    the app is back in the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0213-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve built a working Stopwatch app, and learned how to use
    Android’s activity lifecycle methods to take control of your app’s behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Your handy guide to the activity lifecycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Method** | **When it’s called** | **Next method** |'
  prefs: []
  type: TYPE_TB
- en: '| **onCreate()** | When the activity is first created. Use it for normal setup,
    such as creating views. It also gives you a `Bundle` that contains the previously
    saved state of the activity. | `onStart()` |'
  prefs: []
  type: TYPE_TB
- en: '| **onRestart()** | When your activity has been stopped but just before it
    gets started again. | `onStart()` |'
  prefs: []
  type: TYPE_TB
- en: '| **onStart()** | When your activity is becoming visible. It’s followed by
    `onResume()` if the activity comes into the foreground, or `onStop()` if the activity
    is made invisible. | `onResume()` or `onStop()` |'
  prefs: []
  type: TYPE_TB
- en: '| **onResume()** | When your activity is in the foreground. | `onPause()` |'
  prefs: []
  type: TYPE_TB
- en: '| **onPause()** | When your activity is no longer in the foreground because
    another activity is resuming. The next activity isn’t resumed until this method
    finishes, so any code in this method needs to be quick. It’s followed by `onResume()`
    if the activity returns to the foreground, or `onStop()` if it becomes invisible.
    | `onResume()` or `onStop()` |'
  prefs: []
  type: TYPE_TB
- en: '| **onStop()** | When the activity is no longer visible. This can be because
    another activity is covering it, or because this activity is being destroyed.
    It’s followed by `onRestart()` if the activity becomes visible again, or `onDestroy()`
    if the activity is being destroyed. | `onRestart()` or `onDestroy()` |'
  prefs: []
  type: TYPE_TB
- en: '| **onDestroy()** | When your activity is about to be destroyed or because
    the activity is finishing. | None |'
  prefs: []
  type: TYPE_TB
- en: BE the Activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**On the right, you’ll see some activity code. Your job is to play like you’re
    the activity and say which code will run in each of the situations below. We’ve
    labeled the code we want you to consider. We’ve done the first one to start you
    off.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User starts the activity and starts using it.**'
  prefs: []
  type: TYPE_NORMAL
- en: '****Code segments A, G, D. The activity is created, then made visible, then
    receives the focus.****'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User starts the activity, starts using it, then switches to another app.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User starts the activity, starts using it, rotates the device, switches to
    another app, then goes back to the activity.**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This one’s tough.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0215-01.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Activity Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**On the right, you’ll see some activity code. Your job is to play like you’re
    the activity and say which code will run in each of the situations below. We’ve
    labeled the code we want you to consider. We’ve done the first one to start you
    off.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User starts the activity and starts using it.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code segments A, G, D. The activity is created, then made visible, then receives
    the focus.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User starts the activity, starts using it, then switches to another app.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code segments A, G, D, B, E. The activity is created, then made visible,
    then receives the focus. When the user switches to another app, it loses the focus
    and is no longer visible to the user.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User starts the activity, starts using it, rotates the device, switches to
    another app, then goes back to the activity.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code segments A, G, D, B, E, H, A, G, D, B, E, C, G, D. First, the activity
    is created, made visible, and receives the focus. When the device is rotated,
    the activity loses the focus, stops being visible, and is destroyed. It’s then
    created again, made visible, and receives the focus. When the user switches to
    another app and back again, the activity loses the focus, loses visibility, becomes
    visible again, and regains the focus.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0216-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 5](#the_activity_lifecyclecolon_being_an_act) under your
    belt and now you’ve added the activity lifecycle to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0217-01.png)![image](Images/f0217-02.png)'
  prefs: []
  type: TYPE_IMG
