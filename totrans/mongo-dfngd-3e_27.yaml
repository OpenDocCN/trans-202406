- en: Chapter 21\. Setting Up MongoDB in Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 2](ch02.xhtml#chapter-2), we covered the basics of starting MongoDB.
    This chapter will go into more detail about which options are important for setting
    up MongoDB in production, including:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Commonly used options
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting up and shutting down MongoDB
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-related options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging considerations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting from the Command Line
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MongoDB server is started with the `mongod` executable. `mongod` has many
    configurable startup options; to view all of them, run `mongod --help` from the
    command line. A couple of the options are widely used and important to be aware
    of:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '`--dbpath`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify an alternate directory to use as the data directory; the default is
    */data/db/* (or, on Windows, *\data\db\* on the MongoDB binary’s volume). Each
    `mongod` process on a machine needs its own data directory, so if you are running
    three instances of `mongod` on one machine, you’ll need three separate data directories.
    When `mongod` starts up, it creates a *mongod.lock* file in its data directory,
    which prevents any other `mongod` process from using that directory. If you attempt
    to start another MongoDB server using the same data directory, it will give an
    error:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`--port`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the port number for the server to listen on. By default, `mongod` uses
    port 27017, which is unlikely to be used by another process (besides other `mongod`
    processes). If you would like to run more than one `mongod` process on a single
    machine, you’ll need to specify different ports for each one. If you try to start
    `mongod` on a port that is already being used, it will give an error:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`--fork`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: On Unix-based systems, fork the server process, running MongoDB as a daemon.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: If you are starting up *mongod* for the first time (with an empty data directory),
    it can take the filesystem a few minutes to allocate database files. The parent
    process will not return from forking until the preallocation is done and *mongod*
    is ready to start accepting connections. Thus, *fork* may appear to hang. You
    can tail the log to see what it is doing. You must use `--logpath` if you specify
    `--fork`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`--logpath`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Send all output to the specified file rather than outputting on the command
    line. This will create the file if it does not exist, assuming you have write
    permissions to the directory. It will also overwrite the log file if it already
    exists, erasing any older log entries. If you’d like to keep old logs around,
    use the `--logappend` option in addition to `--logpath` (highly recommended).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '`--directoryperdb`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Put each database in its own directory. This allows you to mount different databases
    on different disks, if necessary or desired. Common uses for this are putting
    a local database on its own disk (replication) or moving a database to a different
    disk if the original one fills up. You could also put databases that handle more
    load on faster disks and databases with a lower load on slower disks. This basically
    gives you more flexibility to move things around later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '`--config`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Use a configuration file for additional options not specified on the command
    line. This is typically used to make sure options are the same between restarts.
    See [“File-Based Configuration”](#sect2_d1e8618) for details.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to start the server as a daemon listening on port 5586 and sending
    all output to *mongodb.log*, we could run this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you first install and start MongoDB, it is a good idea to look at the log.
    This might be an easy thing to miss, especially if MongoDB is being started from
    an init script, but the log often contains important warnings that prevent later
    errors from occurring. If you don’t see any warnings in the MongoDB log on startup,
    then you are all set. (Startup warnings will also appear on shell startup.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are any warnings in the startup banner, take note of them. MongoDB
    will warn you about a variety of issues: that you’re running on a 32-bit machine
    (which MongoDB is not designed for), that you have NUMA enabled (which can slow
    your application to a crawl), or that your system does not allow enough open file
    descriptors (MongoDB uses a lot of file descriptors).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The log preamble won’t change when you restart the database, so feel free to
    run MongoDB from an init script and ignore the logs, once you know what they say.
    However, it’s a good idea to check again each time you do an install, upgrade,
    or recover from a crash, just to make sure MongoDB and your system are on the
    same page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start the database, MongoDB will write a document to the *local.startup_log*
    collection that describes the version of MongoDB, underlying system, and flags
    used. We can look at this document using the *mongo* shell:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This collection can be useful for tracking upgrades and changes in behavior.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: File-Based Configuration
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB supports reading configuration information from a file. This can be
    useful if you have a large set of options you want to use or are automating the
    task of starting up MongoDB. To tell the server to get options from a configuration
    file, use the `-f` or `--config` flags. For example, run `mongod --config ~/.mongodb.conf`
    to use *~/.mongodb.conf* as a configuration file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'The options supported in a configuration file are the same as those accepted
    at the command line. However, the format is different. As of MongoDB 2.6, MongoDB
    configuration files use the YAML format. Here’s an example configuration file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This configuration file specifies the same options we used earlier when starting
    with regular command-line arguments. Note that these same options are reflected
    in the *startup_log* collection document we looked at in the previous section.
    The only real difference is that the options are specified using JSON rather than
    YAML.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: In MongoDB 4.2, expansion directives were added to allow the loading of specific
    configuration file options or loading of the entire configuration file. The advantage
    of expansion directives is that confidential information, such as passwords and
    security certificates, does not have to be stored in the config file directly.
    The `--configExpand` command-line option enables this feature and must include
    the expansion directives you wish to enable. `__rest` and `__exec` are the current
    implementation of the expansion directives in MongoDB. The `__rest` expansion
    directive loads specific configuration file values or loads the entire configuration
    file from a REST endpoint. The `__exec` expansion directive loads specific configuration
    file values or loads the entire configuration file from a shell or terminal command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Stopping MongoDB
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to safely stop a running MongoDB server is at least as important
    as being able to start one. There are a couple of different options for doing
    this effectively.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The cleanest way to shut down a running server is to use the `shutdown` command,
    `{"shutdown" : 1}`. This is an admin command and must be run on the *admin* database.
    The shell features a helper function to make this easier:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When run on a primary, the `shutdown` command steps down the primary and waits
    for a secondary to catch up before shutting down the server. This minimizes the
    chance of rollback, but the shutdown isn’t guaranteed to succeed. If there is
    no secondary available that can catch up within a few seconds, the `shutdown`
    command will fail and the (former) primary will not shut down:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can force the `shutdown` command to shut down a primary by using the `force`
    option:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is equivalent to sending a SIGINT or SIGTERM signal (all three of these
    options result in a clean shutdown, but there may be unreplicated data). If the
    server is running as the foreground process in a terminal, a SIGINT can be sent
    by pressing Ctrl-C. Otherwise, a command like `kill` can be used to send the signal.
    If *mongod* had 10014 as its PID, the command would be `kill -2 10014` (SIGINT)
    or `kill 10014` (SIGTERM).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: When *mongod* receives a SIGINT or SIGTERM, it will do a clean shutdown. This
    means it will wait for any running operations or file preallocations to finish
    (this could take a moment), close all open connections, flush all data to disk,
    and halt.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Security
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do not set up publicly addressable MongoDB servers. You should restrict access
    as tightly as possible between the outside world and MongoDB. The best way to
    do this is to set up firewalls and only allow MongoDB to be reachable on internal
    network addresses. [Chapter 24](ch24.xhtml#chapter-ops) covers what connections
    it’s necessary to allow between MongoDB servers and clients.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Beyond firewalls, there are a few options you can add to your config file to
    make it more secure:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`--bind_ip`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the interfaces that you want MongoDB to listen on. Generally you want
    this to be an internal IP: something application servers and other members of
    your cluster can access but that is inaccessible to the outside world. *localhost*
    is fine for *mongos* processes if you’re running the application server on the
    same machine. For config servers and shards, they’ll need to be addressable from
    other machines, so stick with non-*localhost* addresses.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Starting in MongoDB 3.6, *mongod* and *mongos* processes bind to *localhost*
    by default. When bound only to *localhost*, *mongod* and *mongos* will only accept
    connections from clients running on the same machine. This helps limit the exposure
    of unsecured MongoDB instances. To bind to other addresses, use the `net.bindIp`
    configuration file setting or the `--bind_ip` command-line option to specify a
    list of hostnames or IP addresses.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '`--nounixsocket`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Disable listening on the UNIX domain socket. If you’re not planning to connect
    via filesystem socket, you might as well disallow it. You would only connect via
    filesystem socket on a machine that is also running an application server: you
    must be local to use a filesystem socket.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`--noscripting`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Disable server-side JavaScript execution. Some security issues that have been
    reported with MongoDB have been JavaScript-related, so it’s generally safer to
    disallow it, if your application allows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Several shell helpers assume that JavaScript is available on the server, notably
    `sh.status()`. You will see errors if you attempt to run any of these helpers
    with JavaScript disabled.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Data Encryption
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data encryption is available in MongoDB Enterprise. These options are not supported
    in the Community version of MongoDB.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'The data encryption process includes the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Generate a master key.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate keys for each database.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt data with the database keys.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt the database keys with the master key.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When using data encryption, all data files are encrypted in the filesystem.
    Data is only unencrypted in memory and during transmission. To encrypt all of
    MongoDB’s network traffic, you can use TLS/SSL. The data encryption options that
    MongoDB Enterprise users can add to their config files are:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`--enableEncryption`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Enables encryption in the WiredTiger storage engine. With this option, data
    stored in memory and on disk will be encrypted. This is sometimes referred to
    as “encryption at rest.” You must set this to `true` in order to pass in encryption
    keys and to configure encryption. This option is `false` by default.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`--encryptionCipherMode`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the cipher mode for encryption at rest in WiredTiger. There are two modes
    available: AES256-CBC and AES256-GCM. AES256-CBC is an acronym for 256-bit Advanced
    Encryption Standard in Cipher Block Chaining Mode. AES256-GCM uses Galois/Counter
    Mode. Both are standard encryption ciphers. As of MongoDB 4.0, MongoDB Enterprise
    on Windows no longer supports AES256-GCM.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '`--encryptionKeyFile`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Specify the path to the local keyfile if you are managing keys using a process
    other than the Key Management Interoperability Protocol (KMIP).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Enterprise also supports key management using KMIP. A discussion of
    KMIP is beyond the scope of this book. Please see the [MongoDB documentation for
    details on using KMIP with MongoDB](https://oreil.ly/TeA4t).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: SSL Connections
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw in [Chapter 18](ch18.xhtml#chapter-seeing), MongoDB supports transport
    encryption using TLS/SSL. This feature is available in all editions of MongoDB.
    By default, connections to MongoDB transfer data unencrypted. However, TLS/SSL
    ensures transport encryption. MongoDB uses native TSL/SSL libraries available
    on your operating system. Use the option `--tlsMode` and related options to configure
    TLS/SSL. Refer to [Chapter 18](ch18.xhtml#chapter-seeing) for more detail, and
    consult your driver’s documentation on how to create TLS/SSL connections using
    your language.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, *mongod* sends its logs to stdout. Most init scripts use the `--logpath`
    option to send logs to a file. If you have multiple MongoDB instances on a single
    machine (say, a *mongod* and a *mongos*), make sure that their logs are stored
    in separate files. Be sure that you know where the logs are and have read access
    to the files.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB spits out a lot of log messages, but please do not run with the `--quiet`
    option (which suppresses some of them). Leaving the log level at the default is
    usually perfect: there is enough information for basic debugging (why is this
    slow, why isn’t this starting up, etc.), but the logs do not take up too much
    space.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: If you are debugging a specific issue with your application, there are a couple
    of options for getting more information from the logs. You can change the log
    level by running the `setParameter` command, or by setting the log level at startup
    time by passing it as a string using the `--setParameter` option.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also change the log level for a particular component. This is helpful
    if you are debugging a specific aspect of your application and require more information,
    but only from that component. In this example, we set the default log verbosity
    to 1 and the query component verbosity to 2:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember to turn the log level back down to 0 when you’re done debugging, or
    your logs may be needlessly noisy. You can turn the level all the way up to 5,
    at which point `mongod` will print out almost every action it takes, including
    the contents of every request handled. This can cause a lot of I/O as *mongod*
    writes everything to the log file, which can slow down a busy system. Turning
    on profiling is a better option if you need to see every operation as it’s happening.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在调试完成后将日志级别调回到 0，否则你的日志可能会变得不必要地嘈杂。你可以将级别调到 5，此时 `mongod` 将打印出它执行的几乎每个操作，包括处理的每个请求的内容。这可能会导致大量的
    I/O，因为 *mongod* 将所有内容写入日志文件，这会减慢繁忙系统的速度。如果需要查看每个操作的实时发生情况，打开分析是一个更好的选择。
- en: 'By default, MongoDB logs information about queries that take longer than 100
    ms to run. If 100 ms is too short or too long for your application, you can change
    the threshold with `setProfilingLevel`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MongoDB 记录超过 100 毫秒的查询信息。如果 100 毫秒对于你的应用程序来说太短或太长，可以使用 `setProfilingLevel`
    更改阈值：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The second line will turn off profiling, but the value in milliseconds given
    in the first line will continue to be used as a threshold for the log (across
    all databases). You can also set this parameter by restarting MongoDB with the
    `--slowms` option.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行将关闭分析，但第一行中给出的毫秒值将继续作为日志的阈值（跨所有数据库）。你也可以通过使用 `--slowms` 选项重新启动 MongoDB 来设置此参数。
- en: 'Finally, set up a cron job that rotates your log every day or week. If MongoDB
    was started with `--logpath`, sending the process a SIGUSR1 signal will make it
    rotate the log. There is also a `logRotate` command that does the same thing:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，设置一个 cron 作业，每天或每周轮换一次日志。如果 MongoDB 是通过 `--logpath` 启动的，向该进程发送 SIGUSR1 信号将使其轮换日志。还有一个
    `logRotate` 命令可以做同样的事情：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You cannot rotate logs if MongoDB was not started with `--logpath`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 MongoDB 没有通过 `--logpath` 启动，则无法轮换日志。
