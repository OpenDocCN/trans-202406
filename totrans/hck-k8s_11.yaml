- en: Appendix A. A Pod-Level Attack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 一个 Pod 级攻击
- en: This appendix is a hands-on exploration of attacks on the pod level, as we discussed
    in [Chapter 2](ch02.xhtml#ch-pod-level-resources).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录是对 pod 级攻击的实践探索，正如我们在 [第二章](ch02.xhtml#ch-pod-level-resources) 中讨论的那样。
- en: '![captain](Images/haku_0000.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![captain](Images/haku_0000.png)'
- en: Dread cyberpirate Captain Hashjack can now execute code inside a pod remotely
    and they will start to explore its configuration to see what else can be accessed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可怕的网络海盗哈希杰克现在可以远程在 pod 中执行代码，并且他们将开始探索其配置，看看还能访问什么。
- en: Like all good pirates, Captain Hashjack has a treasure map, but this is no ordinary
    map with a clearly defined destination. Instead, this map describes only the journey,
    with no guarantee of reaching a conclusion. It’s a cluster attack map, as shown
    in [Figure A-1](#pod-attack-map), and it is used to guide us through the rest
    of the appendix. And now, from inside the pod, it’s time to explore.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有优秀的海盗一样，哈希杰克有一张宝藏地图，但这不是一张有明确目的地的普通地图。相反，这张地图只描述了旅程，不保证达到结论。这是一个集群攻击地图，如
    [图 A-1](#pod-attack-map) 所示，并且用于指导我们浏览附录的其余部分。现在，从 pod 内部开始探索。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Securing any system is difficult. The best way to find vulnerabilities and misconfiguration
    is to methodically observe your environment, build up a library of your own attacks
    and patterns, and not give up!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 保护任何系统都很困难。发现漏洞和配置错误的最佳方法是系统地观察您的环境，建立自己的攻击和模式库，并且不要放弃！
- en: '![Pod Attack map](Images/haku_aa01.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Pod 攻击地图](Images/haku_aa01.png)'
- en: Figure A-1\. Pod attack map
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-1\. Pod 攻击地图
- en: Filesystem
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统
- en: 'Upon entering a new environment, a little basic checking may lead to useful
    discoveries. The first thing Hashjack does is check to see what kind of container
    they’re in. Checking `/proc/self/cgroup` often gives a clue, and here they can
    see they’re in Kubernetes from the clue `/kubepods/besteffort/pod8a6fa26b-...`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 进入新环境时，一些基本的检查可能会带来有用的发现。哈希杰克首先要做的是检查他们所在的容器类型。经常检查 `/proc/self/cgroup` 可能会提供线索，这里他们可以看到从线索
    `/kubepods/besteffort/pod8a6fa26b-...` 知道他们在 Kubernetes 中：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, they might check for capabilities with their process’s status entry in
    */proc/self/status*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，他们可能会检查他们的进程状态输入在 */proc/self/status* 中：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The kernel freely provides this information in order to help Linux applications,
    and an attacker in a container can use it to their advantage. Interesting entries
    can be grepped out (notice we’re root below):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 内核会自由提供这些信息，以帮助 Linux 应用程序，而在容器中的攻击者可以利用这些信息来获取优势。可以用 grep 命令找出有趣的条目（注意下面我们是
    root 用户）：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The capabilities are not very readable, and need to be decoded:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些能力并不是很容易读懂，需要进行解码：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also use the `capsh --print` command to show capabilities (if it’s
    installed), `getpcaps` and `filecap` (for a single process or file, respectively),
    `pscap` (for all running processes), and `captest` (for the current process’s
    context):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `capsh --print` 命令来显示能力（如果已安装），`getpcaps` 和 `filecap`（分别用于单个进程或文件），`pscap`（用于所有运行进程），以及
    `captest`（用于当前进程的上下文）：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: A production container should never contain these debugging commands, instead
    only containing production applications and code. Using static, slim, or `distroless`
    containers reduces the attack surface of a container by limiting an attacker’s
    access to useful information. This is also why you should limit the availability
    of network-capable applications like `curl` and `wget` where possible, as well
    as any interpreters with network libraries that can be used to pull external tools
    into a running container.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个生产容器永远不应包含这些调试命令，而应仅包含生产应用程序和代码。使用静态、精简或 `distroless` 容器可通过限制攻击者对有用信息的访问来减少容器的攻击面。这也是为什么在可能的情况下应限制像
    `curl` 和 `wget` 这样的具有网络功能的应用程序的可用性，以及任何带有网络库的解释器，这些解释器可以用来将外部工具拉入运行中的容器。
- en: You may prefer to run Jess Frazelle’s [amicontained](https://oreil.ly/j919l),
    which runs these checks quickly and also handily detects capability, seccomp,
    and LSM configuration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能更喜欢运行杰斯·弗拉泽尔的 [amicontained](https://oreil.ly/j919l)，它可以快速运行这些检查，并方便地检测能力、seccomp
    和 LSM 配置。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This command requires internet access, which is another privilege that production
    workloads should not be afforded unless required for production operation. Air-gapped
    (fully offline) clusters afford greater security from this type of attack at the
    cost of administrative overhead.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令需要互联网访问权限，这是生产工作负载不应授予的另一项特权，除非需要用于生产操作。空气隔离（完全脱机）集群提供了更高的安全性，但会增加管理开销。
- en: 'Let’s use `amicontained`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `amicontained`：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_a_pod_level_attack_CO1-1)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_a_pod_level_attack_CO1-1)'
- en: Export the sha256sum for verification.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 导出 sha256sum 进行验证。
- en: '[![2](Images/2.png)](#co_a_pod_level_attack_CO1-2)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_a_pod_level_attack_CO1-2)'
- en: Download and check the sha256sum.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并检查 sha256sum。
- en: '[![3](Images/3.png)](#co_a_pod_level_attack_CO1-3)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_a_pod_level_attack_CO1-3)'
- en: We installed to a non-standard path to evade immutable filesystems, so we run
    a fully-qualified path
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装到非标准路径以规避不可变文件系统，因此我们运行完全限定路径
- en: Jackpot! There’s a lot of information available about the security configuration
    of a container—from within it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大发现！从容器内部可以获取大量关于安全配置的信息。
- en: 'We can check our `cgroup` limits on the filesystem too:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在文件系统上检查我们的 `cgroup` 限制：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`free -m` uses host-level APIs available to all processes and has not been
    updated to run with `cgroups`. Check the system API to see the process’s actual
    `cgroup` limits:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`free -m` 使用主机级别的API可供所有进程使用，并未更新以与 `cgroups` 兼容。检查系统API以查看进程的实际 `cgroup` 限制：'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Is this tremendously useful to an attacker? Not really. Exhausting the memory
    of a process and causing denial of service is a basic attack (although [fork bombs](https://oreil.ly/pd9zR)
    are elegantly scripted Bash poetry). Nevertheless, you should set `cgroups` to
    prevent DoS of applications in a container or pod (which support individual configuration).
    Cgroups are not a security boundary, and cgroups v1 can be escaped from a privileged
    pod, as nicely demonstrated in [Figure A-2](#tweet-fel1x-cgroup-container-escape).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对攻击者非常有用吗？其实不然。耗尽进程的内存并导致拒绝服务是一种基本攻击（尽管[分叉炸弹](https://oreil.ly/pd9zR)被优雅地编写成Bash诗歌）。尽管如此，您应该设置
    `cgroups` 以防止容器或Pod中的应用程序DoS（支持个别配置）。Cgroups不是安全边界，特权Pod可以从 `cgroups v1` 中逃逸，正如[图A-2](#tweet-fel1x-cgroup-container-escape)中演示的那样。
- en: '![haku aa02](Images/haku_aa02.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![haku aa02](Images/haku_aa02.png)'
- en: Figure A-2\. Felix Wilhelm’s cleverly tweet-sized `cgroups v1` container breakout
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图A-2\. Felix Wilhelm精心制作的 `cgroups v1` 容器逃逸的巧妙推文大小
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The more secure, and rootless-prerequisite, `cgroups v2` should be the default
    in most Linux installations [from 2022](https://oreil.ly/9lOZa).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 更安全且无根本的 `cgroups v2` 应该是大多数Linux安装的默认选项[从2022年起](https://oreil.ly/9lOZa)。
- en: Denial of service is more likely to be an application fault than an attack—serious
    DDoS (internet-based distributed denial of service) should be handled by networking
    equipment in front of the cluster for bandwidth and mitigation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 拒绝服务更有可能是应用程序的故障，而不是攻击——严重的DDoS（基于互联网的分布式拒绝服务）应该由集群前面的网络设备处理，用于带宽和缓解。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In September of 2017 Google fought off a [2.54 Tbps DDoS](https://oreil.ly/zEUbp).
    This type of traffic is dropped by network router hardware at Ingress to prevent
    overwhelming internal systems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年9月，谷歌成功抵御了一次[2.54 Tbps DDoS攻击](https://oreil.ly/zEUbp)。这类流量在进入网络路由器硬件时被丢弃，以防止对内部系统造成过载。
- en: 'Kubernetes sets some useful environment variables into each container in a
    pod:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 在每个Pod中为每个容器设置了一些有用的环境变量：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is easy for an application to read its configuration from environment variables,
    and the [12 Factor App](https://12factor.net) suggests that config and Secrets
    should be set in the environment. Environment variables are not a safe place to
    store Secrets as they can be read easily from the PID namespace by a process,
    user, or malicious code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以轻松从环境变量中读取其配置，而[12因素应用](https://12factor.net)建议将配置和机密信息设置在环境中。环境变量不是存储机密信息的安全场所，因为进程、用户或恶意代码可以轻松从PID命名空间中读取它们。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can see a process’s environment as root, or the same user. Check PID 1
    with a null-byte translation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以作为root或相同用户查看进程的环境。使用空字节转换检查PID 1：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Even if no compromise takes place, many applications dump their environment
    when they crash, leaking Secrets to anyone who can access the logging system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有达成妥协，许多应用程序在崩溃时会转储其环境，将机密信息泄露给可以访问日志系统的任何人。
- en: Kubernetes Secrets should not be mounted as environment variables.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Secrets 不应作为环境变量挂载。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'As well as being easy to collect from a parent process if an attacker has remote
    code execution, Kubernetes container environment variables are not updated after
    container creation: if the Secret is updated by the API server, the environment
    variable keeps the same value.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者具有远程代码执行权限，从父进程轻松收集，Kubernetes容器环境变量在容器创建后不会更新：如果API服务器更新了Secret，则环境变量保持相同的值。
- en: The safer option is to use a well-known path, and mount a Secret `tmpfs` volume
    into the container, so an adversary has to guess or find the Secret file path,
    which is less likely to be automated by an attacker. Mounted Secrets are updated
    automatically, after a `kubelet` sync period and cache propagation delay.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更安全的选择是使用一个众所周知的路径，并将秘密`tmpfs`卷挂载到容器中，这样对手就必须猜测或找到秘密文件路径，这对攻击者来说不太可能被自动化。挂载的秘密会在`kubelet`同步周期和缓存传播延迟之后自动更新。
- en: 'Here’s an example of a Secret mounted into the path */etc/foo*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个将秘密挂载到路径*/etc/foo*的示例：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Mounting Secrets as files protects against information leakage and ensures adversaries
    like Captain Hashjack don’t stumble across production secrets when diving through
    stolen application logs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将秘密作为文件挂载可以防止信息泄露，并确保像Hashjack船长这样的对手在通过窃取的应用程序日志时不会意外发现生产秘密。
- en: tmpfs
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tmpfs
- en: A fastidious explorer leaves no sea uncharted, and to Captain Hashjack attacking
    the filesystem is no different. Checking for anything external added to the mount
    namespace is the first port of call, for which common tools like `mount` and `df`
    can be used.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个谨慎的探险者不会放过任何一个未探索的海洋，对Hashjack船长来说，攻击文件系统也不例外。检查是否有任何外部添加到挂载命名空间中的内容是第一个被调查的地方，常用工具如`mount`和`df`可以用来进行此类检查。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Every external device, filesystem, socket, or entity shared into a container
    increases a risk of container breakout through exploit or misconfiguration. Containers
    are at their most secure when they contain only the bare essentials for operation,
    and share nothing with each other or the underlying host.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 每个外部设备、文件系统、套接字或共享到容器中的实体都会增加通过利用或配置错误导致容器突破的风险。当容器仅包含操作所需的基本要素并且彼此之间或与底层主机共享时，它们处于最安全状态。
- en: 'Let’s start with a search of the filesystem mount points for a common container
    filesystem driver, `overlayfs`. This may leak information about the type of container
    runtime that has configured the filesystem:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先搜索文件系统挂载点，查找常见的容器文件系统驱动程序`overlayfs`。这可能会泄露有关配置了文件系统的容器运行时类型的信息：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can see that the underlying container runtime is using a file path containing
    the name `containerd`, and the location of the container’s filesystem on the host
    disk is */var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/316/fs*.
    There are multiple layered directories listed, and these are combined into a single
    filesystem at runtime by `overlayfs`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到底层容器运行时正在使用一个包含名称`containerd`的文件路径，并且容器在主机磁盘上的文件系统位置为*/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/316/fs*。列出了多个分层目录，并且这些目录在运行时通过`overlayfs`组合成单个文件系统。
- en: 'These paths are fingerprints of the container runtime’s default configuration,
    and `runc` leaks its identity in the same way, with a different filesystem layout:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些路径是容器运行时默认配置的指纹，而`runc`通过不同的文件系统布局泄露其身份：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the `df` command to see if there are any Secrets mounted into the container.
    In this example no external entities are mounted into the container:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`df`命令查看是否有任何挂载到容器中的秘密。在这个例子中，没有外部实体挂载到容器中：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can see that `tmpfs` is used for many different mounts, and some mounts are
    masking host filesystems in */proc* and `/sys`. The container runtime performs
    additional masking on the special files in those directories.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`tmpfs`用于许多不同的挂载，一些挂载掩盖了*/proc*和`/sys`中的主机文件系统。容器运行时对这些目录中的特殊文件进行了额外的掩盖。
- en: 'Potentially interesting mounts in a vulnerable container filesytem may contain
    host mounted Secrets and sockets, especially the infamous Docker socket, and Kubernetes
    service accounts that may have RBAC authorization to escalate privilege, or enable
    further attacks:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在易受攻击的容器文件系统中，可能包含主机挂载的秘密和套接字，尤其是臭名昭著的Docker套接字和可能具有RBAC授权以升级权限或启用进一步攻击的Kubernetes服务账户：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The easiest and most convenient of all container breakouts is the */var/run/docker.sock*
    mount points: the container runtime’s socket from the host, that gives access
    to the Docker daemon running on the host. If those new containers are privileged,
    they can be used to trivially “escape” the container namespace and access the
    underlying host as root, as we saw previously in this chapter.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有容器突破中最简单和最方便的是*/var/run/docker.sock*挂载点：从主机获取的容器运行时套接字，可访问主机上运行的Docker守护程序。如果这些新容器是特权容器，则可以轻松地“逃离”容器命名空间并以root身份访问底层主机，正如我们在本章前面看到的。
- en: Other appealing targets include the Kubernetes service account tokens under
    */var/run/secrets/kubernetes.io/serviceaccount*, or writable host mounted directories
    like */etc/secret-volume*. Any of these could lead to a breakout, or assist a
    pivot.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 其他吸引人的目标包括 Kubernetes 服务账户令牌在 */var/run/secrets/kubernetes.io/serviceaccount*
    下，或像 */etc/secret-volume* 这样的可写主机挂载目录。其中任何一个都可能导致突破，或者帮助进行轴心转移。
- en: Everything a `kubelet` mounts into its containers is visible to the root user
    on the `kubelet`’s host. We’ll see what the `serviceAccount` mounted at */run/secrets/kubernetes.io/serviceaccount*
    looks like later, and we investigated what to do with stolen `serviceAccount`
    credentials in [Chapter 8](ch08.xhtml#ch-policy).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubelet` 挂载到其容器中的所有内容对于 `kubelet` 主机上的 root 用户都是可见的。稍后我们将看到挂载在 */run/secrets/kubernetes.io/serviceaccount*
    下的 `serviceAccount` 是什么样子，并且我们调查了在 [第8章](ch08.xhtml#ch-policy) 中偷窃 `serviceAccount`
    凭据后该怎么办。'
- en: 'From within a pod `kubectl` uses the credentials in */run/secrets/kubernetes.io/serviceaccount*
    by default. From the `kubelet` host these files are mounted under */var/lib/kubelet/pods/123e4567-e89b-12d3-a456-426614174000/volumes/kubernetes.io~secret/my-pod-token-7vzn2*,
    so load the following command into a Bash shell:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pod 内部，默认情况下 `kubectl` 使用 */run/secrets/kubernetes.io/serviceaccount* 中的凭据。从
    `kubelet` 主机上，这些文件被挂载到 */var/lib/kubelet/pods/123e4567-e89b-12d3-a456-426614174000/volumes/kubernetes.io~secret/my-pod-token-7vzn2*
    下，因此将以下命令加载到 Bash shell 中：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And run it against a directory:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 并在目录下运行它：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You’re now able to use the `system:serviceaccount:kube-system:priv-app` service
    account (SA) more easily with `kubectl` as it’s configured in your *~/.kube/config*.
    An attacker can do the same thing—hostile root access to Kubernetes nodes reveals
    all its Secrets!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以更容易地使用 `kubectl` 配置在你的 *~/.kube/config* 中的 `system:serviceaccount:kube-system:priv-app`
    服务账户 (SA)。攻击者也可以做同样的事情——对 Kubernetes 节点的敌意根访问会显露所有的 Secrets！
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: CSI storage interfaces and host filesystem mounts both pose a security risk
    if others have access to them. We explore external storage, the Container Storage
    Interface (CSI), and other mounts in greater detail in the [Chapter 6](ch06.xhtml#ch-storage).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他人可以访问 CSI 存储接口和主机文件系统挂载，这些都会带来安全风险。我们将在 [第6章](ch06.xhtml#ch-storage) 中更详细地探讨外部存储、容器存储接口
    (CSI) 和其他挂载。
- en: What else is there mounted that might catch an adversary’s treasure-hungry gaze?
    Let’s explore further.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 还有什么其他挂载的内容可能会引起对手贪婪目光？让我们进一步探索。
- en: Host Mounts
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机挂载
- en: The Kubernetes `hostPath` volume type mounts a filesystem path from the host
    into the container, which may be useful for some applications. */var/log* is a
    popular mount point, so the host’s journal process collects container syslog events.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的 `hostPath` 卷类型将主机的文件系统路径挂载到容器中，这对某些应用程序可能很有用。*/var/log* 是一个常见的挂载点，因此主机的日志进程会收集容器的系统日志事件。
- en: Warning
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: '`HostPath` volumes should be avoided when possible as they present many risks.
    Best practice is to scope to only the needed file or directory using the `ReadOnly`
    mount flag.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能避免使用 `HostPath` 卷，因为它们存在许多风险。最佳实践是使用 `ReadOnly` 挂载标志仅限制到所需的文件或目录。
- en: Other use cases for `hostPath` mounts include persistence for datastores in
    the pod or hosting static data, libraries, and caches.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`hostPath` 挂载的其他用例包括在 pod 中数据存储的持久性，或者托管静态数据、库和缓存。'
- en: Using host disks or permanently attaching storage to a node creates a coupling
    between workloads and the underlying node, as the workloads must be restarted
    on that node in order to function properly. This makes scaling and resilience
    much more difficult.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用主机磁盘或永久附加存储到节点会创建工作负载和底层节点之间的耦合，因为必须在该节点上重新启动工作负载才能正常运行。这使得扩展和弹性更加困难。
- en: Host mounts can be dangerous if a symlink is created inside the container that
    is unintentionally resolved on the host filesystem. This happened in CVE-2017–1002101,
    where a bug in the symbolic link–handling code allowed an adversary inside a container
    to explore the host mounted filesystem that the mount point was on.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器内意外创建了符号链接，解析到主机文件系统，主机挂载可能会很危险。在 CVE-2017–1002101 中发生了这种情况，符号链接处理代码中的错误允许容器内的对手探索挂载点所在的主机挂载文件系统。
- en: Mounting of sockets from the host into the container is also a popular `hostMount`
    use case, which allows a client inside the container to run commands against a
    server on the host. This is an easy path to container breakout by starting a new
    privileged container on the host and escaping.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将主机的套接字挂载到容器中也是一种常见的 `hostMount` 使用场景，它允许容器内的客户端针对主机上的服务器运行命令。通过在主机上启动新的特权容器并逃逸，这是一个容器突破的简便路径。
- en: Mounting sensitive directories or files from the host may also provide an opportunity
    to pivot if they can be used for network services.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 挂载主机上的敏感目录或文件，如果可以用于网络服务，也可能提供转向的机会。
- en: '`hostPath` volumes are writeable on the host partition outside the container,
    and are always mounted on the host filesystem as owned by `root:root`. For this
    reason, a nonroot user should always be used inside the container, and filesystem
    permissions should always be configured on the host if write access is needed
    inside the container.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`hostPath`卷是主机分区外的可写卷，始终作为`root:root`所有的主机文件系统上挂载。因此，在容器内应始终使用非root用户，并且如果容器内需要写入访问权限，则应始终在主机上配置文件系统权限。'
- en: Warning
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If you are restricting `hostPath` access to specific directories with admission
    controllers, those `volumeMounts` must be `readOnly`, otherwise new symlinks can
    be used to traverse the host filesystem.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用准入控制器限制对特定目录的`hostPath`访问，那么这些`volumeMounts`必须是`readOnly`，否则新的符号链接可以用来遍历主机文件系统。
- en: Ultimately data is the lifeblood of your business, and managing state is hard.
    An attacker will be looking to gather, exfiltrate, and cryptolock any data they
    can find in your systems. Consuming an external service (such as an object store
    or database hosted outside your cluster) to persist data is often the most resilient
    and scalable way to secure a system—however, for high-bandwidth or low-latency
    applications this may be impossible.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，数据是您业务的生命线，管理状态是困难的。攻击者将试图收集、外泄和加密锁定他们在您系统中找到的任何数据。使用外部服务（如外部托管的对象存储或数据库）来持久化数据通常是确保系统安全的最坚固和可扩展的方式——然而，对于高带宽或低延迟应用程序，这可能是不可能的。
- en: For everything else, cloud provider or internal service integrations remove
    the link between a workload and the underlying host, which makes scaling, upgrades,
    and system deployments much easier.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他所有内容，云提供商或内部服务集成去除了工作负载与底层主机之间的关联，这使得扩展、升级和系统部署更加容易。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Managed services and dedicated infrastructure clusters are an easier cluster
    security abstraction to reason about, and we talk more about them in [Chapter 7](ch07.xhtml#ch-hard-multi-tenancy).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 管理服务和专用基础设施集群是更容易理解的集群安全抽象，我们在[第7章](ch07.xhtml#ch-hard-multi-tenancy)中会更多地讨论它们。
- en: Hostile Containers
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敌对容器
- en: A hostile container is one that is under an attacker’s control. It may be created
    by an attacker with Kubernetes access (perhaps the `kubelet`, or API server),
    or a container image with automated exploit code embedded (for example, a “trojanized”
    image from [dockerscan](https://oreil.ly/2vvV0) that can start a reverse shell
    in a legitimate container to give attackers access to your production systems),
    or have been accessed by a remote adversary post-deployment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 敌对容器是一个由攻击者控制的容器。它可能由具有Kubernetes访问权限的攻击者创建（可能是`kubelet`或API服务器），或者包含自动化利用代码的容器镜像（例如，从[dockerscan](https://oreil.ly/2vvV0)下载的“木马”镜像，可以在合法容器中启动反向Shell，以便攻击者访问您的生产系统），或者是在部署后被远程对手访问过的容器。
- en: What about the filesystem of a hostile container image? If Captain Hashjack
    can force Kubernetes to run a container they have built or corrupted, they may
    try to attack the orchestrator or container, runtimes, or clients (such as `kubectl`).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 关于敌对容器镜像的文件系统呢？如果Hashjack队长能强制Kubernetes运行一个他们构建或损坏的容器，他们可能会尝试攻击编排器或容器、运行时或客户端（如`kubectl`）。
- en: 'One attack ([CVE-2019-16884](https://oreil.ly/Hj4i3)) involves a container
    image that defines a `VOLUME` over a directory AppArmor uses for configuration,
    essentially disabling it at container runtime:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个攻击（[CVE-2019-16884](https://oreil.ly/Hj4i3)）涉及一个定义在容器镜像中的`VOLUME`，覆盖了AppArmor用于配置的目录，基本上在容器运行时禁用了它：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This may be used as part of a further attack on the system, but as AppArmor
    is unlikely to be the only layer of defense, it is not as serious as it may appear.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能被用作对系统的进一步攻击的一部分，但由于AppArmor不太可能是唯一的防御层，因此它并不像看起来那么严重。
- en: Another dangerous container image is one used by a */proc/self/exe* breakout
    in [CVE-2019-5736](https://oreil.ly/1j7We). This exploit requires a container
    with a maliciously linked `ENTRYPOINT`, so can’t be run in a container that has
    already started.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个危险的容器镜像是一个在[CVE-2019-5736](https://oreil.ly/1j7We)中进行*/proc/self/exe*突破的容器。这个漏洞利用需要一个具有恶意链接`ENTRYPOINT`的容器，因此无法在已经启动的容器中运行。
- en: As these attacks show, unless a container is built from trusted components,
    it should be considered untrusted to defend against further unknown attacks such
    as this.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这些攻击所显示的，除非容器是由可信组件构建的，否则应将其视为不受信任以防御进一步未知的攻击，例如此类攻击。
- en: Caution
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A collection of `kubectl cp` CVEs ([CVE-2018-1002100](https://oreil.ly/QdTZ9),
    [CVE-2019-11249](https://oreil.ly/wB13O)) require a malicious tar binary inside
    the container. The vulnerability stems from `kubectl` trusting the input it receives
    from the `scp` and `tar` process inside the container, which can be manipulated
    to overwrite files on the machine the `kubectl` binary is being run on.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列的`kubectl cp` CVE（[CVE-2018-1002100](https://oreil.ly/QdTZ9)，[CVE-2019-11249](https://oreil.ly/wB13O)）需要容器内存在恶意的tar二进制文件。这种漏洞源于`kubectl`信任来自容器内`scp`和`tar`进程的输入，可以被操纵以覆盖运行`kubectl`二进制文件的主机上的文件。
- en: Runtime
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时
- en: The danger of the */proc/self/exe* breakout in [CVE-2019-5736](https://oreil.ly/yRLNz)
    is that a hostile container process can overwrite the `runc` binary on the host.
    That `runc` binary is owned by root, but as it is also executed by root on the
    host (as most container runtimes need some root capabilities), it can be overwritten
    from inside the container in this attack. This is because the container process
    is a child of `runc`, and this exploit uses the permission `runc` has to overwrite
    itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[CVE-2019-5736](https://oreil.ly/yRLNz)中*/proc/self/exe*的突破的危险在于，敌对的容器进程可以覆盖主机上的`runc`二进制文件。那个`runc`二进制文件由root所有，但由于它也是在主机上由root执行（因为大多数容器运行时需要一些root能力），因此可以从容器内部被覆盖。这是因为容器进程是`runc`的子进程，而这种利用利用了`runc`有权覆盖自身的权限。'
- en: Note
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Protecting the host from privileged container processes is best achieved by
    removing root privileges from the container runtime. Both `runc` and Podman can
    run in rootless mode, which we explore in [Chapter 3](ch03.xhtml#ch-container-runtime-isolation).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 保护主机免受特权容器进程的最佳方法是从容器运行时中删除root权限。`runc`和Podman都可以在无root模式下运行，我们在[第3章](ch03.xhtml#ch-container-runtime-isolation)中进行了探讨。
- en: The root user has many special privileges as a result of years of kernel development
    that assumed only one “root” user. To limit the impact of RCE to the container,
    pod, and host, applications inside a container should not be run as root, and
    their capabilities should be dropped, without the ability to gain privileges by
    setting the `allowPrivilegeEscalation` `securityContext` field to `false` (which
    sets the `no_new_privs` flag on the container process).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 超级用户拥有许多特殊权限，这是多年内核开发的结果，假定只有一个“root”用户。为了限制RCE对容器、Pod和主机的影响，容器内的应用不应以root身份运行，并且应该通过将`allowPrivilegeEscalation`的`securityContext`字段设置为`false`来丢弃其特权（这会在容器进程上设置`no_new_privs`标志）。
