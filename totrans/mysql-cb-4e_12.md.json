["```\nUPDATE profile SET cats = 0 WHERE cats = 0;\n```", "```\nmy $count = $dbh->do ($stmt);\n# report 0 rows if an error occurred\nprintf \"Number of rows affected: %d\\n\", (defined ($count) ? $count : 0);\n```", "```\nmy $sth = $dbh->prepare ($stmt);\nmy $count = $sth->execute ();\nprintf \"Number of rows affected: %d\\n\", (defined ($count) ? $count : 0);\n```", "```\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\nmy $dsn = \"DBI:mysql:cookbook:localhost;mysql_client_found_rows=1\";\nmy $dbh = DBI->connect ($dsn, \"cbuser\", \"cbpass\", $conn_attrs);\n```", "```\nclient.query(stmt)\nputs \"Number of rows affected: #{client.affected_rows}\"\n```", "```\nsth = client.prepare(stmt)\nsth.execute()\nputs \"Number of rows affected: #{sth.affected_rows}\"\n```", "```\nclient = Mysql2::Client.new(:flags=>Mysql2::Client::FOUND_ROWS, :database=>'cookbook')\n```", "```\n$count = $dbh->exec ($stmt);\nprintf (\"Number of rows updated: %d\\n\", $count);\n```", "```\n$sth = $dbh->prepare ($stmt);\n$sth->execute ();\nprintf (\"Number of rows updated: %d\\n\", $sth->rowCount ());\n```", "```\n$dsn = \"mysql:host=localhost;dbname=cookbook\";\n$dbh = new PDO ($dsn, \"cbuser\", \"cbpass\",\n                array (PDO::MYSQL_ATTR_FOUND_ROWS => 1));\n```", "```\ncursor = conn.cursor()\ncursor.execute(stmt)\nprint(\"Number of rows affected: %d\" % cursor.rowcount)\ncursor.close()\n```", "```\nfrom mysql.connector.constants import ClientFlag\n\nconn = mysql.connector.connect(\n  database=\"cookbook\",\n  host=\"localhost\",\n  user=\"cbuser\",\n  password=\"cbpass\",\n  client_flags=[ClientFlag.FOUND_ROWS]\n)\n```", "```\nres, err := db.Exec(sql)\n// Check and handle err\naffectedRows, err := res.RowsAffected()\n// Check and handle err\nfmt.Printf(\"The statement affected %d rows\\n\", affectedRows)\n```", "```\ndb, err := ↩\nsql.Open(\"mysql\", \"cbuser:cbpass@tcp(127.0.0.1:3306)/cookbook?clientFoundRows=true\")\n```", "```\nStatement s = conn.createStatement ();\nint count = s.executeUpdate (stmt);\ns.close ();\nSystem.out.println (\"Number of rows affected: \" + count);\n```", "```\nStatement s = conn.createStatement ();\nif (!s.execute (stmt))\n{\n  // there is no result set, print the row count\n  System.out.println (\"Number of rows affected: \" + s.getUpdateCount ());\n}\ns.close ();\n```", "```\n$name = $sth->{NAME}->[$i];\n```", "```\n@names = @{$sth->{NAME}};\n```", "```\n$col_pos = $sth->{NAME_hash}->{*`col_name`*};\n```", "```\n$num_cols = $sth->{NUM_OF_FIELDS};\n```", "```\nmy $stmt = \"SELECT name, birth FROM profile\";\nprintf \"Statement: %s\\n\", $stmt;\nmy $sth = $dbh->prepare ($stmt);\n$sth->execute();\n# metadata information becomes available at this point ...\nprintf \"NUM_OF_FIELDS: %d\\n\", $sth->{NUM_OF_FIELDS};\nprint \"Note: statement has no result set\\n\" if $sth->{NUM_OF_FIELDS} == 0;\nfor my $i (0 .. $sth->{NUM_OF_FIELDS}-1)\n{\n  printf \"--- Column %d (%s) ---\\n\", $i, $sth->{NAME}->[$i];\n  printf \"NAME_lc:          %s\\n\", $sth->{NAME_lc}->[$i];\n  printf \"NAME_uc:          %s\\n\", $sth->{NAME_uc}->[$i];\n  printf \"NULLABLE:         %s\\n\", $sth->{NULLABLE}->[$i];\n  printf \"PRECISION:        %d\\n\", $sth->{PRECISION}->[$i];\n  printf \"SCALE:            %d\\n\", $sth->{SCALE}->[$i];\n  printf \"TYPE:             %d\\n\", $sth->{TYPE}->[$i];\n  printf \"mysql_is_blob:    %s\\n\", $sth->{mysql_is_blob}->[$i];\n  printf \"mysql_is_key:     %s\\n\", $sth->{mysql_is_key}->[$i];\n  printf \"mysql_is_num:     %s\\n\", $sth->{mysql_is_num}->[$i];\n  printf \"mysql_is_pri_key: %s\\n\", $sth->{mysql_is_pri_key}->[$i];\n  printf \"mysql_max_length: %d\\n\", $sth->{mysql_max_length}->[$i];\n  printf \"mysql_table:      %s\\n\", $sth->{mysql_table}->[$i];\n  printf \"mysql_type:       %d\\n\", $sth->{mysql_type}->[$i];\n  printf \"mysql_type_name:  %s\\n\", $sth->{mysql_type_name}->[$i];\n}\n$sth->finish ();  # release result set because we didn't fetch its rows\n```", "```\nStatement: SELECT name, birth FROM profile\nNUM_OF_FIELDS: 2\n--- Column 0 (name) ---\nNAME_lc:          name\nNAME_uc:          NAME\nNULLABLE:\nPRECISION:        20\nSCALE:            0\nTYPE:             12\nmysql_is_blob:\nmysql_is_key:\nmysql_is_num:     0\nmysql_is_pri_key:\nmysql_max_length: 7\nmysql_table:      profile\nmysql_type:       253\nmysql_type_name:  varchar\n--- Column 1 (birth) ---\nNAME_lc:          birth\nNAME_uc:          BIRTH\nNULLABLE:         1\nPRECISION:        10\nSCALE:            0\nTYPE:             9\nmysql_is_blob:\nmysql_is_key:\nmysql_is_num:     0\nmysql_is_pri_key:\nmysql_max_length: 10\nmysql_table:      profile\nmysql_type:       10\nmysql_type_name:  date\n```", "```\nstmt = \"SELECT name, birth FROM profile\"\nputs \"Statement: #{stmt}\"\nsth = client.prepare(stmt)\nres = sth.execute()\n# metadata information becomes available at this point ...\nputs \"Number of columns: #{res.fields.size}\"\nputs \"Note: statement has no result set\" if res.count == 0\nputs \"Columns names: #{res.fields.join(\", \")}\"\nres.free\n```", "```\n$stmt = \"SELECT name, birth FROM profile\";\nprint (\"Statement: $stmt\\n\");\n$sth = $dbh->prepare ($stmt);\n$sth->execute ();\n# metadata information becomes available at this point ...\n$ncols = $sth->columnCount ();\nprint (\"Number of columns: $ncols\\n\");\nif ($ncols == 0)\n  print (\"Note: statement has no result set\\n\");\nfor ($i = 0; $i < $ncols; $i++)\n{\n  $col_info = $sth->getColumnMeta ($i);\n  $flags = implode (\",\", array_values ($col_info[\"flags\"]));\n  printf (\"--- Column %d (%s) ---\\n\", $i, $col_info[\"name\"]);\n  printf (\"pdo_type:     %d\\n\", $col_info[\"pdo_type\"]);\n  printf (\"native_type:  %s\\n\", $col_info[\"native_type\"]);\n  printf (\"len:          %d\\n\", $col_info[\"len\"]);\n  printf (\"precision:    %d\\n\", $col_info[\"precision\"]);\n  printf (\"flags:        %s\\n\", $flags);\n  printf (\"table:        %s\\n\", $col_info[\"table\"]);\n}\n```", "```\nStatement: SELECT name, birth FROM profile\nNumber of columns: 2\n--- Column 0 (name) ---\nPDO type:     2\nnative type:  VAR_STRING\nlen:          20\nprecision:    0\nflags:        not_null\ntable:        profile\n--- Column 1 (birth) ---\nPDO type:     2\nnative type:  DATE\nlen:          10\nprecision:    0\nflags:\ntable:        profile\n```", "```\nstmt = \"SELECT name, birth FROM profile\"\nprint(\"Statement: %s\" % stmt)\n# buffer cursor so that rowcount has usable value\ncursor = conn.cursor(buffered=True)\ncursor.execute(stmt)\n# metadata information becomes available at this point ...\nprint(\"Number of rows: %d\" % cursor.rowcount)\nif cursor.description is None:  # no result set\n  ncols = 0\nelse:\n  ncols = len(cursor.description)\nprint(\"Number of columns: %d\" % ncols)\nif ncols == 0:\n  print(\"Note: statement has no result set\")\nfor i, col_info in enumerate(cursor.description):\n  # print name, then other information\n  name, type, _, _, _, _, nullable, flags, _ = col_info\n  print(\"--- Column %d (%s) ---\" % (i, name))\n  print(\"Type: %d (%s)\" % (type, FieldType.get_info(type)))\n  print(\"Nullable: %d\" % (nullable))\n  print(\"Flags: %d\" % (flags))\ncursor.close()\n```", "```\nfrom mysql.connector import FieldType\n```", "```\nStatement:  SELECT name, birth FROM profile\nNumber of rows: 10\nNumber of columns: 2\n--- Column 0 (name) ---\nType:     253 (VAR_STRING)\nNullable: 0\nFlags:    4097\n--- Column 1 (birth) ---\nType:     10 (DATE)\nNullable: 1\nFlags:    128\n```", "```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"github.com/svetasmirnova/mysqlcookbook/recipes/lib/cookbook\"\n)\n\nfunc main() {\n  db := cookbook.Connect()\n  defer db.Close()\n\n  stmt := \"SELECT name, birth FROM profile\"\n  fmt.Printf(\"Statement: %s\\n\", stmt)\n\n  rows, err := db.Query(stmt)\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer rows.Close()\n\n  // metadata information becomes available at this point ...\n  cols, err := rows.ColumnTypes()\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  ncols := len(cols)\n  fmt.Printf(\"Number of columns: %d\\n\", ncols)\n  if (ncols == 0) {\n    fmt.Println(\"Note: statement has no result set\")\n  }\n\n  for i := 0; i < ncols; i++ {\n    fmt.Printf(\"---- Column %d (%s) ----\\n\", i, cols[i].Name())\n    fmt.Printf(\"DatabaseTypeName: %s\\n\", cols[i].DatabaseTypeName())\n\n    collen, ok := cols[i].Length()\n    if ok {\n      fmt.Printf(\"Length: %d\\n\", collen)\n    }\n\n    precision, scale, ok := cols[i].DecimalSize()\n    if ok {\n      fmt.Printf(\"DecimalSize precision: %d, scale: %d\\n\", precision, scale)\n    }\n\n    colnull, ok := cols[i].Nullable()\n    if ok {\n      fmt.Printf(\"Nullable: %t\\n\", colnull)\n    }\n\n    fmt.Printf(\"ScanType: %s\\n\", cols[i].ScanType())\n  }\n}\n```", "```\nStatement: SELECT name, birth FROM profile\nNumber of columns: 2\n---- Column 0 (name) ----\nDatabaseTypeName: VARCHAR\nNullable: false\nScanType: sql.RawBytes\n---- Column 1 (birth) ----\nDatabaseTypeName: DATE\nNullable: true\nScanType: sql.NullTime\n```", "```\nString stmt = \"SELECT name, birth FROM profile\";\nSystem.out.println(\"Statement: \" + stmt);\nStatement s = conn.createStatement();\ns.executeQuery(stmt);\nResultSet rs = s.getResultSet();\nResultSetMetaData md = rs.getMetaData();\n// metadata information becomes available at this point ...\nint ncols = md.getColumnCount();\nSystem.out.println(\"Number of columns: \" + ncols);\nif (ncols == 0)\n  System.out.println (\"Note: statement has no result set\");\nfor (int i = 1; i <= ncols; i++) { // column index values are 1-based\n  System.out.println(\"--- Column \" + i\n            + \" (\" + md.getColumnName (i) + \") ---\");\n  System.out.println(\"getColumnDisplaySize: \" + md.getColumnDisplaySize (i));\n  System.out.println(\"getColumnLabel:       \" + md.getColumnLabel (i));\n  System.out.println(\"getColumnType:        \" + md.getColumnType (i));\n  System.out.println(\"getColumnTypeName:    \" + md.getColumnTypeName (i));\n  System.out.println(\"getPrecision:         \" + md.getPrecision (i));\n  System.out.println(\"getScale:             \" + md.getScale (i));\n  System.out.println(\"getTableName:         \" + md.getTableName (i));\n  System.out.println(\"isAutoIncrement:      \" + md.isAutoIncrement (i));\n  System.out.println(\"isNullable:           \" + md.isNullable (i));\n  System.out.println(\"isCaseSensitive:      \" + md.isCaseSensitive (i));\n  System.out.println(\"isSigned:             \" + md.isSigned (i));\n}\nrs.close();\ns.close();\n```", "```\nStatement: SELECT name, birth FROM profile\nNumber of columns: 2\n--- Column 1 (name) ---\ngetColumnDisplaySize: 20\ngetColumnLabel:       name\ngetColumnType:        12\ngetColumnTypeName:    VARCHAR\ngetPrecision:         20\ngetScale:             0\ngetTableName:         profile\nisAutoIncrement:      false\nisNullable:           0\nisCaseSensitive:      false\nisSigned:             false\n--- Column 2 (birth) ---\ngetColumnDisplaySize: 10\ngetColumnLabel:       birth\ngetColumnType:        91\ngetColumnTypeName:    DATE\ngetPrecision:         10\ngetScale:             0\ngetTableName:         profile\nisAutoIncrement:      false\nisNullable:           1\nisCaseSensitive:      false\nisSigned:             false\n```", "```\nSELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;\n```", "```\ndef database_exists(client, db_name)\n  sth = client.prepare(\"SELECT SCHEMA_NAME\n FROM INFORMATION_SCHEMA.SCHEMATA\n WHERE SCHEMA_NAME = ?\")\n  return sth.execute(db_name).count > 0\nend\n```", "```\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_SCHEMA = 'cookbook';\n```", "```\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_SCHEMA = DATABASE();\n```", "```\ndef table_exists(client, db_name, tbl_name)\n  sth = client.prepare(\"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\n WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?\")\n  return sth.execute(db_name, tbl_name).count > 0\nend\n```", "```\n@tables = $dbh->tables ();\n```", "```\n// get list of databases\nDatabaseMetaData md = conn.getMetaData ();\nResultSet rs = md.getCatalogs ();\nwhile (rs.next ())\n  System.out.println (rs.getString (1));  // column 1 = database name\nrs.close ();\n```", "```\n// get list of tables in database named by dbName; if\n// dbName is the empty string, the default database is used\nDatabaseMetaData md = conn.getMetaData ();\nResultSet rs = md.getTables (dbName, \"\", \"%\", null);\nwhile (rs.next ())\n  System.out.println (rs.getString (3));  // column 3 = table name\nrs.close ();\n```", "```\nmysql> `SELECT` `TABLE_SCHEMA``,` `TABLE_NAME``,` `TABLE_TYPE` \n    -> `FROM` `INFORMATION_SCHEMA``.``TABLES` \n    -> `WHERE` `TABLE_TYPE``=``'VIEW'` `AND` `TABLE_SCHEMA``=``'cookbook'``;`\n+--------------+---------------------+------------+ | TABLE_SCHEMA | TABLE_NAME          | TABLE_TYPE |\n+--------------+---------------------+------------+ | cookbook     | patients_statistics | VIEW       |\n+--------------+---------------------+------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `TABLE_SCHEMA``,` `TABLE_NAME``,` `TABLE_TYPE` \n    -> `FROM` `INFORMATION_SCHEMA``.``TABLES` \n    -> `WHERE` `TABLE_TYPE``=``'BASE TABLE'` `AND` `TABLE_SCHEMA``=``'cookbook'` \n    -> `AND` `TABLE_NAME` `LIKE` `'trip%'``;`\n+--------------+------------+------------+ | TABLE_SCHEMA | TABLE_NAME | TABLE_TYPE |\n+--------------+------------+------------+ | cookbook     | trip_leg   | BASE TABLE |\n| cookbook     | trip_log   | BASE TABLE |\n+--------------+------------+------------+ 2 rows in set (0,00 sec)\n```", "```\nCREATE TABLE item\n(\n  id      INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  name    CHAR(20),\n  colors  ENUM('chartreuse','mauve','lime green','puce') DEFAULT 'puce',\n  PRIMARY KEY (id)\n);\n```", "```\nmysql> `SELECT * FROM INFORMATION_SCHEMA.COLUMNS`\n    -> `WHERE TABLE_SCHEMA = 'cookbook' AND TABLE_NAME = 'item'`\n    -> `AND COLUMN_NAME = 'colors'\\G`\n*************************** 1\\. row ***************************\n           TABLE_CATALOG: def\n            TABLE_SCHEMA: cookbook\n              TABLE_NAME: item\n             COLUMN_NAME: colors\n        ORDINAL_POSITION: 3\n          COLUMN_DEFAULT: puce\n             IS_NULLABLE: YES\n               DATA_TYPE: enum\nCHARACTER_MAXIMUM_LENGTH: 10\n  CHARACTER_OCTET_LENGTH: 10\n       NUMERIC_PRECISION: NULL\n           NUMERIC_SCALE: NULL\n      DATETIME_PRECISION: NULL\n      CHARACTER_SET_NAME: utf8mb4\n          COLLATION_NAME: utf8mb4_0900_ai_ci\n             COLUMN_TYPE: enum('chartreuse','mauve','lime green','puce')\n              COLUMN_KEY:\n                   EXTRA:\n              PRIVILEGES: select,insert,update,references\n          COLUMN_COMMENT:\n```", "```\nfunction get_column_names ($dbh, $db_name, $tbl_name)\n{\n  $stmt = \"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS\n WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?\n ORDER BY ORDINAL_POSITION\";\n  $sth = $dbh->prepare ($stmt);\n  $sth->execute (array ($db_name, $tbl_name));\n  return ($sth->fetchAll (PDO::FETCH_COLUMN, 0));\n}\n```", "```\nmysql> `SHOW COLUMNS FROM item LIKE 'colors'\\G`\n*************************** 1\\. row ***************************\n  Field: colors\n   Type: enum('chartreuse','mauve','lime green','puce')\n   Null: YES\n    Key:\nDefault: puce\n  Extra:\n```", "```\n$name =~ s/([%_])/\\\\$1/g;\n```", "```\nname = name.gsub(/([%_])/, '\\\\\\\\\\1')\n```", "```\n$name = preg_replace ('/([%_])/', '\\\\\\\\$1', $name);\n```", "```\nname = re.sub(r'([%_])', r'\\\\\\1', name)\n```", "```\nimport \"regexp\"\n// ...\n  re := regexp.MustCompile(`([_%])`)\n  name = re.ReplaceAllString(name, \"\\\\\\\\$1\")\n```", "```\nimport java.util.regex.*;\n\nPattern p = Pattern.compile(\"([_%])\");\nMatcher m = p.matcher(name);\nname = m.replaceAll (\"\\\\\\\\$1\");\n```", "```\nmysql> `SHOW CREATE TABLE item\\G`\n*************************** 1\\. row ***************************\n       Table: item\nCreate Table: CREATE TABLE `item` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) DEFAULT NULL,\n  `colors` enum('chartreuse','mauve','lime green','puce') DEFAULT 'puce',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```", "```\nenum('chartreuse','mauve','lime green','puce')\n```", "```\ndef get_enumorset_info(client, db_name, tbl_name, col_name)\n  sth = client.prepare(\n          \"SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_DEFAULT\n FROM INFORMATION_SCHEMA.COLUMNS\n WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? AND COLUMN_NAME = ?\")\n  res = sth.execute(db_name, tbl_name, col_name)\n  return nil if res.count == 0  # no such column\n  row = res.first\n  info = {}\n  info[\"name\"] = row.values[0]\n  return nil unless row.values[1] =~ /^(ENUM|SET)\\((.*)\\)$/i # not ENUM or SET\n  info[\"type\"] = $1\n  # split value list on commas, trim quotes from end of each word\n  info[\"values\"] = $2.split(\",\").collect { |val| val.sub(/^'(.*)'$/, \"\\\\1\") }\n  # determine whether column can contain NULL values\n  info[\"nullable\"] = (row.values[2].upcase == \"YES\")\n  # get default value (nil represents NULL)\n  info[\"default\"] = row.values[3]\n  return info\nend\n```", "```\ninfo = get_enumorset_info(client, db_name, tbl_name, col_name)\nputs \"Information for #{db_name}.#{tbl_name}.#{col_name}:\"\nif info.nil?\n  puts \"No information available (not an ENUM or SET column?)\"\nelse\n  puts \"Name: \" + info[\"name\"]\n  puts \"Type: \" + info[\"type\"]\n  puts \"Legal values: \" + info[\"values\"].join(\",\")\n  puts \"Nullable: \" + (info[\"nullable\"] ? \"yes\" : \"no\")\n  puts \"Default value: \" + (info[\"default\"].nil? ? \"NULL\" : info[\"default\"])\nend\n```", "```\nInformation for cookbook.profile.color:\nName: color\nType: enum\nLegal values: blue,red,green,brown,black,white\nNullable: yes\nDefault value: NULL\n```", "```\ndb = client.query(\"SELECT DATABASE()\").first.values[0]\nputs \"Default database: \" + (db.nil? ? \"(no database selected)\" : db)\n```", "```\nDatabaseMetaData md = conn.getMetaData();\n// can also get this with SELECT VERSION()\nSystem.out.println(\"Product version: \" + md.getDatabaseProductVersion());\n// this is similar to SELECT USER() but doesn't include the hostname\nSystem.out.println(\"Username: \" + md.getUserName());\n```", "```\nsub get_server_version\n{\nmy $dbh = shift;\nmy ($ver_str, $ver_num);\nmy ($major, $minor, $patch);\n\n  # fetch result into scalar string\n  $ver_str = $dbh->selectrow_array (\"SELECT VERSION()\");\n  return undef unless defined ($ver_str);\n  ($major, $minor, $patch) = split (/\\./, $ver_str);\n  $patch =~ s/\\D.*$//; # strip nonnumeric suffix if present\n  $ver_num = $major*10000 + $minor*100 + $patch;\n  return ($ver_str, $ver_num);\n}\n```", "```\nmy ($ver_str, $ver_num) = get_server_version ($dbh);\n```", "```\nmy $ver_str = (get_server_version ($dbh))[0]; # string form\nmy $ver_num = (get_server_version ($dbh))[1]; # numeric form\n```", "```\nmy $ver_num = (get_server_version ($dbh))[1];\nprintf \"Event scheduler:    %s\\n\", ($ver_num >= 50106 ? \"yes\" : \"no\");\nprintf \"4-byte Unicode:     %s\\n\", ($ver_num >= 50503 ? \"yes\" : \"no\");\nprintf \"Fractional seconds: %s\\n\", ($ver_num >= 50604 ? \"yes\" : \"no\");\nprintf \"SHA-256 passwords:  %s\\n\", ($ver_num >= 50606 ? \"yes\" : \"no\");\nprintf \"ALTER USER:         %s\\n\", ($ver_num >= 50607 ? \"yes\" : \"no\");\nprintf \"INSERT DELAYED:     %s\\n\", ($ver_num >= 50700 ? \"no\" : \"yes\");\n```", "```\nCREATE PROCEDURE enable_failed_login_attempts(\n                                  user TEXT, host TEXT, failed_atempts INT)\nBEGIN\n  DECLARE account TEXT;\n  SET account = CONCAT(QUOTE(user),'@',QUOTE(host));\n  IF server_version() >= 80019 AND user <> '' THEN\n    CALL exec_stmt(CONCAT('ALTER USER ',account,' \n FAILED_LOGIN_ATTEMPTS ', failed_atempts));\n  END IF;\nEND;\n```", "```\nmysql> `SELECT` `TABLE_SCHEMA``,` `TABLE_NAME``,` `CONSTRAINT_NAME` \n    -> `FROM` `INFORMATION_SCHEMA``.``TABLE_CONSTRAINTS` \n    -> `WHERE` `CONSTRAINT_TYPE``=``'FOREIGN KEY'` `AND` `TABLE_SCHEMA``=``'cookbook'``;`\n+--------------+--------------------+---------------------------+ | TABLE_SCHEMA | TABLE_NAME         | CONSTRAINT_NAME           |\n+--------------+--------------------+---------------------------+ | cookbook     | movies_actors_link | movies_actors_link_ibfk_1 |\n| cookbook     | movies_actors_link | movies_actors_link_ibfk_2 |\n+--------------+--------------------+---------------------------+ 2 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT`  `ku``.``CONSTRAINT_NAME``,` `ku``.``TABLE_NAME``,` `ku``.``COLUMN_NAME``,` \n    -> `ku``.``REFERENCED_TABLE_NAME``,` `ku``.``REFERENCED_COLUMN_NAME` \n    -> `FROM` `INFORMATION_SCHEMA``.``TABLE_CONSTRAINTS` `tc` \n    -> `JOIN` `INFORMATION_SCHEMA``.``KEY_COLUMN_USAGE` `ku` \n    -> `USING` `(``CONSTRAINT_NAME``,` `TABLE_SCHEMA``,` `TABLE_NAME``)` \n    -> `WHERE` `CONSTRAINT_TYPE``=``'FOREIGN KEY'` `AND` `ku``.``TABLE_SCHEMA``=``'cookbook'``\\``G`\n*************************** 1. row ***************************\n       CONSTRAINT_NAME: movies_actors_link_ibfk_1\n            TABLE_NAME: movies_actors_link\n           COLUMN_NAME: movie_id\n REFERENCED_TABLE_NAME: movies\nREFERENCED_COLUMN_NAME: id\n*************************** 2. row ***************************\n       CONSTRAINT_NAME: movies_actors_link_ibfk_2\n            TABLE_NAME: movies_actors_link\n           COLUMN_NAME: actor_id\n REFERENCED_TABLE_NAME: actors\nREFERENCED_COLUMN_NAME: id\n2 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `ID``,` `FOR_NAME``,` `FOR_COL_NAME``,` `REF_NAME``,` `REF_COL_NAME` \n    -> `FROM` `INFORMATION_SCHEMA``.``INNODB_FOREIGN` `JOIN` \n    -> `INFORMATION_SCHEMA``.``INNODB_FOREIGN_COLS` `USING``(``ID``)` \n    -> `WHERE` `ID` `LIKE` `'cookbook%'``\\``G`\n*************************** 1. row ***************************\n          ID: cookbook/movies_actors_link_ibfk_1\n    FOR_NAME: cookbook/movies_actors_link\nFOR_COL_NAME: movie_id\n    REF_NAME: cookbook/movies\nREF_COL_NAME: id\n*************************** 2. row ***************************\n          ID: cookbook/movies_actors_link_ibfk_2\n    FOR_NAME: cookbook/movies_actors_link\nFOR_COL_NAME: actor_id\n    REF_NAME: cookbook/actors\nREF_COL_NAME: id\n2 rows in set (0,01 sec)\n```", "```\nmysql> `SELECT` `EVENT_MANIPULATION``,` `ACTION_TIMING``,` `TRIGGER_NAME``,` `ACTION_STATEMENT` \n    -> `FROM` `INFORMATION_SCHEMA``.``TRIGGERS`\n    -> `WHERE` `TRIGGER_SCHEMA``=``'cookbook'` `AND` `EVENT_OBJECT_TABLE` `=` `'auction'``\\``G`\n*************************** 1. row ***************************\nEVENT_MANIPULATION: INSERT\n     ACTION_TIMING: AFTER\n      TRIGGER_NAME: ai_auction\n  ACTION_STATEMENT: INSERT INTO auction_log (action,id,ts,item,bid)\nVALUES('create',NEW.id,NOW(),NEW.item,NEW.bid)\n*************************** 2. row ***************************\nEVENT_MANIPULATION: UPDATE\n     ACTION_TIMING: AFTER\n      TRIGGER_NAME: au_auction\n  ACTION_STATEMENT: INSERT INTO auction_log (action,id,ts,item,bid)\nVALUES('update',NEW.id,NOW(),NEW.item,NEW.bid)\n*************************** 3. row ***************************\nEVENT_MANIPULATION: DELETE\n     ACTION_TIMING: AFTER\n      TRIGGER_NAME: ad_auction\n  ACTION_STATEMENT: INSERT INTO auction_log (action,id,ts,item,bid)\nVALUES('delete',OLD.id,OLD.ts,OLD.item,OLD.bid)\n3 rows in set (0,01 sec)\n```", "```\nmysql> `SELECT` `ROUTINE_NAME``,` `ROUTINE_TYPE` `FROM` `INFORMATION_SCHEMA``.``ROUTINES`\n    -> `WHERE` `ROUTINE_SCHEMA``=``'cookbook'` `AND` `ROUTINE_NAME` `LIKE` `'%sequence%'``;`\n+---------------------+--------------+ | ROUTINE_NAME        | ROUTINE_TYPE |\n+---------------------+--------------+ | sequence_next_value | FUNCTION     |\n| create_sequence     | PROCEDURE    |\n| delete_sequence     | PROCEDURE    |\n+---------------------+--------------+ 3 rows in set (0,01 sec)\n```", "```\nmysql> `SELECT` `EVENT_NAME``,` `EVENT_TYPE``,` `INTERVAL_VALUE``,` `INTERVAL_FIELD``,` `LAST_EXECUTED``,`\n    -> `STATUS``,` `ON_COMPLETION``,` `EVENT_DEFINITION` `FROM` `INFORMATION_SCHEMA``.``EVENTS``\\``G`\n*************************** 1. row ***************************\n      EVENT_NAME: mark_insert\n      EVENT_TYPE: RECURRING\n  INTERVAL_VALUE: 5\n  INTERVAL_FIELD: MINUTE\n   LAST_EXECUTED: 2021-07-07 05:10:45\n          STATUS: ENABLED\n   ON_COMPLETION: NOT PRESERVE\nEVENT_DEFINITION: INSERT INTO mark_log (message) VALUES('-- MARK --')\n*************************** 2. row ***************************\n      EVENT_NAME: mark_expire\n      EVENT_TYPE: RECURRING\n  INTERVAL_VALUE: 1\n  INTERVAL_FIELD: DAY\n   LAST_EXECUTED: 2021-07-07 02:56:14\n          STATUS: ENABLED\n   ON_COMPLETION: NOT PRESERVE\nEVENT_DEFINITION: DELETE FROM mark_log WHERE ts < NOW() - INTERVAL 2 DAY\n2 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `*` `FROM` `INFORMATION_SCHEMA``.``PLUGINS` \n    -> `WHERE` `PLUGIN_NAME` `IN` `(``'caching_sha2_password'``,` `'InnoDB'``,` `'Rewriter'``)``\\``G`\n*************************** 1. row ***************************\n           PLUGIN_NAME: caching_sha2_password\n        PLUGIN_VERSION: 1.0\n         PLUGIN_STATUS: ACTIVE\n           PLUGIN_TYPE: AUTHENTICATION\n   PLUGIN_TYPE_VERSION: 2.0\n        PLUGIN_LIBRARY: NULL\nPLUGIN_LIBRARY_VERSION: NULL\n         PLUGIN_AUTHOR: Oracle Corporation\n    PLUGIN_DESCRIPTION: Caching sha2 authentication\n        PLUGIN_LICENSE: GPL\n           LOAD_OPTION: FORCE\n*************************** 2. row ***************************\n           PLUGIN_NAME: InnoDB\n        PLUGIN_VERSION: 8.0\n         PLUGIN_STATUS: ACTIVE\n           PLUGIN_TYPE: STORAGE ENGINE\n   PLUGIN_TYPE_VERSION: 80025.0\n        PLUGIN_LIBRARY: NULL\nPLUGIN_LIBRARY_VERSION: NULL\n         PLUGIN_AUTHOR: Oracle Corporation\n    PLUGIN_DESCRIPTION: Supports transactions, row-level locking, and foreign keys\n        PLUGIN_LICENSE: GPL\n           LOAD_OPTION: FORCE\n*************************** 3. row ***************************\n           PLUGIN_NAME: Rewriter\n        PLUGIN_VERSION: 0.2\n         PLUGIN_STATUS: ACTIVE\n           PLUGIN_TYPE: AUDIT\n   PLUGIN_TYPE_VERSION: 4.1\n        PLUGIN_LIBRARY: rewriter.so\nPLUGIN_LIBRARY_VERSION: 1.10\n         PLUGIN_AUTHOR: Oracle Corporation\n    PLUGIN_DESCRIPTION: A query rewrite plugin that rewrites queries using the parse tree.\n        PLUGIN_LICENSE: GPL\n           LOAD_OPTION: ON\n3 rows in set (0,01 sec)\n```", "```\nmysql> `SELECT` `*` `FROM` `INFORMATION_SCHEMA``.``ENGINES` `WHERE` `ENGINE` `=` `'InnoDB'``\\``G`\n*************************** 1. row ***************************\n      ENGINE: InnoDB\n     SUPPORT: DEFAULT\n     COMMENT: Supports transactions, row-level locking, and foreign keys\nTRANSACTIONS: YES\n          XA: YES\n  SAVEPOINTS: YES\n1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `*` `FROM` `INFORMATION_SCHEMA``.``CHARACTER_SETS` \n    -> `WHERE` `DESCRIPTION` `LIKE` `'%Unicode%'` `ORDER` `BY` `MAXLEN` `DESC``;`\n+--------------------+----------------------+------------------+--------+ | CHARACTER_SET_NAME | DEFAULT_COLLATE_NAME | DESCRIPTION      | MAXLEN |\n+--------------------+----------------------+------------------+--------+ | utf16              | utf16_general_ci     | UTF-16 Unicode   |      4 |\n| utf16le            | utf16le_general_ci   | UTF-16LE Unicode |      4 |\n| utf32              | utf32_general_ci     | UTF-32 Unicode   |      4 |\n| utf8mb4            | utf8mb4_0900_ai_ci   | UTF-8 Unicode    |      4 |\n| utf8               | utf8_general_ci      | UTF-8 Unicode    |      3 |\n| ucs2               | ucs2_general_ci      | UCS-2 Unicode    |      2 |\n+--------------------+----------------------+------------------+--------+ 6 rows in set (0,00 sec)\n```", "```\nmysql> `CREATE` `TABLE` `two_words``(``deserted` `VARCHAR``(``100``)``,` `unemployed` `VARCHAR``(``100``)``)``;`\nQuery OK, 0 rows affected (0,03 sec)\n\nmysql> `INSERT` `INTO` `two_words` `VALUES``(``'ISSIZ'``,` `'İŞSİZ'``)``;`\nQuery OK, 1 row affected (0,00 sec)\n\nmysql> `SELECT` `deserted``=``unemployed` `FROM` `two_words``;`\n+---------------------+ | deserted=unemployed |\n+---------------------+ |                   1 |\n+---------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `COLLATION_NAME``,` `CHARACTER_SET_NAME`\n    -> `FROM` `INFORMATION_SCHEMA``.``COLLATIONS` \n    -> `WHERE` `CHARACTER_SET_NAME``=``'utf8mb4'` `AND` `COLLATION_NAME` `LIKE` `'%\\_tr\\_%'``;`\n+-----------------------+--------------------+ | COLLATION_NAME        | CHARACTER_SET_NAME |\n+-----------------------+--------------------+ | utf8mb4_tr_0900_ai_ci | utf8mb4            |\n| utf8mb4_tr_0900_as_cs | utf8mb4            |\n+-----------------------+--------------------+ 2 rows in set (0,00 sec)\n```", "```\nmysql> `SELECT` `deserted``=``unemployed` `COLLATE` `utf8mb4_tr_0900_ai_ci` `FROM` `two_words``;`\n+---------------------------------------------------+ | deserted=unemployed COLLATE utf8mb4_tr_0900_ai_ci |\n+---------------------------------------------------+ |                                                 0 |\n+---------------------------------------------------+ 1 row in set (0,00 sec)\n\nmysql> `SELECT` `deserted``=``unemployed` `COLLATE` `utf8mb4_tr_0900_as_cs` `FROM` `two_words``;`\n+---------------------------------------------------+ | deserted=unemployed COLLATE utf8mb4_tr_0900_as_cs |\n+---------------------------------------------------+ |                                                 0 |\n+---------------------------------------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql > `CREATE` `TABLE` `` ` ```", "``` ` `` `(`\n    ->   `` ` ```", "``` ` `` `varchar``(``100``)` `DEFAULT` `NULL``,`\n    ->   `` ` ```", "``` ` `` `varchar``(``100``)` `DEFAULT` `NULL`\n    -> `)` `ENGINE``=``InnoDB` `DEFAULT` `CHARSET``=``utf8mb4` `COLLATE``=``utf8mb4_0900_ai_ci``;`\nQuery OK, 0 rows affected (0,04 sec)\n\nmysql> `INSERT` `INTO` `two_words` `VALUES``(``'совершенный'``,` `'совершённый'``)``;`\nQuery OK, 1 row affected (0,01 sec)\n\nmysql> `SELECT` `perfect` `=` `accomplished` `FROM` `two_words``;`\n+------------------------+ | perfect = accomplished |\n+------------------------+ |                      1 |\n+------------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `perfect` `=` `accomplished` `COLLATE` `utf8mb4_ru_0900_ai_ci` `FROM` `two_words``;`\n+------------------------------------------------------+ | perfect = accomplished COLLATE utf8mb4_ru_0900_ai_ci |\n+------------------------------------------------------+ |                                                    1 |\n+------------------------------------------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `perfect` `=` `accomplished` `COLLATE` `utf8mb4_ru_0900_as_cs` `FROM` `two_words``;`\n+------------------------------------------------------+ | perfect = accomplished COLLATE utf8mb4_ru_0900_as_cs |\n+------------------------------------------------------+ |                                                    0 |\n+------------------------------------------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `*` `FROM` `INFORMATION_SCHEMA``.``CHARACTER_SETS` \n    -> `WHERE` `DESCRIPTION` `LIKE` `'%Russian%'` `OR` `DESCRIPTION` `LIKE` `'%Cyrillic%'``;`\n+--------------------+----------------------+-----------------------+--------+ | CHARACTER_SET_NAME | DEFAULT_COLLATE_NAME | DESCRIPTION           | MAXLEN |\n+--------------------+----------------------+-----------------------+--------+ | koi8r              | koi8r_general_ci     | KOI8-R Relcom Russian |      1 |\n| cp866              | cp866_general_ci     | DOS Russian           |      1 |\n| cp1251             | cp1251_general_ci    | Windows Cyrillic      |      1 |\n+--------------------+----------------------+-----------------------+--------+ 3 rows in set (0,00 sec)\n\nmysql> `drop` `table` `two_words``;`\nQuery OK, 0 rows affected (0,02 sec)\n\nmysql> `CREATE` `TABLE` `two_words``(``perfect` `VARCHAR``(``100``)``,` `accomplished` `VARCHAR``(``100``)``)` \n    -> `CHARACTER` `SET` `cp1251``;`\nQuery OK, 0 rows affected (0,04 sec)\n\nmysql> `INSERT` `INTO` `two_words` `VALUES``(``'совершенный'``,` `'совершённый'``)``;`\nQuery OK, 1 row affected (0,00 sec)\n\nmysql> `SELECT` `perfect` `=` `accomplished` `FROM` `two_words``;`\n+------------------------+ | perfect = accomplished |\n+------------------------+ |                      0 |\n+------------------------+ 1 row in set (0,00 sec)\n```", "```\nmysql> `SELECT` `TABLE_SCHEMA``,` `TABLE_NAME``,` `CONSTRAINT_NAME``,` `ENFORCED``,` `CHECK_CLAUSE` \n    -> `FROM` `INFORMATION_SCHEMA``.``CHECK_CONSTRAINTS` \n    -> `JOIN` `INFORMATION_SCHEMA``.``TABLE_CONSTRAINTS` \n    -> `USING``(``CONSTRAINT_NAME``)` \n    -> `WHERE` `CONSTRAINT_TYPE``=``'CHECK'` `ORDER` `BY` `CONSTRAINT_NAME` `DESC` `LIMIT` `2``\\``G`\n*************************** 1. row ***************************\n   TABLE_SCHEMA: cookbook\n     TABLE_NAME: even\nCONSTRAINT_NAME: even_chk_1\n       ENFORCED: YES\n   CHECK_CLAUSE: ((`even_value` % 2) = 0)\n*************************** 2. row ***************************\n   TABLE_SCHEMA: cookbook\n     TABLE_NAME: book_authors\nCONSTRAINT_NAME: book_authors_chk_1\n       ENFORCED: YES\n   CHECK_CLAUSE: json_schema_valid(_utf8mb4\\'{\"id\": ↩ \n                \"http://www.oreilly.com/mysqlcookbook\", \"$schema\": ↩\n                \"http://json-schema.org/draft-04/schema#\", \"description\": ↩\n                \"Schema for the table book_authors\", \"type\": \"object\", \"properties\": ↩\n                {\"name\": {\"type\": \"string\"}, \"lastname\": {\"type\": \"string\"}, ↩\n                \"books\": {\"type\": \"array\"}}, \"required\":[\"name\", \"lastname\"]} \\',`author`)\n2 rows in set (0,01 sec)\n```"]