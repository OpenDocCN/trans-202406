["```\n# Clone the linux-stable repository\ngit clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git\\\nlinux-stable\n\n# Checkout the tag for your current kernel version\ncd linux-stable\ngit checkout tags/v4.18\n\n# Check the available drivers\ngit grep -l XDP_SETUP_PROG drivers/\n```", "```\ndrivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c\ndrivers/net/ethernet/cavium/thunder/nicvf_main.c\ndrivers/net/ethernet/intel/i40e/i40e_main.c\ndrivers/net/ethernet/intel/ixgbe/ixgbe_main.c\ndrivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c\ndrivers/net/ethernet/mellanox/mlx4/en_netdev.c\ndrivers/net/ethernet/mellanox/mlx5/core/en_main.c\ndrivers/net/ethernet/netronome/nfp/nfp_net_common.c\ndrivers/net/ethernet/qlogic/qede/qede_filter.c\ndrivers/net/netdevsim/bpf.c\ndrivers/net/tun.c\ndrivers/net/virtio_net.c\n```", "```\ngit grep -l XDP_SETUP_PROG_HW drivers/\n```", "```\ninclude/linux/netdevice.h\n866:    XDP_SETUP_PROG_HW,\n\nnet/core/dev.c\n8001:           xdp.command = XDP_SETUP_PROG_HW;\n\ndrivers/net/netdevsim/bpf.c\n200:    if (bpf->command == XDP_SETUP_PROG_HW && !ns->bpf_xdpoffload_accept) {\n205:    if (bpf->command == XDP_SETUP_PROG_HW) {\n560:    case XDP_SETUP_PROG_HW:\n\ndrivers/net/ethernet/netronome/nfp/nfp_net_common.c\n3476:   case XDP_SETUP_PROG_HW:\n```", "```\nenum xdp_action {\n    XDP_ABORTED = 0,\n    XDP_DROP,\n    XDP_PASS,\n    XDP_TX,\n    XDP_REDIRECT,\n};\n```", "```\n# ip link set dev eth0 xdp obj program.o sec mysection\n```", "```\n$ python3 -m http.server\n```", "```\n$  ss -tulpn\nNetid  State      Recv-Q Send-Q Local Address:Port   Peer Address:Port\ntcp    LISTEN     0      5      *:8000                *:*\n```", "```\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group defau\nlt qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP g\nroup default qlen 1000\n    link/ether 02:1e:30:9c:a3:c0 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic enp0s3\n       valid_lft 84964sec preferred_lft 84964sec\n    inet6 fe80::1e:30ff:fe9c:a3c0/64 scope link\n       valid_lft forever preferred_lft forever\n3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP g\nroup default qlen 1000\n    link/ether 08:00:27:0d:15:7d brd ff:ff:ff:ff:ff:ff\n    inet 192.168.33.11/24 brd 192.168.33.255 scope global enp0s8\n       valid_lft forever preferred_lft forever\n    inet6 fe80::a00:27ff:fe0d:157d/64 scope link\n       valid_lft forever preferred_lft forever\n```", "```\n# nmap -sS 192.168.33.11\nStarting Nmap 7.70 ( https://nmap.org ) at 2019-04-06 23:57 CEST\nNmap scan report for 192.168.33.11\nHost is up (0.0034s latency).\nNot shown: 998 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n8000/tcp open  http-alt\n```", "```\n#include <linux/bpf.h>\n#include <linux/if_ether.h>\n#include <linux/in.h>\n#include <linux/ip.h>\n```", "```\n#define SEC(NAME) __attribute__((section(NAME), used))\n```", "```\nSEC(\"mysection\")\nint myprogram(struct xdp_md *ctx) {\n  int ipsize = 0;\n  void *data = (void *)(long)ctx->data;\n  void *data_end = (void *)(long)ctx->data_end;\n  struct ethhdr *eth = data;\n  struct iphdr *ip;\n```", "```\n  ipsize = sizeof(*eth);\n  ip = data + ipsize;\n  ipsize += sizeof(struct iphdr);\n  if (data + ipsize > data_end) {\n    return XDP_DROP;\n  }\n```", "```\n  if (ip->protocol == IPPROTO_TCP) {\n    return XDP_DROP;\n  }\n\n  return XDP_PASS;\n}\n```", "```\n$ clang -O2 -target bpf -c program.c -o program.o\n```", "```\n# ip link set dev enp0s8 xdp obj program.o sec mysection\n```", "```\n# ip a show enp0s8\n3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 xdpgeneric/id:32\n    qdisc fq_codel state UP group default qlen 1000\n    link/ether 08:00:27:0d:15:7d brd ff:ff:ff:ff:ff:ff\n    inet 192.168.33.11/24 brd 192.168.33.255 scope global enp0s8\n       valid_lft forever preferred_lft forever\n    inet6 fe80::a00:27ff:fe0d:157d/64 scope link\n       valid_lft forever preferred_lft forever\n```", "```\n# nmap -sS 192.168.33.11\nStarting Nmap 7.70 ( https://nmap.org ) at 2019-04-07 01:07 CEST\nNmap scan report for 192.168.33.11\nHost is up (0.00039s latency).\nNot shown: 998 closed ports\nPORT    STATE SERVICE\n22/tcp  open  ssh\n```", "```\n# ip link set dev enp0s8 xdp off\n```", "```\n#define KBUILD_MODNAME \"program\"\n#include <linux/bpf.h>\n#include <linux/in.h>\n#include <linux/ip.h>\n\nBPF_TABLE(\"percpu_array\", uint32_t, long, packetcnt, 256);\n```", "```\nint myprogram(struct xdp_md *ctx) {\n  int ipsize = 0;\n  void *data = (void *)(long)ctx->data;\n  void *data_end = (void *)(long)ctx->data_end;\n  struct ethhdr *eth = data;\n  struct iphdr *ip;\n  long *cnt;\n  __u32 idx;\n\n  ipsize = sizeof(*eth);\n  ip = data + ipsize;\n  ipsize += sizeof(struct iphdr);\n```", "```\n  if (data + ipsize > data_end) {\n    return XDP_DROP;\n  }\n\n  idx = ip->protocol;\n  cnt = packetcnt.lookup(&idx);\n  if (cnt) {\n    *cnt += 1;\n  }\n\n  if (ip->protocol == IPPROTO_TCP) {\n    return XDP_DROP;\n  }\n\n  return XDP_PASS;\n}\n```", "```\n#!/usr/bin/python\n\nfrom bcc import BPF\nimport time\nimport sys\n\ndevice = \"enp0s8\"\nb = BPF(src_file=\"program.c\")\nfn = b.load_func(\"myprogram\", BPF.XDP)\nb.attach_xdp(device, fn, 0)\npacketcnt = b.get_table(\"packetcnt\")\n```", "```\nprev = [0] * 256\nprint(\"Printing packet counts per IP protocol-number, hit CTRL+C to stop\")\nwhile 1:\n    try:\n        for k in packetcnt.keys():\n            val = packetcnt.sum(k).value\n            i = k.value\n            if val:\n                delta = val - prev[i]\n                prev[i] = val\n                print(\"{}: {} pkt/s\".format(i, delta))\n        time.sleep(1)\n    except KeyboardInterrupt:\n        print(\"Removing filter from device\")\n        break\n\nb.remove_xdp(device, 0)\n```", "```\n# python program.py\n```", "```\nPrinting packet counts per IP protocol-number, hit CTRL+C to stop\n6: 10 pkt/s\n17: 3 pkt/s\n^CRemoving filter from device\n```", "```\nfrom bcc import BPF, libbcc\nfrom scapy.all import Ether, IP, raw, TCP, UDP\n\nimport ctypes\nimport unittest\n\nclass XDPExampleTestCase(unittest.TestCase):\n    SKB_OUT_SIZE = 1514  # mtu 1500 + 14 ethernet size\n    bpf_function = None\n```", "```\n    def _xdp_test_run(self, given_packet, expected_packet, expected_return):\n        size = len(given_packet)\n\n        given_packet = ctypes.create_string_buffer(raw(given_packet), size)\n        packet_output = ctypes.create_string_buffer(self.SKB_OUT_SIZE)\n\n        packet_output_size = ctypes.c_uint32()\n        test_retval = ctypes.c_uint32()\n        duration = ctypes.c_uint32()\n        repeat = 1\n        ret = libbcc.lib.bpf_prog_test_run(self.bpf_function.fd,\n                                           repeat,\n                                           ctypes.byref(given_packet),\n                                           size,\n                                           ctypes.byref(packet_output),\n                                           ctypes.byref(packet_output_size),\n                                           ctypes.byref(test_retval),\n                                           ctypes.byref(duration))\n        self.assertEqual(ret, 0)\n        self.assertEqual(test_retval.value, expected_return)\n\n        if expected_packet:\n            self.assertEqual(\n                packet_output[:packet_output_size.value], raw(expected_packet))\n```", "```\n    def setUp(self):\n        bpf_prog = BPF(src_file=b\"program.c\")\n        self.bpf_function = bpf_prog.load_func(b\"myprogram\", BPF.XDP)\n```", "```\n    def test_drop_tcp(self):\n        given_packet = Ether() / IP() / TCP()\n        self._xdp_test_run(given_packet, None, BPF.XDP_DROP)\n```", "```\n    def test_pass_udp(self):\n        given_packet = Ether() / IP() / UDP()\n        expected_packet = Ether() / IP() / UDP()\n        self._xdp_test_run(given_packet, expected_packet, BPF.XDP_PASS)\n```", "```\n    def test_transform_dst(self):\n        given_packet = Ether() / IP() / TCP(dport=9090)\n        expected_packet = Ether(dst='08:00:27:dd:38:2a') / \\\n            IP() / TCP(dport=9090)\n        self._xdp_test_run(given_packet, expected_packet, BPF.XDP_TX)\n```", "```\nif __name__ == '__main__':\n    unittest.main()\n```", "```\n#define KBUILD_MODNAME \"kmyprogram\"\n\n#include <linux/bpf.h>\n#include <linux/if_ether.h>\n#include <linux/tcp.h>\n#include <linux/in.h>\n#include <linux/ip.h>\n```", "```\nint myprogram(struct xdp_md *ctx) {\n  int ipsize = 0;\n  void *data = (void *)(long)ctx->data;\n  void *data_end = (void *)(long)ctx->data_end;\n  struct ethhdr *eth = data;\n  struct iphdr *ip;\n  struct tcphdr *th;\n\n  ipsize = sizeof(*eth);\n  ip = data + ipsize;\n  ipsize += sizeof(struct iphdr);\n  if (data + ipsize > data_end) {\n    return XDP_DROP;\n  }\n```", "```\n  if (ip->protocol == IPPROTO_TCP) {\n    th = (struct tcphdr *)(ip + 1);\n    if ((void *)(th + 1) > data_end) {\n      return XDP_DROP;\n    }\n\n    if (th->dest == htons(9090)) {\n      eth->h_dest[0] = 0x08;\n      eth->h_dest[1] = 0x00;\n      eth->h_dest[2] = 0x27;\n      eth->h_dest[3] = 0xdd;\n      eth->h_dest[4] = 0x38;\n      eth->h_dest[5] = 0x2a;\n      return XDP_TX;\n    }\n\n    return XDP_DROP;\n  }\n\n  return XDP_PASS;\n}\n```", "```\nsudo python test_xdp.py\n```", "```\n...\n--------------------------------\nRan 3 tests in 4.676s\n\nOK\n```", "```\n.F.\n======================================================================\nFAIL: test_pass_udp (__main__.XDPExampleTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_xdp.py\", line 48, in test_pass_udp\n    self._xdp_test_run(given_packet, expected_packet, BPF.XDP_PASS)\n  File \"test_xdp.py\", line 31, in _xdp_test_run\n    self.assertEqual(test_retval.value, expected_return)\nAssertionError: 1 != 2\n\n----------------------------------------------------------------------\nRan 3 tests in 4.667s\n\nFAILED (failures=1)\n```"]