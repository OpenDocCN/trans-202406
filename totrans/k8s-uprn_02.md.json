["```\n{\n  \"name\": \"simple-node\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A sample simple application for Kubernetes Up & Running\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"author\": \"\"\n}\n```", "```\nvar express = require('express');\n\nvar app = express();\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\napp.listen(3000, function () {\n  console.log('Listening on port 3000!');\n  console.log('  http://localhost:3000');\n});\n```", "```\nnode_modules\n```", "```\n# Start from a Node.js 16 (LTS) image ![1](assets/1.png)\nFROM node:16\n\n# Specify the directory inside the image in which all commands will run ![2](assets/2.png)\nWORKDIR /usr/src/app\n\n# Copy package files and install dependencies ![3](assets/3.png)\nCOPY package*.json ./\nRUN npm install\nRUN npm install express\n\n# Copy all of the app files into the image ![4](assets/4.png)\nCOPY . .\n\n# The default command to run when starting the container ![5](assets/5.png)\nCMD [ \"npm\", \"start\" ]\n```", "```\n$ docker build -t simple-node .\n```", "```\n$ docker run --rm -p 3000:3000 simple-node\n```", "```\n.\n└── layer A: contains a large file named 'BigFile'\n    └── layer B: removes 'BigFile'\n        └── layer C: builds on B by adding a static binary\n```", "```\n.\n└── layer A: contains a base OS\n    └── layer B: adds source code server.js\n        └── layer C: installs the 'node' package\n```", "```\n.\n└── layer A: contains a base OS\n    └── layer B: installs the 'node' package\n        └── layer C: adds source code server.js\n```", "```\nFROM golang:1.17-alpine\n\n# Install Node and NPM\nRUN apk update && apk upgrade && apk add --no-cache git nodejs bash npm\n\n# Get dependencies for Go part of build\nRUN go get -u github.com/jteeuwen/go-bindata/...\nRUN go get github.com/tools/godep\nRUN go get github.com/kubernetes-up-and-running/kuard\n\nWORKDIR /go/src/github.com/kubernetes-up-and-running/kuard\n\n# Copy all sources in\nCOPY . .\n\n# This is a set of variables that the build script expects\nENV VERBOSE=0\nENV PKG=github.com/kubernetes-up-and-running/kuard\nENV ARCH=amd64\nENV VERSION=test\n\n# Do the build. This script is part of incoming sources.\nRUN build/build.sh\n\nCMD [ \"/go/bin/kuard\" ]\n```", "```\n# STAGE 1: Build\nFROM golang:1.17-alpine AS build\n\n# Install Node and NPM\nRUN apk update && apk upgrade && apk add --no-cache git nodejs bash npm\n\n# Get dependencies for Go part of build\nRUN go get -u github.com/jteeuwen/go-bindata/...\nRUN go get github.com/tools/godep\n\nWORKDIR /go/src/github.com/kubernetes-up-and-running/kuard\n\n# Copy all sources in\nCOPY . .\n\n# This is a set of variables that the build script expects\nENV VERBOSE=0\nENV PKG=github.com/kubernetes-up-and-running/kuard\nENV ARCH=amd64\nENV VERSION=test\n\n# Do the build. Script is part of incoming sources.\nRUN build/build.sh\n\n# STAGE 2: Deployment\nFROM alpine\n\nUSER nobody:nobody\nCOPY --from=build /go/bin/kuard /kuard\n\nCMD [ \"/kuard\" ]\n```", "```\n# Note: if you are running on Windows you may need to fix line-endings using:\n# --config core.autocrlf=input\n$ git clone https://github.com/kubernetes-up-and-running/kuard\n$ cd kuard\n$ docker build -t kuard .\n$ docker run --rm -p 8080:8080 kuard\n```", "```\n$ docker tag kuard gcr.io/kuar-demo/kuard-amd64:blue\n```", "```\n$ docker push gcr.io/kuar-demo/kuard-amd64:blue\n```", "```\n$ docker run -d --name kuard \\\n  --publish 8080:8080 \\\n  gcr.io/kuar-demo/kuard-amd64:blue\n```", "```\n$ curl http://localhost:8080\n```", "```\n$ docker stop kuard\n$ docker rm kuard\n```", "```\n$ docker run -d --name kuard \\\n  --publish 8080:8080 \\\n  --memory 200m \\\n  --memory-swap 1G \\\n  gcr.io/kuar-demo/kuard-amd64:blue\n```", "```\n$ docker run -d --name kuard \\\n  --publish 8080:8080 \\\n  --memory 200m \\\n  --memory-swap 1G \\\n  --cpu-shares 1024 \\\n  gcr.io/kuar-demo/kuard-amd64:blue\n```", "```\ndocker rmi <*tag-name*>\n```", "```\ndocker rmi <*image-id*>\n```"]