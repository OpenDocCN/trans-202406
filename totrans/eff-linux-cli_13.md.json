["```\n$ firefox &\n$ google-chrome &\n$ opera &\n```", "```\n$ firefox &> /dev/null &\n```", "```\n$ firefox https://oreilly.com\n$ google-chrome https://oreilly.com\n$ opera https://oreilly.com\n```", "```\n$ firefox --new-window https://oreilly.com\n$ google-chrome --new-window https://oreilly.com\n$ opera --new-window https://oreilly.com\n```", "```\n$ firefox --private-window https://oreilly.com\n$ google-chrome --incognito https://oreilly.com\n$ opera --private https://oreilly.com\n```", "```\n# Place in a shell configuration file and source it:\nalias oreilly=\"firefox --new-window https://oreilly.com\"\n```", "```\n$ cat urls.txt\nduckduckgo.com\tMy search engine\nnytimes.com\tMy newspaper\nspotify.com\tMy music\n$ grep music urls.txt | cut -f1\nspotify.com\n$ google-chrome https://$(grep music urls.txt | cut -f1)      *Visit spotify*\n```", "```\n$ cat packages.txt\n1Z0EW7360669374701\tUPS\tShoes\n568733462924\t\tFedEx\tKitchen blender\n9305510823011761842873\tUSPS\tCare package from Mom\n```", "```\n#!/bin/bash\nPROGRAM=$(basename $0)\nDATAFILE=packages.txt\n# Choose a browser command: firefox, opera, google-chrome\nBROWSER=\"opera\"\nerrors=0\n\ncat \"$DATAFILE\" | while read line; do\n  track=$(echo \"$line\" | awk '{print $1}')\n  service=$(echo \"$line\" | awk '{print $2}')\n  case \"$service\" in\n    UPS)\n      $BROWSER \"https://www.ups.com/track?tracknum=$track\" &\n      ;;\n    FedEx)\n      $BROWSER \"https://www.fedex.com/fedextrack/?trknbr=$track\" &\n      ;;\n    USPS)\n      $BROWSER \"https://tools.usps.com/go/TrackConfirmAction?tLabels=$track\" &\n      ;;\n    *)\n      >&2 echo \"$PROGRAM: Unknown service '$service'\"\n      errors=1\n      ;;\n  esac\ndone\nexit $errors\n```", "```\n$ curl https://efficientlinux.com/welcome.html\nWelcome to Efficient Linux.com!\n$ wget https://efficientlinux.com/welcome.html\n--2021-10-27 20:05:47--  https://efficientlinux.com/\nResolving efficientlinux.com (efficientlinux.com)...\nConnecting to efficientlinux.com (efficientlinux.com)...\n⋮\n2021-10-27 20:05:47 (12.8 MB/s) - ‘welcome.html’ saved [32/32]\n$ cat welcome.html\nWelcome to Efficient Linux.com!\n```", "```\n$ wget -U Mozilla *url*\n$ curl -A Mozilla *url*\n```", "```\nhttps://efficientlinux.com/images/1.jpg\nhttps://efficientlinux.com/images/2.jpg\nhttps://efficientlinux.com/images/3.jpg\n⋮\n```", "```\n$ seq 1 20 | awk '{print \"https://efficientlinux.com/images/\" $1 \".jpg\"}'\nhttps://efficientlinux.com/images/1.jpg\nhttps://efficientlinux.com/images/2.jpg\nhttps://efficientlinux.com/images/3.jpg\n⋮\n```", "```\n$ seq 1 20 \\\n  | awk '{print \"wget https://efficientlinux.com/images/\" $1 \".jpg\"}' \\\n  | bash\n```", "```\n$ seq 1 20 | xargs -I@ wget https://efficientlinux.com/images/@.jpg\n```", "```\ncurl *URL* | *...clever pipeline here...* | xargs -n1 wget\n```", "```\n$ curl -s https://efficientlinux.com/areacodes.html  \\\n  | hxnormalize -x  \\\n  | less\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n\"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n⋮\n  <body>\n    <h1>Area code test</h1>\n    ⋮\n```", "```\n<table id=\"ac\">\n  <thead>\n    <tr>\n      <th>Area code</th>\n      <th>State</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"ac\">201</td>\n      <td class=\"state\">NJ</td>\n      <td class=\"cities\">Hackensack, Jersey City</td>\n    </tr>\n    ⋮\n</tbody>\n</table>\n```", "```\n$ curl -s https://efficientlinux.com/areacodes.html \\\n  | hxnormalize -x \\\n  | hxselect -c -s@ '#ac .ac, #ac .state, #ac .cities'\n201@NJ@Hackensack, Jersey City@202@DC@Washington@203@CT@New Haven, Stamford@...\n```", "```\n[0-9]*@[A-Z][A-Z]@[^@]*@\n```", "```\n\\([0-9]*\\)@\\([A-Z][A-Z]\\)@\\([^@]*\\)@\n```", "```\n\\1\\t\\2\\t\\3\\n\n```", "```\ns/\\([0-9]*\\)@\\([A-Z][A-Z]\\)@\\([^@]*\\)@/\\1\\t\\2\\t\\3\\n/g\n```", "```\n$ curl -s https://efficientlinux.com/areacodes.html \\\n  | hxnormalize -x \\\n  | hxselect -c -s'@' '#ac .ac, #ac .state, #ac .cities' \\\n  | sed 's/\\([0-9]*\\)@\\([A-Z][A-Z]\\)@\\([^@]*\\)@/\\1\\t\\2\\t\\3\\n/g'\n201\tNJ\tHackensack, Jersey City\n202\tDC\tWashington\n203\tCT\tNew Haven, Stamford\n⋮\n```", "```\n$ lynx -dump https://efficientlinux.com/areacodes.html > tempfile\n$ cat tempfile\n                              Area code test\n\nArea code State   Location\n201       NJ      Hackensack, Jersey City\n202       DC      Washington\n203       CT      New Haven, Stamford\n⋮\n```", "```\n$ xclip < myfile.txt\n```", "```\n$ echo \"Efficient Linux at the Command Line\" | xclip\n```", "```\n$ xclip -o                                         *Paste to stdout*\nEfficient Linux at the Command Line\n$ xclip -o > anotherfile.txt                       *Paste to a file*\n$ xclip -o | wc -w                                 *Count words*\n6\n```", "```\n$ cut -f1 grades | sort | uniq -c | sort -nr | head -n1 | cut -c9  | xclip\n```", "```\n$ echo -n | xclip\n```", "```\n$ echo https://oreilly.com | xclip -selection clipboard               *Copy*\n$ xclip -selection clipboard -o                                       *Paste*\nhttps://oreilly.com\n```", "```\n$ xclip -sel c -o                     *Same as xclip -selection clipboard -o*\nhttps://oreilly.com\n```", "```\n$ firefox $(xclip -selection clipboard -o)\n```", "```\n#!/bin/bash\nPROGRAM=$(basename $0)\nDATABASE=$HOME/etc/vault.gpg\n\nload_password () {\n    # Place username (field 1) into clipboard\n    echo \"$1\" | cut -f1 | tr -d '\\n' | xclip -selection clipboard\n    # Place password (field 2) into X primary selection\n    echo \"$1\" | cut -f2 | tr -d '\\n' | xclip -selection primary\n    # Give feedback to the user\n    echo \"$PROGRAM: Found\" $(echo \"$1\" | cut -f3- --output-delimiter ': ')\n    echo \"$PROGRAM: username and password loaded into X selections\"\n}\n\nif [ $# -ne 1 ]; then\n    >&2 echo \"$PROGRAM: look up passwords\"\n    >&2 echo \"Usage: $PROGRAM string\"\n    exit 1\nfi\nsearchstring=\"$1\"\n\n# Store the decrypted text in a variable\ndecrypted=$(gpg -d -q \"$DATABASE\")\nif [ $? -ne 0 ]; then\n    >&2 echo \"$PROGRAM: could not decrypt $DATABASE\"\n    exit 1\nfi\n\n# Look for exact matches in the third column\nmatch=$(echo \"$decrypted\" | awk '$3~/^'$searchstring'$/')\nif [ -n \"$match\" ]; then\n    load_password \"$match\"\n    exit $?\nfi\n\n# Look for any match\nmatch=$(echo \"$decrypted\" | awk \"/$searchstring/\")\nif [ -z \"$match\" ]; then\n    >&2 echo \"$PROGRAM: no matches\"\n    exit 1\nfi\n\n# Count the matches\ncount=$(echo \"$match\" | wc -l)\n\ncase \"$count\" in\n    0)\n\t>&2 echo \"$PROGRAM: no matches\"\n\texit 1\n\t;;\n    1)\n\tload_password \"$match\"\n\texit $?\n\t;;\n    *)\n\t>&2 echo \"$PROGRAM: multiple matches for the following keys:\"\n\techo \"$match\" | cut -f3\n\t>&2 echo \"$PROGRAM: rerun this script with one of the keys\"\n\texit\n\t;;\nesac\n```", "```\n$ pman dropbox\nPassphrase: xxxxxxxx\npman: Found dropbox: dropbox.com account for work\npman: username and password loaded into X selections\n$ pman account\nPassphrase: xxxxxxxx\npman: multiple matches for the following keys:\ngoogle\ndropbox\nbank\ndropbox2\npman: rerun this script with one of the keys\n```", "```\n(sleep 30 && echo -n | xclip -selection primary) &\n```"]