["```\n$ cd ~/reactbook/\n$ npx create-react-app whinepad\n$ cd whinepad\n$ npm start\n```", "```\n// before\n<title>React App</title>\n\n//after\n<title>Whinepad</title>\n```", "```\nwhinepad/\n├──  public/\n│   ├── index.html\n└── src/\n    ├── App.css // CRA-generated\n    ├── App.js  // CRA-generated\n    ├── ...\n    └── components/       // all components live here\n        │   ├── Excel.js\n        │   ├── Excel.css\n        │   ├── ...\n        │   └──  ...\n        └── modules/      // helper JS modules here\n            ├── clone.js\n            ├── ...\n            └── ...\n```", "```\n// dependencies go here\n\n// do the work\nfunction Excel({headers, initialData}) {\n  // same as before\n}\n\n// export\nexport default Excel;\n```", "```\nimport React from 'react';\nimport PropTypes from 'prop-types';\n```", "```\nimport {useState, useReducer} from 'react';\n```", "```\nimport clone from '../modules/clone.js';\n```", "```\nfunction clone(o) {\n  return JSON.parse(JSON.stringify(o));\n}\n\nexport default clone;\n```", "```\nimport clone from '../modules/clone';\n```", "```\nimport clone from '../modules/clone.js';\n```", "```\nimport {useState, useReducer} from 'react';\nimport PropTypes from 'prop-types';\nimport clone from '../modules/clone';\n\n// do the work\nfunction Excel({headers, initialData}) {\n  // same as before\n}\n\n// export\nexport default Excel;\n```", "```\nimport './App.css';\nimport Excel from './components/Excel';\n\nfunction App() {\n  return (\n    <div>\n      <Excel\n        headers={['Name', 'Year']}\n        initialData={[\n          ['Charles', '1859'],\n          ['Antoine', '1943'],\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```", "```\nreturn (\n  <div className=\"Excel\">\n    {/* everything else */}\n  <div>\n);\n```", "```\n.Excel table {\n  width: 100%;\n}\n\n.Excel td {\n  /* etc. */\n}\n\n.Excel th {\n  /* etc. */\n}\n```", "```\nconst headers = localStorage.getItem('headers');\nconst data = localStorage.getItem('data');\n\nif (!headers) {\n  headers = ['Title', 'Year', 'Rating', 'Comments'];\n  data = [['Red whine', '2021', '3', 'meh']];\n}\n```", "```\nimport Excel from './Excel';\n// more imports here...\n\nfunction Discovery() {\n  return (\n    <div>\n      <h2>Excel</h2>\n      <Excel\n        headers={['Name', 'Year']}\n        initialData={[\n          ['Charles', '1859'],\n          ['Antoine', '1943'],\n        ]}\n      />\n      {/* more components here */}\n    </div>\n  );\n}\n\nexport default Discovery;\n```", "```\nconst isDiscovery = window.location.pathname.replace(/\\//g, '') === 'discovery';\n\nfunction App() {\n  if (isDiscovery) {\n    return <Discovery />;\n  }\n  return (\n    <div>\n      <Excel headers={headers} initialData={data} />\n    </div>\n  );\n}\n```", "```\nimport logo from './../images/whinepad-logo.svg';\n\nconst Logo = () => {\n  return <img src={logo} width=\"300\" alt=\"Whinepad logo\" />;\n};\n\nexport default Logo;\n```", "```\nimport './Body.css';\n\nconst Body = ({children}) => {\n  return <div className=\"Body\">{children}</div>;\n};\n\nexport default Body;\n```", "```\n.Body {\n  background: url('./../images/back.jpg') no-repeat center center fixed;\n  background-size: cover;\n  padding: 40px;\n}\n```", "```\nimport Logo from './Logo';\nimport Header from './Header';\nimport Body from './Body';\n\nfunction Discovery() {\n  return (\n    <div className=\"Discovery\">\n      <h2>Logo</h2>\n      <div style={{background: '#f6f6f6', display: 'inline-block'}}>\n        <Logo />\n      </div>\n\n      <h2>Body</h2>\n      <Body>I am content inside the body</Body>\n\n      {/* and so on */}\n\n    </div>\n  );\n}\n```", "```\nimport Button from './Button';\n\n// ...\n\n<h2>Buttons</h2>\n<p>\n  Button with onClick:{' '}\n  <Button onClick={() => alert('ouch')}>Click me</Button>\n</p>\n<p>\n  A link: <Button href=\"https://reactjs.org/\">Follow me</Button>\n</p>\n<p>\n  Custom class name:{' '}\n  <Button className=\"Discovery-custom-button\">I do nothing</Button>\n</p>\n```", "```\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nconst Button = (props) =>\n  props.href ? (\n    <a {...props} className={classNames('Button', props.className)}>\n      {props.children}\n    </a>\n  ) : (\n    <button {...props} className={classNames('Button', props.className)} />\n  );\n\nButton.propTypes = {\n  href: PropTypes.string,\n};\n\nexport default Button;\n```", "```\nimport classNames from 'classnames';\n```", "```\n$ cd ~/reactbook/whinepad\n$ npm i classnames\n```", "```\nconst cssclasses = classNames('Button', props.className);\n```", "```\n<div className={classNames({\n  'mine': true, // unconditional\n  'highlighted': this.state.active, // dependent on the\n                                    // state...\n  'hidden': this.props.hide, // ... or properties\n})} />\n```", "```\n<h2>Suggest</h2>\n<p>\n  <Suggest options={['eenie', 'meenie', 'miney', 'mo']} />\n</p>\n```", "```\nimport PropTypes from 'prop-types';\n\nfunction Suggest({id, defaultValue = '', options=[]}) {\n\n  const randomid = Math.random().toString(16).substring(2);\n  return (\n    <>\n      <input\n        id={id}\n        list={randomid}\n        defaultValue={defaultValue}\n      />\n      <datalist id={randomid}>\n        {options.map((item, idx) => (\n          <option value={item} key={idx} />\n        ))}\n      </datalist>\n    </>\n  );\n}\n\nSuggest.propTypes = {\n  defaultValue: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default Suggest;\n```", "```\n// before\nfunction Suggest(props) {\n  const id = props.id;\n  const defaultValue = props.defaultValue || '';\n  const options = props.options || [];\n  // ...\n}\n\n// after\nfunction Suggest({id, defaultValue = '', options=[]}) {}\n```", "```\n<h2>Rating</h2>\n<p>\n  No initial value: <Rating />\n</p>\n<p>\n  Initial value 4: <Rating defaultValue={4} />\n</p>\n<p>\n  This one goes to 11: <Rating max={11} />\n</p>\n<p>\n  Read-only: <Rating readonly={true} defaultValue={3} />\n</p>\n```", "```\nimport classNames from 'classnames';\nimport {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport './Rating.css';\n\nfunction Rating({id, defaultValue = 0, max = 5, readonly = false}) {\n  const [rating, setRating] = useState(defaultValue);\n  const [tempRating, setTempRating] = useState(defaultValue);\n\n  // TODO the rendering goes here...\n\n}\n\nRating.propTypes = {\n  defaultValue: PropTypes.number,\n  readonly: PropTypes.bool,\n  max: PropTypes.number,\n};\n\nexport default Rating;\n```", "```\nconst stars = [];\nfor (let i = 1; i <= max; i++) {\n  stars.push(\n    <span\n      className={i <= tempRating ? 'RatingOn' : null}\n      key={i}\n      onClick={() => (readonly ? null : setRating(i))}\n      onMouseOver={() => (readonly ? null : setTempRating(i))}>\n      &#128514;\n    </span>,\n  );\n}\nreturn (\n  <span\n    className={classNames({\n      Rating: true,\n      RatingReadonly: readonly,\n    })}\n    onMouseOut={() => setTempRating(rating)}>\n    {stars}\n    <input id={id} type=\"hidden\" value={rating} />\n  </span>\n);\n```", "```\n.Rating {cursor: pointer;}\n.Rating.RatingReadonly {cursor: auto;}\n.Rating span {filter: grayscale(0.9);}\n.Rating .RatingOn {filter: grayscale(0);}\n```", "```\n<h2>Form inputs</h2>\n<table className=\"Discovery-pad\">\n  <tbody>\n    <tr>\n      <td>Vanilla input</td>\n      <td><FormInput /></td>\n    </tr>\n    <tr>\n      <td>Prefilled</td>\n      <td><FormInput defaultValue=\"with a default\" /></td>\n    </tr>\n    <tr>\n      <td>Year</td>\n      <td><FormInput type=\"year\" /></td>\n    </tr>\n    <tr>\n      <td>Rating</td>\n      <td><FormInput type=\"rating\" defaultValue={4} /></td>\n    </tr>\n    <tr>\n      <td>Suggest</td>\n      <td>\n        <FormInput\n          type=\"suggest\"\n          options={['red', 'green', 'blue']}\n          defaultValue=\"green\"\n        />\n      </td>\n    </tr>\n    <tr>\n      <td>Vanilla textarea</td>\n      <td><FormInput type=\"textarea\" /></td>\n    </tr>\n  </tbody>\n</table>\n```", "```\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\nimport Suggest from './Suggest';\n\nfunction FormInput({type = 'input', defaultValue = '', options = [], ...rest}) {\n  // TODO rendering goes here...\n}\n\nFormInput.propTypes = {\n  type: PropTypes.oneOf(['textarea', 'input', 'year', 'suggest', 'rating']),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  options: PropTypes.array,\n};\n\nexport default FormInput;\n```", "```\nswitch (type) {\n  case 'year':\n    return (\n      <input\n        {...rest}\n        type=\"number\"\n        defaultValue={\n          (defaultValue && parseInt(defaultValue, 10)) ||\n          new Date().getFullYear()\n        }\n      />\n    );\n  case 'suggest':\n    return (\n      <Suggest defaultValue={defaultValue} options={options} {...rest} />\n    );\n  case 'rating':\n    return (\n      <Rating\n        {...rest}\n        defaultValue={defaultValue ? parseInt(defaultValue, 10) : 0}\n      />\n    );\n  case 'textarea':\n    return <textarea defaultValue={defaultValue} {...rest} />;\n  default:\n    return <input defaultValue={defaultValue} type=\"text\" {...rest} />;\n}\n```", "```\nimport {forwardRef} from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\nimport FormInput from './FormInput';\nimport './Form.css';\n\nconst Form = forwardRef(({fields, initialData = {}, readonly = false}, ref) => {\n  return (\n    <form className=\"Form\" ref={ref}>\n      {/* more rendering here */}\n    </form>\n  );\n});\n\nForm.propTypes = {\n  fields: PropTypes.objectOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['textarea', 'input', 'year', 'suggest', 'rating']),\n      options: PropTypes.arrayOf(PropTypes.string),\n    }),\n  ).isRequired,\n  initialData: PropTypes.object,\n  readonly: PropTypes.bool,\n};\n\nexport default Form;\n```", "```\n<Form\n  fields={{\n    name: {label: 'Rating', type: 'input'},\n    comments: {label: 'Comments', type: 'textarea'},\n  }}\n/>\n```", "```\n<Discovery>\n  <Form>\n    <form>\n      <FormInput>\n        <input />\n```", "```\nconst form = useRef();\n// ...\n\n<Form\n  ref={form}\n  fields={{\n    rateme: {label: 'Rating', type: 'rating'},\n    freetext: {label: 'Greetings'},\n  }}\n  initialData={{rateme: 4, freetext: 'Hello'}}\n/>\n```", "```\n<Button\n  onClick={() => {\n    const data = {};\n    Array.from(form.current).forEach(\n      (input) => (data[input.id] = input.value),\n    );\n    alert(JSON.stringify(data));\n  }}>\n  Submit\n</Button>\n```", "```\n<form className=\"Form\" ref={ref}>\n  {Object.keys(fields).map((id) => {\n    const prefilled = initialData[id];\n    const {label, type, options} = fields[id];\n    if (readonly) {\n      if (!prefilled) {\n        return null;\n      }\n      return (\n        <div className=\"FormRow\" key={id}>\n          <span className=\"FormLabel\">{label}</span>\n          {type === 'rating' ? (\n            <Rating\n              readonly={true}\n              defaultValue={parseInt(prefilled, 10)}\n            />\n          ) : (\n            <div>{prefilled}</div>\n          )}\n        </div>\n      );\n    }\n    return (\n      <div className=\"FormRow\" key={id}>\n        <label className=\"FormLabel\" htmlFor={id}>\n          {label}\n        </label>\n        <FormInput\n          id={id}\n          type={type}\n          options={options}\n          defaultValue={prefilled}\n        />\n      </div>\n    );\n  })}\n</form>\n```", "```\n<Actions onAction={(type) => alert(type)} />\n```", "```\nimport PropTypes from 'prop-types';\nimport './Actions.css';\n\nimport deleteImage from './../images/close.svg';\nimport editImage from './../images/edit.svg';\n\nimport Button from './Button';\n\nconst Actions = ({onAction = () => {}}) => (\n  <span className=\"Actions\">\n    <Button\n      className=\"ActionsInfo\"\n      title=\"More info\"\n      onClick={() => onAction('info')}>\n      View Details\n    </Button>\n    <Button\n      title=\"Edit\"\n      onClick={() => onAction('edit')}>\n      <img src={editImage} alt=\"Edit\" />\n    </Button>\n    <Button\n      tabIndex=\"0\"\n      title=\"Delete\"\n      onClick={onAction.bind(null, 'delete')}>\n      <img src={deleteImage} alt=\"Delete\" />\n    </Button>\n  </span>\n);\n\nActions.propTypes = {\n  onAction: PropTypes.func,\n};\n\nexport default Actions;\n```", "```\nfunction DialogExample() {\n  const [example, setExample] = useState(null);\n  return (\n    <>\n      <p>\n        <Button onClick={() => setExample(1)}>Example 1</Button>{' '}\n        <Button onClick={() => setExample(2)}>Example 2</Button>\n      </p>\n      {example === 1 ? (\n        <Dialog\n          modal\n          header=\"Out-of-the-box example\"\n          onAction={(type) => {\n            alert(type);\n            setExample(null);\n          }}>\n          Hello, dialog!\n        </Dialog>\n      ) : null}\n\n      {example === 2 ? (\n        <Dialog\n          header=\"Not modal, custom dismiss button\"\n          hasCancel={false}\n          confirmLabel=\"Whatever\"\n          onAction={(type) => {\n            alert(type);\n            setExample(null);\n          }}>\n          Anything goes here, like a <Button>a button</Button> for example\n        </Dialog>\n      ) : null}\n    </>\n  );\n}\n```", "```\nimport {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport './Dialog.css';\n\nfunction Dialog(props) {\n  const {\n    header,\n    modal = false,\n    extendedDismiss = true,\n    confirmLabel = 'ok',\n    onAction = () => {},\n    hasCancel = true,\n  } = props;\n\n  // rendering here...\n\n}\n\nDialog.propTypes = {\n  header: PropTypes.string.isRequired,\n  modal: PropTypes.bool,\n  extendedDismiss: PropTypes.bool,\n  confirmLabel: PropTypes.string,\n  onAction: PropTypes.func,\n  hasCancel: PropTypes.bool,\n};\n\nexport default Dialog;\n```", "```\nreturn (\n  <div className={modal ? 'Dialog DialogModal' : 'Dialog'}>\n    <div className={modal ? 'DialogModalWrap' : null}>\n      <div className=\"DialogHeader\">{header}</div>\n      <div className=\"DialogBody\">{props.children}</div>\n      <div className=\"DialogFooter\">\n        {hasCancel ? (\n          <Button className=\"DialogDismiss\" onClick={() => onAction('dismiss')}>\n            Cancel\n          </Button>\n        ) : null}\n        <Button onClick={() => onAction(hasCancel ? 'confirm' : 'dismiss')}>\n          {confirmLabel}\n        </Button>\n      </div>\n    </div>\n  </div>\n);\n```", "```\nuseEffect(() => {\n    // setup\n    return () => {\n      // cleanup\n    };\n  },\n  [] // dependencies\n)\n```", "```\nuseEffect(() => {\n  function dismissClick(e) {\n    if (e.target.classList.contains('DialogModal')) {\n      onAction('dismiss');\n    }\n  }\n\n  function dismissKey(e) {\n    if (e.key === 'Escape') {\n      onAction('dismiss');\n    }\n  }\n\n  if (modal) {\n    document.body.classList.add('DialogModalOpen');\n    if (extendedDismiss) {\n      document.body.addEventListener('click', dismissClick);\n      document.addEventListener('keydown', dismissKey);\n    }\n  }\n  return () => {\n    document.body.classList.remove('DialogModalOpen');\n    document.body.removeEventListener('click', dismissClick);\n    document.removeEventListener('keydown', dismissKey);\n  };\n}, [onAction, modal, extendedDismiss]);\n```", "```\n<div className={modal ? 'Dialog DialogModal' : 'Dialog'}>\n```", "```\n<div className={classNames({\n    'Dialog': true,\n    'DialogModal': modal,\n  })}>\n```", "```\nimport Logo from './Logo';\nimport './Header.css';\n\nimport Button from './Button';\nimport FormInput from './FormInput';\n\nfunction Header({onSearch, onAdd, count = 0}) {\n  const placeholder = count > 1 ? `Search ${count} items` : 'Search';\n  return (\n    <div className=\"Header\">\n      <Logo />\n      <div>\n        <FormInput placeholder={placeholder} id=\"search\" onChange={onSearch} />\n      </div>\n      <div>\n        <Button onClick={onAdd}>\n          <b>&#65291;</b> Add whine\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n```", "```\nimport classification from './classification';\n\nconst schema = {\n  name: {\n    label: 'Name',\n    show: true,\n    samples: ['$2 Chuck', 'Chateau React', 'Vint.js'],\n    align: 'left',\n  },\n  year: {\n    label: 'Year',\n    type: 'year',\n    show: true,\n    samples: [2015, 2013, 2021],\n  },\n  grape: {\n    label: 'Grape',\n    type: 'suggest',\n    options: classification.grapes,\n    show: true,\n    samples: ['Merlot', 'Bordeaux Blend', 'Zinfandel'],\n    align: 'left',\n  },\n  rating: {\n    label: 'Rating',\n    type: 'rating',\n    show: true,\n    samples: [3, 1, 5],\n  },\n  comments: {\n    label: 'Comments',\n    type: 'textarea',\n    samples: ['Nice for the price', 'XML in my JS, orly??!', 'Lodi? Again!'],\n  },\n};\n\nexport default schema;\n```", "```\nconst classification = {\n  grapes: [\n    'Baco Noir',\n    'Barbera',\n    'Cabernet Franc',\n    'Cabernet Sauvignon',\n    // ...\n  ],\n};\n\nexport default classification;\n```", "```\nimport schema from '../config/schema';\n\n// ...\n\n<h2>Excel</h2>\n\n<Excel\n  schema={schema}\n  initialData={schema.name.samples.map((_, idx) => {\n    const element = {};\n    for (let key in schema) {\n      element[key] = schema[key].samples[idx];\n    }\n    return element;\n  })}\n  onDataChange={(data) => {\n    console.log(data);\n  }}\n/>\n```", "```\nimport {useState, useReducer, useRef} from 'react';\n// more imports...\n\nfunction reducer(data, action) {/*...*/}\n\nfunction Excel({schema, initialData, onDataChange, filter}) {\n  const [data, dispatch] = useReducer(reducer, initialData);\n  const [sorting, setSorting] = useState({\n    column: '',\n    descending: false,\n  });\n  const [edit, setEdit] = useState(null);\n  const [dialog, setDialog] = useState(null);\n  const form = useRef(null);\n\n  function sort(e) {/*...*/}\n\n  function showEditor(e) {/*...*/}\n\n  function save(e) {/*...*/}\n\n  function handleAction(rowidx, type) {/*...*/}\n\n  return (<div className=\"Excel\">{/*...*/}</div>);\n}\n\nExcel.propTypes = {\n  schema: PropTypes.object,\n  initialData: PropTypes.arrayOf(PropTypes.object),\n  onDataChange: PropTypes.func,\n  filter: PropTypes.string,\n};\nexport default Excel;\n```", "```\n  return (\n    <div className=\"Excel\">\n      <table>\n        {/* ... */}\n      </table>\n      {dialog}\n    </div>\n  );\n```", "```\n<thead onClick={sort}>\n  <tr>\n    {Object.keys(schema).map((key) => {\n      let {label, show} = schema[key];\n      if (!show) {\n        return null;\n      }\n      if (sorting.column === key) {\n        label += sorting.descending ? ' \\u2191' : ' \\u2193';\n      }\n      return (\n        <th key={key} data-id={key}>\n          {label}\n        </th>\n      );\n    })}\n    <th className=\"ExcelNotSortable\">Actions</th>\n  </tr>\n</thead>\n```", "```\nfunction sort(e) {\n  const column = e.target.dataset.id;\n  if (!column) { // The last \"Action\" column is not sortable\n    return;\n  }\n  const descending = sorting.column === column && !sorting.descending;\n  setSorting({column, descending});\n  dispatch({type: 'sort', payload: {column, descending}});\n}\n```", "```\n<tbody onDoubleClick={showEditor}>\n  {data.map((row, rowidx) => {\n\n    // TODO: data filtering comes here...\n\n    return (\n      <tr key={rowidx} data-row={rowidx}>\n        {Object.keys(row).map((cell, columnidx) => {\n\n          const config = schema[cell];\n          let content = row[cell];\n\n          // TODO: content tweaks go here...\n\n          return (\n            <td\n              key={columnidx}\n              data-schema={cell}\n              className={classNames({\n                [`schema-${cell}`]: true,\n                ExcelEditable: config.type !== 'rating',\n                ExcelDataLeft: config.align === 'left',\n                ExcelDataRight: config.align === 'right',\n                ExcelDataCenter:\n                  config.align !== 'left' && config.align !== 'right',\n              })}>\n              {content}\n            </td>\n          );\n        })}\n        <td>\n          <Actions onAction={handleAction.bind(null, rowidx)} />\n        </td>\n      </tr>\n    );\n  })}\n</tbody>\n```", "```\n<td\n  data-schema=\"grape\"\n  class=\"schema-grape ExcelEditable ExcelDataLeft\">\n  Bordeaux Blend\n</td>\n```", "```\nconst config = schema[cell];\nif (!config.show) {\n  return null;\n}\nlet content = row[cell];\nif (edit && edit.row === rowidx && edit.column === cell) {\n  content = (\n    <form onSubmit={save}>\n      <input type=\"text\" defaultValue={content} />\n    </form>\n  );\n} else if (config.type === 'rating') {\n  content = (\n    <Rating\n      id={cell}\n      readonly\n      key={content}\n      defaultValue={Number(content)}\n    />\n  );\n}\n```", "```\nif (filter) {\n  const needle = filter.toLowerCase();\n  let match = false;\n  const fields = Object.keys(schema);\n  for (let f = 0; f < fields.length; f++) {\n    if (row[fields[f]].toString().toLowerCase().includes(needle)) {\n      match = true;\n    }\n  }\n  if (!match) {\n    return null;\n  }\n}\n```", "```\nfunction reducer(data, action) {\n  // ...\n  setTimeout(() => action.payload.onDataChange(data));\n  return data;\n}\n```", "```\n<Excel\n  schema={schema}\n  initialData={/* ... */}\n  onDataChange={(data) => {\n    console.log(data);\n  }}\n/>\n```", "```\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```", "```\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n```", "```\nfunction sort(e) {\n  const column = e.target.dataset.id;\n  if (!column) {\n    return;\n  }\n  const descending = sorting.column === column && !sorting.descending;\n  setSorting({column, descending});\n  dispatch({type: 'sort', payload: {column, descending}});\n}\n```", "```\nfunction showEditor(e) {\n  const config = e.target.dataset.schema;\n  if (!config || config === 'rating') {\n    return;\n  }\n  setEdit({\n    row: parseInt(e.target.parentNode.dataset.row, 10),\n    column: config,\n  });\n}\n```", "```\nfunction save(e) {\n  e.preventDefault();\n  const value = e.target.firstChild.value;\n  const valueType = schema[e.target.parentNode.dataset.schema].type;\n  dispatch({\n    type: 'save',\n    payload: {\n      edit,\n      value,\n      onDataChange,\n      int: valueType === 'year' || valueType === 'rating',\n    },\n  });\n  setEdit(null);\n}\n```", "```\nfunction handleAction(rowidx, type) {\n  if (type === 'delete') {\n    setDialog(\n      <Dialog\n        modal\n        header=\"Confirm deletion\"\n        confirmLabel=\"Delete\"\n        onAction={(action) => {\n          setDialog(null);\n          if (action === 'confirm') {\n            dispatch({\n              type: 'delete',\n              payload: {\n                rowidx,\n                onDataChange,\n              },\n            });\n          }\n        }}>\n        {`Are you sure you want to delete \"${data[rowidx].name}\"?`}\n      </Dialog>,\n    );\n  }\n\n  // TODO: edit and info\n}\n```", "```\nconst isEdit = type === 'edit';\nif (type === 'info' || isEdit) {\n  const formPrefill = data[rowidx];\n  setDialog(\n    <Dialog\n      modal\n      extendedDismiss={!isEdit}\n      header={isEdit ? 'Edit item' : 'Item details'}\n      confirmLabel={isEdit ? 'Save' : 'ok'}\n      hasCancel={isEdit}\n      onAction={(action) => {\n        setDialog(null);\n        if (isEdit && action === 'confirm') {\n          dispatch({\n            type: 'saveForm',\n            payload: {\n              rowidx,\n              onDataChange,\n              form,\n            },\n          });\n        }\n      }}>\n      <Form\n        ref={form}\n        fields={schema}\n        initialData={formPrefill}\n        readonly={!isEdit}\n      />\n    </Dialog>,\n  );\n```", "```\nfunction reducer(data, action) {\n  if (action.type === 'sort') {\n    const {column, descending} = action.payload;\n    return data.sort((a, b) => {\n      if (a[column] === b[column]) {\n        return 0;\n      }\n      return descending\n        ? a[column] < b[column]\n          ? 1\n          : -1\n        : a[column] > b[column]\n          ? 1\n          : -1;\n    });\n  }\n  if (action.type === 'save') {\n    const {int, edit} = action.payload;\n    data[edit.row][edit.column] = int\n      ? parseInt(action.payload.value, 10)\n      : action.payload.value;\n  }\n  if (action.type === 'delete') {\n    data = clone(data);\n    data.splice(action.payload.rowidx, 1);\n  }\n\n  if (action.type === 'saveForm') {\n    Array.from(action.payload.form.current).forEach(\n      (input) => (data[action.payload.rowidx][input.id] = input.value),\n    );\n  }\n\n  setTimeout(() => action.payload.onDataChange(data));\n  return data;\n}\n```"]