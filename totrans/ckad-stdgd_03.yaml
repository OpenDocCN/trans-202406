- en: Chapter 3\. Interacting with Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章. 与 Kubernetes 交互
- en: As an application developer, you will want to interact with the Kubernetes cluster
    to manage objects that operate your application. Every call to the cluster is
    accepted and processed by the API server component. There are various ways to
    perform a call to the API server. For example, you can use a [web-based dashboard](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/),
    a command-line tool like [`kubectl`](https://kubernetes.io/docs/reference/kubectl/),
    or a direct HTTPS request to the RESTful API endpoints.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发者，你会希望与 Kubernetes 集群交互，管理操作应用程序的对象。每次对集群的调用都由 API 服务器组件接受和处理。有多种方法可以调用
    API 服务器。例如，你可以使用基于 Web 的仪表板（[web-based dashboard](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)）、像
    [`kubectl`](https://kubernetes.io/docs/reference/kubectl/) 这样的命令行工具，或直接对 RESTful
    API 端点发出 HTTPS 请求。
- en: The exam does not test the use of a visual user interface for interacting with
    the Kubernetes cluster. Your only client for solving exam questions is `kubectl`.
    This chapter will touch on the Kubernetes API primitives and objects, as well
    as the different ways to manage objects with `kubectl`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考试不会测试使用可视用户界面与 Kubernetes 集群进行交互的能力。解答考试问题的唯一客户端是 `kubectl`。本章将涉及 Kubernetes
    API 原语和对象，以及使用 `kubectl` 管理对象的不同方法。
- en: API Primitives and Objects
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 原语和对象
- en: Kubernetes primitives are the basic building blocks anchored in the Kubernetes
    architecture for creating and operating an application on the platform. Even as
    a beginner to Kubernetes, you might have heard of the terms Pod, Deployment, and
    Service, all of which are Kubernetes primitives. There are many more that serve
    a dedicated purpose in the Kubernetes architecture.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 原语是 Kubernetes 架构中创建和操作平台上应用程序的基本构建块。即使是 Kubernetes 的初学者，你可能也听说过
    Pod、Deployment 和 Service 这些术语，它们都是 Kubernetes 的原语。在 Kubernetes 架构中，还有许多服务专用的原语。
- en: 'To draw an analogy, think back to the concepts of object-oriented programming.
    In object-oriented programming languages, a class defines the blueprint of a real-world
    functionality: its properties and behavior. A Kubernetes primitive is the equivalent
    of a class. The instance of a class in object-oriented programming is an object,
    managing its own state and having the ability to communicate with other parts
    of the system. Whenever you create a Kubernetes object, you produce such an instance.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 拿面向对象编程的概念来类比，类定义了现实世界功能的蓝图：其属性和行为。Kubernetes 的原语相当于一个类。面向对象编程语言中，类的实例是一个对象，管理自己的状态并具有与系统其他部分通信的能力。每当你创建一个
    Kubernetes 对象时，你就产生了这样一个实例。
- en: For example, a Pod in Kubernetes is the class of which there can be many instances
    with their own identity. Every Kubernetes object has a system-generated unique
    identifier (also known as UID) to clearly distinguish between the entities of
    a system. Later, we’ll look at the properties of a Kubernetes object. [Figure 3-1](#kubernetes_object_uid)
    illustrates the relationship between a Kubernetes primitive and an object.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Kubernetes 中的 Pod 就是一个类，可以有许多具有自己身份的实例。每个 Kubernetes 对象都有一个系统生成的唯一标识符（也称为
    UID），以清晰区分系统的实体。稍后，我们将查看 Kubernetes 对象的属性。[图 3-1](#kubernetes_object_uid) 展示了
    Kubernetes 原语与对象之间的关系。
- en: '![ckd2 0301](Images/ckd2_0301.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0301](Images/ckd2_0301.png)'
- en: Figure 3-1\. Kubernetes object identity
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1. Kubernetes 对象身份
- en: Every Kubernetes primitive follows a general structure, which you can observe
    if you look deeper at a manifest of an object, as shown in [Figure 3-2](#kubernetes_object_structure).
    The primary markup language used for a Kubernetes manifest is YAML.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Kubernetes 原语都遵循一个通用结构，如果你深入查看对象清单（如 [图 3-2](#kubernetes_object_structure)
    所示），你可以观察到这一点。用于 Kubernetes 清单的主要标记语言是 YAML。
- en: '![ckd2 0302](Images/ckd2_0302.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0302](Images/ckd2_0302.png)'
- en: Figure 3-2\. Kubernetes object structure
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2. Kubernetes 对象结构
- en: 'Let’s look at each section and its relevance within the Kubernetes system:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Kubernetes 系统中每个部分及其相关性：
- en: API version
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: API 版本
- en: The Kubernetes API version defines the structure of a primitive and uses it
    to validate the correctness of the data. The API version serves a similar purpose
    as XML schemas to an XML document or JSON schemas to a JSON document. The version
    usually undergoes a maturity process—for example, from alpha to beta to final.
    Sometimes you see different prefixes separated by a slash (`apps`). You can list
    the API versions compatible with your cluster version by running the command `kubectl
    api-versions`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API版本定义了原语的结构，并使用它来验证数据的正确性。API版本的作用类似于XML文档的XML模式或JSON文档的JSON模式。该版本通常经历成熟过程，例如从alpha到beta到最终版本。有时，您会看到由斜杠分隔的不同前缀（`apps`）。您可以通过运行命令`kubectl
    api-versions`列出与您的集群版本兼容的API版本。
- en: Kind
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 种类
- en: The kind defines the type of primitive—e.g., a Pod or a Service. It ultimately
    answers the question, “What kinds of resource are we dealing with here?”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 种类定义了原语的类型，例如Pod或Service。它最终回答了一个问题，“我们这里正在处理哪些资源类型？”
- en: Metadata
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据
- en: Metadata describes higher-level information about the object—e.g., its name,
    what namespace it lives in, or whether it defines labels and annotations. This
    section also defines the UID.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据描述了关于对象的更高级信息，例如其名称、所在的命名空间，或者是否定义了标签和注释。本节还定义了UID。
- en: Spec
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 规范
- en: The specification (“spec” for short) declares the desired state—e.g., how should
    this object look after it has been created? Which image should run in the container,
    or which environment variables should be set?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 规范（简称“spec”）声明了期望的状态，例如，在创建后此对象应该如何？容器中应该运行哪个镜像，或者应该设置哪些环境变量？
- en: Status
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 状态
- en: The status describes the actual state of an object. The Kubernetes controllers
    and their reconciliation loops constantly try to transition a Kubernetes object
    from the desired state into the actual state. The object has not yet been materialized
    if the YAML status shows the value `{}`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 状态描述了对象的实际状态。Kubernetes控制器及其协调循环不断尝试将一个Kubernetes对象从期望状态转换为实际状态。如果YAML状态显示值为`{}`，则对象尚未实现。
- en: With this basic structure in mind, let’s look at how to create a Kubernetes
    object with the help of `kubectl`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个基本结构的理解，让我们看看如何利用`kubectl`创建一个Kubernetes对象。
- en: Using kubectl
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubectl
- en: '`kubectl` is the primary tool for interacting with the Kubernetes clusters
    from the command line. The exam is exclusively focused on the use of `kubectl`.
    Therefore, it’s paramount to understand its ins and outs and practice its use
    heavily.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`是从命令行与Kubernetes集群交互的主要工具。考试专门侧重于使用`kubectl`。因此，深入了解其内部工作原理并大量实践使用它非常重要。'
- en: 'This section provides you with a brief overview of its typical usage pattern.
    Let’s start by looking at the syntax for running commands. A `kubectl` execution
    consists of a command, a resource type, a resource name, and optional command
    line flags:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分为您提供了其典型使用模式的简要概述。让我们从查看运行命令的语法开始。一个`kubectl`执行包括一个命令、一个资源类型、一个资源名称和可选的命令行标志：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The command specifies the operation you’re planning to run. Typical commands
    are verbs like `create`, `get`, `describe`, or `delete`. Next, you’ll need to
    provide the resource type you’re working on, either as a full resource type or
    its short form. For example, you could work on a `service` here or use the short
    form, `svc`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 命令指定您计划运行的操作。典型的命令是像`create`、`get`、`describe`或`delete`这样的动词。接下来，您需要提供您正在处理的资源类型，可以是完整的资源类型或其简写形式。例如，您可以在此处操作一个`service`或使用简写形式`svc`。
- en: The name of the resource identifies the user-facing object identifier, effectively
    the value of `metadata.name` in the YAML representation. Be aware that the object
    name is not the same as the UID. The UID is an autogenerated, Kubernetes-internal
    object reference that you usually don’t have to interact with. The name of an
    object has to be unique across all objects of the same resource type within a
    namespace.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 资源的名称标识用户可见的对象标识符，实际上是YAML表示中`metadata.name`的值。请注意，对象名称与UID不同。UID是自动生成的，Kubernetes内部对象引用，通常您无需与之交互。对象的名称必须在命名空间内同一资源类型的所有对象中是唯一的。
- en: Finally, you can provide zero to many command line flags to describe additional
    configuration behavior. A typical example of a command-line flag is the `--port`
    flag, which exposes a Pod’s container port.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以提供零到多个命令行标志来描述额外的配置行为。一个典型的命令行标志示例是`--port`标志，它公开一个Pod的容器端口。
- en: '[Figure 3-3](#kubectl_usage_pattern) shows a full `kubectl` command in action.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-3](#kubectl_usage_pattern)展示了完整的`kubectl`命令的操作过程。'
- en: '![ckd2 0303](Images/ckd2_0303.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0303](Images/ckd2_0303.png)'
- en: Figure 3-3\. `Kubectl` usage pattern
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. `kubectl`使用模式
- en: Over the course of this book, we’ll explore the `kubectl` commands that will
    make you the most productive during the exam. There are many more, however, and
    they usually go beyond the ones you’d use on a day-to-day basis as an application
    developer. Next up, we’ll have a deeper look at the `create` command, the imperative
    way to create a Kubernetes object. We’ll also compare the imperative object creation
    approach with the declarative approach.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们将探讨能够在考试中提高效率的`kubectl`命令。还有许多其他命令，它们通常超出了应用程序开发人员日常使用的命令范围。接下来，我们将深入研究`create`命令，这是创建Kubernetes对象的命令式方式。我们还将比较命令式对象创建方法与声明式方法的区别。
- en: Managing Objects
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理对象
- en: 'You can create objects in a Kubernetes cluster in two ways: imperatively or
    declaratively. The following sections describe each approach, including their
    benefits, drawbacks, and use cases.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过两种方式在Kubernetes集群中创建对象：命令式或声明式。以下各节将描述每种方法，包括它们的优点、缺点和用例。
- en: Imperative Object Management
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令式对象管理
- en: Imperative object management does not require a manifest definition. You’ll
    use `kubectl` to drive the creation, modification, and deletion of objects with
    a single command and one or many command-line options. See the [Kubernetes documentation](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/imperative-command/)
    for a more detailed description of imperative object management.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无需清单定义即可进行命令式对象管理。您可以使用`kubectl`通过单个命令和一个或多个命令行选项驱动对象的创建、修改和删除。有关命令式对象管理的更详细描述，请参阅[Kubernetes文档](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/imperative-command/)。
- en: Creating objects
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建对象
- en: 'Use the `run` or `create` command to create an object on the fly. Any configuration
    needed at runtime is provided by command-line options. The benefit of this approach
    is the fast turnaround time without the need to wrestle with YAML structures.
    The following `run` command creates a Pod named `frontend` that executes the container
    image `nginx:1.24.0` in a container with the exposed port 80:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`run`或`create`命令即可实时创建对象。运行时所需的任何配置都通过命令行选项提供。这种方法的好处是快速反馈时间，无需处理YAML结构。以下`run`命令创建了一个名为`frontend`的Pod，该Pod在容器中执行`nginx:1.24.0`镜像，并暴露端口80：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Updating objects
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新对象
- en: The configuration of live objects can still be modified. `kubectl` supports
    this use case by providing the `edit` or `patch` command.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以修改活动对象的配置。`kubectl`通过提供`edit`或`patch`命令支持此用例。
- en: 'The `edit` command opens an editor with the raw configuration of the live object.
    Changes to the configuration will be applied to the live object after exiting
    the editor. The command will open the editor defined by the `KUBE_EDITOR`, or
    `EDITOR` environment variables, or fall back to `vi` for Linux or `notepad` for
    Windows. This command demonstrates the use of the `edit` command for the Pod live
    object named `frontend`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit`命令会打开一个编辑器，显示活动对象的原始配置。退出编辑器后，配置更改将应用于活动对象。该命令将打开由`KUBE_EDITOR`或`EDITOR`环境变量定义的编辑器，在Linux上会回退到`vi`，在Windows上会回退到`notepad`。此命令演示了对名为`frontend`的Pod活动对象使用`edit`命令进行编辑：'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `patch` command allows for fine-grained modification of a live object on
    an attribute level using a JSON merge patch. The following example illustrates
    the use of `patch` command to update the container image tag assigned to the Pod
    created earlier. The `-p` flag defines the JSON structure used to modify the live
    object:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`patch`命令允许在属性级别对活动对象进行精细化修改，使用JSON合并补丁。以下示例演示了如何使用`patch`命令更新先前创建的Pod的容器镜像标签。`-p`标志定义了用于修改活动对象的JSON结构：'
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Deleting objects
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除对象
- en: 'You can delete a Kubernetes object at any time. During the exam, the need may
    arise if you made a mistake while solving a problem and want to start from scratch
    to ensure a clean slate. In a production Kubernetes environment, you’ll want to
    delete objects that are no longer needed. The following `delete` command deletes
    the Pod object by its name `frontend`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时删除Kubernetes对象。在考试期间，如果解决问题时出错并希望从头开始确保清洁状态，可能需要这样做。在生产环境中，您会希望删除不再需要的对象。以下`delete`命令通过其名称`frontend`删除了Pod对象：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Upon execution of the `delete` command, Kubernetes tries to delete the targeted
    object gracefully so that there’s minimal impact on the end user. If the object
    cannot be deleted within the default grace period (30 seconds), the kubelet attempts
    to forcefully kill the object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`delete`命令时，Kubernetes会尝试优雅地删除目标对象，以便最小化对最终用户的影响。如果对象在默认的优雅期限（30秒）内无法删除，则kubelet尝试强制杀死对象。
- en: 'During the exam, end user impact is not a concern. The most important goal
    is to complete all tasks in the time granted to the candidate. Therefore, waiting
    on an object to be deleted gracefully is a waste of time. You can force an immediate
    deletion of an object with the command-line option with the `--now` option. The
    following command kills the Pod named `nginx` using a `SIGKILL` signal:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试期间，最终用户影响并不是一个问题。最重要的目标是在分配给候选人的时间内完成所有任务。因此，等待对象优雅地被删除是浪费时间的。您可以使用`--now`选项强制立即删除对象。以下命令使用`SIGKILL`信号杀死名为`nginx`的Pod：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Declarative Object Management
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明性对象管理
- en: Declarative object management requires one or several manifests in the format
    of YAML or JSON describing the desired state of an object. You create, update,
    and delete objects using this approach.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性对象管理需要一个或多个清单，格式为YAML或JSON，描述了对象的期望状态。您可以使用这种方法创建、更新和删除对象。
- en: The benefit of using the declarative method is reproducibility and improved
    maintenance, as the file is checked into version control in most cases. The declarative
    approach is the recommended way to create objects in production environments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明性方法的好处在于可重复性和改进的维护性，因为在大多数情况下文件被检入版本控制。声明性方法是在生产环境中创建对象的推荐方式。
- en: More information on declarative object management can be found in the [Kubernetes
    documentation](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于声明性对象管理的信息可以在[Kubernetes文档](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/)中找到。
- en: Creating objects
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建对象
- en: The declarative approach creates objects from a manifest (in most cases, a YAML
    file) using the `apply` command. The command works by pointing to a file, a directory
    of files, or a file referenced by an HTTP(S) URL using the `-f` option. If one
    or more of the objects already exist, the command will synchronize the changes
    made to the configuration with the live object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性方法通过使用`apply`命令从一个清单（大多数情况下是YAML文件）创建对象。该命令通过指向一个文件、一个文件目录或一个HTTP(S) URL引用的文件来工作，使用`-f`选项。如果一个或多个对象已经存在，则该命令将同步对配置所做的更改与实际对象。
- en: 'To demonstrate the functionality, we’ll assume the following directories and
    configuration files. The following commands create objects from a single file,
    from all files within a directory, and from all files in a directory recursively.
    Refer to files in the book’s GitHub repository if you want to give it a try. Later
    chapters will explain the purpose of the primitives used here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示功能，我们假设以下目录和配置文件。以下命令从单个文件创建对象，从目录中的所有文件创建对象，并递归地从目录中的所有文件创建对象。如果您想尝试，请参考书籍的GitHub仓库中的文件。后续章节将解释这里使用的基元的目的：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Creating an object from a single file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从单个文件创建对象：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Creating objects from multiple files within a directory:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从目录中的多个文件创建对象：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Creating objects from a recursive directory tree containing files:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从包含文件的递归目录树创建对象：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Creating objects from a file referenced by an HTTP(S) URL:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从HTTP(S) URL引用的文件创建对象：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `apply` command keeps track of the changes by adding or modifying the annotation
    with the key `kubectl.kubernetes.io/last-applied-configuration`. Here’s an example
    of the annotation in the output of the `get pod` command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`命令通过添加或修改带有键`kubectl.kubernetes.io/last-applied-configuration`的注释来跟踪更改。以下是在`get
    pod`命令的输出中注释的示例：'
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Updating objects
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新对象
- en: Updating an existing object is done with the same `apply` command. All you need
    to do is to change the configuration file and then run the command against it.
    [Example 3-1](#modified_configuration_file_deployment) modifies the existing configuration
    of a Deployment in the file `nginx-deployment.yaml`. We added a new label with
    the key team and changed the number of replicas from 3 to 5.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 更新现有对象与相同的`apply`命令完成。您只需修改配置文件然后对其运行该命令即可。[示例 3-1](#modified_configuration_file_deployment)
    修改了文件`nginx-deployment.yaml`中部署配置的现有配置。我们添加了一个新的标签，键为team，并将副本数从3改为5。
- en: Example 3-1\. Modified configuration file for a Deployment
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-1\. 修改后的部署配置文件
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following command applies the changed configuration file. As a result,
    the number of Pods controlled by the underlying ReplicaSet is 5:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令应用了更改后的配置文件。结果是，由底层 ReplicaSet 控制的 Pod 数量为 5：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The Deployment’s `kubectl.kubernetes.io/last-applied-configuration` annotation
    reflects the latest change to the configuration:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的 `kubectl.kubernetes.io/last-applied-configuration` 注解反映了配置的最新更改：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Deleting objects
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除对象
- en: 'While you can delete objects using the `apply` command by providing the options
    `--prune -l <labels>`, it is recommended to delete an object using the `delete`
    command and point it to the configuration file. The following command deletes
    a Deployment and the objects it controls (ReplicaSet and Pods):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用 `apply` 命令通过提供选项 `--prune -l <labels>` 删除对象，但建议使用 `delete` 命令并将其指向配置文件来删除对象。下面的命令删除了一个部署及其控制的对象（ReplicaSet
    和 Pods）：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can use the `--now` option to forcefully delete Pods, as described in [“Deleting
    objects”](#imperative-deleting-objects).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `--now` 选项强制删除 Pods，如 [“删除对象”](#imperative-deleting-objects) 中所述。
- en: Hybrid Approach
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合方法
- en: 'Sometimes you may want to go with a hybrid approach. You can start by using
    the imperative method to produce a manifest file without actually creating an
    object. You do so by executing the `run` or `create` command with the command-line
    options `-o yaml` and `--dry-run=client`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能希望采用混合方法。您可以通过使用即时方法生成一个清单文件，而无需实际创建对象。方法是使用命令行选项 `-o yaml` 和 `--dry-run=client`
    执行 `run` 或 `create` 命令：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can now use the generate YAML manifest as a starting point to make further
    modifications before creating the object. Simply open the file with an editor,
    change the content, and execute the declarative `apply` command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用生成的 YAML 清单作为进一步修改对象的起点。只需用编辑器打开文件，更改内容，然后执行声明性 `apply` 命令：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Which Approach to Use?
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择使用哪种方法？
- en: During the exam, using imperative commands is the most efficient and quick way
    to manage objects. Not all configuration options are exposed through command-line
    flags, which may force you into using the declarative approach. The hybrid approach
    can help here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试期间，使用即时命令是管理对象的最高效且快速的方式。并非所有的配置选项都通过命令行标志公开，这可能迫使您使用声明性方法。混合方法在这里可以帮助。
- en: GitOps and Kubernetes
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 和 Kubernetes
- en: GitOps is a practice that leverages source code checked into Git repositories
    to automate infrastructure management, specifically in cloud-native environments
    powered by Kubernetes. Tools such as [Argo CD](https://argo-cd.readthedocs.io/en/stable/)
    and [Flux](https://fluxcd.io/) implement GitOps principles to deploy applications
    to Kubernetes through a declarative approach. Teams responsible for overseeing
    real-world Kubernetes clusters and the applications within them are highly likely
    to adopt the declarative approach.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一种利用存储在 Git 仓库中的源代码来自动化基于 Kubernetes 的云原生环境中的基础设施管理的实践。诸如 [Argo CD](https://argo-cd.readthedocs.io/en/stable/)
    和 [Flux](https://fluxcd.io/) 的工具实施了 GitOps 原则，通过声明性方法将应用部署到 Kubernetes。负责监督真实
    Kubernetes 集群及其内部应用的团队很可能会采用声明性方法。
- en: While creating objects imperatively can optimize the turnaround time, in a real-world
    Kubernetes environment you’ll most certainly want to use the declarative approach.
    A YAML manifest file represents the ultimate source of truth of a Kubernetes object.
    Version-controlled files can be audited and shared, and they store a history of
    changes in case you need to revert to a previous revision.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在即时创建对象能够优化周转时间的同时，在真实的 Kubernetes 环境中，您几乎肯定会希望使用声明性方法。YAML 清单文件代表了 Kubernetes
    对象的最终真实状态。版本控制的文件可以进行审计和共享，并且它们存储了变更的历史记录，以便在需要时回滚到先前的版本。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Kubernetes represents its functionality for deploying and operating a cloud-native
    application with the help of primitives. Each primitive follows a general structure:
    the API version, the kind, the metadata, and the desired state of the resources,
    also called the spec. Upon creation or modification of the object, the Kubernetes
    scheduler automatically tries to ensure that the actual state of the object follows
    the defined specification. Every live object can be inspected, edited, and deleted.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 通过基元的帮助来表示部署和操作云原生应用程序的功能。每个基元都遵循一个通用的结构：API 版本、种类、元数据和资源的期望状态，也称为规范。在对象创建或修改时，Kubernetes
    调度程序会自动尝试确保对象的实际状态遵循定义的规范。每个活动对象都可以被检查、编辑和删除。
- en: '`Kubectl` acts as a CLI-based client to interact with the Kubernetes cluster.
    You can use its commands and flags to manage Kubernetes objects. The imperative
    approach provides a fast turnaround time for managing objects with a single command,
    as long as you memorize the available flags. More complex configuration calls
    for the use of a YAML manifest to define a primitive. Use the declarative command
    to instantiate objects from that definition. The YAML manifest is usually checked
    into version control and offers a way to track changes to the configuration.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kubectl` 作为 CLI 基础的客户端用于与 Kubernetes 集群进行交互。您可以使用它的命令和标志来管理 Kubernetes 对象。命令式方法通过单个命令提供快速的管理对象的回转时间，只要您记住可用的标志。更复杂的配置需要使用
    YAML 清单来定义基元。使用声明式命令从该定义实例化对象。YAML 清单通常会被检入版本控制，并提供一种跟踪配置更改的方式。'
