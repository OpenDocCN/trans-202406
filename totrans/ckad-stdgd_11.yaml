- en: Chapter 11\. Deployment Strategies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章 部署策略
- en: Deploying an application (bundled into a container image) to one or many Pods
    is only the beginning of its life cycle within a Kubernetes cluster. Periodically,
    developers will produce and publish new container image tags to ship bug fixes
    and new features. Manually updating Pods with a new container image tag one by
    one would be extremely tedious. Kubernetes offers the Deployment primitive to
    streamline the process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个应用程序（打包到容器镜像中）部署到一个或多个 Pods 中只是其在 Kubernetes 集群中生命周期的开始。开发人员会定期生成和发布新的容器镜像标签，以发布
    bug 修复和新功能。逐一手动更新 Pods 到新的容器镜像标签将是极其繁琐的。Kubernetes 提供了部署原语来简化这一过程。
- en: '[Chapter 10](ch10.xhtml#deployments) explained how to automatically roll out
    a new release using the Deployment primitive. In this chapter, we will discuss
    the built-in deployment strategies supported by the primitive. We’ll also talk
    about other deployment strategies that require deliberate human decisions. Each
    deployment strategy is presented with an example featuring their benefits and
    potential trade-offs. More deployment strategies exist, but they will not be covered
    in this book.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 10 章](ch10.xhtml#deployments) 解释了如何使用部署原语自动推出新版本。在本章中，我们将讨论原语支持的内置部署策略。我们还将讨论其他需要刻意人为决策的部署策略。每种部署策略都配有一个示例，展示其优点和可能的权衡。还存在更多部署策略，但本书不涉及这些内容。'
- en: Note
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Some deployment strategies require the use of concepts not yet discussed. Jump
    to [Chapter 14](ch14.xhtml#container_probes) for coverage of container probes.
    Reference [Chapter 21](ch21.xhtml#services) for more information on the purpose
    of Services.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 某些部署策略需要使用尚未讨论的概念。跳转至 [第 14 章](ch14.xhtml#container_probes) 了解容器探测的覆盖范围。参考 [第
    21 章](ch21.xhtml#services) 以获取有关服务目的的更多信息。
- en: Rolling Deployment Strategy
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滚动部署策略
- en: The Deployment primitive employs rolling deployment as the default deployment
    strategy, also referred to as ramped deployment. It’s called “ramped” because
    the Deployment gradually transitions replicas from the old version to a new version
    in batches. The Deployment automatically creates a new ReplicaSet for the desired
    change after the user updates the Pod template.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 部署原语默认采用滚动部署策略，也称为逐步部署。称之为“逐步”，是因为部署逐渐将副本从旧版本过渡到新版本的批次中。用户更新 Pod 模板后，部署会自动为所需更改创建新的
    ReplicaSet。
- en: '[Figure 11-1](#deployment_strategy_rolling_update) shows a snapshot in time
    during the rollout process.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-1](#deployment_strategy_rolling_update) 显示了在部署过程中时间点的快照。'
- en: '![ckd2 1101](Images/ckd2_1101.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1101](Images/ckd2_1101.png)'
- en: Figure 11-1\. The rolling deployment strategy
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1 滚动部署策略
- en: In this scenario, the user initiated an update of the application version from
    1.0.0 to 2.0.0\. As a result, the Deployment creates a new ReplicaSet and starts
    up Pods running the new application version while at the same time scaling down
    the old version. The Service routes network traffic to either the old or new version
    of the application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，用户启动了从版本 1.0.0 到 2.0.0 的应用程序版本更新。因此，部署创建了一个新的 ReplicaSet，并启动运行新应用程序版本的
    Pods，同时缩减旧版本。服务将网络流量路由到应用程序的旧版或新版。
- en: Implementation
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: A Deployment uses the rolling deployment strategy by default. The runtime value
    for the attribute `spec.strategy.type` is `RollingUpdate`. Users can fine-tune
    this strategy. You can use the attributes `spec.strategy.rollingUpdate.maxUnavailable`
    and `spec.strategy.rollingUpdate.maxSurge` to change the rollout rate. Both attributes
    can use a fixed integer (for example, 3) or assign a percentage of the total required
    number of Pods (for example, 33%). The default value for `maxUnavailable` and
    `maxSurge` is 25%.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，部署使用滚动更新策略。属性 `spec.strategy.type` 的运行时值为 `RollingUpdate`。用户可以微调此策略。您可以使用属性
    `spec.strategy.rollingUpdate.maxUnavailable` 和 `spec.strategy.rollingUpdate.maxSurge`
    来改变发布速率。这两个属性可以使用固定整数（例如，3）或分配所需 Pods 总数的百分比（例如，33%）。`maxUnavailable` 和 `maxSurge`
    的默认值为 25%。
- en: The attribute `maxUnavailable` specifies the maximum number of Pods that can
    be unavailable during the update process. For example, if you set the value to
    40%, then the old ReplicaSet can scale down to 60% immediately when the rolling
    update starts.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 `maxUnavailable` 指定在更新过程中可以不可用的最大 Pods 数量。例如，如果将值设置为 40%，则旧 ReplicaSet 在滚动更新开始时可以立即缩减到
    60%。
- en: The attribute `maxSurge` specifies the maximum number of Pods that can be created
    over the desired number of Pods. For example, if you set the value to 10%, the
    total number of new and old Pods cannot exceed a total of 110% after the new ReplicaSet
    has been created.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 `maxSurge` 指定了可以在所需 Pods 的最大数量之上创建的 Pods 的最大数量。例如，如果设置为 10%，则新旧 Pods 的总数在新
    ReplicaSet 创建后不能超过 110%。
- en: Independent of the values assigned to the attributes `maxUnavailable` and `maxSurge`,
    all replicas controlled by the old ReplicaSet will be ramped down to 0 over time
    until all replicas controlled by the new ReplicaSet equals the value of `spec.replicas`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论为属性 `maxUnavailable` 和 `maxSurge` 分配了什么值，由旧 ReplicaSet 控制的所有副本都将逐渐关闭到 0，直到由新
    ReplicaSet 控制的所有副本等于 `spec.replicas` 的值。
- en: It’s recommended to define a readiness probe for the Pod template to ensure
    that a replica is ready to handle incoming requests. The attribute `spec.minReadySeconds`
    specifies the number of seconds a replica needs to be available for before it
    is made available to incoming requests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 建议为 Pod 模板定义就绪探测器，以确保副本能够处理传入请求。属性 `spec.minReadySeconds` 指定了副本在可以处理传入请求之前需要处于可用状态的秒数。
- en: '[Example 11-1](#yaml_manifest_deployment_rolling_update) shows the usage of
    those attributes in the context of a full Deployment YAML manifest stored in the
    file *deployment-rolling-update.yaml*.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-1](#yaml_manifest_deployment_rolling_update) 展示了在 *deployment-rolling-update.yaml*
    文件中存储的完整 Deployment YAML 清单的使用情况。'
- en: Example 11-1\. A Deployment configured with a rolling update strategy
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-1\. 使用滚动更新策略配置的 Deployment
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_deployment_strategies_CO1-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_deployment_strategies_CO1-1)'
- en: The percentage of Pods that can be unavailable during the update.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新期间可以不可用的 Pod 的百分比。
- en: '[![2](Images/2.png)](#co_deployment_strategies_CO1-2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_deployment_strategies_CO1-2)'
- en: The percentage of Pods that can temporarily exceed the total number of replicas.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以暂时超出总副本数的 Pods 的百分比。
- en: '[![3](Images/3.png)](#co_deployment_strategies_CO1-3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_deployment_strategies_CO1-3)'
- en: The number of seconds for which the readiness probe in a Pod needs to be healthy
    until the rollout process can continue.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 中的就绪探测器必须在健康状态下运行多少秒，以便继续执行部署过程。
- en: '[![4](Images/4.png)](#co_deployment_strategies_CO1-4)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_deployment_strategies_CO1-4)'
- en: The readiness probe for all replicas referred to by `spec.minReadySeconds`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有副本的就绪探测与 `spec.minReadySeconds` 相关。
- en: The combination of assigned values to `maxUnavailable` and `maxSurge` determines
    the runtime behavior and speed of a rollout. You will adjust those parameters
    to find the most suitable combination for your application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给 `maxUnavailable` 和 `maxSurge` 的值的组合决定了部署的运行时行为和速度。您可以调整这些参数，以找到最适合您的应用程序的组合。
- en: Use Cases and Trade-Offs
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例和权衡
- en: The rolling deployment is a fitting deployment strategy for rolling out a new
    application version with zero downtime. Depending on the number of replicas the
    Deployment manages, this process can be relatively slow, as old versions of the
    applications are ramped down and new versions of the application are ramped up
    in batches.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动部署是一个适合零停机时间推出新应用版本的部署策略。根据 Deployment 管理的副本数量不同，这个过程可能相对较慢，因为旧版本的应用逐步关闭，而新版本的应用则分批逐步启动。
- en: It’s important to mention that this deployment strategy comes with a potential
    risk. Old and new versions of the application run in parallel. Breaking changes
    introduced with the new version can lead to unexpected and hard-to-debug errors
    for consumers if they haven’t adapted their client software to the latest changes.
    It’s a good idea to roll out a new application version in a backward-compatible
    fashion, for example by using a versioned API, to avoid running into this situation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这种部署策略存在潜在的风险。旧版本和新版本的应用并行运行。如果新版本引入了破坏性变更，消费者如果未能将客户端软件适应最新更改，可能会遇到意外且难以调试的错误。推荐以向后兼容的方式推出新应用版本，例如通过使用有版本的
    API，以避免出现这种情况。
- en: Fixed Deployment Strategy
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定部署策略
- en: The fixed deployment strategy will terminate replicas with the old application
    version at once before creating another ReplicaSet that controls replicas running
    the new application version.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 固定部署策略会立即终止旧应用版本的副本，然后创建另一个控制新应用版本副本的 ReplicaSet。
- en: '[Figure 11-2](#deployment_strategy_fixed) illustrates the rollout process while
    updating the Pod template from application version 1.0.0 to 2.0.0\. All replicas
    of the old ReplicaSet are shut down simultaneously. Then, the replicas controlled
    by the new ReplicaSet are started. During this process, the Service may not be
    able to reach any of the replicas, which can lead to unnecessary downtime for
    consumers.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 11-2](#deployment_strategy_fixed) 描述了从应用程序版本 1.0.0 更新 Pod 模板到 2.0.0
    的发布过程。所有旧 ReplicaSet 的副本将同时关闭。然后，由新 ReplicaSet 控制的副本将启动。在此过程中，服务可能无法访问任何副本，这可能会导致消费者的不必要停机时间。'
- en: '![ckd2 1102](Images/ckd2_1102.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1102](Images/ckd2_1102.png)'
- en: Figure 11-2\. The fixed deployment strategy
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 固定的部署策略
- en: Implementation
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: To configure the fixed deployment strategy for a Deployment, set the attribute
    `spec.strategy.type` to `Recreate`. Internally, this strategy type will automatically
    assign the total number of replicas to the attribute `maxUnavailable`. No other
    configuration options need to be provided.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Deployment 配置固定的部署策略，将属性 `spec.strategy.type` 设置为 `Recreate`。在内部，这种策略类型会自动将总副本数分配给属性
    `maxUnavailable`。不需要提供其他配置选项。
- en: '[Example 11-2](#yaml_manifest_deployment_fixed) shows the `Recreate` strategy
    type in the context of a full Deployment YAML manifest stored in the file *deployment-fixed.yaml*.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 11-2](#yaml_manifest_deployment_fixed) 展示了在 *deployment-fixed.yaml*
    文件中存储的完整 Deployment YAML 清单上下文中的 `Recreate` 策略类型。'
- en: Example 11-2\. A Deployment configured with a fixed deployment strategy
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-2\. 使用固定部署策略配置的 Deployment
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_deployment_strategies_CO2-1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_deployment_strategies_CO2-1)'
- en: The strategy type for configuring fixed deployment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 配置固定部署的策略类型。
- en: Assigning a readiness probe to containers defined by the Pod template isn’t
    strictly necessary because all replicas with the old application version will
    be shut down at once. Nevertheless, it still makes sense to verify that the application
    is up and running by defining a readiness probe before incoming traffic can reach
    the container.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Pod 模板定义的容器分配一个就绪探针并不是绝对必要的，因为所有旧应用版本的副本将同时关闭。尽管如此，在传入流量到达容器之前验证应用程序是否正常运行仍然是有意义的。
- en: Use Cases and Trade-Offs
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用案例和权衡
- en: The fixed deployment strategy is suitable for situations where application downtime
    is acceptable. For example, it’s great if you want to roll out a new application
    to a developer environment for testing purposes. For production environments,
    this deployment strategy may work if you announce an outage time window to customers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 固定的部署策略适用于可以接受应用程序停机时间的情况。例如，如果要将新应用程序部署到开发环境进行测试，这种策略非常适合。对于生产环境，如果向客户宣布了停机时间窗口，这种部署策略可能会起作用。
- en: Blue-Green Deployment Strategy
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝绿部署策略
- en: The blue-green deployment strategy (sometimes referred to as red-black deployment
    strategy) figuratively uses blue as a representation of the old application version
    and green as a representation of the new application version. Both application
    versions will be operated at the same time with an equal number of replicas.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署策略（有时称为红黑部署策略）在象征上使用蓝色来表示旧应用程序版本，绿色来表示新应用程序版本。两个应用程序版本将同时运行，具有相同数量的副本。
- en: Kubernetes routes traffic to the blue deployment, while the development or test
    team rolls out and tests the green deployment. Traffic is switched over to the
    green deployment as soon as it is considered production-ready. At that point,
    the team managing the application can decommission the blue deployment.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 将流量路由到蓝部署，而开发或测试团队则部署和测试绿部署。一旦绿部署被认为达到了生产就绪状态，流量就会切换到绿部署。在这一点上，管理应用程序的团队可以停用蓝部署。
- en: '[Figure 11-3](#deployment_strategy_blue_green) shows two Deployments managing
    replicas with different application versions. The Services can switch network
    traffic from the old application version to the new application version by changing
    the label selection.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 11-3](#deployment_strategy_blue_green) 展示了管理具有不同应用程序版本副本的两个 Deployment。服务可以通过更改标签选择来将网络流量从旧应用程序版本切换到新应用程序版本。'
- en: '![ckd2 1103](Images/ckd2_1103.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1103](Images/ckd2_1103.png)'
- en: Figure 11-3\. The blue-green deployment strategy
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-3\. 蓝绿部署策略
- en: Implementation
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: Blue-green deployment is not a built-in strategy you can configure within the
    Deployment resource. You will have to create a Deployment object for both application
    versions. The Service routes traffic to replicas managed by either the blue or
    the green Deployment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署不是您可以在部署资源中配置的内置策略。您将需要为两个应用程序版本创建一个部署对象。该服务将流量路由到由蓝色或绿色部署管理的副本。
- en: '[Example 11-3](#yaml_manifest_deployment_blue) shows a blue Deployment YAML
    manifest stored in the file *deployment-blue.yaml* specifying the container image
    `httpd:2.4.23-alpine` in the Pod template.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-3](#yaml_manifest_deployment_blue) 展示了存储在文件 *deployment-blue.yaml* 中的蓝色部署
    YAML 清单，指定 Pod 模板中的容器镜像 `httpd:2.4.23-alpine`。'
- en: Example 11-3\. A blue Deployment
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-3\. 蓝色部署
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_deployment_strategies_CO3-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_deployment_strategies_CO3-1)'
- en: 'Uses the label assignment `type: blue` to any replica managed by the corresponding
    ReplicaSet.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '使用标签分配 `type: blue` 到由相应 ReplicaSet 管理的任何副本。'
- en: '[![2](Images/2.png)](#co_deployment_strategies_CO3-2)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_deployment_strategies_CO3-2)'
- en: The old application version `2.4.23-alpine`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的应用程序版本 `2.4.23-alpine`。
- en: To set up a green deployment that runs the newer container image `httpd:2.4.57-alpine`,
    simply create another Deployment object. Note that the label used for the Pod
    template is different than for the blue deployment. [Example 11-4](#yaml_manifest_deployment_green)
    shows the green Deployment definition in the file *deployment-green.yaml*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置一个运行较新容器镜像 `httpd:2.4.57-alpine` 的绿色部署，只需创建另一个部署对象。请注意，用于 Pod 模板的标签与蓝色部署不同。[示例 11-4](#yaml_manifest_deployment_green)
    展示了文件 *deployment-green.yaml* 中绿色部署的定义。
- en: Example 11-4\. A green Deployment
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-4\. 绿色部署
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_deployment_strategies_CO4-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_deployment_strategies_CO4-1)'
- en: 'Uses the label assignment `type: green` to any replica managed by the corresponding
    ReplicaSet.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '使用标签分配 `type: green` 到由相应 ReplicaSet 管理的任何副本。'
- en: '[![2](Images/2.png)](#co_deployment_strategies_CO4-2)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_deployment_strategies_CO4-2)'
- en: The new application version `2.4.57-alpine`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新的应用程序版本 `2.4.57-alpine`。
- en: As mentioned earlier, the Service is the Kubernetes object responsible for routing
    network traffic to the old or new application version. [Example 11-5](#yaml_manifest_deployment_blue_green_service)
    shows a Service object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，服务是负责将网络流量路由到旧或新应用程序版本的 Kubernetes 对象。[示例 11-5](#yaml_manifest_deployment_blue_green_service)
    展示了一个服务对象。
- en: Example 11-5\. The Service routing network traffic to a blue deployment
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-5\. 将流量路由到蓝色部署的服务
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_deployment_strategies_CO5-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_deployment_strategies_CO5-1)'
- en: The label selector pointing to replicas managed by the blue deployment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 指向由蓝色部署管理的副本的标签选择器。
- en: 'The resource declaration currently points to the blue deployment; to switch
    to green, simply change the label selection from `type: blue` to `type: green`.
    At that point, you can delete the blue Deployment.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '当前的资源声明指向蓝色部署；要切换到绿色，只需将标签选择从 `type: blue` 更改为 `type: green`。在那时，您可以删除蓝色部署。'
- en: Use Cases and Trade-Offs
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用情况和权衡
- en: The blue-green deployment strategy is suitable for deployment scenarios where
    complex upgrades need to be performed without downtime to consumers. This situation
    may arise if a rollout requires a data migration or if multiple, dependent software
    components need to be changed at once. Should a rollback to the old application
    version be required, a simple change of the label selection in the Service will
    do.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署策略适用于需要在不影响消费者的情况下执行复杂升级的部署场景。如果升级需要数据迁移或者需要同时更改多个依赖软件组件，则可能出现这种情况。如果需要回滚到旧应用程序版本，则只需在服务中更改标签选择即可。
- en: On the downside, it’s worth mentioning that you will need more hardware resources
    than for other deployment strategies. If you need five replicas to run the old
    application version, then you will need the same amount of resources for the new
    application version, assuming the resource requirements won’t differ.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，值得一提的是，与其他部署策略相比，您将需要更多的硬件资源。如果您需要五个副本来运行旧的应用程序版本，那么对于新的应用程序版本，假设资源需求不会有所不同，您将需要相同数量的资源。
- en: Canary Deployment Strategy
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金丝雀部署策略
- en: The canary deployment strategy is similar to the blue-green deployment; however,
    you’d make the new application version available to only a subset of consumers.
    With this approach, you can implement A/B testing of new features or if you need
    to gather metrics about consumer behavior. Based on the defined set of success
    criteria, traffic to the new application version can be increased gradually. The
    goal is to shut down the old application version completely.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署策略类似于蓝绿部署；但是，您只会将新的应用程序版本提供给一部分消费者。通过这种方法，您可以实施新功能的A/B测试，或者需要收集消费者行为指标。根据定义的成功标准集，可以逐渐增加对新应用程序版本的流量。目标是完全关闭旧的应用程序版本。
- en: '[Figure 11-4](#deployment_strategy_canary) shows how the Service sends traffic
    to both application versions.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-4](#deployment_strategy_canary) 显示服务如何将流量发送到两个应用程序版本。'
- en: '![ckd2 1104](Images/ckd2_1104.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 1104](Images/ckd2_1104.png)'
- en: Figure 11-4\. The canary deployment strategy
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-4\. 金丝雀部署策略
- en: Deployment 1 controls application version v1.0.0\. Deployment 2 controls application
    version v2.0.0\. Deployments 1 and 2 use the same label assignment in their Pod
    template. The Service selects the label key-value pair(s) defined by both Deployments.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 1 控制应用程序版本 v1.0.0\. 部署 2 控制应用程序版本 v2.0.0\. 部署 1 和 2 在其 Pod 模板中使用相同的标签分配。服务选择由两个部署定义的标签键值对。
- en: Implementation
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: In a Kubernetes cluster, you represent each application version with the help
    of a Deployment object. You want to roll out the new application version with
    fewer replicas than the current application version by assigning a smaller value
    to the attribute `spec.replicas`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 集群中，您可以使用部署对象来表示每个应用程序版本。通过将 `spec.replicas` 属性的值分配为比当前应用程序版本少的副本数，您可以推出新的应用程序版本。
- en: 'The following code snippet shows the truncated definition of the Deployment
    controlling the old application version:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了控制旧应用程序版本的部署的截断定义：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For the new application version, assign a smaller number of replicas:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新的应用程序版本，分配较少数量的副本：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To ensure that replicas for old and new application versions receive requests
    from consumers, the assigned Pod template label(s) in both Deployment objects
    need to be the same. Ensure that the Service selects those label(s), as shown
    in this truncated Service definition:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保旧版和新版应用程序版本的副本接收来自消费者的请求，需要在两个部署对象的分配的 Pod 模板标签上保持相同。确保服务选择这些标签，如此截断的服务定义中所示：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_deployment_strategies_CO6-1)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_deployment_strategies_CO6-1)'
- en: Selects the label assigned to both Deployments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 选择分配给两个部署的标签。
- en: Use Cases and Trade-Offs
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例和权衡
- en: Organization typically use the canary deployment strategy to roll out experimental
    features or changes with potential impact on system performance. You can evaluate
    your success criteria while making the new feature available to only a subset
    of consumers. Implementing a canary deployment usually requires fewer hardware
    resources than the blue-green deployment as the number of replicas with the new
    application version is much lower.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 组织通常使用金丝雀部署策略来推出可能对系统性能产生影响的实验性功能或更改。您可以在仅向部分消费者提供新功能的同时评估成功标准。实施金丝雀部署通常需要的硬件资源比蓝绿部署少得多，因为具有新应用程序版本的副本数量要低得多。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'A deployment is the process of making a software change available to end users
    or programs. You need to consider two aspects: the procedure of how to deploy
    a change and the routing of network traffic to the application. Select an appropriate
    deployment strategy based on use case, application type, and trade-offs.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 部署是将软件更改提供给最终用户或程序的过程。您需要考虑两个方面：如何部署更改的过程和将网络流量路由到应用程序。根据用例、应用程序类型和权衡选择合适的部署策略。
- en: 'With the Deployment primitive, Kubernetes natively supports two deployment
    strategies: the rolling deployment and the fixed deployment. The rolling deployment,
    specified by the `RollingUpdate` strategy, rolls out a change gradually in batches.
    The fixed deployment, configured by the `Recreate` strategy, first shuts down
    the old application version and then brings up the new application version.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用部署原语，Kubernetes 本地支持两种部署策略：滚动部署和固定部署。由 `RollingUpdate` 策略指定的滚动部署逐步批量推出更改。通过
    `Recreate` 策略配置的固定部署首先关闭旧的应用程序版本，然后启动新的应用程序版本。
- en: The blue-green and canary deployment strategies can be set up by creating a
    second Deployment object that manages the new application version in parallel
    with the old one. The Service then routes network traffic to replicas of both
    application versions (blue-green) or transitions consumers to the new application
    version over time (canary).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过创建第二个部署对象来设置蓝绿和金丝雀部署策略，该对象与旧版本并行管理新应用程序版本。然后，服务将网络流量路由到两个应用程序版本的副本（蓝绿），或者随着时间推移将消费者过渡到新应用程序版本（金丝雀）。
- en: Exam Essentials
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Understand how to configure strategies native to the Deployment primitive
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何配置部署原语本地的策略
- en: The exam may confront you with different deployment strategies. You need to
    understand how to implement the most common strategies and how to modify an existing
    deployment scenario. Learn how to configure the built-in strategies in the Deployment
    primitive and their options for fine-tuning the runtime behavior.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 考试可能会用不同的部署策略面对您。您需要了解如何实施最常见的策略以及如何修改现有的部署场景。学习如何配置部署原语中的内置策略及其用于调整运行时行为的选项。
- en: Practice multi-phased deployment strategies
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 练习多阶段部署策略
- en: You can implement even more sophisticated deployment scenarios with the help
    of the Deployment and Service primitives. Examples are the blue-green and canary
    deployment strategies, which require a multi-phased rollout process. Expose yourself
    to implementation techniques and rollout procedures. Operators provided by the
    Kubernetes community, e.g., [Argo Rollouts](https://argo-rollouts.readthedocs.io/en/stable/),
    offer higher-level abstractions for more sophisticated deployment strategies.
    The exam does not require you to understand external tooling to implement deployment
    strategies.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用部署和服务原语实施更复杂的部署场景。例如，蓝绿和金丝雀部署策略需要多阶段的部署过程。暴露您自己到实施技术和部署过程中的技巧。由 Kubernetes
    社区提供的运营商，例如 [Argo Rollouts](https://argo-rollouts.readthedocs.io/en/stable/)，提供更复杂的部署策略的高级抽象。考试不要求您了解外部工具以实施部署策略。
- en: Sample Exercises
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样本练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_007.xhtml#appendix_a_deployment_strategies).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可在 [附录 A](app01_split_007.xhtml#appendix_a_deployment_strategies) 中找到。
- en: 'One of your teammates created a Deployment YAML manifest to operate the container
    image `grafana/grafana:9.5.9`. Create the Deployment object from the YAML manifest
    file `deployment-grafana.yaml`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的一个队友创建了一个部署 YAML 文件清单，用于操作容器镜像 `grafana/grafana:9.5.9`。从 YAML 文件 `deployment-grafana.yaml`
    创建部署对象：
- en: '[PRE8]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You need to update all replicas with the container image `grafana/grafana:10.1.2`.
    Make sure that the rollout happens in batches of two replicas at a time. Ensure
    that a readiness probe is defined.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要更新所有副本，使用容器镜像 `grafana/grafana:10.1.2`。确保批量每次两个副本进行滚动更新。确保定义了就绪探针。
- en: In this exercise, you will set up a blue-green Deployment scenario. You’ll first
    create the initial (blue) Deployment and expose it with a Service. Later, you
    will create a second (green) Deployment and switch over traffic.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个练习中，您将设置蓝绿部署场景。首先创建初始（蓝色）部署，并通过服务公开它。稍后，您将创建第二个（绿色）部署，并切换流量。
- en: Create a Deployment named `nginx-blue` with 3 replicas. The Pod template of
    the Deployment should use container image `nginx:1.23.0` and assign the label
    `version=blue`.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建名为 `nginx-blue` 的部署，有 3 个副本。部署的 Pod 模板应使用容器镜像 `nginx:1.23.0` 并分配标签 `version=blue`。
- en: Expose the Deployment with a Service of type ClusterIP named `nginx`. Map the
    incoming and outgoing port to 80\. Select the Pod with label `version=blue`.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用类型为 ClusterIP 的服务将部署暴露出来，命名为 `nginx`。将入口和出口端口映射到 80。选择标签为 `version=blue` 的
    Pod。
- en: Run a temporary Pod with the container image `alpine/curl:3.14` to make a call
    against the Service using `curl`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行一个临时的 Pod，使用容器镜像 `alpine/curl:3.14`，使用 `curl` 调用服务。
- en: Create a second Deployment named `nginx-green` with 3 replicas. The Pod template
    of the Deployment should use container image `nginx:1.23.4` and assign the label
    `version=green`.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建名为 `nginx-green` 的第二个部署，有 3 个副本。部署的 Pod 模板应使用容器镜像 `nginx:1.23.4` 并分配标签 `version=green`。
- en: Change the Service’s label selection so that traffic will be routed to the Pods
    controlled by the Deployment `nginx-green`.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改服务的标签选择，以便将流量路由到由部署 `nginx-green` 控制的 Pod。
- en: Delete the Deployment named `nginx-blue`.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除名为 `nginx-blue` 的部署。
- en: Run a temporary Pod with the container image `alpine/curl:3.14` to make a call
    against the Service.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行一个临时 Pod，使用容器镜像 `alpine/curl:3.14` 对该服务进行调用。
