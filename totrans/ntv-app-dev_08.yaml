- en: Chapter 7\. Persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The persistence of data allows an app to form what might appear to be a memory.
    There are a number of ways to accomplish this within mobile software development,
    but the most common is through the use of a relational database. From the start
    Android and iOS have had the ability to connect, read, and write to databases.
  prefs: []
  type: TYPE_NORMAL
- en: The result of this is that a user’s session within an app is no longer an ephemeral
    existence, but one that is anchored to a point in time. Data can be stored, information
    can be saved, and state can be restored. Through very different architectures
    and approaches, there is a shared set of functionality that powers both Android
    and iOS in a way that makes it similar enough to discuss side by side.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Establish a database connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a database table or persistent object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write data to that table or persistent object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read data from that table or persistent object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, the framework-provided database management system is SQLite. The
    exact version depends on the Android OS level, but at the time of this writing
    it ranges from 3.4 in Android 1 to 3.19 in Android 27\. See [Android’s developer
    documentation](https://oreil.ly/lQegA) for up-to-date information.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite is a SQL-based relational database management system (DBMS) and is very
    similar to MySQL and PostgreSQL. There are differences, in datatypes, functions,
    and implementation details for things like `ALTER TABLE`, but they’re still very
    similar, and if you’ve had experience with any SQL database, you’ll find yourself
    at home with SQLite in no time.
  prefs: []
  type: TYPE_NORMAL
- en: Establish a Database Connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Android (but not traditional Java), the primary class you’ll use is `SqliteOpenHelper`,
    but it is `abstract`, so *it must be a subclass*. Here’s a stripped-down example:'
  prefs: []
  type: TYPE_NORMAL
- en: The `onUpgrade` method is useful for adding or migrating data when changes are
    made to your database schema. This happens when the version number of your database
    (the fourth argument of the helper constructor) has changed and runs only once
    per change. Really we should say “increased” rather than “changed” because running
    a lower DB version than exists on a device will crash immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Note that convention is to use public constants for table and column names;
    that’ll make things easier when reading or writing data from the table in other
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: To get a database instance from this helper class, we call either the `getWritableDatabase`
    or `getReadableDatabase` method, depending on what we need. The writable does
    everything the readable does, so if you plan on doing both reads and writes, use
    the former. The only time you’d want the readable version is to make sure that
    the underlying data does not get changed when performing operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you’d get a writable database instance from your helper class:'
  prefs: []
  type: TYPE_NORMAL
- en: From that point on, you’ve got access to a `SqliteDatabase` instance, which
    has APIs for common operations like querying and inserting, and broader APIs for
    executing arbitrary SQL strings, like `execSql`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Database Table or Persistent Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the subclass, you’ll have an opportunity to override `onCreate` and `onUpgrade`
    methods; let’s concentrate on just the former for now, which will be fired once,
    when the helper is first created (generally speaking, this will happen the first
    time the helper is instantiated, and it is a persistent value, so this will happen
    shortly after the first installation of the app). Subsequent launches will not
    trigger `onCreate`.
  prefs: []
  type: TYPE_NORMAL
- en: '`onCreate` is a great opportunity to create your initial schema. For example,
    let’s say we want to create a database with a single table (for now), `USAGE_EVENTS`,
    which has an identifier, an event name, and a timestamp when the event occurred.
    We’ll use standard SQL to create the database in our helper’s `onCreate` method;
    let’s extend the simple example shown earlier, but really we’re just adding some
    `String` constants to compose a SQL `create table` statement and execute it `onCreate`:'
  prefs: []
  type: TYPE_NORMAL
- en: Write Data to That Table or Persistent Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The framework provides the `SQLiteDatabase` API, which as we’ve already seen
    is perfectly capable of executing arbitrary SQL commands, but also provides methods
    for CRUD functions, including insertion. Further, the API supports database transactions,
    which we can leverage for extra control of database writes. In the following simple
    example, it may appear that the transaction isn’t doing much for us, but in reality
    it will catch errors and give us an opportunity to react to them; further, and
    perhaps more critically, if the insert operation fails—or if we add more database
    operations in the `try` block that fail—the transaction would *not* be set to
    successful and would silently roll back the entire block of statements in the
    `try` portion.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this example does appear simple, it demonstrates the pattern that you’ll
    probably want to use for any or all of your database transactions—just add more
    operations to the `try` block, and do anything extra in the `catch` block. (Remember,
    throwing an `Exception` will cause the transaction to roll back implicitly; there
    is no explicit “roll back” method.) This pattern is appropriate for much more
    complicated modifying operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Read Data from That Table or Persistent Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `SqliteDatabase` method `query` is the most direct way to get information
    back out of your database. That said, the signature you’ll probably want to use
    takes eight parameters! Let’s pretend everything is fine and dive right in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the most basic version (with only seven parameters!). This will grab
    everything from the table—all rows populated with all columns—and return a `Cursor`
    instance to navigate that data set. This is effectively `"SELECT * FROM EVENTS"`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look inside, with a more realistic query:'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding is effectively `SELECT ID FROM EVENTS WHERE NAME = \"Request Data\"
    LIMIT 1` in most SQL flavors. The placeholders are a common concept and can help
    with constancy and provide some recognition of SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'So now that we’ve successfully executed our query, where’s our data? It’s in
    an in-memory dataset we can access with the `Cursor` API; the `query` method returns
    a `Cursor` instance. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see we used the cursor to access each column by its index, but there’s
    a `Cursor` method to look up that index by name as well, `getColumnByIndex`, so
    you might do something like:'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! There are a ton of other APIs available (and third-party object-relational
    mappers [ORM]) and really unlimited things you can do with raw SQL. If you’re
    working on an application that regularly uses database reads, you should check
    out the `compileStatement` method, which compiles a SQL string and allows you
    to redefine the values with each invocation. This method is extremely fast and
    can really improve perceived performance if working with large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of this writing, Google recommended we use Room (from the [Android
    dev docs](https://oreil.ly/rtG9C)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although these APIs (SQLiteDatabase, etc.) are powerful, they are fairly low-level
    and require a great deal of time and effort to use:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is no compile-time verification of raw SQL queries. As your data graph
    changes, you need to update the affected SQL queries manually. This process can
    be time consuming and error prone.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: You need to use lots of boilerplate code to convert between SQL queries and
    data objects.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For these reasons, we highly recommended using the Room Persistence Library
    as an abstraction layer for accessing information in your app’s SQLite databases.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why SQLite? Why not room? Why not realm? Why not <insert my favorite ORM here>?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We (the authors) have used SQLite as our working example for a couple reasons:
    first, and as with other patterns and toolsets in the Android ecosystem, this
    predates Room by some distance. Second, SQL is something that developers coming
    from virtually any language are likely to have some knowledge of and will be able
    to carry between platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary difference in persistence of data between iOS and Android is related
    to the technology used. In Android, as you’ve seen, a SQLite database is a common
    approach, and there are classes and objects that interact directly with the database
    through database connections and SQL. Now iOS, on the other hand, abstracts the
    database layer technology away from the developer and has a first-party object
    graph that’s used for data persistence called Core Data. Although Core Data *can*
    use a SQLite database (and usually does) for persistence of data, it can operate
    wholly in-memory as transient storage or output to XML files. The database, then,
    becomes an implementation detail that the developer can, mostly, ignore.
  prefs: []
  type: TYPE_NORMAL
- en: Set Up and Connect to a Persistence Layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though developers are supposed to forget about the differences between
    the object graph that is Core Data and a raw SQLite database, there are equivalences
    between the two that we’ll use to direct this chapter about data persistence to
    compare and contrast with Android. Establishing a database connection is *not*
    something you’ll need to do with Core Data; the raw SQL queries and connections
    are handled by Core Data itself. An equivalent part of setup, however, is spinning
    up the Core Data “stack.”
  prefs: []
  type: TYPE_NORMAL
- en: Set up Core Data stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Getting started with Core Data in a new or existing project isn’t too hard,
    but you first need to understand what, exactly, Core Data is. Let’s start with
    the persistence layer. For our purposes, we’ll assume that we’re dealing with
    a Core Data stack that has, at its root, a SQLite database. This is, arguably,
    the most common approach to Core Data development.
  prefs: []
  type: TYPE_NORMAL
- en: Above the SQLite database and persistent store is an object called an `NSPersistentStoreCoordinator`.
    This object handles the communication between the database, the managed object
    model, and the managed object context. It uses the managed object model that’s
    defined with the different model object and translates those objects and relationships
    into database tables and SQL. It also optimizes a lot of the objects delivered
    and is really the “brains” behind a lot of the magic and optimization built into
    Core Data. You could think of it as a traffic coordinator between SQLite and the
    rest of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'A managed object model, or `NSManagedObjectModel`, is defined with every project
    with an *.xcdatamodeld* file. This is what the persistent store coordinator uses
    to determine how everything is structured. It is a file that a developer uses
    to add new entities, relationship, and properties; it’s how the data model is,
    essentially, created and defined in a project. The objects that are created as
    part of this are called “managed objects,” and they inherit from `NSManagedObject`,
    which is part of the Core Data framework. Most of the work involved in maintaining
    and working with Core Data is done at this level, along with the next class we
    need to discuss: the managed object context.'
  prefs: []
  type: TYPE_NORMAL
- en: You can think of a managed object context, or `NSManagedObjectContext`, as a
    scratchpad of sorts where you can change data contained in instances of your data
    model objects before they’re persisted in the database. A managed object context
    is the object you’ll use to provide context to Core Data for how your object should
    be created and updated. There are typically two types of contexts in a Core Data
    application, the view context (which operates on the main thread) and a background,
    or private, context that’s used for saving objects—effectively translating them
    from `NSManagedObject` instances to database table row `INSERT` and `UPDATE` commands.
  prefs: []
  type: TYPE_NORMAL
- en: In order to work with Core Data, this stack must be set up and functional before
    persistence is needed. Typically, this means when the application starts. In fact,
    most setup is done in the `application(_:didFinishLaunchingWithOptions:)` method
    inside the application delegate.
  prefs: []
  type: TYPE_NORMAL
- en: 'All this setup used to be cumbersome, but Core Data now has a handy class for
    initializing our Core Data stack called `NSPersistentContainer`. The persistent
    container handles the initialization required for a managed object model file
    and has a convenience method that can load persistent stores asynchronously. Here’s
    an example of how it’s used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This creates a container targeting a managed object model named “MyModel” and
    stores it in a variable named `persistentContainer`. The next line loads the persistent
    store, ultimately the SQLite database in our example, from the disk with a completion
    handler to check for any errors and execute code afterward. If you place this
    code in the application delegate’s startup code, the application will look for
    the managed object model file *MyModel.xcdatamodeld* in the application bundle
    and use that to create or load a SQLite database file named *MyModel.sqlite* in
    the *Application Support* directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can customize the location where the database files are placed. Historically
    the *Documents* directory has been used as a place to store the SQLite database.
    Your needs will vary, but you can do this by adding an `NSPersistentStoreDescription`
    after creating the `NSPersistentContainer` and adding it to `persistentStoreDescriptions`.
    There are other options available used to describe the persistent container, but
    those are outside the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the completion closure, you should check for errors and then update
    any user interface that might be waiting for the persistent store to load. An
    example of a more complete persistent container load might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that our Core Data stack is up and running, let’s look at how we can define
    our objects.
  prefs: []
  type: TYPE_NORMAL
- en: Define and Create a Database Table or Persistent Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our model objects are defined in the managed object model file created in Xcode.
    To add to an existing project, go to File > New > File and select Data Model under
    the Core Data section. The name of the file is the name you’ll pass to the persistent
    container during initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Inside Xcode, you can edit this file to create a new managed object by clicking
    the Add Entity button. Inside the entity description, there will be areas for
    Attributes, Relationships, and Fetched Properties. You can add individual properties
    to an entity, change the name of the entity, and assign a backing class to this
    entity all within this editor.
  prefs: []
  type: TYPE_NORMAL
- en: The individual properties are added as Attributes. These correspond to raw data
    types like `String` and `Int` in Swift classes that are generated (or provided
    manually) for each entity in a managed object model. It’s important to remember
    that the managed object model only defines the description of the entities and
    doesn’t actually interact with the database at all. It just provides, essentially,
    a mapping from the Swift code that the persistent store coordinator can understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new attribute, click the “+” button underneath the Attributes area
    of the editor. If you were adding a new property named `title` with a type of
    `String` on an entity named `MyEntity`, Xcode would automatically generate a class
    for you during compilation that’s hidden from the Xcode project. The class might
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The class itself inherits from `NSManagedObject` and is the same name as our
    entity description of `MyEntity`. It could, however, be anything we’d like it
    to be. That’s an important distinction: the class that backs a model object can
    be named separately from the entity description. Also notice that the `@NSManaged`
    attribute denotes that Core Data manages the storage of this property. That means
    this is not a normal property that’s stored. It is, in fact, backed by `setValue:`
    whenever the property is written to.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of flexibility allows us to add properties to managed objects that
    aren’t written to a database. Fundamentally, this means that we can do things
    like having a computed property that’s added as a convenience property for a managed
    object that doesn’t have to interact with the database at all. For example, we
    could define a managed object ourselves called `Person` that has `firstName` and
    `lastName` attributes stored in Core Data, but that offers a `fullName` property
    that just combines these properties without duplicating data in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using our `Person` managed object as an example (after we’ve created a corresponding
    entity description in the managed object model), let’s continue to see how we
    can persist some data.
  prefs: []
  type: TYPE_NORMAL
- en: Write and Persist Data to SQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first, and very important, thing to note about writing data in Core Data
    is that you *don’t* want to write on the main thread. There is, in fact, a handy
    convenience method in our persistent container to allow us to quickly and easily
    hop over to a background thread to write some data as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, the operation being performed could be a read. It could also be a write.
    We’re going to focus on the write aspect of this for now. In fact, let’s look
    at our earlier `Person` managed object and see how we can create a new one and
    add it to the data store.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating and updating objects in Core Data, all the operations first take
    place inside a managed object context. We can change the objects as much as we
    want in this context without it affecting the database until we explicitly save
    the changes. Because of this, we also need a context to create a new object. Here’s
    an example of how we can create a new `Person` instance and assign some properties
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Really, it’s that simple. We’ve created a new `Person` named `person` inside
    the managed object context passed into our closure. Then, we’ve assigned values
    to `firstName` and `lastName`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This object is not persisted yet, however. In fact, this object will exist
    until that closure completes, and then it’ll be destroyed along with the managed
    object context. Luckily, persisting the data isn’t hard either. It’s just one
    line with some error checking in a `do` and `try` block, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You’ll notice that we only save the *context*, not the object itself. This operation
    saves all the changes that are inside that context. So, if we created a million
    `Person`s, all of them would be saved at the same time. If we created different
    object types and changed properties in others, they would all be persisted at
    the same time as well. The entirety of the context is saved instead of individual
    objects. This can lead to performance issues. So profiling and testing with large
    data sets is recommended to prevent things like that.
  prefs: []
  type: TYPE_NORMAL
- en: In order to update an object, you only need to fetch it from Core Data within
    a managed object context, update the properties desired, and then save the context.
    Let’s look at how we can fetch and read data from our SQLite store that’s been
    saved.
  prefs: []
  type: TYPE_NORMAL
- en: Read Data from SQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the title of this section says “Read Data *from SQLite*,” we’re actually
    going to read data through the managed object context. If it *chooses* to head
    back out to the SQLite store, it’ll contact the persistent store coordinator for
    help. Using an `NSFetchRequest` as we show in a moment will cause a trip to the
    persistent store and may wind up being a very slow path. However, managed object
    contexts often have a lot of data cached in-memory for performance reasons, and
    the data that’s fetched can be utilized and operated on just like a normal object
    after the fetch occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to find an object, we have to create a fetch request and execute it
    against a managed object context like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let’s walk through what’s happening here.
  prefs: []
  type: TYPE_NORMAL
- en: First, we grab a read-only managed object context from the persistent container
    via the `viewContext` property. This allows us to view objects, but not save changes.
    Next, we create a fetch request with a type of `Person` for an entity in the managed
    object model named “Person.” After that, we use that fetch request to `fetch(_:)`
    from our managed object context. This call can `throw`, so it’s wrapped in a `do`
    and `catch` block. If the fetch can’t be completed, we throw a fatal error with
    the message, “Fetch could not be completed.”
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we should have a populated `persons` object we can use to iterate
    through to read a list of all the people we’ve persisted.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot more you can do with Core Data. It’s a very powerful tool in every
    iOS developer’s toolkit that can be utilized to create a performant and optimized
    object graph to make persisting data easy. Its largest downsides include a bit
    more verbose text and a lot of setup initially. However, some legwork in the beginning
    of a project could save you from having to write intricate and brittle SQL statements
    and instead get some compile-time checking of property names and values.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When fetching results for table views, it’s possible to use an object named
    `NSFetchedResultsController` that takes the results and an `NSFetchRequest` and
    updates the table whenever the data changes automatically. This makes interacting
    with Core Data easier for things like `UITableView` and `UICollectionView`.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android and iOS are similar in so many ways as you have seen—and will continue
    to see—throughout this book. However, this chapter really demonstrates that, at
    times, they could not be further apart.
  prefs: []
  type: TYPE_NORMAL
- en: The raw SQLite interaction method of Android offers an architectural simplicity
    not present with Core Data on iOS that allows developers to jump in with knowledge
    they might already have with server-side languages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core Data is not a database. It is a complex object graph framework that is
    *extremely* powerful and decoupled from SQLite itself in a way that attempts to
    mask its complexity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both approaches allow for persistence of data and require a good deal of planning
    and maintenance within future versions of the apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you start talking about object persistence, the next logical step is concurrency,
    which just happens to be what the next chapter is about. Let’s queue up and head
    over right now!
  prefs: []
  type: TYPE_NORMAL
