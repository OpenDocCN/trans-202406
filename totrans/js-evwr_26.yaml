- en: Chapter 25\. Mobile Application Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my high school in the mid-1990s, it was all the rage to download games for
    your [TI-81 graphing calculator](https://oreil.ly/SqOKQ). Someone would get ahold
    of a copy of a game and then it would spread like wildfire, each of us taking
    turns connecting our calculator to another with a cord in order to load the game.
    Having a game on your calculator was a way to fill the hours in the back of a
    class or study hall while maintaining the appearance of doing schoolwork. As you
    can imagine, however, this distribution method was slow, requiring two students
    to remain connected for several minutes while others waited. Today, our digital
    pocket computers are capable of much more than my humble graphing calculator,
    in part because we can easily extend their capabilities through installable third-party
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: With our initial application development complete, we can now distribute our
    application so that others may access it. In this chapter we’ll look at how to
    configure our *app.json* file for distribution. We’ll then publish our application
    publicly within Expo. Finally, we’ll generate application packages that can be
    submitted to the Apple or Google Play stores.
  prefs: []
  type: TYPE_NORMAL
- en: app.json Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expo applications include an *app.json* file, which is used to configure application-specific
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we generate a new Expo application, an *app.json* file is automatically
    created for us. Let’s take a look at the generated file for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is likely that most of these are self-explanatory, but let’s review the
    purpose of each:'
  prefs: []
  type: TYPE_NORMAL
- en: name
  prefs: []
  type: TYPE_NORMAL
- en: The name of our application.
  prefs: []
  type: TYPE_NORMAL
- en: slug
  prefs: []
  type: TYPE_NORMAL
- en: The URL name for publishing the Expo app at *expo.io/project-owner/slug*.
  prefs: []
  type: TYPE_NORMAL
- en: description
  prefs: []
  type: TYPE_NORMAL
- en: A description of our project, which will be used when publishing the application
    with Expo.
  prefs: []
  type: TYPE_NORMAL
- en: privacy
  prefs: []
  type: TYPE_NORMAL
- en: The Expo project’s public availability. This can be set to either `public` or
    `unlisted`.
  prefs: []
  type: TYPE_NORMAL
- en: sdkVersion
  prefs: []
  type: TYPE_NORMAL
- en: The Expo SDK version number.
  prefs: []
  type: TYPE_NORMAL
- en: platforms
  prefs: []
  type: TYPE_NORMAL
- en: The platforms we are targeting, which can include `ios`, `android`, and `web`.
  prefs: []
  type: TYPE_NORMAL
- en: version
  prefs: []
  type: TYPE_NORMAL
- en: Our application’s version number, which should follow the [Semantic Versioning
    standards](https://semver.org).
  prefs: []
  type: TYPE_NORMAL
- en: orientation
  prefs: []
  type: TYPE_NORMAL
- en: Our application’s default orientation, which can be locked with `portrait` or
    `landscape` values, or match the user’s device rotation with `default`.
  prefs: []
  type: TYPE_NORMAL
- en: icon
  prefs: []
  type: TYPE_NORMAL
- en: A path to the application icon, which will be used for both iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: splash
  prefs: []
  type: TYPE_NORMAL
- en: The image location and settings for the app loading screen.
  prefs: []
  type: TYPE_NORMAL
- en: updates
  prefs: []
  type: TYPE_NORMAL
- en: A configuration for how our application should check for over the air (OTA)
    updates when the app is loaded. The `fallbackToCacheTimeout` parameter allows
    us to specify a length of time in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: assetBundlePatterns
  prefs: []
  type: TYPE_NORMAL
- en: Allows us to specify the location of assets that should be bundled with our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: ios and android
  prefs: []
  type: TYPE_NORMAL
- en: Enable platform-specific settings.
  prefs: []
  type: TYPE_NORMAL
- en: This default configuration provides us with a solid basis for our application.
    There are a number of additional settings, which can be found in the [Expo documentation](https://oreil.ly/XXT4k).
  prefs: []
  type: TYPE_NORMAL
- en: Icons and App Loading Screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The small squarish icons found on our devices have become one of the most recognizable
    designs in modern society. Close your eyes and I’m sure you can imagine dozens
    of them, down to a logo or a specific background color. Additionally, when a user
    taps an icon there is an initial static “splash screen,” which is displayed while
    the application loads. Up until now we’ve used the default empty Expo icons and
    splash screen. We can replace those with custom designs in our application.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve included a Notedly icon and splash screen in the *assets/custom* folder.
    We can make use of these by replacing the images in the *assets* directory with
    them or updating our *app.json* configuration to point to the files in the *custom*
    subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: App Icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *icon.png* file is a square 1024×1024px PNG file. If we point to this file
    with our *app.json* `icon` property, Expo will generate the appropriate icon sizes
    for various platforms and devices. The image should be exactly square and without
    any transparent pixels. This is the simplest and most straightforward way to include
    an application icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the single cross-platform icon, we have the option to include
    platform-specific icons. The main draw of this approach would be to include separate
    icon styles for Android and iOS, particularly if you are interested in using Android’s
    [adaptive icons](https://oreil.ly/vLC3f).
  prefs: []
  type: TYPE_NORMAL
- en: 'For iOS, we would continue to use a single 1024×1024 png. In the *app.json*
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To make use of Android’s adaptive icon, we would specify a `foregroundImage`,
    a `backgroundColor` (or `backgroundImage`), and a fallback static `icon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For our use case, we can continue to use the single static icon.
  prefs: []
  type: TYPE_NORMAL
- en: Splash Screens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The splash screen is a full screen image that will briefly display while our
    application is booting on the device. We can replace the default Expo image with
    one found in *assets/custom*. Though device sizes vary within and across platforms,
    I’ve chosen to use a size of 1242×2436, as recommended by the [Expo documentation](https://oreil.ly/7a-5J).
    Expo will then resize the image to work across device screens and aspect ratios.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can configure our splash screen in the *app.json* file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, we are setting a white background color, which may be visible as
    the image loads or, depending on our selected `resizeMode`, as a border around
    the splash screen image. We can update this to match the color of our screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `resizeMode` dictates how the image should be resized for various screen
    sizes. By setting this to `contain`, we preserve the aspect ratio of the original
    image. When you use `contain`, some screen sizes or resolutions will see the `backgroundColor`
    as a border around the splash screen image. Alternately, we could set `resizeMode`
    to `cover`, which will expand the image to fill the entire screen. Since our application
    has a subtle gradient, let’s set our `resizeMode` to `cover`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of our application''s splash screen](assets/jsev_2501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-1\. Our application splash screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With this, our icon and splash screen images are configured (see [Figure 25-1](#splash_screen)).
    We are now ready to look at how to distribute our application to make it accessible
    to others.
  prefs: []
  type: TYPE_NORMAL
- en: Expo Publish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During development, our application is accessible to us in the Expo Client application
    on a physical device, over our local area network. This means that we can access
    the application as long as our development machine and phone are on the same network.
    Expo enables us to publish our project, which uploads the application to an Expo
    CDN and gives us a publicly accessible URL. With this, anyone can run our application
    through the Expo Client app. This can be useful for testing or quick application
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: To publish our project, we can click the “Publish or republish project” link
    in the browser’s Expo Dev Tools (see [Figure 25-2](#expo_publish)), or type `expo
    publish` in our terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Expo Dev Tool''s publish screen.](assets/jsev_2502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-2\. We can publish our application directly from Expo Dev Tools
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once the packaging has been completed, anyone can visit *https://exp.host/@<username>/<slug>*
    to access the application through the Expo Client App.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Native Builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While distributing directly through Expo is a great option for testing or quick
    use cases, we will most likely want to release our application through the Apple
    App Store or Google Play Store. To do so, we will build the files that can be
    uploaded to the respective store.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the Expo documentation, Windows users need to enable Windows Subsystem
    for Linux (WSL). To accomplish this, follow the [Installation Guide for Windows
    10](https://oreil.ly/B8_nd) provided by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generating an iOS build requires a membership to the [Apple Developer Program](https://oreil.ly/E0NuU),
    which costs $99 a year. With an account, we can then add a `bundleIdentifier`
    for iOS in our *app.json* file. This identifier should follow reverse DNS notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With our *app.json* file updated, we can generate the build. In your terminal
    application, from the root of the project directory, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the build you’ll be prompted to sign in with your Apple ID. Once
    you are signed in, you’ll be asked several questions about how you would like
    to handle credentials. Expo is able to manage all credentials and certificates
    for us, which you can permit by selecting the first option at each of the following
    prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you have an active Apple Developer Program account, Expo will then generate
    the file, which can be submitted to the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Android we can generate either an Android Package File (APK) or an Android
    App Bundle (AAB) file. Android App Bundles are the more modern format, so let’s
    go that route. If you are interested, the [Android developers documentation](https://oreil.ly/mEAlR)
    offers a detailed description of the benefits of App Bundles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we generate the bundle, let’s update our *app.json* file to include
    an Android `package` identifier. Similarly to iOS, this should be in reverse DNS
    notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we can generate the app bundle from our terminal application. Be
    sure to `cd` into the root of the project and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'App Bundles are required to be signed. Though we can generate a signature ourselves,
    Expo can manage the keystore for us. After running the command to generate the
    bundle, you’ll see the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you select `1`, Expo will generate the App Bundle for you. At the end of
    the process, you can download the file, which can be uploaded to the Google Play
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing to App Stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of the shifting review guidelines and associated costs, I won’t be walking
    through the specifics of submitting our application to the Apple App Store or
    Google Play Store. The [Expo documentation](https://oreil.ly/OmGB2) does a nice
    job of collecting resources and guidelines and is a helpful, up-to-date guide
    on how to navigate the app store distribution process.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we’ve looked at how to publish and distribute a React Native
    application. Expo’s tooling allows us to quickly publish applications for testing
    and generate production builds that can be uploaded to app stores. Expo also provides
    us with options around levels of control for managing certificates and dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we’ve successfully written and published a backend data API, a web
    application, a desktop application, and a cross-platform mobile application!
  prefs: []
  type: TYPE_NORMAL
