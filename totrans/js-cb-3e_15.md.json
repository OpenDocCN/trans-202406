["```\nconst url = 'https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY';\nfetch(url)\n  .then(response => response.json())\n  .then(data => console.log(data));\n```", "```\nconst url = 'https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY';\n\nasync function fetchRequest() {\n  const response = await fetch(url);\n  const data = await response.json();\n  console.log(data);\n}\n\nfetchRequest();\n```", "```\nconst response = await fetch(url, {\n  method: 'GET',\n  mode: 'cors',\n  credentials: 'omit',\n  redirect: 'follow',\n  referrerPolicy: 'no-referrer'\n});\n```", "```\nasync function fetchRequestWithError() {\n  const response = await fetch(url);\n  if (response.status >= 200 && response.status < 400) {\n    const data = await response.json();\n    console.log(data);\n  } else {\n    // Handle server error\n    // example: INTERNAL SERVER ERROR: 500 error\n    console.log(`${response.statusText}: ${response.status} error`);\n  }\n}\n```", "```\nasync function fetchRequestWithError() {\n  try {\n    const response = await fetch(url);\n    if (response.status >= 200 && response.status < 400) {\n      const data = await response.json();\n      console.log(data);\n    } else {\n      // Handle server error\n      // example: INTERNAL SERVER ERROR: 500 error\n      console.log(`${response.statusText}: ${response.status} error`);\n    }\n  } catch (error) {\n    // Generic error handler\n    console.log(error);\n  }\n}\n```", "```\nfetch(url)\n  .then((response) => {\n    if (response.status >= 200 && response.status < 400) {\n      return response.json();\n    } else {\n      // Handle server error\n      // example: INTERNAL SERVER ERROR: 500 error\n      console.log(`${response.statusText}: ${response.status} error`);\n    }\n  })\n  .then((data) => {\n    console.log(data)\n  }).catch(error) => {\n    // Generic error handler\n    console.log(error);\n  };\n```", "```\nconst url = 'https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY';\nconst request = new XMLHttpRequest();\nrequest.open('GET', url);\nrequest.send();\n\nrequest.onload = () => {\n  if (request.status >= 200 && request.status < 400) {\n    // successful request logs the returned JSON data\n    const data = JSON.parse(request.response);\n    console.log(data);\n  } else {\n    // server error\n    // example: INTERNAL SERVER ERROR: 500 error\n    console.log(`${request.statusText}: ${request.status} error`);\n  }\n};\n\n// request error\nrequest.onerror = () => console.log(request.statusText);\n```", "```\nconst myForm = document.getElementById('my-form');\nconst url = 'http://localhost:8080/';\n\nmyForm.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const formData = new FormData(myForm);\n  const response = await fetch(url, {\n    method: 'post',\n    body: formData\n  });\n\n  const result = await response.text();\n  alert(result);\n});\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Form POST</title>\n  </head>\n  <body>\n    <h1>Form POST HTML</h1>\n\n    <form id=\"my-form\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" name=\"name\" />\n\n      <label for=\"mail\">E-mail:</label>\n      <input type=\"email\" id=\"mail\" name=\"email\" />\n\n      <label for=\"msg\">Message:</label>\n      <textarea id=\"message\" name=\"message\"></textarea>\n\n      <button>Submit</button>\n    </form>\n\n    <script>\n      const myForm = document.getElementById('my-form');\n      const url = 'http://localhost:8080/';\n\n      myForm.addEventListener('submit', async event => {\n      event.preventDefault();\n\n      const formData = new FormData(myForm);\n      const response = await fetch(url, {\n      method: 'post',\n      body: formData\n      });\n\n      const result = await response.text();\n      alert(result);\n      });\n\n    </script>\n  </body>\n</html>\n```", "```\nconst myForm = document.getElementById('my-form');\nconst formData = new FormData(myForm);\n```", "```\nconst myForm = document.getElementById('my-form');\nconst url = 'http://localhost:8080/';\n\nmyForm.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const formData = new FormData(myForm);\n  // add a new field using FormData.append\n  formData.append('user', true);\n\n  const response = await fetch(url, {\n    method: 'post',\n    body: formData\n  });\n\n  const result = await response.text();\n  console.log(result);\n});\n```", "```\n{\n  name: 'Adam',\n  email: 'adam@example.com',\n  message: 'Hello',\n  user: 'true'\n}\n```", "```\nconst express = require('express');\nconst formidable = require('formidable');\nconst cors = require('cors');\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\napp.get('/', (req, res) =>\n  res.send('Example server for receiving JS POST requests')\n);\n\napp.post('/', (req, res) => {\n  const form = formidable();\n\n  form.parse(req, (err, fields) => {\n    if (err) {\n      return;\n    }\n    console.log('POST body:', fields);\n    res.sendStatus(200);\n  });\n});\n\napp.listen(port, () =>\n  console.log(`Example app listening at http://localhost:${port}`)\n);\n```", "```\nconst niceThings = document.getElementById('nice-thing');\nniceThings.addEventListener('change', async () => {\n  // GET request and events go here\n});\n```", "```\nconst niceThings = document.getElementById('nice-thing');\nconst url = 'http://localhost:8080/select';\n\n// perform GET request when select value changes\nniceThings.addEventListener('change', async () => {\n  // object containing select value\n  const selection = {\n    niceThing: niceThings.value\n  };\n\n  // GET request to server\n  const response = await fetch(url, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8'\n    },\n    body: JSON.stringify(selection)\n  });\n\n});\n```", "```\nconst select = document.getElementById('nicestuff');\n\nif (response.ok) {\n  const result = await response.json();\n  // empty the select element\n  select.length = 0;\n  // add a default display option with text and no value\n  select.options[0] = new Option('--Please choose an option--', '');\n  // populate the select with the returned values\n  for (let i = 0; i < result.length; i += 1) {\n    select.options[select.length] = new Option(result[i], result[i]);\n  }\n  // display the select element\n  select.style.display = 'block';\n} else {\n  // if there's a problem fetching the data, display an error\n  alert('Error');\n  }\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Select List</title>\n    <style>\n      #nicestuff {\n        display: none;\n        margin: 10px 0;\n      }\n\n      label,\n      legend {\n        display: block;\n        font-size: 1.6rem;\n        font-weight: 700;\n        margin-bottom: 0.5rem;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Select List</h1>\n\n    <form id=\"my-form\">\n      <label for=\"pet-select\">Select a nice thing:</label>\n\n      <select name=\"nicething\" id=\"nice-thing\">\n        <option value=\"\">--Please choose an option--</option>\n        <option value=\"birds\">Birds</option>\n        <option value=\"flowers\">Flowers</option>\n        <option value=\"sweets\">Sweets</option>\n        <option value=\"critters\">Cute Critters</option>\n      </select>\n      <select id=\"nicestuff\">\n        <option value=\"\">--Please choose an option--</option>\n      </select>\n    </form>\n    <script>\n    const niceThings = document.getElementById('nice-thing');\n    const select = document.getElementById('nicestuff');\n    const url = 'http://localhost:8080/select';\n\n    // perform GET request when select value changes\n    niceThings.addEventListener('change', async () => {\n    // object containing select value\n    const selection = {\n      niceThing: niceThings.value\n    };\n\n    // GET request to server\n    const response = await fetch(url, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(selection)\n    });\n\n    // if fetch is successful\n    if (response.ok) {\n      const result = await response.json();\n      // empty the select element\n      select.length = 0;\n      // add a default display option with text and no value\n      select.options[0] = new Option('--Please choose an option--', '');\n      // populate the select with the returned values\n      for (let i = 0; i < result.length; i += 1) {\n        select.options[select.length] = new Option(result[i], result[i]);\n      }\n      // display the select element\n      select.style.display = 'block';\n    } else {\n      // if there's a problem fetching the data, display an error\n      alert('Error');\n    }\n    });\n\n    </script>\n  </body>\n</html>\n```", "```\nconst express = require('express');\nconst formidable = require('formidable');\nconst cors = require('cors');\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\napp.get('/', (req, res) =>\n  res.send('Example server for receiving JS POST requests')\n);\n\napp.post('/select', (req, res) => {\n  const form = formidable();\n\n  form.parse(req, (err, fields) => {\n    if (err) {\n      return;\n    }\n    if (fields.niceThing === 'critters') {\n      res.send(['puppies', 'kittens', 'guinea pigs']);\n    } else if (fields.niceThing === 'sweets') {\n      res.send(['licorice', 'cake', 'cookies', 'custard']);\n    } else if (fields.niceThing === 'birds') {\n      res.send(['robin', 'mockingbird', 'finch', 'dove']);\n    } else if (fields.niceThing === 'flowers') {\n      res.send(['roses', 'lilys', 'daffodils', 'pansies']);\n    } else {\n      res.send(['No Nice Things Found']);\n    }\n  });\n});\n\napp.listen(port, () =>\n  console.log(`Example app listening at http://localhost:${port}`)\n);\n```", "```\nconst jsonobj = '{\"test\" : \"value1\", \"test2\" : 3.44, \"test3\" : 0}';\nconst obj = JSON.parse(jsonobj, (key, value) => {\n  if (typeof value === 'number') {\n    if (value === 0) {\n      value = false;\n    } else if (value === 1) {\n      value = true;\n    }\n  }\n  return value;\n});\n\nconsole.log(obj.test3); // false\n```", "```\nconst arr = new Array(\"one\",\"two\",\"three\");\n```", "```\n[\"one\",\"two\",\"three\"];\n```", "```\nconst obj3 = {\n   prop1 : \"test\",\n   result : true,\n   num : 5.44,\n   name : \"Joe\",\n   cts : [45,62,13]\n };\n```", "```\n{\"prop1\":\"test\",\"result\":true,\"num\":5.44,\"name\":\"Joe\",\"cts\":[45,62,13]}\n```", "```\nconst url = 'https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml';\n\nasync function fetchAndParse() {\n  const response = await fetch(url);\n  const data = await response.text();\n  console.log(data);\n}\n\nfetchAndParse();\n```", "```\nconst url = 'https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml';\n\nasync function fetchAndParse() {\n  const response = await fetch(url);\n  const data = await response.text();\n  const parser = new DOMParser();\n  const XMLDocument = parser.parseFromString(data, 'text/xml');\n  console.log(XMLDocument);\n}\n\nfetchAndParse();\n```", "```\n(async () => {\n  const url = 'https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml';\n\n  // fetch and parse the XML document\n  async function fetchAndParse() {\n    const response = await fetch(url);\n    const data = await response.text();\n    const parser = new DOMParser();\n    const XMLDocument = parser.parseFromString(data, 'text/xml');\n    return XMLDocument;\n  }\n\n  function displayTitles(xml) {\n    // HTML element where the results will be displayed\n    // the markup contains a ul with an id of \"results\"\n    const listElem = document.getElementById('results');\n    // get the article titles\n    // each is wrapped in a <title> tag within an <item> tag\n    const titles = xml.querySelectorAll('item title');\n    // loop over each title in the XML; append its text content to the HTML list\n    titles.forEach(title => {\n      const listItem = document.createElement('li');\n      listItem.innerText = title.textContent;\n      listElem.appendChild(listItem);\n    });\n  }\n\n  const xml = await fetchAndParse();\n  displayTitles(xml);\n})();\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Binary Data</title>\n  </head>\n  <body>\n    <h1>Binary Data</h1>\n\n    <img id=\"result\" />\n    <script>\n      async function fetchImage() {\n      const url = 'logo.png';\n      const response = await fetch(url);\n      const blob = await response.blob();\n\n      // add returned url to image element\n      const img = document.getElementById('result');\n      img.src = URL.createObjectURL(blob);\n      }\n\n      fetchImage();\n    </script>\n  </body>\n</html>\n```", "```\nfetch('https://api.example.com', {\n  credentials: \"include\"\n})\n```", "```\nconst http = require('http');\nconst Cookies = require('cookies');\n\nconst server = http.createServer((req,res) => {\n  // Set CORS headers\n  res.setHeader('Content-type', 'text/plain');\n  res.setHeader('Access-Control-Allow-Origin', 'https://somedomain.com');\n  res.setHeader('Access-Control-Allow-Credentials', true);\n\n  const cookies = new Cookies (req, res);\n  cookies.set(\"apple\",\"red\");\n\n  res.writeHead(200);\n  res.end(\"Hello cross-domain\");\n\n});\n\nserver.listen(8080);\n```", "```\nconst request = new XMLHttpRequest();\n\nrequest.onreadystatechange = function() {\n    if (this.readyState == 4) {\n        console.log(this.status);\n        if (this.status == 200) {\n            document.getElementById('result').innerHTML = this.responseText;\n        }\n    }\n};\nrequest.open('GET','http://localhost:8080/');\nrequest.withCredentials = true;\nrequest.send(null);\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Using Websockets</title>\n  </head>\n  <body>\n    <h1>Using Websockets</h1>\n\n    <div id=\"output\"></div>\n    <script type=\"text/javascript\">\n      const socket = new WebSocket('ws://localhost:8080');\n      socket.onmessage = event => {\n        const msg = JSON.parse(event.data);\n        msg.counter = Number(msg.counter) + 1;\n        msg.strng += `${msg.counter}-`;\n        const html = `<p> ${msg.strng} </p>`;\n        document.getElementById('output').innerHTML = html;\n        socket.send(JSON.stringify(msg));\n      };\n    </script>\n  </body>\n</html>\n```", "```\nvar wsServer = require('ws').Server;\nvar wss = new wsServer({port:8001});\nwss.on('connection', (function (conn) {\n\n    // object being passed back and forth between\n    // client and server\n    var counter = {counter: 1, strng: ''};\n\n    // send first communication to client\n    conn.send(JSON.stringify(counter));\n\n    // on response back\n    conn.on('message', function(message) {\n        var ct = JSON.parse(message);\n        ct.counter = parseInt(ct.counter) + 1;\n        if (ct.counter < 100) {\n           conn.send(JSON.stringify(ct));\n        }\n    });\n}));\n```", "```\nconst url = 'http://localhost:8080/';\n\nasync function longPoll() {\n  const response = await fetch(url);\n  // if message received, log response to console and call polling function\n  const message = await response.text();\n  console.log(message);\n  await longPoll();\n}\n\nlongPoll();\n```", "```\nconst url = 'http://localhost:8080/';\n\nasync function longPoll() {\n  try {\n    // if message received, log response to console and call polling function\n    const response = await fetch(url);\n    const message = await response.text();\n    console.log(message);\n    await longPoll();\n  } catch (error) {\n    // if fetch returns an error, wait 1 second and try again\n    console.log(`Request failed ${error}`);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    await longPoll();\n  }\n}\n\nlongPoll();\n```"]