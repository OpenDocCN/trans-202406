["```\n$ mongo\n$ use notedly\n$ db.notes.remove({})\n```", "```\nconst mongoose = require('mongoose');\n```", "```\n// add the users context\nnewNote: async (parent, args, { models, user }) => {\n  // if there is no user on the context, throw an authentication error\n  if (!user) {\n    throw new AuthenticationError('You must be signed in to create a note');\n  }\n\n  return await models.Note.create({\n    content: args.content,\n    // reference the author's mongo id\n    author: mongoose.Types.ObjectId(user.id)\n  });\n},\n```", "```\nauthor: {\n  type: mongoose.Schema.Types.ObjectId,\n  ref: 'User',\n  required: true\n}\n```", "```\nmutation {\n  newNote(content: \"Hello! This is a user-created note\") {\n    id\n    content\n  }\n}\n```", "```\n{\n  \"Authorization\": \"<YOUR_JWT>\"\n}\n```", "```\nmongo\ndb.notes.find({_id: ObjectId(\"A DOCUMENT ID HERE\")})\n```", "```\ndeleteNote: async (parent, { id }, { models, user }) => {\n  // if not a user, throw an Authentication Error\n  if (!user) {\n    throw new AuthenticationError('You must be signed in to delete a note');\n  }\n\n  // find the note\n  const note = await models.Note.findById(id);\n  // if the note owner and current user don't match, throw a forbidden error\n  if (note && String(note.author) !== user.id) {\n    throw new ForbiddenError(\"You don't have permissions to delete the note\");\n  }\n\n  try {\n    // if everything checks out, remove the note\n    await note.remove();\n    return true;\n  } catch (err) {\n    // if there's an error along the way, return false\n    return false;\n  }\n},\n```", "```\nupdateNote: async (parent, { content, id }, { models, user }) => {\n  // if not a user, throw an Authentication Error\n  if (!user) {\n    throw new AuthenticationError('You must be signed in to update a note');\n  }\n\n  // find the note\n  const note = await models.Note.findById(id);\n  // if the note owner and current user don't match, throw a forbidden error\n  if (note && String(note.author) !== user.id) {\n    throw new ForbiddenError(\"You don't have permissions to update the note\");\n  }\n\n  // Update the note in the db and return the updated note\n  return await models.Note.findOneAndUpdate(\n    {\n      _id: id\n    },\n    {\n      $set: {\n        content\n      }\n    },\n    {\n      new: true\n    }\n  );\n},\n```", "```\ntype Query {\n  ...\n  user(username: String!): User\n  users: [User!]!\n  me: User!\n}\n```", "```\nmodule.exports = {\n  // ...\n  // add the following to the existing module.exports object:\n  user: async (parent, { username }, { models }) => {\n    // find a user given their username\n    return await models.User.findOne({ username });\n  },\n  users: async (parent, args, { models }) => {\n    // find all users\n    return await models.User.find({});\n  },\n  me: async (parent, args, { models, user }) => {\n    // find a user given the current user context\n    return await models.User.findById(user.id);\n  }\n}\n```", "```\nquery {\n  user(username:\"adam\") {\n    username\n    email\n    id\n  }\n}\n```", "```\nquery {\n  users {\n    username\n    email\n    id\n  }\n}\n```", "```\n{\n  \"Authorization\": \"<YOUR_JWT>\"\n}\n```", "```\nquery {\n  me {\n    username\n    email\n    id\n  }\n}\n```", "```\ntype Note {\n  // add the following properties to the Note type\n  favoriteCount: Int!\n  favoritedBy: [User!]\n}\n```", "```\ntype User {\n   // add the favorites property to the User type\n   favorites: [Note!]!\n }\n```", "```\ntype Mutation {\n  // add toggleFavorite to the Mutation type\n  toggleFavorite(id: ID!): Note!\n}\n```", "```\nconst noteSchema = new mongoose.Schema(\n  {\n    content: {\n      type: String,\n      required: true\n    },\n    author: {\n      type: String,\n      required: true\n    },\n    // add the favoriteCount property\n    favoriteCount: {\n      type: Number,\n      default: 0\n    },\n    // add the favoritedBy property\n    favoritedBy: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'User'\n      }\n    ]\n  },\n  {\n    // Assigns createdAt and updatedAt fields with a Date type\n    timestamps: true\n  }\n);\n```", "```\ntoggleFavorite: async (parent, { id }, { models, user }) => {\n  // if no user context is passed, throw auth error\n  if (!user) {\n    throw new AuthenticationError();\n  }\n\n  // check to see if the user has already favorited the note\n  let noteCheck = await models.Note.findById(id);\n  const hasUser = noteCheck.favoritedBy.indexOf(user.id);\n\n  // if the user exists in the list\n  // pull them from the list and reduce the favoriteCount by 1\n  if (hasUser >= 0) {\n    return await models.Note.findByIdAndUpdate(\n      id,\n      {\n        $pull: {\n          favoritedBy: mongoose.Types.ObjectId(user.id)\n        },\n        $inc: {\n          favoriteCount: -1\n        }\n      },\n      {\n        // Set new to true to return the updated doc\n        new: true\n      }\n    );\n  } else {\n    // if the user doesn't exist in the list\n    // add them to the list and increment the favoriteCount by 1\n    return await models.Note.findByIdAndUpdate(\n      id,\n      {\n        $push: {\n          favoritedBy: mongoose.Types.ObjectId(user.id)\n        },\n        $inc: {\n          favoriteCount: 1\n        }\n      },\n      {\n        new: true\n      }\n    );\n  }\n},\n```", "```\nmutation {\n  newNote(content: \"Check check it out!\") {\n    content\n    favoriteCount\n    id\n  }\n}\n```", "```\nmutation {\n  toggleFavorite(id: \"<YOUR_NOTE_ID_HERE>\") {\n    favoriteCount\n  }\n}\n```", "```\nquery {\n  note(id: \"5c99fb88ed0ca93a517b1d8e\") {\n    id\n    content\n    # the information about the author note\n    author {\n      username\n      id\n    }\n  }\n}\n```", "```\nmodule.exports = {\n  // Resolve the author info for a note when requested\n  author: async (note, args, { models }) => {\n    return await models.User.findById(note.author);\n  },\n  // Resolved the favoritedBy info for a note when requested\n  favoritedBy: async (note, args, { models }) => {\n    return await models.User.find({ _id: { $in: note.favoritedBy } });\n  }\n};\n```", "```\nmodule.exports = {\n  // Resolve the list of notes for a user when requested\n  notes: async (user, args, { models }) => {\n    return await models.Note.find({ author: user._id }).sort({ _id: -1 });\n  },\n  // Resolve the list of favorites for a user when requested\n  favorites: async (user, args, { models }) => {\n    return await models.Note.find({ favoritedBy: user._id }).sort({ _id: -1 });\n  }\n};\n```", "```\nconst Query = require('./query');\nconst Mutation = require('./mutation');\nconst Note = require('./note');\nconst User = require('./user');\nconst { GraphQLDateTime } = require('graphql-iso-date');\n\nmodule.exports = {\n  Query,\n  Mutation,\n  Note,\n  User,\n  DateTime: GraphQLDateTime\n};\n```", "```\nquery {\n  note(id: \"<YOUR_NOTE_ID_HERE>\") {\n    id\n    content\n    # the information about the author note\n    author {\n      username\n      id\n    }\n  }\n}\n```", "```\nmutation {\n  toggleFavorite(id: \"<YOUR NOTE ID>\") {\n    favoriteCount\n    favoritedBy {\n      username\n    }\n  }\n}\n```"]