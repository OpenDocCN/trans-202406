["```\n$ kubectl apply -f https://projectcontour.io/quickstart/contour.yaml\n```", "```\n$  kubectl get -n projectcontour service envoy -o wide\nNAME      CLUSTER-IP     EXTERNAL-IP          PORT(S)      ...\ncontour   10.106.53.14   a477...amazonaws.com 80:30274/TCP ...\n```", "```\n<*ip-address*> alpaca.example.com bandicoot.example.com\n```", "```\n$ kubectl create deployment be-default \\\n  --image=gcr.io/kuar-demo/kuard-amd64:blue \\\n  --replicas=3 \\\n  --port=8080\n$ kubectl expose deployment be-default\n$ kubectl create deployment alpaca \\\n  --image=gcr.io/kuar-demo/kuard-amd64:green \\\n  --replicas=3 \\\n  --port=8080\n$ kubectl expose deployment alpaca\n$ kubectl create deployment bandicoot \\\n  --image=gcr.io/kuar-demo/kuard-amd64:purple \\\n  --replicas=3 \\\n  --port=8080\n$ kubectl expose deployment bandicoot\n$ kubectl get services -o wide\n\nNAME             CLUSTER-IP    ... PORT(S)  ... SELECTOR\nalpaca           10.115.245.13 ... 8080/TCP ... run=alpaca\nbandicoot        10.115.242.3  ... 8080/TCP ... run=bandicoot\nbe-default       10.115.246.6  ... 8080/TCP ... run=be-default\nkubernetes       10.115.240.1  ... 443/TCP  ... <none>\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: simple-ingress\nspec:\n  defaultBackend:\n    service:\n      name: alpaca\n      port:\n        number: 8080\n```", "```\n$ kubectl apply -f simple-ingress.yaml\ningress.extensions/simple-ingress created\n```", "```\n$ kubectl get ingress\nNAME             HOSTS   ADDRESS   PORTS   AGE\nsimple-ingress   *                 80      13m\n\n$ kubectl describe ingress simple-ingress\nName:             simple-ingress\nNamespace:        default\nAddress:\nDefault backend:  alpaca:8080\n(172.17.0.6:8080,172.17.0.7:8080,172.17.0.8:8080)\nRules:\n  Host  Path  Backends\n  ----  ----  --------\n  *     *     alpaca:8080 (172.17.0.6:8080,172.17.0.7:8080,172.17.0.8:8080)\nAnnotations:\n  ...\n\nEvents:  <none>\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: host-ingress\nspec:\n  defaultBackend:\n    service:\n      name: be-default\n      port:\n        number: 8080\n  rules:\n  - host: alpaca.example.com\n    http:\n      paths:\n      - pathType: Prefix\n        path: /\n        backend:\n          service:\n            name: alpaca\n            port:\n              number: 8080\n```", "```\n$ kubectl apply -f host-ingress.yaml\ningress.extensions/host-ingress created\n```", "```\n$ kubectl get ingress\nNAME             HOSTS               ADDRESS   PORTS   AGE\nhost-ingress     alpaca.example.com            80      54s\nsimple-ingress   *                             80      13m\n\n$ kubectl describe ingress host-ingress\nName:             host-ingress\nNamespace:        default\nAddress:\nDefault backend:  be-default:8080 (<none>)\nRules:\n  Host                Path  Backends\n  ----                ----  --------\n  alpaca.example.com\n                      /   alpaca:8080 (<none>)\nAnnotations:\n  ...\n\nEvents:  <none>\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: path-ingress\nspec:\n  rules:\n  - host: bandicoot.example.com\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: bandicoot\n            port:\n              number: 8080\n      - pathType: Prefix\n        path: \"/a/\"\n        backend:\n          service:\n            name: alpaca\n            port:\n              number: 8080\n```", "```\n$ kubectl delete ingress host-ingress path-ingress simple-ingress\n$ kubectl delete service alpaca bandicoot be-default\n$ kubectl delete deployment alpaca bandicoot be-default\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  creationTimestamp: null\n  name: tls-secret-name\ntype: kubernetes.io/tls\ndata:\n  tls.crt: <base64 encoded certificate>\n  tls.key: <base64 encoded private key>\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-ingress\nspec:\n  tls:\n  - hosts:\n    - alpaca.example.com\n    secretName: tls-secret-name\n  rules:\n  - host: alpaca.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: alpaca\n          servicePort: 8080\n```"]