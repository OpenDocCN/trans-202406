["```\n(module ![1](Images/1.png)\n  (func $add (param $a i32) (param $b i32) (result i32) ![2](Images/2.png)\n    local.get $a ![3](Images/3.png)\n    local.get $b\n    i32.add)\n  (export \"add\" (func $add)) ![4](Images/4.png)\n)\n```", "```\n$ npx -p wabt wat2wasm add.wat -o add.wasm\n```", "```\nconst fs = require('fs/promises'); // Needs Node.js v14 or higher.\n\n(async () => {\n  const wasm = await fs.readFile('./add.wasm');\n  const { instance: { exports: { add } } } = await WebAssembly.instantiate(wasm);\n  console.log(add(2, 3));\n})();\n```", "```\n$ node add.js\n```", "```\n$ docker run --rm -v $(pwd):/src -u $(id -u):$(id -g) \\\n  emscripten/emsdk emcc happycoin-threads.c -pthread \\\n  -s PTHREAD_POOL_SIZE=4 -o happycoin-threads.js\n```", "```\n$ node happycoin-threads.js\n```", "```\n120190845798210000 ... [ 106 more entries ] ... 14356375476580480000\ncount 108\nPthread 0x9017f8 exited.\nPthread 0x701500 exited.\nPthread 0xd01e08 exited.\nPthread 0xb01b10 exited.\n```", "```\nexport function add(a: number, b: number): number {\n  return a + b\n}\n```", "```\nexport function add(a: i32, b: i32): i32 {\n  return a + b\n}\n```", "```\n$ npx -p assemblyscript asc add.ts --binaryFile add.wasm\n```", "```\n(module\n (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))\n (memory $0 0)\n (export \"add\" (func $add/add))\n (export \"memory\" (memory $0))\n (func $add/add (param $0 i32) (param $1 i32) (result i32)\n  local.get $0\n  local.get $1\n  i32.add\n )\n)\n```", "```\n$ npm init -y\n$ npm install assemblyscript\n$ npm install @assemblyscript/loader\n```", "```\n\"build\": \"asc happycoin.ts --binaryFile happycoin.wasm --exportRuntime\",\n\"start\": \"node --no-warnings --experimental-wasi-unstable-preview1 happycoin.mjs\"\n```", "```\nimport 'wasi'; ![1](Images/1.png)\n\nconst randArr64 = new Uint64Array(1);\nconst randArr8 = Uint8Array.wrap(randArr64.buffer, 0, 8); ![2](Images/2.png)\nfunction random64(): u64 {\n  crypto.getRandomValues(randArr8); ![3](Images/3.png)\n  return randArr64[0];\n}\n\nfunction sumDigitsSquared(num: u64): u64 {\n  let total: u64 = 0;\n  while (num > 0) {\n    const numModBase = num % 10;\n    total += numModBase ** 2;\n    num = num / 10;\n  }\n  return total;\n}\n\nfunction isHappy(num: u64): boolean {\n  while (num != 1 && num != 4) {\n    num = sumDigitsSquared(num);\n  }\n  return num === 1;\n}\n\nfunction isHappycoin(num: u64): boolean {\n  return isHappy(num) && num % 10000 === 0;\n}\n\nexport function getHappycoins(num: u32): Array<u64> {\n  const result = new Array<u64>();\n  for (let i: u32 = 1; i < num; i++) {\n    const randomNum = random64();\n    if (isHappycoin(randomNum)) {\n      result.push(randomNum);\n    }\n  }\n  return result;\n}\n```", "```\nimport { WASI } from 'wasi'; ![1](Images/1.png)\nimport fs from 'fs/promises';\nimport loader from '@assemblyscript/loader';\nimport { Worker, isMainThread, parentPort } from 'worker_threads';\n\nconst THREAD_COUNT = 4;\n\nif (isMainThread) {\n  let inFlight = THREAD_COUNT;\n  let count = 0;\n  for (let i = 0; i < THREAD_COUNT; i++) {\n    const worker = new Worker(new URL(import.meta.url)); ![2](Images/2.png)\n    worker.on('message', msg => {\n      count += msg.length;\n      process.stdout.write(msg.join(' ') + ' ');\n      if (--inFlight === 0) {\n        process.stdout.write('\\ncount ' + count + '\\n');\n      }\n    });\n  }\n} else {\n  const wasi = new WASI();\n  const importObject = { wasi_snapshot_preview1: wasi.wasiImport };\n  const wasmFile = await fs.readFile('./happycoin.wasm');\n  const happycoinModule = await loader.instantiate(wasmFile, importObject);\n  wasi.start(happycoinModule);\n\n  const happycoinsWasmArray =\n    happycoinModule.exports.getHappycoins(10_000_000/THREAD_COUNT);\n  const happycoins = happycoinModule.exports.__getArray(happycoinsWasmArray);\n  parentPort.postMessage(happycoins);\n}\n```", "```\n$ npm run build\n$ npm start\n```", "```\n7641056713284760000 ... [ 134 more entries ] ... 10495060512882410000\ncount 136\n```"]