- en: Chapter 1\. Combining Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you work in Windows, macOS, and most other operating systems, you probably
    spend your time running applications like web browsers, word processors, spreadsheets,
    and games. A typical application is packed with features: everything that the
    designers thought their users would need. So, most applications are self-sufficient.
    They don’t rely on other apps. You might copy and paste between applications from
    time to time, but for the most part, they’re separate.'
  prefs: []
  type: TYPE_NORMAL
- en: The Linux command line is different. Instead of big applications with tons of
    features, Linux supplies thousands of small commands with very few features. The
    command `cat`, for example, prints files on the screen and that’s about it. `ls`
    lists the files in a directory, `mv` renames files, and so on. Each command has
    a simple, fairly well-defined purpose.
  prefs: []
  type: TYPE_NORMAL
- en: What if you need to do something more complicated? Don’t worry. Linux makes
    it easy to *combine commands* so their individual features work together to accomplish
    your goal. This way of working yields a very different mindset about computing.
    Instead of asking “Which app should I launch?” to achieve some result, the question
    becomes “Which commands should I combine?”
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to arrange and run commands in different combinations
    to do what you need. To keep things simple, I’ll introduce just six Linux commands
    and their most basic uses so you can focus on the more complex and interesting
    part—combining them—without a huge learning curve. It’s a bit like learning to
    cook with six ingredients, or learning carpentry with just a hammer and a saw.
    (I’ll add more commands to your Linux toolbox in [Chapter 5](ch05.xhtml#ch_toolbox).)
  prefs: []
  type: TYPE_NORMAL
- en: You’ll combine commands using *pipes*, a Linux feature that connects the output
    of one command to the input of another. As I introduce each command (`wc`, `head`,
    `cut`, `grep`, `sort`, and `uniq`), I’ll immediately demonstrate its use with
    pipes. Some examples will be practical for daily Linux use, while others are just
    toy examples to demonstrate an important feature.
  prefs: []
  type: TYPE_NORMAL
- en: Input, Output, and Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most Linux commands read input from the keyboard, write output to the screen,
    or both. Linux has fancy names for this reading and writing:'
  prefs: []
  type: TYPE_NORMAL
- en: stdin (pronounced “standard input” or “standard in”)
  prefs: []
  type: TYPE_NORMAL
- en: The stream of input that Linux reads from your keyboard. When you type any command
    at a prompt, you’re supplying data on stdin.
  prefs: []
  type: TYPE_NORMAL
- en: stdout (pronounced “standard output” or “standard out”)
  prefs: []
  type: TYPE_NORMAL
- en: The stream of output that Linux writes to your display. When you run the `ls`
    command to print filenames, the results appear on stdout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now comes the cool part. You can connect the stdout of one command to the stdin
    of another, so the first command feeds the second. Let’s begin with the familiar
    `ls -l` command to list a large directory, such as */bin*, in long format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This directory contains far more files than your display has lines, so the
    output quickly scrolls off-screen. It’s a shame that `ls` can’t print the information
    one screenful at a time, pausing until you press a key to continue. But wait:
    another Linux command has that feature. The `less` command displays a file one
    screenful at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can connect these two commands because `ls` writes to stdout and `less`
    can read from stdin. Use a pipe to send the output of `ls` to the input of `less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This combined command displays the directory’s contents one screenful at a time.
    The vertical bar (`|`) between the commands is the Linux pipe symbol.^([1](ch01.xhtml#idm46586656976720))
    It connects the first command’s stdout to the next command’s stdin. Any command
    line containing pipes is called a *pipeline*.
  prefs: []
  type: TYPE_NORMAL
- en: Commands generally are not aware that they’re part of a pipeline. `ls` believes
    it’s writing to the display, when in fact its output has been redirected to `less`.
    And `less` believes it’s reading from the keyboard when it’s actually reading
    the output of `ls`.
  prefs: []
  type: TYPE_NORMAL
- en: Six Commands to Get You Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pipes are an essential part of Linux expertise. Let’s dive into building your
    piping skills with a small set of Linux commands so no matter which ones you encounter
    later, you’re ready to combine them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The six commands—`wc`, `head`, `cut`, `grep`, `sort`, and `uniq`—have numerous
    options and modes of operation that I’ll largely skip for now to focus on pipes.
    To learn more about any command, run the `man` command to display full documentation.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To demonstrate our six commands in action, I’ll use a file named *animals.txt*
    that lists some O’Reilly book information, shown in [Example 1-1](#example_animals.txt).
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-1\. Inside the file *animals.txt*
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Each line contains four facts about an O’Reilly book, separated by a single
    tab character: the animal on the front cover, the book title, the year of publication,
    and the name of the first author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Command #1: wc'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `wc` command prints the number of lines, words, and characters in a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`wc` reports that the file *animals.txt* has 7 lines, 51 words, and 325 characters.
    If you count the characters by eye, including spaces and tabs, you’ll find only
    318 characters, but `wc` also includes the invisible newline character that ends
    each line.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The options `-l`, `-w`, and `-c` instruct `wc` to print only the number of
    lines, words, and characters, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Counting is such a useful, general-purpose task that the authors of `wc` designed
    the command to work with pipes. It reads from stdin if you omit the filename,
    and it writes to stdout. Let’s use `ls` to list the contents of the current directory
    and pipe them to `wc` to count lines. This pipeline answers the question, “How
    many files are visible in my current directory?”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The option `-1`, which tells `ls` to print its results in a single column, is
    not strictly necessary here. To learn why I used it, see the sidebar [“ls Changes
    Its Behavior When Redirected”](#ls_behavior).
  prefs: []
  type: TYPE_NORMAL
- en: '`wc` is the first command you’ve seen in this chapter, so you’re a bit limited
    in what you can do with pipes. Just for fun, pipe the output of `wc` to itself,
    demonstrating that the same command can appear more than once in a pipeline. This
    combined command reports that the number of words in the output of `wc` is four:
    three integers and a filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Why stop there? Add a third `wc` to the pipeline and count lines, words, and
    characters in the output “4”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The output indicates one line (containing the number 4), one word (the number
    4 itself), and two characters. Why two? Because the line “4” ends with an invisible
    newline character.
  prefs: []
  type: TYPE_NORMAL
- en: That’s enough silly pipelines with `wc`. As you gain more commands, the pipelines
    will become more practical.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command #2: head'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `head` command prints the first lines of a file. Print the first three
    lines of *animals.txt* with `head` using the option `-n`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you request more lines than the file contains, `head` prints the whole file
    (like `cat` does). If you omit the `-n` option, `head` defaults to 10 lines (`-n10`).
  prefs: []
  type: TYPE_NORMAL
- en: 'By itself, `head` is handy for peeking at the top of a file when you don’t
    care about the rest of the contents. It’s a speedy and efficient command, even
    for very large files, because it needn’t read the whole file. In addition, `head`
    writes to stdout, making it useful in pipelines. Count the number of words in
    the first three lines of *animals.txt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`head` can also read from stdin for more pipeline fun. A common use is to reduce
    the output from another command when you don’t care to see all of it, like a long
    directory listing. For example, list the first five filenames in the */bin* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Command #3: cut'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cut` command prints one or more columns from a file. For example, print
    all book titles from *animals.txt*, which appear in the second column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`cut` provides two ways to define what a “column” is. The first is to cut by
    field (`-f`), when the input consists of strings (fields) each separated by a
    single tab character. Conveniently, that is exactly the format of the file *animals.txt*.
    The preceding `cut` command prints the second field of each line, thanks to the
    option `-f2`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To shorten the output, pipe it to `head` to print only the first three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also cut multiple fields, either by separating their field numbers
    with commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'or by numeric range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way to define a “column” for `cut` is by character position, using
    the `-c` option. Print the first three characters from each line of the file,
    which you can specify either with commas (`1,2,3`) or as a range (`1-3`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you’ve seen the basic functionality, try something more practical
    with `cut` and pipes. Imagine that the *animals.txt* file is thousands of lines
    long, and you need to extract just the authors’ last names. First, isolate the
    fourth field, author name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then pipe the results to `cut` again, using the option `-d` (meaning “delimiter”)
    to change the separator character to a comma instead of a tab, to isolate the
    authors’ last names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save Time with Command History and Editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you retyping a lot of commands? Press the up arrow key instead, repeatedly,
    to scroll through commands you’ve run before. (This shell feature is called *command
    history*.) When you reach the desired command, press Enter to run it immediately,
    or edit it first using the left and right arrow keys to position the cursor and
    the Backspace key to delete. (This feature is *command-line editing*.)
  prefs: []
  type: TYPE_NORMAL
- en: I’ll discuss much more powerful features for command history and editing in
    [Chapter 3](ch03.xhtml#ch_history).
  prefs: []
  type: TYPE_NORMAL
- en: 'Command #4: grep'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`grep` is an extremely powerful command, but for now I’ll hide most of its
    capabilities and say it prints lines that match a given string. (More detail will
    come in [Chapter 5](ch05.xhtml#ch_toolbox).) For example, the following command
    displays lines from *animals.txt* that contain the string `Nutshell`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also print lines that *don’t* match a given string, with the `-v` option.
    Notice the lines containing “Nutshell” are absent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, `grep` is useful for finding text in a collection of files. The
    following command prints lines that contain the string `Perl` in files with names
    ending in *.txt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `grep` found three matching lines, one in *animals.txt* and two
    in *essay.txt*.
  prefs: []
  type: TYPE_NORMAL
- en: '`grep` reads stdin and writes stdout, making it great for pipelines. Suppose
    you want to know how many subdirectories are in the large directory */usr/lib*.
    There is no single Linux command to provide that answer, so construct a pipeline.
    Begin with the `ls -l` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that `ls -l` marks directories with a `d` at the beginning of the line.
    Use `cut` to isolate the first column, which may or may not be a `d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use `grep` to keep only the lines containing `d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, count lines with `wc`, and you have your answer, produced by a four-command
    pipeline—*/usr/lib* contains 145 subdirectories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Command #5: sort'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `sort` command reorders the lines of a file into ascending order (the default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'or descending order (with the `-r` option):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`sort` can order the lines alphabetically (the default) or numerically (with
    the `-n` option). I’ll demonstrate this with pipelines that cut the third field
    in *animals.txt*, the year of publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn the year of the most recent book in *animals.txt*, pipe the output
    of `sort` to the input of `head` and print just the first line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Maximum and Minimum Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`sort` and `head` are powerful partners when working with numeric data, one
    value per line. You can print the maximum value by piping the data to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'and print the minimum value with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As another example, let’s play with the file */etc/passwd*, which lists the
    users that can run processes on the system.^([4](ch01.xhtml#idm46586656804048))
    You’ll generate a list of all users in alphabetical order. Peeking at the first
    five lines, you see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Each line consists of strings separated by colons, and the first string is
    the username, so you can isolate the usernames with the `cut` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'and sort them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To produce the sorted list of all usernames, not just the first five, replace
    `head` with `cat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To detect if a given user has an account on your system, match their username
    with `grep`. Empty output means no account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `-w` option instructs `grep` to match full words only, not partial words,
    in case your system also has a username that contains “jones”, such as `sallyjones2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command #6: uniq'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `uniq` command detects repeated, adjacent lines in a file. By default,
    it removes the repeats. I’ll demonstrate this with a simple file containing capital
    letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `uniq` reduced the first three `A` lines to a single `A`, but it
    left the last `A` in place because it wasn’t *adjacent* to the first three.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also count occurrences with the `-c` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ll admit, when I first encountered the `uniq` command, I didn’t see much
    use in it, but it quickly became one of my favorites. Suppose you have a tab-separated
    file of students’ final grades for a university course, ranging from `A` (best)
    to `F` (worst):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You’d like to print the grade with the most occurrences. (If there’s a tie,
    print just one of the winners.) Begin by isolating the grades with `cut` and sorting
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use `uniq` to count adjacent lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then sort the lines in reverse order, numerically, to move the most frequently
    occurring grade to the top line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'and keep just the first line with `head`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, since you want just the letter grade, not the count, isolate the grade
    with `cut`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: and there’s your answer, thanks to a six-command pipeline—our longest yet. This
    sort of step-by-step pipeline construction is not just an educational exercise.
    It’s how Linux experts actually work. [Chapter 8](ch08.xhtml#ch_one_liner) is
    devoted to this technique.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Duplicate Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s combine what you’ve learned with a larger example. Suppose you’re in
    a directory full of JPEG files and you want to know if any are duplicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can answer this question with a pipeline. You’ll need another command,
    `md5sum`, which examines a file’s contents and computes a 32-character string
    called a *checksum*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'A given file’s checksum, for mathematical reasons, is very, very likely to
    be unique. If two files have the same checksum, therefore, they are almost certainly
    duplicates. Here, `md5sum` indicates the first and third files are duplicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Duplicate checksums are easy to detect by eye when there are only three files,
    but what if you have three thousand? It’s pipes to the rescue. Compute all the
    checksums, use `cut` to isolate the first 32 characters of each line, and sort
    the lines to make any duplicates adjacent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add `uniq` to count repeated lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are no duplicates, all of the counts produced by `uniq` will be 1\.
    Sort the results numerically from high to low, and any counts greater than 1 will
    appear at the top of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s remove the nonduplicates. Their checksums are preceded by six spaces,
    the number one, and a single space. We’ll use `grep -v` to remove these lines:^([5](ch01.xhtml#idm46586652426688))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you have your list of duplicate checksums, sorted by the number of
    occurrences, produced by a beautiful six-command pipeline. If it produces no output,
    there are no duplicate files.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command would be even more useful if it displayed the filenames of the
    duplicates, but that operation requires features we haven’t discussed yet. (You’ll
    learn them in [“Improving the duplicate file detector”](ch05.xhtml#sec_awk_arrays).)
    For now, identify the files having a given checksum by searching with `grep`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'and cleaning up the output with `cut`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve now seen the power of stdin, stdout, and pipes. They turn a small handful
    of commands into a collection of composable tools, proving that the whole is greater
    than the sum of the parts. *Any* command that reads stdin or writes stdout can
    participate in pipelines.^([6](ch01.xhtml#idm46586652416784)) As you learn more
    commands, you can apply the general concepts from this chapter to forge your own
    powerful combinations.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch01.xhtml#idm46586656976720-marker)) On US keyboards, the pipe symbol
    is on the same key as the backslash (`\`), usually located between the Enter and
    Backspace keys or between the left Shift key and Z.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch01.xhtml#idm46586652535568-marker)) The POSIX standard calls this form
    of command a *utility*.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch01.xhtml#idm46586655504608-marker)) Depending on your setup, `ls` may
    also use other formatting features, such as color, when printing to the screen
    but not when redirected.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch01.xhtml#idm46586656804048-marker)) Some Linux systems store the user
    information elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch01.xhtml#idm46586652426688-marker)) Technically, you don’t need the
    final `sort -nr` in this pipeline to isolate duplicates because `grep` removes
    all the nonduplicates.
  prefs: []
  type: TYPE_NORMAL
- en: ^([6](ch01.xhtml#idm46586652416784-marker)) Some commands do not use stdin/stdout
    and therefore cannot read from pipes or write to pipes. Examples are `mv` and
    `rm`. Pipelines may incorporate these commands in other ways, however; you’ll
    see examples in [Chapter 8](ch08.xhtml#ch_one_liner).
  prefs: []
  type: TYPE_NORMAL
