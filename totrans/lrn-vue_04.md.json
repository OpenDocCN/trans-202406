["```\nexport default {\n  name: 'ChildComponent',\n  props: {\n    name: String\n  }\n}\n```", "```\n<template>\n  <ChildComponent name=\"Red Sweater\" />\n</template>\n<script lang=\"ts\">\nimport ChildComponent from './ChildComponent.vue'\nexport default {\n  name: 'ParentComponent',\n  components: {\n    ChildComponent\n  },\n}\n</script>\n```", "```\n<template>\n  <ChildComponent :name=\"children[0]\" />\n</template>\n<script lang=\"ts\">\nimport ChildComponent from './ChildComponent.vue'\nexport default {\n  //...\n  data() {\n    return {\n      children: ['Red Sweater', 'Blue T-Shirt', 'Green Hat']\n    }\n  }\n}\n</script>\n```", "```\n/** components/ProductList.vue */\n<template>\n  <ProductComp :name=\"product.name\" :price=\"product.price\" />\n</template>\n<script lang=\"ts\">\nimport ProductComp from './ProductComp.vue'\nexport default {\n  name: 'ProductList',\n  components: {\n    ProductComp\n  },\n  data() {\n    return {\n      product: {\n        name: 'Red Sweater',\n        price: 19.99\n      }\n    }\n  }\n}\n</script>\n```", "```\n<template>\n  <div>\n    <p>Product: {{ name }}</p>\n    <p>Price: {{ price }}</p>\n  </div>\n</template>\n<script lang=\"ts\">\nexport default {\n  name: 'ProductComp',\n  props: {\n    name: String,\n    price: Number\n  }\n}\n</script>\n```", "```\nProduct: Red Sweater\nPrice: 19.99\n```", "```\n<template>\n  <ProductComp v-bind=\"product\" />\n</template>\n```", "```\n{\n  type: String | Number | Boolean | Array | Object | Date | Function | Symbol,\n  default?: any,\n  required?: boolean,\n  validator?: (value: any) => boolean\n}\n```", "```\nexport default {\n  name: 'ChildComponent',\n  props: {\n    name: {\n      type: String,\n      default: 'Child component'\n    }\n  }\n}\n```", "```\nexport default {\n  name: 'ChildComponent',\n  props: {\n    name: {\n      type: String,\n      required: true,\n      validator: value => value !== \"Child component\"\n    }\n  }\n}\n```", "```\n<template>\n  <header>Title: {{ pizza.title }}</header>\n  <div class=\"pizza--details-wrapper\">\n    <img :src=\"pizza.image\" :alt=\"pizza.title\" width=\"300\" />\n    <p>Description: {{ pizza.description }}</p>\n    <div class=\"pizza--inventory\">\n      <div class=\"pizza--inventory-stock\">Quantity: {{pizza.quantity}}</div>\n      <div class=\"pizza--inventory-price\">Price: {{pizza.price}}</div>\n    </div>\n  </div>\n</template>\n```", "```\nexport default {\n  name: 'PizzaComponent',\n  props: {\n    pizza: {\n      type: Object,\n      required: true\n    }\n  }\n}\n```", "```\n<template>\n  <div>\n    <h2>Bad usage of Pizza component</h2>\n    <pizza-component :pizza=\"{ name: 'Pinia', description: 'Hawaiian pizza' }\" />\n  </div>\n</template>\n```", "```\nclass Pizza {\n  title: string;\n  description: string;\n  image: string;\n  quantity: number;\n  price: number;\n\n  constructor(\n    title: string,\n    description: string,\n    image: string,\n    quantity: number,\n    price: number\n  ) {\n    this.title = title\n    this.description = description\n    this.image = image\n    this.quantity = quantity\n    this.price = price\n  }\n}\n\nexport default {\n  name: 'PizzaComponent',\n  props: {\n    pizza: {\n      type: Pizza, ![1](assets/1.png)\n      required: true\n    }\n  }\n}\n```", "```\ntype: Object as PropType<Your-Custom-Type>\n```", "```\nimport type { PropType } from 'vue'\n\ninterface Pizza {\n  title: string;\n  description: string;\n  image: string;\n  quantity: number;\n  price: number;\n}\n\nexport default {\n  name: 'PizzaComponent',\n  props: {\n    pizza: {\n      type: Object as PropType<Pizza>, ![1](assets/1.png)\n      required: true\n    }\n  }\n}\n```", "```\n<script setup>\nimport { defineProps } from 'vue'\n\nconst props = defineProps({\n  name: {\n    type: String,\n    default: \"Hello from the child component.\"\n  }\n})\n</script>\n```", "```\n<script setup >\nimport { defineProps } from 'vue'\n\ntype ChildProps = {\n  name?: string\n}\n\nconst props = defineProps<ChildProps>()\n</script>\n```", "```\nimport { defineProps, withDefaults } from 'vue'\n\ntype ChildProps = {\n  name?: string\n}\n\nconst props = withDefaults(defineProps<ChildProps>(), {\n  name: 'Hello from the child component.'\n})\n```", "```\n<template>\n  <ul style=\"list-style: none;\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <ToDoItem :task=\"task\" />\n    </li>\n  </ul>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport ToDoItem from './ToDoItem.vue'\nimport type { Task } from './ToDoItem'\n\nexport default defineComponent({\n  name: 'ToDoList',\n  components: {\n    ToDoItem\n  },\n  data() {\n    return {\n      tasks: [\n        { id: 1, title: 'Learn Vue', completed: false },\n        { id: 2, title: 'Learn TypeScript', completed: false },\n        { id: 3, title: 'Learn Vite', completed: false },\n      ] as Task[]\n    }\n  }\n})\n</script>\n```", "```\n<template>\n  <div>\n    <input\n      type=\"checkbox\"\n      :checked=\"task.completed\"\n    />\n    <span>{{ task.title }}</span>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, type PropType } from 'vue'\n\nexport interface Task {\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport default defineComponent({\n  name: 'ToDoItem',\n  props: {\n    task: {\n      type: Object as PropType<Task>,\n      required: true,\n    }\n  },\n})\n</script>\n```", "```\n/** ToDoItem.vue */\nexport default defineComponent({\n  //...\n  emits: ['task-completed-toggle']\n})\n```", "```\n/** ToDoItem.vue */\nexport default defineComponent({\n  //...\n  methods: {\n    onTaskCompleted(event: Event) {\n      this.$emit(\"task-completed-toggle\", {\n        ...this.task,\n        completed: (event.target as HTMLInputElement)?.checked,\n      });\n    },\n  }\n})\n```", "```\n<div>\n  <input\n    type=\"checkbox\"\n    :checked=\"task.completed\"\n    @change=\"onTaskCompleted\"\n  />\n  <span>{{ task.title }}</span>\n</div>\n```", "```\n<template>\n  <ul style=\"list-style: none;\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <ToDoItem\n        :task=\"task\"\n        @task-completed-toggle=\"onTaskCompleted\"\n      />\n    </li>\n  </ul>\n</template>\n```", "```\n//...\n\nexport default {\n  //...\n  methods: {\n    onTaskCompleted(payload: { id: number; completed: boolean }) {\n      const index = this.tasks.findIndex(t => t.id === payload.id)\n\n      if (index < 0) return\n\n      this.tasks[index].completed = payload.completed\n    }\n  }\n}\n```", "```\nconst emits = defineEmits(['component-event'])\n```", "```\nemits('component-event', [...arguments])\n```", "```\n<script lang=\"ts\" setup>\n//...\nconst props = defineProps({\n  task: {\n    type: Object as PropType<Task>,\n    required: true,\n  }\n});\n\nconst emits = defineEmits(['task-completed-toggle'])\n\nconst onTaskCompleted = (event: Event) => {\n  emits(\"task-completed-toggle\", {\n    id: props.task.id,\n    completed: (event.target as HTMLInputElement)?.checked,\n  });\n}\n</script>\n```", "```\n// Declare the emit type\ntype EmitEvents = {\n  (e: 'task-completed-toggle', task: Task): void;\n}\n\nconst emits = defineEmits<EmitEvents>()\n```", "```\n(e: 'component-event', [...arguments]): void\n```", "```\nexport default {\n  name: 'ProductList',\n  //...\n  provide: {\n    selectedIds: [1]\n  },\n}\n```", "```\nexport default {\n//...\n  provide() {\n    return {\n      selectedIds: [1]\n    }\n  },\n//...\n}\n</script>\n```", "```\n{\n  from?: string;\n  default: any\n}\n```", "```\n<script lang='ts'>\nexport default {\n  //...\n  inject: {\n    currentSelectedIds: {\n      from: 'selectedIds',\n      default: []\n    },\n  },\n}\n</script>\n```", "```\n<template>\n  <div>\n    This is a house\n  </div>\n  <Teleport to=\"#sky\">\n    <div>Sky and clouds</div>\n  </Teleport>\n</template>\n```", "```\n<template>\n  <section id=\"sky\" />\n  <section class=\"wrapper\">\n      <House />\n  </section>\n</template>\n```", "```\n<template>\n  <dialog :open=\"open\">\n    <header>\n      <slot name=\"m-header\"> ![1](assets/1.png)\n        <h2>{{ title }}</h2>\n        <button>X</button>\n      </slot>\n    </header>\n    <main>\n      <slot name=\"m-main\" /> ![2](assets/2.png)\n    </main>\n    <footer>\n      <slot name=\"m-footer\"> ![3](assets/3.png)\n        <button>Close</button>\n      </slot>\n    </footer>\n  </dialog>\n</template>\n```", "```\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Modal',\n  props: {\n    open: {\n      type: Boolean,\n      default: false,\n    },\n    title: {\n      type: String,\n      default: 'Dialog',\n    },\n  },\n})\n</script>\n```", "```\n<script lang=\"ts\">\n/** Modal.vue */\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Modal',\n  //...\n  emits: [\"closeDialog\"], ![1](assets/1.png)\n  methods: {\n    close() { ![2](assets/2.png)\n      this.$emit(\"closeDialog\", false);\n    },\n  },\n})\n</script>\n```", "```\n<template>\n  <dialog :open=\"open\" >\n    <header>\n      <slot name=\"m-header\" >\n        <h2>{{ title }}</h2>\n        <button @click=\"close\" >X</button> ![1](assets/1.png)\n      </slot>\n    </header>\n    <main>\n      <slot name=\"m-main\" />\n    </main>\n    <footer>\n      <slot name=\"m-footer\" >\n        <button @click=\"close\" >Close</button> ![2](assets/2.png)\n      </slot>\n    </footer>\n  </dialog>\n</template>\n```", "```\n<template>\n  <teleport ![1](assets/1.png)\n    to=\"#modal\" ![2](assets/2.png)\n    :disabled=\"!open\" ![3](assets/3.png)\n  >\n    <dialog ref=\"dialog\" :open=\"open\" >\n      <header>\n      <slot name=\"m-header\">\n        <h2>{{ title }}</h2>\n        <button @click=\"close\" >X</button>\n      </slot>\n      </header>\n      <main>\n        <slot name=\"m-main\" />\n      </main>\n      <footer>\n        <slot name=\"m-footer\">\n          <button @click=\"close\" >Close</button>\n        </slot>\n      </footer>\n    </dialog>\n  </teleport>\n</template>\n```", "```\n<template>\n  <h2>With Modal component</h2>\n  <button @click=\"openModal = true\">Open modal</button>\n  <Modal :open=\"openModal\" title=\"Hello World\" @closeDialog=\"toggleModal\"/>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport Modal from \"./Modal.vue\";\n\nexport default defineComponent({\n  name: \"WithModalComponent\",\n  components: {\n    Modal,\n  },\n  data() {\n    return {\n      openModal: false,\n    };\n  },\n  methods: {\n    toggleModal(newValue: boolean) {\n      this.openModal = newValue;\n    },\n  },\n});\n</script>\n```", "```\n<body>\n  <div id=\"app\"></div>\n  <div id=\"modal\"></div> ![1](assets/1.png)\n  <script type=\"module\" src=\"/src/main.ts\"></script>\n</body>\n```", "```\n<style scoped>\n  dialog::backdrop {\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n</style>\n```", "```\n    <dialog :open=\"open\" ref=\"dialog\">\n      <!--...-->\n    </dialog>\n    ```", "```\n    watch: {\n      open(newValue) {\n        const element = this.$refs.dialog as HTMLDialogElement;\n        if (newValue) {\n          element.showModal();\n        } else {\n          element.close();\n        }\n      },\n    },\n    ```", "```\n    <dialog ref=\"dialog\">\n      <!--...-->\n    </dialog>\n    ```", "```\n    <teleport to=\"#modal\">\n      <!--...-->\n    </teleport>\n    ```", "```\ndialog {\n  position: fixed;\n  z-index: 999;\n  inset-block-start: 30%;\n  inset-inline-start: 50%;\n  width: 300px;\n  margin-inline-start: -150px;\n}\n```", "```\n<template>\n  <section class=\"wrapper\">\n    <WithModalComponent />\n  </section>\n  <div id=\"modal\"></div>\n</template>\n```", "```\n<template>\n  <div id=\"modal\"></div>\n  <section class=\"wrapper\">\n    <WithModalComponent />\n  </section>\n</template>\n```"]