- en: Chapter 8\. Concurrency (Multi-Threading)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Concurrency, also sometimes known as parallelism or multi-threading, is the
    concept of performing multiple tasks at the same time, dividing the computer’s
    resources into distinct entities that very quickly alternate between each other
    until any entity has its entire workload completed, at which time it’s removed
    from this procedure. The act of computation jumping between different processes
    (small-p) is known as “context switching,” which has a more common, and very different,
    definition in computer science (switching your brain’s resources from one domain
    to another).
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform a task in a background thread.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Act on the results of work performed in the background thread on the main thread.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Java, a processing context is known as a `Thread`. A `Thread` is an object
    instance and is created exactly as you’d expect:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Thread` is passed in a `Runnable` instance. Once a thread is started (by
    calling the `start` method), the thread invokes the `run` method of that `Runnable`.
    As soon as that method is complete (by returning or throwing), the thread terminates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android, there is a single `Thread` instance that all work is performed
    on by default, including and especially UI work. That is important—in fact, the
    concept is sometimes called the “UI thread,” but is more commonly known as the
    “main” thread. Since the first release of Android to the time of this writing,
    the main thread has drawn pixels on the screen 60 times per second—that’s about
    once every 16 milliseconds and is known as a “frame.” This is an extremely resource-intensive
    process, and it’s absolutely critical that we allow the system to have unfettered
    access to as much power as possible to do this work. For this reason, extremely
    computationally expensive tasks should be done “off” the main thread (meaning
    on any other thread; a thread like this—one that is *not* responsible for UI,
    or the original thread the program runs on—is sometimes known as a “background
    thread”). Any I/O work, like filesystem access, or database transactions, should
    be done in a background thread, and long-lasting operations like network requests
    should definitely be done off the main thread as well. In fact, you may see errors
    or warnings when you do something obvious like make a network request on the main
    thread. Further, when the main thread is doing too much work, you’ll see “jank”
    in the UI. For example, a `RecyclerView` might scroll unevenly, or the screen
    might freeze for some time. Android Studio is kind enough to alert us in logcat;
    you’ll often see messages like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'I/Choreographer(1234): Skipped 20 frames! The application may be doing too
    much work on its main thread.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That means that the system tried *twenty times* to draw your UI but was unable
    to do so because it was deprived of the resources necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Perform a Task in a Background Thread
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So how do we do work off the main thread? It’s pretty simple, actually. As
    we’ve described, create a new `Thread` instance, do some work in the `run` method
    of the `Runnable` instance passed to the constructor, and fire it off by calling
    `start`:'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! There also exist a number of classes that help manage `Threads`,
    including `ThreadPoolExecutor` and the `Executors` static helper functions (which
    generally return preconfigured instances of `ThreadPoolExecutor`). The benefit
    of a thread pool is that you control exactly how much work is happening in the
    background at any time, and you can queue and remove tasks as they are requested
    and completed. Check the developer docs for [ThreadPoolExecutor](https://oreil.ly/9pV5G)
    and [Executors](https://oreil.ly/WKIRY).
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard that concurrency is one of the hardest things to master in
    computer science, and we won’t pretend that there aren’t some extremely sophisticated
    concepts in play, but most of these are under the covers, provided by the system,
    or easily avoidable. Mike has been known to say that “threading is easy; synchronization
    is hard.” That’s to say that, as we can see, it’s simple enough to fire off some
    work in a background thread, but there are about 3,500 asterisks attached to that
    statement (excuse the hyperbole). For example, in the Android framework, you can’t
    access any `View` instance whatsoever, except on the main thread. That’s kind
    of a big deal! In the `Runnable.run` method passed in the preceding example, you
    couldn’t even *reference* a `View` instance without a `RuntimeException`. Further,
    you have no guarantee in what order multiple background threads will resolve;
    this is where we start to get into the weeds of concurrency—the byte code your
    Java generates doesn’t always look exactly like the Java you write.
  prefs: []
  type: TYPE_NORMAL
- en: 'The classic example of an “unsafe” thread would be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on your hardware and environment, the exact number of concurrent
    tasks may need to be higher (or lower) to see the effect, but play around with
    that basic task, and sooner or later you’ll see a final log that is *not* 9,999\.
    Without spending a ton of time on the nuances of thread safety, we know that the
    bytecode for the increment operator probably looks something like this when converted
    to byte code:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the value of `mCounter` from memory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add 1 to the value of `mCounter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the value of `mCounter` back to memory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since concurrent threads switch between each other rapidly to simulate simultaneous
    operations (this is known as “context switching”), thread #391 might read the
    value right between steps 1 and 2 occurring in thread #390\. This specific example
    is called a race condition, and this problem generally is known as thread interference,
    or thread interleaving, and is one example of a *lack* of *thread safety*. This
    is far from a complete examination of the perils of concurrent programming—some
    implementations of Java allow individual threads to make copies of variables to
    avoid expensive IPC (interprocess communication) calls, so when multiple threads
    mutate a single object instance, state cannot be guaranteed.'
  prefs: []
  type: TYPE_NORMAL
- en: There are mechanisms to avoid this, like the `synchronized` and `volatile` keywords,
    and the `Atomic` classes, and since data structures are especially vulnerable
    (imagine one thread looping through a data structure while another adds or removes
    items to it), there are a number of thread-safe (but less performant) versions
    of several data structures or helper methods to mitigate the threat.
  prefs: []
  type: TYPE_NORMAL
- en: That said, this is all well beyond the scope of this chapter. It can takes years
    to master multi-threaded programming in even a single technology stack, and some
    developers never truly understand what’s happening under the hood—and in many
    cases, this is perfectly appropriate! A terrific UI programmer might use concurrent
    programming very differently than a programmer who works with big data. One simple
    trick in the Android framework is to do your computation on a background thread,
    then either `Activity.runOnUiThread`, `View.post`, or `Handler.post` those results
    back to the main thread, where you’re guaranteed serial execution and immune to
    competition from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: Act on the Results of Work Performed in the Background Thread on the Main Thread
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As just mentioned, whenever you’re updating your UI as the result of some background
    thread operation (which is a very common occurrence—you may want to get data from
    a local database, a remote server, the filesystem, etc.), you’ll need to return
    to the main/UI thread before referencing any `View` instances. Even beyond `View`
    classes, it can be helpful to update common objects on a single thread (the main
    thread) to avoid the synchronization issues described earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three primary ways to send a message from a background thread to
    the main thread:'
  prefs: []
  type: TYPE_NORMAL
- en: The `View.post` method will accept a `Runnable` instance and call that instance’s
    `run` method on the main thread.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Activity.runOnUiThread` functions almost identically to `View.post` but
    does make a check first to see if the invocation is already happening on the main
    thread—if it is, the `run` method will be called immediately, rather than posted
    to the end of a message queue (see the following code).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Handler` instance will `post` messages to the `Looper` it is associated with,
    so a `Handler` created with `new Handler(Looper.getMainLooper())` will post messages
    on the main thread. Again, this method accepts a `Runnable` instance and will
    call that instance’s `run` method. Note that both of the preceding operations
    actually end up here, unless `Activity.runOnUiThread` is called from the UI thread
    directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: Terminating a Thread
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Again, this is a topic with some controversy and perhaps a lack of consensus.
    Normally, a thread will terminate when it has completed its work—when the `run`
    method of the `Runnable` would normally return. However, it’s often desirable
    to stop a background thread prematurely. For example, if a user started downloading
    a large video clip, which could be several hundred megabytes, they might decide
    after a few minutes that it’s not worth the bandwidth or space and terminate the
    download.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were doing this same process in your own thread and used some third-party
    downloader library, which had an atomic `download` method, it’d be impossible
    to break out:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a deprecated `Thread` method, `stop`, but its use is discouraged and
    it may be removed from the standard library in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `join` method is often tempting to those learning the `Thread` API, but
    it’s commonly misunderstood. The Java 8 docs at the time of this writing explain
    the `join` method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: This implementation uses a loop of this.wait calls conditioned on this.isAlive.
    As a thread terminates the this.notifyAll method is invoked. It is recommended
    that applications not use wait, notify, or notifyAll on Thread instances.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This may *seem* like the thread functionally terminates, especially when working
    with a “main” or UI thread, but in reality it’s still in memory, and continues
    to maintain all references as reachable, until the thread that invoked the method
    itself terminates. So, in the case of Android that does use a UI thread, which
    serves as the default context, if you start a “background” thread and call `join`
    on it, it’ll exist but just spin until the main thread terminates (typically the
    end of the application or resource reclamation). Since this often involves the
    entire process collapsing, you may not even notice the background thread, but
    know that it *is* still there, holding on to references (memory leaks) and spinning
    until the program itself exits.
  prefs: []
  type: TYPE_NORMAL
- en: There is another very misunderstood method on the `Thread` class called `interrupt`,
    but this does not do what most people think it does. It simply sets a boolean
    flag on the thread; prior to calling `interrupt`, calls to `isInterrupted` will
    return `false`. Subsequent to calling `interrupt`, calls will return `true`. *By
    itself, `interrupt` does nothing to stop the `Thread`’s operation*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This API was created almost as a convention; library writers should periodically
    check `isInterrupted` and either `throw` an `Exception` or return out immediately
    when it’s true, *but this is in no way guaranteed*. We can *hope* the authors
    of the `Downloader` library did this, and did this in a fashion that makes sense,
    but we can’t be sure of it, which may mean you need to handle delicate tasks like
    this yourself. Again using download as an example, you may want to check `isInterrupted`
    in each iteration of the `InputStream.read`/`OutputStream.write` loop. For example,
    let’s refer to the simple download method in [Networking](ch09.html#topics_networking)
    and modify it to be cancellable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `try/catch` block that performs the `downloadBinaryData` operation,
    you’d probably want to delete the partially written file and possibly update the
    UI to hide progress or show the status to the user. You’d probably also want a
    `cancel` method that’d call `Thread.interrupt()` on the background thread. Something
    like this (modified to be Android-ready and dressed up a bit) might do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: The [RxJava](https://oreil.ly/HyJnl) library provides a robust set of APIs for
    dealing with concurrent work, with layers of abstraction to separate your development
    code from the perils of low-level thread unsafety. This can be a nice tool to
    get your team up to speed quickly, and share a common codebase, and is a great
    fit for many people. That said, as with most abstractions, you’ll find the finest-grained
    control with standard library classes, like `Thread`.
  prefs: []
  type: TYPE_NORMAL
- en: The `AsyncTask` class in the Android framework provides a way to do background
    work and post results back to the main thread. However, be aware that there are
    valid criticisms of the class. For one, the earliest versions used multiple threads
    from a `ThreadPoolExecutor` but was later changed to use a single thread, which
    again was reversed in a later version. Similarly, there’s no way to break out
    of an `AsyncTask`s worker method if the task needs to be cancelled. There seems
    to be a community consensus that `AsyncTask` does not provide enough value to
    justify the drawbacks—the authors believe that in almost all cases, the simple
    `Thread` and `post` back pattern described previously is more simple, reliable,
    and controllable.
  prefs: []
  type: TYPE_NORMAL
- en: Also, many of the higher-level topics touched on in this chapter are covered
    in great detail in *Efficient Android Threading* by Anders Göransson (O’Reilly).
    And of course, Joshua Bloch’s *Efficient Java* (O’Reilly) can be helpful to programmers
    across a wide range of expertise.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Concurrency in iOS can best be described as being fundamentally rooted in the
    classical antiquity of C, while being modernized through the clever mechanics
    of Grand Central Dispatch. There are primarily three options available to get
    work done in the background that a developer is likely to see within an application:
    `DispatchQueue`s, `Operation`s, and `Thread`s.'
  prefs: []
  type: TYPE_NORMAL
- en: There are times to use both, but for the purposes of this chapter, we’ll focus
    on Grand Central Dispatch and `DispatchQueue`s; they are arguably used the most
    despite being slightly lower level in iOS. This is due to their simplicity and
    ease of creation.
  prefs: []
  type: TYPE_NORMAL
- en: Perform a Task in a Background Thread
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So how do you perform work in the background on iOS? Here’s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first line accesses a global background work queue that’s part of Grand
    Central Dispatch, or “GCD.” We take this global queue and call `async` on a closure
    that’s passed in. The second line is the body of that closure, which just `print`s
    a line of text in our simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two options for completing operations in GCD: asynchronous and synchronous.
    Synchronous calls can be made by using the `sync()` method instead of `async()`;
    they are guaranteed to be called in the order they are made. Asynchronous calls
    will be executed some time in the future, with little to no visibility into when.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Honestly, the preceding code is sufficient for most calls, but often it’s necessary
    to have a little bit more control on the priority of a particular background operation
    that needs to be completed. This is possible with code that might look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A new argument is passed into the `global()` method from before named `qos`.
    This parameter is an enum that maps to a set priority of execution within iOS.
    The different options available are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`userInteractive`'
  prefs: []
  type: TYPE_NORMAL
- en: Highest priority and used for operations that are interactive with the user.
    Operations that are slow running here make the user interface appear frozen.
  prefs: []
  type: TYPE_NORMAL
- en: '`userInitiated`'
  prefs: []
  type: TYPE_NORMAL
- en: Slightly lower priority, and more commonly used for background work than `userInteractive`.
    Officially, this is an operation the user has started, and it needs results quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '`default`'
  prefs: []
  type: TYPE_NORMAL
- en: The default level at which work without a quality of service (QoS) is performed.
    It’s not meant to be specified by developers directly.
  prefs: []
  type: TYPE_NORMAL
- en: '`utility`'
  prefs: []
  type: TYPE_NORMAL
- en: Lower priority than `default` and meant to be used for utility-type operations,
    such as downloading a book or video, within an application that are still user-facing.
  prefs: []
  type: TYPE_NORMAL
- en: '`background`'
  prefs: []
  type: TYPE_NORMAL
- en: Lowest priority of operation. This work isn’t visible to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '`unspecified`'
  prefs: []
  type: TYPE_NORMAL
- en: The system is intended to infer what the QoS should be. More than likely, you
    shouldn’t use this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These levels of quality also map to levels of performance and energy efficiency.
    Work performed at the `userInteractive` level is more performant but less energy
    efficient. Work done at the `background` service level is not as performant, but
    it is more energy efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In our preceding example, we’ve passed in `userInitiated`, indicating that the
    operation should be performed outside of the main thread in the global queue with
    a fairly high priority.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quality of service rules are one of the only ways to customize the global dispatch
    queues available. However, there is another level of customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we start by creating our own `DispatchQueue` instance. Every
    dispatch queue needs a unique label. Apple recommends reverse DNS-style labels
    as the default, but as long as the label provided is unique, that is sufficient.
    For our example, we’ve passed in a `qos` value of `background`, which means operations
    in this queue will run at the lowest priority.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we’ve passed in the `.concurrent` option inside the `attributes`
    parameter. Doing this means each operation—or closure in this instance—we pass
    into the queue will run concurrent of the other operations. The default for the
    global dispatch queue is `.concurrent`. The opposite is true for custom dispatch
    queues—they do not run concurrently by default.
  prefs: []
  type: TYPE_NORMAL
- en: We’re storing this new dispatch queue in the `queue` variable. The next line
    takes that `queue` object and calls the same `async(_:)` as our previous examples
    to execute a bit of code.
  prefs: []
  type: TYPE_NORMAL
- en: Act on the Results of Work Performed in the Background Thread on the Main Thread
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we’ve shown how to perform an operation on a background thread. But sometimes
    you need to get back to the main thread to do some important work. You’ll often
    see this on iOS whenever the UI needs updating because all UI work happens on
    the main thread within iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s simple enough to head back over to the main thread on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the `main` property on `DispatchQueue`. This is a shared queue that
    all the UI objects operate on within the run loop. Any updates to the UI require
    a call like this. As an example, after making a network call using `URLSessionDataTask`,
    it might be necessary to provide some updated information to the UI. The following
    code accomplishes this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Without too much explanation about how `URLSession` works in iOS (see [Chapter 9](ch09.html#topics_networking)),
    notice the `DispatchQueue.main.async(_:)` call within the body of the completion
    handler passed to the request operation. This could be used to update text in
    a label, change the UI, or just jump to the main thread for simple data synchronization.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Cancelling a GCD operation is not for the faint of heart. It’s generally recommended
    that if you need cancellable operations, switch to `Operation` objects with `OperationQueue`s.
    This is beyond the scope of this chapter, however. Feel free to check out Apple’s
    developer documentation on `Operation` and `OperationQueue`.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Concurrent operations can get remarkably complex beyond the confines of a simple
    line or two of example code. There are classes of bugs that exist solely because
    of concurrent programming.
  prefs: []
  type: TYPE_NORMAL
- en: Android has a few methods by which to run concurrent operation, but `Thread`
    is one of the most widely used and standard approaches to exercising control over
    the operations being run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GCD offers a convenient scheduling library through which iOS (and macOS) applications
    can leverage concurrent programming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s important to make sure the main thread is not blocked on Android and iOS.
    Doing so will cause the UI to stutter or appear locked up to the user, which results
    in a negative experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve also seen that there are some places in code where background threads
    are inherently useful—like networking code. Now that we’ve learned how to kick
    off operations in the background of our apps, let’s learn a little bit more about
    networking within Android and iOS in the next chapter.
  prefs: []
  type: TYPE_NORMAL
