- en: Chapter 12\. Consuming Falco Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you’ve learned how to run and configure Falco. You understand
    how Falco can be used for runtime and cloud security and how it can detect a vast
    spectrum of threats. Now, it’s time to focus on what you can do with Falco’s detections.
    Consuming Falco’s output is the final piece of the puzzle and the subject of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Alerts generated by Falco are helpful for observing and securing your production
    system, and we will give you some advice on how to use those alerts proficiently.
    The first part of the chapter is about tools that help you consume Falco’s outputs
    effectively. We will teach you how to get notified immediately when Falco detects
    a security threat, so your security team can react as soon as possible and take
    appropriate countermeasures. Finally, we’ll show you a mechanism for automatically
    responding to threats to speed up response times.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Falco Outputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A minimal Falco installation outputs a simple textual log that you can store
    for later consultation, but this is not very useful. Fortunately, more intelligent
    tools allow you to work with Falco’s outputs and expand its possibilities, and
    these are an important part of integrating Falco into your ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will talk in detail about two tools that we have already mentioned
    in the book. The first, falco-exporter, is a tool designed to do one thing and
    do it well: produce metrics from Falco’s detected events. The second, Falcosidekick,
    is the Swiss Army knife of Falco outputs. It lets you aggregate data from multiple
    Falco sensors, filter the notifications, and forward them to any other application
    or platform in your environment.'
  prefs: []
  type: TYPE_NORMAL
- en: falco-exporter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [falco-exporter project](https://oreil.ly/0j6EJ) provides a Prometheus metrics
    exporter for Falco output events. It consumes Falco outputs via a streamed gRPC
    API and exposes a metrics endpoint. The metrics include information on the number
    of triggered rules and detailed information on the priority and tags associated
    with the rules, as well as labels to identify each event’s origin, such as the
    hostname, namespace, and pod’s name. It also provides a preconfigured Grafana
    dashboard.^([1](ch12.xhtml#ch01fn16)) falco-exporter is useful for when you only
    need metrics about security events. (By contrast, Falcosidekick can also export
    metrics, but it comes with many other functionalities and outputs.)
  prefs: []
  type: TYPE_NORMAL
- en: Before installing falco-exporter, ensure that Falco is installed and configured
    with the gRCP server and gRPC output enabled over a Unix socket (see [“gRPC Output”](ch08.xhtml#grpc_output)
    for a refresher).
  prefs: []
  type: TYPE_NORMAL
- en: Host installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install falco-exporter directly on the host, you have to download the latest
    version from the [releases page](https://oreil.ly/rfK8e), decompress the archive,
    and copy the executable file *falco-exporter* to your preferred location (e.g.,
    */usr/bin*). Whether you execute it manually or run it as a service is entirely
    up to you. The default options work out of the box with the gRPC Unix socket in
    */var/run/falco.sock* (the default option for Falco). If you need to customize
    its options, run `falco-exporter --help` for assistance.
  prefs: []
  type: TYPE_NORMAL
- en: Running in a container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run falco-exporter in a container using Docker, use these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `docker run` command assumes that Falco is installed on the host and Falco’s
    gRPC Unix socket is present in */var/run/falco.sock*.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can deploy falco-exporter to a Kubernetes cluster using either Helm or
    manifest files (see [Chapter 9](ch09.xhtml#installing_falco) for details on the
    two installation methods), but we recommend Helm. You first need to add the Falcosecurity
    charts repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to install the chart, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For detailed instructions, see the [falco-exporter chart documentation](https://oreil.ly/qkH5G).
    If you want to use manifest files instead, follow the steps in the [falco-exporter
    documentation](https://oreil.ly/lktaK).
  prefs: []
  type: TYPE_NORMAL
- en: Falcosidekick
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [Falcosidekick project](https://oreil.ly/MVyRi) provides a complete solution
    for connecting Falco to your ecosystem. It works on top of Falco’s output and
    allows you to forward its notifications to many other destinations (see [Figure 12-1](#the_falcosidekick_logo_left_parenthesis)).
    Falcosidekick can add custom fields to the notifications or filter events by priority
    (on a per-destination basis). In particular, supported outputs include platforms
    and applications for:'
  prefs: []
  type: TYPE_NORMAL
- en: Communication and collaboration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics and observability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alerting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging and storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function as a Service (FaaS) and serverless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message queues and streaming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/pcns_1201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. The Falcosidekick logo (left) and some of its supported notification
    destinations (right)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Falcosidekick also allows you to use a side project, [falcosidekick-ui](https://oreil.ly/o1pcB),
    to visualize Falco events in a pleasant web UI (shown in [Figure 12-2](#the_falcosidekick_web_ui)).
    The web UI displays statistics about detected events and shows values in aggregate
    form and on a timeline. You can also filter for the events you are interested
    in and get all the event details quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pcns_1202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. The Falcosidekick web UI
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Using Falcosidekick requires a small change in Falco’s configuration: before
    using it, enable JSON formatting and configure the HTTP output to send events
    to the Falcosidekick endpoint (it listens at port 2801 by default). See [Chapter 8](ch08.xhtml#the_output_framework)
    for Falco output configuration instructions and the Falcosidekick online documentation
    for specific details.'
  prefs: []
  type: TYPE_NORMAL
- en: Host installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Falcosidekick directly on the host, download the latest version
    from the [releases page](https://oreil.ly/ToAMj), decompress the archive, and
    copy the executable file *falcosidekick* to your preferred location (e.g., */usr/bin*).
    Whether to execute it manually or run it as a service is entirely up to you. You
    also need to create a YAML configuration file and pass its path as an argument.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The Falcosidekick repository includes an example configuration file that you
    can start with. Falcosidekick also supports environment variables that you can
    use as an alternative or to override the configuration file values.
  prefs: []
  type: TYPE_NORMAL
- en: Running in a container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run Falcosidekick in a container using Docker, use these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `docker run` command assumes that Falco is installed on the host and that
    the HTTP output is configured to send events to port 2801\. Using Docker’s `-e`
    option, you can use environment variables to pass configurations. Alternatively,
    use Docker’s `-v` option to give it a YAML configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with falco-exporter, you can deploy Falcosidekick to a Kubernetes cluster
    using either Helm or manifest files. We recommend the Helm installation option,
    which comes in two variants. Before we explore them, if you haven’t already added
    the Falcosecurity charts repository to Helm, do it by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you’re ready to deploy to your Kubernetes cluster. The first and more ordinary
    way to do this is when you already have Falco deployed and configured to send
    events to Falcosidekick and you just need to install the Falcosidekick chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The other variant allows you to deploy Falco and Falcosidekick in a single
    Helm installation that will automatically configure both charts to work together.
    It’s usually the most convenient solution. To do this, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Optionally, if you want to deploy the Falcosidekick web UI as well, add `--set
    webui.enabled=true` to the install command (regardless of which variant you choose).
  prefs: []
  type: TYPE_NORMAL
- en: You can find details on additional options in the [Falcosidekick chart documentation](https://oreil.ly/QaipZ).
    If you want to use manifest files instead, use the provided [online examples](https://oreil.ly/fziYL).^([2](ch12.xhtml#ch01fn17))
  prefs: []
  type: TYPE_NORMAL
- en: Observability and Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Falco allows you to observe and analyze the security of your cloud-native environment.
    If you plan to leverage Falco’s detections for auditing or forensic purposes,
    you’ll usually want to store as much information as possible and make Falco’s
    results easily accessible and searchable. The tools described in this chapter
    offer you plenty of support.
  prefs: []
  type: TYPE_NORMAL
- en: Storing Falco events is like ingesting any other application logs. This means
    you can reuse your existing logging backend for Falco. Also, Falcosidekick can
    easily send Falco events to systems that allow you to store and analyze vast volumes
    of log data, like Elasticsearch and Splunk. Since you will likely use this approach
    for later analysis, we suggest keeping all events that Falco emits with no filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll probably also want to collect metrics, as this can help you detect errors
    and anomalies in your application. For instance, a metric reporting that a Falco
    rule regularly triggers on a particular machine may be a symptom of a security
    problem, a misconfiguration, or an implementation bug in your running application.
    A reliable tool for this purpose is falco-exporter: it exposes metrics, connects
    Falco to Prometheus, and also offers a ready-to-use Grafana dashboard ([Figure 12-3](#the_preconfigured_grafana_dashboard_for)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pcns_1203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-3\. The preconfigured Grafana dashboard for Falco events metrics provided
    by falco-exporter
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Getting Notified
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although storing and aggregating Falco events is fine for observability, it’s
    not helpful when you need to react promptly to a security event. You likely want
    to receive important notifications immediately and in the right place so that
    you or your team can take countermeasures or start investigating right away.
  prefs: []
  type: TYPE_NORMAL
- en: 'Falco’s built-in output channels do not provide a specific mechanism for immediate
    notifications, but Falcosidekick allows you to forward only important notifications.
    For example, let’s say you want to get notifications whenever an event triggers
    the *Sudo Potential Privilege Escalation* rule (which comes with `priority: CRITICAL`),
    but not for other, noisier rules with lower priority levels. Falcosidekick allows
    you to configure a minimum priority level at which you want to send events to
    a specific destination, and to adjust this configuration for each destination.
    It supports most on-call systems, like PagerDuty, Opsgenie, and Prometheus Alertmanager
    and can send notifications to most common communication platforms, including Slack,
    Mattermost, Rocket.Chat, Microsoft Teams, and Discord.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use Falcosidekick configurations to integrate Falco alerts into your
    existing environment easily. And because Falcosidekick allows you to forward Falco
    notifications to multiple destinations simultaneously, you can, for example, send
    the alerts to both PagerDuty and a Slack channel.
  prefs: []
  type: TYPE_NORMAL
- en: Responding to Threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another meaningful—and more sophisticated—way of consuming Falco events is to
    create systems that automatically take action in response to threats or security
    incidents. Implementing custom actions in response to threats is easier than you
    might think.
  prefs: []
  type: TYPE_NORMAL
- en: Although The Falco Project does not provide a specific tool for this purpose,
    a few emerging projects in the community are implementing this concept. Such systems
    are sometimes called *response engines* and usually specialize in managing threats
    in Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: A response engine provides a straightforward mechanism to perform a predefined
    task when a Falco rule condition is violated. You can create a simple implementation
    using Falcosidekick to forward Falco notifications to a FaaS platform or serverless
    solution that, in turn, performs the required action. For example, you can automatically
    terminate a Kubernetes Pod whenever a Falco rule determines that the Pod is compromised,
    by implementing a cloud function that uses the Kubernetes API to delete the compromised
    Pod. [Figure 12-4](#example_of_a_functional_scheme_for_a_re) illustrates this
    approach and shows some cloud function providers supported by Falcosidekick.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pcns_1204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-4\. Example of a functional scheme for a response engine for Kubernetes
    that uses Falcosidekick outputs to perform actions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You might want to be notified regardless of the rule’s priority level, but you
    will probably only want to perform actions for specific rules. For example, you
    might want only rules with a `CRITICAL` priority level to terminate Pods. Falcosidekick
    helps with this because it allows you to filter notifications based on their priority
    value, so you can control the information each destination receives.
  prefs: []
  type: TYPE_NORMAL
- en: We advise you to analyze your needs and design your response engine to meet
    them. Falco and tools like Falcosidekick will provide everything you need to support
    your solution.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter concludes [Part III](part03.xhtml#iii_running_falco_in_production).
    You’ve learned all the fundamental aspects of running Falco in production and
    can now configure and customize it for almost any need and scenario. You’ve also
    discovered how to consume Falco events properly and integrate them with your ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In [Part IV](part04.xhtml#iv_extending_falco), you will go beyond the knowledge
    of the average user and learn how to extend Falco to satisfy any advanced requirement.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch12.xhtml#ch01fn16-marker)) A [Grafana dashboard](https://oreil.ly/2sVSm)
    is a set of organized UI elements to visualize the data. Dashboard configurations
    can be stored in a file and shared. You can get most of the available dashboards
    from Grafana’s [online gallery](https://oreil.ly/F25kV).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch12.xhtml#ch01fn17-marker)) The actual URLs of the Falcosidekick example
    manifest files for Kubernetes may change from time to time, but you can always
    find them under the Falcosecurity GitHub organization. Note that any Helm chart
    can generate such files. Indeed, like Falco’s manifest files, Falcosidekick’s
    files are rendered starting from its chart.
  prefs: []
  type: TYPE_NORMAL
