- en: Chapter 12\. Serialization and Transports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To serialize an object we convert the abstract concept (the “model”) to transportable
    entities, usually either a `String` representation of the model, like XML or JSON,
    or bytes.
  prefs: []
  type: TYPE_NORMAL
- en: To deserialize data means to convert it from a series of entities to an object
    your program recognizes. For example, you might have an `Author` entity with a
    `name` property.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Serialize and deserialize an object instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android uses a lot of XML internally, but in the real world, JSON is still the
    primary serialization mechanism (although larger organizations with plenty of
    engineering resources have started to embrace “protobuf,” or Protocol Buffers).
    This is a neat concept and highly performant, but beyond the scope of our examination
    of the framework and standard APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Serialize and Deserialize an Object Instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Java and Android, deserialization probably starts with a data model, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deserialized to JSON, an `Author` instance that returned “Mike” by invoking
    `getName` would probably look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once it’s in JSON format, it can be passed along with a network request, written
    to disk, or even handed off to another program in wildly different technologies;
    since the JSON format has an established spec, we can trust that the JSON rules
    used by your Android application will look like the JSON rules used by an iOS
    application, or even a Windows or Unix program.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are really three main modes of serialization in the Android framework:'
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Serialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those are roughly in order of popularity. While some level of support for each
    is available from the Java standard libraries, or the Android framework, we’ll
    also take a look at third-party libraries like [Gson](https://oreil.ly/RRhOS).
    While Gson is a Google product, there are some very popular alternatives—do a
    quick search if you don’t find Gson or org.json compelling or if you don’t use
    a ton of JSON in your application.
  prefs: []
  type: TYPE_NORMAL
- en: org.json
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [the developer docs for this package](https://oreil.ly/5Zw0T) for reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic serialization and deserialization using the `org.json` package is pretty
    straightforward. Let’s consider the `Author` class used earlier. To serialize
    that, we can instantiate a `JSONObject` instance, copy our properties to it, and
    call the `toString` method:'
  prefs: []
  type: TYPE_NORMAL
- en: This would print out `{"name":"Mike"}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deserializing is more automated:'
  prefs: []
  type: TYPE_NORMAL
- en: This would log `Mike`.
  prefs: []
  type: TYPE_NORMAL
- en: There are similar facilities for arrays (lists), but there can be a fairly large
    amount of conversion with checked exceptions handling large objects this way,
    and it’s not as common as Gson. Let’s take a look at that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Gson, serialization works pretty similarly, but you don’t need an intermediary
    wrapper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This would output `{"mName":"Mike"}`.
  prefs: []
  type: TYPE_NORMAL
- en: Did you catch it? `mName`, not `name`. Gson uses the property name by default,
    rather than getter or setter method names.
  prefs: []
  type: TYPE_NORMAL
- en: 'This type of notation—using an `m` to prefix member variables, and `s` to prefix
    static variables—is known as Hungarian notation. You see that AOSP itself uses
    Hungarian notation exclusively, so many Android developers have taken to using
    that style as well. As you’ll see in the following, there’s a simple fix, but
    do note that Hungarian notation does create an issue with Gson (or similar libraries)
    out of the box. Note that the issue with Hungarian (or any arbitrary) notation
    is NOT an issue in Kotlin. If your `Author` class were defined as shown in the
    Kotlin sample, earlier, the output would be just as you’d expect: `{"name": "Mike"}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the Java example. This issue is common but also very simple to modify—you
    can annotate any property with `@SerializedName` to use an alternative. For example,
    assume the `Author` class looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the output would be as you’d expect: `{"name":"Mike"}`. Note that this
    works both ways, and it will deserialize from annotated values as well. Let’s
    assume we’ve updated the `Author` class for the next example, deserialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This would output `Mike`, just as you’d expect.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest benefit of Gson is that it will handle this in a recursive strategy,
    and the `org.json` classes often will not.
  prefs: []
  type: TYPE_NORMAL
- en: org.xmlpull
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another common transport is XML. If you’ve ever written for the web, you’re
    sure to have seen XML or some variant of it—if you see data that’s chock full
    of angle brackets, it’s probably XML or a cousin.
  prefs: []
  type: TYPE_NORMAL
- en: 'While Java standard libraries available within the Android framework don’t
    provide any built-in APIs for handling XML, Android does provide a third-party
    package that is maintained is vetted: `org.xmlpull`. This package provides object
    instances known as “XML pull parsers,” with which we can read and traverse XML
    data. A “pull parser” is just one that requests tokens from a stream—the opposite
    “push parser” sends tokens to the parser as they’re encountered, not as they’re
    requested. This is really a semantic detail and is unimportant to how you’ll use
    these classes in practice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In any event, we’ll provide as basic an example of XML parsing as we can, but
    even this small sample you’ll notice is verbose and not exactly readable. If you
    have data coming in from XML and need to parse it, do a deep dive on the `org.xml`
    classes, or find a good third-party alternative. Here’s the basic operation:'
  prefs: []
  type: TYPE_NORMAL
- en: For a deep dive into the `org.xml` package, see [the Android developer docs](https://oreil.ly/OEm5A).
  prefs: []
  type: TYPE_NORMAL
- en: Java serialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Java serialization is perhaps the easiest transport to understand and from a
    distance can seem like a great strategy. In practice, however, there are lots
    of downsides—we’ll touch on them briefly, but that’s not to say there is never
    a circumstance where Java serialization is appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic premise is simple: convert an object instance to bytes. You can then
    save those bytes to disk, or send them across the wire, and reassemble the original
    object as needed. However, this requires that any program attempting to deserialize
    an object serialized in this fashion must have the exact Java definition of the
    object—the Java virtual machine (JVM) must have a class that matches the fully
    qualified class name of the object, and if any of the methods or properties are
    accessed on either side and don’t match, you’ve pretty much hit the end of the
    road.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, imagine that you have inherited your application code from a
    third-party contractor. They used a class called “Chapter” that had a variety
    of properties and methods useful for an object representing that chapter. However,
    the package name (and therefore the fully qualified class name, or the “canonical”
    name) included the domain of the contractor, and when you took ownership of the
    application source code, you no longer had a matching package name. Normally,
    this would be fine and you’d come up with our own `Chapter` class, which may or
    may not have methods and properties with names or functionality similar to that
    old `Chapter` class. However, the contractor had violated a community consensus:
    they had stored `Chapter` instances in a user’s favorites list by serializing
    the `Chapter` instance to bytes and saving that blob to a local SQLite database.
    This means you *have* to maintain a package with a name matching exactly the previous
    canonical name, including the contractor’s domain. Of course, when you want to
    define how a `Chapter` instance works in your own app, this intermediary class
    exists only long enough to deserialize from the database, convert to the updated
    version of the `Chapter` class, and save its properties to our updated database.
    This is not only confusing because we have to tell this story to each new developer,
    but every time you open Android Studio, that unused contractor’s package sits
    at the top of your source code, littered with skeleton classes that exist only
    so users from the previous version can migrate their content to the new app.'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings aside, let’s dig in to how you can use Java serialization if you ever
    decide you need it.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you’ll need to know is that to use built-in Java serialization,
    the class being serialized must implement the `Serializable` interface. Now, there
    is no contract with that interface (no methods you have to implement); it just
    has to implement the interface itself.
  prefs: []
  type: TYPE_NORMAL
- en: You should also provide a `Long` serialization ID, in the form of `private static
    final long serialVersionUID = 12345467890;`. Any valid `Long` is allowed here,
    and it should be unique amongst your serializable classes. Most Java or Android-aware
    IDEs can generate this value for you, with the correct name and value.
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, there’s not a lot left. You’ll write the object to a file using
    the subclasses of the `InputStream` and `OutputStream` classes we learned about
    in [Chapter 6](ch06.html#topics_files). Let’s take a look on how to serialize
    a simple class—in fact, we’ll use the same `Author` class we showed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you’ve got a file called “data.obj” that contains the bytes representing
    your object instance. Note that this is a complete reproduction and can be deserialized
    back to the state it was at the time of serialization, as long as the class file
    is on your CLASSPATH at the time you want to deserialize. Reading it back out
    is also pretty familiar:'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! As mentioned, a lot of the community has moved to JSON as the standard
    serialization strategy for networked computing, but as you can see there are lots
    of options. For more fun, take a quick Google around “protobuffs”—a new, Googley
    way to transport data.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a variety of ways to convert data to and from transport entities.
    Usually, this is done during network requests, and the two most common data transport
    formats are JSON and XML, with JSON becoming much more popular in recent years
    than XML. The process for converting between these two formats and Swift object
    instances is very different. There is an additional format used almost exclusively
    by Apple called property lists. They are special-purpose XML that iOS (and macOS)
    apps can read and write data to and from.
  prefs: []
  type: TYPE_NORMAL
- en: Updates to Swift have made parsing this data much more straightforward and less
    error-prone in the past, but there is still significant complexity involved. In
    other words, we’ve got a lot to cover, so let’s dive in.
  prefs: []
  type: TYPE_NORMAL
- en: Serialize and Deserialize an Object Instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Historically, in the primeval days of Objective-C, parsing an object to JSON
    was unnecessarily complex or required a third-party library. Indeed, even the
    early days of Swift were fraught with complexity and distress. Thankfully, Apple
    paid attention to the needs of developers and with Swift 3 brought a new, modern
    approach to JSON serialization and deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start with a Swift object that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The JSON representation would probably look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When communicating with a server, it’s usually necessary to send and receive
    JSON like this and convert it into the pure Swift object. It’s certainly common
    to persist data an app needs to read later as JSON (or any of the other formats
    covered in this chapter) locally as well. Using the `Author` structure defined
    earlier, converting an instance of that object to the JSON previously displayed
    would look like similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Walking through this, you can see that we’ve added a protocol for our object
    to implement called `Codable`. This protocol is a composition of two other protocols:
    `Encodable` and `Decodable`. They provide a set of functionality that the Swift
    compiler is able to interpret through some syntactic sugar and expected values.'
  prefs: []
  type: TYPE_NORMAL
- en: Objects that implement `Codable` are required to implement `encode(to:)` and
    `init(from:)`. If no implementation is provided, instead of erroring out, the
    Swift compiler applies some special logic to write the logic for the type itself.
    This is done by looking at the properties an object has and modifying a special
    nested enum type by the name of `CodingKeys`. Using this enum, the compiler is
    then able to create proper implementations of `encode(to:)` and `init(from:)`.
  prefs: []
  type: TYPE_NORMAL
- en: You could call it magic, but really it’s the compiler making pragmatic decisions
    about the code.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, this plays out through `JSONEncoder` being able to encode `author`
    as a `Data` object that can used for storing locally on the device or sending
    across the wire to a server.
  prefs: []
  type: TYPE_NORMAL
- en: '`Codable` also helps in converting (or “deserializing”) our object from JSON
    back into a normal Swift object. Here’s an example of what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: First, we’re defining a `Data` object named `rawJson` that contains the JSON
    we might receive from a server. Next, we take that JSON and pass it into an instance
    of `JSONDecoder` in the `decode(_:from:)` method. This method also takes an object
    type to attempt to transform the data into; in this case, we’re passing `Author.self`,
    which is the `Author` structure defined in the preceding example. The decoder
    decodes the object back into a native Swift object named `author`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, if we had given `JSONDecoder` an object type that it couldn’t decode the
    data back into, it would have produced an error. We’ve marked our call to this
    method as `try?`, which is sufficient for this example, but in a shipping app,
    you’d probably want to handle this with some user feedback or logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is more functionality packed into `Codable`, but it’s outside the scope
    of this chapter. For now, let’s talk about another popular transport format: XML.'
  prefs: []
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'XML is a format older than JSON. There are various standards of XML, including
    some very specific transport types like the Simple Object Access Protocol (SOAP),
    but for the purposes of our example, we’re going to use a slightly modified version
    of the JSON we used previously to keep things simple. Let’s start with this XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This XML describes an author with the name of “Mike” that happens to be human
    (and an author of this book, coincidentally).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re expecting the same simplicity as `Codable` offers with `JSONEncoder`
    and `JSONDecoder`, I’m afraid I have some bad news: `XMLParser` in iOS is much
    more verbose.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the same XML and create an object that starts parsing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We have an `NSObject` named `SomeObject` that has a method called `parseSomeXml`
    that we’ve created. This method has a string variable named `xml` that contains
    our XML from earlier encoded. In the next line, we convert it to a `Data` object
    with UTF-8 encoding. Next, we instantiate an `XMLParser` with the `rawData` object.
    Then, we set ourselves as the delegate to handle the parsing. Finally, we call
    `parse()` to start parsing.
  prefs: []
  type: TYPE_NORMAL
- en: If you attempted to run this code right now, you’d have an error because `SomeObject`
    currently doesn’t implement the `XMLParserDelegate` protocol it’s supposed to
    implement to properly handle the parse operating. This is the core of what drives
    parsing, so let’s look at each protocol method we’re implementing in depth to
    understand what’s going on.
  prefs: []
  type: TYPE_NORMAL
- en: 'XML parsing is synchronous. The document is scanned and walked through element
    by element. There are four methods we’re going to use in our XML parsing delegate.
    They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`parser(_:foundCharacters:)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`parser(_:didEndElement:namespaceURI:qualifiedName:)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`parserDidEndDocument(_:)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the first method in this list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This method is called every time a new XML element is found in the document
    as we walk through it. In our preceding example XML, the only valid elements are
    `author` and `name`. If we find a new `author` element, we create a new `Author`
    instance in a new property that’s been added to the `SomeObject` class called
    `author`. This acts as something of a temporary place to store the `Author` instance
    as we build it out with data we find during parsing this element.
  prefs: []
  type: TYPE_NORMAL
- en: The first piece of data discovered is the attribute `type`. If you recall, our
    authors have a type and in our particular XML element this is `human` for the
    `Mike` author. We set the `type` property on our temporary `Author` instance to
    this value.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the document parses, the next element we will find will be `name`. We don’t
    need to do anything special once that element is started, but we do need to capture
    the data between the `<name>` and `</name>` tags. The next method in our list,
    `parser(_:foundCharacters:)`, allows us to do that like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the body of this method, we’re storing any found characters inside another
    new property added to our `SomeObject` instance called `characters`. This property
    acts as a temporary buffer of sorts to keep the characters around for the next
    step in the process, which occurs whenever we find the closing element for this
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This delegate method is called whenever the parser finds a closing tag for an
    element. In our case, this is `</name>`. We take the string buffer we had, `characters`,
    and add it to the `name` property on our `author` object that we’re building.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, we take what we’ve created and display it as a `print()` statement at
    the end of the XML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If we had more items in the XML document, we’d continue building out more and
    more author instances, and we’d need to save them whenever a new element is started
    and a temporary object is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the example in its entirety:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We’ve had a good look at straight XML, but what about something XML based that’s
    a little bit less verbose?
  prefs: []
  type: TYPE_NORMAL
- en: Property lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Property lists, or plist files, are an XML-based format that have traditionally
    been used for serializing and deserializing data in apps. Let’s take a look at
    how to read a plist file from the filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This looks pretty similar to our JSON decoding example. Notice the use of `PropertyListDecoder`,
    which is functionally similar to `JSONDecoder` except it handles plist data instead
    of JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing to a plist file is similar to the JSON example as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output a plist file as XML. There are additional options available
    for exporting property list files, however. In fact, there are three common types
    you can export to: XML, binary, or Open Step.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how to export to a binary plist file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: iOS Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although `Codable` appears to be magic, there are some very interesting things
    happening at the compiler level that do have the option to be overwritten. For
    example, to use a different property name for JSON other than what’s declared
    in the Swift-defined structure of `Author`, the following code could work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This example changes the `name` property in the JSON output to `something`.
    Running this code would output JSON like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In addition, it’s possible to provide your own separate implementations of the
    `Encodable` and `Decodable` methods `encode(to:)` and `init(from:)` for completely
    manual serialization and deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android and iOS have remarkably similar approaches to serializing and deserializing
    data like XML and JSON. There is also a similar path to take a Java, Kotlin, or
    Swift object and serialize it out to a native platform format. Despite the differences
    in the language and frameworks, this is an area where both platforms make it a
    bit easier to jump back and forth.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll explain a bit about extending the base framework
    objects (and other objects) to add a bit of functionality. Let’s have a look!
  prefs: []
  type: TYPE_NORMAL
