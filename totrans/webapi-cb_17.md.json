["```\n/**\n * Given a text node and a substring to highlight, creates a Range object covering\n * the desired text.\n */\nfunction getRange(textNode, textToHighlight) {\n  const startOffset = textNode.textContent.indexOf(textToHighlight);\n  const endOffset = startOffset + textToHighlight.length;\n\n  // Create a Range for the text to highlight.\n  const range = new Range();\n  range.setStart(textNode, startOffset);\n  range.setEnd(textNode, endOffset);\n\n  return range;\n}\n```", "```\n<p id=\"text\">\n  This is some text. We're using the CSS Custom Highlight API to highlight some of\n  the text.\n</p>\n```", "```\nconst node = document.querySelector('#text');\nconst range = getRange(node.firstChild, 'highlight some of the text');\n```", "```\nconst highlight = new Highlight(range);\nCSS.highlights.set('highlight-range', highlight);\n```", "```\n::highlight(highlight-range) {\n  background-color: #fef3c7;\n}\n```", "```\n<p id=\"text\">\n  This is some text. We're using the mark element to\n  <mark>highlight some of the text</mark>.\n</p>\n```", "```\n<p>\n  This is a paragraph, which is being highlighted.\n</p>\n\n<p>\n  The highlight extends to this paragraph. This is not highlighted.\n</p>\n```", "```\n<p>\n  This is a paragraph, <mark>which is being highlighted.\n</p>\n\n<p>\n  The highlight extends to this paragraph</mark>. This is not highlighted.\n</p>\n```", "```\nconst roboto = new FontFace(\n  'Roboto',\n  'url(https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2)', {\n    style: 'normal',\n    weight: 400\n  });\n```", "```\ndocument.fonts.add(roboto);\n```", "```\nroboto.load()\n  .then(() => {\n    // Font has been loaded and is ready for use.\n  });\n```", "```\nfunction showAboutPage() {\n  document.startViewTransition(() => {\n    document.querySelector('#home-page').style.display = 'none';\n    document.querySelector('#about-page').style.display = 'block';\n  });\n}\n```", "```\n::view-transition-old(root),\n::view-transition-new(root) {\n  animation-duration: 2s;\n}\n```", "```\nconst [stylesheet] = document.styleSheets;\nstylesheet.insertRule(`\n .some-selector {\n background-color: red;\n }\n`);\n```", "```\n// Assume isExpanded is a variable with the current expanded\n// state\nelement.classList.toggle('expanded', isExpanded);\n```", "```\nconst isDarkTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;\n```", "```\nconst query = window.matchMedia('(prefers-color-scheme: dark)');\nquery.addEventListener('change', () => {\n  if (query.matches) {\n    // switch to dark mode\n  } else {\n    // switch to light mode\n  }\n});\n```", "```\n<style>\n  #content {\n    background-color: blue;\n  }\n\n  .container {\n    background-color: red;\n    color: white;\n  }\n</style>\n\n<div id=\"content\" class=\"container\">What color am I?</div>\n```", "```\nconst content = document.querySelector('#content');\nconst styles = window.getComputedStyle(content);\nconsole.log(styles.backgroundColor);\n```", "```\n<style>\n  #content {\n    background-color: blue;\n  }\n</style>\n\n<div id=\"content\" style=\"color: white;\">Content</div>\n```", "```\nconst content = document.querySelector('#content');\nconsole.log(content.style.backgroundColor); // empty string\nconsole.log(content.style.color); // 'white'\n```", "```\nconst content = document.querySelector('#content');\nconst styles = window.getComputedStyle(content);\nconsole.log(styles.backgroundColor); // 'rgb(0, 0, 255)'\nconsole.log(styles.color); // 'rgb(255, 255, 255)'\n```"]