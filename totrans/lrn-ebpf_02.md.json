["```\n#!/usr/bin/python \nfrom bcc import BPF\n\nprogram = r\"\"\"\nint hello(void *ctx) {\n bpf_trace_printk(\"Hello World!\");\n return 0;\n}\n\"\"\"\n\nb = BPF(text=program)\nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\n\nb.trace_print()\n```", "```\nint hello(void *ctx) {\n    bpf_trace_printk(\"Hello World!\");\n    return 0;\n}\n```", "```\nb = BPF(text=program)\n```", "```\nsyscall = b.get_syscall_fnname(\"execve\")\n```", "```\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\n```", "```\nb.trace_print()\n```", "```\n$ hello.py\nb'     bash-5412    [001] .... 90432.904952: 0: bpf_trace_printk: Hello World'\n```", "```\nBPF_HASH(counter_table);                                     ![1](assets/1.png)\n\nint hello(void *ctx) {\n  u64 uid;                                                  \n  u64 counter = 0;\n  u64 *p;\n\n  uid = bpf_get_current_uid_gid() & 0xFFFFFFFF;              ![2](assets/2.png)\n  p = counter_table.lookup(&uid);                            ![3](assets/3.png)\n  if (p != 0) {                                              ![4](assets/4.png)\n     counter = *p;\n  }\n  counter++;                                                 ![5](assets/5.png)\n  counter_table.update(&uid, &counter);                      ![6](assets/6.png)\n  return 0;\n}\n```", "```\n  p = counter_table.lookup(&uid);\n```", "```\n  counter_table.update(&uid, &counter);\n```", "```\nb = BPF(text=program)\nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\n```", "```\nwhile True:                                       ![1](assets/1.png)\n  sleep(2)                                         \n  s = \"\"\n  for k,v in b[\"counter_table\"].items():          ![2](assets/2.png)\n    s += f\"ID {k.value}: {v.value}\\t\"\n  print(s)\n```", "```\nTerminal 1                          Terminal 2\n$ ./hello-map.py \n                                    [blank line(s) until I run something]\nID 501: 1                           ls \nID 501: 1\nID 501: 2                           ls\nID 501: 3       ID 0: 1             sudo ls\nID 501: 4       ID 0: 1             ls\nID 501: 4       ID 0: 1\nID 501: 5       ID 0: 2             sudo ls\n```", "```\nBPF_PERF_OUTPUT(output);                                                ![1](assets/1.png)\n\nstruct data_t {                                                         ![2](assets/2.png)\n   int pid;\n   int uid;\n   char command[16];\n   char message[12];\n};\n\nint hello(void *ctx) {\n   struct data_t data = {};                                             ![3](assets/3.png)\n   char message[12] = \"Hello World\";\n\n   data.pid = bpf_get_current_pid_tgid() >> 32;                         ![4](assets/4.png)\n   data.uid = bpf_get_current_uid_gid() & 0xFFFFFFFF;                   ![5](assets/5.png)\n\n   bpf_get_current_comm(&data.command, sizeof(data.command));           ![6](assets/6.png) \n   bpf_probe_read_kernel(&data.message, sizeof(data.message), message); ![7](assets/7.png)\n\n   output.perf_submit(ctx, &data, sizeof(data));                        ![8](assets/8.png)\n\n   return 0;\n}\n```", "```\nb = BPF(text=program)                                ![1](assets/1.png)\nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\n\ndef print_event(cpu, data, size):                    ![2](assets/2.png)\n   data = b[\"output\"].event(data)\n   print(f\"{data.pid} {data.uid} {data.command.decode()} \" + \\\n         f\"{data.message.decode()}\")\n\nb[\"output\"].open_perf_buffer(print_event)            ![3](assets/3.png)\nwhile True:                                          ![4](assets/4.png)\n   b.perf_buffer_poll()\n```", "```\n$ sudo ./hello-buffer.py\n11654 node Hello World\n11655 sh Hello World\n...\n```", "```\nstatic __always_inline void my_function(void *ctx, int val)\n```", "```\nlong bpf_tail_call(void **`ctx`*, struct bpf_map **`prog_array_map`*, u32 *`index`*)\n```", "```\nprog_array_map.call(ctx, index)\n```", "```\nbpf_tail_call(ctx, prog_array_map, index)\n```", "```\nBPF_PROG_ARRAY(syscall, 300);                                   ![1](assets/1.png)\n\nint hello(struct bpf_raw_tracepoint_args *ctx) {                ![2](assets/2.png)\n   int opcode = ctx->args[1];                                   ![3](assets/3.png)\n   syscall.call(ctx, opcode);                                   ![4](assets/4.png)\n   bpf_trace_printk(\"Another syscall: %d\", opcode);             ![5](assets/5.png)\n   return 0;\n}\n\nint hello_execve(void *ctx) {                                   ![6](assets/6.png)\n   bpf_trace_printk(\"Executing a program\");\n   return 0;\n}\n\nint hello_timer(struct bpf_raw_tracepoint_args *ctx) {          ![7](assets/7.png)\n   if (ctx->args[1] == 222) {\n       bpf_trace_printk(\"Creating a timer\");\n   } else if (ctx->args[1] == 226) {\n       bpf_trace_printk(\"Deleting a timer\");\n   } else {\n       bpf_trace_printk(\"Some other timer operation\");\n   }\n   return 0;\n}\n\nint ignore_opcode(void *ctx) {                                  ![8](assets/8.png)\n   return 0;\n}\n```", "```\nb = BPF(text=program)                                              \nb.attach_raw_tracepoint(tp=\"sys_enter\", fn_name=\"hello\")           ![1](assets/1.png)\n\nignore_fn = b.load_func(\"ignore_opcode\", BPF.RAW_TRACEPOINT)       ![2](assets/2.png)\nexec_fn = b.load_func(\"hello_exec\", BPF.RAW_TRACEPOINT)\ntimer_fn = b.load_func(\"hello_timer\", BPF.RAW_TRACEPOINT)\n\nprog_array = b.get_table(\"syscall\")                                ![3](assets/3.png)\nprog_array[ct.c_int(59)] = ct.c_int(exec_fn.fd)\nprog_array[ct.c_int(222)] = ct.c_int(timer_fn.fd)\nprog_array[ct.c_int(223)] = ct.c_int(timer_fn.fd)\nprog_array[ct.c_int(224)] = ct.c_int(timer_fn.fd)\nprog_array[ct.c_int(225)] = ct.c_int(timer_fn.fd)\nprog_array[ct.c_int(226)] = ct.c_int(timer_fn.fd)\n\n# Ignore some syscalls that come up a lot ![4](assets/4.png)\nprog_array[ct.c_int(21)] = ct.c_int(ignore_fn.fd)\nprog_array[ct.c_int(22)] = ct.c_int(ignore_fn.fd)\nprog_array[ct.c_int(25)] = ct.c_int(ignore_fn.fd)\n...\n\nb.trace_print()                                                    ![5](assets/5.png)\n```", "```\n./hello-tail.py \nb'   hello-tail.py-2767    ... Another syscall: 62'\nb'   hello-tail.py-2767    ... Another syscall: 62'\n...\nb'            bash-2626    ... Executing a program'\nb'            bash-2626    ... Another syscall: 220'\n...\nb'           <...>-2774    ... Creating a timer'\nb'           <...>-2774    ... Another syscall: 48'\nb'           <...>-2774    ... Deleting a timer'\n...\nb'              ls-2774    ... Another syscall: 61'\nb'              ls-2774    ... Another syscall: 61'\n...\n```", "```\n    $ ./hello-map.py \n    ID 104: 6     ID 0: 225\n    ID 104: 6     ID 101: 34    ID 100: 45    ID 0: 332     ID 501: 19\n    ID 104: 6     ID 101: 34    ID 100: 45    ID 0: 368     ID 501: 38\n    ID 104: 6     ID 101: 34    ID 100: 45    ID 0: 533     ID 501: 57\n    ```"]