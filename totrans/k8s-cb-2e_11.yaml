- en: Chapter 11\. Monitoring and Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we focus on recipes around monitoring and logging, both on
    the infrastructure and on the application level. In the context of Kubernetes,
    different roles typically have different scopes:'
  prefs: []
  type: TYPE_NORMAL
- en: Administrator roles
  prefs: []
  type: TYPE_NORMAL
- en: 'Administrators, such as cluster admins, networking operations folks, or namespace-level
    admins, focus on the cluster control plane. Example questions they might ask themselves
    are: Are nodes healthy? Shall we add a worker node? What is the cluster-wide utilization?
    Are users close to their usage quotas?'
  prefs: []
  type: TYPE_NORMAL
- en: Developer roles
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers mainly think and act in the context of the application or data plane,
    which may well be—in the age of microservices—a handful to a dozen pods. For example,
    a person in a developer role might ask: Do I have enough resources allocated to
    run my app? How many replicas should I scale my app to? Do I have access to the
    right volumes, and how full are they? Is one of my apps failing and, if so, why?'
  prefs: []
  type: TYPE_NORMAL
- en: We will first cover recipes focused on cluster-internal monitoring by leveraging
    Kubernetes liveness and readiness probes, then focus on monitoring with the [Metrics
    Server](https://oreil.ly/agm34) and [Prometheus](https://prometheus.io), and finally
    cover logging-related recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 Accessing the Logs of a Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to access the logs of the application running inside a container that
    is running in a specific pod.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `kubectl logs` command. To see the various options, check the usage,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, given a pod started by a deployment (see [Recipe 4.1](ch04.html#kubectl_run)),
    you can check the logs like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If a pod has multiple containers, you can get the logs of any of them by specifying
    the name of the container using the `-c` option of `kubectl logs`.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Stern](https://oreil.ly/o4dxI) is a useful alternative for viewing pod logs
    on Kubernetes. It makes it easy to get logs from across namespaces and requires
    only that you provide a partial pod name in the query (as opposed to using selectors,
    which can be more cumbersome at times).'
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 Recovering from a Broken State with a Liveness Probe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to make sure that if the applications running inside some of your pods
    get into a broken state, Kubernetes restarts the pods automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a liveness probe. If the probe fails, the `kubelet` will restart the pod
    automatically. The probe is part of the pod specification and is added to the
    `containers` section. Each container in a pod can have a liveness probe.
  prefs: []
  type: TYPE_NORMAL
- en: 'A probe can be of three different types: it can be a command that is executed
    inside the container, an HTTP or gRPC request to a specific route served by an
    HTTP server inside the container, or a more generic TCP probe.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we show a basic HTTP probe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See [Recipe 11.5](#liveness_readiness_probes) for a complete example.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.3 Controlling Traffic Flow to a Pod Using a Readiness Probe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your pods are up and running according to the liveness probes (see [Recipe 11.2](#liveness)),
    but you want to send traffic to them only if the application is ready to serve
    the requests.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add [readiness probes](https://oreil.ly/oU3wa) to your pod specifications.
    The following is a straightforward example of running a single pod with the `nginx`
    container image. The readiness probe makes an HTTP request to port 80:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the readiness probe shown in this recipe is the same as the liveness probe
    in [Recipe 11.2](#liveness), they typically should be different as the two probes
    aim to give information about different aspects of the application. The liveness
    probe checks that the application process is alive, but it may not be ready to
    accept requests. The readiness probe checks that the application is serving requests
    properly. As such, only when a readiness probe passes does the pod become part
    of a service (see [Recipe 5.1](ch05.html#simple_service)).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.4 Protecting Slow-Starting Containers Using a Start-up Probe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your pod contains a container that needs additional start-up time on first initialization,
    but you don’t want to use liveness probes (see [Recipe 11.2](#liveness)) since
    this is a requirement only for the first time the pod is launched.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add a start-up probe to your pod specification with `failureThreshold` and
    `periodSeconds` set high enough to cover the start-up time for the pod. Similar
    to liveness probes, start-up probes can be of three types. The following is a
    straightforward example of running a single pod with the `nginx` container image.
    The start-up probe makes an HTTP request to port 80:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you have to deal with applications that need a long time to start
    up. For example, an application may need to perform some database migrations that
    take a long time to complete. In such cases setting up a liveness probe, without
    compromising the fast response to deadlocks that motivates such a probe, can be
    tricky. To work around this, in addition to your liveness probe you can set up
    a start-up probe with the same command, HTTP check, or TCP check, but with a `failureThreshold
    * periodSeconds` long enough to cover the worse-case start-up time.
  prefs: []
  type: TYPE_NORMAL
- en: If a start-up probe is configured, liveness and readiness probes do not start
    until it succeeds, making sure those probes don’t interfere with the application
    start-up. This technique can be used to safely implement liveness checks on slow-starting
    containers, avoiding them getting killed by the `kubelet` before they are up and
    running.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Configure Liveness, Readiness and Startup Probes”](https://oreil.ly/CoMlg)
    in the Kubernetes documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.5 Adding Liveness and Readiness Probes to Your Deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to be able to automatically check if your app is healthy and let Kubernetes
    take action if this is not the case.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To signal to Kubernetes how your app is doing, add liveness and readiness probes
    as described here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The starting point is a deployment manifest, *webserver.yaml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Liveness and readiness probes are defined in the `containers` section of the
    pod specification. See the introductory examples (Recipes [11.2](#liveness) and
    [11.3](#readiness)) and add the following to the container spec in your deployment’s
    pod template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can launch it and check the probes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that the output of the `kubectl describe` command has been edited down
    to the important bits; there’s much more information available, but it’s not pertinent
    to our problem here.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To verify whether a container in a pod is healthy and ready to serve traffic,
    Kubernetes provides a range of health-checking mechanisms. Health checks, or *probes*
    as they are called in Kubernetes, are defined on the container level, not on the
    pod level, and are carried out by two different components:'
  prefs: []
  type: TYPE_NORMAL
- en: The `kubelet` on each worker node uses the `livenessProbe` directive in the
    spec to determine when to restart a container. These liveness probes can help
    overcome ramp-up issues or deadlocks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A service load balancing a set of pods uses the `readinessProbe` directive to
    determine if a pod is ready and hence should receive traffic. If this is not the
    case, it is excluded from the service’s pool of endpoints. Note that a pod is
    considered ready when all of its containers are ready.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should you use which probe? That depends on the behavior of the container,
    really. Use a liveness probe and a `restartPolicy` of either `Always` or `OnFailure`
    if your container can and should be killed and restarted if the probe fails. If
    you want to send traffic to a pod only when it’s ready, use a readiness probe.
    Note that in this latter case, the readiness probe can be configured to use the
    same probing declaration endpoint (e.g., URL) as the liveness probe.
  prefs: []
  type: TYPE_NORMAL
- en: Start-up probes are used to determine if the application in a pod is up and
    running correctly. They can be used to delay the initialization of liveness and
    readiness probes, which are likely to fail if the application hasn’t correctly
    started yet.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[“Configure Liveness, Readiness and Startup Probes”](https://oreil.ly/CoMlg)
    in the Kubernetes documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kubernetes pod lifecycle documentation](https://oreil.ly/vEOdP)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kubernetes init containers documentation](https://oreil.ly/NWpRM) (stable
    in v1.6 and above)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.6 Accessing Kubernetes Metrics in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have installed the Kubernetes Metrics Server (see [Recipe 2.7](ch02.html#metrics_server)),
    and you want to access the metrics using the Kubernetes CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Kubernetes CLI has the `top` command that displays the resource usage of
    nodes and pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These metrics can also be viewed in a graphical user interface, the Kubernetes
    dashboard (see [Recipe 2.5](ch02.html#kubernetes_dashboard)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I can take several minutes for the Metrics Server to become available after
    having started it. If it is not yet in the ready state, then the `top` command
    might produce errors.
  prefs: []
  type: TYPE_NORMAL
- en: 11.7 Using Prometheus and Grafana on Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to view and query the system and application metrics of your cluster
    from a central place.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deploy Prometheus and Grafana on Minikube. We’ll leverage the [kube-prometheus
    project](https://oreil.ly/3oyNd), an independent project that makes it easy to
    install Prometheus and Grafana on any Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to start a new Minikube instance that is correctly
    configured to run kube-prometheus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure the `metrics-server` add-on is disabled on Minikube:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the kube-prometheus project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Change into the cloned repository, and then run the following command that
    will create a dedicated namespace called `monitoring` and create the necessary
    custom resource definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To open the Prometheus dashboard, you can use a port forward as shown here,
    or you can use ingress as defined in [Recipe 5.5](ch05.html#ingress):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can then open Prometheus on *localhost:9090* in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do something similar to access the Grafana dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then open the Grafana dashboard at *localhost:3000* in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the default credentials to log in: username `admin` and password `admin`.
    You can skip changing the password if you’re just running this recipe on your
    local Minikube instance.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a built-in dashboard for the Kubernetes API server. To find it, open
    the URL *[*http://localhost:3000/dashboards*](http://localhost:3000/dashboards)*
    or navigate to the Dashboards using the left menu bar. Find the dashboard called
    “Kubernetes / API server”; open it, and you should see a page like the one shown
    in [Figure 11-1](#grafana-screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![Grafana screenshot](assets/kcb2_1101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. The Kubernetes/API server dashboard in Grafana
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides a great way to start experimenting with Grafana and Prometheus
    and shows how to use an example built-in dashboard to get up and running quickly.
    Once you start deploying your own custom workloads and applications, you can create
    your own custom queries and dashboards that will provide metrics that are more
    specific to your workloads. You can learn more about Prometheus queries in the
    [Prometheus querying reference documentation](https://oreil.ly/23dQ9), and more
    about Grafana dashboards in the [Grafana documentation](https://oreil.ly/nf6jI).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[kube-prometheus on GitHub](https://oreil.ly/3oyNd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prometheus Operator on GitHub](https://oreil.ly/q6pdv)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prometheus Operator](https://prometheus-operator.dev)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prometheus](https://prometheus.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Grafana](https://grafana.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
