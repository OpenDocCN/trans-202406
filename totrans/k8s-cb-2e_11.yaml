- en: Chapter 11\. Monitoring and Logging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we focus on recipes around monitoring and logging, both on
    the infrastructure and on the application level. In the context of Kubernetes,
    different roles typically have different scopes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Administrator roles
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Administrators, such as cluster admins, networking operations folks, or namespace-level
    admins, focus on the cluster control plane. Example questions they might ask themselves
    are: Are nodes healthy? Shall we add a worker node? What is the cluster-wide utilization?
    Are users close to their usage quotas?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Developer roles
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers mainly think and act in the context of the application or data plane,
    which may well be—in the age of microservices—a handful to a dozen pods. For example,
    a person in a developer role might ask: Do I have enough resources allocated to
    run my app? How many replicas should I scale my app to? Do I have access to the
    right volumes, and how full are they? Is one of my apps failing and, if so, why?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: We will first cover recipes focused on cluster-internal monitoring by leveraging
    Kubernetes liveness and readiness probes, then focus on monitoring with the [Metrics
    Server](https://oreil.ly/agm34) and [Prometheus](https://prometheus.io), and finally
    cover logging-related recipes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 Accessing the Logs of a Container
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to access the logs of the application running inside a container that
    is running in a specific pod.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `kubectl logs` command. To see the various options, check the usage,
    like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, given a pod started by a deployment (see [Recipe 4.1](ch04.html#kubectl_run)),
    you can check the logs like so:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If a pod has multiple containers, you can get the logs of any of them by specifying
    the name of the container using the `-c` option of `kubectl logs`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Stern](https://oreil.ly/o4dxI) is a useful alternative for viewing pod logs
    on Kubernetes. It makes it easy to get logs from across namespaces and requires
    only that you provide a partial pod name in the query (as opposed to using selectors,
    which can be more cumbersome at times).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 Recovering from a Broken State with a Liveness Probe
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to make sure that if the applications running inside some of your pods
    get into a broken state, Kubernetes restarts the pods automatically.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a liveness probe. If the probe fails, the `kubelet` will restart the pod
    automatically. The probe is part of the pod specification and is added to the
    `containers` section. Each container in a pod can have a liveness probe.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'A probe can be of three different types: it can be a command that is executed
    inside the container, an HTTP or gRPC request to a specific route served by an
    HTTP server inside the container, or a more generic TCP probe.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we show a basic HTTP probe:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See [Recipe 11.5](#liveness_readiness_probes) for a complete example.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.3 Controlling Traffic Flow to a Pod Using a Readiness Probe
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your pods are up and running according to the liveness probes (see [Recipe 11.2](#liveness)),
    but you want to send traffic to them only if the application is ready to serve
    the requests.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add [readiness probes](https://oreil.ly/oU3wa) to your pod specifications.
    The following is a straightforward example of running a single pod with the `nginx`
    container image. The readiness probe makes an HTTP request to port 80:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the readiness probe shown in this recipe is the same as the liveness probe
    in [Recipe 11.2](#liveness), they typically should be different as the two probes
    aim to give information about different aspects of the application. The liveness
    probe checks that the application process is alive, but it may not be ready to
    accept requests. The readiness probe checks that the application is serving requests
    properly. As such, only when a readiness probe passes does the pod become part
    of a service (see [Recipe 5.1](ch05.html#simple_service)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.4 Protecting Slow-Starting Containers Using a Start-up Probe
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your pod contains a container that needs additional start-up time on first initialization,
    but you don’t want to use liveness probes (see [Recipe 11.2](#liveness)) since
    this is a requirement only for the first time the pod is launched.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add a start-up probe to your pod specification with `failureThreshold` and
    `periodSeconds` set high enough to cover the start-up time for the pod. Similar
    to liveness probes, start-up probes can be of three types. The following is a
    straightforward example of running a single pod with the `nginx` container image.
    The start-up probe makes an HTTP request to port 80:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you have to deal with applications that need a long time to start
    up. For example, an application may need to perform some database migrations that
    take a long time to complete. In such cases setting up a liveness probe, without
    compromising the fast response to deadlocks that motivates such a probe, can be
    tricky. To work around this, in addition to your liveness probe you can set up
    a start-up probe with the same command, HTTP check, or TCP check, but with a `failureThreshold
    * periodSeconds` long enough to cover the worse-case start-up time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: If a start-up probe is configured, liveness and readiness probes do not start
    until it succeeds, making sure those probes don’t interfere with the application
    start-up. This technique can be used to safely implement liveness checks on slow-starting
    containers, avoiding them getting killed by the `kubelet` before they are up and
    running.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Configure Liveness, Readiness and Startup Probes”](https://oreil.ly/CoMlg)
    in the Kubernetes documentation'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.5 Adding Liveness and Readiness Probes to Your Deployments
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to be able to automatically check if your app is healthy and let Kubernetes
    take action if this is not the case.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望能够自动检查您的应用程序是否健康，并让Kubernetes在这种情况下采取行动。
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: To signal to Kubernetes how your app is doing, add liveness and readiness probes
    as described here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要向Kubernetes发信号表明您的应用程序的状态，请按照此处描述的方式添加活力和就绪探针。
- en: 'The starting point is a deployment manifest, *webserver.yaml*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 起始点是一个部署清单，*webserver.yaml*：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Liveness and readiness probes are defined in the `containers` section of the
    pod specification. See the introductory examples (Recipes [11.2](#liveness) and
    [11.3](#readiness)) and add the following to the container spec in your deployment’s
    pod template:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 活力和就绪探针在pod规范的`containers`部分中定义。查看入门示例（Recipes [11.2](#liveness) 和 [11.3](#readiness)）并将以下内容添加到您的部署的pod模板中的容器规范中：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can launch it and check the probes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以启动它并检查探针：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the output of the `kubectl describe` command has been edited down
    to the important bits; there’s much more information available, but it’s not pertinent
    to our problem here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`kubectl describe`命令的输出已编辑为重要部分；还有更多信息可用，但在此问题中无关紧要。
- en: Discussion
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'To verify whether a container in a pod is healthy and ready to serve traffic,
    Kubernetes provides a range of health-checking mechanisms. Health checks, or *probes*
    as they are called in Kubernetes, are defined on the container level, not on the
    pod level, and are carried out by two different components:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证pod中的容器是否健康并准备好提供流量，Kubernetes提供了一系列健康检查机制。健康检查或在Kubernetes中称为*探针*，在容器级别定义，并由两个不同的组件执行：
- en: The `kubelet` on each worker node uses the `livenessProbe` directive in the
    spec to determine when to restart a container. These liveness probes can help
    overcome ramp-up issues or deadlocks.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个工作节点上的`kubelet`使用规范中的`livenessProbe`指令来确定何时重新启动一个容器。这些活力探针可以帮助解决启动问题或死锁问题。
- en: A service load balancing a set of pods uses the `readinessProbe` directive to
    determine if a pod is ready and hence should receive traffic. If this is not the
    case, it is excluded from the service’s pool of endpoints. Note that a pod is
    considered ready when all of its containers are ready.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个负载均衡一组pod的服务使用`readinessProbe`指令来确定一个pod是否准备好，因此应该接收流量。如果不是这种情况，它将从服务的端点池中排除。请注意，当所有容器都准备就绪时，一个pod被视为准备就绪。
- en: When should you use which probe? That depends on the behavior of the container,
    really. Use a liveness probe and a `restartPolicy` of either `Always` or `OnFailure`
    if your container can and should be killed and restarted if the probe fails. If
    you want to send traffic to a pod only when it’s ready, use a readiness probe.
    Note that in this latter case, the readiness probe can be configured to use the
    same probing declaration endpoint (e.g., URL) as the liveness probe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用哪个探针？这实际上取决于容器的行为。如果您的容器在探针失败时可以且应该被杀死并重新启动，请使用活力探针和`restartPolicy`为`Always`或`OnFailure`。如果只有当pod准备好时才想要发送流量，请使用就绪探针。请注意，在后一种情况下，就绪探针可以配置为使用与活力探针相同的探测声明端点（例如URL）。
- en: Start-up probes are used to determine if the application in a pod is up and
    running correctly. They can be used to delay the initialization of liveness and
    readiness probes, which are likely to fail if the application hasn’t correctly
    started yet.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 启动探针用于确定pod中的应用程序是否正常启动和运行。它们可以用来延迟活力和就绪探针的初始化，如果应用程序尚未正确启动，则这些探针可能会失败。
- en: See Also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Configure Liveness, Readiness and Startup Probes”](https://oreil.ly/CoMlg)
    in the Kubernetes documentation'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“配置活力、就绪和启动探针”](https://oreil.ly/CoMlg) 在Kubernetes文档中'
- en: '[Kubernetes pod lifecycle documentation](https://oreil.ly/vEOdP)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes pod生命周期文档](https://oreil.ly/vEOdP)'
- en: '[Kubernetes init containers documentation](https://oreil.ly/NWpRM) (stable
    in v1.6 and above)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes init容器文档](https://oreil.ly/NWpRM)（v1.6及以上版本稳定）'
- en: 11.6 Accessing Kubernetes Metrics in the CLI
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.6 在CLI中访问Kubernetes指标
- en: Problem
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have installed the Kubernetes Metrics Server (see [Recipe 2.7](ch02.html#metrics_server)),
    and you want to access the metrics using the Kubernetes CLI.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了Kubernetes Metrics Server（参见[Recipe 2.7](ch02.html#metrics_server)），并希望使用Kubernetes
    CLI访问指标。
- en: Solution
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The Kubernetes CLI has the `top` command that displays the resource usage of
    nodes and pods:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes CLI具有显示节点和pod资源使用情况的`top`命令：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These metrics can also be viewed in a graphical user interface, the Kubernetes
    dashboard (see [Recipe 2.5](ch02.html#kubernetes_dashboard)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I can take several minutes for the Metrics Server to become available after
    having started it. If it is not yet in the ready state, then the `top` command
    might produce errors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 11.7 Using Prometheus and Grafana on Minikube
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to view and query the system and application metrics of your cluster
    from a central place.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deploy Prometheus and Grafana on Minikube. We’ll leverage the [kube-prometheus
    project](https://oreil.ly/3oyNd), an independent project that makes it easy to
    install Prometheus and Grafana on any Kubernetes cluster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to start a new Minikube instance that is correctly
    configured to run kube-prometheus:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Ensure the `metrics-server` add-on is disabled on Minikube:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Clone the kube-prometheus project:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change into the cloned repository, and then run the following command that
    will create a dedicated namespace called `monitoring` and create the necessary
    custom resource definitions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To open the Prometheus dashboard, you can use a port forward as shown here,
    or you can use ingress as defined in [Recipe 5.5](ch05.html#ingress):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can then open Prometheus on *localhost:9090* in your browser.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do something similar to access the Grafana dashboard:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then open the Grafana dashboard at *localhost:3000* in your browser.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the default credentials to log in: username `admin` and password `admin`.
    You can skip changing the password if you’re just running this recipe on your
    local Minikube instance.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: There is a built-in dashboard for the Kubernetes API server. To find it, open
    the URL *[*http://localhost:3000/dashboards*](http://localhost:3000/dashboards)*
    or navigate to the Dashboards using the left menu bar. Find the dashboard called
    “Kubernetes / API server”; open it, and you should see a page like the one shown
    in [Figure 11-1](#grafana-screenshot).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Grafana screenshot](assets/kcb2_1101.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. The Kubernetes/API server dashboard in Grafana
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides a great way to start experimenting with Grafana and Prometheus
    and shows how to use an example built-in dashboard to get up and running quickly.
    Once you start deploying your own custom workloads and applications, you can create
    your own custom queries and dashboards that will provide metrics that are more
    specific to your workloads. You can learn more about Prometheus queries in the
    [Prometheus querying reference documentation](https://oreil.ly/23dQ9), and more
    about Grafana dashboards in the [Grafana documentation](https://oreil.ly/nf6jI).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[kube-prometheus on GitHub](https://oreil.ly/3oyNd)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prometheus Operator on GitHub](https://oreil.ly/q6pdv)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prometheus Operator](https://prometheus-operator.dev)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prometheus](https://prometheus.io)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Grafana](https://grafana.com)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
