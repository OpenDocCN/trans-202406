- en: Chapter 11\. Monitoring and Logging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章 监控和日志
- en: 'In this chapter we focus on recipes around monitoring and logging, both on
    the infrastructure and on the application level. In the context of Kubernetes,
    different roles typically have different scopes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于基础设施和应用程序级别的监控和日志记录食谱。在 Kubernetes 的上下文中，不同的角色通常有不同的范围：
- en: Administrator roles
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员角色
- en: 'Administrators, such as cluster admins, networking operations folks, or namespace-level
    admins, focus on the cluster control plane. Example questions they might ask themselves
    are: Are nodes healthy? Shall we add a worker node? What is the cluster-wide utilization?
    Are users close to their usage quotas?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员，如集群管理员、网络操作人员或命名空间级别的管理员，关注的是集群控制平面。他们可能会问自己一些例子性问题：节点是否健康？我们应该添加一个工作节点吗？集群的利用率如何？用户是否接近使用配额限制？
- en: Developer roles
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员角色
- en: 'Developers mainly think and act in the context of the application or data plane,
    which may well be—in the age of microservices—a handful to a dozen pods. For example,
    a person in a developer role might ask: Do I have enough resources allocated to
    run my app? How many replicas should I scale my app to? Do I have access to the
    right volumes, and how full are they? Is one of my apps failing and, if so, why?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员主要在应用程序或数据平面的上下文中思考和行动，这在微服务时代可能是一个手到擒来的事情——有时候可能是一到十几个 pod。例如，开发人员可能会问：我分配给运行应用程序的资源足够吗？我应该将应用程序扩展到多少副本？我是否有访问正确卷的权限，它们的使用情况如何？我的某个应用程序是否失败了，如果失败了，原因是什么？
- en: We will first cover recipes focused on cluster-internal monitoring by leveraging
    Kubernetes liveness and readiness probes, then focus on monitoring with the [Metrics
    Server](https://oreil.ly/agm34) and [Prometheus](https://prometheus.io), and finally
    cover logging-related recipes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过利用 Kubernetes 存活和就绪探测来聚焦于集群内部监控的食谱，然后关注使用[Metric Server](https://oreil.ly/agm34)和[Prometheus](https://prometheus.io)进行监控，最后涵盖与日志相关的食谱。
- en: 11.1 Accessing the Logs of a Container
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.1 访问容器的日志
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to access the logs of the application running inside a container that
    is running in a specific pod.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望访问运行在特定 pod 中某个容器内的应用程序的日志。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl logs` command. To see the various options, check the usage,
    like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl logs`命令。要查看各种选项，请检查用法，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, given a pod started by a deployment (see [Recipe 4.1](ch04.html#kubectl_run)),
    you can check the logs like so:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，给定由部署启动的 pod（参见[食谱 4.1](ch04.html#kubectl_run)），您可以像这样检查日志：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If a pod has multiple containers, you can get the logs of any of them by specifying
    the name of the container using the `-c` option of `kubectl logs`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个 pod 中有多个容器，您可以通过使用`kubectl logs`的`-c`选项并指定容器的名称来获取任何一个容器的日志。
- en: Discussion
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '[Stern](https://oreil.ly/o4dxI) is a useful alternative for viewing pod logs
    on Kubernetes. It makes it easy to get logs from across namespaces and requires
    only that you provide a partial pod name in the query (as opposed to using selectors,
    which can be more cumbersome at times).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[Stern](https://oreil.ly/o4dxI)是 Kubernetes 上查看 pod 日志的有用替代工具。它使得跨命名空间获取日志变得轻而易举，只需在查询中提供部分
    pod 名称（而不是使用选择器，有时可能更繁琐）。'
- en: 11.2 Recovering from a Broken State with a Liveness Probe
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.2 使用存活探测从故障状态恢复
- en: Problem
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to make sure that if the applications running inside some of your pods
    get into a broken state, Kubernetes restarts the pods automatically.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望确保，如果某些 pod 中运行的应用程序处于故障状态，Kubernetes 将自动重新启动这些 pod。
- en: Solution
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a liveness probe. If the probe fails, the `kubelet` will restart the pod
    automatically. The probe is part of the pod specification and is added to the
    `containers` section. Each container in a pod can have a liveness probe.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用存活探测。如果探测失败，`kubelet`将自动重新启动 pod。探测是 pod 规范的一部分，并添加到`containers`部分。每个 pod
    中的容器都可以有一个存活探测。
- en: 'A probe can be of three different types: it can be a command that is executed
    inside the container, an HTTP or gRPC request to a specific route served by an
    HTTP server inside the container, or a more generic TCP probe.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个探测可以有三种不同的类型：可以是在容器内执行的命令，是对容器内部 HTTP 服务器特定路由的 HTTP 或 gRPC 请求，或者是更通用的 TCP
    探测。
- en: 'In the following example, we show a basic HTTP probe:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们展示了一个基本的 HTTP 探测：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See [Recipe 11.5](#liveness_readiness_probes) for a complete example.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[食谱 11.5](#liveness_readiness_probes)以获取完整示例。
- en: See Also
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的[容器探测文档](https://oreil.ly/nrqEP)
- en: 11.3 Controlling Traffic Flow to a Pod Using a Readiness Probe
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.3 使用就绪性探针控制到 Pod 的流量
- en: Problem
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Your pods are up and running according to the liveness probes (see [Recipe 11.2](#liveness)),
    but you want to send traffic to them only if the application is ready to serve
    the requests.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据存活性探针（参见 [Recipe 11.2](#liveness)），您的 Pod 正在运行，但只有在应用程序准备好提供服务时才希望将流量发送到它们。
- en: Solution
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Add [readiness probes](https://oreil.ly/oU3wa) to your pod specifications.
    The following is a straightforward example of running a single pod with the `nginx`
    container image. The readiness probe makes an HTTP request to port 80:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Pod 规范中添加[就绪性探针](https://oreil.ly/oU3wa)。以下是使用 `nginx` 容器映像运行单个 Pod 的直接示例。就绪性探针向端口
    80 发送 HTTP 请求：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: While the readiness probe shown in this recipe is the same as the liveness probe
    in [Recipe 11.2](#liveness), they typically should be different as the two probes
    aim to give information about different aspects of the application. The liveness
    probe checks that the application process is alive, but it may not be ready to
    accept requests. The readiness probe checks that the application is serving requests
    properly. As such, only when a readiness probe passes does the pod become part
    of a service (see [Recipe 5.1](ch05.html#simple_service)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此配方中显示的就绪性探针与 [Recipe 11.2](#liveness) 中的存活性探针相同，但它们通常应该不同，因为两个探针的目的是提供关于应用程序不同方面的信息。存活性探针检查应用程序进程是否存活，但可能尚未准备好接受请求。就绪性探针检查应用程序是否正确服务请求。因此，只有在就绪性探针通过时，Pod
    才会成为服务的一部分（参见 [Recipe 5.1](ch05.html#simple_service)）。
- en: See Also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [容器探针文档](https://oreil.ly/nrqEP)
- en: 11.4 Protecting Slow-Starting Containers Using a Start-up Probe
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.4 使用启动探针保护启动缓慢的容器
- en: Problem
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Your pod contains a container that needs additional start-up time on first initialization,
    but you don’t want to use liveness probes (see [Recipe 11.2](#liveness)) since
    this is a requirement only for the first time the pod is launched.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Pod 包含一个容器，在首次初始化时需要额外的启动时间，但您不希望使用存活性探针（参见 [Recipe 11.2](#liveness)），因为这只是
    Pod 第一次启动时的要求。
- en: Solution
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Add a start-up probe to your pod specification with `failureThreshold` and
    `periodSeconds` set high enough to cover the start-up time for the pod. Similar
    to liveness probes, start-up probes can be of three types. The following is a
    straightforward example of running a single pod with the `nginx` container image.
    The start-up probe makes an HTTP request to port 80:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的 Pod 规范添加启动探针，设置 `failureThreshold` 和 `periodSeconds` 为足够覆盖 Pod 启动时间。类似于存活性探针，启动探针可以分为三种类型。以下是使用
    `nginx` 容器映像运行单个 Pod 的直接示例。启动探针向端口 80 发送 HTTP 请求：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Sometimes you have to deal with applications that need a long time to start
    up. For example, an application may need to perform some database migrations that
    take a long time to complete. In such cases setting up a liveness probe, without
    compromising the fast response to deadlocks that motivates such a probe, can be
    tricky. To work around this, in addition to your liveness probe you can set up
    a start-up probe with the same command, HTTP check, or TCP check, but with a `failureThreshold
    * periodSeconds` long enough to cover the worse-case start-up time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您必须处理需要很长时间才能启动的应用程序。例如，应用程序可能需要执行一些需要很长时间才能完成的数据库迁移。在这种情况下，设置存活性探针可能会有些棘手，而不会影响这种探针推动的快速响应死锁。为了解决这个问题，除了存活性探针之外，还可以设置一个与相同命令、HTTP
    检查或 TCP 检查相同的启动探针，但 `failureThreshold * periodSeconds` 要足够长以覆盖最坏情况的启动时间。
- en: If a start-up probe is configured, liveness and readiness probes do not start
    until it succeeds, making sure those probes don’t interfere with the application
    start-up. This technique can be used to safely implement liveness checks on slow-starting
    containers, avoiding them getting killed by the `kubelet` before they are up and
    running.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果配置了启动探针，则存活性和就绪性探针在成功之前不会启动，确保这些探针不会干扰应用程序的启动。此技术可安全实现对启动缓慢容器的存活性检查，避免它们在完全运行之前被
    `kubelet` 杀死。
- en: See Also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [container probes documentation](https://oreil.ly/nrqEP)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [容器探针文档](https://oreil.ly/nrqEP)
- en: '[“Configure Liveness, Readiness and Startup Probes”](https://oreil.ly/CoMlg)
    in the Kubernetes documentation'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“配置存活性、就绪性和启动探针”](https://oreil.ly/CoMlg)，在 Kubernetes 文档中'
- en: 11.5 Adding Liveness and Readiness Probes to Your Deployments
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.5 向您的部署添加存活性和就绪性探针
- en: Problem
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to be able to automatically check if your app is healthy and let Kubernetes
    take action if this is not the case.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望能够自动检查您的应用程序是否健康，并让Kubernetes在这种情况下采取行动。
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: To signal to Kubernetes how your app is doing, add liveness and readiness probes
    as described here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要向Kubernetes发信号表明您的应用程序的状态，请按照此处描述的方式添加活力和就绪探针。
- en: 'The starting point is a deployment manifest, *webserver.yaml*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 起始点是一个部署清单，*webserver.yaml*：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Liveness and readiness probes are defined in the `containers` section of the
    pod specification. See the introductory examples (Recipes [11.2](#liveness) and
    [11.3](#readiness)) and add the following to the container spec in your deployment’s
    pod template:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 活力和就绪探针在pod规范的`containers`部分中定义。查看入门示例（Recipes [11.2](#liveness) 和 [11.3](#readiness)）并将以下内容添加到您的部署的pod模板中的容器规范中：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can launch it and check the probes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以启动它并检查探针：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the output of the `kubectl describe` command has been edited down
    to the important bits; there’s much more information available, but it’s not pertinent
    to our problem here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`kubectl describe`命令的输出已编辑为重要部分；还有更多信息可用，但在此问题中无关紧要。
- en: Discussion
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'To verify whether a container in a pod is healthy and ready to serve traffic,
    Kubernetes provides a range of health-checking mechanisms. Health checks, or *probes*
    as they are called in Kubernetes, are defined on the container level, not on the
    pod level, and are carried out by two different components:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证pod中的容器是否健康并准备好提供流量，Kubernetes提供了一系列健康检查机制。健康检查或在Kubernetes中称为*探针*，在容器级别定义，并由两个不同的组件执行：
- en: The `kubelet` on each worker node uses the `livenessProbe` directive in the
    spec to determine when to restart a container. These liveness probes can help
    overcome ramp-up issues or deadlocks.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个工作节点上的`kubelet`使用规范中的`livenessProbe`指令来确定何时重新启动一个容器。这些活力探针可以帮助解决启动问题或死锁问题。
- en: A service load balancing a set of pods uses the `readinessProbe` directive to
    determine if a pod is ready and hence should receive traffic. If this is not the
    case, it is excluded from the service’s pool of endpoints. Note that a pod is
    considered ready when all of its containers are ready.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个负载均衡一组pod的服务使用`readinessProbe`指令来确定一个pod是否准备好，因此应该接收流量。如果不是这种情况，它将从服务的端点池中排除。请注意，当所有容器都准备就绪时，一个pod被视为准备就绪。
- en: When should you use which probe? That depends on the behavior of the container,
    really. Use a liveness probe and a `restartPolicy` of either `Always` or `OnFailure`
    if your container can and should be killed and restarted if the probe fails. If
    you want to send traffic to a pod only when it’s ready, use a readiness probe.
    Note that in this latter case, the readiness probe can be configured to use the
    same probing declaration endpoint (e.g., URL) as the liveness probe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用哪个探针？这实际上取决于容器的行为。如果您的容器在探针失败时可以且应该被杀死并重新启动，请使用活力探针和`restartPolicy`为`Always`或`OnFailure`。如果只有当pod准备好时才想要发送流量，请使用就绪探针。请注意，在后一种情况下，就绪探针可以配置为使用与活力探针相同的探测声明端点（例如URL）。
- en: Start-up probes are used to determine if the application in a pod is up and
    running correctly. They can be used to delay the initialization of liveness and
    readiness probes, which are likely to fail if the application hasn’t correctly
    started yet.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 启动探针用于确定pod中的应用程序是否正常启动和运行。它们可以用来延迟活力和就绪探针的初始化，如果应用程序尚未正确启动，则这些探针可能会失败。
- en: See Also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Configure Liveness, Readiness and Startup Probes”](https://oreil.ly/CoMlg)
    in the Kubernetes documentation'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“配置活力、就绪和启动探针”](https://oreil.ly/CoMlg) 在Kubernetes文档中'
- en: '[Kubernetes pod lifecycle documentation](https://oreil.ly/vEOdP)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes pod生命周期文档](https://oreil.ly/vEOdP)'
- en: '[Kubernetes init containers documentation](https://oreil.ly/NWpRM) (stable
    in v1.6 and above)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes init容器文档](https://oreil.ly/NWpRM)（v1.6及以上版本稳定）'
- en: 11.6 Accessing Kubernetes Metrics in the CLI
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.6 在CLI中访问Kubernetes指标
- en: Problem
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have installed the Kubernetes Metrics Server (see [Recipe 2.7](ch02.html#metrics_server)),
    and you want to access the metrics using the Kubernetes CLI.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了Kubernetes Metrics Server（参见[Recipe 2.7](ch02.html#metrics_server)），并希望使用Kubernetes
    CLI访问指标。
- en: Solution
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The Kubernetes CLI has the `top` command that displays the resource usage of
    nodes and pods:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes CLI具有显示节点和pod资源使用情况的`top`命令：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These metrics can also be viewed in a graphical user interface, the Kubernetes
    dashboard (see [Recipe 2.5](ch02.html#kubernetes_dashboard)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指标也可以在图形用户界面中查看，即 Kubernetes 仪表盘（参见 [配方 2.5](ch02.html#kubernetes_dashboard)）。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: I can take several minutes for the Metrics Server to become available after
    having started it. If it is not yet in the ready state, then the `top` command
    might produce errors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动 Metrics Server 后，可能需要几分钟才能使其可用。如果尚未准备就绪，则 `top` 命令可能会产生错误。
- en: 11.7 Using Prometheus and Grafana on Minikube
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.7 在 Minikube 上使用 Prometheus 和 Grafana
- en: Problem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to view and query the system and application metrics of your cluster
    from a central place.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从一个中心位置查看和查询集群的系统和应用程序指标。
- en: Solution
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Deploy Prometheus and Grafana on Minikube. We’ll leverage the [kube-prometheus
    project](https://oreil.ly/3oyNd), an independent project that makes it easy to
    install Prometheus and Grafana on any Kubernetes cluster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Minikube 上部署 Prometheus 和 Grafana。我们将利用 [kube-prometheus 项目](https://oreil.ly/3oyNd)，这是一个独立项目，可以轻松在任何
    Kubernetes 集群上安装 Prometheus 和 Grafana。
- en: 'Run the following command to start a new Minikube instance that is correctly
    configured to run kube-prometheus:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令启动一个新的 Minikube 实例，并正确配置以运行 kube-prometheus：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Ensure the `metrics-server` add-on is disabled on Minikube:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在 Minikube 上禁用 `metrics-server` 插件：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Clone the kube-prometheus project:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆 kube-prometheus 项目：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change into the cloned repository, and then run the following command that
    will create a dedicated namespace called `monitoring` and create the necessary
    custom resource definitions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到克隆的存储库，然后运行以下命令，它将创建一个名为 `monitoring` 的专用命名空间，并创建所需的自定义资源定义：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To open the Prometheus dashboard, you can use a port forward as shown here,
    or you can use ingress as defined in [Recipe 5.5](ch05.html#ingress):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开 Prometheus 仪表盘，您可以使用如下的端口转发，或者您可以按照 [配方 5.5](ch05.html#ingress) 中定义的方式使用
    ingress：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can then open Prometheus on *localhost:9090* in your browser.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您随后可以在浏览器中打开 *localhost:9090* 上的 Prometheus。
- en: 'You can do something similar to access the Grafana dashboard:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行类似的操作以访问 Grafana 仪表盘：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then open the Grafana dashboard at *localhost:3000* in your browser.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在浏览器中打开本地的 Grafana 仪表盘，网址为 *localhost:3000*。
- en: 'Use the default credentials to log in: username `admin` and password `admin`.
    You can skip changing the password if you’re just running this recipe on your
    local Minikube instance.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认凭据登录：用户名为 `admin`，密码为 `admin`。如果您只在本地 Minikube 实例上运行此配方，则可以跳过更改密码的步骤。
- en: There is a built-in dashboard for the Kubernetes API server. To find it, open
    the URL *[*http://localhost:3000/dashboards*](http://localhost:3000/dashboards)*
    or navigate to the Dashboards using the left menu bar. Find the dashboard called
    “Kubernetes / API server”; open it, and you should see a page like the one shown
    in [Figure 11-1](#grafana-screenshot).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 服务器有一个内置的仪表盘。要找到它，打开 URL *[*http://localhost:3000/dashboards*](http://localhost:3000/dashboards)*
    或使用左侧菜单导航到仪表盘。找到名为“Kubernetes / API server”的仪表盘；打开它，您应该看到类似 [图 11-1](#grafana-screenshot)
    所示的页面。
- en: '![Grafana screenshot](assets/kcb2_1101.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Grafana 截图](assets/kcb2_1101.png)'
- en: Figure 11-1\. The Kubernetes/API server dashboard in Grafana
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1\. Grafana 中的 Kubernetes/API 服务器仪表盘
- en: Discussion
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This recipe provides a great way to start experimenting with Grafana and Prometheus
    and shows how to use an example built-in dashboard to get up and running quickly.
    Once you start deploying your own custom workloads and applications, you can create
    your own custom queries and dashboards that will provide metrics that are more
    specific to your workloads. You can learn more about Prometheus queries in the
    [Prometheus querying reference documentation](https://oreil.ly/23dQ9), and more
    about Grafana dashboards in the [Grafana documentation](https://oreil.ly/nf6jI).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此处提供了一个很好的方法来开始尝试使用 Grafana 和 Prometheus，并展示如何使用内置的示例仪表盘快速启动。一旦开始部署自己的自定义工作负载和应用程序，您可以创建自己的自定义查询和仪表盘，以提供更符合您工作负载需求的指标。您可以在
    [Prometheus 查询参考文档](https://oreil.ly/23dQ9) 中了解更多关于 Prometheus 查询的信息，在 [Grafana
    文档](https://oreil.ly/nf6jI) 中了解更多关于 Grafana 仪表盘的信息。
- en: See Also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[kube-prometheus on GitHub](https://oreil.ly/3oyNd)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 上的 kube-prometheus](https://oreil.ly/3oyNd)'
- en: '[Prometheus Operator on GitHub](https://oreil.ly/q6pdv)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 上的 Prometheus Operator](https://oreil.ly/q6pdv)'
- en: '[Prometheus Operator](https://prometheus-operator.dev)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Prometheus Operator](https://prometheus-operator.dev)'
- en: '[Prometheus](https://prometheus.io)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Prometheus](https://prometheus.io)'
- en: '[Grafana](https://grafana.com)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Grafana](https://grafana.com)'
