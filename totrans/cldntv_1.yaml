- en: Chapter 1\. Introduction to Cloud Native
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 云原生简介
- en: What are cloud native applications? What makes them so appealing that the cloud
    native model is now considered not only for the cloud, but also for the edge?
    And, finally, how do you design and develop cloud native applications? These are
    all questions that will be answered throughout this book. But before we dive into
    the details on the what, why, and how, we want to provide a brief introduction
    to the cloud native world and some of the fundamental concepts and assumptions
    that are building the foundation for modern cloud native applications and environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是云原生应用程序？使它们如此吸引人的原因是什么，以至于云原生模型现在不仅被认为适用于云端，还适用于边缘？最后，你如何设计和开发云原生应用程序？这些都是本书将在全书中回答的问题。但在我们深入探讨什么、为什么和如何之前，我们想先简要介绍一下云原生世界及其一些构建现代云原生应用程序和环境基础的基本概念和假设。
- en: Distributed Systems
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式系统
- en: One of the biggest hurdles that developers face when they build cloud native
    applications for the first time is that they must deal with services that are
    not on the same machine, and they need to deal with patterns that consider a network
    between the machines. Without even knowing it, they have entered the world of
    distributed systems. A *distributed system* is a system in which individual computers
    are connected through a network and appear as a single computer. Being able to
    distribute computing power across a bunch of machines is a great way to accomplish
    scalability, reliability, and better economics. For example, most cloud providers
    are using cheaper commodity hardware and solving common problems such as high
    availability and reliability through software-based solutions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员在首次构建云原生应用程序时面临的最大障碍之一是，他们必须处理不在同一台机器上的服务，并且需要处理考虑到机器之间网络的模式。甚至在不知不觉中，他们已经进入了分布式系统的世界。*分布式系统*是指通过网络连接的个体计算机看起来像单个计算机的系统。能够在一群机器上分配计算能力是实现可伸缩性、可靠性和更好经济性的好方法。例如，大多数云提供商正在使用更便宜的通用硬件，并通过软件解决方案解决高可用性和可靠性等常见问题。
- en: Fallacies of Distributed Systems
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式系统的谬误
- en: 'There are couple of incorrect or unfounded assumptions most developers and
    architects make when they enter the world of distributed systems. Peter Deutsch,
    a Fellow at Sun Microsystems, was identifying fallacies of distributed computing
    back in 1994, at a time when nobody thought about cloud computing. Because cloud
    native applications are, at their core, distributed systems, these fallacies still
    have validity today. Following is the list of the fallacies that Deutsch described,
    with their meanings applied to cloud native applications:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员和架构师在进入分布式系统的世界时会有一些不正确或无根据的假设。彼得·德意志（Peter Deutsch）是Sun Microsystems的一位研究员，在1994年就已经指出了分布式计算的谬误，那时还没有人考虑到云计算。因为云原生应用程序在其核心上就是分布式系统，这些谬误至今仍然有效。以下是德意志描述的谬误列表，以及它们在云原生应用程序中的含义：
- en: The network is reliable
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是可靠的
- en: Even in the cloud you cannot assume that the network is reliable. Because services
    are typically placed on different machines, you need to develop your software
    in a way that it accounts for potential network failures, which we discuss later
    in this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在云中，你也不能假设网络是可靠的。因为服务通常放置在不同的机器上，你需要以一种能够应对潜在网络故障的方式开发软件，这一点我们稍后在本书中讨论。
- en: Latency is zero
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟是零
- en: 'Latency and bandwidth are often confused, but it is important to understand
    the difference. Latency is how much time goes by until data is received, whereas
    bandwidth indicates how much data can be transferred in a given window of time.
    Because latency has a big impact on user experience and performance, you should
    take care to do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟和带宽经常被混淆，但理解它们的区别非常重要。延迟是数据接收所需的时间，而带宽则表示在给定时间窗口内可以传输多少数据。由于延迟对用户体验和性能有很大影响，你应该注意以下几点：
- en: Avoid frequent network calls and introducing chattiness to the network.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免频繁的网络调用和引入网络通信的冗余。
- en: Design your cloud native application in a way that the data is closest to your
    client by using caching, content delivery networks (CDNs), and multiregion deployments.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计你的云原生应用程序，使数据通过使用缓存、内容传递网络（CDN）和多区域部署尽可能接近客户端。
- en: Use publication/subscription (pub/sub) mechanisms to be notified that there
    is new data and store it locally to be immediately available. [Chapter 3](ch03.xhtml#designing_cloud-native_applications)
    covers messaging patterns such as pub/sub in more detail.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用发布/订阅（pub/sub）机制来通知有新数据并将其存储在本地以便立即可用。 [第3章](ch03.xhtml#designing_cloud-native_applications)
    更详细地涵盖了诸如pub/sub之类的消息模式。
- en: There is infinite bandwidth
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 存在无限带宽
- en: Nowadays, network bandwidth does not seem to be a big issue, but new technologies
    and areas such as edge computing open up new scenarios that demand far more bandwidth.
    For example, it is predicted that a self-driving car will produce around 50 terabytes
    (TB) of data per day. This volume of data requires you to design your cloudnative
    application with bandwidth usage in mind. Domain-Driven Design (DDD) and data
    patterns such as Command Query Responsibility Segregation (CQRS) are very useful
    under such bandwidth-demanding circumstances. [Chapter 4](ch04.xhtml#working_with_data)
    and [Chapter 6](ch06.xhtml#best_practices) cover how to work with data in cloud
    native applications in more detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，网络带宽似乎不再是一个大问题，但是新技术和边缘计算等领域开辟了需要更多带宽的新场景。例如，预计自动驾驶汽车每天会产生约50TB的数据。这种数据量要求您在设计云原生应用时考虑带宽的使用情况。领域驱动设计（DDD）和数据模式，如命令查询责任分离（CQRS），在这种对带宽需求严苛的情况下非常有用。
    [第4章](ch04.xhtml#working_with_data) 和 [第6章](ch06.xhtml#best_practices) 更详细地介绍了在云原生应用中处理数据的方法。
- en: The network is secure
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是安全的
- en: 'Two things are often an afterthought for developers: diagnostics and security.
    The assumption that networks are secure can be fatal. As a developer or architect,
    you need to make security a priority of your design; for example, by embracing
    a defense-in-depth approach.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员来说，两件事经常被忽视：诊断和安全性。假设网络是安全的这一假设可能是致命的。作为开发人员或架构师，您需要把安全性作为设计的优先考虑因素；例如，采用深度防御的方法。
- en: The topology does not change
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑结构不会改变
- en: Pets versus cattle is a meme that gained popularity with the advent of containers.
    It means that you do not treat any machine as a known entity (pet) with its own
    set of properties, such as static IPs and so on. Instead, you treat machines as
    a member of a herd that has no special attributes. This concept is very important
    with cloud native applications. Because cloud environments are meant to provide
    elasticity, machines can be added and removed based on criteria such as resource
    consumption or requests per second.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 宠物与牲畜之间的对比是一个随着容器的出现而流行起来的梗。它意味着你不再将任何机器视为已知实体（宠物），具有其自身的属性，如静态IP等等。相反，你将机器视为没有特殊属性的群体成员。这个概念在云原生应用中非常重要。由于云环境旨在提供弹性，可以根据资源消耗或每秒请求等条件添加和移除机器。
- en: There is one administrator
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个管理员
- en: In traditional software development, it was quite common to have one person
    responsible for the environment, installing and upgrading the application, and
    so forth. Modern cloud architectures and DevOps methods have shifted the way software
    is built. A modern cloud native application is a composite of many services that
    need to work together in concert and that are developed by different teams. This
    makes it practically impossible for a single person to know and understand the
    application in its entirety, not to mention trying to fix a problem. Thus, you
    need to ensure that you have governance in place that makes it easy to troubleshoot
    issues. Throughout this book, we introduce you to important concepts such as *release
    management*, *decoupling*, and *logging and monitoring*. [Chapter 5](ch05.xhtml#devops)
    provides a detailed look at common DevOps practices for cloud native applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统软件开发中，一个人负责环境的安装、升级应用程序等是相当普遍的。现代云架构和DevOps方法改变了软件构建的方式。现代云原生应用是许多服务的组合，这些服务需要协同工作，并由不同团队开发。这使得一个人几乎不可能全面了解和理解应用程序，更不用说解决问题了。因此，您需要确保有治理机制使故障排除变得容易。在本书的整个过程中，我们向您介绍了诸如*发布管理*、*解耦*和*日志与监控*等重要概念。
    [第5章](ch05.xhtml#devops) 提供了云原生应用常见DevOps实践的详细介绍。
- en: Transport cost is zero
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 运输成本为零
- en: From a cloud native perspective, there are two ways to look at this one. First,
    transport happens over a network and network costs are not free with most cloud
    providers. Most cloud providers, for example, do not charge for data ingress,
    but do charge for data egress. The second way to look at this fallacy is that
    the cost for translating any payload into objects is not free. For example, serialization
    and deserialization are usually fairly expensive operations that you need to consider
    in addition to the latency of network calls.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从原生云的角度看，可以从两个方面看待这个谬误。首先，传输发生在网络上，大多数云提供商并不免费。例如，大多数云提供商不收取数据入口费用，但却会收取数据出口费用。另一个看待这个谬误的方式是，将任何有效载荷转换为对象的成本不是免费的。例如，序列化和反序列化通常是非常昂贵的操作，您需要考虑这些操作的延迟，而不仅仅是网络调用的延迟。
- en: The network is homogeneous
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是同构的
- en: This is almost not worth listing given that pretty much every developer and
    architect understands that there are different protocols that they must consider
    when building their applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎不值得列出，因为几乎每个开发者和架构师都明白，在构建应用程序时必须考虑不同的协议。
- en: As mentioned before, although these fallacies were documented a long time ago,
    they are still a good reminder of the incorrect assumptions people make when entering
    the cloud native world. Throughout this book, we teach you patterns and best practices
    that take all of the fallacies of distributed computing into account.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，尽管这些谬论早在很久以前就有记录，但它们仍然是一个很好的提醒，告诉人们在进入原生云时会做出的错误假设。在本书中，我们教授您考虑到分布式计算的所有谬误的模式和最佳实践。
- en: CAP Theorem
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CAP定理（CAP Theorem）
- en: 'The CAP theorem is often mentioned in combination with distributed systems.
    The CAP theorem states that any networked shared-data system can have at most
    two of the following three desirable properties:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CAP定理通常与分布式系统一起提到。CAP定理指出，任何网络共享数据系统最多只能具备以下三种理想属性中的两种：
- en: Consistency (C) equivalent to having a single up-to-date copy of the data
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致性（C）等同于保持数据的单一最新副本
- en: High availability (A) of that data (for updates)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性（A）（用于更新）的数据
- en: Tolerance to network partitions (P)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对网络分区的容错性（P）
- en: The reality is that you will always have network partitions (remember, “the
    network is reliable” is one of the fallacies of distributed computing). That leaves
    you with only two choices—you can optimize either for consistency or high availability.
    Many NoSQL databases such as Cassandra optimize for availability, whereas SQL-based
    systems that adhere to the principles of ACID (atomicity, consistency, isolation,
    and durability) optimize for consistency.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实际情况是，您总会有网络分区（记住，“网络是可靠的”是分布式计算谬误之一）。这让您只有两个选择——您可以优化一致性，也可以优化高可用性。许多NoSQL数据库（如Cassandra）优化为高可用性，而遵循ACID原则（原子性、一致性、隔离性和持久性）的基于SQL的系统则优化为一致性。
- en: The Twelve-Factor App
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 十二要素应用（The Twelve-Factor App）
- en: 'In the early days of Infrastructure as a Service (IaaS) and Platform as a Service
    (PaaS), it quickly became obvious that the cloud required a new way of developing
    applications. For example, on-premises scaling was often done by scaling vertically,
    meaning adding more resources to a machine. Scaling in the cloud, on the other
    hand, is usually done horizontally, meaning adding more machines to distribute
    the load. This type of scaling requires stateless applications, and this is one
    of the factors described by the *Twelve-Factor App manifesto*. The Twelve-Factor
    App methodology can be considered the foundation for cloud native applications
    and was first introduced by engineers at Heroku, derived from best practices for
    application development in the cloud. Cloud development has evolved since the
    introduction of the Twelve-Factor manifesto, but the principles still apply. Following
    are the 12 factors and their meaning for cloud native applications:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础设施即服务（IaaS）和平台即服务（PaaS）早期，很快就明显地需要一种新的应用程序开发方式。例如，传统的扩展往往通过垂直扩展来实现，即向机器添加更多资源。另一方面，在云中，扩展通常是水平的，即添加更多机器以分配负载。这种类型的扩展需要无状态应用程序，这是*十二要素应用宣言*描述的因素之一。十二要素应用方法可以被认为是原生云应用程序的基础，并由Heroku的工程师首次引入，源自云中应用程序开发的最佳实践。自从十二要素宣言引入以来，云开发已经发展，但原则仍然适用。以下是适用于原生云应用程序的12个因素及其含义：
- en: Codebase
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码库（Codebase）
- en: '*One codebase tracked in revision control; many deploys*.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*一种代码库在版本控制中跟踪；多次部署*。'
- en: There is only one codebase per application, but it can be deployed into many
    environments such as Dev, Test, and Prod. In cloud native architecture, this translates
    directly into one codebase per service or function, each having its own Continuous
    Integration/Continuous Deployment (CI/CD) flow.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个应用程序只有一个代码库，但可以部署到多个环境，例如开发、测试和生产。在云原生架构中，这直接转化为每个服务或函数一个代码库，每个都有自己的持续集成/持续部署（CI/CD）流程。
- en: Dependencies
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖关系
- en: '*Explicitly declare and isolate dependencies*.'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*明确声明和隔离依赖关系*。'
- en: Declaring and isolating dependencies is an important aspect of cloud native
    development. Many issues arise due to missing dependencies or version mismatch
    of dependencies, which stem from environmental differences between the on-premises
    and cloud environments. In general, you should always use dependency managers
    for languages such as Maven or npm. Containers have drastically reduced dependency-based
    issues because all dependencies are packaged inside a container, and as such should
    be declared in the Dockerfile. Chef, Puppet, Ansible, and Terraform are great
    tools to manage and install system dependencies.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明和隔离依赖关系是云原生开发的重要方面。许多问题源于缺少依赖关系或依赖关系版本不匹配，这些问题来自本地和云环境之间的环境差异。通常情况下，您应始终为诸如
    Maven 或 npm 等语言使用依赖管理器。容器大大减少了基于依赖关系的问题，因为所有依赖关系都打包在容器内，并且应在 Dockerfile 中声明。Chef、Puppet、Ansible
    和 Terraform 是管理和安装系统依赖项的优秀工具。
- en: Configuration
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置
- en: '*Store configuration in the environment*.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*将配置存储在环境中*。'
- en: Configuration should be strictly separated from code. This allows you to easily
    apply configurations per environment. For example, you can have a test configuration
    file that stores all the connection strings and other information used in a test
    environment. If you want to deploy the same application to a production environment,
    you need only to replace the configuration. Many modern platforms support external
    configuration, whether it is configuration maps with Kubernetes or managed configuration
    services in cloud environments.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置应严格与代码分离。这样可以轻松地根据环境应用配置。例如，您可以有一个测试配置文件，其中存储了测试环境中使用的所有连接字符串和其他信息。如果您希望将同一应用程序部署到生产环境中，只需替换配置即可。许多现代平台支持外部配置，无论是
    Kubernetes 中的配置映射还是云环境中的托管配置服务。
- en: Backing Services
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持服务
- en: '*Treat backing services as attached resources*.'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*将支持服务视为附加资源*。'
- en: A backing service is defined as “any service the app consumed over the network
    as part of its normal operation.” In the case of cloud native applications, this
    might be a managed caching service or a Database as a Service (DbaaS) implementation.
    The recommendation here is to access those services through configuration settings
    stored in external configuration systems, which allows loose coupling, one of
    the principles that is also valid for cloud native applications.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持服务被定义为“应用程序在正常操作中通过网络消耗的任何服务”。在云原生应用程序的情况下，这可能是托管的缓存服务或作为服务的数据库实现。建议是通过存储在外部配置系统中的配置设置访问这些服务，这允许松耦合，这也是云原生应用程序适用的原则之一。
- en: Build, Release, Run
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建、发布、运行
- en: '*Strictly separate build and run stages*.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*严格分离构建和运行阶段*。'
- en: As you will see in [Chapter 5](ch05.xhtml#devops) on DevOps, it is recommended
    to aim for fully automated build and release stages using CI/CD practices.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如您将在[第5章](ch05.xhtml#devops)中了解到的关于DevOps的内容，建议采用CI/CD实践实现完全自动化的构建和发布阶段。
- en: Processes
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程
- en: '*Execute the app in one or more stateless processes*.'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*在一个或多个无状态进程中执行应用程序*。'
- en: As mentioned earlier, compute in the cloud should be stateless, meaning that
    data should only be saved outside the processes. This enables elasticity, which
    is one of the promises of cloud computing.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如前面提到的，在云中计算应该是无状态的，这意味着数据只应保存在进程外部。这样做可以实现弹性，这也是云计算的一个承诺之一。
- en: Data Isolation
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据隔离
- en: '*Each service manages its own data*.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*每个服务管理其自己的数据*。'
- en: This is one of the key tenets of <em>microservices architectures</em>, which
    is a common pattern in cloud native applications. Each service manages its own
    data, which can be accessed only through APIs, meaning that other services that
    are part of the application are not allowed to directly access the data of another
    service.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是<em>微服务架构</em>的关键原则之一，这是云原生应用程序中常见的模式。每个服务管理其自己的数据，只能通过 API 访问，这意味着应用程序中的其他服务不允许直接访问另一个服务的数据。
- en: Concurrency
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并发性
- en: '*Scale out via the process model*.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*通过进程模型扩展*。'
- en: Improved scale and resource usage are two of the key benefits of cloud native
    applications, meaning that you can scale each service or function independently
    and horizontally; thus, you’ll achieve better resource usage.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Improved scale and resource usage are two of the key benefits of cloud native
    applications, meaning that you can scale each service or function independently
    and horizontally; thus, you’ll achieve better resource usage.
- en: Disposability
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Disposability
- en: '*Maximize robustness with fast startup and graceful shutdown*.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*通过快速启动和优雅关闭来最大化健壮性*。'
- en: Containers and functions already satisfy this factor given that both provide
    fast startup times. One thing that is often neglected is to design for a crash
    or scale in scenario, meaning that the instance count of a function or a container
    is decreased, which is also captured in this factor.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Containers and functions already satisfy this factor given that both provide
    fast startup times. One thing that is often neglected is to design for a crash
    or scale in scenario, meaning that the instance count of a function or a container
    is decreased, which is also captured in this factor.
- en: Dev/Prod Parity
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dev/Prod Parity
- en: '*Keep development, staging, and production as similar as possible*.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*保持开发、演示和生产尽可能相似*。'
- en: Containers allow you to package all of the dependencies of your service, which
    limits the issues with environment inconsistencies. There are scenarios that are
    a bit trickier, especially when you use managed services that are not available
    on-premises in your Dev environment. [Chapter 5](ch05.xhtml#devops) looks at methods
    and techniques to keep your environments as consistent as possible.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Containers allow you to package all of the dependencies of your service, which
    limits the issues with environment inconsistencies. There are scenarios that are
    a bit trickier, especially when you use managed services that are not available
    on-premises in your Dev environment. [第五章](ch05.xhtml#devops) 介绍了保持环境尽可能一致的方法和技术。
- en: Logs
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Logs
- en: '*Treat logs as event streams*.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*Treat logs as event streams*.'
- en: Logging is one of the most important tasks in a distributed system. There are
    so many moving parts and without a good logging strategy, you would be “flying
    blind” when the application is not behaving as expected. The Twelve-Factor manifesto
    states that you should treat logs as streams, routed to external systems.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Logging is one of the most important tasks in a distributed system. There are
    so many moving parts and without a good logging strategy, you would be “flying
    blind” when the application is not behaving as expected. The Twelve-Factor manifesto
    states that you should treat logs as streams, routed to external systems.
- en: Admin Processes
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Admin Processes
- en: '*Run admin and management tasks as one-off processes*.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*将管理和管理任务作为一次性进程运行*。'
- en: This basically means that you should execute administrative and management tasks
    as short-lived processes. Both functions and containers are great tools for that.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: This basically means that you should execute administrative and management tasks
    as short-lived processes. Both functions and containers are great tools for that.
- en: Throughout the book you will recognize many of these factors because they are
    still very relevant for cloud native applications.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本书全程你会发现许多这些因素，因为它们对于云原生应用仍然非常重要。
- en: Availability and Service-Level Agreements
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Availability and Service-Level Agreements
- en: Most of the time, cloud native applications are composite applications that
    use compute, such as containers and functions, but also managed cloud services
    such as DbaaS, caching services, and/or identity services. What is not obvious
    is that your compound Service-Level Agreement (SLA) will never be as high as the
    highest availability of an individual service. SLAs are typically measured in
    uptime in a year, more commonly referred to as “number of nines.” [Table 1-1](#uptime_percentages_and_service_downtime)
    shows a list of common availability percentages for cloud services and their corresponding
    downtimes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Most of the time, cloud native applications are composite applications that
    use compute, such as containers and functions, but also managed cloud services
    such as DbaaS, caching services, and/or identity services. What is not obvious
    is that your compound Service-Level Agreement (SLA) will never be as high as the
    highest availability of an individual service. SLAs are typically measured in
    uptime in a year, more commonly referred to as “number of nines.” [表格 1-1](#uptime_percentages_and_service_downtime)
    显示了云服务常见的可用性百分比及其对应的停机时间。
- en: Table 1-1\. Uptime percentages and service downtime
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 1-1\. 可用性百分比和服务停机时间
- en: '| Availability % | Downtime per year | Downtime per month | Downtime per week
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 可用性 % | 每年停机时间 | 每月停机时间 | 每周停机时间 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 99% | 3.65 days | 7.20 hours | 1.68 hours |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 99% | 3.65 天 | 7.20 小时 | 1.68 小时 |'
- en: '| 99.9% | 8.76 hours | 43.2 minutes | 10.1 minutes |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 99.9% | 8.76 小时 | 43.2 分钟 | 10.1 分钟 |'
- en: '| 99.99% | 52.56 minutes | 4.32 minutes | 1.01 minutes |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 99.99% | 52.56 minutes | 4.32 minutes | 1.01 minutes |'
- en: '| 99.999% | 5.26 minutes | 25.9 seconds | 6.05 seconds |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 99.999% | 5.26 分钟 | 25.9 秒 | 6.05 秒 |'
- en: '| 99.9999% | 31.5 seconds | 2.59 seconds | 0.605 seconds |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 99.9999% | 31.5 seconds | 2.59 seconds | 0.605 seconds |'
- en: 'Following is an example of a compound SLA:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'Following is an example of a compound SLA:'
- en: 'Service 1 (99.95%) + Service 2 (99.90%): 0.9995 × 0.9990 = 0.9985005'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务1（99.95%）+ 服务2（99.90%）：0.9995 × 0.9990 = 0.9985005
- en: The compound SLA is 99.85%.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 复合SLA为99.85%。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Many developers struggle when starting to develop for the cloud. In a nutshell,
    developers are facing three major challenges: first, they need to understand distributed
    systems; second, they need to understand new technologies such as containers and
    functions; and third, they need to understand what patterns to use when building
    cloud native applications. Having some familiarity with the fundamentals, such
    as the fallacies of distributed systems, the Twelve-Factor manifesto, and compound
    SLAs, will make the transition easier. This chapter introduced some of the fundamental
    concepts of cloud native, which enables you to better understand some of the architectural
    considerations and patterns discussed throughout the book.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员在开始为云端开发时感到困难。简而言之，开发人员面临三个主要挑战：首先，他们需要理解分布式系统；其次，他们需要了解诸如容器和函数等新技术；第三，他们需要了解在构建云原生应用程序时使用的模式。具备一些基础知识，如分布式系统的谬论、十二因素宣言和复合SLA，将使过渡更加容易。本章介绍了云原生的一些基本概念，这使您能够更好地理解本书中讨论的一些架构考虑和模式。
