- en: Appendix G. TSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under the hood, TypeScript exposes a few hooks for typing TSX in a pluggable
    way. These are special types on the `global.JSX` namespace that TypeScript looks
    at as the source of truth for TSX types throughout your program.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re just using React, you don’t need to know about these low-level hooks,
    but if you’re writing a TypeScript library that uses TSX without React, this appendix
    provides a helpful reference for the hooks you can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'TSX supports two kinds of elements: built-in ones (*intrinsic elements*) and
    user-defined ones (*value-based elements*). Intrinsic elements always have lowercased
    names, and refer to built-in elements like `<li>`, `<h1>`, and `<div>`. Value-based
    elements have PascalCased names, and refer to those elements that you create with
    React (or whatever frontend framework you’re using TSX with); they can be defined
    either as functions or as classes. See [Figure G-1](#tsx-element-fig).'
  prefs: []
  type: TYPE_NORMAL
- en: '![prts ag01](assets/prts_ag01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure G-1\. The kinds of TSX elements
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Using [React’s type declarations](http://bit.ly/2CNzeW2) as an example, we’ll
    walk through the hooks TypeScript uses to safely type TSX. Here’s how React hooks
    into TSX to type JSX safely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_tsx_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.Element` is the type of a value-based TSX element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_tsx_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.ElementClass` is the type of an instance of a value-based class component.
    Whenever you declare a class component that you plan to instantiate with TSX’s
    `<MyComponent />` syntax, its class must satisfy this interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_tsx_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.ElementAttributesProperty` is the name of the property TypeScript looks
    at to figure out what attributes a component supports. For React, that means the
    `props` property. TypeScript looks for this value on a class instance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_tsx_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.ElementChildrenAttribute` is the name of the property that TypeScript
    looks at to figure out what types of children a component supports. For React,
    that means the `children` property.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_tsx_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.IntrinsicAttributes` is the set of attributes that all intrinsic elements
    support. For React, that means the `key` attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_tsx_CO1-6)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.IntrinsicClassAttributes` is the set of attributes that all class components
    (both intrinsic and value-based) support. For React, that means `ref`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_tsx_CO1-7)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.LibraryManagedAttributes` specifies other places where JSX elements can
    declare and initialize property types. For React, that means `propTypes` as another
    place to declare property types, and `defaultProps` as the place to declare default
    values for properties.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_tsx_CO1-8)'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSX.IntrinsicElements` enumerates every type of HTML element that you can
    use in TSX, mapping each element’s tag name to its attribute and children types.
    Because JSX isn’t HTML, React’s type declarations have to tell TypeScript exactly
    what elements someone might use in a TSX expression, and because you can use any
    standard HTML element from TSX, the declarations have to manually enumerate each
    element along with its attribute types (for an `<a>` tag, for example, valid attributes
    include `href: string` and `rel: string`, but not `value`) and what types of children
    it might have.'
  prefs: []
  type: TYPE_NORMAL
- en: By declaring any of these types in the global JSX namespace, you can hook into
    TypeScript’s typechecking behavior for TSX and customize it however you want.
    Unless you’re writing a library that uses TSX (and doesn’t use React), you’ll
    probably never touch these hooks.
  prefs: []
  type: TYPE_NORMAL
