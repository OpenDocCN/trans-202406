["```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kuard\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n  containers:\n    - image: gcr.io/kuar-demo/kuard-amd64:blue\n      name: kuard\n      securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          privileged: false\n      ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```\n$ kubectl create -f kuard-pod-securitycontext.yaml\npod/kuard created\n```", "```\n$ kubectl exec -it kuard -- ash\n/ $ id\nuid=1000 gid=3000 groups=2000\n/ $ ps\nPID   USER     TIME  COMMAND\n    1 1000      0:00 /kuard\n   30 1000      0:00 ash\n   37 1000      0:00 ps\n/ $ touch file\ntouch: file: Read-only file system\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: amicontained\nspec:\n  containers:\n    - image: r.j3ss.co/amicontained:v0.4.9\n      name: amicontained\n      command: [ \"/bin/sh\", \"-c\", \"--\" ]\n      args: [ \"amicontained\" ]\n```", "```\n$ kubectl apply -f amicontained-pod.yaml\npod/amicontained created\n```", "```\n$ kubectl logs amicontained\nContainer Runtime: kube\nHas Namespaces:\n\tpid: true\n\tuser: false\nAppArmor Profile: docker-default (enforce)\nCapabilities:\n\tBOUNDING -> chown dac_override fowner fsetid kill setgid setuid\n\tsetpcap net_bind_service net_raw sys_chroot mknod audit_write\n\tsetfcap\nSeccomp: disabled\nBlocked Syscalls (21):\n\tSYSLOG SETPGID SETSID VHANGUP PIVOT_ROOT ACCT SETTIMEOFDAY UMOUNT2\n\tSWAPON SWAPOFF REBOOT SETHOSTNAME SETDOMAINNAME INIT_MODULE\n\tDELETE_MODULE LOOKUP_DCOOKIE KEXEC_LOAD FANOTIFY_INIT\n\tOPEN_BY_HANDLE_AT FINIT_MODULE KEXEC_FILE_LOAD\nLooking for Docker.sock\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: amicontained\n  annotations:\n    container.apparmor.security.beta.kubernetes.io/amicontained: \"runtime/default\"\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n    - image: r.j3ss.co/amicontained:v0.4.9\n      name: amicontained\n      command: [ \"/bin/sh\", \"-c\", \"--\" ]\n      args: [ \"amicontained\" ]\n      securityContext:\n        capabilities:\n            add: [\"SYS_TIME\"]\n            drop: [\"NET_BIND_SERVICE\"]\n        allowPrivilegeEscalation: false\n        readOnlyRootFilesystem: true\n        privileged: false\n```", "```\n$ kubectl delete pod amicontained\npod \"amicontained\" deleted\n```", "```\n$ kubectl apply -f amicontained-pod-securitycontext.yaml\npod/amicontained created\n```", "```\n$ kubectl logs amicontained\nContainer Runtime: kube\nHas Namespaces:\n\tpid: true\n\tuser: false\nAppArmor Profile: docker-default (enforce)\nCapabilities:\n\tBOUNDING -> chown dac_override fowner fsetid kill setgid setuid setpcap\n\tnet_raw sys_chroot sys_time mknod audit_write setfcap\nSeccomp: filtering\nBlocked Syscalls (67):\n\tSYSLOG SETUID SETGID SETPGID SETSID SETREUID SETREGID SETGROUPS\n\tSETRESUID SETRESGID USELIB USTAT SYSFS VHANGUP PIVOT_ROOT_SYSCTL ACCT\n\tSETTIMEOFDAY MOUNT UMOUNT2 SWAPON SWAPOFF REBOOT SETHOSTNAME\n\tSETDOMAINNAME IOPL IOPERM CREATE_MODULE INIT_MODULE DELETE_MODULE\n\tGET_KERNEL_SYMS QUERY_MODULE QUOTACTL NFSSERVCTL GETPMSG PUTPMSG\n\tAFS_SYSCALL TUXCALL SECURITY LOOKUP_DCOOKIE VSERVER MBIND SET_MEMPOLICY\n\tGET_MEMPOLICY KEXEC_LOAD ADD_KEY REQUEST_KEY KEYCTL MIGRATE_PAGES\n\tFUTIMESAT UNSHARE MOVE_PAGES PERF_EVENT_OPEN FANOTIFY_INIT\n\tNAME_TO_HANDLE_AT OPEN_BY_HANDLE_AT SETNS PROCESS_VM_READV\n\tPROCESS_VM_WRITEV KCMP FINIT_MODULE KEXEC_FILE_LOAD BPF USERFAULTFD\n\tPKEY_MPROTECT PKEY_ALLOC PKEY_FREE\nLooking for Docker.sock\n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: baseline-ns\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/enforce-version: v1.22\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/audit-version: v1.22\n    pod-security.kubernetes.io/warn: restricted\n    pod-security.kubernetes.io/warn-version: v1.22\n```", "```\n$ kubectl label --dry-run=server --overwrite ns \\\n  --all pod-security.kubernetes.io/enforce=baseline\nWarning: kuard: privileged\nnamespace/default labeled\nnamespace/kube-node-lease labeled\nnamespace/kube-public labeled\nWarning: kube-proxy-vxjwb: host namespaces, hostPath volumes, privileged\nWarning: kube-proxy-zxqzz: host namespaces, hostPath volumes, privileged\nWarning: kube-apiserver-kind-control-plane: host namespaces, hostPath volumes\nWarning: etcd-kind-control-plane: host namespaces, hostPath volumes\nWarning: kube-controller-manager-kind-control-plane: host namespaces, ...\nWarning: kube-scheduler-kind-control-plane: host namespaces, hostPath volumes\nnamespace/kube-system labeled\nnamespace/local-path-storage labeled\n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: baseline-ns\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/enforce-version: v1.22\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/audit-version: v1.22\n    pod-security.kubernetes.io/warn: restricted\n    pod-security.kubernetes.io/warn-version: v1.22\n```", "```\n$ kubectl apply -f baseline-ns.yaml\nnamespace/baseline-ns created\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kuard\n  labels:\n    app: kuard\nspec:\n  containers:\n    - image: gcr.io/kuar-demo/kuard-amd64:blue\n      name: kuard\n      ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```\n$ kubectl apply -f kuard-pod.yaml --namespace baseline-ns\nWarning: would violate \"v1.22\" version of \"restricted\" PodSecurity profile:\nallowPrivilegeEscalation != false (container \"kuard\" must set\nsecurityContext.allowPrivilegeEscalation=false), unrestricted capabilities\n(container \"kuard\" must set securityContext.capabilities.drop=[\"ALL\"]),\nrunAsNonRoot != true (pod or container \"kuard\" must set securityContext.\nrunAsNonRoot=true), seccompProfile (pod or container \"kuard\" must set\nsecurityContext.seccompProfile.type to \"RuntimeDefault\" or \"Localhost\")\npod/kuard created\n```", "```\n{\"kind\":\"Event\",\"apiVersion\":\"audit.k8s.io/v1\",\"level\":\"Metadata\",\"auditID\":\"...\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: default\nautomountServiceAccountToken: false\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kuard\n  labels:\n    app: kuard\nspec:\n  runtimeClassName: firecracker\n  containers:\n    - image: gcr.io/kuar-demo/kuard-amd64:blue\n      name: kuard\n      ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n```", "```\n$ kubectl create ns kuard-networkpolicy\nnamespace/kuard-networkpolicy created\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kuard\n  labels:\n    app: kuard\nspec:\n  containers:\n    - image: gcr.io/kuar-demo/kuard-amd64:blue\n      name: kuard\n      ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```\n$ kubectl apply -f kuard-pod.yaml \\\n  --namespace kuard-networkpolicy\npod/kuard created\n```", "```\n$ kubectl expose pod kuard --port=80 --target-port=8080 \\\n  --namespace kuard-networkpolicy\npod/kuard created\n```", "```\n$ kubectl run test-source --rm -ti --image busybox /bin/sh \\\n  --namespace kuard-networkpolicy\nIf you don't see a command prompt, try pressing enter.\n/ # wget -q kuard -O -\n<!doctype html>\n\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n\n  <title><KUAR Demo></title>\n...\n\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n```", "```\n$ kubectl apply -f networkpolicy-default-deny.yaml \\\n  --namespace kuard-networkpolicy\nnetworkpolicy.networking.k8s.io/default-deny-ingress created\n```", "```\n$ kubectl run test-source --rm -ti --image busybox /bin/sh \\\n  --namespace kuard-networkpolicy\nIf you don't see a command prompt, try pressing enter.\n/ # wget -q --timeout=5 kuard -O -\nwget: download timed out\n\n```", "```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: access-kuard\nspec:\n  podSelector:\n    matchLabels:\n      app: kuard\n  ingress:\n    - from:\n      - podSelector:\n          matchLabels:\n            run: test-source\n```", "```\n$ kubectl apply \\\n  -f code/chapter-security/networkpolicy-kuard-allow-test-source.yaml \\\n  --namespace kuard-networkpolicy\nnetworkpolicy.networking.k8s.io/access-kuard created\n```", "```\n$ kubectl run test-source --rm -ti --image busybox /bin/sh \\\n  --namespace kuard-networkpolicy\nIf you don't see a command prompt, try pressing enter.\n/ # wget -q kuard -O -\n<!doctype html>\n\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n\n  <title><KUAR Demo></title>\n...\n\n```", "```\n$ kubectl delete namespace kuard-networkpolicy\nnamespace \"kuard-networkpolicy\" deleted\n```", "```\n$ kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench...\njob.batch/kube-bench created\n```", "```\n$ kubectl logs job/kube-bench\n[INFO] 4 Worker Node Security Configuration\n[INFO] 4.1 Worker Node Configuration Files\n[PASS] 4.1.1 Ensure that the kubelet service file permissions are set to 644...\n[PASS] 4.1.2 Ensure that the kubelet service file ownership is set to root  ...\n[PASS] 4.1.3 If proxy kubeconfig file exists ensure permissions are set to  ...\n[PASS] 4.1.4 Ensure that the proxy kubeconfig file ownership is set to root ...\n[PASS] 4.1.5 Ensure that the --kubeconfig kubelet.conf file permissions are ...\n[PASS] 4.1.6 Ensure that the --kubeconfig kubelet.conf file ownership is set...\n[PASS] 4.1.7 Ensure that the certificate authorities file permissions are   ...\n[PASS] 4.1.8 Ensure that the client certificate authorities file ownership  ...\n[PASS] 4.1.9 Ensure that the kubelet --config configuration file has permiss...\n[PASS] 4.1.10 Ensure that the kubelet --config configuration file ownership ...\n[INFO] 4.2 Kubelet\n[PASS] 4.2.1 Ensure that the anonymous-auth argument is set to false (Automated)\n[PASS] 4.2.2 Ensure that the --authorization-mode argument is not set to    ...\n[PASS] 4.2.3 Ensure that the --client-ca-file argument is set as appropriate...\n[PASS] 4.2.4 Ensure that the --read-only-port argument is set to 0 (Manual)\n[PASS] 4.2.5 Ensure that the --streaming-connection-idle-timeout argument is...\n[FAIL] 4.2.6 Ensure that the --protect-kernel-defaults argument is set to   ...\n[PASS] 4.2.7 Ensure that the --make-iptables-util-chains argument is set to ...\n[PASS] 4.2.8 Ensure that the --hostname-override argument is not set (Manual)\n[WARN] 4.2.9 Ensure that the --event-qps argument is set to 0 or a level    ...\n[WARN] 4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arg...\n[PASS] 4.2.11 Ensure that the --rotate-certificates argument is not set to  ...\n[PASS] 4.2.12 Verify that the RotateKubeletServerCertificate argument is set...\n[WARN] 4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic...\n\n== Remediations node ==\n4.2.6 If using a Kubelet config file, edit the file to set protectKernel...\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\n4.2.9 If using a Kubelet config file, edit the file to set eventRecordQPS...\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n...\n\n```"]