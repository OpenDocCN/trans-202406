["```\ncommon/\n  Avatar.js\n  Avatar.css\n  ErrorUtils.js\n  ErrorUtils.test.js\nproduct/\n  index.js\n  product.css\n  price.js\n  product.test.js\ncheckout/\n  index.js\n  checkout.css\n  checkout.test.js\n```", "```\ncss/\n  global.css\n  checkout.css\n  product.css\nlib/\n  date.js\n  currency.js\n  gtm.js\npages/\n  product.js\n  productlist.js\n  checkout.js\n```", "```\ncss/\n  global.css\ncomponents/\n  User/\n    profile.js\n    profile.test.js\n    avatar.js\n  date.js\n  currency.js\n  gtm.js\n  errorUtils.js\ndomain/\n  product/\n    product.js\n    product.css\n    product.test.js\n  checkout/\n    checkout.js\n    checkout.css\n    checkout.test.js\n```", "```\n    domain/\n        product.js\n        product.css\n        product.test.js\n        checkout.js\n        checkout.css\n        checkout.test.js\n```", "```\n    domain/\n        product/\n            productType/\n                features.js\n                features.css\n                size.js\n            price/\n                listprice.js\n                discount.js\n```", "```\n/src\n    index.tsx: Entry point file that renders the React component tree\n    /app\n        store.ts: store setup\n        rootReducer.ts: root reducer (optional)\n        App.tsx: root React component\n    /common: hooks, generic components, utils, etc\n    /features: contains all \"feature folders\"\n    /todos: a single feature folder\n        todosSlice.ts: Redux reducer logic and associated actions\n        Todos.tsx: a React component\n```", "```\n/src\n    /components\n        /component1\n            index.js\n            styled.js\n\n    /containers\n        /container1\n```", "```\n/components\n    /productList\n        index.js\n        test.js\n        style.css\n        hooks.js\n\n/hooks\n    /useClickOutside\n      index.js\n    /useData\n      index.js\n```", "```\n/src/components/button/\n    index.js\n    style.js\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  //...\n module: {\n   rules: [\n     {\n       test: /\\.js$/,\n       include: path.resolve(__dirname, 'src'),\n       loader: 'babel-loader',\n      },\n    ],\n  },\n};\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n       test: /\\.css$/,\n       include: [\n          // Include paths relative to the current directory starting with\n          // `app/styles` e.g. `app/styles.css`, `app/styles/styles.css`,\n          // `app/stylesheet.css`\n          path.resolve(__dirname, 'app/styles'),\n\n         // add an extra slash to only include the content of the directory\n         // `vendor/styles/`\n         path.join(__dirname, 'vendor/styles/'),\n        ],\n      },\n    ],\n  },\n};\n```", "```\n--- public/\n  Favicon.ico\n  images/\n--- common/\n    components/\n      datePicker/\n        index.js\n        style.js\n    hooks/\n    utils/\n    styles/\n--- modules/\n    auth/\n      auth.js\n      auth.test.js\n    product/\n      product.js\n      product.test.js\n--- pages/\n    _app.js\n    _document.js\n    index.js\n        /products\n      [id].js\n```", "```\nyarn create next-app --example blog my-blog\n```"]