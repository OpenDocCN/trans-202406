["```\nsetVisibleError('Cannot do that thing', errorObject)\n```", "```\nimport React from 'react'\n\nconst ErrorHandlerContext = React.createContext(() => {})\n\nexport default ErrorHandlerContext\n```", "```\nimport ErrorHandlerContext from './ErrorHandlerContext'\n\nlet setError = () => {}\n\nconst ErrorHandlerProvider = (props) => {\n  if (props.callback) {\n    setError = props.callback\n  }\n\n  return (\n    <ErrorHandlerContext.Provider value={setError}>\n      {props.children}\n    </ErrorHandlerContext.Provider>\n  )\n}\n\nexport default ErrorHandlerProvider\n```", "```\nimport { useCallback, useState } from 'react'\nimport ErrorHandlerProvider from './ErrorHandlerProvider'\nimport ErrorDialog from './ErrorDialog'\n\nconst ErrorContainer = (props) => {\n  const [error, setError] = useState()\n  const [errorTitle, setErrorTitle] = useState()\n  const [action, setAction] = useState()\n\n  if (error) {\n    console.error(\n      'An error has been thrown',\n      errorTitle,\n      JSON.stringify(error)\n    )\n  }\n\n  const callback = useCallback((title, err, action) => {\n    console.error('ERROR RAISED ')\n    console.error('Error title: ', title)\n    console.error('Error content', JSON.stringify(err))\n    setError(err)\n    setErrorTitle(title)\n    setAction(action)\n  }, [])\n  return (\n    <ErrorHandlerProvider callback={callback}>\n      {props.children}\n\n      {error && (\n        <ErrorDialog\n          title={errorTitle}\n          onClose={() => {\n            setError(null)\n            setErrorTitle('')\n          }}\n          action={action}\n          error={error}\n        />\n      )}\n    </ErrorHandlerProvider>\n  )\n}\n\nexport default ErrorContainer\n```", "```\nimport './App.css'\nimport ErrorContainer from './ErrorContainer'\nimport ClockIn from './ClockIn'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ErrorContainer>\n        <ClockIn />\n      </ErrorContainer>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport ErrorHandlerContext from './ErrorHandlerContext'\nimport { useContext } from 'react'\n\nconst useErrorHandler = () => useContext(ErrorHandlerContext)\n\nexport default useErrorHandler\n```", "```\nimport useErrorHandler from './useErrorHandler'\nimport axios from 'axios'\n\nconst ClockIn = () => {\n  const setVisibleError = useErrorHandler()\n\n  const doClockIn = async () => {\n    try {\n      await axios.put('/clockTime')\n    } catch (err) {\n      setVisibleError('Unable to record work start time', err)\n    }\n  }\n\n  return (\n    <>\n      <h1>Click Button to Record Start Time</h1>\n      <button onClick={doClockIn}>Start work</button>\n    </>\n  )\n}\n\nexport default ClockIn\n```", "```\nimport { Popper } from '@material-ui/core'\nimport './HelpBubble.css'\n\nconst HelpBubble = (props) => {\n  const element = props.forElement\n    ? document.querySelector(props.forElement)\n    : null\n\n  return element ? (\n    <Popper\n      className=\"HelpBubble-container\"\n      open={props.open}\n      anchorEl={element}\n      placement={props.placement || 'bottom-start'}\n    >\n      <div className=\"HelpBubble-close\" onClick={props.onClose}>\n        Close [X]\n      </div>\n      {props.content}\n      <div className=\"HelpBubble-controls\">\n        {props.previousLabel ? (\n          <div\n            className=\"HelpBubble-control HelpBubble-previous\"\n            onClick={props.onPrevious}\n          >\n            &lt; {props.previousLabel}\n          </div>\n        ) : (\n          <div>&nbsp;</div>\n        )}\n        {props.nextLabel ? (\n          <div\n            className=\"HelpBubble-control HelpBubble-next\"\n            onClick={props.onNext}\n          >\n            {props.nextLabel} &gt;\n          </div>\n        ) : (\n          <div>&nbsp;</div>\n        )}\n      </div>\n    </Popper>\n  ) : null\n}\n\nexport default HelpBubble\n```", "```\nimport { useEffect, useState } from 'react'\n\nimport HelpBubble from './HelpBubble'\n\nfunction isVisible(e) {\n  return !!(\n    e.offsetWidth ||\n    e.offsetHeight ||\n    e.getClientRects().length\n  )\n}\n\nconst HelpSequence = (props) => {\n  const [position, setPosition] = useState(0)\n  const [sequence, setSequence] = useState()\n\n  useEffect(() => {\n    if (props.sequence) {\n      const filter = props.sequence.filter((i) => {\n        if (!i.forElement) {\n          return false\n        }\n        const element = document.querySelector(i.forElement)\n        if (!element) {\n          return false\n        }\n        return isVisible(element)\n      })\n      setSequence(filter)\n    } else {\n      setSequence(null)\n    }\n  }, [props.sequence, props.open])\n\n  const data = sequence && sequence[position]\n\n  useEffect(() => {\n    setPosition(0)\n  }, [props.open])\n\n  const onNext = () =>\n    setPosition((p) => {\n      if (p === sequence.length - 1) {\n        props.onClose && props.onClose()\n      }\n      return p + 1\n    })\n\n  const onPrevious = () =>\n    setPosition((p) => {\n      if (p === 0) {\n        props.onClose && props.onClose()\n      }\n      return p - 1\n    })\n\n  return (\n    <div className=\"HelpSequence-container\">\n      {data && (\n        <HelpBubble\n          open={props.open}\n          forElement={data.forElement}\n          placement={data.placement}\n          onClose={props.onClose}\n          previousLabel={position > 0 && 'Previous'}\n          nextLabel={\n            position < sequence.length - 1 ? 'Next' : 'Finish'\n          }\n          onPrevious={onPrevious}\n          onNext={onNext}\n          content={data.text}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default HelpSequence\n```", "```\n[\n    {forElement: \"p\",\n        text: \"This is some introductory text telling you how to start\"},\n    {forElement: \".App-link\", text: \"This will show you how to use React\"},\n    {forElement: \".App-nowhere\", text: \"This help text will never appear\"},\n]\n```", "```\nimport { useState } from 'react'\nimport logo from './logo.svg'\nimport HelpSequence from './HelpSequence'\nimport './App.css'\n\nfunction App() {\n  const [showHelp, setShowHelp] = useState(false)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <button onClick={() => setShowHelp(true)}>Show help</button>\n      <HelpSequence\n        sequence={[\n          {\n            forElement: 'p',\n            text: 'This is some introductory text telling you how to start',\n          },\n          {\n            forElement: '.App-link',\n            text: 'This will show you how to use React',\n          },\n          {\n            forElement: '.App-nowhere',\n            text: 'This help text will never appear',\n          },\n        ]}\n        open={showHelp}\n        onClose={() => setShowHelp(false)}\n      />\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport deletionReducer from './deletionReducer'\n\ndescribe('deletionReducer', () => {\n  it('should show the login dialog if we are not logged in', () => {\n    const actual = deletionReducer({}, { type: 'START_DELETION' })\n    expect(actual.showLogin).toBe(true)\n    expect(actual.message).toBe('')\n    expect(actual.deleteButtonDisabled).toBe(true)\n    expect(actual.loginError).toBe('')\n    expect(actual.showConfirmation).toBe(false)\n  })\n})\n```", "```\nfunction deletionReducer(state, action) {\n  switch (action.type) {\n    case 'START_DELETION':\n      return {\n        ...state,\n        showLogin: true,\n        message: '',\n        deleteButtonDisabled: true,\n        loginError: '',\n        showConfirmation: false,\n      }\n    default:\n      return null // Or anything\n  }\n}\n```", "```\nfunction deletionReducer(state, action) {\n  switch (action.type) {\n    case 'START_DELETION':\n      return {\n        ...state,\n        showLogin: !state.loggedIn,\n        message: '',\n        deleteButtonDisabled: true,\n        loginError: '',\n        showConfirmation: !!state.loggedIn,\n      }\n    case 'CANCEL_DELETION':\n      return {\n        ...state,\n        showLogin: false,\n        showConfirmation: false,\n        showResult: false,\n        message: 'Deletion canceled',\n        deleteButtonDisabled: false,\n      }\n    case 'LOGIN':\n      const passwordCorrect = action.payload === 'swordfish'\n      return {\n        ...state,\n        showLogin: !passwordCorrect,\n        showConfirmation: passwordCorrect,\n        loginError: passwordCorrect ? '' : 'Invalid password',\n        loggedIn: true,\n      }\n    case 'CONFIRM_DELETION':\n      return {\n        ...state,\n        showConfirmation: false,\n        showResult: true,\n        message: 'Widget deleted',\n      }\n    case 'FINISH':\n      return {\n        ...state,\n        showLogin: false,\n        showConfirmation: false,\n        showResult: false,\n        deleteButtonDisabled: false,\n      }\n    default:\n      throw new Error('Unknown action: ' + action.type)\n  }\n}\n\nexport default deletionReducer\n```", "```\nimport { useReducer, useState } from 'react'\nimport './App.css'\nimport deletionReducer from './deletionReducer'\n\nfunction App() {\n  const [state, dispatch] = useReducer(deletionReducer, {})\n  const [password, setPassword] = useState()\n\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() => {\n          dispatch({ type: 'START_DELETION' })\n        }}\n        disabled={state.deleteButtonDisabled}\n      >\n        Delete Widget!\n      </button>\n      <div className=\"App-message\">{state.message}</div>\n      {state.showLogin && (\n        <div className=\"App-dialog\">\n          <p>Enter your password</p>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(evt) => setPassword(evt.target.value)}\n          />\n          <button\n            onClick={() =>\n              dispatch({ type: 'LOGIN', payload: password })\n            }\n          >\n            Login\n          </button>\n          <button\n            onClick={() => dispatch({ type: 'CANCEL_DELETION' })}\n          >\n            Cancel\n          </button>\n          <div className=\"App-error\">{state.loginError}</div>\n        </div>\n      )}\n      {state.showConfirmation && (\n        <div className=\"App-dialog\">\n          <p>Are you sure you want to delete the widget?</p>\n          <button\n            onClick={() =>\n              dispatch({\n                type: 'CONFIRM_DELETION',\n              })\n            }\n          >\n            Yes\n          </button>\n          <button\n            onClick={() =>\n              dispatch({\n                type: 'CANCEL_DELETION',\n              })\n            }\n          >\n            No\n          </button>\n        </div>\n      )}\n      {state.showResult && (\n        <div className=\"App-dialog\">\n          <p>The widget was deleted</p>\n          <button\n            onClick={() =>\n              dispatch({\n                type: 'FINISH',\n              })\n            }\n          >\n            Done\n          </button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport { useEffect } from 'react'\n\nconst useKeyListener = (callback) => {\n  useEffect(() => {\n    const listener = (e) => {\n      e = e || window.event\n      const tagName = e.target.localName || e.target.tagName\n      // Only accept key-events that originated at the body level\n      // to avoid key-strokes in e.g. text-fields being included\n      if (tagName.toUpperCase() === 'BODY') {\n        callback(e)\n      }\n    }\n    document.addEventListener('keydown', listener, true)\n    return () => {\n      document.removeEventListener('keydown', listener, true)\n    }\n  }, [callback])\n}\n\nexport default useKeyListener\n```", "```\nimport { useCallback, useState } from 'react'\nimport './App.css'\nimport useKeyListener from './useKeyListener'\n\nconst RIGHT_ARROW = 39\nconst LEFT_ARROW = 37\nconst ESCAPE = 27\n\nfunction App() {\n  const [angle, setAngle] = useState(0)\n  const [lastKey, setLastKey] = useState('')\n\n  let onKeyDown = useCallback(\n    (evt) => {\n      if (evt.keyCode === LEFT_ARROW) {\n        setAngle((c) => Math.max(-360, c - 10))\n        setLastKey('Left')\n      } else if (evt.keyCode === RIGHT_ARROW) {\n        setAngle((c) => Math.min(360, c + 10))\n        setLastKey('Right')\n      } else if (evt.keyCode === ESCAPE) {\n        setAngle(0)\n        setLastKey('Escape')\n      }\n    },\n    [setAngle]\n  )\n  useKeyListener(onKeyDown)\n\n  return (\n    <div className=\"App\">\n      <p>\n        Angle: {angle} Last key: {lastKey}\n      </p>\n      <svg\n        width=\"400px\"\n        height=\"400px\"\n        title=\"arrow\"\n        fill=\"none\"\n        strokeWidth=\"10\"\n        stroke=\"black\"\n        style={{\n          transform: `rotate(${angle}deg)`,\n        }}\n      >\n        <polyline points=\"100,200 200,0 300,200\" />\n        <polyline points=\"200,0 200,400\" />\n      </svg>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport { useState } from 'react'\nimport './Forum.css'\n\nconst Forum = () => {\n  const [text, setText] = useState('')\n  const [messages, setMessages] = useState([])\n\n  return (\n    <section className=\"Forum\">\n      <textarea\n        cols={80}\n        rows={20}\n        value={text}\n        onChange={(evt) => setText(evt.target.value)}\n      />\n      <button\n        onClick={() => {\n          setMessages((msgs) => [\n            {\n              body: text,\n              timestamp: new Date().toISOString(),\n            },\n            ...msgs,\n          ])\n          setText('')\n        }}\n      >\n        Post\n      </button>\n      {messages.map((msg) => {\n        return (\n          <dl>\n            <dt>{msg.timestamp}</dt>\n            <dd>{msg.body}</dd>\n          </dl>\n        )\n      })}\n    </section>\n  )\n}\n\nexport default Forum\n```", "```\n$ npm install @uiw/react-md-editor\n```", "```\nimport { useState } from 'react'\nimport MDEditor from '@uiw/react-md-editor'\n\nconst MarkdownForum = () => {\n  const [text, setText] = useState('')\n  const [messages, setMessages] = useState([])\n\n  return (\n    <section className=\"Forum\">\n      <MDEditor height={300} value={text} onChange={setText} />\n      <button\n        onClick={() => {\n          setMessages((msgs) => [\n            {\n              body: text,\n              timestamp: new Date().toISOString(),\n            },\n            ...msgs,\n          ])\n          setText('')\n        }}\n      >\n        Post\n      </button>\n      {messages.map((msg) => {\n        return (\n          <dl>\n            <dt>{msg.timestamp}</dt>\n            <dd>\n              <MDEditor.Markdown source={msg.body} />\n            </dd>\n          </dl>\n        )\n      })}\n    </section>\n  )\n}\n\nexport default MarkdownForum\n```", "```\n.InfoPanel-details {\n    height: 350px;\n    transition: height 0.5s;\n}\n```", "```\n.InfoPanel-details {\n    height: 350px;\n    transition: height 0.5s;\n}\n.InfoPanel-details.InfoPanel-details-closed {\n    height: 0;\n}\n```", "```\nimport { useState } from 'react'\n\nimport './InfoPanel.css'\n\nconst InfoPanel = ({ title, children }) => {\n  const [open, setOpen] = useState(false)\n\n  return (\n    <section className=\"InfoPanel\">\n      <h1>\n        {title}\n        <button onClick={() => setOpen((v) => !v)}>\n          {open ? '^' : 'v'}\n        </button>\n      </h1>\n      <div\n        className={`InfoPanel-details ${\n          open ? '' : 'InfoPanel-details-closed'\n        }`}\n      >\n        {children}\n      </div>\n    </section>\n  )\n}\n\nexport default InfoPanel\n```", "```\n$ npm install radium\n$ npm install react-animations\n```", "```\nimport { pulse, zoomOut, shake, merge } from 'react-animations'\nimport Radium, { StyleRoot } from 'radium'\n\nconst styles = {\n  created: {\n    animation: 'x 0.5s',\n    animationName: Radium.keyframes(pulse, 'pulse'),\n  },\n  deleted: {\n    animation: 'x 0.5s',\n    animationName: Radium.keyframes(merge(zoomOut, shake), 'zoomOut'),\n  },\n}\n```", "```\nimport { useState } from 'react'\nimport { pulse, zoomOut, shake, merge } from 'react-animations'\nimport Radium, { StyleRoot } from 'radium'\n\nimport './App.css'\n\nconst styles = {\n  created: {\n    animation: 'x 0.5s',\n    animationName: Radium.keyframes(pulse, 'pulse'),\n  },\n  deleted: {\n    animation: 'x 0.5s',\n    animationName: Radium.keyframes(merge(zoomOut, shake), 'zoomOut'),\n  },\n}\n\nfunction getStyleForItem(item) {\n  return item.deleting\n    ? styles.deleted\n    : item.creating\n    ? styles.created\n    : null\n}\n\nfunction App() {\n  const [data, setData] = useState([])\n\n  let deleteItem = (i) =>\n    setData((d) => {\n      const result = [...d]\n      result[i].deleting = true\n      return result\n    })\n  let createItem = () => {\n    setData((d) => [\n      ...d,\n      {\n        url: `https://picsum.photos/id/${d.length * 3}/200`,\n        creating: true,\n      },\n    ])\n  }\n  let completeAnimation = (d, i) => {\n    if (d.deleting) {\n      setData((d) => {\n        const result = [...d]\n        result.splice(i, 1)\n        return result\n      })\n    } else if (d.creating) {\n      setData((d) => {\n        const result = [...d]\n        result[i].creating = false\n        return result\n      })\n    }\n  }\n  return (\n    <div className=\"App\">\n      <StyleRoot>\n        <p>\n          Images from&nbsp;\n          <a href=\"https://picsum.photos/\">Lorem Picsum</a>\n        </p>\n        <button onClick={createItem}>Add</button>\n        {data.map((d, i) => (\n          <div\n            style={getStyleForItem(d)}\n            onAnimationEnd={() => completeAnimation(d, i)}\n          >\n            <img\n              id={`image${i}`}\n              src={d.url}\n              width={200}\n              height={200}\n              alt=\"Random\"\n              title=\"Click to delete\"\n              onClick={() => deleteItem(i)}\n            />\n          </div>\n        ))}\n      </StyleRoot>\n    </div>\n  )\n}\n\nexport default App\n```", "```\n$ npm install rc-tween-one\n```", "```\n<TweenOne component='g' animation={...details here}>\n    <rect width=\"2\" height=\"6\" x=\"3\" y=\"-3\" fill=\"white\"/>\n</TweenOne>\n```", "```\n<g style=\"transform: translate(881.555px, 489.614px) rotate(136.174deg);\">\n  <rect width=\"2\" height=\"6\" x=\"3\" y=\"-3\" fill=\"white\"/>\n</g>\n```", "```\n<TweenOne component='g' animation={...details here} onUpdate={info=>{...}}>\n    <rect width=\"2\" height=\"6\" x=\"3\" y=\"-3\" fill=\"white\"/>\n</TweenOne>\n```", "```\nexport default 'm 723.72379,404.71306 ...  -8.30851,-3.00521 z'\n```", "```\nimport path from './track'\n```", "```\n<svg height=\"600\" width=\"1000\" viewBox=\"0 0 1000 600\"\n     style={{backgroundColor: 'black'}}>\n  <path stroke='#444' strokeWidth={10}\n        fill='none' d={path}/>\n</svg>\n```", "```\n<svg height=\"600\" width=\"1000\" viewBox=\"0 0 1000 600\"\n     style={{backgroundColor: 'black'}}>\n  <path stroke='#444' strokeWidth={10}\n        fill='none' d={path}/>\n  <rect width={24} height={16} x={-12} y={-8} fill='red'/>\n  <rect width={2} height={6} x={3} y={-3} fill='white'/>\n</svg>\n```", "```\nimport PathPlugin from 'rc-tween-one/lib/plugin/PathPlugin'\n\nTweenOne.plugins.push(PathPlugin)\n```", "```\nimport path from './track'\n\nconst followAnimation = {\n  path: { x: path, y: path, rotate: path },\n  repeat: -1,\n}\n```", "```\n<svg height=\"600\" width=\"1000\" viewBox=\"0 0 1000 600\"\n     style={{backgroundColor: 'black'}}>\n  <path stroke='#444' strokeWidth={10}\n        fill='none' d={path}/>\n  <TweenOne component='g' animation={{...followAnimation, duration: 16000}}>\n    <rect width={24} height={16} x={-12} y={-8} fill='red'/>\n    <rect width={2} height={6} x={3} y={-3} fill='white'/>\n  </TweenOne>\n</svg>\n```", "```\nimport { useState } from 'react'\nimport TweenOne from 'rc-tween-one'\nimport Details from './Details'\nimport path from './track'\nimport PathPlugin from 'rc-tween-one/lib/plugin/PathPlugin'\nimport grid from './grid.svg'\n\nimport './App.css'\n\nTweenOne.plugins.push(PathPlugin)\n\nconst followAnimation = {\n  path: { x: path, y: path, rotate: path },\n  repeat: -1,\n}\n\nfunction App() {\n  const [redTelemetry, setRedTelemetry] = useState({\n    dist: 0,\n    speed: 0,\n    lap: 0,\n  })\n  const [blueTelemetry, setBlueTelemetry] = useState({\n    dist: 0,\n    speed: 0,\n    lap: 0,\n  })\n\n  const trackVehicle = (info, telemetry) => ({\n    dist: info.ratio,\n    speed: info.ratio - telemetry.dist,\n    lap:\n      info.ratio < telemetry.dist ? telemetry.lap + 1 : telemetry.lap,\n  })\n\n  return (\n    <div className=\"App\">\n      <h1>Nürburgring</h1>\n      <Details\n        redTelemetry={redTelemetry}\n        blueTelemetry={blueTelemetry}\n      />\n      <svg\n        height=\"600\"\n        width=\"1000\"\n        viewBox=\"0 0 1000 600\"\n        style={{ backgroundColor: 'black' }}\n      >\n        <image href={grid} width={1000} height={600} />\n        <path stroke=\"#444\" strokeWidth={10} fill=\"none\" d={path} />\n        <path\n          stroke=\"#c0c0c0\"\n          strokeWidth={2}\n          strokeDasharray=\"3 4\"\n          fill=\"none\"\n          d={path}\n        />\n\n        <TweenOne\n          component=\"g\"\n          animation={{\n            ...followAnimation,\n            duration: 16000,\n            onUpdate: (info) =>\n              setRedTelemetry((telemetry) =>\n                trackVehicle(info, telemetry)\n              ),\n          }}\n        >\n          <rect width={24} height={16} x={-12} y={-8} fill=\"red\" />\n          <rect width={2} height={6} x={3} y={-3} fill=\"white\" />\n        </TweenOne>\n\n        <TweenOne\n          component=\"g\"\n          animation={{\n            ...followAnimation,\n            delay: 3000,\n            duration: 15500,\n            onUpdate: (info) =>\n              setBlueTelemetry((telemetry) =>\n                trackVehicle(info, telemetry)\n              ),\n          }}\n        >\n          <rect width={24} height={16} x={-12} y={-8} fill=\"blue\" />\n          <rect width={2} height={6} x={3} y={-3} fill=\"white\" />\n        </TweenOne>\n      </svg>\n    </div>\n  )\n}\n\nexport default App\n```"]