- en: Chapter 6\. Fields and Filters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：字段和过滤器
- en: 'It’s finally time to take all the theory you learned in the previous chapters
    and start putting it into practice. In this chapter you will learn about Falco
    filters: what they are, how they work, and how to use them.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 终于是时候将你在前几章学到的所有理论付诸实践了。在本章中，你将学习Falco过滤器的相关知识：它们是什么，如何工作以及如何使用它们。
- en: Filters are at the core of Falco. They are also a powerful investigation instrument
    that can be used in several other tools, such as sysdig. As a consequence, we
    expect that you will come back and consult this chapter often, even after finishing
    the book—so we’ve structured it to be used as a reference. For example, it contains
    tables with all of the operators and data types the filtering language provides,
    designed for quick consultation, as well as a well-documented list of Falco’s
    most useful fields. This chapter’s contents will be handy pretty much every time
    you write a Falco rule, so make sure to bookmark it!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是Falco的核心。它们也是一个强大的调查工具，可以在多种其他工具中使用，比如sysdig。因此，我们预期你即使在完成本书后，也会经常回来查阅本章内容——因此我们设计它可以用作参考。例如，它包含了过滤语言提供的所有运算符和数据类型的表格，设计用于快速查询，以及Falco最有用字段的详细文档列表。本章的内容几乎每次你编写Falco规则时都会派上用场，因此确保将其加入书签！
- en: What Is a Filter?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是过滤器？
- en: 'Let’s start with a semiformal definition:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个半正式的定义开始：
- en: A *filter* in Falco is a condition containing a sequence of comparisons that
    are connected by Boolean operators. Each of the comparisons evaluates a field,
    which is extracted from an input event, against a constant, using a relational
    operator. Comparisons in filters are evaluated left to right, but parentheses
    can be used to define precedence. A filter is applied to an input event and returns
    a Boolean result indicating if the event matches the filter.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Falco中的*过滤器*是一个包含一系列比较的条件，这些比较由布尔运算符连接。每个比较评估从输入事件中提取的字段与一个常量之间的关系运算符。过滤器中的比较按从左到右的顺序进行评估，但可以使用括号定义优先级。过滤器应用于输入事件，并返回一个布尔结果，指示事件是否与过滤器匹配。
- en: 'Ouch. That description is extremely dry and somewhat complicated. But if we
    unpack it, with the aid of some examples, you’ll see it’s not too bad. Let’s start
    with the first sentence:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀。这个描述非常枯燥并且有些复杂。但如果我们借助一些例子来解释，你会发现并不难。让我们从第一句开始：
- en: A *filter* in Falco is a condition containing a sequence of comparisons that
    are connected by Boolean operators.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Falco中的*过滤器*是一个包含一系列比较的条件，这些比较由布尔运算符连接。
- en: 'This just means that a filter looks like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是意味着一个过滤器看起来像这样：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In other words, if you can write an `if` condition in any programming language,
    the filter syntax will look very familiar. Here’s the next sentence:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果你可以在任何编程语言中编写一个`if`条件，过滤器语法看起来会非常熟悉。接下来的句子是：
- en: Each of the comparisons evaluates a field, which is extracted from an input
    event, against a constant, using a relational operator.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个比较评估从输入事件中提取的字段与一个常量之间的关系运算符。
- en: 'This tells us that Falco’s filtering syntax is based on the concept of *fields*,
    which we will describe in detail later in this chapter. Field names have a dotted
    syntax and appear on the left side of each comparison. On the right side is a
    constant value that will be compared against the field. Here’s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，Falco的过滤语法基于*字段*的概念，我们将在本章后面详细描述。字段名称采用点语法，并出现在每个比较的左侧。右侧是将与字段进行比较的常量值。以下是一个示例：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Moving on:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 继续下一个：
- en: Comparisons in filters are evaluated left to right, but parentheses can be used
    to define precedence.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 过滤器中的比较按从左到右的顺序进行评估，但可以使用括号定义优先级。
- en: 'This means you can organize your filter using parentheses. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以使用括号来组织你的过滤器。例如：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Again, this works exactly the same as using parentheses inside a logical expression
    in your favorite programming language. Now for the final sentence:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这与在你喜爱的编程语言中使用逻辑表达式内部的括号完全相同。现在是最后一句：
- en: A filter is applied to an input event and returns a Boolean result indicating
    if the event matches the filter.
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 过滤器应用于输入事件，并返回一个布尔结果，指示事件是否与过滤器匹配。
- en: 'When you specify a filter in a Falco rule, the filter is applied to every input
    event. For example, if you’re using one of Falco’s drivers, filters are applied
    to every system call. The filter evaluates the system call and returns a Boolean
    value: `true` or `false`. `true` means that the event satisfies the filter (we
    say that the filter *matches* the event), while `false` means that the filter
    rejects, or drops, the event. For example, this filter:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Falco规则中指定一个过滤器时，该过滤器将应用于每个输入事件。例如，如果您使用Falco的驱动程序之一，则过滤器将应用于每个系统调用。过滤器评估系统调用并返回布尔值：`true`表示事件满足过滤器（我们说过滤器*匹配*事件），而`false`表示过滤器拒绝或丢弃事件。例如，此过滤器：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: matches (returns `true` for) every system call generated by processes called
    `emacs` or `vi`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配（返回`true`），由名为`emacs`或`vi`的进程生成的每个系统调用。
- en: That’s essentially all you need to know at a high level. Now let’s dive into
    the details.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是您需要在高层次上了解的全部。现在让我们深入了解细节。
- en: Filtering Syntax Reference
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤语法参考
- en: From a syntactical point of view, as we mentioned, writing a Falco filter is
    very similar to writing an `if` condition in any programming language, so if you
    have basic programming experience, you shouldn’t expect any major surprises. However,
    there are some areas that are specific to the type of matching you do in Falco.
    This section takes a look at the syntax in detail, giving you the full picture.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从语法角度来看，正如我们提到的，编写Falco过滤器非常类似于在任何编程语言中编写`if`条件，因此如果您具有基本的编程经验，不应该期望有任何重大的惊喜。然而，有一些区域是特定于您在Falco中进行匹配类型的。本节详细讨论了语法，为您提供了全面的图片。
- en: Relational Operators
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系运算符
- en: '[Table 6-1](#falcoapostrophes_relational_operators) provides a reference of
    all of the available relational operators, including an example for each of them.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 6-1](#falcoapostrophes_relational_operators) 提供了所有可用关系运算符的参考，包括每个运算符的示例。'
- en: Table 6-1\. Falco’s relational operators
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1\. Falco的关系运算符
- en: '| Operator | Description | Example |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `=`, `!=` | General equality/inequality operators. Can be used with all types
    of fields. | `proc.name = emacs` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `=`, `!=` | 一般的相等性/不等性运算符。可用于所有类型的字段。 | `proc.name = emacs` |'
- en: '| `<=`, `<`, `>=`, `>` | Numeric comparison operators. Can be used with numeric
    fields only. | `evt.buflen > 100` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `<=`, `<`, `>=`, `>` | 数字比较运算符。仅可用于数字字段。 | `evt.buflen > 100` |'
- en: '| `contains` | Can be used with string fields only. Performs a case-sensitive
    string search for the given constant inside the field value, and returns `true`
    if the field value contains the constant. | `fd.filename contains passwd` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `contains` | 仅可用于字符串字段。对字段值进行区分大小写的字符串搜索，如果字段值包含指定常量则返回`true`。 | `fd.filename
    包含 passwd` |'
- en: '| `icontains` | Like `contains`, but case-insensitive. | `user.name icontains
    john` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `icontains` | 类似于`contains`，但不区分大小写。 | `user.name 包含 john` |'
- en: '| `bcontains` | Like `contains`, but allows you to perform checks on binary
    buffers. | `evt.buf bcontains DEADBEEF` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `bcontains` | 类似于`contains`，但允许您在二进制缓冲区上执行检查。 | `evt.buf bcontains DEADBEEF`
    |'
- en: '| `startswith` | Can be used with string fields only. Returns `true` if the
    given constant matches the beginning of the field value. | `fd.directory startswith
    "/etc"` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `startswith` | 仅可用于字符串字段。如果指定的常量与字段值的开头匹配则返回`true`。 | `fd.directory 开始于 "/etc"`
    |'
- en: '| `bstartswith` | Like `startswith`, but allows you to perform checks on binary
    buffers. | `evt.buf bstartswith DEADBEEF` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `bstartswith` | 类似于`startswith`，但允许您在二进制缓冲区上执行检查。 | `evt.buf bstartswith
    DEADBEEF` |'
- en: '| `endswith` | Can be used with string fields only. Returns `true` if the given
    constant matches the end of the field value. | `fd.filename endswidth ".key"`
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `endswith` | 仅可用于字符串字段。如果指定的常量与字段值的结尾匹配则返回`true`。 | `fd.filename 结尾为 ".key"`
    |'
- en: '| `in` | Compares the field value to multiple constants and returns `true`
    if one or more of those constants equals the field value. Can be used with all
    fields, including numeric fields and string fields. | `proc.name in (vi, emacs)`
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `in` | 将字段值与多个常量进行比较，如果其中一个或多个常量等于字段值则返回`true`。可用于所有字段，包括数字字段和字符串字段。 | `proc.name
    在 (vi, emacs)` |'
- en: '| `intersects` | Returns `true` when a field with multiple values includes
    at least one value that matches one of the provided constants. | `ka.req.pod.volumes.hostpath
    intersects (/proc, /var/run/docker.sock)` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `intersects` | 当具有多个值的字段包含至少一个与提供的常量之一匹配的值时返回`true`。 | `ka.req.pod.volumes.hostpath
    交集 (/proc, /var/run/docker.sock)` |'
- en: '| `pmatch` | Returns `true` if one of the constants is a prefix of the field
    value. Note: `pmatch` can be used as an alternative to the `in` operator, and
    performs better with large sets of constants because it is implemented internally
    as a trie instead of multiple comparisons. | `fd.name pmatch (/var/run, /etc,
    /lib, /usr/lib)` `fd.name = /var/run/docker` succeeds because `/var/run` is a
    prefix of `/var/run/docker`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pmatch` | 如果常量之一是字段值的前缀，则返回 `true`。注意：`pmatch` 可用作 `in` 运算符的替代方案，并且在大量常数的情况下执行效果更好，因为它在内部实现为前缀树，而不是多个比较。
    | `fd.name pmatch (/var/run, /etc, /lib, /usr/lib)` `fd.name = /var/run/docker`
    成功，因为 `/var/run` 是 `/var/run/docker` 的前缀。'
- en: '`fd.name = /boot` does not succeed because no constant is a prefix of `/boot`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`fd.name = /boot` 不能成功，因为没有任何常数是 `/boot` 的前缀。'
- en: '`fd.name = /var` does not succeed because no constant is a prefix of `/var`.
    |'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`fd.name = /var` 不能成功，因为没有任何常数是 `/var` 的前缀。 |'
- en: '| `exists` | Returns `true` if the given field exists for the input event.
    | `evt.res exists` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `exists` | 如果输入事件存在给定字段，则返回 `true`。 | `evt.res exists` |'
- en: '| `glob` | Matches the given string against the field value according to Unix
    shell wildcard patterns. For more details, enter `**man 7 glob**` in your terminal.
    | `fd.name glob ''/home/*/.ssh/*''` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `glob` | 根据 Unix shell 通配符模式将给定字符串与字段值匹配。有关详细信息，请在终端中输入 `**man 7 glob**`。
    | `fd.name glob ''/home/*/.ssh/*''` |'
- en: Logical Operators
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: The logical operators that you can use in Falco filters are straightforward
    and don’t include any surprises. [Table 6-2](#falcoapostrophes_logical_operators)
    lists them and provides examples.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Falco 过滤器中使用的逻辑运算符非常直接，不包含任何意外。[表 6-2](#falcoapostrophes_logical_operators)
    列出了它们并提供了示例。
- en: Table 6-2\. Falco’s logical operators
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 6-2\. Falco 的逻辑运算符
- en: '| Operator | Example |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 示例 |'
- en: '| --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `and` | `proc.name = emacs and proc.cmdline contains myfile.txt` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `and` | `proc.name = emacs and proc.cmdline contains myfile.txt` |'
- en: '| `or` | `proc.name = emacs or proc.name = vi` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `or` | `proc.name = emacs or proc.name = vi` |'
- en: '| `not` | `not proc.name = emacs` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `not` | `not proc.name = emacs` |'
- en: Strings and Quoting
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串和引用
- en: 'String constants can be specified without quotation marks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串常量可以不使用引号指定：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Quotes can, however, be used to enclose strings that include spaces or special
    characters. Both single quotes and double quotes are accepted. For example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 引号可以用于括起包含空格或特殊字符的字符串。单引号和双引号都被接受。例如：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This means you can include quotes in strings:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以在字符串中包含引号：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fields
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字段
- en: As you can see, Falco filters are not very complicated. However, they are extremely
    flexible and powerful. This power comes from the fields you can use in filtering
    conditions. Falco gives you access to a variety of fields, each of which exposes
    a property of the input events that Falco captures. Since fields are so important,
    let’s take a look at how they work and how they are organized. Then we’ll discuss
    which ones to use and when.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Falco 过滤器并不复杂。但是，它们非常灵活和强大。这种强大来自于您可以在过滤条件中使用的字段。Falco 为您提供访问多种字段的权限，每个字段公开了
    Falco 捕获的输入事件的属性。由于字段非常重要，让我们看看它们是如何工作和组织的。然后我们将讨论何时以及使用哪些字段。
- en: Argument Fields Versus Enrichment Fields
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数字段与丰富字段
- en: Fields expose properties of input events as typed values. A field, for example,
    can be a string, like the process name, or a number, like the process ID.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 字段将输入事件的属性公开为类型化值。例如，字段可以是字符串（如进程名称）或数字（如进程 ID）。
- en: 'At the highest level, Falco offers two categories of fields. The first category
    includes the fields that are obtained by dissecting input events. System call
    arguments, like the filename for an `open` system call or the buffer argument
    for a `read` system call, are examples of such fields. You access these fields
    with the following syntax, where `*X*` is the name of the argument you want to
    access:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高级别上，Falco 提供了两类字段。第一类包括通过解析输入事件获得的字段。系统调用参数，例如 `open` 系统调用的文件名或 `read` 系统调用的缓冲区参数，都是此类字段的示例。您可以使用以下语法访问这些字段，其中
    `*X*` 是要访问的参数的名称：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'or, where `*N*` is the position of the argument:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，其中 `*N*` 是参数的位置：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To find out which arguments a specific event type supports, sysdig is your friend.
    The output line for an event in sysdig will show you all of its arguments and
    their names.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解特定事件类型支持哪些参数，请使用 sysdig。sysdig 中事件的输出行将显示所有参数及其名称。
- en: The second category consists of fields that derive from the enrichment process
    that *libsinsp* performs while capturing system calls and other events, described
    in [Chapter 5](ch05.xhtml#data_enrichment). Falco exports many fields that expose
    the content of *libsinsp*’s thread and file descriptor tables, adding rich context
    about the events received from the drivers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类别包括从*libsinsp*捕获系统调用和其他事件时执行的丰富化过程中派生的字段，详见[第五章](ch05.xhtml#data_enrichment)。Falco导出许多字段，这些字段公开了*libsinsp*的线程和文件描述符表的内容，为从驱动程序接收的事件添加了丰富的上下文。
- en: 'To help you understand how this works, let’s take the `proc.cwd` field as an
    example. For each system call that Falco captures, this field contains the current
    working directory of the process that issued the system call. This is handy if
    you want to capture all of the system calls generated by processes that are currently
    running inside a specific directory; for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您理解它是如何工作的，让我们以`proc.cwd`字段为例。对于Falco捕获的每个系统调用，此字段包含发出系统调用的进程的当前工作目录。如果您想捕获当前在特定目录内运行的所有进程生成的系统调用，这非常方便；例如：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The working directory of the process is not part of the system call, so exposing
    this field requires tracking the working directory of a process and attaching
    it to every system call that the process generates. This, in turn, involves four
    steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 进程的工作目录不是系统调用的一部分，因此要公开此字段，需要跟踪进程的工作目录，并将其附加到进程生成的每个系统调用中。这反过来涉及四个步骤：
- en: Collect the working directory when a process starts, and store it in the process’s
    entry in the thread table.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一个进程启动时，收集其工作目录，并将其存储在线程表中的进程条目中。
- en: Keep track of when the process changes its working directory (by intercepting
    and parsing the `chdir` system call), and update the thread table entry accordingly.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟踪进程何时更改其工作目录（通过拦截和解析`chdir`系统调用），并相应地更新线程表条目。
- en: Resolve the thread ID of every system call to identify the corresponding thread
    table entry.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析每个系统调用的线程ID，以识别相应的线程表条目。
- en: Return the thread table entry’s `cwd` value.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回线程表条目的`cwd`值。
- en: '*libsinsp* does all of this, which means that the `proc.cwd` field is available
    for every system call, not only for directory-related ones like `chdir`. It’s
    impressive how much hard work Falco does to expose this field to you!'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*libsinsp*做了所有这些工作，这意味着`proc.cwd`字段可用于每个系统调用，而不仅仅是像`chdir`这样与目录相关的调用。Falco为向您公开此字段所做的大量工作令人印象深刻！'
- en: 'Enrichment-based filtering is powerful because it allows you to filter system
    calls (and any other events) based on properties that are not included with the
    syscalls themselves, but are of great use for security policies. For example,
    the following filter allows you to capture the system calls that read from or
    write to */etc/passwd*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 基于丰富化的过滤非常强大，因为它允许您根据并非包含在系统调用本身中但对安全策略非常有用的属性来过滤系统调用（以及任何其他事件）。例如，以下过滤器允许您捕获读取或写入*/etc/passwd*的系统调用：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It works even if these system calls originally don’t contain any information
    about the filename (they operate on file descriptors). The hundreds of enrichment-based
    fields available out of the box are the main reason why Falco is so powerful and
    versatile.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这些系统调用最初不包含任何有关文件名的信息（它们操作文件描述符），它们也能正常工作。箱中提供的数百种基于丰富化的字段是Falco如此强大和多功能的主要原因。
- en: Mandatory Fields Versus Optional Fields
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制字段与可选字段
- en: Some fields exist for every input event, and you will be guaranteed to find
    them regardless of the event type or family. Examples of such fields are `evt.ts`,
    `evt.dir`, and `evt.type`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一些字段存在于每个输入事件中，无论事件类型或族群如何，您都能保证找到它们。此类字段的示例包括`evt.ts`、`evt.dir`和`evt.type`。
- en: 'However, most fields are optional and only present in some input event types.
    Typically, you don’t have to worry about this, as fields that don’t exist will
    just evaluate to `false` without generating an error. For example, the following
    check will evaluate to `false` for all events that don’t have an argument called
    `name`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数字段是可选的，并且仅存在于某些输入事件类型中。通常情况下，你不需要担心这一点，因为不存在的字段会在不生成错误的情况下仅评估为`false`。例如，以下检查将对所有没有名为`name`的参数的事件评估为`false`：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In some cases, though, you might want to explicitly check if a field exists.
    One reason would be to resolve ambiguities like whether the filter `evt.arg.name
    != /etc` returns `true` or `false` for events that don’t have an argument called
    `name`. You can answer questions like this by using the `exists` relational operator:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 但在某些情况下，您可能想要显式检查字段是否存在。一个原因是解决像`evt.arg.name != /etc`这样的模糊性，以确定对于没有名为`name`的参数的事件，是否返回`true`或`false`。您可以通过使用`exists`关系运算符来回答这类问题：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Field Types
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段类型
- en: 'Fields have types, which are used to validate values and ensure the syntactic
    correctness of filters. Take the following filter:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 字段具有类型，用于验证值并确保过滤器的语法正确性。看下面的过滤器：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Falco and sysdig will reject this with the following error:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Falco和sysdig将使用以下错误拒绝这个：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This happens because the `proc.pid` field is of type `INT64`, so its value must
    be an integer. The typing system also allows Falco to improve the rendering of
    some fields by understanding the meaning behind them. For example, `evt.arg.res`
    is of type `ERRNO`, which by default is a number. However, when possible, Falco
    will resolve it into an error code string (such as `EAGAIN`), which improves the
    readability and usability of the field.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以会发生这种情况是因为`proc.pid`字段的类型为`INT64`，所以其值必须是整数。类型系统还允许Falco通过理解字段背后的含义来改善某些字段的渲染。例如，`evt.arg.res`的类型是`ERRNO`，默认情况下是一个数字。然而，可能时，Falco会将其解析为一个错误代码字符串（如`EAGAIN`），从而提高字段的可读性和可用性。
- en: When we looked at relational operators, we noted how some are very similar to
    the ones in most programming languages, while others are unique to Falco filters.
    The same is true for field types. [Table 6-3](#field_type) lists the types you
    may encounter in Falco filter fields.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们研究关系运算符时，我们注意到一些与大多数编程语言中的运算符非常相似，而其他一些则是Falco过滤器独有的。字段类型也是如此。[表6-3](#field_type)列出了您在Falco过滤器字段中可能遇到的类型。
- en: Table 6-3\. Field types
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 表6-3\. 字段类型
- en: '| Type | Description |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `INT8`, `INT16`, `INT32`, `INT64`, `UINT8`, `UINT16`, `UINT32`, `UINT64`,
    `DOUBLE` | Numeric types, like in your favorite programming language. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `INT8`, `INT16`, `INT32`, `INT64`, `UINT8`, `UINT16`, `UINT32`, `UINT64`,
    `DOUBLE` | 像您喜欢的编程语言中的数值类型。 |'
- en: '| `CHARBUF` | A printable buffer of characters. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `CHARBUF` | 可打印字符缓冲区。 |'
- en: '| `BYTEBUF` | A raw buffer of bytes not suitable for printing. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `BYTEBUF` | 一个原始字节缓冲区，不适合打印。 |'
- en: '| `ERRNO` | An `INT64` value that, when possible, is resolved to an error code.
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `ERRNO` | 一个`INT64`值，可能时，会被解析为错误代码。 |'
- en: '| `FD` | An `INT64` value that, when possible, is resolved to the value of
    the file descriptor. For example, for a file this gets resolved to the filename;
    for a socket it gets resolved to the TCP connection tuple. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `FD` | 一个`INT64`值，可能时，会被解析为文件描述符的值。例如，对于文件，这会被解析为文件名；对于套接字，这会被解析为TCP连接元组。
    |'
- en: '| `PID` | An `INT64` value that, when possible, is resolved to the process
    name. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `PID` | 一个`INT64`值，可能时，会被解析为进程名称。 |'
- en: '| `FSPATH` | A string containing a relative or absolute filesystem path. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `FSPATH` | 包含相对或绝对文件系统路径的字符串。 |'
- en: '| `SYSCALLID` | A 16-bit system call ID. When possible, the value gets resolved
    to the system call name. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `SYSCALLID` | 一个16位系统调用ID。可能时，该值会被解析为系统调用名称。 |'
- en: '| `SIGTYPE` | An 8-bit signal number that, when possible, gets resolved to
    the signal name (e.g., `SIGCHLD`). |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `SIGTYPE` | 一个8位信号编号，可能时，会被解析为信号名称（例如`SIGCHLD`）。 |'
- en: '| `RELTIME` | A relative time, with nanosecond precision, rendered as a human-readable
    string. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `RELTIME` | 一个相对时间，精确到纳秒级，呈现为可读字符串。 |'
- en: '| `ABSTIME` | An absolute time interval. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `ABSTIME` | 绝对时间间隔。 |'
- en: '| `PORT` | A TCP/UDP port. When possible, this gets resolved to a protocol
    name. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `PORT` | 一个TCP/UDP端口。可能时，会被解析为协议名称。 |'
- en: '| `L4PROTO` | A 1-byte IP protocol type. When possible, this gets resolved
    to a L4 protocol name (TCP, UDP). |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `L4PROTO` | 一个1字节的IP协议类型。可能时，会解析为L4协议名称（TCP, UDP）。 |'
- en: '| `BOOL` | A Boolean value. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `BOOL` | 一个布尔值。 |'
- en: '| `IPV4ADDR` | An IPv4 address. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `IPV4ADDR` | 一个IPv4地址。 |'
- en: '| `DYNAMIC` | An indication that the field type can vary depending on the context.
    Used for generic fields like `evt.rawarg`. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `DYNAMIC` | 表示字段类型根据上下文可变。用于像`evt.rawarg`这样的通用字段。 |'
- en: '| `FLAGS8`, `FLAGS16`, `FLAGS32` | A flags word (i.e., a set of flags encoded
    as a number using binary encoding) that, when possible, is converted into a readable
    string (e.g., `O_RDONLY&#124;O_CLOEXEC`). The resolution into the string is dependent
    on the context, as events can register their own flag values. So, for example,
    flags for an lseek system call event will be converted into values like `SEEK_END`,
    `SEEK_CUR`, and `SEEK_SET`, while `sockopt` flags will be converted into `SOL_SOCKET`,
    `SOL_TCP`, and so on. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `FLAGS8`, `FLAGS16`, `FLAGS32` | 标志字（即，使用二进制编码的一组标志作为数字）。在可能的情况下，将其转换为可读字符串（例如，`O_RDONLY&#124;O_CLOEXEC`）。字符串的解析取决于上下文，因为事件可以注册自己的标志值。因此，例如，lseek系统调用事件的标志将转换为`SEEK_END`，`SEEK_CUR`等值，而`sockopt`的标志将转换为`SOL_SOCKET`，`SOL_TCP`等等。'
- en: '| `UID` | A Unix user ID, resolved to a username when possible. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `UID` | 当可能时，将 Unix 用户 ID 解析为用户名。 |'
- en: '| `GID` | A Unix group ID, resolved to a group name when possible. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `GID` | 当可能时，将Unix组ID解析为组名。 |'
- en: '| `IPADDR` | An IPv4 or IPv6 address. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `IPADDR` | 一个IPv4或IPv6地址。 |'
- en: '| `IPNET` | An IPv4 or IPv6 network. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `IPNET` | 一个IPv4或IPv6网络。 |'
- en: '| `MODE` | A 32-bit bitmask to represent file modes. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `MODE` | 用于表示文件模式的32位位掩码。 |'
- en: 'How do you find out the type of a field you want to use? The best way is to
    invoke Falco with the `--list` and `-v` options:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何找出要使用的字段的类型？最好的方法是使用Falco的`--list`和`-v`选项调用：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will print the full list of fields, including type information for each
    entry in the list.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印字段的完整列表，包括每个条目的类型信息。
- en: Using Fields and Filters
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用字段和过滤器
- en: Now that you’ve learned about filters and fields, let’s take a look at how you
    can use them in practice. We’ll focus on Falco and sysdig.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了过滤器和字段，让我们看看如何在实践中使用它们。我们将重点放在Falco和sysdig上。
- en: Fields and Filters in Falco
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Falco中的字段和过滤器
- en: Fields and filters are at the core of Falco rules. Fields are used to express
    rules’ conditions and are part of both conditions and outputs. To demonstrate
    how, we’ll craft our own rule.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 字段和过滤器是Falco规则的核心。字段用于表达规则的条件，既是条件的一部分，也是输出的一部分。为了演示如何使用它们，我们将制定我们自己的规则。
- en: Let’s say we would like Falco to notify us every time there is an attempt to
    change the permissions of a file and make it executable by another user. When
    that happens, we would like to know the name of the file that was changed, the
    new mode of the file, and the name of the user who caused the trouble. We would
    also like to know whether the mode change attempt was successful or not.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望Falco在每次尝试更改文件权限并使其对其他用户可执行时通知我们。发生这种情况时，我们想知道已更改的文件的名称，文件的新模式以及导致问题的用户的名称。我们还想知道模式更改尝试是否成功。
- en: 'Here is the rule:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是规则：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `condition` section is where the rule’s filter is specified.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`condition`部分是指定规则过滤器的地方。'
- en: 'File modes, including the executable bit, are changed using the `chmod` system
    call, or one of its variants. Therefore, the first part of the filter selects
    events that are of type `chmod`, `fchmod`, or `fchmodat`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 文件模式，包括可执行位，是使用`chmod`系统调用或其变体进行更改的。因此，过滤器的第一部分选择了类型为`chmod`，`fchmod`或`fchmodat`的事件：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have the right system calls, we want to accept only the subset
    of them that set the “other” executable bit. Reading the [`chmod` manual page](https://oreil.ly/zuKuC)
    reveals that the flag we need to check is `S_IXOTH`. We determine its presence
    by using the `contains` operator:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了正确的系统调用，我们想要接受仅设置了“其他”可执行位的子集。阅读[`chmod`手册页](https://oreil.ly/zuKuC)显示我们需要检查的标志是`S_IXOTH`。我们通过使用`contains`操作符来确定其是否存在：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Combining the two pieces with an `and` gives us the full filter. Easy!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个片段组合并使用`and`得到完整的过滤器。简单！
- en: 'Now, let’s focus our attention on the `output` section of the rule. This is
    where we tell Falco what to print on the screen when the rule’s condition returns
    `true`. You will notice that this is just a `printf`-like string that mixes regular
    text with fields, whose values will be resolved in the final message:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将注意力集中在规则的`output`部分。这是我们告诉Falco当规则条件返回`true`时在屏幕上打印什么的地方。您会注意到，这只是一个类似于`printf`的字符串，其中混合了常规文本和字段，这些字段的值将在最终消息中解析：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The only thing you need to remember is that you need to prefix field names in
    the output string with the `%` character; otherwise, they will just be treated
    as part of the string.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您唯一需要记住的是，在输出字符串中需要使用`%`字符作为字段名的前缀；否则，它们将仅被视为字符串的一部分。
- en: 'Time for you to try this! Save the preceding rule in a file called *ch6.yaml*.
    After that, run this command line in a terminal:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候让您尝试一下了！将前述规则保存在名为*ch6.yaml*的文件中。之后，在终端中运行以下命令行：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, in another terminal, run these two commands:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在另一个终端中，运行以下两个命令：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is the output you will get in the Falco terminal:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将在Falco终端中获得的输出：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Congratulations, you’ve just performed your very own Falco detection! Note how
    `evt.arg.mode` and `evt.failed` are rendered in a human-readable way, even if
    internally they are numbers. This shows you the power of the filter/fields type
    system.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您刚刚执行了自己的Falco检测！请注意`evt.arg.mode`和`evt.failed`如何以人类可读的方式显示，即使在内部它们是数字。这显示了过滤器/字段类型系统的强大功能。
- en: Fields and Filters in sysdig
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sysdig中的字段和过滤器
- en: An introduction to sysdig was provided in [Chapter 4](ch04.xhtml#data_source)
    (if you need a refresher, see [“sysdig”](ch04.xhtml#sysdig)). Here we will look
    specifically at how filters and fields are used in sysdig.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.xhtml#data_source)中提供了sysdig的简介（如果您需要复习，请参见[“sysdig”](ch04.xhtml#sysdig)）。这里我们将特别看看sysdig中如何使用过滤器和字段。
- en: While Falco is based on the concepts of rules and of notifying the user when
    rules match, sysdig focuses on investigation, troubleshooting, and threat-hunting
    workflows. In sysdig, you use filters to *restrict* the input, and you (optionally)
    use field formatting to *control* the output. The combination of the two provides
    a ton of flexibility during investigations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Falco基于规则的概念并在规则匹配时通知用户，sysdig专注于调查、故障排除和威胁狩猎工作流程。在sysdig中，您可以使用过滤器来*限制*输入，并且（可选地）使用字段格式化来*控制*输出。这两者的结合为调查提供了极大的灵活性。
- en: 'Filters in sysdig are specified at the end of the command line:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在sysdig中，过滤器是在命令行末尾指定的：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Output formatting is provided using the `-p` command-line flag and uses the
    same `printf`-like syntax that we just described when talking about Falco outputs:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-p`命令行标志提供输出格式化，并使用与我们刚刚在讨论Falco输出时描述的相同的`printf`-类似语法：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'An important thing to keep in mind is that, when the `-p` flag is used, sysdig
    will only print an output line for the events in which *all* of the specified
    filters exist. So, this command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住的一件重要事情是，当使用`-p`标志时，sysdig只会为*所有*指定过滤器存在的事件打印输出行。因此，这个命令：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'will print a line only for events that have both a return value *and* a process
    name, skipping, for example, all the system call “enter” events. If you care about
    seeing all of the events, put a star (`*`) at the beginning of the formatting
    string:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 仅为具有返回值*和*进程名称的事件打印一行，例如跳过所有系统调用“enter”事件。如果您关心查看所有事件，请在格式字符串的开头放置星号（`*`）：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When a field is missing, it will be rendered as `<NA>`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当字段缺失时，它将显示为`<NA>`。
- en: 'When no formatting is specified with `-p`, sysdig displays input events in
    a standard format that conveniently includes all of the arguments and argument
    names, for every system call. Here’s an example sysdig output line for an `openat`
    system call, with the system call arguments highlighted in bold for visibility:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`-p`未指定格式时，sysdig以标准格式显示输入事件，方便地包括所有参数和参数名，用于每个系统调用。以下是一个`openat`系统调用的sysdig输出行示例，其中以粗体突出显示系统调用参数以提高可见性：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Each of the arguments can be used in a filter with the `evt.arg` syntax:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数都可以使用`evt.arg`语法在过滤器中使用：
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As a more advanced example, let’s convert the *File Becoming Executable by
    Others* rule we created for Falco in the previous section into a sysdig command
    line:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 作为更高级的示例，让我们将我们在前一节为Falco创建的*文件被其他人设置为可执行*规则转换为sysdig命令行：
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This shows how easy it is to use sysdig as a development tool when creating
    new rules.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了在创建新规则时如何将sysdig作为开发工具使用的简便性。
- en: Falco’s Most Useful Fields
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Falco的最有用字段
- en: 'This section presents a curated list of some of the most important Falco fields,
    organized by class. You can use this list as a reference when writing filters.
    For a full list, including all plugin fields, use the following at the command
    line:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了按类别组织的一些最重要的Falco字段的精选列表。您可以在编写过滤器时将此列表作为参考。要获取包括所有插件字段的完整列表，请在命令行中使用以下命令：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: General
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般情况
- en: The fields listed in [Table 6-4](#evt_filter_class_fields) apply to every event
    and include general properties of an event.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 列在[表6-4](#evt_filter_class_fields)中的字段适用于每个事件，并包括事件的一般属性。
- en: Table 6-4\. `evt` filter class fields
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 表6-4\. `evt`过滤器类字段
- en: '| Field name | Description |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 字段名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `evt.num` | The event number. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `evt.num` | 事件编号。 |'
- en: '| `evt.time` | The event timestamp as a string that includes the nanosecond
    part. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `evt.time` | 事件时间戳，包括纳秒部分的字符串。 |'
- en: '| `evt.dir` | The event direction; can be either `>` for enter events or `<`
    for exit events. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `evt.dir` | 事件方向；可以是 `>` 表示进入事件，或 `<` 表示退出事件。 |'
- en: '| `evt.type` | The name of the event (e.g., `open`). |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `evt.type` | 事件名称（例如 `open`）。 |'
- en: '| `evt.cpu` | The number of the CPU where this event happened. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `evt.cpu` | 发生此事件的CPU编号。 |'
- en: '| `evt.args` | All the event arguments, aggregated into a single string. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `evt.args` | 所有事件参数，聚合为单个字符串。 |'
- en: '| `evt.rawarg` | One of the event arguments, specified by name (e.g., `evt.rawarg.fd`).
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `evt.rawarg` | 事件参数之一，按名称指定（例如 `evt.rawarg.fd`）。 |'
- en: '| `evt.arg` | One of the event arguments, specified by name or by number. Some
    events (such as return codes or file descriptors) will be converted into a text
    representation when possible (e.g., `evt.arg.fd` or `evt.arg[0]`). |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `evt.arg` | 事件参数之一，按名称或编号指定。某些事件（如返回代码或文件描述符）将在可能时转换为文本表示（例如 `evt.arg.fd`
    或 `evt.arg[0]`）。 |'
- en: '| `evt.buffer` | The binary data buffer for events that have one, like read,
    recvfrom, etc. Use this field in filters with `contains` to search in I/O data
    buffers. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `evt.buffer` | 事件的二进制数据缓冲区（例如 read、recvfrom 等）。在过滤器中使用 `contains` 来搜索I/O数据缓冲区。
    |'
- en: '| `evt.buflen` | The length of the binary data buffer for events that have
    one, like `read`, `recvfrom`, etc. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `evt.buflen` | 具有二进制数据缓冲区的事件的缓冲区长度，如 `read`、`recvfrom` 等。 |'
- en: '| `evt.res` | The event return value, as a string. If the event failed, the
    result is an error code string (e.g., `ENOENT`); otherwise, the result is the
    string `SUCCESS`. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `evt.res` | 事件返回值，作为字符串。如果事件失败，则结果是错误代码字符串（例如 `ENOENT`）；否则，结果是字符串 `SUCCESS`。
    |'
- en: '| `evt.rawres` | The event return value, as a number (e.g., `-2`). Useful for
    range comparisons. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `evt.rawres` | 事件返回值，作为数字（例如 `-2`）。用于范围比较时很有用。 |'
- en: '| `evt.failed` | `true` for events that returned an error status. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `evt.failed` | 对于返回错误状态的事件为 `true`。 |'
- en: Processes
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Processes
- en: The fields in this class contain all the information you need about processes
    and threads. The information in [Table 6-5](#proc_filter_class_fields) comes mostly
    from the process table that *libsinsp* constructs in memory.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此类中的字段包含关于进程和线程的所有信息。 [Table 6-5](#proc_filter_class_fields) 中的信息主要来自内存中 *libsinsp*
    构建的进程表。
- en: Table 6-5\. `proc` filter class fields
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Table 6-5\. `proc` 过滤器类字段
- en: '| Field name | Description |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 字段名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `proc.pid` | The ID of the process generating the event. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `proc.pid` | 生成事件的进程ID。 |'
- en: '| `proc.exe` | The first command-line argument (usually the executable name
    or a custom one). |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `proc.exe` | 第一个命令行参数（通常是可执行文件名或自定义名称）。 |'
- en: '| `proc.name` | The name (excluding the path) of the executable generating
    the event. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `proc.name` | 生成事件的可执行文件的名称（不包括路径）。 |'
- en: '| `proc.args` | The arguments passed on the command line when starting the
    process generating the event. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `proc.args` | 启动生成事件进程时传递的命令行参数。 |'
- en: '| `proc.env` | The environment variables of the process generating the event.
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `proc.env` | 生成事件的进程的环境变量。 |'
- en: '| `proc.cwd` | The current working directory of the event. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `proc.cwd` | 事件的当前工作目录。 |'
- en: '| `proc.ppid` | The PID of the parent of the process generating the event.
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `proc.ppid` | 生成事件的进程的父进程PID。 |'
- en: '| `proc.pname` | The name (excluding the path) of the parent of the process
    generating the event. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `proc.pname` | 生成事件进程的父进程的名称（不包括路径）。 |'
- en: '| `proc.pcmdline` | The full command line (`proc.name` + `proc.args`) of the
    parent of the process generating the event. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `proc.pcmdline` | 生成事件进程的父进程的完整命令行（`proc.name` + `proc.args`）。 |'
- en: '| `proc.loginshellid` | The PID of the oldest shell among the ancestors of
    the current process, if there is one. This field can be used to separate different
    user sessions and is useful in conjunction with chisels like spy_user. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `proc.loginshellid` | 当前进程祖先中最老的shell的PID（如果存在）。此字段可用于区分不同的用户会话，并与像 spy_user
    这样的凿子一起使用。 |'
- en: '| `thread.tid` | The ID of the thread generating the event. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `thread.tid` | 生成事件的线程ID。 |'
- en: '| `thread.vtid` | The ID of the thread generating the event as seen from its
    current PID namespace. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `thread.vtid` | 生成事件的线程ID，在其当前PID命名空间中可见。 |'
- en: '| `proc.vpid` | The ID of the process generating the event as seen from its
    current PID namespace. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `proc.vpid` | 生成事件的进程ID，在其当前PID命名空间中可见。 |'
- en: '| `proc.sid` | The session ID of the process generating the event. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `proc.sid` | 生成事件的进程的会话ID。 |'
- en: '| `proc.sname` | The name of the current process’s session leader. This is
    either the process with `pid=proc.sid` or the eldest ancestor that has the same
    session ID as the current process. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `proc.sname` | 当前进程的会话领导者的名称。这要么是具有`pid=proc.sid`的进程，要么是具有与当前进程相同会话ID的最年长的祖先。
    |'
- en: '| `proc.tty` | The controlling terminal of the process. This is `0` for processes
    without a terminal. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `proc.tty` | 进程的控制终端。对于没有终端的进程，这是`0`。 |'
- en: File Descriptors
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件描述符
- en: '[Table 6-6](#fd_filter_class_fields) lists the fields related to file descriptors,
    which are at the base of I/O. Fields containing details about files and directories,
    network connections, pipes, and other types of interprocess communication can
    all be found in this class.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 6-6](#fd_filter_class_fields) 列出了与文件描述符相关的字段，这些字段是I/O的基础。包含有关文件和目录、网络连接、管道和其他类型的进程间通信的详细信息的字段都可以在这个类中找到。'
- en: Table 6-6\. `fd` filter class fields
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-6\. `fd`过滤类字段
- en: '| Field name | Description |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| 字段名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fd.num` | The unique number identifying the file descriptor. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `fd.num` | 标识文件描述符的唯一编号。 |'
- en: '| `fd.typechar` | The type of the file descriptor, as a single character. Can
    be `f` for file, `4` for IPv4 socket, `6` for IPv6 socket, `u` for Unix socket,
    `p` for pipe, `e` for eventfd, `s` for signalfd, `l` for eventpoll, `i` for inotify,
    or `o` for unknown. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `fd.typechar` | 文件描述符的类型，以单个字符表示。可以是`f`表示文件，`4`表示IPv4套接字，`6`表示IPv6套接字，`u`表示Unix套接字，`p`表示管道，`e`表示eventfd，`s`表示signalfd，`l`表示eventpoll，`i`表示inotify，或`o`表示未知。
    |'
- en: '| `fd.name` | The full name of the file descriptor. If it’s a file, this field
    contains the full path. If it’s a socket, this field contains the connection tuple.
    |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `fd.name` | 文件描述符的完整名称。如果是文件，则此字段包含完整路径。如果是套接字，则此字段包含连接元组。 |'
- en: '| `fd.directory` | If the file descriptor is a file, the directory that contains
    it. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `fd.directory` | 如果文件描述符是文件，则包含它的目录。 |'
- en: '| `fd.filename` | If the file descriptor is a file, the filename without the
    path. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `fd.filename` | 如果文件描述符是文件，则是不带路径的文件名。 |'
- en: '| `fd.ip` | *(Filter only)* Matches the IP address (client or server) of the
    file descriptor. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `fd.ip` | *(仅过滤)* 匹配文件描述符的IP地址（客户端或服务器）。 |'
- en: '| `fd.cip` | The client’s IP address. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `fd.cip` | 客户端的IP地址。 |'
- en: '| `fd.sip` | The server’s IP address. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `fd.sip` | 服务器的IP地址。 |'
- en: '| `fd.lip` | The local IP address. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `fd.lip` | 本地IP地址。 |'
- en: '| `fd.rip` | The remote IP address. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `fd.rip` | 远程IP地址。 |'
- en: '| `fd.port` | *(Filter only)* Matches the port (either client or server) of
    the file descriptor. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `fd.port` | *(仅过滤)* 匹配文件描述符的端口（客户端或服务器）。 |'
- en: '| `fd.cport` | For TCP/UDP file descriptors, the client’s port. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `fd.cport` | 对于TCP/UDP文件描述符，客户端的端口。 |'
- en: '| `fd.sport` | For TCP/UDP file descriptors, the server’s port. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `fd.sport` | 对于TCP/UDP文件描述符，服务器的端口。 |'
- en: '| `fd.lport` | For TCP/UDP file descriptors, the local port. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `fd.lport` | 对于TCP/UDP文件描述符，本地端口。 |'
- en: '| `fd.rport` | For TCP/UDP file descriptors, the remote port. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `fd.rport` | 对于TCP/UDP文件描述符，远程端口。 |'
- en: '| `fd.l4proto` | The IP protocol of a socket. Can be `tcp`, `udp`, `icmp`,
    or `raw`. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `fd.l4proto` | 套接字的IP协议。可以是`tcp`，`udp`，`icmp`或`raw`。'
- en: Users and Groups
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户和用户组
- en: '[Table 6-7](#user_and_group_filter_class_fields) lists the fields in the `user`
    and `group` filter classes.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 6-7](#user_and_group_filter_class_fields) 列出了`user`和`group`过滤类中的字段。'
- en: Table 6-7\. `user` and `group` filter class fields
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-7\. `user`和`group`过滤类字段
- en: '| Field name | Description |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 字段名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `user.uid` | The user’s ID |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `user.uid` | 用户的ID |'
- en: '| `user.name` | The user’s name |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `user.name` | 用户的名称 |'
- en: '| `group.gid` | The group’s ID |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `group.gid` | 用户组的ID |'
- en: '| `group.name` | The group’s name |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `group.name` | 用户组的名称 |'
- en: Containers
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: The fields in the `container` class ([Table 6-8](#container_filter_class_fields))
    can be used for everything related to containers, including obtaining IDs, names,
    labels, and mounts.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`container`类中的字段（[表 6-8](#container_filter_class_fields)）可用于与容器相关的一切，包括获取ID、名称、标签和挂载。'
- en: Table 6-8\. `container` filter class fields
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-8\. `container`过滤类字段
- en: '| Field name | Description |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 字段名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `container.id` | The container ID. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `container.id` | 容器ID。 |'
- en: '| `container.name` | The container name. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `container.name` | 容器名称。 |'
- en: '| `container.image` | The container image name (e.g., `falcosecurity/falco:latest`
    for Docker). |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `container.image` | 容器镜像名称（例如，Docker中的`falcosecurity/falco:latest`）。 |'
- en: '| `con⁠tainer.image​.id` | The container image ID (e.g., `6f7e2741b66b`). |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `container.image​.id` | 容器镜像ID（例如，`6f7e2741b66b`）。 |'
- en: '| `container​.privi⁠leged` | `true` for containers running as privileged, `false`
    otherwise. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `container​.privi⁠leged` | 运行为特权的容器为 `true`，否则为 `false`。 |'
- en: '| `con⁠tainer​.mounts` | A space-separated list of mount information. Each
    item in the list has the format `*<source>*:*<dest>*:*<mode>*:*<rdrw>*:*<propagation>*`.
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `con⁠tainer​.mounts` | 一组以空格分隔的挂载信息。列表中每个项的格式为 `*<source>*:*<dest>*:*<mode>*:*<rdrw>*:*<propagation>*`。
    |'
- en: '| `container.mount` | Information about a single mount, specified by number
    (e.g., `container.mount[0]`) or mount source (e.g., `con⁠tainer.mount[/usr/local]`).
    The pathname can be a glob (e.g., `container.mount[/usr/local/*]`), in which case
    the first matching mount will be returned. The information has the format `*<source>*:*<dest>*:*<mode>*:*<rdrw>*:*<propagation>*`.
    If there is no mount with the specified index or matching the provided source,
    this returns the string `"none"` instead of a NULL value. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `container.mount` | 单个挂载的信息，由编号（例如，`container.mount[0]`）或挂载源（例如，`con⁠tainer.mount[/usr/local]`）指定。路径名可以是通配符（例如，`container.mount[/usr/local/*]`），在这种情况下，将返回第一个匹配的挂载。信息的格式为
    `*<source>*:*<dest>*:*<mode>*:*<rdrw>*:*<propagation>*`。如果没有指定索引或匹配提供的源的挂载，则返回字符串
    `"none"` 而不是 NULL 值。 |'
- en: '| `container.image​.reposi⁠tory` | The container image repository (e.g., `falcosecurity/falco`).
    |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `container.image​.reposi⁠tory` | 容器镜像仓库（例如，`falcosecurity/falco`）。 |'
- en: '| `con⁠tainer.image​.tag` | The container image tag (e.g., `stable`, `latest`).
    |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `con⁠tainer.image​.tag` | 容器镜像标签（例如，`stable`，`latest`）。 |'
- en: '| `con⁠tainer.image​.digest` | The container image registry digest (e.g., `sha256:d977378f890d445c15e51795296​e4e5062f109ce6da83e0a355fc4ad8699d27`).
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `con⁠tainer.image​.digest` | 容器镜像注册表摘要（例如，`sha256:d977378f890d445c15e51795296​e4e5062f109ce6da83e0a355fc4ad8699d27`）。
    |'
- en: Kubernetes
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes
- en: When Falco is configured to interface with the Kubernetes API server, the fields
    in this class (listed in [Table 6-9](#keights_filter_class_fields)) can be used
    to fetch information about Kubernetes objects.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Falco 配置为与 Kubernetes API 服务器接口时，可以使用此类中的字段（列在 [Table 6-9](#keights_filter_class_fields)）来获取有关
    Kubernetes 对象的信息。
- en: Table 6-9\. `k8s` filter class fields
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Table 6-9\. `k8s` 过滤器类字段
- en: '| Field name | Description |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 字段名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `k8s.pod.name` | The Kubernetes Pod name. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.pod.name` | Kubernetes Pod 名称。 |'
- en: '| `k8s.pod.id` | The Kubernetes Pod ID. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.pod.id` | Kubernetes Pod ID。 |'
- en: '| `k8s.pod.label` | The Kubernetes Pod label (e.g., `k8s.pod.label.foo`). |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.pod.label` | Kubernetes Pod 标签（例如，`k8s.pod.label.foo`）。 |'
- en: '| `k8s.rc.name` | The Kubernetes ReplicationController name. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.rc.name` | Kubernetes ReplicationController 名称。 |'
- en: '| `k8s.rc.id` | The Kubernetes ReplicationController ID. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.rc.id` | Kubernetes ReplicationController ID。 |'
- en: '| `k8s.rc.label` | The Kubernetes ReplicationController label (e.g., `k8s.rc.label.foo`).
    |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.rc.label` | Kubernetes ReplicationController 标签（例如，`k8s.rc.label.foo`）。
    |'
- en: '| `k8s.svc.name` | The Kubernetes Service name. Can return more than one value,
    concatenated. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.svc.name` | Kubernetes 服务名称。可能返回多个值，已连接。 |'
- en: '| `k8s.svc.id` | The Kubernetes Service ID. Can return more than one value,
    concatenated. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.svc.id` | Kubernetes Service ID。可能返回多个值，已连接。 |'
- en: '| `k8s.svc.label` | The Kubernetes Service label (e.g., `k8s.svc.label.foo)`.
    Can return more than one value, concatenated. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.svc.label` | Kubernetes Service 标签（例如，`k8s.svc.label.foo`）。可能返回多个值，已连接。
    |'
- en: '| `k8s.ns.name` | The Kubernetes namespace name. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.ns.name` | Kubernetes 命名空间名称。 |'
- en: '| `k8s.ns.id` | The Kubernetes namespace ID. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.ns.id` | Kubernetes 命名空间 ID。 |'
- en: '| `k8s.ns.label` | The Kubernetes namespace label (e.g., `k8s.ns.label.foo`).
    |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.ns.label` | Kubernetes 命名空间标签（例如，`k8s.ns.label.foo`）。 |'
- en: '| `k8s.rs.name` | The Kubernetes ReplicaSet name. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.rs.name` | Kubernetes ReplicaSet 名称。 |'
- en: '| `k8s.rs.id` | The Kubernetes ReplicaSet ID. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.rs.id` | Kubernetes ReplicaSet ID。 |'
- en: '| `k8s.rs.label` | The Kubernetes ReplicaSet label (e.g., `k8s.rs.label.foo`).
    |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.rs.label` | Kubernetes ReplicaSet 标签（例如，`k8s.rs.label.foo`）。 |'
- en: '| `k8s.deploy⁠ment​.name` | The Kubernetes Deployment name. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.deploy⁠ment​.name` | Kubernetes 部署名称。 |'
- en: '| `k8s.deployment.id` | The Kubernetes Deployment ID. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.deployment.id` | Kubernetes 部署 ID。 |'
- en: '| `k8s.deployment.label` | The Kubernetes Deployment label (e.g., `k8s.rs.label.foo`).
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `k8s.deployment.label` | Kubernetes 部署标签（例如，`k8s.rs.label.foo`）。 |'
- en: CloudTrail
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CloudTrail
- en: The fields in the `cloudtrail` class (listed in [Table 6-10](#cloudtrail_filter_class_fields))
    are available when the CloudTrail plugin is configured. They allow you to build
    filters and formatters for AWS detections.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置 CloudTrail 插件时，可以使用 `cloudtrail` 类中的字段（列在 [Table 6-10](#cloudtrail_filter_class_fields)）来构建
    AWS 检测的过滤器和格式化程序。
- en: Table 6-10\. `cloudtrail` filter class fields
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Table 6-10\. `cloudtrail` 过滤器类字段
- en: '| Field name | Description |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 字段名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ct.error` | The error code from the event. Will be `""` if there was no
    error. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `ct.error` | 事件的错误代码。如果没有错误，则为 `""`。 |'
- en: '| `ct.src` | The source of the CloudTrail event (`eventSource` in the JSON).
    |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `ct.src` | CloudTrail 事件的来源（在 JSON 中为 `eventSource`）。 |'
- en: '| `ct.shortsrc` | The source of the CloudTrail event (`eventSource` in the
    JSON), without the `.amazonaws.com` trailer. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `ct.shortsrc` | CloudTrail 事件的来源（在 JSON 中为 `eventSource`），不包括 `.amazonaws.com`
    后缀。 |'
- en: '| `ct.name` | The name of the CloudTrail event (`eventName` in the JSON). |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `ct.name` | CloudTrail 事件的名称（在 JSON 中为 `eventName`）。 |'
- en: '| `ct.user` | The user of the CloudTrail event (`userIdentity.userName` in
    the JSON). |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `ct.user` | CloudTrail 事件的用户（在 JSON 中为 `userIdentity.userName`）。 |'
- en: '| `ct.region` | The region of the CloudTrail event (`awsRegion` in the JSON).
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `ct.region` | CloudTrail 事件的区域（在 JSON 中为 `awsRegion`）。 |'
- en: '| `ct.srcip` | The IP address generating the event (`sourceIPAddress` in the
    JSON). |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `ct.srcip` | 生成事件的 IP 地址（在 JSON 中为 `sourceIPAddress`）。 |'
- en: '| `ct.useragent` | The user agent generating the event (`userAgent` in the
    JSON). |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `ct.useragent` | 生成事件的用户代理（在 JSON 中为 `userAgent`）。 |'
- en: '| `ct.readonly` | `true` if the event only reads information (e.g., `DescribeInstances`),
    `false` if the event modifies the state (e.g., `RunInstances`, `CreateLoadBalancer`).
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `ct.readonly` | 如果事件仅读取信息（例如 `DescribeInstances`），则为 `true`；如果事件修改状态（例如 `RunInstances`、`CreateLoadBalancer`），则为
    `false`。 |'
- en: '| `s3.uri` | The S3 URI (`s3://*<bucket>*/*<key>*`). |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `s3.uri` | S3 URI (`s3://*<bucket>*/*<key>*`)。 |'
- en: '| `s3.bucket` | The bucket name for S3 events. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `s3.bucket` | S3 事件的存储桶名称。 |'
- en: '| `s3.key` | The S3 key name. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `s3.key` | S3 的键名。 |'
- en: '| `ec2.name` | The name of the EC2 instance, typically stored in the instance
    tags. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `ec2.name` | EC2 实例的名称，通常存储在实例标签中。 |'
- en: Kubernetes Audit Logs
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 审计日志
- en: Fields related to Kubernetes audit logs (listed in [Table 6-11](#keightsaudit_filter_class_fields))
    are available when the k8saudit plugin is configured. The k8saudit plugin is responsible
    for interfacing Falco with the Kubernetes audit logs facility. The fields exported
    by the plugin can be used to monitor several types of Kubernetes activities.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Kubernetes 审计日志的字段（列在 [表 6-11](#keightsaudit_filter_class_fields) 中）在配置了
    k8saudit 插件时可用。k8saudit 插件负责将 Falco 与 Kubernetes 审计日志设施接口化。插件导出的字段可用于监视多种类型的 Kubernetes
    活动。
- en: Table 6-11\. `k8saudit` filter class fields
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Table 6-11\. `k8saudit` 过滤器类字段
- en: '| Field name | Description |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| Field name | 描述 |'
- en: '| --- | --- |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ka.user.name` | The name of the user performing the request |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `ka.user.name` | 执行请求的用户名称 |'
- en: '| `ka.user.groups` | The groups to which the user belongs |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `ka.user.groups` | 用户所属的组 |'
- en: '| `ka.verb` | The action being performed |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `ka.verb` | 正在执行的操作 |'
- en: '| `ka.uri` | The request URI as sent from client to server |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `ka.uri` | 从客户端发送到服务器的请求 URI |'
- en: '| `ka.uri.param` | The value of a given query parameter in the URI (e.g., when
    `uri=/foo?key=val`, `ka.uri.param[key]` is `val`) |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `ka.uri.param` | URI 中给定查询参数的值（例如，当 `uri=/foo?key=val` 时，`ka.uri.param[key]`
    是 `val`） |'
- en: '| `ka.target.name` | The target object’s name |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `ka.target.name` | 目标对象的名称 |'
- en: '| `ka.target.namespace` | The target object’s namespace |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `ka.target.namespace` | 目标对象的命名空间 |'
- en: '| `ka.target.resource` | The target object’s resource |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `ka.target.resource` | 目标对象的资源 |'
- en: '| `ka.req.configmap.name` | When the request object refers to a ConfigMap,
    the ConfigMap name |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.configmap.name` | 当请求对象指向 ConfigMap 时，ConfigMap 的名称 |'
- en: '| `ka.req.pod.containers.image` | When the request object refers to a Pod,
    the container’s images |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.pod.containers.image` | 当请求对象指向 Pod 时，容器的镜像 |'
- en: '| `ka.req.pod.containers​.privi⁠leged` | When the request object refers to
    a Pod, the value of the `privileged` flag for all containers |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.pod.containers​.privi⁠leged` | 当请求对象指向 Pod 时，所有容器的 `privileged` 标志的值
    |'
- en: '| `ka.req.pod.containers .add_capabilities` | When the request object refers
    to a Pod, all capabilities to add when running the container |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.pod.containers .add_capabilities` | 当请求对象指向 Pod 时，在运行容器时添加的所有能力 |'
- en: '| `ka.req.role.rules` | When the request object refers to a role or cluster
    role, the rules associated with the role |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.role.rules` | 当请求对象指向角色或集群角色时，与角色关联的规则 |'
- en: '| `ka.req.role.rules.verbs` | When the request object refers to a role or cluster
    role, the verbs associated with the role’s rules |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.role.rules.verbs` | 当请求对象指向角色或集群角色时，与角色规则关联的动词 |'
- en: '| `ka.req.role.rules .resources` | When the request object refers to a role
    or cluster role, the resources associated with the role’s rules |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.role.rules .resources` | 当请求对象指向角色或集群角色时，与角色规则关联的资源 |'
- en: '| `ka.req.service.type` | When the request object refers to a service, the
    service type |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `ka.req.service.type` | 当请求对象涉及服务时，服务类型 |'
- en: '| `ka.resp.name` | The response object’s name |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `ka.resp.name` | 响应对象的名称 |'
- en: '| `ka.response.code` | The response code |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `ka.response.code` | 响应代码 |'
- en: '| `ka.response.reason` | The response reason (usually present only for failures)
    |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `ka.response.reason` | 响应原因（通常仅在失败时出现） |'
- en: Conclusion
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations, you are now a filtering expert! At this point, you should be
    able to read and understand Falco rules, and you are much closer to being able
    to write your own. In the next chapter, we will devote our attention to Falco’s
    outputs.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你现在已经是一个过滤专家了！此时，你应该能够阅读和理解 Falco 规则，并且离能够编写自己的规则更近了一步。在下一章中，我们将专注于 Falco
    的输出。
