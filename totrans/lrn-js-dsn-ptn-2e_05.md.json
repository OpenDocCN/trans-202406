["```\n// Filename: staff.mjs\n// =========================================\n// specify (public) exports that can be consumed by other modules\nexport const baker = {\n   bake(item) {\n      console.log( `Woo! I just baked ${item}` );\n    }\n};\n\n// Filename: cakeFactory.mjs\n// =========================================\n// specify dependencies\nimport baker from \"/modules/staff.mjs\";\n\nexport const oven = {\n    makeCupcake(toppings) {\n       baker.bake( \"cupcake\", toppings );\n    },\n    makeMuffin(mSize) {\n        baker.bake( \"muffin\", size );\n    }\n}\n\n// Filename: bakery.mjs\n// =========================================\nimport {cakeFactory} from \"/modules/cakeFactory.mjs\";\ncakeFactory.oven.makeCupcake( \"sprinkles\" );\ncakeFactory.oven.makeMuffin( \"large\" );\n```", "```\n// Filename: staff.mjs\n// =========================================\nconst baker = {\n  //baker functions\n};\nconst pastryChef = {\n  //pastry chef functions\n};\nconst assistant = {\n  //assistant functions\n};\n\nexport { baker, pastryChef, assistant };\n```", "```\nimport {baker, assistant} from \"/modules/staff.mjs\";\n```", "```\n<script type=\"module\" src=\"main.mjs\"></script>\n<script nomodule src=\"fallback.js\"></script>\n```", "```\n// Filename: cakeFactory.mjs\n\nimport * as Staff from \"/modules/staff.mjs\";\n\nexport const oven = {\n    makeCupcake(toppings) {\n       Staff.baker.bake( \"cupcake\", toppings );\n    },\n    makePastry(mSize) {\n        Staff.pastryChef.make( \"pastry\", type );\n    }\n}\n```", "```\nimport {cakeFactory} from \"https://example.com/modules/cakeFactory.mjs\";\n// eagerly loaded static import\n\ncakeFactory.oven.makeCupcake( \"sprinkles\" );\ncakeFactory.oven.makeMuffin( \"large\" );\n```", "```\nimport {cakeFactory} from \"/modules/cakeFactory.mjs\";\n// eagerly loaded static import\n\ncakeFactory.oven.makeCupcake( \"sprinkles\" );\ncakeFactory.oven.makeMuffin( \"large\" );\n```", "```\nform.addEventListener(\"submit\", e => {\n  e.preventDefault();\n  import(\"/modules/cakeFactory.js\")\n    .then((module) => {\n      // Do something with the module.\n      module.oven.makeCupcake(\"sprinkles\");\n      module.oven.makeMuffin(\"large\");\n    });\n});\n```", "```\nlet module = await import(\"/modules/cakeFactory.js\");\n```", "```\nconst btn = document.querySelector('button');\n\nbtn.addEventListener('click', e => {\n  e.preventDefault();\n  import('lodash.sortby')\n    .then(module => module.default)\n    .then(sortInput()) // use the imported dependency\n    .catch(err => { console.log(err) });\n});\n```", "```\n{\n  \"name\": \"js-modules\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A package using JS Modules\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"author\": \"\",\n  \"license\": \"MIT\"\n}\n```", "```\nclass Cake{\n\n    // We can define the body of a class constructor\n    // function by using the keyword constructor\n    // with a list of class variables.\n    constructor( name, toppings, price, cakeSize ){\n        this.name = name;\n        this.cakeSize = cakeSize;\n        this.toppings = toppings;\n        this.price = price;\n    }\n\n    // As a part of ES2015+ efforts to decrease the unnecessary\n    // use of function for everything, you will notice that it is\n    // dropped for cases such as the following. Here an identifier\n    // followed by an argument list and a body defines a new method.\n\n    addTopping( topping ){\n        this.toppings.push( topping );\n    }\n\n    // Getters can be defined by declaring get before\n    // an identifier/method name and a curly body.\n    get allToppings(){\n        return this.toppings;\n    }\n\n    get qualifiesForDiscount(){\n        return this.price > 5;\n    }\n\n    // Similar to getters, setters can be defined by using\n    // the set keyword before an identifier\n    set size( size ){\n        if ( size < 0){\n            throw new Error( \"Cake must be a valid size: \" +\n                                    \"either small, medium or large\");\n        }\n       this.cakeSize = size;\n    }\n}\n\n// Usage\nlet cake = new Cake( \"chocolate\", [\"chocolate chips\"], 5, \"large\" );\n```", "```\nclass BirthdayCake extends Cake {\n  surprise() {\n    console.log(`Happy Birthday!`);\n  }\n}\n\nlet birthdayCake = new BirthdayCake( \"chocolate\", [\"chocolate chips\"], 5,\n  \"large\" );\nbirthdayCake.surprise();\n```", "```\nclass Cookie {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n\n  showTitle() {\n    console.log(`The flavor of this cookie is ${this.flavor}.`);\n  }\n}\n\nclass FavoriteCookie extends Cookie {\n  showTitle() {\n    super.showTitle();\n    console.log(`${this.flavor} is amazing.`);\n  }\n}\n\nlet myCookie = new FavoriteCookie('chocolate');\nmyCookie.showTitle();\n// The flavor of this cookie is chocolate.\n// chocolate is amazing.\n```", "```\nclass CookieWithPrivateField {\n  #privateField;\n}\n\nclass CookieWithPrivateMethod {\n  #privateMethod() {\n    return 'delicious cookies';\n  }\n}\n```", "```\nclass Cookie {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n  static brandName = \"Best Bakes\";\n  static discountPercent = 5;\n}\nconsole.log(Cookie.brandName); //output = \"Best Bakes\"\n```"]