- en: 'Chapter 4\. Constraint Layouts: *Draw Up a Blueprint*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。 约束布局：*绘制蓝图*
- en: '![image](Images/f0121-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0121-01.png)'
- en: '**You don’t build a house without a blueprint.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有蓝图，你不会建造房子。**'
- en: 'And some layouts use **blueprints** to make sure they **look exactly the way
    you want**. In this chapter, we’ll introduce you to Android’s **constraint layout**:
    a **flexible way of designing more complex UIs**. You’ll discover how **constraints**
    and **bias** let you position and size your views, **irrespective of screen size
    and orientation**. You’ll find out how to keep views in their place with **guidelines**
    and **barriers.** Finally, you’ll learn how to pack or spread views with **chains**
    and **flows**. Let’s get designing…'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有些布局使用**蓝图**确保它们**看起来完全符合您的要求**。在本章中，我们将向您介绍 Android 的**约束布局**：一种**灵活的设计更复杂用户界面的方式**。您将了解到如何使用**约束**和**偏置**来定位和调整视图的大小，**无论屏幕尺寸和方向如何**。您将了解如何通过**指南线**和**障碍物**来保持视图的位置。最后，您将学习如何使用**链条**和**流**来打包或展开视图。让我们开始设计吧…
- en: Nested layouts revisited
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视嵌套布局
- en: 'In the previous chapter, you learned that you can nest layouts to build more
    complex screens. The following code, for example, uses nested linear layouts to
    display a text view and edit text in a horizontal row, with an edit text below
    them:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习到可以嵌套布局来构建更复杂的屏幕。例如，以下代码使用嵌套线性布局在水平行中显示文本视图和编辑文本，并在它们下方显示编辑文本：
- en: '![image](Images/f0122-01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0122-01.png)'
- en: Nesting layouts comes at a price
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套布局是有代价的
- en: The down side to nested layouts is that building complex layouts in this way
    can be inefficient, make your code harder to read and maintain, and can also slow
    down your app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套布局的缺点在于，以这种方式构建复杂布局可能效率低下，使您的代码难以阅读和维护，还可能导致应用程序变慢。
- en: 'When Android displays a layout on the device screen, it first checks the structure
    of the layout file, and uses this to build a hierarchy of views. For the nested
    layout shown on the previous page, for example, it builds a hierarchy of views
    that contains two linear layouts, two edit texts, and a text view:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Android 在设备屏幕上显示布局时，它首先检查布局文件的结构，然后使用此结构构建视图层次结构。例如，对于上一页显示的嵌套布局，它构建了包含两个线性布局、两个编辑文本和一个文本视图的视图层次结构：
- en: '![image](Images/f0123-01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0123-01.png)'
- en: Android uses the view hierarchy to help it figure out where each view should
    be placed on the device screen. Each view needs to be measured, laid out, and
    drawn on the screen, and Android needs to make sure each view has enough space
    for its contents, and that any weights are taken into account.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Android 使用视图层次结构来帮助确定每个视图在设备屏幕上的位置。每个视图都需要测量、布局和绘制在屏幕上，并且 Android 需要确保每个视图有足够的空间容纳其内容，并考虑任何权重。
- en: If the layout contains nested layouts, the view hierarchy is more complex, and
    Android may need to make multiple passes in order to figure out how views need
    to be arranged. If the layouts are deeply nested, this can lead to bottlenecks
    in your code, and can leave you with a mass of code that’s difficult to read and
    maintain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果布局包含嵌套布局，则视图层次结构更复杂，Android 可能需要进行多次处理以确定如何排列视图。如果布局深度嵌套，这可能导致代码中的瓶颈，并使您面对难以阅读和维护的大量代码。
- en: If you have a more complex UI like this, an alternative to using nested layouts
    is to use a **constraint layout**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有像这样更复杂的用户界面，可以选择使用**约束布局**而不是嵌套布局。
- en: '**Each view in the layout needs to be initialized, measured, laid out, and
    drawn. In deeply nested layouts, this can slow down your app.**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**布局中的每个视图都需要初始化、测量、布局和绘制。在深度嵌套的布局中，这可能会使您的应用程序变慢。**'
- en: Introducing the constraint layout
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍约束布局
- en: A constraint layout is more complex than a linear or frame layout, but it’s
    way more flexible. It’s also much more efficient for complex UIs as it gives you
    a flatter view hierarchy, which means that Android has less processing to do at
    runtime.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 约束布局比线性布局或帧布局更复杂，但更加灵活。对于复杂的用户界面来说，它更有效率，因为它提供了一个更扁平的视图层次结构，这意味着 Android 在运行时需要处理的内容更少。
- en: You design constraint layouts VISUALLY
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可以视觉化设计约束布局
- en: 'Another advantage of using constraint layouts is that they’re specifically
    designed to work with Android Studio’s design editor. Unlike linear and frame
    layouts where you usually hack directly in XML, you build constraint layouts *visually*.
    You drag and drop views into the design editor’s blueprint, and give it instructions
    for how each view should be displayed:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用约束布局的另一个好处是，它们专门设计用于与Android Studio的设计编辑器配合使用。与线性布局和帧布局不同，你通常需要直接在XML中进行调整，你可以在设计编辑器的蓝图中通过拖放视图来构建约束布局。并为每个视图提供显示指令：
- en: '**Use a constraint layout to build flexible UIs without nesting layouts.**'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**使用约束布局构建灵活的UI，无需嵌套布局。**'
- en: '![image](Images/f0124-01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0124-01.png)'
- en: Unlike linear and frame layouts, constraint layouts are part of a suite of libraries
    known as **Android Jetpack**. You may have already heard something about Jetpack,
    but what is it?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与线性布局和帧布局不同，约束布局是Android Jetpack套件中的一部分。你可能已经听说过Jetpack，但它是什么？
- en: Constraint layouts are part of Android Jetpack
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约束布局是Android Jetpack的一部分
- en: Android Jetpack is a collection of libraries that help you follow best practice,
    reduce boilerplate code, and make your coding life easier. It includes constraint
    layouts, navigation, the Room persistence library (which helps you build databases)
    and lots, lots more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Android Jetpack是一个库集合，帮助你遵循最佳实践，减少样板代码，使编码更轻松。它包括约束布局、导航、Room持久化库（帮助你构建数据库）等等。
- en: 'Here are some of our favorite Jetpack components; you’ll find out how to use
    them in later chapters:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们喜欢的一些Jetpack组件；你将在后面的章节中学习如何使用它们：
- en: '![image](Images/f0125-01.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0125-01.png)'
- en: Another great thing about Jetpack is that it lets you write code that works
    consistently across new and old versions of Android. This is great news for your
    users, as it means that you can include exciting new Android features that will
    work on older devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jetpack的另一个优点是，它使你能够编写能够在新旧Android版本上一致运行的代码。这对你的用户来说是个好消息，因为这意味着你可以包含在较老设备上也能正常工作的新功能。
- en: An example of this is `AppCompatActivity`, which you’ve already been using to
    write activity code. We didn’t mention it earlier, but `AppCompatActivity` is
    part of Android Jetpack. It adds new features to activities across new and old
    versions of Android without you having to worry about backward compatibility.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是`AppCompatActivity`，你已经在使用它来编写活动代码。我们之前没有提到，但`AppCompatActivity`是Android
    Jetpack的一部分。它为新旧版本的Android添加了新功能，而无需担心向后兼容性。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Yes! You’ve already been using part of Android Jetpack without knowing it. You’ll
    learn more about using Jetpack through the rest of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！你在不知不觉中已经在使用Android Jetpack的一部分。在本书的其余部分中，你将学习更多关于如何使用Jetpack的内容。
- en: In this chapter, you’re going to learn how to use constraint layouts. Let’s
    run through what we’re going to do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用约束布局。让我们看看我们要做什么。
- en: Here’s what we’re going to do
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们要做什么
- en: 'We’re going to break learning about constraint layouts into two main parts:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习约束布局的两个主要部分：
- en: '**How to position and size a single view.**'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何定位和调整单个视图的大小。**'
- en: You’ll learn how to use constraints and bias to control how and where a single
    view is shown in its layout.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将学习如何使用约束和偏差来控制单个视图在其布局中显示的位置和方式。
- en: '![image](Images/f0126-01.png)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0126-01.png)'
- en: '**How to position and size multiple views.**'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何定位和调整多个视图的大小。**'
- en: You’ll then apply your knowledge to multiple views, and learn more advanced
    techniques using guidelines, barriers, chains, and flows.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你将应用你的知识到多个视图上，并学习使用准则、障碍物、链条和流的高级技术。
- en: '![image](Images/f0126-02.png)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0126-02.png)'
- en: Create a new project
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: We’re going to use a new project for the app we’re going to build, so create
    one now using the same steps you used in the previous chapters. Choose the Empty
    Activity option, enter a name of “My Constraint Layout” and a package name of
    “com.hfad.myconstraintlayout”, and accept the default save location. Make sure
    the language is set to Kotlin and the minimum SDK is API 21 so it will run on
    most Android devices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为即将构建的应用程序使用一个新项目，因此现在按照前几章的步骤创建一个。选择"空活动"选项，输入名称为“My Constraint Layout”，包名为“com.hfad.myconstraintlayout”，接受默认的保存位置。确保语言设置为Kotlin，最低SDK版本为API
    21，以便在大多数Android设备上运行。
- en: Now that we’ve created the project, let’s make sure that it has been set up
    to use constraint layouts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了项目，让我们确保已经设置好使用约束布局。
- en: Use Gradle to include Jetpack libraries
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gradle 包括 Jetpack 库。
- en: '![image](Images/f0127-01.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0127-01.png)'
- en: To make sure that all the Jetpack libraries—including constraint layouts — work
    across all versions of Android, they’re not included in the main Android SDK.
    Instead, you have to add any libraries you need using **Gradle**. This is a build
    tool that’s used to compile code, configure apps, and fetch any extra libraries
    that your project requires.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保所有 Jetpack 库（包括约束布局）能在所有 Android 版本上正常工作，它们不包含在主 Android SDK 中。相反，你必须使用
    **Gradle** 添加你需要的任何库。这是一个用于编译代码、配置应用程序并获取项目所需任何额外库的构建工具。
- en: Every time you create a new project, Android Studio creates two Gradle files
    named ***build.gradle***.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每次创建新项目时，Android Studio 会创建两个名为 ***build.gradle*** 的 Gradle 文件。
- en: The first version of *build.gradle* lives in the *project* folder, and specifies
    the basic settings of your app, such as what version of the Gradle plug-in to
    use.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*build.gradle* 的第一个版本位于 *project* 文件夹中，并指定你的应用的基本设置，如要使用的 Gradle 插件的版本。'
- en: The second version of *build.gradle* lives in the project’s *app* folder. It’s
    where the majority of the app’s properties are set, such as the API level.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*build.gradle* 的第二个版本位于项目的 *app* 文件夹中。这是设置应用程序大部分属性的地方，如 API 级别。'
- en: '**Behind the scenes, every Android Studio project uses Gradle as its build
    tool.**'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在幕后，每个 Android Studio 项目都使用 Gradle 作为其构建工具。**'
- en: The project build.gradle needs a Google repository line
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目的 build.gradle 需要添加 Google 存储库行。
- en: 'Every project needs to know where to find any extra Jetpack libraries it needs,
    and this is done by adding a reference to the Google repository in the **project**’s
    *build.gradle* file. Android Studio usually does this for you, but you can make
    sure it’s there by opening the file *MyConstraintLayout/build.gradle*, and looking
    for the following line (in bold) in the `repositories` section under `allprojects`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都需要知道在哪里找到它所需的任何额外 Jetpack 库，这是通过在 **项目** 的 *build.gradle* 文件中添加对 Google
    存储库的引用来完成的。Android Studio 通常会为您完成此操作，但您可以通过打开文件 *MyConstraintLayout/build.gradle*，并在
    `allprojects` 下的 `repositories` 部分中查找以下行（加粗）来确保它已经存在：
- en: '![image](Images/f0127-02.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0127-02.png)'
- en: The app build.gradle includes the constraint layout’s library
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用的 `build.gradle` 包括约束布局的库。
- en: 'To use constraint layouts, a reference to its library needs to be included
    in the **app**’s *build.gradle* file. Android Studio should have already added
    this for you, but you can double-check by opening the file *MyConstraintLayout/app/build.gradle*,
    and looking for the following line (in bold) in the `dependencies` section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用约束布局，需要在 **应用** 的 *build.gradle* 文件中包含对其库的引用。Android Studio 应该已经为您添加了这个，但您可以通过打开文件
    *MyConstraintLayout/app/build.gradle*，并在 `dependencies` 部分中查找以下行（加粗）来双重检查：
- en: '![image](Images/f0127-04.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0127-04.png)'
- en: If the file doesn’t include this line, add it now, and click on the Sync Now
    option that appears in the code editor. This syncs any changes you’ve made with
    the rest of your project, and adds the library.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不包含此行，请立即添加，并点击代码编辑器中出现的“立即同步”选项。这将同步你所做的任何更改与项目的其余部分，并添加库。
- en: Let’s add a constraint layout to activity_main.xml
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们向 *activity_main.xml* 添加一个约束布局。
- en: Now that your project is all set up to use constraint layouts, let’s start using
    one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的项目已经设置好使用约束布局，让我们开始使用一个。
- en: 'You add a constraint layout to a layout file using an `**<androidx.constraintlayout.widget.ConstraintLayout>**`
    element. We’re going to use one in the layout file *activity_main.xml*, so open
    this file in the *app/src/main/res/layout* folder, and make sure its code looks
    like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `<androidx.constraintlayout.widget.ConstraintLayout>` 元素将约束布局添加到布局文件中。我们将在
    *app/src/main/res/layout* 文件夹中的布局文件 *activity_main.xml* 中使用它，确保其代码如下所示：
- en: '![image](Images/f0128-01.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0128-01.png)'
- en: Show the layout in the blueprint
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在蓝图中展示布局。
- en: 'We’re going to add views to the layout using the design editor’s blueprint.
    Switch to the design editor by clicking on the Design option, click on the Select
    Design Surface button in the editor’s toolbar, and select the Blueprint option.
    This shows you a blueprint of the layout like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用设计编辑器的蓝图添加视图到布局。通过单击 Design 选项切换到设计编辑器，单击编辑器工具栏中的选择设计表面按钮，并选择蓝图选项。这将显示类似以下的布局蓝图：
- en: '![image](Images/f0128-02.png)![image](Images/f0128-03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0128-02.png)![image](Images/f0128-03.png)'
- en: Add a button to the blueprint
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向蓝图添加一个按钮。
- en: 'We’re going to add a button to the layout. To do this, go to the design editor’s
    palette, find the Button component (it’s usually in the Common section), and drag
    it to the blueprint. You can place the button anywhere in the blueprint, just
    so long as it appears in its main area like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在布局中添加一个按钮。要做到这一点，转到设计编辑器的工具栏，找到按钮组件（通常在“常用”部分），并将其拖动到蓝图中。您可以将按钮放置在蓝图的任何位置，只要它出现在其主要区域即可，就像这样：
- en: '![image](Images/f0129-02.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0129-02.png)'
- en: Position views using constraints
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用约束来定位视图
- en: With a constraint layout, you don’t specify where views should be positioned
    by dropping them on the blueprint in a particular place. Instead, you specify
    placement by defining **constraints**. A **constraint** is a connection or attachment
    that tells the layout where the view should be positioned. You can use a constraint
    to attach a view to the start edge of the layout, for example, or underneath another
    view.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用约束布局时，不需要在蓝图上的特定位置放置视图，而是通过定义**约束**来指定位置。**约束**是告诉布局视图应该放置在哪里的连接或附件。例如，你可以使用约束将视图附加到布局的起始边缘或另一个视图的下方。
- en: We’ll add a horizontal constraint to the button
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将为按钮添加一个水平约束
- en: To see how this works, let’s add a constraint to attach the button to the left
    edge of the layout.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到效果，让我们添加一个约束，将按钮附加到布局的左边缘。
- en: 'First, make sure the button’s selected by clicking it. When you select a view,
    a bounding box is drawn around it, and handles are added to its corners and sides.
    The handles in the corners let you resize the view, and the handles on the sides
    let you add constraints:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保通过点击选中按钮。选中视图后，会在其周围绘制边界框，并添加到其角落和边缘的控制手柄。角落的手柄可用于调整视图的大小，边缘上的手柄可用于添加约束：
- en: '![image](Images/f0130-02.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0130-02.png)'
- en: 'To add a constraint, you click on one of the view’s constraint handles and
    drag it to whatever you want to attach it to. In this case, we’re going to attach
    the left edge of the button to the left edge of the layout, so click on the left
    constraint handle and drag it to the left edge of the blueprint:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加约束，点击视图的约束手柄之一，并将其拖动到要附加到的位置。在这种情况下，我们将按钮的左约束手柄拖动到布局的左边缘：
- en: '![image](Images/f0130-03.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0130-03.png)'
- en: 'This adds the constraint, and pulls the button over to the left:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加约束，并将按钮拉到左侧：
- en: '![image](Images/f0130-04.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0130-04.png)'
- en: That’s how you add a horizontal constraint. Let’s see what happens when you
    add a vertical one.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是添加水平约束的方法。接下来我们看看添加垂直约束会发生什么。
- en: Add a vertical constraint too
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 也添加垂直约束
- en: We’ll use a vertical constraint to attach the button to the top of the layout.
    To do this, click on the button’s top constraint handle, and drag it to the top
    of the blueprint. This adds the vertical constraint, which pulls the button up.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用垂直约束将按钮附加到布局的顶部。要做到这一点，点击按钮的顶部约束手柄，并将其拖动到蓝图的顶部。这将添加垂直约束，将按钮向上拉动。
- en: '![image](Images/f0131-02.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0131-02.png)'
- en: Use opposing constraints to center views
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对称约束来居中视图
- en: As you’ve learned, you can use constraints to attach a view to the edge of the
    blueprint. Each constraint works like a spring that pulls the view to the blueprint’s
    edge.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如同您所学的那样，您可以使用约束将视图附加到蓝图的边缘。每个约束都像拉伸视图到蓝图边缘的弹簧一样工作。
- en: 'If you want to position views in the center of the blueprint, you can do so
    by adding constraints to opposite sides of the view. To center a button horizontally,
    for example, you add one constraint that pulls the view to the left, and another
    that pulls it to the right like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将视图定位在蓝图的中心位置，可以通过向视图的相对边缘添加约束来实现。例如，要水平居中一个按钮，可以添加一个将视图向左拉的约束，以及另一个将其向右拉的约束，如下所示：
- en: '![image](Images/f0133-02.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0133-02.png)'
- en: 'The two constraints pull the button in opposite directions, which centers it
    horizontally like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 两个约束将按钮朝相反方向拉动，使其水平居中，如下所示：
- en: '![image](Images/f0133-03.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0133-03.png)'
- en: 'You can also center a view vertically by adding constraints to its top and
    bottom edges. And if you wanted to center it horizontally and vertically, you’d
    add constraints to all four edges like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将约束添加到其顶部和底部边缘来垂直居中视图。如果要水平和垂直居中视图，则需要添加到所有四个边缘的约束，如下所示：
- en: '![image](Images/f0133-04.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0133-04.png)'
- en: You can delete constraints you no longer need
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可以删除不再需要的约束
- en: 'You can remove any constraints you no longer need by selecting them in the
    blueprint, and deleting them. If you have a button that’s centered in the middle
    of the blueprint, for example, you delete the constraint that’s attached to its
    bottom edge:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在蓝图中选择不再需要的任何约束条件，然后删除它们来删除任何不再需要的约束条件。例如，如果你有一个位于蓝图中央的按钮，你可以删除连接到其底部边缘的约束条件：
- en: '![image](Images/f0134-02.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0134-02.png)'
- en: 'Deleting this constraint means that the button is no longer being pulled toward
    the bottom of the blueprint. The top constraint pulls the button to the top so
    that it’s only centered horizontally, and not vertically:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 删除这个约束条件意味着按钮不再被拉向蓝图底部。顶部约束将按钮拉向顶部，使其仅在水平方向居中，而不是垂直方向：
- en: '![image](Images/f0134-03.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0134-03.png)'
- en: Another way of removing constraints you no longer need is to use the constraint
    widget tool. Let’s see how this works.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种删除不再需要的约束条件的方法是使用约束小部件工具。让我们看看这是如何工作的。
- en: Remove constraints with the constraint widget
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用约束小部件删除约束条件
- en: The constraint widget is displayed in the Attributes panel at the side of the
    design editor. It appears when you select a view, and displays a diagram featuring
    the view’s constraints, and the size of any margins.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 约束小部件显示在设计编辑器侧边的属性面板中。当你选择一个视图时，它会出现，并显示一个包含视图约束和任何边距大小的图表。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll find out more about the Attributes panel a few pages ahead.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在几页后了解有关属性面板的更多信息。
- en: To delete a constraint in the constraint widget, select the view in the blueprint
    you want to remove the constraint from, then click on the constraint’s handle
    in the constraint widget. The constraint is removed, and the view is repositioned
    in the blueprint.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除约束条件，请在约束小部件中选择要从蓝图中删除约束条件的视图，然后单击约束小部件中约束条件的手柄。约束条件被移除，视图在蓝图中重新定位。
- en: '![image](Images/f0135-03.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0135-03.png)'
- en: You can use it to add margins too
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你也可以使用它来添加边距
- en: 'You may have noticed that each of the constraints in the constraint widget
    has a number next to it. This is used to set the margin size for that edge of
    the view so that there’s space between the view and the layout’s edge. To change
    the size of a view’s left and top margins to 24dp, for example, you’d update their
    values in the diagram to 24:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到约束小部件中的每个约束条件旁边都有一个数字。这用于设置视图边缘的边距大小，以便在视图和布局边缘之间留有空间。例如，要将视图的左边和顶部边距大小更改为
    24dp，你需要在图表中更新它们的值为 24：
- en: '![image](Images/f0135-04.png)![image](Images/f0135-05.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0135-04.png)![图片](Images/f0135-05.png)'
- en: You can set a default size for any new margins using the Default Margins button
    in the design editor’s toolbar. Setting this to 24dp, for example, means that
    any new constraints that get added will automatically include a margin of 24dp.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用设计编辑器工具栏中的“默认边距”按钮为任何新边距设置默认大小。例如，将其设置为 24dp，这意味着任何添加的新约束条件将自动包含 24dp 的边距。
- en: '![image](Images/f0135-06.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0135-06.png)'
- en: Changes to the blueprint appear in the XML
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对蓝图的更改会反映在 XML 中
- en: 'When you add views to a blueprint, and specify constraints and margins, they
    get added to the layout’s underlying XML. To see this, switch to the layout’s
    code view. Your code should look something like this (but don’t worry if it’s
    slightly different):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向蓝图添加视图并指定约束和边距时，它们会被添加到布局的底层 XML 中。要查看这一点，请切换到布局的代码视图。你的代码应该看起来像这样（但如果稍有不同也不用担心）：
- en: '![image](Images/f0136-02.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0136-02.png)'
- en: As you can see, the XML now includes a button. Does its code look familiar to
    you? If so, nice catch—it includes attributes that you learned about in [Chapter 3](ch03.xhtml#layoutscolon_being_a_layout).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，XML 现在包含了一个按钮。它的代码看起来是否让你感到熟悉？如果是的话，很好，它包含了你在[第三章](ch03.xhtml#layoutscolon_being_a_layout)中学到的属性。
- en: The button’s width, height, and margins are specified in exactly the same way
    as before, and if you want to, you can change their values in the XML instead
    of using the design editor.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的宽度、高度和边距的指定方式与以前完全相同，如果你愿意，你可以在 XML 中更改它们的值，而不是使用设计编辑器。
- en: 'The only unfamiliar code is the two lines that specify the view’s constraints
    on its start and top edges:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一陌生的代码是指定视图在其开始和顶部边缘上的约束条件的两行代码：
- en: '![image](Images/f0136-03.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0136-03.png)'
- en: Similar code is generated if you add constraints to the button’s remaining edges.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向按钮的其余边缘添加约束条件，将生成类似的代码。
- en: Now that you’ve had a glimpse of what constraint layout XML looks like switch
    back to the design editor, and we’ll look at some more techniques you can use
    to position views.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经一窥约束布局XML的样子，切换回设计编辑器，我们来看看更多可以用来定位视图的技巧。
- en: Views can have bias
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图可以有偏差
- en: As you learned earlier, you can add constraints to opposite sides of a view.
    This centers the view by default, but you can also control its position relative
    to each side by changing its **bias**. This tells Android what the proportionate
    length of each constraint should be on either side of the view.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你之前学到的，你可以在视图的相对两侧添加约束。这默认将视图居中，但你也可以通过改变其**偏差**来控制相对每一侧的位置。这告诉Android每个约束在视图每侧的比例长度。
- en: 'To see this in action, let’s change the button’s horizontal bias so that it’s
    positioned off-center. First, make sure that the button includes constraints on
    its left and right sides like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到效果，请将按钮的水平偏差更改，使其位置偏离中心。首先确保按钮的左右两侧都包含约束，如下所示：
- en: '![image](Images/f0137-02.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0137-02.png)'
- en: Then select the button so the constraint widget is displayed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择按钮，这样约束部件就会显示出来。
- en: Underneath the widget’s diagram of the view, you should see a slider with a
    number in it. This is a percentage of the view’s horizontal bias.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的图表下方，你应该看到一个带有数字的滑块。这是视图水平偏差的百分比。
- en: '![image](Images/f0137-03.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0137-03.png)'
- en: 'To change the bias, simply move the slider. If, say, you move the slider to
    the left so that the number changes to 30, it moves the button in the blueprint
    to the left as well:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变偏差，只需移动滑块。例如，如果你将滑块向左移动，使数字变为30，则蓝图中的按钮也向左移动：
- en: '![image](Images/f0137-04.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0137-04.png)'
- en: The view maintains this relative position irrespective of screen size and orientation.
    Let’s try this out by taking the app for a test drive.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 视图在不考虑屏幕大小和方向的情况下保持相对位置。让我们通过测试应用程序来试一试。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/car.png) 测试驾驶'
- en: When we run the app, a button appears off-center toward the top of the screen.
    It maintains the same relative position when we rotate the device.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，按钮会出现在屏幕顶部偏离中心的位置。旋转设备后，它保持相同的相对位置。
- en: '![image](Images/f0138-02.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0138-02.png)'
- en: You’ve now learned various techniques to control a view’s position on the screen.
    Next up, how to change its size.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了各种控制视图在屏幕上位置的技巧。接下来，我们来看看如何改变它的大小。
- en: You can change a view’s size
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以改变视图的大小
- en: As you might expect, you can change a view’s size in a constraint layout by
    updating its `layout_width` and `layout_height` attributes. You can do this in
    the layout’s XML, or in the design editor’s Attributes panel.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，你可以通过更新其`layout_width`和`layout_height`属性来改变约束布局中视图的大小。你可以在布局的XML中或设计编辑器的属性面板中完成这些操作。
- en: The Attributes panel is displayed to the side of the blueprint. When you select
    a view, it shows you all the attributes that have already been declared (such
    as `layout_width` and `layout_height`), and lets you set ones that haven’t.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 属性面板显示在蓝图的一侧。当你选择一个视图时，它会显示已声明的所有属性（如`layout_width`和`layout_height`），并允许你设置尚未声明的属性。
- en: Make the view just big enough
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使视图刚好足够大
- en: 'Just like with linear and frame layouts, you make a view just large enough
    to display its contents by setting its `layout_width` and `layout_height` properties
    to `wrap_content`. If the view is a button, for example, it makes the button just
    large enough to hold its text:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就像线性布局和帧布局一样，通过将`layout_width`和`layout_height`属性设置为`wrap_content`，可以使视图大小刚好足够显示其内容。例如，如果视图是一个按钮，则使按钮刚好足以容纳其文本：
- en: '![image](Images/f0139-02.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0139-02.png)'
- en: Match the view’s constraints
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配视图的约束
- en: 'If you’ve added constraints to opposite sides of your view, you can make the
    view match the size of its constraints. You do this by setting its `layout_width`
    and/or `layout_height` to 0dp: set `layout_width` to 0dp to make the view match
    its horizontal constraints, and set `layout_height` to 0dp to make it match its
    vertical ones.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在视图的相对两侧添加了约束，你可以使视图与其约束的大小相匹配。方法是将其`layout_width`和/或`layout_height`设置为0dp：将`layout_width`设置为0dp以使视图与其水平约束匹配，并将`layout_height`设置为0dp以使其与垂直约束匹配。
- en: 'In the example below, we’ve set the button’s `layout_width` to 0dp so that
    the button matches its horizontal constraints:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将按钮的`layout_width`设置为0dp，使按钮与其水平约束匹配：
- en: '![image](Images/f0139-03.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0139-03.png)'
- en: Now that you’ve seen how to resize a view, try experimenting with the different
    techniques, then have a go at the exercise on the next page.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到如何调整视图大小，尝试使用不同的技术，然后在下一页的练习中尝试一下。
- en: BE the Constraint
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为约束
- en: '![image](Images/common04.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**Your job is to play like you’re the constraint layout and draw the constraints
    that are needed to produce each layout. You also need to specify the layout_width,
    layout_height, and bias (when needed) for each view. We’ve completed the first
    one for you.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的工作是扮演你是约束布局，绘制出每个布局所需的约束。你还需要为每个视图指定 `layout_width`、`layout_height` 和偏置（在需要时）。我们已经为你完成了第一个。**'
- en: '![image](Images/f0140-01.png)![image](Images/f0141-01.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0140-01.png)![image](Images/f0141-01.png)'
- en: BE the Constraint Solution
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为约束解决方案
- en: '![image](Images/common04.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**Your job is to play like you’re the constraint layout and draw the constraints
    that are needed to produce each layout. You also need to specify the layout_width,
    layout_height, and bias (when needed) for each view. We’ve completed the first
    one for you.**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的工作是扮演你是约束布局，绘制出每个布局所需的约束。你还需要为每个视图指定 `layout_width`、`layout_height` 和偏置（在需要时）。我们已经为你完成了第一个。**'
- en: '![image](Images/f0142-01.png)![image](Images/f0143-01.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0142-01.png)![image](Images/f0143-01.png)'
- en: Most layouts need multiple views
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大多数布局需要多个视图
- en: '![image](Images/f0144-01.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0144-01.png)'
- en: So far you’ve seen how to position and size a single view in a constraint layout.
    Most of the time, however, your layout will need to contain multiple views that
    are laid out relative to one another.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到如何在约束布局中定位和调整一个视图的大小。然而，大多数时候，你的布局需要包含多个相互布局的视图。
- en: 'To see how this works, first make sure that your constraint layout includes
    a single button with two constraints: one that connects its top edge to the top
    of the blueprint, and another that connects its left edge to the blueprint’s left
    side. Its `layout_width` and `layout_height` properties should be set to `wrap_content`,
    and the margins for these edges should be set to 24dp.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这一点是如何工作的，首先确保你的约束布局中包含一个按钮，并且有两个约束：一个将其顶部边缘连接到蓝图的顶部，另一个将其左边缘连接到蓝图的左侧。其
    `layout_width` 和 `layout_height` 属性应设置为 `wrap_content`，这些边缘的间距应该设置为 24dp。
- en: 'After you’ve made these changes, the button should be positioned in the blueprint’s
    top-left corner like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做了这些更改之后，按钮应该像这样定位在蓝图的左上角：
- en: '![image](Images/f0144-02.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0144-02.png)'
- en: Add a second button to the blueprint
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向蓝图添加第二个按钮
- en: 'Next, add a second button to the blueprint by dragging one from the palette,
    and placing it somewhere underneath the first button like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过从调色板中拖动一个按钮，并将其放置在第一个按钮的下方，如下所示，向蓝图添加第二个按钮：
- en: '![image](Images/f0144-03.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0144-03.png)'
- en: The blueprint now includes two buttons. Let’s find out how to position them
    relative to one another.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图现在包含两个按钮。让我们找出如何相互定位它们。
- en: You can connect views to other views
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以将视图连接到其他视图
- en: As you already know, constraints let you attach a view to the edge of its blueprint.
    You can also use constraints to connect two views together, and this is used to
    specify how they should be displayed relative to one another.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知道的，约束可以让你将视图附加到其蓝图的边缘。你也可以使用约束将两个视图连接在一起，这用于指定它们之间的显示方式。
- en: 'To see how this works, select the second button in the blueprint, then draw
    a constraint that goes from the second button’s top edge to the first button’s
    bottom edge like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这一点，选择蓝图中的第二个按钮，然后绘制一个约束，从第二个按钮的顶部边缘到第一个按钮的底部边缘，如下所示：
- en: '![image](Images/f0145-02.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0145-02.png)'
- en: 'When the constraint is added, it pulls the button up so that it’s connected
    to the first, and displayed underneath it:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加约束时，它会将按钮拉起，使其连接到第一个按钮，并显示在其下方：
- en: '![image](Images/f0145-03.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0145-03.png)'
- en: The constraint means that the second button will always be positioned under
    the first, irrespective of the first button’s position on the device screen.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该约束意味着第二个按钮将始终位于第一个按钮下方，无论第一个按钮在设备屏幕上的位置如何。
- en: Once you’ve positioned two views in this way, the next thing you might want
    to do is make sure that they’re aligned. Let’s find out how to do this.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你以这种方式定位了两个视图，接下来你可能想要做的是确保它们对齐。让我们找出如何做到这一点。
- en: You can align views too
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你也可以对视图进行对齐
- en: The simplest way of aligning two views is to use the Align button in the design
    editor’s toolbar.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐两个视图最简单的方法是使用设计编辑器工具栏中的对齐按钮。
- en: 'To see how this works, let’s left-align the two buttons in the blueprint so
    that their left edges line up. First, select both buttons by holding down the
    Shift key as you click on each one. Then click on the Align button to open up
    a set of alignment options like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这是如何工作的，请将蓝图中的两个按钮左对齐，使它们的左边缘对齐。首先，通过按住Shift键选择两个按钮。然后点击对齐按钮，打开一组对齐选项，就像这样：
- en: '![image](Images/f0146-02.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0146-02.png)'
- en: 'Click on the Left Edges option to left-align the two buttons. This adds a constraint
    to the blueprint that connects their left edges together like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“左对齐”选项，将两个按钮左对齐。这样会在蓝图中添加一个约束，将它们的左边缘连接在一起，就像这样：
- en: '![image](Images/f0146-03.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0146-03.png)'
- en: Align views using guidelines
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用准线对齐视图
- en: Another technique you can use to align views is a **guideline**. This is a fixed
    line you add to the blueprint that you can use to constrain views. It’s only visible
    in the design editor, so users don’t see it when they run the app.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种对齐视图的技术是**准线**。这是在蓝图中添加的固定线，可以用来约束视图。它在设计编辑器中可见，用户运行应用时看不到。
- en: 'Let’s explore how guidelines work by adding one to the blueprint. Click on
    the Guidelines button in the design editor’s toolbar, and choose the option to
    add a vertical guideline. This places a vertical guideline in the blueprint:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向蓝图添加一个准线来探讨准线的工作方式。点击设计编辑器工具栏中的准线按钮，并选择添加垂直准线选项。这会在蓝图中放置一个垂直准线：
- en: '![image](Images/f0147-02.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0147-02.png)'
- en: 'Once the guideline has been added, you can move it elsewhere by dragging it.
    You can set it to be either a fixed distance from the blueprint’s edge, or a fixed
    percentage:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 添加准线后，您可以通过拖动它将其移动到其他位置。您可以将其设置为距离蓝图边缘的固定距离，或者固定百分比：
- en: '![image](Images/f0147-03.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0147-03.png)'
- en: 'You can then use constraints to attach views to the guideline like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用约束将视图附加到准线，就像这样：
- en: '![image](Images/f0147-04.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0147-04.png)'
- en: Guidelines have a fixed position
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准线有固定的位置
- en: Guidelines are either positioned a fixed distance from the blueprint’s edge,
    or a fixed percentage between the two. They stay in that position when the app
    runs, so they’re a useful way of aligning views.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 准线可以位于蓝图边缘的固定距离，或两者之间的固定百分比。它们在应用运行时保持在那个位置，因此它们是对齐视图的有用方式。
- en: 'In some situations, you need something that’s a little more flexible. As an
    example, suppose you have a layout that includes two multi-line edit texts, side
    by side, with a button underneath like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您需要更灵活的东西。例如，假设您有一个包含两个并排多行编辑文本和一个按钮的布局，就像这样：
- en: '![image](Images/f0148-02.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0148-02.png)'
- en: 'The edit texts expand vertically as the user enters text. You want the button
    to move as the views change size so that it’s always positioned beneath them like
    so:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户输入文本，编辑文本会垂直扩展。您希望按钮随着视图的大小变化而移动，以便始终位于它们的下方，就像这样：
- en: '![image](Images/f0148-03.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0148-03.png)'
- en: So how can you build this sort of layout?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您如何构建这种布局呢？
- en: Create a movable barrier
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可移动的屏障
- en: To create layouts like this, you can use a **barrier**. This is like a guideline,
    except that it doesn’t have a fixed position. Instead, it forms a barrier against
    views, and moves when they change size. This repositions any views that are constrained
    to the barrier.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这样的布局，您可以使用**屏障**。这类似于准线，但它没有固定位置。相反，它形成对视图的屏障，并在它们改变大小时移动。这会重新定位任何被约束到屏障的视图。
- en: 'In the example on the previous page, the two edit texts are placed above a
    horizontal barrier, and the button is constrained beneath it. As the edit texts
    expand, the barrier moves down and repositions the button:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一页的示例中，两个编辑文本放置在一个水平屏障上方，按钮被约束在其下方。随着编辑文本的扩展，屏障移动并重新定位按钮：
- en: '![image](Images/f0149-02.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0149-02.png)'
- en: Let’s build a layout that uses a barrier
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们构建一个使用屏障的布局
- en: To see how barriers work, let’s create this example.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解屏障的工作原理，请创建此示例。
- en: First, delete any views, and make sure the blueprint includes a vertical guideline
    positioned at 50%. Then drag two multi-line edit texts from the palette, and position
    them on either side of the guideline.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除任何视图，并确保蓝图包含一个垂直准线，位置位于50%。然后从工具栏拖动两个多行编辑文本，并将它们放置在准线的两侧。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can usually find these in the “Text” part of the palette, listed as “Multiline
    Text.”
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您通常可以在调色板的“文本”部分找到它们，列为“多行文本”。
- en: Next, add vertical constraints to constrain each view to the top of the blueprint,
    and horizontal constraints to position each one between the blueprint’s edge and
    the guideline.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加垂直约束以将每个视图约束到蓝图的顶部，并添加水平约束以将每个视图放置在蓝图边缘和指导线之间。
- en: Finally, change the `layout_width` of each edit text to 0dp so that it matches
    its horizontal constraints, and set their `layout_height`s to “wrap_content” so
    that the views can expand.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将每个编辑文本的`layout_width`更改为0dp，以匹配其水平约束，并将它们的`layout_height`设置为“wrap_content”，以便视图可以扩展。
- en: 'When you’re done, the blueprint should look something like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，蓝图应该是这个样子：
- en: '![image](Images/f0149-04.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0149-04.png)'
- en: Add a horizontal barrier
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个水平屏障
- en: 'We need to add a horizontal barrier to the blueprint. To do this, click on
    the Guidelines button in the design editor toolbar, and choose the option to add
    a horizontal barrier:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在蓝图中添加一个水平屏障。要做到这一点，请点击设计编辑器工具栏中的“指南线”按钮，并选择添加水平屏障的选项：
- en: '![image](Images/f0150-02.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0150-02.png)'
- en: This creates the horizontal barrier.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就创建了水平屏障。
- en: Place the barrier beneath the views
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将屏障放置在视图下方
- en: 'We want the barrier to move down as the two edit text views expand. To do this,
    go to the layout’s component tree panel, and drag the two edit text components
    onto the barrier:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望屏障随着两个编辑文本视图的扩展而向下移动。为此，请转到布局的组件树面板，将两个编辑文本组件拖放到屏障上：
- en: '![image](Images/f0150-03.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0150-03.png)'
- en: 'This doesn’t change the position of the edit text views in the blueprint: it
    simply tells the barrier that it needs to move with these views.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会改变蓝图中编辑文本视图的位置，而是告诉屏障它需要随这些视图移动。
- en: 'Next, we need to position the barrier so that it’s at the bottom of the two
    views. Select the barrier in the component tree, and use the Attributes panel
    to change its `barrierDirection` attribute to “bottom.” This positions the barrier
    below the two edit texts so that the blueprint looks like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将屏障定位到两个视图的底部。在组件树中选择屏障，并使用属性面板将其`barrierDirection`属性更改为“bottom”。这将使屏障位于两个编辑文本的下方，使蓝图看起来像这样：
- en: '![image](Images/f0150-04.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0150-04.png)'
- en: Constrain a button under the barrier
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个按钮约束在屏障下方
- en: Now that the layout’s barrier is in place, let’s add the button, and constrain
    it to the barrier so that it moves down as the edit text views expand.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在布局的屏障已经就位，让我们添加按钮，并将其约束到屏障上，以便在编辑文本视图扩展时向下移动。
- en: 'First drag a button from the palette to the blueprint, and place it somewhere
    underneath the barrier. Then center it horizontally by adding two horizontal constraints
    that connect the button’s sides to the edges of the blueprint like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从调色板中拖动一个按钮到蓝图中，并将其放置在屏障下方的某个位置。然后通过添加两个水平约束，将按钮的两侧连接到蓝图的边缘，使其水平居中，操作如下：
- en: '![image](Images/f0151-02.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0151-02.png)'
- en: Next, you need to attach the top of the button to the barrier. You can try doing
    this by drawing the constraint directly in the blueprint. If, like us, you find
    this a bit too fiddly, select the button, search for its `layout_constraintTop_toBottomOf`
    attribute in the Attributes panel, and change its value to the barrier’s ID (in
    our case, this is `@id/barrier`).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将按钮的顶部连接到屏障。您可以尝试直接在蓝图中绘制约束来完成此操作。如果像我们一样觉得这有点麻烦，请选择按钮，在属性面板中搜索其`layout_constraintTop_toBottomOf`属性，并将其值更改为屏障的ID（在我们的情况下，这是`@id/barrier`）。
- en: '![image](Images/f0151-03.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0151-03.png)'
- en: 'After you make this change, the blueprint should look something like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些更改后，蓝图应该看起来像这样：
- en: '![image](Images/f0151-04.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0151-04.png)'
- en: As barriers can be quite tricky to work with at first, we’ll show you our complete
    XML over the next couple pages, and then take the app for a test drive.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 由于刚开始使用屏障可能会有些棘手，我们将在接下来的几页中展示我们的完整XML，并进行应用程序的测试。
- en: The full code for activity_main.xml
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*activity_main.xml*的完整代码如下：'
- en: 'Here’s our complete code for *activity_main.xml*; if you want your blueprint
    to look like ours, replace the contents of this file so that it matches the code
    shown here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的*activity_main.xml*的完整代码；如果你希望你的蓝图看起来像我们的一样，请替换此文件的内容，使其与此处显示的代码匹配：
- en: '![image](Images/f0152-02.png)![image](Images/f0153-02.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0152-02.png)![image](Images/f0153-02.png)'
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) Test Drive'
- en: When we run the app, a button is displayed beneath two edit text views. The
    button moves down when we type into each edit text, and the views expand.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，按钮显示在两个编辑文本视图下方。当我们在每个编辑文本中输入内容时，按钮会向下移动，并且视图会扩展。
- en: As you can see, adding a barrier is a bit more complicated than drawing constraints
    and aligning views, but we think it’s worth the extra effort.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，添加屏障比绘制约束和对齐视图更复杂，但我们认为这是值得额外努力的。
- en: So what’s next?
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来做什么？
- en: '![image](Images/f0153-03.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0153-03.png)'
- en: Use a chain to control a linear group of views
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用链条来控制一组线性视图
- en: You’ve now learned how to connect and align views, and use guidelines and constraints.
    But what if you want to create a row or column of views, and evenly space them
    out?
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经学会了如何连接和对齐视图，并使用指南和约束。但是如果您想创建一行或一列视图，并将它们均匀间隔开来，该怎么办呢？
- en: In this sort of situation, you can use a **chain**. This is a linear group of
    views that are linked together with bidirectional constraints. The chain controls
    each view’s position, so you can use it to evenly space the views out, or pack
    them in the center of the blueprint.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您可以使用**链条**。这是一组线性视图，通过双向约束连接在一起。链条控制每个视图的位置，因此您可以使用它来均匀间隔视图或将它们打包在蓝图的中心。
- en: We’re going to create a horizontal chain
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将创建一个水平链条
- en: 'To see how this works, we’re going to create a chain that controls the position
    of three buttons. The buttons will be lined up in a horizontal row, and evenly
    spaced between each side of the blueprint like this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解其工作原理，我们将创建一个链条，以控制三个按钮的位置。这些按钮将水平排列，并在蓝图的两侧均匀间隔，如下所示：
- en: '![image](Images/f0154-02.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0154-02.png)'
- en: 'When the app runs, the buttons will maintain their relative positions, regardless
    of screen size or orientation:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时，按钮将保持它们的相对位置，无论屏幕大小或方向如何：
- en: '![image](Images/f0154-03.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0154-03.png)'
- en: Let’s find out how to create a chain.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建链条。
- en: The chain will use three buttons
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链条将使用三个按钮
- en: Before we create the chain, first remove all of the constraints that have been
    added to the blueprint so far. The quickest way of doing this is with the Clear
    All Constraints button in the design editor’s toolbar, so click on this button
    now.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建链条之前，首先移除到目前为止已添加到蓝图中的所有约束。最快的方法是使用设计编辑器工具栏中的“清除所有约束”按钮，所以现在点击此按钮。
- en: '![image](Images/f0155-02.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0155-02.png)'
- en: You also need to get rid of any guidelines, barriers, and edit text views. Do
    this by selecting each one, and deleting it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要清除任何指南、屏障和编辑文本视图。通过选择每个视图并将其删除来完成此操作。
- en: Then add two more buttons to the blueprint so there are three in total, and
    use the “Orientation for Preview” button in the design editor’s toolbar to change
    the blueprint’s orientation to landscape. This will make it easier to see the
    chain.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在蓝图中添加两个额外的按钮，以确保总共有三个按钮，并使用设计编辑器工具栏中的“预览方向”按钮将蓝图的方向更改为横向。这将使链条更容易看到。
- en: '![image](Images/f0155-03.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0155-03.png)'
- en: 'When you’ve added the buttons, the blueprint should look something like this:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加了按钮后，蓝图应该看起来像这样：
- en: '![image](Images/f0155-04.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0155-04.png)'
- en: Align the views we’re going to chain
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对我们打算链条的视图进行对齐
- en: Chains work best when views are aligned. First, add a constraint that connects
    the first button to the top of the blueprint, and set its margin to 64\. Then
    select all three buttons, and use the Align button in the design editor’s toolbar
    to align their top edges. The blueprint should look like this.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 链条在视图对齐时效果最佳。首先，添加一个约束将第一个按钮连接到蓝图的顶部，并将其边距设置为64像素。然后选择所有三个按钮，并在设计编辑器工具栏中使用对齐按钮将它们的顶部对齐。蓝图应该看起来像这样。
- en: '![image](Images/f0155-05.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0155-05.png)'
- en: Now that the buttons are nicely aligned, let’s go ahead and create the chain.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按钮已经很好地对齐，让我们继续创建链条。
- en: Create the horizontal chain
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建水平链条
- en: To create the chain, select all three buttons, then right-click on one of them.
    From the menu that appears, choose the Chains option, followed by Create Horizontal
    Chain.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建链条，请选择所有三个按钮，然后右键单击其中一个。在出现的菜单中，选择“Chains”选项，然后选择“Create Horizontal Chain”。
- en: '![image](Images/f0156-02.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0156-02.png)'
- en: 'When the horizontal chain is created, it joins the buttons together, and fastens
    the first and last view to the blueprint’s vertical edges. The chain should look
    something like this:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建水平链条后，它将连接按钮，并将第一个和最后一个视图固定在蓝图的垂直边缘上。链条应该看起来像这样：
- en: '![image](Images/f0156-03.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0156-03.png)'
- en: By default, views in a chain are evenly spaced out between the blueprint’s edges.
    You can change this behavior by right-clicking on one of the chain’s views, selecting
    the Chains option from the menu that appears, and then choosing Horizontal Chain
    Style.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，链中的视图在蓝图的边缘之间均匀分布。您可以通过右键单击链中的一个视图，从显示的菜单中选择链选项，然后选择水平链样式来更改此行为。
- en: Possible chain style options include spread, spread inside, and packed. See
    if you can work out what these options do by having a go at the following exercise.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的链样式选项包括spread、spread inside和packed。通过尝试以下练习，看看您是否能理解这些选项的作用。
- en: There are different styles of chain
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有不同风格的链
- en: As you have discovered, you can choose different chain styles to change how
    a chain arranges its views.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您发现的那样，您可以选择不同的链样式来更改链如何安排其视图。
- en: Spread spaces out views between the blueprint’s edges
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spread将视图间隔开来，直到达到蓝图的边缘
- en: 'The default style is **spread**. This is used to evenly distribute the views
    between the blueprint’s edges like this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 默认样式是**spread**。这用于在蓝图的边缘之间均匀分布视图，如此所示：
- en: '![image](Images/f0159-02.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0159-02.png)'
- en: Spread inside moves the first and last view to the edges
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spread inside将第一个和最后一个视图移到边缘
- en: 'The **spread inside** style is similar to spread, except that it moves the
    first and last view to the blueprint’s edges. It then evenly spaces out any remaining
    views like so:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**spread inside**风格类似于spread，但它将第一个和最后一个视图移到蓝图的边缘。然后均匀地间隔任何剩余的视图，如下所示：'
- en: '![image](Images/f0159-03.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0159-03.png)'
- en: Packed moves the views together
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Packed将视图移动到一起
- en: 'The **packed** style is used to pack views together. It then centers the entire
    group of views like this:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**packed**样式用于将视图打包在一起。然后将整个视图组居中，如此所示：'
- en: '![image](Images/f0159-04.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0159-04.png)'
- en: Now that you’ve seen what these options do, let’s take the app for a test drive.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到这些选项的作用，请让我们测试一下应用程序。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/car.png) 测试驾驶'
- en: When we use the spread style of chain and run the app, the buttons are evenly
    spread in the device screen. This is irrespective of screen orientation.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用链的spread样式并运行应用程序时，按钮在设备屏幕上均匀分布。这与屏幕方向无关。
- en: '![image](Images/f0160-02.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0160-02.png)'
- en: '**Always test layouts on a variety of device sizes and orientations to make
    sure they look and behave how you want.**'
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**始终在各种设备大小和方向上测试布局，以确保其外观和行为符合预期。**'
- en: '**She’s right.**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**她是对的。**'
- en: Constraint layouts can include both horizontal and vertical chains, and a single
    view can belong to both types. You can use this to arrange views in a grid.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 约束布局可以包括水平和垂直链，并且单个视图可以属于两种类型。您可以使用这个功能来安排视图在网格中。
- en: 'The blueprint below, for example, shows six buttons arranged in a grid. Each
    row is a horizontal chain, and the leftmost buttons form a vertical chain:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的蓝图显示了一个网格中排列的六个按钮。每一行都是水平链，而最左边的按钮形成了垂直链：
- en: '![image](Images/f0161-02.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0161-02.png)'
- en: Another way in which you can create grids is to use a **flow**. Let’s find out
    what this is, and how to use it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种创建网格的方法是使用**flow**。让我们找出这是什么，以及如何使用它。
- en: A flow is like a multi-line chain
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: flow类似于多行链
- en: A flow is like a chain that can span multiple rows. It’s invaluable when, say,
    you want to display lots of views in a row, but they might not fit on the screen
    for some screen sizes or orientations.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: flow类似于一个可以跨越多行的链。当您想在一行中显示大量视图，但是在某些屏幕大小或方向上可能不适合时，这将非常有价值。
- en: 'As an example, suppose you have a chain that displays six buttons in a horizontal
    row. When the orientation is landscape, they are displayed like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个链，它在水平排列中显示六个按钮。当方向是横向时，它们显示如下：
- en: '![image](Images/f0162-02.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0162-02.png)'
- en: 'But when the orientation is changed to portrait, there’s not enough room to
    display all of the views:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当方向改变为纵向时，没有足够的空间来显示所有的视图：
- en: '![image](Images/f0162-03.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0162-03.png)'
- en: 'If you replace the chain with a flow, any views that can’t fit on the first
    row will flow onto a second row like this:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您用flow替换链，任何无法适合第一行的视图将流到第二行，如此所示：
- en: '![image](Images/f0162-04.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0162-04.png)'
- en: Let’s see how flows work by building the above layout.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过构建上面的布局来看一下flows是如何工作的。
- en: How to add a flow
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何添加一个flow
- en: 'First, remove any constraints by clicking on the Clear All Constraints button
    in the design editor’s toolbar. Then add extra buttons to the blueprint so there
    are six in total like this:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在设计编辑器工具栏中点击“清除所有约束”按钮来移除所有约束。然后向蓝图添加额外的按钮，总共六个，就像这样：
- en: '![image](Images/f0163-02.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0163-02.png)'
- en: Next, select all of the buttons, click on the Guidelines button in the design
    editor’s toolbar, and choose the Flow option. This adds the flow component.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择所有按钮，在设计编辑器工具栏中点击“指南线”按钮，选择“流”选项。这将添加流组件。
- en: We now need to tweak the flow component’s settings to make it behave the way
    we want. To do this, select the flow in the component tree, then use the blueprint
    or constraint widget to add constraints to connect its sides and top to the edges
    of the blueprint. Change its `layout_width` attribute to “0dp” so that it matches
    its constraints. Finally, search for its `flow_wrapMode` attribute in the Attributes
    panel, and set this to “chain”.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要调整流组件的设置，使其按我们希望的方式运行。为此，请在组件树中选择流，然后使用蓝图或约束部件将其边缘和顶部连接起来添加约束。将其`layout_width`属性设置为“0dp”，以便与其约束匹配。最后，在属性面板中搜索其`flow_wrapMode`属性，并将其设置为“chain”。
- en: 'When you’ve made all of these changes, the blueprint should look something
    like this when the orientation is landscape:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成所有这些更改后，蓝图在横屏时应该看起来像这样：
- en: '![image](Images/f0163-03.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0163-03.png)'
- en: 'If you change the orientation to portrait, the blueprint should look like this
    instead:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将方向改为竖屏，则蓝图应该如下所示：
- en: '![image](Images/f0163-04.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0163-04.png)'
- en: Once you’ve created a flow, you can tweak the way in which it displays its views.
    Let’s see how.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 创建流后，你可以调整它显示视图的方式。让我们看看如何操作。
- en: You can control the flow’s appearance
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以控制流的外观
- en: The main way in which you can alter the flow’s appearance is with its `**flow_wrapMode**`
    attribute.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过其`**flow_wrapMode**`属性来更改流的外观。
- en: Use “chain” to create a multi-line chain
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用“chain”创建多行链条
- en: If you set the `flow_wrapMode` attribute to `chain`, the flow behaves like a
    flexible chain that lets its views flow onto extra rows.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`flow_wrapMode`属性设置为`chain`，则流将像灵活的链条一样运行，允许其视图流入额外的行。
- en: 'With this option, you can make further changes to the flow’s appearance by
    changing the value of its `flow_horizontalStyle` attribute. Possible options for
    this attribute are spread, spread inside, and packed. These have exactly the same
    effect as when you used them with chains. The packed option, for example, packs
    the views together like this:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项，可以通过更改其`flow_horizontalStyle`属性的值来进一步调整流的外观。此属性的可能选项有spread、spread inside和packed。例如，packed选项会将视图紧密打包在一起，如此显示：
- en: '![image](Images/f0164-02.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0164-02.png)'
- en: Use “aligned” to line up the views
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用“aligned”来对齐视图
- en: 'If you set the `flow_wrapMode` attribute to `aligned`, the views flow onto
    extra rows, and they are lined up like this:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`flow_wrapMode`属性设置为`aligned`，则视图将流入额外的行，并且会像这样对齐排列：
- en: '![image](Images/f0164-03.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0164-03.png)'
- en: You can also set the `flow_wrapMode` attribute to `none` or leave it unset.
    This makes the flow behave like a normal chain so that its views don’t flow onto
    a second row.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将`flow_wrapMode`属性设置为`none`或者不设置。这使得流行为正常链条，以便其视图不会流入第二行。
- en: The full code for activity_main.xml
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: activity_main.xml的完整代码
- en: 'Flows can sometimes be a little tricky to get right, so here’s our full code
    for *activity_main.xml*; if you want to, replace the code for this file so it
    matches the code shown here:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 有时流可能会有点棘手，所以这是我们*activity_main.xml*的完整代码；如果需要，请使用此处显示的代码替换该文件的代码：
- en: '![image](Images/f0165-02.png)![image](Images/f0166-02.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0165-02.png)![image](Images/f0166-02.png)'
- en: Let’s take the app for a test drive.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下这个应用程序。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) 测试驾驶'
- en: When we use the chain style of flow and run the app, the buttons are evenly
    spread in the device screen when the orientation is landscape.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用链条风格的流并运行应用程序时，在横屏方向上，按钮在设备屏幕上均匀分布。
- en: When we change the orientation to portrait, any buttons that don’t fit onto
    the first row flow onto the second.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将方向改为竖屏时，无法放在第一行的按钮会流入第二行。
- en: '![image](Images/f0167-02.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0167-02.png)'
- en: Congratulations! You’ve now learned how to design super-flexible screens using
    constraint layouts. As well as looking and behaving the way you want, they don’t
    use nested layouts, so they’re extremely efficient.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经学会了如何使用约束布局设计超级灵活的屏幕。它们不仅能够按照你的意愿外观和行为，而且不使用嵌套布局，因此非常高效。
- en: '**Before you move on to the next chapter, why not put your new skills into
    practice, and try experimenting with some of the techniques you’ve learned?**'
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在你进入下一章之前，为什么不将你的新技能付诸实践，并尝试一些你学到的技术呢？**'
- en: Your Android Toolbox
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的Android工具箱
- en: '![image](Images/tools.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/tools.png)'
- en: '**You’ve got [Chapter 4](#constraint_layoutscolon_draw_up_a_bluepr) under your
    belt and now you’ve added constraint layouts to your toolbox.**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经掌握了[第四章](#constraint_layoutscolon_draw_up_a_bluepr)，并且现在已经将约束布局添加到你的工具箱中。**'
- en: '![image](Images/f0168-01.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0168-01.png)'
