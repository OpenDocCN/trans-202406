- en: 'Chapter 4\. Constraint Layouts: *Draw Up a Blueprint*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0121-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
- en: '**You don’t build a house without a blueprint.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'And some layouts use **blueprints** to make sure they **look exactly the way
    you want**. In this chapter, we’ll introduce you to Android’s **constraint layout**:
    a **flexible way of designing more complex UIs**. You’ll discover how **constraints**
    and **bias** let you position and size your views, **irrespective of screen size
    and orientation**. You’ll find out how to keep views in their place with **guidelines**
    and **barriers.** Finally, you’ll learn how to pack or spread views with **chains**
    and **flows**. Let’s get designing…'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Nested layouts revisited
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned that you can nest layouts to build more
    complex screens. The following code, for example, uses nested linear layouts to
    display a text view and edit text in a horizontal row, with an edit text below
    them:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0122-01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Nesting layouts comes at a price
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The down side to nested layouts is that building complex layouts in this way
    can be inefficient, make your code harder to read and maintain, and can also slow
    down your app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'When Android displays a layout on the device screen, it first checks the structure
    of the layout file, and uses this to build a hierarchy of views. For the nested
    layout shown on the previous page, for example, it builds a hierarchy of views
    that contains two linear layouts, two edit texts, and a text view:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0123-01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Android uses the view hierarchy to help it figure out where each view should
    be placed on the device screen. Each view needs to be measured, laid out, and
    drawn on the screen, and Android needs to make sure each view has enough space
    for its contents, and that any weights are taken into account.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: If the layout contains nested layouts, the view hierarchy is more complex, and
    Android may need to make multiple passes in order to figure out how views need
    to be arranged. If the layouts are deeply nested, this can lead to bottlenecks
    in your code, and can leave you with a mass of code that’s difficult to read and
    maintain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: If you have a more complex UI like this, an alternative to using nested layouts
    is to use a **constraint layout**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**Each view in the layout needs to be initialized, measured, laid out, and
    drawn. In deeply nested layouts, this can slow down your app.**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introducing the constraint layout
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A constraint layout is more complex than a linear or frame layout, but it’s
    way more flexible. It’s also much more efficient for complex UIs as it gives you
    a flatter view hierarchy, which means that Android has less processing to do at
    runtime.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: You design constraint layouts VISUALLY
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another advantage of using constraint layouts is that they’re specifically
    designed to work with Android Studio’s design editor. Unlike linear and frame
    layouts where you usually hack directly in XML, you build constraint layouts *visually*.
    You drag and drop views into the design editor’s blueprint, and give it instructions
    for how each view should be displayed:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Use a constraint layout to build flexible UIs without nesting layouts.**'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![image](Images/f0124-01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Unlike linear and frame layouts, constraint layouts are part of a suite of libraries
    known as **Android Jetpack**. You may have already heard something about Jetpack,
    but what is it?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Constraint layouts are part of Android Jetpack
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Jetpack is a collection of libraries that help you follow best practice,
    reduce boilerplate code, and make your coding life easier. It includes constraint
    layouts, navigation, the Room persistence library (which helps you build databases)
    and lots, lots more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of our favorite Jetpack components; you’ll find out how to use
    them in later chapters:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0125-01.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Another great thing about Jetpack is that it lets you write code that works
    consistently across new and old versions of Android. This is great news for your
    users, as it means that you can include exciting new Android features that will
    work on older devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: An example of this is `AppCompatActivity`, which you’ve already been using to
    write activity code. We didn’t mention it earlier, but `AppCompatActivity` is
    part of Android Jetpack. It adds new features to activities across new and old
    versions of Android without you having to worry about backward compatibility.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Yes! You’ve already been using part of Android Jetpack without knowing it. You’ll
    learn more about using Jetpack through the rest of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’re going to learn how to use constraint layouts. Let’s
    run through what we’re going to do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to break learning about constraint layouts into two main parts:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**How to position and size a single view.**'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll learn how to use constraints and bias to control how and where a single
    view is shown in its layout.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0126-01.png)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**How to position and size multiple views.**'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll then apply your knowledge to multiple views, and learn more advanced
    techniques using guidelines, barriers, chains, and flows.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0126-02.png)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Create a new project
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re going to use a new project for the app we’re going to build, so create
    one now using the same steps you used in the previous chapters. Choose the Empty
    Activity option, enter a name of “My Constraint Layout” and a package name of
    “com.hfad.myconstraintlayout”, and accept the default save location. Make sure
    the language is set to Kotlin and the minimum SDK is API 21 so it will run on
    most Android devices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve created the project, let’s make sure that it has been set up
    to use constraint layouts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Use Gradle to include Jetpack libraries
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0127-01.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: To make sure that all the Jetpack libraries—including constraint layouts — work
    across all versions of Android, they’re not included in the main Android SDK.
    Instead, you have to add any libraries you need using **Gradle**. This is a build
    tool that’s used to compile code, configure apps, and fetch any extra libraries
    that your project requires.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Every time you create a new project, Android Studio creates two Gradle files
    named ***build.gradle***.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The first version of *build.gradle* lives in the *project* folder, and specifies
    the basic settings of your app, such as what version of the Gradle plug-in to
    use.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The second version of *build.gradle* lives in the project’s *app* folder. It’s
    where the majority of the app’s properties are set, such as the API level.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**Behind the scenes, every Android Studio project uses Gradle as its build
    tool.**'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The project build.gradle needs a Google repository line
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every project needs to know where to find any extra Jetpack libraries it needs,
    and this is done by adding a reference to the Google repository in the **project**’s
    *build.gradle* file. Android Studio usually does this for you, but you can make
    sure it’s there by opening the file *MyConstraintLayout/build.gradle*, and looking
    for the following line (in bold) in the `repositories` section under `allprojects`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0127-02.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: The app build.gradle includes the constraint layout’s library
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use constraint layouts, a reference to its library needs to be included
    in the **app**’s *build.gradle* file. Android Studio should have already added
    this for you, but you can double-check by opening the file *MyConstraintLayout/app/build.gradle*,
    and looking for the following line (in bold) in the `dependencies` section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0127-04.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: If the file doesn’t include this line, add it now, and click on the Sync Now
    option that appears in the code editor. This syncs any changes you’ve made with
    the rest of your project, and adds the library.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add a constraint layout to activity_main.xml
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that your project is all set up to use constraint layouts, let’s start using
    one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'You add a constraint layout to a layout file using an `**<androidx.constraintlayout.widget.ConstraintLayout>**`
    element. We’re going to use one in the layout file *activity_main.xml*, so open
    this file in the *app/src/main/res/layout* folder, and make sure its code looks
    like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0128-01.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: Show the layout in the blueprint
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re going to add views to the layout using the design editor’s blueprint.
    Switch to the design editor by clicking on the Design option, click on the Select
    Design Surface button in the editor’s toolbar, and select the Blueprint option.
    This shows you a blueprint of the layout like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0128-02.png)![image](Images/f0128-03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Add a button to the blueprint
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to add a button to the layout. To do this, go to the design editor’s
    palette, find the Button component (it’s usually in the Common section), and drag
    it to the blueprint. You can place the button anywhere in the blueprint, just
    so long as it appears in its main area like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0129-02.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Position views using constraints
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a constraint layout, you don’t specify where views should be positioned
    by dropping them on the blueprint in a particular place. Instead, you specify
    placement by defining **constraints**. A **constraint** is a connection or attachment
    that tells the layout where the view should be positioned. You can use a constraint
    to attach a view to the start edge of the layout, for example, or underneath another
    view.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: We’ll add a horizontal constraint to the button
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how this works, let’s add a constraint to attach the button to the left
    edge of the layout.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make sure the button’s selected by clicking it. When you select a view,
    a bounding box is drawn around it, and handles are added to its corners and sides.
    The handles in the corners let you resize the view, and the handles on the sides
    let you add constraints:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0130-02.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: 'To add a constraint, you click on one of the view’s constraint handles and
    drag it to whatever you want to attach it to. In this case, we’re going to attach
    the left edge of the button to the left edge of the layout, so click on the left
    constraint handle and drag it to the left edge of the blueprint:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0130-03.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'This adds the constraint, and pulls the button over to the left:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0130-04.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: That’s how you add a horizontal constraint. Let’s see what happens when you
    add a vertical one.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Add a vertical constraint too
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll use a vertical constraint to attach the button to the top of the layout.
    To do this, click on the button’s top constraint handle, and drag it to the top
    of the blueprint. This adds the vertical constraint, which pulls the button up.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0131-02.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Use opposing constraints to center views
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you’ve learned, you can use constraints to attach a view to the edge of the
    blueprint. Each constraint works like a spring that pulls the view to the blueprint’s
    edge.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to position views in the center of the blueprint, you can do so
    by adding constraints to opposite sides of the view. To center a button horizontally,
    for example, you add one constraint that pulls the view to the left, and another
    that pulls it to the right like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0133-02.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'The two constraints pull the button in opposite directions, which centers it
    horizontally like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0133-03.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'You can also center a view vertically by adding constraints to its top and
    bottom edges. And if you wanted to center it horizontally and vertically, you’d
    add constraints to all four edges like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0133-04.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: You can delete constraints you no longer need
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can remove any constraints you no longer need by selecting them in the
    blueprint, and deleting them. If you have a button that’s centered in the middle
    of the blueprint, for example, you delete the constraint that’s attached to its
    bottom edge:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0134-02.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: 'Deleting this constraint means that the button is no longer being pulled toward
    the bottom of the blueprint. The top constraint pulls the button to the top so
    that it’s only centered horizontally, and not vertically:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0134-03.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Another way of removing constraints you no longer need is to use the constraint
    widget tool. Let’s see how this works.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Remove constraints with the constraint widget
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The constraint widget is displayed in the Attributes panel at the side of the
    design editor. It appears when you select a view, and displays a diagram featuring
    the view’s constraints, and the size of any margins.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll find out more about the Attributes panel a few pages ahead.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: To delete a constraint in the constraint widget, select the view in the blueprint
    you want to remove the constraint from, then click on the constraint’s handle
    in the constraint widget. The constraint is removed, and the view is repositioned
    in the blueprint.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0135-03.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: You can use it to add margins too
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may have noticed that each of the constraints in the constraint widget
    has a number next to it. This is used to set the margin size for that edge of
    the view so that there’s space between the view and the layout’s edge. To change
    the size of a view’s left and top margins to 24dp, for example, you’d update their
    values in the diagram to 24:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0135-04.png)![image](Images/f0135-05.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: You can set a default size for any new margins using the Default Margins button
    in the design editor’s toolbar. Setting this to 24dp, for example, means that
    any new constraints that get added will automatically include a margin of 24dp.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0135-06.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Changes to the blueprint appear in the XML
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you add views to a blueprint, and specify constraints and margins, they
    get added to the layout’s underlying XML. To see this, switch to the layout’s
    code view. Your code should look something like this (but don’t worry if it’s
    slightly different):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0136-02.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: As you can see, the XML now includes a button. Does its code look familiar to
    you? If so, nice catch—it includes attributes that you learned about in [Chapter 3](ch03.xhtml#layoutscolon_being_a_layout).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The button’s width, height, and margins are specified in exactly the same way
    as before, and if you want to, you can change their values in the XML instead
    of using the design editor.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'The only unfamiliar code is the two lines that specify the view’s constraints
    on its start and top edges:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0136-03.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Similar code is generated if you add constraints to the button’s remaining edges.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve had a glimpse of what constraint layout XML looks like switch
    back to the design editor, and we’ll look at some more techniques you can use
    to position views.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Views can have bias
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned earlier, you can add constraints to opposite sides of a view.
    This centers the view by default, but you can also control its position relative
    to each side by changing its **bias**. This tells Android what the proportionate
    length of each constraint should be on either side of the view.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, let’s change the button’s horizontal bias so that it’s
    positioned off-center. First, make sure that the button includes constraints on
    its left and right sides like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0137-02.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: Then select the button so the constraint widget is displayed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Underneath the widget’s diagram of the view, you should see a slider with a
    number in it. This is a percentage of the view’s horizontal bias.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0137-03.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: 'To change the bias, simply move the slider. If, say, you move the slider to
    the left so that the number changes to 30, it moves the button in the blueprint
    to the left as well:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0137-04.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: The view maintains this relative position irrespective of screen size and orientation.
    Let’s try this out by taking the app for a test drive.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, a button appears off-center toward the top of the screen.
    It maintains the same relative position when we rotate the device.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0138-02.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: You’ve now learned various techniques to control a view’s position on the screen.
    Next up, how to change its size.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: You can change a view’s size
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might expect, you can change a view’s size in a constraint layout by
    updating its `layout_width` and `layout_height` attributes. You can do this in
    the layout’s XML, or in the design editor’s Attributes panel.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: The Attributes panel is displayed to the side of the blueprint. When you select
    a view, it shows you all the attributes that have already been declared (such
    as `layout_width` and `layout_height`), and lets you set ones that haven’t.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Make the view just big enough
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like with linear and frame layouts, you make a view just large enough
    to display its contents by setting its `layout_width` and `layout_height` properties
    to `wrap_content`. If the view is a button, for example, it makes the button just
    large enough to hold its text:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0139-02.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: Match the view’s constraints
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’ve added constraints to opposite sides of your view, you can make the
    view match the size of its constraints. You do this by setting its `layout_width`
    and/or `layout_height` to 0dp: set `layout_width` to 0dp to make the view match
    its horizontal constraints, and set `layout_height` to 0dp to make it match its
    vertical ones.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, we’ve set the button’s `layout_width` to 0dp so that
    the button matches its horizontal constraints:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0139-03.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve seen how to resize a view, try experimenting with the different
    techniques, then have a go at the exercise on the next page.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到如何调整视图大小，尝试使用不同的技术，然后在下一页的练习中尝试一下。
- en: BE the Constraint
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为约束
- en: '![image](Images/common04.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**Your job is to play like you’re the constraint layout and draw the constraints
    that are needed to produce each layout. You also need to specify the layout_width,
    layout_height, and bias (when needed) for each view. We’ve completed the first
    one for you.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的工作是扮演你是约束布局，绘制出每个布局所需的约束。你还需要为每个视图指定 `layout_width`、`layout_height` 和偏置（在需要时）。我们已经为你完成了第一个。**'
- en: '![image](Images/f0140-01.png)![image](Images/f0141-01.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0140-01.png)![image](Images/f0141-01.png)'
- en: BE the Constraint Solution
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为约束解决方案
- en: '![image](Images/common04.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common04.png)'
- en: '**Your job is to play like you’re the constraint layout and draw the constraints
    that are needed to produce each layout. You also need to specify the layout_width,
    layout_height, and bias (when needed) for each view. We’ve completed the first
    one for you.**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的工作是扮演你是约束布局，绘制出每个布局所需的约束。你还需要为每个视图指定 `layout_width`、`layout_height` 和偏置（在需要时）。我们已经为你完成了第一个。**'
- en: '![image](Images/f0142-01.png)![image](Images/f0143-01.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0142-01.png)![image](Images/f0143-01.png)'
- en: Most layouts need multiple views
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大多数布局需要多个视图
- en: '![image](Images/f0144-01.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0144-01.png)'
- en: So far you’ve seen how to position and size a single view in a constraint layout.
    Most of the time, however, your layout will need to contain multiple views that
    are laid out relative to one another.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到如何在约束布局中定位和调整一个视图的大小。然而，大多数时候，你的布局需要包含多个相互布局的视图。
- en: 'To see how this works, first make sure that your constraint layout includes
    a single button with two constraints: one that connects its top edge to the top
    of the blueprint, and another that connects its left edge to the blueprint’s left
    side. Its `layout_width` and `layout_height` properties should be set to `wrap_content`,
    and the margins for these edges should be set to 24dp.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这一点是如何工作的，首先确保你的约束布局中包含一个按钮，并且有两个约束：一个将其顶部边缘连接到蓝图的顶部，另一个将其左边缘连接到蓝图的左侧。其
    `layout_width` 和 `layout_height` 属性应设置为 `wrap_content`，这些边缘的间距应该设置为 24dp。
- en: 'After you’ve made these changes, the button should be positioned in the blueprint’s
    top-left corner like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做了这些更改之后，按钮应该像这样定位在蓝图的左上角：
- en: '![image](Images/f0144-02.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0144-02.png)'
- en: Add a second button to the blueprint
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向蓝图添加第二个按钮
- en: 'Next, add a second button to the blueprint by dragging one from the palette,
    and placing it somewhere underneath the first button like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过从调色板中拖动一个按钮，并将其放置在第一个按钮的下方，如下所示，向蓝图添加第二个按钮：
- en: '![image](Images/f0144-03.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0144-03.png)'
- en: The blueprint now includes two buttons. Let’s find out how to position them
    relative to one another.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图现在包含两个按钮。让我们找出如何相互定位它们。
- en: You can connect views to other views
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以将视图连接到其他视图
- en: As you already know, constraints let you attach a view to the edge of its blueprint.
    You can also use constraints to connect two views together, and this is used to
    specify how they should be displayed relative to one another.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知道的，约束可以让你将视图附加到其蓝图的边缘。你也可以使用约束将两个视图连接在一起，这用于指定它们之间的显示方式。
- en: 'To see how this works, select the second button in the blueprint, then draw
    a constraint that goes from the second button’s top edge to the first button’s
    bottom edge like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这一点，选择蓝图中的第二个按钮，然后绘制一个约束，从第二个按钮的顶部边缘到第一个按钮的底部边缘，如下所示：
- en: '![image](Images/f0145-02.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0145-02.png)'
- en: 'When the constraint is added, it pulls the button up so that it’s connected
    to the first, and displayed underneath it:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加约束时，它会将按钮拉起，使其连接到第一个按钮，并显示在其下方：
- en: '![image](Images/f0145-03.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0145-03.png)'
- en: The constraint means that the second button will always be positioned under
    the first, irrespective of the first button’s position on the device screen.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该约束意味着第二个按钮将始终位于第一个按钮下方，无论第一个按钮在设备屏幕上的位置如何。
- en: Once you’ve positioned two views in this way, the next thing you might want
    to do is make sure that they’re aligned. Let’s find out how to do this.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你以这种方式定位了两个视图，接下来你可能想要做的是确保它们对齐。让我们找出如何做到这一点。
- en: You can align views too
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你也可以对视图进行对齐
- en: The simplest way of aligning two views is to use the Align button in the design
    editor’s toolbar.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how this works, let’s left-align the two buttons in the blueprint so
    that their left edges line up. First, select both buttons by holding down the
    Shift key as you click on each one. Then click on the Align button to open up
    a set of alignment options like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0146-02.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Left Edges option to left-align the two buttons. This adds a constraint
    to the blueprint that connects their left edges together like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0146-03.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Align views using guidelines
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another technique you can use to align views is a **guideline**. This is a fixed
    line you add to the blueprint that you can use to constrain views. It’s only visible
    in the design editor, so users don’t see it when they run the app.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore how guidelines work by adding one to the blueprint. Click on
    the Guidelines button in the design editor’s toolbar, and choose the option to
    add a vertical guideline. This places a vertical guideline in the blueprint:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0147-02.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'Once the guideline has been added, you can move it elsewhere by dragging it.
    You can set it to be either a fixed distance from the blueprint’s edge, or a fixed
    percentage:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0147-03.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: 'You can then use constraints to attach views to the guideline like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0147-04.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Guidelines have a fixed position
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guidelines are either positioned a fixed distance from the blueprint’s edge,
    or a fixed percentage between the two. They stay in that position when the app
    runs, so they’re a useful way of aligning views.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'In some situations, you need something that’s a little more flexible. As an
    example, suppose you have a layout that includes two multi-line edit texts, side
    by side, with a button underneath like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0148-02.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: 'The edit texts expand vertically as the user enters text. You want the button
    to move as the views change size so that it’s always positioned beneath them like
    so:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0148-03.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: So how can you build this sort of layout?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Create a movable barrier
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create layouts like this, you can use a **barrier**. This is like a guideline,
    except that it doesn’t have a fixed position. Instead, it forms a barrier against
    views, and moves when they change size. This repositions any views that are constrained
    to the barrier.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example on the previous page, the two edit texts are placed above a
    horizontal barrier, and the button is constrained beneath it. As the edit texts
    expand, the barrier moves down and repositions the button:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0149-02.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: Let’s build a layout that uses a barrier
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how barriers work, let’s create this example.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: First, delete any views, and make sure the blueprint includes a vertical guideline
    positioned at 50%. Then drag two multi-line edit texts from the palette, and position
    them on either side of the guideline.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can usually find these in the “Text” part of the palette, listed as “Multiline
    Text.”
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Next, add vertical constraints to constrain each view to the top of the blueprint,
    and horizontal constraints to position each one between the blueprint’s edge and
    the guideline.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Finally, change the `layout_width` of each edit text to 0dp so that it matches
    its horizontal constraints, and set their `layout_height`s to “wrap_content” so
    that the views can expand.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re done, the blueprint should look something like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0149-04.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: Add a horizontal barrier
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to add a horizontal barrier to the blueprint. To do this, click on
    the Guidelines button in the design editor toolbar, and choose the option to add
    a horizontal barrier:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0150-02.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: This creates the horizontal barrier.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Place the barrier beneath the views
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want the barrier to move down as the two edit text views expand. To do this,
    go to the layout’s component tree panel, and drag the two edit text components
    onto the barrier:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0150-03.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: 'This doesn’t change the position of the edit text views in the blueprint: it
    simply tells the barrier that it needs to move with these views.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to position the barrier so that it’s at the bottom of the two
    views. Select the barrier in the component tree, and use the Attributes panel
    to change its `barrierDirection` attribute to “bottom.” This positions the barrier
    below the two edit texts so that the blueprint looks like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0150-04.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Constrain a button under the barrier
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the layout’s barrier is in place, let’s add the button, and constrain
    it to the barrier so that it moves down as the edit text views expand.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'First drag a button from the palette to the blueprint, and place it somewhere
    underneath the barrier. Then center it horizontally by adding two horizontal constraints
    that connect the button’s sides to the edges of the blueprint like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0151-02.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: Next, you need to attach the top of the button to the barrier. You can try doing
    this by drawing the constraint directly in the blueprint. If, like us, you find
    this a bit too fiddly, select the button, search for its `layout_constraintTop_toBottomOf`
    attribute in the Attributes panel, and change its value to the barrier’s ID (in
    our case, this is `@id/barrier`).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0151-03.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: 'After you make this change, the blueprint should look something like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0151-04.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: As barriers can be quite tricky to work with at first, we’ll show you our complete
    XML over the next couple pages, and then take the app for a test drive.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The full code for activity_main.xml
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s our complete code for *activity_main.xml*; if you want your blueprint
    to look like ours, replace the contents of this file so that it matches the code
    shown here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0152-02.png)![image](Images/f0153-02.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, a button is displayed beneath two edit text views. The
    button moves down when we type into each edit text, and the views expand.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, adding a barrier is a bit more complicated than drawing constraints
    and aligning views, but we think it’s worth the extra effort.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: So what’s next?
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0153-03.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Use a chain to control a linear group of views
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve now learned how to connect and align views, and use guidelines and constraints.
    But what if you want to create a row or column of views, and evenly space them
    out?
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: In this sort of situation, you can use a **chain**. This is a linear group of
    views that are linked together with bidirectional constraints. The chain controls
    each view’s position, so you can use it to evenly space the views out, or pack
    them in the center of the blueprint.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to create a horizontal chain
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To see how this works, we’re going to create a chain that controls the position
    of three buttons. The buttons will be lined up in a horizontal row, and evenly
    spaced between each side of the blueprint like this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0154-02.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'When the app runs, the buttons will maintain their relative positions, regardless
    of screen size or orientation:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0154-03.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Let’s find out how to create a chain.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: The chain will use three buttons
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we create the chain, first remove all of the constraints that have been
    added to the blueprint so far. The quickest way of doing this is with the Clear
    All Constraints button in the design editor’s toolbar, so click on this button
    now.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0155-02.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: You also need to get rid of any guidelines, barriers, and edit text views. Do
    this by selecting each one, and deleting it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Then add two more buttons to the blueprint so there are three in total, and
    use the “Orientation for Preview” button in the design editor’s toolbar to change
    the blueprint’s orientation to landscape. This will make it easier to see the
    chain.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0155-03.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: 'When you’ve added the buttons, the blueprint should look something like this:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0155-04.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: Align the views we’re going to chain
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chains work best when views are aligned. First, add a constraint that connects
    the first button to the top of the blueprint, and set its margin to 64\. Then
    select all three buttons, and use the Align button in the design editor’s toolbar
    to align their top edges. The blueprint should look like this.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0155-05.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: Now that the buttons are nicely aligned, let’s go ahead and create the chain.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Create the horizontal chain
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create the chain, select all three buttons, then right-click on one of them.
    From the menu that appears, choose the Chains option, followed by Create Horizontal
    Chain.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0156-02.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
- en: 'When the horizontal chain is created, it joins the buttons together, and fastens
    the first and last view to the blueprint’s vertical edges. The chain should look
    something like this:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0156-03.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: By default, views in a chain are evenly spaced out between the blueprint’s edges.
    You can change this behavior by right-clicking on one of the chain’s views, selecting
    the Chains option from the menu that appears, and then choosing Horizontal Chain
    Style.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Possible chain style options include spread, spread inside, and packed. See
    if you can work out what these options do by having a go at the following exercise.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: There are different styles of chain
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have discovered, you can choose different chain styles to change how
    a chain arranges its views.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Spread spaces out views between the blueprint’s edges
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default style is **spread**. This is used to evenly distribute the views
    between the blueprint’s edges like this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0159-02.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: Spread inside moves the first and last view to the edges
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **spread inside** style is similar to spread, except that it moves the
    first and last view to the blueprint’s edges. It then evenly spaces out any remaining
    views like so:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0159-03.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
- en: Packed moves the views together
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **packed** style is used to pack views together. It then centers the entire
    group of views like this:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0159-04.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve seen what these options do, let’s take the app for a test drive.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use the spread style of chain and run the app, the buttons are evenly
    spread in the device screen. This is irrespective of screen orientation.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0160-02.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: '**Always test layouts on a variety of device sizes and orientations to make
    sure they look and behave how you want.**'
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**She’s right.**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Constraint layouts can include both horizontal and vertical chains, and a single
    view can belong to both types. You can use this to arrange views in a grid.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'The blueprint below, for example, shows six buttons arranged in a grid. Each
    row is a horizontal chain, and the leftmost buttons form a vertical chain:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0161-02.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
- en: Another way in which you can create grids is to use a **flow**. Let’s find out
    what this is, and how to use it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: A flow is like a multi-line chain
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A flow is like a chain that can span multiple rows. It’s invaluable when, say,
    you want to display lots of views in a row, but they might not fit on the screen
    for some screen sizes or orientations.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, suppose you have a chain that displays six buttons in a horizontal
    row. When the orientation is landscape, they are displayed like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0162-02.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: 'But when the orientation is changed to portrait, there’s not enough room to
    display all of the views:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0162-03.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: 'If you replace the chain with a flow, any views that can’t fit on the first
    row will flow onto a second row like this:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0162-04.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
- en: Let’s see how flows work by building the above layout.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: How to add a flow
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, remove any constraints by clicking on the Clear All Constraints button
    in the design editor’s toolbar. Then add extra buttons to the blueprint so there
    are six in total like this:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0163-02.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
- en: Next, select all of the buttons, click on the Guidelines button in the design
    editor’s toolbar, and choose the Flow option. This adds the flow component.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: We now need to tweak the flow component’s settings to make it behave the way
    we want. To do this, select the flow in the component tree, then use the blueprint
    or constraint widget to add constraints to connect its sides and top to the edges
    of the blueprint. Change its `layout_width` attribute to “0dp” so that it matches
    its constraints. Finally, search for its `flow_wrapMode` attribute in the Attributes
    panel, and set this to “chain”.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’ve made all of these changes, the blueprint should look something
    like this when the orientation is landscape:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0163-03.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
- en: 'If you change the orientation to portrait, the blueprint should look like this
    instead:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0163-04.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
- en: Once you’ve created a flow, you can tweak the way in which it displays its views.
    Let’s see how.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: You can control the flow’s appearance
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main way in which you can alter the flow’s appearance is with its `**flow_wrapMode**`
    attribute.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Use “chain” to create a multi-line chain
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you set the `flow_wrapMode` attribute to `chain`, the flow behaves like a
    flexible chain that lets its views flow onto extra rows.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'With this option, you can make further changes to the flow’s appearance by
    changing the value of its `flow_horizontalStyle` attribute. Possible options for
    this attribute are spread, spread inside, and packed. These have exactly the same
    effect as when you used them with chains. The packed option, for example, packs
    the views together like this:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0164-02.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
- en: Use “aligned” to line up the views
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you set the `flow_wrapMode` attribute to `aligned`, the views flow onto
    extra rows, and they are lined up like this:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0164-03.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
- en: You can also set the `flow_wrapMode` attribute to `none` or leave it unset.
    This makes the flow behave like a normal chain so that its views don’t flow onto
    a second row.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: The full code for activity_main.xml
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Flows can sometimes be a little tricky to get right, so here’s our full code
    for *activity_main.xml*; if you want to, replace the code for this file so it
    matches the code shown here:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0165-02.png)![image](Images/f0166-02.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use the chain style of flow and run the app, the buttons are evenly
    spread in the device screen when the orientation is landscape.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: When we change the orientation to portrait, any buttons that don’t fit onto
    the first row flow onto the second.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0167-02.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to design super-flexible screens using
    constraint layouts. As well as looking and behaving the way you want, they don’t
    use nested layouts, so they’re extremely efficient.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经学会了如何使用约束布局设计超级灵活的屏幕。它们不仅能够按照你的意愿外观和行为，而且不使用嵌套布局，因此非常高效。
- en: '**Before you move on to the next chapter, why not put your new skills into
    practice, and try experimenting with some of the techniques you’ve learned?**'
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在你进入下一章之前，为什么不将你的新技能付诸实践，并尝试一些你学到的技术呢？**'
- en: Your Android Toolbox
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的Android工具箱
- en: '![image](Images/tools.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/tools.png)'
- en: '**You’ve got [Chapter 4](#constraint_layoutscolon_draw_up_a_bluepr) under your
    belt and now you’ve added constraint layouts to your toolbox.**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经掌握了[第四章](#constraint_layoutscolon_draw_up_a_bluepr)，并且现在已经将约束布局添加到你的工具箱中。**'
- en: '![image](Images/f0168-01.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0168-01.png)'
