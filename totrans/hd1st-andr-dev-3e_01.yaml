- en: Table of Contents (the real thing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[How to use this book: *Intro*](preface02.xhtml#how_to_use_this_bookcolon_intro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Your brain on Android.** Here you are trying to learn something, while here
    your brain is, doing you a favor by making sure the learning doesn’t stick. Your
    brain’s thinking, “Better leave room for more important things, like which wild
    animals to avoid and whether naked snowboarding is a bad idea.” So how do you
    trick your brain into thinking that your life depends on knowing how to develop
    Android apps?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Who is this book for?”](preface02.xhtml#who_is_this_book_forquestion_mark)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We know what you’re thinking”](preface02.xhtml#we_know_what_youapostrophere_thinking)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We know what your *brain* is thinking”](preface02.xhtml#we_know_what_your_brain_is_thinking)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Metacognition: thinking about thinking”](preface02.xhtml#metacognitioncolon_thinking_about_thinki)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s what WE did”](preface02.xhtml#hereapostrophes_what_we_did)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Read me”](preface02.xhtml#read_me)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The truly awesome technical review team”](preface02.xhtml#the_truly_awesome_technical_review_team)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Acknowledgments”](preface02.xhtml#acknowledgments)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.xhtml#getting_startedcolon_diving_in)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android is the world’s most popular mobile operating system.** And there
    are billions of Android users worldwide, all waiting to download your next great
    idea. In this chapter, you’ll find out how to start turning your ideas into reality
    by **building a basic Android app**, and updating it. You’ll learn how to run
    it on physical and virtual devices. Along the way, you’ll meet two of the core
    components of all Android apps: **activities** and **layouts**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Welcome to Androidville”](ch01.xhtml#welcome_to_androidville)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Activities and layouts form the backbone of your app”](ch01.xhtml#activities_and_layouts_form_the_backbone)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s what we’re going to do”](ch01.xhtml#hereapostrophes_what_weapostrophere_goin)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Android Studio: your development environment”](ch01.xhtml#android_studiocolon_your_development_env)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Install Android Studio”](ch01.xhtml#install_android_studio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s build a basic app”](ch01.xhtml#letapostrophes_build_a_basic_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to build the app”](ch01.xhtml#how_to_build_the_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Android Versions Up Close ![Images](Images/zoomr.png)”](ch01.xhtml#android_versions_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You’ve created your first Android project”](ch01.xhtml#youapostropheve_created_your_first_andro)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Dissecting your new project”](ch01.xhtml#dissecting_your_new_project)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Introducing the key files in your project”](ch01.xhtml#introducing_the_key_files_in_your_projec)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Edit code with the Android Studio editors”](ch01.xhtml#edit_code_with_the_android_studio_editor)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The story so far”](ch01.xhtml#the_story_so_far)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to run the app on a physical device”](ch01.xhtml#how_to_run_the_app_on_a_physical_device)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to run the app on a virtual device”](ch01.xhtml#how_to_run_the_app_on_a_virtual_device)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create an Android Virtual Device (AVD)”](ch01.xhtml#create_an_android_virtual_device_left_pa)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Compile, package, deploy, run”](ch01.xhtml#compilecomma_packagecomma_deploycomma_ru)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What just happened?”](ch01.xhtml#what_just_happenedquestion_mark)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s refine the app”](ch01.xhtml#letapostrophes_refine_the_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What’s in the layout?”](ch01.xhtml#whatapostrophes_in_the_layoutquestion_ma)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“activity_main.xml has two elements”](ch01.xhtml#activityunderscoremaindotxml_has_two_ele)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update the text displayed in the layout”](ch01.xhtml#update_the_text_displayed_in_the_layout)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What the code does”](ch01.xhtml#what_the_code_does)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch01.xhtml#your_android_toolbox)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.xhtml#building_interactive_appscolon_apps_that)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Most apps need to respond to the user in some way.** And in this chapter,
    you’ll see how you can make your apps **more interactive**. You’ll discover how
    to add an ***OnClickListener*** to your activity code so that your app can **listen
    to what the user’s doing**, and make an appropriate response. You’ll find out
    more about **how to design layouts**, and you’ll learn how each UI component you
    add to your layout is derived from **a common View ancestor**. Along the way,
    you’ll discover **why String resources are so important** for flexible, well-designed
    apps.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Let’s build a Beer Adviser app”](ch02.xhtml#letapostrophes_build_a_beer_adviser_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create the project”](ch02.xhtml#create_the_project)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A closer look at the design editor”](ch02.xhtml#a_closer_look_at_the_design_editor)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a button using the design editor”](ch02.xhtml#add_a_button_using_the_design_editor)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A closer look at the layout code”](ch02.xhtml#a_closer_look_at_the_layout_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s update the layout XML”](ch02.xhtml#letapostrophes_update_the_layout_xml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The XML changes are reflected in the design editor”](ch02.xhtml#the_xml_changes_are_reflected_in_the_des)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“There are warnings in the layout…”](ch02.xhtml#there_are_warnings_in_the_layouthellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Put text in a String resource file”](ch02.xhtml#put_text_in_a_string_resource_file)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Extract the String resource”](ch02.xhtml#extract_the_string_resource)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add and use a new String resource”](ch02.xhtml#add_and_use_a_new_string_resource)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“String Resources Up Close ![Images](Images/zoomr.png)”](ch02.xhtml#string_resources_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add values to the spinner”](ch02.xhtml#add_values_to_the_spinner)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add the string-array to strings.xml”](ch02.xhtml#add_the_string-array_to_stringsdotxml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to make the app interactive”](ch02.xhtml#we_need_to_make_the_app_interactive)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What the MainActivity code looks like”](ch02.xhtml#what_the_mainactivity_code_looks_like)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A button can listen for on-click events…”](ch02.xhtml#a_button_can_listen_for_on-click_eventsh)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Get a reference to the button…”](ch02.xhtml#get_a_reference_to_the_buttonhellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Pass a lambda to the setOnClickListener method”](ch02.xhtml#pass_a_lambda_to_the_setonclicklistener)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to edit a text view’s text”](ch02.xhtml#how_to_edit_a_text_viewapostrophes_text)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The updated code for MainActivity.kt”](ch02.xhtml#the_updated_code_for_mainactivitydotkt)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when you run the code”](ch02.xhtml#what_happens_when_you_run_the_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add the getBeers() method”](ch02.xhtml#add_the_getbeersleft_parenthesisright_pa)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch02.xhtml#your_android_toolbox-id00023)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.xhtml#layoutscolon_being_a_layout)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**We’ve only scratched the surface of using layouts.** So far, you’ve seen
    how to arrange views in a simple linear layout, but there’s so much more that
    layouts can do. In this chapter we’ll **go a little deeper** and show you how
    layouts really work. You’ll learn **how to fine-tune your linear layouts**. You’ll
    discover how to use **frame layouts** and **scroll views**. And by the end of
    the chapter, you’ll learn that even though they might look a little different,
    all layouts—and the views you add to them—have **more in common than you might
    think**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“It all starts with a layout”](ch03.xhtml#it_all_starts_with_a_layout)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Android has different types of layout”](ch03.xhtml#android_has_different_types_of_layout)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to define a linear layout”](ch03.xhtml#how_to_define_a_linear_layout)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Orientation can be vertical or horizontal”](ch03.xhtml#orientation_can_be_vertical_or_horizonta)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Anatomy of AndroidManifest.xml ![Images](Images/common03.png)”](ch03.xhtml#anatomy_of_androidmanifestdotxml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use padding to add space to the layout’s edges”](ch03.xhtml#use_padding_to_add_space_to_the_layoutap)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The layout code so far”](ch03.xhtml#the_layout_code_so_far)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“An edit text lets you enter text”](ch03.xhtml#an_edit_text_lets_you_enter_text)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add views to the layout XML”](ch03.xhtml#add_views_to_the_layout_xml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make a view streeeeetch by adding weight”](ch03.xhtml#make_a_view_streeeeetch_by_adding_weight)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to add weight to one view”](ch03.xhtml#how_to_add_weight_to_one_view)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to add weight to multiple views”](ch03.xhtml#how_to_add_weight_to_multiple_views)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Values you can use with the android:gravity attribute”](ch03.xhtml#values_you_can_use_with_the_androidcolon)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The story so far”](ch03.xhtml#the_story_so_far-id00026)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“More values you can use with the android:layout-gravity attribute”](ch03.xhtml#more_values_you_can_use_with_the_android)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use margins to add space between views”](ch03.xhtml#use_margins_to_add_space_between_views)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your activity code tells Android which layout it uses”](ch03.xhtml#your_activity_code_tells_android_which_l)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Layout inflation: an example”](ch03.xhtml#layout_inflationcolon_an_example)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A frame layout stacks its views”](ch03.xhtml#a_frame_layout_stacks_its_views)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add an image to your project”](ch03.xhtml#add_an_image_to_your_project)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Drawable Resources Up Close ![Images](Images/zoomr.png)”](ch03.xhtml#drawable_resources_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A frame layout stacks views in the order they appear in the layout XML”](ch03.xhtml#a_frame_layout_stacks_views_in_the_order)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“All layouts are a type of ViewGroup…”](ch03.xhtml#all_layouts_are_a_type_of_viewgrouphelli)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A scroll view inserts a vertical scrollbar”](ch03.xhtml#a_scroll_view_inserts_a_vertical_scrollb)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch03.xhtml#your_android_toolbox-id00037)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.xhtml#constraint_layoutscolon_draw_up_a_bluepr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You don’t build a house without a blueprint.** And some layouts use **blueprints**
    to make sure they **look exactly the way you want**. In this chapter, we’ll introduce
    you to Android’s **constraint layout**: a **flexible way of designing more complex
    UIs**. You’ll discover how **constraints** and **bias** let you position and size
    your views, **irrespective of screen size and orientation**. You’ll find out how
    to keep views in their place with **guidelines** and **barriers.** Finally, you’ll
    learn how to pack or spread views with **chains** and **flows**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Nested layouts revisited”](ch04.xhtml#nested_layouts_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Introducing the constraint layout”](ch04.xhtml#introducing_the_constraint_layout)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Constraint layouts are part of Android Jetpack”](ch04.xhtml#constraint_layouts_are_part_of_android_j)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use Gradle to include Jetpack libraries”](ch04.xhtml#use_gradle_to_include_jetpack_libraries)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s add a constraint layout to activity_main.xml”](ch04.xhtml#letapostrophes_add_a_constraint_layout_t)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a button to the blueprint”](ch04.xhtml#add_a_button_to_the_blueprint)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Position views using constraints”](ch04.xhtml#position_views_using_constraints)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a vertical constraint too”](ch04.xhtml#add_a_vertical_constraint_too)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use opposing constraints to center views”](ch04.xhtml#use_opposing_constraints_to_center_views)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Remove constraints with the constraint widget”](ch04.xhtml#remove_constraints_with_the_constraint_w)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Changes to the blueprint appear in the XML”](ch04.xhtml#changes_to_the_blueprint_appear_in_the_x)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Views can have bias”](ch04.xhtml#views_can_have_bias)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can change a view’s size”](ch04.xhtml#you_can_change_a_viewapostrophes_size)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Most layouts need multiple views”](ch04.xhtml#most_layouts_need_multiple_views)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can connect views to other views”](ch04.xhtml#you_can_connect_views_to_other_views)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Align views using guidelines”](ch04.xhtml#align_views_using_guidelines)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Guidelines have a fixed position”](ch04.xhtml#guidelines_have_a_fixed_position)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a movable barrier”](ch04.xhtml#create_a_movable_barrier)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a horizontal barrier”](ch04.xhtml#add_a_horizontal_barrier)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Constrain a button under the barrier”](ch04.xhtml#constrain_a_button_under_the_barrier)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use a chain to control a linear group of views”](ch04.xhtml#use_a_chain_to_control_a_linear_group_of)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create the horizontal chain”](ch04.xhtml#create_the_horizontal_chain)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“There are different styles of chain”](ch04.xhtml#there_are_different_styles_of_chain)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A flow is like a multi-line chain”](ch04.xhtml#a_flow_is_like_a_multi-line_chain)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to add a flow”](ch04.xhtml#how_to_add_a_flow)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can control the flow’s appearance”](ch04.xhtml#you_can_control_the_flowapostrophes_appe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch04.xhtml#your_android_toolbox-id00051)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.xhtml#the_activity_lifecyclecolon_being_an_act)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activities form the foundation of every Android app.** So far you’ve seen
    how to create an activity, and use it to interact with the user. But if you don’t
    know about **the activity lifecycle**, some of its behavior **might take you by
    surprise**. In this chapter, you’ll learn what happens when an activity is **created**
    and **destroyed**, and how this can lead to **unexpected consequences**. You’ll
    find out how to control its behavior when it’s made **visible**, or **hidden**.
    You’ll even discover ways of **saving and restoring your activity’s state**, just
    when you need it.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“How do activities really work?”](ch05.xhtml#how_do_activities_really_workquestion_ma)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a new project”](ch05.xhtml#create_a_new_project-id00053)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for activity_main.xml”](ch05.xhtml#the_full_code_for_activityunders-id00054)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The activity code controls the stopwatch”](ch05.xhtml#the_activity_code_controls_the_stopwatch)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for MainActivity.kt”](ch05.xhtml#the_full_code_for_mainactivitydo-id00056)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when you run the app”](ch05.xhtml#what_happens_when_you_run_the_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Rotating the screen changes the device configuration”](ch05.xhtml#rotating_the_screen_changes_the_device_c)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“An activity’s states”](ch05.xhtml#an_activityapostrophes_states)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The activity lifecycle: from create to destroy”](ch05.xhtml#the_activity_lifecyclecolon_from_create)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your activity inherits the lifecycle methods”](ch05.xhtml#your_activity_inherits_the_lifecycle_met)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Save the current state in a Bundle”](ch05.xhtml#save_the_current_state_in_a_bundle)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Save the state using onSaveInstanceState()”](ch05.xhtml#save_the_state_using_onsaveinstancestate)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The updated MainActivity.kt code”](ch05.xhtml#the_updated_mainactivitydotkt_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when you run the app”](ch05.xhtml#what_happens_when_you_run_the_ap-id00058)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“There’s more to an activity’s life than create and destroy”](ch05.xhtml#thereapostrophes_more_to_an_activityapos)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The visible lifecycle”](ch05.xhtml#the_visible_lifecycle)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to implement two more lifecycle methods”](ch05.xhtml#we_need_to_implement_two_more_lifecycle)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Restart the stopwatch when the app becomes visible”](ch05.xhtml#restart_the_stopwatch_when_the_app_becom)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when you run the app”](ch05.xhtml#what_happens_when_you_run_the_ap-id00064)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What if an activity is only partially visible?”](ch05.xhtml#what_if_an_activity_is_only_partially_vi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The foreground lifecycle”](ch05.xhtml#the_foreground_lifecycle)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Pause the stopwatch if the activity’s paused”](ch05.xhtml#pause_the_stopwatch_if_the_activityapost)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The complete MainActivity.kt code”](ch05.xhtml#the_complete_mainactivitydotkt_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when you run the app”](ch05.xhtml#what_happens_when_you_run_the_ap-id00071)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your handy guide to the activity lifecycle methods”](ch05.xhtml#your_handy_guide_to_the_activity_lifecyc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch05.xhtml#your_android_toolbox-id00073)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.xhtml#fragments_and_navigationcolon_finding_yo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Most apps require more than one screen.** So far, we’ve just looked at how
    to create single-screen apps, which is fine for simple applications. But what
    if you have **more complex requirements**? In this chapter, you’ll learn how to
    use **fragments** and the **Navigation component** to **build multi-screen apps**.
    You’ll learn how **fragments are like subactivities** with their own methods.
    You’ll find out how to **design effective navigation graphs**. Finally, you’ll
    meet the **navigation host** and **navigation controller**, and learn how they
    help you navigate from place to place.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Most apps need more than one screen”](ch06.xhtml#most_apps_need_more_than_one_screen)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Each screen is a fragment”](ch06.xhtml#each_screen_is_a_fragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Navigate between screens using the Navigation component”](ch06.xhtml#navigate_between_screens_using_the_navig)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a new project”](ch06.xhtml#create_a_new_project-id00076)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add WelcomeFragment to the project”](ch06.xhtml#add_welcomefragment_to_the_project)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What fragment code looks like”](ch06.xhtml#what_fragment_code_looks_like)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The fragment’s onCreateView() method”](ch06.xhtml#the_fragmentapostrophes_oncreateviewleft)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragment layout code looks like activity layout code”](ch06.xhtml#fragment_layout_code_looks_like_activity)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You display a fragment in a FragmentContainerView”](ch06.xhtml#you_display_a_fragment_in_a_fragmentcont)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update the activity_main.xml code”](ch06.xhtml#update_the_activityunderscoremaindotxml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What the code does”](ch06.xhtml#what_the_code_does-id00079)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create MessageFragment”](ch06.xhtml#create_messagefragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use the Navigation component to navigate between fragments”](ch06.xhtml#use_the_navigation_component_to_navigate)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use Gradle to add the Navigation component to your project”](ch06.xhtml#use_gradle_to_add_the_navigation_compone)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a navigation graph”](ch06.xhtml#create_a_navigation_graph)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add fragments to the navigation graph”](ch06.xhtml#add_fragments_to_the_navigation_graph)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Connect fragments using an action”](ch06.xhtml#connect_fragments_using_an_action)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Navigation graphs are XML resources”](ch06.xhtml#navigation_graphs_are_xml_resources)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a navigation host to the layout using a FragmentContainerView”](ch06.xhtml#add_a_navigation_host_to_the_layout_usin)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a NavHostFragment to activity_main.xml”](ch06.xhtml#add_a_navhostfragment_to_activityundersc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add an OnClickListener to the button”](ch06.xhtml#add_an_onclicklistener_to_the_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Get a navigation controller”](ch06.xhtml#get_a_navigation_controller)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for WelcomeFragment.kt”](ch06.xhtml#the_full_code_for_welcomefragmentdotkt)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch06.xhtml#what_happens_when_the_app_runs-id00084)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch06.xhtml#your_android_toolbox-id00089)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.xhtml#safe_argscolon_passing_information)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sometimes fragments need extra information to work properly.** If a fragment
    shows details of a contact, for example, it needs to know which contact to display.
    But what if this information **comes from another fragment**? In this chapter,
    you’ll **build on your navigation know-how** by learning **how to pass data between
    fragments**. You’ll find out **how to add arguments** to navigation destinations
    so they can receive the information they need. You’ll meet **the Safe Args plug-in**,
    and learn how to use it to **write type-safe code**. Finally, you’ll discover
    **how to manipulate the back stack**, and take control of back button behavior.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“The Secret Message app navigates between fragments”](ch07.xhtml#the_secret_message_app_navigates_between)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“MessageFragment needs to pass the message to a new fragment”](ch07.xhtml#messagefragment_needs_to_pass_the_messag)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create EncryptFragment…”](ch07.xhtml#create_encryptfragmenthellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add EncryptFragment to the navigation graph”](ch07.xhtml#add_encryptfragment_to_the_navigation_gr)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“MessageFragment needs to navigate to EncryptFragment”](ch07.xhtml#messagefragment_needs_to_navigate_to_enc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add Safe Args to the build.gradle files”](ch07.xhtml#add_safe_args_to_the_builddotgradle_file)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“EncryptFragment needs to accept a String argument”](ch07.xhtml#encryptfragment_needs_to_accept_a_string)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“MessageFragment needs to pass a message to EncryptFragment”](ch07.xhtml#messagefragment_needs_to_pass_a_message)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Safe Args generates Directions classes”](ch07.xhtml#safe_args_generates_directions_classes)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update the MessageFragment.kt code”](ch07.xhtml#update_the_messagefragmentdotkt_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“EncryptFragment needs to get the argument’s value”](ch07.xhtml#encryptfragment_needs_to_get_the_argumen)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for EncryptFragment.kt”](ch07.xhtml#the_full_code_for_encryptfragmentdotkt)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch07.xhtml#what_happens_when_the_app_runs-id00095)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What if the user wants to go back?”](ch07.xhtml#what_if_the_user_wants_to_go_backquestio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Welcome to the back stack”](ch07.xhtml#welcome_to_the_back_stack)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use the navigation graph to pop fragments off the back stack”](ch07.xhtml#use_the_navigation_graph_to_pop_fragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch07.xhtml#your_android_toolbox-id00101)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.xhtml#navigation_uicolon_going_places)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Most apps need to be able to navigate between destinations.** And with the
    Android the Navigation component, building this UI became much simpler. Here,
    you’ll learn how to use some of Android’s navigation UI components so that **your
    users can navigate your app more easily**. You’ll see how to use **themes**, and
    replace your app’s default app bar with a **toolbar**. You’ll learn how to add
    **menu items** you can **use for navigation**. You’ll discover how to implement
    **bottom bar navigation**. Finally, you’ll create a swish **navigation drawer**:
    a panel that slides out from the side of your activity.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Different apps, different structures”](ch08.xhtml#different_appscomma_different_structures)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Android includes navigation UI components”](ch08.xhtml#android_includes_navigation_ui_component)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How the CatChat app will work”](ch08.xhtml#how_the_catchat_app_will_work)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Apply a theme in AndroidManifest.xml”](ch08.xhtml#apply_a_theme_in_androidmanifestdotxml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Define styles in style resource files”](ch08.xhtml#define_styles_in_style_resource_files)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Replace the default app bar with a toolbar”](ch08.xhtml#replace_the_default_app_bar_with_a_toolb)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create InboxFragment”](ch08.xhtml#create_inboxfragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Specify items in the toolbar with a menu resource file”](ch08.xhtml#specify_items_in_the_toolbar_with_a_menu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“onCreateOptionsMenu() adds menu items to the toolbar”](ch08.xhtml#oncreateoptionsmenuleft_parenthesisright)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Respond to menu item clicks with onOptionsItemSelected()”](ch08.xhtml#respond_to_menu_item_clicks_with_onoptio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Configure the toolbar using an AppBarConfiguration”](ch08.xhtml#configure_the_toolbar_using_an_appbarcon)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch08.xhtml#what_happens_when_the_app_runs-id00116)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Most types of UI navigation work with the Navigation component”](ch08.xhtml#most_types_of_ui_navigation_work_with_th)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create SentItemsFragment”](ch08.xhtml#create_sentitemsfragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The bottom navigation bar needs a new menu resource file”](ch08.xhtml#the_bottom_navigation_bar_needs_a_new_me)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Link the bottom navigation bar to the navigation controller”](ch08.xhtml#link_the_bottom_navigation_bar_to_the_na)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A navigation drawer lets you display many navigation items”](ch08.xhtml#a_navigation_drawer_lets_you_display_man)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add the support section…”](ch08.xhtml#add_the_support_sectionhellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Highlight the selected item with groups”](ch08.xhtml#highlight_the_selected_item_with_groups)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create the navigation drawer’s header”](ch08.xhtml#create_the_navigation_drawerapostrophes)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to create a navigation drawer”](ch08.xhtml#how_to_create_a_navigation_drawer)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Configure the toolbar’s drawer icon…”](ch08.xhtml#configure_the_toolbarapostrophes_drawer)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch08.xhtml#your_android_toolbox-id00128)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.xhtml#material_viewscolon_a_material_world)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Most apps need a slick UI that responds to the user.** You’ve so far learned
    how to use views such as **text views, buttons, and spinners**, and applied **Material
    themes** to make sweeping changes to your app’s look and feel. But there’s so
    much more you can do. Here, you’ll learn how to make your UI more responsive with
    the **coordinator layout**. You’ll create **toolbars** that can **collapse or
    scroll** on a whim. You’ll discover **exciting new views** such as **checkboxes**,
    **radio buttons**, **chips**, and **floating action buttons**. Finally, you’ll
    find out how to display friendly pop-up messages using **toasts** and **snackbars**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Material is used throughout Androidville”](ch09.xhtml#material_is_used_throughout_androidville)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The Bits and Pizzas app”](ch09.xhtml#the_bits_and_pizzas_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create OrderFragment”](ch09.xhtml#create_orderfragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Replace the default app bar with a toolbar”](ch09.xhtml#replace_the_default_app_bar_with-id00130)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragments don’t have a setSupportActionBar() method”](ch09.xhtml#fragments_donapostrophet_have_a_setsuppo)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The coordinator layout coordinates animations between views”](ch09.xhtml#the_coordinator_layout_coordinates_anima)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The app bar layout enables toolbar animation”](ch09.xhtml#the_app_bar_layout_enables_toolbar_anima)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Tell the toolbar how to respond to scroll events”](ch09.xhtml#tell_the_toolbar_how_to_respond_to_scrol)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to create a plain collapsing toolbar”](ch09.xhtml#how_to_create_a_plain_collapsing_toolbar)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to add an image to a collapsing toolbar”](ch09.xhtml#how_to_add_an_image_to_a_collapsing_tool)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to build OrderFragment’s main content”](ch09.xhtml#we_need_to_build_orderfragmentapostrophe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Choose a pizza type using a radio button”](ch09.xhtml#choose_a_pizza_type_using_a_radio_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A chip is a type of flexible compound button”](ch09.xhtml#a_chip_is_a_type_of_flexible_compound_bu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add multiple chips to a chip group”](ch09.xhtml#add_multiple_chips_to_a_chip_group)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A FAB is a floating action button”](ch09.xhtml#a_fab_is_a_floating_action_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can anchor a FAB to a collapsing toolbar”](ch09.xhtml#you_can_anchor_a_fab_to_a_collapsing_too)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to build OrderFragment’s layout”](ch09.xhtml#we_need_to_build_orderfragmentap-id00139)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add an OnClickListener to the FAB”](ch09.xhtml#add_an_onclicklistener_to_the_fab)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A toast is a simple pop-up message”](ch09.xhtml#a_toast_is_a_simple_pop-up_message)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Display the pizza order in a snackbar”](ch09.xhtml#display_the_pizza_order_in_a_snackbar)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The snackbar code for the pizza order”](ch09.xhtml#the_snackbar_code_for_the_pizza_order)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for OrderFragment.kt”](ch09.xhtml#the_full_code_for_orderfragmentdotkt)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch09.xhtml#your_android_toolbox-id00148)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.xhtml#view_bindingcolon_bound_together)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It’s time to wave farewell to findViewById().** As you’ve probably noticed
    by now, the more views you have and the more interactive your apps become, **the
    more calls you need to make to *findViewById()***. And if you’re getting tired
    of typing the code for this method every time you want to work with a view, *y*ou’re
    not alone. In this chapter, you’ll discover **how to make *findViewById()* a thing
    of the past** by implementing **view binding**. You’ll find out how to apply this
    technique to both **activity and fragment code**, and you’ll learn why this approach
    is a **safer, more efficient** way of accessing your layout’s views.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Behind the scenes of findViewById()”](ch10.xhtml#behind_the_scenes_of_findviewbyidleft_pa)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“There’s a downside to findViewById()”](ch10.xhtml#thereapostrophes_a_downside_to_findviewb)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“View binding to the rescue”](ch10.xhtml#view_binding_to_the_rescue)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s how we’ll use view binding”](ch10.xhtml#hereapostrophes_how_weapostrophell_use_v)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The Stopwatch app revisited”](ch10.xhtml#the_stopwatch_app_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Enable view binding in the app build.gradle file”](ch10.xhtml#enable_view_binding_in_the_app_builddotg)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to add view binding to an activity”](ch10.xhtml#how_to_add_view_binding_to_an_activity)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use the binding property to interact with views”](ch10.xhtml#use_the_binding_property_to_interact_wit)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for MainActivity.kt”](ch10.xhtml#the_full_code_for_mainactivitydo-id00151)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What the code does”](ch10.xhtml#what_the_code_does-id00152)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragments can use view binding too (but the code’s a little different)”](ch10.xhtml#fragments_can_use_view_binding_too_left)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Enable view binding for Bits and Pizzas”](ch10.xhtml#enable_view_binding_for_bits_and_pizzas)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragment view binding code is a little different”](ch10.xhtml#fragment_view_binding_code_is_a_little_d)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragments can access views from onCreateView() to onDestroyView()”](ch10.xhtml#fragments_can_access_views_from_oncreate)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragment Lifecycle Methods Up Close ![Images](Images/zoomr.png)”](ch10.xhtml#fragment_lifecycle_methods_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What fragment view binding code looks like”](ch10.xhtml#what_fragment_view_binding_code_looks_li)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“_binding refers to the binding object…”](ch10.xhtml#underscorebinding_refers_to_the_binding)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for OrderFragment.kt”](ch10.xhtml#the_full_code_for_orderfragmentd-id00157)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch10.xhtml#your_android_toolbox-id00162)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.xhtml#view_modelscolon_model_behavior)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**As apps grow more complex, fragments have more to juggle.** And if you’re
    not careful, this can lead to **bloated code** that tries to do everything. Business
    logic, navigation, controlling the UI, dealing with configuration changes…you
    name it, it’s in there. In this chapter, you’ll learn how to deal with this kind
    of situation using **view models**. You’ll discover **how they simplify your activity
    and fragment code**. You’ll find out **how they survive configuration changes**,
    keeping your app’s state safe and sound. Finally, we’ll show you how to build
    a **view model factory**, and when this might be needed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Configuration changes revisited”](ch11.xhtml#configuration_changes_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Introducing the view model”](ch11.xhtml#introducing_the_view_model)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What the guessing game will do”](ch11.xhtml#what_the_guessing_game_will_do)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How the app will be structured”](ch11.xhtml#how_the_app_will_be_structured)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update the project build.gradle file…”](ch11.xhtml#update_the_project_builddotgradle_filehe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The Guessing Game app has two fragments”](ch11.xhtml#the_guessing_game_app_has_two_fragments)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How navigation should work”](ch11.xhtml#how_navigation_should_work)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update the navigation graph”](ch11.xhtml#update_the_navigation_graph-id00166)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch11.xhtml#what_happens_when_the_app_runs-id00167)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The game loses state when the screen rotates”](ch11.xhtml#the_game_loses_state_when_the_screen_rot)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A view model holds business logic”](ch11.xhtml#a_view_model_holds_business_logic)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a view model dependency to the app build.gradle file…”](ch11.xhtml#add_a_view_model_dependency_to_the_app_b)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a GameViewModel object”](ch11.xhtml#create_a_gameviewmodel_object)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch11.xhtml#what_happens_when_the_app_runs-id00169)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“![Images](Images/zooml.png) View Models Up Close”](ch11.xhtml#view_models_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“ResultViewModel needs to hold the result”](ch11.xhtml#resultviewmodel_needs_to_hold_the_result)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A view model factory creates view models”](ch11.xhtml#a_view_model_factory_creates_view_models)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create the ResultViewModelFactory class”](ch11.xhtml#create_the_resultviewmodelfactory_class)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use the factory to create the view model”](ch11.xhtml#use_the_factory_to_create_the_view_model)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch11.xhtml#what_happens_when_the_app_runs-id00173)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch11.xhtml#your_android_toolbox-id00175)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.xhtml#live_datacolon_leaping_into_action)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Your code often needs to react to property value changes.** If a view model
    property changes value, for example, **the fragment might need to respond** by
    updating its views or navigating elsewhere. But **how does a fragment get to hear
    when a property’s been updated**? Here, we’ll introduce you to **live data**:
    a way of **telling interested parties when something’s changed**. You’ll learn
    all about ***MutableLiveData***, and how to **make your fragment observe properties**
    of this type. You’ll discover **how the *LiveData* type helps maintain your app’s
    integrity**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“The Guessing Game app revisited”](ch12.xhtml#the_guessing_game_app_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The fragments decide when to update views”](ch12.xhtml#the_fragments_decide_when_to_update_view)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s what we’re going to do”](ch12.xhtml#hereapostrophes_what_weapostroph-id00177)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“GameViewModel and GameFragment need to use live data”](ch12.xhtml#gameviewmodel_and_gamefragment_need_to_u)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Live data objects use a value property”](ch12.xhtml#live_data_objects_use_a_value_property)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The fragment observes the view model properties and reacts to changes.”](ch12.xhtml#the_fragment_observes_the_view_model_pro)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for GameFragment.kt”](ch12.xhtml#the_full_code_for_gamefragmentdotkt)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch12.xhtml#what_happens_when_the_app_runs-id00180)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fragments can update GameViewModel’s properties”](ch12.xhtml#fragments_can_update_gameviewmodelapostr)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch12.xhtml#what_happens_when_the_app_runs-id00185)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“GameFragment still includes game logic”](ch12.xhtml#gamefragment_still_includes_game_logic)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for GameViewModel.kt”](ch12.xhtml#the_full_code_for_gameviewmodeld-id00189)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make GameFragment observe the new property”](ch12.xhtml#make_gamefragment_observe_the_new_proper)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch12.xhtml#what_happens_when_the_app_runs-id00190)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch12.xhtml#your_android_toolbox-id00192)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.xhtml#data_bindingcolon_building_smart_layouts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layouts can do more than control your app’s appearance.** All of the layouts
    you’ve written so far have been told how they should behave by activity or fragment
    code. But just imagine if **the layouts could think for themselves**, and **make
    their own decisions**. In this chapter, we’ll introduce you to **data binding**:
    a way of **boosting your layout’s IQ**. You’ll find out **how to make views get
    values** directly from the view model. You’ll use **listener binding** to make
    buttons call their methods. You’ll even discover how **one simple line of code
    lets views respond to live data updates**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Back to the Guessing Game app”](ch13.xhtml#back_to_the_guessing_game_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The fragments update the views in their layouts”](ch13.xhtml#the_fragments_update_the_views_in_their)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Enable data binding in the app build.gradle file”](ch13.xhtml#enable_data_binding_in_the_app_builddotg)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“ResultFragment updates the text in its layout”](ch13.xhtml#resultfragment_updates_the_text_in_its_l)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“1\. Add <layout> and <data> elements”](ch13.xhtml#onedot_add_less_thanlayoutgreater_than_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“2\. Set the layout’s data binding variable”](ch13.xhtml#twodot_set_the_layoutapostrophes_data_bi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“3\. Use the layout’s data binding variable to access the view model”](ch13.xhtml#threedot_use_the_layoutapostrophes_data)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch13.xhtml#what_happens_when_the_app_runs-id00197)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“![Images](Images/zooml.png) <layout> Up Close”](ch13.xhtml#less_thanlayoutgreater_than_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“GameFragment can use data binding too”](ch13.xhtml#gamefragment_can_use_data_binding_too)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add <layout> and <data> elements to fragment_game.xml”](ch13.xhtml#add_less_thanlayoutgreater_than_and_less)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use the data binding variable to set the layout’s text”](ch13.xhtml#use_the_data_binding_variable_to_set_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“String resources revisited”](ch13.xhtml#string_resources_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The layout can pass parameters to String resources”](ch13.xhtml#the_layout_can_pass_parameters_to_string)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to set the gameViewModel variable”](ch13.xhtml#we_need_to_set_the_gameviewmodel_variabl)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch13.xhtml#what_happens_when_the_app_runs-id00202)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can use data binding to call methods”](ch13.xhtml#you_can_use_data_binding_to_call_methods)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add finishGame() to GameViewModel.kt”](ch13.xhtml#add_finishgameleft_parenthesisright_pare)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use data binding to make a button call a method when clicked”](ch13.xhtml#use_data_binding_to_make_a_button_call_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch13.xhtml#what_happens_when_the_app_runs-id00208)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Fireside Chats”](ch13.xhtml#fireside_chats)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We can switch off view binding”](ch13.xhtml#we_can_switch_off_view_binding)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch13.xhtml#your_android_toolbox-id00214)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Most apps need data that persists.** But if you don’t take steps to store
    this data somewhere, **it will be lost forever** as soon as the app is closed
    down. You usually keep data safe in Androidville by **storing it in a database**,
    so in this chapter, we’ll introduce you to the **Room persistence library**. You’ll
    learn how to **build databases**, **create tables,** and **define data access
    methods** using annotated classes and interfaces. You’ll find out how to **use
    coroutines** to run database code in the background. And along the way, you’ll
    discover how to **transform your live data as soon as it changes** with a little
    help from ***Transformations.map()***.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Most apps need to store data”](ch14.xhtml#most_apps_need_to_store_data)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Room is a database library that sits on top of SQLite”](ch14.xhtml#room_is_a_database_library_that_sits_on)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create TasksFragment”](ch14.xhtml#create_tasksfragment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How Room databases are created”](ch14.xhtml#how_room_databases_are_created)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll store tasks data in a table”](ch14.xhtml#weapostrophell_store_tasks_data_in_a_tab)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Specify a table name with @Entity”](ch14.xhtml#specify_a_table_name_with_commercial_ate)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use an interface to specify data operations”](ch14.xhtml#use_an_interface_to_specify_data_operati)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use @Insert to insert a record”](ch14.xhtml#use_commercial_atinsert_to_insert_a_reco)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use @Delete to delete a record”](ch14.xhtml#use_commercial_atdelete_to_delete_a_reco)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a TaskDatabase abstract class”](ch14.xhtml#create_a_taskdatabase_abstract_class)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add properties for any DAO interfaces”](ch14.xhtml#add_properties_for_any_dao_interfaces)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“MVVM revisited”](ch14.xhtml#mvvm_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Database operations can run in slooooow-moooo”](ch14.xhtml#database_operations_can_run_in_slooooow-)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“1\. Mark TaskDao’s methods with suspend”](ch14.xhtml#onedot_mark_taskdaoapostrophes_methods_w)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“2\. Launch the insert() method in the background”](ch14.xhtml#twodot_launch_the_insertleft_parenthesis)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“TasksViewModel needs a view model factory”](ch14.xhtml#tasksviewmodel_needs_a_view_model_factor)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll use data binding to insert a record”](ch14.xhtml#weapostrophell_use_data_binding_to_inser)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch14.xhtml#what_happens_when_the_code_runs)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“TasksFragment needs to display records”](ch14.xhtml#tasksfragment_needs_to_display_records)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use getAll() to get all tasks from the database”](ch14.xhtml#use_getallleft_parenthesisright_parenthe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A LiveData<List<Task>> is a more complex type”](ch14.xhtml#a_livedataless_thanlistless_thantaskgrea)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s update the TasksViewModel code”](ch14.xhtml#letapostrophes_update_the_tasksviewmodel)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll bind the tasksString property to the layout’s text view”](ch14.xhtml#weapostrophell_bind_the_tasksstring_prop)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch14.xhtml#what_happens_when_the_code_runs-id00230)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch14.xhtml#your_android_toolbox-id00232)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 15](ch15.xhtml#recycler_viewscolon_reducecomma_reusecom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lists of data are a key part of most apps.** And in this chapter, we’ll show
    you how to create one using a **recycler view**: a **super-flexible** way of building
    a **scrollable list**. You’ll learn how to create **flexible layouts** for your
    list, including text views, checkboxes, and more. You’ll find out **how to create
    adapters** that **squish your data** into the recycler view in whatever way you
    choose. You’ll discover how to use **card views** to give your data a **3D material
    look**. Finally, we’ll show you how **layout managers** can completely change
    the look of your list with **just one or two lines of code**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“What the Tasks app currently looks like”](ch15.xhtml#what_the_tasks_app_currently_looks_like)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We can turn the list into a recycler view”](ch15.xhtml#we_can_turn_the_list_into_a_recycler_vie)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Tell the recycler view how to display each item…”](ch15.xhtml#tell_the_recycler_view_how_to_display_ea)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The adapter adds data to the recycler view”](ch15.xhtml#the_adapter_adds_data_to_the_recycler_vi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Define the adapter’s view holder”](ch15.xhtml#define_the_adapterapostrophes_view_holde)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Override the onCreateViewHolder() method”](ch15.xhtml#override_the_oncreateviewholderleft_pare)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add data to the layout’s view”](ch15.xhtml#add_data_to_the_layoutapostrophes_view)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to display the recycler view”](ch15.xhtml#we_need_to_display_the_recycler_view)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ve added a recycler view to TasksFragment’s layout”](ch15.xhtml#weapostropheve_added_a_recycler_view_to)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“TasksFragment needs to update TaskItemAdapter’s data property”](ch15.xhtml#tasksfragment_needs_to_update_taskitemad)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch15.xhtml#what_happens_when_the_code_runs-id00239)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Recycler views are very flexible”](ch15.xhtml#recycler_views_are_very_flexible)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How to create a card view”](ch15.xhtml#how_to_create_a_card_view)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for task_item.xml”](ch15.xhtml#the_full_code_for_taskunderscoreitemdotx)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The adapter’s view holder needs to work with the new layout code”](ch15.xhtml#the_adapterapostrophes_view_holder_needs)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for TaskItemAdapter.kt”](ch15.xhtml#the_full_code_for_taskitemadapte-id00241)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The layout manager gallery”](ch15.xhtml#the_layout_manager_gallery)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update fragment_tasks.xml to arrange items in a grid”](ch15.xhtml#update_fragmentunderscoretasksdotxml_to)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch15.xhtml#what_happens_when_the_code_runs-id00243)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch15.xhtml#your_android_toolbox-id00249)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 16](ch16.xhtml#diffutil_and_data_bindingcolon_life_in_t)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Your app needs to run as smoothly and efficiently as possible.** But if you’re
    not careful, large or complex data sets can cause your recycler view to glitch.
    In this chapter, we’ll introduce you to ***DiffUtil***: a utility class that **adds
    extra smarts to your recycler view**. You’ll find out how to use it to **make
    efficient updates** to your recycler view. You’ll discover how ***ListAdapters*
    make using *DiffUtil* a breeze**. And along the way, you’ll learn **how to get
    rid of *findViewById() f*or good** by implementing **data binding in your recycler
    view code**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“The Tasks app revisited”](ch16.xhtml#the_tasks_app_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“How the recycler view gets its data”](ch16.xhtml#how_the_recycler_view_gets_its_data)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The data property’s setter calls notifyDataSetChanged()”](ch16.xhtml#the_data_propertyapostrophes_setter_call)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Tell the recycler view what needs to change”](ch16.xhtml#tell_the_recycler_view_what_needs_to_cha)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Here’s what we’re going to do”](ch16.xhtml#hereapostrophes_what_weapostroph-id00252)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to implement DiffUtil.ItemCallback”](ch16.xhtml#we_need_to_implement_diffutildotitemcall)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A ListAdapter accepts a DiffUtil.ItemCallback argument”](ch16.xhtml#a_listadapter_accepts_a_diffutildotitemc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The updated code for TaskItemAdapter.kt”](ch16.xhtml#the_updated_code_for_taskitemadapterdotk)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Populate the ListAdapter’s list…”](ch16.xhtml#populate_the_listadapterapostrophes_list)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The updated code for TasksFragment.kt”](ch16.xhtml#the_updated_code_for_tasksfragme-id00253)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch16.xhtml#what_happens_when_the_code_runs-id00254)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Recycler views can use data binding”](ch16.xhtml#recycler_views_can_use_data_binding)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a data binding variable to task_item.xml”](ch16.xhtml#add_a_data_binding_variable_to_taskunder)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The layout gets inflated in the adapter’s view holder code”](ch16.xhtml#the_layout_gets_inflated_in_the_adaptera)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use the binding class to inflate the layout”](ch16.xhtml#use_the_binding_class_to_inflate_the_lay)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for TaskItemAdapter.kt”](ch16.xhtml#the_full_code_for_taskitemadapte-id00258)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for task_item.xml”](ch16.xhtml#the_full_code_for_taskunderscore-id00259)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch16.xhtml#what_happens_when_the_code_runs-id00261)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch16.xhtml#your_android_toolbox-id00265)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 17](ch17.xhtml#recycler_view_navigationcolon_pick_a_car)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Some apps rely on the user selecting an item from a list.** And in this chapter,
    you’ll learn **how to make recycler views a core part of your app design** by
    **making their items clickable**. You’ll discover how to **implement recycler
    view navigation** by making the app navigate to a new screen each time the user
    clicks on a record. You’ll find out **how to show the user extra information**
    about their chosen record, and update it in the database.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Recycler views can be used for navigation”](ch17.xhtml#recycler_views_can_be_used_for_navigatio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make each item clickable”](ch17.xhtml#make_each_item_clickable)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Where should we create the toast?”](ch17.xhtml#where_should_we_create_the_toastquestion)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll pass a lambda to TaskItemAdapter”](ch17.xhtml#weapostrophell_pass_a_lambda_to_taskitem)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch17.xhtml#what_happens_when_the_code_runs-id00271)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We want to use the recycler view to navigate to a new fragment”](ch17.xhtml#we_want_to_use_the_recycler_view_to_navi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create EditTaskFragment…”](ch17.xhtml#create_edittaskfragmenthellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Update the navigation graph”](ch17.xhtml#update_the_navigation_graph-id00276)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make TasksFragment navigate to EditTaskFragment”](ch17.xhtml#make_tasksfragment_navigate_to_edittaskf)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Make EditTaskFragment display the task ID”](ch17.xhtml#make_edittaskfragment_display_the_task_i)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch17.xhtml#what_happens_when_the_code_runs-id00280)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We want to use EditTaskFragment to update task records”](ch17.xhtml#we_want_to_use_edittaskfragment_to_updat)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use TaskDao to interact with database records”](ch17.xhtml#use_taskdao_to_interact_with_database_re)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create EditTaskViewModel”](ch17.xhtml#create_edittaskviewmodel)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“EditTaskViewModel will tell EditTaskFragment when to navigate”](ch17.xhtml#edittaskviewmodel_will_tell_edittaskfrag)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“EditTaskViewModel needs a view model factory”](ch17.xhtml#edittaskviewmodel_needs_a_view_model_fac)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“fragment_edit_task.xml needs to display the task”](ch17.xhtml#fragmentunderscoreeditunderscoretaskdotx)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the code runs”](ch17.xhtml#what_happens_when_the_code_runs-id00284)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch17.xhtml#your_android_toolbox-id00286)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 18](ch18.xhtml#jetpack_composecolon_compose_yourself)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All the UIs you’ve built so far have used views and layout files.** But with
    **Jetpack Compose**, **that’s not the only option**. In this chapter, we’re going
    to take **a road trip to Composeville**, and find out how to build UIs using Compose
    components called **composables** instead of views. You’ll learn how to use built-in
    composables such as **Text**, **Image**, **TextField,** and **Button**. You’ll
    discover how to arrange them in **Rows** and **Columns**, and style them using
    **themes**. You’ll write and preview your own **composable functions**. You’ll
    even find out **how to manage a composable’s state** using ***MutableState***
    objects.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“UI components don’t have to be Views”](ch18.xhtml#ui_components_donapostrophet_have_to_be)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create a new Compose project”](ch18.xhtml#create_a_new_compose_project)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Compose projects have no layout files”](ch18.xhtml#compose_projects_have_no_layout_files)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What Compose activity code looks like”](ch18.xhtml#what_compose_activity_code_looks_like)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use a Text composable to display text”](ch18.xhtml#use_a_text_composable_to_display_text)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use composables in composable functions”](ch18.xhtml#use_composables_in_composable_functions)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Preview composables with the Design or Split option”](ch18.xhtml#preview_composables_with_the_design_or_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s make the app convert temperatures”](ch18.xhtml#letapostrophes_make_the_app_convert_temp)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a MainActivityContent composable function”](ch18.xhtml#add_a_mainactivitycontent_composable_fun)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add an Image to MainActivity.kt”](ch18.xhtml#add_an_image_to_mainactivitydotkt)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Let’s display the temperature text”](ch18.xhtml#letapostrophes_display_the_temperature_t)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Use a Button composable to add a button”](ch18.xhtml#use_a_button_composable_to_add_a_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to pass a lambda to ConvertButton”](ch18.xhtml#we_need_to_pass_a_lambda_to_convertbutto)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“![Images](Images/zooml.png) Composition Up Close”](ch18.xhtml#composition_up_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We need to change the value of TemperatureText’s argument”](ch18.xhtml#we_need_to_change_the_value_of_temperatu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch18.xhtml#what_happens_when_the_app_runs-id00298)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a TextField to a composable function”](ch18.xhtml#add_a_textfield_to_a_composable_function)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch18.xhtml#what_happens_when_the_app_runs-id00302)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add padding to the Column composable”](ch18.xhtml#add_padding_to_the_column_composable)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“You can center composables in Columns or Rows”](ch18.xhtml#you_can_center_composables_in_columns_or)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Applying themes: revisited”](ch18.xhtml#applying_themescolon_revisited)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Android Studio includes extra theme code”](ch18.xhtml#android_studio_includes_extra_theme_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for MainActivity.kt”](ch18.xhtml#the_full_code_for_mainactivitydo-id00304)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch18.xhtml#your_android_toolbox-id00306)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 19](ch19.xhtml#integrating_compose_with_viewscolon_perf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You get the best results when things work together.** So far, you’ve learned
    how to build a UI using views or composables. But what if you want to use **both**?
    In this chapter, you’ll find out how to get **the best of both worlds** by **adding
    composables to a View-based UI**. You’ll discover techniques for making **composables
    work with view models**. You’ll even find out how to make them **respond to *LiveData*
    updates**. By the end of the chapter, you’ll have all the tools you need to **use
    composables with views**, or even **migrate to a pure Compose UI.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“You can add composables to View-based UIs”](ch19.xhtml#you_can_add_composables_to_view-based_ui)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The Guessing Game app structure”](ch19.xhtml#the_guessing_game_app_structure)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll replace ResultFragment’s views with composables”](ch19.xhtml#weapostrophell_replace_resultfragmentapo)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“A ComposeView lets you add composables to a layout”](ch19.xhtml#a_composeview_lets_you_add_composables_t)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add composables using Kotlin code”](ch19.xhtml#add_composables_using_kotlin_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a composable function for the fragment’s content”](ch19.xhtml#add_a_composable_function_for_the_fragme)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Reproduce the Start New Game button”](ch19.xhtml#reproduce_the_start_new_game_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Reproduce ResultFragment’s TextView”](ch19.xhtml#reproduce_resultfragmentapostrophes_text)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“onCreateView() returns the UI’s root view”](ch19.xhtml#oncreateviewleft_parenthesisright_parent)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“The full code for ResultFragment.kt”](ch19.xhtml#the_full_code_for_resultfragment-id00315)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“What happens when the app runs”](ch19.xhtml#what_happens_when_the_app_runs-id00316)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Next we’ll make GameFragment use composables too”](ch19.xhtml#next_weapostrophell_make_gamefragment_us)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll add a ComposeView to fragment_game.xml”](ch19.xhtml#weapostrophell_add_a_composeview-id00320)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Add a composable function for GameFragment’s content”](ch19.xhtml#add_a_composable_function_for_gamefragme)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Reproduce the Finish Game button”](ch19.xhtml#reproduce_the_finish_game_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Reproduce the EditText with a TextField”](ch19.xhtml#reproduce_the_edittext_with_a_textfield)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Reproduce the Guess button”](ch19.xhtml#reproduce_the_guess_button)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“We’ll display the incorrect guesses in a Text composable”](ch19.xhtml#weapostrophell_display_the_incorrect_gue)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Create an IncorrectGuessesText composable function”](ch19.xhtml#create_an_incorrectguessestext_composabl)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Your Android Toolbox”](ch19.xhtml#your_android_toolbox-id00329)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Appendix A](app01.xhtml#colon_leftoverscolon_the_top_ten)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Even after all that, there’s still a little more.** There are just a few
    more things we think you need to know. We wouldn’t feel right about ignoring them,
    and we really wanted to give you a book you’d be able to lift without extensive
    training at the local gym. Before you put down the book, **read through these
    tidbits**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“1\. Sharing data with other apps”](app01.xhtml#onedot_sharing_data_with_other_apps)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“2\. WorkManager”](app01.xhtml#twodot_workmanager)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“3\. Dialogs and notifications”](app01.xhtml#threedot_dialogs_and_notifications)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“4\. Automated testing”](app01.xhtml#fourdot_automated_testing)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“5\. Supporting different screen sizes”](app01.xhtml#fivedot_supporting_different_screen_size)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“6\. More Compose features”](app01.xhtml#sixdot_more_compose_features)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“7\. Retrofit”](app01.xhtml#sevendot_retrofit)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“8\. Android Game Development Kit”](app01.xhtml#eightdot_android_game_development_kit)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“9\. CameraX”](app01.xhtml#ninedot_camerax)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“10\. Publishing your app”](app01.xhtml#tendot_publishing_your_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
