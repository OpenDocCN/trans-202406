- en: Appendix C. Scoped Declarations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript declarations have a rich set of behaviors needed to model types and
    values, and as in JavaScript, they can be overloaded in a variety of ways. This
    appendix covers two of these behaviors, summarizing which declarations generate
    types (and which generate values), and which declarations can be merged.
  prefs: []
  type: TYPE_NORMAL
- en: Does It Generate a Type?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some TypeScript declarations create a type, some create a value, and some create
    both. See to [Table C-1](#generate-type-table) for a quick reference.
  prefs: []
  type: TYPE_NORMAL
- en: Table C-1\. Does the declaration generate a type?
  prefs: []
  type: TYPE_NORMAL
- en: '| Keyword | Generates a type? | Generates a value? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `class` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `const`, `let`, `var` | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `enum` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `function` | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `interface` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `namespace` | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: Does It Merge?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Declaration merging is a core TypeScript behavior. Take advantage of it to create
    richer APIs, better modularize your code, and make your code safer.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table C-2](#declare-merge-table) is reprinted from [“Declaration Merging”](ch10.html#namespace-merging);
    it’s a handy reference for which kinds of declarations TypeScript will merge for
    you.'
  prefs: []
  type: TYPE_NORMAL
- en: Table C-2\. Can the declaration be merged?
  prefs: []
  type: TYPE_NORMAL
- en: '|  |  |  |  |  |  | To |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | Value | Class | Enum | Function | Types alias | Interface | Namespace
    | Module |'
  prefs: []
  type: TYPE_TB
- en: '|  | Value | No | No | No | No | Yes | Yes | No |  —  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Class |  —  | No | No | No | No | Yes | Yes |  —  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Enum |  —  |  —  | Yes | No | No | No | Yes |  —  |'
  prefs: []
  type: TYPE_TB
- en: '| From | Function |  —  |  —  |  —  | No | Yes | Yes | Yes |  —  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Type alias |  —  |  —  |  —  |  —  | No | No | Yes |  —  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Interface |  —  |  —  |  —  |  —  |  —  | Yes | Yes |  —  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Namespace |  —  |  —  |  —  |  —  |  —  |  —  | Yes |  —  |'
  prefs: []
  type: TYPE_TB
- en: '|  | Module |  —  |  —  |  —  |  —  |  —  |  —  |  —  | Yes |'
  prefs: []
  type: TYPE_TB
