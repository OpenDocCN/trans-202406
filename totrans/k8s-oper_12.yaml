- en: Appendix B. Custom Resource Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When adding a new API, the Operator SDK generates a skeleton custom resource
    definition. This skeleton is usable as is; no further changes or additions need
    to be made to create custom resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The skeleton CRD achieves this flexibility by simply defining the `spec` and
    `status` sections, representing the user input and custom resource state, respectively,
    as open-ended objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The drawback to this approach is that Kubernetes isn’t able to validate any
    of the data in either of these fields. Since Kubernetes doesn’t know what values
    should or should not be allowed, as long as the manifest parses, the values are
    allowed.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, CRDs include support for the [OpenAPI Specification](https://oreil.ly/bzRIu)
    to describe the validation constraints of each of its fields. You’ll need to manually
    add this validation to the CRD to describe the allowed values for both the `spec`
    and `status` sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll make two primary changes to the `spec` section of the CRD:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `properties` map. For each of the attributes that may be specified for
    custom resources of this type, add an entry to this map along with information
    on the parameter’s type and allowed values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, you can add a `required` field listing the properties whose presence
    Kubernetes should enforce. Add the name of each required property as an entry
    in this list. If you omit any of these properties during resource creation, Kubernetes
    will reject the resource.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also flesh out the `status` section with property information following
    the same conventions as for `spec`; however, there is no need to add a `required`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In both cases, the existing line `type: object` remains; you insert the new
    additions at the same level as this “type” declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find both the `spec` and `status` fields in the following section of
    the CRD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, the additions to the VisitorsApp CRD are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This snippet is only an example of what you can accomplish using OpenAPI validation.
    You can find detailed information on creating custom resource definitions in [the
    Kubernetes documentation](https://oreil.ly/FfkJe).
  prefs: []
  type: TYPE_NORMAL
