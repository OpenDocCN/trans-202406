["```\nconst App = () => {\n  ...\n  return (\n    <>\n      <h1>Manage Tasks</h1>\n      <a href='/contacts'>Contacts</a>&nbsp;|&nbsp;\n      <a href='/events'>Events</a>&nbsp;|&nbsp;\n      Tasks&nbsp;|&nbsp;\n      <a href='/notes'>Notes</a>&nbsp;|&nbsp;\n      <a href='/time'>TimeRec</a>&nbsp;|&nbsp;\n      <a href='/diary'>Diary</a>&nbsp;|&nbsp;\n      <a href='/expenses'>Expenses</a>&nbsp;|&nbsp;\n      <a href='/invoices'>Invoices</a>\n      <button className='addButton'\n          onClick={() => setFormOpen(true)}>+</button>\n      <TaskContexts .../>\n      &#169;2029, Amalgamated Consultants Corp. All Rights Reserved.\n      <TaskForm .../>\n      <ModalQuestion ...>\n        Are you sure you want to delete this task?\n      </ModalQuestion>\n    </>\n  )\n}\n```", "```\n<header>\n    <h1>Manage Tasks</h1>\n</header>\n```", "```\n<nav>\n    <a href='/contacts'>Contacts</a>&nbsp;|&nbsp;\n    <a href='/events'>Events</a>&nbsp;|&nbsp;\n    Tasks&nbsp;|&nbsp;\n    <a href='/notes'>Notes</a>&nbsp;|&nbsp;\n    <a href='/time'>TimeRec</a>&nbsp;|&nbsp;\n    <a href='/diary'>Diary</a>&nbsp;|&nbsp;\n    <a href='/expenses'>Expenses</a>&nbsp;|&nbsp;\n    <a href='/invoices'>Invoices</a>\n</nav>\n```", "```\n<main>\n    <button className='addButton'\n            onClick={() => setFormOpen(true)}>+</button>\n    <TaskContexts contexts={contexts}\n                  tasks={tasks}\n                  onDelete={setTaskToRemove}\n                  onEdit={task => {\n                      setEditTask(task)\n                      setFormOpen(true)\n                  }}\n    />\n</main>\n```", "```\n<footer>\n    &#169;2029, Amalgamated Consultants Corp. All Rights Reserved.\n</footer>\n```", "```\n<TaskForm .../>\n<ModalQuestion ...>\n    Are you sure you want to delete this task?\n</ModalQuestion>\n```", "```\nconst App = () => {\n  ....\n  return (\n    <>\n      <header>\n        <h1>Manage Tasks</h1>\n      </header>\n      <nav>\n        <a href='/contacts'>Contacts</a>&nbsp;|&nbsp;\n        <a href='/events'>Events</a>&nbsp;|&nbsp;\n        Tasks&nbsp;|&nbsp;\n        <a href='/notes'>Notes</a>&nbsp;|&nbsp;\n        <a href='/time'>TimeRec</a>&nbsp;|&nbsp;\n        <a href='/diary'>Diary</a>&nbsp;|&nbsp;\n        <a href='/expenses'>Expenses</a>&nbsp;|&nbsp;\n        <a href='/invoices'>Invoices</a>\n      </nav>\n      <main>\n      <button className='addButton'\n          onClick={() => setFormOpen(true)}>+</button>\n        <TaskContexts .../>\n      </main>\n      <footer>\n        &#169;2029, Amalgamated Consultants Corp. All Rights Reserved.\n      </footer>\n      <TaskForm .../>\n      <ModalQuestion ...>\n        Are you sure you want to delete this task?\n      </ModalQuestion>\n    </>\n  )\n}\n```", "```\nimport DeleteIcon from './delete-24px.svg'\nimport './Task.css'\n\nconst Task = ({ task, onDelete, onEdit }) => {\n  return (\n    <div className=\"Task\">\n        <div className=\"Task-contents\"\n          ...\n        >\n        <div className=\"Task-details\">\n          <div className=\"Task-title\">{task.title}</div>\n          <div className=\"Task-description\">{task.description}</div>\n        </div>\n        <div className=\"Task-controls\">\n          <img\n            src={DeleteIcon}\n            width={24}\n            height={24}\n            title=\"Delete\"\n            onClick={(evt) => {\n              evt.stopPropagation()\n              onDelete()\n            }}\n            alt=\"Delete icon\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n```", "```\nreturn <div role='listitem' className='Task'>\n    <div className='Task-details'>\n        ....\n```", "```\nimport Task from '../Task'\nimport './TaskList.css'\n\nfunction TaskList({ tasks, onDelete, onEdit }) {\n  return (\n    <div role=\"list\" className=\"TaskList\">\n      {tasks.map((t) => (\n        <Task\n          key={t.id}\n          task={t}\n          onDelete={() => onDelete(t)}\n          onEdit={() => onEdit(t)}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default TaskList\n```", "```\nimport Task from '../Task'\nimport './TaskList.css'\n\nfunction TaskList({ tasks, onDelete, onEdit }) {\n  return (\n    <ul className=\"TaskList\">\n      {tasks.map((t) => (\n        <Task\n          key={t.id}\n          task={t}\n          onDelete={() => onDelete(t)}\n          onEdit={() => onEdit(t)}\n        />\n      ))}\n    </ul>\n  )\n}\n\nexport default TaskList\n```", "```\nimport './Task.css'\n\nconst Task = ({ task, onDelete, onEdit }) => {\n  return (\n    <li className=\"Task\">\n      <div\n        className=\"Task-contents\"\n        ...\n      >\n        <div className=\"Task-details\">...</div>\n        <div className=\"Task-controls\">...</div>\n      </div>\n    </li>\n  )\n}\n\nexport default Task\n```", "```\n<nav>\n    <a href='/contacts'>Contacts</a>&nbsp;|&nbsp;\n    <a href='/events'>Events</a>&nbsp;|&nbsp;\n    Tasks&nbsp;|&nbsp;\n    <a href='/notes'>Notes</a>&nbsp;|&nbsp;\n    <a href='/time'>TimeRec</a>&nbsp;|&nbsp;\n    <a href='/diary'>Diary</a>&nbsp;|&nbsp;\n    <a href='/expenses'>Expenses</a>&nbsp;|&nbsp;\n    <a href='/invoices'>Invoices</a>\n</nav>\n```", "```\n<button className='addButton'\n    onClick={() => setFormOpen(true)}>+</button>\n```", "```\n<button aria-haspopup='dialog' className='addButton'\n    onClick={() => setFormOpen(true)}>+</button>\n```", "```\nconst TaskForm = ({ task, contexts, onCreate, onClose, open }) => {\n  ...\n\n  return <Modal open={open} onCancel={close}>\n    <form>\n      ....\n    </form>\n    <ModalFooter>\n      <button onClick={...}>Cancel</button>\n      <button onClick={...}>Save</button>\n    </ModalFooter>\n  </Modal>\n}\n```", "```\nimport './Modal.css'\n\nfunction Modal({ open, onCancel, children }) {\n  if (!open) {\n    return null\n  }\n\n  return <div className='Modal'\n        ...\n  >\n    <div className='Modal-dialog'\n       ...\n    >\n      {children}\n    </div>\n  </div>\n}\n\nexport default Modal\n```", "```\nimport './Modal.css'\n\nfunction Modal({ open, onCancel, children, role, title }) {\n  if (!open) {\n    return null\n  }\n\n  return <div role='presentation' className='Modal'\n        ...\n  >\n    <div className='Modal-dialog'\n       role={role} title={title}\n       ...\n    >\n      {children}\n    </div>\n  </div>\n}\n\nexport default Modal\n```", "```\nconst TaskForm = ({ task, contexts, onCreate, onClose, open }) => {\n  ...\n\n  return <Modal title='Create or edit a task'\n          role='dialog'\n          open={open} onCancel={close}>\n    <form>\n      ....\n    </form>\n    <ModalFooter>\n      <button onClick={...}>Cancel</button>\n      <button onClick={...}>Save</button>\n    </ModalFooter>\n  </Modal>\n}\n```", "```\n<img src={DeleteIcon}\n   width={24}\n   height={24}\n   alt='Delete icon'\n   aria-haspopup='dialog'\n   role='button'\n   title='Delete'\n   onClick={evt => {\n     evt.stopPropagation()\n     evt.preventDefault()\n     onDelete()\n   }}\n/>\n```", "```\n<button\n  onClick={evt => {\n    evt.stopPropagation()\n    evt.preventDefault()\n    onDelete()\n  }}\n  title='Delete'\n  aria-haspopup='dialog'\n>\n  <img src={DeleteIcon}\n     width={24}\n     height={24}\n     alt='Delete icon'\n  />\n</button>\n```", "```\n$ npm install --save-dev eslint\n```", "```\n$ npm install --save-dev eslint-plugin-jsx-a11y\n```", "```\n\"scripts\": {\n  ....\n  \"lint\": \"eslint src\"\n},\n```", "```\n\"eslintConfig\": {\n  \"extends\": [\n    \"react-app\"\n    \"react-app/jest\",\n    \"plugin:jsx-a11y/recommended\"\n  ],\n  \"plugins\": [\n    \"jsx-a11y\"\n  ],\n  \"rules\": {}\n}\n```", "```\n\"eslintConfig\": {\n  \"extends\": [\n    \"react-app\"\n    \"react-app/jest\",\n    \"plugin:jsx-a11y/recommended\"\n  ],\n  \"plugins\": [\n    \"jsx-a11y\"\n  ],\n  \"rules\": {\n    \"jsx-a11y/no-onchange\": \"off\"\n  }\n}\n```", "```\n$ npm run lint\n```", "```\n$ npm run lint\n> app@0.1.0 lint app\n> eslint src\napp/src/Task/Task.js\n 6:9  error  Visible, non-interactive elements with click handlers\n must have at least one keyboard listener\n jsx-a11y/click-events-have-key-events\n 6:9  error  Static HTML elements with event handlers require a role\n jsx-a11y/no-static-element-interactions\n✖ 2 problems (2 errors, 0 warnings)\n```", "```\n<li className=\"Task\">\n  <div className=\"Task-contents\" onClick={onEdit}>\n    ....\n  </div>\n</li>\n```", "```\n6:9  error  Static HTML elements with event handlers require a role\n jsx-a11y/no-static-element-interactions\n```", "```\n<li className='Task'>\n        <div className='Task-contents'\n             role='button'\n             aria-haspopup='dialog'\n             onClick={onEdit}\n        >\n    ....\n</div>\n</li>\n```", "```\n$ npm run lint\n> app@0.1.0 lint app\n> eslint src\napp/src/Task/Task.js\n 6:9  error  Visible, non-interactive elements with click handlers\n must have at least one keyboard listener\n jsx-a11y/click-events-have-key-events\n 6:9  error  Elements with the 'button' interactive role must be tabbable\n jsx-a11y/interactive-supports-focus\n✖ 2 problems (2 errors, 0 warnings)\n```", "```\n<li className='Task'>\n        <div className='Task-contents'\n             role='button'\n             tabIndex={0}\n             onClick={onEdit}\n        >\n    ....\n</div>\n</li>\n```", "```\n$ npm run lint\n> app@0.1.0 lint app\n> eslint src\napp/src/Task/Task.js\n 6:9  error  Visible, non-interactive elements with click handlers\n must have at least one keyboard listener\n jsx-a11y/click-events-have-key-events\n1 problems (1 errors, 0 warnings)\n```", "```\n<li className=\"Task\">\n  <div\n    className=\"Task-contents\"\n    role=\"button\"\n    tabIndex={0}\n    onClick={onEdit}\n    onKeyDown={(evt) => {\n      if (evt.key === 'Enter' || evt.key === ' ') {\n        evt.preventDefault()\n        onEdit()\n      }\n    }}\n  >\n    ....\n  </div>\n</li>\n```", "```\n:focus-visible {\n    outline: 2px solid blue;\n}\n```", "```\nconst TaskForm = ({ task, contexts, onCreate, onClose, open }) => {\n  ...\n  return (\n    <Modal\n      title=\"Create or edit a task\"\n      role=\"fish\"\n      open={open}\n      onCancel={close}\n    >\n      <form>...</form>\n      <ModalFooter>...</ModalFooter>\n    </Modal>\n  )\n}\n```", "```\nh1 {\n    color: #9e9e9e;\n}\n```", "```\nElements must have sufficient color contrast\n\nFix the following:\nElement has insufficient color contrast of 2.67 (foreground color: #9e9e9e,\nbackground color: #ffffff, font size: 24.0pt (32px), font weight: bold).\nExpected contrast ratio of 3:1\n```", "```\n$ npm install --save-dev cypress axe-core\n```", "```\n$ npm install --save-dev cypress-axe\n```", "```\n$ npx cypress open\n```", "```\nimport 'cypress-axe'\n```", "```\nmodule.exports = (on, config) => {\n  on('task', {\n    log(message) {\n      console.log(message)\n      return null\n    },\n    table(message) {\n      console.table(message)\n      return null\n    },\n  })\n}\n```", "```\nfunction terminalLog(violations) {\n  cy.task(\n    'log',\n    `${violations.length} accessibility violation${\n      violations.length === 1 ? '' : 's'\n    } ${violations.length === 1 ? 'was' : 'were'} detected`\n  )\n  const violationData = violations.map(\n    ({ id, impact, description, nodes }) => ({\n      id,\n      impact,\n      description,\n      nodes: nodes.length,\n    })\n  )\n\n  cy.task('table', violationData)\n  console.table(violationData)\n}\n\ndescribe('can be used', () => {\n  it('should be accessible when starting', () => {\n    cy.visit('/')\n    cy.injectAxe()\n    cy.checkA11y(null, null, terminalLog)\n  })\n})\n```", "```\nit('should be accessible when creating a task', () => {\n  cy.visit('/')\n  cy.injectAxe()\n  cy.contains('+').click()\n  cy.checkA11y(null, null, terminalLog)\n})\n```", "```\nconst TaskForm = ({ task, contexts, onCreate, onClose, open }) => {\n  ...\n  return (\n    <Modal\n      title=\"Create or edit a task\"\n      role=\"hatstand\"\n      open={open}\n      onCancel={close}\n    >\n      <form>...</form>\n      <ModalFooter>...</ModalFooter>\n    </Modal>\n  )\n}\n```", "```\nconst SkipButton = (props) => {\n  const { className, children, ...others } = props\n\n  return (\n    <div className={`SkipButton ${className || ''}`} {...others}>\n      {children}\n    </div>\n  )\n}\n```", "```\nconst SkipButton = (props) => {\n  const { className, children, ...others } = props\n\n  return (\n    <div\n      className={`SkipButton ${className || ''}`}\n      role=\"button\"\n      tabIndex={0}\n      {...others}\n    >\n      {children}\n    </div>\n  )\n}\n```", "```\nconst SkipButton = (props) => {\n  const { className, children, onClick, ...others } = props\n\n  return (\n    <div\n      className={`SkipButton ${className || ''}`}\n      role=\"button\"\n      tabIndex={0}\n      {...others}\n      onKeyDown={(evt) => {\n        if (evt.key === 'Enter' || evt.key === ' ') {\n          evt.preventDefault()\n          onClick(evt)\n        }\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n```", "```\nimport { forwardRef } from 'react'\nimport './SkipButton.css'\n\nconst SkipButton = forwardRef((props, ref) => {\n  const { className, children, onClick, ...others } = props\n\n  return (\n    <div\n      className={`SkipButton ${className || ''}`}\n      role=\"button\"\n      tabIndex={0}\n      ref={ref}\n      {...others}\n      onKeyDown={(evt) => {\n        if (evt.key === 'Enter' || evt.key === ' ') {\n          evt.preventDefault()\n          onClick(evt)\n        }\n      }}\n    >\n      {children}\n    </div>\n  )\n})\n```", "```\n.SkipButton {\n    z-index: 10000;\n}\n```", "```\n.SkipButton {\n    z-index: 10000;\n    position: absolute;\n    left: -1000px;\n    top: -1000px;\n}\n```", "```\n.SkipButton {\n    z-index: 10000;\n    position: absolute;\n    left: -1000px;\n    top: -1000px;\n}\n\n.SkipButton:focus {\n    top: auto;\n    left: auto;\n}\n```", "```\n.SkipButton {\n    z-index: 10000;\n    position: absolute;\n    left: -1000px;\n    top: -1000px;\n    font-size: 12px;\n    line-height: 16px;\n    display: inline-block;\n    color: black;\n    font-family: sans-serif;\n    background-color: #ffff88;\n    padding: 8px;\n    margin-left: 8px;\n\n}\n\n.SkipButton:focus {\n    top: auto;\n    left: auto;\n}\n```", "```\n<header>\n    <SkipButton onClick={() => document.querySelector('.addButton').focus()}>\n        Skip to content\n    </SkipButton>\n    <h1>Manage Tasks</h1>\n</header>\n```", "```\nimport TaskList from '../TaskList'\nimport './TaskContexts.css'\n\nfunction TaskContexts({ contexts, tasks, onDelete, onEdit }) {\n  return contexts.map((c) => {\n    const tasksForContext = tasks.filter((t) => t.context === c.value)\n    if (tasksForContext.length === 0) {\n      return <div className=\"TaskContexts-context\">&nbsp;</div>\n    }\n    return (\n      <div key={c.value} className=\"TaskContexts-context\">\n        <h2>{c.name}</h2>\n        <TaskList\n          tasks={tasksForContext}\n          onDelete={onDelete}\n          onEdit={onEdit}\n        />\n      </div>\n    )\n  })\n}\n\nexport default TaskContexts\n```", "```\nimport TaskList from '../TaskList'\nimport Skip from '../Skip'\nimport './TaskContexts.css'\n\nfunction TaskContexts({ contexts, tasks, onDelete, onEdit }) {\n  return contexts.map((c) => {\n    const tasksForContext = tasks.filter((t) => t.context === c.value)\n    if (tasksForContext.length === 0) {\n      return <div className=\"TaskContexts-context\">&nbsp;</div>\n    }\n    return (\n      <div key={c.value} className=\"TaskContexts-context\">\n        <Skip name={c.name}>\n          <h2>{c.name}</h2>\n          <TaskList\n            tasks={tasksForContext}\n            onDelete={onDelete}\n            onEdit={onEdit}\n          />\n        </Skip>\n      </div>\n    )\n  })\n}\n\nexport default TaskContexts\n```", "```\nimport { useRef } from 'react'\nimport SkipButton from '../SkipButton'\nimport './Skip.css'\n\nconst Skip = ({ children, name }) => {\n  const startButton = useRef()\n  const endButton = useRef()\n\n  return (\n    <div className=\"Skip\">\n      <SkipButton ref={startButton}>Skip {name}</SkipButton>\n      {children}\n      <SkipButton ref={endButton}>Skip before {name}</SkipButton>\n    </div>\n  )\n}\n```", "```\nimport { useRef, useState } from 'react'\nimport SkipButton from '../SkipButton'\nimport './Skip.css'\n\nconst Skip = ({ children, name }) => {\n  const startButton = useRef()\n  const endButton = useRef()\n\n  const skipAfter = () => {\n    if (endButton.current) {\n      endButton.current.focus()\n    }\n  }\n  const skipBefore = () => {\n    if (startButton.current) {\n      startButton.current.focus()\n    }\n  }\n\n  return (\n    <div className=\"Skip\">\n      <SkipButton ref={startButton} onClick={skipAfter}>\n        Skip {name}\n      </SkipButton>\n      {children}\n      <SkipButton ref={endButton} onClick={skipBefore}>\n        Skip before {name}\n      </SkipButton>\n    </div>\n  )\n}\n```", "```\nconst focusableSelector = 'a[href], ..., *[contenteditable]'\n\nfunction focusNextElement() {\n  var focusables = document.querySelectorAll(focusableSelector)\n  var current = document.querySelectorAll(':focus')\n  var nextIndex = 0\n  if (current.length === 1) {\n    var currentIndex = Array.prototype.indexOf.call(\n      focusables,\n      current[0]\n    )\n    if (currentIndex + 1 < focusables.length) {\n      nextIndex = currentIndex + 1\n    }\n  }\n\n  focusables[nextIndex].focus()\n}\n```", "```\nimport { useRef, useState } from 'react'\nimport {\n  focusNextElement,\n  focusPreviousElement,\n} from './focusNextElement'\nimport SkipButton from '../SkipButton'\nimport './Skip.css'\n\nconst Skip = ({ children, name }) => {\n  const startButton = useRef()\n  const endButton = useRef()\n\n  const skipAfter = () => {\n    if (endButton.current) {\n      endButton.current.focus()\n      focusNextElement()\n    }\n  }\n  const skipBefore = () => {\n    if (startButton.current) {\n      startButton.current.focus()\n      focusPreviousElement()\n    }\n  }\n\n  return (\n    <div className=\"Skip\">\n      <SkipButton ref={startButton} onClick={skipAfter}>\n        Skip {name}\n      </SkipButton>\n      {children}\n      <SkipButton ref={endButton} onClick={skipBefore}>\n        Skip before {name}\n      </SkipButton>\n    </div>\n  )\n}\n```", "```\nimport { useRef, useState } from 'react'\nimport {\n  focusNextElement,\n  focusPreviousElement,\n} from './focusNextElement'\nimport SkipButton from '../SkipButton'\nimport './Skip.css'\n\nconst Skip = ({ children, name }) => {\n  const startButton = useRef()\n  const endButton = useRef()\n  const [inside, setInside] = useState(false)\n\n  const skipAfter = () => {\n    if (endButton.current) {\n      endButton.current.focus()\n      focusNextElement()\n    }\n  }\n  const skipBefore = () => {\n    if (startButton.current) {\n      startButton.current.focus()\n      focusPreviousElement()\n    }\n  }\n\n  return (\n    <div\n      className=\"Skip\"\n      onFocus={(evt) => {\n        if (\n          evt.target !== startButton.current &&\n          evt.target !== endButton.current\n        ) {\n          setInside(true)\n        }\n      }}\n      onBlur={(evt) => {\n        if (\n          evt.target !== startButton.current &&\n          evt.target !== endButton.current\n        ) {\n          setInside(false)\n        }\n      }}\n    >\n      <SkipButton\n        ref={startButton}\n        tabIndex={inside ? -1 : 0}\n        onClick={skipAfter}\n      >\n        Skip {name}\n      </SkipButton>\n      {children}\n      <SkipButton\n        ref={endButton}\n        tabIndex={inside ? -1 : 0}\n        onClick={skipBefore}\n      >\n        Skip before {name}\n      </SkipButton>\n    </div>\n  )\n}\n```", "```\n$ npm install react-focus-lock\n```", "```\nimport './Modal.css'\n\nfunction Modal({ open, onCancel, children, role, title }) {\n  if (!open) {\n    return null\n  }\n\n  return (\n    <div role=\"presentation\" className=\"Modal\" ...>\n      <div className=\"Modal-dialog\" role={role} title={title} ...>\n        {children}\n      </div>\n    </div>\n  )\n}\n```", "```\nimport ReactFocusLock from 'react-focus-lock'\nimport './Modal.css'\n\nfunction Modal({ open, onCancel, children, role, title }) {\n  if (!open) {\n    return null\n  }\n\n  return (\n    <div role=\"presentation\" className=\"Modal\" ...>\n      <div className=\"Modal-dialog\" role={role} title={title} ...>\n        <ReactFocusLock>{children}</ReactFocusLock>\n      </div>\n    </div>\n  )\n}\n```", "```\nfunction talkToMe() {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    sessionStorage.getItem('talkToMe') === 'true'\n  ) {\n    ...\n  }\n}\n```", "```\nfunction talkToMe() {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    sessionStorage.getItem('talkToMe') === 'true'\n  ) {\n    document.addEventListener('focusin', (evt) => {\n      if (sessionStorage.getItem('talkToMe') === 'true') {\n        ....\n      }\n    })\n  }\n}\n```", "```\nfunction getDescription(element) {\n  const nodeName = element.nodeName.toUpperCase()\n  const role = element.role\n    ? element.role\n    : nodeName === 'BUTTON'\n    ? 'button'\n    : nodeName === 'INPUT' || nodeName === 'TEXTAREA'\n    ? 'text field ' + element.value\n    : nodeName === 'SELECT'\n    ? 'select field ' + element.value\n    : element.getAttribute('role') || 'group'\n  const title = element.title || element.textContent\n  const extraInstructions =\n    nodeName === 'INPUT' || nodeName === 'TEXTAREA'\n      ? 'You are currently in a text field. To enter text, type.'\n      : ''\n  return role + '. ' + title + '. ' + extraInstructions\n}\n```", "```\nfunction talkToMe() {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    sessionStorage.getItem('talkToMe') === 'true'\n  ) {\n    document.addEventListener('focusin', (evt) => {\n      if (sessionStorage.getItem('talkToMe') === 'true') {\n        const description = getDescription(evt.target)\n        ....\n      }\n    })\n  }\n}\n```", "```\nwindow.speechSynthesis.speak(\n  new SpeechSynthesisUtterance(description)\n)\n```", "```\nif (window.speechSynthesis.speaking) {\n  window.speechSynthesis.cancel()\n}\nwindow.speechSynthesis.speak(\n  new SpeechSynthesisUtterance(description)\n)\n```", "```\nfunction talkToMe() {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    sessionStorage.getItem('talkToMe') === 'true'\n  ) {\n    document.addEventListener('focusin', (evt) => {\n      if (sessionStorage.getItem('talkToMe') === 'true') {\n        const description = getDescription(evt.target)\n        if (window.speechSynthesis.speaking) {\n          window.speechSynthesis.cancel()\n        }\n        window.speechSynthesis.speak(\n          new SpeechSynthesisUtterance(description)\n        )\n      }\n    })\n  }\n}\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport talkToMe from './talkToMe'\n\ntalkToMe()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n```"]