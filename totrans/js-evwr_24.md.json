["```\nimport React from 'react';\nimport { FlatList, View, Text } from 'react-native';\nimport styled from 'styled-components/native';\n\n// our dummy data\nconst notes = [\n  { id: 0, content: 'Giant Steps' },\n  { id: 1, content: 'Tomorrow Is The Question' },\n  { id: 2, content: 'Tonight At Noon' },\n  { id: 3, content: 'Out To Lunch' },\n  { id: 4, content: 'Green Street' },\n  { id: 5, content: 'In A Silent Way' },\n  { id: 6, content: 'Lanquidity' },\n  { id: 7, content: 'Nuff Said' },\n  { id: 8, content: 'Nova' },\n  { id: 9, content: 'The Awakening' }\n];\n\nconst NoteFeed = () => {\n  // our component code will go here\n};\n\nexport default NoteFeed;\n```", "```\nconst NoteFeed = props => {\n  return (\n    <View>\n      <FlatList\n        data={notes}\n        keyExtractor={({ id }) => id.toString()}\n        renderItem={({ item }) => <Text>{item.content}</Text>}\n      />\n    </View>\n  );\n};\n```", "```\nimport React from 'react';\n\n// import NoteFeed\nimport NoteFeed from '../components/NoteFeed';\n\nconst Feed = props => {\n  return <NoteFeed />;\n};\n\nFeed.navigationOptions = {\n  title: 'Feed'\n};\n\nexport default Feed;\n```", "```\n// FeedView styled component definition\nconst FeedView = styled.View`\n height: 100;\n overflow: hidden;\n margin-bottom: 10px;\n`;\n\nconst NoteFeed = props => {\n  return (\n    <View>\n      <FlatList\n        data={notes}\n        keyExtractor={({ id }) => id.toString()}\n        renderItem={({ item }) => (\n          <FeedView>\n            <Text>{item.content}</Text>\n          </FeedView>\n        )}\n      />\n    </View>\n  );\n};\n```", "```\n// FeedView styled component definition\nconst FeedView = styled.View`\n height: 100;\n overflow: hidden;\n margin-bottom: 10px;\n`;\n\n// add a Separator styled component\nconst Separator = styled.View`\n height: 1;\n width: 100%;\n background-color: #ced0ce;\n`;\n\nconst NoteFeed = props => {\n  return (\n    <View>\n      <FlatList\n        data={notes}\n        keyExtractor={({ id }) => id.toString()}\n        ItemSeparatorComponent={() => <Separator />}\n        renderItem={({ item }) => (\n          <FeedView>\n            <Text>{item.content}</Text>\n          </FeedView>\n        )}\n      />\n    </View>\n  );\n};\n```", "```\nimport React from 'react';\nimport { Text, ScrollView } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst NoteView = styled.ScrollView`\n padding: 10px;\n`;\n\nconst Note = props => {\n  return (\n    <NoteView>\n      <Text>{props.note.content}</Text>\n    </NoteView>\n  );\n};\n\nexport default Note;\n```", "```\nimport React from 'react';\nimport { FlatList, View, Text } from 'react-native';\nimport styled from 'styled-components/native';\n\nimport Note from './Note';\n\n// our dummy data\nconst notes = [\n  { id: 0, content: 'Giant Steps' },\n  { id: 1, content: 'Tomorrow Is The Question' },\n  { id: 2, content: 'Tonight At Noon' },\n  { id: 3, content: 'Out To Lunch' },\n  { id: 4, content: 'Green Street' },\n  { id: 5, content: 'In A Silent Way' },\n  { id: 6, content: 'Lanquidity' },\n  { id: 7, content: 'Nuff Said' },\n  { id: 8, content: 'Nova' },\n  { id: 9, content: 'The Awakening' }\n];\n\n// FeedView styled-component definition\nconst FeedView = styled.View`\n height: 100;\n overflow: hidden;\n margin-bottom: 10px;\n`;\n\nconst Separator = styled.View`\n height: 1;\n width: 100%;\n background-color: #ced0ce;\n`;\n\nconst NoteFeed = props => {\n  return (\n    <View>\n      <FlatList\n        data={notes}\n        keyExtractor={({ id }) => id.toString()}\n        ItemSeparatorComponent={() => <Separator />}\n        renderItem={({ item }) => (\n          <FeedView>\n            <Note note={item} />\n          </FeedView>\n        )}\n      />\n    </View>\n  );\n};\n\nexport default NoteFeed;\n```", "```\nimport { FlatList, View, TouchableOpacity } from 'react-native';\n```", "```\nconst NoteFeed = props => {\n  return (\n    <View>\n      <FlatList\n        data={notes}\n        keyExtractor={({ id }) => id.toString()}\n        ItemSeparatorComponent={() => <Separator />}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            onPress={() =>\n              props.navigation.navigate('Note', {\n                id: item.id\n              })\n            }\n          >\n            <FeedView>\n              <Note note={item} />\n            </FeedView>\n          </TouchableOpacity>\n        )}\n      />\n    </View>\n  );\n};\n```", "```\nconst Feed = props => {\n  return <NoteFeed navigation={props.navigation} />;\n};\n```", "```\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nconst NoteScreen = props => {\n  const id = props.navigation.getParam('id');\n  return (\n    <View style={{ padding: 10 }}>\n      <Text>This is note {id}</Text>\n    </View>\n  );\n};\n\nexport default NoteScreen;\n```", "```\n$ cp config.example.js config.js\n```", "```\n// set environment variables\nconst ENV = {\n  dev: {\n    API_URI: `http://${localhost}:4000/api`\n  },\n  prod: {\n    // update the API_URI value with your publicly deployed API address\n    API_URI: 'https://your-api-uri/api'\n  }\n};\n```", "```\nimport React from 'react';\nimport Screens from './screens';\n// import the Apollo libraries\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n// import environment configuration\nimport getEnvVars from '../config';\nconst { API_URI } = getEnvVars();\n\n// configure our API URI & cache\nconst uri = API_URI;\nconst cache = new InMemoryCache();\n\n// configure Apollo Client\nconst client = new ApolloClient({\n  uri,\n  cache\n});\n\nconst Main = () => {\n  // wrap our app in the ApolloProvider higher-order component\n  return (\n    <ApolloProvider client={client}>\n      <Screens />\n    </ApolloProvider>\n  );\n};\n\nexport default Main;\n```", "```\n// import our React Native and Apollo dependencies\nimport { Text } from 'react-native';\nimport { useQuery, gql } from '@apollo/client';\n```", "```\nconst GET_NOTES = gql`\n query notes {\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n`;\n```", "```\nconst Feed = props => {\n  const { loading, error, data } = useQuery(GET_NOTES);\n\n  // if the data is loading, our app will display a loading indicator\n  if (loading) return <Text>Loading</Text>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <Text>Error loading notes</Text>;\n  // if the query is successful and there are notes, return the feed of notes\n  return <NoteFeed notes={data.notes} navigation={props.navigation} />;\n};\n```", "```\nimport React from 'react';\nimport { Text } from 'react-native';\n// import our Apollo libraries\nimport { useQuery, gql } from '@apollo/client';\n\nimport NoteFeed from '../components/NoteFeed';\nimport Loading from '../components/Loading';\n\n// compose our query\nconst GET_NOTES = gql`\n query notes {\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n`;\n\nconst Feed = props => {\n  const { loading, error, data } = useQuery(GET_NOTES);\n\n  // if the data is loading, our app will display a loading indicator\n  if (loading) return <Text>Loading</Text>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <Text>Error loading notes</Text>;\n  // if the query is successful and there are notes, return the feed of notes\n  return <NoteFeed notes={data.notes} navigation={props.navigation} />;\n};\n\nFeed.navigationOptions = {\n  title: 'Feed'\n};\n\nexport default Feed;\n```", "```\nconst NoteFeed = props => {\n  return (\n    <View>\n      <FlatList\n        data={props.notes}\n        keyExtractor={({ id }) => id.toString()}\n        ItemSeparatorComponent={() => <Separator />}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            onPress={() =>\n              props.navigation.navigate('Note', {\n                id: item.id\n              })\n            }\n          >\n            <FeedView>\n              <Note note={item} />\n            </FeedView>\n          </TouchableOpacity>\n        )}\n      />\n    </View>\n  );\n};\n```", "```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useQuery, gql } from '@apollo/client';\n\nimport Note from '../components/Note';\n\n// our note query, which accepts an ID variable\nconst GET_NOTE = gql`\n query note($id: ID!) {\n note(id: $id) {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n`;\n\nconst NoteScreen = props => {\n  const id = props.navigation.getParam('id');\n  const { loading, error, data } = useQuery(GET_NOTE, { variables: { id } });\n\n  if (loading) return <Text>Loading</Text>;\n  // if there's an error, display this message to the user\n  if (error) return <Text>Error! Note not found</Text>;\n  // if successful, pass the data to the note component\n  return <Note note={data.note} />;\n};\n\nexport default NoteScreen;\n```", "```\nimport React from 'react';\nimport { Text, ScrollView } from 'react-native';\nimport styled from 'styled-components/native';\nimport Markdown from 'react-native-markdown-renderer';\nimport { format } from 'date-fns';\n\nconst NoteView = styled.ScrollView`\n padding: 10px;\n`;\n\nconst Note = ({ note }) => {\n  return (\n    <NoteView>\n      <Text>\n        Note by {note.author.username} / Published{' '}\n        {format(new Date(note.createdAt), 'MMM do yyyy')}\n      </Text>\n      <Markdown>{note.content}</Markdown>\n    </NoteView>\n  );\n};\n\nexport default Note;\n```", "```\nimport React from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst LoadingWrap = styled.View`\n flex: 1;\n justify-content: center;\n align-items: center;\n`;\n\nconst Loading = () => {\n  return (\n    <LoadingWrap>\n      <ActivityIndicator size=\"large\" />\n    </LoadingWrap>\n  );\n};\n\nexport default Loading;\n```", "```\nimport Loading from '../components/Loading';\n```", "```\nif (loading) return <Loading />;\n```"]