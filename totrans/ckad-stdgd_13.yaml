- en: Chapter 13\. API Deprecations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kubernetes project periodically releases new versions. Every release adds
    new features and bug fixes but may also introduce deprecations to existing APIs.
    An API is the interface that application developers interact with when defining
    Kubernetes objects.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations may come into effect if the Kubernetes team plans to change, replace,
    or completely remove support for an API. You need to understand how to handle
    API deprecations to avoid issues before updating nodes to a newer Kubernetes version.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Deprecation Policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kubernetes project releases [three versions per calendar year](https://kubernetes.io/blog/2021/07/20/new-kubernetes-release-cadence/).
    Optimally, the administrator of a Kubernetes cluster upgrades to the latest version
    as early as possible to incorporate enhancements and security fixes. However,
    upgrading a cluster doesn’t come without potential cost and risk. You need to
    ensure that existing objects running in the cluster will still be compatible with
    the version you are upgrading to.
  prefs: []
  type: TYPE_NORMAL
- en: A Kubernetes release can deprecate an API, which means that it is scheduled
    for removal or replacement. The rules for introducing a deprecation follow the
    [deprecation policy](https://kubernetes.io/docs/reference/using-api/deprecation-policy/)
    explained in the Kubernetes documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The value you assign to the `version` attribute in a manifest specifies the
    API version. The use of a deprecated API renders a warning message when creating
    or updating the object. While you can still create or modify the object, a warning
    message informs the user about the action to take to ensure its future compatibility
    with newer Kubernetes versions. The [deprecated API migration guide](https://kubernetes.io/docs/reference/using-api/deprecation-guide/)
    shows a list of deprecated APIs and the scheduled versions that will remove support
    for the API.
  prefs: []
  type: TYPE_NORMAL
- en: Listing Available API Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Kubectl` provides a command for discovering available API versions. The `api-versions`
    command lists all API versions in the format group/version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Certain APIs, like the API for the group `autoscaling`, exist with different
    versions, `v1` and `v2`. Generally speaking, you can make your manifests more
    future-proof by choosing a higher major version. At the time of writing, the deprecation
    status of any of those APIs is not included in the output of the `api-versions`
    command. You will need to look up the status in the Kubernetes documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Deprecation Warnings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s demonstrate the effects of using a deprecated API. The following example
    assumes that you are running a Kubernetes cluster with a version between 1.23
    and 1.25\. [Example 13-1](#deprecated_hpa) shows a manifest for a Horizontal Pod
    Autoscaler that uses a beta API version for the group `autoscaling`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-1\. A Horizontal Pod Autoscaler definition using a deprecated API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a new object from the YAML manifest will not result in an error. Kubernetes
    will happily create the object, but the command will let you know what will happen
    with the API in a future Kubernetes version. As shown in the following output,
    it is suggested that you replace the use of the API with `autoscaling/v2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the warning message, you may also want to look at the deprecated
    API migration guide. An easy way to find information about the deprecated API
    is to search the deprecation guide for it. For example, you will find the [following
    passage](https://kubernetes.io/docs/reference/using-api/deprecation-guide/#horizontalpodautoscaler-v126)
    about the API `autoscaling/v2beta2`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `autoscaling/v2beta2` API version of HorizontalPodAutoscaler is no longer
    served as of v1.26.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Migrate manifests and API clients to use the `autoscaling/v2` API version, available
    since v1.23.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: All existing persisted objects are accessible via the new API
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deprecated API Migration Guide
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: All you need to do to future-proof your manifest is to assign the new API version.
  prefs: []
  type: TYPE_NORMAL
- en: Handling a Removed or Replaced API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The administrator of a Kubernetes cluster may decide to jump up multiple minor
    versions at once when upgrading. It is possible that you won’t catch that an API
    you are currently using has already been removed. It’s important to verify the
    compatibility of existing Kubernetes objects before upgrading the production cluster
    to avoid any disruptions.
  prefs: []
  type: TYPE_NORMAL
- en: Say you have been using the definition of a ClusterRole shown in [Example 13-2](#removed_clusterrole_api).
    Managing the object worked fine with Kubernetes 1.8; however, the administrator
    upgraded the cluster nodes all the way to 1.22.
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-2\. A ClusterRole using the API version `rbac.authorization.k8s.io/v1beta1`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Trying to create the object from the ClusterRole manifest file will not render
    a deprecation message. Instead, `kubectl` will return an error message. Consequently,
    the command did not create the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will not have a clear idea why the command failed just looking at the error
    message. It’s a good idea to check with the deprecated API migration guide. Searching
    the page for the API version `rbac.authorization.k8s.io/v1beta1` will give you
    the [following information](https://kubernetes.io/docs/reference/using-api/deprecation-guide/#rbac-resources-v122).
    The solution here is to assign the replacement API `rbac.authorization.k8s.io/v1`
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: The `rbac.authorization.k8s.io/v1beta1` API version of ClusterRole, ClusterRoleBinding,
    Role, and RoleBinding is no longer served as of v1.22.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Migrate manifests and API clients to use the `rbac.authorization.k8s.io/v1`
    API version, available since v1.8.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: All existing persisted objects are accessible via the new APIs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: No notable changes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deprecated API Migration Guide
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Under certain conditions, a Kubernetes primitive may not provide a replacement
    API. As a representative use case I want to mention the PodSecurityPolicy primitive
    here. The feature has been replaced by a new Kubernetes-internal concept, the
    [Pod Security Admission](https://kubernetes.io/docs/reference/using-api/deprecation-guide/#psp-v125).
    You should follow the release notes of upcoming Kubernetes releases to stay aware
    of more radical changes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inevitably, you will run into API deprecations when using Kubernetes long term.
    As a developer, you need to know how to interpret deprecation warning messages.
    The Kubernetes documentation provides all the information you need to identify
    an alternative API or feature. It’s advisable to test all available YAML manifests
    for objects currently in use in production clusters before upgrading nodes to
    a newer Kubernetes version.
  prefs: []
  type: TYPE_NORMAL
- en: Exam Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keep the API deprecation documentation handy
  prefs: []
  type: TYPE_NORMAL
- en: The exam will likely expose you to an object that uses a deprecated API. You
    will need to keep the [Deprecated API Migration Guide](https://kubernetes.io/docs/reference/using-api/deprecation-guide/)
    documentation page handy to tackle such scenarios. The page describes deprecated,
    removed, and replaced APIs categorized by Kubernetes version. Use the browser’s
    search capability to quickly find relevant information about an API. The quick
    reference links on the right side of the page let you quickly navigate to a specific
    Kubernetes version.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solutions to these exercises are available in [Appendix A](app01_split_009.xhtml#appendix_a_api_deprecations).
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes administrator in charge of the cluster is planning to upgrade
    all nodes from Kubernetes 1.8 to 1.28\. You defined multiple Kubernetes YAML manifests
    that operate an application stack. The administrator provided you with a Kubernetes
    1.28 test environment. Make sure that all YAML manifests are compatible with Kubernetes
    version 1.28.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory *app-a/ch13/deprecated* of the checked-out GitHub
    repository [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide).
    Inspect the files *deployment.yaml* and *configmap.yaml* in the current directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the objects from the YAML manifests. Modify the definitions as needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verify that the objects can be instantiated with Kubernetes 1.28.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
