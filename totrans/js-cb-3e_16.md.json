["```\ndocument.cookie = 'author=Adam';\nconsole.log(document.cookie);\n```", "```\nconst book = encodeURIComponent('JavaScript Cookbook');\ndocument.cookie = `title=${book}`;\nconsole.log(document.cookie);\n\n// logs title=JavaScript%20Cookbook\n```", "```\ndocument.cookie = 'user=Abigail;  max-age=86400; path=/';\n```", "```\nfunction eraseCookie(key) {\n  const cookie = `${key}=;expires=Thu, 01 Jan 1970 00:00:00 UTC`;\n  document.cookie = cookie;\n}\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <style>\n      div {\n        margin: 10px;\n      }\n\n      .data {\n        width: 200px;\n        background-color: yellow;\n        padding: 5px;\n      }\n    </style>\n    <title>Store, retrieve, and delete a cookie</title>\n  </head>\n  <body>\n    <h1>Store, retrieve, and delete a cookie</h1>\n\n    <form>\n      <div>\n        <label for=\"key\"> Enter key:</label>\n        <input type=\"text\" id=\"key\" />\n      </div>\n      <div>\n        <label for=\"value\">Enter value:</label>\n        <input type=\"text\" id=\"value\" />\n      </div>\n    </form>\n    <button id=\"set\">Set data</button>\n    <button id=\"get\">Get data</button>\n    <button id=\"erase\">Erase data</button>\n\n    <p>Cookie value:</p>\n    <div id=\"cookiestr\" class=\"data\"></div>\n\n    <script src=\"cookie.js\"></script>\n  </body>\n</html>\n```", "```\n// set the cookie\nfunction setData() {\n  const formKey = document.getElementById('key').value;\n  const formValue = document.getElementById('value').value;\n\n  const cookieVal = `${formKey}=${encodeURIComponent(formValue)}`;\n  document.cookie = cookieVal;\n}\n\n// retrieve the cookie value for a specified key\nfunction getData() {\n  const key = document.getElementById('key').value;\n  const cookie = document.getElementById('cookiestr');\n  cookie.innerHTML = '';\n\n  const keyValue = key.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n  const regex = new RegExp(`(?:^|;)\\\\s?${keyValue}=(.*?)(?:;|$)`, 'i');\n  const match = document.cookie.match(regex);\n  const value = (match && decodeURIComponent(match[1])) || '';\n  cookie.innerHTML = `<p>${value}</p>`;\n}\n\n// remove the cookie for a specified key\nfunction removeData() {\n  const key = document.getElementById('key').value;\n  document.getElementById('cookiestr').innerHTML = '';\n\n  const cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC`;\n  document.cookie = cookie;\n}\n\ndocument.getElementById('set').onclick = setData;\ndocument.getElementById('get').onclick = getData;\ndocument.getElementById('erase').onclick = removeData;\n```", "```\nsessionStorage.setItem('name', 'Franco');\nsessionStorage.city = 'Pittsburgh';\n\n// returns 2\nconsole.log(sessionStorage.length);\n\n// retrieve individual values\nconst name = sessionStorage.getItem('name');\nconst city = sessionStorage.getItem('city');\n\nconsole.log(`The stored name is ${name}`);\nconsole.log(`The stored city is ${city}`);\n\n// remove an individual item from storage\nsessionStorage.removeItem('name');\n\n// remove all items from storage\nsessionStorage.clear();\n\n// returns 0\nconsole.log(sessionStorage.length);\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <style>\n      div {\n        margin: 10px;\n      }\n\n      .data {\n        width: 100px;\n        background-color: yellow;\n        padding: 5px;\n      }\n    </style>\n    <title>Comparing Cookies, localStorage, and sessionStorage</title>\n  </head>\n  <body>\n    <h1>Comparing Cookies, localStorage, and sessionStorage</h1>\n\n    <form>\n      <div>\n        <label for=\"key\"> Enter key:</label>\n        <input type=\"text\" id=\"key\" />\n      </div>\n      <div>\n        <label for=\"value\">Enter value:</label>\n        <input type=\"text\" id=\"value\" />\n      </div>\n    </form>\n    <button id=\"set\">Set data</button>\n    <button id=\"get\">Get data</button>\n    <button id=\"erase\">Erase data</button>\n\n    <p>Session:</p>\n    <div id=\"sessionstr\" class=\"data\"></div>\n    <p>Local:</p>\n    <div id=\"localstr\" class=\"data\"></div>\n    <p>Cookie:</p>\n    <div id=\"cookiestr\" class=\"data\"></div>\n\n    <script src=\"cookie.js\"></script>\n    <script src=\"app.js\"></script>\n  </body>\n</html>\n```", "```\n// set session cookie\nfunction setCookie(cookie, value) {\n  const cookieVal = `${cookie}=${encodeURIComponent(value)};path=/`;\n  document.cookie = cookieVal;\n  console.log(cookieVal);\n}\n\n// each cookie separated by semicolon;\nfunction getCookie(key) {\n  const keyValue = key.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n  const { cookie } = document;\n  const regex = new RegExp(`(?:^|;)\\\\s?${keyValue}=(.*?)(?:;|$)`, 'i');\n  const match = cookie.match(regex);\n\n  return match && decodeURIComponent(match[1]);\n}\n\n// set cookie date to the past to erase\nfunction eraseCookie(key) {\n  const cookie = `${key}=;path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC`;\n  document.cookie = cookie;\n  console.log(cookie);\n}\n```", "```\n// set data for both session and cookie\nfunction setData() {\n  const key = document.getElementById('key').value;\n  const { value } = document.getElementById('value');\n\n  // set sessionStorage\n  sessionStorage.setItem(key, value);\n\n  // set localStorage\n  localStorage.setItem(key, value);\n\n  // set cookie\n  setCookie(key, value);\n}\n\nfunction getData() {\n  try {\n    const key = document.getElementById('key').value;\n    const session = document.getElementById('sessionstr');\n    const local = document.getElementById('localstr');\n    const cookie = document.getElementById('cookiestr');\n\n    // reset display\n    session.innerHTML = '';\n    local.innerHTML = '';\n    cookie.innerHTML = '';\n\n    // sessionStorage\n    let value = sessionStorage.getItem(key) || '';\n    if (value) session.innerHTML = `<p>${value}</p>`;\n\n    // localStorage\n    value = localStorage.getItem(key) || '';\n    if (value) local.innerHTML = `<p>${value}</p>`;\n\n    // cookie\n    value = getCookie(key) || '';\n    if (value) cookie.innerHTML = `<p>${value}</p>`;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction removeData() {\n  const key = document.getElementById('key').value;\n\n  // sessionStorage\n  sessionStorage.removeItem(key);\n\n  // localStorage\n  localStorage.removeItem(key);\n\n  // cookie\n  eraseCookie(key);\n\n  // reset display\n  getData();\n}\n\ndocument.getElementById('set').onclick = setData;\ndocument.getElementById('get').onclick = getData;\ndocument.getElementById('erase').onclick = removeData;\n```", "```\nStorage.prototype.someMethod = function (param) { ...};\n...\nlocalStorage.someMethod(param);\n...\nsessionStorage.someMethod(param);\n```", "```\nconst formValue = document.getElementById('formelem').value;\nif (formValue) {\n  localStorage.formelem = formValue;\n}\n\n// recover\nconst storedValue = localStorage.formelem;\nif (storedValue) {\n  document.getElementById('formelem').value = storedValue;\n}\n```", "```\n// use item methods\nsessionStorage.setItem('key', 'value');\nlocalStorage.setItem('key', 'value');\n\n// use property names directly\nsessionStorage.keyName = 'value';\nlocalStorage.keyName = 'value';\n\n// use the key method\nsessionStorage.key(0) = 'value';\nlocalStorage.key(0) = 'value';\n```", "```\n// use item methods\nvalue = sessionStorage.getItem('key');\nvalue = localStorage.getItem('key');\n\n// use property names directly\nvalue = sessionStorage.keyName;\nvalue = localStorage.keyName;\n\n// use the key method\nvalue = sessionStorage.key(0);\nvalue = localStorage.key(0);\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Creating a localStorage Client-Side Data Storage Item</title>\n  </head>\n  <body>\n    <h1>Creating a localStorage Client-Side Data Storage Item</h1>\n\n    <form id=\"inputform\">\n      <div>\n        <label for=\"field1\">Enter field1:</label>\n        <input type=\"text\" id=\"field1\" />\n      </div>\n      <div>\n        <label for=\"field2\">Enter field2:</label>\n        <input type=\"text\" id=\"field2\" />\n      </div>\n      <div>\n        <label for=\"field3\">Enter field1:</label>\n        <input type=\"text\" id=\"field3\" />\n      </div>\n      <div>\n        <label for=\"field4\">Enter field1:</label>\n        <input type=\"text\" id=\"field4\" />\n      </div>\n      <input type=\"submit\" value=\"Clear Storage\" />\n    </form>\n\n    <script src=\"localstorage.js\"></script>\n  </body>\n</html>\n```", "```\n// store the form input elements as a variable\nconst elems = document.querySelectorAll('input');\n\n// store field values\nfunction processField() {\n  localStorage.setItem(window.location.href, 'true');\n  localStorage.setItem(this.id, this.value);\n}\n\n// clear individual fields\nfunction clearStored() {\n  elems.forEach(elem => {\n    if (elem.type === 'text') {\n      localStorage.removeItem(elem.id);\n    }\n  });\n}\n\n// capture submit button to clear storage when clicked\ndocument.getElementById('inputform').onsubmit = clearStored;\n\n// on form element change, store the value in localStorage\nelems.forEach(elem => {\n  if (elem.type === 'text') {\n    const value = localStorage.getItem(elem.id);\n    if (value) elem.value = value;\n\n    // change event\n    elem.onchange = processField;\n  }\n});\n```", "```\ntry {\n  localStorage.setItem('key', 'value');\n} catch (domException) {\n  if (\n    ['QuotaExceededError', 'NS_ERROR_DOM_QUOTA_REACHED'].includes(\n      domException.name\n    )\n  ) {\n    // handle file size exceeded error\n  } else {\n    // handle any other error\n  }\n}\n```", "```\nconst data = [\n  { name: 'Joe Brown', age: 53, experience: 5 },\n  { name: 'Cindy Johnson', age: 44, experience: 5 },\n  { name: 'Some Reader', age: 30, experience: 3 }\n];\n\n// delete the 'Cookbook' database, so the example can be run more than once\nconst delReq = indexedDB.deleteDatabase('Cookbook');\ndelReq.onerror = event => {\n  console.log('delete error', event);\n};\n\n// open the 'Cookbook' database with a version of '1'\n// or create it if it does not exist\nconst request = indexedDB.open('Cookbook', 1);\n\n// upgradeneeded event is fired when a db is opened\n// with a version number higher than the currently stored version (in this case none)\nrequest.onupgradeneeded = event => {\n  const db = event.target.result;\n  const { transaction } = event.target;\n\n  // create a new object store named 'reader' in the database\n  const objectStore = db.createObjectStore('reader', {\n    keyPath: 'id',\n    autoIncrement: true\n  });\n\n  // create new keys in the object store\n  objectStore.createIndex('experience', 'experience', { unique: false });\n  objectStore.createIndex('name', 'name', { unique: true });\n\n  // when all data loaded, log to the console\n  transaction.oncomplete = () => {\n    console.log('data finished');\n  };\n\n  const readerObjectStore = transaction.objectStore('reader');\n\n  // add each value from the data object to the indexedDB database\n  data.forEach(value => {\n    const req = readerObjectStore.add(value);\n    // console log a message when successfully added\n    req.onsuccess = () => {\n      console.log('data added');\n    };\n  });\n\n  // if the request throws an error, log it to the console\n  request.onerror = () => {\n    console.log(event.target.errorCode);\n  };\n\n  // when the data store is successfully created, log to the console\n  request.onsuccess = () => {\n    console.log('datastore created');\n  };\n\n  // on page click, get a random value from the database and log it to the console\n  document.onclick = () => {\n    const randomNum = Math.floor(Math.random() * 3) + 1;\n    const dataRequest = db\n      .transaction(['reader'])\n      .objectStore('reader')\n      .get(randomNum);\n    dataRequest.onsuccess = () => {\n      console.log(`Name : ${dataRequest.result.name}`);\n    };\n  };\n};\n```", "```\ndata added\ndata finished\ndatastore created\nName : Cindy Johnson\n```", "```\nimport { openDB, deleteDB } from 'https://unpkg.com/idb?module';\n\nconst data = [\n  { name: 'Riley Harrison', age: 57, experience: 1 },\n  { name: 'Harlow Everly', age: 29, experience: 5 },\n  { name: 'Abigail McCullough', age: 38, experience: 10 }\n];\n\n(async () => {\n  // for demo purposes, delete existing db on page load\n  try {\n    await deleteDB('CookbookIDB');\n  } catch (err) {\n    console.log('delete error', err);\n  }\n\n  // open the database and create the data store\n  const database = await openDB('CookbookIDB', 1, {\n    upgrade(db) {\n      // Create a store of objects\n      const store = db.createObjectStore('reader', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n\n      // create new keys in the object store\n      store.createIndex('experience', 'experience', { unique: false });\n      store.createIndex('name', 'name', { unique: true });\n    }\n  });\n\n  // add all of the reader data to the store\n  data.forEach(async value => {\n    await database.add('reader', value);\n  });\n})();\n```", "```\nconst db = await openDB(name, version, {\n  // ...\n});\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>IDB Discussion Example</title>\n    <style>\n      div {\n        margin: 10px;\n      }\n\n      .data {\n        width: 200px;\n        background-color: yellow;\n        padding: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>IDB Discussion Example</h1>\n\n    <form>\n      <div>\n        <label for=\"name\"> Enter name:</label>\n        <input type=\"text\" id=\"name\" />\n      </div>\n      <div>\n        <label for=\"age\">Enter age:</label>\n        <input type=\"text\" id=\"age\" />\n      </div>\n    </form>\n    <button id=\"set\">Set data</button>\n    <button id=\"get\">Get data</button>\n\n    <p>Data:</p>\n    <div class=\"data\">\n      <ul id=\"data-list\"></ul>\n    </div>\n\n    <script type=\"module\" src=\"idb-discussion.js\"></script>\n  </body>\n</html>\n```", "```\nimport { openDB } from 'https://unpkg.com/idb?module';\n\n(async () => {\n  // open the database and create the data store\n  const database = await openDB('ReaderNames', 1, {\n    upgrade(db) {\n      // Create a store of objects\n      const store = db.createObjectStore('reader', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n\n      // create new keys in the object store\n      store.createIndex('age', 'age', { unique: false });\n      store.createIndex('name', 'name', { unique: true });\n    }\n  });\n\n  async function setData() {\n    const name = document.getElementById('name').value;\n    const age = document.getElementById('age').value;\n\n    await database.add('reader', {\n      name,\n      age\n    });\n  }\n\n  async function getData() {\n    // get the reader data from the database\n    const readers = await database.getAll('reader');\n\n    const dataDisplay = document.getElementById('data-list');\n\n    // add the name and age of each reader in the db to the page\n    readers.forEach(reader => {\n      const value = `${reader.name}: ${reader.age}`;\n      const li = document.createElement('li');\n      li.appendChild(document.createTextNode(value));\n      dataDisplay.appendChild(li);\n    });\n  }\n\n  document.getElementById('set').onclick = setData;\n  document.getElementById('get').onclick = getData;\n})();\n```"]