- en: Chapter 6\. Managing Application Manifests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we take a look at ways to simplify the management of applications
    on Kubernetes with the use of tools such as Helm, `kompose`, and kapp. These tools
    primarily focus on managing your YAML manifests. Helm is a YAML templating, packaging,
    and deployment tool, whereas Kompose is a tool that assists you with migrating
    your Docker Compose files to Kubernetes resource manifests. kapp is a relatively
    new tool that allows you to manage a group of YAML files as an application and
    thereby manage their deployment as a single application.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Installing Helm, the Kubernetes Package Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You do not want to write all your Kubernetes manifests by hand. Instead, you
    want to be able to search for a package in a repository and download and install
    it with a command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use [Helm](https://helm.sh). Helm consists of a client-side CLI called `helm`
    and is used to search for and deploy charts on a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download Helm from the GitHub [release page](https://oreil.ly/0A7Ty)
    and move the `helm` binary into your `$PATH`. For example, on macOS (Intel), for
    the v3.12.3 release, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the handy [installer script](https://oreil.ly/V6_bt)
    to install the latest version of Helm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helm is the Kubernetes package manager; it defines a Kubernetes package as a
    set of manifests and some metadata. The manifests are actually templates. The
    values in the templates are filled when the package is instantiated by Helm. A
    Helm package is called a *chart*, and packaged charts are made available to users
    in chart repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another method of installing Helm on Linux or macOS is to use the [Homebrew](https://brew.sh)
    package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 6.2 Adding Chart Repositories to Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the `helm` client (see [Recipe 6.1](#helm_install)), and now
    you want to find and add chart repositories to Helm.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A chart repository consists of packaged charts and some metadata that enables
    Helm to search for charts in the repository. Before you can begin installing an
    application with Helm, you need to find and add the chart repository that provides
    the chart.
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated in [Figure 6-1](#artifacthub), [Artifact Hub](https://artifacthub.io)
    is a web-based service that allows you to search [more than 10,000 charts](https://oreil.ly/0olJi)
    from various publishers and add chart repositories to Helm.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the Artifact Hub, searching for a Helm chart for Redis](assets/kcb2_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Artifact Hub, searching for a Helm chart for Redis
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `helm` command also integrates with Artifact Hub, which allows you to search
    Artifact Hub directly from the `helm` command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume you would like to search for a publisher that provides a Redis
    chart. You can use the `helm search hub` command to find one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to deploy the chart published by [Bitnami](https://oreil.ly/jL7Xz),
    a well-known publisher of more than 100 production-quality charts, add the chart
    repository using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You’re all set now to install charts from the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Using Helm to Install Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve added a chart repository to Helm (see [Recipe 6.2](#helm_add_repositories)),
    and now you want to search for charts and deploy them.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s assume you want to deploy the Redis chart from the [Bitnami chart repository](https://oreil.ly/TAPRO).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you search a chart repository, it’s a good practice to update the locally
    cached index of the chart repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Search for `redis` in the Bitnami chart repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And use `helm install` to deploy the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Helm will use the default chart configuration and create a Helm release named
    `redis`. A Helm release is the collection of all Kubernetes objects defined in
    a chart that you can manage as a single unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a while you should see the `redis` pods running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The output of the `helm install` command could contain important information
    about the deployment, such as passwords retrieved from secrets, deployed services,
    etc. You can use the `helm list` command to list existing helm installations,
    and then `helm status *<name>*` to view the details of that installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To learn more about Helm charts and how to create your own charts, see [Recipe
    6.8](#create_chart).
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Inspecting the Customizable Parameters of a Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know the customizable parameters of a chart and their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chart publishers expose various parameters of a chart that can be configured
    while installing the chart. The default values of these parameters are configured
    in a *Values* file whose contents can be viewed using the `helm show values` command—for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s a common practice for publishers to document chart parameters in the *Values*
    file. However, a chart’s *Readme* file can provide more extensive documentation
    of the various parameters, along with specific usage instructions. To view a chart’s
    *Readme* file, use the `helm show readme` command. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It’s worth noting that this *Readme* is the same as the one rendered for the
    chart on [Artifact Hub](https://oreil.ly/dIYpI).
  prefs: []
  type: TYPE_NORMAL
- en: 6.5 Overriding Chart Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve learned about the various customizable parameters of a chart (see [Recipe
    6.4](#chart_parameters)), and now you want to customize the chart deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default parameters of a Helm chart can be overridden by passing the `--set`
    `*key*``=``*value*` flag while installing the chart. The flag can be specified
    multiple times, or you can separate key/value pairs with commas like so: `key1=value1,key2=value2`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can override the deployment configuration of the `bitnami/redis`
    chart to use the `standalone` architecture as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When overriding many chart parameters, you can provide the `--values` flag
    to input a YAML-formatted file with all the parameters you want to override. For
    the previous example, create a file named *values.yaml* containing this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then input the file to `helm install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `standalone` configuration of the `bitnami/redis` chart spawns fewer pod
    resources and is suitable for development purposes. Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 6.6 Getting the User-Supplied Parameters of a Helm Release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Kubernetes cluster has a Helm release, and you want to know the user-supplied
    chart parameters that were specified when the chart was installed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `helm list` command gets the list of Helm release objects present in the
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get extended information about a Helm release, such as the user-supplied
    values, using the `helm get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the `values`, you can also retrieve the YAML manifests, post-deployment
    notes, and the hooks configured in the chart using the `helm get` command.
  prefs: []
  type: TYPE_NORMAL
- en: 6.7 Uninstalling Applications with Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You no longer want an application that was installed using Helm (see [Recipe
    6.3](#using_helm)) and want to remove it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you install an application using a chart, it creates a Helm release that
    can be managed as a single unit. To remove an application that was installed using
    Helm, all you need to do is remove the *release* using the `helm uninstall` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume you want to remove a Helm release named *redis*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Helm will remove all the Kubernetes objects associated with the release and
    free up the cluster resources associated with their objects.
  prefs: []
  type: TYPE_NORMAL
- en: 6.8 Creating Your Own Chart to Package Your Application with Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have written an application with multiple Kubernetes manifests and want
    to package it as a Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `helm create` and `helm package` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `helm create`, generate the skeleton of your chart. Issue the command
    in your terminal, specifying the name of your chart. For example, to create an
    `oreilly` chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `helm create` command generates a scaffolding for a typical web application.
    You can edit the generated scaffolding and adapt it for your application, or if
    you have your manifests already written, you can delete the contents of the *templates/*
    directory and copy your existing templates into it. If you want to templatize
    your manifests, then write the values that need to be substituted in the manifests
    in the *values.yaml* file. Edit the metadata file *Chart.yaml*, and if you have
    any dependent charts, put them in the */charts* directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test your chart locally by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can package it with `helm package oreilly/` to generate a re-distributable
    tarball of your chart. If you want to publish the chart to a chart repository,
    copy it to the repository and generate a new *index.yaml* using the command `helm
    repo index .`. After the updates to the chart registry are completed, and provided
    that you have added the chart repository to Helm (see [Recipe 6.2](#helm_add_repositories)),
    `helm search repo oreilly` should return your chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[“Create Your First Helm Chart”](https://oreil.ly/fGfgF) in the VMware Application
    Catalog docs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The Chart Best Practices Guide”](https://oreil.ly/kcznF) in the Helm docs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.9 Installing Kompose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve started using containers with Docker and written some Docker compose
    files to define your multicontainer application. Now you want to start using Kubernetes
    and wonder if and how you can reuse your Docker compose files.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use [Kompose](https://kompose.io). Kompose is a tool that converts Docker compose
    files into Kubernetes (or OpenShift) manifests.
  prefs: []
  type: TYPE_NORMAL
- en: To start, download `kompose` from the GitHub [release page](https://oreil.ly/lmiCJ)
    and move it to your `$PATH`, for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, on macOS, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, Linux and macOS users can install the `kompose` CLI using the
    [Homebrew](https://brew.sh) package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 6.10 Converting Your Docker Compose Files to Kubernetes Manifests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the `kompose` command (see [Recipe 6.9](#kompose_install)),
    and now you want to convert your Docker compose file into Kubernetes manifests.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose you have the following Docker compose file that starts a `redis` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Kompose, you can automatically convert this into Kubernetes manifests
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Kompose will read the contents of the Docker compose file and generate the Kubernetes
    manifests in the current directory. Then you can use `kubectl apply` to create
    these resources in your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding the `--stdout` argument to the `kompose convert` command will generate
    the YAML, which can be directly piped to `kubectl apply` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Some Docker compose directives are not converted to Kubernetes. In this case,
    `kompose` prints out a warning informing you that the conversion did not happen.
  prefs: []
  type: TYPE_NORMAL
- en: While in general it doesn’t cause problems, it is possible that the conversion
    may not result in a working manifest in Kubernetes. This is expected, as this
    type of transformation cannot be perfect. However, it will get you close to a
    working Kubernetes manifest. Most notably, handling volumes and network isolation
    will typically require manual, custom work from your side.
  prefs: []
  type: TYPE_NORMAL
- en: 6.11 Converting Your Docker Compose File to a Helm Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve installed the `kompose` command (see [Recipe 6.9](#kompose_install)),
    and now you want to create a Helm chart from your Docker compose file.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As well as using Kompose to convert your Docker compose files to Kubernetes
    manifests (see [Recipe 6.10](#using_kompose)), you can also use it to generate
    a Helm chart for the converted objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a Helm chart from your Docker compose file using Kompose like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A new Helm chart will be generated in the current directory. This chart can
    be packaged, deployed, and managed using the `helm` CLI (see [Recipe 6.3](#using_helm)).
  prefs: []
  type: TYPE_NORMAL
- en: 6.12 Installing kapp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have written the YAML files to deploy your application to the cluster and
    want to deploy and manage the lifecycle of the deployment, but you don’t want
    to package it as a Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use [kapp](https://carvel.dev/kapp), which is a CLI tool that enables you to
    manage resources in bulk. Unlike Helm, kapp considers YAML templating outside
    of its scope and focuses on managing application deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install kapp, use the [download script](https://oreil.ly/iAQPd) to download
    the latest version for your platform from the GitHub [release page](https://oreil.ly/9g2f3):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux and macOS users can also install kapp using the [Homebrew](https://brew.sh)
    package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 6.13 Deploying YAML Manifests Using kapp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have installed kapp (see [Recipe 6.12](#install_kapp)), and now you want
    to deploy and manage your YAML manifests using kapp.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'kapp considers a set of resources with the same label as an application. Suppose
    you have a folder named *manifests/* that contains the YAML file to deploy an
    NGINX server. kapp will treat all these manifests as a single application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy these manifests as an application with the label `nginx`, use the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: kapp will provide an overview of the resources that will be created on the cluster
    and ask for confirmation from the user. To update the application, all you need
    to do is update the YAML files in the *manifests/* folder and rerun the `deploy`
    command. You can add the `--diff-changes` option to view a diff of the updated
    YAML.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After deploying applications using kapp, you can manage their lifecycle as
    well. For example, to inspect the resources created for an app deployment, do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all the deployed applications, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And to delete an application deployed using kapp, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
