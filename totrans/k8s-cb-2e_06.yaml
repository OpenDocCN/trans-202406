- en: Chapter 6\. Managing Application Manifests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章 管理应用程序清单
- en: In this chapter, we take a look at ways to simplify the management of applications
    on Kubernetes with the use of tools such as Helm, `kompose`, and kapp. These tools
    primarily focus on managing your YAML manifests. Helm is a YAML templating, packaging,
    and deployment tool, whereas Kompose is a tool that assists you with migrating
    your Docker Compose files to Kubernetes resource manifests. kapp is a relatively
    new tool that allows you to manage a group of YAML files as an application and
    thereby manage their deployment as a single application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何通过使用工具如 Helm、`kompose` 和 kapp 简化 Kubernetes 上应用程序的管理。这些工具主要集中在管理你的
    YAML 清单文件。Helm 是一个 YAML 模板化、打包和部署工具，而 Kompose 是一个帮助你将 Docker Compose 文件迁移到 Kubernetes
    资源清单的工具。kapp 是一个相对较新的工具，允许你将一组 YAML 文件管理为一个应用程序，并以此方式管理它们的部署作为单个应用程序。
- en: 6.1 Installing Helm, the Kubernetes Package Manager
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 安装 Helm，Kubernetes 的包管理器
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You do not want to write all your Kubernetes manifests by hand. Instead, you
    want to be able to search for a package in a repository and download and install
    it with a command-line interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你不想手工编写所有的 Kubernetes 清单。相反，你希望能够在仓库中搜索一个包，并使用命令行界面下载并安装它。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use [Helm](https://helm.sh). Helm consists of a client-side CLI called `helm`
    and is used to search for and deploy charts on a Kubernetes cluster.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Helm](https://helm.sh)。Helm 包括一个名为 `helm` 的客户端 CLI，用于在 Kubernetes 集群上搜索和部署图表。
- en: 'You can download Helm from the GitHub [release page](https://oreil.ly/0A7Ty)
    and move the `helm` binary into your `$PATH`. For example, on macOS (Intel), for
    the v3.12.3 release, do this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 GitHub 的 [release 页面](https://oreil.ly/0A7Ty) 下载 Helm，并将 `helm` 二进制文件移到你的
    `$PATH` 中。例如，在 macOS（Intel）上，对于 v3.12.3 版本，执行以下操作：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can use the handy [installer script](https://oreil.ly/V6_bt)
    to install the latest version of Helm:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用便捷的 [安装脚本](https://oreil.ly/V6_bt) 安装最新版本的 Helm：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Helm is the Kubernetes package manager; it defines a Kubernetes package as a
    set of manifests and some metadata. The manifests are actually templates. The
    values in the templates are filled when the package is instantiated by Helm. A
    Helm package is called a *chart*, and packaged charts are made available to users
    in chart repositories.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是 Kubernetes 的包管理器；它将 Kubernetes 包定义为一组清单和一些元数据。这些清单实际上是模板。当 Helm 实例化包时，模板中的值被填充。Helm
    包被称为 *chart*，并且打包的图表在图表仓库中向用户提供。
- en: 'Another method of installing Helm on Linux or macOS is to use the [Homebrew](https://brew.sh)
    package manager:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 或 macOS 上安装 Helm 的另一种方法是使用 [Homebrew](https://brew.sh) 包管理器：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 6.2 Adding Chart Repositories to Helm
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 将图表仓库添加到 Helm
- en: Problem
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed the `helm` client (see [Recipe 6.1](#helm_install)), and now
    you want to find and add chart repositories to Helm.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经安装了 `helm` 客户端（参见 [Recipe 6.1](#helm_install)），现在你想要找到并添加图表仓库到 Helm。
- en: Solution
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: A chart repository consists of packaged charts and some metadata that enables
    Helm to search for charts in the repository. Before you can begin installing an
    application with Helm, you need to find and add the chart repository that provides
    the chart.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图表仓库包含打包的图表和一些元数据，这使得 Helm 能够在仓库中搜索图表。在你可以使用 Helm 安装应用程序之前，你需要找到并添加提供图表的图表仓库。
- en: As illustrated in [Figure 6-1](#artifacthub), [Artifact Hub](https://artifacthub.io)
    is a web-based service that allows you to search [more than 10,000 charts](https://oreil.ly/0olJi)
    from various publishers and add chart repositories to Helm.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 [Figure 6-1](#artifacthub) 所示，[Artifact Hub](https://artifacthub.io) 是一个基于
    Web 的服务，允许你从各种发布者那里搜索 [超过 10,000 个图表](https://oreil.ly/0olJi) 并将图表仓库添加到 Helm 中。
- en: '![Screenshot of the Artifact Hub, searching for a Helm chart for Redis](assets/kcb2_0601.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![工件中心搜索 Redis 的 Helm 图表的截图](assets/kcb2_0601.png)'
- en: Figure 6-1\. Artifact Hub, searching for a Helm chart for Redis
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1\. 工件中心，搜索 Redis 的 Helm 图表
- en: Discussion
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `helm` command also integrates with Artifact Hub, which allows you to search
    Artifact Hub directly from the `helm` command line.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm` 命令还与 Artifact Hub 集成，允许你直接从 `helm` 命令行搜索 Artifact Hub。'
- en: 'Let’s assume you would like to search for a publisher that provides a Redis
    chart. You can use the `helm search hub` command to find one:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要搜索提供 Redis 图表的发布者。你可以使用 `helm search hub` 命令来找到一个：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to deploy the chart published by [Bitnami](https://oreil.ly/jL7Xz),
    a well-known publisher of more than 100 production-quality charts, add the chart
    repository using the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想部署由[Bitnami](https://oreil.ly/jL7Xz)发布的图表（一个知名的发布者，拥有超过100个生产质量的图表），请使用以下命令添加图表仓库：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You’re all set now to install charts from the repository.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好从仓库安装图表。
- en: 6.3 Using Helm to Install Applications
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 使用Helm安装应用程序
- en: Problem
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve added a chart repository to Helm (see [Recipe 6.2](#helm_add_repositories)),
    and now you want to search for charts and deploy them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您已将图表仓库添加到Helm中（参见[Recipe 6.2](#helm_add_repositories)），现在您想要搜索图表并部署它们。
- en: Solution
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Let’s assume you want to deploy the Redis chart from the [Bitnami chart repository](https://oreil.ly/TAPRO).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要从[Bitnami chart repository](https://oreil.ly/TAPRO)部署Redis图表。
- en: 'Before you search a chart repository, it’s a good practice to update the locally
    cached index of the chart repositories:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索图表仓库之前，更新图表仓库的本地缓存索引是一个良好的实践：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Search for `redis` in the Bitnami chart repository:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bitnami图表库中搜索`redis`：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And use `helm install` to deploy the chart:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用`helm install`部署图表：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Helm will use the default chart configuration and create a Helm release named
    `redis`. A Helm release is the collection of all Kubernetes objects defined in
    a chart that you can manage as a single unit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Helm将使用默认的图表配置并创建一个名为`redis`的Helm发布。Helm发布是在图表中定义的所有Kubernetes对象的集合，您可以将其作为单个单元管理。
- en: 'After a while you should see the `redis` pods running:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 过一段时间后，您应该会看到`redis`的Pod正在运行：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The output of the `helm install` command could contain important information
    about the deployment, such as passwords retrieved from secrets, deployed services,
    etc. You can use the `helm list` command to list existing helm installations,
    and then `helm status *<name>*` to view the details of that installation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm install`命令的输出可能包含有关部署的重要信息，例如从秘密中检索的密码、已部署的服务等。您可以使用`helm list`命令列出现有的Helm安装，然后使用`helm
    status *<name>*`查看该安装的详细信息：'
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To learn more about Helm charts and how to create your own charts, see [Recipe
    6.8](#create_chart).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Helm图表以及如何创建自己的图表的更多信息，请参阅[Recipe 6.8](#create_chart)。
- en: 6.4 Inspecting the Customizable Parameters of a Chart
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 检查图表的可自定义参数
- en: Problem
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to know the customizable parameters of a chart and their default values.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您想了解图表的可自定义参数及其默认值。
- en: Solution
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Chart publishers expose various parameters of a chart that can be configured
    while installing the chart. The default values of these parameters are configured
    in a *Values* file whose contents can be viewed using the `helm show values` command—for
    example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图表发布者公开了图表的各种参数，可以在安装图表时进行配置。这些参数的默认值配置在一个*Values*文件中，其内容可以使用`helm show values`命令查看，例如：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'It’s a common practice for publishers to document chart parameters in the *Values*
    file. However, a chart’s *Readme* file can provide more extensive documentation
    of the various parameters, along with specific usage instructions. To view a chart’s
    *Readme* file, use the `helm show readme` command. For example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 出版者通常会在*Values*文件中记录图表参数的使用。然而，图表的*Readme*文件可以提供更详尽的文档，包括特定的使用说明。要查看图表的*Readme*文件，使用`helm
    show readme`命令。例如：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It’s worth noting that this *Readme* is the same as the one rendered for the
    chart on [Artifact Hub](https://oreil.ly/dIYpI).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这个*Readme*与在[Artifact Hub](https://oreil.ly/dIYpI)上呈现的图表相同。
- en: 6.5 Overriding Chart Parameters
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5 覆盖图表参数
- en: Problem
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve learned about the various customizable parameters of a chart (see [Recipe
    6.4](#chart_parameters)), and now you want to customize the chart deployment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解了图表的各种可自定义参数（参见[Recipe 6.4](#chart_parameters)），现在您想要自定义图表的部署。
- en: Solution
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The default parameters of a Helm chart can be overridden by passing the `--set`
    `*key*``=``*value*` flag while installing the chart. The flag can be specified
    multiple times, or you can separate key/value pairs with commas like so: `key1=value1,key2=value2`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装图表时，可以通过传递`--set` `*key*``=``*value*`标志来覆盖Helm图表的默认参数。可以多次指定该标志，或者用逗号分隔键/值对，例如：`key1=value1,key2=value2`。
- en: 'For example, you can override the deployment configuration of the `bitnami/redis`
    chart to use the `standalone` architecture as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以覆盖`bitnami/redis`图表的部署配置，以使用`standalone`架构，如下所示：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'When overriding many chart parameters, you can provide the `--values` flag
    to input a YAML-formatted file with all the parameters you want to override. For
    the previous example, create a file named *values.yaml* containing this line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要覆盖许多图表参数时，可以提供 `--values` 标志以输入包含所有要覆盖参数的 YAML 格式文件。对于前面的示例，创建一个名为 *values.yaml*
    的文件，其中包含以下内容：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then input the file to `helm install`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将文件输入到 `helm install` 中：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `standalone` configuration of the `bitnami/redis` chart spawns fewer pod
    resources and is suitable for development purposes. Let’s take a look:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitnami/redis` 图表的 `standalone` 配置生成较少的 pod 资源，适用于开发目的。让我们看一下：'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 6.6 Getting the User-Supplied Parameters of a Helm Release
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.6 获取 Helm 发布的用户提供的参数
- en: Problem
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Your Kubernetes cluster has a Helm release, and you want to know the user-supplied
    chart parameters that were specified when the chart was installed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Kubernetes 集群有一个 Helm 发布，您想知道安装图表时指定的用户提供的图表参数。
- en: Solution
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The `helm list` command gets the list of Helm release objects present in the
    cluster:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm list` 命令获取集群中存在的 Helm 发布对象列表：'
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can get extended information about a Helm release, such as the user-supplied
    values, using the `helm get` command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `helm get` 命令获取有关 Helm 发布的扩展信息，例如用户提供的值：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Discussion
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In addition to the `values`, you can also retrieve the YAML manifests, post-deployment
    notes, and the hooks configured in the chart using the `helm get` command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `values` 之外，您还可以使用 `helm get` 命令检索配置图表中的 YAML 清单、部署后笔记和钩子。
- en: 6.7 Uninstalling Applications with Helm
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.7 使用 Helm 卸载应用程序
- en: Problem
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You no longer want an application that was installed using Helm (see [Recipe
    6.3](#using_helm)) and want to remove it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您不再需要使用 Helm 安装的应用程序（参见 [Recipe 6.3](#using_helm)），希望将其移除。
- en: Solution
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: When you install an application using a chart, it creates a Helm release that
    can be managed as a single unit. To remove an application that was installed using
    Helm, all you need to do is remove the *release* using the `helm uninstall` command.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用图表安装应用程序时，它会创建一个 Helm 发布，可以作为单个单元管理。要移除使用 Helm 安装的应用程序，只需使用 `helm uninstall`
    命令移除 *release* 即可。
- en: 'Let’s assume you want to remove a Helm release named *redis*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您要删除一个名为 *redis* 的 Helm 发布：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Helm will remove all the Kubernetes objects associated with the release and
    free up the cluster resources associated with their objects.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 将删除与发布关联的所有 Kubernetes 对象，并释放与它们对象关联的集群资源。
- en: 6.8 Creating Your Own Chart to Package Your Application with Helm
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.8 使用 Helm 创建自己的图表以打包您的应用程序
- en: Problem
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have written an application with multiple Kubernetes manifests and want
    to package it as a Helm chart.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经编写了一个包含多个 Kubernetes 清单的应用程序，并希望将其打包为 Helm 图表。
- en: Solution
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `helm create` and `helm package` commands.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `helm create` 和 `helm package` 命令。
- en: 'With `helm create`, generate the skeleton of your chart. Issue the command
    in your terminal, specifying the name of your chart. For example, to create an
    `oreilly` chart:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `helm create` 命令生成您的图表的框架。在终端中输入该命令，并指定您的图表名称。例如，要创建一个 `oreilly` 图表：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Discussion
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `helm create` command generates a scaffolding for a typical web application.
    You can edit the generated scaffolding and adapt it for your application, or if
    you have your manifests already written, you can delete the contents of the *templates/*
    directory and copy your existing templates into it. If you want to templatize
    your manifests, then write the values that need to be substituted in the manifests
    in the *values.yaml* file. Edit the metadata file *Chart.yaml*, and if you have
    any dependent charts, put them in the */charts* directory.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm create` 命令为典型的 Web 应用程序生成脚手架。您可以编辑生成的脚手架并适应您的应用程序，或者如果您已经编写了自己的清单，则可以删除
    *templates/* 目录中的内容，并将您现有的模板复制到其中。如果您希望对清单进行模板化，请在 *values.yaml* 文件中编写需要替换的值。编辑元数据文件
    *Chart.yaml*，如果有任何依赖图表，请将它们放在 */charts* 目录中。'
- en: 'You can test your chart locally by running this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令在本地测试您的图表：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, you can package it with `helm package oreilly/` to generate a re-distributable
    tarball of your chart. If you want to publish the chart to a chart repository,
    copy it to the repository and generate a new *index.yaml* using the command `helm
    repo index .`. After the updates to the chart registry are completed, and provided
    that you have added the chart repository to Helm (see [Recipe 6.2](#helm_add_repositories)),
    `helm search repo oreilly` should return your chart:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用 `helm package oreilly/` 将其打包，生成一个可重新分发的图表压缩包。如果要将图表发布到图表存储库，请将其复制到存储库并使用命令
    `helm repo index .` 生成一个新的 *index.yaml*。更新图表注册表完成后，假设您已将图表存储库添加到 Helm（参见 [Recipe
    6.2](#helm_add_repositories)），`helm search repo oreilly` 应该返回您的图表：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See Also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Create Your First Helm Chart”](https://oreil.ly/fGfgF) in the VMware Application
    Catalog docs'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“创建您的第一个 Helm Chart”](https://oreil.ly/fGfgF) 在 VMware 应用程序目录文档中'
- en: '[“The Chart Best Practices Guide”](https://oreil.ly/kcznF) in the Helm docs'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“图表最佳实践指南”](https://oreil.ly/kcznF) 在 Helm 文档中'
- en: 6.9 Installing Kompose
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.9 安装 Kompose
- en: Problem
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve started using containers with Docker and written some Docker compose
    files to define your multicontainer application. Now you want to start using Kubernetes
    and wonder if and how you can reuse your Docker compose files.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经开始使用 Docker 容器并编写了一些 Docker compose 文件来定义您的多容器应用程序。现在您想开始使用 Kubernetes，并想知道是否以及如何重用您的
    Docker compose 文件。
- en: Solution
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use [Kompose](https://kompose.io). Kompose is a tool that converts Docker compose
    files into Kubernetes (or OpenShift) manifests.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Kompose](https://kompose.io)。Kompose 是一个将 Docker compose 文件转换为 Kubernetes（或
    OpenShift）清单的工具。
- en: To start, download `kompose` from the GitHub [release page](https://oreil.ly/lmiCJ)
    and move it to your `$PATH`, for convenience.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 GitHub [发布页面](https://oreil.ly/lmiCJ) 下载 `kompose` 并将其移动到您的 `$PATH`，以便使用时更加方便。
- en: 'For example, on macOS, do the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 macOS 上，执行以下操作：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, Linux and macOS users can install the `kompose` CLI using the
    [Homebrew](https://brew.sh) package manager:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，Linux 和 macOS 用户可以使用 [Homebrew](https://brew.sh) 软件包管理器安装 `kompose` 命令行工具：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 6.10 Converting Your Docker Compose Files to Kubernetes Manifests
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.10 将 Docker Compose 文件转换为 Kubernetes Manifests
- en: Problem
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed the `kompose` command (see [Recipe 6.9](#kompose_install)),
    and now you want to convert your Docker compose file into Kubernetes manifests.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经安装了 `kompose` 命令（参见 [Recipe 6.9](#kompose_install)），现在您想将 Docker compose
    文件转换为 Kubernetes manifests。
- en: Solution
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Suppose you have the following Docker compose file that starts a `redis` container:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有以下启动 `redis` 容器的 Docker compose 文件：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Using Kompose, you can automatically convert this into Kubernetes manifests
    with the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kompose，您可以使用以下命令自动将其转换为 Kubernetes manifests：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Kompose will read the contents of the Docker compose file and generate the Kubernetes
    manifests in the current directory. Then you can use `kubectl apply` to create
    these resources in your cluster.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kompose 将读取 Docker compose 文件的内容并在当前目录生成 Kubernetes manifests。然后您可以使用 `kubectl
    apply` 在集群中创建这些资源。
- en: Discussion
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Adding the `--stdout` argument to the `kompose convert` command will generate
    the YAML, which can be directly piped to `kubectl apply` like so:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `--stdout` 参数添加到 `kompose convert` 命令中将生成 YAML，可以直接传输到 `kubectl apply`，如下所示：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Some Docker compose directives are not converted to Kubernetes. In this case,
    `kompose` prints out a warning informing you that the conversion did not happen.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Docker compose 指令未转换为 Kubernetes。在这种情况下，`kompose` 会打印警告，告知您转换未成功。
- en: While in general it doesn’t cause problems, it is possible that the conversion
    may not result in a working manifest in Kubernetes. This is expected, as this
    type of transformation cannot be perfect. However, it will get you close to a
    working Kubernetes manifest. Most notably, handling volumes and network isolation
    will typically require manual, custom work from your side.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常不会引起问题，但转换可能导致 Kubernetes 中的工作清单不起作用。这是预期的，因为这种转换类型无法完美。但是，它将使您接近一个可工作的
    Kubernetes manifest。特别是，处理卷和网络隔离通常需要您手动进行自定义工作。
- en: 6.11 Converting Your Docker Compose File to a Helm Chart
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.11 将 Docker Compose 文件转换为 Helm Chart
- en: Problem
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve installed the `kompose` command (see [Recipe 6.9](#kompose_install)),
    and now you want to create a Helm chart from your Docker compose file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经安装了 `kompose` 命令（参见 [Recipe 6.9](#kompose_install)），现在您想从 Docker compose
    文件创建一个 Helm chart。
- en: Solution
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: As well as using Kompose to convert your Docker compose files to Kubernetes
    manifests (see [Recipe 6.10](#using_kompose)), you can also use it to generate
    a Helm chart for the converted objects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 Kompose 将 Docker compose 文件转换为 Kubernetes 清单（参见 [Recipe 6.10](#using_kompose)）外，您还可以使用它为转换后的对象生成
    Helm 图表。
- en: 'Generate a Helm chart from your Docker compose file using Kompose like so:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kompose 从您的 Docker compose 文件生成 Helm 图表，如下所示：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A new Helm chart will be generated in the current directory. This chart can
    be packaged, deployed, and managed using the `helm` CLI (see [Recipe 6.3](#using_helm)).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将在当前目录中生成一个新的 Helm 图表。可以使用 `helm` CLI 打包、部署和管理此图表（参见 [Recipe 6.3](#using_helm)）。
- en: 6.12 Installing kapp
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.12 安装 kapp
- en: Problem
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have written the YAML files to deploy your application to the cluster and
    want to deploy and manage the lifecycle of the deployment, but you don’t want
    to package it as a Helm chart.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您已编写了部署应用程序到集群的 YAML 文件，并希望部署和管理部署的生命周期，但不想将其打包为 Helm 图表。
- en: Solution
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use [kapp](https://carvel.dev/kapp), which is a CLI tool that enables you to
    manage resources in bulk. Unlike Helm, kapp considers YAML templating outside
    of its scope and focuses on managing application deployments.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [kapp](https://carvel.dev/kapp)，这是一个 CLI 工具，可以批量管理资源。与 Helm 不同，kapp 将 YAML
    模板化视为其范围之外，并专注于管理应用程序部署。
- en: 'To install kapp, use the [download script](https://oreil.ly/iAQPd) to download
    the latest version for your platform from the GitHub [release page](https://oreil.ly/9g2f3):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 kapp，请使用 [下载脚本](https://oreil.ly/iAQPd) 从 GitHub [发布页面](https://oreil.ly/9g2f3)
    下载适合您平台的最新版本：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Discussion
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Linux and macOS users can also install kapp using the [Homebrew](https://brew.sh)
    package manager:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 和 macOS 用户还可以使用 [Homebrew](https://brew.sh) 软件包管理器安装 kapp：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 6.13 Deploying YAML Manifests Using kapp
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.13 使用 kapp 部署 YAML 清单
- en: Problem
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have installed kapp (see [Recipe 6.12](#install_kapp)), and now you want
    to deploy and manage your YAML manifests using kapp.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您已安装了 kapp（参见 [Recipe 6.12](#install_kapp)），现在您希望使用 kapp 部署和管理您的 YAML 清单。
- en: Solution
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'kapp considers a set of resources with the same label as an application. Suppose
    you have a folder named *manifests/* that contains the YAML file to deploy an
    NGINX server. kapp will treat all these manifests as a single application:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: kapp 将一组具有相同标签的资源视为一个应用程序。假设您有一个名为 *manifests/* 的文件夹，其中包含部署 NGINX 服务器的 YAML
    文件。kapp 将所有这些清单视为单个应用程序：
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To deploy these manifests as an application with the label `nginx`, use the
    following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些清单部署为带有标签 `nginx` 的应用程序，请使用以下命令：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: kapp will provide an overview of the resources that will be created on the cluster
    and ask for confirmation from the user. To update the application, all you need
    to do is update the YAML files in the *manifests/* folder and rerun the `deploy`
    command. You can add the `--diff-changes` option to view a diff of the updated
    YAML.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: kapp 将提供将在集群上创建的资源的概述，并要求用户确认。要更新应用程序，您只需更新 *manifests/* 文件夹中的 YAML 文件，并重新运行
    `deploy` 命令。您可以添加 `--diff-changes` 选项以查看更新后 YAML 的差异。
- en: Discussion
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'After deploying applications using kapp, you can manage their lifecycle as
    well. For example, to inspect the resources created for an app deployment, do
    this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 kapp 部署应用程序后，您还可以管理其生命周期。例如，要检查为应用程序部署创建的资源，请执行以下操作：
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To list all the deployed applications, do this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有已部署的应用程序，请执行以下操作：
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And to delete an application deployed using kapp, do this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 kapp 删除已部署的应用程序，请执行以下操作：
- en: '[PRE34]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
