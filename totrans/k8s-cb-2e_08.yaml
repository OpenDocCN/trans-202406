- en: Chapter 8\. Volumes and Configuration Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 卷和配置数据
- en: A *volume* in Kubernetes is a directory accessible to all containers running
    in a pod, with the additional guarantee that the data is preserved across restarts
    of individual containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，*volume* 是一个对所有在 pod 中运行的容器可访问的目录，还保证数据跨单个容器重启时保持不变。
- en: 'We can distinguish between a few types of volumes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以区分几种类型的卷：
- en: '*Node-local* ephemeral volumes, such as `emptyDir`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*节点本地* 临时卷，例如 `emptyDir`'
- en: Generic *networked* volumes, such as `nfs` or `cephfs`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用*网络*卷，例如 `nfs` 或 `cephfs`
- en: '*Cloud provider–specific* volumes, such as `AWS EBS` or `AWS EFS`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*云服务提供商特定* 卷，例如 `AWS EBS` 或 `AWS EFS`'
- en: '*Special-purpose* volumes, such as `secret` or `configMap`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*特殊用途*卷，例如 `secret` 或 `configMap`'
- en: Which volume type you choose depends entirely on your use case. For example,
    for a temporary scratch space, an `emptyDir` would be fine, but when you need
    to make sure your data survives node failures, you’ll want to look into more resilient
    alternatives or cloud provider–specific solutions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择哪种卷类型完全取决于你的用例。例如，对于临时的临时空间，`emptyDir` 可能足够了，但是当你需要确保数据在节点故障时能够存活时，你需要考虑更具弹性的替代方案或特定于云提供商的解决方案。
- en: 8.1 Exchanging Data Between Containers via a Local Volume
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1 通过本地卷在容器之间交换数据
- en: Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have two or more containers running in a pod and want to be able to exchange
    data via filesystem operations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两个或更多的容器在一个 pod 中运行，并希望能够通过文件系统操作交换数据。
- en: Solution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a local volume of type `emptyDir`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型为 `emptyDir` 的本地卷。
- en: 'The starting point is the following pod manifest, *exchangedata.yaml*, which
    has two containers (`c1` and `c2`) that each mount the local volume `xchange`
    into their filesystem, using different mount points:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 起始点是以下 pod 清单 *exchangedata.yaml*，其中有两个容器（`c1` 和 `c2`），它们每个都将本地卷 `xchange` 挂载到它们的文件系统中，使用不同的挂载点：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now you can launch the pod, `exec` into it, create data from one container,
    and read it out from the other one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以启动 pod，`exec` 进入它，从一个容器中创建数据，然后从另一个容器中读取它：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: A local volume is backed by the node on which the pod and its containers are
    running. If the node goes down or you have to carry out maintenance on it (see
    [Recipe 12.9](ch12.html#drain_nodes)), then the local volume is gone and all the
    data is lost.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本地卷由运行 pod 及其容器的节点支持。如果节点宕机或需要对其进行维护（参见 [Recipe 12.9](ch12.html#drain_nodes)），那么本地卷就会丢失，并且所有数据也会丢失。
- en: There are some use cases where local volumes are fine—​for example, for some
    scratch space or when the canonical state is obtained from somewhere else, such
    as an S3 bucket—​but in general you’ll want to use a persistent volume or one
    backed by networked storage (see [Recipe 8.4](#pv_minikube)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有些用例中，本地卷是可以的——例如一些临时空间或者从其他地方（例如 S3 存储桶）获取规范状态时——但一般来说，你应该使用持久卷或由网络存储支持的卷（参见
    [Recipe 8.4](#pv_minikube)）。
- en: See Also
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes documentation on [volumes](https://oreil.ly/82P1u)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 关于 [volumes](https://oreil.ly/82P1u) 的文档
- en: 8.2 Passing an API Access Key to a Pod Using a Secret
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.2 使用秘密向 pod 传递 API 访问密钥
- en: Problem
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: As an admin, you want to provide your developers with an API access key in a
    secure way; that is, without sharing it in clear text in your Kubernetes manifests.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，你希望以安全的方式向你的开发者提供 API 访问密钥，即在 Kubernetes 清单中不明文共享它。
- en: Solution
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a local volume of type [`secret`](https://oreil.ly/bX6ER).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型为 [`secret`](https://oreil.ly/bX6ER) 的本地卷。
- en: Let’s say you want to give your developers access to an external service that
    is accessible via the passphrase `open sesame`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要让你的开发者能够访问一个通过口令 `open sesame` 访问的外部服务。
- en: 'First, create a text file called *passphrase* that holds the passphrase:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 *passphrase* 的文本文件，其中包含口令：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, create the [secret](https://oreil.ly/cCddB), using the *passphrase* file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 *passphrase* 文件创建 [secret](https://oreil.ly/cCddB)：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From an admin point of view, you’re all set now, and it’s time for your developers
    to consume the secret. So let’s switch hats and assume you’re a developer and
    want to use the passphrase from within a pod.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从管理员角度来看，你现在已经准备就绪，是开发者消费秘密的时候了。所以让我们换个角色，假设你是一个开发者，想要在 pod 内部使用口令。
- en: 'You would consume the secret, for example, by mounting it as a volume into
    your pod and then reading it out as a normal file. Create and save the following
    manifest, called *ppconsumer.yaml*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以将其作为一个卷挂载到你的 pod 中，然后像普通文件一样读取它。创建并保存以下名为 *ppconsumer.yaml* 的清单：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now launch the pod and take a look at its logs, where you would expect to see
    the `ppconsumer` secret file mounted as */tmp/access/passphrase*:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动Pod并查看其日志，您期望看到`ppconsumer`密钥文件挂载为*/tmp/access/passphrase*：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To access the passphrase from within the running container, simply read out
    the *passphrase* file in */tmp/access*, like so:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要从运行中的容器中访问密码，只需读取*/tmp/access*中的*passphrase*文件，如下所示：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Secrets exist in the context of a namespace, so you need to take that into account
    when setting them up and/or consuming them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密存在于命名空间的上下文中，因此在设置它们和/或使用它们时需要考虑到这一点。
- en: 'You can access a secret from a container running in a pod via one of the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下方法之一访问运行在Pod中的容器的秘密：
- en: A volume (as shown in the Solution, where the content is stored in a `tmpfs`
    volume)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个卷（如解决方案中所示，内容存储在`tmpfs`卷中）
- en: '[Using the secret as an environment variable](https://oreil.ly/Edsr5)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将秘密作为环境变量使用](https://oreil.ly/Edsr5)'
- en: Also, note that the size of a secret is limited to 1 MiB.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意秘密的大小限制为1 MiB。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`kubectl create secret` deals with three types of secrets, and depending on
    your use case, you might want to choose different ones:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl create secret`处理三种类型的秘密，根据您的用例，您可能需要选择不同的秘密类型：'
- en: The `docker-registry` type is for use with a Docker registry.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-registry`类型用于与Docker注册表一起使用。'
- en: The `generic` type is what we used in the Solution; it creates a secret from
    a local file, directory, or literal value (you need to base64-encode it yourself).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic`类型是我们在解决方案中使用的；它从本地文件、目录或文字值创建秘密（您需要自行进行base64编码）。'
- en: With `tls` you can create, for example, a secure SSL certificate for ingress.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`tls`，例如，您可以创建一个安全的SSL证书用于入口。
- en: '`kubectl describe` doesn’t show the content of the secret in plain text. This
    avoids “over-the-shoulder” password grabs. You can, however, easily decode it
    manually since it’s not encrypted, only base64-encoded:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl describe`不会以纯文本显示秘密内容。这避免了“偷看”密码。但是，由于它只是base64编码而不是加密，您可以轻松地手动解码它：'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this command, the first line retrieves a YAML representation of the secret,
    and the second line with the `grep` pulls out the line `passphrase: b3BlbiBzZXNhbWU=`
    (note the leading whitespace here). Then, the `cut` extracts the content of the
    passphrase, and the `awk` command gets rid of the leading whitespace. Finally,
    the `base64` command turns it into the original data again.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '在此命令中，第一行检索秘密的YAML表示，第二行使用`grep`提取`passphrase: b3BlbiBzZXNhbWU=`行（请注意这里的前导空格）。然后，`cut`提取出密码的内容，`awk`命令去掉前导空格。最后，`base64`命令将其转换回原始数据。'
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: You have the option to encrypt secrets at rest by using the `--encryption-provider-config`
    option when launching the `kube-apiserver`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`--encryption-provider-config`选项在启动`kube-apiserver`时选择加密秘密。
- en: See Also
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Kubernetes documentation on [secrets](https://oreil.ly/cCddB)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes关于[秘密](https://oreil.ly/cCddB)的文档
- en: Kubernetes documentation on [encrypting confidential data at rest](https://oreil.ly/kAmrN)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes关于[加密静态数据](https://oreil.ly/kAmrN)的文档
- en: 8.3 Providing Configuration Data to an Application
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.3 提供配置数据给应用程序
- en: Problem
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to provide configuration data to an application without storing it
    in the container image or hardcoding it into the pod specification.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望为应用程序提供配置数据，而不将其存储在容器映像中或硬编码到Pod规范中。
- en: Solution
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a config map. These are first-class Kubernetes resources with which you
    can provide configuration data to a pod via environment variables or a file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置映射。这些是Kubernetes的一流资源，您可以通过环境变量或文件向Pod提供配置数据。
- en: 'Let’s say you want to create a configuration with the key `siseversion` and
    the value `0.9`. It’s as simple as this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想创建一个带有键`siseversion`和值`0.9`的配置。只需这样简单：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now you can use the config map in a deployment—​say, in a manifest file with
    the following contents:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在部署中使用配置映射，比如说，在一个具有以下内容的清单文件中：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save this YAML manifest as *nginxpod.yaml* and then use `kubectl` to create
    the pod:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将此YAML清单保存为*nginxpod.yaml*，然后使用`kubectl`创建Pod：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can then list the pod’s container environment variables with the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令列出Pod的容器环境变量：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: We’ve just shown how to pass in the configuration as an environment variable.
    However, you can also mount it into the pod as a file, using a volume.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚展示了如何将配置作为环境变量传递。但是，您也可以将其作为文件挂载到Pod中，使用一个卷。
- en: 'Suppose you have the following config file, *example.cfg*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有以下配置文件 *example.cfg*：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can create a config map that holds the config file, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个包含配置文件的配置映射，如下所示：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now you can use the config map just as you would any other volume. The following
    is the manifest file for a pod named `oreilly`; it uses the `busybox` image and
    just sleeps for 3,600 seconds. In the `volumes` section, there is a volume named
    `oreilly` that uses the config map `configfile` we just created. This volume is
    then mounted at the path `/oreilly` inside the container. Hence, the file will
    be accessible within the pod:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以像使用任何其他卷一样使用配置映射。以下是名为 `oreilly` 的 Pod 的清单文件；它使用 `busybox` 镜像并休眠 3,600
    秒。在 `volumes` 部分，有一个名为 `oreilly` 的卷，它使用我们刚刚创建的配置映射 `configfile`。然后，在容器内部的路径 `/oreilly`
    处挂载此卷。因此，文件将在 Pod 内可访问：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After creating the pod, you can verify that the *example.cfg* file is indeed
    inside it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完 Pod 后，您可以验证 *example.cfg* 文件确实存在其中：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For a complete example of how to create a config map from a file, see [Recipe
    11.7](ch11.html#prom_minikube).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何从文件创建配置映射的完整示例，请参见 [Recipe 11.7](ch11.html#prom_minikube)。
- en: See Also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Configure a Pod to Use a ConfigMap”](https://oreil.ly/R1FgU) in the Kubernetes
    documentation'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“配置 Pod 使用 ConfigMap”](https://oreil.ly/R1FgU) 在 Kubernetes 文档中'
- en: 8.4 Using a Persistent Volume with Minikube
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.4 在 Minikube 中使用持久卷
- en: Problem
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You don’t want to lose data on a disk your container uses—​that is, you want
    to make sure it survives a restart of the hosting pod.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您不希望在容器使用的磁盘上丢失数据，即希望确保它在托管 Pod 重新启动后能够存活。
- en: Solution
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a persistent volume (PV). In the case of Minikube, you can create a PV of
    type `hostPath` and mount it just like a normal volume into the container’s filesystem.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用持久卷（PV）。在 Minikube 的情况下，您可以创建一个 `hostPath` 类型的 PV，并像普通卷一样将其挂载到容器的文件系统中。
- en: 'First, define the PV `hostpathpv` in a manifest called *hostpath-pv.yaml*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在名为 *hostpath-pv.yaml* 的清单中定义 PV `hostpathpv`：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Before you can create the PV, however, you need to prepare the directory */tmp/pvdata*
    on the node—​that is, the Minikube instance itself. You can get into the node
    where the Kubernetes cluster is running using `minikube ssh`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但在创建 PV 之前，您需要准备节点上的目录 */tmp/pvdata*，即 Minikube 实例本身。您可以使用 `minikube ssh` 进入运行
    Kubernetes 集群的节点：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that you’ve prepared the directory on the node, you can create the PV from
    the manifest file *hostpath-pv.yaml*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经在节点上准备好了目录，可以从清单文件 *hostpath-pv.yaml* 创建 PV：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Up to this point, you would carry out these steps in an admin role. You would
    define PVs and make them available to developers on the Kubernetes cluster.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您将在管理员角色中执行这些步骤。您将定义 PV 并使其在 Kubernetes 集群中对开发者可用。
- en: Now you’re in a position to use the PV in a pod, from a developer’s perspective.
    This is done via a *persistent volume claim* (PVC), so called because, well, you
    literally claim a PV that fulfills certain characteristics, such as size or storage
    class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从开发者的角度来看，您可以在 Pod 中使用 PV。这是通过*持久卷声明*（PVC）完成的，因为您确实声明了一个 PV，满足某些特征，如大小或存储类。
- en: 'Create a manifest file called *pvc.yaml* that defines a PVC, asking for 200
    MB of space:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 *pvc.yaml* 的清单文件，定义一个 PVC，请求 200 MB 的空间：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, launch the PVC and verify its state:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，启动 PVC 并验证其状态：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that the status of the PV `hostpathpv` has changed from `Available` to
    `Bound`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，PV `hostpathpv` 的状态已从 `Available` 变为 `Bound`。
- en: 'Finally, it’s time to consume the data from the PV in a container, this time
    via a deployment that mounts it in the filesystem. So, create a file called *nginx-using-pv.yaml*
    with the following contents:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候在容器中消耗 PV 中的数据了，这次是通过将其挂载到文件系统中的部署完成的。因此，请创建一个名为 *nginx-using-pv.yaml*
    的文件，并包含以下内容：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And launch the deployment, like so:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 并启动部署，如下所示：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, the PV is in use via the PVC you created earlier.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，PV 正通过您之前创建的 PVC 使用中。
- en: 'To verify that the data actually has arrived, you could now create a service
    (see [Recipe 5.1](ch05.html#simple_service)) along with an `Ingress` object (see
    [Recipe 5.5](ch05.html#ingress)) and then access it like so:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证数据确实已到达，您现在可以创建一个服务（参见 [Recipe 5.1](ch05.html#simple_service)）以及一个 `Ingress`
    对象（参见 [Recipe 5.5](ch05.html#ingress)），然后像这样访问它：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Well done! You’ve (as an admin) provisioned a persistent volume and (as a developer)
    claimed it via a persistent volume claim and used it from a deployment in a pod
    by mounting it into the container filesystem.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您（作为管理员）已经提供了持久卷，并（作为开发者）通过持久卷声明对其进行了声明，并通过将其挂载到容器文件系统中的 Pod 中使用。
- en: Discussion
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In the Solution, we used a persistent volume of type `hostPath`. In a production
    setting, you would not want to use this but rather ask your cluster administrator
    nicely to provision a networked volume backed by NFS or an Amazon Elastic Block
    Store (EBS) volume to make sure your data sticks around and survives single-node
    failures.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案中，我们使用了 `hostPath` 类型的持久卷。在生产环境中，您不希望使用这个，而是要求您的集群管理员提供由 NFS 或 Amazon Elastic
    Block Store (EBS) 卷支持的网络化卷，以确保您的数据保持和在单节点故障时能够存活。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that PVs are cluster-wide resources; that is, they are not namespaced.
    However, PVCs are namespaced. You can claim PVs from specific namespaces using
    namespaced PVCs.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，PV 是集群范围的资源；即它们不是命名空间的。但是，PVC 是命名空间的。您可以使用命名空间 PVC 从特定命名空间声明 PV。
- en: See Also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [persistent volumes documentation](https://oreil.ly/IMCId)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [持久卷文档](https://oreil.ly/IMCId)
- en: '[“Configure a Pod to Use a PersistentVolume for Storage”](https://oreil.ly/sNDkp)
    in the Kubernetes documentation'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“配置 Pod 使用持久卷进行存储”](https://oreil.ly/sNDkp) 在 Kubernetes 文档中'
- en: 8.5 Understanding Data Persistency on Minikube
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.5 在 Minikube 上理解数据持久性
- en: Problem
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use Minikube to deploy a stateful application in Kubernetes. Specifically,
    you would like to deploy a MySQL database.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用 Minikube 在 Kubernetes 中部署一个有状态的应用程序。具体来说，您想部署一个 MySQL 数据库。
- en: Solution
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a `PersistentVolumeClaim` object (see [Recipe 8.4](#pv_minikube)) in your
    pod definition and/or the template for your database.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 pod 定义和/或数据库模板中使用 `PersistentVolumeClaim` 对象（参见 [Recipe 8.4](#pv_minikube)）。
- en: 'First you need to make a request for a specific amount of storage. The following
    *data.yaml* manifest makes a request for 1 GB of storage:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要请求特定数量的存储空间。以下的 *data.yaml* 清单请求了 1 GB 的存储空间：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On Minikube, create this PVC and immediately see how a persistent volume is
    created to match this claim:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Minikube 上，创建此 PVC 并立即查看如何创建与此声明匹配的持久卷：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You are now ready to use this claim in your pod. In the `volumes` section of
    the pod manifest, define a volume by name with a PVC type and a reference to the
    PVC you just created.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以在您的 pod 中使用此声明。在 pod 清单的 `volumes` 部分，通过名称定义一个 PVC 类型的卷，并引用您刚刚创建的 PVC。
- en: 'In the `volumeMounts` field, you’ll mount this volume at a specific path inside
    your container. For MySQL, you mount it at `/var/lib/mysql`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `volumeMounts` 字段中，您将在容器内的特定路径挂载此卷。对于 MySQL，您将其挂载在 `/var/lib/mysql` 下：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Discussion
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Minikube is configured out of the box with a default storage class that defines
    a default persistent volume provisioner. This means that when a persistent volume
    claim is created, Kubernetes will dynamically create a matching persistent volume
    to fill that claim.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 默认配置了一个默认存储类别，定义了默认的持久卷供应者。这意味着当创建持久卷声明时，Kubernetes 将动态创建匹配的持久卷以填充该声明。
- en: 'This is what happened in the Solution. When you created the persistent volume
    claim called `data`, Kubernetes automatically created a persistent volume to match
    that claim. If you look a bit deeper at the default storage class on Minikube,
    you will see the provisioner type:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是解决方案中发生的事情。当您创建名为 `data` 的持久卷声明时，Kubernetes 自动创建了一个持久卷来匹配该声明。如果您稍微深入查看 Minikube
    上的默认存储类别，您会看到供应商类型：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This specific storage class is using a storage provisioner that creates persistent
    volumes of type `hostPath`. You can see this by looking at the manifest of the
    PV that got created to match the claim you created previously:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此特定存储类别使用一个创建 `hostPath` 类型的存储供应者。您可以通过查看先前创建的匹配声明的 PV 的清单来查看这一点：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To verify that the host volume created holds the database `data`, you can connect
    to Minikube and list the files in the directory:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证所创建的主机卷是否包含数据库 `data`，您可以连接到 Minikube 并列出目录中的文件：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Indeed, you now have data persistence. If the pod dies (or you delete it), your
    data will still be available.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，现在您拥有数据持久性。如果 pod 崩溃（或者您删除它），您的数据仍将可用。
- en: In general, storage classes allow the cluster administrator to define the various
    types of storage they might provide. For the developers, this abstracts the type
    of storage and lets them use PVCs without having to worry about the storage provider
    itself.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，存储类别允许集群管理员定义他们可能提供的各种存储类型。对于开发人员来说，这抽象了存储类型，让他们可以使用 PVC 而不必担心存储提供者本身。
- en: See Also
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Kubernetes persistent volume claim documentation](https://oreil.ly/8CRZI)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 持久卷声明文档](https://oreil.ly/8CRZI)'
- en: '[Kubernetes storage class documentation](https://oreil.ly/32-fw)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes存储类文档](https://oreil.ly/32-fw)'
- en: 8.6 Storing Encrypted Secrets in Version Control
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.6 在版本控制中存储加密的秘密
- en: Problem
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to store all your Kubernetes manifests in version control and safely
    share them (even publicly), including secrets.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将所有Kubernetes清单存储在版本控制中并安全共享它们（甚至是公开的），包括秘密。
- en: Solution
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use [sealed-secrets](https://oreil.ly/r-83j). Sealed-secrets is a Kubernetes
    controller that decrypts one-way encrypted secrets and creates in-cluster `Secret`
    objects (see [Recipe 8.2](#special_volumes)).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[sealed-secrets](https://oreil.ly/r-83j)。Sealed-secrets是一个Kubernetes控制器，用于解密单向加密的秘密并在集群中创建`Secret`对象（参见[Recipe
    8.2](#special_volumes)）。
- en: 'To get started, install the `v0.23.1` release of the sealed-secrets controller
    from the [release page](https://oreil.ly/UgMpf):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请从[发布页面](https://oreil.ly/UgMpf)安装`v0.23.1`版本的sealed-secrets控制器：
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result will be that you have a new custom resource and a new pod running
    in the `kube-system` namespace:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是您在`kube-system`命名空间中运行一个新的自定义资源和一个新的pod：
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, download the corresponding release of the `kubeseal` binary from the [release
    page](https://oreil.ly/UgMpf). This tool will allow you to encrypt your secrets.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从[发布页面](https://oreil.ly/UgMpf)下载相应版本的`kubeseal`二进制文件。这个工具将允许您加密您的秘密。
- en: 'For example, on macOS (amd64), do the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在macOS（amd64）上，执行以下操作：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You are now ready to start using sealed-secrets. First, generate a generic
    secret manifest:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始使用密封的秘密了。首先，生成一个通用的秘密清单：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then use the `kubeseal` command to generate the new custom `SealedSecret` object:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`kubeseal`命令生成新的自定义`SealedSecret`对象：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the `SealedSecret` object using the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建`SealedSecret`对象：
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can now store *sealedsecret.json* safely in version control.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以安全地将*sealedsecret.json*存储在版本控制中。
- en: Discussion
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Once you create the `SealedSecret` object, the controller will detect it, decrypt
    it, and generate the corresponding secret.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`SealedSecret`对象后，控制器将检测到它，解密它，并生成相应的秘密。
- en: Your sensitive information is encrypted into a `SealedSecret` object, which
    is a custom resource (see [Recipe 15.4](ch15.html#writing_crd)). The `SealedSecret`
    is safe to store under version control and share, even publicly. Once a `SealedSecret`
    is created on the Kubernetes API server, only the private key stored in the sealed-secret
    controller can decrypt it and create the corresponding `Secret` object (which
    is only base64-encoded). Nobody else, including the original author, can decrypt
    the original `Secret` from the `Se⁠al⁠ed​Se⁠cr⁠et`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您的敏感信息被加密到一个`SealedSecret`对象中，这是一个自定义资源（参见[Recipe 15.4](ch15.html#writing_crd)）。`SealedSecret`安全地存储在版本控制下并共享，甚至是公开的。一旦在Kubernetes
    API服务器上创建了`SealedSecret`，只有存储在密封秘密控制器中的私钥才能解密它并创建相应的`Secret`对象（仅为base64编码）。没有其他人，包括原作者，可以从`Se⁠al⁠ed​Se⁠cr⁠et`中解密原始`Secret`。
- en: While users cannot decrypt the original `Secret` from the `SealedSecret`, they
    may be able to access the unsealed `Secret` from the cluster. You should configure
    RBAC to forbid low-privilege users from reading `Secret` objects from namespaces
    that they have restricted access to.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然用户无法从`SealedSecret`中解密原始`Secret`，但他们可能能够从集群中访问未封存的`Secret`。您应该配置RBAC以禁止低权限用户从他们有限制访问权限的命名空间中读取`Secret`对象。
- en: 'You can list the `SealedSecret` objects in the current namespace using the
    following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令列出当前命名空间中的`SealedSecret`对象：
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See Also
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[The sealed-secrets project on GitHub](https://oreil.ly/SKVWq)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub上的密封秘密项目](https://oreil.ly/SKVWq)'
- en: 'Angus Lees’s article [“Sealed Secrets: Protecting Your Passwords Before They
    Reach Kubernetes”](https://oreil.ly/Ie3nB)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angus Lees的文章[“密封的秘密：在到达Kubernetes之前保护您的密码”](https://oreil.ly/Ie3nB)
