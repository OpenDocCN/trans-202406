- en: Chapter 24\. Mobile Application Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve ever stayed with a relative, vacationed at a rental property, or rented
    a furnished apartment, you know what it’s like to be surrounded by things that
    aren’t yours. It can be hard to feel settled in these types of environments, not
    wanting to leave something out of place or make a mess. When I’m in these situations,
    no matter how kind or accommodating the host is, this lack of ownership leaves
    me on edge. What can I say? I’m just not comfortable unless I can put a glass
    down without a coaster.
  prefs: []
  type: TYPE_NORMAL
- en: Without the ability to customize or read user-specific data, our app might fill
    users with the same sense of discomfort. Their notes are simply mixed in with
    those of everyone else, not making the application truly their own. In this chapter
    we’ll add authentication to our application. To accomplish this, we’ll introduce
    an authentication routing flow, store token data using Expo’s `SecureStore`, create
    text forms in React Native, and perform authentication GraphQL mutations.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication Routing Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s begin by creating our authentication flow. When a user first accesses
    our application, we’ll present them with a sign-in screen. When the user signs
    in, we’ll store a token on the device, allowing them to bypass the sign-in screen
    on future application uses. We’ll also add a settings screen, where a user can
    click a button to log out of the application and remove the token from their device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, we’ll be adding several new screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '*authloading.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This will be an interstitial screen, which users won’t interact with. When the
    app is opened, we’ll use the screen to check if a token is present and navigate
    the user to either the sign-in screen or the application content.
  prefs: []
  type: TYPE_NORMAL
- en: '*signin.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This is the screen where a user can sign in to their account. After a successful
    login attempt, we will store a token on the device.
  prefs: []
  type: TYPE_NORMAL
- en: '*settings.js*'
  prefs: []
  type: TYPE_NORMAL
- en: In the settings screen, a user will be able to click a button and log out of
    the application. Once they are logged out, they will be routed back to the sign-in
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using an Existing Account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be adding the ability to create an account through the app later in the
    chapter. If you haven’t already, it would be useful to create an account either
    directly through your API instance’s GraphQL Playground or the web application
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: For storing and working with tokens, we’ll be using Expo’s [SecureStore library](https://oreil.ly/nvqEO).
    I’ve found SecureStore to be a straightforward way to encrypt and store data locally
    on a device. For iOS devices, SecureStore makes use of the built-in [keychain
    services](https://oreil.ly/iCu8R), while on Android it uses the OS’s Shared Preferences,
    encrypting the data with [Keystore](https://oreil.ly/gIXsp). All of this happens
    under the hood, allowing us to simply store and retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we’ll create our sign-in screen. For now, our sign-in screen
    will consist of a `Button` component that, when pressed, will store a token. Let’s
    create a new screen component at *src/screens/signin.js*, importing our dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s create our authentication loading component at *src/screens/authloading.js*,
    which for now will simply display a loading indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can create our settings screen at *src/screens/settings.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With these components written, we will update our routing to handle the authenticated
    and unauthenticated states. In *src/screens/index.js*, add the new screens to
    our list of import statements as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We’ll also need to update our `react-navigation` dependency to include `createSwitchNavigator`,
    which allows us to display a single screen at a time and switch between them.
    The [`SwitchNavigator`](https://oreil.ly/vSURH) resets routes to the default state
    when a user navigates and does not offer back-navigation options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a new `StackNavigator` for our authentication and settings screens.
    This will allow us to add subnavigation screens when or if needed in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then add our settings screen to the bottom `TabNavigator`. The rest
    of the tab navigation settings will stay the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create our `SwitchNavigator` by defining the screens to switch between
    and setting a default screen, the `AuthLoading`. We’ll then replace our existing
    `export` statement with one that exports the `SwitchNavigator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'All together, our *src/screens/index.js* file will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now, when we preview our app we’ll only see loading spinner, since our
    `AuthLoading` route is the initial screen. Let’s update this so that the loading
    screen checks for the existence of a `token` value in the application’s `SecureStore`.
    If the token is present, we’ll navigate the user to the main application screen.
    However, if no token is present, the user should be routed to the sign-in screen.
    Let’s update *src/screens/**authloading.js* to perform this check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With this change, when we load the app we should now be routed to the sign-in
    screen, since no token is present. For now, let’s update our sign-in screen to
    store a generic token and navigate to the application when the user presses the
    button ([Figure 24-1](#temp_sign_in)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of the temporary sign in screen](assets/jsev_2401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 24-1\. Clicking the button will store a token and route the user to the
    application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, when a user presses the button, a token is stored via `SecureStore`. With
    the sign-in functionality in place, let’s add the ability for users to sign out
    of the application. To do so, we’ll add a button on our settings screen that,
    when pressed, will remove the *token* from `SecureStore` ([Figure 24-2](#sign-out)).
    In *src/screens/settings.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of the setting screen](assets/jsev_2402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 24-2\. Clicking the button will remove the token from the device and
    return the user to the sign-in screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With these pieces in place, we have everything we need to create an application
    authentication flow.
  prefs: []
  type: TYPE_NORMAL
- en: Be Sure to Sign Out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven’t already, tap the Sign Out button in your local app instance.
    We’ll be adding proper sign-in functionality in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Sign-in Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we can now click a button and store a token on the user’s device, we’re
    not yet allowing a user to sign in to an account by entering their own information.
    Let’s begin to remedy this by creating a form where a user can enter their email
    address and password. To do this, we’ll create a new component at *src/components/UserForm.js*
    with a form using React Native’s `TextInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can display this form on our authentication screen. To do so, update
    *src/screens/signin.js* to import and use the component like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we’ll see a basic form display on the authentication screen, but
    it lacks any style or functionality. We can continue implementing the form in
    our *src/components/UserForm.js* file. We’ll be using React’s `useState` hook
    to read and set the values of our form elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now we can add a few more additional properties to our form elements to provide
    users with the expected functionality when working with email addresses or passwords.
    Full documentation of the `TextInput` API can be found in the [React Native docs](https://oreil.ly/yvgyU).
    We’ll also call a function when the button is pressed, though the functionality
    will be limited.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our form has all of the necessary components, but the styling leaves a lot
    to be desired. Let’s use the Styled Components library to give the form a more
    appropriate appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, our `Button` component is limited to the default style options, with
    the exception of accepting a `color` property value. To create a custom-styled
    button component, we can use the React Native wrapper `TouchableOpacity` (see
    [Figure 24-3](#styled-sign-in)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With this, we’ve implemented a sign-in form and applied custom styles. Let’s
    now implement the form’s functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the completed sign in form](assets/jsev_2403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 24-3\. Our sign-in form with custom styles
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Authentication with GraphQL Mutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may recall the authentication flow we’ve developed from the API and web
    application chapters, but before moving forward let’s do a quick refresher. We
    will send a GraphQL mutation to our API that includes the user’s email address
    and password. If the email address is present in our database and the password
    is correct, our API will respond with a JWT. We can then store the token on the
    user’s device, as we’ve already been doing, and send it along with every GraphQL
    request. This will allow us to identify the user on every API request, without
    requiring them to constantly re-enter their password.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our form in place, we can write our GraphQL mutation in *src/screens/signin.js*.
    First, we’ll add the Apollo libraries as well as our `Loading` component to our
    list of imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can add our GraphQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And update our `storeToken` function to store a token string passed as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we update the component as a GraphQL mutation. We’ll also pass several
    property values to the `UserForm` component, allowing us to share the mutation
    data, identify the type of form we are calling, and make use of the router’s navigation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can make a simple change in our *src/components/UserForm.js* component,
    which will enable it to pass the user-entered data to the mutation. Within the
    component, we will update our `handleSubmit` function to pass the form values
    to our mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With our mutation written and form complete, users can now sign in to the application,
    which will store the returned JSON Web Token for future use.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticated GraphQL Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our users can sign-in to their account, we’ll need to use the stored
    token to authenticate each request. This will allow us to request user-specific
    data, such as a list of notes by the current user or a list of notes the user
    has marked as “favorites.” To accomplish this, we’ll update the Apollo configuration
    to check for the existence of a token and, when one is present, send that token’s
    value with each API call.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/Main.js*, first add `SecureStore` to the list of imports and update
    the Apollo Client dependencies to include `createHttpLink` and `setContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then update our Apollo Client configuration to send the token value
    with each request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With the token sent in the header of each request, we can now update the `mynotes`
    and `favorites` screens to request user-specific data. If you followed along through
    the web chapters, these queries should look very familiar.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/screens/mynotes.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/screens/favorites.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![An image of a cartoonish tiger head](assets/jsev_2404.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 24-4\. Passing the token in the header of each request allows us to make
    user-specific queries in our application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We are now retrieving user-specific data based on the token value stored on
    the user’s device ([Figure 24-4](#authenticated_query)).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Sign-up Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now a user can sign in to an existing account, but they have no way to
    create an account if one doesn’t exist. A common UI pattern is to add a link to
    a registration form below the sign-in link (or vice versa). Let’s add a sign-up
    screen to allow users to create a new account from within our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let’s create a new screen component at *src/screens/signup.js*. This
    component will be nearly identical to our sign-in screen, but we’ll call our `signUp`
    GraphQL mutation and pass a `formType="signUp"` property to our `UserForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With the screen created, we can add it to our router. In the *src/screens/index.js*
    file, first add the new component to our list of file imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will update our `AuthStack` to include the sign-up screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: With this, our component is created and routable; however, our `UserForm` component
    does not contain all of the necessary fields. Rather than creating a registration
    form component, we can make use of the `formType` property that we’re passing
    to `UserForm` to customize the form, depending on the type.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our *src/components/UserForm.js* file, let’s first update the form to include
    a username field when the `formType` equals `signUp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s add a link at the bottom of the sign-in form that will allow a
    user to route to the sign-up form when pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use styled components to update the look of the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the component’s JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'All together, our *src/components/UserForm.js* file will now be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With these changes, a user can both sign in and register for an account with
    our application ([Figure 24-5](#reg_screen)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the completed sign in and sign up screens](assets/jsev_2405.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 24-5\. A user can now register an account and navigate between the authentication
    screens
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we looked at how to bring authentication to an application.
    Through a combination of React Native’s text form elements, React Navigation’s
    routing capabilities, Expo’s SecureStore library, and GraphQL mutations, we can
    create a user-friendly authentication flow. Having a solid understanding of this
    type of authentication also enables us to explore additional React Native authentication
    methods, such as Expo’s [`AppAuth`](https://oreil.ly/RaxNo) or [`GoogleSignIn`](https://oreil.ly/Ic6BW).
    In this next chapter, we’ll look at how we can publish and distribute a React
    Native application.
  prefs: []
  type: TYPE_NORMAL
