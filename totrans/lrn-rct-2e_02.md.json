["```\nvar pizza = true;\npizza = false;\nconsole.log(pizza); // false\n```", "```\nconst pizza = true;\npizza = false;\n```", "```\nvar topic = \"JavaScript\";\n\nif (topic) {\n  var topic = \"React\";\n  console.log(\"block\", topic); // block React\n}\n\nconsole.log(\"global\", topic); // global React\n```", "```\nvar topic = \"JavaScript\";\n\nif (topic) {\n  let topic = \"React\";\n  console.log(\"block\", topic); // React\n}\n\nconsole.log(\"global\", topic); // JavaScript\n```", "```\nvar div,\n  container = document.getElementById(\"container\");\n\nfor (var i = 0; i < 5; i++) {\n  div = document.createElement(\"div\");\n  div.onclick = function() {\n    alert(\"This is box #\" + i);\n  };\n  container.appendChild(div);\n}\n```", "```\nconst container = document.getElementById(\"container\");\nlet div;\nfor (let i = 0; i < 5; i++) {\n  div = document.createElement(\"div\");\n  div.onclick = function() {\n    alert(\"This is box #: \" + i);\n  };\n  container.appendChild(div);\n}\n```", "```\nconsole.log(lastName + \", \" + firstName + \" \" + middleName);\n```", "```\nconsole.log(`${lastName}, ${firstName} ${middleName}`);\n```", "```\nconst email = `\nHello ${firstName},\n\nThanks for ordering ${qty} tickets to ${event}.\n\nOrder Details\n${firstName} ${middleName} ${lastName}\n     ${qty} x $${price} = $${qty*price} to ${event}\n\nYou can pick your tickets up 30 minutes before\nthe show.\n\nThanks,\n\n${ticketAgent}\n`\n```", "```\ndocument.body.innerHTML = `\n<section>\n <header>\n <h1>The React Blog</h1>\n </header>\n <article>\n <h2>${article.title}</h2>\n      ${article.body}\n </article>\n <footer>\n <p>copyright ${new Date().getYear()} | The React Blog</p>\n </footer>\n</section>\n`;\n```", "```\nfunction logCompliment() {\n  console.log(\"You're doing great!\");\n}\n```", "```\nfunction logCompliment() {\n  console.log(\"You're doing great!\");\n}\n\nlogCompliment();\n```", "```\nconst logCompliment = function() {\n  console.log(\"You're doing great!\");\n};\n\nlogCompliment();\n```", "```\n// Invoking the function before it's declared\nhey();\n// Function Declaration\nfunction hey() {\n  alert(\"hey!\");\n}\n```", "```\n// Invoking the function before it's declared\nhey();\n// Function Expression\nconst hey = function() {\n  alert(\"hey!\");\n};\n```", "```\nTypeError: hey is not a function\n```", "```\nconst logCompliment = function(firstName) {\n  console.log(`You're doing great, ${firstName}`);\n};\n\nlogCompliment(\"Molly\");\n```", "```\nconst logCompliment = function(firstName, message) {\n  console.log(`${firstName}: ${message}`);\n};\n\nlogCompliment(\"Molly\", \"You're so cool\");\n```", "```\nconst createCompliment = function(firstName, message) {\n  return `${firstName}: ${message}`;\n};\n\ncreateCompliment(\"Molly\", \"You're so cool\");\n```", "```\nconsole.log(createCompliment(\"You're so cool\", \"Molly\"));\n```", "```\nfunction logActivity(name = \"Shane McConkey\", activity = \"skiing\") {\n  console.log(`${name} loves ${activity}`);\n}\n```", "```\nconst defaultPerson = {\n  name: {\n    first: \"Shane\",\n    last: \"McConkey\"\n  },\n  favActivity: \"skiing\"\n};\n\nfunction logActivity(person = defaultPerson) {\n  console.log(`${person.name.first} loves ${person.favActivity}`);\n}\n```", "```\nconst lordify = function(firstName) {\n  return `${firstName} of Canterbury`;\n};\n\nconsole.log(lordify(\"Dale\")); // Dale of Canterbury\nconsole.log(lordify(\"Gail\")); // Gail of Canterbury\n```", "```\nconst lordify = firstName => `${firstName} of Canterbury`;\n```", "```\n// Typical function\nconst lordify = function(firstName, land) {\n  return `${firstName} of ${land}`;\n};\n```", "```\n// Arrow Function\nconst lordify = (firstName, land) => `${firstName} of ${land}`;\n\nconsole.log(lordify(\"Don\", \"Piscataway\")); // Don of Piscataway\nconsole.log(lordify(\"Todd\", \"Schenectady\")); // Todd of Schenectady\n```", "```\nconst lordify = (firstName, land) => {\n  if (!firstName) {\n    throw new Error(\"A firstName is required to lordify\");\n  }\n\n  if (!land) {\n    throw new Error(\"A lord must have a land\");\n  }\n\n  return `${firstName} of ${land}`;\n};\n\nconsole.log(lordify(\"Kelly\", \"Sonoma\")); // Kelly of Sonoma\nconsole.log(lordify(\"Dave\")); // ! JAVASCRIPT ERROR\n```", "```\nconst person = (firstName, lastName) =>\n    {\n        first: firstName,\n        last: lastName\n    }\n\nconsole.log(person(\"Brad\", \"Janson\"));\n```", "```\nconst person = (firstName, lastName) => ({\n  first: firstName,\n  last: lastName\n});\n\nconsole.log(person(\"Flad\", \"Hanson\"));\n```", "```\nconst tahoe = {\n  mountains: [\"Freel\", \"Rose\", \"Tallac\", \"Rubicon\", \"Silver\"],\n  print: function(delay = 1000) {\n    setTimeout(function() {\n      console.log(this.mountains.join(\", \"));\n    }, delay);\n  }\n};\n\ntahoe.print(); // Uncaught TypeError: Cannot read property 'join' of undefined\n```", "```\nconsole.log(this); // Window {}\n```", "```\nconst tahoe = {\n  mountains: [\"Freel\", \"Rose\", \"Tallac\", \"Rubicon\", \"Silver\"],\n  print: function(delay = 1000) {\n    setTimeout(() => {\n      console.log(this.mountains.join(\", \"));\n    }, delay);\n  }\n};\n\ntahoe.print(); // Freel, Rose, Tallac, Rubicon, Silver\n```", "```\nconst tahoe = {\n  mountains: [\"Freel\", \"Rose\", \"Tallac\", \"Rubicon\", \"Silver\"],\n  print: (delay = 1000) => {\n    setTimeout(() => {\n      console.log(this.mountains.join(\", \"));\n    }, delay);\n  }\n};\n\ntahoe.print(); // Uncaught TypeError: Cannot read property 'join' of undefined\n```", "```\nconst add = (x = 5, y = 10) => console.log(x + y);\n```", "```\n\"use strict\";\n\nvar add = function add() {\n  var x =\n    arguments.length <= 0 || arguments[0] === undefined ? 5 : arguments[0];\n  var y =\n    arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];\n  return console.log(x + y);\n};\n```", "```\nconst sandwich = {\n  bread: \"dutch crunch\",\n  meat: \"tuna\",\n  cheese: \"swiss\",\n  toppings: [\"lettuce\", \"tomato\", \"mustard\"]\n};\n\nconst { bread, meat } = sandwich;\n\nconsole.log(bread, meat); // dutch crunch tuna\n```", "```\nconst sandwich = {\n  bread: \"dutch crunch\",\n  meat: \"tuna\",\n  cheese: \"swiss\",\n  toppings: [\"lettuce\", \"tomato\", \"mustard\"]\n};\n\nlet { bread, meat } = sandwich;\n\nbread = \"garlic\";\nmeat = \"turkey\";\n\nconsole.log(bread); // garlic\nconsole.log(meat); // turkey\n\nconsole.log(sandwich.bread, sandwich.meat); // dutch crunch tuna\n```", "```\nconst lordify = regularPerson => {\n  console.log(`${regularPerson.firstname} of Canterbury`);\n};\n\nconst regularPerson = {\n  firstname: \"Bill\",\n  lastname: \"Wilson\"\n};\n\nlordify(regularPerson); // Bill of Canterbury\n```", "```\nconst lordify = ({ firstname }) => {\n  console.log(`${firstname} of Canterbury`);\n};\n\nconst regularPerson = {\n  firstname: \"Bill\",\n  lastname: \"Wilson\"\n};\n\nlordify(regularPerson); // Bill of Canterbury\n```", "```\nconst regularPerson = {\n  firstname: \"Bill\",\n  lastname: \"Wilson\",\n  spouse: {\n    firstname: \"Phil\",\n    lastname: \"Wilson\"\n  }\n};\n```", "```\nconst lordify = ({ spouse: { firstname } }) => {\n  console.log(`${firstname} of Canterbury`);\n};\n\nlordify(regularPerson); // Phil of Canterbury\n```", "```\nconst [firstAnimal] = [\"Horse\", \"Mouse\", \"Cat\"];\n\nconsole.log(firstAnimal); // Horse\n```", "```\nconst [, , thirdAnimal] = [\"Horse\", \"Mouse\", \"Cat\"];\n\nconsole.log(thirdAnimal); // Cat\n```", "```\nconst name = \"Tallac\";\nconst elevation = 9738;\n\nconst funHike = { name, elevation };\n\nconsole.log(funHike); // {name: \"Tallac\", elevation: 9738}\n```", "```\nconst name = \"Tallac\";\nconst elevation = 9738;\nconst print = function() {\n  console.log(`Mt. ${this.name} is ${this.elevation} feet tall`);\n};\n\nconst funHike = { name, elevation, print };\n\nfunHike.print(); // Mt. Tallac is 9738 feet tall\n```", "```\n// Old\nvar skier = {\n  name: name,\n  sound: sound,\n  powderYell: function() {\n    var yell = this.sound.toUpperCase();\n    console.log(`${yell} ${yell} ${yell}!!!`);\n  },\n  speed: function(mph) {\n    this.speed = mph;\n    console.log(\"speed:\", mph);\n  }\n};\n\n// New\nconst skier = {\n  name,\n  sound,\n  powderYell() {\n    let yell = this.sound.toUpperCase();\n    console.log(`${yell} ${yell} ${yell}!!!`);\n  },\n  speed(mph) {\n    this.speed = mph;\n    console.log(\"speed:\", mph);\n  }\n};\n```", "```\nconst peaks = [\"Tallac\", \"Ralston\", \"Rose\"];\nconst canyons = [\"Ward\", \"Blackwood\"];\nconst tahoe = [...peaks, ...canyons];\n\nconsole.log(tahoe.join(\", \")); // Tallac, Ralston, Rose, Ward, Blackwood\n```", "```\nconst peaks = [\"Tallac\", \"Ralston\", \"Rose\"];\nconst [last] = peaks.reverse();\n\nconsole.log(last); // Rose\nconsole.log(peaks.join(\", \")); // Rose, Ralston, Tallac\n```", "```\nconst peaks = [\"Tallac\", \"Ralston\", \"Rose\"];\nconst [last] = [...peaks].reverse();\n\nconsole.log(last); // Rose\nconsole.log(peaks.join(\", \")); // Tallac, Ralston, Rose\n```", "```\nconst lakes = [\"Donner\", \"Marlette\", \"Fallen Leaf\", \"Cascade\"];\n\nconst [first, ...others] = lakes;\n\nconsole.log(others.join(\", \")); // Marlette, Fallen Leaf, Cascade\n```", "```\nfunction directions(...args) {\n  let [start, ...remaining] = args;\n  let [finish, ...stops] = remaining.reverse();\n\n  console.log(`drive through ${args.length} towns`);\n  console.log(`start in ${start}`);\n  console.log(`the destination is ${finish}`);\n  console.log(`stopping ${stops.length} times in between`);\n}\n\ndirections(\"Truckee\", \"Tahoe City\", \"Sunnyside\", \"Homewood\", \"Tahoma\");\n```", "```\nconst morning = {\n  breakfast: \"oatmeal\",\n  lunch: \"peanut butter and jelly\"\n};\n\nconst dinner = \"mac and cheese\";\n\nconst backpackingMeals = {\n  ...morning,\n  dinner\n};\n\nconsole.log(backpackingMeals);\n\n// {\n//   breakfast: \"oatmeal\",\n//   lunch: \"peanut butter and jelly\",\n//   dinner: \"mac and cheese\"\n// }\n```", "```\nconst header = document.getElementById(\"heading\");\nheader.innerHTML = \"Hey!\";\n```", "```\nconsole.log(fetch(\"https://api.randomuser.me/?nat=US&results=1\"));\n```", "```\nfetch(\"https://api.randomuser.me/?nat=US&results=1\").then(res =>\n  console.log(res.json())\n);\n```", "```\nfetch(\"https://api.randomuser.me/?nat=US&results=1\")\n  .then(res => res.json())\n  .then(json => json.results)\n  .then(console.log)\n  .catch(console.error);\n```", "```\nconst getFakePerson = async () => {\n  let res = await fetch(\"https://api.randomuser.me/?nat=US&results=1\");\n  let { results } = res.json();\n  console.log(results);\n};\n\ngetFakePerson();\n```", "```\nconst getFakePerson = async () => {\n  try {\n    let res = await fetch(\"https://api.randomuser.me/?nat=US&results=1\");\n    let { results } = res.json();\n    console.log(results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\ngetFakePerson();\n```", "```\nconst getPeople = count =>\n  new Promise((resolves, rejects) => {\n    const api = `https://api.randomuser.me/?nat=US&results=${count}`;\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", api);\n    request.onload = () =>\n      request.status === 200\n        ? resolves(JSON.parse(request.response).results)\n        : reject(Error(request.statusText));\n    request.onerror = err => rejects(err);\n    request.send();\n  });\n```", "```\ngetPeople(5)\n  .then(members => console.log(members))\n  .catch(error => console.error(`getPeople failed: ${error.message}`))\n);\n```", "```\nfunction Vacation(destination, length) {\n  this.destination = destination;\n  this.length = length;\n}\n\nVacation.prototype.print = function() {\n  console.log(this.destination + \" | \" + this.length + \" days\");\n};\n\nconst maui = new Vacation(\"Maui\", 7);\n\nmaui.print(); // Maui | 7 days\n```", "```\nclass Vacation {\n  constructor(destination, length) {\n    this.destination = destination;\n    this.length = length;\n  }\n\n  print() {\n    console.log(`${this.destination} will take ${this.length} days.`);\n  }\n}\n```", "```\nconst trip = new Vacation(\"Santiago, Chile\", 7);\n\ntrip.print(); // Chile will take 7 days.\n```", "```\nclass Expedition extends Vacation {\n  constructor(destination, length, gear) {\n    super(destination, length);\n    this.gear = gear;\n  }\n\n  print() {\n    super.print();\n    console.log(`Bring your ${this.gear.join(\" and your \")}`);\n  }\n}\n```", "```\nconst trip = new Expedition(\"Mt. Whitney\", 3, [\n  \"sunglasses\",\n  \"prayer flags\",\n  \"camera\"\n]);\n\ntrip.print();\n\n// Mt. Whitney will take 3 days.\n// Bring your sunglasses and your prayer flags and your camera\n```", "```\nexport const print=(message) => log(message, new Date())\n\nexport const log=(message, timestamp) =>\n  console.log(`${timestamp.toString()}: ${message}`)\n```", "```\nexport default new Expedition(\"Mt. Freel\", 2, [\"water\", \"snack\"]);\n```", "```\nimport { print, log } from \"./text-helpers\";\nimport freel from \"./mt-freel\";\n\nprint(\"printing a message\");\nlog(\"logging a message\");\n\nfreel.print();\n```", "```\nimport { print as p, log as l } from \"./text-helpers\";\n\np(\"printing a message\");\nl(\"logging a message\");\n```", "```\nimport * as fns from './text-helpers`\n```", "```\nconst print(message) => log(message, new Date())\n\nconst log(message, timestamp) =>\nconsole.log(`${timestamp.toString()}: ${message}`}\n\nmodule.exports = {print, log}\n```", "```\nconst { log, print } = require(\"./txt-helpers\");\n```"]