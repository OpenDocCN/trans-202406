["```\n#!/usr/bin/perl\n# connect.pl: connect to the MySQL server\n\nuse strict;\nuse warnings;\nuse DBI;\n\nmy $dsn = \"DBI:mysql:host=localhost;database=cookbook\";\nmy $dbh = DBI->connect ($dsn, \"cbuser\", \"cbpass\")\n            or die \"Cannot connect to server\\n\";\nprint \"Connected\\n\";\n$dbh->disconnect ();\nprint \"Disconnected\\n\";\n```", "```\n$ `perl connect.pl`\nConnected\nDisconnected\n```", "```\nDBI:mysql:host=localhost;database=cookbook\n```", "```\nDBI:mysql:host=localhost;database=cookbook\nDBI:mysql:database=cookbook\n```", "```\nmy $dbh = DBI->connect ($dsn, \"cbuser\", \"cbpass\")\n            or die \"Cannot connect to server\\n\";\n```", "```\nmy $dbh = DBI->connect ($dsn, \"cbuser\", \"cbpass\",\n                        {PrintError => 0, RaiseError => 1});\n```", "```\nmy $dbh = DBI->connect ($dsn, \"cbuser\", \"cbpass\",\n                        {PrintError => 0, RaiseError => 1, AutoCommit => 1});\n```", "```\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\nmy $dbh = DBI->connect ($dsn, \"cbuser\", \"cbpass\", $conn_attrs);\n```", "```\nmy $dsn = \"DBI:mysql:host=localhost;database=cookbook\"\n          . \";mysql_socket=/var/tmp/mysql.sock\";\n```", "```\nmy $dsn = \"DBI:mysql:host=127.0.0.1;database=cookbook;port=3307\";\n```", "```\n#!/usr/bin/ruby -w\n# connect.rb: connect to the MySQL server\n\nrequire \"mysql2\"\n\nbegin\n  client = Mysql2::Client.new(:host => \"localhost\", \n                              :username => \"cbuser\",\n                              :password => \"cbpass\",\n                              :database => \"cookbook\")\n  puts \"Connected\"\nrescue => e\n  puts \"Cannot connect to server\"\n  puts e.backtrace\n  exit(1)\nensure\n  client.close()\n  puts \"Disconnected\"\nend\n```", "```\n$ `ruby connect.rb`\nConnected\nDisconnected\n```", "```\nclient = Mysql2::Client.new(:host => \"localhost\",\n                            :socket => \"/var/tmp/mysql.sock\",\n                            :username => \"cbuser\",\n                            :password => \"cbpass\",\n                            :database => \"cookbook\")\n```", "```\nclient = Mysql2::Client.new(:host => \"127.0.0.1\",\n                            :port => 3307,\n                            :username => \"cbuser\",\n                            :password => \"cbpass\",\n                            :database => \"cookbook\")\n```", "```\nhttp://localhost/myscript.php\n```", "```\n<html>\n<head><title>A simple page</title></head>\n<body>\n<p>\n<?php\n  print (\"I am PHP code, hear me roar!\");\n?>\n</p>\n</body>\n</html>\n```", "```\n<?php\n# connect.php: connect to the MySQL server\n\ntry\n{\n  $dsn = \"mysql:host=localhost;dbname=cookbook\";\n  $dbh = new PDO ($dsn, \"cbuser\", \"cbpass\");\n  print (\"Connected\\n\");\n}\ncatch (PDOException $e)\n{\n  die (\"Cannot connect to server\\n\");\n}\n$dbh = NULL;\nprint (\"Disconnected\\n\");\n?>\n```", "```\n$ `php connect.php`\nConnected\nDisconnected\n```", "```\n*`driver`*:*`name=value`*;*`name=value`* ...\n```", "```\n$dsn = \"mysql:host=localhost;dbname=cookbook\"\n         . \";unix_socket=/var/tmp/mysql.sock\";\n```", "```\n$dsn = \"mysql:host=127.0.0.1;database=cookbook;port=3307\";\n```", "```\n#!/usr/bin/python3\n# connect.py: connect to the MySQL server\n\nimport mysql.connector\n\ntry:\n  conn = mysql.connector.connect(database=\"cookbook\",\n                                 host=\"localhost\",\n                                 user=\"cbuser\",\n                                 password=\"cbpass\")\n  print(\"Connected\")\nexcept:\n  print(\"Cannot connect to server\")\nelse:\n  conn.close()\n  print(\"Disconnected\")\n```", "```\n$ `python3 connect.py`\nConnected\nDisconnected\n```", "```\nconn_params = {\n  \"database\": \"cookbook\",\n  \"host\": \"localhost\",\n  \"user\": \"cbuser\",\n  \"password\": \"cbpass\",\n}\nconn = mysql.connector.connect(**conn_params)\nprint(\"Connected\")\n```", "```\nconn_params = {\n  \"database\": \"cookbook\",\n  \"unix_socket\": \"/var/tmp/mysql.sock\",\n  \"user\": \"cbuser\",\n  \"password\": \"cbpass\",\n}\nconn = mysql.connector.connect(**conn_params)\nprint(\"Connected\")\n```", "```\nconn_params = {\n  \"database\": \"cookbook\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 3307,\n  \"user\": \"cbuser\",\n  \"password\": \"cbpass\",\n}\nconn = mysql.connector.connect(**conn_params)\n```", "```\n$ go get -u github.com/go-sql-driver/mysql\n```", "```\n// connect.go: connect to MySQL server\npackage main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\n    db, err := sql.Open(\"mysql\", \"cbuser:cbpass@tcp(127.0.0.1:3306)/cookbook\")\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer db.Close()\n\n    err = db.Ping()\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Connected!\")\n}\n```", "```\n$ `go run connect.go`\nConnected!\n```", "```\n// connect_socket.go : Connect MySQL server using socket\npackage main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n    db, err := sql.Open(\"mysql\",\"cbuser:cbpass@unix(/tmp/mysql.sock)/cookbook\")\n    defer db.Close()\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    var user string\n    err = db.QueryRow(\"SELECT USER()\").Scan(&user)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Connected User:\", user, \"via MySQL socket\")\n}\n```", "```\n$ `go run connect_socket.go`\nConnected User: cbuser@localhost via MySQL socket\n```", "```\n// connect_tcpport.go : Connect MySQL server using tcp port number\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"mysql\",\n\t\"cbuser:cbpass@tcp(127.0.0.1:3306)/cookbook?charset=utf8mb4\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tvar user string\n\terr2 := db.QueryRow(\"SELECT USER()\").Scan(&user)\n\n\tif err2 != nil {\n\t\tlog.Fatal(err2)\n\t}\n\n\tfmt.Println(\"Connected User:\", user, \"via MySQL TCP/IP localhost on port 3306\")\n}\n```", "```\n$  `go run connect_tcpport.go`\nConnected User: cbuser@localhost via MySQL TCP/IP localhost on port 3306\n```", "```\n[username[:password]@][protocol[(address)]]/dbname[?param1=value1&..&paramN=valueN]\n```", "```\nusername:password@protocol(address)/dbname?param=value\n```", "```\n// Connect.java: connect to the MySQL server\n\nimport java.sql.*;\n\npublic class Connect {\n\n  public static void main (String[] args) {\n    Connection conn = null;\n    String url = \"jdbc:mysql://localhost/cookbook\";\n    String userName = \"cbuser\";\n    String password = \"cbpass\";\n\n    try {\n      conn = DriverManager.getConnection (url, userName, password);\n      System.out.println(\"Connected\");\n    } catch (Exception e) {\n      System.err.println(\"Cannot connect to server\");\n      System.exit (1);\n    }\n\n    if (conn != null) {\n      try {\n        conn.close();\n        System.out.println(\"Disconnected\");\n      } catch (Exception e) { /* ignore close errors */ }\n    }\n  }\n}\n```", "```\n$ `javac Connect.java`\n```", "```\n$ `java Connect`\nConnected\nDisconnected\n```", "```\n$ `java Connect.java`\nConnected\nDisconnected\n```", "```\njdbc:*`driver`*://*`host_name`*/*`db_name`*\n```", "```\njdbc:mysql:///\n```", "```\n// connect using username and password included in URL\nConnection conn = null;\nString url = \"jdbc:mysql://localhost/cookbook?user=cbuser&password=cbpass\";\n\ntry\n{\n  conn = DriverManager.getConnection (url);\n  System.out.println (\"Connected\");\n}\n```", "```\nString url = \"jdbc:mysql://127.0.0.1:3307/cookbook\";\n```", "```\nmy $conn_attrs = {AutoCommit => 1};\nmy $dbh = DBI->connect ($dsn, \"baduser\", \"badpass\", $conn_attrs);\n```", "```\nmy $conn_attrs = {AutoCommit => 1};\nmy $dbh = DBI->connect ($dsn, \"baduser\", \"badpass\", $conn_attrs)\n            or exit;\n```", "```\nmy $conn_attrs = {PrintError => 0, AutoCommit => 1};\nmy $dbh = DBI->connect ($dsn, \"baduser\", \"badpass\", $conn_attrs)\n            or die \"Connection error: \"\n                   . \"$DBI::errstr ($DBI::err/$DBI::state)\\n\";\n```", "```\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\nmy $dbh = DBI->connect ($dsn, \"baduser\", \"badpass\", $conn_attrs);\n```", "```\nmy $user_name = shift (@ARGV);\nmy $password = shift (@ARGV);\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\nmy $dbh = DBI->connect ($dsn, $user_name, $password, $conn_attrs);\n$dbh->{RaiseError} = 0; # disable automatic termination on error\nprint \"Enter statements to execute, one per line; terminate with Control-D\\n\";\nwhile (<>)              # read and execute queries\n{\n  $dbh->do ($_) or warn \"Statement failed: $DBI::errstr ($DBI::err)\\n\";\n}\n```", "```\neval\n{\n  # statements that might fail go here...\n};\nif ($@)\n{\n  print \"An error occurred: $@\\n\";\n}\n```", "```\nDBI->trace (1); # enable tracing, minimal output\nDBI->trace (3); # elevate trace level\nDBI->trace (0); # disable tracing\n```", "```\nDBI->trace (1, \"/tmp/trace.out\");\n```", "```\nbegin\n  client = Mysql2::Client.new(:host => \"localhost\",\n                              :username => \"baduser\",\n                              :password => \"badpass\",\n                              :database => \"cookbook\")\n  puts \"Connected\"\nrescue Mysql2::Error => e\n  puts \"Cannot connect to server\"\n  puts \"Error code: #{e.errno}\"\n  puts \"Error message: #{e.message}\"\n  puts \"Error SQLSTATE: #{e.sql_state}\"\n  exit(1)\nensure\n  client.close()s\nend\n```", "```\ntry\n{\n  $dsn = \"mysql:host=localhost;dbname=cookbook\";\n  $dbh = new PDO ($dsn, \"baduser\", \"badpass\");\n  $dbh->setAttribute (PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  print (\"Connected\\n\");\n}\ncatch (PDOException $e)\n{\n  print (\"Cannot connect to server\\n\");\n  print (\"Error code: \" . $e->getCode () . \"\\n\");\n  print (\"Error message: \" . $e->getMessage () . \"\\n\");\n}\n```", "```\ntry\n{\n  $dbh->query (\"SELECT\"); # malformed query\n}\ncatch (PDOException $e)\n{\n  print (\"Cannot execute query\\n\");\n  print (\"Error information using exception object:\\n\");\n  print (\"SQLSTATE value: \" . $e->getCode () . \"\\n\");\n  print (\"Error message: \" . $e->getMessage () . \"\\n\");\n\n  print (\"Error information using database handle:\\n\");\n  print (\"Error code: \" . $dbh->errorCode () . \"\\n\");\n  $errorInfo = $dbh->errorInfo ();\n  print (\"SQLSTATE value: \" . $errorInfo[0] . \"\\n\");\n  print (\"Error number: \" . $errorInfo[1] . \"\\n\");\n  print (\"Error message: \" . $errorInfo[2] . \"\\n\");\n}\n```", "```\nconn_params = {\n  \"database\": \"cookbook\",\n  \"host\": \"localhost\",\n  \"user\": \"baduser\",\n  \"password\": \"badpass\"\n}\n\ntry:\n  conn = mysql.connector.connect(**conn_params)\n  print(\"Connected\")\nexcept mysql.connector.Error as e:\n  print(\"Cannot connect to server\")\n  print(\"Error code: %s\" % e.errno)\n  print(\"Error message: %s\" % e.msg)\n  print(\"Error SQLSTATE: %s\" % e.sqlstate)\n```", "```\n// mysql_error.go : MySQL error handling\npackage main\n\nimport (\n    \"database/sql\"\n    \"log\"\n    \"fmt\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nvar actor string\n\nfunc main() {\n\n    db, err := sql.Open(\"mysql\", \"cbuser:cbpass!@tcp(127.0.0.1:3306)/cookbook\")\n    defer db.Close()\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = db.QueryRow(\"SELECT actor FROM actors where actor='Dwayne Johnson'\").↩\n          Scan(&actor)\n    if err != nil {\n\t    if err == sql.ErrNoRows {\n\t\t    fmt.Print(\"There were no rows, but otherwise no error occurred\")\n\t    } else {\n\t\t    fmt.Println(err.Error())\n\t    }\n    }\n    fmt.Println(actor)\n}\n```", "```\ntry\n{\n  /* ... some database operation ... */\n}\ncatch (Exception e)\n{\n  e.printStackTrace ();\n}\n```", "```\n// Error.java: demonstrate MySQL error handling\n\nimport java.sql.*;\n\npublic class Error {\n  public static void main(String[] args) {\n    Connection conn = null;\n    String url = \"jdbc:mysql://localhost/cookbook\";\n    String userName = \"baduser\";\n    String password = \"badpass\";\n\n    try {\n      conn = DriverManager.getConnection(url, userName, password);\n      System.out.println(\"Connected\");\n      tryQuery(conn);    // issue a query\n    } catch (Exception e) {\n      System.err.println(\"Cannot connect to server\");\n      System.err.println(e);\n      if (e instanceof SQLException)  // JDBC-specific exception?\n      {\n        // e must be cast from Exception to SQLException to\n        // access the SQLException-specific methods\n        printException((SQLException) e);\n      }\n    } finally {\n      if (conn != null) {\n        try {\n          conn.close ();\n          System.out.println(\"Disconnected\");\n        } catch (SQLException e) {\n          printException (e);\n        }\n      }\n    }\n  }\n\n  public static void tryQuery(Connection conn) {\n    try {\n      // issue a simple query\n      Statement s = conn.createStatement();\n      s.execute(\"USE cookbook\");\n      s.close();\n\n      // print any accumulated warnings\n      SQLWarning w = conn.getWarnings();\n      while (w != null) {\n        System.err.println(\"SQLWarning: \" + w.getMessage());\n        System.err.println(\"SQLState: \" + w.getSQLState());\n        System.err.println(\"Vendor code: \" + w.getErrorCode());\n        w = w.getNextWarning();\n      }\n    } catch (SQLException e) {\n      printException(e);\n    }\n  }\n\n  public static void printException(SQLException e) {\n    // print general message, plus any database-specific message\n    System.err.println(\"SQLException: \" + e.getMessage ());\n    System.err.println(\"SQLState: \" + e.getSQLState ());\n    System.err.println(\"Vendor code: \" + e.getErrorCode ());\n  }\n}\n```", "```\nexport PERL5LIB=/usr/local/lib/mcb\n```", "```\nPERL5LIB=/usr/local/lib/mcb\nexport PERL5LIB\n```", "```\nsetenv PERL5LIB /usr/local/lib/mcb\n```", "```\nPERL5LIB=C:\\lib\\mcb\n```", "```\n$ `php --ini`\n```", "```\ninclude_path = \"*`value`*\"\n```", "```\ninclude_path = \".:/usr/local/lib/mcb\"\n```", "```\ninclude_path = \".;C:\\lib\\mcb\"\n```", "```\n    $ `chmod 600 mylib`\n    ```", "```\n    # `chown wwwusr mylib`\n    # `chmod 600 mylib`\n    ```", "```\n    # `chmod 444 mylib`\n    ```", "```\npackage Cookbook;\n# Cookbook.pm: library file with utility method for connecting to MySQL\n# using the Perl DBI module\n\nuse strict;\nuse warnings;\nuse DBI;\n\nmy $db_name = \"cookbook\";\nmy $host_name = \"localhost\";\nmy $user_name = \"cbuser\";\nmy $password = \"cbpass\";\nmy $port_num = undef;\nmy $socket_file = undef;\n\n# Establish a connection to the cookbook database, returning a database\n# handle.  Raise an exception if the connection cannot be established.\n\nsub connect\n{\nmy $dsn = \"DBI:mysql:host=$host_name\";\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\n\n  $dsn .= \";database=$db_name\" if defined ($db_name);\n  $dsn .= \";mysql_socket=$socket_file\" if defined ($socket_file);\n  $dsn .= \";port=$port_num\" if defined ($port_num);\n\n  return DBI->connect ($dsn, $user_name, $password, $conn_attrs);\n}\n\n1;  # return true\n```", "```\n$dbh = Cookbook::connect ();\n```", "```\n$ `perl -V`\n```", "```\n#!/usr/bin/perl\n# harness.pl: test harness for Cookbook.pm library\n\nuse strict;\nuse warnings;\nuse Cookbook;\n\nmy $dbh;\neval\n{\n  $dbh = Cookbook::connect ();\n  print \"Connected\\n\";\n};\ndie \"$@\" if $@;\n$dbh->disconnect ();\nprint \"Disconnected\\n\";\n```", "```\nmy $dbh = Cookbook::connect ();\nprint \"Connected\\n\";\n$dbh->disconnect ();\nprint \"Disconnected\\n\";\n```", "```\n# Cookbook.rb: library file with utility method for connecting to MySQL\n# using the Ruby Mysql2 module\n\nrequire \"mysql2\"\n\n# Establish a connection to the cookbook database, returning a database\n# handle.  Raise an exception if the connection cannot be established.\n\nclass Cookbook\n  @@host_name = \"localhost\"\n  @@db_name = \"cookbook\"\n  @@user_name = \"cbuser\"\n  @@password = \"cbpass\"\n\n  # Class method for connecting to server to access the\n  # cookbook database; returns a database handle object.\n\n  def Cookbook.connect\n    return Mysql2::Client.new(:host => @@host_name,\n                              :database => @@db_name,\n                              :username => @@user_name, \n                              :password => @@password)\n  end\nend\n```", "```\n$ `irb`\n>> `puts $LOAD_PATH`\n```", "```\n#!/usr/bin/ruby -w\n# harness.rb: test harness for Cookbook.rb library\n\nrequire \"Cookbook\"\n\nbegin\n  client = Cookbook.connect\n  print \"Connected\\n\"\nrescue Mysql2::Error => e\n  puts \"Cannot connect to server\"\n  puts \"Error code: #{e.errno}\"\n  puts \"Error message: #{e.message}\"\n  exit(1)\nensure\n  client.close()\n  print \"Disconnected\\n\"\nend\n```", "```\nclient = Cookbook.connect\nprint \"Connected\\n\"\nclient.close\nprint \"Disconnected\\n\"\n```", "```\n<?php\n# Cookbook.php: library file with utility method for connecting to MySQL\n# using the PDO module\n\nclass Cookbook\n{\n  public static $host_name = \"localhost\";\n  public static $db_name = \"cookbook\";\n  public static $user_name = \"cbuser\";\n  public static $password = \"cbpass\";\n\n  # Establish a connection to the cookbook database, returning a database\n  # handle.  Raise an exception if the connection cannot be established.\n  # In addition, cause exceptions to be raised for errors.\n\n  public static function connect ()\n  {\n    $dsn = \"mysql:host=\" . self::$host_name . \";dbname=\" . self::$db_name;\n    $dbh = new PDO ($dsn, self::$user_name, self::$password);\n    $dbh->setAttribute (PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    return ($dbh);\n  }\n\n} # end Cookbook\n?>\n```", "```\n<?php\n# harness.php: test harness for Cookbook.php library\n\nrequire_once \"Cookbook.php\";\n\ntry\n{\n  $dbh = Cookbook::connect ();\n  print (\"Connected\\n\");\n}\ncatch (PDOException $e)\n{\n  print (\"Cannot connect to server\\n\");\n  print (\"Error code: \" . $e->getCode () . \"\\n\");\n  print (\"Error message: \" . $e->getMessage () . \"\\n\");\n  exit (1);\n}\n$dbh = NULL;\nprint (\"Disconnected\\n\");\n?>\n```", "```\n# cookbook.py: library file with utility method for connecting to MySQL\n# using the Connector/Python module\n\nimport mysql.connector\n\nconn_params = {\n  \"database\": \"cookbook\",\n  \"host\": \"localhost\",\n  \"user\": \"cbuser\",\n  \"password\": \"cbpass\",\n}\n\n# Establish a connection to the cookbook database, returning a connection\n# object.  Raise an exception if the connection cannot be established.\n\ndef connect():\n  return mysql.connector.connect(**conn_params)\n```", "```\nimport cookbook\n\nconn = cookbook.connect();\n```", "```\n$ `python`\n>>> `import sys`\n>>> `sys.path`\n```", "```\n#!/usr/bin/python\n# harness.py: test harness for cookbook.py library\n\nimport mysql.connector\nimport cookbook\n\ntry:\n  conn = cookbook.connect()\n  print(\"Connected\")\nexcept mysql.connector.Error as e:\n  print(\"Cannot connect to server\")\n  print(\"Error code: %s\" % e.errno)\n  print(\"Error message: %s\" % e.msg)\nelse:\n  conn.close()\n  print(\"Disconnected\")\n```", "```\nconn = cookbook.connect()\nprint(\"Connected\")\nconn.close()\nprint(\"Disconnected\")\n```", "```\npackage cookbook\n\nimport (\n  \"database/sql\"\n  _\"github.com/go-sql-driver/mysql\"\n)\n\nfunc Connect() (*sql.DB, error) {\n  db, err := sql.Open(\"mysql\",\"cbuser:cbpass@tcp(127.0.0.1:3306)/cookbook\")\n\n  if err != nil {\n    panic(err.Error())\n  }\n\n  err = db.Ping()\n\n  return db, err\n}\n```", "```\nimport \"../../lib\"\n```", "```\ngo mod init cookbook\n```", "```\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/svetasmirnova/mysqlcookbook/recipes/lib\"\n)\n\nfunc main() {\n  db, err := cookbook.Connect()\n\n  if err != nil {\n    fmt.Println(\"Cannot connect to server\")\n    fmt.Printf(\"Error message: %s\\n\", err.Error())\n  } else {\n    fmt.Println(\"Connected\")\n  }\n  defer db.Close()\n}\n```", "```\ngo mod init harness\n```", "```\ngo mod edit -replace ↩\ngithub.com/svetasmirnova/mysqlcookbook/recipes/lib=↩\n/home/sveta/src/mysqlcookbook/recipes/lib\n```", "```\n$ `go run harness.go`\nConnected\n```", "```\npackage com.kitebird.mcb;\n```", "```\n// Cookbook.java: library file with utility methods for connecting to MySQL\n// using MySQL Connector/J and for handling exceptions\n\npackage com.kitebird.mcb;\n\nimport java.sql.*;\n\npublic class Cookbook {\n  // Establish a connection to the cookbook database, returning\n  // a connection object.  Throw an exception if the connection\n  // cannot be established.\n\n  public static Connection connect() throws Exception {\n    String url = \"jdbc:mysql://localhost/cookbook\";\n    String user = \"cbuser\";\n    String password = \"cbpass\";\n\n    return (DriverManager.getConnection(url, user, password));\n  }\n\n  // Return an error message as a string\n\n  public static String getErrorMessage(Exception e) {\n    StringBuffer s = new StringBuffer ();\n    if (e instanceof SQLException) { // JDBC-specific exception?\n      // print general message, plus any database-specific message\n      s.append(\"Error message: \" + e.getMessage () + \"\\n\");\n      s.append(\"Error code: \" + ((SQLException) e).getErrorCode() + \"\\n\");\n    } else {\n      s.append (e + \"\\n\");\n    }\n    return (s.toString());\n  }\n\n  // Get the error message and print it to System.err\n\n  public static void printErrorMessage(Exception e) {\n    System.err.println(Cookbook.getErrorMessage(e));\n  }\n}\n```", "```\n// Harness.java: test harness for Cookbook library class\n\nimport java.sql.*;\nimport com.kitebird.mcb.Cookbook;\n\npublic class Harness {\n  public static void main(String[] args) {\n    Connection conn = null;\n    try {\n      conn = Cookbook.connect ();\n      System.out.println(\"Connected\");\n    } catch (Exception e) {\n      Cookbook.printErrorMessage (e);\n      System.exit (1);\n    } finally  {\n      if (conn != null) {\n        try {\n          conn.close();\n          System.out.println(\"Disconnected\");\n        } catch (Exception e) {\n          String err = Cookbook.getErrorMessage(e);\n          System.out.println(err);\n        }\n      }\n    }\n  }\n}\n```", "```\nCREATE TABLE profile\n(\n  id    INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  name  VARCHAR(20) NOT NULL,\n  birth DATE,\n  color ENUM('blue','red','green','brown','black','white'),\n  foods SET('lutefisk','burrito','curry','eggroll','fadge','pizza'),\n  cats  INT,\n  PRIMARY KEY (id)\n);\n```", "```\n$ `mysql cookbook < profile.sql`\n```", "```\nmysql> `SELECT * FROM profile;`\n+----+---------+------------+-------+-----------------------+------+\n| id | name    | birth      | color | foods                 | cats |\n+----+---------+------------+-------+-----------------------+------+\n|  1 | Sybil   | 1970-04-13 | black | lutefisk,fadge,pizza  |    0 |\n|  2 | Nancy   | 1969-09-30 | white | burrito,curry,eggroll |    3 |\n|  3 | Ralph   | 1973-11-02 | red   | eggroll,pizza         |    4 |\n|  4 | Lothair | 1963-07-04 | blue  | burrito,curry         |    5 |\n|  5 | Henry   | 1965-02-14 | red   | curry,fadge           |    1 |\n|  6 | Aaron   | 1968-09-17 | green | lutefisk,fadge        |    1 |\n|  7 | Joanna  | 1952-08-20 | green | lutefisk,fadge        |    0 |\n|  8 | Stephen | 1960-05-01 | white | burrito,pizza         |    0 |\n+----+---------+------------+-------+-----------------------+------+\n```", "```\n    UPDATE profile SET cats = cats+1 WHERE name = 'Sybil';\n    ```", "```\n    SELECT id, name, cats FROM profile;\n    ```", "```\nmy $count = $dbh->do (\"UPDATE profile SET cats = cats+1\n WHERE name = 'Sybil'\");\nif ($count)   # print row count if no error occurred\n{\n  $count += 0;\n  print \"Number of rows updated: $count\\n\";\n}\n```", "```\nif ($count)   # print row count if no error occurred\n{\n  printf \"Number of rows updated: %d\\n\", $count;\n}\n```", "```\nmy $count = $dbh->do (\"UPDATE profile SET cats = cats+1\n WHERE name = 'Sybil'\");\nprintf \"Number of rows updated: %d\\n\", $count;\n```", "```\nmy $sth = $dbh->prepare (\"SELECT id, name, cats FROM profile\");\n$sth->execute ();\nmy $count = 0;\nwhile (my @val = $sth->fetchrow_array ())\n{\n  print \"id: $val[0], name: $val[1], cats: $val[2]\\n\";\n  ++$count;\n}\n$sth->finish ();\nprint \"Number of rows returned: $count\\n\";\n```", "```\nwhile (my $ref = $sth->fetchrow_arrayref ())\n{\n  print \"id: $ref->[0], name: $ref->[1], cats: $ref->[2]\\n\";\n}\n```", "```\nwhile (my $ref = $sth->fetchrow_hashref ())\n{\n  print \"id: $ref->{id}, name: $ref->{name}, cats: $ref->{cats}\\n\";\n}\n```", "```\nmy @val = $dbh->selectrow_array (\"SELECT name, birth, foods FROM profile\n WHERE id = 3\");\nmy $ncols = @val;\nmy $nrows = $ncols ? 1 : 0;\n```", "```\nmy $ref = $dbh->selectrow_arrayref ($stmt);\nmy $ncols = defined ($ref) ? @{$ref} : 0;\nmy $nrows = $ncols ? 1 : 0;\n\nmy $ref = $dbh->selectrow_hashref ($stmt);\nmy $ncols = defined ($ref) ? keys (%{$ref}) : 0;\nmy $nrows = $ncols ? 1 : 0;\n```", "```\nmy $ref = $dbh->selectcol_arrayref ($stmt);\nmy $nrows = defined ($ref) ? @{$ref} : 0;\nmy $ncols = $nrows ? 1 : 0;\n```", "```\nmy $ref = $dbh->selectall_arrayref ($stmt);\nmy $nrows = defined ($ref) ? @{$ref} : 0;\nmy $ncols = $nrows ? @{$ref->[0]} : 0;\n```", "```\nmy $ref = $dbh->selectall_hashref (\"SELECT * FROM profile\", \"id\");\n```", "```\nmy @keys = defined ($ref) ? keys (%{$ref}) : ();\nmy $nrows = scalar (@keys);\nmy $ncols = $nrows ? keys (%{$ref->{$keys[0]}}) : 0;\n```", "```\nclient.query(\"UPDATE profile SET cats = cats+1 WHERE name = 'Sybil'\")\nputs \"Number of rows updated: #{client.affected_rows}\"\n```", "```\nresult = client.query(\"SELECT id, name, cats FROM profile\")\nputs \"Number of rows returned: #{client.affected_rows}\"\nputs \"Number of rows returned: #{result.count}\"\nresult.each do |row|\n  printf \"id: %s, name: %s, cats: %s\\n\", row[\"id\"], row[\"name\"], row[\"cats\"]\nend\n```", "```\n$count = $dbh->exec (\"UPDATE profile SET cats = cats+1 WHERE name = 'Sybil'\");\nprintf (\"Number of rows updated: %d\\n\", $count);\n```", "```\n$sth = $dbh->query (\"SELECT id, name, cats FROM profile\");\n$count = 0;\nwhile ($row = $sth->fetch (PDO::FETCH_NUM))\n{\n  printf (\"id: %s, name: %s, cats: %s\\n\", $row[0], $row[1], $row[2]);\n  $count++;\n}\nprintf (\"Number of rows returned: %d\\n\", $count);\n```", "```\n$dbh->setAttribute (PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);\n```", "```\n$sth->setFetchMode (PDO::FETCH_OBJ);\n```", "```\n$sth->setFetchMode (PDO::FETCH_NUM);\nforeach ($sth as $row)\n  printf (\"id: %s, name: %s, cats: %s\\n\", $row[0], $row[1], $row[2]);\n```", "```\n$rows = $sth->fetchAll (PDO::FETCH_NUM);\nforeach ($rows as $row)\n  printf (\"id: %s, name: %s, cats: %s\\n\", $row[0], $row[1], $row[2]);\n```", "```\ncursor = conn.cursor()\ncursor.execute(\"UPDATE profile SET cats = cats+1 WHERE name = 'Sybil'\")\nprint(\"Number of rows updated: %d\" % cursor.rowcount)\nconn.commit()\ncursor.close()\n```", "```\ncursor = conn.cursor()\ncursor.execute(\"SELECT id, name, cats FROM profile\")\nwhile True:\n  row = cursor.fetchone()\n  if row is None:\n    break\n  print(\"id: %s, name: %s, cats: %s\" % (row[0], row[1], row[2]))\nprint(\"Number of rows returned: %d\" % cursor.rowcount)\ncursor.close()\n```", "```\ncursor = conn.cursor()\ncursor.execute(\"SELECT id, name, cats FROM profile\")\nfor (id, name, cats) in cursor:\n  print(\"id: %s, name: %s, cats: %s\" % (id, name, cats))\nprint(\"Number of rows returned: %d\" % cursor.rowcount)\ncursor.close()\n```", "```\ncursor = conn.cursor()\ncursor.execute(\"SELECT id, name, cats FROM profile\")\nrows = cursor.fetchall()\nfor row in rows:\n  print(\"id: %s, name: %s, cats: %s\" % (row[0], row[1], row[2]))\nprint(\"Number of rows returned: %d\" % cursor.rowcount)\ncursor.close()\n```", "```\nsql := \"UPDATE profile SET cats = cats+1 WHERE name = 'Sybil'\"\nres, err := db.Exec(sql)\n\nif err != nil {\n\tpanic(err.Error())\n}\n\naffectedRows, err := res.RowsAffected()\n\nif err != nil {\n\tlog.Fatal(err)\n}\n\nfmt.Printf(\"The statement affected %d rows\\n\", affectedRows)\n```", "```\nres, err := db.Query(\"SELECT id, name, cats FROM profile\")\n\ndefer res.Close()\n\nif err != nil {\n\tlog.Fatal(err)\n}\n\nfor res.Next() {\n\n\tvar profile Profile\n\terr := res.Scan(&profile.id, &profile.name, &profile.cats)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Printf(\"%+v\\n\", profile)\n}\n```", "```\nrow := db.QueryRow(\"SELECT id, name, cats FROM profile where id=3\")\n\nvar profile Profile\nerr = row.Scan(&profile.id, &profile.name, &profile.cats)\n\nif err == sql.ErrNoRows {\n\tfmt.Println(\"No row matched!\")\n} else if err != nil {\n\tlog.Fatal(err)\n} else {\n\tfmt.Printf(\"%v\\n\", profile)\n}\n```", "```\nStatement s = conn.createStatement ();\n```", "```\nStatement s = conn.createStatement ();\nint count = s.executeUpdate(\n               \"UPDATE profile SET cats = cats+1 WHERE name = 'Sybil'\");\ns.close();   // close statement\nSystem.out.println(\"Number of rows updated: \" + count);\n```", "```\nStatement s = conn.createStatement ();\ns.executeQuery(\"SELECT id, name, cats FROM profile\");\nResultSet rs = s.getResultSet();\nint count = 0;\nwhile (rs.next ()) { // loop through rows of result set\\\n  int id = rs.getInt(1);   // extract columns 1, 2, and 3\n  String name = rs.getString(2);\n  int cats = rs.getInt(3);\n  System.out.println(\"id: \" + id\n                     + \", name: \" + name\n                     + \", cats: \" + cats);\n  ++count;\n}\nrs.close ();  // close result set\ns.close ();   // close statement\nSystem.out.println (\"Number of rows returned: \" + count);\n```", "```\nResultSet rs = s.executeQuery(\"SELECT id, name, cats FROM profile\");\n```", "```\nwhile (rs.next ()) { // loop through rows of result set\n  int id = rs.getInt(\"id\");\n  String name = rs.getString(\"name\");\n  int cats = rs.getInt(\"cats\");\n  System.out.println(\"id: \" + id\n                     + \", name: \" + name\n                     + \", cats: \" + cats);\n  ++count;\n}\n```", "```\nString id = rs.getString(\"id\");\nString name = rs.getString(\"name\");\nString cats = rs.getString(\"cats\");\nSystem.out.println(\"id: \" + id\n                   + \", name: \" + name\n                   + \", cats: \" + cats);\n```", "```\nObject id = rs.getObject(\"id\");\nObject name = rs.getObject(\"name\");\nObject cats = rs.getObject(\"cats\");\nSystem.out.println(\"id: \" + id.toString()\n                   + \", name: \" + name.toString()\n                   + \", cats: \" + cats.toString());\n```", "```\nResultSet rs = s.getResultSet();\nResultSetMetaData md = rs.getMetaData(); // get result set metadata\nint ncols = md.getColumnCount();         // get column count from metadata\n```", "```\nStatement s = conn.createStatement();\nif (s.execute(stmtStr)) {\n  // there is a result set\n  ResultSet rs = s.getResultSe();\n\n  // ... process result set here ...\n\n  rs.close();  // close result set\n} else {\n  // there is no result set, just print the row count\n  System.out.println(\"Number of rows affected: \" + s.getUpdateCount ());\n}\ns.close();   // close statement\n```", "```\nSELECT * FROM profile WHERE age > 40 AND color = 'green';\n\nINSERT INTO profile (name,color) VALUES('Gary','blue');\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('Alison','1973-01-12','blue','eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De'Mont','1973-01-12','blue','eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De''Mont','1973-01-12','blue','eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De\\'Mont','1973-01-12','blue','eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES(\"De'Mont\",'1973-01-12','blue','eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De''Mont','1973-01-12','NULL','eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De''Mont','1973-01-12',NULL,'eggroll',4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES(?,?,?,?,?);\n\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES(%s,%s,%s,%s,%s);\n```", "```\nmy $count = $dbh->do (\"INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(?,?,?,?,?)\",\n                      undef,\n                      \"De'Mont\", \"1973-01-12\", undef, \"eggroll\", 4);\n```", "```\nmy $sth = $dbh->prepare (\"INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(?,?,?,?,?)\");\nmy $count = $sth->execute (\"De'Mont\", \"1973-01-12\", undef, \"eggroll\", 4);\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De\\'Mont','1973-01-12',NULL,'eggroll','4');\n```", "```\nmy $sth = $dbh->prepare (\"SELECT * FROM profile WHERE cats > ?\");\n$sth->execute (2);\nwhile (my $ref = $sth->fetchrow_hashref ())\n{\n  print \"id: $ref->{id}, name: $ref->{name}, cats: $ref->{cats}\\n\";\n}\n```", "```\nmy $ref = $dbh->selectall_arrayref (\n  \"SELECT name, birth, foods FROM profile WHERE id > ? AND color = ?\",\n  undef, 3, \"green\"\n);\n```", "```\nmy $stmt = sprintf (\"INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(%s,%s,%s,%s,%s)\",\n                    $dbh->quote (\"De'Mont\"),\n                    $dbh->quote (\"1973-01-12\"),\n                    $dbh->quote (undef),\n                    $dbh->quote (\"eggroll\"),\n                    $dbh->quote (4));\nmy $count = $dbh->do ($stmt);\n```", "```\nsth = client.prepare(\"INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(?,?,?,?,?)\")\nsth.execute(\"De'Mont\", \"1973-01-12\", nil, \"eggroll\", 4)\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De\\'Mont','1973-01-12',NULL,'eggroll',4);\n```", "```\n$sth = $dbh->prepare (\"INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(?,?,?,?,?)\");\n$sth->execute (array (\"De'Mont\",\"1973-01-12\",NULL,\"eggroll\",4));\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De\\'Mont','1973-01-12',NULL,'eggroll','4');\n```", "```\ncursor = conn.cursor()\ncursor.execute('''\n INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(%s,%s,%s,%s,%s)\n ''', (\"De'Mont\", \"1973-01-12\", None, \"eggroll\", 4))\ncursor.close()\nconn.commit()\n```", "```\nINSERT INTO profile (name,birth,color,foods,cats)\nVALUES('De\\'Mont','1973-01-12',NULL,'eggroll',4);\n```", "```\ncursor = conn.cursor()\ncursor.execute(\"SELECT id, name, cats FROM profile WHERE cats = %s\", (2,))\nfor (id, name, cats) in cursor:\n  print(\"id: %s, name: %s, cats: %s\" % (id, name, cats))\ncursor.close()\n```", "```\nstmt := `INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(?,?,?,?,?)`\n_, err = db.Exec(stmt, \"De'Mont\", \"1973-01-12\", nil, \"eggroll\", 4)\n```", "```\npstmt, err := db.Prepare(`INSERT INTO profile (name,birth,color,foods,cats)\n VALUES(?,?,?,?,?)`)\nif err != nil {\n  log.Fatal(err)\n}\ndefer pstmt.Close()\n\n_, err = pstmt.Exec(\"De'Mont\", \"1973-01-12\", nil, \"eggroll\", 4)\n```", "```\nPreparedStatement s;\ns = conn.prepareStatement(\n            \"INSERT INTO profile (name,birth,color,foods,cats)\"\n            + \" VALUES(?,?,?,?,?)\");\ns.setString(1, \"De'Mont\");         // bind values to placeholders\ns.setString(2, \"1973-01-12\");\ns.setNull(3, java.sql.Types.CHAR);\ns.setString(4, \"eggroll\");\ns.setInt(5, 4);\ns.close();   // close statement\n```", "```\nPreparedStatement s;\ns = conn.prepareStatement(\"SELECT * FROM profile WHERE cats > ?\");\ns.setInt(1, 2);  // bind 2 to first placeholder\ns.executeQuery();\n// ... process result set here ...\ns.close();     // close statement\n```", "```\nmysql> `CREATE TABLE some table (i INT);`\nERROR 1064 (42000): You have an error in your SQL syntax near 'table (i INT)'\n```", "```\nmysql> ``CREATE TABLE `some table` (i INT);``\nQuery OK, 0 rows affected (0.04 sec)\n```", "```\nCREATE TABLE `some table` (i INT);\nCREATE TABLE \"some table\" (i INT);\n```", "``` `abc``def` ```", "```\nfunction quote_identifier ($ident)\n{\n  return ('`' . str_replace('`', '``', $ident) . '`');\n}\n```", "```\nSELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA = 'cookbook' AND TABLE_NAME = 'profile';\n```", "```\nsth = client.prepare(\"SELECT COLUMN_NAME\n FROM INFORMATION_SCHEMA.COLUMNS\n WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?\")\nnames = sth.execute(db_name, tbl_name)\n```", "```\nmysql> `INSERT INTO profile (name) VALUES('Amabel');`\nmysql> `SELECT * FROM profile WHERE name = 'Amabel';`\n+----+--------+-------+-------+-------+------+\n| id | name   | birth | color | foods | cats |\n+----+--------+-------+-------+-------+------+\n|  9 | Amabel | NULL  | NULL  | NULL  | NULL |\n+----+--------+-------+-------+-------+------+\n```", "```\nmy $sth = $dbh->prepare (\"SELECT name, birth, foods FROM profile\");\n$sth->execute ();\nwhile (my $ref = $sth->fetchrow_hashref ())\n{\n  printf \"name: %s, birth: %s, foods: %s\\n\",\n         defined ($ref->{name}) ? $ref->{name} : \"NULL\",\n         defined ($ref->{birth}) ? $ref->{birth} : \"NULL\",\n         defined ($ref->{foods}) ? $ref->{foods} : \"NULL\";\n}\n```", "```\nmy $sth = $dbh->prepare (\"SELECT name, birth, foods FROM profile\");\n$sth->execute ();\nwhile (my $ref = $sth->fetchrow_hashref ())\n{\n  map { $ref->{$_} = \"NULL\" unless defined ($ref->{$_}); } keys (%{$ref});\n  printf \"name: %s, birth: %s, foods: %s\\n\",\n         $ref->{name}, $ref->{birth}, $ref->{foods};\n}\n```", "```\nmy $sth = $dbh->prepare (\"SELECT name, birth, foods FROM profile\");\n$sth->execute ();\nwhile (my @val = $sth->fetchrow_array ())\n{\n  @val = map { defined ($_) ? $_ : \"NULL\" } @val;\n  printf \"name: %s, birth: %s, foods: %s\\n\",\n         $val[0], $val[1], $val[2];\n}\n```", "```\nresult = client.query(\"SELECT name, birth, foods FROM profile\")\nresult.each do |row|\n  printf \"name %s, birth: %s, foods: %s\\n\", \n         row[\"name\"].nil? ? \"NULL\" : row[\"name\"], \n         row[\"birth\"].nil? ? \"NULL\" : row[\"birth\"], \n         row[\"foods\"].nil? ? \"NULL\" : row[\"foods\"]\nend\n```", "```\nif ($val === NULL)\n{\n  # $val is a NULL value\n}\n```", "```\n$sth = $dbh->query (\"SELECT name, birth, foods FROM profile\");\nwhile ($row = $sth->fetch (PDO::FETCH_NUM))\n{\n  foreach (array_keys ($row) as $key)\n  {\n    if ($row[$key] === NULL)\n      $row[$key] = \"NULL\";\n  }\n  print (\"name: $row[0], birth: $row[1], foods: $row[2]\\n\");\n}\n```", "```\ncursor = conn.cursor()\ncursor.execute(\"SELECT name, birth, foods FROM profile\")\n\nfor row in cursor:\n  row = list(row)  # convert nonmutable tuple to mutable list\n\n  for i, value in enumerate(row):\n    if value is None:  # is the column value NULL?\n      row[i] = \"NULL\"\n\n  print(\"name: %s, birth: %s, foods: %s\" % (row[0], row[1], row[2]))\n\ncursor.close()\n```", "```\n// null-in-result.go : Selecting NULL values in Go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype Profile struct {\n    name     string\n    birth    sql.NullString\n    foods    sql.NullString\n}\n\nfunc main() {\n\n\tdb, err := sql.Open(\"mysql\", \"cbuser:cbpass@tcp(127.0.0.1:3306)/cookbook\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\tsql := \"SELECT name, birth, foods FROM profile\"\n\tres, err := db.Query(sql)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer res.Close()\n\n\tfor res.Next() {\n\t\tvar profile Profile\n\t\terr = res.Scan(&profile.name, &profile.birth, &profile.foods)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n        if (profile.birth.Valid && profile.foods.Valid) {\n          fmt.Printf(\"name: %s, birth: %s, foods: %s\\n\", \n                      profile.name, profile.birth.String, profile.foods.String)\n        } else if profile.birth.Valid {\n          fmt.Printf(\"name: %s, birth: %s, foods: NULL\\n\",\n                      profile.name, profile.birth.String)\n        } else if profile.foods.Valid {\n          fmt.Printf(\"name: %s, birth: NULL, foods: %s\\n\",\n                      profile.name, profile.foods.String)\n        } else {\n          fmt.Printf(\"name: %s, birth: NULL, foods: NULL\\n\",\n                      profile.name)\n        }\n\t}\n}\n```", "```\nsql := `SELECT name, \n COALESCE(birth, '') as birthday\n FROM profile WHERE id = 9`\nres, err := db.Query(sql)\ndefer res.Close()\n```", "```\nObject obj = rs.getObject (index);\nif (rs.wasNull ())\n{ /* the value's a NULL */ }\n```", "```\nStatement s = conn.createStatement();\ns.executeQuery(\"SELECT name, birth, foods FROM profile\");\nResultSet rs = s.getResultSet();\nResultSetMetaData md = rs.getMetaData();\nint ncols = md.getColumnCount();\nwhile (rs.next ()) { // loop through rows of result set\n  for (int i = 0; i < ncols; i++) { // loop through columns\n    String val = rs.getString(i+1);\n    if (i > 0)\n      System.out.print(\", \");\n    if (rs.wasNull())\n      System.out.print(\"NULL\");\n    else\n      System.out.print(val);\n  }\n  System.out.println();\n}\nrs.close();  // close result set\ns.close();   // close statement\n```", "```\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\n# basic DSN\nmy $dsn = \"DBI:mysql:database=cookbook\";\n# look in standard option files; use [cookbook] and [client] groups\n$dsn .= \";mysql_read_default_group=cookbook\";\nmy $dbh = DBI->connect ($dsn, undef, undef, $conn_attrs);\n```", "```\nmy $conn_attrs = {PrintError => 0, RaiseError => 1, AutoCommit => 1};\n# basic DSN\nmy $dsn = \"DBI:mysql:database=cookbook\";\n# look in user-specific option file owned by the current user\n$dsn .= \";mysql_read_default_file=$ENV{HOME}/.my.cnf\";\nmy $dbh = DBI->connect ($dsn, undef, undef, $conn_attrs);\n```", "```\nclient = Mysql2::Client.new(:default_group => \"cookbook\", :database => \"cookbook\")\n```", "```\nclient = Mysql2::Client.new(:default_file => \"#{ENV['HOME']}/.my.cnf\",↩\n:database => \"cookbook\")\n```", "```\nfunction read_mysql_option_file ($filename, $group_list = \"client\")\n{\n  if (is_string ($group_list))           # convert string to array\n    $group_list = array ($group_list);\n  if (!is_array ($group_list))           # hmm ... garbage argument?\n    return (FALSE);\n  $opt = array ();                       # option name/value array\n  if (!@($fp = fopen ($filename, \"r\")))  # if file does not exist,\n    return ($opt);                       # return an empty list\n  $in_named_group = 0;  # set nonzero while processing a named group\n  while ($s = fgets ($fp, 1024))\n  {\n    $s = trim ($s);\n    if (preg_match (\"/^[#;]/\", $s))              # skip comments\n      continue;\n    if (preg_match (\"/^\\[([^]]+)]/\", $s, $arg))  # option group line\n    {\n      # check whether we are in one of the desired groups\n      $in_named_group = 0;\n      foreach ($group_list as $group_name)\n      {\n        if ($arg[1] == $group_name)\n        {\n          $in_named_group = 1;    # we are in a desired group\n          break;\n        }\n      }\n      continue;\n    }\n    if (!$in_named_group)         # we are not in a desired\n      continue;                   # group, skip the line\n    if (preg_match (\"/^([^ \\t=]+)[ \\t]*=[ \\t]*(.*)/\", $s, $arg))\n      $opt[$arg[1]] = $arg[2];    # name=value\n    else if (preg_match (\"/^([^ \\t]+)/\", $s, $arg))\n      $opt[$arg[1]] = \"\";         # name only\n    # else line is malformed\n  }\n  return ($opt);\n}\n```", "```\n$opt = read_mysql_option_file (\"/home/paul/.my.cnf\");\n$dsn = \"mysql:dbname=cookbook\";\nif (isset ($opt[\"host\"]))\n  $dsn .= \";host=\" . $opt[\"host\"];\n$user = $opt[\"user\"];\n$password = $opt[\"password\"];\ntry\n{\n  $dbh = new PDO ($dsn, $user, $password);\n  print (\"Connected\\n\");\n  $dbh = NULL;\n  print (\"Disconnected\\n\");\n}\ncatch (PDOException $e)\n{\n  print (\"Cannot connect to server\\n\");\n}\n\n$opt = read_mysql_option_file (\"/etc/my.cnf\", array (\"mysqld\", \"server\"));\nforeach ($opt as $name => $value)\n  print (\"$name => $value\\n\");\n```", "```\n[client]\nuser=paul\n\n[client]\nhost=127.0.0.1\n\n[mysql]\nno-auto-rehash\n```", "```\n# this file lists parameters for connecting to the MySQL server\n[client]\nuser=cbuser\npassword=cbpass\nhost=localhost\n```", "```\nimport (\n        \"fmt\"\n        \"os\"\n        \"gopkg.in/ini.v1\"\n)\n\n// Configuration Parser\nfunc MyCnf(client string) (string, error) {\n    cfg, err := ini.LoadSources(ini.LoadOptions{AllowBooleanKeys: true}, ↩\n                                os.Getenv(\"HOME\")+\"/.my.cnf\")\n    if err != nil {\n        return \"\", err\n    }\n    for _, s := range cfg.Sections() {\n        if client != \"\" && s.Name() != client {\n            continue\n        }\n        host := s.Key(\"host\").String()\n        port := s.Key(\"port\").String()\n        dbname := s.Key(\"dbname\").String()\n        user := s.Key(\"user\").String()\n        password := s.Key(\"password\").String()\n        return fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s\", user, password, host, port, dbname),↩\n               nil\n    }\n    return \"\", fmt.Errorf(\"No matching entry found in ~/.my.cnf\")\n}\n```", "```\n// mycnf.go : Reads ~/.my.cnf file for DSN construct\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/svetasmirnova/mysqlcookbook/recipes/lib\"\n)\n\nfunc main() {\n    fmt.Println(\"Calling db.MyCnf()\")\n    var dsn string\n\n    dsn, err := cookbook.MyCnf(\"client\")\n    if err != nil {\n\t  fmt.Printf(\"error: %v\\n\", err)\n    } else {\n\t  fmt.Printf(\"DSN is: %s\\n\", dsn)\n    }\n}\n```", "```\n# this file lists parameters for connecting to the MySQL server\nuser=cbuser\npassword=cbpass\nhost=localhost\n```", "```\nimport java.sql.*;\nimport java.util.*;   // need this for properties file support\n\npublic class ReadPropsFile {\n  public static void main(String[] args) {\n    Connection conn = null;\n    String url = null;\n    String propsFile = \"Cookbook.properties\";\n    Properties props = new Properties();\n\n    try {\n      props.load(ReadPropsFile.class.getResourceAsStream(propsFile));\n    } catch (Exception e) {\n      System.err.println(\"Cannot read properties file\");\n      System.exit (1);\n    }\n    try {\n      // construct connection URL, encoding username\n      // and password as parameters at the end\n      url = \"jdbc:mysql://\"\n            + props.getProperty(\"host\")\n            + \"/cookbook\"\n            + \"?user=\" + props.getProperty(\"user\")\n            + \"&password=\" + props.getProperty(\"password\");\n      conn = DriverManager.getConnection(url);\n      System.out.println(\"Connected\");\n    } catch (Exception e) {\n      System.err.println(\"Cannot connect to server\");\n    } finally {\n      try {\n        if (conn != null) {\n          conn.close();\n          System.out.println(\"Disconnected\");\n        }\n      } catch (SQLException e) { /* ignore close errors */ }\n    }\n  }\n}\n```", "```\nString hostName = props.getProperty(\"host\", \"127.0.0.1\");\n```", "```\n$ `mysql cookbook < profile.sql`\n$ `mysql cookbook < profile2.sql`\n```"]