- en: Chapter 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join us as we explore the many perilous paths through a pod and into Kubernetes.
    See the system from an adversary’s perspective: get to know the multitudinous
    defensive approaches and their weaknesses, and revisit historical attacks on cloud
    native systems through the piratical lens of your nemesis: Dread Pirate Captain
    Hashjack.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes has grown rapidly, and has historically not been considered to be
    “secure by default.” This is mainly due to security controls such as network and
    pod security policies not being enabled by default on vanilla clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As authors we are infinitely grateful that our arc saw the *cloud native enlightenment*,
    and we extend our heartfelt thanks to the volunteers, core contributors, and [Cloud
    Native Computing Foundation (CNCF)](https://www.cncf.io) members involved in the
    vision and delivery of Kubernetes. Documentation and bug fixes don’t write themselves,
    and the incredible selfless contributions that drive open source communities have
    never been more freely given or more gratefully received.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Security controls are generally more difficult to get right than the complex
    orchestration and distributed system functionality that Kubernetes is known for.
    To the security teams especially, we thank you for your hard work! This book is
    a reflection on the pioneering voyage of the good ship Kubernetes, out on the
    choppy and dangerous free seas of the internet.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Scene
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purposes of imaginative immersion: you have just become the chief information
    security officer (CISO) of the start-up freight company *Boats, Cranes & Trains
    Logistics*, herein referred to as BCTL, which has just completed its Kubernetes
    migration.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![captain](Images/haku_0000.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: The company has been hacked before and is “taking security seriously.” You have
    the authority to do what needs to be done to keep the company afloat, figuratively
    and literally.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the job! It’s your first day, and you have been alerted to a credible
    threat against your cloud systems. Container-hungry pirate and generally bad egg
    Captain Hashjack and their clandestine hacker crew are lining up for a raid on
    BCTL’s Kubernetes clusters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: If they gain access, they’ll mine Bitcoin or cryptolock any valuable data they
    can find. You have not yet threat modeled your clusters and applications, or hardened
    them against this kind of adversary, and so we will guide you on your journey
    to defend them from the salty Captain’s voyage to encode, exfiltrate, or plunder
    whatever valuables they can find.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The BCTL cluster is a vanilla Kubernetes installation using [kubeadm](https://oreil.ly/ONVP7)
    on a public cloud provider. Initially, all settings are at the defaults.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Historical examples of marine control system instability can be seen in the
    film *Hackers* (1995), where *Ellingson Mineral Company*’s oil tankers fall victim
    to an internal attack by the company’s CISO, [Eugene “The Plague” Belford](https://oreil.ly/F28aj).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate hardening a cluster, we’ll use an example insecure system. It’s
    managed by the BCTL site reliability engineering (SRE) team, which means the team
    is responsible for securing the Kubernetes master nodes. This increases the potential
    attack surface of the cluster: a managed service hosts the control plane (master
    nodes and `etcd`) separately, and their hardened configuration prevents some attacks
    (like a direct `etcd` compromise), but both approaches depend on the secure configuration
    of the cluster to protect your workloads.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s talk about your cluster. The nodes run in a private network segment,
    so public (internet) traffic cannot reach them directly. Public traffic to your
    cluster is proxied through an internet-facing load balancer: this means that the
    ports on your nodes are not directly accessible to the world unless targeted by
    the load balancer.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Running on the cluster there is a SQL datastore, as well as a frontend, API,
    and batch processor.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The hosted application—a booking service for your company’s clients—is deployed
    in a single namespace using GitOps, but without a network policy or pod security
    policy as discussed in [Chapter 8](ch08.xhtml#ch-policy).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'GitOps is declarative configuration deployment for applications: think of it
    like traditional configuration management for Kubernetes clusters. You can read
    more at [gitops.tech](https://oreil.ly/y36d0) and learn more on how to harden
    Git for GitOps in [this whitepaper](https://oreil.ly/bJgjL).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-1](#system-architecture-insecure) shows a network diagram of the
    system.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![System architecture diagram](Images/haku_0101.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. The system architecture of your new company, BCTL
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The cluster’s RBAC was configured by engineers who have since moved on. The
    inherited security support services have intrusion detection and hardening, but
    the team has been disabling them from time to time as they were “making too much
    noise.” We will discuss this configuration in depth as we press on with the voyage.
    But first, let’s explore how to predict security threats to your clusters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Starting to Threat Model
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding how a system is attacked is fundamental to defending it. A threat
    model gives you a more complete understanding of a complex system, and provides
    a framework for rationalising security and risk. Threat actors categorize the
    potential adversaries that a system is configured to defend against.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A threat model is like a fingerprint: every one is different. A threat model
    is based upon the impact of a system’s compromise: a Raspberry Pi hobby cluster
    and your bank’s clusters hold different data, have different potential attackers,
    and very different potential problems if broken into.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling can reveal insights into your security program and configuration,
    but it doesn’t solve everything—see Mark Manning’s comments on CVEs in [Figure 1-2](#tweet-mark-manning).
    You should make sure you are following basic security hygiene (like patching and
    testing) before considering the more advanced and technical attacks that a threat
    model may reveal. The same is true for any security advice.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Mark Manning on CVEs](Images/haku_0102.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. Mark Manning’s insight on vulnerability assessment and CVEs
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your systems can be compromised by published CVEs and a copy of [Kali Linux](https://www.kali.org),
    a threat model will not help you!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Threat Actors
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your threat actors are either *casual* or *motivated*. Casual adversaries include:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Vandals (the graffiti kids of the internet generation)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accidental trespassers looking for treasure (which is usually your data)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drive-by “script kiddies,” who will run any code they find on the internet if
    it claims to help them hack
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Casual attackers shouldn’t be a concern to most systems that are patched and
    well configured.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Motivated individuals are the ones you should worry about. They include insiders
    like trusted employees, organized crime syndicates operating out of less-well-policed
    states, and state-sponsored actors, who may overlap with organized crime or sponsor
    it directly. “Internet crimes” are not well-covered by international laws and
    can be hard to police.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 1-1](#pod-taxonomy-of-threat-actors) can be used as a guide threat modeling.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-1\. Taxonomy of threat actors
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '| Actor | Motivation | Capability | Sample attacks |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| Vandal: script kiddie, trespasser | Curiosity, personal fame.Fame from bringing
    down service or compromising confidential dataset of a high-profile company. |
    Uses publicly available tools and applications (Nmap, Metasploit, CVE PoCs). Some
    experimentation. Attacks are poorly concealed. Low level of targeting. | Small-scale
    DOS.Plants trojans.Launches prepackaged exploits for access, crypto mining. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| Motivated individual: political activist, thief, terrorist | Personal, political,
    or ideological gain.Personal gain to be had from exfiltrating and selling large
    amounts of personal data for fraud, perhaps achieved through manipulating code
    in version control or artifact storage, or exploiting vulnerable applications
    from knowledge gained in ticketing and wiki systems, OSINT, or other parts of
    the system.Personal kudos from DDOS of large public-facing web service.Defacement
    of the public-facing services through manipulation of code in version control
    or public servers can spread political messages amongst a large audience. | May
    combine publicly available exploits in a targeted fashion. Modify open source
    supply chains. Concealing attacks of minimal concern. | Phishing.DDOS.Exploit
    known vulnerabilities to obtain sensitive data from systems for profit and intelligence
    or to deface websites.Compromise open source projects to embed code to exfiltrate
    environment variables and Secrets when code is run by users. Exported values are
    used to gain system access and perform crypto mining. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| Insider: employee, external contractor, temporary worker | Discontent, profit.Personal
    gain to be had from exfiltrating and selling large amounts of personal data for
    fraud, or making small alterations to the integrity of data in order to bypass
    authentication for fraud.Encrypt data volumes for ransom. | Detailed knowledge
    of the system, understands how to exploit it, conceals actions. | Uses privileges
    to exfiltrate data (to sell on).Misconfiguration/”codebombs” to take service down
    as retribution. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| Organized crime: syndicates, state-affiliated groups | Ransom, mass extraction
    of PII/credentials/PCI data.Manipulation of transactions for financial gain.High
    level of motivation to access datasets or modify applications to facilitate large-scale
    fraud.Crypto-ransomware, e.g., encrypt data volumes and demand cash. | Ability
    to devote considerable resources, hire “authors” to write tools and exploits required
    for their means. Some ability to bribe/coerce/intimidate individuals. Level of
    targeting varies. Conceals until goals are met. | Social engineering/phishing.Ransomware
    (becoming more targeted).Cryptojacking.RATs (in decline).Coordinated attacks using
    multiple exploits, possibly using a single zero-day or assisted by a rogue individual
    to pivot through infrastructure (e.g., Carbanak). |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| Cloud service insider: employee, external contractor, temporary worker |
    Personal gain, curiosity.Unknown level of motivation, access to data should be
    restricted by cloud provider’s segregation of duties and technical controls. |
    Depends on segregation of duties and technical controls within cloud provider.
    | Access to or manipulation of datastores. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| Foreign Intelligence Services (FIS): nation states | Intelligence gathering,
    disrupt critical national infrastructure, unknown.May steal intellectual property,
    access sensitive systems, mine personal data en masse, or track down specific
    individuals through location data held by the system. | Disrupt or modify hardware/software
    supply chains. Ability to infiltrate organizations/suppliers, call upon research
    programs, develop multiple zero-days. Highly targeted. High levels of concealment.
    | Stuxnet (multiple zero-days, infiltration of 3 organizations including 2 PKI
    infrastructures with offline root CAs).SUNBURST (targeted supply chain attack,
    infiltration of hundreds of organizations). |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Threat actors can be a hybrid of different categories. Eugene Belford, for example,
    was an insider who used advanced organized crime methods.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Captain Hashjack is a motivated criminal adversary with extortion or robbery
    in mind. We don’t approve of their tactics—they don’t play fair, and they are
    a cad and a bounder—so we shall do our utmost to thwart their unwelcome interventions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The pirate crew has been scouting for any advantageous information they can
    find online, and have already performed reconnaissance against BCTL. Using open
    source intelligence (OSINT) techniques like searching job postings and LinkedIn
    skills of current staff, they have identified technologies in use at the organization.
    They know you use Kubernetes, and they can guess which version you started on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Your First Threat Model
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To threat model a Kubernetes cluster, you start with an architecture view of
    the system as shown in [Figure 1-3](#intro-cluster-attack-vectors). Gather as
    much information as possible to keep everybody aligned, but there’s a balance:
    ensure you don’t overwhelm people with too much information.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Example Kubernetes attack vectors](Images/haku_0103.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. Example Kubernetes attack vectors ([Aqua](https://oreil.ly/3b3ql))
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can learn more about threat modeling Kubernetes with ControlPlane’s O’Reilly
    course: [Kubernetes Threat Modeling](https://oreil.ly/Aomcl).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: This initial diagram might show the entire system, or you may choose to scope
    only one small or important area such as a particular pod, nodes, or the control
    plane.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'A threat model’s “scope” is its target: the parts of the system we’re currently
    most interested in.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Next, you zoom in on your scoped area. Model the data flows and trust boundaries
    between components in a data flow diagram like [Figure 1-3](#intro-cluster-attack-vectors).
    When deciding on trust boundaries, think about how Captain Hashjack might try
    to attack components.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: An exhaustive list of possibilities is better than a partial list of feasibilities.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adam Shostack, *Threat Modeling*
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you know who you are defending against, you can enumerate some high-level
    threats against the system and start to check if your security configuration is
    suitable to defend against them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate possible threats you must internalize the attacker mindset: emulate
    their instincts and preempt their tactics. The humble data flow diagram in [Figure 1-4](#intro-k8s-dfd)
    is the defensive map of your silicon fortress, and it must be able to withstand
    Hashjack and their murky ilk.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Kubernetes data flow diagram](Images/haku_0104.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. Kubernetes data flow diagram ([GitHub](https://oreil.ly/J8INO))
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Threat modeling should be performed with as many stakeholders as possible (development,
    operations, QA, product, business stakeholders, security) to ensure diversity
    of thought.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: You should try to build the first version of a threat model without outside
    influence to allow fluid discussion and organic idea generation. Then you can
    pull in external sources to cross-check the group’s thinking.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have all the information you can gather on your system, you brainstorm.
    Think of simplicity, deviousness, and cunning. Any conceivable attack is in scope,
    and you will judge the likelihood of the attack separately. Some people like to
    use scores and weighted numbers for this, others prefer to rationalize the attack
    paths instead.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Capture your thoughts in a spreadsheet, mindmap, a list, or however makes sense
    to you. There are no rules, only trying, learning, and iterating on your own version
    of the process. Try to categorize threats, and make sure you can review your captured
    data easily. Once you’ve done the first pass, consider what you’ve missed and
    have a quick second pass.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you’ve generated your initial threats—good job! Now it’s time to plot
    them on a graph so they’re easier to understand. This is the job of an attack
    tree: the pirate’s treasure map.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Attack Trees
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An attack tree shows potential infiltration vectors. [Figure 1-5](#intro-k8s-attack-tree)
    models how to take down the Kubernetes control plane.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Attack trees can be complex and span multiple pages, so you can start small
    like this branch of reduced scope.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'This attack tree focuses on denial of service (DoS), which prevents (“denies”)
    access to the system (“service”). The attacker’s goal is at the top of the diagram,
    and the routes available to them start at the root (bottom) of the tree. The key
    on the left shows the shapes required for logical “OR” and “AND” nodes to be fulfilled,
    which build up to the top of the tree: the negative outcome. Confusingly, attack
    trees can be bottom-up or top-down: in this book we exclusively use bottom-up.
    We walk through attack trees later in this chapter.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Kubernetes attack tree](Images/haku_0105.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Figure 1-5\. Kubernetes attack tree ([GitHub](https://oreil.ly/J8INO))
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Kelly Shortridge](https://oreil.ly/BnOKx)’s in-browser security decision tree
    tool [Deciduous](https://oreil.ly/qALgH) can be used to generate these attack
    trees as code.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: As we progress through the book, we’ll use these techniques to identify high-risk
    areas of Kubernetes and consider the impact of successful attacks.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A YAML deserialization *Billion laughs* attack in [CVE-2019-11253](https://oreil.ly/8BOcs)
    affected Kubernetes to v1.16.1 by attacking the API server. It’s not covered on
    this attack tree as it’s patched, but adding historical attacks to your attack
    trees is a useful way to acknowledge their threat if you think there’s a high
    chance they’ll reoccur in your system.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Example Attack Trees
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s also useful to draw attack trees to conceptualize how the system may be
    attacked and make the controls easier to reason about. Fortunately, our initial
    threat model contains some useful examples.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: These diagrams use a simple legend, described in [Figure 1-6](#pod-attack-tree-legend).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![Attack Tree Legend](Images/haku_0106.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Figure 1-6\. Attack tree legend
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The “Goal” is an attacker’s objective, and what we are building the attack tree
    to understand how to prevent.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: The logical “AND” and “OR” gates define which of the child nodes need completing
    to progress through them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 1-7](#pod-attack-tree-compromised-container) you see an attack tree
    starting with a threat actor’s remote code execution in a container.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Attack Tree: Compromised Container](Images/haku_0107.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-7\. Attack tree: compromised container'
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You now know what you want to protect against and have some simple attack trees,
    so you can quantify the controls you want to use.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Prior Art
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, your team has generated a list of threats. We can now cross-reference
    them against some commonly used threat modeling techniques and attack data:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[STRIDE](https://oreil.ly/M9rEq) (framework to enumerate possible threats)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Microsoft Kubernetes Threat Matrix](https://oreil.ly/YUaS3)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MITRE ATT&CK® Matrix for Containers](https://oreil.ly/IV2TO)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OWASP Docker Top 10](https://oreil.ly/1EySd)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is also a good time to draw on preexisting, generalized threat models
    that may exist:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[Trail of Bits](https://oreil.ly/EcBuQ) and [Atredis Partners](https://oreil.ly/p6yeJ)
    [Kubernetes Threat Model](https://oreil.ly/qNvIm) for the Kubernetes Security
    Audit Working Group (now [SIG-security](https://oreil.ly/i8Yy0)) and [associated
    security findings](https://oreil.ly/3WTvR), examining the Kubernetes codebase
    and how to attack the orchestrator'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ControlPlane’s](https://oreil.ly/nrx8O) [Kubernetes Threat Model and Attack
    Trees](https://oreil.ly/L640h) for the [CNCF Financial Services User Group](https://oreil.ly/ETgu4),
    considering a user’s usage and hardened configuration of Kubernetes'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NCC’s](https://oreil.ly/HOeio) [Threat Model and Controls](https://oreil.ly/J6VxA)
    looking at system configuration'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No threat model is ever complete. It is a point-in-time best effort from your
    stakeholders and should be regularly revised and updated, as the architecture,
    software, and external threats will continually change.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Software is never finished. You can’t just stop working on it. It is part of
    an ecosystem that is moving.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Moxie Marlinspike
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you are equipped with the basics: you know your adversary, Captain Hashjack,
    and their capabilities. You understand what a threat model is, why it’s essential,
    and how to get to the point where you have a 360° view on your system. In this
    chapter we further discussed threat actors and attack trees and walked through
    a concrete example. We have a model in mind now so we’ll explore each of the main
    Kubernetes areas of interest. Let’s jump into the deep end: we start with the
    pod.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经掌握了基础知识：你了解你的对手，哈希杰克船长，以及他们的能力。你理解了威胁模型是什么，为什么它是至关重要的，以及如何达到全面了解系统的角度。在这一章中，我们进一步讨论了威胁行为者和攻击树，并通过一个具体的例子进行了演示。我们现在心中有了一个模型，所以我们将探索主要的
    Kubernetes 领域的每一个方面。让我们一跃而下：我们从 Pod 开始。
