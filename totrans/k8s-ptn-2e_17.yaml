- en: Chapter 14\. Self Awareness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some applications need to be self-aware and require information about themselves.
    The *Self Awareness* pattern describes the Kubernetes *downward API* that provides
    a simple mechanism for introspection and metadata injection to applications.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the majority of use cases, cloud native applications are stateless and disposable
    without an identity relevant to other applications. However, sometimes even these
    kinds of applications need to have information about themselves and the environment
    they are running in. That may include information known only at runtime, such
    as the Pod name, Pod IP address, and the hostname on which the application is
    placed. Or, other static information defined at Pod level such as the specific
    resource requests and limits, or some dynamic information such as annotations
    and labels that could be altered by the user at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: For example, depending on the resources made available to the container, you
    may want to tune the application thread-pool size, or change the garbage collection
    algorithm or memory allocation. You may want to use the Pod name and the hostname
    while logging information, or while sending metrics to a central server. You may
    want to discover other Pods in the same namespace with a specific label and join
    them into a clustered application. For these and other use cases, Kubernetes provides
    the downward API.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The requirements that we’ve described and the following solution are not specific
    only to containers but are present in any dynamic environment where the metadata
    of resources changes. For example, AWS offers Instance Metadata and User Data
    services that can be queried from any EC2 instance to retrieve metadata about
    the EC2 instance itself. Similarly, AWS ECS provides APIs that can be queried
    by the containers and retrieve information about the container cluster.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes approach is even more elegant and easier to use. The *downward
    API* allows you to pass metadata about the Pod to the containers and the cluster
    through environment variables and files. These are the same mechanisms we used
    for passing application-related data from ConfigMaps and Secrets. But in this
    case, the data is not created by us. Instead, we specify the keys that interest
    us, and Kubernetes populates the values dynamically. [Figure 14-1](#img-introspector)
    gives an overview of how the downward API injects resource and runtime information
    into interested Pods.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application introspection mechanisms](assets/kup2_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. Application introspection mechanisms
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The main point here is that with the downward API, the metadata is injected
    into your Pod and made available locally. The application does not need to use
    a client and interact with the Kubernetes API and can remain Kubernetes-agnostic.
    Let’s see how easy it is to request metadata through environment variables in
    [Example 14-1](#ex-downward-api).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-1\. Environment variables from downward API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_self_awareness_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The environment variable `POD_IP` is set from the properties of this Pod and
    comes into existence at Pod startup time.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_self_awareness_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The environment variable `MEMORY_LIMIT` is set to the value of the memory resource
    limit of this container; the actual limit declaration is not shown here.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we use `fieldRef` to access Pod-level metadata. The keys shown
    in [Table 14-1](#table-downward-api-field-ref) are available for `fieldRef.fieldPath`
    both as environment variables and `downwardAPI` volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-1\. Downward API information available in `fieldRef.fieldPath`
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `spec.nodeName` | Name of node hosting the Pod |'
  prefs: []
  type: TYPE_TB
- en: '| `status.hostIP` | IP address of node hosting the Pod |'
  prefs: []
  type: TYPE_TB
- en: '| `metadata.name` | Pod name |'
  prefs: []
  type: TYPE_TB
- en: '| `metadata.namespace` | Namespace in which the Pod is running |'
  prefs: []
  type: TYPE_TB
- en: '| `status.podIP` | Pod IP address |'
  prefs: []
  type: TYPE_TB
- en: '| `spec.serviceAccountName` | ServiceAccount that is used for the Pod |'
  prefs: []
  type: TYPE_TB
- en: '| `metadata.uid` | Unique ID of the Pod |'
  prefs: []
  type: TYPE_TB
- en: '| `metadata.labels[''*key*'']` | Value of the Pod’s label *key* |'
  prefs: []
  type: TYPE_TB
- en: '| `metadata.annotations[''*key*'']` | Value of the Pod’s annotation *key* |'
  prefs: []
  type: TYPE_TB
- en: As with `fieldRef`, we use `resourceFieldRef` to access metadata specific to
    a container’s resource specification belonging to the Pod. This metadata is specific
    to a container and is specified with `resourceFieldRef.container`. When used as
    an environment variable, by default the current container is used. Possible keys
    for `resourceFieldRef.resource` are shown in [Table 14-2](#table-downward-api-resourcefield-ref).
    Resource declarations are explained in [Chapter 2, “Predictable Demands”](ch02.html#PredictableDemands).
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-2\. Downward API information available in `resourceFieldRef.resource`
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `requests.cpu` | A container’s CPU request |'
  prefs: []
  type: TYPE_TB
- en: '| `limits.cpu` | A container’s CPU limit |'
  prefs: []
  type: TYPE_TB
- en: '| `requests.memory` | A container’s memory request |'
  prefs: []
  type: TYPE_TB
- en: '| `limits.memory` | A container’s memory limit |'
  prefs: []
  type: TYPE_TB
- en: '| `requests.hugepages-<size>` | A container’s hugepages request (e.g., `requests.hugepages-1Gi`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `limits.hugepages-<size>` | A container’s hugepages limit (e.g., `limits.hugepages-1Gi`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `requests.ephemeral-storage` | A container’s ephemeral-storage request |'
  prefs: []
  type: TYPE_TB
- en: '| `limits.ephemeral-storage` | A container’s ephemeral-storage limit |'
  prefs: []
  type: TYPE_TB
- en: A user can change certain metadata such as labels and annotations while a Pod
    is running. Unless the Pod is restarted, environment variables will not reflect
    such a change. But `downwardAPI` volumes can reflect updates to labels and annotations.
    In addition to the individual fields described previously, `downwardAPI` volumes
    can capture all Pod labels and annotations into files with `metadata.labels` and
    `metadata.annotations` references. [Example 14-2](#ex-downward-api-2) shows how
    such volumes can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-2\. Downward API through volumes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_self_awareness_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Values from the downward API can be mounted as files into the Pod.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_self_awareness_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The file `labels` contain all labels, line by line, in the format `name=value`.
    This file gets updated when labels are changing.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_self_awareness_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The `annotations` file holds all annotations in the same format as the labels.
  prefs: []
  type: TYPE_NORMAL
- en: With volumes, if the metadata changes while the Pod is running, it is reflected
    in the volume files. But it is still up to the consuming application to detect
    the file change and read the updated data accordingly. If such a functionality
    is not implemented in the application, a Pod restart still might be required.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, an application needs to be self-aware and have information about itself
    and the environment in which it is running. Kubernetes provides nonintrusive mechanisms
    for introspection and metadata injection. One of the downsides of the downward
    API is that it offers a fixed number of keys that can be referenced. If your application
    needs more data, especially about other resources or cluster-related metadata,
    it has to be queried on the API Server. This technique is used by many applications
    that query the API Server to discover other Pods in the same namespace that have
    certain labels or annotations. Then the application may form a cluster with the
    discovered Pods and sync state. It is also used by monitoring applications to
    discover Pods of interest and then start instrumenting them.
  prefs: []
  type: TYPE_NORMAL
- en: Many client libraries are available for different languages to interact with
    the Kubernetes API Server to obtain more self-referring information that goes
    beyond what the downward API provides.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Self Awareness Example](https://oreil.ly/fHu1O)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AWS EC2: Instance Metadata and User Data](https://oreil.ly/iCwPr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Expose Pod Information to Containers Through Files](https://oreil.ly/qe2Gc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Expose Pod Information to Containers Through Environment Variables](https://oreil.ly/bZrtR)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Downward API: Available Fields](https://oreil.ly/Jh4zf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
