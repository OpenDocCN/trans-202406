- en: Chapter 14\. Self Awareness
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章 自我意识
- en: Some applications need to be self-aware and require information about themselves.
    The *Self Awareness* pattern describes the Kubernetes *downward API* that provides
    a simple mechanism for introspection and metadata injection to applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序需要自我意识，并需要关于自身的信息。*自我意识*模式描述了Kubernetes *向下API*，为应用程序提供了一种简单的内省和元数据注入机制。
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: For the majority of use cases, cloud native applications are stateless and disposable
    without an identity relevant to other applications. However, sometimes even these
    kinds of applications need to have information about themselves and the environment
    they are running in. That may include information known only at runtime, such
    as the Pod name, Pod IP address, and the hostname on which the application is
    placed. Or, other static information defined at Pod level such as the specific
    resource requests and limits, or some dynamic information such as annotations
    and labels that could be altered by the user at runtime.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数用例，云原生应用程序是无状态且可丢弃的，没有与其他应用程序相关的身份。然而，有时甚至这些类型的应用程序也需要有关自身及其运行环境的信息。这可能包括仅在运行时已知的信息，如Pod名称、Pod
    IP地址和应用程序所在的主机名。或者，在Pod级别定义的其他静态信息，例如特定资源请求和限制，或者用户在运行时可能更改的注解和标签等动态信息。
- en: For example, depending on the resources made available to the container, you
    may want to tune the application thread-pool size, or change the garbage collection
    algorithm or memory allocation. You may want to use the Pod name and the hostname
    while logging information, or while sending metrics to a central server. You may
    want to discover other Pods in the same namespace with a specific label and join
    them into a clustered application. For these and other use cases, Kubernetes provides
    the downward API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，根据容器提供的资源，您可能希望调整应用程序线程池大小，或更改垃圾收集算法或内存分配。您可能希望在记录信息或将指标发送到中央服务器时使用Pod名称和主机名。您可能希望发现同一命名空间中具有特定标签的其他Pod，并将它们加入到集群应用程序中。对于这些和其他用例，Kubernetes提供了向下API。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: The requirements that we’ve described and the following solution are not specific
    only to containers but are present in any dynamic environment where the metadata
    of resources changes. For example, AWS offers Instance Metadata and User Data
    services that can be queried from any EC2 instance to retrieve metadata about
    the EC2 instance itself. Similarly, AWS ECS provides APIs that can be queried
    by the containers and retrieve information about the container cluster.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述的要求及其后续解决方案不仅适用于容器，而且存在于任何资源元数据动态变化的环境中。例如，AWS提供实例元数据和用户数据服务，可以从任何EC2实例查询EC2实例本身的元数据。同样，AWS
    ECS提供API，容器可以查询并检索有关容器集群的信息。
- en: The Kubernetes approach is even more elegant and easier to use. The *downward
    API* allows you to pass metadata about the Pod to the containers and the cluster
    through environment variables and files. These are the same mechanisms we used
    for passing application-related data from ConfigMaps and Secrets. But in this
    case, the data is not created by us. Instead, we specify the keys that interest
    us, and Kubernetes populates the values dynamically. [Figure 14-1](#img-introspector)
    gives an overview of how the downward API injects resource and runtime information
    into interested Pods.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的方法更加优雅且易于使用。*向下API*允许您通过环境变量和文件将有关Pod的元数据传递给容器和集群。这些是我们用于从ConfigMaps和Secrets传递应用程序相关数据的相同机制。但在这种情况下，数据不是我们创建的。相反，我们指定我们感兴趣的键，Kubernetes动态填充值。[图 14-1](#img-introspector)
    概述了向下API如何将资源和运行时信息注入到感兴趣的Pod中。
- en: '![Application introspection mechanisms](assets/kup2_1401.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序内省机制](assets/kup2_1401.png)'
- en: Figure 14-1\. Application introspection mechanisms
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-1 应用程序内省机制
- en: The main point here is that with the downward API, the metadata is injected
    into your Pod and made available locally. The application does not need to use
    a client and interact with the Kubernetes API and can remain Kubernetes-agnostic.
    Let’s see how easy it is to request metadata through environment variables in
    [Example 14-1](#ex-downward-api).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要观点是，通过向下API，元数据被注入到您的Pod中，并在本地提供。应用程序无需使用客户端与Kubernetes API交互，可以保持对Kubernetes的不可知状态。让我们看看如何通过环境变量在[示例 14-1](#ex-downward-api)中请求元数据是多么简单。
- en: Example 14-1\. Environment variables from downward API
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-1 环境变量来自向下API
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_self_awareness_CO1-1)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_self_awareness_CO1-1)'
- en: The environment variable `POD_IP` is set from the properties of this Pod and
    comes into existence at Pod startup time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量 `POD_IP` 是从此 Pod 的属性设置的，并在 Pod 启动时出现。
- en: '[![2](assets/2.png)](#co_self_awareness_CO1-2)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_self_awareness_CO1-2)'
- en: The environment variable `MEMORY_LIMIT` is set to the value of the memory resource
    limit of this container; the actual limit declaration is not shown here.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将环境变量 `MEMORY_LIMIT` 设置为此容器的内存资源限制的值；实际限制声明未在此处显示。
- en: In this example, we use `fieldRef` to access Pod-level metadata. The keys shown
    in [Table 14-1](#table-downward-api-field-ref) are available for `fieldRef.fieldPath`
    both as environment variables and `downwardAPI` volumes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用 `fieldRef` 访问 Pod 级别的元数据。`fieldRef.fieldPath` 中显示的键既可用作环境变量，也可用作
    `downwardAPI` 卷。
- en: Table 14-1\. Downward API information available in `fieldRef.fieldPath`
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Table 14-1\. `fieldRef.fieldPath` 中可用的 Downward API 信息
- en: '| Name | Description |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| Name | Description |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `spec.nodeName` | Name of node hosting the Pod |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `spec.nodeName` | 托管 Pod 的节点名称 |'
- en: '| `status.hostIP` | IP address of node hosting the Pod |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `status.hostIP` | 托管 Pod 的节点的 IP 地址 |'
- en: '| `metadata.name` | Pod name |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `metadata.name` | Pod 名称 |'
- en: '| `metadata.namespace` | Namespace in which the Pod is running |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `metadata.namespace` | Pod 所在的命名空间 |'
- en: '| `status.podIP` | Pod IP address |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `status.podIP` | Pod IP 地址 |'
- en: '| `spec.serviceAccountName` | ServiceAccount that is used for the Pod |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `spec.serviceAccountName` | Pod 使用的 ServiceAccount |'
- en: '| `metadata.uid` | Unique ID of the Pod |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `metadata.uid` | Pod 的唯一标识符 |'
- en: '| `metadata.labels[''*key*'']` | Value of the Pod’s label *key* |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `metadata.labels[''*key*'']` | Pod 标签 *key* 的值 |'
- en: '| `metadata.annotations[''*key*'']` | Value of the Pod’s annotation *key* |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `metadata.annotations[''*key*'']` | Pod 注释 *key* 的值 |'
- en: As with `fieldRef`, we use `resourceFieldRef` to access metadata specific to
    a container’s resource specification belonging to the Pod. This metadata is specific
    to a container and is specified with `resourceFieldRef.container`. When used as
    an environment variable, by default the current container is used. Possible keys
    for `resourceFieldRef.resource` are shown in [Table 14-2](#table-downward-api-resourcefield-ref).
    Resource declarations are explained in [Chapter 2, “Predictable Demands”](ch02.html#PredictableDemands).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `fieldRef` 类似，我们使用 `resourceFieldRef` 来访问属于 Pod 的容器资源规范的元数据。这些元数据特定于容器，并且使用
    `resourceFieldRef.container` 指定。当作为环境变量使用时，默认使用当前容器。`resourceFieldRef.resource`
    的可能键显示在 [Table 14-2](#table-downward-api-resourcefield-ref) 中。资源声明在 [Chapter 2,
    “Predictable Demands”](ch02.html#PredictableDemands) 中解释。
- en: Table 14-2\. Downward API information available in `resourceFieldRef.resource`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Table 14-2\. `resourceFieldRef.resource` 中可用的 Downward API 信息
- en: '| Name | Description |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Name | Description |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `requests.cpu` | A container’s CPU request |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `requests.cpu` | 容器的 CPU 请求 |'
- en: '| `limits.cpu` | A container’s CPU limit |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `limits.cpu` | 容器的 CPU 限制 |'
- en: '| `requests.memory` | A container’s memory request |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `requests.memory` | 容器的内存请求 |'
- en: '| `limits.memory` | A container’s memory limit |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `limits.memory` | 容器的内存限制 |'
- en: '| `requests.hugepages-<size>` | A container’s hugepages request (e.g., `requests.hugepages-1Gi`)
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `requests.hugepages-<size>` | 容器的巨页请求（例如，`requests.hugepages-1Gi`） |'
- en: '| `limits.hugepages-<size>` | A container’s hugepages limit (e.g., `limits.hugepages-1Gi`)
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `limits.hugepages-<size>` | 容器的巨页限制（例如，`limits.hugepages-1Gi`） |'
- en: '| `requests.ephemeral-storage` | A container’s ephemeral-storage request |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `requests.ephemeral-storage` | 容器的临时存储请求 |'
- en: '| `limits.ephemeral-storage` | A container’s ephemeral-storage limit |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `limits.ephemeral-storage` | 容器的临时存储限制 |'
- en: A user can change certain metadata such as labels and annotations while a Pod
    is running. Unless the Pod is restarted, environment variables will not reflect
    such a change. But `downwardAPI` volumes can reflect updates to labels and annotations.
    In addition to the individual fields described previously, `downwardAPI` volumes
    can capture all Pod labels and annotations into files with `metadata.labels` and
    `metadata.annotations` references. [Example 14-2](#ex-downward-api-2) shows how
    such volumes can be used.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以在 Pod 运行时更改某些元数据，如标签和注释。除非重启 Pod，否则环境变量不会反映这样的更改。但是 `downwardAPI` 卷可以反映标签和注释的更新。除了前面描述的各个字段之外，`downwardAPI`
    卷还可以将所有 Pod 标签和注释捕获到具有 `metadata.labels` 和 `metadata.annotations` 引用的文件中。 [Example 14-2](#ex-downward-api-2)
    展示了如何使用这样的卷。
- en: Example 14-2\. Downward API through volumes
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 14-2\. 通过卷使用 Downward API
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_self_awareness_CO2-1)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_self_awareness_CO2-1)'
- en: Values from the downward API can be mounted as files into the Pod.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从向下 API 获取的值可以作为文件挂载到 Pod 中。
- en: '[![2](assets/2.png)](#co_self_awareness_CO2-2)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_self_awareness_CO2-2)'
- en: The file `labels` contain all labels, line by line, in the format `name=value`.
    This file gets updated when labels are changing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`labels` 文件按行保存所有标签，格式为`name=value`。当标签发生变化时，此文件会更新。'
- en: '[![3](assets/3.png)](#co_self_awareness_CO2-3)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_self_awareness_CO2-3)'
- en: The `annotations` file holds all annotations in the same format as the labels.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`annotations` 文件以与标签相同的格式保存所有注释。'
- en: With volumes, if the metadata changes while the Pod is running, it is reflected
    in the volume files. But it is still up to the consuming application to detect
    the file change and read the updated data accordingly. If such a functionality
    is not implemented in the application, a Pod restart still might be required.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用卷时，如果 Pod 在运行时元数据发生变化，这些变化会反映在卷文件中。但仍然需要消费应用程序检测文件更改并相应地读取更新的数据。如果应用程序没有实现这样的功能，可能仍然需要重新启动
    Pod。
- en: Discussion
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: Often, an application needs to be self-aware and have information about itself
    and the environment in which it is running. Kubernetes provides nonintrusive mechanisms
    for introspection and metadata injection. One of the downsides of the downward
    API is that it offers a fixed number of keys that can be referenced. If your application
    needs more data, especially about other resources or cluster-related metadata,
    it has to be queried on the API Server. This technique is used by many applications
    that query the API Server to discover other Pods in the same namespace that have
    certain labels or annotations. Then the application may form a cluster with the
    discovered Pods and sync state. It is also used by monitoring applications to
    discover Pods of interest and then start instrumenting them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应用程序需要具有自我感知能力，并了解自身及其运行环境的信息。Kubernetes 提供了非侵入式的内省和元数据注入机制。向下 API 的一个缺点是它提供了一组固定的可引用键。如果您的应用程序需要更多数据，特别是关于其他资源或集群相关元数据的信息，必须在
    API 服务器上查询。许多应用程序使用此技术查询 API 服务器，以发现同一命名空间中具有特定标签或注释的其他 Pod。然后应用程序可以与发现的 Pod 形成集群并同步状态。监控应用程序也使用此技术发现感兴趣的
    Pod，然后开始对其进行仪表化。
- en: Many client libraries are available for different languages to interact with
    the Kubernetes API Server to obtain more self-referring information that goes
    beyond what the downward API provides.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多客户端库可用于不同语言与 Kubernetes API 服务器交互，以获取更多超出向下 API 提供的自我引用信息。
- en: More Information
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Self Awareness Example](https://oreil.ly/fHu1O)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自我感知示例](https://oreil.ly/fHu1O)'
- en: '[AWS EC2: Instance Metadata and User Data](https://oreil.ly/iCwPr)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AWS EC2：实例元数据和用户数据](https://oreil.ly/iCwPr)'
- en: '[Expose Pod Information to Containers Through Files](https://oreil.ly/qe2Gc)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过文件向容器公开 Pod 信息](https://oreil.ly/qe2Gc)'
- en: '[Expose Pod Information to Containers Through Environment Variables](https://oreil.ly/bZrtR)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过环境变量向容器公开 Pod 信息](https://oreil.ly/bZrtR)'
- en: '[Downward API: Available Fields](https://oreil.ly/Jh4zf)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向下 API：可用字段](https://oreil.ly/Jh4zf)'
