- en: Chapter 18\. Ambassador
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章\. 大使
- en: The *Ambassador* pattern is a specialized sidecar responsible for hiding external
    complexities and providing a unified interface for accessing services outside
    the Pod. In this chapter, you will see how the *Ambassador* pattern can act as
    a proxy and decouple the main container from directly accessing external dependencies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*大使*模式是一个专门的旁路器，负责隐藏外部复杂性并提供统一接口，用于访问Pod外部的服务。在本章中，您将看到*大使*模式如何作为代理，将主容器与直接访问外部依赖项解耦。'
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Containerized services don’t exist in isolation and very often have to access
    other services that may be difficult to reach in a reliable way. The difficulty
    in accessing other services may be due to dynamic and changing addresses, the
    need for load balancing of clustered service instances, an unreliable protocol,
    or difficult data formats. Ideally, containers should be single-purposed and reusable
    in different contexts. But if we have a container that provides some business
    functionality and consumes an external service in a specialized way, the container
    will have more than one responsibility.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化服务并不孤立存在，很多时候需要访问其他可能难以可靠访问的服务。访问其他服务的困难可能是由于动态和变化的地址、需要对集群服务实例进行负载平衡、不可靠的协议或困难的数据格式等原因。理想情况下，容器应该是单一用途的，并且可以在不同的上下文中重复使用。但是，如果我们有一个容器提供一些业务功能，并以特殊方式消耗外部服务，那么这个容器将具有不止一个职责。
- en: Consuming the external service may require a special service discovery library
    that we do not want to put in our container. Or we may want to swap different
    kinds of services by using different kinds of service-discovery libraries and
    methods. This technique of abstracting and isolating the logic for accessing other
    services in the outside world is the goal of this *Ambassador* pattern.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 消耗外部服务可能需要一个特殊的服务发现库，我们不希望将其放入我们的容器中。或者我们可能希望通过使用不同类型的服务发现库和方法来交换不同类型的服务。这种抽象和隔离访问外部服务逻辑的技术是这种*大使*模式的目标。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: To demonstrate the pattern, we will use a cache for an application. Accessing
    a local cache in the development environment may be a simple configuration, but
    in the production environment, we may need a client configuration that can connect
    to the different shards of the cache. Another example is consuming a service by
    looking it up in a registry and performing client-side service discovery. A third
    example is consuming a service over a nonreliable protocol such as HTTP, so to
    protect our application, we have to use circuit-breaker logic, configure timeouts,
    perform retries, and more.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这种模式，我们将为应用程序使用缓存。在开发环境中访问本地缓存可能只是一个简单的配置，但在生产环境中，我们可能需要一个客户端配置，可以连接到不同的缓存分片。另一个例子是通过在注册表中查找并执行客户端服务发现来消耗服务。第三个例子是通过不可靠的协议（如HTTP）消耗服务，因此为了保护我们的应用程序，我们必须使用断路器逻辑、配置超时、执行重试等。
- en: In all of these cases, we can use an ambassador container that hides the complexity
    of accessing the external services and provides a simplified view and access to
    the main application container over localhost. Figures [18-1](#img-ambassador-distributed-cache)
    and [18-2](#img-ambassador-local-cache) show how an ambassador Pod can decouple
    access to a key-value store by connecting to an ambassador container listening
    on a local port. In [Figure 18-1](#img-ambassador-distributed-cache), we see how
    data access can be delegated to a fully distributed remote store like etcd.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些情况下，我们可以使用一个大使容器来隐藏访问外部服务的复杂性，并通过localhost为主应用程序容器提供简化的视图和访问。图 [18-1](#img-ambassador-distributed-cache)
    和 [18-2](#img-ambassador-local-cache) 显示了一个大使Pod如何通过连接到监听本地端口的大使容器来解耦对键值存储的访问。在
    [图18-1](#img-ambassador-distributed-cache) 中，我们可以看到数据访问如何被委派给完全分布式的远程存储，如etcd。
- en: '![Ambassador for accessing a remote distributed cache](assets/kup2_1801.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![访问远程分布式缓存的大使](assets/kup2_1801.png)'
- en: Figure 18-1\. Ambassador for accessing a remote distributed cache
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-1\. 访问远程分布式缓存的大使
- en: For development purposes, this ambassador container can be easily exchanged
    with a locally running in-memory key-value store like memcached (as shown in [Figure 18-2](#img-ambassador-local-cache)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发目的，此大使容器可以轻松与本地运行的内存键值存储（例如memcached，如图[18-2](#img-ambassador-local-cache)所示）进行交换。
- en: '![Ambassador for using a local cache](assets/kup2_1802.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![使用本地缓存的大使](assets/kup2_1802.png)'
- en: Figure 18-2\. Ambassador for accessing a local cache
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-2\. 访问本地缓存的大使
- en: '[Example 18-1](#ex-ambassador) shows an ambassador that runs parallel to a
    REST service. Before returning its response, the REST service logs the generated
    data by sending it to a fixed URL: *[*http://localhost:9009*](http://localhost:9009)*.
    The ambassador process listens in on this port and processes the data. In this
    example, it prints the data out just to the console, but it could also do something
    more sophisticated like forward the data to a full logging infrastructure. For
    the REST service, it doesn’t matter what happens to the log data, and you can
    easily exchange the ambassador by reconfiguring the Pod without touching the main
    container.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18-1](#ex-ambassador) 展示了一个与REST服务并行运行的ambassador。在返回其响应之前，REST服务通过将生成的数据发送到固定的URL：*[http://localhost:9009](http://localhost:9009)*来记录数据。Ambassador进程监听此端口并处理数据。在此示例中，它仅将数据打印到控制台，但也可以执行更复杂的操作，比如将数据转发到完整的日志基础设施。对于REST服务来说，日志数据的处理方式并不重要，您可以通过重新配置Pod而不接触主容器，轻松地更换ambassador。'
- en: Example 18-1\. Ambassador processing log output
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例18-1\. Ambassador处理日志输出
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_ambassador_CO1-1)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_ambassador_CO1-1)'
- en: Main application container providing a REST service for generating random numbers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 主应用程序容器提供REST服务以生成随机数。
- en: '[![2](assets/2.png)](#co_ambassador_CO1-2)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_ambassador_CO1-2)'
- en: Connection URL for communicating with the ambassador via localhost.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本地主机与ambassador通信的连接URL。
- en: '[![3](assets/3.png)](#co_ambassador_CO1-3)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_ambassador_CO1-3)'
- en: Ambassador running in parallel and listening on port 9009 (which is not exposed
    to the outside of the Pod).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Ambassador并行运行并侦听9009端口（该端口不对Pod外部公开）。
- en: Discussion
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: At a higher level, the *Ambassador* pattern is a *Sidecar* pattern. The main
    difference between ambassador and sidecar is that an ambassador does not enhance
    the main application with additional capability. Instead, it acts merely as a
    smart proxy to the outside world (this pattern is sometimes referred to as the
    *Proxy* pattern). This pattern can be useful for legacy applications that are
    difficult to modify and extend with modern networking concepts such as monitoring,
    logging, routing, and resiliency patterns.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从更高的层次来看，*Ambassador* 模式是 *Sidecar* 模式的一种。Ambassador 和 sidecar 的主要区别在于，ambassador
    不会通过附加功能增强主应用程序，而是仅作为对外智能代理（有时这种模式也被称为 *Proxy* 模式）。这种模式对于难以通过现代网络概念（如监视、日志记录、路由和弹性模式）修改和扩展的传统应用程序非常有用。
- en: The benefits of the *Ambassador* pattern are similar to those of the *Sidecar*
    pattern—both allow you to keep containers single-purposed and reusable. With such
    a pattern, our application container can focus on its business logic and delegate
    the responsibility and specifics of consuming the external service to another
    specialized container. This also allows you to create specialized and reusable
    ambassador containers that can be combined with other application containers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ambassador* 模式的好处类似于 *Sidecar* 模式——两者都允许您保持容器的单一用途和可重复使用性。通过这种模式，我们的应用程序容器可以专注于其业务逻辑，并将消费外部服务的责任和具体细节委托给另一个专门的容器。这还允许您创建专门的、可重复使用的ambassador容器，可以与其他应用程序容器组合使用。'
- en: More Information
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Ambassador Example](https://oreil.ly/m0KTi)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Ambassador示例](https://oreil.ly/m0KTi)'
- en: '[How to Use the Ambassador Pattern to Dynamically Configure Services on CoreOS](https://oreil.ly/TPQX5)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用Ambassador模式动态配置CoreOS上的服务](https://oreil.ly/TPQX5)'
- en: '[Modifications to the CoreOS Ambassador Pattern](https://oreil.ly/6bszq)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CoreOS Ambassador模式的修改](https://oreil.ly/6bszq)'
