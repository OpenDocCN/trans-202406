- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a book for programmers of all walks: professional JavaScript engineers,
    C# people, Java sympathizers, Python lovers, Ruby aficionados, Haskell nerds.
    Whatever language(s) you write in, so long as you have some experience programming
    and know the basics of functions, variables, classes, and errors, this book is
    for you. Some experience with JavaScript, including a basic knowledge of the Document
    Object Model (DOM) and the network, will help you along the way—while we don’t
    dive deep into these concepts, they are a wellspring of excellent examples, and
    if you’re not familiar with them the examples might not make as much sense.'
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of what programming languages you’ve used in the past, what unites
    all of us is our shared experience of tracking down exceptions, tracing through
    code line by line to figure out what went wrong and how we can fix it. This is
    the experience that TypeScript helps prevent by examining your code automatically
    and pointing out the mistakes you may have missed.
  prefs: []
  type: TYPE_NORMAL
- en: It’s OK if you haven’t worked with a statically typed language before. I’ll
    teach you about types and how to use them effectively to make your programs crash
    less, document your code better, and scale your applications across more users,
    engineers, and servers. I’ll try to avoid big words when I can, and explain ideas
    in a way that’s intuitive, memorable, and practical, using lots of examples along
    the way to help keep things concrete.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s the thing about TypeScript: unlike a lot of other typed languages, TypeScript
    is intensely practical. It invents completely new concepts so you can speak more
    concisely and precisely, letting you write applications in a way that’s fun, modern,
    and safe.'
  prefs: []
  type: TYPE_NORMAL
- en: How This Book Is Organized
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book has two aims: to give you a deep understanding of how the TypeScript
    language works (theory) and provide bucketfuls of pragmatic advice about how to
    write production TypeScript code (practice).'
  prefs: []
  type: TYPE_NORMAL
- en: Because TypeScript is such a practical language, theory quickly turns to practice,
    and most of this book ends up being a mix of the two, with the first couple of
    chapters almost entirely theory, and the last few almost completely practice.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll start with the basics of what compilers, typecheckers, and types are. I’ll
    then give a broad overview of the different types and type operators in TypeScript,
    what they’re for, and how you use them. Using what we’ve learned, I’ll cover some
    advanced topics like TypeScript’s most sophisticated type system features, error
    handling, and asynchronous programming. Finally, I’ll wrap up with how to use
    TypeScript with your favorite frameworks (frontend and backend), migrating your
    existing JavaScript project to TypeScript, and running your TypeScript application
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Most chapters come with a set of exercises at the end. Try to do these yourself—they’ll
    give you a deeper intuition for what we cover than just reading would. Answers
    for chapter exercises are available online, at [*https://github.com/bcherny/programming-typescript-answers*](https://github.com/bcherny/programming-typescript-answers).
  prefs: []
  type: TYPE_NORMAL
- en: Style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this book, I tried to stick to a single code style. Some aspects
    of this style are deeply personal—for example:'
  prefs: []
  type: TYPE_NORMAL
- en: I only use semicolons when necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I indent with two spaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I use short variable names like `a`, `f`, or _ where the program is a quick
    snippet, or where the structure of the program is more important than the details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some aspects of the code style, however, are things that I think you should
    do too. A few of these are:'
  prefs: []
  type: TYPE_NORMAL
- en: You should use the latest JavaScript syntax and features (the latest JavaScript
    version is usually just called “esnext”). This will keep your code in line with
    the latest standards, improving interoperability and Googleability, and it can
    help reduce ramp-up time for new hires. It also lets you take advantage of powerful,
    modern JavaScript features like arrow functions, promises, and generators.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should keep your data structures immutable with spreads (`...`) most of
    the time.^([1](preface01.html#idm46304996469720))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should make sure everything has a type, inferred when possible. Be careful
    not to abuse explicit types; this will help keep your code clear and terse, and
    improve safety by surfacing incorrect types rather than bandaiding over them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should keep your code reusable and generic. Polymorphism (see [“Polymorphism”](ch04.html#polymorphism))
    is your best friend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, these ideas are hardly new. But TypeScript works especially well
    when you stick to them. TypeScript’s built-in downlevel compiler, support for
    read-only types, powerful type inference, deep support for polymorphism, and completely
    structural type system encourage good coding style, while the language remains
    incredibly expressive and true to the underlying JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: A couple more notes before we begin.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript doesn’t expose pointers and references; instead it has value and
    reference types. Values are immutable, and include things like strings, numbers,
    and booleans, while references point to often-mutable data structures like arrays,
    objects, and functions. When I use the word “value” in this book, I usually mean
    it loosely to refer to either a JavaScript value or a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you might find yourself writing less-than-ideal TypeScript code in the
    wild when interoperating with JavaScript, or incorrectly typed third-party libraries,
    or legacy code, or if you’re in a rush. This book largely presents how you *should*
    write TypeScript, and makes an argument for why you should try really hard not
    to make compromises. But in practice, how correct your code is is up to you and
    your team.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, data types, environment variables,
    statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/bcherny/programming-typescript-answers*](https://github.com/bcherny/programming-typescript-answers).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing a CD-ROM
    of examples from O’Reilly books does require permission. Answering a question
    by citing this book and quoting example code does not require permission. Incorporating
    a significant amount of example code from this book into your product’s documentation
    does require permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Programming TypeScript*
    by Boris Cherny (O’Reilly). Copyright 2019 Boris Cherny, 978-1-492-03765-1.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For almost 40 years, [*O’Reilly Media*](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/programming-typescript*](https://oreil.ly/programming-typescript).
  prefs: []
  type: TYPE_NORMAL
- en: To comment or ask technical questions about this book, send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is the product of years’ worth of snippets and doodles, followed by
    a year’s worth of early mornings and nights and weekends and holidays spent writing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thank you to O’Rielly for the opportunity to work on this book, and to my editor
    Angela Rufino for the support throughout the process. Thank you to Nick Nance
    for his contribution in [“Typesafe APIs”](ch09.html#APIs), and to Shyam Seshadri
    for his contribution in [“Angular 6/7”](ch09.html#Angular). Thanks to my technical
    editors: Daniel Rosenwasser of the TypeScript team, who spent an unreasonable
    amount of time reading through this manuscript and guiding me through the nuances
    of TypeScript’s type system, and Jonathan Creamer, Yakov Fain, and Paul Buying,
    and Rachel Head for technical edits and feedback. Thanks to my family—Liza and
    Ilya, Vadim, Roza and Alik, Faina and Yosif—for encouraging me to pursue this
    project.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of all, thanks to my partner Sara Gilford, who supported me throughout
    the writing process, even when it meant calling off weekend plans, late nights
    writing and coding, and far too many unprompted conversations about the ins and
    outs of type systems. I couldn’t have done it without you, and I’m forever grateful
    for your support.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](preface01.html#idm46304996469720-marker)) If you’re not coming from JavaScript,
    here’s an example: if you have an object `o`, and you want to add a property `k`
    to it with the value `3`, you can either mutate `o` directly—`o.k = 3`—or you
    can apply your change to `o`, creating a *new* object as a result—`let p = {...o,
    k: 3}`.'
  prefs: []
  type: TYPE_NORMAL
