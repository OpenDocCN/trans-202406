["```\n$ helm plugin install https://github.com/salesforce/helm-starter.git\nInstalled plugin: starter\n```", "```\n$ helm starter --help\nFetch, list, and delete helm starters from github.\n\nAvailable Commands:\n    helm starter fetch GITURL       Install a bare Helm starter from Github\n                                      (e.g., git clone)\n    helm starter list               List installed Helm starters\n    helm starter delete NAME        Delete an installed Helm starter\n    --help                          Display this text\n```", "```\n$ helm plugin list\nNAME   \tVERSION\tDESCRIPTION\nstarter\t1.0.0  \tThis plugin fetches, lists, and deletes helm starters from github.\n```", "```\n$ helm plugin update starter\nUpdated plugin: starter\n```", "```\n$ helm plugin remove starter\nUninstalled plugin: starter\n```", "```\n$ helm plugin install https://github.com/databus23/helm-diff.git --version v3.1.0\n```", "```\n$ helm plugin install https://example.com/archives/myplugin-0.6.0.tar.gz\n```", "```\n$ helm plugin install /path/to/myplugin\n```", "```\n$ ls -la \"$(helm env HELM_PLUGINS)\"\ntotal 8\ndrwxrwxr-x 2 myuser myuser 4096 Jul  3 21:49 .\ndrwxrwxr-x 4 myuser myuser 4096 Jul  1 21:38 ..\nlrwxrwxrwx 1 myuser myuser   21 Jul  3 21:49 myplugin -> /path/to/myplugin\n```", "```\n$ helm inspect-templates [args]\n```", "```\n#!/usr/bin/env bash\nset -e\n\n# First argument on the command line, a relative path to a chart directory\nCHART_DIRECTORY=\"${1}\"\n\n# Fail if no chart directory provided or is invalid\nif [[ \"${CHART_DIRECTORY}\" == \"\" ]]; then\n    echo \"Usage: helm inspect-templates <chart_directory>\"\n    exit 1\nelif [[ ! -d \"${CHART_DIRECTORY}\" ]]; then\n    echo \"Invalid chart directory provided: ${CHART_DIRECTORY}\"\n    exit 1\nfi\n\n# Print a summary of the chart's templates\ncd \"${CHART_DIRECTORY}\"\ncd templates/\necho \"----------------------\"\necho \"Chart template summary\"\necho \"----------------------\"\necho \"\"\ntotal=\"$(find . -type f -name '*.yaml' -maxdepth 1 | wc -l | tr -d '[:space:]')\"\necho \" Total number: ${total}\"\necho \"\"\necho \" List of templates:\"\nfor filename in $(find . -type f -name '*.yaml' -maxdepth 1 | sed 's|^\\./||'); do\n    kind=$(cat \"${filename}\" | grep kind: | head -1 | awk '{print $2}')\n    echo \"  - ${filename} (${kind})\"\ndone\necho \"\"\n```", "```\nname: inspect-templates ![1](Images/1.png)\nversion: 0.1.0 ![2](Images/2.png)\ndescription: get a summary of a chart's templates ![3](Images/3.png)\ncommand: \"${HELM_PLUGIN_DIR}/inspect-templates.sh\" ![4](Images/4.png)\n```", "```\n$ HELM_PLUGINS=\"$(helm env HELM_PLUGINS)\"\n$ echo \"${HELM_PLUGINS}\"\n/home/myuser/.local/share/helm/plugins\n```", "```\n$ PLUGIN_ROOT=\"${HELM_PLUGINS}/inspect-templates\"\n$ mkdir -p \"${PLUGIN_ROOT}\"\n```", "```\n$ cp plugin.yaml \"${PLUGIN_ROOT}\"\n$ cp inspect-templates.sh \"${PLUGIN_ROOT}\"\n$ chmod +x \"${PLUGIN_ROOT}/inspect-templates.sh\"\n```", "```\n$ helm inspect-templates\nUsage: helm inspect-templates <chart_directory>\nError: plugin \"inspect-templates\" exited with error\n\n$ helm inspect-templates nonexistant/\nInvalid chart directory provided: nonexistant/\nError: plugin \"inspect-templates\" exited with error\n\n$ helm create mychart\nCreating mychart\n\n$ helm inspect-templates mychart/\n----------------------\nChart template summary\n----------------------\n\n Total number: 5\n\n List of templates:\n  - serviceaccount.yaml (ServiceAccount)\n  - deployment.yaml (Deployment)\n  - service.yaml (Service)\n  - hpa.yaml (HorizontalPodAutoscaler)\n  - ingress.yaml (Ingress)\n```", "```\nname: myplugin ![1](Images/1.png)\nversion: 0.3.0 ![2](Images/2.png)\nusage: \"helm myplugin --help\" ![3](Images/3.png)\ndescription \"a plugin that belongs to me\" ![4](Images/4.png)\nplatformCommand: ![5](Images/5.png)\n  - os: windows\n    arch: amd64\n    command: \"bin/myplugin.exe\"\ncommand: \"bin/myplugin\" ![6](Images/6.png)\nignoreFlags: false ![7](Images/7.png)\nhooks: ![8](Images/8.png)\n  install: \"scripts/install-hook.sh\"\n  update: \"scripts/update-hook.sh\"\n  delete: \"scripts/delete-hook.sh\"\ndownloaders: ![9](Images/9.png)\n  - command: \"bin/myplugin-myp-downloader\"\n    protocols:\n      - \"myp\"\n      - \"myps\"\n```", "```\n#!/usr/bin/env bash\n\nset -e\n\nURL=\"\"\nEXTRACT_TO=\"\"\n\nif [[ \"$(uname)\" = \"Darwin\" ]]; then\n    URL=\"https://example.com/releases/myplugin-mac\"\n    EXTRACT_TO=\"myplugin\"\nelif [[ \"$(uname)\" = \"Linux\" ]]; then\n    URL=\"https://example.com/releases/myplugin-linux\"\n    EXTRACT_TO=\"myplugin\"\nelse\n    URL=\"https://example.com/releases/myplugin-windows\"\n    EXTRACT_TO=\"myplugin.exe\"\nfi\n\nmkdir -p bin/\ncurl -sSL \"${URL}\" -o \"bin/${EXTRACT_TO}\"\n```", "```\n...\nhooks:\n  install: \"scripts/install-hook.sh\" ![1](Images/1.png)\n  update: \"scripts/update-hook.sh\" ![2](Images/2.png)\n  delete: \"scripts/delete-hook.sh\" ![3](Images/3.png)\n```", "```\nname: super-secure\nversion: 0.1.0\ndescription: a super secure chart downloader\ncommand: \"${HELM_PLUGIN_DIR}/super-secure.sh\"\ndownloaders:\n  - command: \"super-secure-downloader.sh\" ![1](Images/1.png)\n    protocols: ![2](Images/2.png)\n      - \"ss\"\n```", "```\n<command> certFile keyFile caFile full-URL\n```", "```\n#!/usr/bin/env bash\nset -e\n\n# The fourth argument is the URL to the resource to download from the repo\nURL=\"${4}\"\n\n# Replace \"ss://\" with \"https://\"\nURL=\"$(echo ${URL} | sed 's/ss:/https:/')\"\n\n# Request the resource using the token, outputting contents to stdout\necho \"Downloading $(basename ${URL}) using super-secure plugin...\" 1>&2\ncurl -sL -H \"Authorization: Bearer ${SUPER_SECURE_TOKEN}\" \"${URL}\"\n```", "```\n$ export SUPER_SECURE_TOKEN=\"abc123\"\n$ helm repo add my-secure-repo ss://secure.example.com\nDownloading index.yaml using super-secure plugin...\n\"my-secure-repo\" has been added to your repositories\n```", "```\n$ helm repo list\nNAME          \tURL\nmy-secure-repo\tss://secure.example.com\n```", "```\n$ export SUPER_SECURE_TOKEN=\"abc123\"\n$ helm pull my-secure-repo/superapp\nDownloading superapp-0.1.0.tgz using super-secure plugin...\n$ ls\nsuperapp-0.1.0.tgz\n```", "```\nname: zoo ![1](Images/1.png)\nflags: ![2](Images/2.png)\n  - disable-smells\n  - disable-snacks\ncommands: ![3](Images/3.png)\n  - name: price ![4](Images/4.png)\n    flags:\n      - kids-discount\n  - name: animals\n    commands:\n      - name: list\n        validArgs: ![5](Images/5.png)\n          - birds\n          - reptiles\n          - cats\n      - name: describe\n        flags:\n          - format-json\n        validArgs:\n          - birds\n          - reptiles\n          - cats\n```", "```\n$ helm zoo  # (click tab)\nanimals  price\n```", "```\n$ helm zoo --disables-s  # (click tab)\n--disable-smells  --disable-snacks\n```", "```\nsource <(helm completion bash) # for Bash\nsource <(helm completion zsh)  # for Z shell\n```", "```\n#!/usr/bin/env sh\n$HELM_PLUGIN_DIR/my-plugin-program --complete \"$@\"\n```", "```\nbirds\nreptiles\ncats\n```", "```\n#!/usr/bin/env bash\nset -e\nINPUT=\"${@}\"\nif [[ \"${INPUT}\" == \"animals list\"* ]]; then\n    INPUT=\"$(echo \"${INPUT}\" | sed -e 's/^animals list //')\"\n    for flag in $(cat \"${HOME}/animals.txt\"); do\n        if [[ \"${flag}\" == \"${INPUT}\"* ]]; then\n            echo \"${flag}\"\n        fi\n    done\nfi\n```", "```\n$ helm zoo animals list  # (press Tab key)\nbirds     cats      reptiles\n```", "```\n$ echo \"monkeys\" >> \"${HOME}/animals.txt\"\n$ helm zoo animals list  # (press Tab key)\nbirds     cats      monkeys   reptiles\n```", "```\n$ helm create --starter basic-webapp superapp\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ include \"mychart.fullname\" . }}\n  labels:\n    {{- include \"mychart.labels\" . | nindent 4 }}\ndata:\n  hello: {{ .Values.hello | quote }}\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ include \"<CHARTNAME>.fullname\" . }}\n  labels:\n    {{- include \"<CHARTNAME>.labels\" . | nindent 4 }}\ndata:\n  hello: {{ .Values.hello | quote }}\n```", "```\n$ export HELM_STARTERS=\"$(helm env HELM_DATA_HOME)/starters\"\n$ mkdir -p \"${HELM_STARTERS}\"\n```", "```\ncp -r basic-webapp \"${HELM_STARTERS}\"\n```", "```\n$ helm create --starter basic-webapp superapp\nCreating superapp\n```", "```\n$ tree superapp/\nsuperapp/\n├── Chart.yaml\n├── templates\n│   ├── _helpers.tpl\n│   ├── deployment.yaml\n│   └── service.yaml\n└── values.yaml\n```"]