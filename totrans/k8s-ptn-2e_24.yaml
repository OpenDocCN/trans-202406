- en: Chapter 19\. EnvVar Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 19 章\. 环境变量配置
- en: In this *EnvVar Configuration* pattern, we look into the simplest way to configure
    applications. For small sets of configuration values, the easiest way to externalize
    configuration is by putting them into universally supported environment variables.
    We’ll see different ways of declaring environment variables in Kubernetes but
    also the limitations of using environment variables for complex configurations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种 *环境变量配置* 模式中，我们探讨了配置应用程序的最简单方法。对于一小组配置值，将它们放入广泛支持的环境变量中是外部化配置的最简单方式。我们将看到在
    Kubernetes 中声明环境变量的不同方法，但同时也会看到使用环境变量进行复杂配置的限制。
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Every nontrivial application needs some configuration for accessing data sources,
    external services, or production-level tuning. And we knew well before the [twelve-factor
    app manifesto](https://12factor.net) that it is a bad thing to hardcode configurations
    within the application. Instead, the configuration should be *externalized* so
    that we can change it even after the application has been built. That provides
    even more value for containerized applications that enable and promote sharing
    of immutable application artifacts. But how can this be done best in a containerized
    world?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个非平凡的应用程序都需要一些配置来访问数据源、外部服务或生产级调整。我们早在 [十二要素应用宣言](https://12factor.net) 发布之前就知道，在应用程序中硬编码配置是一件坏事。相反，应将配置
    *外部化*，以便在构建应用程序之后甚至可以进行更改。这为容器化应用程序提供了更多价值，促进共享不可变应用程序构件。但在容器化世界中，如何才能做到最好呢？
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: The twelve-factor app manifesto recommends using environment variables for storing
    application configurations. This approach is simple and works for any environment
    and platform. Every operating system knows how to define environment variables
    and how to propagate them to applications, and every programming language also
    allows easy access to these environment variables. It is fair to claim that environment
    variables are universally applicable. When using environment variables, a typical
    usage pattern is to define hardcoded default values during build time, which we
    can then overwrite at runtime. Let’s see some concrete examples of how this works
    in Docker and Kubernetes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 十二要素应用宣言建议使用环境变量存储应用程序配置。这种方法简单且适用于任何环境和平台。每个操作系统都知道如何定义环境变量并将其传播给应用程序，每种编程语言也允许轻松访问这些环境变量。可以说环境变量具有普遍适用性。在使用环境变量时，典型的使用模式是在构建时定义硬编码的默认值，然后在运行时进行覆盖。让我们看看在
    Docker 和 Kubernetes 中如何实现这一点的具体示例。
- en: For Docker images, environment variables can be defined directly in Dockerfiles
    with the `ENV` directive. You can define them line by line or all in a single
    line, as shown in [Example 19-1](#ex-config-envvar).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Docker 镜像，可以直接在 Dockerfile 中使用 `ENV` 指令定义环境变量。可以逐行定义，也可以一行定义多个，就像 [示例 19-1](#ex-config-envvar)
    中展示的那样。
- en: Example 19-1\. Example Dockerfile with environment variables
  id: totrans-7
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-1\. 带有环境变量的 Dockerfile 示例
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then a Java application running in such a container can easily access the variables
    with a call to the Java standard library, as shown in [Example 19-2](#ex-config-envvar-java).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在此类容器中运行的 Java 应用程序可以通过调用 Java 标准库轻松访问这些变量，如 [示例 19-2](#ex-config-envvar-java)
    所示。
- en: Example 19-2\. Reading environment variables in Java
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-2\. 在 Java 中读取环境变量
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_envvar_configuration_CO1-1)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_envvar_configuration_CO1-1)'
- en: Initializes a random-number generator with a seed from an EnvVar.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EnvVar 初始化随机数生成器的种子。
- en: Directly running such an image will use the default hardcoded values. But in
    most cases, you want to override these parameters from outside the image.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 直接运行这样的镜像将使用默认的硬编码值。但在大多数情况下，您希望从镜像外部覆盖这些参数。
- en: When running such an image directly with Docker, environment variables can be
    set from the command line by calling Docker, as in [Example 19-3](#ex-config-envvar-docker).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在直接使用 Docker 运行这样的镜像时，可以通过调用 Docker 的命令行来设置环境变量，如 [示例 19-3](#ex-config-envvar-docker)
    所示。
- en: Example 19-3\. Set environment variables when starting a Docker container
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 19-3\. 在启动 Docker 容器时设置环境变量
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For Kubernetes, these types of environment variables can be set directly in
    the Pod specification of a controller like Deployment or ReplicaSet (as shown
    in [Example 19-4](#ex-config-envvar-replicaset)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Kubernetes，这些类型的环境变量可以直接在控制器的 Pod 规范中设置，如部署或副本集中所示（如 [示例 19-4](#ex-config-envvar-replicaset)
    所示）。
- en: Example 19-4\. Deployment with environment variables set
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-4\. 配置环境变量的部署
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_envvar_configuration_CO2-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_envvar_configuration_CO2-1)'
- en: EnvVar with a literal value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文字值的 EnvVar。
- en: '[![2](assets/2.png)](#co_envvar_configuration_CO2-2)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_envvar_configuration_CO2-2)'
- en: EnvVar from a ConfigMap.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 ConfigMap 的 EnvVar。
- en: '[![3](assets/3.png)](#co_envvar_configuration_CO2-3)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_envvar_configuration_CO2-3)'
- en: ConfigMap’s name.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 的名称。
- en: '[![4](assets/4.png)](#co_envvar_configuration_CO2-4)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_envvar_configuration_CO2-4)'
- en: Key within the ConfigMap to look for the EnvVar value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 中查找 EnvVar 值的键。
- en: '[![5](assets/5.png)](#co_envvar_configuration_CO2-5)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_envvar_configuration_CO2-5)'
- en: EnvVar from a Secret (lookup semantic is the same as for a ConfigMap).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Secret 中获取的 EnvVar（查找语义与 ConfigMap 相同）。
- en: In such a Pod template, you not only can attach values directly to environment
    variables (as for `LOG_FILE`), but also can use a delegation to Kubernetes Secrets
    and ConfigMaps. The advantage of ConfigMap and Secret indirection is that the
    environment variables can be managed independently from the Pod definition. Secret
    and ConfigMap and their pros and cons are explained in detail in [Chapter 20,
    “Configuration Resource”](ch20.html#ConfigurationResource).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的 Pod 模板中，您不仅可以直接附加值到环境变量（例如 `LOG_FILE`），还可以委托给 Kubernetes Secrets 和 ConfigMaps。ConfigMap
    和 Secret 的间接性的优势在于可以独立于 Pod 定义管理环境变量。在 [第20章，“配置资源”](ch20.html#ConfigurationResource)
    中详细解释了 Secret 和 ConfigMap 及其优缺点。
- en: In the preceding example, the `SEED` variable comes from a Secret resource.
    While that is a perfectly valid use of Secret, it is also important to point out
    that environment variables are not secure. Putting sensitive, readable information
    into environment variables makes this information easy to read, and it may even
    leak into logs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`SEED` 变量来自 Secret 资源。虽然这是 Secret 的一个完全有效的用法，但也很重要指出环境变量不是安全的。将敏感且可读的信息放入环境变量中使得这些信息易于阅读，甚至可能泄露到日志中。
- en: Instead of individually referring to configuration values from Secrets or ConfigMaps,
    you can also import *all* values of a particular Secret or ConfigMap with `envFrom`.
    We explain this field in [Chapter 20, “Configuration Resource”](ch20.html#ConfigurationResource),
    when we talk about ConfigMaps and Secrets in detail.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过 `envFrom` 导入特定 Secret 或 ConfigMap 的 *所有* 值，而不是单独引用 Secrets 或 ConfigMaps
    的配置值。我们在 [第20章，“配置资源”](ch20.html#ConfigurationResource) 中详细解释了此字段，在详细讨论 ConfigMaps
    和 Secrets 时会谈到。
- en: Two other valuable features that can be used with environment variables are
    the downward API and *dependent variables*. You learned all about the downward
    API in [Chapter 14, “Self Awareness”](ch14.html#SelfAwareness), so let’s have
    a look at dependent variables in [Example 19-5](#ex-config-envvar-dependent) that
    allow you to reference previously defined variables in the value definition of
    other entries.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可与环境变量一起使用的另外两个有价值的功能是 downward API 和 *dependent variables*。您在 [第14章，“自我意识”](ch14.html#SelfAwareness)
    中已经学习了有关 downward API 的全部内容，现在让我们看一下 [示例 19-5](#ex-config-envvar-dependent) 中的
    dependent variables，这使您可以引用先前定义的变量作为其他条目值定义中的值。
- en: Example 19-5\. Dependent environment variables
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-5\. Dependent environment variables
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_envvar_configuration_CO3-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_envvar_configuration_CO3-1)'
- en: Use the downward API to pick up the Pod’s IP. The downward API is discussed
    in detail in [Chapter 14, “Self Awareness”](ch14.html#SelfAwareness).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 downward API 获取 Pod 的 IP。详细讨论 downward API，请参阅 [第14章，“自我意识”](ch14.html#SelfAwareness)。
- en: '[![2](assets/2.png)](#co_envvar_configuration_CO3-2)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_envvar_configuration_CO3-2)'
- en: Include the previously defined environment variables `IP` and `PORT` to build
    up a URL.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 包含先前定义的环境变量 `IP` 和 `PORT` 来构建 URL。
- en: 'With a `$(...)` notation, you can reference environment variables defined earlier
    in the `env` list or coming from an `envFrom` import. Kubernetes will resolve
    those references during the startup of the container. Be careful about the ordering,
    though: if you reference a variable defined later in the list, it will not be
    resolved, and the `$(...)` reference will be taken over literally. In addition,
    you can also reference environment variables with this syntax for Pod commands,
    as shown in [Example 19-6](#ex-config-envvar-command-subst).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$(...)` 表示法，您可以引用在 `env` 列表中先前定义的环境变量或来自 `envFrom` 导入的变量。Kubernetes 将在容器启动期间解析这些引用。不过要注意顺序：如果引用列表中稍后定义的变量，它将不会被解析，并且
    `$(...)` 引用将直接采用字面量。此外，您还可以在 Pod 命令中使用此语法引用环境变量，如 [示例 19-6](#ex-config-envvar-command-subst)
    所示。
- en: Example 19-6\. Using environment variables in a container’s command definition
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-6\. 在容器命令定义中使用环境变量
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_envvar_configuration_CO4-1)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_envvar_configuration_CO4-1)'
- en: Reference environment variables for the startup command of a container.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器的启动命令的参考环境变量。
- en: '[![2](assets/2.png)](#co_envvar_configuration_CO4-2)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_envvar_configuration_CO4-2)'
- en: Definition of the environment variables substituted in the commands.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 命令中替换的环境变量的定义。
- en: Discussion
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: Environment variables are easy to use, and everybody knows about them. This
    concept maps smoothly to containers, and every runtime platform supports environment
    variables. But environment variables are not secure, and are good only for a decent
    number of configuration values. And when there are a lot of different parameters
    to configure, the management of all these environment variables becomes unwieldy.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量易于使用，每个人都知道它们。这个概念与容器无缝映射，并且每个运行时平台都支持环境变量。但是环境变量不安全，仅适用于相当数量的配置值。当需要配置大量不同的参数时，管理所有这些环境变量变得笨拙。
- en: In these cases, many people use an extra level of indirection and put configuration
    into various configuration files, one for each environment. Then a single environment
    variable is used to select one of these files. *Profiles* from Spring Boot are
    an example of this approach. Since these profile configuration files are typically
    stored within the application itself, which is within the container, it couples
    the configuration tightly with the application. This often leads to configuration
    for development and production ending up side by side in the same Docker image,
    which requires an image rebuild for every change in either environment. We do
    not recommend this setup (configuration should always be external to the application),
    but this solution indicates that environment variables are suitable for small
    to medium sets of configurations only.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，许多人使用额外的间接级别，并将配置放入各种配置文件中，每个环境一个文件。然后使用单个环境变量选择其中一个文件。*Spring Boot*
    的*Profiles*就是这种方法的一个示例。由于这些配置文件通常存储在应用程序自身内部，即在容器内部，这将配置与应用程序紧密耦合。这经常导致开发和生产的配置最终并排存放在同一个Docker镜像中，每次更改任何一个环境都需要重新构建镜像。我们不推荐这种设置（配置应始终外部化），但这种解决方案表明环境变量仅适用于小到中等配置集。
- en: The patterns *Configuration Resource*, *Immutable Configuration*, and *Configuration
    Template* described in the following chapters are good alternatives when more
    complex configuration needs come up.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在更复杂的配置需求出现时，下一章节描述的*配置资源*、*不可变配置*和*配置模板*是良好的替代方案。
- en: Environment variables are universally applicable, and because of that, we can
    set them at various levels. This option leads to fragmentation of the configuration
    definitions and makes it hard to track for a given environment variable where
    it is set. When there is no central place where all environments variables are
    defined, it is hard to debug configuration issues.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量是通用的，因此我们可以在不同层次设置它们。这种选择导致配置定义的碎片化，并且很难追踪给定环境变量的设置位置。当没有一个集中的地方定义所有环境变量时，调试配置问题就变得困难。
- en: Another disadvantage of environment variables is that they can be set only *before*
    an application starts, and we cannot change them later. On the one hand, it’s
    a drawback that you can’t change configuration “hot” during runtime to tune the
    application. However, many see this as an advantage, as it promotes *immutability*
    even to the configuration. Immutability here means you throw away the running
    application container and start a new copy with a modified configuration, very
    likely with a smooth Deployment strategy like rolling updates. That way, you are
    always in a defined and well-known configuration state.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量的另一个缺点是它们只能在应用程序启动*之前*设置，不能稍后更改。一方面，不能在运行时“热”更改配置是一个缺点，以调整应用程序。然而，许多人认为这是一个优点，因为它促进了配置的*不可变性*。这里的不可变性意味着你丢弃正在运行的应用程序容器，并启动一个具有修改配置的新副本，很可能使用滚动更新等平滑的部署策略。这样，你始终处于定义明确和良好已知的配置状态。
- en: Environment variables are simple to use, but are applicable mainly for simple
    use cases and have limitations for complex configuration requirements. The next
    patterns show how to overcome those limitations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量使用简单，但主要适用于简单用例，并且对于复杂配置需求有限制。下面的模式展示了如何克服这些限制。
- en: More Information
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[EnvVar Configuration Example](https://oreil.ly/W25g0)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[环境变量配置示例](https://oreil.ly/W25g0)'
- en: '[The Twelve-Factor App](https://oreil.ly/DzBTm)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[十二要素应用](https://oreil.ly/DzBTm)'
- en: '[Expose Pod Information to Containers Through Environment Variables](https://oreil.ly/KxFtr)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将 Pod 信息通过环境变量暴露给容器](https://oreil.ly/KxFtr)'
- en: '[Define Dependent Environment Variables](https://oreil.ly/YoUVj)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定义依赖的环境变量](https://oreil.ly/YoUVj)'
- en: '[Spring Boot Profiles for Using Sets of Configuration Values](https://oreil.ly/3XVe9)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Spring Boot 配置文件使用配置值集合](https://oreil.ly/3XVe9)'
