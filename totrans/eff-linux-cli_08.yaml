- en: Chapter 6\. Parents, Children, and Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of the shell—to run commands—is so fundamental to Linux that you
    might think the shell is built into Linux in some special way. It is not. A shell
    is just an ordinary program like `ls` or `cat`. It is programmed to repeat the
    following steps over and over and over and over…
  prefs: []
  type: TYPE_NORMAL
- en: Print a prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read a command from stdin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate and run the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux does a great job of hiding the fact that a shell is an ordinary program.
    When you log in, Linux automatically runs an instance of the shell for you, known
    as your *login shell*. It launches so seamlessly that it appears to *be* Linux,
    when really it’s just a program launched on your behalf to interact with Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Where Is Your Login Shell?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you log in at a nongraphical terminal, say, using an SSH client program,
    the login shell is the initial shell you interact with. It prints the first prompt
    and awaits your command.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if you’re at the computer’s console with a graphical display,
    your login shell runs behind the scenes. It launches a desktop environment such
    as GNOME, Unity, Cinnamon, or KDE Plasma. Then you can open terminal windows to
    run additional interactive shells.
  prefs: []
  type: TYPE_NORMAL
- en: 'The more you understand about the shell, the more effectively you can work
    with Linux and the fewer superstitions you’ll develop about its inner workings.
    This chapter explores the following mysteries of shells more deeply than [Chapter 2](ch02.xhtml#ch_shell)
    did:'
  prefs: []
  type: TYPE_NORMAL
- en: Where shell programs are located
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How different shell instances may be related to each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why different shell instances may have the same variables, values, aliases,
    and other context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to change a shell’s default behavior by editing configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end, I hope you’ll find that these mysteries aren’t so mysterious after
    all.
  prefs: []
  type: TYPE_NORMAL
- en: Shells Are Executable Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default shell on most Linux systems is `bash`,^([1](ch06.xhtml#idm46586640310240))
    and it’s an ordinary program—an executable file—located in the system directory
    */bin* alongside `cat`, `ls`, `grep`, and other familiar commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`bash` is also not the only shell on your system, most likely. Valid shells
    are usually listed, one per line, in the file */etc/shells*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To see which shell you’re running, `echo` the shell variable `SHELL`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In theory, a Linux system can treat *any program* as a valid login shell, if
    a user account is configured to invoke it on login and it’s listed in */etc/shells*
    (if required on your system). With superuser privileges, you can even write and
    install your own shell, like the script in [Example 6-1](#ex_halshell). It reads
    any command and responds, “I’m sorry, I’m afraid I can’t do that.” This custom
    shell is intentionally silly, but it demonstrates that other programs can be just
    as legitimate a shell as */bin/bash*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 6-1\. halshell: A shell that refuses to run your commands'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `bash` is just a program, you can run it manually like any other command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do so, you’ll just see another prompt, as if your command had no effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'But really, you have run a new instance of `bash`. This new instance prints
    a prompt and awaits your command. To make the new instance more visible, change
    its prompt (say, to `%%`) by setting the shell variable `PS1`, and run some commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run `exit` to terminate the new instance of `bash`. You’ll return to the
    original shell, which has a dollar-sign prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I must emphasize that the change from `%%` back to `$` was not a prompt change.
    It was a whole shell change. The new instance of `bash` has ended, so the original
    shell prompts you for the next command.
  prefs: []
  type: TYPE_NORMAL
- en: Running `bash` by hand is not just for entertainment value. You’ll use manually
    invoked shells to your advantage in [Chapter 7](ch07.xhtml#ch_running_commands).
  prefs: []
  type: TYPE_NORMAL
- en: Parent and Child Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When one instance of the shell invokes another, as I just demonstrated, the
    original shell is called the *parent* and the new instance is called the *child*.
    The same is true for any Linux program that invokes any other Linux program. The
    invoking program is the parent, and the invoked program is its child. A running
    Linux program is known as a *process*, so you’ll also see the terms *parent process*
    and *child process*. A process can invoke any number of children, but each child
    has only one parent.
  prefs: []
  type: TYPE_NORMAL
- en: Every process has its own environment. An environment, which you might recall
    from [“Environments and Initialization Files, the Short Version”](ch02.xhtml#section_environments1),
    includes a current directory, search path, shell prompt, and other important information
    held in shell variables. When a child is created, its environment is largely a
    copy of its parent’s environment. (I’ll explain more in [“Environment Variables”](#section_environment_variables).)
  prefs: []
  type: TYPE_NORMAL
- en: '*Every time you run a simple command, you create a child process*. This is
    such an important point for understanding Linux that I’ll say it again: even when
    you run a simple command like `ls`, that command secretly runs inside a new child
    process with its own (copied) environment. That means any changes you make to
    a child, like changing the prompt variable `PS1` in a child shell, affect only
    the child and are lost when the child exits. Likewise, any changes to the parent
    won’t affect its children that are already running. Changes to the parent *can*
    affect its *future* children, however, because each child’s environment is copied
    from its parent’s environment on startup.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Why does it matter that commands run in child processes? For one thing, it
    means that any program you run can `cd` all over the filesystem, but when it exits,
    your current shell (the parent) has not changed its current directory. Here’s
    a quick experiment to prove it. Create a shell script called `cdtest` in your
    home directory containing a `cd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Make it executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Print your current directory name and then run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now check your current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Your current directory hasn’t changed, even though the `cdtest` script traveled
    to the */etc* directory. That’s because `cdtest` ran inside a child process with
    its own environment. Changes to the child’s environment cannot affect the parent’s
    environment, so the parent’s current directory did not change. The same thing
    happens when you run an executable program like `cat` or `grep`—it runs in a child
    process that exits after the program terminates, taking any environment changes
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: Why cd Must Be a Shell Builtin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Linux programs cannot change your shell’s current directory, then how does
    the command `cd` manage to change it? Well, `cd` isn’t a program. It’s a built-in
    feature of the shell (a.k.a. a shell builtin). If `cd` were a program external
    to the shell, directory changes would be impossible—they would run in a child
    process and be unable to affect the parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pipelines launch multiple child processes: one for each command in the pipeline.
    This command from the section [“Command #6: uniq”](ch01.xhtml#section_uniq) launches
    six children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Environment Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every instance of the shell has a collection of variables, as you learned in
    [“Evaluating Variables”](ch02.xhtml#section_variables). Some variables are local
    to a single shell. They are called *local variables*. Other variables are automatically
    copied from a given shell to each child it invokes. These variables are called
    *environment variables*, and they collectively form the shell’s environment. Some
    examples of environment variables and their uses are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HOME`'
  prefs: []
  type: TYPE_NORMAL
- en: The path to your home directory. Its value is set automatically by your login
    shell when you log in. Text editors like `vim` and `emacs` read the variable `HOME`
    so they can locate and read their configuration files (*$HOME/.vim* and *$HOME/.emacs*,
    respectively).
  prefs: []
  type: TYPE_NORMAL
- en: '`PWD`'
  prefs: []
  type: TYPE_NORMAL
- en: Your shell’s current directory. Its value is set and maintained automatically
    by the shell each time you `cd` to another directory. The command `pwd` reads
    the variable `PWD` to print the name of your shell’s current directory.
  prefs: []
  type: TYPE_NORMAL
- en: '`EDITOR`'
  prefs: []
  type: TYPE_NORMAL
- en: The name of (or path to) your preferred text editor. Its value is generally
    set by you in a shell configuration file. Other programs read this variable to
    launch an appropriate editor on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: View a shell’s environment variables with the `printenv` command. The output
    is one variable per line, unsorted, and can be quite long, so pipe it though `sort`
    and `less` for friendlier viewing:^([2](ch06.xhtml#idm46586640124848))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Local variables do not appear in the output of `printenv`. Display their values
    by preceding the variable name with a dollar sign and printing the result with
    `echo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating Environment Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To turn a local variable into an environment variable, use the `export` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`export` specifies that the variable and its value will be copied from the
    current shell to any future children. Local variables are not copied to future
    children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, a child’s variables are *copies*. Any changes to the copy do not
    affect the parent shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Launch a new shell anytime and change anything in its environment, and all the
    changes disappear when you exit the shell. This means you can experiment with
    shell features safely—just run a shell manually, creating a child, and terminate
    it when finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Superstition Alert: “Global” Variables'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes Linux hides its inner workings too well. A great example is the behavior
    of environment variables. Somehow, like magic, variables like `HOME` and `PATH`
    each have a consistent value in all your shell instances. They seem to be “global
    variables” in some sense. (I’ve even seen this claim in other Linux books, not
    published by O’Reilly.) But an environment variable is *not global*. Each shell
    instance has its own copy. Modifying an environment variable in one shell cannot
    change the value in any other running shells. Modifications affect only that shell’s
    future children (not yet invoked).
  prefs: []
  type: TYPE_NORMAL
- en: 'If that’s the case, how does a variable like `HOME` or `PATH` seem to keep
    its value in all your shell instances? There are two avenues to make this happen,
    which are illustrated in [Figure 6-1](#fig_exporting). In short:'
  prefs: []
  type: TYPE_NORMAL
- en: Children copy from their parents.
  prefs: []
  type: TYPE_NORMAL
- en: For variables like `HOME`, the values are usually set and exported by your login
    shell. All future shells (until you log out) are children of the login shell,
    so they receive a copy of the variable and its value. These sorts of system-defined
    environment variables are so rarely modified in the real world that they seem
    global, but they are just ordinary variables that play by the ordinary rules.
    (You may even change their values in a running shell, but you might disrupt the
    expected behavior of that shell and other programs.)
  prefs: []
  type: TYPE_NORMAL
- en: Different instances read the same configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Local variables, which are not copied to children, can have their values set
    in a Linux configuration file such as *$HOME/.bashrc* (see more details in [“Configuring
    Your Environment”](#section_bash_configs)). Each instance of the shell, on invocation,
    reads and executes the appropriate configuration files. As a result, these local
    variables appear to be copied from shell to shell. The same is true for other
    nonexported shell features such as aliases.
  prefs: []
  type: TYPE_NORMAL
- en: This behavior leads some users to believe that the `export` command creates
    a global variable. It does not. The command `export WHATEVER` simply declares
    that the variable `WHATEVER` will be copied from the current shell to any future
    children.
  prefs: []
  type: TYPE_NORMAL
- en: '![Shells may share variables and values by export or by reading the same configuration
    files](Images/elcl_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Shells may share variables and values by export or by reading the
    same configuration files
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Child Shells Versus Subshells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A child is a partial copy of its parent. It includes copies of its parent’s
    environment variables, for example, but not its parent’s local (unexported) variables
    or aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve ever wondered why your aliases aren’t available in shell scripts,
    now you know. Shell scripts run in a child, which does not receive copies of the
    parent’s aliases.
  prefs: []
  type: TYPE_NORMAL
- en: 'A *subshell*, in contrast, is a complete copy of its parent.^([3](ch06.xhtml#idm46586640055040))
    It includes all the parent’s variables, aliases, functions, and more. To launch
    a command in a subshell, enclose the command in parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if a shell instance is a subshell, print the variable `BASH_SUBSHELL`.
    The value is nonzero in subshells, zero otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ll cover some practical uses of subshells in [“Technique #10: Explicit Subshells”](ch07.xhtml#section_explicit_subshells).
    For now, just be aware that you can create them and they copy the parent’s aliases.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Your Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When `bash` runs, it configures itself by reading a sequence of files, called
    *configuration files*, and executing their contents. These files define variables,
    aliases, functions, and other shell features, and they can include any Linux command.
    (They are like shell scripts that configure the shell.) Some configuration files
    are defined by the system administrator and apply to all users system-wide. They
    are found in the directory */etc*. Other configuration files are owned and changed
    by individual users. They are located in the user’s home directory. [Table 6-1](#table_config)
    lists the standard `bash` configuration files. They come in several types:'
  prefs: []
  type: TYPE_NORMAL
- en: Startup files
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files that execute automatically when you log in—that is, they
    apply only to your login shell. An example command in this file might set and
    export an environment variable. Defining an alias in this file would be less helpful,
    however, because aliases are not copied to children.
  prefs: []
  type: TYPE_NORMAL
- en: Initialization (“init”) files
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files that execute for every shell instance that is not a login
    shell—for example, when you run an interactive shell by hand or a (noninteractive)
    shell script. An example initialization file command might set a variable or define
    an alias.
  prefs: []
  type: TYPE_NORMAL
- en: Cleanup files
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files that execute immediately before your login shell exits.
    An example command in this file might be `clear` to blank your screen on logout.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-1\. Standard configuration files sourced by `bash`
  prefs: []
  type: TYPE_NORMAL
- en: '| File type | Run by | System-wide location | Personal file locations (in order
    invoked) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Startup files | Login shells, on invocation | */etc/profile* | *$HOME/.bash_profile*,
    *$HOME/.bash_login*, and *$HOME/.profile* |'
  prefs: []
  type: TYPE_TB
- en: '| Init files | Interactive shells (nonlogin), on invocation | */etc/bash.bashrc*
    | *$HOME/.bashrc* |'
  prefs: []
  type: TYPE_TB
- en: '| Shell scripts, on invocation | Set the variable `BASH_ENV` to the absolute
    path to an initialization file (example: `BASH_ENV=/usr/local/etc/bashrc`) | Set
    the variable `BASH_ENV` to the absolute path to an initialization file (example:
    `BASH_ENV=/usr/local/etc/bashrc`) |'
  prefs: []
  type: TYPE_TB
- en: '| Cleanup files | Login shells, on exit | */etc/bash.bash_logout* | *$HOME/.bash_logout*
    |'
  prefs: []
  type: TYPE_TB
- en: Notice that you have three choices for personal startup files in your home directory
    (*.bash_profile*, *.bash_login*, and *.profile*). Most users can just pick one
    and stick with it. Your Linux distro probably supplies one of them already, prefilled
    with (ideally) useful commands. Things are a bit different if you happen to run
    other shells such as Bourne shell (*/bin/sh*) and Korn shell (*/bin/ksh*). These
    shells also read *.profile* and can fail if handed `bash`-specific commands to
    execute. Place `bash`-specific commands in *.bash_profile* or *.bash_login* instead
    (again, just pick one).
  prefs: []
  type: TYPE_NORMAL
- en: Users sometimes find the separation of personal startup files and the personal
    initialization file confusing. Why would you want your login shell to behave differently
    from other shells, say, that you open in multiple windows? The answer is, in many
    cases, you don’t need them to behave differently. Your personal startup file might
    do little more than source your personal initialization file, *$HOME/.bashrc*,
    so all interactive shells (login or nonlogin) would have largely the same configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In other cases, you might prefer to split responsibilities between your startup
    and initialization files. For example, your personal startup file might set and
    export your environment variables to be copied to future children, whereas *$HOME/.bashrc*
    might define all your aliases (which are not copied to children).
  prefs: []
  type: TYPE_NORMAL
- en: Another consideration is whether you log into a graphical, windowing desktop
    environment (GNOME, Unity, KDE Plasma, etc.) where your login shell may be hidden.
    In this case, you might not care how the login shell behaves because you interact
    only with its children, so you might put most or all of your configuration into
    *$HOME/.bashrc*.^([4](ch06.xhtml#idm46586639963168)) On the other hand, if you
    primarily log in from a nongraphical terminal program such as an SSH client, then
    you directly interact with your login shell, so its configuration matters a lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'In each of these cases, it’s generally worthwhile to have your personal startup
    file source your personal initialization file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Whatever you do, try not to place identical configuration commands in two different
    configuration files. That’s a recipe for confusion, and it’s hard to maintain,
    because any change you make to one file you must remember to duplicate in the
    other (and you’ll forget, trust me). Instead, source one file from the other as
    I’ve shown.
  prefs: []
  type: TYPE_NORMAL
- en: Rereading a Configuration File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you change any startup or initialization file, you can force a running
    shell to reread it by sourcing the file, as explained in [“Environments and Initialization
    Files, the Short Version”](ch02.xhtml#section_environments1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Why the source Command Exists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why do you source a configuration file instead of making it executable with
    `chmod` and running it like a shell script? Because a script runs in a child process.
    Any commands in the script would not affect your intended (parent) shell. They
    would affect only the child, which exits, leaving you with nothing changed.
  prefs: []
  type: TYPE_NORMAL
- en: Traveling with Your Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you use many Linux machines in multiple locations, at some point you might
    want to install your carefully crafted configuration files on more than one machine.
    Don’t copy individual files from machine to machine—that approach leads to confusion
    eventually. Instead, store and maintain the files in a free account on [GitHub](https://github.com)
    or a similar software-development service with version control. Then you can download,
    install, and update your configuration files conveniently and consistently on
    any Linux machine. If you make a mistake editing a configuration file, you can
    roll back to a previous version by issuing a command or two. Version control is
    beyond the scope of this book; see [“Apply Version Control to Day-to-Day Files”](ch11.xhtml#section_git)
    to learn more about it.
  prefs: []
  type: TYPE_NORMAL
- en: If you aren’t comfortable with version control systems like Git or Subversion,
    store the configuration files on a simple file service like Dropbox, Google Drive,
    or OneDrive. Updates to your configuration files will be less convenient, but
    at least the files will be easily available for copying to other Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have met many Linux users who are puzzled by (or unaware of) parent and child
    processes, environments, and the purposes of the many shell configuration files.
    After reading this chapter, I hope you have a clearer picture of all these things.
    They come into play in [Chapter 7](ch07.xhtml#ch_running_commands) as powerful
    tools for running commands in flexible ways.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch06.xhtml#idm46586640310240-marker)) If you use a different shell, see
    also [Appendix B](app02.xhtml#appendix_shells).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch06.xhtml#idm46586640124848-marker)) I have trimmed the output selectively
    to display common environment variables. Your output is likely much longer and
    full of obscure variable names.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch06.xhtml#idm46586640055040-marker)) It’s complete except for traps,
    which “are reset to the values that the shell inherited from its parent at invocation”
    (`man bash`). I don’t discuss traps further in this book.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch06.xhtml#idm46586639963168-marker)) To make matters slightly more confusing,
    some desktop environments have their own shell configuration files. For example,
    GNOME has *$HOME/.gnomerc*, and the underlying X window system has *$HOME/.xinitrc*.
  prefs: []
  type: TYPE_NORMAL
