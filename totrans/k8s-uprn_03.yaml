- en: Chapter 3\. Deploying a Kubernetes Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 部署Kubernetes集群
- en: Now that you have successfully built an application container, the next step
    is to learn how to transform it into a complete, reliable, scalable distributed
    system. To do that, you need a working Kubernetes cluster. At this point, there
    are cloud-based Kubernetes services in most public clouds that make it easy to
    create a cluster with a few command-line instructions. We highly recommend this
    approach if you are just getting started with Kubernetes. Even if you are ultimately
    planning on running Kubernetes on bare metal, it’s a good way to quickly get started
    with Kubernetes, learn about Kubernetes itself, and then learn how to install
    it on physical machines. Furthermore, managing a Kubernetes cluster is a complicated
    task in itself, and, for most people, it makes sense to defer this management
    to the cloud—especially when the management service is free in most clouds.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经成功构建了一个应用容器，下一步是学习如何将其转变为一个完整、可靠、可扩展的分布式系统。为了做到这一点，您需要一个工作中的Kubernetes集群。在这一点上，大多数公共云都提供了基于云的Kubernetes服务，只需通过几条命令行指令即可轻松创建集群。如果您刚开始接触Kubernetes，我们强烈推荐这种方法。即使最终计划在裸机上运行Kubernetes，这也是一个快速开始学习Kubernetes、了解如何在物理机器上安装它的好方法。此外，管理一个Kubernetes集群本身就是一项复杂的任务，对于大多数人来说，将这种管理任务推迟到云端是有意义的，特别是当云端的管理服务在大多数云中都是免费的时候。
- en: Of course, using a cloud-based solution requires paying for those cloud-based
    resources as well as having an active network connection to the cloud. For these
    reasons, local development can be more attractive, and in that case, the `minikube`
    tool provides an easy-to-use way to get a local Kubernetes cluster up and running
    in a VM on your local laptop or desktop. Though this is a nice option, `minikube`
    only creates a single-node cluster, which doesn’t quite demonstrate all of the
    aspects of a complete Kubernetes cluster. For that reason, we recommend people
    start with a cloud-based solution, unless it really doesn’t work for their situation.
    A more recent alternative is to run a Docker-in-Docker cluster, which can spin
    up a multinode cluster on a single machine. This project is still in beta, though,
    so keep in mind that you may encounter unexpected issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，使用基于云的解决方案需要支付这些基于云的资源的费用，并且需要与云端保持活动的网络连接。出于这些原因，本地开发可能更具吸引力，在这种情况下，`minikube`工具提供了在本地笔记本电脑或台式机的虚拟机上快速启动本地Kubernetes集群的简便方法。虽然这是一个不错的选择，但`minikube`只创建一个单节点集群，这并不能完全展示出完整Kubernetes集群的所有方面。因此，我们建议人们从基于云的解决方案开始，除非真的不适合他们的情况。一个较新的选择是在单台机器上运行Docker-in-Docker集群，这可以在单台机器上快速启动多节点集群。尽管这是一个不错的选择，但请记住，这个项目仍处于测试阶段，可能会遇到意外的问题。
- en: If you truly insist on starting on bare metal, see the [Appendix](app01.xhtml#rpi_cluster)
    at the end of this book for instructions for building a cluster from a collection
    of Raspberry Pi single-board computers. These instructions use the `kubeadm` tool
    and can be adapted to other machines beyond Raspberry Pis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实坚持要从裸机开始，请参阅本书末尾的附录（app01.xhtml#rpi_cluster），了解如何使用一系列树莓派单板计算机构建集群的说明。这些说明使用`kubeadm`工具，并可以适配树莓派之外的其他机器。
- en: Installing Kubernetes on a Public Cloud Provider
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在公共云提供商上安装Kubernetes
- en: 'This chapter covers installing Kubernetes on the three major cloud providers:
    the Google Cloud Platform, Microsoft Azure, and Amazon Web Services.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在三大主要云提供商（Google Cloud Platform、Microsoft Azure和Amazon Web Services）上安装Kubernetes的方法。
- en: If you choose to use a cloud provider to manage Kubernetes, you need to install
    only one of these options; once you have a cluster configured and ready to go,
    you can skip to [“The Kubernetes Client”](#kubectl_gs), unless you would prefer
    to install Kubernetes elsewhere.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用云提供商来管理Kubernetes，您只需要安装其中一种选项；一旦配置好一个集群并准备就绪，您可以跳到[“Kubernetes客户端”](#kubectl_gs)，除非您希望在其他地方安装Kubernetes。
- en: Installing Kubernetes with Google Kubernetes Engine
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google Kubernetes Engine安装Kubernetes
- en: The Google Cloud Platform (GCP) offers a hosted Kubernetes-as-a-Service called
    Google Kubernetes Engine (GKE). To get started with GKE, you need a Google Cloud
    Platform account with billing enabled and the [`gcloud` tool](https://oreil.ly/uuUQD)
    installed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Platform（GCP）提供了一种托管的Kubernetes即服务，称为Google Kubernetes Engine（GKE）。要开始使用GKE，您需要一个启用计费的Google
    Cloud Platform账户，并安装了[`gcloud`工具](https://oreil.ly/uuUQD)。
- en: 'Once you have `gcloud` installed, set a default zone:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`gcloud`，设置默认区域：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then you can create a cluster:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以创建一个集群：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will take a few minutes. When the cluster is ready, you can get credentials
    for the cluster using:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将花费几分钟时间。集群就绪后，您可以使用以下命令获取集群的凭据：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run into trouble, you can find the complete instructions for creating
    a GKE cluster in the [Google Cloud Platform documentation](https://oreil.ly/HMwnD).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到问题，您可以在[Google Cloud Platform文档](https://oreil.ly/HMwnD)中找到创建GKE集群的完整说明。
- en: Installing Kubernetes with Azure Kubernetes Service
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Azure Kubernetes Service安装Kubernetes
- en: 'Microsoft Azure offers a hosted Kubernetes-as-a-Service as part of the Azure
    Container Service. The easiest way to get started with Azure Container Service
    is to use the built-in Azure Cloud Shell in the Azure portal. You can activate
    the shell by clicking the shell icon in the upper-right toolbar:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure作为Azure容器服务的一部分提供托管的Kubernetes即服务。开始使用Azure容器服务的最简单方法是使用Azure门户中内置的Azure
    Cloud Shell。您可以通过单击右上角工具栏中的shell图标来激活Shell：
- en: '![kur3 03in01](assets/kur3_03in01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![kur3 03in01](assets/kur3_03in01.png)'
- en: The shell has the `az` tool automatically installed and configured to work with
    your Azure environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Shell已经自动安装并配置了`az`工具，可以与您的Azure环境一起使用。
- en: Alternatively, you can install the [`az` CLI](https://oreil.ly/xpLCa) on your
    local machine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在本地计算机上安装[`az` CLI](https://oreil.ly/xpLCa)。
- en: 'When you have the shell up and working, you can run:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的Shell准备就绪时，可以运行以下命令：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the resource group is created, you can create a cluster using:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建资源组后，您可以使用以下命令创建集群：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will take a few minutes. Once the cluster is created, you can get credentials
    for the cluster with:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将花费几分钟时间。创建集群后，您可以使用以下命令获取集群的凭据：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you don’t already have the `kubectl` tool installed, you can install it
    using:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装`kubectl`工具，可以使用以下命令安装它：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can find complete instructions for installing Kubernetes on Azure in the
    [Azure documentation](https://oreil.ly/hsLWA).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Azure文档](https://oreil.ly/hsLWA)中找到在Azure上安装Kubernetes的完整说明。
- en: Installing Kubernetes on Amazon Web Services
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Amazon Web Services上安装Kubernetes
- en: Amazon offers a managed Kubernetes service called Elastic Kubernetes Service
    (EKS). The easiest way to create an EKS cluster is via the [open source `eksctl`
    command-line tool](https://eksctl.io).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了一个名为弹性Kubernetes服务（EKS）的托管Kubernetes服务。创建EKS集群的最简单方法是使用[开源`eksctl`命令行工具](https://eksctl.io)。
- en: 'Once you have `eksctl` installed and in your path, you can run the following
    command to create a cluster:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并配置了`eksctl`并将其添加到路径中，您可以运行以下命令创建集群：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For more details on installation options (such as node size and more), view
    the help using this command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安装选项的更多详细信息（如节点大小等），请使用此命令查看帮助：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The cluster installation includes the right configuration for the `kubectl`
    command-line tool. If you don’t already have `kubectl` installed, follow the instructions
    in the [documentation](https://oreil.ly/rorrD).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 集群安装包括`kubectl`命令行工具的正确配置。如果您尚未安装`kubectl`，请按照[文档](https://oreil.ly/rorrD)中的说明操作。
- en: Installing Kubernetes Locally Using minikube
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用minikube本地安装Kubernetes
- en: If you need a local development experience, or you don’t want to pay for cloud
    resources, you can install a simple single-node cluster using `minikube`. Alternatively,
    if you have already installed Docker Desktop, it comes bundled with a single-machine
    installation of Kubernetes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要本地开发体验或不想支付云资源费用，可以使用`minikube`安装一个简单的单节点集群。或者，如果已经安装了Docker Desktop，则它附带了一个单机安装的Kubernetes。
- en: While `minikube` (or Docker Desktop) is a good simulation of a Kubernetes cluster,
    it’s really intended for local development, learning, and experimentation. Because
    it only runs in a VM on a single node, it doesn’t provide the reliability of a
    distributed Kubernetes cluster. In addition, certain features described in this
    book require integration with a cloud provider. These features are either not
    available or work in a limited way with `minikube`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`minikube`（或Docker Desktop）是Kubernetes集群的良好模拟，但它实际上是为本地开发、学习和实验设计的。因为它只在单节点的虚拟机上运行，所以不提供分布式Kubernetes集群的可靠性。此外，本书中描述的某些功能需要与云提供商集成。这些功能在`minikube`中要么不可用，要么在有限的方式下工作。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You need to have a hypervisor installed on your machine to use `minikube`. For
    Linux and macOS, this is generally [VirtualBox](https://virtualbox.org). On Windows,
    the Hyper-V hypervisor is the default option. Make sure you install the hypervisor
    before using `minikube`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在机器上安装一个虚拟化软件来使用 `minikube`。对于 Linux 和 macOS，通常是 [VirtualBox](https://virtualbox.org)。在
    Windows 上，默认选择是 Hyper-V 虚拟化软件。确保在使用 `minikube` 之前安装虚拟化软件。
- en: 'You can find the `minikube` tool on [GitHub](https://oreil.ly/iHcuV). There
    are binaries for Linux, macOS, and Windows that you can download. Once you have
    the `minikube` tool installed, you can create a local cluster using:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [GitHub](https://oreil.ly/iHcuV) 上找到 `minikube` 工具。有适用于 Linux、macOS 和 Windows
    的二进制文件可供下载。安装了 `minikube` 工具后，你可以使用以下命令创建一个本地集群：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will create a local VM, provision Kubernetes, and create a local `kubectl`
    configuration that points to that cluster. As mentioned previously, this cluster
    only has a single node, so while it is useful, it has some differences with most
    production deployments of Kubernetes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个本地虚拟机，配置 Kubernetes 并创建一个本地的 `kubectl` 配置，指向该集群。如前所述，该集群只有一个节点，因此虽然它很有用，但与大多数生产部署的
    Kubernetes 有一些不同。
- en: 'When you are done with your cluster, you can stop the VM with:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成了对集群的使用，可以停止虚拟机：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to remove the cluster, you can run:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想删除集群，可以运行：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Running Kubernetes in Docker
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker 中运行 Kubernetes
- en: A different approach to running a Kubernetes cluster, which has been developed
    more recently, uses Docker containers to simulate multiple Kubernetes nodes instead
    of running everything in a virtual machine. The [kind project](https://kind.sigs.k8s.io)
    provides a great experience for launching and managing test clusters in Docker.
    (*kind* stands for Kubernetes IN Docker.) kind is still a work in progress (pre
    1.0), but is widely used by those building Kubernetes for fast and easy testing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一种不同的运行 Kubernetes 集群的方法是最近开发的，它使用 Docker 容器来模拟多个 Kubernetes 节点，而不是在虚拟机中运行所有内容。[kind
    项目](https://kind.sigs.k8s.io) 提供了在 Docker 中启动和管理测试集群的良好体验。(*kind* 代表 Kubernetes
    IN Docker.) kind 目前仍在开发中（预 1.0），但被那些构建用于快速和简单测试的 Kubernetes 工具广泛使用。
- en: 'Installation instructions for your platform can be found [at the kind site](https://oreil.ly/EOgJn).
    Once you get it installed, creating a cluster is as easy as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [kind 网站](https://oreil.ly/EOgJn) 找到适合你平台的安装说明。一旦安装完成，创建集群就像这样简单：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Kubernetes Client
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 客户端
- en: 'The official Kubernetes client is `kubectl`: a command-line tool for interacting
    with the Kubernetes API. `kubectl` can be used to manage most Kubernetes objects,
    such as Pods, ReplicaSets, and Services. `kubectl` can also be used to explore
    and verify the overall health of the cluster.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Kubernetes 客户端是 `kubectl`：一个用于与 Kubernetes API 交互的命令行工具。`kubectl` 可用于管理大多数
    Kubernetes 对象，例如 Pods、ReplicaSets 和 Services。`kubectl` 还可以用来探索和验证集群的整体健康状态。
- en: We’ll use the `kubectl` tool to explore the cluster you just created.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `kubectl` 工具来探索刚刚创建的集群。
- en: Checking Cluster Status
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查集群状态
- en: 'The first thing you can do is check the version of the cluster that you are
    running:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事是检查你正在运行的集群的版本：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will display two different versions: the version of the local `kubectl`
    tool, as well as the version of the Kubernetes API server.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示两个不同的版本：本地 `kubectl` 工具的版本以及 Kubernetes API 服务器的版本。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Don’t worry if these versions are different. The Kubernetes tools are backward-
    and forward-compatible with different versions of the Kubernetes API as long as
    you stay within two minor versions for both the tools and the cluster and don’t
    try to use newer features on an older cluster. Kubernetes follows the semantic
    versioning specification, where the minor version is the middle number (e.g.,
    the 18 in 1.18.2). However, you will want to make sure that you are within the
    supported version skew, which is three versions. If you are not, you may run into
    problems.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些版本不同也不要担心。只要保持工具和集群的两个次要版本号在两个范围内，并且不尝试在较旧的集群上使用更新的功能，Kubernetes 工具与 Kubernetes
    API 的各个版本都向后兼容和向前兼容。Kubernetes 遵循语义化版本规范，次要版本是中间的数字（例如，在 1.18.2 中是 18）。但是，你需要确保你在支持的版本偏差范围内，该范围为三个版本。如果不是，可能会遇到问题。
- en: Now that we’ve established that you can communicate with your Kubernetes cluster,
    we’ll explore the cluster in more depth.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确认你可以与 Kubernetes 集群通信，我们将更深入地探索该集群。
- en: 'First, you can get a simple diagnostic for the cluster. This is a good way
    to verify that your cluster is generally healthy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以为集群获取一个简单的诊断。这是验证您的集群通常是否健康的好方法：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output should look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As Kubernetes changes and improves over time, the output of the `kubectl` command
    sometimes changes. Don’t worry if the output doesn’t look exactly identical to
    what is shown in the examples in this book.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Kubernetes 的变化和改进，`kubectl` 命令的输出有时会发生变化。如果输出与本书示例中显示的不完全相同，不必担心。
- en: You can see here the components that make up the Kubernetes cluster. The `controller-manager`
    is responsible for running various controllers that regulate behavior in the cluster;
    for example, ensuring that all of the replicas of a service are available and
    healthy. The `scheduler` is responsible for placing different Pods onto different
    nodes in the cluster. Finally, the `etcd` server is the storage for the cluster
    where all of the API objects are stored.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里看到组成 Kubernetes 集群的各个组件。`controller-manager` 负责运行各种控制器，以调节集群中的行为，例如确保服务的所有副本可用且健康。`scheduler`
    负责将不同的 Pod 放置到集群中的不同节点上。最后，`etcd` 服务器是集群的存储，其中存储着所有的 API 对象。
- en: Listing Kubernetes Nodes
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出 Kubernetes 节点
- en: 'Next, you can list out all of the nodes in your cluster:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以列出集群中的所有节点：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can see this is a four-node cluster that’s been up for 45 days. In Kubernetes,
    nodes are separated into `control-plane` nodes that contain containers like the
    API server, scheduler, etc., which manage the cluster, and `worker` nodes where
    your containers will run. Kubernetes won’t generally schedule work onto `control-plane`
    nodes to ensure that user workloads don’t harm the overall operation of the cluster.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这是一个已经运行了 45 天的四节点集群。在 Kubernetes 中，节点被分为包含 API 服务器、调度程序等容器的 `control-plane`
    节点，这些节点管理集群，并且 `worker` 节点上运行您的容器。Kubernetes 通常不会将工作调度到 `control-plane` 节点上，以确保用户工作负载不会损害集群的整体运行。
- en: 'You can use the `kubectl describe` command to get more information about a
    specific node, such as `kube1`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `kubectl describe` 命令获取有关特定节点（如 `kube1`）的更多信息：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, you see basic information about the node:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您会看到节点的基本信息：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can see that this node is running the Linux OS on an ARM processor.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到此节点正在运行 Linux 操作系统，使用的是 ARM 处理器。
- en: 'Next, you see information about the operation of `kube1` itself (dates have
    been removed from this output for concision):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您会看到关于 `kube1` 本身操作的信息（本输出已删除日期以简明起见）：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'These statuses show that the node has sufficient disk and memory space and
    is reporting that it is healthy to the Kubernetes master. Next, there is information
    about the capacity of the machine:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些状态显示节点具有足够的磁盘和内存空间，并向 Kubernetes 主节点报告其健康状态。接下来，有关机器容量的信息：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then there is information about the software on the node, including the version
    of Docker that is running, the versions of Kubernetes and the Linux kernel, and
    more:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是有关节点上软件的信息，包括正在运行的 Docker 版本、Kubernetes 和 Linux 内核的版本等：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, there is information about the Pods that are currently running on
    this node:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有关当前在此节点上运行的 Pods 的信息：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: From this output, you can see the Pods on the node (e.g., the `kube-dns` Pod
    that supplies DNS services for the cluster), the CPU and memory that each Pod
    is requesting from the node, as well as the total resources requested. It’s worth
    noting here that Kubernetes tracks both the *requests* and the upper *limits*
    for resources for each Pod that runs on a machine. The difference between requests
    and limits is described in detail in [Chapter 5](ch05.xhtml#pods), but in a nutshell,
    resources requested by a Pod are guaranteed to be present on the node, while a
    Pod’s limit is the maximum amount of a given resource that a Pod can consume.
    A Pod’s limit can be higher than its request, in which case the extra resources
    are supplied on a best-effort basis. They are not guaranteed to be present on
    the node.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从此输出中，您可以看到节点上的 Pods（例如为集群提供 DNS 服务的 `kube-dns` Pod）、每个 Pod 从节点请求的 CPU 和内存，以及所请求的总资源。值得注意的是，Kubernetes
    跟踪每个 Pod 请求的资源和上限。关于请求和限制之间的差异在 [第 5 章](ch05.xhtml#pods) 中有详细描述，但简而言之，Pod 请求的资源保证在节点上存在，而
    Pod 的限制是 Pod 可以消耗的给定资源的最大量。如果 Pod 的限制高于其请求，则额外的资源将按最佳努力原则提供。不能保证这些资源在节点上存在。
- en: Cluster Components
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群组件
- en: One of the interesting aspects of Kubernetes is that many of the components
    that make up the Kubernetes cluster are actually deployed using Kubernetes itself.
    We’ll take a look at a few of these. These components use a number of the concepts
    that we’ll introduce in later chapters. All of these components run in the `kube-system`
    namespace.^([1](ch03.xhtml#idm45664080018160))
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的一个有趣的方面是，构成 Kubernetes 集群的许多组件实际上是使用 Kubernetes 自身部署的。我们将介绍其中一些。这些组件使用了我们后面章节将介绍的多个概念。所有这些组件都在
    `kube-system` 命名空间中运行。^([1](ch03.xhtml#idm45664080018160-marker))
- en: Kubernetes Proxy
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes Proxy
- en: 'The Kubernetes proxy is responsible for routing network traffic to load-balanced
    services in the Kubernetes cluster. To do its job, the proxy must be present on
    every node in the cluster. Kubernetes has an API object named DaemonSet, which
    you will learn about in [Chapter 11](ch11.xhtml#daemon_sets), that is used in
    many clusters to accomplish this. If your cluster runs the Kubernetes proxy with
    a DaemonSet, you can see the proxies by running:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 代理负责将网络流量路由到 Kubernetes 集群中负载均衡的服务。为了完成其工作，代理必须存在于集群中的每个节点上。Kubernetes
    有一个名为 DaemonSet 的 API 对象，你将在[第11章](ch11.xhtml#daemon_sets)中学习，许多集群都使用它来完成这项任务。如果你的集群使用
    DaemonSet 运行 Kubernetes 代理，可以通过运行以下命令查看代理：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Depending on how your cluster is set up, the DaemonSet for the `kube-proxy`
    may be named something else, or it’s possible that it won’t use a DaemonSet at
    all. Regardless, the `kube-proxy` container should be running on all nodes in
    a cluster.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 根据集群的设置方式，`kube-proxy` 的 DaemonSet 可能会有其他名称，或者可能根本不使用 DaemonSet。无论如何，`kube-proxy`
    容器应该在集群中的所有节点上运行。
- en: Kubernetes DNS
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes DNS
- en: 'Kubernetes also runs a DNS server, which provides naming and discovery for
    the services that are defined in the cluster. This DNS server also runs as a replicated
    service on the cluster. Depending on the size of your cluster, you may see one
    or more DNS servers running in your cluster. The DNS service is run as a Kubernetes
    deployment, which manages these replicas (this may also be named `coredns` or
    some other variant):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 还运行一个 DNS 服务器，为集群中定义的服务提供命名和发现功能。这个 DNS 服务器也作为集群中的一个复制服务运行。根据集群的大小，你可能会看到一个或多个运行在集群中的
    DNS 服务器。DNS 服务作为一个 Kubernetes 部署运行，管理这些副本（可能也被命名为 `coredns` 或其他变种）：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There is also a Kubernetes service that performs load balancing for the DNS
    server:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 还有一个执行 DNS 服务器负载平衡的 Kubernetes 服务：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This shows that the DNS service for the cluster has the address 10.96.0.10\.
    If you log in to a container in the cluster, you’ll see that this has been populated
    into the */etc/resolv.conf* file for the container.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了集群的 DNS 服务地址为 10.96.0.10。如果你登录到集群中的一个容器中，你会看到这个地址已经被填写到了容器的 */etc/resolv.conf*
    文件中。
- en: Kubernetes UI
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes UI
- en: If you want to visualize your cluster in a graphical user interface, most of
    the cloud providers integrate such a visualization into the GUI for their cloud.
    If your cloud provider doesn’t provide such a UI, or you prefer an in-cluster
    GUI, there is a community supported GUI that you can install. See the [documentation](https://oreil.ly/wKfEx)
    on how to install the dashboard for these clusters. You can also use extensions
    for development environments like Visual Studio Code to see the state of your
    cluster at a glance.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在图形用户界面中可视化你的集群，大多数云提供商都会在其云的 GUI 中集成这样的可视化功能。如果你的云提供商没有提供这样的 UI，或者你更喜欢一个集群内的
    GUI，可以安装一个由社区支持的 GUI。查看[文档](https://oreil.ly/wKfEx)了解如何为这些集群安装仪表板。你也可以使用像 Visual
    Studio Code 这样的开发环境扩展来一览你的集群状态。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Hopefully at this point you have a Kubernetes cluster (or three) up and running
    and you’ve used a few commands to explore the cluster you have created. Next,
    we’ll spend some more time exploring the CLI to that Kubernetes cluster and teach
    you how to master the `kubectl` tool. Throughout the rest of the book, you’ll
    be using `kubectl` and your test cluster to explore the various objects in the
    Kubernetes API.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到目前为止你已经建立并运行了一个 Kubernetes 集群（或三个），并且使用了一些命令来探索你创建的集群。接下来，我们将花一些时间探索 CLI，以及教你如何掌握
    `kubectl` 工具。在本书的其余部分，你将使用 `kubectl` 和你的测试集群来探索 Kubernetes API 中的各种对象。
- en: ^([1](ch03.xhtml#idm45664080018160-marker)) As you’ll learn in the next chapter,
    a namespace in Kubernetes is an entity for organizing Kubernetes resources. You
    can think of it like a folder in a filesystem.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.xhtml#idm45664080018160-marker)) 正如你将在下一章中学到的，Kubernetes 中的命名空间是用来组织
    Kubernetes 资源的实体。你可以把它想象成文件系统中的一个文件夹。
