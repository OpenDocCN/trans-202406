["```\nyarn add -D vue-router@4\n```", "```\n/**router/index.ts */\n//import the required component modules\n\nconst homeRoute = {\n  path: '/',\n  name: 'home',\n  component: HomeView\n}\n```", "```\n/**router/index.ts */\nimport { type RouteRecordRaw } from \"vue-router\";\n//import the required component modules\n\nconst routes:RouteRecordRaw[]  = [\n  {\n    path: '/',\n    name: 'home',\n    component: HomeView\n  },\n  {\n    path: '/about',\n    name: 'about',\n    component: AboutView\n  },\n  {\n    path: '/pizzas',\n    name: 'pizzas',\n    component: PizzasView\n  },\n  {\n    path: '/contact',\n    name: 'contact',\n    component: ContactView\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: LoginView\n  }\n]\n```", "```\n/**router/index.ts */\nimport {\n  createRouter,\n  createWebHistory,\n  type RouteRecordRaw\n} from 'vue-router';\n\nconst routes: RouteRecordRaw[] = [/**... */]\n\nexport const router = createRouter({\n  history: createWebHistory(\"https://your-domain-name\"),\n  routes\n})\n```", "```\n/**router/index.ts */\nimport {\n  createRouter,\n  createWebHistory,\n  type RouteRecordRaw\n} from 'vue-router';\n\nconst routes: RouteRecordRaw[] = [/**... */]\n\nexport const router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes\n})\n```", "```\n/**main.ts */\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { router } from './router'\n\nconst app = createApp(App)\n\napp.use(router)\n\napp.mount('#app')\n```", "```\n/**App.vue */\n<script setup lang=\"ts\">\nimport { RouterView } from 'vue-router'\n</script>\n<template>\n  <RouterView />\n</template>\n```", "```\n/**App.vue */\n<template>\n  <RouterView class=\"view\" />\n</template>\n```", "```\n  <router-link to=\"/about\">About</router-link>\n```", "```\n  <router-link :to=\"{ name: 'about' }\">About</router-link>\n```", "```\n  <router-link custom to=\"/about\" v-slot=\"{ navigate }\" >\n    <button @click=\"navigate\">About</button>\n  </router-link>\n```", "```\n/**NavBar.vue */\n\n<template>\n  <nav>\n    <router-link :to=\"{ name: 'home' }\">Home</router-link>\n    <router-link :to=\"{ name: 'about' }\">About</router-link>\n    <router-link :to=\"{ name: 'pizzas' }\">Pizzas</router-link>\n    <router-link :to=\"{ name: 'contact' }\">Contact</router-link>\n    <router-link :to=\"{ name: 'login' }\">Login</router-link>\n  </nav>\n</template>\n```", "```\n/**NavBar.vue */\n\n<style scoped>\nnav {\n  display: flex;\n  gap: 30px;\n  justify-content: center;\n}\n\n.router-link-active, .router-link-exact-active {\n  text-decoration: underline;\n}\n</style>\n```", "```\n<router-link :to=\"{ name: 'pizzas', query: { id: 1 } }\">Pizza 1</router-link>\n```", "```\n<a href=\"/pizzas?id=1\">Pizza 1</a>\n```", "```\n<template>\n  <div>\n    <h1>Pizzas</h1>\n    <p v-if=\"pizzaId\">Pizza ID: {{ pizzaId }}</p>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { useRoute } from \"vue-router\";\n\nconst route = useRoute();\nconst pizzaId = route.query?.id;\n</script>\n```", "```\n<template>\n  <div class=\"pizzas-view--container\">\n    <h1>Pizzas</h1>\n    <ul>\n      <li v-for=\"pizza in searchResults\" :key=\"pizza.id\">\n        <PizzaCard :pizza=\"pizza\" />\n      </li>\n    </ul>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport PizzaCard from \"@/components/PizzaCard.vue\";\nimport { usePizzas } from \"@/composables/usePizzas\";\n\nconst { pizzas } = usePizzas();\n</script>\n```", "```\nimport { computed, ref, type Ref } from \"vue\";\n\ntype UseSearchProps = {\n  items: Ref<any[]>;\n  filter?: string;\n  defaultSearch?: string;\n};\n\nexport const useSearch = ({\n  items,\n  filter = \"title\",\n  defaultSearch = \"\",\n}: UseSearchProps) => {\n  const search = ref(defaultSearch);\n  const searchResults = computed(() => {\n    const searchTerm = search.value.toLowerCase();\n\n    if (searchTerm === \"\") {\n      return items.value;\n    }\n\n    return items.value.filter((item) => {\n      const itemValue = item[filter]?.toLowerCase()\n          return itemValue.includes(searchTerm);\n        });\n  });\n\n  return { search, searchResults };\n};\n```", "```\n<template>\n  <!--...other code -->\n    <li v-for=\"pizza in searchResults\" :key=\"pizza.id\">\n      <PizzaCard :pizza=\"pizza\" />\n    </li>\n  <!--...other code -->\n</template>\n<script lang=\"ts\" setup>\n/**...other imports */\nimport { useRoute } from \"vue-router\";\nimport { useSearch } from \"@/composables/useSearch\";\nimport type { Pizza } from \"@/types/Pizza\";\n\n/**...other code */\nconst route = useRoute();\n\ntype PizzaSearch = {\n  search: Ref<string>;\n  searchResults: Ref<Pizza[]>;\n};\n\nconst { search, searchResults }: PizzaSearch = useSearch({\n  items: pizzas,\n  defaultSearch: route.query?.search as string,\n});\n</script>\n```", "```\n<template>\n  <!--...other code -->\n  <input v-model=\"search\" placeholder=\"Search for a pizza\" />\n  <!--...other code -->\n</template>\n```", "```\n/**...other imports */\nimport { useRoute, useRouter } from \"vue-router\";\n\n/**...other code */\nconst router = useRouter();\n```", "```\n/**...other imports */\nimport { watch } from 'vue';\n\n/**...other code */\nwatch(search, (value, prevValue) => {\n  if (value === prevValue) return;\n  router.replace({ query: { search: value } });\n});\n```", "```\nimport {\n  type RouteLocationNormalizedLoaded,\n  type RouteRecordRaw,\n} from \"vue-router\";\n\nconst routes: RouteRecordRaw = [\n  /** other routes */\n  {\n    path: \"/pizzas\",\n    name: \"pizzas\",\n    component: PizzasView,\n    props: (route: RouteLocationNormalizedLoaded) => ({\n      searchTerm: route.query?.search || \"\",\n    }),\n  },\n];\n```", "```\nconst props = defineProps({\n  searchTerm: {\n    type: String,\n    required: false,\n    default: \"\",\n  },\n});\n\nconst { search, searchResults }: PizzaSearch = useSearch({\n  items: pizzas,\n  defaultSearch: props.searchTerm,\n});\n```", "```\nconst user = {\n  isAuthenticated: false,\n};\n\nrouter.beforeEach((to, from, next) => {\n  if (to.name === \"pizzas\" && !user.isAuthenticated) {\n    next({ name: \"login\" });\n  } else {\n    next();\n  }\n});\n```", "```\nrouter.afterEach((to, from) => {\n  if (to.name === \"login\") {\n    user.isAuthenticated = true;\n  }\n});\n```", "```\nconst routes: RouteRecordRaw = [\n  /** other routes */\n  {\n    path: \"/pizzas\",\n    name: \"pizzas\",\n    component: PizzasView,\n    props: true,\n    beforeEnter: async (to, from, next) => {\n      to.params.searchTerm = (to.query.search || \"\") as string;\n\n      next()\n    },\n  },\n];\n```", "```\nimport { onBeforeRouteLeave } from \"vue-router\";\n\nonBeforeRouteLeave((to, from, next) => {\n  const answer = window.confirm(\"Are you sure you want to leave?\");\n\n  next(!!answer);\n});\n```", "```\n  /contact/faq\n  /contact/form\n```", "```\nconst routes = [\n  /**...other routes */\n  {\n    path: \"/contact\",\n    name: \"contact\",\n    component: ContactView,\n    children: [\n      {\n        path: \"faq\",\n        name: \"contact-faq\",\n        component: ContactFaqView,\n      },\n      {\n        path: \"form\",\n        name: \"contact-form\",\n        component: ContactFormView,\n      },\n    ],\n  },\n];\n```", "```\n<template>\n  <div class=\"contact-view--container\">\n    <h1>This is the contact page</h1>\n    <nav>\n      <router-link to=\"/contact/faq\">FAQs</router-link>\n      <router-link to=\"/contact/form\">Contact Us</router-link>\n    </nav>\n    <router-view />\n  </div>\n</template>\n```", "```\nconst routes = [\n  /**...other routes */\n  {\n    path: \"/contact\",\n    children: [\n      /**... other children */,\n      {\n        path: \"\",\n        name: \"contact\",\n        component: ContactView,\n      }\n    ],\n  },\n];\n```", "```\nconst routes = [\n  /**...other routes */\n  {\n    path: \"/pizzas\",\n    /**...other configurations */\n    children: [{\n        path: ':id',\n        name: 'pizza',\n        component: PizzaView,\n    }, {\n        path: '',\n        name: 'pizzas',\n        component: PizzasView,\n    }]\n  },\n]\n```", "```\nconst routes = [\n  /**...other routes */\n  {\n    path: \"/pizzas\",\n    /**...other configurations */\n    children: [{\n        path: ':id',\n        name: 'pizza',\n        component: PizzaView,\n        props: true,\n    },\n    /**...other nested routes */\n    ],\n  },\n]\n```", "```\nimport { usePizzas } from \"@/composables/usePizzas\";\n\nconst props = defineProps({\n  id: {\n    type: String,\n    required: true,\n  },\n});\n\nconst { pizzas } = usePizzas();\n\nconst pizza = pizzas.value.find((pizza) => pizza.id === props.id);\n```", "```\n<template>\n  <section v-if=\"pizza\" class=\"pizza--container\">\n    <img :src=\"pizza.image\" :alt=\"pizza.title\" width=\"500\" />\n    <div class=\"pizza--details\">\n      <h1>{{ pizza.title }}</h1>\n      <div>\n        <p>{{ pizza.description }}</p>\n        <div class=\"pizza-stock--section\">\n          <span>Stock: {{ pizza.quantity || 0 }}</span>\n          <span>Price: ${{ pizza.price }}</span>\n        </div>\n      </div>\n    </div>\n  </section>\n  <p v-else>No pizza found</p>\n</template>\n```", "```\n<template>\n  <button @click=\"router.back()\">Back</button>\n</template>\n<script setup lang=\"ts\">\nimport { useRouter } from \"vue-router\";\n\nconst router = useRouter();\n</script>\n```", "```\n<template>\n  <button @click=\"router.forward()\">Forward</button>\n</template>\n<script setup lang=\"ts\">\nimport { useRouter } from \"vue-router\";\n\nconst router = useRouter();\n</script>\n```", "```\n/**router/index.ts */\n\nconst routes = [\n  /**... */\n  {\n    path: '/:pathMatch(.*)*',\n    name: 'error',\n    component: ErrorView\n  }\n]\n```", "```\n<!--ErrorView.vue -->\n\n<template>\n  <h1>404 - Page not found</h1>\n</template>\n```", "```\n<!--ErrorView.vue -->\n\n<template>\n  <h1>404 - Page not found</h1>\n  <p>Path: {{ route.path }}</p>\n</template>\n<script lang=\"ts\" setup>\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\n</script>\n```", "```\n/**router/index.ts */\n\nconst routes = [\n  /**... */\n  {\n    path: '/:pathMatch(.*)*',\n    redirect: { name: 'home' }\n  }\n]\n```"]