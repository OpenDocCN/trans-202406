["```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: sharevol\nspec:\n  containers:\n  - name: c1\n    image: ubuntu:20.04\n    command:\n      - \"bin/bash\"\n      - \"-c\"\n      - \"sleep 10000\"\n    volumeMounts:\n      - name: xchange\n        mountPath: \"/tmp/xchange\"\n  - name: c2\n    image: ubuntu:20.04\n    command:\n      - \"bin/bash\"\n      - \"-c\"\n      - \"sleep 10000\"\n    volumeMounts:\n      - name: xchange\n        mountPath: \"/tmp/data\"\n  volumes:\n  - name: xchange\n    emptyDir: {}\n```", "```\n$ kubectl apply -f exchangedata.yaml\npod/sharevol created\n\n$ kubectl exec sharevol -c c1 -i -t -- bash\n[root@sharevol /]# mount | grep xchange\n/dev/vda1 on /tmp/xchange type ext4 (rw,relatime)\n[root@sharevol /]# echo 'some data' > /tmp/xchange/data\n[root@sharevol /]# exit\n\n$ kubectl exec sharevol -c c2 -i -t -- bash\n[root@sharevol /]# mount | grep /tmp/data\n/dev/vda1 on /tmp/data type ext4 (rw,relatime)\n[root@sharevol /]# cat /tmp/data/data\nsome data\n[root@sharevol /]# exit\n\n```", "```\n$ echo -n \"open sesame\" > ./passphrase\n\n```", "```\n$ kubectl create secret generic pp --from-file=./passphrase\nsecret/pp created\n\n$ kubectl describe secrets/pp\nName:           pp\nNamespace:      default\nLabels:         <none>\nAnnotations:    <none>\n\nType:   Opaque\n\nData\n====\npassphrase:     11 bytes\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: ppconsumer\nspec:\n  containers:\n  - name: shell\n    image: busybox:1.36\n    command:\n      - \"sh\"\n      - \"-c\"\n      - \"mount | grep access  && sleep 3600\"\n    volumeMounts:\n      - name: passphrase\n        mountPath: \"/tmp/access\"\n        readOnly: true\n  volumes:\n  - name: passphrase\n    secret:\n      secretName: pp\n```", "```\n$ kubectl apply -f ppconsumer.yaml\npod/ppconsumer created\n\n$ kubectl logs ppconsumer\ntmpfs on /tmp/access type tmpfs (ro,relatime,size=7937656k)\n\n```", "```\n$ kubectl exec ppconsumer -i -t -- sh\n\n/ # cat /tmp/access/passphrase\nopen sesame\n/ # exit\n\n```", "```\n$ kubectl get secret pp -o yaml | \\\n    grep passphrase | \\\n    cut -d\":\" -f 2 | \\\n    awk '{$1=$1};1' | \\\n    base64 --decode\nopen sesame\n\n```", "```\n$ kubectl create configmap nginxconfig \\\n    --from-literal=nginxgreeting=\"hello from nginx\"\nconfigmap/nginxconfig created\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.25.2\n    env:\n    - name: NGINX_GREETING\n      valueFrom:\n        configMapKeyRef:\n          name: nginxconfig\n          key: nginxgreeting\n```", "```\n$ kubectl apply -f nginxpod.yaml\npod/nginx created\n\n```", "```\n$ kubectl exec nginx -- printenv\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=nginx\nNGINX_GREETING=hello from nginx\nKUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443\n...\n\n```", "```\ndebug: true\nhome: ~/abc\n```", "```\n$ kubectl create configmap configfile --from-file=example.cfg\nconfigmap/configfile created\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: oreilly\nspec:\n  containers:\n  - image: busybox:1.36\n    command:\n      - sleep\n      - \"3600\"\n    volumeMounts:\n    - mountPath: /oreilly\n      name: oreilly\n    name: busybox\n  volumes:\n  - name: oreilly\n    configMap:\n      name: configfile\n```", "```\n$ kubectl exec -ti oreilly -- ls -l oreilly\ntotal 0\nlrwxrwxrwx   1 root   root   18 Mar 31 09:39 example.cfg -> ..data/example.cfg\n\n$ kubectl exec -ti oreilly -- cat oreilly/example.cfg\ndebug: true\nhome: ~/abc\n\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: hostpathpv\n  labels:\n    type: local\nspec:\n  storageClassName: manual\n  capacity:\n    storage: 1Gi\n  accessModes:\n  - ReadWriteOnce\n  hostPath:\n    path: \"/tmp/pvdata\"\n```", "```\n$ minikube ssh\n\n$ mkdir /tmp/pvdata && \\\n    echo 'I am content served from a delicious persistent volume' > \\\n    /tmp/pvdata/index.html\n\n$ cat /tmp/pvdata/index.html\nI am content served from a delicious persistent volume\n\n$ exit\n\n```", "```\n$ kubectl apply -f hostpath-pv.yaml\npersistentvolume/hostpathpv created\n\n$ kubectl get pv\nNAME        CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS      ...   ...   ...\nhostpathpv  1Gi        RWO           Retain          Available   ...   ...   ...\n\n$ kubectl describe pv/hostpathpv\nName:            hostpathpv\nLabels:          type=local\nAnnotations:     <none>\nFinalizers:      [kubernetes.io/pv-protection]\nStorageClass:    manual\nStatus:          Available\nClaim:\nReclaim Policy:  Retain\nAccess Modes:    RWO\nVolumeMode:      Filesystem\nCapacity:        1Gi\nNode Affinity:   <none>\nMessage:\nSource:\n    Type:          HostPath (bare host directory volume)\n    Path:          /tmp/pvdata\n    HostPathType:\nEvents:            <none>\n\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mypvc\nspec:\n  storageClassName: manual\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 200Mi\n```", "```\n$ kubectl apply -f pvc.yaml\npersistentvolumeclaim/mypvc created\n\n$ kubectl get pv\nNAME        CAPACITY  ACCESSMODES  ...  STATUS  CLAIM          STORAGECLASS\nhostpathpv  1Gi       RWO          ...  Bound   default/mypvc  manual\n\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-with-pv\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: webserver\n        image: nginx:1.25.2\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - mountPath: \"/usr/share/nginx/html\"\n          name: webservercontent\n      volumes:\n      - name: webservercontent\n        persistentVolumeClaim:\n          claimName: mypvc\n```", "```\n$ kubectl apply -f nginx-using-pv.yaml\ndeployment.apps/nginx-with-pv created\n\n$ kubectl get pvc\nNAME   STATUS  VOLUME      CAPACITY  ACCESSMODES  STORAGECLASS  AGE\nmypvc  Bound   hostpathpv  1Gi       RWO          manual        12m\n\n```", "```\n$ curl -k -s https://192.168.99.100/web\nI am content served from a delicious persistent volume\n\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n```", "```\n$ kubectl apply -f data.yaml\npersistentvolumeclaim/data created\n\n$ kubectl get pvc\nNAME  STATUS  VOLUME                                    CAPACITY ...  ...  ...\ndata  Bound   pvc-da58c85c-e29a-11e7-ac0b-080027fcc0e7  1Gi      ...  ...  ...\n\n$ kubectl get pv\nNAME                                      CAPACITY  ...  ...  ...  ...  ...\npvc-da58c85c-e29a-11e7-ac0b-080027fcc0e7  1Gi       ...  ...  ...  ...  ...\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: db\nspec:\n  containers:\n  - image: mysql:8.1.0\n    name: db\n    volumeMounts:\n    - mountPath: /var/lib/mysql\n      name: data\n    env:\n      - name: MYSQL_ROOT_PASSWORD\n        value: root\n  volumes:\n  - name: data\n    persistentVolumeClaim:\n      claimName: data\n```", "```\n$ kubectl get storageclass\nNAME                 PROVISIONER                ...\nstandard (default)   k8s.io/minikube-hostpath   ...\n\n$ kubectl get storageclass standard -o yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\n...\nprovisioner: k8s.io/minikube-hostpath\nreclaimPolicy: Delete\n\n```", "```\n$ kubectl get pv\nNAME                                       CAPACITY   ... CLAIM         ...\npvc-da58c85c-e29a-11e7-ac0b-080027fcc0e7   1Gi        ... default/data  ...\n\n$ kubectl get pv pvc-da58c85c-e29a-11e7-ac0b-080027fcc0e7 -o yaml\napiVersion: v1\nkind: PersistentVolume\n...\n  hostPath:\n    path: /tmp/hostpath-provisioner/default/data\n    type: \"\"\n...\n\n```", "```\n$ minikube ssh\n\n$ ls -l /tmp/hostpath-provisioner/default/data\ntotal 99688\n...\ndrwxr-x--- 2 999 docker     4096 Mar 31 11:11  mysql\n-rw-r----- 1 999 docker 31457280 Mar 31 11:11  mysql.ibd\nlrwxrwxrwx 1 999 docker       27 Mar 31 11:11  mysql.sock -> /var/run/mysqld/...\ndrwxr-x--- 2 999 docker     4096 Mar 31 11:11  performance_schema\n-rw------- 1 999 docker     1680 Mar 31 11:11  private_key.pem\n-rw-r--r-- 1 999 docker      452 Mar 31 11:11  public_key.pem\n...\n\n```", "```\n$ kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/\nreleases/download/v0.23.1/controller.yaml\n\n```", "```\n$ kubectl get customresourcedefinitions\nNAME                        CREATED AT\nsealedsecrets.bitnami.com   2023-01-18T09:23:33Z\n\n$ kubectl get pods -n kube-system  -l name=sealed-secrets-controller\nNAME                                         READY   STATUS    RESTARTS   AGE\nsealed-secrets-controller-7ff6f47d47-dd76s   1/1     Running   0          2m22s\n\n```", "```\n$ wget https://github.com/bitnami-labs/sealed-secrets/releases/download/\nv0.23.1/kubeseal-0.23.1-darwin-amd64.tar.gz\n\n$ tar xf kubeseal-0.23.1-darwin-amd64.tar.gz\n\n$ sudo install -m 755 kubeseal /usr/local/bin/kubeseal\n\n$ kubeseal --version\nkubeseal version: 0.23.1\n\n```", "```\n$ kubectl create secret generic oreilly --from-literal=password=root -o json \\\n    --dry-run=client > secret.json\n\n$ cat secret.json\n{\n    \"kind\": \"Secret\",\n    \"apiVersion\": \"v1\",\n    \"metadata\": {\n        \"name\": \"oreilly\",\n        \"creationTimestamp\": null\n    },\n    \"data\": {\n        \"password\": \"cm9vdA==\"\n    }\n}\n\n```", "```\n$ kubeseal < secret.json > sealedsecret.json\n\n$ cat sealedsecret.json\n{\n  \"kind\": \"SealedSecret\",\n  \"apiVersion\": \"bitnami.com/v1alpha1\",\n  \"metadata\": {\n    \"name\": \"oreilly\",\n    \"namespace\": \"default\",\n    \"creationTimestamp\": null\n  },\n  \"spec\": {\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"oreilly\",\n        \"namespace\": \"default\",\n        \"creationTimestamp\": null\n      }\n    },\n    \"encryptedData\": {\n      \"password\": \"AgCyN4kBwl/eLt7aaaCDDNlFDp5s93QaQZZ/mm5BJ6SK1WoKyZ45hz...\"\n    }\n  }\n}\n\n```", "```\n$ kubectl apply -f sealedsecret.json\nsealedsecret.bitnami.com/oreilly created\n\n```", "```\n$ kubectl get sealedsecret\nNAME      AGE\noreilly   14s\n\n```"]