- en: Chapter 2\. Collaboration in Practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although devops is a cultural movement and not something that can be created
    or purchased with specific tools, collaboration principles can be put into practice
    throughout the software development life cycle that can help engineering effectiveness
    in concrete ways.
  prefs: []
  type: TYPE_NORMAL
- en: The development pipeline is the progression of stages a product goes through,
    from design to delivery. No one pipeline describes every development environment,
    but many environments do share common patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, product development progresses in stages. Regardless of what methodology
    a team chooses to follow, people will establish a set of stages or gates to qualify
    whether software is ready to progress within the pipeline. In modern environments,
    these stages could look something like the model shown in [Figure 2-1](#fig_1_stages_in_the_software_development_life_cycle).
  prefs: []
  type: TYPE_NORMAL
- en: '![Stages in the software development life cycle.](Images/cidc_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. Stages in the software development life cycle
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s look at each stage more closely:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first stage, we have discovery. Collaborative discovery could look like
    a team discussing a minimum set of requirements to be delivered within a set period
    of time, like a week or two weeks, depending on the frequency of delivering a
    working feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second stage, we have development. Collaborative development could involve
    pairing on code and test development, code reviews, and work segmented into small
    pieces that can be accomplished within the set period of time and with the work
    visualized on a project board. The code is submitted for review, and additional
    tests are run against it. Testing might be manual or automated and done from different
    perspectives, depending on the particular testing goal (e.g., performance, security,
    compliance, or functionality of the product). If the tests are successful, the
    code is merged into the main branch. An artifact can be built from the merged
    code at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the third stage of our example development pipeline, we have deployment.
    Deployment occurs after the code passes its tests. We might have a manual or scheduled
    gate that promotes the artifact into our production environment or releases it
    to the customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within your environment, you can have many more stages, and every stage has
    opportunities for individuals to collaborate. This chapter is full of actionable
    advice on how to collaborate more effectively at different stages. Let’s begin
    with discovery.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative Discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The collaborative process begins long before engineers start writing code in
    their editors of choice. How do we figure out what we should work on right now
    to further business value? Between maintaining the current product and triaging
    incoming requests, prioritizing work over time can be challenging—especially with
    the weight of expectations coming in from other teams within the organization.
    We need to continuously maintain an array of different relationships within the
    environment to ensure the successful delivery of the desired outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: In the discovery phase of a product within an organization, processes and activities
    include design, requirements gathering, architecture review, and project planning.
    These processes might be defined differently across industries, and sometimes
    even across departments within a single organization. The degree to which these
    processes have been formalized will vary as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Organizations of any size can have “islands”—separate parts of the company with
    less-than-ideal communication with other departments. The larger the organization,
    the more opportunity there is for these areas to form. A group within an organization
    that comes up with a product or project and makes all of the decisions on it without
    consulting other stakeholders can signal the presence of an island within the
    organization. If you recognize islands in your environment, more focus and time
    might be needed to build bridges to facilitate change.
  prefs: []
  type: TYPE_NORMAL
- en: Roles and Responsibilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many larger organizations will have a product team or department that is responsible
    for coming up with a strategy, roadmap, or other similar documents for products
    and product features. Product teams focus on user experience (UX) with the product,
    growing the user base, and prioritization of new and modified features for competitive
    advantage. Having a clear strategy is key to creating a successful product—this
    strategy will later inform what gets built and with what constraints. An overly
    vague strategy such as “we want to be the best product in our field” offers insufficient
    guidance and leads to individuals building in gaps that can result in misalignment.
  prefs: []
  type: TYPE_NORMAL
- en: Product strategy and design alone are no guarantees of success. An idea without
    implementation and execution is just an idea. Your product team should not work
    within a silo, where they come up with product requirements and “throw them over
    the wall” to engineering to implement, just as developers should not throw software
    over the wall for operations to maintain. It is essential to cultivate and maintain
    a collaborative relationship between all parts of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Product and Engineering Collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some strategies that can help collaboration between different departments include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Share tools between departments.* If a product team uses Jira and engineers
    track work in GitHub projects and neither group has access or visibility to the
    other’s tools, that cuts down on shared context, with materials “hidden” from
    the other department because of the different tools used. If sharing tools doesn’t
    work, ensure transparency by making sure that adequate training is available so
    that the different teams can easily use each other’s products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Encourage pathways for communication between groups.* Representatives from
    engineering should have invites to regular product planning meetings, and a product
    representative should have invites to engineering status updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Define and share the process for making decisions and acceptable forms of
    criticism.* As mentioned earlier, it’s vital that everyone who wishes to has the
    opportunity to share their thoughts about decisions in the manner that will best
    convey the information they have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Make sure that the people who do the work are included in defining schedules.*
    Design and engineering are responsible for the implementation of their work and
    will have valuable input as to whether a timeline is feasible. Product has critical
    information about customers’ needs and the impact on business value. When everyone
    participates in creating and signing off on product plans before they are considered
    final, this eliminates the surprises that harm relationships between teams when
    impossible deadlines are missed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just as collaboration between different parts of engineering is vital, maintaining
    communication and trust between engineering and other departments in the organization
    is necessary for a healthy organization.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Every organization defines team structures and processes that require different
    strategies for collaboration. Making processes *explicit* rather than *implicit*
    makes them easier to reason about, to communicate to new members of teams, and
    to change if necessary. Document processes and keep the documentation up to date!
  prefs: []
  type: TYPE_NORMAL
- en: Requirements Throughout the Organization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Requirements gathering typically comes in the form of thinking about user requirements.
    In an organization with Agile-based practices, this might look like user stories:
    statements of the form *As a user, I want to <some goal> so that <some reason
    or motivation>*. User stories are brief descriptions of desired functionality
    from the perspective of a user. A single story describes the desired experience
    for a user in a shared language that both business and technology experts can
    understand. Telling different stories about our users helps us validate the work
    that we are doing in language that everyone on the team can understand. These
    stories help us plan the work associated with our project and guide our work,
    but they don’t specify any implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: Within the discovery phase, we explore our assumptions about what we are building,
    ensuring that we get sufficient points of view. We need to be in alignment with
    the work as individuals and a team to ensure that we have the same goals in mind
    as we work. Through exploring user stories, we also can identify the crucial areas
    that will identify when our work is done, or our acceptance criteria. If we don’t
    do this work and talk through the different personas and their stories, we can
    expend a great deal of effort and time on work that will ultimately end up being
    thrown away.
  prefs: []
  type: TYPE_NORMAL
- en: 'Product teams need to ensure that they understand the engineering requirements
    for bringing a new product or feature to fruition. Work also needs to be prioritized
    based on what’s in progress and its value to the organization and the availability
    of engineers, especially any with specialized knowledge. This might mean asking
    questions like these:'
  prefs: []
  type: TYPE_NORMAL
- en: What else is engineering working on and what other projects or deadlines will
    affect their work capacity and availability?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will the new product or feature require substantial changes to existing code
    or infrastructure? If significant code refactoring, a new infrastructure component,
    or major architectural changes will be required, that can have a big impact on
    time frames.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the team have the necessary expertise to develop and maintain a new feature
    already, or will it need to consider training or hiring? For example, if a product
    team wants to add support for an Android app after being iOS-only for a while,
    it is likely that either Android engineers will need to be hired or time given
    for on-staff engineers to come up to speed on a new platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the overall stability of current products? An engineering organization
    that is spending significant time fighting fires will be less equipped to take
    on new projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engineering is not the only department whose requirements need to be considered.
    Support teams play crucial roles in a company’s success, but their demands are
    too often overlooked. You will want to ask similar questions of your support organization
    and its capabilities. Does it have the required expertise to support a new feature
    or product, to be able to answer user questions, and to help customers troubleshoot?
    What is the current average support volume?
  prefs: []
  type: TYPE_NORMAL
- en: As much as possible, it is important to maintain relationships between the design,
    product, engineering, and support departments to make sure everyone understands
    one another’s needs and requirements so that teams can work together to help solve
    customer problems. Make sure silos don’t build up between departments as you work
    to eliminate them between teams within a department.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture and Planning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whereas design and requirements gathering tend to be about the “what” and the
    “why” of the product or feature development, architecture and project planning
    address the “how.” In general, implementation specifics and details should be
    left in the hands of people who have the necessary domain expertise to make those
    decisions (generally the engineers who will be doing the bulk of that work), but
    that doesn’t mean there aren’t opportunities to collaborate throughout this part
    of the process, as well.
  prefs: []
  type: TYPE_NORMAL
- en: One of the goals of architecture and project planning should be figuring out
    how to build and test the product in a sustainable manner. As we’ve discussed
    previously, it’s important to avoid throwing work over a metaphorical wall. After
    a product or feature is built, what happens to it? Part of the engineering process
    is making sure it is understood how something will be run when it is in production
    in front of customers. How will it be monitored? What are the debugging and troubleshooting
    processes? How often will it be updated, and what will those maintenance workflows
    look like? Is the full life cycle of the product understood?
  prefs: []
  type: TYPE_NORMAL
- en: Defining the project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to set clear boundaries around projects and make sure that everyone
    involved has a shared understanding of what those boundaries are. Taking time
    to clearly define and document various aspects of a project’s scope at the beginning
    can decrease the number of misunderstandings and the amount of wasted work throughout
    the project. Things you will want to define when planning a new product or feature
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What does “done” mean? When can a team say that it has finished working on one
    stage and move on to other work?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it more important to ship something by a certain date with fewer features,
    or is it more important to ship something feature-complete and past the deadline?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who will make decisions when issues come up along the way? Are the stakeholders
    who worked on the original design or idea the same ones who will take responsibility
    for modifications?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who will own a new product or feature after it has been shipped? Who will be
    responsible for maintaining and operating it, and what will those responsibilities
    entail?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, these questions and definitions should likely involve people from multiple
    departments insofar as new products do not exist in a vacuum. If a particular
    engineering team will be responsible for maintaining a new product, service, or
    supporting infrastructure component, it is crucial that it has the opportunity
    to help clarify the scope of work. Involving key stakeholders like this from the
    beginning can help prevent unpleasant surprises down the line, especially when
    it might be too late to change direction quickly. You don’t want to find out after
    months of work developing something that you’ll lack the bandwidth to properly
    support it after launch.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Having templates for project proposals, design documents, decision records,
    or your organization’s planning documents of choice in a public, shared location
    can help keep multiple groups on the same page. When teams share a project proposal
    template, collaboration becomes easier, as all teams will get the information
    that they need to plan or make decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Planning and review processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having clearly defined processes in place (and documented where people can easily
    find them) is vital to collaborative efforts at scale. A process does not necessarily
    mean “too much bureaucracy” or that an organization is dealing with so much red
    tape that it is unable to move forward with anything. The right amount of process
    can make sure that different groups know what they need to provide to one another
    and how to best work to maximum collective benefit.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend that organizations, especially at the enterprise level, implement
    architecture and operability review processes as part of their product planning
    and development cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture reviews are for when significant changes are planned to the architecture
    or underlying infrastructure of your products. Significant changes shouldn’t come
    as a surprise because that can affect trust and how people work. People rewriting
    core parts of an application in their new favorite language and similar impactful
    changes are a sign that communication has severely broken down. Taking the time
    to think through the ramifications of such changes in advance is not “too much
    process” designed to gatekeep engineering progress; instead it is a sign of mature
    engineering practice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Check out John Allspaw’s blog post on Etsy’s architecture reviews^([1](ch02.xhtml#idm45727903930600))
    for more ideas about the kinds of elements that should go into your planning and
    review process.
  prefs: []
  type: TYPE_NORMAL
- en: Operability reviews should be considered throughout the planning process to
    help uncover issues with the architecture that might hinder managing and monitoring
    the application in production. These reviews ensure that everyone understands
    what it means to operate something in production, who will be responsible for
    it, how to troubleshoot and maintain it, and similar topics. The goal isn’t arbitrary
    gatekeeping. By incorporating operability reviews earlier in the planning rather
    than right before production, we can reduce wasted work and incorporate changes
    into the design of the product to facilitate everyone being able to understand
    and operate the product better.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In addition to strengthening interteam relationships within engineering, pay
    attention to the relationships that engineering has with other departments. Sales
    and product divisions often come up with ideas for new products and features,
    but they need to be certain that what they are suggesting is realistic based on
    the engineering constraints of the current team. For example, a sales team should
    not make specific promises for new features or releases without engaging the engineering
    teams as well as understanding the impact on any features, maintenance, or technical
    refresh in progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'The specifics of who should participate will vary from company to company;
    however, it’s important to be sure that you find ways to give interested parties
    the chance to take part in discussions without making the discussion processes
    overly long or demanding. Here are some ways to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: Have designated representatives from interested groups participate; for example,
    have one or two engineering managers or senior engineers take part in a planning
    meeting with the product team rather than entire development or operations teams.
    Document who will be participating in each step of the process and why.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share notes or recordings from discussions and planning meetings as widely as
    possible. Often, people will appreciate being able to know what’s going on and
    this visibility can reassure them that their interests will be represented and
    that they don’t need to actively participate themselves.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it clear to whom people should talk if they have comments, questions, or
    other concerns throughout the discussion processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide templates for discussions when possible and give relevant groups the
    opportunity to collaborate on these templates. For example, if there are a few
    questions that engineering always asks when a product group proposes a new feature,
    make those questions part of the product discussion template up front. One of
    the goals here is to minimize surprises.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When asking for feedback from different teams, be as specific as possible about
    where in the process you are. Is this the beginning of an idea that product has
    been brainstorming, or is there a big-customer deal riding on this feature that
    needs to be implemented by a specific date?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design artifacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having concrete, searchable artifacts that come out of processes such as project
    planning, brainstorming, and design sessions can be incredibly helpful, not only
    for building up long-term organizational memory, but also for making these processes
    more collaborative. In larger organizations or ones that are distributed across
    multiple time zones, it can become more challenging to get all the necessary stakeholders
    or participants in one place at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for ways in which your teams can produce concrete artifacts that other
    teams and individuals can read and contribute to asynchronously. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Templates for discussions, meeting formats, and similar could be kept in Google
    Docs, allowing groups who are planning an instance of a discussion to make their
    own copy of the document as needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your organization has an internal documentation repository (whether this
    is Google Docs, Dropbox, an internal collaborative wiki, or similar), make sure
    you have a standard location where all templates and other artifacts should be
    kept.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Whenever possible, try to have conversations in media that are designed to
    be searchable and asynchronous: use email or GitHub issues rather than Slack or
    other chat software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collaborative development begins with version control. Trying to write code
    together in an environment without source control and a shared integration process
    is a recipe for frustration and increased friction. In the development phase,
    teams collaborate to write code and tests, review code,^([2](ch02.xhtml#idm45727903919128))^,^([3](ch02.xhtml#idm45727903920232))
    and integrate code.^([4](ch02.xhtml#idm45727903864712)) In this section, we focus
    on test-driven development and continuous integration, although collaboration
    isn’t limited to these specific practices.
  prefs: []
  type: TYPE_NORMAL
- en: Test-Driven Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often, the collaborative nature of establishing acceptance criteria during
    the discovery phase leads to the first tests that drive test-driven development
    (TDD). Formally, TDD refers to a specific software development methodology involving
    a red, green, refactor development cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a new test. This is done before writing any code that is part of a new
    feature. At this point, the new test should fail because the feature it tests
    hasn’t been written yet. This is the “red” stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write code for the new feature. At this stage the focus is on writing code that
    will allow the test to pass, and no more. This is the “green” stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tests should now be run and they should all pass—both the new test for the
    new code and all existing tests (there should be no degradations).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, code can be refactored, optimized, or otherwise cleaned up at
    this point, taking care not to cause any test degradations in the process. This
    is the “refactor” stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although it is not necessary to strictly follow TDD, the practice of writing
    tests *as code is written* throughout the development process rather than all
    at once at the end is widely considered to be a good strategy. Testing should
    not be an afterthought, and waiting until the very end of a development cycle
    to see whether new code has caused any regressions can end up wasting lots of
    development and testing time.
  prefs: []
  type: TYPE_NORMAL
- en: 'When developers are pairing or otherwise collaborating on writing code, tests
    should also be written and run. Consider strategies that include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that there are ways to run tests locally, such as on developer laptops,
    before code needs to be merged upstream. Ensure that your testing environment
    allows for developers to run subsets of the full tests that exist—such as testing
    just the class or module that they are working on. The quicker it is for engineers
    to run tests, the more likely it is that they will actually test their changes!
    Quality testing can improve the quality of code submitted back to the shared repository,
    improving the affective trust individuals have in one another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document your testing patterns internally. If you use a particular testing framework
    or library, confirm that engineers know what that is and what conventions they
    should be following when they write their tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing shouldn’t be solely for people with the job title of software developer.
    If your site reliability engineers, system administrators, or operations engineers
    are writing code, that code should have tests as well. Even making sure that bash
    scripts are run through a linter before they are committed and deployed can help
    over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all tests can or should be automated. It’s an important skill to develop
    exploratory testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous integration (CI) is the practice of merging new changes to code into
    the main or master branch continuously (or as often as is reasonably possible)
    rather than waiting until the very end of a long development cycle to do so. In
    modern development environments, that might mean dozens of merges into the master
    branch per day. In larger organizations CI practices may differ from team to team.
    This is one area in which teams should standardize on the process so that ad hoc
    teams can be formed and quickly follow the processes that have been established.
  prefs: []
  type: TYPE_NORMAL
- en: CI is key to being able to work quickly, effectively, and collaboratively. When
    engineers are working, they will test, commit, and merge small units of work as
    they are completed—such as adding a new method and a test for that method—rather
    than waiting until an entire new customer-facing feature is completed. Other developers
    can then pull down those changes and merge them into their own development branches,
    making sure that everyone is working on the most up-to-date version of the codebase
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: This prevents the problem of “integration hell,” where dozens or hundreds (or
    even thousands) of changes are integrated all at once at the end of a project,
    and only *then* do people run integration tests. With hundreds of changes being
    implemented at a time, it’s difficult to pinpoint which change broke something
    (or even to tell that something is broken at all!). On the other hand, if there
    was only one small commit between the tests passing and the tests starting to
    fail, it’s trivial to identify which commit contained that breaking change.
  prefs: []
  type: TYPE_NORMAL
- en: CI allows developers, testers, and operations staff to collaborate on minimizing
    risk while incorporating change through reducing the size of each change.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative CI practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following are some improvements that you can apply within your organization
    to level up the collaborative practices in CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Use a single CI platform.* Whether it’s a cloud-based CI service or self-hosted
    on-premises, everyone using the same tool can greatly improve collaboration between
    teams. When different teams have different tools for CI, it makes it harder for
    individuals to use tools effectively across teams. It’s important to reduce complexity
    as much as possible with the tools that we use to build software, especially when
    the services we are building are complex themselves (for example, a service that
    is composed of many microservices). This way, when a problem exists in one part
    of the service, we can quickly see the state rather than trying to figure out
    the status across different tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Define infrastructure as code (IaC).* Reduce differences between local, test,
    and production environments. Infrastructure configuration should have testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Convert manual tests to scripted tests whenever possible.* Automate scripted
    tests. When code is committed and pushed back to the shared repository, tests
    should be triggered for that repository to run automatically. Don’t rely on people
    remembering to run tests when computers can remember for them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Eliminate friction of style choices by implementing automated linting on integration.*
    This depersonalizes style choices and improves the quality of code through discovery
    of potential logic flaws.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Invest time in refactoring or removing flaky tests.* Most tests are code,
    and should be maintained like code to minimize friction. If tests are slowing
    down feature development and release or if there is fear of modifying the test
    suite to incorporate new tests, you will likely see slow progress toward building
    features and implementing bug fixes, which impedes your ability to build customer
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the deployment phase, we deploy the product with manual or scheduled gates
    and monitor and observe the product in use. Remember, work doesn’t end after the
    deploy button has been pushed. The moment that code is live in production, you
    must monitor it to verify that it is running properly, and you will need to observe
    and debug it if something goes wrong. In this section, we focus especially on
    what happens after code is in production: on-call responsibilities, retrospectives,
    and organizational learning.'
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative Deploy Processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Making deployments collaborative doesn’t mean that one person watches while
    another person runs the deployment. Rather, it is about making certain that there
    is visibility before, during, and after the process. Here are a few tips for increasing
    visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chat is a tool that a team can use to encourage a culture of collaboration.
    It’s also useful in the deployment process. You might choose to have a fully chat-based
    process, using chatbots in #deploy channels so that anyone in the channel can
    see what is being deployed, and when. If you don’t do that, you should consider
    having chat integration, such as a chatbot that announces deploys that were performed
    by other deployment tools, again so that people know what is changing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that your deploys are visible in your monitoring and observability
    tools. Being able to see a visual marker in a Graphite graph that shows when a
    deploy was made would help provide context if there were a marked change in behavior
    of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For high-risk deploys, buddy systems in which individual team members pair up
    during the deploy process allows for individuals to separate out the different
    aspects of the deployment, seeing the impact versus the execution. This can reduce
    the time to discovery of issues and provide the necessary support to resolve them,
    with one person being responsible for communicating out necessary changes and
    impact while the other rolls back the upgrade or deploys a fix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although “graph watching” should generally not be required for every deploy
    (after all, that’s what automated monitoring and alerting tools are for), there
    are certainly times when people will feel better knowing that someone is keeping
    an eye on the most important metrics, such as when flipping the switch at the
    end of a big migration project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The goal with collaborative deployment is informing individuals of expected
    change to minimize surprises. Surprises erode trust and can affect the practice
    of empathy.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Sustainable On-Call Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nearly every organization today has some sort of on-call requirements, in which
    engineers are expected to be available to respond to issues, usually in their
    off-hours. Historically, on-call was a very siloed practice and only system administrators
    had on-call responsibilities. This led to resentment and adversarial relationships
    when people felt they were being treated unfairly, and to burnout, health issues,
    and poorer work outcomes as long-term sleep deprivation made its effects known.
    Empathy allows us to break these patterns and create on-call environments that
    are humane and sustainable.
  prefs: []
  type: TYPE_NORMAL
- en: Humane Staffing and Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A driving factor of devops was the adverse effects that historical software
    development practices had on those operating the software or servers it ran on.
    Practices such as CI and IaC have improved this, but there are still other considerations.
  prefs: []
  type: TYPE_NORMAL
- en: Availability and maintenance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we run websites that our users expect to always be available, the question
    of when to perform maintenance that requires any kind of downtime or will affect
    even a subset of services often comes up. From a strictly user-facing perspective,
    it would make sense to perform maintenance at a time that would affect the fewest
    users. So, a company in the United States whose highest traffic times are during
    US daytime hours might want to perform maintenance during the late night or early
    morning in US time zones, but that wouldn’t necessarily be the case for a company
    with a primary user base in Asia.
  prefs: []
  type: TYPE_NORMAL
- en: However, that might not be ideal from the perspective of those performing the
    maintenance. This is not simply a matter of people being unwilling to stay up
    late or get up early; it’s a matter of how alert, responsive, and effective people
    can be if they aren’t sufficiently rested. From an operator’s point of view, they
    should be doing critical maintenance operations when they are most alert and awake.
    If that strictly isn’t possible based on the needs of the users, such as when
    a maintenance task would take too long and the financial losses would be too great,
    there are still ways to mitigate the costs to the maintainers.
  prefs: []
  type: TYPE_NORMAL
- en: Employees should be compensated fairly for the off-hours work they need to do.
    If it is expected as a regular part of their work, that expectation should be
    made clear in the job description so people can assess whether the position is
    the right fit for them. Allow and encourage people to take care of themselves
    and their health—for example, by having them take off the day after they perform
    late-night maintenance. Make sure that, if at all possible, maintenance tasks
    are spread out enough or the team is large enough that people have sufficient
    time to recover between these off-hours shifts. Depending on your circumstances,
    covering transportation or meal costs for these events would do well, too. If
    job roles change and someone ends up getting off-hours work added to their responsibilities,
    their compensation should be adjusted to match.
  prefs: []
  type: TYPE_NORMAL
- en: Work–life balance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s important to keep work–life balance in mind when planning your headcount
    for the upcoming year. Capacity planning is just as important for people as it
    is for servers. If people on your teams will be required to regularly work evenings
    and weekends in addition to weekdays in order to meet expectations, that is a
    recipe for poor work, poor morale, and burnout. Devops is about creating sustainable
    work practices, and how individuals are expected to approach their work–life balance
    is a key part of that.
  prefs: []
  type: TYPE_NORMAL
- en: Even though many jobs in operations-related fields have traditionally required
    off-hours work—either for maintenance, on-call, or nonstandard shifts to provide
    24/7 coverage—it is important to keep in mind that these kinds of requirements
    can be unintentionally biased against people with substantial responsibilities
    outside of work. Young, single people without children (or high-maintenance pets)
    will find it much easier to devote their off-hours to work than people with partners,
    children, or other family responsibilities. People with longer commutes or health
    considerations will also be more adversely affected by these kinds of requirements.
    Part of growing and maintaining a diverse and inclusive team requires taking these
    things into account and considering how your job requirements can be adjusted
    to be more inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: Team size considerations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having sufficient people responsible for rapid responses to alerts and incidents,
    either by participating in an on-call pager rotation or having multiple shifts
    of people working throughout the day, is another consideration. This is one area
    in which larger companies often have it much easier—a larger company is more likely
    to have multiple teams in different global offices, making a “follow-the-sun”
    rotation relatively straightforward to implement.
  prefs: []
  type: TYPE_NORMAL
- en: In this kind of setup, multiple teams (often three) that are distributed around
    the world will each work during their normal daytime working hours, being physically
    far enough apart that the end of one shift will coincide with the beginning of
    the next shift’s hours. This enables the teams to collectively provide around-the-clock
    coverage, without requiring people to work during their local nights.
  prefs: []
  type: TYPE_NORMAL
- en: Even a mid-sized company is likely to have a full team of operations engineers
    or system administrators who can participate in an on-call rotation, but at smaller
    or younger companies, this is unlikely to be the case. Although you might not
    think you have enough operations work for a full operations team, you should avoid
    having only one person be responsible for on-call duties. This will likely mean
    sharing on-call responsibilities among as many people as necessary to give individuals
    a chance to recover and catch up on sleep.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Even in the short term, sleep deprivation can lead to difficulty concentrating
    or performing well, irritability or anxiety, and an increased risk of high blood
    pressure or heart attack—and these effects compound when sleep deprivation is
    sustained long term.
  prefs: []
  type: TYPE_NORMAL
- en: Health in general, and burnout specifically, is a very real consideration in
    understanding the overall health of your organization. Prioritizing the short-term
    financial or material gains for your company over the long-term health of the
    people within it will lead to long-term losses.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns for Sustainable and Collaborative On-Call
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we share specific practices to build up a collaborative and
    sustainable on-call rotation. It’s critical to avoid having any single individual
    or group feel like they are shouldering an unfair burden, because that can affect
    the relationships we want to build between individuals and across the teams that
    support a specific product or feature.
  prefs: []
  type: TYPE_NORMAL
- en: On-call onboarding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right from the get-go, it is important to introduce on-call responsibilities
    in a compassionate and psychologically safe way. If you are bringing new team
    members into an existing rotation, let them know that they aren’t expected to
    be able to respond to every alert themselves right away. Create an environment
    in which they are able to ask questions.
  prefs: []
  type: TYPE_NORMAL
- en: New people can be incredibly valuable in situations like on-call where alert
    fatigue can build up and people can get used to the way things have been. If you
    create a safe environment, you can get new team members asking questions like
    “Why do we have this alert when we never seem to respond to it?” or “Why isn’t
    there a graph for X?” and myriad other questions that can illuminate ways to improve
    your monitoring, observability, and alerting for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good idea to maintain living documentation about your on-call process,
    including things like how to get any required equipment, any tools/systems/dashboards
    that a person might need access to, and what the expectations are around response
    times. Ideally, a new person in the rotation will be able to get all the information
    they need before they take the pager for the first time, but if you don’t have
    such a document, new members can help build one up as they learn the ropes. If,
    rather than adding new team members to an existing on-call rotation, you are creating
    an on-call rotation for the first time, you can use the idea of an onboarding
    document to help you define the parameters of your on-call service.
  prefs: []
  type: TYPE_NORMAL
- en: On-call buddies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are bringing new people into an on-call rotation or spinning up a new
    rotation from scratch, you might want to take advantage of a buddy system. For
    existing rotations, this can be a form of specific mentorship in which someone
    familiar with the processes and responsibilities can share their knowledge with
    someone new. This can decrease stress for new people by giving them backup (here’s
    the specific person you escalate to first if you run into an alert that you don’t
    know how to handle) and give them an explicit place to ask questions.
  prefs: []
  type: TYPE_NORMAL
- en: Defining ownership
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With any on-call rotation, it’s important to explicitly define roles and responsibilities.
    You don’t want multiple people responding to the same alert and potentially stepping
    on each other’s progress!
  prefs: []
  type: TYPE_NORMAL
- en: If your organization is one in which each team has enough people to sustain
    its own individual rotation, you can begin by saying that each team is on call
    for its own products and services. However, it becomes more complicated when teams
    are too small to do this sustainably, such as in teams with fewer than four people.
    It might not be sustainable or humane to be on call 24/7 for 1 week out of every
    4 (as opposed to every 8 or 10), especially for people with more responsibilities
    outside of work.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to think about what experience and expertise is required across
    a specific service. Ideally, we don’t have individuals who are domain experts
    because we can end up burning them out by always needing them to be available
    for specific alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a supportive environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It can be incredibly stressful to feel the weight of responsibility of a critical
    service without the support of others when on call. In the spirit of the site-reliability
    engineering mentioned earlier, it’s important to create a culture in which people
    actively and gladly support one another. You want to have an environment in which
    people’s response to an escalating incident is “How can I help?” rather than “What
    did you do wrong?” Every engineer at some point will run into something that they
    can’t handle on their own, and being able to ask for help is critical to encourage
    and sustain a psychologically safe team, which has an impact on all the other
    non-on-call work that we do.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative Retrospectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you call them retrospectives, postmortems, learning reviews, or something
    else, the medium-term processes of following up after incidents are crucial to
    creating an on-call experience that is sustainable rather than one that causes
    burnout. Without any sort of effective follow-up, incidents are likely to keep
    recurring, creating an unnecessary burden on the people responsible for responding
    to them. An effective retrospective involves a written timeline of the incident
    and a review meeting during which the meat of the discussion and learning happens.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the incident timeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step to having a retrospective, after the immediate response has been
    taken care of, is creating a timeline of what happened. This will involve pulling
    together sources such as alerts from PagerDuty, chat logs from relevant incident
    response or operations engineering Slack channels, and any other written context
    that is necessary to paint a clear picture of what happened when. Generally, the
    person who was the active on-call will lead in putting together the timeline,
    as most of the collaborative discussion will happen during the review.
  prefs: []
  type: TYPE_NORMAL
- en: Facilitating an incident review
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main part of an incident review is a facilitated meeting (often called
    the postmortem or retrospective, though the preparation of the timeline is an
    important step that should not be forgotten). The main parts of the meeting include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Reviewing the timeline.* A skilled facilitator will ask questions designed
    to expand understanding of not only what happened, but why. Blamelessness is a
    key concept here. Assuming that people don’t intentionally make mistakes, we want
    to understand why they took the actions they took, whether that be why they thought
    a particular change was safe to deploy or why they looked at a particular dashboard
    when troubleshooting. A successful timeline review will be more of a group discussion
    than a monolog by whoever was on call during the incident.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Calling out things that were surprising.* If an incident didn’t have anything
    surprising or confusing happen during it, it would be called a planned maintenance.
    The things that surprised us are the things that we can learn from. These events
    can be discussed during the timeline review, but they should be noted and explicitly
    called out afterward, as they usually lead into...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Planning remediation items.* From the things that were unexpected, concrete
    next steps can be discussed. For example, if you were surprised that you didn’t
    have a graph of error rates for a particular service, creating one might be a
    good remediation item. (Not every surprise needs its own remediation item, though.)
    It’s important not to go into an incident review with remediation items already
    planned, using the review as a way to justify that work. There’s also no need
    to create a certain number of items to make a review look more “productive.” Keep
    in mind that in order for remediation items to be effective, you will need to
    prioritize that work. If people become used to ignoring remediation items, it
    weakens the entire incident review process and makes it likely that incidents
    will repeat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ideally, everyone who participated in the incident response should attend the
    review meeting for that incident. In the event that calendar availability or time
    zones prevent this from happening in a timely manner (within a week is best so
    that the timeline is still fresh in people’s minds), it is better to have a smaller
    review sooner than it is to wait weeks or months for calendars to align, because
    people can forget context and incidents can recur in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The process of facilitation for incident review or postmortem meetings is beyond
    the scope of this book. It’s an important skill that you should not overlook to
    maximize the utility of the postmortem process, and this guide from Etsy^([5](ch02.xhtml#idm45727903775416))
    is a great place to start.
  prefs: []
  type: TYPE_NORMAL
- en: Organizational Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every organization has its own body of institutional knowledge—the things that
    the people in the organization collectively know and understand. One of the main
    goals of processes like incident reviews is to increase the body of organizational
    knowledge, to help the organization learn. Without organizational learning, the
    same issues are likely to happen over and over. This might look like a production
    incident that keeps happening in the same way because nobody was able to take
    steps toward fixing it, or one team struggling with issues that another team has
    already experienced and solved.
  prefs: []
  type: TYPE_NORMAL
- en: Psychological safety is very important in creating a learning environment. Consider
    a workplace in which employees are screamed at, fired, or otherwise punished for
    making mistakes or even for bringing issues to light so that they can be addressed.
    If people don’t feel safe speaking up when they make a mistake, they might instead
    deliberately hide problems and certainly won’t feel safe asking for help fixing
    them. This naturally does not help make the systems better-performing or more
    resilient.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of on-call rotations and incident reviews is not to punish anyone
    or to add extra work: it is to facilitate organizational learning. When systems
    break or behave in unexpected ways, that provides opportunities to make them more
    robust, to improve the tools or documentation around them, to share knowledge
    among more people who need it. A healthy and sustainable on-call culture is continuously
    improving and learning, requiring everyone involved to view one another as fellow
    learners and collaborators, rather than having an adversarial mindset.'
  prefs: []
  type: TYPE_NORMAL
- en: Institutional memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Institutional memory describes how well the organization as a whole remembers
    what it has learned from past experiences. In an organization with poor institutional
    memory, it is easy to end up in situations in which people know “this is the way
    we always do things” but nobody really remembers *why*. Poor institutional memory
    makes systems and organizations fragile because it is an understanding of historical
    contexts and trade-offs that helps build resiliency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building and maintaining an organization’s institutional memory is a collaborative
    effort. A primary goal is to ensure that relevant knowledge is shared widely throughout
    the organization and not limited to one team or, even worse, one person. To help
    facilitate this learning, make certain that artifacts are stored in a manner that
    makes them accessible throughout the organization, searchable, and available in
    the long term. These artifacts can include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Timelines, meeting notes, and recordings from postmortems and retrospectives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alert configurations. If possible, these should be in source control so that
    commit messages can explain why a given alert was added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decision records, project proposals, design documents, and similar planning
    artifacts. Ideally, these will include discussions of alternatives that were considered
    and other contextual information that can help inform future engineers as to *why*
    a particular decision was made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve shared specific collaborative practices that enforce and support the
    bedrock of collaboration: trust, empathy, and psychological safety. These collaboration
    principles are not just theoretical; they are meant to be applied in the real
    world, and they work. Think through the different stages in your software development
    process, reviewing every step along the way. Identify where you are feeling the
    most painful interactions that are hindering your relationships and growth, and
    start applying the practices that you can incorporate into your work now. This
    is just a representative subset of practices to encourage collaboration; look
    for other opportunities to foster trust, empathy, and psychological safety within
    your teams.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch02.xhtml#idm45727903930600-marker)) Allspaw, John. “Multiple Perspectives
    on Technical Problems and Solutions.” *Kitchen Soap*, August 12, 2017\. [*http://bit.ly/2L9j13f*](http://bit.ly/2L9j13f).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch02.xhtml#idm45727903919128-marker)) Cleek, Billie. “How to Conduct Effective
    Code Reviews.” *The Digital Ocean Blog*, March 28, 2018\. [*https://do.co/2LdU86q*](https://do.co/2LdU86q).
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch02.xhtml#idm45727903920232-marker)) Lum, Tracy. “How to Give and Get
    Better Code Reviews.” *Medium/Hacker Noon*, July 3, 2018\. [*http://bit.ly/2XJWfAC*](http://bit.ly/2XJWfAC).
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch02.xhtml#idm45727903864712-marker)) McMinn, Keavy. “How to Write the
    Perfect Pull Request.” *The GitHub Blog*, January 21, 2015\. [*http://bit.ly/2xHxDxG*](http://bit.ly/2xHxDxG).
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch02.xhtml#idm45727903775416-marker)) Allspaw, John. “Etsy’s Debriefing
    Facilitation Guide for Blameless Postmortems.” Etsy/Code as Craft, November 17,
    2016\. [*http://bit.ly/2j6YEq2*](http://bit.ly/2j6YEq2).
  prefs: []
  type: TYPE_NORMAL
