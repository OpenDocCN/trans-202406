["```\n// require the module\nconst bcrypt = require('bcrypt');\n\n// the cost of processing the salting data, 10 is the default\nconst saltRounds = 10;\n\n// function for hashing and salting\nconst passwordEncrypt = async password => {\n  return await bcrypt.hash(password, saltRounds)\n};\n```", "```\n// password is a value provided by the user\n// hash is retrieved from our DB\nconst checkPassword = async (plainTextPassword, hashedPassword) => {\n  // res is either true or false\n  return await bcrypt.compare(hashedPassword, plainTextPassword)\n};\n```", "```\nconst jwt = require('jsonwebtoken');\n\n// generate a JWT that stores a user id\nconst generateJWT = await user => {\n  return await jwt.sign({ id: user._id }, process.env.JWT_SECRET);\n}\n\n// validate the JWT\nconst validateJWT = await token => {\n  return await jwt.verify(token, process.env.JWT_SECRET);\n}\n```", "```\ntype Note {\n id: ID!\n content: String!\n author: User!\n createdAt: DateTime!\n updatedAt: DateTime!\n}\n\ntype User {\n id: ID!\n username: String!\n email: String!\n avatar: String\n notes: [Note!]!\n}\n```", "```\ntype Mutation {\n  ...\n  signUp(username: String!, email: String!, password: String!): String!\n  signIn(username: String, email: String, password: String!): String!\n}\n```", "```\nconst mongoose = require('mongoose');\n\nconst UserSchema = new mongoose.Schema(\n  {\n    username: {\n      type: String,\n      required: true,\n      index: { unique: true }\n    },\n    email: {\n      type: String,\n      required: true,\n      index: { unique: true }\n    },\n    password: {\n      type: String,\n      required: true\n    },\n    avatar: {\n      type: String\n    }\n  },\n  {\n    // Assigns createdAt and updatedAt fields with a Date type\n    timestamps: true\n  }\n);\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n```", "```\nconst Note = require('./note');\nconst User = require('./user');\n\nconst models = {\n  Note,\n  User\n};\n\nmodule.exports = models;\n```", "```\nJWT_SECRET=YourPassphrase\n```", "```\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst {\n  AuthenticationError,\n  ForbiddenError\n} = require('apollo-server-express');\nrequire('dotenv').config();\n\nconst gravatar = require('../util/gravatar');\n```", "```\nsignUp: async (parent, { username, email, password }, { models }) => {\n   // normalize email address\n   email = email.trim().toLowerCase();\n   // hash the password\n   const hashed = await bcrypt.hash(password, 10);\n   // create the gravatar url\n   const avatar = gravatar(email);\n   try {\n     const user = await models.User.create({\n       username,\n       email,\n       avatar,\n       password: hashed\n     });\n\n     // create and return the json web token\n     return jwt.sign({ id: user._id }, process.env.JWT_SECRET);\n   } catch (err) {\n     console.log(err);\n     // if there's a problem creating the account, throw an error\n     throw new Error('Error creating account');\n   }\n },\n```", "```\nmutation {\n  signUp(\n    username: \"BeeBoop\",\n    email: \"robot@example.com\",\n    password: \"NotARobot10010!\"\n  )\n}\n```", "```\n\"data\": {\n   \"signUp\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6...\"\n }\n}\n```", "```\n signIn: async (parent, { username, email, password }, { models }) => {\n   if (email) {\n      // normalize email address\n      email = email.trim().toLowerCase();\n    }\n\n   const user = await models.User.findOne({\n     $or: [{ email }, { username }]\n   });\n\n   // if no user is found, throw an authentication error\n   if (!user) {\n     throw new AuthenticationError('Error signing in');\n   }\n\n   // if the passwords don't match, throw an authentication error\n   const valid = await bcrypt.compare(password, user.password);\n   if (!valid) {\n     throw new AuthenticationError('Error signing in');\n   }\n\n   // create and return the json web token\n   return jwt.sign({ id: user._id }, process.env.JWT_SECRET);\n }\n```", "```\nmutation {\n  signIn(\n    username: \"BeeBoop\",\n    email: \"robot@example.com\",\n    password: \"NotARobot10010!\"\n  )\n}\n```", "```\n{\n  \"data\": {\n    \"signIn\": \"<TOKEN VALUE>\"\n  }\n}\n```", "```\nconst jwt = require('jsonwebtoken');\n```", "```\n// get the user info from a JWT\nconst getUser = token => {\n  if (token) {\n    try {\n      // return the user information from the token\n      return jwt.verify(token, process.env.JWT_SECRET);\n    } catch (err) {\n      // if there's a problem with the token, throw an error\n      throw new Error('Session invalid');\n    }\n  }\n};\n```", "```\n// Apollo Server setup\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: ({ req }) => {\n    // get the user token from the headers\n    const token = req.headers.authorization;\n    // try to retrieve a user with the token\n    const user = getUser(token);\n    // for now, let's log the user to the console:\n    console.log(user);\n    // add the db models and the user to the context\n    return { models, user };\n  }\n});\n```", "```\n{\n  \"Authorization\": \"<YOUR_JWT>\"\n}\n```", "```\nquery {\n  notes {\n    id\n  }\n}\n```"]