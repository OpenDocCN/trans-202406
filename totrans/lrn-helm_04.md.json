["```\n$ helm create anvil\n```", "```\nanvil\n├── Chart.yaml ![1](Images/1.png)\n├── charts ![2](Images/2.png)\n├── templates ![3](Images/3.png)\n│   ├── NOTES.txt ![4](Images/4.png)\n│   ├── _helpers.tpl\n│   ├── deployment.yaml\n│   ├── ingress.yaml\n│   ├── service.yaml\n│   ├── serviceaccount.yaml\n│   └── tests\n│       └── test-connection.yaml ![5](Images/5.png)\n└── values.yaml ![6](Images/6.png)\n```", "```\n$ helm install myapp anvil\n```", "```\nNAME: myapp\nLAST DEPLOYED: Sun Apr  5 08:12:59 2020\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n1\\. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace default ↵\n    -l \"app.kubernetes.io/name=anvil,app.kubernetes.io/instance=myapp\" ↵\n    -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace default port-forward $POD_NAME 8080:80\n```", "```\n$ helm delete myapp\n```", "```\napiVersion: v2 ![1](Images/1.png)\nname: anvil ![2](Images/2.png)\ndescription: A Helm chart for Kubernetes\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into ↵\n  versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer.↵\n  They're included as\n# a dependency of application charts to inject those utilities and functions ↵\n  into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be ↵\n  deployed.\ntype: application\n\n# This is the chart version. This version number should be incremented each ↵\n  time you make changes\n# to the chart and its templates, including the app version.\nversion: 0.1.0 ![3](Images/3.png)\n\n# This is the version number of the application being deployed. This version ↵\n  number should be\n# incremented each time you make changes to the application. Versions are not ↵\n  expected to\n# follow Semantic Versioning. They should reflect the version the application ↵\n  is using.\nappVersion: 1.16.0\n```", "```\napiVersion: v2\nname: anvil\ndescription: A surprise to catch something speedy.\nversion: 0.1.0\nappVersion: 9.17.49\nicon: https://wile.example.com/anvil.svg\nkeywords:\n  - road runner\n  - anvil\nhome: https://wile.example.com/\nsources:\n  - https://github.com/Masterminds/learning-helm/tree/main/chapter4/anvil\nmaintainers:\n  - name: ACME Corp\n    email: maintainers@example.com\n  - name: Wile E. Coyote\n    email: wile@example.com\n```", "```\nproduct: {{ .Values.product | default \"rocket\" | quote }}\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"anvil.fullname\" . }}\n  labels:\n    {{- include \"anvil.labels\" . | nindent 4 }}\n```", "```\nspec:\n  replicas: {{ .Values.replicaCount }}\n  selector:\n    matchLabels:\n      {{- include \"anvil.selectorLabels\" . | nindent 6 }}\n  template:\n    metadata:\n      labels:\n        {{- include \"anvil.selectorLabels\" . | nindent 8 }}\n    spec:\n    {{- with .Values.imagePullSecrets }}\n      imagePullSecrets:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n      serviceAccountName: {{ include \"anvil.serviceAccountName\" . }}\n      securityContext:\n        {{- toYaml .Values.podSecurityContext | nindent 8 }}\n      containers:\n        - name: {{ .Chart.Name }}\n          securityContext:\n            {{- toYaml .Values.securityContext | nindent 12 }}\n          image: \"{{ .Values.image.repository }}:{{ .Values.image.tag | default↵\n            .Chart.AppVersion }}\" ![1](Images/1.png)\n          imagePullPolicy: {{ .Values.image.pullPolicy }}\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {{- toYaml .Values.resources | nindent 12 }}\n      {{- with .Values.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n    {{- with .Values.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n    {{- with .Values.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n```", "```\n# Default values for anvil.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\nreplicaCount: 1\n\nimage:\n  repository: ghcr.io/masterminds/learning-helm/anvil-app ![1](Images/1.png)\n  pullPolicy: IfNotPresent ![2](Images/2.png)\n  # Overrides the image tag whose default is the chart version.\n  tag: \"\" ![3](Images/3.png)\n\nimagePullSecrets: [] ![4](Images/4.png)\n```", "```\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname ↵\n    template\n  name:\n\npodSecurityContext: {}\n  # fsGroup: 2000\n\nsecurityContext: {}\n  # capabilities:\n  #   drop:\n  #   - ALL\n  # readOnlyRootFilesystem: true\n  # runAsNonRoot: true\n  # runAsUser: 1000\n```", "```\nservice:\n  type: ClusterIP\n  port: 80\n\ningress:\n  enabled: false\n  annotations: {}\n    # kubernetes.io/ingress.class: nginx\n    # kubernetes.io/tls-acme: \"true\"\n  hosts:\n    - host: chart-example.local\n      paths: []\n  tls: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n```", "```\nresources: {}\n  # We usually recommend not to specify default resources and to leave this as\n  # a conscious choice for the user. This also increases chances charts run on\n  # environments with little resources, such as Minikube. If you do want to\n  # specify resources, uncomment the following lines, adjust them as necessary,\n  # and remove the curly braces after 'resources:'.\n  # limits:\n  #   cpu: 100m\n  #   memory: 128Mi\n  # requests:\n  #   cpu: 100m\n  #   memory: 128Mi\n```", "```\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n```", "```\n$ helm package anvil\n```", "```\n# Patterns to ignore when building packages.\n# This supports shell glob matching, relative path matching, and\n# negation (prefixed with !). Only one pattern per line.\n.DS_Store\n# Common VCS dirs\n.git/\n.gitignore\n.bzr/\n.bzrignore\n.hg/\n.hgignore\n.svn/\n# Common backup files\n*.swp\n*.bak\n*.tmp\n*.orig\n*~\n# Various IDEs\n.project\n.idea/\n*.tmproj\n.vscode/\n```", "```\n$ helm lint anvil\n==> Linting anvil\n\n1 chart(s) linted, 0 chart(s) failed\n```", "```\n$ helm lint anvil mychart\n```"]