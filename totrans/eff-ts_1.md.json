["```\nfunction greet(who: string) {\n  console.log('Hello', who);\n}\n```", "```\nfunction greet(who: string) {\n                  ^\n\nSyntaxError: Unexpected token :\n```", "```\nlet city = 'new york city';\nconsole.log(city.toUppercase());\n```", "```\nTypeError: city.toUppercase is not a function\n```", "```\nlet city = 'new york city';\nconsole.log(city.toUppercase());\n              // ~~~~~~~~~~~ Property 'toUppercase' does not exist on type\n              //             'string'. Did you mean 'toUpperCase'?\n```", "```\nconst states = [\n  {name: 'Alabama', capital: 'Montgomery'},\n  {name: 'Alaska',  capital: 'Juneau'},\n  {name: 'Arizona', capital: 'Phoenix'},\n  // ...\n];\nfor (const state of states) {\n  console.log(state.capitol);\n}\n```", "```\nundefined\nundefined\nundefined\n```", "```\nfor (const state of states) {\n  console.log(state.capitol);\n                 // ~~~~~~~ Property 'capitol' does not exist on type\n                 //         '{ name: string; capital: string; }'.\n                 //         Did you mean 'capital'?\n}\n```", "```\nconst states = [\n  {name: 'Alabama', capitol: 'Montgomery'},\n  {name: 'Alaska',  capitol: 'Juneau'},\n  {name: 'Arizona', capitol: 'Phoenix'},\n  // ...\n];\nfor (const state of states) {\n  console.log(state.capital);\n                 // ~~~~~~~ Property 'capital' does not exist on type\n                 //         '{ name: string; capitol: string; }'.\n                 //         Did you mean 'capitol'?\n}\n```", "```\ninterface State {\n  name: string;\n  capital: string;\n}\nconst states: State[] = [\n  {name: 'Alabama', capitol: 'Montgomery'},\n                 // ~~~~~~~~~~~~~~~~~~~~~\n  {name: 'Alaska',  capitol: 'Juneau'},\n                 // ~~~~~~~~~~~~~~~~~\n  {name: 'Arizona', capitol: 'Phoenix'},\n                 // ~~~~~~~~~~~~~~~~~~ Object literal may only specify known\n                 //         properties, but 'capitol' does not exist in type\n                 //         'State'.  Did you mean to write 'capital'?\n  // ...\n];\nfor (const state of states) {\n  console.log(state.capital);\n}\n```", "```\nconst states: State[] = [\n  {name: 'Alabama', capital: 'Montgomery'},\n  {name: 'Alaska',  capitol: 'Juneau'},\n                 // ~~~~~~~~~~~~~~~~~ Did you mean to write 'capital'?\n  {name: 'Arizona', capital: 'Phoenix'},\n  // ...\n];\n```", "```\nconst x = 2 + '3';  // OK, type is string\nconst y = '2' + 3;  // OK, type is string\n```", "```\nconst a = null + 7;  // Evaluates to 7 in JS\n       // ~~~~ Operator '+' cannot be applied to types ...\nconst b = [] + 12;  // Evaluates to '12' in JS\n       // ~~~~~~~ Operator '+' cannot be applied to types ...\nalert('Hello', 'TypeScript');  // alerts \"Hello\"\n            // ~~~~~~~~~~~~ Expected 0-1 arguments, but got 2\n```", "```\nconst names = ['Alice', 'Bob'];\nconsole.log(names[2].toUpperCase());\n```", "```\nTypeError: Cannot read property 'toUpperCase' of undefined\n```", "```\nfunction add(a, b) {\n  return a + b;\n}\nadd(10, null);\n```", "```\n$ tsc --noImplicitAny program.ts\n```", "```\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true\n  }\n}\n```", "```\nfunction add(a, b) {\n  return a + b;\n}\n```", "```\nfunction add(a: any, b: any): any\n```", "```\nfunction add(a, b) {\n          // ~    Parameter 'a' implicitly has an 'any' type\n          //    ~ Parameter 'b' implicitly has an 'any' type\n  return a + b;\n}\n```", "```\nfunction add(a: number, b: number) {\n  return a + b;\n}\n```", "```\nconst x: number = null;  // OK, null is a valid number\n```", "```\nconst x: number = null;\n//    ~ Type 'null' is not assignable to type 'number'\n```", "```\nconst x: number | null = null;\n```", "```\n   const el = document.getElementById('status');\n   el.textContent = 'Ready';\n// ~~ Object is possibly 'null'\n\n   if (el) {\n     el.textContent = 'Ready';  // OK, null has been excluded\n   }\n   el!.textContent = 'Ready';  // OK, we've asserted that el is non-null\n```", "```\n$ cat test.ts\nlet x = 'hello';\nx = 1234;\n$ tsc test.ts\ntest.ts:2:1 - error TS2322: Type '1234' is not assignable to type 'string'\n\n2 x = 1234;\n  ~\n\n$ cat test.js\nvar x = 'hello';\nx = 1234;\n```", "```\ninterface Square {\n  width: number;\n}\ninterface Rectangle extends Square {\n  height: number;\n}\ntype Shape = Square | Rectangle;\n\nfunction calculateArea(shape: Shape) {\n  if (shape instanceof Rectangle) {\n                    // ~~~~~~~~~ 'Rectangle' only refers to a type,\n                    //           but is being used as a value here\n    return shape.width * shape.height;\n                    //         ~~~~~~ Property 'height' does not exist\n                    //                on type 'Shape'\n  } else {\n    return shape.width * shape.width;\n  }\n}\n```", "```\nfunction calculateArea(shape: Shape) {\n  if ('height' in shape) {\n    shape;  // Type is Rectangle\n    return shape.width * shape.height;\n  } else {\n    shape;  // Type is Square\n    return shape.width * shape.width;\n  }\n}\n```", "```\ninterface Square {\n  kind: 'square';\n  width: number;\n}\ninterface Rectangle {\n  kind: 'rectangle';\n  height: number;\n  width: number;\n}\ntype Shape = Square | Rectangle;\n\nfunction calculateArea(shape: Shape) {\n  if (shape.kind === 'rectangle') {\n    shape;  // Type is Rectangle\n    return shape.width * shape.height;\n  } else {\n    shape;  // Type is Square\n    return shape.width * shape.width;\n  }\n}\n```", "```\nclass Square {\n  constructor(public width: number) {}\n}\nclass Rectangle extends Square {\n  constructor(public width: number, public height: number) {\n    super(width);\n  }\n}\ntype Shape = Square | Rectangle;\n\nfunction calculateArea(shape: Shape) {\n  if (shape instanceof Rectangle) {\n    shape;  // Type is Rectangle\n    return shape.width * shape.height;\n  } else {\n    shape;  // Type is Square\n    return shape.width * shape.width;  // OK\n  }\n}\n```", "```\nfunction asNumber(val: number | string): number {\n  return val as number;\n}\n```", "```\nfunction asNumber(val) {\n  return val;\n}\n```", "```\nfunction asNumber(val: number | string): number {\n  return typeof(val) === 'string' ? Number(val) : val;\n}\n```", "```\nfunction setLightSwitch(value: boolean) {\n  switch (value) {\n    case true:\n      turnLightOn();\n      break;\n    case false:\n      turnLightOff();\n      break;\n    default:\n      console.log(`I'm afraid I can't do that.`);\n  }\n}\n```", "```\ninterface LightApiResponse {\n  lightSwitchValue: boolean;\n}\nasync function setLight() {\n  const response = await fetch('/light');\n  const result: LightApiResponse = await response.json();\n  setLightSwitch(result.lightSwitchValue);\n}\n```", "```\nfunction add(a: number, b: number) { return a + b; }\n      // ~~~ Duplicate function implementation\nfunction add(a: string, b: string) { return a + b; }\n      // ~~~ Duplicate function implementation\n```", "```\nfunction add(a: number, b: number): number;\nfunction add(a: string, b: string): string;\n\nfunction add(a, b) {\n  return a + b;\n}\n\nconst three = add(1, 2);  // Type is number\nconst twelve = add('1', '2');  // Type is string\n```", "```\ninterface Vector2D {\n  x: number;\n  y: number;\n}\n```", "```\nfunction calculateLength(v: Vector2D) {\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n```", "```\ninterface NamedVector {\n  name: string;\n  x: number;\n  y: number;\n}\n```", "```\nconst v: NamedVector = { x: 3, y: 4, name: 'Zee' };\ncalculateLength(v);  // OK, result is 5\n```", "```\ninterface Vector3D {\n  x: number;\n  y: number;\n  z: number;\n}\n```", "```\nfunction normalize(v: Vector3D) {\n  const length = calculateLength(v);\n  return {\n    x: v.x / length,\n    y: v.y / length,\n    z: v.z / length,\n  };\n}\n```", "```\n> normalize({x: 3, y: 4, z: 5})\n{ x: 0.6, y: 0.8, z: 1 }\n```", "```\nfunction calculateLengthL1(v: Vector3D) {\n  let length = 0;\n  for (const axis of Object.keys(v)) {\n    const coord = v[axis];\n               // ~~~~~~~ Element implicitly has an 'any' type because ...\n               //         'string' can't be used to index type 'Vector3D'\n    length += Math.abs(coord);\n  }\n  return length;\n}\n```", "```\nconst vec3D = {x: 3, y: 4, z: 1, address: '123 Broadway'};\ncalculateLengthL1(vec3D);  // OK, returns NaN\n```", "```\nfunction calculateLengthL1(v: Vector3D) {\n  return Math.abs(v.x) + Math.abs(v.y) + Math.abs(v.z);\n}\n```", "```\nclass C {\n  foo: string;\n  constructor(foo: string) {\n    this.foo = foo;\n  }\n}\n\nconst c = new C('instance of C');\nconst d: C = { foo: 'object literal' };  // OK!\n```", "```\ninterface Author {\n  first: string;\n  last: string;\n}\nfunction getAuthors(database: PostgresDB): Author[] {\n  const authorRows = database.runQuery(`SELECT FIRST, LAST FROM AUTHORS`);\n  return authorRows.map(row => ({first: row[0], last: row[1]}));\n}\n```", "```\ninterface DB {\n  runQuery: (sql: string) => any[];\n}\nfunction getAuthors(database: DB): Author[] {\n  const authorRows = database.runQuery(`SELECT FIRST, LAST FROM AUTHORS`);\n  return authorRows.map(row => ({first: row[0], last: row[1]}));\n}\n```", "```\ntest('getAuthors', () => {\n  const authors = getAuthors({\n    runQuery(sql: string) {\n      return [['Toni', 'Morrison'], ['Maya', 'Angelou']];\n    }\n  });\n  expect(authors).toEqual([\n    {first: 'Toni', last: 'Morrison'},\n    {first: 'Maya', last: 'Angelou'}\n  ]);\n});\n```", "```\n   let age: number;\n   age = '12';\n// ~~~ Type '\"12\"' is not assignable to type 'number'\n   age = '12' as any;  // OK\n```", "```\nage += 1;  // OK; at runtime, age is now \"121\"\n```", "```\nfunction calculateAge(birthDate: Date): number {\n  // ...\n}\n\nlet birthDate: any = '1990-01-19';\ncalculateAge(birthDate);  // OK\n```", "```\ninterface Person {\n  first: string;\n  last: string;\n}\n\nconst formatName = (p: Person) => `${p.first} ${p.last}`;\nconst formatNameAny = (p: any) => `${p.first} ${p.last}`;\n```", "```\ninterface Person {\n  firstName: string;\n  last: string;\n}\nconst formatName = (p: Person) => `${p.firstName} ${p.last}`;\nconst formatNameAny = (p: any) => `${p.first} ${p.last}`;\n```", "```\ninterface ComponentProps {\n  onSelectItem: (item: any) => void;\n}\n```", "```\nfunction renderSelector(props: ComponentProps) { /* ... */ }\n\nlet selectedId: number = 0;\nfunction handleSelectItem(item: any) {\n  selectedId = item.id;\n}\n\nrenderSelector({onSelectItem: handleSelectItem});\n```", "```\ninterface ComponentProps {\n  onSelectItem: (id: number) => void;\n}\n```"]