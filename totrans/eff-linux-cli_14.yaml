- en: Chapter 11\. Final Time-Savers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve had a lot of fun writing this book, and I hope you’ve had fun reading it
    too. For the last act, let’s cover a bunch of smaller topics that didn’t quite
    fit into the earlier chapters. These topics have made me a better Linux user,
    and maybe they’ll help you as well.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Wins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following time-savers are simple to learn in a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Jumping Into Your Editor from less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re viewing a text file with `less` and want to edit the file, don’t
    exit `less`. Just press `v` to launch your preferred text editor. It loads the
    file and places the cursor right at the spot you were viewing in `less`. Exit
    the editor and you’re back in `less` at the original location.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this trick to work best, set the environment variable `EDITOR` and/or `VISUAL`
    to an editing command. These environment variables represent your default Linux
    text editor that may be launched by various commands, including `less`, `lynx`,
    `git`, `crontab`, and numerous email programs. For example, to set `emacs` as
    your default editor, place either of the following lines (or both) in a shell
    configuration file and source it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t set these variables, your default editor is whatever your Linux
    system sets it to be, which is usually `vim`. If you end up inside of `vim` and
    you don’t know how to use it, don’t panic. Quit `vim` by pressing the Escape key
    and typing `:q!` (a colon, the letter *q*, and an exclamation point), then press
    Enter. To quit `emacs`, press Ctrl-X followed by Ctrl-C.
  prefs: []
  type: TYPE_NORMAL
- en: Editing Files That Contain a Given String
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Want to edit every file in the current directory that contains a certain string
    (or regular expression)? Generate a list of filenames with `grep -l` and pass
    them to your editor with command substitution. Assuming your editor is `vim`,
    the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit all files containing *string* in an entire directory tree (current directory
    and all subdirectories) by adding the `-r` option (recursive) to `grep` and beginning
    in the current directory (the dot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For faster searches of large directory trees, use `find` with `xargs` instead
    of `grep -r`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[“Technique #3: Command Substitution”](ch07.xhtml#section_cmd_sub) touched
    on this technique, but I wanted to emphasize it since it’s so useful. Remember
    to watch out for filenames containing spaces and other characters special to the
    shell, since they may disrupt the results as explained in [“Special Characters
    and Command Substitution”](ch07.xhtml#warn_command_substitution).'
  prefs: []
  type: TYPE_NORMAL
- en: Embracing Typos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you consistently misspell a command, define aliases for your most common
    mistakes so the correct command runs anyway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Be careful not to shadow (override) an existing Linux command accidentally
    by defining an alias with the same name. Search for your proposed alias first
    with the command `which` or `type` (see [“Locating Programs to Be Run”](ch02.xhtml#section_path)),
    and run the `man` command to be extra sure there’s no other same-named command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating Empty Files Quickly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to create empty files in Linux. The `touch` command,
    which updates the timestamp on a file, also creates a file if one doesn’t already
    exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`touch` is great for creating large numbers of empty files for testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `echo` command creates an empty file if you redirect its output to a file,
    but only if you supply the `-n` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you forget the `-n` option, the resulting file contains one character, a
    newline, so it’s not empty.
  prefs: []
  type: TYPE_NORMAL
- en: Processing a File One Line at a Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you need to process a file one line at a time, `cat` the file into a `while
    read` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to compute the length of each line of a file, such as */etc/hosts*,
    pipe each line to `wc -c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A more practical example of this technique is in [Example 9-3](ch09.xhtml#ex_check_expiry_all).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying Commands That Support Recursion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [“The find Command”](ch05.xhtml#section_find), I introduced `find -exec`,
    which applies any Linux command to a whole directory tree recursively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Certain other commands support recursion themselves, and if you’re aware of
    them, you can save typing time by using their native recursion instead of constructing
    a `find` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ls -R`'
  prefs: []
  type: TYPE_NORMAL
- en: To list directories and their contents recursively
  prefs: []
  type: TYPE_NORMAL
- en: '`cp -r` or `cp -a`'
  prefs: []
  type: TYPE_NORMAL
- en: To copy directories and their contents recursively
  prefs: []
  type: TYPE_NORMAL
- en: '`rm -r`'
  prefs: []
  type: TYPE_NORMAL
- en: To delete directories and their contents recursively
  prefs: []
  type: TYPE_NORMAL
- en: '`grep -r`'
  prefs: []
  type: TYPE_NORMAL
- en: To search by regular expression throughout a directory tree
  prefs: []
  type: TYPE_NORMAL
- en: '`chmod -R`'
  prefs: []
  type: TYPE_NORMAL
- en: To change file protections recursively
  prefs: []
  type: TYPE_NORMAL
- en: '`chown -R`'
  prefs: []
  type: TYPE_NORMAL
- en: To change file ownership recursively
  prefs: []
  type: TYPE_NORMAL
- en: '`chgrp -R`'
  prefs: []
  type: TYPE_NORMAL
- en: To change file group ownership recursively
  prefs: []
  type: TYPE_NORMAL
- en: Read a Manpage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pick a common command, such as `cut` or `grep`, and read its manpage thoroughly.
    You’ll probably discover an option or two that you’ve never used and will find
    valuable. Repeat this activity every so often to polish and extend your Linux
    toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Longer Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following techniques require real effort to learn, but you’ll be paid back
    in time saved. I provide just a taste of each topic, not to teach you the details
    but to entice you to discover more on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Read the bash Manpage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run `man bash` to display the full, official documentation on `bash`, and read
    the whole thing—yes, all 46,318 words of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Take a few days. Work through it slowly. You’ll definitely learn a lot to make
    your daily Linux use easier.
  prefs: []
  type: TYPE_NORMAL
- en: Learn cron, crontab, and at
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [“A First Example: Finding Files”](ch09.xhtml#section_finding_files), there’s
    a brief note about scheduling commands to run automatically in the future at regular
    intervals. I recommend learning the program `crontab` to set up scheduled commands
    for yourself. For example, you could back up files to an external drive on a schedule,
    or send yourself reminders by email for a monthly event.'
  prefs: []
  type: TYPE_NORMAL
- en: Before running `crontab`, define your default editor as shown in [“Jumping Into
    Your Editor from less”](#section_less). Then run `crontab -e` to edit your personal
    file of scheduled commands. `crontab` launches your default editor and opens an
    empty file to specify the commands. That file is called your *crontab*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly, a scheduled command in a crontab file, often called a *cron job*,
    consists of six fields, all on a single (possibly long) line. The first five fields
    determine the job’s schedule by minute, hour, day of month, month, and day of
    week, respectively. The sixth field is the Linux command to run. You can launch
    a command hourly, daily, weekly, monthly, yearly, at certain days or times, or
    in other more complex arrangements. Some examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve created all six fields, saved the file, and exited your editor,
    the command is launched automatically (by a program called `cron`) according to
    the schedule you defined. The syntax for schedules is short and cryptic but well-documented
    on the manpage (`man 5 crontab`) and numerous online tutorials (search for *cron
    tutorial*).
  prefs: []
  type: TYPE_NORMAL
- en: 'I also recommend learning the `at` command, which schedules commands to run
    once, rather than repeatedly, at a specified date and time. Run `man at` for details.
    Here’s a command that sends you an email reminder tomorrow at 10 p.m. to brush
    your teeth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To list your pending `at` jobs, run `atq`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the commands in an `at` job, run `at -c` with the job number, and print
    the final few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove a pending job before it’s executed, run `atrm` with the job number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Learn rsync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To copy a full directory, including its subdirectories, from one disk location
    to another, many Linux users turn to the command `cp -r` or `cp -a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`cp` does the job fine the first time, but if you later modify a few files
    in directory *dir1* and perform the copy again, `cp` is wasteful. It dutifully
    copies all files and directories from *dir1* all over again, even if identical
    copies already exist in *dir2*.'
  prefs: []
  type: TYPE_NORMAL
- en: The command `rsync` is a smarter copy program. It copies only the *differences*
    between the first and second directories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The forward slash in the preceding command means to copy the files inside *dir1*.
    Without the slash, `rsync` would copy *dir1* itself, creating *dir2/dir1*.
  prefs: []
  type: TYPE_NORMAL
- en: If you later add a file to directory *dir1*, `rsync` copies just that one file.
    If you change one *line* inside a file in *dir1*, `rsync` copies that one line!
    It’s a huge time-saver when copying large directory trees multiple times. `rsync`
    can even copy to a remote server over an SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: '`rsync` has dozens of options. These are some particularly useful ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-v` (meaning “verbose”)'
  prefs: []
  type: TYPE_NORMAL
- en: To print the names of files as they’re copied
  prefs: []
  type: TYPE_NORMAL
- en: '`-n`'
  prefs: []
  type: TYPE_NORMAL
- en: To pretend to copy; combine with `-v` to see which files *would* be copied
  prefs: []
  type: TYPE_NORMAL
- en: '`-x`'
  prefs: []
  type: TYPE_NORMAL
- en: To tell `rsync` not to cross filesystem boundaries
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend getting comfortable with `rsync` for more efficient copying.
    Read the manpage and view examples in the article [“Rsync Examples in Linux”](https://oreil.ly/7gHCi)
    by Korbin Brown.
  prefs: []
  type: TYPE_NORMAL
- en: Learn Another Scripting Language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Shell scripts are convenient and powerful but have some serious shortcomings.
    For example, they’re terrible at handling filenames that contain whitespace characters.
    Consider this short `bash` script that attempts to remove a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks like the second line removes a file named *Slow Inefficient Linux*,
    but it doesn’t. It attempts to remove three files named *Slow*, *Inefficient*,
    and *Linux*. The shell expands the variable `$BOOKTITLE` before calling `rm`,
    and its expansion is three words separated by whitespace, as if you had typed
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell then invokes `rm` with three arguments, and potential disaster ensues
    as it removes the wrong files. A correct removal command would surround `$BOOKTITLE`
    with double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'which the shell expands to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This sort of subtle, potentially destructive quirk is just one example of how
    unsuitable shell scripting is for serious projects. So, I recommend learning a
    second scripting language, such as Perl, PHP, Python, or Ruby. They all handle
    whitespace properly. They all support real data structures. They all have powerful
    string-handling functions. They all do math easily. The list of benefits goes
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Use the shell to launch complex commands and create simple scripts, but for
    more substantial tasks, turn to another language. Try one of the many language
    tutorials online.
  prefs: []
  type: TYPE_NORMAL
- en: Use make for Nonprogramming Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The program `make` automatically updates files based on rules. It’s designed
    to speed up software development, but with a little effort, `make` can simplify
    other aspects of your Linux life.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you have three files named *chapter1.txt*, *chapter2.txt*, and *chapter3.txt*
    that you work on separately. You also have a fourth file, *book.txt*, that’s a
    combination of the three chapter files. Anytime a chapter changes, you need to
    recombine them and update *book.txt*, perhaps with a command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This situation is perfect for using `make`. You have:'
  prefs: []
  type: TYPE_NORMAL
- en: A bunch of files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule that relates the files, namely, that *book.txt* needs an update whenever
    any chapter file changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A command that performs the update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make` operates by reading a configuration file, usually named *Makefile*,
    that is full of rules and commands. For example, the following *Makefile* rule
    states that *book.txt* depends on the three chapter files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If the target of the rule (in this case *book.txt*) is older than any of its
    dependencies (the chapter files), then `make` considers the target to be out-of-date.
    If you supply a command on the line after the rule, `make` runs the command to
    update the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the rule, simply run the command `make`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`make` was developed for programmers, but with a little study, you can use
    it for nonprogramming tasks. Anytime you need to update files that depend on other
    files, you can likely simplify your work by writing a *Makefile*.'
  prefs: []
  type: TYPE_NORMAL
- en: '`make` helped me write and debug this book. I wrote the book in a typesetting
    language called AsciiDoc and regularly converted chapters to HTML to view in a
    browser. Here’s a `make` rule to convert any AsciiDoc file to an HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'It means: to create a file with the extension *.html* (`%.html`), look for
    a corresponding file with the extension *.asciidoc* (`%.asciidoc`). If the HTML
    file is older than the AsciiDoc file, regenerate the HTML file by running the
    command `asciidoctor` on the dependent file (`$<`), sending the output to the
    target HTML file (`-o $@`). With this slightly cryptic but short rule in place,
    I type a simple `make` command to create the HTML version of the chapter you’re
    reading now. `make` launches `asciidoctor` to perform the update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It takes less than an hour to become reasonably proficient with `make` for small
    tasks. It’s worth the effort. A helpful guide is at [makefiletutorial.com](https://makefiletutorial.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Apply Version Control to Day-to-Day Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have you ever wanted to edit a file but were afraid that your changes might
    mess it up? Perhaps you made a backup copy for safekeeping and edited the original,
    knowing you could restore the backup if you make a mistake:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This solution isn’t scalable. What if you have dozens or hundreds of files and
    dozens or hundreds of people working on them? Version control systems such as
    Git and Subversion were invented to solve this problem in general by tracking
    multiple versions of a file conveniently.
  prefs: []
  type: TYPE_NORMAL
- en: Git is widespread for maintaining software source code, but I recommend learning
    and using it for any important text files where your changes matter. Perhaps they’re
    personal files, or operating system files in */etc*. [“Traveling with Your Environment”](ch06.xhtml#section_traveling)
    suggests maintaining your `bash` configuration files with version control.
  prefs: []
  type: TYPE_NORMAL
- en: I used Git while writing this book so I could try different ways of presenting
    the material. Without too much effort, I created and maintained three different
    versions of the book—one for the full manuscript so far, one containing only the
    chapters I’d submitted to my editor for review, and one for experimental work
    where I tried out new ideas. If I didn’t like what I wrote, a single command would
    restore a previous version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Teaching Git is beyond the scope of this book, but here are some example commands
    to show you the basic workflow and whet your appetite. Convert the current directory
    (and all its subdirectories) into a Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit some files. Afterward, add the changed files to an invisible “staging
    area,” an operation that declares your intent to create a new version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the new version, providing a comment to describe your changes to the
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'View your version history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There’s much more to it, like retrieving old versions of files and saving (*pushing*)
    versions to another server. Grab a [`git` tutorial](https://oreil.ly/0AlOu), and
    get started!
  prefs: []
  type: TYPE_NORMAL
- en: Farewell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you so much for following along with me through this book. I hope it has
    fulfilled the promise I made in the preface to take your Linux command-line skills
    to the next level. Tell me about your experience at [dbarrett@oreilly.com](mailto:dbarrett@oreilly.com).
    Happy computing.
  prefs: []
  type: TYPE_NORMAL
