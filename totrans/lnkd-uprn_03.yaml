- en: Chapter 3\. Deploying Linkerd
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章部署 Linkerd
- en: Now that you understand what Linkerd is and a bit about how it works, it’s time
    to dig into deploying Linkerd in your environment. We’re going to dive into the
    whats, whys, and hows of installing Linkerd in this chapter. You can also check
    out the official Linkerd docs to review the [getting started guide](https://oreil.ly/Pyiwx).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了 Linkerd 是什么以及它的工作原理的一些知识，是时候深入到您的环境中部署 Linkerd 中了。我们将在本章中深入探讨安装 Linkerd
    的内容及其背后的原因和方式。您还可以查阅官方 Linkerd 文档，查看[入门指南](https://oreil.ly/Pyiwx)。
- en: Considerations
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑因素
- en: Installing Linkerd can often be quick, easy, and painless. Unfortunately, some
    of that ease of use can mask real pitfalls that you’ll want to avoid. We’ll dive
    more into the specifics when we get to the install section—for now, suffice it
    to say that when you install Linkerd in your actual non-demo environments, you’ll
    want to be sure to plan for generating and storing the TLS certificates we briefly
    described in [Chapter 2](ch02.html#LUAR_intro_to_linkerd). You’ll also want to
    be sure you have a good understanding of all non-HTTP ports being used by your
    applications, so that you can configure *protocol discovery* correctly for them
    (this is covered in more detail in [Chapter 4](ch04.html#LUAR_meshing_workloads)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Linkerd 通常可以快速、简便且无痛。不幸的是，这种易用性有时会掩盖真正的陷阱，你应该避免。我们将在进入安装部分时更详细地探讨具体内容——现在，简单来说，当你在实际非演示环境中安装
    Linkerd 时，你需要计划生成和存储我们在 [第 2 章](ch02.html#LUAR_intro_to_linkerd) 中简要描述的 TLS 证书。你还需要确保对应用程序使用的所有非
    HTTP 端口有很好的理解，以便可以为它们正确配置*协议发现*（这在 [第 4 章](ch04.html#LUAR_meshing_workloads) 中有更详细的介绍）。
- en: Linkerd Versioning
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd 版本控制
- en: 'We mentioned in [Chapter 2](ch02.html#LUAR_intro_to_linkerd) that this book
    is focused exclusively on Linkerd2, the second major version of Linkerd, which
    is effectively a rewrite of the project. In recognition of that, Linkerd uses
    a versioning system that looks like [semantic versioning](https://semver.org)
    but is, in fact, distinct. Linkerd has two major release channels: *stable* and
    *edge*. You can read more about this versioning scheme and release model in the
    [official Linkerd documentation](https://oreil.ly/7igL_).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 2 章](ch02.html#LUAR_intro_to_linkerd) 中提到，本书专注于 Linkerd2，即 Linkerd 的第二个主要版本，实质上是项目的重写。为此，Linkerd
    使用一个看起来像 [语义版本控制](https://semver.org) 的版本系统，但实际上是独特的。Linkerd 有两个主要发布通道：*稳定* 和
    *边缘*。您可以在 [官方 Linkerd 文档](https://oreil.ly/7igL_) 中详细了解这种版本控制方案和发布模型。
- en: Stable
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 稳定
- en: 'The stable channel is used for vendor releases, such as Buoyant Enterprise
    for Linkerd (from, unsurprisingly, Buoyant). This channel uses a modified semantic
    versioning scheme:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定通道用于供应商发布，例如 Buoyant 为 Linkerd 提供的企业版（毫不奇怪，由 Buoyant 提供）。该通道使用修改后的语义版本方案：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This means that when you see, for example, “Linkerd 2.12.3,” the major version
    is 12 and the minor version is 3\. This release has no patch number.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，例如，“Linkerd 2.12.3”，主版本号是 12，次版本号是 3。此版本没有补丁号。
- en: The rules of semantic versioning are that a change to the major version means
    that Linkerd has introduced breaking changes or significant new capabilities,
    while a change to only the minor version indicates that the new release is fully
    backward compatible with the previous version and includes improvements or bug
    fixes. Patch releases are rare and indicate a security fix has been issued for
    a given minor version.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 语义版本控制规则是，主版本变更表示 Linkerd 引入了破坏性变更或重大新功能，而仅次版本变更表示新版本与上一版本完全兼容，并包括改进或错误修复。补丁发布很少见，表明已为给定次版本发布了安全修复。
- en: Edge
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边缘
- en: 'The edge release channel is where you’ll find releases of pure open source
    Linkerd, built from the latest changes to Linkerd available when they’re released.
    Edge releases are generally provided on a weekly basis with the following versioning
    scheme:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘发布通道是您可以找到纯开源 Linkerd 发布的地方，构建于 Linkerd 最新可用更改的基础上。边缘发布通常每周提供一次，采用以下版本控制方案：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For example, `edge-24.1.1` would be the first edge release of the first month
    of the year 2024.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`edge-24.1.1` 将是 2024 年第一个月的第一个 edge 版本发布。
- en: Edge Releases Do Not Use Semantic Versioning
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边缘版本不使用语义版本控制
- en: It’s probably obvious that the edge release channel does *not* use semantic
    versioning, but it’s worth reiterating that point. It’s extremely important that
    you read the release notes for any edge release you install, and that you provide
    feedback to the Linkerd team about your experiences.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，边缘版本通道不使用语义版本控制，但重申这一点是很重要的。您必须阅读安装的每个边缘版本的发布说明，并向 Linkerd 团队提供您的使用反馈。
- en: Workloads, Pods, and Services
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作负载、Pod 和服务
- en: Linkerd is a service mesh that is designed around Kubernetes. This means that,
    unlike many other service mesh options, you can use Linkerd without ever interacting
    with any of its custom resource definitions. Linkerd uses Kubernetes constructs
    like workloads, Pods, and services to manage the majority of its routing and configuration
    options—so if you have something that runs in Kubernetes today, you can add Linkerd
    to it and it should behave the same, just with the benefits of Linkerd added to
    it. (See [Figure 3-1](#kubernetes-app-with-and-without-linkerd).) There are some
    exceptions to this that we’ll detail in [Chapter 4](ch04.html#LUAR_meshing_workloads).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 是围绕 Kubernetes 设计的服务网格。这意味着，与许多其他服务网格选项不同，您可以在不与任何自定义资源定义互动的情况下使用 Linkerd。Linkerd
    使用 Kubernetes 构建如工作负载、Pod 和服务来管理大部分的路由和配置选项。因此，如果您今天在 Kubernetes 中运行某些东西，您可以将
    Linkerd 添加到其中，并且它应该表现出相同的行为，只是具备了 Linkerd 的优势（参见 [图 3-1](#kubernetes-app-with-and-without-linkerd)）。当然，也有一些例外情况，我们将在
    [第 4 章](ch04.html#LUAR_meshing_workloads) 中详细介绍。
- en: '![luar 0301](assets/luar_0301.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0301](assets/luar_0301.png)'
- en: Figure 3-1\. Adding Linkerd should never break your application
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 添加 Linkerd 不应该破坏您的应用程序
- en: TLS certificates
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TLS 证书
- en: As we mentioned in [Chapter 2](ch02.html#LUAR_intro_to_linkerd), Linkerd relies
    on TLS certificates in a particular hierarchy to provide identity within the mesh.
    Specifically, Linkerd requires a single *trust anchor* certificate, which signs
    an *identity issuer* certificate, which signs *workload certificates* (one per
    workload in the mesh). This is shown in [Figure 3-2](#linkerd-trust-diagram-1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [第 2 章](ch02.html#LUAR_intro_to_linkerd) 中提到的，Linkerd 依赖于 TLS 证书来在网格中提供身份验证。具体来说，Linkerd
    需要一个信任锚证书，它签署一个身份发行者证书，后者签署工作负载证书（网格中每个工作负载一个）。这在 [图 3-2](#linkerd-trust-diagram-1)
    中有所体现。
- en: '![luar 0302](assets/luar_0302.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0302](assets/luar_0302.png)'
- en: Figure 3-2\. The Linkerd trust hierarchy
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2\. Linkerd 信任层级
- en: Linkerd manages workload certificates for you, but you’ll need to work with
    a certifying authority to manage the trust anchor and identity issuer certificates.
    In this chapter, we’ll describe how this works with CLI and Helm installs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 会为您管理工作负载证书，但您需要与认证机构合作管理信任锚和身份发行者证书。在本章中，我们将介绍 CLI 和 Helm 安装是如何工作的。
- en: Linkerd Viz
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd Viz
- en: 'We mentioned Linkerd Viz briefly in [Chapter 2](ch02.html#LUAR_intro_to_linkerd):
    it’s Linkerd’s open source dashboard component, providing an easy-to-use metrics
    collection and presentation system for Linkerd. It can collect useful metrics
    about all meshed workloads and present them in a simple web UI. The dashboard
    can provide the following details about your Linkerd environment:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 2 章](ch02.html#LUAR_intro_to_linkerd) 中简要提到了 Linkerd Viz：它是 Linkerd 的开源仪表板组件，提供了一个易于使用的指标收集和展示系统。它可以收集有关所有网格化工作负载的有用指标，并在简单的
    Web UI 中呈现。仪表板可以提供有关您的 Linkerd 环境的以下详细信息：
- en: 'Detailed application metrics, broken down by:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细的应用程序指标，按以下内容细分：
- en: Namespace
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间
- en: Workload
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载
- en: Pod
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod
- en: Service
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: 'Information about connections between your workloads, including:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于工作负载之间连接的信息，包括：
- en: TLS status
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS 状态
- en: Meshed status
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格状态
- en: Workload identity
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载身份
- en: Paths and headers in use (via Viz Tap)
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的路径和头部（通过 Viz Tap）
- en: Metrics breakdowns on a path-by-path basis
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于路径的指标细分
- en: We’ll discuss using Linkerd Viz in more detail in [Chapter 10](ch10.html#LUAR_observability),
    and we’ll discuss production concerns for Linkerd Viz in [Chapter 14](ch14.html#LUAR_production_ready).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 10 章](ch10.html#LUAR_observability) 中详细讨论如何使用 Linkerd Viz，并在 [第 14 章](ch14.html#LUAR_production_ready)
    中讨论 Linkerd Viz 的生产环境问题。
- en: The Linkerd Viz Dashboard Is Unauthenticated
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd Viz 仪表板不需要身份验证
- en: As discussed in [Chapter 2](ch02.html#LUAR_intro_to_linkerd), the Linkerd Viz
    dashboard doesn’t do user authentication. It’s up to you to be careful about how
    you make it available to users.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在 [第 2 章](ch02.html#LUAR_intro_to_linkerd) 中讨论的那样，Linkerd Viz 仪表板不进行用户身份验证。如何向用户提供访问权限完全取决于您的设置。
- en: Linkerd Viz is considered part of the Linkerd core, but it must be installed
    separately since some Linkerd installations completely replace Viz with custom-built
    systems. In general, we strongly recommend installing Viz unless you have a strong
    reason not to. In the following instructions, we will include installing Viz.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Viz 被认为是 Linkerd 核心的一部分，但必须单独安装，因为某些 Linkerd 安装完全替换了 Viz 与自定义构建系统。一般来说，我们强烈建议安装
    Viz，除非有强烈的理由不这样做。在接下来的说明中，我们将包括安装 Viz。
- en: Always Use Your Own Prometheus
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用您自己的 Prometheus
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装 Linkerd Viz 将安装一个内部的 Prometheus 实例。*不要在生产环境中使用这个 Prometheus*，因为它没有配置持久存储；相反，请参阅
    [Linkerd 文档](https://oreil.ly/hI6eF) 和 [Example 10-9](ch10.html#EX12-production-prometheus)
    了解如何使用外部 Prometheus 实例的信息。
- en: Deploying Linkerd
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Linkerd
- en: To deploy Linkerd, you’ll need to have a Kubernetes cluster available. This
    guide will use a [k3s](https://k3s.io) cluster deployed locally using the [k3d](https://k3d.io)
    tool. If you’re already comfortable installing and deploying Linkerd, feel free
    to skip ahead to [Chapter 4](ch04.html#LUAR_meshing_workloads).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署 Linkerd，您需要一个可用的 Kubernetes 集群。本指南将使用本地部署的 [k3s](https://k3s.io) 集群，使用 [k3d](https://k3d.io)
    工具。如果您已经熟悉安装和部署 Linkerd，请随意跳到 [第四章](ch04.html#LUAR_meshing_workloads)。
- en: Required Tools
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 必需工具
- en: 'For the rest of this book, we’re going to assume you have the following tools
    available:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们假设您已经具备以下工具：
- en: '[`kubectl`](https://oreil.ly/WPcEB)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kubectl`](https://oreil.ly/WPcEB)'
- en: '[Helm](https://oreil.ly/HMIQw)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Helm](https://oreil.ly/HMIQw)'
- en: The [`linkerd` CLI](https://oreil.ly/OjxD2)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`linkerd` CLI](https://oreil.ly/OjxD2)'
- en: '[k3d](https://k3d.io)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[k3d](https://k3d.io)'
- en: The [`step` CLI](https://oreil.ly/Y40gA)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[step 命令行界面](https://oreil.ly/Y40gA)'
- en: Provisioning a Kubernetes Cluster
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Kubernetes 集群
- en: 'Start by creating a k3d cluster:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个 k3d 集群：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'k3d will provision your Kubernetes cluster and update your `KUBECONFIG`. You
    can test your connection to your new cluster by running:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: k3d 将为您的 Kubernetes 集群进行配置，并更新您的 `KUBECONFIG`。您可以通过运行以下命令测试与新集群的连接：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should also validate that the cluster is configured correctly and that
    you have the appropriate permissions for the install by running a preinstall check
    via the Linkerd CLI:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该验证集群是否正确配置，并且您是否具有安装所需权限，通过 Linkerd CLI 运行预安装检查：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing Linkerd via the CLI
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 CLI 安装 Linkerd
- en: The Linkerd CLI makes it easy to get started with a Linkerd install. It will
    generate the Kubernetes manifests required to install Linkerd and allow you to
    easily apply them to your cluster.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd CLI 可以轻松帮助您开始 Linkerd 安装。它将生成安装 Linkerd 所需的 Kubernetes 清单，并允许您轻松地将它们应用到您的集群中。
- en: 'Run the following commands to install Linkerd via the CLI:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来通过 CLI 安装 Linkerd：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will install the Linkerd CRDs in your cluster. As of Linkerd 2.12, installing
    Linkerd’s CRDs is done using a separate chart and requires its own command when
    running an install. Following the CRD install, you’ll need to continue the installation
    by installing the core Linkerd control plane:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的集群中安装 Linkerd CRD。从 Linkerd 2.12 开始，安装 Linkerd 的 CRD 使用单独的图表完成，并在运行安装时需要其自己的命令。安装完
    CRD 后，您需要继续安装核心 Linkerd 控制平面：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With this complete, the Linkerd control plane will begin setting itself up
    in your cluster. You’ll soon have access to all the tools you need to run a minimal
    Linkerd service mesh. You can confirm the install has completed successfully by
    running:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，Linkerd 控制平面将开始在您的集群中设置自身。您很快将可以访问运行最小 Linkerd 服务网格所需的所有工具。您可以通过运行以下命令确认安装是否成功：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Production Clusters Need Production Certificates
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产集群需要生产证书
- en: Again, if you don’t explicitly say otherwise, `linkerd install` will silently
    create certificates for you. This is OK for a demo, but *not* for production.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果您没有明确说明，`linkerd install` 将悄悄为您创建证书。这对于演示是可以的，但*不适用于生产*。
- en: 'After installing the core Linkerd control plane, you can install Linkerd Viz:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完核心 Linkerd 控制平面后，您可以安装 Linkerd Viz：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As with Linkerd itself, this will start the install and then immediately return.
    To wait for it to finish and confirm that installation was successful, run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Linkerd 本身一样，这将启动安装并立即返回。要等待安装完成并确认安装成功，运行：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Always Use Your Own Prometheus
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用您自己的 Prometheus
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装 Linkerd Viz 将会安装一个内部的 Prometheus 实例。*不要在生产环境中使用此 Prometheus*，因为它没有配置持久存储；相反，请查看[Linkerd
    文档](https://oreil.ly/hI6eF)和[示例 10-9](ch10.html#EX12-production-prometheus)了解如何使用外部的
    Prometheus 实例。
- en: Installing Linkerd via Helm
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Helm 安装 Linkerd
- en: The folks at Buoyant, the makers of Linkerd, recommend in their [production
    runbook guide](https://oreil.ly/ZjDzr) that you use Helm to install and manage
    Linkerd in production. Helm provides a well tested, documented, and supported
    path for installing and upgrading Linkerd (and in fact, the Linkerd CLI actually
    uses Helm templates under the hood to generate its Kubernetes manifests).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Buoyant 公司，Linkerd 的开发者，在他们的[生产运行手册](https://oreil.ly/ZjDzr)中建议你使用 Helm 在生产环境中安装和管理
    Linkerd。Helm 提供了一个经过充分测试、有文档支持的安装和升级路径（实际上，Linkerd CLI 在底层使用 Helm 模板生成其 Kubernetes
    清单）。
- en: Using the Helm-based install also requires you to think more about certificate
    management up front, which simplifies the process of renewing your certificates
    later. We’ll cover certificates in (much) more detail in [Chapter 7](ch07.html#LUAR_mtls_and_certs);
    for now, let’s walk through a simple Helm installation with manually generated
    certificates.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于 Helm 的安装也需要你提前考虑证书管理问题，这简化了稍后更新证书的流程。我们将在[第 7 章](ch07.html#LUAR_mtls_and_certs)详细介绍证书；现在，让我们通过手动生成证书来简单演示
    Helm 安装过程。
- en: Generate Linkerd certificates
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成 Linkerd 证书
- en: 'The simplest way to install Linkerd with Helm is to manually generate the two
    certificates that every Linkerd installation requires: the trust anchor and the
    identity issuer. We’ll use the Smallstep CLI, `step`, to do this, as illustrated
    in [Example 3-1](#EX1).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Helm 最简单的安装方式是手动生成 Linkerd 所需的两个证书：信任锚点和身份发行者。我们将使用 Smallstep CLI，`step`，来完成此操作，如
    [示例 3-1](#EX1) 所示。
- en: Certificates and Security
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书与安全性
- en: We’re generating certificates here without giving any real thought to how to
    safely manage the private keys. This is OK for a demo, but *not* for production
    use. We’ll get into this more in [Chapter 7](ch07.html#LUAR_mtls_and_certs).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里生成证书时，并未真正考虑如何安全地管理私钥。这对于演示来说是可以接受的，但*不能*用于生产环境。我们将在[第 7 章](ch07.html#LUAR_mtls_and_certs)进一步探讨这个问题。
- en: Example 3-1\. Creating certificates for Linkerd
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-1\. 为 Linkerd 创建证书
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After running these commands, you’ll have the trust hierarchy shown in [Figure 3-4](#trust-hierarchy-step-before-install).
    Your laptop will be holding both the public and private keys for the trust anchor
    and the identity issuer, and the identity issuer’s cert will be signed by the
    trust anchor. (There aren’t any workload certs yet: Linkerd will create those
    when it’s installed in the cluster.)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令后，你将得到如 [图 3-4](#trust-hierarchy-step-before-install) 所示的信任层级。你的笔记本将保存信任锚点和身份发行者的公钥和私钥，而身份发行者的证书将由信任锚点签名。（尚未有工作负载证书：当
    Linkerd 安装在集群中时，将会创建这些证书。）
- en: '![luar 0304](assets/luar_0304.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0304](assets/luar_0304.png)'
- en: Figure 3-4\. The trust hierarchy created with the `step` command
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-4\. 使用 `step` 命令创建的信任层级
- en: Keep the Keys!
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保管好你的密钥！
- en: Remember, in the real world, it’s *very important* to keep the private key safe.
    Even for our more academic use here, keep it around—you’ll want it when we talk
    about certificate rotation in [Chapter 7](ch07.html#LUAR_mtls_and_certs).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在实际场景中，保护私钥的安全性非常重要。即使在我们这里更加学术化的使用中，也要妥善保管——在我们讨论第 7 章中的证书轮换时会用到它。
- en: The Linkerd docs cover creating certificates in [some detail](https://oreil.ly/BPO3F).
    Please refer to the latest version of the docs if you run into any difficulty.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 文档详细介绍了如何创建证书的过程，请在遇到任何困难时参考最新版本的文档。
- en: Helm install
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Helm 安装
- en: 'After generating certificates, you can install Linkerd with Helm using the
    commands in [Example 3-2](#EX2). Once again, the official docs have the most up-to-date
    instructions; however, it’s very important to understand what the `--set-file`
    arguments shown in [Example 3-2](#EX2) do:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 生成证书后，可以使用 [示例 3-2](#EX2) 中的命令使用 Helm 安装 Linkerd。再次强调，官方文档中包含最新的指令；但是，了解 [示例 3-2](#EX2)
    中的 `--set-file` 参数的作用非常重要：
- en: '`--set-file identityTrustAnchorsPEM` tells Helm the file from which to copy
    the trust anchor’s public key. This is the only key we need for the trust anchor.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--set-file identityTrustAnchorsPEM` 告诉Helm从中复制信任锚点的公钥的文件。这是我们需要的信任锚点的唯一密钥。'
- en: '`--set-file identity.issuers.tls.crtPEM` and `--set-file identity.issu⁠ers.tls.keyPEM`
    tell Helm the files from which to copy the identity issuer’s public and private
    keys, respectively. Both are required.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--set-file identity.issuers.tls.crtPEM` 和 `--set-file identity.issuers.tls.keyPEM`
    告诉Helm从中复制身份颁发者的公钥和私钥文件，两者都是必需的。'
- en: Example 3-2\. Installing Linkerd with Helm
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例3-2\. 使用Helm安装Linkerd
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `linkerd check` command will let you know the current state of Linkerd in
    your cluster. It’s useful for ensuring your install completed successfully.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd check` 命令将告诉您集群中Linkerd的当前状态。用于确保您的安装成功完成。'
- en: Once `helm install` completes, the cluster will have copies of the keys Linkerd
    needs to run, as shown in [Figure 3-5](#trust-hierarchy-step-after-install). The
    keys will, of course, still be present on your laptop, so be careful with them!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`helm install`完成，集群将拥有Linkerd运行所需的密钥副本，如[图3-5](#trust-hierarchy-step-after-install)所示。当然，这些密钥仍然存在于您的笔记本上，所以请小心处理它们！
- en: Permissions Matter!
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限很重要！
- en: Note that the trust anchor’s private key is *not* present in the cluster, but
    the identity issuer’s private key *is* present in the cluster. This is required
    for Linkerd to work. In the real world, you’ll want to make sure that Linkerd
    itself is the only thing that can see that key. This is covered in more detail
    in [Chapter 7](ch07.html#LUAR_mtls_and_certs).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，信任锚点的私钥*不*在集群中，但身份颁发者的私钥*在*集群中。这对于Linkerd的运行是必需的。在现实世界中，您需要确保只有Linkerd本身能够看到该密钥。更详细的内容在[第7章](ch07.html#LUAR_mtls_and_certs)中有所涵盖。
- en: '![luar 0305](assets/luar_0305.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0305](assets/luar_0305.png)'
- en: Figure 3-5\. The trust hierarchy created after `helm install`
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-5\. `helm install` 后创建的信任层次结构
- en: 'Finally, we can install Linkerd Viz using its Helm chart:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用其Helm图表安装Linkerd Viz：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As before, we’ll monitor the installation to make sure that it succeeds:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们将监视安装以确保其成功：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Always Use Your Own Prometheus
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用您自己的Prometheus
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装Linkerd Viz将安装一个内部的Prometheus实例。*在生产环境中不要使用此Prometheus*，因为它没有配置持久存储；而是参见[Linkerd文档](https://oreil.ly/hI6eF)和[示例10-9](ch10.html#EX12-production-prometheus)以获取关于使用外部Prometheus实例的信息。
- en: Configuring Linkerd
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Linkerd
- en: Now that you’ve completed an install of Linkerd’s core control plane, we’re
    going to pause and take a look at what options you have for configuring the Linkerd
    control plane in your cluster. This is necessarily going to be a summary of common
    configuration points for the control plane, not an exhaustive list.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已完成Linkerd核心控制平面的安装，我们将暂停一下，并查看您在集群中配置Linkerd控制平面的选项。这必然会是一个控制平面常见配置点的摘要，而不是详尽的列表。
- en: 'As of Linkerd 2.12, the control plane is managed and configured via the `linkerd-control-plane`
    Helm chart. The following settings provide important configuration points for
    Linkerd. The particular settings can be found by reviewing the current Helm chart
    values using the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从Linkerd 2.12开始，控制平面通过`linkerd-control-plane` Helm图表进行管理和配置。以下设置为Linkerd提供了重要的配置点。通过以下命令查看当前Helm图表值来找到特定的设置：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We’ll talk about the general settings, and you’ll need to map them to the appropriate
    locations in your values file. See [Chapter 14](ch14.html#LUAR_production_ready)
    for some examples of Linkerd Helm values files.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论一般设置，您需要将它们映射到您值文件中的适当位置。参见[第14章](ch14.html#LUAR_production_ready)中Linkerd
    Helm值文件的一些示例。
- en: Cluster Networks
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群网络
- en: 'Linkerd doesn’t have a way to read your cluster network settings at install
    time, so the `linkerd-control-plane` Helm chart assumes that your cluster is using
    one of the common network ranges for its cluster network. If your cluster’s IP
    addresses are not in one of the following ranges, you’ll need to override the
    IP range at install time:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd在安装时没有办法读取您的集群网络设置，因此`linkerd-control-plane` Helm图表假设您的集群正在使用常见的网络范围之一作为其集群网络。如果您的集群IP地址不在以下范围内，您需要在安装时覆盖IP范围：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Linkerd Control Plane Resources
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd控制平面资源
- en: 'The default install of Linkerd doesn’t set resource requests or limits. You
    should consider setting requests and limits for your control plane components
    to aid in scheduling Pods and ensuring Linkerd has the resources it needs to function.
    Be cautious: as of Linkerd 2.12 the Linkerd destination component has a fairly
    fixed memory footprint that scales with the number of endpoints in your cluster.
    If the memory limit you set is too low, you may find yourself in a loop of destination
    components being “out of memory killed,” or OOMKilled.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd的默认安装不设置资源请求或限制。您应考虑为控制平面组件设置请求和限制，以帮助调度Pod并确保Linkerd具有所需的资源。请注意：从Linkerd
    2.12开始，Linkerd目标组件具有相对固定的内存占用量，随着集群中端点数量的增加而扩展。如果您设置的内存限制过低，可能会发现目标组件被“内存耗尽杀死”或OOMKilled。
- en: Opaque and Skip Ports
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不透明端口和跳过端口
- en: Opaque ports and skip ports are Linkerd names for ports to which special rules
    are applied. You’ll want to review the [relevant Linkerd docs](https://oreil.ly/_H929)
    for the most up-to-date information on the topic. We’ll give a brief overview
    of the concepts here; you’ll find many more details in [Chapter 4](ch04.html#LUAR_meshing_workloads).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 不透明端口和跳过端口是Linkerd对应的端口名称，应用特殊规则。您将希望查阅[相关Linkerd文档](https://oreil.ly/_H929)获取有关该主题的最新信息。我们将在此处简要概述这些概念；您将在[第四章](ch04.html#LUAR_meshing_workloads)中找到更多细节。
- en: An *opaque* port in Linkerd is a port that should be treated as a generic TCP
    connection. Linkerd will still use mTLS on opaque traffic, but it will *not* perform
    protocol detection or any kind of protocol-specific logic, so the end result will
    be similar to the way simple, connection-oriented network load balancing works.
    A port should be marked as opaque at install time if you know it will be part
    of the mesh and serving non-HTTP TCP traffic.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linkerd中，*不透明* 端口是指应将其视为通用TCP连接的端口。Linkerd仍将在不透明流量上使用mTLS，但不会执行协议检测或任何类型的协议特定逻辑，因此最终结果类似于简单的基于连接的网络负载均衡工作方式。如果您知道端口将成为网格的一部分并提供非HTTP
    TCP流量，则应在安装时将其标记为不透明。
- en: Remember, there is *no* protocol detection, and thus *no* request metrics or
    per-request load balancing, on opaque ports.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在不透明端口上*没有*协议检测，因此也*没有*请求度量或每请求负载平衡。
- en: This section is dedicated to discussing global, install-time Linkerd configuration
    values. Any opaque port set at install time will be applied globally to all workloads.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在讨论全局、安装时Linkerd配置值。任何在安装时设置为不透明端口的端口将全局应用于所有工作负载。
- en: Default Opaque Ports
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认不透明端口
- en: 'The following ports are the defaults configured at install time:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下端口是安装时配置的默认值：
- en: 'SMTP: 25 and 587'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMTP：25和587
- en: 'MySQL: 3306 and, when used with Galera, 4444\. (Ports 4567 and 4568 might also
    be used by Galera, but they’re not opaque by default.)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL：3306和，与Galera一起使用时，4444端口。（4567和4568端口也可能被Galera使用，但默认情况下不透明。）
- en: 'PostgreSQL: 5432'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL：5432
- en: 'Redis: 6379'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis：6379
- en: 'Elasticsearch: 9300'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elasticsearch：9300
- en: 'Memcached: 11211'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached：11211
- en: By contrast, a *skip* port is one that you instruct Linkerd to completely ignore.
    Skipped traffic will completely bypass the proxy; the mesh will not handle it
    at all. Notably, *Linkerd cannot encrypt traffic over skip ports.*
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，*跳过* 端口是指您指示Linkerd完全忽略的端口。跳过的流量将完全绕过代理；网格将不会处理它。值得注意的是，*Linkerd无法加密跳过端口上的流量*。
- en: Unlike opaque ports, you need to tell Linkerd whether skip ports refer to inbound
    traffic, outbound traffic, or both.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与不透明端口不同，您需要告知Linkerd跳过端口是指入站流量、出站流量还是两者兼有。
- en: Default Skip Ports
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认跳过端口
- en: Ports 4567 and 4568 (Galera) are ignored by default in a standard Linkerd install.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准Linkerd安装中，默认情况下会忽略4567和4568端口（Galera）。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'You should now have a good sense of how to install Linkerd as well as an understanding
    of the major configuration points in Linkerd. You should also have a good grasp
    of the potential points of friction with installing Linkerd: specifically, generating
    certificates and handling non-HTTP traffic. While you can use either the Linkerd
    CLI or the Linkerd Helm charts to install Linkerd, we recommend that you default
    to using Helm.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该对如何安装Linkerd有了良好的理解，以及对Linkerd的主要配置点有了理解。您还应该对安装Linkerd可能存在的摩擦点有了良好的掌握：具体而言，生成证书和处理非HTTP流量。您可以使用Linkerd
    CLI或Linkerd Helm图表安装Linkerd，我们建议您默认使用Helm。
