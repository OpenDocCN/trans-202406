- en: Chapter 3\. Deploying Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you understand what Linkerd is and a bit about how it works, it’s time
    to dig into deploying Linkerd in your environment. We’re going to dive into the
    whats, whys, and hows of installing Linkerd in this chapter. You can also check
    out the official Linkerd docs to review the [getting started guide](https://oreil.ly/Pyiwx).
  prefs: []
  type: TYPE_NORMAL
- en: Considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Linkerd can often be quick, easy, and painless. Unfortunately, some
    of that ease of use can mask real pitfalls that you’ll want to avoid. We’ll dive
    more into the specifics when we get to the install section—for now, suffice it
    to say that when you install Linkerd in your actual non-demo environments, you’ll
    want to be sure to plan for generating and storing the TLS certificates we briefly
    described in [Chapter 2](ch02.html#LUAR_intro_to_linkerd). You’ll also want to
    be sure you have a good understanding of all non-HTTP ports being used by your
    applications, so that you can configure *protocol discovery* correctly for them
    (this is covered in more detail in [Chapter 4](ch04.html#LUAR_meshing_workloads)).
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd Versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We mentioned in [Chapter 2](ch02.html#LUAR_intro_to_linkerd) that this book
    is focused exclusively on Linkerd2, the second major version of Linkerd, which
    is effectively a rewrite of the project. In recognition of that, Linkerd uses
    a versioning system that looks like [semantic versioning](https://semver.org)
    but is, in fact, distinct. Linkerd has two major release channels: *stable* and
    *edge*. You can read more about this versioning scheme and release model in the
    [official Linkerd documentation](https://oreil.ly/7igL_).'
  prefs: []
  type: TYPE_NORMAL
- en: Stable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The stable channel is used for vendor releases, such as Buoyant Enterprise
    for Linkerd (from, unsurprisingly, Buoyant). This channel uses a modified semantic
    versioning scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This means that when you see, for example, “Linkerd 2.12.3,” the major version
    is 12 and the minor version is 3\. This release has no patch number.
  prefs: []
  type: TYPE_NORMAL
- en: The rules of semantic versioning are that a change to the major version means
    that Linkerd has introduced breaking changes or significant new capabilities,
    while a change to only the minor version indicates that the new release is fully
    backward compatible with the previous version and includes improvements or bug
    fixes. Patch releases are rare and indicate a security fix has been issued for
    a given minor version.
  prefs: []
  type: TYPE_NORMAL
- en: Edge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The edge release channel is where you’ll find releases of pure open source
    Linkerd, built from the latest changes to Linkerd available when they’re released.
    Edge releases are generally provided on a weekly basis with the following versioning
    scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For example, `edge-24.1.1` would be the first edge release of the first month
    of the year 2024.
  prefs: []
  type: TYPE_NORMAL
- en: Edge Releases Do Not Use Semantic Versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s probably obvious that the edge release channel does *not* use semantic
    versioning, but it’s worth reiterating that point. It’s extremely important that
    you read the release notes for any edge release you install, and that you provide
    feedback to the Linkerd team about your experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Workloads, Pods, and Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linkerd is a service mesh that is designed around Kubernetes. This means that,
    unlike many other service mesh options, you can use Linkerd without ever interacting
    with any of its custom resource definitions. Linkerd uses Kubernetes constructs
    like workloads, Pods, and services to manage the majority of its routing and configuration
    options—so if you have something that runs in Kubernetes today, you can add Linkerd
    to it and it should behave the same, just with the benefits of Linkerd added to
    it. (See [Figure 3-1](#kubernetes-app-with-and-without-linkerd).) There are some
    exceptions to this that we’ll detail in [Chapter 4](ch04.html#LUAR_meshing_workloads).
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0301](assets/luar_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. Adding Linkerd should never break your application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: TLS certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned in [Chapter 2](ch02.html#LUAR_intro_to_linkerd), Linkerd relies
    on TLS certificates in a particular hierarchy to provide identity within the mesh.
    Specifically, Linkerd requires a single *trust anchor* certificate, which signs
    an *identity issuer* certificate, which signs *workload certificates* (one per
    workload in the mesh). This is shown in [Figure 3-2](#linkerd-trust-diagram-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0302](assets/luar_0302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-2\. The Linkerd trust hierarchy
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Linkerd manages workload certificates for you, but you’ll need to work with
    a certifying authority to manage the trust anchor and identity issuer certificates.
    In this chapter, we’ll describe how this works with CLI and Helm installs.
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd Viz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We mentioned Linkerd Viz briefly in [Chapter 2](ch02.html#LUAR_intro_to_linkerd):
    it’s Linkerd’s open source dashboard component, providing an easy-to-use metrics
    collection and presentation system for Linkerd. It can collect useful metrics
    about all meshed workloads and present them in a simple web UI. The dashboard
    can provide the following details about your Linkerd environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Detailed application metrics, broken down by:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Namespace
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Workload
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pod
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information about connections between your workloads, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS status
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Meshed status
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Workload identity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths and headers in use (via Viz Tap)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics breakdowns on a path-by-path basis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll discuss using Linkerd Viz in more detail in [Chapter 10](ch10.html#LUAR_observability),
    and we’ll discuss production concerns for Linkerd Viz in [Chapter 14](ch14.html#LUAR_production_ready).
  prefs: []
  type: TYPE_NORMAL
- en: The Linkerd Viz Dashboard Is Unauthenticated
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in [Chapter 2](ch02.html#LUAR_intro_to_linkerd), the Linkerd Viz
    dashboard doesn’t do user authentication. It’s up to you to be careful about how
    you make it available to users.
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd Viz is considered part of the Linkerd core, but it must be installed
    separately since some Linkerd installations completely replace Viz with custom-built
    systems. In general, we strongly recommend installing Viz unless you have a strong
    reason not to. In the following instructions, we will include installing Viz.
  prefs: []
  type: TYPE_NORMAL
- en: Always Use Your Own Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To deploy Linkerd, you’ll need to have a Kubernetes cluster available. This
    guide will use a [k3s](https://k3s.io) cluster deployed locally using the [k3d](https://k3d.io)
    tool. If you’re already comfortable installing and deploying Linkerd, feel free
    to skip ahead to [Chapter 4](ch04.html#LUAR_meshing_workloads).
  prefs: []
  type: TYPE_NORMAL
- en: Required Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the rest of this book, we’re going to assume you have the following tools
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`kubectl`](https://oreil.ly/WPcEB)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Helm](https://oreil.ly/HMIQw)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`linkerd` CLI](https://oreil.ly/OjxD2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[k3d](https://k3d.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`step` CLI](https://oreil.ly/Y40gA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a Kubernetes Cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating a k3d cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'k3d will provision your Kubernetes cluster and update your `KUBECONFIG`. You
    can test your connection to your new cluster by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also validate that the cluster is configured correctly and that
    you have the appropriate permissions for the install by running a preinstall check
    via the Linkerd CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing Linkerd via the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linkerd CLI makes it easy to get started with a Linkerd install. It will
    generate the Kubernetes manifests required to install Linkerd and allow you to
    easily apply them to your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to install Linkerd via the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the Linkerd CRDs in your cluster. As of Linkerd 2.12, installing
    Linkerd’s CRDs is done using a separate chart and requires its own command when
    running an install. Following the CRD install, you’ll need to continue the installation
    by installing the core Linkerd control plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With this complete, the Linkerd control plane will begin setting itself up
    in your cluster. You’ll soon have access to all the tools you need to run a minimal
    Linkerd service mesh. You can confirm the install has completed successfully by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Production Clusters Need Production Certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, if you don’t explicitly say otherwise, `linkerd install` will silently
    create certificates for you. This is OK for a demo, but *not* for production.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the core Linkerd control plane, you can install Linkerd Viz:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As with Linkerd itself, this will start the install and then immediately return.
    To wait for it to finish and confirm that installation was successful, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Always Use Your Own Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Linkerd via Helm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The folks at Buoyant, the makers of Linkerd, recommend in their [production
    runbook guide](https://oreil.ly/ZjDzr) that you use Helm to install and manage
    Linkerd in production. Helm provides a well tested, documented, and supported
    path for installing and upgrading Linkerd (and in fact, the Linkerd CLI actually
    uses Helm templates under the hood to generate its Kubernetes manifests).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Helm-based install also requires you to think more about certificate
    management up front, which simplifies the process of renewing your certificates
    later. We’ll cover certificates in (much) more detail in [Chapter 7](ch07.html#LUAR_mtls_and_certs);
    for now, let’s walk through a simple Helm installation with manually generated
    certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Generate Linkerd certificates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The simplest way to install Linkerd with Helm is to manually generate the two
    certificates that every Linkerd installation requires: the trust anchor and the
    identity issuer. We’ll use the Smallstep CLI, `step`, to do this, as illustrated
    in [Example 3-1](#EX1).'
  prefs: []
  type: TYPE_NORMAL
- en: Certificates and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re generating certificates here without giving any real thought to how to
    safely manage the private keys. This is OK for a demo, but *not* for production
    use. We’ll get into this more in [Chapter 7](ch07.html#LUAR_mtls_and_certs).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-1\. Creating certificates for Linkerd
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After running these commands, you’ll have the trust hierarchy shown in [Figure 3-4](#trust-hierarchy-step-before-install).
    Your laptop will be holding both the public and private keys for the trust anchor
    and the identity issuer, and the identity issuer’s cert will be signed by the
    trust anchor. (There aren’t any workload certs yet: Linkerd will create those
    when it’s installed in the cluster.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0304](assets/luar_0304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-4\. The trust hierarchy created with the `step` command
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Keep the Keys!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember, in the real world, it’s *very important* to keep the private key safe.
    Even for our more academic use here, keep it around—you’ll want it when we talk
    about certificate rotation in [Chapter 7](ch07.html#LUAR_mtls_and_certs).
  prefs: []
  type: TYPE_NORMAL
- en: The Linkerd docs cover creating certificates in [some detail](https://oreil.ly/BPO3F).
    Please refer to the latest version of the docs if you run into any difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: Helm install
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After generating certificates, you can install Linkerd with Helm using the
    commands in [Example 3-2](#EX2). Once again, the official docs have the most up-to-date
    instructions; however, it’s very important to understand what the `--set-file`
    arguments shown in [Example 3-2](#EX2) do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--set-file identityTrustAnchorsPEM` tells Helm the file from which to copy
    the trust anchor’s public key. This is the only key we need for the trust anchor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--set-file identity.issuers.tls.crtPEM` and `--set-file identity.issu⁠ers.tls.keyPEM`
    tell Helm the files from which to copy the identity issuer’s public and private
    keys, respectively. Both are required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example 3-2\. Installing Linkerd with Helm
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `linkerd check` command will let you know the current state of Linkerd in
    your cluster. It’s useful for ensuring your install completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Once `helm install` completes, the cluster will have copies of the keys Linkerd
    needs to run, as shown in [Figure 3-5](#trust-hierarchy-step-after-install). The
    keys will, of course, still be present on your laptop, so be careful with them!
  prefs: []
  type: TYPE_NORMAL
- en: Permissions Matter!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that the trust anchor’s private key is *not* present in the cluster, but
    the identity issuer’s private key *is* present in the cluster. This is required
    for Linkerd to work. In the real world, you’ll want to make sure that Linkerd
    itself is the only thing that can see that key. This is covered in more detail
    in [Chapter 7](ch07.html#LUAR_mtls_and_certs).
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 0305](assets/luar_0305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-5\. The trust hierarchy created after `helm install`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, we can install Linkerd Viz using its Helm chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As before, we’ll monitor the installation to make sure that it succeeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Always Use Your Own Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve completed an install of Linkerd’s core control plane, we’re
    going to pause and take a look at what options you have for configuring the Linkerd
    control plane in your cluster. This is necessarily going to be a summary of common
    configuration points for the control plane, not an exhaustive list.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of Linkerd 2.12, the control plane is managed and configured via the `linkerd-control-plane`
    Helm chart. The following settings provide important configuration points for
    Linkerd. The particular settings can be found by reviewing the current Helm chart
    values using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We’ll talk about the general settings, and you’ll need to map them to the appropriate
    locations in your values file. See [Chapter 14](ch14.html#LUAR_production_ready)
    for some examples of Linkerd Helm values files.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linkerd doesn’t have a way to read your cluster network settings at install
    time, so the `linkerd-control-plane` Helm chart assumes that your cluster is using
    one of the common network ranges for its cluster network. If your cluster’s IP
    addresses are not in one of the following ranges, you’ll need to override the
    IP range at install time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Linkerd Control Plane Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default install of Linkerd doesn’t set resource requests or limits. You
    should consider setting requests and limits for your control plane components
    to aid in scheduling Pods and ensuring Linkerd has the resources it needs to function.
    Be cautious: as of Linkerd 2.12 the Linkerd destination component has a fairly
    fixed memory footprint that scales with the number of endpoints in your cluster.
    If the memory limit you set is too low, you may find yourself in a loop of destination
    components being “out of memory killed,” or OOMKilled.'
  prefs: []
  type: TYPE_NORMAL
- en: Opaque and Skip Ports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Opaque ports and skip ports are Linkerd names for ports to which special rules
    are applied. You’ll want to review the [relevant Linkerd docs](https://oreil.ly/_H929)
    for the most up-to-date information on the topic. We’ll give a brief overview
    of the concepts here; you’ll find many more details in [Chapter 4](ch04.html#LUAR_meshing_workloads).
  prefs: []
  type: TYPE_NORMAL
- en: An *opaque* port in Linkerd is a port that should be treated as a generic TCP
    connection. Linkerd will still use mTLS on opaque traffic, but it will *not* perform
    protocol detection or any kind of protocol-specific logic, so the end result will
    be similar to the way simple, connection-oriented network load balancing works.
    A port should be marked as opaque at install time if you know it will be part
    of the mesh and serving non-HTTP TCP traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, there is *no* protocol detection, and thus *no* request metrics or
    per-request load balancing, on opaque ports.
  prefs: []
  type: TYPE_NORMAL
- en: This section is dedicated to discussing global, install-time Linkerd configuration
    values. Any opaque port set at install time will be applied globally to all workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Default Opaque Ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following ports are the defaults configured at install time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SMTP: 25 and 587'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL: 3306 and, when used with Galera, 4444\. (Ports 4567 and 4568 might also
    be used by Galera, but they’re not opaque by default.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PostgreSQL: 5432'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Redis: 6379'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Elasticsearch: 9300'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memcached: 11211'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By contrast, a *skip* port is one that you instruct Linkerd to completely ignore.
    Skipped traffic will completely bypass the proxy; the mesh will not handle it
    at all. Notably, *Linkerd cannot encrypt traffic over skip ports.*
  prefs: []
  type: TYPE_NORMAL
- en: Unlike opaque ports, you need to tell Linkerd whether skip ports refer to inbound
    traffic, outbound traffic, or both.
  prefs: []
  type: TYPE_NORMAL
- en: Default Skip Ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ports 4567 and 4568 (Galera) are ignored by default in a standard Linkerd install.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should now have a good sense of how to install Linkerd as well as an understanding
    of the major configuration points in Linkerd. You should also have a good grasp
    of the potential points of friction with installing Linkerd: specifically, generating
    certificates and handling non-HTTP traffic. While you can use either the Linkerd
    CLI or the Linkerd Helm charts to install Linkerd, we recommend that you default
    to using Helm.'
  prefs: []
  type: TYPE_NORMAL
