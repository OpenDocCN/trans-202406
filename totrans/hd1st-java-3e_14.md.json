["```\nSystem.out.println(\"limit = \" + limit);\n```", "```\nList<String> result = strings.stream()\n                             .sorted((s1, s2) -> s1.compareToIgnoreCase(s2))\n                             .skip(2)\n                             .limit(4)\n                             .collect(Collectors.toList());\n```", "```\n    Stream<String> limit = strings.stream()\n                                  .limit(4);\n    List<String> result = limit.collect(Collectors.toList());\n    List<String> result2 = limit.collect(Collectors.toList());\n    ```", "```\n(String s1, String s2) -> {\n  return s1.compareToIgnoreCase(s2);\n}\n```", "```\nComparator<String> comparator = (s1, s2) -> s1.compareToIgnoreCase(s2);\n\nRunnable runnable = () -> System.out.println(\"Hello!\");\n\nConsumer<String> consumer = str -> System.out.println(str);\n```", "```\nclass Songs {\n  public List<Song> getSongs() {\n    return List.of(\n      new Song(\"$10\", \"Hitchhiker\", \"Electronic\", 2016, 183),\n      new Song(\"Havana\", \"Camila Cabello\", \"R&B\", 2017, 324),\n      new Song(\"Cassidy\", \"Grateful Dead\", \"Rock\", 1972, 123),\n      new Song(\"50 ways\", \"Paul Simon\", \"Soft Rock\", 1975, 199),\n      new Song(\"Hurt\", \"Nine Inch Nails\", \"Industrial Rock\", 1995, 257),\n      new Song(\"Silence\", \"Delerium\", \"Electronic\", 1999, 134),\n      new Song(\"Hurt\", \"Johnny Cash\", \"Soft Rock\", 2002, 392),\n      new Song(\"Watercolour\", \"Pendulum\", \"Electronic\", 2010, 155),\n      new Song(\"The Outsider\", \"A Perfect Circle\", \"Alternative Rock\", 2004, 312),\n      new Song(\"With a Little Help from My Friends\", \"The Beatles\", \"Rock\", 1967, 168),\n      new Song(\"Come Together\", \"The Beatles\", \"Blues rock\", 1968, 173),\n      new Song(\"Come Together\", \"Ike & Tina Turner\", \"Rock\", 1970, 165),\n      new Song(\"With a Little Help from My Friends\", \"Joe Cocker\", \"Rock\", 1968, 46),\n      new Song(\"Immigrant Song\", \"Karen O\", \"Industrial Rock\", 2011, 12),\n      new Song(\"Breathe\", \"The Prodigy\", \"Electronic\", 1996, 337),\n      new Song(\"What's Going On\", \"Gaye\", \"R&B\", 1971, 420),\n      new Song(\"Hallucinate\", \"Dua Lipa\", \"Pop\", 2020, 75),\n      new Song(\"Walk Me Home\", \"P!nk\", \"Pop\", 2019, 459),\n      new Song(\"I am not a woman, I'm a god\", \"Halsey\", \"Alternative Rock\", 2021, 384),\n      new Song(\"Pasos de cero\", \"Pablo Albor√°n\", \"Latin\", 2014, 117),\n      new Song(\"Smooth\", \"Santana\", \"Latin\", 1999, 244),\n      new Song(\"Immigrant song\", \"Led Zeppelin\", \"Rock\", 1970, 484));\n  }\n}\npublic class Song {\n  private final String title;\n  private final String artist;\n  private final String genre;\n  private final int year;\n  private final int timesPlayed;\n  // Practice for you! Create a constructor, all the getters and a toString()\n}\n```", "```\nString songTitle = \"With a Little Help from My Friends\";\nList<String> result = allSongs.stream()\n                              .filter(song -> song.getTitle().equals(songTitle))\n                              .map(song -> song.getArtist())\n                              .filter(artist -> !artist.equals(\"The Beatles\"))\n                              .collect(Collectors.toList());\n```", "```\nFunction<Song, String> getGenre = song -> song.getGenre();\n```", "```\nList<Song> result = allSongs.stream()\n                            .sorted((o1, o2) -> o1.getYear() - o2.getYear())\n                            .collect(toList());\n```", "```\nList<Song> result = allSongs.stream()\n                            .sorted(Comparator.comparingInt(Song::getYear))\n                            .collect(toList());\n```", "```\nlong result =\n    songs.stream()\n         .map(Song::getArtist)\n         .distinct()\n         .count();\n```", "```\nOptional<String> afternoonCoffee = coffees.stream()\n                                          .map(Coffee::getName)\n                                          .sorted()\n                                          .findFirst();\n```", "```\npublic class StreamPuzzle {\n  public static void main(String[] args) {\n    SongSearch songSearch = _____________;\n    songSearch.___________;\n    __________.search(\"The Beatles\");\n    ________________________________;\n  }\n}\nclass _____________ {\n  private final List<Song> songs = \n      new JukeboxData.Songs().getSongs();\n\n  void printTopFiveSongs() {\n    List<String> topFive = songs.stream()\n                         .______________\n                         .______________\n                         .______________\n                         .collect(_________);\n    System.out.println(topFive);\n  }\n  void search(String artist) {\n    ________ = songs.stream()\n                    ._______________\n                    ._______________;\n    if (_______________) {\n      System.out.println(______________);\n    } else {\n      System.out.println(______________);\n    }\n  }\n}\n```", "```\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class CoffeeOrder {\n  public static void main(String[] args) {\n    List<String> coffees = List.of(\"Cappuccino\",\n            \"Americano\", \"Espresso\", \"Cortado\", \"Mocha\",\n            \"Cappuccino\", \"Flat White\", \"Latte\");\n\n    List<String> coffeesEndingInO = coffees.stream()\n                                           .filter(s -> s.endsWith(\"o\"))\n                                           .sorted()\n                                           .distinct()\n                                           .collect(Collectors.toList());\n    System.out.println(coffeesEndingInO);\n  }\n}\n```", "```\nafternoonCoffee = coffees.stream()\n                         .sorted()\n                         .map(Coffee::getName)\n                         .findFirst();\n```", "```\npublic class StreamPuzzle {\n  public static void main(String[] args) {\n    SongSearch songSearch = new SongSearch();\n    songSearch.printTopFiveSongs();\n    songSearch.search(\"The Beatles\");\n    songSearch.search(\"The Beach Boys\");\n  }\n}\nclass SongSearch {\n  private final List<Song> songs = \n      new JukeboxData.Songs().getSongs();\n\n  void printTopFiveSongs() {\n    List<String> topFive = songs.stream()\n                         .sorted(Comparator.comparingInt(Song::getTimesPlayed))\n                         .map(song -> song.getTitle())\n                         .limit(5)\n                         .collect(Collectors.toList());\n    System.out.println(topFive);\n  }\n  void search(String artist) {\n    Optional<Song> result = songs.stream()\n                    .filter(song -> song.getArtist().equals(artist))\n                    .findFirst();\n    if (result.isPresent()) {\n      System.out.println(result.get().getTitle());\n    } else {\n      System.out.println(\"No songs found by: \" + artist);\n    }\n  }\n}\n```"]