["```\nfun unsafe() { globalVar++ }\n```", "```\nvar shouldStop = false\n\nfun runner() {\n    while (!shouldStop) { doSomething() }\n}\n\nfun stopper() { shouldStop = true }\n```", "```\noverride fun onViewCreated(\n    view: View,\n    savedInstanceState: Bundle?\n) {\n    // DO NOT DO THIS!\n    myButton.setOnClickListener {\n        Thread {\n            val status = doTimeConsumingThing()\n            view.findViewById<TextView>(R.id.textview_second)\n                .setText(status)\n        }\n            .start()\n    }\n}\n```", "```\noverride fun onViewCreated(\n    view: View,\n    savedInstanceState: Bundle?\n) {\n    // DO NOT DO THIS EITHER!\n    myButton.setOnClickListener {\n        Thread {\n            val status = doTimeConsumingThing()\n            view.post {\n                view.findViewById<TextView>(R.id.textview_second)\n                    .setText(status)\n            }\n        }\n            .start()\n    }\n}\n```", "```\nvar looper = Thread {\n    Looper.prepare()\n    Looper.loop()\n}\nlooper.start()\n```", "```\nvar handler = new Handler(someLooper);\n```", "```\nvar handler = new Handler(Looper.getMainLooper);\n```", "```\n<service\n    android:name=\".RecurringTask\"\n    android:permission=\"android.permission.BIND_JOB_SERVICE\"/>\n```", "```\nconst val TASK_ID = 8954\nconst val SYNC_INTERVAL = 30L\nconst val PARAM_TASK_TYPE = \"task\"\nconst val SAMPLE_TASK = 22158\n\nclass RecurringTask() : JobService() {\n    companion object {\n        fun schedulePeriodically(context: Context) {\n            val extras = PersistableBundle()\n            extras.putInt(PARAM_TASK_TYPE, SAMPLE_TASK)\n\n            (context.getSystemService(Context.JOB_SCHEDULER_SERVICE)\n                as JobScheduler)\n                .schedule(\n                    JobInfo.Builder(\n                        TASK_ID,\n                        ComponentName(\n                            context,\n                            RecurringTask::class.java\n                        )\n                    )\n                        .setPeriodic(SYNC_INTERVAL)\n                        .setRequiresStorageNotLow(true)\n                        .setRequiresCharging(true)\n                        .setExtras(extras)\n                        .build()\n                )\n        }\n    }\n\n    override fun onStartJob(params: JobParameters?): Boolean {\n        // do stuff\n        return true;\n    }\n\n    override fun onStopJob(params: JobParameters?): Boolean {\n        // stop doing stuff\n        return true;\n    }\n}\n```"]