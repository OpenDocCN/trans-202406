- en: Chapter 2\. Creating a Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we discuss multiple ways to set up a full-blown Kubernetes cluster.
    We cover low-level, standardized tooling (`kubeadm`) that also serves as the basis
    for other installers and show you where to find the relevant binaries for the
    control plane, as well as for worker nodes. We demonstrate how to write systemd
    unit files to supervise Kubernetes components and finally show how to set up clusters
    on Google Cloud Platform and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Preparing a New Node for a Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to prepare a new node with all the required tooling to create a new
    Kubernetes cluster or add to an existing cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To prepare an Ubuntu-based host for a Kubernetes cluster, you first need to
    turn on IPv4 forwarding and enable iptables to see bridged traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For compatibility with the `kubeadm` tool, the swap needs to be turned off
    on the node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Cluster nodes require an implementation of the Kubernetes Container Runtime
    Interface (CRI). [cri-o](https://cri-o.io) is one such implementation. The cri-o
    version should match the Kubernetes version. For example, if you are bootstrapping
    a Kubernetes 1.27 cluster, configure the `VERSION` variable accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then reload the systemd configurations and enable cri-o:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `kubeadm` tool is required to bootstrap a Kubernetes cluster from scratch
    as well as to join an existing cluster. Enable its software repository with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can install all the tools required to bootstrap a Kubernetes cluster
    node. You will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `kubelet` binary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `kubeadm` CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `kubectl` client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run this command to install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then mark these packages as held back, which will prevent them from being automatically
    upgraded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Your Ubuntu host is now ready to be part of a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`kubeadm` is a setup tool that provides `kubeadm init` and `kubeadm join`.
    `kubeadm init` is used to bootstrap a Kubernetes control-plane node, while `kubeadm
    join` is used to bootstrap a worker node and join it to the cluster. In essence,
    `kubeadm` provides the actions necessary to get a minimum viable cluster up and
    running. `kubelet` is the *node agent* that runs on each node.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to cri-o, other container runtimes worth investigating are [containerd](https://oreil.ly/M1kDx),
    [Docker Engine](https://oreil.ly/P5_l_), and [Mirantis Container Runtime](https://oreil.ly/BEWaG).
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Bootstrapping a Kubernetes Control-Plane Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have initialized an Ubuntu host for Kubernetes (see [Recipe 2.1](#kubeadm_install))
    and now need to bootstrap a new Kubernetes control-plane node.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `kubeadm` binary installed, you are ready to start bootstrapping your
    Kubernetes cluster. Initialize the control plane on the node with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The control-plane node should have a minimum of two vCPUs and 2 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now initialize the control-plane node using `kubeadm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `init` command contains the configuration for setting up
    `kubectl` to talk to your cluster. Once `kubectl` has been configured, you can
    verify the cluster component health status using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the cluster information, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'User workloads are not scheduled to execute on the control-plane node. If you
    are creating an experimental single-node cluster, then you would need to taint
    the control-plane node to schedule user workloads on the control-plane node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Creating a cluster with `kubeadm`](https://oreil.ly/q9nwI)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.3 Installing a Container Network Add-on for Cluster Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have bootstrapped a Kubernetes control-plane node (see [Recipe 2.2](#kube_control_plane))
    and now need to install a pod network add-on so that pods can communicate with
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install the Calico network add-on with the following command on the
    control-plane node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must use a Container Network Interface (CNI) add-on that is compatible with
    your cluster and that suits your needs. There are a number of add-ons that implement
    the CNI. Take a look at the nonexhaustive list of [available add-ons in the Kubernetes
    documentation](https://oreil.ly/HosU6).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Adding Worker Nodes to a Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have initialized your Kubernetes control-plane node (see [Recipe 2.2](#kube_control_plane))
    and installed a CNI add-on (see [Recipe 2.3](#kube_cni)), and now you want to
    add worker nodes to your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the Ubuntu host initialized for Kubernetes, as shown in [Recipe 2.1](#kubeadm_install),
    execute the following command on the control-plane node to display the cluster
    `join` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, execute the `join` command on the worker node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The worker node should have a minimum of one vCPU and 2 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to your control-plane node terminal session and you will see your
    nodes join:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can repeat these steps to add more worker nodes to the Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Worker nodes are where your workloads run. When your cluster starts running
    out of resources, you will begin noticing the *Pending* status of new pods. At
    this point you should consider adding more resources to the cluster by adding
    more worker nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Deploying the Kubernetes Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have created a Kubernetes cluster, and now you want to create, view, and
    manage containerized workloads on the cluster using a user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [Kubernetes dashboard](https://oreil.ly/n7WQw), which is a web-based
    user interface to deploy containerized applications to a Kubernetes cluster and
    to manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you’re using Minikube, you can install the Kubernetes dashboard simply by
    enabling the `dashboard` add-on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy the v2.7.0 Kubernetes dashboard, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then verify that the deployment is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 2.6 Accessing the Kubernetes Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have installed the Kubernetes dashboard (see [Recipe 2.5](#kubernetes_dashboard))
    on your cluster, and you want to access the dashboard from a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to create a [`ServiceAccount`](https://oreil.ly/pXErB) with privileges
    to administer the cluster. Create a file named *sa.yaml* with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `ServiceAccount` with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the Kubernetes dashboard, you need to create an authentication token
    associated with this account. Save the token printed in the output of the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the Kubernetes dashboard is a cluster-local service, you need to set
    up a proxy connection to the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: By visiting the site [*http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/workloads?namespace=_all*](http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/workloads?namespace=_all)
    you are now able to open the Kubernetes dashboard and authenticate yourself using
    the authentication token created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: In the UI that opens in your browser, you will see the page depicted in [Figure 2-1](#dashboard_create).
  prefs: []
  type: TYPE_NORMAL
- en: '![Snapshot of the dashboard application create view](assets/kcb2_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. Snapshot of the dashboard application create view
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you are using Minikube, all you need to do is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an application, click the plus sign (+) at the top-right corner, select
    the “Create from form” tab, give the application a name, and specify the container
    image you want to use. Then click the Deploy button and you will be presented
    with a new view that shows deployments, pods, and replica sets. In Kubernetes
    there are dozens of important resource types, such as deployments, pods, replica
    sets, services, and so on, that we will explore in greater detail in the rest
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: The snapshot in [Figure 2-2](#redis-dashboard) presents a typical dashboard
    view after having created a single application using the Redis container.
  prefs: []
  type: TYPE_NORMAL
- en: '![A dashboard overview with a Redis application](assets/kcb2_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. A dashboard overview with a Redis application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you go back to a terminal session and use the command-line client, you will
    see the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Your Redis pod will be running the Redis server, as the following logs show:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 2.7 Deploying the Kubernetes Metrics Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have deployed the Kubernetes dashboard (see [Recipe 2.5](#kubernetes_dashboard))
    but don’t see the CPU and memory usage information in the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kubernetes dashboard requires the [Kubernetes Metrics Server](https://oreil.ly/BEHwR)
    to visualize the CPU and memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you are using Minikube, you can install the Kubernetes Metrics Server simply
    by enabling the `metrics-server` add-on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy the latest release of the Kubernetes Metrics Server, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then verify that the deployment is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see that the deployment is not entering the ready state, check the pod
    logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see the error message “cannot validate certificate,” you need to append
    the flag `--kubelet-insecure-tls` to the Metrics Server deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It can take several minutes for the Metrics Server to become available after
    having started it. If it is not yet in the ready state, then requests for metrics
    might produce errors.
  prefs: []
  type: TYPE_NORMAL
- en: Once the Metrics Server has started, the Kubernetes dashboard will display the
    CPU and memory usage statistics, as shown in [Figure 2-3](#dashboard_nodes).
  prefs: []
  type: TYPE_NORMAL
- en: '![Snapshot of the dashboard nodes view](assets/kcb2_0203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-3\. Dashboard cluster nodes view
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The node and pod metrics can also be viewed in the command line using the `kubectl
    top` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to view the node metrics, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Kubernetes Metrics Server GitHub repository](https://oreil.ly/C_O6W)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Resource metrics pipeline documentation](https://oreil.ly/ODZCr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.8 Downloading a Kubernetes Release from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to download an official Kubernetes release instead of compiling from
    source.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kubernetes project publishes an archive for every release. The link to the
    archive can be found in the CHANGELOG file of the particular release. Go to the
    *CHANGELOG* folder of the [project page](https://oreil.ly/MMwRs) and open the
    CHANGELOG file for the release of your choice. Within the file you will find a
    link to download the *kubernetes.tar.gz* file of that release.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to download the v1.28.0 release, go ahead and open
    *CHANGELOG-1.28.md*, and in the section titled “Downloads for v1.28.0” you will
    find the link to *kubernetes.tar.gz* (*[*https://dl.k8s.io/v1.28.0/kubernetes.tar.gz*](https://dl.k8s.io/v1.28.0/kubernetes.tar.gz)*).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If you want to compile Kubernetes from source, see [Recipe 15.1](ch15.html#compiling_source).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CHANGELOG file also lists the `sha512 hash` of the *kubernetes.tar.gz*
    archive. It is recommended that you verify the integrity of the *kubernetes.tar.gz*
    archive to ensure that it has not been tampered with in any way. To do this, generate
    the `sha512` hash of the downloaded archive locally and compare it with that of
    the one listed in the CHANGELOG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 2.9 Downloading Client and Server Binaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have downloaded a release archive (see [Recipe 2.8](#release_download)),
    but it does not contain the actual binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The release archive does not contain the release binaries (for the purpose
    of keeping the release archive small). Thus, you need to download the binaries
    separately. To do so, run the *get-kube-binaries.sh* script, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Once complete, you will have the client binaries in *client/bin*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'and an archive containing the server binaries in *server/kubernetes*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to skip downloading the entire release archive and quickly download
    the client and server binaries, you can get them directly from [Download Kubernetes](https://oreil.ly/tdN0P).
    On this page you will find direct links to binaries for various operating system
    and architecture combinations, as shown in [Figure 2-4](#download-k8s-com).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the downloadkubernetes.com, listing binaries of the k8s v1.28.0
    release for the darwin operating system](assets/kcb2_0204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-4\. downloadkubernetes.com, listing binaries of the Kubernetes v1.28.0
    release for the Darwin operating system
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 2.10 Using systemd Unit Files for Running Kubernetes Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have used Minikube (see [Recipe 1.2](ch01.html#minikube_install)) for learning
    and know how to bootstrap a Kubernetes cluster using `kubeadm` (see [Recipe 2.2](#kube_control_plane)),
    but you want to install a cluster from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To do so, you need to run the Kubernetes components using systemd unit files.
    You are looking only for basic examples to run the `kubelet` via `systemd`.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting how `kubeadm` configures the Kubernetes daemons to launch using systemd
    unit files helps you understand how to do it on your own. If you look closely
    at the `kubeadm` configuration, you will see that the `kubelet` is running on
    every node in your cluster, including the control-plane node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example, which you can reproduce by logging in to any node of a
    cluster built with `kubeadm` (see [Recipe 2.2](#kube_control_plane)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This gives you a link to the systemd unit file in */lib/systemd/system/kubelet.service*
    and its configuration in */etc/systemd/system/kubelet.service.d/10-kubeadm.conf*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The unit file is straightforward—​it points to the `kubelet` binary installed
    in */usr/bin*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration file tells you how the `kubelet` binary is started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: All the options specified, such as `--kubeconfig`, defined by the environment
    variable `$KUBELET_CONFIG_ARGS`, are start-up [options](https://oreil.ly/quccc)
    of the `kubelet` binary.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[systemd](https://oreil.ly/RmuZp) is a system and services manager, sometimes
    referred to as an *init system*. It is now the default services manager on Ubuntu
    and CentOS.'
  prefs: []
  type: TYPE_NORMAL
- en: The unit file just shown deals only with the `kubelet`. You can write your own
    unit files for all the other components of a Kubernetes cluster (i.e., API server,
    controller manager, scheduler, proxy). [Kubernetes the Hard Way](https://oreil.ly/AWnxD)
    has examples of unit files for each component.
  prefs: []
  type: TYPE_NORMAL
- en: However, you only need to run the `kubelet`. Indeed, note that the configuration
    option `--pod-manifest-path` allows you to pass a directory where the `kubelet`
    will look for manifests that it will automatically start. With `kubeadm`, this
    directory is used to pass the manifests of the API server, scheduler, etcd, and
    controller manager. Hence, Kubernetes manages itself, and the only thing managed
    by systemd is the `kubelet` process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, you can list the contents of the */etc/kubernetes/manifests*
    directory in your `kubeadm`-based cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the details of the *etcd.yaml* manifest, you can see that it is
    a `Pod` with a single container that runs etcd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`kubelet` configuration options](https://oreil.ly/E95yp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.11 Creating a Kubernetes Cluster on Google Kubernetes Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a Kubernetes cluster on Google Kubernetes Engine (GKE).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use GKE, you first need a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: A [Google Cloud Platform (GCP)](https://oreil.ly/CAiDf) account with billing
    enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project with [GKE](https://oreil.ly/eGX2n) enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Google Cloud SDK](https://oreil.ly/Y00rC) installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Google Cloud SDK contains the `gcloud` CLI tool for interacting with GCP
    services from the command line. After the SDK has been installed, authenticate
    `gcloud` to access your GCP project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `gcloud` command-line interface, create a Kubernetes cluster with
    the `container clusters create` command, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: By default this will create a Kubernetes cluster with three worker nodes in
    the zone or region specified. The master node is being managed by the GKE service
    and cannot be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re unsure what [zone or region](https://oreil.ly/4Bvua) to use for the
    `--zone` or `--region` argument, execute `gcloud compute zones list` or `gcloud
    compute regions list` and pick one near you. Zones are typically less resource
    hungry than regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done using your cluster, do not forget to delete it to avoid being
    charged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can skip the `gcloud` CLI installation by using the [Google Cloud Shell](https://oreil.ly/E-Qcr),
    a pure online browser-based solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list your existing GKE clusters using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `gcloud` CLI allows you to resize your cluster, update it, and upgrade
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GKE [quickstart](https://oreil.ly/WMDSx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Shell [quickstart](https://oreil.ly/_w0va)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.12 Creating a Kubernetes Cluster on Azure Kubernetes Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a Kubernetes cluster on Azure Kubernetes Service (AKS).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an AKS cluster, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A [Microsoft Azure portal account](https://oreil.ly/PyUA0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure CLI](https://oreil.ly/An7xM) installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, make sure that you have Azure CLI version 2.0 or higher installed and
    then log in to Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an Azure resource group named `k8s` to hold all your AKS resources,
    such as VMs and networking components, and to make it easy to clean up and tear
    down later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re unsure what [region](https://oreil.ly/fdGdc) to use for the `--location`
    argument, execute `az account list-locations` and pick one near you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the resource group `k8s` set up, you can create the cluster
    with one worker node (*agent* in Azure terminology), like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `az aks create` command might take several minutes to complete.
    Once completed, the command returns a JSON object with information about the created
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, in the Azure portal you should see something like [Figure 2-5](#azure-portal).
    Start by finding the `k8s` resource group and then navigate your way to the Deployments
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen shot of the Azure Portal, showing an AKS cluster in the k8s resource
    group](assets/kcb2_0205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-5\. Azure portal, showing an AKS cluster in the k8s resource group
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You’re now in a position to connect to the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now poke around in the environment and verify the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Indeed, as you can see from the output, we have created a single-node cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you don’t want to or cannot install the Azure CLI, an alternative is to use
    the [Azure Cloud Shell](https://oreil.ly/IUFJQ) from your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re done discovering AKS, don’t forget to shut down the cluster and
    remove all the resources by deleting the resource group `k8s`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Although the `az group delete` command returns immediately, due to the presence
    of the `--no-wait` flag, it can take up to 10 minutes for all the resources to
    be removed and the resource group to actually be destroyed. You might want to
    check in the Azure portal to make sure everything went according to plan.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[“Quickstart: Deploy an Azure Kubernetes Service cluster using Azure CLI”](https://oreil.ly/YXv3B)
    in the Microsoft Azure documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.13 Creating a Kubernetes Cluster on Amazon Elastic Kubernetes Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a Kubernetes cluster on Amazon Elastic Kubernetes Service
    (EKS).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a cluster in Amazon EKS, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An [Amazon Web Services](https://aws.amazon.com) account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AWS CLI](https://aws.amazon.com/cli) installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[eksctl](https://eksctl.io) CLI tool installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you’ve installed the AWS CLI, [authenticate the client](https://oreil.ly/_6VMv)
    to access your AWS account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The eksctl tool is the official CLI for Amazon EKS. It uses the AWS credentials
    you’ve configured to authenticate with AWS. Using eksctl, create the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: By default, eksctl creates a cluster with two worker nodes in the specified
    region. You can adjust this paramater by specifying the `--nodes` flag.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For the lowest latency, choose the [AWS region](https://oreil.ly/Kc9GZ) that’s
    nearest to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you no longer need the EKS cluster, delete it to avoid being charged for
    unused resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: eksctl [Introduction](https://eksctl.io/getting-started)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Amazon Elastic Kubernetes Service](https://aws.amazon.com/eks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
