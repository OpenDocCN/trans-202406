- en: 'Chapter 2\. A Trip to Objectville: Classes and Objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0027-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**I was told there would be objects.** In [Chapter 1](ch01.xhtml#breaking_the_surface_dive_in_a_quick_dip),
    we put all of our code in the main () method. That’s not exactly object-oriented.
    In fact, that’s not object-oriented at all. Well, we did use a few objects, like
    the String arrays for the Phrase-O-Matic, but we didn’t actually develop any of
    our own object types. So now we’ve got to leave that procedural world behind,
    get the heck out of main(), and start making some objects of our own. We’ll look
    at what makes object-oriented (OO) development in Java so much fun. We’ll look
    at the difference between a class and an object. We’ll look at how objects can
    give you a better life (at least the programming part of your life. Not much we
    can do about your fashion sense). Warning: once you get to Objectville, you might
    never go back. Send us a postcard.'
  prefs: []
  type: TYPE_NORMAL
- en: Chair Wars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (or How Objects Can Change Your Life)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0028-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**O**nce upon a time in a software shop, two programmers were given the same
    spec and told to “build it.” The Really Annoying Project Manager forced the two
    coders to compete, by promising that whoever delivers first gets a cool Aeron™
    chair and adjustable height standing desk like all the Silicon Valley techies
    have. Laura, the procedural programmer, and Brad, the OO developer, both knew
    this would be a piece of cake.'
  prefs: []
  type: TYPE_NORMAL
- en: Laura, sitting at her (non-adjustable) desk, thought to herself, “What are the
    things this program has to *do*? What ***procedures*** do we need?” And she answered
    herself, “**rotate** and **playSound**.” So off she went to build the procedures.
    After all, what *is* a program if not a pile of procedures?
  prefs: []
  type: TYPE_NORMAL
- en: Brad, meanwhile, kicked back at the coffee shop and thought to himself, “What
    are the ***things*** in this program...who are the key *players*?” He first thought
    of **The Shapes**. Of course, there were other things he thought of like the User,
    the Sound, and the Clicking Event. But he already had a library of code for those
    pieces, so he focused on building Shapes. Read on to see how Brad and Laura built
    their programs, and for the answer to your burning question, ***“So, who got the
    Aeron and the desk?”***
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0028-02.png)'
  prefs: []
  type: TYPE_IMG
- en: At Laura’s desk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As she had done a gazillion times before, Laura set about writing her **Important
    Procedures**. She wrote **rotate** and **playSound** in no time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At Brad’s laptop at the cafe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Brad wrote a ***class*** for each of the three shapes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0028-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Laura thought she’d nailed it. She could almost feel the rolled steel of the
    Aeron beneath her...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: But wait! There’s been a spec change.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “OK, *technically* you were first, Laura,” said the Manager, “but we have to
    add just one tiny thing to the program. It’ll be no problem for crack programmers
    like you two.”
  prefs: []
  type: TYPE_NORMAL
- en: '*“If I had a dime for every time I’ve heard that one,”* thought Laura, knowing
    that spec-change-no-problem was a fantasy. *“And yet Brad looks strangely serene.
    What’s up with that?”* Still, Laura held tight to her core belief that the OO
    way, while cute, was just slow. And that if you wanted to change her mind, you’d
    have to pry it from her cold, dead, carpal-tunnelled hands.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0029-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Back at Laura’s desk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rotate procedure would still work; the code used a lookup table to match
    a shapeNum to an actual shape graphic. But ***playSound would have to change.***
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It turned out not to be such a big deal, but ***it still made her queasy to
    touch previously tested code***. Of *all* people, *she* should know that no matter
    what the project manager says, ***the spec always changes***.
  prefs: []
  type: TYPE_NORMAL
- en: At Brad’s laptop at the beach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Brad smiled, sipped his fruit frappe, and *wrote one new class*. Sometimes the
    thing he loved most about OO was that he didn’t have to touch code he’d already
    tested and delivered. “Flexibility, extensibility, ...” he mused, reflecting on
    the benefits of OO.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0029-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Laura delivered just moments ahead of Brad
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (Hah! So much for that foofy OO nonsense.) But the smirk on Laura’s face melted
    when the Really Annoying Project Manager said (with that tone of disappointment),
    “Oh, no, *that’s* not how the amoeba is supposed to rotate...”
  prefs: []
  type: TYPE_NORMAL
- en: 'Turns out, both programmers had written their rotate code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. determine the rectangle that surrounds the shape.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. calculate the center of that rectangle, and rotate the shape around that
    point.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0030-01.png)'
  prefs: []
  type: TYPE_IMG
- en: But the amoeba shape was supposed to rotate around a point on one *end*, like
    a clock hand.
  prefs: []
  type: TYPE_NORMAL
- en: “I’m toast,” thought Laura, visualizing charred Wonderbread™. “Although, hmmmm.
    I could just add another if/else to the rotate procedure and then just hard-code
    the rotation point code for the amoeba. That probably won’t break anything.” But
    the little voice at the back of her head said, *“Big Mistake. Do you honestly
    think the spec won’t change again?”*
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0030-03.png)![image](Images/f0030-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Back at Laura’s desk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: She figured she better add rotation point arguments to the rotate procedure.
    ***A lot of code was affected***. Testing, recompiling, the whole nine yards all
    over again. Things that used to work, didn’t.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: At Brad’s laptop on his lawn chair at the Telluride Bluegrass Festival
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without missing a beat, Brad modified the rotate **method**, but only in the
    Amoeba class. ***He never touched the tested, working, compiled code*** for the
    other parts of the program. To give the Amoeba a rotation point, he added an **attribute**
    that all Amoebas would have. He modified, tested, and delivered (via free festival
    WiFi) the revised program during a single Bela Fleck set.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0030-04.png)'
  prefs: []
  type: TYPE_IMG
- en: So, Brad the OO guy got the chair and desk, right?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0031-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Not so fast.*** Laura found a flaw in Brad’s approach. And, since she was
    sure that if she got the chair and desk, she’d also be next in line for a promotion,
    she had to turn this thing around.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LAURA:** You’ve got duplicated code! The rotate procedure is in all four
    Shape things.'
  prefs: []
  type: TYPE_NORMAL
- en: '**BRAD:** It’s a ***method***, not a *procedure*. And they’re ***classes***,
    not *things*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LAURA:** Whatever. It’s a stupid design. You have to maintain *four* different
    rotate “methods.” How can that ever be good?'
  prefs: []
  type: TYPE_NORMAL
- en: '**BRAD:** Oh, I guess you didn’t see the final design. Let me show you how
    OO **inheritance** works, Laura.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0031-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You can read this as, **“Square inherits from Shape,” “Circle inherits from
    Shape**,” and so on. I removed rotate() and playSound() from the other shapes,
    so now there’s only one copy to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: The Shape class is called the **superclass** of the other four classes. The
    other four are the **subclasses** of Shape. The subclasses inherit the methods
    of the superclass. In other words, *if the Shape class has the functionality,
    then the subclasses automatically get that same functionality.*
  prefs: []
  type: TYPE_NORMAL
- en: What about the Amoeba rotate()?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LAURA:** Wasn’t that the whole problem here—that the amoeba shape had a completely
    different rotate and playSound procedure?'
  prefs: []
  type: TYPE_NORMAL
- en: '**BRAD:** **Method.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**LAURA:** Whatever. How can Amoeba do something different if it “inherits”
    its functionality from the Shape class?'
  prefs: []
  type: TYPE_NORMAL
- en: '**BRAD:** That’s the last step. The Amoeba class **overrides** the methods
    of the Shape class. Then at runtime, the JVM knows exactly which rotate() method
    to run when someone tells the Amoeba to rotate.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0032-01.png)![image](Images/f0032-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**LAURA:** How do you “tell” an Amoeba to do something? Don’t you have to call
    the procedure, sorry—*method*, and then tell it *which* thing to rotate?'
  prefs: []
  type: TYPE_NORMAL
- en: '**BRAD:** That’s the really cool thing about OO. When it’s time for, say, the
    triangle to rotate, the program code invokes (calls) the rotate() method *on the
    triangle object*. The rest of the program really doesn’t know or care *how* the
    triangle does it. And when you need to add something new to the program, you just
    write a new class for the new object type, so the **new objects will have their
    own behavior.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0032-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The suspense is killing me. Who got the chair and desk?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0033-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Amy from the second floor.**'
  prefs: []
  type: TYPE_NORMAL
- en: (Unbeknownst to all, the Project Manager had given the spec to *three* programmers.
    Amy completed the project faster since she got on with OO programming without
    arguing with her co-workers).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you design a class, think about the objects that will be created from
    that class type. Think about:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: things the object knows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: things the object does
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0034-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Things an object *knows* about itself are called
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: instance variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things an object can do are called
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0034-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Things an object ***knows*** about itself are called **instance variables.**
    They represent an object’s state (the data) and can have unique values for each
    object of that type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Think of instance as another way of saying object.**'
  prefs: []
  type: TYPE_NORMAL
- en: Things an object can ***do*** are called **methods**. When you design a class,
    you think about the data an object will need to know about itself, and you also
    design the methods that operate on that data. It’s common for an object to have
    methods that read or write the values of the instance variables. For example,
    Alarm objects have an instance variable to hold the alarmTime, and two methods
    for getting and setting the alarmTime.
  prefs: []
  type: TYPE_NORMAL
- en: So objects have instance variables and methods, but those instance variables
    and methods are designed as part of the class.
  prefs: []
  type: TYPE_NORMAL
- en: What’s the difference between a class and an object?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0035-01.png)'
  prefs: []
  type: TYPE_IMG
- en: A class is not an object (but it’s used to construct them)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0035-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A class is a *blueprint* for an object**. It tells the virtual machine *how*
    to make an object of that particular type. Each object made from that class can
    have its own values for the instance variables of that class. For example, you
    might use the Button class to make dozens of different buttons, and each button
    might have its own color, size, shape, label, and so on. Each one of these different
    buttons would be a button *object*.'
  prefs: []
  type: TYPE_NORMAL
- en: Making your first object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So what does it take to create and use an object? You need *two* classes. One
    class for the type of object you want to use (Dog, AlarmClock, Television, etc.)
    and another class to *test* your new class. The *tester* class is where you put
    the main method, and in that main() method you create and access objects of your
    new class type. The tester class has only one job: to *try out* the methods and
    variables of your new object.'
  prefs: []
  type: TYPE_NORMAL
- en: From this point forward in the book, you’ll see two classes in many of our examples.
    One will be the *real* class—the class whose objects we really want to use, and
    the other class will be the *tester* class, which we call *<WhateverYourClassNameIs>*
    `**TestDrive**`. For example, if we make a `**Bungee**` class, we’ll need a `**BungeeTestDrive**`
    class as well. Only the *<SomeClassName>*`**TestDrive**` class will have a main()
    method, and its sole purpose is to create objects of your new class (the not-the-tester
    class), and then use the dot operator (.) to access the methods and variables
    of the new objects. This will all be made stunningly clear by the following examples.
    No, *really.*
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0036-01.png)'
  prefs: []
  type: TYPE_IMG
- en: If you already have some OO savvy, you’ll know we’re not using encapsulation.
    We’ll get there in [Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance),
    How Objects Behave.
  prefs: []
  type: TYPE_NORMAL
- en: Making and testing Movie objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0037-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Quick! Get out of main!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As long as you’re in main(), you’re not really in Objectville. It’s fine for
    a test program to run within the main method, but in a true OO application, you
    need objects talking to other objects, as opposed to a static main() method creating
    and testing objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two uses of main:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: to **test** your real class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to **launch/start** your **Java application**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A real Java application is nothing but objects talking to other objects. In
    this case, *talking* means objects calling methods on one another. On the previous
    page, and in [Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance),
    *How Objects Behave*, we look at using a main() method from a separate TestDrive
    class to create and test the methods and variables of another class. In [Chapter 6](ch06.xhtml#using_the_java_library_get_to_know_the_j),
    *Using the Java Library*, we look at using a class with a main() method to start
    the ball rolling on a *real* Java application (by making objects and then turning
    those objects loose to interact with other objects, etc.)
  prefs: []
  type: TYPE_NORMAL
- en: As a “sneak preview,” though, of how a real Java application might behave, here’s
    a little example. Because we’re still at the earliest stages of learning Java,
    we’re working with a small toolkit, so you’ll find this program a little clunky
    and inefficient. You might want to think about what you could do to improve it,
    and in later chapters that’s exactly what we’ll do. Don’t worry if some of the
    code is confusing; the key point of this example is that objects talk to objects.
  prefs: []
  type: TYPE_NORMAL
- en: The Guessing Game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Summary:**'
  prefs: []
  type: TYPE_NORMAL
- en: The Guessing Game involves a game object and three player objects. The game
    generates a random number between 0 and 9, and the three player objects try to
    guess it. (We didn’t say it was a really *exciting* game.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Classes:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**The Logic:**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The GameLauncher class is where the application starts; it has the main()
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. In the main() method, a GuessGame object is created, and its startGame()
    method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The GuessGame object’s startGame() method is where the entire game plays
    out. It creates three players and then “thinks” of a random number (the target
    for the players to guess). It then asks each player to guess, checks the result,
    and either prints out information about the winning player(s) or asks them to
    guess again.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0038-01.png)![image](Images/f0039-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the Guessing Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Output (it will be different each time you run it)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0040-02.png)![image](Images/f0041-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile.
    If they won’t compile, how would you fix them, and if they do compile, what would
    be their output?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Images](Images/arr1.png) **Answers in [“BE the Compiler”](#be_the_compiler_left_parenthesisfro-3000).**'
  prefs: []
  type: TYPE_NORMAL
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A Java program is all scrambled up on the fridge. Can you reconstruct the code
    snippets to make a working Java program that produces the output listed below?
    Some of the curly braces fell on the floor and they were too small to pick up,
    so feel free to add as many of those as you need.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_page_4).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0043-01a.png)![image](Images/f0043-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Pool Puzzle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)![image](Images/common-06.png)'
  prefs: []
  type: TYPE_IMG
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You **may** use the same snippet more than once, and
    you won’t need to use all the snippets. Your ***goal*** is to make classes that
    will compile and run and produce the output listed below. Some of the exercises
    and puzzles in this book might have more than one correct answer. If you find
    another correct answer, give yourself bonus points!
  prefs: []
  type: TYPE_NORMAL
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0044-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Bonus Question !**'
  prefs: []
  type: TYPE_NORMAL
- en: If the last line of output was **24** instead of **10**, how would you complete
    the puzzle?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0044-02.png)![image](Images/f0044-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: Each snippet from the pool can be used more than once!**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0044-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr1.png) **Answers in [“Puzzle Solutions”](#puzzle_solutions-id5000).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Who Am I?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/f0045-01.png)'
  prefs: []
  type: TYPE_IMG
- en: A bunch of Java components, in full costume, are playing a party game, “Who
    am I?” They give you a clue, and you try to guess who they are, based on what
    they say. Assume they always tell the truth about themselves. If they happen to
    say something that could be true for more than one of them, choose all for whom
    that sentence can apply. Fill in the blanks next to the sentence with the names
    of one or more attendees. The first one’s on us.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tonight’s attendees:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class Method Object Instance variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **I am compiled from a .java file.** | **class** |'
  prefs: []
  type: TYPE_TB
- en: '| **My instance variable values can be different from my buddy’s values.**
    | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I behave like a template.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I like to do stuff.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I can have many methods.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I represent “state.”** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I have behaviors.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I am located in objects.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I live on the heap.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I am used to create object instances.** | ________________________________
    |'
  prefs: []
  type: TYPE_TB
- en: '| **My state can change.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I declare methods.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '| **I can change at runtime.** | ________________________________ |'
  prefs: []
  type: TYPE_TB
- en: '![Images](Images/arr1.png) **Answers in [“Who Am I?”](#who_am_iquestion_mark_left_parenthes-100).**'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Code Magnets”](#code_magnets))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0046-01.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“BE the Compiler”](#be_the_compiler))
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0046-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0046-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Puzzle Solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Pool Puzzle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (from [“Pool Puzzle”](#pool_puzzle))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0047-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Who Am I?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Who Am I?”](#who_am_iquestion_mark))
  prefs: []
  type: TYPE_NORMAL
- en: '| **I am compiled from a .java file.** | class |'
  prefs: []
  type: TYPE_TB
- en: '| **My instance variable values can be different from my buddy’s values.**
    | object |'
  prefs: []
  type: TYPE_TB
- en: '| **I behave like a template.** | class |'
  prefs: []
  type: TYPE_TB
- en: '| **I like to do stuff.** | object, method |'
  prefs: []
  type: TYPE_TB
- en: '| **I can have many methods.** | class, object |'
  prefs: []
  type: TYPE_TB
- en: '| **I represent “state.”** | instance variable |'
  prefs: []
  type: TYPE_TB
- en: '| **I have behaviors.** | object, class |'
  prefs: []
  type: TYPE_TB
- en: '| **I am located in objects.** | method, instance variable |'
  prefs: []
  type: TYPE_TB
- en: '| **I live on the heap.** | object |'
  prefs: []
  type: TYPE_TB
- en: '| **I am used to create object instances.** | class |'
  prefs: []
  type: TYPE_TB
- en: '| **My state can change.** | object, instance variable |'
  prefs: []
  type: TYPE_TB
- en: '| **I declare methods.** | class |'
  prefs: []
  type: TYPE_TB
- en: '| **I can change at runtime.** | object, instance variable |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note: both classes and objects are said to have state and behavior. They’re
    defined in the class, but the object is also said to “have” them. Right now, we
    don’t care where they technically live.'
  prefs: []
  type: TYPE_NORMAL
