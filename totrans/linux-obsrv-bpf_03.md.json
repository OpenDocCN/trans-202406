["```\n#include <linux/bpf.h>\n#define SEC(NAME) __attribute__((section(NAME), used))\n\nSEC(\"tracepoint/syscalls/sys_enter_execve\")\nint bpf_prog(void *ctx) {\n  char msg[] = \"Hello, BPF World!\";\n  bpf_trace_printk(msg, sizeof(msg));\n  return 0;\n}\n\nchar _license[] SEC(\"license\") = \"GPL\";\n```", "```\nclang -O2 -target bpf -c bpf_program.c -o bpf_program.o\n```", "```\n#include <stdio.h>\n#include <uapi/linux/bpf.h>\n#include \"bpf_load.h\"\n\nint main(int argc, char **argv) {\n  if (load_bpf_file(\"hello_world_kern.o\") != 0) {\n    printf(\"The kernel didn't load the BPF program\\n\");\n    return -1;\n  }\n\n  read_trace_pipe();\n\n  return 0;\n}\n```", "```\nTOOLS=../../../tools\nINCLUDE=../../../libbpf/include\nHEADERS=../../../libbpf/src\nclang -o loader -l elf \\\n  -I${INCLUDE} \\\n  -I${HEADERS} \\\n  -I${TOOLS} \\\n  ${TOOLS}/bpf_load.c \\\n  loader.c\n```", "```\nunion bpf_attr attr = {\n  .prog_type = type,\n  .insns     = ptr_to_u64(insns),\n  .insn_cnt  = insn_cnt,\n  .license   = ptr_to_u64(license),\n  .log_buf   = ptr_to_u64(bpf_log_buf),\n  .log_size  = LOG_BUF_SIZE,\n  .log_level = 1,\n};\n\nbpf(BPF_PROG_LOAD, &attr, sizeof(attr));\n```"]