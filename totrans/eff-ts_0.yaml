- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'In the spring of 2016, I visited my old coworker Evan Martin at Google’s San
    Francisco office and asked him what he was excited about. I’d asked him this same
    question many times over the years because the answers were wide-ranging and unpredictable
    but always interesting: C++ build tools, Linux audio drivers, online crosswords,
    emacs plugins. This time, Evan was excited about TypeScript and Visual Studio
    Code.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年春天，我访问了我在Google旧同事Evan Martin在旧金山办公室，并问他最近对什么感到兴奋。多年来，我问过他同样的问题很多次，因为答案多种多样且不可预测，但总是很有趣：C++构建工具、Linux音频驱动程序、在线填字游戏、emacs插件。这次，Evan对TypeScript和Visual
    Studio Code感到兴奋。
- en: I was surprised! I’d heard of TypeScript before, but I knew only that it was
    created by Microsoft and that I mistakenly believed it had something to do with
    .NET. As a lifelong Linux user, I couldn’t believe that Evan had hopped on team
    Microsoft.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我很惊讶！我以前听说过TypeScript，但我只知道它是由微软创建的，而且我错误地认为它与.NET有关。作为一名终身Linux用户，我无法相信Evan竟然加入了微软团队。
- en: Then Evan showed me vscode and the TypeScript playground and I was instantly
    converted. Everything was so fast, and the code intelligence made it easy to build
    a mental model of the type system. After years of writing type annotations in
    JSDoc comments for the Closure Compiler, this felt like typed JavaScript that
    really worked. And Microsoft had built a cross-platform text editor on top of
    Chromium? Perhaps this was a language and toolchain worth learning.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Evan向我展示了vscode和TypeScript playground，我立即被它们征服了。一切都如此迅速，代码智能使得建立类型系统的心理模型变得轻而易举。多年来，我在Closure
    Compiler的JSDoc注释中编写类型注解，而现在感觉就像是真正有效的带有类型的JavaScript。而且微软还基于Chromium构建了一个跨平台文本编辑器？也许这是一个值得学习的语言和工具链。
- en: I’d recently joined Sidewalk Labs and was writing our first JavaScript. The
    codebase was still small enough that Evan and I were able to convert it all to
    TypeScript over the next few days.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近加入了Sidewalk Labs，并开始编写我们的第一个JavaScript代码。代码库仍然很小，Evan和我能够在接下来的几天内将其全部转换为TypeScript。
- en: 'I’ve been hooked ever since. TypeScript is more than just a type system. It
    also brings a whole suite of language services which are fast and easy to use.
    The cumulative effect is that TypeScript doesn’t just make JavaScript development
    safer: it also makes it more fun!'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从那以后，我一直着迷。TypeScript不仅仅是一个类型系统，它还带来了一整套快速易用的语言服务。累积效应是，TypeScript不仅使JavaScript开发更加安全，而且更加有趣！
- en: Who This Book Is For
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合谁阅读
- en: The *Effective* books are intended to be the “standard second book” on their
    topic. You’ll get the most out of *Effective TypeScript* if you have some previous
    practical experience working with JavaScript and TypeScript. My goal with this
    book is not to teach you TypeScript or JavaScript but to help you advance from
    a beginning or intermediate user to an expert. The items in this book do this
    by helping you build mental models of how TypeScript and its ecosystem work, making
    you aware of pitfalls and traps to avoid, and by guiding you toward using TypeScript’s
    many capabilities in the most effective ways possible. Whereas a reference book
    will explain the five ways that a language lets you do X, an *Effective* book
    will tell you which of those five to use and why.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Effective* 系列书籍旨在成为其领域的“标准第二本书”。如果你之前有一些实际使用JavaScript和TypeScript的经验，你将能够从
    *Effective TypeScript* 中获得最大的收益。我这本书的目标不是教你 TypeScript 或 JavaScript，而是帮助你从初级或中级用户进阶到专家级别。本书中的内容通过帮助你建立
    TypeScript 及其生态系统如何工作的心理模型，使你意识到应避免的陷阱和问题，并指导你以最有效的方式利用 TypeScript 的多种能力来实现这一目标。而参考书将解释一种语言允许你以五种方式执行
    X，*Effective* 书将告诉你应该选择其中哪一种以及为什么选择它。'
- en: TypeScript has evolved rapidly over the past few years, but my hope is that
    it has stabilized enough that the content in this book will remain valid for years
    to come. This book focuses primarily on the language itself, rather than any frameworks
    or build tools. You won’t find any examples of how to use React or Angular with
    TypeScript, or how to configure TypeScript to work with webpack, Babel, or Rollup.
    The advice in this book should be relevant to all TypeScript users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年中，TypeScript已经快速发展，但我希望它已经足够稳定，以至于本书内容将在未来数年内仍然有效。本书主要关注语言本身，而不涉及任何框架或构建工具。你不会在本书中找到如何在TypeScript中使用React或Angular的示例，也不会找到如何配置TypeScript与webpack、Babel或Rollup配合使用的内容。本书的建议应该适用于所有TypeScript用户。
- en: Why I Wrote This Book
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我写这本书
- en: When I first started working at Google, I was given a copy of the third edition
    of *Effective C++*. It was unlike any other programming book I’d read. It made
    no attempt to be accessible to beginners or to be a complete guide to the language.
    Rather than telling you what the different features of C++ did, it told you how
    you should and should not use them. It did so through dozens of short, specific
    items motivated by concrete examples.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The effect of reading all these examples while using the language daily was
    unmistakable. I’d used C++ before, but for the first time I felt comfortable with
    it and knew how to think about the choices it presented me. In later years I would
    have similar experiences reading *Effective Java* and *Effective JavaScript*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: If you’re already comfortable working in a few different programming languages,
    then diving straight into the odd corners of a new one can be an effective way
    to challenge your mental models and learn what makes it different. I’ve learned
    an enormous amount about TypeScript from writing this book. I hope you’ll have
    the same experience reading it!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: How This Book Is Organized
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is a collection of “items,” each of which is a short technical essay
    that gives you specific advice about some aspect of TypeScript. The items are
    grouped thematically into chapters, but feel free to jump around and read whichever
    ones look most interesting to you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Each item’s title conveys the key takeaway. These are the things you should
    remember as you’re using TypeScript, so it’s worth skimming the table of contents
    to get them in your head. If you’re writing documentation, for example, and have
    a nagging sense that you shouldn’t be writing type information, then you’ll know
    to go read [Item 30: Don’t repeat type information in documentation](ch04.html#jsdoc-repeat).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The text of the item motivates the advice in the title and backs it up with
    concrete examples and technical arguments. Almost every point made in this book
    is demonstrated through example code. I tend to read technical books by looking
    at the examples and skimming the prose, and I assume you do something similar.
    I hope you’ll read the prose and explanations! But the main points should still
    come across if you skim the examples.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: After reading the item, you should understand why it will help you use TypeScript
    more effectively. You’ll also know enough to understand if it doesn’t apply to
    your situation. Scott Meyers, the author of *Effective C++*, gives a memorable
    example of this. He met a team of engineers who wrote software that ran on missiles.
    They knew they could ignore his advice about preventing resource leaks, because
    their programs would always terminate when the missile hit the target and their
    hardware blew up. I’m not aware of any missiles with JavaScript runtimes, but
    the James Webb Space Telescope has one, so you never know!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Finally, each item ends with “Things to Remember.” These are a few bullet points
    that summarize the item. If you’re skimming through, you can read these to get
    a sense for what the item is saying and whether you’d like to read more. You should
    still read the item! But the summary will do in a pinch.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Conventions in TypeScript Code Samples
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All code samples are TypeScript except where it’s clear from context that they
    are JSON, GraphQL, or some other language. Much of the experience of using TypeScript
    involves interacting with your editor, which presents some challenges in print.
    I’ve adopted a few conventions to make this work.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Most editors surface errors using squiggly underlines. To see the full error
    message, you hover over the underlined text. To indicate an error in a code sample,
    I put squiggles in a comment line under the place where the error occurs:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I occasionally edit the error messages for clarity and brevity, but I never
    remove an error. If you copy/paste a code sample into your editor, you should
    get exactly the errors indicated, no more no less.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'To draw attention to the lack of an error, I use `// OK`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should be able to hover over a symbol in your editor to see what TypeScript
    considers its type. To indicate this in text, I use a comment starting with “type
    is”:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The type is for the first symbol on the line (`v` in this case) or for the
    result of a function call:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This matches the type you’d see in your editor character for character. In the
    case of function calls you may need to assign to a temporary variable to see the
    type.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'I will occasionally introduce no-op statements to indicate the type of a variable
    on a specific line of code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `x;` lines are only there to demonstrate the type in each branch of the
    conditional. You don’t need to (and shouldn’t) include statements like this in
    your own code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Unless it’s otherwise noted or clear from context, code samples are intended
    to be checked with the `--strict` flag. All samples were verified using TypeScript
    3.7.0-beta.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Typographical Conventions Used in This Book
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/danvk/effective-typescript*](https://github.com/danvk/effective-typescript).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Effective TypeScript*
    by Dan Vanderkam (O’Reilly). Copyright 2020 Dan Vanderkam, 978-1-492-05374-3.”'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can access the web page for this book, where we list errata, examples, and
    any additional information, at [*https://oreil.ly/Effective_TypeScript*](https://oreil.ly/Effective_TypeScript).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: To comment or ask technical questions about this book, send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many people who helped make this book possible. Thanks to Evan Martin
    for introducing me to TypeScript and showing me how to think about it. To Douwe
    Osinga for connecting me with O’Reilly and being supportive of the project. To
    Brett Slatkin for advice on structure and for showing me that someone I knew could
    write an *Effective* book. To Scott Meyers for coming up with this format and
    for his “Effective *Effective* Books” blog post, which provided essential guidance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'To my reviewers, Rick Battagline, Ryan Cavanaugh, Boris Cherny, Yakov Fain,
    Jesse Hallett, and Jason Killian. To all my coworkers at Sidewalk who learned
    TypeScript with me over the years. To everyone at O’Reilly who helped make this
    book happen: Angela Rufino, Jennifer Pollock, Deborah Baker, Nick Adams, and Jasmine
    Kwityn. To the TypeScript NYC crew, Jason, Orta, and Kirill, and to all the speakers.
    Many items were inspired by talks at the Meetup, as described in the following
    list:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[Item 3](ch01.html#independent) was inspired by a blog post of Evan Martin’s
    that I found particularly enlightening as I was first learning TypeScript.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 7](ch02_split_000.html#types-as-sets) was inspired by Anders’s talk about
    structural typing and `keyof` relationships at TSConf 2018, and by a talk of Jesse
    Hallett’s at the April 2019 TypeScript NYC Meetup.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both Basarat’s guide and helpful answers by DeeV and GPicazo on Stack Overflow
    were essential in writing [Item 9](ch02_split_000.html#prefer-declarations-to-assertions).
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 10](ch02_split_000.html#avoid-object-wrapper-types) builds on similar
    advice in Item 4 of *Effective JavaScript* (Addison-Wesley).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I was inspired to write [Item 11](ch02_split_001.html#excess-property-checking)
    by mass confusion around this topic at the August 2019 TypeScript NYC Meetup.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 13](ch02_split_001.html#type-vs-interface) was greatly aided by several
    questions about `type` vs. `interface` on Stack Overflow. Jesse Hallett suggested
    the formulation around extensibility.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jacob Baskin provided encouragement and early feedback on [Item 14](ch02_split_001.html#map-between-types).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 19](ch03.html#avoid-inferable) was inspired by several code samples submitted
    to the r/typescript subreddit.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 26](ch03.html#context-inference) is based on my own writing on Medium
    and a talk I gave at the October 2018 TypeScript NYC Meetup.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 28](ch04.html#valid-states) is based on common advice in Haskell (“make
    illegal states unrepresentable”). The Air France 447 story is inspired by Jeff
    Wise’s incredible 2011 article in *Popular Mechanics*.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 29](ch04.html#loose-accept-strict-produce) is based on an issue I ran
    into with the Mapbox type declarations. Jason Killian suggested the phrasing in
    the title.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advice about naming in [Item 36](ch04.html#language-of-domain) is common
    but this particular formulation was inspired by Dan North’s short article in *97
    Things Every Programmer Should Know* (O’Reilly).
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 37](ch04.html#brands) was inspired by Jason Killian’s talk at the very
    first TypeScript NYC Meetup in September 2017.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 41](ch05.html#evolving-any) is based on the TypeScript 2.1 release notes.
    The term “evolving any” is not widely used outside the TypeScript compiler itself,
    but I find it useful to have a name for this unusual pattern.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 42](ch05.html#never-unknown) was inspired by a blog post of Jesse Hallett’s.
    [Item 43](ch05.html#type-safe-monkey) was greatly aided by feedback from Titian
    Cernicova Dragomir in TypeScript issue #33128.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 44](ch05.html#type-percentage) is based on York Yao’s work on the `type-coverage`
    tool. I wanted something like this and it existed!'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 46](ch06.html#three-versions) is based on a talk I gave at the December
    2017 TypeScript NYC Meetup.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 50](ch06.html#conditional-overload) owes a debt of gratitude to David
    Sheldrick’s post on the *Artsy* blog on conditional types, which greatly demystified
    the topic for me.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 51](ch06.html#mirror-types-for-deps) was inspired by a talk Steve Faulkner
    aka southpolesteve gave at the February 2019 Meetup.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 52](ch06.html#test-your-types) is based on my own writing on Medium and
    work on the typings-checker tool, which eventually got folded into dtslint.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 53](ch07.html#avoid-non-ecma) was inspired/reinforced by Kat Busch’s
    Medium post on the various types of enums in TypeScript, as well as Boris Cherny’s
    writings on this topic in *Programming TypeScript* (O’Reilly).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 54](ch07.html#iterate-objects) was inspired by my own confusion and that
    of my coworkers on this topic. The definitive explanation is given by Anders on
    TypeScript PR #12253.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MDN documentation was essential for writing [Item 55](ch07.html#understand-the-dom).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Item 56](ch07.html#private-rely) is loosely based on Item 35 of *Effective
    JavaScript* (Addison-Wesley).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html#ch-migrate) is based on my own experience migrating the
    aging dygraphs library.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I found many of the blog posts and talks that led to this book through the excellent
    r/typescript subreddit. I’m particularly grateful to developers who provided code
    samples there which were essential for understanding common issues in beginner
    TypeScript. Thanks to Marius Schulz for the TypeScript Weekly newsletter. While
    it’s only occasionally weekly, it’s always an excellent source of material and
    a great way to keep up with TypeScript. To Anders, Daniel, Ryan, and the whole
    TypeScript team at Microsoft for the talks and all the feedback on issues. Most
    of my issues were misunderstandings, but there is nothing quite so satisfying
    as filing a bug and immediately seeing Anders Hejlsberg himself fix it! Finally,
    thanks to Alex for being so supportive during this project and so understanding
    of all the working vacations, mornings, evenings, and weekends I needed to complete
    it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
