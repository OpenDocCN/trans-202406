- en: Chapter 22\. Ingresses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 22 章\. Ingress
- en: '[Chapter 21](ch21.xhtml#services) delved into the purpose and creation of the
    Service primitive. Once there’s a need to expose the application to external consumers,
    selecting an appropriate Service type becomes crucial. The most practical choice
    often involves creating a Service of type LoadBalancer. Such a Service offers
    load balancing capabilities by assigning an external IP address accessible to
    consumers outside the Kubernetes cluster.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 21 章](ch21.xhtml#services) 探讨了服务原语的目的和创建。一旦需要将应用程序暴露给外部消费者，选择适当的服务类型变得至关重要。最实际的选择通常涉及创建类型为
    LoadBalancer 的服务。这种服务通过分配给消费者外部可访问的外部 IP 地址来提供负载平衡能力，超出 Kubernetes 集群的范围。'
- en: However, opting for a LoadBalancer Service for each externally reachable application
    has drawbacks. In a cloud provider environment, each Service triggers the provisioning
    of an external load balancer, resulting in increased costs. Additionally, managing
    a collection of LoadBalancer Service objects can lead to administrative challenges,
    as a new object must be established for each externally accessible microservice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为每个外部可达的应用程序选择 LoadBalancer 服务存在缺点。在云提供商环境中，每个服务触发外部负载均衡器的配置，导致成本增加。此外，管理一组
    LoadBalancer 服务对象可能会带来管理挑战，因为每个外部可访问的微服务都必须建立一个新的对象。
- en: To mitigate these issues, the Ingress primitive comes into play, offering a
    singular, load-balanced entry point to an application stack. An Ingress possesses
    the ability to route external HTTP(S) requests to one or more Services within
    the cluster based on an optional, DNS-resolvable host name and URL context path.
    This chapter will guide you through the creation and access of an Ingress.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这些问题，Ingress 原语发挥作用，提供一个统一的、负载均衡的应用程序堆栈入口点。Ingress 具有根据可选的、可通过 DNS 解析的主机名和
    URL 上下文路径路由外部 HTTP(S) 请求到集群内一个或多个服务的能力。本章将指导您创建和访问 Ingress。
- en: Accessing an Ingress in minikube
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 minikube 中访问 Ingress
- en: Accessing an Ingress in minikube requires special handling. Refer to the Kubernetes
    tutorial [“Set up Ingress on Minikube with the NGINX Ingress Controller”](https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/)
    for detailed instructions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 minikube 中访问 Ingress 需要特别处理。请参考 Kubernetes 教程 [“在 Minikube 上使用 NGINX Ingress
    控制器设置 Ingress”](https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/)
    获取详细指南。
- en: Working with Ingresses
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ingress
- en: The Ingress exposes HTTP (and optionally HTTPS) routes to clients outside of
    the cluster through an externally-reachable URL. The routing rules configured
    with the Ingress determine *how* the traffic should be routed. Cloud provider
    Kubernetes environments will often deploy an external load balancer. The Ingress
    receives a public IP address from the load balancer. You can configure rules for
    routing traffic to multiple Services based on specific URL context paths, as shown
    in [Figure 22-1](#ingress_traffic_routing).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress 通过外部可访问的 URL 公开 HTTP（和可选的 HTTPS）路由给客户端。与 Ingress 配置的路由规则决定了 *流量应该如何*
    被路由。云提供商的 Kubernetes 环境通常会部署一个外部负载均衡器。Ingress 从负载均衡器获取公共 IP 地址。您可以配置规则，根据特定的 URL
    上下文路径将流量路由到多个服务，如 [图 22-1](#ingress_traffic_routing) 所示。
- en: '![ckd2 2201](Images/ckd2_2201.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 2201](Images/ckd2_2201.png)'
- en: Figure 22-1\. Managing external access to the Services via HTTP(S)
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-1\. 通过 HTTP(S) 管理对服务的外部访问
- en: 'The scenario depicted in [Figure 22-1](#ingress_traffic_routing) instantiates
    an Ingress as the sole entry point for HTTP(S) calls to the domain name “next.example.com.”
    Based on the provided URL context, the Ingress directs the traffic to either of
    the fictional Services: one designed for a business application and the other
    for fetching metrics related to the application.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 22-1](#ingress_traffic_routing) 中描述的场景中，将 Ingress 实例化为 HTTP(S) 调用到域名“next.example.com”的唯一入口点。根据提供的
    URL 上下文，Ingress 将流量定向到两个虚构服务之一：一个设计用于业务应用程序，另一个用于获取与应用程序相关的指标。
- en: Specifically, the URL context path `/app` is routed to the App Service responsible
    for managing the business application. Conversely, sending a request to the URL
    context `/metrics` results in the call being forwarded to the Metrics Service,
    which is capable of returning relevant metrics.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，URL 上下文路径`/app`被路由到负责管理业务应用程序的应用服务。相反，向 URL 上下文`/metrics`发送请求将导致调用被转发到能够返回相关指标的指标服务。
- en: Installing an Ingress Controller
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Ingress 控制器
- en: For Ingress to function, an Ingress controller is essential. This controller
    assesses the set of rules outlined by an Ingress, dictating the routing of traffic.
    The choice of Ingress controller often depends on the specific use cases, requirements,
    and preferences of the Kubernetes cluster administrator. Noteworthy examples of
    production-grade Ingress controllers include the [F5 NGINX Ingress Controller](https://www.nginx.com/products/nginx-ingress-controller/)
    or the [AKS Application Gateway Ingress Controller](https://azure.github.io/application-gateway-kubernetes-ingress/).
    Additional options can be explored in the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Ingress 正常运行，必须有一个 Ingress 控制器。此控制器评估由 Ingress 定义的一组规则，指导流量的路由。选择 Ingress
    控制器通常取决于 Kubernetes 集群管理员的特定用例、要求和偏好。生产级别的 Ingress 控制器的显著示例包括 [F5 NGINX Ingress
    Controller](https://www.nginx.com/products/nginx-ingress-controller/) 或 [AKS Application
    Gateway Ingress Controller](https://azure.github.io/application-gateway-kubernetes-ingress/)。还可以在
    [Kubernetes 文档](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)
    中探索其他选项。
- en: 'You should find at least one Pod that runs the Ingress controller after installing
    it. This output renders the Pod created by the NGINX Ingress controller residing
    in the namespace `ingress-nginx`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装后，您应该找到至少一个运行 Ingress 控制器的 Pod。此输出显示由 NGINX Ingress 控制器创建的 Pod 位于命名空间 `ingress-nginx`
    中：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the Ingress controller Pod transitions into the “Running” status, you can
    assume that the rules defined by Ingress objects will be evaluated.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Ingress 控制器 Pod 进入“Running”状态，可以假定由 Ingress 对象定义的规则将被评估。
- en: Deploying Multiple Ingress Controllers
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署多个 Ingress 控制器
- en: 'Certainly, deploying multiple Ingress controllers within a single cluster is
    a feasible option, especially if a cloud provider has preconfigured an Ingress
    controller in the Kubernetes cluster. The Ingress API introduces the attribute
    `spec.ingressClassName` to facilitate the selection of a specific controller implementation
    by name. To identify all installed Ingress classes, you can use the following
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在单个集群内部部署多个 Ingress 控制器是一个可行的选择，特别是如果云服务提供商已经在 Kubernetes 集群中预配置了一个 Ingress
    控制器。Ingress API 引入了属性 `spec.ingressClassName`，以便按名称选择特定的控制器实现。要识别所有已安装的 Ingress
    类别，可以使用以下命令：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Kubernetes determines the default Ingress class by scanning for the annotation
    `ingressclass.kubernetes.io/is-default-class: "true"` within all Ingress class
    objects. In scenarios where Ingress objects do not explicitly specify an Ingress
    class using the attribute `spec.ingressClassName`, they automatically default
    to the Ingress class marked as the default through this annotation. This mechanism
    provides flexibility in managing Ingress classes and allows for a default behavior
    when no specific class is specified in individual Ingress objects.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'Kubernetes 通过扫描所有 Ingress 类对象中的注释 `ingressclass.kubernetes.io/is-default-class:
    "true"` 来确定默认的 Ingress 类。在 Ingress 对象没有使用属性 `spec.ingressClassName` 明确指定 Ingress
    类的情况下，它们会自动默认为通过此注释标记为默认的 Ingress 类。该机制提供了管理 Ingress 类的灵活性，并在单个 Ingress 对象中未指定特定类时提供默认行为。'
- en: Configuring Ingress Rules
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Ingress 规则
- en: When creating an Ingress, you have the flexibility to define one or multiple
    rules. Each rule encompasses the specification of an optional host, a set of URL
    context paths, and the backend responsible for routing the incoming traffic. This
    structure allows for fine-grained control over how external HTTP(S) requests are
    directed within the Kubernetes cluster, catering to different services based on
    specified conditions. [Table 22-1](#ingress_rules) describes the three rules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Ingress 时，您可以灵活定义一个或多个规则。每个规则包括可选主机的规范、一组 URL 上下文路径以及负责路由入站流量的后端。该结构允许对 Kubernetes
    集群内的外部 HTTP(S) 请求进行细粒度控制，根据指定条件为不同的服务提供服务。[表 22-1](#ingress_rules)描述了三个规则。
- en: Table 22-1\. Ingress rules
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表 22-1\. Ingress 规则
- en: '| Type | Example | Description |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 示例 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| An optional host | `next.example.com` | If provided, the rules apply to that
    host. If no host is defined, all inbound HTTP(S) traffic is handled (e.g., if
    made through the IP address of the Ingress). |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 可选主机 | `next.example.com` | 如果提供，规则适用于该主机。如果未定义主机，则处理所有入站 HTTP(S) 流量（例如，如果通过
    Ingress 的 IP 地址进行）。'
- en: '| A list of paths | `/app` | Incoming traffic must match the host and path
    to correctly forward the traffic to a Service. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 路径列表 | `/app` | 进入流量必须匹配主机和路径，以正确转发流量到服务。 |'
- en: '| The backend | `app-service:8080` | A combination of a Service name and port.
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 后端 | `app-service:8080` | 服务名称和端口的组合。 |'
- en: An Ingress controller can optionally define a default backend that is used as
    a fallback route should none of the configured Ingress rules match. You can learn
    more about it in the [documentation of the Ingress primitive](https://kubernetes.io/docs/concepts/services-networking/ingress/#default-backend).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress控制器可以选择定义一个默认后端，作为如果没有匹配任何配置的Ingress规则时的备用路由。您可以在[Ingress原语文档](https://kubernetes.io/docs/concepts/services-networking/ingress/#default-backend)中了解更多信息。
- en: Creating Ingresses
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Ingresses
- en: 'You can create an Ingress with the imperative `create ingress` command. The
    main command-line option you need to provide is `--rule`, which defines the rules
    in a comma-separated fashion. The notation for each key-value pair is `<host>/<path>=<service>:<port>`.
    Let’s create an Ingress object with two rules:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用命令`create ingress`来创建一个Ingress。你需要提供的主要命令行选项是`--rule`，它以逗号分隔的方式定义规则。每个键值对的表示法为`<host>/<path>=<service>:<port>`。让我们创建一个具有两个规则的Ingress对象：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you look at the output of the `create ingress --help` command, more fine-grained
    rules can be specified.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看`create ingress --help`命令的输出时，可以指定更精细的规则。
- en: Support for TLS termination
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持TLS终止
- en: Port 80 for HTTP traffic is implied, as we didn’t specify a reference to a TLS
    Secret object. If you have specified `tls=mysecret` in the rule definition, then
    the port 443 would be listed here as well. For more information on enabling HTTPS
    traffic, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls).
    The exam does not cover configuring TLS termination for an Ingress.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于HTTP流量的端口80是隐含的，因为我们没有指定对TLS Secret对象的引用。如果在规则定义中指定了`tls=mysecret`，那么端口443也会在此列出。有关启用HTTPS流量的更多信息，请参见[Kubernetes文档](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)。考试不涵盖为Ingress配置TLS终止。
- en: Using a YAML manifest to define Ingress is often more intuitive and preferred
    by many. It provides a clearer and more structured way to express the desired
    configuration. The Ingress defined as a YAML manifest is shown in [Example 22-1](#ingress_manifest).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用YAML清单来定义Ingress通常更直观，也是许多人首选的方式。它提供了一种更清晰和更结构化的方式来表达所需的配置。作为YAML清单定义的Ingress显示在[示例 22-1](#ingress_manifest)中。
- en: Example 22-1\. An Ingress defined by a YAML manifest
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-1\. 由YAML清单定义的Ingress
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_ingresses_CO1-1)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_ingresses_CO1-1)'
- en: Assigns a NGNIX ingress-specific annotation for rewriting the URL.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 分配了一个NGINX Ingress特定的注解，用于重写URL。
- en: '[![2](Images/2.png)](#co_ingresses_CO1-2)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_ingresses_CO1-2)'
- en: Defines the rule that maps the `app-service` backend to the URL *next.example.com/app*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 定义将`app-service`后端映射到URL *next.example.com/app* 的规则。
- en: '[![3](Images/3.png)](#co_ingresses_CO1-3)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_ingresses_CO1-3)'
- en: Defines the rule that maps the `metrics-service` backend to the URL *next.example.com/metrics*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 定义将`metrics-service`后端映射到URL *next.example.com/metrics* 的规则。
- en: 'The Ingress YAML manifest contains one major difference from the live object
    representation created by the imperative command: the assignment of an Ingress
    controller annotation. Some Ingress controller implementations provide annotations
    to customize their behavior. You can find the full list of annotations that come
    with the NGINX Ingress controller in the [corresponding documentation](https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress YAML清单与由命令创建的实时对象表示之间存在一个主要区别：Ingress控制器注解的分配。某些Ingress控制器实现提供了注解来自定义它们的行为。您可以在[对应文档](https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md)中找到NGINX
    Ingress控制器提供的所有注解的完整列表。
- en: Defining Path Types
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义路径类型
- en: The previous YAML manifest demonstrates one of the options for specifying a
    path type via the attribute `spec.rules[].http.paths[].pathType`. The path type
    defines how an incoming request is evaluated against the declared path. [Table 22-2](#ingress_path_types)
    indicates the evaluation for incoming requests and their paths. See the [Kubernetes
    documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types)
    for a more comprehensive list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的YAML清单演示了通过属性`spec.rules[].http.paths[].pathType`指定路径类型的选项之一。路径类型定义了如何根据声明的路径评估传入请求。[表 22-2](#ingress_path_types)指示了传入请求及其路径的评估。有关更全面列表，请参阅[Kubernetes文档](https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types)。
- en: Table 22-2\. Ingress path types
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表 22-2\. Ingress路径类型
- en: '| Path Type | Rule | Incoming Request |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 路径类型 | 规则 | 进入请求 |'
- en: '| --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Exact` | `/app` | Matches `/app` but does not match `/app/test` or `/app/`
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `精确` | `/app` | 仅匹配 `/app`，不匹配 `/app/test` 或 `/app/` |'
- en: '| `Prefix` | `/app` | Matches `/app` and `/app/` but does not match `/app/test`
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `前缀` | `/app` | 匹配 `/app` 和 `/app/`，但不匹配 `/app/test` |'
- en: The key distinction between the `Exact` and `Prefix` path types lies in their
    treatment of trailing slashes. The `Prefix` path type focuses solely on the provided
    prefix of a URL context path, allowing it to accommodate requests with URLs that
    include a trailing slash. In contrast, the `Exact` path type is more stringent,
    requiring an exact match of the specified URL context path without considering
    a trailing slash.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`精确` 和 `前缀` 路径类型之间的关键区别在于它们对尾部斜杠的处理。`前缀` 路径类型仅关注 URL 上下文路径的提供前缀，允许处理包含尾部斜杠的
    URL 请求。相反，`精确` 路径类型更为严格，要求指定的 URL 上下文路径完全匹配，不考虑尾部斜杠。'
- en: Listing Ingresses
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出入口
- en: 'Listing Ingresses can be achieved with the `get ingress` command. You will
    see some of the information you specified when creating the Ingress (e.g., the
    hosts):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `get ingress` 命令可以列出 Ingress。您将看到在创建 Ingress 时指定的部分信息（例如主机）：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Ingress automatically selected the default Ingress class `nginx` configured
    by the Ingress controller. You can find the information under the `CLASS` column.
    The value listed under the `ADDRESS` columns is the IP address provided by the
    external load balancer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress 自动选择了由 Ingress 控制器配置的默认 Ingress 类 `nginx`。您可以在 `CLASS` 列下找到该信息。在 `ADDRESS`
    列下列出的值是外部负载均衡器提供的 IP 地址。
- en: Rendering Ingress Details
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染 Ingress 详细信息
- en: The `describe ingress` command is a valuable tool for obtaining detailed information
    about an Ingress resource. It presents the rules in a clear table format, which
    aids in understanding the routing configurations. Additionally, when troubleshooting,
    it’s essential to pay attention to any additional messages or events.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe ingress` 命令是获取有关 Ingress 资源详细信息的宝贵工具。它以清晰的表格格式呈现规则，有助于理解路由配置。此外，在故障排除时，注意任何额外消息或事件至关重要。'
- en: 'In the provided output, it’s evident that there might be an issue with the
    Services named app-service and metrics-service that are mapped in the Ingress
    rules. This discrepancy between the specified services and their existence can
    lead to routing errors:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的输出中，显然可能存在与 Ingress 规则中映射的名为 app-service 和 metrics-service 的服务存在问题。指定服务与其存在之间的差异可能导致路由错误：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Furthermore, observing the event log that shows syncing activity by the Ingress
    controller is crucial. Any warnings or errors in this log can provide insights
    into potential issues during the synchronization process.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，观察显示 Ingress 控制器同步活动的事件日志至关重要。此日志中的任何警告或错误都可以提供关于同步过程中潜在问题的见解。
- en: To address the problem, ensure that the specified Services in the Ingress rules
    actually exist and are accessible within the Kubernetes cluster. Additionally,
    review the event log for any relevant messages that might indicate the cause of
    the discrepancy.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决问题，请确保 Ingress 规则中指定的服务实际存在并且在 Kubernetes 集群内可访问。此外，请检查事件日志以查看可能指示不一致原因的相关消息。
- en: 'Let’s resolve the issue of not being able to route to the backends configured
    in the Ingress object. The following commands create the Pods and Services:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决无法路由到 Ingress 对象配置的后端的问题。以下命令创建 Pod 和服务：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inspecting the Ingress object doesn’t show any errors for the configured rules.
    If you’re now able to see a list of resolvable backends along with the corresponding
    Pod virtual IP addresses and ports, the Ingress object is correctly configured,
    and the backends are recognized and accessible:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 Ingress 对象并未显示配置规则的任何错误。如果您现在能够看到可解析后端列表以及相应的 Pod 虚拟 IP 地址和端口，则 Ingress 对象已正确配置，并且后端已被识别并且可访问：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It’s worth coming back to the Ingress details if you experience any issues with
    routing traffic through an Ingress endpoint.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在通过 Ingress 端点路由流量时遇到任何问题，回到 Ingress 细节是值得的。
- en: Accessing an Ingress
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问入口
- en: To enable the routing of incoming HTTP(S) traffic through the Ingress and subsequently
    to the configured Service, it’s crucial to set up a DNS entry mapping to the external
    address. This typically involves configuring either an A record or a CNAME record.
    The [ExternalDNS project](https://github.com/kubernetes-sigs/external-dns) is
    a valuable tool that can assist in managing these DNS records automatically.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使传入的 HTTP(S) 流量通过 **入口** 并进一步传递到配置的 **服务**，设置与外部地址映射的 DNS 记录非常重要。通常涉及配置 A 记录或
    CNAME 记录。 [ExternalDNS 项目](https://github.com/kubernetes-sigs/external-dns) 是一个有价值的工具，可以帮助自动管理这些
    DNS 记录。
- en: 'For local testing on a Kubernetes cluster on your machine, follow these steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在你的机器上的 Kubernetes 集群上的本地测试，请按照以下步骤进行：
- en: Find the IP address of the load balancer used by the Ingress.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出入口使用的负载均衡器的 IP 地址。
- en: Add the IP address to hostname mapping to your */etc/hosts* file.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 IP 地址添加到主机名映射到 */etc/hosts* 文件中。
- en: 'By adding the IP address to your local */etc/hosts* file, you simulate the
    DNS resolution locally, allowing you to test the behavior of the Ingress without
    relying on actual DNS records:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 IP 地址添加到本地 */etc/hosts* 文件中，可以在不依赖实际 DNS 记录的情况下模拟本地 DNS 解析，从而测试入口的行为：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can now send HTTP requests to the backend. This call matches the `Exact`
    path rule and therefore returns a HTTP 200 response code from the application:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以向后端发送 HTTP 请求了。此调用匹配 `精确` 路径规则，因此从应用程序返回 HTTP 200 响应代码：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This next call uses a URL with a trailing slash. The Ingress path rule doesn’t
    support this case, and therefore the call doesn’t go through. You will receive
    a HTTP 404 response code. For the second call to work, you’d have to change the
    path rule to `Prefix`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此次调用使用了带有尾部斜杠的 URL。入口路径规则不支持此情况，因此调用无法通过。你会收到 HTTP 404 响应代码。要使第二次调用起作用，必须将路径规则更改为
    `前缀`：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can observe the same behavior for the Metrics Service configured with the
    URL context path `metrics`. Feel free to try that out as well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到配置了 URL 上下文路径 `metrics` 的指标服务的相同行为。也可以随时尝试一下。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: The resource type Ingress defines rules for routing cluster-external HTTP(S)
    traffic to one or many Services. Each rule defines a URL context path to target
    a Service. For an Ingress to work, you first need to install an Ingress controller.
    An Ingress controller periodically evaluates those rules and ensures that they
    apply to the cluster. To expose the Ingress, a cloud provider usually stands up
    an external load balancer that lends an external IP address to the Ingress.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类型入口定义了将群集外部 HTTP(S) 流量路由到一个或多个服务的规则。每个规则定义了一个 URL 上下文路径以定位一个服务。为了使入口工作，您首先需要安装一个入口控制器。入口控制器定期评估这些规则，并确保它们适用于群集。为了暴露入口，云提供商通常会启动一个外部负载均衡器，为入口提供外部
    IP 地址。
- en: Exam Essentials
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Know the difference between a Service and an Ingress
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 **服务** 和 **入口** 之间的区别。
- en: An Ingress is not to be confused with a Service. The Ingress is meant for routing
    cluster-external HTTP(S) traffic to one or many Services based on an optional
    hostname and mandatory path. A Service routes traffic to a set of Pods.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 入口不应与服务混淆。入口旨在基于可选的主机名和强制路径将群集外部 HTTP(S) 流量路由到一个或多个服务。服务将流量路由到一组 Pod。
- en: Understand the role of an Ingress controller
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 理解入口控制器的作用
- en: An Ingress controller needs to be installed before an Ingress can function properly.
    Without installing an Ingress controller, Ingress rules will have no effect. You
    can choose from a range of Ingress controller implementations, all documented
    on the Kubernetes documentation page. Assume that an Ingress controller will be
    preinstalled for you in the exam environment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **入口控制器** 安装之前，入口才能正常运行。如果没有安装入口控制器，入口规则将不会生效。你可以在 Kubernetes 文档页面上找到一系列入口控制器的实现方式。假设在考试环境中会预先安装入口控制器。
- en: Practice the definition of Ingress rules
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 练习定义入口规则
- en: You can define one or many rules in an Ingress. Every rule consists of an optional
    host, the URL context path, and the Service DNS name and port. Try defining more
    than a single rule and how to access the endpoint. You will not have to understand
    the process for configuring TLS termination for an Ingress—this aspect is covered
    by the CKS exam.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在入口中定义一个或多个规则。每个规则包含一个可选的主机名、URL 上下文路径和服务 DNS 名称和端口。尝试定义多个规则以及如何访问端点。你不必理解配置入口的
    TLS 终止过程 —— 这一方面已经在 CKS 考试中涵盖。
- en: Sample Exercises
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_018.xhtml#appendix_a_ingresses).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可以在 [附录 A](app01_split_018.xhtml#appendix_a_ingresses) 中找到。
- en: Create a new Deployment named `web` that controls a single replica running the
    image `bmuschko/nodejs-hello-world:1.0.0` on port 3000\. Expose the Deployment
    with a Service named `web` of type `ClusterIP`. The Service routes traffic to
    the Pods controlled by the Deployment `web`. Make a request to the endpoint of
    the application on the context path /. You should see the message “Hello World.”
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `web` 的新部署，控制一个运行在端口3000上的映像 `bmuschko/nodejs-hello-world:1.0.0` 的副本。使用类型为
    `ClusterIP` 的名为 `web` 的Service公开部署。该Service将流量路由到由部署 `web` 控制的Pod。向应用程序的端点路径 /
    发出请求。您应该看到消息 “Hello World.”。
- en: Create an Ingress that exposes the path / for the host hello-world.exposed.
    The traffic should be routed to the Service created earlier. List the Ingress
    object.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个暴露路径 / 的Ingress，用于主机 hello-world.exposed。流量应路由到先前创建的Service。列出Ingress对象。
- en: Add an entry in */etc/hosts* that maps the load balancer IP address to the host
    hello-world.exposed. Make a request to [*http://hello-world.exposed*](http://hello-world.exposed).
    You should see the message “Hello World.”
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 */etc/hosts* 中添加一个条目，将负载均衡器IP地址映射到主机 hello-world.exposed。向 [*http://hello-world.exposed*](http://hello-world.exposed)
    发出请求。您应该看到消息 “Hello World.”。
- en: Any application has been exposed by an Ingress. Some of your end users report
    an issue with connecting to the application from outside of the cluster. Inspect
    the existing setup and fix the problem for your end users.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何应用程序都已经通过Ingress暴露。一些最终用户报告从集群外部连接到应用程序时出现问题。检查现有设置并为最终用户解决问题。
- en: Navigate to the directory *app-a/ch22/troubleshooting* of the checked-out GitHub
    repository [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide).
    Create the objects from the YAML manifest *setup.yaml*. Inspect the objects in
    the namespace `s96`. Create an entry in */etc/hosts* for the hostname faulty.ingress.com.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 切换到检出的GitHub仓库[*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide)的目录
    *app-a/ch22/troubleshooting*。从YAML清单 *setup.yaml* 中创建对象。在命名空间 `s96` 中检查这些对象。为主机名
    faulty.ingress.com 在 */etc/hosts* 中创建一个条目。
- en: Perform a HTTP call to faulty.ingress.com/ using `wget` or `curl`. Inspect the
    connection error.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `wget` 或 `curl` 对 faulty.ingress.com/ 执行HTTP调用。检查连接错误。
- en: Change the configuration to ensure that end users can connect to the Ingress.
    Verify proper connectivity by performing another HTTP call.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改配置以确保最终用户可以连接到Ingress。通过执行另一个HTTP调用来验证连接的正确性。
