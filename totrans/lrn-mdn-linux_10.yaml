- en: Appendix A. Helpful Recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, I’ve compiled a list of recipes for common tasks. This is
    just a selection of recipes that I’ve gathered over time, tasks that I often carry
    out and like to have handy as a reference. By no means is this a complete or deep
    coverage of Linux usage and admin tasks. For a comprehensive collection of recipes,
    I strongly recommend you check out Carla Schroder’s [*Linux Cookbook*](https://oreil.ly/53Pk9)
    (O’Reilly), covering a range of recipes in great detail.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering System Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about the Linux version, kernel, and other related information, use
    any of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn about basic hardware equipment (CPU, RAM, disks), do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn more about the hardware of your system, such as about the BIOS, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note for the previous command: other interesting options for `-t` include `system`
    and `memory`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To query overall main memory and swap usage, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To query how many file descriptors a process can have, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Working with Users and Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can list logged-in users with either `who` or `w` (more detailed output).
  prefs: []
  type: TYPE_NORMAL
- en: 'To show system metrics (CPU, memory, etc.) on a per-process basis for a specific
    user, `SOMEUSER`, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'List all processes (for all users) in tree format with details by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Find a specific process (`python` here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To terminate a process, use its PID if you know it (and add `-9` as a parameter
    if the process ignores this signal):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can terminate a process by name using `killall`.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering File Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To query file details (including filesystem information such as inodes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn about a command, how the shell interprets it, and where the executable
    file is located, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Working with Files and Directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display the content of a text file called `afile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the contents of a directory, use `ls`, and you may wish to further
    use the output. For example, to count the number of files in a directory, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finding files and file content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helpful_recipes_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Find files ending in *.conf* in directory */etc*.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_helpful_recipes_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Find “FINDME” in current directory by executing `grep`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show the differences in files, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To replace characters, use `tr` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to replace parts of a string is with `sed` (note that the delimiter
    doesn’t have to be `/`, which is handy for cases where you replace content in
    a path or URL):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a file of a specific size (for testing), you can use the `dd` command,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_helpful_recipes_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This creates a 1 MB file (1,000 times 1 KB blocks) called *output.dat* that
    is filled with zeros.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Redirection and Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [“Streams”](ch03.xhtml#shell-streams), we discussed file descriptors and
    streams. Here are a few recipes around this topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'File I/O redirection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#custom_co_helpful_recipes_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Redirect `stdout` of `*command*` into `*file*`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#custom_co_helpful_recipes_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Redirect `stderr` of `*command*` into `*file*`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#custom_co_helpful_recipes_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Redirect both `stdout` and `stderr` of `*command*` into `*file*`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#custom_co_helpful_recipes_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: An alternative way to redirect `stdout` and `stderr` of `*command*` into `*file*`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#custom_co_helpful_recipes_CO3-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Discard output of `*command*` (by redirecting it to */dev/null*).
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#custom_co_helpful_recipes_CO3-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Redirect `stdin` (inputs `*file*` to `*command*`).
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect `stdout` of one process to `stdin` of another process, use a pipe
    (`|`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To show the exit codes of each command in a pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Working with Time and Dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To query time-related information, such as local and UTC time as well as synchronization
    status, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Working with dates, you usually want to either get a date or timestamp for the
    current time or convert existing timestamps from one format to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the date in the format `YYYY-MM-DD`—for example, `2021-10-09`—use the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To generate a Unix epoch timestamp (such as `1633787676`), do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To create an ISO 8601 timestamp for UTC (something like `2021-10-09T13:55:47Z`),
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Same ISO 8601 timestamp format but for local time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Working with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To clone a Git repo—that is, to make a local copy on your Linux system—use
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After the previous `git clone` command is completed, the Git repo will be in
    the directory *examplerepo*, and you should execute the rest of the following
    commands in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view local changes in color and show where lines have been added and removed
    side by side, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To see what has changed locally (files edited, new files, removed files), do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To add all local changes and commit them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out the commit ID of the current commit, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To tag a commit with ID `HASH` using the tag `ATAG`, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To push the local changes to a remote (upstream) repo with a tag `ATAG`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the commit history use `git log`; specifically, to get a summary, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: System Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you need to see how fast a device is or how your Linux system performs
    under load. Here some ways to generate system load.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simulate memory load (and also burn some CPU cycles) with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding pipe, `yes` generates an endless supply of `y` characters,
    each on its own line, and then the `tr` command converts it into a continuous
    stream of `yx` that the `head` command chops off at 450 million bytes (ca. 450
    MB). Last but not least, we let `grep` consume the resulting `yx` block for something
    that doesn’t exist (`z`), and hence we see no output, but it is still generating
    load.
  prefs: []
  type: TYPE_NORMAL
- en: 'More detailed disk usage for a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing free disk space (globally, in this case):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Load test a disk and measure I/O throughput with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
