- en: Chapter 7\. Handling Errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A physicist, a structural engineer, and a programmer were in a car driving over
    a steep alpine pass when the brakes failed. The car went faster and faster, they
    were struggling to get around the corners, and once or twice the flimsy crash
    barrier saved them from tumbling down the side of the mountain. They were sure
    they were all going to die, when suddenly they spotted an escape lane. They pulled
    into the escape lane, and came safely to a halt.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The physicist said, “We need to model the friction in the brake pads and the
    resultant temperature rise, and see if we can work out why they failed.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The structural engineer said, “I think I’ve got a few spanners in the back.
    I’ll take a look and see if I can work out what’s wrong.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The programmer said, “Why don’t we see if it’s reproducible?”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anonymous
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'TypeScript does everything it can to move runtime exceptions to compile time:
    from the rich type system it provides to the powerful static and symbolic analyses
    it performs, it works hard so you don’t have to spend your Friday nights debugging
    misspelled variables and null pointer exceptions (and so your on-call coworker
    doesn’t have to be late to their great aunt’s birthday party because of it).'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, regardless of what language you write in, sometimes runtime exceptions
    do sneak through. TypeScript is really good about preventing them, but even it
    can’t prevent things like network and filesystem failures, errors parsing user
    input, stack overflows, and out of memory errors. What it does do—thanks to its
    lush type system—is give you lots of ways to deal with the runtime errors that
    end up making it through.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter I’ll walk you through the most common patterns for representing
    and handling errors in TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Returning `null`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throwing exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Option` type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which mechanism you use is up to you, and depends on your application. As I
    cover each error-handling mechanism, I’ll talk about its pros and cons so you
    can make the right choice for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Returning null
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to write a program that asks a user for their birthday, which we
    will then parse into a `Date` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We should probably validate the date the user entered—it’s just a text prompt,
    after all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we consume this, we’re forced to first check if the result is `null` before
    we can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returning `null` is the most lightweight way to handle errors in a typesafe
    way. Valid user input results in a `Date`, invalid user input in a `null`, and
    the type system checks for us that we handled both.
  prefs: []
  type: TYPE_NORMAL
- en: However, we lose some information doing it this way `parse` doesn’t tell us
    why exactly the operation failed, which stinks for whatever engineer has to comb
    through our logs to debug this, as well as the user who gets a pop up saying that
    there was an “Error parsing date for some reason” rather than a specific, actionable
    error like “Enter a date in the form YYYY/MM/DD.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning `null` is also difficult to compose: having to check for `null` after
    every operation can become verbose as you start to nest and chain operations.'
  prefs: []
  type: TYPE_NORMAL
- en: Throwing Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s throw an exception instead of returning `null`, so that we can handle
    specific failure modes and have some metadata about the failure so we can debug
    it more easily.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we consume this code, we need to be careful to catch the exception
    so that we can handle it gracefully without crashing our whole application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We probably want to be careful to rethrow other exceptions, so we don’t silently
    swallow every possible error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We might want to subclass the error for something more specific, so that when
    another engineer changes `parse` or `ask` to throw other `RangeError`s, we can
    differentiate between our error and the one they added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking good. We can now do more than just signal that something failed: we
    can use a custom error to indicate *why* it failed. These errors might come in
    handy when combing through our server logs to debug an issue, or we can map them
    to specific error dialogs to give our users actionable feedback about what they
    did wrong and how they can fix it. We can also effectively chain and nest operations
    by wrapping any number of operations in a single `try`/`catch` (we don’t have
    to check each operation for failure, like we did when returning `null`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'What does it feel like to use this code? Say the big `try`/`catch` is in one
    file, and the rest of the code is in a library being imported from somewhere else.
    How would an engineer know to catch those specific types of errors (`InvalidDateFormatError`
    and `DateIsInTheFutureError`), or to even just check for a regular old `RangeError`?
    (Remember that TypeScript doesn’t encode exceptions as part of a function’s signature.)
    We could indicate it in our function’s name (`parseThrows`), or include it in
    a docblock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: But in practice, an engineer probably wouldn’t wrap this code in a `try`/`catch`
    and check for exceptions at all, because engineers are lazy (at least, I am),
    and the type system isn’t telling them that they missed a case and should handle
    it. Sometimes, though—like in this example—errors are so expected that downstream
    code really should handle them, lest they cause the program to crash.
  prefs: []
  type: TYPE_NORMAL
- en: How else can we indicate to consumers that they should handle both the success
    and the error cases?
  prefs: []
  type: TYPE_NORMAL
- en: Returning Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TypeScript isn’t Java, and doesn’t support `throws` clauses.^([1](ch07.html#idm46304961581304))
    But we can achieve something similar with union types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now a consumer is forced to handle all three cases—`InvalidDateFormatError`,
    `DateIsInTheFutureError`, and successful parse—or they’ll get a `TypeError` at
    compile time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we successfully took advantage of TypeScript’s type system to:'
  prefs: []
  type: TYPE_NORMAL
- en: Encode likely exceptions in `parse`’s signature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicate to consumers which specific exceptions might be thrown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force consumers to handle (or rethrow) each of the exceptions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A lazy consumer can avoid handling each error individually. But they have to
    do so explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Of course, your program might still crash due to an out of memory error or a
    stack overflow exception, but there’s not much we can do to recover from those.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is lightweight and doesn’t require fancy data structures, but
    it’s also informative enough that consumers will know what type of failure an
    error represents and what to search for to find more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'A downside is that chaining and nesting error-giving operations can quickly
    get verbose. If a function returns `T | Error1`, then any function that consumes
    that function has two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly handle `Error1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Handle `T` (the success case) and pass `Error1` through to its consumers to
    handle. If you do this enough, the list of possible errors that a consumer has
    to handle grows quickly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This approach is verbose, but gives us excellent safety.
  prefs: []
  type: TYPE_NORMAL
- en: The Option Type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also describe exceptions using special-purpose data types. This approach
    has some downsides compared to returning unions of values and errors (notably,
    interoperability with code that doesn’t use these data types), but it does give
    you the ability to chain operations over possibly errored computations. Three
    of the most popular options (heh!) are the `Try`, `Option`,^([2](ch07.html#idm46304961216792))
    and `Either` types. In this chapter, we’ll just cover the `Option` type;^([3](ch07.html#idm46304961214696))
    the other two are similar in spirit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note that the `Try`, `Option`, and `Either` data types don’t come built into
    JavaScript environments the same way that `Array`, `Error`, `Map`, or `Promise`
    are. If you want to use these types, you’ll have to find implementations on NPM,
    or write them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Option` type comes to us from languages like Haskell, OCaml, Scala, and
    Rust. The idea is that instead of returning a value, you return a *container*
    that may or may not have a value in it. The container has a few methods defined
    on it, which lets you chain operations even though there may not actually be a
    value inside. The container can be pretty much any data structure, so long as
    it can hold a value. For example, you could use an array as the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you may have noticed, a downside of `Option` is that, much like our original
    `null`-returning approach, it doesn’t tell the consumer why the error happened;
    it just signals that something went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Where `Option` really shines is when you need to do multiple operations in a
    row, each of which might fail.
  prefs: []
  type: TYPE_NORMAL
- en: For example, before we assumed that `prompt` always succeeds, and `parse` might
    fail. But what if `prompt` can fail too? That might happen if the user cancelled
    out of the birthday prompt—that’s an error and we shouldn’t continue our computation.
    We can model that with… another `Option`!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Yikes—that didn’t work. Since we mapped an array of `Date`s (`Date[]`) to an
    array of arrays of `Date`s (`Date[][]`), we need to flatten it back to an array
    of `Date`s before we can keep going:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all getting a bit unwieldy. Because the types don’t tell you much (everything
    is a regular array), it’s hard to understand what’s going on in that code at a
    glance. To fix this, let’s wrap what we’re doing—putting a value in a container,
    exposing a way to operate on that value, and exposing a way to get a result back
    from the container—in a special data type that helps document our approach. Once
    we’re done implementing it, you’ll be able to use the data type like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll define our `Option` type like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Option` is an interface that’s implemented by two classes: `Some<T>` and `None`
    (see [Figure 7-1](#optiont-fig)). They are the two kinds of `Option`s. `Some<T>`
    is an `Option` that contains a value of type `T`, and `None` is an `Option` without
    a value, which represents a failure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Option` is both a type and a function. Its type is an interface that simply
    serves as the supertype of `Some` and `None`. Its function is the way to create
    a new value of type `Option`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![prts 0701](assets/prts_0701.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-1\. Option<T> has two cases: Some<T> and None'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s start by sketching out the types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_handling_errors_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Option<T>` is an interface that we’ll share between `Some<T>` and `None`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_handling_errors_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Some<T>` represents a successful operation that resulted in a value. Like
    the array we used before, `Some<T>` is a container for that value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_handling_errors_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`None` represents an operation that failed, and does not contain a value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These types are equivalent to the following in our array-based `Option` implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Option<T>` is `[T] | []`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Some<T>` is `[T]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` is `[]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What can you do with an `Option`? For our bare-bones implementation, we’ll
    define just two operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flatMap`'
  prefs: []
  type: TYPE_NORMAL
- en: A way to chain operations on a possibly empty `Option`
  prefs: []
  type: TYPE_NORMAL
- en: '`getOrElse`'
  prefs: []
  type: TYPE_NORMAL
- en: A way to retrieve a value from an `Option`
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by defining these operations on our `Option` interface, meaning
    that `Some<T>` and `None` will need to provide concrete implementations for them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'That is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flatMap` takes a function `f` that takes a value of type `T` (the type of
    the value the `Option` contains) and returns an `Option` of `U`. `flatMap` calls
    `f` with the `Option`’s value, and returns a new `Option<U>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getOrElse` takes a default value of the same type `T` as the value that the
    `Option` contains, and returns either that default value (if the `Option` is an
    empty `None`) or the `Option`’s value (if the `Option` is a `Some<T>`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Guided by the types, let’s implement these methods for `Some<T>` and `None`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![](assets/1.png)](#callout_7_1_1)'
  prefs: []
  type: TYPE_NORMAL
- en: When we call `flatMap` on a `Some<T>`, we pass in a function `f`, which `flatMap`
    calls with the `Some<T>`’s value to yield a new `Option` of a new type.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](assets/2.png)](#callout_7_1_2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calling `getOrElse` on a `Some<T>` just returns the `Some<T>`’s value.
  prefs: []
  type: TYPE_NORMAL
- en: '[![](assets/3.png)](#callout_7_1_3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since a `None` represents a failed computation, calling `flatMap` on it always
    returns a `None`: once a computation fails, we can’t recover from that failure
    (at least not with our particular `Option` implementation).'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](assets/4.png)](#callout_7_1_4)'
  prefs: []
  type: TYPE_NORMAL
- en: Calling `getOrElse` on a `None` always returns the value we passed into `getOrElse`.
  prefs: []
  type: TYPE_NORMAL
- en: We can actually go a step beyond this naive implementation, and specify our
    types better. If all you know is that you have an `Option` and a function from
    `T` to `Option<U>`, then an `Option<T>` always `flatMap`s to an `Option<U>`. But
    when you know you have a `Some<T>` or a `None`, you can be more specific.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 7-1](#flatmap-table) shows the result types we want when calling `flatMap`
    on the two types of `Option`s.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 7-1\. Result of calling .flatMap(f) on Some<T> and None
  prefs: []
  type: TYPE_NORMAL
- en: '|  | From `Some<T>` | From `None` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| To `Some<U>` | `Some<U>` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| To `None` | `None` | `None` |'
  prefs: []
  type: TYPE_TB
- en: 'That is, we know that mapping over a `None` always results in a `None`, and
    mapping over a `Some<T>` results in either a `Some<T>` or a `None`, depending
    on what calling `f` returns. We’ll exploit this and use overloaded signatures
    to give `flatMap` more specific types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re almost done. All that’s left to do is implement the `Option` function,
    which we’ll use to create new `Option`s. We already implemented the `Option` *type*
    as an interface; now we’re going to implement a function with the same name (remember
    that TypeScript has two separate namespaces for types and for values) as a way
    to create a new `Option`, similar to what we did in [“Companion Object Pattern”](ch06.html#companion-objects).
    If a user passes in `null` or `undefined`, we’ll give them back a `None`; otherwise,
    we’ll return a `Some`. Once again, we’ll overload the signature to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_handling_errors_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: If the consumer calls `Option` with `null` or `undefined`, we return a `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_handling_errors_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, we return a `Some<T>`, where `T` is the type of value the user passed
    in.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_handling_errors_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we manually calculate an upper bound for the two overloaded signatures.
    The upper bound of `null | undefined` and `T` is `T | null | undefined`, which
    simplifies to `T`. The upper bound of `None` and `Some<T>` is `None | Some<T>`,
    which we already have a name for: `Option<T>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s it. We’ve derived a fully working, minimal `Option` type that lets us
    safely perform operations over maybe-`null` values. We use it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Getting back to our birthday prompt example, our code now works as we’d expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`Option`s are a powerful way to work with series of operations that may or
    may not succeed. They give you excellent type safety, and signal to consumers
    via the type system that a given operation might fail.'
  prefs: []
  type: TYPE_NORMAL
- en: However, `Option`s aren’t without their downsides. They signal failure with
    a `None`, so you don’t get more details about what failed and why. They also don’t
    interoperate with code that doesn’t use `Option`s (you’ll have to explicitly wrap
    those APIs to return `Option`s).
  prefs: []
  type: TYPE_NORMAL
- en: Still, what you did there was pretty neat. The overloads you added let you do
    something that you can’t express in most languages, even those that rely on the
    `Option` type for working with nullable values. By restricting `Option` to just
    `Some` or `None` where possible via overloaded call signatures, you made your
    code a whole lot safer, and a whole lot of Haskell programmers very jealous. Now
    go grab yourself a cold one—you deserve it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we covered the different ways to signal and recover from errors
    in TypeScript: returning `null`, throwing exceptions, returning exceptions, and
    the `Option` type. You now have an arsenal of approaches for safely working with
    things that might fail. Which approach you choose is up to you, and depends on:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether you want to simply signal that something failed (`null`, `Option`),
    or give more information about why it failed (throwing and returning exceptions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether you want to force consumers to explicitly handle every possible exception
    (returning exceptions), or write less error-handling boilerplate (throwing exceptions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether you need a way to compose errors (`Option`), or simply handle them when
    they come up (`null`, exceptions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Design a way to handle errors for the following API, using one of the patterns
    from this chapter. In this API, every operation might fail—feel free to update
    the API’s method signatures to allow for failures (or don’t, if you prefer). Think
    about how you might perform a sequence of actions while handling errors that come
    up (e.g., getting the logged-in user’s ID, then getting their list of friends,
    then getting each friend’s name):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ^([1](ch07.html#idm46304961581304-marker)) If you haven’t worked with Java before,
    a `throws` clause indicates which types of runtime exceptions a method might throw,
    so a consumer has to handle those exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch07.html#idm46304961216792-marker)) Also called the `Maybe` type.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch07.html#idm46304961214696-marker)) Google “try type” or “either type”
    for more information on those types.
  prefs: []
  type: TYPE_NORMAL
