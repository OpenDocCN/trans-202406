- en: Chapter 1\. Kubernetes and OpenShift Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 Kubernetes 和 OpenShift 概述
- en: Over the past few years, Kubernetes has emerged as the de facto standard platform
    for managing, orchestrating, and provisioning container-based cloud native computing
    applications. *Cloud native computing applications* are essentially applications
    that are built from a collection of smaller services (microservices) and take
    advantage of the speed of development and scalability capabilities that cloud
    computing environments typically provide. Over time, Kubernetes has matured to
    provide the controls required to manage even more advanced and stateful workloads,
    such as databases and AI services. The Kubernetes ecosystem continues to experience
    explosive growth, and the project benefits greatly from being a multiple-vendor
    and meritocracy-based open source project backed by a solid governance policy
    and a level playing field for contributing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年来，Kubernetes已经成为管理、编排和提供基于容器的云原生计算应用的事实标准平台。*云原生计算应用*基本上是由一组较小的服务（微服务）构建而成的应用程序，并利用云计算环境通常提供的开发速度和可扩展性能力。随着时间的推移，Kubernetes已经成熟到可以提供管理更高级和有状态工作负载所需的控制，如数据库和AI服务。Kubernetes生态系统继续经历爆炸式增长，并且该项目因为是一个基于多供应商和技术精英的开源项目，背靠坚实的治理政策以及为贡献者提供公平竞争的平台而受益良多。
- en: Although many Kubernetes distributions are available for customers to choose
    from, the Red Hat OpenShift Kubernetes distribution is of particular interest.
    OpenShift has achieved broad adoption across a variety of industries; over one
    thousand enterprise customers across the globe currently use it to host their
    business applications and drive their digital transformation efforts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有许多 Kubernetes 发行版供客户选择，但 Red Hat OpenShift Kubernetes 发行版特别引人注目。OpenShift
    已经在各行各业广泛采用；全球超过一千家企业客户目前使用它来托管其业务应用程序并推动数字转型努力。
- en: This book focuses on enabling you to become an expert at running both traditional
    Kubernetes and the OpenShift distribution of Kubernetes in production environments.
    In this first chapter, we begin with a broad overview of both Kubernetes and OpenShift
    and the historical origin of both platforms. We then review the key features and
    capabilities that have made Kubernetes and OpenShift the dominant platforms for
    creating and deploying cloud native applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书侧重于让您成为在生产环境中运行传统 Kubernetes 和 OpenShift Kubernetes 发行版的专家。在本章中，我们从广义上概述了
    Kubernetes 和 OpenShift 的历史起源。然后，我们回顾了使 Kubernetes 和 OpenShift 成为创建和部署云原生应用程序的主导平台的关键特性和能力。
- en: 'Kubernetes: Cloud Infrastructure for Orchestrating Containerized Applications'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes：编排容器化应用的云基础设施
- en: 'The emergence of Docker in 2013 introduced numerous developers to containers
    and container-based application development. Containers were presented as an alternative
    to virtual machines (VMs) for creating self-contained deployable units. Containers
    rely on advanced security and resource management features of the Linux operating
    system to provide isolation at the process level instead of relying on VMs for
    creating deployable units of software. A Linux process is much more lightweight
    and orders of magnitude more efficient than a VM for common activities like starting
    up an application image or creating new image snapshots. Because of these advantages,
    developers favored containers as the desired approach to creating new software
    applications as self-contained units of deployable software. As the popularity
    of containers grew, so did a need for a common platform for provisioning, managing,
    and orchestrating containers across a cluster. For more than a decade, Google
    had embraced the use of Linux containers as the foundation for applications deployed
    in its cloud.^([1](ch01.html#ch01fn1)) Google had extensive experience orchestrating
    and managing containers at scale and had developed three generations of container-management
    systems: Borg, Omega, and [Kubernetes](https://kubernetes.io). The latest generation
    of container management developed by Google, Kubernetes was a redesign based on
    lessons learned from Borg and Omega and was made available as an open source project.
    Kubernetes delivered several key features that dramatically improved the experience
    of developing and deploying a scalable container-based cloud application:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在 2013 年的出现向许多开发人员介绍了容器和基于容器的应用程序开发。容器被提出作为创建自包含部署单元的虚拟机（VM）的替代方案。容器依赖于
    Linux 操作系统的先进安全性和资源管理功能，以在进程级别提供隔离，而不是依赖于 VM 来创建可部署的软件单元。Linux 进程在启动应用程序镜像或创建新的镜像快照等常见活动中比
    VM 轻量得多，效率更高几个数量级。由于这些优势，开发人员青睐容器作为创建新软件应用程序的自包含部署软件单元的理想方法。随着容器的流行，对于在集群中提供、管理和编排容器的共同平台的需求也在增长。十多年来，谷歌一直支持使用
    Linux 容器作为其云中部署应用程序的基础。^([1](ch01.html#ch01fn1)) 谷歌在规模上编排和管理容器方面拥有丰富的经验，并开发了三代容器管理系统：Borg、Omega
    和 [Kubernetes](https://kubernetes.io)。作为基于 Borg 和 Omega 经验教训重新设计的最新一代容器管理系统，Kubernetes
    作为开源项目提供。Kubernetes 提供了几个关键特性，显著改进了开发和部署可扩展的基于容器的云应用程序的体验：
- en: Declarative deployment model
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式部署模型
- en: Most cloud infrastructures that existed before Kubernetes was released took
    a procedural approach based on a scripting language like Ansible, Chef, Puppet,
    and so on for automating the deployment of applications to production environments.
    In contrast, Kubernetes used a declarative approach of describing what the desired
    state of the system should be. Kubernetes infrastructure was then responsible
    for starting new containers when necessary (e.g., when a container failed) to
    achieve the desired declared state. The declarative model was much more clear
    at communicating which deployment actions were desired, and this approach was
    a huge step forward compared with trying to read and interpret a script to determine
    what the desired deployment state should be.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 发布之前存在的大多数云基础设施采用了基于脚本语言（如 Ansible、Chef、Puppet 等）的过程化方法来自动化将应用程序部署到生产环境。相比之下，Kubernetes
    使用了声明式方法来描述系统的期望状态。Kubernetes 基础设施负责在需要时启动新的容器（例如容器失败时）以达到所声明的期望状态。声明式模型在传达所需的部署操作方面更加清晰，与试图读取和解释脚本来确定所需部署状态相比，这一方法是一个巨大的进步。
- en: Built-in replica and autoscaling support
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的副本和自动伸缩支持
- en: In some cloud infrastructures that existed before Kubernetes, support for replicas
    of an application and autoscaling capabilities were not part of the core infrastructure
    and, in some cases, never successfully materialized due to platform or architectural
    limitations. *Autoscaling* refers to the ability of a cloud environment to recognize
    that an application is becoming more heavily used, so the cloud environment automatically
    increases the capacity of the application, typically by creating more copies of
    the application on extra servers in the cloud environment. Autoscaling capabilities
    were provided as core features in Kubernetes and dramatically improved the robustness
    and consumability of its orchestration capabilities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些存在于 Kubernetes 之前的云基础设施中，应用程序的复制和自动扩展能力并不是核心基础设施的一部分，并且在某些情况下，由于平台或架构限制，从未真正实现。*自动扩展*
    是指云环境能够识别应用程序的使用情况增加，并自动增加应用程序的容量，通常是通过在云环境中的额外服务器上创建更多应用程序副本来实现的。自动扩展功能作为 Kubernetes
    的核心特性提供，显著改进了其编排能力的健壮性和可用性。
- en: Built-in rolling upgrades support
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的滚动升级支持
- en: Most cloud infrastructures do not provide support for upgrading applications.
    Instead, they assume the operator will use a scripting language, such as Chef,
    Puppet, or Ansible, to handle upgrades. In contrast, Kubernetes actually provides
    built-in support for rolling out upgrades of applications. For example, Kubernetes
    rollouts are configurable such that they can leverage extra resources for faster
    rollouts that have no downtime, or they can perform slower rollouts that do canary
    testing, reducing the risk and validating new software by releasing software to
    a small percentage of users to ensure that the new version of the application
    is stable. Kubernetes also supports pausing, resuming, and rolling back the version
    of an application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云基础设施不提供应用程序升级支持。相反，它们假设操作员将使用像 Chef、Puppet 或 Ansible 这样的脚本语言来处理升级。与此不同的是，Kubernetes
    实际上提供了内置支持，用于应用程序的滚动升级。例如，Kubernetes 的升级可配置为利用额外资源进行更快的无停机滚动，或者执行较慢的滚动来进行金丝雀测试，通过将软件释放给少数用户来减少风险并验证新软件，确保应用程序的新版本是稳定的。Kubernetes
    还支持暂停、恢复和回滚应用程序的版本。
- en: Improved networking model
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 改进的网络模型
- en: Kubernetes mapped a single IP address to a *pod*, which is Kubernetes’s smallest
    unit of container deployment, aggregation, and management. This approach aligned
    the network identity with the application identity and simplified running software
    on Kubernetes.^([2](ch01.html#ch01fn2))
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 将单个 IP 地址映射到一个 *pod*，这是 Kubernetes 最小的容器部署、聚合和管理单元。这种方法使网络身份与应用程序身份保持一致，并简化了在
    Kubernetes 上运行软件的过程。^([2](ch01.html#ch01fn2))
- en: Built-in health-checking support
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的健康检查支持
- en: Kubernetes provided container health-checking and monitoring capabilities that
    reduced the complexity of identifying when failures occur.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了容器健康检查和监控功能，降低了识别故障发生时间的复杂性。
- en: Even with all the innovative capabilities available in Kubernetes, many enterprise
    companies were still hesitant to adopt this technology because it was an open
    source project supported by a single vendor. Enterprise companies are careful
    about which open source projects they are willing to adopt, and they expect open
    source projects like Kubernetes to have multiple vendors contributing to them;
    they also expect open source projects to be meritocracy based with a solid governance
    policy and a level playing field for contributing. In 2015, the Cloud Native Computing
    Foundation (CNCF) was formed to address these issues facing Kubernetes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Kubernetes 提供了许多创新功能，但许多企业公司仍然对采用这项技术持谨慎态度，因为它是由单一供应商支持的开源项目。企业公司对于愿意采纳的开源项目非常谨慎，他们希望像
    Kubernetes 这样的开源项目有多个供应商参与贡献；他们还期望开源项目是基于精英治理并且具有公平竞争的政策。2015 年，云原生计算基金会（CNCF）成立以解决
    Kubernetes 面临的这些问题。
- en: CNCF Accelerates the Growth of the Kubernetes Ecosystem
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNCF 加速 Kubernetes 生态系统的增长
- en: In 2015, the Linux Foundation initiated the creation of the CNCF.^([3](ch01.html#ch01fn3))
    The CNCF’s mission is to make cloud native computing ubiquitous.^([4](ch01.html#ch01fn4))
    In support of this new foundation, Google donated Kubernetes to the CNCF to serve
    as its seed technology. With Kubernetes as the core of its ecosystem, the CNCF
    has grown to more than 440 member companies, including Google Cloud, IBM Cloud,
    Red Hat, Amazon Web Services (AWS), Docker, Microsoft Azure, VMware, Intel, Huawei,
    Cisco, Alibaba Cloud, and many more.^([5](ch01.html#ch01fn5)) In addition, the
    CNCF ecosystem has grown to hosting 26 open source projects, including Prometheus,
    Envoy, gRPC, etcd, and many others. Finally, the CNCF nurtures several early-stage
    projects and has had eight projects accepted into its Sandbox program for emerging
    technologies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2015 年，Linux 基金会发起了 CNCF 的创建。^([3](ch01.html#ch01fn3)) CNCF 的使命是使云原生计算普及化。^([4](ch01.html#ch01fn4))
    为了支持这个新基金会，谷歌将 Kubernetes 捐赠给 CNCF 作为其种子技术。以 Kubernetes 为生态系统核心，CNCF 已经发展到拥有超过
    440 家成员公司，包括谷歌云、IBM 云、红帽、亚马逊网络服务（AWS）、Docker、微软 Azure、VMware、英特尔、华为、思科、阿里云等。^([5](ch01.html#ch01fn5))
    此外，CNCF 生态系统已经托管了 26 个开源项目，包括 Prometheus、Envoy、gRPC、etcd 等。最后，CNCF 还培育了几个早期项目，并已有八个项目被接纳到其用于新兴技术的
    Sandbox 计划中。
- en: With the weight of the vendor-neutral CNCF foundation behind it, Kubernetes
    has grown to having more than 3,200 contributors annually from a wide range of
    industries.^([6](ch01.html#ch01fn6)) In addition to hosting several cloud native
    projects, the CNCF provides training, a Technical Oversight Board, a Governing
    Board, a community infrastructure lab, and several certification programs to boost
    the ecosystem for Kubernetes and related projects. As a result of these efforts,
    there are currently over one hundred certified distributions of Kubernetes. One
    of the most popular distributions of Kubernetes, particularly for enterprise customers,
    is Red Hat’s OpenShift Kubernetes. In the next section, we introduce OpenShift
    and give an overview of the key benefits it provides for developers and IT operations
    teams.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在厂商中立的 CNCF 基金会的支持下，Kubernetes 每年的贡献者已经超过 3,200 人，来自各行各业。^([6](ch01.html#ch01fn6))
    除了托管几个云原生项目外，CNCF 还提供培训、技术监督委员会、治理委员会、社区基础设施实验室以及几个认证项目，以促进 Kubernetes 和相关项目的生态系统。由于这些努力，目前已经有超过一百个经过认证的
    Kubernetes 发行版。其中，最受欢迎的 Kubernetes 发行版之一，尤其是企业客户，就是红帽的 OpenShift Kubernetes。在接下来的部分中，我们将介绍
    OpenShift，并概述它为开发人员和 IT 运营团队提供的关键优势。
- en: 'OpenShift: Red Hat’s Distribution of Kubernetes'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift：红帽的 Kubernetes 发行版
- en: Although many companies have contributed to Kubernetes, the contributions from
    Red Hat are particularly noteworthy. Red Hat has been a part of the Kubernetes
    ecosystem from its inception as an open source project, and it continues to serve
    as the second-largest contributor to Kubernetes. Based on this hands-on expertise
    with Kubernetes, Red Hat provides its own distribution of Kubernetes that it refers
    to as *OpenShift*. OpenShift is the most broadly deployed distribution of Kubernetes
    across the enterprise. It provides a 100% conformant Kubernetes platform and supplements
    it with a variety of tools and capabilities focused on improving the productivity
    of developers and IT operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多公司都为 Kubernetes 做出了贡献，但红帽的贡献尤为引人注目。红帽从 Kubernetes 作为开源项目诞生之初就成为其生态系统的一部分，并且一直是
    Kubernetes 的第二大贡献者。基于对 Kubernetes 的实践经验，红帽提供了自己的 Kubernetes 发行版，称为*OpenShift*。OpenShift
    是企业中部署最广泛的 Kubernetes 发行版。它提供了一个符合标准的 Kubernetes 平台，并通过各种工具和功能来提高开发人员和 IT 运营的生产力。
- en: OpenShift was originally released in 2011.^([7](ch01.html#ch01fn7)) At that
    time, it had its own platform-specific container runtime environment.^([8](ch01.html#ch01fn8))
    In early 2014, the Red Hat team met with the container orchestration team at Google
    and learned about a new container orchestration project that eventually became
    Kubernetes. The Red Hat team was incredibly impressed with Kubernetes, and OpenShift
    was rewritten to use Kubernetes as its container orchestration engine. As a result
    of these efforts, OpenShift was able to deliver a 100% conformant Kubernetes platform
    as part of its version 3 release in June 2015.^([9](ch01.html#ch01fn9))
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 最初发布于 2011 年。[^7] 那时，它有自己的平台特定的容器运行时环境。[^8] 2014 年初，红帽团队与谷歌的容器编排团队会面，了解到了一个新的容器编排项目，最终成为
    Kubernetes。红帽团队对 Kubernetes 非常印象深刻，因此 OpenShift 被重写以使用 Kubernetes 作为其容器编排引擎。由于这些努力，OpenShift
    能够在其 2015 年 6 月的版本 3 发布中交付一个完全符合标准的 Kubernetes 平台。[^9]
- en: The Red Hat OpenShift Container Platform is Kubernetes with additional supporting
    capabilities to make it operational for enterprise needs. The Kubernetes community
    provides fixes for releases for a period of up to 12 months. OpenShift differentiates
    itself from other distributions by providing long-term support (three or more
    years) for major Kubernetes releases, security patches, and enterprise support
    contracts that cover both the operating system and the OpenShift Kubernetes platform.
    Red Hat Enterprise Linux (RHEL) has long been a de facto distribution of Linux
    for organizations large and small. Red Hat OpenShift Container Platform builds
    on RHEL to ensure consistent Linux distributions from the host operating system
    through all containerized functions on the cluster. In addition to all these benefits,
    OpenShift enhances Kubernetes by supplementing it with a variety of tools and
    capabilities focused on improving the productivity of both developers and IT operations.
    The following sections describe these benefits.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 红帽 OpenShift 容器平台是 Kubernetes 带有额外支持功能的实现，使其符合企业需求。Kubernetes 社区为发布提供长达 12 个月的修复补丁支持。OpenShift
    通过提供长期支持（三年或更长时间）的主要 Kubernetes 发布版本、安全补丁以及覆盖操作系统和 OpenShift Kubernetes 平台的企业支持合同，使其在各个分布中区别于其他发行版。红帽企业
    Linux（RHEL）长期以来一直是各大小组织的事实上 Linux 发行版。红帽 OpenShift 容器平台在 RHEL 的基础上构建，以确保从主机操作系统到集群上所有容器化功能的一致
    Linux 发行。除了所有这些好处之外，OpenShift 通过提供各种工具和能力来增强 Kubernetes，重点是提高开发人员和 IT 运营的生产力。以下各节描述了这些好处。
- en: Benefits of OpenShift for Developers
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者的 OpenShift 好处
- en: 'While Kubernetes has a lot of functionality for provisioning and managing container
    images, it does not provide much support for creating new images from base images,
    pushing images to registries, or identifying when new versions become available.
    In addition, the networking support provided by Kubernetes can be quite complicated
    to use. To fill these gaps, OpenShift offers several benefits to developers beyond
    those provided by the core Kubernetes platform:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Kubernetes 在为容器镜像的供应和管理提供了许多功能，但它并未提供太多支持来自基础镜像创建新镜像、将镜像推送到注册表或识别新版本可用的功能。此外，Kubernetes
    提供的网络支持使用起来可能相当复杂。为了填补这些空白，OpenShift 为开发者提供了超越核心 Kubernetes 平台所提供的几个优势：
- en: Source-to-Image
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 源到镜像
- en: When using basic Kubernetes, the cloud native application developer is responsible
    for creating their own container images. Typically, this involves finding the
    proper base image and creating a `Dockerfile` with all the necessary commands
    for taking a base image and adding in the developer’s code to create an assembled
    image that Kubernetes can deploy. This requires the developer to learn a variety
    of Docker commands that are used for image assembly. With its Source-to-Image
    (S2I) capability, OpenShift is able to handle merging the cloud native developer’s
    code into the base image. In many cases, S2I can be configured such that all the
    developer needs to do is commit their changes to a Git repository, and S2I will
    see the updated changes and merge them with a base image to create a new assembled
    image for deployment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基本 Kubernetes 时，云原生应用程序开发人员负责创建自己的容器镜像。通常，这涉及找到合适的基础镜像，并创建一个包含所有必要命令的 `Dockerfile`，以便将基础镜像与开发人员的代码合并，创建一个
    Kubernetes 可以部署的组装镜像。这要求开发人员学习一系列用于镜像组装的 Docker 命令。通过其源码到镜像（S2I）能力，OpenShift 能够处理将云原生开发人员的代码合并到基础镜像中。在许多情况下，可以配置
    S2I，使开发人员只需将其更改提交到 Git 仓库，S2I 将看到更新的更改，并将其与基础镜像合并以创建新的组装镜像以供部署。
- en: Push images to registries
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 推送镜像到注册表
- en: Another key step that must be performed by the cloud native developer when using
    basic Kubernetes is storing newly assembled container images in an image registry
    such as Docker Hub. In this case, the developer needs to create and manage the
    repository. In contrast, OpenShift provides its own private registry and developers
    can use that option, or S2I can be configured to push assembled images to third-party
    registries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当云原生开发人员在基本 Kubernetes 中使用时，必须执行的另一个关键步骤是将新组装的容器镜像存储在像 Docker Hub 这样的镜像注册表中。在这种情况下，开发人员需要创建和管理仓库。相比之下，OpenShift
    提供了自己的私有注册表，开发人员可以选择使用该选项，或者可以配置 S2I 将组装后的镜像推送到第三方注册表。
- en: Image streams
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图像流
- en: When developers create cloud native applications, the development effort results
    in a large number of configuration changes, as well as changes to the container
    image of the application. To address this complexity, OpenShift provides the image
    stream functionality, which monitors for configuration or image changes and performs
    automated builds and deployments based on the change events. This feature takes
    the burden off the developer of having to perform these steps manually whenever
    changes occur.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员创建云原生应用程序时，开发工作会导致大量配置更改，以及对应用程序容器镜像的更改。为了解决这种复杂性，OpenShift 提供了图像流功能，该功能监视配置或图像更改，并根据更改事件执行自动构建和部署。这一功能减轻了开发人员在发生更改时手动执行这些步骤的负担。
- en: Base image catalog
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基础镜像目录
- en: OpenShift provides a base image catalog with a large number of useful base images
    for a variety of tools and platforms, such as WebSphere Liberty, JBoss, PHP, Redis,
    Jenkins, Python, .NET, MariaDB, and many others. The catalog provides trusted
    content that is packaged from known source code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 提供了一个基础镜像目录，其中包含大量有用的基础镜像，适用于各种工具和平台，如 WebSphere Liberty、JBoss、PHP、Redis、Jenkins、Python、.NET、MariaDB
    等。该目录提供了来自已知源代码打包的受信内容。
- en: Routes
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 路由
- en: Networking in base Kubernetes can be quite complicated to configure. OpenShift
    has a route construct that interfaces with Kubernetes services and is responsible
    for adding Kubernetes services to an external load balancer. Routes also provide
    readable URLs for applications and a variety of load-balancing strategies to support
    several deployment options, such as blue-green, canary, and A/B testing deployments.^([10](ch01.html#ch01fn10))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础 Kubernetes 中配置网络可能会相当复杂。OpenShift 具有路由结构，与 Kubernetes 服务进行交互，并负责将 Kubernetes
    服务添加到外部负载均衡器中。路由还为应用程序提供可读的 URL，并提供多种负载均衡策略，以支持蓝绿、金丝雀和A/B测试部署等多种部署选项。^([10](ch01.html#ch01fn10))
- en: While OpenShift has a large number of benefits for developers, its greatest
    differentiators are the benefits it gives IT operations. In the next section,
    we describe several of the core capabilities for automating the day-to day-operations
    of running OpenShift in production.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 OpenShift 对开发人员有很多好处，但其最大的差异化优势在于它为 IT 运维提供的好处。在下一节中，我们描述了运行 OpenShift 在生产环境中自动化日常运营的几个核心能力。
- en: Benefits of OpenShift for IT Operations
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift 对 IT 运维的益处
- en: 'In May 2019, Red Hat announced the release of OpenShift 4.^(11) Red Hat acquired
    CoreOS, which had a very automated approach to managing Kubernetes’s life-cycle
    behavior and was an early advocate of the “operator” concept. This new version
    of OpenShift was completely rewritten to build on capabilities from CoreOS’s innovative
    management practices and OpenShift 3’s reputation for reliability, which dramatically
    improved how the OpenShift platform is installed, upgraded, and managed.^([11](ch01.html#ch01fn11))
    To deliver these significant life-cycle improvements, OpenShift heavily used the
    latest Kubernetes innovations and best practices for automating the management
    of resources in its architecture. As a result of these efforts, OpenShift 4 is
    able to deliver the following benefits for IT operations:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年5月，Red Hat宣布发布OpenShift 4。^(11) Red Hat收购了CoreOS，后者对管理Kubernetes的生命周期行为具有非常自动化的方法，并且早期倡导“运营者”概念。这个新版本的OpenShift完全重写，借鉴了CoreOS创新的管理实践和OpenShift
    3在可靠性方面的声誉，大大改善了OpenShift平台的安装、升级和管理方式。^([11](ch01.html#ch01fn11)) 为了提供这些重要的生命周期改进，OpenShift在其架构中大量使用了最新的Kubernetes创新和最佳实践来自动化管理资源。因此，OpenShift
    4能够为IT运维带来以下好处：
- en: Automated installation
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化安装
- en: OpenShift 4 supports an innovative installation approach that is automated,
    reliable, and repeatable.^([12](ch01.html#ch01fn12)) Additionally, the OpenShift
    4 installation process supports full stack automated deployments and can handle
    installing the complete infrastructure, including components like DNS and the
    VM.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 4支持创新的自动化安装方法，可靠且可重复。^([12](ch01.html#ch01fn12)) 此外，OpenShift 4安装过程支持完全堆栈的自动化部署，并能处理安装完整基础设施，包括DNS和虚拟机等组件。
- en: Automated operating system and OpenShift platform updates
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化操作系统和OpenShift平台更新
- en: OpenShift is tightly integrated with the lightweight RHEL CoreOS operating system,
    which itself is optimized for running OpenShift and cloud native applications.
    Thanks to the tight coupling of OpenShift with a specific version of RHEL CoreOS,
    the OpenShift platform is able to manage updating the operating system as part
    of its cluster management operations. The key value of this approach for IT operations
    is that it supports automated, self-managing, over-the-air updates. This enables
    OpenShift to support cloud native and hands-free operations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift与轻量级的RHEL CoreOS操作系统紧密集成，后者专为运行OpenShift和云原生应用程序进行了优化。由于OpenShift与特定版本的RHEL
    CoreOS紧密耦合，OpenShift平台能够在其集群管理操作中管理操作系统更新。对IT运维的关键价值在于，它支持自动化、自我管理的远程更新。这使得OpenShift能够支持云原生和无人值守的运维操作。
- en: Automated cluster size management
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化集群大小管理
- en: OpenShift supports the ability to automatically increase or decrease the size
    of the cluster it is managing. Like all Kubernetes clusters, an OpenShift cluster
    has a certain number of worker nodes on which the container applications are deployed.
    In a typical Kubernetes cluster, adding worker nodes is an out-of-band operation
    that IT operations must handle manually. In contrast, OpenShift provides a component
    called the *machine operator* that is capable of automatically adding worker nodes
    to a cluster. An IT operator can use a `MachineSet` object to declare the number
    of machines needed by the cluster, and OpenShift will automatically perform the
    provisioning and installation of new worker nodes to achieve the desired state.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift支持自动增减其管理的集群大小。与所有Kubernetes集群一样，OpenShift集群有一定数量的工作节点，用于部署容器应用程序。在典型的Kubernetes集群中，增加工作节点是一个IT运维必须手动处理的操作。相比之下，OpenShift提供了一个称为*机器操作器*的组件，能够自动向集群添加工作节点。IT运维人员可以使用`MachineSet`对象声明集群所需的机器数量，OpenShift将自动执行新工作节点的供应和安装，以达到所需状态。
- en: Automated cluster version management
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化集群版本管理
- en: OpenShift, like all Kubernetes distributions, is composed of a large number
    of components. Each of these components has its own version number. To manage
    updating each of these components, OpenShift relies on a Kubernetes innovation
    called the *operator construct*. OpenShift uses a cluster version number to identify
    which version of OpenShift is running, and this cluster version number denotes
    which versions of the individual OpenShift platform components need to be installed.
    With its automated cluster version management, OpenShift is able to install the
    proper versions of all these components automatically to ensure that it is properly
    updated when the cluster is updated to a new version.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift，像所有的Kubernetes发行版一样，由大量组件组成。每个组件都有自己的版本号。为了管理这些组件的更新，OpenShift依赖于Kubernetes创新称为*operator
    construct*。OpenShift使用集群版本号来标识正在运行的OpenShift版本，该集群版本号表示需要安装哪些个别OpenShift平台组件的版本。通过其自动化的集群版本管理，OpenShift能够在集群更新到新版本时自动安装所有这些组件的适当版本，以确保更新正确进行。
- en: Multicloud management support
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 多云管理支持
- en: Many enterprise customers that use OpenShift have multiple clusters, and these
    clusters are deployed across multiple clouds or in multiple data centers. To simplify
    the management of multiple clusters, OpenShift 4 has introduced a new unified
    cloud console that allows customers to view and manage multiple OpenShift clusters.^([13](ch01.html#ch01fn13))
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 许多使用OpenShift的企业客户拥有多个集群，这些集群部署在多个云中或多个数据中心中。为了简化多个集群的管理，OpenShift 4引入了一个新的统一云控制台，允许客户查看和管理多个OpenShift集群。^([13](ch01.html#ch01fn13))
- en: As we will see later in this book, OpenShift and the capabilities it provides
    become extremely prominent when it’s time to run in production and IT operators
    need to address operational and security-related concerns.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本书后面看到的那样，当到达运行和IT运营人员需要解决运营和安全相关问题的时候，OpenShift及其提供的功能变得非常显著。
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we gave an overview of Kubernetes and OpenShift, including
    the historical origins of both platforms. We then presented the key benefits provided
    by both Kubernetes and OpenShift that have driven the huge growth in popularity
    of these platforms. This has helped us have a greater appreciation for the value
    that Kubernetes and OpenShift provide to cloud native application developers and
    IT operations teams. Thus, it is no surprise that these platforms are experiencing
    explosive growth across a variety of industries. In [Chapter 2](ch02.html#getting_started_with_openshift_and_kuber),
    we will build a solid foundational overview of Kubernetes and OpenShift that presents
    the Kubernetes architecture, discusses how to get Kubernetes and OpenShift production
    environments up and running, and introduces several key Kubernetes and OpenShift
    concepts that are critical to running successfully in production.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了Kubernetes和OpenShift，包括这两个平台的历史起源。然后，我们介绍了Kubernetes和OpenShift提供的主要优势，这些优势推动了这些平台在全球范围内的巨大增长。这帮助我们更加重视Kubernetes和OpenShift为云原生应用开发者和IT运营团队提供的价值。因此，毫不奇怪这些平台在多个行业中经历了爆炸式增长。在[第2章](ch02.html#getting_started_with_openshift_and_kuber)，我们将建立一个扎实的基础概述Kubernetes和OpenShift，介绍Kubernetes架构，讨论如何在生产环境中运行Kubernetes和OpenShift，并介绍几个关键的Kubernetes和OpenShift概念，这些对成功运行至关重要。
- en: '^([1](ch01.html#ch01fn1-marker)) Brendan Burns et al., “Borg, Omega, and Kubernetes:
    Lessons Learned from Three Container-Management Systems over a Decade,” *ACM Queue*
    14 (2016): 70–93, [*http://bit.ly/2vIrL4S*](http://bit.ly/2vIrL4S).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#ch01fn1-marker)) Brendan Burns等，“Borg、Omega和Kubernetes：从十年三个容器管理系统的经验中汲取教训”，*ACM
    Queue* 14（2016年）：70–93，[*http://bit.ly/2vIrL4S*](http://bit.ly/2vIrL4S)。
- en: '^([2](ch01.html#ch01fn2-marker)) Brendan Burns et al., “Borg, Omega, and Kubernetes:
    Lessons Learned from Three Container-Management Systems over a Decade,” *ACM Queue*
    14 (2016): 70–93, [*http://bit.ly/2vIrL4S*](http://bit.ly/2vIrL4S).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#ch01fn2-marker)) Brendan Burns等，“Borg、Omega和Kubernetes：从十年三个容器管理系统的经验中汲取教训”，*ACM
    Queue* 14（2016年）：70–93，[*http://bit.ly/2vIrL4S*](http://bit.ly/2vIrL4S)。
- en: ^([3](ch01.html#ch01fn3-marker)) Steven J. Vaughan-Nicholls, “Cloud Native Computing
    Foundation Seeks to Forge Cloud and Container Unity,” *ZDNet* (July 21, 2015),
    [*https://oreil.ly/WEoE0*](https://oreil.ly/WEoE0).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#ch01fn3-marker)) Steven J. Vaughan-Nicholls，“云原生计算基金会寻求在云和容器领域实现统一”，*ZDNet*（2015年7月21日），[*https://oreil.ly/WEoE0*](https://oreil.ly/WEoE0)。
- en: ^([4](ch01.html#ch01fn4-marker)) Linux Foundation, CNCF Charter (updated December
    10, 2018), [*https://oreil.ly/tHHvr*](https://oreil.ly/tHHvr).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.html#ch01fn4-marker)) Linux Foundation，CNCF Chapter（更新于2018年12月10日），[*https://oreil.ly/tHHvr*](https://oreil.ly/tHHvr)。
- en: ^([5](ch01.html#ch01fn5-marker)) The [CNCF Members page](https://oreil.ly/Tj3Vw)
    provides more details on membership growth of the CNCF.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.html#ch01fn5-marker)) [CNCF 会员页面](https://oreil.ly/Tj3Vw)提供了 CNCF
    成员增长的更多详情。
- en: ^([6](ch01.html#ch01fn6-marker)) See the [Kubernetes Companies Table Dashboard](https://oreil.ly/mkSTm)
    for a current list.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.html#ch01fn6-marker)) 查看[Kubernetes 公司表格仪表板](https://oreil.ly/mkSTm)以获取当前列表。
- en: ^([7](ch01.html#ch01fn7-marker)) Joe Fernandes, “Why Red Hat Chose Kubernetes
    for OpenShift,” Red Hat OpenShift Blog (November 7, 2016), [*https://oreil.ly/r66GM*](https://oreil.ly/r66GM).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch01.html#ch01fn7-marker)) Joe Fernandes，“为什么 Red Hat 选择 Kubernetes 作为
    OpenShift”，红帽 OpenShift 博客（2016年11月7日），[*https://oreil.ly/r66GM*](https://oreil.ly/r66GM)。
- en: ^([8](ch01.html#ch01fn8-marker)) Anton McConville and Olaph Wagoner, “A Brief
    History of Kubernetes, OpenShift, and IBM,” IBM Developer Blog (August 1, 2019),
    [*https://oreil.ly/IugtP*](https://oreil.ly/IugtP).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch01.html#ch01fn8-marker)) Anton McConville 和 Olaph Wagoner，“Kubernetes、OpenShift
    和 IBM 的简史”，IBM Developer 博客（2019年8月1日），[*https://oreil.ly/IugtP*](https://oreil.ly/IugtP)。
- en: ^([9](ch01.html#ch01fn9-marker)) “Red Hat Delivers OpenShift Enterprise 3 to
    Power a New Web-Scale Distributed Application Platform” [press release], Red Hat
    (June 24, 2015), [*https://oreil.ly/jlane*](https://oreil.ly/jlane).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch01.html#ch01fn9-marker)) “Red Hat 提供 OpenShift Enterprise 3 以支持新的 Web
    规模分布式应用平台” [新闻稿]，红帽（2015年6月24日），[*https://oreil.ly/jlane*](https://oreil.ly/jlane)。
- en: ^([10](ch01.html#ch01fn10-marker)) For more details on OpenShift routes, please
    see [Using Route-Based Deployment Strategies](https://oreil.ly/hmpJz) in the OpenShift
    documentation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch01.html#ch01fn10-marker)) 欲了解更多有关 OpenShift 路由的详情，请参阅[使用基于路由的部署策略](https://oreil.ly/hmpJz)的
    OpenShift 文档。
- en: '^([11](ch01.html#ch01fn11-marker)) Joe Fernandes, “Introducing Red Hat OpenShift
    4: Kubernetes for the Enterprise,” Red Hat OpenShift Blog (May 8, 2019), [*https://oreil.ly/yNb8s*](https://oreil.ly/yNb8s).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ^([11](ch01.html#ch01fn11-marker)) Joe Fernandes，“介绍 Red Hat OpenShift 4：企业级
    Kubernetes”，红帽 OpenShift 博客（2019年5月8日），[*https://oreil.ly/yNb8s*](https://oreil.ly/yNb8s)。
- en: ^([12](ch01.html#ch01fn12-marker)) Christian Hernandez, “OpenShift 4.1 Bare
    Metal Install Quickstart,” Red Hat OpenShift Blog (July 31, 2019), [*https://oreil.ly/yz4pR*](https://oreil.ly/yz4pR).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ^([12](ch01.html#ch01fn12-marker)) Christian Hernandez，“OpenShift 4.1 Bare Metal
    Install Quickstart”，红帽 OpenShift 博客（2019年7月31日），[*https://oreil.ly/yz4pR*](https://oreil.ly/yz4pR)。
- en: '^([13](ch01.html#ch01fn13-marker)) Fernandes, “Introducing Red Hat OpenShift
    4: Kubernetes for the Enterprise.”'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ^([13](ch01.html#ch01fn13-marker)) Fernandes，“介绍 Red Hat OpenShift 4：企业级 Kubernetes”。
