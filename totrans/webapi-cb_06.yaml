- en: Chapter 6\. Observing DOM Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter looks at three types of *observers* that the browser gives you
    for watching DOM elements: `MutationObserver`, `IntersectionObserver`, and `ResizeObserver`.
    These observer objects can watch DOM elements and notify you of certain changes
    or events.'
  prefs: []
  type: TYPE_NORMAL
- en: Observers are created with a callback function. This function is called whenever
    relevant events occur in the page. It’s called with one or more entries that contain
    information about what occurred. This just creates the observer. To actually start
    watching an element, you need to call `observe` on the observer, passing the element
    you want to observe and an optional set of options.
  prefs: []
  type: TYPE_NORMAL
- en: MutationObserver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MutationObserver` watches for changes in the DOM for an element. You can watch
    for changes to:'
  prefs: []
  type: TYPE_NORMAL
- en: Child elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the browser observes is defined in an options object passed to the `observe`
    function. You can also give an optional `subtree` option when observing an element.
    This extends the monitoring of child elements, attributes, and/or text content
    to all descendant nodes (instead of just the element and its direct children).
  prefs: []
  type: TYPE_NORMAL
- en: When a mutation occurs that you are interested in, your callback gets executed
    with an array of `MutationEntry` objects that describe the mutation that just
    occurred.
  prefs: []
  type: TYPE_NORMAL
- en: ResizeObserver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As its name suggests, `ResizeObserver` notifies you when an element’s size changes.
    When the size changes, your callback is called with information about what was
    resized. The entries contain information about the element’s new size.
  prefs: []
  type: TYPE_NORMAL
- en: IntersectionObserver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`IntersectionObserver` watches for changes in an element’s position relative
    to a viewport. The viewport can be a scrollable element or the browser window
    itself. If any portion of the child element is visible within the scrollable area,
    it is said to be *intersecting* the ancestor element. [Figure 6-1](#figure6-1)
    shows elements on a scrollable page.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Elements on a scrollable page. Element 1 is not intersecting, element 2 is
    partially intersecting, and element 3 is fully intersecting.](assets/wacb_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Element 1 is not intersecting, element 2 is partially intersecting,
    and element 3 is fully intersecting
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`IntersectionObserver` uses the concept of an *intersection ratio*—what portion
    of the element is actually intersecting the root. If the element is fully visible,
    it has a ratio of 1\. If it is completely off-screen, it has a ratio of 0\. If
    it is exactly half visible and half invisible, it has a ratio of 0.5\. The entries
    passed to the callback function have an `intersectionRatio` property specifying
    the current intersection ratio.'
  prefs: []
  type: TYPE_NORMAL
- en: When you create an `IntersectionObserver`, you can also specify a *threshold*.
    This defines when the observer fires. By default, the threshold is 0\. This means
    the observer fires as soon as the element becomes partially visible, even if it’s
    just a single pixel. A threshold of 1 only fires when the element becomes completely
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy Loading an Image When Scrolled into View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to defer loading of an image until its position is scrolled into view.
    This is sometimes called *lazy loading*.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `IntersectionObserver` on the `<img>` element and wait until it intersects
    with the viewport. Once it enters the viewport, set the `src` attribute to start
    loading the image (see [Example 6-1](#code_lazyLoadImage)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1\. Lazily loading an image with `IntersectionObserver`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an `IntersectionObserver`, you give it a callback function.
    Every time an element enters or exits, the observer calls this function with information
    about the element’s intersection status.
  prefs: []
  type: TYPE_NORMAL
- en: The observer may be observing multiple elements whose intersection could change
    at the same time, so the callback is passed an array of elements. In [Example 6-1](#code_lazyLoadImage),
    the observer is only observing a single image element, so the array only has one
    element.
  prefs: []
  type: TYPE_NORMAL
- en: If multiple elements enter (or leave) the viewport at the same time, there is
    one entry for each element.
  prefs: []
  type: TYPE_NORMAL
- en: You want to check the `isIntersecting` property to determine if it’s time to
    load the image. This becomes `true` when the element becomes even partially visible.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you have to tell the observer what element to watch by calling `observe`
    on the observer object. This starts watching the element.
  prefs: []
  type: TYPE_NORMAL
- en: Once you scroll down enough so that the element enters the viewport area, the
    observer calls the callback. The callback sets the URL of the image, then stops
    listening by calling `disconnect`. The callback stops listening because once the
    image is loaded, there is no need to continue observing the element.
  prefs: []
  type: TYPE_NORMAL
- en: Before `IntersectionObserver`, there weren’t many options to do this. One option
    would be to listen for the parent’s `scroll` event, and then calculate if the
    element is in the viewport by comparing the parent’s and child’s bounding rectangles.
  prefs: []
  type: TYPE_NORMAL
- en: This, of course, is not very performant. It’s also generally considered bad
    practice. You’d have to throttle or debounce this check to prevent it from running
    on every scroll operation.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping IntersectionObserver with a Promise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a `Promise` that resolves once an element enters the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wrap an `IntersectionObserver` in a `Promise`. Once the element intersects its
    parent, resolve the `Promise` (see [Example 6-2](#example6-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-2\. Wrapping an `IntersectionObserver` with a `Promise`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the observer executes your callback with an entry that indicates the element
    is intersecting, you can resolve the `Promise`.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Example 6-3](#example6-3), you could use this approach to lazily
    load an image, similar to [“Lazy Loading an Image When Scrolled into View”](#recipe_lazyImage).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-3\. Using the `waitForElement` helper to lazily load an image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you have resolved the `Promise`, the calling code can be sure the element
    is in the viewport. At that point the `lazyLoad` function sets the `src` attribute
    on the image.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically Pause and Play a Video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have a `<video>` element in a scrollable container. When the video is playing,
    you want to automatically pause it if it scrolls out of view.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `IntersectionObserver` to watch the video element. Once it no longer intersects
    the viewport, pause it. Later, if it reenters the viewport, resume it (see [Example 6-4](#code_autoPlay)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-4\. Automatically pausing and resuming a video
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This observer watches the `video` element. As soon as it scrolls out of view,
    it is paused. Later, if you scroll it back into view, it is resumed.
  prefs: []
  type: TYPE_NORMAL
- en: Animating Changes in Height
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have an element whose contents may change. If the content changes, you want
    a smooth transition in the height.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a `MutationObserver` to watch the element’s children. If the element adds,
    removes, or changes any child elements, use a CSS transition to smoothly animate
    the height change. Because you can’t animate an element with an `auto` height,
    this requires some extra work to calculate explicit heights between which to animate
    (see [Example 6-5](#example6-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-5\. Animating an element’s height due to child element changes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with other observers, you need to pass a callback function when you create
    a `MutationObserver`. The observer calls this function whenever an observed element
    changes (which changes trigger the callback, specifically, depends on the options
    passed to `observer.observe`). When your app causes any changes to the element’s
    child list (adding, removing, or modifying elements), the callback recalculates
    the height to accommodate the new content.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot going on here, mostly because the browser won’t let you animate
    an element with a `height` of `auto`. To make the animation work, you have to
    use explicit values for the start and end heights.
  prefs: []
  type: TYPE_NORMAL
- en: 'When first observing the element, you calculate its height by reading the `offset​Height`
    property. The function then explicitly sets this height on the element. This takes
    care of the `height: auto` for now.'
  prefs: []
  type: TYPE_NORMAL
- en: When the element’s children change, the parent won’t resize automatically because
    it now has an explicit height set. The observer callback calculates the new height.
    With an explicit height set, the `offsetHeight` property has the same value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To measure the *new* height, you must first set the height *back* to `auto`.
    Once you do this, `offsetHeight` gives the new height value. However, recall that
    you can’t animate from `height: auto`. Before updating the height, it has to be
    set from `auto` back to what it was *previously* set to.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point you have the new height. The actual height update goes in a call
    to `requestAnimationFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: This method of calculating the heights adds a lot of extra code. [Chapter 8](ch08.html#ch_webAnimationsApi)
    covers the Web Animations API, which makes these types of animations less painful.
  prefs: []
  type: TYPE_NORMAL
- en: Change an Element’s Content Based on Size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show different content within an element depending on its size.
    For example, you may want to handle the case when the element is very wide.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a `ResizeObserver` on the element and update the content if the size goes
    above or below your defined threshold (see [Example 6-6](#example6-6)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-6\. Updating an element’s content when it is resized
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ResizeObserver` calls the callback that you pass every time the element’s
    size changes. The observer also calls it initially when the element is first observed.
  prefs: []
  type: TYPE_NORMAL
- en: The callback is called with an array of `ResizeObserverEntry` objects—here,
    where you’re only observing one element, it’s typically going to just be one entry.
    The `entry` object has a few properties, including `contentRect`, which defines
    the bounding rectangle of the element. From there you can get the width.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, when the element is resized, the observer callback changes its
    text to indicate the current width.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Use care when working with `ResizeObserver` to ensure the code in your callback
    doesn’t trigger the observer again. Such a callback can cause an infinite loop
    of `ResizeObserver` callbacks. This can happen if you make changes to the element
    within the callback that cause its size to change again.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a Transition When an Element Scrolls into View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have content that is not initially shown. When the content enters the viewport,
    you want to show it with an animated transition. For example, when an image scrolls
    into view, you want to make it fade in by transitioning its opacity.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use an `IntersectionObserver` to watch for when the element scrolls into view.
    When it does, apply the animated transition (see [Example 6-7](#example6-7)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-7\. Fading in all images on the page when they scroll into view
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `IntersectionObserver`’s `threshold` option. By default,
    an observer fires as soon as the element becomes visible (a `threshold` of `0`).
    This isn’t ideal here because you want enough of the image to be visible so that
    the user notices the transition. By setting a `threshold` of `0.25`, the observer
    won’t execute the callback until the image becomes at least 25% visible.
  prefs: []
  type: TYPE_NORMAL
- en: The callback also checks to see if the image is actually intersecting; that
    is, if it has become visible. This is necessary because when the observer first
    starts observing an element, it fires immediately. In this case, the images that
    are offscreen are not yet intersecting, so this check prevents them from becoming
    visible too early.
  prefs: []
  type: TYPE_NORMAL
- en: If the entry is intersecting, you can set new styles that trigger an animation
    or transition. In this case, the callback is setting the image’s opacity to 1\.
    To make this effect work, you need to have previously set the opacity to 0 and
    defined a `transition` property of `opacity` (see [Example 6-8](#example6-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-8\. Styling images to fade in
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With this style, the images are invisible. When the observer callback sets the
    opacity to 1, the transition takes effect and you’ll see the image fade in.
  prefs: []
  type: TYPE_NORMAL
- en: You only want to perform this animation once, so once the image is visible you
    don’t need to observe it anymore. You can clean up by calling `observer.unobserve`
    and passing the element to stop observing.
  prefs: []
  type: TYPE_NORMAL
- en: Using Infinite Scrolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to automatically load more data when the user scrolls to the bottom
    of a list without the user having to click a Load More button.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Place an element at the end of the scrollable list and observe it with an `Intersection​Observer`.
    When the element starts intersecting, load more data (see [Example 6-9](#example6-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-9\. Using `IntersectionObserver` for infinite scrolling
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The placeholder element could say Load More, or it can be visually hidden. The
    `IntersectionObserver` watches the placeholder element. Once it enters the viewport,
    the callback starts loading more data. Using this technique, a user can keep scrolling
    and scrolling until they reach the end of the data.
  prefs: []
  type: TYPE_NORMAL
- en: You could make this placeholder a loading spinner. When the user scrolls to
    the bottom of the list, triggering a new request, they’ll see the spinner while
    the new data is loading. This is accurate because with the default threshold of
    0.0, the observer fires just before the user scrolls far enough to see the spinner.
    By this time, the data is already loading, so it’s not an artificial spinner.
  prefs: []
  type: TYPE_NORMAL
- en: When the observer first starts observing, the callback fires immediately. If
    the list is empty, the placeholder is visible, which triggers the code to load
    the first page of data.
  prefs: []
  type: TYPE_NORMAL
