- en: Chapter 3\. A Web Application with Node and Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before implementing our API, we’re going to build a basic server-side web application
    to serve as the basis for the backend of our API. We’ll be using the [Express.js
    framework](https://expressjs.com), a “minimalist web framework for Node.js,” meaning
    that it does not ship with a lot of features, but is highly configurable. We’ll
    be using Express.js as the foundation of our API server, but Express can also
    be used to build fully featured server-side web applications.
  prefs: []
  type: TYPE_NORMAL
- en: User interfaces, such as websites and mobile applications, communicate with
    web servers when they need to access data. This data could be anything from the
    HTML required to render a page in a web browser to the results of a user’s search.
    The client interface communicates with the server using HTTP. The data request
    is sent from the client via HTTP to the web application that is running on the
    server. The web application then processes the request and returns the data to
    the client, again over HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we’ll build a small server-side web application, which will
    be the basis for our API. To do this, we’ll use the Express.js framework to build
    a simple web application that sends a basic request.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you understand the basics of server-side web applications, let’s jump
    in. Within the *src* directory of our API project, create a file named *index.js*
    and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, first we require the `express` dependency and create the `app`
    object, using the imported Express.js module. We then use the `app` object’s `get`
    method to instruct our application to send a response of “Hello World” when a
    user accesses the root URL (`/`). Lastly, we instruct our application to run on
    port 4000\. This will allow us to view the application locally at the URL *http://localhost:4000*.
  prefs: []
  type: TYPE_NORMAL
- en: Now to run the application, type **`node src/index.js`** in your terminal. After
    doing so, you should see a log in your terminal that reads `Listening on port
    4000!`. If that’s the case, you should be able to open a browser window to *http://localhost:4000*
    and see the result in [Figure 3-1](#hello_world).
  prefs: []
  type: TYPE_NORMAL
- en: '![The results of our Hello World server code in the browser](assets/jsev_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. The results of our Hello World server code in the browser
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Nodemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s say that the output of this example doesn’t properly express our
    excitement. We want to change our code so that it adds an exclamation mark to
    our response. Go ahead and do that, changing the `res.send` value to read `Hello
    World!!!`. The full line should now be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you go to your web browser and refresh the page, you’ll notice that the output
    hasn’t changed. This is because any changes we make to our web server require
    us to restart it. To do so, switch back to your terminal and press Ctrl + C to
    stop the server. Now restart it by again typing **`node index.js`**. Now, when
    you navigate back to your browser and refresh the page, you should see the updated
    response.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, stopping and restarting our server for every change can
    quickly become tedious. Thankfully, we can use the Node package `nodemon` to automatically
    restart the server on changes. If you take a look at the project’s *package.json*
    file, you’ll see a `dev` command within the `scripts` object, which instructs
    `nodemon` to watch our *index.js* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: package.json Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a handful of other helper commands within the `scripts` object. We
    will explore those in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to start the application from the terminal, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigating to your browser and refreshing the page, you’ll see that things
    are working as before. To confirm that `nodemon` automatically restarts the server,
    let’s once again update our `res.send` value so that it reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, you should be able to refresh the page in your browser and see the update
    without manually restarting the server.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Port Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently our application is served on port 4000\. This works great for local
    development, but we will need the flexibility to set this to a different port
    number when deploying the application. Let’s take the steps to update this now.
    We’ll start by adding a `port` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This change will allow us to dynamically set the port in the Node environment,
    but fall back to port 4000 when no port is specified. Now let’s adjust our `app.listen`
    code to work with this change and use a template literal to log the correct port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final code should now read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With this, we now have the basics of our web server code up and running. To
    test that everything is working, verify that no errors are present in your console
    and reload your web browser at *http://localhost:4000*.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side web applications are the foundation of API development. In this
    chapter, we built a basic web application using the Express.js framework. When
    developing Node-based web applications, you have a wide array of frameworks and
    tools to choose from. Express.js is a great choice due to its flexibility, community
    support, and maturity as a project. In the next chapter, we’ll turn our web application
    into an API.
  prefs: []
  type: TYPE_NORMAL
