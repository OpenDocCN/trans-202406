- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bryan and I (Thomas) first met during my interview at the San Francisco branch
    for DeNA, a Japanese mobile game development company. Apparently most of the upper
    management was going to say no, but after the two of us hung out at a Node.js
    meetup later that night, Bryan went and convinced them to give me an offer.
  prefs: []
  type: TYPE_NORMAL
- en: While at DeNA, Bryan and I worked on writing reusable Node.js modules so that
    game teams could build out their game servers, combining components as appropriate
    to suit the needs of their game. Performance was something we were always measuring,
    and mentoring game teams on performance was a part of the job; our servers were
    continuously scrutinized by developers in an industry that traditionally relied
    upon C++.
  prefs: []
  type: TYPE_NORMAL
- en: The two of us would work together in other capacities as well. Another such
    role was at a small security startup named Intrinsic where we focused on hardening
    Node.js apps at such a complete and granular level that I doubt the world will
    ever see another product like it. Performance tuning was a huge concern for that
    product as well since customers didn’t want to take a hit to their throughput.
    We spent many hours running benchmarks, poring over flamegraphs, and digging through
    internal Node.js code. Had the worker threads module been available in all the
    versions of Node.js that our customers demanded, I have no doubt we would have
    incorporated it into the product.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also worked together in nonemployment capacities as well. [NodeSchool
    SF](https://oreil.ly/TNS5w) is one such example wherein we both volunteered to
    teach others how to use JavaScript and create Node.js programs. We have also spoken
    at many of the same conferences and meetups.
  prefs: []
  type: TYPE_NORMAL
- en: Both of your authors have a passion for JavaScript and Node.js, and for teaching
    them to others and eliminating misconceptions. When we realized there was such
    an extreme lack of documentation about building multithreaded JavaScript applications,
    we knew what we had to do. This book was born from our desire to not only educate
    others about the capabilities of JavaScript, but also to help prove that platforms
    like Node.js are just as capable as any other when it comes to building performant
    services that utilize the available hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Target Audience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ideal reader of this book is an engineer who has been writing JavaScript
    for a few years, and who doesn’t necessarily have experience with writing multithreaded
    applications or even experience with more traditionally multithreaded languages
    like C++ or Java. We do include some example C application code, as a sort of
    multithreaded lingua franca, but it’s not something that the reader is expected
    to be familiar with or even understand.
  prefs: []
  type: TYPE_NORMAL
- en: If you do have experience with such languages, that’s great, and this book will
    help you understand the JavaScript equivalent to the functionality provided by
    whatever language you may be familiar with. On the other hand, if you’ve only
    written code using JavaScript, then this book is also for you. We include information
    across multiple layers of learning; this includes both low-level API references,
    high-level patterns, and plenty of technical tangents in between to help fill
    in any gaps.
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps the most exuberant goal of this book is to bring knowledge to the community
    that it’s possible to build multithreaded applications using JavaScript. Traditionally,
    JavaScript code was constrained to a single core, and indeed there are many Twitter
    threads and forum posts describing the language as such. With a title like *Multithreaded
    JavaScript*, we hope to completely dispel the notion that JavaScript applications
    are confined to a single core.
  prefs: []
  type: TYPE_NORMAL
- en: At a more concrete level, the goal is to teach you, the reader, several aspects
    about writing multithreaded JavaScript applications. By the time you’re done reading
    this book you’ll understand the various web worker APIs provided in browsers,
    their strengths and weaknesses, and when to use which. As far as Node.js goes,
    you’ll understand the worker threads module and how its APIs compare to those
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book focuses on two approaches to building multithreaded applications:
    one using message passing and the other using shared memory. By reading this book
    you’ll understand the APIs used to implement each, when you might want to use
    one approach or the other, and in which situations they can be combined—and you’ll
    even get your hands dirty with some high-level patterns built upon these approaches.'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/MultithreadedJSBook/code-samples*](https://github.com/MultithreadedJSBook/code-samples).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Multithreaded
    JavaScript* by Thomas Hunter II and Bryan English (O’Reilly). Copyright 2022 Thomas
    Hunter II and Bryan English, 978-1-098-10443-6.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/multithreaded-js*](https://oreil.ly/multithreaded-js).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book was made possible thanks to the detailed technical reviews provided
    by the following people:'
  prefs: []
  type: TYPE_NORMAL
- en: Anna Henningsen ([@addaleax](https://twitter.com/addaleax))
  prefs: []
  type: TYPE_NORMAL
- en: Currently part of the MongoDB Developer Tools team in Germany, Anna has been
    one of the most active contributors to Node.js core over the last five years,
    and participated significantly in implementing worker threads for the platform.
    She is fueled by a passion for Node.js and its community.
  prefs: []
  type: TYPE_NORMAL
- en: Shu-yu Guo ([@_shu](https://twitter.com/_shu))
  prefs: []
  type: TYPE_NORMAL
- en: Shu works on JavaScript implementation and standardization. He is a TC39 delegate,
    one of the editors of the ECMAScript specification, and the author of the memory
    model. He currently works on the V8 engine at Google, leading JavaScript language
    feature implementation and standards. Previously, he has worked at Mozilla and
    Bloomberg.
  prefs: []
  type: TYPE_NORMAL
- en: Fernando Larrañaga ([@xabadu](https://twitter.com/xabadu))
  prefs: []
  type: TYPE_NORMAL
- en: Fernando is an engineer and open source contributor who has been leading JavaScript
    and Node.js communities for several years both in South America and in the United
    States. He’s currently a senior software engineer at Square and an organizer of
    NodeSchool SF, and with previous tenures at other major tech companies—such as
    Twilio and Groupon—he has been developing enterprise-level Node.js and scaling
    web applications used by millions of users since 2014.
  prefs: []
  type: TYPE_NORMAL
