["```\nconst formatter = new Intl.DateTimeFormat(navigator.language, { dateStyle: 'long' });\nconst formattedDate = formatter.format(new Date());\n```", "```\nconst formatter = new Intl.DateTimeFormat(navigator.language, {\ndateStyle: 'long', timeStyle: 'long' });\nconst formattedDateAndTime = formatter.format(new Date());\n```", "```\nconst formatter = new Intl.DateTimeFormat(navigator.language,\n  { dateStyle: 'short' });\nconst parts = formatter.formatToParts(new Date());\n```", "```\n[\n  { type: 'month', value: '10' },\n  { type: 'literal': value: '/' },\n  { type: 'day': value: '1' },\n  { type: 'literal', value: '/' },\n  { type: 'year', value: '23' }\n]\n```", "```\nfunction getDateDifference(fromDate) {\n  const today = new Date();\n\n  if (fromDate.getFullYear() !== today.getFullYear()) {\n    return { offset: fromDate.getFullYear() - today.getFullYear(), unit: 'year' };\n  } else if (fromDate.getMonth() !== today.getMonth()) {\n    return { offset: fromDate.getMonth() - today.getMonth(), unit: 'month' };\n  } else {\n    // You could even go more granular: down to hours, minutes, or seconds!\n    return { offset: fromDate.getDate() - today.getDate(), unit: 'day' };\n  }\n}\n```", "```\nfunction getRelativeDate(fromDate) {\n  const { offset, unit } = getDateDifference(fromDate);\n  const format = new Intl.RelativeTimeFormat();\n  return format.format(offset, unit);\n}\n```", "```\n// outputs '5,200.55' for en-US\nconsole.log(\n  new Intl.NumberFormat().format(5200.55)\n);\n```", "```\n// outputs '5.200,55'\nconsole.log(\n  new Intl.NumberFormat('de-DE').format(5200.55)\n);\n```", "```\n// outputs '1,000-5,000' for en-US\nconsole.log(\n  new Intl.NumberFormat().formatRange(1000, 5000)\n);\n```", "```\nfunction roundToTwoDecimalPlaces(number) {\n  const format = new Intl.NumberFormat(navigator.language, {\n    maximumFractionDigits: 2\n  });\n\n  return format.format(number);\n}\n\n// prints \"5.49\"\nconsole.log(roundToTwoDecimalPlaces(5.49125));\n\n// prints \"5.5\"\nconsole.log(roundToTwoDecimalPlaces(5.49621));\n```", "```\nfunction formatPriceRange(prices) {\n  const format = new Intl.NumberFormat(navigator.language, {\n    style: 'currency'.\n\n    // The currency code is required when using style: 'currency'.\n    currency: 'USD'\n  });\n  return format.formatRange(\n    // Find the lowest price in the array.\n    Math.min(...prices),\n\n    // Find the highest price in the array.\n    Math.max(...prices)\n  );\n}\n\n// outputs '$1.75—$11.00'\nconsole.log(\n  formatPriceRange([5.5, 3, 1.75, 11, 9.5])\n);\n```", "```\nconst format = new Intl.NumberFormat(navigator.language, {\n  style: 'unit',\n  unit: 'gigabyte'\n});\n\n// prints \"1,000 GB\"\nconsole.log(format.format(1000));\n```", "```\n// An array containing the users\nconst users = getUsers();\n\nconst rules = new Intl.PluralRules('en-US');\nconst form = rules.select(users.length);\n```", "```\nfunction formatUserCount(users) {\n  // The variations of the message, depending\n  // on the count\n  const messages = {\n    one: 'There is 1 user.',\n    other: `There are ${users.length} users.`\n  };\n\n  // Use Intl.PluralRules to determine which message\n  // should be displayed.\n  const rules = new Intl.PluralRules('en-US');\n  return messages[rules.select(users.length)];\n}\n```", "```\nfunction getCounts(text) {\n  const characters = new Intl.Segmenter(\n    navigator.language,\n    { granularity: 'grapheme' }\n  );\n\n  const words = new Intl.Segmenter(\n    navigator.language,\n    { granularity: 'word' }\n  );\n\n  const sentences = new Intl.Segmenter(\n    navigator.language,\n    { granularity: 'sentence' }\n  );\n\n  // Convert each segment to an array, then get its length.\n  return {\n    characters: [...characters.segment(text)].length,\n    words: [...words.segment(text)].length,\n    sentences: [...sentences.segment(text)].length\n  };\n}\n```", "```\nfunction getUserListString(users, locale = 'en-US') {\n  // The locale of the ListFormat is configurable.\n  const listFormat = new Intl.ListFormat(locale);\n  return listFormat.format(users.map(user => user.username));\n}\n```", "```\nconst names = [\n  'Elena',\n  'Mário',\n  'André',\n  'Renée',\n  'Léo',\n  'Olga',\n  'Héctor',\n]\n\nconst collator = new Intl.Collator();\nnames.sort(collator.compare);\n```", "```\nnames.sort((a, b) => a.localeCompare(b));\n```"]