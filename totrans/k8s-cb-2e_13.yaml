- en: Chapter 13\. Service Meshes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章。服务网格
- en: 'This chapter focuses on one of the building blocks that make it easier to develop
    distributed, microservices-based applications on Kubernetes: the service mesh.
    Service meshes like Istio and Linkerd can perform duties such as monitoring, service
    discovery, traffic control, and security, to name a few. By offloading these responsibilities
    to the mesh, application developers can focus on delivering added value rather
    than reinventing the wheel by solving transversal infrastructure concerns.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了使在 Kubernetes 上开发分布式、基于微服务的应用更加轻松的构建块之一：服务网格。像 Istio 和 Linkerd 这样的服务网格可以执行监控、服务发现、流量控制和安全等任务。通过将这些责任交给网格，应用开发者可以专注于提供附加值，而不是通过解决横向基础设施问题来重新发明轮子。
- en: One of the major benefits of service meshes is that they can apply policies
    to services transparently, without the services (client and server) needing to
    know they are part of a service mesh.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 服务网格的一个主要优点是，它们可以在不需要服务（客户端和服务器）知道自己是服务网格的一部分的情况下，透明地对服务应用策略。
- en: In this chapter, we’ll run through basic examples using both Istio and Linkerd.
    For each service mesh, we’ll show how you can quickly get up and running using
    Minikube and implement service-to-service communication inside the mesh while
    using simple but illustrative service mesh policies. In both examples, we’ll deploy
    a service based on NGINX, and our client invoking the service will be a `curl`
    pod. Both will be added to the mesh and the interactions between the services
    will be governed by the mesh.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Istio 和 Linkerd 分别进行基本示例。对于每个服务网格，我们将展示如何使用 Minikube 快速启动并实现网格内服务到服务的通信，同时使用简单但有说明性的服务网格策略。在这两个示例中，我们将部署一个基于
    NGINX 的服务，并且我们的客户端调用服务将是一个 `curl` pod。这两者都将被添加到网格中，并且服务之间的交互将由网格管理。
- en: 13.1 Installing the Istio Service Mesh
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.1 安装 Istio 服务网格
- en: Problem
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Your organization is using or plans to use a microservices architecture, and
    you want to lighten the load on developers by offloading the need to build security,
    service discovery, telemetry, deployment strategies, and other nonfunctional concerns.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组织正在使用或计划使用微服务架构，并且希望通过卸载构建安全性、服务发现、遥测、部署策略等非功能性关注点的需要来减轻开发者的负担。
- en: Solution
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Install Istio on Minikube. Istio is the most widely adopted service mesh and
    can offload many responsibilities from microservice developers, while also providing
    operators with centralized governance over security and operations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Minikube 上安装 Istio。Istio 是目前最广泛采用的服务网格，可以减轻许多微服务开发者的责任，同时为运维人员提供集中式的安全与运维治理。
- en: 'First, you’ll need to start Minikube with enough resources to run Istio. The
    exact resource requirements depend on your platform, and you may need to adjust
    the resource allocations. We have gotten it to work with just under 8 GB of memory
    and four CPUs:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要启动 Minikube，并为运行 Istio 分配足够的资源。确切的资源需求取决于您的平台，您可能需要调整资源分配。我们已经成功地使用了将近
    8 GB 的内存和四个 CPU：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can use a Minikube tunnel as a load balancer for Istio. To start it, run
    this command in a new terminal (it will lock the terminal to show output information):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Minikube 隧道作为 Istio 的负载均衡器。要启动它，请在新的终端中运行以下命令（它将锁定终端以显示输出信息）：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Download and extract the latest version of Istio with the following command
    (Linux and macOS):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载并解压最新版本的 Istio（适用于 Linux 和 macOS）：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For Windows, you can install with `choco` or just extract the *.exe* from the
    downloadable archive. For more info on downloading Istio, head to Istio’s [Getting
    Started guide](https://oreil.ly/5uFlk).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，你可以使用 `choco` 进行安装，或者直接从可下载的归档中提取 *.exe*。获取 Istio 的更多信息，请查阅 Istio
    的[入门指南](https://oreil.ly/5uFlk)。
- en: 'Change to the Istio directory. You may need to adapt the directory name depending
    on the version of Istio that you installed:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 Istio 目录。您可能需要根据安装的 Istio 版本适应目录名称：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `istioctl` command-line tool is designed to help debug and diagnose your
    service mesh, and you’ll use it to check your Istio configuration in other recipes.
    It lives in the *bin* directory, so add it to your path like so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`istioctl` 命令行工具旨在帮助调试和诊断您的服务网格，您将在其他示例中使用它来检查您的 Istio 配置。它位于 *bin* 目录中，请像这样将其添加到您的路径中：'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now you can install Istio. The following YAML file contains an example demo
    configuration. It intentionally deactivates the use of Istio as an ingress or
    egress gateway, as we won’t be using Istio for ingress here. Store this config
    in a file called *istio-demo-config.yaml*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以安装 Istio 了。以下 YAML 文件包含一个示例演示配置。它有意禁用了将 Istio 作为入口或出口网关使用，因为我们这里不会使用 Istio
    作为入口。将此配置保存在名为 *istio-demo-config.yaml* 的文件中：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now use `istioctl` to apply this configuration to Minikube:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `istioctl` 将此配置应用到 Minikube：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, make sure Istio is configured to automatically inject Envoy sidecar
    proxies to services that you deploy. You can enable this for the default namespace
    with the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请确保 Istio 配置为自动注入 Envoy sidecar 代理到您部署的服务中。您可以使用以下命令为默认命名空间启用此功能：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This guide makes use of default (which sometimes implies latest) versions of
    underlying projects like Kubernetes and Istio.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南使用底层项目（如 Kubernetes 和 Istio）的默认（有时意味着最新）版本。
- en: 'You can customize these versions to match the versions of your current production
    environment, for instance. To set the version of Istio you want to use, use the
    `ISTIO_VERSION` and `TARGET_ARCH` parameters when downloading Istio. For example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据您当前生产环境的版本自定义这些版本。例如，要设置您想要使用的 Istio 版本，请在下载 Istio 时使用 `ISTIO_VERSION`
    和 `TARGET_ARCH` 参数。例如：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See Also
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The official Istio [Getting Started guide](https://oreil.ly/AKCYs)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方 Istio [入门指南](https://oreil.ly/AKCYs)
- en: 13.2 Deploying a Microservice with an Istio Sidecar
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.2 部署带有 Istio sidecar 的微服务
- en: Problem
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy a new service into the service mesh, implying that a sidecar
    should be automatically injected into the service’s pod. The sidecar will intercept
    all of the service’s incoming and outgoing traffic and allow the implementation
    of routing, security, and monitoring policies (among others) without modifying
    the implementation of the service itself.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您想将新服务部署到服务网格中，这意味着应自动向服务的 pod 注入 sidecar。sidecar 将拦截所有服务的进出流量，并允许实施路由、安全和监控策略（等等），而无需修改服务本身的实现。
- en: Solution
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'We’ll use NGINX as a simple service to work with. Start by creating a deployment
    for NGINX:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 NGINX 作为一个简单的服务进行工作。首先创建一个 NGINX 的部署：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then expose this as a Kubernetes service:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将其暴露为 Kubernetes 服务：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Istio does not create new DNS entries on Kubernetes but instead relies on existing
    services registered by Kubernetes or any other service registry you might be using.
    Later in the chapter, you’ll deploy a `curl` pod that invokes the `nginx` service
    and set the `curl` host to `nginx` for DNS resolution, but then Istio will work
    its magic by intercepting the request and allowing you to define additional traffic
    control policies.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 不会在 Kubernetes 上创建新的 DNS 条目，而是依赖于 Kubernetes 或您可能正在使用的任何其他服务注册表中注册的现有服务。在本章后面，您将部署一个
    `curl` pod，该 pod 调用 `nginx` 服务，并将 `curl` 主机设置为 `nginx` 以进行 DNS 解析，但随后 Istio 将通过拦截请求并允许您定义额外的流量控制策略来发挥其魔力。
- en: 'Now list the pods in the default namespace. You should have two containers
    in the service’s pod:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在列出默认命名空间中的 pods。服务的 pod 中应该有两个容器：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you investigate the details of this pod, you’ll find that the Istio sidecar
    container (based on the Envoy proxy) was injected into the pod:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您调查此 pod 的详细信息，您会发现 Istio sidecar 容器（基于 Envoy 代理）已注入到 pod 中：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This recipe assumes you have enabled automatic sidecar injection in the namespace
    using the namespace labeling technique, as shown in [Recipe 13.1](#install_istio).
    However, you might not necessarily want to inject sidecars into every single pod
    in the namespace. In that case, you can manually choose which pods should include
    the sidecar and thereby be added to the mesh. You can learn more about manual
    sidecar injection in the [official Istio documentation](https://oreil.ly/VbHz_).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本文假设您已经使用命名空间标记技术在命名空间中启用了自动 sidecar 注入，如 [Recipe 13.1](#install_istio) 所示。但是，并非必须将
    sidecar 注入到命名空间中的每个 pod 中。在这种情况下，您可以手动选择应包含 sidecar 并因此添加到网格中的 pods。您可以在 [官方 Istio
    文档](https://oreil.ly/VbHz_) 中了解有关手动 sidecar 注入的更多信息。
- en: See Also
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: More information about how to [install and configure the sidecar](https://oreil.ly/E-omC)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关如何 [安装和配置 sidecar](https://oreil.ly/E-omC) 的更多信息
- en: More information about the [role of sidecars in Istio](https://oreil.ly/TperP)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 [Istio 中 sidecar 的角色](https://oreil.ly/TperP) 的更多信息
- en: 13.3 Routing Traffic Using an Istio Virtual Service
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3 使用 Istio 虚拟服务进行流量路由
- en: Problem
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy another service onto the cluster that will invoke the `nginx`
    service you deployed earlier, but you don’t want to write any routing or security
    logic into the services themselves. You also want to decouple the client and server
    as much as possible.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在集群中部署另一个服务，该服务将调用之前部署的`nginx`服务，但你不想在服务本身中编写任何路由或安全逻辑。你还希望尽可能地解耦客户端和服务器。
- en: Solution
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: We’ll simulate interservice communication within the service mesh by deploying
    a `curl` pod that will be added to the mesh and invoke the `nginx` service.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过部署一个将被添加到mesh中并调用`nginx`服务的`curl` pod来模拟服务网格内的服务间通信。
- en: To decouple the `curl` pod from the specific pod running `nginx`, you’ll create
    an Istio virtual service. The `curl` pod only needs to know about the virtual
    service. Istio and its sidecars will intercept and route the traffic from the
    client to the service.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`curl` pod与运行`nginx`的特定pod解耦，你将创建一个Istio虚拟服务。`curl` pod只需要知道虚拟服务即可。Istio及其sidecars将拦截并路由从客户端到服务的流量。
- en: 'Create the following virtual service specification in a file called *virtualservice.yaml*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为*virtualservice.yaml*的文件中创建以下虚拟服务规范：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the virtual service:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟服务：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then run a `curl` pod that you’ll use to invoke the service. Because you’ve
    deployed the `curl` pod in the `default` namespace and you’ve activated automatic
    sidecar injection in this namespace ([Recipe 13.1](#install_istio)), the `curl`
    pod will automatically get a sidecar and be added to the mesh:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行一个`curl` pod，你将用它来调用该服务。因为你已经在`default`命名空间中部署了`curl` pod，并且在该命名空间中激活了自动注入sidecar（[Recipe
    13.1](#install_istio)），`curl` pod将自动获得一个sidecar并添加到mesh中：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you accidentally exit the `curl` pod’s shell, you can always enter the pod
    again with the `kubectl exec` command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你意外退出了`curl` pod的shell，你可以使用`kubectl exec`命令再次进入该pod：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you can invoke the `nginx` virtual service from the `curl` pod:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以从`curl` pod中调用`nginx`虚拟服务：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You’ll see the response from the `nginx` service, but notice how the HTTP header
    `server: envoy` indicates that the response is actually coming from the Istio
    sidecar running in the `nginx` pod.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '你将看到来自`nginx`服务的响应，但请注意HTTP头`server: envoy`表明响应实际上来自运行在`nginx` pod中的Istio sidecar。'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To reference virtual services from `curl`, we’re using short names that reference
    the names of the Kubernetes services (`nginx` in this example). Under the hood,
    these names are translated into fully qualified domain names, like `nginx.default.svc.cluster.local`.
    As you can see, the fully qualified name includes a namespace name (`default`
    in this case). To be safe, for production use cases it is recommend you explicitly
    use fully qualified names to avoid misconfigurations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从`curl`引用虚拟服务，我们使用引用Kubernetes服务名称（在本例中为`nginx`）的简短名称。在幕后，这些名称被转换为完全限定域名，如`nginx.default.svc.cluster.local`。正如你所见，完全限定名称包括命名空间名称（在本例中为`default`）。为了安全起见，在生产用例中建议你明确使用完全限定名称以避免配置错误。
- en: Discussion
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This recipe focused on interservice communication within a service mesh (also
    known as *east–west communication*), which is the sweet spot for this technology.
    However, Istio and other services meshes are also able to perform gateway duties
    (also known as *ingress* and *north–south communication*), such as interactions
    between clients running outside the mesh (or the Kubernetes cluster) and services
    running in the mesh.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本文重点介绍了服务网格内的服务间通信（也称为*东西向通信*），这是该技术的亮点。然而，Istio和其他服务网格也能够执行网关职责（也称为*入口*和*南北向通信*），例如在网格外（或Kubernetes集群外）运行的客户端与网格内运行的服务之间的交互。
- en: At the time of writing, Istio’s gateway resource is being gradually phased out
    in favor of the new [Kubernetes Gateway API](https://gateway-api.sigs.k8s.io).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Istio的网关资源正在逐渐被新的[Kubernetes Gateway API](https://gateway-api.sigs.k8s.io)所取代。
- en: See Also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Official reference documentation for [Istio virtual services](https://oreil.ly/Lth6l).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Istio虚拟服务](https://oreil.ly/Lth6l)的官方参考文档。'
- en: Read more about how the Kubernetes Gateway API is expected to [replace Istio’s
    Gateway](https://oreil.ly/6vHQv).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于Kubernetes Gateway API预计将[取代Istio的Gateway](https://oreil.ly/6vHQv)的信息。
- en: 13.4 Rewriting a URL Using an Istio Virtual Service
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.4 使用Istio虚拟服务重写URL
- en: Problem
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: A legacy client is using a URL and path for a service that is no longer valid.
    You want to rewrite the path dynamically so that the service is correctly invoked,
    without having to make changes to the client.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个旧版客户端正在使用一个不再有效的服务URL和路径。您希望动态重写路径，以便正确调用该服务，而无需更改客户端。
- en: 'You can simulate this problem from your `curl` pod by invoking the path */legacypath*
    like so, which produces a 404 Not Found response:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`curl`容器中调用*/legacypath*路径来模拟此问题，这将产生404 Not Found响应：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Solution
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use Istio to rewrite the legacy path so that it reaches a valid endpoint on
    the service, which in our example will be the root of the `nginx` service.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Istio重写旧路径，以便它达到服务的有效端点，在我们的示例中将是`nginx`服务的根目录。
- en: 'Update the virtual service to include an HTTP rewrite:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 更新虚拟服务以包含HTTP重写：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And then apply the change:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后应用更改：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The updated virtual service includes a `match` attribute, which will look for
    the legacy path and rewrite it to simply target the root endpoint.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的虚拟服务包含一个`match`属性，该属性将查找旧路径并将其重写为简单地指向根端点。
- en: 'Now, calls to the legacy path from the `curl` pod will no longer produce a
    404, but a 200 OK instead:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从`curl`容器调用旧路径将不再产生404错误，而是产生200 OK响应：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Discussion
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The role of virtual services is mainly to define the routing from clients to
    upstream services. For additional control over the requests to the upstream service,
    refer to the [Istio documentation on destination rules](https://oreil.ly/Yu4xW).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟服务的主要作用是定义从客户端到上游服务的路由。如需对上游服务的请求有额外的控制，请参考[Istio关于目标规则的文档](https://oreil.ly/Yu4xW)。
- en: See Also
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Istio `HTTPRewrite` documentation](https://oreil.ly/EGAFs)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Istio `HTTPRewrite`文档](https://oreil.ly/EGAFs)'
- en: 13.5 Installing the Linkerd Service Mesh
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.5 安装Linkerd服务网格
- en: Problem
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Your project requires a small footprint and/or doesn’t need all the features
    provided by Istio, such as support for non-Kubernetes workloads or native support
    for egress.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目需要小型占地面积和/或不需要Istio提供的所有功能，例如对非Kubernetes工作负载的支持或对egress的本地支持。
- en: Solution
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: You might be interested in trying Linkerd, which positions itself as a more
    lightweight alternative to Istio.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能有兴趣尝试Linkerd，它定位为Istio的更轻量级替代品。
- en: First, if you’re directly following on from the Istio recipes, you can reset
    your environment by using a command like `kubectl delete all --all` (beware, this
    will remove *everything* from your cluster!).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您直接按照Istio的示例操作，您可以使用类似`kubectl delete all --all`的命令重置您的环境（请注意，这会从您的集群中删除*所有*内容！）。
- en: 'You can then manually install Linkerd by executing the following command and
    following the instructions in the terminal:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下命令并按终端中的说明操作，手动安装Linkerd：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of the previous command will include additional steps, including
    updating your `PATH` as well as other checks and installation commands that are
    essential to completing the installation of Linkerd. The following snippet shows
    these instructions at time of writing:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出将包括额外的步骤，包括更新您的`PATH`以及其他检查和安装命令，这些命令对完成安装Linkerd至关重要。在撰写本文时，以下片段显示了这些说明：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When you run the second of these `install` commands, you may get an error message
    recommending that you rerun that command with an additional parameter, as shown
    here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行这些`install`命令中的第二个时，您可能会收到错误消息，建议您使用额外的参数重新运行该命令，如下所示：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'At the end of the installation, you’ll be asked to run a command that checks
    that everything is up and running correctly:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 安装结束时，您将被要求运行一个命令来检查所有内容是否正常运行：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should also be able to see the Linkerd pods running in the `linkerd` namespace:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该能够看到在`linkerd`命名空间中运行的Linkerd pods：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Make sure Linkerd is configured to automatically inject the Linkerd proxy to
    services that you deploy. You can enable this for the default namespace with the
    following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Linkerd配置为自动注入Linkerd代理到您部署的服务中。您可以通过以下命令为默认命名空间启用此功能：
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Discussion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: William Morgan, the cofounder and CEO of Buoyant Inc., was the first to coin
    the term *service mesh* in 2016\. Since then, the community behind Bouyant’s Linkerd
    has maintained its focus on providing a well-scoped, performant product.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 威廉·摩根，Buoyant Inc.的联合创始人兼CEO，于2016年首次提出了*服务网格*一词。自那时起，Buoyant的Linkerd社区一直专注于提供一个功能齐全、性能卓越的产品。
- en: As mentioned in the problem statement, one of the main limitations of Linkerd
    to be aware of, at time of writing, is that it can only mesh services that are
    running on Kubernetes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如问题陈述中提到的，在撰写本文时，Linkerd 的主要限制之一是它只能网格化运行在 Kubernetes 上的服务。
- en: See Also
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The Linkerd official [Getting Started guide](https://oreil.ly/zx-Wx)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linkerd 官方的[入门指南](https://oreil.ly/zx-Wx)
- en: 13.6 Deploying a Service into the Linkerd Mesh
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.6 将服务部署到 Linkerd 网格中
- en: Problem
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy a service into the Linkerd mesh and inject a sidecar into
    its pod.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您想将一个服务部署到 Linkerd 网格中，并向其 pod 注入一个 sidecar。
- en: Solution
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Let’s deploy the same `nginx` service as we did with Istio, which responds to
    HTTP GET requests on its root endpoint, returns a 404 response on others.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署与 Istio 相同的`nginx`服务，它会响应其根端点上的 HTTP GET 请求，并在其他请求上返回 404 响应。
- en: 'Start by creating a deployment for NGINX:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个 NGINX 部署：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then expose this as a Kubernetes service:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将其公开为 Kubernetes 服务：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now list the pods in the default namespace. You should have two containers
    in the `nginx` service’s pod:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在列出默认命名空间中的 pod。在`nginx`服务的 pod 中应该有两个容器：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you investigate the details of this pod, you’ll find that two Linkerd containers
    were injected into the pod. One is the init container, which plays a role in routing
    TCP traffic to and from the pod and which terminates before the other pods are
    started. The other container is the Linkerd proxy itself:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您调查此 pod 的详细信息，您会发现已注入两个 Linkerd 容器到该 pod 中。其中一个是初始化容器，在路由 TCP 流量到 pod 以及在其他
    pod 启动之前终止时起作用。另一个容器是 Linkerd 代理本身：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Discussion
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Like Istio, Linkerd relies on a sidecar proxy, also known as an [ambassador
    container](https://oreil.ly/ooN52), that is injected into pods and provides additional
    functionality to the service running alongside it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Istio 类似，Linkerd 依赖于一个 sidecar 代理，也被称为[大使容器](https://oreil.ly/ooN52)，它被注入到
    pod 中并为其运行的服务提供附加功能。
- en: The Linkerd CLI provides the `linkerd inject` command as a useful alternative
    way to decide where and when to inject the Linkerd proxy container into the application
    pod, without manipulating labels yourself. You can read about it in the [Linkerd
    documentation](https://oreil.ly/KJfxJ).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd CLI 提供了`linkerd inject`命令作为一种有用的替代方法，用于决定何时以及何地将 Linkerd 代理容器注入到应用程序
    pod 中，而无需自行操纵标签。您可以在[Linkerd 文档](https://oreil.ly/KJfxJ)中了解更多信息。
- en: See Also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: More information on how to [configure automatic sidecar injection](https://oreil.ly/TexFs)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于如何[配置自动 sidecar 注入](https://oreil.ly/TexFs)的信息
- en: More information on the [architecture of Linkerd](https://oreil.ly/nTiTn)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于[Linkerd 架构](https://oreil.ly/nTiTn)的信息
- en: 13.7 Routing Traffic to a Service in Linkerd
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.7 将流量路由到 Linkerd 中的服务
- en: Problem
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy a service into the mesh that will invoke the `nginx` service
    you deployed in the previous recipe, and verify that Linkerd and its sidecars
    are intercepting and routing the traffic.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您想将一个服务部署到网格中，该服务将调用您在上一个示例中部署的`nginx`服务，并验证 Linkerd 及其 sidecar 是否拦截和路由流量。
- en: Solution
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: We’ll simulate interservice communication within the service mesh by deploying
    a `curl` pod that will be added to the mesh and invoke the `nginx` service. As
    you’ll see in this recipe, routing policies are defined differently in Linkerd.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过部署一个`curl` pod 来模拟服务网格内的服务间通信，该 pod 将被添加到网格中并调用`nginx`服务。正如您在本示例中所见，Linkerd
    中的路由策略定义方式不同。
- en: 'First, run a `curl` pod that you’ll use to invoke the service. Because you’re
    starting the `curl` pod in the default namespace and you’ve activated automatic
    sidecar injection in this namespace ([Recipe 13.5](#install_linkerd)), the `curl`
    pod will automatically get a sidecar and be added to the mesh:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先运行一个`curl` pod，您将用它来调用服务。因为您在默认命名空间中启动了`curl` pod，并且在此命名空间中启用了自动注入 sidecar（[Recipe
    13.5](#install_linkerd)），`curl` pod 将自动获取一个 sidecar 并添加到网格中：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Because Linkerd modifies the default container ordering in a meshed pod, the
    previous `run` command will fail because it tries to tty into the Linkerd proxy,
    rather than our `curl` container.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Linkerd 修改了网格化 pod 中默认的容器排序，之前的`run`命令将失败，因为它试图进入 Linkerd 代理而不是我们的`curl`容器。
- en: 'To bypass this issue, you can unblock the terminal with CTRL-C and then run
    a command to connect into the correct container by using the `-c` flag:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要绕过此问题，您可以使用 CTRL-C 解除终端阻塞，然后使用`-c`标志运行命令以连接到正确的容器：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now you can invoke the `nginx` service from the `curl` pod:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以从`curl` pod 中调用`nginx`服务：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll see the response from the `nginx` service, but unlike with Istio, there
    aren’t yet any clear indicators that Linkerd has successfully intercepted this
    request.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到`nginx`服务的响应，但与 Istio 不同的是，目前还没有明确的指示表明 Linkerd 已成功拦截此请求。
- en: 'To start adding a Linkerd routing policy to the `nginx` service, define a Linkerd
    `Server` resource in a file called *linkerd-server.yaml*, shown here:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始向`nginx`服务添加 Linkerd 路由策略，请在名为*linkerd-server.yaml*的文件中定义 Linkerd 的`Server`资源，如下所示：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then create the server:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建服务器：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now if you invoke the service again from the `curl` pod, you’ll get confirmation
    that Linkerd is intercepting this request, because by default it will reject requests
    to servers that don’t have an associated authorization policy:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您从`curl` pod再次调用服务，您将收到确认信息表明 Linkerd 正在拦截此请求，因为默认情况下它将拒绝未关联授权策略的服务器的请求：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Discussion
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: As you can see, Linkerd uses pod selector labels to determine which pods are
    governed by the policies of the mesh. In comparison, Istio’s `VirtualService`
    resource references a service by name directly.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Linkerd 使用 pod 选择器标签来确定哪些 pod 受到 mesh 策略的管理。相比之下，Istio 的`VirtualService`资源直接通过名称引用服务。
- en: 13.8 Authorizing Traffic to the Server in Linkerd
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.8 针对 Linkerd 服务器的流量授权
- en: Problem
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You’ve added a service like `nginx` to the mesh and declared it as a Linkerd
    server, but now you’re getting 403 Forbidden responses because the mesh requires
    authorization by default on all declared servers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经将类似`nginx`的服务添加到了 mesh 中，并声明其为 Linkerd 服务器，但现在由于默认情况下 mesh 要求所有声明的服务器进行授权，因此您正在收到
    403 Forbidden 响应。
- en: Solution
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Linkerd provides different policies to define which clients are allowed to contact
    which servers. In this example, we’ll use a Linkerd `AuthorizationPolicy` to specify
    which service accounts can call the `nginx` service.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 提供了不同的策略来定义哪些客户端可以联系哪些服务器。在这个例子中，我们将使用 Linkerd 的`AuthorizationPolicy`来指定哪些服务账户可以调用`nginx`服务。
- en: In your development environment, the `curl` pod is using the `default` service
    account, unless otherwise specified. In production, your services would have their
    own dedicated service accounts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的开发环境中，`curl` pod 正在使用`default`服务账户，除非另有指定。在生产环境中，您的服务将具有专用的服务账户。
- en: 'Start by creating a file called *linkerd-auth-policy.yaml*, as shown here:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个名为*linkerd-auth-policy.yaml*的文件，如下所示：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This policy declares that any client using the `default` service account will
    be able to access the Linkerd server called `nginx` that you created in the previous
    recipe.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此策略声明任何使用`default`服务账户的客户端将能够访问您在前一篇中创建的名为`nginx`的 Linkerd 服务器。
- en: 'Apply the policy:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此策略：
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now you can invoke the `nginx` service from the `curl` pod and get a 200 OK:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以从`curl` pod调用`nginx`服务并获得 200 OK：
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Discussion
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Alternative ways to control access to servers include TLS identity-based policies,
    IP-based policies, specifically referencing clients by using pod selectors, and
    any combination of these.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 控制对服务器访问的另一种方法包括基于 TLS 身份的策略、基于 IP 的策略、通过使用 pod 选择器特定引用客户端，以及这些方法的任意组合。
- en: Furthermore, [default policies](https://oreil.ly/LwiQ_) can be applied that
    restrict access to services that aren’t formally referenced by a Linkerd `Server`
    resource.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以应用[默认策略](https://oreil.ly/LwiQ_)，限制访问未经 Linkerd `Server`资源正式引用的服务。
- en: See Also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Linkerd authorization policy documentation](https://oreil.ly/FOtW1)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Linkerd 授权策略文档](https://oreil.ly/FOtW1)'
