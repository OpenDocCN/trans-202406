["```\napp.get('/headers', (req, res) => {\n  res.type('text/plain')\n  const headers = Object.entries(req.headers)\n    .map(([key, value]) => `${key}: ${value}`)\n  res.send(headers.join('\\n'))\n})\n```", "```\napp.disable('x-powered-by')\n```", "```\n// basic usage\napp.get('/about', (req, res) => {\n  res.render('about')\n})\n```", "```\napp.get('/error', (req, res) => {\n  res.status(500)\n  res.render('error')\n})\n\n// or on one line...\n\napp.get('/error', (req, res) => res.status(500).render('error'))\n```", "```\napp.get('/greeting', (req, res) => {\n  res.render('greeting', {\n    message: 'Hello esteemed programmer!',\n    style: req.query.style,\n    userid: req.cookies.userid,\n    username: req.session.username\n  })\n})\n```", "```\n// the following layout doesn't have a layout file, so\n// views/no-layout.handlebars must include all necessary HTML\napp.get('/no-layout', (req, res) =>\n  res.render('no-layout', { layout: null })\n)\n```", "```\n// the layout file views/layouts/custom.handlebars will be used\napp.get('/custom-layout', (req, res) =>\n  res.render('custom-layout', { layout: 'custom' })\n)\n```", "```\napp.get('/text', (req, res) => {\n  res.type('text/plain')\n  res.send('this is a test')\n})\n```", "```\n// this should appear AFTER all of your routes\n// note that even if you don't need the \"next\" function, it must be\n// included for Express to recognize this as an error handler\napp.use((err, req, res, next) => {\n  console.error('** SERVER ERROR: ' + err.message)\n  res.status(500).render('08-error',\n    { message: \"you shouldn't have clicked that!\" })\n})\n```", "```\n// this should appear AFTER all of your routes\napp.use((req, res) =>\n  res.status(404).render('404')\n)\n```", "```\nconst bodyParser = require('body-parser')\napp.use(bodyParser.urlencoded({ extended: false }))\n```", "```\napp.post('/process-contact', (req, res) => {\n  console.log(`received contact from ${req.body.name} <${req.body.email}>`)\n  res.redirect(303, '10-thank-you')\n})\n```", "```\napp.post('/process-contact', (req, res) => {\n  try {\n    // here's where we would try to save contact to database or other\n    // persistence mechanism...for now, we'll just simulate an error\n    if(req.body.simulateError) throw new Error(\"error saving contact!\")\n    console.log(`contact from ${req.body.name} <${req.body.email}>`)\n    res.format({\n      'text/html': () => res.redirect(303, '/thank-you'),\n      'application/json': () => res.json({ success: true }),\n    })\n  } catch(err) {\n    // here's where we would handle any persistence failures\n    console.error(`error processing contact from ${req.body.name} ` +\n      `<${req.body.email}>`)\n    res.format({\n      'text/html': () =>  res.redirect(303, '/contact-error'),\n      'application/json': () => res.status(500).json({\n        error: 'error saving contact information' }),\n    })\n  }\n})\n```", "```\nconst tours = [\n  { id: 0, name: 'Hood River', price: 99.99 },\n  { id: 1, name: 'Oregon Coast', price: 149.95 },\n]\n```", "```\napp.get('/api/tours', (req, res) => res.json(tours))\n```", "```\napp.get('/api/tours', (req, res) => {\n  const toursXml = '<?xml version=\"1.0\"?><tours>' +\n    tours.map(p =>\n      `<tour price=\"${p.price}\" id=\"${p.id}\">${p.name}</tour>`\n    ).join('') + '</tours>'\n  const toursText = tours.map(p =>\n      `${p.id}: ${p.name} (${p.price})`\n    ).join('\\n')\n  res.format({\n    'application/json': () => res.json(tours),\n    'application/xml': () => res.type('application/xml').send(toursXml),\n    'text/xml': () => res.type('text/xml').send(toursXml),\n    'text/plain': () => res.type('text/plain').send(toursXml),\n  })\n})\n```", "```\napp.put('/api/tour/:id', (req, res) => {\n  const p = tours.find(p => p.id === parseInt(req.params.id))\n  if(!p) return res.status(404).json({ error: 'No such tour exists' })\n  if(req.body.name) p.name = req.body.name\n  if(req.body.price) p.price = req.body.price\n  res.json({ success: true })\n})\n```", "```\napp.delete('/api/tour/:id', (req, res) => {\n  const idx = tours.findIndex(tour => tour.id === parseInt(req.params.id))\n  if(idx < 0) return res.json({ error: 'No such tour exists.' })\n  tours.splice(idx, 1)\n  res.json({ success: true })\n})\n```"]