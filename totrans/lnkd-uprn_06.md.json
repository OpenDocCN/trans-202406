["```\n$ curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install-edge | sh\n```", "```\n$ export PATH=$HOME/.linkerd2/bin:$PATH\n```", "```\n$ curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install-edge \\\n    | LINKERD2_VERSION=\"stable-2.13.12\" sh\n```", "```\n$ linkerd *`command`* *`[``options``]`*\n```", "```\n$ linkerd --help\n```", "```\nlinkerd manages the Linkerd service mesh.\n\nUsage:\n  linkerd [command]\n\nAvailable Commands:\n  authz        List authorizations for a resource\n  check        Check the Linkerd installation for potential problems\n  completion   Output shell completion code for the specified shell (bash, zsh\n               or fish)\n  diagnostics  Commands used to diagnose Linkerd components\n  help         Help about any command\n  identity     Display the certificate(s) of one or more selected pod(s)\n  inject       Add the Linkerd proxy to a Kubernetes config\n  install      Output Kubernetes configs to install Linkerd\n  install-cni  Output Kubernetes configs to install Linkerd CNI\n  jaeger       jaeger manages the jaeger extension of Linkerd service mesh\n  multicluster Manages the multicluster setup for Linkerd\n  profile      Output service profile config for Kubernetes\n  prune        Output extraneous Kubernetes resources in the linkerd control\n               plane\n  uninject     Remove the Linkerd proxy from a Kubernetes config\n  uninstall    Output Kubernetes resources to uninstall Linkerd control plane\n  upgrade      Output Kubernetes configs to upgrade an existing Linkerd control\n               plane\n  version      Print the client and server version information\n  viz          viz manages the linkerd-viz extension of Linkerd service mesh\n\nFlags:\n      --api-addr string            Override kubeconfig and communicate directly\n                                   with the control plane at host:port (mostly\n                                   for testing)\n      --as string                  Username to impersonate for Kubernetes\n                                   operations\n      --as-group stringArray       Group to impersonate for Kubernetes\n                                   operations\n      --cni-namespace string       Namespace in which the Linkerd CNI plugin is\n                                   installed (default \"linkerd-cni\")\n      --context string             Name of the kubeconfig context to use\n  -h, --help                       help for linkerd\n      --kubeconfig string          Path to the kubeconfig file to use for CLI\n                                   requests\n  -L, --linkerd-namespace string   Namespace in which Linkerd is installed\n                                   ($LINKERD_NAMESPACE) (default \"linkerd\")\n      --verbose                    Turn on debug logging\n\nUse \"linkerd [command] --help\" for more information about a command.\n```", "```\n$ linkerd check --help\n```", "```\nCheck the Linkerd installation for potential problems.\n\nThe check command will perform a series of checks to validate that the linkerd\nCLI and control plane are configured correctly. If the command encounters a\nfailure it will print additional information about the failure and exit with a\nnon-zero exit code.\n\nUsage:\n  linkerd check [flags]\n\nExamples:\n  # Check that the Linkerd control plane is up and running\n  linkerd check\n\n  # Check that the Linkerd control plane can be installed in the \"test\"\n  # namespace\n  linkerd check --pre --linkerd-namespace test\n\n  # Check that the Linkerd data plane proxies in the \"app\" namespace are up and\n  # running\n  linkerd check --proxy --namespace app\n\nFlags:\n      --cli-version-override string   Used to override the version of the cli\n                                      (mostly for testing)\n      --crds                          Only run checks which determine if the\n                                      Linkerd CRDs have been installed\n      --expected-version string       Overrides the version used when checking\n                                      if Linkerd is running the latest version\n                                      (mostly for testing)\n  -h, --help                          help for check\n      --linkerd-cni-enabled           When running pre-installation checks\n                                      (--pre), assume the linkerd-cni plugin is\n                                      already installed, and a NET_ADMIN check\n                                      is not needed\n  -n, --namespace string              Namespace to use for --proxy checks\n                                      (default: all namespaces)\n  -o, --output string                 Output format. One of: table, json, short\n                                      (default \"table\")\n      --pre                           Only run pre-installation checks, to\n                                      determine if the control plane can be\n                                      installed\n      --proxy                         Only run data-plane checks, to determine\n                                      if the data plane is healthy\n      --wait duration                 Maximum allowed time for all tests to pass\n                                      (default 5m0s)\n\nGlobal Flags:\n      --api-addr string            Override kubeconfig and communicate directly\n                                   with the control plane at host:port (mostly\n                                   for testing)\n      --as string                  Username to impersonate for Kubernetes\n                                   operations\n      --as-group stringArray       Group to impersonate for Kubernetes\n                                   operations\n      --cni-namespace string       Namespace in which the Linkerd CNI plugin is\n                                   installed (default \"linkerd-cni\")\n      --context string             Name of the kubeconfig context to use\n      --kubeconfig string          Path to the kubeconfig file to use for CLI\n                                   requests\n  -L, --linkerd-namespace string   Namespace in which Linkerd is installed\n                                   ($LINKERD_NAMESPACE) (default \"linkerd\")\n      --verbose                    Turn on debug logging\n```", "```\n$ linkerd version\nClient version: stable-2.14.6\nServer version: stable-2.14.6\n```", "```\n$ linkerd version --client\nClient version: stable-2.14.6\n```", "```\n$ linkerd check\n```", "```\n$ linkerd check --pre\n```", "```\n$ linkerd check --proxy\n```", "```\n$ linkerd viz check\n```", "```\n$ linkerd inject https://url.to/yml | kubectl apply -f -\n```", "```\n$ linkerd identity -n linkerd linkerd-destination-7447d467f8-f4n9w\n```", "```\nPOD linkerd-destination-7447d467f8-f4n9w (1 of 1)\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 3 (0x3)\n    Signature Algorithm: ECDSA-SHA256\n        Issuer: CN=identity.linkerd.cluster.local\n        Validity\n            Not Before: Apr 5 13:51:13 2023 UTC\n            Not After : Apr 6 13:51:53 2023 UTC\n        Subject: CN=linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\n        Subject Public Key Info:\n            Public Key Algorithm: ECDSA\n                Public-Key: (256 bit)\n                X:\n                    98:41:63:15:e1:0e:99:81:3c:ee:18:a5:55:fe:a5:\n                    40:bd:cf:a2:cd:c2:e8:30:09:8c:8a:c6:8a:20:e7:\n                    3c:cf\n                Y:\n                    53:7e:3c:05:d4:86:de:f9:89:cb:73:e9:37:98:08:\n                    8f:e5:ec:39:c3:6c:c7:42:47:f0:ea:0a:c7:66:fe:\n                    8d:a5\n                Curve: P-256\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Authority Key Identifier:\n                keyid:37:C0:12:A1:AC:2D:A9:36:2D:35:83:6B:5C:99:9A:A2:5E:9C:E5:C5\n            X509v3 Subject Alternative Name:\n                DNS:linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\n\n    Signature Algorithm: ECDSA-SHA256\n         30:45:02:20:4a:fb:02:db:17:e7:df:64:a4:7b:d2:08:a2:2e:\n         66:e5:a4:74:14:35:d5:1a:f7:fc:15:95:9b:73:60:dd:78:a4:\n         02:21:00:8c:12:fb:bf:80:7a:c4:25:91:0c:ac:03:37:ca:e0:\n         82:d5:9d:9b:54:f1:20:b0:f0:14:e0:ef:ae:a8:ba:70:00\n```", "```\n$ linkerd diagnostics controller-metrics\n```", "```\n#\n# POD linkerd-destination-8498c6764f-96tqr (1 of 5)\n# CONTAINER destination\n#\n# HELP cluster_store_size The number of linked clusters in the remote discove...\n# TYPE cluster_store_size gauge\ncluster_store_size 0\n# HELP endpoint_profile_updates_queue_overflow A counter incremented whenever...\n# TYPE endpoint_profile_updates_queue_overflow counter\nendpoint_profile_updates_queue_overflow 0\n# HELP endpoint_updates_queue_overflow A counter incremented whenever the end...\n# TYPE endpoint_updates_queue_overflow counter\nendpoint_updates_queue_overflow{service=\"kubernetes.default.svc.cluster.local...\n# HELP endpoints_cache_size Number of items in the client-go endpoints cache\n# TYPE endpoints_cache_size gauge\nendpoints_cache_size{cluster=\"local\"} 17\n...\n```", "```\n$ linkerd diagnostics proxy-metrics -n emojivoto deploy/web\n```", "```\n#\n# POD web-5b97875957-xn269 (1 of 1)\n#\n# HELP inbound_http_authz_allow_total The total number of inbound HTTP reques...\n# TYPE inbound_http_authz_allow_total counter\ninbound_http_authz_allow_total{target_addr=\"0.0.0.0:4191\",target_ip=\"0.0.0.0\"...\ninbound_http_authz_allow_total{target_addr=\"0.0.0.0:4191\",target_ip=\"0.0.0.0\"...\n# HELP identity_cert_expiration_timestamp_seconds Time when the this proxy's ...\n# TYPE identity_cert_expiration_timestamp_seconds gauge\nidentity_cert_expiration_timestamp_seconds 1705071458\n# HELP identity_cert_refresh_count The total number of times this proxy's mTL...\n# TYPE identity_cert_refresh_count counter\nidentity_cert_refresh_count 1\n# HELP request_total Total count of HTTP requests.\n# TYPE request_total counter\nrequest_total{direction=\"inbound\",target_addr=\"0.0.0.0:4191\",target_ip=\"0.0.0...\nrequest_total{direction=\"inbound\",target_addr=\"0.0.0.0:4191\",target_ip=\"0.0.0...\n...\n```", "```\n$ linkerd diagnostics endpoints emoji-svc.emojivoto.svc.cluster.local:8080\n```", "```\nNAMESPACE   IP           PORT   POD                     SERVICE\nemojivoto   10.42.0.15   8080   emoji-5b97875957-xn269  emoji-svc.emojivoto\n```", "```\n$ linkerd diagnostics policy -n faces svc/smiley 80 > smiley-diag.json\n```", "```\nhttp2:\n  routes:\n  - metadata:\n      Kind:\n        Default: http\n    rules:\n    - backends:\n        Kind:\n          FirstAvailable:\n            backends:\n            - backend:\n                Kind:\n                  Balancer:\n                    Load:\n                      PeakEwma:\n                        decay:\n                          seconds: 10\n                        default_rtt:\n                          nanos: 30000000\n                    discovery:\n                      Kind:\n                        Dst:\n                          path: smiley.faces.svc.cluster.local:80\n                metadata:\n                  Kind:\n                    Default: service\n                queue:\n                  capacity: 100\n                  failfast_timeout:\n                    seconds: 3\n      matches:\n      - path:\n          Kind:\n            Prefix: /\n```", "```\napiVersion: policy.linkerd.io/v1beta3\nkind: HTTPRoute\nmetadata:\n  name: smiley-split\n  namespace: faces\nspec:\n  parentRefs:\n    - name: smiley\n      kind: Service\n      group: core\n      port: 80\n  rules:\n  - backendRefs:\n    - name: smiley\n      port: 80\n      weight: 50\n    - name: smiley2\n      port: 80\n      weight: 50\n```", "```\nhttp2:\n  routes:\n  - metadata:\n      Kind:\n        Resource:\n          group: policy.linkerd.io\n          kind: HTTPRoute\n          name: smiley-split\n          namespace: faces\n    rules:\n    - backends:\n        Kind:\n          RandomAvailable:\n            backends:\n            - backend:\n                backend:\n                  Kind:\n                    Balancer:\n                      Load:\n                        PeakEwma:\n                          decay:\n                            seconds: 10\n                          default_rtt:\n                            nanos: 30000000\n                      discovery:\n                        Kind:\n                          Dst:\n                            path: smiley.faces.svc.cluster.local:80\n                  metadata:\n                    Kind:\n                      Resource:\n                        group: core\n                        kind: Service\n                        name: smiley\n                        namespace: faces\n                        port: 80\n                  queue:\n                    capacity: 100\n                    failfast_timeout:\n                      seconds: 3\n              weight: 50\n            - backend:\n                backend:\n                  Kind:\n                    Balancer:\n                      Load:\n                        PeakEwma:\n                          decay:\n                            seconds: 10\n                          default_rtt:\n                            nanos: 30000000\n                      discovery:\n                        Kind:\n                          Dst:\n                            path: smiley2.faces.svc.cluster.local:80\n                  metadata:\n                    Kind:\n                      Resource:\n                        group: core\n                        kind: Service\n                        name: smiley2\n                        namespace: faces\n                        port: 80\n                  queue:\n                    capacity: 100\n                    failfast_timeout:\n                      seconds: 3\n              weight: 50\n      matches:\n      - path:\n          Kind:\n            Prefix: /\n```"]