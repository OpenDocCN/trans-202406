["```\nconst App = {\n render(h) {\n  return h(\n   'div',\n   { id: 'test-id' },\n   'This is a render function test with Vue'\n  )\n }\n}\n```", "```\nconst App = {\n template: `<div id='test-id'>This is a render function test with Vue</div>`\n}\n```", "```\nimport { createApp, h } from 'vue'\n\nconst App = {\n render() {\n  return h(\n   'div',\n   { id: 'test-id' },\n   'This is a render function test with Vue'\n  )\n }\n}\n```", "```\nh(component, { /*props*/ }, children)\n```", "```\nconst inputElem = h(\n 'input',\n {\n  placeholder: 'Enter some text',\n  type: 'text',\n  id: 'text-input'\n })\n\nconst comp = h(\n 'div',\n {\n  id: 'my-test-comp',\n  style: { border: '1px solid blue' }\n },\n inputElem\n)\n```", "```\n<div id=\"my-test-comp\" style=\"border: 1px solid blue;\">\n Text input\n <input placeholder=\"Enter some text\" type=\"text\" id=\"text-input\">\n</div>\n```", "```\nimport { createApp, h } from 'vue'\n\nconst inputElem = h(\n 'input',\n {\n  placeholder: 'Enter some text',\n  type: 'text',\n  id: 'text-input'\n })\n\nconst comp = h(\n 'div',\n {\n  id: 'my-test-comp',\n  style: { border: '1px solid blue' }\n },\n inputElem\n)\n\nconst App = {\n render() {\n  return comp\n }\n}\n\nconst app = createApp(App)\n\napp.mount(\"#app\")\n```", "```\nconst JSXComp = <div>This is a JSX component</div>\n```", "```\nimport { createApp, h } from 'vue'\n\nconst JSXComp = <div>This is a JSX component</div>\n\nconst App = {\n render() {\n  return JSXComp\n }\n}\n\nconst app = createApp(App)\n\napp.mount(\"#app\")\n```", "```\nimport { createApp, h } from 'vue'\n\nconst name = 'JSX'\nconst JSXComp = <div>This is a {name} component</div>\n\nconst App = {\n render() {\n  return JSXComp\n }\n}\n\nconst app = createApp(App)\n\napp.mount(\"#app\")\n```", "```\n/**... */\nconst id = 'jsx-comp'\nconst JSXComp = <div id={id}>This is a {name} component</div>\n/**... */\n```", "```\nimport { h } from 'vue'\n\nexport function MyFunctionComp(props, context) {\n return h(/* render function argument */)\n}\n```", "```\n<my-heading level=\"2\">Hello World</my-heading>\n```", "```\n<h2>Hello World</h2>\n```", "```\nimport { h } from 'vue';\n\nexport function MyHeading(props, context) {\n const heading = `h${props.level}`\n\n return h(heading, context.$attrs, context.$slots);\n}\n```", "```\nMyFunctionComp.props = ['prop-one', 'prop-two']\nMyFunctionComp.emits = ['event-one', 'event-two']\n```", "```\n/* plugins/samplePlugin.ts */\nimport type { App  } from 'vue'\n\nexport default {\n install(app: App<Element>, options: Object) {\n  // Installation logic\n }\n}\n```", "```\n/* plugins/truncate.ts */\nimport type { App } from 'vue';\n\nexport default {\n  install(app: App<Element>, options: { limit: number }) {\n    const truncate = (str: string) => {\n      if (str.length > options.limit) {\n        return `${str.slice(0, options.limit)}...`;\n      }\n\n      return str;\n    }\n    app.config.globalProperties.$truncate = truncate;\n  }\n}\n```", "```\n/* main.ts */\nimport { createApp } from 'vue'\nimport truncate from './plugins/truncate'\n\nconst App = {}\n\n//1\\. Create the app instance\nconst app = createApp(App);\n\n//2\\. Register the plugin\napp.use(truncate, { limit: 10 })\n\napp.mount('#app')\n```", "```\nimport { createApp, defineComponent } from 'vue'\nimport truncate from './plugins/truncate'\n\nconst App = defineComponent({\n template: `\n <h1>{{ $truncate('My truncated long text') }}</h1>\n <h2>{{ truncatedText }}</h2>\n `,\n data() {\n  return {\n   truncatedText: this.$truncate('My 2nd truncated text')\n  }\n }\n});\n\nconst app = createApp(App);\napp.use(truncate, { limit: 10 })\napp.mount('#app')\n```", "```\n/* plugins/truncate.ts */\nexport default {\n  install(app: App<Element>, options: { limit: number }) {\n    //...\n    app.provide(\"plugins\", { truncate });\n  }\n}\n```", "```\n<script setup lang=\"ts\">\nimport { inject } from 'vue';\n\nconst { truncate } = inject('plugins');\nconst truncatedText = truncate('My 2nd truncated text');\n</script>\n```", "```\n<component is=\"targetComponentName\" />\n```", "```\n<template>\n  <div>Hello World</div>\n</template>\n```", "```\n<template>\n  <component is=\"HelloWorld\" />\n</template>\n<script lang=\"ts\">\nimport HelloWorld from \"@/components/HelloWorld\";\nimport { defineComponent } from \"vue\";\n\nexport defineComponent({\n components: { HelloWorld },\n});\n</script>\n```", "```\n<template>\n  <component :is=\"myComp\" />\n</template>\n<script lang=\"ts\">\nimport HelloWorld from \"@/components/HelloWorld\";\nimport { defineComponent } from \"vue\";\n\nexport defineComponent({\n data() {\n  return {\n   myComp: {\n    template: '<div>Hello World</div>'\n   }\n  }\n }\n});\n</script>\n```", "```\n<!--StepOne.vue-->\n<template>\n  <div>\n    <label for=\"name\">Step one's input</label>\n    <input v-model=\"name\" id=\"name\" />\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\n\nconst name = ref<string>(\"\");\n</script>\n```", "```\n<!--StepTwo.vue-->\n<template>\n  <h2>{{ name }}</h2>\n</template>\n<script setup lang=\"ts\">\nconst name = \"Step 2\";\n</script>\n```", "```\n<template>\n  <div>\n    <keep-alive>\n      <component :is=\"activeComp\" />\n    </keep-alive>\n    <div>\n      <button @click=\"activeComp = 'StepOne'\" v-if=\"activeComp === 'StepTwo'\">\n      Go to Step Two\n      </button>\n      <button @click=\"activeComp = 'StepTwo'\" v-else>Back to Step One</button>\n    </div>\n    </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport StepOne from \"./components/StepOne.vue\";\nimport StepTwo from \"./components/StepTwo.vue\";\n\nexport default defineComponent({\n  components: { StepTwo, StepOne },\n  data() {\n    return {\n      activeComp: \"StepOne\",\n    };\n  },\n});\n</script>\n```", "```\n<keep-alive max=\"2\">\n  <component :is=\"activeComp\" />\n </keep-alive>\n```"]