- en: Chapter 6\. Jobs and CronJobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章\. Jobs 和 CronJobs
- en: A Job models a one-time process—for example, a batch operation. The Pod and
    its encompassed containers stop running after the work has been completed. CronJobs
    run periodically according to their defined schedules. A good application for
    a CronJob is a task that needs to occur periodically (for example, a process that
    exports data). In this chapter you will learn how to configure, run, and inspect
    a Job and a CronJob.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Job 模型化一次性过程——例如批处理操作。当工作完成后，Pod 及其包含的容器停止运行。CronJobs 根据其定义的调度周期定期运行。CronJob
    的一个好应用场景是需要定期发生的任务（例如，导出数据的进程）。在本章中，您将学习如何配置、运行和检查 Job 和 CronJob。
- en: Working with Jobs
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Jobs 一起工作
- en: A Job is a Kubernetes primitive that runs functionality until a specified number
    of completions has been reached, making it a good fit for one-time operations
    like import/export data processes or I/O-intensive processes with a finite end.
    The actual work managed by a Job is still running inside of a Pod. Therefore,
    you can think of a Job as a higher-level coordination instance for Pods executing
    the workload. [Figure 6-1](#job_pod_relationship) shows the parent-child relationship
    between a Job and the Pod(s) it manages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Job 是 Kubernetes 的原语，运行功能，直到达到指定的完成数为止，非常适合一次性操作，如导入/导出数据过程或有限终端的 I/O 密集型过程。由
    Job 管理的实际工作仍在 Pod 内运行。因此，您可以将 Job 视为执行工作负载的更高级协调实例。[Figure 6-1](#job_pod_relationship)
    显示了 Job 与其管理的 Pod(s) 之间的父子关系。
- en: Upon completion of a Job and its Pods, Kubernetes does not automatically delete
    the objects—they will stay until they’re explicitly deleted. Keeping those objects
    helps with debugging the command run inside of the Pod and gives you a chance
    to inspect the logs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Job 及其 Pod 完成时，Kubernetes 不会自动删除这些对象——它们会一直保留，直到明确删除为止。保留这些对象有助于调试 Pod 内部运行的命令，并且让你有机会检查日志。
- en: '![ckd2 0601](Images/ckd2_0601.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0601](Images/ckd2_0601.png)'
- en: Figure 6-1\. Relationship between a Job and its Pods
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1\. Job 与其 Pods 之间的关系
- en: Auto-cleanup of Jobs and Pods
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jobs 和 Pods 的自动清理
- en: Kubernetes supports an [auto-cleanup mechanism for Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/)
    and their controlled Pods by specifying the YAML attribute `spec.ttlSe⁠condsAfterFinished`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 支持一个 [Job 的自动清理机制](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/)
    及其受控 Pod，通过指定 YAML 属性 `spec.ttlSecondsAfterFinished`。
- en: Creating and Inspecting Jobs
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和检查 Jobs
- en: Let’s first create a Job and observe its behavior in practice before delving
    into details. To create a Job imperatively, simply use the `create job` command.
    If the provided image doesn’t run any commands, you may want to append a command
    to be executed in the corresponding Pod.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个 Job 并观察其在实践中的行为，然后再深入细节。要即时创建一个 Job，只需使用`create job`命令。如果提供的镜像不运行任何命令，则可能需要附加要在相应
    Pod 中执行的命令。
- en: 'The following command creates a Job that runs an iteration process. For each
    iteration of the loop, a variable named `counter` is incremented. The command
    execution finishes after reaching the counter value 3:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令创建一个运行迭代过程的 Job。在循环的每次迭代中，一个名为 `counter` 的变量会递增。当计数器值达到 3 时，命令执行结束：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 6-1](#job_loop) shows the YAML manifest equivalent for the Job if
    you prefer the declarative approach.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 6-1](#job_loop) 显示了 Job 的 YAML 清单等效版本，如果您更喜欢声明性方法。'
- en: Example 6-1\. A Job executing a loop command
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1\. 执行循环命令的 Job
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO1-1)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO1-1)'
- en: The Pod template uses the same attributes available in a Pod definition.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 模板使用与 Pod 定义中相同的属性。
- en: 'The output of listing the Job shows the current number of completions and the
    expected number of completions. The default number of completions is 1\. This
    means if the Pod executing the command was successful, a Job is considered completed.
    As you can see in the following terminal output, a Job uses a single Pod by default
    to perform the work. The corresponding Pod can be identified by name—it uses the
    Job name as a prefix in its own name:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Job 的输出显示当前完成数和预期完成数。默认完成数为 1\. 这意味着如果执行命令的 Pod 成功，Job 就被视为完成。如下终端输出所示，默认情况下，一个
    Job 使用单个 Pod 执行工作。相应的 Pod 可以通过名称标识——它使用 Job 名称作为其名称的前缀：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To verify the correct behavior of the Job, you can download its logs. As expected,
    the output renders the counter for each iteration:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 若要验证 Job 的正确行为，可以下载其日志。预期地，输出会为每次迭代显示计数器：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can further tweak the runtime behavior of a Job. The next two sections discuss
    configuring the Job operation types and restart behavior.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以进一步调整作业的运行时行为。接下来的两个部分将讨论配置作业操作类型和重启行为。
- en: Job Operation Types
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业操作类型
- en: 'The default behavior of a Job is to run the workload in a single Pod and expect
    one successful completion. That’s what Kubernetes calls a *non-parallel* Job.
    Internally, those parameters are tracked by the attributes `spec.completions`
    and `spec.parallelism`, each with the assigned value 1\. The following command
    renders the parameters of the Job we created earlier:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作业的默认行为是在单个 Pod 中运行工作负载，并期望一次成功完成。这是 Kubernetes 称为*非并行*作业。这些参数在内部由属性 `spec.completions`
    和 `spec.parallelism` 跟踪，每个属性的分配值均为 1\. 以下命令呈现了我们之前创建的作业的参数：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can tweak any of those parameters to fit the needs of your use case. For
    example, if you expected the workload to complete successfully multiple times,
    then you’d increase the value of `spec.completions` to at least 2\. Sometimes,
    you’ll want to execute the workload by multiple pods in parallel. In those cases,
    you’d bump up the value assigned to `spec.parallelism`. This is referred to as
    a *parallel job*. Remember that you can use any combination of assigned values
    for both attributes. [Table 6-1](#configuration_for_different_job_operation_types)
    summarizes the different use cases.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调整任何这些参数以适应您的用例需求。例如，如果您期望工作负载成功完成多次，则可以将 `spec.completions` 的值增加至至少 2\.
    有时，您可能希望通过多个 Pod 并行执行工作负载。在这些情况下，您会增加分配给 `spec.parallelism` 的值。这被称为*并行作业*。请记住，您可以使用这两个属性的分配值的任何组合。[表 6-1](#configuration_for_different_job_operation_types)
    总结了不同的用例。
- en: Table 6-1\. Configuration for different Job operation types
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1\. 不同作业操作类型的配置
- en: '| Type | spec.completions | spec.parallelism | Description |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | spec.completions | spec.parallelism | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Non-parallel with one completion count | 1 | 1 | Completes as soon as its
    Pod terminates successfully. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 单次完成非并行 | 1 | 1 | 一旦其 Pod 成功终止，即完成。 |'
- en: '| Parallel with a fixed completion count | >= 1 | >= 1 | Completes when specified
    number of tasks finish successfully. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 固定完成计数并行 | >= 1 | >= 1 | 当指定数量的任务成功完成时完成。 |'
- en: '| Parallel with worker queue | unset | >= 1 | Completes when at least one Pod
    has terminated successfully and all Pods are terminated. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 工作队列并行 | 未设置 | >= 1 | 当至少一个 Pod 成功终止且所有 Pod 都终止时完成。 |'
- en: Restart Behavior
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重启行为
- en: The `spec.backoffLimit` attribute determines the number of retries a Job attempts
    to successfully complete the workload until the executed command finishes with
    an exit code 0\. The default is 6, which means it will execute the workload 6
    times before the Job is considered unsuccessful.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`spec.backoffLimit` 属性确定作业尝试成功完成工作负载的重试次数，直到执行的命令以退出代码 0 结束。默认值为 6，这意味着作业在被认为失败之前将执行工作负载
    6 次。'
- en: The Job manifest needs to explicitly declare the restart policy by using `spec.tem⁠plate.spec.restartPolicy`.
    The default restart policy of a Pod is `Always`, which tells the Kubernetes scheduler
    to *always* restart the Pod even if the container exits with a 0 exit code. The
    restart policy of a Job can be only `OnFailure` or `Never`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作业清单需要通过 `spec.tem⁠plate.spec.restartPolicy` 明确声明重启策略。Pod 的默认重启策略是 `Always`，告诉
    Kubernetes 调度器即使容器以 0 的退出代码退出，也会*始终*重新启动 Pod。作业的重启策略只能是 `OnFailure` 或 `Never`。
- en: Restarting the container on failure
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在容器失败时重新启动
- en: '[Figure 6-2](#job_restartpolicy_onfailure) shows the behavior of a Job that
    uses the restart policy `OnFailure`. Upon a container failure, this policy will
    simply rerun the container.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-2](#job_restartpolicy_onfailure) 展示了使用重启策略 `OnFailure` 的作业的行为。在容器失败时，该策略将简单地重新运行容器。'
- en: '![ckd2 0602](Images/ckd2_0602.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0602](Images/ckd2_0602.png)'
- en: Figure 6-2\. Restart policy *onFailure*
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-2\. 重启策略 *onFailure*
- en: Starting a new Pod on failure
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 失败时启动新的 Pod
- en: '[Figure 6-3](#job_restartpolicy_never) shows the behavior of a Job that uses
    the restart policy `Never`. This policy does not restart the container upon a
    failure. It starts a new Pod instead.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-3](#job_restartpolicy_never) 展示了使用重启策略 `Never` 的作业的行为。该策略在容器失败时不会重新启动容器，而是启动一个新的
    Pod。'
- en: '![ckd2 0603](Images/ckd2_0603.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0603](Images/ckd2_0603.png)'
- en: Figure 6-3\. Restart policy `Never`
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-3\. 重启策略 `Never`
- en: Working with CronJobs
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CronJobs
- en: A Job represents a finite operation. Once the operation can be executed successfully,
    the work is done and the Job will create no more Pods. A CronJob creates a new
    Job object periodically based a schedule. The Pods controlled by the Job handle
    the actual workload. [Figure 6-4](#cronjob_job_pod_relationship) illustrates the
    relationship between a CronJob, the Job it manages, and the Pods that execute
    the workload.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作业表示有限操作。一旦操作成功执行，作业完成并且不再创建新的 Pod。CronJob 根据计划定期创建新的作业对象。由作业控制的 Pod 处理实际工作负载。[图 6-4](#cronjob_job_pod_relationship)展示了
    CronJob、它管理的作业及执行工作负载的 Pod 之间的关系。
- en: '![ckd2 0604](Images/ckd2_0604.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0604](Images/ckd2_0604.png)'
- en: Figure 6-4\. Relationship between a CronJob, Job, and its Pods
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-4\. CronJob、作业及其 Pod 之间的关系
- en: The schedule can be defined with a cron-expression you may already know from
    Unix cron jobs. [Figure 6-5](#cronjob_schedule) shows a CronJob that executes
    every hour. For every execution, the CronJob creates a new Pod that runs the task
    and finishes with a 0 or non-zero exit code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似于 Unix cron 作业的 cron 表达式定义计划。[图 6-5](#cronjob_schedule)显示了每小时执行一次的 CronJob。每次执行时，CronJob
    创建一个新的 Pod 执行任务，并以 0 或非零退出代码完成。
- en: '![ckd2 0605](Images/ckd2_0605.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0605](Images/ckd2_0605.png)'
- en: Figure 6-5\. Executing a Job based on a schedule
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-5\. 根据计划执行作业
- en: Creating and Inspecting CronJobs
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和检查 CronJob
- en: 'You can use the imperative `create cronjob` command to create a new CronJob.
    The following command schedules the CronJob to run every minute. The Pod created
    for every execution renders the current date to standard output using the Unix
    `echo` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用命令式的`create cronjob`命令创建新的 CronJob。以下命令安排 CronJob 每分钟运行一次。每次执行时创建的 Pod
    使用 Unix 的`echo`命令将当前日期渲染到标准输出：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To create a CronJob from the YAML manifest, use the definition shown in [Example 6-2](#cronjob_date).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 YAML 文件创建 CronJob，请使用[示例 6-2](#cronjob_date)中显示的定义。
- en: Example 6-2\. A CronJob printing the current date
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. 打印当前日期的 CronJob
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO2-1)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO2-1)'
- en: Defines the cron expression that determines when a new Job object needs to be
    created.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 定义确定何时需要创建新的作业对象的 cron 表达式。
- en: '[![2](Images/2.png)](#co_jobs_and_cronjobs_CO2-2)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_jobs_and_cronjobs_CO2-2)'
- en: The section that describes the Job template.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 描述作业模板的部分。
- en: 'If you list the existing CronJob with the `get cronjobs` command, you will
    see the schedule, the last scheduled execution, and whether the CronJob is currently
    active:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`get cronjobs`命令列出现有的 CronJob，则会看到计划、上次计划执行以及 CronJob 是否当前活动：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It’s easy to match Jobs and Pods created by a CronJob. You can simply identify
    them by the name prefix. In this case, the prefix is `current-date-`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易匹配由 CronJob 创建的作业和 Pod。您可以通过名称前缀简单地识别它们。在这种情况下，前缀是`current-date-`：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring Retained Job History
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置保留的作业历史记录
- en: 'Even after a task in a Pod controlled by a CronJob completes, it will not be
    deleted automatically. Keeping a historical record of Pods can be tremendously
    helpful for troubleshooting failed workloads or inspecting the logs. By default,
    a CronJob retains the last three successful Pods and the last failed Pod:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 即使由 CronJob 控制的 Pod 中的任务完成后，它也不会自动删除。保留 Pod 的历史记录可以极大地帮助排查失败的工作负载或检查日志。默认情况下，CronJob
    保留最后三个成功的 Pod 和最后一个失败的 Pod：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To reconfigure the job retention history limits, set new values for the `spec.successfulJobsHistoryLimit`
    and `spec.failedJobsHistoryLimit` attributes. [Example 6-3](#cronjob_retention_history_limits)
    keeps the last five successful executions and the last three failed executions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新配置作业保留历史记录限制，请为`spec.successfulJobsHistoryLimit`和`spec.failedJobsHistoryLimit`属性设置新值。[示例 6-3](#cronjob_retention_history_limits)保留了最近五次成功执行和最后三次失败执行。
- en: Example 6-3\. A CronJob configuring retention history limits
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 配置保留历史记录限制的 CronJob
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO3-1)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO3-1)'
- en: Defines the number of successful Jobs kept in the history.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 定义保留的成功作业数。
- en: '[![2](Images/2.png)](#co_jobs_and_cronjobs_CO3-2)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_jobs_and_cronjobs_CO3-2)'
- en: Defines the number of failed Jobs kept in the history.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 定义保留的失败作业数。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Jobs are well suited for implementing batch processes run in one or many Pods
    as a finite operation. Both objects, the Job and the Pod, will not be deleted
    after the work is completed to support inspection and troubleshooting activities.
    A CronJob is very similar to a Job but executes on a schedule, defined as a Unix
    cron expression.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 工作很适合实施作为有限操作在一个或多个 Pod 中运行的批处理过程。作业和 Pod 这两个对象在工作完成后不会被删除，以支持检查和故障排除活动。CronJob
    与作业非常相似，但是按照 Unix cron 表达式的计划执行。
- en: Exam Essentials
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Understand practical use cases of Jobs and CronJobs
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 了解作业和 CronJob 的实际用例
- en: Jobs and CronJobs manage Pods that should finish the work at least once or periodically.
    You will need to understand the creation of those objects and how to inspect them
    at runtime. Make sure to play around with the different configuration options
    and how they affect the runtime behavior.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作业和 CronJob 管理应至少完成一次或定期完成的 Pod。您需要理解这些对象的创建方式以及如何在运行时检查它们。确保尝试不同的配置选项以及它们如何影响运行时行为。
- en: Practice different Job operational modes
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 练习不同的作业操作模式
- en: 'Jobs can operate in three modes: non-parallel with one completion count, in
    parallel with a fixed completion count, and in parallel with worker queue. The
    default behavior of a Job is to run the workload in a single Pod and expect one
    successful completion (non-parallel Job). The attribute `spec.completions` controls
    the number of required successful completions. The attribute `spec.par⁠allelism`
    allows for executing the workload by multiple Pods in parallel.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作业可以在三种模式下运行：非并行模式，具有固定完成计数的并行模式以及具有工作队列的并行模式。作业的默认行为是在单个 Pod 中运行工作负载并期望一次成功完成（非并行作业）。属性
    `spec.completions` 控制所需的成功完成数。属性 `spec.parallelism` 允许多个 Pod 并行执行工作负载。
- en: Sample Exercises
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_002.xhtml#appendix_a_jobs_cronjobs).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可以在 [附录 A](app01_split_002.xhtml#appendix_a_jobs_cronjobs) 中找到。
- en: Create a Job named `random-hash` using the container image `alpine:3.17.3` that
    executes the shell command `echo $RANDOM | base64 | head -c 20`. Configure the
    Job to execute with two Pods in parallel. The number of completions should be
    set to 5.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用容器镜像 `alpine:3.17.3` 创建名为 `random-hash` 的作业，该作业执行 shell 命令 `echo $RANDOM |
    base64 | head -c 20`。配置作业以两个 Pod 并行执行。完成次数应设置为 5。
- en: Identify the Pods that executed the shell command. How many Pods do you expect
    to exist?
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定执行了 shell 命令的 Pod。您期望存在多少个 Pod？
- en: Retrieve the generated hash from one of the Pods.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从其中一个 Pod 中检索生成的哈希。
- en: Delete the Job. Will the corresponding Pods continue to exist?
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除作业。相应的 Pod 是否会继续存在？
- en: Create a new CronJob named `google-ping`. When executed, the Job should run
    a `curl` command for `google.com`. Pick an appropriate image. The execution should
    occur every two minutes.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `google-ping` 的新 CronJob。执行时，作业应该运行一个 `curl` 命令访问 `google.com`。选择合适的镜像。执行应每两分钟进行一次。
- en: Watch the creation of the underlying Jobs managed by the CronJob. Check the
    command-line options of the relevant command or consult the [Kubernetes documentation](https://kubernetes.io/docs/reference/kubectl).
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 观察由 CronJob 管理的基础作业的创建。检查相关命令的命令行选项或参考 [Kubernetes 文档](https://kubernetes.io/docs/reference/kubectl)。
- en: Reconfigure the CronJob to retain a history of seven executions.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新配置 CronJob 以保留七次执行的历史记录。
- en: Reconfigure the CronJob to disallow a new execution if the current execution
    is still running. Consult the [Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#concurrency-policy)
    for more information.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新配置 CronJob，以防止当前执行仍在运行时禁止新执行。更多信息，请参考 [Kubernetes 文档](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#concurrency-policy)。
