- en: Chapter 6\. Jobs and CronJobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Job models a one-time process—for example, a batch operation. The Pod and
    its encompassed containers stop running after the work has been completed. CronJobs
    run periodically according to their defined schedules. A good application for
    a CronJob is a task that needs to occur periodically (for example, a process that
    exports data). In this chapter you will learn how to configure, run, and inspect
    a Job and a CronJob.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Job is a Kubernetes primitive that runs functionality until a specified number
    of completions has been reached, making it a good fit for one-time operations
    like import/export data processes or I/O-intensive processes with a finite end.
    The actual work managed by a Job is still running inside of a Pod. Therefore,
    you can think of a Job as a higher-level coordination instance for Pods executing
    the workload. [Figure 6-1](#job_pod_relationship) shows the parent-child relationship
    between a Job and the Pod(s) it manages.
  prefs: []
  type: TYPE_NORMAL
- en: Upon completion of a Job and its Pods, Kubernetes does not automatically delete
    the objects—they will stay until they’re explicitly deleted. Keeping those objects
    helps with debugging the command run inside of the Pod and gives you a chance
    to inspect the logs.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0601](Images/ckd2_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Relationship between a Job and its Pods
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Auto-cleanup of Jobs and Pods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes supports an [auto-cleanup mechanism for Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/)
    and their controlled Pods by specifying the YAML attribute `spec.ttlSe⁠condsAfterFinished`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and Inspecting Jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s first create a Job and observe its behavior in practice before delving
    into details. To create a Job imperatively, simply use the `create job` command.
    If the provided image doesn’t run any commands, you may want to append a command
    to be executed in the corresponding Pod.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command creates a Job that runs an iteration process. For each
    iteration of the loop, a variable named `counter` is incremented. The command
    execution finishes after reaching the counter value 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 6-1](#job_loop) shows the YAML manifest equivalent for the Job if
    you prefer the declarative approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1\. A Job executing a loop command
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The Pod template uses the same attributes available in a Pod definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of listing the Job shows the current number of completions and the
    expected number of completions. The default number of completions is 1\. This
    means if the Pod executing the command was successful, a Job is considered completed.
    As you can see in the following terminal output, a Job uses a single Pod by default
    to perform the work. The corresponding Pod can be identified by name—it uses the
    Job name as a prefix in its own name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the correct behavior of the Job, you can download its logs. As expected,
    the output renders the counter for each iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can further tweak the runtime behavior of a Job. The next two sections discuss
    configuring the Job operation types and restart behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Job Operation Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default behavior of a Job is to run the workload in a single Pod and expect
    one successful completion. That’s what Kubernetes calls a *non-parallel* Job.
    Internally, those parameters are tracked by the attributes `spec.completions`
    and `spec.parallelism`, each with the assigned value 1\. The following command
    renders the parameters of the Job we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can tweak any of those parameters to fit the needs of your use case. For
    example, if you expected the workload to complete successfully multiple times,
    then you’d increase the value of `spec.completions` to at least 2\. Sometimes,
    you’ll want to execute the workload by multiple pods in parallel. In those cases,
    you’d bump up the value assigned to `spec.parallelism`. This is referred to as
    a *parallel job*. Remember that you can use any combination of assigned values
    for both attributes. [Table 6-1](#configuration_for_different_job_operation_types)
    summarizes the different use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-1\. Configuration for different Job operation types
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | spec.completions | spec.parallelism | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Non-parallel with one completion count | 1 | 1 | Completes as soon as its
    Pod terminates successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| Parallel with a fixed completion count | >= 1 | >= 1 | Completes when specified
    number of tasks finish successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| Parallel with worker queue | unset | >= 1 | Completes when at least one Pod
    has terminated successfully and all Pods are terminated. |'
  prefs: []
  type: TYPE_TB
- en: Restart Behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `spec.backoffLimit` attribute determines the number of retries a Job attempts
    to successfully complete the workload until the executed command finishes with
    an exit code 0\. The default is 6, which means it will execute the workload 6
    times before the Job is considered unsuccessful.
  prefs: []
  type: TYPE_NORMAL
- en: The Job manifest needs to explicitly declare the restart policy by using `spec.tem⁠plate.spec.restartPolicy`.
    The default restart policy of a Pod is `Always`, which tells the Kubernetes scheduler
    to *always* restart the Pod even if the container exits with a 0 exit code. The
    restart policy of a Job can be only `OnFailure` or `Never`.
  prefs: []
  type: TYPE_NORMAL
- en: Restarting the container on failure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 6-2](#job_restartpolicy_onfailure) shows the behavior of a Job that
    uses the restart policy `OnFailure`. Upon a container failure, this policy will
    simply rerun the container.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0602](Images/ckd2_0602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. Restart policy *onFailure*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Starting a new Pod on failure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 6-3](#job_restartpolicy_never) shows the behavior of a Job that uses
    the restart policy `Never`. This policy does not restart the container upon a
    failure. It starts a new Pod instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0603](Images/ckd2_0603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. Restart policy `Never`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Working with CronJobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Job represents a finite operation. Once the operation can be executed successfully,
    the work is done and the Job will create no more Pods. A CronJob creates a new
    Job object periodically based a schedule. The Pods controlled by the Job handle
    the actual workload. [Figure 6-4](#cronjob_job_pod_relationship) illustrates the
    relationship between a CronJob, the Job it manages, and the Pods that execute
    the workload.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0604](Images/ckd2_0604.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-4\. Relationship between a CronJob, Job, and its Pods
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The schedule can be defined with a cron-expression you may already know from
    Unix cron jobs. [Figure 6-5](#cronjob_schedule) shows a CronJob that executes
    every hour. For every execution, the CronJob creates a new Pod that runs the task
    and finishes with a 0 or non-zero exit code.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 0605](Images/ckd2_0605.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-5\. Executing a Job based on a schedule
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating and Inspecting CronJobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the imperative `create cronjob` command to create a new CronJob.
    The following command schedules the CronJob to run every minute. The Pod created
    for every execution renders the current date to standard output using the Unix
    `echo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To create a CronJob from the YAML manifest, use the definition shown in [Example 6-2](#cronjob_date).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-2\. A CronJob printing the current date
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the cron expression that determines when a new Job object needs to be
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_jobs_and_cronjobs_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The section that describes the Job template.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you list the existing CronJob with the `get cronjobs` command, you will
    see the schedule, the last scheduled execution, and whether the CronJob is currently
    active:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s easy to match Jobs and Pods created by a CronJob. You can simply identify
    them by the name prefix. In this case, the prefix is `current-date-`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Retained Job History
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even after a task in a Pod controlled by a CronJob completes, it will not be
    deleted automatically. Keeping a historical record of Pods can be tremendously
    helpful for troubleshooting failed workloads or inspecting the logs. By default,
    a CronJob retains the last three successful Pods and the last failed Pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To reconfigure the job retention history limits, set new values for the `spec.successfulJobsHistoryLimit`
    and `spec.failedJobsHistoryLimit` attributes. [Example 6-3](#cronjob_retention_history_limits)
    keeps the last five successful executions and the last three failed executions.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-3\. A CronJob configuring retention history limits
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_jobs_and_cronjobs_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the number of successful Jobs kept in the history.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_jobs_and_cronjobs_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the number of failed Jobs kept in the history.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jobs are well suited for implementing batch processes run in one or many Pods
    as a finite operation. Both objects, the Job and the Pod, will not be deleted
    after the work is completed to support inspection and troubleshooting activities.
    A CronJob is very similar to a Job but executes on a schedule, defined as a Unix
    cron expression.
  prefs: []
  type: TYPE_NORMAL
- en: Exam Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understand practical use cases of Jobs and CronJobs
  prefs: []
  type: TYPE_NORMAL
- en: Jobs and CronJobs manage Pods that should finish the work at least once or periodically.
    You will need to understand the creation of those objects and how to inspect them
    at runtime. Make sure to play around with the different configuration options
    and how they affect the runtime behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Practice different Job operational modes
  prefs: []
  type: TYPE_NORMAL
- en: 'Jobs can operate in three modes: non-parallel with one completion count, in
    parallel with a fixed completion count, and in parallel with worker queue. The
    default behavior of a Job is to run the workload in a single Pod and expect one
    successful completion (non-parallel Job). The attribute `spec.completions` controls
    the number of required successful completions. The attribute `spec.par⁠allelism`
    allows for executing the workload by multiple Pods in parallel.'
  prefs: []
  type: TYPE_NORMAL
- en: Sample Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solutions to these exercises are available in [Appendix A](app01_split_002.xhtml#appendix_a_jobs_cronjobs).
  prefs: []
  type: TYPE_NORMAL
- en: Create a Job named `random-hash` using the container image `alpine:3.17.3` that
    executes the shell command `echo $RANDOM | base64 | head -c 20`. Configure the
    Job to execute with two Pods in parallel. The number of completions should be
    set to 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the Pods that executed the shell command. How many Pods do you expect
    to exist?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Retrieve the generated hash from one of the Pods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Delete the Job. Will the corresponding Pods continue to exist?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new CronJob named `google-ping`. When executed, the Job should run
    a `curl` command for `google.com`. Pick an appropriate image. The execution should
    occur every two minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch the creation of the underlying Jobs managed by the CronJob. Check the
    command-line options of the relevant command or consult the [Kubernetes documentation](https://kubernetes.io/docs/reference/kubectl).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reconfigure the CronJob to retain a history of seven executions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reconfigure the CronJob to disallow a new execution if the current execution
    is still running. Consult the [Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#concurrency-policy)
    for more information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
