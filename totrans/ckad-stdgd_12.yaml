- en: Chapter 12\. Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Helm](https://helm.sh) is a templating engine and package manager for a set
    of Kubernetes manifests. At runtime, it replaces placeholders in YAML template
    files with actual, end-user-defined values. The artifact produced by the Helm
    executable is a so-called *chart file* bundling the manifests that comprise the
    API resources of an application. You can upload the chart file to a *chart repository*
    so that other teams can be use it to deploy the bundled manifests. The Helm ecosystem
    offers a wide range of reusable charts for common use cases searchable on [Artifact
    Hub](https://artifacthub.io/) (for example, for running Grafana or PostgreSQL).'
  prefs: []
  type: TYPE_NORMAL
- en: Due to the wealth of functionality available to Helm, we’ll discuss only the
    basics. The exam does not expect you be a Helm expert; rather, it wants you to
    be familiar with the workflow of installing existing packages with Helm. Building
    and publishing your own charts is outside the scope of the exam. For more detailed
    information on Helm, see the [user documentation](https://helm.sh/docs). The version
    of Helm used to describe the functionality here is 3.13.0.
  prefs: []
  type: TYPE_NORMAL
- en: Managing an Existing Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, you want to reuse existing functionality instead of putting
    in the work to define and configure it yourself. For example, you may want to
    install the open source monitoring service Prometheus on your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus requires the installation of multiple Kubernetes primitives. Thankfully,
    the Kubernetes community provided a Helm chart making it very easy to install
    and configure all the moving parts in the form of a [Kubernetes operator](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list shows the typical workflow for consuming and managing a
    Helm chart. Most of those steps need to use the `helm` executable:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the chart you’d like to install
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the repository containing the chart
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the chart from the repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifying the Kubernetes objects that have been installed by the chart
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rendering the list of installed charts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upgrading an installed chart
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uninstalling a chart if its functionality is no longer needed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following sections will explain each of the steps.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying a Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over the years, the Kubernetes community implemented and published thousands
    of Helm charts. Artifact Hub provides a web-based search capability for discovering
    charts by keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Say you wanted to find a chart that installs the Continuous Integration solution
    Jenkins. All you’d need to do is to enter the term “jenkins” into the search box
    and press the enter key. [Figure 12-1](#artifact_hub_search_jenkins) shows the
    list of results in Artifact Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 1201](Images/ckd2_1201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. Searching for a Jenkins chart on Artifact Hub
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: At the time of writing, there are 141 matches for the search term. You will
    be able to inspect details about the chart by clicking on one of the search results,
    which includes a high-level description and the repository that the chart file
    resides in. Moreover, you can inspect the templates bundled with the chart file,
    indicating the objects that will be created upon installation and their configuration
    options. [Figure 12-2](#artifact_hub_jenkins_chart_details) shows the page for
    the official Jenkins chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 1202](Images/ckd2_1202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. Jenkins chart details
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You cannot install a chart directly from Artifact Hub. You must install it from
    the repository hosting the chart file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Chart Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The chart description may mention the repository that hosts the chart file.
    Alternatively, you can click on the “Install” button to render repository details
    and the command for adding it. [Figure 12-3](#artifact_hub_jenkins_chart_install)
    shows the contextual pop-up that appears after clicking the “Install” button.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, a Helm installation defines no external repositories. The following
    command shows how to list all registered repositories. No repositories have been
    registered yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![ckd2 1203](Images/ckd2_1203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-3\. Jenkins chart installation instructions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see from the screenshot, the chart file lives in the repository with
    the URL [*https://charts.jenkins.io*](https://charts.jenkins.io). We will need
    to add this repository. This is an one-time operation. You can install other charts
    from that repository or you can update a chart that originated from that repository
    with commands we’ll discuss in a later section.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to provide a name for the repository when registering one. Make the
    repository name as descriptive as possible. The following command registers the
    repository with the name `jenkinsci`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing the repositories now shows the mapping between name and URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You permanently added the repository to the Helm installation.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for a Chart in a Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The “Install” pop-up window already provided the command to install the chart.
    You can also search the repository for available charts in case you do not know
    their names or latest versions. Add the `--versions` flag to list all available
    versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The latest version available is 4.6.5\. This may be different if you run the
    command on your machine, given that the Jenkins project may have released a newer
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s assume that the latest version of the Helm chart contains a security
    vulnerability. Therefore, we decide to install the Jenkins chart with the previous
    version, 4.6.4\. You need to assign a name to be able to identify an installed
    chart. The name we’ll use here is `my-jenkins`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The chart automatically created the Kubernetes objects in the `default` namespace.
    You can use the following command to discover the most important resource types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The chart has been installed with the default configuration options. You can
    inspect those default values by clicking on the “Default Values” button on the
    chart page, as shown in [Figure 12-4](#artifact_hub_jenkins_chart_default_values).
  prefs: []
  type: TYPE_NORMAL
- en: '![ckd2 1204](Images/ckd2_1204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-4\. Jenkins chart default values
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can also discover those configuration options using the following command.
    The output shown renders only a subset of values, the admin username and its password,
    represented by `controller.adminUser` and `controller.adminPassword`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can customize any configuration value when installing the chart. To pass
    configuration data during the install processing use one of the following flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--values`: Specifies the overrides in the form of a pointer to a YAML manifest
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--set`: Specifies the overrides directly from the command line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information, see [“Customizing the Chart Before Installing”](https://helm.sh/docs/intro/using_helm/#customizing-the-chart-before-installing)
    in the Helm documentation.
  prefs: []
  type: TYPE_NORMAL
- en: You can decide to install the chart into a custom namespace. Use the `-n` flag
    to provide the name of an existing namespace. Add the flag `--create-namespace`
    to automatically create the namespace if it doesn’t exist yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command shows how to customize some of the values and the namespace
    used during the installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We specifically set the username and the password for the admin user. Helm created
    the objects controlled by the chart into the `jenkins` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Listing Installed Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Charts can live in the `default` namespace or a custom namespace. You can inspect
    the list of installed charts using the `helm list` command. If you do not know
    which namespace, simply add the `--all-namespaces` flag to the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The output of the command includes the column `NAMESPACE` that shows the namespace
    used by a particular chart. Similar to the use of `kubectl`, the `helm list` command
    provides the option `-n` for spelling out a namespace. Providing no flag(s) with
    the command will return the result for the `default` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading an Installed Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Upgrading an installed chart usually means moving to a new chart version. You
    can poll for new versions available in the repository by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'What if you want to upgrade your existing chart installation to a newer chart
    version? Run the following command to upgrade the chart to that specific version
    with the default configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As with the `install` command, you will have to provide custom configuration
    values if you want to tweak the chart’s runtime behavior when upgrading a chart.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling a Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you no longer need to run a chart. The command for uninstalling a
    chart is straightforward, as shown here. It will delete all objects controlled
    by the chart. Don’t forgot to provide the `-n` flag if you previously installed
    the chart into a namespace other than `default`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Executing the command may take up to 30 seconds, as Kubernetes needs to wait
    for the workload grace period to end.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm has evolved to become a de facto tool for deploying application stacks
    to Kubernetes. The artifact that contains the manifest files, default configuration
    values, and metadata is called a chart. A team or an individual can publish charts
    to a chart repository. Users can discover a published chart through the Artifact
    Hub user interface and install it to a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: One of the primary developer workflows when using Helm consists of finding,
    installing, and upgrading a chart with a specific version. You start by registering
    the repository containing chart files you want to consume. The `helm install`
    command downloads the chart file and stores it in a local cache. It also creates
    the Kubernetes objects described by the chart.
  prefs: []
  type: TYPE_NORMAL
- en: The installation process is configurable. A developer can provide overrides
    for customizable configuration values. The `helm upgrade` command lets you upgrade
    the version of an already installed chart. To uninstall a chart and delete all
    Kubernetes objects managed by the chart, run the `helm uninstall` command.
  prefs: []
  type: TYPE_NORMAL
- en: Exam Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assume that the Helm executable is preinstalled
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the [exam FAQ](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks)
    does not mention any details about the Helm executable or the Helm version to
    expect. It’s fair to assume that it will be preinstalled for you and therefore
    you do not need to memorize installation instructions. You will be able to browse
    the [Helm documentation pages](https://helm.sh/docs).
  prefs: []
  type: TYPE_NORMAL
- en: Become familiar with Artifact Hub
  prefs: []
  type: TYPE_NORMAL
- en: Artifact Hub provides a web-based UI for Helm charts. It’s worthwhile to explore
    the search capabilities and the details provided by individual charts, more specifically
    the repository the chart file lives in, and its configurable values. During the
    exam, you’ll likely not be asked to navigate to Artifact Hub because its URL hasn’t
    been listed as one of the permitted documentation pages. You can assume that the
    exam question will provide you with the repository URL.
  prefs: []
  type: TYPE_NORMAL
- en: Practice commands needed to consume existing Helm charts
  prefs: []
  type: TYPE_NORMAL
- en: The exam does not ask you to build and publish your own chart file. All you
    need to understand is how to consume an existing chart. You will need to be familiar
    with the `helm repo add` command to register a repository, the `helm search repo`
    to find available chart versions, and the `helm install` command to install a
    chart. You should have a basic understanding of the upgrade process for an already
    installed Helm chart using the `helm upgrade` command.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solutions to these exercises are available in [Appendix A](app01_split_008.xhtml#appendix_a_helm).
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you will use Helm to install Kubernetes objects needed for
    the open source monitoring solution [Prometheus](https://prometheus.io/). The
    easiest way to install Prometheus on top of Kubernetes is with the help of the
    [prometheus-operator](https://prometheus-operator.dev/) Helm chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can search for the [kube-prometheus-stack](https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack)
    on Artifact Hub. Add the repository to the list of known repositories accessible
    by Helm with the name `prometheus-community`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update to the latest information about charts from the respective chart repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the Helm command for listing available Helm charts and their versions. Identify
    the latest chart version for `kube-prometheus-stack`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install the the chart `kube-prometheus-stack`. List the installed Helm chart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: List the Service named `prometheus-operated` created by the Helm chart. The
    object resides in the `default` namespace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the kubectl `port-forward` command to forward the local port 8080 to the
    port 9090 of the Service. Open a browser and bring up the Prometheus dashboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop port forwarding and uninstall the Helm chart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
