["```\nclass Greeter {\n    greet(name: string) {\n        console.log(`${name}, do your stuff!`);\n    }\n}\n\nnew Greeter().greet(\"Miss Frizzle\"); // Ok\n\nnew Greeter().greet();\n//            ~~~~~\n// Error: Expected 1 arguments, but got 0.\n```", "```\nclass Greeted {\n    constructor(message: string) {\n        console.log(`As I always say: ${message}!`);\n    }\n}\n\nnew Greeted(\"take chances, make mistakes, get messy\");\n\nnew Greeted();\n// Error: Expected 1 arguments, but got 0.\n```", "```\nclass FieldTrip {\n    destination: string;\n\n    constructor(destination: string) {\n        this.destination = destination; // Ok\n        console.log(`We're going to ${this.destination}!`);\n\n        this.nonexistent = destination;\n        //   ~~~~~~~~~~~\n        // Error: Property 'nonexistent' does not exist on type 'FieldTrip'.\n    }\n}\n```", "```\nconst trip = new FieldTrip(\"planetarium\");\n\ntrip.destination; // Ok\n\ntrip.nonexistent;\n//   ~~~~~~~~~~~\n// Error: Property 'nonexistent' does not exist on type 'FieldTrip'.\n```", "```\nclass WithMethod {\n    myMethod() {}\n}\n\nnew WithMethod().myMethod === new WithMethod().myMethod; // true\n```", "```\nclass WithProperty {\n    myProperty: () => {}\n}\n\nnew WithMethod().myProperty === new WithMethod().myProperty; // false\n```", "```\nclass WithPropertyParameters {\n    takesParameters = (input: boolean) => input ? \"Yes\" : \"No\";\n}\n\nconst instance = new WithPropertyParameters();\n\ninstance.takesParameters(true); // Ok\n\ninstance.takesParameters(123);\n//                       ~~~\n// Error: Argument of type 'number' is not\n// assignable to parameter of type 'boolean'.\n```", "```\nclass WithValue {\n    immediate = 0; // Ok\n    later: number; // Ok (set in the constructor)\n    mayBeUndefined: number | undefined; // Ok (allowed to be undefined)\n\n    unused: number;\n    // Error: Property 'unused' has no initializer\n    // and is not definitely assigned in the constructor.\n\n    constructor() {\n        this.later = 1;\n    }\n}\n```", "```\nclass MissingInitializer {\n    property: string;\n}\n\nnew MissingInitializer().property.length;\n// TypeError: Cannot read property 'length' of undefined\n```", "```\nclass ActivitiesQueue {\n    pending!: string[]; // Ok\n\n    initialize(pending: string[]) {\n        this.pending = pending;\n    }\n\n    next() {\n        return this.pending.pop();\n    }\n}\n\nconst activities = new ActivitiesQueue();\n\nactivities.initialize(['eat', 'sleep', 'learn'])\nactivities.next();\n```", "```\nclass MissingInitializer {\n    property?: string;\n}\n\nnew MissingInitializer().property?.length; // Ok\n\nnew MissingInitializer().property.length;\n// Error: Object is possibly 'undefined'.\n```", "```\nclass Quote {\n    readonly text: string;\n\n    constructor(text: string) {\n        this.text = ;\n    }\n\n    emphasize() {\n        this.text += \"!\";\n        //   ~~~~\n        // Error: Cannot assign to 'text' because it is a read-only property.\n    }\n}\n\nconst quote = new Quote(\n    \"There is a brilliant child locked inside every student.\"\n);\n\nQuote.text = \"Ha!\";\n// Error: Cannot assign to 'text' because it is a read-only property.\n```", "```\nclass RandomQuote {\n    readonly explicit: string = \"Home is the nicest word there is.\";\n    readonly implicit = \"Home is the nicest word there is.\";\n\n    constructor() {\n        if (Math.random () > 0.5) {\n            this.explicit = \"We start learning the minute we're born.\" // Ok;\n\n            this.implicit = \"We start learning the minute we're born.\";\n            // Error: Type '\"We start learning the minute we're born.\"' is\n            // not assignable to type '\"Home is the nicest word there is.\"'.\n        }\n    }\n}\n\nconst quote = new RandomQuote();\n\nquote.explicit; // Type: string\nquote.implicit; // Type: \"Home is the nicest word there is.\"\n```", "```\nclass Teacher {\n    sayHello() {\n        console.log(\"Take chances, make mistakes, get messy!\");\n    }\n}\n\nlet teacher: Teacher;\n\nteacher = new Teacher(); // Ok\n\nteacher = \"Wahoo!\";\n// Error: Type 'string' is not assignable to type 'Teacher'.\n```", "```\nclass SchoolBus {\n    getAbilities() {\n        return [\"magic\", \"shapeshifting\"];\n    }\n}\n\nfunction withSchoolBus(bus: SchoolBus) {\n    console.log(bus.getAbilities());\n}\n\nwithSchoolBus(new SchoolBus()); // Ok\n\n// Ok\nwithSchoolBus({\n    getAbilities: () => [\"transmogrification\"],\n});\n\nwithSchoolBus({\n    getAbilities: () => 123,\n    //                  ~~~\n    // Error: Type 'number' is not assignable to type 'string[]'.\n});\n```", "```\ninterface Learner {\n    name: string;\n    study(hours: number): void;\n}\n\nclass Student implements Learner {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    study(hours: number) {\n        for (let i = 0; i < hours; i+= 1) {\n            console.log(\"...studying...\");\n        }\n    }\n}\n\nclass Slacker implements Learner {\n   // ~~~~~~~\n   // Error: Class 'Slacker' incorrectly implements interface 'Learner'.\n   //  Property 'study' is missing in type 'Slacker'\n   //  but required in type 'Learner'.\n    name = \"Rocky\";\n}\n```", "```\nclass Student implements Learner {\n    name;\n    // Error: Member 'name' implicitly has an 'any' type.\n\n    study(hours) {\n        // Error: Parameter 'hours' implicitly has an 'any' type.\n    }\n}\n```", "```\ninterface Graded {\n    grades: number[];\n}\n\ninterface Reporter {\n    report: () => string;\n}\n\nclass ReportCard implements Graded, Reporter {\n    grades: number[];\n\n    constructor(grades: number[]) {\n        this.grades = grades;\n    }\n\n    report() {\n        return this.grades.join(\", \");\n    }\n}\n\nclass Empty implements Graded, Reporter { }\n   // ~~~~~\n   // Error: Class 'Empty' incorrectly implements interface 'Graded'.\n   //   Property 'grades' is missing in type 'Empty'\n   //   but required in type 'Graded'.\n   // ~~~~~\n   // Error: Class 'Empty' incorrectly implements interface 'Reporter'.\n   //   Property 'report' is missing in type 'Empty'\n   //   but required in type 'Reporter'.\n```", "```\ninterface AgeIsANumber {\n    age: number;\n}\n\ninterface AgeIsNotANumber {\n    age: () => string;\n}\n\nclass AsNumber implements AgeIsANumber, AgeIsNotANumber {\n    age = 0;\n // ~~~\n // Error: Property 'age' in type 'AsNumber' is not assignable\n // to the same property in base type 'AgeIsNotANumber'.\n //   Type 'number' is not assignable to type '() => string'.\n}\n```", "```\nclass NotAsNumber implements AgeIsANumber, AgeIsNotANumber {\n    age() { return \"\"; }\n // ~~~\n // Error: Property 'age' in type 'NotAsNumber' is not assignable\n // to the same property in base type 'AgeIsANumber'.\n //   Type '() => string' is not assignable to type 'number'.\n}\n```", "```\nclass Teacher {\n    teach() {\n        console.log(\"The surest test of discipline is its absence.\");\n    }\n}\n\nclass StudentTeacher extends Teacher {\n    learn() {\n        console.log(\"I cannot afford the luxury of a closed mind.\");\n    }\n}\n\nconst teacher = new StudentTeacher();\nteacher.teach(); // Ok (defined on base)\nteacher.learn(); // Ok (defined on subclass)\n\nteacher.other();\n //     ~~~~~\n // Error: Property 'other' does not exist on type 'StudentTeacher'.\n```", "```\nclass Lesson {\n    subject: string;\n\n    constructor(subject: string) {\n        this.subject = subject;\n    }\n}\n\nclass OnlineLesson extends Lesson {\n    url: string;\n\n    constructor(subject: string, url: string) {\n        super(subject);\n        this.url = url;\n    }\n}\n\nlet lesson: Lesson;\nlesson = new Lesson(\"coding\"); // Ok\nlesson = new OnlineLesson(\"coding\", \"oreilly.com\"); // Ok\n\nlet online: OnlineLesson;\nonline = new OnlineLesson(\"coding\", \"oreilly.com\"); // Ok\n\nonline = new Lesson(\"coding\");\n// Error: Property 'url' is missing in type\n// 'Lesson' but required in type 'OnlineLesson'.\n```", "```\nclass PastGrades {\n    grades: number[] = [];\n}\n\nclass LabeledPastGrades extends PastGrades {\n    label?: string;\n}\n\nlet subClass: LabeledPastGrades;\n\nsubClass = new LabeledPastGrades(); // Ok\nsubClass = new PastGrades(); // Ok\n```", "```\nclass GradeAnnouncer {\n    message: string;\n\n    constructor(grade: number) {\n        this.message = grade >= 65 ? \"Maybe next time...\" : \"You pass!\";\n    }\n}\n\nclass PassingAnnouncer extends GradeAnnouncer {\n    constructor() {\n        super(100);\n    }\n}\n\nclass FailingAnnouncer extends GradeAnnouncer {\n    constructor() { }\n // ~~~~~~~~~~~~~~~~~\n // Error: Constructors for subclasses must contain a 'super' call.\n}\n```", "```\nclass GradesTally {\n    grades: number[] = [];\n\n    addGrades(...grades: number[]) {\n        this.grades.push(...grades);\n        return this.grades.length;\n    }\n}\n\nclass ContinuedGradesTally extends GradesTally {\n    constructor(previousGrades: number[]) {\n        this.grades = [...previousGrades];\n        // Error: 'super' must be called before accessing\n        // 'this' in the constructor of a subclass.\n\n        super();\n\n        console.log(\"Starting with length\", this.grades.length); // Ok\n    }\n}\n```", "```\nclass GradeCounter {\n    countGrades(grades: string[], letter: string) {\n        return grades.filter(grade => grade === letter).length;\n    }\n}\n\nclass FailureCounter extends GradeCounter {\n    countGrades(grades: string[]) {\n        return super.countGrades(grades, \"F\");\n    }\n}\n\nclass AnyFailureChecker extends GradeCounter {\n    countGrades(grades: string[]) {\n        // Property 'countGrades' in type 'AnyFailureChecker' is not\n        // assignable to the same property in base type 'GradeCounter'.\n        //   Type '(grades: string[]) => boolean' is not assignable\n        //   to type '(grades: string[], letter: string) => number'.\n        //      Type 'boolean' is not assignable to type 'number'.\n        return super.countGrades(grades, \"F\") !== 0;\n    }\n}\n\nconst counter: GradeCounter = new AnyFailureChecker();\n\n// Expected type: number\n// Actual type: boolean\nconst count = counter.countGrades([\"A\", \"C\", \"F\"]);\n```", "```\nclass Assignment {\n    grade?: number;\n}\n\nclass GradedAssignment extends Assignment {\n    grade: number;\n\n    constructor(grade: number) {\n        super();\n        this.grade = grade;\n    }\n}\n```", "```\nclass NumericGrade {\n    value = 0;\n}\n\nclass VagueGrade extends NumericGrade {\n    value = Math.random() > 0.5 ? 1 : \"...\";\n    // Error: Property 'value' in type 'NumberOrString' is not\n    // assignable to the same property in base type 'JustNumber'.\n    //   Type 'string | number' is not assignable to type 'number'.\n    //     Type 'string' is not assignable to type 'number'.\n}\n\nconst instance: NumericGrade = new VagueGrade();\n\n// Expected type: number\n// Actual type: number | string\ninstance.value;\n```", "```\nabstract class School {\n    readonly name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract getStudentTypes(): string[];\n}\n\nclass Preschool extends School {\n    getStudentTypes() {\n        return [\"preschooler\"];\n    }\n}\n\nclass Absence extends School { }\n   // ~~~~~~~\n   // Error: Nonabstract class 'Absence' does not implement\n   // inherited abstract member 'getStudentTypes' from class 'School'.\n```", "```\nlet school: School;\n\nschool = new Preschool(\"Sunnyside Daycare\"); // Ok\n\nschool = new School(\"somewhere else\");\n// Error: Cannot create an instance of an abstract class.\n```", "```\nclass Base {\n    isPublicImplicit = 0;\n    public isPublicExplicit = 1;\n    protected isProtected = 2;\n    private isPrivate = 3;\n    #truePrivate = 4;\n}\n\nclass Subclass extends Base {\n    examples() {\n        this.isPublicImplicit; // Ok\n        this.isPublicExplicit; // Ok\n        this.isProtected; // Ok\n\n        this.isPrivate;\n        // Error: Property 'isPrivate' is private\n        // and only accessible within class 'Base'.\n\n        this.#truePrivate;\n        // Property '#truePrivate' is not accessible outside\n        // class 'Base' because it has a private identifier.\n    }\n}\n\nnew Subclass().isPublicImplicit; // Ok\nnew Subclass().isPublicExplicit; // Ok\n\nnew Subclass().isProtected;\n//             ~~~~~~~~~~~\n// Error: Property 'isProtected' is protected\n// and only accessible within class 'Base' and its subclasses.\n\nnew Subclass().isPrivate;\n//             ~~~~~~~~~~~\n// Error: Property 'isPrivate' is private\n// and only accessible within class 'Base'.\n```", "```\nclass TwoKeywords {\n    private readonly name: string;\n\n    constructor() {\n        this.name = \"Anne Sullivan\"; // Ok\n    }\n\n    log() {\n        console.log(this.name); // Ok\n    }\n}\n\nconst two = new TwoKeywords();\n\ntwo.name = \"Savitribai Phule\";\n // ~~~~\n // Error: Property 'name' is private and\n // only accessible within class 'TwoKeywords'.\n // ~~~~\n // Error: Cannot assign to 'name'\n // because it is a read-only property.\n```", "```\nclass Question {\n    protected static readonly answer: \"bash\";\n    protected static readonly prompt =\n        \"What's an ogre's favorite programming language?\";\n\n    guess(getAnswer: (prompt: string) => string) {\n        const answer = getAnswer(Question.prompt);\n\n        // Ok\n        if (answer === Question.answer) {\n            console.log(\"You got it!\");\n        } else {\n            console.log(\"Try again...\")\n        }\n    }\n}\n\nQuestion.answer;\n//       ~~~~~~\n// Error: Property 'answer' is protected and only\n// accessible within class 'HasStatic' and its subclasses.\n```"]