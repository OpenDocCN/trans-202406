- en: Chapter 1\. Full Stack Development in the Era of Serverless Computing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：无服务器计算时代的全栈开发
- en: People have typically associated cloud computing with backend development and
    DevOps. However, over the past few years, this has started to change. With the
    rise of *functions as a service* (FaaS), combined with powerful abstractions in
    the form of managed services, cloud providers have lowered the barrier to entry
    for developers new to cloud computing, and for traditionally frontend developers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 人们通常将云计算与后端开发和DevOps联系起来。然而，在过去几年中，这一情况已经开始发生变化。随着*函数即服务*（FaaS）的兴起，以及托管服务形式的强大抽象，云提供商已经降低了对云计算新手以及传统前端开发者的准入门槛。
- en: Using modern tools, frameworks, and services like Amazon Web Services (AWS)
    Amplify and Firebase (among others), a single developer can leverage their existing
    skill set and knowledge of a single framework and ecosystem (like JavaScript)
    to build scalable full stack applications complete with all of the features that
    would in the past have required teams of highly skilled backend and DevOps engineers
    to build and maintain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用现代工具、框架和服务，如亚马逊网络服务（AWS）Amplify和Firebase（等等），单个开发者可以利用其现有的技能和对单一框架及生态系统（如JavaScript）的知识，构建可扩展的全栈应用程序，其中包括以往需要高技能后端工程师和DevOps工程师团队才能构建和维护的所有特性。
- en: This book focuses on bridging the gap between frontend and backend development
    by taking advantage of this new generation of tools and services using the Amplify
    Framework. Here you’ll learn how to build scalable applications in the cloud directly
    from your frontend environment using the Amplify Command Line Interface (CLI).
    You’ll create and interact with various APIs and AWS services, such as authentication
    using Amazon Cognito, cloud storage using Amazon S3, APIs using Amazon API Gateway
    and AWS AppSync, and databases using Amazon DynamoDB.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书专注于通过利用Amplify框架来缩小前端和后端开发之间的差距。在这里，您将学习如何使用Amplify命令行界面（CLI）直接从前端环境中构建可扩展的云应用程序。您将创建和与各种API和AWS服务进行交互，如使用Amazon
    Cognito进行身份验证，使用Amazon S3进行云存储，使用Amazon API Gateway和AWS AppSync进行API以及使用Amazon
    DynamoDB进行数据库操作。
- en: By the final chapter, you will understand how to build real-world full stack
    applications in the cloud leveraging AWS services on the backend and React on
    the frontend. You’ll also learn how to use modern APIs from React, like hooks,
    and functional components, as well as React Context for global state management.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到最后一章时，你将理解如何在云中利用AWS服务（后端）和React（前端）构建真实的全栈应用程序。你还将学习如何使用React的现代API，如hooks和函数式组件，以及React
    Context用于全局状态管理。
- en: Modern Serverless Philosophy
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代无服务器哲学
- en: The term *serverless* is commonly associated with FaaS. Though you will find
    varying definitions as to what it means, the term has recently grown to encompass
    more of a philosophy than a shared definition.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “无服务器”这个术语通常与FaaS联系在一起。尽管关于它的定义各有不同，但这个术语最近已经演变成一种哲学，而不仅仅是一个共享的定义。
- en: Many times when people talk about serverless, they are really describing how
    to most efficiently deliver business value with a focus on writing business logic,
    instead of coding supporting infrastructure for your business logic. Adopting
    a serverless mindset allows you to do this by consciously going out of your way
    to find and leverage FaaS, managed services, and smart abstractions, while only
    building custom solutions if an existing service just doesn’t yet exist.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们谈论无服务器时，他们实际上是在描述如何以最有效的方式交付业务价值，重点放在编写业务逻辑上，而不是为业务逻辑编写支持基础设施。通过采用无服务器思维方式，您可以通过有意识地努力寻找和利用FaaS、托管服务和智能抽象来做到这一点，只有在现有服务尚不存在时才构建定制解决方案。
- en: More and more companies and developers are taking this approach, as it doesn’t
    make sense to reinvent the wheel. With the increase in popularity of this philosophy,
    there has also been an explosion of services and tools made available from startups
    and cloud providers to provide offerings that simplify backend complexity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的公司和开发者采用这种方法，因为重新发明轮子是没有意义的。随着这一理念的普及，初创公司和云提供商也提供了大量简化后端复杂性的服务和工具。
- en: 'For an academic take on what *serverless* means, you may wish to read the 2019
    paper written by a group at UC Berkeley, “Cloud Programming Simplified: A Berkeley
    View on Serverless Computing,”^([1](ch01.xhtml#idm45364356233672)). In this paper,
    the authors expanded the definition of *serverless*:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于学术界对于 *无服务器* 含义的看法，你可以阅读由加州大学伯克利分校的一个小组于2019年撰写的论文，“简化云编程：伯克利对无服务器计算的视角”，^([1](ch01.xhtml#idm45364356233672))。在这篇论文中，作者扩展了
    *无服务器* 的定义：
- en: While cloud functions—packaged as FaaS (Function as a Service) offerings—represent
    the core of serverless computing, cloud platforms also provide specialized serverless
    frameworks that cater to specific application requirements as BaaS (Backend as
    a Service) offerings. Put simply, serverless computing = FaaS + BaaS.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管云函数——作为 FaaS（函数即服务）的打包提供——代表了无服务器计算的核心，云平台也提供了专门的无服务器框架，以满足特定应用需求，作为 BaaS（后端即服务）的提供。简单来说，无服务器计算
    = FaaS + BaaS。
- en: '*Backend as a service* (BaaS) typically refers to managed services like databases
    (Firestore, Amazon DynamoDB), authentication services (Auth0, Amazon Cognito),
    and artificial intelligence services (Amazon Rekognition, Amazon Comprehend),
    among other managed services. Berkeley’s redefinition of what serverless means
    underscores what is happening in the broader spectrum of this discussion as cloud
    providers begin to build more and better-managed services and put them in this
    bucket of serverless.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*后端即服务*（BaaS）通常指像数据库（Firestore、Amazon DynamoDB）、认证服务（Auth0、Amazon Cognito）和人工智能服务（Amazon
    Rekognition、Amazon Comprehend）等托管服务。伯克利重新定义了无服务器的含义，强调了在这场讨论的更广泛范围内正在发生的事情，因为云提供商开始构建更多和更好的托管服务，并将它们放入无服务器的范畴中。'
- en: Characteristics of a Serverless Application
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无服务器应用的特征
- en: Now that you understand something about the philosophy around serverless, what
    are some of the characteristics of a serverless application? Though you may get
    varying answers as to what serverless is, following are some traits and characteristics
    that are generally agreed upon by the industry.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对无服务器哲学有了一些了解，那么无服务器应用的一些特征是什么呢？虽然对于无服务器的定义可能会有不同的答案，但以下特征和特点通常是行业普遍认同的。
- en: Decreased operational responsibilities
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少运维责任
- en: Serverless architectures typically allow you to shift more of your operational
    responsibilities to a cloud provider or third party.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构通常允许你将更多的运维责任转移给云提供商或第三方。
- en: 'When you decide to implement FaaS, the only thing you should have to worry
    about is the code running in your function. All of the server patching, updating,
    maintaining, and upgrading is no longer your responsibility. This goes back to
    the core of what cloud computing, and by extension serverless, attempts to offer:
    a way to spend less time managing infrastructure and spend more time building
    features and delivering business value.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你决定实施 FaaS 时，你唯一需要关心的是函数中运行的代码。所有服务器的修补、更新、维护和升级工作都不再是你的责任。这回归到了云计算的核心，以及无服务器试图提供的东西：一种花更少时间管理基础设施，更多时间构建功能并提供业务价值的方式。
- en: Heavy use of managed services
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大量使用托管服务
- en: Managed services usually assume responsibility for providing a defined set of
    features. They are serverless in the sense that they scale seamlessly, don’t require
    any server operations or need to manage uptime, and, most importantly, are essentially
    codeless.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 托管服务通常承担提供一组定义好的功能的责任。它们在无服务器的意义上能够无缝扩展，不需要任何服务器操作或管理运行时间，并且最重要的是，本质上是无需编写代码的。
- en: Benefits of a Serverless Architecture
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无服务器架构的优势
- en: These days there are many ways to architect an application. The decisions that
    are made early on will impact not only the application life cycle, but also the
    development teams and ultimately the company or organization. In this book, I
    advocate for building your applications using serverless technologies and methodologies
    and lay out some ways in which you can do this. But what are the advantages of
    building your application like this, and why is serverless becoming so popular?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如今有许多构建应用程序的方式。早期所做的决策不仅会影响应用程序的生命周期，还会影响开发团队，最终影响公司或组织。在本书中，我主张使用无服务器技术和方法构建你的应用程序，并提出了一些可以实现这一点的方式。但是，采用这种方式构建应用程序的优势是什么？为什么无服务器变得如此流行？
- en: Scalability
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可扩展性
- en: One of the primary advantages of going serverless is out-of-the-box scalability.
    When building your application, you don’t have to worry about what would happen
    if the application becomes wildly popular and you onboard a large number of new
    users quickly—the cloud provider will handle this for you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器的主要优势之一是即插即用的可扩展性。在构建应用程序时，您不必担心应用程序变得极其流行，快速吸纳大量新用户会发生什么事情——云服务提供商会为您处理这些事情。
- en: The cloud provider automatically scales your application, running the code in
    response to each interaction. In a serverless function, your code runs in parallel
    and individually processes each trigger (in turn, scaling with the size of the
    workload).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商会自动扩展您的应用程序，根据每次交互运行代码。在无服务器函数中，您的代码并行运行并逐个处理每个触发器（相应地，随着工作负载的增加而扩展）。
- en: Not having to worry about scaling your servers and databases is a great advantage.
    It’s one less thing you have to worry about when architecting your application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无需担心扩展您的服务器和数据库是一个巨大的优势。在设计应用程序时，这是您无需担心的一件事。
- en: Cost
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成本
- en: The pricing models of serverless architectures and traditional cloud-based or
    on-premises infrastructures differ greatly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构和传统基于云或本地基础设施的定价模型有很大不同。
- en: With the traditional approach, you often paid for computing resources whether
    or not they were utilized. This meant that if you wanted to make sure your application
    would scale, you needed to prepare for the largest workload you thought you might
    see regardless of whether you actually reached that point. This approach meant
    you were paying for unused resources for the majority of the life of your application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统方法中，您通常不管是否使用计算资源都需要支付费用。这意味着，如果您希望确保应用程序可以扩展，您需要准备好应对您可能看到的最大工作负载，而不管您实际上是否达到了这一点。这种方法意味着在应用程序生命周期的大部分时间里，您都在为未使用的资源付费。
- en: With serverless technologies, you pay only for what you use. With FaaS, you’re
    billed based on the number of requests for your functions, the time it takes for
    your function code to execute, and the reserved memory for each function. With
    managed services like Amazon Rekognition, you are only charged for the images
    processed and minutes of video processed, etc.—again paying only for what you
    use.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用无服务器技术，您只支付所使用的费用。使用函数即服务（FaaS），您将根据对函数的请求次数、函数代码执行所需的时间以及每个函数的保留内存计费。使用像Amazon
    Rekognition这样的托管服务，您只需支付处理的图像和视频分钟数等费用——再次，仅支付所用之物。
- en: This allows you to build features and applications with essentially no up-front
    infrastructure costs. Only if your application begins seeing increasing adoption
    and scaling do you begin to have to pay for the service.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这使您可以构建功能和应用程序，基本上无需预先投资基础设施成本。只有当您的应用程序开始受到更多采用并扩展时，您才需要支付服务费用。
- en: The bill from your cloud provider is only one part of the total cost of your
    cloud infrastructure—there’s also the operations’ salaries. That cost decreases
    if you have fewer ops resources.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从云服务提供商收到的账单只是云基础设施总成本的一部分——还有运营人员的薪资。如果操作资源较少，这些成本会减少。
- en: In addition, building applications in this way usually facilitates a faster
    time to market, decreasing overall development time and, therefore, development
    costs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以这种方式构建应用程序通常有助于更快地进入市场，减少总体开发时间，从而降低开发成本。
- en: Developer velocity
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发速度
- en: With fewer features to build, developer velocity increases. Being able to spin
    up the types of features that are typical for most applications (e.g., databases,
    authentication, storage, and APIs) allows you to quickly focus on writing the
    core functionality and business logic for the features that you want to deliver.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 构建功能较少，开发速度加快。能够快速启动大多数应用程序的常见功能（例如数据库、身份验证、存储和API）使您能够迅速专注于编写您希望交付的核心功能和业务逻辑。
- en: Experimentation
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验
- en: If you are not investing a lot of time building out repetitive features, you
    are able to experiment more easily and with less risk.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不投入大量时间来构建重复的功能，您可以更轻松地进行实验，风险更小。
- en: When shipping a new feature, you often assess the risk (time and money involved
    with building the feature) against the possible return on investment (ROI). As
    the risk involved in trying out new things decreases, you are free to test out
    ideas that in the past may not have seen the light of day.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在推出新功能时，您经常需要评估风险（构建功能涉及的时间和金钱成本）与可能的投资回报（ROI）之间的关系。随着尝试新事物所涉及的风险减少，您可以自由地测试过去可能无法实现的想法。
- en: '*A/B testing* (also known as *bucket testing* or *split testing*) is a way
    to compare multiple versions of an application to determine which one performs
    best. Because of the increase in developer velocity, serverless applications usually
    enable you to A/B test different ideas much more quickly and easily.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*A/B测试*（也称为*分桶测试*或*分割测试*）是一种比较应用程序多个版本以确定哪个性能最佳的方法。由于开发速度的增加，无服务器应用程序通常使您能够更快更轻松地对不同的想法进行A/B测试。'
- en: Security and stability
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性和稳定性
- en: Because the services that you are subscribing to are the core competency of
    the service provider maintaining them, you are usually getting something that
    is much more polished and more secure than you could have built yourself. Imagine
    that a company’s core business model has been, for many years, the delivery of
    a pristine authentication service, having fixed issues and edge cases for thousands
    of companies and customers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你订阅的服务是服务提供商的核心竞争力所在，通常你得到的东西比你自己建立的要更加精细和安全。想象一下，一家公司多年来的核心业务模型一直是提供完善的认证服务，解决了成千上万家公司和客户的问题和边缘情况。
- en: Now, imagine trying to replicate a service like that within your own team or
    organization. Though this is completely possible, choosing to use a service built
    and maintained by those whose only job is to build and maintain that exact thing
    is a safe bet that will ultimately save you time and money.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下在您自己的团队或组织内部复制这样的服务。虽然这完全可行，但选择使用由专门负责构建和维护该特定事物的人构建和维护的服务，是一种保险，最终将为您节省时间和金钱。
- en: Another advantage of using these service providers is that they will strive
    for the least amount of downtime possible. This means that they are taking on
    the burden of not only building, deploying, and maintaining these services, but
    also doing everything they can to make sure that they are stable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些服务提供商的另一个优势是，它们将努力使停机时间最少。这意味着它们不仅承担了构建、部署和维护这些服务的负担，还尽一切可能确保它们的稳定性。
- en: Less code
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 较少的代码
- en: Most engineers will agree that, at the end of the day, code is a liability.
    What has value is the feature that the code delivers, not the code itself. When
    you find ways to deliver these features while simultaneously limiting the amount
    of code you need to maintain, and even doing away with the code completely, you
    are reducing overall complexity in your application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数工程师都会同意，到头来，代码是一种负担。有价值的是代码提供的功能，而不是代码本身。当你找到方法在限制需要维护的代码量的同时交付这些功能，甚至完全摒弃代码时，你正在减少应用程序的整体复杂性。
- en: With less complexity comes fewer bugs, easier onboarding for new engineers,
    and overall less cognitive load for those maintaining and adding new features.
    A developer can hook into these services and implement features with no knowledge
    of the actual backend implementation and with little to no backend code at all.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 较少的复杂性意味着较少的错误，更容易让新工程师上手，并且对于维护和添加新功能的人员来说，认知负荷也会减少。开发人员可以接入这些服务并实现功能，而无需了解实际后端实现的细节，甚至可以几乎不编写任何后端代码。
- en: Different Implementations of Serverless
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无服务器的不同实现方式
- en: Let’s take a look at the different ways that you can build serverless applications
    as well as some of the differences between them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看构建无服务器应用程序的不同方法，以及它们之间的一些区别。
- en: Serverless Framework
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无服务器框架
- en: One of the first serverless implementations, the Serverless Framework, is the
    most popular. It is a free and open source framework, launched in October 2015
    under the name JAWS, and written using Node.js. At first, the Serverless Framework
    only supported AWS, but then it added support for cloud providers like Google
    and Microsoft Azure, among others.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个无服务器实现之一，Serverless Framework，是最受欢迎的。它是一个免费且开源的框架，于2015年10月以JAWS的名义发布，并使用Node.js编写。最初，Serverless
    Framework仅支持AWS，但随后还添加了对Google和Microsoft Azure等云提供商的支持。
- en: The Serverless Framework utilizes a combination of a configuration file (*serverless.yml*),
    CLI, and function code to provide a nice experience for people wanting to deploy
    serverless functions and other AWS services to the cloud from a local environment.
    Getting up and running with the Serverless Framework can present a somewhat steep
    learning curve, especially for developers new to cloud computing. There is much
    terminology to learn and a lot that goes into understanding how cloud services
    work in order to build anything more than just a “Hello World” application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Serverless Framework 利用配置文件（*serverless.yml*）、CLI 和函数代码的组合，为希望将无服务器函数和其他AWS服务从本地环境部署到云中的人提供了良好的体验。使用Serverless
    Framework进行快速上手可能对于新手来说有一定的学习曲线，特别是对于对云计算不熟悉的开发人员来说。需要学习很多术语，以及理解如何构建除了“Hello
    World”应用程序之外的其他内容。
- en: Overall, the Serverless Framework is a good option if you understand to some
    extent how cloud infrastructure works, and are looking for something that will
    work with other cloud providers in addition to AWS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Serverless Framework 是一个不错的选择，如果您在某种程度上理解云基础设施的工作原理，并且希望寻找能够与AWS以外的其他云提供商一起使用的解决方案。
- en: The AWS Serverless Application Model
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 无服务器应用模型
- en: The [AWS Serverless Application Model](https://oreil.ly/ApIoW) (AWS SAM) is
    an open source framework, released November 18, 2016, and built and maintained
    by AWS and the community. This framework only supports AWS.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS 无服务器应用模型](https://oreil.ly/ApIoW)（AWS SAM）是一个开源框架，由AWS和社区共同开发和维护，于2016年11月18日发布。该框架仅支持AWS。'
- en: SAM allows you to build serverless applications by defining the API Gateway
    APIs, AWS Lambda functions, and Amazon DynamoDB tables needed by your serverless
    application in YAML files. It uses a combination of YAML configuration and function
    code and a CLI to create, manage, and deploy serverless applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SAM 允许您通过在YAML文件中定义API Gateway API、AWS Lambda函数和无服务器应用程序所需的Amazon DynamoDB表来构建无服务器应用程序。它使用YAML配置、函数代码和CLI的组合来创建、管理和部署无服务器应用程序。
- en: One advantage of SAM is that it is an extension of AWS CloudFormation, which
    is very powerful and allows you to do almost anything in AWS. This can also be
    a disadvantage to developers new to cloud computing and not familiar with AWS
    services, permissions, roles, and terminology, as you have to already be familiar
    with how the services work, the naming conventions to set them up, and how to
    wire it all together.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: SAM 的一个优势是它是AWS CloudFormation的扩展，后者非常强大，允许您在AWS中几乎做任何事情。这也可能是对于云计算新手而言的一个缺点，如果不熟悉AWS服务、权限、角色和术语，则必须事先了解服务的工作方式、设置它们的命名约定以及如何将它们全部连接在一起。
- en: SAM is a good choice if you are familiar with AWS and are only deploying your
    serverless applications to AWS.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉AWS并且只将您的无服务器应用部署到AWS，SAM 是一个不错的选择。
- en: Amplify Framework
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Amplify Framework
- en: 'The Amplify Framework is a combination of four things: CLI, client library,
    toolchain, and web-hosting platform. Amplify’s purpose is to provide an easy way
    for developers to build and deploy full stack web and mobile applications that
    leverage the cloud. It enables not only features such as serverless functions
    and authentication, but also GraphQL APIs, machine learning (ML), storage, analytics,
    push notifications, and more.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify Framework 是 CLI、客户端库、工具链和 Web 托管平台的组合。Amplify 的目的是为开发人员提供一种简单的方式来构建和部署利用云的全栈
    Web 和移动应用程序。它不仅支持无服务器函数和认证功能，还支持GraphQL API、机器学习（ML）、存储、分析、推送通知等。
- en: Amplify provides an easy entry point into the cloud by doing away with terminology
    and acronyms that may be unfamiliar to newcomers to AWS and instead uses a category-name
    approach for referring to services. Rather than referring to the authentication
    service as Amazon Cognito, it’s referred to as *auth*, and the framework just
    uses Amazon Cognito under the hood.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify 通过摒弃对于AWS新手可能不熟悉的术语和缩写，并使用类别名称方法来引用服务，为云计算提供了一个简单的入门点。例如，认证服务不再称为Amazon
    Cognito，而是简称为 *auth*，框架在内部使用Amazon Cognito。
- en: Other options
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他选择
- en: More companies have started providing abstractions over serverless functions,
    usually intending to improve the negative user experience traditionally associated
    with working directly with AWS Lambda. A few popular options among these are Apex,
    Vercel, Cloudflare Workers, and Netlify Functions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的公司开始提供对无服务器函数的抽象，通常旨在改善直接与AWS Lambda一起工作时传统上关联的负面用户体验。在这些选项中，一些流行的选择包括
    Apex、Vercel、Cloudflare Workers 和 Netlify Functions。
- en: Many of these tools and frameworks still actually use AWS or some other cloud
    provider under the hood, so you are essentially going to be paying more in exchange
    for what they argue is a better user experience. Most of these tools do not offer
    much of the other suite of services available from AWS or other cloud providers;
    things like authentication, AI and ML services, complex object storage, and analytics
    may or may not be part of their offerings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些工具和框架实际上仍然使用AWS或其他云提供商的基础设施，因此你基本上会因为他们声称提供更好的用户体验而支付更多费用。大多数这些工具并不提供AWS或其他云提供商可用的其他服务套件；像身份验证、AI和ML服务、复杂对象存储和分析可能会或可能不会包含在它们的服务中。
- en: If you are interested in learning other ways of developing serverless applications,
    I would recommend checking out these options.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣学习其他开发无服务器应用程序的方式，我建议你查看这些选项。
- en: Introduction to AWS
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS简介
- en: In this section, I’ll give an overview of AWS and talk about why something like
    the Amplify Framework exists.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将概述AWS，并讨论为什么像Amplify框架这样的东西存在。
- en: About AWS
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于AWS
- en: 'AWS, a subsidiary of Amazon, was the first company to provide on-demand cloud
    computing platforms to developers. It first launched in 2004 with a single service:
    Amazon Simple Queue Service (Amazon SQS). In 2006, they officially relaunched
    with a total of three services: Amazon SQS, Amazon S3, and Amazon EC2\. Since
    2006, AWS has grown and remains the largest cloud computing provider in the world,
    continuing to add services every year. AWS now offers more than two hundred services.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: AWS，亚马逊的子公司，是第一家为开发者提供按需云计算平台的公司。它于2004年首次推出，只有一个服务：Amazon Simple Queue Service（Amazon
    SQS）。2006年，他们正式重新推出，总共有三个服务：Amazon SQS、Amazon S3和Amazon EC2。自2006年以来，AWS不断增长，并仍然是全球最大的云计算提供商，每年继续增加服务。AWS现在提供超过两百种服务。
- en: With the current state of cloud computing moving more toward serverless technologies,
    the barrier to entry is being lowered. However, it is still often tough for either
    a frontend developer or someone new to cloud computing to get started.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随着当前云计算技术向无服务器技术发展，入门门槛正在降低。然而，对于前端开发人员或云计算新手来说，入门仍然往往是困难的。
- en: With this new serverless paradigm, AWS saw an opportunity to create a framework
    that focused on enabling these traditionally frontend developers and developers
    new to cloud computing to get started building cloud applications.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这种新的无服务器范式，AWS看到了一个机会，创建一个框架，专注于帮助那些传统前端开发人员和新手开发者开始构建云应用程序。
- en: Full Stack Serverless on AWS
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS上的全栈无服务器
- en: '*Full stack serverless* is about providing developers with everything needed
    on both ends of the stack to accomplish their objective of building scalable applications
    as quickly as possible. Here, we’ll look at how you can build applications in
    this way using AWS tools and services.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*全栈无服务器*是为了给开发者提供堆栈两端所需的一切，以尽可能快速地构建可扩展的应用程序。在这里，我们将看看如何使用AWS工具和服务以这种方式构建应用程序。'
- en: Amplify CLI
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amplify CLI
- en: If you’re starting out with AWS, the sheer number of services can be overwhelming.
    In addition to the many services to sort between, each service often has its own
    steep learning curve. To help ease this, AWS has created the *Amplify CLI*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始使用AWS，服务的数量可能会让你感到不知所措。除了要在许多服务中进行选择外，每个服务通常都有自己的陡峭学习曲线。为了帮助缓解这一点，AWS创建了*Amplify
    CLI*。
- en: The Amplify CLI provides an easy entry point for developers wanting to build
    applications on AWS. The CLI allows developers to create, configure, update, and
    delete cloud services directly from their frontend environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify CLI为希望在AWS上构建应用程序的开发者提供了一个简单的入门点。CLI允许开发者直接从他们的前端环境创建、配置、更新和删除云服务。
- en: Instead of a service-name approach (as used by the AWS Console and many other
    tools, like CloudFormation), the CLI takes a category-name approach. AWS has many
    service names (for example, Amazon S3, Amazon Cognito, and Amazon Pinpoint), which
    can be confusing to new developers. Rather than using the service names to create
    and configure these services, the CLI uses names like *storage* (Amazon S3), *auth*
    (Amazon Cognito), and *analytics* (Amazon Pinpoint) to give you a way to understand
    what the service actually does versus simply giving the service name.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于AWS控制台和许多其他工具（如CloudFormation）使用的服务名方法，CLI采用了分类名方法。AWS有许多服务名称（例如，Amazon S3，Amazon
    Cognito和Amazon Pinpoint），这对新开发者来说可能会有些混淆。CLI不再使用服务名称来创建和配置这些服务，而是使用类似*storage*（Amazon
    S3）、*auth*（Amazon Cognito）和*analytics*（Amazon Pinpoint）这样的名称，帮助你理解服务的实际功能，而不仅仅是服务名称。
- en: The CLI has a host of commands that allow you to create, update, configure,
    and remove services without having to leave your frontend environment. You can
    also spin up and deploy new environments using the CLI in order to test out new
    features without affecting the main environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: CLI有大量命令，允许您在不离开前端环境的情况下创建、更新、配置和删除服务。您还可以使用CLI快速启动和部署新环境，以便测试新功能而不影响主环境。
- en: Once you’ve created and deployed features using the CLI, you can then use the
    Amplify client libraries to begin interacting with the services from your client-side
    application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您使用CLI创建和部署了功能，您就可以使用Amplify客户端库开始与客户端应用程序中的服务进行交互。
- en: Amplify client
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Amplify客户端
- en: Building full stack applications requires a combination of both client-side
    tooling and backend services. In the past, the main way to interact with AWS services
    was using an AWS software development kit (SDK) such as Java, .NET, Node.js, and
    Python. These SDKs work well, but none of them are particularly well-suited for
    client-side development. Before Amplify, there was no simple method for building
    client-side applications using AWS. If you look at the documentation for the AWS
    Node.js SDK, you’ll also notice that it presents a steep learning curve for developers
    new to AWS.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 构建全栈应用程序需要结合客户端工具和后端服务。过去，与AWS服务交互的主要方式是使用AWS软件开发工具包（SDK），如Java、.NET、Node.js和Python。这些SDK工作得很好，但对于客户端开发来说并不特别适用。在Amplify出现之前，没有简单的方法可以使用AWS构建客户端应用程序。如果您查看AWS
    Node.js SDK的文档，您还会注意到对于新接触AWS的开发者来说，它具有陡峭的学习曲线。
- en: The Amplify client is a library made especially to provide an easy-to-use API
    for JavaScript applications that need to interact with AWS services. Amplify also
    has client SDKs for React Native, native iOS, and native Android.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify客户端是一个专门为需要与AWS服务交互的JavaScript应用程序提供易于使用的API的库。Amplify还为React Native、本机iOS和本机Android提供了客户端SDK。
- en: The approach that the Amplify client takes is to provide a higher level of abstraction
    and bake in best practices to provide a declarative, easy-to-use API. At the same
    time, it gives you full control over the interactions with your backend. It’s
    also built especially with the client in mind, with features like WebSocket and
    GraphQL subscription support. It utilizes localStorage for the browser and AsyncStorage
    for React Native to store security tokens like `IdTokens` and `AccessTokens` to
    persist user authentication.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify客户端采取的方法是提供更高层次的抽象，并内置最佳实践，以提供声明式、易于使用的API。同时，它允许您完全控制与后端的交互。它还特别针对客户端构建，具有诸如WebSocket和GraphQL订阅支持的功能。它利用localStorage存储浏览器中的安全令牌，而在React
    Native中则使用AsyncStorage来持久化用户认证的`IdTokens`和`AccessTokens`。
- en: Amplify also provides UI components for popular frontend and mobile frameworks
    including React, React Native, Vue, Angular, Ionic, native Android, and native
    iOS. These framework-specific components allow you to quickly get up and running
    with common features like authentication and complex object storage and retrieval
    without having to build out the frontend UI and deal with state.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify还为流行的前端和移动框架提供UI组件，包括React、React Native、Vue、Angular、Ionic、本机Android和本机iOS。这些特定于框架的组件允许您快速启动常见功能，如身份验证和复杂对象的存储和检索，而无需构建前端UI和处理状态。
- en: The Amplify Framework does not support the entire suite of AWS services; instead,
    it supports a subset of them with almost all of them falling into the category
    of serverless. Using Amplify, it wouldn’t make much sense to offer support for
    interacting with with EC2, but it makes a lot of sense to offer support for working
    with Representational State Transfer (REST) and GraphQL APIs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify Framework 不支持AWS服务的整套功能；相反，它支持其中的一个子集，几乎所有这些功能都属于无服务器类别。使用Amplify，支持与EC2互动不是很有意义，但支持与表述性状态传输（REST）和GraphQL
    API互动非常合理。
- en: Amplify was created as an end-to-end solution to fill a previously unfilled
    gap, but it also encompasses a new way to build full stack cloud applications.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify被创建为一种端到端解决方案，以填补以前未填补的空白，但它还涵盖了构建全栈云应用程序的新方法。
- en: AWS AppSync
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS AppSync
- en: AWS AppSync is a managed *API layer* that uses GraphQL to make it easy for applications
    to interact with any data source, REST API, or microservice.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: AWS AppSync 是一个管理的*API层*，使用GraphQL使应用程序能够与任何数据源、REST API或微服务进行交互。
- en: The API layer is one of the most important parts of an application. Modern applications
    typically interact with a large number of backend services and APIs; things like
    databases, managed services, third-party APIs, and storage solutions, among others.
    *Microservice architecture* is the usual term used for a large application built
    using a combination of modular components or services.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: API层是应用程序中最重要的部分之一。现代应用程序通常与大量的后端服务和API进行交互，例如数据库、托管服务、第三方API和存储解决方案等。*微服务架构*是指使用模块化组件或服务组合构建的大型应用程序的常用术语。
- en: Most services and APIs will have varying implementation details, which creates
    a challenge when you’re working with a microservice architecture. This leads to
    inconsistent and sometimes messy code, as well as more cognitive load on the frontend
    developers making requests to these APIs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务和API将具有不同的实现细节，这在使用微服务架构时会带来挑战。这导致前端开发人员在向这些API发出请求时，代码不一致，有时混乱，并增加了认知负荷。
- en: One good approach to working with a microservice architecture is to provide
    a consistent API gateway layer that then takes all of the requests and forwards
    them on to the backend services. This allows a consistent interaction layer for
    your client to interact with, making development easier on the frontend.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 处理微服务架构的一个良好方法是提供一致的API网关层，然后将所有请求转发到后端服务。这使得客户端与之交互的交互层保持一致，从而简化了前端的开发工作。
- en: 'GraphQL, a technology created and open sourced by Facebook, offers an especially
    good abstraction for creating an API gateway. GraphQL introduces a defined and
    consistent specification for interacting with APIs in the form of three operations:
    *queries* (reads), *mutations* (writes/updates), and *subscriptions* (real-time
    data). These operations are defined as part of a main *schema* that also provides
    a contract between the client and the server in the form of GraphQL types. GraphQL
    operations are not bound to any specific data source, so you as a developer are
    free to use them to interact with anything from a database, an HTTP endpoint,
    a microservice, or even a serverless function.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL是Facebook创建并开源的技术，特别适合创建API网关。GraphQL引入了一种定义和一致的规范，以三种操作的形式与API进行交互：*查询*（读取）、*变更*（写入/更新）和*订阅*（实时数据）。这些操作作为主要*模式*的一部分定义，并提供了客户端与服务器之间的合同形式，即GraphQL类型。GraphQL操作不绑定于任何特定的数据源，因此作为开发人员，您可以自由地使用它们与数据库、HTTP端点、微服务甚至无服务器函数进行交互。
- en: Typically, when building a GraphQL API, you need to deal with building, deploying,
    maintaining, and configuring your own API. With AWS AppSync, you can instead offload
    the server and API management as well as the security to AWS.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在构建GraphQL API时，您需要处理构建、部署、维护和配置自己的API。使用AWS AppSync，您可以将服务器和API管理以及安全性外包给AWS。
- en: Modern applications often also have concerns such as real-time and offline support.
    Another benefit of AppSync is that it has built-in support for offline (Amplify
    client SDKs) as well as real time (GraphQL subscriptions) to enable developers
    to build these types of applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序通常还涉及实时和离线支持等问题。AppSync的另一个好处是它内置了对离线（Amplify客户端SDK）和实时（GraphQL订阅）的支持，使开发人员能够构建这些类型的应用程序。
- en: In this book, you will be using AWS AppSync along with various data sources
    (like DynamoDB for NoSQL and AWS Lambda for serverless functions) as the main
    API layer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将使用 AWS AppSync 以及各种数据源（如 DynamoDB 用于 NoSQL 和 AWS Lambda 用于无服务器函数）作为主要的
    API 层。
- en: Introduction to the AWS Amplify CLI
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Amplify CLI 介绍
- en: You will be using Amplify CLI throughout this book to create and manage your
    cloud services. To learn how it works, you’ll be creating and deploying a service
    using the CLI in this section. Once the service is deployed, you’ll also learn
    how to remove it and then delete any backend resources associated with the deployment.
    Let’s take a look at how you can create your first service.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本书中始终使用 Amplify CLI 来创建和管理您的云服务。为了了解它的工作原理，在本节中您将使用 CLI 创建和部署一个服务。服务部署完成后，您还将学习如何删除它以及删除与部署相关的任何后端资源。让我们看看如何创建您的第一个服务。
- en: Installing and Configuring the Amplify CLI
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 Amplify CLI
- en: 'To get started, you first need to install and configure the Amplify CLI:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，您首先需要安装并配置 Amplify CLI：
- en: '[PRE0]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To use the CLI, you will first need to have Node.js version 10.x or greater
    and npm version 5.x or greater installed on your machine. To install Node.js,
    I recommend either visiting the [Node.js installation page](https://nodejs.org/en)
    and following the installation instructions or using [Node Version Manager](https://github.com/nvm-sh/nvm)
    (NVM).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CLI，您首先需要在计算机上安装 Node.js 版本 10.x 或更高版本以及 npm 版本 5.x 或更高版本。要安装 Node.js，我建议访问
    [Node.js 安装页面](https://nodejs.org/en) 并按照安装说明操作，或者使用 [Node Version Manager](https://github.com/nvm-sh/nvm)
    (NVM)。
- en: After the CLI has been installed, you next need to configure it with an identity
    and access management (IAM) user in your AWS account. To do so, you’ll configure
    the CLI with a reference to a set of user credentials (access key ID and secret
    access key). Using these credentials, you’ll be able to create AWS services on
    behalf of this user directly from the CLI.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成 CLI 后，您需要使用 AWS 帐户中的身份和访问管理（IAM）用户配置它。为此，您将使用一组用户凭据（访问密钥 ID 和秘密访问密钥）配置
    CLI。使用这些凭据，您将能够直接从 CLI 代表此用户创建 AWS 服务。
- en: 'To create a new user and configure the CLI, you’ll run the `configure` command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新用户并配置 CLI，您将运行 `configure` 命令：
- en: '[PRE1]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will walk you through the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导您完成以下步骤：
- en: '*Specify the AWS region.*'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*指定 AWS 区域。*'
- en: This will allow you to choose the region in which you’d like to create your
    user (and, by extension, the services associated with this user). Choose the region
    closest to you or a preferred region.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许您选择要创建用户的区域（以及由此用户关联的服务）。选择距离您最近或首选的区域。
- en: '*Specify the username.*'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*指定用户名。*'
- en: This name will be the local reference of the user that you will be creating
    in your AWS account. I suggest using a name that you’ll be able to recognize later
    when referencing it, such as *amplify-cli-us-east-1-user* or *mycompany-cli-admin*.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此名称将成为您在 AWS 帐户中创建的用户的本地引用。我建议使用一个您以后在引用时能够识别的名称，例如 *amplify-cli-us-east-1-user*
    或 *mycompany-cli-admin*。
- en: 'Once you enter your name, the CLI will open up the AWS IAM dashboard. From
    here, you can accept the defaults by clicking Next: Permissions, Next: Tags, Next:
    Review, and Create user to create the IAM user.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的名称后，CLI 将打开 AWS IAM 仪表板。从这里，您可以通过点击“下一步：权限”、“下一步：标签”、“下一步：审核”和“创建用户”接受默认设置来创建
    IAM 用户。
- en: 'In the next screen, you will be given the IAM user credentials: the access
    key ID and secret access key. See [Figure 1-1](#fig1a).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕中，您将获得 IAM 用户凭据：访问密钥 ID 和秘密访问密钥。请参见 [图 1-1](#fig1a)。
- en: '![AWS IAM Dashboard IAM User](Images/fssl_0101.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![AWS IAM 仪表板 IAM 用户](Images/fssl_0101.png)'
- en: Figure 1-1\. AWS IAM dashboard
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. AWS IAM 仪表板
- en: Back in the CLI, paste in the values for the access key ID and secret access
    key. Now you’ve successfully configured the CLI and you can begin creating new
    services.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 CLI，粘贴访问密钥 ID 和秘密访问密钥的值。现在您已成功配置 CLI，可以开始创建新服务。
- en: Initializing Your First Amplify Project
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化您的第一个 Amplify 项目
- en: 'Now that the CLI has been installed and configured, you can create your first
    project. This step is usually done within the root of your client application.
    Since you will be using React for most of this book, we’ll start by initializing
    a new React project:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 CLI 已安装并配置完成，您可以创建您的第一个项目。这一步通常在客户端应用程序的根目录下完成。由于本书大部分时间您将使用 React，我们将从初始化一个新的
    React 项目开始：
- en: '[PRE2]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you need to install the Amplify that you’ll be using on the client. The
    libraries you’ll be using are AWS Amplify and AWS Amplify React for the React-specific
    UI components:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要安装 Amplify，这将在客户端上使用。您将使用的库是 AWS Amplify 和 AWS Amplify React，用于 React 特定的
    UI 组件：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, you can create an Amplify project. To do so, you’ll run the `init` command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以创建一个 Amplify 项目。为此，您将运行 `init` 命令：
- en: '[PRE4]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will walk you through the following steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导您完成以下步骤：
- en: '*Enter a name for the project.*'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*输入项目名称。*'
- en: This will be the local name for the project, usually something that describes
    what the project is or what it does.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将是项目的本地名称，通常描述项目或其功能。
- en: '*Enter a name for the environment.*'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*输入环境名称。*'
- en: This will be a reference to the initial environment that you will be working
    in. Typical environments in this workflow could be something like *dev*, *local*,
    or *prod* but could be anything that makes sense to you.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将是您将要工作的初始环境的参考。在此工作流程中，典型的环境可能是 *dev*、*local* 或 *prod*，但可以是任何对您有意义的内容。
- en: '*Choose your default editor.*'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择您的默认编辑器。*'
- en: This will set your editor preference. The CLI will later use this preference
    to open your text editor with files that are part of the current project.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将设置您的编辑器偏好。CLI 稍后将使用此偏好打开当前项目的文件。
- en: '*Choose the type of app that you’re building.*'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择您要构建的应用类型。*'
- en: This will determine whether the CLI should configure, build, and run commands
    if you are using JavaScript. For this example, choose *javascript*.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将确定 CLI 是否应配置、构建和运行命令（如果使用 JavaScript）。在本例中，请选择 *javascript*。
- en: '*What JavaScript framework are you using?*'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*您使用的 JavaScript 框架是什么？*'
- en: This will determine a few base build and start commands. For this example, choose
    *react*.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将确定一些基本的构建和启动命令。在本例中，请选择 *react*。
- en: '*Choose your source directory path.*'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择您的源代码目录路径。*'
- en: This allows you to set the directory where your source code will live. For this
    example, choose *src*.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许您设置源代码所在的目录。在本例中，请选择 *src*。
- en: '*Choose your distribution directory path.*'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择您的分发目录路径。*'
- en: For web projects, this will be the folder containing the complied JavaScript
    source code as well as your favicon, HTML, and CSS files. For this example, choose
    *build*.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Web 项目，这将是包含编译后的 JavaScript 源代码以及 favicon、HTML 和 CSS 文件的文件夹。在本例中，请选择 *build*。
- en: '*Choose your build command.*'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择您的构建命令。*'
- en: This specifies the command for compiling and bundling your JavaScript code.
    For this example, use *npm run-script build*.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这指定了编译和捆绑 JavaScript 代码的命令。在本例中，请使用 *npm run-script build*。
- en: '*Choose your start command.*'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择您的启动命令。*'
- en: This specifies the command to server your application locally. For this example,
    use *npm run-script start*.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这指定了在本地服务器上提供应用程序的命令。在本例中，请使用 *npm run-script start*。
- en: '*Do you want to use an AWS profile?*'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*是否要使用 AWS 配置文件？*'
- en: Here, choose *Y* and then pick the AWS profile you created when you ran `amplify
    configure`.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，选择 *Y*，然后选择您运行 `amplify configure` 时创建的 AWS 配置文件。
- en: 'Now, the Amplify CLI will initialize your new Amplify project. When the initialization
    is complete, you will have two additional resources created for you in your project:
    a file called *aws-exports* located in the *src* directory and a folder named
    *amplify* located in your root directory.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Amplify CLI 将初始化您的新 Amplify 项目。初始化完成后，在您的项目中会创建两个额外的资源：一个位于 *src* 目录下名为 *aws-exports*
    的文件，以及一个位于根目录下名为 *amplify* 的文件夹。
- en: The aws-exports file
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: aws-exports 文件
- en: The *aws-exports* file is a key-value pairing of the resource categories created
    for you by the CLI along with their credentials.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*aws-exports* 文件是 CLI 为您创建的资源类别及其凭据的键值对。'
- en: The amplify folder
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: amplify 文件夹
- en: 'This folder holds all of the code and configuration files for your Amplify
    project. In this folder you’ll see two subfolders: the *backend* and *#current-cloud-backend*
    folders.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件夹包含 Amplify 项目的所有代码和配置文件。在此文件夹中，您将看到两个子文件夹：*backend* 和 *#current-cloud-backend*
    文件夹。
- en: The *backend* folder
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*backend* 文件夹'
- en: This folder contains all of the local code for your project such as the GraphQL
    schema for an AppSync API, the source code for any serverless functions, and infrastructure
    as code representing the current local status of the Amplify project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含项目中的所有本地代码，例如用于 AppSync API 的 GraphQL 模式、任何无服务器函数的源代码，以及代表 Amplify 项目当前本地状态的基础设施即代码。
- en: The *#current-cloud-backend* folders
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*#current-cloud-backend* 文件夹'
- en: This folder holds the code and configurations that reflect what resources were
    deployed in the cloud with your last Amplify `push` command. It helps the CLI
    differentiate between the configuration of the resources already provisioned in
    the cloud and what is currently in your local *backend* directory (which reflects
    your local changes).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件夹保存反映最后一次 Amplify `push` 命令部署的云中资源的代码和配置。它帮助 CLI 区分云中已经提供的资源配置和当前在本地 *backend*
    目录中的配置（反映了您的本地更改）。
- en: 'Now that you’ve initialized your project, you can add your first cloud service:
    *authentication*.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已初始化项目，可以添加第一个云服务：*authentication*。
- en: Creating and Deploying Your First Service
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建并部署您的第一个服务
- en: 'To create a new service, you can use the `add` command from Amplify:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新服务，可以使用 Amplify 的 `add` 命令：
- en: '[PRE5]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will walk you through the following steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导您完成以下步骤：
- en: '*Do you want to use the default authentication and security configuration?*'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*您是否想使用默认的认证和安全配置？*'
- en: This gives you the option of creating an authentication service using a default
    configuration (MFA on sign-up, password at sign-in), creating an authentication
    configuration with social providers, or creating a completely custom authentication
    configuration. For this example, choose *Default configuration*.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这为您提供了使用默认配置（注册时 MFA，登录时密码）、使用社交提供商创建认证配置或创建完全自定义认证配置的选项。对于本示例，请选择 *Default
    configuration*。
- en: '*How do you want users to be able to sign in?*'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*您希望用户如何进行登录？*'
- en: This will allow you to specify the required sign-in property. For this example,
    accept the default by choosing *Username*.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许您指定所需的登录属性。对于此示例，请选择默认选项 *Username*。
- en: '*Do you want to configure advanced settings?*'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*您是否要配置高级设置？*'
- en: This will allow you to walk through additional advanced settings for things
    like additional sign-up attributes and Lambda triggers. You do not need any of
    these for this example, so accept the default by choosing *No, I am done*.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许您进行进一步的高级设置，如额外的注册属性和 Lambda 触发器。对于本示例，您不需要这些设置，因此选择默认选项 *No, I am done*。
- en: 'Now, you’ve successfully configured the authentication service and are now
    ready to deploy. To deploy the authentication service, you can run the `push`
    command:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您已成功配置了认证服务，现在可以准备部署。要部署认证服务，可以运行 `push` 命令：
- en: '[PRE6]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Are you sure you want to continue?*'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*您确定要继续吗？*'
- en: Choose *Y*.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择 *Y*。
- en: After the deployment is complete, your authentication service has successfully
    been created. Congratulations, you’ve deployed your first feature. Now, let’s
    test it out.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，您的认证服务已成功创建。恭喜，您已部署了第一个功能。现在，让我们来测试一下。
- en: There are several ways to interact with the authentication service in a React
    application. You can use the `Auth` class from Amplify, which has over 30 methods
    available (methods like `signUp`, `signIn`, `signOut`, etc.), or you can use the
    framework-specific components like `withAuthenticator` that will scaffold out
    an entire authentication flow, complete with preconfigured UI. Let’s try out the
    `withAuthenticator` higher-order (HOC) component.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 应用程序中与认证服务交互有几种方法。您可以使用 Amplify 的 `Auth` 类，它提供了超过 30 个可用的方法（如 `signUp`、`signIn`、`signOut`
    等），或者您可以使用框架特定的组件，如 `withAuthenticator`，它将为您提供一个完整的认证流程，包括预配置的用户界面。让我们试试 `withAuthenticator`
    高阶组件。
- en: 'First, configure the React app to work with Amplify. To do so, open *src/index.js*
    and add the following code below the last `import` statement:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，配置 React 应用程序以与 Amplify 协作。为此，请打开 *src/index.js* 并在最后一个 `import` 语句下添加以下代码：
- en: '[PRE7]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, the app has been configured and you can begin interacting with the authentication
    service. Next, open *src/App.js* and update the file with the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序已配置完成，您可以开始与认证服务进行交互。接下来，打开 *src/App.js* 并使用以下代码更新文件：
- en: '[PRE8]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At this point, you can test it out by launching the app:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以通过启动应用程序来测试它：
- en: '[PRE9]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, your app should be launched with the preconfigured authentication flow
    in front of it. See [Figure 1-2](#fig1b).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的应用程序应该使用预配置的认证流程启动。参见 [图 1-2](#fig1b)。
- en: '![AWS Amplify withAuthenticator Component](Images/fssl_0102.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![AWS Amplify withAuthenticator 组件](Images/fssl_0102.png)'
- en: Figure 1-2\. withAuthenticator HOC component
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. withAuthenticator 高阶组件
- en: Deleting the Resources
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除资源
- en: Once you no longer need a feature or a project, you can remove it using the
    CLI.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您不再需要某个功能或项目，可以使用 CLI 删除它。
- en: 'To remove an individual feature, you can run the `remove` command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 若要移除单个功能，您可以运行`remove`命令：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To delete an entire Amplify project along with all of the corresponding resources
    that have been deployed in your account, you can run the `delete` command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 若要删除整个 Amplify 项目以及在您的帐户中部署的所有相应资源，您可以运行`delete`命令：
- en: '[PRE11]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Cloud computing is growing at a rapid pace as more and more companies have come
    to rely on the cloud for the majority of their workloads. With this growth in
    usage, knowledge of cloud computing is becoming a valuable addition to your skill
    set.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算正在快速增长，越来越多的公司开始依赖云来处理大部分工作负载。随着使用量的增加，云计算的知识正在成为技能组合中的宝贵补充。
- en: The paradigm of serverless, a subset of cloud computing, is also rapidly growing
    in popularity among business users, as it offers all of the benefits of cloud
    computing while also featuring automatic scaling, while needing little to no maintenance.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器范式，作为云计算的一个子集，也在商业用户中迅速流行起来，因为它提供了云计算的所有优势，并具有自动扩展的特性，几乎不需要维护。
- en: Tools like the Amplify Framework are making it easier for developers of all
    backgrounds to get up and running with cloud as well as serverless computing.
    In the next chapters, you’ll learn how to build real-world full stack serverless
    applications in the cloud, utilizing cloud services and the Amplify Framework.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 类似 Amplify 框架这样的工具正在帮助所有背景的开发人员轻松上手云和无服务器计算。在接下来的章节中，您将学习如何在云中构建真实的全栈无服务器应用程序，利用云服务和
    Amplify 框架。
- en: '^([1](ch01.xhtml#idm45364356233672-marker)) Eric Jonas, Johann Schleier-Smith
    et al. “Cloud Programming Simplified: A Berkeley View on Serverless Computing”
    (Feb. 10, 2019), [*http://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html*](http://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm45364356233672-marker)) Eric Jonas, Johann Schleier-Smith
    等人，《云编程简化：关于无服务器计算的伯克利视角》（2019年2月10日），[*http://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html*](http://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html)。
