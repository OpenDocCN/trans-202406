- en: Chapter 9\. Other Challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is a short but important laundry list of common MySQL challenges
    and how to mitigate them. These challenges don’t fit into other chapters because
    most are not directly related to performance. But don’t underestimate them: the
    first two challenges, for example, can ruin a database. More importantly, these
    challenges are not special cases that only happen when the stars align and The
    Fates conspire to ruin your day. These are common challenges. Take them seriously,
    and expect to face them.'
  prefs: []
  type: TYPE_NORMAL
- en: Split-Brain Is the Greatest Risk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Split-brain requires two conditions to occur at the same time, in the same
    replication topology:'
  prefs: []
  type: TYPE_NORMAL
- en: More than one MySQL instance is writable (`read_only=0`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writes occur on more than one MySQL instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Neither of those should ever happen—especially not at the same time—but life
    is full of surprises, and you cannot avoid bugs or accidents forever. When it
    happens, it’s called *split-brain*: instead of all MySQL instances having the
    same data, they’re figuratively split because data is no longer identical (consistent)
    on every instance. Not only is inconsistent data fundamentally wrong, it can break
    replication or—worse—have a ripple effect that causes more data to become inconsistent,
    which causes the next challenge: data drift.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Split-brain does not apply to MySQL replication topologies intentionally designed
    to have multiple writable instances.
  prefs: []
  type: TYPE_NORMAL
- en: If split-brain occurs, you must detect and stop it *immediately*. Why? Because
    a single write can affect any number of rows. Mere seconds of split-brain can
    produce an avalanche of inconsistent data, resulting in *weeks* of data forensics
    and reconciliation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop split-brain, disable writes on *all* instances: `SET GLOBAL read_only=1`.
    Do not leave one instance writable; that will make the problem worse. If you cannot
    disable writes, then kill MySQL or the server—seriously. *Data integrity is more
    important than data availability*.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Data integrity is more important than data availability.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you should take the entire database offline until all inconsistent
    data is found and reconciled. But realistically, if a prolonged database outage
    will kill the business and you’re absolutely certain that reading potentially
    incorrect data will not cause further damage, then you can run MySQL in read-only
    mode (`read_only=1`) while you fix data using [`super_read_only`](https://oreil.ly/JrqIs)
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are only two ways to find inconsistent rows: run [`pt-table-sync`](https://oreil.ly/Dr10P),
    or check manually. Manually entails whatever you can do to compare and verify
    rows given your understanding of the application, the data, and what changes were
    likely to have occurred during the split-brain. `pt-table-sync` is an open source
    tool that can find, print, and synchronize data differences between two MySQL
    instances, but use it with caution because any tool that changes data is inherently
    risky.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`pt-table-sync` is a dangerous tool unless you wield it carefully. Do *not*
    use its `--execute` option: only use `--print`, and reads its manual thoroughly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reconciling rows is the difficult part, and you should work with a MySQL expert
    to ensure that it’s done correctly. If you’re lucky, you’ll determine that one
    MySQL instance is authoritative—all rows have the correct data—and you can rebuild
    rather than reconcile: rebuild all replicas from the authoritative instance. If
    you’re not lucky, then work with a MySQL expert to determine your options.'
  prefs: []
  type: TYPE_NORMAL
- en: Data Drift Is Real but Invisible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Data drift* refers to inconsistent data: one or more rows have different values
    on different MySQL instances in the same replication topology. (*Drift* is figurative
    for the values drifting further apart as changes to the inconsistent data cause
    further inconsistencies.) Whereas inconsistent data from a split-brain scenario
    is expected, inconsistent data from data drift is unexpected: you don’t know or
    have any reason to suspect that there is inconsistent data. Although data drift
    is invisible in the sense that it does not seem to cause a problem, it is nevertheless
    a real problem because the application could return wrong values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, data drift is easy to detect: run [`pt-table-checksum`](https://oreil.ly/mogUa).
    This tool is safe: it only reads and compares data. Unfortunately, data drift
    is no easier to reconcile than inconsistent data due to split-brain. But that
    probably won’t be an issue because data drift tends to be limited and isolated
    in scope—not an avalanche of inconsistent data—because it’s not caused by a serious
    failure like split-brain.'
  prefs: []
  type: TYPE_NORMAL
- en: The fascinating aspect of data drift is that, to my knowledge, no one has ever
    found or proven the root cause of data drift in the wild (in a real production
    database). In theory, it’s caused by nondeterministic queries and statement-based
    replication, or writes on replicas. In a laboratory, those two would surely cause
    data drift, but they never seem to be the cause in the wild. Instead, engineers
    and DBAs alike are certain that nothing was done to cause or permit data drift.
    And yet, it exists.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check for data drift every few months (or once a year at the very least) by
    running [`pt-table-checksum`](https://oreil.ly/mogUa). If you find data drift
    once, don’t worry about it: reconcile the rows, and check again in a month. If
    data keeps drifting (which is very unlikely), then you have an exotic problem
    worth a detailed investigation to find and fix the root cause.'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Trust ORM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of object-relational mapping (ORM) is to aid programmers by abstracting
    data access into programming terms and objects. ORM is not inherently bad or inefficient,
    but you should verify queries generated by an ORM library because performance
    is not its purpose. For example, since ORM treats rows as objects, an ORM library
    might select all columns, which is contrary to what you saw in the efficient data
    access checklist ([Table 3-2](ch03.html#data-access-checklist)). Another example:
    some ORM libraries execute other queries (`SHOW WARNINGS`, for example) before
    or after the actual application query. When striving for maximum performance,
    every query is important; other queries are unacceptable waste.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are high-performance applications that use ORM, but the engineers are
    careful not to trust ORM: they verify ORM-generated queries in the query profile
    and query report (see [“Query profile”](ch01.html#query-profile) and [“Query report”](ch01.html#query-report),
    respectively). If an ORM-generated query is too inefficient, read the ORM library
    documentation to learn how to configure it to generate a more efficient query.'
  prefs: []
  type: TYPE_NORMAL
- en: Schemas Always Change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You probably already know this challenge, but in case you’re brand new to life
    with any relational database: schemas always change. (More specifically, table
    definitions always change, but tables constitute a schema.) The challenge is doing
    an *online schema change* (OSC): changing a schema while it’s in use, without
    affecting the application. As mentioned in previous chapters, there are three
    great solutions for MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[pt-online-schema-change](https://oreil.ly/brtmM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`gh-ost`](https://oreil.ly/ZKQAd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ALTER TABLE`](https://oreil.ly/GRQuf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each solution works very differently, but all of them can alter a table definition
    online without affecting the application. Read the documentation for each to decide
    which one works best for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s another aspect to this challenge: integrating schema changes into the
    software development process. You can run an OSC manually, but engineering teams
    don’t do that because, like other code changes, schema changes need to be a part
    of the development process so they are reviewed, approved, tested in staging,
    and so forth. Since development processes are team-specific, your team will have
    to create its own solution. But there is currently one open source solution: [Skeema](https://www.skeema.io).
    For a thorough read on how renowned MySQL expert Shlomi Noach solved this challenge
    at GitHub, read his blog post [“Automating MySQL Schema Migrations with GitHub
    Actions and More”](https://oreil.ly/9cEJi).'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Extends Standard SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you use only MySQL, then perhaps you can skip this challenge. But if you’re
    coming from (or going to) another relational database, then be aware that MySQL
    has many extensions to standard SQL enumerated in [“MySQL Extensions to Standard
    SQL”](https://oreil.ly/gLN1l) in the MySQL manual. And MySQL does not support
    some standard SQL features, like full outer joins. There are other restrictions
    and limitations cataloged in the aptly named excerpt [“MySQL Restrictions and
    Limitations”](https://oreil.ly/x3xro), and you will find other mentions and oddities
    throughout the MySQL manual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any database with a history as long and storied as MySQL is bound to be equally
    eclectic. What’s uniquely MySQL about MySQL is something that experts have come
    to know and trust so naturally that it’s rarely pointed out: the [MySQL Manual](https://oreil.ly/IXARN)
    is comprehensive and authoritative. Software documentation can be sparse, out
    of date, or nonexistent, but not the MySQL manual. There are arcane bits of information
    about MySQL not in the manual, but those aside, MySQL experts rely heavily on
    the MySQL manual—and so should you.'
  prefs: []
  type: TYPE_NORMAL
- en: Noisy Neighbors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On a physical server, a *noisy neighbor* is a program that degrades performance
    for other programs by using inordinately more system resources. For example, if
    a server is running 20 separate MySQL instances, but one of them uses all the
    CPU and disk I/O, then it’s a noisy neighbor. This is a common challenge because
    a *shared server* (or *multitenancy*) is the norm: running multiple virtualized
    environments on a single physical server. (The opposite, a *dedicated server*
    [or *single-tenancy*], is rare and expensive, especially in the cloud.) A noisy
    neighbor is a perplexing challenge because the performance impact is not your
    fault, but it is your problem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your company runs its own hardware, then the problem is tractable: measure
    the resource usage of each program or virtual environment on the shared server
    where you suspect a noisy neighbor. Noisy neighbors are easy to spot because they’re
    noisy. Then move the noisy neighbor (or your database) to another, quieter server.
    If that’s not possible, then buy another copy of this book for the noisy neighbor
    so they can learn how to optimize MySQL performance.'
  prefs: []
  type: TYPE_NORMAL
- en: In the cloud, you cannot see or prove the existence of a noisy neighbor. For
    security, cloud providers maintain strict separation of tenants (customers like
    you) on shared servers. And they are unlikely to admit the existence of a noisy
    neighbor because it would imply that they are not balancing the server load, which
    should be included in the cost. Consequently, the standard practice is to reprovision
    a cloud database when you suspect a noisy neighbor. Some companies benchmark a
    cloud resource before using it and only keep it if performance meets a baseline;
    else, the resource is destroyed, another one is provisioned, and the process repeats
    until—by chance—the resource is provisioned on a quiet server.
  prefs: []
  type: TYPE_NORMAL
- en: Applications Do Not Fail Gracefully
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Netflix originated *chaos engineering*: intentionally introducing problems
    and failures into a system to test its resiliency and necessitate that engineers
    design for failure. This philosophy and practice is bold because it *truly* tests
    the mettle of an application. Writing software that works correctly when everything
    around it also works correctly is an expectation so basic and obvious that it
    counts for nothing. The challenge is to write software that works—in some capacity—even
    when everything around it is failing. As engineers, we often think that we have
    accounted for failure in our software, but how do we know until something fails
    for real? Plus, not all failures are binary: working or not working. The most
    insidious problems are not outright failures but, rather, edge cases and outliers:
    the kind of problem that requires a story to explain it, not a simple failure
    statement like “the hard drive died.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'The same is true for applications with respect to MySQL. However, chaos engineering
    is not standard practice in the MySQL industry because trifling with a database
    is risky and few engineers are so bold. But fortune favors the bold, so here are
    12 database chaos scenarios to test the mettle of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL is offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL is very slow to respond
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL is read-only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL has just started (cold buffer pool)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read replicas are offline or very slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failover in the same region
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failover to a different region
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database backup is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS resolution is very slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network is slow (high latency) or saturated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One hard drive in a RAID array is degraded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free disk space on an SSD is less than 5%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of those 12 database chaos scenarios might not apply to your infrastructure,
    but most are standard and yield interesting results depending on the application.
    If you have never engineered chaos, then I encourage you to start because chaos
    doesn’t wait until you’re ready.
  prefs: []
  type: TYPE_NORMAL
- en: High Performance MySQL Is Difficult
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you earnestly apply all the best practices and techniques in this book, I
    am confident that you will achieve remarkable performance with MySQL. But that
    does not mean it’ll be quick or easy. High-performance MySQL requires practice
    because resources—books, blogs, videos, conferences, and so on—teach you theory,
    which is different than reality. Consequently, when you begin to apply what you’ve
    learned from this book to your application, you might run into the following two
    challenges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first challenge is that real application queries can be—and usually are—more
    complex than the pithy little examples strewn throughout these pages. Add to that
    the additional challenge of remembering and applying so much knowledge at once:
    query metrics, indexes and indexing, `EXPLAIN` output, query optimizations, table
    definitions, and so forth. It can be overwhelming at first, but take it one query
    at a time, and remember [“North Star”](ch01.html#north-star) and [“Indexing: How
    to Think Like MySQL”](ch02.html#think-like-mysql). Even experts need time to unravel
    and understand the full story of a query.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second challenge is that real application performance rarely depends on
    a single aspect of the workload. Fixing slow queries will undoubtedly help, but
    it might not help enough. The more performance you need from MySQL, the more you
    have to optimize the entire workload: each query, all data, and every access pattern.
    Eventually you will need to apply knowledge from every chapter of this book. (Except
    [Chapter 10](ch10.html#ch10) if you’re not using MySQL in the cloud.) Start small
    (Chapters [1](ch01.html#ch01)–[4](ch04.html#ch04)), but commit to learning and
    applying everything in this book because you will need it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is more to MySQL performance than I present in this book, but I assure
    you: the knowledge imparted in these chapters is comprehensive and effective.
    Moreover, there are no secrets known only to experts that unlock amazing MySQL
    performance. I know that from my own experience and also from having worked with
    many of the best MySQL experts in the world. Plus, open source software is terrible
    at keeping secrets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Practice: Identify the Guardrails that Prevent Split-Brain'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of this practice is to identify the guardrails that prevent split-brain.
    There are two parts: detailing the guardrails so that every engineer understands
    what they are, where they are (probably in tools), and how they work, and then
    carefully reviewing tools that manage or change MySQL instances, especially failover
    tools.'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not manage MySQL, then schedule time with the engineers who manage
    MySQL to have them detail how they prevent split-brain during operations, especially
    failover. This should be an easy request because preventing split-brain is fundamental
    to managing MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: If you use MySQL in the cloud, the details vary. Cloud providers have undisclosed
    methods to prevent split-brain depending on the internal setup and management
    of MySQL. For example, split-brain is theoretically not possible with a standard
    multi-AZ instance of Amazon RDS for MySQL because, although it’s multi-AZ, multiple
    instances of MySQL do not run at the same time. (It’s a single running instance
    of MySQL in one availability zone [AZ]. If that instance fails, another instance
    is started in another AZ.) But if you add read replicas, then you have multiple
    running instances of MySQL in the same replication topology, and Amazon does not
    make any guarantees about split-brain with respect to read replicas. In the cloud,
    presume that you are responsible for the guardrails that prevent split-brain,
    but also know when the cloud provider does and does not prevent split-brain.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you manage MySQL on your own hardware, then I advise you to contract a MySQL
    expert to help you identify the guardrails that prevent split-brain. (It shouldn’t
    take long, so it should be a short and affordable contract.) There is one foundational
    guardrail that you must implement: configure MySQL (in its *my.cnf* file) to start
    in read-only mode: `read_only=1`. Always start MySQL in read-only mode. From this
    foundation, other guardrails detail how read-only mode is toggled such that it’s
    guaranteed to be off (MySQL is writable) on only one instance at a time.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Always start MySQL in read-only mode (`read_only=1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the guardrails are understood by engineers, the second part is to carefully
    review tools that manage or change MySQL instances, especially failover tools,
    to ensure that the guardrails are implemented and working as expected. Of course,
    all code should be unit tested, but preventing split-brain is so important that
    it warrants manual code review, too. There are issues in code that might not surface
    when identifying the guardrails; for example: race conditions, retries, and error
    handling. The last—error handling—is especially important: can (or should) a tool
    roll back changes on error? Remember: data integrity is more important than data
    availability. When toggling MySQL read-only, tools should err on the side of caution:
    if an operation has a nonzero chance of causing split-brain, don’t do it; leave
    MySQL in read-only mode, fail, and let a human figure it out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bottom line: be 100% clear on the guardrails that prevent split-brain.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Practice: Check for Data Drift'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of this practice is to check for data drift using [`pt-table-checksum`](https://oreil.ly/mogUa).
    You’re in luck: this tool was purposely written to be easy and automatic. Simply
    download and run the tool, and it automates the rest in most cases. If not, a
    quick read through its documentation will answer any questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Most MySQL tools need special configuration to work with MySQL in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: '`pt-table-checksum` does only one thing: check for and report data drift. It
    can run for hours or days depending on data size and access load. By default,
    it’s slow to avoid interfering with production access. Therefore, be sure to run
    it in a `screen` or `tmux` session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When `pt-table-checksum` finishes checking a table, it prints a one-line result
    for the table. The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The last line of the output reveals a table with data drift because column `DIFFS`
    has a nonzero value. If any table has data drift, rerun with the `--replicate-check-only`
    option to print the replicas and chunks that are different than the source. (A
    *chunk* is a range of rows delineated by upper and lower boundary values for an
    index [usually the primary key]. `pt-table-checksum` verifies rows in chunks because
    checking individual rows is too slow and inefficient.) You will need to devise
    a plan to isolate and reconcile inconsistent rows. If there are very few, you
    might be able to isolate and reconcile them manually. If not, then I advise you
    to work with a MySQL expert to ensure it’s done correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Practice: Chaos'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this practice is to test the mettle of your application. Chaos engineering
    is not for the faint of heart, so start with your staging database.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This practice will cause outages.
  prefs: []
  type: TYPE_NORMAL
- en: For the following chaos, MySQL and the application should be running normally
    with some load, and you should have good metrics and observability into both to
    record and analyze how they respond.
  prefs: []
  type: TYPE_NORMAL
- en: 'I propose the following chaos, but pick and choose based on your level of risk:'
  prefs: []
  type: TYPE_NORMAL
- en: Restart MySQL
  prefs: []
  type: TYPE_NORMAL
- en: 'Restarting MySQL tests how the application responds when MySQL is offline,
    and how it responds when MySQL buffers are cold (specifically, the InnoDB buffer
    pool). Cold buffers require disk I/O to read data into memory, which causes slower
    than usual response time. It also teaches you three things: how long it takes
    MySQL to shutdown, how long it takes MySQL to start up, and how long it takes
    the buffers to warm up.'
  prefs: []
  type: TYPE_NORMAL
- en: Enable read-only mode
  prefs: []
  type: TYPE_NORMAL
- en: '`SET GLOBAL read_only=1` on the source instance to enable read-only mode and
    test how the application responds to being able to read data but not write data.
    Engineers often think that the application will continue working for reads and
    gracefully fail for writes, but chaos is full of surprises. This also effectively
    simulates a failed failover, which should never happen (because it would mean
    a failure of high availability), but “should never happen” is within the purview
    of chaos.'
  prefs: []
  type: TYPE_NORMAL
- en: Stop MySQL for 1 hour
  prefs: []
  type: TYPE_NORMAL
- en: 'Most applications can weather a storm for seconds or minutes—maybe even tens
    of minutes—but at some point, queues fill up, retires are exhausted, exponential
    backoffs become very long, rate limits reset, and users give up and go to a competitor.
    MySQL should never be offline more than a few seconds—if properly managed—but
    again: chaos.'
  prefs: []
  type: TYPE_NORMAL
- en: Back in 2004 when I worked in a data center, moments before I started my 2 p.m.
    to midnight shift, an engineer accidentally hit the emergency power off button—*to
    the data center*. Calm is the only answer to chaos, so I got a cup of coffee before
    sitting down to help reboot the data center.
  prefs: []
  type: TYPE_NORMAL
