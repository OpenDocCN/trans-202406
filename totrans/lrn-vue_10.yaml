- en: Chapter 10\. Transitioning and Animation in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have explored all the crucial aspects of building a working Vue application,
    including handling routes and data flow with proper state management. This chapter
    will explore a unique Vue feature for enhancing the user experience: animation
    and transitions, using transition components, hooks, and CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS Transitions and CSS Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS animations are the visual effects of a state change on a specific element
    or component, with no limit on the number of states. A CSS animation can start
    automatically and go into a loop without explicit triggering. In contrast, CSS
    transition is an animation that responds to a change *between two states only*,
    from average to hover for a button or from hidden to visible for a tooltip. To
    define a CSS animation, we often use the `@keyframes` rule and then apply it to
    the target element using the `animation` property. For example, we can define
    a simple animation effect for a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We defined a simple animation effect, `pulse`, and applied it to any element
    with `button` class, where the box shadow will expand and shrink in a loop, lasting
    two seconds. This effect will run infinitely if the element exists in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot displays a button with a pulse effect](assets/lvue_1001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-1\. Indefinite pulse animation effect
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Meanwhile, we can use the `transition` property to define a transition effect
    for a specific element when the user hovers over it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we created a simple transition effect for the `button` element:
    the background color will change from the default color to red on hovering, with
    a delay of `0.5` seconds, with a smoothing effect of `ease-in-out`. Alternatively,
    we can also use JavaScript and other animation libraries to define transition
    and animation programmatically using JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Transition and animation offer users a significantly smoother experience when
    using the application. However, working with transition and animation can sometimes
    be challenging. As a framework focusing on the view layer, Vue provides a set
    of APIs to help us create smooth, beautiful animations and transition effects
    for components and routes, with CSS and/or JavaScript, in a more straightforward
    manner. One is the `transition` component, which we will discuss in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Transition Component in Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `transition` component is a wrapper component that allows us to create
    a transition for a single element with two available transition states: enter
    and leave. The component provides a prop `name` as the name of the desired transition
    effect. Vue will compute the relevant transition classes with the `name` as their
    prefix and the direction state of the transition (`to`, `active`, or `from`) as
    their suffix, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we can use a `slidein` transition effect on an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Vue will generate a set of classes, which are described in [Table 10-1](#table_chap08_01).
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-1\. Generated transition classes for the slide-in transition effect
  prefs: []
  type: TYPE_NORMAL
- en: '| Classes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.slidein-enter-from` | Class selector for the starting state of the entering
    transition |'
  prefs: []
  type: TYPE_TB
- en: '| `.slidein-enter-active` | Class selector for defining the duration and delay
    of transition when the element is actively entering transition |'
  prefs: []
  type: TYPE_TB
- en: '| `.slidein-enter-to` | Class selector for the ending state of the entering
    transition |'
  prefs: []
  type: TYPE_TB
- en: '| `slidein-leave-from` | Class selector for the starting state of the leaving
    transition |'
  prefs: []
  type: TYPE_TB
- en: '| `slidein-leave-to` | Class selector for the ending state of the leaving transition
    |'
  prefs: []
  type: TYPE_TB
- en: '| `slidein-leave-active` | Class selector for defining the duration and delay
    of transition when the element is active in the middle of leaving transition |'
  prefs: []
  type: TYPE_TB
- en: 'The *enter state* means the element starts the process of transitioning to
    visible mode in the browser’s display, while the *leave state* indicates the opposite.
    We can combine with `v-show`, which toggles the element’s CSS `display` property,
    or `v-if` attribute, which inserts the piece to the DOM conditionally. We will
    add the `v-show` to the `ul` component of our code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we can use the previous classes to define the transition named `slidein`
    with the CSS `transition` property and the target CSS property or properties to
    perform the effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example implementation for the slide-in transition effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this code, before the entering transition, the browser will reposition the
    `ul` element horizontally to the left of the viewport using `translateX(-100%)`,
    then move it back to the correct position with `translateX(0)` in `slidein-enter-to`.
    The same applies to the leaving transition, except that the element will move
    to the viewport’s right instead of the left. Both changes will be on the `transform`
    property, with a duration of 0.5 seconds, as stated in the `slidein-enter-active`
    and `slidein-leave-active` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the effect in action, we can add a small timeout to change the value
    of the `searchResults` data property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Vue engine will add or remove each class as appropriate. We add another
    timeout to change the value of `showList` back to `false`, and Vue will trigger
    the transition effect again, except it is for the leave state ([Figure 10-2](#figure_c10_01)).
  prefs: []
  type: TYPE_NORMAL
- en: We have implemented a simple effect using the `transition` component with a
    single impact of `slidein`. How about combining different effects, such as `slidein`
    for the entering state and `rotate` for the leaving state? For such cases we use
    custom transition class attributes, which we will discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot displays some transition effect browser performs for a list
    of elements](assets/lvue_1002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-2\. Transition effect for the pizza list when `showList` is `true`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using Custom Transition Class Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides auto-generating the classes according to the `name` attribute, Vue
    also lets us specify the custom classes for each transition class using the following
    relevant props: `enter-class`, `enter-active-class`, `enter-to-class`, `leave-class`,
    `leave-active-class`, and `leave-to-class`. For example, we can define the custom
    classes for the `rotate` transition effect on leaving the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `style` section, we use `@keyframes` controls to define the animation
    effect for the `rotate` transition with keyframe offsets of 0%, 50%, 90% and 100%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can assign the animation effect `rotate` to `animation` property of
    the `rotate` class, at a duration of 0.5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s set the initial value of `showList` to `true` and a timeout of `1000`
    milliseconds to change it to `false`. While the effect on entering for the `ul`
    element is still `slidein`, the effect on leaving is now an animation of rotation
    starting from 45 degrees, then 90 degrees, and finally 180 degrees. See [Figure 10-3](#figure_c10_02)
    for an illustration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot displays some rotation effect browser performs for a list of
    elements](assets/lvue_1003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-3\. Rotating effect on transition using keyframes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can assign multiple classes to these props, separated by a single space,
    to apply various effects to a specific transition state. This feature is helpful
    when you want to integrate animation from external CSS libraries, such as Bootstrap,
    Tailwind CSS, or Bulma, with their classes.
  prefs: []
  type: TYPE_NORMAL
- en: Our component now has the transition effect whenever toggling the value of `showList`.
    However, we often want to animate the element when it appears on the screen after
    the page is loaded and without additional interaction. To do so, we can use the
    `appear` prop.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Transition Effect on the Initial Render with appear
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we set the `appear` prop to `true` on the `transition` element, Vue will
    automatically add the `enter-active` and `enter-to` classes to the component when
    mounting to the DOM, triggering the transition effect. For instance, to have the
    `slidein` impact applied on the initial render of the `ul` component, we only
    need to add `appear` prop to the `transition` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The browser now will apply the `slidein` effect on the UI’s initial appearance
    of the `ul` element.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to use the `transition` component to create a smooth transition
    effect for a single element. However, this component is not useful when we want
    to animate multiple parts simultaneously and in an orderly fashion. To do this,
    we have `transition-group`, which we will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Building Transition for a Group of Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `transition-group` component is a particular version of the `transition`,
    aiming to provide animation support to a group of elements. It accepts the same
    props as `transition` and is handy when we want to animate each item in a list,
    such as a list of pizzas or users. Nevertheless, unlike the `transition` element,
    `transition-group` supports rendering a wrapper element using the `tag` prop,
    and all the child elements will receive the same transition classes but not the
    wrapper (if one exists).
  prefs: []
  type: TYPE_NORMAL
- en: 'Take our list of pizzas, for instance. We can use the `transition-group` to
    animate each pizza card with the `fadein` effect when it appears on screen and
    wrap the cards under a `ul` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using `key` Attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must use the `key` attribute on each list element for Vue to track the changes
    in the list and apply the transition effect accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue will add the relevant classes `fadein-enter-active`, `fadein-enter-to`,
    `fadein-leave-active`, `fadein-leave-to` to each `li` element, which we define
    with the following CSS rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s it. Each pizza card in our list now appears with a fading effect and
    a slight slide-in transition from the right when loading the component for the
    first time. Whenever we filter the list using the search box, the new cards will
    appear with the same effect, while the old cards will disappear with the opposite
    effect: fading out and sliding out to the right ([Figure 10-4](#figure_c10_03)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot displays products fading away on search term typed](assets/lvue_1004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-4\. Fading effect on searching in list
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adding More Effects on the Movement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also add more effects to the moving items using the `<effect>-move`
    class (like `fadein-move`). This solution can be smoother when things move around
    in the list.
  prefs: []
  type: TYPE_NORMAL
- en: So far so good. We have explored how to use `transition` and `transition-group`
    components. The next step is to learn how to combine these components with the
    `router-view` element to create a smooth transition when navigating between routes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Route Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Beginning with Vue Router 4.0, we no longer can wrap the `router-view` component
    with the `transition` element. Instead, we combine the usage of the `Component`
    prop exposed by the `v-lot` API from the `router-view`, and the dynamic `component`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Component` prop refers to the target component that Vue renders in place
    of the `router-view` placeholder. We can then use the `component` element to generate
    the component dynamically and wrap it with the `transition` element to apply the
    `slidein` effect. By doing so, whenever we navigate a different route, there will
    be an animation effect: sliding in for the page entering and sliding out for the
    page leaving.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a minor issue here, however. When we navigate a different route, note
    that the new page’s content may appear before the previous page’s content finishes
    the animation for leaving and disappears. In such cases, we can use `mode` prop
    with the value `out-in` to ensure the new content will enter and start animating
    only after the previous content has disappeared entirely from the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, whenever we navigate to a different route, such as moving from `/` to `/about`,
    the About view will appear only after the Home view disappears.
  prefs: []
  type: TYPE_NORMAL
- en: To this point, we have explored how to create transition effects using `name`
    and custom transition classes. While these are sufficient to create smooth transition
    effects with custom animation classes for our application in most scenarios, we
    may find other cases where we want to use third-party JavaScript animation libraries
    for better transition effects. We need a different approach for such cases, allowing
    us to plug in custom animation control using JavaScript. We will learn how to
    do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using Transition Events to Control Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In contrast to the custom classes, Vue exposes some appropriate transition events
    for both transition components to emit. These events are `before-enter`, `enter`,
    `after-enter`, and `enter-cancelled` for the entering state of an element, and
    `before-leave`, `leave`, `after-leave`, and `leave-cancelled` for its leaving
    form. We can bind these events to the desired callbacks and control the transition
    effect using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we can use the `before-enter`, `enter`, `afterEnter` events to
    control the animation of the `slidein` effect on a page transitioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using the css Prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using the callbacks approach, we can use the `css` prop to disable the
    default and any possible overlapping CSS transition classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `script` section, we can define the callbacks for each event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we use the `gsap` (GreenSock Animation Platform) library to animate
    the element when it enters the DOM. We define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`beforeEnter`'
  prefs: []
  type: TYPE_NORMAL
- en: Callback to set the initial state of the element, including setting the `opacity`
    to hidden and repositioning the element 20px from the origin
  prefs: []
  type: TYPE_NORMAL
- en: '`enter`'
  prefs: []
  type: TYPE_NORMAL
- en: Callback to animate the element using `gsap.to` function^([1](ch10.html#id1538))
  prefs: []
  type: TYPE_NORMAL
- en: '`afterEnter`'
  prefs: []
  type: TYPE_NORMAL
- en: Callback to set the element’s visibility state and the position after the animation
    finishes
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can use the `before-leave`, `leave`, and `after-leave` events
    to animate the element when it leaves the DOM (such as a sliding-out effect) with
    the animation library of our choice.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use the transition component and the available
    hooks to create smooth transition effects from one route to another. We also learned
    how to make group transitions and use the transition component to animate elements
    within a segment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will discover another significant aspect of web development:
    testing. We will learn how to test composables with Vitest and components with
    the Vue Test Utils library and then develop a complete end-to-end testing plan
    with Playwright for our application.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch10.html#id1538-marker)) This function receives a target element and
    optional object containing all properties for animation. See [*https://oreil.ly/XNgFb*](https://oreil.ly/XNgFb).
  prefs: []
  type: TYPE_NORMAL
