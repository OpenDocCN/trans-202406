- en: Chapter 4\. Kustomize
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying to a Kubernetes cluster is, in summary, applying some YAML files and
    checking the result.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The hard part is developing the initial YAML files version; after that, usually,
    they suffer only small changes such as updating the container image tag version,
    the number of replicas, or a new configuration value. One option is to make these
    changes directly in the YAML files—it works, but any error in this version (modification
    of the wrong line, deleting something by mistake, putting in the wrong whitespace)
    might be catastrophic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, some tools let you define base Kubernetes manifests (which
    change infrequently) and specific files (maybe one for each environment) for setting
    the parameters that change more frequently. One of these tools is Kustomize.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to use Kustomize to manage Kubernetes resource
    files in a template-free way without using any DSL.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create a Kustomize project and deploy it to a Kubernetes
    cluster (see [Recipe 4.1](#recipe_4_1)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: After the first deployment, the application is automatically updated with a
    new container image, a new configuration value, or any other field, such as the
    replica number (see Recipes [4.2](#recipe_4_2) and [4.3](#recipe_4_3)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve got several running environments (i.e., staging, production, etc.),
    you need to manage them similarly. Still, with its particularities, Kustomize
    lets you define a set of custom values per environment (see [Recipe 4.4](#recipe_4_4)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Application configuration values are properties usually mapped as a Kubernetes
    `ConfigMap`. Any change (and its consequent update on the cluster) on a `ConfigMap`
    doesn’t trigger a rolling update of the application, which means that the application
    will run with the previous version until you manually restart it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Kustomize provides some functions to automatically execute a rolling update
    when the `ConfigMap` of an application changes (see [Recipe 4.5](#recipe_4_5)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 Using Kustomize to Deploy Kubernetes Resources
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy several Kubernetes resources at once.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use [Kustomize](https://kustomize.io) to configure which resources to deploy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an application to a Kubernetes cluster isn’t as trivial as just applying
    one YAML/JSON file containing a Kubernetes `Deployment` object. Usually, other
    Kubernetes objects must be defined like `Service`, `Ingress`, `ConfigMaps`, etc.,
    which makes things a bit more complicated in terms of managing and updating these
    resources (the more resources to maintain, the more chance to update the wrong
    one) as well as applying them to a cluster (should we run multiple `kubectl` commands?).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Kustomize is a CLI tool, integrated within the `kubectl` tool to manage, customize,
    and apply Kubernetes resources in a *template-less* way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: With Kustomize, you need to set a base directory with standard Kubernetes resource
    files (no placeholders are required) and create a *kustomization.yaml* file where
    resources and customizations are declared, as you can see in [Figure 4-1](#fig-411).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Kustomize layout](assets/gocb_0402.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1\. Kustomize layout
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s deploy a simple web page with HTML, JavaScript, and CSS files.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: First, open a terminal window and create a directory named *pacman*, then create
    three Kubernetes resource files to create a `Namespace`, a `Deployment`, and a
    `Service` with the following content.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'The namespace at *pacman/namespace.yaml*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The deployment file at *pacman/deployment.yaml*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The service file at *pacman/service.yaml*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that these files are Kubernetes files that you could apply to a Kubernetes
    cluster without any problem as no special characters or placeholders are used.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing is to create the *kustomization.yaml* file in the *pacman*
    directory containing the list of resources that belongs to the application and
    are applied when running Kustomize:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_kustomize_CO1-1)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Kustomization file
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO1-2)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Resources belonging to the application processed in depth-first order
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can apply the kustomization file into a running cluster by
    running the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_kustomize_CO2-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Prints the result of the kustomization run, without sending the result to the
    cluster
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO2-2)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: With `-k` option sets `kubectl` to use the kustomization file
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO2-3)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Directory with parent *kustomization.yaml* file
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We assume you’ve already started a *Minikube* cluster as shown in [Recipe 2.3](ch02.xhtml#recipe_2_3).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is the YAML file that would be sent to the server if the `dry-run`
    option was not used:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_kustomize_CO3-1)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: List of all Kubernetes objects defined in *kustomization.yaml* to apply
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO3-2)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The namespace document
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO3-3)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The service document
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_kustomize_CO3-4)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: The deployment document
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `resources` section supports different inputs in addition to directly setting
    the YAML files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can set a base directory with its own *kustomization.yaml*
    and Kubernetes resources files and refer it from another *kustomization.yaml*
    file placed in another directory.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the following directory layout:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the Kustomization definitions in the *base* directory:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You’ll see that the root directory has a link to the *base* directory and a
    `ConfigMap` definition:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, applying the root kustomization file will automatically apply the resources
    defined in the base kustomization file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, `resources` can reference external assets from a URL following the [HashiCorp
    URL](https://oreil.ly/lbeQC) format. For example, we refer to a GitHub repository
    by setting the URL:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_kustomize_CO4-1)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Repository with a root-level *kustomization.yaml* file
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO4-2)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Repository with a root-level *kustomization.yaml* file on branch test
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: You’ve seen the application of a Kustomize file using `kubectl`, but Kustomize
    also comes with its own CLI tool offering a set of commands to interact with Kustomize
    resources.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent command to build Kustomize resources using `kustomize` instead
    of `kubectl` is:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And the output is:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you want to apply this output generated by `kustomize` to the cluster, run
    the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See Also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Kustomize](https://kustomize.io)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[kustomize/v4.4.1 on GitHub](https://oreil.ly/h2yNd)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HashiCorp URL format](https://oreil.ly/n7jwr)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.2 Updating the Container Image in Kustomize
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to update the container image from a deployment file using Kustomize.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `images` section to update the container image.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important and most-used operations in software development is
    updating the application to a newer version either with a bug fix or with a new
    feature. In Kubernetes, this means that you need to create a new container image,
    and name it accordingly using the `tag` section (`<registry>/<username>/<project>:<tag>`).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the following partial deployment file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](assets/1.png)](#co_kustomize_CO5-1)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Service 1.0.0 is deployed
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'We can update the version tag to 1.0.1 by using the `images` section in the
    *kustomization.yaml* file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](assets/1.png)](#co_kustomize_CO6-1)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '`images` section'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO6-2)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Sets the name of the image to *update*
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO6-3)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Sets the new tag value for the image
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, use `kubectl` in `dry-run` or `kustomize` to validate that the output
    of the deployment file contains the new tag version. In a terminal window, run
    the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding command is:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](assets/1.png)](#co_kustomize_CO7-1)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Version set in the `kustomize.yaml` file
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Kustomize is not intrusive, which means that the original *deployment.yaml*
    file still contains the original tag (`1.0.0`).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One way to update the `newTag` field is by editing the *kustomization.yaml*
    file, but you can also use the `kustomize` tool for this purpose.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the same directory as the *kustomization.yaml*
    file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Check the content of the *kustomization.yaml* file to see that the `newTag`
    field has been updated:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 4.3 Updating Any Kubernetes Field in Kustomize
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to update a field (i.e., number of replicas) using Kustomize.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `patches` section to specify a change using the JSON Patch specification.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, you saw how to update the container image tag, but sometimes
    you might change other parameters like the number of replicas or add annotations,
    labels, limits, etc.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: To cover these scenarios, Kustomize supports the use of JSON Patch to modify
    any Kubernetes resource defined as a Kustomize resource. To use it, you need to
    specify the JSON Patch expression to apply and which resource to apply the patch
    to.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can modify the number of replicas in the following partial
    deployment file from one to three:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'First, let’s update the *kustomization.yaml* file to modify the number of replicas
    defined in the deployment file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](assets/1.png)](#co_kustomize_CO8-1)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Patch resource.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO8-2)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`target` section sets which Kubernetes object needs to be changed. These values
    match the deployment file created previously.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO8-3)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Patch expression.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_kustomize_CO8-4)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Modification of a value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_kustomize_CO8-5)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Path to the field to modify.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_kustomize_CO8-6)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: New value.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, use `kubectl` in `dry-run` or `kustomize` to validate that the output
    of the deployment file contains the new tag version. In a terminal window, run
    the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the preceding command is:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The *replicas* value can also be updated using the `replicas` field in the *kustomization.yaml*
    file.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent Kustomize file using the `replicas` field is shown in the following
    snippet:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[![1](assets/1.png)](#co_kustomize_CO9-1)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Deployment to update the replicas
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO9-2)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: New `replicas` value
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Kustomize lets you add (or delete) values, in addition to modifying a value.
    Let’s see how to add a new label:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_kustomize_CO10-1)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Adds a new field with value
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO10-2)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Path with the field to add
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO10-3)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: The value to set
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of applying the file is:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](assets/1.png)](#co_kustomize_CO11-1)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Added label
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of embedding a JSON Patch expression, you can create a YAML file with
    a Patch expression and refer to it using the `path` field instead of `patch`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an external patch file named *external_patch* containing the JSON Patch
    expression:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And change the `patch` field to `path` pointing to the patch file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[![1](assets/1.png)](#co_kustomize_CO12-1)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Path to external patch file
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the JSON Patch expression, Kustomize also supports [Strategic
    Merge Patch](https://oreil.ly/vr3e3) to modify Kubernetes resources. In summary,
    a Strategic Merge Patch (or *SMP*) is an incomplete YAML file that is merged against
    a completed YAML file.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Only a minimal deployment file with container name information is required
    to update a container image:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_kustomize_CO13-1)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Target is selected using label
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO13-2)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Patch is smart enough to detect if it is an SMP or JSON Patch
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO13-3)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: This is a minimal deployment file
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_kustomize_CO13-4)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Sets only the field to change, the rest is left as is
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated output is the original *deployment.yaml* file but with the new
    container image:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`path` is supported as well.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[RFC 6902: JavaScript Object Notation (JSON) Patch](https://oreil.ly/gDn1A)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Strategic Merge Patch](https://oreil.ly/vr3e3)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.4 Deploying to Multiple Environments
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to deploy the same application in different namespaces using Kustomize.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `namespace` field to set the target namespace.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: In some circumstances, it’s good to have the application deployed in different
    namespaces; for example, one namespace can be used as a *staging* environment,
    and another one as the *production* namespace. In both cases, the base Kubernetes
    files are the same, with minimal changes like the namespace deployed, some configuration
    parameters, or container version, to mention a few. [Figure 4-2](#fig-441) shows
    an example.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![Kustomize layout](assets/gocb_0402.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2\. Kustomize layout
  id: totrans-194
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`kustomize` lets you define multiple changes with a different namespace, as
    overlays on a common base using the `namespace` field. For this example, all base
    Kubernetes resources are put in the `base` directory and a new directory is created
    for customizations of each environment:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](assets/1.png)](#co_kustomize_CO14-1)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Base files
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO14-2)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Changes specific to production environment
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO14-3)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Changes specific to staging environment
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'The base kustomization file contains a reference to its resources:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There is a kustomization file with some parameters set for each environment
    directory. These reference the *base* directory, the namespace to inject into
    Kubernetes resources, and finally, the image to deploy, which in production is
    *1.1.0* but in staging is *1.2.0-beta*.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'For the staging environment, *kustomization.yaml* content is shown in the following
    listing:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_kustomize_CO15-1)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: References to *base* directory
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO15-2)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Sets namespace to *staging*
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO15-3)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Sets the container tag for the *staging* environment
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'The kustomization file for production is similar to the staging one, but changes
    the namespace and the tag:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_kustomize_CO16-1)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Sets namespace for *production*
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO16-2)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Sets the container tag for the *production* environment
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `kustomize` produces different output depending on the directory where
    it is run; for example, running `kustomize build` in the *staging* directory produces:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[![1](assets/1.png)](#co_kustomize_CO17-1)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Namespace value is injected
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO17-2)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Container tag for the *staging* environment is injected
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you run it in the *production* directory, the output is adapted to the
    production configuration:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[![1](assets/1.png)](#co_kustomize_CO18-1)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Injects the *production* namespace
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO18-2)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Container tag for the *production* environment
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kustomize can preappend/append a value to the names of all resources and references.
    This is useful when a different name in the resource is required depending on
    the environment, or to set the version deployed in the name:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[![1](assets/1.png)](#co_kustomize_CO19-1)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Prefix to preappend
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO19-2)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Suffix to append
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'And the resulting output is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_kustomize_CO20-1)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: New name of the deployment file
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Generating ConfigMaps in Kustomize
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to generate Kubernetes `ConfigMap`s using Kustomize.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `ConfigMapGenerator` feature field to generate a Kubernetes `ConfigMap`
    resource on the fly.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Kustomize provides two ways of adding a `ConfigMap` as a Kustomize resource:
    either by declaring a `ConfigMap` as any other resource or declaring a `ConfigMap`
    from a `ConfigMapGenerator`.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: While using `ConfigMap` as a resource offers no other advantage than populating
    Kubernetes resources as any other resource, `ConfigMapGenerator` automatically
    appends a hash to the `ConfigMap` metadata name and also modifies the deployment
    file with the new hash. This minimal change has a deep impact on the application’s
    lifecycle, as we’ll see soon in the example.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider an application running in Kubernetes and configured using a `ConfigMap`—for
    example, a database timeout connection parameter. We decided to increase this
    number at some point, so the `ConfigMap` file is changed to this new value, and
    we deploy the application again. Since the `ConfigMap` is the only changed file,
    no rolling update of the application is done. A manual rolling update of the application
    needs to be triggered to propagate the change to the application. [Figure 4-3](#fig-451)
    shows what is changed when a `ConfigMap` object is updated.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![A change on the ConfigMap object](assets/gocb_0403.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3\. Change of a `ConfigMap`
  id: totrans-252
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But, if `ConfigMapGenerator` manages the `ConfigMap`, any change on the configuration
    file also changes the deployment Kubernetes resource. Since the deployment file
    has changed too, an automatic rolling update is triggered when the resources are
    applied, as shown in [Figure 4-4](#fig-452).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, when using `ConfigMapGenerator`, multiple configuration datafiles
    can be combined into a single `ConfigMap`, making a perfect use case when every
    environment has different configuration files.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![Change of a ConfigMap using ConfigMapGenerator](assets/gocb_0404.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: Figure 4-4\. Change of a `ConfigMap` using `ConfigMapGenerator`
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s start with a simple example, adding the `ConfigMapGenerator` section in
    the *kustomization.yaml* file.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment file is similar to the one used in previous sections of this
    chapter but includes the `volumes` section:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_kustomize_CO21-1)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '`ConfigMap` name is used in the *kustomization.yaml* file'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration properties are embedded within the *kustomization.yaml* file.
    Notice that the `ConfigMap` object is created on the fly when the kustomization
    file is built:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[![1](assets/1.png)](#co_kustomize_CO22-1)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Name of the `ConfigMap` set in the deployment file
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO22-2)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Embeds configuration values in the file
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO22-3)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Sets a key/value pair for the properties
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, use `kubectl` in `dry-run` or `kustomize` to validate that the output
    of the deployment file contains the new tag version. In a terminal window, run
    the following command:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output of the preceding command is a new `ConfigMap` with the configuration
    values set in *kustomization.yaml*. Moreover, the name of the `ConfigMap` is updated
    by appending a hash in both the generated `ConfigMap` and deployment:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[![1](assets/1.png)](#co_kustomize_CO23-1)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '`ConfigMap` with properties'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO23-2)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Name with hash
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO23-3)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Name field is updated to the one with the hash triggering a rolling update
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the hash is calculated for any change in the configuration properties,
    a change on them provokes a change on the output triggering a rolling update of
    the application. Open the *kustomization.yaml* file and update the `db-timeout`
    literal from 2000 to 1000 and run `kustomize build` again. Notice the change in
    the `ConfigMap` name using a new hashed value:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[![1](assets/1.png)](#co_kustomize_CO24-1)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: New hashed value
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ConfigMapGenerator` also supports merging configuration properties from different
    sources.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new *kustomization.yaml* file in the *dev_literals* directory, setting
    it as the previous directory and overriding the `db-username` value:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[![1](assets/1.png)](#co_kustomize_CO25-1)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: Base directory
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO25-2)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Merge properties (can be `create` or `replace` too)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_kustomize_CO25-3)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Overridden value
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `kustomize build` command produces a `ConfigMap` containing a merge
    of both configuration properties:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](assets/1.png)](#co_kustomize_CO26-1)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Inherits from base
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO26-2)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Overrides value
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: In addition to setting configuration properties as literals, Kustomize supports
    defining them as *.properties* files.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a *connection.properties* file with two properties inside:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The *kustomization.yaml* file uses the `files` field instead of `literals`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[![1](assets/1.png)](#co_kustomize_CO27-1)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Sets a list of files to read
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_kustomize_CO27-2)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Path to the properties file
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `kustomize build` command produces a `ConfigMap` containing the
    name of the file as a key, and the value as the content of the file:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: See Also
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kustomize offers a similar way to deal with Kubernetes Secrets. But as we’ll
    see in [Chapter 8](ch08.xhtml#ch_Advanced_Topics), the best way to deal with Kubernetes
    Secrets is using Sealed Secrets.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 Final Thoughts
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kustomize is a simple tool, using template-less technology that allows you to
    define plain YAML files and override values either using a merge strategy or using
    JSON Patch expressions. The structure of a project is free as you define the directory
    layout you feel most comfortable with; the only requirement is the presence of
    a *kustomization.yaml* file.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Kustomize 是一个简单的工具，使用无模板技术，允许您定义普通的 YAML 文件，并使用合并策略或 JSON Patch 表达式覆盖值。项目的结构是自由的，您可以定义您感觉最舒适的目录布局；唯一的要求是存在一个*kustomization.yaml*文件。
- en: But there is another well-known tool to manage Kubernetes resources files, that
    in our opinion, is a bit more complicated but more powerful, especially when the
    application/service to deploy has several dependencies such as databases, mail
    servers, caches, etc. This tool is Helm, and we’ll cover it in [Chapter 5](ch05.xhtml#ch_Helm).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 但是还有另一个知名的工具来管理 Kubernetes 资源文件，据我们认为，它稍微复杂一些但更强大，特别是当要部署的应用/服务有多个依赖项，比如数据库、邮件服务器、缓存等。这个工具就是
    Helm，我们将在[第五章](ch05.xhtml#ch_Helm)中详细介绍它。
