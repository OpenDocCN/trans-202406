["```\npublic interface OnClickListener {\n  void onClick(View v);\n}\n```", "```\n<!-- contents of res/layout/myactivity_layout.xml -->\n<Button xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Click me!\"\n    android:onClick=\"myClickHandler\" />\n```", "```\npublic class MyActivity extends Activity {\n\n  @Override\n   protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.myactivity_layout);\n   }\n\n   public void myClickHandler(View view) {\n    Log.d(\"MyTag\", \"View was clicked \" + view.toString());\n   }\n\n}\n```", "```\nclass SomeViewController: UIViewController {\n    var imageView: UIImageView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        imageView = UIImageView(image: ...)\n        let gestureRecognizer =\n          UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))\n        gestureRecognizer.numberOfTapsRequired = 1\n        imageView.addGestureRecognizer(gestureRecognizer)\n    }\n\n    @objc func handleTap(_ gestureRecognizer: UIGestureRecognizer) {\n        print(\"Image tapped!\")\n    }\n}\n```", "```\nlet gestureRecognizer = UITapGestureRecognizer(target: self, action:\n#selector(handleTap(_:)))\nimageView.addGestureRecognizer(gestureRecognizer)\n```", "```\nclass SomeViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField = UITextField(frame: ...)\n        textField.addTarget(self, action: #selector(textFieldDidChange(_:)),\n        for: .editingChanged)\n    }\n\n    @objc func textFieldDidChange(_ textField: UITextField) {\n        print(textField.text)\n    }\n}\n```", "```\nclass SomeViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField = UITextField(frame: ...)\n        NotificationCenter.default\n            .addObserver(self, selector: #selector(textFieldDidChange(_:)),\n            name: UITextField.textDidChangeNotification, object: textField)\n    }\n\n    @objc func textFieldDidChange(_ notification: Notification) {\n        let textField = notification.object as! UITextField\n        print(textField.text)\n    }\n}\n```", "```\nclass SomeViewController: UIViewController {\n    var textField1: UITextField!\n    var textField2: UITextField!\n    var textField3: UITextField!\n    var textView1: UITextView!\n    var textView2: UITextView!\n    var textView3: UITextView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        NotificationCenter.default\n            .addObserver(self, selector: #selector(textFieldDidChange(_:)),\n            name: UITextField.textDidChangeNotification, object: nil)\n        NotificationCenter.default\n            .addObserver(self, selector: #selector(textViewDidChange(_:)),\n            name: UITextView.textDidChangeNotification, object: nil)\n    }\n\n    @objc func textFieldDidChange(_ notification: Notification) {\n        let textField = notification.object as! UITextField\n        doSomething(textField.text!)\n    }\n\n    @objc func textViewDidChange(_ notification: Notification) {\n        let textView = notification.object as! UITextView\n        doSomething(textView.text!)\n    }\n\n    private func doSomething(for text: String?) {\n        print(text)\n    }\n}\n```", "```\nlet doubleTapRecognizer = UITapGestureRecognizer(target: self,\naction: #selector(handleTap(_:)))\ndoubleTapRecognizer.numberOfTapsRequired = 2\n```", "```\nlet panGestureRecognizer = UIPanGestureRecognizer(target: self,\naction: #selector(handlePan(_:)))\npanGestureRecognizer.minimumNumberOfTouches = 3\n```", "```\nlet fiveFingerTapRecognizer = UITapGestureRecognizer(target: self,\naction: #selector(handleTap(_:)))\nfiveFingerTapRecognizer.numberOfTapsRequired = 3\nfiveFingerTapRecognizer.numberOfTouchesRequired = 5\n```", "```\n// Create a double tap recognizer\nlet doubleTapRecognizer = UITapGestureRecognizer(target: self,\naction: #selector(handleTap(_:)))\ndoubleTapRecognizer.numberOfTapsRequired = 2\n\n// Create a single tap recognizer\nlet singleTapRecognizer = UITapGestureRecognizer(target: self,\naction: #selector(handleTap(_:)))\nsingleTapRecognizer.numberOfTapsRequired = 1\nsingleTapRecognizer.require(toFail: doubleTapRecognizer)\n```"]