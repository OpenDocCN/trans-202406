- en: Chapter 6\. Setting Up for App Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know a lot about React, JSX, and state management in both class-based
    and function components, it’s time to move on to creating and deploying a real-world
    app. Chapter 7 will start this process, but there are a few requirements you need
    to take care of first.
  prefs: []
  type: TYPE_NORMAL
- en: For any serious development and deployment outside of prototyping or testing
    JSX, you need to set up a build process. The goals are to use JSX and any other
    modern JavaScript without waiting on browsers to implement them. You need to set
    up a transformation that runs in the background as you’re developing. The transformation
    process should produce code that is as close to the code your end-users will run
    on the live site (meaning no more client-side transforms). The process should
    also be as unobtrusive as possible so you don’t need to switch between developing
    and building contexts.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript community and ecosystem offers plenty of options when it comes
    to development and build processes. One of the easiest, most common approaches
    is to use the Create React App (CRA) utility (which has [great documentation](https://create-react-app.dev)),
    so let’s go with that.
  prefs: []
  type: TYPE_NORMAL
- en: Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CRA is a set of Node.js scripts and their dependencies that take the burden
    of setting up everything you require to get off the ground. So first you need
    to install Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install Node.js, go to [*https://nodejs.org*](https://nodejs.org) and grab
    the installer for your operating system. Follow the instructions of the installer
    and it’s all done. Now you can avail yourself of the services provided by the
    command-line Node package manager (`npm`) utility.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have Node.js installed, it’s a good idea to make sure you have the
    latest version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify, type this in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t have experience using a terminal (a command prompt), now is a great
    time to start! On Mac OS X, click the Spotlight search (the magnifying glass icon
    at the top-right corner) and type **`Terminal`**. On Windows, find the Start menu
    (right-click the windows icon at the bottom left of the screen), select Run, and
    type **`powershell`**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this book, all the commands you type in your terminal are prefixed with `$`
    as a cue to differentiate them from regular code. You omit the `$` when typing
    in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Hello CRA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install CRA and have it available locally for future projects. But
    that means updating it every once in a while. An even more convenient approach
    is to use the `npx` utility that comes with Node.js. It allows you to execute
    (hence the “x”) Node package scripts. You can run the CRA script once: it downloads
    and executes the last version, sets up your app, and it’s gone. Next time you
    need to start another project, you run it again without worrying about updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, create a temporary directory and execute CRA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Give it a minute or two to complete the process and you’ll be greeted with
    the success/welcome message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As the screen says, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This opens your browser and points it to *http://localhost:3000/* where you
    can see a working React application (as shown in [Figure 6-1](#FIG0601)).
  prefs: []
  type: TYPE_NORMAL
- en: '![rur2 0601](Images/rur2_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. A new React app
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now you can open *~/reactbook/test/hello/src/App.js* and make a small change.
    As soon as you save the changes, the browser will update with the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: Build and Deploy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you’re happy with the changes and you’re ready to unleash the new
    app into the world. Go to the terminal/console window and press Ctrl + C. This
    kills the process and further changes will not auto-update in the browser. You’re
    ready. Type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the process of building and packaging the app, ready to be deployed.
    The build is found in a */build* folder (as shown in [Figure 6-2](#FIG0602)).
  prefs: []
  type: TYPE_NORMAL
- en: '![rur2 0602](Images/rur2_0602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. A new build of the React app
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Copy the contents of this folder to a web server—even a simple shared hosting
    will do—and you’re ready to announce the new app. When you want to make a change,
    repeat the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Mistakes Were Made
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you save a file with an error in it (maybe you forgot to close a JSX tag),
    the ongoing build fails and you get an error message in both the console and the
    browser (see [Figure 6-3](#FIG0603) for an example).
  prefs: []
  type: TYPE_NORMAL
- en: '![rur2 0603](Images/rur2_0603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. An error
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is great! You get immediate feedback. To quote John C. Maxwell, “Fail early,
    fail often, but always fail forward.” Wise words to live by.
  prefs: []
  type: TYPE_NORMAL
- en: package.json and node_modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The file *package.json* found in the root directory of the app contains various
    configurations for the app ([CRA](https://create-react-app.dev) has extensive
    documentation). One of the configuration pieces deals with dependencies, such
    as React and React-DOM. These dependencies are installed in the *node_modules*
    folder in the root of the app.
  prefs: []
  type: TYPE_NORMAL
- en: The dependencies there are for developing and building the app, not for deployment.
    And they should not be included if you share the code of your app with friends,
    coworkers or the open-source community. For example, if you’re to share this app
    on GitHub, you do not include *node_modules*. When someone else wants to contribute
    or you want to contribute to another app, you install the dependencies locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Give this a try. Delete the whole *node_modules* folder. Then go to the root
    of the app and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `i` is for “install.” This way all the dependencies listed in your *package.json*
    (and their dependencies) are installed in a newly created *node_modules* directory.
  prefs: []
  type: TYPE_NORMAL
- en: Poking Around the Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take a look around the code generated by CRA and note a few specifics
    regarding the app’s entry points (*index.html* and *index.js*) and its handling
    of JavaScript and CSS dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Indices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *public/index.html* you’ll find the old school HTML index page, the root
    of everything rendered by the browser. This is where `<div id="root">` is defined
    and where React will render your top level component and all its children.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file *src/index.js* is the main entry for the app as far as React is concerned.
    Note the top part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'JavaScript: Modernized'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The examples in the book so far worked only with simple components and made
    sure `React` and `ReactDOM` were available as *global variables*. As you move
    toward more complicated apps with multiple components, you need a plan for better
    organization. Sprinkling globals is dangerous (they tend to cause naming collisions)
    and relying on globals to always be present is flaky at best.
  prefs: []
  type: TYPE_NORMAL
- en: You need *modules*. Modules split up the different pieces of functionality that
    make up your app into small, manageable files. In general, you should have a separate
    module for each concern; modules and concerns have a one-to-one relationship.
    Some modules can be individual React components; some can simply be utilities
    related, or unrelated to React entirely—for example, a reducer, a custom hook,
    or a library that deals with formatting dates or currencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general template for a module is: declare requirements up top, export at
    the bottom, implement the “meat” in between. In other words, these three tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Require/import dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide an API in the form of a function/class/object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export the API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For a React component, the template could look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Again, a convention that can prove helpful is: one module exports one React
    component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Did you notice the difference in importing React versus `MyOtherComponent`:
    `from ''react''` and `from ''./MyOtherComponent''`? The latter is a directory
    path—you’re telling the module to pull the dependency from a file location relative
    to the module, whereas the former is pulling a dependency from a shared place
    (*node_modules*).'
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `src/index.js` you can see how CSS is treated just like another module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The *src/index.css* should contain general styles, such as `body`, `html`, and
    so on, that are applicable to the whole page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the app-wide styles, you need specific styles for each component.
    Under the convention of having one CSS file (and one JS file) per React component,
    it’s a good idea to have *MyComponent.css* containing the styles related only
    to *MyComponent.js* and nothing else. Also a good idea could be to prefix all
    class names used in *MyComponent.js* with *MyComponent-*. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'While there are many other ways to author CSS, let’s keep it simple and old-school:
    anything that will run just in the browser without any transpilation.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving On
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you have an example of a simple writing, building, and deployment pipeline.
    With all this behind you it’s time to move on to more entertaining topics: building
    and testing a real app while taking advantage of the many features modern JavaScript
    has to offer.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point you can delete the `hello` app or keep it around for exploration
    and trying out ideas.
  prefs: []
  type: TYPE_NORMAL
