["```\nlet mathematician = Math.random() > 0.5\n    ? undefined\n    : \"Mark Goldberg\";\n```", "```\nlet thinker: string | null = null;\n\nif (Math.random() > 0.5) {\n    thinker = \"Susanne Langer\"; // Ok\n}\n```", "```\nlet physicist = Math.random() > 0.5\n    ? \"Marie Curie\"\n    : 84;\n\nphysicist.toString(); // Ok\n\nphysicist.toUpperCase();\n//        ~~~~~~~~~~~\n// Error: Property 'toUpperCase' does not exist on type 'string | number'.\n//   Property 'toUpperCase' does not exist on type 'number'.\n\nphysicist.toFixed();\n//        ~~~~~~~\n// Error: Property 'toFixed' does not exist on type 'string | number'.\n//   Property 'toFixed' does not exist on type 'string'.\n```", "```\nlet admiral: number | string;\n\nadmiral = \"Grace Hopper\";\n\nadmiral.toUpperCase(); // Ok: string\n\nadmiral.toFixed();\n//      ~~~~~~~\n// Error: Property 'toFixed' does not exist on type 'string'.\n```", "```\nlet inventor: number | string = \"Hedy Lamarr\";\n\ninventor.toUpperCase(); // Ok: string\n\ninventor.toFixed();\n//       ~~~~~~~\n// Error: Property 'toFixed' does not exist on type 'string'.\n```", "```\n// Type of scientist: number | string\nlet scientist = Math.random() > 0.5\n    ? \"Rosalind Franklin\"\n    : 51;\n\nif (scientist === \"Rosalind Franklin\") {\n    // Type of scientist: string\n    scientist.toUpperCase(); // Ok\n}\n\n// Type of scientist: number | string\nscientist.toUpperCase();\n//        ~~~~~~~~~~~\n// Error: Property 'toUpperCase' does not exist on type 'string | number'.\n//   Property 'toUpperCase' does not exist on type 'number'.\n```", "```\nlet researcher = Math.random() > 0.5\n    ? \"Rosalind Franklin\"\n    : 51;\n\nif (typeof researcher === \"string\") {\n    researcher.toUpperCase(); // Ok: string\n}\n```", "```\nif (!(typeof researcher === \"string\")) {\n    researcher.toFixed(); // Ok: number\n} else {\n    researcher.toUpperCase(); // Ok: string\n}\n```", "```\ntypeof researcher === \"string\"\n    ? researcher.toUpperCase() // Ok: string\n    : researcher.toFixed(); // Ok: number\n```", "```\nconst philosopher = \"Hypatia\";\n```", "```\nlet lifespan: number | \"ongoing\" | \"uncertain\";\n\nlifespan = 89; // Ok\nlifespan = \"ongoing\"; // Ok\n\nlifespan = true;\n// Error: Type 'true' is not assignable to\n// type 'number | \"ongoing\" | \"uncertain\"'\n```", "```\nlet specificallyAda: \"Ada\";\n\nspecificallyAda = \"Ada\"; // Ok\n\nspecificallyAda = \"Byron\";\n// Error: Type '\"Byron\"' is not assignable to type '\"Ada\"'.\n\nlet someString = \"\"; // Type: string\n\nspecificallyAda = someString;\n// Error: Type 'string' is not assignable to type '\"Ada\"'.\n```", "```\nsomeString = \":)\";\n```", "```\nconst firstName: string = null;\n```", "```\nlet nameMaybe = Math.random() > 0.5\n    ? \"Tony Hoare\"\n    : undefined;\n\nnameMaybe.toLowerCase();\n// Potential runtime error: Cannot read property 'toLowerCase' of undefined.\n```", "```\nlet nameMaybe = Math.random() > 0.5\n    ? \"Tony Hoare\"\n    : undefined;\n\nnameMaybe.toLowerCase();\n// Error: Object is possibly 'undefined'.\n```", "```\nlet geneticist = Math.random() > 0.5\n    ? \"Barbara McClintock\"\n    : undefined;\n\nif (geneticist) {\n    geneticist.toUpperCase(); // Ok: string\n}\n\ngeneticist.toUpperCase();\n// Error: Object is possibly 'undefined'.\n```", "```\ngeneticist && geneticist.toUpperCase(); // Ok: string | undefined\ngeneticist?.toUpperCase(); // Ok: string | undefined\n```", "```\nlet biologist = Math.random() > 0.5 && \"Rachel Carson\";\n\nif (biologist) {\n    biologist; // Type: string\n} else {\n    biologist; // Type: false | string\n}\n```", "```\nlet mathematician: string;\n\nmathematician?.length;\n// Error: Variable 'mathematician' is used before being assigned.\n\nmathematician = \"Mark Goldberg\";\nmathematician.length; // Ok\n```", "```\nlet mathematician: string | undefined;\n\nmathematician?.length; // Ok\n\nmathematician = \"Mark Goldberg\";\nmathematician.length; // Ok\n```", "```\nlet rawDataFirst: boolean | number | string | null | undefined;\nlet rawDataSecond: boolean | number | string | null | undefined;\nlet rawDataThird: boolean | number | string | null | undefined;\n```", "```\ntype MyName = ...;\n```", "```\ntype RawData = boolean | number | string | null | undefined;\n\nlet rawDataFirst: RawData;\nlet rawDataSecond: RawData;\nlet rawDataThird: RawData;\n```", "```\nlet rawDataFirst;\nlet rawDataSecond;\nlet rawDataThird;\n```", "```\ntype SomeType = string | undefined;\n\nconsole.log(SomeType);\n//          ~~~~~~~~\n// Error: 'SomeType' only refers to a type, but is being used as a value here.\n```", "```\ntype Id = number | string;\n\n// Equivalent to: number | string | undefined | null\ntype IdMaybe = Id | undefined | null;\n```", "```\ntype IdMaybe = Id | undefined | null; // Ok\ntype Id = number | string;\n```"]