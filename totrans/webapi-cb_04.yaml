- en: Chapter 4\. Network Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’d have a tough time finding a web application today that doesn’t send any
    network requests. Since the dawn of Web 2.0 and the novel approach known as Ajax
    (Asynchronous JavaScript and XML), web apps have been sending asynchronous requests
    to get new data without reloading the entire page. The XMLHttpRequest API started
    a new era of interactive JavaScript apps. Despite the name, XMLHttpRequest (or
    XHR, as it is sometimes known) can also work with JSON and form data payloads.
  prefs: []
  type: TYPE_NORMAL
- en: XMLHttpRequest was a game changer, but the API can be painful to work with.
    Eventually, third-party libraries such as Axios and jQuery added more streamlined
    APIs that wrapped the core XHR API.
  prefs: []
  type: TYPE_NORMAL
- en: In 2015, a newer `Promise`-based API called Fetch became a new standard, and
    browsers gradually started adding support for it. Today, Fetch is the standard
    way to make asynchronous requests from your web apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter explores XHR and Fetch as well as some other APIs for network
    communication:'
  prefs: []
  type: TYPE_NORMAL
- en: Beacons
  prefs: []
  type: TYPE_NORMAL
- en: A simple one-way POST request ideal for sending analytics data
  prefs: []
  type: TYPE_NORMAL
- en: Server-sent events
  prefs: []
  type: TYPE_NORMAL
- en: A one-way persistent connection with a server to receive real-time events
  prefs: []
  type: TYPE_NORMAL
- en: WebSockets
  prefs: []
  type: TYPE_NORMAL
- en: A two-way persistent connection for bidirectional communication
  prefs: []
  type: TYPE_NORMAL
- en: Sending a Request with XMLHttpRequest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to send a GET request to a public API, and you want to support older
    browsers that don’t implement the Fetch API.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the XMLHttpRequest API. XMLHttpRequest is an asynchronous, event-based
    API for making network requests. The general usage of XMLHttpRequest is this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `XMLHttpRequest` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a listener for the `load` event, which receives the response data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `open` on the request, passing the HTTP method and URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, call `send` on the request. This triggers the HTTP request to be sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Example 4-1](#code_xhr) shows a simple example of how to work with JSON data
    using an XHR.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-1\. Making a GET request with XMLHttpRequest
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The XMLHttpRequest API is an event-based API. When the response is received,
    a `load` event is triggered. In [Example 4-1](#code_xhr), the `load` event handler
    passes the raw response text to `JSON.parse`. It expects the response body to
    be JSON and uses `JSON.parse` to turn the JSON string into an object.
  prefs: []
  type: TYPE_NORMAL
- en: If an error occurs while loading the data, the `error` event is triggered. This
    handles connection or network errors, but an HTTP status code that’s considered
    an “error,” like 404 or 500, does *not* trigger this event. Instead, it also triggers
    the `load` event.
  prefs: []
  type: TYPE_NORMAL
- en: To protect against such errors, you need to examine the response’s `status`
    property to determine if such an error situation exists. This can be accessed
    by referencing `event.target.status`.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch has been supported for a long time now, so unless you have to support
    really old browsers you most likely won’t need to use XMLHttpRequest. Most—if
    not all—of the time, you’ll be using the Fetch API.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a GET Request with the Fetch API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to send a GET request to a public API using a modern browser.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Fetch API. Fetch is a newer request API that uses `Promise`s. It’s very
    flexible and can send all kinds of data, but [Example 4-2](#fetchPromise) sends
    a basic GET request to an API.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-2\. Sending a GET request with the Fetch API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Fetch API is more concise. It returns a `Promise` that resolves to an object
    representing the HTTP response. The `response` object contains data such as the
    status code, headers, and body.
  prefs: []
  type: TYPE_NORMAL
- en: To get the JSON response body, you need to call the response’s `json` method.
    This method reads the body from the stream and returns a `Promise` that resolves
    to the JSON body parsed as an object. If the response body is not valid JSON,
    the `Promise` is rejected.
  prefs: []
  type: TYPE_NORMAL
- en: The response also has methods to read the body in other formats such as `FormData`
    or a plain text string.
  prefs: []
  type: TYPE_NORMAL
- en: Because Fetch works with `Promise`s, you can also use `await`, as shown in [Example 4-3](#fetchAsync).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-3\. Using Fetch with `async`/`await`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Remember that before using `await` in a function, that function must have the
    `async` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a POST Request with the Fetch API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to send a POST request to an API that expects a JSON request body.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Fetch API, specifying the method (POST), and the JSON body and content
    type (see [Example 4-4](#fetchJson)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-4\. Sending JSON payload via POST with the Fetch API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 4-4](#fetchJson) sends some JSON data in a `POST` request. Calling
    `JSON.stringify` on the user object turns it into a JSON *string*, which is required
    to send it as the body with `fetch`. You also need to set the `Content-Type` header
    so the server knows how to interpret the body.'
  prefs: []
  type: TYPE_NORMAL
- en: Fetch also allows you to send other content types as the body. [Example 4-5](#example4-5)
    shows how you would send a `POST` request with some form data.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-5\. Sending form data in a POST request
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Uploading a File with the Fetch API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to upload file data with a POST request, using the Fetch API.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use an `<input type="file">` element, and send the file content as the request
    body (see [Example 4-6](#example4-6)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-6\. Sending file data with the Fetch API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There aren’t many steps involved to upload a file using modern browser APIs.
    The `<input type="file">` provides the file data through the FormData API and
    is included in the body of the POST request. The browser takes care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a Beacon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to send a quick request without waiting for a response, for example,
    to send analytics data.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Beacon API to send data in a POST request. A regular POST request with
    the Fetch API may not complete in time before the page unloads. Using a beacon
    is more likely to succeed (see [Example 4-7](#example4-7)). The browser doesn’t
    wait for a response, and the request is more likely to succeed when sent as the
    user is leaving your site.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-7\. Sending a beacon
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With an `XMLHttpRequest` or `fetch` call, the browser waits for the response
    and returns it (with an event or `Promise`). In general, you don’t need to wait
    for the response for one-way requests, such as sending analytics data.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a `Promise`, `navigator.sendBeacon` returns a boolean value that
    indicates if the send operation was scheduled. There are no further events or
    notifications.
  prefs: []
  type: TYPE_NORMAL
- en: '`navigator.sendBeacon` always sends a `POST` request. If you want to send multiple
    sets of analytics data, such as a collection of UI interactions, you can collect
    them in an array as the user interacts with your page, then send the array as
    the `POST` body with the beacon.'
  prefs: []
  type: TYPE_NORMAL
- en: Listening for Remote Events with Server-Sent Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to receive notifications from your backend server without repeated
    polling.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the EventSource API to receive server-sent events (SSE).
  prefs: []
  type: TYPE_NORMAL
- en: To start listening for SSE, create a new instance of `EventSource`, passing
    the URL as the first argument (see [Example 4-8](#example4-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-8\. Opening an SSE connection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An `EventSource` must connect to a special HTTP endpoint that leaves the connection
    open with a `Content-Type` header of `text/event-stream`. Whenever an event occurs,
    the server can send a new message across the open connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As pointed out by [MDN](https://oreil.ly/MliFN), It’s highly recommended to
    use HTTP/2 with SSE. Otherwise, browsers impose a strict limit on the number of
    `EventSource` connections per domain. In this case, there can only be up to six
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: This limit is not per tab; it is imposed across all tabs in the browser on a
    given domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `EventSource` receives an event over a persistent connection, it is plain
    text. You can access the event text from the received event object’s `data` property.
    Here’s an example of an event of type `notice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To listen for this event, call `addEventListener('notice')` on the `EventSource`
    object. The event object has a `data` property, whose value is whatever string
    value is prefixed with `data:` in the event.
  prefs: []
  type: TYPE_NORMAL
- en: If an event does not have an event type, you can listen for the generic `message`
    event to receive it.
  prefs: []
  type: TYPE_NORMAL
- en: Exchanging Data in Real Time with WebSockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to send and receive data in real time without having to repeatedly
    poll the server with Fetch requests.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the WebSocket API to open a persistent connection to your backend server
    (see [Example 4-9](#example4-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-9\. Creating a WebSocket connection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To use WebSockets, your server must have a WebSocket-enabled endpoint you can
    connect to. MDN has a nice [deep dive on creating a WebSocket server](https://oreil.ly/fzX67).
  prefs: []
  type: TYPE_NORMAL
- en: Once the socket fires the `open` event, you can begin sending messages, as shown
    in [Example 4-10](#example4-10).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-10\. Sending WebSocket messages
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A WebSocket connection is a bidirectional connection. Received data from the
    server fires a `message` event. You can handle these as needed or even send a
    response (see [Example 4-11](#example4-11)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-11\. Responding to a WebSocket message
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to clean up when you’re done, you can close the connection by calling
    `close` on the WebSocket object.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WebSockets are well suited for apps requiring real-time capabilities such as
    a chat system or event monitoring. WebSocket endpoints have a `ws://` or `wss://`
    scheme. These are analogous to `http://` and `https://`—one is insecure and one
    uses encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'To initiate a WebSocket connection, the browser first sends a `GET` request
    to the WebSocket endpoint. The request payload for the URL `wss://example.com/websocket`
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This initiates a WebSocket handshake. If it’s successful, the server responds
    with a status code of 101 (Switching Protocols):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The WebSocket protocol specifies an algorithm to generate a `Sec-Websocket-Accept`
    header based on the request’s `Sec-WebSocket-Key`. The client verifies this value,
    and at that point the two-way WebSocket connection is active and the socket fires
    the `open` event.
  prefs: []
  type: TYPE_NORMAL
- en: Once the connection is open, you can listen for messages with the `message`
    event and send messages by calling `send` on the socket object. Later, you can
    terminate the WebSocket session by calling `close` on the socket object.
  prefs: []
  type: TYPE_NORMAL
