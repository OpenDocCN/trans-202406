- en: Chapter 15\. Building Higher-Level Application Patterns on Top of Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章。在 Kubernetes 之上构建更高级别的应用模式
- en: It’s no secret that Kubernetes is a complex system. Although it simplifies the
    deployment and operations of distributed applications, it does little to make
    the development of such systems easy. In fact, when adding new concepts and artifacts
    for the developer to interact with, it adds a layer of complexity in the service
    of simplified operations. Consequently, in many environments, it makes sense to
    develop higher-level abstractions to provide more developer-friendly primitives
    on top of Kubernetes. Additionally, in many large companies, it makes sense to
    standardize the way in which applications are configured and deployed so that
    everyone adheres to the same operational best practices. This can also be achieved
    by developing higher-level abstractions so that developers automatically adhere
    to these principles. However, developing these abstractions can hide important
    details from the developer and might introduce a walled garden. This limits or
    complicates the development of certain applications or the integration of existing
    solutions. Throughout the development of the cloud, the tension between the flexibility
    of infrastructure and the power of the platform has been a constant. Designing
    the appropriate higher-level abstractions enables us to walk an ideal path through
    this divide.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个复杂的系统并不是秘密。尽管它简化了分布式应用的部署和操作，但它并没有简化这些系统的开发。事实上，当为开发者添加新的概念和工件时，它增加了一层复杂性，以简化操作为代价。因此，在许多环境中，开发更高级别的抽象以提供更多开发者友好的原语是有意义的。此外，在许多大公司中，标准化应用配置和部署方式也是有意义的，以便每个人都遵循相同的运维最佳实践。通过开发更高级别的抽象，开发者可以自动遵守这些原则。然而，开发这些抽象可能会隐藏开发者需要了解的重要细节，并可能引入封闭的园区。这限制或复杂化了某些应用程序的开发或现有解决方案的集成。在云端的发展过程中，基础设施的灵活性和平台的功能之间的张力一直是不断存在的。设计适当的高级别抽象使我们能够在这个分歧中走出理想的路径。
- en: Approaches to Developing Higher-Level Abstractions
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发更高级别抽象的方法
- en: When considering how to develop a higher-level primitive on top of Kubernetes,
    there are two basic approaches. The first is to wrap Kubernetes as an implementation
    detail. With this approach, developers who consume your platform should be largely
    unaware that they are running on top of Kubernetes; instead, they should think
    of themselves as consumers of the platform you supply, and thus Kubernetes is
    an implementation detail.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当考虑如何在 Kubernetes 之上开发更高级别的原语时，有两种基本方法。第一种是将 Kubernetes 包装为一个实现细节。采用这种方法时，消费您平台的开发者应该大部分时间意识不到他们正在运行在
    Kubernetes 之上；相反，他们应该将自己视为您提供的平台的消费者，因此 Kubernetes 是一个实现细节。
- en: The second option is to use the extensibility capabilities built into Kubernetes
    itself. The Kubernetes Server API is quite flexible, and you can dynamically add
    arbitrary new resources to the Kubernetes API. With this approach, your new higher-level
    resources coexist alongside the built-in Kubernetes objects, and the users use
    the built-in tooling for interacting with all the Kubernetes resources, both built-in
    ones and extensions. This extension model results in an environment in which Kubernetes
    is still front and center for your developers but with additions that reduce complexity
    and make it easier to use.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择是利用 Kubernetes 本身构建的可扩展性能力。Kubernetes 服务器 API 非常灵活，您可以动态地向 Kubernetes API
    添加任意新资源。采用这种方法，您的新的高级别资源与内置的 Kubernetes 对象并存，并且用户可以使用内置工具与所有 Kubernetes 资源（包括内置的和扩展的资源）进行交互。这种扩展模型使得
    Kubernetes 仍然是开发者的核心，但通过添加降低了复杂性并使其更易于使用。
- en: How do you choose the approach that is appropriate? It depends on the goals
    for the abstraction layer that you are building. If you are constructing a fully
    isolated, integrated environment in which you have strong confidence that users
    will not need to “break glass” and escape, and where ease of use is an important
    characteristic, the first option is a great choice. A good example of this would
    be building a machine learning pipeline. The domain is relatively well understood.
    The data scientists who are your users are likely not familiar with Kubernetes.
    Enabling these data scientists to rapidly get their work done and focus on their
    domains rather than distributed systems is the primary goal. As a result, building
    a complete abstraction on top of Kubernetes makes the most sense.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如何选择适当的方法？这取决于您正在构建的抽象层的目标。如果您正在构建一个完全隔离的集成环境，您有强烈信心用户不需要“打破玻璃”逃脱，并且易用性是一个重要特征，第一个选项是一个很好的选择。构建机器学习流水线就是一个很好的例子。该领域相对来说是被理解的。您的用户可能不熟悉
    Kubernetes。让这些数据科学家能够快速完成工作并专注于他们的领域而不是分布式系统是主要目标。因此，在 Kubernetes 顶部构建完整的抽象层是最合理的选择。
- en: On the other hand, when building a higher-level developer abstraction—for example,
    an easy way to deploy Java applications—it is a far better choice to extend Kubernetes
    rather than wrap it, for two reasons. First, the domain of application development
    is extraordinarily broad. It will be difficult for you to anticipate all the requirements
    and use cases for your developers, especially as the applications and business
    iterate and change over time. The other reason is to ensure that you can continue
    to take advantage of the Kubernetes ecosystem of tools. There are countless cloud
    native tools for monitoring, continuous delivery, and more. Extending rather than
    replacing the Kubernetes API ensures that you can continue to use these tools
    and new ones as they are developed. Additionally, when you choose to extend rather
    than obfuscate the Kubernetes API, it is relatively straightforward to find people
    with industry experience in Kubernetes. Experience building applications in a
    bespoke application platform that exists only in your environment is definitionally
    rare.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当构建更高级别的开发者抽象时——例如，一个简化的部署 Java 应用程序的方法——扩展 Kubernetes 而不是包装它是一个更好的选择，有两个原因。首先，应用开发的领域非常广泛。对于您来说，难以预测开发人员的所有需求和用例，特别是随着应用程序和业务随时间的迭代和变化。另一个原因是确保您能继续利用
    Kubernetes 生态系统中的工具。有无数的云原生工具用于监控、持续交付等等。扩展而不是替换 Kubernetes API 确保您可以继续使用这些工具和新开发的工具。此外，当选择扩展而不是混淆
    Kubernetes API 时，相对容易找到具有 Kubernetes 行业经验的人。在只存在于您环境中的定制应用程序平台上构建应用程序的经验在定义上是罕见的。
- en: Extending Kubernetes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Kubernetes
- en: Because every layer that you might build over Kubernetes is unique, it is beyond
    the scope of this book to describe how you might build such a layer to extend
    Kubernetes. But the tools and techniques for extending Kubernetes are generic
    to any construction you might do on top of Kubernetes, so we’ll spend time covering
    them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您可能在 Kubernetes 之上构建的每个层都是独特的，描述如何构建这样一个层级以扩展 Kubernetes 超出了本书的范围。但是，扩展 Kubernetes
    的工具和技术对于您可能在 Kubernetes 之上进行的任何构建都是通用的，因此我们将花时间来覆盖它们。
- en: Extending Kubernetes Clusters
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 Kubernetes 集群
- en: 'A complete how-to for extending a Kubernetes cluster is a large topic and more
    completely covered in other books like [*Managing Kubernetes*](https://oreil.ly/6kUUX)
    and [*Kubernetes: Up and Running*](https://oreil.ly/fdRA3) (O’Reilly). Rather
    than going over the same material here, this section focuses on providing an understanding
    of how to use Kubernetes extensibility.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '完整的如何扩展 Kubernetes 集群的操作指南是一个庞大的主题，更详尽的内容可以在其他书籍中找到，比如 [*管理 Kubernetes*](https://oreil.ly/6kUUX)
    和 [*Kubernetes: Up and Running*](https://oreil.ly/fdRA3)（O’Reilly）。与在此重复相同材料不同，本节专注于提供如何使用
    Kubernetes 的扩展性的理解。'
- en: Extending the Kubernetes cluster involves understanding the touch points for
    resources in Kubernetes. There are three related technical solutions. The first
    is the *sidecar*. Sidecar containers (shown in [Figure 15-1](#fig-sidecar-design))
    have been popularized in the context of service meshes. These containers run alongside
    a main application container to provide additional capabilities that are decoupled
    from the main application and often maintained by a separate team. For example,
    in service meshes, a sidecar might provide transparent mutual Transport Layer
    Security (mTLS) authentication to a containerized application. You can use sidecars
    to add capabilities to your user-defined applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 Kubernetes 集群涉及理解 Kubernetes 资源的接触点。有三种相关的技术解决方案。首先是*sidecar*。Sidecar 容器（显示在[图 15-1](#fig-sidecar-design)中）在服务网格的背景下得到了推广。这些容器与主应用容器并行运行，提供与主应用分离并经常由独立团队维护的额外功能。例如，在服务网格中，sidecar
    可以为容器化应用提供透明的互相认证的传输层安全性（mTLS）。你可以使用 sidecar 来为用户定义的应用程序添加功能。
- en: '![images/figure-16-1.png](assets/kbp2_1501.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![images/figure-16-1.png](assets/kbp2_1501.png)'
- en: Figure 15-1\. The sidecar design
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-1\. sidecar 设计
- en: Within the industry the sidecar approach has become increasingly popular, and
    many projects use it to deliver services alongside the developer’s containers.
    A great example is the [Dapr](https://dapr.io) (Distributed Application Runtime)
    project. Dapr is an open source project within the CNCF that implements a sidecar
    for applications that delivers many capabilities like encryption, key/value store,
    pub/sub queues, and much more with a very simple, consistent API. Sidecars like
    Dapr can be used as modular building blocks for a platform that you are developing
    on top of Kubernetes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在行业内，sidecar 方法变得越来越流行，并且许多项目使用它来在开发者的容器旁提供服务。一个很好的例子是[Dapr](https://dapr.io)（分布式应用运行时）项目。Dapr
    是 CNCF 内的一个开源项目，为应用程序实现了一个 sidecar，提供诸如加密、键/值存储、发布/订阅队列等许多功能，具有非常简单一致的 API。像 Dapr
    这样的 sidecar 可以作为你在 Kubernetes 之上开发的平台的模块化构建块使用。
- en: Of course, the entire goal of this effort was to make a developer’s life easier,
    but if we require that they learn about and know how to use sidecars, we’ve actually
    made the problem worse. Fortunately, additional tools for extending Kubernetes
    simplify things. In particular, Kubernetes features *admission controllers*. Admission
    controllers are interceptors that read Kubernetes API requests prior to them being
    stored (or “admitted”) into the cluster’s backing store. You can use these admission
    controllers to validate or modify API objects. In the context of sidecars, you
    can use them to automatically add sidecars to all pods created in the cluster
    so that developers do not need to know about the sidecars to reap their benefits.
    [Figure 15-2](#figure-admission-control) illustrates how admission controllers
    interact with the Kubernetes API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这项工作的整体目标是使开发者的生活更轻松，但如果我们要求他们学习并知道如何使用 sidecar，实际上会使问题变得更糟。幸运的是，用于扩展 Kubernetes
    的额外工具简化了事务。特别是，Kubernetes 具有*admission controllers*。Admission controllers 是拦截器，它们在将
    Kubernetes API 请求存储（或“接受”）到集群的后备存储之前读取这些请求。你可以使用这些 admission controllers 来验证或修改
    API 对象。在 sidecar 的上下文中，你可以使用它们自动向集群中创建的所有 pod 添加 sidecar，以便开发者无需了解 sidecar 即可获得其好处。[图 15-2](#figure-admission-control)展示了
    admission controllers 如何与 Kubernetes API 交互。
- en: '![images/figure-16-2.png](assets/kbp2_1502.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![images/figure-16-2.png](assets/kbp2_1502.png)'
- en: Figure 15-2\. Admission controllers
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-2\. Admission controllers
- en: The utility of admission controllers isn’t limited to adding sidecars. You can
    also use them to validate objects submitted by developers to Kubernetes. For example,
    you could implement a *linter* (a tool that analyzes code) for Kubernetes that
    ensures developers submit pods and other resources that follow best practices
    for using Kubernetes. A common mistake for developers is to not reserve resources
    for their application. For those circumstances, an admission controller–based
    linter could intercept such requests and reject them. Of course, you should also
    leave an escape hatch (for example, a special annotation) so that advanced users
    can opt out of the lint rule, as appropriate. We discuss the importance of escape
    hatches later on in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 准入控制器的效用不仅限于添加 sidecar。您还可以使用它们验证开发人员提交给 Kubernetes 的对象。例如，您可以实现一个 Kubernetes
    的 *linter*（分析代码的工具），确保开发人员提交符合 Kubernetes 最佳实践的 pod 和其他资源。开发人员常见的一个错误是未为其应用程序保留资源。对于这些情况，基于准入控制器的
    linter 可以拦截此类请求并将其拒绝。当然，您还应该留下一种逃生方式（例如，特殊的注释），以便高级用户可以选择退出适当的 lint 规则。我们将在本章后面讨论逃生通道的重要性。
- en: So far, we’ve only covered ways to augment existing applications and to ensure
    that developers follow best practices—we haven’t really covered how to add higher-level
    abstractions. This is where custom resource definitions (CRDs) come into play.
    CRDs are a way to dynamically add new resources to an existing Kubernetes cluster.
    For example, using CRDs, you could add a new ReplicatedService resource to a Kubernetes
    cluster. When a developer creates an instance of a ReplicatedService, it turns
    around to Kubernetes and creates corresponding Deployment and Service resources.
    Thus, the ReplicatedService is a convenient developer abstraction for a common
    pattern. CRDs are generally implemented by a control loop that is deployed into
    the cluster itself to manage these new resource types.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只讨论了增强现有应用程序的方法以及确保开发人员遵循最佳实践的方式，但我们并没有真正涉及如何添加更高级别的抽象。这就是自定义资源定义（CRDs）发挥作用的地方。CRDs
    是一种动态向现有 Kubernetes 集群添加新资源的方式。例如，使用 CRDs，您可以向 Kubernetes 集群添加一个新的 ReplicatedService
    资源。当开发人员创建 ReplicatedService 的实例时，它会转到 Kubernetes 并创建相应的 Deployment 和 Service
    资源。因此，ReplicatedService 是一个常见模式的方便开发者抽象。通常，CRDs 由部署到集群本身的控制循环来实现对这些新资源类型的管理。
- en: Extending the Kubernetes User Experience
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 Kubernetes 用户体验
- en: Adding new resources to your cluster is a great way to provide new capabilities,
    but to truly take advantage of them, it’s often useful to extend the Kubernetes
    user experience (UX) as well. By default, the Kubernetes tooling is unaware of
    custom resources and other extensions and thus treats them in a very generic and
    not particularly user-friendly manner. Extending the Kubernetes command line can
    provide an enhanced user experience.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 向集群添加新资源是提供新功能的好方法，但要真正利用它们，通常需要扩展 Kubernetes 用户体验（UX）。默认情况下，Kubernetes 工具不了解自定义资源和其他扩展，因此对待它们的方式非常普遍且不够用户友好。扩展
    Kubernetes 命令行可以提供增强的用户体验。
- en: Generally, the tool used for accessing Kubernetes is the `kubectl` command-line
    tool. Fortunately, it too has been built for extensibility. `kubectl` plug-ins
    are binaries that have a name like `kubectl-foo`, where `foo` is the name of the
    plug-in. When you invoke `kubectl foo ...` on the command line, the invocation
    is in turn routed to an invocation of the plug-in binary. Using `kubectl` plug-ins,
    you can define new experiences that deeply understand the new resources that you
    have added to your cluster. You are free to implement whatever kind of experiences
    are suitable while at the same time taking advantage of the familiarity of the
    `kubectl` tooling. This is especially valuable because it means that you don’t
    need to teach developers about a new tool set. Likewise, you can gradually introduce
    Kubernetes-native concepts as the developers advance their Kubernetes knowledge.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用于访问 Kubernetes 的工具是 `kubectl` 命令行工具。幸运的是，它也被构建为可扩展的。`kubectl` 插件是具有像 `kubectl-foo`
    这样的名称的二进制文件，其中 `foo` 是插件的名称。当您在命令行上调用 `kubectl foo ...` 时，该调用将路由到插件二进制文件的调用。使用
    `kubectl` 插件，您可以定义深度理解您已添加到集群的新资源的新体验。您可以自由实现适合的体验，同时利用 `kubectl` 工具的熟悉性。这尤其宝贵，因为这意味着您无需教开发人员使用新的工具集。同样，您可以逐步引入
    Kubernetes 本地概念，随着开发人员增加其 Kubernetes 知识。
- en: If you are looking to build graphical interfaces for your Kubernetes-based platform,
    several tools can help. In particular the open source [Headlamp project](https://oreil.ly/2-4fB)
    is a library that enables easy construction of web-based, mobile, or desktop applications
    for interacting with Kubernetes infrastructure. Using a tool like Headlamp enables
    you to rapidly create a custom developer experience that perfectly fits your platform
    and its needs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望为基于 Kubernetes 的平台构建图形界面，有几种工具可以帮助。特别是开源项目[Headlamp项目](https://oreil.ly/2-4fB)，它是一个库，可轻松构建基于
    Web、移动或桌面的应用程序，用于与 Kubernetes 基础设施交互。使用类似 Headlamp 的工具可以快速创建定制的开发者体验，完全符合您的平台及其需求。
- en: Making Containerized Development Easier
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使容器化开发更加简单
- en: Before they can even deploy an application to Kubernetes, a developer must first
    containerize that application. Though building containers is second nature for
    those familiar with the cloud native ecosystem, for many it is a daunting task
    that prevents even getting started with modern application development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发人员甚至能够将应用程序部署到 Kubernetes 之前，必须首先将该应用程序打包为容器。虽然对于熟悉云原生生态系统的人来说构建容器已经是信手拈来，但对于许多人来说，这是一个艰巨的任务，甚至阻碍了现代应用程序开发的开始。
- en: Fortunately, several open source tools can help jump start your development.
    Tools like [Draft](https://draft.sh) and [Skaffold](https://oreil.ly/H4DzY) will
    automatically generate a Dockerfile for a particular language or development environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有几种开源工具可以帮助加快您的开发。像[Draft](https://draft.sh)和[Skaffold](https://oreil.ly/H4DzY)这样的工具将为特定语言或开发环境自动生成
    Dockerfile。
- en: If developers are familiar with the buildpack idea from cloud foundry or other
    platforms, there are also tools like [Paketo](https://paketo.io) that provide
    easy-to-use and vetted container images for building applications in popular languages
    as well as command-line tools to get started easily.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发人员熟悉来自 Cloud Foundry 或其他平台的构建包概念，还有像[Paketo](https://paketo.io)这样的工具，提供易于使用和经过验证的容器镜像，用于构建流行语言的应用程序以及命令行工具，以便轻松入门。
- en: Developing a “Push-to-Deploy” Experience
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发“推送即部署”体验
- en: One of the most popular features of many PaaS products is “push to deploy,”
    meaning that a single push of code to a Git repository results in the application
    deploying to a cloud environment. Though this has previously been the domain of
    large-scale managed PaaS solutions, it is now very easy to build a similar experience
    using CI/CD solutions like GitHub Actions, Azure DevOps, or other continuous-build
    tooling.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 PaaS 产品最受欢迎的功能之一是“推送即部署”，这意味着将代码推送到 Git 存储库只需一次，即可将应用程序部署到云环境中。尽管这以前是大规模托管
    PaaS 解决方案的领域，但现在可以使用 GitHub Actions、Azure DevOps 或其他持续构建工具轻松构建类似的体验。
- en: With a properly designed pipeline, once a developer pushes code into their Git
    repository, it is automatically tested, built, packaged into a container image,
    and pushed to a container registry.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正确设计的流水线，一旦开发人员将代码推送到其 Git 存储库中，就会自动进行测试、构建、打包成容器镜像并推送到容器注册表中。
- en: Once the new version of the container image is present in the container registry,
    it is a simple step to use another Git commit combined with GitOps to push that
    image out to a running application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器镜像的新版本出现在容器注册表中，只需使用另一个 Git 提交结合 GitOps 就可以将该镜像推送到正在运行的应用程序。
- en: Combining GitHub actions and GitOps can enable your developers to achieve fast
    deployment while also staying true to the cloud native ecosystem and ideas like
    Infrastructure as Code (IaC).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结合 GitHub Actions 和 GitOps 可以使您的开发人员实现快速部署，同时也保持云原生生态系统以及基础设施即代码（IaC）等理念的真实性。
- en: Design Considerations When Building Platforms
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建平台时的设计考虑
- en: Countless platforms have been built to enable developer productivity. Given
    the opportunity to observe all the places where these platforms have succeeded
    and failed, you can develop a common set of patterns and considerations to learn
    from the experience of others. Following these design guidelines can help to ensure
    that the platform you build is successful instead of a “legacy” dead end from
    which you must eventually move away.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无数的平台已被建立，以提高开发人员的生产力。有机会观察这些平台成功与失败的各个方面，您可以开发出一套共同的模式和考虑事项，从他人的经验中汲取教训。遵循这些设计指南可以帮助确保您构建的平台成功，而不是成为一个必须最终放弃的“遗留”死胡同。
- en: Support Exporting to a Container Image
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持导出到容器镜像
- en: When you are building a platform, many designs provide simplicity by enabling
    the user to simply supply code (e.g., a function in Function as a Service [FaaS])
    or a native package (e.g., a JAR file in Java) instead of a complete container
    image. This approach has a great deal of appeal because it lets the user stay
    within the confines of their well-understood tools and development experience.
    The platform handles the containerization of the application for them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The problem with this approach, however, comes when the developer encounters
    the limitations of the programming environment that you have given them. Perhaps
    it’s because they need a specific version of a language runtime to work around
    a bug. Or it might be that they need to package additional resources or executables
    that aren’t part of the way you have structured the automatic containerization
    of the application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: No matter the reason, hitting this wall is an ugly moment for the developer,
    because it is a moment when they suddenly must learn a great deal more about how
    to package their application, when all they really wanted to do was to extend
    it slightly to fix a bug or deliver a new feature.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: However, it doesn’t need to be this way. If you support the exporting of your
    platform’s programming environment into a generic container, the developer using
    your platform doesn’t need to start from scratch and learn everything there is
    to know about containers. Instead, they have a complete working container image
    that represents their current application (i.e., the container image containing
    their function and the node runtime). Given this starting point, they can then
    make the small tweaks necessary to adapt the container image to their needs. This
    sort of gradual degradation and incremental learning dramatically smooths the
    path from higher-level platform down into lower-level infrastructure. It also
    increases the general utility of the platform because using it doesn’t introduce
    steep cliffs for developers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Support Existing Mechanisms for Service and Service Discovery
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another common story of platforms is that they evolve and interconnect with
    other systems. Many developers might be very happy and productive in your platform,
    but any real-world application will span both the platform that you build and
    lower-level Kubernetes applications as well as *other* platforms. Connections
    to legacy databases or open source applications built for Kubernetes will always
    be a part of a sufficiently large application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Because of this need for interconnectivity, it’s critically important that the
    core Kubernetes primitives for services and service discovery are used and exposed
    by any platform that you construct. Don’t reinvent the wheel in the interest of
    improved platform experience, because in doing so you will be creating a walled
    garden incapable of interacting with the broader world.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: If you expose the applications defined in your platform as Kubernetes Services,
    any application anywhere within your cluster will be able to consume your applications
    regardless of whether they are running in your higher-level platform. Likewise,
    if you use the Kubernetes DNS servers for service discovery, you will be able
    to connect from your higher-level application platform to other applications running
    in the cluster, even if they are not defined in your higher-level platform. It
    might be tempting to build something better or easier to use, but interconnectivity
    across different platforms is the common design pattern for any application of
    sufficient age and complexity. You will always regret the decision to build a
    walled garden.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将平台中定义的应用程序公开为 Kubernetes 服务，集群中的任何位置的应用程序都可以使用您的应用程序，无论它们是否在您的更高级平台中运行。同样，如果使用
    Kubernetes DNS 服务器进行服务发现，您将能够从您的高级应用程序平台连接到集群中运行的其他应用程序，即使它们未在您的更高级平台中定义。也许建立更好或更易于使用的东西是很诱人的，但跨不同平台的互联性是任何足够年龄和复杂性的应用程序的常见设计模式。您将始终后悔决定建立一个封闭的园地。
- en: Building Application Platforms Best Practices
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用平台的最佳实践
- en: 'Although Kubernetes provides powerful tools for operating software, it does
    considerably less to enable developers to build applications. It is often necessary
    to build platforms on top of Kubernetes to make developers more productive and/or
    Kubernetes easier. When building such platforms, you’ll benefit from keeping the
    following best practices in mind:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Kubernetes 提供了强大的工具来操作软件，但它在帮助开发人员构建应用程序方面的功能较少。通常需要在 Kubernetes 之上构建平台，以提高开发效率和/或使
    Kubernetes 更易于使用。在构建这些平台时，应牢记以下最佳实践：
- en: Use admission controllers to limit and modify API calls to the cluster. An admission
    controller can validate (and reject invalid) Kubernetes resources. A mutating
    admission controller can automatically modify API resources to add new sidecars
    or other changes that users might not even need to know about.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用准入控制器来限制和修改对集群的 API 调用。准入控制器可以验证（并拒绝无效的）Kubernetes 资源。变异准入控制器可以自动修改 API 资源，以添加新的
    sidecar 或其他用户甚至不需要知道的变更。
- en: Use `kubectl` plug-ins to extend the Kubernetes user experience by adding new
    tools to the existing command-line tool. In rare occasions, a purpose-built tool
    might be more appropriate.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `kubectl` 插件来扩展 Kubernetes 用户体验，通过向现有命令行工具添加新工具。在极少数情况下，可能需要使用专门构建的工具。
- en: When building platforms on top of Kubernetes, think carefully about the platform’s
    users and how their needs will evolve. Making things simple and easy to use is
    clearly a good goal, but if this also leads to users that are trapped and unable
    to be successful without rewriting everything outside of your platform, it will
    ultimately be a frustrating (and unsuccessful) experience.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建基于 Kubernetes 的平台时，仔细考虑平台的用户及其需求的演变。使事情简单易用显然是一个良好的目标，但如果这也导致用户陷入困境，无法成功地在您的平台之外重写所有内容，最终将是令人沮丧（和失败的）经历。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Kubernetes is a fantastic tool for simplifying the deployment and operation
    of software; unfortunately, it is not always the most developer-friendly or productive
    environment. Because of this, a common task is to build a higher-level platform
    on top of Kubernetes to make it more approachable and usable by the average developer.
    This chapter described several approaches for designing such a higher-level system
    and provided a summary of the core extensibility infrastructure available in Kubernetes.
    It concluded with lessons and design principles drawn from our observation of
    other platforms that have been built on top of Kubernetes, with the hope that
    they can guide the design of your platform.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是简化软件部署和操作的绝佳工具；不幸的是，它并非总是最友好或最高效的开发环境。因此，一个常见的任务是在 Kubernetes 之上构建一个更高级的平台，使其更易接近和被普通开发者使用。本章描述了设计这样一个更高级系统的几种方法，并提供了
    Kubernetes 中可用的核心可扩展性基础设施的摘要。它总结了从我们观察到的其他构建在 Kubernetes 之上的平台中得出的教训和设计原则，希望它们能指导您平台的设计。
