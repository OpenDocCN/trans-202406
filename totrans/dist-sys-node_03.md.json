["```\n#!/usr/bin/env node\n\n// npm install node-fetch@2.6\nconst fetch = require('node-fetch');\n\n(async() => {\n  const req = await fetch('http://localhost:3002/data', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'User-Agent': `nodejs/${process.version}`,\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      foo: 'bar'\n    })\n  });\n\n  const payload = await req.json();\n\n  console.log(payload);\n})();\n```", "```\nPOST /data HTTP/1.1 ![1](assets/1.png)\nContent-Type: application/json ![2](assets/2.png)\nUser-Agent: nodejs/v14.8.0\nAccept: application/json\nContent-Length: 13\nAccept-Encoding: gzip,deflate\nConnection: close\nHost: localhost:3002\n\n{\"foo\":\"bar\"} ![3](assets/3.png)\n```", "```\nHTTP/1.1 403 Forbidden ![1](assets/1.png)\nServer: nginx/1.16.0 ![2](assets/2.png)\nDate: Tue, 29 Oct 2019 15:29:31 GMT\nContent-Type: application/json; charset=utf-8\nContent-Length: 33\nConnection: keep-alive\nCache-Control: no-cache\nVary: accept-encoding\n\n{\"error\":\"must_be_authenticated\"} ![3](assets/3.png)\n```", "```\n#!/usr/bin/env node\n\n// Adapted from https://nodejs.org/api/zlib.html\n// Warning: Not as efficient as using a Reverse Proxy\nconst zlib = require('zlib');\nconst http = require('http');\nconst fs = require('fs');\n\nhttp.createServer((request, response) => {\n  const raw = fs.createReadStream(__dirname + '/index.html');\n  const acceptEncoding = request.headers['accept-encoding'] || '';\n  response.setHeader('Content-Type', 'text/plain');\n  console.log(acceptEncoding);\n\n  if (acceptEncoding.includes('gzip')) {\n    console.log('encoding with gzip');\n    response.setHeader('Content-Encoding', 'gzip');\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    console.log('no encoding');\n    raw.pipe(response);\n  }\n}).listen(process.env.PORT || 1337);\n```", "```\n$ echo \"<html><title>Hello World</title></html>\" >> index.html\n$ node server-gzip.js\n```", "```\n# Request uncompressed content\n$ curl http://localhost:1337/\n# Request compressed content and view binary representation\n$ curl -H 'Accept-Encoding: gzip' http://localhost:1337/ | xxd\n# Request compressed content and decompress\n$ curl -H 'Accept-Encoding: gzip' http://localhost:1337/ | gunzip\n```", "```\n$ curl http://localhost:1337/ | wc -c\n$ curl -H 'Accept-Encoding: gzip' http://localhost:1337/ | wc -c\n```", "```\n$ mkdir -p ./{recipe-api,shared}/tls\n$ openssl req -nodes -new -x509 \\\n  -keyout recipe-api/tls/basic-private-key.key \\\n  -out shared/tls/basic-certificate.cert\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 // Warning: Not as efficient as using a Reverse Proxy const fs = require('fs');\nconst server = require('fastify')({\n  https: { ![1](assets/1.png)\n    key: fs.readFileSync(__dirname+'/tls/basic-private-key.key'),\n    cert: fs.readFileSync(__dirname+'/../shared/tls/basic-certificate.cert'),\n  }\n});\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 4000;\n\nserver.get('/recipes/:id', async (req, reply) => {\n  const id = Number(req.params.id);\n  if (id !== 42) {\n    reply.statusCode = 404;\n    return { error: 'not_found' };\n  }\n  return {\n    producer_pid: process.pid,\n    recipe: {\n      id, name: \"Chicken Tikka Masala\",\n      steps: \"Throw it in a pot...\",\n      ingredients: [\n        { id: 1, name: \"Chicken\", quantity: \"1 lb\", },\n        { id: 2, name: \"Sauce\", quantity: \"2 cups\", }\n      ]\n    }\n  };\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Producer running at https://${HOST}:${PORT}`);\n});\n```", "```\n$ node recipe-api/producer-https-basic.js           # terminal 1\n$ curl --insecure https://localhost:4000/recipes/42 # terminal 2\n```", "```\n#!/usr/bin/env node \n// npm install fastify@3.2 node-fetch@2.6 // Warning: Not as efficient as using a Reverse Proxy const server = require('fastify')();\nconst fetch = require('node-fetch');\nconst https = require('https');\nconst fs = require('fs');\nconst HOST = '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\n\nconst options = {\n  agent: new https.Agent({ ![1](assets/1.png)\n    ca: fs.readFileSync(__dirname+'/../shared/tls/basic-certificate.cert'),\n  })\n};\n\nserver.get('/', async () => {\n  const req = await fetch(`https://${TARGET}/recipes/42`,\n    options);\n  const payload = await req.json();\n\n  return {\n    consumer_pid: process.pid,\n    producer_data: payload\n  };\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Consumer running at http://${HOST}:${PORT}/`);\n});\n```", "```\n$ node web-api/consumer-https-basic.js # terminal 1\n$ curl http://localhost:3000/          # terminal 2\n```", "```\n# Happens once for the CA $ openssl genrsa -des3 -out ca-private-key.key 2048 ![1](assets/1.png)\n$ openssl req -x509 -new -nodes -key ca-private-key.key \\\n  -sha256 -days 365 -out shared/tls/ca-certificate.cert ![2](assets/2.png)\n\n# Happens for each new certificate $ openssl genrsa -out recipe-api/tls/producer-private-key.key 2048 ![3](assets/3.png)\n$ openssl req -new -key recipe-api/tls/producer-private-key.key \\\n  -out recipe-api/tls/producer.csr ![4](assets/4.png)\n$ openssl x509 -req -in recipe-api/tls/producer.csr \\\n  -CA shared/tls/ca-certificate.cert \\\n  -CAkey ca-private-key.key -CAcreateserial \\\n  -out shared/tls/producer-certificate.cert -days 365 -sha256 ![5](assets/5.png)\n```", "```\n$ curl http://localhost:3000/\n```", "```\nconst user1 = {\n  username: 'pojo',\n  email: 'pojo@example.org'\n};\nclass User {\n  constructor(username, email) {\n    this.username = username;\n    this.email = email;\n  }\n  toJSON() {\n    return {\n      username: this.username,\n      email: this.email,\n    };\n  }\n}\nconst user2 = new User('class', 'class@example.org');\n// ...\nres.send(user1); // POJO\nres.send(user2); // Class Instance\n```", "```\n{\"username\":\"pojo\",\"email\":\"pojo@example.org\"}\n{\"username\":\"class\",\"email\":\"class@example.org\"}\n```", "```\nuser1.password = user2.password = 'hunter2';\n// ...\nres.send(user1);\nres.send(user2);\n```", "```\n{\"username\":\"pojo\",\"email\":\"pojo@example.org\",\"password\":\"hunter2\"}\n{\"username\":\"class\",\"email\":\"class@example.org\"}\n```", "```\ntype Query { ![1](assets/1.png)\n  recipe(id: ID): Recipe\n  pid: Int\n}\ntype Recipe { ![2](assets/2.png)\n  id: ID!\n  name: String!\n  steps: String\n  ingredients: [Ingredient]! ![3](assets/3.png)\n}\ntype Ingredient {\n  id: ID!\n  name: String!\n  quantity: String\n}\n```", "```\n{\n  pid\n}\n```", "```\n{\n  \"data\": {\n    \"pid\": 9372\n  }\n}\n```", "```\n{\n  recipe(id: 42) {\n    name\n    ingredients {\n      name\n      quantity\n    }\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"recipe\": {\n      \"name\": \"Chicken Tikka Masala\",\n      \"ingredients\": [\n        { \"name\": \"Chicken\", \"quantity\": \"1 lb\" },\n        { \"name\": \"Sauce\", \"quantity\": \"2 cups\" }\n      ]\n    }\n  }\n}\n```", "```\n#!/usr/bin/env node // npm install fastify@3.2 fastify-gql@5.3 const server = require('fastify')();\nconst graphql = require('fastify-gql');\nconst fs = require('fs');\nconst schema = fs.readFileSync(__dirname +\n  '/../shared/graphql-schema.gql').toString(); ![1](assets/1.png)\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 4000;\n\nconst resolvers = { ![2](assets/2.png)\n  Query: { ![3](assets/3.png)\n    pid: () => process.pid,\n    recipe: async (_obj, {id}) => {\n      if (id != 42) throw new Error(`recipe ${id} not found`);\n      return {\n        id, name: \"Chicken Tikka Masala\",\n        steps: \"Throw it in a pot...\",\n      }\n    }\n  },\n  Recipe: { ![4](assets/4.png)\n    ingredients: async (obj) => {\n      return (obj.id != 42) ? [] : [\n        { id: 1, name: \"Chicken\", quantity: \"1 lb\", },\n        { id: 2, name: \"Sauce\", quantity: \"2 cups\", }\n      ]\n    }\n  }\n};\n\nserver\n  .register(graphql, { schema, resolvers, graphiql: true }) ![5](assets/5.png)\n  .listen(PORT, HOST, () => {\n    console.log(`Producer running at http://${HOST}:${PORT}/graphql`);\n  });\n```", "```\n#!/usr/bin/env node // npm install fastify@3.2 node-fetch@2.6 const server = require('fastify')();\nconst fetch = require('node-fetch');\nconst HOST = '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\nconst complex_query = `query kitchenSink ($id:ID) { ![1](assets/1.png) recipe(id: $id) {\n    id name\n    ingredients {\n      name quantity\n    }\n  }\n  pid\n}`;\n\nserver.get('/', async () => {\n  const req = await fetch(`http://${TARGET}/graphql`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ ![2](assets/2.png)\n      query: complex_query,\n      variables: { id: \"42\" }\n    }),\n  });\n  return {\n    consumer_pid: process.pid,\n    producer_data: await req.json()\n  };\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Consumer running at http://${HOST}:${PORT}/`);\n});\n```", "```\n$ node recipe-api/producer-graphql.js # terminal 1\n$ node web-api/consumer-graphql.js    # terminal 2\n$ curl http://localhost:3000          # terminal 3\n```", "```\n{\n  \"consumer_pid\": 20827,\n  \"producer_data\": {\n    \"data\": {\n      \"recipe\": {\n        \"id\": \"42\",\n        \"name\": \"Chicken Tikka Masala\",\n        \"ingredients\": [\n          { \"name\": \"Chicken\", \"quantity\": \"1 lb\" },\n          { \"name\": \"Sauce\", \"quantity\": \"2 cups\" }\n        ]\n      },\n      \"pid\": 20842\n    }\n  }\n}\n```", "```\nsyntax = \"proto3\";\npackage recipe;\nservice RecipeService { ![1](assets/1.png)\n  rpc GetRecipe(RecipeRequest) returns (Recipe) {}\n  rpc GetMetaData(Empty) returns (Meta) {}\n}\nmessage Recipe {\n  int32 id = 1; ![3](assets/3.png)\n  string name = 2;\n  string steps = 3;\n  repeated Ingredient ingredients = 4; ![4](assets/4.png)\n}\nmessage Ingredient {\n  int32 id = 1;\n  string name = 2;\n  string quantity = 3;\n}\nmessage RecipeRequest {\n  int32 id = 1;\n}\nmessage Meta { ![2](assets/2.png)\n  int32 pid = 2;\n}\nmessage Empty {}\n```", "```\n{\"id\":123,\"code\":456}\n01230456\n```", "```\n#!/usr/bin/env node \n// npm install @grpc/grpc-js@1.1 @grpc/proto-loader@0.5 const grpc = require('@grpc/grpc-js');\nconst loader = require('@grpc/proto-loader');\nconst pkg_def = loader.loadSync(__dirname +\n  '/../shared/grpc-recipe.proto'); ![1](assets/1.png)\nconst recipe = grpc.loadPackageDefinition(pkg_def).recipe;\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 4000;\nconst server = new grpc.Server();\nserver.addService(recipe.RecipeService.service, { ![2](assets/2.png)\n  getMetaData: (_call, cb) => { ![3](assets/3.png)\n    cb(null, {\n      pid: process.pid,\n    });\n  },\n  getRecipe: (call, cb) => { ![4](assets/4.png)\n    if (call.request.id !== 42) {\n      return cb(new Error(`unknown recipe ${call.request.id}`));\n    }\n    cb(null, {\n      id: 42, name: \"Chicken Tikka Masala\",\n      steps: \"Throw it in a pot...\",\n      ingredients: [\n        { id: 1, name: \"Chicken\", quantity: \"1 lb\", },\n        { id: 2, name: \"Sauce\", quantity: \"2 cups\", }\n      ]\n    });\n  },\n});\n\nserver.bindAsync(`${HOST}:${PORT}`,\n  grpc.ServerCredentials.createInsecure(), ![5](assets/5.png)\n  (err, port) => {\n    if (err) throw err;\n    server.start();\n    console.log(`Producer running at http://${HOST}:${port}/`);\n  });\n```", "```\nhttp://localhost:4000/recipe.RecipeService/GetMetaData\n```", "```\n#!/usr/bin/env node \n// npm install @grpc/grpc-js@1.1 @grpc/proto-loader@0.5 fastify@3.2 const util = require('util');\nconst grpc = require('@grpc/grpc-js');\nconst server = require('fastify')();\nconst loader = require('@grpc/proto-loader');\nconst pkg_def = loader.loadSync(__dirname +\n  '/../shared/grpc-recipe.proto'); ![1](assets/1.png)\nconst recipe = grpc.loadPackageDefinition(pkg_def).recipe;\nconst HOST = '127.0.0.1';\nconst PORT = process.env.PORT || 3000;\nconst TARGET = process.env.TARGET || 'localhost:4000';\n\nconst client = new recipe.RecipeService( ![2](assets/2.png)\n  TARGET,\n  grpc.credentials.createInsecure() ![3](assets/3.png)\n);\nconst getMetaData = util.promisify(client.getMetaData.bind(client));\nconst getRecipe = util.promisify(client.getRecipe.bind(client));\n\nserver.get('/', async () => {\n  const [meta, recipe] = await Promise.all([\n    getMetaData({}), ![4](assets/4.png)\n    getRecipe({id: 42}), ![5](assets/5.png)\n  ]);\n\n  return {\n    consumer_pid: process.pid,\n    producer_data: meta,\n    recipe\n  };\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`Consumer running at http://${HOST}:${PORT}/`);\n});\n```", "```\n$ node recipe-api/producer-grpc.js # terminal 1\n$ node web-api/consumer-grpc.js    # terminal 2\n$ curl http://localhost:3000/      # terminal 3\n```", "```\n{\n  \"consumer_pid\": 23786,\n  \"producer_data\": { \"pid\": 23766 },\n  \"recipe\": {\n    \"id\": 42, \"name\": \"Chicken Tikka Masala\",\n    \"steps\": \"Throw it in a pot...\",\n    \"ingredients\": [\n      { \"id\": 1, \"name\": \"Chicken\", \"quantity\": \"1 lb\" },\n      { \"id\": 2, \"name\": \"Sauce\", \"quantity\": \"2 cups\" }\n    ]\n  }\n}\n```"]