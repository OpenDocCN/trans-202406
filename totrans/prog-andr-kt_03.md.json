["```\ncontext.startActivity(\n  Intent(context, MembersListActivity::class.java)))\n```", "```\nval intent = Intent(Intent.ACTION_EDIT))\nintent.setDataAndType(textToEditUri, textMimeType);\nstartActivityForResult(intent, reqId);\n```", "```\n<manifest ...>\n  <application\n    android:label=\"@string/awesome_code_editor\">\n    ...>\n    <activity\n      android:name=\".EditorActivity\"\n      android:label=\"@string/editor\">\n      <intent-filter>\n        <action\n          android:name=\"android.intent.action.EDIT\" />\n        <category\n          android:name=\"android.intent.category.TEXT\" />\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>\n```", "```\ncontext.startActivity(\n  Intent(context, MembersListActivity::class.java)))\n```", "```\nclass MainActivity : AppCompatActivity() {\n  companion object {\n    var context: Context? = null;\n  }\n\n  override fun onCreate() {\n    if (context == null) {\n      context = this  // NO!\n    }\n  }\n  // ...\n}\n```", "```\noverride fun onCreate(savedInstanceState: Bundle?) {\n  super.onCreate(savedInstanceState)\n  // ...\n  NetController.refresh(this::update)\n}\n```", "```\nclass SafeApp : Application() {\n  companion object {\n    var context: Context? = null;\n  }\n\n  override fun onCreate() {\n    if (context == null) {\n      context = this\n    }\n  }\n  // ...\n}\n```", "```\n<manifest ...>\n  <application\n    android:name=\".SafeApp\"\n    ...>\n    ...\n  </application>\n</manifest>\n```", "```\n// Add the new tab fragment\nsupportFragmentManager.beginTransaction()\n    .replace(\n        R.id.fragment_container,\n        SomeFragment.newInstance())\n    .addToBackStack(FRAGMENT_TAG)\n    .commit()\n```", "```\nmanager.popBackStack(\n    FRAGMENT_TAG,\n    FragmentManager.POP_BACK_STACK_INCLUSIVE)\n```", "```\nabstract class BoundService<T : Service> : ServiceConnection {\n    abstract class LocalBinder<out T : Service> : Binder() {\n        abstract val service: T?\n    }\n\n    private var service: T? = null\n\n    protected abstract val intent: Intent?\n\n    fun bind(ctxt: Context) {\n        ctxt.bindService(intent, this, Context.BIND_AUTO_CREATE)\n    }\n\n    fun unbind(ctxt: Context) {\n        service = null\n        ctxt.unbindService(this)\n    }\n\n    override fun onServiceConnected(name: ComponentName, binder: IBinder) {\n        service = (binder as? LocalBinder<T>)?.service\n        Log.d(\"BS\", \"bound: ${service}\")\n    }\n\n    override fun onServiceDisconnected(name: ComponentName) {\n        service = null\n    }\n}\n```", "```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <application...>\n    <service android:name=\".PollService\"/>\n  </application>\n</manifest>\n```", "```\n<application...>\n  <provider\n   android:name=\"com.oreilly.kotlin.example.MemberProvider\"\n   android:authorities=\"com.oreilly.kotlin.example.members\"\n   android:readPermission=\"com.oreilly.kotlin.example.members.READ\"/>\n </application>\n```", "```\n<receiver android:name=\".StartupReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n    </intent-filter>\n</receiver>\n```"]