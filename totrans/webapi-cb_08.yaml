- en: Chapter 8\. The Web Animations API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few different ways to animate elements in modern web browsers. [Chapter 1](ch01.html#ch_async)
    had an example of using the `requestAnimationFrame` API to manually animate an
    element (see [“Animating an Element with requestAnimationFrame”](ch01.html#requestAnimationFrame)).
    This gives you a lot of control, but at a cost. It requires keeping track of timestamps
    to calculate frame rates, and you must calculate each incremental change of the
    animation in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Keyframe-Based Animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 introduced keyframe animations. You specify the beginning style, ending
    style, and a duration within CSS rules. The browser automatically interpolates,
    or fills in, the intermediate frames of the animation. Animations are defined
    with the `@keyframes` rule and used via the `animation` property. [Example 8-1](#css_animation)
    defines a fade-in animation.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-1\. Using a CSS keyframe animation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A fade-in animation starts with an opacity of 0 and ends with an opacity of
    1\. When the animation runs, the browser calculates the intermediate style frames
    over the course of 250 milliseconds. The animation starts as soon as the element
    enters the DOM or the `some-element` class is applied.
  prefs: []
  type: TYPE_NORMAL
- en: Keyframe Animation with JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Web Animations API lets you use keyframe animations in your JavaScript code.
    The `Element` interface has an `animate` method where you can define the keyframes
    and other options of the animation. [Example 8-2](#example8-2) shows the same
    animation from [Example 8-1](#css_animation) using the Web Animations API.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-2\. Fading in with the Web Animations API
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The result is the same. The element fades in over the course of 250 milliseconds.
    In this case, the animation is triggered by the `element.animate` call.
  prefs: []
  type: TYPE_NORMAL
- en: Animation Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you call `element.animate`, an `Animation` object is returned. This allows
    you to pause, resume, cancel, or even reverse an animation. It also provides you
    with a `Promise` that you can use to wait until the animation completes.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful what properties you animate. Some properties, like `height` or `padding`,
    affect the layout of the rest of the page; animating them can cause performance
    issues, and the animations are usually not smooth. The best properties to animate
    are `opacity` and `transform`, as these don’t affect the page layout and can even
    be accelerated by the system’s GPU.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a “Ripple” Effect on Click
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a “ripple” animation when clicking a button, starting at the
    position within the button that the user clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the button is clicked, create a temporary child element for the “ripple”.
    This is the element that will be animated.
  prefs: []
  type: TYPE_NORMAL
- en: First, create some styles for the ripple element. The button also needs a couple
    of styles applied (see [Example 8-3](#example8-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-3\. Styles for the button and ripple elements
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the button’s click handler, dynamically create a new ripple element and add
    it to the button, then update its position and perform the animation (see [Example 8-4](#example8-4)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-4\. Performing the ripple animation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ripple element is a circle, sized relative to the size of the button. You
    achieve the ripple effect by animating its opacity and scale transform.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things here to point out about the element styles. First, the
    button itself has its `position` set to `relative`. This is so that when you set
    the ripple’s `absolute` position, it is relative to the button itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The button also has `overflow: hidden`. This prevents the ripple effect from
    being visible outside of the button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also notice that the ripple has `pointer-events: none` set. Because
    the ripple is inside the button, the browser delegates any click events on the
    ripple up to the button. This means clicking the ripple triggers a new ripple,
    but the position is wrong because it’s based on the click position within the
    ripple rather than within the button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to get around this is to set `pointer-events: none`, which
    makes the ripple element ignore click events. If you click on a ripple while it
    is animating, the click event goes to the button, which is what you want in order
    to have the next ripple be positioned properly.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, the ripple code sets the top and left position such that the center of
    the ripple is where you just clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Then the ripple is animated. The animation returned by `ripple.animate` has
    a `finished` property, which is a `Promise` that you can wait for. Once this `Promise`
    resolves, the ripple animation is complete and you can remove the element from
    the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: If you click the button while a ripple is in progress, another ripple starts
    and they’ll animate together—the first animation isn’t interrupted. This is more
    difficult to achieve with regular CSS animations.
  prefs: []
  type: TYPE_NORMAL
- en: Starting and Stopping Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to be able to programmatically start or stop an animation.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the animation’s `pause` and `play` functions (see [Example 8-5](#example8-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-5\. Toggling an animation’s play state
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Animation` object returned from an `element.animate` call has a `playState`
    property, which you can use to determine if the animation is currently running
    or not. If it is running, its value is the string `running`. Other values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`paused`'
  prefs: []
  type: TYPE_NORMAL
- en: The animation was running, but was stopped before it finished.
  prefs: []
  type: TYPE_NORMAL
- en: '`finished`'
  prefs: []
  type: TYPE_NORMAL
- en: The animation ran to completion and stopped.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the `playState` property, the `toggleAnimation` function calls
    either `pause` or `play` to set the desired animation state.
  prefs: []
  type: TYPE_NORMAL
- en: Animating DOM Insertion and Removal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add to, or remove elements from, the DOM with an animation effect.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution differs slightly for each operation.
  prefs: []
  type: TYPE_NORMAL
- en: For *adding* an element, add the element to the DOM first then immediately run
    the animation (such as a fade in). Since only elements in the DOM can be animated,
    you need to add it before running the animation (see [Example 8-6](#example8-6)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-6\. Showing an element with an animation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To *remove* an element, you need to run the animation *first* (such as a fade
    out). Once the animation completes, immediately remove the element from the DOM
    (see [Example 8-7](#example8-7)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-7\. Removing an element with an animation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run the animation at the same time you add the element, it begins animating
    from zero opacity before it has a chance to initially be rendered. This produces
    the effect you want—an element that is hidden and fades into view.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re removing the element, you can use the animation’s `finished` `Promise`
    to wait until the animation is finished. You don’t want to remove the element
    from the DOM until the animation is completely finished, otherwise the effect
    could only run partially and the element would disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Reversing Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to cancel an in-progress animation, such as a hover effect, and smoothly
    revert it back to the initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `Animation` object’s `reverse` method to start playing in the reverse
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: You can keep track of the in-progress animation with a variable. When you change
    the desired animation state, and this variable has a value, it means another animation
    is already in progress and the browser should reverse it.
  prefs: []
  type: TYPE_NORMAL
- en: In the example of a hover effect (see [Example 8-8](#example8-8)), you can start
    the animation when the mouse hovers over the element.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-8\. The hover effect
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When the mouse moves away, the same logic applies (see [Example 8-9](#example8-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-9\. Removing the hover effect
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the keyframes are the same in each case (they only differ in their order),
    you can have a single animation function that sets the animation’s `direction`
    property. When the mouse hovers over the element, you want to run the element
    in the `forward`, or normal, direction. When the mouse leaves, you’ll run the
    same animation, but with the direction set to `reverse` (see [Example 8-10](#example8-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-10\. A single animation function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The result is the same as before. When you hover over the element, it starts
    to increase in size due to the `scale(2)` transform. If you move the mouse away,
    it starts shrinking again by reversing the animation’s direction.
  prefs: []
  type: TYPE_NORMAL
- en: The difference is in the event handlers. They both call a single function, using
    different values for the animation’s `direction` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 8-8](#example8-8) sets the animation’s *fill* mode to `both`. The
    animation’s fill mode determines the style of the element before and after the
    animation. By default, the fill mode is `none`. This means that when the animation
    completes, the element’s style jumps back to what it was before the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: In practice, this means that when you hover over the element, it starts growing
    until it reaches its final size, but then it immediately jumps back to its original
    size, due to no fill mode being set.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three options (other than `none`) for the fill mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '`backward`'
  prefs: []
  type: TYPE_NORMAL
- en: The element’s style is set to the animation’s starting keyframe before the animation
    starts. This is usually only applicable when using an animation delay, as it defines
    what the element’s style is within the delay period.
  prefs: []
  type: TYPE_NORMAL
- en: '`forward`'
  prefs: []
  type: TYPE_NORMAL
- en: After the animation finishes, the ending keyframe styles remain applied.
  prefs: []
  type: TYPE_NORMAL
- en: '`both`'
  prefs: []
  type: TYPE_NORMAL
- en: Applies the rules of both `backward` and `forward`.
  prefs: []
  type: TYPE_NORMAL
- en: The animation in [Example 8-10](#example8-10) has no delay, so the `forward`
    option is used to retain the style after the animation ends.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a Scroll Progress Indicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a bar at the top of the page that moves as you scroll. As you
    scroll down, the bar moves to the right.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a scroll-linked animation by creating a `ScrollTimeline` and passing it
    to the element’s `animate` method. To make the element grow from left to right,
    you can animate the `transition` property from `scaleX(0)` to `scaleX(1)`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/l-hvN)
    for the latest compatibility data.
  prefs: []
  type: TYPE_NORMAL
- en: First, set some styles for the progress bar element, as shown in [Example 8-11](#example8-11).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-11\. Scroll progress bar styles
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `position: sticky` property ensures that the element remains visible as
    you scroll down the page. Also, its initial style is set to `scaleX(0)`, which
    effectively hides it. Without this, the bar would appear at its full width for
    an instant then disappear. This ensures you won’t see the bar at all until you
    scroll.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a `ScrollTimeline` object and pass it as the animation’s `timeline`
    option, as shown in [Example 8-12](#code_scrollTimeline).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-12\. Creating the scroll timeline
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You now have a scroll-linked animation.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An animation’s *timeline* is an object that implements the `AnimationTimeline`
    interface. By default, an animation uses the document’s default timeline, which
    is a `DocumentTimeline` object. This is a timeline that’s linked to elapsed time
    on the clock. When you start an animation with the default timeline, it starts
    at the initial keyframe and runs forward until it reaches the end (or you stop
    it manually). Because this type of timeline is linked to elapsed time, it has
    a defined start value and continuously increases as time passes.
  prefs: []
  type: TYPE_NORMAL
- en: However, a *scroll-linked* animation provides a timeline linked to the scroll
    position. When you scroll all the way to the top, the scroll position is 0 and
    the animation remains at its initial state. As you scroll down, the position increases
    and the animation advances. Once you have scrolled all the way to the bottom,
    the animation reaches its end. If you scroll back up, the animation runs in reverse.
  prefs: []
  type: TYPE_NORMAL
- en: A `ScrollTimeline` is given a source element. In [Example 8-12](#code_scrollTimeline),
    the source is the document element (the `body` tag). You can pass any scrollable
    element as the source, and the `ScrollTimeline` uses that element’s scroll position
    to determine the current progress.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, `DocumentTimeline` is supported in all modern browsers
    but `ScrollTimeline` is not. Be sure to always check browser support before using
    a `ScrollTimeline`.
  prefs: []
  type: TYPE_NORMAL
- en: Making an Element Bounce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to apply a momentary bouncing effect to an element.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apply a series of animations, one after another. Use an animation’s `finished`
    `Promise` to wait for it to finish before running the next one.
  prefs: []
  type: TYPE_NORMAL
- en: The element moves up and down three times. On each pass, the element is moved
    up the page by applying a `translateY` transform, then back down to its original
    position. The first pass bounces the element by 40 pixels, the second by 20 pixels,
    and the third by 10 pixels. This gives the appearance of gravity slowing the bounce
    down each time. This can be done with a `for`-`of` loop (see [Example 8-13](#example8-13)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-13\. Applying the bounce animations in series
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This example demonstrates an advantage of the Web Animations API: dynamic keyframe
    values. Each iteration through the loop uses a different `distance` value inside
    the keyframe effect.'
  prefs: []
  type: TYPE_NORMAL
- en: The `for`-`of` loop walks through the three distances (40px, 20px, and 10px)
    and animates them in turn. In each iteration, it moves the element up by the given
    distance and back down again. The key is the last line, where it references the
    animation’s `finished` property. This ensures that the next loop iteration doesn’t
    start until the current animation finishes. The result is the animations run in
    series, one after the other, providing the bounce effect.
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering why this example uses a `for`-`of` loop rather than a `forEach()`
    call on the array. Using `await` inside array methods such as `forEach` does not
    work as you’d expect. These methods were not designed for asynchronous use. If
    you used a `forEach` call, the `element.animate` calls would all be called immediately
    after one another, resulting in only the last animation being played. Using a
    `for`-`of` loop (a regular `for` loop would work as well) works as expected with
    `async`/`await` and gives the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: Running Multiple Animations Simultaneously
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to apply multiple transforms to an element using multiple animations.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Call `animate` on the element multiple times, with the different transform keyframes.
    You must also specify the `composite` property to combine the transforms, as shown
    in [Example 8-14](#example8-14).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-14\. Combining two transform animations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `alternate` direction means the animation runs forward to completion, then
    runs backward to completion. Because `iterations` is set to `Infinity`, the animation
    runs forever.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The key to this effect is the `composite` property added to the second animation.
    If you don’t specify `composite: add`, you *only* see the `rotate` transform because
    it overrides the `translateX` transform. The element would rotate but not move
    horizontally.'
  prefs: []
  type: TYPE_NORMAL
- en: This, in effect, combines both transforms into a single transform. Also note,
    however, that these transforms are happening at different rates. The rotation
    lasts for three seconds, while the translation lasts for five. The animations
    use different easing functions as well. Despite the different options, the browser
    smoothly combines the animations.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a Loading Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to show a loading indicator to the user while waiting for a network
    request to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create and style the loading indicator, then apply an infinite rotation animation
    to it until the `Promise` returned by `fetch` resolves.
  prefs: []
  type: TYPE_NORMAL
- en: To make a smooth effect, you can first apply a fade-in animation. Once the `Promise`
    resolves, you can fade it out.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a loader element and define some styles, as shown in [Example 8-15](#example8-15).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-15\. The loader element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The loader is a ring with alternating border colors, as shown in [Figure 8-1](#loaderImage).
  prefs: []
  type: TYPE_NORMAL
- en: '![The styled loader](assets/wacb_0801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. The styled loader
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Next, define a function that starts the animation and wait for the `Promise`,
    as shown in [Example 8-16](#example8-16).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-16\. The loader animations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can now pass your `fetch` call as an argument to `showLoader`, as shown
    in [Example 8-17](#example8-17).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-17\. Using the loader
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don’t necessarily need the Web Animations API to create an animated loader—you
    can do that with plain CSS. As this example shows, though, the Web Animations
    API lets you combine multiple animations. The infinite spin animation continues
    to run while the fade-in animation runs. This is a little tricky to do with regular
    CSS animations.
  prefs: []
  type: TYPE_NORMAL
- en: Respecting the User’s Animation Preference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to tone down, or disable, animations if the user has configured their
    operating system to reduce motion.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `window.matchMedia` to check the `prefers-reduced-motion` media query (see
    [Example 8-18](#example8-18)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-18\. Using the prefers-reduced-motion media query
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is extremely important for accessibility. Users with epilepsy or vestibular
    disorders could have seizures, migraines, or other ill effects triggered by a
    large or fast-moving animation.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t necessarily have to disable animation altogether; you could instead
    use a more subtle one. Suppose you are showing an element with a bounce effect
    that looks really good but could be disorienting for some users. If the user has
    reduced motion enabled, you could instead provide a simple fade-in animation.
  prefs: []
  type: TYPE_NORMAL
