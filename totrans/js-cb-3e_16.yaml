- en: Chapter 14\. Data Persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can animate and interact, stream, play, and render, but we always come back
    to the data. Data is the foundation on which we build the majority of our JavaScript
    applications. In the first part of the book we worked with the JavaScript languages
    standards for data types, in [Chapter 13](ch13.html#ch13) we fetched data from
    a remote source, and in [Chapter 20](ch20.html#ch20) we’ll work with data on the
    server, manipulating data using APIs and data sources. Data and JavaScript, friends
    forever.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re going to look at ways we can persist data with JavaScript
    in the browser using cookies, `sessionStorage`, `localStorage`, and IndexedDB.
  prefs: []
  type: TYPE_NORMAL
- en: Persisting Information with Cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to read or set the value of a browser cookie.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use `document.cookie` to set and retrieve cookie values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To encode strings, use `encodeURIComponent`, which will remove any commas,
    semicolons, or whitespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Options can be added to the end of the cookie value and should be separated
    with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a cookie, set an expiration date for the cookie that has already
    occurred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cookies are small bits of data that are stored in the browser. They are often
    set from the server application and sent to the server with nearly every request.
    In a browser they are accessed via the `document.cookie` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cookies accept the following options, each separated with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '`domain`'
  prefs: []
  type: TYPE_NORMAL
- en: The domain where the cookie is accessible. If not set, this defaults to the
    current host location. Specifying a domain allows the cookie to be accessed at
    subdomains.
  prefs: []
  type: TYPE_NORMAL
- en: '`expires`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets a time at which the cookie expires. Accepts a date in GMTString format.
  prefs: []
  type: TYPE_NORMAL
- en: '`max-age`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the length of time that the cookie is valid. Accepts a value in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '`path`'
  prefs: []
  type: TYPE_NORMAL
- en: The path at which the cookie is accessible (such as `/` or `/app`). If not specified,
    the cookie defaults to the current path.
  prefs: []
  type: TYPE_NORMAL
- en: '`secure`'
  prefs: []
  type: TYPE_NORMAL
- en: If set to `true`, the cookie will only be transmitted over `https`.
  prefs: []
  type: TYPE_NORMAL
- en: '`samesite`'
  prefs: []
  type: TYPE_NORMAL
- en: Defaults to `strict`. If set to `strict`, the cookie will not be sent in cross-site
    browsing. Alternatively, `lax` will send cookies on top-level GET requests.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, the user can enter a value which is stored as a cookie.
    They can then retrieve the value of a specified key and delete the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And the associated *cookie.js* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice that I am using regular expressions to match the cookie values, which
    have been encoded using `encodeURIComponent`. This is because `document.cookie`
    returns a string with all of the cookie values. Using regular expressions in this
    way allows me to extract the information that I need. Regular expressions are
    covered in more detail in [Chapter 2](ch02.html#ch02).
  prefs: []
  type: TYPE_NORMAL
- en: Using sessionStorage for Client-Side Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to easily store information for a single session, without running into
    the size and cross-page contamination problems associated with cookies.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the DOM Storage `sessionStorage` functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sessionStorage` allows us to easily store information in the user’s browser
    for a single session. A session lasts for as long as a single browser tab is open.
    Once the user closes the browser or tab, the session ends. Opening a new tab of
    the same page will start a new browser session.'
  prefs: []
  type: TYPE_NORMAL
- en: By comparison, the default behavior of both cookies and `localStorage` (discussed
    in [“Creating a localStorage Client-Side Data Storage Item”](#creating_a_localstorage_client-side_data))
    is to persist across sessions. As an example of the differences between these
    storage methods, [Example 14-1](#comparing_sessionstorage_and_cookies) stores
    information from a form in a cookie, `localStorage`, and `sessionStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-1\. Comparing `sessionStorage` and cookies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The *cookies.js* file contains the code necessary to set, retrieve, and erase
    a given cookie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And the *app.js* file contains the rest of the program functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can get and set the data from `sessionStorage`, accessing it directly, as
    demonstrated in the solution, but a better approach is to use the `getItem()`
    and `setItem()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Load the example page, add one or more values for the same key, and then click
    the “Get data” button. The result is displayed in [Figure 14-1](#getting_session_cookie_data).
    No surprises here. The data has been stored in cookies, `localStorage`, and `sessionStorage`.
    Now, open the same page in a new tab window, enter the value into the `key` form
    field, and click the “Get data” button. The activity results in a page like that
    shown in [Figure 14-2](#values_diff_tab).
  prefs: []
  type: TYPE_NORMAL
- en: '![jsc3 1401](assets/jsc3_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. Displaying stored `sessionStorage` and cookie data in original
    tab
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![jsc3 1402](assets/jsc3_1402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. Displaying stored `sessionStorage` and cookie data in second tab
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the new tab window, the `cookie` and `localStorage` values persist because
    the `cookie` is session specific, but the `sessionStorage`, which is specific
    to the tab window, does not.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots illustrate the difference in cross-tab persistence, one of the
    key differences between `sessionStorage` and cookies, aside from how they’re set
    and accessed in JavaScript. Hopefully, the images and the example also demonstrate
    the potential hazards involved when using `sessionStorage`, especially in circumstances
    where cookies have normally been used.
  prefs: []
  type: TYPE_NORMAL
- en: If your website or application users are familiar with the cookie persistence
    across tabbed windows, `sessionStorage` can be an unpleasant surprise. Along with
    the different behavior, there’s also the fact that browser menu options to delete
    cookies probably won’t have an impact on `sessionStorage`, which could also be
    an unwelcome surprise for your users. On the other hand, `sessionStorage` is incredibly
    clean to use, and provides a welcome storage option when we want to link storage
    to a specific tab window only.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last note on `sessionStorage` related to its implementation: both `sessionStorage`
    and `localStorage`, covered in the next recipe, are part of the W3C DOM Storage
    specification. Both are `window` object properties, which means they can be accessed
    globally. Both are implementations of the `Storage` object, and changes to the
    `prototype` for `Storage` result in changes to both the `sessionStorage` and `localStorage`
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Aside from the differences covered in this recipe and the next, another major
    difference is that the `Storage` objects don’t make a round trip to the server—they’re
    purely client-side storage techniques.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on the `Storage` object, `sessionStorage`, `localStorage`,
    or the Storage DOM, consult the [specification](https://oreil.ly/PgBUt). See [“Creating
    a localStorage Client-Side Data Storage Item”](#creating_a_localstorage_client-side_data)
    for a different look at how `sessionStorage` and `localStorage` can be set and
    retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a localStorage Client-Side Data Storage Item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to persist form element entries (or any data) in such a way that users
    can continue where they left off if the browser crashes, the user accidentally
    closes the browser, or the internet connection is lost.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You could use cookies if the data is small enough, but that strategy doesn’t
    work in an offline situation. Another, better approach, especially when you’re
    persisting larger amounts of data or if you have to support functionality when
    no internet connection is present, is to use `localStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[“Using sessionStorage for Client-Side Storage”](#using_sessionstorage_for_client-side_sto)
    covered `sessionStorage`, one of the DOM Storage techniques. The `localStorage`
    object interface is the same, with the same approaches to setting the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'and for getting the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Again, as with `sessionStorage`, though you can access and set data on `localStorage`
    directly, you should use `getItem()` and `setItem()`, instead.
  prefs: []
  type: TYPE_NORMAL
- en: Both of the storage objects support the `length` property, which provides a
    count of stored item pairs, and the `clear` method (no parameters), which clears
    out all storage. In addition, both are scoped to the HTML5 origin, which means
    that the data storage is shared across all pages in a domain, but not across protocols
    (e.g., `http` is not the same as `https`) or ports.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the two is how long data is stored. The `sessionStorage`
    object only stores data for the session, but the `localStorage` object stores
    data on the client forever, or until specifically removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sessionStorage` and `localStorage` objects also support one event: the
    `storage` event. This is an interesting event, in that it fires on all pages when
    changes are made to a `localStorage` item. It is also an area of low compatibility
    among browsers: you can capture the event on the `body` or `document` elements
    for Firefox, on the `body` for IE, or on the `document` for Safari.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 14-2](#using_localstorage_to_back_up_form_entri) demonstrates a more
    comprehensive implementation than the use case covered in the solution for this
    recipe. In the example, all elements of a small form have their `onchange` event
    handler method assigned to a function that captures the change element name and
    value, and stores the values in the local storage via `localStorage`. When the
    form is submitted, all of the stored form data is cleared.'
  prefs: []
  type: TYPE_NORMAL
- en: When the page is loaded, the form elements `onchange` event handler is assigned
    to the function to store the values, and if the value is already stored, it is
    restored to the form element. To test the application, enter data into a couple
    of the form fields—but, before clicking the Submit button, refresh the page. Without
    `localStorage`, you’d lose the data. Now, when you reload the page, the form is
    restored to the state it was in before the page was reloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-2\. Using `localStorage` to back up form entries in case of page
    reload or browser crash
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The size allotted for `localStorage` varies by browser, but most are in the
    5 mb to 10 mb range. You can use a `try/catch` block to test to ensure you have
    not exceeded the limit in the user’s browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `localStorage` object can be used for offline work. For the form example,
    you can store the data in the `localStorage` and provide a button to click when
    connected to the internet, in order to sync the data from `localStorage` to server-side
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [“Using sessionStorage for Client-Side Storage”](#using_sessionstorage_for_client-side_sto)
    for more on the `Storage` object, and on `sessionStorage` and `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: Persisting Larger Chunks of Data on the Client Using IndexedDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need more sophisticated data storage on the client than what’s provided
    with other persistent storage methods, such as `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In modern browsers, use IndexedDB.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript file in [Example 14-3](#example_using_indexeddb) uses IndexedDB
    to create a database and a data object. Once created, it adds data and then retrieves
    the first object. A more detailed description of what’s happening is in the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-3\. Example of using IndexedDB to create a datastore, add data, and
    then retreive a data object
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IndexedDB is the specification the W3C and others agreed to when exploring solutions
    to large data management on the client. Though it is transaction based, and supports
    the concept of a *cursor*, it isn’t a relational database system. It works with
    JavaScript objects, each of which is indexed by a given *key*, whatever you decide
    the key to be.
  prefs: []
  type: TYPE_NORMAL
- en: IndexedDB can be both asynchronous and synchronous. It can be used for larger
    chunks of data in a traditional server or cloud application, but is also helpful
    for offline web application use.
  prefs: []
  type: TYPE_NORMAL
- en: Most implementations of IndexedDB don’t restrict data storage size, but if you
    store more than 50 MB in Firefox, the user will need to provide permission. Chrome
    creates a pool of temporary storage, and each application can have up to 20% of
    it. Other agents have similar limitations. All of the main browsers support IndexedDB,
    except Opera Mini, though the overall support may not be identical.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the solution demonstrates, the IndexedDB API methods trigger both success
    and error callback functions, which you can capture using traditional event handling,
    or as callback, or assign to a function. Mozilla describes the pattern of use
    with IndexedDB:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an object store in upgrading database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start a transaction and make a request to do some database operation, like adding
    or retrieving data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the operation to complete by listening to the right kind of DOM event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do something with the results (which can be found on the request object).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting from the top in the solution, a data object is created with three values
    to add to the datastore. The database is deleted if it exists, so that the example
    can be run multiple times. Following, a call to `open()` opens the database, if
    it exists, or creates it, if not. Because the database is deleted before the example
    is run, it’s recreated. The name and version are both necessary, because the database
    can be altered only if a new version of the database is opened.
  prefs: []
  type: TYPE_NORMAL
- en: A request object (IDBOpenDBRequest) is returned from the `open()` method, and
    whether the operation succeeds or not is triggered as events on this object. In
    the code, the `onsuccess` event handler for the object is captured to provide
    a message to the console about the success. You can also assign the database handle
    to a global variable in this event handler, but the code assigns this in the next
    event handled, the `upgradeneeded` event.
  prefs: []
  type: TYPE_NORMAL
- en: The `upgradeneeded` event handler is only invoked when a database doesn’t exist
    for a given database name and version. The event object also gives us a way to
    access the IDBDatabase reference, which is assigned to the global variable, `db`.
    The existing transaction can also be accessed via the event object passed as an
    argument to the event handler, and it’s accessed and assigned to a local variable.
  prefs: []
  type: TYPE_NORMAL
- en: The event handler for this event is the only time you’ll be able to create the
    object store and its associated indexes. In the solution, a datastore named `reader`
    is created, with its key set to an autoincrementing `id`. Two other indexes are
    for the datastore’s `name` and `experience` fields. The data is also added to
    the datastore in the event, though it could have been added at a separate time,
    say when a person submits an HTML form.
  prefs: []
  type: TYPE_NORMAL
- en: Following the `upgradeneeded` event handler, the `success` and `error` handlers
    are coded, just to provide feedback. Last but not least, the `document.onclick`
    event handler is used to trigger a database access. In the solution, a random
    data instance is accessed via the database handler, its transaction, the object
    store, and eventually, for a given key. When the query is successful, the `name`
    field is accessed and the value is printed to the console. Rather than accessing
    a single value, we can also use a cursor, but I’ll leave that for your own experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting printouts to the console are, in order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Simplifying IndexedDB with a Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’d like to work with IndexedDB in an asynchronous fashion, using JavaScript
    promises.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [IDB library](https://github.com/jakearchibald/idb), which offers usability
    improvements to the IndexedDB API as well as a wrapper for using promises.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following file imports the IDB library, creates an IndexedDB data store,
    and adds data to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the example, I am loading the `idb` module from [UNPKG](https://unpkg.com),
    which allows me to directly access the module from a URL, rather than locally
    installing it. This works well for demo purposes, but in an application you will
    want to install the module via `npm` and bundle it with your code.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IDB bills itself as “a tiny library that mostly mirrors the IndexedDB API, but
    with small improvements that make a big difference to usability.” Using `idb`
    simplifies some of the syntax of IndexedDB, along with enabling support for asynchronous
    code execution with promises.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `openDB` method opens a database and returns a promise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example, a user can add data to the database and retrieve
    all of the data to be displayed on the page. In an HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And the *idb-discussion.js* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: I won’t go into the full API, but highly recommend consulting the [library’s
    documentation](https://github.com/jakearchibald/idb/blob/master/README.md) and
    using IDB whenever working with IndexedDB.
  prefs: []
  type: TYPE_NORMAL
