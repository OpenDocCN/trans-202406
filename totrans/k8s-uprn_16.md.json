["```\nkind: Service\nmetadata:\n  name: my-database\n  # note 'test' namespace here\n  namespace: test\n...\n```", "```\nkind: Service\nmetadata:\n  name: my-database\n  # note 'prod' namespace here\n  namespace: prod\n...\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n  name: external-database\nspec:\n  type: ExternalName\n  externalName: database.company.com\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n  name: external-ip-database\n```", "```\nkind: Endpoints\napiVersion: v1\nmetadata:\n  name: external-ip-database\nsubsets:\n  - addresses:\n    - ip: 192.168.0.1\n    ports:\n    - port: 3306\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: database\n  labels:\n    volume: my-volume\nspec:\n  accessModes:\n  - ReadWriteMany\n  capacity:\n    storage: 1Gi\n  nfs:\n    server: 192.168.0.1\n    path: \"/exports\"\n```", "```\n$ kubectl apply -f nfs-volume.yaml\n```", "```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: database\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 1Gi\n  selector:\n    matchLabels:\n      volume: my-volume\n```", "```\napiVersion: extensions/v1\nkind: ReplicaSet\nmetadata:\n  name: mysql\n  # Labels so that we can bind a Service to this Pod\n  labels:\n    app: mysql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - name: database\n        image: mysql\n        resources:\n          requests:\n            cpu: 1\n            memory: 2Gi\n        env:\n        # Environment variables are not a best practice for security,\n        # but we're using them here for brevity in the example.\n        # See Chapter 11 for better options.\n        - name: MYSQL_ROOT_PASSWORD\n          value: some-password-here\n        livenessProbe:\n          tcpSocket:\n            port: 3306\n        ports:\n        - containerPort: 3306\n        volumeMounts:\n          - name: database\n            # /var/lib/mysql is where MySQL stores its databases\n            mountPath: \"/var/lib/mysql\"\n      volumes:\n      - name: database\n        persistentVolumeClaim:\n          claimName: database\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\nspec:\n  ports:\n  - port: 3306\n    protocol: TCP\n  selector:\n    app: mysql\n```", "```\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: default\n  annotations:\n    storageclass.beta.kubernetes.io/is-default-class: \"true\"\n  labels:\n    kubernetes.io/cluster-service: \"true\"\nprovisioner: kubernetes.io/azure-disk\n```", "```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: my-claim\n  annotations:\n    volume.beta.kubernetes.io/storage-class: default\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mongo\nspec:\n  serviceName: \"mongo\"\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mongo\n  template:\n    metadata:\n      labels:\n        app: mongo\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:3.4.24\n        command:\n        - mongod\n        - --replSet\n        - rs0\n        ports:\n        - containerPort: 27017\n          name: peer\n```", "```\n$ kubectl apply -f mongo-simple.yaml\n```", "```\nNAME      READY     STATUS            RESTARTS   AGE\nmongo-0   1/1       Running           0          1m\nmongo-1   0/1       ContainerCreating 0          10s\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongo\nspec:\n  ports:\n  - port: 27017\n    name: peer\n  clusterIP: None\n  selector:\n    app: mongo\n```", "```\n$ kubectl run -it --rm --image busybox busybox ping mongo-1.mongo\n```", "```\n$ kubectl exec -it mongo-0 mongo\n> rs.initiate( {\n  _id: \"rs0\",\n  members:[ { _id: 0, host: \"mongo-0.mongo:27017\" } ]\n });\n OK\n```", "```\n> rs.add(\"mongo-1.mongo:27017\");\n> rs.add(\"mongo-2.mongo:27017\");\n```", "```\n...\n      initContainers:\n      - name: init-mongo\n        image: mongo:3.4.24\n        command:\n        - bash\n        - /config/init.sh\n        volumeMounts:\n        - name: config\n          mountPath: /config\n ...\n      volumes:\n      - name: config\n        configMap:\n          name: \"mongo-init\"\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mongo-init\ndata:\n  init.sh: |\n    #!/bin/bash\n\n    # Need to wait for the readiness health check to pass so that the\n    # Mongo names resolve. This is kind of wonky.\n    until ping -c 1 ${HOSTNAME}.mongo; do\n      echo \"waiting for DNS (${HOSTNAME}.mongo)...\"\n      sleep 2\n    done\n\n    until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do\n      echo \"connecting to local mongo...\"\n      sleep 2\n    done\n    echo \"connected to local.\"\n\n    HOST=mongo-0.mongo:27017\n\n    until /usr/bin/mongo --host=${HOST} --eval 'printjson(db.serverStatus())'; do\n      echo \"connecting to remote mongo...\"\n      sleep 2\n    done\n    echo \"connected to remote.\"\n\n    if [[ \"${HOSTNAME}\" != 'mongo-0' ]]; then\n      until /usr/bin/mongo --host=${HOST} --eval=\"printjson(rs.status())\" \\\n            | grep -v \"no replset config has been received\"; do\n        echo \"waiting for replication set initialization\"\n        sleep 2\n      done\n      echo \"adding self to mongo-0\"\n      /usr/bin/mongo --host=${HOST} \\\n         --eval=\"printjson(rs.add('${HOSTNAME}.mongo'))\"\n    fi\n\n    if [[ \"${HOSTNAME}\" == 'mongo-0' ]]; then\n      echo \"initializing replica set\"\n      /usr/bin/mongo --eval=\"printjson(rs.initiate(\\\n          {'_id': 'rs0', 'members': [{'_id': 0, \\\n           'host': 'mongo-0.mongo:27017'}]}))\"\n    fi\n    echo \"initialized\"\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mongo\nspec:\n  serviceName: \"mongo\"\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mongo\n  template:\n    metadata:\n      labels:\n        app: mongo\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:3.4.24\n        command:\n        - mongod\n        - --replSet\n        - rs0\n        ports:\n        - containerPort: 27017\n          name: web\n      # This container initializes the MongoDB server, then sleeps.\n      - name: init-mongo\n        image: mongo:3.4.24\n        command:\n        - bash\n        - /config/init.sh\n        volumeMounts:\n        - name: config\n          mountPath: /config\n      volumes:\n      - name: config\n        configMap:\n          name: \"mongo-init\"\n```", "```\n$ kubectl apply -f mongo-config-map.yaml\n$ kubectl apply -f mongo-service.yaml\n$ kubectl apply -f mongo-simple.yaml\n```", "```\n...\n        volumeMounts:\n        - name: database\n          mountPath: /data/db\n```", "```\n  volumeClaimTemplates:\n  - metadata:\n      name: database\n      annotations:\n        volume.alpha.kubernetes.io/storage-class: anything\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 100Gi\n```", "```\n...\n livenessProbe:\n   exec:\n     command:\n     - /usr/bin/mongo\n     - --eval\n     - db.serverStatus()\n   initialDelaySeconds: 10\n   timeoutSeconds: 10\n ...\n```"]