["```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\nspec:\n  selector: ![1](assets/1.png)\n    app: nginx\n  ports: ![2](assets/2.png)\n    - protocol: TCP ![3](assets/3.png)\n      port: 80 ![4](assets/4.png)\n      targetPort: 8080 ![5](assets/5.png)\n  clusterIP: 172.21.219.227 ![6](assets/6.png)\n  type: ClusterIP\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: kube-dns\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name: KubeDNS\n  name: kube-dns\n  namespace: kube-system\nspec:\n  clusterIP: 10.96.0.10\n  ports:\n  - name: dns\n    port: 53\n    protocol: UDP\n    targetPort: 53\n  - name: dns-tcp\n    port: 53\n    protocol: TCP\n    targetPort: 53\n  - name: metrics\n    port: 9153\n    protocol: TCP\n    targetPort: 9153\n  selector:\n    k8s-app: kube-dns\n  type: ClusterIP\n```", "```\napiVersion: v1\nkind: Endpoints\nmetadata:\n  labels:\n    run: nginx\n  name: nginx\n  namespace: default\nsubsets:\n- addresses:\n  - ip: 10.244.0.10\n    nodeName: kube03\n    targetRef:\n      kind: Pod\n      name: nginx-76df748b9-gblnn\n      namespace: default\n  - ip: 10.244.0.9\n    nodeName: kube04\n    targetRef:\n      kind: Pod\n      name: nginx-76df748b9-gb7wl\n      namespace: default\n  ports:\n  - port: 8080\n    protocol: TCP\n```", "```\n$ iptables --list --table nat\nChain KUBE-SERVICES (2 references) ![1](assets/1.png)\ntarget     prot opt source destination\nKUBE-MARK-MASQ  tcp  -- !10.244.0.0/16        10.97.85.96\n    /* default/nginx: cluster IP */ tcp dpt:80\nKUBE-SVC-4N57TFCL4MD7ZTDA  tcp  --  anywhere             10.97.85.96\n    /* default/nginx: cluster IP */ tcp dpt:80\nKUBE-NODEPORTS  all  --  anywhere             anywhere\n    /* kubernetes service nodeports; NOTE: this must be the last rule in\n    this chain */ ADDRTYPE match dst-type LOCAL\n\nChain KUBE-SVC-4N57TFCL4MD7ZTDA (1 references) ![2](assets/2.png)\ntarget     prot opt source destination\nKUBE-SEP-VUJFIIOGYVVPH7Q4  all  --  anywhere    anywhere    /* default/nginx: */\n    statistic mode random probability 0.33333333349\nKUBE-SEP-Y42457KCQHG7FFWI  all  --  anywhere    anywhere    /* default/nginx: */\n    statistic mode random probability 0.50000000000\nKUBE-SEP-UOUQBAIW4Z676WKH  all  --  anywhere    anywhere    /* default/nginx: */\n\nChain KUBE-SEP-UOUQBAIW4Z676WKH (1 references)  ![3](assets/3.png)\ntarget     prot opt source destination\nKUBE-MARK-MASQ  all  --  10.244.0.8    anywhere             /* default/nginx: */\nDNAT       tcp  --  anywhere           anywhere             /* default/nginx: */\n    tcp to:10.244.0.8:80\n\nChain KUBE-SEP-VUJFIIOGYVVPH7Q4 (1 references)\ntarget     prot opt source destination\nKUBE-MARK-MASQ  all  --  10.244.0.108    anywhere           /* default/nginx: */\nDNAT       tcp  --  anywhere             anywhere           /* default/nginx: */\n    tcp to:10.244.0.108:80\n\nChain KUBE-SEP-Y42457KCQHG7FFWI (1 references)\ntarget     prot opt source destination\nKUBE-MARK-MASQ  all  --  10.244.0.6           anywhere     /* default/nginx: */\nDNAT       tcp  --  anywhere             anywhere          /* default/nginx: */\n    tcp to:10.244.0.6:80\n```", "```\n$ iptables --list --table nat\nChain KUBE-NODEPORTS (1 references) ![1](assets/1.png)\ntarget     prot opt source destination\nKUBE-MARK-MASQ  tcp  --  anywhere             anywhere      /* default/nginx: */\n    tcp dpt:31767\nKUBE-SVC-4N57TFCL4MD7ZTDA  tcp  --  anywhere     anywhere   /* default/nginx: */\n    tcp dpt:31767 ![2](assets/2.png)\n```", "```\n$ ip address show dev kube-ipvs0\n28: kube-ipvs0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default\n    link/ether 96:96:1b:36:32:de brd ff:ff:ff:ff:ff:ff\n    inet 10.110.34.183/32 brd 10.110.34.183 scope global kube-ipvs0\n       valid_lft forever preferred_lft forever\n    inet 10.96.0.10/32 brd 10.96.0.10 scope global kube-ipvs0\n       valid_lft forever preferred_lft forever\n    inet 10.96.0.1/32 brd 10.96.0.1 scope global kube-ipvs0\n       valid_lft forever preferred_lft forever\n```", "```\n$ ipvsadm --list --numeric --tcp-service 10.110.34.183:80\nProt LocalAddress:Port Scheduler Flags\n  -> RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  10.110.34.183:80 rr ![1](assets/1.png)\n  -> 192.168.89.153:80            Masq    1      0          0 ![2](assets/2.png)\n  -> 192.168.89.154:80            Masq    1      0          0\n  -> 192.168.89.155:80            Masq    1      0          0\n```", "```\nipvsadm --list --numeric\nIP Virtual Server version 1.2.1 (size=4096)\nProt LocalAddress:Port Scheduler Flags\n  -> RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  10.0.99.67:30737 rr ![1](assets/1.png)\n  -> 192.168.89.153:80            Masq    1      0          0\n  -> 192.168.89.154:80            Masq    1      0          0\n  -> 192.168.89.155:80            Masq    1      0          0\nTCP  10.110.34.183:80 rr ![2](assets/2.png)\n  -> 192.168.89.153:80            Masq    1      0          0\n  -> 192.168.89.154:80            Masq    1      0          0\n  -> 192.168.89.155:80            Masq    1      0          0\nTCP  127.0.0.1:30737 rr ![3](assets/3.png)\n  -> 192.168.89.153:80            Masq    1      0          0\n  -> 192.168.89.154:80            Masq    1      0          0\n  -> 192.168.89.155:80            Masq    1      0          0\nTCP  192.168.246.64:30737 rr ![4](assets/4.png)\n  -> 192.168.89.153:80            Masq    1      0          0\n  -> 192.168.89.154:80            Masq    1      0          0\n  -> 192.168.89.155:80            Masq    1      0          0\n```", "```\n$ cat /etc/resolv.conf\nsearch default.svc.cluster.local svc.cluster.local cluster.local\nnameserver 10.96.0.10\noptions ndots:5\n```", "```\n$ nslookup nginx\nServer:\t\t10.96.0.10\nAddress:\t10.96.0.10#53\n\nName:\tnginx.default.svc.cluster.local\nAddress: 10.110.34.183\n```", "```\n$ nslookup nginx.default\nServer:\t\t10.96.0.10\nAddress:\t10.96.0.10#53\n\nName:\tnginx.default.svc.cluster.local\nAddress: 10.110.34.183\n```", "```\n$ nslookup -type=A google.com -debug | grep QUESTIONS -A1 ![1](assets/1.png)\n  QUESTIONS:\ngoogle.com.default.svc.cluster.local, type = A, class = IN\n--\n  QUESTIONS:\ngoogle.com.svc.cluster.local, type = A, class = IN\n--\n  QUESTIONS:\ngoogle.com.cluster.local, type = A, class = IN\n--\n  QUESTIONS:\ngoogle.com, type = A, class = IN\n\n$ nslookup -type=A -debug google.com. | grep QUESTIONS -A1 ![2](assets/2.png)\n  QUESTIONS:\ngoogle.com, type = A, class = IN\n```", "```\nNGINX_PORT_80_TCP_PORT=80\nNGINX_SERVICE_HOST=10.110.34.183\nNGINX_PORT=tcp://10.110.34.183:80\nNGINX_PORT_80_TCP=tcp://10.110.34.183:80\nNGINX_PORT_80_TCP_PROTO=tcp\nNGINX_SERVICE_PORT=80\nNGINX_PORT_80_TCP_ADDR=10.110.34.183\n```", "```\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hotels-ingress\nspec:\n  rules:\n  - host: bookhotels.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: hotels\n          servicePort: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: flights-ingress\nspec:\n  rules:\n  - host: bookflights.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: flights\n          servicePort: 80\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: app1\nspec:\n  rules:\n  - host: app1.example.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: app1\n          servicePort: 80\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: app1\nspec:\n  tls:\n  - hosts:\n      - app1.example.com\n    secretName: app1-tls-cert\n  rules:\n  - host: app1.example.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: app1\n          servicePort: 443\n```", "```\napiVersion: projectcontour.io/v1\nkind: HTTPProxy\nmetadata:\n  name: tcp-proxy\nspec:\n  virtualhost:\n    fqdn: tcp.bearcanoe.com\n    tls:\n      secretName: secret\n  tcpproxy:\n    services:\n    - name: tcp-app\n      port: 8080\n```", "```\nspec:\n  containers:\n  - image: nginx\n    name: nginx\n  dnsPolicy: ClusterFirstWithHostNet\n  hostNetwork: true\n```", "```\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: prod-ca-issuer\nspec:\n  ca:\n    secretName: platform-ca-key-pair\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/cluster-issuer: prod-ca-issuer ![1](assets/1.png)\n  name: bearcanoe-com\nspec:\n  tls:\n  - hosts:\n    - bearcanoe.com\n    secretName: bearcanoe-cert-key-pair ![2](assets/2.png)\n  rules:\n  - host: bearcanoe.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: nginx\n          servicePort: 80\n```", "```\napiVersion: split.smi-spec.io/v1alpha3\nkind: TrafficSplit\nmetadata:\n  name: flights-canary\n  namespace: bookings\nspec:\n  service: flights ![1](assets/1.png)\n  backends: ![2](assets/2.png)\n  - service: flights-v1\n    weight: 70\n  - service: flights-v2\n    weight: 30\n```", "```\napiVersion: specs.smi-spec.io/v1alpha3\nkind: HTTPRouteGroup\nmetadata:\n  name: payment-processing\n  namespace: payments\nspec:\n  matches:\n  - name: everything ![1](assets/1.png)\n    pathRegex: \".*\"\n    methods: [\"*\"]\n---\napiVersion: access.smi-spec.io/v1alpha2\nkind: TrafficTarget\nmetadata:\n  name: allow-bookings\n  namespace: payments\nspec:\n  destination: ![2](assets/2.png)\n    kind: ServiceAccount\n    name: payments\n    namespace: payments\n    port: 8080\n  rules: ![3](assets/3.png)\n  - kind: HTTPRouteGroup\n    name: payment-processing\n    matches:\n    - everything\n  sources: ![4](assets/4.png)\n  - kind: ServiceAccount\n    name: flights\n    namespace: bookings\n```", "```\napiVersion: metrics.smi-spec.io/v1alpha1\nkind: TrafficMetrics\nresource:\n  name: flights-19sk18sj11-a9od2\n  namespace: bookings\n  kind: Pod\nedge:\n  direction: to\n  side: client\n  resource:\n    name: payments-ks8xoa999x-xkop0\n    namespace: payments\n    kind: Pod\ntimestamp: 2020-08-09T01:07:23Z\nwindow: 30s\nmetrics:\n- name: p99_response_latency\n  unit: seconds\n  value: 13m\n- name: p90_response_latency\n  unit: seconds\n  value: 7m\n- name: p50_response_latency\n  unit: seconds\n  value: 3m\n- name: success_count\n  value: 100\n- name: failure_count\n  value: 0\n```", "```\n...\ninitContainers:\n- args:\n  - istio-iptables\n  - --envoy-port ![1](assets/1.png)\n  - \"15001\"\n  - --inbound-capture-port ![2](assets/2.png)\n  - \"15006\"\n  - --proxy-uid\n  - \"1337\"\n  - --istio-inbound-interception-mode\n  - REDIRECT\n  - --istio-service-cidr ![3](assets/3.png)\n  - '*'\n  - --istio-inbound-ports ![4](assets/4.png)\n  - '*'\n  - --istio-local-exclude-ports\n  - 15090,15021,15020\n  image: docker.io/istio/proxyv2:1.6.7\n  imagePullPolicy: Always\n  name: istio-init\n...\n```", "```\napiVersion: \"security.istio.io/v1beta1\"\nkind: \"PeerAuthentication\"\nmetadata:\n  name: \"default\"\n  namespace: \"istio-system\"\nspec:\n  mtls:\n    mode: STRICT\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: flights\nspec:\n  host: flights\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: flights\nspec:\n  hosts:\n  - flights\n  http:\n  - route:\n    - destination:\n        host: flights\n        subset: v1\n      weight: 90\n    - destination:\n        host: flights\n        subset: v2\n      weight: 10\n```", "```\nistio_requests_total{\n  connection_security_policy=\"mutual_tls\",\n  destination_service_name=\"payments\",\n  destination_service_namespace=\"payments\",\n  destination_version=\"v1\",\n  request_protocol=\"http\",\n  ...\n  response_code=\"200\",\n  source_app=\"bookings\",\n  source_version=\"v1\",\n  source_workload=\"bookings-v1\",\n  source_workload_namespace=\"flights\"\n} 7183\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n```"]