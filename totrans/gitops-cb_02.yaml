- en: Chapter 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章介绍
- en: With the advent of practices such as infrastructure as code (IaC), software
    development has pushed the boundaries of platforms where you can run applications.
    This becomes more frequent with programmable, API-driven platforms such as public
    clouds and open source infrastructure solutions. While some years ago developers
    were only focusing on application source code, today they also have the opportunity
    to code the infrastructure where their application will run. This gives control
    and enables automation, which significantly reduces lead time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着基础设施即代码（IaC）等实践的出现，软件开发已经推动了可以运行应用程序的平台的边界。随着可编程的、API 驱动的平台如公共云和开源基础设施解决方案的普及，这种情况变得更为频繁。几年前开发人员只关注应用程序源代码，而今天他们也有机会编写应用程序运行的基础设施。这给予了控制权并实现了自动化，大大缩短了交付时间。
- en: A good example is with Kubernetes, a popular open source container workload
    orchestration platform and the de facto standard for running production applications,
    either on public or private clouds. The openness and extensibility of the platform
    enables automation, which reduces risks of delivery and increases service quality.
    Furthermore, this powerful paradigm is extended by another increasingly popular
    approach called GitOps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个流行的开源容器工作负载编排平台，也是在公有或私有云上运行生产应用程序的事实标准。该平台的开放性和可扩展性使得自动化成为可能，从而降低了交付风险并提高了服务质量。此外，这种强大的范式还通过一个越来越受欢迎的方法扩展，称为
    GitOps。
- en: 1.1 What Is GitOps?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 什么是 GitOps？
- en: GitOps is a methodology and practice that uses Git repositories as a single
    source of truth to deliver infrastructure as code. It takes the pillars and approaches
    from DevOps culture and provides a framework to start realizing the results. The
    relationship between DevOps and GitOps is close, as GitOps has become the popular
    choice to implement and enhance DevOps, platform engineering, and SRE.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一种利用 Git 仓库作为单一真相源来交付基础设施即代码的方法和实践。它借鉴了 DevOps 文化的支柱和方法，并提供了一个开始实现结果的框架。GitOps
    与 DevOps 的关系密切，因为 GitOps 已成为实施和增强 DevOps、平台工程和 SRE 的流行选择。
- en: 'GitOps is an agnostic approach, and a GitOps framework can be built with tools
    such as Git, Kubernetes, and CI/CD solutions. The three main pillars of GitOps
    are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一种不可知的方法，可以使用诸如 Git、Kubernetes 和 CI/CD 解决方案等工具构建 GitOps 框架。GitOps 的三大支柱是：
- en: Git is the single source of truth
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 是唯一的真相之源
- en: Treat everything as code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一切视为代码
- en: Operations are performed through Git workflows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作通过 Git 工作流进行
- en: 'There is an active community around GitOps, and the [GitOps Working Group](https://oreil.ly/FUbBy)
    defines a set of GitOps Principles (currently in version 1.0.0) available at [OpenGitOps](https://opengitops.dev):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 有一个活跃的社区，[GitOps 工作组](https://oreil.ly/FUbBy) 在 [OpenGitOps](https://opengitops.dev)
    提供了一套 GitOps 原则（当前版本为 1.0.0）：
- en: Declarative
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式
- en: A system managed by GitOps must have its desired state expressed declaratively.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由 GitOps 管理的系统必须通过声明方式表达其期望状态。
- en: Versioned and immutable
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 版本化和不可变
- en: The desired state is stored in a way that enforces immutability and versioning
    and retains a complete version history.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 期望状态存储在一种强制不可变和版本化的方式中，并保留完整的版本历史记录。
- en: Pulled automatically
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自动拉取
- en: Software agents automatically pull the desired state declarations from the source.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 软件代理自动从源中拉取期望状态声明。
- en: Continuously reconciled
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 持续协调
- en: Software agents continuously observe the actual system state and attempt to
    apply the desired state.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 软件代理持续监控实际系统状态，并尝试应用期望状态。
- en: 1.2 Why GitOps?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 为什么选择 GitOps？
- en: Using the common Git-based workflows that developers are familiar with, GitOps
    expands upon existing processes from application development to deployment, app
    lifecycle management, and infrastructure configuration.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开发人员熟悉的常见基于 Git 的工作流程，GitOps 扩展了从应用程序开发到部署、应用生命周期管理和基础设施配置的现有流程。
- en: Every change throughout the application lifecycle is traced in the Git repository
    and is auditable. This approach is beneficial for both developers and operations
    teams as it enhances the ability to trace and reproduce issues quickly, improving
    overall security. One key point is to reduce the risk of unwanted changes (drift)
    and correct them before they go into production.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序整个生命周期中的每一次变更都在 Git 仓库中进行跟踪，并且可审计。这种方法对开发人员和运维团队都有益，因为它增强了快速跟踪和重现问题的能力，从而提高了整体安全性。其中一个关键点是减少不需要的变更（漂移），并在它们进入生产环境之前进行更正。
- en: 'Here is a summary of the benefits of the GitOps adoption in four key aspects:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 GitOps 在四个关键方面采用的好处摘要：
- en: Standard workflow
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 标准工作流程
- en: Use familiar tools and Git workflows from application development teams
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用应用开发团队熟悉的工具和 Git 工作流程
- en: Enhanced security
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 增强安全性
- en: Review changes beforehand, detect configuration drifts, and take action
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署前审查变更，检测配置漂移，并采取行动
- en: Visibility and audit
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可见性与审计
- en: Capture and trace any change to clusters through Git history
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Git 历史捕获和跟踪对集群的任何更改
- en: Multicluster consistency
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 多集群一致性
- en: Reliably and consistently configure multiple environments and multiple Kubernetes
    clusters and deployment
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠且一致地配置多个环境和多个 Kubernetes 集群及其部署
- en: 1.3 Kubernetes CI/CD
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 Kubernetes CI/CD
- en: Continuous integration (CI) and continuous delivery (CD) are methods used to
    frequently deliver apps by introducing automation into the stages of app development.
    CI/CD pipelines are one of the most common use cases for GitOps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）和持续交付（CD）是通过将自动化引入应用开发阶段来频繁交付应用的方法。CI/CD 流水线是 GitOps 最常见的用例之一。
- en: In a typical CI/CD pipeline, submitted code checks the CI process while the
    CD process checks and applies requirements for things like security, infrastructure
    as code, or any other boundaries set for the application framework. All code changes
    are tracked, making updates easy while also providing version control should a
    rollback be needed. CD is the GitOps domain and it works together with the CI
    part to deploy apps in multiple environments, as you can see in [Figure 1-1](#fig1-1).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的 CI/CD 流水线中，提交的代码检查 CI 过程，而 CD 过程则检查并应用诸如安全性、基础设施即代码或应用框架设定的其他要求。所有代码更改都被跟踪，使得更新变得简单，同时在需要回滚时提供版本控制。CD
    是 GitOps 的领域，它与 CI 部分一起工作，以在多个环境中部署应用，如 [图 1-1](#fig1-1) 所示。
- en: '![Continuous Integration and Continuous Delivery](assets/gocb_0101.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成和持续交付](assets/gocb_0101.png)'
- en: Figure 1-1\. Continuous integration and continuous delivery
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 持续集成与持续交付
- en: With Kubernetes, it’s easy to implement an in-cluster CI/CD pipeline. You can
    have CI software create the container image representing your application and
    store it in a container image registry. Afterward, a Git workflow such as a pull
    request can change the Kubernetes manifests illustrating the deployment of your
    apps and start a CD sync loop, as shown in [Figure 1-2](#fig1-2).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes，可以轻松实现集群内的 CI/CD 流水线。您可以使用 CI 软件创建代表您的应用程序的容器映像，并将其存储在容器映像注册表中。然后，像拉取请求这样的
    Git 工作流程可以更改 Kubernetes 清单，说明应用程序的部署，并启动 CD 同步循环，如 [图 1-2](#fig1-2) 所示。
- en: '![Application deployment model](assets/gocb_0102.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![应用部署模型](assets/gocb_0102.png)'
- en: Figure 1-2\. Application deployment model
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 应用部署模型
- en: This cookbook will show practical recipes for implementing this model on Kubernetes
    acting as a CI/CD and GitOps platform.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将展示在 Kubernetes 上作为 CI/CD 和 GitOps 平台实施此模型的实用配方。
- en: 1.4 App Deployment with GitOps on Kubernetes
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.4 在 Kubernetes 上使用 GitOps 进行应用部署
- en: As GitOps is an agnostic, platform-independent approach, the application deployment
    model on Kubernetes can be either in-cluster or multicluster. An external GitOps
    tool can use Kubernetes just as a target platform for deploying apps. At the same
    time, in-cluster approaches run a GitOps engine inside Kubernetes to deploy apps
    and sync manifests in one or more Kubernetes clusters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitOps 是一种平台无关的方法，Kubernetes 上的应用部署模型可以是集群内或多集群的。外部的 GitOps 工具可以将 Kubernetes
    视为部署应用的目标平台。同时，集群内方法在 Kubernetes 内部运行 GitOps 引擎，用于部署应用并同步一个或多个 Kubernetes 集群中的清单文件。
- en: 'The GitOps engine takes care of the CD part of the CI/CD pipeline and accomplishes
    a GitOps loop, which is composed of four main actions as shown in [Figure 1-3](#fig1-3):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 引擎负责 CI/CD 流水线的 CD 部分，并完成 GitOps 循环，该循环由四个主要操作组成，如 [图 1-3](#fig1-3) 所示：
- en: Deploy
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 部署
- en: Deploy the manifests from Git.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Git 部署清单。
- en: Monitor
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 监视
- en: Monitor either the Git repo or the cluster state.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 监视 Git 仓库或集群状态。
- en: Detect drift
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 检测漂移
- en: Detect any change from what is described in Git and what is present in the cluster.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Git 描述的内容和集群中实际存在的内容中检测任何变更。
- en: Take action
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 采取行动
- en: Perform an action that reflects what is on Git (rollback or three-way diff).
    Git is the source of truth, and any change is performed via a Git workflow.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行反映 Git 上内容的操作（回滚或三向差分）。Git 是事实真相，任何更改都通过 Git 工作流程执行。
- en: '![GitOps Loop](assets/gocb_0103.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![GitOps 循环](assets/gocb_0103.png)'
- en: Figure 1-3\. GitOps loop
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. GitOps 循环
- en: 'In Kubernetes, application deployment using the GitOps approach makes use of
    at least two Git repositories: one for the app source code, and one for the Kubernetes
    manifests describing the app’s deployment (Deployment, Service, etc.).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，使用 GitOps 方法部署应用程序至少使用两个 Git 存储库：一个用于应用程序源代码，另一个用于描述应用程序部署的 Kubernetes
    清单（如 Deployment、Service 等）。
- en: '[Figure 1-4](#fig1-4) illustrates the structure of a GitOps project on Kubernetes.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 1-4](#fig1-4) 展示了 Kubernetes 上 GitOps 项目的结构。'
- en: '![Kubernetes GitOps Loop](assets/gocb_0104.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes GitOps 循环](assets/gocb_0104.png)'
- en: Figure 1-4\. Kubernetes GitOps loop
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-4\. Kubernetes GitOps 循环
- en: 'The following list outlines the items in the workflow:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表概述了工作流程中的项目：
- en: App source code repository
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序源代码存储库
- en: CI pipeline creating a container image
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI 管道创建容器镜像
- en: Container image registry
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器镜像注册表
- en: Kubernetes manifests repository
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 清单存储库
- en: GitOps engine syncing manifests to one or more clusters and detecting drifts
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitOps 引擎将清单同步到一个或多个集群并检测漂移
- en: 1.5 DevOps and Agility
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.5 DevOps 与敏捷性
- en: GitOps is a developer-centric approach to continuous delivery and infrastructure
    operations, and a developer workflow through Git for automating processes. As
    DevOps is complementary to Agile software development, GitOps is complementary
    to DevOps for infrastructure automation and application lifecycle management.
    As you can see in [Figure 1-5](#fig1-5), it’s a developer workflow for automating
    operations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一种以开发者为中心的持续交付和基础设施运营方法，通过 Git 进行开发工作流的自动化。与敏捷软件开发互补，GitOps 对基础设施自动化和应用程序生命周期管理对
    DevOps 也是互补的。如你在 [Figure 1-5](#fig1-5) 中所见，这是一个用于自动化运营的开发者工作流程。
- en: One of the most critical aspects of the Agile methodology is to reduce the [lead
    time](https://oreil.ly/r52pg), which is described more abstractly as the time
    elapsed between identifying a requirement and its fulfillment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法论中最关键的一个方面是减少[上线时间](https://oreil.ly/r52pg)，这更抽象地描述为从识别需求到其实现所经过的时间。
- en: '![GitOps Development Cycle](assets/gocb_0105.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![GitOps 开发循环](assets/gocb_0105.png)'
- en: Figure 1-5\. GitOps development cycle
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-5\. GitOps 开发循环
- en: Reducing this time is fundamental and requires a cultural change in IT organizations.
    Seeing applications live provides developers with a feedback loop to redesign
    and improve their code and make their projects thrive. Similarly to DevOps, GitOps
    also requires a cultural adoption in business processes. Every operation, such
    as application deployment or infrastructure change, is only possible through Git
    workflows. And sometimes, this means a cultural shift.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 缩短这段时间是基础性的，并需要 IT 组织文化上的变革。看到应用程序实时运行为开发者提供了一个反馈循环，重新设计和改进他们的代码，使项目蓬勃发展。类似于
    DevOps，GitOps 在业务流程中也需要文化的采纳。所有操作，如应用程序部署或基础设施更改，只能通过 Git 工作流程来完成。有时，这意味着一种文化的转变。
- en: The [“Teaching Elephants to Dance (and Fly!)”](https://oreil.ly/gPja9) speech
    from Burr Sutter gives a clear idea of the context. The elephant is where your
    organization is today. There are phases of change between traditional and modern
    environments powered by GitOps tools. Some organizations have the luxury of starting
    from scratch, but for many businesses, the challenge is teaching their lumbering
    elephant to dance like a graceful ballerina.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Teaching Elephants to Dance (and Fly!)”](https://oreil.ly/gPja9) 演讲由 Burr
    Sutter 提供了关于背景的清晰理解。大象代表了你的组织当前所处的位置。在传统和现代环境之间的变化阶段，由 GitOps 工具驱动。一些组织有幸可以从头开始，但对于许多企业来说，挑战在于教会他们沉重的大象像优雅的芭蕾舞者一样跳舞。'
