- en: Chapter 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advent of practices such as infrastructure as code (IaC), software
    development has pushed the boundaries of platforms where you can run applications.
    This becomes more frequent with programmable, API-driven platforms such as public
    clouds and open source infrastructure solutions. While some years ago developers
    were only focusing on application source code, today they also have the opportunity
    to code the infrastructure where their application will run. This gives control
    and enables automation, which significantly reduces lead time.
  prefs: []
  type: TYPE_NORMAL
- en: A good example is with Kubernetes, a popular open source container workload
    orchestration platform and the de facto standard for running production applications,
    either on public or private clouds. The openness and extensibility of the platform
    enables automation, which reduces risks of delivery and increases service quality.
    Furthermore, this powerful paradigm is extended by another increasingly popular
    approach called GitOps.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 What Is GitOps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitOps is a methodology and practice that uses Git repositories as a single
    source of truth to deliver infrastructure as code. It takes the pillars and approaches
    from DevOps culture and provides a framework to start realizing the results. The
    relationship between DevOps and GitOps is close, as GitOps has become the popular
    choice to implement and enhance DevOps, platform engineering, and SRE.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitOps is an agnostic approach, and a GitOps framework can be built with tools
    such as Git, Kubernetes, and CI/CD solutions. The three main pillars of GitOps
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Git is the single source of truth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat everything as code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations are performed through Git workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is an active community around GitOps, and the [GitOps Working Group](https://oreil.ly/FUbBy)
    defines a set of GitOps Principles (currently in version 1.0.0) available at [OpenGitOps](https://opengitops.dev):'
  prefs: []
  type: TYPE_NORMAL
- en: Declarative
  prefs: []
  type: TYPE_NORMAL
- en: A system managed by GitOps must have its desired state expressed declaratively.
  prefs: []
  type: TYPE_NORMAL
- en: Versioned and immutable
  prefs: []
  type: TYPE_NORMAL
- en: The desired state is stored in a way that enforces immutability and versioning
    and retains a complete version history.
  prefs: []
  type: TYPE_NORMAL
- en: Pulled automatically
  prefs: []
  type: TYPE_NORMAL
- en: Software agents automatically pull the desired state declarations from the source.
  prefs: []
  type: TYPE_NORMAL
- en: Continuously reconciled
  prefs: []
  type: TYPE_NORMAL
- en: Software agents continuously observe the actual system state and attempt to
    apply the desired state.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Why GitOps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the common Git-based workflows that developers are familiar with, GitOps
    expands upon existing processes from application development to deployment, app
    lifecycle management, and infrastructure configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Every change throughout the application lifecycle is traced in the Git repository
    and is auditable. This approach is beneficial for both developers and operations
    teams as it enhances the ability to trace and reproduce issues quickly, improving
    overall security. One key point is to reduce the risk of unwanted changes (drift)
    and correct them before they go into production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a summary of the benefits of the GitOps adoption in four key aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard workflow
  prefs: []
  type: TYPE_NORMAL
- en: Use familiar tools and Git workflows from application development teams
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced security
  prefs: []
  type: TYPE_NORMAL
- en: Review changes beforehand, detect configuration drifts, and take action
  prefs: []
  type: TYPE_NORMAL
- en: Visibility and audit
  prefs: []
  type: TYPE_NORMAL
- en: Capture and trace any change to clusters through Git history
  prefs: []
  type: TYPE_NORMAL
- en: Multicluster consistency
  prefs: []
  type: TYPE_NORMAL
- en: Reliably and consistently configure multiple environments and multiple Kubernetes
    clusters and deployment
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Kubernetes CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration (CI) and continuous delivery (CD) are methods used to
    frequently deliver apps by introducing automation into the stages of app development.
    CI/CD pipelines are one of the most common use cases for GitOps.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical CI/CD pipeline, submitted code checks the CI process while the
    CD process checks and applies requirements for things like security, infrastructure
    as code, or any other boundaries set for the application framework. All code changes
    are tracked, making updates easy while also providing version control should a
    rollback be needed. CD is the GitOps domain and it works together with the CI
    part to deploy apps in multiple environments, as you can see in [Figure 1-1](#fig1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Continuous Integration and Continuous Delivery](assets/gocb_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. Continuous integration and continuous delivery
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With Kubernetes, it’s easy to implement an in-cluster CI/CD pipeline. You can
    have CI software create the container image representing your application and
    store it in a container image registry. Afterward, a Git workflow such as a pull
    request can change the Kubernetes manifests illustrating the deployment of your
    apps and start a CD sync loop, as shown in [Figure 1-2](#fig1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![Application deployment model](assets/gocb_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. Application deployment model
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This cookbook will show practical recipes for implementing this model on Kubernetes
    acting as a CI/CD and GitOps platform.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 App Deployment with GitOps on Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As GitOps is an agnostic, platform-independent approach, the application deployment
    model on Kubernetes can be either in-cluster or multicluster. An external GitOps
    tool can use Kubernetes just as a target platform for deploying apps. At the same
    time, in-cluster approaches run a GitOps engine inside Kubernetes to deploy apps
    and sync manifests in one or more Kubernetes clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitOps engine takes care of the CD part of the CI/CD pipeline and accomplishes
    a GitOps loop, which is composed of four main actions as shown in [Figure 1-3](#fig1-3):'
  prefs: []
  type: TYPE_NORMAL
- en: Deploy
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the manifests from Git.
  prefs: []
  type: TYPE_NORMAL
- en: Monitor
  prefs: []
  type: TYPE_NORMAL
- en: Monitor either the Git repo or the cluster state.
  prefs: []
  type: TYPE_NORMAL
- en: Detect drift
  prefs: []
  type: TYPE_NORMAL
- en: Detect any change from what is described in Git and what is present in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Take action
  prefs: []
  type: TYPE_NORMAL
- en: Perform an action that reflects what is on Git (rollback or three-way diff).
    Git is the source of truth, and any change is performed via a Git workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![GitOps Loop](assets/gocb_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. GitOps loop
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In Kubernetes, application deployment using the GitOps approach makes use of
    at least two Git repositories: one for the app source code, and one for the Kubernetes
    manifests describing the app’s deployment (Deployment, Service, etc.).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-4](#fig1-4) illustrates the structure of a GitOps project on Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Kubernetes GitOps Loop](assets/gocb_0104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. Kubernetes GitOps loop
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The following list outlines the items in the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: App source code repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CI pipeline creating a container image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Container image registry
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes manifests repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GitOps engine syncing manifests to one or more clusters and detecting drifts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1.5 DevOps and Agility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitOps is a developer-centric approach to continuous delivery and infrastructure
    operations, and a developer workflow through Git for automating processes. As
    DevOps is complementary to Agile software development, GitOps is complementary
    to DevOps for infrastructure automation and application lifecycle management.
    As you can see in [Figure 1-5](#fig1-5), it’s a developer workflow for automating
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most critical aspects of the Agile methodology is to reduce the [lead
    time](https://oreil.ly/r52pg), which is described more abstractly as the time
    elapsed between identifying a requirement and its fulfillment.
  prefs: []
  type: TYPE_NORMAL
- en: '![GitOps Development Cycle](assets/gocb_0105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-5\. GitOps development cycle
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Reducing this time is fundamental and requires a cultural change in IT organizations.
    Seeing applications live provides developers with a feedback loop to redesign
    and improve their code and make their projects thrive. Similarly to DevOps, GitOps
    also requires a cultural adoption in business processes. Every operation, such
    as application deployment or infrastructure change, is only possible through Git
    workflows. And sometimes, this means a cultural shift.
  prefs: []
  type: TYPE_NORMAL
- en: The [“Teaching Elephants to Dance (and Fly!)”](https://oreil.ly/gPja9) speech
    from Burr Sutter gives a clear idea of the context. The elephant is where your
    organization is today. There are phases of change between traditional and modern
    environments powered by GitOps tools. Some organizations have the luxury of starting
    from scratch, but for many businesses, the challenge is teaching their lumbering
    elephant to dance like a graceful ballerina.
  prefs: []
  type: TYPE_NORMAL
