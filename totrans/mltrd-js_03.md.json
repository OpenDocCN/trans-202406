["```\n<html>\n  <head>\n    <title>Web Workers Hello World</title>\n    <script src=\"main.js\"></script>\n  </head>\n</html>\n```", "```\nconsole.log('hello from main.js');\n\nconst worker = new Worker('worker.js'); ![1](Images/1.png)\n\nworker.onmessage = (msg) => { ![2](Images/2.png)\n  console.log('message received from worker', msg.data);\n};\n\nworker.postMessage('message sent to worker'); ![3](Images/3.png)\n\nconsole.log('hello from end of main.js');\n```", "```\nconsole.log('hello from worker.js');\n\nself.onmessage = (msg) => {\n  console.log('message from main', msg.data);\n\n  postMessage('message sent from worker');\n};\n```", "```\n$ npx serve .\n```", "```\nhttp://localhost:5000\n```", "```\nconst worker = new Worker(filename, options);\n```", "```\n<html>\n  <head>\n    <title>Shared Workers Red</title>\n    <script src=\"red.js\"></script>\n  </head>\n</html>\n```", "```\n<html>\n  <head>\n    <title>Shared Workers Blue</title>\n    <script src=\"blue.js\"></script>\n  </head>\n</html>\n```", "```\nconsole.log('red.js');\n\nconst worker = new SharedWorker('shared-worker.js'); ![1](Images/1.png)\n\nworker.port.onmessage = (event) => { ![2](Images/2.png)\n  console.log('EVENT', event.data);\n};\n```", "```\nconst ID = Math.floor(Math.random() * 999999); ![1](Images/1.png)\nconsole.log('shared-worker.js', ID);\n\nconst ports = new Set(); ![2](Images/2.png)\n\nself.onconnect = (event) => { ![3](Images/3.png)\n  const port = event.ports[0];\n  ports.add(port);\n  console.log('CONN', ID, ports.size);\n\n  port.onmessage = (event) => { ![4](Images/4.png)\n    console.log('MESSAGE', ID, event.data);\n\n    for (let p of ports) { ![5](Images/5.png)\n      p.postMessage([ID, event.data]);\n    }\n  };\n};\n```", "```\n$ npx serve .\n```", "```\nhttp://localhost:5000/red.html\n```", "```\nhttp://localhost:5000/blue.html\n```", "```\nworker.port.postMessage('hello, world');\n```", "```\n// main JavaScript file\nwindow.addEventListener('beforeunload', () => {\n  worker.port.postMessage('close');\n});\n\n// shared worker\nport.onmessage = (event) => {\n  if (event.data === 'close') {\n    ports.delete(port);\n    return;\n  }\n};\n```", "```\nconst worker = new SharedWorker(filename, nameOrOptions);\n```", "```\n<html>\n  <head>\n    <title>Service Workers Example</title>\n    <script src=\"main.js\"></script>\n  </head>\n</html>\n```", "```\nnavigator.serviceWorker.register('/sw.js', { ![1](Images/1.png)\n  scope: '/'\n});\n\nnavigator.serviceWorker.oncontrollerchange = () => { ![2](Images/2.png)\n  console.log('controller change');\n};\n\nasync function makeRequest() { ![3](Images/3.png)\n  const result = await fetch('/data.json');\n  const payload = await result.json();\n  console.log(payload);\n}\n```", "```\nlet counter = 0;\n\nself.oninstall = (event) => {\n  console.log('service worker install');\n};\n\nself.onactivate = (event) => {\n  console.log('service worker activate');\n  event.waitUntil(self.clients.claim()); ![1](Images/1.png)\n};\n\nself.onfetch = (event) => {\n  console.log('fetch', event.request.url);\n\n  if (event.request.url.endsWith('/data.json')) {\n    counter++;\n    event.respondWith( ![2](Images/2.png)\n      new Response(JSON.stringify({counter}), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n    );\n    return;\n  }\n\n  // fallback to normal HTTP request\n  event.respondWith(fetch(event.request)); ![3](Images/3.png)\n};\n```", "```\n$ npx serve .\n```", "```\ncontroller change              main.js:6:11\n```", "```\nservice worker install         sw.js:4:11\nservice worker activate        sw.js:8:11\n```", "```\nmakeRequest();\n```", "```\nfetch http://localhost:5000/data.json   sw.js:13:11\n```", "```\nworker.postMessage('square_sum|num:4');\nworker.postMessage('fibonacci|num:33');\n\nworker.onmessage = (result) => {\n  // Which result belongs to which message?\n  // '3524578'\n  // 4.1462643\n};\n```", "```\n// worker.postMessage\n{\"jsonrpc\": \"2.0\", \"method\": \"square_sum\", \"params\": [4], \"id\": 1}\n{\"jsonrpc\": \"2.0\", \"method\": \"fibonacci\", \"params\": [33], \"id\": 2}\n\n// worker.onmessage\n{\"jsonrpc\": \"2.0\", \"result\": \"3524578\", \"id\": 2}\n{\"jsonrpc\": \"2.0\", \"result\": 4.1462643, \"id\": 1}\n```", "```\nconst commands = { ![1](Images/1.png)\n  square_sum(max) {\n    let sum = 0;\n    for (let i = 0; i < max; i++) sum += Math.sqrt(i);\n    return sum;\n  },\n  fibonacci(limit) {\n    let prev = 1n, next = 0n, swap;\n    while (limit) {\n      swap = prev; prev = prev + next;\n      next = swap; limit--;\n    }\n    return String(next);\n  }\n};\nfunction dispatch(method, args) {\n  if (commands.hasOwnProperty(method)) { ![2](Images/2.png)\n    return commands[method](...args); ![3](Images/3.png)\n  }\n  throw new TypeError(`Command ${method} not defined!`);\n}\n```", "```\n<html>\n  <head>\n    <title>Worker Patterns</title>\n    <script src=\"rpc-worker.js\"></script>\n    <script src=\"main.js\"></script>\n  </head>\n</html>\n```", "```\nconst worker = new RpcWorker('worker.js');\n\nPromise.allSettled([\n  worker.exec('square_sum', 1_000_000),\n  worker.exec('fibonacci', 1_000),\n  worker.exec('fake_method'),\n  worker.exec('bad'),\n]).then(([square_sum, fibonacci, fake, bad]) => {\n  console.log('square sum', square_sum);\n  console.log('fibonacci', fibonacci);\n  console.log('fake', fake);\n  console.log('bad', bad);\n});\n```", "```\nclass RpcWorker {\n  constructor(path) {\n    this.next_command_id = 0;\n    this.in_flight_commands = new Map();\n    this.worker = new Worker(path);\n    this.worker.onmessage = this.onMessageHandler.bind(this);\n  }\n```", "```\n  onMessageHandler(msg) {\n    const { result, error, id } = msg.data;\n    const { resolve, reject } = this.in_flight_commands.get(id);\n    this.in_flight_commands.delete(id);\n    if (error) reject(error);\n    else resolve(result);\n  }\n```", "```\n  exec(method, ...args) {\n    const id = ++this.next_command_id;\n    let resolve, reject;\n    const promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    this.in_flight_commands.set(id, { resolve, reject });\n    this.worker.postMessage({ method, params: args, id });\n    return promise;\n  }\n}\n```", "```\nconst sleep = (ms) => new Promise((res) => setTimeout(res, ms)); ![1](Images/1.png)\n\nfunction asyncOnMessageWrap(fn) { ![2](Images/2.png)\n  return async function(msg) {\n    postMessage(await fn(msg.data));\n  }\n}\n\nconst commands = {\n  async square_sum(max) {\n    await sleep(Math.random() * 100); ![3](Images/3.png)\n    let sum = 0; for (let i = 0; i < max; i++) sum += Math.sqrt(i);\n    return sum;\n  },\n  async fibonacci(limit) {\n    await sleep(Math.random() * 100);\n    let prev = 1n, next = 0n, swap;\n    while (limit) { swap = prev; prev = prev + next; next = swap; limit--; }\n    return String(next); ![4](Images/4.png)\n  },\n  async bad() {\n    await sleep(Math.random() * 10);\n    throw new Error('oh no');\n  }\n};\n\nself.onmessage = asyncOnMessageWrap(async (rpc) => { ![5](Images/5.png)\n  const { method, params, id } = rpc;\n\n  if (commands.hasOwnProperty(method)) {\n    try {\n      const result = await commands[method](...params);\n      return { id, result }; ![6](Images/6.png)\n    } catch (err) {\n      return { id, error: { code: -32000, message: err.message }};\n    }\n  } else {\n    return { ![7](Images/7.png)\n      id, error: {\n        code: -32601,\n        message: `method ${method} not found`\n      }\n    };\n  }\n});\n```", "```\n$ npx serve .\n```", "```\nsquare sum    { status: \"fulfilled\", value: 666666166.4588418 }\nfibonacci     { status: \"fulfilled\", value: \"4346655768...\" }\nfake          { status: \"rejected\", reason: { code: -32601,\n                message: \"method fake_method not found\" } }\nbad           { status: \"rejected\", reason: { code: -32000,\n                message: \"oh no\" } }\n```"]