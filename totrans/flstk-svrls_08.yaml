- en: Chapter 8\. AWS AppSync In-Depth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。AWS AppSync深入解析
- en: In [Chapter 3](ch03.xhtml#ch3), we learned about GraphQL and created a basic
    GraphQL API. In this chapter, we’ll expand upon these concepts to create a music
    festival app using [AWS AppSync](https://github.com/dabit3/full-stack-serverless-code/tree/master/appsync-in-depth),
    from this book’s GitHub repo.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.xhtml#ch3)中，我们学习了GraphQL，并创建了一个基本的GraphQL API。在本章中，我们将进一步扩展这些概念，使用本书GitHub存储库中的[AWS
    AppSync](https://github.com/dabit3/full-stack-serverless-code/tree/master/appsync-in-depth)创建一个音乐节应用程序。
- en: 'This app will require the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序将需要以下内容：
- en: Amazon DynamoDB tables will be used for shows and stages.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon DynamoDB表将用于演出和舞台。
- en: GraphQL API will be used for creating, reading, updating, deleting, and listing
    shows and stages.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL API将用于创建、读取、更新、删除和列出演出和舞台。
- en: Only admins should be able to create, update, or delete a show or a stage.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员才能创建、更新或删除演出或舞台。
- en: All users should be able to view shows and stages.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有用户都应能够查看演出和舞台。
- en: Relationships should be enabled between shows and stages.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应启用演出和舞台之间的关系。
- en: Users should be able to view all shows as well as navigate to view show details.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应能够查看所有演出，并导航到查看演出详细信息。
- en: Building Skills for GraphQL, AppSync API, and React Router
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为GraphQL、AppSync API和React Router构建技能
- en: In this section, we’ll cover how to model relationships between GraphQL types,
    how to implement authorization rules on GraphQL types and fields, how to enable
    multiple authorization modes for an AppSync API, and how to enable route parameters
    using React Router.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何在GraphQL类型之间建立关系，如何在GraphQL类型和字段上实施授权规则，如何为AppSync API启用多种授权模式，以及如何使用React
    Router启用路由参数。
- en: First we’ll briefly cover each of these topics, and when we start building out
    the app, we will get into them in greater depth.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将简要介绍每个主题，当我们开始构建应用程序时，我们将更深入地研究它们。
- en: Relationships Between GraphQL Types
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL类型之间的关系
- en: 'When creating a GraphQL API, or any API, modeling relationships between data
    becomes very important to understand. For example, the app that we are building
    will have the following two types:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建GraphQL API或任何API时，建模数据之间的关系变得非常重要。例如，我们正在构建的应用程序将包含以下两种类型：
- en: Stage
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 舞台
- en: This type will hold the stage information for individual performances, including
    the stage name and stage ID. Each stage will have a number of performances that
    are associated with it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型将保存个别表演的舞台信息，包括舞台名称和舞台ID。每个舞台将有多个与之相关联的表演。
- en: Performance
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 表演
- en: This type will hold the individual performance information, including the performer,
    the description, the stage of the performance, and the time of the performance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型将包含个别表演信息，包括表演者、描述、表演的舞台和表演的时间。
- en: 'For this type of API, ideally you would want to have at least the following
    access patterns:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种类型的API，理想情况下，您至少希望具有以下访问模式：
- en: Query for a single stage and performances for the stage
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询单个舞台和舞台的表演
- en: Query for all stages and performances for each stage
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询所有舞台和每个舞台的所有表演
- en: Query for an individual performance and the corresponding stage info
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询个别表演和相应的舞台信息
- en: Query for all performances and the corresponding stage info
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询所有表演和相应的舞台信息
- en: 'The question is now usually this: how can you enable these different relationships
    and access patterns? And in our case, how can we do this using a NoSQL database
    like DynamoDB? There are two ways to accomplish this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题通常是：如何使这些不同的关系和访问模式变得可用？而在我们的情况下，如何使用像DynamoDB这样的NoSQL数据库来实现这一点？有两种方法可以做到这一点：
- en: Pattern your data in DynamoDB in a way that enables all of these access patterns
    to be performed using a single table by taking advantage of a combination of primary
    keys, sort keys, and local secondary indexes. For this to work with AppSync, we
    would have to write and maintain all of the resolver logic by hand and from scratch.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DynamoDB中设计数据，使得可以利用主键、排序键和本地二级索引的组合来执行所有这些访问模式，从而在单个表中完成。为了在AppSync中实现这一点，我们需要手动编写并维护所有解析器逻辑。
- en: Enable these relationships directly at the resolver level. Because we are using
    GraphQL, and GraphQL enables per-field resolvers, this can be done. To understand
    this better let’s take a look at one of the types we will be working with.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接在解析器级别启用这些关系。因为我们使用GraphQL，并且GraphQL可以启用每个字段的解析器，所以这可以实现。为了更好地理解这一点，让我们来看看我们将要处理的一种类型。
- en: Stage type in GraphQL
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GraphQL中的舞台类型
- en: 'To better understand these concepts, let’s take a look at one of the types
    we will be working with:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这些概念，让我们来看看我们将要处理的一个类型：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When creating a resolver, or resolvers, for this type, here is an example chain
    of actions that you could assume would happen when a request is made for stages
    and corresponding performances:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当为此类型创建解析器或解析器时，这里是一个示例操作链，您可以假设在请求阶段和相应表演时会发生的操作：
- en: The main `Stage` GraphQL resolver will use the stage ID to retrieve the stage
    information from the Stage table in the database.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主 `Stage` GraphQL 解析器将使用阶段 ID 从数据库中的 Stage 表检索阶段信息。
- en: The field of `performances` on the `Stage` type will have its own GraphQL resolver.
    This resolver should use the stage ID to retrieve the related performances by
    querying the database using a GSI, returning only the performances for that *stage*
    ID.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Stage` 类型上的 `performances` 字段将有其自己的 GraphQL 解析器。此解析器应使用阶段 ID 通过查询数据库使用 GSI
    检索相关表演，仅返回该 *阶段* ID 的表演。'
- en: 'GraphQL Transform: @connection'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'GraphQL Transform: @connection'
- en: In [Chapter 3](ch03.xhtml#ch3), we used the `@model` directive of the GraphQL
    Transform library to scaffold out an entire backend, including resolvers, databases,
    and additional GraphQL schema. As a recap, the GraphQL Transform is a library
    of directives that allow us to “decorate” a GraphQL schema and add additional
    functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](ch03.xhtml#ch3) 中，我们使用 GraphQL Transform 库的 `@model` 指令来搭建整个后端，包括解析器、数据库和额外的
    GraphQL 模式。回顾一下，GraphQL Transform 是一个指令库，允许我们“装饰”一个 GraphQL 模式并添加额外功能。
- en: Here, we’ll be introducing a couple of new directives, including `@connection`,
    which enables us to model these relationships and generate the necessary resolvers
    with only a few lines of code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将介绍一些新的指令，包括 `@connection`，它使我们能够建模这些关系并仅使用几行代码生成必要的解析器。
- en: Multiple Authentication Types
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多种身份验证类型
- en: In [Chapter 3](ch03.xhtml#ch3), we created a GraphQL API using the API key as
    the authentication type. This is fine for certain circumstances, like when you
    want to have a GraphQL query available to all users of your app.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](ch03.xhtml#ch3) 中，我们创建了一个 GraphQL API，使用 API 密钥作为身份验证类型。这在某些情况下是可以接受的，例如当您希望将
    GraphQL 查询提供给您应用程序的所有用户时。
- en: 'AppSync supports four main authentication methods:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: AppSync 支持四种主要的身份验证方法：
- en: The API key
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: API 密钥
- en: The API key requires that, when making an HTTP request, you send the API key
    in the header in the form of `x-api-key` in some form or fashion. If you are using
    the Amplify client as we have done so far in this book, then this is automatically
    sent for you.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: API 密钥要求在发出 HTTP 请求时，以某种形式在头部发送 API 密钥，例如 `x-api-key`。如果您像我们在本书中所做的那样使用 Amplify
    客户端，则这将自动发送。
- en: Amazon Cognito user pools
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Cognito 用户池
- en: Amazon Cognito, the managed authentication service we’ve used throughout this
    book, is one of the mechanisms we will be using in this chapter. Using Amazon
    Cognito, we can configure private and group access to the API itself and to GraphQL
    types and fields.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Cognito，我们在本书中一直使用的托管身份验证服务，是我们本章将使用的机制之一。使用 Amazon Cognito，我们可以配置对 API
    本身以及 GraphQL 类型和字段的私有和组访问。
- en: OpenID Connect
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: OpenID Connect
- en: OpenID Connect enables you to bring your own authentication provider, so if
    you prefer another authentication service like Auth0, or your company has its
    own authentication implementation, you can still use it to authenticate against
    an AppSync API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: OpenID Connect 允许您使用自己的身份验证提供者，因此，如果您更喜欢像 Auth0 这样的其他身份验证服务，或者您的公司有自己的身份验证实现，您仍然可以使用它来对
    AppSync API 进行身份验证。
- en: IAM
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: IAM
- en: AWS IAM type enforces the AWS Signature Version 4 signing process on the GraphQL
    API. You can use an AWS IAM UnAuthenticated Role from Cognito identity pools for
    public access, allowing a more secure way to enable public access against your
    AppSync API versus an API key.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IAM 类型强制在 GraphQL API 上执行 AWS Signature Version 4 签名过程。您可以使用 Cognito 身份池中的
    AWS IAM 未认证角色来实现公共访问，从而以比 API 密钥更安全的方式启用针对您的 AppSync API 的公共访问。
- en: Here we will use a combination of the API key and Amazon Cognito to provide
    multiple authentication types for the API, enabling public read access and private
    read and write access.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将结合使用 API 密钥和 Amazon Cognito 为 API 提供多种身份验证类型，从而实现公共读访问以及私有读写访问。
- en: Authorization
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: Using the GraphQL Transform library, we can also define different authorization
    rules for the API by using the `@auth` directive.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GraphQL Transform 库，我们还可以使用 `@auth` 指令为 API 定义不同的授权规则。
- en: 'Using `@auth`, we can define different types of rules, including (but not limited
    to) the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@auth`，我们可以定义不同类型的规则，包括（但不限于）以下内容：
- en: Enable all users to create and read, but only the owner of the created item
    to update and delete.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许所有用户创建和读取，但只有创建项目的所有者能够更新和删除。
- en: Enable only users of a certain group to be able to create, update, or delete.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅允许特定组用户能够创建、更新或删除。
- en: Enable all users to read, but not perform any other actions.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许所有用户读取，但不能执行任何其他操作。
- en: A combination of the preceding rules.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前述规则的组合。
- en: 'In this instance, the app we will be building will support both private and
    public access, but we will need to also enable more control over these rules.
    We need to support the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将构建的应用程序将支持私有和公共访问，但我们还需要更多控制这些规则。我们需要支持以下内容：
- en: 'Authenticated users who are part of the Amazon Cognito group named Admin will
    be able to perform all actions: create, read, update, and delete.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属于名为 Admin 的 Amazon Cognito 组的经过身份验证的用户将能够执行所有操作：创建、读取、更新和删除。
- en: Users who are not authenticated will have access, but will only be able to read.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经身份验证的用户将可以访问，但只能读取。
- en: Custom Data Access Patterns Using GSIs
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GSIs自定义数据访问模式。
- en: One of the most powerful things about DynamoDB is that it allows (at the time
    of this writing) 20 additional GSIs per table. Using either a GSI or a combination
    of GSI + sort key (also think of this as a filter key), you are able to create
    extremely flexible and powerful data access patterns for your data. The GraphQL
    Transform library also has a directive, `@key`, that makes it simple to configure
    custom index structures for `@model` types.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB 最强大的之一是（截至本文写作时）每个表允许 20 个额外的GSIs。使用GSI或GSI + 排序键（也可以看作是过滤键）之一，您可以为数据创建极其灵活和强大的数据访问模式。GraphQL
    Transform 库还有一个指令，`@key`，使得为 `@model` 类型配置自定义索引结构变得简单。
- en: We’ll use the `@key` directive to create an access pattern that will allow us
    to query performances for a given stage ID by setting the stage ID as the GSI
    on the `Performance` table. Doing this will allow us to be able to request stages
    and their corresponding performances in a single GraphQL query.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `@key` 指令来创建一个访问模式，通过将舞台 ID 设置为 `Performance` 表上的 GSI 来允许我们按舞台 ID 查询表演。这样做将使我们能够在单个
    GraphQL 查询中请求舞台及其相应的表演。
- en: That completes our skills overview; let’s get started building the app.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就完成了技能概述，让我们开始构建应用程序吧。
- en: Starting to Build the App
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始构建应用程序
- en: To get started, we’ll again be walking through the steps of creating a new React
    project, installing dependencies, initializing a new Amplify app, and adding features
    via the CLI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将再次逐步进行创建新的 React 项目、安装依赖项、初始化新的 Amplify 应用程序以及通过 CLI 添加功能的步骤。
- en: 'Change into the directory where you would like the app to live, and create
    a new React project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到您希望应用程序位于的目录，并创建一个新的 React 项目：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, install the dependencies:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装依赖项：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating the Amplify App and Adding the Features
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Amplify 应用程序并添加功能
- en: 'Next, initialize a new Amplify project in the root of the project directory:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在项目目录的根目录中初始化一个新的 Amplify 项目：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, the Amplify project has been initialized and we can go ahead and start
    adding features.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Amplify 项目已初始化完成，我们可以继续添加功能了。
- en: Building the Backend
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建后端
- en: The first feature we will add is authentication. This app will need to have
    basic authentication but will also need to have the ability to add admin users
    dynamically via a Lambda post-confirmation trigger like we did in [Chapter 6](ch06.xhtml#ch6).
    To enable this, we will create the authentication service as well as a Lambda
    trigger that will allow us to add a predefined set of users into an Admin group
    as they sign up.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先添加的功能是身份验证。该应用程序将需要基本身份验证，但还需要能够通过 Lambda 后确认触发器动态添加管理用户，就像我们在[第6章](ch06.xhtml#ch6)中所做的那样。为了实现这一点，我们将创建认证服务以及一个
    Lambda 触发器，允许我们在注册时将预定义的一组用户添加到管理组中。
- en: Authentication
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: 'To add authentication with Cognito, we’ll again use the `auth` category:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Cognito 添加身份验证，我们将再次使用 `auth` 类别：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the function with the following code and configure the `adminEmails`
    array:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新函数，并配置 `adminEmails` 数组：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, the authentication service has been set up and we can continue on to the
    next step: creating the AppSync API.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，身份验证服务已设置好，我们可以继续下一步：创建 AppSync API。
- en: The AppSync API
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AppSync API
- en: Next, we’ll create the AppSync GraphQL API. Remember that for this API, we will
    need to enable multiple authentication types for both public and protected access.
    This can all be enabled by the CLI.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the AppSync API, we’ll use the `api` category:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This should open the GraphQL schema, located at *amplify/backend/api/festivalapi/schema.graphql*,
    in your text editor.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'The schema we will be using has two main types, a `Stage` and a `Performance`.
    Use the following schema and continue (we will walk through how it works in the
    next step):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s look at the directives we used and how they work.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '@auth'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, the `@auth` directive allows us to pass in an array of authorization
    rules. Each rule has an `allow` field (required) as well as other metadata (optional),
    including things like specifying the provider if it is different than the default
    authorization type.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: In the `Stage` and `Performance` type, we’ve used two authorization types, one
    for group access (`groups`) and another for public access (`public`). You’ll notice
    that for the public access, we’ve also set an array of operations. This array
    should contain a list of the operations we would like to enable on the API. If
    there are no operations listed, then by default all operations would be enabled.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '@key'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@key` directive enables us to add GSIs and sort keys to a DynamoDB table
    for custom data access patterns. In the preceding schema, we’ve created a `key`
    called `byStageId` that will allow us to query the Performance table for performances
    by stage ID using a field called `performanceStageId` (on the `Performance` table).
    The resolver for the `performances` field will then use the ID of the stage to
    query for performances by stage ID.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '@connection'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `@connection` directive allows us to model relationships between types.
    Types of relationships that can be created are belongs to, one to many, many to
    one, or many to many. In this example, we’ve created two relationships:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: A relationship between a stage and a performance (one stage has many performances)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A relationship between a performance and a stage (a performance belongs to a
    stage)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Services
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With all of the services configured, we’re ready to deploy the backend:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The services have been deployed and we can begin writing the client code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Building the Frontend
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the project has been created and configured and the backend has been
    deployed, we can start setting up the client!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is create the files we will need for this app:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next thing we will need to do is open *src/index.js* to add the Amplify
    configuration, import the Ant Design styles, and replace the main component with
    the Router that we will be creating soon. Update the file with the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Container
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s create the `Container` component that will serve as a reusable component
    to add padding and styling for our views:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Footer
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we’ll create the `Footer` component that will serve as a reusable component
    to add a basic footer, as well as a link for admins to be able to sign up and
    sign in:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`Footer`组件，它将作为可重用组件添加基本页脚，以及一个链接供管理员注册和登录：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Nav
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航
- en: 'Now, open *src/Nav.js* to create the basic navigation. There will only be one
    link: a link back to the main view that will hold all of the shows and performances:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开*src/Nav.js*来创建基本导航。只会有一个链接：一个链接回到主视图，其中将包含所有的演出和表演：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Admin
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理员
- en: 'The Admin component we’ll create will only do three things for now: allow a
    user to sign up, sign in, and sign out. The idea for this component is to give
    admins a way to sign up so they can then create and manage the API as an admin.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的管理组件现在只做三件事：允许用户注册、登录和退出。此组件的理念是为管理员提供一种注册的方式，以便他们可以作为管理员创建和管理API。
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, when someone signs up, if their email is enabled in the Lambda trigger,
    they will be placed in the Admin group after signing up. They will then be able
    to perform mutations to create, update, and delete stages and performances.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当有人注册时，如果他们的电子邮件在Lambda触发器中启用，他们将在注册后被放置在管理员组中。然后他们将能够执行变更以创建、更新和删除阶段和表演。
- en: 'If you ever need to update your backend code like the GraphQL schema or Lambda
    function, you can make the changes locally, then run `amplify push` to deploy
    the changes to the backend:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更新后端代码（如GraphQL模式或Lambda函数），您可以在本地进行更改，然后运行`amplify push`以部署更改到后端：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Router
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由器
- en: 'Now let’s create the Router:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建路由器：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this component, we combine the router with the persistent UI components like
    the Container and Footer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们将路由器与持久UI组件（如容器和页脚）结合起来。
- en: 'The app has three routes:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序有三个路由：
- en: Home
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 主页
- en: This is the main route that will render the stages and performances.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染阶段和表演的主要路由。
- en: Performance
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 性能
- en: This is this is the route that will render an individual performance and details
    around the performance.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将渲染单个表演和围绕表演的详细信息的路由。
- en: Admin
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员
- en: This is the route that will render the sign-up/sign-in page for admins.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将为管理员渲染注册/登录页面的路由。
- en: 'In the Performance route, you will see that we are using a path that looks
    like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能路由中，您将看到我们使用类似以下路径的路径：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Doing this allows us to have URL parameters, so if we hit a route like this,
    we will be able to easily extract the ID from the URL:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以使我们拥有URL参数，因此如果我们命中这样的路由，我们将能够轻松从URL中提取ID：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Hitting a route with URL parameters will allow us to access them in the component
    itself. This is useful because we will be using the ID of the performance to fetch
    the performance details, and having them easily accessible in the route parameters
    enables this. It also enables you to easily build apps that support deep linking.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 命中带有URL参数的路由将允许我们在组件本身访问它们。这非常有用，因为我们将使用性能的ID来获取性能详情，并且在路由参数中轻松访问它们使此功能变得可能。它还使您能够轻松构建支持深链接的应用程序。
- en: Performance
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: 'Next, let’s create the `Performance` component:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建`Performance`组件：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The render method of this component is pretty basic; it’s just rendering the
    performance `performer`, `time`, and `description`. What is interesting about
    this component is how we get that information. We do so with the following flow:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件的渲染方法非常基础；它只是呈现性能`performer`、`time`和`description`。这个组件有趣的地方在于我们如何获取这些信息。我们通过以下流程来实现：
- en: 'We create two pieces of state using the `useState` hook: `loading` (set to
    true) and `performance` (set to null). We also create a variable called `id` that
    uses the `useParams` helper from React Router to get the route parameter of `id`.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`useState`钩子创建了两个状态变量：`loading`（设置为true）和`performance`（设置为null）。我们还创建了一个名为`id`的变量，该变量使用React
    Router的`useParams`助手获取`id`的路由参数。
- en: When the component loads, we use the `useEffect` hook to immediately call the
    `fetchPerformanceInfo` function.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当组件加载时，我们使用`useEffect`钩子立即调用`fetchPerformanceInfo`函数。
- en: The `fetchPerformanceInfo` function will use the `id` from the route params
    to call the AppSync API. The API call here uses `API.graphql`, passing in the
    `variables`, `query`, and the `authMode`. By default, our API is using Cognito
    User Pools as the auth mode. Any time we would like to override this, like in
    this case to make a public API call, we need to specify the `authMode` in the
    API call itself.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fetchPerformanceInfo`函数将使用路由参数中的`id`来调用AppSync API。这里的API调用使用`API.graphql`，传入`variables`、`query`和`authMode`。默认情况下，我们的API使用Cognito用户池作为认证模式。每当我们需要覆盖这一设置，例如在本例中进行公共API调用时，我们需要在API调用中指定`authMode`。'
- en: Once the data is returned from the API, we call `setLoading` and `setPerformance`
    to update the UI and render the data coming back from the API.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从API返回数据后，我们调用`setLoading`和`setPerformance`来更新UI并渲染从API返回的数据。
- en: Home
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主页
- en: 'Now, let’s create the last component, the `Home` component:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建最后一个组件，`Home`组件：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The logic in this component is actually very similar to what we did in the
    `Performance` component:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件中的逻辑实际上与我们在`Performance`组件中所做的非常相似：
- en: 'Create two main pieces of state using the `useState` hook: `stages` (set to
    an empty array), and `loading` (set to `true`).'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`useState`钩子创建两个主要的状态变量：`stages`（设置为空数组）和`loading`（设置为`true`）。
- en: When the app loads, we use the `API` class with a custom `authMode` of `API_KEY`
    to call the AppSync API.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序加载时，我们使用具有自定义`authMode`为`API_KEY`的`API`类调用AppSync API。
- en: When the data comes back from the API, set the state for the stages and set
    loading to false.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当数据从API返回时，设置阶段状态并将loading设置为false。
- en: 'Now, the app is finished, but there’s just one more thing. Because we have
    created a custom access pattern for the performances resolver, we need to update
    the `listStages` query definition to also return the performances. To do this,
    update the `listStages` query with the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序已完成，但还有一件事。因为我们已为性能解析器创建了自定义访问模式，所以我们需要更新`listStages`查询定义，以便也返回性能。为此，请使用以下内容更新`listStages`查询：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, the app is completed and we can populate some data. Start the app and
    sign up with an admin user:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序已完成，我们可以填充一些数据。启动应用程序并使用管理员用户注册：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Click the `Admins` link in the footer to sign up. Once you’ve signed up, open
    the AppSync console:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在页脚点击`Admins`链接进行注册。注册完成后，打开AppSync控制台：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the Queries panel of the console, you will need to click Login with User
    Pools to sign in using the username and password of the user you just created.
    When prompted for the ClientID, use the `aws_user_pools_web_client_id` located
    in the *aws-exports.js* file of your local project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台的查询面板中，您需要点击使用用户池登录，使用刚创建的用户的用户名和密码进行登录。当要求输入ClientID时，请使用位于本地项目的*aws-exports.js*文件中的`aws_user_pools_web_client_id`。
- en: 'Next, create at least one stage and one performance:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建至少一个阶段和一个性能：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, our database has some data, and we should be able to view it in our app
    and navigate between the main view and the detail view for each performance!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的数据库中有一些数据，我们应该能够在应用程序中查看它，并在每个性能的主视图和详细视图之间进行导航！
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章节中需要记住的几点如下：
- en: The GraphQL Transform directive enables you to add powerful features to your
    GraphQL API like authorization rules, relationships, and custom indexes for additional
    data access patterns.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL Transform指令使您能够为GraphQL API添加强大的功能，如授权规则、关系和自定义索引，以支持额外的数据访问模式。
- en: The `@auth` directive allows you to pass in an array of rules to define authorization
    rules on types and fields.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@auth`指令允许您传入一系列规则来定义类型和字段的授权规则。'
- en: The `@connection` directive enables you to model relationships between GraphQL
    types.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@connection`指令使您能够建模GraphQL类型之间的关系。'
- en: The `@key` directive enables you to define custom indexes for custom data access
    patterns and to enhance existing relationships.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@key`指令使您能够为自定义数据访问模式定义自定义索引，并增强现有关系。'
- en: When creating an API with multiple authorization types, you will have a `Primary`
    authorization type that will be the default when making API calls. Whenever you
    need to override the `Primary` authorization type, you must pass in the `authMode`
    parameter to the `API` class defining the authorization type you would like to
    use.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当创建具有多种授权类型的API时，您将有一个`Primary`授权类型，这将是在进行API调用时的默认类型。每当您需要覆盖`Primary`授权类型时，必须将`authMode`参数传递给定义您想要使用的授权类型的`API`类。
