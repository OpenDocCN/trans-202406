["```\n$ OPERATOR_NAME=visitors-operator\n$ operator-sdk new $OPERATOR_NAME\nINFO[0000] Creating new Go operator 'visitors-operator'.\nINFO[0000] Created go.mod\nINFO[0000] Created tools.go\nINFO[0000] Created cmd/manager/main.go\nINFO[0000] Created build/Dockerfile\nINFO[0000] Created build/bin/entrypoint\nINFO[0000] Created build/bin/user_setup\nINFO[0000] Created deploy/service_account.yaml\nINFO[0000] Created deploy/role.yaml\nINFO[0000] Created deploy/role_binding.yaml\nINFO[0000] Created deploy/operator.yaml\nINFO[0000] Created pkg/apis/apis.go\nINFO[0000] Created pkg/controller/controller.go\nINFO[0000] Created version/version.go\nINFO[0000] Created .gitignore\nINFO[0000] Validating project\n[...]  ![1](assets/1.png)\n\n```", "```\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object \n// VisitorsApp is the Schema for the visitorsapps API // +k8s:openapi-gen=true // +kubebuilder:subresource:status // +genclient:nonNamespaced ![1](assets/1.png)\ntype VisitorsApp struct {\n```", "```\n$ `operator-sdk` `add` `api` `--api-version``=``example.com/v1` `--kind``=``VisitorsApp`\nINFO[0000] Generating api version example.com/v1 for kind VisitorsApp.\nINFO[0000] Created pkg/apis/example/group.go\nINFO[0000] Created pkg/apis/example/v1/visitorsapp_types.go\nINFO[0000] Created pkg/apis/addtoscheme_example_v1.go\nINFO[0000] Created pkg/apis/example/v1/register.go\nINFO[0000] Created pkg/apis/example/v1/doc.go\nINFO[0000] Created deploy/crds/example_v1_visitorsapp_cr.yaml\nINFO[0001] Created deploy/crds/example_v1_visitorsapp_crd.yaml\nINFO[0001] Running deepcopy code-generation for Custom Resource group versions:\n  [example:[v1], ]\nINFO[0001] Code-generation complete.\nINFO[0001] Running OpenAPI code-generation for Custom Resource group versions:\n  [example:[v1], ]\nINFO[0003] Created deploy/crds/example_v1_visitorsapp_crd.yaml\nINFO[0003] Code-generation complete.\nINFO[0003] API generation complete.\n\n```", "```\ntype VisitorsAppSpec struct {\n    Size       int32  `json:\"size\"`\n    Title      string `json:\"title\"`\n}\n\ntype VisitorsAppStatus struct {\n    BackendImage  string `json:\"backendImage\"`\n    FrontendImage string `json:\"frontendImage\"`\n}\n```", "```\n$ `operator-sdk` `generate` `k8s`\nINFO[0000] Running deepcopy code-generation for Custom Resource\ngroup versions: [example:[v1], ]\nINFO[0000] Code-generation complete.\n\n```", "```\n$ `operator-sdk` `add` `controller` `--api-version``=``example.com/v1` `--kind``=``VisitorsApp`\nINFO[0000] Generating controller version example.com/v1 for kind VisitorsApp.\nINFO[0000] Created pkg/controller/visitorsapp/visitorsapp_controller.go  ![1](assets/1.png)\nINFO[0000] Created pkg/controller/add_visitorsapp.go\nINFO[0000] Controller generation complete.\n\n```", "```\n// Watch for changes to primary resource VisitorsApp\nerr = c.Watch(&source.Kind{Type: &examplev1.VisitorsApp{}},\n              &handler.EnqueueRequestForObject{})\nif err != nil {\n    return err\n}\n```", "```\nerr = c.Watch(&source.Kind{Type: &appsv1.Deployment{}},\n              &handler.EnqueueRequestForOwner{\n    IsController: true,\n    OwnerType:    &examplev1.VisitorsApp{},\n})\nif err != nil {\n    return err\n}\n\nerr = c.Watch(&source.Kind{Type: &corev1.Service{}},\n              &handler.EnqueueRequestForOwner{\n    IsController: true,\n    OwnerType:    &examplev1.VisitorsApp{},\n})\nif err != nil {\n    return err\n}\n```", "```\n// Fetch the VisitorsApp instance instance := &examplev1.VisitorsApp{}\nerr := r.client.Get(context.TODO(), request.NamespacedName, instance) ![1](assets/1.png)![2](assets/2.png)\n\nif err != nil {\n    if errors.IsNotFound(err) {\n        return reconcile.Result{}, nil ![3](assets/3.png)\n    }\n    // Error reading the object - requeue the request.\n    return reconcile.Result{}, err\n}\n```", "```\ninstance.Status.BackendImage = \"example\"\nerr := r.client.Status().Update(context.TODO(), instance)\n```", "```\nfound := &appsv1.Deployment{}\nfindMe := types.NamespacedName{\n    Name:      \"myDeployment\",  ![1](assets/1.png)\n    Namespace: instance.Namespace,  ![2](assets/2.png)\n}\nerr := r.client.Get(context.TODO(), findMe, found)\nif err != nil && errors.IsNotFound(err) {\n    // Creation logic ![3](assets/3.png)\n}\n```", "```\nlabels := map[string]string {\n    \"app\":             \"visitors\",\n    \"visitorssite_cr\": instance.Name,\n    \"tier\":            \"mysql\",\n}\nsize := int32(1)  ![1](assets/1.png)\n\nuserSecret := &corev1.EnvVarSource{\n    SecretKeyRef: &corev1.SecretKeySelector{\n        LocalObjectReference: corev1.LocalObjectReference{Name: mysqlAuthName()},\n        Key: \"username\",\n    },\n}\n\npasswordSecret := &corev1.EnvVarSource{\n    SecretKeyRef: &corev1.SecretKeySelector{\n        LocalObjectReference: corev1.LocalObjectReference{Name: mysqlAuthName()},\n        Key: \"password\",\n    },\n}\n\ndep := &appsv1.Deployment{\n    ObjectMeta: metav1.ObjectMeta{\n        Name:         \"mysql-backend-service\", ![2](assets/2.png)\n        Namespace:    instance.Namespace,\n    },\n    Spec: appsv1.DeploymentSpec{\n        Replicas: &size,\n        Selector: &metav1.LabelSelector{\n            MatchLabels: labels,\n        },\n        Template: corev1.PodTemplateSpec{\n            ObjectMeta: metav1.ObjectMeta{\n                Labels: labels,\n            },\n            Spec: corev1.PodSpec{\n                Containers: []corev1.Container{{\n                    Image:  \"mysql:5.7\",\n                    Name:   \"visitors-mysql\",\n                    Ports:  []corev1.ContainerPort{{\n                        ContainerPort:    3306,\n                        Name:             \"mysql\",\n                    }},\n                    Env: []corev1.EnvVar{ ![3](assets/3.png)\n                        {\n                            Name: \"MYSQL_ROOT_PASSWORD\",\n                            Value: \"password\",\n                        },\n                        {\n                            Name: \"MYSQL_DATABASE\",\n                            Value: \"visitors\",\n                        },\n                        {\n                            Name: \"MYSQL_USER\",\n                            ValueFrom: userSecret,\n                        },\n                        {\n                            Name: \"MYSQL_PASSWORD\",\n                            ValueFrom: passwordSecret,\n                        },\n                    },\n                }},\n            },\n        },\n    },\n}\n\ncontrollerutil.SetControllerReference(instance, dep, r.scheme) ![4](assets/4.png)\n```", "```\ncreateMe := // Deployment instance from above\n\n// Create the service\nerr = r.client.Create(context.TODO(), createMe)\n\nif err != nil {\n    // Creation failed\n    return &reconcile.Result{}, err\n} else {\n    // Creation was successful\n    return nil, nil\n}\n```", "```\nfinalizer := \"visitors.example.com\"\n\nbeingDeleted := instance.GetDeletionTimestamp() != nil  ![1](assets/1.png)\nif beingDeleted {\n    if contains(instance.GetFinalizers(), finalizer) {\n\n        // Perform finalization logic. If this fails, leave the finalizer\n        // intact and requeue the reconcile request to attempt the clean\n        // up again without allowing Kubernetes to actually delete\n        // the resource. \n        instance.SetFinalizers(remove(instance.GetFinalizers(), finalizer)) ![2](assets/2.png)\n        err := r.client.Update(context.TODO(), instance)\n        if err != nil {\n            return reconcile.Result{}, err\n        }\n    }\n    return reconcile.Result{}, nil\n}\n```", "```\n    $ `kubectl` `apply` `-f` `deploy/crds/*_crd.yaml`\n\n    ```", "```\n    $ `export` `OPERATOR_NAME``=``<``operator-name>`\n    $ `operator-sdk` `up` `local` `--namespace` `default`\n\n    ```", "```\n    $ `kubectl` `apply` `-f` `deploy/crds/*_cr.yaml`\n\n    ```"]