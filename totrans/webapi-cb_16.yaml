- en: Chapter 16\. Working with the Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite your best intentions, things can and will go wrong with your code. There
    are several debugging tools available to you. Today’s browsers have powerful debuggers
    built in to them that let you step through code and inspect the values of variables
    and expressions. Sometimes, though, you might want to keep it simple and use the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: In its most basic form, you interact with the console by calling `console.log`
    with a message. This message is printed to the browser’s JavaScript console. While
    more verbose than breakpoint-based debugging, sometimes it can still be useful
    to log and inspect values at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Other than a simple `console.log`, there are other things you can do with the
    console such as group messages, use counters, display tables, and even style your
    output with CSS. There are also other log levels (error, warn, debug) that you
    can use to categorize and filter your console messages.
  prefs: []
  type: TYPE_NORMAL
- en: Styling Console Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to apply some CSS to your console log output. For example, maybe you
    want to make the font larger and change the color.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `%c` *directive* in your log message to denote what text you want styled.
    For each usage of `%c`, add another argument to `console.log` containing CSS styles
    (see [Example 16-1](#example16-1)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-1\. Styling console output
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 16-1](#img_styledConsole) shows what this styled text looks like in
    the console.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The styled console output](assets/wacb_1601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-1\. The styled console output
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`console.log` takes a variable number of arguments. For each use of the `%c`
    directive, there should be a corresponding extra argument containing the styles
    to apply for that section of text.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice in [Figure 16-1](#img_styledConsole) that the styles are reset between
    each `%c` section. The italic font from the first section does not carry over
    into the bold font from the second section.
  prefs: []
  type: TYPE_NORMAL
- en: Using Log Levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to distinguish between informational, warning, and error messages in
    the console.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of `console.log`, use `console.info`, `console.warn`, and `console.error`,
    respectively (see [Example 16-2](#example16-2)). These messages are styled differently,
    and most browsers allow you to filter log messages by their level.
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-2\. Using different log levels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The messages are styled differently, with icons, as shown in [Figure 16-2](#img_logLevels).
  prefs: []
  type: TYPE_NORMAL
- en: '![The different log levels (shown in Chrome)](assets/wacb_1602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-2\. The different log levels (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Warning and error messages also present you with a stack trace that can be expanded
    and viewed in the console. This makes it easy to track down where an error occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Named Loggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to log messages from different modules of your app, prefixed with the
    module name in a given color.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `Function.prototype.bind` on the `console.log` function, binding the module
    name prefix and color style (see [Example 16-3](#example16-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-3\. Creating a named logger
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `createLogger` function returns a new log function that you can call just
    like `console.log`, but messages have a colored prefix (see [Example 16-4](#example16-4)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-4\. Using the named loggers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This renders log messages with colored prefixes, as shown in [Figure 16-3](#img_loggers).
  prefs: []
  type: TYPE_NORMAL
- en: '![Colored loggers (shown in Chrome)](assets/wacb_1603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-3\. Colored loggers (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Calling `bind` in this way creates a *partially applied* version of the `console.log`
    function that automatically adds the prefix and color. Any further arguments you
    pass to it are added after the prefix and color style.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying an Array of Objects in a Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have an array of objects that you want to log in an easily readable way.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pass the array to `console.table` and it displays a table. There is a column
    for each object property, and a row for each object in the array (see [Example 16-5](#example16-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-5\. Logging a table
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 16-4](#img_table) shows how the data is logged in table form.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The different log levels (shown in Chrome)](assets/wacb_1604.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-4\. The logged table (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can limit what object properties are shown by passing a second argument
    to `console.table`. This argument is an array of property names. If given, only
    those properties are shown in the table output.
  prefs: []
  type: TYPE_NORMAL
- en: '`console.table` can also be used with an object. In [Example 16-6](#code_objectTable),
    the `index` column contains the property names rather than array indices.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-6\. Passing an object to `console.table`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 16-6](#code_objectTable) produces the table in [Figure 16-5](#img_objectTable).'
  prefs: []
  type: TYPE_NORMAL
- en: '![The different log levels (shown in Chrome)](assets/wacb_1605.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-5\. The logged table (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Example 16-7](#code_limitColumns) logs the users in a table, but only shows
    the firstName and lastName columns (see [Figure 16-6](#img_tableColumns)).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-7\. Limiting table columns
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Showing only the first and last name columns (shown in Chrome)](assets/wacb_1606.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-6\. Showing only the first and last name columns (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The rendered table is also sortable. You can click on a column name to sort
    the table by that column (see [Figure 16-7](#img_tableSorted)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Sorting the table by last name (shown in Chrome)](assets/wacb_1607.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-7\. Sorting the table by last name (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using Console Timers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to calculate the time taken by some code, for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `console.time` and `console.timeEnd` methods (see [Example 16-8](#example16-8)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-8\. Using `console.time` and `console.timeEnd`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you call `console.time` with a timer name, it starts the named timer. Go
    perform whatever work you want to profile and when you’re done, call `console.timeEnd`
    with the same timer name. The elapsed time, along with the timer name, is printed
    to the console.
  prefs: []
  type: TYPE_NORMAL
- en: If you call `console.timeEnd` with a timer name that doesn’t match a previous
    call to `console.time`, no error is thrown, but a warning message is logged to
    the console that the timer does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is different from using `window.performance.mark` and `window.perfor⁠mance​.measure`
    as described in [Chapter 15](ch15.html#ch_performance). `console.time` is used
    for ad hoc timing, usually during debugging. The notable difference is that `console.time`
    and `console.timeEnd` do *not* add entries to the performance timeline. Once you
    call `console.timeEnd` for a given timer, that timer is destroyed. If you want
    timing data that is persisted in memory, you might want to use the Performance
    API instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using Console Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to better organize groups of log messages.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `console.group` to create nested groups of messages that can be expanded
    and collapsed (see [Example 16-9](#example16-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-9\. Using console groups
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This prints grouped messages to the console. You can expand and collapse the
    groups so you can focus on the specific group you’re interested in, as shown in
    [Figure 16-8](#img_tableGroups).
  prefs: []
  type: TYPE_NORMAL
- en: '![Grouped console messages (shown in Chrome)](assets/wacb_1608.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-8\. Grouped console messages (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use console groups to trace complex algorithms. Groups can be nested
    several levels deep, making it much easier to follow your log messages during
    a complex calculation. This is particularly valuable when there are a lot of messages
    to sort through. If you want a group to be collapsed by default, you can call
    `console.groupCollapsed` instead of `console.group`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Counters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to count the number of times a part of your code is called.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Call `console.count` with a counter name that is unique to your code. Every
    time the `console.count` statement is executed, it prints and increments the counter
    value. This lets you keep track of how many times the call to `console.count`
    was hit.
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-10\. Using counters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 16-10](#code_counters) prints out the output shown in [Example 16-11](#example16-11).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-11\. The counter output
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`console.count` is useful for tracing loop iterations or recursive function
    calls. Like other console methods, it is primarily intended for debugging purposes
    and isn’t meant for collecting usage metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also call `console.count` without any arguments, in which case it uses
    a counter called `default`.
  prefs: []
  type: TYPE_NORMAL
- en: Logging a Variable and Its Value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to log a variable name and its value without having to type the name
    twice.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use object shorthand notation to log an object containing the variable (see
    [Example 16-12](#example16-12)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-12\. Logging a variable and its value
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This creates an object whose name is `username`, and whose value is the value
    of the `username` variable, and logs it to the console, as shown in [Figure 16-9](#img_nameValue).
  prefs: []
  type: TYPE_NORMAL
- en: '![Object with the named value (shown in Chrome)](assets/wacb_1609.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-9\. Object with the named value (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before object shorthand notation, you would need to type the variable name twice
    (see [Example 16-13](#example16-13)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-13\. Logging a variable and its value without object shorthand
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It’s not much of a change, but it’s a quick time-saving shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: Logging a Stack Trace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to see a stack trace of where the code is currently being executed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `console.trace` to log a trace of the current call stack (see [Example 16-14](#example16-14)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-14\. Using `console.trace`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This outputs the stack trace shown in [Figure 16-10](#img_trace).
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging a stack trace (shown in Chrome)](assets/wacb_1610.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-10\. Logging a stack trace (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A stack trace is a useful debugging tool. It shows the current state of the
    call stack. The first entry in the stack trace is the `console.trace` call itself.
    Then, the next entry is whatever function called the function containing the `console.trace`
    call, and so on. In most browsers, you can click on a stack trace element to jump
    to that line of code. You can use this to add log statements or set breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Validating Expected Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While debugging, you want to make sure an expression has an expected value.
    If it doesn’t, you want to see a console error.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `console.assert` to print an error if the expression doesn’t match what
    you expect (see [Example 16-15](#code_assertUser)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-15\. Using `console.assert`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If `updateUser` is called with a user object without an `id` property, the error
    is logged.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assertions are not typically used in production, as it’s a debugging tool like
    the other console methods. It’s important to note that if an assertion fails,
    it prints an error but does not throw an error or otherwise stop execution of
    the rest of the function. In [Example 16-15](#code_assertUser), if the user ID
    assertion fails, it still attempts to make the PUT request to update the user.
    This likely results in a 404 error because `null` is in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Examining an Object’s Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to inspect the properties of an object, including deeply nested ones
    and the prototype chain.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `console.dir` to log the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 16-16](#example16-16) shows how to use `console.dir` to inspect the
    `console` object itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-16\. Using `console.dir`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 16-11](#img_consoleDir) shows the expandable tree structure that is
    logged to the console. Each function and property in the object is expandable.
    It also includes the prototype chain, which can be expanded and inspected as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using console.dir on the console object (shown in Chrome)](assets/wacb_1611.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-11\. Using `console.dir` on the console object (shown in Chrome)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On some browser versions, `console.log` also presents an interactive structure
    to inspect an object. While this behavior is browser dependent, `console.dir`
    always inspects the object, as shown in [Figure 16-11](#img_consoleDir).
  prefs: []
  type: TYPE_NORMAL
- en: For more information, you can look at the [official console specification](https://oreil.ly/osZhg).
  prefs: []
  type: TYPE_NORMAL
