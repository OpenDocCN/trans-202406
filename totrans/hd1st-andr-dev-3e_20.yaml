- en: 'Chapter 17\. Recycler View Navigation: *Pick a Card*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0705-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Some apps rely on the user selecting an item from a list.**'
  prefs: []
  type: TYPE_NORMAL
- en: And in this chapter, you’ll learn **how to make recycler views a core part of
    your app design** by **making their items clickable**. You’ll discover how to
    **implement recycler view navigation** by making the app navigate to a new screen
    each time the user clicks on a record. You’ll find out **how to show the user
    extra information** about their chosen record, and update it in the database.
    By the end of this chapter, you’ll have all the tools you need to **transform
    your awesome ideas into the app of your dreams**…
  prefs: []
  type: TYPE_NORMAL
- en: Recycler views can be used for navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two chapters, you learned how to build a recycler view that
    displays a scrollable list of data, and used `DiffUtil` to make it more efficient.
    But this isn’t the end of the story.
  prefs: []
  type: TYPE_NORMAL
- en: Recycler views are a major component of many Android apps because, in addition
    to displaying lists of data, you can use them to navigate through the app. When
    the user clicks on an item in the recycler view, you can make the app navigate
    to a new fragment, which displays further details of that record.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how this works, we’re going to change up the Tasks app so that when
    the user clicks on one of the tasks in its recycler view, it navigates to a new
    fragment. This fragment will display the record that’s been selected, and let
    the user update or delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0706-01.png)'
  prefs: []
  type: TYPE_IMG
- en: How the Tasks app is currently structured
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at how we need to change the Tasks app, let’s remind ourselves
    of its current structure.
  prefs: []
  type: TYPE_NORMAL
- en: The app is comprised of a single activity (`MainActivity`), which displays a
    fragment named `TasksFragment`. This fragment is the app’s main screen, and its
    layout includes a recycler view that displays a grid of tasks. The recycler view
    uses an adapter named `TaskItemAdapter`, and its items are arranged using the
    layout file.
  prefs: []
  type: TYPE_NORMAL
- en: '`TasksFragment` uses a view model named `TasksViewModel`. The view model is
    responsible for the fragment’s business logic, and gets its data from a Room database
    using an interface named `TaskDao`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how these components fit together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0707-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to make the recycler view navigate to a new fragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to update the Tasks app so that when the user clicks on a task
    in the recycler view, it displays a fragment named `EditTaskFragment`. Here’s
    what the new fragment will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0708-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, `EditTaskFragment` includes an edit text and a checkbox that
    let the user edit the task. The edit text displays the name of the task, and the
    checkbox shows whether the task has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fragment also includes an Update Task button, which, when clicked, updates
    the record in the database, and a Delete Task button, which deletes the record.
    When either of these are clicked, the app navigates back to `TasksFragment`, which
    displays an updated list of tasks in its recycler view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0708-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re going to build the new version of the app in the following three stages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Make items in the recycler view respond to clicks.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll update the app so that when we click on a task in the recycler view, its
    ID is displayed in a toast.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0709-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Navigate to EditTaskFragment when an item is clicked.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll create `EditTaskFragment`, and use the Navigation component to navigate
    to it when the user clicks on a task record. We’ll display the task’s ID in the
    new fragment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0709-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Display the task record in EditTaskFragment, and let the user update or delete
    the record.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll create a view model for `EditTaskFragment`, which will use the `TaskDao`
    interface to interact with the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0709-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![image](Images/f0709-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll begin by making the recycler view respond to clicks.
  prefs: []
  type: TYPE_NORMAL
- en: Make each item clickable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0710-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The first change we’re going to make to the Tasks app is to make it display
    a toast when the user clicks on one of the items in the recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: We can make each item respond to clicks by adding an `OnClickListener` to each
    item’s root view. To do this, we’ll call each item’s `setOnClickListener()` method
    immediately after each item’s data gets added to its layout.
  prefs: []
  type: TYPE_NORMAL
- en: The best place to add each `OnClickListener` is in the `TaskItemViewHolder`’s
    `bind()` method, since this is where the layout’s data binding variable gets set
    to a `Task` item. As you may recall, the `bind()` method gets called by `TaskItemAdapter`’s
    `onBindViewHolder()` method, which fires each time the recycler view needs to
    display an item’s data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to add an `OnClickListener` to the root view of each item’s
    layout; we’ll add this to *TaskItemAdapter.kt* a few pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0710-02.png)![image](Images/f0710-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you know how to add an `OnClickListener` to each item, let’s make it
    display a toast when an item is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Where should we create the toast?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display a toast each time an item’s clicked, we *could* simply add the following
    code (in bold) to the view holder’s `setOnClickListener()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0711-02.png)'
  prefs: []
  type: TYPE_IMG
- en: This approach, however, would mean that we’d be putting code that describes
    the app’s behavior in the view holder code. This code is responsible for binding
    data to each item’s layout, so it’s not an appropriate place for us to put this
    kind of code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the toast code to the view holder would also make the view holder code
    less flexible. It would mean that each time the user clicks on an item, it could
    only display a toast, and couldn’t be reused elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: So what’s the alternative?
  prefs: []
  type: TYPE_NORMAL
- en: We’ll make TasksFragment pass the toast code in a lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternative is to define the code each item needs to execute in `TasksFragment`,
    and pass it to `TaskItemViewHolder`—via `TaskItemAdapter`—in a lambda. Doing so
    means that the *fragment* controls what happens when an item is clicked instead
    of the view holder.
  prefs: []
  type: TYPE_NORMAL
- en: Before we look at the code, let’s run through how it will work.
  prefs: []
  type: TYPE_NORMAL
- en: How the code will work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s what the code we’re going to write will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TasksFragment will pass a lambda to TaskItemAdapter’s constructor.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The lambda includes the code to display a toast.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0712-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When the TaskItemAdapter’s onBindViewHolder() method is called, it calls
    the TaskItemViewHolder’s bind() method, and passes it the lambda.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0712-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The TaskItemViewHolder adds the lambda to each item’s OnClickListener.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks on each item (a `CardView`), it executes the lambda and
    displays the toast.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0712-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: So that’s how the code will work.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this, we need to update the `TasksFragment`, `TaskItemAdapter`,
    and `TaskItemViewHolder` code. We’ll begin by updating the `TaskItemAdapter` and
    `TaskItemViewHolder` code so that the adapter is able to accept the lambda, and
    pass it to the view holder.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll show you the code for this on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TaskItemAdapter.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the `TaskItemAdapter` and `TaskItemViewHolder` code; update *TaskItemAdapter.kt*
    to include all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0713-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll pass a lambda to TaskItemAdapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that `TaskItemAdapter` includes a lambda parameter in its constructor, we
    need to pass one to it in the `TasksFragment` code where it gets created.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may recall, `TasksFragment` creates a `TaskItemAdapter` object in its
    `onCreateView()` method, which it then assigns to the recycler view like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0714-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we want to display a toast each time an item in the recycler view is clicked,
    we can update this code so that it passes the following lambda to `TaskItemAdapter`’s
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0714-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The adapter passes the lambda to `TaskItemViewHolder`’s `bind()` method, which
    uses the lambda in the `OnClickListener` code it assigns to each item’s root view.
    When the user clicks on an item in the recycler view, the lambda is executed.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now learned everything that you need to know to make an item in the recycler
    view display a toast when it’s clicked. Let’s see what the full code for `TasksFragment`
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0714-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for TasksFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0715-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the updated `TasksFragment` code; make sure that the code in *TasksFragment.kt*
    includes all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0715-02.png)![image](Images/f0716-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s see what happens when the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fragment passes a lambda (named `clickListener`) to the adapter, telling
    it to display a toast when it’s executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0717-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment submits a List<Task> to the TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `List<Task>` contains an up-to-date list of records from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0717-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onCreateViewHolder() method is called for each item that
    needs to be displayed in the recycler view.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This creates a set of `TaskItemViewHolder`s.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0717-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter’s onBindViewHolder() method is called for each TaskItemViewHolder.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This calls the `TaskItemViewHolder`’s `bind()` method, passing it the item that
    was clicked and the `clickListener` lambda.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0718-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The TaskItemViewHolder’s bind() method adds an OnClickListener to the root
    view of each view holder’s layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, the root view is a `CardView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0718-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When the user clicks on an item in the recycler view, the OnClickListener
    registers the click.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It executes the `clickListener` lambda, which displays a toast.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0718-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment` displays a grid of cards in the recycler
    view as before. If we click on one of the tasks, the app displays its ID in a
    toast.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0719-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ve now learned how to make a recycler view’s items respond to click events.
    We’ll use this knowledge to make the app navigate to a new fragment when an item
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do this, try the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Adapter Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Bits and Pizzas app includes a recycler view that uses a layout named *pizza_item.xml*
    to display `Pizza` objects. The `Pizza` data class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The recycler view uses an adapter named `PizzaAdapter`, shown below. See if
    you can complete the code for this adapter so that when one of its items is clicked,
    it executes a lambda that’s passed to the adapter in its constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: The lambda should accept a `pizzaId` argument, and return `Unit`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0721-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Adapter Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Bits and Pizzas app includes a recycler view that uses a layout named *pizza_item.xml*
    to display `Pizza` objects. The `Pizza` data class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The recycler view uses an adapter named `PizzaAdapter`, shown below. See if
    you can complete the code for this adapter so that when one of its items is clicked,
    it executes a lambda that’s passed to the adapter in its constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: The lambda should accept a `pizzaId` argument, and return `Unit`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0722-01.png)![image](Images/f0723-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We want to use the recycler view to navigate to a new fragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0724-01.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, you’ve learned how to make items in a recycler view respond to click
    events. When the user clicks on a task in the Tasks app’s recycler view, for example,
    it displays a toast.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’re going to change this behavior so that when the user clicks on an
    item, the app navigates to a new fragment (which we’ll create) and displays the
    task’s ID. Here’s what the new version of the app will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0724-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To get this working, we’ll use the Navigation component to navigate to the new
    fragment, and the Safe Args plug-in to pass the fragment the task’s ID. This means
    that we needs to update the project and the app’s *build.gradle* files to include
    these components.
  prefs: []
  type: TYPE_NORMAL
- en: Update the project build.gradle file…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll begin by updating the project’s *build.gradle* file so that it specifies
    which version of the Navigation component we want to use, and adds a classpath
    for the Safe Args plug-in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open the file *Tasks/build.gradle*, and add the following lines
    (in bold) to the relevant sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0725-02.png)'
  prefs: []
  type: TYPE_IMG
- en: …then update the app build.gradle file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also need to add the Safe Args plug-in to the app’s *build.gradle* file,
    along with a dependency for the Navigation component.
  prefs: []
  type: TYPE_NORMAL
- en: Open the file *Tasks/app/build.gradle*, and add the following lines (in bold)
    to the appropriate sections
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0725-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve made these changes, click on the Sync Now option to sync the changes
    you’ve made with the rest of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve enabled the Navigation component and the Safe Args plug-in, let’s
    create the new fragment that we want the app to be able to navigate to.
  prefs: []
  type: TYPE_NORMAL
- en: Create EditTaskFragment…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to create a new fragment named `EditTaskFragment` that the app will
    navigate to when the user clicks an item in the recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, highlight the *com.hfad.tasks* package in the *app/src/main/java*
    folder, then choose File→New→Fragment→Fragment (Blank). Name the fragment “EditTaskFragment”,
    name its layout “fragment_edit_task”, and make sure the language is set to Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0726-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll update the code for `EditTaskFragment` and its layout a few pages ahead.
    Before that, let’s create a navigation graph that will tell the app how to navigate
    between the app’s fragments.
  prefs: []
  type: TYPE_NORMAL
- en: …and create a navigation graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll add a navigation graph to the project in the same way that we did for
    the other apps we created.
  prefs: []
  type: TYPE_NORMAL
- en: Select the *Tasks/app/src/main/res* folder in the project explorer, and then
    choose File→New→Android Resource File. When prompted, enter a file name of “nav_graph”,
    choose a resource type of “Navigation”, and click on the OK button. This creates
    a navigation graph named *nav_graph.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0726-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The navigation graph needs to describe how the user will navigate between `TasksFragment`
    and `EditTaskFragment`. Here’s how the navigation needs to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The app displays TasksFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the first fragment the user needs to see, so it needs to be the navigation
    graph’s start destination.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0726-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When the user clicks an item in TasksFragment’s recycler view, the app navigates
    to EditTaskFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TasksFragment` will pass `EditTaskFragment` a `Long` parameter containing
    the task ID for the clicked item.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**When the user clicks a button in EditTaskFragment (which we’ll add to the
    fragment later in the chapter), the app navigates back to TasksFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0726-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We’ll show you the full code for this on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Update the navigation graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full code for the navigation graph; update *nav_graph.xml* to include
    the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0727-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let’s link the navigation graph to `MainActivity` so that it displays
    each fragment when we navigate to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add a NavHostFragment to MainActivity’s layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To link the navigation graph we just created to `MainActivity`, we need to add
    a navigation host to its layout, and tell it to use *nav_graph.xml* as its navigation
    graph. This will let `MainActivity` display the correct fragment as the user navigates
    through the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0728-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We’ll add the navigation host to the layout in the same way that we did in
    previous chapters: by adding a `NavHostFragment` to *activity_main.xml*’s `FragmentContainerView`.
    Update *activity_main.xml* so that it includes the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0728-03.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need to change for `MainActivity`’s layout. Next, let’s
    make `TasksFragment` navigate to `EditTaskFragment` when the user clicks an item
    in its recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: Make TasksFragment navigate to EditTaskFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each time the user clicks on an item in `TasksFragment`’s recycler view, we
    want the app to navigate to `EditTaskFragment`, passing it the ID of the `Task`
    that was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0729-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One way of doing this would be to update the lambda that `TasksFragment` passes
    to its `TaskItemAdapter` so that it includes all the necessary navigation code
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0729-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this uses the `TasksFragmentDirections` class (generated by
    the Safe Args plug-in) to pass the item’s task ID to `EditTaskFragment`, and navigate
    to that fragment.
  prefs: []
  type: TYPE_NORMAL
- en: This approach, however, means that we’re adding business logic—deciding when
    `TasksFragment` should navigate to `EditTaskFragment`—to the fragment code, instead
    of adding it to `TasksViewModel`. As you learned in [Chapter 13](ch13.xhtml#data_bindingcolon_building_smart_layouts),
    the view model code should make this kind of decision instead of the fragment.
  prefs: []
  type: TYPE_NORMAL
- en: To address this, we’ll use a similar approach to the one we used for the Guessing
    Game app in [Chapter 13](ch13.xhtml#data_bindingcolon_building_smart_layouts).
    We’ll add a new live data property to `TasksViewModel`, which will hold the ID
    for the task the user clicks on. When this property changes value, `TasksFragment`
    will respond by navigating to `EditTaskFragment`, passing it the ID.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0729-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a new property to TasksViewModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll begin by adding a new live data property to `TasksViewModel` that specifies
    the task ID that `TasksFragment` needs to pass to `EditTaskFragment`. We’ll name
    this property `navigateToTask`, and define it using the following code (we’ll
    add this to *TasksViewModel.kt* on the next page):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0730-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `navigateToTask` property uses a mutable backing property
    marked as `private`, which means that only `TasksViewModel` can set it. This protects
    the property from unwanted updates by other classes.
  prefs: []
  type: TYPE_NORMAL
- en: Add methods to update the new property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each time the user clicks on a task in the recycler view, we want `TasksFragment`
    to navigate to `EditTaskFragment`, and pass it the task’s ID.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this, we’ll add two methods to the `TasksViewModel`—`onTaskClicked()`
    and `onTaskNavigated()`—which will be used to set the value of `navigateToTask`’s
    backing property. `onTaskClicked()` will set the property to the task’s ID, and
    `onTaskNavigated()` will set it to `null`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0730-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the code for the two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0730-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are all the changes we need to make to `TasksViewModel`. We’ll show you
    the full code on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TasksViewModel.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the updated `TasksViewModel` code; make sure that the code in *TasksViewModel.kt*
    includes all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0731-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve updated `TasksViewModel`, let’s see what changes we need to make
    to the `TasksFragment` code.
  prefs: []
  type: TYPE_NORMAL
- en: Make TasksFragment navigate to EditTaskFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to update the code for `TasksFragment` so that when the user clicks
    on a task, it navigates to `EditTaskFragment`, passing it the task’s ID.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we’ll call `TasksViewModel`’s `onTaskClicked()` method when the
    user clicks on a task, and navigate to `EditTaskFragment` when its `navigateToTask`
    property gets updated to a new task ID.
  prefs: []
  type: TYPE_NORMAL
- en: Call onTaskClicked() when the user clicks a task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To call the `onTaskClicked()` method, we’ll pass the lambda below (in bold)
    to `TaskItemAdapter`’s constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0732-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each time the user clicks on a task, the lambda will get executed: it will
    call `TasksViewModel`’s `onTaskClicked()` method, setting the `navigateToTask`
    property to the task’s ID.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0732-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigate to EditTaskFragment when navigateToTask gets updated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make `TasksFragment` navigate to `EditTaskFragment`, we’ll make it observe
    `TaskViewModel`’s `navigateToTask` property. When this property is set to a `Long`
    task ID, the fragment will navigate to `EditTaskFragment`, passing it the ID.
    We’ll then set the `navigateToTask` property back to null by calling the view
    model’s `onTaskNavigated()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0732-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s update the `TasksFragment` code.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for TasksFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0733-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the updated `TasksFragment` code; make sure that the code in includes
    all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0733-02.png)![image](Images/f0734-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve now updated the code for `TasksViewModel` and `TasksFragment` so that
    when the user clicks on a task in the recycler view, `TasksFragment` navigates
    to `EditTaskFragment` and passes it the task’s ID.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do is display the task ID in `EditTaskFragment`’s
    layout. Let’s do this now.
  prefs: []
  type: TYPE_NORMAL
- en: Make EditTaskFragment display the task ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to make `EditTaskFragment` display the task ID by updating the fragment’s
    layout and Kotlin code. We’ll add a text view to the layout, and then use Kotlin
    code to retrieve the task’s ID and add it to the text view.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll begin by adding the text view to the fragment’s layout; update *fragment_edit_task.xml*
    so that it matches the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0735-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We also need to update EditTaskFragment.kt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve added a text view to `EditTaskFragment`’s layout, we need to
    set its text to the task ID. To do this, we’ll add the following code to the fragment’s
    `onCreateView()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0735-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this uses the `EditTaskFragmentArgs` class (generated by the
    Safe Args plug-in) to get the value of the `taskId` argument that’s been passed
    to `EditTaskFragment`. It then uses this to set the text view’s text.
  prefs: []
  type: TYPE_NORMAL
- en: Let see what the full code for `EditTaskFragment` looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0735-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for EditTaskFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full code for `EditTaskFragment`; replace the code in *EditTaskFragment.kt*
    so that it matches the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0736-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s go through what happens when the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fragment passes a `clickListener` lambda to the adapter, telling it to call
    `TasksViewModel`’s `onTaskClicked()` method when it’s executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0737-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment submits a List<Task> to the TaskItemAdapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `List<Task>` contains an up-to-date list of records from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0737-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TaskItemAdapter creates a set of TaskItemViewHolders, and an OnClickListener
    is set to each view holder’s root view.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, the root view is a `CardView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0737-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**When the user clicks on a task in the recycler view, the OnClickListener
    registers the click, and executes the lambda.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It calls `TasksViewModel`’s `onTaskClicked()` method, which sets its `_navigateToTask`
    property to the ID of the task that was clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0738-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**TasksFragment is notified that TasksViewModel’s navigateToTask property—which
    uses _navigateToTask as its backing property—has been updated.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It navigates to `EditTaskFragment`, passing it the value of the `navigateToTask`
    property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0738-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**EditTaskFragment gets the value of the taskId that’s been passed to it, and
    displays it in its layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0738-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment` displays a grid of cards in the recycler
    view as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on one of the tasks, the app navigates to `EditTaskFragment`,
    which displays the task’s ID.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0739-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ve now learned how to use a recycler view to navigate to a new fragment,
    and tell it which item was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll update the Tasks app so that when the user clicks on an item, `EditTaskFragment`
    displays the task’s complete details, and lets her update or delete the record
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: We want to use EditTaskFragment to update task records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0740-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve now updated the Tasks app so that when the user clicks on a task in the
    recycler view, it navigates to `EditTaskFragment`, which displays the task’s ID.
  prefs: []
  type: TYPE_NORMAL
- en: What we *really* want, however, is for `EditTaskFragment` to display the complete
    task record, and let the user update or delete it in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we’re going to update `EditTaskFragment` so that it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0740-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The new version of the fragment will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When the user clicks on a task in the recycler view, EditTaskFragment displays
    its details.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It gets the task record from the database, and displays the task name and whether
    it has been completed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**When the user updates the task’s details and clicks on the Update Task button,
    the changes are saved.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It updates the record in the database, and navigates back to `TasksFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**When the user clicks on the Delete Task button, the task is deleted.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It deletes the task record from the database, and navigates to `TasksFragment`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each of these actions, the fragment needs to interact with the app’s Room
    database, which means that it needs to use the `TaskDao` interface we defined
    in [Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view). Before we update
    the app, let’s have a quick reminder of what `TaskDao` does.
  prefs: []
  type: TYPE_NORMAL
- en: Use TaskDao to interact with database records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in [Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view),
    you interact with records held in a Room database using a DAO interface. The Tasks
    app, for example, includes a DAO named `TaskDao` that lets us interact with task
    records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a reminder of what the `TaskDao` code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0741-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the interface includes methods to get one or more records from
    the database, and suspendable coroutines to insert, update, and delete records
    in a background thread.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll create a view model to access TaskDao’s methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to use `TaskDao`’s methods to let `EditTaskFragment` get a task record
    from the database, update its details, or delete it. Instead of adding the code
    for this to `EditTaskFragment`, we’ll create a new view model (named `EditTaskViewModel`),
    which will take care of the fragment’s business logic and data.`EditTaskViewModel`
    will access `TaskDao`’s methods, and pass the results to `EditTaskFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go and create `EditTaskViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0741-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Create EditTaskViewModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create `EditTaskViewModel`, highlight the *com.hfad.tasks* package in the
    *app/src/main/java* folder, then go to File→New→Kotlin Class/File. Name the file
    “EditTaskViewModel” and choose the Class option.
  prefs: []
  type: TYPE_NORMAL
- en: The view model needs to get a task record…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing that `EditTaskViewModel` needs to do is get a task record from
    the app’s database so that it can be displayed in `EditTaskFragment`’s layout.
    To enable this, we’ll pass the view model two things in its constructor: a task
    ID to tell it which task to get, and a `TaskDao` object that it will use to interact
    with the database.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0742-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll also add a `LiveData<Task>` property to the view model (named `task)`,
    which we’ll set using `TaskDao`’s `get()` method. This will set the property to
    the task record the user wants to see.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to do this; we’ll show you the full `EditTaskViewModel` code
    a couple pages ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0742-03.png)'
  prefs: []
  type: TYPE_IMG
- en: …and include methods to update and delete the task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll also add `updateTask()` and `deleteTask()` methods to `EditTaskViewModel`,
    which `EditTaskFragment` will use to update or delete task records. These methods
    will call `TaskDao`’s `update()` and `delete()` coroutines like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0742-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we add this code to `EditTaskViewModel`, let’s see what else the view
    model code needs to do.
  prefs: []
  type: TYPE_NORMAL
- en: EditTaskViewModel will tell EditTaskFragment when to navigate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final thing `EditTaskViewModel` needs to do is tell `EditTaskFragment` when
    it should navigate back to `TasksFragment`. To enable this, we’ll add a new `LiveData<Boolean>`
    property (named `navigateToList`) to the view model, along with a backing property
    named `_navigateToList`. `EditTaskFragment` will observe `navigateToList` so that
    when it’s value becomes *true*, it navigates to `TasksFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll set `_navigateToList` to *true* in the view model’s `updateTask()` and
    `deleteTask()` methods. This means that as soon as a task record has been updated
    or deleted, the app will navigate to `TasksFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0743-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the updated code for these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0743-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll also add a new method to `EditTaskViewModel` named `onNavigatedToList()`,
    which sets `_navigateToList` back to *false*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0743-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you the entire code for `EditTaskViewModel` on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for EditTaskViewModel.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full `EditTaskViewModel` code; make sure that the code in *EditTaskViewModel.kt*
    includes all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0744-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s all the code we need for `EditTaskViewModel`. So what’s next?
  prefs: []
  type: TYPE_NORMAL
- en: EditTaskViewModel needs a view model factory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0745-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we’ll do is define a view model factory named `EditTaskViewModelFactory`,
    which `EditTaskFragment` will use to create an instance of `EditTaskViewModel`.
    As you learned in [Chapter 11](ch11.xhtml#view_modelscolon_model_behavior), a
    view model factory is needed for all view models that—like `EditTaskViewModel`—don’t
    include a no-argument constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0745-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Create EditTaskViewModelFactory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create the factory, highlight the *com.hfad.tasks* package in the *app/src/main/java*
    folder, then go to File→New→Kotlin Class/File. Name the file “EditTaskViewModelFactory”
    and choose the Class option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created the file, update the code in *EditTaskViewModelFactory.kt*
    so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0745-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we’ve written the code for `EditTaskViewModel` and its factory, let’s
    update the code for `EditTaskFragment` and its layout. We’ll begin with the layout.
  prefs: []
  type: TYPE_NORMAL
- en: fragment_edit_task.xml needs to display the task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to update *fragment_edit_task.xml* so that it includes an edit text
    and a checkbox, which will be used to display `Task` data. We’ll use data binding
    to bind these views to the `taskName` and `taskDone` properties in `EditTaskViewModel`’s
    `task`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also add two buttons to the layout, which will call `EditTaskViewModel`’s
    `deleteTask()` and `updateTask()` methods, and let the user update or delete the
    task record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for the layout; update the code for *fragment_edit_task.xml*
    so that it includes these changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0746-01.png)![image](Images/f0747-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to update EditTaskFragment.kt too
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final change that we need to make to the Tasks app is to update `EditTaskFragment`’s
    Kotlin code. The code needs to do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set the layout’s viewModel data binding variable.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll set it to an instance of `EditTaskViewModel`, which the fragment will
    create.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Set the layout’s lifecycle owner.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is so that the layout can interact with live data properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Observe the view model’s navigateToList property.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When this becomes *true*, the fragment will navigate to `TasksFragment`, and
    call `EditTaskViewModel`’s `onNavigatedToList()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you’re already familiar with all the code to do this, we’ll show you the
    updated code for `EditTaskFragment` on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for EditTaskFragment.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the full `EditTaskFragment` code: make sure that the code in *EditTaskFragment.kt*
    includes all the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0748-02.png)![image](Images/f0749-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s everything that we need to make `EditTaskFragment` display a `Task` in
    its layout, and let the user update or delete it. Let’s go through what the code
    does when it runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the code runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1.png) **When the user clicks on a task, TasksFragment navigates
    to EditTaskFragment, passing it the task ID.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0750-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/2.png) **EditTaskFragment gets a reference to its EditTaskViewModel
    object.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0750-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/3.png) **EditTaskViewModel calls the TaskDao object’s get()
    method, passing it the task ID.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0750-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/4.png) **The TaskDao’s get() method returns a LiveData<Task>,
    which is assigned to EditTaskViewModel’s task property.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0750-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/5a.png) **When the user clicks on the Update Task button,
    it calls EditTaskViewModel’s updateTask() method.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method uses `TaskDao`’s `update()` method to update the record in the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0751-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/5b.png) **When the user clicks on the Delete Task button,
    it calls EditTaskViewModel’s deleteTask() method.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method uses `TaskDao`’s `delete()` method to delete the record.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0751-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/6.png) **The app navigates to TasksFragment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any changes that have been made to the task record are reflected in the recycler
    view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0751-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, `TasksFragment` displays a grid of cards in the recycler
    view as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on one of the tasks, the app navigates to `EditTaskFragment`,
    which displays the task’s record.
  prefs: []
  type: TYPE_NORMAL
- en: When we make changes to the task and click on the Update Task button, the changes
    are saved to the database and displayed in `TasksFragment`’s recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0752-02.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s what happens when we try to update a task. What about when we delete
    one?
  prefs: []
  type: TYPE_NORMAL
- en: When we click on a task, the app navigates to `EditTaskFragment` and displays
    the task record as before.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Delete Task button, the record is deleted from the database.
    When the app navigates to `TasksFragment`, the record no longer appears in the
    recycler view.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0753-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now learned how to build an app that uses a recycler
    view to navigate to records, which you can then update or delete. This technique
    gives you a powerful and flexible way of organizing the data in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/tools.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 17](#recycler_view_navigationcolon_pick_a_car) under
    your belt and now you’ve added recycler view navigation to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0754-01.png)'
  prefs: []
  type: TYPE_IMG
