["```\ntry {\n  turnOvenOn();\n  x.bake();\n} catch (BakingException e) {\n  e.printStackTrace();\n} finally {\n  turnOvenOff();\n}\n```", "```\ntry {\n  turnOvenOn();\n  x.bake();\n  turnOvenOff();\n} catch (BakingException e) {\n  e.printStackTrace();\n  turnOvenOff();\n}\n```", "```\n    main() calls foo()\n\n    foo() calls doLaundry()\n\n    doLaundry() is\n    running and throws a\n    ClothingException\n    ```", "```\n    doLaundry() pops off the\n    stack immediately, and\n    the exception is thrown\n    back to foo().\n\n    But foo() doesn’t have a\n    try/catch, so...\n    ```", "```\n    foo() pops off the\n    stack, and the excep-\n    tion is thrown back\n    to main(). But main()\n    doesn’t have a try/\n    catch, so the excep-\n    tion is thrown back to…\n    who? What? There’s\n    nobody left but the\n    JVM, and it’s thinking,\n    “Don’t expect ME to\n    get you out of this.”\n    ```", "```\n    Sequencer player = MidiSystem.getSequencer();\n    player.open();\n    ```", "```\n    Sequence seq = new Sequence(timing,4);\n    ```", "```\n    Track t = seq.createTrack();\n    ```", "```\n    t.add(myMidiEvent1);\n    player.setSequence(seq);\n    ```", "```\n    msg.setMessage(144, 1, `**20**`, 100);\n    ```", "```\n    msg.setMessage(128, 1, 44, 100);\n    MidiEvent noteOff = new MidiEvent(b, **3** );\n    ```", "```\nclass MyEx extends Exception { }\n\npublic class ExTestDrive {\n  public static void main(String[] args) {\n    String test = args[0];\n    try {\n      System.out.print(\"t\");\n      doRisky(test);\n      System.out.print(\"o\");\n    } catch (MyEx e) {\n      System.out.print(\"a\");\n    } finally {\n      System.out.print(\"w\");\n    }\n    System.out.println(\"s\");\n  }\n\n  static void doRisky(String t) throws MyEx {\n    System.out.print(\"h\");\n\n    if (\"yes\".equals(t)) {\n      throw new MyEx();\n    }\n\n    System.out.print(\"r\");\n  }\n}\n```"]