["```\n<button>Like</button>\n```", "```\n<button id=\"likeButton\">Like</button>\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  // do something\n});\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  likeButton.textContent = \"Liked\";\n});\n```", "```\n<button id=\"likeButton\" data-liked=\"false\">Like</button>\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  const liked = likeButton.getAttribute(\"data-liked\") === \"true\";\n  likeButton.setAttribute(\"data-liked\", !liked);\n  likeButton.textContent = liked ? \"Like\" : \"Liked\";\n});\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  var liked = likeButton.getAttribute(\"data-liked\") === \"true\";\n\n  // communicate over the network\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", \"/like\", true);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\n  xhr.onload = function () {\n    if (xhr.status >= 200 && xhr.status < 400) {\n      // Success!\n      likeButton.setAttribute(\"data-liked\", !liked);\n      likeButton.textContent = liked ? \"Like\" : \"Liked\";\n    } else {\n      // We reached our target server, but it returned an error\n      console.error(\"Server returned an error:\", xhr.statusText);\n    }\n  };\n\n  xhr.onerror = function () {\n    // There was a connection error of some sort\n    console.error(\"Network error.\");\n  };\n\n  xhr.send(JSON.stringify({ liked: !liked }));\n});\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  const liked = likeButton.getAttribute(\"data-liked\") === \"true\";\n\n  // communicate over the network\n  fetch(\"/like\", {\n    method: \"POST\",\n    body: JSON.stringify({ liked: !liked }),\n  }).then(() => {\n    likeButton.setAttribute(\"data-liked\", !liked);\n    likeButton.textContent = liked ? \"Like\" : \"Liked\";\n  });\n});\n```", "```\n<button id=\"likeButton\" data-liked=\"false\" data-failed=\"false\">Like</button>\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  const liked = likeButton.getAttribute(\"data-liked\") === \"true\";\n\n  // communicate over the network\n  fetch(\"/like\", {\n    method: \"POST\",\n    body: JSON.stringify({ liked: !liked }),\n  })\n    .then(() => {\n      likeButton.setAttribute(\"data-liked\", !liked);\n      likeButton.textContent = liked ? \"Like\" : \"Liked\";\n    })\n    .catch(() => {\n      likeButton.setAttribute(\"data-failed\", true);\n      likeButton.textContent = \"Failed\";\n    });\n});\n```", "```\n<button\n  id=\"likeButton\"\n  data-pending=\"false\"\n  data-liked=\"false\"\n  data-failed=\"false\"\n>\n  Like\n</button>\n```", "```\nconst likeButton = document.getElementById(\"likeButton\");\nlikeButton.addEventListener(\"click\", () => {\n  const liked = likeButton.getAttribute(\"data-liked\") === \"true\";\n  const isPending = likeButton.getAttribute(\"data-pending\") === \"true\";\n\n  likeButton.setAttribute(\"data-pending\", \"true\");\n  likeButton.setAttribute(\"disabled\", \"disabled\");\n\n  // communicate over the network\n  fetch(\"/like\", {\n    method: \"POST\",\n    body: JSON.stringify({ liked: !liked }),\n  })\n    .then(() => {\n      likeButton.setAttribute(\"data-liked\", !liked);\n      likeButton.textContent = liked ? \"Like\" : \"Liked\";\n      likeButton.setAttribute(\"disabled\", null);\n    })\n    .catch(() => {\n      likeButton.setAttribute(\"data-failed\", \"true\");\n      likeButton.textContent = \"Failed\";\n    })\n    .finally(() => {\n      likeButton.setAttribute(\"data-pending\", \"false\");\n    });\n});\n```", "```\n<ul id=\"list-parent\"></ul>\n\n<form id=\"add-item-form\" action=\"/api/add-item\" method=\"POST\">\n  <input type=\"text\" id=\"new-list-item-label\" />\n  <button type=\"submit\">Add Item</button>\n</form>\n```", "```\n(function myApp() {\n  var listItems = [\"I love\", \"React\", \"and\", \"TypeScript\"];\n  var parentList = document.getElementById(\"list-parent\");\n  var addForm = document.getElementById(\"add-item-form\");\n  var newListItemLabel = document.getElementById(\"new-list-item-label\");\n\n  addForm.onsubmit = function (event) {\n    event.preventDefault();\n    listItems.push(newListItemLabel.value);\n    renderListItems();\n  };\n\n  function renderListItems() {\n    for (i = 0; i < listItems.length; i++) {\n      var el = document.createElement(\"li\");\n      el.textContent = listItems[i];\n      parentList.appendChild(el);\n    }\n  }\n\n  renderListItems();\n})();\n```", "```\n<button id=\"likeButton\">Like</button>\n```", "```\n$(\"#likeButton\").on(\"click\", function () {\n  this.prop(\"disabled\", true);\n  fetch(\"/like\", {\n    method: \"POST\",\n    body: JSON.stringify({ liked: this.text() === \"Like\" }),\n  })\n    .then(() => {\n      this.text(this.text() === \"Like\" ? \"Liked\" : \"Like\");\n    })\n    .catch(() => {\n      this.text(\"Failed\");\n    })\n    .finally(() => {\n      this.prop(\"disabled\", false);\n    });\n});\n```", "```\ntest(\"LikeButton\", () => {\n  const $button = $(\"#likeButton\");\n  expect($button.text()).toBe(\"Like\");\n  $button.trigger(\"click\");\n  expect($button.text()).toBe(\"Liked\");\n});\n```", "```\nconst LikeButton = Backbone.View.extend({\n  tagName: \"button\",\n  attributes: {\n    type: \"button\",\n  },\n  events: {\n    click: \"onClick\",\n  },\n  initialize() {\n    this.model.on(\"change\", this.render, this);\n  },\n  render() {\n    this.$el.text(this.model.get(\"liked\") ? \"Liked\" : \"Like\");\n    return this;\n  },\n  onClick() {\n    fetch(\"/like\", {\n      method: \"POST\",\n      body: JSON.stringify({ liked: !this.model.get(\"liked\") }),\n    })\n      .then(() => {\n        this.model.set(\"liked\", !this.model.get(\"liked\"));\n      })\n      .catch(() => {\n        this.model.set(\"failed\", true);\n      })\n      .finally(() => {\n        this.model.set(\"pending\", false);\n      });\n  },\n});\n\nconst likeButton = new LikeButton({\n  model: new Backbone.Model({\n    liked: false,\n  }),\n});\n\ndocument.body.appendChild(likeButton.render().el);\n```", "```\ntest(\"LikeButton initial state\", () => {\n  const likeButton = new LikeButton({\n    model: new Backbone.Model({\n      liked: false, // Initial state set to not liked\n    }),\n  });\n  likeButton.render(); // Ensure render is called to reflect the initial state\n  // Check the text content to be \"Like\" reflecting the initial state\n  expect(likeButton.el.textContent).toBe(\"Like\");\n});\n```", "```\ntest(\"LikeButton\", async () => {\n  // Mark the function as async to handle promise\n  const likeButton = new LikeButton({\n    model: new Backbone.Model({\n      liked: false,\n    }),\n  });\n  expect(likeButton.render().el.textContent).toBe(\"Like\");\n\n  // Mock fetch to prevent actual HTTP request\n  global.fetch = jest.fn(() =>\n    Promise.resolve({\n      json: () => Promise.resolve({ liked: true }),\n    })\n  );\n\n  // Await the onClick method to ensure async operations are complete\n  await likeButton.onClick();\n\n  expect(likeButton.render().el.textContent).toBe(\"Liked\");\n\n  // Optionally, restore fetch to its original implementation if needed\n  global.fetch.mockRestore();\n});\n```", "```\nfunction createViewModel({ liked }) {\n  const isPending = ko.observable(false);\n  const hasFailed = ko.observable(false);\n  const onClick = () => {\n    isPending(true);\n    fetch(\"/like\", {\n      method: \"POST\",\n      body: JSON.stringify({ liked: !liked() }),\n    })\n      .then(() => {\n        liked(!liked());\n      })\n      .catch(() => {\n        hasFailed(true);\n      })\n      .finally(() => {\n        isPending(false);\n      });\n  };\n  return {\n    isPending,\n    hasFailed,\n    onClick,\n    liked,\n  };\n}\n\nko.applyBindings(createViewModel({ liked: ko.observable(false) }));\n```", "```\n<button\n  data-bind=\"click: onClick, text: liked ? 'Liked' : isPending ? [...]\n></button>\n```", "```\ntest(\"LikeButton\", () => {\n  const viewModel = createViewModel({ liked: ko.observable(false) });\n  expect(viewModel.liked()).toBe(false);\n  viewModel.onClick();\n  expect(viewModel.liked()).toBe(true);\n});\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script\n    src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\">\n    </script>\n  </head>\n  <body ng-app=\"\">\n    <p>Name: <input type=\"text\" ng-model=\"name\" /></p>\n    <p ng-if=\"name\">Hello, {{name}}!</p>\n  </body>\n</html>\n```", "```\nvar app = angular.module(\"myApp\", [\n  \"ngRoute\",\n  \"appRoutes\",\n  \"userCtrl\",\n  \"userService\",\n]);\n\nvar userCtrl = angular.module(\"userCtrl\", []);\nuserCtrl.controller(\"UserController\", function ($scope) {\n  $scope.message = \"Hello from UserController\";\n});\n\nvar userService = angular.module(\"userService\", []);\nuserService.factory(\"User\", function ($http) {\n  //...\n});\n```", "```\nvar app = angular.module(\"myApp\", []);\n\napp.controller(\"myController\", function ($scope, myService) {\n  $scope.greeting = myService.sayHello();\n});\n\napp.factory(\"myService\", function () {\n  return {\n    sayHello: function () {\n      return \"Hello, World!\";\n    },\n  };\n});\n```", "```\nfunction MyList() {\n  const [items, setItems] = useState([\"I love\"]);\n\n  return (\n    <div>\n      <ul>\n        {items.map((i) => (\n          <li key={i /* keep items unique */}>{i}</li>\n        ))}\n      </ul>\n      <NewItemForm onAddItem={(newItem) => setItems([...items, newItem])} />\n    </div>\n  );\n}\n```", "```\nimport React, { useState } from \"react\";\n\nfunction LikeButton() {\n  const [likes, setLikes] = useState(0);\n\n  function handleLike() {\n    setLikes(likes + 1);\n  }\n\n  return (\n    <div>\n      <button onClick={handleLike}>Like</button>\n      <p>{likes} Likes</p>\n    </div>\n  );\n}\n\nexport default LikeButton;\n```", "```\n{\n  $$typeof: Symbol.for('react.element'),\n  type: 'div',\n  props: {},\n  children: [\n    {\n      $$typeof: Symbol.for('react.element'),\n      type: 'button',\n      props: { onClick: handleLike },\n      children: ['Like']\n    },\n    {\n      $$typeof: Symbol.for('react.element'),\n      type: 'p',\n      props: {},\n      children: [0, ' Likes']\n    }\n  ]\n}\n```", "```\n{\n  type: 'div',\n  props: {},\n  children: [\n    {\n      type: 'button',\n      props: { onClick: handleLike },\n      children: ['Like']\n    },\n    {\n      type: 'p',\n      props: {},\n      children: [1, ' Likes']\n    }\n  ]\n}\n```", "```\n// Example of an action object\n{\n  type: 'ADD_TODO',\n  text: 'Learn Flux Architecture'\n}\n```", "```\n// Example of dispatching an action\nDispatcher.dispatch(action);\n```", "```\n// Example of a store\nclass TodoStore extends EventEmitter {\n  constructor() {\n    super();\n    this.todos = [];\n  }\n\n  handleActions(action) {\n    switch (action.type) {\n      case \"ADD_TODO\":\n        this.todos.push(action.text);\n        this.emit(\"change\");\n        break;\n      default:\n      // no op\n    }\n  }\n}\n```"]