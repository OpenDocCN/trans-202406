- en: Foreword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Containers are ubiquitous. From local development, to continuous integration,
    to managing large-scale production workloads, containers are everywhere. Why did
    this come about, where is it going, and what do you, the reader, need to know
    about this revolution that has taken over our industry?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容器无处不在。从本地开发到持续集成，再到管理大规模生产工作负载，容器随处可见。这一现象是如何产生的？它将走向何方？作为读者，你需要了解这场已经占领我们行业的革命的相关信息。
- en: Many older technologies offer the promise of “write once, run anywhere.” However,
    not all runtimes offered this facility, and even those that did still required
    the runtime (and any additional dependencies) to be available in order for an
    application to run. Containers offer the promise of “build once, run anywhere.”
    They allow you to package your applications, the runtime required to run it, configuration
    files, and any and all file dependencies it needs into one artifact. As long as
    you have a container runtime on the target machine, your application just works.
    This allows your infrastructure to be truly application agnostic. “It works on
    my machine,” begone!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多旧技术提供了“一次编写，到处运行”的承诺。然而，并非所有的运行时都提供了这种功能，即使有的也仍然需要运行时（和任何额外的依赖项）可用才能运行应用程序。容器提供了“构建一次，到处运行”的承诺。它们允许您将应用程序、运行该应用程序所需的运行时、配置文件以及所有文件依赖项打包到一个构件中。只要目标机器上有容器运行时，您的应用程序就可以正常工作。这使得您的基础设施真正实现了应用程序无关性。“它在我的电脑上可以运行”的问题已经不复存在！
- en: Containers offer a standard application programming interface (API) to manage
    the lifecycle of a container and the applications packaged within the container.
    This API provides a homogenous interface to an otherwise heterogeneous deployment
    landscape, relieving operations teams from having to know the nitty-gritty of
    deploying and running applications and, consequently, being able to focus on the
    what they do best—managing infrastructure, enforcing security and compliance,
    and keeping the lights on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 容器提供了标准的应用程序编程接口（API）来管理容器的生命周期及容器中打包的应用程序。这个API为本来异构的部署环境提供了一个统一的接口，使运维团队不再需要了解部署和运行应用程序的细节，从而能够集中精力做他们最擅长的事情——管理基础设施、执行安全和合规性，并保持系统运行。
- en: This interface also forms the basis for a ton of innovation. Container orchestrators
    like Kubernetes and Nomad leverage this control plane to raise the level of abstraction,
    making it easier to manage containerized workflows at scale. Service mesh technologies,
    like Istio, work hand in glove with orchestrators, decoupling cross-cutting concerns
    like service discovery and security from the application stack.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口也为大量创新奠定了基础。像Kubernetes和Nomad这样的容器编排器利用这个控制平台来提升抽象层级，使得在规模化管理容器化工作流程变得更加容易。服务网格技术，如Istio，与编排器密切合作，将服务发现和安全等横切关注点与应用程序栈解耦。
- en: All the benefits of a standard interface also flow upstream, making the daily
    lives of developers easier. A single command can produce an entire development
    environment. Within continuous integration (CI), containers can be easily spun
    up to house databases, queues, or whatever dependencies your application needs
    to allow for integration, smoke, and end-to-end tests to check and verify your
    work. And finally, the portability of containers allows development teams to take
    ownership of their work in production, making many facets of DevOps a reality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标准接口的好处也向上游传递，使开发者的日常工作变得更加轻松。一条命令可以生成整个开发环境。在持续集成（CI）中，容器可以轻松启动以容纳数据库、队列或应用程序所需的任何依赖项，以进行集成、冒烟和端到端测试，以检查和验证您的工作。最后，容器的可移植性使得开发团队能够在生产环境中拥有自己的作品，使得DevOps的许多方面成为现实。
- en: In a world where runtimes upgrade major versions regularly, teams and organizations
    are polyglot, DevOps practices like blue-green and canary releases are the norm,
    and scale is unprecedented, the technology that teams throughout the world are
    using to build and deploy their applications is containers. Containers are no
    longer new or novel—rather, they represent the rule of how organizations are packaging
    and deploying applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时经常更新主要版本、团队和组织使用多种编程语言、蓝绿部署和金丝雀发布等DevOps实践已经成为常态，规模空前的今天，全球各地团队用来构建和部署应用程序的技术正是容器。容器不再是新鲜事物或新奇技术，而是代表了组织打包和部署应用程序的基本规则。
- en: However, working with containers isn’t easy. Having used containers for almost
    a decade, and having spent time teaching it to audiences around the world, I can
    attest to how nuanced this subject is.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用容器并不容易。作为一个几乎十年来使用容器，并且在全球各地教授容器技术的人，我可以证明这个主题是多么细腻微妙。
- en: Sean and Karl have distilled years of experience into a highly readable, yet
    comprehensive guide to using containers with Docker. Everything you need to get
    started and be productive with Docker can be found within the pages of this book—from
    installation, to understanding how to use and build images, to working with containers,
    introspecting builds and the runtime, as well as productionizing containers, can
    be all found here.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Sean和Karl将多年的经验融入到了一本非常易读且全面的使用Docker的指南中。您可以在这本书的页面中找到一切入门和生产化使用Docker所需的一切内容——从安装，理解如何使用和构建镜像，到处理容器，审视构建和运行时，以及将容器投入生产。
- en: And that’s not all—Sean and Karl aren’t afraid to dive into microscopic details—elaborating
    on how simple Linux primitives like cgroups and namespaces make this magical thing
    called containers a reality. Finally, the Docker ecosystem is ever growing and
    expanding—and you’ll find coverage on that landscape as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 而且Sean和Karl并不畏惧深入微观细节——详细阐述了像cgroups和命名空间这样的简单Linux原语如何使得这种被称为容器的神奇事物成为现实。最后，Docker生态系统不断增长和扩展——本书也会涵盖这个领域。
- en: 'In the foreword of *Docker: Up & Running*, second edition, Laura Tacho made
    an astute observation—cloud native technologies like VMs and containers are not
    exclusive. Rather, they are additive. This statement couldn’t be truer today—the
    rise of technologies like [Kata Containers](https://katacontainers.io) that combine
    the use of lightweight virtual machines to run containers, thus allowing us to
    have the best of both worlds (the isolation of VMs with the portability of containers),
    are an attestation to Laura’s commentary.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '在《*Docker: Up & Running*》第二版的前言中，Laura Tacho做出了一项敏锐的观察——像VM和容器这样的云原生技术并不是互斥的，而是相辅相成的。如今，这种说法再合适不过了——像[Kata
    Containers](https://katacontainers.io)这样的技术的兴起，结合了轻量级虚拟机来运行容器，因此既具有VM的隔离性又具备容器的可移植性，这证明了Laura的评论是正确的。'
- en: Containers are ubiquitous. A journey of a thousand miles begins with a single
    step—and indeed, the journey to truly grokking containers is a long one. If this
    book is your first step, you’ve made the right choice. You have two very experienced
    guides showing you the way, and while I realize you don’t need it, I still wish
    you the very best of luck.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 容器已经无处不在。千里之行始于足下——确实，深入理解容器的旅程是漫长的。如果这本书是你的第一步，那你做出了正确的选择。你将有两位经验丰富的向导指引你前行，虽然我知道你并不需要，但我仍然祝你一切顺利。
- en: Happy containerizing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您容器化愉快。
- en: Raju Gandhi
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Raju Gandhi
- en: Founder, DefMacro Software, LLC,
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创始人，DefMacro Software, LLC，
- en: and author of Head First Software Architecture, Head First Git, and JavaScript
    Next
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以及《Head First Software Architecture》、《Head First Git》和《JavaScript Next》的作者
- en: '[@looselytyped](https://twitter.com/looselytyped)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[@looselytyped](https://twitter.com/looselytyped)'
- en: Columbus, Ohio
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 俄亥俄州哥伦布市
- en: April 2023
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年4月
