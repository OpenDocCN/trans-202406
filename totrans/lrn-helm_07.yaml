- en: Chapter 7\. Chart Repositories
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 图表存储库
- en: No package manager is complete without a way to share and distribute the packages
    themselves. Organizations and vendors must have a way to publish packages for
    end users to download and consume. Likewise, end users must have a common way
    to fetch packages from a variety of sources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一种软件包管理器能够完整而不具备发布和分发软件包的方式。组织和供应商必须有一种方法来发布供最终用户下载和使用的软件包。同样，最终用户必须有一种从多种来源获取软件包的共同方式。
- en: Helm enables package distribution though a system called chart repositories.
    Chart repositories are simple HTTP(S) web services from which users can discover
    and download available charts. Conceptually, chart repositories are similar in
    design to Debian package repositories, Fedora package databases, or the Comprehensive
    Perl Archive Network (CPAN).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Helm通过称为图表存储库的系统实现软件包分发。图表存储库是简单的HTTP(S) Web服务，用户可以从中发现和下载可用的图表。从概念上讲，图表存储库在设计上类似于Debian软件包存储库、Fedora软件包数据库或Comprehensive
    Perl Archive Network (CPAN)。
- en: In this chapter, we will first dive deep into the internals of a chart repository.
    We will discuss the repository index and how to update it with new chart versions.
    After that, we will show how to set up a chart repository from scratch, how to
    secure one, and also show a real-world example of how to host a public chart repository
    using GitHub Pages for open source projects. After this, we will walk through
    the various `helm repo` commands and how to use them effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先深入探讨图表存储库的内部工作原理。我们将讨论存储库索引及如何使用新的图表版本更新它。之后，我们将展示如何从头开始设置图表存储库，如何确保其安全，并展示一个使用GitHub
    Pages为开源项目托管公共图表存储库的实际示例。之后，我们将详细介绍各种`helm repo`命令及其有效使用方法。
- en: Toward the end of the chapter, we will cover the next generation of chart repositories
    using Helm’s experimental Open Container Initiative (OCI) support. This bleeding-edge
    functionality added in Helm 3 allows users to store Helm charts in container registries
    alongside their container images.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的末尾，我们将介绍使用Helm实验性Open Container Initiative（OCI）支持的下一代图表存储库。这一前沿功能是在Helm
    3中添加的，允许用户将Helm图表存储在容器注册表中，与其容器镜像并存。
- en: Lastly, we will briefly describe some of the projects in the Helm ecosystem
    related to chart repositories.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将简要描述与图表存储库相关的Helm生态系统中的一些项目。
- en: The Repository Index
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储库索引
- en: All chart repositories contain a special repository index file called *index.yaml*,
    which lists all available charts and their respective download locations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的图表存储库都包含一个名为*index.yaml*的特殊存储库索引文件，列出了所有可用的图表及其各自的下载位置。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: See [Appendix B](app02.xhtml#appendix_b_chart_respoitory_api) for more details
    describing the format of *index.yaml*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 详细描述*index.yaml*格式的更多细节，请参见[附录 B](app02.xhtml#appendix_b_chart_respoitory_api)。
- en: 'Here’s an example of a very basic *index.yaml* file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个非常基本的*index.yaml*文件示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note the `entries` section, which lists all charts and chart versions. This
    *index.yaml* example lists a just single chart, *superapp*, with a single version,
    0.1.0.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`entries`部分，其中列出了所有图表及其版本。此*index.yaml*示例仅列出了一个图表*superapp*，具有一个版本0.1.0。
- en: An Example of a Chart Repository Index
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表存储库索引示例
- en: 'Usually, chart repositories list many charts and all their available versions.
    This allows users to download a specific version of the chart they wish to install.
    The following is a more real-world example of a chart repository index, containing
    multiple charts and chart versions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图表存储库会列出许多图表及其所有可用的版本。以下是一个更真实的图表存储库索引示例，包含多个图表及其版本：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding example shows two available charts: *cert-manager* and *tor-proxy*.
    There are a total of three available chart versions: *cert-manager* v0.14.1, *cert-manager*
    v0.14.2 (latest), and *tor-proxy* 0.1.1 (latest). The latest versions of each
    chart in the repo are displayed when running a `helm search`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例显示了两个可用的图表：*cert-manager*和*tor-proxy*。共有三个可用的图表版本：*cert-manager* v0.14.1、*cert-manager*
    v0.14.2（最新版本）和*tor-proxy* 0.1.1（最新版本）。运行`helm search`时将显示存储库中每个图表的最新版本。
- en: 'Typically chart archives (*.tgz* files) themselves are served from the same
    location as the repository index, but the index may also link to remote locations
    on entirely different domains. Here is a snippet from an *index.yaml* referencing
    chart archives located on a separate domain (note the absolute URL):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图表归档（*.tgz*文件）本身是从与存储库索引相同的位置提供的，但索引也可能链接到完全不同域上的远程位置。以下是一个从*index.yaml*中引用图表归档的片段，位于单独域上（请注意绝对网址）：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_chart_repositories_CO1-1)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_chart_repositories_CO1-1)'
- en: Absolute chart URL
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对图表URL
- en: Other fields found in each entry include the metadata for a chart as described
    in *Chart.yaml*, such as `description`, as well as an added digest field containing
    the Secure Hash Algorithm (SHA-256) checksum of the chart archive. In [Chapter 4](ch04.xhtml#building_a_chart)
    we covered chart metadata and *Chart.yaml* in detail.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个条目中还包含在*Chart.yaml*中描述的图表元数据的其他字段，例如`description`，以及包含图表归档的安全哈希算法（SHA-256）摘要字段。在[第四章](ch04.xhtml#building_a_chart)中，我们详细讨论了图表元数据和*Chart.yaml*。
- en: Additionally, at the top level is a `generated` field describing when the index
    was created (in RFC 3339 format), as well as an `apiVersion` describing the API
    version of the index. At the time of writing, there is currently only one API
    version for chart repositories. This field should always be `v1`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在顶层还有一个`generated`字段，描述索引的创建时间（RFC 3339格式），以及一个`apiVersion`字段，描述图表存储库的API版本。目前只有一个图表存储库的API版本。此字段应始终为`v1`。
- en: Generating an Index
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成索引
- en: The repository index can be generated by a custom program, or typed out manually.
    Helm also provides built-in functionality to generate the repository index for
    you.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库索引可以通过自定义程序生成，或者手动输入。Helm还提供了生成存储库索引的内置功能。
- en: 'Let’s create an empty directory, *charts/*, which will serve as the root of
    our chart repository:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个空目录*charts/*，它将作为我们图表仓库的根目录：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To generate a repository index inside the *charts/* directory, run the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在*charts/*目录中生成存储库索引，请运行以下命令：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will create a file at *charts/index.yaml*. Let’s take a look:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在*charts/index.yaml*创建一个文件。让我们来看一下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll notice that the `entries` are empty. This is expected because we do not
    yet have any charts in the *charts/* directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到`entries`是空的。这是预期的，因为我们在*charts/*目录中还没有任何图表。
- en: 'Let’s create a sample chart, and package it into the *charts/* directory:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例图表，并将其打包到*charts/*目录中：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let’s try generating the index again:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次尝试生成索引：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we see our chart listed in the `entries` section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在`entries`部分看到了我们的图表。
- en: Adding to an Existing Index
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加到现有索引
- en: In some scenarios (continuous integration/continuous deployment [CI/CD], for
    example), you may only have access to an existing *index.yaml* file and a newly
    packaged chart archive. Helm provides a mechanism for building upon the contents
    of an existing index with the `--merge` option.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下（例如持续集成/持续部署[CI/CD]），你可能只能访问现有的*index.yaml*文件和新打包的图表归档。Helm提供了一个使用`--merge`选项构建现有索引内容的机制。
- en: 'Let’s simulate this scenario. Create a new directory called *workspace/*, which
    will represent a new working directory in a CI/CD pipeline:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们模拟这种情况。创建一个名为*workspace/*的新目录，它将代表CI/CD管道中的新工作目录：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Copy the existing index file into the *workspace/* directory with a new name,
    such as *index-old.yaml*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将现有的索引文件复制到*workspace/*目录，并使用新名称，比如*index-old.yaml*：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In a real-world scenario, you might source the existing index file from some
    remote location (e.g., Amazon S3).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，您可能从某个远程位置（例如Amazon S3）获取现有的索引文件。
- en: 'Next let’s create another Helm chart and package it into the *workspace/* directory:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们创建另一个Helm图表，并将其打包到*workspace/*目录中：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command, which will create a new *index.yaml* file based
    on the combination of the existing entries found in *index-old.yaml*, as well
    as any *.tgz* files in the *workspace/* directory:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令，将根据*index-old.yaml*中现有条目的组合以及*workspace/*目录中的任何*.tgz*文件创建一个新的*index.yaml*文件：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, move the files from the *workspace/* directory into the *charts/*
    directory, overwriting the old index file with the new one:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将*workspace/*目录中的文件移动到*charts/*目录中，覆盖旧的索引文件：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The new version of the index file should now contain entries for both charts:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在索引文件的新版本应该包含两个图表的条目：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method is useful in environments where you do not necessarily have access
    to a directory containing all of the chart archives.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在不一定具有包含所有图表存档的目录访问权限的环境中，此方法非常有用。
- en: Keep in mind, however, that if this merge occurs on multiple systems at the
    same time, you may run into a race condition where one or more charts goes missing
    from the index. This can be mitigated by ensuring that this process is only performed
    synchronously (e.g., a single CI job responsible for creating *index.yaml* for
    the repository). Another way to address this problem is to use a dynamic web server
    that is responsible for generating the contents of *index.yaml*. The *ChartMuseum*
    project, which is described later in this chapter in [“Related Projects”](#related_projects),
    is one such example of a dynamic chart repository server you can use for this
    purpose.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果此合并同时在多个系统上发生，您可能会遇到一个竞争条件，其中一个或多个图表可能会从索引中消失。可以通过确保此过程仅同步执行（例如，单个CI作业负责为存储库创建*index.yaml*）来减轻此问题。解决此问题的另一种方法是使用负责生成*index.yaml*内容的动态web服务器。本章稍后描述的*ChartMuseum*项目在此目的上是一个这样的例子，它是一个动态图表存储库服务器。
- en: Setting Up a Chart Repository
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置图表存储库
- en: One of the benefits of chart repositories is that they can be entirely static—meaning
    you can place the files behind a simple web server such as Apache or Nginx and
    serve them as is. You can even use object storage providers, such as Amazon S3\.
    No significant computation needs to occur on the server side when a client requests
    *index.yaml*, for example. The static web server just opens the file as it exists
    on the filesystem and sends the raw contents back to the client.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图表存储库的一个好处是它们可以完全静态化——这意味着您可以将文件放在诸如Apache或Nginx之类的简单web服务器后面，并按原样提供服务。您甚至可以使用对象存储提供者，例如Amazon
    S3。例如，当客户端请求*index.yaml*时，服务器端不需要进行任何重要的计算。静态web服务器只需打开文件并将原始内容发送回客户端。
- en: A Simple Chart Repository with Python
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python的简单图表存储库
- en: For the sake of this example, we will use Python’s built-in static web server
    to start up a local test repository. Note that almost all programming languages
    have some support in their standard libraries to start a web server and serve
    static files. Python is chosen simply because it comes preinstalled on most Unix-based
    systems, and because it provides an easy one-line command to start a static web
    server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本例，我们将使用Python的内置静态web服务器启动一个本地测试存储库。请注意，几乎所有编程语言的标准库都支持启动web服务器并提供静态文件的服务。选择Python仅仅是因为它预装在大多数基于Unix的系统上，并且因为它提供了一个简单的一行命令来启动静态web服务器。
- en: Follow the instructions in the previous section ([“Generating an Index”](#generating_an_index))
    to create the *charts/* directory, containing the files *index.yaml*, *superapp-0.1.0.tgz*,
    and *duperapp-0.1.0.tgz*. Run one of the following commands to start a local web
    server at *[*http://localhost:8080*](http://localhost:8080)*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按照上一节的说明（[“生成索引”](#generating_an_index)）创建*charts/*目录，其中包含文件*index.yaml*，*superapp-0.1.0.tgz*和*duperapp-0.1.0.tgz*。运行以下命令中的一个以在*[*http://localhost:8080*](http://localhost:8080)*启动本地web服务器。
- en: 'Using Python 3 (try this first):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python 3（首先尝试这个）：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using Python 2:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python 2：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Caution
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小心
- en: The Python 2 version of this command listens on all interfaces (`0.0.0.0`) versus
    just the loopback interface (`127.0.0.1`). Depending on your system, this will
    allow other devices on your network to connect. Be mindful of which files are
    present in the *charts/* directory before running this command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的Python 2版本监听所有接口（`0.0.0.0`），而不仅仅是环回接口（`127.0.0.1`）。根据您的系统，这将允许网络中的其他设备连接。在运行此命令之前，请注意*charts/*目录中存在哪些文件。
- en: 'Now, in another terminal window, try fetching *index.yaml* using `curl`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在另一个终端窗口中，尝试使用`curl`获取*index.yaml*：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now let’s verify that we can fetch chart archives:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证一下我们是否可以获取图表存档：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the `curl` commands succeed, your chart repository is ready to be used with
    Helm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`curl`命令成功，您的图表存储库已准备好与Helm一起使用。
- en: Securing a Chart Repository
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护图表存储库
- en: In many cases, you may wish to limit access to a chart repository or maintain
    an audit trail of which users are accessing which resources. Helm has built-in
    support to allow users to authenticate themselves against chart repositories protected
    by either basic auth or mTLS.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，您可能希望限制对图表存储库的访问，或者保持哪些用户访问了哪些资源的审计跟踪。Helm内置支持，允许用户对由基本身份验证或mTLS保护的图表存储库进行身份验证。
- en: Basic auth
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: Chart repositories can be protected by basic access authentication, or *basic
    auth*. This requires that users provide a valid username/password combination
    to access resources on the server.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图表存储库可以通过基本访问认证或*基本认证*进行保护。这需要用户提供有效的用户名和密码组合以访问服务器上的资源。
- en: 'Basic auth can be implemented by a server by first checking the `Authorization`
    header prior to processing a request. An incoming basic auth header resembles
    the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器可以通过在处理请求之前首先检查`Authorization`头部来实现基本认证。传入的基本认证头部类似于以下内容：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](Images/1.png)](#co_chart_repositories_CO2-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_chart_repositories_CO2-1)'
- en: The opaque string here is the Base64 encoding of *`username`* + “:” + *`password`*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的不透明字符串是*`username`* + “:” + *`password`* 的Base64编码。
- en: Caution
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The contents of the `Authorization` header are *not* encrypted, so you are strongly
    encouraged to also use HTTPS when supplying basic auth credentials.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Authorization`头部的内容*不*加密，因此强烈建议在提供基本认证凭据时也使用HTTPS。'
- en: 'When adding a repository for the first time, you can supply a username and
    password combination on the command line, which will instruct Helm to use basic
    auth when making requests against this repository:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次添加存储库时，您可以在命令行上提供用户名和密码组合，这将指示Helm在与该存储库进行请求时使用基本认证：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Client certificates
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端证书
- en: Most client-server communication over HTTPS allows the client to verify the
    identity of the server based on the SSL certificate provided by the server. With
    mutual TLS authentication (mTLS), servers can also verify the identity of the
    client based on a separate SSL certificate presented by the client during the
    TLS handshake.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数通过HTTPS进行的客户端-服务器通信允许客户端根据服务器提供的SSL证书验证服务器的身份。通过双向TLS认证（mTLS），服务器还可以根据客户端在TLS握手期间提供的单独SSL证书验证客户端的身份。
- en: 'Here is a simple Nginx server configuration enabling mTLS for a chart repository,
    assuming static files (i.e., *index.yaml*, *.tgz* files) are located in the directory
    */chartrepo* on the server:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的Nginx服务器配置，用于启用图表存储库的mTLS，假设静态文件（即*index.yaml*，*.tgz*文件）位于服务器上的目录*/chartrepo*中：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](Images/1.png)](#co_chart_repositories_CO3-1)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_chart_repositories_CO3-1)'
- en: Server’s SSL certificate
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的SSL证书
- en: '[![2](Images/2.png)](#co_chart_repositories_CO3-2)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_chart_repositories_CO3-2)'
- en: Server’s private key
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的私钥
- en: '[![3](Images/3.png)](#co_chart_repositories_CO3-3)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_chart_repositories_CO3-3)'
- en: Certificate authority (CA) for client authentication—only requests from clients
    with a certificate signed by this CA will be accepted
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端身份验证的证书颁发机构（CA）——只有由此CA签名的证书的客户端请求将被接受
- en: 'The first step in obtaining a client certificate is to generate a new private
    key and certificate signing request (CSR):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 获得客户端证书的第一步是生成新的私钥和证书签名请求（CSR）：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When prompted for a “Common Name” when generating the CSR, you must enter a
    value. Use something that identifies the client (e.g., “francis”). Other fields
    can technically be left blank, although you are encouraged to fill them out.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成证书签名请求（CSR）时，当提示“通用名称”时，您必须输入一个值。使用能够识别客户端的内容（例如“francis”）。其他字段在技术上可以留空，尽管鼓励您填写它们。
- en: 'Next, using the certificate authority configured on the server (`client-ca.pem`)
    and the associated private key (`client-ca.key`), generate a new client certificate
    from the CSR:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用服务器上配置的证书颁发机构（`client-ca.pem`）和相关私钥（`client-ca.key`），从CSR生成新的客户端证书：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now you can use this certificate to authenticate by specifying the `--cert-file`
    and `--key-file` options upon adding a new chart repository:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以通过在添加新图表存储库时指定`--cert-file`和`--key-file`选项来使用此证书进行身份验证：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the case that your server is using a self-signed certificate, you can also
    specify the `--ca-file` option pointing to a trusted certificate or certificate
    bundle:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务器使用自签名证书，您还可以指定`--ca-file`选项，指向一个受信任的证书或证书包：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The paths used for `--cert-file`, `--key-file`, and `--ca-file` are all stored
    in the Helm cache tied to the repository. It is important not to move these files;
    otherwise, future requests to the repository will fail due to missing files needed
    for the client to authenticate.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`--cert-file`，`--key-file`和`--ca-file`的路径都存储在与存储库相关的Helm缓存中。不要移动这些文件，否则将由于客户端需要的缺失文件而导致对存储库的未来请求失败。
- en: For more information on mTLS, please see Internet Engineering Task Force (IETF)
    RFC 8446, “The Transport Layer Security (TLS) Protocol Version 1.3.”
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多关于 mTLS 的信息，请参阅互联网工程任务组（IETF）RFC 8446，“传输层安全性（TLS）协议版本1.3”。
- en: 'Real-World Example: Using GitHub Pages'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真实示例：使用 GitHub Pages
- en: GitHub has a free, static hosting solution called GitHub Pages. If you don’t
    mind making your charts public to the world, GitHub Pages is a great option for
    hosting a chart repository as you incur zero cost.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 提供了一个免费的静态托管解决方案，称为 GitHub Pages。如果您不介意将您的图表公开给世界，GitHub Pages 是托管图表存储库的绝佳选择，因为您不需要支付任何费用。
- en: What’s even better is that GitHub Pages allows you to use a custom domain name
    that points to your GitHub Pages site. In this section we will show how to easily
    set up a public Helm chart repository using GitHub Pages.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，GitHub Pages 允许您使用指向您的 GitHub Pages 站点的自定义域名。本节将展示如何使用 GitHub Pages 轻松设置一个公共
    Helm 图表存储库。
- en: There are some limitations on GitHub Pages (such as bandwidth), so before using
    this method, enumerate the performance requirements for your chart repository
    compared to GitHub’s documentation of GitHub Pages’ features.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Pages 存在一些限制（如带宽），因此在使用此方法之前，请根据您的图表存储库的性能要求与 GitHub Pages 功能文档进行比较。
- en: Create a new Git repo
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个新的 Git 存储库
- en: The first step is to create a brand-new Git repo on GitHub dedicated to your
    chart repository. You could technically host the chart repo alongside other content,
    but for the sake of simplicity, we will use a dedicated Git repo. [Figure 7-1](#chapter_7_githubpages1)
    shows how to set up a new repository.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在 GitHub 上创建一个全新的 Git 存储库，专门用于您的图表存储库。您理论上可以将图表存储库与其他内容一起托管，但为了简单起见，我们将使用一个专用的
    Git 存储库。[图7-1](#chapter_7_githubpages1) 显示了如何设置一个新的存储库。
- en: '![GitHub Pages](Images/lehe_0701.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub Pages](Images/lehe_0701.png)'
- en: Figure 7-1\. Creating a new public repository in GitHub
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-1\. 在 GitHub 中创建新的公共存储库
- en: Once you’re logged in to GitHub, click the top right of the screen and select
    “New repository.” Name the Git repo whatever you want. We will use the name *mycharts*
    for this example. Make sure to select the option for marking the repository as
    “Public,” which is a prerequisite for using GitHub Pages. Select the box for “Initialize
    this repository with a README,” which will allow us to clone the repo immediately.
    Feel free to select a license such as “MIT License” to indicate that the source
    code in this repo is free to use and repurpose. Finally, click “Create repository.”
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录 GitHub，点击屏幕右上角，选择“新建存储库”。为 Git 存储库命名任何您喜欢的名称。在本示例中，我们将使用名称 *mycharts*。确保选择将存储库标记为“Public”，这是使用
    GitHub Pages 的先决条件。选择“Initialize this repository with a README” 的选项，这将允许我们立即克隆存储库。随意选择许可证，如“MIT
    License”，表示该存储库中的源代码可自由使用和重新用途。最后，点击“Create repository”。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s important to note in this context the difference between a Helm repo (or
    chart repository) and a Git repo hosted on GitHub, which is used for version control.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，需要注意 Helm 存储库（或图表存储库）与托管在 GitHub 上的 Git 存储库之间的区别，后者用于版本控制。
- en: Enable GitHub Pages
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用 GitHub Pages
- en: Navigate to the Settings panel on the repository. In the main settings, scroll
    down to the section titled GitHub Pages (see [Figure 7-2](#chapter_7_githubpages2)).
    For the Source option, select “main branch.” This will cause GitHub to redeploy
    your GitHub Pages site every time you make a new commit to the main branch. Click
    Save.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 转到存储库的设置面板。在主设置中，向下滚动到名为 GitHub Pages 的部分（参见 [图7-2](#chapter_7_githubpages2)）。对于
    Source 选项，请选择“main branch”。这将导致 GitHub 在您提交新的提交到主分支时重新部署您的 GitHub Pages 站点。点击保存。
- en: '![GitHub Pages](Images/lehe_0702.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub Pages](Images/lehe_0702.png)'
- en: Figure 7-2\. Enabling GitHub Pages on your repository
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-2\. 在您的存储库上启用 GitHub Pages
- en: 'Optional: Use a custom domain'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选：使用自定义域名
- en: Sites on GitHub Pages, by default, are hosted as a subdomain on the `github.io`
    domain. For example, the URL to your site would resemble something like *https://`yourusername`.github.io/mycharts/*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Pages 上的站点默认作为 `github.io` 域的子域托管。例如，您的站点的 URL 将类似于 *https://`yourusername`.github.io/mycharts/*。
- en: If you have a custom domain name to use, in your registrar’s web console (or
    alternatively, in the console for the service you have set up to use for your
    authoritative nameservers), create a new DNS record pointing to *`yourusername`.github.io*.
    If using the root domain, use an `ALIAS` record type; otherwise, for subdomains,
    use a `CNAME` record type.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个要使用的自定义域名，在你的注册商的网页控制台（或者替代方案，你设置了用于你授权域名服务器的服务的控制台），创建一个新的DNS记录，指向*`yourusername`.github.io*。如果使用根域名，使用`ALIAS`记录类型；否则，对于子域名，使用`CNAME`记录类型。
- en: Go back to your repository settings in GitHub. As in [Figure 7-3](#chapter_7_githubpages3),
    in the “Custom domain” input, enter your domain that you set up a DNS record for.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 返回GitHub中的仓库设置。如图[7-3](#chapter_7_githubpages3)，在“自定义域名”输入框中，输入你为其设置了DNS记录的域名。
- en: '![GitHub Pages, 500](Images/lehe_0703.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub Pages, 500](Images/lehe_0703.png)'
- en: Figure 7-3\. Using a custom domain for GitHub Pages
  id: totrans-124
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-3\. 使用GitHub Pages的自定义域名
- en: It may take up to an hour for GitHub to generate a TLS certificate for your
    domain. Once it is ready, you should see some text displayed in the settings such
    as “Your site is published at https://example.com.” Once you see this, make sure
    to enable the Enforce HTTPS option so that your site is only ever accessed over
    HTTPS versus just plain HTTP.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub可能需要最多一个小时来为你的域生成TLS证书。一旦准备好，你应该在设置中看到一些文本显示“你的站点发布在 https://example.com。”一旦看到这个，确保启用“强制HTTPS”选项，这样你的站点只能通过HTTPS访问，而不是普通的HTTP。
- en: Adding chart repository files
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加图表仓库文件
- en: 'Locate the clone URL for your repo in the GitHub UI (typically on the right
    side of the screen). Clone your new GitHub repository to your local system so
    that we can add some files to turn it into a real chart repository:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub UI中找到你仓库的克隆URL（通常在屏幕右侧）。将你的新GitHub仓库克隆到本地系统，以便我们添加一些文件将其转换成一个真正的图表仓库：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Enter the directory of your Git repository:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的Git仓库的目录：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, let’s create a chart called *pineapple* in a new *src/* directory, package
    it into an archive in the root of the repo, and create an *index.yaml* file:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在一个新的*src/*目录中创建一个名为*pineapple*的图表，将其打包成一个存档文件放在仓库的根目录，并创建一个*index.yaml*文件：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once that’s done, let’s commit and push all these new files back to GitHub:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们把所有这些新文件都提交并推送回GitHub：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Go back to GitHub in the browser. There is a small delay between the time you
    push a change and those changes becoming avaiable on your GitHub Pages site. Click
    the Environments item in the right sidebar. This will tell you the last time your
    site was deployed. If you see a reference to the commit you just pushed (`9bba19d`
    in the preceding example), your GitHub Pages site is ready to use.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 返回浏览器中的GitHub。在你推送改变和这些改变在GitHub Pages网站上可用之间会有一小段延迟。点击右侧边栏中的“环境”项。这会告诉你你的站点上一次部署的时间。如果你看到引用了你刚刚推送的提交（在前面的例子中是`9bba19d`），你的GitHub
    Pages站点已经可以使用了。
- en: Using your GitHub Pages site as a chart repository
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将你的GitHub Pages站点用作图表仓库
- en: Once you have pushed an *index.yaml* file up to your Git repo, and the site
    is live with the latest commit, you can use it exactly as you would any other
    chart repository.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你上传了一个*index.yaml*文件到你的Git仓库，并且站点已经使用最新的提交上线，你可以像使用任何其他图表仓库一样使用它。
- en: 'Add your GitHub Pages chart repository to your local repositories:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的GitHub Pages图表仓库添加到你的本地仓库：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or, if you’re using a custom domain:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你正在使用自定义域名：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Using Chart Repositories
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图表仓库
- en: Once you have a working chart repository (see previous section), you can then
    leverage it using the Helm CLI.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了一个工作的图表仓库（参见前面的章节），你可以使用Helm CLI来利用它。
- en: Several commands are available under the top-level `helm repo` subcommand for
    working with chart repositories. This section will focus on how to use each of
    these commands effectively.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级`helm repo`子命令下提供了几个命令来处理图表仓库。本节将重点介绍如何有效地使用每个命令。
- en: Adding a Repository
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个仓库
- en: The very first step in using a chart repository is to assign a unique name to
    it (such as `mycharts`) and add it to a list of repositories known by Helm. When
    you first add a repository, Helm fetches *index.yaml* from the URL provided and
    stores it locally.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用图表仓库的第一步是给它分配一个唯一的名称（如`mycharts`），并将其添加到Helm已知的仓库列表中。当你第一次添加一个仓库时，Helm会从提供的URL获取*index.yaml*并将其存储在本地。
- en: 'Use the `helm repo add` command to add your repository:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`helm repo add`命令添加你的仓库：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you are running the Python example, check out the logs for your chart repository
    and you should see the incoming request for `GET /index.yaml`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Python示例，请查看您的图表存储库日志，您应该会看到有关`GET /index.yaml`的传入请求：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Downloading Charts
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载图表
- en: 'To download a chart directly from a repository, use the `helm pull` command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要从存储库直接下载图表，请使用`helm pull`命令：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Helm will automatically find the latest version based on Semantic Versioning.
    You can also specify a version:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 根据语义版本，Helm将自动找到最新版本。您还可以指定一个版本：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will result in a new chart archive (*.tgz* file) in your workspace:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的工作空间中生成一个新的图表存档（*.tgz*文件）：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This archive can be then be installed directly:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以直接安装此存档：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can also install charts directly from added repositories:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以直接从添加的存储库安装图表：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Listing Repositories
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出存储库
- en: It’s oftentimes helpful to know which chart repositories have already been added
    on your system. Knowing this may help you decide whether you want to use one of
    them to download charts or to remove one of them from the system completely.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 知道已经添加到您系统中的哪些图表存储库通常是有帮助的。这可能会帮助您决定是否要使用其中一个来下载图表，或者彻底从系统中移除其中一个。
- en: 'Use the `helm repo list` command to list all chart repositories added to your
    system:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`helm repo list`命令列出添加到您系统的所有图表存储库：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can also leverage the `--output` / `-o` option to get this in machine-readable
    format, if needed.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您还可以利用`--output` / `-o`选项以机器可读格式获取这些内容。
- en: 'Get the list as YAML by adding `-o yaml`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`-o yaml`来获取YAML格式的列表：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Get the list as JSON by adding `-o json`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`-o json`来获取JSON格式的列表：
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Updating Repositories
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新存储库
- en: Once new chart versions are released, repository owners add the *.tgz* package
    to the repo storage and update *index.yaml* with a new entry.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发布新的图表版本，存储库所有者就会将*.tgz*包添加到存储库存储中，并使用新条目更新*index.yaml*。
- en: 'In order to fetch the latest version of the repository index, use the `helm
    repo update` command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取存储库索引的最新版本，请使用`helm repo update`命令：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you are running the Python example, once again, you should notice an incoming
    request for `GET /index.yaml` in the output logs from your chart repository:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Python示例，则应该注意到图表存储库的输出日志中会有一个关于`GET /index.yaml`的传入请求：
- en: '[PRE44]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Whether or not the repository index has changed contents (we haven’t added any
    more charts to `myrepo`), the file is fetched and downloaded into the cache, overwriting
    the previously saved version.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 无论存储库索引是否已更改内容（我们没有向`myrepo`添加更多图表），该文件都会被获取并下载到缓存中，覆盖先前保存的版本。
- en: Removing a Repository
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除存储库
- en: 'In order to remove a repository, you can use `helm repo remove`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了移除存储库，您可以使用`helm repo remove`：
- en: '[PRE45]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This will remove all references to this repository stored in the Helm cache.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除Helm缓存中存储的有关此存储库的所有引用。
- en: Experimental OCI Support
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验性OCI支持
- en: Warning
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: '[Helm’s OCI support](https://oreil.ly/eH4KE) is still considered highly experimental.
    While development in this area is still active, the syntax described in this section
    may soon become outdated.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[Helm的OCI支持](https://oreil.ly/eH4KE)仍然被认为是高度实验性的。尽管这一领域的开发仍在积极进行，但本节描述的语法可能很快就会过时。'
- en: The chart repository system was designed to be easy to use. In most cases, this
    system has proven to be sufficient—enabling organizations around the globe to
    share and distribute their Helm charts.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图表存储库系统旨在易于使用。在大多数情况下，这个系统已被证明是足够的——使全球各地的组织能够共享和分发他们的Helm图表。
- en: 'Chart repositories do, however, present a few key challenges:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，图表存储库确实存在一些关键挑战：
- en: They have no concept of namespaces; all charts for a repo are listed in a single
    index
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们没有命名空间的概念；存储库中的所有图表都列在单个索引中。
- en: They have no fine-grained access control; you either have access to all charts
    in the repo or none of them
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们没有细粒度的访问控制；您要么可以访问存储库中的所有图表，要么不能访问任何图表。
- en: Chart packages with different names but the exact same raw contents are stored
    twice
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表包使用不同名称但完全相同的原始内容存储两次。
- en: The repository index can become extremely large, causing Helm to consume a lot
    of memory
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库索引可能变得非常庞大，导致Helm消耗大量内存。
- en: Rather than trying to add features to address all of these issues with the current
    chart repository model, it made much more sense to build the next generation of
    chart repositories on top of registries that conform to the *OCI Distribution
    Specification*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 与尝试添加功能以解决当前图表存储库模型的所有这些问题不同，将下一代图表存储库构建在符合*OCI分发规范*的注册表上是更为合理的选择。
- en: 'OCI stands for the *Open Container Initiative*. Taken from the website at [*https://opencontainers.org*](https://opencontainers.org),
    OCI is defined as the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: OCI 代表 *Open Container Initiative*。从 [*https://opencontainers.org*](https://opencontainers.org)
    网站上得知，OCI 的定义如下：
- en: An open governance structure for the express purpose of creating open industry
    standards around container formats and runtimes.
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个开放的治理结构，旨在围绕容器格式和运行时创建开放行业标准。
- en: One of the standards defined by OCI is the *distribution specification*. This
    spec describes an HTTP API used for distributing container images. Interestingly
    enough, this API is general-purpose and can apply to all sorts of things that
    *aren’t* container images—things such as Helm charts!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: OCI 定义的标准之一是 *分发规范*。该规范描述了用于分发容器镜像的 HTTP API。有趣的是，此 API 是通用的，并且适用于不是容器镜像的各种内容，比如
    Helm 图表！
- en: Starting in Helm 3.0.0, experimental support was added to push and pull charts
    to and from OCI-based container registries.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Helm 3.0.0 开始，添加了实验性支持，可以推送和拉取基于 OCI 的容器注册表中的图表。
- en: Enabling OCI Support
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 OCI 支持
- en: At the time of writing, Helm’s OCI support is still considered experimental.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，Helm 的 OCI 支持仍然被视为实验性质。
- en: 'For now, set the following in your environment to enable OCI support:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，请在您的环境中设置以下内容以启用 OCI 支持：
- en: '[PRE46]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Running a Local Registry
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行本地注册表
- en: The Docker Distribution project (also known as the Docker registry) was the
    original implementation of Docker’s Registry v2 API. It supports Helm charts out
    of the box.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Distribution 项目（也称为 Docker 注册表）是 Docker 的 Registry v2 API 的原始实现。它原生支持
    Helm 图表。
- en: 'If you have `docker` installed, you can easily run a local registry in a container
    on port 5000 with the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已安装 `docker`，可以使用以下命令在端口 5000 上的容器中轻松运行本地注册表：
- en: '[PRE47]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To tail the logs for you registry, run the following (press Ctrl-C to exit):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看注册表的日志，请运行以下命令（按 Ctrl-C 退出）：
- en: '[PRE48]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To stop your registry, run the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止注册表，请运行以下命令：
- en: '[PRE49]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The Docker registry has [several configuration options](https://oreil.ly/CBb0F)
    related to authentication, storage, etc.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 注册表有关于认证、存储等方面的 [多个配置选项](https://oreil.ly/CBb0F)。
- en: 'If you wish to configure basic auth with a single username-password combo,
    first create a *.htpasswd* file:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望使用单个用户名密码组合配置基本认证，首先创建一个 *.htpasswd* 文件：
- en: '[PRE50]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then start the registry, mounting the *.htpasswd* file and setting the `REGISTRY_AUTH`
    environment variable:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动注册表，挂载 *.htpasswd* 文件并设置 `REGISTRY_AUTH` 环境变量：
- en: '[PRE51]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: For more information about Docker Distribution, visit the [project GitHub page](https://oreil.ly/Q8Omf).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Docker Distribution 的更多信息，请访问 [项目 GitHub 页面](https://oreil.ly/Q8Omf)。
- en: Logging In to a Registry
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录到注册表
- en: 'In order to authenticate against a registry, use the `helm registry login`
    command (you will be prompted to manually enter a password):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要对注册表进行身份验证，请使用 `helm registry login` 命令（系统会提示您手动输入密码）：
- en: '[PRE52]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This makes a simple `GET` request to the path `/v2/` on the registry using the
    credentials to determine if they are valid. If they are, the credentials will
    be stored in a Helm config file. If you have any Docker credential stores enabled
    (such as `osxkeychain` on macOS), the username and password will be stored there
    securely.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 它会使用凭据在注册表上的路径 `/v2/` 发出简单的 `GET` 请求，以确定它们是否有效。如果有效，凭据将存储在 Helm 配置文件中。如果启用了任何
    Docker 凭据存储（例如 macOS 上的 `osxkeychain`），用户名和密码将安全地存储在那里。
- en: Note
  id: totrans-220
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The example of running a local registry at `localhost:5000` uses no authentication.
    If you haven’t enabled authentication on your registry, any combination of login
    credentials will be accepted.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `localhost:5000` 运行本地注册表的示例未使用认证。如果尚未在注册表上启用认证，则将接受任何登录凭据的组合。
- en: Logging Out of a Registry
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从注册表注销
- en: 'In order to remove credentials for a given registry from your system, use the
    `helm registry logout` command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要从系统中删除特定注册表的凭据，请使用 `helm registry logout` 命令：
- en: '[PRE53]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Storing a Chart in the Cache
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图表存储到缓存中
- en: Prior to uploading a chart to a registry, you must first save it into the cache.
    This converts a chart from its normal state into content-addressable blobs and
    also gives it a unique identifier.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在将图表上传到注册表之前，必须先将其保存到缓存中。这将把图表从其正常状态转换为内容可寻址的块，并为其提供唯一标识符。
- en: 'Use `helm chart save` to store a chart in the cache:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `helm chart save` 将图表存储到缓存中：
- en: '[PRE54]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Notice that the tag used on the chart reference is based upon the chart’s version
    in *Chart.yaml* (`2.7.0`).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在图表引用中使用的标签基于 *Chart.yaml* 中的版本（`2.7.0`）。
- en: 'You can also use a custom tag, such as `stable`, by specifying it after a colon
    (`:`) on the chart reference:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在图表引用后的冒号（`:`）之后指定自定义标签，如 `stable`，来使用自定义标签：
- en: '[PRE55]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Listing Charts in the Cache
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在缓存中列出图表
- en: 'Use `helm` `chart` `list` to display all charts currently stored in the cache:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `helm chart list` 来显示当前存储在缓存中的所有图表：
- en: '[PRE56]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Exporting a Chart from the Cache
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从缓存中导出图表
- en: 'If you wish to extract the source files of a chart once it is in the cache,
    it must first be exported to a local directory. Use the `helm chart export` command
    to export the chart:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在缓存中存在的图表中提取源文件，必须先将其导出到本地目录。使用 `helm chart export` 命令来导出图表：
- en: '[PRE57]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The name of the chart will be used to determine the output path (e.g., `mychart/`).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的名称将用于确定输出路径（例如，`mychart/`）。
- en: Pushing a Chart to the Registry
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图表推送到注册表
- en: 'Pushing (a.k.a. uploading) a chart to the registry allows for it to be used
    by others. Once you are already logged in to the registry and the chart you want
    to push has been saved to the cache, use the `helm chart push` command to push
    a chart:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 将图表推送（即上传）到注册表允许其他人使用它。一旦您已经登录到注册表，并且要推送的图表已保存到缓存中，请使用 `helm chart push` 命令来推送图表：
- en: '[PRE58]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Pulling a Chart from the Registry
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从注册表中拉取图表
- en: 'Once charts have been pushed to a registry, other users can then pull (a.k.a.
    download) them. Pulling charts from a registry places them into the local cache.
    To pull an existing chart from a registry, use the `helm chart pull` command:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图表被推送到注册表，其他用户就可以拉取（即下载）它们。从注册表拉取图表会将它们放入本地缓存中。要从注册表拉取现有的图表，请使用 `helm chart
    pull` 命令：
- en: '[PRE59]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Removing a Chart from the Cache
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从缓存中移除图表
- en: 'To remove a chart from the local cache, use the `helm chart remove` command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要从本地缓存中移除图表，请使用 `helm chart remove` 命令：
- en: '[PRE60]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Related Projects
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关项目
- en: Helm’s chart repository system has spawned a collection of open source tools
    to further enhance this experience. The following subsections cover some of the
    projects related to chart repositories.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 的图表存储库系统已经衍生出一系列开源工具，进一步增强了这一体验。以下小节介绍了与图表存储库相关的一些项目。
- en: ChartMuseum
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChartMuseum
- en: '*Project homepage: [*https://github.com/helm/chartmuseum*](https://github.com/helm/chartmuseum)*'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目主页：[*https://github.com/helm/chartmuseum*](https://github.com/helm/chartmuseum)*'
- en: '*ChartMuseum* is a simple chart repository web server. Configure it to point
    to a storage location containing chart packages and it will dynamically generate
    *index.yaml*. It also exposes an HTTP API for uploading, querying, and deleting
    chart packages from storage. Additionally, it has a number of other configuration
    settings for auth, multitenancy, and caching that make it a popular choice for
    users hosting private or internal chart repositories.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*ChartMuseum* 是一个简单的图表存储库 Web 服务器。配置它指向包含图表包的存储位置，它会动态生成 *index.yaml*。它还提供了一个
    HTTP API，用于从存储中上传、查询和删除图表包。此外，它还具有用于身份验证、多租户和缓存的多个其他配置设置，使其成为托管私有或内部图表存储库的热门选择。'
- en: Harbor
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Harbor
- en: '*Project homepage: [*https://github.com/goharbor/harbor*](https://github.com/goharbor/harbor)*'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目主页：[*https://github.com/goharbor/harbor*](https://github.com/goharbor/harbor)*'
- en: '*Harbor* is a full-featured registry with added security and management features.
    It provides a UI for Helm charts and leverages ChartMuseum on the backend as a
    multitenant chart respository. It also provides support for Helm’s experimental
    OCI feature set.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*Harbor* 是一个功能齐全的注册表，具有增强的安全性和管理功能。它提供了一个用于 Helm 图表的 UI，并在后端利用 ChartMuseum
    作为多租户图表存储库。它还支持 Helm 的实验性 OCI 功能集。'
- en: Similar to Helm, *Harbor* is a graduated, top-level CNCF project.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Helm，*Harbor* 是一个毕业生，顶级 CNCF 项目。
- en: Chart Releaser
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chart Releaser
- en: '*Project homepage: [*https://github.com/helm/chart-releaser*](https://github.com/helm/chart-releaser)*'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目主页：[*https://github.com/helm/chart-releaser*](https://github.com/helm/chart-releaser)*'
- en: '*Chart Releaser*, or `cr`, is a command-line tool that leverages GitHub releases
    for hosting chart packages. It has the ability to detect charts in a Git repo,
    package them, and upload each of them as artifacts to GitHub releases named after
    the unique chart version.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*Chart Releaser*，或者 `cr`，是一个命令行工具，利用 GitHub 发布来托管图表包。它能够检测 Git 仓库中的图表，打包它们，并将每个版本命名为唯一的图表版本后上传到
    GitHub 发布的工件。'
- en: Once charts have been uploaded using `cr`, the tool can also be used to generate
    an *index.yaml* file based on the contents of GitHub releases and associated artifacts.
    This repository index can then be hosted statically, on GitHub Pages or elsewhere.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `cr` 上传图表后，该工具还可以基于 GitHub 发布和相关工件的内容生成一个 *index.yaml* 文件。这个仓库索引可以静态托管在 GitHub
    Pages 或其他地方。
- en: S3 Plugin
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: S3 插件
- en: '*Project homepage: [*https://github.com/hypnoglow/helm-s3*](https://github.com/hypnoglow/helm-s3)*'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目主页：[*https://github.com/hypnoglow/helm-s3*](https://github.com/hypnoglow/helm-s3)*'
- en: The S3 plugin is a Helm plugin that allows you to use a private Amazon S3 bucket
    as a chart repository.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: S3 插件是 Helm 的一个插件，允许你将私有 Amazon S3 存储桶作为一个图表仓库使用。
- en: GCS Plugin
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GCS 插件
- en: '*Project homepage: [*https://github.com/hayorov/helm-gcs*](https://github.com/hayorov/helm-gcs)*'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目主页：[*https://github.com/hayorov/helm-gcs*](https://github.com/hayorov/helm-gcs)*'
- en: The GCS plugin is a Helm plugin that allows you to use a private Google Cloud
    Storage bucket as a chart repository.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: GCS 插件是 Helm 的一个插件，允许你将私有 Google Cloud 存储桶作为一个图表仓库使用。
- en: Git Plugin
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 插件
- en: '*Project homepage: [*https://github.com/aslafy-z/helm-git*](https://github.com/aslafy-z/helm-git)*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目主页：[*https://github.com/aslafy-z/helm-git*](https://github.com/aslafy-z/helm-git)*'
- en: The Git plugin is a Helm plugin that allows you to use a Git repository containing
    chart source files as a chart repository. It supports subpaths, custom references,
    and both HTTPS and SSH Git URLs.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Git 插件是 Helm 的一个插件，允许你将包含图表源文件的 Git 仓库作为一个图表仓库使用。它支持子路径、自定义引用和 HTTPS 和 SSH Git
    URL。
