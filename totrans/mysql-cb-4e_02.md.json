["```\n[scheme://][user[:password]@]<host[:port]|socket>[/schema]↩\n[?option=value&option=value...]\n```", "```\n MySQL  localhost  JS > `\\connect 127.0.0.1`\nCreating a session to 'sveta@127.0.0.1'\nPlease provide the password for 'sveta@127.0.0.1': \nSave password for 'sveta@127.0.0.1'? [Y]es/[N]o/Ne[v]er (default No): \nFetching schema names for autocompletion... Press ^C to stop.\nYour MySQL connection id is 1066144 (X protocol)\nServer version: 8.0.27 MySQL Community Server - GPL\nNo default schema selected; type \\use <schema> to set one.\n```", "```\n MySQL  JS > `\\exit`\nBye!\n```", "```\n MySQL  127.0.0.1:33060+ ssl  JS > `\\c (/var/run/mysqld/mysqld.sock)`\nCreating a session to 'sveta@/var%2Frun%2Fmysqld%2Fmysqld.sock'\nFetching schema names for autocompletion... Press ^C to stop.\nYour MySQL connection id is 1067565\nServer version: 8.0.27 MySQL Community Server - GPL\nNo default schema selected; type \\use <schema> to set one.\n```", "```\nmysql> `SELECT` `@``@``mysqlx_socket``;`\n+-----------------------------+ | @@mysqlx_socket             |\n+-----------------------------+ | /var/run/mysqld/mysqlx.sock |\n+-----------------------------+ 1 row in set (0,00 sec)\n```", "```\n MySQL  localhost  JS > `\\connect /var%2Frun%2Fmysqld%2Fmysqld.sock`\nCreating a session to 'sveta@/var%2Frun%2Fmysqld%2Fmysqld.sock'\nFetching schema names for autocompletion... Press ^C to stop.\nYour MySQL connection id is 1073606\nServer version: 8.0.27 MySQL Community Server - GPL\nNo default schema selected; type \\use <schema> to set one.\n```", "```\n$ `mysqlsh mysqlx://cbuser:cbpass@127.0.0.1/cookbook`\nPlease provide the password for 'cbuser@127.0.0.1:33060': ******\nSave password for 'cbuser@127.0.0.1:33060'? [Y]es/[N]o/Ne[v]er (default No): \nMySQL Shell 8.0.27\n\nCopyright (c) 2016, 2021, Oracle and/or its affiliates.\nOracle is a registered trademark of Oracle Corporation and/or its affiliates.\nOther names may be trademarks of their respective owners.\n\nType '\\help' or '\\?' for help; '\\quit' to exit.\nCreating a session to 'cbuser@127.0.0.1:33060/cookbook'\nFetching schema names for autocompletion... Press ^C to stop.\nYour MySQL connection id is 1076096 (X protocol)\nServer version: 8.0.27 MySQL Community Server - GPL\nDefault schema `cookbook` accessible through db.\n MySQL  127.0.0.1:33060+ ssl  cookbook  JS >\n```", "```\n$ `mysqlsh --host=127.0.0.1 --port=33060 --user=cbuser --schema=cookbook`\nPlease provide the password for 'cbuser@127.0.0.1:33060': ******\nMySQL Shell 8.0.22\n\nCopyright (c) 2016, 2020, Oracle and/or its affiliates.\nOracle is a registered trademark of Oracle Corporation and/or its affiliates.\nOther names may be trademarks of their respective owners.\n\nType '\\help' or '\\?' for help; '\\quit' to exit.\nCreating a session to 'cbuser@127.0.0.1:33060/cookbook'\nFetching schema names for autocompletion... Press ^C to stop.\nYour MySQL connection id is 8738 (X protocol)\nServer version: 8.0.22-13 Percona Server (GPL), Release '13', Revision '6f7822f'\nDefault schema `cookbook` accessible through db.\n MySQL  127.0.0.1:33060+ ssl  cookbook  JS >\n```", "```\n MySQL  127.0.0.1:33060+ ssl  JS > `connectionData={`\n                                -> `\"host\": \"127.0.0.1\",`\n                                -> `\"user\": \"cbuser\",`\n                                -> `\"schema\": \"cookbook\"`\n                                -> `}`\n                                -> \n{\n    \"host\": \"127.0.0.1\", \n    \"schema\": \"cookbook\", \n    \"user\": \"cbuser\"\n}\n MySQL  127.0.0.1:33060+ ssl  JS > `shell.connect(connectionData)`\nCreating a session to 'cbuser@127.0.0.1/cookbook'\nPlease provide the password for 'cbuser@127.0.0.1': ******\nSave password for 'cbuser@127.0.0.1'? [Y]es/[N]o/Ne[v]er (default No): \nFetching schema names for autocompletion... Press ^C to stop.\nYour MySQL connection id is 1077318 (X protocol)\nServer version: 8.0.27 MySQL Community Server - GPL\nDefault schema `cookbook` accessible through db.\n<Session:cbuser@127.0.0.1:33060>\n MySQL  127.0.0.1:33060+ ssl  cookbook  JS >\n```", "```\n$ `mysqlsh --host=127.0.0.1  --user=cbuser --schema=cookbook --mysqlx`\nPlease provide the password for 'cbuser@127.0.0.1': ******\nMySQL Shell 8.0.22\n...\nYour MySQL connection id is 9143 (X protocol)\n\n$ `mysqlsh --host=127.0.0.1  --user=cbuser --schema=cookbook --mysql`\nPlease provide the password for 'cbuser@127.0.0.1': ******\nMySQL Shell 8.0.22\n...\nCreating a Classic session to 'cbuser@127.0.0.1/cookbook'\n```", "```\n MySQL  127.0.0.1:3306 ssl  cookbook  JS > `connectionData={` \n                                        -> `\"scheme\": \"mysql\", \"host\": \"127.0.0.1\",` \n                                        -> `\"user\": \"cbuser\", \"schema\": \"cookbook\"` \n                                        -> `}`\n{\n    \"host\": \"127.0.0.1\", \n    \"schema\": \"cookbook\", \n    \"scheme\": \"mysql\", \n    \"user\": \"cbuser\"\n}\n MySQL  127.0.0.1:3306 ssl  cookbook  JS > `shell.connect(connectionData, \"cbpass\")`\nCreating a Classic session to 'cbuser@127.0.0.1/cookbook'\n```", "```\nmysqlsh mysqlx://cbuser:cbpass@127.0.0.1/cookbook\n```", "```\n\\c mysql://cbuser:cbpass@127.0.0.1/cookbook\n```", "```\n MySQL  JS > `\\c mysql://cbuser:cbpass@127.0.0.1:33060/cookbook`\nCreating a Classic session to 'cbuser@127.0.0.1:33060/cookbook'\nMySQL Error 2007 (HY000): Protocol mismatch; server version = 11, client version = 10\n```", "```\n$ `mysqlsh --host=127.0.0.1 --port=3306 --user=cbuser --schema=cookbook --mx`\nPlease provide the password for 'cbuser@127.0.0.1:3306': ******\nMySQL Shell 8.0.22\n\nCopyright (c) 2016, 2020, Oracle and/or its affiliates.\nOracle is a registered trademark of Oracle Corporation and/or its affiliates.\nOther names may be trademarks of their respective owners.\n\nType '\\help' or '\\?' for help; '\\quit' to exit.\nCreating an X protocol session to 'cbuser@127.0.0.1:3306/cookbook' ↩\nMySQL Error 2027: Requested session assumes MySQL X Protocol but '127.0.0.1:3306' ↩\nseems to speak the classic MySQL protocol\n(Unexpected response received from server, msg-id:10)\n```", "```\n MySQL  127.0.0.1:33060+ ssl  cookbook  JS > `shell.status()`\nMySQL Shell version 8.0.22\n\nConnection Id:                61\nDefault schema:               cookbook\nCurrent schema:               cookbook\nCurrent user:                 cbuser@localhost\nSSL:                          Cipher in use: TLS_AES_256_GCM_SHA384 TLSv1.3\nUsing delimiter:              ;\nServer version:               8.0.22-13 Percona Server (GPL), Release '13', ↩\n                              Revision '6f7822f'\nProtocol version:             X protocol\nClient library:               8.0.22\nConnection:                   127.0.0.1 via TCP/IP\nTCP port:                     33060\nServer characterset:          utf8mb4\nSchema characterset:          utf8mb4\nClient characterset:          utf8mb4\nConn. characterset:           utf8mb4\nResult characterset:          utf8mb4\nCompression:                  Enabled (DEFLATE_STREAM)\nUptime:                       4 min 57.0000 sec\n```", "```\n MySQL  cookbook  JS >\n```", "```\n$ `mysqlsh cbuser:cbpass@127.0.0.1/cookbook --py`\n...\nDefault schema `cookbook` accessible through db.\n MySQL  cookbook  Py >\n```", "```\n MySQL  cookbook  SQL > `\\js`\nSwitching to JavaScript mode...\n MySQL  cookbook  JS > `\\py`\nSwitching to Python mode...\n MySQL  cookbook  Py > `\\sql`\nSwitching to SQL mode... Commands end with ;\n MySQL  cookbook  SQL >\n```", "```\n MySQL  cookbook  SQL > `delimiter |`\n MySQL  cookbook  SQL > `CREATE PROCEDURE get_client_info()`\n                     -> `BEGIN`\n                     -> `SELECT GROUP_CONCAT(ATTR_NAME, '=', ATTR_VALUE)` \n                     -> `FROM performance_schema.session_account_connect_attrs` \n                     -> `WHERE ATTR_NAME IN ('_client_name', '_client_version');`\n                     -> `END`\n                     -> `|`\nQuery OK, 0 rows affected (0.0163 sec)\n MySQL  cookbook  SQL > `delimiter ;`\n MySQL  cookbook  SQL > `CALL get_client_info();`\n+----------------------------------------------+\n| GROUP_CONCAT(ATTR_NAME, '=', ATTR_VALUE)     |\n+----------------------------------------------+\n| _client_name=libmysql,_client_version=8.0.22 |\n+----------------------------------------------+\n1 row in set (0.0017 sec)\n\nQuery OK, 0 rows affected (0.0017 sec)\n```", "```\n MySQL  JS > \\option --persist history.autoSave=1\n```", "```\n MySQL  cookbook  JS > `\\sql SELECT * FROM limbs WHERE arms >=2 ORDER BY arms;`\nFetching table and column names from `cookbook` for auto-completion...↩\nPress ^C to stop.\n+--------------+------+------+\n| thing        | legs | arms |\n+--------------+------+------+\n| human        |    2 |    2 |\n| armchair     |    4 |    2 |\n| Peg Leg Pete |    1 |    2 |\n| squid        |    0 |   10 |\n+--------------+------+------+\n4 rows in set (0.0002 sec)\n```", "```\n MySQL  cookbook  JS > `session.runSql(                      > \"SELECT * FROM limbs WHERE arms >=2 ORDER BY arms\")`\n+--------------+------+------+\n| thing        | legs | arms |\n+--------------+------+------+\n| human        |    2 |    2 |\n| armchair     |    4 |    2 |\n| Peg Leg Pete |    1 |    2 |\n| squid        |    0 |   10 |\n+--------------+------+------+\n4 rows in set (0.0014 sec)\n```", "```\n MySQL  cookbook  JS > `session.runSql(\"SELECT * FROM limbs ↩         WHERE arms >= ? AND legs != ? ↩         ORDER BY arms\", [2, 0])`\n+--------------+------+------+\n| thing        | legs | arms |\n+--------------+------+------+\n| human        |    2 |    2 |\n| armchair     |    4 |    2 |\n| Peg Leg Pete |    1 |    2 |\n+--------------+------+------+\n3 rows in set (0.0005 sec)\n```", "```\n MySQL  cookbook  JS > `for (i = 1;` \n                    ->  `i <= session.sql(\"SELECT MAX(arms) AS maxarms FROM limbs\").` ![1](Images/1.png)\n                    ->  `execute().fetchOne().` ![2](Images/2.png)\n                    ->  `getField('maxarms');` ![3](Images/3.png)\n                    ->  `i++)`  ![4](Images/4.png)\n                    -> `{`\n                    ->   `species=session.sql(\"SELECT COUNT(*) AS countarms \\`\n                    ->    `FROM limbs WHERE arms =?\").`\n                    ->    `bind(i).execute();` ![5](Images/5.png)\n                    ->   `if (species.hasData() && (armscount = species.fetchOne().`\n                    ->    `getField('countarms')) > 0 )` ![6](Images/6.png)\n                    ->   `{`\n                    ->     `print(\"We have \" + armscount + \" species with \" + i +` ![7](Images/7.png)\n                    ->     `(i == 1 ? \" arm\\n\" : \" arms\\n\"));`\n                    ->   `}`\n                    -> `}`\n                    -> \nWe have 1 species with 1 arm\nWe have 3 species with 2 arms\nWe have 1 species with 10 arms\n```", "```\n MySQL  cookbook  Py > `\\sql SELECT * FROM movies;`\n+----+------+----------------------------+\n| id | year | movie                      |\n+----+------+----------------------------+\n|  1 | 1997 | The Fifth Element          |\n|  2 | 1999 | The Phantom Menace         |\n|  3 | 2001 | The Fellowship of the Ring |\n|  4 | 2005 | Kingdom of Heaven          |\n|  5 | 2010 | Red                        |\n|  6 | 2011 | Unknown                    |\n+----+------+----------------------------+\n6 rows in set (0.0008 sec)\n```", "```\n MySQL  cookbook  Py > `session.run_sql(\"SELECT * FROM movies WHERE year < ?\",[2000])`\n+----+------+--------------------+\n| id | year | movie              |\n+----+------+--------------------+\n|  1 | 1997 | The Fifth Element  |\n|  2 | 1999 | The Phantom Menace |\n+----+------+--------------------+\n2 rows in set (0.0009 sec)\n```", "```\n MySQL  cookbook  Py > `myres=session.sql(\"SELECT actor, COUNT(movie) as movies,`↩ ![1](Images/1.png)\n                           `GROUP_CONCAT(year SEPARATOR ', ') AS years_string,`↩\n                          `COUNT(year) AS years FROM movies_actors` ↩\n                           `GROUP BY actor ORDER BY movies DESC\").`↩\n                           `execute().fetch_all()`\n MySQL  cookbook  Py > `for myrow in myres:` ![2](Images/2.png)\n                    -> `print(myrow[0] + \" was featured in \" + str(myrow[1]) +`↩ ![3](Images/3.png)\n                      `(\" movies\" if (myrow[1] > 1) else \" movie\") +` ↩\n                      `\" in \" + (\"years \" if (myrow[3] > 1) else \"the year \") +`↩\n                      `myrow[2] + \".\")`\n                    -> \nLiam Neeson was featured in 3 movies in years 2005, 1999, 2011.\nBruce Willis was featured in 2 movies in years 1997, 2010.\nIan Holm was featured in 2 movies in years 1997, 2001.\nOrlando Bloom was featured in 2 movies in years 2005, 2001.\nDiane Kruger was featured in 1 movie in the year 2011.\nElijah Wood was featured in 1 movie in the year 2001.\nEwan McGregor was featured in 1 movie in the year 1999.\nGary Oldman was featured in 1 movie in the year 1997.\nHelen Mirren was featured in 1 movie in the year 2010.\nIan McKellen was featured in 1 movie in the year 2001.\n```", "```\n MySQL  cookbook  JS > `session.getDefaultSchema().getTable('limbs').select()`\n+--------------+------+------+\n| thing        | legs | arms |\n+--------------+------+------+\n| human        |    2 |    2 |\n| insect       |    6 |    0 |\n| squid        |    0 |   10 |\n| fish         |    0 |    0 |\n| centipede    |   99 |    0 |\n| table        |    4 |    0 |\n| armchair     |    4 |    2 |\n| phonograph   |    0 |    1 |\n| tripod       |    3 |    0 |\n| Peg Leg Pete |    1 |    2 |\n| space alien  | NULL | NULL |\n+--------------+------+------+\n11 rows in set (0.0003 sec)\n```", "```\n MySQL  cookbook  JS > `session.getDefaultSchema().getTable('limbs').select().`\n                    -> `where('legs >= :legs').orderBy('legs').bind('legs', 4)`\n+-----------+------+------+\n| thing     | legs | arms |\n+-----------+------+------+\n| table     |    4 |    0 |\n| armchair  |    4 |    2 |\n| insect    |    6 |    0 |\n| centipede |   99 |    0 |\n+-----------+------+------+\n4 rows in set (0.0004 sec)\n```", "```\n MySQL  cookbook  JS > `limbs = session.getDefaultSchema().getTable('limbs')` ![1](Images/1.png)\n<Table:limbs>\n MySQL  cookbook  JS > `session.startTransaction()` ![2](Images/2.png)\nQuery OK, 0 rows affected (0.0006 sec)\n MySQL  cookbook  JS > `limbs.insert('thing', 'legs', 'arms').` ![3](Images/3.png)\n                    -> `values('cat', 4, 0).`\n                    -> `values('dog', 2, 2)`\n                    -> \nQuery OK, 2 items affected (0.0012 sec)\n\nRecords: 2  Duplicates: 0  Warnings: 0\n MySQL  cookbook  JS > `limbs.count()` ![4](Images/4.png)\n13\n MySQL  cookbook  JS > `limbs.update().set('legs', 4).set('arms', 0).`\n                    -> `where(\"thing='dog'\")` ![5](Images/5.png)\nQuery OK, 1 item affected (0.0012 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n MySQL  cookbook  JS > `limbs.select().where(\"thing='dog'\")` ![6](Images/6.png)\n+-------+------+------+\n| thing | legs | arms |\n+-------+------+------+\n| dog   |    4 |    0 |\n+-------+------+------+\n1 row in set (0.0004 sec)\n MySQL  cookbook  JS > `limbs.delete().where(\"thing='cat'\")` ![7](Images/7.png)\nQuery OK, 1 item affected (0.0010 sec)\n MySQL  cookbook  JS > `limbs.count()` ![8](Images/8.png)\n12\n MySQL  cookbook  JS > `session.rollback()` ![9](Images/9.png)\nQuery OK, 0 rows affected (0.0054 sec)\n MySQL  cookbook  JS > `limbs.count()` ![10](Images/10.png)\n11\n MySQL  cookbook  JS > `limbs.select().where(\"thing='dog' or thing='cat'\")`\nEmpty set (0.0010 sec)\n```", "```\n MySQL  cookbook  Py > `session.get_schema('cookbook').get_table('movies').select()` \n+----+------+----------------------------+\n| id | year | movie                      |\n+----+------+----------------------------+\n|  1 | 1997 | The Fifth Element          |\n|  2 | 1999 | The Phantom Menace         |\n|  3 | 2001 | The Fellowship of the Ring |\n|  4 | 2005 | Kingdom of Heaven          |\n|  5 | 2010 | Red                        |\n|  6 | 2011 | Unknown                    |\n+----+------+----------------------------+\n6 rows in set (0.0003 sec)\n```", "```\n MySQL  cookbook  Py > `movies=session.get_schema('cookbook').get_table('movies')`\n MySQL  cookbook  Py > `movies_actors=session.get_schema('cookbook').`↩\n                          `get_table('movies_actors')`\n```", "```\n MySQL  cookbook  Py > `session.start_transaction()`\nQuery OK, 0 rows affected (0.0003 sec)\n MySQL  cookbook  Py > `movies.insert('year', 'movie').`↩\n                          `values(2017, 'Darkest Hour')`\nQuery OK, 1 item affected (0.0013 sec)\n MySQL  cookbook  Py > `movies_actors.insert().`↩\n                          `values(1997, 'Darkest Hour', 'Gary Oldman')`\nQuery OK, 1 item affected (0.0011 sec)\n MySQL  cookbook  Py > `session.commit()`\nQuery OK, 0 rows affected (0.0075 sec)\n```", "```\n MySQL  cookbook  Py > `session.sql(\"SELECT * FROM movies` ↩\n                          `JOIN movies_actors USING(movie) WHERE actor = 'Gary Oldman'\")`\n+-------------------+----+------+------+-------------+\n| movie             | id | year | year | actor       |\n+-------------------+----+------+------+-------------+\n| The Fifth Element |  1 | 1997 | 1997 | Gary Oldman |\n| Darkest Hour      |  7 | 2017 | 1997 | Gary Oldman |\n+-------------------+----+------+------+-------------+\n2 rows in set (0.0012 sec)\n```", "```\n MySQL  cookbook  Py > `session.start_transaction()` ![1](Images/1.png)\nQuery OK, 0 rows affected (0.0007 sec)\n MySQL  cookbook  Py > `movies.update().set('year', 2017).where(\"movie='Darkest Hour'\")` ![2](Images/2.png)\nQuery OK, 0 items affected (0.0013 sec)\n\nRows matched: 1  Changed: 0  Warnings: 0\n MySQL  cookbook  Py > `movies_actors.update().set('year', 2017).`↩ ![3](Images/3.png)\n `where(\"movie='Darkest Hour'\")`\nQuery OK, 1 item affected (0.0012 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n MySQL  cookbook  Py > `session.commit()` ![4](Images/4.png)\nQuery OK, 0 rows affected (0.0073 sec)\n MySQL  cookbook  Py > `session.run_sql(\"SELECT * FROM movies JOIN movies_actors`↩ ![5](Images/5.png)\n                           `USING(movie) WHERE actor = 'Gary Oldman'\")`\n+-------------------+----+------+------+-------------+\n| movie             | id | year | year | actor       |\n+-------------------+----+------+------+-------------+\n| The Fifth Element |  1 | 1997 | 1997 | Gary Oldman |\n| Darkest Hour      |  7 | 2017 | 2017 | Gary Oldman |\n+-------------------+----+------+------+-------------+\n2 rows in set (0.0005 sec)\n```", "```\n MySQL  cookbook  Py > `session.start_transaction()`\nQuery OK, 0 rows affected (0.0006 sec)\n MySQL  cookbook  Py > `movies.delete().where(\"movie='Darkest Hour'\")`\nQuery OK, 1 item affected (0.0012 sec)\n MySQL  cookbook  Py > `movies_actors.delete().where(\"movie='Darkest Hour'\")`\nQuery OK, 1 item affected (0.0004 sec)\n MySQL  cookbook  Py > `session.commit()`\nQuery OK, 0 rows affected (0.0061 sec)\n```", "```\n MySQL  cookbook  JS > `collectionLimbs=session.getCurrentSchema().`\n                    ->  `createCollection('CollectionLimbs')`\n<Collection:CollectionLimbs>\n```", "```\n MySQL  cookbook  JS > `session.getCurrentSchema().`\n                    -> `dropCollection('collectionLimbs')`\n                    -> \n MySQL  cookbook  JS > `schema={`\n                    ->   `\"$schema\": \"http://json-schema.org/draft-07/schema\",`\n                    ->   `\"id\": \"http://example.com/cookbook.json\",`\n                    ->   `\"type\": \"object\",`\n                    ->   `\"description\": \"Table limbs as a collection\",`\n                    ->   `\"properties\": {`\n                    ->       `\"thing\": {\"type\": \"string\"},`\n                    ->       `\"legs\": {`\n                    ->           `\"anyOf\": [{\"type\": \"number\"},{\"type\": \"null\"}],`\n                    ->           `\"default\": 0`\n                    ->       `},`\n                    ->       `\"arms\": {`\n                    ->           `\"anyOf\": [{\"type\": \"number\"},{\"type\": \"null\"}],`\n                    ->           `\"default\": 0`\n                    ->       `}`\n                    ->   `},`\n                    ->   `\"required\": [\"thing\",\"legs\",\"arms\"]`\n                    -> `}`\n                    -> \n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\", \n    \"description\": \"Table limbs as a collection\", \n    \"id\": \"http://example.com/cookbook.json\", \n    \"properties\": {\n        \"arms\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"number\"\n                }, \n                {\n                    \"type\": \"null\"\n                }\n            ], \n            \"default\": 0\n        }, \n        \"legs\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"number\"\n                }, \n                {\n                    \"type\": \"null\"\n                }\n            ], \n            \"default\": 0\n        }, \n        \"thing\": {\n            \"type\": \"string\"\n        }\n    }, \n    \"required\": [\n        \"thing\", \n        \"legs\", \n        \"arms\"\n    ], \n    \"type\": \"object\"\n}\n MySQL  cookbook  JS > `collectionLimbs=session.getCurrentSchema().`\n                    -> `createCollection('collectionLimbs',`\n                    -> `{\"validation\": {\"level\": \"strict\", \"schema\": schema}})`\n                    -> \n<Collection:CollectionLimbs>\n```", "```\n MySQL  cookbook  JS > `{`\n                    ->   `limbs=session.getCurrentSchema().`\n                    ->     `getTable('limbs').select().execute();` ![1](Images/1.png)\n                    ->   `while (limb = limbs.fetchOneObject()) {` ![2](Images/2.png)\n                    ->     `collectionLimbs.add(` ![3](Images/3.png)\n                    ->       `mysqlx.expr(JSON.stringify(limb))` ![4](Images/4.png)\n                    ->       `).execute();` ![5](Images/5.png)\n                    ->   `}`\n                    -> `}`\n                    -> \nQuery OK, 1 item affected (0.0049 sec)\n```", "```\n MySQL  cookbook  JS > `collectionLimbs.count()`\n11\n MySQL  cookbook  JS > `collectionLimbs.find().limit(3)`\n{\n    \"_id\": \"00006002f0650000000000000060\",\n    \"arms\": 2,\n    \"legs\": 2,\n    \"thing\": \"human\"\n}\n{\n    \"_id\": \"00006002f0650000000000000061\",\n    \"arms\": 0,\n    \"legs\": 6,\n    \"thing\": \"insect\"\n}\n{\n    \"_id\": \"00006002f0650000000000000062\",\n    \"arms\": 10,\n    \"legs\": 0,\n    \"thing\": \"squid\"\n}\n3 documents in set (0.0010 sec)\n```", "```\n MySQL  cookbook  Py > `collectionLimbs=session.get_current_schema().`↩\n                          `get_collection('collectionLimbs')`\n```", "```\n MySQL  cookbook  Py > `collectionLimbs.find('legs > 3 and arms > 1')`\n{\n    \"_id\": \"00006002f0650000000000000066\",\n    \"arms\": 2,\n    \"legs\": 4,\n    \"thing\": \"armchair\"\n}\n1 document in set (0.0010 sec)\n```", "```\n MySQL  cookbook  Py > `collectionLimbs.add(mysqlx.expr(`↩\n                          `'{\"thing\": \"cat\", \"legs\": 2, \"arms\": 2}'))`\nQuery OK, 1 item affected (0.0093 sec)\n MySQL  cookbook  Py > `collectionLimbs.find('thing=\"cat\"')`\n{\n    \"_id\": \"00006002f065000000000000006b\",\n    \"arms\": 2,\n    \"legs\": 2,\n    \"thing\": \"cat\"\n}\n1 document in set (0.0012 sec)\n MySQL  cookbook  Py > `collectionLimbs.add(mysqlx.expr(`↩\n                          `'{\"thing\": \"dog\", \"legs\": 2, \"arms\": 2}'))`\nQuery OK, 1 item affected (0.0086 sec)\n```", "```\n MySQL  cookbook  Py > `collectionLimbs.add_or_replace_one(`↩\n                         `'00006002f065000000000000006b',`↩\n                         `{\"thing\": \"cat\", \"legs\": 4, \"arms\": 0})`\nQuery OK, 2 items affected (0.0056 sec)\n```", "```\n MySQL  cookbook  Py > `collectionLimbs.modify('thing = \"dog\"').set(\"legs\", 4).set(\"arms\", 0)` \nQuery OK, 1 item affected (0.0077 sec)\n\nRows matched: 1  Changed: 1  Warnings: 0\n```", "```\n MySQL  cookbook  Py > `collectionLimbs.find('thing in (\"dog\", \"cat\")')`\n{\n    \"_id\": \"00006002f065000000000000006b\",\n    \"arms\": 0,\n    \"legs\": 4,\n    \"thing\": \"cat\"\n}\n{\n    \"_id\": \"00006002f065000000000000006c\",\n    \"arms\": 0,\n    \"legs\": 4,\n    \"thing\": \"dog\"\n}\n2 documents in set (0.0013 sec)\n```", "```\n MySQL  cookbook  Py > `collectionLimbs.remove('thing in (\"dog\", \"cat\")')`\nQuery OK, 2 items affected (0.0119 sec)\n MySQL  cookbook  Py > `collectionLimbs.find('thing in (\"dog\", \"cat\")')`\nEmpty set (0.0011 sec)\n MySQL  cookbook  Py > `collectionLimbs.count()`\n11\n```", "```\n MySQL  cookbook  JS > `\\option resultFormat=tabbed`\n MySQL  cookbook  JS > `artist=session.getCurrentSchema().getTable('artist')`\n<Table:artist>\n MySQL  cookbook  JS > `artist.select()`\na_id\tname\n1\tDa Vinci\n2\tMonet\n4\tRenoir\n3\tVan Gogh\n4 rows in set (0.0009 sec)\n```", "```\n MySQL  cookbook  JS > `shell.options.set('resultFormat', 'vertical')`\n MySQL  cookbook  JS > `artist.select()`\n*************************** 1\\. row ***************************\na_id: 1\nname: Da Vinci\n*************************** 2\\. row ***************************\na_id: 2\nname: Monet\n*************************** 3\\. row ***************************\na_id: 4\nname: Renoir\n*************************** 4\\. row ***************************\na_id: 3\nname: Van Gogh\n4 rows in set (0.0009 sec)\n```", "```\n MySQL  cookbook  JS > `shell.options.set('resultFormat', 'json')`\n MySQL  cookbook  JS > `artist.select()`\n{\n    \"a_id\": 1,\n    \"name\": \"Da Vinci\"\n}\n{\n    \"a_id\": 2,\n    \"name\": \"Monet\"\n}\n{\n    \"a_id\": 4,\n    \"name\": \"Renoir\"\n}\n{\n    \"a_id\": 3,\n    \"name\": \"Van Gogh\"\n}\n4 rows in set (0.0008 sec)\n```", "```\n MySQL  cookbook  JS > `shell.options.set('resultFormat', 'json/raw')`\n MySQL  cookbook  JS > `artist.select()`\n{\"a_id\":1,\"name\":\"Da Vinci\"}\n{\"a_id\":2,\"name\":\"Monet\"}\n{\"a_id\":4,\"name\":\"Renoir\"}\n{\"a_id\":3,\"name\":\"Van Gogh\"}\n4 rows in set (0.0003 sec)\n```", "```\n MySQL  cookbook  JS > `shell.options.set('resultFormat', 'json/array')`\n MySQL  cookbook  JS > `artist.select()`\n[\n{\"a_id\":1,\"name\":\"Da Vinci\"},\n{\"a_id\":2,\"name\":\"Monet\"},\n{\"a_id\":4,\"name\":\"Renoir\"},\n{\"a_id\":3,\"name\":\"Van Gogh\"}\n]\n4 rows in set (0.0010 sec)\n```", "```\n$ `mysqlsh cbuser:cbpass@127.0.0.1:33060/cookbook \\`\n> `-i --execute=\"session.getSchema('cookbook').\\`\n> `getTable('artist').select().execute()\" \\`\n> `--result-format=json/array --quiet-start=2 \\`\n> `| head -n -1 \\`\n> `| jq '.[] | .name'`\n\"Da Vinci\"\n\"Monet\"\n\"Renoir\"\n\"Van Gogh\"\n```", "```\n$ `mysqlsh cbuser:cbpass@127.0.0.1:33060/cookbook \\`\n> `-i --execute=\"session.getSchema('cookbook').\\`\n> `getTable('artist').select().execute()\" \\`\n> `--result-format=json/array --quiet-start=2 \\`\n> `| jq '.[] | .name' 2>/dev/null`\n\"Da Vinci\"\n\"Monet\"\n\"Renoir\"\n\"Van Gogh\"\n```", "```\n MySQL  cookbook  JS > `session.getCurrentSchema().getTable('artist').select()`\n{\n    \"hasData\": true,\n    \"rows\": [\n        {\n            \"a_id\": 1,\n            \"name\": \"Da Vinci\"\n        },\n        {\n            \"a_id\": 2,\n            \"name\": \"Monet\"\n        },\n        {\n            \"a_id\": 4,\n            \"name\": \"Renoir\"\n        },\n        {\n            \"a_id\": 3,\n            \"name\": \"Van Gogh\"\n        }\n    ],\n    \"executionTime\": \"0.0007 sec\",\n    \"affectedRowCount\": 0,\n    \"affectedItemsCount\": 0,\n    \"warningCount\": 0,\n    \"warningsCount\": 0,\n    \"warnings\": [],\n    \"info\": \"\",\n    \"autoIncrementValue\": 0\n}\n```", "```\n MySQL  cookbook  SQL > `\\show thread`\nGENERAL\nThread ID:                1434\nConnection ID:            1382\nThread type:              FOREGROUND\nProgram name:             mysqlsh\nUser:                     sveta\nHost:                     localhost\nDatabase:                 cookbook\nCommand:                  Query\nTime:                     00:00:00\nState:                    executing\nTransaction state:        NULL\nPrepared statements:      0\nBytes received:           20280\nBytes sent:               40227\nInfo:                     SELECT json_object('tid',t.THR ... ↩\n                          JOIN information_schema.innodb\nPrevious statement:       NULL\n```", "```\n MySQL  cookbook  SQL > `\\show thread -c 1386`\nGENERAL\nThread ID:                1438\nConnection ID:            1386\nThread type:              FOREGROUND\nProgram name:             mysql\nUser:                     sveta\nHost:                     localhost\nDatabase:                 cookbook\nCommand:                  Sleep\nTime:                     00:05:44\nState:                    NULL\nTransaction state:        RUNNING\nPrepared statements:      0\nBytes received:           1720\nBytes sent:               29733\nInfo:                     NULL\nPrevious statement:       select * from adcount for update\n```", "```\n MySQL  cookbook  SQL > `\\show threads --foreground` ↩\n                           `--where \"nblocked > 0 or nblocking > 0\"` ↩\n                           `-o tid,cid,txid,txstate,nblocked,nblocking,info,pinfo`↩\n                           `--vertical`\n*************************** 1\\. row ***************************\n      tid: 1438\n      cid: 1386\n     txid: 292253\n  txstate: RUNNING\n nblocked: 1\nnblocking: 0\n     info: NULL\n    pinfo: select * from adcount for update\n*************************** 2\\. row ***************************\n      tid: 3320\n      cid: 3268\n     txid: 292254\n  txstate: LOCK WAIT\n nblocked: 0\nnblocking: 1\n     info: update adcount set impressions = impressions + 1 where id=3\n    pinfo: NULL\n```", "```\nUPDATE adcount SET impressions = impressions + 1 WHERE id=3;\n```", "```\nSELECT * FROM adcount FOR UPDATE;\n```", "```\n MySQL  cookbook  SQL > `\\show threads --help`\nNAME\n      threads - Lists threads that belong to the user who owns the current\n      session.\n\nSYNTAX\n      \\show threads [OPTIONS]\n      \\watch threads [OPTIONS]\n\nDESCRIPTION\n      This report may contain the following columns:\n...\n```", "```\nMySQL  cookbook  SQL > `\\watch query --nocls` ↩\n                          \t`SHOW GLOBAL STATUS LIKE 'Created\\_tmp\\_%tables'`\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 4758  |\n| Created_tmp_tables      | 25306 |\n+-------------------------+-------+\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 4758  |\n| Created_tmp_tables      | 25309 |\n+-------------------------+-------+\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 4758  |\n| Created_tmp_tables      | 25310 |\n+-------------------------+-------+\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 4760  |\n| Created_tmp_tables      | 25318 |\n+-------------------------+-------+\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 4760  |\n| Created_tmp_tables      | 25319 |\n+-------------------------+-------+\n...\n```", "```\n MySQL  cookbook  JS > `util.exportTable(`\n                    ->   `'limbs', 'BACKUP/cookbook/limbs.csv',` \n                    ->   `{dialect: \"csv-unix\"})`\nPreparing data dump for table `cookbook`.`limbs`\nData dump for table `cookbook`.`limbs` will not use an index\nRunning data dump using 1 thread.\nNOTE: Progress information uses estimated values and may not be accurate.\nData dump for table `cookbook`.`limbs` will be written to 1 file\n91% (11 rows / ~12 rows), 0.00 rows/s, 0.00 B/s\nDuration: 00:00:00s                            \nData size: 203 bytes                           \nRows written: 11                               \nBytes written: 203 bytes                       \nAverage throughput: 203.00 B/s                 \n\nThe dump can be loaded using:                  \nutil.importTable(\"BACKUP/cookbook/limbs.csv\", {\n    \"characterSet\": \"utf8mb4\",\n    \"dialect\": \"csv-unix\",\n    \"schema\": \"cookbook\",\n    \"table\": \"limbs\"\n})\n```", "```\n MySQL  cookbook  Py > `\\sql CREATE TABLE test.limbs LIKE limbs;`\nFetching table and column names from `cookbook` for auto-completion... ↩\nPress ^C to stop.\nQuery OK, 0 rows affected (0.0264 sec)\n MySQL  cookbook  Py > `util.import_table(\"BACKUP/cookbook/limbs.csv\",` ↩\n                          `{\"dialect\": \"csv-unix\", \"schema\": \"test\"})`\nImporting from file '/home/sveta/BACKUP/cookbook/limbs.csv' to table `test`.`limbs` ↩ \nin MySQL Server at 127.0.0.1:3306 using 1 thread\n[Worker000] limbs.csv: Records: 11  Deleted: 0  Skipped: 0  Warnings: 0\n100% (203 bytes / 203 bytes), 0.00 B/s\nFile '/home/sveta/BACKUP/cookbook/limbs.csv' (203 bytes) ↩\nwas imported in 0.0109 sec at 203.00 B/s\nTotal rows affected in test.limbs: Records: 11  Deleted: 0  Skipped: 0 Warnings: 0\n```", "```\n MySQL  cookbook  Py > `util.import_table(\"BACKUP/cookbook/limbs.csv\",` ↩\n                          `{\"dialect\": \"csv-unix\", \"schema\": \"test\"})`\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nSystemError: RuntimeError: Util.import_table: ↩\nA classic protocol session is required to perform this operation.\n```", "```\nERROR: The 'local_infile' global system variable must be set to ON ↩\nin the target server, after the server is verified to be trusted:\n```", "```\nSET GLOBAL local_infile=1;\n```", "```\n$  `mysqlsh -- util check-for-server-upgrade root@127.0.0.1:13000 --output-format=JSON`\nPlease provide the password for 'root@127.0.0.1:13000': \nSave password for 'root@127.0.0.1:13000'? [Y]es/[N]o/Ne[v]er (default No): \n{\n    \"serverAddress\": \"127.0.0.1:13000\",\n    \"serverVersion\": \"8.0.23-debug - Source distribution\",\n    \"targetVersion\": \"8.0.27\",\n    \"errorCount\": 0,\n    \"warningCount\": 0,\n    \"noticeCount\": 0,\n    \"summary\": \"No known compatibility errors or issues were found.\",\n...\n```", "```\n$ `mysqlsh cbuser:cbpass@127.0.0.1:33060/cookbook` \n          > `-- shell status`\nWARNING: Using a password on the command line interface ↩ \ncan be insecure.\nMySQL Shell version 8.0.22\n\nConnection Id:                23563\nDefault schema:               cookbook\nCurrent schema:               cookbook\nCurrent user:                 cbuser@localhost\nSSL:                          Cipher in use: ↩\n                              TLS_AES_256_GCM_SHA384 ↩ \n                              TLSv1.3\n...\n```", "```\n MySQL  cookbook  JS > `dba.deploySandboxInstance(13000,` \n                    -> `{\"portx\": 13010, \"mysqldOptions\": [\"log-bin=cookbook\"]})`\nA new MySQL sandbox instance will be created on this host in \n/home/sveta/mysql-sandboxes/13000\n\nWarning: Sandbox instances are only suitable for deploying and \nrunning on your local machine for testing purposes and are not \naccessible from external networks.\n\nPlease enter a MySQL root password for the new instance: \n\nDeploying new MySQL instance...\n\nInstance localhost:13000 successfully deployed and started.\nUse shell.connect('root@localhost:13000') to connect to the instance.\n```", "```\n MySQL  localhost:13000 ssl  JS > `shell.connect('root@localhost:13000')`\nCreating a session to 'root@localhost:13000'\nPlease provide the password for 'root@localhost:13000': \nFetching schema names for autocompletion... Press ^C to stop.\nClosing old connection...\nYour MySQL connection id is 13\nServer version: 8.0.22-13 Percona Server (GPL), Release '13', Revision '6f7822f'\nNo default schema selected; type \\use <schema> to set one.\n MySQL  localhost:13000 ssl  JS > `\\sql show variables like 'log_bin_basename';`\n+------------------+--------------------------------------------------------+\n| Variable_name    | Value                                                  |\n+------------------+--------------------------------------------------------+\n| log_bin_basename | /home/sveta/mysql-sandboxes/13000/sandboxdata/cookbook |\n+------------------+--------------------------------------------------------+\n1 row in set (0.0027 sec)\n```", "```\n MySQL  localhost:13000 ssl  JS > `dba.stopSandboxInstance(13000)`\nThe MySQL sandbox instance on this host in \n/home/sveta/mysql-sandboxes/13000 will be stopped\n\nPlease enter the MySQL root password for the instance 'localhost:13000': \n\nStopping MySQL instance...\n\nInstance localhost:13000 successfully stopped.\n```", "```\n MySQL  cookbook  Py > `dba.delete_sandbox_instance(13000)`\n\nDeleting MySQL instance...\n\nInstance localhost:13000 successfully deleted.\n```", "```\n$ `mysqlsh cbuser:cbpass@127.0.0.1:33060/cookbook -- dba kill-sandbox-instance 13000`\nWARNING: Using a password on the command line interface can be insecure.\n\nKilling MySQL instance...\n\nInstance localhost:1300 successfully killed.\n```", "```\nsession.getCurrentSchema().getCollection('CollectionLimbs').↩\n        addOrReplaceOne(myObject).execute()\n```", "```\nCollectionLimbs.save()\n```", "```\nmysql-js [cookbook]> `var CookbookCollection = {` \n                  ->  `// Collection where the object is stored`\n                  ->  `collection: null,`\n```", "```\n                  ->  `// Searches collection and returns first`\n                  ->  `// object that satisfy search condition.`\n                  -> `find: function(searchCondition) {` \n                  ->  `return this.collection.find(searchCondition).`\n                  -> `execute().fetchOne();` \n                  ->  `},`\n```", "```\n                  ->  `// Saves the object in the database`\n                  ->  `save: function() {`\n                  -> `// If we know _id of the object we are` \n                  ->  `// updating the existing one`\n                  ->  `// We use not so effective method addOrReplaceOne`\n                  ->  `// instead of modify for simplicity.`\n                  ->  `if ('_id' in this) {`\n                  ->  `this.collection.addOrReplaceOne(this._id,`\n                  ->  `// We use double conversion, because we cannot`\n                  ->  `// store an object with methods in the database`\n                  ->  `JSON.parse(`\n                  ->  `JSON.stringify(`\n                  ->  `this, Object.getOwnPropertyNames(`\n                  ->  `Object.getPrototypeOf(this))`\n                  ->  `)`\n                  ->  `)`\n                  ->  `)`\n                  ->  `} else {`\n                  ->  `// In case the object does not exist in the`\n                  -> `//  database yet, we add it and assign` \n                  ->  `// generated _id to its own property.`\n                  ->  `// This _id could be used later if we want to update`\n                  ->  `// or remove the database entry.`\n                  ->  `this._id = this.collection.add(`\n                  ->  `JSON.parse(`\n                  ->  `JSON.stringify(`\n                  ->  `this, Object.getOwnPropertyNames(`\n                  ->  `Object.getPrototypeOf(this))`\n                  ->  `)`\n                  ->  `)`\n                  ->  `).execute().getGeneratedIds()[0]`\n                  ->  `}`\n                  ->  `},`\n```", "```\n                  ->  `// Removes the entry from the database.`\n                  ->  `// Once removed we unset property _id of the object.`\n                  ->  `remove: function() {`\n                  ->  `this.collection.remove(\"_id = '\" + this._id + \"'\").`\n                  ->  `execute()`\n                  ->  `delete Object.getPrototypeOf(this)._id`\n                  ->  `delete this._id`\n                  ->  `}`\n                  -> `}`\n```", "```\nmysql-js [cookbook]> `CookbookCollection.collection=session.getCurrentSchema().`\n                  -> `getCollection('CollectionLimbs')`\n                  -> \n<Collection:CollectionLimbs>\n```", "```\nCookbookCollection.collection ↩\n.remove(\"thing='cat' or thing='dog'\")\n```", "```\nmysql-js [cookbook]> `var cat = {`\n                  ->  `thing: \"cat\",`\n                  ->  `arms: 2,`\n                  ->  `legs: 2`\n                  -> `}`\n                  ->\n```", "```\nmysql-js [cookbook]> `cat = Object.setPrototypeOf(CookbookCollection, cat)`\n{\n    \"arms\": 2, \n    \"collection\": <Collection:CollectionLimbs>, \n    \"find\": <Function:find>, \n    \"legs\": 2, \n    \"remove\": <Function:remove>, \n    \"save\": <Function:save>, \n    \"thing\": \"cat\"\n}\n```", "```\nmysql-js [cookbook]> `cat.save()`\n```", "```\nmysql-js [cookbook]> `CookbookCollection.find('thing = \"cat\"')`\n{\n    \"_id\": \"000060140a2d0000000000000007\", \n    \"arms\": 2, \n    \"legs\": 2, \n    \"thing\": \"cat\"\n}\n```", "```\nmysql-js [cookbook]> `cat._id`\n000060140a2d0000000000000007\n```", "```\nmysql-js [cookbook]> `cat.arms=0`\n0\nmysql-js [cookbook]> `cat.legs=4`\n4\nmysql-js [cookbook]> `cat.save()`\nmysql-js [cookbook]> `CookbookCollection.find('thing = \"cat\"')`\n{\n    \"_id\": \"000060140a2d0000000000000007\", \n    \"arms\": 0, \n    \"legs\": 4, \n    \"thing\": \"cat\"\n}\n```", "```\nmysql-js [cookbook]>  `cat.remove()`\n```", "```\nmysql-js [cookbook]> `cat._id`\nmysql-js [cookbook]>\n```", "```\n MySQL  cookbook  Py > `session.sql('SHOW CREATE TABLE patients')`\n*************************** 1\\. row ***************************\n       Table: patients\nCreate Table: CREATE TABLE `patients` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `national_id` char(32) DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `surname` varchar(255) DEFAULT NULL,\n  `gender` enum('F','M') DEFAULT NULL,\n  `age` tinyint unsigned DEFAULT NULL,\n  `additional_data` json DEFAULT NULL,\n  `diagnosis` varchar(255) DEFAULT NULL,\n  `result` enum('R','N','D') DEFAULT NULL↩\n   COMMENT 'R=Recovered, N=Not Recovered, D=Dead',\n  `date_arrived` date NOT NULL,\n  `date_departed` date DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1101 ↩\nDEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.0009 sec)\n```", "```\n     MySQL  cookbook  Py > `import sys`\n     MySQL  cookbook  Py > `sys.version`\n    3.7.7 (default, Aug 12 2020, 09:13:48) \n    [GCC 4.4.7 20120313 (Red Hat 4.4.7-23.0.1)]\n    ```", "```\n     MySQL  cookbook  Py > `sys.path.append(`↩\n     `\"/home/sveta/bin/python-3.7.7/lib/python3.7/site-packages\")`\n    ```", "```\nimport numpy\nfrom pandas import pandas\nimport random\nimport string\nfrom datetime import datetime\nfrom datetime import timedelta\n```", "```\n MySQL  cookbook  Py > `num_rows=1000`\n```", "```\n$ `head datasets/top-350-male-and-female-names-since-1848-2019-02-26.csv`\nRank,Female Name,Count,Male Name,Count_\n1,Mary,54276,John,108533\n2,Margaret,49170,William,87239\n3,Elizabeth,36556,James,69987\n4,Sarah,28230,David,62774\n5,Patricia,20689,Robert,56511\n6,Catherine,19713,Michael,51768\n7,Susan,19165,Peter,44758\n8,Helen,18881,Thomas,42467\n9,Emma,18192,George,39195\n```", "```\n MySQL  cookbook  Py > `female_names=pandas.\\`\n                    -> `read_csv(`\n                    ->  `\"top-350-male-and-female-names-since-1848-2019-02-26.csv\",`\n                    ->  `usecols=[\"Female Name\"]`\n                    -> `).rename(columns={'Female Name': 'name'})`\n                    -> \n MySQL  cookbook  Py > `male_names=pandas.\\`\n                    -> `read_csv(`\n                    ->  `\"top-350-male-and-female-names-since-1848-2019-02-26.csv\",`\n                    ->  `usecols=[\"Male Name\"]`\n                    -> `).rename(columns={'Male Name': 'name'})`\n                    ->\n```", "```\n MySQL  cookbook  Py > `female_names['gender']=(['F']*`↩\n                          `female_names.count()['name'])`\n MySQL  cookbook  Py > `male_names['gender']=(['M']*`↩\n                          `male_names.count()['name'])`\n```", "```\n MySQL  cookbook  Py > `names=pandas.\\`\n                    -> `concat([female_names, male_names],`\n                    ->  `ignore_index=True)`\n                    ->\n```", "```\nos.getcwd()\n```", "```\nos.chdir('/mysqlcookbook/recipes/datasets')\n```", "```\n MySQL  cookbook  Py > `names`\n          name gender\n0         Mary      F\n1     Margaret      F\n2    Elizabeth      F\n3        Sarah      F\n4     Patricia      F\n..         ...    ...\n695    Quentin      M\n696     Henare      M\n697        Joe      M\n698      Darcy      M\n699       Wade      M\n\n[700 rows x 2 columns]\n```", "```\n MySQL  cookbook  Py > `names=names.sample(num_rows, replace=True).\\`\n                    -> `set_index(pandas.Series(range(num_rows)))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `surnames=pandas.read_csv(\"Names_2010Census.csv\",` \n                    ->  `usecols=['name'], skipfooter=1, engine='python').\\`\n                    -> `rename(columns={'name': 'surname'})`\n                    ->\n```", "```\n MySQL  cookbook  Py > `surnames=surnames.sample(num_rows, replace=True).\\`\n                    -> `set_index(pandas.Series(range(num_rows)))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `diagnosises=pandas.read_csv('diagnosis.csv')`\n MySQL  cookbook  Py > `diagnosises`\n                               diagnosis  frequency\n0                Acute coronary syndrome        2.1\n1                Alcoholic liver disease        0.3\n2                              Pneumonia        3.6\n3  Chronic obstructive pulmonary disease        2.1\n4                Gastro-intestinal bleed        0.8\n5                          Heart failure        0.8\n6                                 Sepsis        0.8\n7                Urinary tract infection        2.4\n8                            Data Phobia        6.2\n```", "```\n MySQL  cookbook  Py > `diagnosises=diagnosises.sample(`\n                    ->  `num_rows, replace=True,`\n                    ->  `weights=diagnosises['frequency']`\n                    -> `).set_index(pandas.Series(range(num_rows)))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `results = pandas.DataFrame({`\n                    ->  `\"result\": [\"R\", \"N\", \"D\"],`\n                    ->  `\"frequency\": [6,3,1]`\n                    -> `})`\n                    ->\n```", "```\n MySQL  cookbook  Py > `results=results.sample(`\n                    ->  `num_rows, replace=True,`\n                    ->  `weights=results['frequency']`\n                    -> `).set_index(pandas.Series(range(num_rows)))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `patients=session.get_schema('cookbook').`↩\n                          `get_table('patients')`\n```", "```\n MySQL  cookbook  Py > `for i in range(num_rows):`\n```", "```\n MySQL  cookbook  Py > `national_id=str(random.randrange(10,99)) +\\`\n                    -> `''.join(random.sample(string.ascii_uppercase, 2)) + \\`\n                    -> `str(random.randrange(100000, 999999))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `age=random.randrange(15, 99)`\n```", "```\n MySQL  cookbook  Py > `date_arrived=datetime.\\`\n                    -> `strptime('2020-01-01', '%Y-%m-%d') +\\`\n                    -> `timedelta(days=random.randrange(365))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `date_departed=date_arrived +\\`\n                    -> `timedelta(days=random.randrange(60))`\n                    ->\n```", "```\n MySQL  cookbook  Py > `date_arrived=date_arrived.strftime('%Y-%m-%d')`\n MySQL  cookbook  Py > `date_departed=date_departed.strftime('%Y-%m-%d')`\n```", "```\n MySQL  cookbook  Py > `name=names['name'][i]`\n MySQL  cookbook  Py > `gender=names['gender'][i]`\n MySQL  cookbook  Py > `surname=surnames['surname'][i]`\n MySQL  cookbook  Py > `result=results['result'][i]`\n MySQL  cookbook  Py > `diagnosis=diagnosises['diagnosis'][i]`\n```", "```\n MySQL  cookbook  Py > `patients.insert(`\n                    ->  `'national_id', 'name', 'surname',`\n                    ->  `'gender', 'age', 'diagnosis',`\n                    ->  `'result', 'date_arrived', 'date_departed'`\n                    -> `).values(`\n                    ->  `national_id, name, surname,`\n                    ->  `gender, age, diagnosis,`\n                    ->  `result, date_arrived, date_departed`\n                    -> `).execute()`\n```", "```\ndef generate_patients_data(num_rows):\n    # read datasets\n    # names and genders\n    female_names = pandas.read_csv(\n        \"top-350-male-and-female-names-since-1848-2019-02-26.csv\", \n        usecols = [\"Female Name\"]\n    ).rename(columns = {'Female Name': 'name'})\n    female_names['gender'] = (['F']*female_names.count()['name'])\n    male_names = pandas.read_csv(\n        \"top-350-male-and-female-names-since-1848-2019-02-26.csv\", \n        usecols = [\"Male Name\"]\n    ).rename(columns = {'Male Name': 'name'})\n    male_names['gender'] = (['M']*male_names.count()['name'])\n    names = pandas.concat([female_names, male_names], ignore_index=True)\n    surnames = pandas.read_csv(\n        \"Names_2010Census.csv\", \n        usecols=['name'], skipfooter=1\n    ).rename(columns={'name': 'surname'})\n    # diagnosises\n    diagnosises = pandas.read_csv('diagnosis.csv')\n    # Possible results\n    results = pandas.DataFrame({\n        \"result\": [\"R\", \"N\", \"D\"], \n        \"frequency\": [6,3,1]\n    })\n    # Start building data\n    diagnosises = diagnosises.sample(\n        num_rows, replace=True, \n        weights=diagnosises['frequency']\n    ).set_index(pandas.Series(range(num_rows)))\n    results = results.sample(\n        num_rows, replace=True, \n        weights=results['frequency']\n    ).set_index(pandas.Series(range(num_rows)))\n    names=names.sample(\n        num_rows, replace=True\n    ).set_index(pandas.Series(range(num_rows)))\n    surnames=surnames.sample(\n        num_rows, replace=True\n    ).set_index(pandas.Series(range(num_rows)))\n    # Get table object\n    patients=session.get_schema('cookbook').get_table('patients')\n    # Loop, inserting rows\n    for i in range(num_rows):\n        national_id = str(random.randrange(10,99)) + \\\n            ''.join(random.sample(string.ascii_uppercase, 2)) + \\\n            str(random.randrange(100000, 999999))\n        age = random.randrange(15, 99)\n        date_arrived = datetime.strptime('2020-01-01', '%Y-%m-%d') + \\\n            timedelta(days=random.randrange(365))\n        date_departed = date_arrived + timedelta(days=random.randrange(60))\n        date_arrived = date_arrived.strftime('%Y-%m-%d')\n        date_departed = date_departed.strftime('%Y-%m-%d')\n        name = names['name'][i]\n        gender = names['gender'][i]\n        surname = surnames['surname'][i]\n        result = results['result'][i]\n        diagnosis = diagnosises['diagnosis'][i]\n        patients.insert(\n            'national_id', 'name', 'surname', \n            'gender', 'age', 'diagnosis', \n            'result', 'date_arrived', 'date_departed'\n        ).values(\n            national_id, name, surname, \n            gender, age, diagnosis, \n            result, date_arrived, date_departed\n        ).execute()\n```", "```\n MySQL  cookbook  Py >  `\\sql truncate table patients`\nQuery OK, 0 rows affected (0.0477 sec)\n MySQL  cookbook  Py >  `session.get_schema('cookbook').get_table('patients').count()`\n0\n MySQL  cookbook  Py >  `generate_patients_data(1000)`\n__main__:17: ParserWarning: Falling back to the 'python' engine ↩\nbecause the 'c' engine does not support skipfooter; ↩\nyou can avoid this warning by specifying engine='python'.\n MySQL  cookbook  Py >  `session.get_schema('cookbook').` ↩\n `get_table('patients').count()`\n1000\n MySQL  cookbook  Py >  `session.get_schema('cookbook').` ↩\n`get_table('patients').select().limit(10)`\n+----+-------------+----------+------------+--------+-----+-----------------+....\n| id | national_id | name     | surname    | gender | age | additional_data | ...\n+----+-------------+----------+------------+--------+-----+-----------------+....\n|  1 | 74LM282144  | May      | NESSELRODE | F      |  83 | NULL            | ...\n|  2 | 44PR883357  | Kathryn  | DAKROUB    | F      |  44 | NULL            | ...\n|  3 | 60JP130066  | Owen     | CIELINSKI  | M      |  47 | NULL            | ...\n|  4 | 28ST588095  | Diana    | KILAR      | F      |  35 | NULL            | ...\n|  5 | 77RP202627  | Beryl    | ANGIONE    | F      |  43 | NULL            | ...\n|  6 | 27MU569536  | Brian    | HOUDEK     | M      |  84 | NULL            | ...\n|  7 | 94AG787006  | Fredrick | WOHLMAN    | M      |  20 | NULL            | ...\n|  8 | 42BX974594  | Jarrod   | DECAPUA    | M      |  64 | NULL            | ...\n|  9 | 63XJ322387  | Ruth     | PAHUJA     | F      |  16 | NULL            | ...\n| 10 | 91AT797455  | Frances  | VANBRUGGEN | F      |  63 | NULL            | ...\n+----+-------------+----------+------------+--------+-----+-----------------+....\n\n+----+.....+-------------------------+--------+--------------+---------------+\n| id | ... | diagnosis               | result | date_arrived | date_departed |\n+----+.....+-------------------------+--------+--------------+---------------+\n|  1 | ... | Data Phobia             | D      | 2020-03-20   | 2020-04-26    |\n|  2 | ... | Data Phobia             | R      | 2020-03-20   | 2020-05-09    |\n|  3 | ... | Pneumonia               | R      | 2020-04-05   | 2020-04-23    |\n|  4 | ... | Acute coronary syndrome | R      | 2020-04-18   | 2020-05-01    |\n|  5 | ... | Pneumonia               | R      | 2020-01-31   | 2020-02-07    |\n|  6 | ... | Acute coronary syndrome | D      | 2020-01-25   | 2020-03-06    |\n|  7 | ... | Data Phobia             | R      | 2020-08-10   | 2020-09-04    |\n|  8 | ... | Pneumonia               | R      | 2020-02-12   | 2020-03-31    |\n|  9 | ... | Pneumonia               | N      | 2020-11-17   | 2020-12-19    |\n| 10 | ... | Sepsis                  | R      | 2020-12-11   | 2020-12-29    |\n+----+.....+-------------------------+--------+--------------+---------------+\n10 rows in set (0.0004 sec)\n```", "```\n MySQL  cookbook  JS > `\\source /cookbook/recipes/mysql_shell/CookbookCollection.js`\n MySQL  cookbook  JS > `CookbookCollection`\n{\n    \"collection\": null, \n    \"find\": <Function:find>, \n    \"remove\": <Function:remove>, \n    \"save\": <Function:save>\n}\n```", "```\n MySQL  cookbook  Py > `\\source /cookbook/recipes/mysql_shell/generate_patients_data.py`\n```", "```\n MySQL  cookbook  SQL > `\\source /cookbook/recipes/tables/patients.sql`\nQuery OK, 0 rows affected (0.0003 sec)\nQuery OK, 0 rows affected (0.0202 sec)\nQuery OK, 0 rows affected (0.0001 sec)\nQuery OK, 0 rows affected (0.0334 sec)\nQuery OK, 0 rows affected (0.0001 sec)\nQuery OK, 20 rows affected (0.0083 sec)\n\nRecords: 20  Duplicates: 0  Warnings: 0\n```", "```\nexports.CookbookCollection = { \n  // Collection where the object is stored\n  collection: null, \n  ...\n```", "```\nsys.path = [...sys.path, '/cookbook/recipes/mysql_shell'];\nconst cookbook=require('CookbookCollectionModule.js')\n```", "```\n MySQL  cookbook  JS > `cookbook`\n{\n    \"CookbookCollection\": {\n        \"collection\": null, \n        \"find\": <Function:find>, \n        \"remove\": <Function:remove>, \n        \"save\": <Function:save>\n    }\n}\n```", "```\npatients=session.get_schema('cookbook').get_table('patients')\n```", "```\npatients=mysqlsh.globals.session.get_schema('cookbook').get_table('patients')\n```", "```\nsys.path.append(\"/home/sveta/bin/python-3.7.7/lib/python3.7/site-packages\")\nsys.path.append(\"/cookbook/recipes/mysql_shell\")\n\nimport os\nos.chdir('/cookbook/recipes/datasets')\nimport cookbook\n```"]