["```\n$ ls build/static/js/\n2.d106afb5.chunk.js             2.d106afb5.chunk.js.map\n3.9e79b289.chunk.js.map         main.095e14c4.chunk.js.map\nruntime-main.b175c5d9.js.map    2.d106afb5.chunk.js.LICENSE.txt\n3.9e79b289.chunk.js             main.095e14c4.chunk.js\nruntime-main.b175c5d9.js\n$\n```", "```\n$ yarn run build\n$ ls build/static/js/\n2.d106afb5.chunk.js             2.d106afb5.chunk.js.map\n3.9e79b289.chunk.js.map         main.f5b66cc7.chunk.js.map\nruntime-main.b175c5d9.js.map    2.d106afb5.chunk.js.LICENSE.txt\n3.9e79b289.chunk.js             main.f5b66cc7.chunk.js\nruntime-main.b175c5d9.js\n$\n```", "```\n$ yarn add workbox-core\n$ yarn add workbox-precaching\n$ yarn add workbox-routing\n```", "```\nimport { clientsClaim } from 'workbox-core'\nimport { precacheAndRoute } from 'workbox-precaching'\n\nclientsClaim()\n\nprecacheAndRoute(self.__WB_MANIFEST)\n```", "```\nconst register = (pathToWorker, onInstall, onUpdate, onError) => {\n  // We will write this code shortly\n}\n\nconst registerWorker = () => {\n  register(\n    '/service-worker.js',\n    (reg) => console.info('Service worker installed', reg),\n    (reg) => console.info('Service worker updated', reg),\n    (err) => console.error('Service worker failed', err)\n  )\n}\n\nexport default registerWorker\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerWorker from './registerWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nregisterWorker()\n```", "```\nconst register = (pathToWorker, onInstall, onUpdate, onError) => {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator\n  ) {\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    // Do the loading and registering here\n  }\n}\n```", "```\nconst register = (pathToWorker, onInstall, onUpdate, onError) => {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator\n  ) {\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    window.addEventListener('load', async () => {\n      try {\n        const registration = await navigator.serviceWorker.register(\n          process.env.PUBLIC_URL + pathToWorker\n        )\n\n        // Code to check progress goes here\n      } catch (err) {\n        if (onError) {\n          onError(err)\n        }\n      }\n    })\n  }\n}\n```", "```\nconst register = (pathToWorker, onInstall, onUpdate, onError) => {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator\n  ) {\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    window.addEventListener('load', async () => {\n      try {\n        const registration = await navigator.serviceWorker.register(\n          process.env.PUBLIC_URL + pathToWorker\n        )\n\n        registration.onupdatefound = () => {\n          const worker = registration.installing\n          if (worker) {\n            worker.onstatechange = () => {\n              if (worker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  if (onUpdate) {\n                    onUpdate(registration)\n                  }\n                } else {\n                  if (onInstall) {\n                    onInstall(registration)\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        if (onError) {\n          onError(err)\n        }\n      }\n    })\n  }\n}\n```", "```\n$ yarn install -D workbox-webpack-plugin\n```", "```\nconst { InjectManifest } = require('workbox-webpack-plugin')\n\nmodule.exports = {\n  ....\n  plugins: [\n    ....\n    new InjectManifest({\n      swSrc: './src/service-worker.js',\n    }),\n  ],\n}\n```", "```\n$ yarn run build\n```", "```\nasset-manifest.json  logo192.png        service-worker.js.map\nfavicon.ico          manifest.json      static\nindex.html           robots.txt\nlogo512.png          service-worker.js\n```", "```\n{\n  \"files\": {\n    \"main.css\": \"/static/css/main.8c8b27cf.chunk.css\",\n    \"main.js\": \"/static/js/main.f5b66cc7.chunk.js\",\n    \"main.js.map\": \"/static/js/main.f5b66cc7.chunk.js.map\",\n    \"runtime-main.js\": \"/static/js/runtime-main.b175c5d9.js\",\n    \"runtime-main.js.map\": \"/static/js/runtime-main.b175c5d9.js.map\",\n    \"static/js/2.d106afb5.chunk.js\": \"/static/js/2.d106afb5.chunk.js\",\n    \"static/js/2.d106afb5.chunk.js.map\": \"/static/js/2.d106afb5.chunk.js.map\",\n    \"static/js/3.9e79b289.chunk.js\": \"/static/js/3.9e79b289.chunk.js\",\n    \"static/js/3.9e79b289.chunk.js.map\": \"/static/js/3.9e79b289.chunk.js.map\",\n    \"index.html\": \"/index.html\",\n    \"service-worker.js\": \"/service-worker.js\",\n    \"service-worker.js.map\": \"/service-worker.js.map\",\n    \"static/css/main.8c8b27cf.chunk.css.map\":\n        \"/static/css/main.8c8b27cf.chunk.css.map\",\n    \"static/js/2.d106afb5.chunk.js.LICENSE.txt\":\n        \"/static/js/2.d106afb5.chunk.js.LICENSE.txt\",\n    \"static/media/logo.6ce24c58.svg\": \"/static/media/logo.6ce24c58.svg\"\n  },\n  \"entrypoints\": [\n    \"static/js/runtime-main.b175c5d9.js\",\n    \"static/js/2.d106afb5.chunk.js\",\n    \"static/css/main.8c8b27cf.chunk.css\",\n    \"static/js/main.f5b66cc7.chunk.js\"\n  ]\n}\n```", "```\n$ yarn run start\n```", "```\n$ npm install -s serve\n$ serve -s build/\n ┌──────────────────────────────────────────────────┐\n │                                                  │\n │   Serving!                                       │\n │                                                  │\n │   - Local:            http://localhost:5000      │\n │   - On Your Network:  http://192.168.1.14:5000   │\n │                                                  │\n │   Copied local address to clipboard!             │\n │                                                  │\n └──────────────────────────────────────────────────┘\n```", "```\nimport { clientsClaim } from 'workbox-core'\nimport {\n  createHandlerBoundToURL,\n  precacheAndRoute,\n} from 'workbox-precaching'\nimport { registerRoute } from 'workbox-routing'\n\nclientsClaim()\n\nprecacheAndRoute(self.__WB_MANIFEST)\n\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')\nregisterRoute(({ request, url }) => {\n  if (request.mode !== 'navigate') {\n    return false\n  }\n  if (url.pathname.startsWith('/_')) {\n    return false\n  }\n  if (url.pathname.match(fileExtensionRegexp)) {\n    return false\n  }\n  return true\n}, createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'))\n```", "```\n$ yarn run build\n```", "```\n$ serve -s build/\n```", "```\n$ npx create-react-app appname --template cra-template-pwa\n```", "```\nimport { clientsClaim } from 'workbox-core'\nimport { ExpirationPlugin } from 'workbox-expiration'\nimport {\n  precacheAndRoute,\n  createHandlerBoundToURL,\n} from 'workbox-precaching'\nimport { registerRoute } from 'workbox-routing'\nimport { StaleWhileRevalidate } from 'workbox-strategies'\n\nclientsClaim()\n\nprecacheAndRoute(self.__WB_MANIFEST)\n\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')\nregisterRoute(({ request, url }) => {\n  if (request.mode !== 'navigate') {\n    return false\n  }\n\n  if (url.pathname.startsWith('/_')) {\n    return false\n  }\n\n  if (url.pathname.match(fileExtensionRegexp)) {\n    return false\n  }\n\n  return true\n}, createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'))\n\nregisterRoute(\n  ({ url }) =>\n    url.origin === self.location.origin &&\n    url.pathname.endsWith('.png'),\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [new ExpirationPlugin({ maxEntries: 50 })],\n  })\n)\n\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting()\n  }\n})\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.unregister()\n\nreportWebVitals()\n```", "```\nserviceWorkerRegistration.register({\n  onInstall: (registration) => {\n    console.log('Service worker installed')\n  },\n  onUpdate: (registration) => {\n    console.log('Service worker updated')\n  },\n})\n```", "```\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n<link href=\"https://fonts.googleapis.com/css2?family=Fascinate&display=swap\"\n      rel=\"stylesheet\">\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.register()\n\nreportWebVitals()\n```", "```\nprecacheAndRoute(self.__WB_MANIFEST)\n```", "```\nregisterRoute(\n  ({ url }) => url.origin === 'https://fonts.googleapis.com'\n  // TODO Add handler\n)\n```", "```\nregisterRoute(\n  ({ url }) => url.origin === 'https://fonts.googleapis.com',\n  new StaleWhileRevalidate({\n    cacheName: 'stylesheets',\n  })\n)\n```", "```\nregisterRoute(\n  ({ url }) => url.origin === 'https://fonts.gstatic.com',\n  new CacheFirst({\n    cacheName: 'fonts',\n    plugins: [\n      new CacheableResponsePlugin({\n        statuses: [0, 200],\n      }),\n      new ExpirationPlugin({\n        maxAgeSeconds: 60 * 60 * 24 * 7,\n        maxEntries: 5,\n      }),\n    ],\n  })\n)\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.register()\n\nreportWebVitals()\n```", "```\nserviceWorkerRegistration.register({\n  onInstall: (registration) => {},\n  onUpdate: (registration) => {},\n})\n```", "```\nself.addEventListener('message', (event) => {\n  // handle messages here\n})\n```", "```\nserviceWorkerRegistration.register({\n  onUpdate: (registration) => {\n    registration.waiting.postMessage({ type: 'SKIP_WAITING' })\n  },\n})\n```", "```\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting()\n  }\n})\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.register({\n  onUpdate: (registration) => {\n    registration.waiting.postMessage({ type: 'SKIP_WAITING' })\n    window.location.reload()\n  },\n})\n\nreportWebVitals()\n```", "```\nfunction App() {\n  const startTask = () => {\n    // Start task here\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        {'serviceWorker' in navigator && (\n          <button onClick={startTask}>Do slow thing</button>\n        )}\n      </header>\n    </div>\n  )\n}\n```", "```\nconst startTask = () => {\n  Notification.requestPermission((permission) => {\n    navigator.serviceWorker.ready.then(() => {\n      const notifyMe = permission === 'granted'\n      // Then run task\n    })\n  })\n}\n```", "```\nconst startTask = () => {\n  Notification.requestPermission((permission) => {\n    navigator.serviceWorker.ready.then(() => {\n      const notifyMe = permission === 'granted'\n      navigator.serviceWorker.controller.postMessage({\n        type: 'DO_SLOW_THING',\n        notifyMe,\n      })\n    })\n  })\n}\n```", "```\nself.addEventListener('message', (event) => {\n  ...\n  if (event.data && event.data.type === 'DO_SLOW_THING') {\n    // Code for slow task here\n  }\n})\n```", "```\nself.addEventListener('message', (event) => {\n  ...\n  if (event.data && event.data.type === 'DO_SLOW_THING') {\n    setTimeout(() => {\n      console.log('Slow thing finished!')\n      // TODO: Send notification here\n    }, 20000)\n  }\n})\n```", "```\nself.addEventListener('message', (event) => {\n  ...\n  if (event.data && event.data.type === 'DO_SLOW_THING') {\n    setTimeout(() => {\n      console.log('Slow thing finished!')\n      if (event.data.notifyMe) {\n        self.registration.showNotification('Slow thing finished!', {\n          body: 'Now get on with your life',\n          icon: '/logo512.png',\n          vibrate: [100, 100, 100, 200, 200, 200, 100, 100, 100],\n          // tag: 'some-id-if-you-do-not-want-duplicates'\n        })\n      }\n    }, 20000)\n  }\n})\n```", "```\n$ yarn run build\n```", "```\n$ serve -s build\n```", "```\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close()\n  // TODO Go back to the application\n})\n```", "```\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close()\n  if (self.clients.openWindow) {\n    self.clients.openWindow('/')\n  }\n})\n```", "```\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close()\n\n  event.waitUntil(\n    self.clients\n      .matchAll({\n        type: 'window',\n      })\n      .then((clientList) => {\n        const returnPath = '/'\n\n        const tab = clientList.find((t) => {\n          return t.url === self.location.origin + returnPath\n        })\n        if (tab && 'focus' in tab) {\n          tab.focus()\n        } else if (self.clients.openWindow) {\n          self.clients.openWindow(returnPath)\n        }\n      })\n  )\n})\n```", "```\n$ yarn run build\n```", "```\nconst express = require('express')\nconst app = express()\n\napp.use(express.json())\napp.use(express.static('build'))\n\napp.post('/endpoint', (request, response) => {\n  console.log('Server received data', request.body)\n  response.send('OK')\n})\n\napp.listen(8000, () => console.log('Launched on port 8000!'))\n```", "```\n$ node server\n```", "```\n$ node server\nLaunched on port 8000!\nServer received data { timeIs: '2021-05-09T18:59:37.280Z' }\nServer received data { timeIs: '2021-05-09T18:59:37.720Z' }\nServer received data { timeIs: '2021-05-09T18:59:38.064Z' }\nServer received data { timeIs: '2021-05-09T18:59:38.352Z' }\n```", "```\nimport React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App() {\n  const sendData = () => {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({ timeIs: new Date() }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    fetch('/endpoint', options)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <button onClick={sendData}>Send data to server</button>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nimport { NetworkOnly } from 'workbox-strategies'\nimport { BackgroundSyncPlugin } from 'workbox-background-sync'\n\n// Other service worker code here....\n\nregisterRoute(\n  //endpoint/,\n  new NetworkOnly({\n    plugins: [\n      new BackgroundSyncPlugin('endPointQueue1', {\n        maxRetentionTime: 24 * 60,\n      }),\n    ],\n  }),\n  'POST'\n)\n```", "```\n$ node server\nLaunched on port 8000!\nServer received data { timeIs: '2021-05-09T21:26:11.068Z' }\nServer received data { timeIs: '2021-05-09T21:02:44.647Z' }\nServer received data { timeIs: '2021-05-09T21:02:45.647Z' }\n```", "```\nimport React, { useEffect, useState } from 'react'\n\nconst MyInstaller = ({ children }) => {\n  const [installEvent, setInstallEvent] = useState()\n\n  useEffect(() => {\n    window.addEventListener('beforeinstallprompt', (event) => {\n      event.preventDefault()\n      setInstallEvent(event)\n    })\n  }, [])\n\n  return (\n    <>\n      {installEvent && (\n        <button\n          onClick={async () => {\n            installEvent.prompt()\n            await installEvent.userChoice\n            setInstallEvent(null)\n          }}\n        >\n          Install this app!\n        </button>\n      )}\n      {children}\n    </>\n  )\n}\n\nexport default MyInstaller\n```", "```\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyInstaller>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </MyInstaller>\n    </div>\n  )\n}\n```", "```\n$ yarn run build\n$ serve -s build\n```", "```\n$ yarn run start\n```", "```\nself.addEventListener('install', (event) => {\n  // Cache image here\n})\n```", "```\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open('fallback').then((cache) => {\n      cache.add('/comingSoon.png')\n    })\n  )\n})\n```", "```\nsetCatchHandler(({ event }) => {\n  if (event.request.destination === 'image') {\n    return caches.match('/comingSoon.png')\n  }\n  return Response.error()\n})\n```", "```\nsetDefaultHandler(new NetworkOnly())\n```", "```\nimport * as navigationPreload from 'workbox-navigation-preload'\n...\nnavigationPreload.enable()\n```"]