- en: Chapter 16\. Create, Read, Update, and Delete Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I love paper notebooks and keep one with me at nearly all times. Usually they
    are relatively inexpensive and I quickly fill them with half-formed thoughts.
    Not long ago I purchased a pricier hardback notebook, with a lovely cover and
    fancy paper stock. At the time of purchase, I had grand ambitions of the types
    of sketches and planning that would happen within that notebook, but it sat completely
    empty on my desk for months. Eventually, I put it on a shelf and went back to
    my standard notebook brand.
  prefs: []
  type: TYPE_NORMAL
- en: Much like my fancy notebook, our app is useful only if our users are able to
    interact with it. You may recall from our API development that the Notedly application
    is a “CRUD” (create, read, update, and delete) application. An authenticated user
    can create new notes, read notes, update the content of a note or a note’s status
    as a favorite, and delete a note. In this chapter, we’ll implement all of this
    functionality within our web user interface. To accomplish these tasks, we’ll
    be writing GraphQL mutations and queries.
  prefs: []
  type: TYPE_NORMAL
- en: Creating New Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently we have the means to view notes, but not a way to create them. This
    is akin to having a notebook without a pen. Let’s add the ability for users to
    create new notes. We’ll do this by creating a `textarea` form in which users can
    write the note. When the user submits the form, we’ll perform a GraphQL mutation
    to create the note in our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let’s create the `NewNote` component at *src/pages/new.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s set up the new route in our *src/pages/index.js* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We know that we’ll be both creating new notes as well as updating existing notes.
    To accommodate this behavior, let’s create a new component called `NoteForm`,
    which will serve as the markup and React state for note form editing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create a new file at *src/components/NoteForm.js*. The component will
    consist of a form element containing a text area along with some minimal styles.
    The functionality will be much like our `UserForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to reference our `NoteForm` component in our `NewNote` page
    component. In *src/pages/new.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With these updates, navigating to *http://localhost:1234/new* will display our
    form ([Figure 16-1](#web_note_form)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the note form component](assets/jsev_1601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-1\. Our NewNote component presents the user with a large text area
    and Save button
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'With the form complete, we can go about writing our mutation to create the
    new note. In *src/pages/new.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code we are performing a `newNote` mutation when the form is
    submitted. If the mutation is successful, the user is redirected to the individual
    note page. You may notice that the `newNote` mutation requests quite a bit of
    data. This matches the data requested by the `note` mutation, ideally updating
    Apollo’s cache for quick navigation to the individual note component.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, Apollo aggressively caches our queries, which is helpful
    for speeding up our application’s navigation. Unfortunately, this also means a
    user could visit a page and not see an update they’ve just made. We can manually
    update Apollo’s cache, but an easier way to accomplish this is to use Apollo’s
    `refetchQueries` feature to intentionally update the cache when performing a mutation.
    To do this, we’ll need access to our prewritten queries. Up until now, we’ve been
    including them at the top of a component file, but let’s move them to their own
    *query.js* file. Create a new file at */src/gql/query.js* and add each of our
    note queries as well as our `IS_LOGGED_IN` query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Reusable Queries and Mutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving forward, we will keep all of our queries and mutations separate from
    our components This will allow us to easily reuse them in our application and
    is also useful for [mocking](https://oreil.ly/qo9uE) during testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in *src/pages/new.js* we can request that our mutation refetch the `GET_NOTES`
    query by importing the query and adding the `refetchQueries` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final step will be to add a link to our */new* page, so that users can
    easily navigate to it. In the *src/components/Navigation.js* file, add a new link
    item as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With this, our users are able to navigate to the new note page, type a note,
    and save the note to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Reading User Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is currently capable of reading our note feed as well as individual
    notes, but we are not yet querying the notes of authenticated users. Let’s write
    two GraphQL queries to create a feed of notes by the user as well as their favorites.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/gql/query.js*, add a `GET_MY_NOTES` query and update the exports like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in *src/pages/mynotes.js*, import the query and display the notes using
    the `NoteFeed` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can repeat this process to make the “favorites” page. First, in *src/gql/query.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in *src/pages/favorites.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let’s update our *src/pages/new.js* file to refetch the `GET_MY_NOTES`
    query, to ensure that a cached list of user notes is updated when the note is
    created. In *src/pages/new.js*, first update the GraphQL query import statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And then update the mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With these changes, we now can perform all of the read operations within our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently once a user writes a note, they have no way to make an update to it.
    To address this, we want to enable note editing in our application. Our GraphQL
    API has an `updateNote` mutation, which accepts a note ID and content as parameters.
    If the note exists in the database, the mutation will update the stored content
    with the content sent in the mutation.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we can create a route at */edit/NOTE_ID* that will place
    the existing note content in a form `textarea`. When a user clicks Save, we’ll
    submit the form and perform the `updateNote` mutation.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a new route where our notes will be edited. To begin, we can make
    a duplicate of our *src/pages/note.js* page and name it *edit.js*. For now, this
    page will simply display the note.
  prefs: []
  type: TYPE_NORMAL
- en: 'At *src/pages/edit.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can make the page navigable by adding it to our routes in *src/pages/index.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With this, if you navigate to a note page at */note/ID* and swap it for */edit/ID*
    you’ll see a render of the note itself. Let’s change this so that it instead displays
    the note content presented in a form’s `textarea`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/pages/edit.js*, remove the import statement of the `Note` component
    and replace it with the `NoteForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now we can update our `EditNote` component to use our editing form. We can pass
    the content of the note to our form component by using the `content` property.
    Though our GraphQL mutation will accept updates only from the original author,
    we can also limit displaying the form to the note’s author, to avoid confusing
    other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a new query to the *src/gql/query.js* file to get the current user,
    their user ID, and a list of favorited note IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/pages/edit.js*, import the `GET_ME` query and include a user check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now able to edit a note in the form, but clicking the button does not
    yet save our changes. Let’s write our GraphQL `updateNote` mutation. Similar to
    our file of queries, let’s create a file to hold our mutations. In *src/gql/mutation*,
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With our mutation written, we can import it and update our component code to
    call the mutation when the button is clicked. To do this, we will add a `useMutation`
    hook. When the mutation is complete, we’ll redirect the user to the note page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we’ll want to display an “Edit” link to users, but only if they are
    the author of the note. In our application, we will need to check to ensure that
    the ID of the current user matches the ID of the note author. To implement this
    behavior, we’ll be touching several components.
  prefs: []
  type: TYPE_NORMAL
- en: Now we could implement our functionality directly within the `Note` component,
    but let’s instead create a component specifically for logged-in user interactions
    at *src/components/NoteUser.js*. In this React component we will perform a GraphQL
    query for the current user ID and provide a routable link to the edit page. With
    this information, we can begin by including our required libraries and setting
    up a new React component. Within the React component, we will include an edit
    link, which will route the user to the edit page for the note. For now, the user
    will see this link regardless of who owns the note.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update *src/components/NoteUser.js* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will update our `Note` component to perform a local `isLoggedIn` state
    query. We can then conditionally render our `NoteUser` component based on the
    logged-in state of the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first import the GraphQL libraries to perform the query along with our
    `NoteUser` component. In *src/components/Note.js*, add the following at the top
    of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can update our JSX component to check the logged-in state. If the user
    is logged in, we’ll display the `NoteUser` component; otherwise, we’ll display
    the favorite count.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Unauthenticated Edits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though we will be hiding the edit link in the UI, users could still navigate
    to a note’s edit screen without being the note owner. Thankfully, our GraphQL
    API is designed to prevent anyone but the note owner from editing the note’s content.
    Though we won’t be doing it in this book, a good additional step would be to update
    the *src/pages/edit.js* component to redirect a user if they are not the note
    owner.
  prefs: []
  type: TYPE_NORMAL
- en: With this change, logged-in users are able to see an edit link at the top of
    each note. Clicking the link will navigate to an edit form, regardless of who
    is the owner of the note. Let’s address this by updating our `NoteUser` component
    to query for the current user’s ID and display the edit link only if it matches
    the ID of the note author.
  prefs: []
  type: TYPE_NORMAL
- en: 'First in *src/components/NoteUser.js*, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With this change, only the note’s original author will see the edit link in
    the UI ([Figure 16-2](#web-edit-link)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the edit link](assets/jsev_1602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-2\. Only the note’s author will see the edit link
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Deleting Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our CRUD application is still missing the ability to delete a note. We can
    write a button UI component that, when clicked, will perform a GraphQL mutation,
    deleting the note. Let’s start by creating a new component at *src/components/DeleteNote.js*.
    Since we will be performing a redirect within a nonroutable component, we will
    use React Router’s `withRouter` higher-order component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can write our mutation. Our GraphQL API has a `deleteNote` mutation,
    which returns a boolean of `true` if the note is deleted. When the mutation completes,
    we’ll redirect the user to the */mynotes* page of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in *src/gql/mutation.js*, write the mutation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in *src/components/DeleteNote*, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can import the new `DeleteNote` component within our *src/components/NoteUser.js*
    file, displaying it only to a note’s author:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With this mutation written, logged-in users are now able to delete a note with
    the click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: Toggling Favorites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last piece of user functionality missing from our application is the ability
    to add and remove “favorite” notes. Let’s follow our pattern of creating a component
    for this feature and integrating it into our application. First, create a new
    component at *src/components/FavoriteNote.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we add any functionality, let’s go ahead and incorporate this component
    into our *src/components/NoteUser.js* component. First, import the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, within our JSX, include a reference to the component. You may recall that
    when we wrote our `GET_ME` query, we included a list of favorited note IDs, which
    we’ll make use of here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You’ll notice that we’re passing three properties to our `FavoriteNote` component.
    First is our `me` data, which will include the current user’s ID as well as a
    list of notes favorited by that user. Second, the `noteID` of the current note.
    And finally is the `favoriteCount`, which is the current total number of user
    favorites.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can return to our *src/components/FavoriteNote.js* file. In this file,
    we’ll store the current number of favorites as state and check to see if the current
    note ID is in the existing list of user favorites. We’ll change the text that
    the user sees based on the state of the user’s favorite. When the user clicks
    the button, it will call our `toggleFavorite` mutation, which will either add
    or remove the favorite from the user’s list. Let’s begin by updating the component
    to use state to control the click functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding changes we’re updating the state when a user clicks, but
    we’re not yet calling our GraphQL mutation. Let’s complete this component by writing
    the mutation and adding it to the component. The result is shown in [Figure 16-3](#user_actions_final).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/gql/mutation.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/components/FavoriteNote.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of the application with links to create, update, read, and delete
    a note.](assets/jsev_1603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-3\. A logged-in user will be able to create, read, update, and delete
    notes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we’ve turned our site into a fully functioning CRUD (create,
    read, update, delete) application. We are now able to implement GraphQL queries
    and mutations based on the state of a signed-in user. The ability to build user
    interfaces that integrate CRUD user interactions will provide a solid foundation
    for building all sorts of web applications. With this functionality, we’ve completed
    the MVP (minimum viable product) of our app. In the next chapter, we’ll deploy
    the application to a web server.
  prefs: []
  type: TYPE_NORMAL
