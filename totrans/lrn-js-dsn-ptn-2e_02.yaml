- en: Chapter 2\. “Pattern”-ity Testing, Proto-Patterns, and the Rule of Three
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the moment a new pattern is proposed to its potential widespread adoption,
    a pattern may have to go through multiple rounds of deep inspection by the design
    community and software developers. This chapter talks about this journey of a
    newly introduced “proto-pattern” through a “pattern”-ity test until it is eventually
    recognized as a pattern if it meets the *rule of three*.
  prefs: []
  type: TYPE_NORMAL
- en: This and the next chapter explore the approach to structuring, writing, presenting,
    and reviewing nascent design patterns. If you’d prefer to learn established design
    patterns first, you can skip these two chapters for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: What Are Proto-Patterns?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that not every algorithm, best practice, or solution represents what
    might be considered a complete pattern. There may be a few key ingredients missing,
    and the pattern community is generally wary of something claiming to be one without
    an extensive and critical evaluation. Even if something is presented to us which
    *appears* to meet the criteria for a pattern, we should not consider it as one
    until it has undergone suitable periods of scrutiny and testing by others.
  prefs: []
  type: TYPE_NORMAL
- en: Looking back upon Alexander’s work once more, he claims that a pattern should
    be both a process and a “thing.” This definition is obtuse as he follows by saying
    that it is the process that should create the “thing.” This is why patterns generally
    focus on addressing a visually identifiable structure; we should be able to visually
    depict (or draw) a picture representing the structure resulting from placing the
    pattern into practice.
  prefs: []
  type: TYPE_NORMAL
- en: The “Pattern” Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may often come across the term “proto-pattern” when studying design patterns.
    What is this? Well, a pattern that has not yet conclusively passed the “pattern”-ity
    tests is usually referred to as a proto-pattern. Proto-patterns may result from
    the work of someone who has established a particular solution worthy of sharing
    with the community. However, due to its relatively young age, the community has
    not had the opportunity to vet the proposed solution suitably.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the individual(s) sharing the pattern may not have the time or
    interest in going through the “pattern”-ity process and might release a short
    description of their proto-pattern instead. Brief descriptions or snippets of
    this type of pattern are known as *patlets*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The work involved in comprehensively documenting a qualified pattern can be
    pretty daunting. Looking back at some of the earliest work in the field of design
    patterns, a pattern may be considered “good” if it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Solves a particular problem
  prefs: []
  type: TYPE_NORMAL
- en: Patterns are not supposed to just capture principles or strategies. They need
    to capture solutions. This is one of the most essential ingredients of a good
    pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Does not have an obvious solution
  prefs: []
  type: TYPE_NORMAL
- en: We can find that problem-solving techniques often attempt to derive from well-known
    first principles. The best design patterns usually provide solutions to issues
    indirectly—this is considered a necessary approach for the most challenging problems
    related to design.
  prefs: []
  type: TYPE_NORMAL
- en: Describes a proven concept
  prefs: []
  type: TYPE_NORMAL
- en: Design patterns require proof that they function as described, and without this
    proof, the design cannot be seriously considered. If a pattern is highly speculative
    in nature, only the brave will attempt to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Describes a relationship
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it may appear that a pattern describes a type of module. Despite
    what the implementation looks like, the official description of the pattern must
    describe much deeper system structures and mechanisms that explain its relationship
    to code.
  prefs: []
  type: TYPE_NORMAL
- en: We would be forgiven for thinking that a proto-pattern that fails to meet guidelines
    isn’t worth learning from; however, this is far from the truth. Many proto-patterns
    are actually quite good. I am not saying that all proto-patterns are worth looking
    at, but there are quite a few useful ones in the wild that could assist us with
    future projects. Use your best judgment with the above list in mind, and you’ll
    be fine in your selection process.
  prefs: []
  type: TYPE_NORMAL
- en: Rule of Three
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the additional requirements for a pattern to be valid is that it displays
    some recurring phenomenon. You can often qualify this in at least three key areas,
    referred to as the rule of three. To show recurrence using this rule, one must
    demonstrate the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Fitness of purpose
  prefs: []
  type: TYPE_NORMAL
- en: How is the pattern considered successful?
  prefs: []
  type: TYPE_NORMAL
- en: Usefulness
  prefs: []
  type: TYPE_NORMAL
- en: Why is the pattern considered successful?
  prefs: []
  type: TYPE_NORMAL
- en: Applicability
  prefs: []
  type: TYPE_NORMAL
- en: Is the design worthy of being a pattern because it has broader applicability?
    If so, this needs to be explained. When reviewing or defining a pattern, it is
    vital to keep these areas in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has shown how every proposed proto-pattern may not always be accepted
    as a pattern. The next chapter shares the essential elements and best practices
    for structuring and documenting patterns so that the community can easily understand
    and consume them.
  prefs: []
  type: TYPE_NORMAL
