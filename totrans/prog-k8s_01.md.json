["```\n$ cat cnat-rocks-example.yaml\napiVersion: cnat.programming-kubernetes.info/v1alpha1\nkind: At\nmetadata:\n  name: cnrex\nspec:\n  schedule: \"2019-07-03T02:00:00Z\"\n  containers:\n  - name: shell\n    image: centos:7\n    command:\n    - \"bin/bash\"\n    - \"-c\"\n    - echo \"Kubernetes native rocks!\"\n\n$ kubectl apply -f cnat-rocks-example.yaml\ncnat.programming-kubernetes.info/cnrex created\n```", "```\n// manageReplicas checks and updates replicas for the given ReplicaSet.\n// It does NOT modify <filteredPods>.\n// It will requeue the replica set in case of an error while creating/deleting pods.\nfunc (rsc *ReplicaSetController) manageReplicas(\n\tfilteredPods []*v1.Pod, rs *apps.ReplicaSet,\n) error {\n    diff := len(filteredPods) - int(*(rs.Spec.Replicas))\n    rsKey, err := controller.KeyFunc(rs)\n    if err != nil {\n        utilruntime.HandleError(\n        \tfmt.Errorf(\"Couldn't get key for %v %#v: %v\", rsc.Kind, rs, err),\n        )\n        return nil\n    }\n    if diff < 0 {\n        diff *= -1\n        if diff > rsc.burstReplicas {\n            diff = rsc.burstReplicas\n        }\n        rsc.expectations.ExpectCreations(rsKey, diff)\n        klog.V(2).Infof(\"Too few replicas for %v %s/%s, need %d, creating %d\",\n        \trsc.Kind, rs.Namespace, rs.Name, *(rs.Spec.Replicas), diff,\n        )\n        successfulCreations, err := slowStartBatch(\n        \tdiff,\n        \tcontroller.SlowStartInitialBatchSize,\n        \tfunc() error {\n        \t\tref := metav1.NewControllerRef(rs, rsc.GroupVersionKind)\n                err := rsc.podControl.CreatePodsWithControllerRef(\n            \t    rs.Namespace, &rs.Spec.Template, rs, ref,\n                )\n                if err != nil && errors.IsTimeout(err) {\n                \treturn nil\n                }\n                return err\n            },\n        )\n        if skippedPods := diff - successfulCreations; skippedPods > 0 {\n            klog.V(2).Infof(\"Slow-start failure. Skipping creation of %d pods,\" +\n            \t\" decrementing expectations for %v %v/%v\",\n            \tskippedPods, rsc.Kind, rs.Namespace, rs.Name,\n            )\n            for i := 0; i < skippedPods; i++ {\n                rsc.expectations.CreationObserved(rsKey)\n            }\n        }\n        return err\n    } else if diff > 0 {\n        if diff > rsc.burstReplicas {\n            diff = rsc.burstReplicas\n        }\n        klog.V(2).Infof(\"Too many replicas for %v %s/%s, need %d, deleting %d\",\n        \trsc.Kind, rs.Namespace, rs.Name, *(rs.Spec.Replicas), diff,\n        )\n\n        podsToDelete := getPodsToDelete(filteredPods, diff)\n        rsc.expectations.ExpectDeletions(rsKey, getPodKeys(podsToDelete))\n        errCh := make(chan error, diff)\n        var wg sync.WaitGroup\n        wg.Add(diff)\n        for _, pod := range podsToDelete {\n            go func(targetPod *v1.Pod) {\n                defer wg.Done()\n                if err := rsc.podControl.DeletePod(\n                \trs.Namespace,\n                \ttargetPod.Name,\n                \trs,\n                ); err != nil {\n                    podKey := controller.PodKey(targetPod)\n                    klog.V(2).Infof(\"Failed to delete %v, decrementing \" +\n                    \t\"expectations for %v %s/%s\",\n                    \tpodKey, rsc.Kind, rs.Namespace, rs.Name,\n                    )\n                    rsc.expectations.DeletionObserved(rsKey, podKey)\n                    errCh <- err\n                }\n            }(pod)\n        }\n        wg.Wait()\n\n        select {\n        case err := <-errCh:\n            if err != nil {\n                return err\n            }\n        default:\n        }\n    }\n    return nil\n}\n```", "```\nvar err error\nfor retries := 0; retries < 10; retries++ {\n    foo, err = client.Get(\"foo\", metav1.GetOptions{})\n    if err != nil {\n        break\n    }\n\n    <update-the-world-and-foo>\n\n    _, err = client.Update(foo)\n    if err != nil && errors.IsConflict(err) {\n        continue\n    } else if err != nil {\n        break\n    }\n}\n```", "```\nkind: Pod\nmetadata:\n  name: foo\n  resourceVersion: 57\nspec:\n  ...\nstatus:\n  ...\n```"]