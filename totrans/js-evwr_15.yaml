- en: Chapter 14\. Working with Apollo Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I remember my first internet connection vividly. My computer’s modem would
    dial in to a local number connected to my internet service provider (ISP), setting
    me free on the web. As magical as this felt at the time, it is a far cry from
    the instant, always-on connections that we use today. Here’s what the process
    looked like:'
  prefs: []
  type: TYPE_NORMAL
- en: Sit down at my computer and open the ISP software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Connect, and wait for the modem to dial the number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the connection is successful, hear the glorious “modem sounds.” If not, such
    as during peak hours when the lines may be overloaded and busy, try again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once connected, receive a success notification and browse the web in all of
    its GIF-filled 90s glory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This cycle may seem arduous, but it still represents the way in which services
    speak to each other: they request a connection, make that connection, send a request,
    and get something back in return. Our client applications will work in the same
    manner. We will first make a connection to our server API application and, if
    successful, make requests to that server.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll use Apollo Client to connect to our API. Once we’ve connected,
    we’ll write a GraphQL query, which will be used to display data on a page. We’ll
    also introduce pagination, both within an API query and in our interface components.
  prefs: []
  type: TYPE_NORMAL
- en: Running the API Locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The development of our web client application will require access to a local
    instance of our API. If you’ve been following along with the book, you may already
    have the Notedly API and its database up and running on your machine. If not,
    I’ve added instructions to [Appendix A](app01.html#appendix-api) on how to get
    a copy of the API up and running along with some sample data. If you already have
    the API running, but would like some additional data to work with, run `npm run
    seed` from the root of the API project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Apollo Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Much like Apollo Server, Apollo Client offers a number of helpful features to
    simplify working with GraphQL within JavaScript UI applications. Apollo Client
    provides libraries for connecting a web client to an API, local caching, GraphQL
    syntax, local state management, and more. We’ll also be using Apollo Client with
    a React application, but Apollo also offers libraries for Vue, Angular, Meteor,
    Ember, and Web Components.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll want to ensure that our *.env* file contains a reference to our
    local API URI. This will allow us to use our local API instance in development,
    while pointing to our product API when we release our application to a public
    web server. In our *.env* file, we should have a `API_URI` variable with our local
    API server’s address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our code bundler, Parcel, is configured to automatically work with *.env* files.
    Any time we want to reference an *.env* variable in our code, we can use `process.``env.`*`VARIABLE_NAME`*.
    This will allow us to use unique values in local development, production, and
    any other environment that we may need (such as staging or continuous integration).
  prefs: []
  type: TYPE_NORMAL
- en: 'With the address stored in an environment variable, we are ready to connect
    our web client to our API server. Working in our *src/App.js* file, first we need
    to import the Apollo packages that we’ll be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With these imported, we can configure a new Apollo Client instance, passing
    it the API URI, initiating the cache, and enabling the use of the local Apollo
    developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can connect our React application to our Apollo Client by wrapping
    it in an `ApolloProvider`. We’ll replace our empty `<div>` tags with `<ApolloProvider>`
    and include our client as a connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Overall, our *src/App.js* file will now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With our client connected to our API server, we can now integrate GraphQL queries
    and mutations into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Querying an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we query an API, we are requesting data. In a UI client, we want to be
    able to query that data and display it to the user. Apollo enables us to compose
    queries to fetch data. We can then update React components to display the data
    to the end user. We can explore the use of queries by writing a `noteFeed` query,
    which will return a feed of the latest notes to the user and display it on the
    application’s home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I am first writing a query, I find the following process useful:'
  prefs: []
  type: TYPE_NORMAL
- en: Consider what data the query needs to return.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the query in the GraphQL Playground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate the query into the client application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s follow this process in drafting our query. If you followed along in the
    API portion of the book, you may recall that the `noteFeed` query returns a list
    of 10 notes along with a `cursor`, which indicates the position of the last note
    returned, and a `hasNextPage` boolean, which allows us to determine if there are
    additional notes to load. We can view our schema within the GraphQL Playground,
    allowing us to see all of the data options available. For our query, we’ll most
    likely require the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in our GraphQL Playground we can flesh this out into a GraphQL query.
    We’ll be writing this a bit more verbosely than the queries from a server chapter,
    by naming the query and providing an optional variable named `cursor`. To use
    the GraphQL Playground, first ensure that the API server is running, and then
    visit *http://localhost:4000/api*. In the GraphQL Playground, add the following
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the GraphQL Playground, also add a “query variable” to test out the use
    of the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To test out this variable, replace the empty string with the ID value of any
    of the notes in our database ([Figure 14-1](#web-first-query)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the noteFeed query in GraphQL Playground](assets/jsev_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. Our noteFeed query in the GraphQL Playground
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now that we know that our query is properly written, we can confidently integrate
    it into our web application. In the *src/pages/home.js* file, import the `useQuery`
    library as well as the GraphQL syntax via the `gql` library from `@apollo/client`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can integrate the query into our React application. To do this, we’ll
    pass our GraphQL query string to Apollo’s `useQuery` React hook. Our hook will
    return an object containing one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`'
  prefs: []
  type: TYPE_NORMAL
- en: The data returned by the query, if successful.
  prefs: []
  type: TYPE_NORMAL
- en: '`loading`'
  prefs: []
  type: TYPE_NORMAL
- en: The loading state, which is set to `true` when the data is being fetched. This
    allows us to display a loading indicator to our users.
  prefs: []
  type: TYPE_NORMAL
- en: '`error`'
  prefs: []
  type: TYPE_NORMAL
- en: If our data fails to fetch, an error is returned to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can update our `Home` component to include our query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve done everything successfully, you should see a “The data loaded!”
    message on the home page of our application ([Figure 14-2](#web-data-loaded)).
    We’ve also included a `console.log` statement, which will print our data to the
    browser console. Taking a look at the structure of data results can be a helpful
    guidepost when integrating the data into the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the application, successfully connected to the data set](assets/jsev_1402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. If our data has been successfully fetched, our component will
    display a “The data loaded!” message and the data will print to the console
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, let’s integrate the data we receive into the application. To do this,
    we will `map` over the array of notes returned within our data. React requires
    that each result be assigned a unique key, for which we’ll use the individual
    note’s ID. To begin, we’ll display the username of the author for each note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using JavaScript’s map() Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven’t worked with JavaScript’s `map()` method before, the syntax can
    seem a bit intimidating at first. The `map()` method allows you to perform an
    action for items within an array. This can be incredibly useful when you’re working
    with data returned from an API, allowing you to perform actions such as displaying
    each item in a certain way within the template. To learn more about `map()`, I
    recommend reading the [MDN Web Docs guide](https://oreil.ly/Oca3y).
  prefs: []
  type: TYPE_NORMAL
- en: If there is data in our database, you should now see a list of usernames on
    the page ([Figure 14-3](#web-username-data)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Usernames from our data, printed to the screen](assets/jsev_1403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-3\. Usernames from our data, printed to the screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that we have successfully mapped over our data, we can write the rest of
    our component. Since our notes are written in Markdown, let’s import a library
    that will allow us to render Markdown to the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/pages/home.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can update our UI to include the author’s avatar, the author’s username,
    the date the note was created, the number of favorites that a note has, and finally
    the content of the note itself. In *src/pages/home.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Whitespace in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React strips the whitespace between elements on new lines. Using `{' '}` in
    our markup is a way of manually adding whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see a complete list of notes in your browser. Before we move
    on to styling them, however, there is an opportunity for a small refactor. This
    is our first page displaying notes, but we know that we will be making several
    more. On other pages we will need to display individual notes, as well as feeds
    of other note types (such as “my notes” and “favorites”). Let’s go ahead and create
    two new components: *src/components/Note.js* and *src/components/NoteFeed.js*.'
  prefs: []
  type: TYPE_NORMAL
- en: In *src/components/Note.js*, we’ll include the markup for an individual note.
    To accomplish this, we’ll pass each of our component functions a property containing
    the appropriate content.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the *src/components/NoteFeed.js* component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can update the *src/pages/home.js* component to reference our `NoteFeed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With this refactor, we’ll now be able to easily re-create note and note feed
    instances across our application.
  prefs: []
  type: TYPE_NORMAL
- en: Some Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have written our components and can view our data, we can add some
    style. One of the most obvious opportunities for improvement is in the way that
    our “created at” date displays. To address this, we’ll use the [`date-fns` library](https://date-fns.org),
    which provides small components for working with dates in JavaScript. In *src/components/Note.js*,
    import the library and update the date markups to apply the conversion as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'With our date formatted, we can use the Styled Components library to update
    the note layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We would also be well served to add some space and a light border between the
    notes in our *NoteFeed.js* component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: With these updates, we’ve introduced layout styles to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently our application consists of three routes, each of which is static.
    These routes are located at a static URL and will always make the same data request.
    However, applications commonly need dynamic routes and queries based upon those
    routes. As an example, every tweet on Twitter.com is assigned a unique URL at
    *twitter.com/<username>/status/<tweet_id>*. This allows users to link and share
    individual tweets both within the Twitter ecosystem as well as anywhere on the
    web.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, in our application notes can only be accessed within a feed, but
    we want to allow users to view and link to individual notes. To accomplish this
    we’ll set up dynamic routing in our React application as well as an individual
    note GraphQL query. Our goal is for users to be able to access routes at */note/<note_id>*.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we’ll create a new page component at *src/pages/note.js*. We will
    pass our `props` (property) object to the component, which includes the `match`
    property via React Router. This property contains information about how the route
    path matches the URL. This will give us access to the URL parameters through `match.params`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can add a corresponding route to our *src/pages/index.js* file. This
    route will include an ID parameter indicated with `:id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, visiting *http://localhost:1234/note/123* will print `ID: 123` to our
    page. To test it out, replace the ID parameter with anything of your choosing,
    such as */note/pizza* or */note**/GONNAPARTYLIKE1999*. This is pretty cool, but
    not very useful. Let’s update our *src/pages/note.js* component to make a GraphQL
    query for the note with the ID found in the URL. To do this, we’ll use the `note`
    query from our API as well as our `Note` React component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, navigating to a URL with an ID parameter will render either the corresponding
    note or an error message. Finally, let’s update our *src/components/NoteFeed.js*
    component to display a link to the individual note in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, at the top of the file, import `{Link}` from React Router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, update the JSX to include a link to the note page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: With this, we are using dynamic routes in our application and enabling users
    to view individual notes.
  prefs: []
  type: TYPE_NORMAL
- en: Pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently we are only retrieving the 10 most recent notes within our application’s
    home page. If we want to display additional notes, we need to enable pagination.
    You may recall from the beginning of this chapter and the development of our API
    server that our API returns a `cursor`, which is the ID of the last note returned
    in a page of results. Additionally, the API returns the `hasNextPage` boolean,
    which is `true` if there are additional notes found in our database. When making
    a request to our API, we can pass it a cursor argument, which will return the
    next 10 items.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, if we have a list of 25 objects (with corresponding IDs of 1–25),
    when we make an initial request it will return items 1–10 as well as a `cursor`
    value of `10` and a `hasNextPage` value of `true`. If we make a request, passing
    a `cursor` value of 10, we will receive items 11–20, with a `cursor` value of
    `20` and a `hasNextPage` value of `true`. Finally, if we make a third request,
    passing it a `cursor` of `20`, we will receive items 21–25, with a `cursor` value
    of `25` and a `hasNextPage` value of `false`. This is exactly the logic we’ll
    be implementing within our `noteFeed` query.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, let’s update our *src/pages/home.js* file to make paginated queries.
    In our UI, when a user clicks a See More button, the next 10 notes should load
    on the page. We’ll want this to happen without any page refreshes. To do this
    we need to include the `fetchMore` argument within our query component and display
    the `Button` component only when `hasNextPage` is `true`. For now we’ll write
    this directly into our home page component, but it could easily be isolated into
    its own component or become part of the `NoteFeed` component.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Conditionals in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example we are conditionally displaying the “Load more” button
    using an inline `if` statement with the `&&` operator. If `hasNextPage` is true,
    the button is displayed. You can read more about conditional rendering in the
    [official React documentation](https://oreil.ly/a_F5s).
  prefs: []
  type: TYPE_NORMAL
- en: Now we can update the `<Button>` component to use an `onClick` handler. When
    a user clicks the button, we’ll want to use the `fetchMore` method to make an
    additional query and append the returned data to our page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The previous code might look a little gnarly, so let’s break it down. Our `<Button>`
    component includes an `onClick` handler. When the button is clicked, a new query
    is executed using the `fetchMore` method, passing the `cursor` value returned
    in the previous query. Once returned, `updateQuery` is executed, which updates
    our `cursor` and `hasNextPage` values and combines the results into a single array.
    The `__typename` is the name of the query, which is included in Apollo’s results.
  prefs: []
  type: TYPE_NORMAL
- en: With this change, we are able to view all of the notes from our note feed. Try
    it out yourself by scrolling to the bottom of your note feed. If your database
    contains more than 10 notes, the button will be visible. Clicking “Load more”
    will add the next `noteFeed` result to the page.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve covered a lot of ground in this chapter. We’ve set up Apollo Client to
    work with our React application and integrated multiple GraphQL queries into our
    UI. The power of GraphQL is demonstrated in the ability to write single queries
    that return precisely the data that a UI requires. In the next chapter we’ll integrate
    user authentication into our application, allowing users to log in and view their
    notes and favorites.
  prefs: []
  type: TYPE_NORMAL
