["```\nwindow.emailListModule = {\n  renderList() {}\n  // ...\n}\n\nwindow.emailComposerModule = {\n  renderComposer() {}\n  // ...\n}\n\nwindow.appModule = {\n  renderApp() {\n    window.emailListModule.renderList()\n    window.emailComposerModule.renderComposer()\n  }\n}\n```", "```\n$LAB\n  .script('/emailBaseModule.js').wait()\n  .script('/emailListModule.js')\n  .script('/emailComposerModule.js')\n```", "```\n// emailBaseModule.js\nvar emailList = require('emailListModule')\nvar emailComposer = require('emailComposerModule')\n\nmodule.exports.renderBase = function() {\n  // ...\n}\n```", "```\ndefine('emailBaseModule',\n  ['require', 'exports', 'emailListModule', 'emailComposerModule'],\n  function(require, exports, emailListModule, emailComposerModule) {\n    exports.renderBase = function() {\n      // ...\n    }\n  }\n)\n```", "```\n// emailBaseModule.js\nimport emailList from 'emailListModule'\nimport emailComposer from 'emailComposerModule'\n\nexport function renderBase() {\n  // ...\n}\n```", "```\n// a.ts\nexport function foo() {}\nexport function bar() {}\n\n// b.ts\nimport {foo, bar} from './a'\nfoo()\nexport let result = bar()\n```", "```\n// c.ts\nexport default function meow(loudness: number) {}\n\n// d.ts\nimport meow from './c' // Note the lack of {curlies}\nmeow(11)\n```", "```\n// e.ts\nimport * as a from './a'\na.foo()\na.bar()\n```", "```\n// f.ts\nexport * from './a'\nexport {result} from './b'\nexport meow from './c'\n```", "```\n// g.ts\nexport let X = 3\nexport type X = {y: string}\n\n// h.ts\nimport {X} from './g'\n\nlet a = X + 1         // X refers to the value X\nlet b: X = {y: 'z'}   // X refers to the type X\n```", "```\nlet locale = await import('locale_us-en')\n```", "```\nimport {locale} from './locales/locale-us'\n\nasync function main() {\n  let userLocale = await getUserLocale()\n  let path = ./locales/locale-${userLocale}\n  let localeUS: typeof locale = await import(path)\n}\n```", "```\nimport {something} from './a/legacy/commonjs/module'\n```", "```\nimport * as fs from 'fs'\nfs.readFile('some/file.txt')\n```", "```\n`import` `fs` `from` `'fs'`\nfs.readFile('some/file.txt')\n\n```", "```\n// Get.ts\nnamespace Network {\n  export function get<T>(url: string): Promise<T> {\n    // ...\n  }\n}\n\n// App.ts\nnamespace App {\n  Network.get<GitRepo>('https://api.github.com/repos/Microsoft/typescript')\n}\n```", "```\nnamespace Network {\n  export namespace HTTP {\n    export function get\t<T>(url: string): Promise\t<T> {\n      // ...\n    }\n  }\n  export namespace TCP {\n    listenOn(port: number): Connection {\n      //...\n    }\n    // ...\n  }\n  export namespace UDP {\n    // ...\n  }\n  export namespace IP {\n    // ...\n  }\n}\n\n```", "```\n// HTTP.ts\nnamespace Network {\n  export namespace HTTP {\n    export function get<T>(url: string): Promise<T> {\n      // ...\n    }\n  }\n}\n\n// UDP.ts\nnamespace Network {\n  export namespace UDP {\n    export function send(url: string, packets: Buffer): Promise<void> {\n      // ...\n    }\n  }\n}\n\n// MyApp.ts\nNetwork.HTTP.get<Dog[]>('http://url.com/dogs')\nNetwork.UDP.send('http://url.com/cats', new Buffer(123))\n```", "```\n// A.ts\nnamespace A {\n  export namespace B {\n    export namespace C {\n      export let d = 3\n    }\n  }\n}\n\n// MyApp.ts\nimport d = A.B.C.d\n\nlet e = d * 3\n```", "```\n// HTTP.ts\nnamespace Network {\n  export function request<T>(url: string): T {\n    // ...\n  }\n}\n\n// HTTP2.ts\nnamespace Network {\n  // Error TS2393: Duplicate function implementation.\n  export function request<T>(url: string): T {\n    // ...\n  }\n}\n```", "```\n// HTTP.ts\nnamespace Network {\n  export function request<T>(url: string): T\n}\n\n// HTTP2.ts\nnamespace Network {\n  export function request<T>(url: string, priority: number): T\n}\n\n// HTTPS.ts\nnamespace Network {\n  export function request<T>(url: string, algo: 'SHA1' | 'SHA256'): T\n}\n```", "```\n// Flowers.ts\nnamespace Flowers {\n  export function give(count: number) {\n    return count + ' flowers'\n  }\n}\n```", "```\nlet Flowers\n(function (Flowers) { ![1](assets/1.png)\n  function give(count) {\n    return count + ' flowers'\n  }\n  Flowers.give = give ![2](assets/2.png)\n})(Flowers || (Flowers = {})) ![3](assets/3.png)\n\n```"]