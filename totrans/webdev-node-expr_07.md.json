["```\ndocument.write('<h1>Please Don\\'t Do This</h1>')\ndocument.write('<p><span class=\"code\">document.write</span> is naughty,\\n')\ndocument.write('and should be avoided at all costs.</p>')\ndocument.write('<p>Today\\'s date is ' + new Date() + '.</p>')\n```", "```\n10 PRINT \"Hello world!\"\n```", "```\n<h1>Much Better</h1>\n<p>No <span class=\"code\">document.write</span> here!</p>\n<p>Today's date is {{today}}.</p>\n```", "```\ndocument.querySelector('#error').innerHTML =\n  'Something <b>very bad</b> happened!'\n```", "```\ndocument.querySelector('#error').innerHTML =\n  '<div class=\"error\"><h3>Error</h3>' +\n  '<p>Something <b><a href=\"/error-detail/' + errorNumber +\n  '\">very bad</a></b> ' +\n  'happened.  <a href=\"/try-again\">Try again<a>, or ' +\n  '<a href=\"/contact\">contact support</a>.</p></div>'\n```", "```\ndoctype html                        <!DOCTYPE html>\nhtml(lang=\"en\")                     <html lang=\"en\">\n  head                              <head>\n    title= pageTitle                <title>Pug Demo</title>\n    script.                         <script>\n      if (foo) {                        if (foo) {\n         bar(1 + 5)                         bar(1 + 5)\n      }                                 }\n  body                              </script>\n                                    <body>\n    h1 Pug                         <h1>Pug</h1>\n    #container                      <div id=\"container\">\n      if youAreUsingPug\n        p You are amazing           <p>You are amazing</p>\n      else\n        p Get on it!\n      p.                            <p>\n        Pug is a terse and           Pug is a terse and\n        simple templating             simple templating\n        language with a               language with a\n        strong focus on               strong focus on\n        performance and               performance and\n        powerful features.            powerful features.\n                                    </p>\n                                    </body>\n                                    </html>\n```", "```\n{ name: 'Buttercup' }\n```", "```\n<p>Hello, {{name}}!</p>\n```", "```\n{ name: '<b>Buttercup</b>' }\n```", "```\n{{! super-secret comment }}\n<!-- not-so-secret comment -->\n```", "```\n{\n  currency: {\n    name: 'United States dollars',\n    abbrev: 'USD',\n  },\n  tours: [\n    { name: 'Hood River', price: '$99.95' },\n    { name: 'Oregon Coast', price: '$159.95' },\n  ],\n  specialsUrl: '/january-specials',\n  currencies: [ 'USD', 'GBP', 'BTC' ],\n}\n```", "```\n<ul>\n  {{#each tours}}\n    {{! I'm in a new block...and the context has changed }}\n    <li>\n      {{name}} - {{price}}\n      {{#if ../currencies}}\n        ({{../currency.abbrev}})\n      {{/if}}\n    </li>\n  {{/each}}\n</ul>\n{{#unless currencies}}\n  <p>All prices in {{currency.name}}.</p>\n{{/unless}}\n{{#if specialsUrl}}\n  {{! I'm in a new block...but the context hasn't changed (sortof) }}\n  <p>Check out our <a href=\"{{specialsUrl}}\">specials!</p>\n{{else}}\n  <p>Please check back often for specials.</p>\n{{/if}}\n<p>\n  {{#each currencies}}\n    <a href=\"#\" class=\"currency\">{{.}}</a>\n  {{else}}\n    Unfortunately, we currently only accept {{currency.name}}.\n  {{/each}}\n</p>\n```", "```\napp.set('view cache', true)\n```", "```\nnpm install express-handlebars\n```", "```\nconst expressHandlebars = require('express-handlebars')\napp.engine('handlebars', expressHandlebars({\n  defaultLayout: 'main',\n})\napp.set('view engine', 'handlebars')\n```", "```\n<!doctype html>\n<html>\n  <head>\n    <title>Meadowlark Travel</title>\n    <link rel=\"stylesheet\" href=\"/css/main.css\">\n  </head>\n  <body>\n    {{{body}}}\n  </body>\n</html>\n```", "```\n<!-- ... -->\n<body>\n  <div class=\"container\">\n    <header>\n      <div class=\"container\">\n        <h1>Meadowlark Travel</h1>\n        <img src=\"/img/logo.png\" alt=\"Meadowlark Travel Logo\">\n      </div>\n    </header>\n    <div class=\"container\">\n      {{{body}}}\n    </div>\n    <footer>&copy; 2019 Meadowlark Travel</footer>\n  </div>\n</body>\n```", "```\napp.engine('handlebars', expressHandlebars({\n  defaultLayout: 'main',\n})\n```", "```\napp.get('/foo', (req, res) => res.render('foo'))\n```", "```\napp.get('/foo', (req, res) => res.render('foo', { layout: null }))\n```", "```\napp.get('/foo', (req, res) => res.render('foo', { layout: 'microsite' }))\n```", "```\napp.engine('handlebars', expressHandlebars({\n  defaultLayout: 'main',\n  helpers: {\n    section: function(name, options) {\n      if(!this._sections) this._sections = {}\n      this._sections[name] = options.fn(this)\n      return null\n    },\n  },\n}))\n```", "```\n{{#section 'head'}}\n  <!-- we want Google to ignore this page -->\n  <meta name=\"robots\" content=\"noindex\">\n{{/section}}\n\n<h1>Test Page</h1>\n<p>We're testing some script stuff.</p>\n\n{{#section 'scripts'}}\n  <script>\n    document.querySelector('body')\n      .insertAdjacentHTML('beforeEnd', '<small>(scripting works!)</small>')\n  </script>\n{{/section}}\n```", "```\n{{#section 'head'}}\n  <!-- we want Google to ignore this page -->\n  <meta name=\"robots\" content=\"noindex\">\n{{/section}}\n\n<h1>Test Page</h1>\n<p>We're testing some script stuff.</p>\n\n{{#section 'scripts'}}\n  <script>\n    const div = document.createElement('div')\n    div.appendChild(document.createTextNode('(scripting works!)'))\n    document.querySelector('body').appendChild(div)\n  </script>\n{{/section}}\n```", "```\n<div class=\"weatherWidget\">\n  {{#each partials.weatherContext}}\n    <div class=\"location\">\n      <h3>{{location.name}}</h3>\n      <a href=\"{{location.forecastUrl}}\">\n        <img src=\"{{iconUrl}}\" alt=\"{{weather}}\">\n        {{weather}}, {{temp}}\n      </a>\n    </div>\n  {{/each}}\n  <small>Source: <a href=\"https://www.weather.gov/documentation/services-web-api\">\n    National Weather Service</a></small>\n</div>\n```", "```\nconst getWeatherData = () => Promise.resolve([\n  {\n    location: {\n      name: 'Portland',\n      coordinates: { lat: 45.5154586, lng: -122.6793461 },\n    },\n    forecastUrl: 'https://api.weather.gov/gridpoints/PQR/112,103/forecast',\n    iconUrl: 'https://api.weather.gov/icons/land/day/tsra,40?size=medium',\n    weather: 'Chance Showers And Thunderstorms',\n    temp: '59 F',\n  },\n  {\n    location: {\n      name: 'Bend',\n      coordinates: { lat: 44.0581728, lng: -121.3153096 },\n    },\n    forecastUrl: 'https://api.weather.gov/gridpoints/PDT/34,40/forecast',\n    iconUrl: 'https://api.weather.gov/icons/land/day/tsra_sct,50?size=medium',\n    weather: 'Scattered Showers And Thunderstorms',\n    temp: '51 F',\n  },\n  {\n    location: {\n      name: 'Manzanita',\n      coordinates: { lat: 45.7184398, lng: -123.9351354 },\n    },\n    forecastUrl: 'https://api.weather.gov/gridpoints/PQR/73,120/forecast',\n    iconUrl: 'https://api.weather.gov/icons/land/day/tsra,90?size=medium',\n    weather: 'Showers And Thunderstorms',\n    temp: '55 F',\n  },\n])\n\nconst weatherMiddleware = async (req, res, next) => {\n  if(!res.locals.partials) res.locals.partials = {}\n  res.locals.partials.weatherContext = await getWeatherData()\n  next()\n}\n\nmodule.exports = weatherMiddleware\n```", "```\n<h2>Home</h2>\n{{> weather}}\n```"]