- en: 'Chapter 6\. Using the Java Library: Get to Know the Java API'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0125-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Java ships with hundreds of prebuilt classes.** You don’t have to reinvent
    the wheel if you know how to find what you need in the Java library, known as
    the **Java API**. *You’ve got better things to do*. If you’re going to write code,
    you might as well write *only* the parts that are truly custom for your application.
    You know those programmers who walk out the door each night at 5 PM? The ones
    who don’t even show *up* until 10 AM? They use the Java API. And about eight pages
    from now, so will you. The core Java library is a giant pile of classes just waiting
    for you to use like building blocks, to assemble your own program out of largely
    prebuilt code. The Ready-Bake Java we use in this book is code you don’t have
    to create from scratch, but you still have to type it. The Java API is full of
    code you don’t even have to *type*. All you need to do is learn to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our last chapter, we left you with the cliff-hanger: a bug'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How it’s supposed to look
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s what happens when we run it and enter the numbers 1,2,3,4,5,6\. Lookin’
    good.
  prefs: []
  type: TYPE_NORMAL
- en: '**A complete game interaction** (your mileage may vary)'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0126-01.png)'
  prefs: []
  type: TYPE_IMG
- en: How the bug looks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s what happens when we enter 2,2,2.
  prefs: []
  type: TYPE_NORMAL
- en: '**A different game interaction** (yikes)'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0126-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**In the current version, once you get a hit, you can simply repeat that hit
    two more times for the kill!**'
  prefs: []
  type: TYPE_NORMAL
- en: So what happened?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0127-01.png)'
  prefs: []
  type: TYPE_IMG
- en: How do we fix it?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a way to know whether a cell has already been hit. Let’s run through
    some possibilities, but first, we’ll look at what we kno w so far...
  prefs: []
  type: TYPE_NORMAL
- en: We have a virtual row of seven cells, and a Startup will occupy three consecutive
    cells somewhere in that row. This virtual row shows a Startup placed at cell locations
    4, 5, and 6.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0128-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The Startup has an instance variable—an int array —that holds that Startup object’s
    cell locations.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0128-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Option one is too clunky
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Option one seems like more work than y ou’d expect. It means that each time
    the user makes a hit, y ou have to change the state of the second array (the hitCells
    array), oh—but first you have to CHECK the hitCells array to see if that cell
    has already been hit anyway. It would work, but there’s got to be something better...
  prefs: []
  type: TYPE_NORMAL
- en: Option two is a little better, but still pretty clunky
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Option two is a little less clunky than option one, but it’s not very efficient.
    You’d still have to loop through all three slots (index positions) in the array,
    even if one or more are already invalid because they’ve been “hit” (and have a
    -1 value). There has to be something better...
  prefs: []
  type: TYPE_NORMAL
- en: '| The original prep code for part of the checkYourself() method: | Life would
    be good if only we could change it to: |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](Images/f0130-02.png) |'
  prefs: []
  type: TYPE_TB
- en: '![image](Images/f0131-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Wake up and smell the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**As if by magic, there really is such a thing.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**But it’s not an *array*, it’s *an ArrayList.***'
  prefs: []
  type: TYPE_NORMAL
- en: '**A class in the core Java library (the API).**'
  prefs: []
  type: TYPE_NORMAL
- en: The Java Platform, Standard Edition (Java SE) ships with hundreds of prebuilt
    classes. Just like our Ready-Bake Code. Except that these built-in classes are
    already compiled.
  prefs: []
  type: TYPE_NORMAL
- en: '***That means no typing.***'
  prefs: []
  type: TYPE_NORMAL
- en: Just use ’em.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0132-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Some things you can do with ArrayList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0133-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Java Exposed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**This week’s interview: ArrayList, on arrays**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** So, ArrayLists are like arrays, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**ArrayList:** In their dreams! ***I*** am an *object*, thank you very much.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** If I’m not mistaken, arrays are objects too. They live on the
    heap right there with all the other objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ArrayList:** Sure arrays go on the heap, ***duh***, but an array is still
    a wanna-be ArrayList. A poser. Objects have state *and* behavior, right? We’re
    clear on that. But have you actually tried calling a method on an array?'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Now that you mention it, can’t say I have. But what method would
    I call, anyway? I only care about calling methods on the stuff I put *in* the
    array, not the array itself. And I can use array syntax when I want to put things
    in and take things out of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ArrayList:** Is that so? You mean to tell me you actually *removed* something
    from an array? (Sheesh, where do they train you guys?)'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Of *course* I take something out of the array. I say Dog d =
    dogArray[1], and I get the Dog object at index 1 out of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ArrayList:** Alright, I’ll try to speak slowly so you can follow along. You
    were *not*, I repeat *not*, removing that Dog from the array. All you did was
    make a copy of the *reference to the Dog* and assign it to another Dog variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Oh, I see what you’re saying. No, I didn’t actually remove the
    Dog object from the array. It’s still there. But I can just set its reference
    to null, I guess.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ArrayList:** But I’m a first-class object, so I have methods, and I can actually,
    you know, *do* things like remove the Dog’s reference from myself, not just set
    it to null. And I can change my size, *dynamically* (look it up). Just try to
    get an *array* to do that!'
  prefs: []
  type: TYPE_NORMAL
- en: '**HeadFirst:** Gee, hate to bring this up, but the rumor is that you’re nothing
    more than a glorified but less-efficient array. That in fact you’re just a wrapper
    for an array, adding extra methods for things like resizing that I would have
    had to write myself. And while we’re at it, *you can’t even hold primitives*!
    Isn’t that a big limitation?'
  prefs: []
  type: TYPE_NORMAL
- en: '**ArrayList:** I can’t *believe* you buy into that urban legend. No, I am *not*
    just a less-efficient array. I will admit that there are a few *extremely* rare
    situations where an array might be just a tad, I repeat, *tad* bit faster for
    certain things. But is it worth the *miniscule* performance gain to give up all
    this *power*? Still, look at all this *flexibility*. And as for the primitives,
    of *course* you can put a primitive in an ArrayList, as long as it’s wrapped in
    a primitive wrapper class (you’ll see a lot more on that in [Chapter 10](ch10.xhtml#numbers_matter_numbers_and_statics)).
    And if you’re using Java 5 or above, that wrapping (and unwrapping when you take
    the primitive out again) happens automatically. And alright, I’ll *acknowledge*
    that yes, if you’re using an ArrayList of *primitives*, it probably is faster
    with an array, because of all the wrapping and unwrapping, but still...who really
    uses primitives *these* days?'
  prefs: []
  type: TYPE_NORMAL
- en: Oh, look at the time! *I’m late for Pilates.* We’ll have to do this again sometime.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharpen your pencil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Sharpen your pencil”](#sharpen_your_pencil-id00009))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/pencil.png)![image](Images/f0136-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice how with ArrayList, you’re working with an object of type ArrayList,
    so you’re just invoking regular old methods on a regular old object, using the
    regular old dot operator.
  prefs: []
  type: TYPE_NORMAL
- en: With an *array*, you use *special array syntax* (like myList[0] = foo) that
    you won’t use anywhere else except with arrays. Even though an array is an object,
    it lives in its own special world, and you can’t invoke any methods on it, although
    you can access its one and only instance variable, *length.*
  prefs: []
  type: TYPE_NORMAL
- en: Comparing ArrayList to a regular array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Images](Images/1.png) **A plain old array has to know its size at the time
    it’s created.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But for ArrayList, you just make an object of type ArrayList. Every time. It
    never needs to know how big it should be, because it grows and shrinks as objects
    are added or removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0137-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/2.png) **To put an object in a regular array, you must assign
    it to a specific location.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (An index from 0 to one less than the length of the array.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0137-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If that index is outside the boundaries of the array (like the array was declared
    with a size of 2, and now you’re trying to assign something to index 3), it blows
    up at runtime.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With ArrayList, you can specify an index using the *add(anInt, anObject)* method,
    or you can just keep saying *add(anObject)* and the ArrayList will keep growing
    to make room for the new thing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0137-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/3.png) **Arrays use array syntax that’s not used anywhere
    else in Java.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But ArrayLists are plain old Java objects, so they have no special syntax.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0137-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/4.png) **ArrayLists are parameterized.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We just said that unlike arrays, ArrayLists have no special syntax. But they
    *do* use something special—***parameterized types.****
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0137-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Using the <TypeGoesHere> syntax, we can declare and create an ArrayList that
    knows (and restricts) the types of objects it can hold. We’ll look at the details
    of parameterized types in ArrayLists in [Chapter 11](ch11.xhtml#data_structures_collections_and_generics),
    *Data Structures*, so for now, don’t think too much about the angle bracket <>
    syntax you see when we use ArrayLists. Just know that it’s a way to force the
    compiler to allow only a specific type of object *(the type in angle brackets)*
    in the ArrayList.
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameterized types were added to Java in Java 5, which came out so long
    ago that you are almost definitely using a version that supports them!*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/inline1.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s fix the Startup code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember, this is how the buggy version looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0138-01.png)'
  prefs: []
  type: TYPE_IMG
- en: New and improved Startup class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0139-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s build the REAL game: “Sink a Startup”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve been working on the “simple” version, but now let’s build the real one.
    Instead of a single row, we’ll use a grid. And instead of one Startup, we’ll use
    three.
  prefs: []
  type: TYPE_NORMAL
- en: '**Goal:** Sink all of the computer’s Startups in the fewest number of guesses.
    You’re given a rating level based on how well you perform.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setup:** When the game program is launched, the computer places three Startups,
    randomly, on the **virtual 7 x 7 grid**. When that’s complete, the game asks for
    your first guess.'
  prefs: []
  type: TYPE_NORMAL
- en: '**How you play:** We haven’t learned to build a GUI yet, so this version works
    at the command line. The computer will prompt you to enter a guess (a cell), which
    you’ll type at the command line (as “A3,” “C5,” etc.). In response to your guess,
    you’ll see a result at the command-line, either “hit,” “miss,” or “You sunk poniez”
    (or whatever the lucky Startup of the day is). When you’ve sent all three Startups
    to that big 404 in the sky, the game ends by printing out your rating.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0140-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’re going to build the Sink a Startup game, with a 7 x 7 grid and three
    Startups. Each Startup takes up three cells.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**part of a game interaction**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0140-02.png)'
  prefs: []
  type: TYPE_IMG
- en: What needs to change?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have three classes that need to change: the Startup class (which is now
    called Startup instead of SimpleStartup), the game class (StartupBust), and the
    game helper class (which we won’t worry about now).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/acirclea.png) **Startup class**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A Add a *name* variable** to hold the name of the Startup (“poniez,” “cabista,”
    etc.) so each Startup can print its name when it’s killed (see the output screen
    on the opposite page).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/acircleb.png) **StartupBust class (the game)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create *three* Startups instead of one.**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Give each of the three Startups a *name.*** Call a setter method on each
    Startup instance so that the Startup can assign the name to its name instance
    variable.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Put the Startups on a grid rather than just a single row, and do it for all
    three Startups.**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This step is now way more complex than before, if we’re going to place the Startups
    randomly. Since we’re not here to mess with the math, we put the algorithm for
    giving the Startups a location into the GameHelper (Ready-Bake Code) class.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Check each user guess *with all three Startups*, instead of just one.**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep playing the game** (i.e., accepting user guesses and checking them with
    the remaining Startups) ***until there are no more live Startups.***'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get out of main.** We kept the simple one in main just to...keep it simple.
    But that’s not what we want for the *real* game.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3 Classes:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0141-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**5 Objects:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0141-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Who does what in the StartupBust game (and when)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![image](Images/f0142-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circleb.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![image](Images/f0142-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circlec.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![image](Images/f0142-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circled.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![image](Images/f0143-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circlee.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![image](Images/f0143-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circlef.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![image](Images/f0143-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Prep code for the real StartupBust class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0144-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The StartupBust class has three main jobs: set up the game, play the game until
    the Startups are dead, and end the game. Although we could map those three jobs
    directly into three methods, we split the middle job (play the game) into *two*
    methods to keep the granularity smaller. Smaller methods (meaning smaller chunks
    of functionality) help us test, debug, and modify the code more easily.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variable Declarations**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** and instantiate the *GameHelper* instance variable, named *helper.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** and instantiate an *ArrayList* to hold the list of Startups (initially
    three) Call it *startups.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** an int variable to hold the number of user guesses (so that we
    can give the user a score at the end of the game). Name it *numOfGuesses* and
    set it to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Method Declarations**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** a *setUpGame()* method to create and initialize the Startup objects
    with names and locations. Display brief instructions to the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** a *startPlaying()* method that asks the player for guesses and
    calls the checkUserGuess() method until all the Startup objects are removed from
    play.'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** a *checkUserGuess()* method that loops through all remaining Startup
    objects and calls each Startup object’s checkYourself() method.'
  prefs: []
  type: TYPE_NORMAL
- en: '**DECLARE** a *finishGame()* method that prints a message about the user’s
    performance, based on how many guesses it took to sink all of the Startup objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Method Implementations**'
  prefs: []
  type: TYPE_NORMAL
- en: '**METHOD: *void setUpGame()***'
  prefs: []
  type: TYPE_NORMAL
- en: // make three Startup objects and name them
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATE** three Startup objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**SET** a name for each Startup.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADD** the Startups to *startups* (the ArrayList).'
  prefs: []
  type: TYPE_NORMAL
- en: '**REPEAT** with each of the Startup objects in the *startups* List:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CALL** the *placeStartup()* method on the helper object, to get a randomly-selected'
  prefs: []
  type: TYPE_NORMAL
- en: location for this Startup (three cells, vertically or horizontally aligned,
    on a 7 X 7 grid).
  prefs: []
  type: TYPE_NORMAL
- en: '**SET** the location for each Startup based on the result of the *placeStartup()*
    call.'
  prefs: []
  type: TYPE_NORMAL
- en: END REPEAT
  prefs: []
  type: TYPE_NORMAL
- en: END METHOD
  prefs: []
  type: TYPE_NORMAL
- en: '**METHOD: *void startPlaying()***'
  prefs: []
  type: TYPE_NORMAL
- en: '**REPEAT** while any Startups exist.'
  prefs: []
  type: TYPE_NORMAL
- en: '**GET** user input by calling the helper *getUserInput()* method.'
  prefs: []
  type: TYPE_NORMAL
- en: '**EVALUATE** the user’s guess by *checkUserGuess()* method.'
  prefs: []
  type: TYPE_NORMAL
- en: END REPEAT
  prefs: []
  type: TYPE_NORMAL
- en: END METHOD
  prefs: []
  type: TYPE_NORMAL
- en: '**METHOD: *void checkUserGuess(String userGuess)***'
  prefs: []
  type: TYPE_NORMAL
- en: // find out if there’s a hit (and kill) on any Startup
  prefs: []
  type: TYPE_NORMAL
- en: '**INCREMENT** the number of user guesses in the *numOfGuesses* variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '**SET** the local *result* variable (a *String*) to “miss”, assuming that the
    user’s guess will be a miss.'
  prefs: []
  type: TYPE_NORMAL
- en: '**REPEAT** with each of the Startup objects in the *startups* List.'
  prefs: []
  type: TYPE_NORMAL
- en: '**EVALUATE** the user’s guess by calling the Startup object’s *checkYourself()*
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: '**SET** the result variable to “hit” or “kill” if appropriate.'
  prefs: []
  type: TYPE_NORMAL
- en: '**IF** the result is “kill”, **REMOVE** the Startup from the *startups* List.'
  prefs: []
  type: TYPE_NORMAL
- en: END REPEAT
  prefs: []
  type: TYPE_NORMAL
- en: '**DISPLAY** the result value to the user.'
  prefs: []
  type: TYPE_NORMAL
- en: END METHOD
  prefs: []
  type: TYPE_NORMAL
- en: '**METHOD: *void finishGame()***'
  prefs: []
  type: TYPE_NORMAL
- en: '**DISPLAY** a generic “game over” message, then:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IF** number of user guesses is small,'
  prefs: []
  type: TYPE_NORMAL
- en: '**DISPLAY** a congratulations message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ELSE**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DISPLAY** an insulting one.'
  prefs: []
  type: TYPE_NORMAL
- en: END IF
  prefs: []
  type: TYPE_NORMAL
- en: END METHOD
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Yours to solve.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0146-01.png)![image](Images/f0146-02.png)![image](Images/f0147-01.png)![image](Images/f0147-02.png)![image](Images/f0148-01.png)![image](Images/f0149-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The final version of the Startup class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0150-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Super powerful Boolean expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, when we’ve used Boolean expressions for our loops or `if` tests, they’ve
    been pretty simple. We will be using more powerful boolean expressions in some
    of the Ready-Bake Code you’re about to see, and even though we know you wouldn’t
    peek, we thought this would be a good time to discuss how to energize your expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '**“And” and “Or” Operators** `( &&, || )`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you’re writing a chooseCamera( ) method, with lots of rules about
    which camera to select. Maybe you can choose cameras ranging from $50 to $1000,
    but in some cases you want to limit the price range more precisely. You want to
    say something like:'
  prefs: []
  type: TYPE_NORMAL
- en: “If the price range is between $300 ***and*** $400, then choose X.”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s say that of the ten camera brands available, you have some logic that
    applies to only a *few* of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Boolean expressions can get really big and complicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you want to get *really* technical, you might wonder about the precedence
    of these operators. Instead of becoming an expert in the arcane world of precedence,
    we recommend that you ***use parentheses*** to make your code clear.
  prefs: []
  type: TYPE_NORMAL
- en: '**Not equals ( != and ! )**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that you have a logic like “of the ten available camera models, a
    certain thing is *true for all but one. “*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: or for comparing objects like strings...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Short-Circuit Operators ( && , || )**'
  prefs: []
  type: TYPE_NORMAL
- en: The operators we’ve looked at so far, && and ||, are known as ***short-circuit***
    operators. In the case of &&, the expression will be true only if both sides of
    the && are true. So if the JVM sees that the left side of a && expression is false,
    it stops right there! Doesn’t even bother to look at the right side.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, with ||, the expression will be true if *either* side is true, so
    if the JVM sees that the left side is true, it declares the entire statement to
    be true and doesn’t bother to check the right side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why is this great? Let’s say that you have a reference variable and you’re
    not sure whether it’s been assigned to an object. If you try to call a method
    using this null reference variable (i.e., no object has been assigned), you’ll
    get a NullPointerException. So, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Non-Short-Circuit Operators ( &, | )**'
  prefs: []
  type: TYPE_NORMAL
- en: When used in boolean expressions, the & and | operators act like their && and
    || counterparts, except that they force the JVM to *always* check *both* sides
    of the expression. Typically, & and | are used in another context, for manipulating
    bits.
  prefs: []
  type: TYPE_NORMAL
- en: Ready-Bake Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0152-02a.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the helper class for the game. Besides the user input method (that prompts
    the user and reads input from the command line), the helper’s Big Service is to
    create the cell locations for the Startups. We tried to keep it fairly small so
    you wouldn’t have to type so much. And remember, you won’t be able to compile
    the StartupBust game class until you have *this* class.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0152-01.png)![image](Images/f0153-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Library (the Java API)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You made it all the way through the StartupBust game, thanks to the help of
    ArrayList. And now, as promised, it’s time to learn how to fool around in the
    Java library.
  prefs: []
  type: TYPE_NORMAL
- en: '**In the Java API, classes are grouped into packages.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0154-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**To use a class in the API, you have to know which package the class is in.**'
  prefs: []
  type: TYPE_NORMAL
- en: Every class in the Java library belongs to a package. The package has a name,
    like `**javax.swing**` (a package that holds some of the Swing GUI classes you’ll
    learn about soon). ArrayList is in the package called `**java.util**`, which surprise
    surprise, holds a pile of *utility* classes. You’ll learn a lot more about packages
    in [Appendix B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d), including
    how to put your *own* classes into your *own* packages. For now, though, we’re
    just looking to *use* some of the classes that come with Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a class from the API, in your own code, is simple. You just treat the
    class as though you wrote it yourself...as though you compiled it, and there it
    sits, waiting for you to use it. With one big difference: somewhere in your code
    you have to indicate the *full* name of the library class you want to use, and
    that means package name + class name.'
  prefs: []
  type: TYPE_NORMAL
- en: Even if you didn’t know it, ***you’ve already been using classes from a package.***
    System (System.out.println), String, and Math (Math.random()) all belong to the
    `**java.lang**` package.
  prefs: []
  type: TYPE_NORMAL
- en: You have to know the full name* of the class you want to use in your code.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ArrayList is not the *full* name of ArrayList, just as Kathy isn’t a full name
    (unless it’s like Madonna or Cher, but we won’t go there). The full name of ArrayList
    is actually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0155-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You have to tell Java which ArrayList you want to use. You have two options:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/acirclea.png) **IMPORT**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Put an import statement at the top of your source code file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**OR**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](Images/acircleb.png) **TYPE**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type the full name everywhere in your code. Each time you use it. *Everywhere*
    you use it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you declare and/or instantiate it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you use it as an argument type:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you use it as a return type:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Unless the class is in the java.lang package.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**One more time, in the unlikely event that you don’t already have this down:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0157-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '*“Good to know there’s an ArrayList in the java. util package. But by myself,
    how would I have figured that out?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '- Julia, 31, hand model'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0158-01.png)'
  prefs: []
  type: TYPE_IMG
- en: How to discover the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Two things you want to know:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circle.png) **What features are available in the library?
    (Which classes?)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/2circle.png) **How do you use these features? (Once you find
    a class, how do you know what it can do?)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) **Browse a book**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0158-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/1circleb.png) **Use the HTML API docs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0158-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '***[https://docs.oracle.com/en/java/javase/17/docs/api/index.html](https://docs.oracle.com/en/java/javase/17/docs/api/index.html)***'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/1circlea.png) Browse a book'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0159-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Flipping through a reference book is a good way to find out what’s in the Java
    library. You can easily stumble on to a package or class that looks useful just
    by browsing pages.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0159-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/1circleb.png) Use the HTML API docs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java comes with a fabulous set of online docs called, strangely, the Java API.
    You (or your IDE) can also download the docs to have on your hard drive just in
    case your internet connection fails at the Worst Possible Moment.
  prefs: []
  type: TYPE_NORMAL
- en: The API docs are the best reference for getting more details about what’s in
    a package, and what the classes and interfaces in the package provide (e.g., in
    terms of methods and functionality).
  prefs: []
  type: TYPE_NORMAL
- en: The docs look different depending upon the version of Java you’re using Make
    sure you’re looking at the docs for your version of Java!
  prefs: []
  type: TYPE_NORMAL
- en: '**Java 8 and earlier**'
  prefs: []
  type: TYPE_NORMAL
- en: '***[https://docs.oracle.com/javase/8/docs/api/index.html](https://docs.oracle.com/javase/8/docs/api/index.html)***'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0160-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can navigate these docs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Top down:** find a package you’re interested in from the list in the top
    left and drill down.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class-first:** find the class you want to know more about in the list in
    the bottom left, and click it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main panel will show you the details of whatever you’re looking at. If you
    select a package, it will give summary information about that package and a list
    of the classes and interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: If you select a class, it will show you a description of the class, and details
    of all the methods in the class, what they do, and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Java 9 and later**'
  prefs: []
  type: TYPE_NORMAL
- en: Java 9 introduced the Java Module System, which we’re not going to cover in
    this book. What you do need to know to understand the docs is that the JDK is
    now split into *modules.* These modules group together related packages. This
    can make it easier to find the classes that interest you, because they’re grouped
    by function. All of the classes we’ve covered in this book so far are in the **java.base**
    module; this contains core Java packages like java.lang and java.util.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0161-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can navigate these docs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Top down:** find a module that looks like it covers the functionality you
    want, see its packages, and drill down from a package into its classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search:** Use the search in the top right to go directly to the method, class,
    package, or module you want to read about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](Images/f0161-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the class documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whichever version of the Java docs you’re using, they all have a similar layout
    for showing information about a specific class. This is where the juicy details
    are.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you were browsing through the reference book and found a class called
    ArrayList, in java.util. The book tells you a little about it, enough to know
    that this is indeed what you want to use, but you still need to know more about
    the methods. In the reference book, you’ll find the method indexOf(). But if all
    you knew is that there is a method called indexOf() that takes an object and returns
    the index (an int) of that object, you still need to know one crucial thing: what
    happens if the object is not in the ArrayList? Looking at the method signature
    alone won’t tell you how that works. But the API docs will (most of the time,
    anyway). The API docs tell you that the indexOf() method returns a -1 if the object
    parameter is not in the ArrayList. So now we know we can use it both as a way
    to check if an object is even in the ArrayList, and to get its index at the same
    time, if the object was there. But without the API docs, we might have thought
    that the indexOf() method would blow up if the object wasn’t in the ArrayList.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0162-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**In [Chapter 11](ch11.xhtml#data_structures_collections_and_generics) and
    [Chapter 12](ch12.xhtml#lambdas_and_streams_whatcomma_not_how_la), you’ll see
    how we use the API docs to figure out how to use the Java Libraries.**'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Can you reconstruct the code snippets to make a working Java program that produces
    the output listed below? **NOTE:** To do this exercise, you need one NEW piece
    of info—if you look in the API for ArrayList, you’ll find a second add method
    that takes two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**add(int index, Object o)**'
  prefs: []
  type: TYPE_NORMAL
- en: It lets you specify to the ArrayList *where* to put the object you’re adding.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0163-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/arr1.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_pag-id).**'
  prefs: []
  type: TYPE_NORMAL
- en: JavaCross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)'
  prefs: []
  type: TYPE_IMG
- en: How does this crossword puzzle help you learn Java? Well, all of the words **are**
    Java related (except one red herring).
  prefs: []
  type: TYPE_NORMAL
- en: '**Hint:** When in doubt, remember ArrayList.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0164-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. I can’t behave
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Or, in the courtroom
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Where it’s at baby
  prefs: []
  type: TYPE_NORMAL
- en: 9\. A fork’s origin
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Grow an ArrayList
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Wholly massive
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Value copy
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Not an object
  prefs: []
  type: TYPE_NORMAL
- en: 17\. An array on steroids
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Extent
  prefs: []
  type: TYPE_NORMAL
- en: 21\. 19’s counterpart
  prefs: []
  type: TYPE_NORMAL
- en: '22\. Spanish geek snacks (Note: This has nothing to do with Java.)'
  prefs: []
  type: TYPE_NORMAL
- en: 23\. For lazy fingers
  prefs: []
  type: TYPE_NORMAL
- en: 24\. Where packages roam
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Where the Java action is
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Addressable unit
  prefs: []
  type: TYPE_NORMAL
- en: 4\. 2nd smallest
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Fractional default
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Library’s grandest
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Must be low density
  prefs: []
  type: TYPE_NORMAL
- en: 11\. He’s in there somewhere
  prefs: []
  type: TYPE_NORMAL
- en: 15\. As if
  prefs: []
  type: TYPE_NORMAL
- en: 16\. dearth method
  prefs: []
  type: TYPE_NORMAL
- en: 18\. What shopping and arrays have in common
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Library acronym
  prefs: []
  type: TYPE_NORMAL
- en: 21\. What goes around
  prefs: []
  type: TYPE_NORMAL
- en: '**More Hints:**'
  prefs: []
  type: TYPE_NORMAL
- en: Across
  prefs: []
  type: TYPE_NORMAL
- en: 1\. 8 varieties
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Think ArrayList
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Common primitive
  prefs: []
  type: TYPE_NORMAL
- en: 21\. Array’s extent
  prefs: []
  type: TYPE_NORMAL
- en: 22\. Not about Java—Spanish appetizers
  prefs: []
  type: TYPE_NORMAL
- en: Down
  prefs: []
  type: TYPE_NORMAL
- en: 2\. What’s overridable?
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Think ArrayList
  prefs: []
  type: TYPE_NORMAL
- en: 4\. & 10\. Primitive
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Think ArrayList
  prefs: []
  type: TYPE_NORMAL
- en: 18\. He’s making a ______
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/arr1.png) **Answers in [“JavaCross”](#javacross_left_parenthesisfrom_page_164r).**'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common-03.png)![image](Images/f0165-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Magnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“Code Magnets”](#code_magnets-id000003))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: JavaCross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (from [“JavaCross”](#javacross-id00002))
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common-04.png)![image](Images/f0166-01.png)'
  prefs: []
  type: TYPE_IMG
