- en: Chapter 7\. Backup and Recovery with rsync and cp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You know you need to make good backups of your computer files and to test them
    periodically to see if you can restore your files. But how do you do this on Linux?
    Fear not, for backups and restores on Linux are quite understandable, and your
    backup files are easy to search and restore.
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to have a couple of USB sticks for practicing the commands in
    this chapter and a few directories full of files that you won’t mind losing, should
    anything go wrong.
  prefs: []
  type: TYPE_NORMAL
- en: We will use *rsync* and *cp*. Both are essential Linux tools, and you can count
    on them being well maintained and available.
  prefs: []
  type: TYPE_NORMAL
- en: '*cp* is the copy command included in the GNU *coreutils* package, which is
    installed by default on nearly every Linux distribution. *cp* is for simple copying.
    It may be all you need to maintain regular backups.'
  prefs: []
  type: TYPE_NORMAL
- en: '*rsync* is an efficient file-transfer program, and its main purpose is keeping
    filesystems in sync with each other. When you use it for making backups, it keeps
    your local files in sync with your backup device. It is fast and efficient because
    it transfers only the changes in files. Unlike a lot of backup software, which
    never want you to delete anything, it even mirrors deletions. Because of these
    features, rsync is the tool of choice for updating and mirroring user home directories,
    websites, git repositories, and other large complex file trees.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to use rsync over a network: over SSH, for authenticated
    login and transport, or by running it as a daemon. Using SSH requires users to
    have login accounts on every machine for which they need rsync access. When rsync
    is run in daemon mode, you can use its built-in authentication methods to control
    access so that users do not need login accounts on the rsync server. Daemon mode
    is well-suited for a LAN backup server. It is not safe to access over untrusted
    networks, unless you use a VPN (see [Chapter 13](ch13.xhtml#cha-openvpn)).'
  prefs: []
  type: TYPE_NORMAL
- en: What sort of device do you store your backups on? This depends on your needs.
    I am a fan of USB storage media for a single user. Suppose you have a desktop
    Linux PC, a laptop, a tablet, and a smartphone. Back up your phone and tablet
    to your PC, then back up the PC to a USB hard drive. Super-important files could
    go to an online backup service.
  prefs: []
  type: TYPE_NORMAL
- en: For multiple users, a good solution is a central backup server. This can be
    any Linux PC.
  prefs: []
  type: TYPE_NORMAL
- en: Consider longevity. You cannot count on longevity with digital storage media,
    because even if the medium (hard disk, USB storage drive, CD/DVD) survives, there
    is no guarantee that the tools to read it will endure. Hardware and file formats
    change. Can you still read floppy disks? Remember Zip disks? How about those archives
    of old Microsoft Word and Powerpoint documents? With open source file formats
    you can always find a way to recover them. Good luck with proprietary formats
    when the vendor decides to stop supporting them.
  prefs: []
  type: TYPE_NORMAL
- en: Paper is still the long-term storage champion, and worth considering for your
    most important documents and photos.
  prefs: []
  type: TYPE_NORMAL
- en: For long-term digital storage, plan to transfer your archives to new media periodically,
    possibly with new commands and to new filesystem formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'What about backing up your backup server? No problem. Setting up a remote rsync
    mirror for backing up the backups is a common strategy, if your internet connection
    is robust enough to handle the traffic. But before you build a massive backup
    infrastructure, think about how many levels of redundancy you really need. Offsite
    backups are insurance against a disaster at your site. This can be a remote backup
    server at a site you control, or a friend’s site, or rented space in a datacenter.
    Maybe regular drops of an external hard drive to a bank safe-deposit box would
    be enough for your needs. Also think about recovery: can you get to your backups
    quickly?'
  prefs: []
  type: TYPE_NORMAL
- en: Always remember that the purpose of backups is *recovery*. Test your backups
    regularly to avoid learning the hard way that your backup method failed.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will learn about simple copying to USB storage devices with
    *cp*. For some users this is all they will ever need.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the chapter is about using the *rsync* command for faster and more efficient
    copying. You can use *rsync* to back up your files to local media or remote servers.
    You will learn which files you should back up, how to fine-tune your file selection,
    maintain the same file permissions and timestamps on your files, how to build
    an rsync backup server for multiple users, and how to make secure remote backups.
  prefs: []
  type: TYPE_NORMAL
- en: 7.1 Selecting Which Files to Back Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re not sure which files you should back up. Do you need to make backups
    of your system files? Do you really need to back up all of your personal files?
    Are there files you should not back up?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any file that you would be sorry to lose is a file you need to back up. Your
    personal files and system data files are the most important. Restoring system
    files such as commands, applications, and libraries is less important because
    you can always download and reinstall these.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following directories contain files such as configurations; data files
    for servers such as web, FTP, and mail servers; log files; applications installed
    in nonstandard locations; and shared directories, all of which should be backed
    up:'
  prefs: []
  type: TYPE_NORMAL
- en: '*/boot/grub*, if it contains any customizations such as themes, background
    images, or fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/etc* contains system configuration files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/home*, users’ personal files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/mnt*, temporary filesystem mountpoints. Back this up if you have mountpoints
    you want to preserve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/opt*, for proprietary or other applications not installed the standard way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/root*, the root user’s personal files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/srv*, data for servers such as web, FTP, and rsync servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/tmp* holds temporary data that is automatically updated or deleted as needed.
    Some of the data in */tmp* is persistent, for example user-created files and some
    system services, and they should be backed up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/var* stores many types of data such as log files, mail spools, cron jobs,
    and data for system services, though most distros have migrated to using */srv*
    for system services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have any shared directories, custom commands and scripts, or any data
    files or directories not listed previously, back them up.
  prefs: []
  type: TYPE_NORMAL
- en: '*/proc*, */sys*, and */dev* are pseudofilesystems that exist only in memory
    and should not be backed up.'
  prefs: []
  type: TYPE_NORMAL
- en: '*/media* is for mounting removable storage media and should be managed by the
    system, so there is no need to back it up. If you are manually creating mountpoints
    in */media*, they really need to be moved to */mnt*.'
  prefs: []
  type: TYPE_NORMAL
- en: Many databases should not be backed up with simple copying because they have
    special utilities and procedures for making copies and backups, and for restoring
    from backups. Use the tools made for your databases. Some examples are PostrgreSQL,
    MariaDB, and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring From Backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some files should not be restored from backup; see [Recipe 7.2](#rec-restore-from-backup).
  prefs: []
  type: TYPE_NORMAL
- en: Copying everything is the easy way if your backup storage is large enough. You
    also have the option of fine-tuning your file selection by creating lists of files
    to copy or to exclude; see Recipes [7.8](#rec-exclude-files-backup) and [7.9](#rec-include-files).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storage media is so cheap now you may not have to care about conserving storage
    space. If you need to be mindful of storage limitations, see the recipes in this
    chapter on file selection.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Filesystem Hierarchy Standard](https://oreil.ly/y1pJs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.2 Selecting Files to Restore from Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are restoring files from backup, and you want to know if there are files
    that should not be restored.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some files should not be restored, depending on the circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Do not restore */etc/fstab* after reinstalling Linux (the file that configures
    your static filesystem mounts). Every time you install Linux, all the filesystems
    get new Universal Unique Identifiers (UUIDs), so they will not be recognized and
    your new installation will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful restoring any file in */etc* or the dotfiles (such as */home/.config*
    or */home/.local*) in your home directory. If you are restoring from backup to
    a new installation of a different release, or a different Linux distribution,
    there may be incompatibilities in configuration options or file locations. Restore
    them one at a time so you can quickly spot any problems.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.xhtml#cha-install-linux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.3 Using the Simplest Local Backup Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know the easiest, simplest way to make regular backups to a local
    USB storage device.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The answer is to use simple copying. Get yourself a nice USB hard drive or USB
    stick. Plug it in and use your file manager to copy your files. Easy peasey, no
    muss, no fuss, and it is dead simple to restore your files. Or, use the *cp* command
    (see [Recipe 7.4](#rec-automate-cp)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simple copying doesn’t scale all that well, but for a few devices, like a PC,
    laptop, and phone, it works fine. The important part is making regular backups,
    verifying that you can restore files from your backups, and not worrying if you’re
    being nerdy enough.
  prefs: []
  type: TYPE_NORMAL
- en: Back in olden times, backups were more complicated because storage was expensive,
    so backup programs used a lot of tricks to save space. Now you can buy multi-terabyte
    external USB 3.0 hard drives for less than $200.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 cp*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.4 Automating Simple Local Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You like using simple copying for making your backups to an external USB storage
    drive, and you want to automate the process.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This calls for the *cp* command and *crontab* to schedule your backups.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may list individual files and directories to copy with *cp*, separated
    by spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example copies Duchess’s entire home directory to the *backups*
    directory on an external USB drive named *2tbdisk*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This creates */media/duchess/2tbdisk/backups/duchess/* on the backup device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the contents of a directory without copying the directory itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a personal cron job to run your backup every night at 10:30 P.M.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to preserve file attributes such as ownership and permissions, format
    your backup drive with a Linux filesystem that supports file attributes, such
    as Ext4, XFS, or Btrfs (see [Chapter 11](ch11.xhtml#cha-create-filesystems)).
    The FAT filesystems do not preserve ownership or permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Keep an eye on how long it takes your backup to run. If it takes longer than
    your scheduled backup interval, cron will start the next backup on schedule, and
    then you have a mess.
  prefs: []
  type: TYPE_NORMAL
- en: The first run takes the longest because all the files are new. Subsequent backups
    will go faster as only new files and files with newer timestamps will be copied.
  prefs: []
  type: TYPE_NORMAL
- en: The tilde, ~, is a shortcut for the current user’s home directory, so in this
    recipe it is short for */home/duchess*.
  prefs: []
  type: TYPE_NORMAL
- en: The asterisk in */home/duchess/** means copy all the files in */home/duchess*,
    but not the directory */home/duchess*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *-a*, *-u*, and *-v* options for *cp* mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '*-a, --archive* recursively copies and preserves all file attributes: mode,
    ownership, timestamps, and extended attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-u, --update* tells *cp* to copy only files with newer timestamps than the
    copies in the backup directory, or new files that have not been backed up yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-v, --verbose* prints activity messages during the copy operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some other useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '*-R, -r* recursive; use this to copy directories when you do not use the *-a*
    option. *-a* preserves file attributes, *-R, -r* does not. FAT and exFAT filesystems
    do not support file attributes, so use *-R, -r* with these.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*--parents* creates missing parent directories on the destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-x, --one-file-system* This prevents recursing into other partitions and mounted
    network filesystems. For example, if you have an NFS share mounted you may not
    want to add it to your backup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most Linux distributions mount USB devices in */run/media* or */media*. The
    easy way to find the filepath for your USB drive is to look in your file manager
    or use the *lsblk* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 3.7](ch03.xhtml#rec-scheduled-shutdowns-cron) to learn more about using
    *cron*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 crontab*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 cp*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.5 Using rsync for Local Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to make backups to a USB stick or USB hard drive, and you want something
    that is faster and more efficient than simple copying. You also want simple file
    restorations that you can make with standard Linux tools, without needing special
    software.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*rsync* is what you want. It keeps filesystems synchronized, both local and
    remote. *rsync* is fast and efficient, as it transfers only the changes in files,
    and you can restore files with the *rsync* command, the *cp* command, your file
    manager, or whatever copying tool you prefer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how to back up a home directory. First, name your
    source directory, which is the directory you want to back up, then name the destination
    directory. This example copies Duchess’s */home* to a USB drive named *2tbdisk*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can specify two or more directories, in a space-delimited list, to transfer
    to the destination directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy files from your backup device to your computer by reversing the source
    and destination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You may safely test your *rsync* command, without copying any files, with the
    *--dry-run* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If any files are deleted from a source directory, *rsync* will not delete them
    from the destination directory unless you explicitly tell it to with the *delete*
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tilde, *~*, is a shortcut for your home directory, so in the examples it
    means */home/duchess*.
  prefs: []
  type: TYPE_NORMAL
- en: Command examples with line breaks use a slash, \, to indicate that the command
    continues on the next line. You can copy the whole command, with the slashes,
    and it should work.
  prefs: []
  type: TYPE_NORMAL
- en: If you have networked filesystems mounted on your PC, such as NFS or Samba,
    use the *-x* option to copy only from your local filesystem, and not recurse into
    the remote filesystems.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a trailing slash, *~/*, (*/home/duchess/*) copies only the contents of
    the *duchess/* directory, but not the directory itself, resulting in */media/duchess/2tbdisk/[files]*.
    Omitting the trailing slash transfers the contents of */home/duchess* and the
    *duchess* directory, resulting in */media/duchess/2tbdisk/duchess/[files]*. The
    trailing slash only matters on the source directory, and it makes no difference
    on the destination directory.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t feel bad if you have to count on your fingers or make a lot of test runs
    to remind yourself how the trailing slash behaves, because this vexes everyone.
    It might help to think of the trailing slash as a little fence that prevents the
    source directory from escaping.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *-a* and *-v* options for *rsync* mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '*-a, --archive* retains the mode, timestamps, permissions, and ownership, and
    copies recursively. This is the same as **-rlptgoD**, which copies recursively,
    copies symlinks, preserves permissions, preserves file modification times, preserves
    file ownership, and preserves special files, such as device files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-v, --verbose* displays activity messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may wish to use some of these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '*-q, --quiet* suppresses nonerror messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*--progress* shows information on each file as it is transferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-A, --als* preserves access control lists (ACLs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-X, --xattrs* preserves extended file attributes (xattrs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your filenames, of course, will be different than the examples. *2tbdisk* is
    a filesystem label created by the user (see [Recipe 9.4](ch09.xhtml#rec-new-partition-gparted)).
    It is an abbreviation for “2 terabyte disk.” If you do not create a label, *udev*
    creates one, for example */media/duchess/488B-7971/*.
  prefs: []
  type: TYPE_NORMAL
- en: You may use the normal Linux tools, such as *rsync*, your file manager, or the
    *cp* command, to restore files.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.6 Making Secure Remote File Transfers with rsync over SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use *rsync* to copy files to another computer on your local network
    or over the internet, and you want encrypted transport and authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*rsync* uses SSH by default when you transfer files to another machine. The
    remote machine must be running an SSH server, and the source machine must have
    an SSH client already set up (see [Chapter 12](ch12.xhtml#cha-ssh)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This example transfers files over the local network from Duchess’s PC to her
    laptop. Duchess’s username on her laptop is Empress, and she is copying files
    from her home directory on her PC to her home directory on her laptop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If the destination directory does not exist, *rsync* will create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload files over the internet, use the fully qualified domain name of the
    server you are logging in to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for copying files from a remote host is reversed. This example copies
    the */woodwinds* directory and its contents from the remote host to Duchess’s
    home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might remember when the SSH option had to be explicit—for example, *rsync
    -a -e ssh [options]*. This is no longer necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may find some of these options to be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '*--partial* preserves partially downloaded files when the network connection
    is interrupted, and resumes the file transfer from where it left off when the
    connection is restored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-h, --human-readable* displays file sizes in kilobytes, megabytes, and gigabytes,
    rather than bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*--log-file=* stores a complete record of each transfer in a text file. Put
    them all together like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Both authentication and transport are encrypted by SSH. Users need shell accounts
    on all machines they are going to transfer files to. See [Chapter 12](ch12.xhtml#cha-ssh)
    to learn about secure remote administration with SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Consider setting up a central backup server for simplifying administration.
    Your users have their own accounts with their own */home* directories and can
    manage their own backups and restores without bothering you.
  prefs: []
  type: TYPE_NORMAL
- en: Another option for a backup server is to run *rsync* as a service. The advantage
    of this is your *rsync* users do not need login accounts on the server. One disadvantage
    is it does not support encrypted transfers. See [Recipe 7.13](#rec-rsyncd-backup-server)
    to learn about this.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 12.5](ch12.xhtml#rec-host-key-auth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 12.7](ch12.xhtml#rec-public-key-auth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.7 Automating rsync Transfers with cron and SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create crontabs to automatically run your secure *rsync* transfers.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need SSH set up for passwordless authentication on the destination machine
    (see Recipes [12.10](ch12.xhtml#rec-keychain) and [12.11](ch12.xhtml#rec-keychain-cron))
    and network access to the destination machine for the clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then use */etc/crontab* for transfers that require root permissions. The following
    example makes a backup of */etc* every night at 10 P.M. to a LAN server named
    *server1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Use personal crontabs for transferring your own files (see [Recipe 3.7](ch03.xhtml#rec-scheduled-shutdowns-cron)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenSSH is a lovely tool that provides secure network transfers for a host of
    tasks. Anything that you run over a network can probably run over SSH.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.xhtml#cha-ssh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 12.10](ch12.xhtml#rec-keychain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 12.11](ch12.xhtml#rec-keychain-cron)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.8 Excluding Files from Backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far the examples have shown how to transfer entire directories. You want
    to know how to exclude files and directories from being copied.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For simplicity, the following examples demonstrate local transfers to a USB
    drive, but they also work for remote transfers over SSH; see [Recipe 7.6](#rec-rsync-over-ssh).
  prefs: []
  type: TYPE_NORMAL
- en: 'When it’s just a few files, you can list them on the command line using *--exclude=*.
    This example excludes one file from */home/duchess/Music/arias*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is nice and easy and reliable. However, there is a gotcha: if there are
    multiple files in your source directory with the same name as your excluded file,
    all of them will be excluded. If you do not want the duplicates to be excluded,
    you need to specify which one is to be excluded. In the following example you
    want to exclude only the copy in the *arias/* source directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Exclude more than one file by enclosing them in curly braces, separated with
    single quotes and commas. There must be no spaces between the equals sign and
    the curly brace, and no spaces between the commas and single quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Excluding directories works the same way as excluding files, and you can mix
    files and directories in your exclude list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See [Recipe 7.11](#rec-includes-excludes) to learn how to put your excludes
    list in a file.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The root directory in an *rsync* transfer is the top-level directory you are
    transferring files from. In the examples in this recipe, that is *~/Music/arias*.
    *rsync* checks all the files and directories in your root directory, and compares
    them to your exclude directives, which *rsync* calls *patterns*. Patterns are
    checked against the files and directories in your root directory, starting at
    the root and proceeding down through the directory hierarchy. Every time a pattern
    is matched, it is excluded from the transfer. If the pattern *arias/lho-perduta.wav*
    is duplicated in another location, such as *2arias/lho-perduta.wav*, it will also
    be excluded. When a pattern ends with a slash (*/*), *rsync* will match only directories.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 7.10](#rec-simple-include)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.9 Including Selected Files to Backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to include a selected set of files in your backup, rather than defining
    a list of files to exclude.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you want to back up just a few files, you can do this on the command line.
    *--include=* operates differently than *--exclude=* because it doesn’t really
    mean “include,” it means “do not exclude.” It needs two additional options, *--include=*/*
    and *--exclude=''*''*, as this example of transferring a single file shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You may transfer a list of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There must be no spaces between the equals sign and the curly brace, and no
    spaces between the commas and single quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are multiple files with the same name in different locations in your
    source directory, *rsync* will transfer all of them. In this example only */home/duchess/Music/arias/sopranos/lho-perduta.wav*
    is transferred because the pattern *soprano/lho-perduta.wav* is unique in */Music/arias*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'That transfers only a single file, but all the subdirectories in *~/Music/arias*
    are copied. Use the *-m, --prune-empty-dirs* option to prevent copying empty directories,
    like this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When you have more than a few files to include, store your list in a plain-text
    file (see Recipes [7.10](#rec-simple-include) and [7.11](#rec-includes-excludes)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*--include=*/* tells *rsync* to traverse your entire source directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '*--include=[files]* means do not exclude these files.'
  prefs: []
  type: TYPE_NORMAL
- en: '*--exclude=''*''* tells *rsync* to exclude everything not included.'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all filepaths are relative to your source directory and not your
    system’s root directory.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 7.10](#rec-simple-include)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 7.11](#rec-includes-excludes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.10 Managing Includes with a Simple Include File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your includes are too many for a command-line incantation, and you want to maintain
    your list in a file that *rsync* can read. You also want this to be simple, if
    possible, thanks to past experience with *rsync* include/exclude files that never
    would work right.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest way to maintain a list, without going crazy over figuring out
    *rsync*’s include/exclude syntax, is to create a plain list of files that you
    provide to the *--files-from=* option. You don’t have to worry about getting them
    in the right order, or using *rsync*’s filter notation, just a plain list with
    whatever files and directories you want. The only gotcha is every item in your
    list must be relative to your source directory. In the following example, all
    list items are relative to */home/duchess*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use the list with the *--files-from* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the easiest way to maintain a list of files and directories to back
    up. There are no excludes, no wildcards, no funny syntax, just a nice clean understandable
    list.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the tilde to indicate your home directory, leave off the equals
    sign from *--files-from*, like the last example in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 7.9](#rec-include-files)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 7.11](#rec-includes-excludes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.11 Managing Includes and Excludes with an Exclude File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You like the simple include file concept in [Recipe 7.10](#rec-simple-include),
    but you really want to have both includes and excludes.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What you want is an *rsync* exclude file. An exclude file provides more flexibility
    and contains both includes and excludes. The following example illustrates a basic
    configuration. Every item must start by including the source root, which in this
    example is */home/duchess*, and end with excluding the source root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Feed it to *rsync* with the *exclude-from=* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *exclude-list.txt* example demonstrates backing up:'
  prefs: []
  type: TYPE_NORMAL
- en: Two dotfiles, *.config* and *.local*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single subdirectory of */Documents*, */jazz*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single file in */Music*, *schedule.odt*, and only *.ogg* files in */Music/arias/*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single directory in */Videos*, */courses*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There must be no spaces between lines, and comments (#) are useful for reminding
    you of the purpose of each section, and for adding a bit of whitespace. Preface
    your includes with the plus sign and the excludes with the minus sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'All other files in */home/duchess* are excluded from backup. Includes must
    always come first. As the example file shows, you have to be precise in defining
    each include/exclude. Includes must be listed in their directory hierarchy order,
    with all subdirectories. For example, this will fail with all files excluded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Try including */Documents*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now all the subdirectories and their contents in */Documents* are transferred,
    and not just */compositions*. To copy only */compositions* you have to exclude
    */Documents*; it is not enough to exclude only */duchess*. The following example
    copies only */duchess/Documents/compositions/* and nothing else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You may use wildcards to include or exclude files by type. For example, include
    all *.ogg* and *.flac* files, exclude all *.wav* files, and exclude all *cache*
    and *temp* directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You may have multiple source directories.
  prefs: []
  type: TYPE_NORMAL
- en: There is always just one destination directory.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 7.10](#rec-simple-include)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.12 Limiting rsync’s Bandwidth Use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Large file transfers can use a lot of network bandwidth and slow down everything.
    You want a simple way to restrict *rsync*’s bandwidth use without implementing
    something complex like traffic shaping.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use *rsync*’s *--bwlimit* option. This example limits it to 512 Kbps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*--bwlimit* only accepts values in kilobits.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 rsync*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.13 Building an rsyncd Backup Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want your users to back up their own data on a central backup server, but
    you don’t want to give them shell accounts on your backup server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up a central backup server, and run *rsync* in daemon mode. You should have
    name services already set up, and the hosts on your network have access to the
    backup server. Users will not need login accounts on the server because you will
    use *rsync*’s own access controls and user authorization to control access to
    the *rsync* archives.
  prefs: []
  type: TYPE_NORMAL
- en: For LAN Use Only
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is suitable for LAN use only, and not over untrusted networks, because
    the *rsync* daemon does not encrypt the authentication or file transfers. For
    encrypted transfers you need OpenVPN ([Chapter 13](ch13.xhtml#cha-openvpn)).
  prefs: []
  type: TYPE_NORMAL
- en: '*rsync* must be installed on all machines. *rsyncd* runs on the backup server,
    and clients will use the *rsync* command to connect to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the backup server, edit or create */etc/rsyncd.conf* to create an *rsync*
    module defining the archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create your */backups* directory, mode 0700, owned by root, to prevent unauthorized
    access from anyone who has access to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Start *rsyncd* on the server in daemon mode with systemd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: On Debian/Ubuntu it is *rsync.service*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your Linux does not have systemd, start it with the *rsync* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'On the backup server, test that *rsyncd* is listening and accepting connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then test from another PC on your network using the server’s hostname or IP
    address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you know that it is ready to transfer files. Test that you can copy files
    to your new *rsyncd* server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now view the nice new uploaded files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload a few more files to the server, then download files to a different computer
    from the *rsyncd* server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Everything works. Take a break and enjoy your success.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is not a secure form of file transfer because there is no encryption, and
    anyone on the network can access the files. It is suitable to use on your local
    network for easy archiving and file sharing.
  prefs: []
  type: TYPE_NORMAL
- en: '*rsync [hostname]::* needs double colons when connecting to an *rsync* server
    running in daemon mode. This tells *rsync* to look for a module name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the command options in the */etc/rsyncd.conf* example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[backup_dir1]*'
  prefs: []
  type: TYPE_NORMAL
- en: The module name can be anything you want.
  prefs: []
  type: TYPE_NORMAL
- en: '*path =*'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the directory for the module to use.
  prefs: []
  type: TYPE_NORMAL
- en: '*comment =*'
  prefs: []
  type: TYPE_NORMAL
- en: This is a brief description to remind you who the module belongs to, or what
    it is for.
  prefs: []
  type: TYPE_NORMAL
- en: '*list=yes*'
  prefs: []
  type: TYPE_NORMAL
- en: Permits users to see a list of files in the module. *no* hides the module.
  prefs: []
  type: TYPE_NORMAL
- en: '*read only = no*'
  prefs: []
  type: TYPE_NORMAL
- en: This allows users to upload files to the server.
  prefs: []
  type: TYPE_NORMAL
- en: '*use chroot = no*'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides the default of *use chroot = yes*. *chroot* is *change root*, sometimes
    called a *chroot jail*. A *chroot jail* is a separate environment inside your
    filesystem that contains its own root filesystem, commands, libraries, and everything
    else it needs to function. This is not a secure environment, though it is commonly
    thought of as a security tool. For *rsync*, the man page describes this as useful
    protection from configuration errors. The trade-off is *rsync* is blocked from
    following symlinks to files outside of the chroot environment, and it complicates
    preserving UIDs and GIDs by name. As they say, your mileage may vary, and it may
    be a good option for you. See the *use chroot* section of *rsyncd.conf (5)*.
  prefs: []
  type: TYPE_NORMAL
- en: Set both *uid* and *gid* to *root* or *0*. This preserves UIDs and GIDs, and
    manages permissions correctly.
  prefs: []
  type: TYPE_NORMAL
- en: If any of your transfers fail, look at the *rsync* error messages. They will
    tell you if you made a mistake in your filepaths, misspelled something, or couldn’t
    connect to the server, and give useful hints for correcting the problem.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running a Linux without systemd, consult its documentation to learn
    how to start and stop rsyncd.
  prefs: []
  type: TYPE_NORMAL
- en: See [Recipe 7.14](#rec-access-control) to learn how to set up access controls.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 rsyncd.conf*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.14 Limiting Access to rsyncd Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don’t want an open *rsyncd* server, and you want users to have their own
    protected modules that other users cannot access.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*rsyncd* comes with its own simple authentication and access controls. Create
    a new file containing username/password pairs, and add *auth users* and *secrets
    file* directives to */etc/rsyncd.conf*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First create the password file. In the following example, */etc/rsyncd-users*
    sets up three users and their passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Set permissions to read-write for root-only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a module for one of your users in */etc/rsyncd.conf*. This example
    creates a module for Duchess, using the */backups/duchess* directory on the *rsync*
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create your user’s backup directory, like this example for Duchess, with mode
    0700:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try logging in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Try transferring some files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'It worked! If the file transfer fails, check the *rsync* log to learn why.
    On systemd Linuxes, read the most recent log entries in the status output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: On other Linux distributions the rsyncd log should be in */var/log*.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The username/password pairs are arbitrary and are not related to system user
    accounts. *rsyncd* users have no access to the host system outside of their *rsync*
    shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'For additional security, add these directives to */etc/rsyncd.conf*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*hosts allow*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this to list hosts that are allowed to access the *rsyncd* archives. For
    example, you can limit access to hosts on a single subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: All hosts not allowed are denied, so you don’t need a *hosts deny* directive.
  prefs: []
  type: TYPE_NORMAL
- en: '*hosts deny*'
  prefs: []
  type: TYPE_NORMAL
- en: This usually isn’t needed, if you use *hosts allow*. It is useful for denying
    access to specific hosts that cause annoyance.
  prefs: []
  type: TYPE_NORMAL
- en: The password file is in cleartext, so it must be restricted to the superuser.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 rsyncd.conf*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Discussion in [Recipe 7.13](#rec-rsyncd-backup-server) to learn about the
    command options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.15 Creating a Message of the Day for rsyncd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re running an *rsyncd* server, and you think it would be nice to greet users
    with a cheerful message.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create your message of the day (MOTD) in a plain-text file, such as */etc/rsync-motd*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then configure the MOTD file location at the top of */etc/rsyncd.conf*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'When users connect to your server, they will see your message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A message of the day is an old Unix tradition. Use it for cheery greetings,
    maintenance downtime announcements, security tips, backup tips, or anything you
    think is important.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 rsyncd.conf*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
