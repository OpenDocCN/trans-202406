- en: Chapter 4\. Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 容器
- en: Kubernetes is a container orchestrator that uses a container runtime to instantiate
    containers inside of Pods. Many Kubernetes clusters with version 1.24 or later
    use the container runtime [containerd](https://containerd.io/).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个容器编排器，使用容器运行时在 Pod 内实例化容器。许多使用容器运行时 [containerd](https://containerd.io/)
    的 Kubernetes 集群版本为 1.24 或更高。
- en: Container runtime used on a Kubernetes node
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kubernetes 节点上使用的容器运行时
- en: You can fetch information about the container runtime used on any node of a
    Kubernetes cluster. Simply look at the output of the `CONTAINER-RUNTIME` column
    produced by running the command `kubectl get nodes -o wide`. Check the [Kubernetes
    documentation](https://kubernetes.io/docs/setup/production-environment/container-runtimes/)
    to learn more about configuring a container runtime for a cluster.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获取 Kubernetes 集群中任何节点上使用的容器运行时的信息。只需查看运行命令`kubectl get nodes -o wide`生成的`CONTAINER-RUNTIME`列的输出即可。查阅
    [Kubernetes 文档](https://kubernetes.io/docs/setup/production-environment/container-runtimes/)
    了解如何为集群配置容器运行时更多信息。
- en: For the exam, you are expected to understand the practical aspects of defining,
    building, and publishing container images, which this chapter covers. We’ll also
    touch on running a container image inside of a container. For all of those operations,
    we’ll use Docker Engine as the example container runtime though similar functionality
    is provided by other implementations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试中，您需要理解定义、构建和发布容器镜像的实际操作，本章涵盖了这些内容。我们还将介绍在容器内运行容器镜像的操作。对于所有这些操作，我们将使用 Docker
    Engine 作为示例容器运行时，尽管其他实现提供了类似的功能。
- en: 'The discussion on containers in this book only scratches the surface. There’s
    a lot more information on this topic if you want to fully immerse yourself. I
    can recommend the book [*Docker: Up & Running*](https://learning.oreilly.com/library/view/docker-up/9781098131814/)
    (O’Reilly) by Sean P. Kane and Karl Matthias for a detailed explanation of Docker.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '本书关于容器的讨论只是皮毛。如果您想全面投入，这个主题还有很多信息。我可以推荐 Sean P. Kane 和 Karl Matthias 合著的书籍
    [*Docker: Up & Running*](https://learning.oreilly.com/library/view/docker-up/9781098131814/)（O’Reilly）详细解释
    Docker。'
- en: Container Terminology
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器术语
- en: A *container* packages an application into a single unit of software including
    its runtime environment and configuration. This unit of software usually includes
    the operating system, the application’s source code or the binary, its dependencies,
    and other needed system tools. The declared goal of a container is to decouple
    the runtime environment from the application to avoid the “but it works on my
    machine” problem.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器*将应用程序及其运行环境和配置打包成单个软件单元。此软件单元通常包括操作系统、应用程序的源代码或二进制文件、其依赖项以及其他所需的系统工具。容器声明的目标是将运行环境与应用程序分离，避免“但在我的机器上可以运行”的问题。'
- en: The *container runtime engine* is the software component that can run containers
    on a host operating system. Examples include [Docker Engine](https://docs.docker.com/engine/)
    or [containerd](https://containerd.io/). A *container orchestrator* uses a container
    runtime engine to instantiate a container while adding sophisticated features
    like scalability and networking across the workload. Kubernetes is an example
    of container orchestrators. Other tools like [Nomad](https://www.nomadproject.io/use-cases/simple-container-orchestration)
    are capable of scheduling various types of workload including containers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器运行时引擎*是能够在主机操作系统上运行容器的软件组件。例如 [Docker Engine](https://docs.docker.com/engine/)
    或 [containerd](https://containerd.io/)。*容器编排器*使用容器运行时引擎实例化容器，同时添加诸如扩展性和跨工作负载的网络功能。Kubernetes
    是容器编排器的一个例子。其他工具如 [Nomad](https://www.nomadproject.io/use-cases/simple-container-orchestration)
    能够调度包括容器在内的各种工作负载。'
- en: The process of bundling an application into a container is called *containerization*.
    Containerization works based on instructions defined in a *container file*. The
    Docker community calls this a Dockerfile. The Dockerfile explicitly spells out
    what needs to happen when the software is built. The result of the operation is
    a *container image*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序打包成容器的过程称为*容器化*。容器化基于*容器文件*中定义的指令工作。Docker 社区将其称为 Dockerfile。Dockerfile
    明确指出了软件构建时需要发生的事情。操作的结果是*容器镜像*。
- en: The container image is usually published to a *container registry* for consumption
    by other stakeholders. [Docker Hub](https://hub.docker.com) is the primary registry
    for container images available for public use. Other public registries like GCR
    and Quay are available. [Figure 4-1](#containerization_process) illustrates the
    concepts in the context of containerizing an application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 容器镜像通常发布到*容器注册表*以供其他利益相关者使用。[Docker Hub](https://hub.docker.com)是主要的公共容器镜像注册表。还有其他公共注册表，如GCR和Quay。[图4-1](#containerization_process)在容器化应用程序的背景下说明了这些概念。
- en: '![ckd2 0401](Images/ckd2_0401.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0401](Images/ckd2_0401.png)'
- en: Figure 4-1\. Containerization process
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-1\. 容器化过程
- en: To summarize, the Dockerfile is a blueprint of how the software should be packaged,
    the image is the artifact produced by the process, and the container is a running
    instance of the image serving the application. We’ll look at a more concrete example
    next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，Dockerfile是软件打包的蓝图，镜像是该过程产生的工件，容器是运行镜像的实例，提供应用程序服务。接下来我们将看一个更具体的例子。
- en: Containerizing a Java-Based Application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将基于Java的应用程序容器化
- en: Let’s assume we want to containerize a web application written in Java. The
    application doesn’t write core functionality from scratch but uses the [Spring
    Boot framework](https://oreil.ly/Na9Vb) as an external library. In addition, we
    want to control the runtime behavior with the help of environment variables. For
    example, you may want to provide URLs and credentials to connect to other services
    like a database. We’ll talk through the process step by step and execute the relevant
    Docker commands from the terminal. If you want to follow along, you can download
    a sample application from the project generator [Spring Initializr](https://oreil.ly/bXSA4).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要将用Java编写的Web应用程序容器化。该应用程序不是从头开始编写核心功能，而是使用[Spring Boot框架](https://oreil.ly/Na9Vb)作为外部库。此外，我们希望通过环境变量来控制运行时行为。例如，您可能希望提供URL和凭据以连接到其他服务，如数据库。我们将逐步讨论这个过程，并从终端执行相关的Docker命令。如果您想跟着做，请从项目生成器[Spring
    Initializr](https://oreil.ly/bXSA4)下载示例应用程序。
- en: Writing a Dockerfile
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写Dockerfile
- en: Before we can create the image, we have to write a Dockerfile. The Dockerfile
    can reside in any directory and is a plain-text file. The instructions that follow
    use the Azul JRE distribution of Java 21 as the base image. A base image contains
    the operating system and the necessary tooling, in this case Java.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建镜像之前，我们必须编写一个Dockerfile。Dockerfile可以放置在任何目录中，它是一个纯文本文件。接下来的指令使用Azul JRE分发的Java
    21作为基础镜像。基础镜像包含操作系统和必要的工具，本例中为Java。
- en: Moreover, we include the binary file, an executable Java archive (JAR), into
    the directory `/app` of the image. Finally, we define the Java command that executes
    the program and expose the port 8080 to make the application accessible when run
    in a container. [Example 4-1](#dockerfile_for_building_a_java_application) outlines
    a sample Dockerfile.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将二进制文件（一个可执行的Java存档文件JAR）包含到镜像的`/app`目录中。最后，我们定义Java命令来执行程序，并将端口8080暴露出来，在容器中运行时使应用程序可访问。[示例4-1](#dockerfile_for_building_a_java_application)概述了一个样例Dockerfile。
- en: Example 4-1\. Dockerfile for building a Java application
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-1\. 用于构建Java应用程序的Dockerfile
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_containers_CO1-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_containers_CO1-1)'
- en: Defines the base image.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 定义基础镜像。
- en: '[![2](Images/2.png)](#co_containers_CO1-2)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_containers_CO1-2)'
- en: Sets the working directory of a container. Any `RUN`, `CMD`, `ADD`, `COPY`,
    or `ENTRYPOINT` instruction will be executed in the specified working directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 设置容器的工作目录。任何`RUN`、`CMD`、`ADD`、`COPY`或`ENTRYPOINT`指令将在指定的工作目录中执行。
- en: '[![3](Images/3.png)](#co_containers_CO1-3)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_containers_CO1-3)'
- en: Copies the JAR containing the compiled application code into the working directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含编译应用程序代码的JAR文件复制到工作目录中。
- en: '[![4](Images/4.png)](#co_containers_CO1-4)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_containers_CO1-4)'
- en: Sets the default command that executes when a container starts from an image.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 设置从镜像启动容器时执行的默认命令。
- en: '[![5](Images/5.png)](#co_containers_CO1-5)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_containers_CO1-5)'
- en: Documents the network port(s) the container should listen on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记录容器应监听的网络端口。
- en: While writing Dockerfile looks straightforward to beginners, optimizing the
    container image for a small footprint and security aspects isn’t. You can find
    a more detailed list of best practices for writing Dockerfiles in the [Docker
    documentation](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者来说，编写 Dockerfile 看起来很简单，但为了实现小占地面积和安全性方面的优化容器镜像却并非易事。您可以在[Docker 文档](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)中找到更详细的
    Dockerfile 最佳实践列表。
- en: Building the Container Image
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建容器镜像
- en: 'With the Dockerfile in place, we can create the image. The following command
    provides the name of the image and the tag. The last argument points to the context
    directory. A context directory contains the Dockerfile as well as any directories
    and files to be included in the image. Here, the context directory is the current
    directory we reside in referenced by “ . ”:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有了 Dockerfile，我们可以创建镜像。以下命令提供了镜像的名称和标签。最后一个参数指向上下文目录。上下文目录包含 Dockerfile 以及要包含在镜像中的任何目录和文件。这里，上下文目录是我们所在的当前目录，由“ . ”引用：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Listing Container Images
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出容器镜像
- en: 'As indicated by the terminal output, the image has been created. You might
    have noticed that the base image has been downloaded as part of the process. The
    generated image can be found in your local Docker Engine cache by running the
    following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如终端输出所示，镜像已创建。您可能已经注意到基础镜像已作为过程的一部分下载。通过运行以下命令，生成的镜像可以在本地 Docker 引擎缓存中找到：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running the Container
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行容器
- en: 'It’s time to run the application in a container. The `run` command points to
    an image and executes its logic in a container:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是在容器中运行应用程序的时候了。`run`命令指向一个镜像并在容器中执行其逻辑：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We told the command to forward the port 8080 accessible on localhost to the
    container port 8080 using the `-p` CLI option. The `-d` CLI option runs the container
    in the background, which means it will detach from the container and return to
    the terminal prompt. This means we should now be able to resolve the application’s
    endpoint from the local machine. As the following command shows, a simple `curl`
    to the root context path renders the message “Hello World!”:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉命令使用`-p`CLI 选项将本地主机上的端口 8080 转发到容器端口 8080。`-d`CLI 选项在后台运行容器，这意味着它将与容器分离并返回到终端提示符。这意味着我们现在应该能够从本地机器解析应用程序的端点。如以下命令所示，对根上下文路径的简单`curl`将呈现消息“Hello
    World！”：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Listing Containers
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出容器
- en: 'Any running containers can be listed to display their runtime properties. The
    following command renders the container started earlier. The output includes the
    container ID for later reference. Add the flag `-a` to render terminated containers
    as well:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以列出任何正在运行的容器以显示它们的运行时属性。以下命令呈现了先前启动的容器。输出包括容器的 ID，以供稍后参考。添加标志`-a`以同时呈现已终止的容器：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Interacting with the Container
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与容器交互
- en: 'Once the container has been started, you can interact with it. All you need
    is the container ID. Use the `logs` command to inspect log messages produced by
    the application. Inspecting logs can be helpful for troubleshooting. The following
    command renders the log messages produced by Spring Boot upon container startup:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器启动，您可以与其交互。您只需容器 ID。使用`logs`命令检查应用程序在容器启动时产生的日志消息。检查日志对故障排除很有帮助。以下命令呈现了
    Spring Boot 在容器启动时产生的日志消息：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can dig deeper into the internals of running containers if the container
    image is packaged with a command-line shell. For example, you may want to inspect
    files consumed or produced by the application. Use the `exec` command to run a
    command in the container. The flag `-it` allows for iterating with the container
    until you are ready to exit out of it. The following command opens an iterative
    bash shell to the running container:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器镜像打包有命令行 shell，您可以深入了解运行中的容器的内部。例如，您可能想要检查应用程序消耗或产生的文件。使用`exec`命令在容器中运行命令。标志`-it`允许与容器进行迭代，直到您准备好退出。以下命令打开一个迭代的
    bash shell 到正在运行的容器：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To leave the interactive bash shell, run the `exit` command. You’ll return to
    the terminal prompt on your host machine.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出交互式 bash shell，请运行`exit`命令。您将返回到主机机器上的终端提示符。
- en: Publishing the Container Image
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布容器镜像
- en: To publish an image to a registry, you’ll have to do some prework. Most registries
    require you to provide a prefix that signifies the username or hostname as part
    of the container image name, which you can achieve with the `tag` command.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像发布到注册表，您需要进行一些预备工作。大多数注册表要求您提供一个前缀，该前缀表示用户名或主机名作为容器映像名称的一部分，您可以使用`tag`命令来实现这一点。
- en: 'For example, Docker Hub requires you to provide the username. My username is
    `bmuschko` and therefore I have to retag my image before pushing it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Docker Hub要求您提供用户名。我的用户名是`bmuschko`，因此在推送之前我必须重新标记我的映像：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `tag` command does not create a copy of the container image. It simply
    adds another identifier pointing to the existing container image, as shown in
    the following output. The image ID and size of the container image is the same
    for both entries:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`tag`命令不会创建容器映像的副本。它只是向现有容器映像添加另一个标识符，如下图所示。容器映像的ID和大小在两个条目中都是相同的：'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the registry is protected, you’ll also have to provide the credentials.
    For Docker Hub, we are logging in with username:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果注册表受保护，您还需要提供凭据。对于Docker Hub，我们使用用户名登录：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, you can push the image to the registry using the `push` command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用`push`命令将映像推送到注册表：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can discover the published container image through the Docker Hub web page,
    as shown in [Figure 4-2](#dockerhub_ui_image). The “Tags” tab lists all available
    tags for the image including their details and quick reference to the `docker`
    command for pulling the image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Docker Hub网页发现发布的容器映像，如[图 4-2](#dockerhub_ui_image)所示。 “Tags”选项卡列出了映像的所有可用标记，包括其详细信息和使用`docker`命令快速引用的内容。
- en: '![ckd2 0402](Images/ckd2_0402.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0402](Images/ckd2_0402.png)'
- en: Figure 4-2\. Discovering container images on Docker Hub
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 在Docker Hub上发现容器映像
- en: Anyone with access to the registry can now consume the container image using
    the `pull` command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何有权访问注册表的人都可以使用`pull`命令来使用容器映像。
- en: Saving and Loading a Container Image
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存和加载容器映像
- en: 'Instead of publishing a container image to a container registry, you may want
    to save it to a file. Files can be easily stored and backed up on a shared drive
    and don’t require a container registry. The `save` command saves one or many images
    to a tar archive. The resulting archive file contains all parent layers, and all
    tags + versions. The following command saves the container image to the file `java-hello-world.tar`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与其将容器映像发布到容器注册表中，您可能希望将其保存到文件中。文件可以轻松存储和备份在共享驱动器上，并且不需要容器注册表。`save`命令将一个或多个映像保存到tar存档中。生成的存档文件包含所有父层以及所有标记和版本。以下命令将容器映像保存到文件`java-hello-world.tar`中：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To load a container image from a tar archive, use the `load` command. The command
    restores both images and tags. The following command loads the container image
    from the file `java-hello-world.tar`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要从tar存档中加载容器映像，请使用`load`命令。该命令还原映像和标记。以下命令从文件`java-hello-world.tar`中加载容器映像：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The image is now available in the cache, as shown by running the `images` command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在映像已经在缓存中可用，运行`images`命令显示如下：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Going Further
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解
- en: 'Thus far you have experienced the most common developer workflows: containerizing
    an application and pushing the image to a registry. There’s far more to learn
    about building and running containers, but that is outside the scope of this book,
    and we won’t dive any deeper here. If you’d like to learn more, a good starting
    point is the [Docker documentation](https://docs.docker.com).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经体验了最常见的开发者工作流程：将应用程序容器化并将映像推送到注册表。关于构建和运行容器还有很多内容需要学习，但这超出了本书的范围，我们在这里不会深入讨论。如果您想了解更多，请参阅[Docker文档](https://docs.docker.com)。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Application developers use containerization to bundle the application code into
    a container image so that it can be deployed to Kubernetes clusters as a single
    unit of runnable software. The containerization process defines, builds, runs,
    and publishes a container image using a container runtime engine. In this chapter,
    we used Docker Engine to demonstrate the process for a Java-based application;
    however, the steps involved would look similar for applications written in a different
    programming language.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发人员使用容器化将应用程序代码打包到容器映像中，以便作为可运行软件的单个单元部署到Kubernetes集群中。容器化过程使用容器运行时引擎定义、构建、运行和发布容器映像。在本章中，我们使用Docker
    Engine演示了基于Java的应用程序的过程；但是，对于使用不同编程语言编写的应用程序，涉及的步骤看起来可能类似。
- en: Exam Essentials
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Gain practical experience with the containerization process
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过容器化过程获得实际经验
- en: Pods run container images inside of a container. You need to understand how
    to define, build, run, and publish a container image apart from Kubernetes. Practice
    the use of the container runtime engine’s command-line tool to fulfill the workflow.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 在容器内运行容器镜像。你需要了解如何定义、构建、运行和发布一个容器镜像，除了 Kubernetes 外的其他使用方式。练习使用容器运行时引擎的命令行工具来完成工作流程。
- en: Compare the functionality of different container runtime engines
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 比较不同容器运行时引擎的功能
- en: You should get familiar with Docker Engine specifically for understanding the
    containerization process. At the time of writing, Docker Engine is still the most
    widely used container runtime engine. Branch out by playing around with other
    container runtime engines like containerd or Podman.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该熟悉 Docker Engine，特别是为了理解容器化过程。在撰写本文时，Docker Engine 仍然是最广泛使用的容器运行时引擎。通过尝试其他容器运行时引擎如
    containerd 或 Podman 来扩展你的知识领域。
- en: Familiarize yourself with other workflows
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉其他工作流程
- en: As an application developer, you will deal with defining, building, and modifying
    container images daily. Container runtime engine support other, less-known features
    and workflows. It can’t hurt to read through the container runtime engine’s documentation
    to gain broader exposure.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用开发者，你每天都会处理定义、构建和修改容器镜像。容器运行时引擎支持其他不太为人知的功能和工作流程。阅读容器运行时引擎的文档以获得更广泛的认识是一个不错的选择。
- en: Sample Exercises
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_000.xhtml#appendix_a_containers).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可在 [附录 A](app01_split_000.xhtml#appendix_a_containers) 中找到。
- en: Navigate to the directory *app-a/ch04/containerized-java-app* of the checked-out
    GitHub repository [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide).
    Inspect the *Dockerfile*.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至检出的 GitHub 仓库 [*bmuschko/ckad-study-guide*](https://github.com/bmuschko/ckad-study-guide)
    的目录 *app-a/ch04/containerized-java-app*。检查 *Dockerfile*。
- en: Build the container image from the *Dockerfile* with the tag `nodejs-hello-world:1.0.0`.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 *Dockerfile* 构建容器镜像，标签为 `nodejs-hello-world:1.0.0`。
- en: Run a container with the container image. Make the application available on
    port 80.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行一个容器，使用容器镜像。使应用程序在端口 80 上可用。
- en: Execute a `curl` or `wget` command against the application’s endpoint.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对应用程序的端点执行 `curl` 或 `wget` 命令。
- en: Retrieve the container logs.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检索容器日志。
- en: Modify the *Dockerfile* from the previous exercise. Change the base image to
    the tag `20.4-alpine` and the working directory to `/node`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改前一个练习中的 *Dockerfile*。将基础镜像更改为标签 `20.4-alpine`，工作目录更改为 `/node`。
- en: Build the container image from the *Dockerfile* with the tag `nodejs-hello-world:1.1.0`.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 *Dockerfile* 构建容器镜像，标签为 `nodejs-hello-world:1.1.0`。
- en: Ensure that container image has been created by listing it.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保容器镜像已创建，通过列出来验证。
- en: Pull the container image `alpine:3.18.2` [available on Docker Hub](https://hub.docker.com/layers/library/alpine/3.18.2/images/sha256-25fad2a32ad1f6f510e528448ae1ec69a28ef81916a004d3629874104f8a7f70?context=explore).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取容器镜像 `alpine:3.18.2`，可以在 [Docker Hub 上找到](https://hub.docker.com/layers/library/alpine/3.18.2/images/sha256-25fad2a32ad1f6f510e528448ae1ec69a28ef81916a004d3629874104f8a7f70?context=explore)。
- en: Save the container image to the file *alpine-3.18.2.tar*.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将容器镜像保存到文件 *alpine-3.18.2.tar* 中。
- en: Delete the container image. Verify the container image is not listable anymore.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除容器镜像。验证容器镜像已不再显示在列表中。
- en: Reinstate the container image from the file *alpine-3.18.2.tar*.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从文件 *alpine-3.18.2.tar* 恢复容器镜像。
- en: Verify that the container image can be listed.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证容器镜像能够被列出。
