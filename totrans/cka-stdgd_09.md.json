["```\n    $ kubectl create namespace apps\n    $ kubectl create serviceaccount api-access -n apps\n    ```", "```\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: apps\n    ```", "```\n    $ kubectl create -f apps-namespace.yaml\n    ```", "```\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n      name: api-access\n      namespace: apps\n    ```", "```\n    $ kubectl create -f api-serviceaccount.yaml\n    ```", "```\n    $ kubectl create clusterrole api-clusterrole --verb=watch,list,get \\\n      --resource=pods\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRole\n    metadata:\n      name: api-clusterrole\n    rules:\n    - apiGroups: [\"\"]\n      resources: [\"pods\"]\n      verbs: [\"watch\",\"list\",\"get\"]\n    ```", "```\n    $ kubectl create -f api-clusterrole.yaml\n    ```", "```\n    $ kubectl create clusterrolebinding api-clusterrolebinding \\\n      --serviceaccount=apps:api-access --clusterrole=api-clusterrole\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n      name: api-clusterrolebinding\n    roleRef:\n      apiGroup: rbac.authorization.k8s.io\n      kind: ClusterRole\n      name: api-clusterrole\n    subjects:\n    - apiGroup: \"\"\n      kind: ServiceAccount\n      name: api-access\n      namespace: apps\n    ```", "```\n    $ kubectl create -f api-clusterrolebinding.yaml\n    ```", "```\n    $ kubectl run operator --image=nginx:1.21.1 --restart=Never \\\n      --port=80 --serviceaccount=api-access -n apps\n    $ kubectl create namespace rm\n    $ kubectl run disposable --image=nginx:1.21.1 --restart=Never \\\n      -n rm\n    ```", "```\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: rm\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: operator\n      namespace: apps\n    spec:\n      serviceAccountName: api-access\n      containers:\n      - name: operator\n        image: nginx:1.21.1\n        ports:\n        - containerPort: 80\n    ---\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: disposable\n      namespace: rm\n    spec:\n      containers:\n      - name: disposable\n        image: nginx:1.21.1\n    ```", "```\n    $ kubectl create -f rm-namespace.yaml\n    $ kubectl create -f api-pods.yaml\n    ```", "```\n    $ kubectl config view --minify -o \\\n      jsonpath='{.clusters[0].cluster.server}'\n    https://192.168.64.4:8443\n    $ kubectl get secret $(kubectl get serviceaccount api-access -n apps \\\n      -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' -n apps \\\n      | base64 --decode\n    eyJhbGciOiJSUzI1NiIsImtpZCI6Ii1hOUhI...\n\n    ```", "```\n    $ kubectl exec operator -it -n apps -- /bin/sh\n    ```", "```\n    # curl https://192.168.64.4:8443/api/v1/namespaces/rm/pods --header \\\n    \"Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ii1hOUhI...\" \\\n    --insecure\n    {\n        \"kind\": \"PodList\",\n        \"apiVersion\": \"v1\",\n        ...\n    }\n    # curl -X DELETE https://192.168.64.4:8443/api/v1/namespaces \\\n    /rm/pods/disposable --header \\\n    \"Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ii1hOUhI...\" \\\n    --insecure\n    {\n      \"kind\": \"Status\",\n      \"apiVersion\": \"v1\",\n      \"metadata\": {\n\n      },\n      \"status\": \"Failure\",\n      \"message\": \"pods \\\"disposable\\\" is forbidden: User \\\n      \\\"system:serviceaccount:apps:api-access\\\" cannot delete \\\n      resource \\\"pods\\\" in\n      API group \\\"\\\" in the namespace \\\"rm\\\"\",\n      \"reason\": \"Forbidden\",\n      \"details\": {\n        \"name\": \"disposable\",\n        \"kind\": \"pods\"\n      },\n      \"code\": 403\n    }\n    ```", "```\n    $ vagrant ssh k8s-control-plane\n    ```", "```\n    $ sudo apt-mark unhold kubeadm && sudo apt-get update && sudo apt-get \\\n      install -y kubeadm=1.21.2-00 && sudo apt-mark hold kubeadm\n    $ sudo kubeadm upgrade apply v1.21.2\n    ```", "```\n    $ kubectl drain k8s-control-plane --ignore-daemonsets\n    $ sudo apt-get update && sudo apt-get install -y \\\n      --allow-change-held-packages kubelet=1.21.2-00 kubectl=1.21.2-00\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl restart kubelet\n    $ kubectl uncordon k8s-control-plane\n    ```", "```\n    $ kubectl get nodes\n    $ exit\n    ```", "```\n    $ vagrant ssh worker-1\n    ```", "```\n    $ sudo apt-get update && sudo apt-get install -y \\\n      --allow-change-held-packages kubeadm=1.21.2-00\n    $ sudo kubeadm upgrade node\n    ```", "```\n    $ kubectl drain worker-1 --ignore-daemonsets\n    $ sudo apt-get update && sudo apt-get install -y \\\n      --allow-change-held-packages kubelet=1.21.2-00 kubectl=1.21.2-00\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl restart kubelet\n    $ kubectl uncordon worker-1\n    ```", "```\n    $ kubectl get nodes\n    $ exit\n    ```", "```\n    $ vagrant ssh k8s-control-plane\n    ```", "```\n    $ kubectl describe pod etcd-k8s-control-plane -n kube-system\n    $ sudo ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n      --cert=/etc/kubernetes/pki/etcd/server.crt \\\n      --key=/etc/kubernetes/pki/etcd/server.key snapshot save /opt/etcd.bak\n    ```", "```\n    $ sudo ETCDCTL_API=3 etcdctl --data-dir=/var/bak snapshot restore \\\n      /opt/etcd.bak\n    $ sudo vim /etc/kubernetes/manifests/etcd.yaml\n    ```", "```\n    $ kubectl get pod etcd-k8s-control-plane -n kube-system\n    $ exit\n    ```", "```\n    $ kubectl create deployment nginx --image=nginx:1.17.0 --replicas=2\n    ```", "```\n    $ kubectl scale deployment nginx --replicas=7\n    $ kubectl get deployments,pods\n    NAME                    READY   UP-TO-DATE   AVAILABLE   AGE\n    deployment.apps/nginx   7/7     7            7           93s\n\n    NAME                         READY   STATUS    RESTARTS   AGE\n    pod/nginx-844f997cc9-6tbzw   1/1     Running   0          93s\n    pod/nginx-844f997cc9-8mzz2   1/1     Running   0          93s\n    pod/nginx-844f997cc9-n7g8x   1/1     Running   0          10s\n    pod/nginx-844f997cc9-sbrmf   1/1     Running   0          10s\n    pod/nginx-844f997cc9-wtbk6   1/1     Running   0          10s\n    pod/nginx-844f997cc9-xghl9   1/1     Running   0          10s\n    pod/nginx-844f997cc9-zsggj   1/1     Running   0          10s\n    ```", "```\n    apiVersion: autoscaling/v2beta2\n    kind: HorizontalPodAutoscaler\n    metadata:\n      name: nginx-hpa\n    spec:\n      scaleTargetRef:\n        apiVersion: apps/v1\n        kind: Deployment\n        name: nginx\n      minReplicas: 3\n      maxReplicas: 20\n      metrics:\n      - type: Resource\n        resource:\n          name: cpu\n          target:\n            type: Utilization\n            averageUtilization: 65\n      - type: Resource\n        resource:\n          name: memory\n          target:\n            type: AverageValue\n            averageValue: 1Gi\n    ```", "```\n    $ kubectl create -f hpa.yaml\n    ```", "```\n    $ kubectl set image deployment nginx nginx=nginx:1.21.1 --record\n    ```", "```\n    $ kubectl rollout history deployment nginx\n    deployment.apps/nginx\n    REVISION  CHANGE-CAUSE\n    1         <none>\n    2         kubectl set image deployment nginx nginx=nginx:1.21.1 \\\n              --record=true\n    ```", "```\n    $ kubectl rollout undo deployment nginx --to-revision=1\n    $ kubectl rollout history deployment nginx\n    deployment.apps/nginx\n    REVISION  CHANGE-CAUSE\n    2         kubectl set image deployment nginx nginx=nginx:1.21.1 \\\n              --record=true\n    3         <none>\n    ```", "```\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: basic-auth\n    type: kubernetes.io/basic-auth\n    stringData:\n      username: super\n      password: my-s8cr3t\n    ```", "```\n    $ kubectl create -f basic-auth-secret.yaml\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx\n      labels:\n        app: nginx\n    spec:\n      replicas: 7\n      selector:\n        matchLabels:\n          app: nginx\n      template:\n        metadata:\n          labels:\n            app: nginx\n        spec:\n          containers:\n          - name: nginx\n            image: nginx:1.17.0\n            volumeMounts:\n            - mountPath: /etc/secret\n              name: auth-vol\n              readOnly: true\n          volumes:\n          - name: auth-vol\n            secret:\n              secretName: basic-auth\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: ingress-controller\n    spec:\n      containers:\n      - name: ingress-controller\n        image: bitnami/nginx-ingress-controller:1.0.0\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"1\"\n          limits:\n            memory: \"1024Mi\"\n            cpu: \"2.5\"\n    ```", "```\n    $ kubectl get nodes\n    NAME           STATUS   ROLES                  AGE   VERSION\n    minikube       Ready    control-plane,master   41d   v1.21.2\n    minikube-m02   Ready    <none>                 21h   v1.21.2\n    minikube-m03   Ready    <none>                 21h   v1.21.2\n    ```", "```\n    $ kubectl create -f ingress-controller-pod.yaml\n    $ kubectl get pod ingress-controller -o yaml | grep nodeName:\n      nodeName: minikube-m02\n    $ echo \"minikube-m02\" >> node.txt\n    ```", "```\n    $ kubectl apply -f manifests/ -R\n    configmap/logs-config created\n    pod/nginx created\n    ```", "```\n    $ vim manifests/configmap.yaml\n    $ kubectl apply -f manifests/configmap.yaml\n    configmap/logs-config configured\n    ```", "```\n    $ kubectl delete -f manifests/ -R\n    configmap \"logs-config\" deleted\n    pod \"nginx\" deleted\n    ```", "```\n    namespace: t012\n    resources:\n    - pod.yaml\n    ```", "```\n    $ kubectl kustomize ./\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: nginx\n      namespace: t012\n    spec:\n      containers:\n      - image: nginx:1.21.1\n        name: nginx\n    ```", "```\n    $ kubectl create namespace external\n    $ kubectl create deployment nginx --image=nginx --port=80 --replicas=3 \\\n      -n external\n    $ kubectl create service loadbalancer nginx --tcp=80:80 -n external\n    ```", "```\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: external\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx\n      namespace: external\n    spec:\n      selector:\n        matchLabels:\n          app: nginx\n      template:\n        metadata:\n          labels:\n            app: nginx\n        spec:\n          containers:\n          - image: nginx\n            name: nginx\n            ports:\n            - containerPort: 80\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: nginx\n      namespace: external\n    spec:\n      type: LoadBalancer\n      selector:\n        app: nginx\n      ports:\n      - port: 80\n        targetPort: 80\n    ```", "```\n    $ kubectl create -f external-namespace.yaml\n    $ kubectl create -f external-deployment.yaml\n    $ kubectl create -f external-service.yaml\n    ```", "```\n    $ kubectl get service -n external\n    NAME    TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE\n    nginx   LoadBalancer   10.108.34.2   10.108.34.2   80:31898/TCP   36m\n    ```", "```\n    $ wget 10.108.34.2:80\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <title>Welcome to nginx!</title>\n    ...\n    ```", "```\n    $ kubectl edit service nginx -n external\n    ...\n    spec:\n      type: ClusterIP\n    ...\n    ```", "```\n    $ kubectl get service -n external\n    NAME    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE\n    nginx   ClusterIP   10.108.34.2   <none>        80/TCP    52m\n    ```", "```\n    $ kubectl run tmp --image=busybox --restart=Never -n external -it --rm \\\n      -- wget 10.108.34.2:80\n    Connecting to 10.108.34.2:80 (10.108.34.2:80)\n    saving to 'index.html'\n    index.html           100% |********************************|   615  \\\n    0:00:00 ETA\n    'index.html' saved\n    pod \"tmp\" deleted\n    $ kubectl run tmp --image=busybox --restart=Never -n external -it --rm \\\n      -- wget nginx:80\n    Connecting to 10.108.34.2:80 (10.108.34.2:80)\n    saving to 'index.html'\n    index.html           100% |********************************|   615  \\\n    0:00:00 ETA\n    'index.html' saved\n    pod \"tmp\" deleted\n\n    ```", "```\n    $ kubectl create ingress incoming --rule=\"/*=nginx:80\" -n external\n\n    ```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: incoming\n      namespace: external\n    spec:\n      rules:\n      - http:\n          paths:\n          - backend:\n              service:\n                name: nginx\n                port:\n                  number: 80\n            path: /\n            pathType: Prefix\n    ```", "```\n    $ kubectl create -f incoming-ingress.yaml\n    ```", "```\n    $ kubectl get nodes -o wide\n    NAME      STATUS   ROLES                 AGE   VERSION   INTERNAL-IP   \\\n    EXTERNAL-IP   OS-IMAGE               KERNEL-VERSION   CONTAINER-RUNTIME\n    minikube  Ready    control-plane,master  13d   v1.21.2   192.168.64.19 \\\n    <none>        Buildroot 2020.02.12   4.19.182         docker://20.10.6\n    ```", "```\n    $ curl 192.168.64.19\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <title>Welcome to nginx!</title>\n    ...\n    ```", "```\n    $ kubectl run echoserver --image=k8s.gcr.io/echoserver:1.10 \\\n      --restart=Never --port=8080 --expose -n external\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: echoserver\n      namespace: external\n      labels:\n        run: nginx\n    spec:\n      containers:\n      - name: echoserver\n        image: k8s.gcr.io/echoserver:1.10\n        ports:\n        - containerPort: 8080\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: echoserver\n      namespace: external\n    spec:\n      type: ClusterIP\n      selector:\n        run: nginx\n      ports:\n      - port: 8080\n        targetPort: 8080\n    ```", "```\n    $ kubectl create -f external-echoserver-pod.yaml\n    $ kubectl create -f external-echoserver-service.yaml\n    ```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: incoming\n      namespace: external\n    spec:\n      rules:\n      - http:\n          paths:\n          - backend:\n              service:\n                name: nginx\n                port:\n                  number: 80\n            path: /\n            pathType: Prefix\n          - backend:\n              service:\n                name: echoserver\n                port:\n                  number: 8080\n            path: /echo\n            pathType: Exact\n    ```", "```\n    $ curl 192.168.64.19/echo\n\n    Hostname: echoserver\n    ...\n    ```", "```\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: coredns-custom\n      namespace: kube-system\n    data:\n      Corefile: |\n        .:53 {\n            ...\n            rewrite name substring svc.cka.example.com svc.cluster.local\n            kubernetes cluster.local in-addr.arpa ip6.arpa {\n            ...\n        }\n    ```", "```\n    $ kubectl get pods -n kube-system\n    NAME                               READY   STATUS    RESTARTS   AGE\n    coredns-558bd4d5db-kjdtx           1/1     Running   0          9m35s\n    ...\n    $ kubectl delete pod coredns-558bd4d5db-kjdtx -n kube-system\n    $ kubectl get pods -n kube-system\n    NAME                               READY   STATUS    RESTARTS   AGE\n    coredns-558bd4d5db-mc98t           1/1     Running   0          54s\n    ...\n    ```", "```\n    $ kubectl create namespace hello\n    $ kubectl run tmp --image=busybox --restart=Never -n hello -it --rm \\\n      -- wget echoserver.external.svc.cka.example.com:8080\n    Connecting to echoserver.external.svc.cka.example.com:8080 \\\n    (10.104.248.24:8080)\n    saving to 'index.html'\n    index.html           100% |********************************|   \\\n    460  0:00:00 ETA\n    'index.html' saved\n    pod \"tmp\" deleted\n\n    ```", "```\n    kind: PersistentVolume\n    apiVersion: v1\n    metadata:\n      name: logs-pv\n    spec:\n      capacity:\n        storage: 2Gi\n      accessModes:\n        - ReadWriteOnce\n        - ReadOnlyMany\n      persistentVolumeReclaimPolicy: Delete\n      storageClassName: \"\"\n      hostPath:\n        path: /tmp/logs\n    ```", "```\n    $ kubectl create -f logs-pv.yaml\n    persistentvolume/logs-pv created\n    $ kubectl get pv\n    NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS \\\n      CLAIM              STORAGECLASS   REASON   AGE\n    logs-pv   2Gi        RWO,ROX        Delete           Bound  \\\n      default/logs-pvc                           16m\n    ```", "```\n    kind: PersistentVolumeClaim\n    apiVersion: v1\n    metadata:\n      name: logs-pvc\n    spec:\n      accessModes:\n        - ReadWriteOnce\n      storageClassName: \"\"\n      resources:\n        requests:\n          storage: 1Gi\n    ```", "```\n    $ kubectl create -f logs-pvc.yaml\n    persistentvolumeclaim/logs-pvc created\n    $ kubectl get pvc\n    NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES \\\n      STORAGECLASS   AGE\n    logs-pvc   Bound    logs-pv   2Gi        RWO,ROX      \\\n                     17m\n    ```", "```\n    $ kubectl run nginx --image=nginx --dry-run=client --restart=Never \\\n      -o yaml > nginx-pod.yaml\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      creationTimestamp: null\n      labels:\n        run: nginx\n      name: nginx\n    spec:\n      volumes:\n        - name: logs-volume\n          persistentVolumeClaim:\n            claimName: logs-pvc\n      containers:\n      - image: nginx\n        name: nginx\n        volumeMounts:\n          - mountPath: \"/var/log/nginx\"\n            name: logs-volume\n        resources: {}\n      dnsPolicy: ClusterFirst\n      restartPolicy: Never\n    status: {}\n    ```", "```\n    $ kubectl create -f nginx-pod.yaml\n    pod/nginx created\n    $ kubectl get pods\n    NAME    READY   STATUS    RESTARTS   AGE\n    nginx   1/1     Running   0          8s\n    ```", "```\n    $ kubectl exec nginx -it -- /bin/sh\n    # cd /var/log/nginx\n    # touch my-nginx.log\n    # ls\n    access.log  error.log  my-nginx.log\n    # exit\n    ```", "```\n    $ kubectl delete pod nginx\n    $ kubectl delete pvc logs-pvc\n    $ kubectl get pv,pvc\n    No resources found\n    ```", "```\n    $ kubectl get sc\n    NAME                 PROVISIONER                RECLAIMPOLICY \\\n      VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\n    standard (default)   k8s.io/minikube-hostpath   Delete        \\\n      Immediate           false                  22d\n    ```", "```\n    apiVersion: storage.k8s.io/v1\n    kind: StorageClass\n    metadata:\n      name: custom\n    provisioner: k8s.io/minikube-hostpath\n    ```", "```\n    $ kubectl create -f custom-sc.yaml\n    storageclass.storage.k8s.io/custom created\n    $ kubectl get sc\n    NAME                 PROVISIONER                RECLAIMPOLICY \\\n      VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\n    custom               k8s.io/minikube-hostpath   Delete        \\\n      Immediate           false                  11s\n    standard (default)   k8s.io/minikube-hostpath   Delete        \\\n      Immediate           false                  22d\n    ```", "```\n    kind: PersistentVolumeClaim\n    apiVersion: v1\n    metadata:\n      name: custom-pvc\n    spec:\n      accessModes:\n        - ReadWriteOnce\n      storageClassName: custom\n      resources:\n        requests:\n          storage: 500Mi\n    ```", "```\n    $ kubectl create -f custom-pvc.yaml\n    persistentvolumeclaim/custom-pvc created\n    $ kubectl get pv,pvc\n    NAME                                                        CAPACITY \\\n      ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM   STORAGECLASS \\\n        REASON   AGE\n    persistentvolume/pvc-6fe081b5-e425-45cd-a94a-3488ce24cb87   500Mi    \\\n      RWO            Delete           Bound    default/custom-pvc   custom \\\n                       13s\n\n    NAME                               STATUS \\\n      VOLUME                                     CAPACITY   ACCESS MODES \\\n       STORAGECLASS   AGE\n    persistentvolumeclaim/custom-pvc   Bound  \\\n      pvc-6fe081b5-e425-45cd-a94a-3488ce24cb87   500Mi      RWO \\\n                custom           13s\n    ```", "```\n    $ echo \"pvc-6fe081b5-e425-45cd-a94a-3488ce24cb87\" > pv-name.txt\n    ```", "```\n    $ kubectl delete pvc custom-pvc\n    $ kubectl get pv,pvc\n    No resources found\n    ```", "```\n    $ kubectl run multi --image=nginx:1.21.6 -o yaml --dry-run=client \\\n      --restart=Never > multi-container.yaml\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: multi\n    spec:\n      containers:\n      - image: nginx:1.21.6\n        name: nginx\n      - image: busybox:1.35.0\n        name: streaming\n        args: [/bin/sh, -c, 'tail -n+1 -f /var/log/nginx/access.log']\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: multi\n    spec:\n      containers:\n      - image: nginx:1.21.6\n        name: nginx\n        volumeMounts:\n        - name: accesslog\n          mountPath: /var/log/nginx\n      - image: busybox:1.35.0\n        name: streaming\n        args: [/bin/sh, -c, 'tail -n+1 -f /var/log/nginx/access.log']\n        volumeMounts:\n        - name: accesslog\n          mountPath: /var/log/nginx\n      volumes:\n      - name: accesslog\n        emptyDir: {}\n    ```", "```\n    $ kubectl create -f multi-container.yaml\n    ```", "```\n    $ kubectl get pod multi -o wide\n    NAME    READY   STATUS    RESTARTS   AGE     IP           NODE         \\\n      NOMINATED NODE   READINESS GATES\n    multi   2/2     Running   0          3m23s   10.244.2.3   minikube-m03 \\\n      <none>           <none>\n    $ kubectl run tmp --image=busybox --restart=Never -it --rm \\\n      -- wget 10.244.2.3\n    $ kubectl run tmp --image=busybox --restart=Never -it --rm \\\n      -- wget 10.244.2.3\n    $ kubectl run tmp --image=busybox --restart=Never -it --rm \\\n      -- wget 10.244.2.3\n    $ kubectl logs multi -c streaming\n    10.244.1.2 - - [27/Jan/2022:16:44:25 +0000] \"GET / HTTP/1.1\" 200 \\\n    615 \"-\" \"Wget\" \"-\"\n    10.244.1.3 - - [27/Jan/2022:16:44:29 +0000] \"GET / HTTP/1.1\" 200 \\\n    615 \"-\" \"Wget\" \"-\"\n    10.244.1.4 - - [27/Jan/2022:16:44:32 +0000] \"GET / HTTP/1.1\" 200 \\\n    615 \"-\" \"Wget\" \"-\"\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: stress-1\n    spec:\n      containers:\n      - image: polinux/stress:1.0.4\n        name: consumer\n        resources:\n          limits:\n            memory: \"250Mi\"\n          requests:\n            memory: \"250Mi\"\n        args: [/bin/sh, -c, 'stress --vm 1 --vm-bytes \\\n               $(shuf -i 20-200 -n 1)M --vm-hang 1']\n    ```", "```\n    $ kubectl create -f stress-1-pod.yaml\n    $ kubectl create -f stress-2-pod.yaml\n    $ kubectl get pods\n    NAME       READY   STATUS    RESTARTS   AGE\n    stress-1   1/1     Running   0          15m\n    stress-2   1/1     Running   0          6m28s\n    ```", "```\n    $ kubectl top pods\n    NAME       CPU(cores)   MEMORY(bytes)\n    stress-1   32m          93Mi\n    stress-2   47m          117Mi\n    $ echo \"stress-2\" > max-memory.txt\n    ```"]