- en: Chapter 15\. How to Contribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reaching this point in the book means you’re on your way to mastering all aspects
    of Falco. This chapter will give you some advice on contributing to The Falco
    Project. Contributing means much more than just writing code (a common misconception)—in
    fact, there are many valuable ways to contribute. We’ll explain where to start
    and how to satisfy the Falcosecurity organization’s specific contribution requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to open source software is a rewarding experience. Not only will
    you improve Falco, but you’ll also meet people with similar interests, share feedback
    and ideas with others, and improve your own skills. If you are new to open source
    or want to learn more, we suggest taking a look at the [Open Source Guides](https://oreil.ly/ZBe39).
  prefs: []
  type: TYPE_NORMAL
- en: What Does It Mean to Contribute to Falco?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Falco is a [Cloud Native Computing Foundation](https://www.cncf.io) project.
    The CNCF serves as a vendor-neutral place for cloud native software. It empowers
    self-governing models for its hosted projects and helps sustain healthy open source
    communities. Falco is primarily driven by its community, which includes users,
    maintainers, and developers who curate and continuously improve it by:'
  prefs: []
  type: TYPE_NORMAL
- en: Sharing feedback to improve the design and existing features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Falco to discover issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing project documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimenting with new ideas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-driving new features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proposing changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And the list goes on. In summary, contributing means sharing knowledge and collaborating
    for the benefit of The Falco Project.
  prefs: []
  type: TYPE_NORMAL
- en: Where Should I Start?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should start by joining the Falco community. You can do that by joining
    the [Falco Slack channel](https://oreil.ly/00Az6) and introducing yourself. The
    community is very welcoming. We recommend subscribing to the [official mailing
    list](https://oreil.ly/R5CSB). Community members, including maintainers, also
    get together in a weekly call, which everyone can join. You can find details about
    the weekly community call and other initiatives in the [community GitHub repository](https://oreil.ly/VMhp4).
  prefs: []
  type: TYPE_NORMAL
- en: 'As a friendly reminder, the community is made up of human beings: be kind with
    them, and they will do the same with you. Everyone participating in the community
    must adhere to its [Code of Conduct](https://oreil.ly/GgbyC), so make sure you
    read and understand it.'
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to Falcosecurity Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know by now, Falco and all its related projects are hosted under the
    [Falco­se⁠curity organization on GitHub](https://oreil.ly/KNTDD). Each project
    has its own public repository—you can even find a repository with the [source
    code of the Falco website](https://oreil.ly/47j3K). If you don’t have a GitHub
    account yet, you’ll need to [create one](https://oreil.ly/F61GW). We also advise
    you to take your time and get familiar with how GitHub works. You’ll need a working
    knowledge of Git, particularly if you plan to contribute code.
  prefs: []
  type: TYPE_NORMAL
- en: The Falcosecurity organization has an automated support mechanism (or bot) to
    help you and make the contribution process easier. You will probably need a bit
    of time to get acquainted with it. If you need help, feel free to ask! An actual
    human from the community will be happy to help you.
  prefs: []
  type: TYPE_NORMAL
- en: Before preparing any contribution, make sure to check out the [online contribution
    guidelines](https://oreil.ly/yRema), since they change from time to time. However,
    keep reading and we will explain the most important aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub issues](https://oreil.ly/cOTct) are the main way to interact with a
    project. Opening an issue to report a bug or propose an enhancement is one of
    the principal forms of contribution. Using issues correctly is also vital for
    the project, since most feedback comes from them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each Falcosecurity repository defines *kinds* of issues. The most common kinds
    are *Bug Report*, *Documentation Request*, *Failing Test*, and *Feature Request*.
    You select the kind when opening an issue. Depending on the kind you select, you
    will see an issue description along with a form for you to fill out. The form
    usually includes questions: for example, it might ask you to describe a bug, how
    to reproduce it, the Falco version that presents the bug, and so on. This information
    helps others understand your issue and work on it, so it’s crucial to answer all
    of the questions to save everyone time and increase the chances of successful
    resolution.'
  prefs: []
  type: TYPE_NORMAL
- en: Once an issue has been opened, a collaborative process starts. Any community
    members interested in the topic can participate, not just maintainers. Participating
    in this process is a welcome way to get involved.
  prefs: []
  type: TYPE_NORMAL
- en: The initial stage of this process is called *triaging*. It involves verifying
    and categorizing the information reported in the issue. For example, in the case
    of a bug, community members try to reproduce it and check if it appears in the
    manner described. In some cases, the process ends with someone correctly answering
    a question or simply pointing the reporter to resources that solve the problem.
    In other cases, someone volunteers to implement a requested feature or fix a bug
    and takes ownership of submitting a *pull request* (see the next section).
  prefs: []
  type: TYPE_NORMAL
- en: You can be involved at any stage of this process. As long as it is constructive,
    everyone can contribute.
  prefs: []
  type: TYPE_NORMAL
- en: Pull Requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Pull requests (PRs)](https://oreil.ly/bcerI) are the only way to commit changes
    to a Falcosecurity project. When you want to submit a new feature or a fix, you
    have to [fork the related repository](https://oreil.ly/yfuIq), create a branch
    in your fork, and add your commits. Once you’re confident your change works as
    expected, you are ready to submit a PR. Similar to issues, PRs come with a predefined
    [template](https://oreil.ly/zqqJL) to fill out. Be sure to read the instructions
    carefully. The template also includes some commands to help you interact with
    the automation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you open a PR, you will need to wait for a maintainer to review it. Maintainers
    have a lot of ongoing issues and PRs to look at, so be patient if they do not
    reply quickly! They might approve the PR directly or ask you to change something
    in your code. The review process is collaborative: maintainers and the PR author
    (and sometimes other users) share feedback and comments until the PR gets approved
    and merged. Any time you’re in doubt, ask for support: the maintainers will explain
    how to proceed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few general guidelines to follow when making a PR:'
  prefs: []
  type: TYPE_NORMAL
- en: Each repository may have its own coding style and guidelines; make sure you
    read and understand them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid proposing too many code changes in a single PR; submitting several smaller,
    self-contained PRs usually works better.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintainers highly recommend using the [Conventional Commits style](https://oreil.ly/BB160)
    in your Git commit messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must sign off on all of your Git commits, and your PR must not include merge
    commits (which we’ll discuss in a moment).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following subsections explain the main requirements you must satisfy when
    preparing your code using Git.
  prefs: []
  type: TYPE_NORMAL
- en: Git conflict resolution and linear history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes you may need to synchronize with the upstream (remote) branch when
    working on your PR. If the remote branch has diverged from your local one, conflicts
    might arise. Git allows you to synchronize and resolve conflicts by *merging*
    or *rebasing*. Both methods solve the same problem, but they produce different
    outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Merging happens when the histories of the local and remote branches have diverged,
    and you use the `git merge` command or the `git pull` command to reconcile nonlinear
    histories. However, merging has the drawback of not leaving the repository history
    clean, making it harder to navigate with commands like `git bisect` or `git log`.
    For these reasons, the Falcosecurity organization does not allow merging in its
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast, *rebasing* moves your commits, placing them on top of the history
    of the other branch (instead of introducing a merge commit). That ensures the
    Git history is always linear. When developing your PR, you must always use rebasing
    to synchronize with the upstream or resolve conflicts with the main branch. The
    following command works in both cases (replace `*<branch>*` with the name of the
    remote branch):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command also removes merge commits if you have accidentally introduced
    them. You can use its shortened version, `git pull --rebase`, when you only need
    to pull changes from your remote branch (for example, when working with collaborators
    on the same branch).
  prefs: []
  type: TYPE_NORMAL
- en: 'To reiterate: the Falcosecurity organization enforces a linear history and
    does not allow merge commits for any projects. If your PR has a merge commit,
    the automation will block the PR and maintainers will not be able to merge it
    until you fix the issue. Always use rebasing, or your changes will not be accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: The Developer Certificate of Origin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 2004, the Linux Foundation (the parent organization of the CNCF) introduced
    the [Developer Certificate of Origin (DCO)](https://oreil.ly/Qttlz), a lightweight
    way for contributors to state that they have written (or have the right to submit)
    a piece of code. Projects that enforce the DCO require contributors to sign off
    on their commits, indicating that they agree to the DCO’s terms for that single
    contribution. The Git CLI has an embedded sign-off functionality that you can
    use via the [`-s` option](https://oreil.ly/5VcWl) or by manually adding the following
    line to the commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The line must follow this format and include your name and email address.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the CNCF, Falco and all its related projects require the DCO. The
    Falco­se⁠curity organization implements an automation mechanism to check the DCO
    on PRs. When it is missing in a commit, the automation blocks the PR. So, don’t
    forget to sign off on every single commit; otherwise, maintainers cannot accept
    your contributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you submit a PR and the DCO check fails because you missed signing off on
    one or more commits, don’t worry. You can adjust it. If you just need to amend
    the last commit, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to fix all the commits in your PR, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve reached the end of the book! It’s been a long journey
    that covered architecture, syntax, real-world usage, customization, code development,
    and many more interesting topics. We sincerely hope you’ve enjoyed reading it
    and, more importantly, that the content is valuable to you, whether you came to
    this book as a beginner or an advanced user.
  prefs: []
  type: TYPE_NORMAL
- en: For us, this is a bittersweet moment. While we are sad to say goodbye, we’re
    grateful we had a chance to go through this journey with you, and we are proud
    to contribute to making your software a little more secure.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to start another incredible adventure. As Falco maintainers,
    we welcome you to the project and hope to meet you in one of the community forums.
  prefs: []
  type: TYPE_NORMAL
