- en: Chapter 4\. Introduction to Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Authentication* and *identity* are integral parts of almost any application.
    Knowing who the user is, what permissions they have, whether or not they are signed
    in, and having a unique identifier for the user allow your application to render
    the correct views and return the proper data for the currently signed-in user.'
  prefs: []
  type: TYPE_NORMAL
- en: Most applications require mechanisms to handle user sign-up, user sign-in, password
    encryption, and updating, as well as countless other tasks around identity management.
    Modern applications often call for things like open authentication (OAUTH), multifactor
    authentication (MFA), and time-based on time passwords (TOTP).
  prefs: []
  type: TYPE_NORMAL
- en: In the past, developers had to hand roll all of this authentication functionality
    from scratch. This task alone could take a team of developers weeks, or even months,
    to get right and to do so securely. Today there are fully managed authentication
    services like Auth0, Okta, and Amazon Cognito that handle all of this for us.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to properly and securely implement authentication
    in a React application using Amazon Cognito with AWS Amplify.
  prefs: []
  type: TYPE_NORMAL
- en: The app that you will be building is a basic application that requires authentication
    in order to be viewed and also has a profile page showing profile information
    about the signed-in user. If the user is signed in, they can navigate between
    a *public route*, a *profile route* with an authentication form, and a *protected
    route* viewable only to signed-in users.
  prefs: []
  type: TYPE_NORMAL
- en: If they are not signed in, they can only view the public route and authentication
    form on the profile route. If the user tries to access a protected route when
    they are not signed in, we want to redirect them to the authentication form so
    that they can sign in and then access the route once authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: This app will also persist *user state*, so if they refresh the app or navigate
    away from it and come back, they will stay signed in.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Amazon Cognito
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Cognito is a fully managed *identity service* from AWS. Cognito allows
    for simple and secure user sign-up, sign-in, *access control*, and *user identity
    management*. Cognito scales to millions of users and also supports sign-in with
    social identity providers, such as Facebook, Google, and Amazon. It is also free
    for the first 50,000 users of any app.
  prefs: []
  type: TYPE_NORMAL
- en: How Amazon Cognito Works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cognito has two main pieces: *user pools* and *identity pools*:'
  prefs: []
  type: TYPE_NORMAL
- en: User pools
  prefs: []
  type: TYPE_NORMAL
- en: These provide a secure user directory that stores all your users and scales
    to hundreds of millions of users. It is a fully managed service. As a serverless
    technology, user pools are easy to set up without having to worry about standing
    up any infrastructure. User pools are what manage all of the users that sign up
    and sign in to the account, and are what we will be focusing on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Identity pools
  prefs: []
  type: TYPE_NORMAL
- en: These allow you to authorize users that are signed in to your application to
    access various other AWS services. Say you wanted to allow a user to have access
    to a Lambda function so that they could fetch data from another API; you could
    specify that while creating an identity pool. Where user pools come in is that
    the source of these identities could be a Cognito user pool or even Facebook or
    Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cognito user pools allow your application to invoke various methods against
    the service to manage all aspects of user identity, including such items as:'
  prefs: []
  type: TYPE_NORMAL
- en: Signing up a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing in a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing out a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing a user’s password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resetting a user’s password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirming an MFA code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Cognito Integration with AWS Amplify
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Amplify has support for Amazon Cognito in various ways. First of all, you
    can create and configure Amazon Cognito services directly from the Amplify CLI.
    Once you’ve created the authentication service via the CLI you can then call various
    methods (like `signUp`, `signIn`, and `signOut`) from your JavaScript application
    using the Amplify JavaScript client library.
  prefs: []
  type: TYPE_NORMAL
- en: Amplify also has preconfigured UI components that allow you to scaffold out
    entire authentication flows in just a couple of lines of code for frameworks like
    React, React Native, Vue, and Angular.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll be using a combination of the Amplify CLI, Amplify JavaScript
    client, and Amplify React UI components to build an application that demonstrates
    *routing*, *authentication*, and *protected routes*. You’ll also use React Router
    for routing and Ant Design to give the application some basic styling (see [Figure 4-1](#fig4a)).
  prefs: []
  type: TYPE_NORMAL
- en: '![React with Routing and Authentication](Images/fssl_0401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1\. React with routing and authentication
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating the React App and Adding Amplify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you’ll do to get started is create the React application, install
    the necessary dependencies, and create the Amplify project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, open your terminal and create a new React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then install the AWS Amplify, AWS Amplify React, React Router, and Ant Design
    libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize a new Amplify project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the Amplify project now initialized, we can create the authentication
    service. To do so, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the authentication service has been configured and you can deploy it using
    the `amplify push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The authentication service has been deployed, so let’s start testing it out.
  prefs: []
  type: TYPE_NORMAL
- en: Client Authentication Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Amplify, there are two main ways to implement authentication on the client
    now that the service is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Auth` class'
  prefs: []
  type: TYPE_NORMAL
- en: The Amplify client library exposes an `Auth` class with over 30 different methods
    that allow you to handle everything associated with user management. Some examples
    of the methods available are `Auth.signUp`, `Auth.signIn`, and `Auth.signOut`.
  prefs: []
  type: TYPE_NORMAL
- en: Using this class, you can create a completely custom authentication flow based
    on your application’s requirements. To do so, you have to manage all of the styling
    and application state yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Framework-specific authentication components
  prefs: []
  type: TYPE_NORMAL
- en: The framework-specific libraries available in Amplify for frameworks like React,
    React Native, Vue, and Angular expose higher-level abstractions for managing authentication.
    These components will render an entire (customizable) authentication flow with
    only a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.xhtml#ch1), you had a chance to try out the higher-order
    component (HOC) from the AWS Amplify React library called `withAuthenticator`.
    Here, you’ll be using this HOC along with routing to create protected routes and
    a profile view that can only be viewed if the user is signed in.
  prefs: []
  type: TYPE_NORMAL
- en: Building the App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step will be to go ahead and create the folder and file structure for
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the File and Folder Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your app, create the following files in the *src* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'These files do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Container.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This file will hold a component you will be using to apply reusable styling
    to the other components.
  prefs: []
  type: TYPE_NORMAL
- en: '*Nav.js*'
  prefs: []
  type: TYPE_NORMAL
- en: In this component, you will create a navigation UI.
  prefs: []
  type: TYPE_NORMAL
- en: '*Profile.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This component will render profile information about the logged-in user. This
    will also be the component where we add the authentication component for signing
    up and signing in.
  prefs: []
  type: TYPE_NORMAL
- en: '*Protected.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This is the component we will be using as an example of how to create a protected
    route. If the user is signed in, they will be able to view this route. If they
    are not signed in, they will be redirected to the sign-in form.
  prefs: []
  type: TYPE_NORMAL
- en: '*Public.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This is a basic route that will be viewable whether or not the user is signed
    in.
  prefs: []
  type: TYPE_NORMAL
- en: '*Router.js*'
  prefs: []
  type: TYPE_NORMAL
- en: This file will hold the router and some logic to determine the current route
    name.
  prefs: []
  type: TYPE_NORMAL
- en: Now that these files have been created, you have everything you need to begin
    writing some code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the First Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, let’s create the most simple component we will be using for the app—the
    `Container` component. This component is what we will be using to wrap all of
    our other components so that we can apply some reusable styles between the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this component, you can now apply consistent styling across the entire
    app without having to rewrite your styles. You can then use it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Anything that is a child of the `Container` component will be rendered with
    the styling set in the `Container` component. Doing this allows you to have a
    single place that you can control the styles. In case you want to make styling
    changes later, you only need to adjust one component.
  prefs: []
  type: TYPE_NORMAL
- en: Public Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This component simply renders the name of the route to the UI and can be accessed
    whether or not the user is signed in. In this component, you will use the `Container`
    component to add some padding and margin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Nav Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Nav` (navigation) component will be utilizing the Ant Design library and
    React Router. Ant Design will provide the `Menu` and `Icon` components to make
    a nice looking menu, and React Router will provide the `Link` component so that
    we can link and navigate to different parts of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also notice that there is a `current` prop that is passed in to the
    component. This prop represents the name of the current route. For this application
    the value will either be `home`, `profile`, or `protected`. The `current` value
    is used in the `selectedKeys` array of the `Menu` component to highlight the current
    route in the navigation bar. This value will be calculated in the `Router` component
    and passed into this component as a prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Protected Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Protected` component will be the protected, or private, route. If the user
    trying to access this route is signed in, they will be able to view this route.
    If they are not signed in, they will be redirected to the profile page to sign
    up or sign in.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this component, you will be using the `useEffect` hook from React and the
    `Auth` class from AWS Amplify:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useEffect`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a React hook that allows you to perform side effects in function components.
    This hook accepts a function that is called when the function renders for the
    first time and, optionally, every additional time that it renders. By passing
    in an empty array as the second argument, we are choosing to only fire the function
    once: when the component loads. If you have used `componentDidMount` in a React
    class, `useEffect` has similar characteristics and use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Auth`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This AWS Amplify class handles user identity management. You can use this class
    to do everything from signing a user up and signing them in to resetting their
    password. In this component we will be calling a method, `Auth.currentAuthenticatedUser`,
    that will check if the user is currently signed in and, if so, return data about
    the signed-in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the component is rendered, we check to see if the user is signed in to
    the app by calling `Auth.currentAuthenticatedUser` in the `useEffect` hook. If
    this API call is not successful, that means the user is not signed in and we need
    to redirect them. We redirect them by calling `props.history.push('/profile')`.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is signed in, then we take no action and allow them to view the
    route.
  prefs: []
  type: TYPE_NORMAL
- en: Router Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Router` component will define the components and routes we want to have
    available in our application.
  prefs: []
  type: TYPE_NORMAL
- en: This component will also be setting the current route name that will be used
    in the `Nav` component to highlight the current route based on the `window.location.href`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The components that you will be using from React Router are `HashRouter`, `Switch`,
    and `Route`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HashRouter`'
  prefs: []
  type: TYPE_NORMAL
- en: This is a router that uses the hash portion of the URL (i.e., *window.location.hash*)
    to keep your UI in sync with the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`Switch`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Switch` renders the first child route that matches the location. This is different
    than the default functionality of just using the router, which may render multiple
    routes that match the location.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Route`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This component allows you to define the component that you’d like to render
    based on a path parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `useEffect` hook in this component, we set the route name by calling
    `setRoute`. We also set up an event listener to call `setRoute` whenever the route
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: When declaring a `Route` component, you can pass in the component you would
    like to render as the `component` prop.
  prefs: []
  type: TYPE_NORMAL
- en: Profile Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last component we need to finish our app is the `Profile` component. This
    component will do several things:'
  prefs: []
  type: TYPE_NORMAL
- en: Render the authentication form if the user is not signed in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a sign-out button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render the user’s profile information to the UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just like in [Chapter 1](ch01.xhtml#ch1), we are using the `withAuthenticator`
    HOC to render the authentication flow by wrapping the `Profile` component in the
    default export. This will show the sign-up/sign-in form if the user is not signed
    in, and if the user is signed in will show the UI with the user’s profile details.
  prefs: []
  type: TYPE_NORMAL
- en: To sign the user out, we use the `AmplifySignOut` UI component. This component
    will sign the user out and re-render the UI to show the authentication form.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the user profile data, we use the `Auth.currentAuthenticatedUser`
    method. If the user is signed in, this method will return the user profile data
    along with information about the session. The information that we are interested
    in using for the profile are the username and user attributes, which include the
    phone number, email, and any other information gathered when the user signed up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Styling the UI Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Under the hood, the Amplify UI components are implemented using Web Components.
    This means we can target them as a first-class HTML element for CSS styling. We
    want our UI components to match the blue colors in the rest of our app. To do
    so, we can add the following CSS property to the bottom of *index.css* to define
    the colors we’d like to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now the app is built. The last thing we need to do is update *index.js* to
    import the Router and add the Amplify configuration. We also want to import the
    necessary CSS for the Ant Design library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Testing the App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the app, we can now run the `start` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve built out an authentication flow with routing and protected
    routes!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `withAuthenticator` HOC to quickly get up and running with a preconfigured
    authentication flow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `Auth` class for more fine-grained control over authentication and to
    get data about the currently signed-in user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ant Design helps you get started with preconfigured design without having to
    write any style-specific code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
