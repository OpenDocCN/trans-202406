- en: Chapter 4\. Introduction to Authentication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。认证简介
- en: '*Authentication* and *identity* are integral parts of almost any application.
    Knowing who the user is, what permissions they have, whether or not they are signed
    in, and having a unique identifier for the user allow your application to render
    the correct views and return the proper data for the currently signed-in user.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*认证*和*身份*几乎是任何应用程序的重要组成部分。了解用户是谁、他们拥有哪些权限、是否已登录以及为当前已登录用户渲染正确视图和返回正确数据提供唯一标识符，这使得您的应用程序能够处理这些信息。'
- en: Most applications require mechanisms to handle user sign-up, user sign-in, password
    encryption, and updating, as well as countless other tasks around identity management.
    Modern applications often call for things like open authentication (OAUTH), multifactor
    authentication (MFA), and time-based on time passwords (TOTP).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序需要机制来处理用户注册、用户登录、密码加密和更新，以及围绕身份管理的无数其他任务。现代应用程序通常需要像开放认证（OAUTH）、多因素认证（MFA）和基于时间的一次性密码（TOTP）等功能。
- en: In the past, developers had to hand roll all of this authentication functionality
    from scratch. This task alone could take a team of developers weeks, or even months,
    to get right and to do so securely. Today there are fully managed authentication
    services like Auth0, Okta, and Amazon Cognito that handle all of this for us.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，开发人员必须从头开始手动编写所有这些认证功能。单单完成这项任务可能需要一个开发团队数周，甚至数月的时间，并且必须确保安全性。今天有完全托管的认证服务，如Auth0、Okta和Amazon
    Cognito，它们为我们处理了所有这些工作。
- en: In this chapter, you will learn how to properly and securely implement authentication
    in a React application using Amazon Cognito with AWS Amplify.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在React应用程序中使用Amazon Cognito和AWS Amplify正确且安全地实现认证。
- en: The app that you will be building is a basic application that requires authentication
    in order to be viewed and also has a profile page showing profile information
    about the signed-in user. If the user is signed in, they can navigate between
    a *public route*, a *profile route* with an authentication form, and a *protected
    route* viewable only to signed-in users.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要构建的应用程序是一个基本应用程序，需要认证才能查看，并且还有一个显示登录用户个人资料信息的个人资料页面。如果用户已登录，则可以在*公共路由*、带有认证表单的*个人资料路由*以及仅对已登录用户可见的*受保护路由*之间导航。
- en: If they are not signed in, they can only view the public route and authentication
    form on the profile route. If the user tries to access a protected route when
    they are not signed in, we want to redirect them to the authentication form so
    that they can sign in and then access the route once authenticated.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未登录，则只能查看个人资料路由上的公共路由和认证表单。如果用户尝试在未登录时访问受保护路由，则我们希望将其重定向到认证表单，以便他们可以登录，然后在认证后访问路由。
- en: This app will also persist *user state*, so if they refresh the app or navigate
    away from it and come back, they will stay signed in.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序还将持续保留*用户状态*，因此如果他们刷新应用程序或离开并回到应用程序，他们将保持登录状态。
- en: Introduction to Amazon Cognito
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Amazon Cognito
- en: Amazon Cognito is a fully managed *identity service* from AWS. Cognito allows
    for simple and secure user sign-up, sign-in, *access control*, and *user identity
    management*. Cognito scales to millions of users and also supports sign-in with
    social identity providers, such as Facebook, Google, and Amazon. It is also free
    for the first 50,000 users of any app.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Cognito是AWS提供的一个完全托管的*身份服务*。Cognito支持简单和安全的用户注册、登录、*访问控制*和*用户身份管理*。Cognito可以扩展到数百万用户，并支持使用社交身份提供者（如Facebook、Google和Amazon）进行登录。对于任何应用程序的前50000个用户，它还是免费的。
- en: How Amazon Cognito Works
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon Cognito的工作原理
- en: 'Cognito has two main pieces: *user pools* and *identity pools*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cognito主要由*用户池*和*身份池*两个组成部分：
- en: User pools
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用户池
- en: These provide a secure user directory that stores all your users and scales
    to hundreds of millions of users. It is a fully managed service. As a serverless
    technology, user pools are easy to set up without having to worry about standing
    up any infrastructure. User pools are what manage all of the users that sign up
    and sign in to the account, and are what we will be focusing on in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些提供了一个安全的用户目录，存储所有用户，并能够扩展到数亿用户。它是一个完全托管的服务。作为无服务器技术，用户池易于设置，无需担心搭建任何基础设施。用户池负责管理所有注册并登录账户的用户，这也是我们本章将重点关注的内容。
- en: Identity pools
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 身份池
- en: These allow you to authorize users that are signed in to your application to
    access various other AWS services. Say you wanted to allow a user to have access
    to a Lambda function so that they could fetch data from another API; you could
    specify that while creating an identity pool. Where user pools come in is that
    the source of these identities could be a Cognito user pool or even Facebook or
    Google.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些允许您授权已登录到应用程序的用户访问各种其他AWS服务。假设您希望允许用户访问Lambda函数以从另一个API获取数据；在创建身份池时，您可以指定这一点。用户池的作用在于，这些身份的来源可以是Cognito用户池，甚至是Facebook或Google。
- en: 'Cognito user pools allow your application to invoke various methods against
    the service to manage all aspects of user identity, including such items as:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Cognito用户池允许您的应用程序调用各种方法来管理用户身份的所有方面，包括以下项目：
- en: Signing up a user
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册用户
- en: Signing in a user
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录用户
- en: Signing out a user
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登出用户
- en: Changing a user’s password
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改用户密码
- en: Resetting a user’s password
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置用户密码
- en: Confirming an MFA code
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认MFA验证码
- en: Amazon Cognito Integration with AWS Amplify
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon Cognito与AWS Amplify集成
- en: AWS Amplify has support for Amazon Cognito in various ways. First of all, you
    can create and configure Amazon Cognito services directly from the Amplify CLI.
    Once you’ve created the authentication service via the CLI you can then call various
    methods (like `signUp`, `signIn`, and `signOut`) from your JavaScript application
    using the Amplify JavaScript client library.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Amplify以多种方式支持Amazon Cognito。首先，您可以直接从Amplify CLI创建和配置Amazon Cognito服务。一旦通过CLI创建了认证服务，您可以使用Amplify
    JavaScript客户端库从JavaScript应用程序中调用各种方法（如`signUp`、`signIn`和`signOut`）。
- en: Amplify also has preconfigured UI components that allow you to scaffold out
    entire authentication flows in just a couple of lines of code for frameworks like
    React, React Native, Vue, and Angular.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify还具有预配置的UI组件，可以让您仅需几行代码即可快速创建整个认证流程，适用于React、React Native、Vue和Angular等框架。
- en: In this chapter, you’ll be using a combination of the Amplify CLI, Amplify JavaScript
    client, and Amplify React UI components to build an application that demonstrates
    *routing*, *authentication*, and *protected routes*. You’ll also use React Router
    for routing and Ant Design to give the application some basic styling (see [Figure 4-1](#fig4a)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用Amplify CLI、Amplify JavaScript客户端和Amplify React UI组件的组合来构建一个演示*路由*、*认证*和*受保护路由*的应用程序。您还将使用React
    Router进行路由，并使用Ant Design为应用程序添加基本样式（参见[图4-1](#fig4a)）。
- en: '![React with Routing and Authentication](Images/fssl_0401.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![带有路由和认证的React](Images/fssl_0401.png)'
- en: Figure 4-1\. React with routing and authentication
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-1\. 带有路由和认证的React
- en: Creating the React App and Adding Amplify
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建React应用程序并添加Amplify
- en: The first thing you’ll do to get started is create the React application, install
    the necessary dependencies, and create the Amplify project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您要做的第一件事是创建React应用程序，安装必要的依赖项，并创建Amplify项目。
- en: 'To begin, open your terminal and create a new React application:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请打开终端并创建一个新的React应用程序：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then install the AWS Amplify, AWS Amplify React, React Router, and Ant Design
    libraries:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后安装AWS Amplify、AWS Amplify React、React Router和Ant Design库：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Initialize a new Amplify project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个新的Amplify项目：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the Amplify project now initialized, we can create the authentication
    service. To do so, run the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化了Amplify项目后，我们可以创建认证服务。要做到这一点，请运行以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now the authentication service has been configured and you can deploy it using
    the `amplify push` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在认证服务已配置完成，您可以使用`amplify push`命令部署它：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The authentication service has been deployed, so let’s start testing it out.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 认证服务已部署，现在让我们开始测试它。
- en: Client Authentication Overview
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端身份验证概述
- en: 'Using Amplify, there are two main ways to implement authentication on the client
    now that the service is up and running:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Amplify，在客户端实现身份验证的两种主要方式如下：
- en: '`Auth` class'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth`类'
- en: The Amplify client library exposes an `Auth` class with over 30 different methods
    that allow you to handle everything associated with user management. Some examples
    of the methods available are `Auth.signUp`, `Auth.signIn`, and `Auth.signOut`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify客户端库公开了一个`Auth`类，拥有超过30种不同的方法，允许您处理与用户管理相关的所有事务。一些可用方法的示例包括`Auth.signUp`、`Auth.signIn`和`Auth.signOut`。
- en: Using this class, you can create a completely custom authentication flow based
    on your application’s requirements. To do so, you have to manage all of the styling
    and application state yourself.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此类，您可以根据应用程序的需求创建完全自定义的身份验证流程。为此，您必须自行管理所有的样式和应用程序状态。
- en: Framework-specific authentication components
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于框架的身份验证组件
- en: The framework-specific libraries available in Amplify for frameworks like React,
    React Native, Vue, and Angular expose higher-level abstractions for managing authentication.
    These components will render an entire (customizable) authentication flow with
    only a few lines of code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify中特定于框架的库为React、React Native、Vue和Angular暴露了用于管理身份验证的更高级抽象。这些组件将使用几行代码呈现整个（可定制的）身份验证流程。
- en: In [Chapter 1](ch01.xhtml#ch1), you had a chance to try out the higher-order
    component (HOC) from the AWS Amplify React library called `withAuthenticator`.
    Here, you’ll be using this HOC along with routing to create protected routes and
    a profile view that can only be viewed if the user is signed in.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.xhtml#ch1)中，您有机会尝试AWS Amplify React库中名为`withAuthenticator`的高阶组件（HOC）。在这里，您将使用此HOC以及路由来创建受保护的路由和仅在用户登录后才能查看的个人资料视图。
- en: Building the App
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: The next step will be to go ahead and create the folder and file structure for
    the app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是继续为应用程序创建文件和文件夹结构。
- en: Creating the File and Folder Structure
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件和文件夹结构
- en: 'In your app, create the following files in the *src* directory:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中，在*src*目录中创建以下文件：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'These files do the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件执行以下操作：
- en: '*Container.js*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*Container.js*'
- en: This file will hold a component you will be using to apply reusable styling
    to the other components.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将包含一个组件，您将使用它来为其他组件应用可重用的样式。
- en: '*Nav.js*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*Nav.js*'
- en: In this component, you will create a navigation UI.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，您将创建一个导航界面。
- en: '*Profile.js*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*Profile.js*'
- en: This component will render profile information about the logged-in user. This
    will also be the component where we add the authentication component for signing
    up and signing in.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将呈现已登录用户的个人资料信息。这也是您将添加用于注册和登录的身份验证组件的组件。
- en: '*Protected.js*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*Protected.js*'
- en: This is the component we will be using as an example of how to create a protected
    route. If the user is signed in, they will be able to view this route. If they
    are not signed in, they will be redirected to the sign-in form.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将用作创建受保护路由示例的组件。如果用户已登录，则他们将能够查看此路由。如果他们未登录，则将被重定向到登录表单。
- en: '*Public.js*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*Public.js*'
- en: This is a basic route that will be viewable whether or not the user is signed
    in.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本路由，无论用户是否已登录，都可以查看。
- en: '*Router.js*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*Router.js*'
- en: This file will hold the router and some logic to determine the current route
    name.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将包含路由器和一些逻辑以确定当前路由名称。
- en: Now that these files have been created, you have everything you need to begin
    writing some code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些文件已经创建好，您已经可以开始编写一些代码了。
- en: Creating the First Component
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建第一个组件
- en: 'To start, let’s create the most simple component we will be using for the app—the
    `Container` component. This component is what we will be using to wrap all of
    our other components so that we can apply some reusable styles between the components:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建用于应用程序的最简单的组件——`Container`组件。此组件将用于包装所有其他组件，以便我们可以在组件之间应用一些可重用的样式：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using this component, you can now apply consistent styling across the entire
    app without having to rewrite your styles. You can then use it like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此组件，您现在可以在整个应用程序中应用一致的样式，而无需重写样式。然后可以像这样使用它：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Anything that is a child of the `Container` component will be rendered with
    the styling set in the `Container` component. Doing this allows you to have a
    single place that you can control the styles. In case you want to make styling
    changes later, you only need to adjust one component.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 任何作为`Container`组件的子组件的内容都将使用`Container`组件中设置的样式进行渲染。这样做可以让您在一个地方控制样式。如果以后想要进行样式更改，只需调整一个组件即可。
- en: Public Component
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共组件
- en: 'This component simply renders the name of the route to the UI and can be accessed
    whether or not the user is signed in. In this component, you will use the `Container`
    component to add some padding and margin:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件简单地将路由名称渲染到UI中，并且无论用户是否已登录，都可以访问。在此组件中，您将使用`Container`组件添加一些填充和边距：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Nav Component
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航组件
- en: The `Nav` (navigation) component will be utilizing the Ant Design library and
    React Router. Ant Design will provide the `Menu` and `Icon` components to make
    a nice looking menu, and React Router will provide the `Link` component so that
    we can link and navigate to different parts of the app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nav`（导航）组件将利用Ant Design库和React Router。Ant Design将提供`Menu`和`Icon`组件以创建一个漂亮的菜单，而React
    Router将提供`Link`组件，以便我们可以链接并导航到应用程序的不同部分。'
- en: 'You’ll also notice that there is a `current` prop that is passed in to the
    component. This prop represents the name of the current route. For this application
    the value will either be `home`, `profile`, or `protected`. The `current` value
    is used in the `selectedKeys` array of the `Menu` component to highlight the current
    route in the navigation bar. This value will be calculated in the `Router` component
    and passed into this component as a prop:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到有一个传递给组件的`current`属性。该属性表示当前路由的名称。对于这个应用程序，该值将是`home`、`profile`或`protected`中的一个。`current`值将在`Router`组件中计算并作为属性传递给这个组件的`Menu`组件的`selectedKeys`数组中，用于突出显示导航栏中的当前路由。
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Protected Component
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Protected组件
- en: The `Protected` component will be the protected, or private, route. If the user
    trying to access this route is signed in, they will be able to view this route.
    If they are not signed in, they will be redirected to the profile page to sign
    up or sign in.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Protected`组件将是受保护或私有的路由。如果尝试访问此路由的用户已登录，则他们将能够查看此路由。如果他们未登录，则将重定向到配置文件页面以注册或登录。'
- en: 'In this component, you will be using the `useEffect` hook from React and the
    `Auth` class from AWS Amplify:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，你将会使用来自 React 的`useEffect`钩子和来自 AWS Amplify 的`Auth`类：
- en: '`useEffect`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`useEffect`'
- en: 'This is a React hook that allows you to perform side effects in function components.
    This hook accepts a function that is called when the function renders for the
    first time and, optionally, every additional time that it renders. By passing
    in an empty array as the second argument, we are choosing to only fire the function
    once: when the component loads. If you have used `componentDidMount` in a React
    class, `useEffect` has similar characteristics and use cases.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个React钩子，允许你在函数组件中执行副作用。该钩子接受一个函数，在函数第一次渲染时调用，可选择在每次额外渲染时再次调用。通过将空数组作为第二个参数传入，我们选择仅在组件加载时触发该函数。如果你曾在React类中使用过`componentDidMount`，`useEffect`具有类似的特性和用法。
- en: '`Auth`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth`'
- en: 'This AWS Amplify class handles user identity management. You can use this class
    to do everything from signing a user up and signing them in to resetting their
    password. In this component we will be calling a method, `Auth.currentAuthenticatedUser`,
    that will check if the user is currently signed in and, if so, return data about
    the signed-in user:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个AWS Amplify类处理用户身份管理。你可以使用这个类来完成从用户注册和登录到重置密码等所有操作。在这个组件中，我们将调用一个方法，`Auth.currentAuthenticatedUser`，来检查用户当前是否已登录，如果是，则返回有关已登录用户的数据。
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When the component is rendered, we check to see if the user is signed in to
    the app by calling `Auth.currentAuthenticatedUser` in the `useEffect` hook. If
    this API call is not successful, that means the user is not signed in and we need
    to redirect them. We redirect them by calling `props.history.push('/profile')`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件渲染时，我们通过在`useEffect`钩子中调用`Auth.currentAuthenticatedUser`来检查用户是否已登录应用程序。如果此API调用不成功，则意味着用户未登录，我们需要重定向他们。我们通过调用`props.history.push('/profile')`来重定向他们。
- en: If the user is signed in, then we take no action and allow them to view the
    route.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已登录，则我们不采取任何操作，并允许他们查看路由。
- en: Router Component
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Router组件
- en: The `Router` component will define the components and routes we want to have
    available in our application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router`组件将定义我们在应用程序中希望使用的组件和路由。'
- en: This component will also be setting the current route name that will be used
    in the `Nav` component to highlight the current route based on the `window.location.href`
    property.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件还将设置当前路由名称，该名称将根据`window.location.href`属性在`Nav`组件中使用，以突出显示当前路由。
- en: 'The components that you will be using from React Router are `HashRouter`, `Switch`,
    and `Route`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从React Router中使用的组件是`HashRouter`、`Switch`和`Route`：
- en: '`HashRouter`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`HashRouter`'
- en: This is a router that uses the hash portion of the URL (i.e., *window.location.hash*)
    to keep your UI in sync with the URL.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个路由器，它使用URL的哈希部分（即*window.location.hash*）来保持UI与URL的同步。
- en: '`Switch`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Switch`'
- en: '`Switch` renders the first child route that matches the location. This is different
    than the default functionality of just using the router, which may render multiple
    routes that match the location.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`Switch`渲染与位置匹配的第一个子路由。这与仅使用路由器的默认功能不同，后者可能会渲染与位置匹配的多个路由。'
- en: '`Route`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Route`'
- en: 'This component allows you to define the component that you’d like to render
    based on a path parameter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件允许您根据路径参数定义要渲染的组件：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Inside the `useEffect` hook in this component, we set the route name by calling
    `setRoute`. We also set up an event listener to call `setRoute` whenever the route
    changes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件的`useEffect`钩子内部，我们通过调用`setRoute`来设置路由名称。我们还设置了一个事件侦听器，以便在路由更改时调用`setRoute`。
- en: When declaring a `Route` component, you can pass in the component you would
    like to render as the `component` prop.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明`Route`组件时，您可以将要渲染的组件作为`component`属性传递。
- en: Profile Component
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件组件
- en: 'The last component we need to finish our app is the `Profile` component. This
    component will do several things:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完成应用程序的最后一个组件是`Profile`组件。此组件将执行以下几项任务：
- en: Render the authentication form if the user is not signed in.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户未登录，则呈现身份验证表单。
- en: Provide a sign-out button.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供注销按钮。
- en: Render the user’s profile information to the UI.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户的配置文件信息呈现到用户界面。
- en: Just like in [Chapter 1](ch01.xhtml#ch1), we are using the `withAuthenticator`
    HOC to render the authentication flow by wrapping the `Profile` component in the
    default export. This will show the sign-up/sign-in form if the user is not signed
    in, and if the user is signed in will show the UI with the user’s profile details.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第1章](ch01.xhtml#ch1)中一样，我们使用`withAuthenticator`高阶组件来通过包装默认导出的`Profile`组件来呈现认证流程。如果用户未登录，此流程将显示注册/登录表单；如果用户已登录，将显示带有用户配置文件详细信息的UI。
- en: To sign the user out, we use the `AmplifySignOut` UI component. This component
    will sign the user out and re-render the UI to show the authentication form.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要注销用户，我们使用`AmplifySignOut` UI组件。此组件将注销用户并重新呈现UI以显示身份验证表单。
- en: 'To display the user profile data, we use the `Auth.currentAuthenticatedUser`
    method. If the user is signed in, this method will return the user profile data
    along with information about the session. The information that we are interested
    in using for the profile are the username and user attributes, which include the
    phone number, email, and any other information gathered when the user signed up:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示用户配置文件数据，我们使用`Auth.currentAuthenticatedUser`方法。如果用户已登录，此方法将返回用户配置文件数据以及有关会话的信息。我们感兴趣的配置文件信息包括用户名和用户属性，例如电话号码、电子邮件以及用户注册时收集的其他信息：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Styling the UI Components
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化UI组件
- en: 'Under the hood, the Amplify UI components are implemented using Web Components.
    This means we can target them as a first-class HTML element for CSS styling. We
    want our UI components to match the blue colors in the rest of our app. To do
    so, we can add the following CSS property to the bottom of *index.css* to define
    the colors we’d like to use:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Amplify UI组件是使用Web组件实现的。这意味着我们可以将它们作为一流的HTML元素进行CSS样式设置。我们希望我们的UI组件与应用程序中其余部分的蓝色匹配。为此，我们可以将以下CSS属性添加到*index.css*底部来定义我们想要使用的颜色：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Configuring the App
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置应用程序
- en: 'Now the app is built. The last thing we need to do is update *index.js* to
    import the Router and add the Amplify configuration. We also want to import the
    necessary CSS for the Ant Design library:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已构建完成。我们唯一需要做的是更新*index.js*来导入路由器并添加Amplify配置。我们还要导入Ant Design库的必要CSS：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Testing the App
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试应用程序
- en: 'To test the app, we can now run the `start` command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，我们现在可以运行`start`命令：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Congratulations, you’ve built out an authentication flow with routing and protected
    routes!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您已经使用路由和受保护路由构建了认证流程！
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章中需要记住的一些事项如下：
- en: Use the `withAuthenticator` HOC to quickly get up and running with a preconfigured
    authentication flow.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`withAuthenticator`高阶组件快速启动和运行预配置的认证流程。
- en: Use the `Auth` class for more fine-grained control over authentication and to
    get data about the currently signed-in user.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Auth`类更精细地控制身份验证并获取有关当前已登录用户的数据。
- en: Ant Design helps you get started with preconfigured design without having to
    write any style-specific code.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ant Design帮助您使用预配置的设计快速启动，而无需编写任何特定于样式的代码。
