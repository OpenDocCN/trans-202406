["```\n$serviceAccountName.$namespace.serviceaccount.identity.linkerd.$clusterDomain\n```", "```\n# Start by creating the cluster\n$ k3d cluster create luar\n\n# Add the jetstack Helm repo if you don't already have it\n$ helm repo add jetstack https://charts.jetstack.io\n\n# Make sure your Helm repositories are up-to-date\n$ helm repo update\n\n# Install cert-manager\n$ helm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.12.0 \\\n  --set installCRDs=true\n\n# Check out your cert-manager Pods\n$ kubectl get pods -n cert-manager\n```", "```\n# Start by generating a trust anchor for the cluster.\n$ step certificate create root.linkerd.cluster.local ca.crt ca.key \\\n  --profile root-ca --no-password --insecure --not-after=87600h\n\n# Create the linkerd namespace so that we have a place to install\n# the trust anchor Secret.\n$ kubectl create ns linkerd\n\n# Save the trust anchor as a Secret in the linkerd namespace.\n#\n# During your real-world installs, you'd instead use an external\n# cert-manager-compatible Secret store (like Vault) to store the\n# trust anchor.\n$ kubectl create secret tls linkerd-trust-anchor \\\n  --cert=ca.crt \\\n  --key=ca.key \\\n  --namespace=linkerd\n\n# Create a cert-manager Issuer that uses the trust anchor Secret\n# to issue certificates. This Issuer must be in the same namespace\n# as the trust anchor Secret.\n#\n# During your real-world installs, you'd instead change this\n# Issuer to connect to your external Secret store.\n$ kubectl apply -f - <<EOF\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n name: linkerd-trust-anchor\n namespace: linkerd\nspec:\n ca:\n secretName: linkerd-trust-anchor\nEOF\n\n```", "```\n# With the Issuer created, we will now use a Certificate to instruct\n# cert-manager to create our identity issuer certificate. We will\n# also instruct it to automatically rotate that certificate every 48\n# hours. This Certificate must be in the same namespace as the Secret\n# it is writing, which (again) is the linkerd namespace.\n$ kubectl apply -f - <<EOF\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n name: linkerd-identity-issuer\n namespace: linkerd\nspec:\n secretName: linkerd-identity-issuer\n duration: 48h\n issuerRef:\n name: linkerd-trust-anchor\n kind: Issuer\n commonName: identity.linkerd.cluster.local\n dnsNames:\n - identity.linkerd.cluster.local\n isCA: true\n privateKey:\n algorithm: ECDSA\n usages:\n - cert sign\n - crl sign\n - server auth\n - client auth\nEOF\n```", "```\n# First, let's validate that the trust anchor Secret exists and\n# has some information in it.\n$ kubectl get secret linkerd-trust-anchor -n linkerd\n\n# Given that, we can use the step CLI to examine the public part\n# of the certificate itself. The way this works is that the public\n# part is stored, base-64 encoded, in the \"tls.crt\" key of the\n# Secret, so we extract that, decode it, and hand it to step.\n$ kubectl get secret linkerd-trust-anchor -n linkerd \\\n    -o jsonpath='{.data.tls\\.crt}' \\\n    | base64 -d \\\n    | step certificate inspect -\n\n# Next, let's check to see if cert-manager was able to create\n# our issuer certificate. We should see a Certificate named\n# linkerd-identity-issuer with a \"ready\" status of True.\n$ kubectl get certificate -n linkerd\n\n# Following that, we'll check in on the identity issuer Secret.\n# This is just like what we did for the trust anchor, with a\n# different name for the Secret.\n$ kubectl get secret linkerd-identity-issuer -n linkerd \\\n    -o jsonpath='{.data.tls\\.crt}' \\\n    | base64 -d \\\n    | step certificate inspect -\n```", "```\n# Configure our Linkerd Helm repo.\n$ helm repo add linkerd https://helm.linkerd.io/stable\n\n# Update our repos.\n$ helm repo update\n\n# Install the Linkerd CRDs.\n$ helm install linkerd-crds -n linkerd --version 1.6.1 linkerd/linkerd-crds\n\n# Install Linkerd's control plane.\n#\n# Unlike in earlier chapters, this install will not have us specifying\n# the issuer certificate. Instead, we instruct Linkerd to use the\n# existing certificate by setting the identity.issuer.scheme to\n# kubernetes.io/tls.\n$ helm install linkerd-control-plane -n linkerd \\\n  --set-file identityTrustAnchorsPEM=ca.crt \\\n  --set identity.issuer.scheme=kubernetes.io/tls \\\n  --version 1.12.4 \\\n  linkerd/linkerd-control-plane\n\n# Validate the Linkerd install.\n$ linkerd check\n\n# You'll see warnings letting you know your Linkerd issuer certificate isn't\n# valid for more than 60 days. That's to be expected, as you are now actively\n# rotating the issuer certificate with cert-manager.\n```"]