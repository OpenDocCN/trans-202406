["```\nAPI_URI=http://localhost:4000/api\n```", "```\n// import Apollo Client libraries\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n```", "```\n// configure our API URI & cache\nconst uri = process.env.API_URI;\nconst cache = new InMemoryCache();\n\n// configure Apollo Client\nconst client = new ApolloClient({\n  uri,\n  cache,\n  connectToDevTools: true\n});\n```", "```\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <GlobalStyle />\n      <Pages />\n    </ApolloProvider>\n  );\n};\n```", "```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import Apollo Client libraries\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\n// global styles\nimport GlobalStyle from '/components/GlobalStyle';\n// import our routes\nimport Pages from '/pages';\n\n// configure our API URI & cache\nconst uri = process.env.API_URI;\nconst cache = new InMemoryCache();\n\n// configure Apollo Client\nconst client = new ApolloClient({\n  uri,\n  cache,\n  connectToDevTools: true\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <GlobalStyle />\n    <Pages />\n  </ApolloProvider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```", "```\n{\n  cursor\n  hasNextPage\n  notes {\n    id\n    createdAt\n    content\n    favoriteCount\n    author {\n      id\n      username\n      avatar\n      }\n    }\n  }\n```", "```\nquery noteFeed($cursor: String) {\n    noteFeed(cursor: $cursor) {\n      cursor\n      hasNextPage\n      notes {\n        id\n        createdAt\n        content\n        favoriteCount\n        author {\n          username\n          id\n          avatar\n        }\n      }\n    }\n  }\n```", "```\n{\n  \"cursor\": \"\"\n}\n```", "```\n// import the required libraries\nimport { useQuery, gql } from '@apollo/client';\n\n// our GraphQL query, stored as a variable\nconst GET_NOTES = gql`\n query NoteFeed($cursor: String) {\n noteFeed(cursor: $cursor) {\n cursor\n hasNextPage\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n```", "```\nconst Home = () => {\n  // query hook\n  const { data, loading, error, fetchMore } = useQuery(GET_NOTES);\n\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n\n  // if the data is successful, display the data in our UI\n  return (\n    <div>\n      {console.log(data)}\n      The data loaded!\n    </div>\n  );\n};\n\nexport default Home;\n```", "```\nconst Home = () => {\n  // query hook\n  const { data, loading, error, fetchMore } = useQuery(GET_NOTES);\n\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n\n  // if the data is successful, display the data in our UI\n  return (\n    <div>\n      {data.noteFeed.notes.map(note => (\n        <div key={note.id}>{note.author.username}</div>\n      ))}\n    </div>\n  );\n};\n```", "```\nimport ReactMarkdown from 'react-markdown';\n```", "```\n// if the data is successful, display the data in our UI\nreturn (\n  <div>\n    {data.noteFeed.notes.map(note => (\n      <article key={note.id}>\n      <img\n          src={note.author.avatar}\n          alt={`${note.author.username} avatar`}\n          height=\"50px\"\n        />{' '}\n        {note.author.username} {note.createdAt} {note.favoriteCount}{' '}\n        <ReactMarkdown source={note.content} />\n      </article>\n    ))}\n  </div>\n);\n```", "```\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nconst Note = ({ note }) => {\n  return (\n    <article>\n      <img\n        src={note.author.avatar}\n        alt=\"{note.author.username} avatar\"\n        height=\"50px\"\n      />{' '}\n      {note.author.username} {note.createdAt} {note.favoriteCount}{' '}\n      <ReactMarkdown source={note.content} />\n    </article>\n  );\n};\n\nexport default Note;\n```", "```\nimport React from 'react';\nimport Note from './Note';\n\nconst NoteFeed = ({ notes }) => {\n  return (\n    <div>\n      {notes.map(note => (\n        <div key={note.id}>\n          <Note note={note} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default NoteFeed;\n```", "```\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nimport Button from '../components/Button';\nimport NoteFeed from '../components/NoteFeed';\n\nconst GET_NOTES = gql`\n query NoteFeed($cursor: String) {\n noteFeed(cursor: $cursor) {\n cursor\n hasNextPage\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n\nconst Home = () => {\n  // query hook\n const { data, loading, error, fetchMore } = useQuery(GET_NOTES);\n\n // if the data is loading, display a loading message\n if (loading) return <p>Loading...</p>;\n // if there is an error fetching the data, display an error message\n if (error) return <p>Error!</p>;\n\n // if the data is successful, display the data in our UI\n  return <NoteFeed notes={data.noteFeed.notes} />;\n};\n\nexport default Home;\n```", "```\n// import the format utility from `date-fns`\nimport { format } from 'date-fns';\n\n// update the date markup to format it as Month, Day, and Year\n{format(note.createdAt, 'MMM Do YYYY')} Favorites:{' '}\n```", "```\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { format } from 'date-fns';\nimport styled from 'styled-components';\n\n// Keep notes from extending wider than 800px\nconst StyledNote = styled.article`\n max-width: 800px;\n margin: 0 auto;\n`;\n\n// Style the note metadata\nconst MetaData = styled.div`\n @media (min-width: 500px) {\n display: flex;\n align-items: top;\n }\n`;\n\n// add some space between the avatar and meta info\nconst MetaInfo = styled.div`\n padding-right: 1em;\n`;\n\n// align 'UserActions' to the right on large screens\nconst UserActions = styled.div`\n margin-left: auto;\n`;\n\nconst Note = ({ note }) => {\n  return (\n    <StyledNote>\n      <MetaData>\n        <MetaInfo>\n          <img\n            src={note.author.avatar}\n            alt=\"{note.author.username} avatar\"\n            height=\"50px\"\n          />\n        </MetaInfo>\n        <MetaInfo>\n          <em>by</em> {note.author.username} <br />\n          {format(note.createdAt, 'MMM Do YYYY')}\n        </MetaInfo>\n        <UserActions>\n          <em>Favorites:</em> {note.favoriteCount}\n        </UserActions>\n      </MetaData>\n      <ReactMarkdown source={note.content} />\n    </StyledNote>\n  );\n};\n\nexport default Note;\n```", "```\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst NoteWrapper = styled.div`\n max-width: 800px;\n margin: 0 auto;\n margin-bottom: 2em;\n padding-bottom: 2em;\n border-bottom: 1px solid #f5f4f0;\n`;\n\nimport Note from './Note';\n\nconst NoteFeed = ({ notes }) => {\n  return (\n    <div>\n      {notes.map(note => (\n        <NoteWrapper key={note.id}>\n          <Note note={note} />\n        </NoteWrapper>\n      ))}\n    </div>\n  );\n};\n\nexport default NoteFeed;\n```", "```\nimport React from 'react';\n\nconst NotePage = props => {\n  return (\n    <div>\n      <p>ID: {props.match.params.id}</p>\n    </div>\n  );\n};\n\nexport default NotePage;\n```", "```\n// import React and routing dependencies\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n// import shared layout component\nimport Layout from '../components/Layout';\n\n// import routes\nimport Home from './home';\nimport MyNotes from './mynotes';\nimport Favorites from './favorites';\nimport NotePage from './note';\n\n// define routes\nconst Pages = () => {\n  return (\n    <Router>\n      <Layout>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/mynotes\" component={MyNotes} />\n        <Route path=\"/favorites\" component={Favorites} />\n        <Route path=\"/note/:id\" component={NotePage} />\n      </Layout>\n    </Router>\n  );\n};\n\nexport default Pages;\n```", "```\nimport React from 'react';\n// import GraphQL dependencies\nimport { useQuery, gql } from '@apollo/client';\n\n// import the Note component\nimport Note from '../components/Note';\n\n// the note query, which accepts an ID variable\nconst GET_NOTE = gql`\n query note($id: ID!) {\n note(id: $id) {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n`;\n\nconst NotePage = props => {\n  // store the id found in the url as a variable\n  const id = props.match.params.id;\n\n  // query hook, passing the id value as a variable\n  const { loading, error, data } = useQuery(GET_NOTE, { variables: { id } });\n\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error! Note not found</p>;\n\n  // if the data is successful, display the data in our UI\n  return <Note note={data.note} />;\n};\n\nexport default NotePage;\n```", "```\nimport { Link } from 'react-router-dom';\n```", "```\n<NoteWrapper key={note.id}>\n  <Note note={note} />\n  <Link to={`note/${note.id}`}>Permalink</Link>\n</NoteWrapper>\n```", "```\n// if the data is successful, display the data in our UI\nreturn (\n  // add a <React.Fragment> element to provide a parent element\n  <React.Fragment>\n    <NoteFeed notes={data.noteFeed.notes} />\n    {/* Only display the Load More button if hasNextPage is true */}\n    {data.noteFeed.hasNextPage && (\n      <Button>Load more</Button>\n    )}\n  </React.Fragment>\n);\n```", "```\n{data.noteFeed.hasNextPage && (\n  //  onClick peform a query, passing the current cursor as a variable\n  <Button\n    onClick={() =>\n      fetchMore({\n        variables: {\n          cursor: data.noteFeed.cursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          return {\n            noteFeed: {\n              cursor: fetchMoreResult.noteFeed.cursor,\n              hasNextPage: fetchMoreResult.noteFeed.hasNextPage,\n              // combine the new results and the old\n              notes: [\n                ...previousResult.noteFeed.notes,\n                ...fetchMoreResult.noteFeed.notes\n              ],\n              __typename: 'noteFeed'\n            }\n          };\n        }\n      })\n    }\n  >\n    Load more\n  </Button>\n)}\n```"]