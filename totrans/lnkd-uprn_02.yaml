- en: Chapter 2\. Intro to Linkerd
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 介绍Linkerd
- en: 'The year 2015 was a very good one for cloud native computing: it brought us
    the first Kubernetes release, the creation of the Cloud Native Computing Foundation
    (CNCF), and the creation of Linkerd. Linkerd was one of the first five projects
    donated to the CNCF, and it was the project that coined the term “service mesh.”'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年是云原生计算非常重要的一年：第一个Kubernetes版本发布、Cloud Native Computing Foundation（CNCF）的创建以及Linkerd的诞生。Linkerd是最早捐赠给CNCF的五个项目之一，也是首个提出“服务网格”概念的项目之一。
- en: In this chapter, you’ll learn more about Linkerd, where it comes from, what
    makes it special, and how it works. We’ll keep the history lesson short, useful,
    and interesting, but if you want to get right to the important information, feel
    free to skip ahead.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将更多地了解Linkerd的起源、其特点以及其工作原理。我们将简要、有用且有趣地介绍其历史，但如果您想直接获取重要信息，可以随时跳过。
- en: Where Does Linkerd Come From?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd的起源
- en: The Linkerd project was created in 2015 at Buoyant, Inc., by former Twitter
    engineers William Morgan and Oliver Gould. The first public release of Linkerd
    was in February 2016\. You can see a brief summary of its history in [Figure 2-1](#linkerd-timeline).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd项目由前Twitter工程师William Morgan和Oliver Gould于2015年在Buoyant, Inc.创建。Linkerd的第一个公开发布是在2016年2月。您可以在[图2-1](#linkerd-timeline)中看到其历史的简要总结。
- en: '![luar 0201](assets/luar_0201.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0201](assets/luar_0201.png)'
- en: Figure 2-1\. A brief timeline of Linkerd
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-1 Linkerd简要时间轴
- en: Linkerd1
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd1
- en: That first version of Linkerd, now called “Linkerd1,” was written mostly in
    Scala and was largely based on the Finagle RPC library created at Twitter. It
    was a multiplatform mesh that supported several different container schedulers
    and offered a number of powerful features. However, using Finagle required Linkerd1
    to run on the Java Virtual Machine (JVM), and ultimately the JVM’s performance
    was simply too high a cost to bear.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最初版本的Linkerd，现在称为“Linkerd1”，主要使用Scala编写，主要基于Twitter创建的Finagle RPC库。它是一个多平台网格，支持多种容器调度器，并提供了许多强大的功能。然而，使用Finagle需要Linkerd1在Java虚拟机（JVM）上运行，而最终JVM的性能成本太高。
- en: Linkerd1 is at its end of life. Going forward, when we talk about “Linkerd,”
    we’ll be referring to modern Linkerd—Linkerd2.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd1已经正式停止支持。今后，当我们谈论“Linkerd”时，我们将指的是现代Linkerd——Linkerd2。
- en: Linkerd2
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd2
- en: In 2018, the Linkerd project left the Scala world behind with a ground-up rewrite
    based on hard-won experience from Linkerd1 use in the real world. The project
    dropped support for other container orchestration engines and moved to exclusively
    supporting Kubernetes, with most of the code written in Go. Additionally, the
    developers chose to write a small, fast, purpose-built Rust proxy (creatively
    called `linkerd2-proxy`) to manage application communications, rather than adopting
    the Envoy proxy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年，Linkerd项目基于从Linkerd1在实际应用中积累的经验，进行了从头重写，告别了Scala世界。该项目放弃了对其他容器编排引擎的支持，全面转向支持Kubernetes，大部分代码采用Go语言编写。此外，开发者选择编写一个小巧、快速、专为目的设计的Rust代理（创意命名为`linkerd2-proxy`），用于管理应用程序通信，而不是采用Envoy代理。
- en: Linkerd and Rust
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd与Rust
- en: When the Linkerd2 rewrite started, the Rust programming language had been gaining
    attention for its memory safety, which enables developers to write code that avoids
    many of the memory management vulnerabilities inherent to C and C++, while still
    compiling to native code for high performance. The downside was that Rust’s networking
    support was sometimes lacking features needed by Linkerd2; in many cases, the
    Linkerd2 developers ended up adding these features to Rust crates like `hyper`
    and `tokio`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当Linkerd2重写开始时，Rust编程语言因其内存安全性而受到关注，这使开发者能够编写避免C和C++中许多内存管理漏洞的代码，同时编译成本地代码以实现高性能。不过，Rust在网络支持方面有时缺少Linkerd2所需的功能；在许多情况下，Linkerd2开发者不得不向Rust
    crate（如`hyper`和`tokio`）添加这些功能。
- en: 'The driver behind the decisions to focus on Kubernetes and to create a purpose-built
    proxy was *operational simplicity*: the idea that a project should be able to
    deliver functionality and performance while still being simple to learn and use.
    This concept has had a tremendous impact on the Linkerd project as a whole, and
    it continues to be a major focus of Linkerd’s development.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 决定专注于Kubernetes并创建一个专为目的设计的代理的驱动力是“操作简易性”：即一个项目应能够在保持简单易学易用的同时提供功能和性能。这一概念对整个Linkerd项目产生了巨大影响，并继续是Linkerd开发的主要关注点。
- en: The Linkerd Proxy
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd代理
- en: It’s worth repeating that `linkerd2-proxy` is *not* a general-purpose proxy;
    it was purpose-built for use in Linkerd. It’s extremely fast and lightweight,
    and as a user of Linkerd, you should almost never need to interact with it directly—it
    is very much meant to be invisible in normal use, and most Linkerd users never
    need to tune or debug `linkerd2-proxy`. (In fact, the maintainers of Linkerd like
    to joke that the only `linkerd2-proxy` experts on the planet are…the Linkerd maintainers.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 值得重申，`linkerd2-proxy` *并非*通用代理；它是专门为 Linkerd 设计的。它非常快速轻巧，并且作为 Linkerd 用户，您几乎永远不需要直接与其交互——在正常使用中它几乎是不可见的，大多数
    Linkerd 用户从不需要调整或调试`linkerd2-proxy`。（事实上，Linkerd 的维护人员喜欢开玩笑说，地球上唯一的`linkerd2-proxy`专家是...Linkerd
    的维护人员。）
- en: The Linkerd control plane, introduced in the next section, will be your main
    interface when working with Linkerd.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节介绍的 Linkerd 控制平面将成为您与 Linkerd 互动的主要接口。
- en: Linkerd Architecture
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd 架构
- en: Because Linkerd is written to be Kubernetes-native, all of its control surface
    is exposed in Kubernetes objects. You will manage, configure, and troubleshoot
    Linkerd via the Kubernetes API.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Linkerd 设计为符合 Kubernetes 本地化，其所有控制界面均通过 Kubernetes 对象公开。您将通过 Kubernetes API
    管理、配置和排查 Linkerd。
- en: 'Like other service meshes, Linkerd is broken into two main components: the
    *data plane*, which is the part of the mesh that handles application data directly
    (primarily composed of the proxies), and the *control plane*, which manages the
    data plane. This architecture is shown in [Figure 2-2](#linkerd-architecture).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他服务网格类似，Linkerd 被分为两个主要组件：*数据平面*，即直接处理应用程序数据的网格部分（主要由代理组成），和*控制平面*，负责管理数据平面。这种架构在
    [图 2-2](#linkerd-architecture) 中展示。
- en: Linkerd works by taking advantage of the Kubernetes concept of sidecars, which
    allows every application container to be paired with a dedicated proxy that handles
    all network traffic. The proxies—the data plane of the mesh—implement the advanced
    functionality of the mesh itself, mediating and measuring all the traffic passing
    through them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 利用 Kubernetes 侧车的概念工作，这允许每个应用程序容器都与一个专用代理配对，负责处理其所有网络流量。这些代理——网格的数据平面——实现了网格本身的高级功能，中介和测量所有通过它们的流量。
- en: '![luar 0202](assets/luar_0202.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0202](assets/luar_0202.png)'
- en: Figure 2-2\. Linkerd’s internal architecture
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. Linkerd 的内部架构
- en: Kubernetes Sidecar Containers
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 侧车容器
- en: Kubernetes didn’t have a formal sidecar container type until the adoption of
    [KEP-753](https://oreil.ly/ShohB) in Kubernetes 1.28\. The sidecar *concept* predates
    KEP-753 by many years, though.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 直到 Kubernetes 1.28 采纳 [KEP-753](https://oreil.ly/ShohB) 之前，Kubernetes 没有正式的侧车容器类型。尽管如此，侧车的*概念*已经存在多年了。
- en: Linkerd does support KEP-753 sidecar containers as of Linkerd `edge-23.11.4`,
    if you’re running Kubernetes 1.28 or later.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linkerd `edge-23.11.4` 版本起，Linkerd 确实支持 KEP-753 侧车容器，如果您运行的是 Kubernetes 1.28
    或更高版本。
- en: Linkerd also supports the concept of *extensions*, extra microservices that
    run as part of the control plane to implement optional functionality (either in
    the cluster or in the Linkerd CLI). Some extensions (such as the Viz and Multicluster
    extensions) are bundled with the official Linkerd build; though they must be installed
    into the cluster separately, you don’t need any extra tools to do so. Others (such
    as the SMI extension) must be obtained separately before you can install them;
    the documentation for the extension should tell you how to do this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 还支持*扩展*的概念，即作为控制平面的额外微服务，用于实现可选功能（无论是在集群中还是在 Linkerd CLI 中）。一些扩展（如 Viz
    和 Multicluster 扩展）已经与官方的 Linkerd 构建捆绑在一起；尽管它们必须单独安装到集群中，但您无需额外的工具即可执行此操作。其他一些扩展（如
    SMI 扩展）必须单独获取，然后才能安装；扩展的文档应告诉您如何执行此操作。
- en: mTLS and Certificates
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mTLS 和证书
- en: Linkerd relies heavily on Transport Layer Security (TLS), illustrated in [Figure 2-3](#tls-architecture-diagram-1),
    for networking security—nearly all of the communications shown in [Figure 2-2](#linkerd-architecture)
    are protected using TLS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 在网络安全方面高度依赖传输层安全性（TLS），如 [图 2-3](#tls-architecture-diagram-1) 所示，几乎所有在
    [图 2-2](#linkerd-architecture) 中展示的通信都受到TLS保护。
- en: '![luar 0203](assets/luar_0203.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0203](assets/luar_0203.png)'
- en: Figure 2-3\. TLS architecture
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-3\. TLS 架构
- en: TLS is the technology that’s underpinned data security and privacy on the Internet
    for the last quarter century by allowing secure communication over an insecure
    network, even if the parties communicating have never done so before. It is a
    *huge* topic, easily worth a book on its own. We’ll talk more about it in [Chapter 7](ch07.html#LUAR_mtls_and_certs),
    but at the architectural level, it’s important to understand that Linkerd uses
    TLS to encrypt communications within the cluster, and also as the foundation of
    identity within the mesh (specifically using *mutual TLS*, or *mTLS*).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: TLS技术在过去的四分之一世纪中支撑了互联网上的数据安全和隐私，通过允许在不安全网络上进行安全通信，即使通信双方以前从未这样做过。这是一个*巨大*的话题，值得单独一本书来讨论。我们将在[第7章](ch07.html#LUAR_mtls_and_certs)中更详细地讨论它，但在架构层面上，理解Linkerd使用TLS来加密集群内的通信，并作为网格内身份的基础（特别使用*双向TLS*或*mTLS*）非常重要。
- en: 'In TLS, encryption and identity both rely on *keypairs*. A keypair consists
    of a *public key* and a *private key*, where:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在TLS中，加密和身份验证都依赖于*密钥对*。密钥对由*公钥*和*私钥*组成，其中：
- en: The *private* key must be known only to the single entity that the keypair identifies.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*私钥*必须只有标识密钥对的单个实体知道。'
- en: The *public* key must be known to everyone who needs to communicate with that
    entity.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*公钥*必须为需要与该实体通信的所有人所知。'
- en: The keypair allows an entity (say, a workload in the Linkerd mesh) to use the
    private key to attest to its identity; other entities can use the public key to
    verify that claim.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥对允许一个实体（比如Linkerd网格中的工作负载）使用私钥来证明其身份；其他实体可以使用公钥来验证这一声明。
- en: An important note about keypairs is that they need to have a limited lifetime,
    so every so often we need a way to replace the keys in use for any given entity.
    This is called *rotating* the keys.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于密钥对的重要说明是，它们需要有限的生命周期，因此我们需要定期更换任何给定实体正在使用的密钥的方法。这被称为*轮换*密钥。
- en: Certifying Authorities
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证机构
- en: Since it’s very tedious to try to keep track of public and private keys separately
    all the time, TLS uses keys that are bundled up in *X.509 certificates* (mostly
    just called certificates), which give us a standard format to save the keys and
    a standard way to allow using one certificate to attest that another is valid.
    This is called *issuing* a certificate or *signing* a certificate. Organizations
    that support the process of issuing certificates are called *certifying authorities*
    or *CAs*. There are companies that treat being a CA as a core part of their business
    (such as Let’s Encrypt, Venafi, and most cloud providers) as well as software
    that permits establishing CAs within our own organizations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于始终单独跟踪公钥和私钥非常繁琐，TLS使用捆绑在*X.509证书*（通常只称为证书）中的密钥，这为我们提供了保存密钥的标准格式以及允许使用一个证书来证明另一个证书有效的标准方法。这称为*签发*证书或*签署*证书。支持签发证书过程的组织称为*认证机构*或*CA*。有些公司将成为CA视为其业务的核心部分（如Let’s
    Encrypt、Venafi和大多数云提供商），还有软件允许在我们自己的组织内建立CA。
- en: Using certificates to issue other certificates naturally creates a hierarchy
    of certificates that form a chain of trust from a single root, as shown in [Figure 2-4](#certificate-hierarchy-diagram-1).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用证书来签发其他证书自然地创建了一组证书的层次结构，形成了从单个根证书的信任链，如[图 2-4](#certificate-hierarchy-diagram-1)所示。
- en: '![luar 0204](assets/luar_0204.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0204](assets/luar_0204.png)'
- en: Figure 2-4\. The certificate trust hierarchy
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-4. 证书信任层次结构
- en: Linkerd—like everything else that uses TLS—requires a properly configured hierarchy
    of certificates in order to function. We’ll discuss this in more detail in Chapters
    [3](ch03.html#LUAR_deploying_linkerd) and [7](ch07.html#LUAR_mtls_and_certs).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 像使用TLS的所有其他东西一样，Linkerd需要一个正确配置的证书层次结构才能正常工作。我们将在[第3章](ch03.html#LUAR_deploying_linkerd)和[第7章](ch07.html#LUAR_mtls_and_certs)中更详细地讨论这个问题。
- en: The Linkerd Control Plane
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd控制平面
- en: 'As of this writing, the core Linkerd control plane is composed of three primary
    components, as shown in [Figure 2-5](#linkerd-control-plane-architecture): the
    *proxy injector*, the *identity controller*, and the *destination controller*.
    We will discuss these components in more detail in [Chapter 15](ch15.html#LUAR_troubleshooting).
    Fundamentally, they are responsible for allowing you to add individual applications
    to your service mesh and enabling the core security, reliability, and observability
    features that Linkerd provides. In order to provide these functions, these components
    interact directly with Linkerd’s TLS certificates.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前为止，Linkerd 核心控制平面由三个主要组件组成，如 [图 2-5](#linkerd-control-plane-architecture)
    所示：*代理注入器*、*身份控制器* 和 *目标控制器*。我们将在 [第 15 章](ch15.html#LUAR_troubleshooting) 中详细讨论这些组件。从根本上说，它们负责允许你将个别应用程序添加到服务网格中，并启用
    Linkerd 提供的核心安全性、可靠性和可观察性功能。为了提供这些功能，这些组件直接与 Linkerd 的 TLS 证书交互。
- en: '![luar 0205](assets/luar_0205.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0205](assets/luar_0205.png)'
- en: Figure 2-5\. The Linkerd control plane
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-5\. Linkerd 控制平面
- en: Linkerd Extensions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd 扩展
- en: '[Figure 2-5](#linkerd-control-plane-architecture) shows some extension deployments
    running off to the side. Linkerd extensions have no special privileges; in particular,
    the only way they can interact with the control plane or the proxy is via published
    APIs. This allows them to be written by anyone.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-5](#linkerd-control-plane-architecture) 展示了一些在侧边运行的扩展部署。Linkerd 扩展没有特权；特别地，它们与控制平面或代理的交互方式仅限于公开的
    API。这使得任何人都可以编写这些扩展。'
- en: Several extensions are maintained by the Linkerd maintainers to supply functionality
    that many users want, but that isn’t *required* by every Linkerd installation;
    these include Linkerd Viz, Linkerd Multicluster, Linkerd Jaeger, Linkerd CNI,
    and Linkerd SMI.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 维护人员维护了几个扩展，以提供许多用户需要的功能，但并非每个 Linkerd 安装都*必须*使用；其中包括 Linkerd Viz、Linkerd
    Multicluster、Linkerd Jaeger、Linkerd CNI 和 Linkerd SMI。
- en: Linkerd Viz
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linkerd Viz
- en: The Linkerd Viz extension provides the Linkerd dashboard and its associated
    components, as shown in [Figure 2-6](#linkerd-viz-architecture). It also provides
    some additional CLI options that are useful when troubleshooting applications
    in your cluster.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Viz 扩展提供了 Linkerd 仪表盘及其相关组件，如 [图 2-6](#linkerd-viz-architecture) 所示。它还提供了一些额外的
    CLI 选项，在集群中调试应用程序时非常有用。
- en: '![luar 0206](assets/luar_0206.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0206](assets/luar_0206.png)'
- en: Figure 2-6\. The Linkerd Viz extension
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-6\. Linkerd Viz 扩展
- en: Viz is made up of the components described in the following sections.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Viz 由以下部分组成，我们将在后续章节中描述这些部分。
- en: Web
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Web
- en: The Web component of Linkerd Viz provides the dashboard GUI used by many Linkerd
    operators. You don’t actually need the GUI—everything it shows is accessible from
    the command line—but it is very commonly used, and it can be very useful.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Viz 的 Web 组件提供了许多 Linkerd 运营商使用的仪表盘 GUI。实际上，你并不需要 GUI —— 它显示的所有内容都可以通过命令行访问
    —— 但它被广泛使用，并且非常有用。
- en: The Linkerd Viz Dashboard Is Unauthenticated
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd Viz 仪表盘不需要身份验证
- en: The Linkerd Viz dashboard doesn’t do user authentication—there are simply too
    many auth systems in use for it to be feasible. If you choose to expose Linkerd
    Viz to the network, you’ll need to use an API gateway or the like to protect access
    to Linkerd Viz according to your own policies. The dashboard can’t change anything
    in your cluster, but it does expose an awful lot of information.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Viz 仪表盘不进行用户身份验证 —— 使用的身份验证系统太多，无法实现。如果选择将 Linkerd Viz 暴露给网络，你需要使用 API
    网关或类似工具来根据自己的策略保护对 Linkerd Viz 的访问。仪表盘无法更改集群中的任何内容，但确实公开了大量信息。
- en: You can also choose to leave the dashboard *inaccessible* from outside the cluster,
    and simply use the `linkerd viz dashboard` CLI command to bring up the dashboard
    in a web browser, via a port forward.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以选择让仪表盘*在集群外部无法访问*，只需使用 `linkerd viz dashboard` CLI 命令通过端口转发在 web 浏览器中打开仪表盘。
- en: Tap
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tap
- en: Tap allows Linkerd to surface the metadata about individual requests flowing
    between your applications. Tap data is useful for debugging application issues
    in live environments, since it permits watching request and response data in real
    time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Tap 允许 Linkerd 显示流经应用程序之间的请求的元数据。Tap 数据在实时环境中调试应用程序问题时非常有用，因为它允许实时观察请求和响应数据。
- en: Tap Doesn’t Show Request Bodies
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tap 不显示请求主体
- en: 'Tap can only show *metadata*: paths, headers, etc. It cannot show request *bodies*.
    In a great many cases, of course, the metadata is all that’s needed to understand
    what’s going on in an application.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Tap 只能显示 *元数据*：路径、标头等，无法显示请求 *主体*。当然，在许多情况下，元数据就足以理解应用程序中发生的情况。
- en: For access to request bodies, you’ll need to incorporate application-level request
    logging. Even in this situation, though, Tap can help narrow down the microservices
    and request IDs of interest when examining more detailed logs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问请求主体，您需要整合应用程序级别的请求日志记录。即使在这种情况下，Tap 在检查更详细的日志时也可以帮助缩小感兴趣的微服务和请求 ID 的范围。
- en: Tap injector
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tap 注入器
- en: For Linkerd Viz to surface metadata about requests, the metadata must be collected
    from the individual proxies in the system. The Tap injector modifies the proxy
    injector so that new proxies will allow this metadata collection.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 Linkerd Viz 显示有关请求的元数据，必须从系统中的各个代理中收集元数据。Tap 注入器修改了代理注入器，以便新代理允许此元数据收集。
- en: Note that the proxy injector can’t affect any proxy that’s already running!
    Any workloads started before the extension was installed will need to be restarted
    to provide Tap data to Linkerd Viz.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代理注入器无法影响任何已经运行的代理！在安装扩展之前启动的工作负载需要重新启动，以便为 Linkerd Viz 提供 Tap 数据。
- en: Metrics API
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 指标 API
- en: The metrics API is involved in collecting metrics for the Linkerd dashboard.
    It provides the underlying summary data for the Linkerd dashboard as well as the
    Linkerd CLI. Like all dashboard components, it is not involved in providing information
    to the Linkerd proxies.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 指标 API 参与了为 Linkerd 仪表板收集指标的过程。它为 Linkerd 仪表板以及 Linkerd CLI 提供了底层的摘要数据。与所有仪表板组件一样，它不参与向
    Linkerd 代理提供信息。
- en: Prometheus and Grafana
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Prometheus 和 Grafana
- en: Linkerd’s Viz extension ships with a Prometheus instance. If you choose to install
    Grafana (as described in the [Linkerd documentation](https://oreil.ly/FB_XN)),
    Linkerd publishes several open source Grafana dashboards as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的 Viz 扩展附带了一个 Prometheus 实例。如果选择安装 Grafana（如 [Linkerd 文档](https://oreil.ly/FB_XN)
    中所述），Linkerd 还发布了几个开源的 Grafana 仪表板。
- en: You don’t actually need Linkerd Viz to use Prometheus and Grafana. The Linkerd
    proxy supports Prometheus natively, so you can install Prometheus and configure
    it to scrape the proxies directly if you like. Linkerd Viz is simpler, though.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您并不需要 Linkerd Viz 来使用 Prometheus 和 Grafana。Linkerd 代理原生支持 Prometheus，因此如果愿意，可以安装
    Prometheus 并配置它直接抓取代理。不过，Linkerd Viz 更简单。
- en: Always Use Your Own Prometheus
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用自己的 Prometheus
- en: By default, installing Linkerd Viz will install an internal Prometheus instance.
    *Do not use this Prometheus in production*, as it does not have persistent storage
    configured; instead, see the [Linkerd documentation](https://oreil.ly/hI6eF) and
    [Example 10-9](ch10.html#EX12-production-prometheus) for information about using
    an external Prometheus instance.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装 Linkerd Viz 将安装一个内部的 Prometheus 实例。*不要在生产环境中使用此 Prometheus*，因为它没有配置持久存储；相反，请参阅
    [Linkerd 文档](https://oreil.ly/hI6eF) 和 [示例 10-9](ch10.html#EX12-production-prometheus)
    了解如何使用外部的 Prometheus 实例。
- en: Linkerd Multicluster
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linkerd 多集群
- en: The Linkerd Multicluster extension provides users the ability to connect clusters
    together over any public or private networks, as shown in [Figure 2-7](#linkerd-multicluster-architecture).
    The Multicluster extension connects clusters via a special gateway that allows
    all traffic to appear as if it originates locally in the cluster. This allows
    users to avoid configuring any special networking settings when connecting clusters.
    We’ll dive deeper into multicluster connections in [Chapter 12](ch12.html#LUAR_multicluster).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 多集群扩展允许用户通过任何公共或私有网络连接集群，如 [图 2-7](#linkerd-multicluster-architecture)
    所示。多集群扩展通过一个特殊的网关连接集群，使所有流量看起来像是在本地集群中发起的。这使用户在连接集群时无需配置任何特殊的网络设置。我们将在 [第 12 章](ch12.html#LUAR_multicluster)
    深入探讨多集群连接。
- en: '![luar 0207](assets/luar_0207.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0207](assets/luar_0207.png)'
- en: Figure 2-7\. Linkerd multicluster architecture
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-7\. Linkerd 多集群架构
- en: Linkerd Jaeger
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linkerd Jaeger
- en: The Linkerd Jaeger extension allows Linkerd to participate in distributed tracing,
    as embodied by [the Jaeger project](https://oreil.ly/Dly9D). Specifically, it
    allows Linkerd to emit and forward distributed tracing spans, so that you can
    see proxy activity in the distributed trace. As shown in [Figure 2-8](#linkerd-jaeger-architecture),
    Linkerd Jaeger provides a collector, which forwards spans to a Jaeger instance,
    and an injector, which modifies the proxy injector so that new proxies will send
    data to the collector. As with Linkerd Viz, you’ll need to restart any workloads
    that were running before you installed Linkerd Jaeger!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Jaeger扩展允许Linkerd参与分布式跟踪，如[Jaeger项目](https://oreil.ly/Dly9D)所体现的那样。具体而言，它允许Linkerd发出和转发分布式跟踪span，以便您可以在分布式跟踪中查看代理活动。如[图2-8](#linkerd-jaeger-architecture)所示，Linkerd
    Jaeger提供了一个收集器，用于将span转发至Jaeger实例，并提供了一个注入器，用于修改代理注入器，以便新的代理将数据发送到收集器。与Linkerd
    Viz一样，您需要重新启动在安装Linkerd Jaeger之前运行的所有工作负载！
- en: It’s important to understand that while Linkerd can aid your application-based
    tracing by providing details on how the proxies are contributing to your distributed
    application’s flow, it cannot add tracing instrumentation to your application.
    In order to take advantage of distributed tracing with Linkerd, your application
    must first be configured to propagate tracing headers and create and emit its
    own spans.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的是，虽然Linkerd可以通过提供有关代理如何对分布式应用程序的流量做出贡献的细节来帮助您的应用程序跟踪，但它不能为您的应用程序添加跟踪仪器。为了利用Linkerd进行分布式跟踪，您的应用程序必须首先配置为传播跟踪标头并创建和发出自己的span。
- en: Always Use Your Own Jaeger Instance
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用您自己的Jaeger实例
- en: By default, Linkerd Jaeger will install an internal Jaeger instance. Do not
    use this Jaeger instance in production, as it does not provide persistent storage;
    instead, see the [Linkerd documentation](https://oreil.ly/QgDXC) for information
    about using an external Jaeger instance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Linkerd Jaeger会安装一个内部的Jaeger实例。请勿在生产环境中使用此Jaeger实例，因为它不提供持久存储；而是参阅[Linkerd文档](https://oreil.ly/QgDXC)，了解如何使用外部Jaeger实例的信息。
- en: '![luar 0208](assets/luar_0208.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![luar 0208](assets/luar_0208.png)'
- en: Figure 2-8\. Linkerd Jaeger architecture
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-8\. Linkerd Jaeger架构
- en: Linkerd CNI
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linkerd CNI
- en: 'When a Linkerd proxy starts running, it needs to reconfigure the kernel’s network
    layer so that the proxy can intercept and mediate network communication for the
    application. There are two possible ways for Linkerd to do this: the Linkerd *init
    container* or the Linkerd *Container Network Interface (CNI) plugin*.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当Linkerd代理开始运行时，它需要重新配置内核的网络层，以便代理可以拦截和调节应用程序的网络通信。Linkerd有两种可能的方式来实现这一点：Linkerd
    *init容器*或Linkerd *容器网络接口（CNI）插件*。
- en: We’ll discuss this in much greater detail in [Chapter 13](ch13.html#LUAR_cni_vs_init_containers),
    but it’s worth noting here that the CNI plugin works in conjunction with the Kubernetes
    CNI to reconfigure the network stack in environments where using the init container
    isn’t possible or isn’t desirable. If you do plan to use the CNI, you must install
    the Linkerd CNI plugin before installing any other Linkerd components. This is
    the only extension that can and must be installed before Linkerd’s core control
    plane.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第13章](ch13.html#LUAR_cni_vs_init_containers)中详细讨论这个问题，但值得注意的是，在某些环境中，使用init容器可能不可行或不合适，此时CNI插件与Kubernetes
    CNI协作以重新配置网络堆栈。如果您计划使用CNI，则必须在安装任何其他Linkerd组件之前安装Linkerd CNI插件。这是唯一必须在Linkerd核心控制平面之前安装的扩展。
- en: Linkerd SMI
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linkerd SMI
- en: The Service Mesh Interface (SMI) was a project out of the CNCF that aimed to
    provide a standard, cross-platform API to control the behavior of a service mesh.
    The Linkerd SMI extension allows Linkerd to do traffic splitting using the SMI
    TrafficSplit custom resource definition (CRD).^([1](ch02.html#id606))
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 服务网格接口（SMI）是CNCF推出的一个项目，旨在提供一个标准的、跨平台的API来控制服务网格的行为。Linkerd SMI扩展允许Linkerd使用SMI
    TrafficSplit自定义资源定义（CRD）进行流量分割。^([1](ch02.html#id606))
- en: SMI saw somewhat mixed adoption overall, and as of October 2023 the SMI project
    was archived, with many of its concepts and goals used to inform [the GAMMA initiative
    within Gateway API](https://oreil.ly/J1BOK), which Linkerd supports as of version
    2.14.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: SMI在整体上的采用情况有些参差不齐，截至2023年10月，SMI项目已归档，其中许多概念和目标被用来指导[网关API内的GAMMA倡议](https://oreil.ly/J1BOK)，Linkerd从版本2.14开始支持该倡议。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Linkerd got started in 2015 and grew into its modern form, based on Rust and
    Go and driven by the concept of operational simplicity, in 2018\. That focus on
    operational simplicity remains today and is borne out by Linkerd’s architecture,
    with a small, purpose-built Rust data plane proxy, a Go control plane that focuses
    on critical functionality, and a set of extensions for optional functionality.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd在2015年开始，并在2018年基于Rust和Go发展成现代形式。它的运作简单的理念推动了其发展，这一点在Linkerd的架构中得到了体现，包括一个小型的、专门构建的Rust数据平面代理，一个专注于关键功能的Go控制平面，以及一组用于可选功能的扩展。
- en: ^([1](ch02.html#id606-marker)) There were other SMI CRDs, but other than TrafficSplit,
    they duplicate functionality that Linkerd already had APIs for.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#id606-marker)) 除了TrafficSplit之外，还有其他SMI CRD，但它们复制了Linkerd已经具有API的功能。
