- en: Chapter 11\. Namespacing Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore patterns for namespacing in JavaScript. Namespaces
    can be considered a logical grouping of code units under a unique identifier.
    You can reference the identifier in many namespaces, and each identifier can contain
    a hierarchy of nested (or sub) namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: In application development, we employ namespaces for many important reasons.
    JavaScript namespaces help us avoid *collisions* with other objects or variables
    in the global namespace. They’re also handy for helping organize blocks of functionality
    in a codebase so that it can be more easily referenced and used.
  prefs: []
  type: TYPE_NORMAL
- en: Namespacing any serious script or application is critical because it’s crucial
    to safeguard our code from breaking in the event of another script on the page
    using the *same* variable or method names we are. With the number of *third-party*
    tags regularly injected into pages, this can be a common problem we all need to
    tackle at some point in our careers. As a well-behaved “citizen” of the global
    namespace, it’s also imperative that we try our best not to prevent other developers’
    scripts from executing due to the same issues.
  prefs: []
  type: TYPE_NORMAL
- en: While JavaScript doesn’t have built-in support for namespaces like other languages,
    it does have objects and closures that you can use to achieve a similar effect.
  prefs: []
  type: TYPE_NORMAL
- en: Namespacing Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find namespaces in almost any serious JavaScript application. Unless
    we’re working with a simple code snippet, we must do our best to ensure that we’re
    implementing namespacing correctly, as it’s not just easy to pick up; it’ll also
    avoid third-party code destroying our own. The patterns we’ll be examining in
    this section are:'
  prefs: []
  type: TYPE_NORMAL
- en: Single global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefix namespacing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object literal notation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested namespacing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immediately invoked function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Namespace injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single Global Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One popular pattern for namespacing in JavaScript is opting for a single global
    variable as our primary object of reference. Here’s a skeleton implementation
    of this where we return an object with functions and properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Although this works for certain situations, the biggest challenge with the single
    global variable pattern is ensuring that no one else has used the same global
    variable name as we have on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Prefix Namespacing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One solution to the problem mentioned, as noted by [Peter Michaux](https://oreil.ly/o2dgF),
    is to use prefix namespacing. It’s a simple concept at heart, but the idea is
    we select a unique prefix namespace we wish to use (in this example, `myApplication_`)
    and then define any methods, variables, or other objects after the prefix as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This effectively decreases the chances of a particular variable existing in
    the global scope, but remember that a uniquely named object can have the same
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: This aside, the biggest issue with the pattern is that it can result in many
    global objects once our application grows. There is also a heavy reliance on our
    prefix not being used by any other developers in the global namespace, so be careful
    if opting to use this.
  prefs: []
  type: TYPE_NORMAL
- en: For more on Peter’s views about the single global variable pattern, [read his
    excellent post](https://oreil.ly/o2dgF).
  prefs: []
  type: TYPE_NORMAL
- en: Object Literal Notation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Object literal notation, which we also cover in the Module pattern section,
    can be thought of as an object containing a collection of key-value pairs with
    a colon separating each pair of keys and values, where keys can also represent
    new namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'One can also opt for adding properties directly to the namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Object literals don’t pollute the global namespace but assist in organizing
    code and parameters logically. They are truly beneficial if you wish to create
    easily readable structures that you can expand to support deep nesting. Unlike
    simple global variables, object literals often consider tests for the existence
    of a variable by the same name, so the chances of a collision occurring are significantly
    reduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following sample demonstrates several ways to check if an object namespace
    already exists, defining it if it doesn’t:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You’ll often see developers opting for Option 1 or Option 2—they are both straightforward
    and equivalent in terms of their results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 3 assumes that you’re working in the global namespace, but it can also
    be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This variation assumes that `myApplication` has already been initialized, so
    it’s only handy for a parameter/argument scenario, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Option 4 can help write jQuery plug-ins where:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This results in better compression (minification) and can save on scope lookups.
  prefs: []
  type: TYPE_NORMAL
- en: Option 5 is a little similar to Option 4 but is a long form that evaluates whether
    `myApplication` is `undefined` inline, such that it’s defined as an object if
    not and set to a current value for `myApplication` if so.
  prefs: []
  type: TYPE_NORMAL
- en: It is shown just for the sake of being thorough, but in most situations, Options
    1–4 will more than suffice for most needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is, of course, a great deal of variance in how and where object literals
    are used for organizing and structuring code. For smaller applications wishing
    to expose a nested API for a particular self-enclosed module, you may just find
    yourself using the Revealing Module pattern, which we covered earlier in the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The benefit of using object literals here is that they offer us a very elegant
    key-value syntax to work with—one where we’re able to easily encapsulate any distinct
    logic or functionality for our application in a way that clearly separates it
    from others and provides a solid foundation for extending our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that JSON is a subset of object literal notation, and there are only minor
    syntactical differences between it and the preceding code (e.g., JSON keys must
    be strings). If, for any reason, one wishes to use JSON for storing configuration
    data instead (e.g., for simpler storage when sending to the backend), feel free
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Nested Namespacing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An extension of the Object Literal pattern is nested namespacing. It’s another
    common pattern that offers a lower risk of collision because even if a namespace
    already exists, it’s unlikely the same nested children do.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Older versions of Yahoo!’s YUI library regularly used the Nested Object Namespacing
    pattern. During my time as an engineer at AOL, we also used this pattern in many
    of our larger applications. A sample implementation of nested namespacing may
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This code differs from how YUI3 approaches namespacing. YUI3 modules use a sandboxed
    API host object with far less and far shallower namespacing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also opt to declare new nested namespaces/properties as indexed properties
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Both options are readable and organized and offer a relatively safe way of namespacing
    our application, similar to what we may be used to in other languages. The only
    real caveat is that it requires our browser’s JavaScript engine first to locate
    the `myApp` object and then dig down until it gets to the function we actually
    wish to use.
  prefs: []
  type: TYPE_NORMAL
- en: This can mean more work to perform lookups; however, developers such as [Juriy
    Zaytsev](https://oreil.ly/hxJnZ) have previously tested and found the performance
    differences between single object namespacing versus the “nested” approach quite
    negligible.
  prefs: []
  type: TYPE_NORMAL
- en: Immediately Invoked Function Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in the book, we briefly covered the concept of an immediately invoked
    function expression (IIFE); an [IIFE](https://oreil.ly/KSspI), which is effectively
    an unnamed function, is immediately invoked after it’s been defined. If it sounds
    familiar, it’s because you may have previously come across it referred to as a
    self-executing (or self-invoked) `anonymous` function. However, I feel Ben Alman’s
    IIFE naming is more accurate. In JavaScript, because both variables and functions
    explicitly defined within such a context may be accessed only inside of it, function
    invocation provides an easy means to achieving privacy.
  prefs: []
  type: TYPE_NORMAL
- en: IIFEs are a popular approach to encapsulating application logic to protect it
    from the global namespace, but they also have their use in the world of namespacing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are examples of IIFEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A slightly more expanded version of the first example might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'While readable, this example could be significantly expanded to address common
    development concerns such as defined levels of privacy (public/private functions
    and variables) as well as convenient namespace extension. Let’s go through some
    more code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Extensibility is of course key to any scalable namespacing pattern and IIFEs
    can be used to achieve this quite easily. In the following example, our “namespace”
    is once again passed as an argument to our `anonymous` function and is then extended
    (or decorated) with additional functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you want to learn more about this pattern, I recommend reading Ben’s [IIFE
    post](https://oreil.ly/KSspI) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Namespace Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Namespace injection is another variation on the IIFE in which we “inject” the
    methods and properties for a specific namespace from within a function wrapper
    using `this` as a namespace proxy. The benefit this pattern offers is the easy
    application of functional behavior to multiple objects or namespaces and can come
    in useful when applying a set of base methods to be built on later (e.g., getters
    and setters).
  prefs: []
  type: TYPE_NORMAL
- en: The disadvantages of this pattern are that there may be easier or more optimal
    approaches to achieving this goal (e.g., deep object extension or merging), which
    I cover earlier in the section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we can see an example of this pattern in action, where we use it to populate
    the behavior for two namespaces: one initially defined (`utils`) and another which
    we dynamically create as a part of the functionality assignment for `utils` (a
    new namespace called `tools`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, Angus Croll has suggested [using the call API to provide a natural
    separation between contexts and arguments](https://oreil.ly/eBc5N). This pattern
    can feel a lot more like a module creator, but as modules still offer an encapsulation
    solution, we’ll briefly cover it for the sake of thoroughness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, this type of pattern helps assign a similar base set of functionality
    to multiple modules or namespaces. I would, however, suggest using it only where
    explicitly declaring functionality within an object/closure as direct access doesn’t
    make sense.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Namespacing Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll now explore some advanced patterns and utilities that I have found invaluable
    when working on more extensive applications, some of which have required a rethink
    of traditional approaches to application namespacing. I’ll note that I am not
    advocating the following as *the* way to namespace but rather as ways I have found
    to work in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Nested Namespacing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we’ve reviewed, nested namespaces can provide an organized hierarchy of
    structure for a unit of code. An example of such a namespace could be the following:
    `application.utilities.drawing.canvas.2d`. This can also be expanded using the
    Object Literal pattern to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: One of the obvious challenges with this pattern is that each additional layer
    we wish to create requires yet another object to be defined as a child of some
    parent in our top-level namespace. This can become particularly laborious when
    multiple depths are required as our application increases in complexity.
  prefs: []
  type: TYPE_NORMAL
- en: How can this problem be better solved? In *JavaScript Patterns*, Stoyan Stefanov
    presents a clever approach for automatically defining nested namespaces under
    an existing global variable. He suggests a convenience method that takes a single
    string argument for a nest, parses this, and automatically populates our base
    namespace with the objects required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method he suggests using is the following, which I’ve updated to be a generic
    function for easier reuse with multiple namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 11-1](#web_inspector_output) shows the Chrome Developer Tools output.
    Where one would previously have had to explicitly declare the various nests for
    their namespace as objects, this can now be easily achieved using a single, cleaner
    line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ljd2 1101](Images/ljd2_1101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. Chrome Developer Tools output
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Dependency Declaration Pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll now explore a minor augmentation to the Nested Namespacing pattern, which
    we’ll refer to as the Dependency Declaration pattern. We all know that local references
    to objects can decrease overall lookup times, but let’s apply this to namespacing
    to see how it might look in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Working with a local variable here is almost always faster than working with
    a top-level global (e.g., `myApp`). It’s also more convenient and more performant
    than accessing nested properties/subnamespaces on every subsequent line and can
    improve readability in more complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: Stoyan recommends declaring localized namespaces required by a function or module
    at the top of our function scope (using the single-variable pattern) and calls
    this a Dependency Declaration pattern. One of the benefits this offers is a decrease
    in locating dependencies and resolving them, should we have an extendable architecture
    that dynamically loads modules into our namespace when required.
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, this pattern works best when working at a modular level, localizing
    a namespace to be used by a group of methods. Localizing namespaces on a per-function
    level, especially where there is significant overlap between namespace dependencies,
    is something I recommend avoiding where possible. Instead, define it further up
    and have them all access the same reference.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Object Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternative approach to automatic namespacing is deep object extension. Namespaces
    defined using object literal notation may be easily extended (or merged) with
    other objects (or namespaces) such that the properties and functions of both namespaces
    can be accessible under the same namespace postmerge.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is something that’s been made relatively easy to accomplish with JavaScript
    frameworks (e.g., see jQuery’s [`$.extend`](https://oreil.ly/WDJWX)); however,
    if looking to extend objects (namespaces) using conventional JS, the following
    routine may be of assistance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This implementation is not cross-browser compatible with all objects and should
    be considered a proof of concept only. One may find the [Lodash.js `extend()`
    method](https://oreil.ly/TD1-D) to be a simpler, more cross-browser-friendly implementation
    to start with.
  prefs: []
  type: TYPE_NORMAL
- en: 'For developers who are going to use jQuery in their applications, one can achieve
    the same object namespace extensibility with `$.extend` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For thoroughness, please check [this](https://oreil.ly/ZCB2C) for jQuery `$.extend`
    equivalents to the rest of the namespacing experiments in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reviewing the namespace patterns we’ve explored in this section, the option
    that I would personally use for most larger applications is Nested Object Namespacing
    with the Object Literal pattern. Where possible, I would implement this using
    automated nested namespacing. However, this is just a personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: IIFEs and single global variables may work fine for applications in the small
    to medium range. However, larger codebases requiring both namespaces and deep
    subnamespaces require a succinct solution that promotes readability and scale.
    This pattern achieves all of these objectives well.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend trying out some of the suggested advanced utility methods for namespace
    extension, as they can save time in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed how namespacing could help bring structure to your JavaScript
    and jQuery applications and prevent collisions between variables and function
    names. Organizing our project files in large JavaScript applications with many
    code files helps you better manage modules and namespaces and enhances the development
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: We have now covered different aspects of design and architecture using plain
    JavaScript. We have mentioned React in passing but haven’t discussed any React
    patterns in detail. In the next chapter, we aim to do just that.
  prefs: []
  type: TYPE_NORMAL
