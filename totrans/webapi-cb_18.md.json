["```\nasync function captureScreen() {\n  const stream = await navigator.mediaDevices.getDisplayMedia();\n  const mediaRecorder = new MediaRecorder(stream, {\n    mimeType: 'video/webm'\n  });\n\n  mediaRecorder.addEventListener('dataavailable', event => {\n    const blob = new Blob([event.data], {\n      type: 'video/webm',\n    });\n\n    const url = URL.createObjectURL(blob);\n    video.src = url;\n  });\n\n  mediaRecorder.start();\n}\n```", "```\nconst form = new FormData();\n// Here, \"blob\" is the Blob created in the captureScreen method.\nformData.append('file', blob);\n\nfetch('/api/video/upload', {\n  method: 'POST',\n  body: formData\n});\n```", "```\nconst link = document.createElement('a');\n\n// Here, \"url\" is the object URL created in the captureScreen method.\nlink.href = url;\nlink.textContent = 'Download';\nlink.download = 'screen-recording.webm';\nlink.click();\n```", "```\n<style>\n  #canvas {\n    display: none;\n  }\n\n  #photo {\n    width: 640px;\n    height: 480px;\n  }\n</style>\n\n<canvas id=\"canvas\"></canvas>\n<img id=\"photo\">\n<video id=\"preview\">\n```", "```\nconst preview = document.querySelector('#preview');\n\nasync function startCamera() {\n  const stream = await navigator.mediaDevices.getUserMedia(\n    {\n      video: true,\n      audio: false\n    }\n  );\n  preview.srcObject = stream;\n  preview.play();\n}\n```", "```\n// This is the <video> element.\nconst preview = document.querySelector('#preview');\n\nconst photo = document.querySelector('#photo');\nconst canvas = document.querySelector('#canvas');\n\nfunction captureImage() {\n  // Resize the canvas based on the device pixel density.\n  // This helps prevent a blurred or pixellated image.\n  canvas.width = canvas.width * window.devicePixelRatio;\n  canvas.height = canvas.height * window.devicePixelRatio;\n\n  // Get the 2D context from the canvas and draw the current video frame.\n  const context = canvas.getContext('2d');\n  context.drawImage(preview, 0, 0, canvas.width, canvas.height);\n\n  // Create a JPEG data URL and set it as the image source.\n  const dataUrl = canvas.toDataURL('image/jpeg');\n  photo.src = dataUrl;\n}\n```", "```\n<video id=\"preview\" muted></video>\n<button id=\"record-button\">Record</button>\n<button id=\"stop-record-button\">Stop Recording</button>\n```", "```\nconst preview = document.querySelector('#preview');\n\nconst stream = await navigator.mediaDevices.getUserMedia({\n  video: true,\n  audio: true\n});\npreview.srcObject = stream;\npreview.play();\n```", "```\nmediaRecorder = new MediaRecorder(stream, {\n  mimeType: 'video/webm'\n});\n\nmediaRecorder.addEventListener('dataavailable', event => {\n  const blob = new Blob([event.data], {\n    type: 'video/webm',\n  });\n\n  const url = URL.createObjectURL(blob);\n\n  // Clear the \"muted\" flag so that the playback will\n  // include audio.\n  preview.muted = false;\n\n  // Reset the source of the video element to the object\n  // URL just created.\n  preview.srcObject = null;\n  preview.src = url;\n\n  // Start playing the recording immediately.\n  preview.autoplay = true;\n  preview.loop = true;\n  preview.controls = true;\n});\n```", "```\ndocument.querySelector('#record-button').addEventListener('click', () => {\n  mediaRecorder.start();\n});\n\ndocument.querySelector('#stop-record-button').addEventListener('click', () => {\n  mediaRecorder.stop();\n});\n```", "```\nnavigator.mediaCapabilities.decodingInfo({\n  type: 'file',\n  audio: {\n    contentType: 'audio/mp3'\n  }\n}).then(result => {\n  if (result.supported) {\n    // mp3 audio is supported!\n  }\n});\n\nnavigator.mediaCapabilities.decodingInfo({\n  type: 'file',\n  audio: {\n    contentType: 'audio/webm;codecs=opus'\n  }\n}).then(result => {\n  if (result.supported) {\n    // WebM audio is supported with the opus codec.\n  }\n});\n```", "```\nnavigator.mediaCapabilities.decodingInfo({\n  type: 'file',\n  video: {\n    contentType: 'video/webm;codecs=vp8',\n    bitrate: 4000000, // 4 MB\n    framerate: 30,\n    width: 1920,\n    height: 1080\n  }\n}).then(result => {\n  if (result.supported) {\n    // This WebM configuration is supported.\n  }\n});\n```", "```\n<canvas id=\"canvas\"></canvas>\n<video id=\"preview\" style=\"display: none;\"></video>\n```", "```\nasync function startCamera() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: false\n  });\n\n  // Hook up the video element to the stream.\n  preview.srcObject = stream;\n  preview.play();\n\n  // Resize the canvas based on the device pixel density.\n  // This helps prevent a blurred or pixelated image.\n  canvas.width = canvas.width * window.devicePixelRatio;\n  canvas.height = canvas.height * window.devicePixelRatio;\n  const context = canvas.getContext('2d');\n\n  // Target frame rate of 30 FPSâ€”draw each frame to the canvas.\n  setInterval(() => {\n    context.drawImage(preview, 0, 0, canvas.width, canvas.height);\n  }, 30 / 1000);\n}\n```", "```\n#canvas {\n  filter: hue-rotate(90deg);\n}\n```"]