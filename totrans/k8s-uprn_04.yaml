- en: Chapter 4\. Common kubectl Commands
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章\. 常用 kubectl 命令
- en: The `kubectl` command-line utility is a powerful tool, and in the following
    chapters, you will use it to create objects and interact with the Kubernetes API.
    Before that, however, it makes sense to go over the basic `kubectl` commands that
    apply to all Kubernetes objects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`命令行实用程序是一个强大的工具，在接下来的章节中，您将使用它来创建对象并与 Kubernetes API 进行交互。然而，在此之前，先了解适用于所有
    Kubernetes 对象的基本`kubectl`命令是有意义的。'
- en: Namespaces
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: Kubernetes uses *namespaces* to organize objects in the cluster. You can think
    of each namespace as a folder that holds a set of objects. By default, the `kubectl`
    command-line tool interacts with the `default` namespace. If you want to use a
    different namespace, you can pass `kubectl` the `--namespace` flag. For example,
    `kubectl --namespace=mystuff` references objects in the `mystuff` namespace. You
    can also use the shorthand `-n` flag if you’re feeling concise. If you want to
    interact with all namespaces—for example, to list all Pods in your cluster—you
    can pass the `--all-namespaces` flag.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 使用*命名空间*来组织集群中的对象。您可以将每个命名空间视为一个包含一组对象的文件夹。默认情况下，`kubectl`命令行工具与`default`命名空间交互。如果您想使用不同的命名空间，可以传递`kubectl``--namespace`标志。例如，`kubectl
    --namespace=mystuff` 引用 `mystuff` 命名空间中的对象。如果您感到简洁，还可以使用缩写 `-n` 标志。如果您想与所有命名空间交互——例如，列出集群中所有
    Pod——可以传递 `--all-namespaces` 标志。
- en: Contexts
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文
- en: 'If you want to change the default namespace more permanently, you can use a
    *context*. This gets recorded in a `kubectl` configuration file, usually located
    at *$HOME/.kube/config*. This configuration file also stores how to both find
    and authenticate to your cluster. For example, you can create a context with a
    different default namespace for your `kubectl` commands using:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更长期地更改默认命名空间，可以使用*上下文*。这将记录在一个`kubectl`配置文件中，通常位于*$HOME/.kube/config*。这个配置文件还存储了如何找到和认证您的集群。例如，您可以使用以下命令为您的`kubectl`命令创建一个具有不同默认命名空间的上下文：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This creates a new context, but it doesn’t actually start using it yet. To
    use this newly created context, you can run:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的上下文，但实际上并没有开始使用它。要使用这个新创建的上下文，您可以运行：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Contexts can also be used to manage different clusters or different users for
    authenticating to those clusters using the `--users` or `--clusters` flags with
    the `set-context` command.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文还可以用于管理不同的集群或不同用户，通过使用`set-context`命令的`--users`或`--clusters`标志进行认证。
- en: Viewing Kubernetes API Objects
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 Kubernetes API 对象
- en: Everything contained in Kubernetes is represented by a RESTful resource. Throughout
    this book, we refer to these resources as *Kubernetes objects*. Each Kubernetes
    object exists at a unique HTTP path; for example, *https://your-k8s.com/api/v1/namespaces/default/pods/my-pod*
    leads to the representation of a Pod in the default namespace named `my-pod`.
    The `kubectl` command makes HTTP requests to these URLs to access the Kubernetes
    objects that reside at these paths.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的所有内容都由 RESTful 资源表示。在本书中，我们将这些资源称为*Kubernetes 对象*。每个 Kubernetes
    对象存在于唯一的 HTTP 路径；例如，*https://your-k8s.com/api/v1/namespaces/default/pods/my-pod*
    指向默认命名空间中名为`my-pod`的 Pod 的表示。`kubectl`命令通过这些URL向这些路径发出 HTTP 请求，以访问驻留在这些路径上的 Kubernetes
    对象。
- en: The most basic command for viewing Kubernetes objects via `kubectl` is `get`.
    If you run `kubectl get <*resource-name*>`, you will get a listing of all resources
    in the current namespace. If you want to get a specific resource, you can use
    `kubectl get <*resource-name*> <*obj-name*>`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`kubectl`查看 Kubernetes 对象的最基本命令是`get`。如果您运行`kubectl get <*resource-name*>`，您将获得当前命名空间中所有资源的列表。如果您想获取特定资源，可以使用`kubectl
    get <*resource-name*> <*obj-name*>`。
- en: By default, `kubectl` uses a human-readable printer for viewing the responses
    from the API server, but this human-readable printer removes many of the details
    of the objects to fit each object on one terminal line. One way to get slightly
    more information is to add the `-o wide` flag, which gives more details, on a
    longer line. If you want to view the complete object, you can also view the objects
    as raw JSON or YAML using the `-o json` or `-o yaml` flags, respectively.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`kubectl`使用人类可读的打印机来查看来自API服务器的响应，但这种人类可读的打印机会移除对象的许多细节以适应每个终端行。要获取稍多一些信息的一种方法是添加`-o
    wide`标志，这会在较长的行上提供更多细节。如果您想查看完整的对象，还可以使用`-o json`或`-o yaml`标志查看对象的原始JSON或YAML格式。
- en: A common option for manipulating the output of `kubectl` is to remove the headers,
    which is often useful when combining `kubectl` with Unix pipes (e.g., `kubectl
    ... | awk ...`). If you specify the `--no-headers` flag, `kubectl` will skip the
    headers at the top of the human-readable table.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用于操作`kubectl`输出的常见选项是移除标题，这在将`kubectl`与Unix管道结合使用时通常很有用（例如，`kubectl ... | awk
    ...`）。如果指定`--no-headers`标志，`kubectl`将跳过人类可读表格顶部的标题。
- en: 'Another common task is extracting specific fields from the object. `kubectl`
    uses the JSONPath query language to select fields in the returned object. The
    complete details of JSONPath are beyond the scope of this chapter, but as an example,
    this command will extract and print the IP address of the specified Pod:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的任务是从对象中提取特定字段。`kubectl`使用JSONPath查询语言来选择返回对象中的字段。 JSONPath的完整细节超出了本章的范围，但作为示例，此命令将提取并打印指定
    Pod 的IP地址：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also view multiple objects of different types by using a comma separated
    list of types, for example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用逗号分隔的类型列表查看不同类型的多个对象，例如：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will display all Pods and services for a given namespace.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示给定命名空间的所有Pod和服务。
- en: 'If you are interested in more detailed information about a particular object,
    use the `describe` command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对特定对象的更详细信息感兴趣，请使用`describe`命令：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will provide a rich multiline human-readable description of the object
    as well as any other relevant, related objects and events in the Kubernetes cluster.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供对象的丰富多行人类可读描述，以及Kubernetes集群中任何其他相关对象和事件。
- en: 'If you would like to see a list of supported fields for each supported type
    of Kubernetes object, you can use the `explain` command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看每种支持类型的Kubernetes对象的受支持字段列表，可以使用`explain`命令：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Sometimes you want to continually observe the state of a particular Kubernetes
    resource to see changes to the resource when they occur. For example, you might
    be waiting for your application to restart. The `--watch` flag enables this. You
    can add this flag to any `kubectl get` command to continuously monitor the state
    of a particular resource.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您可能希望持续观察特定Kubernetes资源的状态，以便在发生更改时看到资源的变化。例如，您可能正在等待应用程序重新启动。 `--watch`标志可以启用此功能。您可以将此标志添加到任何`kubectl
    get`命令中，以持续监视特定资源的状态。
- en: Creating, Updating, and Destroying Kubernetes Objects
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、更新和销毁Kubernetes对象
- en: Objects in the Kubernetes API are represented as JSON or YAML files. These files
    are either returned by the server in response to a query or posted to the server
    as part of an API request. You can use these YAML or JSON files to create, update,
    or delete objects on the Kubernetes server.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API中的对象以JSON或YAML文件表示。这些文件可以由服务器作为响应查询返回，也可以作为API请求的一部分发布到服务器上。您可以使用这些YAML或JSON文件在Kubernetes服务器上创建、更新或删除对象。
- en: 'Let’s assume that you have a simple object stored in *obj.yaml*. You can use
    `kubectl` to create this object in Kubernetes by running:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在*obj.yaml*中有一个简单的对象存储。您可以使用`kubectl`通过运行以下命令在Kubernetes中创建此对象：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that you don’t need to specify the resource type of the object; it’s
    obtained from the object file itself.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意您不需要指定对象的资源类型；它从对象文件本身获取。
- en: 'Similarly, after you make changes to the object, you can use the `apply` command
    again to update the object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在对对象进行更改后，您可以再次使用`apply`命令来更新对象：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `apply` tool will only modify objects that are different from the current
    objects in the cluster. If the objects you are creating already exist in the cluster,
    it will simply exit successfully without making any changes. This makes it useful
    for loops where you want to ensure the state of the cluster matches the state
    of the filesystem. You can repeatedly use `apply` to reconcile state.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`工具仅会修改与集群中当前对象不同的对象。如果您要创建的对象已经存在于集群中，则它将简单地成功退出而不进行任何更改。这使其在希望确保集群状态与文件系统状态匹配的循环中非常有用。您可以重复使用`apply`来调和状态。'
- en: If you want to see what the `apply` command will do without actually making
    the changes, you can use the `--dry-run` flag to print the objects to the terminal
    without actually sending them to the server.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看`apply`命令在不实际进行更改的情况下将要执行的操作，可以使用`--dry-run`标志将对象打印到终端而不实际发送到服务器。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you feel like making interactive edits instead of editing a local file,
    you can instead use the `edit` command, which will download the latest object
    state and then launch an editor that contains the definition:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望进行交互式编辑而不是编辑本地文件，您可以使用`edit`命令，该命令将下载最新的对象状态，然后启动包含定义的编辑器：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After you save the file, it will be automatically uploaded back to the Kubernetes
    cluster.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，它将自动上传回 Kubernetes 集群。
- en: 'The `apply` command also records the history of previous configurations in
    an annotation within the object. You can manipulate these records with the `edit-last-applied`,
    `set-last-applied`, and `view-last-applied` commands. For example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`命令还将先前配置的历史记录在对象内的注释中记录下来。您可以使用`edit-last-applied`、`set-last-applied`和`view-last-applied`命令来操作这些记录。例如：'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: will show you the last state that was applied to the object.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示应用于对象的最后状态。
- en: 'When you want to delete an object, you can simply run:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要删除一个对象时，您可以简单地运行：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is important to note that `kubectl` will not prompt you to confirm the deletion.
    Once you issue the command, the object *will* be deleted.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl` 删除对象时不会提示确认删除。一旦执行命令，对象*将*被删除。
- en: 'Likewise, you can delete an object using the resource type and name:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用资源类型和名称来删除对象：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Labeling and Annotating Objects
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象标记和注释
- en: 'Labels and annotations are tags for your objects. We’ll discuss the differences
    in [Chapter 6](ch06.xhtml#labels_and_annotations), but for now, you can update
    the labels and annotations on any Kubernetes object using the `label` and `annotate`
    commands. For example, to add the `color=red` label to a Pod named `bar`, you
    can run:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 标签和注释是您对象的标记。我们将在[第 6 章](ch06.xhtml#labels_and_annotations)中讨论它们的差异，但现在，您可以使用`label`和`annotate`命令更新任何
    Kubernetes 对象上的标签和注释。例如，要向名为`bar`的 Pod 添加`color=red`标签，您可以运行：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The syntax for annotations is identical.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注释的语法是相同的。
- en: By default, `label` and `annotate` will not let you overwrite an existing label.
    To do this, you need to add the `--overwrite` flag.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`label`和`annotate`不允许覆盖现有标签。要实现此目的，您需要添加`--overwrite`标志。
- en: 'If you want to remove a label, you can use the *`<label-name>-`* syntax:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要删除标签，您可以使用*`<label-name>-`*语法：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will remove the `color` label from the Pod named `bar`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从名为`bar`的 Pod 中删除`color`标签。
- en: Debugging Commands
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试命令
- en: '`kubectl` also makes a number of commands available for debugging your containers.
    You can use the following to see the logs for a running container:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`还提供了许多用于调试您的容器的命令。您可以使用以下命令查看正在运行容器的日志：'
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you have multiple containers in your Pod, you can choose the container to
    view using the `-c` flag.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 Pod 中有多个容器，您可以使用`-c`标志选择要查看的容器。
- en: By default, `kubectl logs` lists the current logs and exits. If you instead
    want to continuously stream the logs back to the terminal without exiting, you
    can add the `-f` (follow) command-line flag.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`kubectl logs`列出当前日志并退出。如果您希望连续将日志流式传输回终端而不退出，则可以添加`-f`（跟随）命令行标志。
- en: 'You can also use the `exec` command to execute a command in a running container:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`exec`命令在运行的容器中执行命令：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will provide you with an interactive shell inside the running container
    so that you can perform more debugging.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供一个在运行的容器内的交互式 shell，以便您可以执行更多调试。
- en: 'If you don’t have bash or some other terminal available within your container,
    you can always `attach` to the running process:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的容器内没有 bash 或其他终端可用，您始终可以`attach`到正在运行的进程：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `attach` command is similar to `kubectl logs` but will allow you to send
    input to the running process, assuming that process is set up to read from standard
    input.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`attach`命令类似于`kubectl logs`，但允许您将输入发送到运行的进程，假设该进程已设置为从标准输入读取。'
- en: 'You can also copy files to and from a container using the `cp` command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`cp`命令在容器之间复制文件：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will copy a file from a running container to your local machine. You can
    also specify directories, or reverse the syntax to copy a file from your local
    machine back out to the container.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从正在运行的容器中复制文件到您的本地机器。您还可以指定目录，或者颠倒语法以从本地机器复制文件到容器外。
- en: 'If you want to access your Pod via the network, you can use the `port-forward`
    command to forward network traffic from the local machine to the Pod. This enables
    you to securely tunnel network traffic through to containers that might not be
    exposed anywhere on the public network. For example, the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想通过网络访问您的 Pod，您可以使用`port-forward`命令将本地机器上的网络流量转发到 Pod。这使您能够安全地通过隧道传输网络流量到可能不会在公共网络上暴露的容器中。例如，以下命令：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: opens up a connection that forwards traffic from the local machine on port 8080
    to the remote container on port 80.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个连接，将本地机器上 8080 端口的流量转发到远程容器的 80 端口。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use the `port-forward` command with services by specifying `services/*<service-name>*`
    instead of `*<pod-name>*`, but note that if you do port-forward to a service,
    the requests will only ever be forwarded to a single Pod in that service. They
    will not go through the service load balancer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`port-forward`命令通过指定`services/*<service-name>*`而不是`*<pod-name>*`与服务一起使用。但请注意，如果您对服务进行端口转发，请求将只转发到该服务中的单个
    Pod。它们不会经过服务负载均衡器。
- en: 'If you want to view Kubernetes events, you can use the `kubectl get events`
    command to see a list of the latest 10 events on all objects in a given namespace:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看 Kubernetes 事件，您可以使用`kubectl get events`命令查看给定命名空间中所有对象的最新 10 个事件列表：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can also stream events as they happen by adding `--watch` to the `kubectl
    get events` command. You may also wish to include `-A` to see events in all namespaces.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在`kubectl get events`命令中添加`--watch`来实时查看事件。您可能还希望添加`-A`以查看所有命名空间中的事件。
- en: 'Finally, if you are interested in how your cluster is using resources, you
    can use the `top` command to see the list of resources in use by either nodes
    or Pods. This command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您对集群如何使用资源感兴趣，您可以使用`top`命令查看正在使用的节点或 Pod 资源列表。此命令：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'will display the total CPU and memory in use by the nodes in terms of both
    absolute units (e.g., cores) and percentage of available resources (e.g., total
    number of cores). Similarly, this command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示节点使用的总 CPU 和内存，以绝对单位（例如，核心）和可用资源的百分比（例如，总核心数）来计算。同样，此命令：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: will show all Pods and their resource usage. By default it only displays Pods
    in the current namespace, but you can add the `--all-namespaces` flag to see resource
    usage by all Pods in the cluster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有 Pod 及其资源使用情况。默认情况下，它只显示当前命名空间中的 Pod，但您可以添加`--all-namespaces`标志以查看集群中所有
    Pod 的资源使用情况。
- en: These `top` commands only work if a metrics server is running in your cluster.
    Metrics servers are present in nearly every managed Kubernetes environment and
    many unmanaged environments as well. But if these commands fail, it may be because
    you need to install a metrics server.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`top`命令仅在集群中运行有指标服务器时才有效。几乎每个托管的 Kubernetes 环境和许多非托管环境中都存在指标服务器。但如果这些命令失败，可能是因为您需要安装一个指标服务器。
- en: Cluster Management
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群管理
- en: The `kubectl` tool can also be used to manage the cluster itself. The most common
    action that people take to manage their cluster is to cordon and drain a particular
    node. When you *cordon* a node, you prevent future Pods from being scheduled onto
    that machine. When you *drain* a node, you remove any Pods that are currently
    running on that machine. A good example use case for these commands would be removing
    a physical machine for repairs or upgrades. In that scenario, you can use `kubectl
    cordon` followed by `kubectl drain` to safely remove the machine from the cluster.
    Once the machine is repaired, you can use `kubectl uncordon` to re-enable Pods
    scheduling onto the node. There is no `undrain` command; Pods will naturally get
    scheduled onto the empty node as they are created. For something quick affecting
    a node (e.g., a machine reboot), it is generally unnecessary to cordon or drain;
    it’s only necessary if the machine will be out of service long enough that you
    want the Pods to move to a different machine.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`工具也可以用来管理集群本身。人们在管理集群时最常见的操作是针对特定节点进行关闭和排空。当您*cordon*一个节点时，您阻止将来的
    Pod 被调度到该节点上。当您*drain*一个节点时，您会移除当前在该节点上运行的任何 Pod。这些命令的一个典型用例是移除需要维修或升级的物理机器。在这种情况下，您可以先使用`kubectl
    cordon`，然后再使用`kubectl drain`安全地将该机器从集群中移除。一旦机器修复完成，您可以使用`kubectl uncordon`重新启用将
    Pod 调度到该节点上。并没有`undrain`命令；Pods 会自然地被调度到空节点上，因为它们被创建。对于影响节点的快速操作（例如，机器重新启动），通常不需要进行cordon或drain操作；只有当机器将长时间停止服务时，您才需要将Pods移动到其他机器。'
- en: Command Autocompletion
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令自动补全
- en: '`kubectl` supports integration with your shell to enable tab completion for
    both commands and resources. Depending on your environment, you may need to install
    the `bash-completion` package before you activate command autocompletion. You
    can do this using the appropriate package manager:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 支持与您的 shell 集成，以启用命令和资源的选项补全。根据您的环境，可能需要先安装 `bash-completion` 包，然后再激活命令自动补全。您可以使用适当的包管理器执行此操作：'
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When installing on macOS, make sure to follow the instructions from `brew` about
    how to activate tab completion using your *${HOME}/.bash_profile*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上安装时，请确保按照 `brew` 的说明操作，以启用使用你的 *${HOME}/.bash_profile* 进行选项补全的方法。
- en: 'Once `bash-completion` is installed, you can temporarily activate it for your
    terminal using:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 `bash-completion` 后，您可以通过以下方式暂时激活终端的自动补全：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To make this automatic for every terminal, add it to your *${HOME}/.bashrc*
    file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这对每个终端自动完成，请将其添加到您的 *${HOME}/.bashrc* 文件中：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you use `zsh`, you can find similar [instructions online](https://oreil.ly/aYujA).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 `zsh`，可以在网上找到类似的 [说明](https://oreil.ly/aYujA)。
- en: Alternative Ways of Viewing Your Cluster
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看集群的其他方法
- en: 'In addition to `kubectl`, there are other tools for interacting with your Kubernetes
    cluster. For example, there are plug-ins for several editors that integrate Kubernetes
    and the editor environment, including:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `kubectl`，还有其他用于与 Kubernetes 集群交互的工具。例如，有几个编辑器的插件可以将 Kubernetes 与编辑器环境集成，包括：
- en: '[Visual Studio Code](http://bit.ly/32ijGV1)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Visual Studio Code](http://bit.ly/32ijGV1)'
- en: '[IntelliJ](http://bit.ly/2Gen1eG)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IntelliJ](http://bit.ly/2Gen1eG)'
- en: '[Eclipse](http://bit.ly/2XHi6gP)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse](http://bit.ly/2XHi6gP)'
- en: If you are using a managed Kubernetes service, most of them also feature a graphical
    interface to Kubernetes integrated into their web-based user experience. Managed
    Kubernetes in the public cloud also integrates with sophisticated monitoring tools
    that can help you gain insights into how your applications are running.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用托管的 Kubernetes 服务，大多数服务还提供了集成到他们基于 Web 的用户体验中的 Kubernetes 图形界面。公共云中的托管
    Kubernetes 还集成了复杂的监控工具，帮助您深入了解应用程序的运行情况。
- en: There are also several open source graphical interfaces for Kubernetes including
    [Rancher Dashboard](https://oreil.ly/mliob) and the [Headlamp project](https://oreil.ly/lDvbs).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 还有几个开源图形界面，包括 [Rancher Dashboard](https://oreil.ly/mliob) 和 [Headlamp
    项目](https://oreil.ly/lDvbs)。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: '`kubectl` is a powerful tool for managing your applications in your Kubernetes
    cluster. This chapter has illustrated many of the common uses for the tool, but
    `kubectl` has a great deal of built-in help available. You can start viewing this
    help with:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 是管理 Kubernetes 集群中应用程序的强大工具。本章展示了该工具的许多常见用法，但 `kubectl` 提供了大量的内置帮助。您可以从以下方式开始查看此帮助：'
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'or:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
