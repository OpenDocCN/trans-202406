- en: Chapter 6\. Transactions and Locking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using locks for transaction isolation is a pillar of SQL databases—but this
    is also an area that can cause a lot of confusion, especially for newcomers. Developers
    often think that locking is a database issue and belongs to the DBA realm. The
    DBAs, in turn, believe this is an application issue and consequently the responsibility
    of the developers. This chapter will clarify what happens in situations where
    different processes are trying to write in the same row at the same time. It will
    also shed light on the behavior of read queries inside a transaction with the
    different types of isolation levels available in MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s define the key concepts. A *transaction* is an operation performed
    (using one or more SQL statements) on a database as a single logical unit of work.
    All the SQL statements’ modifications in a transaction are either committed (applied
    to the database) or rolled back (undone from the database) as a unit, never only
    partially. A database transaction must be atomic, consistent, isolated, and durable
    (the famous acronym *ACID*).
  prefs: []
  type: TYPE_NORMAL
- en: '*Locks* are mechanisms used to ensure the integrity of the data stored in the
    database while applications and users are interacting with it. We will see that
    there are different types of lock, and some are more restrictive than others.'
  prefs: []
  type: TYPE_NORMAL
- en: Databases would not need transactions and locks if requests were issued serially
    and processed in order, one at a time (a `SELECT`, then an `INSERT`, then an `UPDATE`,
    and so on). We illustrate this behavior in [Figure 6-1](#FIG-SQL-PROGRESSION).
  prefs: []
  type: TYPE_NORMAL
- en: However, the reality (fortunately!) is that MySQL can handle thousands of requests
    per second and process them in parallel, rather than serially. This chapter discusses
    what MySQL does to achieve this parallelism, for example, when requests to `SELECT`
    and `UPDATE` in the same row arrive simultaneously, or one arrives while the other
    is still executing. [Figure 6-2](#FIG-SQL-PARALLEL-PROGRESSION) shows what this
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![lm2e 0601](Images/lm2e_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Serialized execution of SQL statements
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![lm2e 0602](Images/lm2e_0602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. Parallel execution of SQL statements
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For this chapter, we are particularly interested in how MySQL *isolates* the
    transactions (the *I* of ACID). We will show you common situations where locking
    occurs, investigate them, and discuss the MySQL parameters that control how much
    time a transaction can wait for a lock to be granted.
  prefs: []
  type: TYPE_NORMAL
- en: Isolation Levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *isolation level* is the setting that balances performance, reliability,
    consistency, and reproducibility of results when multiple transactions are making
    changes and performing queries simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: The SQL:1992 standard defines four classic isolation levels, and MySQL supports
    all of them. InnoDB supports each of the transaction isolation levels described
    here using different locking strategies. A user can also change the isolation
    level for a single session or all subsequent connections with the statement `SET
    [GLOBAL/SESSION] TRANSACTION`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can enforce a high degree of consistency with the default `REPEATABLE READ`
    isolation level for operations on data where ACID compliance is essential, and
    we can relax the consistency rules with `READ COMMITTED` or even `READ UNCOMMITTED`
    isolation in situations such as bulk reporting where precise consistency and repeatable
    results are less important than minimizing the amount of overhead for locking.
    `SERIALIZABLE` isolation enforces even stricter rules than `REPEATABLE READ` and
    is used mainly for special situations such as troubleshooting. Before diving into
    the details, let’s take a look at some more terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: Dirty reads
  prefs: []
  type: TYPE_NORMAL
- en: These occur when a transaction is able to read data from a row that has been
    modified by another transaction that has not executed a `COMMIT` yet. If the transaction
    that made the modifications gets rolled back, the other one will have seen incorrect
    results that do not reflect the state of the database. Data integrity is compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Non-repeatable reads
  prefs: []
  type: TYPE_NORMAL
- en: These occur when two queries in a transaction execute a `SELECT` and the values
    returned differ between the readings because of changes made by another transaction
    in the interim (if you read a row at time T1 and then try to read it again at
    time T2, the row may have been updated). The difference from a dirty read is that
    in this case there is a `COMMIT`. The initial `SELECT` query is not repeatable
    because it returns different values when issued the second time.
  prefs: []
  type: TYPE_NORMAL
- en: Phantom reads
  prefs: []
  type: TYPE_NORMAL
- en: These occur when a transaction is running, and another transaction adds rows
    to or deletes them from the records being read (again, in this case there is a
    `COMMIT` by the transaction modifying the data). This means that if the same query
    is executed again in the same transaction, it will return a different number of
    rows. Phantom reads can occur when there are no range locks guaranteeing the consistency
    of the data.
  prefs: []
  type: TYPE_NORMAL
- en: With those concepts in mind, let’s take a closer look at the different isolation
    levels in MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: REPEATABLE READ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`REPEATABLE READ` is the default isolation level for InnoDB. It ensures consistent
    reads within the same transaction—that is, that all queries within the transaction
    will see the same snapshot of the data, established by the first read. In this
    mode, InnoDB locks the index range scanned, using gap locks or next-key locks
    (described in [“Locking”](#LOCKING)) to block insertions by other sessions into
    any gaps within that range.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose that in one session (session 1), we execute the following
    `SELECT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And in another session (session 2), we update the name in the second row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can confirm the change in session 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'But session 1 still shows the old value from its original snapshot of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With the `REPEATABLE READ` isolation level, there are thus no dirty reads and
    or non-repeatable reads. Each transaction reads the snapshot established by the
    first read.
  prefs: []
  type: TYPE_NORMAL
- en: READ COMMITTED
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a curiosity, the `READ COMMITTED` isolation level is the default for many
    databases, like Postgres, Oracle, and SQL Server, but not MySQL. So, those who
    are migrating to MySQL must be aware of this difference in the default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main difference between `READ COMMITTED` and `REPEATABLE READ` is that
    with `READ COMMITTED` each consistent read, even within the same transaction,
    creates and reads its own fresh snapshot. This behavior can lead to *phantom reads*
    when executing multiple queries inside a transaction. Let’s take a look at an
    example. In session 1, row 1 looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now suppose that in session 2 we update the first row of the `person` table
    and commit the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we check session 1 again, we’ll see that the value of the first row has
    changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The significant advantage of `READ COMMITTED` is that there are no gap locks,
    allowing the free insertion of new records next to locked records.
  prefs: []
  type: TYPE_NORMAL
- en: READ UNCOMMITTED
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `READ UNCOMMITTED` isolation level MySQL performs `SELECT` statements
    in a non-locking fashion, which means two `SELECT` statements within the same
    transaction might not read the same version of a row. As we saw earlier, this
    phenomenon is called a dirty read. Consider how the previous example would play
    out using `READ UNCOMMITTED`. The main difference is that session 1 can see the
    results of session 2’s update *before* the commit. Let’s walk through another
    example. Suppose that in session 1 we execute the following `SELECT` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And in session 2, we perform this update *without* committing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now perform the `SELECT` again in session 1, here’s what we’ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can see that session 1 can read the modified data even though it is in a
    transient state, and this change may end up being rolled back and not committed.
  prefs: []
  type: TYPE_NORMAL
- en: SERIALIZABLE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most restricted isolation level available in MySQL is `SERIALIZABLE`. This
    is similar to `REPEATABLE READ`, but has an additional restriction of not allowing
    one transaction to interfere with another. So, with this locking mechanism, the
    inconsistent data scenario is no longer possible.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For applications using `SERIALIZABLE`, it is important to have a retry strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this clearer, imagine a finance database where we register customers’
    account balances in an `accounts` table. What will happen if two transactions
    try to update a customer’s account balance at the same time? The following example
    illustrates this scenario. Assume that we have started two sessions using the
    default isolation level, `REPEATABLE READ`, and explicitly opened a transaction
    in each with `BEGIN`. In session 1, we select all the accounts in the `accounts`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in session 2, we select all accounts with balance of at least 80 USD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in session 1, we subtract 10 USD from account 1 and check the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the balance of account 1 has decreased to 70 USD. So, we commit
    session 1 and then move to session 2 to see if it can read the new changes made
    by session 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This `SELECT` query still returns the old data for account 1, with a balance
    of 80 USD, even though transaction 1 changed it to 70 USD and was committed successfully.
    That’s because the `REPEATABLE READ` isolation level ensures that all read queries
    in a transaction are repeatable, which means they always return the same result,
    even if changes have been made by other committed transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what will happen if we also run the `UPDATE` query to subtract 10 USD from
    account 1’s balance in session 2? Will it change the balance to 70 USD, or 60
    USD, or throw an error? Let’s see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: There’s no error, and the account balance is now 60 USD, which is the correct
    value because transaction 1 has already committed the change that modified the
    balance to 70 USD.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, from transaction 2’s point of view, this doesn’t make sense: in the
    last `SELECT` query it saw a balance of 80 USD, but after subtracting 10 USD from
    the account, now it sees a balance of 60 USD. The math doesn’t work here because
    this transaction is still being affected by concurrent updates from other transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the scenario where using `SERIALIZABLE` can help. Let’s rewind to before
    we made any changes. This time we’ll explicitly set the isolation level of both
    sessions to `SERIALIZABLE` with `SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE`
    before starting the transactions with `BEGIN`. Again, in session 1 we select all
    the accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'And in session 2 we select all the accounts with a balance greater than 80
    USD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in session 1 we subtract 10 USD from account 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And…nothing happens. This time the `UPDATE` query is blocked—the `SELECT` query
    in session 1 has locked those rows and prevents the `UPDATE` in session 2 from
    succeeding. Because we explicitly started our transactions with `BEGIN` (which
    has the same effect as disabling autocommit), InnoDB implicitly converts all plain
    `SELECT` statements in each transaction to `SELECT ... FOR SHARE`. It does not
    know ahead of time if the transaction will perform only reads or will modify rows,
    so InnoDB needs to place a lock on it to avoid the issue we demonstrated in the
    previous example. In this example, if autocommit were enabled, the `SELECT` query
    in session 2 would not block the update that we are trying to perform in session
    1: MySQL would recognize that the query is a plain `SELECT` and does not need
    to block other queries because it is not going to modify any rows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the update in session 2 will not hang forever; this lock has a timeout
    duration that is controlled by the [`innodb_lock_wait_timeout` parameter](https://oreil.ly/rfrv0).
    So, if session 1 doesn’t commit or roll back its transaction to release the lock,
    once the session timeout is reached, MySQL will throw the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Locking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve seen how each isolation level works, let’s look at the different
    locking strategies InnoDB employs to implement them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locks are used in databases to protect shared resources or objects. They can
    act at different levels, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Table locking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata locking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Row locking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application-level locking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL uses metadata locking to manage concurrent access to database objects
    and to ensure data consistency. When there is an active transaction (explicit
    or implicit) on the table, MySQL does not allow writing of metadata (DDL statements,
    for example, update the metadata of the table). It does this to maintain metadata
    consistency in a concurrent environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is an active transaction (running, uncommitted, or rolled back) when
    a session performs one of the operations mentioned in the following list, the
    session requesting the data write will be held in the `Waiting for table metadata
    lock` status. A metadata lock wait may occur in any of the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: When you create or delete an index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you modify the table structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you perform table maintenance operations (`OPTIMIZE TABLE` `REPAIR TABLE`,
    etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you delete a table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you try to obtain a table-level write lock on the table (`LOCK TABLE table_name
    WRITE`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable simultaneous write access by multiple sessions, InnoDB supports row-level
    locking.
  prefs: []
  type: TYPE_NORMAL
- en: Application-level or user-level locks, such as those provided by `GET_LOCK()`,
    can be used to simulate database locks such as record locks.
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on metadata and the row locks since they are the ones that
    affect the majority of users and are the most common.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata Locks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [MySQL documentation](https://oreil.ly/zjDjG) provides the best definition
    of metadata locks:'
  prefs: []
  type: TYPE_NORMAL
- en: To ensure transaction serializability, the server must not permit one session
    to perform a data definition language (DDL) statement on a table that is used
    in an uncompleted explicitly or implicitly started transaction in another session.
    The server achieves this by acquiring metadata locks on tables used within a transaction
    and deferring the locks’ release until the transaction ends. A metadata lock on
    a table prevents changes to the table’s structure. This locking approach has the
    implication that a table that is being used by a transaction within one session
    cannot be used in DDL statements by other sessions until the transaction ends.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'With this definition in mind, let’s take a look at metadata locking in action.
    First, we will create a dummy table and load some rows into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44];`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE` `TABLE` `` `joinit` `` `(`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `i` `` `int``(``11``)` `NOT` `NULL` `AUTO_INCREMENT``,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `s` `` `varchar``(``64``)` `DEFAULT` `NULL``,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `t` `` `time` `NOT` `NULL``,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `g` `` `int``(``11``)` `NOT` `NULL``,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PRIMARY` `KEY` `([PRE45])`'
  prefs: []
  type: TYPE_NORMAL
- en: '`)` `ENGINE``=``InnoDB`  `DEFAULT` `CHARSET``=``latin1``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `VALUES` `(``NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RAND``(` `)` `*``60` `)``)``)``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` `INTO` `joinit` `SELECT` `NULL``,` `uuid``(``)``,` `time``(``now``(``)``)``,`  `(``FLOOR``(`
    `1` `+` `RAND``(` `)` `*``60` `)``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM` `joinit``;`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: session1> `UPDATE` `joinit` `SET` `t``=``now``(``)``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: session2> `ALTER` `TABLE` `joinit` `ADD` `COLUMN` `b` `INT``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: session3> `SHOW` `PROCESSLIST``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: +----+----------+-----------+------+---------+------+...
  prefs: []
  type: TYPE_NORMAL
- en: '| Id | User     | Host      | db   | Command | Time |...'
  prefs: []
  type: TYPE_NORMAL
- en: +----+----------+-----------+------+---------+------+...
  prefs: []
  type: TYPE_NORMAL
- en: '| 10 | msandbox | localhost | test | Query   |    3 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| 11 | msandbox | localhost | test | Query   |    1 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| 12 | msandbox | localhost | NULL | Query   |    0 |...'
  prefs: []
  type: TYPE_NORMAL
- en: +----+----------+-----------+------+---------+------+...
  prefs: []
  type: TYPE_NORMAL
- en: '...+---------------------------------+-------------------------------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| State                           | Info                                |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+---------------------------------+-------------------------------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| updating                        | UPDATE joinit SET t=now()           |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| Waiting for table metadata lock | ALTER TABLE joinit ADD COLUMN b INT
    |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| starting                        | SHOW PROCESSLIST                    |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+---------------------------------+-------------------------------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-----------+---------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '...| Rows_sent | Rows_examined |'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-----------+---------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '...|         0 |        179987 |'
  prefs: []
  type: TYPE_NORMAL
- en: '...|         0 |             0 |'
  prefs: []
  type: TYPE_NORMAL
- en: '...|         0 |             0 |'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-----------+---------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: mysql > `SET` `SESSION` `autocommit``=``0``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 0 rows affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: mysql > `UPDATE` `joinit` `SET` `t``=``NOW``(``)` `LIMIT` `1``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 1 row affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: mysql > `ALTER` `TABLE` `joinit` `ADD` `COLUMN` `b` `INT``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: mysql > `SHOW` `PROCESSLIST``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `UPDATE` `performance_schema``.``setup_instruments` `SET` `enabled` `=`
    `'YES'`
  prefs: []
  type: TYPE_NORMAL
- en: -> `WHERE` `NAME` `=` `'wait/lock/metadata/sql/mdl'``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 0 rows affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1 Changed: 0 Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `*`  `FROM` `sys``.``schema_table_lock_waits``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `object_name``,` `waiting_thread_id``,` `waiting_lock_type``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `waiting_query``,` `sql_kill_blocking_query``,` `blocking_thread_id`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `FROM` `sys``.``schema_table_lock_waits``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: +-------------+-------------------+-------------------+...
  prefs: []
  type: TYPE_NORMAL
- en: '| object_name | waiting_thread_id | waiting_lock_type |...'
  prefs: []
  type: TYPE_NORMAL
- en: +-------------+-------------------+-------------------+...
  prefs: []
  type: TYPE_NORMAL
- en: '| joinit      |                29 | EXCLUSIVE         |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| joinit      |                29 | EXCLUSIVE         |...'
  prefs: []
  type: TYPE_NORMAL
- en: +-------------+-------------------+-------------------+...
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------------------------------------------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| waiting_query                                                     |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------------------------------------------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| ALTER TABLE joinit ADD COLUMN  ...  CHAR(32) DEFAULT ''dummy_text'' |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| ALTER TABLE joinit ADD COLUMN  ...  CHAR(32) DEFAULT ''dummy_text'' |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...|-------------------------------------------------------------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '...+-------------------------+--------------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '...| sql_kill_blocking_query | blocking_thread_id |'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------+--------------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '...| KILL QUERY 3            |                 29 |'
  prefs: []
  type: TYPE_NORMAL
- en: '...| KILL QUERY 5            |                 31 |'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------+--------------------+'
  prefs: []
  type: TYPE_NORMAL
- en: 2 rows in set (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: git clone https://github.com/mysql/mysql-sys.git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: cd mysql-sys/
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: mysql -u root -p < ./sys_56.sql
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `*` `FROM` `performance_schema``.``metadata_locks``\``G`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '*************************** 1\. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'OBJECT_TYPE: GLOBAL'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OBJECT_SCHEMA: NULL'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OBJECT_NAME: NULL'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OBJECT_INSTANCE_BEGIN: 140089691017472'
  prefs: []
  type: TYPE_NORMAL
- en: 'LOCK_TYPE: INTENTION_EXCLUSIVE'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'LOCK_DURATION: STATEMENT'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'LOCK_STATUS: GRANTED'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'SOURCE:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OWNER_THREAD_ID: 97'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OWNER_EVENT_ID: 34'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 6\. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'OBJECT_TYPE: TABLE'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OBJECT_SCHEMA: performance_schema'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OBJECT_NAME: metadata_locks'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OBJECT_INSTANCE_BEGIN: 140089640911984'
  prefs: []
  type: TYPE_NORMAL
- en: 'LOCK_TYPE: SHARED_READ'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'LOCK_DURATION: TRANSACTION'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'LOCK_STATUS: GRANTED'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'SOURCE:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OWNER_THREAD_ID: 98'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OWNER_EVENT_ID: 10'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 6 rows in set (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `object_type``,` `object_schema``,` `object_name``,` `lock_type``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `lock_status``,` `thread_id``,` `processlist_id``,` `processlist_info` `FROM`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `performance_schema``.``metadata_locks` `INNER` `JOIN` `performance_schema``.``threads`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `ON` `thread_id` `=` `owner_thread_id` `WHERE` `processlist_id` `<``>` `connection_id``(``)``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: +-------------+---------------+-------------+---------------------+...
  prefs: []
  type: TYPE_NORMAL
- en: '| OBJECT_TYPE | OBJECT_SCHEMA | OBJECT_NAME | LOCK_TYPE           |...'
  prefs: []
  type: TYPE_NORMAL
- en: +-------------+---------------+-------------+---------------------+...
  prefs: []
  type: TYPE_NORMAL
- en: '| GLOBAL      | NULL          | NULL        | INTENTION_EXCLUSIVE |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| SCHEMA      | test          | NULL        | INTENTION_EXCLUSIVE |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| TABLE       | test          | joinit      | SHARED_UPGRADABLE   |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| BACKUP      | NULL          | NULL        | INTENTION_EXCLUSIVE |...'
  prefs: []
  type: TYPE_NORMAL
- en: '| TABLE       | test          | joinit      | EXCLUSIVE           |...'
  prefs: []
  type: TYPE_NORMAL
- en: +-------------+---------------+-------------+---------------------+...
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------+-----------+----------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| LOCK_STATUS | THREAD_ID | PROCESSLIST_ID |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------+-----------+----------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| GRANTED     |        97 |             71 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| GRANTED     |        97 |             71 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| GRANTED     |        97 |             71 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| GRANTED     |        97 |             71 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...| PENDING     |        97 |             71 |...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------+-----------+----------------+...'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '...| PROCESSLIST_INFO                    |'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------------------+'
  prefs: []
  type: TYPE_NORMAL
- en: '...| alter table joinit add column b int |'
  prefs: []
  type: TYPE_NORMAL
- en: '...| alter table joinit add column b int |'
  prefs: []
  type: TYPE_NORMAL
- en: '...| alter table joinit add column b int |'
  prefs: []
  type: TYPE_NORMAL
- en: '...| alter table joinit add column b int |'
  prefs: []
  type: TYPE_NORMAL
- en: '...| alter table joinit add column b int |'
  prefs: []
  type: TYPE_NORMAL
- en: '...+-------------------------------------+'
  prefs: []
  type: TYPE_NORMAL
- en: 5 rows in set (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SET` `lock_wait_timeout` `=` `3``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql> `CREATE` `INDEX` `idx_1` `ON` `example` `(``col1``)``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ `pt``-``kill` `-``-``busy``-``time` `60` `-``-``kill`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `*` `FROM` `PERSON``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: +----+-----------+
  prefs: []
  type: TYPE_NORMAL
- en: '| i  | name      |'
  prefs: []
  type: TYPE_TB
- en: +----+-----------+
  prefs: []
  type: TYPE_NORMAL
- en: '|  1 | Vinicius  |'
  prefs: []
  type: TYPE_TB
- en: '|  2 | Kuzmichev |'
  prefs: []
  type: TYPE_TB
- en: '|  3 | Iwo       |'
  prefs: []
  type: TYPE_TB
- en: '|  4 | Peter     |'
  prefs: []
  type: TYPE_TB
- en: '|  5 | Marcelo   |'
  prefs: []
  type: TYPE_TB
- en: '|  6 | Guli      |'
  prefs: []
  type: TYPE_TB
- en: '|  7 | Nando     |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Jobin     |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | Rafa      |'
  prefs: []
  type: TYPE_TB
- en: '| 18 | Leo       |'
  prefs: []
  type: TYPE_TB
- en: +----+-----------+
  prefs: []
  type: TYPE_NORMAL
- en: 10 rows in set (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: session1> `DELETE` `FROM` `person` `WHERE` `name` `LIKE` `'Jobin'``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 1 row affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: session2> `SELECT` `*` `FROM` `person``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: +----+-----------+
  prefs: []
  type: TYPE_NORMAL
- en: '| i  | name      |'
  prefs: []
  type: TYPE_TB
- en: +----+-----------+
  prefs: []
  type: TYPE_NORMAL
- en: '|  1 | Vinicius  |'
  prefs: []
  type: TYPE_TB
- en: '|  2 | Kuzmichev |'
  prefs: []
  type: TYPE_TB
- en: '|  3 | Iwo       |'
  prefs: []
  type: TYPE_TB
- en: '|  4 | Peter     |'
  prefs: []
  type: TYPE_TB
- en: '|  5 | Marcelo   |'
  prefs: []
  type: TYPE_TB
- en: '|  6 | Guli      |'
  prefs: []
  type: TYPE_TB
- en: '|  7 | Nando     |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Jobin     |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | Rafa      |'
  prefs: []
  type: TYPE_TB
- en: '| 18 | Leo       |'
  prefs: []
  type: TYPE_TB
- en: +----+-----------+
  prefs: []
  type: TYPE_NORMAL
- en: 10 rows in set (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: transaction2 > `INSERT` `INTO` `person` `VALUES` `(``11``,` `'Bennie'``)``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'ERROR 1205 (HY000): Lockwait timeout exceeded; try restarting transaction'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '------- TRX HAS BEEN WAITING 17 SEC FOR THIS LOCK TO BE GRANTED:'
  prefs: []
  type: TYPE_NORMAL
- en: RECORD LOCKS space id 28 page no 3 n bits 80 index PRIMARY of table
  prefs: []
  type: TYPE_NORMAL
- en: '`test`.`person` trx id 4773 lock_mode X locks gap before rec insert'
  prefs: []
  type: TYPE_NORMAL
- en: intention waiting
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `CREATE` `UNIQUE` `INDEX` `idx` `ON` `PERSON` `(``name``)``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 0 rows affected (0.01 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Records: 0  Duplicates: 0  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `DELETE` `FROM` `person` `WHERE` `name` `LIKE` `'Jobin'``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 1 row affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `*` `FROM` `city` `WHERE` `CountryCode` `=` `'ITA'` `AND` `District``=``'Toscana'``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: +------+---------+-------------+----------+------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| ID   | Name    | CountryCode | District | Population |'
  prefs: []
  type: TYPE_TB
- en: +------+---------+-------------+----------+------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| 1471 | Firenze | ITA         | Toscana  |     376662 |'
  prefs: []
  type: TYPE_TB
- en: '| 1483 | Prato   | ITA         | Toscana  |     172473 |'
  prefs: []
  type: TYPE_TB
- en: '| 1486 | Livorno | ITA         | Toscana  |     161673 |'
  prefs: []
  type: TYPE_TB
- en: '| 1516 | Pisa    | ITA         | Toscana  |      92379 |'
  prefs: []
  type: TYPE_TB
- en: '| 1518 | Arezzo  | ITA         | Toscana  |      91729 |'
  prefs: []
  type: TYPE_TB
- en: +------+---------+-------------+----------+------------+
  prefs: []
  type: TYPE_NORMAL
- en: 5 rows in set (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: session1> `UPDATE` `city` `SET` `Population``=``Population` `+` `1` `WHERE`
    `ID` `=` `1471``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 1 row affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: session2> `UPDATE` `city` `SET` `Population``=``Population` `+` `1` `WHERE`
    `ID` `=``1516``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 1 row affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: session1> `UPDATE` `city` `SET` `Population``=``Population` `+` `1` `WHERE`
    `ID` `=``1516``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting
    transaction'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: session2> `UPDATE` `city` `SET` `Population``=``Population` `+` `1` `WHERE`
    `ID` `=` `1471``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 1 row affected (5.15 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SHOW` `ENGINE` `INNODB` `STATUS``\``G`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: LATEST DETECTED DEADLOCK
  prefs: []
  type: TYPE_NORMAL
- en: '------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: 2020-12-05 16:08:19 0x7f6949359700
  prefs: []
  type: TYPE_NORMAL
- en: '*** (1) TRANSACTION:'
  prefs: []
  type: TYPE_NORMAL
- en: TRANSACTION 10502342, ACTIVE 34 sec starting index read
  prefs: []
  type: TYPE_NORMAL
- en: mysql tables in use 1, locked 1
  prefs: []
  type: TYPE_NORMAL
- en: LOCK WAIT 3 lock struct(s), heap size 1136, 2 row lock(s), undo log
  prefs: []
  type: TYPE_NORMAL
- en: entries 1
  prefs: []
  type: TYPE_NORMAL
- en: MySQL thread id 71, OS thread handle 140090386671360, query id 5979282
  prefs: []
  type: TYPE_NORMAL
- en: localhost msandbox updating
  prefs: []
  type: TYPE_NORMAL
- en: update city set Population=Population + 1 where ID = 1471
  prefs: []
  type: TYPE_NORMAL
- en: '*** (1) WAITING FOR THIS LOCK TO BE GRANTED:'
  prefs: []
  type: TYPE_NORMAL
- en: RECORD LOCKS space id 6041 page no 15 n bits 248 index PRIMARY of table
  prefs: []
  type: TYPE_NORMAL
- en: '`world`.`city` trx id 10502342 lock_mode X locks rec but not gap waiting'
  prefs: []
  type: TYPE_NORMAL
- en: '*** (2) TRANSACTION:'
  prefs: []
  type: TYPE_NORMAL
- en: TRANSACTION 10502341, ACTIVE 62 sec starting index read
  prefs: []
  type: TYPE_NORMAL
- en: mysql tables in use 1, locked 1
  prefs: []
  type: TYPE_NORMAL
- en: 3 lock struct(s), heap size 1136, 2 row lock(s), undo log entries 1
  prefs: []
  type: TYPE_NORMAL
- en: MySQL thread id 75, OS thread handle 140090176542464, query id 5979283
  prefs: []
  type: TYPE_NORMAL
- en: localhost msandbox updating
  prefs: []
  type: TYPE_NORMAL
- en: update city set Population=Population + 1 where ID =1516
  prefs: []
  type: TYPE_NORMAL
- en: '*** (2) HOLDS THE LOCK(S):'
  prefs: []
  type: TYPE_NORMAL
- en: RECORD LOCKS space id 6041 page no 15 n bits 248 index PRIMARY of table
  prefs: []
  type: TYPE_NORMAL
- en: '`world`.`city` trx id 10502341 lock_mode X locks rec but not gap'
  prefs: []
  type: TYPE_NORMAL
- en: '*** (2) WAITING FOR THIS LOCK TO BE GRANTED:'
  prefs: []
  type: TYPE_NORMAL
- en: RECORD LOCKS space id 6041 page no 16 n bits 248 index PRIMARY of table
  prefs: []
  type: TYPE_NORMAL
- en: '`world`.`city` trx id 10502341 lock_mode X locks rec but not gap waiting'
  prefs: []
  type: TYPE_NORMAL
- en: '*** WE ROLL BACK TRANSACTION (2)'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SET` `SESSION` `transaction_isolation``=``'READ-COMMITTED'``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Query OK, 0 rows affected (0.00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SHOW` `SESSION` `VARIABLES` `LIKE` `'%isol%'``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: +-----------------------+----------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| Variable_name         | Value          |'
  prefs: []
  type: TYPE_TB
- en: +-----------------------+----------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| transaction_isolation | READ-COMMITTED |'
  prefs: []
  type: TYPE_TB
- en: '| tx_isolation          | READ-COMMITTED |'
  prefs: []
  type: TYPE_TB
- en: +-----------------------+----------------+
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SET` `GLOBAL` `innodb_print_all_deadlocks` `=` `1``;`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SET` `SESSION` `lock_wait_timeout``=``1``;`
  prefs: []
  type: TYPE_NORMAL
- en: mysql> `CREATE` `TABLE` `t1``(``i` `INT` `NOT` `NULL` `AUTO_INCREMENT` `PRIMARY`
    `KEY``)`
  prefs: []
  type: TYPE_NORMAL
- en: -> `ENGINE``=``InnoDB``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '`innodb_deadlock_detect`'
  prefs: []
  type: TYPE_NORMAL
- en: Disables deadlock monitoring. Note that this only means that MySQL will not
    kill a query to undo the deadlock knot. Disabling deadlock detection will *not*
    prevent deadlocks from happening, but it will make MySQL rely on the `innodb_lock_wait_timeout`
    setting for transaction rollback when a deadlock occurs.
  prefs: []
  type: TYPE_NORMAL
