- en: Chapter 15\. Extending Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章 扩展 Kubernetes
- en: Now that you’ve seen how to install, interact with, and use Kubernetes to deploy
    and manage applications, we focus in this chapter on adapting Kubernetes to your
    needs. For the recipes in this chapter, you will need [Go](https://go.dev) installed
    and access to the Kubernetes source code hosted on [GitHub](https://github.com/kubernetes/kubernetes).
    We show how to compile Kubernetes as a whole, and how to compile specific components
    like the client `kubectl`. We also demonstrate how to use Python to talk to the
    Kubernetes API server and show how to extend Kubernetes with a custom resource
    definition.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了如何安装、交互和使用 Kubernetes 来部署和管理应用程序，本章节我们将重点放在如何将 Kubernetes 调整为符合你需求的地方。在本章的示例中，你需要安装
    [Go](https://go.dev) 并且可以访问托管在 [GitHub](https://github.com/kubernetes/kubernetes)
    上的 Kubernetes 源代码。我们展示如何编译整个 Kubernetes，以及如何编译像客户端 `kubectl` 这样的特定组件。我们还演示了如何使用
    Python 与 Kubernetes API 服务器通信，并展示了如何通过自定义资源定义来扩展 Kubernetes。
- en: 15.1 Compiling from Source
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.1 编译源码
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to build your own Kubernetes binaries from source instead of downloading
    the official release binaries (see [Recipe 2.9](ch02.html#get_binaries)) or third-party
    artifacts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要从源码构建自己的 Kubernetes 二进制文件，而不是下载官方发布的二进制文件（参见 [Recipe 2.9](ch02.html#get_binaries)）或第三方构件。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Clone the Kubernetes Git repository and build from source.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆 Kubernetes Git 仓库并从源码构建。
- en: 'If your development machine has Docker Engine installed, you can use the `quick-release`
    target of the root *Makefile*, as shown here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的开发机器已经安装了 Docker Engine，你可以使用根目录 *Makefile* 的 `quick-release` 目标，如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This Docker-based build requires at least 8 GB of RAM to complete. Ensure that
    your Docker daemon has access to that much memory. On macOS, access the Docker
    for Mac preferences and increase the allocated RAM.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基于 Docker 的构建需要至少 8 GB 的 RAM 才能完成。确保你的 Docker 守护进程可以访问到足够的内存。在 macOS 上，访问
    Docker for Mac 首选项并增加分配的 RAM。
- en: The binaries will be located in the *_output/release-stage* directory, and a
    complete bundle will be in the *_output/release-tars* directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制文件将位于 *_output/release-stage* 目录中，完整的捆绑包将位于 *_output/release-tars* 目录中。
- en: 'Alternatively, if you have a [Golang](https://go.dev/doc/install) environment
    properly set up, use the `release` target of the root *Makefile*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你已经正确设置了 [Golang](https://go.dev/doc/install) 环境，可以使用根目录 *Makefile* 的 `release`
    目标：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The binaries will be located in the *_output/bin* directory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制文件将位于 *_output/bin* 目录中。
- en: See Also
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The Kubernetes [developer guides](https://oreil.ly/6CSWo)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的 [开发指南](https://oreil.ly/6CSWo)
- en: 15.2 Compiling a Specific Component
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2 编译特定组件
- en: Problem
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to build one specific component of Kubernetes from source. For example,
    you only want to build the client `kubectl`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要从源码中构建 Kubernetes 的某个特定组件。例如，你只想要构建客户端 `kubectl`。
- en: Solution
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Instead of using `make quick-release` or simply `make`, as shown in [Recipe
    15.1](#compiling_source), use `make kubectl`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用 `make quick-release` 或简单地使用 `make`，如 [Recipe 15.1](#compiling_source)
    中所示，使用 `make kubectl`。
- en: 'There are targets in the root *Makefile* to build individual components. For
    example, to compile `kubectl`, `kubeadm`, and `kubelet`, do this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录的 *Makefile* 中有目标可以构建各个单独的组件。例如，要编译 `kubectl`、`kubeadm` 和 `kubelet`，请执行以下操作：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The binaries will be located in the *_output/bin* directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制文件将位于 *_output/bin* 目录中。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: To get the complete list of *Makefile* build targets, run `make help`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 *Makefile* 的完整构建目标列表，请运行 `make help`。
- en: 15.3 Using a Python Client to Interact with the Kubernetes API
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.3 使用 Python 客户端与 Kubernetes API 交互
- en: Problem
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: As a developer, you want to use Python to write scripts that use the Kubernetes
    API.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你想要使用 Python 编写脚本来使用 Kubernetes API。
- en: Solution
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Install the Python `kubernetes` module. This [module](https://oreil.ly/OolLt)
    is the official Python client library for Kubernetes. You can install the module
    from source or from the [Python Package Index (PyPi) site](https://pypi.org):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python 的 `kubernetes` 模块。这个 [模块](https://oreil.ly/OolLt) 是 Kubernetes 的官方
    Python 客户端库。你可以从源码或者 [Python Package Index (PyPi) 网站](https://pypi.org) 安装这个模块：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With a Kubernetes cluster reachable using your default `kubectl` context, you
    are now ready to use this Python module to talk to the Kubernetes API. For example,
    the following Python script lists all the pods and prints their names:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的 `kubectl` 上下文可以访问 Kubernetes 集群后，你现在可以准备使用这个 Python 模块与 Kubernetes API
    交互了。例如，下面的 Python 脚本列出所有的 Pod 并打印它们的名称：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `config.load_kube_config()` call in this script will load your Kubernetes
    credentials and endpoint from your `kubectl` config file. By default, it will
    load the cluster endpoint and credentials for your current context.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python client is built using the OpenAPI specification of the Kubernetes
    API. It is up to date and autogenerated. All APIs are available through this client.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Each API group corresponds to a specific class, so to call a method on an API
    object that is part of the `/api/v1` API group, you need to instantiate the `CoreV1Api`
    class. To use deployments, you will need to instantiate the `extensionsV1beta1Api`
    class. All methods and corresponding API group instances can be found in the autogenerated
    [*README*](https://oreil.ly/ITREP).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Examples in the project’s repository](https://oreil.ly/6rw3l)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.4 Extending the API Using Custom Resource Definitions
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have a custom workload and none of the existing resources, such as `Deployment`,
    `Job`, or `StatefulSet`, is a good fit. So, you want to extend the Kubernetes
    API with a new resource that represents your workload while continuing to use
    `kubectl` in the usual way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a [custom resource definition (CRD)](https://oreil.ly/d2MmH).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you want to define a custom resource of kind `Function`. This represents
    a short-running `Job`-like kind of resource, akin to what AWS Lambda offers, that
    is a function as a service (FaaS, or sometimes misleadingly called a “serverless
    function”).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For a production-ready FaaS solution running on Kubernetes, see [Chapter 14](ch14.html#ch_serverless).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'First, define the CRD in a manifest file called *functions-crd.yaml*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then let the API server know about your new CRD (it can take several minutes
    to register):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that you have the custom resource `Function` defined and the API server
    knows about it, you can instantiate it using a manifest called *myfaas.yaml* with
    the following contents:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And create the `myfaas` resource of kind `Function` as per usual:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To discover CRDs, simply access the API server. For example, using `kubectl
    proxy`, you can access the API server locally and query the key space (`example.com/v1`
    in our case):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here you can see the resource along with the allowed verbs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to get rid of your custom resource instance, simply delete it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you’ve seen, it is straightforward to create a CRD. From an end user’s point
    of view, CRDs present a consistent API and are more or less indistinguishable
    from native resources such as pods or jobs. All the usual commands, such as `kubectl
    get` and `kubectl delete`, work as expected.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CRD is, however, really less than half of the work necessary to fully
    extend the Kubernetes API. On their own, CRDs only let you store and retrieve
    custom data via the API server in etcd. You need to also write a [custom controller](https://oreil.ly/kYmqw)
    that interprets the custom data expressing the user’s intent, establishes a control
    loop comparing the current state with the declared state, and tries to reconcile
    both.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 CRD 实际上只是完全扩展 Kubernetes API 所需工作的不到一半。单独来看，CRD 只允许您通过 etcd 中的 API 服务器存储和检索自定义数据。您还需要编写一个[自定义控制器](https://oreil.ly/kYmqw)，该控制器解释用户意图表达的自定义数据，建立一个控制循环，比较当前状态与声明状态，并尝试协调两者。
- en: See Also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Extend the Kubernetes API with `CustomResourceDefinitions`"](https://oreil.ly/mz2bH)
    in the Kubernetes documentation'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 文档中的["使用 `CustomResourceDefinitions` 扩展 Kubernetes API"](https://oreil.ly/mz2bH)
- en: '[“Custom Resources”](https://oreil.ly/gp0xn) in the Kubernetes documentation'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 文档中的["自定义资源"](https://oreil.ly/gp0xn)
