["```\n{\"greeting\" : \"Hello, world!\"}\n```", "```\n{\"greeting\" : \"Hello, world!\", \"views\" : 3}\n```", "```\n{\"count\" : 5}\n{\"count\" : \"5\"}\n```", "```\n{\"count\" : 5}\n{\"Count\" : 5}\n```", "```\n{\"greeting\" : \"Hello, world!\", \"greeting\" : \"Hello, MongoDB!\"}\n```", "```\n{\"greeting\" : \"Hello, world!\", \"views\": 3}\n{\"signoff\": \"Good night, and good luck\"}\n```", "```\n$ mongod\n2016-04-27T22:15:55.871-0400 I CONTROL  [initandlisten] MongoDB starting : \npid=8680 port=27017 dbpath=/data/db 64-bit host=morty\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten] db version v4.2.0\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten] git version:\n34e65e5383f7ea1726332cb175b73077ec4a1b02\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten] allocator: system\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten] modules: none\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten] build environment:\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten]     distarch: x86_64\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-04-27T22:15:55.872-0400 I CONTROL  [initandlisten] options: {}\n2016-04-27T22:15:55.889-0400 I JOURNAL  [initandlisten] \njournal dir=/data/db/journal\n2016-04-27T22:15:55.889-0400 I JOURNAL  [initandlisten] recover : \nno journal files\npresent, no recovery needed\n2016-04-27T22:15:55.909-0400 I JOURNAL  [durability] Durability thread started\n2016-04-27T22:15:55.909-0400 I JOURNAL  [journal writer] Journal writer thread \nstarted\n2016-04-27T22:15:55.909-0400 I CONTROL  [initandlisten]\n2016-04-27T22:15:56.777-0400 I NETWORK  [HostnameCanonicalizationWorker] \nStarting hostname canonicalization worker\n2016-04-27T22:15:56.778-0400 I FTDC     [initandlisten] Initializing full-time \ndiagnostic data capture with directory '/data/db/diagnostic.data'\n2016-04-27T22:15:56.779-0400 I NETWORK  [initandlisten] waiting for connections \non port 27017\n```", "```\n> mongod.exe\n```", "```\n$ mongo\nMongoDB shell version: 4.2.0\nconnecting to: test\n>\n```", "```\n> x = 200;\n200\n> x / 5;\n40\n```", "```\n> Math.sin(Math.PI / 2);\n1\n> new Date(\"20109/1/1\");\nISODate(\"2019-01-01T05:00:00Z\")\n> \"Hello, World!\".replace(\"World\", \"MongoDB\");\nHello, MongoDB!\n```", "```\n> function factorial (n) {\n... if (n <= 1) return 1;\n... return n * factorial(n - 1);\n... }\n> factorial(5);\n120\n```", "```\n> db\ntest\n```", "```\n> use video\nswitched to db video\n```", "```\n> db\nvideo\n```", "```\n> db.movies\n```", "```\n> movie = {\"title\" : \"Star Wars: Episode IV - A New Hope\",\n... \"director\" : \"George Lucas\",\n... \"year\" : 1977}\n{\n\t\"title\" : \"Star Wars: Episode IV - A New Hope\",\n\t\"director\" : \"George Lucas\",\n\t\"year\" : 1977\n}\n```", "```\n> db.movies.insertOne(movie)\n{\n\t\"acknowledged\" : true,\n\t\"insertedId\" : ObjectId(\"5721794b349c32b32a012b11\")\n}\n```", "```\n> db.movies.find().pretty()\n{\n\t\"_id\" : ObjectId(\"5721794b349c32b32a012b11\"),\n\t\"title\" : \"Star Wars: Episode IV - A New Hope\",\n\t\"director\" : \"George Lucas\",\n\t\"year\" : 1977\n}\n```", "```\n> db.movies.findOne()\n{\n\t\"_id\" : ObjectId(\"5721794b349c32b32a012b11\"),\n\t\"title\" : \"Star Wars: Episode IV - A New Hope\",\n\t\"director\" : \"George Lucas\",\n\t\"year\" : 1977\n}\n```", "```\n> db.movies.updateOne({title : \"Star Wars: Episode IV - A New Hope\"},\n... {$set : {reviews: []}})\nWriteResult({\"nMatched\": 1, \"nUpserted\": 0, \"nModified\": 1})\n```", "```\n> db.movies.find().pretty()\n{\n\t\"_id\" : ObjectId(\"5721794b349c32b32a012b11\"),\n\t\"title\" : \"Star Wars: Episode IV - A New Hope\",\n\t\"director\" : \"George Lucas\",\n\t\"year\" : 1977,\n\t\"reviews\" : [ ]\n}\n```", "```\n> db.movies.deleteOne({title : \"Star Wars: Episode IV - A New Hope\"})\n```", "```\n{\"x\" : null}\n```", "```\n{\"x\" : true}\n```", "```\n{\"x\" : 3.14}\n```", "```\n{\"x\" : 3}\n```", "```\n{\"x\" : NumberInt(\"3\")}\n{\"x\" : NumberLong(\"3\")}\n```", "```\n{\"x\" : \"foobar\"}\n```", "```\n{\"x\" : new Date()}\n```", "```\n{\"x\" : /foobar/i}\n```", "```\n{\"x\" : [\"a\", \"b\", \"c\"]}\n```", "```\n{\"x\" : {\"foo\" : \"bar\"}}\n```", "```\n{\"x\" : ObjectId()}\n```", "```\n{\"x\" : function() { /* ... */ }}\n```", "```\n{\"things\" : [\"pie\", 3.14]}\n```", "```\n{\n    \"name\" : \"John Doe\",\n    \"address\" : {\n        \"street\" : \"123 Park Street\",\n        \"city\" : \"Anytown\",\n        \"state\" : \"NY\"\n    }\n}\n```", "```\n$ mongo some-host:30000/myDB\nMongoDB shell version: 4.2.0\nconnecting to: some-host:30000/myDB\n>\n```", "```\n$ mongo --nodb\nMongoDB shell version: 4.2.0\n>\n```", "```\n> conn = new Mongo(\"some-host:30000\")\nconnection to some-host:30000\n> db = conn.getDB(\"myDB\")\nmyDB\n```", "```\n> help\n    db.help()                    help on db methods\n    db.mycoll.help()             help on collection methods\n    sh.help()                    sharding helpers\n    ...\n\n    show dbs                     show database names\n    show collections             show collections in current database\n    show users                   show users in current database\n    ...\n```", "```\n> db.movies.updateOne\nfunction (filter, update, options) {\n    var opts = Object.extend({}, options || {});\n\n    // Check if first key in update statement contains a $\n    var keys = Object.keys(update);\n    if (keys.length == 0) {\n        throw new Error(\"the update operation document must contain at\n least one atomic operator\");\n    }\n    ...\n```", "```\n$ mongo script1.js script2.js script3.js\nMongoDB shell version: 4.2.1\nconnecting to: mongodb://127.0.0.1:27017\nMongoDB server version: 4.2.1\n\nloading file: script1.js\nI am script1.js\nloading file: script2.js\nI am script2.js\nloading file: script3.js\nI am script3.js\n...\n```", "```\n$ mongo server-1:30000/foo --quiet script1.js script2.js script3.js\n```", "```\n> load(\"script1.js\")\nI am script1.js\ntrue\n>\n```", "```\n// defineConnectTo.js\n\n/**\n * Connect to a database and set db.\n */\nvar connectTo = function(port, dbname) {\n    if (!port) {\n        port = 27017;\n    }\n\n    if (!dbname) {\n        dbname = \"test\";\n    }\n\n    db = connect(\"localhost:\"+port+\"/\"+dbname);\n    return db;\n};\n```", "```\n> typeof connectTo\nundefined\n> load('defineConnectTo.js')\n> typeof connectTo\nfunction\n```", "```\n> run(\"ls\", \"-l\", \"/home/myUser/my-scripts/\")\nsh70352| -rw-r--r--  1 myUser myUser 2012-12-13 13:15 defineConnectTo.js\nsh70532| -rw-r--r--  1 myUser myUser 2013-02-22 15:10 script1.js\nsh70532| -rw-r--r--  1 myUser myUser 2013-02-22 15:12 script2.js\nsh70532| -rw-r--r--  1 myUser myUser 2013-02-22 15:13 script3.js\n```", "```\n// .mongorc.js\n\nvar compliment = [\"attractive\", \"intelligent\", \"like Batman\"];\nvar index = Math.floor(Math.random()*3);\n\nprint(\"Hello, you're looking particularly \"+compliment[index]+\" today!\");\n```", "```\n$ mongo\nMongoDB shell version: 4.2.1\nconnecting to: test\nHello, you're looking particularly like Batman today!\n>\n```", "```\nvar no = function() {\n    print(\"Not on my watch.\");\n};\n\n// Prevent dropping databases\ndb.dropDatabase = DB.prototype.dropDatabase = no;\n\n// Prevent dropping collections\nDBCollection.prototype.drop = no;\n\n// Prevent dropping an index\nDBCollection.prototype.dropIndex = no;\n\n// Prevent dropping indexes\nDBCollection.prototype.dropIndexes = no;\n```", "```\nprompt = function() {\n    return (new Date())+\"> \";\n};\n```", "```\nprompt = function() {\n    if (typeof db == 'undefined') {\n        return '(nodb)> ';\n    }\n\n    // Check the last db operation\n    try {\n        db.runCommand({getLastError:1});\n    }\n    catch (e) {\n        print(e);\n    }\n\n    return db+\"> \";\n};\n```", "```\n> EDITOR=\"/usr/bin/emacs\"\n```", "```\n> var wap = db.books.findOne({title: \"War and Peace\"});\n> edit wap\n```", "```\n> db.version\nfunction () {\n    return this.serverBuildInfo().version;\n}\n```", "```\n> db.getCollection(\"version\");\ntest.version\n```", "```\nvar collections = [\"posts\", \"comments\", \"authors\"];\n\nfor (var i in collections) {\n    print(db.blog[collections[i]]);\n}\n```", "```\nprint(db.blog.posts);\nprint(db.blog.comments);\nprint(db.blog.authors);\n```", "```\n> var name = \"@#&!\"\n> db[name].find()\n```"]