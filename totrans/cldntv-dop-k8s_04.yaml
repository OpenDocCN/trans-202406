- en: Chapter 2\. First Steps with Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章\. Kubernetes 初步
- en: You’ve taken your first step into a larger world.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你已经踏出了进入更大世界的第一步。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Obi-Wan Kenobi, *Star Wars: A New Hope*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 奥比-旺·克诺比，《星球大战：新希望》
- en: 'Enough with the theory; let’s start working with Kubernetes and containers.
    In this chapter, you’ll build a simple containerized application and deploy it
    to a local Kubernetes cluster running on your machine. In the process, you’ll
    meet some very important cloud native technologies and concepts: Docker, Git,
    Go, container registries, and the `kubectl` tool.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 理论够了，让我们开始使用 Kubernetes 和容器工作吧。在本章中，你将构建一个简单的容器化应用程序，并将其部署到运行在你的机器上的本地 Kubernetes
    集群中。在这个过程中，你将会接触到一些非常重要的云原生技术和概念：Docker、Git、Go、容器注册表和`kubectl`工具。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This chapter is interactive! Throughout this book, we’ll ask you to follow along
    with the examples by installing things on your own computer, typing commands,
    and running containers. We find that’s a much more effective way to learn than
    just having things explained in words. You can find all of the examples on [GitHub](https://oreil.ly/LAI8f).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是互动的！在本书中，我们会要求你按照示例在自己的计算机上安装软件、输入命令并运行容器。我们认为这比仅仅通过文字解释来学习更为有效。你可以在[GitHub](https://oreil.ly/LAI8f)上找到所有的示例。
- en: Running Your First Container
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你的第一个容器
- en: As we saw in [Chapter 1](ch01.html#revolution), the container is one of the
    key concepts in cloud native development. The most popular tool for building and
    running containers is Docker. There are other tools for running containers, but
    we will cover that in more detail later.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第一章](ch01.html#revolution)中看到的，容器是云原生开发的关键概念之一。构建和运行容器最流行的工具是 Docker。还有其他工具用于运行容器，但我们稍后会详细介绍。
- en: In this section, we’ll use the Docker Desktop tool to build a simple demo application,
    run it locally, and push the image to a container registry.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Docker Desktop 工具构建一个简单的演示应用程序，在本地运行它，并将镜像推送到容器注册表。
- en: If you’re already very familiar with containers, skip straight to [“Hello, Kubernetes”](#hellokube),
    where the real fun starts. If you’re curious to know what containers are and how
    they work—and to get a little practical experience with them before you start
    learning about Kubernetes—read on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经对容器非常熟悉，请直接跳到[“你好，Kubernetes”](#hellokube)，那里才是真正的乐趣所在。如果你想知道容器是什么，它们如何工作，并在开始学习
    Kubernetes 之前对它们进行一些实际操作，可以继续阅读。
- en: Installing Docker Desktop
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker Desktop
- en: Docker Desktop is a free package for Mac and Windows. It comes with a complete
    Kubernetes development environment that you can use to test your applications
    on your laptop or desktop.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop 是 Mac 和 Windows 的免费软件包。它带有一个完整的 Kubernetes 开发环境，你可以在笔记本电脑或台式机上测试你的应用程序。
- en: Let’s install Docker Desktop now and use it to run a simple containerized application.
    If you already have Docker installed, skip this section and go straight on to
    [“Running a Container Image”](#runningcontainer).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们安装 Docker Desktop 并使用它来运行一个简单的容器化应用程序。如果你已经安装了 Docker，请跳过本节，直接进入[“运行容器镜像”](#runningcontainer)。
- en: Download a version of the [Docker Desktop Community Edition](https://oreil.ly/Klafa)
    suitable for your computer, then follow the instructions for your platform to
    install Docker and start it up.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适合你的计算机版本的[Docker Desktop Community Edition](https://oreil.ly/Klafa)，然后按照你的平台上的说明安装
    Docker 并启动它。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Desktop isn’t currently available for Linux, so Linux users will need
    to install [Docker Engine](https://oreil.ly/4B1K5) instead, and then [Minikube](https://oreil.ly/ExEjc)
    (see [“Minikube”](#minikube)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 Docker Desktop 尚不支持 Linux，因此 Linux 用户需要安装[Docker 引擎](https://oreil.ly/4B1K5)，然后安装[Minikube](https://oreil.ly/ExEjc)（参见[“Minikube”](#minikube)）。
- en: 'Once you’ve done that, you should be able to open a terminal and run the following
    command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成了这一步，你应该能够打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The exact output will be different depending on your platform, but if Docker
    is correctly installed and running, you’ll see something like the example output
    shown.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的平台，确保 Docker 正确安装和运行，你将看到类似示例输出的内容。
- en: On Linux systems, you may need to run `sudo docker version` instead. You can
    add your account to the docker group with `sudo usermod -aG docker $USER && newgrp
    docker` and then you won’t need to use `sudo` each time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统上，你可能需要运行`sudo docker version`。你可以使用`sudo usermod -aG docker $USER
    && newgrp docker`将你的帐户添加到 docker 组，然后你就不需要每次都使用`sudo`了。
- en: What Is Docker?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 是什么？
- en: '[Docker](https://docs.docker.com) is actually several different, but related,
    things: a container image format, a container runtime library that manages the
    life cycle of containers, a command-line tool for packaging and running containers,
    and an API for container management. The details needn’t concern us here, since
    Kubernetes supports Docker containers as one of many components, though an important
    one.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Docker](https://docs.docker.com) 实际上是几个不同但相关的东西：一个容器镜像格式，一个管理容器生命周期的容器运行库，一个打包和运行容器的命令行工具，以及一个容器管理的API。这里不需要关注细节，因为Kubernetes支持Docker容器作为其众多组件之一，尽管它是一个重要的组件。'
- en: Running a Container Image
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行一个容器镜像
- en: What exactly is a container image? The technical details don’t really matter
    for our purposes, but you can think of an image as being like a ZIP file. It’s
    a single binary file that has a unique ID and holds everything needed to run the
    container.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到底什么是容器镜像？从技术细节上讲并不重要，但您可以将镜像看作是类似于ZIP文件。它是一个唯一ID的单一二进制文件，包含了运行容器所需的一切。
- en: Whether you’re running the container directly with Docker, or on a Kubernetes
    cluster, all you need to specify is a container image ID or URL, and the system
    will take care of finding, downloading, unpacking, and starting the container
    for you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是直接使用Docker运行容器，还是在Kubernetes集群上运行，您只需指定一个容器镜像ID或URL，系统将负责查找、下载、解压和启动容器。
- en: 'We’ve written a little demo application that we’ll use throughout the book
    to illustrate what we’re talking about. You can download and run the application
    using a container image we prepared earlier. Run the following command to try
    it out:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一个小型演示应用程序，将在整本书中用它来说明我们所讲的内容。您可以下载并运行我们之前准备好的容器镜像来使用该应用程序。运行以下命令以试用：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Leave this command running, and point your browser to *http://localhost:9999/*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让此命令保持运行状态，并将浏览器指向 *http://localhost:9999/*。
- en: 'You should see a friendly message:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个友好的消息：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Anytime you make a request to this URL, our demo application will be ready and
    waiting to greet you.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您请求这个URL，我们的演示应用程序都将准备好并等待着迎接您。
- en: Once you’ve had as much fun as you can stand, stop the container by pressing
    Ctrl-C in your terminal.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当您玩够了，请通过在终端中按下Ctrl-C来停止容器。
- en: The Demo Application
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示应用程序
- en: So how does it work? Let’s download the source code for the demo application
    that runs in this container and have a look.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的？让我们下载运行在此容器中的演示应用程序的源代码，并查看一下。
- en: 'You’ll need Git installed for this part.^([1](ch02.html#idm45979391921824))
    If you’re not sure whether you already have Git, try the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这部分，您需要安装Git。^([1](ch02.html#idm45979391921824)) 如果您不确定是否已安装Git，请尝试以下命令：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you don’t already have Git, follow the [installation instructions](https://git-scm.com/download)
    for your platform.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有安装Git，请按照您平台的[安装说明](https://git-scm.com/download)进行操作。
- en: 'Once you’ve installed Git, run this command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完Git后，运行此命令：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Looking at the Source Code
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看源代码
- en: 'This Git repository contains the demo application we’ll be using throughout
    this book. To make it easier to see what’s going on at each stage, the repo contains
    each successive version of the app in a different subdirectory. The first one
    is named simply *hello*. To look at the source code, run this command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此Git仓库包含了我们将在整本书中使用的演示应用程序。为了更好地了解每个阶段的情况，该仓库在不同的子目录中包含了每个连续版本的应用程序。第一个版本简单命名为
    *hello*。要查看源代码，请运行此命令：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the file *main.go* in your favorite editor (we recommend [Visual Studio
    Code](https://code.visualstudio.com), which has excellent support for Go, Docker,
    and Kubernetes development). You’ll see this source code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在您喜爱的编辑器中打开 *main.go* 文件（我们推荐使用[Visual Studio Code](https://code.visualstudio.com)，它对Go、Docker和Kubernetes开发有很好的支持）。您将看到以下源代码：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Introducing Go
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Go
- en: Our demo application is written in the Go programming language.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的演示应用程序是用Go编程语言编写的。
- en: Go is a modern programming language (developed at Google since 2009) that prioritizes
    simplicity, safety, and readability, and is designed for building large-scale
    concurrent applications, especially network services. It’s also a lot of fun to
    program in.^([2](ch02.html#idm45979390606064))
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种现代编程语言（自2009年起由Google开发），注重简单性、安全性和可读性，并专为构建大规模并发应用程序（特别是网络服务）而设计。在这种语言中编程也非常有趣。^([2](ch02.html#idm45979390606064))
- en: Kubernetes itself is written in Go, as are Docker, Terraform, and many other
    popular open source projects. This makes Go a good choice for developing cloud
    native applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 本身就是用 Go 编写的，Docker、Terraform 和许多其他流行的开源项目也是如此。这使得 Go 成为开发云原生应用程序的一个不错选择。
- en: How the Demo App Works
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示应用程序的工作原理
- en: 'As you can see, the demo app is pretty simple, even though it implements an
    HTTP server (Go comes with a powerful standard library). The core of it is this
    function, called `handler`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，演示应用程序相当简单，尽管它实现了一个 HTTP 服务器（Go 提供了一个强大的标准库）。它的核心是这个名为 `handler` 的函数：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As the name suggests, it handles HTTP requests. The request is passed in as
    an argument to the function (though the function doesn’t do anything with it,
    yet).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，它处理 HTTP 请求。请求作为参数传递给函数（尽管函数目前没有对其进行任何操作）。
- en: 'An HTTP server also needs a way to send something back to the client. The `http.ResponseWriter`
    object enables our function to send a message back to the user to display in their
    browser: in this case, just the string `Hello, 世界`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 服务器还需要一种方法向客户端发送响应。`http.ResponseWriter` 对象使我们的函数能够向用户发送消息，以在其浏览器中显示，本例中只是字符串
    `Hello, 世界`。
- en: 'The first example program in any language traditionally prints `Hello, world`.
    But because Go natively supports Unicode (the international standard for text
    representation), example Go programs often print `Hello, 世界` instead, just to
    show off. If you don’t happen to speak Chinese, that’s OK: Go does!'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 任何语言中的第一个示例程序传统上会打印 `Hello, world`。但是因为 Go 本地支持 Unicode（国际文本表示标准），示例 Go 程序通常打印
    `Hello, 世界`，只是为了炫耀。如果您不会说中文，没关系：Go 会处理！
- en: The rest of the program takes care of registering the `handler` function as
    the handler for HTTP requests, printing a message that the app is starting, and
    actually starting the HTTP server to listen and serve on port 8888.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的其余部分负责将 `handler` 函数注册为处理 HTTP 请求的处理程序，并打印应用程序正在启动的消息，然后实际启动 HTTP 服务器以监听并提供在
    8888 端口上提供服务。
- en: That’s the whole app! It doesn’t do much yet, but we will add capabilities to
    it as we go on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是整个应用程序！它现在还没有做太多事情，但随着我们的继续，我们将为其添加功能。
- en: Building a Container
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建容器
- en: You know that a container image is a single file that contains everything the
    container needs to run, but how do you build an image in the first place? Well,
    to do that, you use the `docker image build` command, which takes as input a special
    text file called a *Dockerfile*. The Dockerfile specifies exactly what needs to
    go into the container image.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道容器镜像是一个包含容器运行所需一切的单个文件，但首先如何构建镜像呢？嗯，要做到这一点，您使用 `docker image build` 命令，它以特殊的文本文件（称为*Dockerfile*）作为输入。Dockerfile
    精确地指定了需要放入容器镜像中的内容。
- en: One of the key benefits of containers is the ability to build on existing images
    to create new images. For example, you could take a container image containing
    the complete Ubuntu operating system, add a single file to it, and the result
    will be a new image.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的一个关键优势是能够基于现有镜像构建新镜像。例如，您可以获取一个包含完整 Ubuntu 操作系统的容器镜像，向其添加一个文件，结果将是一个新的镜像。
- en: In general, a Dockerfile has instructions for taking a starting image (a so-called
    *base image*), transforming it in some way, and saving the result as a new image.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个 Dockerfile 包含一些指令，用于获取一个起始镜像（所谓的*基础镜像*），以某种方式进行转换，并将结果保存为一个新的镜像。
- en: Understanding Dockerfiles
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Dockerfile
- en: 'Let’s see the Dockerfile for our demo application (it’s in the *hello* subdirectory
    of the app repo):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们演示应用程序的 Dockerfile（它位于应用程序存储库的*hello*子目录中）：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The exact details of how this works don’t matter for now, but it uses a fairly
    standard build process for Go containers called *multistage builds*. The first
    stage starts from an official `golang` container image, which is just an operating
    system (in this case Alpine Linux) with the Go language environment installed.
    It runs the `go build` command to compile the *main.go* file we saw earlier.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不需要详细了解它是如何工作的确切细节，但它使用了一种称为*多阶段构建*的标准 Go 容器构建过程。第一阶段从官方的 `golang` 容器镜像开始，它只是一个安装了
    Go 语言环境的操作系统（在本例中是 Alpine Linux）。它运行 `go build` 命令来编译我们之前看到的 *main.go* 文件。
- en: The result of this is an executable binary file named *demo*. The second stage
    takes a completely empty container image (called a *scratch* image, as in *from
    scratch*) and copies the *demo* binary into it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作的结果是一个名为*demo*的可执行二进制文件。第二阶段获取一个完全空的容器镜像（称为*scratch*镜像，即*从零开始*），并将*demo*二进制文件复制到其中。
- en: Minimal Container Images
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极简容器镜像
- en: Why the second build stage? Well, the Go language environment, and the rest
    of Alpine Linux, is really only needed in order to *build* the program. To run
    the program, all it takes is the *demo* binary, so the Dockerfile creates a new
    scratch container to put it in. The resulting image is very small (about 6 MiB)—and
    that’s the image that can be deployed in production.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么需要第二个构建阶段？嗯，Go 语言环境以及其余的 Alpine Linux，实际上只是用来 *构建* 程序的。运行程序只需要 *demo* 二进制文件，因此
    Dockerfile 创建一个新的 scratch 容器来放置它。生成的镜像非常小（约 6 MiB）— 这就是可以在生产中部署的镜像。
- en: Without the second stage, you would have ended up with a container image about
    350 MiB in size, 98% of which is unnecessary and will never be executed. The smaller
    the container image, the faster it can be uploaded and downloaded, and the faster
    it will be to start up.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有第二阶段，你最终得到的容器镜像将会有大约 350 MiB 的大小，其中 98% 是不必要的，永远不会被执行。镜像越小，上传和下载速度就越快，启动速度也就越快。
- en: Minimal containers also have a reduced attack surface for security issues. The
    fewer programs there are in your container, the fewer potential vulnerabilities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化容器也有减少安全问题攻击面的好处。容器中程序越少，潜在的漏洞就越少。
- en: Because Go is a compiled language that can produce self-contained executables,
    it’s ideal for writing minimal containers. By comparison, the official Ruby container
    image is 850 MB; about 140 times bigger than our Alpine Go image, and that’s before
    you’ve added your Ruby program! Another great resource to look at for using lean
    containers is [*distroless* images](https://oreil.ly/V3AFm), which only contain
    runtime dependencies and keep your final container image size small.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Go 是一种可以生成自包含可执行文件的编译语言，所以非常适合编写最小化的容器。相比之下，官方的 Ruby 容器镜像大小为 850 MB；比我们的
    Alpine Go 镜像大约大 140 倍，而且这还不包括你添加的 Ruby 程序！另一个用于使用精简容器的好资源是 [*distroless* images](https://oreil.ly/V3AFm)，它们只包含运行时依赖项，保持最终容器镜像的大小小。
- en: Running Docker Image Build
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Docker 镜像构建
- en: 'We’ve seen that the Dockerfile contains instructions for the `docker image
    build` tool to turn our Go source code into an executable container. Let’s go
    ahead and try it. In the *hello* directory, run the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 Dockerfile 包含 `docker image build` 工具将我们的 Go 源代码转换为可执行容器的指令。让我们继续尝试一下。在
    *hello* 目录中，运行以下命令：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Congratulations, you just built your first container! You can see from the output
    that Docker performs each of the actions in the Dockerfile in sequence on the
    newly formed container, resulting in an image that’s ready to use.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚构建了你的第一个容器！你可以从输出中看到，Docker 在 Dockerfile 中逐步执行每个动作，最终生成一个可用的镜像。
- en: Naming Your Images
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给你的镜像命名
- en: When you build an image, by default it just gets a hexadecimal ID, which you
    can use to refer to it later (for example, to run it). These IDs aren’t particularly
    memorable or easy to type, so Docker allows you to give the image a human-readable
    name, using the `-t` switch to `docker image build`. In the previous example you
    named the image `myhello`, so you should be able to use that name to run the image
    now.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建一个镜像时，默认情况下它只会得到一个十六进制的 ID，你可以稍后用它来引用（例如，运行它）。这些 ID 并不是特别容易记住或输入，因此 Docker
    允许你使用 `-t` 开关为镜像指定一个易读的名称。在前面的例子中，你将镜像命名为 `myhello`，所以现在应该能够使用这个名称来运行镜像。
- en: 'Let’s see if it works:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是否正常工作：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You’re now running your own copy of the demo application, and you can check
    it by browsing to the same URL as before (*http://localhost:9999/*).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你正在运行自己的演示应用程序副本，并且可以通过浏览到与之前相同的 URL (*http://localhost:9999/*) 来检查它。
- en: You should see `Hello, 世界`. When you’re done running this image, press Ctrl-C
    to stop the `docker container run` command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到 `Hello, 世界`。当你运行完这个镜像后，按 Ctrl-C 停止 `docker container run` 命令。
- en: Port Forwarding
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端口转发
- en: Programs running in a container are isolated from other programs running on
    the same machine, which means they can’t have direct access to resources like
    network ports.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中运行的程序与在同一台机器上运行的其他程序隔离，这意味着它们不能直接访问网络端口等资源。
- en: The demo application listens for connections on port 8888, but this is the *container’s*
    own private port 8888, not a port on your computer. In order to connect to the
    container’s port 8888, you need to *forward* a port on your local machine to that
    port on the container. It could be (*almost*) any port, including 8888, but we’ll
    use 9999 instead, to make it clear which is your port, and which is the container’s.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 演示应用程序侦听端口8888上的连接，但这是*容器*的私有端口8888，并非您计算机上的端口。为了连接到容器的端口8888，您需要将本地机器上的端口*转发*到容器的端口。它可以是（*几乎*）任何端口，包括8888，但我们将使用9999，以清楚表明哪个是您的端口，哪个是容器的端口。
- en: 'To tell Docker to forward a port, you can use the `-p` switch, just as you
    did earlier in [“Running a Container Image”](#runningcontainer):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉Docker转发端口，您可以使用`-p`开关，就像在[“运行容器镜像”](#runningcontainer)中一样：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once the container is running, any requests to `HOST_PORT` on the local computer
    will be forwarded automatically to `CONTAINER_PORT` on the container, which is
    how you’re able to connect to the app with your browser.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器运行起来，本地计算机上对`HOST_PORT`的任何请求都会自动转发到容器中的`CONTAINER_PORT`，这就是您如何通过浏览器连接到应用程序的方式。
- en: We said that you can use *almost* any port earlier because any port number below
    `1024` is considered a [*priviliged* port](https://oreil.ly/q5SAU), meaning that
    in order to use those ports, your process must run as a user with special permissions,
    such as `root`. Normal nonadministrator users cannot use ports below 1024, so,
    to avoid permission issues, we’ll stick with higher port numbers in our example.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前说过，您可以使用*几乎*任何端口，因为低于`1024`的任何端口号都被视为[*特权*端口](https://oreil.ly/q5SAU)，这意味着为了使用这些端口，您的进程必须以特殊权限的用户（如`root`）运行。普通非管理员用户无法使用低于1024的端口，因此为了避免权限问题，我们将在示例中使用较高的端口号。
- en: Container Registries
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器注册表
- en: In [“Running a Container Image”](#runningcontainer), you were able to run an
    image just by giving its name, and Docker downloaded it for you automatically.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[“运行容器镜像”](#runningcontainer)中，只需提供镜像名称，Docker就会自动下载并运行镜像。
- en: You might reasonably wonder where it’s downloaded from. While you can use Docker
    perfectly well by just building and running local images, it’s much more useful
    if you can push and pull images from a *container registry*. The registry allows
    you to store images and retrieve them using a unique name (like `cloudnatived/demo:hello`).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会合理地想知道它是从哪里下载的。虽然您可以通过仅构建和运行本地镜像来完美使用Docker，但如果能够从*容器注册表*推送和拉取镜像，则更为实用。注册表允许您存储镜像并使用唯一名称（如`cloudnatived/demo:hello`）检索它们。
- en: The default registry for the `docker container run` command is Docker Hub, but
    you can specify a different one, or set up your own.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker container run`命令的默认注册表是Docker Hub，但您可以指定一个不同的注册表，或者设置自己的注册表。'
- en: For now, let’s stick with Docker Hub. While you can download and use any public
    container image from Docker Hub, to push your own images you’ll need an account
    (called a *Docker ID*). Follow the instructions on [Docker Hub](https://hub.docker.com)
    to create your Docker ID.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续使用Docker Hub。虽然您可以从Docker Hub下载和使用任何公共容器镜像，但要推送您自己的镜像，您需要一个帐户（称为*Docker
    ID*）。请按照[Docker Hub](https://hub.docker.com)上的说明创建您的Docker ID。
- en: Authenticating to the Registry
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证注册表
- en: 'Once you’ve got your Docker ID, the next step is to connect your local Docker
    client with Docker Hub, using your ID and password:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您获得了您的Docker ID，下一步就是使用您的ID和密码将本地Docker客户端与Docker Hub连接起来：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Naming and Pushing Your Image
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给镜像命名并推送
- en: 'In order to be able to push a local image to the registry, you need to name
    it using this format: `_YOUR_DOCKER_ID_/myhello`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够将本地镜像推送到注册表，您需要使用以下格式命名它：`_YOUR_DOCKER_ID_/myhello`。
- en: 'To create this name, you don’t need to rebuild the image; instead, run this
    command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建此名称，您无需重新构建镜像；相反，请运行此命令：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is so that when you push the image to the registry, Docker knows which
    account to store it in.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是为了在将镜像推送到注册表时，Docker知道要将其存储在哪个帐户中。
- en: 'Go ahead and push the image to Docker Hub, using this command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请继续使用以下命令将镜像推送到Docker Hub：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running Your Image
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行您的镜像
- en: 'Congratulations! Your container image is now available to run anywhere (at
    least, anywhere with access to the internet), using the command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您的容器镜像现在可以在任何地方运行（至少是在有互联网访问的地方），使用以下命令：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Hello, Kubernetes
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，Kubernetes
- en: Now that you’ve built and pushed your first container image to a registry, you
    can run it using the `docker container run` command, but that’s not very exciting.
    Let’s do something a little more adventurous and run it in Kubernetes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经构建并推送了第一个容器镜像到镜像仓库，你可以使用 `docker container run` 命令运行它，但那不是很有趣。让我们做一些更有冒险精神的事情，并在
    Kubernetes 中运行它。
- en: There are lots of ways to get a Kubernetes cluster, and we’ll explore some of
    them in more detail in [Chapter 3](ch03.html#gettingk8s). If you already have
    access to a Kubernetes cluster, that’s great, and if you like, you can use it
    for the rest of the examples in this chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以获得 Kubernetes 集群，在[第 3 章](ch03.html#gettingk8s)中我们将更详细地探讨其中的一些。如果你已经可以访问
    Kubernetes 集群，那很棒，如果愿意，你可以在本章的其余示例中使用它。
- en: If not, don’t worry. Docker Desktop includes Kubernetes support (Linux users,
    see [“Minikube”](#minikube) instead). To enable it, open the Docker Desktop Preferences,
    select the Kubernetes tab, and check Enable. See the [Docker Desktop Kubernetes
    docs](https://oreil.ly/4eBpc) for more info.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有，不要担心。Docker Desktop 包含 Kubernetes 支持（Linux 用户，请参阅 [“Minikube”](#minikube)）。要启用它，打开
    Docker Desktop 首选项，选择 Kubernetes 选项卡，然后选中启用。详细信息请参阅 [Docker Desktop Kubernetes
    文档](https://oreil.ly/4eBpc)。
- en: It will take a few minutes to install and start Kubernetes. Once that’s done,
    you’re ready to run the demo app!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和启动 Kubernetes 可能需要几分钟时间。一旦完成，你就可以运行演示应用程序了！
- en: Linux users will also need to install the `kubectl` tool, following the instructions
    on the [Kubernetes Documentation site](https://oreil.ly/EXGeU).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 用户还需要安装 `kubectl` 工具，按照 [Kubernetes 文档网站](https://oreil.ly/EXGeU) 上的说明操作。
- en: Running the Demo App
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行演示应用
- en: 'Let’s start by running the demo image you built earlier. Open a terminal and
    run the `kubectl` command with the following arguments:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先运行你之前构建的演示镜像。打开终端并使用以下参数运行 `kubectl` 命令：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Don’t worry about the details of this command for now: it’s basically the Kubernetes
    equivalent of the `docker container run` command you used earlier in this chapter
    to run the demo image. If you haven’t built your own image yet, you can use ours:
    `--image=cloudnatived/demo:hello`.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在暂时不必担心这个命令的细节：它基本上是 Kubernetes 中 `docker container run` 命令的等价物，你之前在本章中用来运行演示镜像的命令。如果你还没有构建自己的镜像，你可以使用我们的：`--image=cloudnatived/demo:hello`。
- en: 'Recall that you needed to forward port 9999 on your local machine to the container’s
    port 8888 in order to connect to it with your web browser. You’ll need to do the
    same thing here, using `kubectl port-forward`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，为了使用浏览器连接到容器的端口 8888，你需要在本地机器上将端口 9999 转发到那里。在这里也需要使用 `kubectl port-forward`
    命令：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Leave this command running and open a new terminal to carry on.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让这个命令保持运行状态，并在新终端中继续进行操作。
- en: Connect to *http://localhost:9999/* with your browser to see the `Hello, 世界`
    message.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器连接到 *http://localhost:9999/* 查看 `Hello, 世界` 消息。
- en: 'It may take a few seconds for the container to start and for the app to be
    available. If it isn’t ready after half a minute or so, try this command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要几秒钟来启动容器并使应用程序可用。如果半分钟后还没有准备好，尝试这个命令：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When the container is running and you connect to it with your browser, you’ll
    see this message in the terminal:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器运行并使用浏览器连接时，你会在终端看到这条消息：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If the Container Doesn’t Start
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果容器无法启动
- en: If the `STATUS` is not shown as `Running`, there may be a problem. For example,
    if the status is `ErrImagePull` or `ImagePullBackoff`, it means Kubernetes wasn’t
    able to find and download the image you specified. You may have made a typo in
    the image name; check your `kubectl run` command.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `STATUS` 没有显示为 `Running`，可能会有问题。例如，如果状态是 `ErrImagePull` 或 `ImagePullBackoff`，这意味着
    Kubernetes 无法找到并下载你指定的镜像。你可能在镜像名称中有拼写错误；检查你的 `kubectl run` 命令。
- en: If the status is `ContainerCreating`, then all is well; Kubernetes is still
    downloading and starting the image. Just wait a few seconds and check again.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果状态是 `ContainerCreating`，那一切都很好；Kubernetes 仍在下载和启动镜像。稍等几秒钟，然后再次检查。
- en: 'Once you are done, you’ll want to clean up your demo container:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你会想要清理你的演示容器：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We’ll cover more of the Kubernetes terminology in the coming chapters, but for
    now you can think of a *Pod* as a container running in Kubernetes, similar to
    how you ran a Docker container on your computer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细介绍更多 Kubernetes 的术语，但现在你可以将 *Pod* 理解为在 Kubernetes 中运行的容器，类似于你在电脑上运行
    Docker 容器的方式。
- en: Minikube
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Minikube
- en: 'If you don’t want to use, or can’t use, the Kubernetes support in Docker Desktop,
    there is an alternative: the well-loved Minikube. Like Docker Desktop, Minikube
    provides a single-node Kubernetes cluster that runs on your own machine (in fact,
    in a virtual machine, but that doesn’t matter).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用或无法使用 Docker Desktop 中的 Kubernetes 支持，还有一个替代方案：备受喜爱的 Minikube。与 Docker
    Desktop 类似，Minikube 提供在您自己的机器上运行的单节点 Kubernetes 集群（实际上在虚拟机中，但这并不重要）。
- en: To install Minikube, follow the instructions in the official [Minikube “Get
    Started!” guide](https://oreil.ly/zGROa).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Minikube，请按照官方[Minikube “入门指南”](https://oreil.ly/zGROa)中的说明操作。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: If, like us, you quickly grow impatient with wordy essays about why Kubernetes
    is so great, we hope you enjoyed getting to grips with some practical tasks in
    this chapter. If you’re an experienced Docker or Kubernetes user already, perhaps
    you’ll forgive the refresher course. We want to make sure that everybody feels
    quite comfortable with building and running containers in a basic way, and that
    you have a Kubernetes environment you can play and experiment with, before getting
    on to more advanced things.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您像我们一样，对于关于 Kubernetes 如此伟大的冗长文章感到不耐烦，希望您喜欢在本章中掌握一些实际任务。如果您已经是经验丰富的 Docker
    或 Kubernetes 用户，也许您会原谅这个复习课程。我们希望确保每个人都能在基本方式下构建和运行容器，并且在进入更高级内容之前，您可以拥有一个可以进行玩耍和实验的
    Kubernetes 环境。
- en: 'Here’s what you should take away from this chapter:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您应该从本章中了解到的内容：
- en: All the source code examples (and many more) are available in the [demo repository](https://oreil.ly/LAI8f)
    that accompanies this book.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有源代码示例（以及更多）都可以在伴随本书的[demo 代码库](https://oreil.ly/LAI8f)中找到。
- en: The Docker tool lets you build containers locally, push them to or pull them
    from a container registry such as Docker Hub, and run container images locally
    on your machine.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 工具允许您在本地构建容器，将其推送到或从 Docker Hub 等容器注册表中拉取，并在本地机器上运行容器映像。
- en: 'A container image is completely specified by a Dockerfile: a text file that
    contains instructions about how to build the container.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个容器映像完全由 Dockerfile 指定：这是一个包含有关如何构建容器的说明的文本文件。
- en: Docker Desktop lets you run a small (single-node) Kubernetes cluster on your
    Mac or Windows machine. Minikube is another option and works on Linux.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Desktop 允许您在 Mac 或 Windows 机器上运行一个小型（单节点）Kubernetes 集群。Minikube 是另一个选项，在
    Linux 上也可以运行。
- en: The `kubectl` tool is the primary way of interacting with a Kubernetes cluster.
    It can be used to create resources in Kubernetes, view the status of the cluster
    and Pods, and apply Kubernetes configuration in the form of YAML manifests.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` 工具是与 Kubernetes 集群交互的主要方式。它可以用来在 Kubernetes 中创建资源，查看集群和 Pod 的状态，并应用
    YAML 文件形式的 Kubernetes 配置。'
- en: ^([1](ch02.html#idm45979391921824-marker)) If you’re not familiar with Git,
    read Scott Chacon and Ben Straub’s excellent book [*Pro Git*](https://git-scm.com/book/en/v2)
    (Apress).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#idm45979391921824-marker)) 如果您对 Git 不熟悉，请阅读 Scott Chacon 和 Ben
    Straub 的优秀书籍[*Pro Git*](https://git-scm.com/book/en/v2)（Apress）。
- en: ^([2](ch02.html#idm45979390606064-marker)) If you’re new to Go, Jon Bodner’s
    [*Learning Go*](https://oreil.ly/aNSCq) (O’Reilly) is an invaluable guide.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.html#idm45979390606064-marker)) 如果您对 Go 不熟悉，Jon Bodner 的[*学习 Go*](https://oreil.ly/aNSCq)（O'Reilly）是一本非常宝贵的指南。
