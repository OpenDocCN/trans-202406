- en: Chapter 2\. First Steps with Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve taken your first step into a larger world.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Obi-Wan Kenobi, *Star Wars: A New Hope*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Enough with the theory; let’s start working with Kubernetes and containers.
    In this chapter, you’ll build a simple containerized application and deploy it
    to a local Kubernetes cluster running on your machine. In the process, you’ll
    meet some very important cloud native technologies and concepts: Docker, Git,
    Go, container registries, and the `kubectl` tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This chapter is interactive! Throughout this book, we’ll ask you to follow along
    with the examples by installing things on your own computer, typing commands,
    and running containers. We find that’s a much more effective way to learn than
    just having things explained in words. You can find all of the examples on [GitHub](https://oreil.ly/LAI8f).
  prefs: []
  type: TYPE_NORMAL
- en: Running Your First Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 1](ch01.html#revolution), the container is one of the
    key concepts in cloud native development. The most popular tool for building and
    running containers is Docker. There are other tools for running containers, but
    we will cover that in more detail later.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll use the Docker Desktop tool to build a simple demo application,
    run it locally, and push the image to a container registry.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re already very familiar with containers, skip straight to [“Hello, Kubernetes”](#hellokube),
    where the real fun starts. If you’re curious to know what containers are and how
    they work—and to get a little practical experience with them before you start
    learning about Kubernetes—read on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Desktop is a free package for Mac and Windows. It comes with a complete
    Kubernetes development environment that you can use to test your applications
    on your laptop or desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s install Docker Desktop now and use it to run a simple containerized application.
    If you already have Docker installed, skip this section and go straight on to
    [“Running a Container Image”](#runningcontainer).
  prefs: []
  type: TYPE_NORMAL
- en: Download a version of the [Docker Desktop Community Edition](https://oreil.ly/Klafa)
    suitable for your computer, then follow the instructions for your platform to
    install Docker and start it up.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Docker Desktop isn’t currently available for Linux, so Linux users will need
    to install [Docker Engine](https://oreil.ly/4B1K5) instead, and then [Minikube](https://oreil.ly/ExEjc)
    (see [“Minikube”](#minikube)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve done that, you should be able to open a terminal and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The exact output will be different depending on your platform, but if Docker
    is correctly installed and running, you’ll see something like the example output
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux systems, you may need to run `sudo docker version` instead. You can
    add your account to the docker group with `sudo usermod -aG docker $USER && newgrp
    docker` and then you won’t need to use `sudo` each time.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Docker?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Docker](https://docs.docker.com) is actually several different, but related,
    things: a container image format, a container runtime library that manages the
    life cycle of containers, a command-line tool for packaging and running containers,
    and an API for container management. The details needn’t concern us here, since
    Kubernetes supports Docker containers as one of many components, though an important
    one.'
  prefs: []
  type: TYPE_NORMAL
- en: Running a Container Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What exactly is a container image? The technical details don’t really matter
    for our purposes, but you can think of an image as being like a ZIP file. It’s
    a single binary file that has a unique ID and holds everything needed to run the
    container.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re running the container directly with Docker, or on a Kubernetes
    cluster, all you need to specify is a container image ID or URL, and the system
    will take care of finding, downloading, unpacking, and starting the container
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve written a little demo application that we’ll use throughout the book
    to illustrate what we’re talking about. You can download and run the application
    using a container image we prepared earlier. Run the following command to try
    it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Leave this command running, and point your browser to *http://localhost:9999/*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a friendly message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Anytime you make a request to this URL, our demo application will be ready and
    waiting to greet you.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve had as much fun as you can stand, stop the container by pressing
    Ctrl-C in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: The Demo Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So how does it work? Let’s download the source code for the demo application
    that runs in this container and have a look.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need Git installed for this part.^([1](ch02.html#idm45979391921824))
    If you’re not sure whether you already have Git, try the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t already have Git, follow the [installation instructions](https://git-scm.com/download)
    for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve installed Git, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the Source Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This Git repository contains the demo application we’ll be using throughout
    this book. To make it easier to see what’s going on at each stage, the repo contains
    each successive version of the app in a different subdirectory. The first one
    is named simply *hello*. To look at the source code, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the file *main.go* in your favorite editor (we recommend [Visual Studio
    Code](https://code.visualstudio.com), which has excellent support for Go, Docker,
    and Kubernetes development). You’ll see this source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Introducing Go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our demo application is written in the Go programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Go is a modern programming language (developed at Google since 2009) that prioritizes
    simplicity, safety, and readability, and is designed for building large-scale
    concurrent applications, especially network services. It’s also a lot of fun to
    program in.^([2](ch02.html#idm45979390606064))
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes itself is written in Go, as are Docker, Terraform, and many other
    popular open source projects. This makes Go a good choice for developing cloud
    native applications.
  prefs: []
  type: TYPE_NORMAL
- en: How the Demo App Works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, the demo app is pretty simple, even though it implements an
    HTTP server (Go comes with a powerful standard library). The core of it is this
    function, called `handler`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As the name suggests, it handles HTTP requests. The request is passed in as
    an argument to the function (though the function doesn’t do anything with it,
    yet).
  prefs: []
  type: TYPE_NORMAL
- en: 'An HTTP server also needs a way to send something back to the client. The `http.ResponseWriter`
    object enables our function to send a message back to the user to display in their
    browser: in this case, just the string `Hello, 世界`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first example program in any language traditionally prints `Hello, world`.
    But because Go natively supports Unicode (the international standard for text
    representation), example Go programs often print `Hello, 世界` instead, just to
    show off. If you don’t happen to speak Chinese, that’s OK: Go does!'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the program takes care of registering the `handler` function as
    the handler for HTTP requests, printing a message that the app is starting, and
    actually starting the HTTP server to listen and serve on port 8888.
  prefs: []
  type: TYPE_NORMAL
- en: That’s the whole app! It doesn’t do much yet, but we will add capabilities to
    it as we go on.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You know that a container image is a single file that contains everything the
    container needs to run, but how do you build an image in the first place? Well,
    to do that, you use the `docker image build` command, which takes as input a special
    text file called a *Dockerfile*. The Dockerfile specifies exactly what needs to
    go into the container image.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key benefits of containers is the ability to build on existing images
    to create new images. For example, you could take a container image containing
    the complete Ubuntu operating system, add a single file to it, and the result
    will be a new image.
  prefs: []
  type: TYPE_NORMAL
- en: In general, a Dockerfile has instructions for taking a starting image (a so-called
    *base image*), transforming it in some way, and saving the result as a new image.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Dockerfiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see the Dockerfile for our demo application (it’s in the *hello* subdirectory
    of the app repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The exact details of how this works don’t matter for now, but it uses a fairly
    standard build process for Go containers called *multistage builds*. The first
    stage starts from an official `golang` container image, which is just an operating
    system (in this case Alpine Linux) with the Go language environment installed.
    It runs the `go build` command to compile the *main.go* file we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The result of this is an executable binary file named *demo*. The second stage
    takes a completely empty container image (called a *scratch* image, as in *from
    scratch*) and copies the *demo* binary into it.
  prefs: []
  type: TYPE_NORMAL
- en: Minimal Container Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why the second build stage? Well, the Go language environment, and the rest
    of Alpine Linux, is really only needed in order to *build* the program. To run
    the program, all it takes is the *demo* binary, so the Dockerfile creates a new
    scratch container to put it in. The resulting image is very small (about 6 MiB)—and
    that’s the image that can be deployed in production.
  prefs: []
  type: TYPE_NORMAL
- en: Without the second stage, you would have ended up with a container image about
    350 MiB in size, 98% of which is unnecessary and will never be executed. The smaller
    the container image, the faster it can be uploaded and downloaded, and the faster
    it will be to start up.
  prefs: []
  type: TYPE_NORMAL
- en: Minimal containers also have a reduced attack surface for security issues. The
    fewer programs there are in your container, the fewer potential vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Because Go is a compiled language that can produce self-contained executables,
    it’s ideal for writing minimal containers. By comparison, the official Ruby container
    image is 850 MB; about 140 times bigger than our Alpine Go image, and that’s before
    you’ve added your Ruby program! Another great resource to look at for using lean
    containers is [*distroless* images](https://oreil.ly/V3AFm), which only contain
    runtime dependencies and keep your final container image size small.
  prefs: []
  type: TYPE_NORMAL
- en: Running Docker Image Build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve seen that the Dockerfile contains instructions for the `docker image
    build` tool to turn our Go source code into an executable container. Let’s go
    ahead and try it. In the *hello* directory, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, you just built your first container! You can see from the output
    that Docker performs each of the actions in the Dockerfile in sequence on the
    newly formed container, resulting in an image that’s ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: Naming Your Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you build an image, by default it just gets a hexadecimal ID, which you
    can use to refer to it later (for example, to run it). These IDs aren’t particularly
    memorable or easy to type, so Docker allows you to give the image a human-readable
    name, using the `-t` switch to `docker image build`. In the previous example you
    named the image `myhello`, so you should be able to use that name to run the image
    now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see if it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You’re now running your own copy of the demo application, and you can check
    it by browsing to the same URL as before (*http://localhost:9999/*).
  prefs: []
  type: TYPE_NORMAL
- en: You should see `Hello, 世界`. When you’re done running this image, press Ctrl-C
    to stop the `docker container run` command.
  prefs: []
  type: TYPE_NORMAL
- en: Port Forwarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programs running in a container are isolated from other programs running on
    the same machine, which means they can’t have direct access to resources like
    network ports.
  prefs: []
  type: TYPE_NORMAL
- en: The demo application listens for connections on port 8888, but this is the *container’s*
    own private port 8888, not a port on your computer. In order to connect to the
    container’s port 8888, you need to *forward* a port on your local machine to that
    port on the container. It could be (*almost*) any port, including 8888, but we’ll
    use 9999 instead, to make it clear which is your port, and which is the container’s.
  prefs: []
  type: TYPE_NORMAL
- en: 'To tell Docker to forward a port, you can use the `-p` switch, just as you
    did earlier in [“Running a Container Image”](#runningcontainer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once the container is running, any requests to `HOST_PORT` on the local computer
    will be forwarded automatically to `CONTAINER_PORT` on the container, which is
    how you’re able to connect to the app with your browser.
  prefs: []
  type: TYPE_NORMAL
- en: We said that you can use *almost* any port earlier because any port number below
    `1024` is considered a [*priviliged* port](https://oreil.ly/q5SAU), meaning that
    in order to use those ports, your process must run as a user with special permissions,
    such as `root`. Normal nonadministrator users cannot use ports below 1024, so,
    to avoid permission issues, we’ll stick with higher port numbers in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Container Registries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [“Running a Container Image”](#runningcontainer), you were able to run an
    image just by giving its name, and Docker downloaded it for you automatically.
  prefs: []
  type: TYPE_NORMAL
- en: You might reasonably wonder where it’s downloaded from. While you can use Docker
    perfectly well by just building and running local images, it’s much more useful
    if you can push and pull images from a *container registry*. The registry allows
    you to store images and retrieve them using a unique name (like `cloudnatived/demo:hello`).
  prefs: []
  type: TYPE_NORMAL
- en: The default registry for the `docker container run` command is Docker Hub, but
    you can specify a different one, or set up your own.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s stick with Docker Hub. While you can download and use any public
    container image from Docker Hub, to push your own images you’ll need an account
    (called a *Docker ID*). Follow the instructions on [Docker Hub](https://hub.docker.com)
    to create your Docker ID.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating to the Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you’ve got your Docker ID, the next step is to connect your local Docker
    client with Docker Hub, using your ID and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Naming and Pushing Your Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to be able to push a local image to the registry, you need to name
    it using this format: `_YOUR_DOCKER_ID_/myhello`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this name, you don’t need to rebuild the image; instead, run this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is so that when you push the image to the registry, Docker knows which
    account to store it in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and push the image to Docker Hub, using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running Your Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations! Your container image is now available to run anywhere (at
    least, anywhere with access to the internet), using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Hello, Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve built and pushed your first container image to a registry, you
    can run it using the `docker container run` command, but that’s not very exciting.
    Let’s do something a little more adventurous and run it in Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of ways to get a Kubernetes cluster, and we’ll explore some of
    them in more detail in [Chapter 3](ch03.html#gettingk8s). If you already have
    access to a Kubernetes cluster, that’s great, and if you like, you can use it
    for the rest of the examples in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If not, don’t worry. Docker Desktop includes Kubernetes support (Linux users,
    see [“Minikube”](#minikube) instead). To enable it, open the Docker Desktop Preferences,
    select the Kubernetes tab, and check Enable. See the [Docker Desktop Kubernetes
    docs](https://oreil.ly/4eBpc) for more info.
  prefs: []
  type: TYPE_NORMAL
- en: It will take a few minutes to install and start Kubernetes. Once that’s done,
    you’re ready to run the demo app!
  prefs: []
  type: TYPE_NORMAL
- en: Linux users will also need to install the `kubectl` tool, following the instructions
    on the [Kubernetes Documentation site](https://oreil.ly/EXGeU).
  prefs: []
  type: TYPE_NORMAL
- en: Running the Demo App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by running the demo image you built earlier. Open a terminal and
    run the `kubectl` command with the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Don’t worry about the details of this command for now: it’s basically the Kubernetes
    equivalent of the `docker container run` command you used earlier in this chapter
    to run the demo image. If you haven’t built your own image yet, you can use ours:
    `--image=cloudnatived/demo:hello`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that you needed to forward port 9999 on your local machine to the container’s
    port 8888 in order to connect to it with your web browser. You’ll need to do the
    same thing here, using `kubectl port-forward`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Leave this command running and open a new terminal to carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Connect to *http://localhost:9999/* with your browser to see the `Hello, 世界`
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'It may take a few seconds for the container to start and for the app to be
    available. If it isn’t ready after half a minute or so, try this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When the container is running and you connect to it with your browser, you’ll
    see this message in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If the Container Doesn’t Start
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the `STATUS` is not shown as `Running`, there may be a problem. For example,
    if the status is `ErrImagePull` or `ImagePullBackoff`, it means Kubernetes wasn’t
    able to find and download the image you specified. You may have made a typo in
    the image name; check your `kubectl run` command.
  prefs: []
  type: TYPE_NORMAL
- en: If the status is `ContainerCreating`, then all is well; Kubernetes is still
    downloading and starting the image. Just wait a few seconds and check again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done, you’ll want to clean up your demo container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We’ll cover more of the Kubernetes terminology in the coming chapters, but for
    now you can think of a *Pod* as a container running in Kubernetes, similar to
    how you ran a Docker container on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you don’t want to use, or can’t use, the Kubernetes support in Docker Desktop,
    there is an alternative: the well-loved Minikube. Like Docker Desktop, Minikube
    provides a single-node Kubernetes cluster that runs on your own machine (in fact,
    in a virtual machine, but that doesn’t matter).'
  prefs: []
  type: TYPE_NORMAL
- en: To install Minikube, follow the instructions in the official [Minikube “Get
    Started!” guide](https://oreil.ly/zGROa).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If, like us, you quickly grow impatient with wordy essays about why Kubernetes
    is so great, we hope you enjoyed getting to grips with some practical tasks in
    this chapter. If you’re an experienced Docker or Kubernetes user already, perhaps
    you’ll forgive the refresher course. We want to make sure that everybody feels
    quite comfortable with building and running containers in a basic way, and that
    you have a Kubernetes environment you can play and experiment with, before getting
    on to more advanced things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you should take away from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: All the source code examples (and many more) are available in the [demo repository](https://oreil.ly/LAI8f)
    that accompanies this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker tool lets you build containers locally, push them to or pull them
    from a container registry such as Docker Hub, and run container images locally
    on your machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A container image is completely specified by a Dockerfile: a text file that
    contains instructions about how to build the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Desktop lets you run a small (single-node) Kubernetes cluster on your
    Mac or Windows machine. Minikube is another option and works on Linux.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `kubectl` tool is the primary way of interacting with a Kubernetes cluster.
    It can be used to create resources in Kubernetes, view the status of the cluster
    and Pods, and apply Kubernetes configuration in the form of YAML manifests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ^([1](ch02.html#idm45979391921824-marker)) If you’re not familiar with Git,
    read Scott Chacon and Ben Straub’s excellent book [*Pro Git*](https://git-scm.com/book/en/v2)
    (Apress).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch02.html#idm45979390606064-marker)) If you’re new to Go, Jon Bodner’s
    [*Learning Go*](https://oreil.ly/aNSCq) (O’Reilly) is an invaluable guide.
  prefs: []
  type: TYPE_NORMAL
