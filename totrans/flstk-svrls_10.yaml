- en: Chapter 10\. Working with Images and Storage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章。使用图像和存储工作
- en: Many applications need to have a way to manage file, image, and video storage.
    While it’s possible to transform these objects into binary data and store them
    directly in your database, it’s usually better not to. Instead, using a managed
    file-hosting service like Amazon S3 is better because it’s less expensive, faster,
    and just as secure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要一种管理文件、图像和视频存储的方法。虽然可以将这些对象转换为二进制数据并直接存储在数据库中，但通常最好不要这样做。相反，使用像 Amazon
    S3 这样的托管文件托管服务更好，因为它更便宜、更快速，同样安全。
- en: In this chapter, we’ll look at how to create a photo-sharing app that renders
    posts with photos in a stream in real time, allowing you to share an image along
    with a caption for the image.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何创建一个照片分享应用程序，实时以流方式呈现带有图像和图像说明的帖子，允许您分享图像。
- en: Using Amazon S3
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon S3
- en: Amazon S3 allows you to have secure file hosting that scales as you need it.
    Amplify uses S3 as the Storage category for handling the storage of files like
    images, videos, PDFs, and more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon S3 允许您拥有随需扩展的安全文件托管。Amplify 使用 S3 作为处理文件（如图像、视频、PDF 等）存储的 Storage 类别。
- en: 'When working with S3, you typically will have three types of file access available:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 S3 一起工作时，通常会有三种类型的文件访问可用：
- en: Public
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: Items stored with public access will be accessible by all users of your app.
    These files are stored under the *public/* path in your S3 bucket. Public does
    not mean that anyone with the URL of the resource can view it, though. In order
    to be viewed, you must use the Amplify SDK to retrieve a temporarily signed URL
    of the resource. This signed URL will be set to expire after a set period of time
    (15 minutes by default).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 具有公共访问权限的项目将可供应用程序所有用户访问。这些文件存储在您的 S3 存储桶中的*public/*路径下。但是，公共并不意味着任何人都可以使用资源的
    URL 查看它。为了查看，您必须使用 Amplify SDK 检索资源的临时签名 URL。该签名 URL 将在一段时间后（默认为 15 分钟）过期。
- en: Private
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 私人
- en: Items are readable by all users, but writable only by the creating user. In
    S3, the files are stored under the path *private/{user_identity_id}*, where the
    *user_identity_id* corresponds to the unique Amazon Cognito ID for that user.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 项目对所有用户可读，但仅创建用户可写。在 S3 中，文件存储在路径*private/{user_identity_id}*下，其中*user_identity_id*对应于该用户的唯一
    Amazon Cognito ID。
- en: Protected
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护
- en: These files are only accessible for the individual user. Files are stored under
    the path *private/{user_identity_id}* where the *user_identity_id* corresponds
    to the unique Amazon Cognito ID for that user.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件仅对个人用户可访问。文件存储在路径*private/{user_identity_id}*下，其中*user_identity_id*对应于该用户的唯一
    Amazon Cognito ID。
- en: 'By default, when storing a file, it will be set to `public` unless otherwise
    specified:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，存储文件时将设置为*public*，除非另有指定：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you would like to specify either `private` or `protected` access, you need
    to specify the level when saving:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望指定*private*或*protected*访问权限，则在保存时需要指定级别：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The storage category uses Amazon S3 to store file types including images, PDFs,
    video, text files, and more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 存储类别使用 Amazon S3 存储文件类型，包括图像、PDF、视频、文本文件等。
- en: To put this all together, we’ll use a combination of a GraphQL API along with
    Amazon S3 to work as the backend for the app. The GraphQL schema will hold the
    fields for the image title, the image key stored in S3, and the unique ID.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要将所有内容组合在一起，我们将使用 GraphQL API 结合 Amazon S3 作为应用程序后端。GraphQL 模式将保存图像标题、存储在 S3
    中的图像键和唯一 ID 的字段。
- en: 'Let’s take a look at the schema we will be using:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们将使用的模式：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When creating a new post, there are two operations that will need to happen:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新帖子时，需要执行两个操作：
- en: The image is given a unique key and stored in the S3 bucket.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像被赋予唯一的键并存储在 S3 存储桶中。
- en: The post metadata, including the image key, is stored in the GraphQL API.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子元数据，包括存储在 GraphQL API 中的图像键。
- en: 'When reading posts, this will be the sequence of events:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读帖子时，将按以下顺序进行：
- en: GraphQL query to read a list of posts from the GraphQL API.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 GraphQL API 中读取帖子列表的 GraphQL 查询。
- en: Map over the posts array, getting a signed URL for each image in the list of
    posts.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历帖子数组，获取每个帖子列表中图像的签名 URL。
- en: Render the posts using the signed URL for the image as the image source.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用签名 URL 渲染帖子作为图像来源。
- en: The example we will build in this chapter implements a very common and useful
    pattern for building applications that rely on a combination of an API with references
    to large objects, such as images, videos, and files in general that are stored
    in S3.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个示例，实现了一个非常常见和有用的模式，用于构建依赖 API 与大对象引用（如存储在 S3 中的图像、视频和文件等）的应用程序。
- en: Creating the Base Project
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基础项目
- en: To get started, we will create a new React project, initialize an Amplify app,
    and install the dependencies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将创建一个新的 React 项目，初始化一个 Amplify 应用，并安装依赖项。
- en: 'The first thing we will do is create the React project:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建 React 项目：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will install the local dependencies. This project will use Ant Design
    for styling (`antd`), the UUID package for creating unique identifiers (`uuid`)
    along with the AWS Amplify and AWS Amplify React packages:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装本地依赖项。此项目将使用 Ant Design 进行样式化 (`antd`)，使用 UUID 包创建唯一标识符 (`uuid`)，以及
    AWS Amplify 和 AWS Amplify React 包。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, initialize a new Amplify project:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，初始化一个新的 Amplify 项目：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adding Authentication
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加认证
- en: 'Next, add authentication using the `auth` category:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `auth` 类别添加认证：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating the API
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 API
- en: 'Next, we will create the AppSync GraphQL API:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建 AppSync GraphQL API：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For the GraphQL schema, use the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 GraphQL 架构，请使用以下内容：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, we will add storage using the `storage` category:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用 `storage` 类别添加存储：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now services have been configured and they are ready to be deployed:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务已配置完成，准备部署：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that the backend has been deployed, we can start writing the client-side
    code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在后端已经部署完成，我们可以开始编写客户端代码。
- en: Writing the Client-Side Code
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写客户端代码
- en: 'First, open *src/index.js* and configure the Amplify app by adding the following
    code below the last import:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开 *src/index.js* 并通过在最后一个 import 下添加以下代码来配置 Amplify 应用：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This app will have two views: one view for listing posts and one view for creating
    posts. Let’s next create two new components for these views in the *src* directory:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用将有两个视图：一个用于列出帖子，另一个用于创建帖子。接下来，在 *src* 目录中创建这两个视图的两个新组件：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, open *src/App.js* and update it with the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 *src/App.js* 并使用以下代码进行更新：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This component imports the `Posts` and `CreatePost` components and renders one
    of them based on the `viewState` component state.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件导入 `Posts` 和 `CreatePost` 组件，并根据 `viewState` 组件状态渲染其中一个。
- en: To create the `viewState`, we used the `useState` hook. To toggle the value
    of `viewState`, we render a radio group from Ant Design that renders a button
    for either viewing posts (View Posts) or adding a new post (Add Post).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `viewState`，我们使用了 `useState` hook。要切换 `viewState` 的值，我们使用 Ant Design 渲染了一个单选按钮组，以查看帖子（查看帖子）或添加新帖子（添加帖子）。
- en: 'Next, open *src/CreatePost.js* and update it with the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 *src/CreatePost.js* 并使用以下代码进行更新：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: About this component
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于此组件
- en: 'In this component, we allow users to upload an image and create a new post
    with the image and a title:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们允许用户上传图像并使用图像和标题创建新帖子：
- en: The state that this component holds is stored in the `formState` object, created
    using the `useState` hook. This object holds the post `title` as well as the post
    `image`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此组件持有的状态存储在 `formState` 对象中，使用 `useState` hook 创建。此对象包含帖子的 `title` 和帖子的 `image`。
- en: '`onChange` updates the `title` of the `formState` when the user types into
    the input.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onChange` 在用户输入时更新 `formState` 的 `title`。'
- en: '`setPhoto` allows a user to upload an image and stores it in the `formState`
    as the `image`.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setPhoto` 允许用户上传图片并将其存储在 `formState` 中的 `image` 字段中。'
- en: '`savePhoto` is where we store the image in S3 and then save the post information
    to AppSync using a GraphQL mutation:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`savePhoto` 是我们将图像存储在 S3 并使用 GraphQL mutation 将帖子信息保存到 AppSync 的地方：'
- en: We first create a variable called `imageKey` using a combination of the image
    `name` and a `uuid`.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先使用图像的 `name` 和 `uuid` 的组合创建一个名为 `imageKey` 的变量。
- en: We then store the image in S3 using the `imageKey` as the reference.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用 `imageKey` 将图像存储在 S3 中作为参考。
- en: After the image is stored, we then make an API call to AppSync, creating a new
    `Post` using a GraphQL Mutation and passing in the post `title` and `imageKey`
    as the fields.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像存储后，我们通过 AppSync 进行 API 调用，使用 GraphQL Mutation 创建一个新的 `Post`，并传递帖子的 `title`
    和 `imageKey` 作为字段。
- en: 'Next, open *src/Posts.js* and update it with the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 *src/Posts.js* 并使用以下代码进行更新：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: useReducer
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: useReducer
- en: In this component, we are using the `useReducer` hook to manage application
    state. We do this because we will be having a GraphQL subscription that will be
    handling data coming through in real time. Because `useState` creates a closure,
    we must move the state that is outside the component into a reducer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们使用 `useReducer` 钩子来管理应用程序状态。因为我们将使用 GraphQL 订阅来处理实时传入的数据，所以我们这样做。由于
    `useState` 创建闭包，我们必须将组件外部的状态移到一个 reducer 中。
- en: The reducer has two actions, one for adding a single post (`ADD_POST`) and one
    for setting an array of posts (`SET_POSTS`).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: reducer 有两个操作，一个用于添加单个帖子 (`ADD_POST`)，一个用于设置帖子数组 (`SET_POSTS`)。
- en: About this component
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于此组件
- en: 'There are two main things happening in this component:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件中有两件主要事情发生：
- en: '`useEffect`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`useEffect`'
- en: 'When the component loads, this hook will fire, creating a new GraphQL subscription
    and then calling the `fetchPosts` function that we will go over in the next step:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件加载时，此钩子将触发，创建新的 GraphQL 订阅，然后调用我们将在下一步中讨论的 `fetchPosts` 函数：
- en: The subscription will listen for new posts that are created by using the `onCreatePost`
    subscription.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅将监听通过 `onCreatePost` 订阅创建的新帖子。
- en: When a new post is created, the `next` function will fire and the data for the
    new post will come through in the function argument (`post`).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当创建新帖子时，`next` 函数将触发，并且新帖子的数据将通过函数参数 (`post`) 传入。
- en: We then use the post image `imageKey` to get a signed URL by using the Storage
    API, calling `Storage.get`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用帖子图像 `imageKey` 通过 Storage API 获取签名 URL，调用 `Storage.get`。
- en: After getting the signed URL for the image, we add the `imageURL` field to the
    post and dipatch `ADD_POST` to add the new post to the state.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获得图像的签名 URL 后，我们将 `imageURL` 字段添加到帖子中，并分发 `ADD_POST` 以将新帖子添加到状态中。
- en: '`fetchPosts`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchPosts`'
- en: 'This function fetches the posts from the API, then calls `getSignedPosts` passing
    in the posts:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数从 API 获取帖子，然后调用 `getSignedPosts`，将帖子传递给它：
- en: The `getSignedPosts` function will map over all of the posts in the array, get
    a signed URL for the image in the post, and assign a new `imageUrl` field to the
    post with the signed image URL.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getSignedPosts` 函数将映射数组中的所有帖子，获取帖子中图像的签名 URL，并使用签名图像 URL 为帖子分配新的 `imageUrl`
    字段。'
- en: One the signed posts are returned, `SET_POSTS` is dispatched, updating the state
    with the posts array.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回已签名的帖子后，将调度 `SET_POSTS`，使用帖子数组更新状态。
- en: 'That’s it; we should now be able to run the app and test it out:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，现在我们应该能够运行应用程序并测试它：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To test out the subscription/real-time functionality, try opening a new window
    and running the app in both windows, viewing the posts in one window and creating
    a post in another window.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试订阅/实时功能，请尝试打开新窗口并在两个窗口中运行应用程序，在一个窗口中查看帖子，在另一个窗口中创建帖子。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章中记住以下几点：
- en: When working with storage, images cannot be referenced directly by their URL;
    they must be signed using a `Storage.get` call.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理存储时，不能直接通过其 URL 引用图像；必须使用 `Storage.get` 调用对其进行签名。
- en: Once a file is returned with a signed URL, it will be valid for 15 minutes by
    default; after that, it will expire. This can be overridden by passing in an `expires`
    option to set the availability of your URLs.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦文件返回带有签名 URL，它将默认有效 15 分钟；之后将会过期。可以通过传递 `expires` 选项来覆盖此行为，设置 URL 的可用性。
- en: When working with an array of images, you can map over the array and use `Promise.all`
    to get a signed URL for each item in the array.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理图像数组时，可以映射整个数组并使用 `Promise.all` 获取数组中每个项目的签名 URL。
