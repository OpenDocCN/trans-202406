- en: Chapter 10\. Working with Images and Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many applications need to have a way to manage file, image, and video storage.
    While it’s possible to transform these objects into binary data and store them
    directly in your database, it’s usually better not to. Instead, using a managed
    file-hosting service like Amazon S3 is better because it’s less expensive, faster,
    and just as secure.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll look at how to create a photo-sharing app that renders
    posts with photos in a stream in real time, allowing you to share an image along
    with a caption for the image.
  prefs: []
  type: TYPE_NORMAL
- en: Using Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon S3 allows you to have secure file hosting that scales as you need it.
    Amplify uses S3 as the Storage category for handling the storage of files like
    images, videos, PDFs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with S3, you typically will have three types of file access available:'
  prefs: []
  type: TYPE_NORMAL
- en: Public
  prefs: []
  type: TYPE_NORMAL
- en: Items stored with public access will be accessible by all users of your app.
    These files are stored under the *public/* path in your S3 bucket. Public does
    not mean that anyone with the URL of the resource can view it, though. In order
    to be viewed, you must use the Amplify SDK to retrieve a temporarily signed URL
    of the resource. This signed URL will be set to expire after a set period of time
    (15 minutes by default).
  prefs: []
  type: TYPE_NORMAL
- en: Private
  prefs: []
  type: TYPE_NORMAL
- en: Items are readable by all users, but writable only by the creating user. In
    S3, the files are stored under the path *private/{user_identity_id}*, where the
    *user_identity_id* corresponds to the unique Amazon Cognito ID for that user.
  prefs: []
  type: TYPE_NORMAL
- en: Protected
  prefs: []
  type: TYPE_NORMAL
- en: These files are only accessible for the individual user. Files are stored under
    the path *private/{user_identity_id}* where the *user_identity_id* corresponds
    to the unique Amazon Cognito ID for that user.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, when storing a file, it will be set to `public` unless otherwise
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would like to specify either `private` or `protected` access, you need
    to specify the level when saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The storage category uses Amazon S3 to store file types including images, PDFs,
    video, text files, and more.
  prefs: []
  type: TYPE_NORMAL
- en: To put this all together, we’ll use a combination of a GraphQL API along with
    Amazon S3 to work as the backend for the app. The GraphQL schema will hold the
    fields for the image title, the image key stored in S3, and the unique ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the schema we will be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When creating a new post, there are two operations that will need to happen:'
  prefs: []
  type: TYPE_NORMAL
- en: The image is given a unique key and stored in the S3 bucket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The post metadata, including the image key, is stored in the GraphQL API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When reading posts, this will be the sequence of events:'
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL query to read a list of posts from the GraphQL API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map over the posts array, getting a signed URL for each image in the list of
    posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Render the posts using the signed URL for the image as the image source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The example we will build in this chapter implements a very common and useful
    pattern for building applications that rely on a combination of an API with references
    to large objects, such as images, videos, and files in general that are stored
    in S3.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Base Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we will create a new React project, initialize an Amplify app,
    and install the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is create the React project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will install the local dependencies. This project will use Ant Design
    for styling (`antd`), the UUID package for creating unique identifiers (`uuid`)
    along with the AWS Amplify and AWS Amplify React packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, initialize a new Amplify project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Adding Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, add authentication using the `auth` category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creating the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will create the AppSync GraphQL API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For the GraphQL schema, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will add storage using the `storage` category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now services have been configured and they are ready to be deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that the backend has been deployed, we can start writing the client-side
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Client-Side Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, open *src/index.js* and configure the Amplify app by adding the following
    code below the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This app will have two views: one view for listing posts and one view for creating
    posts. Let’s next create two new components for these views in the *src* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open *src/App.js* and update it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This component imports the `Posts` and `CreatePost` components and renders one
    of them based on the `viewState` component state.
  prefs: []
  type: TYPE_NORMAL
- en: To create the `viewState`, we used the `useState` hook. To toggle the value
    of `viewState`, we render a radio group from Ant Design that renders a button
    for either viewing posts (View Posts) or adding a new post (Add Post).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open *src/CreatePost.js* and update it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: About this component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this component, we allow users to upload an image and create a new post
    with the image and a title:'
  prefs: []
  type: TYPE_NORMAL
- en: The state that this component holds is stored in the `formState` object, created
    using the `useState` hook. This object holds the post `title` as well as the post
    `image`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`onChange` updates the `title` of the `formState` when the user types into
    the input.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`setPhoto` allows a user to upload an image and stores it in the `formState`
    as the `image`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`savePhoto` is where we store the image in S3 and then save the post information
    to AppSync using a GraphQL mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We first create a variable called `imageKey` using a combination of the image
    `name` and a `uuid`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We then store the image in S3 using the `imageKey` as the reference.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After the image is stored, we then make an API call to AppSync, creating a new
    `Post` using a GraphQL Mutation and passing in the post `title` and `imageKey`
    as the fields.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open *src/Posts.js* and update it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: useReducer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this component, we are using the `useReducer` hook to manage application
    state. We do this because we will be having a GraphQL subscription that will be
    handling data coming through in real time. Because `useState` creates a closure,
    we must move the state that is outside the component into a reducer.
  prefs: []
  type: TYPE_NORMAL
- en: The reducer has two actions, one for adding a single post (`ADD_POST`) and one
    for setting an array of posts (`SET_POSTS`).
  prefs: []
  type: TYPE_NORMAL
- en: About this component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two main things happening in this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useEffect`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the component loads, this hook will fire, creating a new GraphQL subscription
    and then calling the `fetchPosts` function that we will go over in the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: The subscription will listen for new posts that are created by using the `onCreatePost`
    subscription.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a new post is created, the `next` function will fire and the data for the
    new post will come through in the function argument (`post`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then use the post image `imageKey` to get a signed URL by using the Storage
    API, calling `Storage.get`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After getting the signed URL for the image, we add the `imageURL` field to the
    post and dipatch `ADD_POST` to add the new post to the state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fetchPosts`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function fetches the posts from the API, then calls `getSignedPosts` passing
    in the posts:'
  prefs: []
  type: TYPE_NORMAL
- en: The `getSignedPosts` function will map over all of the posts in the array, get
    a signed URL for the image in the post, and assign a new `imageUrl` field to the
    post with the signed image URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One the signed posts are returned, `SET_POSTS` is dispatched, updating the state
    with the posts array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That’s it; we should now be able to run the app and test it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To test out the subscription/real-time functionality, try opening a new window
    and running the app in both windows, viewing the posts in one window and creating
    a post in another window.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: When working with storage, images cannot be referenced directly by their URL;
    they must be signed using a `Storage.get` call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once a file is returned with a signed URL, it will be valid for 15 minutes by
    default; after that, it will expire. This can be overridden by passing in an `expires`
    option to set the availability of your URLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working with an array of images, you can map over the array and use `Promise.all`
    to get a signed URL for each item in the array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
