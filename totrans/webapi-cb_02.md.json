["```\n/**\n * Determines if local storage is available.\n * @returns true if the browser can use local storage, false if not\n */\nfunction isLocalStorageAvailable() {\n  try {\n    // Local storage is available if the property exists.\n    return typeof window.localStorage !== 'undefined';\n  } catch (error) {\n    // If window.localStorage exists but the user is blocking local\n    // storage, the attempt to read the property throws an exception.\n    // If this happens, consider local storage not available.\n    return false;\n  }\n}\n```", "```\n// A reference to the color picker input element\nconst colorPicker = document.querySelector('#colorPicker');\n\n// Load the saved color, if any, and set it on the color picker.\nconst storedValue = localStorage.getItem('savedColor');\nif (storedValue) {\n  console.log('Found saved color:', storedValue);\n  colorPicker.value = storedValue;\n}\n\n// Update the saved color whenever the value changes.\ncolorPicker.addEventListener('change', event => {\n  localStorage.setItem('savedColor', event.target.value);\n  console.log('Saving new color:', colorPicker.value);\n});\n```", "```\n/**\n * Given a user profile object, serialize it to JSON and store it in local storage.\n * @param userProfile the profile object to save\n */\nfunction saveProfile(userProfile) {\n  localStorage.setItem('userProfile', JSON.stringify(userProfile));\n}\n\n/**\n * Loads the user profile from local storage and deserializes the JSON back to\n * an object. If there is no stored profile, an empty object is returned.\n * @returns the stored user profile or an empty object.\n */\nfunction loadProfile() {\n  // If there is no stored userProfile value, this will return null. In this case,\n  // use the default value of an empty object.\n  return JSON.parse(localStorage.getItem('userProfile')) || {};\n}\n```", "```\nconst userProfile = {\n  firstName: 'Ava',\n  lastName: 'Johnson'\n};\n\nlocalStorage.setItem('userProfile', userProfile);\n\n// Prints [object Object]\nconsole.log(localStorage.getItem('userProfile'));\n```", "```\n{\n  \"firstName\": \"Ava\",\n  \"lastName\": \"Johnson\"\n}\n```", "```\nconst userProfile = {\n  firstName: 'Ava',\n  lastName: 'Johnson',\n\n  // This date represents June 2, 2025.\n  // Months start with zero but days start with 1.\n  lastUpdated: new Date(2025, 5, 2);\n}\n```", "```\nconst json = JSON.stringify(userProfile);\n```", "```\n{\n  \"firstName\": \"Ava\",\n  \"lastName\": \"Johnson\",\n  \"lastUpdated\": '2025-06-02T04:00:00.000Z'\n}\n```", "```\nfunction replacer(key, value) {\n  if (key === '') {\n    // First replacer call, \"value\" is the object itself.\n    // Return all properties of the object, but transform lastUpdated.\n    // This uses object spread syntax to make a copy of \"value\" before\n    // adding the lastUpdated property.\n    return {\n      ...value,\n      lastUpdated: value.lastUpdated.getTime()\n    };\n  }\n\n  // After the initial transformation, the replacer is called once\n  // for each key/value pair.\n  // No more replacements are necessary, so return these as is.\n  return value;\n}\n```", "```\nconst json = JSON.stringify(userProfile, replacer);\n```", "```\n{\n  \"firstName\": \"Ava\",\n  \"lastName\": \"Johnson\",\n  \"lastUpdated\": 1748836800000\n}\n```", "```\nfunction reviver(key, value) {\n  // JSON.parse calls the reviver once for each key/value pair.\n  // Watch for the lastUpdated key.\n  // Only proceed if there's actually a value for lastUpdated.\n  if (key === 'lastUpdated' && value) {\n    // Here, the value is the timestamp. You can pass this to the Date constructor\n    // to create a Date object referring to the proper time.\n    return new Date(value);\n  }\n\n  // Restore all other values as is.\n  return value;\n}\n```", "```\nconst object = JSON.parse(userProfile, reviver);\n```", "```\n{\n  firstName: 'Ava',\n  lastName: 'Johnson',\n  lastUpdated: [Date object representing June 2, 2025]\n}\n```", "```\n/**\n * A factory function to create a user profile object,\n * with the lastUpdated property set to today and a toJSON method\n *\n * @param firstName The user's first name\n * @param lastName The user's last name\n */\nfunction createUser(firstName, lastName) {\n  return {\n    firstName,\n    lastName,\n    lastUpdated: new Date(),\n    toJSON() {\n      return {\n        firstName: this.firstName,\n        lastName: this.lastName,\n        lastUpdated: this.lastUpdated.getTime();\n      }\n    }\n  }\n}\n\nconst userProfile = createUser('Ava', 'Johnson');\n```", "```\n// Listen for the 'storage' event. If another tab changes the\n// 'savedColor' item, update this page's color picker with the new value.\nwindow.addEventListener('storage', event => {\n  if (event.key === 'savedColor') {\n    console.log('New color was chosen in another tab:', event.newValue);\n    colorPicker.value = event.newValue;\n  }\n});\n```", "```\n/**\n * Generates an array of all keys found in the local storage area\n * @returns an array of keys\n */\nfunction getAllKeys() {\n  const keys = [];\n\n  for (let i = 0; i < localStorage.length; i++) {\n    keys.push(localStorage.key(i));\n  }\n\n  return keys;\n}\n```", "```\nfunction getAll(keys) {\n  const results = {};\n\n  // Check each key in local storage.\n  for (let i = 0; i < localStorage.length; i++) {\n\n    // Get the ith key. If the keys array includes this key, add it and its value\n    // to the results object.\n    const key = localStorage.key(i);\n    if (keys.includes(key)) {\n      results[key] = localStorage.getItem(key);\n    }\n  }\n\n  // results now has all key/value pairs that exist in local storage.\n  return results;\n}\n```", "```\n// This is a safe operation. If the key doesn't exist,\n// no exception is thrown.\nlocalStorage.removeItem('my-key');\n```", "```\nlocalStorage.clear();\n```"]