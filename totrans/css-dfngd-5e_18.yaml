- en: Chapter 18\. Transitions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章。过渡
- en: CSS transitions allow us to animate CSS properties from an original value to
    a new value over time. These changes *transition* an element from one state to
    another, in response to a change. This usually involves a user interaction but
    can also be due to a scripted change of class, ID, or other state.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 过渡允许我们随着时间从原始值动画 CSS 属性到新值。这些变化*过渡*了元素从一个状态到另一个状态，响应某种变化。通常这涉及用户交互，但也可能是由于脚本更改类、ID
    或其他状态。
- en: Normally, when a CSS property value changes—when a *style change event* occurs—the
    change is instantaneous. The new property value replaces the old property in the
    milliseconds it takes to repaint the page (or to reflow and repaint, when necessary).
    Most value changes seem instantaneous, taking fewer than 16 milliseconds to render.
    Even if the changes take longer than that (like when a large image is replaced
    with one that isn’t pre-fetched—which isn’t a transition, just poor performance),
    it is still a single step from one value to the next. For example, when changing
    a background color on mouse hover, the background immediately changes from one
    color to the other, with no gradual transition.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当 CSS 属性值发生变化时——即发生*样式更改事件*时——变化是瞬时的。新的属性值在重新绘制页面时（或在必要时重新布局和重绘）立即替换旧的属性值。大多数值的变化似乎是瞬时的，渲染时间少于
    16 毫秒。即使变化时间超过这个时间（比如当一个大图像被未预取的图像替换时——这不是过渡，只是性能差），仍然是从一个值到另一个值的单一步骤。例如，当鼠标悬停在背景颜色上时，背景立即从一种颜色变为另一种颜色，没有渐变过程。
- en: CSS Transitions
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 过渡
- en: 'CSS transitions provide a way to control how a property changes from one value
    to the next over a period of time. Thus, we can make the property values change
    gradually, creating (hopefully) pleasant and unobtrusive effects. For example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 过渡提供了一种控制属性如何在一段时间内从一个值变化到另一个值的方法。因此，我们可以使属性值逐渐变化，创造（希望是）愉悦且不显眼的效果。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, instead of instantaneously changing a button’s `color` value
    on hover, that `transition` property means the button’s `color` will gradually
    fade from `magenta` to `rebeccapurple` over 200 milliseconds, even adding a 50-millisecond
    delay before starting the transition.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，而不是在悬停时立即更改按钮的`color`值，`transition`属性意味着按钮的`color`将在 200 毫秒内从`magenta`逐渐淡入到`rebeccapurple`，甚至在开始过渡前添加
    50 毫秒的延迟。
- en: In the unlikely event that a browser doesn’t support CSS transition properties,
    the change is immediate instead of gradual, which is completely fine. If a given
    property or some property values aren’t animatable, again, the change will be
    immediate instead of gradual.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器不支持 CSS 过渡属性（这种情况几乎不会发生），则变化是立即的而不是逐渐的，这完全没问题。如果某个属性或某些属性值不可动画化，则变化也将是即时的而不是逐渐的。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When we say *animatable*, we mean any properties that can be animated, whether
    through transitions or animations (the subject of the next chapter, [Chapter 19](ch19.html#animation)).
    The property definition boxes throughout the book indicate whether a given property
    is animatable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说*可动画*时，我们指的是可以通过过渡或动画（下一章的主题，[第 19 章](ch19.html#animation)）进行动画化的任何属性。本书中的属性定义框指出给定属性是否可动画。
- en: 'Often you will want instantaneous value changes. For example, link colors usually
    change instantly on hover or focus, informing sighted users that an interaction
    is occurring and that the focused content is a link. Similarly, options in an
    autocomplete listbox shouldn’t fade in: you want the options to appear instantly,
    rather than fade in more slowly than the user types. Instantaneous value changes
    are often the best user experience.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您会希望即时进行值的更改。例如，链接颜色通常在悬停或焦点时立即更改，通知视觉用户发生了交互，并且焦点内容是一个链接。类似地，自动完成列表框中的选项不应该淡入：您希望选项立即出现，而不是在用户键入时比慢慢淡入。即时值的更改通常是最佳的用户体验。
- en: At other times, you’ll want a property’s value to change more gradually, bringing
    attention to what is occurring. For example, you may want to make a card game
    more realistic by taking 200 milliseconds to animate the flipping of a card, as
    the user may not realize what happened if there is no animation. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/cardflip.html)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他时候，您可能希望属性的值更渐变地变化，以引起注意。例如，您可能希望通过花费 200 毫秒来动画翻转卡片，使得卡片游戏更加逼真，因为如果没有动画，用户可能不会意识到发生了什么。[![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/cardflip.html)
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Look for the Play symbol ![](assets/play-icon-round.png) to know when an online
    example is available. All of the examples in this chapter can be found at [*https://meyerweb.github.io/csstdg5figs/18-transitions*](https://meyerweb.github.io/csstdg5figs/18-transitions).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找播放符号 ![](assets/play-icon-round.png) 以了解在线示例的可用性。本章中的所有示例都可以在 [*https://meyerweb.github.io/csstdg5figs/18-transitions*](https://meyerweb.github.io/csstdg5figs/18-transitions)
    找到。
- en: As another example, you may want some drop-down menus to expand or become visible
    over 200 milliseconds (instead of instantly, which may be jarring). With transitions,
    you can make a drop-down menu appear slowly. In [Figure 18-1](#tr_fig01) [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/menus-initial-midtransition-and-final-state.html),
    we transition the submenu’s height by making a scale transform. This is a common
    use for CSS transitions, which we will also explore later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，您可能希望一些下拉菜单在200毫秒内展开或可见（而不是立即，这可能会令人不适）。使用过渡效果，您可以使下拉菜单缓慢显示。在 [图 18-1](#tr_fig01)
    [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/menus-initial-midtransition-and-final-state.html)
    中，我们通过缩放变换来过渡子菜单的高度。这是CSS过渡的常见用法，我们稍后在本章中还将探讨这个话题。
- en: Warning
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Especially rapid transitions, particularly those that move over large distances
    or take up major parts of a page, *can potentially lead to seizures in some users.*
    To reduce or eliminate this risk, use the `prefers-reduced-motion` media query
    (see [Chapter 21](ch21.html#css-at-rules)). Always keep these concerns in mind,
    and ensure the accessibility of your designs to people with epilepsy and other
    seizure disorders.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是快速过渡效果，尤其是移动距离较大或占据页面主要部分的过渡效果，*可能会导致某些用户癫痫发作*。为了降低或消除这种风险，请使用 `prefers-reduced-motion`
    媒体查询（请参见 [第21章](ch21.html#css-at-rules)）。始终牢记这些问题，并确保设计对癫痫和其他癫痫症患者具有可访问性。
- en: '![css5 1801](assets/css5_1801.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1801](assets/css5_1801.png)'
- en: Figure 18-1\. Initial transition, midtransition, and final state
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-1\. 初始过渡，中间过渡和最终状态
- en: Transition Properties
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡属性
- en: 'In CSS, transitions are written using four transition properties: `transition-property`,
    `transition-duration`, `transition-timing-function`, and `transition-delay`, along
    with the `transition` property as a shorthand for those four.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，过渡效果通过四个过渡属性来定义：`transition-property`、`transition-duration`、`transition-timing-function`
    和 `transition-delay`，同时使用 `transition` 属性作为这些属性的缩写形式。
- en: 'To create the drop-down navigation in [Figure 18-1](#tr_fig01), we used all
    four CSS transition properties, as well as some transform properties defining
    the beginning and end states of the transition. The following code defines the
    transition for that example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建 [图 18-1](#tr_fig01) 中的下拉导航，我们使用了所有四个 CSS 过渡属性，以及一些定义过渡开始和结束状态的变换属性。以下代码定义了该示例的过渡效果：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although we are using the `:hover` and `:focus` states for the style change
    event in this example, you can transition properties in other scenarios too. For
    example, you might add or remove a class, or otherwise change the state—say, by
    changing an input from `:invalid` to `:valid` or from `:checked` to `:not(:checked)`.
    Or you might append a table row at the end of a zebra-striped table or a list
    item at the end of a list with styles based on `:nth-last-of-type` selectors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在此示例中使用 `:hover` 和 `:focus` 状态进行样式更改事件，但您也可以在其他情境下过渡属性。例如，您可以添加或删除类，或以其他方式改变状态—比如，从
    `:invalid` 变为 `:valid` 或从 `:checked` 变为 `:not(:checked)`。或者您可以在斑马条纹表或基于 `:nth-last-of-type`
    选择器的列表末尾附加表行或列表项。
- en: 'In [Figure 18-1](#tr_fig01), the initial state of the nested lists is `transform:`
    `scale(1, 0)` with a `transform-origin: top center`. The final state is `transform:`
    `scale(1, 1)`, while the `transform-origin` remains the same. (For more information
    on transform properties, see [Chapter 17](ch17.html#transforms).)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '在 [图 18-1](#tr_fig01) 中，嵌套列表的初始状态是 `transform:` `scale(1, 0)`，并且使用 `transform-origin:
    top center`。最终状态是 `transform:` `scale(1, 1)`，而 `transform-origin` 保持不变。（有关变换属性的更多信息，请参见
    [第17章](ch17.html#transforms)。）'
- en: 'In this example, the transition properties define a transition on the `transform`
    property: when the new `transform` value is set on `hover`, the nested unordered
    list scales to its original, default size, changing smoothly between the old value
    of `transform: scale(1, 0)` and the new value of `transform: scale(1, 1)`, all
    over a period of 200 milliseconds. This transition starts after a 50-millisecond
    delay, and *eases in*, which means it proceeds slowly at first, then picks up
    speed as it progresses.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，过渡属性定义了对`transform`属性的过渡：当在`hover`状态下设置新的`transform`值时，嵌套的无序列表将缩放到其原始默认大小，旧的`transform:
    scale(1, 0)`值和新的`transform: scale(1, 1)`值之间会平滑地变化，整个过程持续200毫秒。这个过渡在延迟50毫秒后开始，并*缓慢地进入*，这意味着它一开始会缓慢进行，然后随着时间的推移加快速度。'
- en: Whenever an animatable target property changes, if a transition is set on that
    property, the browser will apply a transition to make the change gradual.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个可动画目标属性发生变化时，如果该属性上设置了过渡效果，浏览器将应用过渡效果使变化逐渐进行。
- en: 'Note that all the transition properties were set for the default unhovered/unfocused
    state of the `<ul>` elements. These states were used to change only the transform,
    not the transition. There’s a very good reason for this: it means that the menus
    not only will slide open when the state change happens, but also will slide closed
    when the hover or focus state ends.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有过渡属性都是为默认的未悬停/未聚焦状态的`<ul>`元素设置的。这些状态仅用于改变变换，而不是过渡。这样做有一个很好的理由：这意味着菜单不仅在状态变化时会滑动打开，而且在悬停或焦点状态结束时也会滑动关闭。
- en: 'Imagine that the transition properties were applied to the interaction states
    instead, like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下如果过渡属性被应用于互动状态，就像这样：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That would mean that when *not* hovered or focused, the element would have default
    transition values—which is to say, no transitions or instantaneous transitions.
    The menus in our previous example would slide open, but instantly disappear when
    the interaction state ends—because no longer being in an interactive state, the
    transition properties would no longer apply!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当未*悬停*或*聚焦*时，元素将具有默认的过渡值——也就是说，没有过渡或瞬时过渡。我们之前示例中的菜单会在互动状态结束时滑动打开，但一旦互动状态结束，即不再处于互动状态时，过渡属性将不再适用！
- en: 'Maybe you want exactly this effect: slide smoothly open but instantly disappear.
    If so, then apply the transitions as shown in the previous example. Otherwise,
    apply them to the element in the default state directly so that the transitions
    will apply as the interaction state is both entered and exited. When the state
    change is exited, the transition timing is reversed. You can override this default
    reverse transition by declaring different transitions in both the initial and
    changed states.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你确实想要这种效果：平滑地打开但瞬间消失。如果是这样，请按照前面的示例应用过渡效果。否则，直接将它们应用于默认状态的元素，以便在进入和退出互动状态时应用过渡效果。当退出状态变化时，过渡时间会反转。你可以通过在初始和改变状态中声明不同的过渡来覆盖这种默认的反向过渡效果。
- en: 'By *initial state*, we mean a state that matches the element at page load time.
    It could mean a content-editable element that could get `:focus`, as in the following:
    [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/contenteditable.html)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*初始状态*指的是在页面加载时匹配元素的状态。这可能意味着一个可编辑内容的元素可能会获得`:focus`，如下所示：[![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/contenteditable.html)'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the fully transparent background is always the initial state,
    changing only when the user gives the element focus. This is what we mean when
    we say *initial* or *default* value throughout this chapter. The transition properties
    included in the selector that matches the element all the time will impact that
    element whenever the state changes, including from the initial state to the changed
    state (being focused, in the preceding example).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，完全透明的背景始终是初始状态，只有在用户给元素焦点时才会改变。这就是我们在本章中提到的*初始*或*默认*值的含义。选择器中包含的过渡属性将影响该元素在状态改变时的表现，包括从初始状态到改变状态（例如在上述例子中被聚焦时）。
- en: 'An initial state could also be a temporary state that may change, such as a
    `:checked` checkbox or a `:valid` form control, or even a class that gets toggled
    on and off:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态也可以是一个临时状态，可能会改变，例如`:checked`复选框或`:valid`表单控件，甚至是一个被切换打开和关闭的类：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, either the `:valid` or `:invalid` selector can match any given
    element, but never both. The `:focus` selector, as shown in [Figure 18-2](#tr_fig0202),
    matches whenever an input has focus, regardless of whether the input is matching
    the `:valid` or `:invalid` selector simultaneously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`:valid`或`:invalid`选择器可以匹配任何给定元素，但永远不会同时匹配。如 [图18-2](#tr_fig0202) 中所示，`:focus`选择器在输入框有焦点时匹配，无论输入框是否同时匹配`:valid`或`:invalid`选择器。
- en: In this case, when we refer to the initial state, we are referring to the original
    value, which could be either `:valid` or `:invalid`. The changed state for a given
    element is the opposite of the initial `:valid` or `:invalid` state. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/input-appearance-valid-invalid-focus.html)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当我们提到初始状态时，我们指的是原始值，可以是`:valid`或`:invalid`。给定元素的更改状态是初始`:valid`或`:invalid`状态的相反状态。[![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/input-appearance-valid-invalid-focus.html)
- en: '![css5 1802](assets/css5_1802.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1802](assets/css5_1802.png)'
- en: Figure 18-2\. The input’s appearance in the valid, invalid, and focused states
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-2\. 在有效、无效和焦点状态下的输入框外观
- en: 'Remember, you can apply different transition values to the initial and changed
    states, but you always want to apply the value used when you *enter* a given state.
    Take the following code as an example, where the transitions are set up to have
    menus slide open over 2 seconds but close in just 200 milliseconds:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以将不同的过渡值应用于初始状态和更改后的状态，但始终要应用于*进入*给定状态时使用的值。以以下代码为例，这里设置了菜单在2秒内滑动打开，但在200毫秒内关闭：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This provides a horrible user experience, but it illustrates the point. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/menus-very-slow-transition.html)
    When hovered or focused, the opening of the navigation takes a full 2 seconds.
    When closing, it quickly closes over 0.2 seconds. The transition properties in
    the changed state are in force when a list item is hovered or focused. Thus, the
    `transition-duration: 2s` defined for these states takes effect. When a menu is
    no longer hovered or focused, it returns to the default scaled-down state, and
    the transition properties of the initial state—the `nav li ul` condition—are used,
    causing the menu to take 200 milliseconds to close.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '这提供了一个糟糕的用户体验，但它阐明了这一点。[![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/menus-very-slow-transition.html)
    悬停或关注时，导航打开需要整整2秒。关闭时，它在0.2秒内迅速关闭。更改状态中的过渡属性在列表项悬停或关注时生效。因此，为这些状态定义的`transition-duration:
    2s`生效。当菜单不再悬停或关注时，它返回到默认的缩小状态，并使用初始状态的过渡属性——`nav li ul`条件——导致菜单花费200毫秒关闭。'
- en: Look more closely at the example, specifically the default transition styles.
    When the user stops hovering over or focusing on the parent navigational element
    or the child drop-down menu, the drop-down menu delays 50 milliseconds before
    starting the `200ms` transition to close. This is actually a decent user experience
    style, because it give users a chance (however brief) to get the mouse pointer
    or focused ring back on a menu before it starts closing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地查看示例，特别是默认的过渡样式。当用户停止悬停或关注父导航元素或子下拉菜单时，下拉菜单延迟50毫秒，然后开始`200ms`的过渡以关闭。这实际上是一种体验良好的用户体验样式，因为它给了用户一个（虽然很短暂的）机会将鼠标指针或焦点环回到菜单上，然后再开始关闭。
- en: While the four transition properties can be declared separately, you will probably
    always use the shorthand. We’ll take a look at the four properties individually
    first so you have a good understanding of what each one does.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以单独声明四个过渡属性，但通常会使用简写。首先我们将逐个查看这四个属性，以便你能深入了解各自的作用。
- en: Limiting Transition Effects by Property
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过属性限制过渡效果
- en: The `transition-property` property specifies the names of the CSS properties
    you want to transition. This allows you to limit the transition to only certain
    properties, while having other properties change instantaneously. And, yes, it’s
    weird to say “the `transition-property` property.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-property`属性指定要过渡的CSS属性的名称。这样可以限制只对某些属性进行过渡，而其他属性则立即改变。没错，说“`transition-property`属性”确实有点奇怪。'
- en: The value of `transition-property` is a comma-separated list of properties;
    the keyword `none` if you want no properties transitioned; or the default `all`,
    which means “transition all the animatable properties.” You can also include the
    keyword `all` within a comma-separated list of properties.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-property`的值是属性的逗号分隔列表；如果您不想过渡任何属性，请使用关键字`none`；或默认的`all`，表示“过渡所有可动画属性”。您还可以在逗号分隔的属性列表中包含关键字`all`。'
- en: 'If you include `all` as the only keyword—or default to `all`—all animatable
    properties will transition in unison. Let’s say you want to change a box’s appearance
    on hover:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`all`作为唯一关键字包含——或默认为`all`——所有可动画属性将同时过渡。假设您想在悬停时改变框的外观：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the mouse pointer hovers over the `<div>`, every property that has a different
    value in the initial state versus the hovered (changed) state will change to the
    hover-state values. The `transition-property` property is used to define which
    of those properties are animated over time (versus those that change instantly,
    without animating). All the properties change from the default value to the hovered
    value on `hover`, but only the animatable properties included in the `transition-property`
    will change over the transition’s duration. Nonanimatable properties like `border-style`
    change from one value to the next instantly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针悬停在`<div>`上时，初始状态与悬停（更改）状态具有不同值的每个属性都将更改为悬停状态的值。`transition-property`属性用于定义哪些属性随时间动画（而不是立即更改）。所有属性都在`hover`时从默认值更改为悬停值，但只有在`transition-property`中包含的可动画属性会在过渡期间发生变化。像`border-style`之类的不可动画属性会立即从一个值更改为另一个值。
- en: If `all` is the only value or the last value in the comma-separated value for
    `transition-property`, all the animatable properties will transition in unison.
    Otherwise, provide a comma-separated list of properties to be affected by the
    transition properties.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`transition-property`的逗号分隔值中，`all`是唯一的值或者是最后一个值，那么所有可动画属性将同时过渡。否则，请提供一个逗号分隔的属性列表，以便过渡属性影响这些属性。
- en: 'Thus, if we want to transition all the properties, the following statements
    are almost equivalent:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们希望过渡所有属性，下面的声明几乎是等效的：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Both `transition-property` property declarations will transition all the properties
    listed—but the former will transition only the six properties that may change.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 两个`transition-property`属性声明都将过渡所有列出的属性，但前者仅过渡可能更改的六个属性。
- en: 'The `transition-property: all` in the latter rule ensures that *all* animatable
    property values that would change based on any style change event—no matter which
    CSS rule block includes the changed property value—transitions over 1 second.
    The transition applies to all animatable properties applied to all the elements
    matched by the selector, not just the properties declared in the same style block
    as the `all`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '在后一条规则中，`transition-property: all`确保了基于任何样式更改事件的可动画属性值的过渡时间为1秒。该过渡适用于选择器匹配的所有元素上应用的所有可动画属性，而不仅仅是在相同样式块中声明的属性。'
- en: 'In this case, the first version limits the transition to only the six properties
    listed, but enables us to provide more control over how each property will transition.
    Declaring the properties individually lets us provide different speeds, delays,
    and/or durations to each property’s transition:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，第一个版本将过渡限制为仅列出的六个属性，但使我们能够更好地控制每个属性的过渡方式。逐个声明属性使我们能够为每个属性的过渡提供不同的速度、延迟和/或持续时间：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to define the transitions for each property separately, write them
    all out, separating each of the properties with a comma. If you want to animate
    almost all the properties with the same duration, delay, and pace, with a few
    exceptions, you can use a combination of `all` and the individual properties you
    want to transition at different times, speeds, or paces. Just make sure to use
    `all` as the first value, because any properties listed before the `all` will
    be included in the `all`, overriding any other transition property values you
    intended to apply to those now overridden properties:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要分别为每个属性定义过渡效果，请将所有属性都写出来，并使用逗号分隔每个属性。如果您希望以相同的持续时间、延迟和速度动画几乎所有属性，但有少数例外，您可以同时使用`all`和您希望在不同时间、速度或速度下过渡的个别属性的组合。只需确保将`all`作为第一个值使用，因为在`all`之前列出的任何属性将包含在`all`中，覆盖您打算应用于这些现在被覆盖属性的任何其他过渡属性值：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `all` part of the comma-separated value includes all the properties listed
    in the example, as well as all the inherited CSS properties, and all the properties
    defined in any other CSS rule block matching or inherited by the element.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号分隔值的`all`部分包括示例中列出的所有属性，以及所有继承的CSS属性，以及与元素匹配或继承的任何其他CSS规则块中定义的所有属性。
- en: In the preceding example, all the properties getting new values will transition
    at the same duration, delay, and timing function, with the exception of `border-radius`
    and `opacity`, which we’ve explicitly included separately. Because we included
    them as part of a comma-separated list after the `all`, we can transition them
    at the same time, delay, and timing function as all the other properties, or we
    can provide different times, delays, and timing functions for these two properties.
    In this case, we transition all the properties over 1 second, except for `border-radius`
    and `opacity`, which we transition over 2 seconds and 3 seconds, respectively.
    (The `transition-duration` property is covered in an upcoming section.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，所有获取新值的属性将以相同的持续时间、延迟和时间函数过渡，除了`border-radius`和`opacity`，我们明确单独包含它们。因为我们将它们作为`all`后面逗号分隔列表的一部分包含，我们可以将它们与所有其他属性一起过渡，或者我们可以为这两个属性提供不同的时间、延迟和时间函数。在这种情况下，我们将所有属性过渡时间设置为1秒，除了`border-radius`和`opacity`，分别设置为2秒和3秒。（`transition-duration`属性将在后面的章节中讨论。）
- en: Suppressing transitions via property limits
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过属性限制抑制过渡
- en: 'While transitioning over time doesn’t happen by default, if you do include
    a CSS transition and want to override that transition in a particular scenario,
    you can set `transition-property: none` to override the entire transition and
    ensure that no properties are transitioned.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然默认情况下不会自动过渡时间，但如果您确实包含了CSS过渡，并且想要在特定场景中覆盖该过渡，您可以设置`transition-property: none`来覆盖整个过渡，并确保不会过渡任何属性。'
- en: The `none` keyword can be used as only a unique value of the property—you can’t
    include it as part of a comma-separated list of properties. If you want to override
    the transition of a limited set of properties, you will have to list all of the
    properties you still want to transition. You can’t use the `transition-property`
    property to exclude properties; rather, you can use that property only to include
    them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`none`关键字只能作为属性的唯一值使用—不能将其作为属性的逗号分隔列表的一部分包含。如果您想要覆盖有限属性集的过渡，您必须列出仍然希望过渡的所有属性。您不能使用`transition-property`属性来排除属性；而是只能使用该属性来包含它们。'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Another method is to set the delay and duration of the property to `0s`. That
    way, it will appear instantaneously, as if no CSS transition is being applied
    to it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是将属性的延迟和持续时间设置为`0s`。这样，它将立即显示，就好像没有应用CSS过渡。
- en: Transition events
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过渡事件
- en: 'The TransitionEvent Interface provides for four transition-related events:
    `transitionstart`, `transitionrun`, `transitionend`, and `transitioncancel`. We’ll
    concentrate on `transitionend`, as it’s the one that can be triggered multiple
    times by a single piece of CSS.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: TransitionEvent 接口提供了四个与过渡相关的事件：`transitionstart`、`transitionrun`、`transitionend`和`transitioncancel`。我们将重点关注`transitionend`，因为它是可以由单个CSS多次触发的事件。
- en: 'A `transitionend` event is fired at the end of every transition, in either
    direction, for every property that is transitioned over any amount of time *or*
    after any delay. This happens whether the property is declared individually or
    is part of the `all` declaration. Some seemingly simple property declarations
    will use several `transitionend` events, as every animatable property within a
    shorthand property gets its own `transitionend` event. Consider the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每次过渡结束时，无论属性是单独声明还是作为`all`声明的一部分，都会触发一个`transitionend`事件，无论是向任何方向过渡还是在任何延迟后。一些看似简单的属性声明会使用多个`transitionend`事件，因为缩写属性中的每个可动画属性都会有自己的`transitionend`事件。考虑以下情况：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the transitions conclude, well over six `transitionend` events will have
    occurred. For example, the `border-radius` transition alone produces four `transitionend`
    events, one each for the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当过渡结束时，将会发生超过六个`transitionend`事件。例如，仅`border-radius`过渡就会产生四个`transitionend`事件，分别为以下每个：
- en: '`border-bottom-left-radius`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-bottom-left-radius`'
- en: '`border-bottom-right-radius`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-bottom-right-radius`'
- en: '`border-top-right-radius`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-top-right-radius`'
- en: '`border-top-left-radius`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-top-left-radius`'
- en: 'The `padding` property is also shorthand for four longhand properties:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`padding` 属性也是四个长手属性的缩写：'
- en: '`padding-top`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding-top`'
- en: '`padding-right`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding-right`'
- en: '`padding-bottom`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding-bottom`'
- en: '`padding-left`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding-left`'
- en: 'The `border` shorthand property produces eight `transitionend` events: four
    values for the four properties represented by the `border-width` shorthand, and
    four for the properties represented by `border-color`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`border` 缩写属性产生八个 `transitionend` 事件：四个值用于由 `border-width` 缩写表示的四个属性，另外四个用于由
    `border-color` 表示的属性：'
- en: '`border-left-width`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-left-width`'
- en: '`border-right-width`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-right-width`'
- en: '`border-top-width`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-top-width`'
- en: '`border-bottom-width`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-bottom-width`'
- en: '`border-top-color`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-top-color`'
- en: '`border-left-color`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-left-color`'
- en: '`border-right-color`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-right-color`'
- en: '`border-bottom-color`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-bottom-color`'
- en: The `border-style` properties have no `transitionend` events, however, as `border-style`
    is not an animatable property.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`border-style` 属性没有 `transitionend` 事件，因为 `border-style` 不是一个可动画化的属性。'
- en: 'There will be 19 `transitionend` events in the scenario where six specific
    properties—`color`, `border`, `border-radius`, `opacity`, `width`, and `padding`—are
    listed, as those six include several shorthand properties. In the case of `all`,
    there will be at least 19 `transitionend` events: one for each of the longhand
    values making up the six properties we know are included in the pre- and post-transition
    states, and possibly from others that are inherited or declared in other style
    blocks impacting the element. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transitionend.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出了六个特定属性——`color`、`border`、`border-radius`、`opacity`、`width` 和 `padding`——的情况下，会有
    19 个 `transitionend` 事件：这六个属性包括几个缩写属性的长手属性的每个值，以及可能从其他影响元素的继承或在其他样式块中声明的属性值。
- en: 'You can listen for `transitionend` events like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样监听 `transitionend` 事件：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `transitionend` event includes three event-specific attributes:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitionend` 事件包含三个特定事件属性：'
- en: '`propertyName`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`propertyName`'
- en: The name of the CSS property that just finished transitioning.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 属性刚刚完成过渡的名称。
- en: '`pseudoElement`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`pseudoElement`'
- en: The pseudo-element upon which the transition occurred, preceded by two semicolons,
    or an empty string if the transition was on a regular DOM node.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡发生在的伪元素，由两个分号引导，如果过渡是在常规 DOM 节点上，则为空字符串。
- en: '`elapsedTime`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`elapsedTime`'
- en: The amount of time the transition took to run, in seconds; usually this is the
    time listed in the `transition-duration` property.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡运行所花费的时间，通常是在 `transition-duration` 属性中列出的时间。
- en: A `transitionend` event will occur for each property that successfully transitions
    to a new value. It will not fire if the transition is interrupted, such as by
    removing the state change that initiated the transition or by another change to
    the same property on the same element. That said, a `transitionend` event *will*
    occur when it reverts back to its initial value, or when it finishes transitioning
    to the value made by that other property value change on the element.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于成功过渡到新值的每个属性，将会发生一个 `transitionend` 事件。如果过渡被中断，比如移除导致过渡的状态更改或同一元素上的另一个属性更改，则不会触发。尽管如此，当它恢复到初始值或完成由元素上的其他属性值更改所做的值的过渡时，*将*
    发生 `transitionend` 事件。
- en: When the properties return to their initial value, another `transitionend` event
    occurs. This event occurs as long as the transition started, even if it didn’t
    finish its initial transition in the original direction.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性返回到其初始值时，会再次触发 `transitionend` 事件。只要过渡开始，即使没有在原始方向完成初始过渡，此事件也会发生。
- en: Setting Transition Duration
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置过渡持续时间
- en: The `transition-duration` property takes as its value a comma-separated list
    of lengths of time, in seconds (`s`) or milliseconds (`ms`). These time values
    describe the time it will take to transition from one state to another.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-duration` 属性的值是以逗号分隔的时间长度列表，单位可以是秒（`s`）或毫秒（`ms`）。这些时间值描述了从一个状态过渡到另一个状态所需的时间。'
- en: 'When moving between two states, if a duration is declared for only one of those
    states, the transition duration will be used for only the transition *to* that
    state. Consider the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个状态之间移动时，如果仅为其中一个状态声明了持续时间，则过渡持续时间将仅用于 *到* 该状态的过渡。考虑以下情况：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Thus, it will take 1 second for the input to change to a red background when
    it becomes invalid, and only 200 milliseconds to transition to a green background
    when it becomes valid. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transition-duration-revert-difference.html)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当输入无效时，将需要1秒才能将其更改为红色背景，当其有效时，仅需200毫秒即可过渡为绿色背景。[![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transition-duration-revert-difference.html)
- en: The value of the `transition-duration` property is positive in either seconds
    (`s`) or milliseconds (`ms`). The time unit of `ms` or `s` is required by the
    specification, even if the duration is set to `0s`. By default, properties change
    from one value to the next instantly, showing no visible animation, which is why
    the default value for the duration of a transition is `0s`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-duration` 属性的值为正数，可以是秒 (`s`) 或毫秒 (`ms`)。规范要求使用 `ms` 或 `s` 的时间单位，即使持续时间设置为
    `0s`。默认情况下，属性从一个值瞬间变为另一个值，不显示可见动画，这就是过渡持续时间的默认值为 `0s` 的原因。'
- en: Unless a positive value for `transition-delay` is set on a property, if `transition-duration`
    is omitted, it is as if no `transition-property` declaration had been applied,
    and no `transitionend` event will occur. As long as the total duration time for
    a transition is greater than 0 seconds—as long as the `transition-duration` is
    greater than the `transition-delay`, including greater than the default `0s` delay—the
    transition will still be applied, and a `transitionend` event will occur when
    the transition finishes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 除非在属性上设置了 `transition-delay` 的正值，否则如果省略了 `transition-duration`，则好像未应用 `transition-property`
    声明一样，并且不会发生 `transitionend` 事件。只要过渡的总持续时间大于0秒（即 `transition-duration` 大于 `transition-delay`，包括大于默认的
    `0s` 延迟），过渡仍将被应用，并且在过渡完成时会发生 `transitionend` 事件。
- en: Negative values for `transition-duration` are invalid, and, if included, will
    invalidate the entire `transition-duration` declaration.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 负值对于 `transition-duration` 是无效的，如果包含负值，则将使整个 `transition-duration` 声明无效。
- en: 'Using the same lengthy `transition-property` declaration from before, we can
    declare a single duration for all the properties, individual durations for each
    property, or we can make alternate properties animate for the same length of time.
    We can declare a single duration that applies to all properties during the transition
    by including a single `transition-duration` value:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面相同冗长的 `transition-property` 声明，我们可以为所有属性声明单一持续时间，为每个属性声明单独的持续时间，或者我们可以使交替的属性在相同的时间内动画化。我们可以通过包含单一的
    `transition-duration` 值来为过渡期间的所有属性声明单一持续时间：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also declare the same number of comma-separated time values for the
    `transition-duration` property value as the CSS properties listed in the `transition-property`
    property value. If we want each property to transition over a different length
    of time, we have to include a different comma-separated value for each property
    name declared:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为 `transition-duration` 属性值声明与 `transition-property` 属性值中列出的 CSS 属性相同数量的逗号分隔的时间值。如果我们希望每个属性过渡的时间不同，我们必须为每个声明的属性名称包含一个不同的逗号分隔值：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the number of properties declared does not match the number of durations
    declared, the browser has specific rules on how to handle the mismatch. If we
    have more durations than properties, the extra durations are ignored. If we have
    more properties than durations, the durations are repeated. In the following example,
    `color`, `border-radius`, and `width` have a duration of 100 milliseconds; `border`,
    `opacity`, and `padding` will be set to 200 milliseconds:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果声明的属性数量与声明的持续时间数量不匹配，则浏览器有特定的规则来处理不匹配情况。如果持续时间多于属性数量，则多余的持续时间将被忽略。如果属性数量多于持续时间，则持续时间将重复。在以下示例中，`color`、`border-radius`
    和 `width` 的持续时间为100毫秒；`border`、`opacity` 和 `padding` 将设置为200毫秒。
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If we declare exactly two comma-separated durations, every odd property will
    transition over the first time declared, and every even property will transition
    over the second time value declared.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们声明了正好两个逗号分隔的持续时间，那么每个奇数属性将在第一次声明的时间内进行过渡，每个偶数属性将在第二次声明的时间内进行过渡。
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Always remember that user experience is important. If a transition is too slow,
    the website will appear slow or unresponsive, drawing unwanted focus to what should
    be a subtle effect. If a transition is too fast, it may be too subtle to be noticed.
    Visual effects should last long enough to be seen, but not so long as to make
    themselves the center of attention. Generally, the best duration for a visible,
    yet not distracting, transition is 100 to 300 milliseconds.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 记住用户体验很重要。如果过渡太慢，网站会显得缓慢或不响应，吸引了本不应该引起的注意力。如果过渡太快，可能会太微妙而不易察觉。视觉效果应该足够长以便被看到，但不应太长以至于成为注意的中心。通常，一个可见但不分散注意力的过渡的最佳持续时间是100到300毫秒。
- en: Altering the Internal Timing of Transitions
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整过渡的内部时间
- en: Do you want your transition to start off slow and get faster, start off fast
    and end slower, advance at an even keel, jump through various steps, or even bounce?
    The `transition-timing-function` provides a way to control the pace of the transition.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 想要过渡开始时缓慢并加速，开始时快速并结束缓慢，一直以相同速度前进，跳过多个步骤，甚至反弹吗？`transition-timing-function`
    提供了控制过渡速度的方法。
- en: The `transition-timing-function` values include `ease`, `linear`, `ease-in`,
    `ease-out`, `ease-in-out`, `step-start`, `step-end`, `steps(`*`n`*`, start)`—where
    *`n`* is the number of steps—`steps(`*`n`*`, end)`, and `cubic-bezier(x1, y1,
    x2, y2)`. (These values are also the valid values for the `animation-timing-function`,
    and they are described in great detail in [Chapter 19](ch19.html#animation).)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-timing-function` 值包括 `ease`、`linear`、`ease-in`、`ease-out`、`ease-in-out`、`step-start`、`step-end`、`steps(`*`n`*`,
    start)`—其中 *`n`* 是步骤数—`steps(`*`n`*`, end)`，以及 `cubic-bezier(x1, y1, x2, y2)`。（这些值也是
    `animation-timing-function` 的有效值，并在[第 19章](ch19.html#animation)中有详细描述。）'
- en: Cubic Bézier timing
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 立方贝塞尔时间函数
- en: The nonstep keywords are easing timing functions that serve as aliases for cubic
    Bézier mathematical functions that provide smooth curves. The specification provides
    for five predefined easing functions, as shown in [Table 18-1](#cubic_bezier).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 非步进关键字是作为平滑曲线提供的缓和时间函数，它们是对提供平滑曲线的数学贝塞尔函数的别名。规范中提供了五个预定义的缓和函数，如[表 18-1](#cubic_bezier)所示。
- en: Table 18-1\. Supported keywords for cubic Bézier timing functions
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 表 18-1\. 支持的立方贝塞尔时间函数关键字
- en: '| Timing function | Description | Cubic Bézier value |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 时间函数 | 描述 | Cubic Bézier 值 |'
- en: '| --- | --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cubic-bezier()` | Specifies a cubic Bézier curve | `cubic-bezier(*x1, y1,
    x2, y2*)` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `cubic-bezier()` | 指定一个立方贝塞尔曲线 | `cubic-bezier(*x1, y1, x2, y2*)` |'
- en: '| `ease` | Starts slow, then speeds up, then slows down, then ends very slowly
    | `cubic-bezier(0.25, 0.1, 0.25, 1)` |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `ease` | 起始缓慢，然后加速，之后减速，最后非常缓慢结束 | `cubic-bezier(0.25, 0.1, 0.25, 1)` |'
- en: '| `linear` | Proceeds at the same speed throughout transition | `cubic-bezier(0,
    0, 1, 1)` |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `linear` | 在整个过渡期间保持相同速度 | `cubic-bezier(0, 0, 1, 1)` |'
- en: '| `ease-in` | Starts slow, then speeds up | `cubic-bezier(0.42, 0, 1, 1)` |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `ease-in` | 开始缓慢，然后加速 | `cubic-bezier(0.42, 0, 1, 1)` |'
- en: '| `ease-out` | Starts fast, then slows down | `cubic-bezier(0, 0, 0.58, 1)`
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `ease-out` | 开始快速，然后减速 | `cubic-bezier(0, 0, 0.58, 1)` |'
- en: '| `ease-in-out` | Similar to `ease`; faster in the middle, with a slow start
    but not as slow at the end | `cubic-bezier(0.42, 0, 0.58, 1)` |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `ease-in-out` | 类似于 `ease`；中间快速，起始缓慢但结束时不像那么慢 | `cubic-bezier(0.42, 0, 0.58,
    1)` |'
- en: Cubic Bézier curves, including the underlying curves defining the five named
    easing functions in [Table 18-1](#cubic_bezier) and displayed in [Figure 18-3](#tr_fig0203),
    take four numeric parameters. For example, `linear` is the same as `cubic-bezier(0,
    0, 1, 1)`. The first and third cubic Bézier function parameter values need to
    be between 0 and 1.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 立方贝塞尔曲线，包括在[表 18-1](#cubic_bezier)中显示的五个命名缓和函数的底层曲线，以及[图 18-3](#tr_fig0203)中显示的曲线，需要四个数值参数。例如，`linear`
    相当于 `cubic-bezier(0, 0, 1, 1)`。第一个和第三个立方贝塞尔函数的参数值需要在0和1之间。
- en: '![css5 1803](assets/css5_1803.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1803](assets/css5_1803.png)'
- en: Figure 18-3\. Curve representations of named cubic Bézier functions
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-3\. 命名立方贝塞尔函数的曲线表示
- en: The four numbers in a `cubic-bezier()` function define the *x* and *y* coordinates
    of two *handles* within a box. These handles are the endpoints of lines that stretch
    from the bottom-left and top-right corners of the box. The curve is constructed
    using the two corners, and the two handles’ coordinates, via a Bézier function.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`cubic-bezier()` 函数中的四个数字定义了一个盒子内两个*控制点*的*x*和*y*坐标。这些控制点是从盒子的左下角到右上角延伸的线段的端点。曲线是通过贝塞尔函数使用两个角和两个控制点的坐标来构建的。'
- en: To get an idea of how this works, look at the curves and their corresponding
    values shown in [Figure 18-4](#taic_css4_cubic-bezier-coordinates).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解其工作原理，请查看图 18-4中显示的曲线及其对应的值。
- en: '![css5 1804](assets/css5_1804.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1804](assets/css5_1804.png)'
- en: Figure 18-4\. Four Bézier curves and their `cubic-bezier()` values (from [*http://cubic-bezier.com*](http://cubic-bezier.com))
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-4\. 四个贝塞尔曲线及其`cubic-bezier()`值（来自[*http://cubic-bezier.com*](http://cubic-bezier.com)）
- en: Consider the first example. The first two values, corresponding to *x1* and
    *y1*, are `0.5` and `1`. If you go halfway across the box (*x1* = 0.5) and all
    the way to the top of the box (*y1* = 1), you land at the spot where the first
    handle is placed. Similarly, the coordinates `0.5,0` for *x2,y2* describe the
    point at the center bottom of the box, which is where the second handle is placed.
    The curve shown there results from those handle placements.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑第一个例子。前两个值对应*x1*和*y1*，分别是`0.5`和`1`。如果你在方框的中间横跨一半（*x1* = 0.5），并且向方框顶部走到底（*y1*
    = 1），你就到了第一个控制点的位置。同样，*x2,y2*的坐标`0.5,0`描述了方框中心底部的点，即第二个控制点的位置。所示的曲线是由这些控制点的放置产生的。
- en: In the second example, the handle positions are switched, with the resulting
    change in the curve. Ditto for the third and fourth examples, which are inversions
    of each other. Notice how the resulting curve differs when switching the handle
    positions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，控制点的位置被交换，曲线也随之改变。第三和第四个例子也是彼此倒置的。注意在交换控制点位置时，得到的曲线有何不同。
- en: The predefined key terms are fairly limited. To better follow the principles
    of animation, you may want to use a cubic Bézier function with four float values
    instead of the predefined key words. If you’re a whiz at calculus or have a lot
    of experience with programs like Illustrator, you might be able to invent cubic
    Bézier functions in your head; otherwise, online tools let you play with different
    values, such as [*http://cubic-bezier.com*](http://cubic-bezier.com), which lets
    you compare the common keywords against each other or against your own cubic Bézier
    function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义的关键术语相当有限。为了更好地遵循动画原则，您可能希望使用包含四个浮点值的立方贝塞尔函数，而不是预定义的关键字。如果你精通微积分或者在像Illustrator这样的程序上有很多经验，你也许能够自己脑补立方贝塞尔函数；否则，在线工具可以让你尝试不同的值，比如[*http://cubic-bezier.com*](http://cubic-bezier.com)，这个网站可以让你比较常见的关键字或者你自己的立方贝塞尔函数。
- en: As shown in [Figure 18-5](#tr_fig0204), the website [*http://easings.net*](http://easings.net)
    provides many additional cubic Bézier function values you can use to provide for
    a more realistic, delightful animation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如图 18-5所示，网站[*http://easings.net*](http://easings.net)提供了许多额外的立方贝塞尔函数值，供您使用以提供更逼真、令人愉悦的动画效果。
- en: '![css5 1805](assets/css5_1805.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1805](assets/css5_1805.png)'
- en: Figure 18-5\. Useful author-defined cubic Bézier functions (from [*http://easings.net*](http://easings.net))
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-5\. 有用的作者定义的立方贝塞尔函数（来自[*http://easings.net*](http://easings.net)）
- en: While the authors of the site named their animations, the preceding names are
    not part of the CSS specifications, and must be written as shown in [Table 18-2](#cubic_bezier_timings).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的作者为他们的动画命名，但这些名称不属于 CSS 规范的一部分，必须按照[表 18-2](#cubic_bezier_timings)中显示的方式书写。
- en: Table 18-2\. Cubic Bézier timings
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 表 18-2\. 立方贝塞尔定时
- en: '| Unofficial name | Cubic Bézier function value |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 非官方名称 | 立方贝塞尔函数值 |'
- en: '| --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `easeInSine` | `cubic-bezier(0.47, 0, 0.745, 0.715)` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `easeInSine` | `cubic-bezier(0.47, 0, 0.745, 0.715)` |'
- en: '| `easeOutSine` | `cubic-bezier(0.39, 0.575, 0.565, 1)` |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutSine` | `cubic-bezier(0.39, 0.575, 0.565, 1)` |'
- en: '| `easeInOutSine` | `cubic-bezier(0.445, 0.05, 0.55, 0.95)` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutSine` | `cubic-bezier(0.445, 0.05, 0.55, 0.95)` |'
- en: '| `easeInQuad` | `cubic-bezier(0.55, 0.085, 0.68, 0.53)` |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `easeInQuad` | `cubic-bezier(0.55, 0.085, 0.68, 0.53)` |'
- en: '| `easeOutQuad` | `cubic-bezier(0.25, 0.46, 0.45, 0.94)` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutQuad` | `cubic-bezier(0.25, 0.46, 0.45, 0.94)` |'
- en: '| `easeInOutQuad` | `cubic-bezier(0.455, 0.03, 0.515, 0.955)` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutQuad` | `cubic-bezier(0.455, 0.03, 0.515, 0.955)` |'
- en: '| `easeInCubic` | `cubic-bezier(0.55, 0.055, 0.675, 0.19)` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `easeInCubic` | `cubic-bezier(0.55, 0.055, 0.675, 0.19)` |'
- en: '| `easeOutCubic` | `cubic-bezier(0.215, 0.61, 0.355, 1)` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutCubic` | `cubic-bezier(0.215, 0.61, 0.355, 1)` |'
- en: '| `easeInOutCubic` | `cubic-bezier(0.645, 0.045, 0.355, 1)` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutCubic` | `cubic-bezier(0.645, 0.045, 0.355, 1)` |'
- en: '| `easeInQuart` | `cubic-bezier(0.895, 0.03, 0.685, 0.22)` |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `easeInQuart` | `cubic-bezier(0.895, 0.03, 0.685, 0.22)` |'
- en: '| `easeOutQuart` | `cubic-bezier(0.165, 0.84, 0.44, 1)` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutQuart` | `cubic-bezier(0.165, 0.84, 0.44, 1)` |'
- en: '| `easeInOutQuart` | `cubic-bezier(0.77, 0, 0.175, 1)` |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutQuart` | `cubic-bezier(0.77, 0, 0.175, 1)` |'
- en: '| `easeInQuint` | `cubic-bezier(0.755, 0.05, 0.855, 0.06)` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `easeInQuint` | `cubic-bezier(0.755, 0.05, 0.855, 0.06)` |'
- en: '| `easeOutQuint` | `cubic-bezier(0.23, 1, 0.32, 1)` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutQuint` | `cubic-bezier(0.23, 1, 0.32, 1)` |'
- en: '| `easeInOutQuint` | `cubic-bezier(0.86, 0, 0.07, 1)` |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutQuint` | `cubic-bezier(0.86, 0, 0.07, 1)` |'
- en: '| `easeInExpo` | `cubic-bezier(0.95, 0.05, 0.795, 0.035)` |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `easeInExpo` | `cubic-bezier(0.95, 0.05, 0.795, 0.035)` |'
- en: '| `easeOutExpo` | `cubic-bezier(0.19, 1, 0.22, 1)` |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutExpo` | `cubic-bezier(0.19, 1, 0.22, 1)` |'
- en: '| `easeInOutExpo` | `cubic-bezier(1, 0, 0, 1)` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutExpo` | `cubic-bezier(1, 0, 0, 1)` |'
- en: '| `easeInCirc` | `cubic-bezier(0.6, 0.04, 0.98, 0.335)` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `easeInCirc` | `cubic-bezier(0.6, 0.04, 0.98, 0.335)` |'
- en: '| `easeOutCirc` | `cubic-bezier(0.075, 0.82, 0.165, 1)` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutCirc` | `cubic-bezier(0.075, 0.82, 0.165, 1)` |'
- en: '| `easeInOutCirc` | `cubic-bezier(0.785, 0.135, 0.15, 0.86)` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutCirc` | `cubic-bezier(0.785, 0.135, 0.15, 0.86)` |'
- en: '| `easeInBack` | `cubic-bezier(0.6, -0.28, 0.735, 0.045)` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `easeInBack` | `cubic-bezier(0.6, -0.28, 0.735, 0.045)` |'
- en: '| `easeOutBack` | `cubic-bezier(0.175, 0.885, 0.32, 1.275)` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `easeOutBack` | `cubic-bezier(0.175, 0.885, 0.32, 1.275)` |'
- en: '| `easeInOutBack` | `cubic-bezier(0.68, -0.55, 0.265, 1.55)` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `easeInOutBack` | `cubic-bezier(0.68, -0.55, 0.265, 1.55)` |'
- en: Step timing
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤时间
- en: Step timing functions also are available, as well as four predefined step values;
    see [Table 18-3](#step_timing_functions).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤时间函数也是可用的，以及四个预定义的步骤值；参见[表18-3](#step_timing_functions)。
- en: Table 18-3\. Step timing functions
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 表18-3\. 步骤时间函数
- en: '| Timing function | Definition |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 时间函数 | 定义 |'
- en: '| --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `steps(<integer>, jump-start)` | Displays <*`integer`*> keyframes, showing
    the last keyframe for the last *n*/100% of the transition duration; the first
    jump happens at the very beginning of the transition. `start` can be used in place
    of `jump-start` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `steps(<integer>, jump-start)` | 显示<*`integer`*>关键帧，在过渡开始时的最后*n*/100%持续时间内显示最后一个关键帧；第一次跳跃发生在过渡的最开始。`start`可以替代`jump-start`
    |'
- en: '| `steps(<integer>, jump-end)` | Displays <*`integer`*> keyframes, staying
    on the initial state for the first *n*/100% of the transition duration; the last
    jump happens at the very end of the transition. `end` can be used in place of
    `jump-end` |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `steps(<integer>, jump-end)` | 显示<*`integer`*>关键帧，在过渡持续时间的开始*n*/100%内保持初始状态；最后一次跳跃发生在过渡的最后。`end`可以替代`jump-end`
    |'
- en: '| `steps(<integer>, jump-both)` | Displays <*`integer`*> keyframes, starting
    with an immediate jump and taking the final jump at the very end of the transition
    duration; this effectively adds one step to the transition |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `steps(<integer>, jump-both)` | 显示<*`integer`*>关键帧，从立即跳跃开始，直到过渡持续时间结束时的最后一次跳跃；这实际上增加了一个步骤到过渡中
    |'
- en: '| `steps(<integer>, jump-none)` | Displays <*`integer`*> keyframes, but there
    is no jump at either the beginning or end of the transition duration, instead
    staying on the initial values for the first *n*/100% of the time *and* showing
    the final values for the last *n*/100% of the time; this effectively removes one
    step from the transition |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `steps(<integer>, jump-none)` | 显示<*`integer`*>关键帧，但在过渡持续时间的开始或结束时没有跳跃，而是在前*n*/100%的时间内保持初始值，并在最后*n*/100%的时间内显示最终值；这实际上从过渡中移除了一个步骤
    |'
- en: '| `step-start` | Stays on the final keyframe throughout transition duration;
    equal to `steps(1, jump-start)` |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `step-start` | 在整个过渡持续时间内停留在最后一个关键帧；等同于`steps(1, jump-start)` |'
- en: '| `step-end` | Stays on the initial keyframe throughout transition duration;
    equal to `steps(1, jump-end)` |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `step-end` | 在整个过渡持续时间内停留在初始关键帧；等同于`steps(1, jump-end)` |'
- en: As [Figure 18-6](#steptiming) shows, the step timing functions show the progression
    of the transition from the initial value to the final value in steps, rather than
    as a smooth curve.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图18-6](#steptiming)所示，步骤时间函数显示了过渡从初始值到最终值的步骤进展，而不是平滑曲线。
- en: '![css5 1806](assets/css5_1806.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![css5 1806](assets/css5_1806.png)'
- en: Figure 18-6\. Step timing functions
  id: totrans-190
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-6\. 步骤时间函数
- en: The step timing functions allow you to divide the transition over equidistant
    steps, by defining the number and direction of steps.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤时间函数允许您通过定义步数和步骤的方向来划分过渡成等距的步骤。
- en: With `jump-start`, the first step happens at the animation or transition start.
    With `jump-end`, the last step happens at the animation or transition end. For
    example, `steps(5, jump-end)` would jump through the equidistant steps at 0%,
    20%, 40%, 60%, and 80%; and `steps(5, jump-start)` would jump through the equidistant
    steps at 20%, 40%, 60%, 80%, and 100%.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jump-start`时，第一步发生在动画或过渡开始时。使用`jump-end`时，最后一步发生在动画或过渡结束时。例如，`steps(5, jump-end)`会在0%、20%、40%、60%和80%的等距步骤中跳跃；而`steps(5,
    jump-start)`会在20%、40%、60%、80%和100%的等距步骤中跳跃。
- en: The `step-start` function is the same as `steps(1, jump-start)`. When used,
    transitioned property values stay on their *final* values from the beginning until
    the end of the transition. The `step-end` function, which is the same as `steps(1,
    jump-end)`, sets transitioned values to their *initial* values, staying there
    throughout the transition’s duration.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`step-start` 函数与 `steps(1, jump-start)` 相同。当使用时，过渡属性值从开始到结束都保持在它们的*最终*值上。`step-end`
    函数与 `steps(1, jump-end)` 相同，将过渡值设置为它们的*初始*值，并在整个过渡期间保持在那里。'
- en: Note
  id: totrans-194
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Step timing, especially the precise meaning of `jump-start` and `jump-end`,
    is discussed in depth in [Chapter 19](ch19.html#animation).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 步进时间函数，特别是 `jump-start` 和 `jump-end` 的确切含义，在 [第 19 章](ch19.html#animation) 中有深入讨论。
- en: 'Continuing on with the same lengthy `transition-property` declaration we’ve
    used before, we can declare a single timing function for all the properties, or
    define individual timing functions for each property, and so on. Here, we’ve set
    all the transitioned properties to a single duration and timing function:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用我们之前使用过的同样冗长的 `transition-property` 声明，我们可以为所有属性声明单个时间函数，或为每个属性定义单独的时间函数等。在这里，我们将所有过渡属性设置为单一的持续时间和时间函数：
- en: '[PRE17]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Always remember that the `transition-timing-function` does not change the time
    it takes to transition properties: that is set with the `transition-duration`
    property. It just changes how the transition progresses during that set time.
    Consider the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 永远记住，`transition-timing-function` 不会改变过渡属性所需的时间：这是由 `transition-duration` 属性设置的。它只是改变了在设定时间内过渡的进度。请考虑以下内容：
- en: '[PRE18]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If we include these seven timing functions for the seven properties, as long
    as they have the same transition duration and delay, all the properties start
    and finish transitioning at the same time. (The preceding transition would be
    a terrible user experience, by the way. Please don’t do that.)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为这七个属性设置了这七个时间函数，并且它们具有相同的过渡持续时间和延迟，所有属性都会在相同的时间开始和结束过渡。（顺便说一句，前面的过渡体验真是糟糕透顶，请不要这样做。）
- en: The best way to familiarize yourself with the various timing functions is to
    play with them and see which one works best for the effect you’re looking for.
    While testing, set a relatively long `transition-duration` to better visualize
    the difference between the various functions. At higher speeds, you may not be
    able to tell the difference between different easing functions. Just don’t forget
    to set the transition back to a faster speed before publishing the result!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉各种时间函数的最佳方法是尝试它们，并看看哪一个对您想要的效果最有效。在测试时，设置一个相对较长的 `transition-duration` 可以更好地可视化各种函数之间的差异。在更高的速度下，您可能无法区分不同的缓动函数。只是不要忘记在发布结果之前将过渡速度恢复为更快的速度！
- en: Delaying Transitions
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟过渡
- en: The `transition-delay` property enables you to introduce a delay between the
    time that the change initiating the transition is applied to an element and the
    time the transition actually begins.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-delay` 属性允许您在应用于元素的变化开始引发过渡和实际过渡开始之间引入延迟。'
- en: A `transition-delay` of `0s` (the default) means the transition will begin immediately;
    it will start executing as soon as the state of the element is altered. This is
    familiar from the instant-change effect of `a:hover`, for example.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-delay` 的值为 `0s`（默认值）意味着过渡会立即开始；当元素的状态改变时立即执行。例如，这在 `a:hover` 的瞬间变化效果中很常见。'
- en: With a value other than `0s`, the <*`time`*> value of `transition-delay` defines
    the time offset from the moment the property values would ordinarily have changed
    until the property values declared in the `transition` or `transition-property`
    values begin animating to their final values.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `transition-delay` 的值不为 `0s` 时，`transition-delay` 的 <*`time`*> 值定义了从属性值通常会改变的时刻到
    `transition` 或 `transition-property` 值声明的属性值开始动画到最终值之间的时间偏移量。
- en: Interestingly, negative values of time are valid. The effects you can create
    with negative `transition-delay`s are described in [“Negative delay values”](#negative-delay-values).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，时间的负值是有效的。您可以使用负的 `transition-delay` 创建的效果在 [“负延迟值”](#negative-delay-values)
    中有描述。
- en: 'Continuing with the 6- (or 19-) property `transition-property` declaration
    we’ve been using, we can make all the properties start transitioning right away
    by omitting the `transition-delay` property, or by including it with a value of
    `0s`. Another possibility is to start half the transitions right away, and the
    rest 200 milliseconds later, as in the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用我们已经使用过的包含6个（或19个）属性的 `transition-property` 声明，我们可以通过省略 `transition-delay`
    属性或将其值设置为 `0s`，使所有属性立即开始过渡。另一种可能性是，我们可以让一半的过渡立即开始，然后另一半延迟200毫秒，如下所示：
- en: '[PRE19]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'By including `transition-delay: 0s, 200ms` on a series of properties, each
    taking 200 milliseconds to transition, we make `color`, `border-radius`, and `width`
    begin their transitions immediately. All the rest begin their transitions as soon
    as the other transitions have completed, because their `transition-delay` is equal
    to the `transition-duration` applied to all the properties.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '通过在一系列属性上包含 `transition-delay: 0s, 200ms`，每个属性的过渡时间为200毫秒，我们使得 `color`、`border-radius`
    和 `width` 立即开始过渡。其余属性将在其他过渡完成后开始过渡，因为它们的 `transition-delay` 等于应用于所有属性的 `transition-duration`。'
- en: As with `transition-duration` and `transition-timing-function`, when the comma-separated
    `transition-delay` values outnumber the comma-separated `transition-property`
    values, the extra delay values are ignored. When the comma-separated `transition-property`
    values outnumber the comma-separated `transition-delay` values, the delay values
    are repeated.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `transition-duration` 和 `transition-timing-function` 一样，当逗号分隔的 `transition-delay`
    值超过逗号分隔的 `transition-property` 值时，多余的延迟值将被忽略。当逗号分隔的 `transition-property` 值超过逗号分隔的
    `transition-delay` 值时，延迟值将被重复。
- en: 'We can even declare seven `transition-delay` values so that each property begins
    transitioning after the previous property has transitioned, as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以声明七个 `transition-delay` 值，以便每个属性在前一个属性过渡后开始过渡，如下所示：
- en: '[PRE20]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, we declare each transition to last 200 milliseconds with the
    `transition-duration` property. We then declare a `transition-delay` that provides
    comma-separated delay values for each property that increments by 200 milliseconds,
    or 0.2 seconds—the same time as the duration of each property’s transition. The
    end result is that each property starts transitioning at the point the previous
    property has finished.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们声明每个过渡的持续时间为200毫秒，使用 `transition-duration` 属性。然后，我们声明了一个 `transition-delay`，为每个属性提供了逗号分隔的延迟值，每个属性的延迟值递增200毫秒，即0.2秒——与每个属性过渡的持续时间相同。最终结果是，每个属性在前一个属性完成过渡后开始过渡。
- en: 'We can use math to give every transitioning property different durations and
    delays, ensuring that they all complete transitioning at the same time:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用数学方法，为每个过渡属性指定不同的持续时间和延迟时间，确保它们都在相同的时间完成过渡：
- en: '[PRE21]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this example, each property completes transitioning at the 1.4-second mark,
    but each with a different duration and delay. For each property, the `transition-duration`
    value plus the `transition-delay` value will add up to 1.4 seconds.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每个属性在1.4秒标记处完成过渡，但每个属性的持续时间和延迟时间不同。对于每个属性，`transition-duration` 值加上 `transition-delay`
    值总共达到1.4秒。
- en: Generally, you’ll want all the transitions to begin at the same time. You can
    make that happen by including a single `transition-delay` value, which gets applied
    to all the properties. In our drop-down menu in [Figure 18-1](#tr_fig01), we included
    a delay of 50 milliseconds. This delay is not long enough for the user to notice
    and will not cause the application to appear slow. Rather, a 50-millisecond delay
    can help prevent the navigation from shooting open unintentionally as the user
    accidentally hovers over the menu items while moving the cursor from one part
    of the page or app to another, or as they quickly move the focus ring through
    the document.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您希望所有的过渡同时开始。您可以通过包含单个 `transition-delay` 值来实现这一点，该值应用于所有属性。在我们的下拉菜单中，例如
    [图 18-1](#tr_fig01)，我们包含了一个50毫秒的延迟。这种延迟时间不够长，以至于用户察觉不到，也不会导致应用程序显得缓慢。相反，50毫秒的延迟可以帮助防止用户在将鼠标从页面或应用程序的一个部分快速移动到另一个部分时，意外悬停在菜单项上，从而导致导航意外打开。
- en: Negative delay values
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 负延迟值
- en: 'A negative value for `transition-delay` that is smaller than the `transition-duration`
    will cause the transition to start immediately, partway through the transition.
    For example: [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transition-delay-negative.html)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-delay`为负且小于`transition-duration`的值将导致过渡立即开始，在过渡的中间部分。例如：[![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transition-delay-negative.html)'
- en: '[PRE22]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Given the `transition-delay` of `-150ms` on a `200ms` transition, the transition
    will start three-quarters of the way through the transition and will last 50 milliseconds.
    In that scenario, given the linear timing function, the `<div>` jumps to being
    translated `150px` along the x-axis immediately on hover and then animates the
    translation from 150 pixels to 200 pixels over 50 milliseconds.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 给定`transition`为`200ms`且`transition-delay`为`-150ms`，过渡将在过渡的四分之三处开始，并持续50毫秒。在这种情况下，给定线性时间函数，`<div>`在悬停时立即跳转到沿x轴移动`150px`，然后在50毫秒内从150像素动画移动到200像素。
- en: If the absolute value of the negative `transition-delay` is greater than or
    equal to the `transition-duration`, the change of property values is immediate,
    as if no `transition` had been applied, *and* no `transitionend` event occurs.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果负的`transition-delay`的绝对值大于或等于`transition-duration`，则属性值的更改是立即的，就像未应用`transition`一样，并且不会发生`transitionend`事件。
- en: When transitioning back from the hovered state to the original state, by default,
    the same value for the `transition-delay` is applied. In the preceding scenario,
    since the `transition-delay` is not overridden in the hover state, when the user
    stops hovering over the element, the `<div>` will jump to being translated 50
    pixels along the x-axis and then take 50 milliseconds to return to its initial
    position of being translated 0 pixels along the x-axis.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在从悬停状态过渡回原始状态时，默认情况下，应用相同值的`transition-delay`。在前述场景中，由于在悬停状态下未覆盖`transition-delay`，当用户停止悬停在元素上时，`<div>`将跳转到沿x轴移动50像素，然后花费50毫秒返回到其初始位置，即沿x轴移动0像素。
- en: Using the transition Shorthand
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用过渡简写
- en: The `transition` property combines the four properties we’ve covered thus far—`transition-property`,
    `transition-duration`, `transition-timing-function`, and `transition-delay`—into
    a single shorthand property.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition`属性将我们到目前为止讨论的四个属性——`transition-property`，`transition-duration`，`transition-timing-function`和`transition-delay`——合并为一个简写属性。'
- en: The `transition` property accepts the value of `none`, or any number of comma-separated
    list of *single transitions*. A single transition contains a single property to
    transition, or the keyword `all` to transition all the properties; the duration
    of the transition; the timing function; and the transition delay.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition`属性接受值`none`，或逗号分隔的一组*单个过渡*。单个过渡包含要过渡的单个属性，或关键字`all`以过渡所有属性；过渡的持续时间；时间函数；和过渡延迟。'
- en: If a single transition within the `transition` shorthand omits the property
    to transition, that single transition will default to `all`. If the `transition-timing-function`
    value is omitted, it will default to `ease`. If only one time value is included,
    that will be the duration, and no delay will occur, as if `transition-delay` were
    set to `0s`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`transition`简写中，单个过渡省略了要过渡的属性，则该单个过渡将默认为`all`。如果省略了`transition-timing-function`值，则默认为`ease`。如果只包括一个时间值，则将作为持续时间，并且不会发生延迟，就像`transition-delay`被设置为`0s`一样。
- en: 'Within each single transition, the order of the duration versus the delay is
    important: the first value that can be parsed as a time will be set as the duration.
    If an additional time value is found before the comma or the end of the statement,
    that will be set as the delay.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个单独的过渡中，持续时间与延迟的顺序很重要：第一个可以解析为时间的值将被设置为持续时间。如果在逗号或语句结束之前找到额外的时间值，则将其设置为延迟。
- en: 'Here are three equivalent ways to write the same transition effects:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是写入相同过渡效果的三种等效方式：
- en: '[PRE23]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the first example, we see a shorthand way to express each of the two properties
    that are being transitioned. Because we are transitioning all the properties that
    will be changed (in other rules not shown in the code block), we could use the
    keyword `all`, as shown in the second example. And, since `all` is the default
    value, we could write the shorthand with just the duration, timing function, and
    delay. Had we used `ease` instead of `ease-in`, we could have omitted the timing
    function, since `ease` is the default. Had we not wanted a delay, we could have
    omitted the second time value, since `0s` is the default.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们看到了表达正在过渡的两个属性的简写方式。因为我们正在过渡所有将被改变的属性（在代码块中未显示的其他规则中），我们可以使用关键字 `all`，就像第二个示例中所示。而且，因为
    `all` 是默认值，我们可以只写持续时间、时间函数和延迟的简写形式。如果我们使用 `ease` 而不是 `ease-in`，我们可以省略时间函数，因为 `ease`
    是默认的。如果我们不想要延迟，我们可以省略第二个时间值，因为 `0s` 是默认值。
- en: We did have to include the duration, or no transition would be visible. In other
    words, the only portion of the `transition` property value that can truly be considered
    required is `transition-duration`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须包括持续时间，否则过渡将不可见。换句话说，`transition` 属性值中唯一被认为是必需的部分是 `transition-duration`。
- en: 'If we wanted to only delay the change from closed menu to open menu without
    a gradual transition, we would still need to include a duration of `0s`. Remember,
    the first value parsable as time will be set as the duration and the second one
    will be set as the delay:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想延迟从关闭菜单到打开菜单的变化而没有渐变过渡，我们仍然需要包括 `0s` 的持续时间。请记住，第一个可解析为时间的值将被设置为持续时间，第二个值将被设置为延迟时间：
- en: '[PRE24]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Warning
  id: totrans-235
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This transition will wait 200 milliseconds, then show the drop-down fully open
    and opaque with no gradual transition. Creating delays with no transitions is
    a horrible user experience, so please do not do it.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此过渡将等待 200 毫秒，然后完全打开下拉并且不透明，没有渐变过渡。创建没有过渡的延迟是一个糟糕的用户体验，请不要这样做。
- en: 'If we have a comma-separated list of transitions (versus just a single declaration)
    and the word `none` is included, the entire transition declaration is invalid
    and will be ignored. You can declare comma-separated values for the four longhand
    transition properties, or you can include a comma-separated list of multiple shorthand
    transitions:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个用逗号分隔的过渡列表（而不仅仅是单个声明），并且包含了 `none` 这个词，整个过渡声明将是无效的并且将被忽略。您可以为四个长手过渡属性声明逗号分隔的值，或者可以包括多个简写过渡的逗号分隔列表：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The two preceding CSS rule blocks are functionally equivalent. Use care when
    stringing multiple shorthand transitions into a list of transitions: `transition:
    color, opacity 200ms ease-in 50ms` will ease in the opacity over 200 milliseconds
    after a 50-millisecond delay, but the `color` change will be instantaneous, with
    no `transitionend` event. It is still valid, but may not be the effect you were
    seeking.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '前两个 CSS 规则块在功能上是等效的。当将多个简写过渡字符串成过渡列表时，请小心使用：`transition: color, opacity 200ms
    ease-in 50ms` 将在 50 毫秒延迟后以 200 毫秒的持续时间缓慢渐变不透明度，但 `color` 的变化将是瞬间的，没有 `transitionend`
    事件。它仍然有效，但可能不是您想要的效果。'
- en: Reversing Interrupted Transitions
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反向中断的过渡
- en: When a transition is interrupted before it is able to finish (such as mousing
    off a drop-down menu before it finishes its opening transition), property values
    are reset to the values they had before the transition began, and the properties
    transition back to those values. Because repeating the duration and timing functions
    on a reverting partial transition can lead to an odd or even bad user experience,
    the CSS Transitions specification provides for making the reverting transition
    shorter.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当过渡在能够完成之前被打断时（例如在下拉菜单完成打开过渡之前鼠标移出），属性值将被重置为过渡开始前的值，并且属性会过渡回这些值。因为在还原部分过渡上重复持续时间和时间函数可能导致奇怪或者糟糕的用户体验，CSS
    过渡规范提供了缩短还原过渡的选项。
- en: Let’s say we have a `transition-delay` of `50ms` set on the default state of
    a menu, and no transition properties declared on the hover state; thus, browsers
    will wait 50 milliseconds before beginning the reverse (or closing) transition.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在默认状态的菜单上设置了 `transition-delay` 为 `50ms`，并且在悬停状态下没有声明过渡属性；因此，浏览器将等待 50 毫秒才开始反向（或关闭）过渡。
- en: When the forward animation finishes transitioning to the final values and the
    `transitionend` event is fired, all browsers will duplicate the `transition-delay`
    in the reverse states. Let’s say the user moves off that menu 75 milliseconds
    after it started transitioning. This means the drop-down menu will animate closed
    without ever being fully opened and fully opaque. The browser should have a 50-millisecond
    delay before closing the menu, just as it waited 50 milliseconds before starting
    to open it. This is actually a good user experience, as it provides a few milliseconds
    of delay before closing, preventing jerky behavior if the user accidentally navigates
    off the menu.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当向前动画完成过渡到最终值并触发`transitionend`事件时，所有浏览器都会在反向状态下复制`transition-delay`。假设用户在菜单开始过渡后75毫秒移开。这意味着下拉菜单将在完全打开和完全不透明之前动画关闭。浏览器在关闭菜单之前应该有50毫秒的延迟，就像在打开菜单之前等待50毫秒一样。这实际上是良好的用户体验，因为它在关闭之前提供了几毫秒的延迟，防止用户意外地离开菜单时产生抖动行为。
- en: 'In the case of a step timing function, if the transition is 10 seconds with
    10 steps, and the properties revert after 3.25 seconds, ending a quarter of the
    way between the third and fourth steps (completing three steps, or 30% of the
    transition), it will take 3 seconds to revert to the previous values. In the following
    example, the width of our `<div>` will grow to 130 pixels wide before it begins
    reverting back to 100 pixels wide on mouseout:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在步进定时函数的情况下，如果过渡时间是10秒，分为10步，并且在3.25秒后恢复属性，结束时在第三步和第四步之间的四分之一处（完成三步，或过渡的30%），则恢复到先前值将需要3秒钟。在以下示例中，我们的`<div>`宽度将在鼠标移出时从100像素增长到130像素，然后开始恢复：
- en: '[PRE26]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: While the reverse duration will be rounded down to the time it took to reach
    the most recently executed step, the reverse *direction* will be split by the
    originally declared number of steps, not the number of steps that completed. In
    our 3.25-second case, it will take 3 seconds to revert through 10 steps. These
    reverse transition steps will be shorter in duration at 300 milliseconds each,
    each step shrinking the width by 3 pixels, instead of 10 pixels.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管反向持续时间将被四舍五入为达到最近执行的步骤所需的时间，但反向*方向*将根据最初声明的步骤数而不是完成的步骤数来分割。在我们的3.25秒案例中，通过10步恢复将需要3秒钟。这些反向过渡步骤的持续时间为每个步骤300毫秒，每个步骤将宽度缩小3像素，而不是10像素。
- en: If the timing function is linear, the duration will be the same in both directions.
    All other `cubic-bezier` functions will have a duration that is proportional to
    progress the initial transition made before being interrupted. Negative `transition-delay`
    values are also proportionally shortened. Positive delays remain unchanged in
    both directions.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果定时函数是线性的，那么在两个方向上的持续时间将是相同的。所有其他`cubic-bezier`函数在被中断之前的初始过渡进度上的持续时间是成比例的。负的`transition-delay`值也会被相应缩短。正的延迟在两个方向上保持不变。
- en: No browser will have a `transitionend` for the hover state, as the transition
    did not end; but all browsers will have a `transitionend` event in the reverse
    state when the menu finishes collapsing. The `elapsedTime` for that reverse transition
    depends on whether the browser took the full 200 milliseconds to close the menu,
    or if the browser takes as long to close the menu as it did to partially open
    the menu.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于悬停状态，没有浏览器会有`transitionend`，因为过渡没有结束；但当菜单完成折叠时，所有浏览器都会在反向状态下触发`transitionend`事件。该反向过渡的`elapsedTime`取决于浏览器是否花费了完整的200毫秒来关闭菜单，或者像部分打开菜单那样花费了同样长的时间关闭菜单。
- en: To override these values, include transition properties in both the initial
    and final states (e.g., both the unhovered and hovered styles). While this does
    not impact the reverse shortening, it does provide more control.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖这些值，请在初始和最终状态中包含过渡属性（例如，未悬停和悬停样式）。虽然这不会影响反向缩短，但它确实提供了更多控制。
- en: Warning
  id: totrans-250
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Beware of having transitions on both ancestors and descendants. For example,
    transitioning inherited properties on an element soon after transitioning the
    same property on ancestor or descendant nodes can have unexpected outcomes. If
    the transition on the descendant completes before the transition on the ancestor,
    the descendant will then resume inheriting the (still transitioning) value from
    its parent. This effect may not be what you expect.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕同时在祖先和后代上进行过渡。例如，在一个元素上过渡继承属性后不久，在后代或祖先节点上过渡相同的属性可能会导致意外的结果。如果后代上的过渡在祖先上的过渡完成之前完成，后代将继续从其父级继承（仍在过渡中的）值。这种效果可能不是您期望的。
- en: Animatable Properties and Values
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可动画化的属性和值
- en: Before implementing transitions and animations, it’s important to understand
    that not all properties are animatable. You can transition (or animate) any animatable
    CSS properties; but which properties are animatable?
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施过渡和动画之前，了解并非所有属性都可动画化是很重要的。您可以过渡（或动画化）任何可动画化的CSS属性；但哪些属性是可动画化的呢？
- en: One key to developing a sense for which properties can be animated is to identify
    which have values that can be interpolated. *Interpolation* is the construction
    of data points between the values of known data points. The key guideline to determining
    if a property value is animatable is whether the *computed value* can be interpolated.
    If a property’s computed values are keywords, they can’t be interpolated; if its
    keywords compute to a number of some sort, they can be. The quick gut check is
    that if you can determine a midpoint between two property values, those property
    values are probably animatable.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 发展对哪些属性可以进行动画化的感觉的关键之一是识别哪些属性具有可以插值的值。*插值*是在已知数据点的值之间构造数据点。确定属性值是否可动画化的关键指南是*计算值*是否可以插值。如果属性的计算值是关键字，则不能插值；如果关键字计算为某种数字，则可以。一个快速的判断标准是，如果您可以确定两个属性值之间有一个中间点，那么这些属性值可能是可动画化的。
- en: For example, the `display` values like `block` and `inline-block` aren’t numeric
    and therefore don’t have a midpoint; they aren’t animatable. The `transform` property
    values of `rotate(10deg)` and `rotate(20deg)` have a midpoint of `rotate(15deg)`;
    they are animatable.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，像`display`值如`block`和`inline-block`不是数值的，因此没有中间点；它们不可动画化。`transform`属性值如`rotate(10deg)`和`rotate(20deg)`有一个中间点`rotate(15deg)`；它们可以动画化。
- en: 'The `border` property is shorthand for `border-style`, `border-width`, and
    `border-color` (which, in turn, are themselves shorthand properties for the four
    side values). While there is no midpoint between any of the `border-style` values,
    the `border-width` property length units are numeric, so they can be animated.
    The keyword values of `medium`, `thick`, and `thin` have numeric equivalents and
    can be interpolated: the computed value of the `border-width` property translates
    those keywords to lengths.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`border`属性是`border-style`、`border-width`和`border-color`的简写（这些又是四边值的简写属性）。虽然在`border-style`值之间没有中间点，但`border-width`属性的长度单位是数值，因此它们可以被动画化。`medium`、`thick`和`thin`的关键字值有数值等效，可以插值：`border-width`属性的计算值将这些关键字转换为长度。'
- en: 'In the `border-color` value, colors are numeric—the named colors can all be
    represented using hexadecimal or other numeric color values—so colors are animatable
    as well. If you transition from `border: red solid 3px` to `border: blue dashed
    10px`, the border width and border colors will transition at the defined speed,
    but `border-style` will jump from `solid` to `dashed` immediately.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '在`border-color`值中，颜色是数值的——所有命名颜色都可以用十六进制或其他数值颜色表示——因此颜色也是可以动画化的。如果您从`border:
    red solid 3px`过渡到`border: blue dashed 10px`，边框宽度和边框颜色将以定义的速度过渡，但`border-style`将立即从`solid`跳转到`dashed`。'
- en: 'In the same vein, CSS functions that take numeric values as parameters generally
    are animatable. An exception to this rule is properties with discrete animation
    types like `visibility`: while there is no midpoint between the values of `visible`
    and `hidden`, `visibility` values jump between the discrete values, jumping from
    visible to not visible. With the `visibility` property, when the initial value
    or the destination value is `visible`, the value will change at the end of the
    transition from `visible` to `hidden`. For a transition from `hidden` to `visible`,
    the value changes at the start of the transition.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在同样的思路下，接受数值作为参数的 CSS 函数通常是可以动画化的。有一个例外的规则是离散动画类型的属性，比如`visibility`：虽然`visible`和`hidden`之间没有中间值，但`visibility`的值在这些离散值之间跳跃，从可见到不可见。对于`visibility`属性，当初始值或目标值是`visible`时，值将在从`visible`到`hidden`的过渡结束时改变。对于从`hidden`到`visible`的过渡，值将在过渡开始时改变。
- en: 'The `auto` value should generally be considered nonanimatable and should be
    avoided for animations and transitions. According to the specification, it is
    not an animatable value, but some browsers interpolate the current numeric value
    of `auto` (such as `height: auto`) to be `0px` or possibly a `fit-content()` function.
    The `auto` value is nonanimatable for properties like `height`, `width`, `top`,
    `bottom`, `left`, `right`, and `margin`.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`auto`值通常应被视为不可动画化，并应避免用于动画和过渡。根据规范，它不是一个可动画化的值，但一些浏览器将`auto`的当前数值（如`height:
    auto`）插值为`0px`或可能是`fit-content()`函数。对于像`height`、`width`、`top`、`bottom`、`left`、`right`和`margin`这样的属性，`auto`值是不可动画化的。'
- en: 'Often an alternative property or value may work. For example, instead of changing
    `height: 0` to `height: auto`, use `max-height: 0` to `max-height: 100vh`, which
    will generally create the expected effect. The `auto` value is animatable for
    `min-height` and `min-width`, since `min-height: auto` actually computes to 0.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '通常可以使用替代属性或值。例如，不要将`height: 0`更改为`height: auto`，而是使用`max-height: 0`到`max-height:
    100vh`，这将通常产生预期效果。对于`min-height`和`min-width`，`auto`值是可以动画化的，因为`min-height: auto`实际上计算为0。'
- en: How Property Values Are Interpolated
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性值的插值方式
- en: Numbers are interpolated as floating-point numbers. Integers are interpolated
    as whole numbers, and thus increment or decrement as whole numbers.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 数字作为浮点数进行插值。整数作为整数进行插值，因此作为整数递增或递减。
- en: In CSS, length and percentage units are translated into real numbers. When transitioning
    or animating `calc()`, from one type of length to or from a percentage, the values
    will be converted into a `calc()` function and interpolated as real numbers.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，长度和百分比单位被转换为实数。当过渡或动画`calc()`函数时，从一种长度类型到百分比，值将被转换为`calc()`函数并插值为实数。
- en: Colors, whether they are HSLA, RGB, or named colors like `aliceblue`, are translated
    to their RGBA equivalent values for transitioning, and interpolated across the
    RGBA color space. If you want to interpolate across a different color space, such
    as HSL, ensure the pre- and post-transition colors are in the same color space
    (in this case, HSL).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是 HSLA、RGB 还是像`aliceblue`这样的命名颜色，颜色都被转换为它们的RGBA等效值进行过渡，并在RGBA颜色空间中插值。如果要在不同的颜色空间（如HSL）中进行插值，请确保过渡前后的颜色在同一个颜色空间中（在本例中为HSL）。
- en: When animating font weights, if you use keywords like `bold`, they’ll be converted
    to numeric values and animated.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在动画字体粗细时，如果使用像`bold`这样的关键字，它们将被转换为数值并进行动画化。
- en: 'When including animatable property values that have more than one component,
    each component is interpolated appropriately for that component. For example,
    `text-shadow` has up to four components: the color, `x`, `y`, and `blur`. The
    color is interpolated as `color`, whereas the `x`, `y`, and `blur` components
    are interpolated as lengths.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 包含具有多个组件的可动画化属性值时，每个组件都会适当地进行插值。例如，`text-shadow`最多有四个组件：颜色、`x`、`y`和`blur`。颜色作为`color`插值，而`x`、`y`和`blur`组件作为长度插值。
- en: 'Box shadows have two additional optional keywords: `inset` (or lack thereof)
    and `spread`. Because `spread` is a length, it is interpolated. The `inset` keyword
    cannot be converted to a numeric equivalent, so there is no way to gradually transition
    between inset and drop shadows.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 盒阴影有两个额外的可选关键字：`inset`（或缺少）和`spread`。因为`spread`是一个长度，所以它可以插值。`inset`关键字无法转换为数值等效，因此没有办法在内嵌阴影和投影阴影之间逐渐过渡。
- en: Similar to values with more than one component, gradients can be transitioned
    only if you are transitioning gradients of the same type (linear, radial, or conic)
    with equal numbers of color stops. The colors of each color stop are then interpolated
    as colors, and the position of each color stop is interpolated as length and percentage
    units.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 与具有多个组件的值类似，只有当您转换相同类型的梯度（线性、径向或圆锥）且具有相同数量的颜色停止时，才能转换渐变。然后，每个颜色停止的颜色作为颜色进行插值，每个颜色停止的位置作为长度和百分比单位进行插值。
- en: Interpolating Repeating Values
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值重复值
- en: 'When you have simple lists of other types of properties, each item in the list
    is interpolated appropriately for that type—as long as the lists have the same
    number of items or repeatable items, and each pair of values can be interpolated.
    For example:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有其他类型属性的简单列表时，列表中的每一项都会根据该类型适当地进行插值处理，只要列表具有相同数量的项目或可重复项目，并且每一对值都可以进行插值。例如：
- en: '[PRE27]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In transitioning four `background-sizes`, with all the sizes in both lists listed
    in pixels, the third `background-size` from the pretransitioned state can gradually
    transition to the third `background-size` of the transitioned list. In the preceding
    example, background images 1, 5, and 9 will transition from `10px` to `25px` in
    height and width when hovered. Similarly, images 3, 7, and 11 will transition
    from `30px` to `75px`, and so forth.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在转换四个`background-size`，所有大小都以像素列出的情况下，来自预过渡状态的第三个`background-size`可以逐渐过渡到转换列表的第三个`background-size`。在上述示例中，当悬停时，背景图像1、5和9将从`10px`过渡到`25px`的高度和宽度。类似地，图像3、7和11将从`30px`过渡到`75px`，依此类推。
- en: 'Thus, the `background-size` values are repeated three times, as if the CSS
    had been written as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`background-size`值会重复三次，就像CSS写成以下内容一样：
- en: '[PRE28]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If a property doesn’t have enough comma-separated values to match the number
    of background images, the list of values is repeated until there are enough, even
    when the list in the animated state doesn’t match the initial state:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果属性的逗号分隔值不足以匹配背景图像的数量，则值列表将重复，直到足够为止，即使动画状态中的列表与初始状态不匹配：
- en: '[PRE29]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we transition from four `background-size` declarations in the initial state
    to three `background-size` declarations in the animated state, all in pixels and
    still with 12 background images, the animated and initial state values are repeated
    (three and four times, respectively) until we have the 12 necessary values, as
    if the following had been declared:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从初始状态的四个`background-size`声明转换为动画状态的三个`background-size`声明，仍然以像素列出，并且具有12个背景图像，则动画和初始状态的值将重复（分别三次和四次），直到我们有12个必要的值，就好像已声明如下：
- en: '[PRE30]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If a pair of values cannot be interpolated—for example, if the `background-size`
    changes from `contain` in the default state to `cover` when hovered—then, according
    to the specification, the lists are not interpolatable. However, some browsers
    ignore that particular pair of values for the purposes of the transition, and
    still animate the interpolatable values.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一对值无法插值化，例如如果`background-size`从默认状态的`contain`更改为悬停时的`cover`，则根据规范，列表不可插值化。然而，一些浏览器会忽略用于过渡的特定值对，并仍会对可插值化的值进行动画化。
- en: 'Some property values can animate if the browser can infer implicit values.
    For example, for shadows, the browser will infer an implicit shadow `box-shadow:
    transparent 0 0 0` or `box-shadow: inset transparent 0 0 0`, replacing any values
    not explicitly included in the pre- or post-transition state. These examples are
    in the [chapter files for this book](https://meyerweb.github.io/csstdg5figs).'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '如果浏览器能推断出隐式值，则某些属性值可以动画化。例如，对于阴影，浏览器将推断出隐式阴影 `box-shadow: transparent 0 0 0`
    或 `box-shadow: inset transparent 0 0 0`，替换任何未显式包含在前或后过渡状态中的值。这些示例在[本书的章节文件中](https://meyerweb.github.io/csstdg5figs)。'
- en: Only animatable property value changes trigger `transitionend` events.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 只有可动画化的属性值更改会触发`transitionend`事件。
- en: 'If you accidentally include a property that can’t be transitioned, fear not.
    The entire declaration will not fail: the browser will simply not transition the
    property that is not animatable.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您意外包含了一个不能过渡的属性，不要担心。整个声明不会失败：浏览器只是不会过渡不可动画化的属性。
- en: Note that a nonanimatable property or nonexistent CSS property is not exactly
    ignored. The browser passes over unrecognized or nonanimatable properties, keeping
    their place in the property list order to ensure that the other comma-separated
    transition properties described next are not applied to the wrong properties.^([1](ch18.html#idm45176064085488))
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，非可动画属性或不存在的CSS属性并非完全被忽略。浏览器会跳过无法识别或不可动画化的属性，保持它们在属性列表中的位置顺序，以确保后续描述的其他逗号分隔的过渡属性不会应用于错误的属性。^([1](ch18.html#idm45176064085488))
- en: Note
  id: totrans-284
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Transitions can occur only on properties that are not currently being impacted
    by a CSS animation. If the element is being animated, properties may still transition,
    as long as they are not properties that are currently controlled by the animation.
    CSS animations are covered in [Chapter 19](ch19.html#animation).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡只能发生在当前未受 CSS 动画影响的属性上。如果元素正在被动画化，属性仍可能过渡，只要它们不是当前由动画控制的属性即可。CSS 动画详见[第19章](ch19.html#animation)。
- en: Printing Transitions
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印过渡
- en: When web pages or web applications are printed, the stylesheet for print media
    is used. If your style element’s media attribute matches only `screen`, the CSS
    will not impact the printed page at all.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当打印网页或Web应用程序时，将使用打印媒体的样式表。如果你的样式元素的media属性仅匹配`screen`，则CSS将完全不影响打印页面。
- en: Often, no media attribute is included; it is as if `media="all"` were set, which
    is the default. Depending on the browser, when a transitioned element is printed,
    either the interpolating values are ignored or the property values in their current
    state are printed.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不包括media属性；就像设置了`media="all"`一样，默认情况下是这样。取决于浏览器，当打印过渡元素时，可能会忽略插值值，或者打印当前状态中的属性值。
- en: You can’t see the element transitioning on a piece of paper, but in some browsers,
    like Chrome, if an element transitioned from one state to another, the current
    state at the time the `print` function is called will be the value on the printed
    page, if that property is printable. For example, if a background color changed,
    neither the pre-transition or the post-transition background color will be printed,
    as background colors are generally not printed. However, if the text color mutated
    from one value to another, the current value of `color` will get printed on a
    color printer or to a PDF.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法在纸张上看到元素的过渡效果，但在某些浏览器中（如Chrome），如果一个元素从一个状态过渡到另一个状态，在调用`print`函数时，打印页面上的值将是过渡时的当前状态，如果该属性是可打印的。例如，如果背景颜色发生变化，则不会打印预过渡或后过渡背景颜色，因为背景颜色通常不会被打印。但是，如果文本颜色从一个值变为另一个值，则颜色的当前值将会被打印在彩色打印机或PDF中。
- en: In other browsers, like Firefox, whether the pre-transition or post-transition
    value is printed depends on how the transition was initiated. If it’s initiated
    with a hover, for example, the nonhovered value will be printed, as you are no
    longer hovering over the element while you interact with the print dialog. If
    it transitioned with a class addition, the post-transition value will be printed,
    even if the transition hasn’t completed. The printing acts as if the transition
    properties are ignored.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他浏览器（如Firefox）中，无论是预过渡值还是后过渡值的打印取决于过渡是如何启动的。例如，如果是通过悬停启动的，则会打印非悬停状态的值，因为在与打印对话框交互时，你不再悬停在元素上。如果是通过添加类进行过渡，则会打印后过渡值，即使过渡尚未完成。打印时，过渡属性被视为被忽略。
- en: Given that CSS has separate print stylesheets or `@media` rules for print, browsers
    compute style separately. In the print style, styles don’t change, so there just
    aren’t any transitions. The printing acts as if the property values changed instantly
    instead of transitioning over time.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于CSS具有单独的打印样式表或`@media`规则用于打印，浏览器会分别计算样式。在打印样式中，样式不会改变，因此没有任何过渡效果。打印时，属性值被视为瞬间改变而不是随时间过渡。
- en: Summary
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Transitions are a useful and quite powerful way to add UI enhancements. Worrying
    about archaic browsers should not prevent you from including them, since if a
    browser doesn’t support CSS transitions, the changes will still be applied. They’ll
    just “transition” from the initial state to the end state instantaneously when
    the style recomputation occurs. A user may miss out on an interesting (or possibly
    annoying) effect, but will not miss out on any content.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果是一种非常有用且强大的方式，用来增强用户界面的体验。不用担心过时的浏览器不支持它们，因为即使浏览器不支持 CSS 过渡，样式重新计算时仍会应用变化。它们只会在初始状态和最终状态之间“瞬间”过渡。用户可能会错过一些有趣（或可能让人烦恼）的效果，但不会错过任何内容。
- en: The defining feature of transitions is that they are applied when an element
    transitions from one state to another, whether that happens because of user action
    or some kind of scripted change to the DOM. If you want elements to animate regardless
    of user action or DOM changes, the next chapter will show you the way.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡的定义特征是它们在元素从一种状态过渡到另一种状态时应用，无论是因为用户操作还是某种对 DOM 的脚本更改。如果您希望元素无论用户操作还是 DOM 更改都能动画化，下一章将为您展示方法。
- en: ^([1](ch18.html#idm45176064085488-marker)) This might change. The CSS Working
    Group is considering making all property values animatable, switching from one
    value to the next at the midpoint of the timing function if there is no midpoint
    between the pre and post values.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch18.html#idm45176064085488-marker)) 这可能会改变。CSS 工作组正在考虑使所有属性值可动画化，如果在前后值之间没有中间点，它们将在时间函数的中点之间切换到下一个值。
