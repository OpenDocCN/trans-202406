- en: Chapter 18\. Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS transitions allow us to animate CSS properties from an original value to
    a new value over time. These changes *transition* an element from one state to
    another, in response to a change. This usually involves a user interaction but
    can also be due to a scripted change of class, ID, or other state.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, when a CSS property value changes—when a *style change event* occurs—the
    change is instantaneous. The new property value replaces the old property in the
    milliseconds it takes to repaint the page (or to reflow and repaint, when necessary).
    Most value changes seem instantaneous, taking fewer than 16 milliseconds to render.
    Even if the changes take longer than that (like when a large image is replaced
    with one that isn’t pre-fetched—which isn’t a transition, just poor performance),
    it is still a single step from one value to the next. For example, when changing
    a background color on mouse hover, the background immediately changes from one
    color to the other, with no gradual transition.
  prefs: []
  type: TYPE_NORMAL
- en: CSS Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS transitions provide a way to control how a property changes from one value
    to the next over a period of time. Thus, we can make the property values change
    gradually, creating (hopefully) pleasant and unobtrusive effects. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, instead of instantaneously changing a button’s `color` value
    on hover, that `transition` property means the button’s `color` will gradually
    fade from `magenta` to `rebeccapurple` over 200 milliseconds, even adding a 50-millisecond
    delay before starting the transition.
  prefs: []
  type: TYPE_NORMAL
- en: In the unlikely event that a browser doesn’t support CSS transition properties,
    the change is immediate instead of gradual, which is completely fine. If a given
    property or some property values aren’t animatable, again, the change will be
    immediate instead of gradual.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When we say *animatable*, we mean any properties that can be animated, whether
    through transitions or animations (the subject of the next chapter, [Chapter 19](ch19.html#animation)).
    The property definition boxes throughout the book indicate whether a given property
    is animatable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Often you will want instantaneous value changes. For example, link colors usually
    change instantly on hover or focus, informing sighted users that an interaction
    is occurring and that the focused content is a link. Similarly, options in an
    autocomplete listbox shouldn’t fade in: you want the options to appear instantly,
    rather than fade in more slowly than the user types. Instantaneous value changes
    are often the best user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: At other times, you’ll want a property’s value to change more gradually, bringing
    attention to what is occurring. For example, you may want to make a card game
    more realistic by taking 200 milliseconds to animate the flipping of a card, as
    the user may not realize what happened if there is no animation. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/cardflip.html)
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Look for the Play symbol ![](assets/play-icon-round.png) to know when an online
    example is available. All of the examples in this chapter can be found at [*https://meyerweb.github.io/csstdg5figs/18-transitions*](https://meyerweb.github.io/csstdg5figs/18-transitions).
  prefs: []
  type: TYPE_NORMAL
- en: As another example, you may want some drop-down menus to expand or become visible
    over 200 milliseconds (instead of instantly, which may be jarring). With transitions,
    you can make a drop-down menu appear slowly. In [Figure 18-1](#tr_fig01) [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/menus-initial-midtransition-and-final-state.html),
    we transition the submenu’s height by making a scale transform. This is a common
    use for CSS transitions, which we will also explore later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Especially rapid transitions, particularly those that move over large distances
    or take up major parts of a page, *can potentially lead to seizures in some users.*
    To reduce or eliminate this risk, use the `prefers-reduced-motion` media query
    (see [Chapter 21](ch21.html#css-at-rules)). Always keep these concerns in mind,
    and ensure the accessibility of your designs to people with epilepsy and other
    seizure disorders.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1801](assets/css5_1801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-1\. Initial transition, midtransition, and final state
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Transition Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In CSS, transitions are written using four transition properties: `transition-property`,
    `transition-duration`, `transition-timing-function`, and `transition-delay`, along
    with the `transition` property as a shorthand for those four.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the drop-down navigation in [Figure 18-1](#tr_fig01), we used all
    four CSS transition properties, as well as some transform properties defining
    the beginning and end states of the transition. The following code defines the
    transition for that example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Although we are using the `:hover` and `:focus` states for the style change
    event in this example, you can transition properties in other scenarios too. For
    example, you might add or remove a class, or otherwise change the state—say, by
    changing an input from `:invalid` to `:valid` or from `:checked` to `:not(:checked)`.
    Or you might append a table row at the end of a zebra-striped table or a list
    item at the end of a list with styles based on `:nth-last-of-type` selectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Figure 18-1](#tr_fig01), the initial state of the nested lists is `transform:`
    `scale(1, 0)` with a `transform-origin: top center`. The final state is `transform:`
    `scale(1, 1)`, while the `transform-origin` remains the same. (For more information
    on transform properties, see [Chapter 17](ch17.html#transforms).)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the transition properties define a transition on the `transform`
    property: when the new `transform` value is set on `hover`, the nested unordered
    list scales to its original, default size, changing smoothly between the old value
    of `transform: scale(1, 0)` and the new value of `transform: scale(1, 1)`, all
    over a period of 200 milliseconds. This transition starts after a 50-millisecond
    delay, and *eases in*, which means it proceeds slowly at first, then picks up
    speed as it progresses.'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever an animatable target property changes, if a transition is set on that
    property, the browser will apply a transition to make the change gradual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all the transition properties were set for the default unhovered/unfocused
    state of the `<ul>` elements. These states were used to change only the transform,
    not the transition. There’s a very good reason for this: it means that the menus
    not only will slide open when the state change happens, but also will slide closed
    when the hover or focus state ends.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that the transition properties were applied to the interaction states
    instead, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That would mean that when *not* hovered or focused, the element would have default
    transition values—which is to say, no transitions or instantaneous transitions.
    The menus in our previous example would slide open, but instantly disappear when
    the interaction state ends—because no longer being in an interactive state, the
    transition properties would no longer apply!
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe you want exactly this effect: slide smoothly open but instantly disappear.
    If so, then apply the transitions as shown in the previous example. Otherwise,
    apply them to the element in the default state directly so that the transitions
    will apply as the interaction state is both entered and exited. When the state
    change is exited, the transition timing is reversed. You can override this default
    reverse transition by declaring different transitions in both the initial and
    changed states.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By *initial state*, we mean a state that matches the element at page load time.
    It could mean a content-editable element that could get `:focus`, as in the following:
    [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/contenteditable.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the fully transparent background is always the initial state,
    changing only when the user gives the element focus. This is what we mean when
    we say *initial* or *default* value throughout this chapter. The transition properties
    included in the selector that matches the element all the time will impact that
    element whenever the state changes, including from the initial state to the changed
    state (being focused, in the preceding example).
  prefs: []
  type: TYPE_NORMAL
- en: 'An initial state could also be a temporary state that may change, such as a
    `:checked` checkbox or a `:valid` form control, or even a class that gets toggled
    on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, either the `:valid` or `:invalid` selector can match any given
    element, but never both. The `:focus` selector, as shown in [Figure 18-2](#tr_fig0202),
    matches whenever an input has focus, regardless of whether the input is matching
    the `:valid` or `:invalid` selector simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, when we refer to the initial state, we are referring to the original
    value, which could be either `:valid` or `:invalid`. The changed state for a given
    element is the opposite of the initial `:valid` or `:invalid` state. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/input-appearance-valid-invalid-focus.html)
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1802](assets/css5_1802.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-2\. The input’s appearance in the valid, invalid, and focused states
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Remember, you can apply different transition values to the initial and changed
    states, but you always want to apply the value used when you *enter* a given state.
    Take the following code as an example, where the transitions are set up to have
    menus slide open over 2 seconds but close in just 200 milliseconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This provides a horrible user experience, but it illustrates the point. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/menus-very-slow-transition.html)
    When hovered or focused, the opening of the navigation takes a full 2 seconds.
    When closing, it quickly closes over 0.2 seconds. The transition properties in
    the changed state are in force when a list item is hovered or focused. Thus, the
    `transition-duration: 2s` defined for these states takes effect. When a menu is
    no longer hovered or focused, it returns to the default scaled-down state, and
    the transition properties of the initial state—the `nav li ul` condition—are used,
    causing the menu to take 200 milliseconds to close.'
  prefs: []
  type: TYPE_NORMAL
- en: Look more closely at the example, specifically the default transition styles.
    When the user stops hovering over or focusing on the parent navigational element
    or the child drop-down menu, the drop-down menu delays 50 milliseconds before
    starting the `200ms` transition to close. This is actually a decent user experience
    style, because it give users a chance (however brief) to get the mouse pointer
    or focused ring back on a menu before it starts closing.
  prefs: []
  type: TYPE_NORMAL
- en: While the four transition properties can be declared separately, you will probably
    always use the shorthand. We’ll take a look at the four properties individually
    first so you have a good understanding of what each one does.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting Transition Effects by Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `transition-property` property specifies the names of the CSS properties
    you want to transition. This allows you to limit the transition to only certain
    properties, while having other properties change instantaneously. And, yes, it’s
    weird to say “the `transition-property` property.”
  prefs: []
  type: TYPE_NORMAL
- en: The value of `transition-property` is a comma-separated list of properties;
    the keyword `none` if you want no properties transitioned; or the default `all`,
    which means “transition all the animatable properties.” You can also include the
    keyword `all` within a comma-separated list of properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you include `all` as the only keyword—or default to `all`—all animatable
    properties will transition in unison. Let’s say you want to change a box’s appearance
    on hover:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When the mouse pointer hovers over the `<div>`, every property that has a different
    value in the initial state versus the hovered (changed) state will change to the
    hover-state values. The `transition-property` property is used to define which
    of those properties are animated over time (versus those that change instantly,
    without animating). All the properties change from the default value to the hovered
    value on `hover`, but only the animatable properties included in the `transition-property`
    will change over the transition’s duration. Nonanimatable properties like `border-style`
    change from one value to the next instantly.
  prefs: []
  type: TYPE_NORMAL
- en: If `all` is the only value or the last value in the comma-separated value for
    `transition-property`, all the animatable properties will transition in unison.
    Otherwise, provide a comma-separated list of properties to be affected by the
    transition properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, if we want to transition all the properties, the following statements
    are almost equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Both `transition-property` property declarations will transition all the properties
    listed—but the former will transition only the six properties that may change.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `transition-property: all` in the latter rule ensures that *all* animatable
    property values that would change based on any style change event—no matter which
    CSS rule block includes the changed property value—transitions over 1 second.
    The transition applies to all animatable properties applied to all the elements
    matched by the selector, not just the properties declared in the same style block
    as the `all`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the first version limits the transition to only the six properties
    listed, but enables us to provide more control over how each property will transition.
    Declaring the properties individually lets us provide different speeds, delays,
    and/or durations to each property’s transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to define the transitions for each property separately, write them
    all out, separating each of the properties with a comma. If you want to animate
    almost all the properties with the same duration, delay, and pace, with a few
    exceptions, you can use a combination of `all` and the individual properties you
    want to transition at different times, speeds, or paces. Just make sure to use
    `all` as the first value, because any properties listed before the `all` will
    be included in the `all`, overriding any other transition property values you
    intended to apply to those now overridden properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `all` part of the comma-separated value includes all the properties listed
    in the example, as well as all the inherited CSS properties, and all the properties
    defined in any other CSS rule block matching or inherited by the element.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, all the properties getting new values will transition
    at the same duration, delay, and timing function, with the exception of `border-radius`
    and `opacity`, which we’ve explicitly included separately. Because we included
    them as part of a comma-separated list after the `all`, we can transition them
    at the same time, delay, and timing function as all the other properties, or we
    can provide different times, delays, and timing functions for these two properties.
    In this case, we transition all the properties over 1 second, except for `border-radius`
    and `opacity`, which we transition over 2 seconds and 3 seconds, respectively.
    (The `transition-duration` property is covered in an upcoming section.)
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing transitions via property limits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While transitioning over time doesn’t happen by default, if you do include
    a CSS transition and want to override that transition in a particular scenario,
    you can set `transition-property: none` to override the entire transition and
    ensure that no properties are transitioned.'
  prefs: []
  type: TYPE_NORMAL
- en: The `none` keyword can be used as only a unique value of the property—you can’t
    include it as part of a comma-separated list of properties. If you want to override
    the transition of a limited set of properties, you will have to list all of the
    properties you still want to transition. You can’t use the `transition-property`
    property to exclude properties; rather, you can use that property only to include
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Another method is to set the delay and duration of the property to `0s`. That
    way, it will appear instantaneously, as if no CSS transition is being applied
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Transition events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The TransitionEvent Interface provides for four transition-related events:
    `transitionstart`, `transitionrun`, `transitionend`, and `transitioncancel`. We’ll
    concentrate on `transitionend`, as it’s the one that can be triggered multiple
    times by a single piece of CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A `transitionend` event is fired at the end of every transition, in either
    direction, for every property that is transitioned over any amount of time *or*
    after any delay. This happens whether the property is declared individually or
    is part of the `all` declaration. Some seemingly simple property declarations
    will use several `transitionend` events, as every animatable property within a
    shorthand property gets its own `transitionend` event. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the transitions conclude, well over six `transitionend` events will have
    occurred. For example, the `border-radius` transition alone produces four `transitionend`
    events, one each for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-bottom-left-radius`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-bottom-right-radius`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-top-right-radius`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-top-left-radius`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `padding` property is also shorthand for four longhand properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`padding-top`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-right`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-bottom`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-left`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `border` shorthand property produces eight `transitionend` events: four
    values for the four properties represented by the `border-width` shorthand, and
    four for the properties represented by `border-color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-left-width`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-right-width`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-top-width`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-bottom-width`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-top-color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-left-color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-right-color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-bottom-color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `border-style` properties have no `transitionend` events, however, as `border-style`
    is not an animatable property.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be 19 `transitionend` events in the scenario where six specific
    properties—`color`, `border`, `border-radius`, `opacity`, `width`, and `padding`—are
    listed, as those six include several shorthand properties. In the case of `all`,
    there will be at least 19 `transitionend` events: one for each of the longhand
    values making up the six properties we know are included in the pre- and post-transition
    states, and possibly from others that are inherited or declared in other style
    blocks impacting the element. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transitionend.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can listen for `transitionend` events like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `transitionend` event includes three event-specific attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`propertyName`'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the CSS property that just finished transitioning.
  prefs: []
  type: TYPE_NORMAL
- en: '`pseudoElement`'
  prefs: []
  type: TYPE_NORMAL
- en: The pseudo-element upon which the transition occurred, preceded by two semicolons,
    or an empty string if the transition was on a regular DOM node.
  prefs: []
  type: TYPE_NORMAL
- en: '`elapsedTime`'
  prefs: []
  type: TYPE_NORMAL
- en: The amount of time the transition took to run, in seconds; usually this is the
    time listed in the `transition-duration` property.
  prefs: []
  type: TYPE_NORMAL
- en: A `transitionend` event will occur for each property that successfully transitions
    to a new value. It will not fire if the transition is interrupted, such as by
    removing the state change that initiated the transition or by another change to
    the same property on the same element. That said, a `transitionend` event *will*
    occur when it reverts back to its initial value, or when it finishes transitioning
    to the value made by that other property value change on the element.
  prefs: []
  type: TYPE_NORMAL
- en: When the properties return to their initial value, another `transitionend` event
    occurs. This event occurs as long as the transition started, even if it didn’t
    finish its initial transition in the original direction.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Transition Duration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `transition-duration` property takes as its value a comma-separated list
    of lengths of time, in seconds (`s`) or milliseconds (`ms`). These time values
    describe the time it will take to transition from one state to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'When moving between two states, if a duration is declared for only one of those
    states, the transition duration will be used for only the transition *to* that
    state. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Thus, it will take 1 second for the input to change to a red background when
    it becomes invalid, and only 200 milliseconds to transition to a green background
    when it becomes valid. [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transition-duration-revert-difference.html)
  prefs: []
  type: TYPE_NORMAL
- en: The value of the `transition-duration` property is positive in either seconds
    (`s`) or milliseconds (`ms`). The time unit of `ms` or `s` is required by the
    specification, even if the duration is set to `0s`. By default, properties change
    from one value to the next instantly, showing no visible animation, which is why
    the default value for the duration of a transition is `0s`.
  prefs: []
  type: TYPE_NORMAL
- en: Unless a positive value for `transition-delay` is set on a property, if `transition-duration`
    is omitted, it is as if no `transition-property` declaration had been applied,
    and no `transitionend` event will occur. As long as the total duration time for
    a transition is greater than 0 seconds—as long as the `transition-duration` is
    greater than the `transition-delay`, including greater than the default `0s` delay—the
    transition will still be applied, and a `transitionend` event will occur when
    the transition finishes.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values for `transition-duration` are invalid, and, if included, will
    invalidate the entire `transition-duration` declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same lengthy `transition-property` declaration from before, we can
    declare a single duration for all the properties, individual durations for each
    property, or we can make alternate properties animate for the same length of time.
    We can declare a single duration that applies to all properties during the transition
    by including a single `transition-duration` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also declare the same number of comma-separated time values for the
    `transition-duration` property value as the CSS properties listed in the `transition-property`
    property value. If we want each property to transition over a different length
    of time, we have to include a different comma-separated value for each property
    name declared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If the number of properties declared does not match the number of durations
    declared, the browser has specific rules on how to handle the mismatch. If we
    have more durations than properties, the extra durations are ignored. If we have
    more properties than durations, the durations are repeated. In the following example,
    `color`, `border-radius`, and `width` have a duration of 100 milliseconds; `border`,
    `opacity`, and `padding` will be set to 200 milliseconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If we declare exactly two comma-separated durations, every odd property will
    transition over the first time declared, and every even property will transition
    over the second time value declared.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Always remember that user experience is important. If a transition is too slow,
    the website will appear slow or unresponsive, drawing unwanted focus to what should
    be a subtle effect. If a transition is too fast, it may be too subtle to be noticed.
    Visual effects should last long enough to be seen, but not so long as to make
    themselves the center of attention. Generally, the best duration for a visible,
    yet not distracting, transition is 100 to 300 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the Internal Timing of Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do you want your transition to start off slow and get faster, start off fast
    and end slower, advance at an even keel, jump through various steps, or even bounce?
    The `transition-timing-function` provides a way to control the pace of the transition.
  prefs: []
  type: TYPE_NORMAL
- en: The `transition-timing-function` values include `ease`, `linear`, `ease-in`,
    `ease-out`, `ease-in-out`, `step-start`, `step-end`, `steps(`*`n`*`, start)`—where
    *`n`* is the number of steps—`steps(`*`n`*`, end)`, and `cubic-bezier(x1, y1,
    x2, y2)`. (These values are also the valid values for the `animation-timing-function`,
    and they are described in great detail in [Chapter 19](ch19.html#animation).)
  prefs: []
  type: TYPE_NORMAL
- en: Cubic Bézier timing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The nonstep keywords are easing timing functions that serve as aliases for cubic
    Bézier mathematical functions that provide smooth curves. The specification provides
    for five predefined easing functions, as shown in [Table 18-1](#cubic_bezier).
  prefs: []
  type: TYPE_NORMAL
- en: Table 18-1\. Supported keywords for cubic Bézier timing functions
  prefs: []
  type: TYPE_NORMAL
- en: '| Timing function | Description | Cubic Bézier value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cubic-bezier()` | Specifies a cubic Bézier curve | `cubic-bezier(*x1, y1,
    x2, y2*)` |'
  prefs: []
  type: TYPE_TB
- en: '| `ease` | Starts slow, then speeds up, then slows down, then ends very slowly
    | `cubic-bezier(0.25, 0.1, 0.25, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `linear` | Proceeds at the same speed throughout transition | `cubic-bezier(0,
    0, 1, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `ease-in` | Starts slow, then speeds up | `cubic-bezier(0.42, 0, 1, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `ease-out` | Starts fast, then slows down | `cubic-bezier(0, 0, 0.58, 1)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ease-in-out` | Similar to `ease`; faster in the middle, with a slow start
    but not as slow at the end | `cubic-bezier(0.42, 0, 0.58, 1)` |'
  prefs: []
  type: TYPE_TB
- en: Cubic Bézier curves, including the underlying curves defining the five named
    easing functions in [Table 18-1](#cubic_bezier) and displayed in [Figure 18-3](#tr_fig0203),
    take four numeric parameters. For example, `linear` is the same as `cubic-bezier(0,
    0, 1, 1)`. The first and third cubic Bézier function parameter values need to
    be between 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1803](assets/css5_1803.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-3\. Curve representations of named cubic Bézier functions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The four numbers in a `cubic-bezier()` function define the *x* and *y* coordinates
    of two *handles* within a box. These handles are the endpoints of lines that stretch
    from the bottom-left and top-right corners of the box. The curve is constructed
    using the two corners, and the two handles’ coordinates, via a Bézier function.
  prefs: []
  type: TYPE_NORMAL
- en: To get an idea of how this works, look at the curves and their corresponding
    values shown in [Figure 18-4](#taic_css4_cubic-bezier-coordinates).
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1804](assets/css5_1804.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-4\. Four Bézier curves and their `cubic-bezier()` values (from [*http://cubic-bezier.com*](http://cubic-bezier.com))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Consider the first example. The first two values, corresponding to *x1* and
    *y1*, are `0.5` and `1`. If you go halfway across the box (*x1* = 0.5) and all
    the way to the top of the box (*y1* = 1), you land at the spot where the first
    handle is placed. Similarly, the coordinates `0.5,0` for *x2,y2* describe the
    point at the center bottom of the box, which is where the second handle is placed.
    The curve shown there results from those handle placements.
  prefs: []
  type: TYPE_NORMAL
- en: In the second example, the handle positions are switched, with the resulting
    change in the curve. Ditto for the third and fourth examples, which are inversions
    of each other. Notice how the resulting curve differs when switching the handle
    positions.
  prefs: []
  type: TYPE_NORMAL
- en: The predefined key terms are fairly limited. To better follow the principles
    of animation, you may want to use a cubic Bézier function with four float values
    instead of the predefined key words. If you’re a whiz at calculus or have a lot
    of experience with programs like Illustrator, you might be able to invent cubic
    Bézier functions in your head; otherwise, online tools let you play with different
    values, such as [*http://cubic-bezier.com*](http://cubic-bezier.com), which lets
    you compare the common keywords against each other or against your own cubic Bézier
    function.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Figure 18-5](#tr_fig0204), the website [*http://easings.net*](http://easings.net)
    provides many additional cubic Bézier function values you can use to provide for
    a more realistic, delightful animation.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1805](assets/css5_1805.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-5\. Useful author-defined cubic Bézier functions (from [*http://easings.net*](http://easings.net))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While the authors of the site named their animations, the preceding names are
    not part of the CSS specifications, and must be written as shown in [Table 18-2](#cubic_bezier_timings).
  prefs: []
  type: TYPE_NORMAL
- en: Table 18-2\. Cubic Bézier timings
  prefs: []
  type: TYPE_NORMAL
- en: '| Unofficial name | Cubic Bézier function value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInSine` | `cubic-bezier(0.47, 0, 0.745, 0.715)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutSine` | `cubic-bezier(0.39, 0.575, 0.565, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutSine` | `cubic-bezier(0.445, 0.05, 0.55, 0.95)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInQuad` | `cubic-bezier(0.55, 0.085, 0.68, 0.53)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutQuad` | `cubic-bezier(0.25, 0.46, 0.45, 0.94)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutQuad` | `cubic-bezier(0.455, 0.03, 0.515, 0.955)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInCubic` | `cubic-bezier(0.55, 0.055, 0.675, 0.19)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutCubic` | `cubic-bezier(0.215, 0.61, 0.355, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutCubic` | `cubic-bezier(0.645, 0.045, 0.355, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInQuart` | `cubic-bezier(0.895, 0.03, 0.685, 0.22)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutQuart` | `cubic-bezier(0.165, 0.84, 0.44, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutQuart` | `cubic-bezier(0.77, 0, 0.175, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInQuint` | `cubic-bezier(0.755, 0.05, 0.855, 0.06)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutQuint` | `cubic-bezier(0.23, 1, 0.32, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutQuint` | `cubic-bezier(0.86, 0, 0.07, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInExpo` | `cubic-bezier(0.95, 0.05, 0.795, 0.035)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutExpo` | `cubic-bezier(0.19, 1, 0.22, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutExpo` | `cubic-bezier(1, 0, 0, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInCirc` | `cubic-bezier(0.6, 0.04, 0.98, 0.335)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutCirc` | `cubic-bezier(0.075, 0.82, 0.165, 1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutCirc` | `cubic-bezier(0.785, 0.135, 0.15, 0.86)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInBack` | `cubic-bezier(0.6, -0.28, 0.735, 0.045)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeOutBack` | `cubic-bezier(0.175, 0.885, 0.32, 1.275)` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInOutBack` | `cubic-bezier(0.68, -0.55, 0.265, 1.55)` |'
  prefs: []
  type: TYPE_TB
- en: Step timing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Step timing functions also are available, as well as four predefined step values;
    see [Table 18-3](#step_timing_functions).
  prefs: []
  type: TYPE_NORMAL
- en: Table 18-3\. Step timing functions
  prefs: []
  type: TYPE_NORMAL
- en: '| Timing function | Definition |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `steps(<integer>, jump-start)` | Displays <*`integer`*> keyframes, showing
    the last keyframe for the last *n*/100% of the transition duration; the first
    jump happens at the very beginning of the transition. `start` can be used in place
    of `jump-start` |'
  prefs: []
  type: TYPE_TB
- en: '| `steps(<integer>, jump-end)` | Displays <*`integer`*> keyframes, staying
    on the initial state for the first *n*/100% of the transition duration; the last
    jump happens at the very end of the transition. `end` can be used in place of
    `jump-end` |'
  prefs: []
  type: TYPE_TB
- en: '| `steps(<integer>, jump-both)` | Displays <*`integer`*> keyframes, starting
    with an immediate jump and taking the final jump at the very end of the transition
    duration; this effectively adds one step to the transition |'
  prefs: []
  type: TYPE_TB
- en: '| `steps(<integer>, jump-none)` | Displays <*`integer`*> keyframes, but there
    is no jump at either the beginning or end of the transition duration, instead
    staying on the initial values for the first *n*/100% of the time *and* showing
    the final values for the last *n*/100% of the time; this effectively removes one
    step from the transition |'
  prefs: []
  type: TYPE_TB
- en: '| `step-start` | Stays on the final keyframe throughout transition duration;
    equal to `steps(1, jump-start)` |'
  prefs: []
  type: TYPE_TB
- en: '| `step-end` | Stays on the initial keyframe throughout transition duration;
    equal to `steps(1, jump-end)` |'
  prefs: []
  type: TYPE_TB
- en: As [Figure 18-6](#steptiming) shows, the step timing functions show the progression
    of the transition from the initial value to the final value in steps, rather than
    as a smooth curve.
  prefs: []
  type: TYPE_NORMAL
- en: '![css5 1806](assets/css5_1806.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-6\. Step timing functions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The step timing functions allow you to divide the transition over equidistant
    steps, by defining the number and direction of steps.
  prefs: []
  type: TYPE_NORMAL
- en: With `jump-start`, the first step happens at the animation or transition start.
    With `jump-end`, the last step happens at the animation or transition end. For
    example, `steps(5, jump-end)` would jump through the equidistant steps at 0%,
    20%, 40%, 60%, and 80%; and `steps(5, jump-start)` would jump through the equidistant
    steps at 20%, 40%, 60%, 80%, and 100%.
  prefs: []
  type: TYPE_NORMAL
- en: The `step-start` function is the same as `steps(1, jump-start)`. When used,
    transitioned property values stay on their *final* values from the beginning until
    the end of the transition. The `step-end` function, which is the same as `steps(1,
    jump-end)`, sets transitioned values to their *initial* values, staying there
    throughout the transition’s duration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Step timing, especially the precise meaning of `jump-start` and `jump-end`,
    is discussed in depth in [Chapter 19](ch19.html#animation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing on with the same lengthy `transition-property` declaration we’ve
    used before, we can declare a single timing function for all the properties, or
    define individual timing functions for each property, and so on. Here, we’ve set
    all the transitioned properties to a single duration and timing function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Always remember that the `transition-timing-function` does not change the time
    it takes to transition properties: that is set with the `transition-duration`
    property. It just changes how the transition progresses during that set time.
    Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If we include these seven timing functions for the seven properties, as long
    as they have the same transition duration and delay, all the properties start
    and finish transitioning at the same time. (The preceding transition would be
    a terrible user experience, by the way. Please don’t do that.)
  prefs: []
  type: TYPE_NORMAL
- en: The best way to familiarize yourself with the various timing functions is to
    play with them and see which one works best for the effect you’re looking for.
    While testing, set a relatively long `transition-duration` to better visualize
    the difference between the various functions. At higher speeds, you may not be
    able to tell the difference between different easing functions. Just don’t forget
    to set the transition back to a faster speed before publishing the result!
  prefs: []
  type: TYPE_NORMAL
- en: Delaying Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `transition-delay` property enables you to introduce a delay between the
    time that the change initiating the transition is applied to an element and the
    time the transition actually begins.
  prefs: []
  type: TYPE_NORMAL
- en: A `transition-delay` of `0s` (the default) means the transition will begin immediately;
    it will start executing as soon as the state of the element is altered. This is
    familiar from the instant-change effect of `a:hover`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: With a value other than `0s`, the <*`time`*> value of `transition-delay` defines
    the time offset from the moment the property values would ordinarily have changed
    until the property values declared in the `transition` or `transition-property`
    values begin animating to their final values.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, negative values of time are valid. The effects you can create
    with negative `transition-delay`s are described in [“Negative delay values”](#negative-delay-values).
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with the 6- (or 19-) property `transition-property` declaration
    we’ve been using, we can make all the properties start transitioning right away
    by omitting the `transition-delay` property, or by including it with a value of
    `0s`. Another possibility is to start half the transitions right away, and the
    rest 200 milliseconds later, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'By including `transition-delay: 0s, 200ms` on a series of properties, each
    taking 200 milliseconds to transition, we make `color`, `border-radius`, and `width`
    begin their transitions immediately. All the rest begin their transitions as soon
    as the other transitions have completed, because their `transition-delay` is equal
    to the `transition-duration` applied to all the properties.'
  prefs: []
  type: TYPE_NORMAL
- en: As with `transition-duration` and `transition-timing-function`, when the comma-separated
    `transition-delay` values outnumber the comma-separated `transition-property`
    values, the extra delay values are ignored. When the comma-separated `transition-property`
    values outnumber the comma-separated `transition-delay` values, the delay values
    are repeated.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even declare seven `transition-delay` values so that each property begins
    transitioning after the previous property has transitioned, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we declare each transition to last 200 milliseconds with the
    `transition-duration` property. We then declare a `transition-delay` that provides
    comma-separated delay values for each property that increments by 200 milliseconds,
    or 0.2 seconds—the same time as the duration of each property’s transition. The
    end result is that each property starts transitioning at the point the previous
    property has finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use math to give every transitioning property different durations and
    delays, ensuring that they all complete transitioning at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In this example, each property completes transitioning at the 1.4-second mark,
    but each with a different duration and delay. For each property, the `transition-duration`
    value plus the `transition-delay` value will add up to 1.4 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, you’ll want all the transitions to begin at the same time. You can
    make that happen by including a single `transition-delay` value, which gets applied
    to all the properties. In our drop-down menu in [Figure 18-1](#tr_fig01), we included
    a delay of 50 milliseconds. This delay is not long enough for the user to notice
    and will not cause the application to appear slow. Rather, a 50-millisecond delay
    can help prevent the navigation from shooting open unintentionally as the user
    accidentally hovers over the menu items while moving the cursor from one part
    of the page or app to another, or as they quickly move the focus ring through
    the document.
  prefs: []
  type: TYPE_NORMAL
- en: Negative delay values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A negative value for `transition-delay` that is smaller than the `transition-duration`
    will cause the transition to start immediately, partway through the transition.
    For example: [![](assets/play-icon-round.png)](https://meyerweb.github.io/csstdg5figs/18-transitions/transition-delay-negative.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Given the `transition-delay` of `-150ms` on a `200ms` transition, the transition
    will start three-quarters of the way through the transition and will last 50 milliseconds.
    In that scenario, given the linear timing function, the `<div>` jumps to being
    translated `150px` along the x-axis immediately on hover and then animates the
    translation from 150 pixels to 200 pixels over 50 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: If the absolute value of the negative `transition-delay` is greater than or
    equal to the `transition-duration`, the change of property values is immediate,
    as if no `transition` had been applied, *and* no `transitionend` event occurs.
  prefs: []
  type: TYPE_NORMAL
- en: When transitioning back from the hovered state to the original state, by default,
    the same value for the `transition-delay` is applied. In the preceding scenario,
    since the `transition-delay` is not overridden in the hover state, when the user
    stops hovering over the element, the `<div>` will jump to being translated 50
    pixels along the x-axis and then take 50 milliseconds to return to its initial
    position of being translated 0 pixels along the x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: Using the transition Shorthand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `transition` property combines the four properties we’ve covered thus far—`transition-property`,
    `transition-duration`, `transition-timing-function`, and `transition-delay`—into
    a single shorthand property.
  prefs: []
  type: TYPE_NORMAL
- en: The `transition` property accepts the value of `none`, or any number of comma-separated
    list of *single transitions*. A single transition contains a single property to
    transition, or the keyword `all` to transition all the properties; the duration
    of the transition; the timing function; and the transition delay.
  prefs: []
  type: TYPE_NORMAL
- en: If a single transition within the `transition` shorthand omits the property
    to transition, that single transition will default to `all`. If the `transition-timing-function`
    value is omitted, it will default to `ease`. If only one time value is included,
    that will be the duration, and no delay will occur, as if `transition-delay` were
    set to `0s`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within each single transition, the order of the duration versus the delay is
    important: the first value that can be parsed as a time will be set as the duration.
    If an additional time value is found before the comma or the end of the statement,
    that will be set as the delay.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are three equivalent ways to write the same transition effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the first example, we see a shorthand way to express each of the two properties
    that are being transitioned. Because we are transitioning all the properties that
    will be changed (in other rules not shown in the code block), we could use the
    keyword `all`, as shown in the second example. And, since `all` is the default
    value, we could write the shorthand with just the duration, timing function, and
    delay. Had we used `ease` instead of `ease-in`, we could have omitted the timing
    function, since `ease` is the default. Had we not wanted a delay, we could have
    omitted the second time value, since `0s` is the default.
  prefs: []
  type: TYPE_NORMAL
- en: We did have to include the duration, or no transition would be visible. In other
    words, the only portion of the `transition` property value that can truly be considered
    required is `transition-duration`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to only delay the change from closed menu to open menu without
    a gradual transition, we would still need to include a duration of `0s`. Remember,
    the first value parsable as time will be set as the duration and the second one
    will be set as the delay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This transition will wait 200 milliseconds, then show the drop-down fully open
    and opaque with no gradual transition. Creating delays with no transitions is
    a horrible user experience, so please do not do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have a comma-separated list of transitions (versus just a single declaration)
    and the word `none` is included, the entire transition declaration is invalid
    and will be ignored. You can declare comma-separated values for the four longhand
    transition properties, or you can include a comma-separated list of multiple shorthand
    transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The two preceding CSS rule blocks are functionally equivalent. Use care when
    stringing multiple shorthand transitions into a list of transitions: `transition:
    color, opacity 200ms ease-in 50ms` will ease in the opacity over 200 milliseconds
    after a 50-millisecond delay, but the `color` change will be instantaneous, with
    no `transitionend` event. It is still valid, but may not be the effect you were
    seeking.'
  prefs: []
  type: TYPE_NORMAL
- en: Reversing Interrupted Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a transition is interrupted before it is able to finish (such as mousing
    off a drop-down menu before it finishes its opening transition), property values
    are reset to the values they had before the transition began, and the properties
    transition back to those values. Because repeating the duration and timing functions
    on a reverting partial transition can lead to an odd or even bad user experience,
    the CSS Transitions specification provides for making the reverting transition
    shorter.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we have a `transition-delay` of `50ms` set on the default state of
    a menu, and no transition properties declared on the hover state; thus, browsers
    will wait 50 milliseconds before beginning the reverse (or closing) transition.
  prefs: []
  type: TYPE_NORMAL
- en: When the forward animation finishes transitioning to the final values and the
    `transitionend` event is fired, all browsers will duplicate the `transition-delay`
    in the reverse states. Let’s say the user moves off that menu 75 milliseconds
    after it started transitioning. This means the drop-down menu will animate closed
    without ever being fully opened and fully opaque. The browser should have a 50-millisecond
    delay before closing the menu, just as it waited 50 milliseconds before starting
    to open it. This is actually a good user experience, as it provides a few milliseconds
    of delay before closing, preventing jerky behavior if the user accidentally navigates
    off the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of a step timing function, if the transition is 10 seconds with
    10 steps, and the properties revert after 3.25 seconds, ending a quarter of the
    way between the third and fourth steps (completing three steps, or 30% of the
    transition), it will take 3 seconds to revert to the previous values. In the following
    example, the width of our `<div>` will grow to 130 pixels wide before it begins
    reverting back to 100 pixels wide on mouseout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: While the reverse duration will be rounded down to the time it took to reach
    the most recently executed step, the reverse *direction* will be split by the
    originally declared number of steps, not the number of steps that completed. In
    our 3.25-second case, it will take 3 seconds to revert through 10 steps. These
    reverse transition steps will be shorter in duration at 300 milliseconds each,
    each step shrinking the width by 3 pixels, instead of 10 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: If the timing function is linear, the duration will be the same in both directions.
    All other `cubic-bezier` functions will have a duration that is proportional to
    progress the initial transition made before being interrupted. Negative `transition-delay`
    values are also proportionally shortened. Positive delays remain unchanged in
    both directions.
  prefs: []
  type: TYPE_NORMAL
- en: No browser will have a `transitionend` for the hover state, as the transition
    did not end; but all browsers will have a `transitionend` event in the reverse
    state when the menu finishes collapsing. The `elapsedTime` for that reverse transition
    depends on whether the browser took the full 200 milliseconds to close the menu,
    or if the browser takes as long to close the menu as it did to partially open
    the menu.
  prefs: []
  type: TYPE_NORMAL
- en: To override these values, include transition properties in both the initial
    and final states (e.g., both the unhovered and hovered styles). While this does
    not impact the reverse shortening, it does provide more control.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Beware of having transitions on both ancestors and descendants. For example,
    transitioning inherited properties on an element soon after transitioning the
    same property on ancestor or descendant nodes can have unexpected outcomes. If
    the transition on the descendant completes before the transition on the ancestor,
    the descendant will then resume inheriting the (still transitioning) value from
    its parent. This effect may not be what you expect.
  prefs: []
  type: TYPE_NORMAL
- en: Animatable Properties and Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before implementing transitions and animations, it’s important to understand
    that not all properties are animatable. You can transition (or animate) any animatable
    CSS properties; but which properties are animatable?
  prefs: []
  type: TYPE_NORMAL
- en: One key to developing a sense for which properties can be animated is to identify
    which have values that can be interpolated. *Interpolation* is the construction
    of data points between the values of known data points. The key guideline to determining
    if a property value is animatable is whether the *computed value* can be interpolated.
    If a property’s computed values are keywords, they can’t be interpolated; if its
    keywords compute to a number of some sort, they can be. The quick gut check is
    that if you can determine a midpoint between two property values, those property
    values are probably animatable.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `display` values like `block` and `inline-block` aren’t numeric
    and therefore don’t have a midpoint; they aren’t animatable. The `transform` property
    values of `rotate(10deg)` and `rotate(20deg)` have a midpoint of `rotate(15deg)`;
    they are animatable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `border` property is shorthand for `border-style`, `border-width`, and
    `border-color` (which, in turn, are themselves shorthand properties for the four
    side values). While there is no midpoint between any of the `border-style` values,
    the `border-width` property length units are numeric, so they can be animated.
    The keyword values of `medium`, `thick`, and `thin` have numeric equivalents and
    can be interpolated: the computed value of the `border-width` property translates
    those keywords to lengths.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `border-color` value, colors are numeric—the named colors can all be
    represented using hexadecimal or other numeric color values—so colors are animatable
    as well. If you transition from `border: red solid 3px` to `border: blue dashed
    10px`, the border width and border colors will transition at the defined speed,
    but `border-style` will jump from `solid` to `dashed` immediately.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same vein, CSS functions that take numeric values as parameters generally
    are animatable. An exception to this rule is properties with discrete animation
    types like `visibility`: while there is no midpoint between the values of `visible`
    and `hidden`, `visibility` values jump between the discrete values, jumping from
    visible to not visible. With the `visibility` property, when the initial value
    or the destination value is `visible`, the value will change at the end of the
    transition from `visible` to `hidden`. For a transition from `hidden` to `visible`,
    the value changes at the start of the transition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `auto` value should generally be considered nonanimatable and should be
    avoided for animations and transitions. According to the specification, it is
    not an animatable value, but some browsers interpolate the current numeric value
    of `auto` (such as `height: auto`) to be `0px` or possibly a `fit-content()` function.
    The `auto` value is nonanimatable for properties like `height`, `width`, `top`,
    `bottom`, `left`, `right`, and `margin`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Often an alternative property or value may work. For example, instead of changing
    `height: 0` to `height: auto`, use `max-height: 0` to `max-height: 100vh`, which
    will generally create the expected effect. The `auto` value is animatable for
    `min-height` and `min-width`, since `min-height: auto` actually computes to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: How Property Values Are Interpolated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Numbers are interpolated as floating-point numbers. Integers are interpolated
    as whole numbers, and thus increment or decrement as whole numbers.
  prefs: []
  type: TYPE_NORMAL
- en: In CSS, length and percentage units are translated into real numbers. When transitioning
    or animating `calc()`, from one type of length to or from a percentage, the values
    will be converted into a `calc()` function and interpolated as real numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Colors, whether they are HSLA, RGB, or named colors like `aliceblue`, are translated
    to their RGBA equivalent values for transitioning, and interpolated across the
    RGBA color space. If you want to interpolate across a different color space, such
    as HSL, ensure the pre- and post-transition colors are in the same color space
    (in this case, HSL).
  prefs: []
  type: TYPE_NORMAL
- en: When animating font weights, if you use keywords like `bold`, they’ll be converted
    to numeric values and animated.
  prefs: []
  type: TYPE_NORMAL
- en: 'When including animatable property values that have more than one component,
    each component is interpolated appropriately for that component. For example,
    `text-shadow` has up to four components: the color, `x`, `y`, and `blur`. The
    color is interpolated as `color`, whereas the `x`, `y`, and `blur` components
    are interpolated as lengths.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Box shadows have two additional optional keywords: `inset` (or lack thereof)
    and `spread`. Because `spread` is a length, it is interpolated. The `inset` keyword
    cannot be converted to a numeric equivalent, so there is no way to gradually transition
    between inset and drop shadows.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to values with more than one component, gradients can be transitioned
    only if you are transitioning gradients of the same type (linear, radial, or conic)
    with equal numbers of color stops. The colors of each color stop are then interpolated
    as colors, and the position of each color stop is interpolated as length and percentage
    units.
  prefs: []
  type: TYPE_NORMAL
- en: Interpolating Repeating Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have simple lists of other types of properties, each item in the list
    is interpolated appropriately for that type—as long as the lists have the same
    number of items or repeatable items, and each pair of values can be interpolated.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In transitioning four `background-sizes`, with all the sizes in both lists listed
    in pixels, the third `background-size` from the pretransitioned state can gradually
    transition to the third `background-size` of the transitioned list. In the preceding
    example, background images 1, 5, and 9 will transition from `10px` to `25px` in
    height and width when hovered. Similarly, images 3, 7, and 11 will transition
    from `30px` to `75px`, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, the `background-size` values are repeated three times, as if the CSS
    had been written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If a property doesn’t have enough comma-separated values to match the number
    of background images, the list of values is repeated until there are enough, even
    when the list in the animated state doesn’t match the initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If we transition from four `background-size` declarations in the initial state
    to three `background-size` declarations in the animated state, all in pixels and
    still with 12 background images, the animated and initial state values are repeated
    (three and four times, respectively) until we have the 12 necessary values, as
    if the following had been declared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If a pair of values cannot be interpolated—for example, if the `background-size`
    changes from `contain` in the default state to `cover` when hovered—then, according
    to the specification, the lists are not interpolatable. However, some browsers
    ignore that particular pair of values for the purposes of the transition, and
    still animate the interpolatable values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some property values can animate if the browser can infer implicit values.
    For example, for shadows, the browser will infer an implicit shadow `box-shadow:
    transparent 0 0 0` or `box-shadow: inset transparent 0 0 0`, replacing any values
    not explicitly included in the pre- or post-transition state. These examples are
    in the [chapter files for this book](https://meyerweb.github.io/csstdg5figs).'
  prefs: []
  type: TYPE_NORMAL
- en: Only animatable property value changes trigger `transitionend` events.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you accidentally include a property that can’t be transitioned, fear not.
    The entire declaration will not fail: the browser will simply not transition the
    property that is not animatable.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that a nonanimatable property or nonexistent CSS property is not exactly
    ignored. The browser passes over unrecognized or nonanimatable properties, keeping
    their place in the property list order to ensure that the other comma-separated
    transition properties described next are not applied to the wrong properties.^([1](ch18.html#idm45176064085488))
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Transitions can occur only on properties that are not currently being impacted
    by a CSS animation. If the element is being animated, properties may still transition,
    as long as they are not properties that are currently controlled by the animation.
    CSS animations are covered in [Chapter 19](ch19.html#animation).
  prefs: []
  type: TYPE_NORMAL
- en: Printing Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When web pages or web applications are printed, the stylesheet for print media
    is used. If your style element’s media attribute matches only `screen`, the CSS
    will not impact the printed page at all.
  prefs: []
  type: TYPE_NORMAL
- en: Often, no media attribute is included; it is as if `media="all"` were set, which
    is the default. Depending on the browser, when a transitioned element is printed,
    either the interpolating values are ignored or the property values in their current
    state are printed.
  prefs: []
  type: TYPE_NORMAL
- en: You can’t see the element transitioning on a piece of paper, but in some browsers,
    like Chrome, if an element transitioned from one state to another, the current
    state at the time the `print` function is called will be the value on the printed
    page, if that property is printable. For example, if a background color changed,
    neither the pre-transition or the post-transition background color will be printed,
    as background colors are generally not printed. However, if the text color mutated
    from one value to another, the current value of `color` will get printed on a
    color printer or to a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: In other browsers, like Firefox, whether the pre-transition or post-transition
    value is printed depends on how the transition was initiated. If it’s initiated
    with a hover, for example, the nonhovered value will be printed, as you are no
    longer hovering over the element while you interact with the print dialog. If
    it transitioned with a class addition, the post-transition value will be printed,
    even if the transition hasn’t completed. The printing acts as if the transition
    properties are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Given that CSS has separate print stylesheets or `@media` rules for print, browsers
    compute style separately. In the print style, styles don’t change, so there just
    aren’t any transitions. The printing acts as if the property values changed instantly
    instead of transitioning over time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transitions are a useful and quite powerful way to add UI enhancements. Worrying
    about archaic browsers should not prevent you from including them, since if a
    browser doesn’t support CSS transitions, the changes will still be applied. They’ll
    just “transition” from the initial state to the end state instantaneously when
    the style recomputation occurs. A user may miss out on an interesting (or possibly
    annoying) effect, but will not miss out on any content.
  prefs: []
  type: TYPE_NORMAL
- en: The defining feature of transitions is that they are applied when an element
    transitions from one state to another, whether that happens because of user action
    or some kind of scripted change to the DOM. If you want elements to animate regardless
    of user action or DOM changes, the next chapter will show you the way.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch18.html#idm45176064085488-marker)) This might change. The CSS Working
    Group is considering making all property values animatable, switching from one
    value to the next at the midpoint of the timing function if there is no midpoint
    between the pre and post values.
  prefs: []
  type: TYPE_NORMAL
