- en: Chapter 4\. Using Azure Arc Enabled Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, let’s begin by exploring the architecture involved with
    Azure Arc enabled Kubernetes and what it takes to onboard, monitor, and use RBAC
    with an Azure Arc projected Kubernetes cluster. We’ll also dive into how to deploy
    an app to an Azure Arc projected Kubernetes cluster using GitOps.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Arc Enabled Kubernetes Architecture and Agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Arc enabled Kubernetes is essentially a PaaS running in Azure. The architecture
    for the service itself is abstracted away. Azure Arc enabled Kubernetes architecture
    generally consists of some Azure services, resources, tools, and agents and a
    number of Deployments and Pods running on the projected Kubernetes cluster. Let’s
    unpack all of this to dive deeper into what the architecture and agent entail.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll need a Kubernetes cluster running either in Azure or outside of
    Azure. This can be AKS; GKE; EKS; Kubernetes running on VMs in Azure, AWS, GCP,
    on-premises, etc.; Rancher K3s; or even Kubernetes running on an edge device.
    This becomes your projected Kubernetes cluster in Azure Arc enabled Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need the *kubeconfig* file to access the cluster and cluster-admin role
    on the projected Kubernetes cluster. This will give the access needed to deploy
    the Arc agents.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need the Azure command-line interface (Azure CLI) version 2.3 or higher.
    This is needed to install the Azure Arc enabled Kubernetes interface extensions
    and used to perform registration tasks of the projected Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to create a service principal name (SPN) in Azure. This must have
    read and write permissions on the *Microsoft.Kubernetes/connectedClusters* resource
    type. This SPN will also be used with the `az login` and `az connectedk8s connect`
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need the following Azure Arc providers enabled in the Azure subscription
    you’re running Azure Arc enabled Kubernetes in:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Microsoft.Kubernetes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.KubernetesConfiguration`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll need to load the `connectedk8s` extension and the Arc enabled Kubernetes
    CLI extensions. Also, you need Helm 3, as this is used when onboarding the projected
    Kubernetes cluster to Arc with the `az connectedk8s` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll have Azure Arc enabled Kubernetes agents running on the projected Kubernetes
    cluster(s). In order for the agent to work, the following network protocols/ports
    and outbound URLs need to be allowed on the projected Kubernetes cluster network:'
  prefs: []
  type: TYPE_NORMAL
- en: Protocols/ports
  prefs: []
  type: TYPE_NORMAL
- en: TCP on port 443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP on port 9418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endpoints (DNS) allowed outbound from projected Kubernetes cluster
  prefs: []
  type: TYPE_NORMAL
- en: '[https://management.azure.com](https://management.azure.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://eastus.dp.kubernetesconfiguration.azure.com](https://eastus.dp.kubernetesconfiguration.azure.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://westeurope.dp.kubernetesconfiguration.azure.com](https://westeurope.dp.kubernetesconfiguration.azure.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://login.microsoftonline.com](https://login.microsoftonline.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://mcr.microsoft.com](https://mcr.microsoft.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://eus.his.arc.azure.com](https://eus.his.arc.azure.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://weu.his.arc.azure.com](https://weu.his.arc.azure.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the agent is loaded and the projected cluster is onboarded to Arc, there
    will be a namespace, `azure-arc`, running on a projected Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will also be operators running on the projected Kubernetes cluster in
    the `azure-arc` namespace as Deployments (i.e., `deployment.apps`). These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config-agent`'
  prefs: []
  type: TYPE_NORMAL
- en: Monitors the projected Kubernetes cluster to update the compliance state when
    `sourceControlConfiguration` resources are applied on the projected cluster.
  prefs: []
  type: TYPE_NORMAL
- en: '`controller-manager`'
  prefs: []
  type: TYPE_NORMAL
- en: Orchestrates interactions between Azure Arc components. It’s an operator used
    to operate other operators.
  prefs: []
  type: TYPE_NORMAL
- en: '`metrics-agent`'
  prefs: []
  type: TYPE_NORMAL
- en: Gathers metrics from other Arc agents to measure performance and ensure it’s
    optimal.
  prefs: []
  type: TYPE_NORMAL
- en: '`cluster-metadata-operator`'
  prefs: []
  type: TYPE_NORMAL
- en: Collects versions of clusters and Azure Arc agents, cluster metadata, and node
    count.
  prefs: []
  type: TYPE_NORMAL
- en: '`resource-sync-agent`'
  prefs: []
  type: TYPE_NORMAL
- en: Syncs the metadata collected by the cluster-metadata-operator with Azure Arc.
  prefs: []
  type: TYPE_NORMAL
- en: '`clusteridentityoperator`'
  prefs: []
  type: TYPE_NORMAL
- en: Holds a Managed Service Identity (MSI) certificate that is used by the other
    operators to communicate with Azure.
  prefs: []
  type: TYPE_NORMAL
- en: '`flux-logs-agent`'
  prefs: []
  type: TYPE_NORMAL
- en: As a part of the `sourceControlConfiguration`, flux operators are deployed to
    the projected Kubernetes cluster(s), and this agent collects the logs from them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be some Pods running on the projected Kubernetes cluster in the
    azure-arc namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cluster-metadata-operator-b88f6695d-rf998`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clusteridentityoperator-6459fd778c-4wx66`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config-agent-6cc967f5-kd8b8`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controller-manager-557d758b9f-f69vw`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flux-logs-agent-5db8bff9d4-gktl4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metrics-agent-997cf95d5-h96gd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resource-sync-agent-587b999567-4kz64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That sums up the components involved with Azure Arc enabled Kubernetes, from
    the Azure services, resources, tools, agents, and a number of Deployments and
    Pods involved in the architecture. Next, we’ll explore how to set up and use Azure
    Arc enabled Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Service Principal Name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, you’ll need to create a service principal name in your
    Azure subscription. This SPN will need read and write permissions on the *Microsoft.Kubernetes/connectedClusters*
    resource type in the subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re also going to use this SPN with the `az login` command as well as the
    `az connectedk8s connect` command. You can create this SPN with one line of syntax
    by running it in Azure Cloud Shell. You can use the following syntax to create
    the SPN with a name and assign it to a specific subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll want to copy the output somewhere safe, as you’ll need to use it. It
    will look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Connecting Kubernetes Clusters to Azure Arc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s get ready to configure what we need in Azure for Azure Arc enabled
    Kubernetes and connect it to an existing Kubernetes cluster. This existing Kubernetes
    cluster can be AKS, GKE, EKS, or a cluster you deploy on your own. You can perform
    the actions in this section from Azure Cloud Shell or locally using a tool like
    VS Code. It’s recommended that you perform the following actions from Bash.
  prefs: []
  type: TYPE_NORMAL
- en: Note that since we’re connecting an existing Kubernetes cluster, we need to
    ensure that our `KUBECONFIG` is configured and that we’re working against the
    proper context of the Kubernetes cluster we plan to connect to Azure Arc.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the `connectedk8s` extension by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll register the Kubernetes providers we need for Azure Arc enabled
    Kubernetes with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here is where we can log into the subscription using the SPN so that we’re using
    the SPN to perform the remaining tasks. Here is the syntax to use the SPN with
    `az login:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’ll create the resource group that will be used for our projected Kubernetes
    cluster. You should create a new resource group for each projected Kubernetes
    cluster you plan to onboard. As a reminder, we have to create this resource group
    in one of the two supported regions for Azure Arc enabled Kubernetes. Use the
    following syntax to create the resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s set our Bash environment variables for our SPN with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can connect our Kubernetes cluster to Azure Arc enabled Kubernetes.
    This action will deploy the Azure Arc enabled Kubernetes agent and operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once completed, our Kubernetes cluster will be connected to Azure Arc and will
    appear as a projected Kubernetes cluster in Azure Arc enabled Kubernetes. [Figure 4-1](#fig_1_azure_arc_enabled_kubernetes_clusters_view_in_the)
    shows what a projected Kubernetes cluster looks like in Azure Arc in the Azure
    Portal.
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure Arc enabled Kubernetes clusters view in the Azure Portal](Images/aaek_0401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1\. Azure Arc enabled Kubernetes clusters view in the Azure Portal
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once our Kubernetes cluster is connected to Azure Arc, we can click the projected
    Kubernetes cluster and assign RBAC to it via Access Control (IAM), assign tags,
    lock the cluster, see its properties, configure a GitOps configuration to it,
    and apply Azure Policies to it.
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Active Directory RBAC with Azure Arc Projected Kubernetes Clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Role assignments can be assigned to the projected Kubernetes cluster using the
    Access Control (IAM) blade of the projected cluster resource in the Azure Arc
    area of the Azure Portal, as shown in [Figure 4-2](#fig_2_azure_arc_enabled_kubernetes_rbac_roles_in_the_azu).
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure Arc enabled Kubernetes RBAC roles in the Azure Portal](Images/aaek_0402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2\. Azure Arc enabled Kubernetes RBAC roles in the Azure Portal
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note that RBAC only applies to accessing the projected cluster via Azure. This
    does not apply when accessing the cluster directly on its hosted platform (i.e.,
    GCP, AWS, on-premises, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: App Deployment to Azure Arc Projected Kubernetes Clusters with GitOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we’re going to walk through how to utilize GitOps to deploy a simple application
    and other API objects to our projected Kubernetes cluster in Azure Arc enabled
    Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you should do is create your own public GitHub repository.
    Create a *hello-kubernetes-arc-demo.yaml* file in the repository with the following
    contents in the YAML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This YAML file is from one of [Paul Bouwer’s repositories](https://oreil.ly/CkzqI).
    It is often used to demo deploying a small workload to a Kubernetes cluster. Note
    that GitOps in Azure Arc enabled Kubernetes works with both public and private
    Git repositories. In order to use a GitOps with a Git private repository, you
    would use SSH and either Flux-created or user-provided keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create the GitOps configuration. This will deploy the Flux
    operator and Memcached on the projected Kubernetes cluster. We’ll use the `az
    k8sconfiguration` command to do this. Here’s the syntax to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After it’s finished, we can verify that the new GitOps configuration was created
    in “Azure Portal at Azure Arc” > “Azure Arc | Kubernetes clusters” > [projected
    Kubernetes cluster name] > GitOps (see [Figure 4-3](#fig_3_gitops_displayed_in_the_azure_portal)).
  prefs: []
  type: TYPE_NORMAL
- en: '![GitOps displayed in the Azure Portal](Images/aaek_0403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3\. GitOps displayed in the Azure Portal
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: GitOps has deployed everything needed to run the sample application. It has
    effectively deployed a service type, `LoadBalancer`; a deployment with three replicas;
    and a Pod running the web application in the projected Kubernetes cluster. You
    can check out the new API objects in your projected Kubernetes cluster using `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll be able to see the Pod running in your Kubernetes cluster by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the services and get the external IP of the load balancer by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When you visit the IP in a web browser, you should see the output shown in [Figure 4-4](#fig_4_app_deployed_in_a_web_browser_via_gitops).
  prefs: []
  type: TYPE_NORMAL
- en: '![App deployed in a web browser via GitOps](Images/aaek_0404.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-4\. App deployed in a web browser via GitOps
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, if you want to make sure that GitOps will ensure your desired state of
    the app, go ahead and delete the deployment by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After about five seconds, Flux will sync and reapply the YAML file, putting
    the deployment back in place.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring an Azure Arc Projected Kubernetes Cluster with Azure Monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Monitoring your Kubernetes cluster and the containers running on it is critical
    to operating an environment. You can utilize Azure Monitor for containers with
    projected Kubernetes clusters in Azure Arc enabled Kubernetes. Azure Monitor for
    containers gives you performance visibility of your Kubernetes cluster and collects
    the container logs for monitoring of your workloads as well. At the time of this
    writing, Azure Monitor for Containers does not support LiveData. Before you can
    enable this monitoring, you need to have the following prerequisites in place.
    These prerequisites can be set on the SPN account you created:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a Log Analytics workspace configured with Azure Monitor for containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At a minimum, you need to be a member of the Azure Contributor role in the Azure
    subscription.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to be a member of the Log Analytics Contributor role of the Log Analytics
    workspace configured with Azure Monitor for containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to be a member of the Contributor role on the Azure Arc cluster resource.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to be a member of the Log Analytics reader role permission.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need a HELM client to onboard the Azure Monitor for containers chart for
    the specified Kubernetes cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s set this up. Note that everything we’ll walk through is still being run
    in Bash.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s download the enable monitoring AKA OMS script using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to get the Azure Arc Connected Cluster Azure Resource ID using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve the projected Kubernetes cluster credentials from the current `KubeContext`
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the *enable-monitoring.sh* script using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When *enable-monitoring.sh* is done, you can go into the Azure Portal at “Azure
    Arc” > “Azure Arc | Kubernetes clusters” >[projected Kubernetes cluster name]
    > “Monitoring – Insights” to see the monitoring of your projected Kubernetes cluster
    (see [Figure 4-5](#fig_5_view_of_monitored_projected_kubernetes_cluster_in)).
    Note that it can take up to 15 minutes for data to start populating.
  prefs: []
  type: TYPE_NORMAL
- en: '![View of monitored projected Kubernetes cluster in Azure Arc enabled Kubernetes](Images/aaek_0405.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-5\. View of monitored projected Kubernetes cluster in Azure Arc enabled
    Kubernetes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This brings us to the end of our journey together. Let’s recap what we covered.
    In this report, we started by touching on the market demand for multicloud and
    how this is driving a need to manage Kubernetes across multiple clouds. We then
    took a detour into the brief history of Azure Arc along with an overview of the
    overall service. We rounded out that detour with how Azure Arc is able to fill
    the “single pane of glass” promise.
  prefs: []
  type: TYPE_NORMAL
- en: We shifted down another route into Azure Arc enabled Kubernetes, first giving
    an overview about Azure Kubernetes Service. Then we explained what Azure Arc enabled
    Kubernetes is and the reach it has. We gained insight into what GitOps is, what
    it does, and how it’s used, finishing up with how Azure Arc leverages GitOps.
  prefs: []
  type: TYPE_NORMAL
- en: We then took a journey into Azure Arc’s architecture and components, how to
    connect Kubernetes clusters to it, and how to use RBAC and Azure Monitor with
    Azure Arc enabled Kubernetes. We also walked through setting up GitOps and deploying
    an application and configuration to a projected Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you learned a lot from this report about Azure Arc and GitOps. If your
    organization is running multiple Kubernetes clusters across different environments,
    I recommend looking further into Azure Arc as a way to simplify your management
    needs of Kubernetes across the multiple environments.
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steve Buchanan** ([@buchatech](https://twitter.com/buchatech)) is a director
    and Midwest Containers Services Lead on a Cloud Transformation team with a large
    consulting firm. He is a nine-time Microsoft MVP, Pluralsight author, and the
    author of six technical books. He is an international speaker, having presented
    at tech events including Midwest Management Summit (MMS), Microsoft Ignite, BITCon,
    Experts Live Europe, OSCON, Inside Azure management, and user groups. Steve is
    currently focused on transforming the position of IT into a strategic partner
    of the business and driver of digital transformation through ITSM, DevOps, and
    CloudOps. He stays active in the technical community and enjoys blogging about
    his adventures in the world of IT at [www.buchatech.com](http://www.buchatech.com).'
  prefs: []
  type: TYPE_NORMAL
