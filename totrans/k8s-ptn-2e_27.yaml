- en: Chapter 22\. Configuration Template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Configuration Template* pattern enables you to create and process large
    and complex configurations during application startup. The generated configuration
    is specific to the target runtime environment as reflected by the parameters used
    in processing the configuration template.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 20, “Configuration Resource”](ch20.html#ConfigurationResource),
    you saw how to use the Kubernetes native resource objects ConfigMap and Secret
    to configure applications. But sometimes configuration files can get large and
    complex. Putting the configuration files directly into ConfigMaps can be problematic
    since they have to be correctly embedded in the resource definition. We need to
    be careful and avoid using special characters like quotes and breaking the Kubernetes
    resource syntax. The size of configurations is another consideration, as there
    is a limit on the sum of all values of ConfigMaps or Secrets, which is 1 MB (a
    limit imposed by the underlying backend store etcd).
  prefs: []
  type: TYPE_NORMAL
- en: Large configuration files typically differ only slightly for the different execution
    environments. This similarity leads to a lot of duplication and redundancy in
    the ConfigMaps because each environment has mostly the same data. The *Configuration
    Template* pattern we explore in this chapter addresses these specific use-case
    concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To reduce duplication, it makes sense to store only the *differing* configuration
    values like database connection parameters in a ConfigMap or even directly in
    environment variables. During startup of the container, these values are processed
    with configuration templates to create the full configuration file (like a WildFly
    *standalone.xml*). There are many tools like *Tiller* (Ruby) or *Gomplate* (Go)
    for processing templates during application initialization. [Figure 22-1](#img-configuration-template)
    is a configuration template example filled with data coming from environment variables
    or a mounted volume, possibly backed by a ConfigMap.
  prefs: []
  type: TYPE_NORMAL
- en: Before the application is started, the fully processed configuration file is
    put into a location where it can be directly used like any other configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two techniques for how such live processing can happen during runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: We can add the template processor as part of the `ENTRYPOINT` to a Dockerfile
    so the template processing becomes directly part of the container image. The entry
    point here is typically a script that first performs the template processing and
    then starts the application. The parameters for the template come from environment
    variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Kubernetes, a better way to perform initialization is with an init container
    of a Pod in which the template processor runs and creates the configuration for
    the application containers in the Pod. The *Init Container* pattern is described
    in detail in [Chapter 15](ch15.html#InitContainer).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Kubernetes, the init container approach is the most appealing because we
    can use ConfigMaps directly for the template parameters. This technique is illustrated
    in [Figure 22-1](#img-configuration-template).
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuration template pattern](assets/kup2_2201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-1\. Configuration template
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The application’s Pod definition consists of at least two containers: one init
    container for the template processing and one for the application container. The
    init container contains not only the template processor but also the configuration
    templates themselves. In addition to the containers, this Pod also defines two
    volumes: one volume for the template parameters, backed by a ConfigMap, and an
    `emptyDir` volume used to share the processed templates between the init container
    and the application container.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this setup, the following steps are performed during startup of this Pod:'
  prefs: []
  type: TYPE_NORMAL
- en: The init container is started, and it runs the template processor. The processor
    takes the templates from its image, and the template parameters from the mounted
    ConfigMap volume, and stores the result in the `emptyDir` volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the init container has finished, the application container starts up and
    loads the configuration files from the `emptyDir` volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example uses an init container for managing a full set of WildFly
    configuration files for two environments: a development environment and a production
    environment. Both are very similar to each other and differ only slightly. In
    fact, in our example, they differ only in the way logging is performed: each log
    line is prefixed with `DEVELOPMENT:` or `PRODUCTION:`, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full example along with complete installation instructions
    in the book’s example [GitHub repo](https://oreil.ly/gzSdc). (We show only the
    main concept here; for the technical details, refer to the source repo.)
  prefs: []
  type: TYPE_NORMAL
- en: The log pattern in [Example 22-1](#ex-log-config-template) is stored in *standalone.xml*,
    which we parameterize by using the Go template syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Example 22-1\. Log configuration template
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here we use [Gomplate](https://gomplate.ca) as a template processor, which uses
    the notion of a *data source* for referencing the template parameters to be filled
    in. In our case, this data source comes from a ConfigMap-backed volume mounted
    to an init container. Here, the ConfigMap contains a single entry with the key
    `logFormat`, from where the actual format is extracted.
  prefs: []
  type: TYPE_NORMAL
- en: With this template in place, we can now create the Docker image for the init
    container. The Dockerfile for the image *k8spatterns/example-configuration-template-init*
    is very simple ([Example 22-2](#ex-log-template-container)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 22-2\. Simple Dockerfile for template image
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The base image *k8spatterns/gomplate* contains the template processor and an
    entry-point script that uses the following directories by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '*/in* holds the WildFly configuration templates, including the parameterized
    *standalone.xml*. These are added directly to the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/params* is used to look up the Gomplate data sources, which are YAML files.
    This directory is mounted from a ConfigMap-backed Pod volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/out* is the directory into which the processed files are stored. This directory
    is mounted in the WildFly application container and used for the configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second ingredient of our example is the ConfigMap holding the parameters.
    In [Example 22-3](#ex-log-template-parameter), we just use a simple file with
    key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Example 22-3\. Create ConfigMap with values to fill into the configuration template
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we need the Deployment resource for the WildFly server ([Example 22-4](#ex-log-template-deployment)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 22-4\. Deployment with template processor as init container
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_configuration_template_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Image holding the configuration templates that has been created from [Example 22-2](#ex-log-template-container).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_configuration_template_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are mounted from a volume `wildfly-parameters` declared in ![](assets/5.png).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_configuration_template_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The target directory for writing out processed templates. This is mounted from
    an empty volume.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_configuration_template_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The directory holding the generated full configuration files is mounted as `/config`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_configuration_template_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Volume declaration for the parameters’ ConfigMap and the empty directory used
    for sharing the processed configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'This declaration is quite a mouthful, so let’s drill down: the Deployment specification
    contains a Pod with our init container, the application container, and two internal
    Pod volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: The first volume, `wildfly-parameters`, references the ConfigMap `wildfly-cm`
    with the parameter values that we created in [Example 22-3](#ex-log-template-parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other volume is an empty directory initially and is shared between the init
    container and the WildFly container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you start this Deployment, the following will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: An init container is created, and its command is executed. This container takes
    the *config.yml* from the ConfigMap volume, fills in the templates from the */in*
    directory in an init container, and stores the processed files in the */out* directory.
    The */out* directory is where the volume `wildfly-config` is mounted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the init container is done, a WildFly server starts with an option so
    that it looks up the complete configuration from the */config* directory. Again,
    */config* is the shared volume `wildfly-config` containing the processed template
    files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to note that we do *not* have to change these Deployment resource
    descriptors when going from the development to the production environment. Only
    the ConfigMap with the template parameters is different.
  prefs: []
  type: TYPE_NORMAL
- en: With this technique, it is easy to create a DRY configuration without copying
    and maintaining duplicated large configuration files.^([1](ch22.html#idm45902088350368))
    For example, when the WildFly configuration changes for all environments, only
    a single template file in the init container needs to be updated. This approach
    has, of course, significant advantages on maintenance as there is no danger of
    configuration drift.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When working with Pods and volumes, as in this pattern, it is not obvious how
    to debug if things don’t work as expected. So if you want to examine the processed
    templates, check out the directory */var/lib/kubelet/pods/{podid}/volumes/kubernetes.io~empty-dir/*
    on the node, as it contains the content of an `emptyDir` volume. Alternatively,
    just `kubectl exec` into the Pod when it is running, and examine the mounted directory
    (*/config* in our example) for any created files.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Configuration Template* pattern builds on top of the *Configuration Resource*
    pattern and is especially suited when we need to operate applications in different
    environments with similar complex configurations. However, the setup with configuration
    templates is more complicated and has more moving parts that can go wrong. Use
    it only if your application requires huge configuration data. Such applications
    often require a considerable amount of configuration data from which only a small
    fraction is dependent on the environment. Even when copying over the whole configuration
    directly into the environment-specific ConfigMap works initially, it puts a burden
    on the maintenance of that configuration because it is doomed to diverge over
    time. For such a situation, this template approach is perfect.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running on top of Red Hat OpenShift, an enterprise Kubernetes distribution,
    you have an alternative by using [OpenShift templates](https://oreil.ly/JuYab)
    for parameterizing resource descriptors. This approach does not solve the challenge
    of large configuration sets but is still very helpful for applying the same deployment
    resources to slightly varying environments.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Configuration Template Example](https://oreil.ly/gzSdc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tiller Template Engine](https://oreil.ly/0gPNC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Gomplate](https://oreil.ly/e-5mR)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Go Template Syntax](https://oreil.ly/fHi0o)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ^([1](ch22.html#idm45902088350368-marker)) [DRY](https://oreil.ly/Xitl7) is
    an acronym for “Don’t Repeat Yourself.”
  prefs: []
  type: TYPE_NORMAL
