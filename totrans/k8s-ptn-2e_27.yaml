- en: Chapter 22\. Configuration Template
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 22 章. 配置模板
- en: The *Configuration Template* pattern enables you to create and process large
    and complex configurations during application startup. The generated configuration
    is specific to the target runtime environment as reflected by the parameters used
    in processing the configuration template.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*配置模板*模式使您能够在应用程序启动期间创建和处理大型复杂配置。生成的配置特定于目标运行时环境，这反映在处理配置模板时使用的参数中。'
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: In [Chapter 20, “Configuration Resource”](ch20.html#ConfigurationResource),
    you saw how to use the Kubernetes native resource objects ConfigMap and Secret
    to configure applications. But sometimes configuration files can get large and
    complex. Putting the configuration files directly into ConfigMaps can be problematic
    since they have to be correctly embedded in the resource definition. We need to
    be careful and avoid using special characters like quotes and breaking the Kubernetes
    resource syntax. The size of configurations is another consideration, as there
    is a limit on the sum of all values of ConfigMaps or Secrets, which is 1 MB (a
    limit imposed by the underlying backend store etcd).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 20 章，“配置资源”](ch20.html#ConfigurationResource)中，您看到如何使用 Kubernetes 的原生资源对象
    ConfigMap 和 Secret 配置应用程序。但是有时配置文件可能变得很大且复杂。直接将配置文件放入 ConfigMap 可能会出现问题，因为它们必须正确嵌入在资源定义中。我们需要小心，避免使用特殊字符如引号并破坏
    Kubernetes 资源语法。配置大小也是考虑的因素，因为 ConfigMap 或 Secret 的所有值的总和有 1 MB 的限制（这是底层后端存储 etcd
    强加的限制）。
- en: Large configuration files typically differ only slightly for the different execution
    environments. This similarity leads to a lot of duplication and redundancy in
    the ConfigMaps because each environment has mostly the same data. The *Configuration
    Template* pattern we explore in this chapter addresses these specific use-case
    concerns.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大型配置文件通常在不同的执行环境中只有细微的差异。这种相似性导致 ConfigMap 中存在大量的重复和冗余数据，因为每个环境大部分数据都是相同的。本章探讨的*配置模板*模式正是针对这些特定用例的问题。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: To reduce duplication, it makes sense to store only the *differing* configuration
    values like database connection parameters in a ConfigMap or even directly in
    environment variables. During startup of the container, these values are processed
    with configuration templates to create the full configuration file (like a WildFly
    *standalone.xml*). There are many tools like *Tiller* (Ruby) or *Gomplate* (Go)
    for processing templates during application initialization. [Figure 22-1](#img-configuration-template)
    is a configuration template example filled with data coming from environment variables
    or a mounted volume, possibly backed by a ConfigMap.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少重复，将只有*不同*的配置数值（如数据库连接参数）存储在 ConfigMap 中或直接存储在环境变量中是有意义的。在容器启动期间，使用配置模板处理这些数值，以创建完整的配置文件（例如
    WildFly 的*standalone.xml*）。在应用初始化期间，有许多工具如*Tiller*（Ruby）或*Gomplate*（Go）可用于处理模板。[图 22-1](#img-configuration-template)展示了一个配置模板示例，其中填充了来自环境变量或挂载卷的数据。
- en: Before the application is started, the fully processed configuration file is
    put into a location where it can be directly used like any other configuration
    file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序启动之前，完全处理的配置文件被放置在一个位置，可以像任何其他配置文件一样直接使用。
- en: 'There are two techniques for how such live processing can happen during runtime:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种技术可以在运行时进行实时处理：
- en: We can add the template processor as part of the `ENTRYPOINT` to a Dockerfile
    so the template processing becomes directly part of the container image. The entry
    point here is typically a script that first performs the template processing and
    then starts the application. The parameters for the template come from environment
    variables.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将模板处理器作为`Dockerfile`的一部分添加到`ENTRYPOINT`中，使模板处理直接成为容器镜像的一部分。此处的入口点通常是一个脚本，首先执行模板处理，然后启动应用程序。模板的参数来自环境变量。
- en: With Kubernetes, a better way to perform initialization is with an init container
    of a Pod in which the template processor runs and creates the configuration for
    the application containers in the Pod. The *Init Container* pattern is described
    in detail in [Chapter 15](ch15.html#InitContainer).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Kubernetes，更好的初始化方法是在 Pod 的 init 容器中运行模板处理器，并为 Pod 中的应用程序容器创建配置。*Init Container*模式在[第
    15 章](ch15.html#InitContainer)中详细描述。
- en: For Kubernetes, the init container approach is the most appealing because we
    can use ConfigMaps directly for the template parameters. This technique is illustrated
    in [Figure 22-1](#img-configuration-template).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Kubernetes，init 容器方法最具吸引力，因为我们可以直接使用 ConfigMaps 来作为模板参数。这种技术在 [*Figure 22-1*](#img-configuration-template)
    中有所说明。
- en: '![Configuration template pattern](assets/kup2_2201.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![配置模板模式](assets/kup2_2201.png)'
- en: Figure 22-1\. Configuration template
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-1\. 配置模板
- en: 'The application’s Pod definition consists of at least two containers: one init
    container for the template processing and one for the application container. The
    init container contains not only the template processor but also the configuration
    templates themselves. In addition to the containers, this Pod also defines two
    volumes: one volume for the template parameters, backed by a ConfigMap, and an
    `emptyDir` volume used to share the processed templates between the init container
    and the application container.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的 Pod 定义至少包含两个容器：一个用于模板处理的 init 容器和一个用于应用程序容器。init 容器不仅包含模板处理器，还包括配置模板本身。除了容器之外，此
    Pod 还定义了两个卷：一个卷用于模板参数，由 ConfigMap 支持，以及一个 `emptyDir` 卷用于在 init 容器和应用程序容器之间共享处理后的模板。
- en: 'With this setup, the following steps are performed during startup of this Pod:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此设置，在此 Pod 启动期间执行以下步骤：
- en: The init container is started, and it runs the template processor. The processor
    takes the templates from its image, and the template parameters from the mounted
    ConfigMap volume, and stores the result in the `emptyDir` volume.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 init 容器，并运行模板处理器。处理器从其镜像获取模板，并从挂载的 ConfigMap 卷获取模板参数，并将结果存储在 `emptyDir` 卷中。
- en: After the init container has finished, the application container starts up and
    loads the configuration files from the `emptyDir` volume.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: init 容器完成后，应用程序容器启动并从 `emptyDir` 卷加载配置文件。
- en: 'The following example uses an init container for managing a full set of WildFly
    configuration files for two environments: a development environment and a production
    environment. Both are very similar to each other and differ only slightly. In
    fact, in our example, they differ only in the way logging is performed: each log
    line is prefixed with `DEVELOPMENT:` or `PRODUCTION:`, respectively.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例使用一个 init 容器来管理两个环境的完整的 WildFly 配置文件集：开发环境和生产环境。它们非常相似，只有细微的差别。事实上，在我们的示例中，它们仅在日志记录方式上有所不同：每个日志行分别以
    `DEVELOPMENT:` 或 `PRODUCTION:` 开头。
- en: You can find the full example along with complete installation instructions
    in the book’s example [GitHub repo](https://oreil.ly/gzSdc). (We show only the
    main concept here; for the technical details, refer to the source repo.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书籍的示例 [GitHub 仓库](https://oreil.ly/gzSdc) 中找到完整示例以及完整的安装说明。（我们仅在此处展示主要概念；有关技术细节，请参阅源代码库。）
- en: The log pattern in [Example 22-1](#ex-log-config-template) is stored in *standalone.xml*,
    which we parameterize by using the Go template syntax.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Example 22-1*](#ex-log-config-template) 中的日志模式存储在 *standalone.xml* 中，我们通过使用
    Go 模板语法进行参数化。'
- en: Example 22-1\. Log configuration template
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-1\. 日志配置模板
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we use [Gomplate](https://gomplate.ca) as a template processor, which uses
    the notion of a *data source* for referencing the template parameters to be filled
    in. In our case, this data source comes from a ConfigMap-backed volume mounted
    to an init container. Here, the ConfigMap contains a single entry with the key
    `logFormat`, from where the actual format is extracted.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用 [Gomplate](https://gomplate.ca) 作为模板处理器，它使用 *data source* 的概念来引用要填充的模板参数。在我们的情况下，这个数据源来自挂载到
    init 容器的 ConfigMap 支持的卷。在这里，ConfigMap 包含一个键为 `logFormat` 的条目，从中提取实际的格式。
- en: With this template in place, we can now create the Docker image for the init
    container. The Dockerfile for the image *k8spatterns/example-configuration-template-init*
    is very simple ([Example 22-2](#ex-log-template-container)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个模板，我们现在可以为 init 容器创建 Docker 镜像。这个镜像的 Dockerfile 非常简单（[*Example 22-2*](#ex-log-template-container)）。
- en: Example 22-2\. Simple Dockerfile for template image
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-2\. 用于模板镜像的简单 Dockerfile
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The base image *k8spatterns/gomplate* contains the template processor and an
    entry-point script that uses the following directories by default:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基础镜像 *k8spatterns/gomplate* 包含模板处理器和一个入口脚本，默认使用以下目录：
- en: '*/in* holds the WildFly configuration templates, including the parameterized
    *standalone.xml*. These are added directly to the image.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/in* 包含 WildFly 配置模板，包括参数化的 *standalone.xml*。这些直接添加到镜像中。'
- en: '*/params* is used to look up the Gomplate data sources, which are YAML files.
    This directory is mounted from a ConfigMap-backed Pod volume.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/params* 用于查找 Gomplate 数据源，这些是 YAML 文件。此目录从支持 ConfigMap 的 Pod 卷挂载。'
- en: '*/out* is the directory into which the processed files are stored. This directory
    is mounted in the WildFly application container and used for the configuration.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/out* 是存储处理后文件的目录。此目录挂载在 WildFly 应用容器中，用于配置。'
- en: The second ingredient of our example is the ConfigMap holding the parameters.
    In [Example 22-3](#ex-log-template-parameter), we just use a simple file with
    key-value pairs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例的第二个成分是包含参数的 ConfigMap。在[示例 22-3](#ex-log-template-parameter)中，我们只使用一个简单的键-值对文件。
- en: Example 22-3\. Create ConfigMap with values to fill into the configuration template
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-3\. 创建 ConfigMap，其中包含要填入配置模板的值
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, we need the Deployment resource for the WildFly server ([Example 22-4](#ex-log-template-deployment)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要 WildFly 服务器的 Deployment 资源（[示例 22-4](#ex-log-template-deployment)）。
- en: Example 22-4\. Deployment with template processor as init container
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-4\. 带有模板处理器作为 init 容器的 Deployment
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_configuration_template_CO1-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_configuration_template_CO1-1)'
- en: Image holding the configuration templates that has been created from [Example 22-2](#ex-log-template-container).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 包含已从[示例 22-2](#ex-log-template-container)创建的配置模板的镜像。
- en: '[![2](assets/2.png)](#co_configuration_template_CO1-2)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_configuration_template_CO1-2)'
- en: Parameters are mounted from a volume `wildfly-parameters` declared in ![](assets/5.png).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 参数从声明在 ![](assets/5.png) 中的 `wildfly-parameters` 卷挂载。
- en: '[![3](assets/3.png)](#co_configuration_template_CO1-3)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_configuration_template_CO1-3)'
- en: The target directory for writing out processed templates. This is mounted from
    an empty volume.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 写出处理后模板的目标目录。这是从一个空卷挂载的。
- en: '[![4](assets/4.png)](#co_configuration_template_CO1-4)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_configuration_template_CO1-4)'
- en: The directory holding the generated full configuration files is mounted as `/config`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 挂载生成的完整配置文件的目录为 `/config`。
- en: '[![5](assets/5.png)](#co_configuration_template_CO1-5)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_configuration_template_CO1-5)'
- en: Volume declaration for the parameters’ ConfigMap and the empty directory used
    for sharing the processed configuration.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的 ConfigMap 和用于共享处理后配置的空目录的卷声明。
- en: 'This declaration is quite a mouthful, so let’s drill down: the Deployment specification
    contains a Pod with our init container, the application container, and two internal
    Pod volumes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个声明有点复杂，因此让我们详细看看：Deployment 规范包含一个 Pod，其中包含我们的 init 容器、应用容器和两个内部 Pod 卷：
- en: The first volume, `wildfly-parameters`, references the ConfigMap `wildfly-cm`
    with the parameter values that we created in [Example 22-3](#ex-log-template-parameter).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个卷 `wildfly-parameters` 引用了参数值的 ConfigMap `wildfly-cm`，我们在[示例 22-3](#ex-log-template-parameter)中创建的。
- en: The other volume is an empty directory initially and is shared between the init
    container and the WildFly container.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个卷最初是空目录，并在 init 容器和 WildFly 容器之间共享。
- en: 'If you start this Deployment, the following will happen:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启动此 Deployment，将发生以下情况：
- en: An init container is created, and its command is executed. This container takes
    the *config.yml* from the ConfigMap volume, fills in the templates from the */in*
    directory in an init container, and stores the processed files in the */out* directory.
    The */out* directory is where the volume `wildfly-config` is mounted.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 init 容器，并执行其命令。此容器从 ConfigMap 卷中获取 *config.yml*，从 */in* 目录填充模板，并将处理后的文件存储在
    */out* 目录中。*/out* 目录是挂载 `wildfly-config` 的位置。
- en: After the init container is done, a WildFly server starts with an option so
    that it looks up the complete configuration from the */config* directory. Again,
    */config* is the shared volume `wildfly-config` containing the processed template
    files.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 init 容器完成后，WildFly 服务器启动，并选择从 */config* 目录查找完整配置。同样，*/config* 是共享卷 `wildfly-config`，包含处理后的模板文件。
- en: It is important to note that we do *not* have to change these Deployment resource
    descriptors when going from the development to the production environment. Only
    the ConfigMap with the template parameters is different.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，当从开发环境转到生产环境时，我们*不*必更改这些 Deployment 资源描述符。唯一不同的是模板参数的 ConfigMap。
- en: With this technique, it is easy to create a DRY configuration without copying
    and maintaining duplicated large configuration files.^([1](ch22.html#idm45902088350368))
    For example, when the WildFly configuration changes for all environments, only
    a single template file in the init container needs to be updated. This approach
    has, of course, significant advantages on maintenance as there is no danger of
    configuration drift.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术，可以轻松创建无重复的配置，而无需复制和维护重复的大型配置文件。^([1](ch22.html#idm45902088350368)) 例如，当所有环境的
    WildFly 配置发生更改时，只需更新初始化容器中的单个模板文件。当然，这种方法在维护上具有显著优势，因为不存在配置漂移的风险。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: When working with Pods and volumes, as in this pattern, it is not obvious how
    to debug if things don’t work as expected. So if you want to examine the processed
    templates, check out the directory */var/lib/kubelet/pods/{podid}/volumes/kubernetes.io~empty-dir/*
    on the node, as it contains the content of an `emptyDir` volume. Alternatively,
    just `kubectl exec` into the Pod when it is running, and examine the mounted directory
    (*/config* in our example) for any created files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理像这样的模式中，例如与 Pods 和卷一起工作时，如果事情不按预期工作，如何调试并不明显。因此，如果您想要检查处理过的模板，请查看节点上的目录 */var/lib/kubelet/pods/{podid}/volumes/kubernetes.io~empty-dir/*，因为它包含了一个
    `emptyDir` 卷的内容。或者，当 Pod 运行时，只需 `kubectl exec` 进入 Pod，并检查挂载的目录（在我们的示例中为 */config*）是否创建了任何文件。
- en: Discussion
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: The *Configuration Template* pattern builds on top of the *Configuration Resource*
    pattern and is especially suited when we need to operate applications in different
    environments with similar complex configurations. However, the setup with configuration
    templates is more complicated and has more moving parts that can go wrong. Use
    it only if your application requires huge configuration data. Such applications
    often require a considerable amount of configuration data from which only a small
    fraction is dependent on the environment. Even when copying over the whole configuration
    directly into the environment-specific ConfigMap works initially, it puts a burden
    on the maintenance of that configuration because it is doomed to diverge over
    time. For such a situation, this template approach is perfect.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*配置模板*模式建立在*配置资源*模式之上，特别适用于需要在不同环境中操作具有类似复杂配置的应用程序。然而，配置模板的设置更为复杂，包含更多可能出错的部分。只有当您的应用程序需要大量配置数据时才使用它。这类应用程序通常需要大量配置数据，其中只有很小一部分依赖于环境。即使最初直接复制整个配置到特定环境的
    ConfigMap 中可以工作，但这会增加配置维护的负担，因为随着时间的推移，配置注定会发生分歧。对于这种情况，这种模板方法是完美的。'
- en: If you are running on top of Red Hat OpenShift, an enterprise Kubernetes distribution,
    you have an alternative by using [OpenShift templates](https://oreil.ly/JuYab)
    for parameterizing resource descriptors. This approach does not solve the challenge
    of large configuration sets but is still very helpful for applying the same deployment
    resources to slightly varying environments.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Red Hat OpenShift 上运行，这是一个企业级 Kubernetes 发行版，您可以使用[OpenShift 模板](https://oreil.ly/JuYab)来参数化资源描述符。这种方法虽然不能解决大型配置集的挑战，但对于将相同的部署资源应用于稍有不同的环境仍然非常有帮助。
- en: More Information
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Configuration Template Example](https://oreil.ly/gzSdc)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配置模板示例](https://oreil.ly/gzSdc)'
- en: '[Tiller Template Engine](https://oreil.ly/0gPNC)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tiller 模板引擎](https://oreil.ly/0gPNC)'
- en: '[Gomplate](https://oreil.ly/e-5mR)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Gomplate](https://oreil.ly/e-5mR)'
- en: '[Go Template Syntax](https://oreil.ly/fHi0o)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Go Template 语法](https://oreil.ly/fHi0o)'
- en: ^([1](ch22.html#idm45902088350368-marker)) [DRY](https://oreil.ly/Xitl7) is
    an acronym for “Don’t Repeat Yourself.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch22.html#idm45902088350368-marker)) [DRY](https://oreil.ly/Xitl7) 是 “Don’t
    Repeat Yourself” 的首字母缩略词。
