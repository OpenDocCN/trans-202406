- en: Chapter 1\. From JavaScript to TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript today
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Supports browsers decades past
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Beauty of the web
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Before talking about TypeScript, we need to first understand where it came
    from: JavaScript!'
  prefs: []
  type: TYPE_NORMAL
- en: History of JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript was designed in 10 days by Brendan Eich at Netscape in 1995 to be
    approachable and easy to use for websites. Developers have been poking fun at
    its quirks and perceived shortcomings ever since. I’ll cover some of them in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has evolved tremendously since 1995, though! Its steering committee,
    TC39, has released new versions of ECMAScript—the language specification that
    JavaScript is based on—yearly since 2015 with new features that bring it in line
    with other modern languages. Impressively, even with regular new language versions,
    JavaScript has managed to maintain backward compatibility for decades in varying
    environments, including browsers, embedded applications, and server runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: Today, JavaScript is a wonderfully flexible language with a lot of strengths.
    One should appreciate that while JavaScript has its quirks, it’s also helped enable
    the incredible growth of web applications and the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Show me the perfect programming language and I’ll show you a language with no
    users.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anders Hejlsberg, TSConf 2019
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Vanilla JavaScript’s Pitfalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers often refer to using JavaScript without any significant language
    extensions or frameworks as “vanilla”: referring to it being the familiar, original
    flavor. I’ll soon go over why TypeScript adds just the right flavor to overcome
    these particular major pitfalls, but it’s useful to understand just why they can
    be painful. All these weaknesses become more pronounced the larger and longer-lived
    a project gets.'
  prefs: []
  type: TYPE_NORMAL
- en: Costly Freedom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many developers’ biggest gripe with JavaScript is unfortunately one of its
    key features: JavaScript provides virtually no restrictions in how you structure
    your code. That freedom makes it a ton of fun to start a project in JavaScript!'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you get to have more and more files, though, it becomes apparent how that
    freedom can be damaging. Take the following snippet, presented out of context
    from some fictional painting application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Reading that code without any context, you can only have vague ideas on how
    to call the `paintPainting` function. Perhaps if you’ve worked in the surrounding
    codebase you may recall that `painter` should be what’s returned by some `getPainter`
    function. You might even make a lucky guess that `painting` is a string.
  prefs: []
  type: TYPE_NORMAL
- en: Even if those assumptions are correct, though, later changes to the code may
    invalidate them. Perhaps `painting` is changed from a string to some other data
    type, or maybe one or more of the painter’s methods are renamed.
  prefs: []
  type: TYPE_NORMAL
- en: Other languages might refuse to let you run code if their compiler determines
    it would likely crash. Not so with dynamically typed languages—those that run
    code without checking if it will likely crash first—such as JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The freedom of code that makes JavaScript so fun becomes a real pain when you
    want safety in running your code.
  prefs: []
  type: TYPE_NORMAL
- en: Loose Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nothing exists in the JavaScript language specification to formalize describing
    what function parameters, function returns, variables, or other constructs in
    code are meant to be. Many developers have adopted a standard called JSDoc to
    describe functions and variables using block comments. The JSDoc standard describes
    how you might write documentation comments placed directly above constructs such
    as functions and variables, formatted in a standard way. Here’s an example, again
    taken out of context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'JSDoc has key issues that often make it unpleasant to use in a large codebase:'
  prefs: []
  type: TYPE_NORMAL
- en: Nothing stops JSDoc descriptions from being wrong about code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if your JSDoc descriptions were previously correct, during code refactors
    it can be difficult to find all the now-invalid JSDoc comments related to your
    changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing complex objects is unwieldy and verbose, requiring multiple standalone
    comments to define types and their relationships.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining JSDoc comments across a dozen files doesn’t take up too much time,
    but across hundreds or even thousands of constantly updating files can be a real
    chore.
  prefs: []
  type: TYPE_NORMAL
- en: Weaker Developer Tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because JavaScript doesn’t provide built-in ways to identify types, and code
    easily diverges from JSDoc comments, it can be difficult to automate large changes
    to or gain insights about a codebase. JavaScript developers are often surprised
    to see features in typed languages such as C# and Java that allow developers to
    perform class member renamings or jump to the place an argument’s type was declared.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You may protest that modern IDEs such as VS Code do provide some development
    tools such as automated refactors to JavaScript. True, but: they use TypeScript
    or an equivalent under the hood for many of their JavaScript features, and those
    development tools are not as reliable or as powerful in most JavaScript code as
    they are in well-defined TypeScript code.'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript was created internally at Microsoft in the early 2010s then released
    and open sourced in 2012. The head of its development is Anders Hejlsberg, notable
    for also having lead the development of the popular C# and Turbo Pascal languages.
    TypeScript is often described as a “superset of JavaScript” or “JavaScript with
    types.” But what *is* TypeScript?
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript is four things:'
  prefs: []
  type: TYPE_NORMAL
- en: Programming language
  prefs: []
  type: TYPE_NORMAL
- en: A language that includes all the existing JavaScript syntax, plus new TypeScript-specific
    syntax for defining and using types
  prefs: []
  type: TYPE_NORMAL
- en: Type checker
  prefs: []
  type: TYPE_NORMAL
- en: A program that takes in a set of files written in JavaScript and/or TypeScript,
    develops an understanding of all the constructs (variables, functions…) created,
    and lets you know if it thinks anything is set up incorrectly
  prefs: []
  type: TYPE_NORMAL
- en: Compiler
  prefs: []
  type: TYPE_NORMAL
- en: A program that runs the type checker, reports any issues, then outputs the equivalent
    JavaScript code
  prefs: []
  type: TYPE_NORMAL
- en: Language service
  prefs: []
  type: TYPE_NORMAL
- en: A program that uses the type checker to tell editors such as VS Code how to
    provide helpful utilities to developers
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started in the TypeScript Playground
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve read a good amount about TypeScript by now. Let’s get you writing it!
  prefs: []
  type: TYPE_NORMAL
- en: The main TypeScript website includes a “Playground” editor at [*https://www.typescriptlang.org/play*](https://www.typescriptlang.org/play).
    You can type code into the main editor and see many of the same editor suggestions
    you would see when working with TypeScript locally in a full IDE (Integrated Development
    Environment).
  prefs: []
  type: TYPE_NORMAL
- en: Most of the snippets in this book are intentionally small and self-contained
    enough that you could type them out in the Playground and tinker with them for
    fun.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Take a look at this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code is written in normal JavaScript syntax—I haven’t introduced TypeScript-specific
    syntax yet. If you were to run the TypeScript type checker on this code, it would
    use its knowledge that the `length` property of a string is a number—not a function—to
    give you the complaint shown in the comment.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to paste that code into the playground or an editor, it would be
    told by the language service to give you a little red squiggly under `length`
    indicating TypeScript’s displeasure with your code. Hovering over the squigglied
    code would give you the text of the complaint ([Figure 1-1](#string_length_not_callable)).
  prefs: []
  type: TYPE_NORMAL
- en: '![TypeScript reporting the ''length'' property of a firstName string is not
    callable.](Images/lets_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. TypeScript reporting an error on string length not being callable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Being told of these simple errors in your editor as you type them is a lot more
    pleasant than waiting until a particular line of code happens to be run and throw
    an error. If you tried to run that code in JavaScript, it would crash!
  prefs: []
  type: TYPE_NORMAL
- en: Freedom Through Restriction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript allows us to specify what types of values may be provided for parameters
    and variables. Some developers find having to explicitly write out in your code
    how particular areas are supposed to work to be restrictive at first.
  prefs: []
  type: TYPE_NORMAL
- en: But! I would argue that being “restricted” in this way is actually a good thing!
    By restricting our code to only being able to be used in the ways you specify,
    TypeScript can give you confidence that changes in one area of code won’t break
    other areas of code that use it.
  prefs: []
  type: TYPE_NORMAL
- en: If, say, you change the number of required parameters for a function, TypeScript
    will let you know if you forget to update a place that calls the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, `sayMyName` was changed from taking in two parameters
    to taking one parameter, but the call to it with two strings wasn’t updated and
    so is triggering a TypeScript complaint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That code would run without crashing in JavaScript, but its output would be
    different from expected (it wouldn’t include `"Knowles"`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Calling functions with the wrong number of arguments is exactly the sort of
    short-sighted JavaScript freedom that TypeScript restricts.
  prefs: []
  type: TYPE_NORMAL
- en: Precise Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at a TypeScript-ified version of the `paintPainting` function from
    earlier. Although I haven’t yet gone over the specifics of TypeScript syntax for
    documenting types, the following snippet still hints at the great precision with
    which TypeScript can document code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A TypeScript developer reading this code for the first time could understand
    that `painter` has at least three properties, two of which are methods. By baking
    in syntax to describe the “shapes” of objects, TypeScript provides an excellent,
    enforced system for describing how objects look.
  prefs: []
  type: TYPE_NORMAL
- en: Stronger Developer Tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript’s typings allow editors such as VS Code to gain much deeper insights
    into your code. They can then use those insights to surface intelligent suggestions
    as you type. These suggestions can be incredibly useful for development.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve used VS Code to write JavaScript before, you might have noticed that
    it suggests “autocompletions” as you write code with built-in types of objects
    like strings. If, say, you start typing the member of something known to be a
    string, TypeScript can suggest all the members of the strings ([Figure 1-2](#javascript_autocomplete)).
  prefs: []
  type: TYPE_NORMAL
- en: '![TypeScript suggesting a dropdown of properties starting with ''se'' as members
    of a string.](Images/lets_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. TypeScript providing autocompletion suggestions in JavaScript for
    a string
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When you add TypeScript’s type checker for understanding code, it can give you
    these useful suggestions even for code you’ve written. Upon typing `painter.`
    in the `paintPainting` function, TypeScript would take its knowledge that the
    `painter` parameter is of type `Painter` and the `Painter` type has the following
    members ([Figure 1-3](#typescript_painter_dropdown)).
  prefs: []
  type: TYPE_NORMAL
- en: '![TypeScript suggesting a dropdown of properties starting with ''se'' as members
    of a string.](Images/lets_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. TypeScript providing autocompletion suggestions in JavaScript for
    a string
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Snazzy! I’ll cover a plethora of other useful editor features in [Chapter 12,
    “Using IDE Features”](ch12.xhtml#using_ide_features).
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript’s compiler allows us to input TypeScript syntax, have it type checked,
    and get the equivalent JavaScript emitted. As a convenience, the compiler may
    also take modern JavaScript syntax and compile it down into its older ECMAScript
    equivalents.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were to paste this TypeScript code into the Playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Playground would show you on the right-hand side of the screen that this
    would be the equivalent JavaScript output by the compiler ([Figure 1-4](#playground_artist_compile)).
  prefs: []
  type: TYPE_NORMAL
- en: '![TypeScript Playground compiling TypeScript code into equivalent JavaScript.](Images/lets_0104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. TypeScript Playground compiling TypeScript code into equivalent
    JavaScript
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The TypeScript Playground is a great tool for showing how source TypeScript
    becomes output JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many JavaScript projects use dedicated transpilers such as Babel ([*https://babeljs.io*](https://babeljs.io))
    instead of TypeScript’s own to transpile source code into runnable JavaScript.
    You can find a list of common project starters on [*https://learningtypescript.com/starters*](https://learningtypescript.com/starters).
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started Locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can run TypeScript on your computer as long as you have Node.js installed.
    To install the latest version of TypeScript globally, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you’ll be able to run TypeScript on the command line with the `tsc` (**T**ype**S**cript
    **C**ompiler) command. Try it with the `--version` flag to make sure it’s set
    up properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It should print out something like `Version X.Y.Z`—whichever version is current
    as of you installing TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Running Locally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that TypeScript is installed, let’s have you set up a folder locally to
    run TypeScript on code. Create a folder somewhere on your computer and run this
    command to create a new *tsconfig.json* configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A *tsconfig.json* file declares the settings that TypeScript uses when analyzing
    your code. Most of the options in that file aren’t going to be relevant to you
    in this book (there are a lot of uncommon edge cases in programming that the language
    needs to account for!). I’ll cover them in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options).
    The important feature is that now you can run `tsc` to tell TypeScript to compile
    all the files in that folder and TypeScript will refer to that *tsconfig.json*
    for any configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try adding a file named *index.ts* with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run `tsc` and provide it the name of that *index.ts* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an error that looks roughly like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Indeed, `blub` does not exist on the `console`. What was I thinking?
  prefs: []
  type: TYPE_NORMAL
- en: Before you fix the code to appease TypeScript, note that `tsc` created an *index.js*
    for you with contents including the `console.blub`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This is an important concept: even though there was a *type error* in our code,
    the *syntax* was still completely valid. The TypeScript compiler will still produce
    JavaScript from an input file regardless of any type errors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct the code in *index.ts* to call `console.log` and run `tsc` again. There
    should be no complaints in your terminal, and the *index.js* file should now contain
    updated output code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I highly recommend playing with the book’s snippets as you read through them,
    either in the playground or in an editor with TypeScript support, meaning it runs
    the TypeScript language service for you. Small self-contained exercises, as well
    as larger projects, are also available to help you practice what you’ve learned
    on [*https://learningtypescript.com*](https://learningtypescript.com).
  prefs: []
  type: TYPE_NORMAL
- en: Editor Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another benefit of creating a *tsconfig.json* file is that when editors are
    opened to a particular folder, they will now recognize that folder as a TypeScript
    project. For example, if you open VS Code in a folder, the settings it uses to
    analyze your TypeScript code will respect whatever’s in that folder’s *tsconfig.json*.
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, go back through the code snippets in this chapter and type them
    in your editor. You should see drop-downs suggesting completions for names as
    you type them, especially for members such as the `log` on `console`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Very exciting: you’re using the TypeScript language service to help yourself
    write code! You’re on your way to being a TypeScript developer!'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: VS Code comes with great TypeScript support and is itself built in TypeScript.
    You don’t *have* to use it for TypeScript—virtually all modern editors have excellent
    TypeScript support either built-in or available via plugins—but I do recommend
    it for at least trying out TypeScript while reading through this book. If you
    do use a different editor, I also recommend enabling its TypeScript support. I’ll
    cover editor features more deeply in [Chapter 12, “Using IDE Features”](ch12.xhtml#using_ide_features).
  prefs: []
  type: TYPE_NORMAL
- en: What TypeScript Is Not
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve seen how wonderful TypeScript is, I have to warn you about some
    limitations. Every tool excels at some areas and has limitations in others.
  prefs: []
  type: TYPE_NORMAL
- en: A Remedy for Bad Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript helps you structure your JavaScript, but other than enforcing type
    safety, it doesn’t enforce any opinions on what that structure should look like.
  prefs: []
  type: TYPE_NORMAL
- en: Good!
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is a language that everyone is meant to be able to use, not an opinionated
    framework with a target audience. You can write code using whatever architectural
    patterns you’re used to from JavaScript, and TypeScript will support them.
  prefs: []
  type: TYPE_NORMAL
- en: If anybody tries to tell you that TypeScript forces you to use classes, or makes
    it hard to write good code, or whatever code style complaints are out there, give
    them a stern look and tell them to pick up a copy of *Learning TypeScript*. TypeScript
    does not enforce code style opinions such as whether to use classes or functions,
    nor is it associated with any particular application framework—Angular, React,
    etc.—over others.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions to JavaScript (Mostly)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TypeScript’s design goals explicitly state that it should:'
  prefs: []
  type: TYPE_NORMAL
- en: Align with current and future ECMAScript proposals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preserve runtime behavior of all JavaScript code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript does not try to change how JavaScript works at all. Its creators
    have tried very hard to avoid adding new code features that would add to or conflict
    with JavaScript. Such a task is the domain of TC39, the technical committee that
    works on ECMAScript itself.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few older features in TypeScript that were added many years ago
    to reflect common use cases in JavaScript code. Most of those features are either
    relatively uncommon or have fallen out of favor, and are only covered briefly
    in [Chapter 14, “Syntax Extensions”](ch14.xhtml#syntax_extensions). I recommend
    staying away from them in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of 2022, TC39 is investigating adding a syntax for type annotations to JavaScript.
    The latest proposals have them acting as a form of comments that do not impact
    code at runtime and are used only for development-time systems such as TypeScript.
    It will be many years until type comments or some equivalent are added to JavaScript,
    so they won’t be mentioned elsewhere in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Slower Than JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes on the internet, you might hear some opinionated developers complain
    that TypeScript is slower than JavaScript at runtime. That claim is generally
    inaccurate and misleading. The only changes TypeScript makes to code are if you
    ask it to compile your code down to earlier versions of JavaScript to support
    older runtime environments such as Internet Explorer 11. Many production frameworks
    don’t use TypeScript’s compiler at all, instead using a separate tool for transpilation
    (the part of compiling that converts source code from one programming language
    into another) and TypeScript only for type checking.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript does, however, add some time to building your code. TypeScript code
    must be compiled down to JavaScript before most environments, such as browsers
    and Node.js, will run it. Most build pipelines are generally set up so that the
    performance hit is negligible, and slower TypeScript features such as analyzing
    code for likely mistakes are done separately from generating runnable application
    code files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Even projects that seemingly allow running TypeScript code directly, such as
    ts-node and Deno, themselves internally convert TypeScript code to JavaScript
    before running it.
  prefs: []
  type: TYPE_NORMAL
- en: Finished Evolving
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The web is nowhere near finished evolving, and thus neither is TypeScript. The
    TypeScript language is constantly receiving bug fixes and feature additions to
    match the ever-shifting needs of the web community. The basic tenets of TypeScript
    you’ll learn in this book will remain about the same, but error messages, fancier
    features, and editor integrations will improve over time.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, while this edition of the book was published with TypeScript version
    4.7.2 as the latest, by the time you started reading it, we can be certain a newer
    version has been released. Some of the TypeScript error messages in this book
    might even already be out of date!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you read up on the context for some of JavaScript’s main weaknesses,
    where TypeScript comes into play, and how to get started with TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript’s pitfalls: costly freedom, loose documentation, and weaker developer
    tooling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What TypeScript is: a programming language, a type checker, a compiler, and
    a language service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TypeScript’s advantages: freedom through restriction, precise documentation,
    and stronger developer tooling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started writing TypeScript code on the TypeScript Playground and locally
    on your computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What TypeScript is not: a remedy for bad code, extensions to JavaScript (mostly),
    slower than JavaScript, or finished evolving'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/from-javascript-to-typescript*](https://learningtypescript.com/from-javascript-to-typescript).
  prefs: []
  type: TYPE_NORMAL
- en: What happens if you spot errors running the TypeScript compiler?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You’d better go `catch` them!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
