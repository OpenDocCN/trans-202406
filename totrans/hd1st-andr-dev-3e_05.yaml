- en: 'Chapter 3\. Layouts: *Being a layout*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0081-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**We’ve only scratched the surface of using layouts**.'
  prefs: []
  type: TYPE_NORMAL
- en: So far, you’ve seen how to arrange views in a simple linear layout, but there’s
    so much more that layouts can do. In this chapter we’ll **go a little deeper**
    and show you how layouts really work. You’ll learn **how to fine-tune your linear
    layouts**. You’ll discover how to use **frame layouts** and **scroll views**.
    And by the end of the chapter, you’ll learn that even though they might look a
    little different, all layouts—and the views you add to them—have **more in common
    than you might think**.
  prefs: []
  type: TYPE_NORMAL
- en: It all starts with a layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, layout files are written in XML, and they let you define
    what your app looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each time you write a layout, you need to do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Specify the type of layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You tell Android how you want any views (such as buttons and text views) to
    be arranged by specifying a type of layout. A linear layout, for example, arranges
    views in a linear column or row, one after another.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Specify the views.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each layout contains one or more views, which your app uses to display information
    or interact with the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Tell an activity to use the layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You tell Android which activity uses the layout you’ve just defined by adding
    Kotlin code like this to the activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![image](Images/f0082-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Android has different types of layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android has different types of layout, and each one has its own policy about
    how its views are arranged. A linear layout, for example, will always lay views
    out in a linear row or column, while a frame layout stacks its views, one on top
    of another. Which type of layout you use depends on how you want views to be arranged
    on the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0083-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Use the best layout for your screen design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the apps you’ve seen so far have used linear layouts to arrange views in
    a single column. In this chapter, we’re going to take a deeper look at linear
    layouts, and introduce you to two other types: a frame layout and a scroll view.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with linear layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a linear layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0084-01.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to use a linear layout to build the layout shown below. A linear
    layout is a good choice here, because the views are arranged in a single column.
    As you already know, a linear layout arranges views one after another in a vertical
    column or a horizontal row.
  prefs: []
  type: TYPE_NORMAL
- en: 'The layout is composed of two editable text views (text views that allow you
    to enter text) and a button. Here’s what we want the layout to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0084-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use a new Android Studio project for the linear layout app.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project using the same steps you used in the previous chapters.
    Choose the Empty Activity option, enter a name of “Linear Layout Example” and
    a package name of “com.hfad.linearlayoutexample”, and accept the default save
    location. Make sure the language is set to Kotlin and the minimum SDK is API 21
    so that it will run on most Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: How to define a linear layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you already know, you define a linear layout using a `<LinearLayout>` element.
    The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0085-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The `<LinearLayout>` element contains various different attributes that it needs
    to specify its appearance and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The first is `**xmlns:android**`. This defines a namespace named `android`,
    and it needs to be set to `"[http://schemas.android.com/apk/res/android](http://schemas.android.com/apk/res/android)"`
    as above. Defining this namespace gives your layout access to the elements and
    attributes that your layout needs, and you need to define it in every layout file
    you create.
  prefs: []
  type: TYPE_NORMAL
- en: The next two attributes are `**android:layout_width**` and `**android:layout_height**`,
    and these specify how wide and high you want the layout to be. These attributes
    are mandatory for *all* types of layout and view.
  prefs: []
  type: TYPE_NORMAL
- en: You can set `android:layout_width` and `android:layout_height` to `"wrap_content"`,
    `"match_parent",` or a specific size such as 8dp—that’s 8 density-independent
    pixels. `"wrap_content"` means that you want the layout to be just big enough
    to hold all of the views inside it, and `"match_parent"` means that you want the
    layout to be as big as its parent—in this case, as big as the device screen minus
    any padding (there’s more about padding a few pages ahead). You will usually set
    the layout width and height to `"match_parent"`.
  prefs: []
  type: TYPE_NORMAL
- en: The next attribute sets the linear layout’s orientation. We’ll look at options
    for this attribute next.
  prefs: []
  type: TYPE_NORMAL
- en: Orientation can be vertical or horizontal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You specify the direction in which you wish to arrange views using the `**android:orientation**`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'You arrange views vertically in a single column using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'and you arrange views horizontally in a single row with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the orientation is horizontal, the order in which the views are arranged
    depends on the device language settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the device language is set to one that is read from left to right, such
    as English, the views are displayed in a horizontal row from left to right like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0086-02.png)![image](Images/f0086-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the language on the device is set to one that’s read from right to left
    instead, like Arabic, you can choose to display the views from right to left,
    so that the first view appears against the rightmost edge of the layout. You enable
    this feature by including a property named `**supportsRtl**` in a file named *AndroidManifest.xml*
    file, and setting it to `"true"`:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: supportsRtl means “supports right to left”.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0086-05.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we look at what other attributes you can use with linear layouts, let’s
    take a quick detour to find out more about *AndroidManifest.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: Use padding to add space to the layout’s edges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you’ve specified the type of layout you want to use, you can optionally
    use one or more **padding** attributes to add some extra space between each of
    the layout’s edges and its contents. The following code, for example, uses the
    `android:padding` attribute to add 16dp to each edge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0088-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to add different amounts of padding to different edges, you can
    specify the edges individually. The following code, for example, adds padding
    of 32dp to the top of the layout, and 16dp to the other edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0088-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The `android:paddingStart` attribute adds padding to the start edge of the layout.
    For left-to-right languages (such as English), the start edge is on the left,
    while if the device language is set to one that’s read from right to left—and
    the app supports right-to-left languages—the start edge is on the right.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:paddingEnd` attribute adds padding to the end edge of the layout.
    This is on the right for left-to-right languages, and on the left for right-to-left
    languages (where the app supports this feature).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to apply the same amount of padding to the horizontal or vertical
    edges, you can also use `android:paddingHorizontal` and `android:paddingVertical`.
    These attributes add padding to the horizontal and vertical edges of the layout,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0088-05.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve learned how to add padding to a linear layout, let’s add some
    to the layout we’re building.
  prefs: []
  type: TYPE_NORMAL
- en: The layout code so far
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the app, we’re going to use a linear layout with a vertical orientation,
    and add padding of 16dp to each edge so that there’s a bit of space between the
    layout’s edges and its contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *activity_main.xml*, and replace its code so that it matches the code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0089-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve now defined an empty linear layout; let’s go ahead and add some views
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Padding puts extra space between the layout’s edges and its contents.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**You can also use padding with views. This adds extra space between the view’s
    edges and its contents**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An edit text lets you enter text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The linear layout needs to display a button and two editable text views (which
    are used to enter text). You already know how to use buttons, so before we update
    the layout, let’s find out how to include an editable text view.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0090-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An editable text view is a type of text view that lets you input text. You
    add one to your layout using an `**<EditText>**` element, and the code looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0090-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code creates an editable text view that’s as wide as its parent, and
    just high enough to hold its contents.
  prefs: []
  type: TYPE_NORMAL
- en: The `**android:hint**` attribute is used to define hint text. This is displayed
    when the editable text view is empty, and it gives users a hint as to what sort
    of text they should enter. In the above example, we’ve hardcoded the hint text,
    but in the real world you’d want to include this as a `String` resource instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `android:inputType` attribute specifies what type of data you expect the
    user to enter so that Android can provide the correct keyboard type. In the above
    example, we’re using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'which lets user enter a single line of text. Here are some more useful input
    types you might want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Value** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| **text** | Lets the user enter a single line of text. |'
  prefs: []
  type: TYPE_TB
- en: '| **textMultiLine** | Lets the user enter multiple lines of text. |'
  prefs: []
  type: TYPE_TB
- en: '| **phone** | Provides a phone number keypad. |'
  prefs: []
  type: TYPE_TB
- en: '| **textPassword** | Displays a text entry keypad, and your input is concealed.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more in the online Android developer documentation at [https://developer.android.com/training/keyboard-input/style](https://developer.android.com/training/keyboard-input/style).
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| **textCapSentences** | Capitalizes the first word of a sentence. |'
  prefs: []
  type: TYPE_TB
- en: Now that you’ve learned how to use editable text views, let’s add views to the
    layout code in the app we’re building.
  prefs: []
  type: TYPE_NORMAL
- en: Add views to the layout XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you define a linear layout, you list views in the layout in the order you
    want them to display.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the app we’re building, we want to show two editable text views with a button
    underneath. The layout code looks like this, so update the code for *activity_main.xml*
    to include these changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0091-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are all the views the layout needs. So what’s next?
  prefs: []
  type: TYPE_NORMAL
- en: Make a view streeeeetch by adding weight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the views in the current layout take up just as much vertical space
    as they need for their content. But what we *really* want is to make the Message
    edit text stretch to take up any vertical space in the layout that’s not being
    used by the other views like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0092-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To do this, we need to allocate some **weight** to the Message area. Allocating
    weight to a view is a way of telling it to stretch to take up extra space in the
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'You assign weight to a view using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: where `number` is some number greater than 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you allocate weight to a view, the layout first makes sure that each view
    has enough space for its content: each button has space for its text, each edit
    text has space for its hint, and so on. Once it’s done that, the layout takes
    any extra space and divides it proportionally between the views with a weight
    of 1 or greater.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to apply this to the layout we’re building.
  prefs: []
  type: TYPE_NORMAL
- en: How to add weight to one view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need the Message edit text to take up any extra space in the layout that’s
    not used by either of the other two views. To do this, we’ll set its `android:layout_weight`
    attribute to `1`. As this is the only view in the layout with a weight value,
    this will make the text field stretch vertically to fill the remainder of the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code; update *activity_main.xml* to include the changes (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0093-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Giving the Message edit text a weight of `1` means that it takes up all of the
    extra space that’s not used by the other views in the layout. This is because
    neither of the other two views has been allocated any weight in the layout XML.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0093-03.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we only need to give a weight to a single view. Before we update
    the layout further, let’s see what happens when we need to assign weight to multiple
    views.
  prefs: []
  type: TYPE_NORMAL
- en: How to add weight to multiple views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you assign weight to multiple views, the linear layout uses the weight
    you assign to each view to work out what proportion of the remaining space each
    view should take up.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, suppose we give the To edit text a weight of `1`, and the Message
    edit text a weight of `2`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The linear layout spots that the To and Message editable text views have weights,
    and it uses these to work out how much space each view should take up.
  prefs: []
  type: TYPE_NORMAL
- en: It starts by adding together the `android:layout_weight` attributes for each
    view. In this example, the To and Message views have weights of 1 and 2 respectively,
    giving a total of 3.
  prefs: []
  type: TYPE_NORMAL
- en: The proportion of extra space taken up by each view is the view’s weight divided
    by the total weight. The To view has a weight of `1`, so this means it will take
    up 1/3 of the remaining space in the layout. The Message view has a weight of
    `2`, so it will take up 2/3 of the remaining space.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve learned how to use weight, let’s continue to update the layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0094-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The gravity attribute controls the position of a view’s contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing we’ll do is move the hint text that’s displayed inside the Message
    edit text. At the moment, it’s centered vertically inside the view. We want to
    change it so that the text appears at the top of the edit text field, and we can
    achieve this using the `**android:gravity**` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `android:gravity` attribute lets you specify how you want to position the
    contents of a view inside the view—for example, how you want to position text
    inside a text view. If you want a view’s contents to appear at the top of the
    view, as we do here, we can set its `android:gravity` attribute to `"top"` like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll add an `android:gravity` attribute to the Message edit text so that the
    hint text moves to the top of the view. Here’s the code; update *activity_main.xml*
    to include the change (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0095-02.png)![image](Images/f0095-03.png)![image](Images/f0095-04.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ll find a list of other values you can use with the `android:gravity` attribute
    on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Values you can use with the android:gravity attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some more of the values you can use with the `android:gravity` attribute.
    Add the attribute to your view, and set its value to one of the values below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| **`top`** | Puts the view’s contents at the top of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`bottom`** | Puts the view’s contents at the bottom of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`start`** | Puts the view’s contents at the start of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`end`** | Puts the view’s contents at the end of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`center_vertical`** | Centers the view’s contents vertically. |'
  prefs: []
  type: TYPE_TB
- en: '| **`center_horizontal`** | Centers the view’s contents horizontally. |'
  prefs: []
  type: TYPE_TB
- en: '| **`center`** | Centers the view’s contents vertically and horizontally. |'
  prefs: []
  type: TYPE_TB
- en: '| **`fill_vertical`** | Makes the view’s contents fill the view vertically.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **`fill_horizontal`** | Makes the view’s contents fill the view horizontally.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **`fill`** | Makes the view’s contents fill the view vertically and horizontally.
    |'
  prefs: []
  type: TYPE_TB
- en: 'You can also apply multiple gravities to a view by separating each value with
    a “|”. To sink a view’s contents to the bottom-end corner, for example, you’d
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that you know how to position a view’s contents using gravity, have a go
    at the following exercise on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: '**android:gravity lets you say where you want the view’s contents to appear
    inside the view.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Layout Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Somebody used fridge magnets to create a linear layout that, when run, produces
    the output below. Unfortunately, a passing sharknado has dislodged some of the
    magnets. Can you piece the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Hint: You won’t need to use all of the magnets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0097-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Layout Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Somebody used fridge magnets to create a linear layout that, when run, produces
    the output below. Unfortunately, a passing sharknado has dislodged some of the
    magnets. Can you piece the code back together again?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0098-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The story so far
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we’ve added three views to the linear layout, and adjusted their position
    by adding `layout_weight` and `gravity` attributes to the Message edit text. These
    attributes mean that the edit text uses up any extra space that’s not being used
    by either of the other views, and its hint text is displayed at the top of the
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0099-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Our linear layout is nearly complete, but there are just two more changes we’re
    going to make.
  prefs: []
  type: TYPE_NORMAL
- en: '**Move the Send button to the end edge.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For left-to-right languages, this will move the button over to the right.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add more space between the Message edit text and the top of the button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s see how to do this, starting with moving the button to the end.
  prefs: []
  type: TYPE_NORMAL
- en: layout-gravity controls the position of a view within a layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To move the button to the end edge of the layout, we’ll add an `**android:layout_gravity**`
    attribute to the button.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:layout_gravity` attribute lets you specify where you want a view
    in a linear layout to appear in its enclosing space. You can use it to push a
    view to the right, for instance, or center the view horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: 'To move the Send button to the end edge of the layout, we’ll set the `android:layout_gravity`
    attribute to `"end"` using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0100-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Linear layouts have two attributes that sound similar to one another, gravity
    and layout_gravity.**'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we used the `android:gravity` attribute to position the Message
    hint text inside an edit text. This is because the `android:gravity` attribute
    lets you say where you want a view’s **contents** to appear.
  prefs: []
  type: TYPE_NORMAL
- en: '`android:layout_gravity` deals with the **placement of the view itself**, and
    lets you control where views appear in their available space. In our case, we
    want the view to move to the end of its available space, so we’re using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0100-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the next page, and you’ll see a list of some of the other values
    you can use with the `android:layout_gravity` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: More values you can use with the android:layout-gravity attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the values you can use with the `android:layout_gravity` attribute.
    Add the attribute to your view, and set its value to one of the values below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| **Value** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| **`top, bottom, start, end`** | Puts the view at the top, bottom, start,
    or end of its available space. |'
  prefs: []
  type: TYPE_TB
- en: '| **`center_vertical, center_horizontal`** | Centers the view vertically or
    horizontally in its available space. |'
  prefs: []
  type: TYPE_TB
- en: '| **`center`** | Centers the view vertically and horizontally in its available
    space. |'
  prefs: []
  type: TYPE_TB
- en: '| **`fill_vertical, fill_horizontal`** | Grows the view so that it fills its
    available space vertically or horizontally. |'
  prefs: []
  type: TYPE_TB
- en: '| **`fill`** | Grows the view so that it fills its available space vertically
    and horizontally. |'
  prefs: []
  type: TYPE_TB
- en: 'You can assign multiple values to a view’s `android:layout_gravity` attribute
    by separating each value with a “`|`”. To move a view to the bottom-end corner
    of its available space, for example, you’d use the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now that you know how change a view’s position using the `android:layout_gravity`
    attribute, let’s find out how to add more space between views.
  prefs: []
  type: TYPE_NORMAL
- en: '**android:layout_gravity lets you say where you want views to appear in their
    available space.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**android:layout_gravity deals with the placement of the view itself, whereas
    android:gravity controls the view’s contents**.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use margins to add space between views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you position views using a linear layout, the layout doesn’t leave much
    space between them. You can increase the amount of space around a view by adding
    one or more **margins** to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you have two views in a linear layout—an edit text that’s positioned
    above a button. If you wanted to increase the space between the two views, you
    could add a margin of 40dp to the top of the button using the `android:layout_marginTop`
    attribute like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0102-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s a list of the types of margin you can use to give your views extra space.
    Add the attribute to the view, and set its value to the size of margin you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '| **Attribute** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| **`layout_marginTop`** | Adds extra space to the top of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`layout_marginBottom`** | Adds extra space to the bottom of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`layout_marginStart`** | Adds extra space to the start of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`layout_marginEnd`** | Adds extra space to the end of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`layout_margin`** | Adds equal space to each side of the view. |'
  prefs: []
  type: TYPE_TB
- en: '| **`layout_marginVertical, layout_marginHorizontal`** | Adds equal space to
    the vertical (top and bottom) or horizontal (start and end) edges of the view.
    |'
  prefs: []
  type: TYPE_TB
- en: The full linear layout code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you know a view’s `layout_gravity` and `margin` attributes, let’s
    use them in the linear layout code to reposition the button and add some space
    to its top edge. Here’s the full code for *activity_main.xml*; update the code
    to include the changes below (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0103-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve now finished writing the linear layout code, so let’s take it for a test
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve made the changes to your app, go ahead and run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app displays a linear layout featuring three views: two editable text views
    and a button. The views are displayed in a vertical column. The To view appears
    at the top, the Send button is displayed in the bottom end corner, and the Message
    view takes up any extra space, allowing for a margin of 40dp at the top edge of
    the button.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to create a linear layout, and control how its views are
    displayed, have a go at the exercise on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0104-02.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The code below describes a complete linear layout. Your job is to play like
    you’re the layout, and say which screen (A or B) the layout will produce when
    run.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0105-01.png)![image](Images/f0105-02.png)'
  prefs: []
  type: TYPE_IMG
- en: BE the Layout Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The code below describes a complete linear layout. Your job is to play like
    you’re the layout, and say which screen (A or B) the layout will produce when
    run.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0106-02.png)![image](Images/f0106-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Your activity code tells Android which layout it uses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, you’ve learned how to use a linear layout and fine-tune
    the way in which its views are displayed. Before we introduce you to another type
    of layout, let’s go behind the scenes and look at what happens to the layout when
    the app runs.
  prefs: []
  type: TYPE_NORMAL
- en: As you already know, when Android runs an app, it launches the app’s main activity.
    In the current app, this is an activity named `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the activity launches, its `onCreate()` method runs. This method includes
    the following code that specifies which layout the activity should use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0107-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the above code tells Android which layout to use by passing
    the name of a layout to a method named `setContentView()`. The method then displays
    the layout on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The layout’s views are inflated into objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As well as displaying the layout on the device screen, the `setContentView()`
    method converts the views in the layout’s XML into objects. This process is called
    **layout inflation** because it *inflates* each view into an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0107-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Layout inflation is important because it’s what allows your activity code to
    manipulate the views in your layout. Behind the scenes, each view is rendered
    to an object, which you can interact with using activity code.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how layout inflation works with the linear layout code we’ve built.
  prefs: []
  type: TYPE_NORMAL
- en: '**When you run your app, Android instantiates the layout XML by converting
    each of the layout’s items into an object. This is known as layout inflation.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Layout inflation: an example'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you already know, the linear layout code displays two editable text views
    and a button inside a linear layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0108-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the app runs, the views in the layout get inflated into objects. The linear
    layout is inflated to a `LinearLayout` object, the editable text views are inflated
    to `EditText` objects, and the button is inflated to a `Button`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0108-03.png)![image](Images/f0108-04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you know how layout inflation works, let’s find out how to use a new
    type of layout: a **frame layout**.'
  prefs: []
  type: TYPE_NORMAL
- en: A frame layout stacks its views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0109-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you already know, a linear layout arranges its views in a single row or column.
    Each view is allocated its own space on the screen, and they don’t overlap one
    another.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, however, you *want* your views to overlap. As an example, suppose
    you want to display an image with some text overlaid on top of it. You wouldn’t
    be able to achieve this just using a linear layout.
  prefs: []
  type: TYPE_NORMAL
- en: If you want a layout whose views can overlap, a simple option is to use a frame
    layout. Instead of displaying its views in a single row or column, it stacks them,
    one on top of another. It’s often used to hold just a single view.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll examine how frame layouts work by creating a useful app which displays
    some text on top of a duck image. We’ll start by creating a new project.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0109-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Android Studio project using the same steps you used earlier. Choose
    the Empty Activity option, enter a name of “Frame Layout Example” and a package
    name of “com.hfad.framelayoutexample”, and accept the default save location. Make
    sure the language is set to Kotlin, and that the minimum SDK is API 21 so that
    it will run on most Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve created the project, let’s define a frame layout.
  prefs: []
  type: TYPE_NORMAL
- en: How to define a frame layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You define a frame layout using the `<FrameLayout>` element like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0109-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Just like a linear layout and any other type of view or view group, the `android:layout_width`
    and `android:layout_height` attributes specify the layout’s width and height,
    and are mandatory. You can optionally add `padding` attributes too, although we’ve
    not done so here.
  prefs: []
  type: TYPE_NORMAL
- en: The above code creates an empty frame layout, so let’s go ahead and add a duck
    image to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add an image to your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to display an image called *duck.webp* in the frame layout, but
    first, we need to add the file to the project.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you need to create a *drawable* resource folder (if Android Studio
    hasn’t already created one for you). This is the default folder for storing image
    resources in your app. Switch to the Project view of Android Studio’s explorer,
    select the *app/src/main/res* folder, go to the File menu, choose the New… option,
    then click on the option to create a new Android resource directory. When prompted,
    choose a resource type of “drawable”, name the folder “drawable”, and click on
    OK.
  prefs: []
  type: TYPE_NORMAL
- en: Next, download the file *duck.webp* from *tinyurl.com/hfad3*, then add it to
    the *app/src/main/res/drawable* folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to display *duck.webp* in an image view (a view that displays an
    image) that we’ll add to the frame layout. An image view is defined using the
    `<ImageView>` element like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0110-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The `<ImageView>` element includes the `android:layout_width` and `android:layout_height`
    attributes, which you’re already familiar with, along with three new ones.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:src` attribute specifies what image should be displayed in the
    image view. We’ve set this to `"@drawable/duck"` so that it uses *duck.webp* in
    the *drawable* folder.
  prefs: []
  type: TYPE_NORMAL
- en: The `android:contentDescription` attribute provides a text description of the
    image for accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `android:scaleType` attribute describes how you want to scale the
    image. We’ve used `"centerCrop"`, which crops the edges of the image.
  prefs: []
  type: TYPE_NORMAL
- en: That’s everything that you need to know in order to display the duck image in
    a frame layout. Before we find out how to display some text on top of it, let’s
    take a closer look at how you use image—or *drawable*—resources.
  prefs: []
  type: TYPE_NORMAL
- en: A frame layout stacks views in the order they appear in the layout XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you define a frame layout, you list views in the order you want them to
    be stacked. The first view is displayed first, the second is stacked on top of
    it, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we’re going to display a text view on top of the image view, so we’ll
    add it below the image view in the XML. Update the *activity_main.xml* code so
    that it matches the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0112-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run the app, an image of a duck appears on the device with the text
    “It’s a duck!” in the top corner.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0112-03.png)'
  prefs: []
  type: TYPE_IMG
- en: All layouts are a type of ViewGroup…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though they display their views in different ways, you may have noticed
    that linear layouts and frame layouts have a lot in common with one another. They
    can each hold views, for example, and they also have their own policy that determines
    how views are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a good reason for this commonality. Behind the scenes, all layouts—including
    linear layouts and frame layouts—are subclasses of the `android.view.ViewGroup`
    superclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0113-02.png)'
  prefs: []
  type: TYPE_IMG
- en: …and a ViewGroup is a type of View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ViewGroup` class is a subclass of `View` that can hold other views. Behind
    the scenes, every layout is a subclass of `ViewGroup`, which means that **every
    layout is also a type of** `**View**`.
  prefs: []
  type: TYPE_NORMAL
- en: This class hierarchy means that all views and layouts share common attributes
    and behavior. They can all be displayed on the screen, for instance, and you get
    to say how tall or wide they should be. It’s why you need to specify values for
    each view and layout’s `android:layout_height` and `android:layout_width` attributes.
    These attributes are mandatory for all views, and as a layout is a type of view,
    they are also mandatory for all layouts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Every UI component you add to a layout is a type of View: an object that
    takes up space on the screen.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Every layout is a type of ViewGroup: a type of View that can contain other
    Views.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**She’s right.**'
  prefs: []
  type: TYPE_NORMAL
- en: As you already know, a layout is a type of view that can hold other views. As
    every layout is also a type of view, this means that **layouts can hold other
    layouts**.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to nest layouts inside other layouts is useful because it lets you
    design more complex user interfaces. You can, for example, add horizontal rows
    to a vertical linear layout by nesting horizontal linear layouts inside the root
    linear layout. And if you want to arrange text vertically on top of an image,
    you can do so by nesting a vertical linear layout inside a frame layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at how this works using a new type of layout: a scroll
    view.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0114-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A scroll view inserts a vertical scrollbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0115-01.png)'
  prefs: []
  type: TYPE_IMG
- en: A **scroll view** is a type of frame layout that has a vertical scrollbar. It’s
    useful for layouts that are too big for the device they’re running on, as it means
    that you can use it to scroll to any views that don’t fit on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0115-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We’re going to create an app that uses a scroll view. Create a new project
    named “Scroll View Example”, choosing the Empty Activity option. Make sure that
    the language is set to Kotlin, and that the minimum SDK is API 21 so that it will
    run on most Android devices. Then replace the code in *activity_main.xml* with
    the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0115-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the above layout consists of a simple linear layout that contains
    a Message edit text and a Send button.
  prefs: []
  type: TYPE_NORMAL
- en: Try running the app, and type lots of text into the edit text. The view expands
    to fit the content, and it eventually pushes the Send button off the edge of the
    screen. As there’s no scrollbar, you can no longer access the button.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this problem, we’ll add a scroll view to the layout. This will give us
    a scrollbar we can use to access the Send button if it’s not visible on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0115-04.png)'
  prefs: []
  type: TYPE_IMG
- en: How to add a scroll view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You add a scroll view to your layout using the `**<ScrollView>**` element. The
    `<ScrollView>` element is used in the same way as `<FrameLayout>` except that
    it includes an extra attribute, `**fillViewport**`, which is used to specify whether
    the scroll view should fill the device screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ScrollView is a subclass of FrameLayout, which means it can do everything a
    FrameLayout can, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code below, we’ve added a scroll view to the layout code so that it
    encloses the original linear layout. Update the *activity_main.xml* code to include
    the changes shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0116-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll take the code for a test drive after you’ve had a go at the following
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve added a scroll view to your layout code, go ahead and run the app.
  prefs: []
  type: TYPE_NORMAL
- en: When you enter lots of text into the Message edit text, the Send button gets
    pushed off the edge of the screen as before. This time, however, we can scroll
    the device screen to reach the button.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve now learned how to use different types of layout to
    control the appearance of your app’s UI. You’ll build on this knowledge in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0119-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**All layouts (including linear layouts, frame layouts, and scroll views) can
    hold other layouts.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**You can build complex layouts by nesting one type of layout inside another.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0120-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 3](#layoutscolon_being_a_layout) under your belt and
    now you’ve added building layouts to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0120-02.png)'
  prefs: []
  type: TYPE_IMG
