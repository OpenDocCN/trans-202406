- en: Chapter 7\. Falco Rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chapters [3](ch03.xhtml#understanding_falcoapostr) through [6](ch06.xhtml#fields_and_filters)
    gave you a comprehensive view of Falco’s architecture, describing most of the
    important concepts that a serious Falco user needs to understand. The remaining
    piece to cover is one of the most important ones: rules. Rules are at the heart
    of Falco. You’ve already encountered them several times, but this chapter approaches
    the topic in a more formal and comprehensive manner, giving you the foundation
    you will need as you work through the next parts of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This chapter covers what rules are and their syntax. The goal is to give you
    all the knowledge you need to understand and use them, not to teach you to write
    your own. Writing your own rules will be covered in [Part IV](part04.xhtml#iv_extending_falco)
    of the book (in particular, in [Chapter 13](ch13.xhtml#writing_falco_rules)).
  prefs: []
  type: TYPE_NORMAL
- en: Falco is designed to be easy and intuitive, and the rule syntax and semantics
    are no exception. Rules files are straightforward, and you’ll be able to understand
    them in no time. Let’s start by covering some basics.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Falco Rules Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Falco rules tell Falco what to do. They are typically packaged inside rules
    files, which Falco reads at startup time. A rules file is a YAML file that can
    contain one or more rules, with each rule being a node in the YAML body.
  prefs: []
  type: TYPE_NORMAL
- en: Falco comes packaged with a set of default rules files that are normally located
    in */etc/falco*. The default rules files are loaded automatically if Falco is
    launched with no command-line options. These files are curated by the community
    and updated with every new release of Falco.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it starts, Falco will tell you which rules files have been loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Often, you will want to load your own rules files instead of the default ones.
    You can do this in two different ways. The first one involves using the `-r` command-line
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And the second one involves modifying the `rules_file` section of the Falco
    configuration file (normally located at */etc/falco/falco.yaml*), which looks
    like this by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can add, remove, or modify entries in this section to control which rules
    files Falco loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that with both of these methods, you can specify a directory instead of
    a single file. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'and:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is handy because it lets you add and remove rules files by just altering
    the contents of a directory, without having to reconfigure Falco.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned, Falco’s default rules files are normally installed under */etc/falco*.
    This directory contains files that are critical for Falco to function in different
    environments. [Table 7-1](#falcoapostrophes_default_rules_files) gives an overview
    of the most important ones.
  prefs: []
  type: TYPE_NORMAL
- en: Table 7-1\. Falco’s default rules files
  prefs: []
  type: TYPE_NORMAL
- en: '| Filename | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *falco_rules.yaml* | This is Falco’s main rules file, containing the official
    set of system call–based rules for hosts and containers. |'
  prefs: []
  type: TYPE_TB
- en: '| *falco_rules.local.yaml* | This is where you can add your own rules, or create
    overrides to modify existing rules, without risking polluting *falco_rules.yaml*.
    [Chapter 13](ch13.xhtml#writing_falco_rules) will cover rule creation and overriding
    in detail. |'
  prefs: []
  type: TYPE_TB
- en: '| *rules.available/application_rules.yaml* | This file contains rules that
    target common applications like Cassandra and Mongo. Since this ruleset tends
    to be fairly noisy, it’s disabled by default. |'
  prefs: []
  type: TYPE_TB
- en: '| *k8s_audit_rules.yaml* | This file contains rules that detect threats and
    misconfigurations by tapping into the Kubernetes audit log. This ruleset is not
    enabled by default; to use it, you need to enable it and configure the Falco [Kubernetes
    Audit Events plugin](https://oreil.ly/6aQEx). |'
  prefs: []
  type: TYPE_TB
- en: '| *aws_cloudtrail_rules.yaml* | This file contains rules that perform detections
    by tapping into the stream of AWS CloudTrail logs. This ruleset is not enabled
    by default; to use it, you need to enable it and configure the Falco [CloudTrail
    plugin](https://oreil.ly/1opUj), as we will explain in [Chapter 11](ch11.xhtml#using_falco_for_cloud_se).
    |'
  prefs: []
  type: TYPE_TB
- en: '| *rules.d* | This empty directory is included in the default Falco configuration.
    This means you can add files to this directory (or create symlinks to your rules
    files in this directory) and Falco will automatically load them. |'
  prefs: []
  type: TYPE_TB
- en: 'By default, Falco loads two of these files: *falco_rules.yaml* and *falco_rules.local.yaml*.
    In addition, it mounts the *rules.d* directory, which you can use to extend the
    ruleset with no changes to the command line or to the configuration file.'
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of a Falco Rules File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you know what a rules file looks like from the outside, it’s time
    to learn what’s inside it. The YAML in a rules file can contain three different
    types of nodes: *rules*, *macros*, and *lists*. Let’s take a look at what these
    constructs are and the roles they play in rules files.'
  prefs: []
  type: TYPE_NORMAL
- en: Rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A rule declares a Falco detection. You’ve seen several examples in the previous
    chapters, but as a reminder, a rule has two main purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare a condition that, when met, will cause the user to be notified
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the output message that will be reported to the user when the condition
    is met
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s an example rule, borrowed from [Chapter 6](ch06.xhtml#fields_and_filters):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This rule notifies us every time there is an attempt to change the permissions
    of a file to make it executable by another user.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding example, a rule contains several keys. Some
    of the keys are required, while others are optional. [Table 7-2](#rule_fieldss)
    contains a comprehensive list of the fields that you can use in a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Table 7-2\. Rule fields
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Required | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `rule` | Yes | A short sentence describing the rule and uniquely identifying
    it. |'
  prefs: []
  type: TYPE_TB
- en: '| `desc` | Yes | A longer description that describes in more detail what the
    rule detects. |'
  prefs: []
  type: TYPE_TB
- en: '| `condition` | Yes | The rule condition. This is a filter expression, with
    the syntax described in [Chapter 6](ch06.xhtml#fields_and_filters), specifying
    the condition that needs to be met in order for the rule to trigger. |'
  prefs: []
  type: TYPE_TB
- en: '| `output` | Yes | A `printf`-like message that is emitted by Falco when the
    rule triggers. |'
  prefs: []
  type: TYPE_TB
- en: '| `priority` | Yes | The priority of the alert generated when the rule is triggered.
    Falco uses syslog-style priorities and therefore accepts the following values
    for this key: `EMERGENCY`, `ALERT`, `CRITICAL`, `ERROR`, `WARNING`, `NOTICE`,
    `INFORMATIONAL`, and `DEBUG`. |'
  prefs: []
  type: TYPE_TB
- en: '| `source` | No | The data source to which the rule should be applied. If this
    key is not present, the source is assumed to be `syscall`. Each plugin defines
    its own source type that can be used as the value for this key. For example, use
    `aws_cloudtrail` for rules that contain conditions/outputs based on the CloudTrail
    plugin fields. |'
  prefs: []
  type: TYPE_TB
- en: '| `enabled` | No | A Boolean key that can optionally be used to disable a rule.
    Disabled rules are not loaded by the engine and don’t require any resources when
    Falco is running. If this key is missing, `enabled` is assumed to be `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tags` | No | A list of tags that are associated with this rule. Tags have
    multiple uses, including easily selecting which rules to load and categorizing
    the alerts that Falco generates. We’ll talk about tags later in this chapter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `warn_evttypes` | No | When set to `false`, this flag disables warnings about
    missing event type checks for this rule. When Falco loads a rule, in addition
    to validating its syntax, it runs a number of checks to make sure that the rule
    meets basic performance criteria. If you know what you are doing and you specifically
    want to craft a rule that doesn’t meet such criteria, this flag will prevent Falco
    from complaining. By default, the value of this flag is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `skip-if-unknown-filter` | No | Setting this flag to `true` causes Falco
    to silently skip this rule if the field is not accepted by the current version
    of the rule engine. If this flag is not set or set to `false`, Falco will print
    an error and exit when it encounters a rule that cannot be parsed. |'
  prefs: []
  type: TYPE_TB
- en: The key fields in the rule are `condition` and `output`. [Chapter 6](ch06.xhtml#fields_and_filters)
    talks about them extensively, so if you haven’t done so yet, we recommend that
    you consult that chapter for an overview.
  prefs: []
  type: TYPE_NORMAL
- en: Macros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Macros are heavily used in the default Falco ruleset. They make it possible
    to “separate” portions of rules into independent and reusable entities. You can
    think of a macro as a piece of a condition that has been separated out and can
    be referenced by name. To explore this concept, let’s go back to the previous
    example and try to modularize it using a macro:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the condition: we match the event type against three different
    system calls because, well, the kernel offers three different system calls to
    change file permissions. In practice, these three system calls are all flavors
    of [`chmod`](https://oreil.ly/qAdBA), with essentially the same arguments to check.
    We can make the same condition easier to read by isolating this complexity into
    a macro:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note how the condition is much shorter and more readable. In addition, now we
    can reuse the `chmod` macro in other rules, simplifying all of them and making
    them consistent. Even more importantly, if we ever want to add another `chmod`
    system call that Falco should inspect, we have only one place to change (the macro)
    instead of multiple rules.
  prefs: []
  type: TYPE_NORMAL
- en: Macros help us keep our rulesets clean, modular, and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like macros, lists are heavily used in Falco’s default ruleset. Lists are collections
    of items that can be included from other parts of the ruleset. For example, lists
    can be included by rules, by macros, and even by other lists. The difference between
    a macro and a list is that the former is actually a condition and is parsed as
    a filtering expression. Lists, on the other hand, are more akin to arrays in a
    programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with the previous example, an even better way to write it is the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What’s different this time? First, we’ve changed the `chmod` macro to use the
    `in` operator instead of doing three separate comparisons. This not only is more
    efficient, but it also gives us the opportunity to separate out the three system
    calls into a list. The list approach is great for rule maintenance because it
    allows us to isolate only the values into an array-like representation that is
    clear and compact and can easily be overridden if necessary (more on list overriding
    in [Chapter 13](ch13.xhtml#writing_falco_rules)).
  prefs: []
  type: TYPE_NORMAL
- en: Rule Tagging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Tagging* is the concept of assigning labels to rules. If you are familiar
    with modern cloud computing environments like AWS or Kubernetes, you know that
    they let you attach labels to resources. Doing that lets you manage those resources
    more easily, as groups instead of individuals. Tagging brings the same philosophy
    to Falco rules: it lets you treat rules as cattle instead of pets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This, for example, is a rule in the default Falco ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note how the rule has several tags, some indicating what the rule applies to
    (e.g., `container`) and others mapping it to compliance frameworks like CIS and
    MITRE ATT&CK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Falco lets you use tags to control which rules are loaded. This is done through
    two command-line flags, `-T` and `-t`. Here’s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `-T` to disable rules with a specific tag. For example, to skip all rules
    with the `k8s` and `cis` tags, you can run Falco like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `-t` for the opposite purpose; i.e., to only run the rules that have the
    specified tag. For example, to only run the rules with the `k8s` and `cis` tags,
    you can use the following command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both `-T` and `-t` can be specified multiple times on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: You can use any tags you want to decorate your rules. However, the default ruleset
    is standardized on a coherent set of tags. [Table 7-3](#default_rule_tags) shows
    what this standard set of tags is, according to the official Falco documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Table 7-3\. Default rule tags
  prefs: []
  type: TYPE_NORMAL
- en: '| Tag | Used for |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `file` | Rules related to reading/writing files and accessing filesystems
    |'
  prefs: []
  type: TYPE_TB
- en: '| `software_mgmt` | Rules related to package management (rpm, dpkg, etc.) or
    to installing new software |'
  prefs: []
  type: TYPE_TB
- en: '| `process` | Rules related to processes, command execution, and interprocess
    communication (IPC) |'
  prefs: []
  type: TYPE_TB
- en: '| `database` | Rules that have to do with databases |'
  prefs: []
  type: TYPE_TB
- en: '| `host` | Rules that apply to virtual and physical machines but *not* to containers
    |'
  prefs: []
  type: TYPE_TB
- en: '| `shell` | Rules that apply to starting shells and performing shell operations
    |'
  prefs: []
  type: TYPE_TB
- en: '| `container` | Rules that apply to containers and don’t work for hosts |'
  prefs: []
  type: TYPE_TB
- en: '| `k8s` | Rules related to Kubernetes |'
  prefs: []
  type: TYPE_TB
- en: '| `users` | Rules that apply to users, groups, and identity management |'
  prefs: []
  type: TYPE_TB
- en: '| `network` | Rules detecting network activity |'
  prefs: []
  type: TYPE_TB
- en: '| `cis` | Rules covering portions of the CIS benchmark |'
  prefs: []
  type: TYPE_TB
- en: '| `mitre_*` | Rules covering the MITRE ATT&CK framework (this is a category
    that includes several tags: `mitre_execution`, `mitre_persistence`, `mitre_privilege_escalation`,
    and so on) |'
  prefs: []
  type: TYPE_TB
- en: Declaring the Expected Engine Version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you open a Falco rules file with a text editor, the first line you will
    normally see is a statement that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Declaring the minimum required engine version is optional, but it’s very important
    because it helps ensure that the version of Falco you are running will properly
    support the rules inside it. Some of the fields used in a ruleset may not exist
    in older versions of Falco, or a rule may require a system call that was added
    only recently. Without correct versioning, a rules file might not load or, even
    worse, it might load but produce incorrect results. If the rules file requires
    an engine version higher than the one supported by Falco, Falco will report an
    error and refuse to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, rules files can declare the plugin versions they are compatible
    with through the `required_plugin_versions` top-level field. This field is optional
    too; if you don’t include it, no plugin compatibility checks will be performed,
    and you may see similar behavior to that just described. The syntax of `required_plugin_versions`
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Below `required_plugin_versions` you specify a list of objects, each of which
    has two properties: `name` and `version`. If a plugin is loaded and a corresponding
    entry in `required_plugin_versions` is found, then the loaded plugin version must
    be [semver-compatible](https://semver.org) with the `version` property.'
  prefs: []
  type: TYPE_NORMAL
- en: The default rules files that come prepackaged with Falco are all versioned.
    Don’t forget to do the same in each of your rules files!
  prefs: []
  type: TYPE_NORMAL
- en: Replacing, Appending to, and Disabling Rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Falco comes prepackaged with a rich and constantly growing set of rules that
    covers many important use cases. However, there are many situations where you
    might find it beneficial to customize the default ruleset. For example, you might
    want to decrease the noisiness of some rules, or you might be interested in expanding
    the scope of some of the Falco detections to better match your environment.
  prefs: []
  type: TYPE_NORMAL
- en: One way to approach these situations is to edit the default rules files. An
    important lesson to learn is that you don’t have to do this. Actually, you *shouldn’t*
    do this—Falco offers a more versatile way to customize rules, designed to make
    your changes maintainable and reusable across releases. Let’s take a look at how
    this works.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing Macros, Lists, and Rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Replacing a list, macro, or rule is just a matter of redeclaring it. The second
    declaration can be in the same file, or in a separate file that is loaded after
    the one containing the original declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works through an example. The following rule detects if
    a text editor has been opened as root (which, as we all know, people should avoid
    doing):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we save this rule in a rules file called *rulefile.yaml*, we can test the
    rule by loading the file in Falco:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The rule will trigger every time we run vi or nano as root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now say we want to change the rule to support a different set of text editors.
    We can create a second rules file, name it *editors.yaml*, and populate it in
    the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how we redefined the content of the `editors` list, replacing the original
    command names with `emacs` and `subl`. Now we just load *editors.yaml* after the
    original rules file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Falco will pick up the second definition of `editors` and generate an alert
    when root runs either emacs or subl, but *not* vi or nano. Essentially, we’ve
    replaced the content of the list.
  prefs: []
  type: TYPE_NORMAL
- en: This trick works exactly the same way with macros and rules as well.
  prefs: []
  type: TYPE_NORMAL
- en: Appending to Macros, Lists, and Rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s stick to the same text editor rule example. This time, however, suppose
    we want to *append* additional names to the list of editors instead of replacing
    the full list. The mechanism is the same, but with the addition of the `append`
    keyword. Here is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can save this list in a file named *additional_editors.yaml*. Now, if we
    run the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Falco will detect root execution of vi, nano, emacs, and subl.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can append (using the same syntax) to macros and rules as well. However,
    there are a couple of things to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: For rules, it is only possible to append to the condition. Attempts to append
    to other keys, like `output`, will be ignored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that appending to a condition just attaches the new text at the end
    of it, so be careful about ambiguities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, suppose we extended the rule condition in our example by appending
    to it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The full rule condition would become:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This condition is clearly ambiguous. Will the rule trigger only whenever the
    user root or loris opens a text editor? Or will it trigger when root opens a text
    editor and when loris executes *any* command? To avoid such ambiguities, and to
    make your rules files more readable, you can use parentheses in the original conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will often encounter situations where you need to disable one or more rules
    in a ruleset, for example because they are too noisy or they are just not relevant
    for your environment. Falco provides different ways to do this. We are going to
    cover two of them: using the command line and overriding the `enabled` flag.'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling rules from the command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Falco actually offers two separate ways to disable rules via the command line.
    The first one, which we discussed when talking about rule tagging earlier in this
    chapter, involves using the `-T` flag. As a refresher, you can use `-T` to disable
    rules with the given tag. `-T` can be used multiple times on the command line
    to disable multiple tags. For example, to skip all rules with either the `k8s`
    tag, the `cis` tag, or both, you can run Falco like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The second way to disable rules from the command line is by using the `-D` flag.
    `-D *<substring>*` disables all the rules that include `*<substring>*` in their
    name. Similarly to `-T`, `-D` can be specified multiple times with different arguments.
  prefs: []
  type: TYPE_NORMAL
- en: These parameters can also be specified as a Helm chart value (`extraArgs`) if
    you are deploying Falco via the official Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling rules by overriding the enabled flag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might remember from [Table 7-2](#rule_fieldss) that one of the optional
    rule fields is called `enabled`. As a refresher, here’s how we documented it earlier
    in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Boolean key that can optionally be used to disable a rule. Disabled rules
    are not loaded by the engine and don’t require any resources when Falco is running.
    If this key is missing, `enabled` is assumed to be `true`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`enabled` can be turned on or off by overriding the rule with the usual mechanism.
    For example, if you want to disable the *User mgmt binaries* rule in */etc/falco/falco_rules.yaml*,
    you can add the following content in */etc/falco/falco_rules.local.yaml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You see, it wasn’t that hard! At this point, you should be able to read and
    understand Falco rules, and you are much closer to being able to write your own.
    We’ll focus on rule writing in [Part IV](part04.xhtml#iv_extending_falco) of the
    book, and in particular in [Chapter 13](ch13.xhtml#writing_falco_rules). Our next
    step will be learning everything about Falco outputs.
  prefs: []
  type: TYPE_NORMAL
