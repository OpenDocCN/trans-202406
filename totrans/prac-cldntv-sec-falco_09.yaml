- en: Chapter 7\. Falco Rules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。Falco 规则
- en: 'Chapters [3](ch03.xhtml#understanding_falcoapostr) through [6](ch06.xhtml#fields_and_filters)
    gave you a comprehensive view of Falco’s architecture, describing most of the
    important concepts that a serious Falco user needs to understand. The remaining
    piece to cover is one of the most important ones: rules. Rules are at the heart
    of Falco. You’ve already encountered them several times, but this chapter approaches
    the topic in a more formal and comprehensive manner, giving you the foundation
    you will need as you work through the next parts of the book.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第 3（ch03.xhtml#understanding_falcoapostr）至第 6（ch06.xhtml#fields_and_filters）章为您全面展示了
    Falco 的架构，描述了大多数重要的概念，这些概念是一位认真使用 Falco 用户所需了解的。剩下的部分要覆盖的是最重要的之一：规则。规则是 Falco
    的核心。您已经多次遇到它们，但是本章将以更正式和全面的方式讨论这个主题，为您提供在您阅读本书后续部分时所需的基础。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter covers what rules are and their syntax. The goal is to give you
    all the knowledge you need to understand and use them, not to teach you to write
    your own. Writing your own rules will be covered in [Part IV](part04.xhtml#iv_extending_falco)
    of the book (in particular, in [Chapter 13](ch13.xhtml#writing_falco_rules)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍规则是什么及其语法。目标是为您提供理解和使用它们所需的所有知识，而不是教您编写自己的规则。编写您自己的规则将在本书的第四部分（特别是在第 13
    章（ch13.xhtml#writing_falco_rules）中）介绍。
- en: Falco is designed to be easy and intuitive, and the rule syntax and semantics
    are no exception. Rules files are straightforward, and you’ll be able to understand
    them in no time. Let’s start by covering some basics.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 的设计简单直观，规则语法和语义也不例外。规则文件很直观，您很快就能理解。让我们从基础知识开始。
- en: Introducing Falco Rules Files
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Falco 规则文件
- en: Falco rules tell Falco what to do. They are typically packaged inside rules
    files, which Falco reads at startup time. A rules file is a YAML file that can
    contain one or more rules, with each rule being a node in the YAML body.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 规则告诉 Falco 应该做什么。它们通常打包在规则文件中，在启动时由 Falco 读取。规则文件是一个 YAML 文件，可以包含一个或多个规则，每个规则都是
    YAML 主体中的一个节点。
- en: Falco comes packaged with a set of default rules files that are normally located
    in */etc/falco*. The default rules files are loaded automatically if Falco is
    launched with no command-line options. These files are curated by the community
    and updated with every new release of Falco.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 包含一组默认规则文件，通常位于 */etc/falco*。如果没有命令行选项启动 Falco，则默认规则文件会自动加载。这些文件由社区策划并随每个新版本的
    Falco 更新。
- en: 'When it starts, Falco will tell you which rules files have been loaded:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时，Falco 会告诉您已加载了哪些规则文件：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Often, you will want to load your own rules files instead of the default ones.
    You can do this in two different ways. The first one involves using the `-r` command-line
    option:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会希望加载自己的规则文件而不是默认文件。您可以通过两种不同的方式实现这一点。第一种方法涉及使用 `-r` 命令行选项：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And the second one involves modifying the `rules_file` section of the Falco
    configuration file (normally located at */etc/falco/falco.yaml*), which looks
    like this by default:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 而第二种方法涉及修改 Falco 配置文件的 `rules_file` 部分（通常位于 */etc/falco/falco.yaml*），默认情况下如下所示：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can add, remove, or modify entries in this section to control which rules
    files Falco loads.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此部分添加、删除或修改条目，以控制 Falco 加载哪些规则文件。
- en: 'Note that with both of these methods, you can specify a directory instead of
    a single file. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用这两种方法，您可以指定一个目录而不是单个文件。例如：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 和：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is handy because it lets you add and remove rules files by just altering
    the contents of a directory, without having to reconfigure Falco.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这很方便，因为它允许您通过简单修改目录内容而无需重新配置 Falco，从而添加和删除规则文件。
- en: As we mentioned, Falco’s default rules files are normally installed under */etc/falco*.
    This directory contains files that are critical for Falco to function in different
    environments. [Table 7-1](#falcoapostrophes_default_rules_files) gives an overview
    of the most important ones.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，Falco 的默认规则文件通常安装在 */etc/falco* 下。该目录包含对 Falco 在不同环境中正常运行至关重要的文件。表 7-1（#falcoapostrophes_default_rules_files）概述了其中最重要的文件。
- en: Table 7-1\. Falco’s default rules files
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-1。Falco 的默认规则文件
- en: '| Filename | Description |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 文件名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *falco_rules.yaml* | This is Falco’s main rules file, containing the official
    set of system call–based rules for hosts and containers. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| *falco_rules.yaml* | 这是 Falco 的主要规则文件，包含宿主和容器的基于系统调用的官方规则集。 |'
- en: '| *falco_rules.local.yaml* | This is where you can add your own rules, or create
    overrides to modify existing rules, without risking polluting *falco_rules.yaml*.
    [Chapter 13](ch13.xhtml#writing_falco_rules) will cover rule creation and overriding
    in detail. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| *falco_rules.local.yaml* | 这是您可以添加自己的规则，或创建覆盖以修改现有规则，而无需污染 *falco_rules.yaml*
    的位置。[第13章](ch13.xhtml#writing_falco_rules)将详细介绍规则的创建和覆盖。 |'
- en: '| *rules.available/application_rules.yaml* | This file contains rules that
    target common applications like Cassandra and Mongo. Since this ruleset tends
    to be fairly noisy, it’s disabled by default. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| *rules.available/application_rules.yaml* | 该文件包含针对常见应用程序（如 Cassandra 和 Mongo）的规则。由于此规则集往往噪音较大，默认情况下是禁用的。
    |'
- en: '| *k8s_audit_rules.yaml* | This file contains rules that detect threats and
    misconfigurations by tapping into the Kubernetes audit log. This ruleset is not
    enabled by default; to use it, you need to enable it and configure the Falco [Kubernetes
    Audit Events plugin](https://oreil.ly/6aQEx). |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| *k8s_audit_rules.yaml* | 该文件包含通过访问 Kubernetes 审计日志来检测威胁和错误配置的规则。此规则集默认未启用；要使用它，您需要启用它并配置
    Falco [Kubernetes Audit Events 插件](https://oreil.ly/6aQEx)。 |'
- en: '| *aws_cloudtrail_rules.yaml* | This file contains rules that perform detections
    by tapping into the stream of AWS CloudTrail logs. This ruleset is not enabled
    by default; to use it, you need to enable it and configure the Falco [CloudTrail
    plugin](https://oreil.ly/1opUj), as we will explain in [Chapter 11](ch11.xhtml#using_falco_for_cloud_se).
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| *aws_cloudtrail_rules.yaml* | 该文件包含通过访问 AWS CloudTrail 日志流来执行检测的规则。此规则集默认未启用；要使用它，您需要启用它并配置
    Falco [CloudTrail 插件](https://oreil.ly/1opUj)，如我们将在[第11章](ch11.xhtml#using_falco_for_cloud_se)中解释的那样。
    |'
- en: '| *rules.d* | This empty directory is included in the default Falco configuration.
    This means you can add files to this directory (or create symlinks to your rules
    files in this directory) and Falco will automatically load them. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| *rules.d* | 此空目录包含在默认的 Falco 配置中。这意味着您可以将文件添加到此目录（或在此目录中创建符号链接到您的规则文件），Falco
    将自动加载它们。 |'
- en: 'By default, Falco loads two of these files: *falco_rules.yaml* and *falco_rules.local.yaml*.
    In addition, it mounts the *rules.d* directory, which you can use to extend the
    ruleset with no changes to the command line or to the configuration file.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Falco 加载了两个这些文件：*falco_rules.yaml* 和 *falco_rules.local.yaml*。此外，它挂载了
    *rules.d* 目录，您可以使用它来扩展规则集，而无需更改命令行或配置文件。
- en: Anatomy of a Falco Rules File
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Falco 规则文件的解剖
- en: 'Now that you know what a rules file looks like from the outside, it’s time
    to learn what’s inside it. The YAML in a rules file can contain three different
    types of nodes: *rules*, *macros*, and *lists*. Let’s take a look at what these
    constructs are and the roles they play in rules files.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经从外部了解了规则文件的外观，是时候了解其中的内容了。规则文件中的 YAML 可以包含三种不同类型的节点：*rules*、*macros* 和
    *lists*。让我们看看这些结构是什么，以及它们在规则文件中扮演的角色。
- en: Rules
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则
- en: 'A rule declares a Falco detection. You’ve seen several examples in the previous
    chapters, but as a reminder, a rule has two main purposes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 规则声明了 Falco 检测。在前几章中你已经看到了几个例子，但作为提醒，规则有两个主要目的：
- en: Declare a condition that, when met, will cause the user to be notified
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个条件，当满足时将通知用户
- en: Define the output message that will be reported to the user when the condition
    is met
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义条件满足时向用户报告的输出消息
- en: 'Here’s an example rule, borrowed from [Chapter 6](ch06.xhtml#fields_and_filters):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子规则，来自[第6章](ch06.xhtml#fields_and_filters)：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This rule notifies us every time there is an attempt to change the permissions
    of a file to make it executable by another user.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当有尝试更改文件权限使其可被其他用户执行时，此规则将通知我们。
- en: As you can see in the preceding example, a rule contains several keys. Some
    of the keys are required, while others are optional. [Table 7-2](#rule_fieldss)
    contains a comprehensive list of the fields that you can use in a rule.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的例子中看到的那样，一个规则包含多个键。一些键是必需的，而其他一些是可选的。[表 7-2](#rule_fieldss)包含您可以在规则中使用的字段的详尽列表。
- en: Table 7-2\. Rule fields
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-2\. 规则字段
- en: '| Key | Required | Description |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `rule` | Yes | A short sentence describing the rule and uniquely identifying
    it. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `rule` | 是 | 描述规则并唯一标识它的简短句子。 |'
- en: '| `desc` | Yes | A longer description that describes in more detail what the
    rule detects. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `desc` | 是 | 更详细地描述规则检测内容的长描述。 |'
- en: '| `condition` | Yes | The rule condition. This is a filter expression, with
    the syntax described in [Chapter 6](ch06.xhtml#fields_and_filters), specifying
    the condition that needs to be met in order for the rule to trigger. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `condition` | Yes | 规则条件。这是一个过滤表达式，在 [第 6 章](ch06.xhtml#fields_and_filters)
    中描述了语法，指定触发规则所需满足的条件。 |'
- en: '| `output` | Yes | A `printf`-like message that is emitted by Falco when the
    rule triggers. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `output` | Yes | Falco 触发规则时发出的类似 `printf` 的消息。 |'
- en: '| `priority` | Yes | The priority of the alert generated when the rule is triggered.
    Falco uses syslog-style priorities and therefore accepts the following values
    for this key: `EMERGENCY`, `ALERT`, `CRITICAL`, `ERROR`, `WARNING`, `NOTICE`,
    `INFORMATIONAL`, and `DEBUG`. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `priority` | Yes | 规则触发时生成的警报的优先级。Falco 使用类似 syslog 的优先级，因此此键接受以下值：`EMERGENCY`、`ALERT`、`CRITICAL`、`ERROR`、`WARNING`、`NOTICE`、`INFORMATIONAL`
    和 `DEBUG`。 |'
- en: '| `source` | No | The data source to which the rule should be applied. If this
    key is not present, the source is assumed to be `syscall`. Each plugin defines
    its own source type that can be used as the value for this key. For example, use
    `aws_cloudtrail` for rules that contain conditions/outputs based on the CloudTrail
    plugin fields. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `source` | No | 应用规则的数据源。如果不存在此键，则假定源为 `syscall`。每个插件定义其自己的源类型，可以用作此键的值。例如，对于包含基于
    CloudTrail 插件字段的条件/输出的规则，请使用 `aws_cloudtrail`。 |'
- en: '| `enabled` | No | A Boolean key that can optionally be used to disable a rule.
    Disabled rules are not loaded by the engine and don’t require any resources when
    Falco is running. If this key is missing, `enabled` is assumed to be `true`. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `enabled` | No | 可以选择禁用规则的布尔键。禁用的规则在引擎中不加载，并且在 Falco 运行时不需要任何资源。如果缺少此键，则假定
    `enabled` 为 `true`。'
- en: '| `tags` | No | A list of tags that are associated with this rule. Tags have
    multiple uses, including easily selecting which rules to load and categorizing
    the alerts that Falco generates. We’ll talk about tags later in this chapter.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `tags` | No | 与该规则相关联的标签列表。标签有多种用途，包括轻松选择要加载的规则和分类 Falco 生成的警报。我们将在本章后面讨论标签。
    |'
- en: '| `warn_evttypes` | No | When set to `false`, this flag disables warnings about
    missing event type checks for this rule. When Falco loads a rule, in addition
    to validating its syntax, it runs a number of checks to make sure that the rule
    meets basic performance criteria. If you know what you are doing and you specifically
    want to craft a rule that doesn’t meet such criteria, this flag will prevent Falco
    from complaining. By default, the value of this flag is `true`. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `warn_evttypes` | No | 当设置为 `false` 时，此标志禁用有关此规则缺少事件类型检查的警告。当 Falco 加载规则时，除了验证其语法外，还会运行多个检查以确保规则符合基本性能标准。如果您知道自己在做什么，并且特别想创建一个不符合此类标准的规则，此标志将阻止
    Falco 抱怨。默认情况下，此标志的值为 `true`。 |'
- en: '| `skip-if-unknown-filter` | No | Setting this flag to `true` causes Falco
    to silently skip this rule if the field is not accepted by the current version
    of the rule engine. If this flag is not set or set to `false`, Falco will print
    an error and exit when it encounters a rule that cannot be parsed. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `skip-if-unknown-filter` | No | 如果将此标志设置为 `true`，则使 Falco 在当前版本的规则引擎不接受字段时，静默跳过此规则。如果未设置此标志或设置为
    `false`，当遇到无法解析的规则时，Falco 将打印错误并退出。 |'
- en: The key fields in the rule are `condition` and `output`. [Chapter 6](ch06.xhtml#fields_and_filters)
    talks about them extensively, so if you haven’t done so yet, we recommend that
    you consult that chapter for an overview.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 规则中的关键字段是 `condition` 和 `output`。[第 6 章](ch06.xhtml#fields_and_filters) 对它们进行了广泛讨论，因此如果您尚未这样做，我们建议您参考该章节以获取概述。
- en: Macros
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: 'Macros are heavily used in the default Falco ruleset. They make it possible
    to “separate” portions of rules into independent and reusable entities. You can
    think of a macro as a piece of a condition that has been separated out and can
    be referenced by name. To explore this concept, let’s go back to the previous
    example and try to modularize it using a macro:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认 Falco 规则集中广泛使用宏。它们使得将规则的部分分离为独立且可重复使用的实体成为可能。您可以将宏视为已分离并可以按名称引用的条件片段。为了探索这个概念，让我们回到前面的示例，并尝试使用宏来模块化它：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Take a look at the condition: we match the event type against three different
    system calls because, well, the kernel offers three different system calls to
    change file permissions. In practice, these three system calls are all flavors
    of [`chmod`](https://oreil.ly/qAdBA), with essentially the same arguments to check.
    We can make the same condition easier to read by isolating this complexity into
    a macro:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下条件：我们将事件类型与三种不同的系统调用进行匹配，因为内核提供了三种不同的系统调用来更改文件权限。实际上，这三种系统调用都是 [`chmod`](https://oreil.ly/qAdBA)
    的变体，基本上使用相同的参数来检查。我们可以通过将这种复杂性隔离到宏中，使得相同的条件更易读：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note how the condition is much shorter and more readable. In addition, now we
    can reuse the `chmod` macro in other rules, simplifying all of them and making
    them consistent. Even more importantly, if we ever want to add another `chmod`
    system call that Falco should inspect, we have only one place to change (the macro)
    instead of multiple rules.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意条件现在更短更易读。此外，现在我们可以在其他规则中重用 `chmod` 宏，简化所有规则并使它们保持一致。更重要的是，如果我们想要添加另一个 Falco
    应检查的 `chmod` 系统调用，我们只需更改一个地方（即宏），而不是多个规则。
- en: Macros help us keep our rulesets clean, modular, and maintainable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 宏帮助我们保持规则集的清洁、模块化和可维护性。
- en: Lists
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: Like macros, lists are heavily used in Falco’s default ruleset. Lists are collections
    of items that can be included from other parts of the ruleset. For example, lists
    can be included by rules, by macros, and even by other lists. The difference between
    a macro and a list is that the former is actually a condition and is parsed as
    a filtering expression. Lists, on the other hand, are more akin to arrays in a
    programming language.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 类似宏一样，在 Falco 的默认规则集中大量使用列表。列表是可以从规则集的其他部分包含的项目集合。例如，列表可以被规则、宏甚至其他列表包含。宏和列表的区别在于前者实际上是一个条件，并且被解析为过滤表达式。另一方面，列表更类似于编程语言中的数组。
- en: 'Continuing with the previous example, an even better way to write it is the
    following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前面的例子，更好的写法如下：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What’s different this time? First, we’ve changed the `chmod` macro to use the
    `in` operator instead of doing three separate comparisons. This not only is more
    efficient, but it also gives us the opportunity to separate out the three system
    calls into a list. The list approach is great for rule maintenance because it
    allows us to isolate only the values into an array-like representation that is
    clear and compact and can easily be overridden if necessary (more on list overriding
    in [Chapter 13](ch13.xhtml#writing_falco_rules)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这次有何不同？首先，我们已将 `chmod` 宏更改为使用 `in` 运算符而不是进行三个单独的比较。这不仅更高效，还让我们有机会将三个系统调用分离到一个列表中。列表方法非常适合规则维护，因为它允许我们将值隔离到类似数组的表示中，清晰紧凑，如果需要可以轻松覆盖（有关列表覆盖的更多信息，请参阅
    [第13章](ch13.xhtml#writing_falco_rules)）。
- en: Rule Tagging
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则标记
- en: '*Tagging* is the concept of assigning labels to rules. If you are familiar
    with modern cloud computing environments like AWS or Kubernetes, you know that
    they let you attach labels to resources. Doing that lets you manage those resources
    more easily, as groups instead of individuals. Tagging brings the same philosophy
    to Falco rules: it lets you treat rules as cattle instead of pets.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*标签* 是将标签分配给规则的概念。如果您熟悉像 AWS 或 Kubernetes 这样的现代云计算环境，您就知道它们允许您向资源附加标签。这样做可以让您更轻松地管理这些资源，作为组而不是个体。标签将相同的理念带入到
    Falco 规则中：它允许您像对待牲畜而不是宠物一样处理规则。'
- en: 'This, for example, is a rule in the default Falco ruleset:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是默认 Falco 规则集中的一条规则：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note how the rule has several tags, some indicating what the rule applies to
    (e.g., `container`) and others mapping it to compliance frameworks like CIS and
    MITRE ATT&CK.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意规则有多个标签，有些标签指示规则适用于什么（例如，`container`），而其他标签将其映射到合规框架，如 CIS 和 MITRE ATT&CK。
- en: 'Falco lets you use tags to control which rules are loaded. This is done through
    two command-line flags, `-T` and `-t`. Here’s how it works:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 允许您使用标签控制加载哪些规则。这通过两个命令行标志 `-T` 和 `-t` 实现。操作方法如下：
- en: 'Use `-T` to disable rules with a specific tag. For example, to skip all rules
    with the `k8s` and `cis` tags, you can run Falco like this:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `-T` 禁用具有特定标签的规则。例如，要跳过所有具有 `k8s` 和 `cis` 标签的规则，可以这样运行 Falco：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use `-t` for the opposite purpose; i.e., to only run the rules that have the
    specified tag. For example, to only run the rules with the `k8s` and `cis` tags,
    you can use the following command line:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `-t` 实现相反的目的；即仅运行具有指定标签的规则。例如，要仅运行具有 `k8s` 和 `cis` 标签的规则，可以使用以下命令行：
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Both `-T` and `-t` can be specified multiple times on the command line.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`-T` 和 `-t` 都可以在命令行上指定多次。'
- en: You can use any tags you want to decorate your rules. However, the default ruleset
    is standardized on a coherent set of tags. [Table 7-3](#default_rule_tags) shows
    what this standard set of tags is, according to the official Falco documentation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何你想要的标签来装饰你的规则。但是，默认规则集是基于一个统一的标签集合进行标准化的。根据官方 Falco 文档，[Table 7-3](#default_rule_tags)
    展示了这个标准标签集是什么。
- en: Table 7-3\. Default rule tags
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Table 7-3\. 默认规则标签
- en: '| Tag | Used for |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| Tag | 用途 |'
- en: '| --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `file` | Rules related to reading/writing files and accessing filesystems
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `file` | 与读写文件和访问文件系统相关的规则 |'
- en: '| `software_mgmt` | Rules related to package management (rpm, dpkg, etc.) or
    to installing new software |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `software_mgmt` | 与软件包管理（rpm、dpkg 等）或安装新软件相关的规则 |'
- en: '| `process` | Rules related to processes, command execution, and interprocess
    communication (IPC) |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `process` | 与进程、命令执行和进程间通信（IPC）相关的规则 |'
- en: '| `database` | Rules that have to do with databases |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `database` | 与数据库相关的规则 |'
- en: '| `host` | Rules that apply to virtual and physical machines but *not* to containers
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `host` | 适用于虚拟和物理机器，但*不*适用于容器的规则 |'
- en: '| `shell` | Rules that apply to starting shells and performing shell operations
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `shell` | 适用于启动 shell 和执行 shell 操作的规则 |'
- en: '| `container` | Rules that apply to containers and don’t work for hosts |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `container` | 适用于容器而不适用于主机的规则 |'
- en: '| `k8s` | Rules related to Kubernetes |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `k8s` | 与 Kubernetes 相关的规则 |'
- en: '| `users` | Rules that apply to users, groups, and identity management |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `users` | 适用于用户、组和身份管理的规则 |'
- en: '| `network` | Rules detecting network activity |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `network` | 检测网络活动的规则 |'
- en: '| `cis` | Rules covering portions of the CIS benchmark |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `cis` | 涵盖 CIS 基准的部分规则 |'
- en: '| `mitre_*` | Rules covering the MITRE ATT&CK framework (this is a category
    that includes several tags: `mitre_execution`, `mitre_persistence`, `mitre_privilege_escalation`,
    and so on) |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `mitre_*` | 包含 MITRE ATT&CK 框架的规则（这是一个包括多个标签的类别：`mitre_execution`、`mitre_persistence`、`mitre_privilege_escalation`
    等） |'
- en: Declaring the Expected Engine Version
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明预期的引擎版本
- en: 'If you open a Falco rules file with a text editor, the first line you will
    normally see is a statement that looks like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用文本编辑器打开一个 Falco 规则文件，通常你会看到的第一行是一个类似这样的声明：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Declaring the minimum required engine version is optional, but it’s very important
    because it helps ensure that the version of Falco you are running will properly
    support the rules inside it. Some of the fields used in a ruleset may not exist
    in older versions of Falco, or a rule may require a system call that was added
    only recently. Without correct versioning, a rules file might not load or, even
    worse, it might load but produce incorrect results. If the rules file requires
    an engine version higher than the one supported by Falco, Falco will report an
    error and refuse to start.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 声明最低所需引擎版本是可选的，但非常重要，因为它有助于确保你运行的 Falco 版本能够正确支持其中的规则。规则集中使用的一些字段可能在较旧版本的 Falco
    中不存在，或者某些规则可能需要最近才添加的系统调用。如果版本声明不正确，规则文件可能无法加载，甚至更糟糕的是，可能加载但会产生不正确的结果。如果规则文件需要比
    Falco 支持的版本更高的引擎版本，Falco 将报告错误并拒绝启动。
- en: 'Similarly, rules files can declare the plugin versions they are compatible
    with through the `required_plugin_versions` top-level field. This field is optional
    too; if you don’t include it, no plugin compatibility checks will be performed,
    and you may see similar behavior to that just described. The syntax of `required_plugin_versions`
    is as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，规则文件可以通过 `required_plugin_versions` 顶级字段声明它们兼容的插件版本。这个字段也是可选的；如果你不包含它，将不会执行任何插件兼容性检查，并且你可能会看到与刚刚描述的类似的行为。`required_plugin_versions`
    的语法如下：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Below `required_plugin_versions` you specify a list of objects, each of which
    has two properties: `name` and `version`. If a plugin is loaded and a corresponding
    entry in `required_plugin_versions` is found, then the loaded plugin version must
    be [semver-compatible](https://semver.org) with the `version` property.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `required_plugin_versions` 下面，你需要指定一个对象列表，每个对象都有两个属性：`name` 和 `version`。如果加载了一个插件，并且在
    `required_plugin_versions` 中找到了对应的条目，则加载的插件版本必须与 `version` 属性兼容 [semver-compatible](https://semver.org)。
- en: The default rules files that come prepackaged with Falco are all versioned.
    Don’t forget to do the same in each of your rules files!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 预装的 Falco 默认规则文件都有版本号。别忘了在你的每个规则文件中也这样做！
- en: Replacing, Appending to, and Disabling Rules
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换、追加和禁用规则
- en: Falco comes prepackaged with a rich and constantly growing set of rules that
    covers many important use cases. However, there are many situations where you
    might find it beneficial to customize the default ruleset. For example, you might
    want to decrease the noisiness of some rules, or you might be interested in expanding
    the scope of some of the Falco detections to better match your environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 预装了丰富且不断增长的规则集，涵盖了许多重要的用例。但是，在许多情况下，您可能会发现定制默认规则集会带来好处。例如，您可能希望减少某些规则的噪声，或者您可能对扩展一些Falco检测的范围感兴趣，以更好地匹配您的环境。
- en: One way to approach these situations is to edit the default rules files. An
    important lesson to learn is that you don’t have to do this. Actually, you *shouldn’t*
    do this—Falco offers a more versatile way to customize rules, designed to make
    your changes maintainable and reusable across releases. Let’s take a look at how
    this works.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些情况的一种方法是编辑默认的规则文件。一个重要的教训是，你不必这样做。实际上，你*不应该*这样做——Falco 提供了一种更灵活的方式来定制规则，旨在使您的更改可维护并在发布中重复使用。让我们看看这是如何工作的。
- en: Replacing Macros, Lists, and Rules
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换宏、列表和规则
- en: Replacing a list, macro, or rule is just a matter of redeclaring it. The second
    declaration can be in the same file, or in a separate file that is loaded after
    the one containing the original declaration.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 替换列表、宏或规则只是重新声明它的事情。第二次声明可以在同一文件中，也可以在加载原始声明文件之后的另一个文件中。
- en: 'Let’s see how this works through an example. The following rule detects if
    a text editor has been opened as root (which, as we all know, people should avoid
    doing):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来看看这是如何工作的。以下规则检测文本编辑器是否已作为root打开（正如我们都知道的那样，人们应该避免这样做）：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we save this rule in a rules file called *rulefile.yaml*, we can test the
    rule by loading the file in Falco:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此规则保存在名为 *rulefile.yaml* 的规则文件中，我们可以通过在Falco中加载该文件来测试规则：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The rule will trigger every time we run vi or nano as root.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们以root身份运行vi或nano时，规则都会触发。
- en: 'Now say we want to change the rule to support a different set of text editors.
    We can create a second rules file, name it *editors.yaml*, and populate it in
    the following way:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想要更改规则以支持不同的文本编辑器集合。我们可以创建第二个规则文件，命名为 *editors.yaml*，并按以下方式填充它：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note how we redefined the content of the `editors` list, replacing the original
    command names with `emacs` and `subl`. Now we just load *editors.yaml* after the
    original rules file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何重新定义了 `editors` 列表的内容，用 `emacs` 和 `subl` 替换了原始命令名称。现在我们只需在原始规则文件后加载 *editors.yaml*：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Falco will pick up the second definition of `editors` and generate an alert
    when root runs either emacs or subl, but *not* vi or nano. Essentially, we’ve
    replaced the content of the list.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 将接受 `editors` 的第二个定义，并在以root身份运行emacs或subl时生成警报，但*不会*在vi或nano上运行。本质上，我们已经替换了列表的内容。
- en: This trick works exactly the same way with macros and rules as well.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧在宏和规则中的工作方式与列表完全相同。
- en: Appending to Macros, Lists, and Rules
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 追加到宏、列表和规则
- en: 'Let’s stick to the same text editor rule example. This time, however, suppose
    we want to *append* additional names to the list of editors instead of replacing
    the full list. The mechanism is the same, but with the addition of the `append`
    keyword. Here is the syntax:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用相同的文本编辑器规则示例。但是这次，假设我们想要在编辑器列表中*追加*其他名称，而不是完全替换整个列表。机制是相同的，但增加了`append`关键字。以下是语法：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can save this list in a file named *additional_editors.yaml*. Now, if we
    run the following command line:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此列表保存在名为 *additional_editors.yaml* 的文件中。现在，如果我们运行以下命令行：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Falco will detect root execution of vi, nano, emacs, and subl.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 将检测到 vi、nano、emacs 和 subl 的根执行。
- en: 'You can append (using the same syntax) to macros and rules as well. However,
    there are a couple of things to keep in mind:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以（使用相同的语法）追加到宏和规则。但是，有几件事情需要牢记：
- en: For rules, it is only possible to append to the condition. Attempts to append
    to other keys, like `output`, will be ignored.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于规则，只能追加到条件。尝试追加到其他键，如`output`，将被忽略。
- en: Remember that appending to a condition just attaches the new text at the end
    of it, so be careful about ambiguities.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住，追加到条件只是将新文本附加到其末尾，所以要注意歧义。
- en: 'For example, suppose we extended the rule condition in our example by appending
    to it like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们通过追加条件来扩展我们示例中的规则，如下所示：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The full rule condition would become:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的规则条件将变为：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This condition is clearly ambiguous. Will the rule trigger only whenever the
    user root or loris opens a text editor? Or will it trigger when root opens a text
    editor and when loris executes *any* command? To avoid such ambiguities, and to
    make your rules files more readable, you can use parentheses in the original conditions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个条件显然是模棱两可的。当用户`root`或`loris`打开文本编辑器时，规则会触发吗？还是说只有当`root`打开文本编辑器，并且`loris`执行*任何*命令时才会触发？为了避免这种歧义，并使您的规则文件更易读，您可以在原始条件中使用括号。
- en: Disabling Rules
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用规则
- en: 'You will often encounter situations where you need to disable one or more rules
    in a ruleset, for example because they are too noisy or they are just not relevant
    for your environment. Falco provides different ways to do this. We are going to
    cover two of them: using the command line and overriding the `enabled` flag.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您经常会遇到需要禁用规则集中一个或多个规则的情况，例如因为它们太嘈杂或者对您的环境来说不相关。Falco提供了不同的方法来执行此操作。我们将涵盖其中的两种方法：使用命令行和覆盖`enabled`标志。
- en: Disabling rules from the command line
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从命令行禁用规则
- en: 'Falco actually offers two separate ways to disable rules via the command line.
    The first one, which we discussed when talking about rule tagging earlier in this
    chapter, involves using the `-T` flag. As a refresher, you can use `-T` to disable
    rules with the given tag. `-T` can be used multiple times on the command line
    to disable multiple tags. For example, to skip all rules with either the `k8s`
    tag, the `cis` tag, or both, you can run Falco like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Falco提供了两种通过命令行禁用规则的方法。第一种方法，在本章前面讨论规则标记时已经提到，涉及使用`-T`标志。作为复习，您可以使用`-T`来禁用具有给定标记的规则。可以在命令行上多次使用`-T`来禁用多个标记。例如，要跳过所有具有`k8s`标记、`cis`标记或两者都有的规则，可以像这样运行Falco：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The second way to disable rules from the command line is by using the `-D` flag.
    `-D *<substring>*` disables all the rules that include `*<substring>*` in their
    name. Similarly to `-T`, `-D` can be specified multiple times with different arguments.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行禁用规则的第二种方式是使用`-D`标志。`-D *<substring>*`会禁用所有名称中包含`*<substring>*`的规则。与`-T`类似，`-D`可以多次使用，并带有不同的参数。
- en: These parameters can also be specified as a Helm chart value (`extraArgs`) if
    you are deploying Falco via the official Helm chart.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过官方Helm图表部署Falco，则可以将这些参数指定为Helm图表值（`extraArgs`）。
- en: Disabling rules by overriding the enabled flag
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过覆盖`enabled`标志禁用规则
- en: 'You might remember from [Table 7-2](#rule_fieldss) that one of the optional
    rule fields is called `enabled`. As a refresher, here’s how we documented it earlier
    in the chapter:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得在[表 7-2](#rule_fieldss)中提到的一个可选规则字段叫做`enabled`。作为复习，这是我们在本章前面对其进行文档化的方式：
- en: A Boolean key that can optionally be used to disable a rule. Disabled rules
    are not loaded by the engine and don’t require any resources when Falco is running.
    If this key is missing, `enabled` is assumed to be `true`.
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可选地用于禁用规则的布尔键。禁用的规则在引擎加载时不会被加载，并且在运行Falco时不需要任何资源。如果缺少此键，则假定`enabled`为`true`。
- en: '`enabled` can be turned on or off by overriding the rule with the usual mechanism.
    For example, if you want to disable the *User mgmt binaries* rule in */etc/falco/falco_rules.yaml*,
    you can add the following content in */etc/falco/falco_rules.local.yaml*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过常规机制将`enabled`打开或关闭，来覆盖规则。例如，如果您想在*/etc/falco/falco_rules.yaml*中禁用*用户管理二进制规则*，可以在*/etc/falco/falco_rules.local.yaml*中添加以下内容：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Conclusion
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: You see, it wasn’t that hard! At this point, you should be able to read and
    understand Falco rules, and you are much closer to being able to write your own.
    We’ll focus on rule writing in [Part IV](part04.xhtml#iv_extending_falco) of the
    book, and in particular in [Chapter 13](ch13.xhtml#writing_falco_rules). Our next
    step will be learning everything about Falco outputs.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 看，这并不难！在这一点上，您应该能够阅读并理解Falco规则，并且离编写自己的规则更近了一步。我们将在书的[第四部分](part04.xhtml#iv_extending_falco)中重点讨论规则编写，特别是在[第13章](ch13.xhtml#writing_falco_rules)中。我们的下一步将是全面了解Falco输出。
