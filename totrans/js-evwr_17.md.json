["```\nimport React, { useEffect } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nconst NewNote = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'New Note — Notedly';\n  });\n\n  return <div>New note</div>;\n};\n\nexport default NewNote;\n```", "```\n// import the NewNote route component\nimport NewNote from './new';\n\n// add a private route to our list of routes, within the\n<PrivateRoute path=\"/new\" component={NewNote} />\n```", "```\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Button from './Button';\n\nconst Wrapper = styled.div`\n height: 100%;\n`;\n\nconst Form = styled.form`\n height: 100%;\n`;\n\nconst TextArea = styled.textarea`\n width: 100%;\n height: 90%;\n`;\n\nconst NoteForm = props => {\n  // set the default state of the form\n  const [value, setValue] = useState({ content: props.content || '' });\n\n  // update the state when a user types in the form\n  const onChange = event => {\n    setValue({\n      ...value,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Form\n        onSubmit={e => {\n          e.preventDefault();\n          props.action({\n            variables: {\n              ...values\n            }\n          });\n        }}\n      >\n        <TextArea\n          required\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"Note content\"\n          value={value.content}\n          onChange={onChange}\n        />\n        <Button type=\"submit\">Save</Button>\n      </Form>\n    </Wrapper>\n  );\n};\n\nexport default NoteForm;\n```", "```\nimport React, { useEffect } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n// import the NoteForm component\nimport NoteForm from '../components/NoteForm';\n\nconst NewNote = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'New Note — Notedly';\n  });\n\n  return <NoteForm />;\n};\nexport default NewNote;\n```", "```\nimport React, { useEffect } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nimport NoteForm from '../components/NoteForm';\n\n// our new note query\nconst NEW_NOTE = gql`\n mutation newNote($content: String!) {\n newNote(content: $content) {\n id\n content\n createdAt\n favoriteCount\n favoritedBy {\n id\n username\n }\n author {\n username\n id\n }\n }\n }\n`;\n\nconst NewNote = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'New Note — Notedly';\n  });\n\n  const [data, { loading, error }] = useMutation(NEW_NOTE, {\n    onCompleted: data => {\n      // when complete, redirect the user to the note page\n      props.history.push(`note/${data.newNote.id}`);\n    }\n  });\n\n  return (\n    <React.Fragment>\n      {/* as the mutation is loading, display a loading message*/}\n      {loading && <p>Loading...</p>}\n      {/* if there is an error, display a error message*/}\n      {error && <p>Error saving the note</p>}\n      {/* the form component, passing the mutation data as a prop */}\n      <NoteForm action={data} />\n    </React.Fragment>\n  );\n};\n\nexport default NewNote;\n```", "```\nimport { gql } from '@apollo/client';\n\nconst GET_NOTES = gql`\n query noteFeed($cursor: String) {\n noteFeed(cursor: $cursor) {\n cursor\n hasNextPage\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n\nconst GET_NOTE = gql`\n query note($id: ID!) {\n note(id: $id) {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n`;\n\nconst IS_LOGGED_IN = gql`\n {\n isLoggedIn @client\n }\n`;\n\nexport { GET_NOTES, GET_NOTE, IS_LOGGED_IN };\n```", "```\n// import the query\nimport { GET_NOTES } from '../gql/query';\n\n// within the NewNote component update the mutation\n//everything else stays the same\n\nconst NewNote = props => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'New Note — Notedly';\n  });\n\n  const [data, { loading, error }] = useMutation(NEW_NOTE, {\n    // refetch the GET_NOTES query to update the cache\n    refetchQueries: [{ query: GET_NOTES }],\n    onCompleted: data => {\n      // when complete, redirect the user to the note page\n      props.history.push(`note/${data.newNote.id}`);\n    }\n  });\n\n  return (\n    <React.Fragment>\n      {/* as the mutation is loading, display a loading message*/}\n      {loading && <p>Loading...</p>}\n      {/* if there is an error, display a error message*/}\n      {error && <p>Error saving the note</p>}\n      {/* the form component, passing the mutation data as a prop */}\n      <NoteForm action={data} />\n    </React.Fragment>\n  );\n};\n```", "```\n<li>\n  <Link to=\"/new\">New</Link>\n</li>\n```", "```\n// add the GET_MY_NOTES query\nconst GET_MY_NOTES = gql`\n query me {\n me {\n id\n username\n notes {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n\n// update to include GET_MY_NOTES\nexport { GET_NOTES, GET_NOTE, IS_LOGGED_IN, GET_MY_NOTES };\n```", "```\nimport React, { useEffect } from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nimport NoteFeed from '../components/NoteFeed';\nimport { GET_MY_NOTES } from '../gql/query';\n\nconst MyNotes = () => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'My Notes — Notedly';\n  });\n\n  const { loading, error, data } = useQuery(GET_MY_NOTES);\n\n  // if the data is loading, our app will display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return `Error! ${error.message}`;\n  // if the query is successful and there are notes, return the feed of notes\n  // else if the query is successful and there aren't notes, display a message\n  if (data.me.notes.length !== 0) {\n    return <NoteFeed notes={data.me.notes} />;\n  } else {\n    return <p>No notes yet</p>;\n  }\n};\n\nexport default MyNotes;\n```", "```\n// add the GET_MY_FAVORITES query\nconst GET_MY_FAVORITES = gql`\n query me {\n me {\n id\n username\n favorites {\n id\n createdAt\n content\n favoriteCount\n author {\n username\n id\n avatar\n }\n }\n }\n }\n`;\n\n// update to include GET_MY_FAVORITES\nexport { GET_NOTES, GET_NOTE, IS_LOGGED_IN, GET_MY_NOTES, GET_MY_FAVORITES };\n```", "```\nimport React, { useEffect } from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nimport NoteFeed from '../components/NoteFeed';\n// import the query\nimport { GET_MY_FAVORITES } from '../gql/query';\n\nconst Favorites = () => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'Favorites — Notedly';\n  });\n\n  const { loading, error, data } = useQuery(GET_MY_FAVORITES);\n\n  // if the data is loading, our app will display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return `Error! ${error.message}`;\n  // if the query is successful and there are notes, return the feed of notes\n  // else if the query is successful and there aren't notes, display a message\n  if (data.me.favorites.length !== 0) {\n    return <NoteFeed notes={data.me.favorites} />;\n  } else {\n    return <p>No favorites yet</p>;\n  }\n};\n\nexport default Favorites;\n```", "```\nimport { GET_MY_NOTES, GET_NOTES } from '../gql/query';\n```", "```\nconst [data, { loading, error }] = useMutation(NEW_NOTE, {\n  // refetch the GET_NOTES and GET_MY_NOTES queries to update the cache\n  refetchQueries: [{ query: GET_MY_NOTES }, { query: GET_NOTES }],\n  onCompleted: data => {\n    // when complete, redirect the user to the note page\n    props.history.push(`note/${data.newNote.id}`);\n  }\n});\n```", "```\nimport React from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\n\n// import the Note component\nimport Note from '../components/Note';\n// import the GET_NOTE query\nimport { GET_NOTE } from '../gql/query';\n\nconst EditNote = props => {\n  // store the id found in the url as a variable\n  const id = props.match.params.id;\n  // define our note query\n  const { loading, error, data } = useQuery(GET_NOTE, { variables: { id } });\n\n  // if the data is loading, display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error! Note not found</p>;\n  // if successful, pass the data to the note component\n  return <Note note={data.note} />;\n};\n\nexport default EditNote;\n```", "```\n// import the edit page component\nimport EditNote from './edit';\n\n// add a new private route that accepts an :id parameter\n<PrivateRoute path=\"/edit/:id\" component={EditNote} />\n```", "```\n// import the NoteForm component\nimport NoteForm from '../components/NoteForm';\n```", "```\n// add GET_ME to our queries\nconst GET_ME = gql`\n query me {\n me {\n id\n favorites {\n id\n }\n }\n }\n`;\n\n// update to include GET_ME\nexport {\n  GET_NOTES,\n  GET_NOTE,\n  GET_MY_NOTES,\n  GET_MY_FAVORITES,\n  GET_ME,\n  IS_LOGGED_IN\n};\n```", "```\nimport React from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\n\n// import the NoteForm component\nimport NoteForm from '../components/NoteForm';\nimport { GET_NOTE, GET_ME } from '../gql/query';\nimport { EDIT_NOTE } from '../gql/mutation';\n\nconst EditNote = props => {\n  // store the id found in the url as a variable\n  const id = props.match.params.id;\n  // define our note query\n  const { loading, error, data } = useQuery(GET_NOTE, { variables: { id } });\n  // fetch the current user's data\n  const { data: userdata } = useQuery(GET_ME);\n  // if the data is loading, display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error! Note not found</p>;\n  // if the current user and the author of the note do not match\n  if (userdata.me.id !== data.note.author.id) {\n    return <p>You do not have access to edit this note</p>;\n  }\n  // pass the data to the form component\n  return <NoteForm content={data.note.content} />;\n};\n```", "```\nimport { gql } from '@apollo/client';\n\nconst EDIT_NOTE = gql`\n mutation updateNote($id: ID!, $content: String!) {\n updateNote(id: $id, content: $content) {\n id\n content\n createdAt\n favoriteCount\n favoritedBy {\n id\n username\n }\n author {\n username\n id\n }\n }\n }\n`;\n\nexport { EDIT_NOTE };\n```", "```\n// import the mutation\nimport { EDIT_NOTE } from '../gql/mutation';\n\nconst EditNote = props => {\n  // store the id found in the url as a variable\n  const id = props.match.params.id;\n  // define our note query\n  const { loading, error, data } = useQuery(GET_NOTE, { variables: { id } });\n  // fetch the current user's data\n  const { data: userdata } = useQuery(GET_ME);\n  // define our mutation\n  const [editNote] = useMutation(EDIT_NOTE, {\n    variables: {\n      id\n    },\n    onCompleted: () => {\n      props.history.push(`/note/${id}`);\n    }\n  });\n\n  // if the data is loading, display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n  // if the current user and the author of the note do not match\n  if (userdata.me.id !== data.note.author.id) {\n    return <p>You do not have access to edit this note</p>;\n  }\n\n  // pass the data and mutation to the form component\n  return <NoteForm content={data.note.content} action={editNote} />;\n};\n\nexport default EditNote;\n```", "```\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Link } from 'react-router-dom';\n\nconst NoteUser = props => {\n  return <Link to={`/edit/${props.note.id}`}>Edit</Link>;\n};\n\nexport default NoteUser;\n```", "```\nimport { useQuery } from '@apollo/client';\n\n// import logged in user UI components\nimport NoteUser from './NoteUser';\n// import the IS_LOGGED_IN local query\nimport { IS_LOGGED_IN } from '../gql/query';\n```", "```\nconst Note = ({ note }) => {\n  const { loading, error, data } = useQuery(IS_LOGGED_IN);\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n\n  return (\n    <StyledNote>\n      <MetaData>\n        <MetaInfo>\n          <img\n            src={note.author.avatar}\n            alt={`${note.author.username} avatar`}\n            height=\"50px\"\n          />\n        </MetaInfo>\n        <MetaInfo>\n          <em>by</em> {note.author.username} <br />\n          {format(note.createdAt, 'MMM Do YYYY')}\n        </MetaInfo>\n        {data.isLoggedIn ? (\n          <UserActions>\n            <NoteUser note={note} />\n          </UserActions>\n        ) : (\n          <UserActions>\n            <em>Favorites:</em> {note.favoriteCount}\n          </UserActions>\n        )}\n      </MetaData>\n      <ReactMarkdown source={note.content} />\n    </StyledNote>\n  );\n};\n```", "```\nimport React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\n\n// import our GET_ME query\nimport { GET_ME } from '../gql/query';\n\nconst NoteUser = props => {\n  const { loading, error, data } = useQuery(GET_ME);\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n  return (\n    <React.Fragment>\n      Favorites: {props.note.favoriteCount}\n      <br />\n      {data.me.id === props.note.author.id && (\n        <React.Fragment>\n          <Link to={`/edit/${props.note.id}`}>Edit</Link>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default NoteUser;\n```", "```\nimport React from 'react';\nimport { useMutation } from '@apollo/client';\nimport { withRouter } from 'react-router-dom';\n\nimport ButtonAsLink from './ButtonAsLink';\n\nconst DeleteNote = props => {\n  return <ButtonAsLink>Delete Note</ButtonAsLink>;\n};\n\nexport default withRouter(DeleteNote);\n```", "```\nconst DELETE_NOTE = gql`\n mutation deleteNote($id: ID!) {\n deleteNote(id: $id)\n }\n`;\n\n// update to include DELETE_NOTE\nexport { EDIT_NOTE, DELETE_NOTE };\n```", "```\nimport React from 'react';\nimport { useMutation } from '@apollo/client';\nimport { withRouter } from 'react-router-dom';\n\nimport ButtonAsLink from './ButtonAsLink';\n// import the DELETE_NOTE mutation\nimport { DELETE_NOTE } from '../gql/mutation';\n// import queries to refetch after note deletion\nimport { GET_MY_NOTES, GET_NOTES } from '../gql/query';\n\nconst DeleteNote = props => {\n  const [deleteNote] = useMutation(DELETE_NOTE, {\n    variables: {\n      id: props.noteId\n    },\n    // refetch the note list queries to update the cache\n    refetchQueries: [{ query: GET_MY_NOTES, GET_NOTES }],\n    onCompleted: data => {\n      // redirect the user to the \"my notes\" page\n      props.history.push('/mynotes');\n    }\n  });\n\n  return <ButtonAsLink onClick={deleteNote}>Delete Note</ButtonAsLink>;\n};\n\nexport default withRouter(DeleteNote);\n```", "```\nimport React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\n\nimport { GET_ME } from '../gql/query';\n// import the DeleteNote component\nimport DeleteNote from './DeleteNote';\n\nconst NoteUser = props => {\n  const { loading, error, data } = useQuery(GET_ME);\n  // if the data is loading, display a loading message\n  if (loading) return <p>Loading...</p>;\n  // if there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n\n  return (\n    <React.Fragment>\n      Favorites: {props.note.favoriteCount} <br />\n      {data.me.id === props.note.author.id && (\n        <React.Fragment>\n          <Link to={`/edit/${props.note.id}`}>Edit</Link> <br />\n          <DeleteNote noteId={props.note.id} />\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default NoteUser;\n```", "```\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport ButtonAsLink from './ButtonAsLink';\n\nconst FavoriteNote = props => {\n  return <ButtonAsLink>Add to favorites</ButtonAsLink>;\n};\n\nexport default FavoriteNote;\n```", "```\nimport FavoriteNote from './FavoriteNote';\n```", "```\nreturn (\n  <React.Fragment>\n    <FavoriteNote\n      me={data.me}\n      noteId={props.note.id}\n      favoriteCount={props.note.favoriteCount}\n    />\n    <br />\n    {data.me.id === props.note.author.id && (\n      <React.Fragment>\n        <Link to={`/edit/${props.note.id}`}>Edit</Link> <br />\n        <DeleteNote noteId={props.note.id} />\n      </React.Fragment>\n    )}\n  </React.Fragment>\n);\n```", "```\nconst FavoriteNote = props => {\n  // store the note's favorite count as state\n  const [count, setCount] = useState(props.favoriteCount);\n\n  // store if the user has favorited the note as state\n  const [favorited, setFavorited] = useState(\n    // check if the note exists in the user favorites list\n    props.me.favorites.filter(note => note.id === props.noteId).length > 0\n  );\n\n  return (\n    <React.Fragment>\n      {favorited ? (\n        <ButtonAsLink\n          onClick={() => {\n            setFavorited(false);\n            setCount(count - 1);\n          }}\n        >\n          Remove Favorite\n        </ButtonAsLink>\n      ) : (\n        <ButtonAsLink\n          onClick={() => {\n            setFavorited(true);\n            setCount(count + 1);\n          }}\n        >\n          Add Favorite\n        </ButtonAsLink>\n      )}\n      : {count}\n    </React.Fragment>\n  );\n};\n```", "```\n// add the TOGGLE_FAVORITE mutation\nconst TOGGLE_FAVORITE = gql`\n mutation toggleFavorite($id: ID!) {\n toggleFavorite(id: $id) {\n id\n favoriteCount\n }\n }\n`;\n\n// update to include TOGGLE_FAVORITE\nexport { EDIT_NOTE, DELETE_NOTE, TOGGLE_FAVORITE };\n```", "```\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport ButtonAsLink from './ButtonAsLink';\n// the TOGGLE_FAVORITE mutation\nimport { TOGGLE_FAVORITE } from '../gql/mutation';\n// add the GET_MY_FAVORITES query to refetch\nimport { GET_MY_FAVORITES } from '../gql/query';\n\nconst FavoriteNote = props => {\n  // store the note's favorite count as state\n  const [count, setCount] = useState(props.favoriteCount);\n\n  // store if the user has favorited the note as state\n  const [favorited, setFavorited] = useState(\n    // check if the note exists in the user favorites list\n    props.me.favorites.filter(note => note.id === props.noteId).length > 0\n  );\n\n  // toggleFavorite mutation hook\n  const [toggleFavorite] = useMutation(TOGGLE_FAVORITE, {\n    variables: {\n      id: props.noteId\n    },\n    // refetch the GET_MY_FAVORITES query to update the cache\n    refetchQueries: [{ query: GET_MY_FAVORITES }]\n  });\n\n  // if the user has favorited the note, display the option to remove the favorite\n  // else, display the option to add as a favorite\n  return (\n    <React.Fragment>\n      {favorited ? (\n        <ButtonAsLink\n          onClick={() => {\n            toggleFavorite();\n            setFavorited(false);\n            setCount(count - 1);\n          }}\n        >\n          Remove Favorite\n        </ButtonAsLink>\n      ) : (\n        <ButtonAsLink\n          onClick={() => {\n            toggleFavorite();\n            setFavorited(true);\n            setCount(count + 1);\n          }}\n        >\n          Add Favorite\n        </ButtonAsLink>\n      )}\n      : {count}\n    </React.Fragment>\n  );\n};\n\nexport default FavoriteNote;\n```"]