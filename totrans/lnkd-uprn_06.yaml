- en: Chapter 6\. The Linkerd CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Linkerd command line interface (CLI) is a useful tool for interacting with
    the Linkerd control plane. The CLI can help you check on the health of a Linkerd
    instance, view details about proxies and certificates, troubleshoot aberrant behavior,
    and view policy. It is the recommended way to directly interface with Linkerd.
    It handles all the major tasks you’ll need to work with your Linkerd installs
    and provides important tools for validating and examining Linkerd.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll cover some of the most useful things the CLI can do and
    illustrate how to take best advantage of it. The CLI is, of course, constantly
    evolving as new Linkerd releases come out, so it’s always important to keep an
    eye on the [official documentation](https://oreil.ly/0GjuM).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CLI is versioned along with the rest of Linkerd, so when you install the
    CLI, you’ll start by choosing which release channel to use.
  prefs: []
  type: TYPE_NORMAL
- en: To install from the stable channel, you’ll refer to the vendor instructions
    (such as those for [Buoyant Enterprise for Linkerd](https://oreil.ly/6apOU)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install completely open source Linkerd from the edge channel, you’ll refer
    to the [Linkerd quickstart](https://oreil.ly/A3Lyl). At the time of this writing,
    that boils down to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In either case, once you install the CLI you’ll need to add it to your `PATH`
    in the appropriate manner for your shell. For example, if you use `bash` you can
    alter the `PATH` variable directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Updating the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To update the CLI, just rerun the installation command. Over time, you’ll end
    up with multiple versions stored locally, and you can choose among them.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Specific Version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Normally, the Linkerd CLI installer (for either channel) will install the most
    recent version of the CLI. You can force it to install a specific version by setting
    the `LINKERD2_VERSION` environment variable when you run the install script. For
    example, using the edge channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Set LINKERD2_VERSION for sh, Not curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pay attention to where the `LINKERD2_VERSION` environment variable is set in
    the preceding command: it needs to be set for the `sh` command executing the script
    that `curl` has downloaded, not for the `curl` command itself. Setting the environment
    variable for `curl` won’t do anything.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate Ways to Install
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re on a Mac, [Homebrew](https://brew.sh) is a simple way to install
    the CLI: just `brew install linkerd`. You can also download the CLI directly from
    the [Linkerd releases page](https://oreil.ly/vcUOa).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CLI works broadly like any other Go CLI, such as `kubectl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `*command*` tells the CLI what exactly you want to do; the `*options*`
    are optional arguments to the specific command. You can always use the `--help`
    option to get help. For instance, `linkerd --help` will tell you what commands
    are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As this output shows, you can also get help on specific commands. For example,
    `linkerd check --help` will get help for the `check` command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Selected Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `linkerd` CLI supports a lot of commands. The [official documentation](https://oreil.ly/M3qdg),
    as always, has the full set; in this chapter, we’re going to summarize some of
    the most broadly useful commands. These are the ones you should always have close
    to hand.
  prefs: []
  type: TYPE_NORMAL
- en: linkerd version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first command to know about is `linkerd version`, which simply reports
    the running version of the `linkerd` CLI and (if possible) of the Linkerd control
    plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t have Linkerd running in your cluster, `linkerd version` will show
    `unavailable` for the server version.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `linkerd version` can’t talk to your cluster, it will treat that as an error.
    You can use the `--client` option to just check the version of the CLI itself,
    without even trying to talk to the cluster, though:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: CLI Versions Versus Control Plane Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s very important to remember that the CLI version is *independent* of the
    control plane version. Some CLI commands are quite complex and do a lot of subtle
    manipulations, so it’s crucial to make sure that your CLI version matches your
    control plane version. A difference of one major version is OK, but more than
    one is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: linkerd check
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `linkerd check` command gives an at-a-glance view of the health of Linkerd
    in your cluster. It will test for many known failure conditions and allow you
    to run extension-specific health checks. This deceptively simple command actually
    offers a lot of powerful tools for validating and checking the current state of
    your mesh.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest—and most complete—way to use `linkerd check` is to run it with
    no arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run a default set of checks that are both reasonably exhaustive and
    finish in a reasonable amount of time, including (in addition to quite a few other
    things):'
  prefs: []
  type: TYPE_NORMAL
- en: Making sure Linkerd is correctly installed in the default namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking that Linkerd’s certificates are valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running checks for all installed extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-checking necessary permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running this command will give you a lot of insight into the current state of
    Linkerd in your cluster, and in fact if you need to file a bug report against
    Linkerd, you will *always* be asked to include the output of `linkerd check`.
  prefs: []
  type: TYPE_NORMAL
- en: linkerd check --pre
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The precheck option runs a set of checks to make sure that your Kubernetes
    environment is ready to have Linkerd installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is the only use of `linkerd check` that does *not* require Linkerd to already
    be installed. The precheck makes sure both that your cluster meets the minimum
    technical requirements to run Linkerd and that you have appropriate permissions
    to perform a core Linkerd install. It is a useful part of preparing to install
    Linkerd on a new cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Precheck and the CNI Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you plan on running Linkerd with the CNI plugin installed, you’ll need to
    run `linkerd check --pre --linkerd-cni-enabled` so that `linkerd check` doesn’t
    try to check for the `NET_ADMIN` capability.
  prefs: []
  type: TYPE_NORMAL
- en: linkerd check --proxy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also tell `linkerd check` to specifically check the data plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The proxy check runs many—though not all—of the checks performed by the basic
    `linkerd check` command. However, it also runs extra checks specific to the data
    plane, such as verifying that Linkerd proxies are running.
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd extension checks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each installed Linkerd extension has its own specific set of checks it will
    run during `linkerd check`. If needed, you can also run *only* the checks for
    a specific extension with `linkerd *extension* check`. For example, this is how
    you’d run only the checks for the Linkerd Viz extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Why Limit Checks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that `linkerd check` with no arguments will run the checks for all
    installed extensions. Limiting checks to a single extension is primarily helpful
    to reduce the amount of time that `linkerd check` takes to run.
  prefs: []
  type: TYPE_NORMAL
- en: Additional options for linkerd check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `linkerd check` command obeys all the global CLI overrides, like changing
    the namespace in which you have Linkerd installed (`--namespace`) or modifying
    your `KUBECONFIG` (`--kubeconfig`) or Kubernetes context (`--context`). Additionally:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--output` allows you to specify the output type, which is useful if you want
    to override the default table output. Options include `json`, `basic`, `short`,
    and `table`. Outputting JSON can be particularly helpful if you intend to consume
    the check data programmatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--wait` overrides the amount of time the checks will wait in the event something
    isn’t right. The default value is 5 minutes, which can be unnecessarily long in
    many cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linkerd inject
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `linkerd inject` command reads Kubernetes resources and outputs new versions
    that have been modified to add the Linkerd proxy container as appropriate. The
    `linkerd inject` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Reads resources from its standard input, from local files, or from an HTTPS
    URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can operate on multiple resources at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knows to modify only Pods and leave other kinds of resources alone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows you to configure the proxies as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputs the modified resources on its standard output, leaving the task of actually
    applying them to you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That last point is worth repeating: `linkerd inject` will never modify any
    of its sources directly. Instead, it outputs the modified Kubernetes resources
    so that you can apply them yourself, include them in a Git repo, or do whatever
    else is appropriate for your environment. This “output, don’t overwrite” idiom
    is common across the entire `linkerd` CLI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `linkerd inject` can be as simple as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As always, you can find more examples and see the full docs by running `linkerd
    inject --help`.
  prefs: []
  type: TYPE_NORMAL
- en: You Must Handle Applying Injected Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important thing to remember about `linkerd inject` is that it does
    not, in and of itself, make any changes to your cluster. You’re always responsible
    for applying the output of the `linkerd` CLI to your cluster yourself, whether
    by simply feeding the output to `kubectl apply`, committing it so that GitOps
    takes over, or something else.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting in ingress mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `--ingress` flag sets the ingress mode annotation for a workload. Before
    setting this flag, or the corresponding annotation, on your ingress, please verify
    that it is required. You can see the [ingress docs](https://oreil.ly/OgAej) for
    more details on ingress mode.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, `linkerd inject` just adds the `linkerd.io/inject` annotation to
    your workload Pods, trusting the proxy injector to do the heavy lifting. Setting
    the `--manual` flag instructs the CLI to add the sidecar container directly to
    your manifest, bypassing the proxy injector.
  prefs: []
  type: TYPE_NORMAL
- en: The `--manual` flag provides a valuable tool for overriding or modifying the
    proxy configuration in the event that you need to control something about the
    proxy that the usual configuration mechanisms don’t support. Be careful when tampering
    with the proxy configuration directly, though, as you can quickly find yourself
    falling out of sync with your overall proxy configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting the debug sidecar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting `--enable-debug-sidecar` will add an annotation to your workload that
    will cause the proxy injector to add an additional debug sidecar to your Pods.
    Before trying to use the debug sidecar, you should definitely read [Chapter 15](ch15.html#LUAR_troubleshooting)
    and the [debug container documentation](https://oreil.ly/CVc6-).
  prefs: []
  type: TYPE_NORMAL
- en: linkerd identity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `linkerd identity` command provides a useful tool for troubleshooting Pod
    certificates. It allows you to see the certificate details of any Pod or Pods;
    for example, here’s how you can get the identity of a Pod belonging to the Linkerd
    destination controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Your Pod Identities Will Be Different
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you try this command, your Pod ID—and the specific certificate information—will
    be different. However, none of the information provided by `linkerd identity`
    is sensitive; it only shows public information. It’s always safe to run.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the output of this command to check the validity of a given Pod
    certificate. It also gives you the details of what authority signed the certificate,
    so you can check that it is signed by the correct intermediary and root CAs.
  prefs: []
  type: TYPE_NORMAL
- en: linkerd diagnostics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `linkerd diagnostics` command is a powerful tool that enables platform operators
    to gather information directly from Linkerd. It will allow you to directly scrape
    details from the metrics endpoints of the various Linkerd components.
  prefs: []
  type: TYPE_NORMAL
- en: This command also allows you to diagnose hard-to-identify conditions, like Linkerd’s
    failfast error, by listing out the endpoints for a given service. Some examples
    are given here; see also the [latest documentation](https://oreil.ly/egNPA) on
    the Linkerd site.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `linkerd diagnostics` command can gather data directly from the metrics
    endpoints of the control plane and data plane. To gather control plane metrics,
    use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To gather metrics data for a given proxy or set of proxies, use a command like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`linkerd diagnostics` produces raw Prometheus metrics, so you’ll need to already
    have a sense of what information you’re looking for if you’re using these commands.
    Also note that the sample output has been truncated for space reasons—these commands
    produce *much* more output than what’s shown here (hundreds of lines, or more,
    is typical).'
  prefs: []
  type: TYPE_NORMAL
- en: Checking for endpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the hardest problems to debug in Linkerd tends to be when the `linkerd2-proxy`
    emits a message indicating it’s in a *failfast* state. The failfast state is discussed
    in more detail in [Chapter 15](ch15.html#LUAR_troubleshooting), but a very common
    reason to land in failfast is that a given service doesn’t have any valid endpoints.
    You can check for this condition with `linkerd diagnostics endpoints`. For example,
    here we examine the endpoints for the `emoji-svc` service of the [emojivoto sample
    application](https://oreil.ly/ZnYsL):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that you must provide the fully qualified DNS name of the service as well
    as a port number. If no valid endpoints are found, `linkerd diagnostics endpoints`
    will report `No endpoints found` and, importantly, requests to the service will
    land in failfast.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnosing policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As of Linkerd 2.13, there is a new `linkerd diagnostics policy` command that
    can provide insight into Linkerd’s advanced routing policy engine. For example,
    you can look at the policy applied to traffic on port 80 of the `smiley` Service
    in the `faces` namespace (as you might find if you’re running the [Faces demo
    application](https://oreil.ly/a4OnB)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The output of `linkerd diagnostics policy` is *extremely* verbose JSON, so it’s
    almost always a good idea to redirect it to a file as we’ve done here (or to `less`,
    `bat`, or a similar tool). You’ll see sections for `http1.1`, `http2`, etc., and
    in each section will be a very detailed—and, again, verbose—breakdown of the policy
    being applied.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, you might see output like that in [Example 6-1](#EX8-plain-policy)
    to describe what will happen to HTTP/2 traffic with no advanced policy applied.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1\. HTTP/2 output block without advanced policy
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, suppose that you apply the HTTPRoute resource shown in [Example 6-2](#EX8-smiley-split)
    to split traffic sent to `smiley` so that half the traffic proceeds to the `smiley`
    workload, and the other half is redirected to `smiley2`. (HTTPRoutes are discussed
    in more detail in [Chapter 9](ch09.html#LUAR_route_policy).)
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-2\. HTTPRoute traffic splitting
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With that HTTPRoute in effect, `linkerd diagnostics policy` might produce an
    `http2` block like the one in [Example 6-3](#EX8-split-policy), showing that traffic
    is indeed being split.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-3\. HTTP/2 output block with traffic splitting
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As Linkerd evolves, this output will change, so take these examples with a grain
    of salt. The point of `linkerd diagnostics policy` is to provide sufficient detail
    that you can understand how Linkerd will manage traffic to a particular workload,
    no matter what changes are made to the source.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `linkerd` CLI provides more than just the tooling you need to install Linkerd.
    It gives you critical operational tools that simplify the process of running Linkerd
    in your clusters. While it’s definitely possible to use Linkerd and never run
    the `linkerd` CLI, the CLI is the most straightforward, effective way to deal
    with many real-world situations.
  prefs: []
  type: TYPE_NORMAL
