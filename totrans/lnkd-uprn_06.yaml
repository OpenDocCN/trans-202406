- en: Chapter 6\. The Linkerd CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章。Linkerd CLI
- en: The Linkerd command line interface (CLI) is a useful tool for interacting with
    the Linkerd control plane. The CLI can help you check on the health of a Linkerd
    instance, view details about proxies and certificates, troubleshoot aberrant behavior,
    and view policy. It is the recommended way to directly interface with Linkerd.
    It handles all the major tasks you’ll need to work with your Linkerd installs
    and provides important tools for validating and examining Linkerd.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 命令行界面（CLI）是与 Linkerd 控制平面进行交互的有用工具。CLI 可以帮助你检查 Linkerd 实例的健康状态，查看有关代理和证书的详细信息，排除异常行为并查看策略。这是直接与
    Linkerd 交互的推荐方式。它处理你需要处理的所有主要任务，并为验证和检查 Linkerd 提供重要工具。
- en: In this chapter, we’ll cover some of the most useful things the CLI can do and
    illustrate how to take best advantage of it. The CLI is, of course, constantly
    evolving as new Linkerd releases come out, so it’s always important to keep an
    eye on the [official documentation](https://oreil.ly/0GjuM).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 CLI 可以执行的一些最有用的操作，并说明如何最好地利用它。当然，随着新的 Linkerd 发布的推出，CLI 当前也在不断发展，因此随时关注[官方文档](https://oreil.ly/0GjuM)是非常重要的。
- en: Installing the CLI
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 CLI
- en: The CLI is versioned along with the rest of Linkerd, so when you install the
    CLI, you’ll start by choosing which release channel to use.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 与 Linkerd 的其他部分一起进行版本管理，因此当你安装 CLI 时，需要选择使用哪个发布通道。
- en: To install from the stable channel, you’ll refer to the vendor instructions
    (such as those for [Buoyant Enterprise for Linkerd](https://oreil.ly/6apOU)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要从稳定通道安装，请参考供应商说明（例如[Linkerd 的 Buoyant Enterprise](https://oreil.ly/6apOU)）。
- en: 'To install completely open source Linkerd from the edge channel, you’ll refer
    to the [Linkerd quickstart](https://oreil.ly/A3Lyl). At the time of this writing,
    that boils down to:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 edge 通道完全安装开源的 Linkerd，你可以参考[Linkerd 快速入门](https://oreil.ly/A3Lyl)。在撰写本文时，操作如下：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In either case, once you install the CLI you’ll need to add it to your `PATH`
    in the appropriate manner for your shell. For example, if you use `bash` you can
    alter the `PATH` variable directly:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，一旦安装了 CLI，你都需要将其以适合你的 shell 的方式添加到 `PATH` 中。例如，如果你使用 `bash`，你可以直接修改 `PATH`
    变量：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Updating the CLI
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 CLI
- en: To update the CLI, just rerun the installation command. Over time, you’ll end
    up with multiple versions stored locally, and you can choose among them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新 CLI，只需重新运行安装命令。随着时间的推移，你会在本地存储多个版本，并可以在它们之间进行选择。
- en: Installing a Specific Version
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装特定版本
- en: 'Normally, the Linkerd CLI installer (for either channel) will install the most
    recent version of the CLI. You can force it to install a specific version by setting
    the `LINKERD2_VERSION` environment variable when you run the install script. For
    example, using the edge channel:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Linkerd CLI 安装程序（任何通道都是如此）将安装最新版本的 CLI。你可以通过设置 `LINKERD2_VERSION` 环境变量来强制安装特定版本，例如，在使用
    edge 通道时：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Set LINKERD2_VERSION for sh, Not curl
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 LINKERD2_VERSION 环境变量来执行 sh 命令，而不是 curl。
- en: 'Pay attention to where the `LINKERD2_VERSION` environment variable is set in
    the preceding command: it needs to be set for the `sh` command executing the script
    that `curl` has downloaded, not for the `curl` command itself. Setting the environment
    variable for `curl` won’t do anything.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在上述命令中设置 `LINKERD2_VERSION` 环境变量的位置：它需要设置为执行 `curl` 下载的脚本的 `sh` 命令，而不是 `curl`
    命令本身。为 `curl` 命令设置环境变量不会起作用。
- en: Alternate Ways to Install
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他安装方式
- en: 'If you’re on a Mac, [Homebrew](https://brew.sh) is a simple way to install
    the CLI: just `brew install linkerd`. You can also download the CLI directly from
    the [Linkerd releases page](https://oreil.ly/vcUOa).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Mac，[Homebrew](https://brew.sh) 是安装 CLI 的简单方法：只需 `brew install linkerd`。你也可以直接从[Linkerd
    发布页面](https://oreil.ly/vcUOa)下载 CLI。
- en: Using the CLI
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CLI
- en: 'The CLI works broadly like any other Go CLI, such as `kubectl`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 的工作方式与任何其他 Go CLI 类似，例如 `kubectl`：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `*command*` tells the CLI what exactly you want to do; the `*options*`
    are optional arguments to the specific command. You can always use the `--help`
    option to get help. For instance, `linkerd --help` will tell you what commands
    are available:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`*command*` 告诉 CLI 你希望做什么；`*options*` 是特定命令的可选参数。你可以随时使用 `--help` 选项获取帮助。例如，`linkerd
    --help` 将告诉你可用的命令：'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As this output shows, you can also get help on specific commands. For example,
    `linkerd check --help` will get help for the `check` command, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个输出所示，你还可以获取特定命令的帮助信息。例如，`linkerd check --help` 将获取 `check` 命令的帮助，如下所示：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Selected Commands
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选定的命令
- en: The `linkerd` CLI supports a lot of commands. The [official documentation](https://oreil.ly/M3qdg),
    as always, has the full set; in this chapter, we’re going to summarize some of
    the most broadly useful commands. These are the ones you should always have close
    to hand.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd` CLI 支持许多命令。正如始终如此的[官方文档](https://oreil.ly/M3qdg)所述，这里我们将总结一些最广泛使用的命令。这些是您应该随时掌握的命令。'
- en: linkerd version
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: linkerd version
- en: 'The first command to know about is `linkerd version`, which simply reports
    the running version of the `linkerd` CLI and (if possible) of the Linkerd control
    plane:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关于了解的第一个命令是 `linkerd version`，它简单地报告 `linkerd` CLI 的运行版本和（如果可能的话）Linkerd 控制平面的版本：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you don’t have Linkerd running in your cluster, `linkerd version` will show
    `unavailable` for the server version.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的集群中没有运行 Linkerd，`linkerd version` 将显示服务器版本为 `unavailable`。
- en: 'If `linkerd version` can’t talk to your cluster, it will treat that as an error.
    You can use the `--client` option to just check the version of the CLI itself,
    without even trying to talk to the cluster, though:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `linkerd version` 无法与您的集群通信，它将将其视为错误。您可以使用 `--client` 选项仅检查 CLI 本身的版本，甚至不尝试与集群通信：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: CLI Versions Versus Control Plane Versions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CLI 版本与控制平面版本的对比
- en: It’s very important to remember that the CLI version is *independent* of the
    control plane version. Some CLI commands are quite complex and do a lot of subtle
    manipulations, so it’s crucial to make sure that your CLI version matches your
    control plane version. A difference of one major version is OK, but more than
    one is not supported.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是记住 CLI 版本与控制平面版本*独立*。一些 CLI 命令非常复杂，进行了许多微妙的操作，因此确保您的 CLI 版本与控制平面版本匹配至关重要。主要版本相差一个版本是可以的，但不支持超过一个版本的差异。
- en: linkerd check
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: linkerd check
- en: The `linkerd check` command gives an at-a-glance view of the health of Linkerd
    in your cluster. It will test for many known failure conditions and allow you
    to run extension-specific health checks. This deceptively simple command actually
    offers a lot of powerful tools for validating and checking the current state of
    your mesh.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd check` 命令提供了一个快速查看集群中 Linkerd 健康状态的视图。它会检测许多已知的失败条件，并允许您运行特定于扩展的健康检查。这个看似简单的命令实际上提供了许多强大的工具，用于验证和检查当前网格的状态。'
- en: 'The simplest—and most complete—way to use `linkerd check` is to run it with
    no arguments:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `linkerd check` 的最简单也是最完整的方法是不带参数地运行它：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will run a default set of checks that are both reasonably exhaustive and
    finish in a reasonable amount of time, including (in addition to quite a few other
    things):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行一组默认检查，既相当详尽，也在合理的时间内完成，包括（除了许多其他事项）：
- en: Making sure Linkerd is correctly installed in the default namespace
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 Linkerd 在默认命名空间中正确安装。
- en: Checking that Linkerd’s certificates are valid
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 Linkerd 证书是否有效
- en: Running checks for all installed extensions
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行所有已安装扩展的检查
- en: Double-checking necessary permissions
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双重检查必要的权限
- en: Running this command will give you a lot of insight into the current state of
    Linkerd in your cluster, and in fact if you need to file a bug report against
    Linkerd, you will *always* be asked to include the output of `linkerd check`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将为您提供有关集群中 Linkerd 当前状态的许多见解，事实上，如果您需要针对 Linkerd 提交 bug 报告，您将*总是*被要求包含
    `linkerd check` 的输出。
- en: linkerd check --pre
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: linkerd check --pre
- en: 'The precheck option runs a set of checks to make sure that your Kubernetes
    environment is ready to have Linkerd installed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 预检选项运行一组检查，确保您的 Kubernetes 环境准备好安装 Linkerd：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the only use of `linkerd check` that does *not* require Linkerd to already
    be installed. The precheck makes sure both that your cluster meets the minimum
    technical requirements to run Linkerd and that you have appropriate permissions
    to perform a core Linkerd install. It is a useful part of preparing to install
    Linkerd on a new cluster.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是唯一使用 `linkerd check` 的情况，**不要求** Linkerd 已经安装。预检查确保您的集群符合运行 Linkerd 的最低技术要求，并且您有执行核心
    Linkerd 安装所需的适当权限。这是准备在新集群上安装 Linkerd 的一个有用步骤。
- en: Precheck and the CNI Plugin
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预检和 CNI 插件
- en: If you plan on running Linkerd with the CNI plugin installed, you’ll need to
    run `linkerd check --pre --linkerd-cni-enabled` so that `linkerd check` doesn’t
    try to check for the `NET_ADMIN` capability.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划安装带有 CNI 插件的 Linkerd，则需要运行 `linkerd check --pre --linkerd-cni-enabled`，以便
    `linkerd check` 不尝试检查 `NET_ADMIN` 权限。
- en: linkerd check --proxy
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: linkerd check --proxy
- en: 'You can also tell `linkerd check` to specifically check the data plane:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以告诉 `linkerd check` 明确检查数据平面：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The proxy check runs many—though not all—of the checks performed by the basic
    `linkerd check` command. However, it also runs extra checks specific to the data
    plane, such as verifying that Linkerd proxies are running.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代理检查运行了基本 `linkerd check` 命令执行的许多检查，但它还运行了特定于数据平面的额外检查，例如验证 Linkerd 代理是否正在运行。
- en: Linkerd extension checks
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linkerd 扩展检查
- en: 'Each installed Linkerd extension has its own specific set of checks it will
    run during `linkerd check`. If needed, you can also run *only* the checks for
    a specific extension with `linkerd *extension* check`. For example, this is how
    you’d run only the checks for the Linkerd Viz extension:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个安装的 Linkerd 扩展都有自己特定的一组检查，它将在 `linkerd check` 运行期间运行。如果需要，你还可以仅针对特定扩展运行检查，例如，你可以仅运行
    Linkerd Viz 扩展的检查：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Why Limit Checks?
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要限制检查？
- en: Remember that `linkerd check` with no arguments will run the checks for all
    installed extensions. Limiting checks to a single extension is primarily helpful
    to reduce the amount of time that `linkerd check` takes to run.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`linkerd check` 不带任何参数将运行所有已安装扩展的检查。将检查限制到单个扩展主要有助于减少 `linkerd check` 运行的时间。
- en: Additional options for linkerd check
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linkerd check` 的附加选项'
- en: 'The `linkerd check` command obeys all the global CLI overrides, like changing
    the namespace in which you have Linkerd installed (`--namespace`) or modifying
    your `KUBECONFIG` (`--kubeconfig`) or Kubernetes context (`--context`). Additionally:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd check` 命令遵循所有全局 CLI 覆盖项，例如更改 Linkerd 安装的命名空间 (`--namespace`)、修改你的
    `KUBECONFIG` (`--kubeconfig`) 或 Kubernetes 上下文 (`--context`)。此外：'
- en: '`--output` allows you to specify the output type, which is useful if you want
    to override the default table output. Options include `json`, `basic`, `short`,
    and `table`. Outputting JSON can be particularly helpful if you intend to consume
    the check data programmatically.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output` 允许你指定输出类型，如果想要覆盖默认的表格输出，这将非常有用。选项包括 `json`、`basic`、`short` 和 `table`。如果打算以程序化方式消费检查数据，输出
    JSON 尤其有帮助。'
- en: '`--wait` overrides the amount of time the checks will wait in the event something
    isn’t right. The default value is 5 minutes, which can be unnecessarily long in
    many cases.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--wait` 可以覆盖检查等待的时间，在出现问题时。默认值为 5 分钟，在许多情况下可能会显得过长。'
- en: linkerd inject
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: linkerd inject
- en: 'The `linkerd inject` command reads Kubernetes resources and outputs new versions
    that have been modified to add the Linkerd proxy container as appropriate. The
    `linkerd inject` command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd inject` 命令读取 Kubernetes 资源并输出已修改以适当添加 Linkerd 代理容器的新版本。`linkerd inject`
    命令：'
- en: Reads resources from its standard input, from local files, or from an HTTPS
    URL
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其标准输入、本地文件或 HTTPS URL 读取资源
- en: Can operate on multiple resources at once
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以同时操作多个资源
- en: Knows to modify only Pods and leave other kinds of resources alone
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道只修改 Pods，并且不会触及其他类型的资源
- en: Allows you to configure the proxies as well
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许你配置代理
- en: Outputs the modified resources on its standard output, leaving the task of actually
    applying them to you
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将修改后的资源输出到标准输出，实际应用它们的任务留给了你
- en: 'That last point is worth repeating: `linkerd inject` will never modify any
    of its sources directly. Instead, it outputs the modified Kubernetes resources
    so that you can apply them yourself, include them in a Git repo, or do whatever
    else is appropriate for your environment. This “output, don’t overwrite” idiom
    is common across the entire `linkerd` CLI.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点值得重申：`linkerd inject` 永远不会直接修改其来源之一。相反，它会输出修改后的 Kubernetes 资源，以便你自行应用它们，将它们包含在
    Git 存储库中，或者根据环境进行其他适当操作。这种“输出而不覆盖”的习惯用语在整个 `linkerd` CLI 中很常见。
- en: 'Using `linkerd inject` can be as simple as:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `linkerd inject` 可以非常简单地进行如下操作：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As always, you can find more examples and see the full docs by running `linkerd
    inject --help`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，你可以通过运行 `linkerd inject --help` 查找更多示例并查看完整文档。
- en: You Must Handle Applying Injected Resources
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你必须处理应用注入的资源
- en: The most important thing to remember about `linkerd inject` is that it does
    not, in and of itself, make any changes to your cluster. You’re always responsible
    for applying the output of the `linkerd` CLI to your cluster yourself, whether
    by simply feeding the output to `kubectl apply`, committing it so that GitOps
    takes over, or something else.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `linkerd inject` 最重要的一点是，它本身并不会对你的集群做出任何更改。你始终需要自行将 `linkerd` CLI 的输出应用到你的集群中，可以通过简单地将输出传递给
    `kubectl apply`，或者提交到 GitOps 进行处理，或者其他方式。
- en: Injecting in ingress mode
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注入到入口模式
- en: The `--ingress` flag sets the ingress mode annotation for a workload. Before
    setting this flag, or the corresponding annotation, on your ingress, please verify
    that it is required. You can see the [ingress docs](https://oreil.ly/OgAej) for
    more details on ingress mode.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`--ingress` 标志为工作负载设置入口模式注解。在在您的入口上设置此标志或相应的注解之前，请验证是否需要。您可以查看[入口文档](https://oreil.ly/OgAej)以获取有关入口模式的更多详细信息。'
- en: Injecting manually
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动注入
- en: By default, `linkerd inject` just adds the `linkerd.io/inject` annotation to
    your workload Pods, trusting the proxy injector to do the heavy lifting. Setting
    the `--manual` flag instructs the CLI to add the sidecar container directly to
    your manifest, bypassing the proxy injector.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`linkerd inject` 只会向您的工作负载 Pod 添加 `linkerd.io/inject` 注解，信任代理注入器来完成重型工作。设置
    `--manual` 标志会指示 CLI 直接向您的清单添加 sidecar 容器，绕过代理注入器。
- en: The `--manual` flag provides a valuable tool for overriding or modifying the
    proxy configuration in the event that you need to control something about the
    proxy that the usual configuration mechanisms don’t support. Be careful when tampering
    with the proxy configuration directly, though, as you can quickly find yourself
    falling out of sync with your overall proxy configuration.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`--manual` 标志为在需要控制一些常规配置机制不支持的代理配置时提供了一个有价值的工具。但是，请注意在直接修改代理配置时要小心，因为您可能会迅速使自己的代理配置脱离整体配置。'
- en: Injecting the debug sidecar
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注入调试 sidecar
- en: Setting `--enable-debug-sidecar` will add an annotation to your workload that
    will cause the proxy injector to add an additional debug sidecar to your Pods.
    Before trying to use the debug sidecar, you should definitely read [Chapter 15](ch15.html#LUAR_troubleshooting)
    and the [debug container documentation](https://oreil.ly/CVc6-).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `--enable-debug-sidecar` 将向您的工作负载添加一个注解，这会导致代理注入器向您的 Pod 添加一个额外的调试 sidecar。在尝试使用调试
    sidecar 之前，务必阅读[第15章](ch15.html#LUAR_troubleshooting)和[调试容器文档](https://oreil.ly/CVc6-)。
- en: linkerd identity
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`linkerd identity`'
- en: 'The `linkerd identity` command provides a useful tool for troubleshooting Pod
    certificates. It allows you to see the certificate details of any Pod or Pods;
    for example, here’s how you can get the identity of a Pod belonging to the Linkerd
    destination controller:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd identity` 命令为故障排除 Pod 证书提供了一个有用的工具。它允许您查看任何 Pod 或 Pods 的证书详细信息；例如，这里是如何获取属于
    Linkerd 目标控制器的 Pod 的身份：'
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Your Pod Identities Will Be Different
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的 Pod 身份将不同
- en: If you try this command, your Pod ID—and the specific certificate information—will
    be different. However, none of the information provided by `linkerd identity`
    is sensitive; it only shows public information. It’s always safe to run.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试此命令，则您的 Pod ID 和具体的证书信息将不同。但是，`linkerd identity` 提供的所有信息都不是敏感信息；它只显示公共信息。运行它是完全安全的。
- en: You can use the output of this command to check the validity of a given Pod
    certificate. It also gives you the details of what authority signed the certificate,
    so you can check that it is signed by the correct intermediary and root CAs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此命令的输出检查给定 Pod 证书的有效性。它还会告诉您哪个权威签署了证书，因此您可以检查它是否由正确的中介和根CA签署。
- en: linkerd diagnostics
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`linkerd diagnostics`'
- en: The `linkerd diagnostics` command is a powerful tool that enables platform operators
    to gather information directly from Linkerd. It will allow you to directly scrape
    details from the metrics endpoints of the various Linkerd components.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd diagnostics` 命令是一个强大的工具，允许平台运营商直接从 Linkerd 中收集信息。它将允许您直接从各种 Linkerd
    组件的指标端点中抓取详细信息。'
- en: This command also allows you to diagnose hard-to-identify conditions, like Linkerd’s
    failfast error, by listing out the endpoints for a given service. Some examples
    are given here; see also the [latest documentation](https://oreil.ly/egNPA) on
    the Linkerd site.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令还允许您诊断诸如 Linkerd 的快速失败错误之类的难以识别的条件，方法是列出给定服务的端点。这里给出了一些示例；还可以查看Linkerd网站上的[最新文档](https://oreil.ly/egNPA)。
- en: Gathering metrics
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 收集指标
- en: 'The `linkerd diagnostics` command can gather data directly from the metrics
    endpoints of the control plane and data plane. To gather control plane metrics,
    use this command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd diagnostics` 命令可以直接从控制平面和数据平面的指标端点收集数据。要收集控制平面指标，请使用此命令：'
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To gather metrics data for a given proxy or set of proxies, use a command like
    the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要收集给定代理或一组代理的指标数据，请使用以下命令：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`linkerd diagnostics` produces raw Prometheus metrics, so you’ll need to already
    have a sense of what information you’re looking for if you’re using these commands.
    Also note that the sample output has been truncated for space reasons—these commands
    produce *much* more output than what’s shown here (hundreds of lines, or more,
    is typical).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd diagnostics`生成原始的Prometheus指标，因此如果您使用这些命令，您需要已经知道您要查找的信息。此外，请注意由于空间原因，示例输出已被截断——这些命令生成的输出*比这里展示的要多得多*（通常是数百行或更多）。'
- en: Checking for endpoints
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查端点
- en: 'One of the hardest problems to debug in Linkerd tends to be when the `linkerd2-proxy`
    emits a message indicating it’s in a *failfast* state. The failfast state is discussed
    in more detail in [Chapter 15](ch15.html#LUAR_troubleshooting), but a very common
    reason to land in failfast is that a given service doesn’t have any valid endpoints.
    You can check for this condition with `linkerd diagnostics endpoints`. For example,
    here we examine the endpoints for the `emoji-svc` service of the [emojivoto sample
    application](https://oreil.ly/ZnYsL):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linkerd中最难调试的问题之一是当`linkerd2-proxy`发出表明其处于*failfast*状态的消息时。`failfast`状态在[第15章](ch15.html#LUAR_troubleshooting)中有更详细的讨论，但落入`failfast`的一个非常常见的原因是某个服务没有任何有效的端点。您可以使用`linkerd
    diagnostics endpoints`检查这种情况。例如，在这里我们检查[emojivoto示例应用程序](https://oreil.ly/ZnYsL)的`emoji-svc`服务的端点。
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that you must provide the fully qualified DNS name of the service as well
    as a port number. If no valid endpoints are found, `linkerd diagnostics endpoints`
    will report `No endpoints found` and, importantly, requests to the service will
    land in failfast.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须提供服务的完全合格的DNS名称以及端口号。如果找不到有效的端点，`linkerd diagnostics endpoints`将报告`未找到端点`，并且重要的是，请求将进入`failfast`状态。
- en: Diagnosing policy
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 诊断策略
- en: 'As of Linkerd 2.13, there is a new `linkerd diagnostics policy` command that
    can provide insight into Linkerd’s advanced routing policy engine. For example,
    you can look at the policy applied to traffic on port 80 of the `smiley` Service
    in the `faces` namespace (as you might find if you’re running the [Faces demo
    application](https://oreil.ly/a4OnB)):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从Linkerd 2.13开始，有一个新的`linkerd diagnostics policy`命令，可以提供有关Linkerd高级路由策略引擎的洞察。例如，您可以查看应用于`smiley`服务在`faces`命名空间端口80上的策略（如果您运行的是[Faces演示应用程序](https://oreil.ly/a4OnB)）：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The output of `linkerd diagnostics policy` is *extremely* verbose JSON, so it’s
    almost always a good idea to redirect it to a file as we’ve done here (or to `less`,
    `bat`, or a similar tool). You’ll see sections for `http1.1`, `http2`, etc., and
    in each section will be a very detailed—and, again, verbose—breakdown of the policy
    being applied.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd diagnostics policy`的输出是*非常*详细的JSON，因此几乎总是将其重定向到文件（如我们在这里所做的）或`less`、`bat`或类似工具中是一个好主意。您将看到`http1.1`、`http2`等各个部分，并且每个部分都将有一个非常详细的——再次强调，详细到令人叹为观止——策略细分。'
- en: As an example, you might see output like that in [Example 6-1](#EX8-plain-policy)
    to describe what will happen to HTTP/2 traffic with no advanced policy applied.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，您可能会看到类似于[示例 6-1](#EX8-plain-policy)中的输出，描述未应用高级策略时HTTP/2流量的情况。
- en: Example 6-1\. HTTP/2 output block without advanced policy
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1\. 没有高级策略的HTTP/2输出块
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Alternatively, suppose that you apply the HTTPRoute resource shown in [Example 6-2](#EX8-smiley-split)
    to split traffic sent to `smiley` so that half the traffic proceeds to the `smiley`
    workload, and the other half is redirected to `smiley2`. (HTTPRoutes are discussed
    in more detail in [Chapter 9](ch09.html#LUAR_route_policy).)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，假设您将显示在[示例 6-2](#EX8-smiley-split)中的HTTPRoute资源应用于分割发送到`smiley`的流量，使一半的流量继续发送到`smiley`工作负载，另一半被重定向到`smiley2`。（HTTPRoutes在[第9章](ch09.html#LUAR_route_policy)中有更详细的讨论。）
- en: Example 6-2\. HTTPRoute traffic splitting
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. HTTPRoute流量分割
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With that HTTPRoute in effect, `linkerd diagnostics policy` might produce an
    `http2` block like the one in [Example 6-3](#EX8-split-policy), showing that traffic
    is indeed being split.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在生效的HTTPRoute条件下，`linkerd diagnostics policy`可能生成一个`http2`块，如[示例 6-3](#EX8-split-policy)所示，显示确实正在分割流量。
- en: Example 6-3\. HTTP/2 output block with traffic splitting
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 带有流量分割的HTTP/2输出块
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As Linkerd evolves, this output will change, so take these examples with a grain
    of salt. The point of `linkerd diagnostics policy` is to provide sufficient detail
    that you can understand how Linkerd will manage traffic to a particular workload,
    no matter what changes are made to the source.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Linkerd 的发展，这些输出会发生变化，因此要对这些示例持保留态度。`linkerd diagnostics policy` 的目的是提供足够的细节，使您能够理解
    Linkerd 如何管理特定工作负载的流量，无论源代码如何更改。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: The `linkerd` CLI provides more than just the tooling you need to install Linkerd.
    It gives you critical operational tools that simplify the process of running Linkerd
    in your clusters. While it’s definitely possible to use Linkerd and never run
    the `linkerd` CLI, the CLI is the most straightforward, effective way to deal
    with many real-world situations.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkerd` CLI 不仅提供安装 Linkerd 所需的工具，还提供关键的运维工具，简化了在您的集群中运行 Linkerd 的流程。虽然完全可以使用
    Linkerd 而不运行 `linkerd` CLI，但 CLI 是处理许多现实场景的最直接、最有效的方式。'
