- en: Chapter 1\. Getting Started with Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first chapter we present recipes that will help you get started with
    Kubernetes. We show you how to use Kubernetes without installing it and introduce
    components such as the command-line interface (CLI) and the dashboard, which allow
    you to interact with a cluster, as well as Minikube, an all-in-one solution you
    can run on your laptop.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Installing the Kubernetes CLI, kubectl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to install the Kubernetes command-line interface so you can interact
    with your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest option is to download the latest official release. For example,
    on a Linux system, to get the latest stable version, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the [Homebrew package manager](https://brew.sh), Linux and macOS users
    can also install `kubectl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation, make sure you have a working `kubectl` by listing its version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`kubectl` is the official Kubernetes CLI and is available as open source software,
    which means you could build the `kubectl` binary yourself if you needed. See [Recipe
    15.1](ch15.html#compiling_source) to learn about compiling the Kubernetes source
    code locally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s useful to note that Google Kubernetes Engine users (see [Recipe 2.11](ch02.html#gke_start))
    can install `kubectl` using `gcloud`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Also note that in the latest versions of Minikube (see [Recipe 1.2](#minikube_install)),
    you can invoke `kubectl` as a subcommand of `minikube` to run a `kubectl` binary
    that matches the cluster version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Documentation on [installing `kubectl`](https://oreil.ly/DgK8a)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.2 Installing Minikube to Run a Local Kubernetes Instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use Kubernetes for testing or development or for training purposes
    on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Minikube](https://oreil.ly/97IFg) is a tool that lets you easily use Kubernetes
    on your local machine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Minikube CLI locally, you can get the latest prebuilt release
    or build from source. To install the latest release of `minikube` on a Linux-based
    machine, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will put the `minikube` binary in your path and make it accessible from
    everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s installed, you can verify the Minikube version with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Minikube can be deployed as a virtual machine, a container, or bare metal. This
    is configured using the `--driver` flag while creating a cluster on Minikube.
    When this flag is not specified, Minikube will automatically select the best available
    runtime environment.
  prefs: []
  type: TYPE_NORMAL
- en: A *hypervisor* is a software or hardware component that creates and manages
    virtual machines. It is responsible for allocating and managing the physical resources
    (CPU, memory, storage, network) of a host system and allowing multiple virtual
    machines (VMs) to run concurrently on the same physical hardware. Minikube supports
    a range of hypervisors, such as [VirtualBox](https://oreil.ly/-tbK7), [Hyperkit](https://oreil.ly/djLvh),
    [Docker Desktop](https://oreil.ly/xQ-mj), [Hyper-V](https://oreil.ly/5EAe0), and
    so on. The [drivers](https://oreil.ly/Y1jpt) page gives an overview of the supported
    runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: Minikube can also use a container runtime to create a cluster on a host machine.
    This driver is available only on a Linux-based host, where it’s possible to run
    Linux containers natively without having to use a VM. While a container-based
    runtime does not offer the same level of isolation as a virtual machine, it does
    offer the best performance and resource utilization. At the time of writing, Minikube
    has support for [Docker Engine](https://oreil.ly/7gZPf) and [Podman](https://oreil.ly/y6N3t)
    (experimental).
  prefs: []
  type: TYPE_NORMAL
- en: 'Other tools that can be used for running local Kubernetes clusters using Linux
    containers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes in Docker Desktop (see [Recipe 1.6](#install_docker_desktop_kubernetes))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kind (see [Recipe 1.5](#install_kind))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[k3d](https://k3d.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Minikube Get Started! guide](https://oreil.ly/2b1fA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Minikube drivers](https://oreil.ly/HAZgT)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minikube` source on [GitHub](https://oreil.ly/HmCEJ)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.3 Using Minikube Locally for Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use Minikube locally for testing and development of your Kubernetes
    application. You have installed and started `minikube` (see [Recipe 1.2](#minikube_install))
    and want to know a few extra commands to simplify your development experience.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `minikube start` command to create a Kubernetes cluster locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By default the cluster will be allocated 2 GB of RAM. If you don’t like the
    defaults, you can override parameters such as the memory and number of CPUs, as
    well as picking a certain Kubernetes version for the Minikube VM—​for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can specify the number of cluster nodes by overriding the
    default value of one node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To inspect the status of the Minikube cluster, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to inspect the status of the Kubernetes cluster running inside Minikube,
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Kubernetes cluster created with Minikube utilizes resources of the host
    machine, so you need to make sure your host has the resources available. More
    importantly, when you are done, do not forget to stop it with `minikube stop`
    to release the system resources.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Minikube CLI offers commands that make your life easier. The CLI has built-in
    help that you can use to discover the subcommands on your own—​here’s a snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Aside from `start`, `stop`, and `delete`, you should become familiar with the
    `ip`, `ssh`, `tunnel`, `dashboard`, and `docker-env` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If for any reason your Minikube becomes unstable or you want to start fresh,
    you can remove it with `minikube stop` and `minikube delete`. Then `minikube start`
    will give you a fresh installation.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Starting Your First Application on Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve started Minikube (see [Recipe 1.3](#minikube_manage)), and now you want
    to launch your first application on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an example, you can start the [Ghost](https://ghost.org) microblogging platform
    on Minikube using two `kubectl` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Monitor the pod manually to see when it starts running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can use the `minikube service` command to automatically load the application
    service URL in the web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `kubectl run` command is called a *generator*; it is a convenience command
    to create a `Pod` object (see [Recipe 4.4](ch04.html#pod_manifest)). The `kubectl
    expose` command is also a generator, a convenience command to create a `Service`
    object (see [Recipe 5.1](ch05.html#simple_service)) that routes network traffic
    to the containers started by your deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you do not need the application anymore, you can remove the `Pod` to release
    the cluster resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you should delete the `ghost` service that was created by the
    `kubectl expose` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 1.5 Using kind to Run Kubernetes Locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[kind](https://kind.sigs.k8s.io) is an alternative way to run Kubernetes locally.
    It was originally designed for testing Kubernetes but is now also often used as
    a way to try Kubernetes-native solutions on a laptop with minimal fuss. You want
    to use kind locally for testing and developing your Kubernetes application.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The minimum requirements for using kind are Go and a Docker runtime. kind is
    [easy to install](https://oreil.ly/1MxZo) on any platform, for example using `brew`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, creating a cluster is as simple as doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Deleting it is just as easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because kind was originally developed for testing Kubernetes, one of its [core
    design principles](https://oreil.ly/jNTNx) is that it should lend itself well
    to automation. You might want to consider using kind if you plan on automatically
    deploying Kubernetes clusters for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official kind [Quick Start guide](https://oreil.ly/aXjcY)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.6 Using Kubernetes in Docker Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Desktop is an offering built on top of Docker Engine that provides a
    number of useful developer tools, including a built-in version of Kubernetes and
    an associated load balancer to route traffic into the cluster. This means you
    can install a single tool and have access to pretty much everything you need to
    get started locally. You want to use Docker Desktop locally for testing and developing
    your Kubernetes application.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Install Docker Desktop](https://oreil.ly/HKVaR) and make sure to enable Kubernetes
    during the installation process.'
  prefs: []
  type: TYPE_NORMAL
- en: You can activate and deactivate Kubernetes from Docker Desktop’s settings panel,
    as shown in [Figure 1-1](#docker_desktop_settings). You might want to do this
    if you’re using Docker Desktop for its Docker Engine but aren’t using Kubernetes,
    as this will save resources on your computer. As shown here, the settings panel
    also shows you which version of Kubernetes is provided by Docker Desktop, which
    can be useful when debugging as certain solutions might have requirements on the
    minimum or maximum version of Kubernetes that they can run on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Snapshot of the Docker Desktop Kubernetes settings panel](assets/kcb2_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. Snapshot of the Docker Desktop Kubernetes settings panel
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is worth noting that the version of Kubernetes embedded into Docker Desktop
    lags behind the latest Kubernetes release by a few versions, whereas Minikube
    tends to be more up to date.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Figure 1-2](#docker_desktop_context), the Docker Desktop toolbar
    menu lets you easily switch `kubectl` contexts between different local clusters,
    which means you can have Minikube and Docker Desktop’s Kubernetes running at the
    same time but switch between them (not that we recommend doing this). For information
    on how to do this directly from `kubectl`, see [Recipe 1.7](#switch_contexts).
  prefs: []
  type: TYPE_NORMAL
- en: '![Snapshot of the Docker Desktop context switcher for kubectl](assets/kcb2_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. Snapshot of the Docker Desktop context switcher for `kubectl`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although it is a quick and easy way to get started with Kubernetes, be aware
    that Docker Desktop is not open source, and that the free version is restricted
    for use by individuals, small businesses, students and educators, and non-commercial
    open source developers.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Engine, on the other hand, which can be used to run Minikube, has an
    Apache 2.0 license, as does Minikube itself.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7 Switching kubectl Contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`kubectl` is always configured to speak to a given Kubernetes cluster by default,
    and this configuration is part of something called the *context*. If you’ve forgotten
    which cluster `kubectl` is set to, want to switch between clusters, or want to
    change other context-related parameters, then this recipe is for you.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view the contexts available to `kubectl`, use the `kubectl config get-contexts`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output, in this case there are three Kubernetes clusters
    available to `kubectl`, and the current context is set to speak to the `minikube`
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To switch to the `kind-kind` cluster, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to use your local `kubectl` to access a remote cluster, you can
    do so by editing the kubeconfig file. Learn more about the kubeconfig file in
    the [official documentation](https://oreil.ly/jMZ3h).
  prefs: []
  type: TYPE_NORMAL
- en: 1.8 Switching Contexts and Namespaces Using kubectx and kubens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to find an easier way to switch contexts (i.e., clusters) and namespaces
    with `kubectl`, as the commands for switching contexts are long and quite hard
    to remember.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`kubectx` and `kubens` are a couple of popular open source scripts that make
    it much easier to switch contexts for `kubectl` and to switch namespaces so that
    you don’t have to explicitly set the namespace name for every command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are plenty of available installation options. If you’re able to use `brew`,
    then you can try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then easily list the available `kubectl` contexts like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'and switch contexts just as easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, `kubens` lets you easily list and switch namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'All commands from then onward will be performed in the context of the chosen
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [repository for the `kubectl` and `kubens` tools](https://oreil.ly/QBH3N)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
