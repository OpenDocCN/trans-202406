- en: Chapter 14\. Production-Ready Linkerd
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章 《Linkerd 准备生产环境》
- en: 'Once you’ve deployed Linkerd, your next task is to appropriately harden your
    environment for production usage. As you prepare, it’s valuable to familiarize
    yourself with the resources available to you. Linkerd users have access to two
    basic sets of resources:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您部署了 Linkerd，您的下一个任务是为生产使用适当地加固您的环境。在准备过程中，熟悉您可以使用的资源非常有价值。Linkerd 用户可以访问两组基本资源：
- en: Community-provided resources, which are free to use and a great source of information
    for everyone
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区提供的资源是免费使用的，对于每个人来说都是一个很好的信息来源。
- en: Commercial resources from Buoyant, the creators of Linkerd
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Buoyant 提供的商业资源，Linkerd 的创建者
- en: For the purposes of this book we’re going to avoid going into the paid resources.
    If you’d like more information on Buoyant’s commercial offerings, visit [the Buoyant
    website](https://buoyant.io).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们将避免涉及付费资源。如果您想了解更多关于 Buoyant 的商业产品信息，请访问 [Buoyant 网站](https://buoyant.io)。
- en: Linkerd Community Resources
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linkerd 社区资源
- en: The Linkerd community is active on [GitHub](https://oreil.ly/n6j1e), [Slack](https://slack.linkerd.io),
    and the [CNCF mailing list](https://oreil.ly/w5dIi). Beyond that, there are a
    number of useful guides and resources online.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 社区活跃在 [GitHub](https://oreil.ly/n6j1e)，[Slack](https://slack.linkerd.io)
    和 [CNCF 邮件列表](https://oreil.ly/w5dIi) 上。此外，在线上还有许多有用的指南和资源。
- en: If you’re looking to learn more about running Linkerd in production, the [Buoyant
    production runbook](https://oreil.ly/kCfO5) is actively updated as Linkerd versions
    change and contains lots of important information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望了解有关在生产环境中运行 Linkerd 的更多信息，请查看 [Buoyant 生产操作手册](https://oreil.ly/kCfO5)，该手册在
    Linkerd 版本更改时进行了更新，并包含大量重要信息。
- en: Getting Help
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取帮助
- en: Community support for Linkerd is mostly provided by volunteer community members
    in the Linkerd Slack or directly by the maintainer and contributor community on
    GitHub. It’s important that users trying to get help from the open source community
    understand that you have a responsibility to carefully test all changes you make
    to Linkerd. When seeking help for Linkerd, you should be sure to clearly articulate
    the problem you’re facing and, if possible, provide clear steps to reproduce the
    issue. The hardest task for maintainers or volunteer community members will always
    be understanding and testing any particular problems that come up.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的社区支持主要由志愿社区成员在 Linkerd Slack 或直接在 GitHub 上的维护者和贡献者社区提供。重要的是，试图从开源社区获取帮助的用户理解，您有责任仔细测试对
    Linkerd 所做的所有更改。在寻求 Linkerd 帮助时，您应确保清楚地阐明您面临的问题，并在可能的情况下提供重现问题的明确步骤。对于维护者或志愿社区成员来说，最困难的任务始终是理解和测试出现的任何特定问题。
- en: Responsible Disclosure
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负责任的披露
- en: If you run into a security issue with Linkerd, the project maintainers kindly
    ask that you send a private email to [cncf-linkerd-maintainers@lists.cncf.io](mailto:cncf-linkerd-maintainers@lists.cncf.io).
    The maintainers will acknowledge your report and provide you additional information
    as they investigate the disclosure. You can subscribe to Linkerd vulnerability
    notifications at the [cncf-linkerd-announce mailing list](https://oreil.ly/HIc0c).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在使用 Linkerd 过程中遇到安全问题，请您发送私人邮件至 [cncf-linkerd-maintainers@lists.cncf.io](mailto:cncf-linkerd-maintainers@lists.cncf.io)，项目维护者将会确认您的报告，并在调查披露内容时提供额外信息。您可以订阅
    Linkerd 漏洞通知，请访问 [cncf-linkerd-announce 邮件列表](https://oreil.ly/HIc0c)。
- en: Kubernetes Compatibility
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 兼容性
- en: Linkerd is tested with all currently active Kubernetes versions. Each version’s
    release notes contain the minimum supported Kubernetes version.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 已测试通过所有当前活动的 Kubernetes 版本。每个版本的发布说明包含支持的最低 Kubernetes 版本。
- en: Going to Production with Linkerd
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Linkerd 进入生产环境
- en: With that out of the way, we can dive into going to production with Linkerd.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备好了，我们可以深入探讨如何使用 Linkerd 进入生产环境。
- en: Stable or Edge?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稳定版还是边缘版？
- en: For production use, your simplest path is going to be running a release from
    the stable channel, such as Buoyant Enterprise for Linkerd. Running an edge-channel
    release in production is definitely possible, though.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产使用，您最简单的方法将是从稳定渠道运行发布，例如 Buoyant Enterprise for Linkerd。虽然在生产中运行边缘渠道版本是完全可能的。
- en: If you decide to run edge releases in production, it is *critical* that you
    carefully read the release notes for any release you’re considering and that you
    give feedback about your experience to the Linkerd maintainers. The simplest way
    to do this is via the [community Slack](https://slack.linkerd.io). Discussions
    or issues on [GitHub](https://oreil.ly/y0Zut) are also a great way to reach the
    Linkerd team.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定在生产环境中运行边缘版本，*非常重要* 的是要仔细阅读你考虑的每个发布版本的发布说明，并向 Linkerd 维护人员反馈你的体验。最简单的方法是通过
    [社区 Slack](https://slack.linkerd.io) 进行反馈。在 [GitHub](https://oreil.ly/y0Zut) 上的讨论或问题也是与
    Linkerd 团队联系的好方式。
- en: Preparing Your Environment
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备你的环境
- en: 'The first step in making sure that your environment is ready for Linkerd is
    always to run the CLI’s preflight check:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的环境为 Linkerd 准备好的第一步始终是运行 CLI 的预检查：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will verify that your environment is ready to run Linkerd, paying particular
    attention to Kubernetes permissions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的环境已经准备好运行 Linkerd，特别是要注意 Kubernetes 权限。
- en: 'Beyond the preflight check, you also need to make sure that you understand
    your environment’s particular security requirements. For example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预检之外，你还需要确保理解你的环境特定的安全需求。例如：
- en: If you can’t allow your Pods `NET_ADMIN` permissions, you’ll need to use the
    Linkerd CNI plugin.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不能允许你的 Pods 具有 `NET_ADMIN` 权限，那么你将需要使用 Linkerd CNI 插件。
- en: If you’re using the Kubernetes tainting mechanism and you have applied custom
    taints to the Nodes where you’ll be running the Linkerd control plane, you’ll
    need to add tolerations to the Linkerd deployments.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Kubernetes 的污点机制，并且已经在将运行 Linkerd 控制平面的节点上应用了自定义的污点，那么你需要为 Linkerd 的部署添加容忍（tolerations）。
- en: If you use network policies to segregate traffic, you’ll need to make sure that
    your policies allow communication between the Linkerd control plane and its proxies.
    You may also want to consider using the Linkerd policy mechanisms for application-aware
    policy enforcement.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用网络策略来隔离流量，你需要确保你的策略允许 Linkerd 控制平面和其代理之间的通信。你可能还想考虑使用 Linkerd 的策略机制来进行应用程序感知的策略执行。
- en: In addition to communications, you’ll also need to consider how you’ll handle
    adding your application to the mesh, as discussed in [Chapter 4](ch04.html#LUAR_meshing_workloads).
    For example, will you use namespace injection or workload injection? These aren’t
    likely to be terribly complex decisions, but it’s still a good idea to think about
    them ahead of time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通信之外，你还需要考虑如何将你的应用程序添加到网格中，如在 [第四章](ch04.html#LUAR_meshing_workloads) 中讨论的那样。例如，你会使用命名空间注入还是工作负载注入？这些决策可能不会非常复杂，但提前考虑它们仍然是个好主意。
- en: 'To recap, you add a workload to the mesh by instructing the Linkerd proxy injector,
    a mutating webhook, to add a proxy to a Pod at Pod creation time. That instruction
    can be passed by adding an annotation at either the namespace, workload, or Pod
    level:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，通过指示 Linkerd 代理注入器在 Pod 创建时为 Pod 添加代理来将工作负载添加到网格中。可以通过在命名空间、工作负载或 Pod 级别添加注释来传递该指令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For production use, we recommend that you add the annotation at the namespace
    or workload level. This will generally be the simplest way to manage meshing application
    workloads, since it doesn’t require altering individual Pod manifests. (There
    are some situations in which you may need to add the proxy directly to a Pod,
    as discussed in [Chapter 6](ch06.html#LUAR_cli), but they’re few and far between.)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产使用，我们建议你在命名空间或工作负载级别添加注释。这通常是管理网格化应用程序工作负载的最简单方法，因为它不需要修改单个 Pod 清单。（虽然在某些情况下，你可能需要直接向
    Pod 添加代理，如在 [第六章](ch06.html#LUAR_cli) 中讨论的那样，但这些情况并不多见。）
- en: In either case, you’ll want to configure your deployment tooling to add the
    appropriate annotations during the deployment process, to ensure that your workloads
    are all appropriately meshed. This is also the time to add any exceptions to the
    cluster-wide configuration for skip and opaque ports, as discussed in [Chapter 4](ch04.html#LUAR_meshing_workloads).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，你都需要配置你的部署工具，在部署过程中添加适当的注释，以确保你的工作负载都被适当地网格化。这也是添加任何集群范围配置的跳过和不透明端口的异常的时机，如在
    [第四章](ch04.html#LUAR_meshing_workloads) 中讨论的那样。
- en: Explicitly Enabling Injection
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 明确启用注入
- en: 'Remember that if you are adding the Linkerd proxy-injection annotations at
    the namespace level, you can still override the injection behavior on individual
    workloads by adding the following annotation to a Deployment:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你在命名空间级别添加了 Linkerd 代理注入的注解，你仍然可以通过将以下注解添加到 Deployment 中的单个工作负载来覆盖注入行为：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configuring Linkerd for High Availability
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Linkerd 实现高可用性
- en: If you’re deploying Linkerd in production, it means you’ve decided to add critical
    security, observability, and reliability features to your production application.
    Good for you! Unfortunately, all that new functionality comes with some very real
    costs. Linkerd is now in the critical operating path for your most critical workloads.
    If Linkerd suffers a catastrophic failure, you’re likely to suffer a very real
    application outage, or at the very least a degradation in service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在生产环境中部署 Linkerd，这意味着你决定为你的生产应用程序添加关键的安全性、可观察性和可靠性功能。做得好！不幸的是，所有这些新功能都伴随着一些非常真实的成本。Linkerd
    现在处于你最关键工作负载的关键运行路径。如果 Linkerd 遭遇灾难性故障，你很可能会遭受非常真实的应用程序停机，或者至少会服务质量下降。
- en: In order to mitigate these risks, the Linkerd project defines and supports *high
    availability* (HA) mode. HA mode modifies the way Linkerd is deployed, as shown
    in [Figure 14-1](#linkerd-ha-mode).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少这些风险，Linkerd 项目定义并支持*高可用性*（HA）模式。HA 模式修改了部署 Linkerd 的方式，如[图 14-1](#linkerd-ha-mode)所示。
- en: '![luar 1401](assets/luar_1401.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![luar 1401](assets/luar_1401.png)'
- en: Figure 14-1\. Linkerd HA mode
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-1\. Linkerd 高可用模式
- en: Always Run HA in Production
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无论何时在生产环境中都要运行 HA
- en: We *strongly* recommend HA mode for any production use of Linkerd. If you don’t
    explicitly install in HA mode, your Linkerd installation will have several single
    points of failure that could cause downtime for your application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们*强烈*建议在任何生产环境中使用 Linkerd 的 HA 模式。如果你没有显式地安装 HA 模式，你的 Linkerd 安装将存在几个单点故障，可能会导致应用程序的停机时间。
- en: What does HA mode do?
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HA 模式的作用是什么？
- en: High availability mode makes a few significant changes to your Linkerd control
    plane install. You can find all the details about exactly what HA mode changes
    in the [latest documentation](https://oreil.ly/eDjOq), and we strongly encourage
    you to review this documentation when upgrading to make sure that you’re working
    with the latest information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性模式对你的 Linkerd 控制平面安装进行了一些重要的更改。你可以在[最新文档](https://oreil.ly/eDjOq)中找到有关 HA
    模式确切变更的所有详细信息，我们强烈建议你在升级时查阅此文档，以确保使用的是最新信息。
- en: 'The basic configuration, though, has been fairly consistent over time. In broad
    strokes, HA mode:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管基本配置一直比较一致，但在大体上，HA 模式：
- en: Runs three replicas
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行三个副本
- en: In HA mode, each control plane component runs three replicas rather than just
    one, to prevent failure of a single replica from taking down the whole mesh.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HA 模式下，每个控制平面组件运行三个副本，而不仅仅是一个，以防止单个副本故障导致整个网格崩溃。
- en: Sets anti-affinity
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 设置反亲和性
- en: Additionally, HA mode creates anti-affinity rules that prevent any single Node
    from running more than one replica of any control plane component. This prevents
    a single Node failure from taking down the entire mesh.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，HA 模式创建反亲和规则，防止任何单个节点运行控制平面组件的多个副本。这样可以防止单个节点故障导致整个网格崩溃。
- en: Tightens resource limits
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 加强资源限制
- en: HA mode establishes much more aggressive CPU and memory resource requests and
    limits than non-HA mode, to prevent any runaway processes from causing more widespread
    problems for the cluster as a whole.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: HA 模式建立了比非 HA 模式更为激进的 CPU 和内存资源请求和限制，以防止任何失控进程对整个集群造成更广泛的问题。
- en: Verifying Requests and Limits
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证请求和限制
- en: 'These more aggressive limits set by HA mode function well for many organizations,
    but you should view them as just a starting point: they may not be what your organization
    needs. It’s important to actively monitor the Linkerd control plane’s actual resource
    usage for your installation and tune the requests and limits as needed.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些由 HA 模式设置的更为激进的限制对许多组织都能很好地发挥作用，但你应该把它们视为一个起点：它们可能不是你的组织所需的。重要的是要积极监控 Linkerd
    控制平面的实际资源使用情况，并根据需要调整请求和限制。
- en: In particular, a control plane component that hits its memory limit will be
    OOMKilled and then restarted. This can be easy to miss if it happens infrequently,
    but if it happens consistently, you will likely suffer a production incident.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，控制平面组件如果达到其内存限制将被 OOMKilled，然后重新启动。如果这种情况不经常发生，可能会被忽略，但如果频繁发生，你可能会遭受生产事故。
- en: Makes the `proxy-injector` mandatory
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使`proxy-injector`成为强制项
- en: In HA mode, the `proxy-injector` component of the Linkerd control plane is *required*
    to be healthy before *any* Pod is allowed to be scheduled. This reflects the fact
    that Linkerd is commonly responsible for ensuring secure communications within
    your application. It is likely to be better to fail to start an application Pod
    than to allow it to run without having Linkerd’s proxy present to make it part
    of the mesh.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HA 模式下，Linkerd 控制平面的`proxy-injector`组件在*任何* Pod 允许被调度之前*必须*保持健康。这反映了 Linkerd
    通常负责确保应用程序内安全通信的事实。与其允许未经 Linkerd 代理的应用程序 Pod 运行，不如失败启动它们。
- en: It’s important to realize, though, that this requirement is enforced using a
    cluster-wide admission webhook, and as such it affects *every* Pod in the cluster,
    not just application workloads. This means that you *must* exempt critical cluster
    infrastructure namespaces, such as `kube-system`, from having the policy enforced.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但要意识到，此要求是使用集群范围的入场 Webhook 强制执行的，因此它影响*每个*集群中的 Pod，而不仅仅是应用工作负载。这意味着您*必须*豁免关键的集群基础设施命名空间，例如`kube-system`，以免强制执行策略。
- en: 'To exempt a namespace, apply the following label to the namespace:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要豁免一个命名空间，请将以下标签应用于命名空间：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: No Admission Webhook for Infrastructure!
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施无入场 Webhook！
- en: You *must* exempt infrastructure namespaces from the HA admission webhook. If
    you don’t, you can easily end up deadlocked, with Linkerd waiting for system infrastructure
    while system infrastructure is waiting for Linkerd.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您*必须*豁免基础设施命名空间免受 HA 入场 Webhook 的影响。如果不这样做，您很容易陷入僵局状态，Linkerd 正在等待系统基础设施，而系统基础设施正在等待
    Linkerd。
- en: High availability installation with Helm
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Helm 进行高可用安装
- en: We recommend using Helm for production Linkerd installs, including high availability
    installs. A complicating factor is that high availability installations are much
    more likely than other installations to need customized values for Helm. To make
    this a bit easier, the Linkerd Helm chart includes a values file that you can
    use as a basis for your high availability installation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在生产环境中使用 Helm 安装 Linkerd，包括高可用安装。一个复杂因素是，与其他安装方式相比，高可用安装更有可能需要定制的 Helm 值。为了让这一过程更加简化，Linkerd
    Helm 图表包含一个值文件，您可以将其用作高可用安装的基础。
- en: We recommend that you always refer to the [latest high availability installation
    instructions](https://oreil.ly/GLiFw) when deploying Linkerd HA with Helm. A brief
    overview of the process at the time of writing is shown in [Example 14-1](#EX-prod-helm).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您在使用 Helm 部署 Linkerd HA 时始终参考[最新的高可用安装说明](https://oreil.ly/GLiFw)。在撰写本文时，过程的简要概述显示在[示例 14-1](#EX-prod-helm)中。
- en: Example 14-1\. Installing Linkerd in HA mode with Helm
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-1\. 使用 Helm 在 HA 模式下安装 Linkerd
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As noted in the comments, you should keep your version of *values-ha.yaml* in
    version control. It’s an important resource for reinstallations and disaster recovery.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如评论中所述，您应将您的*values-ha.yaml*版本控制起来。这是重要的资源，用于重新安装和灾难恢复。
- en: High availability installation with the CLI
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CLI 进行高可用安装
- en: While we don’t generally recommend CLI-based installs for production environments,
    you can use the Linkerd CLI to output deployment YAML configured with all the
    HA options and then use this YAML as the basis for your actual install process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们通常不建议在生产环境中使用基于 CLI 的安装，但您可以使用 Linkerd CLI 输出配置了所有 HA 选项的部署 YAML，并将此 YAML
    作为实际安装过程的基础。
- en: 'To do this, use the `linkerd install` command with the `--ha` flag, and save
    the resulting YAML to a file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，请使用`linkerd install`命令和`--ha`标志，并将生成的 YAML 保存到文件中：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can then put *linkerd-ha.yaml* in version control and edit it as needed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将*linkerd-ha.yaml*放入版本控制，并根据需要进行编辑。
- en: Monitoring Linkerd
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Linkerd 监控](https://oreil.ly/GLiFw)的注意事项'
- en: There are commercial providers that will automatically configure Linkerd monitoring
    and alerting. For those of you looking to monitor Linkerd yourselves, we recommend
    you establish monitors to ensure Linkerd remains highly available in your environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些商业供应商会自动配置 Linkerd 的监控和警报。对于那些希望自行监控 Linkerd 的用户，我们建议您建立监控程序，以确保 Linkerd
    在您的环境中保持高可用性。
- en: Certificate Health and Expiration
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证书健康和到期
- en: The most common cause of Linkerd outages is expired certificates. Both the trust
    anchor and identity issuer certificates must be valid at all times to avoid downtime.
    As such, carefully monitoring your certificates to be certain that you always
    renew them before they expire is crucial.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd中断的最常见原因是证书过期。信任锚点和身份签发者证书必须始终有效，以避免停机时间。因此，仔细监控您的证书确保在其到期之前始终更新至关重要。
- en: The `linkerd check` command will begin warning you when your root or issuer
    certs will expire in less than 60 days.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的根证书或发行者证书将在60天内过期时，`linkerd check`命令将开始警告您。
- en: Never Let Your Certificates Expire
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绝不让您的证书过期
- en: Because Linkerd requires mTLS connections between Pods by default, the health
    and security of the certificates it uses are absolutely critical to the healthy
    operation of the mesh—and thus your platform. If certificates expire, or can’t
    be generated for new Pods, *you will incur downtime*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Linkerd默认需要Pod之间的mTLS连接，它使用的证书的健康和安全对网格的正常运行至关重要，从而影响您的平台。如果证书过期或无法为新Pod生成，*您将遭受停机时间*。
- en: This is the most common cause of downtime in production Linkerd clusters. Understanding
    and monitoring your Linkerd certificates is vital.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生产Linkerd集群停机时间最常见的原因。理解和监控您的Linkerd证书至关重要。
- en: Control Plane
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制平面
- en: Linkerd’s control plane is vital to the normal operation of your platform. You
    should collect and measure Linkerd proxy metrics for the control plane, like success
    rates, latency, and requests per second. Alert on aberrant behavior and investigate
    situations where the success rates drop below 100%.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd的控制平面对于您平台的正常运行至关重要。您应收集和测量控制平面的Linkerd代理指标，如成功率、延迟和每秒请求。对异常行为发出警报，并调查成功率低于100%的情况。
- en: You should also closely monitor the resource consumption of the control plane
    and ensure it never gets close to its CPU or memory limits.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应密切监视控制平面的资源消耗，并确保其永远不会接近CPU或内存限制。
- en: Data Plane
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据平面
- en: 'The Linkerd proxy tends to be fairly uncomplicated and straightforward to operate.
    That being said, it’s important to ensure the proxies aren’t consuming more resources
    than they should be: if they are, it can indicate excessive traffic or other issues.
    Monitor the resource usage on your proxies, and ensure that their resource requests
    and limits match what they need in order to handle application traffic.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd代理通常非常简单和直接易操作。尽管如此，确保代理未消耗比其应有的更多资源仍然非常重要：如果消耗过多，可能表示存在过多流量或其他问题。监视代理的资源使用情况，并确保其资源请求和限制与其处理应用程序流量所需的匹配。
- en: It’s also wise to ensure you are monitoring the versions of the Linkerd proxies
    in your environment. The proxy will be deployed with the version defined by the
    proxy injector at the time a Pod is created. If your Pods aren’t restarted on
    a regular basis, the proxy version can get out of sync with the control plane.
    You will want to ensure your proxies are always within at least one major version
    of the control plane.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 确保监控您环境中Linkerd代理的版本是明智的。代理将使用代理注入器在创建Pod时定义的版本部署。如果您的Pods不定期重启，代理版本可能会与控制平面不同步。您需要确保您的代理始终至少与控制平面的一个主要版本保持一致。
- en: Metrics Collection
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指标收集
- en: Any production installation of Linkerd also needs to account for what you will
    do with the metrics data generated by Linkerd. Linkerd proxies are constantly
    collecting useful information about the traffic going into and out of their Pods,
    and all this information is made available in such a way that any tool compatible
    with OpenTe⁠lemetry should be able to access it. (Linkerd has also long provided
    open source configuration details for configuring Prometheus to scrape metrics
    from Linkerd.)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Linkerd的生产安装还需要考虑如何处理Linkerd生成的指标数据。Linkerd代理不断收集有关其Pod进出的流量的有用信息，所有这些信息都以一种方式提供，任何兼容OpenTelemetry的工具应该能够访问它。
    （Linkerd长期以来还提供了配置Prometheus从Linkerd中抓取指标的开源配置详细信息。）
- en: Linkerd is not itself a monitoring tool (though Linkerd Viz can consume metrics
    and display many useful things about them); instead, it is designed to provide
    metrics to whatever monitoring solution is already in use in your environment.
    Whatever that is, one of the most important long-term tasks facing a platform
    engineer responsible for a production Linkerd installation is creating a plan
    for collecting, storing, and using all the metrics generated by Linkerd, since
    effective long-term monitoring is extremely valuable for understanding the behavior
    and health of your apps.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd本身并不是监控工具（尽管Linkerd Viz可以消耗度量标准并显示有关它们的许多有用信息）；相反，它设计用于向您环境中已有的监控解决方案提供度量标准。无论那是什么，对于负责生产Linkerd安装的平台工程师来说，创建一个用于收集、存储和使用Linkerd生成的所有度量标准的计划是最重要的长期任务之一，因为有效的长期监控对于理解应用程序的行为和健康非常有价值。
- en: Linkerd Viz for Production Use
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于生产的Linkerd Viz
- en: The Linkerd Viz extension consumes metrics provided by Linkerd, using them to
    enable some powerful diagnostics for Linkerd and providing a basic open source
    dashboard (shown in [Figure 14-2](#linkerd-viz-dashboard)) to make some of these
    metrics more easily visible. As of Linkerd 2.12, the core visibility data available
    from the CLI—from metrics to the state of a multicluster gateway—requires the
    Linkerd Viz extension to be installed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Viz扩展消耗由Linkerd提供的度量标准，利用它们为Linkerd启用一些强大的诊断功能，并提供一个基本的开源仪表板（在[图14-2](#linkerd-viz-dashboard)中显示），以便更轻松地可视化一些这些度量标准。从Linkerd
    2.12开始，从CLI可用的核心可见性数据——从度量标准到多集群网关的状态——需要安装Linkerd Viz扩展。
- en: '![luar 1402](assets/luar_1402.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![luar 1402](assets/luar_1402.png)'
- en: Figure 14-2\. The Linkerd Viz dashboard
  id: totrans-92
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-2。Linkerd Viz仪表板
- en: 'Though Linkerd Viz is not *required* for production use, we generally recommend
    installing it. Running Viz in production requires careful attention to three areas:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Linkerd Viz并非*必需*用于生产使用，但我们通常建议安装它。在生产环境中运行Viz需要特别关注三个领域：
- en: Prometheus and Linkerd Viz
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus和Linkerd Viz
- en: When you install Linkerd Viz, it can install a Prometheus instance for you.
    *This Prometheus instance is not recommended for production use*, since it uses
    an in-memory data store for metrics. As it saves more metrics data, it will fill
    up its available memory and crash, losing all the metrics data it had saved up
    to that point. In a busy production system, this can happen multiple times a day.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Linkerd Viz时，它可以为您安装一个Prometheus实例。*此Prometheus实例不建议用于生产使用*，因为它使用内存数据存储，随着保存更多的度量标准数据，它会填满可用内存并崩溃，丢失所有到目前为止保存的度量标准数据。在繁忙的生产系统中，这可能每天发生多次。
- en: To use Linkerd Viz in production, therefore, you’ll need to use a different
    Prometheus instance with persistent storage. The full procedure for externalizing
    Prometheus is shown in [Example 10-9](ch10.html#EX12-production-prometheus). You
    can also review the official docs on [externalizing Prometheus](https://oreil.ly/i5knP).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要在生产环境中使用Linkerd Viz，您需要使用带有持久化存储的不同Prometheus实例。有关外部化Prometheus的完整流程在[示例 10-9](ch10.html#EX12-production-prometheus)中展示。您还可以查阅关于[外部化Prometheus](https://oreil.ly/i5knP)的官方文档。
- en: Always Use Your Own Prometheus
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用自己的Prometheus
- en: 'We’ll say it one more time: *do not use the Prometheus installed by Linkerd
    Viz in production*. It stores your metrics only in RAM, and you *will* lose any
    historical data when it restarts.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再说一遍：*不要在生产中使用Linkerd Viz安装的Prometheus*。它只将您的度量标准存储在内存中，当其重新启动时，您*将*丢失所有历史数据。
- en: '[Chapter 10](ch10.html#LUAR_observability) has more details on the right way
    to deal with metrics.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html#LUAR_observability)详细介绍了处理度量标准的正确方法。'
- en: Securing the Linkerd Viz dashboard
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 保护Linkerd Viz仪表板
- en: The open source Linkerd Viz dashboard provides access to important information
    about your cluster, including metrics, Linkerd Tap, and more. For ease of experimentation,
    it does not include any authentication mechanism; as such, we *do not recommend*
    this configuration for production.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的Linkerd Viz仪表板提供对集群重要信息的访问，包括度量标准、Linkerd Tap等。为了方便实验，它不包含任何身份验证机制；因此，我们*不建议*将此配置用于生产环境。
- en: If you intend to make the Linkerd Viz dashboard available in production, we
    *strongly recommend* limiting access to it using your ingress controller as well
    as Linkerd authorization policy. You can learn more about ingress controllers
    in [Chapter 5](ch05.html#LUAR_ingress_and_linkerd), and more about exactly how
    to secure the Linkerd Viz dashboard in [the Linkerd docs](https://oreil.ly/Ivenb).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在生产环境中提供Linkerd Viz仪表板，我们*强烈建议*使用您的入口控制器以及Linkerd授权策略来限制对其的访问。您可以在[第5章](ch05.html#LUAR_ingress_and_linkerd)中了解更多关于入口控制器的信息，以及如何确切地保护Linkerd
    Viz仪表板的详细信息可在[Linkerd文档](https://oreil.ly/Ivenb)中找到。
- en: Securing Linkerd Tap
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 保护Linkerd Tap
- en: Linkerd Tap allows operators to view the metadata about requests between applications
    in your environment. Though it cannot ever access unencrypted message bodies,
    it is still important to secure access to Linkerd Tap since many organizations
    include potentially sensitive information in their URLs or headers that should
    not be exposed to everyone with access to the cluster. Access to Linkerd Tap is
    provided via the `linkerd-linkerd-tap-admin` ClusterRole.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd Tap允许操作员查看环境中应用程序之间请求的元数据。尽管它永远不会访问未加密的消息正文，但仍然很重要确保安全访问Linkerd Tap，因为许多组织在其URL或标头中包含可能敏感的信息，不应向所有访问集群的人员公开。可以通过`linkerd-linkerd-tap-admin`
    ClusterRole提供对Linkerd Tap的访问权限。
- en: You can read more about securing Tap traffic in the [Linkerd docs](https://oreil.ly/wjWnb),
    but the most basic operation here is to give a Kubernetes account permission to
    access Linkerd Tap. That can be done with the role binding shown in [Example 14-2](#EX-prod-tap).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Linkerd文档](https://oreil.ly/wjWnb)中了解更多关于保护Tap流量的信息，但这里最基本的操作是授予Kubernetes帐户访问Linkerd
    Tap的权限。可以通过[示例 14-2](#EX-prod-tap)中显示的角色绑定来完成。
- en: Example 14-2\. Accessing Linkerd Tap
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-2\. 访问Linkerd Tap
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Accessing Linkerd Logs
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问Linkerd日志
- en: 'The Linkerd control plane and the Linkerd proxies all emit log information,
    accessible using `kubectl logs`, that can be valuable for troubleshooting any
    active incidents or investigating anomalous behavior. Each log message emitted
    has an associated *log level*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd控制平面和Linkerd代理均会发出日志信息，可通过`kubectl logs`访问，这些信息对于排除任何活动事件或调查异常行为可能非常有价值。每个发出的日志消息都有相关的*日志级别*：
- en: '`ERROR`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`错误`'
- en: Messages that indicate serious problems with Linkerd that must be resolved in
    order to continue operating the mesh
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 指示必须解决以继续操作网格的Linkerd存在严重问题的消息
- en: '`WARNING`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`警告`'
- en: Messages that indicate problems that should be resolved but won’t prevent the
    mesh from functioning
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 指示应解决但不会阻止网格正常运行的问题的消息
- en: '`INFO`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`信息`'
- en: Informational messages
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 信息性消息
- en: '`DEBUG`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`调试`'
- en: Messages that are only for debugging and usually require knowledge of Linkerd
    to interpret
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用于调试的消息，通常需要了解Linkerd才能解释
- en: By default, Linkerd components are configured to emit messages at the `INFO`
    level and higher. If necessary, you can override this configuration so that Linkerd
    will emit `DEBUG` messages too. (It is not recommended to turn off `INFO`-level
    messages.) Switching the log level requires a restart for the control plane, though
    Linkerd proxies can change their log level at runtime.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Linkerd组件配置为以`INFO`级别及更高级别发出消息。必要时，您可以覆盖此配置以便Linkerd也发出`DEBUG`消息。（不建议关闭`INFO`级别的消息。）切换日志级别需要重新启动控制平面，尽管Linkerd代理可以在运行时更改其日志级别。
- en: You should only switch Linkerd to emit `DEBUG`-level log messages while actively
    troubleshooting an issue; emitting `DEBUG`-level logs has real performance implications
    for Linkerd itself, and the extra log volume can quickly overwhelm log aggregators.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您应仅在积极排除故障时将Linkerd切换为发出`DEBUG`级别的日志消息；发出`DEBUG`级别的日志对Linkerd本身有实际的性能影响，并且额外的日志量可能会快速压倒日志聚合器。
- en: On that note, when monitoring your Linkerd environment it’s worthwhile to monitor
    the log level of your Linkerd components to ensure they haven’t been mistakenly
    left emitting `DEBUG` logs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在此期间，当监视您的Linkerd环境时，监视Linkerd组件的日志级别是值得的，以确保它们没有错误地继续发出`DEBUG`日志。
- en: Upgrading Linkerd
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级Linkerd
- en: Linkerd is designed to be safe to operate and upgrade. Upgrades within the same
    major version are generally safe and, if high availability mode is configured,
    can be confidently performed without any loss of functionality. That being said,
    in all cases it’s wise to test your upgrades, and upgrade processes, in your nonproduction
    environments before moving to production.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的设计旨在安全运行和升级。在同一个主要版本内进行升级通常是安全的，并且如果配置了高可用模式，则可以放心地执行升级而不会丢失任何功能。尽管如此，在所有情况下，都应该在非生产环境中测试您的升级和升级过程，然后再转移到生产环境。
- en: When using releases from the stable channel, remember that major version upgrades,
    unlike minor version upgrades, can contain breaking changes. Linkerd 2.10, 2.11,
    and 2.12 all contained significant changes to the operation of Linkerd that required
    many users to change their deployment strategies or carefully test the behavior
    of their applications. It is incumbent on you as the platform operator to carefully
    read the release notes for a new major version before deploying and test your
    upgrade process before moving to production.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用稳定通道的发布时，请记住，与次要版本升级不同，主要版本升级可能包含破坏性变更。例如，Linkerd 2.10、2.11 和 2.12 都包含了对
    Linkerd 操作的显著更改，需要许多用户更改其部署策略或仔细测试其应用程序的行为。作为平台运营商，您有责任在部署之前仔细阅读新主要版本的发布说明，并测试您的升级过程，然后再转移到生产环境。
- en: Never Skip Major Versions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 永远不要跳过主要版本
- en: When upgrading, *never* skip major versions; for example, an upgrade from 2.12.5
    to 2.14.3 is *not supported*. Upgrades are tested only across a single major version;
    attempting to skip will land you in uncharted territory and could easily cause
    downtime.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行升级时，*绝对不要*跳过主要版本；例如，从 2.12.5 升级到 2.14.3 *不受支持*。升级仅在单个主要版本内进行测试；尝试跳过可能会导致未知问题并且很可能会导致停机时间。
- en: Note that you should *always* read the upgrade instructions for a given release
    before upgrading; for example, Linkerd 2.12 added a new step to the process. This
    is especially important when using releases from the edge channel! You can find
    the latest instructions in the [Linkerd upgrade documentation](https://oreil.ly/Mmou7).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必*始终*在升级之前阅读特定版本的升级说明；例如，Linkerd 2.12 添加了一个新步骤到流程中。当使用边缘通道的发布时，这一点尤为重要！您可以在[Linkerd
    升级文档](https://oreil.ly/Mmou7)中找到最新的说明。
- en: As with Linkerd installs, the project supports two main pathways for upgrading.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Linkerd 安装一样，该项目支持两种主要的升级路径。
- en: Upgrading via Helm
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Helm 进行升级
- en: Using Helm is the recommended method for production installations and upgrades.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Helm 是生产安装和升级的推荐方法。
- en: Read the Instructions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读说明书
- en: Remember to read the [Linkerd upgrade instructions](https://oreil.ly/7IhPt)
    before starting the upgrade!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始升级之前，请务必阅读[Linkerd 升级说明](https://oreil.ly/7IhPt)！
- en: 'Here’s the process:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是具体的过程：
- en: 'Ensure that the control plane itself is healthy and that Linkerd is running
    cleanly:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保控制平面本身健康，并且 Linkerd 正常运行：
- en: '[PRE7]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If `linkerd check` reveals any issues, address them *before* moving forward.
    Trying to upgrade when the control plane is not functioning correctly can cause
    major problems.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `linkerd check` 显示任何问题，请在继续之前解决它们。在控制平面运行不正确时尝试升级可能会导致重大问题。
- en: 'Once you know that the control plane is running smoothly, pull down updates
    to your Helm repositories:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦确认控制平面运行正常，请更新您的 Helm 仓库：
- en: '[PRE8]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, update the Linkerd Helm charts. Note that as of Linkerd 2.12, there are
    two distinct Helm charts, and you need to run upgrades for both.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新 Linkerd Helm 图表。请注意，从 Linkerd 2.12 开始，有两个独立的 Helm 图表，您需要对两者都运行升级操作。
- en: 'First, upgrade the Linkerd CRDs:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，升级 Linkerd CRD：
- en: '[PRE9]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once that’s done, upgrade the control plane itself:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，请升级控制平面本身：
- en: '[PRE10]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once again, ensure that the control plane is healthy:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次确保控制平面健康：
- en: '[PRE11]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Upgrading via the CLI
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 CLI 进行升级
- en: Linkerd’s CLI has an `upgrade` command that will output YAML that can be directly
    applied to your Kubernetes cluster to upgrade the Linkerd control plane. While
    we generally recommend using Helm to upgrade Linkerd, the Linkerd CLI may better
    fit some workflows.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 的 CLI 提供了一个 `upgrade` 命令，将输出 YAML，可直接应用于您的 Kubernetes 集群以升级 Linkerd
    控制平面。虽然我们通常建议使用 Helm 来升级 Linkerd，但 Linkerd CLI 可能更适合某些工作流程。
- en: Read the Instructions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读说明书
- en: Remember to read the [Linkerd upgrade instructions](https://oreil.ly/7IhPt)
    before starting the upgrade!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始升级之前，请务必阅读[Linkerd 升级说明](https://oreil.ly/7IhPt)！
- en: 'The basic process for upgrading the via the CLI is:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 CLI 进行升级的基本过程是：
- en: 'Ensure that the control plane itself is healthy and that Linkerd is running
    cleanly:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保控制平面本身健康运行，确保Linkerd运行正常：
- en: '[PRE12]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If `linkerd check` reveals any issues, address them *before* moving forward.
    Trying to upgrade when the control plane is not functioning correctly can cause
    major problems.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `linkerd check` 显示任何问题，请在继续之前解决它们。当控制平面功能不正常时进行升级可能会导致严重问题。
- en: 'Start the upgrade process itself by installing the latest version of the Linkerd
    CLI. This allows the CLI to fetch the latest versions of the various Linkerd installation
    resources:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过安装最新版本的Linkerd CLI来启动升级过程本身。这使得CLI可以获取各种Linkerd安装资源的最新版本：
- en: '[PRE13]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Confirm you’re running the latest version with:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确认你正在运行最新版本：
- en: '[PRE14]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Upgrade the control plane running in the cluster:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级运行在集群中的控制平面：
- en: '[PRE15]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using the `--prune` flag ensures that resources that are no longer required
    are removed from your cluster.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `--prune` 标志确保从集群中删除不再需要的资源。
- en: Seriously, Read the Instructions!
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认真，读取说明！
- en: As an illustration of why reading the instructions is important, upgrading to
    Linkerd 2.12 required passing a much more complex set of pruning instructions
    to `kubectl apply`!
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为阅读说明书重要性的例证，升级到Linkerd 2.12需要将更复杂的修剪指令传递给 `kubectl apply`！
- en: The upgrade instructions can change with each major version, which is why you
    should *always* read the [latest documentation](https://oreil.ly/o_Aef) before
    upgrading.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 升级说明可能会随每个主要版本而变化，这就是为什么你应该在升级之前*始终*阅读[最新文档](https://oreil.ly/o_Aef)。
- en: 'Once again, ensure that the control plane is healthy:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次确保控制平面正常运行：
- en: '[PRE16]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Readiness Checklist
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 就绪检查清单
- en: 'There’s a lot separating a small demo environment from a major production environment,
    as we’ve just covered! The following checklist covers some of the most important
    things to consider when taking Linkerd into production:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小型演示环境与一个重要的生产环境有很多差异，正如我们刚刚提到的！以下检查清单涵盖了在将Linkerd投入生产时需要考虑的一些最重要的事项：
- en: I’ve run Linkerd’s preflight checks with my installation credentials.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已经使用我的安装凭据运行了Linkerd的预检查。
- en: I’m mirroring the Linkerd images into my own internal registry.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我正在将Linkerd镜像镜像到我的内部注册表中。
- en: I’m confident I have the capacity on my cluster to run Linkerd’s control plane
    in high availability mode.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我确信我的集群有能力以高可用模式运行Linkerd的控制平面。
- en: I have a plan to run Linkerd in HA mode.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有计划以高可用模式运行Linkerd。
- en: I have created my own certificates for Linkerd.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已为Linkerd创建了自己的证书。
- en: I have a plan to securely store and rotate those certificates.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有计划安全地存储和轮换这些证书。
- en: I have created monitors to ensure I will be notified before my certificates
    expire.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已经创建了监控，以确保在证书过期之前我会收到通知。
- en: I have identified the various non-HTTP workloads in use in my environment.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已确定我环境中使用的各种非HTTP工作负载。
- en: I am aware of which ones are in the mesh and which are not.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我知道哪些工作负载已经加入了网格，哪些没有。
- en: I have annotated the `kube-system` namespace to ensure it will operate normally
    without the proxy injector being available.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已注释 `kube-system` 命名空间，以确保它在没有代理注入器可用时能够正常运行。
- en: I have ensured the `linkerd` namespace will not be configured for auto-injection.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已确保 `linkerd` 命名空间不会配置为自动注入。
- en: I have ensured the `kube-system` namespace will not be configured for auto-injection.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已确保 `kube-system` 命名空间不会配置为自动注入。
- en: I am aware of any other namespaces that I need to ensure do not get injected
    by the proxy.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我知道还有其他命名空间需要确保不被代理注入。
- en: I have exempted them from the injector failure policy.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已将它们从注入器故障策略中豁免。
- en: I have a plan for adding the appropriate annotations to my workloads.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有计划为我的工作负载添加适当的注释。
- en: I have a plan for gathering and storing Linkerd metrics.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有一个收集和存储Linkerd指标的计划。
- en: I have tooling in place to ensure Linkerd is healthy and that I will be notified
    if there is an issue.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已经设置了工具，以确保Linkerd健康，并且如果有问题我会收到通知。
- en: If you are able to check off most or all of these items, you are well on your
    way to being able to confidently run Linkerd in production.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够勾选大部分或全部这些项目，那么你就能够自信地在生产环境中运行Linkerd。
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered many of the core tasks and concerns involved with
    running Linkerd in production. No two organizations have identical operational
    constraints and requirements, so, as with everything else in technology, you should
    be prepared to adapt this advice to your real-world circumstances. If you have
    particular operational concerns, or want help running Linkerd, we recommend connecting
    with the Linkerd community or establishing a commercial relationship with a vendor
    that provides support or management for Linkerd.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了许多与在生产环境中运行 Linkerd 相关的核心任务和关注点。没有两个组织具有相同的操作限制和要求，因此，与技术的其他方面一样，您应该准备好根据您的实际情况调整这些建议。如果您有特定的操作上的顾虑，或者需要帮助运行
    Linkerd，我们建议您与 Linkerd 社区联系，或者建立与提供 Linkerd 支持或管理的供应商之间的商业关系。
