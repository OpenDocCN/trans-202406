- en: Chapter 14\. Production-Ready Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you’ve deployed Linkerd, your next task is to appropriately harden your
    environment for production usage. As you prepare, it’s valuable to familiarize
    yourself with the resources available to you. Linkerd users have access to two
    basic sets of resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Community-provided resources, which are free to use and a great source of information
    for everyone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commercial resources from Buoyant, the creators of Linkerd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the purposes of this book we’re going to avoid going into the paid resources.
    If you’d like more information on Buoyant’s commercial offerings, visit [the Buoyant
    website](https://buoyant.io).
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd Community Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Linkerd community is active on [GitHub](https://oreil.ly/n6j1e), [Slack](https://slack.linkerd.io),
    and the [CNCF mailing list](https://oreil.ly/w5dIi). Beyond that, there are a
    number of useful guides and resources online.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re looking to learn more about running Linkerd in production, the [Buoyant
    production runbook](https://oreil.ly/kCfO5) is actively updated as Linkerd versions
    change and contains lots of important information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Help
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Community support for Linkerd is mostly provided by volunteer community members
    in the Linkerd Slack or directly by the maintainer and contributor community on
    GitHub. It’s important that users trying to get help from the open source community
    understand that you have a responsibility to carefully test all changes you make
    to Linkerd. When seeking help for Linkerd, you should be sure to clearly articulate
    the problem you’re facing and, if possible, provide clear steps to reproduce the
    issue. The hardest task for maintainers or volunteer community members will always
    be understanding and testing any particular problems that come up.
  prefs: []
  type: TYPE_NORMAL
- en: Responsible Disclosure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you run into a security issue with Linkerd, the project maintainers kindly
    ask that you send a private email to [cncf-linkerd-maintainers@lists.cncf.io](mailto:cncf-linkerd-maintainers@lists.cncf.io).
    The maintainers will acknowledge your report and provide you additional information
    as they investigate the disclosure. You can subscribe to Linkerd vulnerability
    notifications at the [cncf-linkerd-announce mailing list](https://oreil.ly/HIc0c).
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes Compatibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linkerd is tested with all currently active Kubernetes versions. Each version’s
    release notes contain the minimum supported Kubernetes version.
  prefs: []
  type: TYPE_NORMAL
- en: Going to Production with Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With that out of the way, we can dive into going to production with Linkerd.
  prefs: []
  type: TYPE_NORMAL
- en: Stable or Edge?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For production use, your simplest path is going to be running a release from
    the stable channel, such as Buoyant Enterprise for Linkerd. Running an edge-channel
    release in production is definitely possible, though.
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to run edge releases in production, it is *critical* that you
    carefully read the release notes for any release you’re considering and that you
    give feedback about your experience to the Linkerd maintainers. The simplest way
    to do this is via the [community Slack](https://slack.linkerd.io). Discussions
    or issues on [GitHub](https://oreil.ly/y0Zut) are also a great way to reach the
    Linkerd team.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing Your Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step in making sure that your environment is ready for Linkerd is
    always to run the CLI’s preflight check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will verify that your environment is ready to run Linkerd, paying particular
    attention to Kubernetes permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beyond the preflight check, you also need to make sure that you understand
    your environment’s particular security requirements. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: If you can’t allow your Pods `NET_ADMIN` permissions, you’ll need to use the
    Linkerd CNI plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re using the Kubernetes tainting mechanism and you have applied custom
    taints to the Nodes where you’ll be running the Linkerd control plane, you’ll
    need to add tolerations to the Linkerd deployments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use network policies to segregate traffic, you’ll need to make sure that
    your policies allow communication between the Linkerd control plane and its proxies.
    You may also want to consider using the Linkerd policy mechanisms for application-aware
    policy enforcement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to communications, you’ll also need to consider how you’ll handle
    adding your application to the mesh, as discussed in [Chapter 4](ch04.html#LUAR_meshing_workloads).
    For example, will you use namespace injection or workload injection? These aren’t
    likely to be terribly complex decisions, but it’s still a good idea to think about
    them ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, you add a workload to the mesh by instructing the Linkerd proxy injector,
    a mutating webhook, to add a proxy to a Pod at Pod creation time. That instruction
    can be passed by adding an annotation at either the namespace, workload, or Pod
    level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For production use, we recommend that you add the annotation at the namespace
    or workload level. This will generally be the simplest way to manage meshing application
    workloads, since it doesn’t require altering individual Pod manifests. (There
    are some situations in which you may need to add the proxy directly to a Pod,
    as discussed in [Chapter 6](ch06.html#LUAR_cli), but they’re few and far between.)
  prefs: []
  type: TYPE_NORMAL
- en: In either case, you’ll want to configure your deployment tooling to add the
    appropriate annotations during the deployment process, to ensure that your workloads
    are all appropriately meshed. This is also the time to add any exceptions to the
    cluster-wide configuration for skip and opaque ports, as discussed in [Chapter 4](ch04.html#LUAR_meshing_workloads).
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly Enabling Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that if you are adding the Linkerd proxy-injection annotations at
    the namespace level, you can still override the injection behavior on individual
    workloads by adding the following annotation to a Deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Linkerd for High Availability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re deploying Linkerd in production, it means you’ve decided to add critical
    security, observability, and reliability features to your production application.
    Good for you! Unfortunately, all that new functionality comes with some very real
    costs. Linkerd is now in the critical operating path for your most critical workloads.
    If Linkerd suffers a catastrophic failure, you’re likely to suffer a very real
    application outage, or at the very least a degradation in service.
  prefs: []
  type: TYPE_NORMAL
- en: In order to mitigate these risks, the Linkerd project defines and supports *high
    availability* (HA) mode. HA mode modifies the way Linkerd is deployed, as shown
    in [Figure 14-1](#linkerd-ha-mode).
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 1401](assets/luar_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. Linkerd HA mode
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Always Run HA in Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We *strongly* recommend HA mode for any production use of Linkerd. If you don’t
    explicitly install in HA mode, your Linkerd installation will have several single
    points of failure that could cause downtime for your application.
  prefs: []
  type: TYPE_NORMAL
- en: What does HA mode do?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: High availability mode makes a few significant changes to your Linkerd control
    plane install. You can find all the details about exactly what HA mode changes
    in the [latest documentation](https://oreil.ly/eDjOq), and we strongly encourage
    you to review this documentation when upgrading to make sure that you’re working
    with the latest information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic configuration, though, has been fairly consistent over time. In broad
    strokes, HA mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Runs three replicas
  prefs: []
  type: TYPE_NORMAL
- en: In HA mode, each control plane component runs three replicas rather than just
    one, to prevent failure of a single replica from taking down the whole mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Sets anti-affinity
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, HA mode creates anti-affinity rules that prevent any single Node
    from running more than one replica of any control plane component. This prevents
    a single Node failure from taking down the entire mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Tightens resource limits
  prefs: []
  type: TYPE_NORMAL
- en: HA mode establishes much more aggressive CPU and memory resource requests and
    limits than non-HA mode, to prevent any runaway processes from causing more widespread
    problems for the cluster as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying Requests and Limits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These more aggressive limits set by HA mode function well for many organizations,
    but you should view them as just a starting point: they may not be what your organization
    needs. It’s important to actively monitor the Linkerd control plane’s actual resource
    usage for your installation and tune the requests and limits as needed.'
  prefs: []
  type: TYPE_NORMAL
- en: In particular, a control plane component that hits its memory limit will be
    OOMKilled and then restarted. This can be easy to miss if it happens infrequently,
    but if it happens consistently, you will likely suffer a production incident.
  prefs: []
  type: TYPE_NORMAL
- en: Makes the `proxy-injector` mandatory
  prefs: []
  type: TYPE_NORMAL
- en: In HA mode, the `proxy-injector` component of the Linkerd control plane is *required*
    to be healthy before *any* Pod is allowed to be scheduled. This reflects the fact
    that Linkerd is commonly responsible for ensuring secure communications within
    your application. It is likely to be better to fail to start an application Pod
    than to allow it to run without having Linkerd’s proxy present to make it part
    of the mesh.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to realize, though, that this requirement is enforced using a
    cluster-wide admission webhook, and as such it affects *every* Pod in the cluster,
    not just application workloads. This means that you *must* exempt critical cluster
    infrastructure namespaces, such as `kube-system`, from having the policy enforced.
  prefs: []
  type: TYPE_NORMAL
- en: 'To exempt a namespace, apply the following label to the namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: No Admission Webhook for Infrastructure!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You *must* exempt infrastructure namespaces from the HA admission webhook. If
    you don’t, you can easily end up deadlocked, with Linkerd waiting for system infrastructure
    while system infrastructure is waiting for Linkerd.
  prefs: []
  type: TYPE_NORMAL
- en: High availability installation with Helm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend using Helm for production Linkerd installs, including high availability
    installs. A complicating factor is that high availability installations are much
    more likely than other installations to need customized values for Helm. To make
    this a bit easier, the Linkerd Helm chart includes a values file that you can
    use as a basis for your high availability installation.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend that you always refer to the [latest high availability installation
    instructions](https://oreil.ly/GLiFw) when deploying Linkerd HA with Helm. A brief
    overview of the process at the time of writing is shown in [Example 14-1](#EX-prod-helm).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-1\. Installing Linkerd in HA mode with Helm
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As noted in the comments, you should keep your version of *values-ha.yaml* in
    version control. It’s an important resource for reinstallations and disaster recovery.
  prefs: []
  type: TYPE_NORMAL
- en: High availability installation with the CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While we don’t generally recommend CLI-based installs for production environments,
    you can use the Linkerd CLI to output deployment YAML configured with all the
    HA options and then use this YAML as the basis for your actual install process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, use the `linkerd install` command with the `--ha` flag, and save
    the resulting YAML to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can then put *linkerd-ha.yaml* in version control and edit it as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are commercial providers that will automatically configure Linkerd monitoring
    and alerting. For those of you looking to monitor Linkerd yourselves, we recommend
    you establish monitors to ensure Linkerd remains highly available in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate Health and Expiration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common cause of Linkerd outages is expired certificates. Both the trust
    anchor and identity issuer certificates must be valid at all times to avoid downtime.
    As such, carefully monitoring your certificates to be certain that you always
    renew them before they expire is crucial.
  prefs: []
  type: TYPE_NORMAL
- en: The `linkerd check` command will begin warning you when your root or issuer
    certs will expire in less than 60 days.
  prefs: []
  type: TYPE_NORMAL
- en: Never Let Your Certificates Expire
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because Linkerd requires mTLS connections between Pods by default, the health
    and security of the certificates it uses are absolutely critical to the healthy
    operation of the mesh—and thus your platform. If certificates expire, or can’t
    be generated for new Pods, *you will incur downtime*.
  prefs: []
  type: TYPE_NORMAL
- en: This is the most common cause of downtime in production Linkerd clusters. Understanding
    and monitoring your Linkerd certificates is vital.
  prefs: []
  type: TYPE_NORMAL
- en: Control Plane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linkerd’s control plane is vital to the normal operation of your platform. You
    should collect and measure Linkerd proxy metrics for the control plane, like success
    rates, latency, and requests per second. Alert on aberrant behavior and investigate
    situations where the success rates drop below 100%.
  prefs: []
  type: TYPE_NORMAL
- en: You should also closely monitor the resource consumption of the control plane
    and ensure it never gets close to its CPU or memory limits.
  prefs: []
  type: TYPE_NORMAL
- en: Data Plane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Linkerd proxy tends to be fairly uncomplicated and straightforward to operate.
    That being said, it’s important to ensure the proxies aren’t consuming more resources
    than they should be: if they are, it can indicate excessive traffic or other issues.
    Monitor the resource usage on your proxies, and ensure that their resource requests
    and limits match what they need in order to handle application traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: It’s also wise to ensure you are monitoring the versions of the Linkerd proxies
    in your environment. The proxy will be deployed with the version defined by the
    proxy injector at the time a Pod is created. If your Pods aren’t restarted on
    a regular basis, the proxy version can get out of sync with the control plane.
    You will want to ensure your proxies are always within at least one major version
    of the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any production installation of Linkerd also needs to account for what you will
    do with the metrics data generated by Linkerd. Linkerd proxies are constantly
    collecting useful information about the traffic going into and out of their Pods,
    and all this information is made available in such a way that any tool compatible
    with OpenTe⁠lemetry should be able to access it. (Linkerd has also long provided
    open source configuration details for configuring Prometheus to scrape metrics
    from Linkerd.)
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd is not itself a monitoring tool (though Linkerd Viz can consume metrics
    and display many useful things about them); instead, it is designed to provide
    metrics to whatever monitoring solution is already in use in your environment.
    Whatever that is, one of the most important long-term tasks facing a platform
    engineer responsible for a production Linkerd installation is creating a plan
    for collecting, storing, and using all the metrics generated by Linkerd, since
    effective long-term monitoring is extremely valuable for understanding the behavior
    and health of your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd Viz for Production Use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linkerd Viz extension consumes metrics provided by Linkerd, using them to
    enable some powerful diagnostics for Linkerd and providing a basic open source
    dashboard (shown in [Figure 14-2](#linkerd-viz-dashboard)) to make some of these
    metrics more easily visible. As of Linkerd 2.12, the core visibility data available
    from the CLI—from metrics to the state of a multicluster gateway—requires the
    Linkerd Viz extension to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![luar 1402](assets/luar_1402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. The Linkerd Viz dashboard
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Though Linkerd Viz is not *required* for production use, we generally recommend
    installing it. Running Viz in production requires careful attention to three areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus and Linkerd Viz
  prefs: []
  type: TYPE_NORMAL
- en: When you install Linkerd Viz, it can install a Prometheus instance for you.
    *This Prometheus instance is not recommended for production use*, since it uses
    an in-memory data store for metrics. As it saves more metrics data, it will fill
    up its available memory and crash, losing all the metrics data it had saved up
    to that point. In a busy production system, this can happen multiple times a day.
  prefs: []
  type: TYPE_NORMAL
- en: To use Linkerd Viz in production, therefore, you’ll need to use a different
    Prometheus instance with persistent storage. The full procedure for externalizing
    Prometheus is shown in [Example 10-9](ch10.html#EX12-production-prometheus). You
    can also review the official docs on [externalizing Prometheus](https://oreil.ly/i5knP).
  prefs: []
  type: TYPE_NORMAL
- en: Always Use Your Own Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll say it one more time: *do not use the Prometheus installed by Linkerd
    Viz in production*. It stores your metrics only in RAM, and you *will* lose any
    historical data when it restarts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html#LUAR_observability) has more details on the right way
    to deal with metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: Securing the Linkerd Viz dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The open source Linkerd Viz dashboard provides access to important information
    about your cluster, including metrics, Linkerd Tap, and more. For ease of experimentation,
    it does not include any authentication mechanism; as such, we *do not recommend*
    this configuration for production.
  prefs: []
  type: TYPE_NORMAL
- en: If you intend to make the Linkerd Viz dashboard available in production, we
    *strongly recommend* limiting access to it using your ingress controller as well
    as Linkerd authorization policy. You can learn more about ingress controllers
    in [Chapter 5](ch05.html#LUAR_ingress_and_linkerd), and more about exactly how
    to secure the Linkerd Viz dashboard in [the Linkerd docs](https://oreil.ly/Ivenb).
  prefs: []
  type: TYPE_NORMAL
- en: Securing Linkerd Tap
  prefs: []
  type: TYPE_NORMAL
- en: Linkerd Tap allows operators to view the metadata about requests between applications
    in your environment. Though it cannot ever access unencrypted message bodies,
    it is still important to secure access to Linkerd Tap since many organizations
    include potentially sensitive information in their URLs or headers that should
    not be exposed to everyone with access to the cluster. Access to Linkerd Tap is
    provided via the `linkerd-linkerd-tap-admin` ClusterRole.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about securing Tap traffic in the [Linkerd docs](https://oreil.ly/wjWnb),
    but the most basic operation here is to give a Kubernetes account permission to
    access Linkerd Tap. That can be done with the role binding shown in [Example 14-2](#EX-prod-tap).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-2\. Accessing Linkerd Tap
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Accessing Linkerd Logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Linkerd control plane and the Linkerd proxies all emit log information,
    accessible using `kubectl logs`, that can be valuable for troubleshooting any
    active incidents or investigating anomalous behavior. Each log message emitted
    has an associated *log level*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ERROR`'
  prefs: []
  type: TYPE_NORMAL
- en: Messages that indicate serious problems with Linkerd that must be resolved in
    order to continue operating the mesh
  prefs: []
  type: TYPE_NORMAL
- en: '`WARNING`'
  prefs: []
  type: TYPE_NORMAL
- en: Messages that indicate problems that should be resolved but won’t prevent the
    mesh from functioning
  prefs: []
  type: TYPE_NORMAL
- en: '`INFO`'
  prefs: []
  type: TYPE_NORMAL
- en: Informational messages
  prefs: []
  type: TYPE_NORMAL
- en: '`DEBUG`'
  prefs: []
  type: TYPE_NORMAL
- en: Messages that are only for debugging and usually require knowledge of Linkerd
    to interpret
  prefs: []
  type: TYPE_NORMAL
- en: By default, Linkerd components are configured to emit messages at the `INFO`
    level and higher. If necessary, you can override this configuration so that Linkerd
    will emit `DEBUG` messages too. (It is not recommended to turn off `INFO`-level
    messages.) Switching the log level requires a restart for the control plane, though
    Linkerd proxies can change their log level at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: You should only switch Linkerd to emit `DEBUG`-level log messages while actively
    troubleshooting an issue; emitting `DEBUG`-level logs has real performance implications
    for Linkerd itself, and the extra log volume can quickly overwhelm log aggregators.
  prefs: []
  type: TYPE_NORMAL
- en: On that note, when monitoring your Linkerd environment it’s worthwhile to monitor
    the log level of your Linkerd components to ensure they haven’t been mistakenly
    left emitting `DEBUG` logs.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Linkerd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linkerd is designed to be safe to operate and upgrade. Upgrades within the same
    major version are generally safe and, if high availability mode is configured,
    can be confidently performed without any loss of functionality. That being said,
    in all cases it’s wise to test your upgrades, and upgrade processes, in your nonproduction
    environments before moving to production.
  prefs: []
  type: TYPE_NORMAL
- en: When using releases from the stable channel, remember that major version upgrades,
    unlike minor version upgrades, can contain breaking changes. Linkerd 2.10, 2.11,
    and 2.12 all contained significant changes to the operation of Linkerd that required
    many users to change their deployment strategies or carefully test the behavior
    of their applications. It is incumbent on you as the platform operator to carefully
    read the release notes for a new major version before deploying and test your
    upgrade process before moving to production.
  prefs: []
  type: TYPE_NORMAL
- en: Never Skip Major Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When upgrading, *never* skip major versions; for example, an upgrade from 2.12.5
    to 2.14.3 is *not supported*. Upgrades are tested only across a single major version;
    attempting to skip will land you in uncharted territory and could easily cause
    downtime.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you should *always* read the upgrade instructions for a given release
    before upgrading; for example, Linkerd 2.12 added a new step to the process. This
    is especially important when using releases from the edge channel! You can find
    the latest instructions in the [Linkerd upgrade documentation](https://oreil.ly/Mmou7).
  prefs: []
  type: TYPE_NORMAL
- en: As with Linkerd installs, the project supports two main pathways for upgrading.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading via Helm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Helm is the recommended method for production installations and upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: Read the Instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember to read the [Linkerd upgrade instructions](https://oreil.ly/7IhPt)
    before starting the upgrade!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the control plane itself is healthy and that Linkerd is running
    cleanly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `linkerd check` reveals any issues, address them *before* moving forward.
    Trying to upgrade when the control plane is not functioning correctly can cause
    major problems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you know that the control plane is running smoothly, pull down updates
    to your Helm repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, update the Linkerd Helm charts. Note that as of Linkerd 2.12, there are
    two distinct Helm charts, and you need to run upgrades for both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, upgrade the Linkerd CRDs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once that’s done, upgrade the control plane itself:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once again, ensure that the control plane is healthy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Upgrading via the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linkerd’s CLI has an `upgrade` command that will output YAML that can be directly
    applied to your Kubernetes cluster to upgrade the Linkerd control plane. While
    we generally recommend using Helm to upgrade Linkerd, the Linkerd CLI may better
    fit some workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Read the Instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember to read the [Linkerd upgrade instructions](https://oreil.ly/7IhPt)
    before starting the upgrade!
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic process for upgrading the via the CLI is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the control plane itself is healthy and that Linkerd is running
    cleanly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `linkerd check` reveals any issues, address them *before* moving forward.
    Trying to upgrade when the control plane is not functioning correctly can cause
    major problems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the upgrade process itself by installing the latest version of the Linkerd
    CLI. This allows the CLI to fetch the latest versions of the various Linkerd installation
    resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm you’re running the latest version with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upgrade the control plane running in the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the `--prune` flag ensures that resources that are no longer required
    are removed from your cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Seriously, Read the Instructions!
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: As an illustration of why reading the instructions is important, upgrading to
    Linkerd 2.12 required passing a much more complex set of pruning instructions
    to `kubectl apply`!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The upgrade instructions can change with each major version, which is why you
    should *always* read the [latest documentation](https://oreil.ly/o_Aef) before
    upgrading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once again, ensure that the control plane is healthy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Readiness Checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There’s a lot separating a small demo environment from a major production environment,
    as we’ve just covered! The following checklist covers some of the most important
    things to consider when taking Linkerd into production:'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve run Linkerd’s preflight checks with my installation credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m mirroring the Linkerd images into my own internal registry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m confident I have the capacity on my cluster to run Linkerd’s control plane
    in high availability mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have a plan to run Linkerd in HA mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have created my own certificates for Linkerd.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have a plan to securely store and rotate those certificates.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I have created monitors to ensure I will be notified before my certificates
    expire.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I have identified the various non-HTTP workloads in use in my environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am aware of which ones are in the mesh and which are not.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I have annotated the `kube-system` namespace to ensure it will operate normally
    without the proxy injector being available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have ensured the `linkerd` namespace will not be configured for auto-injection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have ensured the `kube-system` namespace will not be configured for auto-injection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am aware of any other namespaces that I need to ensure do not get injected
    by the proxy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have exempted them from the injector failure policy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I have a plan for adding the appropriate annotations to my workloads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have a plan for gathering and storing Linkerd metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have tooling in place to ensure Linkerd is healthy and that I will be notified
    if there is an issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are able to check off most or all of these items, you are well on your
    way to being able to confidently run Linkerd in production.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered many of the core tasks and concerns involved with
    running Linkerd in production. No two organizations have identical operational
    constraints and requirements, so, as with everything else in technology, you should
    be prepared to adapt this advice to your real-world circumstances. If you have
    particular operational concerns, or want help running Linkerd, we recommend connecting
    with the Linkerd community or establishing a commercial relationship with a vendor
    that provides support or management for Linkerd.
  prefs: []
  type: TYPE_NORMAL
