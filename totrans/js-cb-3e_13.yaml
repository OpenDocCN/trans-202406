- en: Chapter 11\. Browser Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a web developer, the browser is the window through which the world accesses
    your creations. It also provides helpful tooling for developing and testing your
    sites. It is a worthwhile investment to learn how to use your browser’s development
    tools so that you may better and more easily debug your code. In this chapter
    we’ll cover several useful features for debugging, profiling, and analyzing JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, all of the examples in this book will make use of Google Chrome’s
    Developer Tools (DevTools). At the time of writing, [Chrome’s usage makes up over
    65%](https://oreil.ly/QFZD9) of the global browser share. Most other browsers
    offer similar functionality. Mozilla’s [Firefox Developer Edition](https://oreil.ly/lJSel)
    is an excellent alternative with useful developer features.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to know the value of a variable at a specific point in your JavaScript
    code’s execution.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a breakpoint to inspect code values and types. When setting a breakpoint,
    the browser’s debugger will stop at the point of the breakpoint’s code execution
    and display each of the current values in scope. It is then possible to step through
    the code or allow the JavaScript to finish executing. [Figure 11-1](#breakpoint_fig)
    shows a screenshot of code paused on a breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Chrome debugger with a breakpoint set](assets/jsc3_1101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. A screenshot of the Chrome debugger with a breakpoint set
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To set a breakpoint on a specific line of JavaScript code in Chrome’s Developer
    Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Chrome’s Developer Tools using Command-Option-C (Macintosh) or Control+Shift+C
    (Windows or Linux).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the DevTools **Sources** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the JavaScript file from the file list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the line number where you would like to set the breakpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the code by either interacting with the page or refreshing the browser
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is common practice to use `console.log` statements to identify values at
    specific points in code, but breakpoints offer more information and greater flexibility.
    As you become familiar with debugging in this manner, you’ll be able to more easily
    troubleshoot your browser-based JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to setting breakpoints in the browser’s user interface, it is also
    possible to set them with code by adding a `debugger` statement. Doing so will
    pause code execution at the point of the `debugger` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the breakpoint has been reached, you are given several options as to how
    the JavaScript should be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: Resume script execution
  prefs: []
  type: TYPE_NORMAL
- en: Continue executing the code in full.
  prefs: []
  type: TYPE_NORMAL
- en: Step over
  prefs: []
  type: TYPE_NORMAL
- en: Execute a function without “stepping into it” to debug.
  prefs: []
  type: TYPE_NORMAL
- en: Step into
  prefs: []
  type: TYPE_NORMAL
- en: Step into a function to debug it further.
  prefs: []
  type: TYPE_NORMAL
- en: Step out of
  prefs: []
  type: TYPE_NORMAL
- en: Execute the rest of the current function’s code.
  prefs: []
  type: TYPE_NORMAL
- en: Step
  prefs: []
  type: TYPE_NORMAL
- en: Step to the next line of code.
  prefs: []
  type: TYPE_NORMAL
- en: These line-based breakpoints are only one type of breakpoint that can be set.
    In addition, it is possible to set breakpoints based on DOM changes, conditional
    values, event listeners, exceptions, and fetch/XHR requests. The use of breakpoints
    provides greater control over the JavaScript debugging experience.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Runtime Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The execution of your JavaScript code seems slow or buggy, but you are unsure
    of the source of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the browser developer tool’s Performance analysis to look for bottlenecks
    and CPU-intensive tasks in your code ([Figure 11-2](#jscb_1202)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To analyze JavaScript code performance in Chrome’s Developer Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Chrome’s Developer Tools using Command-Option-C (Macintosh) or Control+Shift+C
    (Windows or Linux).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the DevTools **Performance** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either click the **Record** button to interact with the page, or click the **Reload**
    button to see the performance metrics related to a new page load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Chrome completes the profile of the page, you will be presented with information
    that allows you to review potential performance bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Chrome Performance tab](assets/jsc3_1102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-2\. Chrome’s Performance tab
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Chrome Performance tooling breaks down the browser’s rendering process for
    a page and presents it using a visual timeline, screenshots, and a summary chart
    (see [Figure 11-3](#jscb_1203)). Using this information allows you to look for
    places where performance is negatively affected.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you may have a high-end machine and a fast internet connection.
    One of the most useful features of browser performance tools is the ability to
    simulate a throttled CPU or internet connection. Doing so may allow you to spot
    performance issues that users will encounter, but may not be apparent to you.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the developer tools with throttled CPU and network connections
    enabled](assets/jsc3_1103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-3\. The Chrome Developer Performance tools allow you to throttle CPU
    and network connections
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Reviewing performance data is an important step in ensuring a positive user
    experience. Good site performance has been shown to improve user retention rates
    and sales conversions. In [“Using Lighthouse to Measure Best Practices”](#lighthouse),
    we’ll cover how to further review potential performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying Unused JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your application’s performance is impacted by large JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Chrome Developer Tool’s Coverage feature to identify unused JavaScript
    ([Figure 11-4](#jscb_1204)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the results of Chrome''s coverage tool](assets/jsc3_1104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-4\. Chrome’s Coverage tool
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To view unused JavaScript, access the Coverage tab:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Chrome’s Developer Tools using Command-Option-C (Macintosh) or Control+Shift+C
    (Windows or Linux).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Command Menu using Command-Shift-P (Macintosh) or Control+Shift+P (Windows
    or Linux) and type **`coverage`**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Show Coverage** and press Enter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either click the **Record** button to interact with the page, or click the **Reload**
    button to record the coverage results related to a new page load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Stop Instrumenting Coverage And Show Results** when you want to stop
    recording the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The results will display a report with the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: File URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total bytes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unused bytes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can then use this information to aid in refactoring code to reduce the total
    amount of unused bytes on a page.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Viewing code usage is helpful for getting a sense of the percentage of unused
    JavaScript you are serving your users. The task of reducing this unused code is
    then often left to manual refactoring. However, a JavaScript bundling tool, such
    as Webpack, can also be used to split code into multiple bundles and perform “tree
    shaking” to automatically eliminate dead code. These methods are covered in [“JavaScript
    and the Mobile Web”](ch16.html#mobile-web).
  prefs: []
  type: TYPE_NORMAL
- en: Using Lighthouse to Measure Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to measure your web application’s adherence to best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use Google’s Lighthouse tool, which is built into the Chrome Developer Tools
    ([Figure 11-5](#jscb_1206)).
  prefs: []
  type: TYPE_NORMAL
- en: Open Chrome’s Developer Tools using Command-Option-C (Macintosh) or Control+Shift+C
    (Windows or Linux).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the DevTools **Lighthouse** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the categories you would like to profile and the device type (mobile
    or desktop).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Generate Report**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lighthouse will then create a report, with a score for each category and specific
    recommendations for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Lighthouse screenshot](assets/jsc3_1105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-5\. The results of a Google Lighthouse report within Chrome’s Developer
    Tools
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lighthouse is an open source tool, created by Google, to measure the performance
    and best practices of a website. The tool is built into Chrome’s Developer Tools,
    but it can also be run as a standalone browser extension, a Node module, or from
    the command line. The Lighthouse report can be generated in a desktop or mobile
    view, allowing you to quickly get a sense of mobile performance. Lighthouse generates
    reports and recommendations for each of the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Progressive Web Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best Practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The report output provides actionable feedback with specific problems, and links
    to documentation and recommended improvements. In [Figure 11-6](#jscb_1207), you
    can see performance recommendations for a profiled website, including removing
    unused JavaScript and reducing the impact of third-party code. Expanding each
    of these diagnostics will provide additional details and file specifics.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of Lighthouse performance recommendations](assets/jsc3_1106.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-6\. Lighthouse performance recommendations
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Google’s Lighthouse is a useful tool for gauging the overall health and performance
    of the websites and applications that you develop. Accessing Lighthouse through
    the browser Developer Tools provides a quick and efficient way to profile a site
    during development. In addition to the developer tools user interface, the [open
    source](https://github.com/GoogleChrome/lighthouse) command-line tooling and Node
    module make it possible to build Lighthouse reports into continuous integration
    and delivery pipelines.
  prefs: []
  type: TYPE_NORMAL
