["```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  dbuser: aGVwdGlvCg==\n  dbkey: YmVhcmNhbm9lCg==\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\nstringData:\n  dbuser: heptio\n  dbkey: bearcanoe\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    env:\n      - name: USER ![1](assets/1.png)\n        valueFrom:\n          secretKeyRef:\n            name: mysecret ![2](assets/2.png)\n            key: dbuser ![3](assets/3.png)\n      - name: PASS\n        valueFrom:\n          secretKeyRef:\n            name: mysecret\n            key: dbkey\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - name: creds ![2](assets/2.png)\n      readOnly: true\n      mountPath: \"/etc/credentials\" ![3](assets/3.png)\n  volumes: ![1](assets/1.png)\n  - name: creds\n    secret:\n      secretName: mysecret\n```", "```\nroot@nginx:/# cat /etc/credentials/db\ndbkey   dbuser\n```", "```\n# grep 'secret/creds' secret/creds\n\ntmpfs\n/var/lib/kubelet/pods/\ne98df9fe-a970-416b-9ddf-bcaff15dff87/volumes/\nkubernetes.io~secret/creds tmpfs rw,relatime 0 0\n```", "```\n#!/bin/bash\n\n# Change this based on location of etcd nodes\nENDPOINTS='192.168.3.43:2379'\n\nETCDCTL_API=3 etcdctl \\\n  --endpoints=${ENDPOINTS} \\\n  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\" \\\n  --cert=\"/etc/kubernetes/pki/apiserver-etcd-client.crt\" \\\n  --key=\"/etc/kubernetes/pki/apiserver-etcd-client.key\" \\\n  ${@}\n```", "```\n# ./etcctl-script get /registry/secrets/default/login1\n\n/registry/secrets/default/login1\nk8s\n\nv1Secret\n\nlogin1default\"*$6c991b48-036c-48f8-8be3-58175913915c2bB\n0kubectl.kubernetes.io/last-applied-configuration{\"apiVersion\":\"v1\",\"data\":\n{\"dbkey\":\"YmVhcmNhbm9lCg==\",\"dbuser\":\"aGVwdGlvCg==\"},\"kind\":\"Secret\",\n\"metadata\":{\"annotations\":{},\"name\":\"login1\",\"namespace\":\"default\"},\n\"type\":\"Opaque\"}\nz\ndbkey\nbearcanoe\n\ndbuserheptio\nOpaque\"\n```", "```\nhead -c 32 /dev/urandom | base64\n```", "```\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n  - resources:\n    - secrets\n    providers:\n    - secretbox:\n        keys:\n        - name: secret-key-1\n          secret: u7mcOcHKbFh9eVluB18hbFIsVfwpvgbXv650QacDYXA==\n    # identity is a required (default) provider\n    - identity: {}\n```", "```\n--encryption-provider-config=/etc/kubernetes/pki/secrets/encryption-config.yaml\n```", "```\n# ./etcctl-script get /registry/secrets/default/login2\n\n/registry/secrets/default/login2\nk8s:enc:secretbox:v1:secret-key-1:^Dʜ\n                                     HN,lU/:L kdR<_h (fO$V\ny.\n  r/m\nMٜjVĄGP<%B0kZHY}->q|&c?a\\i#xoZsVXd+8_rCצgcj[Mv<X5N):MQ'7݋t\n'pLBxqݡ)b݉/+r49ޓ`f\n 6(iciQⰪſ$'.ejbprλ=Cp+R-D%q!r/pbv1_.izyPlQ)1!7@X\\0\n                                                                  EiĿr(dwlS\n```", "```\n# ./etcctl-script get /registry/secrets/default/login1\n\n/registry/secrets/default/login1\nk8s\n```", "```\n- secretbox:\n        keys:\n        - name: secret-key-2\n          secret: xgI5XTIRQHN/C6mlS43MuAWTSzuwkGSvIDmEcw6DDl8=\n        - name: secret-key-1\n          secret: u7mcOcHKbFh9eVluB18hbFIsVfwpvgbXv650QacDYXA=\n```", "```\nError from server (InternalError): Internal error occurred: unable to transform\nkey \"/registry/secrets/default/login1\": no matching key was found for the\nprovided Secretbox transformer\n```", "```\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n- secrets\nproviders:\n- kms:\n    name: myKmsPlugin\n    endpoint: unix:///tmp/socketfile.sock\n    cachesize: 100\n    timeout: 3s\n# required, but not used for encryption\n- identity: {}\n```", "```\n--encryption-provider-config=/etc/kubernetes/pki/secrets/encryption-config.yaml\n```", "```\napiVersion: admissionregistration.k8s.io/v1\nkind: MutatingWebhookConfiguration\nmetadata:\n  labels:\n    app.kubernetes.io/instance: vault\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: vault-agent-injector\n  name: vault-agent-injector-cfg\nwebhooks:\n- admissionReviewVersions:\n  - v1beta1\n  clientConfig:\n    caBundle: REDACTED\n    service:\n      name: vault-agent-injector-svc\n      namespace: default\n      path: /mutate\n      port: 443\n  failurePolicy: Ignore\n  matchPolicy: Exact\n  name: vault.hashicorp.com\n  namespaceSelector: {}\n  objectSelector: {}\n  reinvocationPolicy: Never\n  rules:\n  - apiGroups:\n    - \"\"\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    - UPDATE\n    resources:\n    - pods\n    scope: '*'\n  sideEffects: Unknown\n  timeoutSeconds: 30\n```", "```\ninitContainers:\n- args:\n  - echo ${VAULT_CONFIG?} | base64 -d > /tmp/config.json\n  - vault agent -config=/tmp/config.json\n  command:\n  - /bin/sh\n  - -ec\n  env:\n  - name: VAULT_CONFIG\n    value: eyJhd\n  image: vault:1.3.2\n  imagePullPolicy: IfNotPresent\n  name: vault-agent-init\n  securityContext:\n    runAsGroup: 1000\n    runAsNonRoot: true\n    runAsUser: 100\n  volumeMounts:\n  - mountPath: /vault/secrets\n    name: vault-secrets\n```", "```\ncontainers:\n  #\n  # ORIGINAL WORKLOAD CONTAINER REMOVED FOR BREVITY\n  #\n- name: vault-agent\n  args:\n  - echo ${VAULT_CONFIG?} | base64 -d > /tmp/config.json\n  - vault agent -config=/tmp/config.json\n  command:\n  - /bin/sh\n  - -ec\n  env:\n  - name: VAULT_CONFIG\n    value: asdfasdfasd\n  image: vault:1.3.2\n  imagePullPolicy: IfNotPresent\n  securityContext:\n    runAsGroup: 1000\n    runAsNonRoot: true\n    runAsUser: 100\n  volumeMounts:\n  - mountPath: /vault/secrets\n    name: vault-secrets\n```", "```\nvault.hashicorp.com/agent-inject-secret-db-creds: \"serets/db/creds\"\n```", "```\nkey: map[k:v],\nkey: map[k:v]\n```", "```\nspec:\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: \"true\"\n        vault.hashicorp.com/agent-inject-status: \"update\"\n        vault.hashicorp.com/agent-inject-secret-db-creds: \"secrets/db/creds\"\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret \"secrets/db/creds\" -}}\n          jdbc:oracle:thin:{{ .Data.data.username }}/{{ .Data.data.password }}\n          {{- end }}\n```", "```\n# from within a vault container \nvault write auth/kubernetes/config \\\n    kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\ ![1](assets/1.png)\n    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \\\n    token_reviewer_jwt=\\\n    \"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" ![2](assets/2.png)\n```", "```\n# from within a vault container\nvault policy write team-a - <<EOF\n\npath \"secret/data/team-a/*\" {\n capabilities = [\"read\"]\n}\nEOF\n```", "```\nvault policy list\ndefault\nteam-a\nroot\n```", "```\nvault write auth/kubernetes/role/database \\\n    bound_service_account_names=webapp \\ ![1](assets/1.png)\n    bound_service_account_namespaces=team-a \\ ![2](assets/2.png)\n    policies=team-a \\ ![3](assets/3.png)\n    ttl=20m ![4](assets/4.png)\n```", "```\napiVersion: secrets-store.csi.x-k8s.io/v1alpha1\nkind: SecretProviderClass\nmetadata:\n  name: apitoken\nspec:\n  provider: vault\n  parameters:\n    roleName: \"teama\"\n    vaultAddress: \"https://vault.secret-store:8000\" ![1](assets/1.png)\n    objects:  |\n      array:\n        - |\n          objectPath: \"/secret/team-a\" ![2](assets/2.png)\n          objectName: \"apitoken\" ![3](assets/3.png)\n          objectVersion: \"\"\n```", "```\nkind: Pod\napiVersion: v1\nmetadata:\n  name: busybox\nspec:\n  containers:\n  - image:\n    name: busybox\n    volumeMounts:\n    - name: secrets-api\n      mountPath: \"/etc/secrets/apitoken\"\n      readOnly: true\n  volumes:\n    - name: secrets-api\n      csi:\n        driver: secrets-store.csi.k8s.com\n        readOnly: true\n        volumeAttributes:\n          secretProviderClass: \"apitoken\"\n```", "```\nlevel=info msg=\"provider command invoked: /etc/kubernetes/\nsecrets-store-csi-providers/vault/provider-vault --attributes [REDACTED]\n--secrets [REDACTED] [--targetPath /var/lib/kubelet/pods/\n643d7d88-fa58-4f3f-a7eb-341c0adb5a88/volumes/kubernetes.io~csi/\nsecrets-store-inline/mount --permission 420]\"\n```", "```\nkubectl apply -f\nhttps://github.com/bitnami-labs/sealed-secrets/releases/\\\ndownload/v0.9.8/controller.yaml\n```", "```\nkubeseal --fetch-cert\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  dbuser: aGVwdGlvCg==\n  dbkey: YmVhcmNhbm9lCg==\n```", "```\nkubeseal mysecret.yaml\n```", "```\n{\n  \"kind\": \"SealedSecret\",\n  \"apiVersion\": \"bitnami.com/v1alpha1\",\n  \"metadata\": {\n    \"name\": \"mysecret\",\n    \"namespace\": \"default\",\n    \"creationTimestamp\": null\n  },\n  \"spec\": {\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"mysecret\",\n        \"namespace\": \"default\",\n        \"creationTimestamp\": null\n      },\n      \"type\": \"Opaque\"\n    },\n    \"encryptedData\": {\n      \"dbkey\": \"gCHJL+3bTRLw6vL4Gf......\",\n      \"dbuser\": \"AgCHJL+3bT......\"\n    }\n  },\n  \"status\": {\n\n  }\n}\n```", "```\nownerReferences:\n- apiVersion: bitnami.com/v1alpha1\n  controller: true\n  kind: SealedSecret\n  name: mysecret\n  uid: 49ce4ab0-3b48-4c8c-8450-d3c90aceb9ee\n```"]