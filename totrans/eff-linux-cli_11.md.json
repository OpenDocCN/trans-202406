["```\n$ cut -d: -f1 /etc/passwd | sort\navahi\nbackup\ndaemon\n⋮\n```", "```\n$ awk -F: '$3>=1000 {print $1}' /etc/passwd\njones\nsmith\n```", "```\n$ awk -F: '$3>=1000 {print $1}' /etc/passwd \\\n  | xargs -I@ echo \"Hi there, @!\"\nHi there, jones!\nHi there, smith!\n```", "```\n$ awk -F: '$3>=1000 {print $1}' /etc/passwd \\\n  | xargs -I@ echo 'echo \"Hi there, @!\" | mail -s greetings @'\necho \"Hi there, jones!\" | mail -s greetings jones\necho \"Hi there, smith!\" | mail -s greetings smith\n```", "```\n$ awk -F: '$3>=1000 {print $1}' /etc/passwd \\\n  | xargs -I@ echo 'echo \"Hi there, @!\" | mail -s greetings @' \\\n  | bash\necho \"Hi there, jones!\" | mail -s greetings jones\necho \"Hi there, smith!\" | mail -s greetings smith\n```", "```\n$ find $HOME -name animals.txt -print\n/home/smith/Work/Writing/Books/Lists/animals.txt\n```", "```\n$ find $HOME -print > $HOME/.ALLFILES\n$ head -n3 $HOME/.ALLFILES\n/home/smith\n/home/smith/Work\n/home/smith/Work/resume.pdf\n⋮\n```", "```\n$ grep animals.txt $HOME/.ALLFILES\n/home/smith/Work/Writing/Books/Lists/animals.txt\n```", "```\n#!/bin/bash\n# $@ means all arguments provided to the script\ngrep \"$@\" $HOME/.ALLFILES\n```", "```\n$ chmod +x ff\n$ echo $PATH                                        *Check your search path*\n/home/smith/bin:/usr/local/bin:/usr/bin:/bin\n$ mv ff ~/bin\n```", "```\n$ ff animal\n/home/smith/Work/Writing/Books/Lists/animals.txt\n$ ff -i animal | less                               *Case-insensitive grep*\n/home/smith/Work/Writing/Books/Lists/animals.txt\n/home/smith/Vacations/Zoos/Animals/pandas.txt\n/home/smith/Vacations/Zoos/Animals/tigers.txt\n⋮\n$ ff -i animal | wc -l                              *How many matches?*\n16\n```", "```\nexample.com\noreilly.com\nefficientlinux.com\n⋮\n```", "```\n$ whois example.com | less\nDomain Name: EXAMPLE.COM\nRegistry Domain ID: 2336799_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.iana.org\nUpdated Date: 2021-08-14T07:01:44Z\nCreation Date: 1995-08-14T04:00:00Z\nRegistry Expiry Date: 2022-08-13T04:00:00Z\n⋮\n```", "```\n$ whois example.com | grep 'Registry Expiry Date:'\nRegistry Expiry Date: 2022-08-13T04:00:00Z\n$ whois example.com | grep 'Registry Expiry Date:' | awk '{print $4}'\n2022-08-13T04:00:00Z\n```", "```\n$ date --date 2022-08-13T04:00:00Z\nSat Aug 13 00:00:00 EDT 2022\n$ date --date 2022-08-13T04:00:00Z +'%Y-%m-%d'       *Year-month-day format*\n2022-08-13\n```", "```\n$ echo $(whois example.com | grep 'Registry Expiry Date:' | awk '{print $4}')\n2022-08-13T04:00:00Z\n$ date \\\n  --date $(whois example.com \\\n           | grep 'Registry Expiry Date:' \\\n\t   | awk '{print $4}') \\\n  +'%Y-%m-%d'\n2022-08-13\n```", "```\n$ ./check-expiry example.com\n2022-08-13\texample.com\n```", "```\n#!/bin/bash\nexpdate=$(date \\\n            --date $(whois \"$1\" \\\n\t             | grep 'Registry Expiry Date:' \\\n\t\t     | awk '{print $4}') \\\n            +'%Y-%m-%d')\necho \"$expdate\t$1\"\t\t# Two values separated by a tab\n```", "```\n#!/bin/bash\ncat domains.txt | while read domain; do\n    ./check-expiry \"$domain\"\n    sleep 5\t\t\t# Be kind to the registrar's server\ndone\n```", "```\n$ ./check-expiry-all &> expiry.txt &\n```", "```\n$ cat expiry.txt\n2022-08-13\texample.com\n2022-05-26\toreilly.com\n2022-09-17\tefficientlinux.com\n⋮\n```", "```\n$ sort -n expiry.txt | head -n1\n2022-05-26\toreilly.com\n```", "```\n$ awk \"\\$1<=\\\"$(date +%Y-%m-%d)\\\"\" expiry.txt\n```", "```\n201\tNJ\tHackensack, Jersey City\n202\tDC\tWashington\n203\tCT\tNew Haven, Stamford\n⋮\n989\tMI\tSaginaw\n```", "```\nHackensack, Jersey City\t201\tNJ\nWashington\t202\tDC\n⋮\n```", "```\n$ grep -w NJ areacodes.txt\n201\tNJ\tHackensack, Jersey City\n551\tNJ\tHackensack, Jersey City\n609\tNJ\tAtlantic City, Trenton, southeast and central west\n⋮\n```", "```\n$ grep -w 202 areacodes.txt\n202\tDC\tWashington\n```", "```\n$ grep Washing areacodes.txt\n202\tDC\tWashington\n227\tMD\tSilver Spring, Washington suburbs, Frederick\n240\tMD\tSilver Spring, Washington suburbs, Frederick\n⋮\n```", "```\n$ wc -l areacodes.txt\n375 areacodes.txt\n```", "```\n$ cut -f2 areacodes.txt | sort | uniq -c | sort -nr | head -n1\n     38 CA\n```", "```\n$ awk -F'\\t' '{printf \"%s,%s,\\\"%s\\\"\\n\", $1, $2, $3}' areacodes.txt \\\n  > areacodes.csv\n$ head -n3 areacodes.csv\n201,NJ,\"Hackensack, Jersey City\"\n202,DC,\"Washington\"\n203,CT,\"New Haven, Stamford\"\n```", "```\n$ awk '$2~/^NJ$/{ac=ac FS $1} END {print \"NJ:\" ac}' areacodes.txt\nNJ: 201 551 609 732 848 856 862 908 973\n```", "```\n$ awk '{arr[$2]=arr[$2] \" \" $1} \\\n         END {for (i in arr) print i \":\" arr[i]}' areacodes.txt \\\n  | sort\nAB: 403 780\nAK: 907\nAL: 205 251 256 334 659\n⋮\nWY: 307\n```", "```\n#!/bin/bash\nif [ -n \"$1\" ]; then\n  grep -iw \"$1\" areacodes.txt\nfi\n```", "```\n$ areacode 617\n617\tMA\tBoston\n```", "```\n$ touch vault                                     *Create an empty file*\n$ chmod 600 vault                                 *Set file permissions*\n$ emacs vault                                     *Edit the file*\n$ cat vault\nsally\tfake1\tgoogle.com account\nssmith\tfake2\tdropbox.com account for work\ns999\tfake3\tBank of America account, bankofamerica.com\nsmith2\tfake4\tMy blog at wordpress.org\nbirdy\tfake5\tdropbox.com account for home\n```", "```\n$ mkdir ~/etc\n$ mv vault ~/etc\n```", "```\n$ cd ~/etc\n$ grep sally vault                            *Match a username*\nsally\tfake1\tgoogle.com account\n$ grep work vault                             *Match the notes*\nssmith\tfake2\tdropbox.com account for work\n$ grep drop vault                             *Match multiple lines*\nssmith\tfake2\tdropbox.com account for work\nbirdy\tfake5\tdropbox.com account for home\n```", "```\n#!/bin/bash\n# Just print matching lines\ngrep \"$1\" $HOME/etc/vault\n```", "```\n$ chmod 700 pman\n$ mv pman ~/bin\n```", "```\n$ pman goog\nsally\tfake1\tgoogle.com account\n$ pman account\nsally\tfake1\tgoogle.com account\nssmith\tfake2\tdropbox.com account for work\ns999\tfake3\tBank of America account, bankofamerica.com\nbirdy\tfake5\tdropbox.com account for home\n$ pman facebook                                        *(produces no output)*\n```", "```\n#!/bin/bash\n# Capture the script name.\n# $0 is the path to the script, and basename prints the final filename.\nPROGRAM=$(basename $0)\n# Location of the password vault\nDATABASE=$HOME/etc/vault\n\n# Ensure that at least one argument was provided to the script.\n# The expression >&2 directs echo to print on stderr instead of stdout.\nif [ $# -ne 1 ]; then\n    >&2 echo \"$PROGRAM: look up passwords by string\"\n    >&2 echo \"Usage: $PROGRAM string\"\n    exit 1\nfi\n# Store the first argument in a friendly, named variable\nsearchstring=\"$1\"\n\n# Search the vault and print an error message if nothing matches\ngrep \"$searchstring\" \"$DATABASE\"\nif [ $? -ne 0 ]; then\n    >&2 echo \"$PROGRAM: no matches for '$searchstring'\"\n    exit 1\nfi\n```", "```\n$ pman\npman: look up passwords by string\nUsage: pman string\n$ pman smith\nssmith\tfake2\tdropbox.com account for work\nsmith2\tfake4\tMy blog at wordpress.org\n$ pman xyzzy\npman: no matches for 'xyzzy'\n```", "```\nsally\tfake1\tgoogle\tgoogle.com account\nssmith\tfake2\tdropbox\tdropbox.com account for work\ns999\tfake3\tbank\tBank of America account, bankofamerica.com\nsmith2\tfake4\tblog\tMy blog at wordpress.org\nbirdy\tfake5\tdropbox2\tdropbox.com account for home\n```", "```\n#!/bin/bash\nPROGRAM=$(basename $0)\nDATABASE=$HOME/etc/vault\n\nif [ $# -ne 1 ]; then\n    >&2 echo \"$PROGRAM: look up passwords\"\n    >&2 echo \"Usage: $PROGRAM string\"\n    exit 1\nfi\nsearchstring=\"$1\"\n\n# Look for exact matches in the third column\nmatch=$(awk '$3~/^'$searchstring'$/' \"$DATABASE\")\n\n# If the search string doesn't match a key, find all matches\nif [ -z \"$match\" ]; then\n    match=$(awk \"/$searchstring/\" \"$DATABASE\")\nfi\n\n# If still no match, print an error message and exit\nif [ -z \"$match\" ]; then\n    >&2 echo \"$PROGRAM: no matches for '$searchstring'\"\n    exit 1\nfi\n\n# Print the match\necho \"$match\"\n```", "```\n$ pman dropbox\nssmith\tfake2\tdropbox\tdropbox.com account for work\n$ pman drop\nssmith\tfake2\tdropbox\tdropbox.com account for work\nbirdy\tfake5\tdropbox2\tdropbox.com account for home\n```", "```\n$ gpg --quick-generate-key *your_email_address* default default never\n```", "```\n$ cd ~/etc\n$ gpg -e -r *your_email_address* vault\n$ ls vault* \nvault   vault.gpg\n```", "```\n$ gpg -d -q vault.gpg\nPassphrase: xxxxxxxx\nsally\tfake1\tgoogle\tgoogle.com account\nssmith\tfake2\tdropbox\tdropbox.com account for work\n⋮\n```", "```\n#!/bin/bash\nPROGRAM=$(basename $0)\n# Use the encrypted file\nDATABASE=$HOME/etc/vault.gpg\n\nif [ $# -ne 1 ]; then\n    >&2 echo \"$PROGRAM: look up passwords\"\n    >&2 echo \"Usage: $PROGRAM string\"\n    exit 1\nfi\nsearchstring=\"$1\"\n\n# Store the decrypted text in a variable\ndecrypted=$(gpg -d -q \"$DATABASE\")\n# Look for exact matches in the third column\nmatch=$(echo \"$decrypted\" | awk '$3~/^'$searchstring'$/')\n\n# If the search string doesn't match a key, find all matches\nif [ -z \"$match\" ]; then\n    match=$(echo \"$decrypted\" | awk \"/$searchstring/\")\nfi\n\n# If still no match, print an error message and exit\nif [ -z \"$match\" ]; then\n    >&2 echo \"$PROGRAM: no matches for '$searchstring'\"\n    exit 1\nfi\n\n# Print the match\necho \"$match\"\n```", "```\n$ pman dropbox\nPassphrase: xxxxxxxx\nssmith\tfake2\tdropbox\tdropbox.com account for work\n$ pman drop\nPassphrase: xxxxxxxx\nssmith\tfake2\tdropbox\tdropbox.com account for work\nbirdy\tfake5\tdropbox2\tdropbox.com account for home\n```", "```\n    decrypted=$(gpg -d -q \"$DATABASE\" | grep -v '^#')\n    ```"]