["```\nlet defaults = UserDefaults.standard\ndefaults.set(\"some string value\", forKey: \"someKey\")\n```", "```\nlet defaults = UserDefaults.standard\n\n// Boolean\ndefaults.set(true, forKey: \"nightMode\")\n\n// Number\ndefaults.set(2.0, forKey: \"playbackSpeed\")\n\n// String\ndefaults.set(\"en-US\", forKey: \"locale\")\n\n// URL\nlet url = URL(string: \"https://www.example.com/api\")\ndefaults.set(url, forKey: \"apiURL\")\n```", "```\n@objc(SomeObject)\nclass SomeObject: NSObject, NSCoding {\n    let someProperty: String\n\n    init(someProperty: String) {\n        self.someProperty = someProperty\n    }\n\n    // MARK: NSCoding protocol conformance\n\n    required convenience init?(coder aDecoder: NSCoder) {\n        guard let someProperty = aDecoder.decodeObject(forKey:\n        \"someProperty\") as? String else {\n            return nil\n        }\n        self.init(someProperty: someProperty)\n    }\n\n    func encode(with aCoder: NSCoder) {\n        aCoder.encode(someProperty, forKey: \"someProperty\")\n    }\n}\n\nlet someObject = SomeObject(someProperty: \"some value\")\n\nlet defaults = UserDefaults.standard\ndefaults.set(someObject, forKey: \"myObject\")\n```", "```\nstruct SomeObject: Codable {\n    let someProperty: String\n}\n\nlet someObject = SomeObject(someProperty: \"some value\")\n\n// Store the object\nlet defaults = UserDefaults.standard\nif let json = try? JSONEncoder().encode(someObject) {\n    defaults.set(json, forKey: \"myObject\")\n}\n```", "```\n// Read the value\nlet json = defaults.value(forKey: \"myObject\") as! Data\nlet someObject = try? JSONDecoder().decode(SomeObject.self, from: json)\n```", "```\nlet defaults = UserDefaults.standard\ndefaults.removeObject(forKey: \"someKey\")\n```", "```\nlet defaults = UserDefaults.standard\nlet someValue = defaults.value(forKey: \"someKey\")\n```", "```\nlet defaults = UserDefaults.standard\n\n// Boolean\nlet nightMode = defaults.bool(forKey: \"nightMode\") // true\n\n// Number\nlet playbackSpeed = defaults.double(forKey: \"playbackSpeed\") // 2.0\n\n// String\nlet locale = defaults.string(forKey: \"locale\") // \"en-US\"\n\n// URL\nlet apiURL = defaults.url(forKey: \"apiURL\") // https://www.example.com/api\n```", "```\n// SomeObject NSCoding example\nlet someObject = defaults.object(forKey: \"someObject\") as? SomeObject\n```", "```\nlet defaults = UserDefaults.standard\n\n// Get a dictionary representation of the current UserDefaults\nlet dictionary = defaults.dictionaryRepresentation()\n\n// Store the dictionary to disk\nlet oldData = try! NSKeyedArchiver.archivedData(\n    withRootObject: dictionary, requiringSecureCoding: true)\ntry! oldData.write(to: URL(fileURLWithPath: \"user1.plist\"))\n\n// Remove all the data\ndictionary.keys.forEach { key in\n    defaults.removeObject(forKey: key)\n}\n\n// Get the new user preferences\nlet newData = try! Data(contentsOf: URL(fileURLWithPath: \"user2.plist\"))\nif let newDictionary =\n  try? NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(newData) as? [String: Any] {\n    // Update UserDefaults with the new data\n    newDictionary.forEach { (keyValue) in\n        let (key, value) = keyValue\n        defaults.set(value, forKey: key)\n    }\n}\n```"]