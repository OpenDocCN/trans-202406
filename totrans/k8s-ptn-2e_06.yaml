- en: Chapter 4\. Health Probe
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 健康探针
- en: The *Health Probe* pattern indicates how an application can communicate its
    health state to Kubernetes. To be fully automatable, a cloud native application
    must be highly observable by allowing its state to be inferred so that Kubernetes
    can detect whether the application is up and whether it is ready to serve requests.
    These observations influence the lifecycle management of Pods and the way traffic
    is routed to the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*Health Probe* 模式表明应用程序如何将其健康状态传达给 Kubernetes。为了实现完全自动化，云原生应用程序必须通过允许推断其状态来高度可观察，以便
    Kubernetes 可以检测应用程序是否启动并且是否准备好响应请求。这些观察结果会影响 Pod 的生命周期管理以及流量路由到应用程序的方式。'
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Kubernetes regularly checks the container process status and restarts it if
    issues are detected. However, from practice, we know that checking the process
    status is not sufficient to determine the health of an application. In many cases,
    an application hangs, but its process is still up and running. For example, a
    Java application may throw an `OutOfMemoryError` and still have the JVM process
    running. Alternatively, an application may freeze because it runs into an infinite
    loop, deadlock, or some thrashing (cache, heap, process). To detect these kinds
    of situations, Kubernetes needs a reliable way to check the health of applications—that
    is, not to understand how an application works internally, but to check whether
    the application is functioning as expected and capable of serving consumers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 定期检查容器进程状态，并在检测到问题时重新启动它。然而，从实践中我们知道，仅检查进程状态不足以确定应用程序的健康状态。在许多情况下，应用程序可能会挂起，但其进程仍在运行。例如，Java
    应用程序可能会抛出 `OutOfMemoryError`，但 JVM 进程仍在运行。或者，应用程序可能会因进入无限循环、死锁或某种 thrashing（缓存、堆、进程）而冻结。为了检测这些情况，Kubernetes
    需要一种可靠的方式来检查应用程序的健康状态——即不是理解应用程序内部的工作方式，而是检查应用程序是否按预期运行，并能够为消费者提供服务。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: The software industry has accepted the fact that it is not possible to write
    bug-free code. Moreover, the chances for failure increase even more when working
    with distributed applications. As a result, the focus for dealing with failures
    has shifted from avoiding them to detecting faults and recovering. Detecting failure
    is not a simple task that can be performed uniformly for all applications, as
    everyone has different definitions of a failure. Also, various types of failures
    require different corrective actions. Transient failures may self-recover, given
    enough time, and some other failures may need a restart of the application. Let’s
    look at the checks Kubernetes uses to detect and correct failures.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 软件行业已经接受了一个事实，即编写无 bug 的代码是不可能的。此外，与分布式应用程序一起工作时，故障的可能性进一步增加。因此，处理故障的重点已经从避免转移到检测故障和恢复上。检测故障并非一项可以为所有应用程序统一执行的简单任务，因为每个人对故障有不同的定义。而且，不同类型的故障需要不同的纠正措施。瞬态故障可能会在足够的时间内自行恢复，而其他一些故障可能需要重新启动应用程序。让我们看看
    Kubernetes 用于检测和纠正故障的检查方法。
- en: Process Health Checks
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程健康检查
- en: A *process health check* is the simplest health check the Kubelet constantly
    performs on the container processes. If the container processes are not running,
    the container is restarted on the node to which the Pod is assigned. So even without
    any other health checks, the application becomes slightly more robust with this
    generic check. If your application is capable of detecting any kind of failure
    and shutting itself down, the process health check is all you need. However, for
    most cases, that is not enough, and other types of health checks are also necessary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*进程健康检查* 是 Kubelet 对容器进程定期执行的最简单健康检查。如果容器进程未运行，将在分配了 Pod 的节点上重新启动容器。因此，即使没有其他健康检查，通过这种通用检查，应用程序的健壮性也会稍有提升。如果您的应用程序能够检测到任何类型的故障并自行关闭，进程健康检查就足够了。然而，对于大多数情况来说，这还不够，还需要其他类型的健康检查。'
- en: Liveness Probes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存活性探针
- en: 'If your application runs into a deadlock, it is still considered healthy from
    the process health check’s point of view. To detect this kind of issue and any
    other types of failure according to your application business logic, Kubernetes
    has *liveness probes*—regular checks performed by the Kubelet agent that asks
    your container to confirm it is still healthy. It is important to have the health
    check performed from the outside rather than in the application itself, as some
    failures may prevent the application watchdog from reporting its failure. Regarding
    corrective action, this health check is similar to a process health check, since
    if a failure is detected, the container is restarted. However, it offers more
    flexibility regarding which methods to use for checking the application health,
    as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序遇到死锁，从进程健康检查的角度来看它仍然是健康的。为了检测这种类型的问题以及根据您的应用程序业务逻辑检测任何其他类型的故障，Kubernetes
    提供了*存活性探测*——由 Kubelet 代理执行的定期检查，要求您的容器确认其仍然是健康的。重要的是从外部执行健康检查而不是在应用程序本身中执行，因为某些故障可能会阻止应用程序看门狗报告其故障。关于纠正措施，此健康检查类似于进程健康检查，因为如果检测到故障，容器将被重新启动。但它在选择用于检查应用程序健康状况的方法方面提供了更大的灵活性，具体如下：
- en: HTTP probe
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 探测
- en: Performs an HTTP GET request to the container IP address and expects a successful
    HTTP response code between 200 and 399.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对容器IP地址执行HTTP GET请求，并期望返回成功的HTTP响应代码（200到399之间）。
- en: TCP Socket probe
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TCP Socket 探测
- en: Assumes a successful TCP connection.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设成功的TCP连接。
- en: Exec probe
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 执行探测
- en: Executes an arbitrary command in the container’s user and kernel namespace and
    expects a successful exit code (0).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器的用户和内核命名空间中执行任意命令，并期望成功的退出代码（0）。
- en: gRPC probe
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 探测
- en: Leverages gRPC’s intrinsic support for health checks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 gRPC 对健康检查的内在支持。
- en: 'In addition to the probe action, the health check behavior can be influenced
    with the following parameters:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了探测操作外，健康检查行为还受以下参数影响：
- en: '`initialDelaySeconds`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`initialDelaySeconds`'
- en: Specifies the number of seconds to wait until the first liveness probe is checked.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 指定等待第一个存活性探测检查之前的秒数。
- en: '`periodSeconds`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`periodSeconds`'
- en: The interval in seconds between liveness probe checks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 存活性探测检查之间的秒数间隔。
- en: '`timeoutSeconds`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeoutSeconds`'
- en: The maximum time allowed for a probe check to return before it is considered
    to have failed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在探测检查返回前允许的最大时间，超过此时间将视为失败。
- en: '`failureThreshold`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`failureThreshold`'
- en: Specifies how many times a probe check needs to fail in a row until the container
    is considered to be unhealthy and needs to be restarted.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 指定探测检查连续失败多少次后，容器被视为不健康并需要重新启动。
- en: An example HTTP-based liveness probe is shown in [Example 4-1](#ex-liveness-probe).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了一个基于HTTP的存活性探测示例，见[示例 4-1](#ex-liveness-probe)。
- en: Example 4-1\. Container with a liveness probe
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-1\. 带有存活性探测的容器
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_health_probe_CO1-1)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_health_probe_CO1-1)'
- en: HTTP probe to a health-check endpoint.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 向健康检查端点进行HTTP探测。
- en: '[![2](assets/2.png)](#co_health_probe_CO1-2)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_health_probe_CO1-2)'
- en: Wait 30 seconds before doing the first liveness check to give the application
    some time to warm up.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行第一次存活性检查之前等待30秒，以便应用程序有些时间进行预热。
- en: Depending on the nature of your application, you can choose the method that
    is most suitable for you. It is up to your application to decide whether it considers
    itself healthy or not. However, keep in mind that the result of not passing a
    health check is that your container will restart. If restarting your container
    does not help, there is no benefit to having a failing health check as Kubernetes
    restarts your container without fixing the underlying issue.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的应用性质，您可以选择最适合您的方法。由应用程序决定是否认为自己是健康的。但请注意，未通过健康检查的结果是容器将重新启动。如果重新启动容器没有帮助，那么健康检查失败将毫无意义，因为
    Kubernetes 会在不修复潜在问题的情况下重新启动您的容器。
- en: Readiness Probes
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用性探测
- en: Liveness checks help keep applications healthy by killing unhealthy containers
    and replacing them with new ones. But sometimes, when a container is not healthy,
    restarting it may not help. A typical example is a container that is still starting
    up and is not ready to handle any requests. Another example is an application
    that is still waiting for a dependency like a database to be available. Also,
    a container can be overloaded, increasing its latency, so you want it to shield
    itself from the additional load for a while and indicate that it is not ready
    until the load decreases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 存活检查通过终止不健康的容器并用新的替换来保持应用程序健康。但有时，当容器不健康时，重新启动可能无济于事。一个典型的例子是容器仍在启动中，尚未准备好处理任何请求。另一个例子是应用程序仍在等待依赖项（如数据库）可用。此外，容器可能会因负载过重而过载，增加延迟，因此你希望它在一段时间内对额外负载进行屏蔽，并指示它在负载减少之前不可用。
- en: For this kind of scenario, Kubernetes has *readiness probes*. The methods (HTTP,
    TCP, Exec, gRPC) and timing options for performing readiness checks are the same
    as for liveness checks, but the corrective action is different. Rather than restarting
    the container, a failed readiness probe causes the container to be removed from
    the service endpoint and not receive any new traffic. Readiness probes signal
    when a container is ready so that it has some time to warm up before getting hit
    with requests from the service. It is also useful for shielding the container
    from traffic at later stages, as readiness probes are performed regularly, similarly
    to liveness checks. [Example 4-2](#ex-readiness-probe) shows how a readiness probe
    can be implemented by probing the existence of a file the application creates
    when it is ready for operations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，Kubernetes有*就绪探测*。执行就绪检查的方法（HTTP、TCP、Exec、gRPC）和定时选项与存活检查相同，但纠正措施不同。与重新启动容器不同，失败的就绪探测会导致容器从服务端点中移除，并且不接收任何新的流量。就绪探测信号容器何时准备好，以便在受到来自服务的请求之前有一些时间预热。它还有助于在后期阶段屏蔽容器免受流量影响，因为就绪探测定期执行，类似于存活检查。[示例 4-2](#ex-readiness-probe)展示了如何通过探测应用程序创建的文件的存在来实现就绪探测，以指示应用程序已准备好运行。
- en: Example 4-2\. Container with readiness probe
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-2\. 带就绪探测的容器
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_health_probe_CO2-1)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_health_probe_CO2-1)'
- en: Check for the existence of a file the application creates to indicate it’s ready
    to serve requests. `stat` returns an error if the file does not exist, letting
    the readiness check fail.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 检查应用程序创建的文件的存在，以指示它已准备好提供服务。如果文件不存在，`stat`会返回错误，导致就绪检查失败。
- en: Again, it is up to your implementation of the health check to decide when your
    application is ready to do its job and when it should be left alone. While process
    health checks and liveness checks are intended to recover from the failure by
    restarting the container, the readiness check buys time for your application and
    expects it to recover by itself. Keep in mind that Kubernetes tries to prevent
    your container from receiving new requests (when it is shutting down, for example),
    regardless of whether the readiness check still passes after having received a
    SIGTERM signal.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，由健康检查的实现决定何时应用程序准备好执行其工作，以及何时应该让其独自运行。虽然进程健康检查和存活检查旨在通过重新启动容器来从故障中恢复，但就应用程序而言，就绪检查为其提供了时间，并期望其能够自行恢复。请记住，Kubernetes试图防止容器在收到SIGTERM信号后继续接收新请求（例如在关闭时），无论就绪检查在接收SIGTERM信号后是否仍然通过。
- en: In many cases, liveness and readiness probes are performing the same checks.
    However, the presence of a readiness probe gives your container time to start
    up. Only by passing the readiness check is a Deployment considered to be successful,
    so that, for example, Pods with an older version can be terminated as part of
    a rolling update.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，存活和就绪探测执行相同的检查。然而，有了就绪探测，您的容器有时间启动。只有通过就绪检查，部署才被视为成功，以便例如，具有旧版本的Pod可以作为滚动更新的一部分终止。
- en: For applications that need a very long time to initialize, it’s likely that
    failing liveness checks will cause your container to be restarted before the startup
    is finished. To prevent these unwanted shutdowns, you can use *startup probes*
    to indicate when the startup is finished.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要很长时间初始化的应用程序，很可能在启动完成之前未能通过存活检查导致容器重新启动。为了防止这些意外关闭，可以使用*启动探测*来指示启动何时完成。
- en: Startup Probes
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动探测
- en: Liveness probes can also be used exclusively to allow for long startup times
    by stretching the check intervals, increasing the number of retries, and adding
    a longer delay for the initial liveness probe check. This strategy, however, is
    not optimal since these timing parameters will also apply for the post-startup
    phase and will prevent your application from quickly restarting when fatal errors
    occur.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃性探针也可以仅用于通过延长检查间隔、增加重试次数和在初始活跃性探针检查中添加较长延迟来允许较长的启动时间。然而，这种策略并不理想，因为这些定时参数也将适用于启动后阶段，并且将阻止应用程序在发生致命错误时快速重新启动。
- en: When applications take minutes to start (for example, Jakarta EE application
    servers), Kubernetes provides *startup probes*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序启动需要几分钟（例如，Jakarta EE 应用服务器）时，Kubernetes 提供了*启动探针*。
- en: Startup probes are configured with the same format as liveness probes but allow
    for different values for the probe action and the timing parameters. The `periodSeconds`
    and `failureThreshold` parameters are configured with much larger values compared
    to the corresponding liveness probes to factor in the longer application startup.
    Liveness and readiness probes are called only after the startup probe reports
    success. The container is restarted if the startup probe is not successful within
    the configured failure threshold.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 启动探针配置与活跃性探针相同，但允许探针动作和定时参数的不同值。 `periodSeconds` 和 `failureThreshold` 参数的配置值比相应的活跃性探针大得多，以考虑较长的应用程序启动时间。只有启动探针报告成功后，才会调用活跃性和可用性探针。如果启动探针在配置的失败阈值内不成功，则容器将重新启动。
- en: While the same probe action can be used for liveness and startup probes, a successful
    startup is often indicated by a marker file that is checked for existence by the
    startup probe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然启动和活跃性探针可以使用相同的探测动作，但通常通过启动探针检查存在的标记文件指示成功启动。
- en: '[Example 4-4](#ex-startup-probe) is a typical example of a Jakarta EE application
    server that takes a long time to start.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-4](#ex-startup-probe) 是一个典型的Jakarta EE应用服务器启动时间较长的示例。'
- en: Example 4-4\. Container with a startup and liveness probe
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-4\. 带有启动和活跃性探针的容器
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_health_probe_CO4-1)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_health_probe_CO4-1)'
- en: JBoss WildFly Jakarta EE server that will take its time to start.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss WildFly Jakarta EE 服务器启动可能需要一些时间。
- en: '[![2](assets/2.png)](#co_health_probe_CO4-2)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_health_probe_CO4-2)'
- en: Marker file that is created by WildFly after a successful startup.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 在成功启动后创建的标记文件。
- en: '[![3](assets/3.png)](#co_health_probe_CO4-3)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_health_probe_CO4-3)'
- en: Timing parameters that specify that the container should be restarted when it
    has not been passing the startup probe after 15 minutes (60-second pause until
    the first check, then maximal 15 checks with 60-second intervals).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 定时参数指定容器在启动探针在首次检查后未通过之后的15分钟内应重新启动（60秒的暂停直到第一次检查，然后最多15次检查，每次间隔60秒）。
- en: '[![4](assets/4.png)](#co_health_probe_CO4-4)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_health_probe_CO4-4)'
- en: Timing parameters for the liveness probes are much smaller, resulting in a restart
    if subsequent liveness probes fail within 20 seconds (three retries with 10-second
    pauses between each).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃性探针的定时参数要小得多，如果后续活跃性探针在20秒内失败，则会重新启动（每次间隔10秒的三次重试）。
- en: The liveness, readiness, and startup probes are fundamental building blocks
    of the automation of cloud native applications. Application frameworks such as
    Quarkus SmallRye Health, Spring Boot Actuator, WildFly Swarm health check, Apache
    Karaf health check, or the MicroProfile spec for Java provide implementations
    for offering health probes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃性、可用性和启动探针是云原生应用程序自动化的基本构建块。诸如Quarkus SmallRye Health、Spring Boot Actuator、WildFly
    Swarm health check、Apache Karaf health check或Java的MicroProfile规范等应用框架提供了健康探针的实现。
- en: Discussion
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: To be fully automatable, cloud native applications must be highly observable
    by providing a means for the managing platform to read and interpret the application
    health, and if necessary, take corrective actions. Health checks play a fundamental
    role in the automation of activities such as deployment, self-healing, scaling,
    and others. However, there are also other means through which your application
    can provide more visibility about its health.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全自动化，云原生应用程序必须通过提供管理平台读取和解释应用程序健康状态的手段来进行高度观察。健康检查在部署、自愈、扩展等活动的自动化中起着基本作用。然而，还有其他方法可以使您的应用程序提供关于其健康状况更多的可见性。
- en: The obvious and old method for this purpose is through logging. It is a good
    practice for containers to log any significant events to system out and system
    error and have these logs collected to a central location for further analysis.
    Logs are not typically used for taking automated actions but rather to raise alerts
    and further investigations. A more useful aspect of logs is the postmortem analysis
    of failures and detection of unnoticeable errors.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 达到此目的的显而易见且古老的方法是通过日志记录。对于容器来说，将任何重要事件记录到系统输出和系统错误，并将这些日志收集到中央位置进行进一步分析，是一个良好的实践。通常情况下，日志不用于自动采取操作，而是用于引发警报和进一步的调查。日志的更有用的方面是故障的事后分析和检测不明显的错误。
- en: Apart from logging to standard streams, it is also a good practice to log the
    reason for exiting a container to */dev/termination-log*. This location is the
    place where the container can state its last will before being permanently vanished.^([1](ch04.html#idm45902104237024))
    [Figure 4-1](#img-observability) shows the possible options for how a container
    can communicate with the runtime platform.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了记录到标准流之外，将容器退出的原因记录到 */dev/termination-log* 也是一种良好的实践。这个位置是容器在永久消失之前声明其最后遗愿的地方。^([1](ch04.html#idm45902104237024))
    [图 4-1](#img-observability) 展示了容器与运行时平台进行通信的可能选项。
- en: '![Container observability options](assets/kup2_0401.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![容器可观察性选项](assets/kup2_0401.png)'
- en: Figure 4-1\. Container observability options
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 容器可观察性选项
- en: Containers provide a unified way for packaging and running applications by treating
    them like opaque systems. However, any container that is aiming to become a cloud
    native citizen must provide APIs for the runtime environment to observe the container
    health and act accordingly. This support is a fundamental prerequisite for automation
    of the container updates and lifecycle in a unified way, which in turn improves
    the system’s resilience and user experience. In practical terms, that means, as
    a very minimum, your containerized application must provide APIs for the different
    kinds of health checks (liveness and readiness).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 容器通过将其视为不透明系统的统一方式提供了打包和运行应用程序的方法。然而，任何旨在成为云原生成员的容器必须为运行时环境提供 API，以观察容器的健康状况并据此采取行动。这种支持是统一方式自动化容器更新和生命周期的基本先决条件，从而提高系统的弹性和用户体验。在实践中，这意味着，作为最低要求，您的容器化应用程序必须为不同类型的健康检查（活跃性和就绪性）提供
    API。
- en: Even-better-behaving applications must also provide other means for the managing
    platform to observe the state of the containerized application by integrating
    with tracing and metrics-gathering libraries such as OpenTracing or Prometheus.
    Treat your application as an opaque system, but implement all the necessary APIs
    to help the platform observe and manage your application in the best way possible.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的行为应用程序还必须通过集成跟踪和度量收集库（如OpenTracing或Prometheus）提供其他手段，使管理平台能够观察容器化应用程序的状态。将您的应用程序视为不透明系统，但实现所有必要的
    API，以帮助平台以最佳方式观察和管理您的应用程序。
- en: The next pattern, *Managed Lifecycle*, is also about communication between applications
    and the Kubernetes management layer, but coming from the other direction. It’s
    about how your application gets informed about important Pod lifecycle events.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个模式，*托管生命周期*，也涉及应用程序与 Kubernetes 管理层之间的通信，但角度相反。它关注的是应用程序如何被告知重要的 Pod 生命周期事件。
- en: More Information
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Health Probe Example](https://oreil.ly/moMx7)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[健康探测示例](https://oreil.ly/moMx7)'
- en: '[Configure Liveness, Readiness, and Startup Probes](https://oreil.ly/h862g)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配置活跃性、就绪性和启动探测](https://oreil.ly/h862g)'
- en: '[Kubernetes Best Practices: Setting Up Health Checks with Readiness and Liveness
    Probes](https://oreil.ly/q0wKy)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 最佳实践：使用就绪性和活跃性探测设置健康检查](https://oreil.ly/q0wKy)'
- en: '[Graceful Shutdown with Node.js and Kubernetes](https://oreil.ly/kEik7)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Node.js 和 Kubernetes 的优雅关闭](https://oreil.ly/kEik7)'
- en: '[Kubernetes Startup Probe—Practical Guide](https://oreil.ly/MHbup)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 启动探测—实用指南](https://oreil.ly/MHbup)'
- en: '[Improving Application Availability with Pod Readiness Gates](https://oreil.ly/h_W1G)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Pod 就绪门提高应用程序可用性](https://oreil.ly/h_W1G)'
- en: '[Customizing the Termination Message](https://oreil.ly/O2sA2)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定制终止消息](https://oreil.ly/O2sA2)'
- en: '[SmallRye Health](https://oreil.ly/lhetJ)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SmallRye 健康](https://oreil.ly/lhetJ)'
- en: '[Spring Boot Actuator: Production-Ready Features](https://oreil.ly/7kYX6)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Spring Boot 执行器：生产就绪特性](https://oreil.ly/7kYX6)'
- en: '[Advanced Health Check Patterns in Kubernetes](https://oreil.ly/aKEGe)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 中的高级健康检查模式](https://oreil.ly/aKEGe)'
- en: ^([1](ch04.html#idm45902104237024-marker)) Alternatively, you could change the
    `.spec.containers.terminationMessagePolicy` field of a Pod to `FallbackToLogsOnError`,
    in which case the last line of the log is used for the Pod’s status message when
    it terminates.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.html#idm45902104237024-marker)) 或者，您可以将 Pod 的 `.spec.containers.terminationMessagePolicy`
    字段更改为 `FallbackToLogsOnError`，在这种情况下，当 Pod 终止时，日志的最后一行用作 Pod 的状态消息。
