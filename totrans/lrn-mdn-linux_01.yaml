- en: Chapter 1\. Introduction to Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is the most widely used operating system, used in everything from mobile
    devices to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: You might not be familiar with the concept of an operating system. Or you might
    be using an operating system such as Microsoft Windows without giving it too much
    thought. Or maybe you are new to Linux. To set the scene and get you in the right
    mindset, we’ll take a bird’s-eye view of operating systems and Linux in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll first discuss what *modern* means in the context of the book. Then we’ll
    review a high-level Linux backstory, looking at important events and phases over
    the past 30 years. Further, in this chapter you’ll learn what the role of an operating
    system is in general and how Linux fills this role. We also take a quick look
    at what Linux distributions are and what resource visibility means.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to operating systems and Linux, you’ll want to read the entire
    chapter. If you’re already experienced with Linux, you might want to jump to [“A
    Ten-Thousand-Foot View of Linux”](#intro-10-view), which provides a visual overview
    as well as mapping to the book’s chapters.
  prefs: []
  type: TYPE_NORMAL
- en: But before we get into the technicalities, let’s first step back a bit and focus
    on what we mean when we say “modern Linux.” This is, surprisingly, a nontrivial
    matter.
  prefs: []
  type: TYPE_NORMAL
- en: What Are Modern Environments?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book title specifies *modern*, but what does that really mean? Well, in
    the context of this book, it can mean anything from cloud computing to a Raspberry
    Pi. In addition, the recent rise of Docker and related innovations in infrastructure
    has dramatically changed the landscape for developers and infrastructure operators
    alike.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at some of these modern environments and the prominent
    role Linux plays in them:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices
  prefs: []
  type: TYPE_NORMAL
- en: When I say “mobile phone” to our kids, they say, “In contrast to what?” In all
    fairness and seriousness, these days many phones—depending on who you ask, up
    to 80% or more—as well as tablets run Android, which is a [Linux variant](https://oreil.ly/bQ6yJ).
    These environments have aggressive requirements around power consumption and robustness,
    as we depend on them on a daily basis. If you’re interested in developing Android
    apps, consider visiting the [Android developer site](https://oreil.ly/xf5kC) for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing
  prefs: []
  type: TYPE_NORMAL
- en: With the cloud, we see at scale a similar pattern as in the mobile and micro
    space. There are new, powerful, secure, and energy-saving CPU architectures such
    as the successful ARM-based [AWS Graviton](https://oreil.ly/JzHzm) offerings,
    as well as the established heavy-lifting outsourcing to cloud providers, especially
    in the context of open source software.
  prefs: []
  type: TYPE_NORMAL
- en: Internet of (Smart) Things
  prefs: []
  type: TYPE_NORMAL
- en: I’m sure you’ve seen a lot of Internet of Things (IoT)–related projects and
    products, from sensors to drones. Many of us have already been exposed to smart
    appliances and smart cars. These environments have even more challenging requirements
    around power consumption than mobile devices. In addition, they might not even
    be running all the time but, for example, only wake up once a day to transmit
    some data. Another important aspect of these environments is [real-time capabilities](https://oreil.ly/zBsRy).
    If you’re interested in getting started with Linux in the IoT context, consider
    the [AWS IoT EduKit](https://oreil.ly/3x0uf).
  prefs: []
  type: TYPE_NORMAL
- en: Diversity of processor architectures
  prefs: []
  type: TYPE_NORMAL
- en: For the past 30 years or so, Intel has been the leading CPU manufacturer, dominating
    the microcomputer and personal computer space. Intel’s x86 architecture was considered
    the gold standard. The open approach that IBM took (publishing the specifications
    and enabling others to offer compatible devices) was promising, resulting in x86
    clones that also used Intel chips, at least initially.
  prefs: []
  type: TYPE_NORMAL
- en: While Intel is still widely used in desktop and laptop systems, with the rise
    of mobile devices we’ve seen the increasing uptake of the [ARM architecture](https://oreil.ly/sioDd)
    and recently [RISC-V](https://oreil.ly/Tf0bb). At the same time, multi-arch programming
    languages and tooling, such as Go or Rust, are becoming more and more widespread,
    creating a perfect storm.
  prefs: []
  type: TYPE_NORMAL
- en: All of these environments are examples of what I consider modern environments.
    And most, if not all of them, run on or use Linux in one form or another.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know about the modern (hardware) systems, you might wonder how we
    got here and how Linux came into being.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux Story (So Far)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux celebrated its [30th birthday](https://oreil.ly/fkMyT) in 2021\. With
    billions of users and thousands of developers, the Linux project is, without doubt,
    a worldwide (open source) success story. But how did it all this start, and how
    did we get here?
  prefs: []
  type: TYPE_NORMAL
- en: 1990s
  prefs: []
  type: TYPE_NORMAL
- en: 'We can consider Linus Torvalds’s email on August 25, 1991, to the `comp.os.minix`
    newsgroup as the birth of the Linux project, at least in terms of the public record.
    This hobby project soon took off, both in terms of lines of code (LOC) and in
    terms of adoption. For example, after less than three years, Linux 1.0.0 was released
    with over 176,000 LOCs. By that time, the original goal of being able to run most
    Unix/GNU software was already well reached. Also, the first commercial offering
    appeared in the 1990s: Red Hat Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: 2000 to 2010
  prefs: []
  type: TYPE_NORMAL
- en: As a “teenager,” Linux was not only maturing in terms of features and supported
    hardware but was also growing beyond what UNIX could do. In this time period,
    we also witnessed a huge and ever-increasing buy-in of Linux by the big players,
    that is, adoption by Google, Amazon, IBM, and so on. It was also the peak of the
    [distro wars](https://oreil.ly/l6X4Q), resulting in businesses changing their
    directions.
  prefs: []
  type: TYPE_NORMAL
- en: 2010s to now
  prefs: []
  type: TYPE_NORMAL
- en: Linux established itself as the workhorse in data centers and the cloud, as
    well as for any types of IoT devices and phones. In a sense, one can consider
    the distro wars as being over (nowadays, most commercial systems are either Red
    Hat or Debian based), and in a sense, the rise of containers (from 2014/15 on)
    is responsible for this development.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this super-quick historic review, necessary to set the context and understand
    the motivation for the scope of this book, we move on to a seemingly innocent
    question: Why does anyone need Linux, or an operating system at all?'
  prefs: []
  type: TYPE_NORMAL
- en: Why an Operating System at All?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s say you do not have an operating system (OS) available or cannot use
    one for whatever reason. You would then end up doing pretty much everything yourself:
    memory management, interrupt handling, talking with I/O devices, managing files,
    configuring and managing the network stack—the list goes on.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Technically speaking, an OS is not strictly needed. There are systems out there
    that do not have an OS. These are usually embedded systems with a tiny footprint:
    think of an IoT beacon. They simply do not have the resources available to keep
    anything else around other than one application. For example, with Rust you can
    use its Core and Standard Library to run any app on [bare metal](https://oreil.ly/zW4j7).'
  prefs: []
  type: TYPE_NORMAL
- en: An operating system takes on all this undifferentiated heavy lifting, abstracting
    away the different hardware components and providing you with a (usually) clean
    and nicely designed Application Programming Interface (API), such as is the case
    with the Linux kernel that we will have a closer look at in [Chapter 2](ch02.xhtml#kernel).
    We usually call these APIs that an OS exposes *system calls*, or *syscalls* for
    short. Higher-level programming languages such as Go, Rust, Python, or Java build
    on top of those syscalls, potentially wrapping them in libraries.
  prefs: []
  type: TYPE_NORMAL
- en: All of this allows you to focus on the business logic rather than having to
    manage the resources yourself, and also takes care of the different hardware you
    want to run your app on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at a concrete example of a syscall. Let’s say we want to identify
    (and print) the ID of the current user.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we look at the Linux syscall [`getuid(2)`](https://oreil.ly/md15Z):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: OK, so this `getuid` syscall is what we could use programmatically, from a library.
    We will discuss Linux syscalls in greater detail in [“syscalls”](ch02.xhtml#kernel-syscalls).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You might be wondering what the `(2)` means in `getuid(2)`. It’s a terminology
    that the `man` utility (think built-in help pages) uses to indicate the section
    of the command assigned in `man`, akin to a postal or country code. This is one
    example where the Unix legacy is apparent; you can find its origin in the [*Unix
    Programmer’s Manual*, seventh edition, volume 1](https://oreil.ly/DgDrF) from
    1979.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the command line (shell), we would be using the equivalent `id` command
    that in turn uses the `getuid` syscall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have a basic idea of why using an operating system, in most cases,
    makes sense, let’s move on to the topic of Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we say “Linux,” it might not be immediately clear what we mean. In this
    book, we will say “Linux kernel,” or just “kernel,” when we mean the set of syscalls
    and device drivers. Further, when we refer to [Linux distributions](https://oreil.ly/U9luq)
    (or *distros*, for short), we mean a concrete bundling of kernel and related components,
    including package management, file system layout, init system, and a shell, preselected
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you could do all of this yourself: you could download and compile
    the kernel, choose a package manager, and so on, and create (or *roll*) your own
    distro. And that’s what many folks did in the beginning. Over the years, people
    figured out that it is a better use of their time to leave this packaging (and
    also security patching) to experts, private or commercial, and simply use the
    resulting Linux distro.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are inclined to build your own distribution, maybe because you are a
    tinkerer or because you have to due to certain business restrictions, I recommend
    you take a closer look at [Arch Linux](https://oreil.ly/UBSHM), which puts you
    in control and, with a little effort, allows you to create a very customized Linux
    distro.
  prefs: []
  type: TYPE_NORMAL
- en: To get a feeling for the vastness of the distro space, including traditional
    distros (Ubuntu, Red Hat Enterprise Linux [RHEL], CentOS, etc., as discussed in
    [Chapter 6](ch06.xhtml#running-apps)) and modern distros (such as Bottlerocket
    and Flatcar; see [Chapter 9](ch09.xhtml#advanced)), take a look at [DistroWatch](https://oreil.ly/DWmrr).
  prefs: []
  type: TYPE_NORMAL
- en: 'With the distro topic out of the way, let’s move on to a totally different
    topic: resources and their visibility and isolation.'
  prefs: []
  type: TYPE_NORMAL
- en: Resource Visibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux has had, in good UNIX tradition, a by-default global view on resources.
    This leads us to the question: what does *global view* mean (in contrast to what?),
    and what are said resources?'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Why are we talking about resource visibility here in the first place? The main
    reason is to raise awareness about this topic and to get you in the right state
    of mind for one of the important themes in the context of modern Linux: containers.
    Don’t worry if you don’t get all of the details now; we will come back to this
    topic throughout the book and specifically in [Chapter 6](ch06.xhtml#running-apps),
    in which we discuss containers and their building blocks in greater detail.'
  prefs: []
  type: TYPE_NORMAL
- en: You might have heard the saying that in Unix, and by extension Linux, everything
    is a file. In the context of this book, we consider resources to be anything that
    can be used to aid the execution of software. This includes hardware and its abstractions
    (such as CPU and RAM, files), filesystems, hard disk drives, solid-state drives
    (SSDs), processes, networking-related stuff like devices or routing tables, and
    credentials representing users.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Not all resources in Linux are files or represented through a file interface.
    However, there are systems out there, such as [Plan 9](https://oreil.ly/5DkY8),
    that take this much further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at a concrete example of some Linux resources. First, we
    want to query a global property (the Linux version) and then specific hardware
    information about the CPUs in use (output edited to fit space):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_introduction_to_linux_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Print the Linux version.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_introduction_to_linux_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Print CPU-related information, filtering for model.
  prefs: []
  type: TYPE_NORMAL
- en: With the preceding commands, we learned that this system has four Intel i7 cores
    at its disposal. When you log in with a different user, would you expect to see
    the same number of CPUs?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider a different type of resource: files. For example, if the user
    `troy` creates a file under `/tmp/myfile` with permission to do so ([“Permissions”](ch04.xhtml#permissions)),
    would another user, `worf`, see the file or even be able to write to it?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, take the case of a process, that is, a program in memory that has all the
    necessary resources available to run, such as CPU and memory. Linux identifies
    a process using its *process ID*, or `PID` for short ([“Process Management”](ch02.xhtml#kernel-process-management)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_introduction_to_linux_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Print process status—that is, details about the current process—and limit output
    to show only the first six lines.
  prefs: []
  type: TYPE_NORMAL
- en: Can there be multiple processes with the same `PID` in Linux? What may sound
    like a silly or useless question turns out to be the basis for containers (see
    [“Containers”](ch06.xhtml#containers)). The answer is yes, there can be multiple
    processes with the same `PID`, in different contexts called *namespaces* (see
    [“Linux Namespaces”](ch06.xhtml#namespaces)). This happens, for example, in a
    containerized setup, such as when you’re running your app in Docker or Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Every single process might think that it is special, having `PID 1`, which in
    a more traditional setup is reserved for the root of the user space process tree
    (see [“The Linux Startup Process”](ch06.xhtml#linux-boot) for more details).
  prefs: []
  type: TYPE_NORMAL
- en: 'What we can learn from these observations is that there can be a global view
    on a given resource (two users see a file at the exact same location) as well
    as a local or virtualized view, such as the process example. This raises the question:
    is everything in Linux by default global? Spoiler: it’s not. Let’s have a closer
    look.'
  prefs: []
  type: TYPE_NORMAL
- en: Part of the illusion of having multiple users or processes running in parallel
    is the (restricted) visibility onto resources. The way to provide a local view
    on (certain supported) resources in Linux is via namespaces (see [“Linux Namespaces”](ch06.xhtml#namespaces)).
  prefs: []
  type: TYPE_NORMAL
- en: A second, independent dimension is that of isolation. When I use the term *isolation*
    here, I don’t necessarily qualify it—that is, I make no assumptions about how
    well things are isolated. For example, one way to think about process isolation
    is to restrict the memory consumption so that one process cannot starve other
    processes. For example, I give your app 1 GB of RAM to use. If it uses more, it
    gets [out-of-memory](https://oreil.ly/kvk1u) killed. This provides a certain level
    of protection. In Linux we use a kernel feature called `cgroups` to provide this
    kind of isolation, and in [“Linux cgroups”](ch06.xhtml#cgroups) you will learn
    more about it.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a fully isolated environment gives the appearance that the
    app is entirely on its own. For example, a virtual machine (VM; see also [“Virtual
    Machines”](ch09.xhtml#virtual-machines)) can be used to provide you with full
    isolation.
  prefs: []
  type: TYPE_NORMAL
- en: A Ten-Thousand-Foot View of Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whoa, we went quite deep into the weeds already. Time to take a deep breath
    and re-focus. In [Figure 1-1](#fig-10k-view), I’ve tried to provide you with a
    high-level overview of the Linux operating system, mapping it to the book chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '![lmlx 0101](Images/lmlx_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. Mapping the Linux operating system to book chapters
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: At its core, any Linux distro has the kernel, providing the API that everything
    else builds on. The three core topics of files, networking, and observability
    follow you everywhere, and you can consider them the most basic building blocks
    above the kernel. From a pure usage perspective, you will soon learn that you
    will most often be dealing with the shell (Where is the output file for this app?)
    and things related to access control (Why does this app crash? Ah, the directory
    is read-only, doh!).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an aside: I’ve collected some interesting topics, from virtual machines
    to modern distros, in [Chapter 9](ch09.xhtml#advanced). I call these topics “advanced”
    mainly because I consider them optional. That is, you could get away without learning
    them. But if you really, really, really want to benefit from the full power that
    modern Linux can provide you, I strongly recommend that you read [Chapter 9](ch09.xhtml#advanced).
    I suppose it goes without saying that, by design, the rest of the book—that is
    [Chapter 2](ch02.xhtml#kernel) to [Chapter 8](ch08.xhtml#observability)—are essential
    chapters you should most definitely study and apply the content as you go.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we call something “modern” in the context of this book, we mean using Linux
    in modern environments, including phones, data centers (of public cloud providers),
    and embedded systems such as a Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I shared a high-level version of the Linux backstory. We discussed
    the role of an operating system in general—to abstract the underlying hardware
    and provide a set of basic functions such as process, memory, file, and network
    management to applications—and how Linux goes about this task, specifically regarding
    visibility of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following resources will help you continue getting up to speed as well
    as dive deeper into concepts discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly titles
  prefs: []
  type: TYPE_NORMAL
- en: '[*Linux Cookbook*](https://oreil.ly/4Y90O) by Carla Schroder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Understanding the Linux Kernel*](https://oreil.ly/aJYyj) by Daniel P. Bovet
    and Marco Cesati'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Efficient Linux at the Command Line*](https://oreil.ly/nWCch) by Daniel J.
    Barrett'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Linux System Programming*](https://oreil.ly/fh85i) by Robert Love'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other resources
  prefs: []
  type: TYPE_NORMAL
- en: '[Advanced Programming in the UNIX Environment](https://oreil.ly/hS0G0) is a
    complete course that offers introductory material and hands-on exercises.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The Birth of UNIX”](https://oreil.ly/MlQ0J) with Brian Kernighan is a great
    resource for learning about Linux’s legacy and provides context for a lot of the
    original UNIX concepts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And now, without further ado: let’s start our journey into modern Linux with
    the core, erm, kernel, of the matter!'
  prefs: []
  type: TYPE_NORMAL
