- en: Chapter 4\. Use Cases, Benefits, and Limitations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。用例、优势和局限性
- en: Kubernetes brings agility and velocity to an organization’s development environment
    but adds complexity. Not only does Cluster API help tame the complexity of Kubernetes,
    it helps drive use cases on top of the Kubernetes platform and provides additional
    benefits.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes为组织的开发环境带来了灵活性和速度，但增加了复杂性。Cluster API不仅有助于驯服Kubernetes的复杂性，还有助于在Kubernetes平台上推动用例并提供额外的好处。
- en: Managing the Cluster Lifecycle
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理集群生命周期
- en: In the journey to adopting Kubernetes, an organization often starts by thinking
    about the initial design and development of a single cluster. Although it’s true
    that Cluster API makes it easy to stand up one cluster, its real goal is lifecycle
    management of multiple clusters from Day 0 (creation) through Day 2 (management
    until end of life). This means that Cluster API simplifies operations no matter
    where the organization is in its journey.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用Kubernetes的过程中，一个组织通常会从考虑单个集群的初始设计和开发开始。虽然Cluster API确实使得创建一个集群变得简单，但它真正的目标是从Day
    0（创建）到Day 2（管理直至生命周期结束）管理多个集群的生命周期。这意味着，无论组织在其旅程中的哪个阶段，Cluster API都简化了操作。
- en: Day 2 operations include scaling clusters up and down in response to demand–including
    potential expansions to new environments, upgrading Kubernetes and others. Because
    Cluster API brings consistent, declarative control to Kubernetes clusters on different
    types of infrastructure, you can easily give both IT and development teams the
    ability to provision clusters themselves.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Day 2操作包括根据需求扩展和收缩集群，包括扩展到新环境，升级Kubernetes等。因为Cluster API在不同类型的基础设施上为Kubernetes集群带来一致的声明式控制，所以您可以轻松地让IT和开发团队自己配置集群。
- en: Cluster API makes it simple to deploy and manage multiple clusters, automating
    cluster lifecycle management in a repeatable manner and providing centralized
    visibility through the management cluster. Much of the Day 2 capability of Cluster
    API comes from the provider plug-in architecture, with which infrastructure hosts
    can provide tools that help implement best practices for the kinds of clusters
    they expect to host.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API使得部署和管理多个集群变得简单，通过可重复的方式自动化集群生命周期管理，并通过管理集群提供集中的可见性。Cluster API的大部分Day
    2功能来自于提供程序插件架构，基础设施主机可以利用这一架构提供工具，帮助实施其期望托管的集群类型的最佳实践。
- en: Managing Clusters with GitOps
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitOps管理集群
- en: GitOps is a DevOps methodology for automating IT infrastructure by treating
    it as code. In GitOps, the desired state of the cluster is stored in a Git repository.
    This provides a single, auditable source of truth with versioning and rollback
    and makes it easier to reproduce cluster infrastructure after a cluster has been
    decommissioned or in the event that disaster strikes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps是一种通过将其视为代码来自动化IT基础设施的DevOps方法论。在GitOps中，集群的期望状态存储在Git仓库中。这提供了一个单一的可审计的真相来源，具有版本控制和回滚功能，并且在集群被退役或发生灾难后更容易重现集群基础设施。
- en: 'When you use Cluster API and GitOps together, you can perform operations on
    clusters with Git pull requests. This makes it safer to give engineering teams
    the power to provision and maintain their own clusters because Git makes cluster
    operations auditable: you know everything that’s happened, who did it, and when.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将Cluster API与GitOps结合使用时，您可以通过Git拉取请求在集群上执行操作。这使得将工程团队赋予自己配置和维护其自己集群的权力变得更加安全，因为Git可以审计集群操作：您知道发生了什么，由谁执行，以及何时执行。
- en: Upgrading Clusters
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级集群
- en: The traditional upgrade technique, called an *inline upgrade*, involves upgrading
    Kubernetes components in place. This approach has a number of risks, many of which
    boil down to the upgrade failing on a node, necessitating the unexpected movement
    of pods and apps to other nodes. If other nodes are in similar condition, a cascade
    of upgrade failures can bring a cluster to its knees. If the upgrade failures
    are related to a long series of patches and manual configurations that have been
    applied over time, it can be very difficult to debug the problems and get back
    to a good state.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的升级技术，称为*内联升级*，涉及在原地升级Kubernetes组件。这种方法存在许多风险，其中许多风险归结为升级在节点上失败，需要将pod和应用程序意外地移动到其他节点。如果其他节点处于类似状态，则升级失败的级联可能会导致集群瘫痪。如果升级失败与长时间应用的一系列补丁和手动配置有关，那么调试问题并恢复到良好状态可能会非常困难。
- en: Cluster API makes upgrades safer and reduces their impact on cluster capacity.
    Cluster API performs a *rolling upgrade*, which consists of provisioning new,
    upgraded nodes one by one and moving pods to them from older nodes. This approach
    keeps as much cluster capacity as possible available during an upgrade. In the
    worst case, where a new node isn’t successfully provisioned and added, there’s
    no impact to running workloads because pods are moved only when the new node joins
    the cluster. [Figure 4-1](#fig_1_rolling_upgrade) shows the process of performing
    a rolling upgrade.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 使升级更安全，并减少对集群容量的影响。Cluster API 执行*滚动升级*，逐个为集群中的旧节点提供新的升级节点，并将 pod
    从旧节点移动到新节点。这种方法在升级过程中尽可能保持集群容量的可用性。在最坏的情况下，如果新节点未能成功提供并添加，对正在运行的工作负载没有影响，因为 pod
    只有在新节点加入集群时才会移动。[图 4-1](#fig_1_rolling_upgrade) 展示了执行滚动升级的过程。
- en: '![Rolling upgrade](assets/cdkm_0401.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![滚动升级](assets/cdkm_0401.png)'
- en: Figure 4-1\. Rolling upgrade
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 滚动升级
- en: By making it easier and safer to upgrade a Kubernetes cluster, Cluster API encourages
    more frequent updates. This keeps Kubernetes up to date and more secure, and it
    reduces the risk of configuration drift, where the real state of the cluster is
    different from the desired state codified in the blueprint/manifest, due to incremental
    changes performed on the cluster directly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简化和提高 Kubernetes 集群的升级安全性，Cluster API 鼓励更频繁的更新。这使得 Kubernetes 保持最新和更安全，并减少了由于直接在集群上执行增量更改而导致的配置漂移风险，即集群的实际状态与蓝图/清单中编码的期望状态不同。
- en: Scaling
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展
- en: Cluster API makes it easy to scale clusters up and down as workloads change.
    For worker nodes, the main task is to ensure the right amount of hardware is provisioned
    for the current demand, and no more. For control nodes, the concern is mainly
    to make sure that there is redundancy so that if a control plane node fails, another
    can take its place seamlessly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 使得根据工作负载变化轻松扩展集群的规模。对于工作节点，主要任务是确保为当前需求提供适量的硬件，而不是更多。对于控制节点，主要关注的是确保有冗余，以便如果一个控制平面节点失败，另一个节点可以无缝接替其位置。
- en: The KCP lets you declaratively scale up your Kubernetes control plane to manage
    availability, ensuring that control nodes are arranged across availability zones
    to minimize the likelihood that more than one failure will occur at any time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: KCP 允许您以声明方式扩展 Kubernetes 控制平面，以管理可用性，确保控制节点分布在可用性区域中，以最小化任何时间内发生多个故障的可能性。
- en: For worker nodes, it’s as simple as specifying the new desired number of worker
    nodes; Cluster API takes care of provisioning new machines and adding them to
    the cluster. You can use a tool called the Autoscaler to automatically adjust
    the number of worker nodes to match the number of pods you need for your workloads.
    The Autoscaler uses metrics like application load or average CPU usage per node
    to scale the cluster up and down as needed, using Cluster API providers to manage
    the infrastructure. Cluster API also has the ability to run workers with a different
    hardware configuration (the instance type) by specifying a different machine deployment
    or machine resources that join the same cluster.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工作节点来说，只需指定新的期望工作节点数量即可；Cluster API 负责提供新的机器并将其添加到集群中。您可以使用名为 Autoscaler 的工具，根据您的工作负载需要自动调整工作节点的数量。Autoscaler
    使用应用程序负载或每个节点的平均 CPU 使用率等指标根据需要扩展或缩减集群，并使用 Cluster API 提供程序来管理基础设施。Cluster API
    还可以通过指定不同的机器部署或机器资源，在相同集群中运行具有不同硬件配置（实例类型）的工作节点。
- en: Self-Healing
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我修复
- en: Cluster API gives Kubernetes clusters the ability to self-heal by provisioning
    new infrastructure. When a node fails, Kubernetes can spin up new instances of
    the pods on a new node, but Kubernetes has no native ability to provision new
    infrastructure. If enough machines fail, Kubernetes can eventually run out of
    resources. Because Cluster API manages the infrastructure and Kubernetes together,
    it can automatically provision more infrastructure in a cloud or data center environment
    when nodes fail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 使得 Kubernetes 集群能够通过提供新的基础设施来自我修复。当节点失败时，Kubernetes 可以在新节点上启动 pod
    的新实例，但 Kubernetes 本身没有原生能力来提供新的基础设施。如果足够多的机器失败，Kubernetes 最终会耗尽资源。因为 Cluster API
    管理基础设施和 Kubernetes，它可以在云或数据中心环境中节点失败时自动提供更多基础设施。
- en: Cluster API uses the `MachineHealthCheck` controller to monitor the condition
    of the control plane and worker nodes, making sure they are healthy. This includes
    ensuring they are reachable over the network and aren’t running out of disk space,
    pod capacity, or other resources. When a node fails, runs out of resources, or
    becomes unreachable, Cluster API provisions a new node and adds it to the cluster.
    Once a new node is provisioned, Kubernetes will attempt to reschedule pending
    pods from the failed node.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 使用 `MachineHealthCheck` 控制器监视控制平面和工作节点的状态，确保它们处于健康状态。这包括确保它们在网络上可达，并且没有运行出磁盘空间、Pod
    容量或其他资源。当节点失败、资源耗尽或无法访问时，Cluster API 将为集群提供一个新节点。一旦新节点被配置，Kubernetes 将尝试重新安排来自失败节点的待定
    Pod。
- en: Managing Multiple Clusters
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理多个集群
- en: As the organization begins to expand its Kubernetes deployment to include multiple
    clusters, often in different cloud environments, Cluster API provides a consistent
    interface for operations across different providers with different infrastructure
    and APIs. This is especially important for companies with a presence in diverse
    environments that require multiple providers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织开始扩展其 Kubernetes 部署以包括多个集群，通常在不同的云环境中，Cluster API 提供了一个一致的操作界面，用于跨不同的提供商和不同基础设施及
    API 的操作。这对于需要在多个提供商中存在的多样环境的公司尤为重要。
- en: By abstracting the different deployment mechanisms and APIs offered by varying
    infrastructure providers and vendors, Cluster API makes it possible to standardize
    tooling across entire deployments regardless of where they are in the world, whether
    in a public cloud, in a virtualized or bare metal data center, or at the edge.
    This gives cluster administrators more control over the configuration and installed
    software, a standardized approach to cluster lifecycle management, and the ability
    to reuse existing components across multiple clusters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过抽象化不同的部署机制和不同基础设施提供商和供应商提供的 API，Cluster API 使得可以标准化整个部署的工具，无论它们位于世界的哪个地方，无论是在公共云、虚拟化或裸金属数据中心，还是在边缘。这使得集群管理员可以更好地控制配置和安装的软件，实现集群生命周期管理的标准化方法，并能够在多个集群中重用现有组件。
- en: Limitations and Challenges
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制与挑战
- en: Cluster API provides a lot of tools that make managing the lifecycles of multiple
    clusters easier, but it is not without its limitations. At the time of this writing,
    Cluster API is still a beta project, which might make some companies hesitate
    to adopt it in production environments. In some cases, Cluster API control plane
    upgrades can create bugs or other problems, which can disrupt workload clusters
    in severe cases.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 提供了许多工具，使得管理多个集群的生命周期变得更加容易，但它并非没有局限性。在撰写本文时，Cluster API 仍然是一个测试版项目，这可能会让一些公司在生产环境中犹豫是否采用。在某些情况下，Cluster
    API 控制平面的升级可能会导致错误或其他问题，严重时可能会干扰工作负载集群。
- en: Because the management cluster holds the credentials for the target environments
    where the workload clusters are deployed, it is a potential security target. Obtaining
    access to the management cluster could give an attacker access to all the workload
    clusters in turn, which is especially troublesome if the workload clusters are
    owned by separate tenants.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为管理集群保存了部署工作负载集群的目标环境的凭据，所以它是一个潜在的安全目标。获取对管理集群的访问权可能会使攻击者进入所有工作负载集群，特别是如果工作负载集群由不同租户拥有时，这尤为麻烦。
- en: While Cluster API provides declarative management for Kubernetes clusters, some
    foundational capabilities are currently out of scope, such as identity authentication,
    backup and restore, logging/monitoring or lifecycle management of additional packs,
    and integrations required by an application—including the application itself.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Cluster API 为 Kubernetes 集群提供了声明式管理，但某些基础能力目前超出了其范围，如身份验证、备份和恢复、日志/监控或额外包的生命周期管理，以及应用程序所需的集成，包括应用程序本身。
- en: Cluster API is limited in the number of clusters and nodes it can manage. As
    a rule of thumb, a single Cluster API management cluster can handle approximately
    one hundred clusters, depending on the number of nodes in each.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 在管理的集群数和节点数方面存在一定限制。作为一个经验法则，单个 Cluster API 管理集群大约可以处理一百个集群，具体取决于每个集群中节点的数量。
- en: The management cluster is potentially a single point of failure. If the management
    cluster fails, the workload clusters continue to operate, but you can no longer
    manage them through Cluster API. If you have a backup of all the CRDs and other
    Cluster API resources (in a Git repo, for example), you can create a new management
    cluster and regain central control of the workload clusters.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 管理集群可能是单点故障。如果管理集群发生故障，工作负载集群仍将继续运行，但你将无法再通过 Cluster API 进行管理。如果你备份了所有的 CRDs
    和其他 Cluster API 资源（比如存储在 Git 仓库中），你可以创建一个新的管理集群，并重新获得对工作负载集群的集中控制。
- en: A single management cluster might not represent sufficient separation for different
    tenants of workload clusters. You can overcome this problem by bringing up different
    management clusters for different groups of tenants, but this negates the benefit
    of being able to manage multiple clusters through one interface.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 单个管理集群可能不足以为不同租户的工作负载集群提供足够的隔离。你可以通过为不同租户组的工作负载集群建立不同的管理集群来解决这个问题，但这样做会抵消通过单一接口管理多个集群的好处。
