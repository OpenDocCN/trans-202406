- en: Chapter 3\. Creating Your First App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.xhtml#ch2), you created a basic API layer using a combination
    of API Gateway and serverless functions. This combination is very powerful, but
    you have not yet interacted with a real database.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will be creating a GraphQL API that interacts with a DynamoDB
    NoSQL database to perform CRUD+L (create, read, update, delete, and list) operations.
    You’ll learn what GraphQL is, why developers are adopting it, and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: We will be building a notes app that will allow users to create, update, and
    delete notes. It will also have GraphQL subscriptions enabled in order to see
    updates in real time. If another user is interacting with the app and they create
    a new note, our app will update with the new values in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL is an API implementation that is an alternative to REST. Let’s have
    a look at what GraphQL is, what a GraphQL API consists of, and how GraphQL works.
  prefs: []
  type: TYPE_NORMAL
- en: What Is GraphQL?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GraphQL is an API specification. It is a query language for APIs and a runtime
    for fulfilling those queries with your data. It is, and can be used as, a replacement
    for REST and has some similarities to REST.
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL was introduced by Facebook in 2015, [though it had been used internally
    since 2012](https://oreil.ly/KtnOq). GraphQL allows clients to define the structure
    of the data that is required from an API call so that they can know exactly what
    data structure is going to be returned from the server. Requesting data in this
    way enables a much more efficient way for client-side applications to interact
    with backend APIs and services, reducing the amount of under-fetching of data,
    preventing the over-fetching of data, and preventing type errors.
  prefs: []
  type: TYPE_NORMAL
- en: What Makes Up a GraphQL API?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A GraphQL API consists of three main parts: schema, resolvers, and data sources,
    as illustrated in [Figure 3-1](#fig3a).'
  prefs: []
  type: TYPE_NORMAL
- en: '![GraphQL API Design](Images/fssl_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. GraphQL API Design
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The schema, written in GraphQL Schema Definition Language (SDL), defines the
    data model (types) and operations that can be executed against the API. The schema
    consists of base types (data models) and GraphQL operations like queries for fetching
    data; mutations for creating, updating, and deleting data; and subscriptions for
    subscribing to changes in data in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a GraphQL schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the schema has been created, you can begin writing resolvers for the GraphQL
    operations defined in the schema (query, mutation, subscription). GraphQL resolvers
    tell the GraphQL operations what to do when being executed and will typically
    interact with some data source or another API, as shown in [Figure 3-2](#fig3b).
  prefs: []
  type: TYPE_NORMAL
- en: '![How GraphQL Works](Images/fssl_0302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-2\. How GraphQL works
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: GraphQL Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GraphQL operations are how you interact with the API data sources. GraphQL
    operations can be similarly mapped to HTTP methods for RESTful APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A GraphQL request operation looks similar to a JavaScript object with only
    the keys and no values. The keys and values are returned in the GraphQL operation
    response. Here’s an example of a typical GraphQL query fetching an array of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This request would return the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass arguments into a GraphQL operation. The following operation
    is a query for a `Todo`, passing in the ID of the `Todo` we’d like to fetch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This request would return the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Though there are many ways to implement a GraphQL server, in this book we will
    be using AWS AppSync. AppSync is a managed service that allows us to deploy a
    GraphQL API, resolvers, and data sources quickly and easily using the Amplify
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the GraphQL API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a basic understanding of what GraphQL is, let’s go ahead and
    start using it to build the Notes app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you need to do is create a new React application and install
    the necessary dependencies. This app will be using the AWS Amplify library to
    interact with the API, `uuid` for creating unique `id`s, and the Ant Design library
    for styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, within the root of the new app, you can create the Amplify project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With the Amplify project initialized, we can then add the GraphQL API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open the base GraphQL schema (generated by the CLI), located at *notesapp/amplify/backend/api/notesapi/schema.graphql*,
    in your text editor. Update the schema to the following, and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This schema has a main `Note` type containing five fields. A field can be either
    nullable (not required) or non-nullable (required). A non-nullable field is specified
    with a `!` character.
  prefs: []
  type: TYPE_NORMAL
- en: The `Note` type in this schema is annotated with an `@model` directive. This
    directive is not part of the GraphQL SDL; instead, it is part of the AWS Amplify
    GraphQL Transform library.
  prefs: []
  type: TYPE_NORMAL
- en: The GraphQL Transform library allows you to annotate a GraphQL schema with different
    directives like `@model`, `@connection`, `@auth`, and others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@model` directive we used in this schema will transform the base `Note`
    type into an expanded AWS AppSync GraphQL API complete with:'
  prefs: []
  type: TYPE_NORMAL
- en: Additional schema definitions for queries and mutations (`Create`, `Read`, `Update`,
    `Delete`, and `List` operations)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional schema definitions for GraphQL subscriptions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DynamoDB database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resolver code for all GraphQL operations mapped to DynamoDB database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To deploy the API, you can run the `push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once the deployment has completed, the API and database have successfully been
    created in your account. Next, let’s open the newly created AppSync API in the
    AWS Console and test out a few GraphQL operations.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and Interacting with the GraphQL API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To open the API in the AWS Console at any time, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve opened the AppSync console, click Queries in the lefthand menu to
    open the query editor. Here, you can test out GraphQL queries, mutations, and
    subscriptions using your API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first operation we’ll try out is a mutation to create a new note. In the
    query editor, execute the following mutation (see [Figure 3-3](#fig3c)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![GraphQL mutation](Images/fssl_0303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-3\. GraphQL mutation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now that you’ve created an item, you can try querying for it. Let’s try to
    query for all of the notes in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also try querying for a single note using the ID of one of the notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know the GraphQL API is deployed and functioning properly, let’s
    start writing some frontend code.
  prefs: []
  type: TYPE_NORMAL
- en: Building the React Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing you will need to do is configure the React application to recognize
    the Amplify resources located at *src/aws-exports.js*. To do so, open *src/index.js*
    and add the following below the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Listing Notes (GraphQL Query)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the application has been configured, you can begin making calls against
    the GraphQL API. The first operation we will be implementing will be a query to
    list all of the notes.
  prefs: []
  type: TYPE_NORMAL
- en: The query will return an array and we will map over all of the items in the
    array, showing the note name, description, and whether or not it is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/App.js*, first import the following at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at some of the terms used in the preceding:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useEffect` and `useReducer`'
  prefs: []
  type: TYPE_NORMAL
- en: React hooks
  prefs: []
  type: TYPE_NORMAL
- en: '`API`'
  prefs: []
  type: TYPE_NORMAL
- en: This is the GraphQL client that we will be using to interact with the AppSync
    endpoint (similar to `fetch` or `axios`)
  prefs: []
  type: TYPE_NORMAL
- en: '`List`'
  prefs: []
  type: TYPE_NORMAL
- en: UI component from the Ant Design library to render a list
  prefs: []
  type: TYPE_NORMAL
- en: '`listNotes`'
  prefs: []
  type: TYPE_NORMAL
- en: The GraphQL query operation for fetching an array of notes
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will need to create a variable to hold our initial application state.
    Because our application will be holding and working with multiple state variables,
    we will use the `useReducer` hook from React to manage state.
  prefs: []
  type: TYPE_NORMAL
- en: '`useReducer` has the following API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`useReducer` accepts a reducer function of type `(state, action) => newState`
    and `initialState` as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When invoked, the `useReducer` hook returns an array containing two items:'
  prefs: []
  type: TYPE_NORMAL
- en: The application state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `dispatch` function (this function allows you to update the application state)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial state of our Notes application will hold an array for the notes,
    form values, error, and loading state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/App.js*, add the following `initialState` object after the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create the reducer. For now, the reducer will only have cases to either
    set the notes array or set an error state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the main `App` function to create the state and dispatch variables
    by calling `useReducer` and passing in the `reducer` and `initialState`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To fetch the notes, create a `fetchNotes` function (in the main `App` function)
    that will call the AppSync API and set the notes array once the API call is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, invoke the `fetchNotes` function by implementing the `useEffect` hook
    (in the main `App` function):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`useEffect` is similar to `componentDidMount`. `useEffect` will run after the
    initial render of the component is committed to the screen. The second argument
    to `useEffect` is an array of values, the effect of which depends on whether it
    is called again during a re-render. If the array is empty, it will not be called
    on additional renders. If the array contains values and those values change, the
    component will re-render.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing you need to do is return the main UI for the component. In the
    main `App` function, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are using the `List` component from Ant Design. This component will
    map over an array (`dataSource`) and return an item for each item in the array
    by calling the `renderItem` function. Next, define `renderItem` (in the main `App`
    function):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create the styles for the components we will be using for this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to run the app! In the terminal, run the `start` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: When the app loads, you should see the current list of notes rendered to your
    screen, as illustrated in [Figure 3-4](#fig3d).
  prefs: []
  type: TYPE_NORMAL
- en: '![Notes List](Images/fssl_0304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-4\. Notes list
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating Notes (GraphQL Mutation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you know how to query for a list of notes, let’s take a look at how
    to *create* a new note. To do so, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A form to create a new note
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A function to update the state as the user types into the form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A function to add the new note to the UI and send an API call to create a new
    note
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, import the UUID library so you can create a unique identifier for the
    client. We do this now so that later on when we implement subscriptions we can
    identify the client that created the note. We will also import the `Input` and
    `Button` components from Ant Design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to import the `createNote` mutation definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a new `CLIENT_ID` variable below the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the switch statement in the reducer to add three new cases. We will
    need a new case for the following three actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new note to the local state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resetting the form state to clear out the form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating the form state when the user types
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the `createNote` function in the main `App` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we are updating the local state before the API call is successful.
    This is known as an *optimistic response*. It is done because we want the UI to
    be fast and to update as soon as the user adds a new note. If the API call fails,
    you can then implement some functionality in the `catch` block to notify the user
    of the error if you would like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create an `onChange` handler in the main `App` function to update the
    form state when the user interacts with an input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will update the UI to add the form components. Before the `List`
    component, add the following two inputs and button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, we should be able to create new notes using the form, as shown in [Figure 3-5](#fig3e).
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a note](Images/fssl_0305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-5\. Creating a note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Deleting Notes (GraphQL Mutation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let’s take a look at how to *delete* a note. To do so, we’ll need the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: A `deleteNote` function to delete the note both from the UI and from the GraphQL
    API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A button in each note to invoke the `deleteNote` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, import the `deleteNote` mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `deleteNote` function in the main `App` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we are finding the index of the note and creating a new notes
    array without the deleted note. We then dispatch the `SET_NOTES` action passing
    in the new notes array to update the local state and show an optimistic response.
    Next, we call the GraphQL API to delete the note in the AppSync API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, update the `List.Item` component in the `renderItem` function to add a
    delete button to the `actions` prop that will call the `deleteNote` function,
    passing in the item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, we should be able to delete notes (see [Figure 3-6](#fig3f)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Deleting a note](Images/fssl_0306.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-6\. Deleting a note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Updating Notes (GraphQL Mutation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next piece of functionality we want to add is the ability to *update* a
    note to be completed. To do so, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An `updateNote` function to update the note in the UI and in the GraphQL API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A button in each note to invoke the `updateNote` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, import the `updateNote` mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an `updateNote` function in the main `App` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we are first finding the index of the selected note, then
    creating a copy of the notes array. We then update the completed value of the
    selected note to be the opposite of what it currently is. We then update the notes
    array with the new version of the note, set the notes array in the local state,
    and call the GraphQL API, passing in the note that needs to be updated in the
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, update the `List.Item` component to add an update button that will
    call the `updateNote` function, passing in the item. This component will render
    either `completed` or `mark complete` depending on the value of the `completed`
    Boolean of the item (based on whether `completed` is true or false):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, we should be able to update notes to be either *completed* or *not completed*
    (see [Figure 3-7](#fig3g)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating a note](Images/fssl_0307.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-7\. Updating a note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Real-Time Data (GraphQL Subscriptions)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last piece of functionality we will implement is the ability to *subscribe
    to updates in real time*. The update that we’d like to subscribe to is when a
    new note has been added. When this happens, the functionality we’d like to implement
    is to have our application receive that new note, update the notes array with
    the new note, and render the updated notes array to our screen.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you will be implementing a GraphQL subscription. With GraphQL subscriptions,
    you can subscribe to different events. These events are usually some type of mutation
    (on create, on update, on delete). When one of these events happens, the data
    from the event gets sent to the client that initialized the subscription. It is
    then up to you to handle the data that comes in on the client.
  prefs: []
  type: TYPE_NORMAL
- en: To make this work, you’ll only need to initialize the subscription in the `useEffect`
    hook and dispatch the `ADD_NOTE` type along with the note data when a subscription
    is fired.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the `onCreateNote` subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the `useEffect` hook with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In this subscription, we are subscribing to the `onCreateNote` event. When a
    new note is created, this event gets triggered and the `next` function is invoked,
    passing in the `note` data as the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We take the note data and check to see if our client is the application that
    created the note. If our client created the note, we return without going any
    further. If we are not the client that created the note, we dispatch the `ADD_NOTE`
    action, passing in the note data from the subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve deployed your first serverless GraphQL application!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `useEffect` hook is similar to `componentDidMount` from the React lifecycle
    methods in that it runs after the component first renders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useReducer` hook allows you to manage application state and is preferable
    to `useState` when having more complex application logic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GraphQL *queries* are used for fetching data in a GraphQL API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GraphQL *mutations* are used for creating, updating, or deleting data in a GraphQL
    API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can subscribe to API real-time events in a GraphQL API by using GraphQL
    *subscriptions*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
