["```\n{type: 'move', payload: 0}\n```", "```\n['1', '2', '3', null, '5', '6', '7', '8', '4']\n```", "```\n{\n    items: ['1', '2', '3', null, '5', '6', '7', '8', '4']\n}\n```", "```\n{\n    items: ['1', '2', '3', '4', '5', '6', '7', '8', null],\n    complete: true\n}\n```", "```\nimport reducer from './reducer'\n\ndescribe('reducer', () => {\n  it('should be able to move 1 down if gap below', () => {\n    let state = {\n      items: ['1', '2', '3', null, '5', '6', '7', '8', '4'],\n    }\n\n    state = reducer(state, { type: 'move', payload: 0 })\n\n    expect(state.items).toEqual([\n      null,\n      '2',\n      '3',\n      '1',\n      '5',\n      '6',\n      '7',\n      '8',\n      '4',\n    ])\n  })\n\n  it('should say when it is complete', () => {\n    let state = {\n      items: ['1', '2', '3', '4', '5', '6', '7', null, '8'],\n    }\n\n    state = reducer(state, { type: 'move', payload: 8 })\n\n    expect(state.complete).toBe(true)\n\n    state = reducer(state, { type: 'move', payload: 5 })\n\n    expect(state.complete).toBe(false)\n  })\n})\n```", "```\nfunction trySwap(newItems, position, t) {\n  if (newItems[t] === null) {\n    const temp = newItems[position]\n    newItems[position] = newItems[t]\n    newItems[t] = temp\n  }\n}\n\nfunction arraysEqual(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst CORRECT = ['1', '2', '3', '4', '5', '6', '7', '8', null]\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'move': {\n      const position = action.payload\n      const newItems = [...state.items]\n      const col = position % 3\n\n      if (position < 6) {\n        trySwap(newItems, position, position + 3)\n      }\n      if (position > 2) {\n        trySwap(newItems, position, position - 3)\n      }\n      if (col < 2) {\n        trySwap(newItems, position, position + 1)\n      }\n      if (col > 0) {\n        trySwap(newItems, position, position - 1)\n      }\n\n      return {\n        ...state,\n        items: newItems,\n        complete: arraysEqual(newItems, CORRECT),\n      }\n    }\n    default: {\n      throw new Error('Unknown action: ' + action.type)\n    }\n  }\n}\n\nexport default reducer\n```", "```\nimport { useReducer } from 'react'\nimport reducer from './reducer'\n\nimport './Puzzle.css'\n\nconst Puzzle = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    items: ['4', '1', '2', '7', '6', '3', null, '5', '8'],\n  })\n\n  return (\n    <div className=\"Puzzle\">\n      <div className=\"Puzzle-squares\">\n        {state.items.map((s, i) => (\n          <div\n            className={`Puzzle-square ${\n              s ? '' : 'Puzzle-square-empty'\n            }`}\n            key={`square-${i}`}\n            onClick={() => dispatch({ type: 'move', payload: i })}\n          >\n            {s}\n          </div>\n        ))}\n      </div>\n      <div className=\"Puzzle-controls\">\n        <button\n          className=\"Puzzle-shuffle\"\n          onClick={() => dispatch({ type: 'shuffle' })}\n        >\n          Shuffle\n        </button>\n        <button\n          className=\"Puzzle-reset\"\n          onClick={() => dispatch({ type: 'reset' })}\n        >\n          Reset\n        </button>\n      </div>\n      {state.complete && (\n        <div className=\"Puzzle-complete\">Complete!</div>\n      )}\n    </div>\n  )\n}\n\nexport default Puzzle\n```", "```\nonClick={() => dispatch({type: 'move', payload: i})}\n```", "```\nstate.complete && <div className='Puzzle-complete'>Complete!</div>\n```", "```\nconst [state, dispatch] = useReducer(reducer, {\n  items: ['4', '1', '2', '7', '6', '3', null, '5', '8'],\n})\n```", "```\n<button className='Puzzle-shuffle'\n        onClick={() => dispatch({type: 'shuffle'})}>Shuffle</button>\n```", "```\nconst [state, dispatch] = useUndoReducer(reducer, {\n  items: ['4', '1', '2', '7', '6', '3', null, '5', '8'],\n})\n```", "```\n<button\n  className=\"Puzzle-undo\"\n  onClick={() => dispatch({ type: 'undo' })}\n>\n  Undo\n</button>\n```", "```\nimport lodash from 'lodash'\n\nconst undo = (reducer) => (state, action) => {\n  let {\n    undoHistory = [],\n    undoActions = [],\n    ...innerState\n  } = lodash.cloneDeep(state)\n  switch (action.type) {\n    case 'undo': {\n      if (undoActions.length > 0) {\n        undoActions.pop()\n        innerState = undoHistory.pop()\n      }\n      break\n    }\n\n    case 'redo': {\n      if (undoActions.length > 0) {\n        undoHistory = [...undoHistory, { ...innerState }]\n        undoActions = [\n          ...undoActions,\n          undoActions[undoActions.length - 1],\n        ]\n        innerState = reducer(\n          innerState,\n          undoActions[undoActions.length - 1]\n        )\n      }\n      break\n    }\n\n    default: {\n      undoHistory = [...undoHistory, { ...innerState }]\n      undoActions = [...undoActions, action]\n      innerState = reducer(innerState, action)\n    }\n  }\n  return { ...innerState, undoHistory, undoActions }\n}\n\nexport default undo\n```", "```\nimport { useReducer } from 'react'\nimport undo from './undo'\n\nconst useUndoReducer = (reducer, initialState) =>\n  useReducer(undo(reducer), initialState)\n\nexport default useUndoReducer\n```", "```\nimport reducer from './reducer'\nimport useUndoReducer from './useUndoReducer'\n\nimport './Puzzle.css'\n\nconst Puzzle = () => {\n  const [state, dispatch] = useUndoReducer(reducer, {\n    items: ['4', '1', '2', '7', '6', '3', null, '5', '8'],\n  })\n\n  return (\n    <div className=\"Puzzle\">\n      <div className=\"Puzzle-squares\">\n        {state.items.map((s, i) => (\n          <div\n            className={`Puzzle-square ${\n              s ? '' : 'Puzzle-square-empty'\n            }`}\n            key={`square-${i}`}\n            onClick={() => dispatch({ type: 'move', payload: i })}\n          >\n            {s}\n          </div>\n        ))}\n      </div>\n      <div className=\"Puzzle-controls\">\n        <button\n          className=\"Puzzle-shuffle\"\n          onClick={() => dispatch({ type: 'shuffle' })}\n        >\n          Shuffle\n        </button>\n        <button\n          className=\"Puzzle-reset\"\n          onClick={() => dispatch({ type: 'reset' })}\n        >\n          Reset\n        </button>\n      </div>\n      <div className=\"Puzzle-controls\">\n        <button\n          className=\"Puzzle-undo\"\n          onClick={() => dispatch({ type: 'undo' })}\n        >\n          Undo\n        </button>\n        <button\n          className=\"Puzzle-redo\"\n          onClick={() => dispatch({ type: 'redo' })}\n        >\n          Redo\n        </button>\n      </div>\n      {state.complete && (\n        <div className=\"Puzzle-complete\">Complete!</div>\n      )}\n    </div>\n  )\n}\n\nexport default Puzzle\n```", "```\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport SimpleForm from './SimpleForm'\nimport InputField from './InputField'\n\nconst FormExample0 = ({ onSubmit, onChange, initialValue = {} }) => {\n  const [formFields, setFormFields] = useState(initialValue)\n\n  const [valid, setValid] = useState(true)\n  const [errors, setErrors] = useState({})\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(formFields, valid, errors)\n    }\n  }, [onChange, formFields, valid, errors])\n\n  return (\n    <div className=\"TheForm\">\n      <h1>Single field</h1>\n\n      <SimpleForm\n        value={formFields}\n        onChange={setFormFields}\n        onValid={(v, errs) => {\n          setValid(v)\n          setErrors(errs)\n        }}\n      >\n        <InputField\n          name=\"field1\"\n          onValidate={(v) =>\n            !v || v.length < 3 ? 'Too short!' : null\n          }\n        />\n\n        <button\n          onClick={() => onSubmit && onSubmit(formFields)}\n          disabled={!valid}\n        >\n          Submit!\n        </button>\n      </SimpleForm>\n    </div>\n  )\n}\n\nexport default FormExample0\n```", "```\nimport { createContext } from 'react'\n\nconst FormContext = createContext({})\n\nexport default FormContext\n```", "```\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport './SimpleForm.css'\nimport FormContext from './FormContext'\n\nfunction updateWith(oldValue, field, value) {\n  const newValue = { ...oldValue }\n  newValue[field] = value\n  return newValue\n}\n\nconst SimpleForm = ({ children, value, onChange, onValid }) => {\n  const [values, setValues] = useState(value || {})\n\n  useEffect(() => {\n    setValues(value || {})\n  }, [value])\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(values)\n    }\n  }, [onChange, values])\n\n  let setValue = useCallback(\n    (field, v) => setValues((vs) => updateWith(vs, field, v)),\n    [setValues]\n  )\n  let getValue = useCallback((field) => values[field], [values])\n  let form = {\n    setValue: setValue,\n    value: getValue,\n  }\n\n  return (\n    <div className=\"SimpleForm-container\">\n      <FormContext.Provider value={form}>\n        {children}\n      </FormContext.Provider>\n    </div>\n  )\n}\n\nexport default SimpleForm\n```", "```\nimport React, { useContext } from 'react'\nimport FormContext from './FormContext'\n\nimport './InputField.css'\n\nconst InputField = (props) => {\n  const form = useContext(FormContext)\n\n  if (!form.value) {\n    return 'InputField should be wrapped in a form'\n  }\n\n  const { name, label, ...otherProps } = props\n\n  const value = form.value(name)\n\n  return (\n    <div className=\"InputField\">\n      <label htmlFor={name}>{label || name}:</label>\n      <input\n        id={name}\n        value={value || ''}\n        onChange={(event) => {\n          form.setValue(name, event.target.value)\n        }}\n        {...otherProps}\n      />{' '}\n      {}\n    </div>\n  )\n}\n\nexport default InputField\n```", "```\nimport { useCallback, useEffect, useState } from 'react'\nimport FormContext from './FormContext'\nimport './SimpleForm.css'\n\nconst SimpleForm = ({ children, value, onChange, onValid }) => {\n  const [values, setValues] = useState(value || {})\n  const [dirtyFields, setDirtyFields] = useState({})\n  const [invalidFields, setInvalidFields] = useState({})\n\n  useEffect(() => {\n    setValues(value || {})\n  }, [value])\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(values)\n    }\n  }, [onChange, values])\n\n  useEffect(() => {\n    if (onValid) {\n      onValid(\n        Object.keys(invalidFields).every((i) => !invalidFields[i]),\n        invalidFields\n      )\n    }\n  }, [onValid, invalidFields])\n\n  const setValue = useCallback(\n    (field, v) => setValues((vs) => ({ ...vs, [field]: v })),\n    [setValues]\n  )\n  const getValue = useCallback((field) => values[field], [values])\n  const setDirty = useCallback(\n    (field) => setDirtyFields((df) => ({ ...df, [field]: true })),\n    [setDirtyFields]\n  )\n  const getDirty = useCallback(\n    (field) => Object.keys(dirtyFields).includes(field),\n    [dirtyFields]\n  )\n  const setInvalid = useCallback(\n    (field, error) => {\n      setInvalidFields((i) => ({\n        ...i,\n        [field]: error ? error : undefined,\n      }))\n    },\n    [setInvalidFields]\n  )\n  const form = {\n    setValue: setValue,\n    value: getValue,\n\n    setDirty: setDirty,\n    isDirty: getDirty,\n\n    setInvalid: setInvalid,\n  }\n\n  return (\n    <div className=\"SimpleForm-container\">\n      <FormContext.Provider value={form}>\n        {children}\n      </FormContext.Provider>\n    </div>\n  )\n}\n\nexport default SimpleForm\n```", "```\nimport { useContext, useEffect, useState } from 'react'\nimport FormContext from './FormContext'\n\nimport './InputField.css'\n\nconst splitCamelCase = (s) =>\n  s\n    .replace(/([a-z0-9])([A-Z0-9])/g, '$1 $2')\n    .replace(/^([a-z])/, (x) => x.toUpperCase())\n\nconst InputField = (props) => {\n  const form = useContext(FormContext)\n\n  const [error, setError] = useState('')\n\n  const { onValidate, name, label, ...otherProps } = props\n\n  let value = form.value && form.value(name)\n\n  useEffect(() => {\n    if (onValidate) {\n      setError(onValidate(value))\n    }\n  }, [onValidate, value])\n\n  const setInvalid = form.setInvalid\n\n  useEffect(() => {\n    if (setInvalid) {\n      setInvalid(name, error)\n    }\n  }, [setInvalid, name, error])\n\n  if (!form.value) {\n    return 'InputField should be wrapped in a form'\n  }\n\n  return (\n    <div className=\"InputField\">\n      <label htmlFor={name}>{label || splitCamelCase(name)}:</label>\n      <input\n        id={name}\n        onBlur={() => form.setDirty(name)}\n        value={value || ''}\n        onChange={(event) => {\n          form.setDirty(name)\n          form.setValue(name, event.target.value)\n        }}\n        {...otherProps}\n      />{' '}\n      {\n        <div className=\"InputField-error\">\n          {form.isDirty(name) && error ? error : <>&nbsp;</>}\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default InputField\n```", "```\nimport { useEffect, useState } from 'react'\nimport useClock from './useClock'\nimport ClockFace from './ClockFace'\n\nimport './Ticker.css'\n\nconst SimpleTicker = () => {\n  const [isTick, setTick] = useState(false)\n\n  const time = useClock('HH:mm:ss')\n\n  useEffect(() => {\n    setTick((t) => !t)\n  }, [time])\n\n  return (\n    <div className=\"Ticker\">\n      <div className=\"Ticker-clock\">\n        <h1>Time {isTick ? 'Tick!' : 'Tock!'}</h1>\n        {time}\n        <br />\n        <ClockFace time={time} />\n      </div>\n    </div>\n  )\n}\n\nexport default SimpleTicker\n```", "```\nimport { useEffect, useState } from 'react'\nimport useClock from './useClock'\n\nimport './Ticker.css'\n\nconst IntervalTicker = () => {\n  const [isTick3, setTick3] = useState(false)\n\n  const tickThreeSeconds = useClock(3000)\n\n  useEffect(() => {\n    setTick3((t) => !t)\n  }, [tickThreeSeconds])\n\n  return (\n    <div className=\"Ticker\">\n      <div className=\"Ticker-clock\">\n        <h1>{isTick3 ? '3 Second Tick!' : '3 Second Tock!'}</h1>\n        {tickThreeSeconds}\n      </div>\n    </div>\n  )\n}\n\nexport default IntervalTicker\n```", "```\n$ npm install moment\n```", "```\nimport { useEffect, useState } from 'react'\nimport moment from 'moment'\n\nconst useClock = (formatOrInterval) => {\n  const format =\n    typeof formatOrInterval === 'string'\n      ? formatOrInterval\n      : 'YYYY-MM-DDTHH:mm:ss.SSS'\n  const interval =\n    typeof formatOrInterval === 'number' ? formatOrInterval : 500\n  const [response, setResponse] = useState(\n    moment(new Date()).format(format)\n  )\n\n  useEffect(() => {\n    const newTimer = setInterval(() => {\n      setResponse(moment(new Date()).format(format))\n    }, interval)\n\n    return () => clearInterval(newTimer)\n  }, [format, interval])\n\n  return response\n}\n\nexport default useClock\n```", "```\nimport { useEffect, useState } from 'react'\n\nconst useOnline = () => {\n  const [online, setOnline] = useState(navigator.onLine)\n\n  useEffect(() => {\n    if (window.addEventListener) {\n      window.addEventListener('online', () => setOnline(true), false)\n      window.addEventListener(\n        'offline',\n        () => setOnline(false),\n        false\n      )\n    } else {\n      document.body.ononline = () => setOnline(true)\n      document.body.onoffline = () => setOnline(false)\n    }\n  }, [])\n\n  return online\n}\n\nexport default useOnline\n```", "```\nimport useOnline from './useOnline'\nimport './App.css'\n\nfunction App() {\n  const online = useOnline()\n\n  return (\n    <div className=\"App\">\n      <h1>Network Checker</h1>\n      <span>\n        You are now....\n        {online ? (\n          <div className=\"App-indicator-online\">ONLINE</div>\n        ) : (\n          <div className=\"App-indicator-offline\">OFFLINE</div>\n        )}\n      </span>\n    </div>\n  )\n}\n\nexport default App\n```", "```\n$ npm install redux\n```", "```\n$ npm install react-redux\n```", "```\nconst reducer = (state = {}, action = {}) => {\n  switch (action.type) {\n    case 'buy': {\n      const basket = state.basket ? [...state.basket] : []\n      const existing = basket.findIndex(\n        (item) => item.productId === action.payload.productId\n      )\n      if (existing !== -1) {\n        basket[existing].quantity = basket[existing].quantity + 1\n      } else {\n        basket.push({ quantity: 1, ...action.payload })\n      }\n      return {\n        ...state,\n        basket,\n      }\n    }\n    case 'clearBasket': {\n      return {\n        ...state,\n        basket: [],\n      }\n    }\n    default:\n      return { ...state }\n  }\n}\n\nexport default reducer\n```", "```\nimport { createStore } from 'redux'\nimport reducer from './reducer'\n\nconst store = createStore(reducer)\n```", "```\n<Provider store={store}>\n  All the components inside here can access the store\n</Provider>\n```", "```\nconst reducer = (state = {}, action = {}) => {\n  switch (action.type) {\n    case 'buy': {\n      const basket = state.basket ? [...state.basket] : []\n      const existing = basket.findIndex(\n        (item) => item.productId === action.payload.productId\n      )\n      if (existing !== -1) {\n        basket[existing].quantity = basket[existing].quantity + 1\n      } else {\n        basket.push({ quantity: 1, ...action.payload })\n      }\n      return {\n        ...state,\n        basket,\n      }\n    }\n    case 'clearBasket': {\n      return {\n        ...state,\n        basket: [],\n      }\n    }\n    default:\n      return { ...state }\n  }\n}\n\nexport default reducer\n```", "```\nconst basket = useSelector((state) => state.basket)\n```", "```\nconst dispatch = useDispatch()\n```", "```\ndispatch({ type: 'clearBasket' })\n```", "```\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport './Basket.css'\n\nconst Basket = () => {\n  const basket = useSelector((state) => state.basket)\n  const dispatch = useDispatch()\n\n  return (\n    <div className=\"Basket\">\n      <h2>Basket</h2>\n      {basket && basket.length ? (\n        <>\n          {basket.map((item) => (\n            <div className=\"Basket-item\">\n              <div className=\"Basket-itemName\">{item.name}</div>\n              <div className=\"Basket-itemProductId\">\n                {item.productId}\n              </div>\n              <div className=\"Basket-itemPricing\">\n                <div className=\"Basket-itemQuantity\">\n                  {item.quantity}\n                </div>\n                <div className=\"Basket-itemPrice\">{item.price}</div>\n              </div>\n            </div>\n          ))}\n          <button onClick={() => dispatch({ type: 'clearBasket' })}>\n            Clear\n          </button>\n        </>\n      ) : (\n        'Empty'\n      )}\n    </div>\n  )\n}\n\nexport default Basket\n```", "```\nimport { useDispatch } from 'react-redux'\n\nimport './Boots.css'\n\nconst products = [\n  {\n    productId: 'BE8290004',\n    name: 'Ski boots',\n    description: 'Mondo 26.5\\. White.',\n    price: 698.62,\n  },\n  {\n    productId: 'PC6310098',\n    name: 'Snowboard boots',\n    description: 'Mondo 27.5\\. Blue.',\n    price: 825.59,\n  },\n  {\n    productId: 'RR5430103',\n    name: 'Mountaineering boots',\n    description: 'Mondo 27.3\\. Brown.',\n    price: 634.98,\n  },\n]\n\nconst Boots = () => {\n  const dispatch = useDispatch()\n\n  return (\n    <div className=\"Boots\">\n      <h1>Boots</h1>\n\n      <dl className=\"Boots-products\">\n        {products.map((product) => (\n          <>\n            <dt>{product.name}</dt>\n            <dd>\n              <p>{product.description}</p>\n              <p>${product.price}</p>\n              <button\n                onClick={() =>\n                  dispatch({ type: 'buy', payload: product })\n                }\n              >\n                Add to basket\n              </button>\n            </dd>\n          </>\n        ))}\n      </dl>\n    </div>\n  )\n}\n\nexport default Boots\n```", "```\n$ npm install redux-persist\n```", "```\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n```", "```\nconst store = createStore(persistedReducer)\n```", "```\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst persistor = persistStore(store)\n...\n<Provider store={store}>\n  <PersistGate loading={<div>Loading...</div>} persistor={persistor}>\n    Components live in here\n  </PersistGate>\n</Provider>\n```", "```\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nimport Menu from './Menu'\nimport Home from './Home'\nimport Boots from './Boots'\nimport Basket from './Basket'\n\nimport './App.css'\nimport reducer from './reducer'\n\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nconst store = createStore(persistedReducer)\n\nconst persistor = persistStore(store)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <PersistGate\n          loading={<div>Loading...</div>}\n          persistor={persistor}\n        >\n          <BrowserRouter>\n            <Menu />\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/boots\">\n                <Boots />\n              </Route>\n            </Switch>\n            <Basket />\n          </BrowserRouter>\n        </PersistGate>\n      </Provider>\n    </div>\n  )\n}\n\nexport default App\n```", "```\nconst basket = useSelector((state) => state.basket)\n```", "```\n$ npm install reselect\n```", "```\nit('should be able to handle multiple products', () => {\n  const actual = summarizer({\n    basket: [\n      { productId: '1234', quantity: 2, price: 1.23 },\n      { productId: '5678', quantity: 1, price: 1.5 },\n    ],\n  })\n  expect(actual).toEqual({ itemCount: 3, cost: 3.96 })\n})\n```", "```\nimport { createSelector } from 'reselect'\n\nconst summarizer = createSelector(\n  (state) => state.basket || [],\n  (basket) => ({\n    itemCount: basket.reduce((i, j) => i + j.quantity, 0),\n    cost: basket.reduce((i, j) => i + j.quantity * j.price, 0),\n  })\n)\n\nexport default summarizer\n```", "```\n(state) => state.basket || []\n```", "```\n(basket) => ({\n  itemCount: basket.reduce((i, j) => i + j.quantity, 0),\n  cost: basket.reduce((i, j) => i + j.quantity * j.price, 0),\n})\n```", "```\n{itemCount: 3, cost: 3.96}\n```", "```\n{itemCount: 3, cost: 3.96}\n```", "```\nimport { createSelector } from 'reselect'\nimport summarizer from './summarizer'\n\nconst taxer = createSelector(\n  summarizer,\n  (summary) => summary.cost * 0.07\n)\n\nexport default taxer\n```", "```\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport './Basket.css'\nimport summarizer from './summarizer'\nimport taxer from './taxer'\n\nconst Basket = () => {\n  const basket = useSelector((state) => state.basket)\n  const { itemCount, cost } = useSelector(summarizer)\n  const tax = useSelector(taxer)\n  const dispatch = useDispatch()\n\n  return (\n    <div className=\"Basket\">\n      <h2>Basket</h2>\n      {basket && basket.length ? (\n        <>\n          {basket.map((item) => (\n            <div className=\"Basket-item\">\n              <div className=\"Basket-itemName\">{item.name}</div>\n              <div className=\"Basket-itemProductId\">\n                {item.productId}\n              </div>\n              <div className=\"Basket-itemPricing\">\n                <div className=\"Basket-itemQuantity\">\n                  {item.quantity}\n                </div>\n                <div className=\"Basket-itemPrice\">{item.price}</div>\n              </div>\n            </div>\n          ))}\n          <p>{itemCount} items</p>\n          <p>Total: ${cost.toFixed(2)}</p>\n          <p>Sales tax: ${tax.toFixed(2)}</p>\n          <button onClick={() => dispatch({ type: 'clearBasket' })}>\n            Clear\n          </button>\n        </>\n      ) : (\n        'Empty'\n      )}\n    </div>\n  )\n}\n\nexport default Basket\n```"]