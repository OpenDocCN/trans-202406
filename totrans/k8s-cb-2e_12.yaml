- en: Chapter 12\. Maintenance and Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 维护与故障排除
- en: In this chapter, you will find recipes that deal with both app-level and cluster-level
    maintenance. We cover various aspects of troubleshooting, from debugging pods
    and containers to testing service connectivity, interpreting a resource’s status,
    and maintaining nodes. Last but not least, we look at how to deal with etcd, the
    Kubernetes control-plane storage component. This chapter is relevant for both
    cluster admins and app developers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将找到处理应用程序级别和集群级别维护的各种配方。我们涵盖了各种故障排除方面，从调试 pod 和容器到测试服务连接性，解释资源状态以及维护节点。最后但并非最不重要的是，我们将讨论如何处理
    Kubernetes 控制平面存储组件 etcd。这一章对集群管理员和应用程序开发人员都有意义。
- en: 12.1 Enabling Autocomplete for kubectl
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.1 启用 kubectl 的自动补全
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: It is cumbersome to type full commands and arguments for the `kubectl` CLI,
    so you want an autocomplete function for it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 输入完整的`kubectl` CLI 命令和参数很麻烦，因此您希望为其添加自动补全功能。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Enable autocompletion for `kubectl`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 启用`kubectl`自动补全。
- en: 'For the bash shell, you can enable `kubectl` autocompletion in your current
    shell with the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 bash shell，您可以使用以下命令在当前 shell 中启用`kubectl`自动补全：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add this to your *~/.bashrc* file so that autocomplete loads in all of your
    shell sessions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到您的*~/.bashrc*文件中，以便在所有 shell 会话中加载自动补全：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that autocompletion for bash depends on [bash-completion](https://oreil.ly/AdlLN)
    being installed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，bash 的自动补全依赖于已安装的[bash-completion](https://oreil.ly/AdlLN)。
- en: 'For the zsh shell, you can enable `kubectl` autocompletion with the following
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 zsh shell，您可以使用以下命令启用`kubectl`自动补全：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And you can add this same command to your *~/.zshrc* file for autocomplete to
    load in all your shell sessions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 而且您可以将同样的命令添加到您的*~/.zshrc*文件中，以便在所有 shell 会话中加载自动补全。
- en: 'For autocompletion to work in zsh, you may need to have these commands at the
    start of your *~/.zshrc* file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要使zsh中的自动补全功能正常工作，您可能需要在您的*~/.zshrc*文件的开头添加以下命令：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For other operating systems and shells, please check the [documentation](https://oreil.ly/G3das).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他操作系统和 shell，请查看[文档](https://oreil.ly/G3das)。
- en: Discussion
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Another popular improvement to the `kubectl` developer experience is to define
    an alias to shorten `kubectl` to just the letter `k`. This can be achieved by
    executing the following commands or adding them to your shell start-up script:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提升`kubectl`开发体验的另一个流行方法是将别名定义为缩短`kubectl`为字母`k`。您可以通过执行以下命令或将它们添加到您的 shell 启动脚本中来实现：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, you can simply type commands like `k apply -f myobject.yaml`. This combined
    with autocompletion makes life a lot easier.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以简单地输入像`k apply -f myobject.yaml`这样的命令。这与自动补全结合使用使生活变得更加轻松。
- en: See Also
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Overview of `kubectl`](https://oreil.ly/mu6PZ)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[kubectl 概述](https://oreil.ly/mu6PZ)'
- en: '[`kubectl` Cheat Sheet](https://oreil.ly/Yrk3C)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kubectl` 速查表](https://oreil.ly/Yrk3C)'
- en: 12.2 Removing a Pod from a Service
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.2 从服务中删除一个 Pod
- en: Problem
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a well-defined service (see [Recipe 5.1](ch05.html#simple_service))
    backed by several pods. But one of the pods is causing problems (e.g., crashing
    or not responding), and you want to take it out of the list of endpoints to examine
    it at a later time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您拥有一个明确定义的服务（参见[配方 5.1](ch05.html#simple_service)），支持多个 pod。但其中一个 pod 导致问题（例如崩溃或无响应），您希望将其从端点列表中移出以便稍后检查。
- en: Solution
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Relabel the pod using the `--overwrite` option—​this will allow you to change
    the value of the `run` label on the pod. By overwriting this label, you can ensure
    that it will not be selected by the service selector ([Recipe 5.1](ch05.html#simple_service))
    and will be removed from the list of endpoints. At the same time, the replica
    set watching over your pods will see that a pod has disappeared and will start
    a new replica.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--overwrite`选项重新标记 pod——这将允许您更改 pod 上的`run`标签的值。通过覆盖此标签，您可以确保它不会被服务选择器（[配方
    5.1](ch05.html#simple_service)）选中，并将其从端点列表中移除。同时，监视您的 pod 的副本集将会注意到一个 pod 消失，并将启动一个新的副本。
- en: 'To see this in action, start with a straightforward deployment generated with
    `kubectl run` (see [Recipe 4.5](ch04.html#deployments)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看其工作原理，请从使用`kubectl run`生成的简单部署开始（参见[配方 4.5](ch04.html#deployments)）：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you list the pods and show the label with key `app`, you’ll see four pods
    with the value `nginx` (`app=nginx` is the label that is automatically generated
    by the `kubectl create deployment` command):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当您列出带有键`app`的 pod 并显示值为`nginx`的标签时，您将看到四个带有值`nginx`的 pod（`app=nginx`是由`kubectl
    create deployment`命令自动生成的标签）：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can then expose this deployment with a service and check the endpoints,
    which correspond to the IP addresses of each pod:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以暴露这个部署与一个服务，并检查端点，这些端点对应于每个 Pod 的 IP 地址：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s imagine that the first pod in the list is causing problems, even though
    its status is *Running*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设列表中的第一个 Pod 正在出现问题，尽管它的状态是 *Running*。
- en: 'Moving the first pod out of the service pool via relabeling is done with a
    single command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新标记将第一个 Pod 移出服务池可以通过单个命令完成：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'To find the IP address of a pod, you can use a Go template to format the pod
    information and show only its IP address:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到 Pod 的 IP 地址，可以使用 Go 模板格式化 Pod 信息并仅显示其 IP 地址：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will see a new pod appear with the label `app=nginx`, and you will see
    that your nonworking pod still exists but no longer appears in the list of service
    endpoints:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个带有标签 `app=nginx` 的新 Pod 出现，你会看到你的不工作的 Pod 仍然存在，但不再出现在服务端点列表中：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 12.3 Accessing a ClusterIP Service Outside the Cluster
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.3 在集群外部访问 ClusterIP 服务
- en: Problem
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an internal service that is causing you trouble, and you want to test
    that it is working well locally without exposing the service externally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个内部服务正给你带来麻烦，你想在本地测试它是否正常工作，而不需要将服务暴露在外部。
- en: Solution
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a local proxy to the Kubernetes API server with `kubectl proxy`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl proxy` 对 Kubernetes API 服务器进行本地代理。
- en: 'Let’s assume that you have created a deployment and a service as described
    in [Recipe 12.2](#relabel). You should see an `nginx` service when you list the
    services:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经创建了一个部署和一个服务，就像 [Recipe 12.2](#relabel) 中描述的那样。当你列出服务时，你应该看到一个 `nginx`
    服务：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This service is not reachable outside the Kubernetes cluster. However, you can
    run a proxy in a separate terminal and then reach it on *localhost*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个服务在 Kubernetes 集群外部是无法访问的。但是，你可以在单独的终端中运行一个代理，然后在 *localhost* 上访问它。
- en: 'Start by running the proxy in a separate terminal:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在单独的终端中运行代理：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can specify the port that you want the proxy to run on with the `--port`
    option.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `--port` 选项指定代理要运行的端口。
- en: 'In your original terminal, you can then use your browser or `curl` to access
    the application exposed by your service:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的原始终端中，你可以使用浏览器或 `curl` 访问你的服务暴露的应用程序：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note the specific path to the service; it contains a `/proxy` part. Without
    this, you get the JSON object representing the service.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意服务的特定路径；它包含一个 `/proxy` 部分。如果没有这个部分，你将获得表示服务的 JSON 对象。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you can now also access the entire Kubernetes API over *localhost*
    using `curl`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，现在你也可以使用 `curl` 在 *localhost* 上访问整个 Kubernetes API。
- en: Discussion
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This recipe demonstrates an approach that is suitable for debugging and should
    not be used for regular access to services in production. Rather, use the secure
    [Recipe 5.5](ch05.html#ingress) for production scenarios.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了一种适用于调试的方法，并不适用于生产环境中服务的常规访问。相反，请使用安全的 [Recipe 5.5](ch05.html#ingress)
    处理生产场景。
- en: 12.4 Understanding and Parsing Resource Statuses
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.4 理解和解析资源状态
- en: Problem
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to watch an object, such as a pod, and react to changes in the object’s
    status. Sometimes these state changes trigger events in CI/CD pipelines.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望监视一个对象，比如一个 Pod，并对对象状态的变化做出反应。有时这些状态变化会触发 CI/CD 管道中的事件。
- en: Solution
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `kubectl get $KIND/$NAME -o json` and parse the JSON output using one of
    the two methods described here.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl get $KIND/$NAME -o json` 并使用这里描述的两种方法之一解析 JSON 输出。
- en: 'If you have the JSON query utility `jq` [installed](https://oreil.ly/qopuJ),
    you can use it to parse the resource status. Let’s assume you have a pod called
    `jump`. You can do this to find out what [Quality of Service (QoS) class](https://oreil.ly/3CcxH)
    the pod is in:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 JSON 查询工具 `jq` [（已安装）](https://oreil.ly/qopuJ)，你可以使用它来解析资源状态。假设你有一个名为
    `jump` 的 Pod。你可以这样做来找出这个 Pod 属于什么 [Quality of Service (QoS) class](https://oreil.ly/3CcxH)：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that the `--raw-output` argument for `jq` will show the raw value and that
    `.status.qosClass` is the expression that matches the respective subfield.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`jq` 的 `--raw-output` 参数将显示原始值，并且 `.status.qosClass` 是匹配相应子字段的表达式。
- en: 'Another status query could be around events or state transitions. For example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个状态查询可能围绕事件或状态转换。例如：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Of course, these queries are not limited to pods—​you can apply this technique
    to any resource. For example, you can query the revisions of a deployment:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些查询不仅限于 Pod —— 你可以将这种技术应用于任何资源。例如，你可以查询 Deployment 的修订版本：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or you can list all the endpoints that make up a service:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以列出组成一个服务的所有端点：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that you’ve seen `jq` in action, let’s move on to a method that doesn’t
    require external tooling—​that is, the built-in feature of using Go templates.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'The Go programming language defines templates in a package called `text/template`
    that can be used for any kind of text or data transformation, and `kubectl` has
    built-in support for it. For example, to list all the container images used in
    the current namespace, do this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Discussion
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may also want to take a look at JSONPath as an alternative way to parse
    the JSON produced by `kubectl`. It provides a syntax that can be considered more
    readable and easier to reason about. Examples can be found in the [Kubernetes
    documentation](https://oreil.ly/muOnq).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[The `jq` manual](https://oreil.ly/Z7rul)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[jqplay](https://jqplay.org) to try out queries without installing `jq`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Go `template` package](https://oreil.ly/qfQAO)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12.5 Debugging Pods
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have a situation where a pod is either not getting to or remaining in the
    running state as expected or fails altogether after some time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To systematically discover and fix the cause of the problem, enter an [OODA
    loop](https://oreil.ly/alw1o):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '*Observe*. What do you see in the container logs? What events have occurred?
    How is the network connectivity?'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Orient*. Formulate a set of plausible hypotheses—​stay as open-minded as possible
    and don’t jump to conclusions.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Decide*. Pick one of the hypotheses.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Act*. Test the hypothesis. If it’s confirmed, you’re done; otherwise, go back
    to step 1 and continue.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s take a look at a concrete example where a pod fails. Create a manifest
    called *unhappy-pod.yaml* with this content:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now when you launch that deployment and look at the pod it creates, you’ll
    see it’s unhappy:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see at the bottom of the description, in the `Events` section, Kubernetes
    considers this pod as not ready to serve traffic because “Back-off restarting
    failed…​.”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Another way to observe this is by using the Kubernetes dashboard to view the
    deployment ([Figure 12-1](#unhappy-deployment-screenshot)), as well as the supervised
    replica set and the pod ([Figure 12-2](#unhappy-pod-events-screenshot)). With
    Minikube you can easily open the dashboard by running the command `minikube dashboard`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen Shot Of Deployment In Error State](assets/kcb2_1201.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. Deployment in error state
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Screen Shot Of Pod In Error State](assets/kcb2_1202.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. Pod in error state
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An issue, be it a pod failing or a node behaving strangely, can have many different
    causes. Here are some things you’ll want to check before suspecting software bugs:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Is the manifest correct? Check with a tool such as [Kubeconform](https://oreil.ly/q_e39).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you able to run the container locally outside of Kubernetes?
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can Kubernetes reach the container registry and actually pull the container
    image?
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the nodes talk to each other?
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the nodes reach the control plane?
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is DNS available in the cluster?
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there sufficient resources available on the nodes, such as CPU, memory,
    and disk space?
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点上是否有足够的资源可用，例如 CPU、内存和磁盘空间？
- en: Did you restrict the container or the namespace’s resource usage?
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否限制了容器或命名空间的资源使用？
- en: What are the events in the object description saying?
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象描述中的事件说了什么？
- en: See Also
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Debug Pods”](https://oreil.ly/nuThZ) in the Kubernetes documentation'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“调试 Pods”](https://oreil.ly/nuThZ) 在 Kubernetes 文档中'
- en: '[“Debug Running Pods”](https://oreil.ly/61xce) in the Kubernetes documentation'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“调试运行中的 Pods”](https://oreil.ly/61xce) 在 Kubernetes 文档中'
- en: '[“Debug Services”](https://oreil.ly/XrF29) in the Kubernetes documentation'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“调试 Services”](https://oreil.ly/XrF29) 在 Kubernetes 文档中'
- en: '[“Troubleshooting Clusters”](https://oreil.ly/LD9oN) in the Kubernetes documentation'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“集群故障排除”](https://oreil.ly/LD9oN) 在 Kubernetes 文档中'
- en: 12.6 Influencing a Pod’s Start-up Behavior
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.6 影响 Pod 的启动行为
- en: Problem
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: For your pod to function properly, it depends on some other service being available.
    You want to influence the pod’s start-up behavior so that it starts only once
    the pods it depends on are available.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你的 Pod 正常运行，它依赖于其他一些服务的可用性。你希望影响 Pod 的启动行为，以便它只在依赖的 Pod 可用时才启动。
- en: Solution
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use [init containers](https://oreil.ly/NWpRM) to influence the start-up behavior
    of a pod.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [init containers](https://oreil.ly/NWpRM) 来影响 Pod 的启动行为。
- en: Imagine you want to launch an NGINX web server that depends on a backend service
    to serve content. You therefore want to make sure that the NGINX pod starts up
    only once the backend service is up and running.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要启动一个依赖于后端服务的 NGINX Web 服务器来提供内容。因此，你希望确保只有在后端服务已经启动并运行时，NGINX Pod 才启动。
- en: 'First, create the backend service the web server depends on:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建 Web 服务器依赖的后端服务：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then you can use the following manifest, *nginx-init-container.yaml*, to launch
    the NGINX instance and make sure it starts up only when the `backend` deployment
    is ready to accept connections:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下清单 *nginx-init-container.yaml* 来启动 NGINX 实例，并确保它只在 `backend` 部署准备好接受连接时才启动：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now you can launch the `nginx` deployment and verify whether the init container
    has done its job by looking at the logs of the pod it is supervising:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以启动 `nginx` 部署，并通过查看它监督的 Pod 的日志来验证 init 容器是否已完成其工作：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, the command in the init container indeed worked as planned.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，init 容器中的命令确实按计划运行。
- en: Discussion
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Init containers are useful to prevent your application from crash looping while
    it is waiting for a service to become available. For example, if you are deploying
    an application that needs to connect to a database server, you can configure an
    init container that checks and waits for the database server to become ready before
    your application attempts a connection with it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Init 容器在等待服务可用时，防止应用程序发生崩溃循环非常有用。例如，如果你部署需要连接到数据库服务器的应用程序，可以配置一个 init 容器来检查并等待数据库服务器准备好，然后再尝试连接。
- en: However, it is important to keep in mind that Kubernetes can technically kill
    a pod at any time, even after it was started successfully. Therefore, it is also
    important that you build resiliency into your application such that it can survive
    failures in other dependent services.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是要记住 Kubernetes 在成功启动 Pod 后也可以随时杀死它。因此，你需要确保你的应用程序具有足够的弹性，以应对其他依赖服务的故障。
- en: 12.7 Getting a Detailed Snapshot of the Cluster State
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.7 获取集群状态的详细快照
- en: Problem
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to get a detailed snapshot of the overall cluster state for orientation,
    auditing, or troubleshooting purposes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要获得整个集群状态的详细快照，以便进行定位、审计或故障排除。
- en: Solution
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl cluster-info dump` command. For example, to create a dump
    of the cluster state in a subdirectory *cluster-state-2023-04-13*, do this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl cluster-info dump` 命令。例如，要在子目录 *cluster-state-2023-04-13* 中创建集群状态的转储，请执行以下操作：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 12.8 Adding Kubernetes Worker Nodes
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.8 添加 Kubernetes 工作节点
- en: Problem
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to add a worker node to your Kubernetes cluster, for instance because
    you want to increase the capacity of your cluster.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要向你的 Kubernetes 集群添加一个工作节点，比如因为你想增加集群的容量。
- en: Solution
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Provision a new machine in whatever way your environment requires (for example,
    in a bare-metal environment you might need to physically install a new server
    in a rack, in a public cloud setting you need to create a new VM, etc.), and then
    install, as daemons, the three components that make up a Kubernetes worker node:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '`kubelet`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the node manager and supervisor for all pods, no matter if they’re
    controlled by the API server or running locally, such as static pods. Note that
    the `kubelet` is the final arbiter of what pods can or cannot run on a given node,
    and it takes care of the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Reporting node and pod statuses to the API server
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Periodically executing liveness probes
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting the pod volumes and downloading secrets
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the container runtime (see the following)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container runtime
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: This is responsible for downloading container images and running containers.
    Kubernetes requires the use of a runtime that conforms to the [Container Runtime
    Interface (CRI)](https://oreil.ly/6hmkR), like [cri-o](http://cri-o.io), [Docker
    Engine](https://docs.docker.com/engine), or [containerd](https://containerd.io).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '`kube-proxy`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: This process dynamically configures iptables rules on the node to enable the
    Kubernetes service abstraction (redirecting the VIP to the endpoints, one or more
    pods representing the service).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The actual installation of the components depends heavily on your environment
    and the installation method used (cloud, `kubeadm`, etc.). For a list of available
    options, see the [`kubelet` reference](https://oreil.ly/8XBRS) and [`kube-proxy`
    reference](https://oreil.ly/mED8e).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Worker nodes, unlike other Kubernetes resources such as deployments or services,
    are not directly created by the Kubernetes control plane but only managed by it.
    That means when Kubernetes creates a node, it actually only creates an object
    that *represents* the worker node. It validates the node by health checks based
    on the node’s `metadata.name` field, and if the node is valid—​that is, all necessary
    components are running—​it is considered part of the cluster; otherwise, it will
    be ignored for any cluster activity until it becomes valid.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[“Nodes”](https://oreil.ly/MQ4ZV) in the Kubernetes cluster architecture concepts'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Communication Between Nodes and the Control Plane”](https://oreil.ly/ePukq)
    in the Kubernetes documentation'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Create Static Pods”](https://oreil.ly/_OKBq) in the Kubernetes documentation'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12.9 Draining Kubernetes Nodes for Maintenance
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to carry out maintenance on a node—​for example, to apply a security
    patch or upgrade the operating system.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `kubectl drain` command. For example, list nodes with `kubectl get
    nodes`, and then to do maintenance on node `123-worker`, do this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When you are ready to put the node back into service, use `kubectl uncordon
    123-worker`, which will make the node schedulable again.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `kubectl drain` command first marks the specified node as unschedulable
    to prevent new pods from arriving (essentially a `kubectl cordon`). Then it evicts
    the pods if the API server supports [eviction](https://oreil.ly/xXLII). Otherwise,
    it will use `kubectl delete` to delete the pods. The Kubernetes docs have a concise
    sequence diagram of the steps, reproduced in [Figure 12-3](#drain-node).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl drain` 命令首先将指定节点标记为不可调度，以阻止新的 Pod 进入（本质上是 `kubectl cordon`）。然后，如果
    API 服务器支持[驱逐](https://oreil.ly/xXLII)，它会驱逐这些 Pod。否则，它将使用 `kubectl delete` 删除这些
    Pod。Kubernetes 文档中有一个简洁的步骤序列图，详见[图 12-3](#drain-node)。'
- en: '![Node drain sequence diagram](assets/kcb2_1203.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![节点排空序列图](assets/kcb2_1203.png)'
- en: Figure 12-3\. Node drain sequence diagram
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-3\. 节点排空序列图
- en: The `kubectl drain` command evicts or deletes all pods except mirror pods (which
    cannot be deleted through the API server). For pods supervised by a `DaemonSet`,
    `drain` will not proceed without using `--ignore-daemonsets`, and regardless it
    will not delete any `DaemonSet`-managed pods—​those pods would be immediately
    replaced by the `DaemonSet` controller, which ignores unschedulable markings.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl drain` 命令会驱逐或删除除镜像 Pod 外的所有 Pod（不能通过 API 服务器删除的镜像 Pod）。对于由 `DaemonSet`
    管理的 Pod，如果不使用 `--ignore-daemonsets`，`drain` 将不会继续进行；而且无论如何都不会删除任何由 `DaemonSet`
    管理的 Pod——这些 Pod 将立即被 `DaemonSet` 控制器替换，后者会忽略不可调度标记。'
- en: Warning
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: '`drain` waits for graceful termination, so you should not operate on this node
    until the `kubectl drain` command has completed. Note that `kubectl drain $NODE
    --force` will also evict pods not managed by a `ReplicationController`, `ReplicaSet`,
    `Job`, `DaemonSet`, or `StatefulSet`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`drain` 等待优雅终止，因此在 `kubectl drain` 命令完成之前不应操作此节点。请注意，`kubectl drain $NODE --force`
    还将驱逐不由 `ReplicationController`、`ReplicaSet`、`Job`、`DaemonSet` 或 `StatefulSet`
    管理的 Pod。'
- en: See Also
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Safely Drain a Node”](https://oreil.ly/upbMl) in the Kubernetes documentation'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“安全地排空节点”](https://oreil.ly/upbMl) Kubernetes 文档中'
- en: '`kubectl drain` [reference docs](https://oreil.ly/YP6zg)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl drain` [参考文档](https://oreil.ly/YP6zg)'
