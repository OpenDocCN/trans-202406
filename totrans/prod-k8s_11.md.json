["```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: <.. SNIP ...>\n    server: https://127.0.0.1:32770\n  name: kind-kind\ncontexts:\n- context:\n    cluster: kind-kind\n    user: kind-kind\n  name: kind-kind\ncurrent-context: kind-kind\nkind: Config\npreferences: {}\nusers:\n- name: kind-kind\n  user:\n    client-certificate-data: <.. SNIP ...>\n    client-key-data: <.. SNIP ...>\n```", "```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 2587742639643938140 (0x23e98238661bcd5c)\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN=kubernetes\n        Validity\n            Not Before: Jul 25 19:48:42 2020 GMT\n            Not After : Jul 25 19:48:44 2021 GMT\n        Subject: O=system:masters, CN=kubernetes-admin\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    <.. SNIP ...>\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Client Authentication\n    Signature Algorithm: sha256WithRSAEncryption\n         <.. SNIP ...>\n```", "```\nspec:\n  containers:\n  - command:\n    - kube-controller-manager\n    - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt\n    - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key\n    # Additional flags removed for brevity\n    image: k8s.gcr.io/kube-controller-manager:v1.17.3\n```", "```\n$ openssl req -new -key john.key -out john.csr -subj \"/CN=john\"\n$ openssl req -in john.csr -text\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: CN=john\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    <.. SNIP ...>\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha256WithRSAEncryption\n         <.. SNIP ...>\n```", "```\ncat <<EOF | kubectl apply -f -\napiVersion: certificates.k8s.io/v1beta1\nkind: CertificateSigningRequest\nmetadata:\n  name: john\nspec:\n  request: $(cat john.csr | base64 | tr -d '\\n')\n  usages:\n  - client auth\nEOF\n```", "```\n$ kubectl get csr\nNAME     AGE   REQUESTOR            CONDITION\nmy-app   17h   kubernetes-admin     Pending\n```", "```\napiVersion: certificates.k8s.io/v1beta1\nkind: CertificateSigningRequest\nmetadata:\n  name: my-app\n# Additional fields removed for brevity\nstatus:\n  certificate: <.. SNIP ...>\n  conditions:\n  - lastUpdateTime: \"2020-03-04T15:45:30Z\"\n    message: This CSR was approved by kubectl certificate approve.\n    reason: KubectlApprove\n    type: Approved\n```", "```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            66:82:3f:cc:10:3f:aa:b1:df:5b:c5:42:cf:cb:5b:44:e1:45:49:7f\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN=kubernetes\n        Validity\n            Not Before: Mar  4 15:41:00 2020 GMT\n            Not After : Mar  4 15:41:00 2021 GMT\n        Subject: CN=john\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    <.. SNIP ...>\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Extended Key Usage:\n                TLS Web Client Authentication\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Subject Key Identifier:\n                EE:8E:E5:CC:98:41:78:4A:AE:32:75:52:1C:DC:DD:D0:9B:95:E0:81\n    Signature Algorithm: sha256WithRSAEncryption\n         <.. SNIP ...>\n```", "```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: <.. SNIP ...>\n    server: https://127.0.0.1:32770\n  name: kind-kind\ncontexts:\n- context:\n    cluster: kind-kind\n    user: kind-kind\n  name: kind-kind\ncurrent-context: kind-kind\nkind: Config\npreferences: {}\nusers:\n- name: kind-kind\n  user:\n    client-certificate-data: <.. SNIP ...>\n    client-key-data: <.. SNIP ...>\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cluster-admin-view\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: view\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: ops-team\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cluster-admin-crb\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: User\n  name: cluster-admin\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cluster-admin-impersonator\nrules:\n- apiGroups: [\"\"]\n  resources: [\"users\"]\n  verbs: [\"impersonate\"]\n  resourceNames: [\"cluster-admin\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cluster-admin-impersonate\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin-impersonator\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: ops-team\n```", "```\n$ kubectl get configmaps\nNo resources found.\n\n$ kubectl create configmap my-config --from-literal=test=test\nError from server (Forbidden): configmaps is forbidden: User \"john\"\ncannot create resource \"configmaps\" in API group \"\" in the namespace \"default\"\n\n$ kubectl --as=cluster-admin create configmap my-config --from-literal=test=test\nconfigmap/my-config created\n```", "```\napiVersion: projectcalico.org/v3\nkind: GlobalNetworkPolicy\nmetadata:\n  name: summary\nspec:\n  selector: app == 'summary'\n  ingress:\n    - action: Allow\n      source:\n        serviceAccounts:\n          names: [\"customer\"]\n        NamespaceSelector: app == 'bank'\n  egress:\n    - action: Allow\n```", "```\n$ kubectl exec -it -n kube-system cilium-oid9h -- cilium endpoint list\nNAMESPACE     NAME                              ENDPOINT ID   IDENTITY ID\ndefault       deathstar-657477f57d-jpzgb        1474          1597\ndefault       deathstar-657477f57d-knxrl        2151          1597\ndefault       deathstar-657477f57d-xw2tr        16            1597\ndefault       deathstar-657477f57d-xz2kk        2237          1597\ndefault       deathstar-657477f57d-zzz65        1             57962\n```", "```\napiVersion: \"cilium.io/v2\"\nkind: CiliumNetworkPolicy\nmetadata:\n  name: \"k8s-svc-account\"\nspec:\n  endpointSelector:\n    matchLabels:\n      io.cilium.k8s.policy.serviceaccount: leia\n  ingress:\n  - fromEndpoints:\n    - matchLabels:\n        io.cilium.k8s.policy.serviceaccount: luke\n    toPorts:\n    - ports:\n      - port: '80'\n        protocol: TCP\n      rules:\n        http:\n        - method: GET\n          path: \"/public$\"\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: default\n  namespace: default\nsecrets:\n- name: default-token-mf9v2\n```", "```\napiVersion: v1\ndata:\n  ca.crt: <.. SNIP ...>\n  namespace: ZGVmYXVsdA==\n  token: <.. SNIP ...>\nkind: Secret\nmetadata:\n  annotations:\n    kubernetes.io/service-account.name: default\n    kubernetes.io/service-account.uid: 59aee446-b36e-420f-99eb-a68895084c98\n  name: default-token-mf9v2\n  namespace: default\ntype: kubernetes.io/service-account-token\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  serviceAccountName: my-pod-sa\n# Additional fields removed for brevity\n```", "```\ncurl -X \"POST\" \"https://<kubernetes API IP>:<kubernetes API Port>\\\n/apis/authentication.k8s.io/v1/tokenreviews\" \\\n     -H 'Authorization: Bearer <token>' \\ ![1](assets/1.png)\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{\n  \"kind\": \"TokenReview\",\n  \"apiVersion\": \"authentication.k8s.io/v1\",\n  \"spec\": {\n    \"token\": \"<token to verify>\" ![2](assets/2.png) }\n}'\n```", "```\n{\n  \"kind\": \"TokenReview\",\n    \"apiVersion\": \"authentication.k8s.io/v1\",\n    \"metadata\": {\n        \"creationTimestamp\": null\n    },\n    \"spec\": {\n        \"token\": \"<token to verify>\"\n    },\n    \"status\": {\n        \"authenticated\": true,\n        \"user\": {\n            \"username\": \"system:serviceaccount:default:default\",\n            \"uid\": \"4afdf4d0-46d2-11e9-8716-005056bf4b40\",\n            \"groups\": [\n                \"system:serviceaccounts\",\n                \"system:serviceaccounts:default\",\n                \"system:authenticated\"\n            ]\n        }\n    }\n}\n```", "```\nspec:\n  containers:\n  - command:\n    - kube-apiserver\n    - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key\n    - --service-account-key-file=/etc/kubernetes/pki/sa.pub\n    - --service-account-issuer=api\n    - --service-account-api-audiences=api\n    # Additional flags removed for brevity\n    image: k8s.gcr.io/kube-apiserver:v1.17.3\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test\n  labels:\n    app: test\nspec:\n  serviceAccountName: test\n  containers:\n  - name: test\n    image: ubuntu:bionic\n    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']\n    volumeMounts:\n    - mountPath: /var/run/secrets/tokens\n      name: app-token\n  volumes:\n  - name: app-token\n    projected:\n      sources:\n      - serviceAccountToken:\n          audience: api ![1](assets/1.png)\n          expirationSeconds: 600\n          path: app-token\n```", "```\n// Additional fields removed for brevity\n\"extra\": {\n  \"authentication.kubernetes.io/pod-name\": [\"test\"],\n  \"authentication.kubernetes.io/pod-uid\":\n    [\"8b9bc1be-c71f-4551-aeb9-2759887cbde0\"]\n}\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  template:\n    metadata:\n      annotations:\n        iam.amazonaws.com/role: <role-arn>\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.9.1\n        ports:\n        - containerPort: 80\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  template:\n    metadata:\n      annotations:\n        iam.amazonaws.com/role: <role-arn>\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.9.1\n        ports:\n        - containerPort: 80\n```", "```\napiVersion: apps/v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  serviceAccountName: my-serviceaccount\n  containers:\n  - name: myapp\n    image: myapp:1.2\n    env:\n    - name: AWS_ROLE_ARN\n      value: \"arn:aws:iam::123456789012:role/\\\n        eksctl-irptest-addon-iamsa-default-my-\\\n        serviceaccount-Role1-UCGG6NDYZ3UE\"\n    - name: AWS_WEB_IDENTITY_TOKEN_FILE\n      value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token\n    volumeMounts:\n    - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount\n        name: aws-iam-token\n        readOnly: true\n  volumes:\n  - name: aws-iam-token\n    projected:\n      defaultMode: 420\n      sources:\n      - serviceAccountToken:\n          audience: sts.amazonaws.com\n          expirationSeconds: 86400\n          path: token\n```", "```\n/opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://production-trust-domain/nodes \\\n  -selector k8s_psat:cluster:production-cluster \\\n  -selector k8s_psat:agent_ns:spire \\\n  -selector k8s_psat:agent_sa:spire-agent \\\n  -node\n```", "```\n/opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://production-trust-domain/service-a \\\n  -parentID spiffe://production-trust-domain/nodes \\\n  -selector k8s:ns:default \\\n  -selector k8s:sa:service-a \\\n  -selector k8s:pod-label:app:frontend \\\n  -selector k8s:container-image:docker.io/johnharris85/service-a:v0.0.1\n```", "```\nerr := os.Setenv(\"SPIFFE_ENDPOINT_SOCKET\",\n  \"unix:///run/spire/sockets/agent.sock\")\nconn, err := spiffe.DialTLS(ctx, \"tcp\", \"service-b\",\n  spiffe.ExpectPeer(\"spiffe://production-trust-domain/service-b\"))\nif err != nil {\n  log.Fatalf(\"Unable to create TLS connection: %v\", err)\n}\n```", "```\npackage envoy.authz\n\nimport input.attributes.request.http as http_request\nimport input.attributes.source.address as source_address\n\ndefault allow = false\n\nallow {\n    http_request.path == \"/api\"\n    http_request.method == \"GET\"\n    svc_spiffe_id == \"spiffe://production-trust-domain/frontend\"\n}\n\nsvc_spiffe_id = client_id {\n    [_, _, uri_type_san] := split(\n      http_request.headers[\"x-forwarded-client-cert\"], \";\")\n    [_, client_id] := split(uri_type_san, \"=\")\n}\n```"]