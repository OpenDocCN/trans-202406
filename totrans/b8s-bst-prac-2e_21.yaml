- en: Chapter 21\. Implementing an Operator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key tenet of Kubernetes is its ability to be extended beyond the core API
    by the operators of the system. Many (these authors included) believe this extensibility
    was a driving factor in the dominance of Kubernetes in the marketplace. As developers
    began to create applications that would run on Kubernetes, operators developed
    helper applications that knew how to call the Kubernetes API and automate much
    of the routine work they would need to do to keep the applications stable. Many
    of these applications were bash scripts or helper containers running in a cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In 2016, a key group of Kubernetes contributors, led by CoreOS (now Red Hat),
    positioned an Operator pattern to allow for easier development and implementation
    of Kubernetes applications. The Operator pattern outlined a way to package, deploy,
    and maintain an application that is integrated with the Kubernetes API and client
    tooling such as `kubectl`. Using an Operator, an application developer could natively
    create an application that could run in Kubernetes, be integrated with the existing
    Kubernetes process, and embed institutional knowledge. This knowledge wasn’t limited
    to deploying the application but also allowed for smooth upgrades, reconciliation
    across disparate services, custom scaling processes, and embedding observability
    into the complex system, which drove the acceptance of the framework into the
    Kubernetes ecosystem.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is not to teach you how to write an Operator. Numerous
    resources are available on this topic and have much more in-depth coverage than
    what can be covered in a single chapter. The goal here is to introduce the concept
    and explain when and why to implement an Operator into your environment while
    sharing some of the key considerations you will need to plan.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Operator Key Components
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The [Operator Framework](https://oreil.ly/YG0gU) itself is an open source toolkit
    with a well-defined software development kit (SDK), life-cycle management, and
    publication tooling. A few projects out there have been built around the concept
    of the Operator pattern and making it easier for the community to develop. The
    members of the API Machinery SIG in the Kubernetes community sponsored the development
    of kubebuilder to offer a base SDK for working with the two main components of
    an Operator: Custom Resource Definitions (CRDs) and controllers. Sponsored by
    Google as part of the community, kubebuilder is being positioned as the base SDK
    for all operators and other projects such as KUDO, KubeOps, and Kopf. Examples
    in this chapter will be based on kubebuilder syntax where specific code is discussed;
    however, the concepts are very similar in many of the Operator SDKs out there.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Custom Resource Definitions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often the need to define complex application dependencies and resources using
    only native Kubernetes resources becomes challenging in actual practice. The platform
    engineers usually have to build complex yaml templates, with rendering pipelines
    and additional resources like jobs and init containers to manage much of the customization
    needed to run a large application. However, the Custom Resource Definition allows
    developers to extend the Kubernetes API to provide new resource types that can
    then better represent declaratively the resource needs of an application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，仅使用本机 Kubernetes 资源定义复杂应用程序依赖和资源通常具有挑战性。平台工程师通常必须构建复杂的 yaml 模板，并使用渲染流水线和额外的资源如
    jobs 和 init containers 来管理运行大型应用程序所需的大部分定制。但是，自定义资源定义允许开发人员扩展 Kubernetes API 以提供新的资源类型，从而更好地声明应用程序的资源需求。
- en: Kubernetes allows for the dynamic registration of new resources using the `Custom​Re⁠sourceDefinition`
    interface and will automatically register a new RESTful resource path for the
    versions you specify. Unlike many of the resources that are built into Kubernetes
    natively, CRDs can be maintained independently and updated when needed. CRDs will
    define a specification of the resource under the `spec` field and will have a
    `spec.scope` defining if the custom resources that are created from the CRD will
    be namespaced or cluster-wide resources. Before we see a CRD and its custom resource
    implementation, a small diversion into nomenclature of the Kubernetes API is important.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 允许使用 `CustomResourceDefinition` 接口动态注册新资源，并将根据您指定的版本自动注册新的 RESTful
    资源路径。与许多内置于 Kubernetes 中的资源不同，CRD 可以独立维护并根据需要进行更新。CRD 将在 `spec` 字段下定义资源的规范，并将使用
    `spec.scope` 定义从 CRD 创建的自定义资源是命名空间范围的还是集群范围的。在我们看到 CRD 及其自定义资源实现之前，了解 Kubernetes
    API 的命名规范是很重要的。
- en: Kubernetes API objects, resources, version, group, and kind
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes API 对象、资源、版本、组和类型
- en: Objects in Kubernetes are the actual entities that are persisted in the system
    to represent the state of the cluster. The object itself is what the typical CRUD
    operations act on within a cluster. In essence an object will be the entire resource
    definition in state such as a pod or PersistentVolume.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的对象是在系统中持久保存以表示集群状态的实际实体。对象本身是集群内标准 CRUD 操作的操作对象。实质上，对象将是在状态中的整个资源定义，如
    Pod 或 PersistentVolume。
- en: 'A Kubernetes resource is an endpoint in the API that represents a collection
    of objects of a specific kind. So a pod resource will contain a collection of
    Pod objects. One can see this in the cluster easily with:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 资源是 API 中表示特定类型对象集合的端点。因此，一个 Pod 资源将包含一组 Pod 对象。可以在集群中轻松看到这一点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Groups bring objects of similar concern together. This grouping combined with
    versioning allows for objects within the same group to be managed individually
    and updated as needed. The group is represented in the RESTful path in the `apiVersion`
    field of the object. In Kubernetes the core group (also described as legacy) will
    fall under the */api/REST* path. Often seen in a Pod spec or Deployment yaml in
    the `apiVersion` field with the base path removed as such:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 组将具有类似关注点的对象聚合在一起。此组合结合版本控制允许单独管理同一组内的对象并根据需要进行更新。该组在对象的 `apiVersion` 字段中以 RESTful
    路径表示。在 Kubernetes 中，核心组（也称为遗留组）将位于 */api/REST* 路径下。通常在 Pod 规范或 Deployment yaml
    中的 `apiVersion` 字段中可以看到基本路径被移除，例如：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As with any good API, Kubernetes APIs are versioned and support multiple versions
    using different API paths. There are guidelines for Kubernetes versioning and
    the same guidelines should be used when versioning Custom Resources. APIs can
    also fall into different levels based on support or stability of the API, so often
    you will see Alpha, Beta, or Stable APIs. In a cluster, for example, you may have
    `v1` and `v1beta1` for the same group:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何良好的 API 一样，Kubernetes 的 API 是经过版本化处理的，并支持使用不同的 API 路径来支持多个版本。在 Kubernetes
    版本控制方面有指导原则，自定义资源的版本化应使用相同的指导原则。API 也可以根据其支持或稳定性划分为不同级别，因此您通常会看到 Alpha、Beta 或
    Stable API。例如，在集群中，您可能会看到相同组的 `v1` 和 `v1beta1` 版本：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Often, Kind and Resource are used as the same context; however, a resource
    is a concrete implementation of a Kind. Often there is a direct Kind to Resource
    relationship such as when defining a `kind: Pod` specification that will create
    a pod resource in the cluster. On occasion there is a one to many relationship
    such as the `Scale` kind, which can be returned by different resources such as
    `Deployment` or `ReplicaSet`. This is known as a subresource.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，Kind 和 Resource 在同一语境中使用；然而，资源是 Kind 的具体实现。通常存在直接的 Kind 到 Resource 的关系，例如在定义`kind:
    Pod`规范时，将在集群中创建一个 Pod 资源。偶尔也会有一对多的关系，例如`Scale` kind，可以由不同的资源如`Deployment`或`ReplicaSet`返回。这称为子资源。'
- en: Putting these principles together we can begin to model our API for our customer
    resource. For the rest of this chapter, kubebuilder-generated snippets will be
    used, but the actual code is not important and will be only a partial representation.
    The concept discussed is what the focus will be and how it relates to best practices
    when implementing an Operator.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些原则结合起来，我们可以开始为客户资源建模我们的 API。在本章的其余部分，将使用 kubebuilder 生成的片段，但实际代码并不重要，只是部分表述。重点将放在讨论的概念及其与实现
    Operator 时的最佳实践之间的关系。
- en: Creating Our API
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的 API
- en: 'A Customer Resource Definition can be created in yaml by hand; however, kubebuilder
    and other Operator SDKs will automatically generate the API definition for you
    based on the code provided. In kubebuilder you can create a scaffold of the API
    and the required Go code after your project is initialized. To initialize a project,
    once kubebuilder and its prerequisites are met, you can simply run an `init` command
    from a new directory that will contain your project files:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可以手动创建 YAML 格式的客户资源定义；然而，kubebuilder 和其他 Operator SDK 会根据提供的代码自动为您生成 API 定义。在
    kubebuilder 中，您可以在项目初始化后创建 API 的脚手架和所需的 Go 代码。要初始化项目，一旦满足 kubebuilder 及其先决条件，您可以从新目录运行`init`命令，其中将包含您的项目文件：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will create some basic files and placeholder boilerplate code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一些基本文件和占位符样板代码：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once that is completed you can create the scaffold for the API definition by
    running the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以通过运行以下命令创建 API 定义的脚手架：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will add an API, bin, and controllers directories and update other directories
    with more boilerplate code. The two main files to work with are the *api/<version>/<kind>_types.go*
    and *controllers/<kind>_controller.go* files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加一个 API、bin 和 controllers 目录，并更新其他目录以包含更多样板代码。主要工作的两个文件是 *api/<version>/<kind>_types.go*
    和 *controllers/<kind>_controller.go*。
- en: 'To start modifying your API to map to the resources you want expressed in your
    CRD, you will add new fields to the struct created for your new object in the
    *api/<version>/<kind>_types.go* file. So for our example here we add the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始修改您的 API 以映射到您在 CRD 中希望表达的资源，您需要在 *api/<version>/<kind>_types.go* 文件中为新对象创建的结构体添加新字段。因此，在我们的示例中，我们添加以下内容：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you are not a Go programmer do not worry as there are other projects such
    as Java Operator SDK and Kopf that can help you build Operators in either Java
    or Python as well. The Operator Framework SDK also has support to create Operators
    from Ansible or Helm.
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您不是 Go 程序员，不用担心，因为还有其他项目如 Java Operator SDK 和 Kopf，可以帮助您用 Java 或 Python 构建
    Operator。Operator Framework SDK 还支持从 Ansible 或 Helm 创建 Operator。
- en: 'To continue with the example, we want to add specific fields to the spec and
    also have a status. To update specification the information can be added as such:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 继续上面的示例，我们希望向规范添加特定字段，并且还有一个状态。要更新规范，可以添加如下信息：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What is of importance here is we mapped the information we need in the spec
    that defines the application into data types and gave them a JSON representation.
    The `// +kubebuilder:` lines that look like they are in comments are marker comments
    that kubebuilder uses to generate code based on the information provided. As an
    example, we are declaring to kubebuilder to generate all the needed code to ensure
    that the `Framework` field is validated against three possible strings of Java,
    Python, or Go. That is why it was noted at the end of the `kubebuilder create
    api` command that any changes made to the API require a `make generate` to update
    all the other generated code required and the `make manifests` to update all the
    yaml manifests’ boilerplate. This will then give you a starting CRD that looks
    something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的是，我们将定义应用程序中的信息映射到数据类型中，并给它们提供 JSON 表示。看起来像是注释的 `// +kubebuilder:` 行是 kubebuilder
    使用的标记注释，根据提供的信息生成代码。例如，我们声明给 kubebuilder 生成所有必要的代码，以确保 `Framework` 字段根据 Java、Python
    或 Go 的三个可能字符串进行验证。这就是为什么在 `kubebuilder create api` 命令的末尾指出，对 API 所做的任何更改都需要 `make
    generate` 来更新所有其他所需的生成代码，以及 `make manifests` 来更新所有 yaml 清单的样板代码。这将为您提供一个起始的 CRD，看起来类似于这样：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will notice that kubebuilder also added the OpenAPI validation information
    so the CR can be validated against the requirements of the CRD. Kubebuilder also
    allows for the creation of additional validators using logic via a webhook. To
    add admission webhooks for your CRD, by implementing the Defaulter and/or the
    Validator interface, kubebuilder provides code generation to create the webhook
    server and registers it with the controller manager. Using the kubebuilder CLI
    this can easily be generated in a scaffold again with:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，kubebuilder 还添加了 OpenAPI 验证信息，因此 CR 可以根据 CRD 的要求进行验证。 Kubebuilder 还允许通过
    webhook 使用逻辑创建额外的验证器。通过实现 Defaulter 和/或 Validator 接口，kubebuilder 提供了代码生成来创建 webhook
    服务器，并将其注册到控制器管理器中。使用 kubebuilder CLI 可以轻松地再次生成此脚手架：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can deploy this custom resource easily with kubebuilder:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 kubebuilder 轻松部署这个自定义资源：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can then see from the `kubectl` command that the egapp resource is now installed
    in the cluster, and we can see the structure of the resource itself:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以从 `kubectl` 命令中看到，egapp 资源现在已安装在集群中，并且我们可以看到资源本身的结构：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that the API has been created and installed in the cluster, it can’t really
    do anything. At this stage if we create a yaml and deploy it to the cluster in
    a namespace it will create an entry in etcd with the information stated in the
    yaml, but until we create the controller, nothing will happen. Now let’s explore
    how the controller works.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 API 已经在集群中创建并安装了，但它实际上什么也做不了。在这个阶段，如果我们创建一个 yaml 文件并将其部署到命名空间中，它将在 etcd 中创建一个条目，并按照
    yaml 中指定的信息进行设置，但在创建控制器之前，什么也不会发生。现在让我们探索一下控制器是如何工作的。
- en: Controller Reconciliation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Controller Reconciliation
- en: The controller code was created when the API was created and will have much
    of the boilerplate needed to start building the reconciliation logic needed. Note
    that the code is not important here, but the understanding of what is happening
    behind the scenes is key to understanding what an Operator can do. The controller
    code is located in the *controllers/<kind>_controller.go* file. The `Reconcile`
    method is where the logic should be added. Before we dive into that, a plan for
    reconciliation and understanding the phases is required. This is shown in [Figure 21-1](#operator_overview).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建 API 时，控制器代码也会一并创建，并具有开始构建所需的调和逻辑所需的大部分样板代码。请注意，这里代码本身并不重要，但理解幕后发生的事情对于理解
    Operator 能够做什么至关重要。控制器代码位于 *controllers/<kind>_controller.go* 文件中。`Reconcile`
    方法是应该添加逻辑的地方。在我们深入了解之前，需要制定一个调和计划，并理解各个阶段。这在 [Figure 21-1](#operator_overview)
    中展示。
- en: '![Operator Overview](assets/kbp2_2101.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![操作员概览](assets/kbp2_2101.png)'
- en: Figure 21-1\. Operator overview
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 21-1\. 操作员概览
- en: Operators are services that watch for events related to the resource types the
    operator cares about. When an event occurs that meets the criteria, called a predicate
    in the Operator pattern, the Operator begins the process of reconciling the desired
    state to the running state. During the reconciliation process, any logic to determine
    how to handle the state change is implemented; regardless of what exactly changed,
    the reconcile cycle handles it all. This is known as level-based triggering, and
    while less efficient, it is well-suited for complex distributed system like Kubernetes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Operator 是监视与 Operator 模式关注的资源类型相关事件的服务。当事件满足条件（在 Operator 模式中称为谓词）时，Operator
    开始将期望状态调和到运行状态的过程。在调和过程中，实现任何决定如何处理状态更改的逻辑；无论具体发生了什么变化，调和周期都会处理。这被称为基于级别的触发，虽然效率较低，但非常适合像
    Kubernetes 这样的复杂分布式系统。
- en: 'In the Operator, developers will code into the `Reconcile` method the logic
    represented in [Figure 21-2](#reconciliation_logic):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Operator 中，开发者将会在`Reconcile`方法中编写 [图 21-2](#reconciliation_logic) 中所代表的逻辑：
- en: Is there an instance of the Custom Resource?
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否存在自定义资源的实例？
- en: If so, do some validation.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，进行一些验证。
- en: If valid, check to see if state needs to be changed and change it.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有效，则检查状态是否需要更改并进行更改。
- en: If the resource is being deleted, the logic to handle cleanup is also implemented
    here.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正在删除资源，则在此处还实现了处理清理的逻辑。
- en: If your CR implements other resources that it does not directly own, you should
    implement a `Finalizer` to handle the cleanup of those sources and block the deletion
    of the CR until the finalizer completes its process. This is often used for CRs
    that will create resources on a cloud provider, for example, or PersistentVolumes
    as they may have some reclaim policy defined that needs to be honored before the
    PV is considered deleted.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 CR 实现了其他资源，而这些资源并非直接属于它，您应该实现一个`Finalizer`来处理这些资源的清理工作，并阻止 CR 在最终器完成其处理之前被删除。例如，这经常用于在云服务提供商上创建资源的
    CR 或具有某些回收策略的 PersistentVolumes，在 PV 被视为已删除之前需要执行该策略。
- en: '![Reconciliation Logic](assets/kbp2_2102.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![调和逻辑](assets/kbp2_2102.png)'
- en: Figure 21-2\. Reconciliation logic
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-2\. 调和逻辑
- en: Resource Validation
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源验证
- en: An important aspect of designing an efficient Operator is the validation of
    the resources being requested. As mentioned there are a few ways to validate the
    resource against the API specification; however, it is important to build redundancies
    into the process to ensure consistent behavior. The first layer of validation
    should be the OpenAPI validation defined in the CRD specification. This validation
    will prevent the CR from ever making it to the etcd server as a resource and causing
    detrimental aftereffects. The second layer of validation should be a validating
    admission controller implementation that will check the resource against the API
    specification through a webhook request. This again prevents the resource from
    ever making it into the API server. Adding some validation logic in the reconciliation
    loop code is also a valid strategy, but it is important to understand that it
    will be validation against an already existing resource in the cluster state,
    and therefore proper error handling needs to take place. Often this is implemented
    as an `IsValid` method that calls the same validation logic that the Validating
    Webhook implementation has.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 设计高效 Operator 的一个重要方面是验证所请求资源的有效性。正如前述的，有几种方法可以根据 API 规范验证资源；然而，重要的是在流程中构建冗余，以确保一致的行为。验证的第一层应该是在
    CRD 规范中定义的 OpenAPI 验证。该验证将阻止 CR 作为资源传递到 etcd 服务器，并导致有害的后果。第二层验证应该是一个验证接入控制器实现，通过
    webhook 请求检查资源是否符合 API 规范。这再次阻止资源传递到 API 服务器。在调和循环代码中添加一些验证逻辑也是一种有效的策略，但重要的是要理解，这将是针对集群状态中已存在的资源进行验证，因此需要适当的错误处理。通常，这作为一个`IsValid`方法来实现，该方法调用与验证
    Webhook 实现相同的验证逻辑。
- en: Controller Implementation
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器实现
- en: 'If we continue with the example used so far, the logic for our controller will
    be in the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续使用到目前为止的示例，我们的控制器的逻辑将如下所示：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The main steps are implemented here through the reconcile process. Two important
    points to reference are:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主要步骤通过协调进程实现。参考的两个重要点是：
- en: The Custom Resource actually creates deployments. If the specific instance is
    not found, a deployment is created using values from the CR spec to fill in the
    required data. The line `ctrl.SetControllerReference(m, deploy, r.scheme)` is
    where ownership of the deployment is obtained by the CR. This allows for the resource
    to also clean up any deployments it owns when deleted.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义资源实际上创建了部署。如果未找到特定实例，则使用 CR 规范中的值创建部署所需的数据。`ctrl.SetControllerReference(m,
    deploy, r.scheme)` 是在此处通过 CR 获取部署所有权的位置。这允许资源在被删除时清理其所有权下的任何部署。
- en: The status is updated on the resource with a list of pods associated with the
    deployment. This update is done to the `status.pods` property of the CR, which
    was created as a subresource on the line `err := r.Status().Update(ctx, egApp)`.
    This is important because it will not update the status of our resource without
    increasing the `ResourceGeneration` metadata field. By implementing a predicate
    on the watch to not trigger a reconciliation on events that did not increase the
    `ResourceGeneration` metadata field, we can ensure the entire loop is not repeated
    for a noop scenario.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新资源的状态，并列出与部署相关联的一组 pod。此更新通过在代码行 `err := r.Status().Update(ctx, egApp)` 上创建的
    CR 子资源 `status.pods` 完成。这非常重要，因为它将不会在未增加 `ResourceGeneration` 元数据字段的事件上更新我们的资源状态。通过在观察期间实现一个谓词，可以确保在无操作情况下不会重复整个循环。
- en: Once the controller logic is implemented, to test it against the CR spec deployed
    earlier to the cluster, kubebuilder can run the code locally to verify all is
    working and then also package it as a container and deploy to the cluster when
    ready to operationalize.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实现了控制器逻辑，可以使用 kubebuilder 在本地运行代码以测试其是否与先前部署到集群的 CR 规范匹配，并且在准备好投入运行时，还可以将其打包为容器并部署到集群中。
- en: 'Here is what that looks like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 具体内容如下：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The logs show that the controller is up and listening for events. Then a CR
    was deployed to the cluster using:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 日志显示控制器已启动并正在侦听事件。然后使用以下命令将 CR 部署到集群中：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The controller log shows the reconciliation loop starting, and because a deployment
    did not exist it created the deployment:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器日志显示协调循环开始，并因为部署不存在而创建了部署：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then a `kubectl delete` was called on the instance and the controller began
    another reconciliation loop and deleted the object:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在实例上调用 `kubectl delete`，控制器开始另一个协调循环并删除对象：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Much more can be done within the context of the controller and API itself, for
    example, implementing complex logic around cleanup, such as calling backups, rebalancing
    workloads across nodes, scaling with custom logic, etc. This is where an engineer’s
    deep knowledge of how a system should behave, how it should be deployed, and how
    to react in case of a problem is codified. The whole premise of the benefits of
    the Operator pattern is encapsulated in this code example.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器和 API 本身的上下文中可以完成更多工作，例如实现围绕清理的复杂逻辑，如调用备份、在节点之间重新平衡工作负载、使用自定义逻辑进行扩展等。这是工程师对系统行为、部署方式以及在问题发生时如何响应的深入了解的体现。运算符模式的好处就在于这个代码示例中。
- en: Operator Life Cycle
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符生命周期
- en: 'The development of an Operator is not an easy undertaking, but it does not
    have to answer all the operational problems of the application. Development should
    focus on the big hurdles and then iterate through versions to enhance the Operator’s
    capabilities over time. The team at CoreOS and RedHat put together a solid spectrum
    of capabilities they call [Operator Capability Levels](https://oreil.ly/X_Lun)
    that outline some of the main concerns the Operator should tackle when maturing
    through the levels. These are:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 开发运算符并非易事，但不必回答应用程序的所有运行问题。开发应侧重解决重要障碍，然后通过版本迭代以逐步增强运算符的能力。CoreOS 和 RedHat 团队合作制定了称为[运算符能力级别](https://oreil.ly/X_Lun)的完整能力谱，概述了运算符在不同级别成熟时应解决的主要问题。这些问题包括：
- en: Basic install
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 基本安装
- en: Automated application provisioning and configuration management
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自动应用程序供应和配置管理
- en: Seamless upgrades
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 无缝升级
- en: Patch and minor version upgrades are supported
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 支持补丁和次要版本升级
- en: Full life cycle
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 完整生命周期
- en: App life cycle, storage life cycle (backup, failure recovery)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序生命周期、存储生命周期（备份、故障恢复）
- en: Deep insights
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 深入洞察
- en: Metrics, alerts, log processing and workload analysis
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 指标、警报、日志处理和工作负载分析
- en: Auto pilot
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 自动驾驶
- en: Horizontal/vertical scaling, auto config tuning, abnormal detection, scheduling
    tuning
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 横向/纵向扩展、自动配置调优、异常检测、调度调优
- en: This is a solid framework for planning the life of an Operator that will progress
    over time. The focus is that the Operator should be treated like any piece of
    software with defined life cycle, product management, deprecation policies, and
    clear and consistent versioning.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是规划运算符生命周期的坚实框架。重点是，运算符应像任何软件一样具有定义的生命周期、产品管理、弃用策略和清晰一致的版本控制。
- en: Version Upgrades
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本升级
- en: In our example we started with `v1alphav1` as our stated version supported in
    the CRD. Through the life cycle of the Operator there may be a need to support
    multiple versions depending on the stage and stability of the API.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们从`v1alphav1`作为CRD支持的声明版本开始。在运算符的生命周期中，可能需要支持多个版本，这取决于API的阶段和稳定性。
- en: When a new version is introduced, a process should be followed carefully to
    ensure that issues will not arise with existing resources. A Custom Resource object
    will need the ability to be served by all defined versions of the CRD. That means
    there could be a mismatch between the version being served and the one stored
    in state. A conversion process should be implemented on the Custom Resource object
    to be converted between the version stored and the version that is served. When
    the conversion involves schema changes or custom logic, a conversion webhook can
    be used to make the required updates. The default None conversion strategy is
    used when there are no schema or custom logic is needed as only the apiVersion
    field will be changed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 引入新版本时，应谨慎遵循一套流程，以确保现有资源不会出现问题。自定义资源对象将需要能够由CRD的所有定义版本提供服务。这意味着服务的版本与状态中存储的版本可能不匹配。应在自定义资源对象上实施转换过程，以便在存储的版本和提供的版本之间进行转换。当转换涉及模式更改或自定义逻辑时，可以使用转换Webhook来执行所需的更新。当不需要模式或自定义逻辑时，默认使用None转换策略，因为只会更改apiVersion字段。
- en: 'You will add a conversion strategy field to the CRD and point it to the webhook
    listening for the specific resource. This would look like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在CRD中添加一个转换策略字段，并将其指向监听特定资源的Webhook。这看起来像这样：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Operator Best Practices
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符最佳实践
- en: 'The development and ongoing upkeep of an Operator is no small endeavor and
    should be thought about and planned very carefully. Many times it is easier to
    package an application using simpler paradigms such as Helm charts, Kustomize
    repositories, or Terraform modules. When it becomes important to include special
    reconciliation logic to maintain the application or ease the burden for the users
    of the application, then an Operator pattern may make sense. If you decide to
    build an Operator then best practice guidelines are:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和持续维护运算符并不是一件小事，应该非常谨慎地考虑和规划。许多时候，使用简单的范式（如Helm图表、Kustomize存储库或Terraform模块）来打包应用程序更容易。当需要包含特殊的调和逻辑来维护应用程序或减轻用户的负担时，运算符模式可能是有意义的。如果决定构建一个运算符，则应遵循最佳实践指南：
- en: Do not overload an Operator to manage more than a single application, and own
    each CRD it controls.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要过载运算符来管理多个应用程序，每个控制它控制的CRD。
- en: 'If your Operator manages multiple CRDs then the Operator should also have multiple
    controllers. Keep it simple: one controller for each CRD.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的运算符管理多个CRD，则运算符也应具有多个控制器。保持简单：每个CRD一个控制器。
- en: Operators should not be specific to the namespace they are watching resources
    in and also should not be specific to the namespace they will be deployed in.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符不应特定于它们监视资源的命名空间，也不应特定于它们将部署的命名空间。
- en: Operators should be versioned using [semantic versioning](https://semver.org),
    and as extensions of the Kubernetes API, they should also follow the [Kubernetes
    API versioning guidelines](https://oreil.ly/O-5lH) as they relate to version changes.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符应使用[语义化版本](https://semver.org)，作为Kubernetes API的扩展，它们还应遵循与版本更改相关的[Kubernetes
    API版本控制指南](https://oreil.ly/O-5lH)。
- en: CRDs should follow the OpenAPI spec to allow for a known schema. Most Operator
    SDK-based tooling will provide a method to create boilerplate CRDs based on the
    OpenAPI spec to make them easier to develop.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRD应遵循OpenAPI规范以允许使用已知模式。大多数基于Operator SDK的工具将提供一种基于OpenAPI规范创建样板CRD的方法，以便更容易开发它们。
- en: As with any Kubernetes service the Operator itself should follow sound security
    guidelines such as run as non-root, least privilege RBAC, and observability. Metrics
    and logs should be external to the system. The Operator should be instrumented
    to allow for visibility into the Operator’s health and any known Service Level
    Indicators (SLIs). Metric exports such as Prometheus, DataDog, Cloud Operations,
    and OpenTelemetry can all be leveraged.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与任何 Kubernetes 服务一样，操作者本身应遵循良好的安全指南，如以非 root 用户运行，最小权限 RBAC 和可观察性。指标和日志应该是系统外部的。操作者应该被仪表化，以便能够看到操作者的健康状态和任何已知的服务水平指标（SLIs）。可以利用诸如
    Prometheus、DataDog、Cloud Operations 和 OpenTelemetry 的度量输出。
- en: Operators do not install other Operators and should not register their own CRDs
    as those resources are global to the cluster and would require escalated privileges
    for the Operator.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作者不会安装其他操作者，也不应注册自己的 CRD，因为这些资源对集群是全局的，并且需要为操作者提升的特权。
- en: Check all CRDs for validity before accepting the request. The CRDs could be
    validated against a known schema such as an OpenAPI validation schema or through
    an admission controller that can validate the CRD. These methods will prevent
    the resource from wasting space on etcd as it will not be submitted to the API.
    There should also be some validation logic within the reconciliation cycle as
    a last effort to validate and clean up the resource.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在接受请求之前，检查所有 CRD 的有效性。可以根据已知的模式（如 OpenAPI 验证模式）或通过可以验证 CRD 的准入控制器来验证 CRD。这些方法将防止资源浪费空间在
    etcd 上，因为它将不会被提交到 API。还应该在对账循环中增加一些验证逻辑，作为最后一次努力来验证和清理资源。
- en: The Operator should be self-cleaning when no longer needed. Proper resource
    clean up after deletion is important, not only for direct resources created by
    the Operator but also for any external resources that may have been created in
    support of the application requirements of the Operator (e.g., PVs for storage
    attached to pods as needed by the application, external resources to the cluster,
    etc.).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当操作者不再需要时，应自动清理。删除后正确清理资源非常重要，不仅适用于操作者直接创建的资源，还适用于可能已为操作者的应用程序需求创建的任何外部资源（例如，用于与
    pod 上附加的存储相关的 PV、集群外的外部资源等）。
- en: Think carefully about the life cycle of the Operator and when breaking changes
    are introduced to the upgrade path for existing users of the prior versions. Implement
    conversion webhooks to allow the conversion to and from a specific version to
    ensure there is no loss of information converting a resource from a vX to a vY
    and back to vX.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细考虑操作者的生命周期以及在向现有版本的用户升级路径引入破坏性更改时的时机。实施转换 Webhook，允许转换到特定版本和从特定版本转换，以确保在将资源从
    vX 转换为 vY 并再次转换回 vX 时不会丢失信息。
- en: Be thoughtful on the status information written to the resources managed by
    the Operator. The customer resource is the only interface to the user to understand
    the state of the resource. By having a status that is clear and concise written
    to the resource by the controller the user can easily use the existing Kubernetes
    client tooling to query and act on the status as desired. Status should be implemented
    as a subresource, and a predicate should be used so as not to trigger a reconciliation
    loop after an update that did not increase the `ResourceGeneration` metadata field
    of the main resource.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在由操作者管理的资源上写入状态信息时需要慎重。客户资源是用户了解资源状态的唯一接口。通过控制器向资源写入清晰简明的状态，用户可以轻松使用现有的 Kubernetes
    客户端工具查询和操作状态。状态应作为子资源实现，并应使用谓词，以免在更新后未增加主资源的 `ResourceGeneration` 元数据字段后触发对账循环。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The promise of fully automated deployment and “day 2” operations for an application
    has driven the Operator market beyond just experimental to become a key feature
    in the Kubernetes ecosystem. Operators should be used when complex applications
    are needed to support an organization’s business, but be careful in creating them
    when easier mechanisms exist. Leverage existing Operators created by software
    vendors that help support and maintain them, many of which can be found on [operatorhub.io](https://oreil.ly/wMLSA).
    While the Operator pattern can be a very powerful tool, it requires commitment
    to ensure that it doesn’t create more problems than it can solve. All warnings
    aside, if you are building a large application platform based on Kubernetes the
    Operator pattern should be front and center in reducing operator toil.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化部署和应用的“第二天”运维的承诺，已经使得运算符市场不再仅仅是实验性质，而成为 Kubernetes 生态系统中的关键特性。当组织需要支持复杂应用时，应使用运算符，但在存在更简单机制时要小心创建它们。利用软件供应商创建的现有运算符来帮助支持和维护它们，许多可以在
    [operatorhub.io](https://oreil.ly/wMLSA) 找到。虽然运算符模式可以是一个非常强大的工具，但需要承诺，以确保它不会制造更多问题而非解决问题。所有警告都不在话下，如果您正在基于
    Kubernetes 构建大型应用平台，那么运算符模式应该是减少运维工作的重要工具。
