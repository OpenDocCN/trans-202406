["```\nimport React, { useEffect, useState } from \"react\";\n\nconst Home = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://api.example.com/data\")\n      .then((response) => response.json())\n      .then((data) => setData(data));\n  }, []);\n\n  return (\n    <div>\n      {data.map((item) => (\n        <div key={item.id}>{item.title}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default Home;\n```", "```\nLoad HTML (full UI, with data fetched on the server)\n```", "```\nimport React, { useState } from \"react\";\n\nconst Account = () => {\n  const [balance, setBalance] = useState(100);\n\n  const handleWithdrawal = async (amount) => {\n    // Assume this request goes to a server to process the withdrawal\n    const response = await fetch(\"/withdraw\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify({ amount }),\n    });\n\n    if (response.ok) {\n      const updatedBalance = await response.json();\n      setBalance(updatedBalance);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Account Balance: {balance}</h1>\n      <button onClick={() => handleWithdrawal(10)}>Withdraw $10</button>\n      <button onClick={() => handleWithdrawal(50)}>Withdraw $50</button>\n      <button onClick={() => handleWithdrawal(100)}>Withdraw $100</button>\n    </div>\n  );\n};\n\nexport default Account;\n```", "```\n// server.js\n\n// Importing necessary modules\nconst express = require(\"express\"); // Importing Express.js library\nconst path = require(\"path\"); // Importing Path module to handle file paths\nconst React = require(\"react\"); // Importing React library\n// Importing ReactDOMServer for server-side rendering\nconst ReactDOMServer = require(\"react-dom/server\");\n\n// Importing the main App component from the src directory\nconst App = require(\"./src/App\");\n\n// Initializing an Express application\nconst app = express();\n\n// Serving static files from the 'build' directory\napp.use(express.static(path.join(__dirname, \"build\")));\n\n// Handling all GET requests\napp.get(\"*\", (req, res) => {\n  // Rendering the App component to an HTML string\n  const html = ReactDOMServer.renderToString(<App />);\n\n  // Sending an HTML response that includes the rendered App component\n  res.send(`\n <!DOCTYPE html>\n <html>\n <head>\n <title>My React App</title>\n </head>\n <body>\n <!-- Injecting the rendered App component -->\n <div id=\"root\">${html}</div>\n <!-- Linking to the main JavaScript bundle -->\n <script src=\"/static/js/main.js\"></script>\n </body>\n </html>\n `);\n});\n\n// Starting the server on port 3000\napp.listen(3000, () => {\n  // Logging a message to the console once the server is running\n  console.log(\"Server listening on port 3000\");\n});\n```", "```\nnode server.js\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My React App</title>\n  </head>\n  <body>\n    <div id=\"root\">\n      <div>\n        <h1>Hello, world!</h1>\n        <p>This is a simple React app.</p>\n      </div>\n    </div>\n    <script src=\"/static/js/main.js\"></script>\n  </body>\n</html>\n```", "```\n// Import necessary libraries\nimport React from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\n// Assuming App is the main component of your application\nimport App from \"./App\";\n\n// Hydrate the app on the client side\nhydrateRoot(document, <App />);\n```", "```\nimport React from \"react\";\nimport { renderToString } from \"react-dom/server\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <p>This is a simple React app.</p>\n    </div>\n  );\n}\n\nconst html = renderToString(<App />);\nconsole.log(html);\n```", "```\nReact.createElement(\"div\", {}, \"Hello, world!\");\n```", "```\n{\n  type: \"div\",\n  props: {},\n  children: [\"Hello, world!\"]\n}\n```", "```\nJSX -> React.createElement -> React element -> renderToString(React element) -> HTML\n\n```", "```\nReact.createElement(\n  \"section\",\n  { id: \"list\" },\n  React.createElement(\"h1\", {}, \"This is my list!\"),\n  React.createElement(\n    \"p\",\n    {},\n    \"Isn't my list amazing? It contains amazing things!\"\n  ),\n  React.createElement(\n    \"ul\",\n    {},\n    amazingThings.map((t) => React.createElement(\"li\", { key: t.id }, t.label))\n  )\n);\n```", "```\n<section id=\"list\">\n  <h1>This is my list!</h1>\n  <p>Isn't my list amazing? It contains amazing things!</p>\n  <ul>\n    <li>Thing 1</li>\n    <li>Thing 2</li>\n    <li>Thing 3</li>\n  </ul>\n</section>\n```", "```\n// server.js\n\nconst express = require(\"express\");\nconst path = require(\"path\");\nconst React = require(\"react\");\nconst ReactDOMServer = require(\"react-dom/server\");\n\nconst App = require(\"./src/App\");\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, \"build\")));\n\napp.get(\"*\", (req, res) => {\n  // Changes begin here\n  const { pipe } = ReactDOMServer.renderToPipeableStream(<App />, {\n    // When our app is ready before fetching its own data,\n    onShellReady: () => {\n      // Tell the client we're sending HTML\n      res.setHeader(\"Content-Type\", \"text/html\");\n      pipe(res); // pipe the output of the React stream to the response stream\n    },\n  });\n});\n\napp.listen(3000, () => {\n  console.log(\"Server listening on port 3000\");\n});\n```", "```\n// ./src/DogBreeds.jsx\n\nconst dogResource = createResource(\n  fetch(\"https://dog.ceo/api/breeds/list/all\")\n    .then((r) => r.json())\n    .then((r) => Object.keys(r.message))\n);\n\nfunction DogBreeds() {\n  return (\n    <ul>\n      <Suspense fallback=\"Loading...\">\n        {dogResource.read().map((profile) => (\n          <li key={profile}>{profile}</li>\n        ))}\n      </Suspense>\n    </ul>\n  );\n}\n\nexport default DogBreeds;\n```", "```\n// src/App.js\nimport React, { Suspense } from \"react\";\n\nconst ListOfBreeds = React.lazy(() => import(\"./DogBreeds\"));\n\nfunction App() {\n  return (\n    <div>\n      <h1>Dog Breeds</h1>\n      <Suspense fallback={<div>Loading Dog Breeds...</div>}>\n        <ListOfBreeds />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n```", "```\n// server.js\nimport express from \"express\";\nimport React from \"react\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport App from \"./App.jsx\";\n\nconst app = express();\n\napp.use(express.static(\"build\"));\n\napp.get(\"/\", async (req, res) => {\n  // Define the starting HTML structure\n  const htmlStart = `\n <!DOCTYPE html>\n <html lang=\"en\">\n <head>\n <meta charset=\"UTF-8\" />\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n <title>React Suspense with renderToPipeableStream</title>\n </head>\n <body>\n <div id=\"root\">\n `;\n\n  // Write the starting HTML to the response\n  res.write(htmlStart);\n\n  // Call renderToPipeableStream with the React App component\n  // and an options object to handle shell readiness\n  const { pipe } = renderToPipeableStream(<App />, {\n    onShellReady: () => {\n      // Pipe the rendered output to the response when the shell is ready\n      pipe(res);\n    },\n  });\n});\n\n// Start the server on port 3000 and log a message to the console\napp.listen(3000, () => {\n  console.log(\"Server is listening on port 3000\");\n});\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>React Suspense with renderToPipeableStream</title>\n  </head>\n  <body>\n    <div id=\"root\">\n      <div>\n        <h1>User Profiles</h1>\n        <!--$?--><template id=\"B:0\"></template>\n        <div>Loading user profiles...</div>\n        <!--/$-->\n      </div>\n      <div hidden id=\"S:0\">\n        <ul>\n          <!--$-->\n          <li>affenpinscher</li>\n          <li>african</li>\n          <li>airedale</li>\n          [...]\n          <!--/$-->\n        </ul>\n      </div>\n      <script>\n        function $RC(a, b) {\n          a = document.getElementById(a);\n          b = document.getElementById(b);\n          b.parentNode.removeChild(b);\n          if (a) {\n            a = a.previousSibling;\n            var f = a.parentNode,\n              c = a.nextSibling,\n              e = 0;\n            do {\n              if (c && 8 === c.nodeType) {\n                var d = c.data;\n                if (\"/$\" === d)\n                  if (0 === e) break;\n                  else e--;\n                else (\"$\" !== d && \"$?\" !== d && \"$!\" !== d) || e++;\n              }\n              d = c.nextSibling;\n              f.removeChild(c);\n              c = d;\n            } while (c);\n            for (; b.firstChild; ) f.insertBefore(b.firstChild, c);\n            a.data = \"$\";\n            a._reactRetry && a._reactRetry();\n          }\n        }\n        $RC(\"B:0\", \"S:0\");\n      </script>\n    </div>\n  </body>\n</html>\n```", "```\nfunction reactComponentCleanup(reactMarkerId, siblingId) {\n  let reactMarker = document.getElementById(reactMarkerId);\n  let sibling = document.getElementById(siblingId);\n  sibling.parentNode.removeChild(sibling);\n\n  if (reactMarker) {\n    reactMarker = reactMarker.previousSibling;\n    let parentNode = reactMarker.parentNode,\n      nextSibling = reactMarker.nextSibling,\n      nestedLevel = 0;\n\n    do {\n      if (nextSibling && 8 === nextSibling.nodeType) {\n        let nodeData = nextSibling.data;\n        if (\"/$\" === nodeData) {\n          if (0 === nestedLevel) {\n            break;\n          } else {\n            nestedLevel--;\n          }\n        } else if (\"$\" !== nodeData && \"$?\" !== nodeData && \"$!\" !== nodeData) {\n          nestedLevel++;\n        }\n      }\n      let nextNode = nextSibling.nextSibling;\n      parentNode.removeChild(nextSibling);\n      nextSibling = nextNode;\n    } while (nextSibling);\n\n    while (sibling.firstChild) {\n      parentNode.insertBefore(sibling.firstChild, nextSibling);\n    }\n\n    reactMarker.data = \"$\";\n    reactMarker._reactRetry && reactMarker._reactRetry();\n  }\n}\n\nreactComponentCleanup(\"B:0\", \"S:0\");\n```", "```\nconst readableStream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"Hello, \");\n    controller.enqueue(\"world!\");\n    controller.close();\n  },\n});\n\nconst reader = readableStream.getReader();\n\nasync function readAllChunks(streamReader) {\n  let result = \"\";\n  while (true) {\n    const { done, value } = await streamReader.read();\n    if (done) {\n      break;\n    }\n    result += value;\n  }\n  return result;\n}\n\nreadAllChunks(reader).then((text) => {\n  console.log(text);\n});\n```", "```\n// server.js\n\n// Import the express module\nconst express = require(\"express\");\n\n// Create a new express application instance\nconst app = express();\n\n// Declare a variable to hold cached user data\n// Initially, it is null as there's no data cached yet\nlet cachedUserData = null;\n\n// Define a route handler for GET requests to \"/user/:userId\"\n// This will respond with user data for the specified user ID\napp.get(\"/user/:userId\", (req, res) => {\n  // Extract the userId from the request parameters\n  const { userId } = req.params;\n\n  // Check if there's cached user data\n  // If so, respond with the cached data\n  if (cachedUserData) {\n    return res.json(cachedUserData);\n  }\n\n  // If not, fetch user data from a database or another source\n  // The fetchUserData function is assumed to be defined elsewhere\n  const userData = fetchUserData(userId);\n\n  // Update the cache with the fetched user data\n  cachedUserData = userData;\n\n  // Respond with the fetched user data\n  res.json(userData);\n});\n\n// Start the server, listening on port 3000\n// Log a message to the console once the server is ready\napp.listen(3000, () => {\n  console.log(\"Server listening on port 3000\");\n});\n```", "```\n// Example of best practices with Remix\n// File: routes/posts/$postId.tsx\n\nimport { useParams } from \"react-router-dom\";\nimport { useLoaderData } from \"@remix-run/react\";\n\n// Best practice: data fetching as early as possible\n// Best practice: colocating data with UI\nexport function loader({ params }) {\n  return fetchPost(params.postId);\n}\n\nfunction Post() {\n  const { postId } = useParams();\n  const post = useLoaderData();\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <div>{post.content}</div>\n    </div>\n  );\n}\n\nexport default Post;\n```"]