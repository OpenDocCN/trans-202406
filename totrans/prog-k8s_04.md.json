["```\napiVersion: cnat.programming-kubernetes.info/v1alpha1\nkind: At\nmetadata:\n  name: example-at\nspec:\n  schedule: \"2019-07-03T02:00:00Z\"\nstatus:\n  phase: \"pending\"\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ats.cnat.programming-kubernetes.info\nspec:\n  group: cnat.programming-kubernetes.info\n  names:\n    kind: At\n    listKind: AtList\n    plural: ats\n    singular: at\n  scope: Namespaced\n  subresources:\n    status: {}\n  version: v1alpha1\n  versions:\n  - name: v1alpha1\n    served: true\n    storage: true\n```", "```\n$ kubectl get ats\nNAME                                         CREATED AT\nats.cnat.programming-kubernetes.info         2019-04-01T14:03:33Z\n```", "```\n$ kubectl get ats -v=7\n... GET https://XXX.eks.amazonaws.com/apis/cnat.programming-kubernetes.info/\n                                      v1alpha1/namespaces/cnat/ats?limit=500\n... Request Headers:\n... Accept: application/json;as=Table;v=v1beta1;g=meta.k8s.io,application/json\n      User-Agent: kubectl/v1.14.0 (darwin/amd64) kubernetes/641856d\n... Response Status: 200 OK in 607 milliseconds\nNAME         AGE\nexample-at   43s\n```", "```\n$ http localhost:8080/apis/\n{\n  \"groups\": [{\n    \"name\": \"at.cnat.programming-kubernetes.info\",\n    \"preferredVersion\": {\n      \"groupVersion\": \"cnat.programming-kubernetes.info/v1\",\n      \"version\": \"v1alpha1â€œ\n    },\n    \"versions\": [{\n      \"groupVersion\": \"cnat.programming-kubernetes.info/v1alpha1\",\n      \"version\": \"v1alpha1\"\n    }]\n  }, ...]\n}\n\n$ http localhost:8080/apis/cnat.programming-kubernetes.info/v1alpha1\n{\n  \"apiVersion\": \"v1\",\n  \"groupVersion\": \"cnat.programming-kubernetes.info/v1alpha1\",\n  \"kind\": \"APIResourceList\",\n  \"resources\": [{\n    \"kind\": \"At\",\n    \"name\": \"ats\",\n    \"namespaced\": true,\n    \"verbs\": [\"create\", \"delete\", \"deletecollection\",\n      \"get\", \"list\", \"patch\", \"update\", \"watch\"\n    ]\n  }, ...]\n}\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: *`name`*\nspec:\n  group: *`group` `name`*\n  version: *`version` `name`*\n  names:\n    kind: *`uppercase` `name`*\n    plural: *`lowercase` `plural` `name`*\n    singular: *`lowercase` `singular` `name`* # defaulted to be lowercase kind\n    shortNames: *`list` `of` `strings` `as` `short` `names`* # optional\n    listKind: *`uppercase` `list` `kind`* # defaulted to be *`kind`*List\n    categories: *`list` `of` `category` `membership` `like` `\"all\"`* # optional\n  validation: # optional\n    openAPIV3Schema: *`OpenAPI` `schema`* # optional\n  subresources: # optional\n    status: {} # to enable the status subresource (optional)\n    scale: # optional\n      specReplicasPath: *`JSON` `path` `for` `the` `replica` `number` `in` `the` `spec` `of` `the`\n                        `custom` `resource`*\n      statusReplicasPath: *`JSON` `path` `for` `the` `replica` `number` `in` `the` `status` `of`\n                          `the` `custom` `resource`*\n      labelSelectorPath: *`JSON` `path` `of` `the` `Scale.Status.Selector` `field` `in` `the`\n                         `scale` `resource`*\n  versions: # defaulted to the Spec.Version field\n  - name: *`version` `name`*\n    served: *`boolean` `whether` `the` `version` `is` `served` `by` `the` `API` `server`* # defaults to false\n    storage: *`boolean` `whether` `this` `version` `is` `the` `version` `used` `to` `store` `object`*\n  - ...\n\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ats.cnat.programming-kubernetes.info\nspec:\n  group: cnat.programming-kubernetes.info\n  names:\n    kind: At\n    listKind: AtList\n    plural: ats\n    singular: at\n  scope: Namespaced\n  subresources:\n    status: {}\n  validation:\n    openAPIV3Schema:\n      type: object\n      properties:\n        apiVersion:\n          type: string\n        kind:\n          type: string\n        metadata:\n          type: object\n        spec:\n          properties:\n            schedule:\n              type: string\n          type: object\n        status:\n          type: object\n  version: v1alpha1\n  versions:\n  - name: v1alpha1\n    served: true\n    storage: true\nstatus:\n    acceptedNames:\n      kind: At\n      listKind: AtList\n      plural: ats\n      singular: at\n    conditions:\n    - lastTransitionTime: \"2019-03-17T09:44:21Z\"\n      message: no conflicts found\n      reason: NoConflicts\n      status: \"True\"\n      type: NamesAccepted\n    - lastTransitionTime: null\n      message: the initial names have been accepted\n      reason: InitialNamesAccepted\n      status: \"True\"\n      type: Established\n    storedVersions:\n    - v1alpha1\n```", "```\ntype: object\nproperties:\n  apiVersion:\n    type: string\n  kind:\n    type: string\n  metadata:\n    type: object\n  spec:\n    type: object\n    properties:\n      schedule:\n        type: string\n        pattern: \"^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])...\"\n      command:\n        type: string\n    required:\n    - schedule\n    - command\n  status:\n    type: object\n    properties:\n      phase:\n        type: string\nrequired:\n- metadata\n- apiVersion\n- kind\n- spec\n```", "```\n$ kubectl api-resources\nNAME                   SHORTNAMES  APIGROUP NAMESPACED  KIND\nbindings                                    true Binding\ncomponentstatuses      cs                   false ComponentStatus\nconfigmaps             cm                   true ConfigMap\nendpoints              ep                   true Endpoints\nevents                 ev                   true Event\nlimitranges            limits               true LimitRange\nnamespaces             ns                   false Namespace\nnodes                  no                   false Node\npersistentvolumeclaims pvc                  true PersistentVolumeClaim\npersistentvolumes      pv                   false PersistentVolume\npods                   po                   true Pod\nstatefulsets           sts         apps     true StatefulSet\n...\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ats.cnat.programming-kubernetes.info\nspec:\n  ...\n  shortNames:\n  - at\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ats.cnat.programming-kubernetes.info\nspec:\n  ...\n  categories:\n  - all\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ats.cnat.programming-kubernetes.info\nspec:\n  additionalPrinterColumns: (optional)\n  - name: *`kubectl` `column` `name`*\n    type: *`OpenAPI` `type` `for` `the` `column`*\n    format: *`OpenAPI` `format` `for` `the` `column`* (optional)\n    description: *`human-readable` `description` `of` `the` `column`* (optional)\n    priority: *`integer,` `always` `zero` `supported` `by` `kubectl`*\n    JSONPath: *`JSON` `path` `inside` `the` `CR` `for` `the` `displayed` `value`*\n\n```", "```\nadditionalPrinterColumns: #(optional)\n- name: schedule\n  type: string\n  JSONPath: .spec.schedule\n- name: command\n  type: string\n  JSONPath: .spec.command\n- name: phase\n  type: string\n  JSONPath: .status.phase\n```", "```\n$ kubectl get ats\nNAME  SCHEDULER             COMMAND             PHASE\nfoo   2019-07-03T02:00:00Z  echo \"hello world\"  Pending\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata: ...\nrules:\n- apiGroups: [\"\"]\n  resources: [\"ats/status\"]\n  verbs: [\"update\", \"patch\"]\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nspec:\n  subresources:\n    status: {}\n  ...\n```", "```\nsubresources:\n  status:\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nspec:\n  ...\n  versions:\n  - name: v1alpha1\n    served: true\n    storage: true\n  - name: v1beta1\n    served: true\n    subresources:\n      status: {}\n```", "```\n$ kubectl scale --replicas=3 *`your-custom-resource`* -v=7\nI0429 21:17:53.138353   66743 round_trippers.go:383] PUT\nhttps://*`host`*/apis/*`group`*/v1/*`your-custom-resource`*/scale\n\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nspec:\n  subresources:\n    scale:\n      specReplicasPath: .spec.replicas\n      statusReplicasPath: .status.replicas\n      labelSelectorPath: .status.labelSelector\n  ...\n```", "```\ntype Scale struct {\n    metav1.TypeMeta `json:\",inline\"`\n    // Standard object metadata; More info: https://git.k8s.io/\n    // community/contributors/devel/api-conventions.md#metadata.\n    // +optional\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    // defines the behavior of the scale. More info: https://git.k8s.io/community/\n    // contributors/devel/api-conventions.md#spec-and-status.\n    // +optional\n    Spec ScaleSpec `json:\"spec,omitempty\"`\n\n    // current status of the scale. More info: https://git.k8s.io/community/\n    // contributors/devel/api-conventions.md#spec-and-status. Read-only.\n    // +optional\n    Status ScaleStatus `json:\"status,omitempty\"`\n}\n\n// ScaleSpec describes the attributes of a scale subresource.\ntype ScaleSpec struct {\n    // desired number of instances for the scaled object.\n    // +optional\n    Replicas int32 `json:\"replicas,omitempty\"`\n}\n\n// ScaleStatus represents the current status of a scale subresource.\ntype ScaleStatus struct {\n    // actual number of observed instances of the scaled object.\n    Replicas int32 `json:\"replicas\"`\n\n    // label query over pods that should match the replicas count. This is the\n    // same as the label selector but in the string format to avoid\n    // introspection by clients. The string will be in the same\n    // format as the query-param syntax. More info about label selectors:\n    // http://kubernetes.io/docs/user-guide/labels#label-selectors.\n    // +optional\n    Selector string `json:\"selector,omitempty\"`\n}\n```", "```\nmetadata:\n  name: *`cr-name`*\n  namespace: *`cr-namespace`*\n  uid: *`cr-uid`*\n  resourceVersion: *`cr-resource-version`*\n  creationTimestamp: *`cr-creation-timestamp`*\nspec:\n  replicas: 3\n  status:\n    replicas: 2\n    selector: \"environment = production\"\n\n```", "```\nschema.GroupVersionResource{\n  Group: \"apps\",\n  Version: \"v1\",\n  Resource: \"deployments\",\n}\n```", "```\nclient, err := NewForConfig(cfg)\n```", "```\nclient.Resource(gvr).\n   Namespace(namespace).Get(\"foo\", metav1.GetOptions{})\n```", "```\nname, found, err := unstructured.NestedString(u.Object, \"metadata\", \"name\")\n```", "```\nfunc NestedFieldCopy(obj map[string]interface{}, fields ...string)\n  (interface{}, bool, error)\nfunc NestedFieldNoCopy(obj map[string]interface{}, fields ...string)\n  (interface{}, bool, error)\n```", "```\nfunc NestedBool(obj map[string]interface{}, fields ...string) (bool, bool, error)\nfunc NestedFloat64(obj map[string]interface{}, fields ...string)\n  (float64, bool, error)\nfunc NestedInt64(obj map[string]interface{}, fields ...string) (int64, bool, error)\nfunc NestedStringSlice(obj map[string]interface{}, fields ...string)\n  ([]string, bool, error)\nfunc NestedSlice(obj map[string]interface{}, fields ...string)\n  ([]interface{}, bool, error)\nfunc NestedStringMap(obj map[string]interface{}, fields ...string)\n  (map[string]string, bool, error)\n```", "```\nfunc SetNestedField(obj, value, path...)\n```", "```\npkg/apis/*group*/*version*\n\n```", "```\ntype TypeMeta struct {\n    // +optional\n    APIVersion string `json:\"apiVersion,omitempty\" yaml:\"apiVersion,omitempty\"`\n    // +optional\n    Kind string `json:\"kind,omitempty\" yaml:\"kind,omitempty\"`\n}\n```", "```\ntype ObjectMeta struct {\n    Name string `json:\"name,omitempty\"`\n    Namespace string `json:\"namespace,omitempty\"`\n    UID types.UID `json:\"uid,omitempty\"`\n    ResourceVersion string `json:\"resourceVersion,omitempty\"`\n    CreationTimestamp Time `json:\"creationTimestamp,omitempty\"`\n    DeletionTimestamp *Time `json:\"deletionTimestamp,omitempty\"`\n    Labels map[string]string `json:\"labels,omitempty\"`\n    Annotations map[string]string `json:\"annotations,omitempty\"`\n    ...\n}\n```", "```\ntype Deployment struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    Spec DeploymentSpec `json:\"spec,omitempty\"`\n    Status DeploymentStatus `json:\"status,omitempty\"`\n}\n```", "```\n// Package v1alpha1 contains the cnat v1alpha1 API group\n//\n// +k8s:deepcopy-gen=package\n// +groupName=cnat.programming-kubernetes.info\npackage v1alpha1\n```", "```\npackage *`version`*\n\nimport (\n    metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n    \"k8s.io/apimachinery/pkg/runtime\"\n    \"k8s.io/apimachinery/pkg/runtime/schema\"\n\n    group \"*`repo`*/pkg/apis/*`group`*\"\n)\n\n// SchemeGroupVersion is group version used to register these objects var SchemeGroupVersion = schema.GroupVersion{\n    Group: group.GroupName,\n    Version: \"*`version`*\",\n}\n\n// Kind takes an unqualified kind and returns back a Group qualified GroupKind func Kind(kind string) schema.GroupKind {\n    return SchemeGroupVersion.WithKind(kind).GroupKind()\n}\n\n// Resource takes an unqualified resource and returns a Group // qualified GroupResource func Resource(resource string) schema.GroupResource {\n    return SchemeGroupVersion.WithResource(resource).GroupResource()\n}\n\nvar (\n    SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)\n    AddToScheme   = SchemeBuilder.AddToScheme\n)\n\n// Adds the list of known types to Scheme. func addKnownTypes(scheme *runtime.Scheme) error {\n    scheme.AddKnownTypes(SchemeGroupVersion,\n        &SomeKind{},\n        &SomeKindList{},\n    )\n    metav1.AddToGroupVersion(scheme, SchemeGroupVersion)\n    return nil\n}\n\n```", "```\n// Code generated by client-gen. DO NOT EDIT.\n\npackage versioned\n\nimport (\n    discovery \"k8s.io/client-go/discovery\"\n    rest \"k8s.io/client-go/rest\"\n    flowcontrol \"k8s.io/client-go/util/flowcontrol\"\n\n    cnatv1alpha1 \".../cnat/cnat-client-go/pkg/generated/clientset/versioned/\n)\n\ntype Interface interface {\n    Discovery() discovery.DiscoveryInterface\n    CnatV1alpha1() cnatv1alpha1.CnatV1alpha1Interface\n}\n\n// Clientset contains the clients for groups. Each group has exactly one\n// version included in a Clientset.\ntype Clientset struct {\n    *discovery.DiscoveryClient\n    cnatV1alpha1 *cnatv1alpha1.CnatV1alpha1Client\n}\n\n// CnatV1alpha1 retrieves the CnatV1alpha1Client\nfunc (c *Clientset) CnatV1alpha1() cnatv1alpha1.CnatV1alpha1Interface {\n    return c.cnatV1alpha1\n}\n\n// Discovery retrieves the DiscoveryClient\nfunc (c *Clientset) Discovery() discovery.DiscoveryInterface {\n   ...\n}\n\n// NewForConfig creates a new Clientset for the given config.\nfunc NewForConfig(c *rest.Config) (*Clientset, error) {\n    ...\n}\n```", "```\ntype CnatV1alpha1Interface interface {\n    RESTClient() rest.Interface\n    AtsGetter\n}\n\n// AtsGetter has a method to return a AtInterface.\n// A group's client should implement this interface.\ntype AtsGetter interface {\n    Ats(namespace string) AtInterface\n}\n\n// AtInterface has methods to work with At resources.\ntype AtInterface interface {\n    Create(*v1alpha1.At) (*v1alpha1.At, error)\n    Update(*v1alpha1.At) (*v1alpha1.At, error)\n    UpdateStatus(*v1alpha1.At) (*v1alpha1.At, error)\n    Delete(name string, options *v1.DeleteOptions) error\n    DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error\n    Get(name string, options v1.GetOptions) (*v1alpha1.At, error)\n    List(opts v1.ListOptions) (*v1alpha1.AtList, error)\n    Watch(opts v1.ListOptions) (watch.Interface, error)\n    Patch(name string, pt types.PatchType, data []byte, subresources ...string)\n        (result *v1alpha1.At, err error)\n    AtExpansion\n}\n```", "```\nimport (\n    metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n    \"k8s.io/client-go/tools/clientcmd\"\n\n    client \"github.com/.../cnat/cnat-client-go/pkg/generated/clientset/versioned\"\n)\n\nkubeconfig = flag.String(\"kubeconfig\", \"~/.kube/config\", \"kubeconfig file\")\nflag.Parse()\nconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\nclientset, err := client.NewForConfig(config)\n\nats := clientset.CnatV1alpha1Interface().Ats(\"default\")\nbook, err := ats.Get(\"kubernetes-programming\", metav1.GetOptions{})\n```", "```\nimport (\n    \"flag\"\n\n    corev1 \"k8s.io/api/core/v1\"\n    metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n    \"k8s.io/client-go/kubernetes/scheme\"\n    \"k8s.io/client-go/tools/clientcmd\"\n\n    runtimeclient \"sigs.k8s.io/controller-runtime/pkg/client\"\n)\n\nkubeconfig = flag.String(\"kubeconfig\", \"~/.kube/config\", \"kubeconfig file path\")\nflag.Parse()\nconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\ncl, _ := runtimeclient.New(config, client.Options{\n    Scheme: scheme.Scheme,\n})\npodList := &corev1.PodList{}\nerr := cl.List(context.TODO(), client.InNamespace(\"default\"), podList)\n```", "```\nimport (\n    \"flag\"\n\n    corev1 \"k8s.io/api/core/v1\"\n    metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n    \"k8s.io/client-go/kubernetes/scheme\"\n    \"k8s.io/client-go/tools/clientcmd\"\n\n    runtimeclient \"sigs.k8s.io/controller-runtime/pkg/client\"\n    cnatv1alpha1 \"github.com/.../cnat/cnat-kubebuilder/pkg/apis/cnat/v1alpha1\"\n)\n\nkubeconfig = flag.String(\"kubeconfig\", \"~/.kube/config\", \"kubeconfig file\")\nflag.Parse()\nconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\ncrScheme := runtime.NewScheme()\ncnatv1alpha1.AddToScheme(crScheme)\n\ncl, _ := runtimeclient.New(config, client.Options{\n    Scheme: crScheme,\n})\nlist := &cnatv1alpha1.AtList{}\nerr := cl.List(context.TODO(), client.InNamespace(\"default\"), list)\n```"]