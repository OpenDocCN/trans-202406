["```\nfunction add(num1, num2) {\n  return num1 + num2;\n}\n```", "```\nasync function addToNumberOfTheDay(num) {\n  const todaysNumber = await fetch(\"https://number-api.com/today\")\n    .then((r) => r.json())\n    .then((data) => data.number);\n  return num + todaysNumber;\n}\n```", "```\nlet result = null;\nconst doHardThing = () => {\n  if (result) return result;\n\n  // ...do hard stuff\n\n  result = hardStuff;\n  return hardStuff;\n};\n```", "```\nfunction TodoList({ todos }) {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ul>\n  );\n}\n```", "```\nfunction App() {\n  const todos = Array.from({ length: 1000000 });\n  const [name, setName] = useState(\"\");\n\n  return (\n    <div>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <TodoList todos={todos} />\n    </div>\n  );\n}\n```", "```\nconst MemoizedTodoList = React.memo(function TodoList({ todos }) {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ul>\n  );\n});\n```", "```\nfunction Dashboard({ data }) {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <UserStats user={data.user} />\n      <RecentActivity activity={data.activity} />\n      <ImportantMessages messages={data.messages} />\n    </div>\n  );\n}\n```", "```\nconst MemoizedUserStats = React.memo(function UserStats({ user }) {\n  // ...\n});\n\nconst MemoizedRecentActivity = React.memo(function RecentActivity({\n  activity,\n}) {\n  // ...\n});\n\nconst MemoizedImportantMessages = React.memo(function ImportantMessages({\n  messages,\n}) {\n  // ...\n});\n\nfunction Dashboard({ data }) {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <MemoizedUserStats user={data.user} />\n      <MemoizedRecentActivity activity={data.activity} />\n      <MemoizedImportantMessages messages={data.messages} />\n    </div>\n  );\n}\n```", "```\n// Scalar types\n\"a\" === \"a\"; // string; true\n3 === 3; // number; true\n\n// Non-scalar types\n[1, 2, 3] === [1, 2, 3]; // array; false\n{ foo: \"bar\"} === { foo: \"bar\" } // object; false\n```", "```\nconst List = React.memo(function List({ items }) {\n  return (\n    <ul>\n      {items.map((item) => (\n        <li key={item}>{item}</li>\n      ))}\n    </ul>\n  );\n});\n```", "```\nfunction ParentComponent({ allFruits }) {\n  const [count, setCount] = React.useState(0);\n  const favoriteFruits = allFruits.filter((fruit) => fruit.isFavorite);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <List items={favoriteFruits} />\n    </div>\n  );\n}\n```", "```\nfunction ParentComponent({ allFruits }) {\n  const [count, setCount] = React.useState(0);\n  const favoriteFruits = React.useMemo(\n    () => allFruits.filter((fruit) => fruit.isFavorite),\n    []\n  );\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <List items={favoriteFruits} />\n    </div>\n  );\n}\n```", "```\n<MemoizedAvatar\n  name=\"Tejas\"\n  url=\"https://github.com/tejasq.png\"\n  onChange={() => save()}\n/>\n```", "```\n\"Tejas\" === \"Tejas\"; // <- `name` prop; true\n\"https://github.com/tejasq.png\" === \"https://github.com/tejasq.png\";\n\n(() => save()) === (() => save()); // <- `onChange` prop; false\n```", "```\nconst Parent = ({ currentUser }) => {\n  const onAvatarChange = useCallback(\n    (newAvatarUrl) => {\n      updateUserModel({ avatarUrl: newAvatarUrl, id: currentUser.id });\n    },\n    [currentUser]\n  );\n\n  return (\n    <MemoizedAvatar\n      name=\"Tejas\"\n      url=\"https://github.com/tejasq.png\"\n      onChange={onAvatarChange}\n    />\n  );\n};\n```", "```\nfunction memo(type, compare) {\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type,\n    compare: compare === undefined ? null : compare,\n  };\n}\n```", "```\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          \"prop\",\n          getComponentNameFromType(type)\n        );\n      }\n      if (Component.defaultProps !== undefined) {\n        const componentName = getComponentNameFromType(type) || \"Unknown\";\n        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n          console.error(\n            \"%s: Support for defaultProps will be removed from components \" +\n              \"in a future release. Use JavaScript default parameters instead.\",\n            componentName\n          );\n          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n        }\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      null,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        \"prop\",\n        getComponentNameFromType(type)\n      );\n    }\n  }\n  // This is always exactly one child\n  const currentChild = ((current.child: any): Fiber);\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n```", "```\nconst People = ({ unsortedPeople }) => {\n  const [name, setName] = useState(\"\");\n  const sortedPeople = unsortedPeople.sort((a, b) => b.age - a.age);\n\n  // ... rest of the component\n};\n```", "```\nconst People = ({ unsortedPeople }) => {\n  const [name, setName] = useState(\"\");\n  const sortedPeople = useMemo(\n    // Spreading so we don't mutate the original array\n    () => [...unsortedPeople].sort((a, b) => b.age - a.age),\n    [unsortedPeople]\n  );\n\n  return (\n    <div>\n      <div>\n        Enter your name:{\" \"}\n        <input\n          type=\"text\"\n          placeholder=\"Obinna Ekwuno\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n      <h1>Hi, {name}! Here's a list of people sorted by age!</h1>\n      <ul>\n        {sortedPeople.map((p) => (\n          <li key={p.id}>\n            {p.name}, age {p.age}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n```", "```\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n  const doubledCount = useMemo(() => count * 2, [count]);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Doubled count: {doubledCount}</p>\n      <button onClick={() => setCount((oldCount) => oldCount + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n};\n```", "```\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Doubled count: {count * 2}</p>\n      <button onClick={() => setCount((oldCount) => oldCount + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n};\n```", "```\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n  const doubledCount = useMemo(() => count * 2, [count]);\n  const increment = useCallback(\n    () => setCount((oldCount) => oldCount + 1),\n    [setCount]\n  );\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Doubled count: {doubledCount}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n};\n```", "```\nimport React, { useState, useCallback } from \"react\";\n\nconst ExpensiveComponent = React.memo(({ onButtonClick }) => {\n  // This component is expensive to render and we want\n  // to avoid unnecessary renders\n  // We're just simulating something expensive here\n  const now = performance.now();\n  while (performance.now() - now < 1000) {\n    // Artificial delay -- block for 1000ms\n  }\n\n  return <button onClick={onButtonClick}>Click Me</button>;\n});\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n  const [otherState, setOtherState] = useState(0);\n\n  // This callback is memoized and will only change if count changes\n  const incrementCount = useCallback(() => {\n    setCount((prevCount) => prevCount + 1);\n  }, []); // Dependency array\n\n  // This state update will cause MyComponent to rerender\n  const doSomethingElse = () => {\n    setOtherState((s) => s + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <ExpensiveComponent onButtonClick={incrementCount} />\n      <button onClick={doSomethingElse}>Do Something Else</button>\n    </div>\n  );\n};\n```", "```\nconst MyComponent = () => {\n  const dateOfBirth = \"1993-02-19\";\n  const isAdult =\n    new Date().getFullYear() - new Date(dateOfBirth).getFullYear() >= 18;\n\n  if (isAdult) {\n    return <h1>You are an adult!</h1>;\n  } else {\n    return <h1>You are a minor!</h1>;\n  }\n};\n```", "```\nconst MyComponent = () => {\n  const [birthYear, setBirthYear] = useState(1993);\n  const isAdult = new Date().getFullYear() - birthYear >= 18;\n\n  return (\n    <div>\n      <label>\n        Birth year:\n        <input\n          type=\"number\"\n          value={birthYear}\n          onChange={(e) => setBirthYear(e.target.value)}\n        />\n      </label>\n      {isAdult ? <h1>You are an adult!</h1> : <h1>You are a minor!</h1>}\n    </div>\n  );\n};\n```", "```\nconst MyComponent = () => {\n  const [birthYear, setBirthYear] = useState(1993);\n  const today = useMemo(() => new Date(), []);\n  const isAdult = today.getFullYear() - birthYear >= 18;\n\n  return (\n    <div>\n      <label>\n        Birth year:\n        <input\n          type=\"number\"\n          value={birthYear}\n          onChange={(e) => setBirthYear(e.target.value)}\n        />\n      </label>\n      {isAdult ? <h1>You are an adult!</h1> : <h1>You are a minor!</h1>}\n    </div>\n  );\n};\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Website</title>\n    <script src=\"https://example.com/large.js\"></script>\n  </head>\n  <body>\n    <!-- Page content goes here -->\n  </body>\n</html>\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Website</title>\n    <script async src=\"https://example.com/large.js\"></script>\n  </head>\n  <body>\n    <!-- Page content goes here -->\n  </body>\n</html>\n```", "```\nimport(\"./large.js\").then((module) => {\n  // Use module here\n});\n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Website</title>\n  </head>\n  <body>\n    <!-- Page content goes here -->\n    <button id=\"load-more\">Load more content</button>\n    <script>\n      document.getElementById(\"load-more\").addEventListener(\"click\", () => {\n        import(\"./non-critical.js\").then((module) => {\n          // Use module here\n        });\n      });\n    </script>\n  </body>\n</html>\n```", "```\nimport Sidebar from \"./Sidebar\"; // 22MB to import\n\nconst MyComponent = ({ initialSidebarState }) => {\n  const [showSidebar, setShowSidebar] = useState(initialSidebarState);\n\n  return (\n    <div>\n      <button onClick={() => setShowSidebar(!showSidebar)}>\n        Toggle sidebar\n      </button>\n      {showSidebar && <Sidebar />}\n    </div>\n  );\n};\n```", "```\nimport { lazy, Suspense } from \"react\";\nimport FakeSidebarShell from \"./FakeSidebarShell\"; // 1kB to import\n\nconst Sidebar = lazy(() => import(\"./Sidebar\"));\n\nconst MyComponent = ({ initialSidebarState }) => {\n  const [showSidebar, setShowSidebar] = useState(initialSidebarState);\n\n  return (\n    <div>\n      <button onClick={() => setShowSidebar(!showSidebar)}>\n        Toggle sidebar\n      </button>\n      <Suspense fallback={<FakeSidebarShell />}>\n        {showSidebar && <Sidebar />}\n      </Suspense>\n    </div>\n  );\n};\n```", "```\nimport { lazy, Suspense } from \"react\";\n\nconst Sidebar = lazy(() => import(\"./Sidebar\"));\n\nconst MyComponent = () => {\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <div>\n        <button onClick={() => setShowSidebar(!showSidebar)}>\n          Toggle sidebar\n        </button>\n        {showSidebar && <Sidebar />}\n        <main>\n          <p>Hello hello welcome, this is the app's main area</p>\n        </main>\n      </div>\n    </Suspense>\n  );\n};\n```", "```\nimport { lazy, Suspense } from \"react\";\n\nconst Sidebar = lazy(() => import(\"./Sidebar\"));\n\nconst MyComponent = () => {\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setShowSidebar(!showSidebar)}>\n        Toggle sidebar\n      </button>\n      <Suspense fallback={<p>Loading...</p>}>\n        {showSidebar && <Sidebar />}\n      </Suspense>\n      <main>\n        <p>Hello hello welcome, this is the app's main area</p>\n      </main>\n    </div>\n  );\n};\n```", "```\nimport { useState } from \"react\";\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n};\n```", "```\nimport { useState } from \"react\";\n\nconst MyComponent = () => {\n  const [state, setState] = useState({\n    count: 0,\n    name: \"Tejumma\",\n    age: 30,\n  });\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <p>Name: {state.name}</p>\n      <p>Age: {state.age}</p>\n      <button onClick={() => setState({ ...state, count: state.count + 1 })}>\n        Increment\n      </button>\n    </div>\n  );\n};\n```", "```\nimport { useReducer } from \"react\";\n\nfunction useState(initialState) {\n  const [state, dispatch] = useReducer(\n    (state, newValue) => newValue,\n    initialState\n  );\n  return [state, dispatch];\n}\n```", "```\nimport { useReducer } from \"react\";\n\nconst initialState = {\n  count: 0,\n  name: \"Tejumma\",\n  age: 30,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return { ...state, count: state.count + 1 };\n    default:\n      return state;\n  }\n};\n\nconst MyComponent = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <p>Name: {state.name}</p>\n      <p>Age: {state.age}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>Increment</button>\n    </div>\n  );\n};\n```", "```\n    describe(\"reducer\", () => {\n      test(\"should increment count when given an increment action\", () => {\n        const initialState = {\n          count: 0,\n          name: \"Tejumma\",\n          age: 30,\n        };\n        const action = { type: \"increment\" };\n        const expectedState = {\n          count: 1,\n          name: \"Tejumma\",\n          age: 30,\n        };\n        const actualState = reducer(initialState, action);\n        expect(actualState).toEqual(expectedState);\n      });\n\n      test(\"should return the same object when given an unknown action\",\n        () => {\n        const initialState = {\n          count: 0,\n          name: \"Tejumma\",\n          age: 30,\n        };\n        const action = { type: \"unknown\" };\n        const expectedState = initialState;\n        const actualState = reducer(initialState, action);\n        expect(actualState).toBe(expectedState);\n      });\n    });\n    ```", "```\nimport { useImmerReducer } from \"use-immer\";\n\nconst initialState = {\n  user: {\n    name: \"John Doe\",\n    age: 28,\n    address: {\n      city: \"New York\",\n      country: \"USA\",\n    },\n  },\n};\n\nconst reducer = (draft, action) => {\n  switch (action.type) {\n    case \"updateName\":\n      draft.user.name = action.payload;\n      break;\n    case \"updateCity\":\n      draft.user.address.city = action.payload;\n      break;\n    // other cases...\n    default:\n      break;\n  }\n};\n\nconst MyComponent = () => {\n  const [state, dispatch] = useImmerReducer(reducer, initialState);\n\n  // ...\n};\n```", "```\nimport produce from \"immer\";\nimport { useState } from \"react\";\n\nconst MyComponent = () => {\n  const [state, setState] = useState(initialState);\n\n  const updateName = (newName) => {\n    setState(\n      produce((draft) => {\n        draft.user.name = newName;\n      })\n    );\n  };\n\n  // ...\n};\n```", "```\nconst PresentationalCounter = (props) => {\n  return (\n    <section>\n      <button onClick={props.increment}>+</button>\n      <button onClick={props.decrement}>-</button>\n      <button onClick={props.reset}>Reset</button>\n      <h1>Current Count: {props.count}</h1>\n    </section>\n  );\n};\n\nconst ContainerCounter = () => {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(0);\n\n  return (\n    <PresentationalCounter\n      count={count}\n      increment={increment}\n      decrement={decrement}\n      reset={reset}\n    />\n  );\n};\n```", "```\nconst App = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://mytodolist.com/items\")\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  return <BasicTodoList data={data} />;\n};\n```", "```\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://mytodolist.com/items\")\n      .then((res) => res.json())\n      .then((data) => {\n        setIsLoading(false);\n        setData(data);\n      })\n      .catch(setError);\n  }, []);\n\n  return isLoading ? (\n    \"Loading...\"\n  ) : error ? (\n    error.message\n  ) : (\n    <BasicTodoList data={data} />\n  );\n};\n```", "```\nconst TodoList = withAsync(BasicTodoList);\n```", "```\nconst withAsync = (Component) => (props) => {\n  if (props.loading) {\n    return \"Loading...\";\n  }\n\n  if (props.error) {\n    return error.message;\n  }\n\n  return (\n    <Component\n      // Pass through whatever other props we give `Component`.\n      {...props}\n    />\n  );\n};\n```", "```\nconst TodoList = withAsync(BasicTodoList);\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://mytodolist.com/items\")\n      .then((res) => res.json())\n      .then((data) => {\n        setIsLoading(false);\n        setData(data);\n      })\n      .catch(setError);\n  }, []);\n\n  return <TodoList loading={isLoading} error={error} data={data} />;\n};\n```", "```\nconst Post = withAsync(BasicPost);\nconst Comments = withAsync(BasicComments);\n\nconst Blog = ({ req }) => {\n  const { loading: isPostLoading, error: postLoadError } = usePost(\n    req.query.postId\n  );\n  const { loading: areCommentsLoading, error: commentLoadError } = useComments({\n    postId: req.query.postId,\n  });\n\n  return (\n    <>\n      <Post\n        id={req.query.postId}\n        loading={isPostLoading}\n        error={postLoadError}\n      />\n      <Comments\n        postId={req.query.postId}\n        loading={areCommentsLoading}\n        error={commentLoadError}\n      />\n    </>\n  );\n};\n\nexport default Blog;\n```", "```\n// withLogging.js\nconst withLogging = (WrappedComponent) => {\n  return (props) => {\n    console.log(\"Rendered with props:\", props);\n    return <WrappedComponent {...props} />;\n  };\n};\n\n// withUser.js\nconst withUser = (WrappedComponent) => {\n  const user = { name: \"John Doe\" }; // Assume this comes from some data source\n  return (props) => <WrappedComponent {...props} user={user} />;\n};\n```", "```\nconst EnhancedComponent = withLogging(withUser(MyComponent));\n```", "```\nconst EnhancedComponent = withErrorHandler(\n  withLoadingSpinner(\n    withAuthentication(\n      withAuthorization(\n        withPagination(\n          withDataFetching(\n            withLogging(withUser(withTheme(withIntl(withRouting(MyComponent)))))\n          )\n        )\n      )\n    )\n  )\n);\n```", "```\n// compose.js\nconst compose =\n  (...hocs) =>\n  (WrappedComponent) =>\n    hocs.reduceRight((acc, hoc) => hoc(acc), WrappedComponent);\n\n// Usage:\nconst EnhancedComponent = compose(withLogging, withUser)(MyComponent);\n```", "```\nconst EnhancedComponent = compose(\n  withErrorHandler,\n  withLoadingSpinner,\n  withAuthentication,\n  withAuthorization,\n  withPagination,\n  withDataFetching,\n  withLogging,\n  withUser,\n  withTheme,\n  withIntl,\n  withRouting\n)(MyComponent);\n```", "```\nconst FancyInput = React.forwardRef((props, ref) => (\n  <input type=\"text\" ref={ref} {...props} />\n));\n\nconst App = () => {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  return (\n    <div>\n      <FancyInput ref={inputRef} />\n    </div>\n  );\n};\n```", "```\n<WindowSize\n  render={({ width, height }) => (\n    <div>\n      Your window is {width}x{height}px\n    </div>\n  )}\n/>\n```", "```\nconst WindowSize = (props) => {\n  const [size, setSize] = useState({ width: -1, height: -1 });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize({ width: window.innerWidth, height: window.innerHeight });\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return props.render(size);\n};\n```", "```\n<WindowSize>\n  {({ width, height }) => (\n    <div>\n      Your window is {width}x{height}px\n    </div>\n  )}\n</WindowSize>\n```", "```\nfunction Form() {\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  function handleChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  return <input type=\"text\" value={inputValue} onChange={handleChange} />;\n}\n```", "```\nfunction Toggle({ on, onToggle }) {\n  const [isOn, setIsOn] = React.useState(false);\n\n  const handleToggle = () => {\n    const nextState = on === undefined ? !isOn : on;\n    if (on === undefined) {\n      setIsOn(nextState);\n    }\n    if (onToggle) {\n      onToggle(nextState);\n    }\n  };\n\n  return (\n    <button onClick={handleToggle}>\n      {on !== undefined ? on : isOn ? \"On\" : \"Off\"}\n    </button>\n  );\n}\n```", "```\nexport const droppableProps = {\n  onDragOver: (event) => {\n    event.preventDefault();\n  },\n  onDrop: (event) => {},\n};\n\nexport const draggableProps = {\n  onDragStart: (event) => {},\n  onDragEnd: (event) => {},\n};\n```", "```\n<Dropzone {...droppableProps} />\n```", "```\n<Dropzone\n  {...droppableProps}\n  onDragOver={() => {\n    alert(\"Dragged!\");\n  }}\n/>\n```", "```\nexport const getDroppableProps = () => {\n  return {\n    onDragOver: (event) => {\n      event.preventDefault();\n    },\n    onDrop: (event) => {},\n  };\n};\n```", "```\nconst compose =\n  (...functions) =>\n  (...args) =>\n    functions.forEach((fn) => fn?.(...args));\n\nexport const getDroppableProps = ({\n  onDragOver: replacementOnDragOver,\n  ...replacementProps\n}) => {\n  const defaultOnDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  return {\n    onDragOver: compose(replacementOnDragOver, defaultOnDragOver),\n    onDrop: (event) => {},\n    ...replacementProps,\n  };\n};\n```", "```\n<Dropzone\n  {...getDroppableProps({\n    onDragOver: () => {\n      alert(\"Dragged!\");\n    },\n  })}\n/>\n```", "```\n<Accordion\n  items={[\n    { label: \"One\", content: \"lorem ipsum for more, see https://one.com\" },\n    { label: \"Two\", content: \"lorem ipsum for more, see https://two.com\" },\n    { label: \"Three\", content: \"lorem ipsum for more, see https://three.com\" },\n  ]}\n/>\n```", "```\nexport const Accordion = ({ items }) => {\n  const [activeItemIndex, setActiveItemIndex] = useState(0);\n\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li onClick={() => setActiveItemIndex(index)} key={item.id}>\n          <strong>{item.label}</strong>\n          {index === activeItemIndex && i.content}\n        </li>\n      ))}\n    </ul>\n  );\n};\n```", "```\n<Accordion\n  items={[\n    { label: \"One\", content: \"lorem ipsum for more, see https://one.com\" },\n    { label: \"Two\", content: \"lorem ipsum for more, see https://two.com\" },\n    { label: \"---\" },\n    { label: \"Three\", content: \"lorem ipsum for more, see https://three.com\" },\n  ]}\n/>\n```", "```\nexport const Accordion = ({ items }) => {\n  const [activeItemIndex, setActiveItemIndex] = useState(0);\n\n  return (\n    <ul>\n      {items.map((item, index) =>\n        item === \"---\" ? (\n          <hr />\n        ) : (\n          <li onClick={() => setActiveItemIndex(index)} key={item.id}>\n            <strong>{item.label}</strong>\n            {index === activeItemIndex && i.content}\n          </li>\n        )\n      )}\n    </ul>\n  );\n};\n```", "```\n<Accordion>\n  <AccordionItem item={{ label: \"One\" }} />\n  <AccordionItem item={{ label: \"Two\" }} />\n  <AccordionItem item={{ label: \"Three\" }} />\n</Accordion>\n```", "```\nconst AccordionContext = createContext({\n  activeItemIndex: 0,\n  setActiveItemIndex: () => 0,\n});\n```", "```\nexport const Accordion = ({ items }) => {\n  const [activeItemIndex, setActiveItemIndex] = useState(0);\n\n  return (\n    <AccordionContext.Provider value={{ activeItemIndex, setActiveItemIndex }}>\n      <ul>{children}</ul>\n    </AccordionContext.Provider>\n  );\n};\n```", "```\nexport const AccordionItem = ({ item, index }) => {\n  // Note we're using the context here, not state!\n  const { activeItemIndex, setActiveItemIndex } = useContext(AccordionContext);\n\n  return (\n    <li onClick={() => setActiveItemIndex(index)} key={item.id}>\n      <strong>{item.label}</strong>\n      {index === activeItemIndex && i.content}\n    </li>\n  );\n};\n```", "```\n<Accordion\n  items={[\n    { label: \"One\", content: \"lorem ipsum for more, see https://one.com\" },\n    { label: \"Two\", content: \"lorem ipsum for more, see https://two.com\" },\n    { label: \"Three\", content: \"lorem ipsum for more, see https://three.com\" },\n  ]}\n/>\n```", "```\n<Accordion>\n  {items.map((item, index) => (\n    <AccordionItem key={item.id} item={item} index={index} />\n  ))}\n</Accordion>\n```", "```\n<Accordion>\n  <AccordionItem key={items[0].id} item={items[0]} index={0} />\n  <AccordionItem key={items[1].id} item={items[1]} index={1} />\n  <hr />\n  <AccordionItem key={items[2].id} item={items[2]} index={2} />\n</Accordion>\n```", "```\n<Accordion>\n  {items.slice(0, 2).map((item, index) => (\n    <AccordionItem key={item.id} item={item} index={index} />\n  ))}\n  <hr />\n  {items.slice(2).map((item, index) => (\n    <AccordionItem key={item.id} item={item} index={index} />\n  ))}\n</Accordion>\n```", "```\nimport React, { useReducer } from \"react\";\n\nfunction toggleReducer(state, action) {\n  switch (action.type) {\n    case \"TOGGLE\":\n      return { on: !state.on };\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nfunction Toggle() {\n  const [state, dispatch] = useReducer(toggleReducer, { on: false });\n\n  return (\n    <button onClick={() => dispatch({ type: \"TOGGLE\" })}>\n      {state.on ? \"On\" : \"Off\"}\n    </button>\n  );\n}\n```", "```\nfunction Toggle({ stateReducer }) {\n  const [state, dispatch] = useReducer(\n    (state, action) => {\n      const nextState = toggleReducer(state, action);\n      return stateReducer(state, { ...action, changes: nextState });\n    },\n    { on: false }\n  );\n\n  return (\n    <button onClick={() => internalDispatch({ type: \"TOGGLE\" })}>\n      {state.on ? \"On\" : \"Off\"}\n    </button>\n  );\n}\n\nToggle.defaultProps = {\n  stateReducer: (state, action) => state, // Default reducer does nothing special\n};\n```", "```\nfunction App() {\n  const customReducer = (state, action) => {\n    // Custom logic: prevent toggle off on Wednesdays\n    if (new Date().getDay() === 3 && !changes.on) {\n      return state;\n    }\n    return action.changes;\n  };\n\n  return <Toggle stateReducer={customReducer} />;\n}\n```"]