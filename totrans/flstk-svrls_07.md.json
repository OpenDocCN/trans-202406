["```\n~ npx create-react-app ecommerceapp\n\n~ cd ecommerceapp\n\n~ npm install aws-amplify @aws-amplify/ui-react react-router-dom antd\n```", "```\n~ amplify init\n\n# Follow the steps to give the project a name, environment name, and\n  set the default text editor.\n# Accept defaults for everything else and choose your AWS Profile.\n```", "```\n~ amplify add auth\n\n? Do you want to use the default authentication and security configuration?\n  Default configuration\n? How do you want users to be able to sign in? Username\n? Do you want to configure advanced settings? Yes\n? What attributes are required for signing up? Email\n? Do you want to enable any of the following capabilities? Add User to Group\n? Enter the name of the group to which users will be added. Admin\n? Do you want to edit your add-to-group function now? Y\n```", "```\n// amplify/backend/function/<function_name>/src/add-to-group.js\nconst aws = require('aws-sdk');\n\nexports.handler = async (event, context, callback) => {\n  const cognitoProvider = new\n  aws.CognitoIdentityServiceProvider({\n    apiVersion: '2016-04-18'\n  });\n\n  let isAdmin = false\n  // Update this array to include any admin emails you would like to enable\n  const adminEmails = ['dabit3@gmail.com']\n\n  // If the user is one of the admins, set the isAdmin variable to true\n  if (adminEmails.indexOf(event.request.userAttributes.email) !== -1) {\n    isAdmin = true\n  }\n\n  if (isAdmin) {\n    const groupParams = {\n      UserPoolId: event.userPoolId,\n      GroupName: 'Admin'\n    }\n    const userParams = {\n      UserPoolId: event.userPoolId,\n      Username: event.userName,\n      GroupName: 'Admin'\n    }\n\n    // First check to see if the group exists, and if not create the group\n    try {\n      await cognitoProvider.getGroup(groupParams).promise();\n    } catch (e) {\n      await cognitoProvider.createGroup(groupParams).promise();\n    }\n    // The user is an administrator, place them in the Admin group\n    try {\n      await cognitoProvider.adminAddUserToGroup(userParams).promise();\n      callback(null, event);\n    } catch (e) { callback(e); }\n  } else {\n    // If the user is in neither group, proceed with no action\n    callback(null, event)\n  }\n}\n```", "```\n~ amplify add storage\n\n? Please select from one of the below mentioned services: NoSQL Database\n? Please provide a friendly name for your resource that will be used to label\n  this category in the project: producttable\n? Please provide table name: producttable\n? What would you like to name this column: id\n? Please choose the data type: string\n? Would you like to add another column? N\n? Please choose partition key for the table: id\n? Do you want to add a sort key to your table? N\n? Do you want to add global secondary indexes to your table? N\n? Do you want to add a Lambda Trigger for your Table? N\n```", "```\n~ amplify add api\n\n? Please select from one of the below mentioned services: REST\n? Provide a friendly name for your resource to be used as a label for this\n  category in the project: ecommerceapi\n? Provide a path: /products\n? Choose a Lambda source: Create a new Lambda function\n? Provide a friendly name for your resource to be used as a label for this\n  category in the project: ecommercefunction\n? Provide the AWS Lambda function name: ecommercefunction\n? Choose the function runtime that you want to use: NodeJS\n? Choose the function template that you want to use: Serverless express\n  function (Integration with Amazon API Gateway)\n? Do you want to access other resources created in this project from your\n  Lambda function? Y\n? Select the category: storage, auth\n? Select the operations you want to permit for <app_name>: create, read, update,\n  delete\n? Select the operations you want to permit for producttable: create, read,\n  update, delete\n? Do you want to invoke this function on a recurring schedule? N\n? Do you want to configure Lambda layers for this function? N\n? Do you want to edit the local Lambda function now? N\n? Restrict API access: Y\n? Who should have access? Authenticated and Guest users\n? What kind of access do you want for Authenticated users? create, read,\n  update, delete\n? What kind of access do you want for Guest users? read\n? Do you want to add another path? N\n```", "```\n/* amplify/backend/function/ecommercefunction/src/app.js */\n\n/* Below the last existing `require` import, add the following\n   imports variables */\nconst AWS = require('aws-sdk')\nconst { v4: uuid } = require('uuid')\n\n/* Cognito SDK */\nconst cognito = new\nAWS.CognitoIdentityServiceProvider({\n  apiVersion: '2016-04-18'\n})\n\n/* Cognito User Pool ID\n*  This User Pool ID variable will be given to you by the CLI output after\n   adding the category\n*  This will also be available in the file itself, commented out at the top\n*/\nvar userpoolId = process.env.<your_app_id>\n\n// DynamoDB configuration\nconst region = process.env.REGION\nconst ddb_table_name = process.env.STORAGE_PRODUCTTABLE_NAME\nconst docClient = new AWS.DynamoDB.DocumentClient({region})\n```", "```\n// amplify/backend/function/ecommercefunction/src/app.js\nasync function getGroupsForUser(event) {\n  let userSub =\n    event\n      .requestContext\n      .identity\n      .cognitoAuthenticationProvider\n      .split(':CognitoSignIn:')[1]\n  let userParams = {\n    UserPoolId: userpoolId,\n    Filter: `sub = \"${userSub}\"`,\n  }\n  let userData = await cognito.listUsers(userParams).promise()\n  const user = userData.Users[0]\n  var groupParams = {\n    UserPoolId: userpoolId,\n    Username: user.Username\n  }\n  const groupData = await cognito.adminListGroupsForUser(groupParams).promise()\n  return groupData\n}\n\nasync function canPerformAction(event, group) {\n  return new Promise(async (resolve, reject) => {\n    if (!event.requestContext.identity.cognitoAuthenticationProvider) {\n      return reject()\n    }\n    const groupData = await getGroupsForUser(event)\n    const groupsForUser = groupData.Groups.map(group => group.GroupName)\n    if (groupsForUser.includes(group)) {\n      resolve()\n    } else {\n      reject('user not in group, cannot perform action..')\n    }\n  })\n}\n```", "```\n// amplify/backend/function/ecommercefunction/src/app.js\napp.get('/products', async function(req, res) {\n  try {\n    const data = await getItems()\n    res.json({ data: data })\n  } catch (err) {\n    res.json({ error: err })\n  }\n})\n\nasync function getItems(){\n  var params = { TableName: ddb_table_name }\n  try {\n    const data = await docClient.scan(params).promise()\n    return data\n  } catch (err) {\n    return err\n  }\n}\n```", "```\n// amplify/backend/function/ecommercefunction/src/app.js\napp.post('/products', async function(req, res) {\n  const { body } = req\n  const { event } = req.apiGateway\n  try {\n    await canPerformAction(event, 'Admin')\n    const input = { ...body, id: uuid() }\n    var params = {\n      TableName: ddb_table_name,\n      Item: input\n    }\n    await docClient.put(params).promise()\n    res.json({ success: 'item saved to database..' })\n  } catch (err) {\n    res.json({ error: err })\n  }\n});\n```", "```\n// amplify/backend/function/ecommercefunction/src/app.js\napp.delete('/products', async function(req, res) {\n  const { event } = req.apiGateway\n  try {\n    await canPerformAction(event, 'Admin')\n    var params = {\n      TableName : ddb_table_name,\n      Key: { id: req.body.id }\n    }\n    await docClient.delete(params).promise()\n    res.json({ success: 'successfully deleted item' })\n  } catch (err) {\n    res.json({ error: err })\n  }\n});\n```", "```\n{\n  ...\n  \"dependencies\": {\n    \"aws-serverless-express\": \"^3.3.5\",\n    \"body-parser\": \"^1.17.1\",\n    \"express\": \"^4.15.2\",\n    \"uuid\": \"^8.0.0\" <- New dependency\n  },\n  ...\n}\n```", "```\n~ amplify push\n```", "```\n~ cd src\n~ touch Admin.js Container.js Main.js Nav.js Profile.js Router.js checkUser.js\n~ cd ..\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Router from './Router'\n\nimport 'antd/dist/antd.css'\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\nReactDOM.render(<Router />, document.getElementById('root'))\n```", "```\nimport React from 'react'\n\nexport default function Container({ children }) {\n  return (\n    <div style={containerStyle}>\n      {children}\n    </div>\n  )\n}\n\nconst containerStyle = {\n  width: 900,\n  margin: '0 auto',\n  padding: '20px 0px'\n}\n```", "```\n/* src/checkUser.js */\nimport { Auth } from 'aws-amplify'\n\nasync function checkUser(updateUser) {\n  const userData = await Auth\n    .currentSession()\n    .catch(err => console.log('error: ', err)\n  )\n  if (!userData) {\n    console.log('userData: ', userData)\n    updateUser({})\n    return\n  }\n  const { idToken: { payload }} = userData\n  const isAuthorized =\n    payload['cognito:groups'] &&\n  payload['cognito:groups'].includes('Admin')\n  updateUser({\n    username: payload['cognito:username'],\n    isAuthorized\n  })\n}\n\nexport default checkUser\n```", "```\n/* src/Nav.js */\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { HomeOutlined, UserOutlined, ProfileOutlined } from '@ant-design/icons'\nimport { Hub } from 'aws-amplify'\nimport checkUser from './checkUser'\n\nconst Nav = (props) => {\n  const { current } = props\n  const [user, updateUser] = useState({})\n  useEffect(() => {\n    checkUser(updateUser)\n    Hub.listen('auth', (data) => {\n      const { payload: { event } } = data;\n      console.log('event: ', event)\n      if (event === 'signIn' || event === 'signOut') checkUser(updateUser)\n    })\n  }, [])\n\n  return (\n    <div>\n      <Menu selectedKeys={[current]} mode=\"horizontal\">\n        <Menu.Item key='home'>\n          <Link to={`/`}>\n            <HomeOutlined />Home\n          </Link>\n        </Menu.Item>\n        <Menu.Item key='profile'>\n          <Link to='/profile'>\n            <UserOutlined />Profile\n          </Link>\n        </Menu.Item>\n        {\n          user.isAuthorized && (\n            <Menu.Item key='admin'>\n              <Link to='/admin'>\n                <ProfileOutlined />Admin\n              </Link>\n            </Menu.Item>\n          )\n        }\n      </Menu>\n    </div>\n  )\n}\n\nexport default Nav\n```", "```\n/* src/Profile.js */\nimport React from 'react'\nimport './App.css'\n\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react'\n\nfunction Profile() {\n  return (\n    <div style={containerStyle}>\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nconst containerStyle = {\n  width: 400,\n  margin: '20px auto'\n}\n\nexport default withAuthenticator(Profile)\n```", "```\n/* src/Router.js */\nimport React, {useState, useEffect} from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nimport Nav from './Nav'\nimport Admin from './Admin'\nimport Main from './Main'\nimport Profile from './Profile'\n\nexport default function Router() {\n  const [current, setCurrent] = useState('home')\n  useEffect(() => {\n    setRoute()\n    window.addEventListener('hashchange', setRoute)\n    return () =>  window.removeEventListener('hashchange', setRoute)\n  }, [])\n  function setRoute() {\n    const location = window.location.href.split('/')\n    const pathname = location[location.length-1]\n    console.log('pathname: ', pathname)\n    setCurrent(pathname ? pathname : 'home')\n  }\n  return (\n    <HashRouter>\n      <Nav current={current} />\n      <Switch>\n        <Route exact path='/' component={Main} />\n        <Route path='/admin' component={Admin} />\n        <Route path='/profile' component={Profile} />\n        <Route component={Main} />\n      </Switch>\n    </HashRouter>\n  )\n}\n```", "```\n/* src/Admin.js */\nimport React, { useState } from 'react'\nimport './App.css'\nimport { Input, Button } from 'antd'\n\nimport { API } from 'aws-amplify'\nimport { withAuthenticator } from '@aws-amplify/ui-react'\n\nconst initialState = {\n  name: '', price: ''\n}\n\nfunction Admin() {\n  const [itemInfo, updateItemInfo] = useState(initialState)\n  function updateForm(e) {\n    const formData = {\n      ...itemInfo, [e.target.name]: e.target.value\n    }\n    updateItemInfo(formData)\n  }\n  async function addItem() {\n    try {\n      const data = {\n        body: { ...itemInfo, price: parseInt(itemInfo.price) }\n      }\n      updateItemInfo(initialState)\n      await API.post('ecommerceapi', '/products', data)\n    } catch (err) {\n      console.log('error adding item...')\n    }\n  }\n  return (\n    <div style={containerStyle}>\n      <Input\n        name='name'\n        onChange={updateForm}\n        value={itemInfo.name}\n        placeholder='Item name'\n        style={inputStyle}\n      />\n      <Input\n        name='price'\n        onChange={updateForm}\n        value={itemInfo.price}\n        style={inputStyle}\n        placeholder='item price'\n      />\n      <Button\n        style={buttonStyle}\n        onClick={addItem}\n      >Add Product</Button>\n    </div>\n  )\n}\n\nconst containerStyle = { width: 400, margin: '20px auto' }\nconst inputStyle = { marginTop: 10 }\nconst buttonStyle = { marginTop: 10 }\n\nexport default withAuthenticator(Admin)\n```", "```\n/* Create the object to send with the request */\nconst data = {\n  body: { ...itemInfo, price: parseInt(itemInfo.price) }\n}\n/* Update the local state with the initial state to clear the form */\nupdateItemInfo(initialState)\n/* Post to the API */\nawait API.post('ecommerceapi', '/products', data)\n```", "```\n/* src/Main.js */\nimport React, { useState, useEffect } from 'react'\nimport Container from './Container'\nimport { API } from 'aws-amplify'\nimport { List } from 'antd'\nimport checkUser from './checkUser'\n\nfunction Main() {\n  const [state, setState] = useState({products: [], loading: true})\n  const [user, updateUser] = useState({})\n  let didCancel = false\n  useEffect(() => {\n    getProducts()\n    checkUser(updateUser)\n    return () => didCancel = true\n  }, [])\n  async function getProducts() {\n    const data = await API.get('ecommerceapi', '/products')\n    console.log('data: ', data)\n    if (didCancel) return\n    setState({\n      products: data.data.Items, loading: false\n    })\n  }\n  async function deleteItem(id) {\n    try {\n      const products = state.products.filter(p => p.id !== id)\n      setState({ ...state, products })\n      await API.del('ecommerceapi', '/products', { body: { id } })\n      console.log('successfully deleted item')\n    } catch (err) {\n      console.log('error: ', err)\n    }\n  }\n  return (\n    <Container>\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={state.products}\n        loading={state.loading}\n        renderItem={item => (\n          <List.Item\n            actions={user.isAuthorized ?\n              [<p onClick={() => deleteItem(item.id)}\n              key={item.id}>delete</p>] : null}\n          >\n            <List.Item.Meta\n              title={item.name}\n              description={item.price}\n            />\n          </List.Item>\n        )}\n      />\n    </Container>\n  )\n}\n\nexport default Main\n```", "```\n~ npm start\n```"]