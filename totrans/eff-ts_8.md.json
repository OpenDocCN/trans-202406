["```\n// CommonJS\n// a.js\nconst b = require('./b');\nconsole.log(b.name);\n\n// b.js\nconst name = 'Module B';\nmodule.exports = {name};\n```", "```\n// ECMAScript module\n// a.ts\nimport * as b from './b';\nconsole.log(b.name);\n\n// b.ts\nexport const name = 'Module B';\n```", "```\nfunction Person(first, last) {\n  this.first = first;\n  this.last = last;\n}\n\nPerson.prototype.getName = function() {\n  return this.first + ' ' + this.last;\n}\n\nconst marie = new Person('Marie', 'Curie');\nconst personName = marie.getName();\n```", "```\nclass Person {\n  first: string;\n  last: string;\n\n  constructor(first: string, last: string) {\n    this.first = first;\n    this.last = last;\n  }\n\n  getName() {\n    return this.first + ' ' + this.last;\n  }\n}\n\nconst marie = new Person('Marie', 'Curie');\nconst personName = marie.getName();\n```", "```\nfunction foo() {\n  bar();\n  function bar() {\n    console.log('hello');\n  }\n}\n```", "```\nfor (var i = 0; i < array.length; i++) {\n  const el = array[i];\n  // ...\n}\n```", "```\nfor (const el of array) {\n  // ...\n}\n```", "```\narray.forEach((el, i) => {\n  // ...\n});\n```", "```\nclass Foo {\n  method() {\n    console.log(this);\n    [1, 2].forEach(function(i) {\n      console.log(this);\n    });\n  }\n}\nconst f = new Foo();\nf.method();\n// Prints Foo, undefined, undefined in strict mode\n// Prints Foo, window, window (!) in non-strict mode\n```", "```\nclass Foo {\n  method() {\n    console.log(this);\n    [1, 2].forEach(i => {\n      console.log(this);\n    });\n  }\n}\nconst f = new Foo();\nf.method();\n// Always prints Foo, Foo, Foo\n```", "```\nconst x = 1, y = 2, z = 3;\nconst pt = {\n  x: x,\n  y: y,\n  z: z\n};\n```", "```\nconst x = 1, y = 2, z = 3;\nconst pt = { x, y, z };\n```", "```\n['A', 'B', 'C'].map((char, idx) => ({char, idx}));\n// [ { char: 'A', idx: 0 },  { char: 'B', idx: 1 }, { char: 'C', idx: 2 } ]\n```", "```\nconst obj = {\n  onClickLong: function(e) {\n    // ...\n  },\n  onClickCompact(e) {\n    // ...\n  }\n};\n```", "```\nconst props = obj.props;\nconst a = props.a;\nconst b = props.b;\n```", "```\nconst {props} = obj;\nconst {a, b} = props;\n```", "```\nconst {props: {a, b}} = obj;\n```", "```\nlet {a} = obj.props;\nif (a === undefined) a = 'default';\n```", "```\nconst {a = 'default'} = obj.props;\n```", "```\nconst point = [1, 2, 3];\nconst [x, y, z] = point;\nconst [, a, b] = point;  // Ignore the first one\n```", "```\nconst points = [\n  [1, 2, 3],\n  [4, 5, 6],\n];\npoints.forEach(([x, y, z]) => console.log(x + y + z));\n// Logs 6, 15\n```", "```\nfunction log2(a, b) {\n  console.log(a, b);\n}\nlog2();\n```", "```\nundefined undefined\n```", "```\nfunction parseNum(str, base) {\n  base = base || 10;\n  return parseInt(str, base);\n}\n```", "```\nfunction parseNum(str, base=10) {\n  return parseInt(str, base);\n}\n```", "```\nfunction getJSON(url: string) {\n  return fetch(url).then(response => response.json());\n}\nfunction getJSONCallback(url: string, cb: (result: unknown) => void) {\n  // ...\n}\n```", "```\nasync function getJSON(url: string) {\n  const response = await fetch(url);\n  return response.json();\n}\n```", "```\n'use strict';\nfunction foo() {\n  x = 10;  // Throws in strict mode, defines a global in non-strict.\n}\n```", "```\n// @ts-check\nconst person = {first: 'Grace', last: 'Hopper'};\n2 * person.first\n // ~~~~~~~~~~~~ The right-hand side of an arithmetic operation must be of type\n //              'any', 'number', 'bigint', or an enum type\n```", "```\n// @ts-check\nconsole.log(user.firstName);\n         // ~~~~ Cannot find name 'user'\n```", "```\ninterface UserData {\n  firstName: string;\n  lastName: string;\n}\ndeclare let user: UserData;\n```", "```\n// @ts-check\n/// <reference path=\"./types.d.ts\" />\nconsole.log(user.firstName);  // OK\n```", "```\n// @ts-check\n   $('#graph').style({'width': '100px', 'height': '100px'});\n// ~ Cannot find name '$'\n```", "```\n$ npm install --save-dev @types/jquery\n```", "```\n// @ts-check\n$('#graph').style({'width': '100px', 'height': '100px'});\n         // ~~~~~ Property 'style' does not exist on type 'JQuery<HTMLElement>'\n```", "```\n// @ts-check\nconst ageEl = document.getElementById('age');\nageEl.value = '12';\n   // ~~~~~ Property 'value' does not exist on type 'HTMLElement'\n```", "```\n// @ts-check\nconst ageEl = /** @type {HTMLInputElement} */(document.getElementById('age'));\nageEl.value = '12';  // OK\n```", "```\n// @ts-check\n/**\n * Gets the size (in pixels) of an element.\n * @param {Node} el The element\n * @return {{w: number, h: number}} The size\n */\nfunction getSize(el) {\n  const bounds = el.getBoundingClientRect();\n                 // ~~~~~~~~~~~~~~~~~~~~~ Property 'getBoundingClientRect'\n                 //                       does not exist on type 'Node'\n  return {width: bounds.width, height: bounds.height};\n       // ~~~~~~~~~~~~~~~~~~~ Type '{ width: any; height: any; }' is not\n       //                     assignable to type '{ w: number; h: number; }'\n}\n```", "```\nfunction double(val) {\n  return 2 * val;\n}\n```", "```\n// @ts-check\n/**\n * @param {number} val\n */\nfunction double(val) {\n  return 2 * val;\n}\n```", "```\nfunction loadData(data) {\n  data.files.forEach(async file => {\n    // ...\n  });\n}\n```", "```\n/**\n * @param {{\n *  files: { forEach: (arg0: (file: any) => Promise<void>) => void; };\n * }} data\n */\nfunction loadData(data) {\n  // ...\n}\n```", "```\n$ browserify index.ts -p [ tsify --noImplicitAny ] > bundle.js\n```", "```\nmodule.exports = {\n  transform: {\n    '^.+\\\\.tsx?$': 'ts-jest',\n  },\n};\n```", "```\nclass Greeting {\n  constructor(name) {\n    this.greeting = 'Hello';\n      // ~~~~~~~~ Property 'greeting' does not exist on type 'Greeting'\n    this.name = name;\n      // ~~~~ Property 'name' does not exist on type 'Greeting'\n  }\n  greet() {\n    return this.greeting + ' ' + this.name;\n             // ~~~~~~~~              ~~~~ Property ... does not exist\n  }\n}\n```", "```\nclass Greeting {\n  greeting: string;\n  name: any;\n  constructor(name) {\n    this.greeting = 'Hello';\n    this.name = name;\n  }\n  greet() {\n    return this.greeting + ' ' + this.name;\n  }\n}\n```", "```\nconst state = {};\nstate.name = 'New York';\n   // ~~~~ Property 'name' does not exist on type '{}'\nstate.capital = 'Albany';\n   // ~~~~~~~ Property 'capital' does not exist on type '{}'\n```", "```\nconst state = {\n  name: 'New York',\n  capital: 'Albany',\n};  // OK\n```", "```\ninterface State {\n  name: string;\n  capital: string;\n}\nconst state = {} as State;\nstate.name = 'New York';  // OK\nstate.capital = 'Albany';  // OK\n```", "```\n// @ts-check\n/**\n * @param {number} num\n */\nfunction double(num) {\n  return 2 * num;\n}\n\ndouble('trouble');\n    // ~~~~~~~~~ Argument of type '\"trouble\"' is not assignable to\n    //           parameter of type 'number'\n```", "```\n/**\n * @param {number} num\n */\nfunction double(num) {\n  return 2 * num;\n}\n\ndouble('trouble');  // OK\n```", "```\nfunction double(num: number) {\n  return 2 * num;\n}\n\ndouble('trouble');\n    // ~~~~~~~~~ Argument of type '\"trouble\"' is not assignable to\n    //           parameter of type 'number'\n```", "```\nclass Chart {\n  indices: any;\n\n  // ...\n}\n```", "```\nclass Chart {\n  indices: number[];\n\n  // ...\n}\n```", "```\ngetRanges() {\n  for (const r of this.indices) {\n    const low = r[0];  // Type is any\n    const high = r[1];  // Type is any\n    // ...\n  }\n}\n```", "```\ngetRanges() {\n  for (const r of this.indices) {\n    const low = r[0];\n             // ~~~~ Element implicitly has an 'any' type because\n             //      type 'Number' has no index signature\n    const high = r[1];\n              // ~~~~ Element implicitly has an 'any' type because\n              //      type 'Number' has no index signature\n    // ...\n  }\n}\n```"]