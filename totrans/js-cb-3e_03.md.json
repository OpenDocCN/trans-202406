["```\nif (typeof unknownVariable === 'string') {\n  // unknownVariable is a string\n}\n```", "```\nif (typeof unknownVariable === 'string' && unknownVariable.length > 0) {\n  // This is a genuine string with characters or whitespace in it\n}\n```", "```\nif (typeof unknownVariable === 'string' && unknownVariable.trim().length > 0) {\n  // This is a genuine string that is not empty or all whitespace\n}\n```", "```\n// This test is only safe if we already know unknownVariable is a string\nif (unknownVariable.length > 0)\n```", "```\nconst unknownVariable = new String('test');\n```", "```\nif (typeof unknownVariable === 'string' ||\n    String.prototype.isPrototypeOf(unknownVariable)) {\n  // It's a string primitive or a string wrapped in an object.\n}\n```", "```\nif (unknownVariable) {\n  /* We get here as long as:\n unknownVariable has been declared\n unknownVariable is not null\n unknownVariable is not the empty string ''\n */\n}\n```", "```\nconst someNumber = 42;\nconst someString = someNumber + '';\n```", "```\nconst someNumber = 42;\nconst someString = someNumber.toString();\n```", "```\nconst someNumber = 1242.0055;\n\n// Ask for exactly 2 decimal points. Numbers will be rounded if necessary.\nconst fixedString = someNumber.toFixed(2);\n// fixedString = '1242.01'\n\n// Ask for 5 significant digits. Scientific notation is used if necessary.\nconst precisionString = someNumber.toPrecision(5);\n// precisionString = '1242.0'\n\n// Ask for scientific notation with 2 decimal plates.\nconst scientificString = someNumber.toExponential(2);\n// scientificString = '1.24e+3'\n```", "```\nconst formatter =\n new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\n\nconst someNumber = 1242.0005;\nconst moneyString = formatter.format(someNumber);\n// moneyString = '$1,242.00'\n```", "```\nconst formatter = new Intl.NumberFormat();\n```", "```\nconst formatter = new Intl.NumberFormat('en-US');\n```", "```\nconst someNumber = 1242.0005;\nconst moneyString = someNumber.toLocaleString(\n 'en-US', { style: 'currency', currency: 'USD' });\n```", "```\nconst favoriteMovie = 'My favorite movie is \\'The Seventh Seal\\'.';\n```", "```\nconst copyrightNotice = 'This page \\u00A9 Shelley Powers.';\n```", "```\nconst hamburgerStory = 'I like hamburgers' + String.fromCodePoint(0x1F354);\n```", "```\nconst employeeDetail = 'Our team includes ' + firstName + ' ' + lastName +\n ' who works on the ' + team + \" team. They/'ve been a team member since \"\n  + hireDate + '!';\n```", "```\nconst greeting = `Hello world from a template literal!`;\n```", "```\nemployeeDetail = `Our team includes ${firstName} ${lastName} who works on the\n${team} team. They've been a team member since ${hireDate}!`;\n```", "```\nconst calculation = `The sum of 5 + 3 is ${5+3}`;\n```", "```\nfunction getDaysSince(date) {\n  const today = new Date();\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  return Math.round(Math.abs((today - date) / oneDay));\n}\n\nemployeeDetail = `Our team includes ${firstName} ${lastName}. They've been a\nteam member since ${hireDate}! That's ${getDaysSince(hireDate)} days.`;\n```", "```\nconst a = \"hello\";\nconst b = \"HELLO\";\n\nif (a.toLowerCase() === b.toLowerCase()) {\n  // We end up here, because the lowercase versions of both strings match\n}\n```", "```\nconst a = \"hello\";\nconst b = \"HELLO\";\n\nif (a.localeCompare(b, undefined, { sensitivity: 'accent' }) === 0) {\n  // We end up here, because the case-insensitive strings match.\n}\n```", "```\nconst searchString = 'infinitely';\nconst fullText = 'I know not where I was born, save that the castle was' +\n ' infinitely old and infinitely horrible.';\n\nif (fullText.includes(searchString)) {\n  // The search string was found\n}\n```", "```\nconst searchString = 'infinitely';\nconst fullText = 'I know not where I was born, save that the castle was' +\n ' infinitely old and infinitely horrible.';\n\nif (fullText.includes(searchString, 70)) {\n  // Still true, because the search skips the first 'infinitely' and\n  // hits the second one.\n}\n```", "```\nconst searchString = 'INFINITELY';\nconst fullText = 'I know not where I was born, save that the castle was' +\n ' infinitely old and infinitely horrible.';\n\nif (fullText.toLowerCase().includes(searchString.toLowerCase())) {\n  // The search string was found\n}\n```", "```\nconst storyText = 'I know not where I was born, save that the castle was' +\n ' infinitely old and infinitely horrible.';\n\nconst changedStory = storyText.replaceAll('infinitely', 'somewhat');\n\nconsole.log(changedStory);\n```", "```\nconst originalPieceOfHtml = '<p>This is a <span>paragraph</span></p>';\n\n// Get a new string with no < characters\nlet safePieceOfHtml = originalPieceOfHtml.replaceAll('<', '&lt;');\n\n// Get a new string with no > characters\nsafePieceOfHtml = safePieceOfHtml.replaceAll('>', '&gt;');\n\n// Show it in the page\ndocument.getElementById('placeholder').innerHtml = safePieceOfHtml;\n```", "```\nconst safePieceOfHtml =\n originalPieceOfHtml.replaceAll('<', '&lt;').replaceAll('>', '&gt;');\n```", "```\nconst originalString = 'Now is the time, this is the tame';\nconst regex = /t\\w{2}e/g;\nconst newString = originalString.replaceAll(regex, 'place');\n\n// newString = 'Now is the place, this is the place'\n```", "```\nconst regex = new RegExp('t\\\\w{2}e', 'g');\nconst newString = originalString.replaceAll(regex, 'place');\n```", "```\n// Although String.raw is a method, it has no parentheses after it,\n// and it uses the specialized backtick syntax shown here.\nconst regex = new RegExp(String.raw`t\\w{2}e`, 'g');\n```", "```\nconst regex = /technology\\s+book/;\n```", "```\ntechnology book\n```", "```\ntechnology     book\n```", "```\ntechnologybook\n```", "```\nThis is a list of items: cherries, limes, oranges, apples.\n```", "```\n['cherries','limes','oranges','apples']\n```", "```\nconst sentence = 'This is one sentence. This is a sentence with a list of items:' +\n'cherries, oranges, apples, bananas. That was the list of items.';\nconst start = sentence.indexOf(':');\nconst end = sentence.indexOf('.', start + 1);\n```", "```\nconst list = sentence.slice(start + 1, end);\n// list = 'cherries, oranges, apples, bananas'\n```", "```\nlet fruits = list.split(',');\n// now fruits has these elements: ['cherries', ' oranges', ' apples', ' bananas']\n```", "```\nfruits = fruits.map(s => s.trim());\n// now fruits has these elements: ['cherries', 'oranges', 'apples', 'bananas']\n```", "```\nconst searchString = 'Now is the time and this is the time and that is the time';\nconst regex = /t\\w*e/g;\n\nconst matches = searchString.matchAll(regex);\nfor (const match of matches) {\n  console.log(`at ${match.index} we found ${match[0]}`);\n}\n```", "```\nat 7 we found the\nat 11 we found time\nat 28 we found the\nat 32 we found time\nat 49 we found the\nat 53 we found time\n```", "```\nconst searchString = 'Now is the time and this is the time and that is the time';\nconst regex = /t\\w*e/g;\n\n// Put the 6 match objects into an array\nconst matches = [...searchString.matchAll(regex)];\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Finding All Instances of a Pattern</title>\n\n    <style>\n      .found {\n        background-color: #ff0;\n      }\n      body {\n        margin: 15px;\n      }\n      textarea {\n        width: 100%;\n        height: 350px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Finding All Instances of a Pattern</h1>\n\n    <form id=\"textsearch\">\n      <textarea id=\"incoming\">\n      </textarea>\n      <p>\n        Search pattern: <input id=\"pattern\" type=\"text\">\n      </p>\n    </form>\n    <button id=\"searchSubmit\">Search for pattern</button>\n    <div id=\"searchResult\"></div>\n\n    <script>\n    document.getElementById(\"searchSubmit\").onclick = function() {\n        // Get the pattern\n        const pattern = document.getElementById('pattern').value;\n        const regex = new RegExp(pattern, 'g');\n\n        // Get the text to search\n        const searchText = document.getElementById('incoming').value;\n\n        let highlightedResult = \"<pre>\";\n        let startPosition = 0;\n        let endPosition = 0;\n\n        // Find each match, and build the result\n        const matches = searchText.matchAll(regex);\n        for (const match of matches) {\n            endPosition = match.index;\n\n            // Get all of the string up to the match, and concatenate\n            highlightedResult += searchText.slice(startPosition, endPosition);\n\n            // Add matched text, using a CSS class for formatting\n            highlightedResult += \"<span class='found'>\" + match[0] + \"</span>\";\n            startPosition = endPosition + match[0].length;\n        }\n\n        // Finish off the result string\n        highlightedResult += searchText.slice(startPosition);\n        highlightedResult += \"</pre>\";\n\n        // Show the highlighted text in the page\n        document.getElementById(\"searchResult\").innerHTML = highlightedResult;\n     }\n    </script>\n  </body>\n</html>\n```", "```\nlea(f|ves)\n```", "```\nconst paddedString = '     The road is long, with many a winding turn.  ';\nconst trimmedString = paddedString.trim();\n\n// trimmedString = 'The road is long, with many a winding turn.'\n```", "```\nconst paddedString = 'The road is long,    with many a    winding turn.';\nconst trimmedString = paddedString.replaceAll(/\\s\\s+/g, ' ');\n\n// trimmedString = 'The road is long, with many a winding turn.'\n```", "```\nconst original = 'if you cut an orange, there is a risk it will orbisculate.';\nconst fixed = original[0].toUpperCase() + original.slice(1);\n\n// fixed = 'If you cut an orange, there is a risk it will orbisculate.';\n```", "```\nconst firstLetter = original[0];\n```", "```\n// Get a string from index position 5 to 10.\nconst substring = original.slice(5, 10);\n```", "```\nconst emailValid = \"abeLincoln@gmail.com\";\nconst emailInvalid = \"abeLincoln@gmail .com\";\nconst regex = /\\S+@\\S+\\.\\S+/;\n\nif (regex.test(emailValid)) {\n  // This code is executed, because the email passes.\n}\nif (regex.test(emailInvalid)) {\n  // This code is not executed, because the email fails.\n}\n```"]