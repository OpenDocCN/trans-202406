- en: Chapter 18\. Modeling Our Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we’ve made a fair amount of headway on our library application;
    we’ve got some basic structural elements in place for the app, we’re transitioning
    between some screens, and we’re listing out some data. Unfortunately that data
    is static, hard-coded data—this won’t get us far for very long. In order to move
    forward with the rest of the app, we need to look at our data model. Paying attention
    to it now will allow us to make something a bit more maintainable and robust.
  prefs: []
  type: TYPE_NORMAL
- en: Now, static data in and of itself is not a terrible thing. In fact, we’ll continue
    to use “static” data throughout this tutorial until we talk about networking in
    [Chapter 9](ch09.html#topics_networking). A large part of the problem with the
    way we’re serving up a list of books right now is that it’s not very portable
    to other places inside the app.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, we’re only displaying books in a catalog view within the app. Later,
    however, we’ll be searching for books, saving books, and more. Let’s figure out
    a way to move forward that is a bit more adaptable for the future.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Data in List Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our list view of books is a great place to start looking at ways to make our
    display of data a bit more dynamic. If you’ll recall, the list of books is currently
    stored as a temporary property on our main object type, `Book`, as `sampleData`
    to make it a bit easier to find and use.
  prefs: []
  type: TYPE_NORMAL
- en: As we add more views that display data to our application, however, we’ll find
    that this is a bit repetitive and cumbersome to maintain. Let’s make this a bit
    more robust by adding a layer between our UI controller and our list view.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of a “data source” is present in Android and exists as just that
    in some components like the next-generation media player, `ExoPlayer`. Further,
    Android has a notion of “content provider” that can supply information about the
    contacts on your phone for management in your app. However, components that use
    the `Adapter` pattern tend to leave the data source arbitrary. You might have
    a compiled list of objects, XML files on the device, JSON strings in memory, or
    REST web services you communicate with across a network.
  prefs: []
  type: TYPE_NORMAL
- en: For our first draft, we just added all our objects to a static `array` of `Book`
    objects. While this is fine, it’s certainly not easily maintainable—every time
    a book is added to our library, we’d have to update that data structure and publish
    a new version of the app and hope that all our users will diligent about updating.
    Probably in the long run, we’ll want to use a REST web service that can be updated
    by library administrators and update our book list with occasional calls to the
    appropriate service endpoints (URLs). We’ll certainly want to persist the data
    locally to the device, and if we want to be able to sort or filter using well-known
    and highly vetted SQL, we would probably want to convert the JSON responses of
    those web services to database rows.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s just create a simple interface the provides our `Adapter` the
    information it needs and update the `Adapter` to accommodate this contract, and
    then we can make changes as our requirements and capabilities evolve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take another look at our `Adapter` and see how we can fulfill its needs
    in an extensible, dynamic fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hmm. Looks like we reference our static source of book data a couple times—once
    when a view is recycled and we want to update the visual properties of the row
    (for now, specifically the title of the book), and also to determine the total
    number of books in our source, so the `RecyclerView` can know when to stop scrolling.
    Sounds like a simple enough composition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s update the `Adapter` to accept any class that implements that interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple! If we wanted to keep using our static array, we could create a simple
    class that implemented `BookDataSource` but used the hardcoded corpus very easily:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may not have noticed, but this `BookDataSource` interface contract is implicitly
    satisfied by all `List<Book>` implementations—you could provide a data source
    as simple as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: With this type of data source, you’d implicitly have at hand all the wondrous
    `List` APIs like `add` and `addAll`, `set`, `remove`, `subList`, etc.
  prefs: []
  type: TYPE_NORMAL
- en: So while we’re still using the hardcoded book list for now, we won’t have to
    make any changes to our `RecyclerView` or `Adapter`, other than updating the `Adapter`
    with the new source—maybe one that reads from a web server or from a local database.
    Great! Our list view is now a bit more dynamic even if it’s using the same data
    as before. We’ll get a bit further with removing our static array of `Book`s later
    in the chapter. For now, let’s see how we can do the same thing on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like we did in Android using the `Adapter` pattern, we need to create some separation
    between our controller layer and our raw data. We can do this by adding a new
    object to interface directly with the controller. If you’ll recall in `CatalogViewController`,
    we’re making the view controller adhere to the `UITableViewDataSource` protocol
    to serve up data for the table view.
  prefs: []
  type: TYPE_NORMAL
- en: This worked fine to start, but why not create a separate object to serve up
    that data to the table view directly? The controller can manage that data source
    object, and it can manage the table view object. This creates separation between
    the controller, the view—in this instance the table view—and the data layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding a new file to our project called `ListDataSource` by
    clicking File > New > File in the app menu. This new object will function as the
    data source for our table view. For now, this file be pretty basic. Here’s an
    example implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You might recognize some of this code—or, if you’ve been paying attention,
    all of it! This is the same code we used in `CatalogViewController` to display
    a list of books in our book catalog. In fact, by placing this code in a separate
    file, we can remove all the `UITableViewDataSource` code that currently resides
    in `CatalogViewController`. The `CatalogViewController` file now looks like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you were to build and run our application, you might see that we’ve gone
    a bit too far. `CatalogViewController` doesn’t have the required methods necessary
    to fill in as the data source for the table view, and yet it’s still linked in
    *Main.Storyboard*. This causes a `SIGABORT`, which crashes the application.
  prefs: []
  type: TYPE_NORMAL
- en: Oops. Let’s see if we can go back and fix this. In fact, while we’re fixing
    things, let’s see if we can make things even better by having the table view in
    `CatalogViewController` use our new `ListDataSource` as its data source directly.
  prefs: []
  type: TYPE_NORMAL
- en: First things first, we have to remove the linkage in *Main.storyboard*. Open
    up the storyboard and click on the table view. In the right pane of Xcode, click
    on the Connections inspector. Inside you’ll see a connection that has been made
    for `dataSource`. Click the “x” to remove that connection from the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s switch the table view to use a new, discrete data source object that
    we create. In order to do that, we need to expose the table view to the view controller.
    To do that, we’re going to add a new connection using the Assistant editor in
    Xcode. Click the Assistant editor button in the top right of the project window.
    This will automatically open up the corresponding `CatalogViewController` for
    the scene—some might say “magically.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the view controller is active in both displays, Control-click on the table
    view and drag a connection over to the code window similar to how you wired up
    our browsing button in a previous chapter. You’ll drag the connection directly
    underneath the `CatalogViewController` class definition here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A modal will come up asking you if you’re creating an `Outlet`, which is a connection
    from a view controller to a particular view, or if you’re creating an `Action`,
    which is a control event (like whenever a button is pressed, for example). Leave
    everything as is and name our new outlet `tableView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, `CatalogViewController` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve wired a connection from the storyboard to the view controller to expose
    our table view directly to the view controller. The reason for this connection
    was to enable us to set up the table view’s data source inside the view controller
    class. Take a look at how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let’s walk through the code.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to note is that we’ve added a new `lazy` property called `dataSource`
    inside `CatalogViewController`. The `lazy` operator makes it so this object isn’t
    instantiated until the property is accessed. This is generally considered a good
    practice for data sources due to the time required for spinning up the object
    occasionally. In our case, our data source is pretty lightweight, but it’s a good
    habit to get into. It also allows us to keep our initialization code contained.
    In this case, we’re simply creating a new instance of `ListDataSource`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, inside `viewDidLoad`, we’ve added some new code. This method is called
    as part of the life cycle of a view; when it’s called, we can safely assume that
    our outlets and actions are wired up and the view controller’s `view` is loaded.
    This method is only called once in the life cycle of a view, but that’s all right
    because we only need it once.
  prefs: []
  type: TYPE_NORMAL
- en: Inside `viewDidLoad`, we’re setting the `dataSource` property of the table view
    to the data source we’ve created inside the view controller. If you build and
    run the application, you’ll notice the catalog loads the same as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you might be asking yourself: why does this matter? It seems
    more complicated to create a full-blown data layer than to have the view controllers
    supply their data directly.'
  prefs: []
  type: TYPE_NORMAL
- en: Fair point.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you’ll recall, we’re still using static, hardcoded data in our app.
    Let’s see what happens when we transition to something more portable. You’ll see
    the full power of abstracting our data out of the view layer. Let’s go!
  prefs: []
  type: TYPE_NORMAL
- en: It’s Time for Our Model Objects to Get Real
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right. Our `Book` object has a few properties. But, let’s be honest. Most
    books have *much* more metadata other than what we’ve been showing so far. Additionally,
    if we want to change our data, we have to release a new version of our applications.
    And, those applications have to be in sync with each other. This gets harder as
    you add the ability to save books for later and as the application grows in complexity.
  prefs: []
  type: TYPE_NORMAL
- en: As Dr. Phil (yes, that Dr. Phil) would say, “It’s time for our model objects
    to *get real*.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, we can solve this in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By switching from static, hardcoded data to something portable like JSON.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By switching from a static, hardcoded data source to something served up via
    a server, or another source of truth beyond the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this chapter, we’ll address number 2 in [Chapter 6](ch06.html#topics_files)
    of this book. However, let’s take a look at number 1: switching to JSON.'
  prefs: []
  type: TYPE_NORMAL
- en: JSON for One, JSON for All
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve decided we’re going to use JSON. Here’s an example of what our `Book`
    objects could look like in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In fact, if we take the data in the `sampleData` property we added to our `Book`
    object earlier, transform it to JSON, and save it as a new file named *catalog.json*,
    we end up with a file that looks like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to add additional books; this is the time for personal favorites and
    guilty pleasures.
  prefs: []
  type: TYPE_NORMAL
- en: Switch the Model Layer to JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ll recall, in our data layer code so far, we’re still using the `sampleData`
    provided by the `Book` object. Let’s remove that in both projects and switch to
    using our JSON directly.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we’ve now got a file called *catalog.json* with all the JSON `Book` representations,
    saved on disk. Let’s assume, for the Android app, that it’s saved as an asset,
    in the project-level */assets/* folder. This folder has special attributes and
    APIs to make operations just like the one we’re describing easier to use, and
    may not be available immediately—if you don’t see a folder named “assets” in your
    project’s source, make sure you’re in the “Android” project view from the drop-down
    directly above the file list in the lefthand window pane, then right-click the
    project name in Android Studio and select New, then Folder, then Assets Folder.
    You can create a new text file in this directory, copy the preceding JSON, and
    save the file as *catalog.json*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s convert our `BookDataSource` to use that instead. To start off, we’ll
    read the file on the UI thread, but that’s just step one—any time you’re touching
    disk or the wire, make sure you’re working in a background thread.
  prefs: []
  type: TYPE_NORMAL
- en: If we refer back to the sample code in [Chapter 6](ch06.html#topics_files),
    you may remember how to read a file from disk. If you think back to the exercises
    in [Chapter 12](ch12.html#topics_transports), you may remember a couple ways to
    parse JSON into valid Java object instances. We’ll use techniques from both.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have our data source class provide this functionality, although in time
    you might find it more appropriate to separate out some of the logic. For now,
    let’s start out with that basic `List<Book>` data source, but we’ll dress it up
    so that on instantiation, it reads *catalog.json*, converts each JSON object to
    a Java `Book` instance, and adds all of those `Books` to itself (an `ArrayList`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run that, you will get an array of `Book` instances of a number equal
    to the JSON objects in *catalog.json*; however, if you used the Java implementation,
    those instances will be bare. Each property will be default. That’s because of
    the Hungarian notation we used when defining `Book` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When Gson looks at the `Book` class and tries to find properties to map from
    the JSON it’s handed, it’ll find that the `Book` class instance wants an “mTitle”
    and doesn’t care about “title”—on the other hand, the JSON has no reference to
    “mTitle” or “mIsbn” or “mAnything”—it’s using human-readable key names. Fortunately
    for us, this is a common issue in Android and one that’s easily fixed using Gson’s
    `SerializedName` annotation. Supply a `String` to this annotation, and Gson will
    check both that `String` and the actual property name. Make the following updates
    and run it again. In Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, your `Book` instances should be fully and appropriately populated.
    That’s it! You’ve got a working serialization protocol. Let’s examine a few of
    the features that might be under your radar. To start, one thing you might notice
    in the preceding code is this hard-to-read mouthful:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Gson` can do a great job of converting a single `Book` instance to, and from,
    a JSON string, but when we start getting into collections, things become a little
    less straightforward. One option is to just create a class that has a generic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This could be called using the traditional Gson method `fromJson`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Failing that, however, we can use the `TypeToken` class to dynamically generate
    the generics. You’re creating an instance of a new `TypeToken` subclass that then
    invokes its `getType` method, so the syntax is effectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In that example, “GENERICIZED_DATA_TYPE” is any number of data types including
    any number of generics; it might be as simple as `new TypeToken<Date>...`, or
    it could have several nested layers, like `new TypeToken<List<Map<String, List<Date>>>...`
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the example at hand. Using this new data source will automatically
    update your `Adapter` and `RecyclerView`, and you don’t even need to change your
    adapter code at all; just make sure when you supply the data source to the `Adapter`
    class, the constructor includes a `Context` parameter, so we can get the right
    files directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting trick here is that `Books` is itself a `List` of `Book`
    instances, so instead of the updated data source you see in the preceding code,
    you could read the file out using a utility method and use Gson to convert that
    string directly into the data source. Let’s assume we revert to the original `Books`
    class with no method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also assume we have access to the methods in [Chapter 6](ch06.html#topics_files).
    We might do something like this in the `Activity`’s `onCreate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: Since `Books` is also an `ArrayList`, it’ll be populated by each of the books
    in *catalog.json* and so be able to successfully satisfy the `get` and `size`
    contract requirements of `BookDataSource` implicitly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve got that set up, we no longer need the static data structure
    `SAMPLE_DATA` on the `Book` class and can safely delete it. One handy feature
    of Android Studio is the “Refactor” options. Besides having functions to rename
    methods or variables everywhere they appear in your project, it can also run a
    “Safe Delete” and only delete a variable if it’s no longer used in the project.
    Try this out on `Book.SAMPLE_DATA` after making the preceding updates and you
    should see it delete safely.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In iOS, it’s remarkably easy to get started with JSON by using the built-in
    `Codable` protocol. This a protocol composed of `Encodable` and `Decodable` protocols.
    They provide some understanding necessary for the Swift compiler to reason about
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the details of `Codable`, read [Chapter 12](ch12.html#topics_transports).
    For now, however, here’s an example of how `Codable` allows us to utilize JSON
    easily in our applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add support for `Codable` inside the `Book` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That’s it. You might notice that we’ve removed our `sampleData` property from
    our object as well. This is intentional because we’re now going to switch `ListDataSource`
    from using `sampleData` to using our newly created *catalog.json*, which contains
    the entirety of our catalog of books.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at `ListDataSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We’ve added a new `lazy` property called `data`. This property is an array of
    `Book`s. Whenever the property is accessed the first time, *catalog.json* is read
    into a object with a `Data` type called `rawCatalogData`. This property is passed
    to a `JSONDecoder` object that decodes the object for a type of `[Book]`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this is `[Book]` and not a raw `Book`. The reason for this declaration
    is because that JSON actually contains an array of JSON objects. The Swift compiler
    is smart to interpret what we’ve declared at the call site when dynamically converting
    *catalog.json* to objects inside Swift. If we don’t find our JSON file—or if it’s
    not decodable into something by the Swift compiler—we return an empty array, `[]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we’ve also updated some of the code that’s used to power our table view
    in the `UITableViewDataSource` protocol adherence. The lines to note are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note also `data[indexPath.row]` inside the method `tableView(_:cellForRowAt:)`.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run the app and you’ll see it functions the same as it did before—it
    displays our list of all the books available in our library—however, now the books
    are dynamically supplied to the table view via a JSON file included in the application
    bundle.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the short span of this chapter we’ve learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to separate tightly coupled code out of the view layer into a new data layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a discrete object tailor-made for supplying data to our views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to switch to a JSON file as a source for our application’s data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we’ll take this a bit further; we’ll use our new data layer
    to provide some additional functionality to save books we’ve found that we liked.
    Keep reading!
  prefs: []
  type: TYPE_NORMAL
