- en: Chapter 18\. GitOps and Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章 GitOps与部署
- en: In this chapter, we will discuss GitOps and how it can be used to deploy and
    manage applications on Kubernetes. We will deep dive into best practices of setting
    up a GitOps workflow and how to utilize the different tools available to achieve
    this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论GitOps以及如何使用它来在Kubernetes上部署和管理应用程序。我们将深入探讨设置GitOps工作流程的最佳实践以及如何利用不同的工具来实现这一目标。
- en: GitOps is a way to do Kubernetes application deployment. It works by utilizing
    Git as a single source of truth for your Kubernetes resources. With Git at the
    center of your deployment pipelines, developers and operators can make pull requests
    to accelerate and simplify application deployments and operations tasks in Kubernetes.
    This allows you to utilize the same practices for managing Kubernetes resources
    as you do for managing application code. Developers will be very familiar with
    the workflow, as they can utilize the same tools they use to work with application
    code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps是一种用于进行Kubernetes应用部署的方法。它通过利用Git作为Kubernetes资源的唯一真实来源来实现。将Git置于部署流水线的中心，开发人员和运维人员可以发起拉取请求，加速并简化Kubernetes应用的部署和操作任务。这样一来，您可以利用相同的实践来管理Kubernetes资源，就像管理应用代码一样。开发人员会非常熟悉这种工作流程，因为他们可以利用处理应用代码时使用的相同工具。
- en: 'We cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖以下主题：
- en: What is GitOps?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是GitOps？
- en: Why utilize GitOps?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用GitOps？
- en: GitOps compared to other deployment methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较GitOps与其他部署方法
- en: Patterns and best practices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式和最佳实践
- en: GitOps tooling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitOps工具链
- en: 'We also go through an example GitOps workflow consisting of the following tasks:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会经历一个示例GitOps工作流程，包括以下任务：
- en: Setting up a GitOps agent with Flux
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flux设置GitOps代理
- en: Connecting Flux agent to a Git repository
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Flux代理连接到Git仓库
- en: Syncing resources to a Kubernetes cluster
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步资源到Kubernetes集群
- en: Deploying an application to the cluster
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序部署到集群
- en: What Is GitOps?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是GitOps？
- en: GitOps was popularized by the folks at Weaveworks, and the idea and fundamentals
    were based on their experience of running Kubernetes in production. GitOps takes
    the concepts of the software development life cycle and applies them to operations.
    With GitOps, your Git repository becomes your source of truth, and your cluster
    is synchronized to the configured Git repository. For example, if you update a
    Kubernetes Deployment manifest, those configuration changes are automatically
    reflected in the cluster state in Git.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps由Weaveworks的人员推广，并基于他们在生产中运行Kubernetes的经验构建了这些思想和基础。GitOps将软件开发生命周期的概念应用到运维中。通过GitOps，您的Git仓库成为了真实来源，而您的集群则与配置的Git仓库同步。例如，如果您更新了一个Kubernetes部署清单，这些配置更改会自动反映在Git中的集群状态中。
- en: By using this method, you can make it easier to maintain multiclusters that
    are consistent and avoid configuration drift across the fleet. GitOps allows you
    to declaratively describe your clusters for multiple environments and drives to
    maintain that state for the cluster. The practice of GitOps can apply to both
    application delivery and operations and provides developers with a common toolchain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，您可以更轻松地维护一致的多集群，并避免在整个集群中出现配置漂移。GitOps允许您以声明方式描述多个环境的集群，并驱动维护该集群的状态。GitOps的实践可以适用于应用交付和操作，并为开发人员提供了一个共同的工具链。
- en: Weaveworks Flux was one of the first tools to enable the GitOps approach, and
    it’s the tool we will use throughout the rest of the chapter. Many new tools that
    have been released into the cloud native ecosystem are worth a look, such as Argo
    CD, from the folks at Intuit, which has also been widely adopted for the GitOps
    approach. We will dive more into the tooling available for GitOps later in the
    chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Weaveworks Flux是最早支持GitOps方法的工具之一，也是我们在本章中将使用的工具。许多新的工具已经发布到云原生生态系统中，如Intuit公司的Argo
    CD，也被广泛应用于GitOps方法。稍后我们将更深入地探讨GitOps可用的工具。
- en: '[Figure 18-1](#GitOps-Workflow) provides a representation of a GitOps workflow.
    We have a Git repository that contains the application code and Kubernetes manifests
    for our application. The Flux agent is configured to watch the repo for any changes.
    When a developer commits a code change, the Flux agent will sync any new changes
    to the Kubernetes clusters.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 18-1](#GitOps-Workflow)提供了一个GitOps工作流程的表示。我们有一个Git仓库，其中包含我们应用程序的应用代码和Kubernetes清单。Flux代理已配置为监视该仓库的任何更改。当开发人员提交代码更改时，Flux代理将同步任何新变更到Kubernetes集群中。'
- en: '![GitOps Workflow](assets/kbp2_1801.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![GitOps 工作流程](assets/kbp2_1801.png)'
- en: Figure 18-1\. GitOps workflow
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-1\. GitOps 工作流程
- en: 'When building your GitOps workflow, you should consider the four core principals
    of GitOps defined by the [OpenGitOps Project](https://oreil.ly/3Rz55):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建您的 GitOps 工作流程时，您应考虑 [OpenGitOps 项目](https://oreil.ly/3Rz55) 定义的四个核心原则：
- en: Declarative configuration
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性配置
- en: All configuration is stored in Git as declarative YAML files. This allows for
    a single source of truth for your cluster configuration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置都存储在 Git 中，以声明性的 YAML 文件形式。这样可以为集群配置提供一个唯一的真实数据来源。
- en: Versioned configuration
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 配置版本化
- en: All configuration is stored in Git, and all changes are tracked and versioned.
    This allows for easy auditing of changes and rollbacks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置都存储在 Git 中，并跟踪和版本化所有更改。这允许轻松审计更改和回滚。
- en: Immutable configuration
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变的配置
- en: All configuration is immutable. This means that once a change is made, it cannot
    be modified. This allows for a consistent state of the cluster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置都是不可变的。这意味着一旦进行更改，就无法修改。这允许集群保持一致的状态。
- en: Continuous state reconciliation
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 持续状态对比
- en: The cluster state is continuously reconciled with the state defined in Git.
    This allows for the cluster to be in a consistent state.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 集群状态与 Git 中定义的状态持续对比。这允许集群保持一致的状态。
- en: Why GitOps?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 GitOps？
- en: GitOps is a excellent way to manage your Kubernetes clusters, and it can be
    used to deploy applications to your cluster as well as manage cluster and application
    configuration. Before we talk about all the benefits, let’s first look at how
    we traditionally deployed and configured applications on Kubernetes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是管理您的 Kubernetes 集群的一种优秀方式，它可以用于部署应用程序到您的集群以及管理集群和应用程序配置。在我们讨论所有这些好处之前，让我们首先看一下我们如何传统地在
    Kubernetes 上部署和配置应用程序。
- en: '[Figure 18-2](#Traditional-Deployment-Workflow) shows a traditional deployment
    workflow. We have a developer who is working on a new feature for an application.
    The developer will make changes to the application code and then build a new container
    image. Next, the developer will push the new container image to a container registry.
    The developer will then update the Kubernetes manifest to use the new container
    image, and then apply the changes to the cluster. This is a very manual process,
    and it can be very time consuming. Some of these steps can be automated with tools,
    but this can become complex as the number of applications and clusters grow.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[图18-2](#传统部署工作流程) 展示了传统的部署工作流程。我们有一个开发人员正在为一个应用程序开发新功能。开发人员将会对应用程序代码进行更改，然后构建一个新的容器映像。接下来，开发人员将新的容器映像推送到容器注册表。然后，开发人员将更新
    Kubernetes 清单以使用新的容器映像，并将更改应用到集群中。这是一个非常手动的过程，可能非常耗时。某些步骤可以通过工具自动化，但随着应用程序和集群数量的增长，这可能变得复杂。'
- en: '![Traditional Deployment Workflow](assets/kbp2_1802.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![传统部署工作流程](assets/kbp2_1802.png)'
- en: Figure 18-2\. Traditional deployment workflow
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-2\. 传统部署工作流程
- en: This workflow can be very error prone, and it can be difficult to track down
    the source of the issue. It can also be difficult to roll back changes, as you
    will need to manually revert the changes to the Kubernetes manifest. It can also
    cause configuration drift, as users may make direct changes to the resources in
    Kubernetes. Controlling security access to the environment can also become complex
    with multiple pipelines and users needing access. Auditing of each interaction
    from change to deployment can also be difficult with multiple pipelines.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作流程可能非常容易出错，并且很难追踪问题的源头。回滚更改也可能很困难，因为您需要手动恢复 Kubernetes 清单的更改。这也可能导致配置漂移，因为用户可能直接对
    Kubernetes 中的资源进行更改。管理环境的安全访问也可能变得复杂，因为需要多个流水线和用户访问权限。审计从更改到部署的每一次互动也可能会因为多个流水线而变得困难。
- en: 'We can solve these problems with the following benefits GitOps provides:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 GitOps 提供的以下好处解决这些问题：
- en: Declarative configuration
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性配置
- en: All configuration is stored in Git as declarative YAML files. This allows for
    a single source of truth. It also allows for easy auditing of changes using Git
    history. Developers will be accustomed to working with Git, so they will be familiar
    with the workflow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置都以声明性 YAML 文件形式存储在 Git 中。这不仅允许有一个真实数据来源，还能通过 Git 历史轻松审计更改。开发人员习惯于使用 Git
    进行工作，因此他们对这种工作流程非常熟悉。
- en: Version controlled
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制
- en: Git repository supports immutability and version history. For example, using
    Git for the previously mentioned configuration will give you a single source from
    which everything for your application is driven. This allows you to easily track
    any changes made at any time. It allows you to look at all changes found in Git
    history and compare those changes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Git 仓库支持不可变性和版本历史。例如，使用 Git 管理前述配置将为你提供一个单一的源，从中驱动应用程序的一切。这使你能够轻松追踪任何时间的更改。它允许你查看
    Git 历史中找到的所有更改并比较这些更改。
- en: Continuous reconciliation
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 持续对比
- en: The cluster state is continuously reconciled with the state defined in Git.
    It also allows for easy rollbacks, as you can simply revert the changes in Git.
    The system can automatically sync the same state in Git to your cluster. This
    allows for the cluster to be in a consistent state.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 集群状态持续与 Git 中定义的状态对比。它还允许简单的回滚，因为你可以简单地在 Git 中恢复更改。系统可以自动同步 Git 中的相同状态到你的集群中。这使得集群能够保持一致的状态。
- en: Security
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性
- en: When you use Git to manage applications deployed to Kubernetes, you gain a complete
    audit log of all changes to the cluster. All changes are made to the Git repository,
    and the GitOps agent can automatically reconcile any changes made directly to
    a Kubernetes resource. This provides a full audit trail of who changed what. It
    enables consistent operations and enhances security of the environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Git 管理部署到 Kubernetes 的应用程序时，你获得了集群所有更改的完整审计日志。所有更改都在 Git 仓库中进行，GitOps 代理可以自动调解对
    Kubernetes 资源的任何直接更改。这提供了更改记录的完整追踪，可以了解到是谁做了什么更改。它支持一致的操作，并增强了环境的安全性。
- en: While you may have a very automated CI/CD pipeline, you may still have some
    manual steps in your workflow. GitOps aims to solve these challenges by automating
    the workflow and providing a developer-centric workflow.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可能有一个非常自动化的 CI/CD 管道，但你的工作流程可能仍有一些手动步骤。GitOps 旨在通过自动化工作流并提供开发者中心的工作流来解决这些挑战。
- en: GitOps Repo Structure
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 仓库结构
- en: One of the first questions about GitOps is how to structure your Git repository.
    There are many different ways to structure your Git repository, but all come with
    their own pros and cons.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 GitOps 的首要问题之一是如何结构化你的 Git 仓库。有许多不同的方法来结构化你的 Git 仓库，但每种方法都有其利弊。
- en: 'Four common strategies for structuring your Git repository are:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化 Git 仓库的四种常见策略是：
- en: Single monorepo
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 单一的 monorepo
- en: 'All Kubernetes manifests and application code are stored in a single repository.
    This is the simple approach, but it becomes much more difficult as the company
    scales. This approach also does not allow for separation of concerns, as all teams’
    source code and Kubernetes manifests will live in a single repository. This can
    work well for a smaller company, but you’ll quickly outgrow this approach as your
    company grows. Following is a sample of this type of repo layout structure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 Kubernetes 清单和应用程序代码都存储在单个仓库中。这是简单的方法，但随着公司规模的扩大，变得更加困难。这种方法也不允许关注点分离，因为所有团队的源代码和
    Kubernetes 清单都存放在同一个仓库中。对于小公司来说可能效果不错，但随着公司的扩展，你很快就会发现这种方法不再适用。以下是此类仓库布局结构的示例：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Repo per team
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队一个仓库
- en: 'Each team has its own repository, and the Kubernetes manifests are stored in
    the same repository. This approach allows for better organization and separation
    of concerns but becomes more difficult to manage as your application portfolio
    grows over time. Following is a sample of this type of repo layout structure:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队有自己的仓库，并且 Kubernetes 清单存储在同一个仓库中。这种方法允许更好地组织和关注点分离，但随着应用程序组合随时间增长，管理起来会变得更加困难。以下是此类仓库布局结构的示例：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Repo per application
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序一个仓库
- en: 'Each application has its own repository, and the Kubernetes manifests are stored
    in the same repository. This approach allows for better organization and separation
    of concerns, as it can be locked down to read-only access for the team. The con
    of using this structure is not everything can be seen in one place. Following
    is a sample of this type of repo layout structure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都有自己的仓库，并且 Kubernetes 清单存储在同一个仓库中。这种方法允许更好地组织和关注点分离，因为可以将其锁定为团队的只读访问权限。使用这种结构的缺点是无法在一个地方看到所有内容。以下是此类仓库布局结构的示例：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Branch per environment
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个环境一个分支
- en: 'Each environment has its own branch in the same repository. This approach allows
    you to promote environments with a simple Git merge. Promoting via a simple Git
    merge can lead to unwanted changes between environments and merge conflicts between
    environments. The downside to this is you will typically have a lot of branches,
    and it can be difficult to manage. This approach also doesn’t fit with templating
    tools such as Kustomize and Helm. Following is a sample of this type of repo layout
    structure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个环境在同一存储库中有自己的分支。这种方法允许您通过简单的 Git 合并来推广环境。通过简单的 Git 合并推广可能会导致环境之间的意外更改和合并冲突。这种方法的缺点是通常会有大量分支，而且难以管理。这种方法也不适合使用
    Kustomize 和 Helm 等模板工具。以下是这种类型的存储库布局结构的示例：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Typically, you will want to assess your organization and team layout to decide
    which structure works best for you. Starting with a repo per team is a excellent
    starting point, as it’s a good middle ground that provides clear separation of
    concerns and easy repo management.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会希望评估您的组织和团队布局，以决定哪种结构最适合您。从每个团队的存储库开始是一个很好的起点，因为它是一个良好的折中点，提供了明确的关注点分离和简单的存储库管理。
- en: Managing Secrets
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理秘密
- en: 'Secrets management is a common challenge when implementing a GitOps workflow.
    There are many different ways to manage secrets, and the best approach will depend
    on your organization. Next we will dive into the five common approaches you can
    take with managing secrets in a GitOps way:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施 GitOps 工作流程时，秘密管理是一个常见的挑战。有许多不同的方法来管理秘密，最佳方法将取决于您的组织。接下来我们将深入探讨在 GitOps
    方式下管理秘密的五种常见方法：
- en: Store secrets directly in Git
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在 Git 中存储秘密
- en: This approach is the simplest, but it is not recommended. The problem with this
    approach is that you are storing plain text secrets in a repository that may be
    public. Even if your repository is internal and private, your are still storing
    the secrets in plain text. Multiple users may have access to this repo and will
    then have access to the secrets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是最简单的，但不推荐使用。这种方法的问题在于，您正在将纯文本秘密存储在可能是公共的存储库中。即使您的存储库是内部和私有的，您仍然在以纯文本形式存储秘密。多个用户可能有权访问此存储库，然后将访问权限扩展到秘密。
- en: Bake secrets into container image
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将秘密嵌入容器映像
- en: This approach is a little better than storing secrets in plain text in Git.
    The problem with this approach is baking secrets into the image will require you
    to rebuild the image each time secrets are rotated. It also doesn’t address the
    security concerns as multiple users may be able to pull the image and run it.
    This approach is also not recommended due to security concerns.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法比在 Git 中以纯文本存储秘密稍好一些。这种方法的问题在于，将秘密嵌入映像将要求您每次旋转秘密时重新构建映像。它也无法解决安全问题，因为多个用户可能能够拉取并运行映像。由于安全问题，这种方法也不推荐使用。
- en: Use Kubernetes Secrets
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes Secrets
- en: This approach is available directly in Kubernetes and provides an easy way to
    get started. The problem with this approach is that Kubernetes Secrets are not
    really secret. What we mean here is that Kubernetes Secrets look encrypted, but
    are actually just base64 encoded. This approach is also not recommended due to
    security concerns.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法直接在 Kubernetes 中可用，提供了一个简单的入门方式。这种方法的问题在于 Kubernetes Secrets 并不真正保密。这里的意思是
    Kubernetes Secrets 看起来被加密了，但实际上只是 base64 编码。由于安全问题，这种方法也不推荐使用。
- en: Use Sealed Secrets
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Sealed Secrets
- en: 'Sealed Secrets is a project by Bitnami. It has two components: a cluster controller
    and a client-side tool call kubeseal. The kubeseal utility uses asymmetric crypto
    to encrypt secrets that only the controller can decrypt. These secrets can then
    be stored in Git encrypted and can only be decrypted by the controller in your
    cluster. This is a recommended approach for managing secrets in a GitOps way.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Sealed Secrets 是 Bitnami 的一个项目。它有两个组件：一个集群控制器和一个客户端工具称为 kubeseal。kubeseal 实用程序使用非对称加密来加密只有控制器可以解密的秘密。这些秘密然后可以加密存储在
    Git 中，只能由您集群中的控制器解密。这是在 GitOps 方式下管理秘密的推荐方法。
- en: Store secrets in a secret management tool
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将秘密存储在秘密管理工具中
- en: This approach allows you to store secrets in a secure location and then access
    them from your cluster. These secrets can be stored in an external secret management
    solution like HashiCorp Vault, Azure Keyvault, Google KMS, etc. This approach
    allows you to use existing solutions you may already have in place and continue
    with the same workflow. This approach is also a recommended approach for managing
    secrets in a GitOps way.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法允许您将密钥存储在安全位置，并从您的集群访问它们。这些密钥可以存储在像 HashiCorp Vault、Azure Keyvault、Google
    KMS 等外部密钥管理解决方案中。这种方法允许您使用可能已经存在的现有解决方案，并继续使用相同的工作流程。这也是以 GitOps 方式管理密钥的推荐方法之一。
- en: While there are lot of different ways to manage secrets, the best approach will
    depend on your organization. As we discussed, Sealed Secrets and external secret
    management are the recommended approaches for managing secrets.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多不同的方法来管理密钥，但最佳方法将取决于您的组织。正如我们讨论的那样，Sealed Secrets 和外部密钥管理是管理密钥的推荐方法。
- en: Setting Up Flux
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Flux
- en: Flux is a Kubernetes operator that watches your Git repository for changes and
    automatically applies those changes to your cluster. Flux is a mature tool for
    implementing GitOps in your cluster, and it is the tool we will use throughout
    the rest of the chapter.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 是一个 Kubernetes 运算符，它监视您的 Git 仓库的变化，并自动将这些变化应用到您的集群中。Flux 是在您的集群中实施 GitOps
    的成熟工具，并且它是我们将在本章的其余部分中使用的工具。
- en: 'First, we’ll start by getting minikube set up to deploy Flux. You can install
    minikube from the [minikube website](https://oreil.ly/GMPMl). We are using Macs
    so we’ll use `brew` to install minikube:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始配置 minikube 以部署 Flux。您可以从 [minikube 网站](https://oreil.ly/GMPMl) 安装 minikube。我们正在使用
    Mac，所以我们将使用 `brew` 安装 minikube：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we’ll install Flux and prepare our cluster to sync to a Git repository.
    We’ll use the `flux` CLI to install Flux. You can install the `flux` CLI from
    the [flux website](https://oreil.ly/h2_hQ).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将安装 Flux 并准备我们的集群以同步到 Git 仓库。我们将使用 `flux` CLI 安装 Flux。你可以从 [flux 网站](https://oreil.ly/h2_hQ)
    安装 `flux` CLI。
- en: 'Install Flux CLI:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Flux CLI：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Export your GitHub token:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 导出您的 GitHub 令牌：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check that your cluster can install Flux:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的集群是否可以安装 Flux：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Bootstrap Flux:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 引导 Flux：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding `bootstrap` command will create a Git repo called kbp-flux in
    your GitHub account. It will also create a `main` branch and a *clusters/prod*
    directory. The *clusters/prod* directory will contain the Flux components that
    will be deployed to your cluster. The *clusters/prod* directory will also contain
    a *gotk-components.yaml* file that will be used to deploy the Flux components
    to your cluster. This also installs the Flux components into the `flux-system`
    namespace.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `bootstrap` 命令将在您的 GitHub 账户中创建一个名为 kbp-flux 的 Git 仓库。它还将创建一个 `main` 分支和一个
    *clusters/prod* 目录。*clusters/prod* 目录将包含将部署到您的集群中的 Flux 组件。*clusters/prod* 目录还将包含一个
    *gotk-components.yaml* 文件，该文件将用于将 Flux 组件部署到您的集群中。这还将把 Flux 组件安装到 `flux-system`
    命名空间中。
- en: 'Now let’s check the `flux-system` namespace to see if the Flux components are
    deployed:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查 `flux-system` 命名空间，看看 Flux 组件是否已部署：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see the following output:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now let’s clone the repo it created to our local machine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将它创建的仓库克隆到我们的本地机器上：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next we’ll add a Flux configuration to our repo and use a public repository
    on GitHub. We’ll use a sample application created by Stefan Prodan from Weaveworks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向我们的仓库添加一个 Flux 配置，并在 GitHub 上使用一个公共仓库。我们将使用 Weaveworks 的 Stefan Prodan
    创建的示例应用程序。
- en: 'Let’s create a Git repository manifest pointing to the apps repository’s main
    branch:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个指向应用程序仓库主分支的 Git 仓库清单：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we’ll configure Flux to deploy the application and apply a Kustomize configuration
    to the application:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将配置 Flux 来部署该应用程序，并向应用程序应用 Kustomize 配置：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we’ll push the changes to our repo:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将推送更改到我们的仓库：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can seeing this being applied by using the Flux CLI:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Flux CLI 看到这些变化正在应用中：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see the following output:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can see the resources have been deployed to our cluster:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到资源已经部署到我们的集群中：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Any changes made to the podinfo Kubernetes manifests in the main branch are
    now reflected in your cluster automatically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 主分支中对 podinfo Kubernetes 清单所做的任何更改现在都会自动反映在您的集群中。
- en: We have now set up Flux in our cluster, bootstrapped it to a Git repository,
    and configured Flux to deploy an application. We can now start to use Flux to
    manage our cluster.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在我们的集群中设置了 Flux，并将其引导到一个 Git 仓库，并配置 Flux 来部署一个应用程序。现在我们可以开始使用 Flux 来管理我们的集群。
- en: This is a very basic example of how to get Flux set up, and if you want a deeper
    dive into Flux, you can check out the [Flux documentation](https://oreil.ly/F5D2p).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何设置 Flux 的一个非常基本的示例，如果您想深入了解 Flux，请查阅 [Flux 文档](https://oreil.ly/F5D2p)。
- en: GitOps Tooling
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 工具
- en: Many different tools can be used to implement GitOps in your cluster. In this
    section, we will go over some of the most popular.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不同的工具可以用来在您的集群中实施 GitOps。在本节中，我们将介绍一些最受欢迎的工具。
- en: 'When evaluating tools for GitOps, you should consider ease of use, enterprise
    features, and extensibility. Listed next are both open source and commercial tools
    that can be used to implement GitOps in your cluster:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估用于 GitOps 的工具时，您应考虑易用性、企业特性和可扩展性。以下是可用于在您的集群中实施 GitOps 的开源和商业工具：
- en: Flux
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Flux
- en: Flux is a Kubernetes operator that watches your Git repository for changes and
    automatically applies those changes to your cluster. Flux is a mature tool for
    implementing GitOps in your cluster. Weaveworks also provides a hosted version
    of Flux. Flux is currently a CNCF graduated project.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 是一个 Kubernetes 操作器，用于监视您的 Git 仓库的变更，并自动将这些变更应用到您的集群中。Flux 是在您的集群中实施 GitOps
    的成熟工具。Weaveworks 也提供了 Flux 的托管版本。Flux 目前是 CNCF 的毕业项目。
- en: ArgoCD
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ArgoCD
- en: Argo CD is an open source GitOps continuous delivery tool. It monitors your
    cluster and your declaratively defined infrastructure stored in a Git repository
    and resolves differences between the two—effectively automating an application
    deployment. ArgoCD is currently a CNCF graduated project.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Argo CD 是一个开源的 GitOps 连续交付工具。它监控您的集群和存储在 Git 仓库中声明性定义的基础设施，并解决两者之间的差异，从而自动化应用部署。ArgoCD
    目前是 CNCF 的毕业项目。
- en: Codefresh
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Codefresh
- en: Codefresh is a CI/CD platform that can be used to implement GitOps in your cluster.
    Codefresh provides a hosted platform that provides ArgoCD as a service.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Codefresh 是一个可以用于在您的集群中实施 GitOps 的 CI/CD 平台。Codefresh 提供了一个托管平台，提供 ArgoCD 作为服务。
- en: Harness
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Harness
- en: Harness is a CI/CD platform that can be used to implement GitOps in your cluster.
    Harness is a mature tool for implementing GitOps in your cluster and provides
    a hosted version. Harness is geared toward enterprise customers and provides a
    full suite of continuous delivery features.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Harness 是一个可以用于在您的集群中实施 GitOps 的 CI/CD 平台。Harness 是一个成熟的工具，适用于在您的集群中实施 GitOps，并提供托管版本。Harness
    面向企业客户，提供了完整的持续交付功能套件。
- en: GitOps Best Practices
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 最佳实践
- en: 'Consider the following best practices when using GitOps with Kubernetes:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 进行 GitOps 时，请考虑以下最佳实践：
- en: Start with a small application and then scale your efforts for managing everything
    with a GitOps model. This will allow you to build confidence in your GitOps implementation.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个小应用开始，然后扩展您的努力来管理所有东西的 GitOps 模型。这将使您对 GitOps 实现建立信心。
- en: Evaluate tools that fit your requirements or start with proven OSS tools like
    Flux or ArgoCD.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估符合您需求的工具，或者从像 Flux 或 ArgoCD 这样经过验证的 OSS 工具开始。
- en: Avoid using branches for your repository layout, as this is the most complex
    and error-prone repository layout.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免为您的仓库布局使用分支，因为这是最复杂和容易出错的仓库布局。
- en: Start with a folder per environment, as this provides flexibility and allows
    you to use tools like Kustomize or Helm for templating.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从每个环境一个文件夹开始，这提供了灵活性，并允许您使用 Kustomize 或 Helm 等模板工具。
- en: Utilize Sealed Secrets or an external secrets provider to manage secrets in
    your cluster.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 Sealed Secrets 或外部机密提供者来管理集群中的机密信息。
- en: Remember GitOps is a process and not a tool, and your existing tool set may
    fit your needs.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住，GitOps 是一种过程，而不是一种工具，您现有的工具集可能已经满足您的需求。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went over what GitOps is and how it can be used to manage
    your Kubernetes cluster. We also went over some of the tools that can be used
    to implement GitOps in your cluster. When looking to see if GitOps is right for
    you, you should consider what problems you are trying to solve and what your requirements
    are. If GitOps help solves these problems for you, then looking at a tool like
    Flux or ArgoCD is a good place to start.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了什么是 GitOps，以及如何使用它来管理您的 Kubernetes 集群。我们还介绍了一些可以用来在您的集群中实施 GitOps
    的工具。当您考虑是否适合使用 GitOps 时，应考虑您试图解决的问题和您的需求。如果 GitOps 能够帮助您解决这些问题，那么从 Flux 或 ArgoCD
    这样的工具开始是个不错的选择。
