["```\n$ git clone git@github.com:<USERNAME>/distnode-deploy.git\n$ cd distnode-deploy\n```", "```\n$ npm init -y\n$ npm install fastify@3.2\n```", "```\n#!/usr/bin/env node\n\n// npm install fastify@3.2\nconst server = require('fastify')();\nconst HOST = process.env.HOST || '127.0.0.1';\nconst PORT = process.env.PORT || 8000;\nconst Recipe = require('./recipe.js');\n\nserver.get('/', async (req, reply) => {\n  return \"Hello from Distributed Node.js!\";\n});\nserver.get('/recipes/:id', async (req, reply) => {\n  const recipe = new Recipe(req.params.id);\n  await recipe.hydrate();\n  return recipe;\n});\n\nserver.listen(PORT, HOST, (err, host) => {\n  console.log(`Server running at ${host}`);\n});\n```", "```\nmodule.exports = class Recipe {\n  constructor(id) {\n    this.id = Number(id);\n    this.name = null;\n  }\n  async hydrate() { // Pretend DB Lookup\n    this.name = `Recipe: #${this.id}`;\n  }\n  toJSON() {\n    return { id: this.id, name: this.name };\n  }\n};\n```", "```\n\"scripts\": {\n  \"test\": \"echo \\\"Fake Tests\\\" && exit 0\"\n},\n```", "```\nlanguage: node_js\nnode_js: ![1](assets/1.png)\n  - \"14\"\ninstall: ![2](assets/2.png)\n  - npm install\nscript: ![3](assets/3.png)\n  - PORT=0 npm test\n```", "```\n$ git add .\n$ git commit -m \"Application files\"\n$ git push\n```", "```\n\"scripts\": {\n  \"test\": \"echo \\\"Fake Tests\\\" && exit 1\"\n},\n```", "```\n$ git checkout -b feature-1\n$ git add .\n$ git commit -m \"Causing a failure\"\n$ git push --set-upstream origin feature-1\n```", "```\n$ npm test\n> distnode-deploy@1.0.0 test /home/travis/build/tlhunter/distnode-deploy\n> echo \"Fake Tests\" && exit 1\nFake Tests\nnpm ERR! Test failed.  See above for more details.\nThe command \"npm test\" exited with 1.\n```", "```\n$ mkdir test\n$ npm install --save-dev tape@5\n```", "```\n\"scripts\": {\n  \"test\": \"tape ./test/**/*.js\"\n},\n```", "```\n#!/usr/bin/env node \n// npm install -D tape@5 const test = require('tape');\nconst Recipe = require('../recipe.js'); ![1](assets/1.png)\n\ntest('Recipe#hydrate()', async (t) => { ![2](assets/2.png)\n  const r = new Recipe(42);\n  await r.hydrate();\n  t.equal(r.name, 'Recipe: #42', 'name equality'); ![3](assets/3.png)\n});\n\ntest('Recipe#serialize()', (t) => {\n  const r = new Recipe(17);\n  t.deepLooseEqual(r, { id: 17, name: null }, 'serializes properly');\n  t.end(); ![4](assets/4.png)\n});\n```", "```\n$ npm test ; echo \"STATUS: $?\"\n```", "```\nTAP version 13\n# Recipe#hydrate()\nok 1 name equality\n# Recipe#serialize()\nok 2 serializes properly\n\n1..2\n# tests 2\n# pass  2\n\n# ok\n\nSTATUS: 0\n```", "```\n$ npm install --save-dev node-fetch@2.6\n```", "```\n#!/usr/bin/env node \n// npm install --save-dev tape@5 node-fetch@2.6 const { spawn } = require('child_process');\nconst test = require('tape');\nconst fetch = require('node-fetch');\n\nconst serverStart = () => new Promise((resolve, _reject) => {\n  const server = spawn('node', ['../server.js'], ![1](assets/1.png)\n    { env: Object.assign({}, process.env, { PORT: 0 }),\n      cwd: __dirname });\n  server.stdout.once('data', async (data) => {\n    const message = data.toString().trim();\n    const url = /Server running at (.+)$/.exec(message)[1];\n    resolve({ server, url }); ![2](assets/2.png)\n  });\n});\n\ntest('GET /recipes/42', async (t) => {\n  const { server, url } = await serverStart();\n  const result = await fetch(`${url}/recipes/42`);\n  const body = await result.json();\n  t.equal(body.id, 42);\n  server.kill(); ![3](assets/3.png)\n});\n```", "```\n$ npm test ; echo \"STATUS: $?\"\n```", "```\nTAP version 13\n# GET /recipes/42\nok 1 should be equal\n# Recipe#hydrate()\nok 2 name equality\n# Recipe#serialize()\nok 3 serializes properly\n```", "```\n// Application code: foo-router.js\n// GET http://host/resource?foo[bar]=1\nmodule.exports.fooHandler = async (req, _reply) => {\n  const foobar = req.query.foo.bar;\n  return foobar + 1;\n}\n// Test code: test.js\nconst router = require('foo-router.js');\ntest('#fooHandler()', async (t) => {\n  const foobar = await router.fooHandler({\n    foo: { bar: 1 }\n  });\n  t.strictEqual(foobar, 2);\n});\n```", "```\n$ npm install --save-dev nyc@15\n```", "```\n\"scripts\": {\n  \"test\": \"nyc tape ./test/*.js\"\n},\n```", "```\n{\n  \"reporter\": [\"lcov\", \"text-summary\"],\n  \"all\": true,\n  \"check-coverage\": true,\n  \"branches\": 100,\n  \"lines\": 100,\n  \"functions\": 100,\n  \"statements\": 100\n}\n```", "```\n$ npm test ; echo \"STATUS: $?\"\n```", "```\nERROR: Coverage for lines (94.12%) ...\nERROR: Coverage for functions (83.33%) ...\nERROR: Coverage for branches (75%) ...\nERROR: Coverage for statements (94.12%) ...\n=========== Coverage summary ===========\nStatements   : 94.12% ( 16/17 )\nBranches     : 75% ( 3/4 )\nFunctions    : 83.33% ( 5/6 )\nLines        : 94.12% ( 16/17 )\n========================================\nSTATUS: 1\n```", "```\ntest('GET /', async (t) => {\n  const { server, url } = await serverStart();\n  const result = await fetch(`${url}/`);\n  const body = await result.text();\n  t.equal(body, 'Hello from Distributed Node.js!');\n  server.kill();\n});\n```", "```\n/* istanbul ignore next */\n```", "```\n$ npm test ; echo \"STATUS: $?\"\n```", "```\n$ git add .\n$ git commit -m \"Adding a test suite and code coverage\"\n$ git push\n```", "```\n$ git checkout master\n$ git pull\n```", "```\nhttps://<USERNAME>-distnode.herokuapp.com/\n```", "```\n$ git checkout master\n```", "```\n### macOS\n$ brew install travis\n\n### Debian / Ubuntu Linux\n$ ruby --version # `sudo apt install ruby` if you don't have Ruby\n$ sudo apt-get install ruby2.7-dev # depending on Ruby version\n$ sudo gem install travis\n```", "```\n$ travis login --pro --auto-token\n$ travis encrypt --pro HEROKU_API_KEY=<YOUR_HEROKU_API_KEY>\n```", "```\ndeploy:\n  provider: script\n  script: bash deploy-heroku.sh ![1](assets/1.png)\n  on:\n    branch: master ![2](assets/2.png)\nenv: ![3](assets/3.png)\n  global:\n```", "```\nenv:\n  global:\n    - secure: \"LONG STRING HERE\"\n```", "```\nFROM node:14.8.0-alpine3.12\nWORKDIR /srv\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nENV HOST=0.0.0.0\nCMD [ \"node\", \"server.js\" ]\n```", "```\n#!/bin/bash\nwget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh\nheroku plugins:install @heroku-cli/plugin-container-registry\nheroku container:login\nheroku container:push web --app <USERNAME>-distnode\nheroku container:release web --app <USERNAME>-distnode\n```", "```\n$ git add .\n$ git commit -m \"Enabling Heroku deployment\"\n$ git push\n```", "```\nReleasing images web to <USERNAME>-distnode... done\n```", "```\nhttps://<USERNAME>-distnode.herokuapp.com/\n```", "```\n(function(exports, require, module, __filename, __dirname) {\n// File contents go here\n});\n```", "```\n\"dependencies\": {\n  \"fastify\": \"^2.11.0\",\n  \"ioredis\": \"~4.14.1\",\n  \"pg\": \"7.17.1\"\n}\n```", "```\nmodule.exports = class Widget {\n  getName() {\n    return this.name;\n  }\n  setName(name) {\n    this.name = name;\n  }\n  nameLength() {\n    return this.name.length;\n  }\n}\n```", "```\nsetName(name) {\n  this.name = String(name);\n}\n```", "```\nhasName() {\n  return !!this.name;\n}\n```", "```\n$ mkdir leftish-padder && cd leftish-padder\n$ npm init\n# set version to: 0.1.0\n$ touch index.js README.md foo.js bar.js baz.js\n$ mkdir test && touch test/index.js\n$ npm install --save express@4.17.1\n$ dd if=/dev/urandom bs=1048576 count=1 of=screenshot.bin\n$ dd if=/dev/urandom bs=1048576 count=1 of=temp.bin\n```", "```\nnode_modules\ntemp.bin\npackage-lock.json\n```", "```\ntemp.bin\nscreenshot.bin\ntest\n```", "```\nnode_modules/\n  foo/ (1.0.0)\n  bar/ (2.0.0)\n    node_modules/\n      foo/ (1.0.0)\n```", "```\nnode_modules/\n  foo/ (1.0.0)\n  bar/ (2.0.0)\n```", "```\nnode_modules/\n  foo/ (1.0.0)\n  bar/ (2.0.0)\n    node_modules/\n      foo/ (2.0.0)\n```", "```\naccepts              array-flatten  body-parser  bytes\ncontent-disposition  content-type   cookie       cookie-signature\ndebug                depd           destroy      ee-first\n```", "```\nleftish-padder@0.1.0\n└─┬ express@4.17.1\n  ├─┬ accepts@1.3.7\n  │ └─ ...TRUNCATED...\n  ├─┬ body-parser@1.19.0\n  │ ├── bytes@3.1.0\n  │ ├── content-type@1.0.4 deduped\n  ├ ... TRUNCATED ...\n  ├── content-type@1.0.4\n```", "```\n$ docker run -it --rm \\\n  --name verdaccio \\\n  -p 4873:4873 \\\n  verdaccio/verdaccio:4.8\n```", "```\nhttp://localhost:4873/\n```", "```\n$ npm set registry http://localhost:4873\n$ npm adduser --registry http://localhost:4873\n```", "```\n$ cd leftish-padder\n$ npm publish --registry http://localhost:4873\n```", "```\n+ leftish-padder@0.1.0\n```", "```\nmodule.exports = (s, p, c = ' ') => String(s).padStart(p, c);\n```", "```\n$ npm verson patch\n$ npm publish --registry http://localhost:4873\n```", "```\n\"name\": \"@tlhunter/leftish-padder\",\n```", "```\n$ mkdir sample-app && cd sample-app\n$ npm init -y\n$ npm install @<SCOPE>/leftish-padder\n$ echo \"console.log(require('@<SCOPE>/leftish-padder')(10, 4, 0));\" \\\n  > app.js\n$ node app.js\n```", "```\n$ npm config delete registry\n```"]