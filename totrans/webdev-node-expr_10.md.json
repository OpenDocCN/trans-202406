["```\napp.use((req, res, next) => {\n  console.log(`processing request for ${req.url}....`)\n  next()\n})\n\napp.use((req, res, next) => {\n  console.log('terminating request')\n  res.send('thanks for playing!')\n  // note that we do NOT call next() here...this terminates the request\n})\n\napp.use((req, res, next) => {\n  console.log(`whoops, i'll never get called!`)\n})\n```", "```\nconst express = require('express')\nconst app = express()\n\napp.use((req, res, next) => {\n  console.log('\\n\\nALLWAYS')\n  next()\n})\n\napp.get('/a', (req, res) => {\n  console.log('/a: route terminated')\n  res.send('a')\n})\napp.get('/a', (req, res) => {\n  console.log('/a: never called');\n})\napp.get('/b', (req, res, next) => {\n  console.log('/b: route not terminated')\n  next()\n})\napp.use((req, res, next) => {\n  console.log('SOMETIMES')\n  next()\n})\napp.get('/b', (req, res, next) => {\n  console.log('/b (part 2): error thrown' )\n  throw new Error('b failed')\n})\napp.use('/b', (err, req, res, next) => {\n  console.log('/b error detected and passed on')\n  next(err)\n})\napp.get('/c', (err, req) => {\n  console.log('/c: error thrown')\n  throw new Error('c failed')\n})\napp.use('/c', (err, req, res, next) => {\n  console.log('/c: error detected but not passed on')\n  next()\n})\n\napp.use((err, req, res, next) => {\n  console.log('unhandled error detected: ' + err.message)\n  res.send('500 - server error')\n})\n\napp.use((req, res) => {\n  console.log('route not handled')\n  res.send('404 - not found')\n})\n\nconst port = process.env.PORT || 3000\napp.listen(port, () => console.log( `Express started on http://localhost:${port}` +\n  '; press Ctrl-C to terminate.'))\n```", "```\napp.use(express.static)         // this will NOT work as expected\n\nconsole.log(express.static())   // will log \"function\", indicating\n                                // that express.static is a function\n                                // that itself returns a function\n```", "```\nmodule.exports = (req,res,next) => {\n  const { cart } = req.session\n  if(!cart) return next()\n  if(cart.items.some(item => item.product.requiresWaiver)) {\n    cart.warnings.push('One or more of your selected ' +\n      'tours requires a waiver.')\n  }\n  next()\n}\n```", "```\nconst requiresWaiver = require('./lib/tourRequiresWaiver')\napp.use(requiresWaiver)\n```", "```\nmodule.exports = {\n\n  resetValidation(req, res, next) {\n    const { cart } = req.session\n    if(cart) cart.warnings = cart.errors = []\n    next()\n  },\n\n  checkWaivers(req, res, next) {\n    const { cart } = req.session\n    if(!cart) return next()\n    if(cart.items.some(item => item.product.requiresWaiver)) {\n      cart.warnings.push('One or more of your selected ' +\n        'tours requires a waiver.')\n    }\n    next()\n  },\n\n  checkGuestCounts(req, res, next) {\n    const { cart } = req.session\n    if(!cart) return next()\n    if(cart.items.some(item => item.guests > item.product.maxGuests )) {\n      cart.errors.push('One or more of your selected tours ' +\n        'cannot accommodate the number of guests you ' +\n        'have selected.')\n    }\n    next()\n  },\n\n}\n```", "```\nconst cartValidation = require('./lib/cartValidation')\n\napp.use(cartValidation.resetValidation)\napp.use(cartValidation.checkWaivers)\napp.use(cartValidation.checkGuestCounts)\n```"]