- en: Chapter 10\. Configuring and Running Falco
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章 配置和运行 Falco
- en: In the previous chapter, you learned how to install Falco in production environments.
    However, you still need to know how its configuration system works. Learning to
    change its settings is fundamental to managing them over time and accommodating
    your needs. You can configure Falco during or immediately after installation,
    when updating to a newer version, or any time your needs change.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，您学习了如何在生产环境中安装 Falco。然而，您仍需了解其配置系统的工作方式。学习如何更改其设置对于随时间管理和适应您的需求至关重要。您可以在安装期间或安装后立即配置
    Falco，在更新到新版本时或任何时候根据您的需求进行配置。
- en: 'This chapter will help you understand and use the available settings. First,
    we’ll explain the main areas of intervention: command-line options, environment
    variables, the configuration file, and rules files. Then we will go deeper into
    each of them. You will also find valuable suggestions for production use cases,
    along with some tips to fine-tune your Falco configuration. At the end of the
    chapter you’ll find a dedicated section on configuring plugins, and we’ll show
    you how to update the configuration of a running Falco instance.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您理解和使用可用的设置。首先，我们将解释主要的干预领域：命令行选项、环境变量、配置文件和规则文件。然后，我们将深入探讨每一个。您还将找到关于生产用例的宝贵建议，以及一些微调
    Falco 配置的提示。在章节末尾，您将找到一个专门介绍配置插件的部分，并展示如何更新运行中的 Falco 实例配置。
- en: Configuring Falco
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Falco
- en: 'You can configure Falco through its settings, which we have grouped into three
    categories:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过其设置来配置 Falco，我们将这些设置分为三类：
- en: Command-line options and environment variables
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行选项和环境变量
- en: Command-line options and environment variables are the first settings you need
    to run Falco. Most of these settings allow Falco to talk with your system, which
    is particularly important for system instrumentation and data enrichment. Other
    settings here let you adapt Falco to specific needs or help with troubleshooting.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行选项和环境变量是您运行 Falco 所需的首要设置。其中大多数设置允许 Falco 与您的系统进行通信，这对于系统仪表化和数据丰富化特别重要。这里的其他设置可以帮助您适应特定需求或帮助故障排除。
- en: Configuration file
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件
- en: You can configure almost any Falco behavior from within the main configuration
    file, which you can customize according to your needs. For instance, you can load
    rules files, activate the output channels you want, and use plugins if you need
    to. By default Falco looks for this file at */etc/falco/falco.yaml*, but you can
    specify a different path using a command-line option.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过主配置文件几乎配置任何 Falco 行为，根据需要进行自定义。例如，您可以加载规则文件，激活所需的输出通道，并在需要时使用插件。默认情况下，Falco
    在 */etc/falco/falco.yaml* 中查找此文件，但您可以使用命令行选项指定不同的路径。
- en: Ruleset
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 规则集
- en: Falco comes with a rich default ruleset so that you can start to use it immediately.
    However, the ruleset is perhaps the most critical aspect to customize. It represents
    the configuration of the Falco engine and sets what Falco will detect. By convention,
    rules files live in */etc/falco*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 自带丰富的默认规则集，以便您可以立即开始使用它。然而，规则集可能是定制化最关键的方面。它代表了 Falco 引擎的配置，并设置了 Falco
    将检测到的内容。按照惯例，规则文件位于 */etc/falco*。
- en: Before we address each category in detail, we want to show you how Falco changes
    depending on how you install it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细讨论每个类别之前，我们想向您展示 Falco 如何根据您的安装方式进行变化。
- en: Differences Among Installation Methods
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装方法之间的差异
- en: Regardless of the installation method you choose, Falco’s configuration areas
    will always be the same. However, the ways you can change the settings may be
    slightly different.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪种安装方法，Falco 的配置区域始终相同。但是，您可以更改设置的方式可能略有不同。
- en: Host Installation
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机安装
- en: If you installed Falco using a package manager, you can specify the command-line
    options and environment variables directly in the systemd unit file, which you
    can find at */usr/lib/systemd/user/falco.service*. Using `systemctl edit falco`
    is a convenient way to do that. When you’re finished, remember to restart the
    service with `systemctl restart falco`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用软件包管理器安装了 Falco，则可以直接在 systemd 单元文件中指定命令行选项和环境变量，该文件位于 */usr/lib/systemd/user/falco.service*。使用
    `systemctl edit falco` 是一种方便的方法。完成后，请记得使用 `systemctl restart falco` 重新启动服务。
- en: If you are not using a package manager, running Falco is entirely up to you,
    including passing command-line options and setting the environment variables.
    In such a case, you can manually create a systemd unit. You can use the [*falco-service*
    file’s source code](https://oreil.ly/0LcF3) as an example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用包管理器，运行 Falco 完全由您决定，包括传递命令行选项和设置环境变量。在这种情况下，您可以手动创建一个 systemd 单元。您可以使用
    [*falco-service* 文件的源代码](https://oreil.ly/0LcF3) 作为示例。
- en: Regardless of the package you use, you’ll find Falco’s configuration and rules
    files under */etc/falco.* You can edit those files directly and then restart Falco.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用哪个包，您都会在 */etc/falco* 下找到 Falco 的配置文件和规则文件。您可以直接编辑这些文件，然后重新启动 Falco。
- en: Containers
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: 'Falco’s container images allow you to specify the command to run, which by
    default is `/usr/bin/falco`. If you need to pass command-line options, do so through
    the CLI of your container runtime. For example, with Docker, to pass `--version`,
    you would use:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 的容器镜像允许您指定要运行的命令，默认为 `/usr/bin/falco`。如果需要传递命令行选项，请通过容器运行时的 CLI 进行。例如，在
    Docker 中，要传递 `--version`，可以使用：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that the *falcosecurity/falco* container image’s entry point is a script
    that tries to install the driver automatically. If you want to skip the installation,
    you need to set the `SKIP_DRIVER_LOADER` environment variable to any nonempty
    value. In Docker, you can use the `-e` option to set an environment variable.^([1](ch10.xhtml#ch01fn11))
    So, for example, to get the version and skip the driver installation at the same
    time, you would run:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*falcosecurity/falco* 容器镜像的入口点是一个脚本，尝试自动安装驱动程序。如果要跳过安装，需要将 `SKIP_DRIVER_LOADER`
    环境变量设置为任何非空值。在 Docker 中，可以使用 `-e` 选项设置环境变量。^([1](ch10.xhtml#ch01fn11)) 例如，要获取版本并同时跳过驱动程序安装，可以运行：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Falco container images also bundle both the default configuration file and the
    default rules files. If you need to modify any of these, the usual approach is
    to make an external copy of the file (for example, */etc/falco/falco.yaml*) and
    then mount it into the container. You can grab the configuration and rules files
    from the binary package (make sure it matches the version of Falco running in
    the container) and modify them according to your needs. Then, in Docker, use the
    `-v` option to mount the modified files into the container.^([2](ch10.xhtml#ch01fn12))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 容器镜像还捆绑了默认的配置文件和规则文件。如果需要修改其中任何文件，通常的做法是制作文件的外部副本（例如，*/etc/falco/falco.yaml*），然后挂载到容器中。您可以从二进制包中获取配置和规则文件（确保与容器中运行的
    Falco 版本匹配），根据需要进行修改。然后，在 Docker 中，使用 `-v` 选项将修改后的文件挂载到容器中。^([2](ch10.xhtml#ch01fn12))
- en: Kubernetes Deployments
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 部署
- en: When you deploy Falco in Kubernetes, you’ll also specify command-line options
    and environment variables in the DaemonSet or the Deployment manifest. If you
    use Helm or the example manifests from [Chapter 9](ch09.xhtml#installing_falco),
    the deployment will already be configured with all the options to connect to your
    container runtime and the Kubernetes API server. If you need to modify an option,
    find the corresponding [Falco chart configuration](https://oreil.ly/9CsSk) or
    modify the [manifest](https://oreil.ly/L6rs9) directly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中部署 Falco 时，还需在 DaemonSet 或 Deployment 清单中指定命令行选项和环境变量。如果使用 Helm
    或来自 [第 9 章](ch09.xhtml#installing_falco) 的示例清单，部署将已经配置了连接到您的容器运行时和 Kubernetes
    API 服务器的所有选项。如果需要修改选项，请查找相应的 [Falco 图表配置](https://oreil.ly/9CsSk) 或直接修改 [清单](https://oreil.ly/L6rs9)。
- en: Another important difference is that configuration and rules files live inside
    a ConfigMap whose contents shadow those shipped within the container image. For
    Helm users, the maintainers update Falco’s chart and configuration and rules files
    in sync with the Falco distribution. On the other hand, if you are using manifest
    files, it’s completely up to you to ensure the ConfigMap embeds the right files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的区别是配置和规则文件存储在 ConfigMap 内，其内容会覆盖容器镜像中包含的文件。对于 Helm 用户，维护者会将 Falco 的图表、配置和规则文件与
    Falco 发行版同步更新。另一方面，如果使用清单文件，您完全可以确保 ConfigMap 嵌入了正确的文件。
- en: Command-Line Options and Environment Variables
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行选项和环境变量
- en: When running Falco, specifying a command-line option or setting an environment
    variable is sometimes the only way to change some of the settings. Settings you
    configure via the command line always take precedence over settings loaded from
    the configuration file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Falco 时，有时通过命令行选项或设置环境变量是更改某些设置的唯一方式。您通过命令行配置的设置始终优先于从配置文件加载的设置。
- en: You can get the full list of Falco’s command-line options by running `falco
    --help`. Falco will print each option (along with a brief description) in alphabetical
    order. The available options may change depending on the Falco version. Always
    refer to `falco --help` when in doubt.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 Falco 的命令行选项完整列表，请运行 `falco --help`。Falco 将按字母顺序打印每个选项（以及简要描述）。可用选项可能根据
    Falco 版本的不同而变化。有疑问时，请始终参考 `falco --help`。
- en: In the rest of this section, to help familiarize you with the most important
    settings, we group them by function. We also provide detailed information about
    using environment variables, which you will not find in `falco --help`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的其余部分，为了帮助您熟悉最重要的设置，我们按功能对其进行分组。我们还提供了关于使用环境变量的详细信息，这些信息在 `falco --help`
    中找不到。
- en: Configuration Settings
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置设置
- en: The two command-line options shown in [Table 10-1](#configuration_command_line_options)
    pertain to Falco’s configuration file (located by default at */etc/falco/falco.yaml*).
    The first one allows you to load a configuration file from a different location;
    the second allows you to override some configuration values on the fly. You won’t
    usually need to use them, but they can be handy when troubleshooting. Also, when
    running Falco in production, ensure nobody sets them by mistake so that Falco
    uses the correct configuration file and the intended settings.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [表 10-1](#configuration_command_line_options) 中显示的两个命令行选项与 Falco 的配置文件相关（默认位于
    */etc/falco/falco.yaml*）。第一个选项允许您从不同位置加载配置文件；第二个选项允许您即时覆盖某些配置值。通常情况下不需要使用它们，但在故障排除时可能会很有用。此外，在生产环境中运行
    Falco 时，请确保没有人错误地设置它们，以便 Falco 使用正确的配置文件和预期的设置。
- en: Table 10-1\. Configuration command-line options
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-1\. 配置命令行选项
- en: '| Option | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-c` | Sets the path to the configuration file Falco will load. If this is
    not set, Falco uses the default path: */etc/falco/falco.yaml*. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `-c` | 设置 Falco 将加载的配置文件路径。如果未设置，则 Falco 将使用默认路径： */etc/falco/falco.yaml*。
    |'
- en: '| `-o`, `--option *<key>*=*<val>*` | Overrides a value in the configuration
    file by setting the value `*<val>*` to the configuration option specified by `*<key>*`.
    You can use dot notation (`.`) to specify nested options or square brackets notation
    (`[]`) to access lists: for example, `-o key.subkey.list[0]=myValue`. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `-o`, `--option *<key>*=*<val>*` | 通过将值 `*<val>*` 设置为指定的配置选项 `*<key>*` 来覆盖配置文件中的值。您可以使用点表示法（`.`）指定嵌套选项，或使用方括号表示法（`[]`）访问列表：例如，`-o
    key.subkey.list[0]=myValue`。 |'
- en: Instrumentation Settings (Syscalls Only)
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表设置（仅系统调用）
- en: 'As you learned in Chapters [4](ch04.xhtml#data_source) and [9](ch09.xhtml#installing_falco),
    Falco uses the kernel module driver by default. You can switch to the eBPF probe
    by setting the `FALCO_BPF_PROBE` environment variable. You can set it to the path
    of the probe you want to use: for example, `FALCO_BPF_PROBE="/path/to/falco-bpf.o"`.
    Otherwise, you can set it to an empty string (`FALCO_BPF_PROBE=""`) and Falco
    will use *~/.falco/falco-bpf.o* by default.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在第 [4](ch04.xhtml#data_source) 和 [9](ch09.xhtml#installing_falco) 章节中学到的，Falco
    默认使用内核模块驱动程序。您可以通过设置 `FALCO_BPF_PROBE` 环境变量切换到 eBPF 探针。您可以将其设置为您想使用的探针路径，例如 `FALCO_BPF_PROBE="/path/to/falco-bpf.o"`。否则，您可以将其设置为空字符串（`FALCO_BPF_PROBE=""`），Falco
    将默认使用 *~/.falco/falco-bpf.o*。
- en: 'When you run Falco in a container or Kubernetes, the container image supports
    `FALCO_BPF_PROBE` to control the on-the-fly driver installation, along with other
    environment variables. (The *falco-driver-loader* script exposes most of them,
    so you can also use `falco-driver-loader --help` to get more information.) Let’s
    look at those environment variables now:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在容器或 Kubernetes 中运行 Falco 时，容器镜像支持 `FALCO_BPF_PROBE` 控制即时驱动程序安装，以及其他环境变量。
    （*falco-driver-loader* 脚本暴露了大部分，因此您也可以使用 `falco-driver-loader --help` 获取更多信息。）现在让我们看看这些环境变量：
- en: '`DRIVERS_REPO`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`DRIVERS_REPO`'
- en: 'If you create a repository of prebuilt drivers (either kernel modules or eBPF
    probes), you can use this option to instruct the script to download a driver from
    your repository. A driver repository hosts files with the following URL structure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建了预构建驱动程序的存储库（无论是内核模块还是 eBPF 探针），可以使用此选项指示脚本从您的存储库下载驱动程序。驱动程序存储库以以下 URL
    结构托管文件：
- en: '*<DRIVERS_REPO>/<DRIVER_VERSION>/falco_<OS_ID>​_<KER⁠NEL_RELEASE>_<KERNEL_VERSION>.[ko|o]*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*<DRIVERS_REPO>/<DRIVER_VERSION>/falco_<OS_ID>​_<KER⁠NEL_RELEASE>_<KERNEL_VERSION>.[ko|o]*'
- en: This variable allows you to set the base URL of your repository (with no trailing
    slash). You may want to use this setting if you are running Falco in an air-gapped
    environment or if you don’t want to download prebuilt drivers from the internet.
    If not set, this variable defaults to The Falco Project’s [public driver repository](https://oreil.ly/vsE8X).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量允许您设置您存储库的基本 URL（末尾没有斜杠）。如果您在离线环境中运行 Falco 或者不希望从互联网下载预构建的驱动程序，可能希望使用此设置。如果未设置，此变量默认为
    The Falco Project 的 [public driver repository](https://oreil.ly/vsE8X)。
- en: '`DRIVER_INSECURE_DOWNLOAD`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`DRIVER_INSECURE_DOWNLOAD`'
- en: If your driver repository does not support HTTPS, set it to any value (for example,
    `yes`) to allow the script to download files from insecure URLs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的驱动程序存储库不支持 HTTPS，请将其设置为任何值（例如 `yes`），以允许脚本从不安全的 URL 下载文件。
- en: '`SKIP_DRIVER_LOADER`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`SKIP_DRIVER_LOADER`'
- en: If you installed the driver on the host by other means, you’ll likely want to
    disable the *falco-driver-loader* script when the container starts. In that case,
    set this environment variable to any value (for example, `yes`). This setting
    only affects Falco container images that use *falco-driver-loader* in the entry
    point, like the *falcosecurity/falco* container image.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过其他方式在主机上安装了驱动程序，很可能希望在容器启动时禁用 *falco-driver-loader* 脚本。在这种情况下，请将此环境变量设置为任何值（例如
    `yes`）。此设置仅影响使用 *falco-driver-loader* 作为入口点的 Falco 容器镜像，例如 *falcosecurity/falco*
    容器镜像。
- en: '`HOST_ROOT`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`HOST_ROOT`'
- en: This environment variable differs from the others listed here in that it’s not
    related to the driver installation and directly affects Falco. `HOST_ROOT` expects
    a base path and affects the instrumentation setup and enrichment system. If the
    value is not empty, Falco uses it as a path prefix when it accesses the host’s
    filesystem to use the kernel module devices (under */dev*) or to fetch information
    for data enrichment (in particular from */proc* and the container runtime Unix
    socket path). The *falco-driver-loader* script uses this variable for similar
    purposes (for example, to access */boot*, */lib*, */usr*, and */etc*).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个环境变量与这里列出的其他环境变量不同，它与驱动程序安装无关，直接影响 Falco。`HOST_ROOT` 期望一个基本路径，影响仪表盘的设置和增强系统。如果该值不为空，Falco
    在访问主机文件系统时会将其用作路径前缀（例如 */dev* 下的内核模块设备或从 */proc* 和容器运行时 Unix 套接字路径中获取数据增强的信息）。*falco-driver-loader*
    脚本也会为类似的目的使用这个变量（例如，访问 */boot*、*/lib*、*/usr* 和 */etc*）。
- en: Use `HOST_ROOT` when running Falco in a container. The usual convention is to
    set `HOST_ROOT=/host` and mount all the relevant paths into the container under
    the */host* directory. Kubernetes deployment uses this approach; see Chapters
    [5](ch05.xhtml#data_enrichment) and [9](ch09.xhtml#installing_falco) for more
    details.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中运行 Falco 时，请使用 `HOST_ROOT`。通常的约定是将 `HOST_ROOT=/host` 并将所有相关路径挂载到容器中的 */host*
    目录下。Kubernetes 部署使用这种方法；详见第 [5](ch05.xhtml#data_enrichment) 章和第 [9](ch09.xhtml#installing_falco)
    章了解更多详情。
- en: For completeness, other settings related to syscall instrumentation are listed
    in [Table 10-2](#syscall_instrumentation_command_line_op). These settings have
    a significant performance impact, so don’t use them unless you need to.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，与系统调用仪表盘相关的其他设置列在 [Table 10-2](#syscall_instrumentation_command_line_op)
    中。这些设置对性能有显著影响，因此除非必要，否则不要使用它们。
- en: Table 10-2\. Syscall instrumentation command-line options
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Table 10-2\. 系统调用仪表盘命令行选项
- en: '| Option | Description |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Option | Description |'
- en: '| --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-A` | Falco does not monitor all syscalls by default, so you usually cannot
    use all event types in rule conditions (the driver skips most syscalls that are
    noisy or expensive to process, such as `read`, `write`, `send`, and `recv`). If
    you enable this setting, the driver will send all supported syscall events to
    Falco, which may be helpful in edge use cases. However, enabling this setting
    has a severe performance penalty. Falco may not be able to catch up with the event
    stream. The full list of supported syscalls is available in [*syscall_info_table.c*](https://oreil.ly/WVDRm).
    By default, the driver skips those marked with `EF_DROP_SIMPLE_CONS`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `-A` | Falco 默认不监视所有系统调用，因此通常无法在规则条件中使用所有事件类型（驱动程序跳过大多数嘈杂或处理昂贵的系统调用，如 `read`、`write`、`send`
    和 `recv`）。如果您启用此设置，驱动程序将发送所有支持的系统调用事件到 Falco，这在边缘用例中可能会有所帮助。但启用此设置会严重影响性能。Falco
    可能无法跟上事件流。支持的系统调用完整列表可在 [*syscall_info_table.c*](https://oreil.ly/WVDRm) 中找到。默认情况下，驱动程序跳过那些标记为
    `EF_DROP_SIMPLE_CONS` 的系统调用。 |'
- en: '| `-u`, `--userspace` | Use this option only when you can’t use the kernel
    space instrumentation. This option must be used with a user-space driver like
    pdig (discussed in [Chapter 4](ch04.xhtml#data_source)). |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `-u`, `--userspace` | 仅在无法使用内核空间工具时使用此选项。此选项必须与像 pdig（在 [第4章](ch04.xhtml#data_source)
    中讨论的用户空间驱动程序）一样使用。 |'
- en: Data Enrichment Settings (Syscalls Only)
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据丰富设置（仅系统调用）
- en: When using syscalls as a data source, Falco needs to connect to a driver. It
    also needs to fetch information from the host, the container runtime, and Kubernetes.
    In [Chapter 5](ch05.xhtml#data_enrichment), we talked briefly about the settings
    described in this section; [Table 10-3](#data_enrichment_command_line_options)
    provides detailed usage descriptions of command-line options and environment variables
    that affect the data enrichment mechanism.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用系统调用作为数据源时，Falco 需要连接到驱动程序。它还需要从主机、容器运行时和 Kubernetes 获取信息。在 [第5章](ch05.xhtml#data_enrichment)
    中，我们简要讨论了本节描述的设置；[表10-3](#data_enrichment_command_line_options) 提供了影响数据丰富机制的命令行选项和环境变量的详细使用说明。
- en: Table 10-3\. Data enrichment command-line options
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表10-3\. 数据丰富命令行选项
- en: '| Option | Description |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `--cri *<path>*` | Use this option to specify the path to the Unix socket
    of a CRI-compatible container runtime. If the Unix socket is valid, Falco will
    connect to the runtime to fetch the container metadata. In recent versions of
    Falco, you can specify this option multiple times. Falco will try each given path
    in order and use the first one that connects. When this option is not set, Falco
    will only try to use */run/containerd/containerd.sock*. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `--cri *<path>*` | 使用此选项指定 CRI 兼容容器运行时的 Unix 套接字路径。如果 Unix 套接字有效，Falco 将连接到运行时以获取容器元数据。在最新版本的
    Falco 中，您可以多次指定此选项。Falco 将按顺序尝试每个给定的路径，并使用第一个连接成功的路径。如果未设置此选项，Falco 将仅尝试使用 */run/containerd/containerd.sock*。
    |'
- en: '| `--disable-cri-async` | This option disables asynchronous CRI metadata fetching.
    You won’t usually need to set it. However, if Falco shows container metadata intermittently,
    this option can help you fix the issue. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `--disable-cri-async` | 此选项禁用异步 CRI 元数据获取。通常不需要设置它。但如果 Falco 间歇性显示容器元数据，则此选项可以帮助您解决问题。
    |'
- en: '| `-k *<url>*`, `--k8s-api *<url>*` | This enables Kubernetes metadata enrichment
    by connecting to the Kubernetes API server specified by `*<url>*`. Alternatively,
    you can use the `FALCO_K8S_API` environment variable, which accepts the same values
    allowed by this option. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `-k *<url>*`, `--k8s-api *<url>*` | 通过连接到由 `*<url>*` 指定的 Kubernetes API 服务器，启用
    Kubernetes 元数据丰富。或者，您可以使用 `FALCO_K8S_API` 环境变量，它接受与此选项允许的相同值。 |'
- en: '| `-K *<bt_file>* &#124; *<cert_file>*:*<key_file[#pwd]>* [:*<ca_cert_file>*]`,
    `--k8s-api-cert *<bt_file>* &#124; *<cert_file>*`:`*<key_file[#pwd]>* [:*<ca_cert_file>*]`
    | Use this option to authenticate with the Kubernetes API server. You can provide
    either a bearer token file^([a](ch10.xhtml#ch01fn13)) (`*<bt_file>*`) or a certificate
    and a private key (`*<cert_file>*`:`*<key_file>*`). If you use the latter, you
    can optionally use a passphrase (`*#pwd*`) to access the private key, if encrypted,
    and a CA certificate (`:*<ca_cert_file>*`) to verify the API server’s identity.
    Certificates and private keys must be provided in the PEM file format. As an alternative,
    you can use the `FALCO_K8S_API_CERT` environment variable, which accepts the same
    values allowed by this option. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `-K *<bt_file>* &#124; *<cert_file>*:*<key_file[#pwd]>* [:*<ca_cert_file>*]`,
    `--k8s-api-cert *<bt_file>* &#124; *<cert_file>*`:`*<key_file[#pwd]>* [:*<ca_cert_file>*]`
    | 使用此选项与 Kubernetes API 服务器进行身份验证。你可以提供一个令牌文件^([a](ch10.xhtml#ch01fn13)) (`*<bt_file>*`)
    或证书和私钥 (`*<cert_file>*`:`*<key_file>*`)。如果使用后者，你可以选择使用密码 (`*#pwd*`) 访问私钥（如果加密），以及
    CA 证书 (`:*<ca_cert_file>*`) 用于验证 API 服务器的身份。证书和私钥必须以 PEM 文件格式提供。作为替代方案，你可以使用 `FALCO_K8S_API_CERT`
    环境变量，该变量接受此选项允许的相同值。 |'
- en: '| `--k8s-node *<node_name>*` | This option enables an important performance
    optimization for Kubernetes metadata enrichment: Falco will use the node name
    as a filter when requesting metadata of Pods from the API server, discarding unnecessary
    metadata coming from other nodes. You should always set this option. If you don’t,
    Falco will work, but may have performance issues on large clusters. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `--k8s-node *<node_name>*` | 此选项启用了 Kubernetes 元数据增强的重要性能优化：Falco 在从 API
    服务器请求 Pod 的元数据时将使用节点名称作为过滤器，丢弃来自其他节点的不必要的元数据。你应该始终设置此选项。如果不设置，Falco 将工作，但在大型集群上可能存在性能问题。
    |'
- en: '| ^([a](ch10.xhtml#ch01fn13-marker)) A bearer token file contains a string
    that authenticates the API request, one of the available [authentication strategies](https://oreil.ly/nh9Qk)
    for Kubernetes. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch10.xhtml#ch01fn13-marker)) 一个持有者令牌文件包含了用于验证 API 请求的字符串，这是 Kubernetes
    的可用 [认证策略](https://oreil.ly/nh9Qk) 之一。 |'
- en: Ruleset Settings
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则集设置
- en: '[Table 10-4](#ruleset_command_line_options) shows the command-line options
    that can affect the ruleset. Falco will only use the configuration file to load
    rules if you don’t use any of these options.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 10-4](#ruleset_command_line_options) 显示了可能影响规则集的命令行选项。如果没有使用这些选项，Falco 将仅使用配置文件来加载规则。'
- en: Table 10-4\. Ruleset command-line options
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-4\. 规则集命令行选项
- en: '| Option | Description |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-D *<substring>*` | This option allows you to disable one or more rules
    that match `*<substring>*` in their names. You can specify it multiple times,
    but it is incompatible with the `-t` option (see below). |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `-D *<substring>*` | 此选项允许你禁用其名称中匹配`*<substring>*`的一个或多个规则。你可以多次指定它，但与`-t`选项（见下文）不兼容。
    |'
- en: '| `-r *<rules_file>*` | This option allows you to specify a file or a directory
    that Falco will use to load rules. In the case of a directory, Falco loads all
    the files it contains. You can specify `-r` multiple times to load multiple files
    or directories. If you use this option, Falco will ignore any rules files and
    directories specified in the configuration file (*/etc/falco/falco.yaml*). Thus,
    we do not recommend using it in production, except for debugging or in special
    cases. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `-r *<rules_file>*` | 此选项允许你指定 Falco 用来加载规则的文件或目录。对于目录，Falco 将加载其中包含的所有文件。你可以多次指定
    `-r` 来加载多个文件或目录。如果使用此选项，Falco 将忽略配置文件（*/etc/falco/falco.yaml*）中指定的规则文件和目录。因此，我们不建议在生产环境中使用它，除非用于调试或特殊情况。
    |'
- en: '| `-T *<tag>*` | This option disables any rules with the given `*<tag>*`.You
    can specify it multiple times, but it is incompatible with the `-t` option (see
    below). |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `-T *<tag>*` | 此选项禁用具有给定 `*<tag>*` 的所有规则。你可以多次指定它，但与 `-t` 选项不兼容（见下文）。 |'
- en: '| `-t *<tag>*` | This option enables only rules with the given `*<tag>*` and
    disables all others. You can specify it multiple times, but it is incompatible
    with the `-T` and `-D` options. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `-t *<tag>*` | 此选项仅启用具有给定 `*<tag>*` 的规则，并禁用所有其他规则。你可以多次指定它，但与 `-T` 和 `-D`
    选项不兼容。 |'
- en: Output Settings
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出设置
- en: We described most of the output formatting options (along with Falco output
    channel configuration) in [Chapter 8](ch08.xhtml#the_output_framework). However,
    two other command-line options (listed in [Table 10-5](#output_command_line_options))
    allow you to further customize Falco’s output behavior.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 8 章](ch08.xhtml#the_output_framework) 中描述了大部分的输出格式选项（以及 Falco 输出通道配置）。然而，还有另外两个命令行选项（列在
    [表 10-5](#output_command_line_options) 中），允许您进一步自定义 Falco 的输出行为。
- en: Table 10-5\. Output command-line options
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-5\. 输出命令行选项
- en: '| Option | Description |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-p*<output_format>*`, `--print*<output_format>*` | When enabled, this option
    appends additional information to the Falco notification’s output. A few flavors
    are available; for instance:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '| `-p*<output_format>*`, `--print*<output_format>*` | 启用时，此选项将额外信息附加到 Falco
    通知的输出中。有几种不同的风格可用；例如：'
- en: '`-pc` or `-pcontainer` will add container information, such as the name and
    ID.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-pc` 或 `-pcontainer` 将添加容器信息，例如名称和 ID。'
- en: '`-pk` or `-pkubernetes` will add Kubernetes information, such as the namespace
    and Pod name.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-pk` 或 `-pkubernetes` 将添加 Kubernetes 信息，例如命名空间和 Pod 名称。'
- en: We recommend using `-pk` when using Falco in a Kubernetes context. |
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 环境中使用 Falco 时，我们建议使用 `-pk`。 |
- en: '| `-U`, `--unbuffered` | This option disables full output buffering in the
    output channels (see [Chapter 8](ch08.xhtml#the_output_framework)). Use it only
    if you encounter issues when piping the Falco output into another process or script.
    Turning off output buffering may increase CPU usage. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `-U`, `--unbuffered` | 此选项禁用输出通道中的完全输出缓冲（参见 [第 8 章](ch08.xhtml#the_output_framework)）。仅在将
    Falco 输出导入另一个进程或脚本时遇到问题时使用。关闭输出缓冲可能会增加 CPU 使用率。 |'
- en: Other Settings for Debugging and Troubleshooting
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他用于调试和故障排除的设置
- en: The command-line options we have described so far are the ones you’re likely
    to use routinely while operating Falco. However, there’s another group of options
    (listed in [Table 10-6](#command_line_options_for_debugging_and)) for more occasional
    use, such as when you need information about your Falco installation or are trying
    to solve a problem.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止我们描述的命令行选项是您在操作 Falco 时可能经常使用的选项。但是，还有另一组选项（列在 [表 10-6](#command_line_options_for_debugging_and)
    中），用于更偶尔的使用，比如当您需要关于 Falco 安装的信息或尝试解决问题时。
- en: Table 10-6\. Command-line options for debugging and troubleshooting
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-6\. 调试和故障排除的命令行选项
- en: '| Option | Description |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-e *<events_file>*` | Tells Falco to use the trace file (see [Chapter 3](ch03.xhtml#understanding_falcoapostr))
    specified by `*<events_file>*` as a data source instead of using a live event
    source. Once Falco consumes all the events in the file, it exits. Useful for testing
    and rule authoring. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `-e *<events_file>*` | 告诉 Falco 使用由 `*<events_file>*` 指定的跟踪文件（参见 [第 3 章](ch03.xhtml#understanding_falcoapostr)）作为数据源，而不是使用实时事件源。一旦
    Falco 消耗完文件中的所有事件，它就会退出。适用于测试和规则编写。 |'
- en: '| `-L` | Prints information about all loaded rules. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `-L` | 打印有关所有加载的规则的信息。 |'
- en: '| `-l *<rule>*` | Prints the name and description of the rule with name `*<rule>*`,
    if loaded. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `-l *<rule>*` | 打印具有名称 `*<rule>*` 的规则的名称和描述（如果已加载）。 |'
- en: '| `--list[=*<source>*]` | Lists all available condition fields, grouped by
    class (see [Chapter 6](ch06.xhtml#fields_and_filters)). If you also provide `*<source>*`,
    Falco will only list fields for that data source. The value of `*<source>*` can
    be `syscall` or any other data source provided by configured plugins. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `--list[=*<source>*]` | 按类别列出所有可用的条件字段（参见 [第 6 章](ch06.xhtml#fields_and_filters)）。如果还提供
    `*<source>*`，Falco 将仅列出该数据源的字段。`*<source>*` 的值可以是 `syscall` 或由已配置的插件提供的任何其他数据源。
    |'
- en: '| `--list-plugins` | Prints information about configured plugins. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `--list-plugins` | 打印已配置插件的信息。 |'
- en: '| `-s *<stats_file>*` | Tells Falco to create the file `*<stats_file>*` and
    populate it with statistics while running. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `-s *<stats_file>*` | 告诉 Falco 创建文件 `*<stats_file>*` 并在运行时填充统计信息。 |'
- en: '| `--stats-interval *<msec>*` | Sets the refresh interval (in milliseconds)
    for updating the file created by `-s *<stats_file>*`. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `--stats-interval *<msec>*` | 设置更新由 `-s *<stats_file>*` 创建的文件的刷新间隔（以毫秒为单位）。
    |'
- en: '| `--support` | Prints details about the loaded Falco configuration and ruleset,
    and other useful information for troubleshooting that you can provide when asking
    for help (for example, when [opening an issue](https://oreil.ly/vkk2h) in the
    Falco GitHub repository). |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `--support` | 打印有关加载的 Falco 配置和规则集以及其他有用的故障排除信息的详细信息，您在请求帮助时可以提供这些信息（例如，在
    Falco GitHub 存储库中 [提交问题](https://oreil.ly/vkk2h)）。 |'
- en: '| `-V`, `--validate *<rules_file>*` | Validates the content of the given `*<rules_file>*`.
    Useful for testing and rule authoring. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `-V`, `--validate *<rules_file>*` | 验证给定的 `*<rules_file>*` 内容。用于测试和规则编写。
    |'
- en: '| `-v` | Enables verbose logging while Falco is running. This option does not
    affect the usual Falco notifications, but log messages may interleave. Useful
    for debugging. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `-v` | 在 Falco 运行时启用详细日志记录。此选项不影响通常的 Falco 通知，但日志消息可能会交错。用于调试非常有用。 |'
- en: '| `--version` | Prints the version of Falco you are using. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `--version` | 打印您正在使用的 Falco 版本。 |'
- en: Configuration File
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: We talk about Falco’s configuration file all throughout this book, and we’ve
    already covered its most important aspects. This section provides an overview
    and pointers to everything you may need.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们一直在讨论 Falco 的配置文件，并且已经涵盖了它的大部分重要方面。本节提供了一个概述和指向您可能需要的所有内容的指针。
- en: 'The configuration file is a YAML file, located at */etc/falco/falco.yaml* by
    default. In this file, you can configure:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，配置文件是一个 YAML 文件，位于 */etc/falco/falco.yaml*。在此文件中，您可以配置：
- en: Rules files
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 规则文件
- en: The `rules_file` configuration node is the first one you’ll find in the configuration
    file. It allows you to choose which rules files Falco will load (more on these
    in the next section).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`rules_file` 配置节点是配置文件中第一个找到的节点。它允许您选择 Falco 将加载的规则文件（更多细节将在下一节介绍）。'
- en: Plugins
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 插件
- en: You can enable plugins and pass settings through the `load_plugins` and `plugins`
    configuration nodes (see [“Using Plugins”](#using_plugins)).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 `load_plugins` 和 `plugins` 配置节点启用插件并传递设置（参见[“使用插件”](#using_plugins)）。
- en: Output channels
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出通道
- en: Various configuration nodes allow you to configure formatting, logging, and
    output channel options. Refer to [Chapter 8](ch08.xhtml#the_output_framework)
    for more information on the output framework.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 各种配置节点允许您配置格式化、日志记录和输出通道选项。有关输出框架的更多信息，请参阅[第 8 章](ch08.xhtml#the_output_framework)。
- en: Embedded servers
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式服务器
- en: Falco provides an embedded web server that exposes a healthy endpoint.^([3](ch10.xhtml#ch01fn14))
    Container orchestrators and other applications can use this endpoint to check
    if Falco is up and running. The `webserver` configuration node allows you to enable
    and configure the server.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 提供了一个嵌入式 Web 服务器，公开了一个健康的端点。[^3] 容器编排器和其他应用程序可以使用此端点检查 Falco 是否正在运行。`webserver`
    配置节点允许您启用和配置服务器。
- en: Falco also provides a gRPC server that you can enable and configure using the
    `grpc` configuration node (see Chapters [8](ch08.xhtml#the_output_framework) and
    [12](ch12.xhtml#consuming_falco_events)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 还提供了一个 gRPC 服务器，您可以使用 `grpc` 配置节点启用和配置它（参见第 [8](ch08.xhtml#the_output_framework)
    和 [12](ch12.xhtml#consuming_falco_events) 章）。
- en: Advanced fine-tuning settings (syscalls only)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 高级调优设置（仅限系统调用）
- en: Syscall instrumentation is likely the most complex feature Falco supports, so
    the configuration file also provides advanced settings for it. Those settings
    vary between versions of Falco, so we suggest you always refer to the online documentation
    and the inline comments included in the configuration file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用仪器是 Falco 支持的最复杂功能之一，因此配置文件还提供了其高级设置。这些设置因 Falco 版本而异，因此我们建议您始终参考在线文档和配置文件中的内联注释。
- en: Notable options here include `syscall_event_drops`, which controls the detection
    of dropped events; `syscall_event_timeouts`, which helps detect the absence of
    events (an uncommon situation for syscalls); and `metadata_download`, which provides
    several options to fine-tune information downloads from the container orchestrator
    API server.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里需要注意的选项包括 `syscall_event_drops`，用于控制事件丢弃的检测；`syscall_event_timeouts`，帮助检测事件缺失（对于系统调用来说是不常见的情况）；以及
    `metadata_download`，提供了几个选项来微调从容器编排器 API 服务器下载信息。  '
- en: Ruleset
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则集
- en: Falco comes with a set of predefined rules that you can use right out of the
    box. However, there are good reasons to customize your ruleset as much as possible.
    The default ruleset is designed to cover major attack vectors, but these rules
    cannot cover all possible cases. Attack mechanisms are always evolving, so your
    ruleset needs to keep up. If you want the highest level of security, you need
    a ruleset that’s tailored to your specific environment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Falco 自带一组预定义的规则，您可以直接使用。然而，有很多理由尽可能定制您的规则集。默认的规则集旨在覆盖主要的攻击向量，但这些规则无法涵盖所有可能的情况。攻击机制始终在发展，因此您的规则集需要跟上这些变化。如果您希望达到最高级别的安全性，您需要一个根据特定环境定制的规则集。
- en: Additional benefits of customizing your rules include avoiding noisy false positives
    and optimizing Falco’s performance. You need to learn how to configure the ruleset
    correctly for all of these reasons.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 定制规则的额外好处包括避免噪声误报和优化 Falco 的性能。出于所有这些原因，你需要学会如何正确配置规则集。
- en: Loading Rules Files
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载规则文件
- en: 'There are two ways to tell Falco which rules files to load: through the command
    line or the configuration file. On the command line, you specify rules files using
    the `-r` flag. In the configuration file, you put rules files under the `rules_file`
    section. Recall that anything you set via the command line will take precedence
    over the configuration file. In production, we recommend loading rules files through
    the configuration file *only,* for this reason.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式告诉 Falco 要加载哪些规则文件：通过命令行或配置文件。在命令行上，你可以使用 `-r` 标志指定规则文件。在配置文件中，将规则文件放在
    `rules_file` 部分下。请注意，通过命令行设置的内容会优先于配置文件。出于这个原因，在生产环境中，我们建议仅通过配置文件加载规则文件。
- en: 'Whichever method you choose, you can specify more than one rules file or directory.
    So, you can do:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种方法，你都可以指定多个规则文件或目录。因此，你可以这样做：
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'or:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE3]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It’s important to be aware that rules files are loaded and parsed in the order
    you specify. (When the entry is a directory, Falco will load every file in that
    directory in alphabetical order.) This makes it possible to customize rules, macros,
    and lists (see [Chapter 7](ch07.xhtml#falco_rules)) that are defined in one file
    in a subsequent file. The default Falco configuration is crafted to take advantage
    of this mechanism.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，规则文件会按照指定的顺序加载和解析。（当条目是目录时，Falco 会按字母顺序加载该目录中的每个文件。）这使得可以在后续文件中自定义规则、宏和列表（参见
    [第 7 章](ch07.xhtml#falco_rules)），这些定义在一个文件中。默认的 Falco 配置经过精心设计以利用这种机制。
- en: 'Let’s take a look at the `rules_file` section in the default configuration
    file that is shipped with Falco:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看随 Falco 一起提供的默认配置文件中的 `rules_file` 部分：
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The main rules file, *falco_rules.yaml*, which contains rules for syscalls,
    is followed by a file named *falco_rules.local.yaml*. This file is where you should
    make changes to *falco_rules.yaml*. It is empty by default, and you can work in
    it without having to worry about polluting the main rules file. You can create
    other local files as you need.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 主规则文件 *falco_rules.yaml* 包含系统调用的规则，随后是名为 *falco_rules.local.yaml* 的文件。你应该在 *falco_rules.local.yaml*
    中进行对 *falco_rules.yaml* 的修改。默认情况下，这个文件是空的，你可以在其中工作而不必担心污染主规则文件。根据需要，你可以创建其他本地文件。
- en: Usually, Falco provides one rules file per data source. You can use this approach
    or use multiple files, depending on your needs. Just keep in mind that the loading
    order matters. Also note that Falco will only load rules that match the configured
    data source; all others will be ignored. This means you don’t have to worry about
    manually removing or disabling rules files intended for other data sources.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Falco 每个数据源提供一个规则文件。你可以使用这种方法或根据需要使用多个文件。只需记住加载顺序很重要。还要注意，Falco 只会加载与配置的数据源匹配的规则；所有其他规则将被忽略。这意味着你无需担心手动删除或禁用用于其他数据源的规则文件。
- en: Tuning the Ruleset
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整规则集
- en: The most important aspect of tuning the ruleset is understanding what your use
    case needs to detect. That will allow you to decide which rules work for you and
    which do not. Avoiding unnecessary rules has the double benefit of increasing
    performance (Falco will use less CPU resources) and reducing false positives.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 调整规则集最重要的一点是理解你的用例需要检测什么。这将帮助你决定哪些规则对你有用，哪些不需要。避免不必要的规则不仅可以增加性能（Falco 将使用更少的
    CPU 资源），还可以减少误报。
- en: Once you have done an initial skim, disable the rules you are not interested
    in (as described in [Chapter 7](ch07.xhtml#falco_rules)). We do not suggest removing
    them from the rules files unless you have created your own rules files from scratch.
    We also recommend periodically evaluating your ruleset, because the rules you
    need will change over time.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成初步浏览，禁用你不感兴趣的规则（如 [第 7 章](ch07.xhtml#falco_rules) 中描述）。我们不建议从规则文件中删除它们，除非你从头开始创建自己的规则文件。我们还建议定期评估你的规则集，因为随时间推移，你需要的规则会发生变化。
- en: Next, look at the rules’ conditions. We’ll get into the details of writing Falco
    rules in [Chapter 13](ch13.xhtml#writing_falco_rules), but for now we’ll offer
    two general guidelines for evaluating Falco rules.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，查看规则的条件。我们将在 [第 13 章](ch13.xhtml#writing_falco_rules) 中详细介绍编写 Falco 规则的细节，但现在我们将提供两个一般评估
    Falco 规则的指南。
- en: First, *avoid using too many exceptions in conditions:* for example, long chains
    of `and not (...) and not (...)`. Falco has no alternative but to sequentially
    check any exception present in the condition, which is an expensive task. Shorter
    conditions, whenever possible, can improve rule evaluation performance significantly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，*避免在条件中使用过多的异常*，例如，长链条的`and not (...) and not (...)`。Falco必须顺序检查条件中的任何异常，这是一项昂贵的任务。在可能的情况下，更短的条件可以显著改善规则评估性能。
- en: The second guideline applies only to syscalls and holds that *a rule condition
    should always match just one event type or a small set of event types*. For example,
    `evt.type=connect` and `evt.type in (open,openat,openat2)` are both fine, but
    `evt.type!=execve` is not, because that filter would match all event types except
    one, which is too many. Falco indexes rules by event type as a way of optimizing
    its internal evaluation process; a rule matching too many event types would make
    this indexing inefficient. To help rule authors spot this issue, Falco emits warnings
    for rules that match all event types.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条准则仅适用于系统调用，并且认为*规则条件应始终匹配一个事件类型或一小组事件类型*。例如，`evt.type=connect`和`evt.type
    in (open,openat,openat2)`都可以接受，但`evt.type!=execve`不可以，因为该过滤器将匹配除一个之外的所有事件类型，这太多了。Falco通过事件类型对规则进行索引，以优化其内部评估过程；匹配太多事件类型的规则会使此索引变得低效。为了帮助规则作者发现此问题，Falco对匹配所有事件类型的规则发出警告。
- en: Using Plugins
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件
- en: 'By default, Falco comes configured to use syscalls. If you want to use a plugin
    as your data source instead, make sure that:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Falco配置为使用系统调用。如果你想使用插件作为数据源，请确保：
- en: The plugin file is already available in */usr/share/falco/plugins* (some plugins
    are shipped with Falco); if not, you’ll need to install it in that folder.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件文件已经存在于*/usr/share/falco/plugins*中（一些插件已随Falco一起提供）；如果没有，你需要将其安装到该文件夹中。
- en: A rules file for the plugin is available (we recommend placing it under */etc/falco*).
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件的规则文件已准备好（我们建议将其放在*/etc/falco*下）。
- en: You have read the plugin’s documentation and understand which configuration
    parameters it needs.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经阅读了插件的文档，并理解了它需要哪些配置参数。
- en: 'Then, preparing Falco’s configuration file to use a plugin is a three-step
    process: select the correct rules file, configure the plugin, and enable it.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，准备Falco的配置文件以使用插件是一个三步骤的过程：选择正确的规则文件、配置插件并启用它。
- en: 'To illustrate this process, we will use the [CloudTrail plugin](https://oreil.ly/kgImn),
    which fetches log files containing [CloudTrail](https://oreil.ly/DUEDJ) events
    (details on using this plugin are provided in the next chapter). The CloudTrail
    plugin has a ruleset that requires another plugin with field extraction capability:
    the [JSON plugin](https://oreil.ly/Viiaj). Both plugins and the ruleset come bundled
    with Falco out of the box, so you should already have them if you’ve installed
    Falco. You’ll find the plugin files *libcloudtrail.so* and *libjson.so* under
    */usr/share/falco/plugins* and the rules file at */etc/falco/aws_cloudtrail_rules.yaml*.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个过程，我们将使用[CloudTrail插件](https://oreil.ly/kgImn)，它获取包含[CloudTrail](https://oreil.ly/DUEDJ)事件的日志文件（有关使用此插件的详细信息将在下一章提供）。CloudTrail插件具有一个规则集，需要另一个具有字段提取能力的插件：[JSON插件](https://oreil.ly/Viiaj)。这两个插件和规则集都与Falco捆绑在一起，所以如果你已经安装了Falco，你应该已经拥有它们。你会在*/usr/share/falco/plugins*下找到插件文件*libcloudtrail.so*和*libjson.so*，规则文件在*/etc/falco/aws_cloudtrail_rules.yaml*。
- en: 'Rules files for plugins are not usually configured by default in the Falco
    configuration, so you’ll have to add an entry to `rules_file` to load the correct
    rules file (you can also remove unnecessary ones if you want to):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的规则文件通常不会在Falco配置中默认配置，因此你需要添加一个`rules_file`条目来加载正确的规则文件（如果需要，也可以删除不必要的规则文件）：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, under `plugins`, add the relevant entries:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`plugins`下添加相关条目：
- en: '[PRE6]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `name` field must match the plugin name, and `library_path` must match the
    plugin file under */usr/share/falco/plugins*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`字段必须与插件名称匹配，`library_path`必须与*/usr/share/falco/plugins*下的插件文件匹配。'
- en: In `init_config`, add the initialization parameters that Falco will pass to
    the plugin (refer to your plugin’s documentation for details). Most plugins accept
    either a plain-text or a JSON-formatted string. If the plugin supports a JSON
    string, you can still use the YAML syntax for `init_config` (as in the preceding
    example); Falco will automatically convert it for you.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init_config`中，添加Falco将传递给插件的初始化参数（有关详细信息，请参阅插件的文档）。大多数插件接受纯文本或JSON格式的字符串。如果插件支持JSON字符串，你仍然可以使用YAML语法来编写`init_config`（如前面的示例）；Falco会自动为你进行转换。
- en: The `open_params` setting is needed only for plugins with event sourcing capability
    (such as the CloudTrail plugin) and accepts only a plain-text string. It provides
    the parameters to open the stream of events (again, refer to your plugin’s documentation).
    Some plugins might not need this setting; in that case, you can just set it to
    an empty string (`""`).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`open_params`设置仅适用于具有事件源能力的插件（例如 CloudTrail 插件），并且仅接受纯文本字符串。它提供打开事件流的参数（再次参考插件的文档）。某些插件可能不需要此设置；在这种情况下，您可以将其设置为空字符串（`""`）。'
- en: 'The last step is to enable your plugins:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是启用您的插件：
- en: '[PRE7]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `load_plugins` setting accepts an array of plugin names. You can enable
    multiple plugins at the same time.^([4](ch10.xhtml#ch01fn15))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_plugins`设置接受一个插件名称数组。您可以同时启用多个插件。'
- en: That’s it! Your plugins are now configured and ready to run in Falco.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！您的插件现在已配置并准备在 Falco 中运行。
- en: Changing the Configuration
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改配置
- en: Once you’ve installed and configured Falco, you may need to change its configuration
    from time to time. There are two ways to tell Falco to load an updated configuration
    (that is, any modification to the configuration file or rules files).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置 Falco 后，您可能需要不时地更改其配置。有两种方式告知 Falco 加载更新的配置（即配置文件或规则文件的任何修改）。
- en: The simplest method is just to modify the configuration and then restart Falco.
    If you installed Falco on the host using a package manager, you can do this with
    `systemctl restart falco`. If you are running Falco in a container, restart the
    container. If you’re running it in a Kubernetes cluster, you’ll need to redeploy
    Falco. Restarting Falco is the only way to upgrade to a newer version or change
    its command-line settings.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法就是修改配置然后重新启动 Falco。如果您是通过包管理器在主机上安装的 Falco，您可以使用`systemctl restart falco`命令来实现这一点。如果您在容器中运行
    Falco，则重新启动容器。如果您在 Kubernetes 集群中运行 Falco，则需要重新部署 Falco。重新启动 Falco 是升级到新版本或更改其命令行设置的唯一方法。
- en: 'The second way to load an updated configuration is to *hot-reload*, or tell
    Falco to reload the configuration and rules files without stopping its running
    process. You can tell Falco to reload itself by sending a [SIGHUP signal](https://oreil.ly/6unav):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种加载更新配置的方式是*热重载*，即告诉 Falco 在不停止其运行进程的情况下重新加载配置和规则文件。您可以通过发送[SIGHUP信号](https://oreil.ly/6unav)来告诉
    Falco 自行重新加载：
- en: '[PRE8]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once Falco receives the signal, it will reload the configuration file and the
    configured rules files.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Falco 收到信号，它将重新加载配置文件和配置的规则文件。
- en: Since version 0.32.0, Falco can automatically hot-reload when the configuration
    file or a rules file is modified. In the configuration file, the `watch_config_files`
    setting controls this feature (enabled by default). So, in recent versions of
    Falco, you can just change the configuration file or rules files without the need
    to send a SIGHUP signal manually.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 自 0.32.0 版本以来，当修改配置文件或规则文件时，Falco 可以自动进行热重载。在配置文件中，`watch_config_files`设置控制此功能（默认启用）。因此，在最新版本的
    Falco 中，您只需修改配置文件或规则文件，无需手动发送 SIGHUP 信号。
- en: Note that when Falco is restarting or hot reloading, it does not detect events.
    However, the amount of time required to hot-reload Falco is significantly shorter
    than the time it takes to restart the process, and is usually negligible.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 Falco 重新启动或热重载时，它不会检测事件。然而，与重新启动进程所需的时间相比，热重载 Falco 所需的时间显著缩短，通常可以忽略不计。
- en: Conclusion
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'This chapter and the previous one provided in-depth coverage of installing,
    configuring, and running Falco in a production environment, for both the syscall
    instrumentation scenario and the scenario where you’re using a plugin as a data
    source. Now, it’s time to dig deeper into a concrete plugin case: using Falco
    for cloud security. In the next chapter, you will discover how to secure your
    cloud by taking advantage of the CloudTrail plugin.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本章和前一章深入讲解了在生产环境中安装、配置和运行 Falco 的各个方面，无论是系统调用仪器化场景还是使用插件作为数据源的场景。现在是深入探讨具体插件案例的时候了：如何利用
    Falco 进行云安全。在下一章中，您将了解如何通过使用 CloudTrail 插件来保护您的云环境。
- en: ^([1](ch10.xhtml#ch01fn11-marker)) There are several other ways to set environment
    variables when running a container in Docker; for more information, refer to Docker’s
    [online documentation](https://oreil.ly/91H3j).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.xhtml#ch01fn11-marker)) 在 Docker 运行容器时，还有几种设置环境变量的方法；更多信息请参阅 Docker
    的[在线文档](https://oreil.ly/91H3j)。
- en: ^([2](ch10.xhtml#ch01fn12-marker)) There are several alternatives for mounting
    files into a container. For details, see Docker’s [documentation](https://oreil.ly/4cdap).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch10.xhtml#ch01fn12-marker)) 有几种方法可以将文件挂载到容器中。详细信息请参阅Docker的[文档](https://oreil.ly/4cdap)。
- en: ^([3](ch10.xhtml#ch01fn14-marker)) Falco’s developers initially introduced the
    web server to support the Kubernetes audit log as a data source. Recently, they
    factored out this functionality into a plugin. Thus, the actual settings you can
    find under the `webserver` configuration node may vary significantly from one
    Falco version to another.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch10.xhtml#ch01fn14-marker)) Falco的开发人员最初引入了Web服务器来支持Kubernetes审计日志作为数据源。最近，他们将此功能因子分解为插件。因此，您可以在不同的Falco版本下的`webserver`配置节点中找到的实际设置可能会有很大差异。
- en: ^([4](ch10.xhtml#ch01fn15-marker)) The first versions of Falco with the plugin
    system do not allow you to enable multiple plugins with the event sourcing capability
    at the same time. However, you can enable multiple plugins with only the field
    extraction capability (see [Chapter 4](ch04.xhtml#data_source)).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch10.xhtml#ch01fn15-marker)) 带有插件系统的Falco的首个版本不允许您同时启用具有事件源能力的多个插件。然而，您可以仅启用具有字段提取能力的多个插件（参见[第4章](ch04.xhtml#data_source)）。
