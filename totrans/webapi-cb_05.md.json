["```\n{\n  // Here, id is the key.\n  id: 100,\n  name: 'Take out the trash',\n  completed: false\n}\n```", "```\nconst todosStore = db.createObjectStore('todos', { keyPath: 'id' });\n```", "```\nconst todosStore = db.createObjectStore('todos',\n  { keyPath: 'id', autoIncrement: true });\n```", "```\nconst todo = {\n  name: 'Take out the trash',\n  completed: false\n};\n\n// later, when adding the new to-do\ntodoStore.add(todo, 100);\n```", "```\n/**\n * Opens the database, creating the object store if needed.\n * Because this is asynchronous, it takes a callback function, onSuccess. Once the\n * database is ready, onSucces will be called with the database object.\n *\n * @param onSuccess A callback function that is executed when the database is ready\n */\nfunction openDatabase(onSuccess) {\n  const request = indexedDB.open('contacts');\n\n  // Create the object store if needed.\n  request.addEventListener('upgradeneeded', () => {\n    const db = request.result;\n\n    // The contact objects will have an 'id' property that will\n    // be used as the key. When you add a new contact object, you don't need to\n    // set an 'id' property; the autoIncrement flag means that the database will\n    // automatically set an 'id' for you.\n    db.createObjectStore('contacts', {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  });\n\n  // When the database is ready for use, it triggers a 'success' event.\n  request.addEventListener('success', () => {\n    const db = request.result;\n\n    // Call the given callback with the database.\n    onSuccess(db);\n  });\n\n  // Always handle errors!\n  request.addEventListener('error', () => {\n    console.error('Error opening database:', request.error);\n  });\n}\n```", "```\n/**\n * Reads the contacts from the database and renders them in the table.\n * @param contactsDb The IndexedDB database\n * @param onSuccess A callback function that is executed when the contacts are loaded\n */\nfunction getContacts(contactsDb, onSuccess) {\n  const request = contactsDb\n    .transaction(['contacts'], 'readonly')\n    .objectStore('contacts')\n    .getAll();\n\n  // When the data has been loaded, the database triggers a 'success' event on the\n  // request object.\n  request.addEventListener('success', () => {\n    console.log('Got contacts:', request.result);\n    onSuccess(request.result);\n  });\n\n  request.addEventListener('error', () => {\n    console.error('Error loading contacts:', request.error);\n  });\n}\n```", "```\n/**\n * Adds a new contact to the database, then re-renders the table.\n * @param contactsDb The IndexedDB database\n * @param contact The new contact object to add\n * @param onSuccess A callback function that is executed when the contact is added\n */\nfunction addContact(contactsDb, contact, onSuccess) {\n  const request = contactsDb\n    .transaction(['contacts'], 'readwrite')\n    .objectStore('contacts')\n    .add(contact);\n\n  request.addEventListener('success', () => {\n    console.log('Added new contact:', contact);\n    onSuccess();\n  });\n\n  request.addEventListener('error', () => {\n    console.error('Error adding contact:', request.error);\n  });\n}\n```", "```\n/**\n * Deletes a contact from the database, then re-renders the table.\n * @param contactsDb The IndexedDB database.\n * @param contact The contact object to delete\n * @param onSuccess A callback function that is executed when the contact is deleted\n */\nfunction deleteContact(contactsDb, contact, onSuccess) {\n  const request = contactsDb\n    .transaction(['contacts'], 'readwrite')\n    .objectStore('contacts')\n    .delete(contact.id);\n\n  request.addEventListener('success', () => {\n    console.log('Deleted contact:', contact);\n    onSuccess();\n  });\n\n  request.addEventListener('error', () => {\n    console.error('Error deleting contact:', request.error);\n  });\n}\n```", "```\nlet contactsDb;\n\n// Open the database and do the initial contact list render.\n// The success handler sets contactsDb to the new database object for later use,\n// then loads and renders the contacts.\nopenDatabase(db => {\n  contactsDb = db;\n  renderContacts(contactsDb);\n});\n```", "```\ngetContacts(contactsDb, contacts => {\n  // Contacts have been loaded, now render them.\n  renderContacts(contacts);\n});\n```", "```\nconst newContact = { name: 'Connie Myers', email: 'cmyers@example.com' };\naddContact(contactsDb, newContact, () => {\n  // Contact has been added, now load the updated list and render it.\n  getContacts(contactsDb, contacts => {\n    renderContacts(contacts);\n  })\n});\n```", "```\nconst contactsDb = {\n  open(onSuccess) {\n    const request = indexedDB.open('contacts');\n\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n      db.createObjectStore('contacts', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n    });\n\n    request.addEventListener('success', () => {\n      this.db = request.result;\n      onSuccess();\n    });\n  },\n\n  getContacts(onSuccess) {\n    const request = this.db\n      .transaction(['contacts'], 'readonly')\n      .objectStore('contacts')\n      .getAll();\n\n    request.addEventListener('success', () => {\n      console.log('Got contacts:', request.result);\n      onSuccess(request.result);\n    });\n  },\n\n  // Other operations follow similarly.\n};\n```", "```\n// todoList database is now at version 2\nconst request = indexedDB.open('todoList', 2);\n\n// If the user's database is still at version 1, an 'upgradeneeded' event\n// is triggered so that the new object store can be added.\nrequest.addEventListener('upgradeneeded', event => {\n  const db = request.result;\n\n  // This event is also triggered when no database exists yet, so you still need\n  // to handle this case and create the to-dos object store.\n  // The oldVersion property specifies the user's current version of the database.\n  // If the database is just being created, the oldVersion is 0.\n  if (event.oldVersion < 1) {\n    db.createObjectStore('todos', {\n      keyPath: 'id'\n    });\n  }\n\n  // If this database has not yet been upgraded to version 2, create the\n  // new object store.\n  if (event.oldVersion < 2) {\n    db.createObjectStore('people', {\n      keyPath: 'id'\n    });\n  }\n});\n\nrequest.addEventListener('success', () => {\n  // Database is ready to go.\n});\n\n// Log any error that might have occurred. The error object is\n// stored in the request's 'error' property.\nrequest.addEventListener('error', () => {\n  console.error('Error opening database:', request.error);\n});\n```", "```\n/**\n * Opens the database, creating the object store and index if needed.\n * Once the database is ready, onSuccess will be called with the database object.\n *\n * @param onSuccess A callback function that is executed when the database is ready\n */\nfunction openDatabase(onSuccess) {\n  const request = indexedDB.open('employees');\n\n  request.addEventListener('upgradeneeded', () => {\n    const db = request.result;\n\n    // New employee objects will be given an autogenerated\n    // 'id' property that serves as its key.\n    const employeesStore = db.createObjectStore('employees', {\n      keyPath: 'id',\n      autoIncrement: true,\n    });\n\n    // Create an index on the 'department' property called 'department'.\n    employeesStore.createIndex('department', 'department');\n  });\n\n  request.addEventListener('success', () => {\n    onSuccess(request.result);\n  });\n}\n```", "```\n/**\n * Gets the employees for a given department, or all employees\n * if no department is given\n *\n * @param department The department to filter by\n * @param onSuccess A callback function that is executed when the employees\n * are loaded\n */\nfunction getEmployees(department, onSuccess) {\n  const request = employeeDb\n    .transaction(['employees'], 'readonly')\n    .objectStore('employees')\n    .index('department')\n    .getAll(department);\n\n  request.addEventListener('success', () => {\n    console.log('Got employees:', request.result);\n    onSuccess(request.result);\n  });\n\n  request.addEventListener('error', () => {\n    console.log('Error loading employees:', request.error);\n  });\n}\n```", "```\n/**\n * Searches for employees by name\n *\n * @param name A query string to match employee names\n * @param onSuccess Success callback that will receive the matching employees.\n */\nfunction searchEmployees(name, onSuccess) {\n  // An array to hold all contacts with a name containing the query text\n  const results = [];\n\n  const query = name.toLowerCase();\n\n  const request = employeeDb\n    .transaction(['employees'], 'readonly')\n    .objectStore('employees')\n    .openCursor();\n\n  // The cursor request will emit a 'success' event for each object it finds.\n  request.addEventListener('success', () => {\n    const cursor = request.result;\n    if (cursor) {\n      const name = `${cursor.value.firstName} ${cursor.value.lastName}`\n      .toLowerCase();\n      // Add the contact to the result array if it matches the query.\n      if (name.includes(query)) {\n        results.push(cursor.value);\n      }\n\n      // Continue to the next record.\n      cursor.continue();\n    } else {\n      onSuccess(results);\n    }\n  });\n\n  request.addEventListener('error', () => {\n    console.error('Error searching employees:', request.error);\n  });\n}\n```", "```\n/**\n * Uses a cursor to fetch a single \"page\" of data from an IndexedDB object store\n *\n * @param db The IndexedDB database object\n * @param storeName The name of the object store\n * @param offset The starting offset (0 being the first item)\n * @param length The number of items after the offset to return\n */\nfunction getPaginatedRecords(db, storeName, offset, length) {\n  const cursor = db\n    .transaction([storeName], 'readonly')\n    .objectStore(storeName)\n    .openCursor();\n\n  const results = [];\n\n  // This flag indicates whether or not the cursor has skipped ahead to the\n  // offset yet.\n  let skipped = false;\n\n  request.addEventListener('success', event => {\n    const cursor = event.target.result;\n\n    if (!skipped) {\n      // Set the flag and skip ahead by the given offset. Next time around,\n      // the cursor will be in the starting position and can start collecting\n      // records.\n      skipped = true;\n      cursor.advance(offset);\n    } else if (cursor && result.length < length) {\n      // Collect the record the cursor is currently pointing to.\n      results.push(cursor.value);\n\n      // Continue on to the next record.\n      cursor.continue();\n    } else {\n      // There are either no records left, or the length has been reached.\n      console.log('Got records:', request.result);\n    }\n  });\n\n  request.addEventListener('error', () => {\n    console.error('Error getting records:', request.error);\n  });\n}\n```", "```\n/**\n * Opens the database, creating the object store if needed.\n * @returns a Promise that is resolved with the database, or rejected with an error\n */\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('contacts-promise');\n\n    // Create the object store if needed.\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n      db.createObjectStore('contacts', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n    });\n\n    request.addEventListener('success', () => resolve(request.result));\n    request.addEventListener('error', () => reject(request.error));\n  });\n}\n```", "```\n/**\n * Reads the contacts from the database.\n * @returns a Promise that is resolved with the contacts, or rejected with an error\n */\nfunction getContacts() {\n  return new Promise((resolve, reject) => {\n    const request = contactsDb\n      .transaction(['contacts'], 'readonly')\n      .objectStore('contacts')\n      .getAll();\n\n    request.addEventListener('success', () => {\n      console.log('Got contacts:', request.result);\n      resolve(request.result);\n    });\n\n    request.addEventListener('error', () => {\n      console.error('Error loading contacts:', request.error);\n      reject(request.error);\n    });\n  });\n}\n```", "```\nasync function loadAndPrintContacts() {\n  try {\n    const db = await openDatabase();\n    const contacts = await getContacts();\n    console.log('Got contacts:', contacts);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```"]