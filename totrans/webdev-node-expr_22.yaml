- en: Chapter 22\. Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You launched the site! Congratulations, now you never have to think about it
    again. What’s that? You *do* have to keep thinking about it? Well, in that case,
    keep reading.
  prefs: []
  type: TYPE_NORMAL
- en: Although it has happened a couple of times in my career, it has been the exception
    to the rule that you finish a site and then never have to touch it again (and
    when it does happen, it’s usually because someone else is doing the work, not
    that work doesn’t need to be done). I distinctly remember one website launch “postmortem.”
    I piped up and said, “Shouldn’t we really call it a *postpartum*?”^([1](ch22.xhtml#idm45053572094072))
    Launching a website really is more of a birth than a death. Once it launches,
    you’re glued to the analytics, anxiously awaiting the client’s reaction, waking
    up at three in the morning to check to see if the site is still up. It’s your
    baby.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoping a website, designing a website, building a website: these are all activities
    that can be planned to death. But what usually receives short shrift is *planning
    the maintenance* of a website. This chapter will give you some advice on navigating
    those waters.'
  prefs: []
  type: TYPE_NORMAL
- en: The Principles of Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have a Longevity Plan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It always surprises me when a client agrees on a price to build a website,
    but it’s never discussed how long the site is expected to last. My experience
    is that if you do good work, clients are happy to pay for it. What clients do
    *not* appreciate is the unexpected: being told after three years that their site
    has to be rebuilt when they had an unspoken expectation that it would last five.'
  prefs: []
  type: TYPE_NORMAL
- en: The internet moves fast. If you built a website with the absolute best and newest
    technology you could find, it might feel like a creaky relic in two short years.
    Or it could truck along for seven, aging, but doing so gracefully (this is a lot
    less common!).
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting expectations about website longevity is part art, part salesmanship,
    and part science. The science of it involves something that all scientists, but
    very few web developers, do: keep records. Imagine if you had a record of every
    website your team had ever launched, the history of maintenance requests and failures,
    the technologies used, and how long before each site was rebuilt. There are many
    variables, obviously, from the team members involved, to the economy, to the shifting
    winds of technology, but that doesn’t mean that meaningful trends can’t be discovered
    in the data. You may find that certain development approaches work better for
    your team, or certain platforms or technologies. What I almost guarantee you will
    find is a correlation between “procrastination” and defects: the longer you put
    off an infrastructure update or platform upgrade that’s causing pain, the worse
    it will be. Having a good issue-tracking system and keeping meticulous records
    will allow you to give your client a much better (and more realistic) picture
    of what the life cycle of their project is going to be.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The salesmanship of it boils down to money, of course. If a client can afford
    to have their website completely rebuilt every three years, then they won’t be
    very likely to suffer from aging infrastructure (they will have other problems,
    though). On the flip side, there will be clients who need their dollar to stretch
    as far as possible, wanting a website that will last for five or even seven years.
    (I’ve known websites that have dragged on for even longer than that, but I feel
    that seven years is the maximum realistic life expectancy for websites that have
    any hope of continuing to be useful.) You have a responsibility to both of these
    clients, and both come with their own challenges. With the clients who have a
    lot of money, don’t just take their money because they have it: use that extra
    money to give them something extraordinary. With the clients on a tight budget,
    you will have to find creative ways to design their website for greater longevity
    in the face of constantly changing technology. Both of these extremes have their
    own challenges, but ones that can be solved. What’s important, though is that
    you *know* what the expectations are.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, there’s the art of the matter. This is what ties it all together: understanding
    what the client can afford, and where you can honestly convince the client to
    spend more money so they get value where they need it. It is also the art of understanding
    technology futures, and being able to predict what technologies will be painfully
    obsolete in five years and which will be going strong.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s no way to predict anything with absolute certainty, of course. You
    could bet wrong on technologies, personnel shifts can completely change the technical
    culture of your organization, and technology vendors can go out of business (though
    this is usually less of a problem in the open source world). The technology that
    you thought would be solid for the lifetime of your product may turn out to be
    a fad, and you’ll find yourself facing the decision to rebuild sooner than you
    expected. On the flip side, sometimes the exactly right team comes together at
    the exact right time with the exact right technology, and something is created
    that far outlives any reasonable expectations. None of this uncertainty should
    deter you from having a plan, however: better to have a plan that goes awry than
    to always be rudderless.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It should be clear to you by now that I feel that JavaScript and Node are technologies
    that are going to be around for a while. The Node community is vibrant and enthusiastic,
    and wisely based on a language that has clearly *won*. Most important, perhaps,
    is that JavaScript is a multiparadigm language: object-oriented, functional, procedural,
    synchronous, asynchronous—it’s all there. This makes JavaScript an inviting platform
    for developers from many different backgrounds, and is in large part responsible
    for the pace of innovation in the JavaScript ecosystem.'
  prefs: []
  type: TYPE_NORMAL
- en: Use Source Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This probably seems obvious to you, but it’s not just about *using* source
    control, it’s about using it *well*. Why are you using source control? Understand
    the reasons, and make sure the tools are supporting those reasons. There are many
    reasons to use source control, but the one that always seems to me to have the
    biggest payoff is attribution: knowing exactly what change was made when and who
    did it, so I can ask for more information if necessary. Version control is one
    of our greatest tools for understanding the history of our projects and how we
    work together as a team.'
  prefs: []
  type: TYPE_NORMAL
- en: Use an Issue Tracker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Issue trackers go back to the science of development. Without a systematic way
    to record the history of a project, no insight is possible. You’ve probably heard
    it said that the definition of insanity is “doing the same thing over and over
    again and expecting different results” (often dubiously attributed to Albert Einstein).
    It does seem crazy to repeat your mistakes over and over again, but how can you
    avoid it if you don’t know what mistakes you’re making?
  prefs: []
  type: TYPE_NORMAL
- en: 'Record everything: every defect the client reports; every defect you find before
    the client sees it; every complaint, every question, every bit of praise. Record
    how long it took, who fixed it, what Git commits were involved, and who approved
    the fix. The art here is finding tools that don’t make this overly time-consuming
    or onerous. A bad issue-tracking system will languish, unused, and it will be
    worse than useless. A good issue-tracking system will yield vital insights into
    your business, your team, and your clients.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise Good Hygiene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m not talking about brushing your teeth—though you should do that too—I’m
    talking about version control, testing, code reviews, and issue tracking. The
    tools you use are useful only if you use them, and use them correctly. Code reviews
    are a great way to encourage hygiene because *everything* can be touched on, from
    discussing the use of the issue-tracking system in which the request originated
    to the tests that had to be added to verify the fix to the version control commit
    comments.
  prefs: []
  type: TYPE_NORMAL
- en: The data you collect from your issue-tracking system should be reviewed on a
    periodic basis and discussed with the team. From this data, you can gain insights
    about what’s working and what’s not. You might be surprised by what you find.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Procrastinate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Institutional procrastination can be one of the hardest things to combat. Usually
    it’s something that doesn’t seem so bad: you notice that your team is routinely
    eating up a lot of hours on a weekly update that could be drastically improved
    by a little refactoring. Every week that you delay refactoring is another week
    you’re paying the inefficiency cost.^([2](ch22.xhtml#idm45053572053096)) Worse,
    some costs may increase over time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A great example of this is failing to update software dependencies. As the
    software ages, and team members change, it’s harder to find people who remember
    (or ever understood) the creaky old software. The support community starts to
    evaporate, and before long, the technology is deprecated and you can’t get any
    kind of support for it. You often hear this described as *technical debt*, and
    it’s a very real thing. While you should avoid procrastinating, understanding
    the website longevity can factor into these decisions: if you’re just about to
    redesign the whole website, there’s little value in eliminating technical debt
    that’s been building up.'
  prefs: []
  type: TYPE_NORMAL
- en: Do Routine QA Checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For each of your websites, you should have a *documented* routine QA check.
    That check should include a link checker, HTML and CSS validation, and running
    your tests. The key here is *documented*: if the items that compose the QA check
    aren’t documented, you will inevitably miss things. A documented QA checklist
    for each site not only helps prevent overlooked checks, but also allows new team
    members to be effective immediately. Ideally, the QA checklist can be executed
    by a nontechnical team member. This will give your (possibly) nontechnical manager
    confidence in your team and will allow you to spread QA responsibilities around
    if you don’t have a dedicated QA department. Depending on your relationship with
    your client, you may also want to share your QA checklist (or part of it) with
    the client; it’s a good way to remind them what they’re paying for, and that you
    are looking out for their best interests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of your routine QA check, I recommend using [Google Webmaster Tools](http://bit.ly/2qH3Y7L)
    and [Bing Webmaster Tools](https://binged.it/2qPwF2c). They are easy to set up,
    and they give you a very important view of your site: how the major search engines
    see it. It will alert you to any problems with your *robots.txt* file, HTML issues
    that are interfering with good search results, security issues, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Monitor Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re not running analytics on your website, you need to start now: it
    provides vital insight into not just the popularity of your website, but also
    how your users are using it. Google Analytics (GA) is excellent (and free!), and
    even if you supplement it with additional analytics services, there’s little reason
    not to include GA on your site.'
  prefs: []
  type: TYPE_NORMAL
- en: Often, you will be able to spot subtle UX issues by keeping an eye on your analytics.
    Are there certain pages that are not getting the traffic that you expect? That
    could indicate a problem with your navigation or promotions, or an SEO issue.
    Are your bounce rates high? That could indicate the content on your pages needs
    some tailoring (people are getting to your site by searching, but when they arrive
    on your site, they realize it’s not what they’re looking for). You should have
    an analytics checklist to go along with your QA checklist (it could even be part
    of your QA checklist). That checklist should be a “living document,” because over
    the lifetime of your website, you or your client may have shifting priorities
    about what content is most important.
  prefs: []
  type: TYPE_NORMAL
- en: Optimize Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Study after study has shown the dramatic effect of performance on website traffic.
    It’s a fast-paced world, and people expect their content delivered quickly, especially
    on mobile platforms. The number one principle in performance tuning is to *profile
    first, then optimize*. “Profiling” means finding out what actually is slowing
    your site down. If you spend days speeding up your content rendering when the
    problem is your social media plugins, you’re wasting precious time and money.
  prefs: []
  type: TYPE_NORMAL
- en: '[Google PageSpeed Insights](http://bit.ly/2Qa3l15) is a great way to measure
    the performance of your website (and now PageSpeed data is recorded in Google
    Analytics so you can monitor performance trends). I will not only give you an
    overall score for mobile and desktop performance, but also make prioritized suggestions
    about how to improve performance.'
  prefs: []
  type: TYPE_NORMAL
- en: Unless you currently have performance issues, it’s probably not necessary to
    do periodic performance checks (monitoring Google Analytics for significant changes
    in performance scores should be sufficient). However, it is gratifying to watch
    your boost in traffic when you improve performance.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritize Lead Tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the internet world, the strongest signal your visitors can give you to indicate
    interest in your product or service is contact information. You should treat this
    information with the utmost care. Any form that collects an email or phone number
    should be tested routinely as part of your QA checklist, and there should *always*
    be redundancy when you collect that information. The worst thing you can do to
    a potential customer is collect contact information and then lose it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because lead tracking is so critical to the success of your website, I recommend
    these five principles for collecting information:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a fallback in case JavaScript fails
  prefs: []
  type: TYPE_NORMAL
- en: 'Collecting customer information via Ajax is fine—it often results in a better
    user experience. However, if JavaScript should fail for any reason (the user could
    disable it, or a script on your website could have an error, preventing your Ajax
    from functioning correctly), the form submission should work anyway. A great way
    to test this is to disable JavaScript and use your form. It’s okay if the user
    experience is not ideal: the point is that user data is not lost. To implement
    this, *always* have a valid and working `action` parameter in your `<form>` tag,
    even if you normally use Ajax.'
  prefs: []
  type: TYPE_NORMAL
- en: If you use Ajax, get the URL from the form’s `action` parameter
  prefs: []
  type: TYPE_NORMAL
- en: While not strictly necessary, this helps prevent you from accidentally forgetting
    the `action` parameter on your `<form>` tags. If you tie your Ajax to successful
    no-JavaScript submission, it’s much harder to lose customer data. For example,
    your form tag could be `<form action="/submit/email" method="POST">`; then in
    your Ajax code, you would get the `action` for the form from the DOM, and use
    that in your Ajax submission code.
  prefs: []
  type: TYPE_NORMAL
- en: Provide at least one level of redundancy
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll probably want to save leads to a database or an external service such
    as Campaign Monitor. But what if your database fails, or Campaign Monitor goes
    down, or there’s a network issue? You still don’t want to lose that lead. A common
    way to provide redundancy is to send an email in addition to storing the lead.
    If you take this approach, you should not use a person’s email address, but a
    shared email address (such as *dev@meadowlarktravel.com*): the redundancy does
    no good if you send it to a person and that person leaves the organization. You
    could also store the lead in a backup database, or even a CSV file. However, *whenever*
    your primary storage fails, there should be some mechanism to alert you of the
    failure. Collecting a redundant backup is the first half of the battle; being
    aware of failures and taking appropriate action is the second half.'
  prefs: []
  type: TYPE_NORMAL
- en: In case of total storage failure, inform the user
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you have three levels of redundancy: your primary storage is Campaign
    Monitor, and if that fails, you back up to a CSV file and send an email to *dev@meadowlarktravel.com*.
    If *all* of these channels fail, the user should receive a message that says something
    like, “We’re sorry, we’re experiencing technical difficulties. Please try again
    later, or contact *support@meadowlarktravel.com*.”'
  prefs: []
  type: TYPE_NORMAL
- en: Check for positive confirmation, not absence of an error
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s quite common to have your Ajax handler return an object with an `err`
    property in the case of failure; the client code then has something that looks
    like this: `if(data.err){ /* inform user of failure */ } else { /* thank user
    for successful submission */ }`. Avoid this approach. There’s nothing wrong with
    setting an `err` property, but if there’s an error in your Ajax handler, leading
    the server to respond with a 500 response code or a response that isn’t valid
    JSON, *this approach could fail silently*. The user’s lead will disappear into
    the void, and they will be none the wiser. Instead, provide a `success` property
    for successful submission (even if the primary storage failed: if the user’s information
    was recorded by *something*, you may return `success`). Then your client-side
    code becomes `if(data.success){ /* thank user for successful submission */ } else
    { /* inform user of failure \*/ }`.'
  prefs: []
  type: TYPE_NORMAL
- en: Prevent “Invisible” Failures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I see it all the time: because developers are in a hurry, they record errors
    in ways that never get checked. Whether it is a logfile, a table in a database,
    a client-side console log, or an email that goes to a dead address, the end result
    is the same: *your website has quality problems that are going unnoticed*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number one defense you can have against this problem is to *provide an
    easy, standard method for logging errors*. Document it. Don’t make it difficult.
    Don’t make it obscure. Make sure every developer that touches your project is
    aware of it. It can be as simple as exposing a `meadowlarkLog` function (`log`
    is often used by other packages). It doesn’t matter if the function is recording
    to a database, flat file, email, or some combination thereof: the important thing
    is that it is standard. It also allows you to improve your logging mechanism (for
    example, flat files are less useful when you scale out your server, so you would
    modify your `meadowlarkLog` function to record to a database instead). Once you
    have the logging mechanism in place, documented, and everyone on your team knows
    about it, add “check logs” to your QA checklist, and have instructions on how
    to do that.'
  prefs: []
  type: TYPE_NORMAL
- en: Code Reuse and Refactoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One tragedy I see all the time is the reinvention of the wheel, over and over
    and over again. Usually it’s just small things: tidbits that feel easier to just
    rewrite than to dig up in some project that you did months ago. All of those little
    rewritten snippets add up. Worse, it flies in the face of good QA: you’re probably
    not going to go to the trouble to write tests for all these little snippets (and
    if you do, you’re doubling the time that you’re wasting by not reusing existing
    code). Each snippet—doing the same thing—can have different bugs. It’s a bad habit.'
  prefs: []
  type: TYPE_NORMAL
- en: Development in Node and Express offers some great ways to combat this problem.
    Node brought namespacing (via modules) and packages (via npm), and Express brings
    the concept of middleware. With these tools at your disposal, developing reusable
    code is a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: Private npm Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: npm registries are a great place to store shared code; it’s what npm was designed
    for, after all. In addition to simple storage, you get versioning, and a convenient
    way to include those packages in other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a fly in the ointment, though: unless you’re working in a completely
    open source organization, you may not want to create npm packages for all of your
    reusable code. (There can be other reasons than intellectual property protection,
    too: your packages could be so organization- or project-specific that it doesn’t
    make sense to make them available on a public registry.)'
  prefs: []
  type: TYPE_NORMAL
- en: One way to handle this is *private npm registries*. npm now offers Orgs, which
    allows you to publish private packages and give your developers paid logins, allowing
    them to access those private packages. See [npm](https://www.npmjs.com/products)
    for more information about npm Orgs and private packages.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we’ve seen throughout this book, writing middleware is not some big, scary,
    complicated thing: we’ve done it a dozen times in this book and, after a while,
    you will do it without even thinking about it. The next step, then, is to put
    reusable middleware in a package and put it in an npm registry.'
  prefs: []
  type: TYPE_NORMAL
- en: If you find that your middleware is too project-specific to put in a reusable
    package, you should consider refactoring the middleware to be configured for more
    general use. Remember that you can pass configuration objects into middleware
    to make them useful in a whole range of situations. Here is an overview of the
    most common ways to expose middleware in a Node module. All of the following assume
    that you’re using these modules as a package, and that package is called `meadowlark-stuff`.
  prefs: []
  type: TYPE_NORMAL
- en: Module exposes middleware function directly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use this method if your middleware doesn’t need a configuration object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Module exposes a function that returns middleware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use this method if your middleware needs a configuration object or other information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Module exposes an object that contains middleware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use this option if you want to expose multiple related middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you’re building a website, the focus is often on the launch, and for good
    reason: a lot of excitement surrounds a launch. However, a client that is delighted
    by a newly launched website will quickly become a dissatisfied customer if care
    isn’t taken in maintaining the website. Approaching your maintenance plan with
    the same care with which you launch websites will provide the kind of experience
    that keeps clients coming back.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch22.xhtml#idm45053572094072-marker)) As it happened, the term *postpartum*
    was a little too visceral. We now call them *retrospectives*.
  prefs: []
  type: TYPE_NORMAL
- en: '^([2](ch22.xhtml#idm45053572053096-marker)) Mike Wilson of [Fuel](http://www.fuelyouth.com)
    has this rule of thumb: “The third time you do something, take the time to automate
    it.”'
  prefs: []
  type: TYPE_NORMAL
