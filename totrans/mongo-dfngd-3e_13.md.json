["```\n$ mkdir -p ~/data/rs{1,2,3}\n```", "```\n> md c:\\data\\rs1 c:\\data\\rs2 c:\\data\\rs3\n```", "```\n$ mongod --replSet mdbDefGuide --dbpath ~/data/rs1 --port 27017 \\\n    --smallfiles --oplogSize 200\n$ mongod --replSet mdbDefGuide --dbpath ~/data/rs2 --port 27018 \\\n    --smallfiles --oplogSize 200\n$ mongod --replSet mdbDefGuide --dbpath ~/data/rs3 --port 27019 \\\n    --smallfiles --oplogSize 200\n```", "```\n> mongod --replSet mdbDefGuide --dbpath c:\\data\\rs1 --port 27017 \\\n    --smallfiles --oplogSize 200\n> mongod --replSet mdbDefGuide --dbpath c:\\data\\rs2 --port 27018 \\\n    --smallfiles --oplogSize 200\n> mongod --replSet mdbDefGuide --dbpath c:\\data\\rs3 --port 27019 \\\n    --smallfiles --oplogSize 200\n```", "```\n$ mongod --bind_ip localhost,192.51.100.1 --replSet mdbDefGuide \\\n    --dbpath ~/data/rs1 --port 27017 --smallfiles --oplogSize 200\n```", "```\n$ mongo --port 27017\n```", "```\n> rsconf = {\n    _id: \"mdbDefGuide\",\n    members: [\n      {_id: 0, host: \"localhost:27017\"},\n      {_id: 1, host: \"localhost:27018\"},\n      {_id: 2, host: \"localhost:27019\"} \n    ]\n  }\n> rs.initiate(rsconf)\n{ \"ok\" : 1, \"operationTime\" : Timestamp(1501186502, 1) }\n```", "```\n> rs.status()\n{\n    \"set\" : \"mdbDefGuide\",\n    \"date\" : ISODate(\"2017-07-27T20:23:31.457Z\"),\n    \"myState\" : 1,\n    \"term\" : NumberLong(1),\n    \"heartbeatIntervalMillis\" : NumberLong(2000),\n    \"optimes\" : {\n        \"lastCommittedOpTime\" : {\n            \"ts\" : Timestamp(1501187006, 1),\n            \"t\" : NumberLong(1)\n        },\n        \"appliedOpTime\" : {\n            \"ts\" : Timestamp(1501187006, 1),\n            \"t\" : NumberLong(1)\n        },\n        \"durableOpTime\" : {\n            \"ts\" : Timestamp(1501187006, 1),\n            \"t\" : NumberLong(1)\n        }\n    },\n    \"members\" : [\n        {\n            \"_id\" : 0,\n            \"name\" : \"localhost:27017\",\n            \"health\" : 1,\n            \"state\" : 1,\n            \"stateStr\" : \"PRIMARY\",\n            \"uptime\" : 688,\n            \"optime\" : {\n                \"ts\" : Timestamp(1501187006, 1),\n                \"t\" : NumberLong(1)\n            },\n            \"optimeDate\" : ISODate(\"2017-07-27T20:23:26Z\"),\n            \"electionTime\" : Timestamp(1501186514, 1),\n            \"electionDate\" : ISODate(\"2017-07-27T20:15:14Z\"),\n            \"configVersion\" : 1,\n            \"self\" : true\n        },\n        {\n            \"_id\" : 1,\n            \"name\" : \"localhost:27018\",\n            \"health\" : 1,\n            \"state\" : 2,\n            \"stateStr\" : \"SECONDARY\",\n            \"uptime\" : 508,\n            \"optime\" : {\n                \"ts\" : Timestamp(1501187006, 1),\n                \"t\" : NumberLong(1)\n            },\n            \"optimeDurable\" : {\n                \"ts\" : Timestamp(1501187006, 1),\n                \"t\" : NumberLong(1)\n            },\n            \"optimeDate\" : ISODate(\"2017-07-27T20:23:26Z\"),\n            \"optimeDurableDate\" : ISODate(\"2017-07-27T20:23:26Z\"),\n            \"lastHeartbeat\" : ISODate(\"2017-07-27T20:23:30.818Z\"),\n            \"lastHeartbeatRecv\" : ISODate(\"2017-07-27T20:23:30.113Z\"),\n            \"pingMs\" : NumberLong(0),\n            \"syncingTo\" : \"localhost:27017\",\n            \"configVersion\" : 1\n        },\n        {\n            \"_id\" : 2,\n            \"name\" : \"localhost:27019\",\n            \"health\" : 1,\n            \"state\" : 2,\n            \"stateStr\" : \"SECONDARY\",\n            \"uptime\" : 508,\n            \"optime\" : {\n                \"ts\" : Timestamp(1501187006, 1),\n                \"t\" : NumberLong(1)\n            },\n            \"optimeDurable\" : {\n                \"ts\" : Timestamp(1501187006, 1),\n                \"t\" : NumberLong(1)\n            },\n            \"optimeDate\" : ISODate(\"2017-07-27T20:23:26Z\"),\n            \"optimeDurableDate\" : ISODate(\"2017-07-27T20:23:26Z\"),\n            \"lastHeartbeat\" : ISODate(\"2017-07-27T20:23:30.818Z\"),\n            \"lastHeartbeatRecv\" : ISODate(\"2017-07-27T20:23:30.113Z\"),\n            \"pingMs\" : NumberLong(0),\n            \"syncingTo\" : \"localhost:27017\",\n            \"configVersion\" : 1\n        }\n    ],\n    \"ok\" : 1,\n    \"operationTime\" : Timestamp(1501187006, 1)\n}\n```", "```\nmdbDefGuide:PRIMARY>\n```", "```\n$ mongo --port 27018\n```", "```\n> use test\n> for (i=0; i<1000; i++) {db.coll.insert({count: i})}\n>\n> // make sure the docs are there\n> db.coll.count()\n1000\n```", "```\n> db.isMaster()\n{\n    \"hosts\" : [\n        \"localhost:27017\",\n        \"localhost:27018\",\n        \"localhost:27019\"\n    ],\n    \"setName\" : \"mdbDefGuide\",\n    \"setVersion\" : 1,\n    \"ismaster\" : true,\n    \"secondary\" : false,\n    \"primary\" : \"localhost:27017\",\n    \"me\" : \"localhost:27017\",\n    \"electionId\" : ObjectId(\"7fffffff0000000000000004\"),\n    \"lastWrite\" : {\n        \"opTime\" : {\n            \"ts\" : Timestamp(1501198208, 1),\n            \"t\" : NumberLong(4)\n        },\n        \"lastWriteDate\" : ISODate(\"2017-07-27T23:30:08Z\")\n    },\n    \"maxBsonObjectSize\" : 16777216,\n    \"maxMessageSizeBytes\" : 48000000,\n    \"maxWriteBatchSize\" : 1000,\n    \"localTime\" : ISODate(\"2017-07-27T23:30:08.722Z\"),\n    \"maxWireVersion\" : 6,\n    \"minWireVersion\" : 0,\n    \"readOnly\" : false,\n    \"compression\" : [\n        \"snappy\"\n    ],\n    \"ok\" : 1,\n    \"operationTime\" : Timestamp(1501198208, 1)\n}\n```", "```\n> secondaryConn = new Mongo(\"localhost:27019\")\nconnection to localhost:27019\n>\n> secondaryDB = secondaryConn.getDB(\"test\")\ntest\n```", "```\n> secondaryDB.coll.find()\nError: error: {\n    \"operationTime\" : Timestamp(1501200089, 1),\n    \"ok\" : 0,\n    \"errmsg\" : \"not master and slaveOk=false\",\n    \"code\" : 13435,\n    \"codeName\" : \"NotMasterNoSlaveOk\"\n}\n```", "```\n> secondaryConn.setSlaveOk()\n```", "```\n> secondaryDB.coll.find()\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85db\"), \"count\" : 0 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85dc\"), \"count\" : 1 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85dd\"), \"count\" : 2 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85de\"), \"count\" : 3 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85df\"), \"count\" : 4 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e0\"), \"count\" : 5 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e1\"), \"count\" : 6 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e2\"), \"count\" : 7 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e3\"), \"count\" : 8 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e4\"), \"count\" : 9 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e5\"), \"count\" : 10 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e6\"), \"count\" : 11 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e7\"), \"count\" : 12 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e8\"), \"count\" : 13 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85e9\"), \"count\" : 14 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85ea\"), \"count\" : 15 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85eb\"), \"count\" : 16 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85ec\"), \"count\" : 17 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85ed\"), \"count\" : 18 }\n{ \"_id\" : ObjectId(\"597a750696fd35621b4b85ee\"), \"count\" : 19 }\nType \"it\" for more\n```", "```\n> secondaryDB.coll.insert({\"count\" : 1001})\nWriteResult({ \"writeError\" : { \"code\" : 10107, \"errmsg\" : \"not master\" } })\n> secondaryDB.coll.count()\n1000\n```", "```\n> db.adminCommand({\"shutdown\" : 1})\n```", "```\n2017-07-27T20:10:50.612-0400 E QUERY    [thread1] Error: error doing query: \n failed: network error while attempting to run command 'shutdown' on host \n '127.0.0.1:27017'  :\nDB.prototype.runCommand@src/mongo/shell/db.js:163:1\nDB.prototype.adminCommand@src/mongo/shell/db.js:179:16\n@(shell):1:1\n2017-07-27T20:10:50.614-0400 I NETWORK  [thread1] trying reconnect to \n 127.0.0.1:27017 (127.0.0.1) failed\n2017-07-27T20:10:50.615-0400 I NETWORK  [thread1] reconnect \n 127.0.0.1:27017 (127.0.0.1) ok\nMongoDB Enterprise mdbDefGuide:SECONDARY> \n2017-07-27T20:10:56.051-0400 I NETWORK  [thread1] trying reconnect to \n 127.0.0.1:27017 (127.0.0.1) failed\n2017-07-27T20:10:56.051-0400 W NETWORK  [thread1] Failed to connect to \n 127.0.0.1:27017, in(checking socket for error after poll), reason: \n Connection refused\n2017-07-27T20:10:56.051-0400 I NETWORK  [thread1] reconnect \n 127.0.0.1:27017 (127.0.0.1) failed failed \nMongoDB Enterprise > \nMongoDB Enterprise > secondaryConn.isMaster()\n2017-07-27T20:11:15.422-0400 E QUERY    [thread1] TypeError: \n secondaryConn.isMaster is not a function :\n@(shell):1:1\n```", "```\n> secondaryDB.isMaster()\n```", "```\n{\n    \"hosts\" : [\n        \"localhost:27017\",\n        \"localhost:27018\",\n        \"localhost:27019\"\n    ],\n    \"setName\" : \"mdbDefGuide\",\n    \"setVersion\" : 1,\n    \"ismaster\" : true,\n    \"secondary\" : false,\n    \"primary\" : \"localhost:27018\",\n    \"me\" : \"localhost:27019\",\n    \"electionId\" : ObjectId(\"7fffffff0000000000000005\"),\n    \"lastWrite\" : {\n        \"opTime\" : {\n            \"ts\" : Timestamp(1501200681, 1),\n            \"t\" : NumberLong(5)\n        },\n        \"lastWriteDate\" : ISODate(\"2017-07-28T00:11:21Z\")\n    },\n    \"maxBsonObjectSize\" : 16777216,\n    \"maxMessageSizeBytes\" : 48000000,\n    \"maxWriteBatchSize\" : 1000,\n    \"localTime\" : ISODate(\"2017-07-28T00:11:28.115Z\"),\n    \"maxWireVersion\" : 6,\n    \"minWireVersion\" : 0,\n    \"readOnly\" : false,\n    \"compression\" : [\n        \"snappy\"\n    ],\n    \"ok\" : 1,\n    \"operationTime\" : Timestamp(1501200681, 1)\n}\n```", "```\n> rs.add(\"localhost:27020\")\n```", "```\n> rs.remove(\"localhost:27017\")\n{ \"ok\" : 1, \"operationTime\" : Timestamp(1501202441, 2) }\n```", "```\n> rs.config()\n{\n    \"_id\" : \"mdbDefGuide\",\n    \"version\" : 3,\n    \"protocolVersion\" : NumberLong(1),\n    \"members\" : [\n        {\n            \"_id\" : 1,\n            \"host\" : \"localhost:27018\",\n            \"arbiterOnly\" : false,\n            \"buildIndexes\" : true,\n            \"hidden\" : false,\n            \"priority\" : 1,\n            \"tags\" : {\n\n            },\n            \"slaveDelay\" : NumberLong(0),\n            \"votes\" : 1\n        },\n        {\n            \"_id\" : 2,\n            \"host\" : \"localhost:27019\",\n            \"arbiterOnly\" : false,\n            \"buildIndexes\" : true,\n            \"hidden\" : false,\n            \"priority\" : 1,\n            \"tags\" : {\n\n            },\n            \"slaveDelay\" : NumberLong(0),\n            \"votes\" : 1\n        },\n        {\n            \"_id\" : 3,\n            \"host\" : \"localhost:27020\",\n            \"arbiterOnly\" : false,\n            \"buildIndexes\" : true,\n            \"hidden\" : false,\n            \"priority\" : 1,\n            \"tags\" : {\n\n            },\n            \"slaveDelay\" : NumberLong(0),\n            \"votes\" : 1\n        }\n    ],\n    \"settings\" : {\n        \"chainingAllowed\" : true,\n        \"heartbeatIntervalMillis\" : 2000,\n        \"heartbeatTimeoutSecs\" : 10,\n        \"electionTimeoutMillis\" : 10000,\n        \"catchUpTimeoutMillis\" : -1,\n        \"getLastErrorModes\" : {\n\n        },\n        \"getLastErrorDefaults\" : {\n            \"w\" : 1,\n            \"wtimeout\" : 0\n        },\n        \"replicaSetId\" : ObjectId(\"597a49c67e297327b1e5b116\")\n    }\n}\n```", "```\n> rs.config()\n{\n    \"_id\" : \"testReplSet\",\n    \"version\" : 2,\n    \"members\" : [\n        {\n            \"_id\" : 0,\n            \"host\" : \"198.51.100.1:27017\"\n        },\n        {\n            \"_id\" : 1,\n            \"host\" : \"localhost:27018\"\n        },\n        {\n            \"_id\" : 2,\n            \"host\" : \"localhost:27019\"\n        }\n    ]\n}\n```", "```\n> var config = rs.config()\n> config.members[0].host = \"localhost:27017\"\n```", "```\n> rs.reconfig(config)\n```", "```\n> rs.add({\"host\" : \"server-4:27017\", \"priority\" : 1.5})\n```", "```\n> rs.isMaster()\n{\n    ...\n    \"hosts\" : [\n        \"server-1:27107\",\n        \"server-2:27017\",\n        \"server-3:27017\"\n    ],\n    ...\n}\n```", "```\n> var config = rs.config()\n> config.members[2].hidden = true\n0\n> config.members[2].priority = 0\n0\n> rs.reconfig(config)\n```", "```\n> rs.isMaster()\n{\n    ...\n    \"hosts\" : [\n        \"server-1:27107\",\n        \"server-2:27017\"\n    ],\n    ...\n}\n```", "```\n> rs.addArb(\"server-5:27017\")\n```", "```\n> rs.add({\"_id\" : 4, \"host\" : \"server-5:27017\", \"arbiterOnly\" : true})\n```"]