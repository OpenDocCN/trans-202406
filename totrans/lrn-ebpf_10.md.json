["```\n$ bpftrace -l \"*execve*\"\ntracepoint:syscalls:sys_enter_execve\ntracepoint:syscalls:sys_exit_execve\n...\nkprobe:do_execve_file\nkprobe:do_execve\nkprobe:__ia32_sys_execve\nkprobe:__x64_sys_execve\n...\n```", "```\nbpftrace -e 'kprobe:do_execve { @[comm] = count(); }'\nAttaching 1 probe...\n^C\n\n@[node]: 6\n@[sh]: 6\n@[cpuUsage.sh]: 18\n```", "```\ntracepoint:syscalls:sys_enter_open,\ntracepoint:syscalls:sys_enter_openat\n{\n    @filename[tid] = args->filename;\n}\n\ntracepoint:syscalls:sys_exit_open,\ntracepoint:syscalls:sys_exit_openat\n/@filename[tid]/\n{\n    $ret = args->ret;\n    $fd = $ret > 0 ? $ret : -1;\n    $errno = $ret > 0 ? 0 : - $ret;\n\n    printf(\"%-6d %-16s %4d %3d %s\\n\", pid, comm, $fd, $errno,\n        str(@filename[tid]));\n    delete(@filename[tid]);\n}\n```", "```\n./opensnoop.bt \nAttaching 6 probes...\nTracing open syscalls... Hit Ctrl-C to end.\nPID    COMM               FD ERR PATH\n297388 node               30   0 /home/liz/.vscode-server/data/User/\n                                 workspaceStorage/73ace3ed015\n297360 node               23   0 /proc/307224/cmdline\n297360 node               23   0 /proc/305897/cmdline\n297360 node               23   0 /proc/307224/cmdline\n```", "```\n$ bpftool prog list \n...\n494: tracepoint  name sys_enter_open  tag 6f08c3c150c4ce6e  gpl\n        loaded_at 2022-11-18T12:44:05+0000  uid 0\n        xlated 128B  jited 93B  memlock 4096B  map_ids 254\n495: tracepoint  name sys_enter_opena  tag 26c093d1d907ce74  gpl\n        loaded_at 2022-11-18T12:44:05+0000  uid 0\n        xlated 128B  jited 93B  memlock 4096B  map_ids 254\n496: tracepoint  name sys_exit_open  tag 0484b911472301f7  gpl\n        loaded_at 2022-11-18T12:44:05+0000  uid 0\n        xlated 936B  jited 565B  memlock 4096B  map_ids 254,255\n497: tracepoint  name sys_exit_openat  tag 0484b911472301f7  gpl\n        loaded_at 2022-11-18T12:44:05+0000  uid 0\n        xlated 936B  jited 565B  memlock 4096B  map_ids 254,255\n\n$ bpftool map list \n254: hash  flags 0x0\n        key 8B  value 8B  max_entries 4096  memlock 331776B\n255: perf_event_array  name printf  flags 0x0\n        key 4B  value 4B  max_entries 2  memlock 4096B\n```", "```\n#!/usr/bin/python3 ![1](assets/1.png)\nfrom bcc import BPF\n\nprogram = \"\"\"                                     ![2](assets/2.png)\nBPF_RINGBUF_OUTPUT(output, 1); ![3](assets/3.png) \n...\nint hello(void *ctx) {\n ...\n output.ringbuf_output(&data, sizeof(data), 0); ![4](assets/4.png)\n\n return 0;\n}\n\"\"\"\n\nb = BPF(text=program)                             ![5](assets/5.png)\n...\n\nb[\"output\"].open_ring_buffer(print_event)         ![6](assets/6.png)\n...\n```", "```\n    //go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG\n                         -cflags $BPF_CFLAGS bpf <C filename> -- -I../headers\n    ```", "```\nstruct bpf_map_def SEC(\"maps\") kprobe_map = {\n...\n};\n\nSEC(\"kprobe/sys_execve\")\nint kprobe_execve() {\n...\n}\n```", "```\ntype bpfMaps struct {\n    KprobeMap *ebpf.Map `ebpf:\"kprobe_map\"`\n}\n\ntype bpfPrograms struct {\n    KprobeExecve *ebpf.Program `ebpf:\"kprobe_execve\"`\n}\n```", "```\ntype bpfObjects struct {\n    bpfPrograms\n    bpfMaps\n}\n```", "```\nobjs := bpfObjects{}                                   \nloadBpfObjects(&objs, nil)                             ![1](assets/1.png) \ndefer objs.Close()\n\nkp, _ := link.Kprobe(\"sys_execve\", \n                     objs.KprobeExecve, nil)           ![2](assets/2.png)\ndefer kp.Close()\n\nticker := time.NewTicker(1 * time.Second)              ![3](assets/3.png)\ndefer ticker.Stop()\n\nfor range ticker.C {\n    var value uint64\n    objs.KprobeMap.Lookup(mapKey, &value)              ![4](assets/4.png)\n    log.Printf(\"%s called %d times\\n\", fn, value)\n}\n```", "```\nbpfModule := bpf.NewModuleFromFile(bpfObjectPath)         ![1](assets/1.png)\nbpfModule.BPFLoadObject()                                 ![2](assets/2.png)\n\nmymap, _ := bpfModule.GetMap(\"mymap\")                     ![3](assets/3.png)\nmymap.Update(key, value)\n\nrb, _ := bpfModule.InitRingBuffer(\"events\", eventsChannel, buffSize)\nrb.Start()\ne := <-eventsChannel                                      ![4](assets/4.png)\n```", "```\n#[xdp(name=\"myapp\")]                                         ![1](assets/1.png)\npub fn myapp(ctx: XdpContext) -> u32 {\n    match unsafe { try_myapp(ctx) } {                        ![2](assets/2.png)\n        Ok(ret) => ret,\n        Err(_) => xdp_action::XDP_ABORTED,\n    }\n}\n\nunsafe fn try_myapp(ctx: XdpContext) -> Result<u32, u32> {   ![3](assets/3.png)\n    info!(&ctx, \"received a packet\");\n    Ok(xdp_action::XDP_PASS)\n}\n```", "```\nlet mut bpf = Bpf::load(include_bytes_aligned!(\n   \"../../target/bpfel-unknown-none/release/myapp\"\n))?;                                                                     ![1](assets/1.png)\n\nlet program: &mut Xdp = bpf.program_mut(\"myapp\").unwrap().try_into()?;   ![2](assets/2.png) \n\nprogram.load()?;                                                         ![3](assets/3.png)\nprogram.attach(&opt.iface, XdpFlags::default())                          ![4](assets/4.png)\n```", "```\n$ sysctl -w kernel.bpf_stats_enabled=1\n```", "```\n$ bpftool prog list \n...\n2179: raw_tracepoint  name raw_tp_exec  tag 7f6d182e48b7ed38  gpl\n        run_time_ns 316876 run_cnt 4\n        loaded_at 2023-01-09T11:07:31+0000  uid 0\n        xlated 216B  jited 264B  memlock 4096B  map_ids 780,777\n        btf_id 953\n        pids hello(19173)\n```"]