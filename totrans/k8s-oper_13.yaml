- en: Appendix C. Role-Based Access Control (RBAC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the Operator SDK generates an Operator project (regardless of whether it
    is a Helm, Ansible, or Go-based Operator), it creates a number of manifest files
    for deploying the Operator. Many of these files grant permissions to the deployed
    Operator to perform the various tasks it does throughout its lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Operator SDK generates three files related to Operator permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*deploy/service_account.yaml*'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of authenticating as a user, Kubernetes provides a programmatic authentication
    method in the form of *service accounts*. A service account functions as the identity
    for the Operator pod when making requests against the Kubernetes API. This file
    simply defines the service account itself, and you do not need to manually edit
    it. More information on service accounts is available in [the Kubernetes documentation](https://oreil.ly/8oXS-).
  prefs: []
  type: TYPE_NORMAL
- en: '*deploy/role.yaml*'
  prefs: []
  type: TYPE_NORMAL
- en: This file creates and configures a *role* for the service account. The role
    dictates what permissions the service account has when interacting with the cluster
    APIs. The Operator SDK generates this file with extremely wide permissions that,
    for security reasons, you will want to edit before deploying your Operator in
    production. In the next section we explain more about refining the default permissions
    in this file.
  prefs: []
  type: TYPE_NORMAL
- en: '*deploy/role_binding.yaml*'
  prefs: []
  type: TYPE_NORMAL
- en: This file creates a *role binding*, which maps the service account to the role.
    You do not need to make any changes to the generated file.
  prefs: []
  type: TYPE_NORMAL
- en: Fine-Tuning the Role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At its most basic level, a role maps resource types to the actions (known as
    “verbs” in the role resource terminology) a user or service account may take on
    resources of those types. For example, the following role grants view (but not
    create or delete) permissions for deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the Operator SDK does not know the extent to which your Operator will
    need to interact with the cluster, the default role allows all actions on a variety
    of Kubernetes resource types. The following snippet, taken from an SDK-generated
    Operator project, illustrates this. The `*` wildcard allows all actions on the
    given resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Not surprisingly, it is considered a bad practice to grant such open and wide-reaching
    permissions to a service account. The specific changes you should make vary depending
    on the scope and behavior of your Operator. Generally speaking, you should restrict
    access as much as possible while still allowing your Operator to function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following role snippet provides the minimal functionality
    needed by the Visitors Site Operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Full details on configuring Kubernetes roles are outside the scope of this book.
    You can find more information in the [Kubernetes RBAC documentation](https://oreil.ly/osBC3).
  prefs: []
  type: TYPE_NORMAL
