- en: Chapter 10\. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章\. 安全性
- en: 'Running applications in Kubernetes comes with a shared responsibility between
    developers and ops folks to ensure that attack vectors are minimized, least-privileges
    principles are followed, and access to resources is clearly defined. In this chapter,
    we will present recipes that you can, and should, use to make sure your cluster
    and apps run securely. The recipes in this chapter cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中运行应用程序需要开发人员和运维人员共同承担责任，以确保最小化攻击向量、遵循最小权限原则，并清晰定义对资源的访问。在本章中，我们将介绍您可以使用的、也应该使用的配方，以确保集群和应用程序的安全运行。本章的配方涵盖以下内容：
- en: The role and usage of service accounts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务账户的角色和用法
- en: Role-based access control (RBAC)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: Defining a pod’s security context
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 Pod 的安全上下文
- en: 10.1 Providing a Unique Identity for an Application
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 为应用程序提供唯一标识
- en: Problem
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to grant an application access to restricted resources at a fine-grained
    level.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 想要以细粒度控制向应用程序授予对受限资源的访问权限。
- en: Solution
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create a service account with specific secret access and reference it within
    a pod specification.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有特定秘密访问权限的服务账户，并在 Pod 规范中引用它。
- en: 'To begin, create a dedicated namespace for this and the following recipe called
    `sec`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为此和以下示例创建一个专用命名空间，称为`sec`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a new service account called `myappsa` in that namespace and take
    a closer look at it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在该命名空间中创建一个名为`myappsa`的新服务账户，并仔细查看它：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can reference this service account in a pod manifest, which we’re calling
    *serviceaccountpod.yaml*, as shown next. Notice that we are also placing this
    pod in the `sec` namespace:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Pod 清单中引用此服务账户，我们将其称为*serviceaccountpod.yaml*，如下所示。请注意，我们还将此 Pod 放置在`sec`命名空间中：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the pod:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Pod：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The service account’s API credentials will be automounted at */var/run/secrets/kubernetes.io/serviceaccount/token*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户的 API 凭据将自动挂载到*/var/run/secrets/kubernetes.io/serviceaccount/token*位置：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Indeed, the `myappsa` service account token has been mounted in the expected
    place in the pod and can be used going forward.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`myappsa`服务账户的令牌已经挂载到 Pod 中预期的位置，并且可以在后续使用。
- en: While a service account on its own is not super useful, it forms the basis for
    fine-grained access control; see [Recipe 10.2](#rbac_intro) for more on this.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单独的服务账户并不是非常有用，但它构成了细粒度访问控制的基础；请参阅[配方 10.2](#rbac_intro)了解更多信息。
- en: Discussion
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Being able to identify an entity is the prerequisite for authentication and
    authorization. From the API server’s point of view, there are two sorts of entities:
    human users and applications. While user identity (management) is outside of the
    scope of Kubernetes, there is a first-class resource representing the identity
    of an app: the service account.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 能够识别实体是认证和授权的前提条件。从 API 服务器的角度看，有两种类型的实体：人类用户和应用程序。虽然用户身份（管理）不在 Kubernetes 的范围之内，但表示应用程序身份的一流资源是服务账户。
- en: 'Technically, the authentication of an app is captured by the token available
    in a file at the location */var/run/secrets/kubernetes.io/serviceaccount/token*,
    which is mounted automatically through a secret. The service accounts are namespaced
    resources and are represented as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，应用程序的认证由位于*/var/run/secrets/kubernetes.io/serviceaccount/token*位置的文件中的令牌捕获，该文件通过秘密自动挂载。服务账户是命名空间资源，其表示如下：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing the service accounts in a certain namespace gives you something like
    the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 列出特定命名空间中的服务账户会得到类似以下的结果：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice the service account called `default` here. This is created automatically;
    if you don’t set the service account for a pod explicitly, as was done in the
    solution, it will be assigned the `default` service account in its namespace.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里的服务账户名为`default`。此账户是自动创建的；如果未显式为 Pod 设置服务账户（就像解决方案中所做的那样），它将被分配到其命名空间中的`default`服务账户。
- en: See Also
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Managing Service Accounts”](https://oreil.ly/FsNK7) in the Kubernetes documentation'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“管理服务账户”](https://oreil.ly/FsNK7)，Kubernetes 文档中'
- en: '[“Configure Service Accounts for Pods”](https://oreil.ly/mNP_M) in the Kubernetes
    documentation'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“为 Pod 配置服务账户”](https://oreil.ly/mNP_M)，Kubernetes 文档中'
- en: '[“Pull an Image from a Private Registry”](https://oreil.ly/Fg06V) in the Kubernetes
    documentation'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“从私有注册表中拉取镜像”](https://oreil.ly/Fg06V)，Kubernetes 文档中'
- en: 10.2 Listing and Viewing Access Control Information
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.2 列出和查看访问控制信息
- en: Problem
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to learn what actions you’re allowed to do—​for example, updating a
    deployment or listing secrets.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您想了解您被允许做的操作——例如，更新部署或列出 secrets。
- en: Solution
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: The following solution assumes you’re using RBAC as the [authorization mode](https://oreil.ly/K7y65).
    RBAC is the default mode for access control on Kubernetes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的解决方案假设您使用 RBAC 作为[授权模式](https://oreil.ly/K7y65)。RBAC 是 Kubernetes 上默认的访问控制模式。
- en: 'To check if a certain action on a resource is allowed for a specific user,
    use `kubectl auth can-i`. For example, you can execute this command to check if
    the service account called `system:serviceaccount:sec:myappsa` that you created
    in the previous recipe is allowed to list pods in the namespace `sec`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查特定用户是否允许对资源执行某个操作，请使用 `kubectl auth can-i`。例如，您可以执行此命令来检查之前在上一节中创建的名为 `system:serviceaccount:sec:myappsa`
    的服务账户是否被允许在命名空间 `sec` 中列出 pods：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can assign roles to a service account using Kubernetes’s built-in RBAC
    system. For example, you can give the service account permission to view all resources
    in a given namespace by assigning it the predefined `view` cluster role for that
    namespace:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Kubernetes 内置的 RBAC 系统将角色分配给服务账户。例如，您可以通过为该命名空间分配预定义的 `view` 集群角色，为服务账户授予查看所有资源的权限：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if you run the same `can-i` command, you’ll see that the service account
    now has permission to read pods in the `sec` namespace:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您运行相同的 `can-i` 命令，您会看到服务账户现在有权限在 `sec` 命名空间中读取 pods：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For this recipe to work on Minikube, depending on the version you are running,
    you may need to add the parameter `--extra-config=apiserver.authorization-mode=Node,RBAC`
    when starting your Minikube cluster.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Minikube 上的此配方，根据您运行的版本，可能需要在启动 Minikube 集群时添加参数 `--extra-config=apiserver.authorization-mode=Node,RBAC`。
- en: 'To list the roles available in a namespace, do this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出命名空间中可用的角色，请执行以下操作：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output shows the predefined roles, which you can use directly for users
    and service accounts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了预定义的角色，您可以直接为用户和服务账户使用。
- en: 'To further explore a certain role and understand what actions are allowed,
    use the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步探索特定角色并了解允许的操作，请使用以下方法：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In addition to the default roles defined in the `kube-system` namespace, you
    can define your own; see [Recipe 10.3](#access_control).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `kube-system` 命名空间中定义的默认角色外，您还可以定义自己的角色；请参见[第 10.3 节](#access_control)。
- en: Discussion
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'As you can see in [Figure 10-1](#rbac-concept), there are a couple of moving
    parts when dealing with RBAC authorization:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在[图 10-1](#rbac-concept)中看到的，处理 RBAC 授权时有一些移动部件：
- en: An entity—​that is, a group, user, or service account
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实体——即组、用户或服务账户
- en: A resource, such as a pod, service, or secret
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如 pod、service 或 secret 等资源
- en: A role, which defines rules for actions on a resource
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个角色，定义了对资源的操作规则
- en: A role binding, which applies a role to an entity
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个角色绑定，将一个角色应用到一个实体上
- en: '![RBAC Concept](assets/kcb2_1001.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![RBAC 概念](assets/kcb2_1001.png)'
- en: Figure 10-1\. The RBAC concept
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-1\. RBAC 概念
- en: 'The actions on a resource that a role uses in its rules are the so-called verbs:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 角色在其规则中使用的资源操作称为动词：
- en: '`get`, `list`, `watch`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get`、`list`、`watch`'
- en: '`create`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create`'
- en: '`update`/`patch`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`/`patch`'
- en: '`delete`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`'
- en: 'Concerning the roles, we differentiate between two types:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 关于角色，我们区分两种类型：
- en: Cluster-wide
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 全局集群范围内
- en: Cluster roles and their respective cluster role bindings. Note that you can
    also attach cluster roles to regular role bindings.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 集群角色及其相应的集群角色绑定。请注意，您也可以将集群角色附加到常规角色绑定上。
- en: Namespace-wide
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间范围内
- en: Roles and role bindings.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 角色与角色绑定。
- en: In [Recipe 10.3](#access_control), we will further discuss how you can create
    your own rules and apply them to users and resources.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 10.3 节](#access_control)中，我们将进一步讨论如何创建并应用您自己的规则到用户和资源上。
- en: See Also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Authorization Overview”](https://oreil.ly/57NdL) in the Kubernetes documentation'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“授权概述”](https://oreil.ly/57NdL) 在 Kubernetes 文档中'
- en: '[“Using RBAC Authorization”](https://oreil.ly/n0i0c) in the Kubernetes documentation'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用 RBAC 授权”](https://oreil.ly/n0i0c) 在 Kubernetes 文档中'
- en: 10.3 Controlling Access to Resources
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3 控制对资源的访问
- en: Problem
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: For a given user or application, you want to allow or deny a certain action,
    such as viewing secrets or updating a deployment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定用户或应用程序，您希望允许或拒绝某个操作，如查看 secrets 或更新部署。
- en: Solution
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Let’s assume you want to restrict an app to be able to view only pods—that is,
    list pods and get details about pods.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望限制应用程序仅能查看 pods——即列出 pods 并获取 pods 的详细信息。
- en: We’ll work in a namespace called `sec`, so start by creating that namespace
    with `kubectl create namespace sec`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在名为 `sec` 的命名空间中操作，因此首先使用 `kubectl create namespace sec` 创建该命名空间。
- en: 'Then create a pod definition in a YAML manifest, *pod-with-sa.yaml*, using
    a dedicated service account, `myappsa` (see [Recipe 10.1](#service_accounts)):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 YAML 清单 *pod-with-sa.yaml* 中创建一个 pod 定义，使用专用服务账户 `myappsa`（详见 [Recipe 10.1](#service_accounts)）：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, define a role—let’s call it `podreader` in the manifest *pod-reader.yaml*—that
    defines the allowed actions on resources:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在清单 *pod-reader.yaml* 中定义一个角色——我们将其称为 `podreader`，定义在资源上的允许操作：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Last but not least, you need to apply the role `podreader` to the service account
    `myappsa`, using a role binding in *pod-reader-binding.yaml*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，您需要将角色 `podreader` 应用到服务账户 `myappsa`，使用 *pod-reader-binding.yaml*
    中的角色绑定：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When creating the respective resources, you can use the YAML manifests directly
    (assuming the service account has already been created):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建相应资源时，您可以直接使用 YAML 清单（假设服务账户已创建）：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Rather than creating manifests for the role and the role binding, you can use
    the following commands:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是为角色和角色绑定创建清单，您可以使用以下命令：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that this is a case of namespaced access control setup, since you’re using
    roles and role bindings. For cluster-wide access control, you would use the corresponding
    `create clusterrole` and `create clusterrolebinding` commands.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是一个命名空间访问控制设置的案例，因为您正在使用角色和角色绑定。要进行集群范围的访问控制，您将使用相应的 `create clusterrole`
    和 `create clusterrolebinding` 命令。
- en: Discussion
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Sometimes it’s not obvious whether you should use a role or a cluster role
    and/or role binding, so here are a few rules of thumb you might find useful:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候不明确是否应该使用角色还是集群角色和/或角色绑定，因此以下是一些您可能会发现有用的经验法则：
- en: If you want to restrict access to a namespaced resource (like a service or pod)
    in a certain namespace, use a role and a role binding (as we did in this recipe).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望限制对特定命名空间中的命名空间资源（如服务或 Pod）的访问，请使用角色和角色绑定（就像我们在这个示例中所做的那样）。
- en: If you want to reuse a role in a couple of namespaces, use a cluster role with
    a role binding.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想要在几个命名空间中重用一个角色，请使用带有角色绑定的集群角色。
- en: If you want to restrict access to cluster-wide resources such as nodes or to
    namespaced resources across all namespaces, use a cluster role with a cluster
    role binding.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望限制对集群范围资源（如节点）或跨所有命名空间的命名空间资源的访问，请使用带有集群角色绑定的集群角色。
- en: See Also
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Kubernetes documentation on using RBAC authorization](https://oreil.ly/n0i0c)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 授权使用 RBAC 的文档](https://oreil.ly/n0i0c)'
- en: 10.4 Securing Pods
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.4 保护 Pods
- en: Problem
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to define the security context for an app on the pod level. For example,
    you want to run the app as a nonprivileged process.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要在 pod 级别定义应用程序的安全上下文。例如，您希望将应用程序作为非特权进程运行。
- en: Solution
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: To enforce policies on the pod level in Kubernetes, use the `securityContext`
    field in a pod specification.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Kubernetes 的 pod 级别强制执行策略，请在 pod 规范中使用 `securityContext` 字段。
- en: 'Let’s assume you want an app running as a non-root user. For this, you would
    use the security context on the container level as shown in the following manifest,
    *securedpod.yaml*:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要一个作为非根用户运行的应用程序。为此，您将在容器级别使用安全上下文，如以下清单 *securedpod.yaml* 所示：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now create the pod and check the user under which the container runs:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建 pod 并检查容器运行的用户：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As expected, it’s running as the user with ID `5000`. Note that you can also
    use the `securityContext` field on the pod level rather than on specific containers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，它以用户ID `5000` 运行。请注意，您也可以在 pod 级别而不是特定容器上使用 `securityContext` 字段。
- en: Discussion
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: A more powerful method to enforce policies on the pod level is to use pod security
    admission. See [“Pod Security Admission”](https://oreil.ly/ujeV4) in the Kubernetes
    documentation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pod 级别强制执行策略的更强大方法是使用 pod 安全入场。详见 Kubernetes 文档中的 [“Pod Security Admission”](https://oreil.ly/ujeV4)。
- en: See Also
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Configure a Security Context for a Pod or Container”](https://oreil.ly/ENH8N)
    in the Kubernetes documentation'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“为 Pod 或容器配置安全上下文”](https://oreil.ly/ENH8N)，详见 Kubernetes 文档'
