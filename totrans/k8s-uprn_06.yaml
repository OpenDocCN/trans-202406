- en: Chapter 6\. Labels and Annotations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 标签和注释
- en: Kubernetes was made to grow with you as your application scales in both size
    and complexity. Labels and annotations are fundamental concepts in Kubernetes
    that let you work in sets of things that map to how *you* think about your application.
    You can organize, mark, and cross-index all of your resources to represent the
    groups that make the most sense for your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 旨在随着应用程序在规模和复杂性上的扩展而成长。标签和注释是 Kubernetes 中的基本概念，让您可以按照您对应用程序的思考方式来处理一组事物。您可以组织、标记和交叉索引所有资源，以表示对应用程序最有意义的组。
- en: '*Labels* are key/value pairs that can be attached to Kubernetes objects such
    as Pods and ReplicaSets. They can be arbitrary and are useful for attaching identifying
    information to Kubernetes objects. Labels provide the foundation for grouping
    objects.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*标签*是可以附加到 Kubernetes 对象（如 Pods 和 ReplicaSets）的键/值对。它们可以是任意的，并且对于向 Kubernetes
    对象附加标识信息非常有用。标签为对象分组提供了基础。'
- en: '*Annotations*, on the other hand, provide a storage mechanism that resembles
    labels: key/value pairs designed to hold nonidentifying information that tools
    and libraries can leverage. Unlike labels, annotations are not meant for querying,
    filtering, or otherwise differentiating Pods from each other.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*Annotations*，另一方面，提供了一种类似标签的存储机制：键/值对设计，用于保存工具和库可以利用的非标识信息。与标签不同，注释并不用于查询、过滤或以其他方式区分
    Pod 之间的不同。'
- en: Labels
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签
- en: 'Labels provide identifying metadata for objects. These are fundamental qualities
    of the object that will be used for grouping, viewing, and operating. The motivations
    for labels grew out of Google’s experience in running large and complex applications.
    A couple of lessons emerged from this experience:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标签为对象提供标识元数据。这些是对象的基本特性，将用于分组、查看和操作。标签的动机源于谷歌在运行大型复杂应用程序方面的经验。从这些经验中得出了几个教训：
- en: Production abhors a singleton. When deploying software, users often start with
    a single instance. However, as the application matures, these singletons often
    multiply and become sets of objects. With this in mind, Kubernetes uses labels
    to deal with sets of objects instead of single instances.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境不容忍单例。在部署软件时，用户通常从单个实例开始。然而，随着应用程序的成熟，这些单例经常会增加并成为一组对象。考虑到这一点，Kubernetes
    使用标签来处理对象集合，而不是单个实例。
- en: Any hierarchy imposed by the system will fall short for many users. In addition,
    user groupings and hierarchies change over time. For instance, a user may start
    out with the idea that all apps are made up of many services. However, over time,
    a service may be shared across multiple apps. Kubernetes labels are flexible enough
    to adapt to these situations and more.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统强加的任何层次结构对许多用户来说都不够用。此外，用户的分组和层次结构随时间而变化。例如，用户可能最初认为所有应用程序都由许多服务组成。然而，随着时间的推移，一个服务可能会跨多个应用程序共享。Kubernetes
    标签具有足够的灵活性来适应这些情况及更多。
- en: See the great site reliability book [*Site Reliability Engineering*](http://shop.oreilly.com/product/0636920041528.do)
    by Betsy Beyer et al. (O’Reilly) for deeper background on how Google approaches
    production systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解谷歌如何处理生产系统的背景，请参阅 [*Site Reliability Engineering*](http://shop.oreilly.com/product/0636920041528.do)
    一书，作者是 Betsy Beyer 等人（O’Reilly）。
- en: 'Labels have simple syntax. They are key/value pairs, where both the key and
    value are represented by strings. Label keys can be broken down into two parts:
    an optional prefix and a name, separated by a slash. The prefix, if specified,
    must be a DNS subdomain with a 253-character limit. The key name is required and
    have a maximum length of 63 characters. Names must also start and end with an
    alphanumeric character and permit the use of dashes (`-`), underscores (`_`),
    and dots (`.`) between characters.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 标签具有简单的语法。它们是键/值对，其中键和值都由字符串表示。标签键可以分为两部分：可选的前缀和一个名称，用斜杠分隔。如果指定了前缀，则必须是一个 DNS
    子域，长度不超过 253 个字符。键名是必需的，最大长度为 63 个字符。名称还必须以字母数字字符开头和结尾，并允许在字符之间使用破折号（`-`）、下划线（`_`）和点号（`.`）。
- en: Label values are strings with a maximum length of 63 characters. The contents
    of the label values follow the same rules as label keys. [Table 6-1](#label_examples_table)
    shows some valid label keys and values.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 标签值是最多为 63 个字符的字符串。标签值的内容遵循与标签键相同的规则。[表格 6-1](#label_examples_table) 显示了一些有效的标签键和值。
- en: Table 6-1\. Label examples
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 6-1 标签示例
- en: '| Key | Value |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 值 |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `acme.com/app-version` | `1.0.0` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `acme.com/app-version` | `1.0.0` |'
- en: '| `appVersion` | `1.0.0` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `appVersion` | `1.0.0` |'
- en: '| `app.version` | `1.0.0` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `app.version` | `1.0.0` |'
- en: '| `kubernetes.io/cluster-service` | `true` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `kubernetes.io/cluster-service` | `true` |'
- en: When domain names are used in labels and annotations, they are expected to be
    aligned to that particular entity in some way. For example, a project might define
    a canonical set of labels used to identify the various stages of application deployment
    such as staging, canary, and production. Or a cloud provider might define provider-specific
    annotations that extend Kubernetes objects to activate features specific to their
    service.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当标签和注释中使用域名时，它们预期与某个特定实体对齐。例如，一个项目可能会定义一组规范的标签，用于标识应用程序部署的各个阶段，如 staging、canary
    和 production。或者云提供商可能会定义提供商特定的注释，扩展 Kubernetes 对象以激活其服务特定的功能。
- en: Applying Labels
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用标签
- en: Here we create a few deployments (a way to create an array of Pods) with some
    interesting labels. We’ll take two apps (called `alpaca` and `bandicoot`) and
    have two environments and two versions for each.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们创建了几个部署（创建一组 Pods 的一种方式），并添加了一些有趣的标签。我们将两个应用（称为 `alpaca` 和 `bandicoot`），每个应用有两个环境和两个版本。
- en: 'First, create the `alpaca-prod` deployment and set the `ver`, `app`, and `env`
    labels:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建 `alpaca-prod` 部署，并设置 `ver`、`app` 和 `env` 标签：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create the `alpaca-test` deployment and set the `ver`, `app`, and `env`
    labels with the appropriate values:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建 `alpaca-test` 部署，并设置 `ver`、`app` 和 `env` 标签为适当的值：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, create two deployments for `bandicoot`. Here we name the environments
    `prod` and `staging`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建两个 `bandicoot` 的部署。这里我们将环境命名为 `prod` 和 `staging`：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At this point, you should have four deployments—`alpaca-prod`, `alpaca-test`,
    `bandicoot-prod`, and `bandicoot-staging`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该有四个部署——`alpaca-prod`、`alpaca-test`、`bandicoot-prod` 和 `bandicoot-staging`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can visualize this as a Venn diagram based on the labels ([Figure 6-1](#fig0601)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据标签绘制一个基于 Venn 图的示意图（见 [图 6-1](#fig0601)）。
- en: '![](assets/kur3_0601.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/kur3_0601.png)'
- en: Figure 6-1\. Visualization of labels applied to our deployments
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1\. 我们部署的标签可视化
- en: Modifying Labels
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改标签
- en: 'You can also apply or update labels on objects after you create them:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建对象后，你也可以应用或更新标签：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Warning
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: There is a caveat here. In this example, the `kubectl label` command will only
    change the label on the deployment itself; it won’t affect any objects that the
    deployment creates, such as ReplicaSets and Pods. To change those, you’ll need
    to change the template embedded in the deployment (see [Chapter 10](ch10.xhtml#deployments_chapter)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个注意事项。在本例中，`kubectl label` 命令只会更改部署本身的标签；它不会影响部署创建的任何对象，比如 ReplicaSets 和
    Pods。要更改这些对象，你需要修改部署中嵌入的模板（参见 [第 10 章](ch10.xhtml#deployments_chapter)）。
- en: 'You can also use the `-L` option to `kubectl get` to show a label value as
    a column:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `-L` 选项来将 `kubectl get` 结果中的标签值显示为一列：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can remove a label by applying a dash-suffix:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过应用一个带破折号后缀的标签来移除一个标签：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Label Selectors
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签选择器
- en: Label selectors are used to filter Kubernetes objects based on a set of labels.
    Selectors use a simple syntax for Boolean expressions. They are used both by end
    users (via tools like `kubectl`) and by different types of objects (such as how
    a ReplicaSet relates to its Pods).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 标签选择器用于根据一组标签过滤 Kubernetes 对象。选择器使用布尔表达式的简单语法。它们被最终用户（通过诸如 `kubectl` 的工具）和不同类型的对象（例如
    ReplicaSet 如何与其 Pods 相关联）使用。
- en: Each deployment (via a ReplicaSet) creates a set of Pods using the labels specified
    in the template embedded in the deployment. This is configured by the `kubectl
    run` command.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部署（通过 ReplicaSet）使用部署中嵌入的模板指定的标签创建一组 Pods。这由 `kubectl run` 命令配置。
- en: 'Running the `kubectl get pods` command should return all the Pods currently
    running in the cluster. We should have a total of six `kuard` Pods across our
    three environments:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `kubectl get pods` 命令应该返回当前在集群中运行的所有 Pods。我们应该在我们的三个环境中总共有六个 `kuard` Pods：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'You may see a new label that you haven’t seen before: `pod-template-hash`.
    This label is applied by the deployment so it can keep track of which Pods were
    generated from which template versions. This allows the deployment to manage updates
    cleanly, as will be covered in depth in [Chapter 10](ch10.xhtml#deployments_chapter).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到一个之前没见过的新标签：`pod-template-hash`。这个标签是由部署应用的，用于跟踪由哪些模板版本生成的 Pod。这使得部署可以清晰地管理更新，详细内容将在
    [第 10 章](ch10.xhtml#deployments_chapter) 中介绍。
- en: 'If we want to list only Pods that have the `ver` label set to `2`, we could
    use the `--selector` flag:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想列出具有 `ver` 标签设置为 `2` 的 Pods，我们可以使用 `--selector` 标志：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we specify two selectors separated by a comma, only the objects that satisfy
    both will be returned. This is a logical AND operation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定两个由逗号分隔的选择器，仅返回满足两个条件的对象。这是一个逻辑 AND 操作：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can also ask if a label is one of a set of values. Here we ask for all Pods
    where the `app` label is set to `alpaca` or `bandicoot` (which will be all six
    Pods):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以询问一个标签是否属于一组值。在这里，我们要求所有具有 `app` 标签设置为 `alpaca` 或 `bandicoot` 的 Pod（这将是所有六个
    Pod）：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we can ask if a label is set at all. Here we are asking for all of
    the deployments with the `canary` label set to anything:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以询问一个标签是否设置为任何内容。在这里，我们要求所有具有 `canary` 标签设置为任何内容的部署：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There are also “negative” versions of each of these, as shown in [Table 6-2](#selector-operators-table).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有这些的“负”版本，如[表格 6-2](#selector-operators-table)所示。
- en: Table 6-2\. Selector operators
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-2\. 选择器运算符
- en: '| Operator | Description |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `key=value` | `key` is set to `value` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `key=value` | `key` 被设置为 `value` |'
- en: '| `key!=value` | `key` is not set to `value` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `key!=value` | `key` is not set to `value` |'
- en: '| `key in (value1, value2)` | `key` is one of `value1` or `value2` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `key in (value1, value2)` | `key` 是 `value1` 或 `value2` 的之一 |'
- en: '| `key notin (value1, value2)` | `key` is not one of `value1` or `value2` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `key notin (value1, value2)` | `key` 不是 `value1` 或 `value2` 的之一 |'
- en: '| `key` | `key` is set |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `key` | `key` 被设置 |'
- en: '| `!key` | `key` is not set |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `!key` | `key` 没有设置 |'
- en: 'For example, asking if a key, in this case `canary`, is not set can look like:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果问一个键在本例中是 `canary` 是否没有设置，可以看作：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can combine positive and negative selectors:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以组合正面和负面选择器：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Label Selectors in API Objects
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签选择器在 API 对象中
- en: A Kubernetes object uses a label selector to refer to a set of other Kubernetes
    objects. Instead of a simple string as described in the previous section, we use
    a parsed structure.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Kubernetes 对象使用标签选择器来引用一组其他 Kubernetes 对象。与上一部分中描述的简单字符串不同，我们使用解析的结构。
- en: 'For historical reasons (Kubernetes doesn’t break API compatibility!), there
    are two forms. Most objects support a newer, more powerful set of selector operators.
    A selector of `app=alpaca,ver in (1, 2)` would be converted to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因（Kubernetes 不破坏 API 兼容性！），有两种形式。大多数对象支持一个更新、更强大的选择器运算符集。一个 `app=alpaca,ver
    in (1, 2)` 的选择器会被转换为：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This example uses compact YAML syntax. This is an item in a list (`matchExpressions`)
    that is a map with three entries. The last entry (`values`) has a value that is
    a list with two items. All of the terms are evaluated as a logical AND. The only
    way to represent the `!=` operator is to convert it to a `NotIn` expression with
    a single value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用紧凑的 YAML 语法。这是一个列表中的一个条目（`matchExpressions`），它是一个包含三个条目的映射。最后一个条目（`values`）具有一个值，这是一组包含两个项目的列表。所有的术语都被评估为逻辑
    AND。表示 `!=` 运算符的唯一方法是将其转换为单值的 `NotIn` 表达式。
- en: 'The older form of specifying selectors (used in `ReplicationController`s and
    services) only supports the `=` operator. The `=` operator selects target objects
    where its set of key/value pairs all match the object. The selector `app=alpaca,ver=1`
    would be represented like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的选择器指定形式（用于 `ReplicationController` 和服务）仅支持 `=` 运算符。`=` 运算符选择其键/值对集合都与对象匹配的目标对象。选择器
    `app=alpaca,ver=1` 将被表示为：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Labels in the Kubernetes Architecture
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 架构中的标签
- en: In addition to enabling users to organize their infrastructure, labels play
    a critical role in linking various related Kubernetes objects. Kubernetes is a
    purposefully decoupled system. There is no hierarchy and all components operate
    independently. However, in many cases, objects need to relate to one another,
    and these relationships are defined by labels and label selectors.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用户能够组织其基础设施外，标签在连接各种相关的 Kubernetes 对象方面发挥了关键作用。Kubernetes 是一个有目的地解耦系统。没有层次结构，所有组件都独立操作。然而，在许多情况下，对象需要相互关联，这些关联由标签和标签选择器定义。
- en: For example, ReplicaSets, which create and maintain multiple replicas of a Pod,
    find the Pods that they are managing via a selector. Likewise, a service load
    balancer finds the Pods to which it should bring traffic via a selector query.
    When a Pod is created, it can use a node selector to identify a particular set
    of nodes onto which it can be scheduled. When people want to restrict network
    traffic in their cluster, they use Network Policy in conjunction with specific
    labels to identify Pods that should or should not be allowed to communicate with
    each other.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ReplicaSets 通过选择器创建和维护多个 Pod 的副本，找到它们管理的 Pod。同样，服务负载均衡器通过选择器查询找到应将流量引导到哪些
    Pod。当创建 Pod 时，它可以使用节点选择器标识可以调度到的特定节点集。当人们想要在其集群中限制网络流量时，他们使用网络策略与特定标签配合使用，以识别应允许或不允许彼此通信的
    Pod。
- en: Labels are a powerful and ubiquitous glue that holds a Kubernetes application
    together. Though your application will likely start out with a simple set of labels
    and queries, you should expect it to grow in size and sophistication with time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是将 Kubernetes 应用程序紧密连接在一起的强大而普遍的粘合剂。尽管您的应用程序可能从简单的标签和查询开始，但您应该预期随着时间的推移，其规模和复杂性会不断增长。
- en: Annotations
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注解
- en: Annotations provide a place to store additional metadata for Kubernetes objects
    where the sole purpose of the metadata is assisting tools and libraries. They
    are a way for other programs driving Kubernetes via an API to store some opaque
    data with an object. Annotations can be used for the tool itself or to pass configuration
    information between external systems.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注解提供了一个存储 Kubernetes 对象的附加元数据的位置，其中元数据的唯一目的是辅助工具和库。它们是通过 API 驱动 Kubernetes 的其他程序存储对象的一些不透明数据的一种方式。注解可以用于工具本身或在外部系统之间传递配置信息。
- en: While labels are used to identify and group objects, annotations are used to
    provide extra information about where an object came from, how to use it, or policy
    around that object. There is overlap, and it is a matter of taste as to when to
    use an annotation or a label. When in doubt, add information to an object as an
    annotation and promote it to a label if you find yourself wanting to use it in
    a selector.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然标签用于标识和分组对象，但注解用于提供关于对象来源、如何使用对象或关于对象策略的额外信息。存在重叠，何时使用注解或标签是一种品味问题。当存在疑问时，将信息作为注解添加到对象中，并在发现希望在选择器中使用它时将其提升为标签。
- en: 'Annotations are used to:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注解用于：
- en: Keep track of a “reason” for the latest update to an object.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录对象最新更新的“原因”。
- en: Communicate a specialized scheduling policy to a specialized scheduler.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向专门的调度器传达专门的调度策略。
- en: Extend data about the last tool to update the resource and how it was updated
    (used for detecting changes by other tools and doing a smart merge).
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展关于最后更新资源的工具及其更新方式的数据（用于检测其他工具的更改并进行智能合并）。
- en: Attach build, release, or image information that isn’t appropriate for labels
    (may include a Git hash, timestamp, pull request number, etc.).
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加不适合标签的构建、发布或图像信息（可能包括 Git 哈希、时间戳、拉取请求编号等）。
- en: Enable the Deployment object (see [Chapter 10](ch10.xhtml#deployments_chapter))
    to keep track of ReplicaSets that it is managing for rollouts.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 Deployment 对象（参见 [第 10 章](ch10.xhtml#deployments_chapter)）来跟踪其管理的 ReplicaSets
    以进行部署。
- en: Provide extra data to enhance the visual quality or usability of a UI. For example,
    objects could include a link to an icon (or a base64-encoded version of an icon).
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供额外的数据以增强 UI 的视觉质量或可用性。例如，对象可以包含一个指向图标的链接（或图标的 base64 编码版本）。
- en: Prototype alpha functionality in Kubernetes (instead of creating a first-class
    API field, the parameters for that functionality are encoded in an annotation).
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中原型化 alpha 功能（而不是创建一个一流的 API 字段，该功能的参数被编码在一个注解中）。
- en: Annotations are used in various places in Kubernetes, with the primary use case
    being rolling deployments. During rolling deployments, annotations are used to
    track rollout status and provide the necessary information required to roll back
    a deployment to a previous state.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的各个地方都使用注解，主要用例是滚动部署。在滚动部署期间，注解用于跟踪部署状态并提供回滚到先前状态所需的必要信息。
- en: Avoid using the Kubernetes API server as a general-purpose database. Annotations
    are good for small bits of data that are highly associated with a specific resource.
    If you want to store data in Kubernetes but you don’t have an obvious object to
    associate it with, consider storing that data in some other, more appropriate
    database.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 避免将Kubernetes API服务器用作通用数据库。注解适用于与特定资源高度关联的小数据块。如果想要在Kubernetes中存储数据，但没有明显的对象可关联，考虑将该数据存储在其他更合适的数据库中。
- en: Annotation keys use the same format as label keys. However, because they are
    often used to communicate information between tools, the “namespace” part of the
    key is more important. Example keys include `deployment.kubernetes.io/revision`
    or `kubernetes.io/change-cause`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注解键使用与标签键相同的格式。然而，由于它们经常用于在工具之间传递信息，键的“命名空间”部分更为重要。示例键包括`deployment.kubernetes.io/revision`或`kubernetes.io/change-cause`。
- en: The value component of an annotation is a free-form string field. While this
    allows maximum flexibility as users can store arbitrary data, because this is
    arbitrary text, there is no validation of any format. For example, it is not uncommon
    for a JSON document to be encoded as a string and stored in an annotation. It
    is important to note that the Kubernetes server has no knowledge of the required
    format of annotation values. If annotations are used to pass or store data, there
    is no guarantee the data is valid. This can make tracking down errors more difficult.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注解的值组件是一个自由格式的字符串字段。尽管这允许用户存储任意数据，因为这是任意文本，所以没有任何格式的验证。例如，将JSON文档编码为字符串并存储在注解中并不罕见。重要的是要注意，Kubernetes服务器不了解注解值的所需格式。如果注解用于传递或存储数据，则无法保证数据有效性。这可能会使错误追踪变得更加困难。
- en: 'Annotations are defined in the common `metadata` section in every Kubernetes
    object:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注解在每个Kubernetes对象的公共`metadata`部分中定义：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Warning
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Annotations are very convenient and provide powerful loose coupling, but use
    them judiciously to avoid an untyped mess of data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注解非常方便，提供了强大的松耦合，但需要谨慎使用，以避免数据混乱。
- en: Cleanup
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'It is easy to clean up all of the deployments that we started in this chapter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 清理本章中启动的所有部署非常容易：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you want to be more selective, you can use the `--selector` flag to choose
    which deployments to delete.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更加选择性地删除部署，可以使用`--selector`标志来选择要删除的部署。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Labels are used to identify and optionally group objects in a Kubernetes cluster.
    They are also used in selector queries to provide flexible runtime grouping of
    objects, such as Pods.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 标签用于在Kubernetes集群中标识并可选地分组对象。它们还用于选择器查询中，以提供对象的灵活运行时分组，如Pods。
- en: Annotations provide object-scoped key/value metadata storage used by automation
    tooling and client libraries. They can also be used to hold configuration data
    for external tools such as third-party schedulers and monitoring tools.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注解提供了由自动化工具和客户端库使用的对象范围的键/值元数据存储。它们还可用于保存外部工具（如第三方调度器和监控工具）的配置数据。
- en: Labels and annotations are vital to understanding how key components in a Kubernetes
    cluster work together to ensure the desired cluster state. Using them properly
    unlocks the true power of Kubernetes’s flexibility and provides a starting point
    for building automation tools and deployment workflows.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 标签和注解对于理解Kubernetes集群中关键组件如何协作以确保所需的集群状态至关重要。正确使用它们可以释放Kubernetes灵活性的真正威力，并为构建自动化工具和部署工作流提供起点。
