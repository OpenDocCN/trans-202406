["```\nfunction reactive(obj) {\n  return new Proxy(obj, {\n    get(target, key) {\n      track(target, key)\n      return target[key]\n    },\n    set(target, key, value) {\n      target[key] = value\n      trigger(target, key)\n    }\n  })\n}\n\nfunction ref(value) {\n  const refObject = {\n    get value() {\n      track(refObject, 'value')\n      return value\n    },\n    set value(newValue) {\n      value = newValue\n      trigger(refObject, 'value')\n    }\n  }\n  return refObject\n}\n```", "```\nimport { ref, watchEffect } from \"vue\";\n\nconst count = ref(0);\n\nwatchEffect(() => {\n  document.body.innerHTML = `count is: ${count.value}`;\n});\n\n// updates the DOM\ncount.value++;\n```", "```\nconst count = signal(0);\n\ncount(); // access the value\ncount.set(1); // set new value\ncount.update((v) => v + 1); // update based on previous value\n\n// mutate deep objects with same identity\nconst state = signal({ count: 0 });\nstate.mutate((o) => {\n  o.count++;\n});\n```", "```\n<script>\nlet count = 0;\n\nfunction increment() {\n    count += 1;\n}\n</script>\n\n<div>{count}</div>\n<button on:click={increment}>\n  Click me\n</button>\n```", "```\n<script>\nlet count = 0;\nlet doubleCount = 0;\n\n$: doubleCount = count * 2;\n\nfunction increment() {\n    count += 1;\n}\n</script>\n\n<div>{doubleCount}</div>\n<button on:click={increment}>\n  Click me\n</button>\n```", "```\n<script>\n`-   let count = 0;`\n+   let count = $state(0);\n\n    function increment() {\n        count += 1;\n    }\n</script>\n\n<button on:click={increment}>\n    clicks: {count}\n</button>\n```", "```\nimport { writable } from \"svelte/store\";\n\nexport function createCounter() {\n  const { subscribe, update } = writable(0);\n\n  return {\n    subscribe,\n    increment: () => update((n) => n + 1),\n  };\n}\n```", "```\n<script>\n+   import { createCounter } from './counter.js';\n+\n+   const counter = createCounter();\n`-   let count = 0;`\n`-`\n`-   function increment() {`\n`-       count += 1;`\n`-   }`\n</script>\n\n`-<button on:click={increment}>`\n`-   clicks: {count}`\n+<button on:click={counter.increment}>\n+   clicks: {$counter}\n</button>\n```", "```\n-import { writable } from 'svelte/store';\n\nexport function createCounter() {\n`-   const { subscribe, update } = writable(0);`\n+   let count = $state(0);\n\n    return {\n`-       subscribe,`\n`-       increment: () => update((n) => n + 1)`\n+       get count() { return count },\n+       increment: () => count += 1\n   };\n}\n```", "```\n<script>\n    import { createCounter } from './counter.js';\n\n    const counter = createCounter();\n</script>\n\n<button on:click={counter.increment}>\n`-   clicks: {$counter}`\n+   clicks: {counter.count}\n</button>\n```", "```\n<script>\n    export let width;\n    export let height;\n\n    // the compiler knows it should recalculate `area`\n    // when either `width` or `height` change...\n    $: area = width * height;\n\n    // ...and that it should log the value of `area`\n    // when _it_ changes\n    $: console.log(area);\n</script>\n```", "```\n// @errors: 7006 2304\nconst multiplyByHeight = (width) => width * height;\n$: area = multiplyByHeight(width);\n```", "```\n<script>\n    let { width, height } = $props(); // instead of `export let`\n\n    const area = $derived(width * height);\n\n    $effect(() => {\n        console.log(area);\n    });\n</script>\n```", "```\nimport { createSignal } from \"solid-js\";\n\nfunction Component() {\n  const [count, setCount] = createSignal(0);\n\n  return (\n    <>\n      <div>{count()}</div>\n      <button onClick={() => setCount(count() + 1)}>Increment</button>\n    </>\n  );\n}\n```", "```\nconst [count, setCount] = createSignal(0);\n\ncount(); // access the value\nsetCount(1); // update the value\n```", "```\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```", "```\nv = f(s)\n```", "```\nimport { createSignal } from \"solid\";\n\nfunction Counter() {\n  const [count, setCount] = createSignal(0);\n\n  function increment() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <p>{count()}</p>\n      <button onClick={increment()}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```", "```\n<script>\n  let items = ['Apple', 'Banana', 'Cherry'];\n  $: count = items.length;\n</script>\n\n<p>{count} items:</p>\n<ul>\n  {#each items as item (item)}\n    <li>{item}</li>\n  {/each}\n</ul>\n```", "```\nimport React, { useState } from \"react\";\n\nfunction ItemList() {\n  const [items, setItems] = useState([\"Apple\", \"Banana\", \"Cherry\"]);\n  const count = items.length;\n\n  // ... update items somewhere ...\n\n  return (\n    <div>\n      <p>{count} items:</p>\n      <ul>\n        {items.map((item) => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ItemList;\n```", "```\nimport React, { useState } from \"react\";\nimport\n{ ComponentWithExpensiveChildren } from \"./ExpensiveComponent\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={increment}>Increment</button>\n      <ComponentWithExpensiveChildren />\n    </div>\n  );\n}\n\nexport default Counter;\n```", "```\nimport React, { useState, memo } from \"react\";\nimport { ComponentWithExpensiveChildren } from \"./ComponentWithExpensiveChildren\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={increment}>Increment</button>\n      <MemoizedComponentWithExpensiveChildren />\n    </div>\n  );\n}\n\nconst MemoizedComponentWithExpensiveChildren = memo(\n  ComponentWithExpensiveChildren\n);\n\nexport default Counter;\n```"]