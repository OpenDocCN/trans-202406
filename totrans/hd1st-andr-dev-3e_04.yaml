- en: 'Chapter 2\. Building Interactive Apps: *Apps That Do Something*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0037-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Most apps need to respond to the user in some way.**'
  prefs: []
  type: TYPE_NORMAL
- en: And in this chapter, you’ll see how you can make your apps **more interactive**.
    You’ll discover how to add an ***OnClickListener*** to your activity code so that
    your app can **listen to what the user’s doing**, and make an appropriate response.
    You’ll find out more about **how to design layouts**, and you’ll learn how each
    UI component you add to your layout is derived from **a common View ancestor**.
    Along the way, you’ll discover **why String resources are so important** for flexible,
    well-designed apps.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a Beer Adviser app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create an Android app, you’re usually going to want it to *do* something.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re going to show you how to create an app that the user
    can interact with. We’ll create a Beer Adviser app where users can select the
    color of beer they enjoy most, click a button, and get back a list of tasty beers
    to try out.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0038-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s how the app will be structured:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The layout activity_main.xml specifies what the app will look like.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It includes three UI components:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A drop-down list of values called a spinner, which allows the user to choose
    which color of beer they want
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A button that, when clicked, will return a selection of beers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A text view that displays the beers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The file strings.xml includes any String resources needed by the layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The button’s label, for example, and the beer colors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The activity MainActivity specifies how the app should interact with the
    user.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It takes the beer color the user chooses, and uses this to display a list of
    beers the user might be interested in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here’s what we’re going to do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So let’s get to work. There are a few steps you need to go through to build
    the Beer Adviser app (we’ll tackle these throughout the rest of the chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a project.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’re creating a brand-new app, so you’ll need to create a new project that
    includes an empty activity and a layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0039-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Update the layout.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve set up the project, you need to amend the layout so that it includes
    all the UI components the app needs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0039-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Add String resources.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll replace any hardcoded text with `String` resources so that all the text
    that’s used by the app is held in a single file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0039-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Make the button respond to clicks.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The layout only specifies the visuals. To make the button *do* something when
    it’s clicked, you need to write some activity code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0039-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Write the application logic.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll add a new method to the activity, and use it to make sure users get the
    right beer based on their selection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s start by creating the project.
  prefs: []
  type: TYPE_NORMAL
- en: Create the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0040-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The steps for creating the new project are nearly identical to the ones we
    used in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Android Studio, close any open projects, and choose “New Project” from
    the welcome screen. This starts the wizard you saw in [Chapter 1](ch01.xhtml#getting_startedcolon_diving_in).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the Phone and Tablet option is selected, and choose the Empty Activity
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name of “Beer Adviser” and a package name of “com.hfad.beeradviser”
    and accept the default save location. Make sure that the language is set to Kotlin,
    and that the minimum SDK is API 21 so that it will run on most Android devices.
    Then click on the Finish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0040-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve created a default activity and layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0041-01.png)'
  prefs: []
  type: TYPE_IMG
- en: When you click on the Finish button, Android Studio creates a new project containing
    an activity named *MainActivity.kt* and a layout named *activity_main.xml*, just
    as it did for the project we created in [Chapter 1](ch01.xhtml#getting_startedcolon_diving_in).
    We need to modify these files to make the app look and behave the way we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by updating the layout file *activity_main.xml* to modify the app’s
    appearance. We’ll build up the layout over the next few pages, but for now, switch
    to the Project view of Android Studio’s explorer, go to the *app/src/main/res/layout*
    folder, and open the file *activity_main.xml*. Then switch to the code editor,
    and **replace the entire code** in *activity_main.xml* with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0041-02.png)![image](Images/f0041-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code features a linear layout (denoted by the `<LinearLayout>` element)
    and a text view (denoted by the `<TextView>` element). You’ll find out more about
    these elements later in the chapter, but for now, all you need to know is that
    the linear layout is used to arrange UI components in a vertical column, and the
    text view displays the text “Beer types”.
  prefs: []
  type: TYPE_NORMAL
- en: Any changes you make to a layout’s XML are reflected in the design editor. Switch
    to this now by clicking on the Design option at the top of the editor pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0041-04.png)'
  prefs: []
  type: TYPE_IMG
- en: A closer look at the design editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned in [Chapter 1](ch01.xhtml#getting_startedcolon_diving_in), the
    design editor presents you with a more visual way of editing layout code than
    editing XML. It features two different views of the layouts design. One shows
    you how the layout will look on an actual device, and the other shows you a blueprint
    of its structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0042-02.png)![image](Images/f0042-03.png)'
  prefs: []
  type: TYPE_IMG
- en: To the left of the design editor is a palette that contains components you can
    drag to the layout. You’ll use this on the next page to add a button to the layout,
    which later in the chapter will be used to update the text that’s displayed in
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0042-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a button using the design editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add a button to the layout, find the Button component in the palette, click
    on it, and then drag it into the design editor so it’s positioned above the text
    view. The button appears in the layout’s design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0043-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Changes in the design editor are reflected in the XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dragging UI components to the layout like this is a convenient way of updating
    the layout. If you switch to the code editor, you’ll see that adding the button
    via the design editor has added some more code to the underlying XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0043-03.png)'
  prefs: []
  type: TYPE_IMG
- en: activity_main.xml has a new button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you’ve just seen, the design editor has added a new `<Button>` element to
    *activity_main.xml*. Its code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A button in Androidville is a UI component the user can click to trigger an
    action. The `<Button>` element includes attributes controlling its size and appearance.
    These attributes aren’t unique to buttons—other UI components such as text views
    have them too.
  prefs: []
  type: TYPE_NORMAL
- en: Buttons and text views are subclasses of the same Android View class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s a very good reason why buttons and text views have attributes in common—they
    both inherit from the same Android `**View**` class. You’ll find out more about
    this as we go through the book, but for now, here are some of the most common
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: android:id
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This gives the component an identifying name so that the activity code can
    access it and control its behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: android:layout_width, android:layout_height
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These attributes specify the width and height of the component. `"wrap_content"`
    means it should be just big enough for the content, and `"match_parent"` means
    it should be as wide as the layout containing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: android:text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This tells Android what text the component should display, such as the text
    that appears on a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0044-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A closer look at the layout code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at the layout code, and break it down so that you
    can see what it’s actually doing (don’t worry if your code looks a little different,
    just follow along):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0045-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The <LinearLayout> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first element in the layout code is the `<LinearLayout>`. This element tells
    Android that the different UI components in the layout should be displayed one
    after another in a single row or column.
  prefs: []
  type: TYPE_NORMAL
- en: 'You specify the orientation using the `android:orientation` attribute. In this
    example we’re using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: so the UI components are displayed in a single vertical column.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<LinearLayout>` element (on the previous page) contains two further elements:
    a `<Button>` and a `<TextView>`.'
  prefs: []
  type: TYPE_NORMAL
- en: The <Button> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first element is the `<Button>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Using a linear layout means that UI components are displayed in a vertical
    column or a horizontal row.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As this is the first element inside the `<LinearLayout>`, it appears first in
    the layout (at the top of the screen). It has a `layout_width` of `"match_parent"`,
    which makes it as wide as its parent element, the `<LinearLayout>`. Its `layout_height`
    is `"wrap_content`“, which means it should be just tall enough to display its
    text.
  prefs: []
  type: TYPE_NORMAL
- en: The <TextView> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final element inside the `<LinearLayout>` is the `<TextView>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0046-02.png)'
  prefs: []
  type: TYPE_IMG
- en: As this is the second element and we’ve set the `<LinearLayout>` element’s orientation
    to `"vertical"`, it’s displayed underneath the button (the first element). Its
    `layout_width` and `layout_height` attributes are both set to `"wrap_content`"
    so that it takes up just enough space to contain its text.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve seen how adding components to the design editor adds them to the layout
    XML. The opposite applies too—any changes you make to the layout XML are applied
    to the design. Let’s see this in action.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s update the layout XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll update the layout by adding a new **spinner** component, and tweaking
    the button and text view components that are already there. A spinner is a drop-down
    list of values. When you click it, it expands to show you the list so that you
    can pick a single value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the *activity_main.xml* code with the following changes (highlighted
    in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0047-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The XML changes are reflected in the design editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you’ve changed the layout XML, switch to the design editor. Instead of
    displaying a layout containing a button with a text view underneath it, the design
    editor now shows a spinner, button, and text view centered horizontally in a single
    column like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0048-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A spinner provides a drop-down list of values. It allows you to choose a
    single value from a set of values.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**All the UI components you add to layout files—such as buttons, spinners,
    and text views—use the same or similar attributes because they are all types of
    View. Behind the scenes, they all inherit from the same Android View class.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These UI components are often referred to as **views** because they inherit
    from the same View class.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now added all the components to *activity_main.xml* that we need for the
    Beer Adviser app’s layout. We still have more work to do, but let’s take the app
    for a test drive so that we can see how it looks on a device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Run the app by choosing the “Run ‘app’” command from the Run menu or clicking
    on the Run button, and wait patiently for the app to load.
  prefs: []
  type: TYPE_NORMAL
- en: When the app appears on your device, notice that it displays an empty spinner,
    button, and text view in a single column.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0049-02.png)'
  prefs: []
  type: TYPE_IMG
- en: There are warnings in the layout…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0050-01.png)'
  prefs: []
  type: TYPE_IMG
- en: When you develop layouts in Android Studio, the IDE automatically checks your
    code for errors, and alerts you to potential improvements. An easy way of viewing
    any warnings or suggestions is to switch to the design editor view of the layout,
    and check out the component tree panel. This panel is usually located beneath
    the palette, and it displays a hierarchical tree of the components in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'If Android Studio has any suggestions for how to improve your code, you’ll
    see a badge or icon to the right of the relevant component. We have warning badges,
    for example, next to the `find_beer` and `brands` components. If we hover the
    mouse cursor over each one, we can see messages warning us about hardcoded text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0050-02.png)![image](Images/f0050-03.png)'
  prefs: []
  type: TYPE_IMG
- en: …because there’s hardcoded text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we defined the layout, we hardcoded the text that needs to be displayed
    in the text view and button components using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0050-04.png)'
  prefs: []
  type: TYPE_IMG
- en: While this approach is fine when you’re just learning, hardcoding the text in
    the layout isn’t the best approach.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you’ve created an app that’s a big hit on your local Google Play Store.
    You don’t want to limit yourself to just one country or language—you want to make
    it available internationally and for different languages. But if you’ve hardcoded
    all of the text in your layout files, sending the app global will be difficult.
  prefs: []
  type: TYPE_NORMAL
- en: It also makes it much harder to make app-wide changes to the text. Imagine your
    boss asks you to change the wording in an app because the company’s changed its
    name. If you’ve hardcoded all of the text, this means that you might need to edit
    a whole host of files in order to change the text.
  prefs: []
  type: TYPE_NORMAL
- en: So what’s the alternative?
  prefs: []
  type: TYPE_NORMAL
- en: Put text in a String resource file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A better approach is to put the text values into a `**String**` **resource file**.
    This makes it much easier to make app-wide changes to the text used in the application.
    Instead of having to change hardcoded text values in a whole host of different
    activity and layout files, you only need to edit the text in the resource file.
  prefs: []
  type: TYPE_NORMAL
- en: This approach also makes it much easier to localize the app. Instead of hardcoding
    the text in one language, you can provide separate `String` resource files for
    each language you want to support. This enables the app to switch the language
    that’s used in the app so that it matches the device locale.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio helps you extract String resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a layout that contains hardcoded text, Android Studio provides you
    with an easy way of extracting the text and adding it to a `String` resource file.
    Simply click (or double-click) on each badge warning you about the hardcoded text,
    then click on the Fix button to fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You might need to scroll down to see this button.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try this with one of the components in the layout. Make sure that you’re
    using the design view of *activity_main.xml*, and click on the warning badge next
    to the `find_beer` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll be shown an explanation about why hardcoded text is a problem. Scroll
    to the end of this explanation, then click on the Fix button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0051-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Extract the String resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you click on the Fix button, the Extract Resource window appears. This
    allows you to specify the name of the `String` resource, its value, and the name
    of the `String` resource file. Make sure that the resource name is “find_beer”,
    the file name is “strings.xml”, the source set is “main”, and the values directory
    is checked. Then click on the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the OK button, Android Studio adds the `find_beer` component’s
    hardcoded text to a `String` resource file named *strings.xml*, and changes the
    layout’s XML so that it uses the `String` resource. We’ll look at both of these
    changes, starting with the `String` resource file.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0052-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A String resource has been added to strings.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*strings.xml* is the app’s default `String` resource file, and Android Studio
    automatically creates this file for you when you create a new project. Open *strings.xml*
    now by opening it in Android Studio’s explorer: you’ll find *strings.xml* in the
    *app/src/main/res/values* folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file contents should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0052-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code describes two `String` resources, where each resource is a name/value
    pair. The first resource is named `app_name` and has a value of “Beer Adviser”,
    while the second is named `find_beer` and has a value of “Find Beer”. The second
    resource was added when we extracted the hardcoded text for the `find_beer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0052-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll look at `String` resources in more detail a few pages ahead, but for now,
    let’s see what change was made to *activity_main.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: activity_main.xml uses the String resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we told Android Studio to extract the hardcoded text, Android Studio automatically
    updated the `find_beer` button in *activity_main.xml* so that it uses the extracted
    `String` resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated code for the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0053-02.png)![image](Images/f0053-03.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `find_beer` button’s `text` attribute has been changed to
    `"@string/find_beer"`. So what does this mean?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the first part, `@string`. This is just a way of telling Android
    to look up a text value from a `String` resource file. Here, it’s the file *strings.xml*
    that you saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0053-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The second part, `find_beer`, tells Android to **look up the value of a resource
    with the name** `**find_beer**`. So `"@string/find_beer"` is like saying “look
    up the `String` resource with the name `find_beer`, and use the associated text
    value.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0053-05.png)'
  prefs: []
  type: TYPE_IMG
- en: You also can extract String resources manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve now learned what changes Android Studio makes to the code when you ask
    it to extract hardcoded text into a `String` resource. You can also make these
    changes yourself by directly updating the code in *strings.xml* and *activity_main.xml*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how by changing the hardcoded “Beer types” text that’s used by the
    `brands` component’s `text` attribute so that it uses a `String` resource.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In your own projects, it’s likely that you’ll just use the wizard. We’re showing
    you how to manually edit the XML because we need to make sure that the code you
    create matches ours, and updating the XML is the best way of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: Add and use a new String resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll start by creating a new `String` resource named `brands`. Open *strings.xml*
    (located in the *app/src/main/res/values* folder), and add a new line for the
    `String` resource so that it includes the change shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0054-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you’ve added the `String` resource, open *activity_main.xml* and update
    the code for the `brands` text view so that it uses the new resource. Update the
    code so that it includes the change shown here (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0054-03.png)'
  prefs: []
  type: TYPE_IMG
- en: There’s a summary about using `String` resources on the next page. After that,
    we’ll take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve updated the layout to use `String` resources instead of hardcoded
    text values, let’s run the app to see how it’s looking. Run the app as before
    by choosing the “Run ‘app’” command from the Run menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the app, the text that’s displayed on the button and in the text
    view has been updated so that it uses the `String` values we added to *strings.xml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0056-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add values to the spinner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app’s current layout includes a spinner, but when we click on it, it’s empty.
    This is because we haven’t yet told the spinner what values it should display.
    Each time you use a spinner in the layout code, you must specify an associated
    list of values, or it won’t include any, and Android Studio may give you warning
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'You specify a list of values for a spinner in a similar way to how you specify
    the text that’s displayed on a button or in a text view: by adding a resource
    to *strings.xml* and referring to the resource in the layout. Instead of specifying
    a single value in a `String` resource, however, you add multiple `String`s to
    an *array* resource, and use this array for the spinner’s list of values.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resources are noncode assets, such as images or Strings, used by the app.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adding an array resource is similar to adding a String
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you already know, you add a `String` resource to *strings.xml* using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: where `string_name` is the name of the `String`, and `string_value` is the value
    that’s displayed in the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an array of `String`s to a `String` resource file, you use the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0059-02.png)'
  prefs: []
  type: TYPE_IMG
- en: where `string_array_name` is the name of the array, and `string_value1`, `string_value2`,
    and `string_value3` are the individual `String` values that make up the array.
  prefs: []
  type: TYPE_NORMAL
- en: In this app, we want to add a `String` array resource where each item in the
    array is a beer color. We’ll then attach this array to the spinner so that when
    the user clicks on the spinner, the beer colors will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add the new `String` array.
  prefs: []
  type: TYPE_NORMAL
- en: Add the string-array to strings.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add the `String` array, open up *strings.xml*, and add the code below (in
    bold). This adds a `string-array` resource named `beer_colors` that we’ll attach
    to the spinner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0060-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Get the spinner to display the array’s values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A layout references a `String` array resource using similar syntax to how it
    would retrieve the value of a `String` resource. Rather than use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'you use the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0060-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '`where array_name` is the name of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use this in the layout. Go to the layout file *activity_main.xml* and
    add an `entries` attribute to the spinner like this (in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0060-04.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ll show you the full code for *activity_main.xml* on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: The full code for activity_main.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the entire code for *activity_main.xml*. Make sure the code for this
    file includes all of the code shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0061-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s see what impact the changes have had on the app. Run the app, and you
    should get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0062-02.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, we’ve created a layout (*activity_main.xml*) that includes a spinner,
    a button, and a text view. These views use a `String` resource file (*strings.xml*)
    for their `String` and array values.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do is get the app to update the `brands` text view
    each time the user clicks the button.
  prefs: []
  type: TYPE_NORMAL
- en: We need to make the app interactive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0063-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Beer Adviser app has the correct appearance and includes all the views
    we need, but it doesn’t yet provide any beer recommendations. To make the app
    interactive, we need to make the app do something when the user clicks the `find_beer`
    button. We want the app to behave something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The user chooses a beer color from the spinner and clicks the button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code in MainActivity responds to the button being clicked.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**MainActivity passes the selected beer color to a method we’ll create named
    getBeers.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `getBeers()` method finds matching brands for the beer color.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**MainActivity updates the brands text view so that it displays the list of
    recommended beers on the device.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0063-02.png)'
  prefs: []
  type: TYPE_IMG
- en: To make the app respond to the user in this way, we need to update the code
    in *MainActivity.kt*, as this is the code that’s responsible for how the app behaves.
    Android Studio created this file for us when we created the project, so let’s
    take a look at the current code.
  prefs: []
  type: TYPE_NORMAL
- en: What the MainActivity code looks like
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio created *MainActivity.kt* for us when we created the project.
    Open this file now (if it’s not already open) by going to the *app/src/main/java*
    folder and double-clicking on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for *MainActivity.kt* that Android Studio created for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0064-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code is all you need to create a basic activity. As you can see, it’s
    a class that extends `AppCompatActivity`, and overrides its `onCreate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: All activities (not just this one) have to extend an activity class such as
    `AppCompatActivity`. You’ll find out more about this in [Chapter 5](ch05.xhtml#the_activity_lifecyclecolon_being_an_act),
    but for now, all you need to know is that when a class extends `AppCompatActivity`,
    it transforms your plain old Kotlin class into a full-fledged, card-carrying Android
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0064-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All activities must also implement the `onCreate()` method. This method gets
    called when the activity object gets created, and it’s used to perform basic setup
    such as what layout the activity is associated with. This is done via a call to
    `setContentView()`. In the example above, the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: tells Android that this activity uses *activity_main.xml* as its layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0064-04.png)'
  prefs: []
  type: TYPE_IMG
- en: You now know what the current `MainActivity` code does. So how do we get it
    to respond when the user clicks the `find_beer` button?
  prefs: []
  type: TYPE_NORMAL
- en: A button can listen for on-click events…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each time the user does something in your app it’s called an **event**. There
    are many different event types in Androidville, such as clicking a button, swiping
    the screen, or pressing a hardware key on the device.
  prefs: []
  type: TYPE_NORMAL
- en: In this app, we want to know when the user clicks on the `find_beer` button
    so that we can get the app to do something in response. We can get the app to
    listen for the button’s **on-click** event so that each time it occurs, we can
    update the text in the `brands` text view.
  prefs: []
  type: TYPE_NORMAL
- en: '**You can make a button respond to on-click events by adding an OnClickListener
    to the button.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: …using an OnClickListener
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can make the app listen for a button’s on-click events by adding an `**OnClickListener**`
    to the button. Each time the button is clicked, the `OnClickListener` “hears”
    the click, and responds to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0065-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You specify what action the `OnClickListener` should take by passing it a block
    of code—a lambda—that specifies what should happen when the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your Kotlin lambda knowledge feels a little rusty, we suggest that you refer
    to Head First Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we want to update the `brands` text view each time the `find_beer` button
    is clicked. This means that we need to add an `OnClickListener` to the `find_beer`
    button, and pass it a lambda that tells it how to update the text view.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s find out how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Get a reference to the button…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add an `OnClickListener` to the `find_beer` button, you first need to get
    a reference to the button in the activity code. You do this using a method named
    `**findViewById**`.
  prefs: []
  type: TYPE_NORMAL
- en: The `findViewById` method lets you get a reference to any view in the layout
    that has an ID. Simply specify the view’s type and ID, and the method returns
    a reference to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this app, we want to get a reference to the button with an ID of “find_beer”,
    so we use the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0066-02.png)'
  prefs: []
  type: TYPE_IMG
- en: …and call its setOnClickListener method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have a reference to the button, you can add an `OnClickListener` to
    it by calling its `setOnClickListener()` method using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0066-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we’re adding the `OnClickListener` code to `MainActivity`’s `onCreate()`
    method. `onCreate()` runs when the activity gets created, so adding the call to
    `setOnClickListener()` here means that the `find_beer` button will be able to
    start responding to clicks as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve added an `OnClickListener` to the button, let’s make it do something
    when the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Pass a lambda to the setOnClickListener method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You make the button do something when it’s clicked by passing a lambda to its
    `setOnClickListener()` method. The lambda specifies what you want to happen each
    time the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0067-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So if you want the button to update some text or perform some other action,
    you put the code to do this in the lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0067-03.png)'
  prefs: []
  type: TYPE_IMG
- en: We ultimately want the activity to display a list of beer recommendations, but
    for now, let’s make the button update the `brands` text view with the value that’s
    selected in the `beer_color` spinner. This will let us test that the button’s
    `OnClickListener` works before we focus on getting some *real* beer advice.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, there are two more things we need to know: how to edit
    the text in a text view, and how to get the value that’s selected in the spinner.'
  prefs: []
  type: TYPE_NORMAL
- en: How to edit a text view’s text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you’ve already learned, you change the text that’s displayed in a text view
    by updating its `text` attribute in the layout XML. To update the text using activity
    code, we can therefore get a reference to the text view and update its `text`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the text that’s displayed in the `brands` text view to say “Gottle
    of geer”, for example, you could use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0068-02.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Beer Adviser app, we want to update the text view’s `text` property to
    the value that the user has selected in the `beer_color` spinner. To do this,
    we need to find out how to get this value.
  prefs: []
  type: TYPE_NORMAL
- en: How to get the spinner’s value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can get the current value in a spinner using its `**selectedItem**` property.
    To get the current value from the `beer_color` spinner, for example, you would
    use the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0068-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The `selectedItem` property can hold any type of value, not just `String`s,
    so you need to convert its value before you can use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Beer Adviser app, for example, we know that the `beer_color` spinner
    holds an array of `String` values, so the item the user selects must be a `String`.
    To use this value, we therefore need to convert it to a `String` using code like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0068-04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You could also use it in a `String` template using the following code instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You now know enough to make the `find_beer` button get the `beer_color` spinner’s
    value, and display it in the `brands` text view. Before we show you the full code,
    see if you can piece it together yourself by having a go at the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your **job** is to take code snippets from the pool and place them into the
    blank lines in `MainActivity`’s `onCreate()` method. You may **not** use the same
    code snippet more than once, and you won’t need to use all the snippets. Your
    **goal** is to make the `find_beer` button respond to clicks by getting it to
    update the `brands` text view with the value selected in the `beer_color` spinner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![image](Images/f0069-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Note: each thing from the pool can only be used once!**'
  prefs: []
  type: TYPE_NORMAL
- en: Pool Puzzle Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your **job** is to take code snippets from the pool and place them into the
    blank lines in `MainActivity`’s `onCreate()` method. You may **not** use the same
    code snippet more than once, and you won’t need to use all the snippets. Your
    **goal** is to make the `find_beer` button respond to clicks by getting it to
    update the `brands` text view with the value selected in the `beer_color` spinner.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0070-01.png)![image](Images/f0070-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The updated code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to update `MainActivity` so that the `find_beer` button responds to
    clicks. Each time the button is clicked, we want to update the text that’s displayed
    in the `brands` text view so that it includes the beer color the user selects
    in the spinner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is the updated *MainActivity.kt* code featuring the code you pieced together
    in the previous exercise. Update *MainActivity.kt* to include these changes (in
    bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0071-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we take the code for a test drive, let’s go through what the code does
    when it runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you run the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we run the app, choose a beer color, and click on the Find Beer button,
    the following things happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The user chooses a beer color from the spinner and clicks on the Find Beer
    button.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0072-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The button’s OnClickListener hears that it’s been clicked.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0072-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The OnClickListener code in MainActivity retrieves the currently selected
    value of the spinner (in this case Amber).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0072-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**It then updates the text property of the text view to reflect that the user
    has chosen Amber in the spinner.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0072-05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you’ve updated *MainActivity.kt*, and then run the app.
  prefs: []
  type: TYPE_NORMAL
- en: When we choose a beer color from the spinner and click on the Find Beer button,
    the value we selected is displayed in the text view.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0073-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the getBeers() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0074-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know that the `find_beer` button can respond to clicks, let’s change
    its behavior so that each time the user clicks the button, it provides some real
    beer advice based on the value that’s selected in the spinner. We’ll do this by
    adding a new `getBeers()` method to *MainActivity.kt*, which we can then call
    in the button’s `OnClickListener` code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getBeers()` method is pure Kotlin code. It has one `String` parameter
    for the beer color, and returns a `List<String>` of beer suggestions. Add the
    `getBeers()` method (shown below in bold) to *MainActivity.kt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0074-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to update the lambda that’s passed to the `find_beer` button’s
    `setOnClickListener()` method. We’ll make it pass the selected beer color from
    the spinner to the `getBeers()` method, and update the `brands` text view with
    its return value.
  prefs: []
  type: TYPE_NORMAL
- en: See if you can piece together the code to do this by having a go at the following
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Activity Magnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Somebody used fridge magnets to complete the code for `MainActivity`, but a
    freak kitchen whirlwind has dislodged some of the magnets. Can you piece the code
    back together again?
  prefs: []
  type: TYPE_NORMAL
- en: The code needs to call the `getBeers()` method, and display each item it returns
    in the `brands` text view. Each item should be displayed on a new line.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0075-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Activity Magnets Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/common02.png)'
  prefs: []
  type: TYPE_IMG
- en: Somebody used fridge magnets to complete the code for `MainActivity`, but a
    freak kitchen whirlwind has dislodged some of the magnets. Can you piece the code
    back together again?
  prefs: []
  type: TYPE_NORMAL
- en: The code needs to call the `getBeers()` method, and display each item it returns
    in the `brands` text view. Each item should be displayed on a new line.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0076-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The full code for MainActivity.kt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the full code for `MainActivity`. Apply the changes shown in bold to
    *MainActivity.kt*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0077-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we take the code for a final test drive, let’s go through what the code
    does when it runs.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you run the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following things happen when the app runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When the user clicks on the Find Beer button, the button’s OnClickListener
    hears the click.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0078-02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**The OnClickListener code in MainActivity calls the getBeers() method, passing
    in the beer color selected in the spinner.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `getBeers()` method returns a list of beers, which `MainActivity` saves
    in a separate variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](Images/f0078-03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**MainActivity formats the list of beers and uses it to set the text property
    in the text view.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](Images/f0078-04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let’s take the app for a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/car.png) Test Drive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve made the changes to the app, go ahead and run it.
  prefs: []
  type: TYPE_NORMAL
- en: When we try selecting different beer types and clicking on the Find Beer button,
    the app displays a selection of suitable beers. We get one set of beers when we
    choose the Light option, and another selection when we choose the Amber option.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0079-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve now finished writing your first interactive Android
    app, and learned how to make the layout’s views respond to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Your Android Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](Images/f0080-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You’ve got [Chapter 2](#building_interactive_appscolon_apps_that) under your
    belt and now you’ve added building interactive Android apps to your toolbox.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/f0080-02.png)'
  prefs: []
  type: TYPE_IMG
