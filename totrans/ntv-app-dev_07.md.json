["```\nFile file = new File(context.getFilesDir(), \"path/to/file.ext\");\n```", "```\n// inputStream is a valid instance of a FileInputStream\nStringBuilder builder = new StringBuilder();\nint byte = inputStream.read();\nwhile (byte != -1) {\n  builder.append((char) byte);\n  byte = inputStream.read();\n}\nString message = builder.toString();\n```", "```\n let file = Bundle.main.url(forResource: \"image\", withExtension: \"png\")\n```", "```\n let file =\n   Bundle.main.url(forResource: \"image\", withExtension: \"png\", subdirectory:\n   \"sample-images\")\n```", "```\nlet file = try? FileManager.default\n  .url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create:\n  false).appendingPathComponent(\"image.png\")\n```", "```\nlet jsonFile = try? FileManager.default\n    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor:\n    nil, create: false).appendingPathComponent(\"data.json\")\n```", "```\nlet tempFile =\n  try? FileManager.default.temporaryDirectory.appendingPathComponent(\"download.dat\")\n```", "```\nlet url = Bundle.main.url(forResource: \"image\", withExtension: \"png\")\nif let resourceValues = try? url.resourceValues(forKeys: [.fileSizeKey]) {\n\tprint(resourceValues.fileSize)\n}\n```", "```\nlet url = Bundle.main.url(forResource: \"image\", withExtension: \"png\")\nif let resourceValues = try? url.resourceValues(forKeys: [.fileSizeKey,\n. contentModificationDateKey]) {\n\tprint(resourceValues.fileSize)\n\tprint(resourceValues.contentModificationDate)\n}\n```", "```\nlet file =\n  try? FileManager.default.url(for: .documentDirectory, in: .userDomainMask,\n  appropriateFor: nil, create: false).appendingPathComponent(\"file.txt\")\n\n// Read the file into a string\nlet contents = try? String(contentsOf: file, encoding: .utf8)\n```", "```\nlet file =\n  try? FileManager.default.url(for: .documentDirectory, in: .userDomainMask,\n  appropriateFor: nil, create: false).appendingPathComponent(\"file.txt\")\n\n// Read the file from the Documents directory\nvar contents = try? String(contentsOf: file, encoding: .utf8)\n\n...\n\n// Write the string back to the same file\ntry? contents.write(to: file, atomically: false, encoding: .utf8)\n```", "```\n// Read the file's data into a Data object\nvar data = try? Data(contentsOf: imageFileUrl)\n\n...\n\n// Write the data back to the same file\ntry? data?.write(to: imageFileUrl)\n```", "```\n// Provide a file to read in the user's Documents directory\nlet file =\n  try? FileManager.default.url(for: .documentDirectory, in: .userDomainMask,\n  appropriateFor: nil, create: false).appendingPathComponent(\"file.txt\")\n\n// Get the contents of the file as a Data object\nif let contents = FileManager.default.contents(atPath: file.path) {\n\t// Create a String from the raw data\n\tlet contentsString = String(data: contents, encoding: .utf8)!\n\tprint(contentsString)\n}\n```", "```\nlet example = \"I love tacos.\"\n\n// Convert the string to a Data object\nlet exampleData = example.data(using: .utf8)\n\n// Create the file using the preceding data object (and overwrite any existing files)\nFileManager.default.createFile(\n    atPath: sharedFile.path, contents: exampleData, attributes: nil) // returns a Bool\n```", "```\n// Provide an original file location\nlet originalFile = try? FileManager.default\n    .url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: false)\n    .appendingPathComponent(\"file.txt\")\n\n// Provide a location where the copied file should go\nlet copiedFile = try? FileManager.default\n    .url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: false)\n    .appendingPathComponent(\"newFile.txt\")\n\n// Copy the file\ntry? FileManager.default.copyItem(at: originalFile, to: copiedfile)\n```", "```\nlet fileURL = Bundle.main.url(forResource: \"file\", withExtension: \"txt\")!\nlet filePath = fileURL.path\n```", "```\nvar values = URLResourceValues()\nvalues.isExcludedFromBackup = true\ntry? fileUrl.setResourceValues(values)\n```"]