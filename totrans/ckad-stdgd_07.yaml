- en: Chapter 7\. Volumes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 卷
- en: A container’s temporary filesystem is isolated from any other container or Pod
    and is not persisted beyond a Pod restart. A Pod can define a Volume and mount
    it to a container.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的临时文件系统与任何其他容器或 Pod 隔离，并且在 Pod 重新启动后不会持久化。Pod 可以定义一个卷并将其挂载到容器上。
- en: Ephemeral Volumes exist for the lifespan of a Pod. They are useful if you want
    to share data between multiple containers running in the Pod. Persistent Volumes
    preserve data beyond the lifespan of a Pod. They are a good option for applications
    that require data to exist longer, e.g., in the form of storage for a database-driven
    application. In this chapter, we’ll exercise the use of different Volumes types
    in a Pod.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 临时卷存在于 Pod 的生命周期内。如果您希望在运行在 Pod 中的多个容器之间共享数据，它们非常有用。持久卷则在 Pod 的生命周期外保留数据。对于需要数据长期存在的应用程序来说，它们是一个很好的选择，例如数据库驱动应用程序的存储形式。在本章中，我们将在
    Pod 中练习不同类型的卷的使用。
- en: Working with Storage
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用存储
- en: Applications running in a container can use the temporary filesystem to read
    and write files. In case of a container crash or a cluster/node restart, the kubelet
    will restart the container. Any data that had been written to the temporary filesystem
    is lost and cannot be retrieved. The container effectively starts with a clean
    slate.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中运行的应用程序可以使用临时文件系统读写文件。在容器崩溃或集群/节点重新启动时，kubelet 将重新启动容器。已写入临时文件系统的任何数据都会丢失，无法检索。容器实际上是以空白状态启动的。
- en: 'There are many uses cases for wanting to mount a Volume in a container. We’ll
    see one of the most prominent use cases in [Chapter 8](ch08.xhtml#multi_container_pods):
    using an ephemeral Volume to exchange data between a main application container
    and a sidecar. [Figure 7-1](#tmp_file_system_volume) illustrates the differences
    between the temporary filesystem of a container and the use of a Volume.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多情况需要在容器中挂载卷。我们将在 [第8章](ch08.xhtml#multi_container_pods) 中看到其中一个最突出的用例：使用临时卷在主应用程序容器和
    sidecar 之间交换数据。[图 7-1](#tmp_file_system_volume) 说明了容器的临时文件系统与使用卷的差异。
- en: '![ckd2 0701](Images/ckd2_0701.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0701](Images/ckd2_0701.png)'
- en: Figure 7-1\. A container using the temporary filesystem versus a Volume
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 使用临时文件系统与卷的容器
- en: Volume Types
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卷类型
- en: Every Volume needs to define a type. The type determines the medium that backs
    the Volume and its runtime behavior.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个卷都需要定义一个类型。该类型确定支持卷的介质及其运行时行为。
- en: Ephemeral Volumes
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 临时卷
- en: These exist for the lifespan of a Pod. Ephemeral Volumes are useful if you want
    to share data between multiple containers running in the Pod or if you can easily
    reconstruct the data stored on the Volume upon a Pod restart.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些存在于 Pod 的生命周期内。临时卷在多个容器之间共享数据或者可以在 Pod 重新启动时轻松重建卷上的数据时非常有用。
- en: Persistent Volumes
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷
- en: These preserve data beyond the lifespan of a Pod. Persistent Volumes are a good
    option for applications that require data to exist longer, for example, in the
    form of storage for a database-driven application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些持久化数据超出了 Pod 的生命周期。持久卷是应用程序的好选择，需要数据存在更长时间，例如用于数据库驱动应用程序的存储形式。
- en: The Kubernetes documentation offers a long list of Volume types. [Table 7-1](#table_volume_types)
    provides a select list of Volume types that I have found to be most relevant to
    the exam.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 文档提供了一长串的卷类型。[表 7-1](#table_volume_types) 提供了我认为对考试最相关的一些卷类型的选择列表。
- en: Table 7-1\. Volume types most relevant to exam
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-1\. 最相关于考试的卷类型
- en: '| Type | Description |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `emptyDir` | Empty directory in Pod with read/write access. Only persisted
    for the lifespan of a Pod. A good choice for cache implementations or data exchange
    between containers of a Pod. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `emptyDir` | Pod 中具有读写访问权限的空目录。仅在 Pod 的生命周期内持久化。用于缓存实现或者在 Pod 的容器之间交换数据是一个不错的选择。
    |'
- en: '| `hostPath` | File or directory from the host node’s filesystem. Supported
    only on single-node clusters and not meant for production. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `hostPath` | 主机节点文件系统中的文件或目录。仅支持单节点集群，不适用于生产环境。 |'
- en: '| `configMap`, `secret` | Provides a way to inject configuration data. For
    practical examples, see [Chapter 19](ch19.xhtml#configmaps_secrets). |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `configMap`, `secret` | 提供注入配置数据的方法。有关实际示例，请参见 [第19章](ch19.xhtml#configmaps_secrets)。
    |'
- en: '| `nfs` | An existing NFS (Network File System) share. Preserves data after
    Pod restart. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `nfs` | 现有的 NFS（网络文件系统）共享。在 Pod 重新启动后保留数据。 |'
- en: '| `persistentVolumeClaim` | Claims a Persistent Volume. For more information,
    see [“Creating PersistentVolumeClaims”](#creating_pvc). |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `persistentVolumeClaim` | 声明持久卷。更多信息，请参见[“创建持久卷声明”](#creating_pvc)。 |'
- en: Ephemeral Volumes
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 临时卷
- en: Defining an ephemeral Volume for a Pod requires two steps. First, you need to
    declare the Volume itself using the attribute `spec.volumes[]`. As part of the
    definition, you provide the name and the type. Just declaring the Volume won’t
    be sufficient. Second, the Volume needs to be mounted to a path of the consuming
    container via `spec.containers[].volumeMounts[]`. The mapping between the Volume
    and the Volume mount occurs through the matching name.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Pod 定义临时卷需要两个步骤。首先，您需要使用属性 `spec.volumes[]` 声明卷本身。在定义中，您提供名称和类型。仅仅声明卷是不够的。其次，通过
    `spec.containers[].volumeMounts[]` 将卷挂载到消耗容器的路径上。卷与卷挂载之间的映射通过匹配名称完成。
- en: Creating and mounting an ephemeral Volume
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建并挂载临时卷
- en: In [Example 7-1](#ephemeral_volume), stored in the file *pod-with-volume.yaml*
    here, you can see the definition of a Volume with type `emptyDir`. The Volume
    has been mounted to the path */var/log/nginx* inside the container named `nginx`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 7-1](#ephemeral_volume) 中，存储在文件 *pod-with-volume.yaml* 中的定义了类型为 `emptyDir`
    的卷。卷已挂载到名为 `nginx` 的容器内的路径 */var/log/nginx*。
- en: Example 7-1\. A Pod defining and mounting a ephemeral Volume
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1\. 定义并挂载临时卷的 Pod
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Interacting with the Volume
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与卷交互
- en: 'Let’s create the Pod and see if we can interact with the mounted Volume. The
    following commands open an interactive shell after the Pod’s creation, then navigate
    to the mount path. You can see that the Volume type `emptyDir` initializes the
    mount path as an empty directory. New files and directories can be created as
    needed without limitations:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 Pod 并查看是否可以与挂载的卷交互。以下命令在 Pod 创建后打开一个交互式 shell，然后导航到挂载路径。您可以看到类型为 `emptyDir`
    的卷将挂载路径初始化为一个空目录。可以根据需要创建新的文件和目录，没有限制：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For an illustrative use case of the `emptyDir` Volume type mounted by more than
    one container, see [Chapter 8](ch08.xhtml#multi_container_pods).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关于多个容器挂载 `emptyDir` 卷类型的示例用例，请参见[第 8 章](ch08.xhtml#multi_container_pods)。
- en: Persistent Volumes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久卷
- en: 'Data stored on Volumes outlives a container restart. In many applications,
    the data lives far beyond the life cycles of the applications, container, Pod,
    nodes, and even the clusters themselves. Data persistence ensures the life cycles
    of the data are decoupled from the life cycles of the cluster resources. A typical
    example would be data persisted by a database. That’s the responsibility of a
    persistent Volume. Kubernetes models persist data with the help of two primitives:
    the PersistentVolume and the PersistentVolumeClaim.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在卷上的数据可以在容器重新启动后持续存在。在许多应用程序中，数据的存活周期远远超出了应用程序、容器、Pod、节点甚至集群本身的生命周期。数据持久性确保数据的生命周期与集群资源的生命周期解耦。典型的例子是由数据库持久化的数据。这是持久卷的责任。Kubernetes
    使用两个原语来持久化数据：持久卷和持久卷声明。
- en: The PersistentVolume is the primitive representing a piece of storage in a Kubernetes
    cluster. It is completely decoupled from the Pod and therefore has its own life
    cycle. The object captures the source of the storage (e.g., storage made available
    by a cloud provider). A PersistentVolume is either provided by a Kubernetes administrator
    or assigned dynamically by mapping to a storage class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷是 Kubernetes 集群中表示存储片段的原始对象。它与 Pod 完全解耦，因此具有自己的生命周期。该对象捕获存储的来源（例如，由云提供商提供的存储）。持久卷由
    Kubernetes 管理员提供或通过映射到存储类动态分配。
- en: The PersistentVolumeClaim requests the resources of a PersistentVolume—for example,
    the size of the storage and the access type. In the Pod, you will use the type
    `persistentVolumeClaim` to mount the abstracted PersistentVolume by using the
    PersistentVolumeClaim.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷声明请求持久卷的资源，例如存储的大小和访问类型。在 Pod 中，您将使用类型 `persistentVolumeClaim` 通过持久卷声明来挂载抽象的持久卷。
- en: '[Figure 7-2](#pvc_relationship) shows the relationship between the Pod, the
    PersistentVolumeClaim, and the PersistentVolume.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-2](#pvc_relationship) 显示了 Pod、持久卷声明和持久卷之间的关系。'
- en: '![ckd2 0702](Images/ckd2_0702.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![ckd2 0702](Images/ckd2_0702.png)'
- en: Figure 7-2\. Claiming a PersistentVolume from a Pod
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-2\. 从 Pod 中声明持久卷
- en: Static versus dynamic provisioning
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态与动态配置
- en: A PersistentVolume can be created statically or dynamically. If you go with
    the static approach, then you first need to create a storage device and then reference
    it by explicitly creating an object of kind PersistentVolume. The dynamic approach
    doesn’t require you to create a PersistentVolume object. It will be automatically
    created from the PersistentVolumeClaim by setting a storage class name using the
    attribute `spec.storageClassName`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷可以静态或动态创建。如果选择静态方法，则首先需要创建存储设备，然后通过显式创建 `PersistentVolume` 对象来引用它。动态方法不需要您创建
    `PersistentVolume` 对象。它将通过设置 `spec.storageClassName` 属性自动从 `PersistentVolumeClaim`
    创建。
- en: A storage class is an abstraction concept that defines a class of storage device
    (e.g., storage with slow or fast performance) used for different application types.
    It’s the job of a Kubernetes administrator to set up storage classes. For a deeper
    discussion on storage classes, see [“Storage Classes”](#understanding_storage_class).
    For now, we’ll focus on the static provisioning of PersistentVolumes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 存储类是定义存储设备类别（例如，具有慢速或快速性能的存储）的抽象概念，用于不同的应用程序类型。设置存储类是 Kubernetes 管理员的工作。有关存储类的更深入讨论，请参见
    [“存储类”](#understanding_storage_class)。现在，我们将重点放在持久卷的静态配置上。
- en: Creating PersistentVolumes
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建持久卷
- en: When you create a PersistentVolume object yourself, we refer to the approach
    as static provisioning. A PersistentVolume can be created only by using the manifest-first
    approach. At this time, `kubectl` doesn’t allow the creation of a PersistentVolume
    using the `create` command. Every PersistentVolume needs to define the storage
    capacity using `spec.capacity` and an access mode set via `spec.accessModes`.
    See [“Configuration options for a PersistentVolume”](#configuring_pv) for more
    information on the configuration options available to a PersistentVolume.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您自行创建持久卷对象时，我们称这种方法为静态配置。只能使用先声明的方式创建持久卷。此时，`kubectl` 不允许使用 `create` 命令创建持久卷。每个持久卷都需要通过
    `spec.capacity` 定义存储容量，并通过 `spec.accessModes` 设置访问模式。有关持久卷的配置选项的更多信息，请参见 [“持久卷的配置选项”](#configuring_pv)。
- en: '[Example 7-2](#yaml_manifest_persistent_volume) creates a PersistentVolume
    named `db-pv` with a storage capacity of 1Gi and read/write access by a single
    node. The attribute `hostPath` mounts the directory */data/db* from the host node’s
    filesystem. We’ll store the YAML manifest in the file `db-pv.yaml`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-2](#yaml_manifest_persistent_volume) 创建一个名为 `db-pv` 的持久卷，其存储容量为 1Gi，并由单个节点具有读/写访问。属性
    `hostPath` 挂载来自主机节点文件系统的目录 */data/db*。我们将把 YAML 清单存储在文件 `db-pv.yaml` 中。'
- en: Example 7-2\. YAML manifest defining a PersistentVolume
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-2\. 定义持久卷的 YAML 清单
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you inspect the created PersistentVolume, you’ll find most of the information
    you provided in the manifest. The status `Available` indicates that the object
    is ready to be claimed. The reclaim policy determines what should happen with
    the PersistentVolume after it has been released from its claim. By default, the
    object will be retained. The following example uses the short-form command `pv`
    to avoid having to type `persistentvolume`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当您检查创建的持久卷时，您将发现大部分信息都来自于清单提供的信息。状态 `Available` 表示该对象已准备好被索取。回收策略决定在持久卷被释放后应该发生什么。默认情况下，对象将被保留。下面的示例使用短格式命令
    `pv` 避免输入 `persistentvolume`：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Configuration options for a PersistentVolume
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持久卷的配置选项
- en: A PersistentVolume offers a variety of configuration options that determine
    their innate runtime behavior. For the exam, it’s important to understand the
    volume mode, access mode, and reclaim policy configuration options.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷提供各种配置选项，确定其固有的运行时行为。对于考试而言，理解卷模式、访问模式和回收策略的配置选项非常重要。
- en: Volume mode
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 卷模式
- en: The volume mode handles the type of device. That’s a device either meant to
    be consumed from the filesystem or backed by a block device. The most common case
    is a filesystem device. You can set the volume mode using the attribute `spec.volumeMode`.
    [Table 7-2](#persistentvolume_volume_modes) shows all available volume modes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 卷模式处理设备的类型。这是一个要么用于文件系统的设备，要么由块设备支持的设备。最常见的情况是文件系统设备。您可以使用 `spec.volumeMode`
    属性设置卷模式。[表 7-2](#persistentvolume_volume_modes) 显示了所有可用的卷模式。
- en: Table 7-2\. PersistentVolume volume modes
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-2\. 持久卷卷模式
- en: '| Type | Description |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Filesystem` | Default. Mounts the volume into a directory of the consuming
    Pod. Creates a filesystem first if the volume is backed by a block device and
    the device is empty. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `Filesystem` | 默认。将卷挂载到消费 Pod 的目录中。如果卷由块设备支持且设备为空，则首先创建文件系统。 |'
- en: '| `Block` | Used for a volume as a raw block device without a filesystem on
    it. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `Block` | 用于作为原始块设备的卷，无文件系统。 |'
- en: 'The volume mode is not rendered by default in the console output of the `get
    pv` command. You will need to provide the `-o wide` command-line option to see
    the `VOLUMEMODE` column, as shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`get pv` 命令的控制台输出不会显示卷模式。您需要提供 `-o wide` 命令行选项来查看 `VOLUMEMODE` 列，如下所示：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Access mode
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 访问模式
- en: Each PersistentVolume can express how it can be accessed using the attribute
    `spec.accessModes`. For example, you can define that the volume can be mounted
    only by a single Pod in a read or write mode or that a volume is read-only but
    accessible from different nodes simultaneously. [Table 7-3](#persistentvolume_access_modes)
    provides an overview of the available access modes. The short-form notation of
    the access mode is usually rendered in outputs of specific commands, e.g., `get
    pv` or `describe pv`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个持久卷可以使用 `spec.accessModes` 属性表达其访问方式。例如，您可以定义卷仅可以由单个 Pod 以读写模式挂载，或者卷为只读但可同时从不同节点访问。[表 7-3](#persistentvolume_access_modes)
    提供了可用访问模式的概述。通常，在特定命令的输出中会渲染访问模式的短形式标注，例如 `get pv` 或 `describe pv`。
- en: Table 7-3\. PersistentVolume access modes
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-3\. 持久卷访问模式
- en: '| Type | Short Form | Description |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 短形式 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `ReadWriteOnce` | RWO | Read/write access by a single node |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `ReadWriteOnce` | RWO | 单个节点读写访问 |'
- en: '| `ReadOnlyMany` | ROX | Read-only access by many nodes |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `ReadOnlyMany` | ROX | 多个节点只读访问 |'
- en: '| `ReadWriteMany` | RWX | Read/write access by many nodes |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `ReadWriteMany` | RWX | 多个节点读写访问 |'
- en: '| `ReadWriteOncePod` | RWOP | Read/write access mounted by a single Pod |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `ReadWriteOncePod` | RWOP | 由单个 Pod 挂载的读写访问 |'
- en: 'The following command parses the access modes from the PersistentVolume named
    `db-pv`. As you can see, the returned value is an array underlining the fact that
    you can assign multiple access modes at once:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令从名为 `db-pv` 的持久卷中解析访问模式。正如您所见，返回的值是一个数组，强调了您可以一次分配多个访问模式：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reclaim policy
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回收策略
- en: Optionally, you can also define a reclaim policy for a PersistentVolume. The
    reclaim policy specifies what should happen to a PersistentVolume object when
    the bound PersistentVolumeClaim is deleted (see [Table 7-4](#persistentvolume_reclaim_policy)).
    For dynamically created PersistentVolumes, the reclaim policy can be set via the
    attribute `.reclaimPolicy` in the storage class. For statically created PersistentVolumes,
    use the attribute `spec.persistentVolumeReclaimPolicy` in the PersistentVolume
    definition.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您还可以为持久卷定义回收策略。回收策略指定了当绑定的持久卷索赔被删除时持久卷对象应如何处理（参见 [表 7-4](#persistentvolume_reclaim_policy)）。对于动态创建的持久卷，可以通过存储类别的属性
    `.reclaimPolicy` 设置回收策略。对于静态创建的持久卷，请使用持久卷定义中的属性 `spec.persistentVolumeReclaimPolicy`。
- en: Table 7-4\. PersistentVolume reclaim policies
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-4\. 持久卷回收策略
- en: '| Type | Description |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Retain` | Default. When PersistentVolumeClaim is deleted, the PersistentVolume
    is “released” and can be reclaimed. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `Retain` | 默认。当持久卷索赔被删除时，持久卷“释放”，可以重新声明。 |'
- en: '| `Delete` | Deletion removes PersistentVolume and its associated storage.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `Delete` | 删除会移除持久卷及其关联存储。 |'
- en: '| `Recycle` | This value is deprecated. You should use one of the other values.
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `Recycle` | 此值已被弃用。您应使用其他值之一。 |'
- en: 'This command retrieves the assigned reclaim policy of the PersistentVolume
    named `db-pv`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令检索命名为 `db-pv` 的持久卷的分配回收策略：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating PersistentVolumeClaims
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建持久卷索赔
- en: The next object we’ll need to create is the PersistentVolumeClaim. Its purpose
    is to bind the PersistentVolume to the Pod. Let’s look at the YAML manifest stored
    in the file *db-pvc.yaml*, shown in [Example 7-3](#yaml_manifest_persistent_volume_claim).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要创建的对象是持久卷索赔。其目的是将持久卷绑定到 Pod。让我们看一下存储在文件 *db-pvc.yaml* 中的 YAML 清单，如 [示例 7-3](#yaml_manifest_persistent_volume_claim)
    所示。
- en: Example 7-3\. Definition of a PersistentVolumeClaim
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-3\. 持久卷索赔的定义
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What we’re saying is: “Give me a PersistentVolume that can fulfill the resource
    request of 256Mi and provides the access mode `ReadWriteOnce`.” Static provisioning
    should use an empty string for the attribute `spec.storageClassName` if you do
    not want it to automatically assign the default storage class. The binding to
    an appropriate PersistentVolume happens automatically based on those criteria.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的是：“给我一个能够满足 256Mi 资源请求并提供 `ReadWriteOnce` 访问模式的 `PersistentVolume`。” 如果不希望自动分配默认存储类，静态配置应该使用空字符串作为
    `spec.storageClassName` 属性的值。基于这些条件，自动选择适当的 `PersistentVolume` 进行绑定。
- en: 'After creating the PersistentVolumeClaim, the status is set as `Bound`, which
    means that the binding to the PersistentVolume was successful. Once the associated
    binding occurs, nothing else can bind to it. The binding relationship is one-to-one.
    Nothing else can bind to the PersistentVolume once claimed. The following `get`
    command uses the short-form `pvc` instead of `persistentvolumeclaim`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `PersistentVolumeClaim` 后，状态设置为 `Bound`，这意味着与 `PersistentVolume` 的绑定成功。一旦关联绑定发生，其他任何东西都不能绑定它。绑定关系是一对一的。基于这些条件，使用简短形式
    `pvc` 而不是 `persistentvolumeclaim` 的以下 `get` 命令：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The PersistentVolume has not been mounted by a Pod yet. Therefore, inspecting
    the details of the object shows `<none>`. Using the `describe` command is a good
    way to verify if the PersistentVolumeClaim was mounted properly:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`PersistentVolume` 尚未被 `Pod` 挂载。因此，检查对象的详细信息显示 `<none>`。使用 `describe` 命令是验证
    `PersistentVolumeClaim` 是否已正确挂载的好方法：'
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Mounting PersistentVolumeClaims in a Pod
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `Pod` 中挂载 `PersistentVolumeClaim`
- en: All that’s left is to mount the PersistentVolumeClaim in the Pod that wants
    to consume it. You already learned how to mount a volume in a Pod. The big difference
    here, shown in [Example 7-4](#pod_referencing_persistent_volume_claim), is using
    `spec.volumes[].persistentVolumeClaim` and providing the name of the PersistentVolumeClaim.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的工作就是在要使用它的 `Pod` 中挂载 `PersistentVolumeClaim`。您已经学会了如何在 `Pod` 中挂载卷。这里的主要区别，在
    [示例 7-4](#pod_referencing_persistent_volume_claim) 中展示，是使用 `spec.volumes[].persistentVolumeClaim`
    并提供 `PersistentVolumeClaim` 的名称。
- en: Example 7-4\. A Pod referencing a PersistentVolumeClaim
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-4\. 引用 `PersistentVolumeClaim` 的 `Pod`
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s assume we stored the configuration in the file *app-consuming-pvc.yaml*.
    After creating the Pod from the manifest, you should see the Pod transitioning
    into the `Ready` state. The `describe` command will provide additional information
    on the volume:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将配置存储在名为 *app-consuming-pvc.yaml* 的文件中。从清单创建 `Pod` 后，您应该看到 `Pod` 进入 `Ready`
    状态。 `describe` 命令将提供有关卷的附加信息：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The PersistentVolumeClaim now also shows the Pod that mounted it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`PersistentVolumeClaim` 现在还显示已经挂载的 `Pod`：'
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can now go ahead and open an interactive shell to the Pod. Navigating to
    the mount path at */mnt/data* gives you access to the underlying PersistentVolume:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以继续并打开一个交互式 Shell 到 `Pod`。导航到挂载路径 `/mnt/data` 可以让您访问底层的 `PersistentVolume`：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Storage Classes
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储类
- en: 'A storage class is a Kubernetes primitive that defines a specific type or “class”
    of storage. Typical storage characteristics can be the type (e.g., fast SSD storage
    versus remote cloud storage or the backup policy for storage). The storage class
    is used to provision a PersistentVolume dynamically based on its criteria. In
    practice, this means that you do not have to create the PersistentVolume object
    yourself. The provisioner assigned to the storage class takes care of it. Most
    Kubernetes cloud providers come with a list of existing provisioners. Minikube
    already creates a default storage class named `standard`, which you can query
    with the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 存储类是 Kubernetes 的一个基本概念，定义了特定类型或“类”的存储。典型的存储特性可以是类型（例如，快速 SSD 存储与远程云存储或存储的备份策略）。存储类用于根据其条件动态地提供
    `PersistentVolume`。实际上，这意味着您不必自己创建 `PersistentVolume` 对象。分配给存储类的提供程序会处理这一切。大多数
    Kubernetes 云提供商都配备了一组现有的提供程序。Minikube 已经创建了一个名为 `standard` 的默认存储类，您可以使用以下命令查询它：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating storage classes
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建存储类
- en: Storage classes can be created declaratively only with the help of a YAML manifest.
    At a minimum, you need to declare the provisioner. All other attributes are optional
    and use default values if not provided upon creation. Most provisioners let you
    set parameters specific to the storage type. [Example 7-5](#storage_class_gce)
    defines a storage class on Google Compute Engine denoted by the provisioner `kubernetes.io/gce-pd`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 存储类只能在有 YAML 清单的帮助下声明。至少需要声明供应商。如果在创建时未提供其他属性，则使用默认值。大多数供应商允许您设置特定于存储类型的参数。[示例 7-5](#storage_class_gce)
    定义了一个由供应商 `kubernetes.io/gce-pd` 表示的 Google Compute Engine 上的存储类。
- en: Example 7-5\. Definition of a storage class
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-5\. 存储类的定义
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you saved the YAML contents in the file *fast-sc.yaml*, then the following
    command will create the object. The storage class can be listed using the `get
    storageclass` command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将 YAML 内容保存在文件 *fast-sc.yaml* 中，则以下命令将创建该对象。可以使用 `get storageclass` 命令列出存储类：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using storage classes
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用存储类
- en: Provisioning a PersistentVolume dynamically requires assigning of the storage
    class when you create the PeristentVolumeClaim. [Example 7-6](#yaml_manifest_persistent_volume_claim_storage_class)
    shows the usage of the attribute `spec.storageClassName` for assigning the storage
    class named `standard`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 动态配置 PersistentVolume 需要在创建 PersistentVolumeClaim 时分配存储类。[示例 7-6](#yaml_manifest_persistent_volume_claim_storage_class)
    展示了使用属性 `spec.storageClassName` 分配名为 `standard` 的存储类的用法。
- en: Example 7-6\. Using a storage class in a PersistentVolumeClaim
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-6\. 在 PersistentVolumeClaim 中使用存储类
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The corresponding PersistentVolume object will be created only if the storage
    class can provision a fitting PersistentVolume using its provisioner. It’s important
    to understand that Kubernetes does not render an error or warning message if it
    isn’t the case.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在存储类能够使用其供应商动态提供合适的 PersistentVolume 时，才会创建相应的 PersistentVolume 对象。重要的是要理解，如果情况不是这样，Kubernetes
    不会显示错误或警告消息。
- en: 'The following command renders the created PersistentVolumeClaim and PersistentVolume.
    As you can see, the name of the dynamically provisioned PersistentVolume uses
    a hash to ensure a unique naming:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令呈现了创建的 PersistentVolumeClaim 和 PersistentVolume。正如您所见，动态配置的 PersistentVolume
    的名称使用哈希确保唯一命名：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The steps for mounting the PersistentVolumeClaim from a Pod are the same as
    for static and dynamic provisioning. Refer to [“Mounting PersistentVolumeClaims
    in a Pod”](#mounting_persistent_volume) for more information.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Pod 挂载 PersistentVolumeClaim 的步骤与静态和动态配置相同。有关更多信息，请参阅[“在 Pod 中挂载 PersistentVolumeClaim”](#mounting_persistent_volume)。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Kubernetes offers the concept of a Volume to implement the use case. A Pod mounts
    a Volume to a path in the container. Kubernetes offers a wide range of Volume
    types to fulfill different requirements.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了 Volume 的概念来实现使用场景。Pod 将 Volume 挂载到容器中的路径。Kubernetes 提供了广泛的 Volume
    类型以满足不同的需求。
- en: PersistentVolumes store data beyond a Pod or cluster/node restart. Those objects
    are decoupled from the Pod’s life cycle and are therefore represented by a Kubernetes
    primitive. The PersistentVolumeClaim abstracts the underlying implementation details
    of a PersistentVolume and acts as an intermediary between Pod and PersistentVolume.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: PersistentVolumes 可以在 Pod 或集群/节点重新启动后存储数据。这些对象与 Pod 的生命周期分离，因此由 Kubernetes 原语表示。PersistentVolumeClaim
    抽象了 PersistentVolume 的底层实现细节，并充当 Pod 和 PersistentVolume 之间的中介。
- en: Exam Essentials
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试要点
- en: Practice defining and consuming ephemeral Volumes
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 实践定义和使用临时 Volume
- en: Volumes are a cross-cutting concept applied in different areas of the exam.
    Know where to find the relevant documentation for defining a Volume as well as
    the multitude of ways to consume a Volume from a container. Definitely read [Chapter 19](ch19.xhtml#configmaps_secrets)
    for a deep dive on how to mount ConfigMaps and Secrets as a Volume, and [Chapter 8](ch08.xhtml#multi_container_pods)
    for sharing a Volume between two containers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Volume 是考试中应用于不同领域的横向概念。了解在哪里找到定义 Volume 的相关文档以及从容器中消耗 Volume 的多种方式。一定要阅读[第
    19 章](ch19.xhtml#configmaps_secrets)，深入了解如何将 ConfigMaps 和 Secrets 挂载为 Volume，以及[第
    8 章](ch08.xhtml#multi_container_pods)，了解在两个容器之间共享 Volume 的方式。
- en: Internalize the mechanics of defining and consuming a PersistentVolume
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 深入理解定义和使用 PersistentVolume 的机制
- en: Creating a PersistentVolume involves a couple of moving parts. Understand the
    configuration options for PersistentVolumes and PersistentVolumeClaims and how
    they play together. Try to emulate situations that prevent a successful binding
    of a PersistentVolumeClaim. Then fix the situation by taking counteractions. Internalize
    the short-form commands `pv` and `pvc` to save precious time during the exam.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建PersistentVolume涉及几个关键步骤。了解PersistentVolumes和PersistentVolumeClaims的配置选项及其如何协同工作。尝试模拟导致PersistentVolumeClaim成功绑定的情况。然后通过采取反应措施来修复情况。掌握`pv`和`pvc`的简短命令，以在考试中节省宝贵的时间。
- en: Sample Exercises
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例练习
- en: Solutions to these exercises are available in [Appendix A](app01_split_003.xhtml#appendix_a_volumes).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可以在[附录A](app01_split_003.xhtml#appendix_a_volumes)中找到。
- en: Create a Pod YAML manifest with two containers that use the image `alpine:3.12.0`.
    Provide a command for both containers that keep them running forever.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Pod的YAML清单，其中包含两个使用镜像`alpine:3.12.0`的容器。为两个容器提供一个命令，以使它们永远运行。
- en: Define a Volume of type `emptyDir` for the Pod. Container 1 should mount the
    Volume to path */etc/a*, and container 2 should mount the Volume to path */etc/b*.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Pod定义一个类型为`emptyDir`的Volume。容器1应将Volume挂载到路径*/etc/a*，容器2应将Volume挂载到路径*/etc/b*。
- en: Open an interactive shell for container 1 and create the directory *data* in
    the mount path. Navigate to the directory and create the file *hello.txt* with
    the contents “Hello World.” Exit out of the container.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开容器1的交互式shell，并在挂载路径中创建名为*data*的目录。导航到该目录并创建包含内容“Hello World.”的文件*hello.txt*。退出容器。
- en: Open an interactive shell for container 2 and navigate to the directory */etc/b/data*.
    Inspect the contents of file *hello.txt*. Exit out of the container.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开容器2的交互式shell，并导航到目录*/etc/b/data*。检查文件*hello.txt*的内容。退出容器。
- en: Create a PersistentVolume named `logs-pv` that maps to the `hostPath` */var/logs*.
    The access mode should be `ReadWriteOnce` and `ReadOnlyMany`. Provision a storage
    capacity of 5Gi. Ensure that the status of the PersistentVolume shows `Available`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`logs-pv`的PersistentVolume，映射到`hostPath`为*/var/logs*。访问模式应为`ReadWriteOnce`和`ReadOnlyMany`。预配存储容量为5Gi。确保PersistentVolume的状态显示为`Available`。
- en: Create a PersistentVolumeClaim named `logs-pvc`. It uses `ReadWriteOnce` access.
    Request a capacity of 2Gi. Ensure that the status of the PersistentVolume shows
    `Bound`.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建名为`logs-pvc`的PersistentVolumeClaim。它使用`ReadWriteOnce`访问。请求容量为2Gi。确保PersistentVolume的状态显示为`Bound`。
- en: Mount the PersistentVolumeClaim in a Pod running the image `nginx` at the mount
    path */var/log/nginx*.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行`nginx`镜像的Pod中挂载PersistentVolumeClaim，挂载路径为*/var/log/nginx*。
- en: Open an interactive shell to the container and create a new file named *my-nginx.log*
    in */var/log/nginx*. Exit out of the Pod.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开容器的交互式shell，并在*/var/log/nginx*中创建名为*my-nginx.log*的新文件。退出Pod。
- en: Delete the Pod and re-create it with the same YAML manifest. Open an interactive
    shell to the Pod, navigate to the directory */var/log/nginx*, and find the file
    you created before.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除Pod，并使用相同的YAML清单重新创建Pod。打开Pod的交互式shell，导航到目录*/var/log/nginx*，并找到之前创建的文件。
