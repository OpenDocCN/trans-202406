- en: Chapter 16\. Sidecar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A sidecar container extends and enhances the functionality of a preexisting
    container without changing it. The *Sidecar* pattern is one of the fundamental
    container patterns that allows single-purpose containers to cooperate closely
    together. In this chapter, you’ll learn all about the basic sidecar concept. The
    specialized follow-up patterns, *Adapter* and *Ambassador*, are discussed in Chapters
    [17](ch17.html#Adapter) and [18](ch18.html#Ambassador), respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containers are a popular packaging technology that allow developers and system
    administrators to build, ship, and run applications in a unified way. A container
    represents a natural boundary for a unit of functionality with a distinct runtime,
    release cycle, API, and team owning it. A proper container behaves like a single
    Linux process—solves one problem and does it well—and is created with the idea
    of replaceability and reuse. This last part is essential as it allows us to build
    applications more quickly by leveraging existing specialized containers.
  prefs: []
  type: TYPE_NORMAL
- en: Today, to make an HTTP call, we don’t have to write a client library but can
    use an existing one. In the same way, to serve a website, we don’t have to create
    a container for a web server but can use an existing one. This approach allows
    developers to avoid reinventing the wheel and create an ecosystem with a smaller
    number of better-quality containers to maintain. However, having single-purpose
    reusable containers requires ways of extending the functionality of a container
    and a means for collaboration among containers. The sidecar pattern describes
    this kind of collaboration, where a container enhances the functionality of another
    preexisting container.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html#kubernetes-core-concepts), we described how the Pod
    primitive allows us to combine multiple containers into a single unit. Behind
    the scenes, at runtime, a Pod is a container as well, but it starts as a paused
    process (literally with the `pause` command) before all other containers in the
    Pod. It is not doing anything other than holding all the Linux namespaces the
    application containers use to interact throughout the Pod’s lifetime. Apart from
    this implementation detail, what is more interesting is all the characteristics
    that the Pod abstraction provides.
  prefs: []
  type: TYPE_NORMAL
- en: The Pod is such a fundamental primitive that it is present in many cloud native
    platforms under different names but always with similar capabilities. A Pod as
    the deployment unit puts certain runtime constraints on the containers belonging
    to it. For example, all containers end up deployed to the same node, and they
    share the same Pod lifecycle. In addition, a Pod allows its containers to share
    volumes and communicate over the local network or host IPC. These are the reasons
    users put a group of containers into a Pod. *Sidecar* (sometimes also called *Sidekick*)
    is used to describe the scenario of a container being put into a Pod to extend
    and enhance another container’s behavior.
  prefs: []
  type: TYPE_NORMAL
- en: A typical example demonstrating this pattern is of an HTTP server and a Git
    synchronizer. The HTTP server container is focused only on serving files over
    HTTP and does not know how or where the files are coming from. Similarly, the
    Git synchronizer container’s only goal is to sync data from a Git server to the
    local filesystem. It does not care what happens once synced—its only concern is
    keeping the local folder in sync with the remote Git server. [Example 16-1](#example-sidecar)
    shows a Pod definition with these two containers configured to use a volume for
    file exchange.
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-1\. Pod with a sidecar
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sidecar_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Main application container serving files over HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_sidecar_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Sidecar container running in parallel and pulling data from a Git server.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_sidecar_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Shared location for exchanging data between the sidecar and main application
    container as mounted in the `app` and `poll` containers, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: This example shows how the Git synchronizer enhances the HTTP server’s behavior
    with content to serve and keeps it synchronized. We could also say that both containers
    collaborate and are equally important, but in a *Sidecar* pattern, there is a
    main container and a helper container that enhance the collective behavior. Typically,
    the main container is the first one listed in the containers list, and it represents
    the default container (e.g., when we run the command `kubectl exec`).
  prefs: []
  type: TYPE_NORMAL
- en: This simple pattern, illustrated in [Figure 16-1](#img-sidecar), allows runtime
    collaboration of containers and at the same time enables separation of concerns
    for both containers, which might be owned by separate teams, using different programming
    languages, with different release cycles, etc. It also promotes replaceability
    and reuse of containers as the HTTP server, and the Git synchronizer can be reused
    in other applications and different configuration either as a single container
    in a Pod or again in collaboration with other containers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sidecar Pattern](assets/kup2_1601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-1\. Sidecar pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously we said that container images are like classes, and containers are
    like the objects in object-oriented programming (OOP). If we continue this analogy,
    extending a container to enhance its functionality is similar to inheritance in
    OOP, and having multiple containers collaborating in a Pod is similar to composition
    in OOP. While both approaches allow code reuse, inheritance involves tighter coupling
    between containers and represents an “is-a” relationship between containers.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a composition in a Pod represents a “has-a” relationship,
    and it is more flexible because it doesn’t couple containers together at build
    time, giving you the ability to later swap containers in the Pod definition. With
    the composition approach, you have multiple containers (processes) running, health
    checked, restarted, and consuming resources, as the main application container
    does. Modern sidecar containers are small and consume minimal resources, but you
    have to decide whether it is worth running a separate process or whether it is
    better to merge it into the main container.
  prefs: []
  type: TYPE_NORMAL
- en: 'We see two dominating approaches for using sidecars: transparent sidecars that
    are invisible to the application, and explicit sidecars that the main application
    interacts with over well-defined APIs. Envoy proxy is an example of a transparent
    sidecar that runs alongside the main container and abstracts the network by providing
    common features such as Transport Layer Security (TLS), load balancing, automatic
    retries, circuit breaking, global rate limiting, observability of L7 traffic,
    distributed tracing, and more. All of these features become available to the application
    by transparently attaching the sidecar container and intercepting all the incoming
    and outgoing traffic to the main container. This is similar to aspect-oriented
    programming, in that with additional containers, we introduce orthogonal capabilities
    to the Pod without touching the main container.'
  prefs: []
  type: TYPE_NORMAL
- en: An example of an explicit proxy that uses the sidecar architecture is Dapr.
    A Dapr sidecar container is injected into a Pod and offers features such as reliable
    service invocation, publish-subscribe, bindings to external systems, state abstraction,
    observability, distributed tracing, and more. The primary difference between Dapr
    and Envoy proxy is that Dapr does not intercept all the networking traffic going
    in and out of the application. Rather, Dapr features are exposed over HTTP and
    gRPC APIs, which the application invokes or subscribes to.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Sidecar Example](https://oreil.ly/bMAvz)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pods](https://oreil.ly/7cII-)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design Patterns for Container-Based Distributed Systems](https://oreil.ly/1XqCg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prana: A Sidecar for Your Netflix PaaS-Based Applications and Services](https://oreil.ly/1KMw1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tin-Can Phone: Patterns to Add Authorization and Encryption to Legacy Applications](https://oreil.ly/8Cq95)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Envoy](https://oreil.ly/0FF-r)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dapr](https://dapr.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Almighty Pause Container](https://oreil.ly/kkhYD)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sidecar Pattern](https://oreil.ly/KYe39)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
