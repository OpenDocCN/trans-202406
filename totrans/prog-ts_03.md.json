["```\nfunction squareOf(n) {\n  return n * n\n}\nsquareOf(2)     // evaluates to 4\nsquareOf('z')   // evaluates to NaN\n```", "```\nfunction squareOf(n: number) {\n  return n * n\n}\nsquareOf(2)     *`// evaluates to 4`*\nsquareOf('z')   *`// Error TS2345: Argument of type '\"z\"' is not assignable to`*\n                *`// parameter of type 'number'.`*\n\n```", "```\nlet a: any = 666            // any\nlet b: any = ['danger']     // any\nlet c = a + b               // any\n```", "```\nlet a: unknown = 30         // unknown\nlet b = a === 123           // boolean\nlet c = a + 10              // Error TS2571: Object is of type 'unknown'.\nif (typeof a === 'number') {\n  let d = a + 10            // number\n}\n```", "```\nlet a = true                // boolean\nvar b = false               // boolean\nconst c = true              // true\nlet d: boolean = true       // boolean\nlet e: true = true          // true\nlet f: true = false         // Error TS2322: Type 'false' is not assignable\n                            // to type 'true'.\n```", "```\nlet a = 1234                // number\nvar b = Infinity * 0.10     // number\nconst c = 5678              // 5678\nlet d = a < b               // boolean\nlet e: number = 100         // number\nlet f: 26.218 = 26.218      // 26.218\nlet g: 26.218 = 10          // Error TS2322: Type '10' is not assignable\n                            // to type '26.218'.\n```", "```\nlet oneMillion = 1_000_000 // Equivalent to 1000000\nlet twoMillion: 2_000_000 = 2_000_000\n```", "```\nlet a = 1234n               // bigint\nconst b = 5678n             // 5678n\nvar c = a + b               // bigint\nlet d = a < 1235            // boolean\nlet e = 88.5n               // Error TS1353: A bigint literal must be an integer.\nlet f: bigint = 100n        // bigint\nlet g: 100n = 100n          // 100n\nlet h: bigint = 100         // Error TS2322: Type '100' is not assignable\n                            // to type 'bigint'.\n```", "```\nlet a = 'hello'             // string\nvar b = 'billy'             // string\nconst c = '!'               // '!'\nlet d = a + ' ' + b + c     // string\nlet e: string = 'zoom'      // string\nlet f: 'john' = 'john'      // 'john'\nlet g: 'john' = 'zoe'       // Error TS2322: Type \"zoe\" is not assignable\n                            // to type \"john\".\n```", "```\nlet a = Symbol('a')         // symbol\nlet b: symbol = Symbol('b') // symbol\nvar c = a === b             // boolean\nlet d = a + 'x'             // Error TS2469: The '+' operator cannot be applied\n                            // to type 'symbol'.\n```", "```\nconst e = Symbol('e')                // typeof e\nconst f: unique symbol = Symbol('f') // typeof f\nlet g: unique symbol = Symbol('f')   // Error TS1332: A variable whose type is a\n                                     // 'unique symbol' type must be 'const'.\nlet h = e === e             // boolean\nlet i = e === f             // Error TS2367: This condition will always return\n                            // 'false' since the types 'unique symbol' and\n                            // 'unique symbol' have no overlap.\n```", "```\nlet a: object = {\n  b: 'x'\n}\n```", "```\na.b   // Error TS2339: Property 'b' does not exist on type 'object'.\n```", "```\nlet a = {\n  b: 'x'\n}            // {b: string}\na.b          // string\n\nlet b = {\n  c: {\n    d: 'f'\n  }\n}            // {c: {d: string}}\n```", "```\nlet a: {b: number} = {\n  b: 12\n}            // {b: number}\n```", "```\nlet c: {\n  firstName: string\n  lastName: string\n} = {\n  firstName: 'john',\n  lastName: 'barrowman'\n}\n\nclass Person {\n  constructor(\n    public firstName: string,   // public is shorthand for\n                                // this.firstName = firstName\n    public lastName: string\n  ) {}\n}\nc = new Person('matt', 'smith') // OK\n\n```", "```\nlet a: {b: number}\n\na = {}  // Error TS2741: Property 'b' is missing in type '{}'\n        // but required in type '{b: number}'.\n\na = {\n  b: 1,\n  c: 2  // Error TS2322: Type '{b: number; c: number}' is not assignable\n}       // to type '{b: number}'. Object literal may only specify known\n        // properties, and 'c' does not exist in type '{b: number}'.\n```", "```\nlet a: {\n  b: number ![1](assets/1.png)\n  c?: string ![2](assets/2.png)\n  [key: number]: boolean ![3](assets/3.png)\n}\n```", "```\na = {b: 1}\na = {b: 1, c: undefined}\na = {b: 1, c: 'd'}\na = {b: 1, 10: true}\na = {b: 1, 10: true, 20: false}\na = {10: true}          // Error TS2741: Property 'b' is missing in type\n                        // '{10: true}'.\na = {b: 1, 33: 'red'}   // Error TS2741: Type 'string' is not assignable\n                        // to type 'boolean'.\n```", "```\nlet user: {\n  readonly firstName: string\n} = {\n  firstName: 'abby'\n}\n\nuser.firstName // string\nuser.firstName =\n  'abbey with an e' // Error TS2540: Cannot assign to 'firstName' because it\n                    // is a read-only property.\n```", "```\nlet danger: {}\ndanger = {}\ndanger = {x: 1}\ndanger = []\ndanger = 2\n```", "```\ntype Age = number\n\ntype Person = {\n  name: string\n  age: Age\n}\n```", "```\nlet age: Age = 55\n\nlet driver: Person = {\n  name: 'James May'\n  age: age\n}\n```", "```\nlet age = 55\n\nlet driver: Person = {\n  name: 'James May'\n  age: age\n}\n```", "```\ntype Color = 'red'\ntype Color = 'blue'  // Error TS2300: Duplicate identifier 'Color'.\n```", "```\ntype Color = 'red'\n\nlet x = Math.random() < .5\n\nif (x) {\n  type Color = 'blue'  // This shadows the Color declared above.\n  let b: Color = 'blue'\n} else {\n  let c: Color = 'red'\n}\n```", "```\ntype Cat = {name: string, purrs: boolean}\ntype Dog = {name: string, barks: boolean, wags: boolean}\ntype CatOrDogOrBoth = Cat | Dog\ntype CatAndDog = Cat & Dog\n```", "```\n// Cat\nlet a: CatOrDogOrBoth = {\n  name: 'Bonkers',\n  purrs: true\n}\n\n// Dog\na = {\n  name: 'Domino',\n  barks: true,\n  wags: true\n}\n\n// Both\na = {\n  name: 'Donkers',\n  barks: true,\n  purrs: true,\n  wags: true\n}\n\n```", "```\nlet b: CatAndDog = {\n  name: 'Domino',\n  barks: true,\n  purrs: true,\n  wags: true\n}\n```", "```\nfunction trueOrNull(isTrue: boolean) {\n  if (isTrue) {\n    return 'true'\n  }\n  return null\n}\n```", "```\ntype Returns = string | null\n```", "```\nfunction(a: string, b: number) {\n  return a || b\n}\n```", "```\nlet a = [1, 2, 3]           // number[]\nvar b = ['a', 'b']          // string[]\nlet c: string[] = ['a']     // string[]\nlet d = [1, 'a']            // (string | number)[]\nconst e = [2, 'b']          // (string | number)[]\n\nlet f = ['red']\nf.push('blue')\nf.push(true)                // Error TS2345: Argument of type 'true' is not\n                            // assignable to parameter of type 'string'.\n\nlet g = []                  // any[]\ng.push(1)                   // number[]\ng.push('red')               // (string | number)[]\n\nlet h: number[] = []        // number[]\nh.push(1)                   // number[]\nh.push('red')               // Error TS2345: Argument of type '\"red\"' is not\n                            // assignable to parameter of type 'number'.\n```", "```\nlet d = [1, 'a']\n\nd.map(_ => {\n  if (typeof _ === 'number') {\n    return _ * 3\n  }\n  return _.toUpperCase()\n})\n\n```", "```\nfunction buildArray() {\n  let a = []                // any[]\n  a.push(1)                 // number[]\n  a.push('x')               // (string | number)[]\n  return a\n}\n\nlet myArray = buildArray()  // (string | number)[]\nmyArray.push(true)          // Error 2345: Argument of type 'true' is not\n                            // assignable to parameter of type 'string | number'.\n```", "```\nlet a: [number] = [1]\n\n// A tuple of [first name, last name, birth year]\nlet b: [string, string, number] = ['malcolm', 'gladwell', 1963]\n\nb = ['queen', 'elizabeth', 'ii', 1926]  // Error TS2322: Type 'string' is not\n                                        // assignable to type 'number'.\n```", "```\n// An array of train fares, which sometimes vary depending on direction\nlet trainFares: [number, number?][] = [\n  [3.75],\n  [8.25, 7.70],\n  [10.50]\n]\n\n// Equivalently:\nlet moreTrainFares: ([number] | [number, number])[] = [\n  // ...\n]\n```", "```\n// A list of strings with at least 1 element\nlet friends: [string, ...string[]] = ['Sara', 'Tali', 'Chloe', 'Claire']\n\n// A heterogeneous list\nlet list: [number, boolean, ...string[]] = [1, false, 'a', 'b', 'c']\n```", "```\nlet as: readonly number[] = [1, 2, 3]     // readonly number[]\nlet bs: readonly number[] = as.concat(4)  // readonly number[]\nlet three = bs[2]                         // number\nas[4] = 5            // Error TS2542: Index signature in type\n                     // 'readonly number[]' only permits reading.\nas.push(6)           // Error TS2339: Property 'push' does not\n                     // exist on type 'readonly number[]'.\n```", "```\ntype A = readonly string[]           // readonly string[]\ntype B = ReadonlyArray<string>       // readonly string[]\ntype C = Readonly<string[]>          // readonly string[]\n\ntype D = readonly [number, string]   // readonly [number, string]\ntype E = Readonly<[number, string]>  // readonly [number, string]\n```", "```\n// (a) A function that returns a number or null\nfunction a(x: number) {\n  if (x < 10) {\n    return x\n  }\n  return null\n}\n\n// (b) A function that returns undefined\nfunction b() {\n  return undefined\n}\n\n// (c) A function that returns void\nfunction c() {\n  let a = 2 + 2\n  let b = a * a\n}\n\n// (d) A function that returns never\nfunction d() {\n  throw TypeError('I always error')\n}\n\n// (e) Another function that returns never\nfunction e() {\n  while (true) {\n    doSomething()\n  }\n}\n```", "```\nenum Language {\n  English,\n  Spanish,\n  Russian\n}\n```", "```\nenum Language {\n  English = 0,\n  Spanish = 1,\n  Russian = 2\n}\n```", "```\nlet myFirstLanguage = Language.Russian      // Language\nlet mySecondLanguage = Language['English']  // Language\n```", "```\nenum Language {\n  English = 0,\n  Spanish = 1\n}\n\nenum Language {\n  Russian = 2\n}\n```", "```\nenum Language {\n  English = 100,\n  Spanish = 200 + 300,\n  Russian                 // TypeScript infers 501 (the next number after 500)\n}\n```", "```\nenum Color {\n  Red = '#c10000',\n  Blue = '#007ac1',\n  Pink = 0xc10050,        // A hexadecimal literal\n  White = 255             // A decimal literal\n}\n\nlet red = Color.Red       // Color\nlet pink = Color.Pink     // Color\n```", "```\nlet a = Color.Red         // Color\nlet b = Color.Green       // Error TS2339: Property 'Green' does not exist\n                          // on type 'typeof Color'.\nlet c = Color[0]          // string\nlet d = Color[6]          // string (!!!)\n```", "```\nconst enum Language {\n  English,\n  Spanish,\n  Russian\n}\n\n// Accessing a valid enum key\nlet a = Language.English  // Language\n\n// Accessing an invalid enum key\nlet b = Language.Tagalog  // Error TS2339: Property 'Tagalog' does not exist\n                          // on type 'typeof Language'.\n\n// Accessing a valid enum value\nlet c = Language[0]       // Error TS2476: A const enum member can only be\n                          // accessed using a string literal.\n\n// Accessing an invalid enum value\nlet d = Language[6]       // Error TS2476: A const enum member can only be\n                          // accessed using a string literal.\n```", "```\n{\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true\n  }\n}\n```", "```\nconst enum Flippable {\n  Burger,\n  Chair,\n  Cup,\n  Skateboard,\n  Table\n}\n\nfunction flip(f: Flippable) {\n  return 'flipped it'\n}\n\nflip(Flippable.Chair)     // 'flipped it'\nflip(Flippable.Cup)       // 'flipped it'\nflip(12)                  // 'flipped it' (!!!)\n```", "```\nconst enum Flippable {\n  Burger = 'Burger',\n  Chair = 'Chair',\n  Cup = 'Cup',\n  Skateboard = 'Skateboard',\n  Table = 'Table'\n}\n\nfunction flip(f: Flippable) {\n  return 'flipped it'\n}\n\nflip(Flippable.Chair)     // 'flipped it'\nflip(Flippable.Cup)       // 'flipped it'\nflip(12)                  // Error TS2345: Argument of type '12' is not\n                          // assignable to parameter of type 'Flippable'.\nflip('Hat')               // Error TS2345: Argument of type '\"Hat\"' is not\n                          // assignable to parameter of type 'Flippable'.\n```", "```\n        let i: 3 = 3\n        i = 4 // Error TS2322: Type '4' is not assignable to type '3'.\n\n        ```", "```\n        let j = [1, 2, 3]\n        j.push(4)\n        j.push('5') // Error TS2345: Argument of type '\"5\"' is not\n                    // assignable to parameter of type 'number'.\n\n        ```", "```\n        let k: never = 4 // Error TSTS2322: Type '4' is not assignable\n                         // to type 'never'.\n\n        ```", "```\n        let l: unknown = 4\n        let m = l * 2 // Error TS2571: Object is of type 'unknown'.\n\n        ```"]