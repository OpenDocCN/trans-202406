["```\n<div>\n  <Header/>\n  <Body>\n    <Excel/>\n    <Dialog>\n      <Form/>\n    </Dialog>\n  </Body>\n</div>\n```", "```\nimport './App.css';\nimport Discovery from './components/Discovery';\nimport DataFlow from './components/DataFlow';\nimport schema from './config/schema';\n\nconst isDiscovery = window.location.pathname.replace(/\\//g, '') === 'discovery';\n\nlet data = JSON.parse(localStorage.getItem('data'));\n\n// default example data, read from the schema\nif (!data) {\n  data = [{}];\n  Object.keys(schema).forEach((key) => (data[0][key] = schema[key].samples[0]));\n}\n\nfunction App() {\n  if (isDiscovery) {\n    return <Discovery />;\n  }\n  return <DataFlow schema={schema} initialData={data} />;\n}\n\nexport default App;\n```", "```\nimport {useState, useReducer, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Dialog from './Dialog';\nimport Excel from './Excel';\nimport Form from './Form';\nimport clone from '../modules/clone';\n\nfunction commitToStorage(data) {\n  // TODO\n}\n\nfunction reducer(data, action) {\n  // TODO\n}\n\nfunction DataFlow({schema, initialData}) {\n  // TODO\n}\n\nDataFlow.propTypes = {\n  schema: PropTypes.object.isRequired,\n  initialData: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default DataFlow;\n```", "```\nfunction commitToStorage(data) {\n  localStorage.setItem('data', JSON.stringify(data));\n}\n```", "```\nfunction reducer(data, action) {\n  if (action.type === 'save') {\n    data = clone(data);\n    data.unshift(action.payload.formData);\n    commitToStorage(data);\n    return data;\n  }\n  if (action.type === 'excelchange') {\n    commitToStorage(action.payload.updatedData);\n    return action.payload.updatedData;\n  }\n}\n```", "```\nfunction DataFlow({schema, initialData}) {\n  const [data, dispatch] = useReducer(reducer, initialData);\n  const [addNew, setAddNew] = useState(false);\n  const [filter, setFilter] = useState(null);\n\n  const form = useRef(null);\n\n  function saveNew(action) {/* TODO */}\n\n  function onExcelDataChange(updatedData) {/* TODO */}\n\n  function onSearch(e) {/* TODO */}\n\n  return (\n    // TODO: render\n  );\n}\n```", "```\nreturn (\n  <div className=\"DataFlow\">\n    <Header\n      onAdd={() => setAddNew(true)}\n      onSearch={onSearch}\n      count={data.length}\n    />\n    <Body>\n      <Excel\n        schema={schema}\n        initialData={data}\n        key={data}\n        onDataChange={(updatedData) => onExcelDataChange(updatedData)}\n        filter={filter}\n      />\n      {addNew ? (\n        <Dialog\n          modal={true}\n          header=\"Add new item\"\n          confirmLabel=\"Add\"\n          onAction={(action) => saveNew(action)}>\n          <Form ref={form} fields={schema} />\n        </Dialog>\n      ) : null}\n    </Body>\n  </div>\n);\n```", "```\nfunction onSearch(e) {\n  setFilter(e.target.value);\n}\n```", "```\nfunction onExcelDataChange(updatedData) {\n  dispatch({\n    type: 'excelchange',\n    payload: {updatedData},\n  });\n}\n```", "```\nfunction saveNew(action) {\n  setAddNew(false);\n  if (action === 'dismiss') {\n    return;\n  }\n\n  const formData = {};\n  Array.from(form.current).forEach(\n    (input) => (formData[input.id] = input.value),\n  );\n\n  dispatch({\n    type: 'save',\n    payload: {formData},\n  });\n}\n```", "```\n// index.js\nlet data = [];\nfunction dataChange(newData) {\n  data = newData\n}\n<App data={data} onDataChange={dataChange} />\n\n// <App> in app.js\n<Body data={props.data} onDataChange={props.onDataChange} />\n\n// <Body>\n<Table\n  data={props.data}\n  onDataChange={props.onDataChange}\n  onSorting={/* ... */}\n  onPaging={/* ... */}\n/>\n\n// In <Table>\nprops.data.forEach((row) => {/* render */});\n// later in <Table>\nprops.onDataChange(newData);\n```", "```\n// index.js\n<App />\n\n// <App> in app.js\n<Body />\n\n// <Body>\n<Table />\n\n// In <Table>\nconst data = Storage.get('data');\ndata.forEach((row) => {/* render */});\n// later in <Table>\nStorage.set('data', newData);\n```", "```\n$ cd ~/reactbook/whinepad\n$ rm -rf node_modules/\n$ rm package-lock.json\n```", "```\n$ cd ~/reactbook/\n$ cp -r whinepad whinepad2\n```", "```\n$ cd ~/reactbook/whinepad2\n$ npm i\n```", "```\n$ npm start .\n```", "```\n$ cd ~/reactbook/whinepad2/src\n$ mkdir contexts\n$ touch contexts/DataContext.js\n```", "```\nimport React from 'react';\n\nconst DataContext = React.createContext();\n\nexport default DataContext;\n```", "```\nconst DataContext = React.createContext({\n  data: [],\n  updateData: () => {},\n});\n```", "```\nimport './App.css';\nimport Discovery from './components/Discovery';\nimport DataFlow from './components/DataFlow';\n\nconst isDiscovery = window.location.pathname.replace(/\\//g, '') === 'discovery';\n\nfunction App() {\n  if (isDiscovery) {\n    return <Discovery />;\n  }\n  return <DataFlow />;\n}\n\nexport default App;\n```", "```\nfunction reducer(data, action) {\n  // ...\n  setTimeout(() => action.payload.onDataChange(data));\n  return data;\n}\n```", "```\nimport schema from '../config/schema';\nimport DataContext from '../contexts/DataContext';\n```", "```\nlet initialData = JSON.parse(localStorage.getItem('data'));\n\n// default example data, read from the schema\nif (!initialData) {\n  initialData = [{}];\n  Object.keys(schema).forEach(\n    (key) => (initialData[0][key] = schema[key].samples[0]),\n  );\n}\n```", "```\nfunction DataFlow() {\n  const [data, setData] = useState(initialData);\n  // ...\n}\n```", "```\nfunction updateData(newData) {\n  newData = clone(newData);\n  commitToStorage(newData);\n  setData(newData);\n}\n```", "```\n<DataContext.Provider value={{data, updateData}}>\n  <Header onSearch={onSearch} />\n  <Body>\n    <Excel filter={filter} />\n  </Body>\n</DataContext.Provider>\n```", "```\nconst DataContext = React.createContext({\n  data: [],\n  updateData: () => {},\n});\n```", "```\nimport {useState} from 'react';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Excel from './Excel';\nimport schema from '../config/schema';\nimport DataContext from '../contexts/DataContext';\nimport clone from '../modules/clone';\n\nlet initialData = JSON.parse(localStorage.getItem('data'));\n\n// default example data, read from the schema\nif (!initialData) {\n  initialData = [{}];\n  Object.keys(schema).forEach(\n    (key) => (initialData[0][key] = schema[key].samples[0]),\n  );\n}\n\nfunction commitToStorage(data) {\n  localStorage.setItem('data', JSON.stringify(data));\n}\n\nfunction DataFlow() {\n  const [data, setData] = useState(initialData);\n  const [filter, setFilter] = useState(null);\n\n  function updateData(newData) {\n    newData = clone(newData);\n    commitToStorage(newData);\n    setData(newData);\n  }\n\n  function onSearch(e) {\n    const s = e.target.value;\n    setFilter(s);\n  }\n\n  return (\n    <div className=\"DataFlow\">\n      <DataContext.Provider value={{data, updateData}}>\n        <Header onSearch={onSearch} />\n        <Body>\n          <Excel filter={filter} />\n        </Body>\n      </DataContext.Provider>\n    </div>\n  );\n}\n\nexport default DataFlow;\n```", "```\nimport Logo from './Logo';\nimport './Header.css';\nimport {useContext, useState, useRef} from 'react';\n\nimport Button from './Button';\nimport FormInput from './FormInput';\nimport Dialog from './Dialog';\nimport Form from './Form';\nimport schema from '../config/schema';\n\nimport DataContext from '../contexts/DataContext';\n\nfunction Header({onSearch}) {\n // TODO\n}\n\nexport default Header;\n```", "```\nfunction Header({onSearch}) {\n  const {data, updateData} = useContext(DataContext);\n  const [addNew, setAddNew] = useState(false);\n\n  const form = useRef(null);\n\n  const count = data.length;\n  const placeholder = count > 1 ? `Search ${count} items` : 'Search';\n\n  function saveNew(action) {\n    // TODO\n  }\n\n  function onAdd() {\n    // TODO\n  }\n\n  // TODO: render\n}\n```", "```\nfunction Header({onSearch}) {\n\n  // ....\n\n  return (\n    <div>\n      <div className=\"Header\">\n        <Logo />\n        <div>\n          <FormInput\n            placeholder={placeholder}\n            id=\"search\"\n            onChange={onSearch}\n          />\n        </div>\n        <div>\n          <Button onClick={onAdd}>\n            <b>&#65291;</b> Add whine\n          </Button>\n        </div>\n      </div>\n      {addNew ? (\n        <Dialog\n          modal={true}\n          header=\"Add new item\"\n          confirmLabel=\"Add\"\n          onAction={(action) => saveNew(action)}>\n          <Form ref={form} fields={schema} />\n        </Dialog>\n      ) : null}\n    </div>\n  );\n}\n```", "```\nfunction onAdd() {\n  setAddNew(true);\n}\n```", "```\nfunction updateData(newData) {\n  newData = clone(newData);\n  commitToStorage(newData);\n  setData(newData);\n}\n```", "```\nimport Logo from './Logo';\nimport './Header.css';\nimport {useContext, useState, useRef} from 'react';\n\nimport Button from './Button';\nimport FormInput from './FormInput';\nimport Dialog from './Dialog';\nimport Form from './Form';\nimport schema from '../config/schema';\n\nimport DataContext from '../contexts/DataContext';\n\nfunction Header({onSearch}) {\n  const {data, updateData} = useContext(DataContext);\n  const count = data.length;\n\n  const [addNew, setAddNew] = useState(false);\n\n  const form = useRef(null);\n\n  function saveNew(action) {\n    setAddNew(false);\n    if (action === 'dismiss') {\n      return;\n    }\n\n    const formData = {};\n    Array.from(form.current).forEach(\n      (input) => (formData[input.id] = input.value),\n    );\n    data.unshift(formData);\n    updateData(data);\n  }\n\n  function onAdd() {\n    setAddNew(true);\n  }\n\n  const placeholder = count > 1 ? `Search ${count} items` : 'Search';\n  return (\n    <div>\n      <div className=\"Header\">\n        <Logo />\n        <div>\n          <FormInput\n            placeholder={placeholder}\n            id=\"search\"\n            onChange={onSearch}\n          />\n        </div>\n        <div>\n          <Button onClick={onAdd}>\n            <b>&#65291;</b> Add whine\n          </Button>\n        </div>\n      </div>\n      {addNew ? (\n        <Dialog\n          modal={true}\n          header=\"Add new item\"\n          confirmLabel=\"Add\"\n          onAction={(action) => saveNew(action)}>\n          <Form ref={form} fields={schema} />\n        </Dialog>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Header;\n```", "```\nfunction reducer(data, action) {\n  if (action.type === 'sort') {\n    const {column, descending} = action.payload;\n    // ...\n  }\n  // ...\n}\n```", "```\nfunction dataMangler(data, action, payload) {\n  if (action === 'sort') {\n    const {column, descending} = payload;\n    // ...\n  }\n  // ...\n}\n```", "```\nfunction dataMangler(data, action, payload) {\n  if (action === 'sort') {\n    const {column, descending} = payload;\n    return data.sort((a, b) => {\n      if (a[column] === b[column]) {\n        return 0;\n      }\n      return descending\n        ? a[column] < b[column]\n          ? 1\n          : -1\n        : a[column] > b[column]\n          ? 1\n          : -1;\n    });\n  }\n  if (action === 'save') {\n    const {int, edit} = payload;\n    data[edit.row][edit.column] = int\n      ? parseInt(payload.value, 10)\n      : payload.value;\n  }\n  if (action === 'delete') {\n    data = clone(data);\n    data.splice(payload.rowidx, 1);\n  }\n  if (action === 'saveForm') {\n    Array.from(payload.form.current).forEach(\n      (input) => (data[payload.rowidx][input.id] = input.value),\n    );\n  }\n  return data;\n}\n```", "```\ndispatch({type: 'sort', payload: {column, descending}});\n```", "```\nconst newData = dataMangler(data, 'sort', {column, descending});\nupdateData(newData);\n```", "```\nupdateData(dataMangler(data, 'sort', {column, descending}));\n```", "```\n<h2>Excel</h2>\n<Excel\n  schema={schema}\n  initialData={schema.name.samples.map((_, idx) => {\n    const element = {};\n    for (let key in schema) {\n      element[key] = schema[key].samples[idx];\n    }\n    return element;\n  })}\n  onDataChange={(data) => {\n    console.log(data);\n  }}\n/>\n```", "```\n<h2>Excel</h2>\n<ExcelExample />\n```", "```\nfunction ExcelExample() {\n  const initialData = schema.name.samples.map((_, idx) => {\n    const element = {};\n    for (let key in schema) {\n      element[key] = schema[key].samples[idx];\n    }\n    return element;\n  });\n  const [data, setData] = useState(initialData);\n  function updateData(newData) {\n    setData(newData);\n  }\n  return (\n    <DataContext.Provider value={{data, updateData}}>\n      <Excel />\n    </DataContext.Provider>\n  );\n}\n```", "```\n// In DataContext.js\nconst DataContext = React.createContext({\n  data: [],\n  updateData: () => {},\n});\n\n// In Excel.js\nconst {data, updateData} = useContext(DataContext);\n\n// `data` is now an empty array and `updateData` is a no-op function\n```", "```\n<h2>Header</h2>\n<Header\n  onSearch={(e) => console.log(e)}\n  onAdd={() => alert('add')}\n  count={3}\n/>\n```", "```\n<h2>Header</h2>\n<DataContext.Provider value={{data: [1, 2, 3]}}>\n  <Header onSearch={(e) => console.log(e)} />\n</DataContext.Provider>\n```", "```\n<h2>Header</h2>\n<DataContext.Provider value={{data: [1, 2, 3], updateData: () => {}}}>\n  <Header onSearch={(e) => console.log(e)} />\n</DataContext.Provider>\n```", "```\nimport React from 'react';\n\nconst RouteContext = React.createContext({\n  route: {\n    add: false,\n    edit: null,\n    info: null,\n    filter: null,\n  },\n  updateRoute: () => {},\n});\n\nexport default RouteContext;\n```", "```\n// ...\nimport RouteContext from '../contexts/RouteContext';\n//...\n\n// read state from the URL \"route\"\nconst route = {};\nfunction resetRoute() {\n  route.add = false;\n  route.edit = null;\n  route.info = null;\n  route.filter = null;\n}\nresetRoute();\nconst path = window.location.pathname.replace(/\\//, '');\nif (path) {\n  const [action, id] = path.split('/');\n  if (action === 'add') {\n    route.add = true;\n  } else if (action === 'edit' && id !== undefined) {\n    route.edit = parseInt(id, 10);\n  } else if (action === 'info' && id !== undefined) {\n    route.info = parseInt(id, 10);\n  } else if (action === 'filter' && id !== undefined) {\n    route.filter = id;\n  }\n}\n\n// ...\n\nfunction DataFlow() {\n  // ...\n}\n```", "```\n{\n  add: false,\n  edit: null,\n  info: null,\n  filter: 'merlot',\n};\n```", "```\n{\n  add: false,\n  edit: 1,\n  info: null,\n  filter: null,\n};\n```", "```\nfunction DataFlow() {\n\n  // ...\n\n  function updateRoute(action = '', id = '') {\n    resetRoute();\n    if (action) {\n      route[action] = action === 'add' ? true : id;\n    }\n    id = id !== '' ? '/' + id : '';\n    window.history.replaceState(null, null, `/${action}${id}`);\n  }\n\n  // ...\n}\n```", "```\nfunction onSearch(e) {\n  const s = e.target.value;\n  setFilter(s);\n}\n```", "```\nfunction onSearch(e) {\n  const s = e.target.value;\n  setFilter(s);\n  if (s) {\n    updateRoute('filter', s);\n  } else {\n    updateRoute();\n  }\n}\n```", "```\nfunction DataFlow() {\n  const [filter, setFilter] = useState(null);\n  // ...\n}\n```", "```\nfunction DataFlow() {\n  const [filter, setFilter] = useState(route.filter);\n  // ...\n}\n```", "```\nfunction DataFlow() {\n  // ...\n  return (\n    <div className=\"DataFlow\">\n      <DataContext.Provider value={{data, updateData}}>\n        <Header onSearch={onSearch} />\n        <Body>\n          <Excel filter={filter} />\n        </Body>\n      </DataContext.Provider>\n    </div>\n  );\n}\n```", "```\nfunction DataFlow() {\n  // ...\n  return (\n    <div className=\"DataFlow\">\n      <DataContext.Provider value={{data, updateData}}>\n        <RouteContext.Provider value={{route, updateRoute}}>\n          <Header onSearch={onSearch} />\n          <Body>\n            <Excel filter={filter} />\n          </Body>\n        </RouteContext.Provider>\n      </DataContext.Provider>\n    </div>\n  );\n}\n```", "```\n// ...\nimport DataContext from '../contexts/DataContext';\n\nfunction Header({onSearch}) {\n  const {data, updateData} = useContext(DataContext);\n  const [addNew, setAddNew] = useState(false);\n  // ...\n```", "```\n// ...\nimport DataContext from '../contexts/DataContext';\nimport RouteContext from '../contexts/RouteContext';\n\nfunction Header({onSearch}) {\n  const {data, updateData} = useContext(DataContext);\n  const {route, updateRoute} = useContext(RouteContext);\n  const [addNew, setAddNew] = useState(route.add);\n```", "```\n<FormInput\n  placeholder={placeholder}\n  id=\"search\"\n  onChange={onSearch}\n/>\n```", "```\n<FormInput\n  placeholder={placeholder}\n  id=\"search\"\n  onChange={onSearch}\n  defaultValue={route.filter}\n/>\n```", "```\nfunction onAdd() {\n  setAddNew(true);\n}\n```", "```\nfunction onAdd() {\n  setAddNew(true);\n  updateRoute('add');\n}\n```", "```\nfunction saveNew(action) {\n  setAddNew(false);\n  // ...\n}\n```", "```\nfunction saveNew(action) {\n  setAddNew(false);\n  updateRoute();\n  // ...\n}\n```", "```\n// ...\nimport RouteContext from '../contexts/RouteContext';\n\nfunction Excel({filter}) {\n  const {route, updateRoute} = useContext(RouteContext);\n  // ...\n}\n```", "```\nuseEffect(() => {\n  if (route.edit !== null && route.edit < data.length) {\n    handleAction(route.edit, 'edit');\n  } else if (route.info !== null && route.info < data.length) {\n    handleAction(route.info, 'info');\n  }\n}, [route, handleAction, data]);\n```", "```\nsetDialog(null);\n```", "```\nsetDialog(null);\nupdateRoute(); // clean up the URL\n```", "```\nconst isEdit = type === 'edit';\nif (type === 'info' || isEdit) {\n  const formPrefill = data[rowidx];\n  setDialog(\n    <Dialog ...\n// ...\n```", "```\nconst isEdit = type === 'edit';\nif (type === 'info' || isEdit) {\n  const formPrefill = data[rowidx];\n  updateRoute(type, rowidx); // makes the URL e.g., /edit/3\n  setDialog(\n    <Dialog ...\n// ...\n```", "```\nuseEffect(() => {\n  if (route.edit !== null && route.edit < data.length) {\n    handleAction(route.edit, 'edit');\n  } else if (route.info !== null && route.info < data.length) {\n    handleAction(route.info, 'info');\n  }\n}, [route, handleAction, data]);\n```", "```\nfunction handleAction(rowidx, type) {\n  // ...\n}\n```", "```\nconst handleAction = useCallback(\n  (rowidx, type) => {\n    // ...\n  },\n  [data, updateData, updateRoute],\n);\n```", "```\nconst handleAction = useCallback(\n  (rowidx, type) => {\n    if (type === 'delete') {\n      setDialog(\n        <Dialog\n          modal\n          header=\"Confirm deletion\"\n          confirmLabel=\"Delete\"\n          onAction={(action) => {\n            setDialog(null);\n            if (action === 'confirm') {\n              updateData(\n                dataMangler(data, 'delete', {\n                  rowidx,\n                  updateData,\n                }),\n              );\n            }\n          }}>\n          {`Are you sure you want to delete \"${data[rowidx].name}\"?`}\n        </Dialog>,\n      );\n    }\n    const isEdit = type === 'edit';\n    if (type === 'info' || isEdit) {\n      const formPrefill = data[rowidx];\n      updateRoute(type, rowidx);\n      setDialog(\n        <Dialog\n          modal\n          extendedDismiss={!isEdit}\n          header={isEdit ? 'Edit item' : 'Item details'}\n          confirmLabel={isEdit ? 'Save' : 'ok'}\n          hasCancel={isEdit}\n          onAction={(action) => {\n            setDialog(null);\n            updateRoute();\n            if (isEdit && action === 'confirm') {\n              updateData(\n                dataMangler(data, 'saveForm', {\n                  rowidx,\n                  form,\n                  updateData,\n                }),\n              );\n            }\n          }}>\n          <Form\n            ref={form}\n            fields={schema}\n            initialData={formPrefill}\n            readonly={!isEdit}\n          />\n        </Dialog>,\n      );\n    }\n  },\n  [data, updateData, updateRoute],\n);\n```"]