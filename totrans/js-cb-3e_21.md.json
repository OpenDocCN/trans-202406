["```\n$ npm search pdf\n```", "```\n$ npm search PDF generation\n```", "```\n$ npm view electron\n```", "```\nconst hello = val => {\n  return console.log(`Hello ${val}`);\n};\n```", "```\nconst hello = val => {\n  return console.log(`Hello ${val}`);\n};\n\nmodule.exports = hello;\n```", "```\nmodule.exports = val => {\n  return console.log(`Hello ${val}`);\n};\n```", "```\nvar hello = require('./lib/hello.js');\n\n// logs 'Hello world'\nhello('world');\n```", "```\nconst greeting = {\n  hello: val => {\n    return console.log(`Hello ${val}`);\n  },\n  ciao: val => {\n    return console.log(`Ciao ${val}`);\n  }\n};\n\nmodule.exports = greeting;\n```", "```\nconst hello = val => {\n  return console.log(`Hello ${val}`);\n};\n\nconst ciao = val => {\n  return console.log(`Ciao ${val}`);\n};\n\nmodule.exports = { hello, ciao };\n```", "```\nconst greeting = require('./lib/greeting.js')\n\n// logs 'Hello world'\ngreeting.hello('world');\n// logs 'Ciao mondo'\ngreeting.ciao('mondo');\n```", "```\nconst bbarray = {\n  concatArray: (str, array) => {\n    return array.map(element => {\n      return `${str} ${element}`;\n    });\n  },\n  splitArray: (str, array) => {\n    return array.map(element => {\n      return element.substring(str.length + 1);\n    });\n  }\n};\n\nmodule.exports = bbarray;\nexports.concatArray = bbarray.concatArray;\nexports.splitArray = bbarray.splitArray;\n```", "```\nimport bbarray from './index.cjs';\n\nexport const { concatArray, splitArray } = bbarray;\nexport default bbarray;\n```", "```\n\"type\": \"module\",\n\"main\": \"./index.cjs\",\n\"exports\": {\n  \".\": \"./index.cjs\",\n  \"./module\": \"./wrapper.mjs\"\n},\n```", "```\nconst bbarray = require('bbarray');\n\nbbarray.concatArray('is', ['test', 'three']);\nbbarray.splitArray('is', ['is test', 'is three']);\n```", "```\nconst { concatArray, splitArray } = require('bbarray');\n\nconcatArray('is', ['test', 'three']);\nsplitArray('is', ['is test', 'is three']);\n```", "```\nimport bbarray from 'bbarray/module';\n\nbbarray.concatArray('is', ['test', 'three']);\nbbarray.splitArray('is', ['is test', 'is three']);\n```", "```\nimport { concatArray, splitArray } from 'bbarray/module';\n\nconcatArray('is', ['test', 'three']);\nsplitArray('is', ['is test', 'is three']);\n```", "```\n\"type\": \"module\",\n\"main\": \"./index.cjs\",\n\"exports\": {\n  \".\": \"./index.cjs\",\n  \"./module\": \"./wrapper.mjs\"\n},\n```", "```\n\"type\": \"module\",\n\"main\": \"./index.js\",\n\"exports\": {\n  \".\": \"./index.js\",\n  \"./module\": \"./wrapper.js\"\n},\n```", "```\n{\n  \"name\": \"bbArray\",\n  \"version\": \"0.1.0\",\n  \"description\": \"A description of what my module is about\",\n  \"main\": \"./lib/bbArray\",\n  \"author\": {\n    \"name\": \"Shelley Powers\"\n  },\n  \"keywords\": [\n    \"array\",\n    \"utility\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/accountname/bbarray.git\"\n  },\n  \"engines\" : {\n    \"node\" : \">=0.10.0\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/accountname/bbarray/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://github.com/accountname/bbarray/raw/master/LICENSE\"\n    }\n  ],\n  \"dependencies\": {\n     \"some-module\": \"~0.1.0\"\n  },\n  \"directories\":{\n     \"doc\":\"./doc\",\n     \"man\":\"./man\",\n     \"lib\":\"./lib\",\n     \"bin\":\"./bin\"\n  },\n  \"scripts\": {\n    \"test\": \"nodeunit test/test-bbarray.js\"\n  }\n }\n```", "```\n$ npm init\n```", "```\n$ npm install . -g\n```", "```\n$ npm add-user\n```", "```\n$ npm publish ./\n```", "```\n$ npm install jest --save-dev\n```", "```\n \"devDependencies\": {\n    \"jest\": \"^24.9.0\"\n  }\n```", "```\n$ npm install express --save\n```", "```\n\"dependencies\": {\n    \"express\": \"^3.4.11\"\n  }\n```", "```\n$ npm remove jest\n```", "```\n$ npm remove express\n```", "```\n\"dependencies\": {}\n```", "```\n# Project Title\n\nProvide a brief description of the project and what it does.\nIf the project has a UI, include a screenshot as well.\n\nIf more comprehensive documentation exists, link to it here.\n\n## Features\n\nDescribe the core features of the project (what does it do?)\nin the form of a bulleted list:\n\n- Feature #1\n- Feature #2\n- Feature #3\n\n## Getting Started\n\nProvide installation instructions, general usage guidance, API examples,\nand build and deployment information. Assume as little prior knowledge\nas possible, describing everything in clear and coherent steps.\n\n### Installation/Dependencies\n\nHow does a user get up and running with your project? What dependencies\ndoes the project have? Aim to describe these in clear and simple steps.\nProvide external links.\n\n### Usage\n\nProvide examples of how the project may be used. For large projects with\nexternal documentation, provide a few examples and link to the full docs here.\n\n### Build/Deployment\n\nIf the user will be building or deploying the project, add any useful guidance.\n\n## Getting Help\n\nWhat should users do and expect when they encounter bugs or get stuck using\nyour project? Set expectations for support, link to the issue tracker and\nroadmap, if applicable.\n\nWhere should users go if they have a question? (Stack Overflow, Gitter, IRC,\nmailing list, etc.)\n\nIf desired, you may also provide links to core contributor email addresses.\n\n## Contributing Guidelines\n\nInclude instructions for setting up the development environment, code standards,\nrunning tests, and submitting pull requests. It may be useful to link to a\nseparate CONTRIBUTING.md file. See this example from the Hoodie project:\nhttps://github.com/hoodiehq/hoodie/blob/master/CONTRIBUTING.md\n\n## Code of Conduct\n\nProvide a link to the Code of Conduct for your project. I recommend using the\nContributor Covenant: http://contributor-covenant.org/\n\n## License\n\nInclude a license for your project. If you need help choosing a license,\nuse this guide: https://choosealicense.com\n```", "```\n$ pandoc README.md -o readme.html\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-library.js',\n    library: 'myLibrary',\n    libraryTarget: 'umd',\n    globalObject: 'this'\n  },\n};\n```", "```\nexport function squareIt(num) {\n    return num * num;\n};\n```", "```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An example library bundled by Webpack\",\n  \"main\": \"dist/my-library.js\",\n  \"scripts\": {\n    \"build\": \"webpack\"\n  },\n  \"keywords\": [\"example\"],\n  \"author\": \"Adam Scott <adam@jseverywhere.io>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"webpack\": \"4.44.1\",\n    \"webpack-cli\": \"3.3.12\"\n  }\n}\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-library.js',\n    library: 'myLibrary',\n    libraryTarget: 'umd',\n    globalObject: 'this'\n  },\n};\n```", "```\n$ git init\n$ git remote add origin git://git-remote-url\n$ npm publish\n```", "```\nimport * as myLibrary from 'my-library';\n\nmyLibrary.squareIt(4);\n```", "```\nconst myLibrary = require('my-library');\n\nmyLibrary.squareIt(4);\n```", "```\nrequire(['myLibrary'], function (myLibrary) {\n  myLibrary.squareIt(4);\n});\n```", "```\n<!doctype html>\n<html>\n  <script src=\"https://unpkg.com/my-library\"></script>\n  <script>\n    myLibrary.squareIt(4);\n  </script>\n</html>\n```", "```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-library.js',\n    library: 'myLibrary',\n    libraryTarget: 'umd',\n    globalObject: 'this'\n  },\n  externals: {\n    moment: {\n      commonjs: 'moment',\n      commonjs2: 'moment',\n      amd: 'moment',\n      root: 'moment',\n    }\n  }\n};\n```", "```\nconst util = require('util');\n\nconst bbarray = {\n  concatArray: (str, array) => {\n    if (!util.isArray(array) || array.length === 0) {\n      return -1;\n    }\n\n    if (typeof str !== 'string') {\n      return -1;\n    }\n\n    return array.map(element => {\n      return `${str} ${element}`;\n    });\n  },\n  splitArray: (str, array) => {\n    if (!util.isArray(array) || array.length === 0) {\n      return -1;\n    }\n\n    if (typeof str !== 'string') {\n      return -1;\n    }\n\n    return array.map(element => {\n      return element.substring(str.length + 1);\n    });\n  }\n};\n\nmodule.exports = bbarray;\n```", "```\nconst bbarray = require('../index.js');\n\ndescribe('concatArray()', () => {\n  test('should return -1 when not using array', () => {\n    expect(bbarray.concatArray(9, 'str')).toBe(-1);\n  });\n\n  test('should return -1 when not using string', () => {\n    expect(bbarray.concatArray(9, ['test', 'two'])).toBe(-1);\n  });\n\n  test('should return an array with proper args', () => {\n    expect(bbarray.concatArray('is', ['test', 'three'])).toStrictEqual([\n      'is test',\n      'is three'\n    ]);\n  });\n});\n\ndescribe('splitArray()', () => {\n  test('should return -1 when not using array', () => {\n    expect(bbarray.splitArray(9, 'str')).toBe(-1);\n  });\n\n  test('should return -1 when not using string', () => {\n    expect(bbarray.splitArray(9, ['test', 'two'])).toBe(-1);\n  });\n\n  test('should return an array with proper args', () => {\n    expect(bbarray.splitArray('is', ['is test', 'is three'])).toStrictEqual([\n      'test',\n      'three'\n    ]);\n  });\n});\n```", "```\n$ npm install jest --save-dev\n```", "```\n \"scripts\": {\n    \"test\": \"jest\"\n  },\n```", "```\n$ npm test\n```"]