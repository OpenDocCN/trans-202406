- en: Afterword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes is the leading platform for deploying and managing containerized
    distributed applications at scale. However, these on-cluster applications rely
    on off-cluster resources, including databases, document stores, message queues,
    and other cloud services. Kubernetes is not limited to managing applications within
    a single cluster. Kubernetes can also orchestrate off-cluster resources through
    various cloud services’ operators. This allows Kubernetes APIs to be the single
    “source of truth” for a resource’s desired state, not only for on-cluster containers
    but also for off-cluster resources. If you are already familiar with Kubernetes
    patterns and practices for operating applications, you can leverage this knowledge
    for managing and using external resources too.
  prefs: []
  type: TYPE_NORMAL
- en: The physical boundaries of a Kubernetes cluster don’t always conform to the
    desired application boundaries. Organizations often need to deploy applications
    across multiple data centers, clouds, and Kubernetes clusters for a variety of
    reasons, such as scaling, data locality, isolation, and more. Often, the same
    application or a fleet of applications has to be deployed into multiple clusters,
    which requires multicluster deployments and orchestration. Kubernetes is frequently
    embedded in various third-party services and used for operating applications across
    multiple clusters. These services utilize the Kubernetes API as the control plane,
    with each cluster serving as a data plane, allowing Kubernetes to extend its reach
    across multiple clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Today, Kubernetes has evolved beyond just a container orchestrator. It is capable
    of managing on-cluster, off-cluster, and multicluster resources, making it a versatile
    and extensible operational model for managing many kinds of resources. Its declarative
    YAML API and asynchronous reconciliation process have become synonymous with the
    resource orchestration paradigm. Its CRDs and Operators have become common extension
    mechanisms for merging domain knowledge with distributed systems. We believe that
    the majority of modern applications will be running on platforms that are offering
    Kubernetes APIs, or on runtimes that are heavily influenced by Kubernetes abstractions
    and patterns. If you are a software developer creating such applications, you
    must be proficient in modern programming languages to implement business functionality,
    as well as cloud native technologies. Kubernetes patterns will become mandatory
    common knowledge for integrating applications with the runtime platform. Familiarizing
    yourself with the Kubernetes patterns will enable you to create and run applications
    in any environment.
  prefs: []
  type: TYPE_NORMAL
- en: What We Covered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we covered the most popular patterns from Kubernetes, grouped
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Foundational patterns* represent the principles that containerized applications
    must comply with in order to become good cloud native citizens. Regardless of
    the application nature, and the constraints you may face, you should aim to follow
    these guidelines. Adhering to these principles will help ensure that your applications
    are suitable for automation on Kubernetes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Behavioral patterns* describe the communication mechanisms and interactions
    between the Pods and the managing platform. Depending on the type of workload,
    a Pod may run until completion as a batch job or be scheduled to run periodically.
    It can run as a stateless or stateful service and as a daemon service or singleton.
    Picking the right management primitive will help you run a Pod with the desired
    guarantees.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Structural patterns* focus on structuring and organizing containers in a Pod
    to satisfy different use cases. Having good cloud native containers is the first
    step but is not enough. Reusing containers and combining them into Pods to achieve
    a desired outcome is the next step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Configuration patterns* cover customizing and adapting applications for different
    configuration needs on the cloud. Every application needs to be configured, and
    no one way works for all. We explore patterns from the most common to the most
    specialized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security patterns* describe how to constrain an application while intersecting
    with Kubernetes. Containerized applications have security dimensions too, and
    we cover application interactions with the nodes, interactions with other Pods,
    the Kubernetes API server, and secure configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Advanced patterns* explore more complex topics that do not fit in any of the
    other categories. Some of the patterns, such as *Controller*, are mature—Kubernetes
    itself is built on it—and some are still evolving and might change by the time
    you read this book. But these patterns cover fundamental ideas that cloud native
    developers should be familiar with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Final Words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like all good things, this book has come to an end. We hope you have enjoyed
    reading this book and that it has changed the way you think about Kubernetes.
    We truly believe Kubernetes and the concepts originating from it will be as fundamental
    as object-oriented programming concepts are. This book is our attempt to create
    the Gang of Four Design Patterns but for container orchestration. We hope this
    is not the end but the beginning of your Kubernetes journey; it has been so for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: Happy kubectl-ing.
  prefs: []
  type: TYPE_NORMAL
