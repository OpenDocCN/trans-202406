- en: Afterword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: Kubernetes is the leading platform for deploying and managing containerized
    distributed applications at scale. However, these on-cluster applications rely
    on off-cluster resources, including databases, document stores, message queues,
    and other cloud services. Kubernetes is not limited to managing applications within
    a single cluster. Kubernetes can also orchestrate off-cluster resources through
    various cloud services’ operators. This allows Kubernetes APIs to be the single
    “source of truth” for a resource’s desired state, not only for on-cluster containers
    but also for off-cluster resources. If you are already familiar with Kubernetes
    patterns and practices for operating applications, you can leverage this knowledge
    for managing and using external resources too.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是在规模上部署和管理容器化分布式应用程序的领先平台。然而，这些集群内应用程序依赖于集群外的资源，包括数据库、文档存储、消息队列和其他云服务。Kubernetes
    并不仅限于管理单个集群内的应用程序。Kubernetes 还可以通过各种云服务的操作者编排集群外资源。这使得 Kubernetes API 不仅可以成为集群内容器的期望状态的唯一“真相源”，还可以成为集群外资源的期望状态的唯一“真相源”。如果您已经熟悉
    Kubernetes 模式和操作应用程序的实践，您可以利用这些知识来管理和使用外部资源。
- en: The physical boundaries of a Kubernetes cluster don’t always conform to the
    desired application boundaries. Organizations often need to deploy applications
    across multiple data centers, clouds, and Kubernetes clusters for a variety of
    reasons, such as scaling, data locality, isolation, and more. Often, the same
    application or a fleet of applications has to be deployed into multiple clusters,
    which requires multicluster deployments and orchestration. Kubernetes is frequently
    embedded in various third-party services and used for operating applications across
    multiple clusters. These services utilize the Kubernetes API as the control plane,
    with each cluster serving as a data plane, allowing Kubernetes to extend its reach
    across multiple clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 集群的物理边界并不总是符合所需的应用程序边界。组织经常需要在多个数据中心、云和 Kubernetes 集群之间部署应用程序，出于各种原因，如扩展、数据局部性、隔离等。通常，同一应用程序或一组应用程序必须部署到多个集群中，这需要多集群部署和编排。Kubernetes
    经常嵌入在各种第三方服务中，用于在多个集群中操作应用程序。这些服务利用 Kubernetes API 作为控制平面，每个集群作为数据平面，使 Kubernetes
    能够跨多个集群扩展其功能。
- en: Today, Kubernetes has evolved beyond just a container orchestrator. It is capable
    of managing on-cluster, off-cluster, and multicluster resources, making it a versatile
    and extensible operational model for managing many kinds of resources. Its declarative
    YAML API and asynchronous reconciliation process have become synonymous with the
    resource orchestration paradigm. Its CRDs and Operators have become common extension
    mechanisms for merging domain knowledge with distributed systems. We believe that
    the majority of modern applications will be running on platforms that are offering
    Kubernetes APIs, or on runtimes that are heavily influenced by Kubernetes abstractions
    and patterns. If you are a software developer creating such applications, you
    must be proficient in modern programming languages to implement business functionality,
    as well as cloud native technologies. Kubernetes patterns will become mandatory
    common knowledge for integrating applications with the runtime platform. Familiarizing
    yourself with the Kubernetes patterns will enable you to create and run applications
    in any environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Kubernetes 已经超越了仅仅是一个容器编排器的角色。它能够管理集群内、集群外和多集群资源，使其成为一种多功能且可扩展的操作模型，用于管理多种资源。其声明式
    YAML API 和异步协调过程已经成为资源编排范式的代名词。其自定义资源（CRDs）和操作者（Operators）已成为合并领域知识与分布式系统的常见扩展机制。我们相信，大多数现代应用程序将运行在提供
    Kubernetes API 或受 Kubernetes 抽象和模式强烈影响的运行时平台上。如果你是一个开发这类应用程序的软件开发人员，你必须精通现代编程语言，以实现业务功能，同时也要了解云原生技术。Kubernetes
    模式将成为整合应用程序与运行时平台的必备常识。熟悉 Kubernetes 模式将使您能够在任何环境中创建和运行应用程序。
- en: What We Covered
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们覆盖的内容
- en: 'In this book, we covered the most popular patterns from Kubernetes, grouped
    as the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们涵盖了 Kubernetes 中最流行的模式，分组如下：
- en: '*Foundational patterns* represent the principles that containerized applications
    must comply with in order to become good cloud native citizens. Regardless of
    the application nature, and the constraints you may face, you should aim to follow
    these guidelines. Adhering to these principles will help ensure that your applications
    are suitable for automation on Kubernetes.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基础模式*代表容器化应用必须遵循的原则，以成为良好的云原生应用。无论应用的性质和你可能面临的约束是什么，你都应该力求遵循这些准则。遵循这些原则将有助于确保你的应用程序适合在
    Kubernetes 上进行自动化。'
- en: '*Behavioral patterns* describe the communication mechanisms and interactions
    between the Pods and the managing platform. Depending on the type of workload,
    a Pod may run until completion as a batch job or be scheduled to run periodically.
    It can run as a stateless or stateful service and as a daemon service or singleton.
    Picking the right management primitive will help you run a Pod with the desired
    guarantees.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*行为模式*描述了 Pod 与管理平台之间的通信机制和交互方式。根据工作负载的类型，一个 Pod 可能会作为批处理作业运行直至完成，或者定期调度运行。它可以作为无状态或有状态服务运行，也可以作为守护服务或单实例运行。选择正确的管理原语将帮助您以所需的保证运行
    Pod。'
- en: '*Structural patterns* focus on structuring and organizing containers in a Pod
    to satisfy different use cases. Having good cloud native containers is the first
    step but is not enough. Reusing containers and combining them into Pods to achieve
    a desired outcome is the next step.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*结构模式*专注于在 Pod 中结构化和组织容器，以满足不同的使用场景。拥有良好的云原生容器是第一步，但这并不足够。重用容器并将它们组合成 Pod 以实现期望的结果是下一步。'
- en: '*Configuration patterns* cover customizing and adapting applications for different
    configuration needs on the cloud. Every application needs to be configured, and
    no one way works for all. We explore patterns from the most common to the most
    specialized.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置模式*涵盖了在云上为不同配置需求定制和调整应用程序的过程。每个应用程序都需要进行配置，没有一种方法适合所有情况。我们从最常见的模式到最专业化的模式进行探索。'
- en: '*Security patterns* describe how to constrain an application while intersecting
    with Kubernetes. Containerized applications have security dimensions too, and
    we cover application interactions with the nodes, interactions with other Pods,
    the Kubernetes API server, and secure configurations.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安全模式*描述了如何在与 Kubernetes 交互时限制应用程序。容器化应用程序也有安全维度，我们涵盖了与节点的应用程序交互、与其他 Pod 的交互、Kubernetes
    API 服务器以及安全配置。'
- en: '*Advanced patterns* explore more complex topics that do not fit in any of the
    other categories. Some of the patterns, such as *Controller*, are mature—Kubernetes
    itself is built on it—and some are still evolving and might change by the time
    you read this book. But these patterns cover fundamental ideas that cloud native
    developers should be familiar with.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高级模式*探索了不适合其他类别的更复杂的主题。其中一些模式，如*控制器*，已经很成熟——Kubernetes 本身就是建立在它之上的——而一些模式仍在不断发展，可能在你阅读本书时已经发生了变化。但这些模式涵盖了云原生开发人员应熟悉的基本思想。'
- en: Final Words
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: Like all good things, this book has come to an end. We hope you have enjoyed
    reading this book and that it has changed the way you think about Kubernetes.
    We truly believe Kubernetes and the concepts originating from it will be as fundamental
    as object-oriented programming concepts are. This book is our attempt to create
    the Gang of Four Design Patterns but for container orchestration. We hope this
    is not the end but the beginning of your Kubernetes journey; it has been so for
    us.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有好东西一样，这本书也已经结束了。我们希望你喜欢阅读本书，并且它改变了你对 Kubernetes 的看法。我们真诚地相信，Kubernetes 及其衍生的概念将像面向对象编程概念一样基础。这本书是我们尝试创建《设计模式》四人帮的容器编排版本。我们希望这不是结束，而是你的
    Kubernetes 之旅的开始；对我们来说，它确实如此。
- en: Happy kubectl-ing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在使用 kubectl 时愉快。
