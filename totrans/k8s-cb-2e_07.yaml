- en: Chapter 7\. Exploring the Kubernetes API and Key Metadata
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章 探索 Kubernetes API 和关键元数据
- en: In this chapter, we present recipes that address basic interactions with Kubernetes
    objects as well as the API. Every [object in Kubernetes](https://oreil.ly/kMcj7),
    no matter if namespaced like a deployment or cluster-wide like a node, has certain
    fields available—​for example, `metadata`, `spec`, and `status`. The `spec` describes
    the desired state for an object (the specification), and the `status` captures
    the actual state of the object, managed by the Kubernetes API server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了处理 Kubernetes 对象及其 API 基本交互的实例。每个 [Kubernetes 中的对象](https://oreil.ly/kMcj7)，无论是像部署一样的有命名空间的对象，还是像节点一样的全局对象，都有一些可用的字段
    — 例如 `metadata`、`spec` 和 `status`。`spec` 描述了对象的期望状态（规范），而 `status` 则捕获了对象的实际状态，由
    Kubernetes API 服务器管理。
- en: 7.1 Discovering the Kubernetes API Server’s Endpoints
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1 探索 Kubernetes API 服务器的端点
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to discover the various API endpoints available on the Kubernetes API
    server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望发现 Kubernetes API 服务器上可用的各种 API 端点。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Here we assume you’ve spun up a development cluster like kind or Minikube locally.
    You can run `kubectl proxy` in a separate terminal. The proxy lets you easily
    access the Kubernetes server API with an HTTP client such as `curl`, without needing
    to worry about authentication and certificates. After running `kubectl proxy`,
    you should be able to reach the API server on port 8001, as shown here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们假设您已经在本地启动了一个开发集群，如 kind 或 Minikube。您可以在单独的终端中运行 `kubectl proxy`。代理允许您使用诸如
    `curl` 这样的 HTTP 客户端轻松访问 Kubernetes 服务器 API，而无需担心身份验证和证书。运行 `kubectl proxy` 后，您应该能够通过端口
    8001 访问 API 服务器，如下所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This lists all the objects exposed by the Kubernetes API. At the top of the
    list you can see an example of an object with `kind` set to `Binding` as well
    as the allowed operations on this object (here, `create`).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这列出了 Kubernetes API 暴露的所有对象。在列表顶部，您可以看到一个对象的示例，其 `kind` 设置为 `Binding`，以及此对象上允许的操作（此处为
    `create`）。
- en: Note that another convenient way to discover the API endpoints is to use the
    `kubectl api-resources` command.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，发现 API 端点的另一个便捷方式是使用 `kubectl api-resources` 命令。
- en: Discussion
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'You can discover all the API groups by calling the following endpoint:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用以下端点来发现所有的 API 组：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Pick some API groups to explore from this list, such as the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从此列表中选择一些要探索的 API 组，例如以下内容：
- en: '`/apis/apps`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/apis/apps`'
- en: '`/apis/storage.k8s.io`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/apis/storage.k8s.io`'
- en: '`/apis/flowcontrol.apiserver.k8s.io`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/apis/flowcontrol.apiserver.k8s.io`'
- en: '`/apis/autoscaling`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/apis/autoscaling`'
- en: Each of these endpoints corresponds to an API group. The core API objects are
    available in the `v1` group at `/api/v1`, whereas other newer API objects are
    available in named groups under the `/apis/` endpoint, such as `storage.k8s.io/v1`
    and `apps/v1`. Within a group, API objects are versioned (e.g., `v1`, `v2`, `v1alpha`,
    `v1beta1`) to indicate the maturity of the objects. Pods, services, config maps,
    and secrets, for example, are all part of the `/api/v1` API group, whereas the
    `/apis/autoscaling` group has `v1` and `v2` versions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些端点对应一个 API 组。核心 API 对象在 `/api/v1` 组中可用，而其他更新的 API 对象在 `/apis/` 端点下的命名组中可用，例如
    `storage.k8s.io/v1` 和 `apps/v1`。在一个组内，API 对象被版本化（例如 `v1`、`v2`、`v1alpha`、`v1beta1`）以指示对象的成熟度。例如，Pods、services、config
    maps 和 secrets 都是 `/api/v1` API 组的一部分，而 `/apis/autoscaling` 组则有 `v1` 和 `v2` 版本。
- en: The group an object is part of is what is referred to as the `apiVersion` in
    the object specification, available via the [API reference](https://oreil.ly/fvO82).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对象所属的组被称为对象规范中的 `apiVersion`，可通过 [API 参考](https://oreil.ly/fvO82) 获取。
- en: See Also
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes [API overview](https://oreil.ly/sANzL)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [API 概述](https://oreil.ly/sANzL)
- en: Kubernetes [API conventions](https://oreil.ly/ScJvH)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes [API 约定](https://oreil.ly/ScJvH)
- en: 7.2 Understanding the Structure of a Kubernetes Manifest
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.2 理解 Kubernetes 清单的结构
- en: Problem
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Although Kubernetes does have convenient generators like `kubectl run` and `kubectl
    create`, you must to learn how to write Kubernetes manifests to embrace the declarative
    nature of Kubernetes object specifications. To do this, you need to understand
    the general structure of manifests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Kubernetes 具有方便的生成器如 `kubectl run` 和 `kubectl create`，您必须学会如何编写 Kubernetes
    清单文件以支持 Kubernetes 对象规范的声明性特性。为此，您需要理解清单的一般结构。
- en: Solution
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: In [Recipe 7.1](#api_endpoints), you learned about the various API groups and
    how to discover which group a particular object is in.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Recipe 7.1](#api_endpoints) 中，您了解了各种 API 组以及如何发现特定对象所属的组。
- en: All API resources are either objects or lists. All resources have a `kind` and
    an `ap⁠i​Ve⁠rs⁠ion`. In addition, every object `kind` must have `metadata`. The
    `metadata` contains the name of the object, the namespace it is in (see [Recipe
    7.3](#namespace)), and optionally some labels (see [Recipe 7.6](#labels)) and
    annotations (see [Recipe 7.7](#easy_annotate)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'A pod, for example, will be of `kind Pod` and `apiVersion v1`, and the beginning
    of a simple manifest written in YAML will look like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To complete a manifest, most objects will have a `spec` and, once created,
    will also return a `status` that describes the current state of the object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes manifests can be used to define the desired state of your cluster.
    Because manifests are files, they can be stored in a version control system like
    Git. This allows for distributed and asynchronous collaboration among developers
    and operators and also enables the creation of automation pipelines for continuous
    integration and deployment. This is the basic idea behind GitOps, in which any
    changes to a system are made by changing a source of truth in a version control
    system. Because all changes are logged in the system, it is possible to revert
    to previous states or reproduce a given state multiple times. Infrastructure as
    code (IaC) is a term often used when the declarative source of truth is describing
    the state of infrastructure (as opposed to applications).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Objects in Kubernetes](https://oreil.ly/EONxU)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7.3 Creating Namespaces to Avoid Name Collisions
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create two objects with the same name but want to avoid naming collisions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create two namespaces and create one object in each.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t specify anything, objects are created in the `default` namespace.
    Try creating a second namespace called `my-app`, as shown here, and list the existing
    namespaces. You will see the `default` namespace, other namespaces that were created
    on start-up (`kube-system`, `kube-public`, and `kube-node-lease`), and the `my-app`
    namespace you just created:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Alternatively, you can write a manifest to create your namespace. If you save
    the following manifest as *app.yaml*, you can then create the namespace with the
    `kubectl apply -f app.yaml` command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Attempting to start two objects with the same name in the same namespace (e.g.,
    `default`) leads to a collision, and an error is returned by the Kubernetes API
    server. However, if you start the second object in a different namespace, the
    API server will create it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `kube-system` namespace is reserved for administrators, whereas the [`kube-public`
    namespace](https://oreil.ly/kQFsq) is meant to store public objects available
    to any users of the cluster.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 7.4 Setting Quotas Within a Namespace
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to limit the resources available in a namespace—​for example, the overall
    number of pods that can run in the namespace.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a `ResourceQuota` object to specify the limitations on a namespace basis.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ResourceQuota` 对象来指定命名空间基础上的限制。
- en: 'Start by creating a manifest for a resource quota and saving it in a file called
    *resource-quota-pods.yaml*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个资源配额的清单，并将其保存在名为 *resource-quota-pods.yaml* 的文件中：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then create a new namespace and apply the quota to it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个新的命名空间并对其应用配额：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You can set a number of quotas on a per-namespace basis, including but not limited
    to pods, secrets, and config maps.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在每个命名空间基础上设置多个配额，包括但不限于 pods、secrets 和 config maps。
- en: See Also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Configure Quotas for API Objects](https://oreil.ly/jneBT)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为 API 对象配置配额](https://oreil.ly/jneBT)'
- en: 7.5 Labeling an Object
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.5 给对象打标签
- en: Problem
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to label an object so that you can easily find it later. The label
    can be used for further end-user queries (see [Recipe 7.6](#labels)) or in the
    context of system automation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望为对象打上标签，以便稍后轻松找到它。标签可用于进一步的最终用户查询（参见 [Recipe 7.6](#labels)）或在系统自动化的上下文中使用。
- en: Solution
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl label` command. For example, to label a pod named `foobar`
    with the key/value pair `tier=frontend`, do this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl label` 命令。例如，要为名为 `foobar` 的 pod 打上键/值对 `tier=frontend` 的标签，请执行以下操作：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Check the complete help for the command (`kubectl label --help`). You can use
    it to find out how to remove labels, overwrite existing ones, and even label all
    resources in a namespace.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 查看命令的完整帮助 (`kubectl label --help`)。您可以使用它来了解如何删除标签、覆盖现有标签，甚至为命名空间中的所有资源打上标签。
- en: Discussion
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In Kubernetes, you use labels to organize objects in a flexible, nonhierarchical
    manner. A label is a key/value pair without any predefined meaning for Kubernetes.
    In other words, the content of the key/value pair is not interpreted by the system.
    You can use labels to express membership (e.g., object X belongs to department
    ABC), environments (e.g., this service runs in production), or really anything
    you need to organize your objects. There are some common useful labels that you
    can read about in the [Kubernetes documentation](https://oreil.ly/SMl_N). Note
    that labels do have restrictions concerning their [length and allowed values](https://oreil.ly/AzeM8).
    However, there is a [community guideline](https://oreil.ly/lTkhW) for naming keys.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，您可以使用标签以灵活、非层次化的方式组织对象。标签是一个在 Kubernetes 中没有预定义含义的键/值对。换句话说，系统不会解释键/值对的内容。您可以使用标签来表示成员关系（例如，对象
    X 属于部门 ABC）、环境（例如，此服务在生产环境运行）或任何需要组织对象的内容。您可以在 [Kubernetes 文档](https://oreil.ly/SMl_N)
    中了解一些常用的有用标签。请注意，标签在其 [长度和允许值](https://oreil.ly/AzeM8) 方面有一些限制。然而，对于键的命名，有一个 [社区指南](https://oreil.ly/lTkhW)。
- en: 7.6 Using Labels for Queries
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.6 使用标签进行查询
- en: Problem
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to query objects efficiently.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望高效查询对象。
- en: Solution
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl get --selector` command. For example, given the following
    pods:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl get --selector` 命令。例如，给定以下的 pods：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'you can select the pods that belong to the NGINX app (`app=nginx`):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择属于 NGINX 应用程序 (`app=nginx`) 的 pods：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Labels are part of an object’s metadata. Any object in Kubernetes can be labeled.
    Labels are also used by Kubernetes itself for pod selection by deployments (see
    [Recipe 4.1](ch04.html#kubectl_run)) and services (see [Chapter 5](ch05.html#ch_services)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是对象元数据的一部分。在 Kubernetes 中，任何对象都可以被标记。标签也被 Kubernetes 本身用于通过 deployments（参见
    [Recipe 4.1](ch04.html#kubectl_run)）和 services（参见 [Chapter 5](ch05.html#ch_services)）选择
    pod。
- en: 'Labels can be added manually with the `kubectl label` command (see [Recipe
    7.5](#easy_label)), or you can define labels in an object manifest, like so:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 标签可以通过 `kubectl label` 命令手动添加（参见 [Recipe 7.5](#easy_label)），或者您可以在对象清单中定义标签，如下所示：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once labels are present, you can list them with `kubectl get`, noting the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦标签存在，您可以使用 `kubectl get` 列出它们，注意以下内容：
- en: '`-l` is the short form of `--selector` and will query objects with a specified
    `*key*``=``*value*` pair.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l` 是 `--selector` 的缩写形式，将查询具有指定 `*key*``=``*value*` 对的对象。'
- en: '`--show-labels` will show all the labels of each object returned.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--show-labels` 将显示返回的每个对象的所有标签。'
- en: '`-L` will add a column to the results returned with the value of the specified
    label.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-L` 将在返回的结果中添加一个列，该列的值为指定标签的值。'
- en: Many object kinds support set-based querying, meaning you can state a query
    in a form like “must be labeled with X and/or Y.” For example, `kubectl get pods
    -l 'env in (production, development)'` would give you pods that are in either
    the production or development environment.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多对象类型支持基于集合的查询，这意味着您可以以“必须具有 X 和/或 Y 标签”的形式进行查询。例如，`kubectl get pods -l 'env
    in (production, development)'` 将给出在生产环境或开发环境中的 Pod。
- en: 'With two pods running, one with label `run=barfoo` and the other with label
    `ru⁠n=​fo⁠oba⁠r`, you would get outputs similar to the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当有两个运行中的 Pod，一个带有标签`run=barfoo`，另一个带有标签`ru⁠n=​fo⁠oba⁠r`时，您将会得到类似以下的输出：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See Also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Kubernetes documentation on [labels and selectors](https://oreil.ly/ku1Sc)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 上关于[标签和选择器](https://oreil.ly/ku1Sc)的文档。
- en: 7.7 Annotating a Resource with One Command
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.7 使用一个命令给资源加注释
- en: Problem
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to annotate a resource with a generic, nonidentifying key/value pair,
    possibly using non-human-readable data.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用一个通用的、非标识的键值对对资源进行注释，可能使用非人类可读的数据。
- en: Solution
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `kubectl annotate` command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl annotate`命令：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Discussion
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Annotations tend to be used for added automation of Kubernetes. For example,
    when you create a deployment with the `kubectl create deployment` command, you
    will notice that the `change-cause` column in your rollout history (see [Recipe
    4.6](ch04.html#updating-deployments)) is empty. As of Kubernetes v1.6.0, to start
    recording the commands that cause changes to the deployment, you can annotate
    it with the `kubernetes.io/change-cause` key. Given a deployment `foobar`, you
    might annotate it with the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注释通常用于增强 Kubernetes 的自动化。例如，当您使用`kubectl create deployment`命令创建一个部署时，您会注意到您的发布历史中的`change-cause`列（参见[Recipe
    4.6](ch04.html#updating-deployments)）是空的。从 Kubernetes v1.6.0 开始，您可以使用`kubernetes.io/change-cause`键对其进行注释，以开始记录导致部署变更的命令。假设有一个名为
    `foobar` 的部署，您可以使用以下内容对其进行注释：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Subsequent changes to the deployment will be recorded.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对部署的后续更改将被记录下来。
- en: One of the major differences between annotations and labels is that labels can
    be used as filtering criteria, whereas annotations cannot. Unless you plan to
    use your metadata for filtering, then it is generally preferable to use annotations.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注释和标签之间的主要区别之一在于，标签可以用作过滤条件，而注释则不能。除非您计划将元数据用于过滤，否则通常更倾向于使用注释。
