["```\nconst MyComponent = () => (\n  <section id=\"list\">\n    <h1>This is my list!</h1>\n    <p>Isn't my list amazing? It contains amazing things!</p>\n    <ul>\n      {amazingThings.map((t) => (\n        <li key={t.id}>{t.label}</li>\n      ))}\n    </ul>\n  </section>\n);\n```", "```\nconst MyComponent = () =>\n  React.createElement(\n    \"section\",\n    { id: \"list\" },\n    React.createElement(\"h1\", {}, \"This is my list!\"),\n    React.createElement(\n      \"p\",\n      {},\n      \"Isn't my list amazing? It contains amazing things!\"\n    ),\n    React.createElement(\n      \"ul\",\n      {},\n      amazingThings.map((t) =>\n        React.createElement(\"li\", { key: t.id }, t.label)\n      )\n    )\n  );\n```", "```\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst MyComponent = () =>\n  _jsxs(\"section\", {\n    id: \"list\",\n    children: [\n      _jsx(\"h1\", {\n        children: \"This is my list!\",\n      }),\n      _jsx(\"p\", {\n        children: \"Isn't my list amazing? It contains amazing things!\",\n      }),\n      _jsx(\"ul\", {\n        children: amazingThings.map((t) =>\n          _jsx(\n            \"li\",\n            {\n              children: t.label,\n            },\n            t.id\n          )\n        ),\n      }),\n    ],\n  });\n```", "```\nconst a = 1;\nlet b = 2;\n\nconsole.log(a + b);\n```", "```\n\\[(?:[a-z0-9!#\\$%&'\\*\\+-/=\\?\\^_`{\\|}~]+(?:\\.[a-z0-9!#\\$%&'\\*\\+-/=\\?\\^_`{\\|}~]+)\\\n*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0\ne-\\x7f])\\*\")@(?:(?:[a-z0-9](?:[a-z0-9-]\\*?[a-z0-9])?\\.)\\*?[a-z0-9](?:[a-z0-9-]\\*\n?[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4]\n[0-9]|[01]?[0-9][0-9]?|[a-z0-9-]\\*?[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\\nx5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\\+)\\])\\]\n```", "```\n{\ntype: \"Program\",\nbody: [\n    {\n    type: \"VariableDeclaration\",\n    declarations: [\n        {\n        type: \"VariableDeclarator\",\n        id: {\n            type: \"Identifier\",\n            name: \"a\"\n        },\n        init: {\n            type: \"Literal\",\n            value: 1,\n            raw: \"1\"\n        }\n        }\n    ],\n    kind: \"const\"\n    },\n    {\n    type: \"VariableDeclaration\",\n    declarations: [\n        {\n        type: \"VariableDeclarator\",\n        id: {\n            type: \"Identifier\",\n            name: \"b\"\n        },\n        init: {\n            type: \"Literal\",\n            value: 2,\n            raw: \"2\"\n        }\n        }\n    ],\n    kind: \"let\"\n    },\n    {\n    type: \"ExpressionStatement\",\n    expression: {\n        type: \"CallExpression\",\n        callee: {\n        type: \"Identifier\",\n        name: \"console\"\n        },\n        arguments: [\n        {\n            type: \"BinaryExpression\",\n            left: {\n            type: \"Identifier\",\n            name: \"a\"\n            },\n            right: {\n            type: \"Identifier\",\n            name: \"b\"\n            },\n            operator: \"+\"\n        }\n        ]\n    }\n    }\n]\n}\n```", "```\nfunction pragma(tag, props, ...children)\n```", "```\n<MyComponent prop=\"value\">contents</MyComponent>\n```", "```\nReact.createElement(MyComponent, { prop: \"value\" }, \"contents\");\n```", "```\nconst a = 1;\nconst b = 2;\n\nconst MyComponent = () => <Box>Here's an expression: {a + b}</Box>;\n```", "```\nconst a = 1;\nconst b = 2;\n\nconst MyComponent = () => <Box>Is b more than a? {b > a ? \"YES\" : \"NO\"}</Box>;\n```", "```\nconst MyComponent = () => <Box>Here's an expression: {\n    const a = 1;\n    const b = 2;\n\n    if (a > b) {\n        3\n    }\n}</Box>;\n```"]