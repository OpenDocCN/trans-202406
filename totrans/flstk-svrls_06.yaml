- en: 'Chapter 6\. Serverless Functions In-Depth: Part 1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.xhtml#ch2), you learned how to create and interact with
    a serverless API using API Gateway and AWS Lambda. Here, you’ll continue to learn
    about how to use serverless functions by creating two new types of functions.
    The functions in this chapter will be different in that, instead of using them
    as strictly a web server or an API, you’ll be using them to interact with other
    AWS services to aid in the application-development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll be creating the following two kinds of functions in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A function that dynamically adds a user to a group based on their email address
  prefs: []
  type: TYPE_NORMAL
- en: In some applications, you will need to perform “coarse-grained” access control,
    which typically means granting certain permissions to users in a broad way based
    on the type of role or group they are associated with. In our example, we’ll have
    an administrator group of users that will be identified by their email address.
    If a user signs up with one of these email addresses, we will place them in a
    group called *Admin*.
  prefs: []
  type: TYPE_NORMAL
- en: A function that automatically resizes an image after it has been uploaded to
    Amazon S3
  prefs: []
  type: TYPE_NORMAL
- en: Many applications require dynamic image resizing on the server after a user
    has uploaded an image. This is done for many reasons, ranging from the need to
    make the web application more performant by compressing images to the need to
    dynamically create avatars or thumbnail images of a smaller size for images.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.xhtml#ch7), we’ll continue learning about serverless functions
    by creating an ecommerce application that interacts with a database and allows
    the user to create, read, update, and delete items from a database by invoking
    the function via an API call.
  prefs: []
  type: TYPE_NORMAL
- en: Event Sources and Data Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 2](ch02.xhtml#ch2), we briefly talked about event sources for serverless
    functions as part of an event-based architecture. The only event source we have
    implemented up until this point has been from API Gateway: an HTTP request that
    triggered the function, and fetched data from an API and returned it in the response.
    In this chapter, we’ll be working with two other event types and sources, one
    from Amazon S3 and one from Amazon Cognito.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the events coming into Lambda from the event sources, it’s important
    to underscore the following point: the shape of the event data will differ between
    different event types. For instance, the HTTP event data structure coming from
    API Gateway will be different than the Amazon S3 event data structure, and the
    Amazon S3 event data structure will differ from the Amazon Cognito data structure.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the shape of the event data, as well as knowing the data available
    to you in the event, will help you understand the capabilities of what you can
    do in the Lambda function. To understand this better, let’s take a look at the
    shape of various data structures from different events. For now, you do not need
    to understand every field and value in these data structures. I will outline the
    values that will be important for us in the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: API Gateway Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The API gateway event data is the data structure that will be passed into the
    Lambda function when invoking it from an API Gateway HTTP event, like GET, PUT,
    POST, or DELETE. This data structure holds information like the HTTP method that
    invoked the function, the path that was invoked, the body if one was passed in,
    and the identity of the user calling the API (inside the `requestContext.identity`
    field) if the user was authenticated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Amazon S3 Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Amazon S3 event is the data structure that will be received when invoking
    a Lambda function from a file upload or update to Amazon S3\. This data structure
    holds an array of records from S3\. The main information you’ll typically be working
    with in this event data is the `s3` field. This property holds information like
    the bucket name, the key, and the size of the item being stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Amazon Cognito Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Amazon Cognito event data is the data structure that will be passed into
    the function when being invoked from an Amazon Cognito action. These actions could
    be anything from a user signing up, a user confirming their account, or a user
    signing in, among other available events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You’ll be using these events and the information contained within them to perform
    different types of actions from within the functions.
  prefs: []
  type: TYPE_NORMAL
- en: IAM Permissions and Trigger Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When setting up these triggers using the CLI, a couple of things are happening
    under the hood:'
  prefs: []
  type: TYPE_NORMAL
- en: The CLI is enabling the trigger itself in the Lambda configuration. When a trigger
    is enabled, the event will be sent to the function every time that interaction
    happens (API event, S3 upload, etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CLI is giving additional permissions to the function itself to interact
    with other services. For instance, when we enable the S3 trigger in this chapter,
    we are wanting the Lambda function to be able to read and store images in that
    bucket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable this, the CLI will add additional Identity and Access Management (IAM)
    policies under the hood to the function, giving it permissions like read and write
    access to work with S3, or permissions to interact with the Cognito user pool
    in our other example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating the Base Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we’ll do is create a new React application and install the
    dependencies we’ll need for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll create a new Amplify project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now that the project has been initialized, we can begin adding the services.
    The services we’ll need for this chapter will be Amazon Cognito, Amazon S3, and
    AWS Lambda. We’ll start by adding Amazon Cognito and testing out a post-confirmation
    Lambda trigger.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Post-Confirmation Lambda Trigger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing we want to do is create an authentication service. We will then
    create and configure a post-confirmation Lambda trigger. This means we want a
    Lambda function to be invoked every time someone successfully signs up and confirms
    their account using our authentication service. This post-confirmation trigger
    only fires once per confirmed user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, update the function with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this function, there is one main piece of functionality. If the user is one
    of the admins specified in the `admins` email array, we automatically place them
    in the group called `Admins`. Change the values in the `adminEmails` array to
    include your email address.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy the service, run the `push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the backend is set up, we can test it out. To do so, we first need
    to configure the React project to recognize the Amplify dependencies. Open *src/index.js*
    and add the following below the last import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll sign up a new user and display a greeting if they are an admin.
    To do so, open *src/App.js* and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, sign up with an admin user. If the user is indeed one of the admins, you
    should see the `Welcome, Admin` greeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also view the Amazon Cognito authentication service and all of the
    users and groups by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic Image Resizing with AWS Lambda and Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next example, we will add functionality that allows users to upload images
    to Amazon S3\. We’ll also configure an S3 trigger to call a Lambda function every
    time a file is uploaded to the bucket. In this function, we’ll check the size
    of the image, and if it is above a certain width, we will resize it to be below
    the width threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this to work, we need to enable S3 to trigger the Lambda function in our
    project when a file is uploaded. We can do this using the Amplify CLI by just
    creating the S3 bucket and choosing the correct configuration. From the CLI, run
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will open the function into your text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Custom Logic for Resizing the Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we can update the function to implement the image resizing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this function, we will fetch the image from S3 when the event comes through,
    and check to see if it is greater than 1,000 pixels wide. If that’s the case,
    then we’ll resize it to 1,000 pixels wide and save it back to the S3 bucket. If
    the image is not larger than 1,000 pixels wide, we exit from the function without
    taking any action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For our function to work, we need to do one more thing. We are requiring the
    Sharp library in our Lambda function, but so far we have not installed this dependency.
    To make sure this module is installed, update the *package.json* file for the
    function to add both the dependency for the package as well as an install script
    that we will need in order for Sharp to run correctly in the Lambda environment.
    The two fields we will be adding are `scripts` and `dependencies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the service is ready to be deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Uploading Images from the React Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, open *src/App.js* and add the following code to render an image picker
    and photo list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When you upload an image that is wider than 1,000 pixels, you’ll notice that
    it will initially load as the original size, but if you reload the app, you will
    see that the image has been resized to the correct 1,000-pixel width.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, you’ve now successfully implemented two types of Lambda triggers!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to keep in mind from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda functions can be invoked from many different event types, including API
    calls, image uploads, database operations, and authentication events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `event` data structure differs based on the type of event invoking the Lambda
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the data available in the event variable enables you to better
    evaluate the things that can be accomplished within the function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a Lambda trigger is enabled by the Amplify CLI, additional IAM permissions
    are given to the function, allowing it to directly interact with other services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
