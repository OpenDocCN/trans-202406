["```\n$ npm install express\n```", "```\nconst express = require('express');\n\nconst app = express();\nconst port = process.env.PORT || '3000';\n\napp.listen(port, () => console.log(`Listening on port ${port}`));\n```", "```\nconst express = require('express');\n\nconst app = express();\nconst port = process.env.PORT || '3000';\n\napp.get('/', (req, res) => res.send('Hello World'));\n\napp.listen(port, () => console.log(`Listening on port ${port}`));\n```", "```\nconst express = require('express');\n\nconst app = express();\nconst port = process.env.PORT || '3000';\n\n// middleware for static files\n// will serve static files from the 'files' directory\napp.use(express.static('files'));\n\napp.listen(port, () => console.log(`Listening on port ${port}`));\n```", "```\n$ npm install pug --save\n```", "```\napp.set('view engine', 'pug')\n\napp.get('/template', (req, res) => {\n  res.render('template');\n});\n```", "```\nhtml\n  head\n    title=\"Using Express\"\n  body\n    h1=\"Hello World\"\n```", "```\n$ PORT=7777 node index.js\n```", "```\napp.get('/', (req, res) => res.send('Hello World'));\n```", "```\napp.use(express.static('files'));\n```", "```\nconst express = require('express');\nconst helmet = require('helmet');\n\nconst app = express();\n\napp.use(helmet());\n```", "```\n// a user object of data to send to the template\nconst userData = {\n  name: 'Adam',\n  email: 'adam@jseverywhere.io',\n  avatar: 'https://s.gravatar.com/avatar/33aab819d1ffa11fc4b31a4eebaf0c5a?s=80'\n};\n\n// render the template with user data\napp.get('/user', (req, res) => {\n  res.render('user', { userData });\n});\n```", "```\nhtml\n  head\n    title User Page\n  body\n    h1 #{userData.name} Profile\n    ul\n      li\n        image(src=userData.avatar)\n      li #{userData.name}\n      li #{userData.email}\n```", "```\n$ npm install ejs\n```", "```\napp.set('view engine', 'ejs');\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>User Page</title>\n  </head>\n  <body>\n    <h1><%= userData.name %> Profile</h1>\n    <ul>\n      <li><img src=<%= userData.avatar %> /></li>\n      <li><%= userData.name %></li>\n      <li><%= userData.email %></li>\n    </ul>\n  </body>\n</html>\n```", "```\n$ npx express-generator --pug --git\n```", "```\n$ npx express-generator -h\n```", "```\n$ npm install\n```", "```\n$ npm start\n```", "```\napp.js\npackage-lock.json\npackage.json\n/bin\n   www\n/node_modules\n/public\n   /images\n   /javascripts\n   /stylesheets\n      style.css\n      style.styl\n/routes\n   index.js\n   users.js\n/views\n   error.pug\n   index.pug\n   layout.pug\n```", "```\nvar createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\n```", "```\nvar app = express():\n```", "```\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n```", "```\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n```", "```\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n```", "```\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n```", "```\nmodule.exports = app;\n```", "```\nvar express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n```", "```\nvar express = require('express');\nvar router = express.Router();\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});\n\nmodule.exports = router;\n```", "```\nextends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}\n```", "```\ndoctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    block content\n```", "```\nhttp://yourdomain.com:3000/users\n```", "```\n$ export NODE_ENV=production\n```", "```\n// respond with different route paths\napp.get('/', (req, res) => res.send('Hello World'));\napp.get('/users', (req, res) => res.send('Hello users'));\n\n// parameters\napp.get('/users/:userId', (req, res) => {\n  res.send(`Hello user ${req.params.userId}`);\n});\n```", "```\napp.post('/new', (req, res) => {\n  res.send('POST request to the `new` route');\n});\n```", "```\napp\n  .route('/record')\n  .get((req, res) => {\n    res.send('Get a record');\n  })\n  .post((req, res) => {\n    res.send('Add a record');\n  })\n  .put((req, res) => {\n    res.send('Update a record');\n  });\n```", "```\napp.get('/users/:userId', (req, res) => {\n  res.send(`Hello user ${req.params.userId}`);\n});\n```", "```\napp.get('^/users/:userId/notes/:noteId([0-9]{6})', (req, res) => {\n  res.send(`This is note ${req.params.noteId}`);\n});\n```", "```\napp.get(/.*day$/, (req, res) => {\n  res.send(`Every day feels like ${req.path}`);\n});\n```", "```\nconst OAuth = require('oauth');\nconst fetch = require('node-fetch');\nconst { promisify } = require('util');\n\n// read Twitter keys from a .env file\nrequire('dotenv').config();\n\n// Twitter's search API endpoint and the query we'll be searching\nconst endpointUrl = 'https://api.twitter.com/2/tweets/search/recent';\nconst query = 'javascript';\n\nasync function getTweets() {\n  // consumer key and secret passed in from environment variables\n  const oauth2 = new OAuth.OAuth2(\n    process.env.TWITTER_CONSUMER_KEY,\n    process.env.TWITTER_CONSUMER_SECRET,\n    'https://api.twitter.com/',\n    null,\n    'oauth2/token',\n    null\n  );\n\n  // retrieve the credentials from Twitter\n  const getOAuthAccessToken = promisify(\n    oauth2.getOAuthAccessToken.bind(oauth2)\n  );\n  const token = await getOAuthAccessToken('', {\n    grant_type: 'client_credentials'\n  });\n\n  // make the request for data with the retrieved token\n  const res = await fetch(`${endpointUrl}?query=${query}`, {\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  });\n\n  const json = await res.json();\n  return json;\n}\n\n(async () => {\n  try {\n    // Make request\n    const response = await getTweets();\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n    process.exit(-1);\n  }\n  process.exit();\n})();\n```", "```\nPOST /oauth2/token HTTP/1.1\nHost: api.twitter.com\nUser-Agent: My Twitter App v1.0.23\nAuthorization: Basic eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJn\n                NmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw==\n                Content-Type: application/x-www-form-urlencoded;charset=UTF-8\nContent-Length: 29\nAccept-Encoding: gzip\n\ngrant_type=client_credentials\n```", "```\nHTTP/1.1 200 OK\nStatus: 200 OK\nContent-Type: application/json; charset=utf-8\n...\nContent-Encoding: gzip\nContent-Length: 140\n\n{\"token_type\":\"bearer\",\"access_token\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n%2FAAAAAAAAAAAAAAAAAAAA%3DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}\n```", "```\nhttps://api.twitter.com/1.1/statuses/update.json\n```", "```\n twitter.statuses('update', {\n        \"status\": \"Hi from Shelley's Toy Box. (Ignore--developing Node app)\"\n        }, atoken, atokensec, function(err, data, response) {...});\n\ntwitter.statuses(\n  'update',\n  {\n    status: 'Ignore learning OAuth with Node'\n  },\n  tokenValues.atoken,\n  tokenValues.atokensec,\n  (err, data) => { ... });\n```", "```\nconst express = require('express');\nconst TwitterAPI = require('node-twitter-api');\n\nrequire('dotenv').config();\n\nconst port = process.env.PORT || '8080';\n\n// keys and callback URL are configured in the Twitter Dev Center\nconst twitter = new TwitterAPI({\n  consumerKey: process.env.TWITTER_CONSUMER_KEY,\n  consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n  callback: 'http://127.0.0.1:8080/oauth/callback'\n});\n\n// object for storing retrieved token values\nconst tokenValues = {};\n\n// twitter OAuth API URL\nconst twitterAPI = 'https://api.twitter.com/oauth/authenticate';\n\n// simple HTML template\nconst menu =\n  '<a href=\"/post/status/\">Say hello</a><br />' +\n  '<a href=\"/get/account/\">Account Settings<br />';\n\n// Create a new Express application.\nconst app = express();\n\n// request Twitter permissions when the / route is visited\napp.get('/', (req, res) => {\n  twitter.getRequestToken((error, requestToken, requestTokenSecret) => {\n    if (error) {\n      console.log(`Error getting OAuth request token : ${error}`);\n      res.writeHead(200);\n      res.end(`Error getting authorization${error}`);\n    } else {\n      tokenValues.token = requestToken;\n      tokenValues.tokensec = requestTokenSecret;\n      res.writeHead(302, {\n        Location: `${twitterAPI}?oauth_token=${requestToken}`\n      });\n      res.end();\n    }\n  });\n});\n\n// callback url as specified in the Twitter Developer Center\napp.get('/oauth/callback', (req, res) => {\n  twitter.getAccessToken(\n    tokenValues.token,\n    tokenValues.tokensec,\n    req.query.oauth_verifier,\n    (err, accessToken, accessTokenSecret) => {\n      res.writeHead(200);\n      if (err) {\n        res.end(`problems getting authorization with Twitter${err}`);\n      } else {\n        tokenValues.atoken = accessToken;\n        tokenValues.atokensec = accessTokenSecret;\n        res.end(menu);\n      }\n    }\n  );\n});\n\n// post a status update from an authenticated and authorized users\napp.get('/post/status/', (req, res) => {\n  twitter.statuses(\n    'update',\n    {\n      status: 'Ignore teaching OAuth with Node'\n    },\n    tokenValues.atoken,\n    tokenValues.atokensec,\n    (err, data) => {\n      res.writeHead(200);\n      if (err) {\n        res.end(`problems posting ${JSON.stringify(err)}`);\n      } else {\n        res.end(`posting status: ${JSON.stringify(data)}<br />${menu}`);\n      }\n    }\n  );\n});\n\n// get account details for an authenticated and authorized user\napp.get('/get/account/', (req, res) => {\n  twitter.account(\n    'settings',\n    {},\n    tokenValues.atoken,\n    tokenValues.atokensec,\n    (err, data) => {\n      res.writeHead(200);\n      if (err) {\n        res.end(`problems getting account ${JSON.stringify(err)}`);\n      } else {\n        res.end(`<p>${JSON.stringify(data)}</p>${menu}`);\n      }\n    }\n  );\n});\n\napp.listen(port, () => console.log(`Listening on port ${port}!`));\n```", "```\nconst express = require('express');\nconst passport = require('passport');\nconst { Strategy } = require('passport-github');\n\npassport.use(\n  new Strategy(\n    {\n      clientID: GITHUB_CLIENT_ID,\n      clientSecret: GITHUB_CLIENT_SECRET,\n      callbackURL: 'login/github/callback'\n    },\n    (accessToken, refreshToken, profile, cb) => {\n      return cb(null, profile);\n    }\n  )\n);\n```", "```\npassport.serializeUser((user, cb) => {\n  cb(null, user);\n});\n\npassport.deserializeUser((obj, cb) => {\n  cb(null, obj);\n});\n```", "```\napp.use(\n  require('express-session')({\n    secret: SESSION_SECRET,\n    resave: true,\n    saveUninitialized: true\n  })\n);\n\napp.use(passport.session());\n```", "```\napp.use(passport.initialize());\n\napp.get('/login/github', passport.authenticate('github'));\n\napp.get(\n  '/login/github/callback',\n  passport.authenticate('github', { failureRedirect: '/login' }),\n  (req, res) => {\n    res.redirect('/');\n  }\n);\n```", "```\napp.get('/', (req, res) => {\n  res.render('home', { user: req.user });\n});\n```", "```\n# install general application dependencies\nnpm install express pug dotenv\n# install passport dependencies\nnpm install passport passport-github\n# install persistent user session dependencies\nnpm install connect-ensure-login express-session\n```", "```\nGITHUB_CLIENT_ID=<Your client ID>\nGITHUB_CLIENT_SECRET=<Your client secret>\nSESSION_SECRET=<A session secret - this can be any value you decide>\n```", "```\nconst express = require('express');\nconst passport = require('passport');\nconst { Strategy } = require('passport-github');\n\nrequire('dotenv').config();\n\nconst port = process.env.PORT || '3000';\n\n// Configure the Passport strategy\npassport.use(\n  new Strategy(\n    {\n      clientID: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      callbackURL: `http://localhost:${port}/login/github/callback`\n    },\n    (accessToken, refreshToken, profile, cb) => {\n      return cb(null, profile);\n    }\n  )\n);\n\n// Serialize and deserialize the user\npassport.serializeUser((user, cb) => {\n  cb(null, user);\n});\n\npassport.deserializeUser((obj, cb) => {\n  cb(null, obj);\n});\n\n// create the Express application\nconst app = express();\napp.set('views', `${__dirname}/views`);\napp.set('view engine', 'pug');\n\n// use the Express session middleware for preserving user session\napp.use(\n  require('express-session')({\n    secret: process.env.SESSION_SECRET,\n    resave: true,\n    saveUninitialized: true\n  })\n);\n\n// Initialize passport and restore the authentication state from the session\napp.use(passport.initialize());\napp.use(passport.session());\n\n// listen on port 3000 or the PORT set as an environment variable\napp.listen(port, () => console.log(`Listening on port ${port}!`));\n```", "```\nif !user\n  p Welcome! Please\n    a(href='/login/github') Login with GitHub\nelse\n  h1 Hello #{user.username}!\n  p View your\n    a(href='/profile') profile\n```", "```\nh1 Login\na(href='/login/github') Login with GitHub\n```", "```\nh1 Profile\nul\n  li ID: #{user.id}\n  li Name: #{user.username}\n  if user.emails\n    li Email: #{user.emails[0].value}\n```", "```\napp.get('/', (req, res) => {\n  res.render('home', { user: req.user });\n});\n\napp.get('/login', (req, res) => {\n  res.render('login');\n});\n\napp.get('/login/github', passport.authenticate('github'));\n\napp.get(\n  '/login/github/callback',\n  passport.authenticate('github', { failureRedirect: '/login' }),\n  (req, res) => {\n    res.redirect('/');\n  }\n);\n\napp.get(\n  '/profile',\n  require('connect-ensure-login').ensureLoggedIn(),\n  (req, res) => {\n    res.render('profile', { user: req.user });\n  }\n);\n```", "```\nconst builder = require('xmlbuilder');\n\nconst xml = builder\n  .create('resources')\n  .ele('resource')\n  .ele('title', 'Ecma-262 Edition 10')\n  .up()\n  .ele('url', 'https://www.ecma-international.org/ecma-262/10.0/index.html')\n  .up()\n  .end({ pretty: true });\n```", "```\napp.get('/', (req, res) => {\n  res.setHeader('Content-Type', 'application/xml');\n  res.end(xml.toString(), 'utf8');\n});\n```", "```\nnpm install xmlbuilder\n```", "```\nconst express = require('express');\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  return res.send('Received a GET HTTP method');\n});\napp.post('/', (req, res) => {\n  return res.send('Received a POST HTTP method');\n});\napp.put('/', (req, res) => {\n  return res.send('Received a PUT HTTP method');\n});\napp.delete('/', (req, res) => {\n  return res.send('Received a DELETE HTTP method');\n});\napp.listen(port, () => console.log(`Listening on port ${port}!`));\n```", "```\nconst express = require('express');\n\nconst port = process.env.PORT || 3000;\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// an array of data\nlet todos = [\n  {\n    id: '1',\n    text: 'Order pizza',\n    completed: true\n  },\n  {\n    id: '2',\n    text: 'Pick up pizza',\n    completed: false\n  }\n];\n\n// get the list of todos\napp.get('/todos', (req, res) => {\n  return res.send({ data: { todos } });\n});\n\n// get an individual todo\napp.get('/todos/:todoId', (req, res) => {\n  const foundTodo = todos.find(todo => todo.id === req.params.todoId);\n  return res.send({ data: foundTodo });\n});\n\n// create a new todo\napp.post('/todos', (req, res) => {\n  const todo = {\n    id: String(todos.length + 1),\n    text: req.body.text,\n    completed: false\n  };\n\n  todos.push(todo);\n  return res.send({ data: todo });\n});\n\n// update a todo\napp.put('/todos/:todoId', (req, res) => {\n  const todoIndex = todos.findIndex(todo => todo.id === req.params.todoId);\n  const todo = {\n    id: req.params.todoId,\n    text: req.body.text || todos[todoIndex].text,\n    completed: req.body.completed || todos[todoIndex].completed\n  };\n\n  todos[todoIndex] = todo;\n  return res.send({ data: todo });\n});\n\n// delete a todo\napp.delete('/todos/:todoId', (req, res) => {\n  const deletedTodo = todos.find(todo => todo.id === req.params.todoId);\n  todos = todos.filter(todo => todo.id !== req.params.todoId);\n  return res.send({ data: deletedTodo });\n});\n\n// listen on port 3000 or the PORT set as an environment variable\napp.listen(port, () => console.log(`Listening on port ${port}!`));\n```", "```\n# get the list of todos\ncurl http://localhost:3000/todos\n\n# get an individual todo\ncurl http://localhost:3000/todos/1\n\n# create a new todo\ncurl -X POST -H \"Content-Type:application/json\" /\n  http://localhost:3000/todos -d '{\"text\":\"Eat pizza\"}'\n\n# update a todo\ncurl -X PUT -H \"Content-Type:application/json\" /\n  http://localhost:3000/todos/2 -d '{\"completed\": true }\n\n# delete a todo\ncurl -X DELETE http://localhost:3000/todos/3\n```", "```\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nconst port = process.env.PORT || 3000;\nconst app = express();\n\nconst typeDefs = gql`\n type Query {\n hello: String\n }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  }\n};\nconst server = new ApolloServer({ typeDefs, resolvers });\nserver.applyMiddleware({ app, path: '/' });\napp.listen({ port }, () => console.log(`Listening on port ${port}!`));\n```", "```\n$ npm install express apollo-server-express gql\n```", "```\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nconst port = process.env.PORT || 3000;\nconst app = express();\n\n// an array of data\nlet todos = [\n  {\n    id: '1',\n    text: 'Order pizza',\n    completed: true\n  },\n  {\n    id: '2',\n    text: 'Pick up pizza',\n    completed: false\n  }\n];\n\n// GraphQL Type Definitions\nconst typeDefs = gql`\n type Query {\n todos: [Todo!]!\n todo(id: ID!): Todo!\n }\n\n type Mutation {\n newTodo(text: String!): Todo!\n updateTodo(id: ID!, text: String, completed: Boolean): Todo!\n deleteTodo(id: ID!): Todo!\n }\n\n type Todo {\n id: ID!\n text: String!\n completed: Boolean\n }\n`;\n\n// GraphQL Resolvers\nconst resolvers = {\n  Query: {\n    todos: () => todos,\n    todo: (parent, args) => {\n      return todos.find(todo => todo.id === args.id);\n    }\n  },\n  Mutation: {\n    newTodo: (parent, args) => {\n      const todo = {\n        id: String(todos.length + 1),\n        text: args.text,\n        completed: false\n      };\n\n      todos.push(todo);\n      return todo;\n    },\n\n    updateTodo: (parent, args) => {\n      const todoIndex = todos.findIndex(todo => todo.id === args.id);\n      const todo = {\n        id: args.id,\n        text: args.text || todos[todoIndex].text,\n        completed: args.completed || todos[todoIndex].completed\n      };\n\n      todos[todoIndex] = todo;\n      return todo;\n    },\n    deleteTodo: (parent, args) => {\n      const deletedTodo = todos.find(todo => todo.id === args.id);\n      todos = todos.filter(todo => todo.id !== args.id);\n      return deletedTodo;\n    }\n  }\n};\n\n// Apollo + Express server setup\nconst server = new ApolloServer({ typeDefs, resolvers });\nserver.applyMiddleware({ app, path: '/' });\napp.listen({ port }, () => console.log(`Listening on port ${port}!`));\n```"]