- en: Chapter 2\. The Type System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript’s power
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Comes from flexibility
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Be careful with that!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I talked briefly in [Chapter 1, “From JavaScript to TypeScript”](ch01.xhtml#from_javascript_to_typescript)
    about the existence of a “type checker” in TypeScript that looks at your code,
    understands how it’s meant to work, and lets you know where you might have messed
    up. But how does a type checker work, really?
  prefs: []
  type: TYPE_NORMAL
- en: What’s in a Type?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A “type” is a description of what a JavaScript value *shape* might be. By “shape”
    I mean which properties and methods exist on a value, and what the built-in `typeof`
    operator would describe it as.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when you create a variable with the initial value `"Aretha"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript can infer, or figure out, that the `singer` variable is of *type*
    string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most basic types in TypeScript correspond to the seven basic kinds of primitives
    in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '`null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`undefined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boolean` // `true` or `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string` // `""`, `"Hi!"`, `"abc123"`, …'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number` // `0`, `2.1`, `-4`, …'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bigint` // `0n`, `2n`, `-4n`, …'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symbol` // `Symbol()`, `Symbol("hi")`, …'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each of these values, TypeScript understands the type of the value to be
    one of the seven basic primitives:'
  prefs: []
  type: TYPE_NORMAL
- en: '`null; // null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`undefined; // undefined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`true; // boolean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"Louise"; // string`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1337; // number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1337n; // bigint`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Symbol("Franklin"); // symbol`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you ever forget the name of a primitive, you can type a `let` variable with
    a primitive value into the [TypeScript Playground](https://typescriptlang.org/play)
    or an IDE and hover your mouse over the variable’s name. The resultant popover
    will include the name of the primitive, such as this screenshot showing hovering
    over a string variable ([Figure 2-1](#playground_primitive_hover)).
  prefs: []
  type: TYPE_NORMAL
- en: '![TypeScript showing a string variable''s type in its hover information.](Images/lets_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. TypeScript showing a string variable’s type in its hover information
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'TypeScript is also smart enough to be able to infer the type of a variable
    whose starting value is computed. In this example, TypeScript knows that the ternary
    expression always results in a string, so the `bestSong` variable is a `string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Back in the [TypeScript Playground](https://typescriptlang.org/play) or your
    IDE, try hovering your cursor on that `bestSong` variable. You should see some
    info box or message telling you that TypeScript has inferred the `bestSong` variable
    to be type `string` ([Figure 2-2](#hovering_let_string_computed)).
  prefs: []
  type: TYPE_NORMAL
- en: '![TypeScript reporting a ''let'' variable as being its string literal type
    from its ternary expression.](Images/lets_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. TypeScript reporting a `let` variable as being its `string` literal
    type from its ternary expression
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Recall the differences between objects and primitives in JavaScript: classes
    such as `Boolean` and `Number` wrap around their primitive equivalents. TypeScript
    best practice is generally to refer to the lower-case names, such as `boolean`
    and `number`, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Type Systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *type system* is the set of rules for how a programming language understands
    what types the constructs in a program may have.
  prefs: []
  type: TYPE_NORMAL
- en: 'At its core, TypeScript’s type system works by:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading in your code and understanding all the types and values in existence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each value, seeing what type its initial declaration indicates it may contain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each value, seeing all the ways it’s used later on in code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complaining to the user if a value’s usage doesn’t match with its type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s walk through this type inference process in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following snippet, in which TypeScript is emitting a type error about
    a member property being erroneously called as a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'TypeScript came to that complaint by, in order:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading in the code and understanding there to be a variable named `firstName`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Concluding that `firstName` is of type `string` because its initial value is
    a `string`, `"Whitney"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Seeing that the code is trying to access a `.length` member of `firstName` and
    call it like a function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complaining that the `.length` member of a string is a number, not a function
    *(it can’t be called like a function)*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding TypeScript’s type system is an important skill for understanding
    TypeScript code. Code snippets in this chapter and throughout the rest of this
    book will display more and more complex types that TypeScript will be able to
    infer from code.
  prefs: []
  type: TYPE_NORMAL
- en: Kinds of Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While writing TypeScript, the two kinds of “errors” you’ll come across most
    frequently are:'
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs: []
  type: TYPE_NORMAL
- en: Blocking TypeScript from being converted to JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: Type
  prefs: []
  type: TYPE_NORMAL
- en: Something mismatched has been detected by the type checker
  prefs: []
  type: TYPE_NORMAL
- en: The differences between the two are important.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Syntax errors are when TypeScript detects incorrect syntax that it cannot understand
    as code. These block TypeScript from being able to properly generate output JavaScript
    from your file. Depending on the tooling and settings you’re using to convert
    your TypeScript code to JavaScript, you might still get some kind of JavaScript
    output (in default `tsc` settings, you will). But if you do, it likely won’t look
    like what you expect.
  prefs: []
  type: TYPE_NORMAL
- en: 'This input TypeScript has a syntax error for an unexpected `let`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Its compiled JavaScript output, depending on the TypeScript compiler version,
    may look something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Although TypeScript will do its best to output JavaScript code regardless of
    syntax errors, the output code will likely not be what you wanted. It’s best to
    fix syntax errors before attempting to run the output JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Type errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Type errors occur when your syntax is valid but the TypeScript type checker
    has detected an error with the program’s types. These do not block TypeScript
    syntax from being converted to JavaScript. They do, however, often indicate something
    will crash or behave unexpectedly if your code is allowed to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'You saw this in [Chapter 1, “From JavaScript to TypeScript”](ch01.xhtml#from_javascript_to_typescript)
    with the `console.blub` example, where the code was syntactically valid but TypeScript
    could detect it would likely crash when run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Even though TypeScript may output JavaScript code despite the presence of type
    errors, type errors are generally a sign that the output JavaScript likely won’t
    run the way you wanted. It’s best to read them and consider fixing any reported
    issues before running JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some projects are configured to block running code during development until
    all TypeScript type errors—not just syntax—are fixed. Many developers, myself
    included, generally find this to be annoying and unnecessary. Most projects have
    a way to not be blocked, such as with the *tsconfig.json* file and configuration
    options covered in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options).
  prefs: []
  type: TYPE_NORMAL
- en: Assignability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript reads variables’ initial values to determine what type those variables
    are allowed to be. If it later sees an assignment of a new value to that variable,
    it will check if that new value’s type is the same as the variable’s.
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript is fine with later assigning a different value of the same type
    to a variable. If a variable is, say, initially a `string` value, later assigning
    it another `string` would be fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If TypeScript sees an assignment of a different type, it will give us a type
    error. We couldn’t, say, initially declare a variable with a `string` value and
    then later on put in a `boolean`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'TypeScript’s checking of whether a value is allowed to be provided to a function
    call or variable is called *assignability*: whether that value is *assignable*
    to the expected type it’s passed to. This will be an important term in later chapters
    as we compare more complex objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Assignability Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Errors in the format “Type…is not assignable to type…” will be some of the most
    common types of errors you’ll see when writing TypeScript code.
  prefs: []
  type: TYPE_NORMAL
- en: The first type mentioned in that error message is the value the code is attempting
    to assign to a recipient. The second type mentioned is the recipient being assigned
    the first type. For example, when we wrote `lastName = true` in the previous snippet,
    we were trying to *assign* the value of `true`—type `boolean`—to the recipient
    variable `lastName`—type `string`.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see more and more complex assignability issues as you progress through
    this book. Remember to read them carefully to understand reported differences
    between actual and expected types. Doing so will make it much easier to work with
    TypeScript when it’s giving you grief over syntax errors.
  prefs: []
  type: TYPE_NORMAL
- en: Type Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes a variable doesn’t have an initial value for TypeScript to read.
    TypeScript won’t attempt to figure out the initial type of the variable from later
    uses. It’ll consider the variable by default to be implicitly the `any` type:
    indicating that it could be anything in the world.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables that can’t have their initial type inferred go through what’s called
    an *evolving any*: rather than enforce any particular type, TypeScript will evolve
    its understanding of the variable’s type each time a new value is assigned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, assigning the evolving `any` variable `rocker` is first assigned a string,
    which means it has string methods such as `toUpperCase`, but then is evolved into
    a `number`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript was able to catch that we were calling the `toUpperCase()` method
    on a variable evolved to type `number`. However, it wasn’t able to tell us earlier
    whether it was intentional that we were evolving the variable from `string` to
    `number` in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing variables to be evolving `any` typed—and using the `any` type in general—partially
    defeats the purpose of TypeScript’s type checking! TypeScript works best when
    it knows what types your values are meant to be. Much of TypeScript’s type checking
    can’t be applied to `any` typed values because they don’t have known types to
    be checked. [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)
    will cover how to configure TypeScript’s implicit `any` complaints.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript provides a syntax for declaring the type of a variable without having
    to assign it an initial value, called a *type annotation*. A type annotation is
    placed after the name of a variable and includes a colon followed by the name
    of a type.
  prefs: []
  type: TYPE_NORMAL
- en: 'This type annotation indicates the `rocker` variable is meant to be type `string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'These type annotations exist only for TypeScript—they don’t affect the runtime
    code and are not valid JavaScript syntax. If you run `tsc` to compile TypeScript
    source code to JavaScript, they’ll be erased. For example, the previous example
    would be compiled to roughly the following JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Assigning a value whose type is not assignable to the variable’s annotated type
    will cause a type error.
  prefs: []
  type: TYPE_NORMAL
- en: 'This snippet assigns a number to a `rocker` variable previously declared as
    type `string`, causing a type error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You’ll see through the next few chapters how type annotations allow you to augment
    TypeScript’s insights into your code, allowing it to give you better features
    during development. TypeScript contains an assortment of new pieces of syntax,
    such as these type annotations that exist only in the type system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Nothing that exists only in the type system gets copied over into emitted JavaScript.
    TypeScript types don’t affect emitted JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Unnecessary Type Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Type annotations allow us to provide information to TypeScript that it wouldn’t
    have been able to glean on its own. You could also use them on variables that
    have immediately inferable types, but you wouldn’t be telling TypeScript anything
    it doesn’t already know.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `: string` type annotation is redundant because TypeScript could
    already infer that `firstName` be of type `string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you do add a type annotation to a variable with an initial value, TypeScript
    will check that it matches the type of the variable’s value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `firstName` is declared to be of type `string`, but its initializer
    is the `number` `42`, which TypeScript sees as an incompatibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Many developers—myself included—generally prefer not to add type annotations
    on variables where the type annotations wouldn’t change anything. Having to manually
    write out type annotations can be cumbersome—especially when they change, and
    for the complex types I’ll show you later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: It can sometimes be useful to include explicit type annotations on variables
    to clearly document the code and/or to make TypeScript protected against accidental
    changes to the variable’s type. We’ll see in later chapters how explicit type
    annotations can sometimes explicitly tell TypeScript information it wouldn’t have
    inferred normally.
  prefs: []
  type: TYPE_NORMAL
- en: Type Shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript does more than check that the values assigned to variables match
    their original types. TypeScript also knows what member properties should exist
    on objects. If you attempt to access a property of a variable, TypeScript will
    make sure that property is known to exist on that variable’s type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we declare a `rapper` variable of type `string`. Later on, when we
    use that `rapper` variable, operations that TypeScript knows work on strings are
    allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Operations that TypeScript doesn’t know to work on strings will not be allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Types can also be more complex shapes, most notably objects. In the following
    snippet, TypeScript knows the `birthNames` object doesn’t have a `middleName`
    key and complains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript’s understanding of object shapes allows it to report issues with
    the usage of objects, not just assignability. [Chapter 4, “Objects”](ch04.xhtml#objects)
    will describe more of TypeScript’s powerful features around objects and object
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript programming language did not include a specification for how
    files can share code between each other until relatively recently in its history.
    ECMAScript 2015 added “ECMAScript modules,” or ESM, to standardize `import` and
    `export` syntax between files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, this module file imports a `value` from a sibling `./values`
    file and exports a `doubled` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To match with the ECMAScript specification, in this book I’ll use the following
    nomenclature:'
  prefs: []
  type: TYPE_NORMAL
- en: Module
  prefs: []
  type: TYPE_NORMAL
- en: A file with a top-level `export` or `import`
  prefs: []
  type: TYPE_NORMAL
- en: Script
  prefs: []
  type: TYPE_NORMAL
- en: Any file that is not a module
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is able to work with those modern module files as well as older files.
    Anything declared in a module file will be available only in that file unless
    an explicit `export` statement in that file exports it. A variable declared in
    one module with the same name as a variable declared in another file won’t be
    considered a naming conflict (unless one file imports the other file’s variable).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `a.ts` and `b.ts` files are both modules that export a similarly
    named `shared` variable without issue. `c.ts` causes a type error because it has
    a naming conflict between an imported `shared` and its own value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If a file is a script, though, TypeScript will consider it to be globally scoped,
    meaning all scripts have access to its contents. That means variables declared
    in a script file cannot have the same name as variables declared in other script
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `a.ts` and `b.ts` files are considered scripts because they do
    not have module-style `export` or `import` statements. That means their variables
    of the same name conflict with each other as if they were declared in the same
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see these “Cannot redeclare…” errors in a TypeScript file, it may be
    because you have yet to add an `export` or `import` statement to the file. Per
    the ECMAScript specification, if you need a file to be a module without an `export`
    or `import` statement, you can add an `export {};` somewhere in the file to force
    it to be a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: TypeScript will not recognize the types of imports and exports in TypeScript
    files written using older module systems such as CommonJS. TypeScript will generally
    see values returned from CommonJS-style `require` functions to be typed as `any`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you saw how TypeScript’s type system works at its core:'
  prefs: []
  type: TYPE_NORMAL
- en: What a “type” is and the primitive types recognized by TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a “type system” is and how TypeScript’s type system understands code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How type errors compare to syntax errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inferred variable types and variable assignability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type annotations to explicitly declare variable types and avoid evolving `any`
    types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object member checking on type shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECMAScript module files’ declaration scoping compared to script files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/the-type-system*](https://learningtypescript.com/the-type-system).
  prefs: []
  type: TYPE_NORMAL
- en: Why did the number and string break up?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: They weren’t each other’s types.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
