- en: Chapter 3\. Creating Your First App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章\. 创建您的第一个应用程序
- en: In [Chapter 2](ch02.xhtml#ch2), you created a basic API layer using a combination
    of API Gateway and serverless functions. This combination is very powerful, but
    you have not yet interacted with a real database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.xhtml#ch2) 中，您使用 API Gateway 和无服务器函数创建了一个基本的 API 层。这种组合非常强大，但您尚未与真实数据库进行交互。
- en: In this chapter, you will be creating a GraphQL API that interacts with a DynamoDB
    NoSQL database to perform CRUD+L (create, read, update, delete, and list) operations.
    You’ll learn what GraphQL is, why developers are adopting it, and how it works.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建一个与 DynamoDB NoSQL 数据库交互以执行 CRUD+L（创建、读取、更新、删除和列表）操作的 GraphQL API。您将了解
    GraphQL 的定义、开发者为何采用它以及其工作原理。
- en: We will be building a notes app that will allow users to create, update, and
    delete notes. It will also have GraphQL subscriptions enabled in order to see
    updates in real time. If another user is interacting with the app and they create
    a new note, our app will update with the new values in real time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个笔记应用程序，允许用户创建、更新和删除笔记。它还将启用 GraphQL 订阅功能，以便实时查看更新。如果另一个用户正在与应用程序交互并创建新的笔记，我们的应用程序将实时更新新值。
- en: Introduction to GraphQL
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphQL 简介
- en: GraphQL is an API implementation that is an alternative to REST. Let’s have
    a look at what GraphQL is, what a GraphQL API consists of, and how GraphQL works.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是 REST 的一种替代实现。让我们看看 GraphQL 是什么，GraphQL API 由什么组成，以及 GraphQL 的工作原理。
- en: What Is GraphQL?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL 是什么？
- en: GraphQL is an API specification. It is a query language for APIs and a runtime
    for fulfilling those queries with your data. It is, and can be used as, a replacement
    for REST and has some similarities to REST.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是一个 API 规范。它是一个用于 API 的查询语言，以及用于用您的数据来实现这些查询的运行时。它可以用作 REST 的替代方案，并与
    REST 有一些相似之处。
- en: GraphQL was introduced by Facebook in 2015, [though it had been used internally
    since 2012](https://oreil.ly/KtnOq). GraphQL allows clients to define the structure
    of the data that is required from an API call so that they can know exactly what
    data structure is going to be returned from the server. Requesting data in this
    way enables a much more efficient way for client-side applications to interact
    with backend APIs and services, reducing the amount of under-fetching of data,
    preventing the over-fetching of data, and preventing type errors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是 Facebook 在 2015 年引入的，[尽管在 2012 年就在内部使用](https://oreil.ly/KtnOq)。GraphQL
    允许客户端定义 API 调用所需的数据结构，以便他们可以准确地知道服务器将返回的数据结构。以这种方式请求数据使得客户端应用程序与后端 API 和服务的交互方式更加高效，减少了数据的不足提取、防止数据的过度提取和类型错误。
- en: What Makes Up a GraphQL API?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL API 的组成部分是什么？
- en: 'A GraphQL API consists of three main parts: schema, resolvers, and data sources,
    as illustrated in [Figure 3-1](#fig3a).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 GraphQL API 主要由三个部分组成：模式、解析器和数据源，如 [图 3-1](#fig3a) 所示。
- en: '![GraphQL API Design](Images/fssl_0301.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![GraphQL API 设计](Images/fssl_0301.png)'
- en: Figure 3-1\. GraphQL API Design
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. GraphQL API 设计
- en: The schema, written in GraphQL Schema Definition Language (SDL), defines the
    data model (types) and operations that can be executed against the API. The schema
    consists of base types (data models) and GraphQL operations like queries for fetching
    data; mutations for creating, updating, and deleting data; and subscriptions for
    subscribing to changes in data in real time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用 GraphQL 模式定义语言（SDL）编写的模式定义了可以针对 API 执行的数据模型（类型）和操作。模式由基本类型（数据模型）和像查询（用于获取数据）、突变（用于创建、更新和删除数据）以及订阅（用于订阅实时数据更改）这样的
    GraphQL 操作组成。
- en: 'Here is an example of a GraphQL schema:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 GraphQL 模式的示例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the schema has been created, you can begin writing resolvers for the GraphQL
    operations defined in the schema (query, mutation, subscription). GraphQL resolvers
    tell the GraphQL operations what to do when being executed and will typically
    interact with some data source or another API, as shown in [Figure 3-2](#fig3b).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模式被创建，您可以开始为在模式中定义的 GraphQL 操作编写解析器（查询、突变、订阅）。GraphQL 解析器告诉 GraphQL 操作在执行时该做什么，并通常会与某些数据源或另一个
    API 进行交互，如 [图 3-2](#fig3b) 所示。
- en: '![How GraphQL Works](Images/fssl_0302.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![GraphQL 工作原理](Images/fssl_0302.png)'
- en: Figure 3-2\. How GraphQL works
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2\. GraphQL 工作原理
- en: GraphQL Operations
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL 操作
- en: 'GraphQL operations are how you interact with the API data sources. GraphQL
    operations can be similarly mapped to HTTP methods for RESTful APIs:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 操作是您与 API 数据源进行交互的方式。GraphQL 操作可以类似地映射到 RESTful API 的 HTTP 方法：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A GraphQL request operation looks similar to a JavaScript object with only
    the keys and no values. The keys and values are returned in the GraphQL operation
    response. Here’s an example of a typical GraphQL query fetching an array of items:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 请求操作看起来类似于一个 JavaScript 对象，只有键没有值。键和值在 GraphQL 操作响应中返回。以下是典型的 GraphQL
    查询示例，获取一个项目数组：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This request would return the following response:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此请求将返回以下响应：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also pass arguments into a GraphQL operation. The following operation
    is a query for a `Todo`, passing in the ID of the `Todo` we’d like to fetch:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将参数传递给 GraphQL 操作。以下操作是一个查询 `Todo` 的示例，传入我们想要获取的 `Todo` 的 ID：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This request would return the following response:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此请求将返回以下响应：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Though there are many ways to implement a GraphQL server, in this book we will
    be using AWS AppSync. AppSync is a managed service that allows us to deploy a
    GraphQL API, resolvers, and data sources quickly and easily using the Amplify
    CLI.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多实现 GraphQL 服务器的方法，但在本书中我们将使用 AWS AppSync。AppSync 是一种托管服务，允许我们使用 Amplify
    CLI 快速轻松地部署 GraphQL API、解析器和数据源。
- en: Creating the GraphQL API
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 GraphQL API
- en: Now that you have a basic understanding of what GraphQL is, let’s go ahead and
    start using it to build the Notes app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经基本了解了 GraphQL 是什么，让我们继续使用它来构建 Notes 应用程序。
- en: 'The first thing you need to do is create a new React application and install
    the necessary dependencies. This app will be using the AWS Amplify library to
    interact with the API, `uuid` for creating unique `id`s, and the Ant Design library
    for styling:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是创建一个新的 React 应用程序并安装必要的依赖项。该应用程序将使用 AWS Amplify 库与 API 交互，`uuid` 用于创建唯一的
    `id`，Ant Design 库用于样式：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, within the root of the new app, you can create the Amplify project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在新应用的根目录中，您可以创建 Amplify 项目：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the Amplify project initialized, we can then add the GraphQL API:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化 Amplify 项目后，我们可以添加 GraphQL API：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, open the base GraphQL schema (generated by the CLI), located at *notesapp/amplify/backend/api/notesapi/schema.graphql*,
    in your text editor. Update the schema to the following, and save it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您的文本编辑器中打开基础 GraphQL 模式（由 CLI 生成），位于 *notesapp/amplify/backend/api/notesapi/schema.graphql*，更新模式如下，并保存：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This schema has a main `Note` type containing five fields. A field can be either
    nullable (not required) or non-nullable (required). A non-nullable field is specified
    with a `!` character.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式包含一个主要的 `Note` 类型，包含五个字段。字段可以是可空的（非必需的）或非可空的（必需的）。非可空字段用 `!` 字符指定。
- en: The `Note` type in this schema is annotated with an `@model` directive. This
    directive is not part of the GraphQL SDL; instead, it is part of the AWS Amplify
    GraphQL Transform library.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式中的 `Note` 类型带有 `@model` 指令。该指令不是 GraphQL SDL 的一部分，而是 AWS Amplify GraphQL
    Transform 库的一部分。
- en: The GraphQL Transform library allows you to annotate a GraphQL schema with different
    directives like `@model`, `@connection`, `@auth`, and others.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL Transform 库允许您使用不同的指令（如 `@model`、`@connection`、`@auth` 等）对 GraphQL 模式进行注释。
- en: 'The `@model` directive we used in this schema will transform the base `Note`
    type into an expanded AWS AppSync GraphQL API complete with:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式中使用的 `@model` 指令将基础的 `Note` 类型转换为一个完整的 AWS AppSync GraphQL API，包括：
- en: Additional schema definitions for queries and mutations (`Create`, `Read`, `Update`,
    `Delete`, and `List` operations)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 针对查询和变异的额外模式定义（`Create`、`Read`、`Update`、`Delete` 和 `List` 操作）
- en: Additional schema definitions for GraphQL subscriptions
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 GraphQL 订阅添加额外的模式定义
- en: DynamoDB database
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DynamoDB 数据库
- en: Resolver code for all GraphQL operations mapped to DynamoDB database
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 GraphQL 操作的解析器代码映射到 DynamoDB 数据库
- en: 'To deploy the API, you can run the `push` command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署 API，可以运行 `push` 命令：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once the deployment has completed, the API and database have successfully been
    created in your account. Next, let’s open the newly created AppSync API in the
    AWS Console and test out a few GraphQL operations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署完成，API 和数据库已成功创建在您的账户中。接下来，让我们在 AWS 控制台中打开新创建的 AppSync API，并测试几个 GraphQL
    操作。
- en: Viewing and Interacting with the GraphQL API
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看和与 GraphQL API 交互
- en: 'To open the API in the AWS Console at any time, you can use the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要随时在 AWS 控制台中打开 API，您可以使用以下命令：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once you’ve opened the AppSync console, click Queries in the lefthand menu to
    open the query editor. Here, you can test out GraphQL queries, mutations, and
    subscriptions using your API.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开了 AppSync 控制台，点击左侧菜单中的 Queries 打开查询编辑器。在这里，您可以使用您的 API 测试 GraphQL 查询、变异和订阅。
- en: 'The first operation we’ll try out is a mutation to create a new note. In the
    query editor, execute the following mutation (see [Figure 3-3](#fig3c)):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先尝试的操作是执行变更以创建新的笔记。在查询编辑器中，执行以下变更（参见 [图 3-3](#fig3c)）：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![GraphQL mutation](Images/fssl_0303.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![GraphQL 变更](Images/fssl_0303.png)'
- en: Figure 3-3\. GraphQL mutation
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. GraphQL 变更
- en: 'Now that you’ve created an item, you can try querying for it. Let’s try to
    query for all of the notes in the app:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了一个项目，可以尝试查询它。让我们尝试查询应用程序中的所有笔记：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also try querying for a single note using the ID of one of the notes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试使用其中一个笔记的 ID 查询单个笔记：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now that we know the GraphQL API is deployed and functioning properly, let’s
    start writing some frontend code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道 GraphQL API 已部署并正常运行，让我们开始编写一些前端代码。
- en: Building the React Application
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 React 应用程序
- en: 'The first thing you will need to do is configure the React application to recognize
    the Amplify resources located at *src/aws-exports.js*. To do so, open *src/index.js*
    and add the following below the last import:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是配置 React 应用程序以识别位于 *src/aws-exports.js* 的 Amplify 资源。为此，请打开 *src/index.js*
    并在最后一个导入后添加以下内容：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Listing Notes (GraphQL Query)
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出笔记（GraphQL 查询）
- en: Now that the application has been configured, you can begin making calls against
    the GraphQL API. The first operation we will be implementing will be a query to
    list all of the notes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已配置完成，您可以开始对 GraphQL API 进行调用。我们将要实现的第一个操作是查询以列出所有笔记。
- en: The query will return an array and we will map over all of the items in the
    array, showing the note name, description, and whether or not it is completed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查询将返回一个数组，我们将对数组中的所有项进行映射，显示笔记名称、描述以及是否已完成。
- en: 'In *src/App.js*, first import the following at the top of the file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/App.js* 文件中，首先在文件顶部导入以下内容：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s take a look at some of the terms used in the preceding:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下上述内容中使用的一些术语：
- en: '`useEffect` and `useReducer`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`useEffect` 和 `useReducer`'
- en: React hooks
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: React hooks
- en: '`API`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`API`'
- en: This is the GraphQL client that we will be using to interact with the AppSync
    endpoint (similar to `fetch` or `axios`)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将用来与 AppSync 端点交互的 GraphQL 客户端（类似于 `fetch` 或 `axios`）
- en: '`List`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`列表`'
- en: UI component from the Ant Design library to render a list
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ant Design 库的 UI 组件来渲染列表
- en: '`listNotes`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`listNotes`'
- en: The GraphQL query operation for fetching an array of notes
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用于获取笔记数组的 GraphQL 查询操作
- en: Next, we will need to create a variable to hold our initial application state.
    Because our application will be holding and working with multiple state variables,
    we will use the `useReducer` hook from React to manage state.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个变量来保存我们的初始应用程序状态。因为我们的应用程序将持有并处理多个状态变量，我们将使用 React 中的 `useReducer`
    钩子来管理状态。
- en: '`useReducer` has the following API:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`useReducer` 的 API 如下：'
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`useReducer` accepts a reducer function of type `(state, action) => newState`
    and `initialState` as arguments:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`useReducer` 接受一个形如 `(state, action) => newState` 的 reducer 函数和一个 initialState
    作为参数：'
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When invoked, the `useReducer` hook returns an array containing two items:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `useReducer` 钩子时，将返回一个包含两个项目的数组：
- en: The application state
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序状态
- en: A `dispatch` function (this function allows you to update the application state)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dispatch` 函数（此函数允许您更新应用程序状态）'
- en: The initial state of our Notes application will hold an array for the notes,
    form values, error, and loading state.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Notes 应用程序的初始状态将包含笔记、表单值、错误和加载状态的数组。
- en: 'In *src/App.js*, add the following `initialState` object after the last import:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/App.js* 文件中，在最后一个导入后添加以下 `initialState` 对象：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then create the reducer. For now, the reducer will only have cases to either
    set the notes array or set an error state:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建 reducer。目前，reducer 只有用于设置笔记数组或设置错误状态的 case：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, update the main `App` function to create the state and dispatch variables
    by calling `useReducer` and passing in the `reducer` and `initialState`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新主 `App` 函数以通过调用 `useReducer` 并传入 `reducer` 和 `initialState` 来创建状态和 dispatch
    变量：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To fetch the notes, create a `fetchNotes` function (in the main `App` function)
    that will call the AppSync API and set the notes array once the API call is successful:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取笔记，请在主 `App` 函数中创建一个 `fetchNotes` 函数，该函数将调用 AppSync API，并在 API 调用成功后设置笔记数组：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, invoke the `fetchNotes` function by implementing the `useEffect` hook
    (in the main `App` function):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在主 `App` 函数中通过调用 `useEffect` 钩子来调用 `fetchNotes` 函数：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`useEffect` is similar to `componentDidMount`. `useEffect` will run after the
    initial render of the component is committed to the screen. The second argument
    to `useEffect` is an array of values, the effect of which depends on whether it
    is called again during a re-render. If the array is empty, it will not be called
    on additional renders. If the array contains values and those values change, the
    component will re-render.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`useEffect` 类似于 `componentDidMount`。`useEffect` 将在组件的初始渲染提交到屏幕后运行。`useEffect`
    的第二个参数是一个值数组，其效果取决于是否在重新渲染期间再次调用它。如果数组为空，则不会在额外的渲染中调用它。如果数组包含值并且这些值发生变化，则组件将重新渲染。'
- en: 'The next thing you need to do is return the main UI for the component. In the
    main `App` function, add the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的下一件事是在组件的主 UI 中返回主 UI。在主 `App` 函数中，添加以下内容：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here we are using the `List` component from Ant Design. This component will
    map over an array (`dataSource`) and return an item for each item in the array
    by calling the `renderItem` function. Next, define `renderItem` (in the main `App`
    function):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用 Ant Design 中的 `List` 组件。该组件将遍历一个数组（`dataSource`），并通过调用 `renderItem` 函数为数组中的每个项目返回一个项目。接下来，在主
    `App` 函数中定义 `renderItem`：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, create the styles for the components we will be using for this app:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建应用程序将要使用的组件的样式：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we are ready to run the app! In the terminal, run the `start` command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行应用程序！在终端中运行 `start` 命令：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When the app loads, you should see the current list of notes rendered to your
    screen, as illustrated in [Figure 3-4](#fig3d).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序加载时，您应该看到当前笔记列表呈现在屏幕上，如[图 3-4](#fig3d)所示。
- en: '![Notes List](Images/fssl_0304.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![笔记列表](Images/fssl_0304.png)'
- en: Figure 3-4\. Notes list
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-4\. 笔记列表
- en: Creating Notes (GraphQL Mutation)
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建笔记（GraphQL 变更）
- en: 'Now that you know how to query for a list of notes, let’s take a look at how
    to *create* a new note. To do so, you’ll need the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何查询笔记列表了，接下来让我们看看如何*创建*一个新的笔记。为此，您需要以下内容：
- en: A form to create a new note
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新笔记的表单
- en: A function to update the state as the user types into the form
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个函数，当用户在表单中输入时更新状态
- en: A function to add the new note to the UI and send an API call to create a new
    note
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个函数，将新笔记添加到 UI 并发送 API 调用以创建新笔记
- en: 'First, import the UUID library so you can create a unique identifier for the
    client. We do this now so that later on when we implement subscriptions we can
    identify the client that created the note. We will also import the `Input` and
    `Button` components from Ant Design:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入 UUID 库，以便为客户端创建唯一标识符。我们现在这样做是为了在以后实现订阅时能够识别创建笔记的客户端。我们还将从 Ant Design 导入
    `Input` 和 `Button` 组件：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, you will need to import the `createNote` mutation definition:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要导入 `createNote` 变更定义：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, create a new `CLIENT_ID` variable below the last import:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在最后一个导入下面创建一个新的 `CLIENT_ID` 变量：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Update the switch statement in the reducer to add three new cases. We will
    need a new case for the following three actions:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 reducer 中的 switch 语句以添加三个新情况。我们将需要新情况来处理以下三个操作：
- en: Adding a new note to the local state
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新笔记添加到本地状态
- en: Resetting the form state to clear out the form
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重置表单状态以清除表单内容
- en: Updating the form state when the user types
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户输入时更新表单状态
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, create the `createNote` function in the main `App` function:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在主 `App` 函数中创建 `createNote` 函数：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this function, we are updating the local state before the API call is successful.
    This is known as an *optimistic response*. It is done because we want the UI to
    be fast and to update as soon as the user adds a new note. If the API call fails,
    you can then implement some functionality in the `catch` block to notify the user
    of the error if you would like.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中，在 API 调用成功之前更新本地状态。这称为*乐观响应*。这样做是因为我们希望 UI 反应迅速，并在用户添加新笔记后立即更新。如果 API
    调用失败，您可以在 `catch` 块中实现一些功能来通知用户错误。
- en: 'Now, create an `onChange` handler in the main `App` function to update the
    form state when the user interacts with an input:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在主 `App` 函数中创建一个 `onChange` 处理程序，以在用户与输入交互时更新表单状态：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, we will update the UI to add the form components. Before the `List`
    component, add the following two inputs and button:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将更新 UI 添加表单组件。在 `List` 组件之前，添加以下两个输入和一个按钮：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, we should be able to create new notes using the form, as shown in [Figure 3-5](#fig3e).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够使用表单创建新的笔记，如[图 3-5](#fig3e)所示。
- en: '![Creating a note](Images/fssl_0305.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![创建笔记](Images/fssl_0305.png)'
- en: Figure 3-5\. Creating a note
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-5\. 创建笔记
- en: Deleting Notes (GraphQL Mutation)
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除笔记（GraphQL Mutation）
- en: 'Next, let’s take a look at how to *delete* a note. To do so, we’ll need the
    following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何*删除*笔记。要做到这一点，我们将需要以下内容：
- en: A `deleteNote` function to delete the note both from the UI and from the GraphQL
    API
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 `deleteNote` 函数，从 UI 和 GraphQL API 中删除笔记
- en: A button in each note to invoke the `deleteNote` function
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个笔记中的一个按钮来调用 `deleteNote` 函数
- en: 'First, import the `deleteNote` mutation:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入 `deleteNote` mutation：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, create a `deleteNote` function in the main `App` function:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，在主 `App` 函数中创建一个 `deleteNote` 函数：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In this function, we are finding the index of the note and creating a new notes
    array without the deleted note. We then dispatch the `SET_NOTES` action passing
    in the new notes array to update the local state and show an optimistic response.
    Next, we call the GraphQL API to delete the note in the AppSync API.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们正在查找笔记的索引，并创建一个新的不包含已删除笔记的笔记数组。然后，我们分发 `SET_NOTES` 动作，传入新的笔记数组来更新本地状态并显示一个乐观的响应。接下来，我们调用
    GraphQL API 来删除 AppSync API 中的笔记。
- en: 'Now, update the `List.Item` component in the `renderItem` function to add a
    delete button to the `actions` prop that will call the `deleteNote` function,
    passing in the item:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `renderItem` 函数中更新 `List.Item` 组件，以添加一个删除按钮到 `actions` 属性，该按钮将调用 `deleteNote`
    函数，传入该项：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, we should be able to delete notes (see [Figure 3-6](#fig3f)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够删除笔记（见 [图 3-6](#fig3f)）。
- en: '![Deleting a note](Images/fssl_0306.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![删除笔记](Images/fssl_0306.png)'
- en: Figure 3-6\. Deleting a note
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-6\. 删除笔记
- en: Updating Notes (GraphQL Mutation)
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新笔记（GraphQL Mutation）
- en: 'The next piece of functionality we want to add is the ability to *update* a
    note to be completed. To do so, you’ll need the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来想要添加的下一个功能是能够*更新*笔记为已完成。要做到这一点，您将需要以下内容：
- en: An `updateNote` function to update the note in the UI and in the GraphQL API
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 `updateNote` 函数，在 UI 和 GraphQL API 中更新笔记
- en: A button in each note to invoke the `updateNote` function
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个笔记中的一个按钮来调用 `updateNote` 函数
- en: 'First, import the `updateNote` mutation:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入 `updateNote` mutation：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, create an `updateNote` function in the main `App` function:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在主 `App` 函数中创建一个 `updateNote` 函数：
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In this function, we are first finding the index of the selected note, then
    creating a copy of the notes array. We then update the completed value of the
    selected note to be the opposite of what it currently is. We then update the notes
    array with the new version of the note, set the notes array in the local state,
    and call the GraphQL API, passing in the note that needs to be updated in the
    API.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们首先找到所选笔记的索引，然后创建一个笔记数组的副本。然后，我们将所选笔记的完成值更新为当前值的相反值。然后，我们用新版本的笔记更新笔记数组，设置本地状态中的笔记数组，并调用
    GraphQL API，传入需要在 API 中更新的笔记。
- en: 'Finally, update the `List.Item` component to add an update button that will
    call the `updateNote` function, passing in the item. This component will render
    either `completed` or `mark complete` depending on the value of the `completed`
    Boolean of the item (based on whether `completed` is true or false):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新 `List.Item` 组件以添加一个更新按钮，调用 `updateNote` 函数，传入该项。该组件将根据项的 `completed` 布尔值（根据
    `completed` 是 true 还是 false）渲染为 `completed` 或 `mark complete`：
- en: '[PRE40]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, we should be able to update notes to be either *completed* or *not completed*
    (see [Figure 3-7](#fig3g)).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够更新笔记为*已完成*或*未完成*（见 [图 3-7](#fig3g)）。
- en: '![Updating a note](Images/fssl_0307.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![更新笔记](Images/fssl_0307.png)'
- en: Figure 3-7\. Updating a note
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-7\. 更新笔记
- en: Real-Time Data (GraphQL Subscriptions)
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时数据（GraphQL 订阅）
- en: The last piece of functionality we will implement is the ability to *subscribe
    to updates in real time*. The update that we’d like to subscribe to is when a
    new note has been added. When this happens, the functionality we’d like to implement
    is to have our application receive that new note, update the notes array with
    the new note, and render the updated notes array to our screen.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要实现的最后一个功能是能够*实时订阅更新*。我们希望订阅的更新是当新的笔记被添加时。当这种情况发生时，我们希望实现的功能是让我们的应用接收到新的笔记，用新的笔记更新笔记数组，并将更新后的笔记数组渲染到我们的屏幕上。
- en: To do this, you will be implementing a GraphQL subscription. With GraphQL subscriptions,
    you can subscribe to different events. These events are usually some type of mutation
    (on create, on update, on delete). When one of these events happens, the data
    from the event gets sent to the client that initialized the subscription. It is
    then up to you to handle the data that comes in on the client.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您将实现一个 GraphQL 订阅。使用 GraphQL 订阅，您可以订阅不同的事件。这些事件通常是某种类型的变更操作（创建、更新、删除）。当其中一个事件发生时，事件数据将发送到初始化订阅的客户端。然后您需要处理客户端收到的数据。
- en: To make this work, you’ll only need to initialize the subscription in the `useEffect`
    hook and dispatch the `ADD_NOTE` type along with the note data when a subscription
    is fired.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要使其工作，您只需要在`useEffect`钩子中初始化订阅，并在订阅触发时与笔记数据一起调度`ADD_NOTE`类型。
- en: 'First, import the `onCreateNote` subscription:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入`onCreateNote`订阅：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, update the `useEffect` hook with the following code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下代码更新`useEffect`钩子：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In this subscription, we are subscribing to the `onCreateNote` event. When a
    new note is created, this event gets triggered and the `next` function is invoked,
    passing in the `note` data as the parameter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个订阅中，我们订阅了`onCreateNote`事件。当创建新的笔记时，此事件将被触发，并调用`next`函数，将`note`数据作为参数传入。
- en: We take the note data and check to see if our client is the application that
    created the note. If our client created the note, we return without going any
    further. If we are not the client that created the note, we dispatch the `ADD_NOTE`
    action, passing in the note data from the subscription.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取笔记数据，并检查我们的客户端是否是创建笔记的应用程序。如果我们的客户端创建了笔记，则直接返回而不进行进一步操作。如果我们不是创建笔记的客户端，则会分发`ADD_NOTE`动作，并传入订阅中的笔记数据。
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations, you’ve deployed your first serverless GraphQL application!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺你，你已经部署了你的第一个无服务器 GraphQL 应用程序！
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章节需要记住的几个要点：
- en: The `useEffect` hook is similar to `componentDidMount` from the React lifecycle
    methods in that it runs after the component first renders.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useEffect`钩子类似于 React 生命周期方法中的`componentDidMount`，在组件首次渲染后运行。'
- en: The `useReducer` hook allows you to manage application state and is preferable
    to `useState` when having more complex application logic.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useReducer`钩子允许您管理应用程序状态，并且在具有更复杂应用逻辑时优于`useState`。'
- en: GraphQL *queries* are used for fetching data in a GraphQL API.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL *查询* 用于在 GraphQL API 中获取数据。
- en: GraphQL *mutations* are used for creating, updating, or deleting data in a GraphQL
    API.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL *变更* 用于在 GraphQL API 中创建、更新或删除数据。
- en: You can subscribe to API real-time events in a GraphQL API by using GraphQL
    *subscriptions*.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过使用 GraphQL *订阅* 在 GraphQL API 中订阅 API 实时事件。
