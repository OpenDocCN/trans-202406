- en: Chapter 23\. Process Containment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter describes techniques that help apply the principle of least privilege
    to constrain a process to the minimum privileges it needs to run. The *Process
    Containment* pattern helps make applications more secure by limiting the attack
    surface and creating a line of defense. It also prevents any rogue process from
    running out of its designated boundary.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the primary attack vectors for Kubernetes workloads is through the application
    code. Many techniques can help improve code security. For example, static code
    analysis tools can check the source code for security flaws. Dynamic scanning
    tools can simulate malicious attackers with the goal of breaking into the system
    through well-known service attacks such as SQL injection (SQLi), cross-site request
    forgery (CSRF), and cross-site scripting (XSS). Then there are tools for regularly
    scanning the application’s dependencies for security vulnerabilities. As part
    of the image build process, the containers are scanned for known vulnerabilities.
    This is usually done by checking the base image and all its packages against a
    database that tracks vulnerable packages. These are only a few of the steps involved
    in creating secure applications and protecting against malicious actors, compromised
    users, unsafe container images, or dependencies with vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of how many checks are in place, new code and new dependencies can
    introduce new vulnerabilities, and there is no way to guarantee the complete absence
    of risks. Without runtime process-level security controls in place, a malicious
    actor can breach the application code and attempt to take control of the host
    or the entire Kubernetes cluster. The mechanisms we will explore in this chapter
    demonstrate how to limit a container only to the permissions it needs to run and
    apply the least-privilege principle. This way, Kubernetes configurations act as
    another line of defense, containing any rogue process and preventing it from running
    outside its designated boundary.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, a container runtime such as Docker assigns the default runtime permissions
    a container will have. When the container is managed by Kubernetes, the security
    configurations that will be applied to a container are controlled by Kubernetes
    and exposed to the user through the security context configurations of the Pod
    and the container specs. The Pod-level configurations apply to the Pod’s volumes
    and all containers in the Pod, whereas container-level configurations apply to
    a single container. When the same configurations are set at both Pod and container
    levels, the values in the container spec take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer creating cloud native applications, you typically should not
    need to deal with many fine-grained security configurations but instead have them
    validated and enforced as global policy. Fine-grained tuning is usually required
    when creating specialized infrastructure containers such as build systems and
    other plugins that need broader access to the underlying nodes. Therefore, we
    will review only the common security configurations that would be useful for running
    typical cloud native applications on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Running Containers with a Non-Root User
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Container images have a user, and can optionally have a group, to run the container
    process. These users and groups are used to control access to files, directories,
    and volume mounts. With some other containers, no user is created and the container
    image runs as root by default. In others, a user is created in the container image,
    but it is not set as the default user to run. These situations can be rectified
    by overriding the user at runtime using `securityContext`, as shown in [Example 23-1](#process-containment-user-permissions).
  prefs: []
  type: TYPE_NORMAL
- en: Example 23-1\. Setting a user and group for the containers of a Pod
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_process_containment_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates the UID to run the container process.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_process_containment_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the GID to run the container process.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration forces any container in the Pod to run with user ID 1000 and
    group ID 2000\. This is useful when you want to swap the user that is specified
    in the container image. But there is also a danger in setting these values and
    making runtime decisions about which user to run the image. Often the user is
    set in conjunction with the directory structure containing files that have the
    same ownership IDs specified in the container image. To avoid having runtime failures
    due to lack of permissions, you should check the container image file and run
    the container with the user ID and group ID defined. This is one way to prevent
    a container from running as root, and matching it to the expected user in the
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of specifying a user ID to ensure that a container is not running as
    root, a less intrusive way is to set the `.spec.securityContext.runAsNonRoot`
    flag to `true`. When set, the Kubelet will validate at runtime and prevent any
    container from starting with a root user—that is, a user with UID 0\. This latter
    mechanism doesn’t change the user, but only ensures that a container is running
    as a non-root user. If you need to run as root to access files or volumes in the
    container, you can limit the exposure to root by running an init container that
    can run as root for a short time, and you can change the file access modes, before
    applications containers start up as non-root.
  prefs: []
  type: TYPE_NORMAL
- en: A container may not run as root, but it is possible to obtain root-like capabilities
    through privilege escalation. This is most similar to using the `sudo` command
    on Linux and executing commands with the root privileges. The way to prevent this
    in containers is by setting `.spec.containers[].securityContext.allowPrivilege​Es⁠calation`
    to `false`. This configuration typically has no side effects because if an application
    is designed to run as non-root, it should not require privilege escalation during
    its lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: The root user has special permissions and privileges in a Linux system, and
    preventing the root user from owning container processes, escalating privileges
    to become root, or limiting the root user lifetime with init containers will help
    prevent container breakout attacks and ensure adherence to the general security
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting Container Capabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In essence, a container is a process that runs on a node, and it can have the
    same privileges a process can have. If the process requires a kernel-level call,
    it needs to have the privileges to do so in order to succeed. You can do this
    either by running the container as root, which grants all privileges to the container,
    or by assigning specific capabilities required for the application to function.
  prefs: []
  type: TYPE_NORMAL
- en: Containers with the `.spec.containers[].securityContext.privileged` flag set
    are essentially equivalent to root on the host and bypass the kernel permission
    checks. From a security point of view, this option bundles your container with
    the host system rather than isolating it. Therefore, this flag is typically set
    for containers with administrative capabilities—for example, to manipulate the
    network stack or access hardware devices. It is a better approach to avoid using
    privileged containers altogether and give specific kernel capabilities to containers
    that need them. In Linux, the privileges traditionally associated with the root
    user are divided into distinct capabilities, which can be independently enabled
    and disabled. Finding out what capabilities your container has is not straightforward.
    You can employ a whitelisting approach and start your container without any capabilities
    and gradually add capabilities when needed for every use case within the container.
    You might need the help of your security team, or you can use tools such as SELinux
    in permissive mode and check the audit logs of your application to discover what
    capabilities it needs, if any.
  prefs: []
  type: TYPE_NORMAL
- en: To make containers more secure, you should provide them with the least amount
    of privileges needed to run. The container runtime assigns a set of default privileges
    (capabilities) to the container. Contrary to what you might expect, if the `.spec.containers[].securityContext.capabilities`
    section is left empty, the default set of capabilities defined by the container
    runtime are far more generous than most processes need, opening them up to exploits.
    A good security practice for locking down the container attack surface is to drop
    all privileges and add only the ones you need, as shown in [Example 23-2](#process-containment-permissions).
  prefs: []
  type: TYPE_NORMAL
- en: Example 23-2\. Setting Pod permissions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_process_containment_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Removes all default capabilities assigned to the container by the container
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_process_containment_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds back only the `NET_BIND_SERVICE` capability.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we drop all the capabilities and add back only the `NET_BIND_SERVICE`
    capability, which allows binding to privileged ports with numbers lower than 1024\.
    An alternative approach for addressing this scenario is to replace the container
    with one that binds to an unprivileged port number.
  prefs: []
  type: TYPE_NORMAL
- en: A Pod is more likely to be compromised if its Security Context is not configured
    or is too permissive. Limiting the capabilities of containers to the very minimum
    acts as an additional line of defense against known attacks. A malicious actor
    who breaches an application would have a harder time taking control of the host
    when the container process is not privileged or when the capabilities are severely
    limited.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding a Mutable Container Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, containerized applications should not be able to write to the container
    filesystem because containers are ephemeral and any state will be lost upon restart.
    As discussed in [Chapter 11, “Stateless Service”](ch11.html#StatelessService),
    state should be written to external persistence methods such as database or filesystems.
    Logs should be written to stdout or forward to a remote log collector. Such an
    application can limit the attack surface of the container further by having a
    read-only container filesystem. A read-only filesystem will prevent any rogue
    user from tampering with the application configuration or installing additional
    executables on the disk that can be used for further exploits. The way to do that
    is to set `.spec.containers[].securityContext.readOnlyRootFile` to `true`, which
    will mount the container’s root filesystem as read-only. This prevents any writes
    to the container’s root filesystem at runtime and enforces the principle of immutable
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The complete list of values in the `securityContext` field has many more items
    and can vary between Pod and container configurations. It is beyond the scope
    of this book to cover all security configurations. The two other must-check security
    context options are `seccompProfile` and `seLinuxOptions`. The first one is a
    Linux kernel feature that can be used to limit the process running in a container
    to call only a subset of the available system calls. These system calls are configured
    as profiles and applied to a container or Pod.
  prefs: []
  type: TYPE_NORMAL
- en: The latter option, `seLinuxOptions`, can assign custom SELinux labels to all
    containers within the Pod as well as the volume. SELinux uses policies to define
    which processes can access other labeled objects in the system. In Kubernetes,
    it is typically used to label the container image in such a way as to restrict
    the process to access only files within the image. When SELinux is supported on
    the host environment, it can be strictly enforced to deny access, or it can be
    configured in permissive mode to log access violations.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring these fields for every Pod or container causes them to be prone
    to human errors. Unfortunately, setting them is usually the responsibility of
    the workload authors who are not typically the security subject-matter experts
    in the organization. That is why there are also cluster-level, policy-driven means
    defined by cluster administrators for ensuring all Pods in a namespace meet the
    minimum security standards. Let’s briefly review that next.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing Security Policies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we’ve explored setting security parameters of the container runtime
    using the `securityContext` definition as part of the Pod and container specifications.
    These specifications are created individually per Pod and usually indirectly through
    higher abstractions such as Deployments, Jobs, and CronJobs. But how can a cluster
    administrator or a security expert ensure that a collection of Pods follows certain
    security standards? The answer is in the Kubernetes Pod Security Standards (PSS)
    and Pod Security Admission (PSA) controller. PSS defines a common understanding
    and consistent language around security policies, and PSA helps enforce them.
    This way, the policies are independent of the underlying enforcement mechanism
    and can be applied through PSS or other third-party tools. These policies are
    grouped in three security profiles that are cumulative, from highly permissive
    to highly restrictive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Privileged
  prefs: []
  type: TYPE_NORMAL
- en: This is an unrestricted profile with the widest possible level of permissions.
    It is purposely left open and offers allow-by-default mechanisms for trusted users
    and infrastructure workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Baseline
  prefs: []
  type: TYPE_NORMAL
- en: This profile is for common noncritical application workloads. It has a minimally
    restrictive policy and provides a balance between ease of adoption and prevention
    from known privilege escalations. For example, it won’t allow privileged containers,
    certain security capabilities, and even other configurations outside of the `securityContext`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: Restricted
  prefs: []
  type: TYPE_NORMAL
- en: This is the most restrictive profile that follows the latest security-hardening
    best practices at the expense of adoption. It is meant for security-critical applications,
    as well as lower-trust users. On top of the Baseline profile, it puts restrictions
    on the fields we reviewed earlier, such as `allowPrivilegeEscalation`, `runAsNonRoot`,
    `runAsUser`, and other container configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'PodSecurityPolicy was the legacy security-policy-enforcement mechanism that
    was replaced with PSA in Kubernetes v1.25\. Going forward, you can use a third-party
    admission plugin or the built-in PSA controller to enforce the security standards
    for each namespace. The security standards are applied to a Kubernetes namespace
    using labels that define the standard level as described earlier and one or more
    actions to take when a potential violation is detected. Following are the actions
    you can take:'
  prefs: []
  type: TYPE_NORMAL
- en: Warn
  prefs: []
  type: TYPE_NORMAL
- en: The policy violations are allowed with a user-facing warning.
  prefs: []
  type: TYPE_NORMAL
- en: Audit
  prefs: []
  type: TYPE_NORMAL
- en: The policy violations are allowed with an auditing log entry recorded.
  prefs: []
  type: TYPE_NORMAL
- en: Enforce
  prefs: []
  type: TYPE_NORMAL
- en: Any policy violations will cause the Pod to be rejected.
  prefs: []
  type: TYPE_NORMAL
- en: With these options defined, [Example 23-3](#process-containment-standard-enformcent)
    creates a namespace that rejects any Pods that don’t satisfy the *baseline* standard,
    and also generates a warning for Pods that don’t meet the *restricted* standards
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Example 23-3\. Set security standards for a namespace
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_process_containment_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Label hinting to the PSA controller to reject Pods that violate the *baseline*
    standard.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_process_containment_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Version of the security-standard requirements to use (optional).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_process_containment_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Label hinting to the PSA controller to warn about Pods that violate the *restricted*
    standard.
  prefs: []
  type: TYPE_NORMAL
- en: This example creates a new namespace and configures the security standards to
    apply to all Pods that will be created in this namespace. It is also possible
    to update the configuration of a namespace or apply the policy to one or all existing
    namespaces. For details on how to do this in the least distributive way, check
    out [“More Information”](#ch23moreinfo).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the common security challenges with Kubernetes is running legacy applications
    that are not implemented or containerized with Kubernetes security controls in
    mind. Running a privileged container can be a challenge on Kubernetes distributions
    or environments with strict security policies. Understanding how Kubernetes does
    process containment at runtime and configures security boundaries, as shown in
    [Figure 23-1](#img-process-containment), will help you create applications that
    run on Kubernetes more securely. It is important to realize that a container is
    not only a packaging format and not only a resource isolation mechanism, but when
    configured properly, it is also a security fence.
  prefs: []
  type: TYPE_NORMAL
- en: '![A containerized process is contained and only certain operations allowed
    to reach the node](assets/kup2_2301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23-1\. Process Containment pattern
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The tendency of shifting left the security considerations and testing practices,
    including deploying into Kubernetes with the production security standards, is
    getting more popular. Such practices help identify and tackle security issues
    earlier in the development cycle and prevent last-minute surprises.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*Shifting left* is all about doing things earlier rather than later. It’s about
    going leftward on the time ray that describes a development and deployment process.
    In our context, shift left implies that the developer already thinks about operational
    security when developing the application. See more details about the Shift Left
    model on [Devopedia](https://oreil.ly/cdw3f).'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we hope that we have given you enough food for thought when
    creating secure cloud native applications. The guidelines in this chapter will
    help you design and implement applications that don’t write to the local filesystem
    or require root privileges (for example, when containerizing applications, to
    ensure the container has a designated non-root user) and configure the security
    context. We hope that you understand exactly what your application needs and give
    it only the minimum permissions. We also aimed to help you build boundaries between
    the workloads and the host, to reduce container privileges and configuring the
    runtime environment to limit resource utilization in the event of a breach. In
    this endeavor, the *Process Containment* pattern ensures “what happens in a container
    stays in a container,” including any security breaches.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Process Containment Example](https://oreil.ly/Seeg_)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configure a Security Context for a Pod or Container](https://oreil.ly/e7lKN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pod Security Admission](https://oreil.ly/S8ac9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pod Security Standards](https://oreil.ly/2xzlg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enforce Pod Security Standards with Namespace Labels](https://oreil.ly/FnVMh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Admission Controllers Reference: PodSecurity](https://oreil.ly/QnhLj)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linux Capabilities](https://oreil.ly/GkHt7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Security Contexts and SCCs](https://oreil.ly/IkMnH)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Kubernetes Security Context Settings You Should Understand](https://oreil.ly/f04Xj)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Risk Analysis Tool for Kubernetes Resources](https://oreil.ly/pbAqs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
