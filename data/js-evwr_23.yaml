- en: Chapter 22\. Mobile Application Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My wife is a photographer, which means that much of her life is based around
    composing images within a rectangular frame. In photography there are many variables—subject,
    light, angle—but the proportions of the image remain consistent. With that limitation,
    incredible things happen, shaping the way that we see and remember the world around
    us. Mobile application development presents a similar opportunity. Within the
    constraints of a small rectangular screen, we can build incredibly powerful applications
    with immersive user experiences.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll begin to build out a shell for our application. To do
    this, we’ll first take a closer look at some of the key building blocks of React
    Native components. From there we’ll look at how to apply styles to our application,
    both with React Native’s built-in style support as well as with our CSS-in-JS
    library of choice, Styled Components. Once we’ve covered how to apply styles,
    we’ll take a look at how to integrate routing into our application. Finally, we’ll
    explore how to easily enhance our app interfaces with icons.
  prefs: []
  type: TYPE_NORMAL
- en: React Native Building Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s begin by taking a look at the basic building blocks of a React Native
    application. You may have already guessed that a React Native application consists
    of React components written in JSX. But without an HTML page’s DOM (document object
    model), what exactly goes within those components? We can start by looking at
    the “Hello World” component at *src/Main.js*. For now, I’ve removed the styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this markup there are two notable JSX tags: `<View>` and `<Text>`. If you’re
    coming from a web background, a `<View>` tag serves much of the same purpose as
    a `<div>` tag. It is a container for the content of our applications. On their
    own they don’t do much, but they contain all of our app’s content, can be nested
    within one another, and are used to apply styles. Each of our components will
    be contained within a `<View>`. In React Native, you can use a `<View>` anywhere
    that you might use a `<div>` or `<span>` tag on the web. The `<Text>` tag, unsurprisingly,
    is used to contain any text in our app. Unlike on the web, however, this single
    tag is used for all text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, we can also add images to our applications, by using the
    `<Image>` JSX element. Let’s update our *src/Main.js* file to include an image.
    To do so, we import the `Image` component from React Native and use an `<Image>`
    tag with a `src` attribute (see [Figure 22-1](#rn_image)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code renders some text and image within a view. You may notice
    that our `<View>` and `<Image>` JSX tags are passed properties that allow us to
    control specific behavior (in this case the style of the view and the source of
    the image). Passing properties to an element allows us to extend the element with
    all sorts of additional features. React Native’s [API documentation](https://oreil.ly/3fACI)
    catalogs the properties that are made available to each element.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of an iPhone simulator demonstrating our app with an image](assets/jsev_2201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-1\. Using the <Image> tag we can add images to our application (photo
    by [Windell Oskay](https://oreil.ly/lkW3F))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Our app doesn’t do much yet, but in the next section we’ll explore how we can
    improve the look and feel using React Native’s built-in style support and Styled
    Components.
  prefs: []
  type: TYPE_NORMAL
- en: Style and Styled Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As app developers and designers, we want to be able to style our applications
    to have a precise look, feel, and user experience. There are a number of UI component
    libraries, such as [NativeBase](https://nativebase.io) or [React Native Elements](https://oreil.ly/-M8EE),
    which offer a wide range of predefined and often customizable components. These
    are well worth a look, but for our purposes let’s explore how we might compose
    our own styles and application layouts.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we’ve already seen, React Native provides a `style` property that allows
    us to apply custom styles to any JSX element in our application. The style names
    and values match those of CSS, except that the names are written in camelCase,
    such as `lineHeight` and `backgroundColor`. Let’s update our */src/Main.js* file
    to include some styles for the `<Text>` element (see [Figure 22-2](#rn_styles)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of the hello world app with styled text](assets/jsev_2202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-2\. Using styles we can adjust the look of our <Text> element
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may be thinking, rightfully, that applying styles at the element level would
    quickly become an unmaintainable mess. We can use React Native’s `StyleSheet`
    library to help organize and reuse our styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add `StyleSheet` to our list of imports ([Figure 22-3](#rn_stylesheets)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can abstract our styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Native uses the CSS flexbox algorithm to define layout styles. We won’t
    be covering flexbox in depth, but React Native [offers documentation](https://oreil.ly/owhZK)
    that clearly explains flexbox and its use cases for arranging elements on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of our application with additional styles applied](assets/jsev_2203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-3\. By using stylesheets we can scale the styles of our application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Styled Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While React Native’s built-in `style` properties and `StyleSheets` may offer
    everything that we need out of the box, they are far from our only options for
    styling our applications. We can also make use of popular web CSS-in-JS solutions,
    such as [Styled Components](https://www.styled-components.com) and [Emotion](https://emotion.sh).
    These offer, in my opinion, a cleaner syntax, are more closely aligned to CSS,
    and limit the amount of context switching needed between the web and mobile application
    codebases. Using these web-enabled CSS-in-JS libraries also creates the opportunity
    to share styles or components across platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, let’s look at how we can adapt the previous example to use
    the Styled Components library. First, in *src/Main.js* we will import the `native`
    version of the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'From here we can migrate our styles to the Styled Components syntax. If you
    followed along in [Chapter 13](ch13.html#web-styles), this syntax should look
    very familiar. The final code of our *src/Main.js* file becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Styled Components Capitalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Styled Components library, the element names must always be capitalized.
  prefs: []
  type: TYPE_NORMAL
- en: With this we’re now able to apply custom styling to our applications, with the
    option of using React Native’s built-in style system or Styled Components library.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the web we can use HTML anchor links to link from one HTML document to any
    other, including those on our own site. For JavaScript-driven applications we
    use routing to link together JavaScript-rendered templates. What about native
    mobile applications? For these, we will route our users between screens. In this
    section we’ll explore two common routing types: tab-based navigation and stack
    navigation.'
  prefs: []
  type: TYPE_NORMAL
- en: Tabbed Routing with React Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To perform our routing we’ll make use of the [React Navigation library](https://reactnavigation.org),
    which is the routing solution recommended by both the React Native and Expo teams.
    Most importantly, it makes it very straightforward to implement common routing
    patterns with a platform-specific look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, let’s first create a new directory within our *src* directory
    named *screens*. Within the *screens* directory, let’s create three new files,
    each containing a very basic React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following in *src/screens/favorites.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this in *src/screens/feed.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add this in *src/screens/mynotes.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then create a new file at *src/screens/index.js* to be used as the root
    of our application’s routing. We’ll begin by importing our initial `react` and
    `react-navigation` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With these dependencies imported, we can create a tab navigator between these
    three screens using React Navigation’s `createBottomTabNavigator` to define which
    React component screens should appear in our navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let’s update our *src/Main.js* file to do nothing but import our router.
    It should now be simplified to read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Be sure that your application is running by entering the **`npm start`** command
    in your terminal. You should now see tab navigation at the bottom of the screen,
    where tapping a tab will route you to the appropriate screen ([Figure 22-4](#tabbed_navigation)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of our application with tab based navigation](assets/jsev_2204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-4\. We can now navigate between screens with tabbed navigation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Stack Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A second kind of routing type is stack navigation, in which screens are conceptually
    “stacked” on top of one another, allowing users to navigate deeper into and backward
    through the stack. Consider a news application where a user views a feed of articles.
    The user can tap a news article title and navigate deeper in the stack to the
    article contents. They can then click a back button, navigating back to the article
    feed, or perhaps a different article title, navigating deeper into the stack.
  prefs: []
  type: TYPE_NORMAL
- en: In our application we want users to be able to navigate from a feed of notes
    to the notes themselves and back. Let’s look at how we might implement a stack
    navigation for each of our screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create a new `NoteScreen` component, which will contain the second
    screen in our stack. Create a new file at *src/screens/note.js* with a minimal
    React Native component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will make the changes to our router to enable stacked navigation for
    the `NoteScreen` component. To do so, we’ll import `createStackNavigator` from
    `react-navigation-stack` as well as our new *note.js* component. In *src/screens/index.js*
    update the imports to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With our libraries and files imported, we can implement the stack navigation
    capability. In our router file we must tell React Navigation which screens are
    “stackable.” For each of our tabbed routes, we’ll want a user to be able to navigate
    to a `Note` screen. Go ahead and define those stacks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can update our `TabNavigator` to reference the stack, rather than an
    individual screen. To do this, update the `screen` property in each `TabNavigator`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'All together, our *src/screens/index.js* file should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If we open our application in a simulator or the Expo app on our device, we
    should see no discernible difference. This is because we have yet to add a link
    to our stacked navigation. Let’s update our *src/screens/feed.js* component to
    include a stacked navigation link.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, first include the `Button` dependency from React Native:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can include a button that, on press, will navigate to the content of
    our *note.js* component. We will pass the component `props`, which will contain
    the navigation information, and add a `<Button>` that will include the `title`
    and `onPress` props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With this, we should be able to navigate between our screens. Click the button
    from the Feed screen to navigate to the Note screen, and click the arrow to return
    ([Figure 22-5](#stack_navigation)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Feed and Note screen](assets/jsev_2205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-5\. Clicking the button link will navigate to the new screen, while
    clicking the arrow will return the user to the previous screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adding Screen Titles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding the stack navigator automatically adds a title bar to the top of our
    app. We can style or even remove that top bar. For now let’s add a title to each
    screen at the top of our stack. To do this, we will set the component `navigationOptions`
    outside of the component itself. In *src/screens/feed.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We can repeat this process for our other screen components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/screens/favorites.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/screens/mynotes.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now each of our screens will include a title in the top navigation bar ([Figure 22-6](#mobile_nav_title)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of our app with a top navigation title](assets/jsev_2206.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-6\. Setting the title in navigationOptions will add it to the top
    nav bar
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now our navigation is functionally complete, but lacks a visual component
    to make it easier for users. Thankfully, Expo makes it incredibly easy to include
    icons in our application. We can search all of the icons that Expo makes available
    by visiting [*expo.github.io/vector-icons*](https://expo.github.io/vector-icons).
    A number of icon sets are included, such as Ant Design, Ionicons, Font Awesome,
    Entypo, Foundation, Material Icons, and Material Community Icons. This provides
    us with a tremendous amount of variety out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add some icons to our tabbed navigation. First, we must import the icon
    sets that we’d like to use. In our case, we’ll make use of the Material Community
    Icons by adding the following in *src/screens/index.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now anywhere we want to use an icon in a component, we can include it as JSX,
    including setting properties such as `size` and `color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll be adding our icons to our tab navigation. React Navigation includes
    a property called the `tabBarIcon` property, which allows us to set the icon.
    We can pass this as a function, which enables us to set the `tintColor`, so that
    active tab icons have a different color than those that are inactive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With this, our tabbed navigation will display icons ([Figure 22-7](#mobile_nav_icon)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the application including navigation icons](assets/jsev_2207.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22-7\. Our application’s navigation now includes icons
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered how to build the basic components of a React Native
    application. You’re now able to create components, add styles to them, and navigate
    between them. Hopefully with this basic setup, you can see the incredible potential
    of React Native. With minimal new technologies, you are already able to build
    the beginnings of an impressive and professional mobile application. In the next
    chapter, we’ll use GraphQL to include data from our API within the application.
  prefs: []
  type: TYPE_NORMAL
