- en: Chapter 2\. Getting Started with AWS Amplify
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章\. 使用 AWS Amplify 入门
- en: At the core of most applications is the data/API layer. This layer could look
    like many things. In the serverless world, this usually will be composed of a
    combination of API endpoints and serverless functions. These serverless functions
    could be doing some logic and returning data, interacting with a database of some
    kind, or even interacting with another API endpoint.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序的核心是数据/API 层。这一层可能有很多形式。在无服务器世界中，这通常将由一组 API 端点和无服务器函数组成。这些无服务器函数可以执行一些逻辑并返回数据，与某种数据库交互，甚至与另一个
    API 端点交互。
- en: 'There are two main ways of creating APIs with Amplify:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Amplify 创建 API 的两种主要方式有：
- en: A combination of Amazon API Gateway and a Lambda function
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon API Gateway 和 Lambda 函数的组合
- en: A GraphQL API connected to some type of data source (database, Lambda function,
    or HTTP endpoint)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与某种数据源（数据库、Lambda 函数或 HTTP 端点）连接的 GraphQL API
- en: API Gateway is an AWS service that allows you to create API endpoints and route
    them to different services, often via a Lambda function. When you make an API
    call, it will route the request through API Gateway, invoke the function, and
    return the response. Using the Amplify CLI, you can create both the API Gateway
    endpoint as well as the Lambda function; the CLI will automatically configure
    the API to be able to invoke the Lambda function via an HTTP request.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: API 网关是 AWS 的一个服务，允许您创建 API 端点并将其路由到不同的服务，通常通过 Lambda 函数。当您发起 API 调用时，它将通过 API
    网关路由请求，调用函数，并返回响应。使用 Amplify CLI，您可以创建 API 网关端点以及 Lambda 函数；CLI 将自动配置 API，以便通过
    HTTP 请求调用 Lambda 函数。
- en: Once your API is created, you then need a way to interact with it. Using the
    Amplify client you will be able to send requests to the endpoint using the Amplify
    `API` class. The `API` class allows you to interact with both GraphQL APIs as
    well as API Gateway endpoints, as shown in [Figure 2-1](#fig2a).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 API 后，您需要一种与其交互的方式。使用 Amplify 客户端，您将能够使用 Amplify `API` 类向端点发送请求。`API` 类允许您与
    GraphQL API 和 API 网关端点进行交互，如 [图 2-1](#fig2a) 所示。
- en: In this chapter, you’ll create your first full stack serverless app that will
    interact with a serverless function via an API Gateway endpoint. You’ll use the
    CLI to create an API endpoint as well as a serverless function, and then use the
    Amplify client libraries to interact with the API.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建您的第一个全栈无服务器应用程序，该应用程序将通过 API 网关端点与无服务器函数进行交互。您将使用 CLI 创建一个 API 端点以及一个无服务器函数，然后使用
    Amplify 客户端库与 API 进行交互。
- en: '![API with Lambda](Images/fssl_0201.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![带 Lambda 的 API](Images/fssl_0201.png)'
- en: Figure 2-1\. API with Lambda
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. 带 Lambda 的 API
- en: At first, the app will fetch a hardcoded array of items from the function. You’ll
    then learn how to update the function to make an asynchronous HTTP request to
    another API to retrieve data and return it to the client.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，应用程序将从函数中获取一个硬编码的项目数组。然后，您将学习如何更新函数，以便发起异步 HTTP 请求到另一个 API 以检索数据并将其返回给客户端。
- en: Creating and Deploying a Serverless Function
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和部署无服务器函数
- en: At the core of many serverless applications are *serverless functions*. Serverless
    functions run your code in *stateless compute containers* that are event-driven,
    short-lived (may last for one invocation), and fully managed by the cloud provider
    of your choice. These functions scale seamlessly and do not require any server
    operations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多无服务器应用程序的核心是*无服务器函数*。无服务器函数在*无状态计算容器*中运行您的代码，这些容器是事件驱动的，短暂的（可能只持续一个调用），并由您选择的云提供商完全管理。这些函数可以无缝扩展，并且不需要任何服务器操作。
- en: While most people think of serverless functions as being invoked or triggered
    by an API call, these functions can also be triggered by a variety of different
    events. In addition to HTTP requests, a few popular ways to invoke a serverless
    function are via an image upload to a storage service, a database operation (like
    create, update, or delete), or even from another serverless function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数人认为无服务器函数是通过 API 调用触发的，但这些函数也可以通过各种不同的事件触发。除了 HTTP 请求之外，触发无服务器函数的几种常见方式包括通过向存储服务上传图像，数据库操作（如创建、更新或删除），甚至来自另一个无服务器函数。
- en: Serverless functions scale automatically, so there’s no need to worry about
    your application if you get a large spike in traffic. The first time you invoke
    a function, the service provider will create an instance of the function and run
    its handler method to process the event. After the function finishes and returns
    a response, it will remain and process additional events if they come in. If another
    invocation happens while the first event is still processing, the service will
    then create another instance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器函数会自动扩展，因此如果您的应用程序遇到大量流量，无需担心。当您首次调用函数时，服务提供商将创建函数实例并运行其处理程序方法来处理事件。函数完成并返回响应后，它将继续存在并处理额外的事件。如果第一个事件仍在处理时发生另一个调用，服务将创建另一个实例。
- en: Serverless functions also have a payment model that is different from traditional
    infrastructure. With services like AWS Lambda, you only pay for what you use and
    are charged based on the number of requests for your functions and the time it
    takes for your code to execute. This is in contrast to provisioning and paying
    for infrastructure like servers regardless of whether they are being utilized.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器函数还有一个与传统基础设施不同的付款模型。使用像 AWS Lambda 这样的服务，您只需按实际使用付费，按照函数的请求次数和代码执行的时间计费。这与预配并支付服务器等基础设施形成对比，后者无论是否被使用都会收费。
- en: Now that you know about serverless functions, let’s take a look at how you can
    create a serverless function and hook it up to an API that will invoke it from
    an HTTP request.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已了解了无服务器函数，让我们看看如何创建一个无服务器函数，并将其连接到一个 API，该 API 将从 HTTP 请求中调用它。
- en: Creating the React Application and Installing the Dependencies
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 React 应用程序并安装依赖项
- en: 'To get started, you’ll first need to create the React application. To do so,
    you can use `npx`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您首先需要创建 React 应用程序。为此，您可以使用 `npx`：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you will need to install the dependencies. For this app, you’ll only
    need the AWS Amplify library:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要安装依赖项。对于此应用程序，您只需要 AWS Amplify 库：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After installing the dependencies, you can now initialize a new Amplify project
    in the root of the React application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完依赖项后，您现在可以在 React 应用程序的根目录中初始化一个新的 Amplify 项目：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, both the Amplify project and the React app have been successfully created
    and you can begin adding new features.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Amplify 项目和 React 应用程序均已成功创建，您可以开始添加新功能。
- en: Creating a New Serverless Function with the Amplify CLI
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Amplify CLI 创建新的无服务器函数
- en: In the next step, we’ll create the serverless function that you will be using
    for this app. The app you are building in this chapter is a cryptocurrency app.
    At first, you will hardcode an array of cryptocurrency information in the function
    and return it to the client. Later in this chapter, you’ll update this function
    to call another API (CoinLore) and asynchronously fetch and return data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将创建一个无服务器函数，您将在此应用程序中使用它。本章中构建的应用程序是一个加密货币应用程序。首先，您将在函数中硬编码一个加密货币信息数组，并将其返回给客户端。稍后在本章中，您将更新此函数以调用另一个
    API（CoinLore），并异步获取和返回数据。
- en: 'To create the function, run the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建函数，请运行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If the function has successfully been created, you should see a message saying
    “Successfully added resource cryptofunction locally.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数成功创建，您将看到一条消息：“已在本地成功添加资源 cryptofunction。”
- en: You should now see a new subfolder located within the *amplify* directory at
    *amplify/backend/function/cryptofunction*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到一个位于 *amplify* 目录中的新子文件夹 *amplify/backend/function/cryptofunction*。
- en: Walking Through the Code
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码解析
- en: When you created this resource, a new folder in *amplify/backend* was created
    named *function*. All of the functions created by the CLI will be stored in this
    folder. For now, you only have a single function, `cryptofunction`. In the *cryptofunction*
    folder, you will see a couple of configuration files as well as an *src* directory
    where the main function code is located.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建此资源时，将在 *amplify/backend* 中创建一个名为 *function* 的新文件夹。CLI 创建的所有函数都将存储在此文件夹中。目前，您只有一个单独的函数
    `cryptofunction`。在 *cryptofunction* 文件夹中，您将看到一些配置文件以及一个 *src* 目录，其中包含主要函数代码。
- en: Serverless functions are essentially just encapsulated applications running
    on their own. Because the function you created is in JavaScript, you’ll see that
    there are all of the things you’d typically see in any JavaScript application,
    including *package.json* and *index.js* files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器函数本质上只是独立运行的封装应用程序。因为您创建的函数是JavaScript，所以您会看到在任何JavaScript应用程序中通常看到的所有内容，包括*package.json*和*index.js*文件。
- en: Next, have a look at the function entry point located at *src/index.js*, in
    the *cryptofunction* folder. In this file you’ll see that there is a function
    called `exports.handler`. This is the entry point for the function invocation.
    When the function is invoked, this is the code that is run.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请查看位于*src/index.js*中的函数入口点，在*cryptofunction*文件夹中。在这个文件中，您将看到一个名为`exports.handler`的函数。这是函数调用的入口点。当调用函数时，此代码将被运行。
- en: You can handle the event directly in this function if you would like, but since
    you will be working with an API, a more useful way to do this is to proxy the
    path into an express app with routing (i.e., *http://yourapi/<somepath>*). Doing
    this gives you multiple routes in a single function as well as multiple HTTP request
    methods like `get`, `put`, `post`, and `delete` for each route. The *serverless
    express* framework provides an easy way to do this and has been built into the
    function boilerplate for you.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以直接在此函数中处理事件，但由于您将使用API，更有用的方法是将路径代理到具有路由的express应用程序中（即*http://yourapi/<somepath>*）。这样做可以为您提供单个函数中的多个路由以及每个路由的多个HTTP请求方法，如`get`、`put`、`post`和`delete`。*serverless
    express*框架为您提供了一种简便的方法来实现这一点，并已内置到函数的样板中。
- en: 'In *index.js*, you will see a line of code that looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在*index.js*中，您将看到一个类似于这样的代码行：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code is where the event, context, and path are proxied to the express server
    running in *app.js*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码是将事件、上下文和路径代理到运行在*app.js*中的express服务器的地方。
- en: In *app.js*, you will then be able to create HTTP requests against whatever
    routes you create for your API (this example being a `/coins` route to fetch cryptocurrency).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在*app.js*中，然后您将能够针对您为API创建的任何路由创建HTTP请求（本示例为获取加密货币的`/coins`路由）。
- en: Creating the /coins Route
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建/coins路由
- en: Now that you have seen how the application is structured, let’s create a new
    route in *app.js* and return some data from it. The route that you will be creating
    is a `/coins` route. This route will be returning an object containing a coins
    array.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了应用程序的结构，让我们在*app.js*中创建一个新的路由，并从中返回一些数据。您将创建的路由是`/coins`路由。此路由将返回一个包含coins数组的对象。
- en: 'Let’s add the new route. Before the first `app.get(''/items'')` route, add
    the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加新路由。在第一个`app.get('/items')`路由之前，添加以下代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This new route has a hardcoded array of cryptocurrency information. When the
    function is invoked with this route, it will respond with an object containing
    a single property named `coins` that will contain the coins array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新路由有一个硬编码的加密货币信息数组。当使用这个路由调用函数时，它将响应一个包含名为`coins`的单一属性的对象，该属性将包含coins数组。
- en: Adding the API
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加API
- en: Now that the function is created and configured, let’s put an API in front of
    it so you can trigger it with an HTTP request.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在函数已经创建并配置好了，让我们在其前面放置一个API，以便您可以使用HTTP请求触发它。
- en: To do this, you will be using Amazon API Gateway. API Gateway is a fully managed
    service that enables developers to create, publish, maintain, monitor, and secure
    REST and WebSocket APIs. API Gateway is one of the services supported by both
    the Amplify CLI as well as the Amplify client library.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您将使用Amazon API Gateway。API Gateway是一种全管理的服务，使开发人员能够创建、发布、维护、监控和安全地管理REST和WebSocket
    API。API Gateway是Amplify CLI和Amplify客户端库都支持的服务之一。
- en: In this section, you’ll create a new API Gateway endpoint and configure it to
    invoke the Lambda function you created in the previous section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将创建一个新的API Gateway端点，并配置它来调用上一节中创建的Lambda函数。
- en: Creating a New API
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的API
- en: 'To create the API, you can use the Amplify `add` command. From the root of
    the project, run the following command in your terminal:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建API，您可以使用Amplify `add`命令。从项目的根目录，在您的终端中运行以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Deploying the API and the Lambda Function
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署API和Lambda函数
- en: 'Now that the function and API have both been created, you need to deploy them
    to your account to make them live. To do so, you can run the Amplify `push` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在函数和API都已创建好，您需要将它们部署到您的账户以使其生效。为此，您可以运行Amplify `push`命令：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once the deployment has successfully completed, the services are live and ready
    to use.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 部署成功后，服务即已启动并准备就绪。
- en: 'You can use the Amplify CLI `status` command at any time to see the current
    status of your project. The `status` command will list out all of the currently
    configured services in your project and give you the status for each of them:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时使用 Amplify CLI 的 `status` 命令查看项目的当前状态。`status` 命令将列出项目中当前配置的所有服务，并为每个服务提供状态：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The main thing to notice in this status output is the `Operation`. The `Operation`
    tells you what will happen the next time `push` is run in the project. The `Operation`
    property will be set to `Create`, `Update`, `Delete`, or `No Change`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在此状态输出中需要注意的主要内容是 `Operation`。`Operation` 告诉您下次在项目中运行 `push` 时将发生什么。`Operation`
    属性将设置为 `Create`、`Update`、`Delete` 或 `No Change`。
- en: Interacting with the New API
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与新 API 交互
- en: Now that the resources have been deployed, you can begin interacting with the
    API from the React application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在资源已经部署完成，您可以开始从 React 应用程序与 API 进行交互。
- en: Configuring the Client App to Work with Amplify
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置客户端应用以与 Amplify 配合使用
- en: To use the Amplify client library in any application, there is a base configuration
    that needs to be set up, usually at the root level. When you create the resources,
    the CLI populates the *aws-exports.js* file with information about your resources.
    You will use this file to configure the client application to work with Amplify.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在任何应用程序中使用 Amplify 客户端库，通常需要设置基本配置，通常在根级别。创建资源时，CLI 会使用关于资源的信息填充 *aws-exports.js*
    文件。您将使用此文件来配置客户端应用程序以与 Amplify 配合使用。
- en: 'To configure the app, open *src/index.js* and add the following below the last
    import:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置应用程序，请打开 *src/index.js* 并在最后一个导入语句下添加以下内容：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Amplify Client API Category
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amplify 客户端 API 类别
- en: After the client application has been configured, you can begin interacting
    with your resources.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序配置完成后，您可以开始与资源进行交互。
- en: The Amplify client library has various API categories that can be imported and
    used for various types of functionality, including `Auth` for authentication,
    `Storage` for storing items in S3, and `API` for interacting with REST and GraphQL
    APIs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify 客户端库有各种 API 类别，可以导入并用于各种功能，包括用于身份验证的 `Auth`、用于在 S3 中存储项目的 `Storage`，以及用于与
    REST 和 GraphQL API 交互的 `API`。
- en: In this section, you will be working with the `API` category. `API` has various
    methods available—including `API.get`, `API.post`, `API.put`, and `API.del`—for
    interacting with REST APIs, and `API.graphql` for interacting with GraphQL APIs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部分，您将使用 `API` 类别。`API` 具有各种可用的方法，包括 `API.get`、`API.post`、`API.put` 和 `API.del`，用于与
    REST API 交互，以及用于与 GraphQL API 交互的 `API.graphql`。
- en: 'When working with a REST API, `API` takes in three arguments:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 REST API 时，`API` 接受三个参数：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`apiName`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`apiName`'
- en: The name given when you create the API from the command line. In our example,
    this value would be `cryptoapi`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过命令行创建 API 时给定的名称。在我们的示例中，该值将是 `cryptoapi`。
- en: '`path`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`path`'
- en: The path that you would like to interact with. In our example, we created `/coins`,
    so the path would be `/coins`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望与之交互的路径。在我们的示例中，我们创建了 `/coins`，因此路径将是 `/coins`。
- en: '`data`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`'
- en: This is an optional object containing any properties you’d like to pass to the
    API, including headers, query string parameters, or a body.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可选对象，其中包含您希望传递给 API 的任何属性，包括头部、查询字符串参数或主体。
- en: 'In our example, the API call is going to look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，API 调用将如下所示：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The API returns a promise, meaning you can handle the call using either a promise
    or an `async` function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: API 返回一个 promise，这意味着您可以使用 promise 或 `async` 函数来处理调用：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the examples in this book, we’ll be handling promises using `async` functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们将使用 `async` 函数来处理 promise。
- en: Calling the API and Rendering the Data in React
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用 API 并在 React 中渲染数据
- en: 'Next, let’s call the API and render the data. Update *src/App.js* with the
    following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们调用 API 并渲染数据。在 *src/App.js* 中更新如下：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, run the app:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行应用程序：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the app loads, you should see a list of coins with their name, symbol,
    and price, as shown in [Figure 2-2](#fig2b).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序加载时，您应该看到一个包含名称、符号和价格的硬币列表，如图 [2-2](#fig2b) 所示。
- en: '![Fetching data from API](Images/fssl_0202.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![从 API 获取数据](Images/fssl_0202.png)'
- en: Figure 2-2\. Fetching data from the API
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. 从 API 获取数据
- en: Updating the Function to Call Another API
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新调用另一个 API 的功能
- en: Next, you’ll update the function to call another API, the CoinLore API, that
    will return dynamic data from the CoinLore service. The user will be able to add
    set filters like `limit` and `start` to limit the number of items coming back
    from the API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将更新函数以调用另一个 API，即 CoinLore API，该 API 将从 CoinLore 服务返回动态数据。用户将能够添加类似 `limit`
    和 `start` 的过滤器，以限制从 API 返回的项目数。
- en: To get started, you will first need a way to interact with an HTTP endpoint
    in the Lambda function. The library you will be using for this lesson is the Axios
    library. Axios is a promise-based HTTP client for the browser and Node.js.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您首先需要一种方法与 Lambda 函数中的 HTTP 端点进行交互。本课程中您将使用的库是 Axios 库。Axios 是一个基于承诺的浏览器和
    Node.js 的 HTTP 客户端。
- en: Installing Axios
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Axios
- en: 'The first thing you need to do is install the Axios package in your function
    folder in order to send HTTP requests from the function. Navigate to *amplify/backend/function/cryptofunction/src*,
    install Axios, and then navigate back to the root of the app:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是在函数文件夹中安装 Axios 包，以便从函数中发送 HTTP 请求。导航到 *amplify/backend/function/cryptofunction/src*，安装
    Axios，然后返回应用程序的根目录：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Updating the Function
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新函数
- en: 'Next, update the `/coins` route in *amplify/backend/function/cryptofunction/src/app.js*
    with the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新位于 *amplify/backend/function/cryptofunction/src/app.js* 中的 `/coins` 路由如下：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding function, we’ve imported the Axios library and then used it
    to make an API call to the CoinLore API. In the API call, you can pass in a `start`
    and `limit` parameter to the request to define the number of coins to return,
    as well as to define the starting point.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述函数中，我们导入了 Axios 库，然后使用它向 CoinLore API 发送了 API 调用。在 API 调用中，您可以传递 `start`
    和 `limit` 参数到请求中，以定义返回的硬币数量，并定义起始点。
- en: In the `req` parameter, there is an `apiGateway` property that holds the `event`
    and the `context` variables. In the function just defined, there is a check to
    see if this `event` exists as well as the `queryStringParameters` property on
    the `event`. If the `queryStringParameters` property exists, we use those values
    to update the base URL with the parameters. Using `queryStringParameters`, the
    user can specify the `start` and `limit` values when querying the CoinLore API.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `req` 参数中，有一个 `apiGateway` 属性，其中包含 `event` 和 `context` 变量。在刚刚定义的函数中，有一个检查以查看是否存在此
    `event`，以及 `event` 上的 `queryStringParameters` 属性。如果 `queryStringParameters` 属性存在，我们将使用这些值来更新基本
    URL，并使用 `queryStringParameters`，用户可以在查询 CoinLore API 时指定 `start` 和 `limit` 值。
- en: 'Once the function is updated, you can deploy the updates by running the `push`
    command in your terminal:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数更新完成，您可以通过在终端中运行 `push` 命令来部署更新：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Updating the Client App
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新客户端应用程序
- en: Now that you have updated the function, let’s update the React app to give the
    user the option to specify the `limit` and `start` parameters.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经更新了函数，让我们更新 React 应用程序，以便用户可以指定 `limit` 和 `start` 参数。
- en: To do so, you’ll need to add fields for user input and give the user a button
    to trigger a new API request.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您需要添加用户输入字段，并为用户提供一个按钮来触发新的 API 请求。
- en: 'Update *src/App.js* with the following changes:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 *src/App.js* 如下所示：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, run the app:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行应用程序：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations, you’ve deployed your first serverless API!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已部署了您的第一个无服务器 API！
- en: 'Here are a few things to keep in mind from this chapter:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章中需要记住的几点是：
- en: Lambda functions can be triggered from a variety of events. In this chapter,
    we triggered the function using an API call from API Gateway.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 函数可以通过各种事件触发。在本章中，我们通过 API Gateway 的 API 调用触发了该函数。
- en: Lambda functions can be created from the Amplify CLI by using the command `amplify
    add function`, and APIs can be created using the command `amplify add api`.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 Amplify CLI 通过 `amplify add function` 命令创建 Lambda 函数，并通过 `amplify add api`
    命令创建 API。
- en: A single API Gateway endpoint can be configured to work with multiple Lambda
    functions. In the example in this chapter, we have only connected it to a single
    function.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个 API Gateway 端点可以配置为与多个 Lambda 函数配合使用。在本章的示例中，我们仅将其连接到了单个函数。
- en: Lambda functions are essentially self-contained Node.js applications. In the
    example for this chapter, we chose to run an express application in order to handle
    REST methods like `get`, `post`, and `delete`, though we have only worked with
    a `get` call at this point.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 函数本质上是独立的 Node.js 应用程序。在本章的示例中，我们选择运行一个 express 应用程序以处理 `get`、`post`
    和 `delete` 等 REST 方法，尽管到目前为止我们只使用了 `get` 调用。
- en: The `API` category from the Amplify client library can be used with both GraphQL
    as well as REST APIs.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amplify客户端库中的`API`类别可用于GraphQL和REST API。
